
.vsteensy/build/mtp-test_T36.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
000137c8 l    d  .fini	00000000 .fini
000137cc l    d  .ARM.exidx	00000000 .ARM.exidx
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0970 l    d  .data	00000000 .data
1fff1478 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
0000c5f0 l     F .text	0000000c startup_default_early_hook
0000c5fc l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff1478 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff147c l       .bss	00000000 object.8610
000137bc l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mtp-test.ino
000005d4 l     F .text	00000002 __tcf_0
00001370 l     F .text	000000f0 _GLOBAL__sub_I__Z17usb_mtp_configurev
00000000 l    df *ABS*	00000000 Storage.cpp
00001640 l     F .text	000000a0 File::invalidate() [clone .isra.0]
00001ba8 l     F .text	00000070 MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.13]
0000301c l     F .text	00000030 MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.9] [clone .constprop.11]
0000304c l     F .text	00000036 MTPStorage_SD::ScanAll(unsigned long) [clone .part.8] [clone .constprop.12]
000030cc l     F .text	000001c0 MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]
00003d80 l     F .text	00000a34 mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]
00000000 l    df *ABS*	00000000 MTP.cpp
000049f0 l     F .text	00000064 MTPD::write(char const*, int) [clone .part.2]
00004afc l     F .text	000000bc MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]
00005cc0 l     F .text	0000002c MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.6]
000130ac l     O .text	00000028 supported_op
000130d4 l     O .text	00000010 propertyList
00000000 l    df *ABS*	00000000 SPI.cpp
000063b8 l     F .text	000001f8 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]
00000000 l    df *ABS*	00000000 Time.cpp
00006a90 l     F .text	00000018 refreshCache(long) [clone .part.0]
1fff1a64 l     O .bss	00000004 cacheTime
1fff1a68 l     O .bss	00000007 tm
1fff1a70 l     O .bss	00000004 sysTime
1fff1a74 l     O .bss	00000001 Status
1fff1a7c l     O .bss	00000004 prevMillis
1fff09bc l     O .data	00000004 syncInterval
000131c8 l     O .text	0000000c monthDays
1fff1a80 l     O .bss	00000004 nextSyncTime
00000000 l    df *ABS*	00000000 SD.cpp
00006c10 l     F .text	0000005c _GLOBAL__sub_I_SD
00000000 l    df *ABS*	00000000 FmtNumber.cpp
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatFilePrint.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
000079d8 l     F .text	0000001e FsCache::sync() [clone .part.2]
00007a64 l     F .text	00000034 ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]
00007a98 l     F .text	0000002a ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]
00000000 l    df *ABS*	00000000 upcase.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
00008960 l     F .text	00000032 FatFile::openRoot(FatVolume*) [clone .part.36]
00008a7c l     F .text	00000094 FatFile::sync() [clone .part.40]
00000000 l    df *ABS*	00000000 FatFilePrint.cpp
00000000 l    df *ABS*	00000000 FatPartition.cpp
00009868 l     F .text	0000004a FatCache::sync() [clone .part.8]
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
00009c8c l     F .text	00000028 lfnGetChar(DirLfn_t*, unsigned char)
00000000 l    df *ABS*	00000000 FatFileSFN.cpp
0000a678 l     F .text	00000058 FatFile::getSFN(char*) [clone .part.2]
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
0000aa64 l     F .text	00000018 SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]
0000aa7c l     F .text	00000022 SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
0000b060 l     F .text	00000030 sdIrs()
0000b090 l     F .text	00000018 isBusyCommandComplete()
0000b0a8 l     F .text	00000010 isBusyCommandInhibit()
0000b0b8 l     F .text	0000000c isBusyDMA()
0000b0c4 l     F .text	00000014 isBusyFifoRead()
0000b0d8 l     F .text	00000014 isBusyFifoWrite()
0000b0ec l     F .text	00000018 isBusyTransferComplete()
0000b104 l     F .text	000000cc setSdclk(unsigned long)
0000b234 l     F .text	00000028 waitTimeout(bool (*)())
0000b25c l     F .text	0000004c yieldTimeout(bool (*)())
0000b2d8 l     F .text	0000005c cardCommand(unsigned long, unsigned long)
0000b354 l     F .text	00000064 readReg16(unsigned long, void*)
0000b3b8 l     F .text	0000002c isBusyCMD13()
0000b400 l     F .text	00000020 waitDmaStatus() [clone .part.6]
0000b420 l     F .text	000000b4 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
0000b614 l     F .text	00000078 transferStop()
0000b9c4 l     F .text	000000ac cardCMD6(unsigned long, unsigned char*)
1fff1f3c l     O .bss	00000001 m_version2
1fff1f40 l     O .bss	00000010 m_cid
1fff1f50 l     O .bss	00000004 m_busyFcn
1fff1f54 l     O .bss	00000001 m_highCapacity
1fff1f58 l     O .bss	00000004 m_ocr
1fff1f5c l     O .bss	00000004 m_rca
1fff1f60 l     O .bss	00000004 m_irqstat
1fff09c0 l     O .data	00000001 m_errorCode
1fff1f64 l     O .bss	00000001 m_initDone
1fff1f68 l     O .bss	00000010 m_csd
1fff1f78 l     O .bss	00000001 m_dmaBusy
1fff1f7c l     O .bss	00000004 m_sdClkKhz
1fff1f80 l     O .bss	00000004 m_errorLine
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
1fff1f85 l     O .bss	00000001 tx_noautoflush
1fff1f88 l     O .bss	00000004 tx_packet
1fff1f8c l     O .bss	00000001 transmit_previous_timeout
1fff1f90 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 usb_desc.c
1fff09c8 l     O .data	00000012 device_descriptor
1fff09f4 l     O .data	00000069 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 pins_teensy.c
0000ca4c l     F .text	0000004c digitalWrite.part.1
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0ab4 l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff1f9c l     O .bss	00000004 ep0_tx_ptr
1fff1fa0 l     O .bss	00000018 rx_last
1fff1fb8 l     O .bss	00000002 ep0_tx_len
1fff1fbc l     O .bss	00000040 ep0_rx0_buf
1fff1ffc l     O .bss	00000018 rx_first
1fff2014 l     O .bss	00000001 ep0_tx_data_toggle
1fff2018 l     O .bss	00000040 ep0_rx1_buf
1fff2058 l     O .bss	00000018 tx_first
1fff0000 l     O .usbdescriptortable	000000e0 table
1fff2070 l     O .bss	00000018 tx_last
1fff2088 l     O .bss	00000008 setup
1fff2090 l     O .bss	00000001 ep0_tx_bdt_bank
1fff2094 l     O .bss	00000008 reply_buffer
1fff20a0 l     O .bss	00000006 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff20a6 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 serialEvent.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 analog.c
1fff20d5 l     O .bss	00000001 calibrating
1fff0acd l     O .data	00000001 analog_config_bits
1fff20d6 l     O .bss	00000001 analog_reference_internal
1fff0ace l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 efgcvt.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlcat.c
00000000 l    df *ABS*	00000000 strlcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000fc0c l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ecvtbuf.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 mprec.c
00013730 l     O .text	0000000c p05.6087
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 dtoa.c
000106c0 l     F .text	00000128 quorem
00000000 l    df *ABS*	00000000 vfprintf.c
0001374c l     O .text	00000010 zeroes.7258
0001379c l     O .text	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 impure.c
1fff0ad0 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.12/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.12/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 avr_emulation.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff1478 l       .bss	00000000 __bss_start__
1fff2128 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
0000c5e8  w    F .text	00000006 adc0_isr
00001a4c g     F .text	0000015c MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)
0000e780 g     F .text	0000002c .hidden __aeabi_dcmpun
0000c344 g     F .text	0000001c usb_serial_available
0000e744 g     F .text	00000012 .hidden __aeabi_dcmple
0000f7d4 g     F .text	000000ba strcpy
0000e680 g     F .text	0000007a .hidden __cmpdf2
0000b7d0 g     F .text	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000dab4  w    F .text	000000ec yield
0000950c g     F .text	000001e8 FatFile::write(void const*, unsigned int)
0000e680 g     F .text	0000007a .hidden __eqdf2
0000a9d8  w    F .text	00000002 SdSpiCard::~SdSpiCard()
0000dd18 g     F .text	000000ba Print::printNumber64(unsigned long long, unsigned char, unsigned char)
00007310 g     F .text	000003d4 ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)
1fff1948 g     O .bss	00000104 storage
1fff09dc g     O .data	00000018 usb_string_manufacturer_name_default
00009494 g     F .text	00000076 FatFile::truncate()
00001e88 g     F .text	0000003c MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)
0000e1f0 g     F .text	0000005a .hidden __floatdidf
0000c5a0  w    F .text	00000048 hard_fault_isr
0000c5e8  w    F .text	00000006 dma_ch6_isr
1fff1f34 g     O .bss	00000004 FsDateTime::callback
0000dccc g     F .text	00000020 Print::println()
0000c5e8  w    F .text	00000006 uart0_lon_isr
00007210 g     F .text	000000fe ExFatFile::seekSet(unsigned long long)
0000fc2c g     F .text	00000100 fcvtbuf
0000ce18 g     F .text	00000108 usb_rx_memory
0000a9ac  w    F .text	00000004 SdSpiCard::errorCode() const
000004b0  w    F .text	0000000c File::flush()
0000c5e8  w    F .text	00000006 dma_ch8_isr
0000f3cc g     F .text	00000002 __malloc_unlock
000006c8  w    F .text	000000c0 SDFile::openNextFile(unsigned char)
1fff1f38 g     O .bss	00000004 FsVolume::m_cwv
00008d88 g     F .text	000000be FatFile::open(FatFile*, char const*, int)
0000ddf0 g     F .text	000000e0 analog_init
0000cf20 g     F .text	00000084 usb_tx
0000c5e8  w    F .text	00000006 portcd_isr
000096f4 g     F .text	00000020 FatFile::printModifyDateTime(Print*)
0000fabc g     F .text	0000004a _vdprintf_r
00006828 g     F .text	000000b0 SPIClass::setSCK(unsigned char)
00012ed0  w    O .text	00000060 vtable for SDFile
0000f264 g     F .text	000000c6 memmove
00003084 g     F .text	00000046 MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)
0000ffdc g     F .text	0000004c _Balloc
0000c5e8  w    F .text	00000006 can1_rx_warn_isr
0000147c  w    F .text	00000004 MTPStorage_SD::get_FSCount()
000137d4 g       .ARM.exidx	00000000 __exidx_end
0000c5e8  w    F .text	00000006 dma_error_isr
00009a8c g     F .text	0000003c FatPartition::freeChain(unsigned long)
1fff20b8 g     O .bss	00000001 EventResponder::runningFromYield
0000c0ec g     F .text	0000001a SdSpiArduinoDriver::receive()
0000ab9c g     F .text	0000007c SdSpiCard::cardCommand(unsigned char, unsigned long)
0000c5e8  w    F .text	00000006 i2c0_isr
0000dca0 g     F .text	0000002c Print::write(unsigned char const*, unsigned int)
0000e670 g     F .text	0000008a .hidden __gtdf2
00009cb4 g     F .text	00000024 FatFile::lfnChecksum(unsigned char*)
0000eb44 g     F .text	0000000c __errno
00000b64  w    F .text	00000026 SDFile::isDirectory()
0000c5e8  w    F .text	00000006 portd_isr
0000c5e8  w    F .text	00000006 enet_error_isr
00006f90 g     F .text	000000ae ExFatFile::printName(Print*)
00000e24  w    F .text	00000028 File::~File()
1fff20a8 g     O .bss	00000004 EventResponder::firstInterrupt
00004e64 g     F .text	0000006e MTPD::GetObjectHandles(unsigned long, unsigned long)
0000a9dc  w    F .text	0000000e SdSpiCard::~SdSpiCard()
0000a73c g     F .text	00000078 FsBaseFile::FsBaseFile(FsBaseFile const&)
0000c5e8  w    F .text	00000006 tpm1_isr
00007f04 g     F .text	00000018 ExFatPartition::rootLength()
0000a9b0  w    F .text	00000004 SdSpiCard::errorData() const
0000dc90  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
000132fc g     O .text	00000200 digital_pin_to_info_PGM
1fff2124 g     O .bss	00000004 errno
0000ac18 g     F .text	00000054 SdSpiCard::readOCR(unsigned long*)
0000c108 g     F .text	00000020 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
0000a2f0 g     F .text	00000388 FatFile::open(FatFile*, fname_t*, int)
00007dd8 g     F .text	00000012 ExFatPartition::fatGet(unsigned long, unsigned long*)
000137d4 g       .ARM.exidx	00000000 _etext
000065b0 g     F .text	00000134 _spi_dma_rxISR0()
1fff1478 g       .bss	00000000 _sbss
0000e70c g     F .text	00000010 .hidden __aeabi_cdcmple
0000b1dc g     F .text	0000000c SdioCard::errorData() const
00001490 g     F .text	0000000c MTPStorage_SD::totalSize(unsigned long)
00003b40 g     F .text	000000fe MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)
0000b8e0 g     F .text	000000b4 SdioCard::writeSector(unsigned long, unsigned char const*)
0000c5e8  w    F .text	00000006 porte_isr
00001364 g     F .text	0000000c loop
0000c5e8  w    F .text	00000006 portb_isr
0000c5e8  w    F .text	00000006 spi1_isr
00005348 g     F .text	00000144 MTPD::GetStorageInfo(unsigned long)
0000c5e8  w    F .text	00000006 uart3_status_isr
00006ecc g     F .text	000000c4 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
0000c5e8  w    F .text	00000006 mcm_isr
0000be04 g     F .text	000000cc SdioCard::readData(unsigned char*)
0000aae0 g     F .text	00000080 SdSpiCard::readData(unsigned char*, unsigned int)
1fff20ac g     O .bss	00000004 EventResponder::lastInterrupt
0000c5e8  w    F .text	00000006 uart1_status_isr
0000a7b4 g     F .text	00000028 FsBaseFile::close()
0000c198 g     F .text	00000134 memcpy
0000c5e8  w    F .text	00000006 randnum_isr
0000e6fc g     F .text	00000020 .hidden __aeabi_cdrcmple
00000494  w    F .text	0000000c File::available()
00002804 g     F .text	00000816 MTPStorage_SD::ScanDir(unsigned long, unsigned long)
00007e10 g     F .text	00000080 ExFatPartition::freeChain(unsigned long)
0000218c g     F .text	0000046c MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)
00008ffc g     F .text	0000002a FatFile::peek()
00011620 g     F .text	000016e4 _svfprintf_r
0000e180 g     F .text	00000022 .hidden __floatsidf
00000600  w    F .text	00000014 SDFile::whoami()
1fff1494  w    O .bss	00000001 SDFile::name()::zeroterm
1fff1f98 g     O .bss	00000004 systick_millis_count
0000e678 g     F .text	00000082 .hidden __ltdf2
00008548 g     F .text	000000aa ExFatFile::rename(ExFatFile*, char const*)
0000c5a0  w    F .text	00000048 bus_fault_isr
0000099c  w    F .text	00000044 SDFile::truncate(unsigned long long)
00005d64 g     F .text	00000638 MTPD::loop()
0000c5e8  w    F .text	00000006 watchdog_isr
0000e7fc g     F .text	00000000 .hidden __aeabi_uldivmod
0000c5e8  w    F .text	00000006 i2c1_isr
1fff209c g     O .bss	00000001 usb_configuration
0000c5e8  w    F .text	00000006 dma_ch11_isr
00000474  w    F .text	00000006 SdCardInterface::status()
0000b994 g     F .text	00000030 SdioCard::syncDevice()
0000b690 g     F .text	000000cc SdioCard::writeData(unsigned char const*)
00000000  w      *UND*	00000000 __fini_array_end
1fff20b9 g     O .bss	00000001 SPCRemulation::pinout
00000cfc  w    F .text	00000058 StreamFile<FsBaseFile, unsigned long long>::available()
00009028 g     F .text	00000040 FatFile::readDirCache(bool)
0000c5e8  w    F .text	00000006 i2c2_isr
1fff09dc  w    O .data	00000018 usb_string_manufacturer_name
1fff2118 g     O .bss	0000000c usb_rx_byte_count_data
0000c5e8  w    F .text	00000006 pit1_isr
1fff0a60 g     O .data	00000008 usb_string_mtp
0000eba0 g     F .text	00000010 malloc
0000c5e8  w    F .text	00000006 dma_ch4_isr
0000c5e8  w    F .text	00000006 software_isr
00012e4c  w    O .text	00000024 vtable for FsFile
0000c5e8  w    F .text	00000006 dma_ch7_isr
0000639c  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00013640 g     O .text	000000c8 __mprec_tens
0000d9ec g     F .text	000000c8 usb_init
1fff1a60 g     O .bss	00000004 sessionID_
0000a9c4  w    F .text	00000004 SdSpiCard::type() const
0000c5e8  w    F .text	00000006 lptmr_isr
00000da0  w    F .text	00000084 SDFile::seek(unsigned long long, int)
1fff20e0 g     O .bss	00000004 __malloc_top_pad
0000caa8 g     F .text	00000024 rtc_set
0000a9ec g     F .text	00000076 SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
000085f4 g     F .text	000000e2 ExFatFile::truncate()
1fff0970 g     O .data	00000000 .hidden __dso_handle
0000e160 g     F .text	0000001e .hidden __aeabi_ui2d
0000ffc0 g     F .text	0000001c _localeconv_r
1fff0974 g     O .data	00000004 sd_str
0000ca98 g     F .text	00000010 attachInterruptVector
0000c0a4 g     F .text	00000048 SdSpiArduinoDriver::deactivate()
00010158 g     F .text	00000012 __i2b
1fff0970 g       .data	00000000 _sdata
0000050c  w    F .text	0000000c File::operator bool()
00009914 g     F .text	0000000e FatCache::sync()
0000e82c g     F .text	000002e2 .hidden __udivmoddi4
00005194 g     F .text	000001b4 MTPD::getObjectPropValue(unsigned long, unsigned long)
0000dedc g     F .text	00000000 .hidden __aeabi_drsub
00008994 g     F .text	00000034 FatFile::addCluster()
0000f7b0 g     F .text	00000024 _sbrk_r
0000ac6c g     F .text	0000004a SdSpiCard::readRegister(unsigned char, void*)
0000b2b8 g     F .text	00000020 SdioCard::type() const
00000488  w    F .text	0000000c File::write(void const*, unsigned int)
000001d0 g     F .text	000001f0 ResetHandler
0000c2cc g     F .text	00000048 usb_serial_getchar
0000c5e8  w    F .text	00000006 can1_bus_off_isr
0000c5e8  w    F .text	00000006 ftm2_isr
00000950  w    F .text	0000004c SDFile::name()
1fff210c g     O .bss	00000008 usb_cdc_line_coding
0000cacc g     F .text	0000000a digitalWrite
1fff20b0 g     O .bss	00000004 EventResponder::lastYield
0000c5e8  w    F .text	00000006 uart5_status_isr
0000c5e8  w    F .text	00000006 lpuart0_status_isr
00006ea4 g     F .text	00000028 ExFatFile::openRoot(ExFatVolume*)
0001328c g     O .text	00000006 usb_endpoint_config_table
0000c5e8  w    F .text	00000006 dma_ch9_isr
000007f8  w    F .text	00000038 StreamFile<FsBaseFile, unsigned long long>::read()
0000c5e8  w    F .text	00000006 pit2_isr
0000e730 g     F .text	00000012 .hidden __aeabi_dcmplt
1fff20dc g     O .bss	00000004 __malloc_max_sbrked_mem
00000ae4  w    F .text	0000001a SDFile::position()
0000af68 g     F .text	00000042 SdSpiCard::writeStop()
000025f8 g     F .text	00000160 MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)
0000cd64 g     F .text	0000004c usb_free
0000c5e8  w    F .text	00000006 i2c3_isr
0000e1a4 g     F .text	0000003a .hidden __extendsfdf2
0000e4a0 g     F .text	000001d0 .hidden __aeabi_ddiv
0000dee8 g     F .text	00000276 .hidden __adddf3
00005128 g     F .text	0000006c MTPD::getObjectPropsSupported(unsigned long)
00004a54 g     F .text	000000a8 MTPD::writestring(char const*)
0000b02c g     F .text	00000032 SdSpiCard::writeData(unsigned char const*)
000004a0  w    F .text	00000010 File::peek()
00009ac8 g     F .text	000000b0 FatPartition::freeClusterCount()
00000bf0  w    F .text	000000d0 SDClass::open(char const*, unsigned char)
000137cc g       .ARM.exidx	00000000 __exidx_start
0000e24c g     F .text	00000254 .hidden __aeabi_dmul
0000ae60 g     F .text	00000050 SdSpiCard::writeStart(unsigned long)
0000c5e8  w    F .text	00000006 pit0_isr
1fff20b4 g     O .bss	00000004 EventResponder::firstYield
00013528 g     O .text	00000004 _global_impure_ptr
000014a8 g     F .text	00000080 MTPStorage_SD::write(char const*, unsigned long)
0000c5e8  w    F .text	00000006 can1_error_isr
00000844  w    F .text	00000034 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
0000f3d0 g     F .text	000003de _realloc_r
00000b00  w    F .text	00000018 SDFile::read(void*, unsigned int)
0000eb50 g     F .text	00000050 __libc_init_array
1fff2128 g       .bss	00000000 __bss_end
0000c6f8 g     F .text	00000354 dtostrf
00000a30  w    F .text	00000044 SDFile::rewindDirectory()
0000c5e8  w    F .text	00000006 can0_wakeup_isr
000077e4 g     F .text	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
0000b1e8 g     F .text	0000001c SdioCard::readCID(CID*)
00008328 g     F .text	000000ea ExFatFile::addDirCluster()
0000c5e8  w    F .text	00000006 flash_cmd_isr
00003d4c g     F .text	00000034 mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)
0000afd8 g     F .text	00000052 SdSpiCard::writeData(unsigned char, unsigned char const*)
00013708 g     O .text	00000028 __mprec_bigtens
0000dc78  w    F .text	00000004 usb_serial_class::clear()
0000e160 g     F .text	0000001e .hidden __floatunsidf
0000c5e8  w    F .text	00000006 uart2_status_isr
0000c600 g     F .text	0000002c _sbrk
000103ec g     F .text	00000042 __mcmp
00003298 g     F .text	000008a8 mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)
00012f30  w    O .text	00000028 vtable for SDClass
000005c0  w    F .text	00000012 SDFile::operator bool()
1fff09c4 g     O .data	00000004 __brkval
00006d9c g     F .text	00000042 fsPrintDateTime(Print*, unsigned short, unsigned short)
1fff1f94 g     O .bss	00000001 usb_cdc_line_rtsdtr
0000c558 g     F .text	00000048 usb_serial_flush_callback
000137ac g     F .text	00000000 _init
00008a5c g     F .text	0000001e FatFile::cacheDirEntry(unsigned char)
0000c5e8  w    F .text	00000006 svcall_isr
00000b8c  w    F .text	00000062 SDClass::remove(char const*)
000006ac  w    F .text	0000001c SDFile::close()
0000c5e8  w    F .text	00000006 dma_ch15_isr
00000f58  w    F .text	0000005c SDFile::~SDFile()
00006ba8 g     F .text	00000020 day()
0000c5e8  w    F .text	00000006 uart1_error_isr
0000fd2c g     F .text	00000028 __libc_fini_array
0000c5e8  w    F .text	00000006 usbhs_phy_isr
1fff2128 g       .bss	00000000 _ebss
0000b858 g     F .text	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00004bb8 g     F .text	00000244 MTPD::WriteDescriptor()
1fff0978 g     O .data	00000004 propertyListNum
00000cc0  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
000098b4 g     F .text	0000005e FatCache::read(unsigned long, unsigned char)
000100bc g     F .text	00000040 __hi0bits
0000e7ac g     F .text	0000004e .hidden __fixdfsi
00008414 g     F .text	0000005a ExFatFile::mkdir(ExFatFile*, ExName_t*)
0000c5e8 g     F .text	00000006 unused_isr
00004dfc g     F .text	00000068 MTPD::WriteStorageIDs()
0000c5e8  w    F .text	00000006 spi0_isr
0000c5e8  w    F .text	00000006 dma_ch3_isr
00006c0c  w    F .text	00000002 SDClass::~SDClass()
000047b4 g     F .text	000001fc MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)
1fff1498 g     O .bss	000004b0 sdx
00000e24  w    F .text	00000028 File::~File()
00000fb4 g     F .text	00000154 storage_configure()
00006be8 g     F .text	00000024 year()
0000ddec g     F .text	00000004 operator delete(void*, unsigned int)
0000c5e8  w    F .text	00000006 flash_error_isr
0000dee8 g     F .text	00000276 .hidden __aeabi_dadd
0000e678 g     F .text	00000082 .hidden __ledf2
0000c5e8  w    F .text	00000006 uart5_error_isr
0000c5e8  w    F .text	00000006 rtc_seconds_isr
00013134 g     O .text	00000094 SPIClass::spi0_hardware
0000c5e8  w    F .text	00000006 pdb_isr
0001029c g     F .text	000000a0 __pow5mult
00009240 g     F .text	0000005c FatFile::rmdir()
0000e1e0 g     F .text	0000006a .hidden __aeabi_ul2d
0000c5a0  w    F .text	00000048 usage_fault_isr
0000c5e8  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00009a08 g     F .text	00000082 FatPartition::allocateCluster(unsigned long, unsigned long*)
0000c5e8  w    F .text	00000006 dma_ch14_isr
00000d54  w    F .text	0000004c SDClass::exists(char const*)
00000000  w      *UND*	00000000 __deregister_frame_info
1fff2114 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000dc68 g     F .text	00000010 systick_isr
0000c5e8  w    F .text	00000006 rtc_alarm_isr
0000052c  w    F .text	0000000c File::isDirectory()
0000a6d0 g     F .text	00000020 FatFile::getSFN(char*)
0000adb0 g     F .text	00000076 SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000c5e8  w    F .text	00000006 dma_ch2_isr
1fff0abc g     O .data	00000010 Serial
00006c6c g     F .text	00000054 fmtBase10(char*, unsigned short)
0000c5e8  w    F .text	00000006 ftm1_isr
000004c8  w    F .text	00000016 File::seek(unsigned long long, int)
00007834 g     F .text	00000060 ExFatFile::printFileSize(Print*)
0000dc98  w    F .text	00000006 usb_serial_class::write(unsigned char)
0000a85c g     F .text	0000005e FsBaseFile::openNext(FsBaseFile*, int)
0000c5f0  w    F .text	0000000c startup_early_hook
0000c5e8  w    F .text	00000006 dma_ch13_isr
00007fb0 g     F .text	0000008c ExFatFile::addCluster()
00012e70  w    O .text	00000060 vtable for File
0000c5e8  w    F .text	00000006 uart2_error_isr
00000a74  w    F .text	00000054 SDClass::usedSize()
0000c314 g     F .text	00000030 usb_serial_peekchar
0000e76c g     F .text	00000012 .hidden __aeabi_dcmpgt
000016e0 g     F .text	00000002 mtp_yield()
0000f160 g     F .text	00000000 memchr
000099a0 g     F .text	00000066 FatPartition::fatPut(unsigned long, unsigned long)
1fff0a9c g     O .data	00000016 usb_string_serial_number_default
0000c5a0 g     F .text	00000048 fault_isr
0000fdf0 g     F .text	000001d0 _free_r
0000b68c g     F .text	00000004 SdioCard::readStop()
00007a04 g     F .text	00000060 FsCache::get(unsigned long, unsigned char)
0000e758 g     F .text	00000012 .hidden __aeabi_dcmpge
0000c5e8  w    F .text	00000006 usb_charge_isr
00003c40 g     F .text	0000010a MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)
0000dc88  w    F .text	00000004 usb_serial_class::flush()
0000c5e8  w    F .text	00000006 cmt_isr
0000dee4 g     F .text	0000027a .hidden __aeabi_dsub
00009b78 g     F .text	00000114 FatPartition::init(BlockDeviceInterface*, unsigned char)
0000c5e8  w    F .text	00000006 usbhs_isr
00008b74 g     F .text	0000014e FatFile::mkdir(FatFile*, fname_t*)
1fff1474 g     O .data	00000004 __malloc_sbrk_base
0000dc80  w    F .text	00000004 usb_serial_class::read()
0000c5e8  w    F .text	00000006 ftm3_isr
00000570  w    F .text	0000000c File::rewindDirectory()
0000c5e8  w    F .text	00000006 tsi0_isr
0000a110 g     F .text	00000128 FatFile::remove()
0000e1e0 g     F .text	0000006a .hidden __floatundidf
0000c62c  w    F .text	00000002 __cxa_pure_virtual
0001033c g     F .text	000000ae __lshift
00008cc4 g     F .text	000000c2 FatFile::mkdir(FatFile*, char const*, bool)
0000c5e8  w    F .text	00000006 spi2_isr
00007f58 g     F .text	00000058 exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)
00012d04 g     F .text	00000100 __ssprint_r
00010600 g     F .text	0000005e _vasnprintf_r
0000dde4  w    F .text	00000002 serialEvent()
1fff2015 g     O .bss	00000001 usb_reboot_timer
0000fb68 g     F .text	000000a4 __register_exitproc
000076e4 g     F .text	000000fe ExFatFile::open(ExFatFile*, char const*, int)
00006d14 g     F .text	00000050 fsFmtDate(char*, unsigned short)
0000f8e4 g     F .text	0000002c strlcpy
0000fa1c g     F .text	000000a0 strncmp
00008470 g     F .text	000000d6 ExFatFile::mkdir(ExFatFile*, char const*, bool)
0000c360 g     F .text	00000038 usb_serial_flush_input
00007e90 g     F .text	00000072 ExFatPartition::freeClusterCount()
00002078 g     F .text	00000064 MTPStorage_SD::ConstructFilename(int, char*, int)
00006d64 g     F .text	00000038 fsFmtTime(char*, unsigned short)
0001016c g     F .text	00000130 __multiply
0000c4a0 g     F .text	00000018 usb_serial_putchar
00000022 g       *ABS*	00000000 _teensy_model_identifier
1fff20e4 g     O .bss	00000028 __malloc_current_mallinfo
00010544 g     F .text	000000ba __d2b
1fff20bc g     O .bss	00000018 HardwareSerial::s_serials_with_serial_events
0000c5e8  w    F .text	00000006 can0_bus_off_isr
0000b2a8  w    F .text	0000000e SdioCard::~SdioCard()
00001480  w    F .text	00000008 MTPStorage_SD::get_FSName(unsigned long)
00006dfc g     F .text	000000a6 ExFatFile::getName(char*, unsigned int)
1fff2091 g     O .bss	00000001 usb_rx_memory_needed
0000b75c g     F .text	00000074 SdioCard::writeStart(unsigned long)
0000cfa4 g     F .text	00000a48 usb_isr
0000eb14 g     F .text	0000000c __cxa_atexit
00007040 g     F .text	0000019e ExFatFile::read(void*, unsigned int)
0000e180 g     F .text	00000022 .hidden __aeabi_i2d
00000b18  w    F .text	00000018 SDFile::peek()
00007ac4 g     F .text	0000000e FsCache::sync()
1fff097c g     O .data	00000040 SPI
0000f200 g     F .text	00000062 memcmp
000134fc  w    O .text	00000028 vtable for usb_serial_class
0000c128 g     F .text	00000016 SdSpiArduinoDriver::send(unsigned char)
0000c5e8  w    F .text	00000006 uart3_error_isr
00005b90 g     F .text	0000007c MTPD::GetObject(unsigned long)
0000c194 g     F .text	00000004 sdCsWrite(unsigned char, bool)
0000eb10  w    F .text	00000002 .hidden __aeabi_ldiv0
00008114 g     F .text	0000005a ExFatFile::rmdir()
0000c5e8  w    F .text	00000006 porta_isr
0000548c g     F .text	000006e6 MTPD::getObjectPropDesc(unsigned long, unsigned long)
0000e4a0 g     F .text	000001d0 .hidden __divdf3
1fff03d0 g     O .usbbuffers	000005a0 usb_buffer_memory
0000acc8 g     F .text	00000098 SdSpiCard::sectorCount()
0000c5e8  w    F .text	00000006 low_voltage_isr
0000148c g     F .text	00000004 MTPStorage_SD::has_directories(unsigned long)
1fff1068 g     O .data	00000408 __malloc_av_
0000c5e8  w    F .text	00000006 can0_error_isr
0000cbb8 g     F .text	0000016c _init_Teensyduino_internal_
00000830  w    F .text	00000014 SDFile::flush()
0000e24c g     F .text	00000254 .hidden __muldf3
0000c500 g     F .text	00000058 usb_serial_flush_output
0000c5e8  w    F .text	00000006 dma_ch12_isr
0000f3c8 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
00009e08 g     F .text	0000024c FatFile::parsePathName(char const*, fname_t*, char const**)
0000c5e8  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
0000c140 g     F .text	00000052 SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
00010660 g     F .text	0000005e _calloc_r
0000c5e8  w    F .text	00000006 pit3_isr
00005c0c g     F .text	0000006e MTPD::read(char*, unsigned long)
1fff1a78 g     O .bss	00000004 getTimePtr
1fff0ab8 g     O .data	00000001 yield_active_check_flags
0000c5e8  w    F .text	00000006 enet_rx_isr
000082c8 g     F .text	0000005e ExFatFile::sync()
00009068 g     F .text	000001d6 FatFile::rename(FatFile*, char const*)
0000b3e4 g     F .text	0000001c SdioCard::isBusy()
0000c5e8  w    F .text	00000006 portc_isr
0000ae28 g     F .text	00000038 SdSpiCard::readStop()
0000f32c g     F .text	0000009a memset
0000ddd4 g     F .text	00000010 main
1fff20d8 g     O .bss	00000004 __malloc_max_total_mem
00007ad4 g     F .text	000000b4 ExFatPartition::bitmapFind(unsigned long, unsigned long)
00006aa8 g     F .text	000000a0 now()
000086d8 g     F .text	00000288 ExFatFile::write(void const*, unsigned int)
0001300c g     O .text	00000060 vtable for MTPStorage_SD
0000f890 g     F .text	00000052 strlcat
0000c5a0  w    F .text	00000048 memmanage_fault_isr
00008b30 g     F .text	00000044 FatFile::dirEntry(DirFat_t*)
00000788  w    F .text	00000058 SDFile::available()
00000500  w    F .text	0000000c File::close()
0000c630 g     F .text	0000007c usb_init_serialnumber
000137c8 g       .text	00000000 __init_array_end
000107e8 g     F .text	00000e34 _dtoa_r
0000ebc0 g     F .text	00000570 _malloc_r
1fff20d4 g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
0000c5e8  w    F .text	00000006 debugmonitor_isr
0000fb20 g     F .text	0000001a __ascii_wctomb
0000a73c g     F .text	00000078 FsBaseFile::FsBaseFile(FsBaseFile const&)
0000e1f0 g     F .text	0000005a .hidden __aeabi_l2d
0000dba0 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
000068d8 g     F .text	00000008 SPIClass::transfer(void const*, void*, unsigned int)
00000031 g       *ABS*	00000000 __rtc_localtime
00006de0 g     F .text	00000008 fsPrintDateTime(Print*, unsigned long)
0000cad8 g     F .text	00000044 micros
00000000  w      *UND*	00000000 __libc_fini
00000538  w    F .text	00000038 File::openNextFile(unsigned char)
0000c5e8  w    F .text	00000006 cmp1_isr
0000a054 g     F .text	000000ba FatFile::printName(Print*)
0000c5e8  w    F .text	00000006 ftm0_isr
00008170 g     F .text	00000158 ExFatFile::syncDir()
0000fd54 g     F .text	0000009c _malloc_trim_r
1fff0a98 g     O .data	00000004 string0
0000c398 g     F .text	00000108 usb_serial_write
00001460  w    F .text	0000001a MTPStorage_SD::addFilesystem(FS&, char const*)
0000c5fc  w    F .text	00000002 startup_late_hook
0000dc84  w    F .text	00000004 usb_serial_class::available()
1fff0acc g     O .data	00000001 _serialEvent_default
00005c7c g     F .text	00000044 MTPD::readstring(char*)
00009488 g     F .text	0000000c FatFile::sync()
000009e0  w    F .text	00000050 SDClass::mkdir(char const*)
1fff0a68  w    O .data	0000002e usb_string_product_name
000049b0 g     F .text	00000028 MTPD::GetNumObjects(unsigned long, unsigned long)
0000cb1c g     F .text	0000009c delay
0000e680 g     F .text	0000007a .hidden __nedf2
0000c5e8  w    F .text	00000006 tpm0_isr
00001528 g     F .text	00000118 MTPStorage_SD::CloseIndex()
000137c8 g     F .fini	00000000 _fini
000049d8 g     F .text	00000018 MTPD::get_buffer()
00000518  w    F .text	00000014 File::name()
00006bc8 g     F .text	00000020 month()
0000ad60 g     F .text	00000050 SdSpiCard::readStart(unsigned long)
000077f4 g     F .text	00000040 ExFatFile::openNext(ExFatFile*, int)
0000dcfc g     F .text	0000001c Print::printf(char const*, ...)
0000c5e8  w    F .text	00000006 i2s0_rx_isr
0000c5e8  w    F .text	00000006 uart4_error_isr
00008b10 g     F .text	0000001e FatFile::close()
00006cc0 g     F .text	00000052 fmtBase10(char*, unsigned long)
000004e0  w    F .text	00000010 File::position()
00000e4c  w    F .text	00000064 SDFile::~SDFile()
00009924 g     F .text	0000000c FatPartition::clusterStartSector(unsigned long) const
0000fc20 g     F .text	0000000c atexit
0000b230  w    F .text	00000002 SdioCard::~SdioCard()
000007e0  w    F .text	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
000005a8  w    F .text	00000018 File::write(unsigned char)
0000fb3c g     F .text	0000002c _write_r
1fff1a84 g     O .bss	000004b0 SD
0000b540 g     F .text	000000d4 SdioCard::erase(unsigned long, unsigned long)
0000c5e8  w    F .text	00000006 can0_message_isr
000066e4 g     F .text	000000a4 SPIClass::setMOSI(unsigned char)
1fff0ef8 g     O .data	00000004 _impure_ptr
00012e04  w    O .text	00000024 vtable for Stream
0000c5e8  w    F .text	00000006 can1_message_isr
000071e0 g     F .text	0000002e ExFatFile::peek()
00012e28  w    O .text	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
0000c5e8  w    F .text	00000006 nmi_isr
0000a238 g     F .text	000000b6 FatFile::lfnUniqueSfn(fname_t*)
00000cd4  w    F .text	00000014 SDFile::write(void const*, unsigned int)
0000a980 g     F .text	00000028 FsVolume::open(char const*, int)
0000b1d0 g     F .text	0000000c SdioCard::errorCode() const
00008e48 g     F .text	0000000e FatFile::open(FatVolume*, char const*, int)
00000ce8  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
000137b8 g       .text	00000000 __preinit_array_end
00000614 g     F .text	00000098 dateTime(unsigned short*, unsigned short*, unsigned char*)
0000a9d8  w    F .text	00000002 SdSpiCard::~SdSpiCard()
0000c5e8  w    F .text	00000006 sdhc_isr
00006b68 g     F .text	00000020 minute()
00007b88 g     F .text	000000e0 ExFatPartition::init(BlockDeviceInterface*, unsigned char)
00007d4c g     F .text	00000034 ExFatPartition::dirCache(DirPos_t*, unsigned char)
0000aeb0 g     F .text	000000b8 SdSpiCard::erase(unsigned long, unsigned long)
0000328c g     F .text	0000000c MTPStorage_SD::DeleteObject(unsigned long)
0000f130 g     F .text	0000002a __ascii_mbtowc
0000aaa0 g     F .text	0000003e SdSpiCard::isBusy()
000131dc g     O .text	00000058 vtable for SdSpiCard
0000acc0  w    F .text	00000008 SdSpiCard::readCID(CID*)
00001108 g     F .text	0000025c setup
00013294 g     O .text	00000060 usb_descriptor_list
0000cdb0 g     F .text	0000003c usb_rx
0000b334 g     F .text	00000020 SdioCard::status()
000019cc g     F .text	00000080 MTPStorage_SD::ResetIndex()
0000c5e8  w    F .text	00000006 dma_ch10_isr
00000470  w    F .text	00000002 Print::flush()
0000c5e8  w    F .text	00000006 uart0_error_isr
000004f0  w    F .text	00000010 File::size()
000008ec  w    F .text	00000062 SDClass::rmdir(char const*)
0000cd24 g     F .text	00000040 usb_malloc
00008e64 g     F .text	00000198 FatFile::read(void*, unsigned int)
0000c5e8  w    F .text	00000006 i2s0_isr
00008e58 g     F .text	0000000c FatFile::openRoot(FatVolume*)
20030000 g       .bss	00000000 _estack
0000a9a8 g     F .text	00000004 operator new(unsigned int, unsigned long*)
0000acb8  w    F .text	00000008 SdSpiCard::readCSD(csd_t*)
0000057c  w    F .text	0000002c File::read()
0000c4b8 g     F .text	00000048 usb_serial_write_buffer_free
0000ab60 g     F .text	0000003c SdSpiCard::waitNotBusy(unsigned short)
0000c5e8  w    F .text	00000006 enet_timer_isr
0000e71c g     F .text	00000012 .hidden __aeabi_dcmpeq
00000eb0  w    F .text	00000030 File::~File()
0000dcec  w    F .text	0000000e _write
1fff1478 g       .data	00000000 _edata
00007dec g     F .text	00000024 ExFatPartition::fatPut(unsigned long, unsigned long)
00004ed4 g     F .text	00000254 MTPD::GetObjectInfo(unsigned long)
0000b230  w    F .text	00000002 SdioCard::~SdioCard()
0000c5e8  w    F .text	00000006 i2s0_tx_isr
0000c5e8  w    F .text	00000006 adc1_isr
0000afac g     F .text	0000002c SdSpiCard::syncDevice()
000089c8 g     F .text	00000094 FatFile::addDirCluster()
0000047c  w    F .text	0000000c File::read(void*, unsigned int)
0000dc8c  w    F .text	00000004 usb_serial_class::availableForWrite()
0000c5e8  w    F .text	00000006 cmp0_isr
000004bc  w    F .text	0000000c File::truncate(unsigned long long)
0000c6ac g     F .text	0000004c ultoa
00006c0c  w    F .text	00000002 SDClass::~SDClass()
00006b88 g     F .text	00000020 second()
0000a7dc g     F .text	00000080 FsBaseFile::open(FsVolume*, char const*, int)
00001c18 g     F .text	00000210 MTPStorage_SD::ReadIndexRecord(unsigned long)
0000dde8 g     F .text	00000004 operator new(unsigned int)
0000dc20 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff1470 g     O .data	00000004 __malloc_trim_threshold
0000dc7c  w    F .text	00000004 usb_serial_class::peek()
0000eb20 g     F .text	00000024 fcvtf
00001e28 g     F .text	0000005e MTPStorage_SD::GetNextObjectHandle(unsigned long)
00000ee0  w    F .text	00000078 MTPStorage_SD::~MTPStorage_SD()
1fff1a4c g     O .bss	00000014 mtpd
00010430 g     F .text	00000114 __mdiff
0000b220 g     F .text	00000010 SdioCard::readOCR(unsigned long*)
0000e7ac g     F .text	0000004e .hidden __aeabi_d2iz
00002758 g     F .text	000000aa MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)
00007d80 g     F .text	00000058 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
1fff1f84 g     O .bss	00000001 usb_cdc_transmit_flush_timer
0000c5e8  w    F .text	00000006 pit_isr
00006b48 g     F .text	00000020 hour()
0000b68c g     F .text	00000004 SdioCard::writeStop()
0000a9c8  w    F .text	00000010 SdSpiCard::writeSector(unsigned long, unsigned char const*)
0000a6f0 g     F .text	0000004a FatFile::printSFN(Print*)
00006de8 g     F .text	00000014 ExFatFile::close()
0001353c g     O .text	00000101 _ctype_
0000c5e8  w    F .text	00000006 dac0_isr
0000a9b4  w    F .text	00000010 SdSpiCard::readSector(unsigned long, unsigned char*)
000137b8 g       .text	00000000 __init_array_start
0000eb10  w    F .text	00000002 .hidden __aeabi_idiv0
0000c5e8  w    F .text	00000006 can1_tx_warn_isr
000016e4 g     F .text	000002e8 MTPStorage_SD::OpenIndex()
0000e780 g     F .text	0000002c .hidden __unorddf2
00000878  w    F .text	00000074 SDClass::rename(char const*, char const*)
0000c5e8  w    F .text	00000006 uart0_status_isr
0000c5e8  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
00009714 g     F .text	0000003e FatFile::printFileSize(Print*)
0000f940 g     F .text	000000dc strlen
00009cd8 g     F .text	0000002e FatFile::openCluster(FatFile*)
0000e70c g     F .text	00000010 .hidden __aeabi_cdcmpeq
000078b8 g     F .text	00000120 ExFatFile::ls(Print*, unsigned char, unsigned char)
0000e670 g     F .text	0000008a .hidden __gedf2
0000929c g     F .text	00000094 FatFile::seekSet(unsigned long)
1fff0a68 g     O .data	0000002e usb_string_product_name_default
0000fb08 g     F .text	00000018 vdprintf
0000c5e8  w    F .text	00000006 dma_ch1_isr
0000b4d4 g     F .text	0000006c SdioCard::sectorCount()
0000a8bc g     F .text	000000c4 FsVolume::begin(BlockDeviceInterface*)
0000cdec g     F .text	0000002c usb_tx_packet_count
00009408 g     F .text	00000080 FatFile::openNext(FatFile*, int)
00013234 g     O .text	00000058 vtable for SdioCard
0000e1a4 g     F .text	0000003a .hidden __aeabi_f2d
0000c5e8  w    F .text	00000006 dma_ch5_isr
00001edc g     F .text	0000019c MTPStorage_SD::close()
00009d08 g     F .text	00000100 FatFile::getName(char*, unsigned int)
0000c5e8  w    F .text	00000006 can0_rx_warn_isr
00000ee0  w    F .text	00000078 MTPStorage_SD::~MTPStorage_SD()
000020dc g     F .text	000000b0 MTPStorage_SD::rename(unsigned long, char const*)
0000c5e8  w    F .text	00000006 can0_tx_warn_isr
0000c5e8  w    F .text	00000006 uart4_status_isr
0000bed0 g     F .text	00000074 SdioCard::readStart(unsigned long)
00000000  w      *UND*	00000000 _Jv_RegisterClasses
0000c014 g     F .text	00000090 SdSpiArduinoDriver::activate()
00007894 g     F .text	00000022 ExFatFile::printModifyDateTime(Print*)
00009754 g     F .text	00000114 FatFile::ls(Print*, unsigned char, unsigned char)
00001488 g     F .text	00000004 MTPStorage_SD::readonly(unsigned long)
0000dee4 g     F .text	0000027a .hidden __subdf3
000137b8 g       .text	00000000 __preinit_array_start
00007c68 g     F .text	000000a6 ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
00001ec4 g     F .text	00000016 MTPStorage_SD::GetSize(unsigned long)
000005d8  w    F .text	00000028 File::whoami()
000100fc g     F .text	0000005a __lo0bits
00007d10 g     F .text	0000003a ExFatPartition::chainSize(unsigned long)
00009330 g     F .text	000000d6 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
0000ded0 g     F .text	0000000a __aeabi_atexit
00005b74 g     F .text	0000001a MTPD::receive_buffer()
00000000  w      *UND*	00000000 __register_frame_info
0000803c g     F .text	000000d6 ExFatFile::remove()
0000c5e8  w    F .text	00000006 cmp2_isr
0000dc64 g     F .text	00000004 pendablesrvreq_isr
00000b30  w    F .text	00000034 SDClass::totalSize()
00005cec g     F .text	00000076 MTPD::SendObject()
0000149c g     F .text	0000000c MTPStorage_SD::usedSize(unsigned long)
0000046c  w    F .text	00000004 Print::availableForWrite()
1fff0efc g     O .data	0000016c __global_locale
0000c5e8  w    F .text	00000006 wakeup_isr
00006788 g     F .text	000000a0 SPIClass::setMISO(unsigned char)
0000ba70 g     F .text	00000394 SdioCard::begin(SdioConfig)
000079f8 g     F .text	0000000c FsCache::invalidate()
0000c5e8  w    F .text	00000006 cmp3_isr
000068e0 g     F .text	000001b0 breakTime(long, tmElements_t&)
00009930 g     F .text	0000006e FatPartition::fatGet(unsigned long, unsigned long*)
0000ebb0 g     F .text	00000010 free
0000c5e8  w    F .text	00000006 tpm2_isr
0001003c g     F .text	00000080 __multadd
00010028 g     F .text	00000012 _Bfree
00000ac8  w    F .text	0000001a SDFile::size()
0000c5e8  w    F .text	00000006 dma_ch0_isr
00000f58  w    F .text	0000005c SDFile::~SDFile()
1fff0a9c  w    O .data	00000016 usb_string_serial_number
0000c5e8  w    F .text	00000006 enet_tx_isr
00007f1c g     F .text	0000003a exFatHashName(char const*, unsigned int, unsigned short)
0000bf44 g     F .text	000000d0 SdioCard::readSector(unsigned long, unsigned char*)
0000b204 g     F .text	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text:

00000000 <_VectorsFlash>:
HardwareSerial 	*HardwareSerial::s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
uint8_t 		HardwareSerial::s_count_serials_with_serial_events = 0;

// simple helper function that add us to the list of Serial ports that have
// their own serialEvent code defined that needs to be called at yield.
void HardwareSerial::addToSerialEventsList() {
       0:	... ............
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
      10:	................
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
}
      20:	................
      30:	........e...i...
      40:	................
      50:	................
      60:	................
      70:	................
      80:	................
      90:	................
      a0:	................
      b0:	................
      c0:	................
      d0:	................
      e0:	................
      f0:	................
     100:	................
     110:	................
     120:	................
     130:	................
     140:	................
     150:	................
     160:	................
     170:	................
     180:	................
     190:	................
     1a0:	................
     1b0:	................
     1c0:	................

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #356]	; (338 <ResetHandler+0x168>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	c5f0 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #336]	; (33c <ResetHandler+0x16c>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #332]	; (340 <ResetHandler+0x170>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #332]	; (344 <ResetHandler+0x174>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #332]	; (348 <ResetHandler+0x178>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #328]	; (34c <ResetHandler+0x17c>)
     202:	ldr	r2, [pc, #332]	; (350 <ResetHandler+0x180>)
     204:	str	r2, [r3, #0]
		RTC_SR = 0;
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     206:	ldr	r3, [pc, #332]	; (354 <ResetHandler+0x184>)
     208:	ldrb	r2, [r3, #0]
     20a:	lsls	r1, r2, #28
     20c:	bpl.n	216 <ResetHandler+0x46>
     20e:	ldrb	r2, [r3, #0]
     210:	orr.w	r2, r2, #8
     214:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     216:	ldr	r3, [pc, #320]	; (358 <ResetHandler+0x188>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     218:	ldr	r1, [pc, #320]	; (35c <ResetHandler+0x18c>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     21a:	movs	r2, #170	; 0xaa
     21c:	strb	r2, [r3, #0]
     21e:	ldr	r2, [pc, #320]	; (360 <ResetHandler+0x190>)
     220:	ldr	r3, [pc, #320]	; (364 <ResetHandler+0x194>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     222:	cmp	r3, r1
     224:	bcs.n	230 <ResetHandler+0x60>
     226:	ldr.w	r0, [r2, #4]!
     22a:	str.w	r0, [r3], #4
     22e:	b.n	222 <ResetHandler+0x52>
     230:	ldr	r3, [pc, #308]	; (368 <ResetHandler+0x198>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     232:	ldr	r1, [pc, #312]	; (36c <ResetHandler+0x19c>)
     234:	movs	r2, #0
     236:	cmp	r3, r1
     238:	bcs.n	240 <ResetHandler+0x70>
     23a:	str.w	r2, [r3], #4
     23e:	b.n	236 <ResetHandler+0x66>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     240:	ldr	r1, [pc, #300]	; (370 <ResetHandler+0x1a0>)
     242:	ldr	r2, [pc, #304]	; (374 <ResetHandler+0x1a4>)
     244:	movs	r3, #0
     246:	ldr.w	r0, [r2, r3, lsl #2]
     24a:	str.w	r0, [r1, r3, lsl #2]
     24e:	adds	r3, #1
     250:	cmp	r3, #116	; 0x74
     252:	bne.n	246 <ResetHandler+0x76>
     254:	ldr	r3, [pc, #288]	; (378 <ResetHandler+0x1a8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     256:	ldr	r2, [pc, #292]	; (37c <ResetHandler+0x1ac>)
     258:	movs	r1, #128	; 0x80
     25a:	strb.w	r1, [r3], #1
     25e:	cmp	r3, r2
     260:	bne.n	25a <ResetHandler+0x8a>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     262:	ldr	r3, [pc, #284]	; (380 <ResetHandler+0x1b0>)
     264:	ldr	r2, [pc, #264]	; (370 <ResetHandler+0x1a0>)
     266:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     268:	ldr	r3, [pc, #280]	; (384 <ResetHandler+0x1b4>)
     26a:	movs	r2, #138	; 0x8a
     26c:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     26e:	sub.w	r3, r3, #4096	; 0x1000
     272:	movs	r2, #36	; 0x24
     274:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     276:	movs	r2, #160	; 0xa0
     278:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     27a:	ldrb	r2, [r3, #6]
     27c:	lsls	r2, r2, #30
     27e:	bpl.n	27a <ResetHandler+0xaa>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     280:	ldrb	r2, [r3, #6]
     282:	lsls	r4, r2, #27
     284:	bmi.n	280 <ResetHandler+0xb0>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     286:	ldr	r2, [pc, #256]	; (388 <ResetHandler+0x1b8>)
     288:	ldrb	r3, [r2, #6]
     28a:	and.w	r3, r3, #12
     28e:	cmp	r3, #8
     290:	ldr	r3, [pc, #244]	; (388 <ResetHandler+0x1b8>)
     292:	bne.n	288 <ResetHandler+0xb8>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(2);
    #elif F_CPU == 120000000
	MCG_C5 = MCG_C5_PRDIV0(1);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(14);
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     294:	movs	r2, #1
     296:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
     298:	movs	r2, #72	; 0x48
     29a:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     29c:	ldrb	r2, [r3, #6]
     29e:	lsls	r0, r2, #26
     2a0:	bpl.n	29c <ResetHandler+0xcc>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2a2:	ldr	r2, [pc, #228]	; (388 <ResetHandler+0x1b8>)
     2a4:	ldrb	r1, [r2, #6]
     2a6:	ldr	r3, [pc, #224]	; (388 <ResetHandler+0x1b8>)
     2a8:	lsls	r1, r1, #25
     2aa:	bpl.n	2a4 <ResetHandler+0xd4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     2ac:	ldr	r2, [pc, #220]	; (38c <ResetHandler+0x1bc>)
     2ae:	ldr	r1, [pc, #224]	; (390 <ResetHandler+0x1c0>)
     2b0:	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2b2:	movs	r1, #2
     2b4:	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2b6:	movs	r2, #32
     2b8:	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ba:	ldrb	r2, [r3, #6]
     2bc:	and.w	r2, r2, #12
     2c0:	cmp	r2, #12
     2c2:	bne.n	2ba <ResetHandler+0xea>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2c4:	ldr	r3, [pc, #204]	; (394 <ResetHandler+0x1c4>)
     2c6:	ldr	r2, [pc, #208]	; (398 <ResetHandler+0x1c8>)
     2c8:	str	r2, [r3, #0]
#endif

#if defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started.  For Teensy 3.6
	// we don't do this early.  See comment above about slow rising power.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     2ca:	ldr	r2, [pc, #208]	; (39c <ResetHandler+0x1cc>)
     2cc:	ldr	r4, [pc, #208]	; (3a0 <ResetHandler+0x1d0>)
     2ce:	ldr	r3, [r2, #0]
     2d0:	ands.w	r3, r3, #256	; 0x100
     2d4:	bne.n	2de <ResetHandler+0x10e>
		RTC_SR = 0;
     2d6:	str	r3, [r4, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     2d8:	mov.w	r3, #5376	; 0x1500
     2dc:	str	r3, [r2, #0]
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2de:	ldr	r3, [pc, #196]	; (3a4 <ResetHandler+0x1d4>)
     2e0:	ldr	r2, [pc, #196]	; (3a8 <ResetHandler+0x1d8>)
     2e2:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2e4:	movs	r2, #0
     2e6:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2e8:	movs	r2, #7
     2ea:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2ee:	ldr	r2, [pc, #188]	; (3ac <ResetHandler+0x1dc>)
     2f0:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2f4:	cpsie	i

	_init_Teensyduino_internal_();
     2f6:	bl	cbb8 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2fa:	ldr	r3, [r4, #0]
     2fc:	lsls	r2, r3, #31
     2fe:	bpl.n	30c <ResetHandler+0x13c>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     300:	ldr	r0, [pc, #172]	; (3b0 <ResetHandler+0x1e0>)
     302:	bl	caa8 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     306:	ldr	r3, [pc, #172]	; (3b4 <ResetHandler+0x1e4>)
     308:	ldr	r2, [pc, #172]	; (3b8 <ResetHandler+0x1e8>)
     30a:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     30c:	ldr	r3, [pc, #172]	; (3bc <ResetHandler+0x1ec>)
     30e:	ldrb	r3, [r3, #0]
     310:	lsls	r3, r3, #25
     312:	bpl.n	328 <ResetHandler+0x158>
     314:	ldr	r4, [pc, #156]	; (3b4 <ResetHandler+0x1e4>)
     316:	ldr	r3, [pc, #160]	; (3b8 <ResetHandler+0x1e8>)
     318:	ldr	r2, [r4, #0]
     31a:	cmp	r2, r3
     31c:	bne.n	328 <ResetHandler+0x158>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     31e:	ldr	r0, [pc, #144]	; (3b0 <ResetHandler+0x1e0>)
     320:	bl	caa8 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     324:	movs	r3, #0
     326:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     328:	bl	eb50 <__libc_init_array>

	startup_late_hook();
     32c:	bl	c5fc <startup_late_hook>
	main();
     330:	bl	ddd4 <main>
     334:	b.n	334 <ResetHandler+0x164>
     336:	nop
     338:	.word	0x4005200e
     33c:	.word	0x40048030
     340:	.word	0x00043f82
     344:	.word	0x2b000001
     348:	.word	0xe000ed88
     34c:	.word	0xe0082000
     350:	.word	0x85000003
     354:	.word	0x4007d002
     358:	.word	0x4007e000
     35c:	.word	0x1fff1478
     360:	.word	0x000137d0
     364:	.word	0x1fff0970
     368:	.word	0x1fff1478
     36c:	.word	0x1fff2128
     370:	.word	0x1fff0200
     374:	.word	0x00000000
     378:	.word	0xe000e400
     37c:	.word	0xe000e464
     380:	.word	0xe000ed08
     384:	.word	0x40065000
     388:	.word	0x40064000
     38c:	.word	0x40048044
     390:	.word	0x01030000
     394:	.word	0x40048004
     398:	.word	0x000510c0
     39c:	.word	0x4003d010
     3a0:	.word	0x4003d014
     3a4:	.word	0xe000e014
     3a8:	.word	0x000176ff
     3ac:	.word	0x20200000
     3b0:	.word	0x00000031
     3b4:	.word	0x4003e01c
     3b8:	.word	0x5a94c3a5
     3bc:	.word	0x4007f000
     3c0:	.word	0xffffffff
     3c4:	.word	0xffffffff
     3c8:	.word	0xffffffff
     3cc:	.word	0xffffffff
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff1478
     42c:	.word	0x00000000
     430:	.word	0x000137cc

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff147c
     460:	.word	0x000137cc
     464:	.word	0x1fff1478
     468:	.word	0x00000000

0000046c <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     46c:	movs	r0, #0
     46e:	bx	lr

00000470 <Print::flush()>:
	virtual void flush()				{ }
     470:	bx	lr
     472:	nop

00000474 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
     474:	mov.w	r0, #4294967295
     478:	bx	lr
     47a:	nop

0000047c <File::read(void*, unsigned int)>:
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
     47c:	ldr	r0, [r0, #16]
     47e:	cbz	r0, 486 <File::read(void*, unsigned int)+0xa>
     480:	ldr	r3, [r0, #0]
     482:	ldr	r3, [r3, #40]	; 0x28
     484:	bx	r3
	}
     486:	bx	lr

00000488 <File::write(void const*, unsigned int)>:
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
     488:	ldr	r0, [r0, #16]
     48a:	cbz	r0, 492 <File::write(void const*, unsigned int)+0xa>
     48c:	ldr	r3, [r0, #0]
     48e:	ldr	r3, [r3, #44]	; 0x2c
     490:	bx	r3
	}
     492:	bx	lr

00000494 <File::available()>:
	virtual int available() {
		return (f) ? f->available() : 0;
     494:	ldr	r0, [r0, #16]
     496:	cbz	r0, 49e <File::available()+0xa>
     498:	ldr	r3, [r0, #0]
     49a:	ldr	r3, [r3, #16]
     49c:	bx	r3
	}
     49e:	bx	lr

000004a0 <File::peek()>:
	virtual int peek() {
		return (f) ? f->peek() : -1;
     4a0:	ldr	r0, [r0, #16]
     4a2:	cbz	r0, 4aa <File::peek()+0xa>
     4a4:	ldr	r3, [r0, #0]
     4a6:	ldr	r3, [r3, #24]
     4a8:	bx	r3
	}
     4aa:	mov.w	r0, #4294967295
     4ae:	bx	lr

000004b0 <File::flush()>:
	virtual void flush() {
		if (f) f->flush();
     4b0:	ldr	r0, [r0, #16]
     4b2:	cbz	r0, 4ba <File::flush()+0xa>
     4b4:	ldr	r3, [r0, #0]
     4b6:	ldr	r3, [r3, #12]
     4b8:	bx	r3
     4ba:	bx	lr

000004bc <File::truncate(unsigned long long)>:
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
     4bc:	ldr	r0, [r0, #16]
     4be:	cbz	r0, 4c6 <File::truncate(unsigned long long)+0xa>
     4c0:	ldr	r1, [r0, #0]
     4c2:	ldr	r1, [r1, #48]	; 0x30
     4c4:	bx	r1
	}
     4c6:	bx	lr

000004c8 <File::seek(unsigned long long, int)>:
	virtual bool seek(uint64_t pos, int mode) {
     4c8:	push	{r4}
		return (f) ? f->seek(pos, mode) : false;
     4ca:	ldr	r0, [r0, #16]
     4cc:	cbz	r0, 4d8 <File::seek(unsigned long long, int)+0x10>
     4ce:	ldr	r4, [r0, #0]
     4d0:	ldr	r1, [r4, #52]	; 0x34
	}
     4d2:	ldr.w	r4, [sp], #4
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
     4d6:	bx	r1
	}
     4d8:	ldr.w	r4, [sp], #4
     4dc:	bx	lr
     4de:	nop

000004e0 <File::position()>:
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
     4e0:	ldr	r0, [r0, #16]
     4e2:	cbz	r0, 4ea <File::position()+0xa>
     4e4:	ldr	r3, [r0, #0]
     4e6:	ldr	r3, [r3, #56]	; 0x38
     4e8:	bx	r3
	}
     4ea:	movs	r0, #0
     4ec:	movs	r1, #0
     4ee:	bx	lr

000004f0 <File::size()>:
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
     4f0:	ldr	r0, [r0, #16]
     4f2:	cbz	r0, 4fa <File::size()+0xa>
     4f4:	ldr	r3, [r0, #0]
     4f6:	ldr	r3, [r3, #60]	; 0x3c
     4f8:	bx	r3
	}
     4fa:	movs	r0, #0
     4fc:	movs	r1, #0
     4fe:	bx	lr

00000500 <File::close()>:
	virtual void close() {
		if (f) f->close();
     500:	ldr	r0, [r0, #16]
     502:	cbz	r0, 50a <File::close()+0xa>
     504:	ldr	r3, [r0, #0]
     506:	ldr	r3, [r3, #64]	; 0x40
     508:	bx	r3
     50a:	bx	lr

0000050c <File::operator bool()>:
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
     50c:	ldr	r0, [r0, #16]
     50e:	cbz	r0, 516 <File::operator bool()+0xa>
     510:	ldr	r3, [r0, #0]
     512:	ldr	r3, [r3, #68]	; 0x44
     514:	bx	r3
	}
     516:	bx	lr

00000518 <File::name()>:
	virtual const char* name() {
		return (f) ? f->name() : "";
     518:	ldr	r0, [r0, #16]
     51a:	cbz	r0, 522 <File::name()+0xa>
     51c:	ldr	r3, [r0, #0]
     51e:	ldr	r3, [r3, #72]	; 0x48
     520:	bx	r3
	}
     522:	ldr	r0, [pc, #4]	; (528 <File::name()+0x10>)
     524:	bx	lr
     526:	nop
     528:	.word	0x00012f70

0000052c <File::isDirectory()>:
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
     52c:	ldr	r0, [r0, #16]
     52e:	cbz	r0, 536 <File::isDirectory()+0xa>
     530:	ldr	r3, [r0, #0]
     532:	ldr	r3, [r3, #76]	; 0x4c
     534:	bx	r3
	}
     536:	bx	lr

00000538 <File::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
     538:	push	{r3, r4, r5, lr}
		return (f) ? f->openNextFile(mode) : *this;
     53a:	ldr	r3, [r1, #16]
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
     53c:	mov	r4, r0
		return (f) ? f->openNextFile(mode) : *this;
     53e:	cbz	r3, 54c <File::openNextFile(unsigned char)+0x14>
     540:	ldr	r5, [r3, #0]
     542:	mov	r1, r3
     544:	ldr	r3, [r5, #80]	; 0x50
     546:	blx	r3
	}
     548:	mov	r0, r4
     54a:	pop	{r3, r4, r5, pc}
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     54c:	mov.w	r0, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
     550:	ldr	r2, [pc, #24]	; (56c <File::openNextFile(unsigned char)+0x34>)
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
     552:	strb	r3, [r4, #4]
     554:	strb	r3, [r4, #12]
     556:	str	r0, [r4, #8]
     558:	str	r2, [r4, #0]
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
     55a:	ldr	r3, [r1, #16]
     55c:	str	r3, [r4, #16]
		if (f) f->refcount++;
     55e:	cmp	r3, #0
     560:	beq.n	548 <File::openNextFile(unsigned char)+0x10>
     562:	ldr	r2, [r3, #16]
     564:	adds	r2, #1
     566:	str	r2, [r3, #16]
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
	}
     568:	mov	r0, r4
     56a:	pop	{r3, r4, r5, pc}
     56c:	.word	0x00012e78

00000570 <File::rewindDirectory()>:
	virtual void rewindDirectory(void) {
		if (f) f->rewindDirectory();
     570:	ldr	r0, [r0, #16]
     572:	cbz	r0, 57a <File::rewindDirectory()+0xa>
     574:	ldr	r3, [r0, #0]
     576:	ldr	r3, [r3, #84]	; 0x54
     578:	bx	r3
     57a:	bx	lr

0000057c <File::read()>:
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     57c:	ldr	r0, [r0, #16]
     57e:	cbz	r0, 5a2 <File::read()+0x26>
		if (f) f->rewindDirectory();
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
     580:	push	{lr}
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     582:	ldr	r3, [r0, #0]
		if (f) f->rewindDirectory();
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
     584:	sub	sp, #12
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     586:	ldr	r3, [r3, #40]	; 0x28
     588:	movs	r2, #1
     58a:	add.w	r1, sp, #7
     58e:	blx	r3
     590:	cbz	r0, 59c <File::read()+0x20>
		return b;
     592:	ldrb.w	r0, [sp, #7]
	}
     596:	add	sp, #12
     598:	ldr.w	pc, [sp], #4
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     59c:	mov.w	r0, #4294967295
     5a0:	b.n	596 <File::read()+0x1a>
     5a2:	mov.w	r0, #4294967295
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
     5a6:	bx	lr

000005a8 <File::write(unsigned char)>:
	size_t write(uint8_t b) {
     5a8:	push	{r4, lr}
     5aa:	sub	sp, #8
     5ac:	add	r3, sp, #8
		return write(&b, 1);
     5ae:	ldr	r2, [r0, #0]
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
	size_t write(uint8_t b) {
     5b0:	strb.w	r1, [r3, #-1]!
		return write(&b, 1);
     5b4:	ldr	r4, [r2, #44]	; 0x2c
     5b6:	mov	r1, r3
     5b8:	movs	r2, #1
     5ba:	blx	r4
	}
     5bc:	add	sp, #8
     5be:	pop	{r4, pc}

000005c0 <SDFile::operator bool()>:
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     5c0:	ldr	r3, [r0, #92]	; 0x5c
     5c2:	cbz	r3, 5c8 <SDFile::operator bool()+0x8>
     5c4:	movs	r0, #1
		}
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
     5c6:	bx	lr
     5c8:	ldr	r0, [r0, #96]	; 0x60
     5ca:	adds	r0, #0
     5cc:	it	ne
     5ce:	movne	r0, #1
     5d0:	bx	lr
     5d2:	nop

000005d4 <__tcf_0>:
//  const int cs[] = {BUILTIN_SDCARD,38}; // edit to reflect your configuration
  const char *sd_str[]={"sdio"}; // edit to reflect your configuration
  const int cs[] = {BUILTIN_SDCARD}; // edit to reflect your configuration
  const int nsd = sizeof(cs)/sizeof(int);

SDClass sdx[nsd];
     5d4:	bx	lr
     5d6:	nop

000005d8 <File::whoami()>:
	}
	virtual ~File() {
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
     5d8:	push	{r4, lr}
     5da:	mov	r4, r0
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
     5dc:	mov	r2, r0
     5de:	ldr	r3, [r0, #16]
     5e0:	ldr	r1, [pc, #20]	; (5f8 <File::whoami()+0x20>)
     5e2:	ldr	r0, [pc, #24]	; (5fc <File::whoami()+0x24>)
     5e4:	bl	dcfc <Print::printf(char const*, ...)>
		if (f) f->whoami();
     5e8:	ldr	r0, [r4, #16]
     5ea:	cbz	r0, 5f6 <File::whoami()+0x1e>
     5ec:	ldr	r3, [r0, #0]
	}
     5ee:	ldmia.w	sp!, {r4, lr}
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
		if (f) f->whoami();
     5f2:	ldr	r3, [r3, #36]	; 0x24
     5f4:	bx	r3
     5f6:	pop	{r4, pc}
     5f8:	.word	0x00012f58
     5fc:	.word	0x1fff0abc

00000600 <SDFile::whoami()>:
		if (filename) free(filename);
	}
#ifdef FILE_WHOAMI
	virtual void whoami() {
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
     600:	mov	r2, r0
     602:	ldr	r3, [r0, #16]
     604:	ldr	r1, [pc, #4]	; (60c <SDFile::whoami()+0xc>)
     606:	ldr	r0, [pc, #8]	; (610 <SDFile::whoami()+0x10>)
     608:	b.w	dcfc <Print::printf(char const*, ...)>
     60c:	.word	0x00012f74
     610:	.word	0x1fff0abc

00000614 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:
/****  End of device specific change area  ****/

  // Call back for file timestamps.  Only called for file create and sync(). needed by SDFat-beta
   #include "TimeLib.h"
  void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
  { *date = FS_DATE(year(), month(), day());
     614:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     618:	mov	r7, r1
     61a:	mov	r6, r2
     61c:	mov	r8, r0
     61e:	bl	6be8 <year()>
     622:	mov	r4, r0
     624:	bl	6bc8 <month()>
     628:	mov	r5, r0
     62a:	bl	6ba8 <day()>
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
     62e:	subw	r3, r4, #1980	; 0x7bc
     632:	uxth	r3, r3
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
     634:	cmp	r3, #127	; 0x7f
     636:	bhi.n	63e <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
     638:	uxtb	r2, r5
     63a:	cmp	r2, #12
     63c:	bls.n	696 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x82>
         year << 9 | month << 5 | day;
     63e:	movs	r3, #0
     640:	strh.w	r3, [r8]
    *time = FS_TIME(hour(), minute(), second());
     644:	bl	6b48 <hour()>
     648:	mov	r4, r0
     64a:	bl	6b68 <minute()>
     64e:	mov	r5, r0
     650:	bl	6b88 <second()>
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
     654:	uxtb	r3, r4
     656:	cmp	r3, #23
     658:	bhi.n	660 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
     65a:	uxtb	r3, r5
     65c:	cmp	r3, #59	; 0x3b
     65e:	bls.n	678 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x64>
         hour << 11 | minute << 5 | second >> 1;
     660:	movs	r3, #0
     662:	strh	r3, [r7, #0]
    *ms10 = second() & 1 ? 100 : 0;
     664:	bl	6b88 <second()>
     668:	tst.w	r0, #1
     66c:	ite	ne
     66e:	movne	r3, #100	; 0x64
     670:	moveq	r3, #0
     672:	strb	r3, [r6, #0]
     674:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
     678:	uxtb	r3, r0
     67a:	cmp	r3, #59	; 0x3b
     67c:	bhi.n	660 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
         hour << 11 | minute << 5 | second >> 1;
     67e:	lsls	r4, r4, #11
     680:	lsls	r3, r5, #5
     682:	and.w	r4, r4, #522240	; 0x7f800
     686:	and.w	r3, r3, #8160	; 0x1fe0
     68a:	orrs	r3, r4
     68c:	ubfx	r0, r0, #1, #7
     690:	orrs	r3, r0
     692:	uxth	r3, r3
     694:	b.n	662 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4e>
/****  End of device specific change area  ****/

  // Call back for file timestamps.  Only called for file create and sync(). needed by SDFat-beta
   #include "TimeLib.h"
  void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
  { *date = FS_DATE(year(), month(), day());
     696:	uxtb	r0, r0
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
     698:	cmp	r0, #31
     69a:	bhi.n	63e <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
         year << 9 | month << 5 | day;
     69c:	lsls	r5, r5, #5
     69e:	and.w	r5, r5, #8160	; 0x1fe0
     6a2:	orrs	r0, r5
     6a4:	orr.w	r3, r0, r3, lsl #9
     6a8:	uxth	r3, r3
     6aa:	b.n	640 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2c>

000006ac <SDFile::close()>:
		return sdfatfile.curPosition();
	}
	virtual uint64_t size() {
		return sdfatfile.size();
	}
	virtual void close() {
     6ac:	push	{r4, lr}
     6ae:	mov	r4, r0
		if (filename) {
     6b0:	ldr	r0, [r0, #100]	; 0x64
     6b2:	cbz	r0, 6bc <SDFile::close()+0x10>
			free(filename);
     6b4:	bl	ebb0 <free>
			filename = nullptr;
     6b8:	movs	r3, #0
     6ba:	str	r3, [r4, #100]	; 0x64
		}
		sdfatfile.close();
     6bc:	add.w	r0, r4, #36	; 0x24
	}
     6c0:	ldmia.w	sp!, {r4, lr}
	virtual void close() {
		if (filename) {
			free(filename);
			filename = nullptr;
		}
		sdfatfile.close();
     6c4:	b.w	a7b4 <FsBaseFile::close()>

000006c8 <SDFile::openNextFile(unsigned char)>:
		return filename;
	}
	virtual boolean isDirectory(void) {
		return sdfatfile.isDirectory();
	}
	virtual File openNextFile(uint8_t mode=0) {
     6c8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     6cc:	movs	r3, #0
     6ce:	sub	sp, #80	; 0x50
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     6d0:	mov	r2, r3
     6d2:	mov	r5, r0
     6d4:	adds	r1, #36	; 0x24
     6d6:	add	r0, sp, #16
     6d8:	mov.w	r4, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     6dc:	ldr	r7, [pc, #148]	; (774 <SDFile::openNextFile(unsigned char)+0xac>)
     6de:	strb.w	r3, [sp, #4]
     6e2:	strb.w	r3, [sp, #12]
 * \class FsBaseFile
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}
     6e6:	str	r3, [sp, #72]	; 0x48
     6e8:	str	r3, [sp, #76]	; 0x4c
     6ea:	str	r4, [sp, #8]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     6ec:	str	r7, [sp, #0]
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     6ee:	bl	a85c <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     6f2:	ldr	r3, [sp, #72]	; 0x48
     6f4:	cmp	r3, #0
     6f6:	beq.n	75e <SDFile::openNextFile(unsigned char)+0x96>
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
     6f8:	movs	r0, #104	; 0x68
     6fa:	bl	dde8 <operator new(unsigned int)>
     6fe:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     700:	ldrb.w	r6, [sp, #4]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     704:	ldr	r2, [sp, #8]
     706:	ldrb.w	r3, [sp, #12]
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     70a:	ldr	r0, [pc, #108]	; (778 <SDFile::openNextFile(unsigned char)+0xb0>)
     70c:	ldr	r1, [pc, #108]	; (77c <SDFile::openNextFile(unsigned char)+0xb4>)
     70e:	strb	r6, [r4, #24]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     710:	mov.w	r8, #1000	; 0x3e8
{
  public:
	constexpr Print() : write_error(0) {}
     714:	movs	r6, #0
     716:	str	r0, [r4, #0]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     718:	str	r1, [r4, #20]
     71a:	str	r2, [r4, #28]
     71c:	strb.w	r3, [r4, #32]
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     720:	add.w	r0, r4, #36	; 0x24
     724:	add	r1, sp, #16
     726:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     728:	strb	r6, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     72a:	str	r6, [r4, #16]
     72c:	str.w	r8, [r4, #8]
     730:	bl	a73c <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     734:	ldr	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     736:	ldr	r2, [pc, #72]	; (780 <SDFile::openNextFile(unsigned char)+0xb8>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     738:	str	r7, [r4, #20]
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     73a:	adds	r3, #1
     73c:	str	r6, [r4, #100]	; 0x64
     73e:	strb	r6, [r5, #4]
     740:	str.w	r8, [r5, #8]
     744:	strb	r6, [r5, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
     746:	str	r4, [r5, #16]
		if (f) f->refcount++;
     748:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     74a:	str	r2, [r5, #0]
     74c:	ldr	r3, [pc, #52]	; (784 <SDFile::openNextFile(unsigned char)+0xbc>)
     74e:	str	r3, [sp, #0]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     750:	add	r0, sp, #16
     752:	bl	a7b4 <FsBaseFile::close()>
	}
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
     756:	mov	r0, r5
     758:	add	sp, #80	; 0x50
     75a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     75e:	ldr	r3, [sp, #76]	; 0x4c
     760:	cmp	r3, #0
     762:	bne.n	6f8 <SDFile::openNextFile(unsigned char)+0x30>

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     764:	ldr	r2, [pc, #24]	; (780 <SDFile::openNextFile(unsigned char)+0xb8>)
     766:	strb	r3, [r5, #4]
     768:	str	r4, [r5, #8]
     76a:	strb	r3, [r5, #12]
     76c:	str	r3, [r5, #16]
     76e:	str	r2, [r5, #0]
     770:	b.n	74c <SDFile::openNextFile(unsigned char)+0x84>
     772:	nop
     774:	.word	0x00012e54
     778:	.word	0x00012ed8
     77c:	.word	0x00012e0c
     780:	.word	0x00012e78
     784:	.word	0x00012e30

00000788 <SDFile::available()>:
		return sdfatfile.write(buf, size);
	}
	virtual int peek() {
		return sdfatfile.peek();
	}
	virtual int available() {
     788:	ldr	r2, [r0, #92]	; 0x5c
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     78a:	cbz	r2, 7a6 <SDFile::available()+0x1e>
  void fsetpos(const fspos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() {
    return isFile() ? fileSize() - curPosition() : 0;
     78c:	ldrb	r3, [r2, #0]
     78e:	and.w	r3, r3, #8
     792:	and.w	r0, r3, #255	; 0xff
     796:	cbz	r3, 7da <SDFile::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     798:	ldr	r3, [r2, #28]
     79a:	ldr	r0, [r2, #20]
     79c:	subs	r0, r3, r0
     79e:	it	mi
     7a0:	mvnmi.w	r0, #2147483648	; 0x80000000
     7a4:	bx	lr
     7a6:	ldr	r1, [r0, #96]	; 0x60
     7a8:	cbz	r1, 7dc <SDFile::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     7aa:	ldrb.w	r3, [r1, #49]	; 0x31
     7ae:	and.w	r3, r3, #8
     7b2:	and.w	r0, r3, #255	; 0xff
     7b6:	cbz	r3, 7da <SDFile::available()+0x52>
     7b8:	ldrd	r2, r3, [r1, #16]
     7bc:	ldrd	r0, r1, [r1]
     7c0:	subs	r0, r2, r0
     7c2:	push	{r4, r5}
     7c4:	sbc.w	r1, r3, r1
     7c8:	movs	r5, #0
     7ca:	mvn.w	r4, #2147483648	; 0x80000000
     7ce:	cmp	r5, r1
     7d0:	it	eq
     7d2:	cmpeq	r4, r0
     7d4:	bcs.n	7d8 <SDFile::available()+0x50>
     7d6:	mov	r0, r4
		return sdfatfile.available();
	}
     7d8:	pop	{r4, r5}
     7da:	bx	lr
     7dc:	mov	r0, r1
     7de:	bx	lr

000007e0 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  }
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
     7e0:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     7e2:	cbz	r3, 7ea <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     7e4:	mov	r0, r3
     7e6:	b.w	8ffc <FatFile::peek()>
     7ea:	ldr	r0, [r0, #76]	; 0x4c
     7ec:	cbz	r0, 7f2 <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     7ee:	b.w	71e0 <ExFatFile::peek()>
    return BaseFile::peek();
  }
     7f2:	mov.w	r0, #4294967295
     7f6:	bx	lr

000007f8 <StreamFile<FsBaseFile, unsigned long long>::read()>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
     7f8:	push	{lr}
     7fa:	ldr	r3, [r0, #72]	; 0x48
     7fc:	sub	sp, #12
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     7fe:	cbz	r3, 81a <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     800:	mov	r0, r3
     802:	movs	r2, #1
     804:	add.w	r1, sp, #7
     808:	bl	8e64 <FatFile::read(void*, unsigned int)>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     80c:	cmp	r0, #1
     80e:	bne.n	82a <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     810:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
  }
     814:	add	sp, #12
     816:	ldr.w	pc, [sp], #4
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     81a:	ldr	r0, [r0, #76]	; 0x4c
     81c:	cbz	r0, 82a <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     81e:	movs	r2, #1
     820:	add.w	r1, sp, #7
     824:	bl	7040 <ExFatFile::read(void*, unsigned int)>
     828:	b.n	80c <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     82a:	mov.w	r0, #4294967295
     82e:	b.n	814 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000830 <SDFile::flush()>:
	virtual void flush() {
     830:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     832:	cbz	r3, 83a <SDFile::flush()+0xa>
     834:	mov	r0, r3
     836:	b.w	9488 <FatFile::sync()>
     83a:	ldr	r0, [r0, #96]	; 0x60
     83c:	cbz	r0, 842 <SDFile::flush()+0x12>
     83e:	b.w	82c8 <ExFatFile::sync()>
     842:	bx	lr

00000844 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     844:	push	{lr}
     846:	ldr	r3, [r0, #72]	; 0x48
     848:	sub	sp, #12
     84a:	strb.w	r1, [sp, #7]
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     84e:	cbz	r3, 862 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     850:	mov	r0, r3
     852:	movs	r2, #1
     854:	add.w	r1, sp, #7
     858:	bl	950c <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     85c:	add	sp, #12
     85e:	ldr.w	pc, [sp], #4
     862:	ldr	r0, [r0, #76]	; 0x4c
     864:	cmp	r0, #0
     866:	beq.n	85c <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     868:	movs	r2, #1
     86a:	add.w	r1, sp, #7
     86e:	bl	86d8 <ExFatFile::write(void const*, unsigned int)>
     872:	add	sp, #12
     874:	ldr.w	pc, [sp], #4

00000878 <SDClass::rename(char const*, char const*)>:
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
		return sdfs.mkdir(filepath);
	}
	bool rename(const char *oldfilepath, const char *newfilepath) {
     878:	push	{r4, r5, r6, lr}
     87a:	ldr.w	r4, [r0, #1148]	; 0x47c
     87e:	sub	sp, #56	; 0x38
     880:	mov	r6, r2
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
     882:	cbz	r4, 8b6 <SDClass::rename(char const*, char const*)+0x3e>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     884:	movs	r5, #0
    return truncate(path.c_str(), length);
  }
#endif  // ENABLE_ARDUINO_STRING

 private:
  FatFile* vwd() {return &m_vwd;}
     886:	addw	r4, r4, #1084	; 0x43c
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    FatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     88a:	mov	r2, r1
     88c:	mov	r3, r5
     88e:	mov	r1, r4
     890:	mov	r0, sp
     892:	strb.w	r5, [sp]
     896:	strb.w	r5, [sp, #1]
     89a:	strb.w	r5, [sp, #2]
     89e:	bl	8d88 <FatFile::open(FatFile*, char const*, int)>
     8a2:	cbnz	r0, 8a8 <SDClass::rename(char const*, char const*)+0x30>
		return sdfs.rename(oldfilepath, newfilepath);
	}
     8a4:	add	sp, #56	; 0x38
     8a6:	pop	{r4, r5, r6, pc}
     8a8:	mov	r2, r6
     8aa:	mov	r1, r4
     8ac:	mov	r0, sp
     8ae:	bl	9068 <FatFile::rename(FatFile*, char const*)>
     8b2:	add	sp, #56	; 0x38
     8b4:	pop	{r4, r5, r6, pc}
     8b6:	ldr.w	r0, [r0, #1152]	; 0x480
     8ba:	cmp	r0, #0
     8bc:	beq.n	8a4 <SDClass::rename(char const*, char const*)+0x2c>
  bool rmdir(const char* path);
#endif  //  USE_EXFAT_UNICODE_NAMES

 private:
  friend ExFatFile;
  ExFatFile* vwd() {return &m_vwd;}
     8be:	add.w	r5, r0, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const ExChar_t* oldPath, const ExChar_t* newPath) {
    ExFatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     8c2:	mov	r2, r1
     8c4:	mov	r3, r4
     8c6:	mov	r1, r5
     8c8:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     8ca:	strb.w	r4, [sp, #49]	; 0x31
     8ce:	strb.w	r4, [sp, #50]	; 0x32
     8d2:	strb.w	r4, [sp, #51]	; 0x33
     8d6:	bl	76e4 <ExFatFile::open(ExFatFile*, char const*, int)>
     8da:	cmp	r0, #0
     8dc:	beq.n	8a4 <SDClass::rename(char const*, char const*)+0x2c>
     8de:	mov	r2, r6
     8e0:	mov	r1, r5
     8e2:	mov	r0, sp
     8e4:	bl	8548 <ExFatFile::rename(ExFatFile*, char const*)>
     8e8:	add	sp, #56	; 0x38
     8ea:	pop	{r4, r5, r6, pc}

000008ec <SDClass::rmdir(char const*)>:
	bool remove(const char *filepath) {
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
     8ec:	push	{r4, r5, lr}
     8ee:	ldr.w	r4, [r0, #1148]	; 0x47c
     8f2:	sub	sp, #60	; 0x3c
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
           m_xVol ? m_xVol->rmdir(path) : false;
     8f4:	cbz	r4, 920 <SDClass::rmdir(char const*)+0x34>
     8f6:	movs	r5, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     8f8:	mov	r2, r1
     8fa:	mov	r3, r5
     8fc:	mov	r1, r4
     8fe:	mov	r0, sp
     900:	strb.w	r5, [sp]
     904:	strb.w	r5, [sp, #1]
     908:	strb.w	r5, [sp, #2]
     90c:	bl	8e48 <FatFile::open(FatVolume*, char const*, int)>
     910:	cbnz	r0, 916 <SDClass::rmdir(char const*)+0x2a>
		return sdfs.rmdir(filepath);
	}
     912:	add	sp, #60	; 0x3c
     914:	pop	{r4, r5, pc}
     916:	mov	r0, sp
     918:	bl	9240 <FatFile::rmdir()>
     91c:	add	sp, #60	; 0x3c
     91e:	pop	{r4, r5, pc}
     920:	ldr.w	r0, [r0, #1152]	; 0x480
     924:	cmp	r0, #0
     926:	beq.n	912 <SDClass::rmdir(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     928:	mov	r2, r1
     92a:	mov	r3, r4
     92c:	mov	r1, r0
     92e:	mov	r0, sp
     930:	strb.w	r4, [sp, #49]	; 0x31
     934:	strb.w	r4, [sp, #50]	; 0x32
     938:	strb.w	r4, [sp, #51]	; 0x33
     93c:	bl	77e4 <ExFatFile::open(ExFatVolume*, char const*, int)>
     940:	cmp	r0, #0
     942:	beq.n	912 <SDClass::rmdir(char const*)+0x26>
     944:	mov	r0, sp
     946:	bl	8114 <ExFatFile::rmdir()>
     94a:	add	sp, #60	; 0x3c
     94c:	pop	{r4, r5, pc}
     94e:	nop

00000950 <SDFile::name()>:
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
     950:	push	{r3, r4, r5, lr}
		if (!filename) {
     952:	ldr	r4, [r0, #100]	; 0x64
     954:	cbz	r4, 95a <SDFile::name()+0xa>
				static char zeroterm = 0;
				filename = &zeroterm;
			}
		}
		return filename;
	}
     956:	mov	r0, r4
     958:	pop	{r3, r4, r5, pc}
     95a:	mov	r5, r0
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
		if (!filename) {
			filename = (char *)malloc(MAX_FILENAME_LEN);
     95c:	mov.w	r0, #256	; 0x100
     960:	bl	eba0 <malloc>
     964:	mov	r1, r0
     966:	str	r0, [r5, #100]	; 0x64
			if (filename) {
     968:	cbz	r0, 98c <SDFile::name()+0x3c>
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    return m_fFile ? m_fFile->getName(name, len) :
     96a:	ldr	r0, [r5, #92]	; 0x5c
   *             must be at least 13 bytes long.  The file's name will be
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
     96c:	strb	r4, [r1, #0]
    return m_fFile ? m_fFile->getName(name, len) :
           m_xFile ? m_xFile->getName(name, len) : 0;
     96e:	cbz	r0, 97c <SDFile::name()+0x2c>
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    return m_fFile ? m_fFile->getName(name, len) :
     970:	mov.w	r2, #256	; 0x100
     974:	bl	9d08 <FatFile::getName(char*, unsigned int)>
     978:	ldr	r4, [r5, #100]	; 0x64
     97a:	b.n	956 <SDFile::name()+0x6>
           m_xFile ? m_xFile->getName(name, len) : 0;
     97c:	ldr	r0, [r5, #96]	; 0x60
     97e:	cbz	r0, 992 <SDFile::name()+0x42>
     980:	mov.w	r2, #256	; 0x100
     984:	bl	6dfc <ExFatFile::getName(char*, unsigned int)>
     988:	ldr	r4, [r5, #100]	; 0x64
     98a:	b.n	956 <SDFile::name()+0x6>
				sdfatfile.getName(filename, MAX_FILENAME_LEN);
			} else {
				static char zeroterm = 0;
				filename = &zeroterm;
     98c:	ldr	r4, [pc, #8]	; (998 <SDFile::name()+0x48>)
     98e:	str	r4, [r5, #100]	; 0x64
     990:	b.n	956 <SDFile::name()+0x6>
     992:	mov	r4, r1
     994:	b.n	956 <SDFile::name()+0x6>
     996:	nop
     998:	.word	0x1fff1494

0000099c <SDFile::truncate(unsigned long long)>:
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
		return sdfatfile.read(buf, nbyte);
	}
	virtual bool truncate(uint64_t size=0) {
     99c:	push	{r4, r6, r7, lr}
     99e:	ldr	r4, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
           m_xFile ? m_xFile->truncate(length) : false;
     9a0:	cbz	r4, 9c6 <SDFile::truncate(unsigned long long)+0x2a>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
     9a2:	cmp	r3, #1
     9a4:	it	eq
     9a6:	cmpeq	r2, #0
     9a8:	bcc.n	9ae <SDFile::truncate(unsigned long long)+0x12>
     9aa:	movs	r0, #0
		return sdfatfile.truncate(size);
	}
     9ac:	pop	{r4, r6, r7, pc}
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint32_t length) {
    return seekSet(length) && truncate();
     9ae:	mov	r1, r2
     9b0:	mov	r0, r4
     9b2:	bl	929c <FatFile::seekSet(unsigned long)>
     9b6:	cmp	r0, #0
     9b8:	beq.n	9aa <SDFile::truncate(unsigned long long)+0xe>
     9ba:	mov	r0, r4
     9bc:	bl	9494 <FatFile::truncate()>
     9c0:	cmp	r0, #0
     9c2:	beq.n	9aa <SDFile::truncate(unsigned long long)+0xe>
     9c4:	pop	{r4, r6, r7, pc}
           m_xFile ? m_xFile->truncate(length) : false;
     9c6:	ldr	r4, [r0, #96]	; 0x60
     9c8:	cmp	r4, #0
     9ca:	beq.n	9aa <SDFile::truncate(unsigned long long)+0xe>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
     9cc:	mov	r0, r4
     9ce:	bl	7210 <ExFatFile::seekSet(unsigned long long)>
     9d2:	cmp	r0, #0
     9d4:	beq.n	9aa <SDFile::truncate(unsigned long long)+0xe>
     9d6:	mov	r0, r4
     9d8:	ldmia.w	sp!, {r4, r6, r7, lr}
     9dc:	b.w	85f4 <ExFatFile::truncate()>

000009e0 <SDClass::mkdir(char const*)>:
		return File();
	}
	bool exists(const char *filepath) {
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
     9e0:	push	{r4, lr}
     9e2:	ldr.w	r4, [r0, #1148]	; 0x47c
     9e6:	sub	sp, #56	; 0x38
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
     9e8:	cbz	r4, a0a <SDClass::mkdir(char const*)+0x2a>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
     9ea:	mov	r2, r1
     9ec:	movs	r3, #1
     9ee:	addw	r1, r4, #1084	; 0x43c
     9f2:	mov	r0, sp
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     9f4:	movs	r4, #0
     9f6:	strb.w	r4, [sp]
     9fa:	strb.w	r4, [sp, #1]
     9fe:	strb.w	r4, [sp, #2]
     a02:	bl	8cc4 <FatFile::mkdir(FatFile*, char const*, bool)>
		return sdfs.mkdir(filepath);
	}
     a06:	add	sp, #56	; 0x38
     a08:	pop	{r4, pc}
     a0a:	ldr.w	r0, [r0, #1152]	; 0x480
     a0e:	cmp	r0, #0
     a10:	beq.n	a06 <SDClass::mkdir(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const ExChar_t* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
     a12:	mov	r2, r1
     a14:	movs	r3, #1
     a16:	add.w	r1, r0, #1088	; 0x440
     a1a:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     a1c:	strb.w	r4, [sp, #49]	; 0x31
     a20:	strb.w	r4, [sp, #50]	; 0x32
     a24:	strb.w	r4, [sp, #51]	; 0x33
     a28:	bl	8470 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
     a2c:	add	sp, #56	; 0x38
     a2e:	pop	{r4, pc}

00000a30 <SDFile::rewindDirectory()>:
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
	virtual void rewindDirectory(void) {
     a30:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     a32:	cbz	r3, a5c <SDFile::rewindDirectory()+0x2c>
  int read() {
    return BaseFile::read();
  }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
     a34:	ldrb	r2, [r3, #0]
     a36:	tst.w	r2, #112	; 0x70
     a3a:	bne.n	a3e <SDFile::rewindDirectory()+0xe>
     a3c:	bx	lr
     a3e:	push	{r4, lr}
     a40:	mov	r4, r0
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     a42:	movs	r1, #0
     a44:	mov	r0, r3
     a46:	bl	929c <FatFile::seekSet(unsigned long)>
     a4a:	ldr	r0, [r4, #96]	; 0x60
           m_xFile ? m_xFile->rename(dirFile->m_xFile, newPath) : false;
  }
  /** Set the file's current position to zero. */
  void rewind() {
    if (m_fFile) m_fFile->rewind();
    if (m_xFile) m_xFile->rewind();
     a4c:	cbz	r0, a5a <SDFile::rewindDirectory()+0x2a>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     a4e:	movs	r2, #0
     a50:	movs	r3, #0
		sdfatfile.rewindDirectory();
	}
     a52:	ldmia.w	sp!, {r4, lr}
     a56:	b.w	7210 <ExFatFile::seekSet(unsigned long long)>
     a5a:	pop	{r4, pc}
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     a5c:	ldr	r0, [r0, #96]	; 0x60
     a5e:	cmp	r0, #0
     a60:	beq.n	a3c <SDFile::rewindDirectory()+0xc>
     a62:	ldrb.w	r3, [r0, #49]	; 0x31
     a66:	tst.w	r3, #80	; 0x50
     a6a:	beq.n	a3c <SDFile::rewindDirectory()+0xc>
     a6c:	movs	r2, #0
     a6e:	movs	r3, #0
     a70:	b.w	7210 <ExFatFile::seekSet(unsigned long long)>

00000a74 <SDClass::usedSize()>:
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
		return sdfs.rmdir(filepath);
	}
	uint64_t usedSize() {
     a74:	push	{r3, r4, r5, lr}
     a76:	mov	r5, r0
     a78:	ldr.w	r0, [r0, #1148]	; 0x47c
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     a7c:	cbz	r0, ab0 <SDClass::usedSize()+0x3c>
    m_cache.invalidate();
    return m_cache.buffer();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
     a7e:	ldr	r4, [r0, #28]
     a80:	subs	r4, #1
    return m_fVol ? m_fVol->fatStartSector() :
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
     a82:	bl	9ac8 <FatPartition::freeClusterCount()>
     a86:	ldr.w	r3, [r5, #1148]	; 0x47c
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
     a8a:	subs	r4, r4, r0
   */
  bool begin(BlockDevice* blockDev);
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() {
    return m_fVol ? m_fVol->bytesPerCluster() :
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     a8c:	cbz	r3, aa0 <SDClass::usedSize()+0x2c>
     a8e:	ldrb	r0, [r3, #6]
     a90:	mov.w	r3, #512	; 0x200
     a94:	lsl.w	r0, r3, r0
     a98:	uxth	r0, r0
     a9a:	umull	r0, r1, r0, r4
     a9e:	pop	{r3, r4, r5, pc}
     aa0:	ldr.w	r3, [r5, #1152]	; 0x480
     aa4:	cbz	r3, ac2 <SDClass::usedSize()+0x4e>
     aa6:	ldr.w	r0, [r3, #1076]	; 0x434
     aaa:	umull	r0, r1, r0, r4
     aae:	pop	{r3, r4, r5, pc}
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     ab0:	ldr.w	r3, [r5, #1152]	; 0x480
     ab4:	cbz	r3, ac2 <SDClass::usedSize()+0x4e>
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
     ab6:	mov	r0, r3
     ab8:	ldr.w	r4, [r3, #1064]	; 0x428
     abc:	bl	7e90 <ExFatPartition::freeClusterCount()>
     ac0:	b.n	a86 <SDClass::usedSize()+0x12>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     ac2:	movs	r0, #0
     ac4:	movs	r1, #0
		  * (uint64_t)sdfs.bytesPerCluster();
	}
     ac6:	pop	{r3, r4, r5, pc}

00000ac8 <SDFile::size()>:
		return false;
	}
	virtual uint64_t position() {
		return sdfatfile.curPosition();
	}
	virtual uint64_t size() {
     ac8:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     aca:	cbz	r3, ad2 <SDFile::size()+0xa>
     acc:	ldr	r0, [r3, #28]
     ace:	movs	r1, #0
     ad0:	bx	lr
     ad2:	ldr	r3, [r0, #96]	; 0x60
     ad4:	cbz	r3, adc <SDFile::size()+0x14>
     ad6:	ldr	r0, [r3, #16]
     ad8:	ldr	r1, [r3, #20]
     ada:	bx	lr
     adc:	mov	r0, r3
     ade:	mov	r1, r3
		return sdfatfile.size();
	}
     ae0:	bx	lr
     ae2:	nop

00000ae4 <SDFile::position()>:
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
		return false;
	}
	virtual uint64_t position() {
     ae4:	ldr	r3, [r0, #92]	; 0x5c
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     ae6:	cbz	r3, aee <SDFile::position()+0xa>
     ae8:	ldr	r0, [r3, #20]
     aea:	movs	r1, #0
     aec:	bx	lr
     aee:	ldr	r3, [r0, #96]	; 0x60
     af0:	cbz	r3, af8 <SDFile::position()+0x14>
     af2:	ldmia.w	r3, {r0, r1}
     af6:	bx	lr
     af8:	mov	r0, r3
     afa:	mov	r1, r3
		return sdfatfile.curPosition();
	}
     afc:	bx	lr
     afe:	nop

00000b00 <SDFile::read(void*, unsigned int)>:
		return sdfatfile.available();
	}
	virtual void flush() {
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
     b00:	ldr	r3, [r0, #92]	; 0x5c
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     b02:	cbz	r3, b0a <SDFile::read(void*, unsigned int)+0xa>
     b04:	mov	r0, r3
     b06:	b.w	8e64 <FatFile::read(void*, unsigned int)>
     b0a:	ldr	r0, [r0, #96]	; 0x60
     b0c:	cbz	r0, b12 <SDFile::read(void*, unsigned int)+0x12>
     b0e:	b.w	7040 <ExFatFile::read(void*, unsigned int)>
		return sdfatfile.read(buf, nbyte);
	}
     b12:	mov.w	r0, #4294967295
     b16:	bx	lr

00000b18 <SDFile::peek()>:
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
		return sdfatfile.write(buf, size);
	}
	virtual int peek() {
     b18:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     b1a:	cbz	r3, b22 <SDFile::peek()+0xa>
     b1c:	mov	r0, r3
     b1e:	b.w	8ffc <FatFile::peek()>
     b22:	ldr	r0, [r0, #96]	; 0x60
     b24:	cbz	r0, b2a <SDFile::peek()+0x12>
     b26:	b.w	71e0 <ExFatFile::peek()>
		return sdfatfile.peek();
	}
     b2a:	mov.w	r0, #4294967295
     b2e:	bx	lr

00000b30 <SDClass::totalSize()>:
	}
	uint64_t usedSize() {
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
     b30:	ldr.w	r2, [r0, #1148]	; 0x47c
     b34:	cbz	r2, b4a <SDClass::totalSize()+0x1a>
     b36:	ldrb	r1, [r2, #6]
     b38:	ldr	r0, [r2, #28]
     b3a:	mov.w	r3, #512	; 0x200
     b3e:	lsls	r3, r1
     b40:	uxth	r3, r3
     b42:	subs	r0, #1
     b44:	umull	r0, r1, r3, r0
     b48:	bx	lr
     b4a:	ldr.w	r2, [r0, #1152]	; 0x480
     b4e:	cbz	r2, b5e <SDClass::totalSize()+0x2e>
     b50:	ldr.w	r3, [r2, #1064]	; 0x428
     b54:	ldr.w	r0, [r2, #1076]	; 0x434
     b58:	umull	r0, r1, r3, r0
     b5c:	bx	lr
     b5e:	movs	r0, #0
     b60:	movs	r1, #0
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
	}
     b62:	bx	lr

00000b64 <SDFile::isDirectory()>:
				filename = &zeroterm;
			}
		}
		return filename;
	}
	virtual boolean isDirectory(void) {
     b64:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     b66:	cbz	r3, b76 <SDFile::isDirectory()+0x12>
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {
    return m_attributes & FILE_ATTR_DIR;
     b68:	ldrb	r3, [r3, #0]
     b6a:	tst.w	r3, #112	; 0x70
     b6e:	ite	ne
     b70:	movne	r0, #1
     b72:	moveq	r0, #0
     b74:	bx	lr
     b76:	ldr	r0, [r0, #96]	; 0x60
     b78:	cbz	r0, b88 <SDFile::isDirectory()+0x24>
    return isOpen() ? m_error & WRITE_ERROR : true;
  }
  /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
  /** \return True if this is a directory. */
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
     b7a:	ldrb.w	r3, [r0, #49]	; 0x31
     b7e:	tst.w	r3, #80	; 0x50
     b82:	ite	ne
     b84:	movne	r0, #1
     b86:	moveq	r0, #0
		return sdfatfile.isDirectory();
	}
     b88:	bx	lr
     b8a:	nop

00000b8c <SDClass::remove(char const*)>:
		return sdfs.mkdir(filepath);
	}
	bool rename(const char *oldfilepath, const char *newfilepath) {
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
     b8c:	push	{r4, lr}
     b8e:	ldr.w	r4, [r0, #1148]	; 0x47c
     b92:	sub	sp, #56	; 0x38
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
     b94:	cbz	r4, bc0 <SDClass::remove(char const*)+0x34>
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     b96:	mov	r2, r1
     b98:	mov	r0, sp
     b9a:	mov	r1, r4
     b9c:	movs	r3, #1
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     b9e:	movs	r4, #0
     ba0:	strb.w	r4, [sp]
     ba4:	strb.w	r4, [sp, #1]
     ba8:	strb.w	r4, [sp, #2]
     bac:	bl	8e48 <FatFile::open(FatVolume*, char const*, int)>
     bb0:	cbnz	r0, bb6 <SDClass::remove(char const*)+0x2a>
		return sdfs.remove(filepath);
	}
     bb2:	add	sp, #56	; 0x38
     bb4:	pop	{r4, pc}
     bb6:	mov	r0, sp
     bb8:	bl	a110 <FatFile::remove()>
     bbc:	add	sp, #56	; 0x38
     bbe:	pop	{r4, pc}
     bc0:	ldr.w	r0, [r0, #1152]	; 0x480
     bc4:	cmp	r0, #0
     bc6:	beq.n	bb2 <SDClass::remove(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     bc8:	mov	r2, r1
     bca:	movs	r3, #1
     bcc:	mov	r1, r0
     bce:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     bd0:	strb.w	r4, [sp, #49]	; 0x31
     bd4:	strb.w	r4, [sp, #50]	; 0x32
     bd8:	strb.w	r4, [sp, #51]	; 0x33
     bdc:	bl	77e4 <ExFatFile::open(ExFatVolume*, char const*, int)>
     be0:	cmp	r0, #0
     be2:	beq.n	bb2 <SDClass::remove(char const*)+0x26>
     be4:	mov	r0, sp
     be6:	bl	803c <ExFatFile::remove()>
     bea:	add	sp, #56	; 0x38
     bec:	pop	{r4, pc}
     bee:	nop

00000bf0 <SDClass::open(char const*, unsigned char)>:
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
     bf0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     bf4:	cmp	r3, #1
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
     bf6:	sub	sp, #80	; 0x50
     bf8:	mov	r5, r0
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     bfa:	beq.n	c80 <SDClass::open(char const*, unsigned char)+0x90>
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
     bfc:	cmp	r3, #2
		SDFAT_FILE file = sdfs.open(filepath, flags);
     bfe:	add.w	r1, r1, #4
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
     c02:	movw	r3, #514	; 0x202
		SDFAT_FILE file = sdfs.open(filepath, flags);
     c06:	mov	r0, sp
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
     c08:	it	ne
     c0a:	movne	r3, #0
		SDFAT_FILE file = sdfs.open(filepath, flags);
     c0c:	bl	a980 <FsVolume::open(char const*, int)>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     c10:	ldr	r3, [sp, #72]	; 0x48
     c12:	cmp	r3, #0
     c14:	beq.n	c92 <SDClass::open(char const*, unsigned char)+0xa2>
		if (file) return File(new SDFile(file));
     c16:	movs	r0, #104	; 0x68
     c18:	bl	dde8 <operator new(unsigned int)>
     c1c:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     c1e:	ldrb.w	r6, [sp, #4]
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     c22:	ldr	r0, [pc, #136]	; (cac <SDClass::open(char const*, unsigned char)+0xbc>)
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     c24:	ldr	r1, [pc, #136]	; (cb0 <SDClass::open(char const*, unsigned char)+0xc0>)
     c26:	ldr	r2, [sp, #8]
     c28:	ldrb.w	r3, [sp, #12]
     c2c:	str	r0, [r4, #0]
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     c2e:	add	r7, sp, #16
     c30:	strb	r6, [r4, #24]
     c32:	str	r1, [r4, #20]
{
  public:
	constexpr Print() : write_error(0) {}
     c34:	movs	r6, #0
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     c36:	mov.w	r8, #1000	; 0x3e8
     c3a:	mov	r1, r7
     c3c:	add.w	r0, r4, #36	; 0x24
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     c40:	str	r2, [r4, #28]
     c42:	strb.w	r3, [r4, #32]
     c46:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     c48:	strb	r6, [r4, #12]
     c4a:	str	r6, [r4, #16]
     c4c:	str.w	r8, [r4, #8]
     c50:	bl	a73c <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     c54:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     c56:	ldr	r1, [pc, #92]	; (cb4 <SDClass::open(char const*, unsigned char)+0xc4>)
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     c58:	ldr	r2, [pc, #92]	; (cb8 <SDClass::open(char const*, unsigned char)+0xc8>)
     c5a:	str	r6, [r4, #100]	; 0x64
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     c5c:	adds	r3, #1
     c5e:	strb	r6, [r5, #4]
     c60:	str.w	r8, [r5, #8]
     c64:	strb	r6, [r5, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
     c66:	str	r4, [r5, #16]
     c68:	str	r1, [r4, #20]
		if (f) f->refcount++;
     c6a:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     c6c:	str	r2, [r5, #0]
     c6e:	ldr	r3, [pc, #76]	; (cbc <SDClass::open(char const*, unsigned char)+0xcc>)
     c70:	str	r3, [sp, #0]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     c72:	mov	r0, r7
     c74:	bl	a7b4 <FsBaseFile::close()>
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
     c78:	mov	r0, r5
     c7a:	add	sp, #80	; 0x50
     c7c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     c80:	movw	r3, #16898	; 0x4202
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
     c84:	adds	r1, #4
     c86:	mov	r0, sp
     c88:	bl	a980 <FsVolume::open(char const*, int)>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     c8c:	ldr	r3, [sp, #72]	; 0x48
     c8e:	cmp	r3, #0
     c90:	bne.n	c16 <SDClass::open(char const*, unsigned char)+0x26>
     c92:	ldr	r3, [sp, #76]	; 0x4c
     c94:	cmp	r3, #0
     c96:	bne.n	c16 <SDClass::open(char const*, unsigned char)+0x26>
     c98:	mov.w	r1, #1000	; 0x3e8

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     c9c:	ldr	r2, [pc, #24]	; (cb8 <SDClass::open(char const*, unsigned char)+0xc8>)
     c9e:	strb	r3, [r5, #4]
     ca0:	strb	r3, [r5, #12]
     ca2:	str	r3, [r5, #16]
     ca4:	str	r1, [r5, #8]
     ca6:	str	r2, [r5, #0]
     ca8:	add	r7, sp, #16
     caa:	b.n	c6e <SDClass::open(char const*, unsigned char)+0x7e>
     cac:	.word	0x00012ed8
     cb0:	.word	0x00012e0c
     cb4:	.word	0x00012e54
     cb8:	.word	0x00012e78
     cbc:	.word	0x00012e30

00000cc0 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   */
  int available() {
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
     cc0:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     cc2:	cbz	r3, cca <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     cc4:	mov	r0, r3
     cc6:	b.w	9488 <FatFile::sync()>
     cca:	ldr	r0, [r0, #76]	; 0x4c
     ccc:	cbz	r0, cd2 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     cce:	b.w	82c8 <ExFatFile::sync()>
     cd2:	bx	lr

00000cd4 <SDFile::write(void const*, unsigned int)>:
	virtual void whoami() {
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
     cd4:	ldr	r3, [r0, #92]	; 0x5c
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     cd6:	cbz	r3, cde <SDFile::write(void const*, unsigned int)+0xa>
     cd8:	mov	r0, r3
     cda:	b.w	950c <FatFile::write(void const*, unsigned int)>
     cde:	ldr	r0, [r0, #96]	; 0x60
     ce0:	cbz	r0, ce6 <SDFile::write(void const*, unsigned int)+0x12>
     ce2:	b.w	86d8 <ExFatFile::write(void const*, unsigned int)>
		return sdfatfile.write(buf, size);
	}
     ce6:	bx	lr

00000ce8 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     ce8:	ldr	r3, [r0, #72]	; 0x48
     cea:	cbz	r3, cf2 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     cec:	mov	r0, r3
     cee:	b.w	950c <FatFile::write(void const*, unsigned int)>
     cf2:	ldr	r0, [r0, #76]	; 0x4c
     cf4:	cbz	r0, cfa <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     cf6:	b.w	86d8 <ExFatFile::write(void const*, unsigned int)>
    return BaseFile::write(buffer, size);
  }
     cfa:	bx	lr

00000cfc <StreamFile<FsBaseFile, unsigned long long>::available()>:
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
     cfc:	ldr	r2, [r0, #72]	; 0x48
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     cfe:	cbz	r2, d1a <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  void fsetpos(const fspos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() {
    return isFile() ? fileSize() - curPosition() : 0;
     d00:	ldrb	r3, [r2, #0]
     d02:	and.w	r3, r3, #8
     d06:	and.w	r0, r3, #255	; 0xff
     d0a:	cbz	r3, d4e <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     d0c:	ldr	r3, [r2, #28]
     d0e:	ldr	r0, [r2, #20]
     d10:	subs	r0, r3, r0
     d12:	it	mi
     d14:	mvnmi.w	r0, #2147483648	; 0x80000000
     d18:	bx	lr
     d1a:	ldr	r1, [r0, #76]	; 0x4c
     d1c:	cbz	r1, d50 <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     d1e:	ldrb.w	r3, [r1, #49]	; 0x31
     d22:	and.w	r3, r3, #8
     d26:	and.w	r0, r3, #255	; 0xff
     d2a:	cbz	r3, d4e <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
     d2c:	ldrd	r2, r3, [r1, #16]
     d30:	ldrd	r0, r1, [r1]
     d34:	subs	r0, r2, r0
     d36:	push	{r4, r5}
     d38:	sbc.w	r1, r3, r1
     d3c:	movs	r5, #0
     d3e:	mvn.w	r4, #2147483648	; 0x80000000
     d42:	cmp	r5, r1
     d44:	it	eq
     d46:	cmpeq	r4, r0
     d48:	bcs.n	d4c <StreamFile<FsBaseFile, unsigned long long>::available()+0x50>
     d4a:	mov	r0, r4
    return BaseFile::available();
  }
     d4c:	pop	{r4, r5}
     d4e:	bx	lr
     d50:	mov	r0, r1
     d52:	bx	lr

00000d54 <SDClass::exists(char const*)>:
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
	bool exists(const char *filepath) {
     d54:	push	{r4, r5, lr}
     d56:	ldr.w	r4, [r0, #1148]	; 0x47c
     d5a:	sub	sp, #60	; 0x3c
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
           m_xVol ? m_xVol->exists(path) : false;
     d5c:	cbz	r4, d7c <SDClass::exists(char const*)+0x28>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     d5e:	movs	r5, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
     d60:	mov	r2, r1
     d62:	mov	r3, r5
     d64:	mov	r1, r4
     d66:	mov	r0, sp
     d68:	strb.w	r5, [sp]
     d6c:	strb.w	r5, [sp, #1]
     d70:	strb.w	r5, [sp, #2]
     d74:	bl	8e48 <FatFile::open(FatVolume*, char const*, int)>
		return sdfs.exists(filepath);
	}
     d78:	add	sp, #60	; 0x3c
     d7a:	pop	{r4, r5, pc}
     d7c:	ldr.w	r0, [r0, #1152]	; 0x480
     d80:	cmp	r0, #0
     d82:	beq.n	d78 <SDClass::exists(char const*)+0x24>
   *
   * \return true if the file exists else false.
   */
  bool exists(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
     d84:	mov	r2, r1
     d86:	mov	r3, r4
     d88:	mov	r1, r0
     d8a:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     d8c:	strb.w	r4, [sp, #49]	; 0x31
     d90:	strb.w	r4, [sp, #50]	; 0x32
     d94:	strb.w	r4, [sp, #51]	; 0x33
     d98:	bl	77e4 <ExFatFile::open(ExFatVolume*, char const*, int)>
     d9c:	add	sp, #60	; 0x3c
     d9e:	pop	{r4, r5, pc}

00000da0 <SDFile::seek(unsigned long long, int)>:
		return sdfatfile.read(buf, nbyte);
	}
	virtual bool truncate(uint64_t size=0) {
		return sdfatfile.truncate(size);
	}
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
     da0:	push	{r4, r6, r7}
     da2:	ldr	r4, [sp, #12]
     da4:	mov	r6, r2
     da6:	mov	r7, r3
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
     da8:	cbz	r4, db8 <SDFile::seek(unsigned long long, int)+0x18>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
     daa:	cmp	r4, #1
     dac:	beq.n	dec <SDFile::seek(unsigned long long, int)+0x4c>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
     dae:	cmp	r4, #2
     db0:	beq.n	dce <SDFile::seek(unsigned long long, int)+0x2e>
		return false;
	}
     db2:	movs	r0, #0
     db4:	pop	{r4, r6, r7}
     db6:	bx	lr
     db8:	ldr	r4, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     dba:	cbz	r4, df4 <SDFile::seek(unsigned long long, int)+0x54>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     dbc:	cmp	r3, #1
     dbe:	it	eq
     dc0:	cmpeq	r2, #0
     dc2:	bcs.n	db2 <SDFile::seek(unsigned long long, int)+0x12>
     dc4:	mov	r0, r4
     dc6:	mov	r1, r2
     dc8:	pop	{r4, r6, r7}
     dca:	b.w	929c <FatFile::seekSet(unsigned long)>
     dce:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     dd0:	cbz	r3, e00 <SDFile::seek(unsigned long long, int)+0x60>
   * Can't be used for directory files since file size is not defined.
   * \param[in] offset The new position in bytes from end-of-file.
   * \return true for success or false for failure.
   */
  bool seekEnd(int64_t offset = 0) {
    return seekSet(fileSize() + offset);
     dd2:	ldr	r2, [r3, #28]
     dd4:	adds	r6, r6, r2
     dd6:	adc.w	r7, r7, #0
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     dda:	cmp	r7, #1
     ddc:	it	eq
     dde:	cmpeq	r6, #0
     de0:	bcs.n	db2 <SDFile::seek(unsigned long long, int)+0x12>
     de2:	mov	r1, r6
     de4:	mov	r0, r3
     de6:	pop	{r4, r6, r7}
     de8:	b.w	929c <FatFile::seekSet(unsigned long)>
     dec:	ldr	r3, [r0, #92]	; 0x5c
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     dee:	cbz	r3, e14 <SDFile::seek(unsigned long long, int)+0x74>
  /** Set the files position to current position + \a pos. See seekSet().
   * \param[in] offset The new position in bytes from the current position.
   * \return true for success or false for failure.
   */
  bool seekCur(int64_t offset) {
    return seekSet(curPosition() + offset);
     df0:	ldr	r2, [r3, #20]
     df2:	b.n	dd4 <SDFile::seek(unsigned long long, int)+0x34>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     df4:	ldr	r0, [r0, #96]	; 0x60
     df6:	cmp	r0, #0
     df8:	beq.n	db2 <SDFile::seek(unsigned long long, int)+0x12>
     dfa:	pop	{r4, r6, r7}
     dfc:	b.w	7210 <ExFatFile::seekSet(unsigned long long)>
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     e00:	ldr	r0, [r0, #96]	; 0x60
     e02:	cmp	r0, #0
     e04:	beq.n	db2 <SDFile::seek(unsigned long long, int)+0x12>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     e06:	ldrd	r2, r3, [r0, #16]
     e0a:	adds	r2, r2, r6
     e0c:	adcs	r3, r7
     e0e:	pop	{r4, r6, r7}
     e10:	b.w	7210 <ExFatFile::seekSet(unsigned long long)>
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     e14:	ldr	r0, [r0, #96]	; 0x60
     e16:	cmp	r0, #0
     e18:	beq.n	db2 <SDFile::seek(unsigned long long, int)+0x12>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     e1a:	ldrd	r2, r3, [r0]
     e1e:	adds	r2, r2, r6
     e20:	adcs	r3, r7
     e22:	b.n	dfa <SDFile::seek(unsigned long long, int)+0x5a>

00000e24 <File::~File()>:
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     e24:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     e26:	ldr	r3, [pc, #32]	; (e48 <File::~File()+0x24>)
     e28:	push	{r4, lr}
     e2a:	mov	r4, r0
     e2c:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     e2e:	cbz	r2, e42 <File::~File()+0x1e>
     e30:	ldr	r3, [r2, #16]
     e32:	subs	r3, #1
     e34:	str	r3, [r2, #16]
     e36:	cbnz	r3, e42 <File::~File()+0x1e>
     e38:	ldr	r0, [r0, #16]
     e3a:	cbz	r0, e42 <File::~File()+0x1e>
     e3c:	ldr	r3, [r0, #0]
     e3e:	ldr	r3, [r3, #32]
     e40:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
     e42:	mov	r0, r4
     e44:	pop	{r4, pc}
     e46:	nop
     e48:	.word	0x00012e78

00000e4c <SDFile::~SDFile()>:
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
     e4c:	push	{r3, r4, r5, lr}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     e4e:	ldr	r3, [r0, #92]	; 0x5c
     e50:	ldr	r2, [pc, #80]	; (ea4 <SDFile::~SDFile()+0x58>)
     e52:	str	r2, [r0, #0]
     e54:	mov	r4, r0
		if (sdfatfile) sdfatfile.close();
     e56:	add.w	r5, r0, #36	; 0x24
     e5a:	cbz	r3, e9a <SDFile::~SDFile()+0x4e>
     e5c:	mov	r0, r5
     e5e:	bl	a7b4 <FsBaseFile::close()>
		if (filename) free(filename);
     e62:	ldr	r0, [r4, #100]	; 0x64
     e64:	cbz	r0, e6a <SDFile::~SDFile()+0x1e>
     e66:	bl	ebb0 <free>
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     e6a:	ldr	r3, [pc, #60]	; (ea8 <SDFile::~SDFile()+0x5c>)
     e6c:	str	r3, [r4, #20]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     e6e:	mov	r0, r5
     e70:	bl	a7b4 <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     e74:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     e76:	ldr	r3, [pc, #52]	; (eac <SDFile::~SDFile()+0x60>)
     e78:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     e7a:	cbz	r2, e8e <SDFile::~SDFile()+0x42>
     e7c:	ldr	r3, [r2, #16]
     e7e:	subs	r3, #1
     e80:	str	r3, [r2, #16]
     e82:	cbnz	r3, e8e <SDFile::~SDFile()+0x42>
     e84:	ldr	r0, [r4, #16]
     e86:	cbz	r0, e8e <SDFile::~SDFile()+0x42>
     e88:	ldr	r3, [r0, #0]
     e8a:	ldr	r3, [r3, #32]
     e8c:	blx	r3
	}
     e8e:	mov	r0, r4
     e90:	movs	r1, #104	; 0x68
     e92:	bl	ddec <operator delete(void*, unsigned int)>
     e96:	mov	r0, r4
     e98:	pop	{r3, r4, r5, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     e9a:	ldr	r3, [r0, #96]	; 0x60
     e9c:	cmp	r3, #0
     e9e:	bne.n	e5c <SDFile::~SDFile()+0x10>
     ea0:	b.n	e62 <SDFile::~SDFile()+0x16>
     ea2:	nop
     ea4:	.word	0x00012ed8
     ea8:	.word	0x00012e30
     eac:	.word	0x00012e78

00000eb0 <File::~File()>:
     eb0:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     eb2:	ldr	r3, [pc, #40]	; (edc <File::~File()+0x2c>)
     eb4:	push	{r4, lr}
     eb6:	mov	r4, r0
     eb8:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     eba:	cbz	r2, ece <File::~File()+0x1e>
     ebc:	ldr	r3, [r2, #16]
     ebe:	subs	r3, #1
     ec0:	str	r3, [r2, #16]
     ec2:	cbnz	r3, ece <File::~File()+0x1e>
     ec4:	ldr	r0, [r0, #16]
     ec6:	cbz	r0, ece <File::~File()+0x1e>
     ec8:	ldr	r3, [r0, #0]
     eca:	ldr	r3, [r3, #32]
     ecc:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
     ece:	mov	r0, r4
     ed0:	movs	r1, #20
     ed2:	bl	ddec <operator delete(void*, unsigned int)>
     ed6:	mov	r0, r4
     ed8:	pop	{r4, pc}
     eda:	nop
     edc:	.word	0x00012e78

00000ee0 <MTPStorage_SD::~MTPStorage_SD()>:
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     ee0:	ldr.w	r2, [r0, #224]	; 0xe0

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     ee4:	push	{r3, r4, r5, lr}
     ee6:	ldr	r3, [pc, #104]	; (f50 <MTPStorage_SD::~MTPStorage_SD()+0x70>)
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     ee8:	ldr	r5, [pc, #104]	; (f54 <MTPStorage_SD::~MTPStorage_SD()+0x74>)
     eea:	str	r3, [r0, #0]
     eec:	mov	r4, r0
     eee:	str.w	r5, [r0, #208]	; 0xd0
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     ef2:	cbz	r2, efc <MTPStorage_SD::~MTPStorage_SD()+0x1c>
     ef4:	ldr	r3, [r2, #16]
     ef6:	subs	r3, #1
     ef8:	str	r3, [r2, #16]
     efa:	cbz	r3, f30 <MTPStorage_SD::~MTPStorage_SD()+0x50>
     efc:	ldr.w	r2, [r4, #204]	; 0xcc
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     f00:	str.w	r5, [r4, #188]	; 0xbc
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     f04:	cbz	r2, f0e <MTPStorage_SD::~MTPStorage_SD()+0x2e>
     f06:	ldr	r3, [r2, #16]
     f08:	subs	r3, #1
     f0a:	str	r3, [r2, #16]
     f0c:	cbz	r3, f40 <MTPStorage_SD::~MTPStorage_SD()+0x60>
     f0e:	ldr.w	r2, [r4, #184]	; 0xb8
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     f12:	str.w	r5, [r4, #168]	; 0xa8
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     f16:	cbz	r2, f2c <MTPStorage_SD::~MTPStorage_SD()+0x4c>
     f18:	ldr	r3, [r2, #16]
     f1a:	subs	r3, #1
     f1c:	str	r3, [r2, #16]
     f1e:	cbnz	r3, f2c <MTPStorage_SD::~MTPStorage_SD()+0x4c>
     f20:	ldr.w	r0, [r4, #184]	; 0xb8
     f24:	cbz	r0, f2c <MTPStorage_SD::~MTPStorage_SD()+0x4c>
     f26:	ldr	r3, [r0, #0]
     f28:	ldr	r3, [r3, #32]
     f2a:	blx	r3
     f2c:	mov	r0, r4
     f2e:	pop	{r3, r4, r5, pc}
     f30:	ldr.w	r0, [r0, #224]	; 0xe0
     f34:	cmp	r0, #0
     f36:	beq.n	efc <MTPStorage_SD::~MTPStorage_SD()+0x1c>
     f38:	ldr	r3, [r0, #0]
     f3a:	ldr	r3, [r3, #32]
     f3c:	blx	r3
     f3e:	b.n	efc <MTPStorage_SD::~MTPStorage_SD()+0x1c>
     f40:	ldr.w	r0, [r4, #204]	; 0xcc
     f44:	cmp	r0, #0
     f46:	beq.n	f0e <MTPStorage_SD::~MTPStorage_SD()+0x2e>
     f48:	ldr	r3, [r0, #0]
     f4a:	ldr	r3, [r3, #32]
     f4c:	blx	r3
     f4e:	b.n	f0e <MTPStorage_SD::~MTPStorage_SD()+0x2e>
     f50:	.word	0x00013014
     f54:	.word	0x00012e78

00000f58 <SDFile::~SDFile()>:
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
     f58:	push	{r3, r4, r5, lr}
     f5a:	ldr	r3, [r0, #92]	; 0x5c
     f5c:	ldr	r2, [pc, #72]	; (fa8 <SDFile::~SDFile()+0x50>)
     f5e:	str	r2, [r0, #0]
     f60:	mov	r4, r0
		if (sdfatfile) sdfatfile.close();
     f62:	add.w	r5, r0, #36	; 0x24
     f66:	cbz	r3, f9e <SDFile::~SDFile()+0x46>
     f68:	mov	r0, r5
     f6a:	bl	a7b4 <FsBaseFile::close()>
		if (filename) free(filename);
     f6e:	ldr	r0, [r4, #100]	; 0x64
     f70:	cbz	r0, f76 <SDFile::~SDFile()+0x1e>
     f72:	bl	ebb0 <free>
     f76:	ldr	r3, [pc, #52]	; (fac <SDFile::~SDFile()+0x54>)
     f78:	str	r3, [r4, #20]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     f7a:	mov	r0, r5
     f7c:	bl	a7b4 <FsBaseFile::close()>
     f80:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     f82:	ldr	r3, [pc, #44]	; (fb0 <SDFile::~SDFile()+0x58>)
     f84:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     f86:	cbz	r2, f9a <SDFile::~SDFile()+0x42>
     f88:	ldr	r3, [r2, #16]
     f8a:	subs	r3, #1
     f8c:	str	r3, [r2, #16]
     f8e:	cbnz	r3, f9a <SDFile::~SDFile()+0x42>
     f90:	ldr	r0, [r4, #16]
     f92:	cbz	r0, f9a <SDFile::~SDFile()+0x42>
     f94:	ldr	r3, [r0, #0]
     f96:	ldr	r3, [r3, #32]
     f98:	blx	r3
	}
     f9a:	mov	r0, r4
     f9c:	pop	{r3, r4, r5, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     f9e:	ldr	r3, [r0, #96]	; 0x60
     fa0:	cmp	r3, #0
     fa2:	bne.n	f68 <SDFile::~SDFile()+0x10>
     fa4:	b.n	f6e <SDFile::~SDFile()+0x16>
     fa6:	nop
     fa8:	.word	0x00012ed8
     fac:	.word	0x00012e30
     fb0:	.word	0x00012e78

00000fb4 <storage_configure()>:
MTPStorage_SD storage;
MTPD       mtpd(&storage);


void storage_configure()
{
     fb4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  #if USE_SD==1
    #if defined SD_SCK
      SPI.setMOSI(SD_MOSI);
     fb8:	movs	r1, #11
MTPStorage_SD storage;
MTPD       mtpd(&storage);


void storage_configure()
{
     fba:	sub	sp, #12
  #if USE_SD==1
    #if defined SD_SCK
      SPI.setMOSI(SD_MOSI);
     fbc:	ldr	r0, [pc, #296]	; (10e8 <storage_configure()+0x134>)
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     fbe:	ldr	r5, [pc, #300]	; (10ec <storage_configure()+0x138>)
     fc0:	bl	66e4 <SPIClass::setMOSI(unsigned char)>
      SPI.setMISO(SD_MISO);
     fc4:	movs	r1, #12
     fc6:	ldr	r0, [pc, #288]	; (10e8 <storage_configure()+0x134>)
     fc8:	bl	6788 <SPIClass::setMISO(unsigned char)>
     fcc:	addw	r4, r5, #1164	; 0x48c
      SPI.setSCK(SD_SCK);
     fd0:	movs	r1, #13
     fd2:	ldr	r0, [pc, #276]	; (10e8 <storage_configure()+0x134>)
     fd4:	bl	6828 <SPIClass::setSCK(unsigned char)>
     fd8:	mov	r0, r4
     fda:	mov.w	r1, #0
     fde:	bl	ba70 <SdioCard::begin(SdioConfig)>
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    return m_card && !m_card->errorCode();
     fe2:	mov	r0, r4
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
     fe4:	str.w	r4, [r5, #1160]	; 0x488
    return m_card && !m_card->errorCode();
     fe8:	bl	b1d0 <SdioCard::errorCode() const>
     fec:	cbz	r0, ffe <storage_configure()+0x4a>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     fee:	movs	r1, #10
     ff0:	ldr	r0, [pc, #252]	; (10f0 <storage_configure()+0x13c>)
     ff2:	bl	c398 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     ff6:	ldr	r0, [pc, #252]	; (10f4 <storage_configure()+0x140>)
     ff8:	bl	dccc <Print::println()>
     ffc:	b.n	ffc <storage_configure()+0x48>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     ffe:	ldr.w	r1, [r5, #1160]	; 0x488
    1002:	adds	r0, r5, #4
    1004:	bl	a8bc <FsVolume::begin(BlockDeviceInterface*)>
    1008:	cmp	r0, #0
    100a:	beq.n	fee <storage_configure()+0x3a>
    mSD_Base() {
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSEMS) {
    100c:	ldr	r1, [pc, #232]	; (10f8 <storage_configure()+0x144>)

    for(int ii=0; ii<nsd; ii++)
    { if(cs[ii] == BUILTIN_SDCARD)
      {
        if(!sdx[ii].sdfs.begin(SdioConfig(FIFO_SDIO))) {Serial.println("No storage"); while(1);};
        storage.addFilesystem(sdx[ii], sd_str[ii]);
    100e:	ldr.w	r8, [pc, #244]	; 1104 <storage_configure()+0x150>
    1012:	ldr	r3, [r1, #4]
    1014:	ldr.w	r2, [r8]
    1018:	cmp	r3, #19
    101a:	bgt.n	1028 <storage_configure()+0x74>
        sd_name[fsCount] = name;
    101c:	add.w	r4, r1, r3, lsl #2
        sdx[fsCount++] = &fs;
    1020:	adds	r3, #1
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSEMS) {
        sd_name[fsCount] = name;
    1022:	str	r2, [r4, #8]
        sdx[fsCount++] = &fs;
    1024:	str	r5, [r4, #88]	; 0x58
    1026:	str	r3, [r1, #4]
    1028:	ldr.w	r0, [r5, #1148]	; 0x47c
    102c:	ldr	r3, [pc, #188]	; (10ec <storage_configure()+0x138>)
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    102e:	cmp	r0, #0
    1030:	beq.n	10be <storage_configure()+0x10a>
	uint64_t usedSize() {
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    1032:	ldrb	r6, [r0, #6]
    1034:	ldr	r4, [r0, #28]
    1036:	mov.w	r3, #512	; 0x200
    103a:	lsl.w	r6, r3, r6
    103e:	uxth	r6, r6
    1040:	subs	r4, #1
    1042:	umull	r6, r7, r6, r4
    return m_fVol ? m_fVol->fatStartSector() :
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
    1046:	bl	9ac8 <FatPartition::freeClusterCount()>
    104a:	ldr.w	r3, [r5, #1148]	; 0x47c
    104e:	ldr	r2, [pc, #156]	; (10ec <storage_configure()+0x138>)
	}
	bool rmdir(const char *filepath) {
		return sdfs.rmdir(filepath);
	}
	uint64_t usedSize() {
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
    1050:	subs	r4, r4, r0
   */
  bool begin(BlockDevice* blockDev);
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() {
    return m_fVol ? m_fVol->bytesPerCluster() :
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    1052:	cbz	r3, 10aa <storage_configure()+0xf6>
    1054:	ldrb	r1, [r3, #6]
    1056:	ldr.w	r2, [r8]
    105a:	mov.w	r3, #512	; 0x200
    105e:	lsls	r3, r1
    1060:	uxth	r3, r3
    1062:	umull	r4, r5, r3, r4
        if(!sdx[ii].sdfs.begin(SdSpiConfig(cs[ii], SHARED_SPI, SPI_SPEED))) {Serial.println("No storage"); while(1);}
        storage.addFilesystem(sdx[ii], sd_str[ii]);
      }
        uint64_t totalSize = sdx[ii].totalSize();
        uint64_t usedSize  = sdx[ii].usedSize();
        Serial.printf("Storage %d %d %s ",ii,cs[ii],sd_str[ii]); Serial.print(totalSize); Serial.print(" "); Serial.println(usedSize);
    1066:	str	r2, [sp, #0]
    1068:	movs	r2, #0
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	size_t print(int64_t n);
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    106a:	mov	r9, r2
    106c:	ldr	r1, [pc, #140]	; (10fc <storage_configure()+0x148>)
    106e:	ldr	r0, [pc, #132]	; (10f4 <storage_configure()+0x140>)
    1070:	mov.w	r8, #10
    1074:	movs	r3, #254	; 0xfe
    1076:	bl	dcfc <Print::printf(char const*, ...)>
    107a:	mov	r2, r6
    107c:	mov	r3, r7
    107e:	stmia.w	sp, {r8, r9}
    1082:	ldr	r0, [pc, #112]	; (10f4 <storage_configure()+0x140>)
    1084:	bl	dd18 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
    1088:	movs	r1, #1
    108a:	ldr	r0, [pc, #116]	; (1100 <storage_configure()+0x14c>)
    108c:	bl	c398 <usb_serial_write>
    1090:	stmia.w	sp, {r8, r9}
    1094:	mov	r2, r4
    1096:	mov	r3, r5
    1098:	ldr	r0, [pc, #88]	; (10f4 <storage_configure()+0x140>)
    109a:	bl	dd18 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
	size_t println(int64_t n)			{ return print(n) + println(); }
	size_t println(uint64_t n)			{ return print(n) + println(); }
    109e:	ldr	r0, [pc, #84]	; (10f4 <storage_configure()+0x140>)
      uint64_t usedSize  = ramfs[ii].usedSize();
      Serial.printf("Storage %d %s ",ii,lfs_str[ii]); Serial.print(totalSize); Serial.print(" "); Serial.println(usedSize);

    }
    #endif
}
    10a0:	add	sp, #12
    10a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    10a6:	b.w	dccc <Print::println()>
    10aa:	ldr.w	r3, [r2, #1152]	; 0x480
    10ae:	ldr.w	r2, [r8]
    10b2:	cbz	r3, 10e0 <storage_configure()+0x12c>
    10b4:	ldr.w	r3, [r3, #1076]	; 0x434
    10b8:	umull	r4, r5, r3, r4
    10bc:	b.n	1066 <storage_configure()+0xb2>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    10be:	ldr.w	r0, [r3, #1152]	; 0x480
    10c2:	cbz	r0, 10d6 <storage_configure()+0x122>
    10c4:	ldr.w	r4, [r0, #1064]	; 0x428
    10c8:	ldr.w	r6, [r0, #1076]	; 0x434
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    10cc:	umull	r6, r7, r6, r4
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
    10d0:	bl	7e90 <ExFatPartition::freeClusterCount()>
    10d4:	b.n	104a <storage_configure()+0x96>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    10d6:	movs	r4, #0
    10d8:	movs	r5, #0
    10da:	mov	r6, r4
    10dc:	mov	r7, r5
    10de:	b.n	1066 <storage_configure()+0xb2>
   */
  bool begin(BlockDevice* blockDev);
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() {
    return m_fVol ? m_fVol->bytesPerCluster() :
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    10e0:	movs	r4, #0
    10e2:	movs	r5, #0
    10e4:	b.n	1066 <storage_configure()+0xb2>
    10e6:	nop
    10e8:	.word	0x1fff097c
    10ec:	.word	0x1fff1498
    10f0:	.word	0x00012fa8
    10f4:	.word	0x1fff0abc
    10f8:	.word	0x1fff1948
    10fc:	.word	0x00012f94
    1100:	.word	0x00013120
    1104:	.word	0x1fff0974

00001108 <setup>:
    *time = FS_TIME(hour(), minute(), second());
    *ms10 = second() & 1 ? 100 : 0;
  }

void setup()
{ 
    1108:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    110c:	ldr	r2, [pc, #520]	; (1318 <setup+0x210>)
    110e:	ldr	r1, [pc, #524]	; (131c <setup+0x214>)
    1110:	ldr	r5, [pc, #524]	; (1320 <setup+0x218>)
    1112:	ldr	r4, [pc, #528]	; (1324 <setup+0x21c>)
    1114:	sub	sp, #108	; 0x6c
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1116:	ldrb	r3, [r2, #0]
    1118:	cmp	r3, #0
    111a:	beq.n	1116 <setup+0xe>
    111c:	ldrb	r3, [r1, #0]
    111e:	lsls	r3, r3, #31
    1120:	bpl.n	1116 <setup+0xe>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1122:	ldr	r3, [r5, #0]
    1124:	ldr	r0, [r4, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1126:	subs	r3, r3, r0
    1128:	cmp	r3, #14
    112a:	bls.n	1116 <setup+0xe>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    112c:	movs	r1, #8
    112e:	ldr	r0, [pc, #504]	; (1328 <setup+0x220>)
    1130:	ldr.w	r8, [pc, #552]	; 135c <setup+0x254>
    1134:	bl	c398 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1138:	ldr	r0, [pc, #496]	; (132c <setup+0x224>)
    113a:	bl	dccc <Print::println()>
  while(!Serial); 
  Serial.println("MTP_test");
  
  usb_mtp_configure();
  storage_configure();
    113e:	bl	fb4 <storage_configure()>

  #if USE_SD==1
  // Set Time callback // needed for SDFat-beta
  FsDateTime::callback = dateTime;
    1142:	ldr	r3, [pc, #492]	; (1330 <setup+0x228>)
    1144:	ldr.w	r6, [r8, #1148]	; 0x47c
    1148:	ldr	r2, [pc, #488]	; (1334 <setup+0x22c>)
    114a:	str	r2, [r3, #0]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
           m_xVol ? m_xVol->exists(path) : false;
    114c:	cmp	r6, #0
    114e:	beq.w	125c <setup+0x154>
    1152:	movs	r5, #0
    1154:	add	r4, sp, #24
    1156:	mov	r1, r6
    1158:	mov	r3, r5
    115a:	mov	r0, r4
    115c:	ldr	r2, [pc, #472]	; (1338 <setup+0x230>)
    115e:	strb.w	r5, [sp, #24]
    1162:	strb.w	r5, [sp, #25]
    1166:	strb.w	r5, [sp, #26]
    116a:	bl	8e48 <FatFile::open(FatVolume*, char const*, int)>

  {
    const char *str = "test1.txt";
    if(sdx[0].exists(str)) sdx[0].remove(str);
    116e:	cmp	r0, #0
    1170:	bne.w	1282 <setup+0x17a>
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    1174:	movw	r3, #514	; 0x202
    1178:	mov	r0, r4
    117a:	ldr	r2, [pc, #444]	; (1338 <setup+0x230>)
    117c:	ldr	r1, [pc, #444]	; (133c <setup+0x234>)
    117e:	bl	a980 <FsVolume::open(char const*, int)>
    1182:	ldr	r3, [sp, #96]	; 0x60
    1184:	cmp	r3, #0
    1186:	beq.w	12f6 <setup+0x1ee>
		if (file) return File(new SDFile(file));
    118a:	movs	r0, #104	; 0x68
    118c:	bl	dde8 <operator new(unsigned int)>
    1190:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    1192:	ldrb.w	r5, [sp, #28]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    1196:	ldr	r2, [sp, #32]
    1198:	ldrb.w	r3, [sp, #36]	; 0x24
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    119c:	ldr	r0, [pc, #416]	; (1340 <setup+0x238>)
    119e:	ldr	r1, [pc, #420]	; (1344 <setup+0x23c>)
    11a0:	strb	r5, [r4, #24]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    11a2:	mov.w	r9, #1000	; 0x3e8
{
  public:
	constexpr Print() : write_error(0) {}
    11a6:	movs	r5, #0
    11a8:	add	r7, sp, #40	; 0x28
    11aa:	str	r0, [r4, #0]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    11ac:	str	r1, [r4, #20]
    11ae:	str	r2, [r4, #28]
    11b0:	strb.w	r3, [r4, #32]
    11b4:	add.w	r0, r4, #36	; 0x24
    11b8:	mov	r1, r7
    11ba:	strb	r5, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    11bc:	strb	r5, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    11be:	str	r5, [r4, #16]
    11c0:	str.w	r9, [r4, #8]
    11c4:	bl	a73c <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    11c8:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    11ca:	ldr	r2, [pc, #380]	; (1348 <setup+0x240>)
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    11cc:	ldr	r6, [pc, #380]	; (134c <setup+0x244>)
    11ce:	str	r5, [r4, #100]	; 0x64
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    11d0:	adds	r3, #1
    11d2:	strb.w	r5, [sp, #8]
    11d6:	str.w	r9, [sp, #12]
    11da:	strb.w	r5, [sp, #16]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
    11de:	str	r4, [sp, #20]
    11e0:	str	r2, [r4, #20]
		if (f) f->refcount++;
    11e2:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    11e4:	str	r6, [sp, #4]
    11e6:	ldr	r3, [pc, #360]	; (1350 <setup+0x248>)
    11e8:	str	r3, [sp, #24]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
    11ea:	mov	r0, r7
    11ec:	bl	a7b4 <FsBaseFile::close()>
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    11f0:	movs	r2, #19
    11f2:	ldr	r1, [pc, #352]	; (1354 <setup+0x24c>)
    11f4:	add	r0, sp, #4
    11f6:	bl	dca0 <Print::write(unsigned char const*, unsigned int)>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    11fa:	add	r0, sp, #4
    11fc:	bl	dccc <Print::println()>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    1200:	ldr	r0, [sp, #20]
    1202:	cbz	r0, 120a <setup+0x102>
    1204:	ldr	r3, [r0, #0]
    1206:	ldr	r3, [r3, #64]	; 0x40
    1208:	blx	r3
    120a:	movs	r1, #23
    120c:	ldr	r0, [pc, #328]	; (1358 <setup+0x250>)
    120e:	bl	c398 <usb_serial_write>
    1212:	ldr	r0, [pc, #280]	; (132c <setup+0x224>)
    1214:	bl	dccc <Print::println()>
    1218:	ldr.w	r2, [r8, #1148]	; 0x47c
    121c:	ldr	r3, [pc, #316]	; (135c <setup+0x254>)
   *
   * \return true for success or false for failure.
   */
  bool ls(print_t* pr) {
    return m_fVol ? m_fVol->ls(pr) :
           m_xVol ? m_xVol->ls(pr) : false;
    121e:	cmp	r2, #0
    1220:	beq.n	12b2 <setup+0x1aa>
   * LS_R - Recursive list of subdirectories.
   *
   * \return true for success or false for failure.
   */
  bool ls(print_t* pr, uint8_t flags = 0) {
    return m_vwd.ls(pr, flags);
    1222:	movs	r3, #0
    1224:	addw	r0, r2, #1084	; 0x43c
    1228:	ldr	r1, [pc, #256]	; (132c <setup+0x224>)
    122a:	mov	r2, r3
    122c:	bl	9754 <FatFile::ls(Print*, unsigned char, unsigned char)>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1230:	ldr	r2, [sp, #20]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1232:	str	r6, [sp, #4]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1234:	cbz	r2, 1248 <setup+0x140>
    1236:	ldr	r3, [r2, #16]
    1238:	subs	r3, #1
    123a:	str	r3, [r2, #16]
    123c:	cbnz	r3, 1248 <setup+0x140>
    123e:	ldr	r0, [sp, #20]
    1240:	cbz	r0, 1248 <setup+0x140>
    1242:	ldr	r3, [r0, #0]
    1244:	ldr	r3, [r3, #32]
    1246:	blx	r3
    1248:	movs	r1, #11
    124a:	ldr	r0, [pc, #276]	; (1360 <setup+0x258>)
    124c:	bl	c398 <usb_serial_write>
    1250:	ldr	r0, [pc, #216]	; (132c <setup+0x224>)
    1252:	bl	dccc <Print::println()>
    file.close();

  #endif

  Serial.println("\nSetup done");
}
    1256:	add	sp, #108	; 0x6c
    1258:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
           m_xVol ? m_xVol->exists(path) : false;
    125c:	ldr.w	r1, [r8, #1152]	; 0x480
    1260:	add	r4, sp, #24
    1262:	cmp	r1, #0
    1264:	beq.n	1174 <setup+0x6c>
    1266:	mov	r3, r6
    1268:	mov	r0, r4
    126a:	ldr	r2, [pc, #204]	; (1338 <setup+0x230>)
    126c:	strb.w	r6, [sp, #73]	; 0x49
    1270:	strb.w	r6, [sp, #74]	; 0x4a
    1274:	strb.w	r6, [sp, #75]	; 0x4b
    1278:	bl	77e4 <ExFatFile::open(ExFatVolume*, char const*, int)>
  // Set Time callback // needed for SDFat-beta
  FsDateTime::callback = dateTime;

  {
    const char *str = "test1.txt";
    if(sdx[0].exists(str)) sdx[0].remove(str);
    127c:	cmp	r0, #0
    127e:	beq.w	1174 <setup+0x6c>
    1282:	ldr.w	r5, [r8, #1148]	; 0x47c
    1286:	ldr	r3, [pc, #212]	; (135c <setup+0x254>)
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
    1288:	cbz	r5, 12c8 <setup+0x1c0>
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    128a:	mov	r1, r5
    128c:	movs	r3, #1
    128e:	movs	r5, #0
    1290:	ldr	r2, [pc, #164]	; (1338 <setup+0x230>)
    1292:	strb.w	r5, [sp, #24]
    1296:	mov	r0, r4
    1298:	strb.w	r5, [sp, #25]
    129c:	strb.w	r5, [sp, #26]
    12a0:	bl	8e48 <FatFile::open(FatVolume*, char const*, int)>
    12a4:	cmp	r0, #0
    12a6:	beq.w	1174 <setup+0x6c>
    12aa:	mov	r0, r4
    12ac:	bl	a110 <FatFile::remove()>
    12b0:	b.n	1174 <setup+0x6c>
   *
   * \return true for success or false for failure.
   */
  bool ls(print_t* pr) {
    return m_fVol ? m_fVol->ls(pr) :
           m_xVol ? m_xVol->ls(pr) : false;
    12b2:	ldr.w	r0, [r3, #1152]	; 0x480
    12b6:	cmp	r0, #0
    12b8:	beq.n	1230 <setup+0x128>
   * LS_R - Recursive list of subdirectories.
   *
   * \return true for success or false for failure.
   */
  bool ls(print_t* pr, uint8_t flags = 0) {
    return m_vwd.ls(pr, flags);
    12ba:	mov	r3, r2
    12bc:	ldr	r1, [pc, #108]	; (132c <setup+0x224>)
    12be:	add.w	r0, r0, #1088	; 0x440
    12c2:	bl	78b8 <ExFatFile::ls(Print*, unsigned char, unsigned char)>
    12c6:	b.n	1230 <setup+0x128>
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
    12c8:	ldr.w	r1, [r3, #1152]	; 0x480
    12cc:	cmp	r1, #0
    12ce:	beq.w	1174 <setup+0x6c>
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    12d2:	movs	r3, #1
    12d4:	ldr	r2, [pc, #96]	; (1338 <setup+0x230>)
    12d6:	strb.w	r5, [sp, #73]	; 0x49
    12da:	mov	r0, r4
    12dc:	strb.w	r5, [sp, #74]	; 0x4a
    12e0:	strb.w	r5, [sp, #75]	; 0x4b
    12e4:	bl	77e4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    12e8:	cmp	r0, #0
    12ea:	beq.w	1174 <setup+0x6c>
    12ee:	mov	r0, r4
    12f0:	bl	803c <ExFatFile::remove()>
    12f4:	b.n	1174 <setup+0x6c>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    12f6:	ldr	r3, [sp, #100]	; 0x64
    12f8:	cmp	r3, #0
    12fa:	bne.w	118a <setup+0x82>
    12fe:	mov.w	r2, #1000	; 0x3e8

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    1302:	ldr	r6, [pc, #72]	; (134c <setup+0x244>)
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    1304:	strb.w	r3, [sp, #8]
    1308:	strb.w	r3, [sp, #16]
    130c:	str	r3, [sp, #20]
    130e:	str	r2, [sp, #12]
    1310:	str	r6, [sp, #4]
    1312:	add	r7, sp, #40	; 0x28
    1314:	b.n	11e6 <setup+0xde>
    1316:	nop
    1318:	.word	0x1fff209c
    131c:	.word	0x1fff1f94
    1320:	.word	0x1fff1f98
    1324:	.word	0x1fff2114
    1328:	.word	0x00012ff8
    132c:	.word	0x1fff0abc
    1330:	.word	0x1fff1f34
    1334:	.word	0x00000615
    1338:	.word	0x00012fb4
    133c:	.word	0x1fff149c
    1340:	.word	0x00012ed8
    1344:	.word	0x00012e0c
    1348:	.word	0x00012e54
    134c:	.word	0x00012e78
    1350:	.word	0x00012e30
    1354:	.word	0x00012fc0
    1358:	.word	0x00012fd4
    135c:	.word	0x1fff1498
    1360:	.word	0x00012fec

00001364 <loop>:

void test_events(void);

void loop()
{ 
  mtpd.loop();
    1364:	ldr	r0, [pc, #4]	; (136c <loop+0x8>)
    1366:	b.w	5d64 <MTPD::loop()>
    136a:	nop
    136c:	.word	0x1fff1a4c

00001370 <_GLOBAL__sub_I__Z17usb_mtp_configurev>:
}
    1370:	push	{r3, r4, r5, r6, r7, lr}


class SDClass : public FS
{
public:
	SDClass() { }
    1372:	ldr	r3, [pc, #188]	; (1430 <_GLOBAL__sub_I__Z17usb_mtp_configurev+0xc0>)
//  const int cs[] = {BUILTIN_SDCARD,38}; // edit to reflect your configuration
  const char *sd_str[]={"sdio"}; // edit to reflect your configuration
  const int cs[] = {BUILTIN_SDCARD}; // edit to reflect your configuration
  const int nsd = sizeof(cs)/sizeof(int);

SDClass sdx[nsd];
    1374:	ldr	r6, [pc, #188]	; (1434 <_GLOBAL__sub_I__Z17usb_mtp_configurev+0xc4>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    1376:	ldr	r7, [pc, #192]	; (1438 <_GLOBAL__sub_I__Z17usb_mtp_configurev+0xc8>)
    1378:	str.w	r7, [r3, #1164]	; 0x48c
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() : m_fVol(nullptr), m_xVol(nullptr) {}
    137c:	movs	r5, #0
    137e:	ldr	r2, [pc, #188]	; (143c <_GLOBAL__sub_I__Z17usb_mtp_configurev+0xcc>)
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
    1380:	ldr	r0, [pc, #188]	; (1440 <_GLOBAL__sub_I__Z17usb_mtp_configurev+0xd0>)
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    1382:	ldr	r1, [pc, #192]	; (1444 <_GLOBAL__sub_I__Z17usb_mtp_configurev+0xd4>)

class mSD_Base
{
  public:
    mSD_Base() {
      fsCount = 0;
    1384:	ldr	r4, [pc, #192]	; (1448 <_GLOBAL__sub_I__Z17usb_mtp_configurev+0xd8>)
    1386:	str	r2, [r3, #0]
    1388:	movs	r7, #40	; 0x28
    138a:	mov	r2, r6
    138c:	str.w	r0, [r3, #1176]	; 0x498
    1390:	str.w	r1, [r3, #1184]	; 0x4a0
    1394:	strb.w	r7, [r3, #1195]	; 0x4ab
    1398:	ldr	r1, [pc, #176]	; (144c <_GLOBAL__sub_I__Z17usb_mtp_configurev+0xdc>)
    139a:	str.w	r5, [r3, #1148]	; 0x47c
    139e:	str.w	r5, [r3, #1152]	; 0x480
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() : m_options(FIFO_SDIO) {}
    13a2:	strb.w	r5, [r3, #1172]	; 0x494
    13a6:	strb.w	r5, [r3, #1198]	; 0x4ae
    13aa:	mov	r0, r5
    13ac:	bl	ded0 <__aeabi_atexit>
  const int nfs = sizeof(lfs_size)/sizeof(int);

  LittleFS_RAM ramfs[nfs]; // needs to be declared if LittleFS is used in storage.h
#endif

MTPStorage_SD storage;
    13b0:	mov	r2, r6

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
    13b2:	ldr	r6, [pc, #156]	; (1450 <_GLOBAL__sub_I__Z17usb_mtp_configurev+0xe0>)
    13b4:	ldr	r3, [pc, #156]	; (1454 <_GLOBAL__sub_I__Z17usb_mtp_configurev+0xe4>)
    13b6:	str	r6, [r4, #0]
    13b8:	mov.w	r6, #1000	; 0x3e8
    13bc:	str.w	r3, [r4, #168]	; 0xa8
    13c0:	str.w	r3, [r4, #188]	; 0xbc
    13c4:	str.w	r3, [r4, #208]	; 0xd0
    13c8:	ldr	r1, [pc, #140]	; (1458 <_GLOBAL__sub_I__Z17usb_mtp_configurev+0xe8>)

class mSD_Base
{
  public:
    mSD_Base() {
      fsCount = 0;
    13ca:	str	r5, [r4, #4]

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
    13cc:	mvn.w	r7, #1
    13d0:	mov	r0, r4
    13d2:	strb.w	r5, [r4, #172]	; 0xac
    13d6:	strb.w	r5, [r4, #180]	; 0xb4
    13da:	str.w	r5, [r4, #184]	; 0xb8
    13de:	strb.w	r5, [r4, #192]	; 0xc0
    13e2:	strb.w	r5, [r4, #200]	; 0xc8
    13e6:	str.w	r5, [r4, #204]	; 0xcc
    13ea:	strb.w	r5, [r4, #212]	; 0xd4
    13ee:	strb.w	r5, [r4, #220]	; 0xdc
    13f2:	str.w	r5, [r4, #224]	; 0xe0
    13f6:	str.w	r6, [r4, #176]	; 0xb0
    13fa:	str.w	r6, [r4, #196]	; 0xc4
    13fe:	str.w	r6, [r4, #216]	; 0xd8
    1402:	str.w	r5, [r4, #228]	; 0xe4
    1406:	str.w	r5, [r4, #232]	; 0xe8
    140a:	str.w	r5, [r4, #236]	; 0xec
    140e:	str.w	r5, [r4, #244]	; 0xf4
    1412:	strb.w	r5, [r4, #248]	; 0xf8
    1416:	strb.w	r5, [r4, #249]	; 0xf9
    141a:	str.w	r7, [r4, #240]	; 0xf0
    141e:	bl	ded0 <__aeabi_atexit>

// MTP Responder.
class MTPD {
public:

  explicit MTPD(MTPStorageInterface* storage): storage_(storage) {}
    1422:	ldr	r3, [pc, #56]	; (145c <_GLOBAL__sub_I__Z17usb_mtp_configurev+0xec>)
    1424:	stmia.w	r3, {r4, r5}
    1428:	strb	r5, [r3, #8]
    142a:	str	r5, [r3, #12]
    142c:	pop	{r3, r4, r5, r6, r7, pc}
    142e:	nop
    1430:	.word	0x1fff1498
    1434:	.word	0x1fff0970
    1438:	.word	0x0001323c
    143c:	.word	0x00012f38
    1440:	.word	0x000131e4
    1444:	.word	0x38011001
    1448:	.word	0x1fff1948
    144c:	.word	0x000005d5
    1450:	.word	0x00013014
    1454:	.word	0x00012e78
    1458:	.word	0x00000ee1
    145c:	.word	0x1fff1a4c

00001460 <MTPStorage_SD::addFilesystem(FS&, char const*)>:
    mSD_Base() {
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSEMS) {
    1460:	ldr	r3, [r0, #4]
    1462:	cmp	r3, #19
    1464:	bgt.n	1478 <MTPStorage_SD::addFilesystem(FS&, char const*)+0x18>

// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
{ 
public:
  void addFilesystem(FS &fs, const char *name) { sd_addFilesystem(fs, name);}
    1466:	push	{r4}
    1468:	add.w	r4, r0, r3, lsl #2
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSEMS) {
        sd_name[fsCount] = name;
        sdx[fsCount++] = &fs;
    146c:	adds	r3, #1
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSEMS) {
        sd_name[fsCount] = name;
    146e:	str	r2, [r4, #8]
        sdx[fsCount++] = &fs;
    1470:	str	r3, [r0, #4]
    1472:	str	r1, [r4, #88]	; 0x58

// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
{ 
public:
  void addFilesystem(FS &fs, const char *name) { sd_addFilesystem(fs, name);}
    1474:	ldr.w	r4, [sp], #4
    1478:	bx	lr
    147a:	nop

0000147c <MTPStorage_SD::get_FSCount()>:
  uint16_t ConstructFilename(int i, char* out, int len) ;
  void OpenFileByIndex(uint32_t i, uint32_t mode = FILE_READ) ;
  void dumpIndexList(void);
  void printRecord(int h, Record *p);

  uint32_t get_FSCount(void) {return sd_getFSCount();}
    147c:	ldr	r0, [r0, #4]
    147e:	bx	lr

00001480 <MTPStorage_SD::get_FSName(unsigned long)>:
        sdx[fsCount++] = &fs;
      }
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}
    1480:	add.w	r1, r0, r1, lsl #2
  void OpenFileByIndex(uint32_t i, uint32_t mode = FILE_READ) ;
  void dumpIndexList(void);
  void printRecord(int h, Record *p);

  uint32_t get_FSCount(void) {return sd_getFSCount();}
  const char *get_FSName(uint32_t storage) { return sd_getFSName(storage);}
    1484:	ldr	r0, [r1, #8]
    1486:	bx	lr

00001488 <MTPStorage_SD::readonly(unsigned long)>:

// These should probably be weak.
void mtp_yield() {}
void mtp_lock_storage(bool lock) {}

  bool MTPStorage_SD::readonly(uint32_t store) { return false; }
    1488:	movs	r0, #0
    148a:	bx	lr

0000148c <MTPStorage_SD::has_directories(unsigned long)>:
  bool MTPStorage_SD::has_directories(uint32_t store) { return true; }
    148c:	movs	r0, #1
    148e:	bx	lr

00001490 <MTPStorage_SD::totalSize(unsigned long)>:
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) { return sdx[store]->remove(filename);  }
    bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }

    uint64_t sd_totalSize(uint32_t store) { return sdx[store]->totalSize();  }
    1490:	add.w	r1, r0, r1, lsl #2
    1494:	ldr	r0, [r1, #88]	; 0x58
    1496:	ldr	r3, [r0, #0]
    1498:	ldr	r3, [r3, #28]
    149a:	bx	r3

0000149c <MTPStorage_SD::usedSize(unsigned long)>:
    uint64_t sd_usedSize(uint32_t store)  { return sdx[store]->usedSize();  }
    149c:	add.w	r1, r0, r1, lsl #2
    14a0:	ldr	r0, [r1, #88]	; 0x58
    14a2:	ldr	r3, [r0, #0]
    14a4:	ldr	r3, [r3, #24]
    14a6:	bx	r3

000014a8 <MTPStorage_SD::write(char const*, unsigned long)>:
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    14a8:	ldr.w	r0, [r0, #204]	; 0xcc
    14ac:	cmp	r0, #0
    14ae:	beq.n	1516 <MTPStorage_SD::write(char const*, unsigned long)+0x6e>
    #endif
    return ret;
  }

  size_t MTPStorage_SD::write(const char* data, uint32_t bytes)
  {
    14b0:	push	{r4, r5, r6}
    14b2:	ldr	r4, [r0, #0]
    14b4:	ldr	r3, [pc, #108]	; (1524 <MTPStorage_SD::write(char const*, unsigned long)+0x7c>)
    14b6:	ldr	r4, [r4, #44]	; 0x2c
    14b8:	cmp	r4, r3
    14ba:	bne.n	1510 <MTPStorage_SD::write(char const*, unsigned long)+0x68>
    14bc:	ldr	r0, [r0, #16]
    14be:	cbz	r0, 150a <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    14c0:	ldr	r4, [r0, #0]
    14c2:	ldr	r4, [r4, #44]	; 0x2c
    14c4:	cmp	r4, r3
    14c6:	bne.n	1510 <MTPStorage_SD::write(char const*, unsigned long)+0x68>
    14c8:	ldr	r0, [r0, #16]
    14ca:	cbz	r0, 150a <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    14cc:	ldr	r4, [r0, #0]
    14ce:	ldr	r4, [r4, #44]	; 0x2c
    14d0:	cmp	r4, r3
    14d2:	bne.n	1510 <MTPStorage_SD::write(char const*, unsigned long)+0x68>
    14d4:	ldr	r0, [r0, #16]
    14d6:	cbz	r0, 150a <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    14d8:	ldr	r4, [r0, #0]
    14da:	ldr	r4, [r4, #44]	; 0x2c
    14dc:	cmp	r4, r3
    14de:	bne.n	1510 <MTPStorage_SD::write(char const*, unsigned long)+0x68>
    14e0:	ldr	r0, [r0, #16]
    14e2:	cbz	r0, 150a <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    14e4:	mov	r6, r2
    14e6:	ldr	r2, [r0, #0]
    14e8:	ldr	r4, [r2, #44]	; 0x2c
    14ea:	cmp	r4, r3
    14ec:	mov	r5, r1
    14ee:	bne.n	151a <MTPStorage_SD::write(char const*, unsigned long)+0x72>
    14f0:	ldr	r0, [r0, #16]
    14f2:	cbz	r0, 150a <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    14f4:	ldr	r2, [r0, #0]
    14f6:	ldr	r4, [r2, #44]	; 0x2c
    14f8:	cmp	r4, r3
    14fa:	bne.n	151a <MTPStorage_SD::write(char const*, unsigned long)+0x72>
    14fc:	ldr	r0, [r0, #16]
    14fe:	cbz	r0, 150a <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1500:	ldr	r3, [r0, #0]
    1502:	mov	r2, r6
    1504:	ldr	r3, [r3, #44]	; 0x2c
      mtp_lock_storage(true);
      size_t ret = file_.write(data,bytes);
      mtp_lock_storage(false);
      return ret;
  }
    1506:	pop	{r4, r5, r6}
    1508:	bx	r3
    150a:	movs	r0, #0
    150c:	pop	{r4, r5, r6}
    150e:	bx	lr
    1510:	mov	r3, r4
    1512:	pop	{r4, r5, r6}
    1514:	bx	r3
    1516:	movs	r0, #0
    1518:	bx	lr
    151a:	mov	r2, r6
    151c:	mov	r1, r5
    151e:	mov	r3, r4
    1520:	pop	{r4, r5, r6}
    1522:	bx	r3
    1524:	.word	0x00000489

00001528 <MTPStorage_SD::CloseIndex()>:

  uint64_t MTPStorage_SD::totalSize(uint32_t store) { return sd_totalSize(store); }
  uint64_t MTPStorage_SD::usedSize(uint32_t store) { return sd_usedSize(store); }

  void MTPStorage_SD::CloseIndex()
  {
    1528:	push	{r4, lr}
    152a:	mov	r4, r0
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    152c:	ldr.w	r0, [r0, #184]	; 0xb8
    1530:	cmp	r0, #0
    1532:	beq.n	1614 <MTPStorage_SD::CloseIndex()+0xec>
    1534:	ldr	r3, [r0, #0]
    1536:	ldr	r2, [pc, #256]	; (1638 <MTPStorage_SD::CloseIndex()+0x110>)
    1538:	ldr	r3, [r3, #68]	; 0x44
    153a:	cmp	r3, r2
    153c:	bne.n	1620 <MTPStorage_SD::CloseIndex()+0xf8>
    153e:	ldr	r0, [r0, #16]
    1540:	cmp	r0, #0
    1542:	beq.n	1614 <MTPStorage_SD::CloseIndex()+0xec>
    1544:	ldr	r2, [r0, #0]
    1546:	ldr	r2, [r2, #68]	; 0x44
    1548:	cmp	r2, r3
    154a:	bne.n	1632 <MTPStorage_SD::CloseIndex()+0x10a>
    154c:	ldr	r0, [r0, #16]
    154e:	cmp	r0, #0
    1550:	beq.n	1614 <MTPStorage_SD::CloseIndex()+0xec>
    1552:	ldr	r3, [r0, #0]
    1554:	ldr	r3, [r3, #68]	; 0x44
    1556:	cmp	r3, r2
    1558:	bne.n	1620 <MTPStorage_SD::CloseIndex()+0xf8>
    155a:	ldr	r0, [r0, #16]
    155c:	cmp	r0, #0
    155e:	beq.n	1614 <MTPStorage_SD::CloseIndex()+0xec>
    1560:	ldr	r2, [r0, #0]
    1562:	ldr	r2, [r2, #68]	; 0x44
    1564:	cmp	r2, r3
    1566:	bne.n	1632 <MTPStorage_SD::CloseIndex()+0x10a>
    1568:	ldr	r0, [r0, #16]
    156a:	cmp	r0, #0
    156c:	beq.n	1614 <MTPStorage_SD::CloseIndex()+0xec>
    156e:	ldr	r3, [r0, #0]
    1570:	ldr	r3, [r3, #68]	; 0x44
    1572:	cmp	r3, r2
    1574:	bne.n	1620 <MTPStorage_SD::CloseIndex()+0xf8>
    1576:	ldr	r0, [r0, #16]
    1578:	cmp	r0, #0
    157a:	beq.n	1614 <MTPStorage_SD::CloseIndex()+0xec>
    157c:	ldr	r3, [r0, #0]
    157e:	ldr	r3, [r3, #68]	; 0x44
    1580:	blx	r3
    mtp_lock_storage(true);
    if(sd_isOpen(index_)) index_.close();
    1582:	cmp	r0, #0
    1584:	beq.n	1614 <MTPStorage_SD::CloseIndex()+0xec>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    1586:	ldr.w	r0, [r4, #184]	; 0xb8
    158a:	cmp	r0, #0
    158c:	beq.n	1614 <MTPStorage_SD::CloseIndex()+0xec>
    158e:	ldr	r2, [r0, #0]
    1590:	ldr	r3, [pc, #168]	; (163c <MTPStorage_SD::CloseIndex()+0x114>)
    1592:	ldr	r2, [r2, #64]	; 0x40
    1594:	cmp	r2, r3
    1596:	bne.n	1624 <MTPStorage_SD::CloseIndex()+0xfc>
    1598:	ldr	r0, [r0, #16]
    159a:	cmp	r0, #0
    159c:	beq.n	1614 <MTPStorage_SD::CloseIndex()+0xec>
    159e:	ldr	r2, [r0, #0]
    15a0:	ldr	r2, [r2, #64]	; 0x40
    15a2:	cmp	r2, r3
    15a4:	bne.n	1624 <MTPStorage_SD::CloseIndex()+0xfc>
    15a6:	ldr	r0, [r0, #16]
    15a8:	cmp	r0, #0
    15aa:	beq.n	1614 <MTPStorage_SD::CloseIndex()+0xec>
    15ac:	ldr	r2, [r0, #0]
    15ae:	ldr	r2, [r2, #64]	; 0x40
    15b0:	cmp	r2, r3
    15b2:	bne.n	1624 <MTPStorage_SD::CloseIndex()+0xfc>
    15b4:	ldr	r0, [r0, #16]
    15b6:	cmp	r0, #0
    15b8:	beq.n	1614 <MTPStorage_SD::CloseIndex()+0xec>
    15ba:	ldr	r2, [r0, #0]
    15bc:	ldr	r2, [r2, #64]	; 0x40
    15be:	cmp	r2, r3
    15c0:	bne.n	1624 <MTPStorage_SD::CloseIndex()+0xfc>
    15c2:	ldr	r0, [r0, #16]
    15c4:	cbz	r0, 1614 <MTPStorage_SD::CloseIndex()+0xec>
    15c6:	ldr	r2, [r0, #0]
    15c8:	ldr	r2, [r2, #64]	; 0x40
    15ca:	cmp	r2, r3
    15cc:	bne.n	1624 <MTPStorage_SD::CloseIndex()+0xfc>
    15ce:	ldr	r0, [r0, #16]
    15d0:	cbz	r0, 1614 <MTPStorage_SD::CloseIndex()+0xec>
    15d2:	ldr	r2, [r0, #0]
    15d4:	ldr	r2, [r2, #64]	; 0x40
    15d6:	cmp	r2, r3
    15d8:	bne.n	1624 <MTPStorage_SD::CloseIndex()+0xfc>
    15da:	ldr	r0, [r0, #16]
    15dc:	cbz	r0, 1614 <MTPStorage_SD::CloseIndex()+0xec>
    15de:	ldr	r2, [r0, #0]
    15e0:	ldr	r2, [r2, #64]	; 0x40
    15e2:	cmp	r2, r3
    15e4:	bne.n	1624 <MTPStorage_SD::CloseIndex()+0xfc>
    15e6:	ldr	r0, [r0, #16]
    15e8:	cbz	r0, 1614 <MTPStorage_SD::CloseIndex()+0xec>
    15ea:	ldr	r2, [r0, #0]
    15ec:	ldr	r2, [r2, #64]	; 0x40
    15ee:	cmp	r2, r3
    15f0:	bne.n	1624 <MTPStorage_SD::CloseIndex()+0xfc>
    15f2:	ldr	r0, [r0, #16]
    15f4:	cbz	r0, 1614 <MTPStorage_SD::CloseIndex()+0xec>
    15f6:	ldr	r2, [r0, #0]
    15f8:	ldr	r2, [r2, #64]	; 0x40
    15fa:	cmp	r2, r3
    15fc:	bne.n	1624 <MTPStorage_SD::CloseIndex()+0xfc>
    15fe:	ldr	r0, [r0, #16]
    1600:	cbz	r0, 1614 <MTPStorage_SD::CloseIndex()+0xec>
    1602:	ldr	r2, [r0, #0]
    1604:	ldr	r2, [r2, #64]	; 0x40
    1606:	cmp	r2, r3
    1608:	bne.n	1624 <MTPStorage_SD::CloseIndex()+0xfc>
    160a:	ldr	r0, [r0, #16]
    160c:	cbz	r0, 1614 <MTPStorage_SD::CloseIndex()+0xec>
    160e:	ldr	r3, [r0, #0]
    1610:	ldr	r3, [r3, #64]	; 0x40
    1612:	blx	r3
    mtp_lock_storage(false);
    index_generated = false;
    1614:	movs	r3, #0
    1616:	strb.w	r3, [r4, #248]	; 0xf8
    index_entries_ = 0;
    161a:	str.w	r3, [r4, #244]	; 0xf4
    161e:	pop	{r4, pc}
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1620:	blx	r3
    1622:	b.n	1582 <MTPStorage_SD::CloseIndex()+0x5a>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    1624:	blx	r2
  void MTPStorage_SD::CloseIndex()
  {
    mtp_lock_storage(true);
    if(sd_isOpen(index_)) index_.close();
    mtp_lock_storage(false);
    index_generated = false;
    1626:	movs	r3, #0
    1628:	strb.w	r3, [r4, #248]	; 0xf8
    index_entries_ = 0;
    162c:	str.w	r3, [r4, #244]	; 0xf4
    1630:	pop	{r4, pc}
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1632:	blx	r2
    1634:	b.n	1582 <MTPStorage_SD::CloseIndex()+0x5a>
    1636:	nop
    1638:	.word	0x0000050d
    163c:	.word	0x00000501

00001640 <File::invalidate() [clone .isra.0]>:
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1640:	ldr	r2, [r0, #0]
    1642:	cmp	r2, #0
    1644:	beq.n	16c0 <File::invalidate() [clone .isra.0]+0x80>
    1646:	ldr	r3, [r2, #16]
    1648:	subs	r3, #1
    164a:	str	r3, [r2, #16]
    164c:	cmp	r3, #0
    164e:	bne.n	16c0 <File::invalidate() [clone .isra.0]+0x80>
	}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
    1650:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (f && --(f->refcount) == 0) delete f;
    1654:	ldr	r4, [r0, #0]
    1656:	cmp	r4, #0
    1658:	beq.n	16c2 <File::invalidate() [clone .isra.0]+0x82>
    165a:	ldr	r3, [r4, #0]
    165c:	ldr	r1, [pc, #120]	; (16d8 <File::invalidate() [clone .isra.0]+0x98>)
    165e:	ldr	r3, [r3, #32]
    1660:	cmp	r3, r1
    1662:	bne.n	16c6 <File::invalidate() [clone .isra.0]+0x86>
    1664:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1666:	ldr	r6, [pc, #116]	; (16dc <File::invalidate() [clone .isra.0]+0x9c>)
    1668:	str	r6, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    166a:	cbz	r2, 16b4 <File::invalidate() [clone .isra.0]+0x74>
    166c:	ldr	r3, [r2, #16]
    166e:	subs	r3, #1
    1670:	str	r3, [r2, #16]
    1672:	cbnz	r3, 16b4 <File::invalidate() [clone .isra.0]+0x74>
    1674:	ldr	r5, [r4, #16]
    1676:	cbz	r5, 16b4 <File::invalidate() [clone .isra.0]+0x74>
    1678:	ldr	r3, [r5, #0]
    167a:	ldr	r3, [r3, #32]
    167c:	cmp	r3, r1
    167e:	bne.n	16ce <File::invalidate() [clone .isra.0]+0x8e>
    1680:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1682:	str	r6, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1684:	cbz	r2, 16ac <File::invalidate() [clone .isra.0]+0x6c>
    1686:	ldr	r3, [r2, #16]
    1688:	subs	r3, #1
    168a:	str	r3, [r2, #16]
    168c:	cbnz	r3, 16ac <File::invalidate() [clone .isra.0]+0x6c>
    168e:	ldr	r7, [r5, #16]
    1690:	cbz	r7, 16ac <File::invalidate() [clone .isra.0]+0x6c>
    1692:	ldr	r3, [r7, #0]
    1694:	ldr	r3, [r3, #32]
    1696:	cmp	r3, r1
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1698:	mov	r0, r7
    169a:	bne.n	16d4 <File::invalidate() [clone .isra.0]+0x94>
    169c:	str.w	r6, [r0], #16
		invalidate();
    16a0:	bl	1640 <File::invalidate() [clone .isra.0]>
	}
    16a4:	mov	r0, r7
    16a6:	movs	r1, #20
    16a8:	bl	ddec <operator delete(void*, unsigned int)>
    16ac:	mov	r0, r5
    16ae:	movs	r1, #20
    16b0:	bl	ddec <operator delete(void*, unsigned int)>
    16b4:	mov	r0, r4
    16b6:	movs	r1, #20
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
	}
    16b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    16bc:	b.w	ddec <operator delete(void*, unsigned int)>
    16c0:	bx	lr
    16c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    16c6:	mov	r0, r4
	}
    16c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    16cc:	bx	r3
    16ce:	mov	r0, r5
    16d0:	blx	r3
    16d2:	b.n	16b4 <File::invalidate() [clone .isra.0]+0x74>
    16d4:	blx	r3
    16d6:	b.n	16ac <File::invalidate() [clone .isra.0]+0x6c>
    16d8:	.word	0x00000eb1
    16dc:	.word	0x00012e78

000016e0 <mtp_yield()>:
//   support serialflash
//   partial object fetch/receive
//   events (notify usb host when local storage changes) (But, this seems too difficult)

// These should probably be weak.
void mtp_yield() {}
    16e0:	bx	lr
    16e2:	nop

000016e4 <MTPStorage_SD::OpenIndex()>:
    index_generated = false;
    index_entries_ = 0;
  }

  void MTPStorage_SD::OpenIndex() 
  { if(sd_isOpen(index_)) return; // only once
    16e4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    16e8:	mov	r4, r0
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    16ea:	ldr.w	r0, [r0, #184]	; 0xb8
    16ee:	sub	sp, #28
    16f0:	cbz	r0, 1748 <MTPStorage_SD::OpenIndex()+0x64>
    16f2:	ldr	r3, [r0, #0]
    16f4:	ldr	r2, [pc, #384]	; (1878 <MTPStorage_SD::OpenIndex()+0x194>)
    16f6:	ldr	r3, [r3, #68]	; 0x44
    16f8:	cmp	r3, r2
    16fa:	bne.w	1974 <MTPStorage_SD::OpenIndex()+0x290>
    16fe:	ldr	r0, [r0, #16]
    1700:	cbz	r0, 1748 <MTPStorage_SD::OpenIndex()+0x64>
    1702:	ldr	r2, [r0, #0]
    1704:	ldr	r2, [r2, #68]	; 0x44
    1706:	cmp	r2, r3
    1708:	bne.w	197e <MTPStorage_SD::OpenIndex()+0x29a>
    170c:	ldr	r0, [r0, #16]
    170e:	cbz	r0, 1748 <MTPStorage_SD::OpenIndex()+0x64>
    1710:	ldr	r3, [r0, #0]
    1712:	ldr	r3, [r3, #68]	; 0x44
    1714:	cmp	r3, r2
    1716:	bne.w	1974 <MTPStorage_SD::OpenIndex()+0x290>
    171a:	ldr	r0, [r0, #16]
    171c:	cbz	r0, 1748 <MTPStorage_SD::OpenIndex()+0x64>
    171e:	ldr	r2, [r0, #0]
    1720:	ldr	r2, [r2, #68]	; 0x44
    1722:	cmp	r2, r3
    1724:	bne.w	197e <MTPStorage_SD::OpenIndex()+0x29a>
    1728:	ldr	r0, [r0, #16]
    172a:	cbz	r0, 1748 <MTPStorage_SD::OpenIndex()+0x64>
    172c:	ldr	r3, [r0, #0]
    172e:	ldr	r3, [r3, #68]	; 0x44
    1730:	cmp	r3, r2
    1732:	bne.w	1974 <MTPStorage_SD::OpenIndex()+0x290>
    1736:	ldr	r0, [r0, #16]
    1738:	cbz	r0, 1748 <MTPStorage_SD::OpenIndex()+0x64>
    173a:	ldr	r3, [r0, #0]
    173c:	ldr	r3, [r3, #68]	; 0x44
    173e:	blx	r3
    1740:	cbz	r0, 1748 <MTPStorage_SD::OpenIndex()+0x64>
    mtp_lock_storage(true);
    index_=sd_open(0,indexFile, FILE_WRITE_BEGIN);
    mtp_lock_storage(false);
  }
    1742:	add	sp, #28
    1744:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    1748:	ldr	r1, [r4, #88]	; 0x58
    174a:	ldr	r2, [pc, #304]	; (187c <MTPStorage_SD::OpenIndex()+0x198>)
    174c:	ldr	r3, [r1, #0]
    174e:	add	r0, sp, #4
    1750:	ldr	r5, [r3, #0]
    1752:	movs	r3, #2
    1754:	blx	r5
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1756:	ldr.w	r3, [r4, #184]	; 0xb8
    175a:	cbz	r3, 1768 <MTPStorage_SD::OpenIndex()+0x84>
    175c:	ldr	r2, [r3, #16]
    175e:	subs	r2, #1
    1760:	str	r2, [r3, #16]
    1762:	cmp	r2, #0
    1764:	beq.w	1888 <MTPStorage_SD::OpenIndex()+0x1a4>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    1768:	ldr	r3, [sp, #20]
    176a:	str.w	r3, [r4, #184]	; 0xb8
		if (f) f->refcount++;
    176e:	cmp	r3, #0
    1770:	beq.n	1742 <MTPStorage_SD::OpenIndex()+0x5e>
    1772:	ldr	r2, [r3, #16]
		return *this;
	}
	virtual ~File() {
    1774:	ldr	r1, [pc, #264]	; (1880 <MTPStorage_SD::OpenIndex()+0x19c>)
    1776:	str	r1, [sp, #4]
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    1778:	adds	r2, #1
    177a:	str	r2, [r3, #16]
    177c:	ldr	r2, [sp, #20]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    177e:	cmp	r2, #0
    1780:	beq.n	1742 <MTPStorage_SD::OpenIndex()+0x5e>
    1782:	ldr	r3, [r2, #16]
    1784:	subs	r3, #1
    1786:	str	r3, [r2, #16]
    1788:	cmp	r3, #0
    178a:	bne.n	1742 <MTPStorage_SD::OpenIndex()+0x5e>
    178c:	ldr	r4, [sp, #20]
    178e:	cmp	r4, #0
    1790:	beq.n	1742 <MTPStorage_SD::OpenIndex()+0x5e>
    1792:	ldr	r2, [r4, #0]
    1794:	ldr	r3, [pc, #236]	; (1884 <MTPStorage_SD::OpenIndex()+0x1a0>)
    1796:	ldr	r2, [r2, #32]
    1798:	cmp	r2, r3
    179a:	bne.w	1988 <MTPStorage_SD::OpenIndex()+0x2a4>
    179e:	ldr	r0, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    17a0:	str	r1, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    17a2:	cmp	r0, #0
    17a4:	beq.n	1868 <MTPStorage_SD::OpenIndex()+0x184>
    17a6:	ldr	r2, [r0, #16]
    17a8:	subs	r2, #1
    17aa:	str	r2, [r0, #16]
    17ac:	cmp	r2, #0
    17ae:	bne.n	1868 <MTPStorage_SD::OpenIndex()+0x184>
    17b0:	ldr	r5, [r4, #16]
    17b2:	cmp	r5, #0
    17b4:	beq.n	1868 <MTPStorage_SD::OpenIndex()+0x184>
    17b6:	ldr	r2, [r5, #0]
    17b8:	ldr	r2, [r2, #32]
    17ba:	cmp	r2, r3
    17bc:	bne.w	199a <MTPStorage_SD::OpenIndex()+0x2b6>
    17c0:	ldr	r0, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    17c2:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    17c4:	cmp	r0, #0
    17c6:	beq.n	1860 <MTPStorage_SD::OpenIndex()+0x17c>
    17c8:	ldr	r2, [r0, #16]
    17ca:	subs	r2, #1
    17cc:	str	r2, [r0, #16]
    17ce:	cmp	r2, #0
    17d0:	bne.n	1860 <MTPStorage_SD::OpenIndex()+0x17c>
    17d2:	ldr	r6, [r5, #16]
    17d4:	cmp	r6, #0
    17d6:	beq.n	1860 <MTPStorage_SD::OpenIndex()+0x17c>
    17d8:	ldr	r2, [r6, #0]
    17da:	ldr	r2, [r2, #32]
    17dc:	cmp	r2, r3
    17de:	bne.w	19a6 <MTPStorage_SD::OpenIndex()+0x2c2>
    17e2:	ldr	r0, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    17e4:	str	r1, [r6, #0]
    17e6:	ldr.w	lr, [pc, #152]	; 1880 <MTPStorage_SD::OpenIndex()+0x19c>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    17ea:	cmp	r0, #0
    17ec:	beq.n	1858 <MTPStorage_SD::OpenIndex()+0x174>
    17ee:	ldr	r2, [r0, #16]
    17f0:	subs	r2, #1
    17f2:	str	r2, [r0, #16]
    17f4:	cbnz	r2, 1858 <MTPStorage_SD::OpenIndex()+0x174>
    17f6:	ldr	r7, [r6, #16]
    17f8:	cbz	r7, 1858 <MTPStorage_SD::OpenIndex()+0x174>
    17fa:	ldr	r2, [r7, #0]
    17fc:	ldr	r2, [r2, #32]
    17fe:	cmp	r2, r3
    1800:	bne.w	19b2 <MTPStorage_SD::OpenIndex()+0x2ce>
    1804:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1806:	str.w	lr, [r7]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    180a:	cbz	r0, 1850 <MTPStorage_SD::OpenIndex()+0x16c>
    180c:	ldr	r2, [r0, #16]
    180e:	subs	r2, #1
    1810:	str	r2, [r0, #16]
    1812:	cbnz	r2, 1850 <MTPStorage_SD::OpenIndex()+0x16c>
    1814:	ldr.w	r8, [r7, #16]
    1818:	cmp.w	r8, #0
    181c:	beq.n	1850 <MTPStorage_SD::OpenIndex()+0x16c>
    181e:	ldr.w	r2, [r8]
    1822:	ldr	r2, [r2, #32]
    1824:	cmp	r2, r3
    1826:	bne.w	19be <MTPStorage_SD::OpenIndex()+0x2da>
    182a:	ldr.w	r2, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    182e:	str.w	r1, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1832:	cbz	r2, 1848 <MTPStorage_SD::OpenIndex()+0x164>
    1834:	ldr	r3, [r2, #16]
    1836:	subs	r3, #1
    1838:	str	r3, [r2, #16]
    183a:	cbnz	r3, 1848 <MTPStorage_SD::OpenIndex()+0x164>
    183c:	ldr.w	r0, [r8, #16]
    1840:	cbz	r0, 1848 <MTPStorage_SD::OpenIndex()+0x164>
    1842:	ldr	r3, [r0, #0]
    1844:	ldr	r3, [r3, #32]
    1846:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    1848:	mov	r0, r8
    184a:	movs	r1, #20
    184c:	bl	ddec <operator delete(void*, unsigned int)>
    1850:	mov	r0, r7
    1852:	movs	r1, #20
    1854:	bl	ddec <operator delete(void*, unsigned int)>
    1858:	mov	r0, r6
    185a:	movs	r1, #20
    185c:	bl	ddec <operator delete(void*, unsigned int)>
    1860:	mov	r0, r5
    1862:	movs	r1, #20
    1864:	bl	ddec <operator delete(void*, unsigned int)>
    1868:	mov	r0, r4
    186a:	movs	r1, #20
    186c:	bl	ddec <operator delete(void*, unsigned int)>
    1870:	add	sp, #28
    1872:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1876:	nop
    1878:	.word	0x0000050d
    187c:	.word	0x0001306c
    1880:	.word	0x00012e78
    1884:	.word	0x00000eb1
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1888:	ldr.w	r5, [r4, #184]	; 0xb8
    188c:	cmp	r5, #0
    188e:	beq.w	1768 <MTPStorage_SD::OpenIndex()+0x84>
    1892:	ldr	r2, [r5, #0]
    1894:	ldr	r3, [pc, #300]	; (19c4 <MTPStorage_SD::OpenIndex()+0x2e0>)
    1896:	ldr	r2, [r2, #32]
    1898:	cmp	r2, r3
    189a:	bne.n	198e <MTPStorage_SD::OpenIndex()+0x2aa>
    189c:	ldr	r0, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    189e:	ldr	r1, [pc, #296]	; (19c8 <MTPStorage_SD::OpenIndex()+0x2e4>)
    18a0:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    18a2:	cmp	r0, #0
    18a4:	beq.n	196a <MTPStorage_SD::OpenIndex()+0x286>
    18a6:	ldr	r2, [r0, #16]
    18a8:	subs	r2, #1
    18aa:	str	r2, [r0, #16]
    18ac:	cmp	r2, #0
    18ae:	bne.n	196a <MTPStorage_SD::OpenIndex()+0x286>
    18b0:	ldr	r6, [r5, #16]
    18b2:	cmp	r6, #0
    18b4:	beq.n	196a <MTPStorage_SD::OpenIndex()+0x286>
    18b6:	ldr	r2, [r6, #0]
    18b8:	ldr	r2, [r2, #32]
    18ba:	cmp	r2, r3
    18bc:	bne.n	1994 <MTPStorage_SD::OpenIndex()+0x2b0>
    18be:	ldr	r0, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    18c0:	str	r1, [r6, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    18c2:	cmp	r0, #0
    18c4:	beq.n	1962 <MTPStorage_SD::OpenIndex()+0x27e>
    18c6:	ldr	r2, [r0, #16]
    18c8:	subs	r2, #1
    18ca:	str	r2, [r0, #16]
    18cc:	cmp	r2, #0
    18ce:	bne.n	1962 <MTPStorage_SD::OpenIndex()+0x27e>
    18d0:	ldr	r7, [r6, #16]
    18d2:	cmp	r7, #0
    18d4:	beq.n	1962 <MTPStorage_SD::OpenIndex()+0x27e>
    18d6:	ldr	r2, [r7, #0]
    18d8:	ldr	r2, [r2, #32]
    18da:	cmp	r2, r3
    18dc:	bne.n	19a0 <MTPStorage_SD::OpenIndex()+0x2bc>
    18de:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    18e0:	str	r1, [r7, #0]
    18e2:	ldr.w	lr, [pc, #228]	; 19c8 <MTPStorage_SD::OpenIndex()+0x2e4>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    18e6:	cmp	r0, #0
    18e8:	beq.n	195a <MTPStorage_SD::OpenIndex()+0x276>
    18ea:	ldr	r2, [r0, #16]
    18ec:	subs	r2, #1
    18ee:	str	r2, [r0, #16]
    18f0:	cbnz	r2, 195a <MTPStorage_SD::OpenIndex()+0x276>
    18f2:	ldr.w	r8, [r7, #16]
    18f6:	cmp.w	r8, #0
    18fa:	beq.n	195a <MTPStorage_SD::OpenIndex()+0x276>
    18fc:	ldr.w	r2, [r8]
    1900:	ldr	r2, [r2, #32]
    1902:	cmp	r2, r3
    1904:	bne.n	19ac <MTPStorage_SD::OpenIndex()+0x2c8>
    1906:	ldr.w	r0, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    190a:	str.w	lr, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    190e:	cbz	r0, 1952 <MTPStorage_SD::OpenIndex()+0x26e>
    1910:	ldr	r2, [r0, #16]
    1912:	subs	r2, #1
    1914:	str	r2, [r0, #16]
    1916:	cbnz	r2, 1952 <MTPStorage_SD::OpenIndex()+0x26e>
    1918:	ldr.w	r9, [r8, #16]
    191c:	cmp.w	r9, #0
    1920:	beq.n	1952 <MTPStorage_SD::OpenIndex()+0x26e>
    1922:	ldr.w	r2, [r9]
    1926:	ldr	r2, [r2, #32]
    1928:	cmp	r2, r3
    192a:	bne.n	19b8 <MTPStorage_SD::OpenIndex()+0x2d4>
    192c:	ldr.w	r2, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1930:	str.w	r1, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1934:	cbz	r2, 194a <MTPStorage_SD::OpenIndex()+0x266>
    1936:	ldr	r3, [r2, #16]
    1938:	subs	r3, #1
    193a:	str	r3, [r2, #16]
    193c:	cbnz	r3, 194a <MTPStorage_SD::OpenIndex()+0x266>
    193e:	ldr.w	r0, [r9, #16]
    1942:	cbz	r0, 194a <MTPStorage_SD::OpenIndex()+0x266>
    1944:	ldr	r3, [r0, #0]
    1946:	ldr	r3, [r3, #32]
    1948:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    194a:	mov	r0, r9
    194c:	movs	r1, #20
    194e:	bl	ddec <operator delete(void*, unsigned int)>
    1952:	mov	r0, r8
    1954:	movs	r1, #20
    1956:	bl	ddec <operator delete(void*, unsigned int)>
    195a:	mov	r0, r7
    195c:	movs	r1, #20
    195e:	bl	ddec <operator delete(void*, unsigned int)>
    1962:	mov	r0, r6
    1964:	movs	r1, #20
    1966:	bl	ddec <operator delete(void*, unsigned int)>
    196a:	mov	r0, r5
    196c:	movs	r1, #20
    196e:	bl	ddec <operator delete(void*, unsigned int)>
    1972:	b.n	1768 <MTPStorage_SD::OpenIndex()+0x84>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1974:	blx	r3
    index_generated = false;
    index_entries_ = 0;
  }

  void MTPStorage_SD::OpenIndex() 
  { if(sd_isOpen(index_)) return; // only once
    1976:	cmp	r0, #0
    1978:	bne.w	1742 <MTPStorage_SD::OpenIndex()+0x5e>
    197c:	b.n	1748 <MTPStorage_SD::OpenIndex()+0x64>
    197e:	blx	r2
    1980:	cmp	r0, #0
    1982:	bne.w	1742 <MTPStorage_SD::OpenIndex()+0x5e>
    1986:	b.n	1748 <MTPStorage_SD::OpenIndex()+0x64>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1988:	mov	r0, r4
    198a:	blx	r2
    198c:	b.n	1742 <MTPStorage_SD::OpenIndex()+0x5e>
    198e:	mov	r0, r5
    1990:	blx	r2
    1992:	b.n	1768 <MTPStorage_SD::OpenIndex()+0x84>
    1994:	mov	r0, r6
    1996:	blx	r2
    1998:	b.n	196a <MTPStorage_SD::OpenIndex()+0x286>
    199a:	mov	r0, r5
    199c:	blx	r2
    199e:	b.n	1868 <MTPStorage_SD::OpenIndex()+0x184>
    19a0:	mov	r0, r7
    19a2:	blx	r2
    19a4:	b.n	1962 <MTPStorage_SD::OpenIndex()+0x27e>
    19a6:	mov	r0, r6
    19a8:	blx	r2
    19aa:	b.n	1860 <MTPStorage_SD::OpenIndex()+0x17c>
    19ac:	mov	r0, r8
    19ae:	blx	r2
    19b0:	b.n	195a <MTPStorage_SD::OpenIndex()+0x276>
    19b2:	mov	r0, r7
    19b4:	blx	r2
    19b6:	b.n	1858 <MTPStorage_SD::OpenIndex()+0x174>
    19b8:	mov	r0, r9
    19ba:	blx	r2
    19bc:	b.n	1952 <MTPStorage_SD::OpenIndex()+0x26e>
    19be:	mov	r0, r8
    19c0:	blx	r2
    19c2:	b.n	1850 <MTPStorage_SD::OpenIndex()+0x16c>
    19c4:	.word	0x00000eb1
    19c8:	.word	0x00012e78

000019cc <MTPStorage_SD::ResetIndex()>:
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    19cc:	ldr.w	r3, [r0, #184]	; 0xb8
    19d0:	cmp	r3, #0
    19d2:	beq.n	1a42 <MTPStorage_SD::ResetIndex()+0x76>
    19d4:	ldr	r2, [r3, #0]
    19d6:	ldr	r1, [pc, #112]	; (1a48 <MTPStorage_SD::ResetIndex()+0x7c>)
    19d8:	ldr	r2, [r2, #68]	; 0x44
    19da:	cmp	r2, r1
    mtp_lock_storage(true);
    index_=sd_open(0,indexFile, FILE_WRITE_BEGIN);
    mtp_lock_storage(false);
  }

  void MTPStorage_SD::ResetIndex() {
    19dc:	push	{r4, lr}
    19de:	mov	r4, r0
    19e0:	bne.n	1a3c <MTPStorage_SD::ResetIndex()+0x70>
    19e2:	ldr	r0, [r3, #16]
    19e4:	cbz	r0, 1a3a <MTPStorage_SD::ResetIndex()+0x6e>
    19e6:	ldr	r3, [r0, #0]
    19e8:	ldr	r3, [r3, #68]	; 0x44
    19ea:	cmp	r3, r2
    19ec:	bne.n	1a44 <MTPStorage_SD::ResetIndex()+0x78>
    19ee:	ldr	r0, [r0, #16]
    19f0:	cbz	r0, 1a3a <MTPStorage_SD::ResetIndex()+0x6e>
    19f2:	ldr	r2, [r0, #0]
    19f4:	ldr	r2, [r2, #68]	; 0x44
    19f6:	cmp	r2, r3
    19f8:	bne.n	1a3e <MTPStorage_SD::ResetIndex()+0x72>
    19fa:	ldr	r0, [r0, #16]
    19fc:	cbz	r0, 1a3a <MTPStorage_SD::ResetIndex()+0x6e>
    19fe:	ldr	r3, [r0, #0]
    1a00:	ldr	r3, [r3, #68]	; 0x44
    1a02:	cmp	r3, r2
    1a04:	bne.n	1a44 <MTPStorage_SD::ResetIndex()+0x78>
    1a06:	ldr	r0, [r0, #16]
    1a08:	cbz	r0, 1a3a <MTPStorage_SD::ResetIndex()+0x6e>
    1a0a:	ldr	r2, [r0, #0]
    1a0c:	ldr	r2, [r2, #68]	; 0x44
    1a0e:	cmp	r2, r3
    1a10:	bne.n	1a3e <MTPStorage_SD::ResetIndex()+0x72>
    1a12:	ldr	r0, [r0, #16]
    1a14:	cbz	r0, 1a3a <MTPStorage_SD::ResetIndex()+0x6e>
    1a16:	ldr	r3, [r0, #0]
    1a18:	ldr	r3, [r3, #68]	; 0x44
    1a1a:	blx	r3
    if(!sd_isOpen(index_)) return;
    1a1c:	cbz	r0, 1a3a <MTPStorage_SD::ResetIndex()+0x6e>
    
    CloseIndex();
    1a1e:	ldr	r3, [r4, #0]
    1a20:	mov	r0, r4
    1a22:	ldr	r3, [r3, #64]	; 0x40
    1a24:	blx	r3
    OpenIndex();
    1a26:	mov	r0, r4
    1a28:	bl	16e4 <MTPStorage_SD::OpenIndex()>

    all_scanned_ = false;
    1a2c:	movs	r2, #0
    open_file_ = 0xFFFFFFFEUL;
    1a2e:	mvn.w	r3, #1
    if(!sd_isOpen(index_)) return;
    
    CloseIndex();
    OpenIndex();

    all_scanned_ = false;
    1a32:	strb.w	r2, [r4, #249]	; 0xf9
    open_file_ = 0xFFFFFFFEUL;
    1a36:	str.w	r3, [r4, #240]	; 0xf0
    1a3a:	pop	{r4, pc}
    1a3c:	mov	r0, r3
    1a3e:	blx	r2
    1a40:	b.n	1a1c <MTPStorage_SD::ResetIndex()+0x50>
    1a42:	bx	lr
    1a44:	blx	r3
    1a46:	b.n	1a1c <MTPStorage_SD::ResetIndex()+0x50>
    1a48:	.word	0x0000050d

00001a4c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:
  }

  void MTPStorage_SD::WriteIndexRecord(uint32_t i, const Record& r) 
  { OpenIndex();
    1a4c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1a50:	mov	r6, r0
    1a52:	sub	sp, #12
    1a54:	mov	r4, r1
    1a56:	mov	r7, r2
    1a58:	bl	16e4 <MTPStorage_SD::OpenIndex()>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    1a5c:	ldr.w	r5, [r6, #184]	; 0xb8
    mtp_lock_storage(true);
    index_.seek((sizeof(r) * i));
    1a60:	add.w	r4, r4, r4, lsl #4
    1a64:	cmp	r5, #0
    1a66:	beq.n	1b3e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    1a68:	ldr	r0, [r5, #0]
    1a6a:	ldr	r1, [pc, #308]	; (1ba0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x154>)
    1a6c:	lsls	r2, r4, #4
    1a6e:	ldr	r4, [r0, #52]	; 0x34
    1a70:	cmp	r4, r1
    1a72:	mov.w	ip, #0
    1a76:	bne.n	1b66 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x11a>
    1a78:	ldr	r1, [r5, #16]
    1a7a:	cmp	r1, #0
    1a7c:	beq.n	1b36 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xea>
    1a7e:	ldr	r3, [r1, #0]
    1a80:	ldr.w	r8, [r3, #52]	; 0x34
    1a84:	cmp	r8, r4
    1a86:	bne.n	1b72 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x126>
    1a88:	ldr.w	lr, [r1, #16]
    1a8c:	cmp.w	lr, #0
    1a90:	beq.n	1b44 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf8>
    1a92:	ldr.w	r4, [lr]
    1a96:	ldr	r4, [r4, #52]	; 0x34
    1a98:	cmp	r4, r8
    1a9a:	bne.n	1b7e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x132>
    1a9c:	ldr.w	lr, [lr, #16]
    1aa0:	cmp.w	lr, #0
    1aa4:	beq.n	1b44 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf8>
    1aa6:	ldr.w	r3, [lr]
    1aaa:	ldr.w	r8, [r3, #52]	; 0x34
    1aae:	cmp	r8, r4
    1ab0:	bne.n	1b8a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x13e>
    1ab2:	ldr.w	r4, [lr, #16]
    1ab6:	cmp	r4, #0
    1ab8:	beq.n	1b44 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf8>
    1aba:	ldr	r3, [r4, #0]
    1abc:	ldr.w	r9, [r3, #52]	; 0x34
    1ac0:	cmp	r9, r8
    1ac2:	bne.n	1b96 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x14a>
    1ac4:	ldr	r4, [r4, #16]
    1ac6:	cmp	r4, #0
    1ac8:	beq.n	1b44 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf8>
    1aca:	ldr	r1, [r4, #0]
    1acc:	str.w	ip, [sp]
    1ad0:	mov	r3, ip
    1ad2:	mov	r0, r4
    1ad4:	ldr	r1, [r1, #52]	; 0x34
    1ad6:	blx	r1
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    1ad8:	ldr.w	r5, [r6, #184]	; 0xb8
    1adc:	cmp	r5, #0
    1ade:	beq.n	1b3e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    1ae0:	ldr	r2, [r5, #0]
    1ae2:	ldr	r3, [pc, #192]	; (1ba4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x158>)
    1ae4:	ldr	r4, [r2, #44]	; 0x2c
    1ae6:	cmp	r4, r3
    1ae8:	bne.n	1b50 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x104>
    1aea:	ldr	r0, [r5, #16]
    1aec:	cbz	r0, 1b3e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    1aee:	ldr	r2, [r0, #0]
    1af0:	ldr	r4, [r2, #44]	; 0x2c
    1af2:	cmp	r4, r3
    1af4:	bne.n	1b62 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x116>
    1af6:	ldr	r0, [r0, #16]
    1af8:	cbz	r0, 1b3e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    1afa:	ldr	r2, [r0, #0]
    1afc:	ldr	r4, [r2, #44]	; 0x2c
    1afe:	cmp	r4, r3
    1b00:	bne.n	1b62 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x116>
    1b02:	ldr	r0, [r0, #16]
    1b04:	cbz	r0, 1b3e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    1b06:	ldr	r2, [r0, #0]
    1b08:	ldr	r4, [r2, #44]	; 0x2c
    1b0a:	cmp	r4, r3
    1b0c:	bne.n	1b62 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x116>
    1b0e:	ldr	r0, [r0, #16]
    1b10:	cbz	r0, 1b3e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    1b12:	ldr	r2, [r0, #0]
    1b14:	ldr	r4, [r2, #44]	; 0x2c
    1b16:	cmp	r4, r3
    1b18:	bne.n	1b62 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x116>
    1b1a:	ldr	r0, [r0, #16]
    1b1c:	cbz	r0, 1b3e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    1b1e:	ldr	r2, [r0, #0]
    1b20:	ldr	r4, [r2, #44]	; 0x2c
    1b22:	cmp	r4, r3
    1b24:	bne.n	1b62 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x116>
    1b26:	ldr	r0, [r0, #16]
    1b28:	cbz	r0, 1b3e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    1b2a:	ldr	r3, [r0, #0]
    1b2c:	mov	r1, r7
    1b2e:	ldr	r3, [r3, #44]	; 0x2c
    1b30:	mov.w	r2, #272	; 0x110
    1b34:	b.n	1b5a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x10e>
    1b36:	ldr	r4, [r0, #44]	; 0x2c
    1b38:	ldr	r3, [pc, #104]	; (1ba4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x158>)
    1b3a:	cmp	r4, r3
    1b3c:	bne.n	1b50 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x104>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }
    1b3e:	add	sp, #12
    1b40:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1b44:	ldr	r4, [r0, #44]	; 0x2c
    1b46:	ldr	r3, [pc, #92]	; (1ba4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x158>)
    1b48:	cmp	r4, r3
    1b4a:	bne.n	1b50 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x104>
    1b4c:	mov	r0, r1
    1b4e:	b.n	1aee <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xa2>
    1b50:	mov	r1, r7
    1b52:	mov	r0, r5
    1b54:	mov.w	r2, #272	; 0x110
    1b58:	mov	r3, r4
    1b5a:	add	sp, #12
    1b5c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1b60:	bx	r3
    1b62:	mov	r1, r7
    1b64:	b.n	1b54 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x108>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    1b66:	str.w	ip, [sp]
    1b6a:	mov	r3, ip
    1b6c:	mov	r0, r5
    1b6e:	blx	r4
    1b70:	b.n	1ad8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    1b72:	str.w	ip, [sp]
    1b76:	mov	r3, ip
    1b78:	mov	r0, r1
    1b7a:	blx	r8
    1b7c:	b.n	1ad8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    1b7e:	str.w	ip, [sp]
    1b82:	mov	r3, ip
    1b84:	mov	r0, lr
    1b86:	blx	r4
    1b88:	b.n	1ad8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    1b8a:	str.w	ip, [sp]
    1b8e:	mov	r3, ip
    1b90:	mov	r0, lr
    1b92:	blx	r8
    1b94:	b.n	1ad8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    1b96:	movs	r3, #0
    1b98:	mov	r0, r4
    1b9a:	str	r3, [sp, #0]
    1b9c:	blx	r9
    1b9e:	b.n	1ad8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    1ba0:	.word	0x000004c9
    1ba4:	.word	0x00000489

00001ba8 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.13]>:
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    1ba8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1bac:	mov	r5, r0
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) { return sdx[store]->remove(filename);  }
    1bae:	ldr	r0, [r0, #88]	; 0x58
    1bb0:	ldr	r1, [pc, #96]	; (1c14 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.13]+0x6c>)
    1bb2:	ldr	r3, [r0, #0]
  { if (index_generated) return; 
    index_generated = true;
    1bb4:	movs	r7, #1
    1bb6:	ldr	r3, [r3, #16]
    1bb8:	strb.w	r7, [r5, #248]	; 0xf8
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    1bbc:	sub	sp, #272	; 0x110
    1bbe:	blx	r3
    1bc0:	ldr	r3, [r5, #4]
    // first remove old index file
    mtp_lock_storage(true);
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    num_storage = sd_getFSCount();
    1bc2:	str.w	r3, [r5, #228]	; 0xe4

    index_entries_ = 0;
    1bc6:	movs	r1, #0
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    1bc8:	cmp	r3, r1
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    num_storage = sd_getFSCount();

    index_entries_ = 0;
    1bca:	str.w	r1, [r5, #244]	; 0xf4
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    1bce:	ble.n	1c0c <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.13]+0x64>
    1bd0:	mov	r4, r1
    {
      r.store = ii; // 
      r.parent = ii;
      r.sibling = 0;
    1bd2:	mov	r6, r1
      r.child = 0;
      r.isdir = true;
      r.scanned = false;
      strcpy(r.name, "/");
    1bd4:	mov.w	r8, #47	; 0x2f
    1bd8:	b.n	1bde <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.13]+0x36>
    1bda:	ldr.w	r1, [r5, #244]	; 0xf4

    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    {
      r.store = ii; // 
    1bde:	strh.w	r4, [sp, #14]
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    1be2:	adds	r3, r1, #1
    1be4:	str.w	r3, [r5, #244]	; 0xf4
    WriteIndexRecord(new_record, r);
    1be8:	mov	r2, sp
    1bea:	mov	r0, r5
    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    {
      r.store = ii; // 
      r.parent = ii;
    1bec:	str	r4, [sp, #0]
      r.sibling = 0;
    1bee:	str	r6, [sp, #8]
      r.child = 0;
    1bf0:	str	r6, [sp, #4]
      r.isdir = true;
    1bf2:	strb.w	r7, [sp, #12]
      r.scanned = false;
    1bf6:	strb.w	r6, [sp, #13]
      strcpy(r.name, "/");
    1bfa:	strh.w	r8, [sp, #16]
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    1bfe:	bl	1a4c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

    num_storage = sd_getFSCount();

    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    1c02:	ldr.w	r3, [r5, #228]	; 0xe4
    1c06:	adds	r4, #1
    1c08:	cmp	r3, r4
    1c0a:	bgt.n	1bda <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.13]+0x32>
      r.isdir = true;
      r.scanned = false;
      strcpy(r.name, "/");
      AppendIndexRecord(r);
    }
  }
    1c0c:	add	sp, #272	; 0x110
    1c0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1c12:	nop
    1c14:	.word	0x0001306c

00001c18 <MTPStorage_SD::ReadIndexRecord(unsigned long)>:
    return new_record;
  }

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    1c18:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1c1c:	mov	r5, r1
    1c1e:	mov	r4, r2
    1c20:	sub	sp, #8
    Record ret;
    memset(&ret, 0, sizeof(ret));
    1c22:	movs	r1, #0
    1c24:	mov.w	r2, #272	; 0x110
    return new_record;
  }

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    1c28:	mov	r6, r0
    Record ret;
    memset(&ret, 0, sizeof(ret));
    1c2a:	bl	f32c <memset>
    if (i > index_entries_) 
    1c2e:	ldr.w	r3, [r5, #244]	; 0xf4
    1c32:	cmp	r3, r4
    1c34:	bcc.w	1dae <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x196>
    { memset(&ret, 0, sizeof(ret));
      return ret;
    }
    OpenIndex();
    1c38:	mov	r0, r5
    1c3a:	bl	16e4 <MTPStorage_SD::OpenIndex()>
    1c3e:	ldr.w	r0, [r5, #184]	; 0xb8
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
    1c42:	add.w	r4, r4, r4, lsl #4
    1c46:	lsls	r2, r4, #4
    1c48:	mov.w	ip, #0
    1c4c:	cmp	r0, #0
    1c4e:	beq.w	1da6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    1c52:	ldr	r7, [r0, #0]
    1c54:	ldr	r4, [pc, #456]	; (1e20 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x208>)
    1c56:	ldr	r1, [r7, #52]	; 0x34
    1c58:	cmp	r1, r4
    1c5a:	bne.w	1dda <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1c2>
    1c5e:	ldr	r1, [r0, #16]
    1c60:	cmp	r1, #0
    1c62:	beq.w	1dc2 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1aa>
    1c66:	ldr	r3, [r1, #0]
    1c68:	ldr.w	r8, [r3, #52]	; 0x34
    1c6c:	cmp	r8, r4
    1c6e:	bne.w	1e08 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1f0>
    1c72:	ldr.w	lr, [r1, #16]
    1c76:	cmp.w	lr, #0
    1c7a:	beq.n	1d2e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    1c7c:	ldr.w	r3, [lr]
    1c80:	ldr.w	r8, [r3, #52]	; 0x34
    1c84:	cmp	r8, r4
    1c86:	bne.w	1dfc <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1e4>
    1c8a:	ldr.w	lr, [lr, #16]
    1c8e:	cmp.w	lr, #0
    1c92:	beq.n	1d2e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    1c94:	ldr.w	r3, [lr]
    1c98:	ldr.w	r8, [r3, #52]	; 0x34
    1c9c:	cmp	r8, r4
    1c9e:	bne.w	1dfc <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1e4>
    1ca2:	ldr.w	lr, [lr, #16]
    1ca6:	cmp.w	lr, #0
    1caa:	beq.n	1d2e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    1cac:	ldr.w	r3, [lr]
    1cb0:	ldr.w	r8, [r3, #52]	; 0x34
    1cb4:	cmp	r8, r4
    1cb6:	bne.w	1e14 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    1cba:	ldr.w	lr, [lr, #16]
    1cbe:	cmp.w	lr, #0
    1cc2:	beq.n	1d2e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    1cc4:	ldr.w	r3, [lr]
    1cc8:	ldr.w	r8, [r3, #52]	; 0x34
    1ccc:	cmp	r8, r4
    1cce:	bne.w	1e14 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    1cd2:	ldr.w	lr, [lr, #16]
    1cd6:	cmp.w	lr, #0
    1cda:	beq.n	1d2e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    1cdc:	ldr.w	r3, [lr]
    1ce0:	ldr.w	r8, [r3, #52]	; 0x34
    1ce4:	cmp	r8, r4
    1ce6:	bne.w	1e14 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    1cea:	ldr.w	lr, [lr, #16]
    1cee:	cmp.w	lr, #0
    1cf2:	beq.n	1d2e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    1cf4:	ldr.w	r3, [lr]
    1cf8:	ldr.w	r8, [r3, #52]	; 0x34
    1cfc:	cmp	r8, r4
    1cfe:	bne.w	1e14 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    1d02:	ldr.w	lr, [lr, #16]
    1d06:	cmp.w	lr, #0
    1d0a:	beq.n	1d2e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    1d0c:	ldr.w	r3, [lr]
    1d10:	ldr.w	r8, [r3, #52]	; 0x34
    1d14:	cmp	r8, r4
    1d16:	bne.n	1e14 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    1d18:	ldr.w	r4, [lr, #16]
    1d1c:	cbz	r4, 1d2e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    1d1e:	ldr	r1, [r4, #0]
    1d20:	str.w	ip, [sp]
    1d24:	mov	r3, ip
    1d26:	mov	r0, r4
    1d28:	ldr	r1, [r1, #52]	; 0x34
    1d2a:	blx	r1
    1d2c:	b.n	1de2 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ca>
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    1d2e:	ldr	r4, [r7, #40]	; 0x28
    1d30:	ldr	r3, [pc, #240]	; (1e24 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x20c>)
    1d32:	cmp	r4, r3
    1d34:	bne.n	1dca <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    1d36:	mov	r0, r1
    1d38:	ldr	r2, [r0, #0]
    1d3a:	ldr	r4, [r2, #40]	; 0x28
    1d3c:	cmp	r4, r3
    1d3e:	bne.n	1dca <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    1d40:	ldr	r0, [r0, #16]
    1d42:	cmp	r0, #0
    1d44:	beq.n	1da6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    1d46:	ldr	r2, [r0, #0]
    1d48:	ldr	r4, [r2, #40]	; 0x28
    1d4a:	cmp	r4, r3
    1d4c:	bne.n	1dca <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    1d4e:	ldr	r0, [r0, #16]
    1d50:	cbz	r0, 1da6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    1d52:	ldr	r2, [r0, #0]
    1d54:	ldr	r4, [r2, #40]	; 0x28
    1d56:	cmp	r4, r3
    1d58:	bne.n	1dca <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    1d5a:	ldr	r0, [r0, #16]
    1d5c:	cbz	r0, 1da6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    1d5e:	ldr	r2, [r0, #0]
    1d60:	ldr	r4, [r2, #40]	; 0x28
    1d62:	cmp	r4, r3
    1d64:	bne.n	1dca <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    1d66:	ldr	r0, [r0, #16]
    1d68:	cbz	r0, 1da6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    1d6a:	ldr	r2, [r0, #0]
    1d6c:	ldr	r4, [r2, #40]	; 0x28
    1d6e:	cmp	r4, r3
    1d70:	bne.n	1dca <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    1d72:	ldr	r0, [r0, #16]
    1d74:	cbz	r0, 1da6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    1d76:	ldr	r2, [r0, #0]
    1d78:	ldr	r4, [r2, #40]	; 0x28
    1d7a:	cmp	r4, r3
    1d7c:	bne.n	1dca <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    1d7e:	ldr	r0, [r0, #16]
    1d80:	cbz	r0, 1da6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    1d82:	ldr	r2, [r0, #0]
    1d84:	ldr	r4, [r2, #40]	; 0x28
    1d86:	cmp	r4, r3
    1d88:	bne.n	1dca <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    1d8a:	ldr	r0, [r0, #16]
    1d8c:	cbz	r0, 1da6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    1d8e:	ldr	r2, [r0, #0]
    1d90:	ldr	r4, [r2, #40]	; 0x28
    1d92:	cmp	r4, r3
    1d94:	bne.n	1dca <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    1d96:	ldr	r0, [r0, #16]
    1d98:	cbz	r0, 1da6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    1d9a:	ldr	r3, [r0, #0]
    1d9c:	mov.w	r2, #272	; 0x110
    1da0:	ldr	r3, [r3, #40]	; 0x28
    1da2:	mov	r1, r6
    1da4:	blx	r3
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);

    return ret;
  }
    1da6:	mov	r0, r6
    1da8:	add	sp, #8
    1daa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    Record ret;
    memset(&ret, 0, sizeof(ret));
    if (i > index_entries_) 
    { memset(&ret, 0, sizeof(ret));
    1dae:	mov.w	r2, #272	; 0x110
    1db2:	movs	r1, #0
    1db4:	mov	r0, r6
    1db6:	bl	f32c <memset>
    index_.seek(sizeof(ret) * i);
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);

    return ret;
  }
    1dba:	mov	r0, r6
    1dbc:	add	sp, #8
    1dbe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1dc2:	ldr	r4, [r7, #40]	; 0x28
    1dc4:	ldr	r3, [pc, #92]	; (1e24 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x20c>)
    1dc6:	cmp	r4, r3
    1dc8:	beq.n	1da6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    1dca:	mov.w	r2, #272	; 0x110
    1dce:	mov	r1, r6
    1dd0:	blx	r4
    1dd2:	mov	r0, r6
    1dd4:	add	sp, #8
    1dd6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    1dda:	str.w	ip, [sp]
    1dde:	mov	r3, ip
    1de0:	blx	r1
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    1de2:	ldr.w	r0, [r5, #184]	; 0xb8
    1de6:	cmp	r0, #0
    1de8:	beq.n	1da6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    1dea:	ldr	r2, [r0, #0]
    1dec:	ldr	r3, [pc, #52]	; (1e24 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x20c>)
    1dee:	ldr	r4, [r2, #40]	; 0x28
    1df0:	cmp	r4, r3
    1df2:	bne.n	1dca <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    1df4:	ldr	r0, [r0, #16]
    1df6:	cmp	r0, #0
    1df8:	bne.n	1d38 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x120>
    1dfa:	b.n	1da6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    1dfc:	str.w	ip, [sp]
    1e00:	mov	r3, ip
    1e02:	mov	r0, lr
    1e04:	blx	r8
    1e06:	b.n	1de2 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ca>
    1e08:	str.w	ip, [sp]
    1e0c:	mov	r3, ip
    1e0e:	mov	r0, r1
    1e10:	blx	r8
    1e12:	b.n	1de2 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ca>
    1e14:	movs	r3, #0
    1e16:	mov	r0, lr
    1e18:	str	r3, [sp, #0]
    1e1a:	blx	r8
    1e1c:	b.n	1de2 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ca>
    1e1e:	nop
    1e20:	.word	0x000004c9
    1e24:	.word	0x0000047d

00001e28 <MTPStorage_SD::GetNextObjectHandle(unsigned long)>:
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  storee)
  {
    1e28:	push	{r4, r5, lr}
    while (true) 
    { if (next_ == 0) return 0;
    1e2a:	ldr.w	r5, [r0, #252]	; 0xfc
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  storee)
  {
    1e2e:	sub	sp, #276	; 0x114
    1e30:	mov	r4, r0
    while (true) 
    { if (next_ == 0) return 0;
    1e32:	cbnz	r5, 1e48 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x20>
    1e34:	b.n	1e7e <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x56>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
    1e36:	ldr	r3, [sp, #8]
    1e38:	str.w	r3, [r4, #252]	; 0xfc
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    1e3c:	ldrb.w	r3, [sp, #16]
    1e40:	cbnz	r3, 1e78 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x50>
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  storee)
  {
    while (true) 
    { if (next_ == 0) return 0;
    1e42:	ldr.w	r5, [r4, #252]	; 0xfc
    1e46:	cbz	r5, 1e7e <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x56>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
    1e48:	mov	r2, r5
    1e4a:	mov	r1, r4
    1e4c:	mov	r0, sp
    1e4e:	bl	1c18 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    1e52:	ldrb.w	r2, [r4, #256]	; 0x100
    1e56:	cmp	r2, #0
    1e58:	bne.n	1e36 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0xe>
      { next_ = r.sibling;
      } 
      else 
      { next_++;
    1e5a:	ldr.w	r3, [r4, #252]	; 0xfc
        if (next_ >= index_entries_) next_ = 0;
    1e5e:	ldr.w	r1, [r4, #244]	; 0xf4
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
      } 
      else 
      { next_++;
    1e62:	adds	r3, #1
    1e64:	str.w	r3, [r4, #252]	; 0xfc
        if (next_ >= index_entries_) next_ = 0;
    1e68:	cmp	r3, r1
      }
      if (r.name[0]) return ret;
    1e6a:	ldrb.w	r3, [sp, #16]
      if (follow_sibling_) 
      { next_ = r.sibling;
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
    1e6e:	it	cs
    1e70:	strcs.w	r2, [r4, #252]	; 0xfc
      }
      if (r.name[0]) return ret;
    1e74:	cmp	r3, #0
    1e76:	beq.n	1e42 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x1a>
    }
  }
    1e78:	mov	r0, r5
    1e7a:	add	sp, #276	; 0x114
    1e7c:	pop	{r4, r5, pc}
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  storee)
  {
    while (true) 
    { if (next_ == 0) return 0;
    1e7e:	movs	r5, #0
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    }
  }
    1e80:	mov	r0, r5
    1e82:	add	sp, #276	; 0x114
    1e84:	pop	{r4, r5, pc}
    1e86:	nop

00001e88 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)>:

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    1e88:	push	{r4, r5, r6, r7, lr}
    1e8a:	sub	sp, #276	; 0x114
    1e8c:	mov	r7, r2
    Record r = ReadIndexRecord(handle);
    1e8e:	mov	r2, r1
    1e90:	mov	r1, r0
    1e92:	mov	r0, sp
      if (r.name[0]) return ret;
    }
  }

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    1e94:	mov	r5, r3
    1e96:	ldr	r6, [sp, #296]	; 0x128
    1e98:	ldr	r4, [sp, #300]	; 0x12c
    Record r = ReadIndexRecord(handle);
    1e9a:	bl	1c18 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    1e9e:	mov	r0, r7
    1ea0:	add	r1, sp, #16
    1ea2:	bl	f7d4 <strcpy>
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    1ea6:	ldrb.w	r3, [sp, #12]

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    1eaa:	ldr	r2, [sp, #0]
    1eac:	str	r2, [r6, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    1eae:	cbnz	r3, 1ebe <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x36>
    1eb0:	ldr	r3, [sp, #4]
    *store = r.store;
    1eb2:	ldrh.w	r2, [sp, #14]
  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    1eb6:	str	r3, [r5, #0]
    *store = r.store;
    1eb8:	strh	r2, [r4, #0]
  }
    1eba:	add	sp, #276	; 0x114
    1ebc:	pop	{r4, r5, r6, r7, pc}
  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    1ebe:	mov.w	r3, #4294967295
    1ec2:	b.n	1eb2 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x2a>

00001ec4 <MTPStorage_SD::GetSize(unsigned long)>:
    *store = r.store;
  }

  uint32_t MTPStorage_SD::GetSize(uint32_t handle) 
  {
    1ec4:	push	{lr}
    1ec6:	sub	sp, #276	; 0x114
    return ReadIndexRecord(handle).child;
    1ec8:	mov	r2, r1
    1eca:	mov	r1, r0
    1ecc:	mov	r0, sp
    1ece:	bl	1c18 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    1ed2:	ldr	r0, [sp, #4]
    1ed4:	add	sp, #276	; 0x114
    1ed6:	ldr.w	pc, [sp], #4
    1eda:	nop

00001edc <MTPStorage_SD::close()>:
      mtp_lock_storage(false);
      return ret;
  }

  void MTPStorage_SD::close() 
  {
    1edc:	push	{r4, r5, r6, lr}
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    1ede:	ldr.w	r3, [r0, #204]	; 0xcc
    1ee2:	sub	sp, #272	; 0x110
    1ee4:	mov	r4, r0
    1ee6:	cmp	r3, #0
    1ee8:	beq.n	1f84 <MTPStorage_SD::close()+0xa8>
    1eea:	ldr	r5, [r3, #0]
    1eec:	ldr	r1, [pc, #384]	; (2070 <MTPStorage_SD::close()+0x194>)
    1eee:	ldr	r2, [r5, #60]	; 0x3c
    1ef0:	cmp	r2, r1
    1ef2:	bne.w	2064 <MTPStorage_SD::close()+0x188>
    1ef6:	ldr	r2, [r3, #16]
    1ef8:	cmp	r2, #0
    1efa:	beq.w	2054 <MTPStorage_SD::close()+0x178>
    1efe:	ldr	r0, [r2, #0]
    1f00:	ldr	r6, [r0, #60]	; 0x3c
    1f02:	cmp	r6, r1
    1f04:	bne.n	1fac <MTPStorage_SD::close()+0xd0>
    1f06:	ldr	r0, [r2, #16]
    1f08:	cmp	r0, #0
    1f0a:	beq.n	1f76 <MTPStorage_SD::close()+0x9a>
    1f0c:	ldr	r6, [r0, #0]
    1f0e:	ldr	r6, [r6, #60]	; 0x3c
    1f10:	cmp	r6, r1
    1f12:	bne.n	1fae <MTPStorage_SD::close()+0xd2>
    1f14:	ldr	r0, [r0, #16]
    1f16:	cmp	r0, #0
    1f18:	beq.n	1f76 <MTPStorage_SD::close()+0x9a>
    1f1a:	ldr	r6, [r0, #0]
    1f1c:	ldr	r6, [r6, #60]	; 0x3c
    1f1e:	cmp	r6, r1
    1f20:	bne.n	1fae <MTPStorage_SD::close()+0xd2>
    1f22:	ldr	r0, [r0, #16]
    1f24:	cbz	r0, 1f76 <MTPStorage_SD::close()+0x9a>
    1f26:	ldr	r6, [r0, #0]
    1f28:	ldr	r6, [r6, #60]	; 0x3c
    1f2a:	cmp	r6, r1
    1f2c:	bne.n	1fae <MTPStorage_SD::close()+0xd2>
    1f2e:	ldr	r0, [r0, #16]
    1f30:	cbz	r0, 1f76 <MTPStorage_SD::close()+0x9a>
    1f32:	ldr	r6, [r0, #0]
    1f34:	ldr	r6, [r6, #60]	; 0x3c
    1f36:	cmp	r6, r1
    1f38:	bne.n	1fae <MTPStorage_SD::close()+0xd2>
    1f3a:	ldr	r0, [r0, #16]
    1f3c:	cbz	r0, 1f76 <MTPStorage_SD::close()+0x9a>
    1f3e:	ldr	r6, [r0, #0]
    1f40:	ldr	r6, [r6, #60]	; 0x3c
    1f42:	cmp	r6, r1
    1f44:	bne.n	1fae <MTPStorage_SD::close()+0xd2>
    1f46:	ldr	r0, [r0, #16]
    1f48:	cbz	r0, 1f76 <MTPStorage_SD::close()+0x9a>
    1f4a:	ldr	r6, [r0, #0]
    1f4c:	ldr	r6, [r6, #60]	; 0x3c
    1f4e:	cmp	r6, r1
    1f50:	bne.n	1fae <MTPStorage_SD::close()+0xd2>
    1f52:	ldr	r0, [r0, #16]
    1f54:	cbz	r0, 1f76 <MTPStorage_SD::close()+0x9a>
    1f56:	ldr	r6, [r0, #0]
    1f58:	ldr	r6, [r6, #60]	; 0x3c
    1f5a:	cmp	r6, r1
    1f5c:	bne.n	1fae <MTPStorage_SD::close()+0xd2>
    1f5e:	ldr	r0, [r0, #16]
    1f60:	cbz	r0, 1f76 <MTPStorage_SD::close()+0x9a>
    1f62:	ldr	r6, [r0, #0]
    1f64:	ldr	r6, [r6, #60]	; 0x3c
    1f66:	cmp	r6, r1
    1f68:	bne.n	1fae <MTPStorage_SD::close()+0xd2>
    1f6a:	ldr	r0, [r0, #16]
    1f6c:	cbz	r0, 1f76 <MTPStorage_SD::close()+0x9a>
    1f6e:	ldr	r3, [r0, #0]
    1f70:	ldr	r3, [r3, #60]	; 0x3c
    1f72:	blx	r3
    1f74:	b.n	1fb0 <MTPStorage_SD::close()+0xd4>
	}
	virtual void close() {
		if (f) f->close();
    1f76:	ldr	r6, [r5, #64]	; 0x40
    1f78:	ldr	r1, [pc, #248]	; (2074 <MTPStorage_SD::close()+0x198>)
    1f7a:	cmp	r6, r1
    1f7c:	bne.n	206a <MTPStorage_SD::close()+0x18e>
    1f7e:	mov	r0, r2
    1f80:	movs	r5, #0
    1f82:	b.n	1fca <MTPStorage_SD::close()+0xee>
    mtp_lock_storage(true);
    uint32_t size = (uint32_t) file_.size();
    1f84:	mov	r5, r3
    file_.close();
    mtp_lock_storage(false);
    //
    // update record with file size
    Record r = ReadIndexRecord(open_file_);
    1f86:	mov	r0, sp
    1f88:	ldr.w	r2, [r4, #240]	; 0xf0
    1f8c:	mov	r1, r4
    1f8e:	bl	1c18 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    r.child = size;
    WriteIndexRecord(open_file_, r);
    1f92:	mov	r2, sp
    1f94:	ldr.w	r1, [r4, #240]	; 0xf0
    file_.close();
    mtp_lock_storage(false);
    //
    // update record with file size
    Record r = ReadIndexRecord(open_file_);
    r.child = size;
    1f98:	str	r5, [sp, #4]
    WriteIndexRecord(open_file_, r);
    1f9a:	mov	r0, r4
    1f9c:	bl	1a4c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    1fa0:	mvn.w	r3, #1
    1fa4:	str.w	r3, [r4, #240]	; 0xf0
  }
    1fa8:	add	sp, #272	; 0x110
    1faa:	pop	{r4, r5, r6, pc}
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    1fac:	mov	r0, r2
    1fae:	blx	r6
	}
	virtual void close() {
		if (f) f->close();
    1fb0:	ldr.w	r3, [r4, #204]	; 0xcc
  }

  void MTPStorage_SD::close() 
  {
    mtp_lock_storage(true);
    uint32_t size = (uint32_t) file_.size();
    1fb4:	mov	r5, r0
    1fb6:	cmp	r3, #0
    1fb8:	beq.n	1f86 <MTPStorage_SD::close()+0xaa>
    1fba:	ldr	r2, [r3, #0]
    1fbc:	ldr	r1, [pc, #180]	; (2074 <MTPStorage_SD::close()+0x198>)
    1fbe:	ldr	r6, [r2, #64]	; 0x40
    1fc0:	cmp	r6, r1
    1fc2:	bne.n	205e <MTPStorage_SD::close()+0x182>
    1fc4:	ldr	r0, [r3, #16]
    1fc6:	cmp	r0, #0
    1fc8:	beq.n	1f86 <MTPStorage_SD::close()+0xaa>
    1fca:	ldr	r3, [r0, #0]
    1fcc:	ldr	r3, [r3, #64]	; 0x40
    1fce:	cmp	r3, r1
    1fd0:	bne.n	2050 <MTPStorage_SD::close()+0x174>
    1fd2:	ldr	r0, [r0, #16]
    1fd4:	cmp	r0, #0
    1fd6:	beq.n	1f86 <MTPStorage_SD::close()+0xaa>
    1fd8:	ldr	r3, [r0, #0]
    1fda:	ldr	r3, [r3, #64]	; 0x40
    1fdc:	cmp	r3, r1
    1fde:	bne.n	2050 <MTPStorage_SD::close()+0x174>
    1fe0:	ldr	r0, [r0, #16]
    1fe2:	cmp	r0, #0
    1fe4:	beq.n	1f86 <MTPStorage_SD::close()+0xaa>
    1fe6:	ldr	r3, [r0, #0]
    1fe8:	ldr	r3, [r3, #64]	; 0x40
    1fea:	cmp	r3, r1
    1fec:	bne.n	2050 <MTPStorage_SD::close()+0x174>
    1fee:	ldr	r0, [r0, #16]
    1ff0:	cmp	r0, #0
    1ff2:	beq.n	1f86 <MTPStorage_SD::close()+0xaa>
    1ff4:	ldr	r3, [r0, #0]
    1ff6:	ldr	r3, [r3, #64]	; 0x40
    1ff8:	cmp	r3, r1
    1ffa:	bne.n	2050 <MTPStorage_SD::close()+0x174>
    1ffc:	ldr	r0, [r0, #16]
    1ffe:	cmp	r0, #0
    2000:	beq.n	1f86 <MTPStorage_SD::close()+0xaa>
    2002:	ldr	r3, [r0, #0]
    2004:	ldr	r3, [r3, #64]	; 0x40
    2006:	cmp	r3, r1
    2008:	bne.n	2050 <MTPStorage_SD::close()+0x174>
    200a:	ldr	r0, [r0, #16]
    200c:	cmp	r0, #0
    200e:	beq.n	1f86 <MTPStorage_SD::close()+0xaa>
    2010:	ldr	r3, [r0, #0]
    2012:	ldr	r3, [r3, #64]	; 0x40
    2014:	cmp	r3, r1
    2016:	bne.n	2050 <MTPStorage_SD::close()+0x174>
    2018:	ldr	r0, [r0, #16]
    201a:	cmp	r0, #0
    201c:	beq.n	1f86 <MTPStorage_SD::close()+0xaa>
    201e:	ldr	r3, [r0, #0]
    2020:	ldr	r3, [r3, #64]	; 0x40
    2022:	cmp	r3, r1
    2024:	bne.n	2050 <MTPStorage_SD::close()+0x174>
    2026:	ldr	r0, [r0, #16]
    2028:	cmp	r0, #0
    202a:	beq.n	1f86 <MTPStorage_SD::close()+0xaa>
    202c:	ldr	r3, [r0, #0]
    202e:	ldr	r3, [r3, #64]	; 0x40
    2030:	cmp	r3, r1
    2032:	bne.n	2050 <MTPStorage_SD::close()+0x174>
    2034:	ldr	r0, [r0, #16]
    2036:	cmp	r0, #0
    2038:	beq.n	1f86 <MTPStorage_SD::close()+0xaa>
    203a:	ldr	r3, [r0, #0]
    203c:	ldr	r3, [r3, #64]	; 0x40
    203e:	cmp	r3, r1
    2040:	bne.n	2050 <MTPStorage_SD::close()+0x174>
    2042:	ldr	r0, [r0, #16]
    2044:	cmp	r0, #0
    2046:	beq.n	1f86 <MTPStorage_SD::close()+0xaa>
    2048:	ldr	r3, [r0, #0]
    204a:	ldr	r3, [r3, #64]	; 0x40
    204c:	blx	r3
    204e:	b.n	1f86 <MTPStorage_SD::close()+0xaa>
    2050:	blx	r3
    2052:	b.n	1f86 <MTPStorage_SD::close()+0xaa>
    2054:	ldr	r6, [r5, #64]	; 0x40
    2056:	ldr	r1, [pc, #28]	; (2074 <MTPStorage_SD::close()+0x198>)
    2058:	cmp	r6, r1
    205a:	mov	r5, r2
    205c:	beq.n	1f86 <MTPStorage_SD::close()+0xaa>
    205e:	mov	r0, r3
    2060:	blx	r6
    2062:	b.n	1f86 <MTPStorage_SD::close()+0xaa>
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    2064:	mov	r0, r3
    2066:	blx	r2
    2068:	b.n	1fb0 <MTPStorage_SD::close()+0xd4>
	}
	virtual void close() {
		if (f) f->close();
    206a:	movs	r5, #0
    206c:	b.n	205e <MTPStorage_SD::close()+0x182>
    206e:	nop
    2070:	.word	0x000004f1
    2074:	.word	0x00000501

00002078 <MTPStorage_SD::ConstructFilename(int, char*, int)>:

    return ret;
  }

  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    2078:	push	{r4, r5, r6, r7, lr}
    207a:	mov	r6, r1
    207c:	sub	sp, #276	; 0x114
    Record tmp = ReadIndexRecord(i);
    207e:	mov	r1, r0

    return ret;
  }

  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    2080:	mov	r7, r0
    2082:	mov	r4, r2
    Record tmp = ReadIndexRecord(i);
    2084:	mov	r0, sp
    2086:	mov	r2, r6

    return ret;
  }

  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    2088:	mov	r5, r3
    Record tmp = ReadIndexRecord(i);
    208a:	bl	1c18 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      
    if (tmp.parent==(unsigned)i) 
    208e:	ldr	r1, [sp, #0]
    2090:	cmp	r6, r1
    2092:	beq.n	20ca <MTPStorage_SD::ConstructFilename(int, char*, int)+0x52>
    { strcpy(out, "/");
      return tmp.store;
    }
    else 
    { ConstructFilename(tmp.parent, out, len);
    2094:	mov	r3, r5
    2096:	mov	r2, r4
    2098:	mov	r0, r7
    209a:	bl	2078 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
    209e:	mov	r0, r4
    20a0:	bl	f940 <strlen>
    20a4:	add	r0, r4
    20a6:	ldrb.w	r3, [r0, #-1]
    20aa:	cmp	r3, #47	; 0x2f
    20ac:	beq.n	20b8 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x40>
    20ae:	mov	r2, r5
    20b0:	ldr	r1, [pc, #36]	; (20d8 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x60>)
    20b2:	mov	r0, r4
    20b4:	bl	f890 <strlcat>
      strlcat(out, tmp.name,len);
    20b8:	mov	r2, r5
    20ba:	mov	r0, r4
    20bc:	add	r1, sp, #16
    20be:	bl	f890 <strlcat>
      return tmp.store;
    20c2:	ldrh.w	r0, [sp, #14]
    }
  }
    20c6:	add	sp, #276	; 0x114
    20c8:	pop	{r4, r5, r6, r7, pc}
  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    Record tmp = ReadIndexRecord(i);
      
    if (tmp.parent==(unsigned)i) 
    { strcpy(out, "/");
    20ca:	ldr	r3, [pc, #12]	; (20d8 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x60>)
      return tmp.store;
    20cc:	ldrh.w	r0, [sp, #14]
  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    Record tmp = ReadIndexRecord(i);
      
    if (tmp.parent==(unsigned)i) 
    { strcpy(out, "/");
    20d0:	ldrh	r3, [r3, #0]
    20d2:	strh	r3, [r4, #0]
    { ConstructFilename(tmp.parent, out, len);
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
      strlcat(out, tmp.name,len);
      return tmp.store;
    }
  }
    20d4:	add	sp, #276	; 0x114
    20d6:	pop	{r4, r5, r6, r7, pc}
    20d8:	.word	0x0001307c

000020dc <MTPStorage_SD::rename(unsigned long, char const*)>:
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  bool MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[MAX_FILENAME_LEN];
    20dc:	push	{r4, r5, r6, r7, lr}
    20de:	subw	sp, sp, #1044	; 0x414
    char newName[MAX_FILENAME_LEN];
    char temp[MAX_FILENAME_LEN];

    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    20e2:	mov.w	r3, #256	; 0x100
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  bool MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[MAX_FILENAME_LEN];
    20e6:	mov	r7, r2
    char newName[MAX_FILENAME_LEN];
    char temp[MAX_FILENAME_LEN];

    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    20e8:	mov	r2, sp
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  bool MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[MAX_FILENAME_LEN];
    20ea:	mov	r5, r1
    20ec:	mov	r4, r0
    char newName[MAX_FILENAME_LEN];
    char temp[MAX_FILENAME_LEN];

    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    20ee:	bl	2078 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    20f2:	mov	r6, r0
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    20f4:	mov	r0, sp
    20f6:	bl	f940 <strlen>
    20fa:	mov	r1, r0
    20fc:	mov	r0, sp
    20fe:	bl	c398 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2102:	ldr	r0, [pc, #132]	; (2188 <MTPStorage_SD::rename(unsigned long, char const*)+0xac>)
    2104:	bl	dccc <Print::println()>
    Serial.println(oldName);

    Record p1 = ReadIndexRecord(handle);
    2108:	mov	r2, r5
    210a:	mov	r1, r4
    210c:	add	r0, sp, #768	; 0x300
    210e:	bl	1c18 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(temp,p1.name,MAX_FILENAME_LEN);
    2112:	add	r1, sp, #784	; 0x310
    2114:	mov.w	r2, #256	; 0x100
    2118:	add	r0, sp, #512	; 0x200
    211a:	bl	f8e4 <strlcpy>
    strlcpy(p1.name,name,MAX_FILENAME_LEN);
    211e:	mov	r1, r7
    2120:	mov.w	r2, #256	; 0x100
    2124:	add	r0, sp, #784	; 0x310
    2126:	bl	f8e4 <strlcpy>

    WriteIndexRecord(handle, p1);
    212a:	add	r2, sp, #768	; 0x300
    212c:	mov	r1, r5
    212e:	mov	r0, r4
    2130:	bl	1a4c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    2134:	add	r2, sp, #256	; 0x100
    2136:	mov.w	r3, #256	; 0x100
    213a:	mov	r1, r5
    213c:	mov	r0, r4
    213e:	bl	2078 <MTPStorage_SD::ConstructFilename(int, char*, int)>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2142:	add	r0, sp, #256	; 0x100
    2144:	bl	f940 <strlen>
    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    2148:	add.w	r6, r4, r6, lsl #2
    214c:	mov	r1, r0
    214e:	add	r0, sp, #256	; 0x100
    2150:	bl	c398 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2154:	ldr	r0, [pc, #48]	; (2188 <MTPStorage_SD::rename(unsigned long, char const*)+0xac>)
    2156:	bl	dccc <Print::println()>
    215a:	ldr	r0, [r6, #88]	; 0x58
    215c:	ldr	r3, [r0, #0]
    215e:	add	r2, sp, #256	; 0x100
    2160:	mov	r1, sp
    2162:	ldr	r3, [r3, #12]
    2164:	blx	r3
    Serial.println(newName);

    if (sd_rename(store,oldName,newName)) return true;
    2166:	mov	r6, r0
    2168:	cbnz	r0, 2180 <MTPStorage_SD::rename(unsigned long, char const*)+0xa4>

    // rename failed; undo index update
    strlcpy(p1.name,temp,MAX_FILENAME_LEN);
    216a:	add	r1, sp, #512	; 0x200
    216c:	mov.w	r2, #256	; 0x100
    2170:	add	r0, sp, #784	; 0x310
    2172:	bl	f8e4 <strlcpy>
    WriteIndexRecord(handle, p1);
    2176:	add	r2, sp, #768	; 0x300
    2178:	mov	r1, r5
    217a:	mov	r0, r4
    217c:	bl	1a4c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
  }
    2180:	mov	r0, r6
    2182:	addw	sp, sp, #1044	; 0x414
    2186:	pop	{r4, r5, r6, r7, pc}
    2188:	.word	0x1fff0abc

0000218c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
      return tmp.store;
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    218c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (open_file_ == i && mode_ == mode) return;
    2190:	ldr.w	r3, [r0, #240]	; 0xf0
    2194:	cmp	r3, r1
      return tmp.store;
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    2196:	sub	sp, #292	; 0x124
    if (open_file_ == i && mode_ == mode) return;
    2198:	beq.w	2590 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x404>
    219c:	mov	r6, r2
    char filename[MAX_FILENAME_LEN];
    uint16_t store = ConstructFilename(i, filename, MAX_FILENAME_LEN);
    219e:	mov.w	r3, #256	; 0x100
    21a2:	add	r2, sp, #32
    21a4:	mov	r4, r0
    21a6:	mov	r5, r1
    21a8:	bl	2078 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    21ac:	mov	r7, r0
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    21ae:	ldr.w	r0, [r4, #204]	; 0xcc
    21b2:	cmp	r0, #0
    21b4:	beq.w	22c8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    21b8:	ldr	r2, [r0, #0]
    21ba:	ldr	r3, [pc, #348]	; (2318 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x18c>)
    21bc:	ldr	r2, [r2, #68]	; 0x44
    21be:	cmp	r2, r3
    21c0:	bne.w	25a0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    21c4:	ldr	r0, [r0, #16]
    21c6:	cmp	r0, #0
    21c8:	beq.n	22c8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    21ca:	ldr	r2, [r0, #0]
    21cc:	ldr	r2, [r2, #68]	; 0x44
    21ce:	cmp	r2, r3
    21d0:	bne.w	25a0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    21d4:	ldr	r0, [r0, #16]
    21d6:	cmp	r0, #0
    21d8:	beq.n	22c8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    21da:	ldr	r2, [r0, #0]
    21dc:	ldr	r2, [r2, #68]	; 0x44
    21de:	cmp	r2, r3
    21e0:	bne.w	25a0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    21e4:	ldr	r0, [r0, #16]
    21e6:	cmp	r0, #0
    21e8:	beq.n	22c8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    21ea:	ldr	r2, [r0, #0]
    21ec:	ldr	r2, [r2, #68]	; 0x44
    21ee:	cmp	r2, r3
    21f0:	bne.w	25a0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    21f4:	ldr	r0, [r0, #16]
    21f6:	cmp	r0, #0
    21f8:	beq.n	22c8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    21fa:	ldr	r2, [r0, #0]
    21fc:	ldr	r2, [r2, #68]	; 0x44
    21fe:	cmp	r2, r3
    2200:	bne.w	25a0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2204:	ldr	r0, [r0, #16]
    2206:	cmp	r0, #0
    2208:	beq.n	22c8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    220a:	ldr	r2, [r0, #0]
    220c:	ldr	r2, [r2, #68]	; 0x44
    220e:	cmp	r2, r3
    2210:	bne.w	25a0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2214:	ldr	r0, [r0, #16]
    2216:	cmp	r0, #0
    2218:	beq.n	22c8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    221a:	ldr	r2, [r0, #0]
    221c:	ldr	r2, [r2, #68]	; 0x44
    221e:	cmp	r2, r3
    2220:	bne.w	25a0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2224:	ldr	r0, [r0, #16]
    2226:	cmp	r0, #0
    2228:	beq.n	22c8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    222a:	ldr	r2, [r0, #0]
    222c:	ldr	r2, [r2, #68]	; 0x44
    222e:	cmp	r2, r3
    2230:	bne.w	25a0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2234:	ldr	r0, [r0, #16]
    2236:	cmp	r0, #0
    2238:	beq.n	22c8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    223a:	ldr	r2, [r0, #0]
    223c:	ldr	r2, [r2, #68]	; 0x44
    223e:	cmp	r2, r3
    2240:	bne.w	25a0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2244:	ldr	r0, [r0, #16]
    2246:	cmp	r0, #0
    2248:	beq.n	22c8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    224a:	ldr	r3, [r0, #0]
    224c:	ldr	r3, [r3, #68]	; 0x44
    224e:	blx	r3

    mtp_lock_storage(true);
    if(sd_isOpen(file_)) file_.close();
    2250:	cmp	r0, #0
    2252:	beq.n	22c8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    2254:	ldr.w	r0, [r4, #204]	; 0xcc
    2258:	cmp	r0, #0
    225a:	beq.n	22c8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    225c:	ldr	r2, [r0, #0]
    225e:	ldr	r3, [pc, #188]	; (231c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x190>)
    2260:	ldr	r2, [r2, #64]	; 0x40
    2262:	cmp	r2, r3
    2264:	bne.w	25a4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2268:	ldr	r0, [r0, #16]
    226a:	cmp	r0, #0
    226c:	beq.n	22c8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    226e:	ldr	r2, [r0, #0]
    2270:	ldr	r2, [r2, #64]	; 0x40
    2272:	cmp	r2, r3
    2274:	bne.w	25a4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2278:	ldr	r0, [r0, #16]
    227a:	cbz	r0, 22c8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    227c:	ldr	r2, [r0, #0]
    227e:	ldr	r2, [r2, #64]	; 0x40
    2280:	cmp	r2, r3
    2282:	bne.w	25a4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2286:	ldr	r0, [r0, #16]
    2288:	cbz	r0, 22c8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    228a:	ldr	r2, [r0, #0]
    228c:	ldr	r2, [r2, #64]	; 0x40
    228e:	cmp	r2, r3
    2290:	bne.w	25a4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2294:	ldr	r0, [r0, #16]
    2296:	cbz	r0, 22c8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2298:	ldr	r2, [r0, #0]
    229a:	ldr	r2, [r2, #64]	; 0x40
    229c:	cmp	r2, r3
    229e:	bne.w	25a4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    22a2:	ldr	r0, [r0, #16]
    22a4:	cbz	r0, 22c8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    22a6:	ldr	r2, [r0, #0]
    22a8:	ldr	r2, [r2, #64]	; 0x40
    22aa:	cmp	r2, r3
    22ac:	bne.w	25a4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    22b0:	ldr	r0, [r0, #16]
    22b2:	cbz	r0, 22c8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    22b4:	ldr	r2, [r0, #0]
    22b6:	ldr	r2, [r2, #64]	; 0x40
    22b8:	cmp	r2, r3
    22ba:	bne.w	25a4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    22be:	ldr	r0, [r0, #16]
    22c0:	cbz	r0, 22c8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    22c2:	ldr	r3, [r0, #0]
    22c4:	ldr	r3, [r3, #64]	; 0x40
    22c6:	blx	r3
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    22c8:	add.w	r7, r4, r7, lsl #2
    22cc:	add	r2, sp, #32
    22ce:	ldr	r1, [r7, #88]	; 0x58
    22d0:	ldr	r3, [r1, #0]
    22d2:	add	r0, sp, #12
    22d4:	ldr	r7, [r3, #0]
    22d6:	uxtb	r3, r6
    22d8:	blx	r7
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    22da:	ldr.w	r2, [r4, #204]	; 0xcc
    22de:	cbz	r2, 22e8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
    22e0:	ldr	r3, [r2, #16]
    22e2:	subs	r3, #1
    22e4:	str	r3, [r2, #16]
    22e6:	cbz	r3, 2324 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x198>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    22e8:	ldr	r2, [sp, #28]
    22ea:	str.w	r2, [r4, #204]	; 0xcc
		if (f) f->refcount++;
    22ee:	cbz	r2, 230a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    22f0:	ldr	r1, [r2, #16]
		return *this;
	}
	virtual ~File() {
    22f2:	ldr	r3, [pc, #44]	; (2320 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x194>)
    22f4:	str	r3, [sp, #12]
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    22f6:	adds	r1, #1
    22f8:	str	r1, [r2, #16]
    22fa:	ldr	r1, [sp, #28]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    22fc:	cbz	r1, 230a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    22fe:	ldr	r2, [r1, #16]
    2300:	subs	r2, #1
    2302:	str	r2, [r1, #16]
    2304:	cmp	r2, #0
    2306:	beq.w	2460 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2d4>
    file_=sd_open(store,filename,mode);
    open_file_ = i;
    230a:	str.w	r5, [r4, #240]	; 0xf0
    mode_ = mode;
    230e:	str.w	r6, [r4, #236]	; 0xec
    mtp_lock_storage(false);
  }
    2312:	add	sp, #292	; 0x124
    2314:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2318:	.word	0x0000050d
    231c:	.word	0x00000501
    2320:	.word	0x00012e78
    2324:	ldr.w	r7, [r4, #204]	; 0xcc
    2328:	cmp	r7, #0
    232a:	beq.n	22e8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
    232c:	ldr	r3, [r7, #0]
    232e:	ldr	r1, [pc, #680]	; (25d8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x44c>)
    2330:	ldr	r3, [r3, #32]
    2332:	cmp	r3, r1
    2334:	bne.w	25a8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x41c>
    2338:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    233a:	ldr	r3, [pc, #672]	; (25dc <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>)
    233c:	str	r3, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    233e:	cmp	r0, #0
    2340:	beq.w	2456 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    2344:	ldr	r2, [r0, #16]
    2346:	subs	r2, #1
    2348:	str	r2, [r0, #16]
    234a:	cmp	r2, #0
    234c:	bne.w	2456 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    2350:	ldr.w	r8, [r7, #16]
    2354:	cmp.w	r8, #0
    2358:	beq.n	2456 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    235a:	ldr.w	r2, [r8]
    235e:	ldr	r2, [r2, #32]
    2360:	cmp	r2, r1
    2362:	bne.w	25c6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x43a>
    2366:	ldr.w	r0, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    236a:	str.w	r3, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    236e:	cmp	r0, #0
    2370:	beq.n	244e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    2372:	ldr	r2, [r0, #16]
    2374:	subs	r2, #1
    2376:	str	r2, [r0, #16]
    2378:	cmp	r2, #0
    237a:	bne.n	244e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    237c:	ldr.w	r9, [r8, #16]
    2380:	cmp.w	r9, #0
    2384:	beq.n	244e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    2386:	ldr.w	r2, [r9]
    238a:	ldr	r2, [r2, #32]
    238c:	cmp	r2, r1
    238e:	bne.w	25ba <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x42e>
    2392:	ldr.w	r0, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2396:	str.w	r3, [r9]
    239a:	ldr.w	lr, [pc, #576]	; 25dc <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    239e:	cmp	r0, #0
    23a0:	beq.n	2446 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    23a2:	ldr	r2, [r0, #16]
    23a4:	subs	r2, #1
    23a6:	str	r2, [r0, #16]
    23a8:	cmp	r2, #0
    23aa:	bne.n	2446 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    23ac:	ldr.w	sl, [r9, #16]
    23b0:	cmp.w	sl, #0
    23b4:	beq.n	2446 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    23b6:	ldr.w	r2, [sl]
    23ba:	ldr	r2, [r2, #32]
    23bc:	cmp	r2, r1
    23be:	bne.w	25d2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x446>
    23c2:	ldr.w	r0, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    23c6:	str.w	lr, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    23ca:	cmp	r0, #0
    23cc:	beq.n	243e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    23ce:	ldr	r2, [r0, #16]
    23d0:	subs	r2, #1
    23d2:	str	r2, [r0, #16]
    23d4:	cmp	r2, #0
    23d6:	bne.n	243e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    23d8:	ldr.w	fp, [sl, #16]
    23dc:	cmp.w	fp, #0
    23e0:	beq.n	243e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    23e2:	ldr.w	r2, [fp]
    23e6:	ldr	r2, [r2, #32]
    23e8:	cmp	r2, r1
    23ea:	bne.w	25e6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x45a>
    23ee:	ldr.w	r2, [fp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    23f2:	str.w	r3, [fp]
    23f6:	ldr	r0, [pc, #484]	; (25dc <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    23f8:	cbz	r2, 2436 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>
    23fa:	ldr	r3, [r2, #16]
    23fc:	subs	r3, #1
    23fe:	str	r3, [r2, #16]
    2400:	cbnz	r3, 2436 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>
    2402:	ldr.w	r2, [fp, #16]
    2406:	cbz	r2, 2436 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>
    2408:	ldr	r3, [r2, #0]
    240a:	ldr	r3, [r3, #32]
    240c:	cmp	r3, r1
    240e:	bne.w	25f2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x466>
    2412:	ldr	r1, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2414:	str	r0, [r2, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2416:	cbz	r1, 242e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2a2>
    2418:	ldr	r3, [r1, #16]
    241a:	subs	r3, #1
    241c:	str	r3, [r1, #16]
    241e:	cbnz	r3, 242e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2a2>
    2420:	ldr	r0, [r2, #16]
    2422:	cbz	r0, 242e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2a2>
    2424:	ldr	r3, [r0, #0]
    2426:	str	r2, [sp, #4]
    2428:	ldr	r3, [r3, #32]
    242a:	blx	r3
    242c:	ldr	r2, [sp, #4]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    242e:	mov	r0, r2
    2430:	movs	r1, #20
    2432:	bl	ddec <operator delete(void*, unsigned int)>
    2436:	mov	r0, fp
    2438:	movs	r1, #20
    243a:	bl	ddec <operator delete(void*, unsigned int)>
    243e:	mov	r0, sl
    2440:	movs	r1, #20
    2442:	bl	ddec <operator delete(void*, unsigned int)>
    2446:	mov	r0, r9
    2448:	movs	r1, #20
    244a:	bl	ddec <operator delete(void*, unsigned int)>
    244e:	mov	r0, r8
    2450:	movs	r1, #20
    2452:	bl	ddec <operator delete(void*, unsigned int)>
    2456:	mov	r0, r7
    2458:	movs	r1, #20
    245a:	bl	ddec <operator delete(void*, unsigned int)>
    245e:	b.n	22e8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2460:	ldr	r7, [sp, #28]
    2462:	cmp	r7, #0
    2464:	beq.w	230a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    2468:	ldr	r2, [r7, #0]
    246a:	ldr	r1, [pc, #364]	; (25d8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x44c>)
    246c:	ldr	r2, [r2, #32]
    246e:	cmp	r2, r1
    2470:	bne.w	25ae <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x422>
    2474:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2476:	str	r3, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2478:	cmp	r0, #0
    247a:	beq.w	2586 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    247e:	ldr	r2, [r0, #16]
    2480:	subs	r2, #1
    2482:	str	r2, [r0, #16]
    2484:	cmp	r2, #0
    2486:	bne.n	2586 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    2488:	ldr.w	r8, [r7, #16]
    248c:	cmp.w	r8, #0
    2490:	beq.n	2586 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    2492:	ldr.w	r2, [r8]
    2496:	ldr	r2, [r2, #32]
    2498:	cmp	r2, r1
    249a:	bne.w	25c0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x434>
    249e:	ldr.w	r0, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    24a2:	str.w	r3, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    24a6:	cmp	r0, #0
    24a8:	beq.n	257e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    24aa:	ldr	r2, [r0, #16]
    24ac:	subs	r2, #1
    24ae:	str	r2, [r0, #16]
    24b0:	cmp	r2, #0
    24b2:	bne.n	257e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    24b4:	ldr.w	r9, [r8, #16]
    24b8:	cmp.w	r9, #0
    24bc:	beq.n	257e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    24be:	ldr.w	r2, [r9]
    24c2:	ldr	r2, [r2, #32]
    24c4:	cmp	r2, r1
    24c6:	bne.n	25b4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x428>
    24c8:	ldr.w	r0, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    24cc:	str.w	r3, [r9]
    24d0:	ldr.w	lr, [pc, #264]	; 25dc <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    24d4:	cmp	r0, #0
    24d6:	beq.n	2576 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    24d8:	ldr	r2, [r0, #16]
    24da:	subs	r2, #1
    24dc:	str	r2, [r0, #16]
    24de:	cmp	r2, #0
    24e0:	bne.n	2576 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    24e2:	ldr.w	sl, [r9, #16]
    24e6:	cmp.w	sl, #0
    24ea:	beq.n	2576 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    24ec:	ldr.w	r2, [sl]
    24f0:	ldr	r2, [r2, #32]
    24f2:	cmp	r2, r1
    24f4:	bne.n	25cc <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x440>
    24f6:	ldr.w	r0, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    24fa:	str.w	lr, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    24fe:	cmp	r0, #0
    2500:	beq.n	256e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    2502:	ldr	r2, [r0, #16]
    2504:	subs	r2, #1
    2506:	str	r2, [r0, #16]
    2508:	cmp	r2, #0
    250a:	bne.n	256e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    250c:	ldr.w	fp, [sl, #16]
    2510:	cmp.w	fp, #0
    2514:	beq.n	256e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    2516:	ldr.w	r2, [fp]
    251a:	ldr	r2, [r2, #32]
    251c:	cmp	r2, r1
    251e:	bne.n	25e0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x454>
    2520:	ldr.w	r2, [fp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2524:	str.w	r3, [fp]
    2528:	ldr	r0, [pc, #176]	; (25dc <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    252a:	cbz	r2, 2566 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    252c:	ldr	r3, [r2, #16]
    252e:	subs	r3, #1
    2530:	str	r3, [r2, #16]
    2532:	cbnz	r3, 2566 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    2534:	ldr.w	r2, [fp, #16]
    2538:	cbz	r2, 2566 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    253a:	ldr	r3, [r2, #0]
    253c:	ldr	r3, [r3, #32]
    253e:	cmp	r3, r1
    2540:	bne.n	25ec <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x460>
    2542:	ldr	r1, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2544:	str	r0, [r2, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2546:	cbz	r1, 255e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3d2>
    2548:	ldr	r3, [r1, #16]
    254a:	subs	r3, #1
    254c:	str	r3, [r1, #16]
    254e:	cbnz	r3, 255e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3d2>
    2550:	ldr	r0, [r2, #16]
    2552:	cbz	r0, 255e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3d2>
    2554:	ldr	r3, [r0, #0]
    2556:	str	r2, [sp, #4]
    2558:	ldr	r3, [r3, #32]
    255a:	blx	r3
    255c:	ldr	r2, [sp, #4]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    255e:	mov	r0, r2
    2560:	movs	r1, #20
    2562:	bl	ddec <operator delete(void*, unsigned int)>
    2566:	mov	r0, fp
    2568:	movs	r1, #20
    256a:	bl	ddec <operator delete(void*, unsigned int)>
    256e:	mov	r0, sl
    2570:	movs	r1, #20
    2572:	bl	ddec <operator delete(void*, unsigned int)>
    2576:	mov	r0, r9
    2578:	movs	r1, #20
    257a:	bl	ddec <operator delete(void*, unsigned int)>
    257e:	mov	r0, r8
    2580:	movs	r1, #20
    2582:	bl	ddec <operator delete(void*, unsigned int)>
    2586:	mov	r0, r7
    2588:	movs	r1, #20
    258a:	bl	ddec <operator delete(void*, unsigned int)>
    258e:	b.n	230a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    if (open_file_ == i && mode_ == mode) return;
    2590:	ldr.w	r3, [r0, #236]	; 0xec
    2594:	cmp	r3, r2
    2596:	bne.w	219c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x10>
    if(sd_isOpen(file_)) file_.close();
    file_=sd_open(store,filename,mode);
    open_file_ = i;
    mode_ = mode;
    mtp_lock_storage(false);
  }
    259a:	add	sp, #292	; 0x124
    259c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    25a0:	blx	r2
    25a2:	b.n	2250 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xc4>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    25a4:	blx	r2
    25a6:	b.n	22c8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    25a8:	mov	r0, r7
    25aa:	blx	r3
    25ac:	b.n	22e8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
    25ae:	mov	r0, r7
    25b0:	blx	r2
    25b2:	b.n	230a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    25b4:	mov	r0, r9
    25b6:	blx	r2
    25b8:	b.n	257e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    25ba:	mov	r0, r9
    25bc:	blx	r2
    25be:	b.n	244e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    25c0:	mov	r0, r8
    25c2:	blx	r2
    25c4:	b.n	2586 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    25c6:	mov	r0, r8
    25c8:	blx	r2
    25ca:	b.n	2456 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    25cc:	mov	r0, sl
    25ce:	blx	r2
    25d0:	b.n	2576 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    25d2:	mov	r0, sl
    25d4:	blx	r2
    25d6:	b.n	2446 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    25d8:	.word	0x00000eb1
    25dc:	.word	0x00012e78
    25e0:	mov	r0, fp
    25e2:	blx	r2
    25e4:	b.n	256e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    25e6:	mov	r0, fp
    25e8:	blx	r2
    25ea:	b.n	243e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    25ec:	mov	r0, r2
    25ee:	blx	r3
    25f0:	b.n	2566 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    25f2:	mov	r0, r2
    25f4:	blx	r3
    25f6:	b.n	2436 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>

000025f8 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    25f8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    25fc:	mov	r5, r0
    25fe:	sub	sp, #8
    2600:	mov	r7, r2
    OpenFileByIndex(handle);
    2602:	movs	r2, #0
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    2604:	mov	r8, r3
    2606:	ldr.w	r9, [sp, #40]	; 0x28
    OpenFileByIndex(handle);
    260a:	bl	218c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    260e:	ldr.w	r4, [r5, #204]	; 0xcc
    2612:	cmp	r4, #0
    2614:	beq.n	26ec <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    2616:	ldr	r0, [r4, #0]
    2618:	ldr	r2, [pc, #308]	; (2750 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x158>)
    261a:	ldr	r6, [r0, #52]	; 0x34
    261c:	cmp	r6, r2
    261e:	mov.w	r3, #0
    2622:	bne.n	271c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x124>
    2624:	ldr	r1, [r4, #16]
    2626:	cmp	r1, #0
    2628:	beq.n	26e4 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xec>
    262a:	ldr	r2, [r1, #0]
    262c:	ldr.w	sl, [r2, #52]	; 0x34
    2630:	cmp	sl, r6
    2632:	bne.n	2726 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x12e>
    2634:	ldr.w	lr, [r1, #16]
    2638:	cmp.w	lr, #0
    263c:	beq.n	26f2 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xfa>
    263e:	ldr.w	r2, [lr]
    2642:	ldr	r6, [r2, #52]	; 0x34
    2644:	cmp	r6, sl
    2646:	bne.n	2730 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x138>
    2648:	ldr.w	lr, [lr, #16]
    264c:	cmp.w	lr, #0
    2650:	beq.n	26f2 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xfa>
    2652:	ldr.w	r2, [lr]
    2656:	ldr.w	sl, [r2, #52]	; 0x34
    265a:	cmp	sl, r6
    265c:	bne.n	273a <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x142>
    265e:	ldr.w	lr, [lr, #16]
    2662:	cmp.w	lr, #0
    2666:	beq.n	26f2 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xfa>
    2668:	ldr.w	r3, [lr]
    266c:	ldr	r6, [r3, #52]	; 0x34
    266e:	cmp	r6, sl
    2670:	bne.n	2744 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x14c>
    2672:	ldr.w	r6, [lr, #16]
    2676:	cmp	r6, #0
    2678:	beq.n	26f2 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xfa>
    267a:	ldr	r1, [r6, #0]
    267c:	movs	r3, #0
    267e:	str	r3, [sp, #0]
    2680:	mov	r2, r7
    2682:	mov	r0, r6
    2684:	ldr	r1, [r1, #52]	; 0x34
    2686:	blx	r1
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    2688:	ldr.w	r4, [r5, #204]	; 0xcc
    268c:	cmp	r4, #0
    268e:	beq.n	26ec <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    2690:	ldr	r2, [r4, #0]
    2692:	ldr	r3, [pc, #192]	; (2754 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x15c>)
    2694:	ldr	r5, [r2, #40]	; 0x28
    2696:	cmp	r5, r3
    2698:	bne.n	26fe <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x106>
    269a:	ldr	r0, [r4, #16]
    269c:	cbz	r0, 26ec <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    269e:	ldr	r2, [r0, #0]
    26a0:	ldr	r4, [r2, #40]	; 0x28
    26a2:	cmp	r4, r3
    26a4:	bne.n	270e <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    26a6:	ldr	r0, [r0, #16]
    26a8:	cbz	r0, 26ec <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    26aa:	ldr	r2, [r0, #0]
    26ac:	ldr	r4, [r2, #40]	; 0x28
    26ae:	cmp	r4, r3
    26b0:	bne.n	270e <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    26b2:	ldr	r0, [r0, #16]
    26b4:	cbz	r0, 26ec <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    26b6:	ldr	r2, [r0, #0]
    26b8:	ldr	r4, [r2, #40]	; 0x28
    26ba:	cmp	r4, r3
    26bc:	bne.n	270e <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    26be:	ldr	r0, [r0, #16]
    26c0:	cbz	r0, 26ec <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    26c2:	ldr	r2, [r0, #0]
    26c4:	ldr	r4, [r2, #40]	; 0x28
    26c6:	cmp	r4, r3
    26c8:	bne.n	270e <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    26ca:	ldr	r0, [r0, #16]
    26cc:	cbz	r0, 26ec <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    26ce:	ldr	r2, [r0, #0]
    26d0:	ldr	r4, [r2, #40]	; 0x28
    26d2:	cmp	r4, r3
    26d4:	bne.n	270e <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    26d6:	ldr	r0, [r0, #16]
    26d8:	cbz	r0, 26ec <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    26da:	ldr	r3, [r0, #0]
    26dc:	mov	r2, r9
    26de:	mov	r1, r8
    26e0:	ldr	r3, [r3, #40]	; 0x28
    26e2:	b.n	2706 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x10e>
    26e4:	ldr	r5, [r0, #40]	; 0x28
    26e6:	ldr	r3, [pc, #108]	; (2754 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x15c>)
    26e8:	cmp	r5, r3
    26ea:	bne.n	26fe <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x106>
    mtp_lock_storage(true);
    file_.seek(pos);
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }
    26ec:	add	sp, #8
    26ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    26f2:	ldr	r5, [r0, #40]	; 0x28
    26f4:	ldr	r3, [pc, #92]	; (2754 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x15c>)
    26f6:	cmp	r5, r3
    26f8:	bne.n	26fe <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x106>
    26fa:	mov	r0, r1
    26fc:	b.n	269e <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xa6>
    26fe:	mov	r2, r9
    2700:	mov	r1, r8
    2702:	mov	r0, r4
    2704:	mov	r3, r5
    2706:	add	sp, #8
    2708:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    270c:	bx	r3
    270e:	mov	r2, r9
    2710:	mov	r1, r8
    2712:	mov	r3, r4
    2714:	add	sp, #8
    2716:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    271a:	bx	r3
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    271c:	str	r3, [sp, #0]
    271e:	mov	r2, r7
    2720:	mov	r0, r4
    2722:	blx	r6
    2724:	b.n	2688 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    2726:	str	r3, [sp, #0]
    2728:	mov	r2, r7
    272a:	mov	r0, r1
    272c:	blx	sl
    272e:	b.n	2688 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    2730:	str	r3, [sp, #0]
    2732:	mov	r2, r7
    2734:	mov	r0, lr
    2736:	blx	r6
    2738:	b.n	2688 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    273a:	str	r3, [sp, #0]
    273c:	mov	r2, r7
    273e:	mov	r0, lr
    2740:	blx	sl
    2742:	b.n	2688 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    2744:	movs	r3, #0
    2746:	mov	r2, r7
    2748:	mov	r0, lr
    274a:	str	r3, [sp, #0]
    274c:	blx	r6
    274e:	b.n	2688 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    2750:	.word	0x000004c9
    2754:	.word	0x0000047d

00002758 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>:
    DeleteObject(object);
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t store, uint32_t parent,  bool folder, const char* filename)
  {
    2758:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    275c:	cmp.w	r2, #4294967295
    2760:	ite	ne
    2762:	movne	r6, r2
    2764:	moveq	r6, r1
    DeleteObject(object);
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t store, uint32_t parent,  bool folder, const char* filename)
  {
    2766:	sub.w	sp, sp, #800	; 0x320
    276a:	mov	r4, r0
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    276c:	mov	r2, r6
    DeleteObject(object);
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t store, uint32_t parent,  bool folder, const char* filename)
  {
    276e:	mov	r7, r1
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    2770:	mov	r1, r0
    2772:	add	r0, sp, #256	; 0x100
    DeleteObject(object);
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t store, uint32_t parent,  bool folder, const char* filename)
  {
    2774:	mov	r8, r3
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    2776:	bl	1c18 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    277a:	ldr	r1, [sp, #824]	; 0x338
    277c:	mov.w	r2, #256	; 0x100
    2780:	add	r0, sp, #544	; 0x220
    2782:	bl	f8e4 <strlcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    2786:	ldr.w	r5, [r4, #244]	; 0xf4
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    278a:	ldrh.w	r3, [sp, #270]	; 0x10e
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    278e:	ldr	r2, [sp, #260]	; 0x104
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    2790:	strh.w	r3, [sp, #542]	; 0x21e
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    2794:	adds	r1, r5, #1
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    2796:	movs	r3, #0
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    2798:	str.w	r1, [r4, #244]	; 0xf4
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    279c:	str	r3, [sp, #532]	; 0x214
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    279e:	mov	r1, r5
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    27a0:	movs	r3, #1
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    27a2:	str	r2, [sp, #536]	; 0x218
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    27a4:	mov	r0, r4
    27a6:	add	r2, sp, #528	; 0x210
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    r.parent = parent;
    27a8:	str	r6, [sp, #528]	; 0x210
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    27aa:	strb.w	r8, [sp, #540]	; 0x21c
    // New folder is empty, scanned = true.
    r.scanned = 1;
    27ae:	strb.w	r3, [sp, #541]	; 0x21d
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    27b2:	bl	1a4c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    27b6:	mov	r1, r6
    27b8:	add	r2, sp, #256	; 0x100
    27ba:	mov	r0, r4
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    27bc:	str	r5, [sp, #260]	; 0x104
    WriteIndexRecord(parent, p);
    27be:	bl	1a4c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    27c2:	cmp.w	r8, #0
    27c6:	bne.n	27dc <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x84>
      sd_mkdir(store,filename);
      mtp_lock_storage(false);
    } 
    else 
    {
      OpenFileByIndex(ret, FILE_WRITE_BEGIN);
    27c8:	mov	r0, r4
    27ca:	movs	r2, #2
    27cc:	mov	r1, r5
    27ce:	bl	218c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
      Serial.print(store); Serial.print(" "); 
      Serial.print(parent); Serial.print(" "); 
      Serial.println(filename);
    #endif
    return ret;
  }
    27d2:	mov	r0, r5
    27d4:	add.w	sp, sp, #800	; 0x320
    27d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    if (folder) 
    {
      char filename[MAX_FILENAME_LEN];
      ConstructFilename(ret, filename, MAX_FILENAME_LEN);
    27dc:	mov	r0, r4
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    27de:	add.w	r4, r4, r7, lsl #2
    27e2:	mov	r2, sp
    27e4:	mov	r1, r5
    27e6:	mov.w	r3, #256	; 0x100
    27ea:	bl	2078 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    27ee:	ldr	r0, [r4, #88]	; 0x58
    27f0:	ldr	r3, [r0, #0]
    27f2:	mov	r1, sp
    27f4:	ldr	r3, [r3, #8]
    27f6:	blx	r3
      Serial.print(store); Serial.print(" "); 
      Serial.print(parent); Serial.print(" "); 
      Serial.println(filename);
    #endif
    return ret;
  }
    27f8:	mov	r0, r5
    27fa:	add.w	sp, sp, #800	; 0x320
    27fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2802:	nop

00002804 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>:
      AppendIndexRecord(r);
    }
  }

  void MTPStorage_SD::ScanDir(uint32_t store, uint32_t i) 
  { if (i == 0xFFFFFFFFUL) i = store;
    2804:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2808:	cmp.w	r2, #4294967295
    280c:	ite	ne
    280e:	movne	r6, r2
    2810:	moveq	r6, r1
    2812:	sub.w	sp, sp, #564	; 0x234
    
    Record record = ReadIndexRecord(i);
    2816:	mov	r1, r0
      AppendIndexRecord(r);
    }
  }

  void MTPStorage_SD::ScanDir(uint32_t store, uint32_t i) 
  { if (i == 0xFFFFFFFFUL) i = store;
    2818:	mov	r4, r0
    
    Record record = ReadIndexRecord(i);
    281a:	mov	r2, r6
    281c:	add	r0, sp, #16
    281e:	bl	1c18 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    2822:	ldrb.w	r3, [sp, #28]
    2826:	cbz	r3, 282e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    2828:	ldrb.w	r2, [sp, #29]
    282c:	cbz	r2, 2836 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x32>
      }
      record.scanned = true;
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }
    282e:	add.w	sp, sp, #564	; 0x234
    2832:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  void MTPStorage_SD::ScanDir(uint32_t store, uint32_t i) 
  { if (i == 0xFFFFFFFFUL) i = store;
    
    Record record = ReadIndexRecord(i);
    if (record.isdir && !record.scanned) {
      OpenFileByIndex(i);
    2836:	mov	r0, r4
    2838:	mov	r1, r6
    283a:	bl	218c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    283e:	ldr.w	r0, [r4, #204]	; 0xcc
    2842:	cmp	r0, #0
    2844:	beq.n	282e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    2846:	ldr	r3, [r0, #0]
    2848:	ldr.w	r8, [pc, #892]	; 2bc8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c4>
    284c:	ldr	r3, [r3, #68]	; 0x44
    284e:	cmp	r3, r8
    2850:	bne.n	290c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x108>
    2852:	ldr	r0, [r0, #16]
    2854:	cmp	r0, #0
    2856:	beq.n	282e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    2858:	ldr	r3, [r0, #0]
    285a:	ldr	r3, [r3, #68]	; 0x44
    285c:	cmp	r3, r8
    285e:	bne.n	290c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x108>
    2860:	ldr	r0, [r0, #16]
    2862:	cmp	r0, #0
    2864:	beq.n	282e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    2866:	ldr	r3, [r0, #0]
    2868:	ldr	r3, [r3, #68]	; 0x44
    286a:	cmp	r3, r8
    286c:	bne.n	290c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x108>
    286e:	ldr	r0, [r0, #16]
    2870:	cmp	r0, #0
    2872:	beq.n	282e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    2874:	ldr	r3, [r0, #0]
    2876:	ldr	r3, [r3, #68]	; 0x44
    2878:	cmp	r3, r8
    287a:	bne.n	290c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x108>
    287c:	ldr	r0, [r0, #16]
    287e:	cmp	r0, #0
    2880:	beq.n	282e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    2882:	ldr	r3, [r0, #0]
    2884:	ldr	r3, [r3, #68]	; 0x44
    2886:	cmp	r3, r8
    2888:	bne.n	290c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x108>
    288a:	ldr	r0, [r0, #16]
    288c:	cmp	r0, #0
    288e:	beq.n	282e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    2890:	ldr	r3, [r0, #0]
    2892:	ldr	r3, [r3, #68]	; 0x44
    2894:	blx	r3
      if (!sd_isOpen(file_)) return;
    2896:	cmp	r0, #0
    2898:	beq.n	282e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    289a:	ldr.w	r9, [pc, #804]	; 2bc0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3bc>
    289e:	ldr.w	fp, [pc, #812]	; 2bcc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c8>
    28a2:	movs	r5, #0
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    28a4:	ldr.w	r1, [r4, #204]	; 0xcc
    28a8:	cmp	r1, #0
    28aa:	beq.n	2910 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    28ac:	ldr	r3, [r1, #0]
    28ae:	ldr	r3, [r3, #80]	; 0x50
    28b0:	cmp	r3, fp
    28b2:	bne.w	2dc6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    28b6:	ldr	r1, [r1, #16]
    28b8:	cbz	r1, 2910 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    28ba:	ldr	r3, [r1, #0]
    28bc:	ldr	r3, [r3, #80]	; 0x50
    28be:	cmp	r3, fp
    28c0:	bne.w	2dc6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    28c4:	ldr	r1, [r1, #16]
    28c6:	cbz	r1, 2910 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    28c8:	ldr	r3, [r1, #0]
    28ca:	ldr	r3, [r3, #80]	; 0x50
    28cc:	cmp	r3, fp
    28ce:	bne.w	2dc6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    28d2:	ldr	r1, [r1, #16]
    28d4:	cbz	r1, 2910 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    28d6:	ldr	r3, [r1, #0]
    28d8:	ldr	r3, [r3, #80]	; 0x50
    28da:	cmp	r3, fp
    28dc:	bne.w	2dc6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    28e0:	ldr	r1, [r1, #16]
    28e2:	cbz	r1, 2910 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    28e4:	ldr	r3, [r1, #0]
    28e6:	ldr	r3, [r3, #80]	; 0x50
    28e8:	cmp	r3, fp
    28ea:	bne.w	2dc6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    28ee:	ldr	r1, [r1, #16]
    28f0:	cbz	r1, 2910 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    28f2:	ldr	r3, [r1, #0]
    28f4:	ldr	r3, [r3, #80]	; 0x50
    28f6:	cmp	r3, fp
    28f8:	bne.w	2dc6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    28fc:	ldr	r1, [r1, #16]
    28fe:	cbz	r1, 2910 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    2900:	ldr	r3, [r1, #0]
    2902:	movs	r2, #0
    2904:	ldr	r3, [r3, #80]	; 0x50
    2906:	add	r0, sp, #288	; 0x120
    2908:	blx	r3
    290a:	b.n	2926 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x122>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    290c:	blx	r3
    290e:	b.n	2896 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x92>
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    2910:	movs	r3, #0
    2912:	mov.w	r2, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    2916:	str.w	r9, [sp, #288]	; 0x120
    291a:	strb.w	r3, [sp, #292]	; 0x124
    291e:	strb.w	r3, [sp, #300]	; 0x12c
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
    2922:	str	r3, [sp, #304]	; 0x130
    2924:	str	r2, [sp, #296]	; 0x128
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2926:	ldr.w	r2, [r4, #224]	; 0xe0
    292a:	cmp	r2, #0
    292c:	beq.n	29c2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1be>
    292e:	ldr	r3, [r2, #16]
    2930:	subs	r3, #1
    2932:	str	r3, [r2, #16]
    2934:	cmp	r3, #0
    2936:	bne.n	29c2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1be>
    2938:	ldr.w	r7, [r4, #224]	; 0xe0
    293c:	cmp	r7, #0
    293e:	beq.n	29c2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1be>
    2940:	ldr	r3, [r7, #0]
    2942:	ldr	r0, [pc, #632]	; (2bbc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b8>)
    2944:	ldr	r3, [r3, #32]
    2946:	cmp	r3, r0
    2948:	bne.w	2de8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5e4>
    294c:	ldr	r2, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    294e:	str.w	r9, [r7]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2952:	cbz	r2, 29ba <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b6>
    2954:	ldr	r3, [r2, #16]
    2956:	subs	r3, #1
    2958:	str	r3, [r2, #16]
    295a:	cbnz	r3, 29ba <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b6>
    295c:	ldr.w	sl, [r7, #16]
    2960:	cmp.w	sl, #0
    2964:	beq.n	29ba <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b6>
    2966:	ldr.w	r3, [sl]
    296a:	ldr	r3, [r3, #32]
    296c:	cmp	r3, r0
    296e:	bne.w	2fb6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7b2>
    2972:	ldr.w	r2, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2976:	ldr	r3, [pc, #584]	; (2bc0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3bc>)
    2978:	str.w	r3, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    297c:	cbz	r2, 29b2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ae>
    297e:	ldr	r3, [r2, #16]
    2980:	subs	r3, #1
    2982:	str	r3, [r2, #16]
    2984:	cbnz	r3, 29b2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ae>
    2986:	ldr.w	r3, [sl, #16]
    298a:	cbz	r3, 29b2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ae>
    298c:	ldr	r2, [r3, #0]
    298e:	ldr	r2, [r2, #32]
    2990:	cmp	r2, r0
    2992:	bne.w	2fc8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7c4>
    2996:	ldr	r1, [r3, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2998:	str.w	r9, [r3]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    299c:	cbz	r1, 29aa <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1a6>
    299e:	ldr	r2, [r1, #16]
    29a0:	subs	r2, #1
    29a2:	str	r2, [r1, #16]
    29a4:	cmp	r2, #0
    29a6:	beq.w	2e00 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5fc>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    29aa:	mov	r0, r3
    29ac:	movs	r1, #20
    29ae:	bl	ddec <operator delete(void*, unsigned int)>
    29b2:	mov	r0, sl
    29b4:	movs	r1, #20
    29b6:	bl	ddec <operator delete(void*, unsigned int)>
    29ba:	mov	r0, r7
    29bc:	movs	r1, #20
    29be:	bl	ddec <operator delete(void*, unsigned int)>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    29c2:	ldr	r3, [sp, #304]	; 0x130
    29c4:	str.w	r3, [r4, #224]	; 0xe0
		if (f) f->refcount++;
    29c8:	cmp	r3, #0
    29ca:	beq.n	2a6e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    29cc:	ldr	r2, [r3, #16]
    29ce:	adds	r2, #1
    29d0:	str	r2, [r3, #16]
    29d2:	ldr	r2, [sp, #304]	; 0x130
		return *this;
	}
	virtual ~File() {
    29d4:	str.w	r9, [sp, #288]	; 0x120
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    29d8:	cmp	r2, #0
    29da:	beq.n	2a6e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    29dc:	ldr	r3, [r2, #16]
    29de:	subs	r3, #1
    29e0:	str	r3, [r2, #16]
    29e2:	cmp	r3, #0
    29e4:	bne.n	2a6e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    29e6:	ldr	r7, [sp, #304]	; 0x130
    29e8:	cmp	r7, #0
    29ea:	beq.n	2a6e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    29ec:	ldr	r3, [r7, #0]
    29ee:	ldr	r0, [pc, #460]	; (2bbc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b8>)
    29f0:	ldr	r3, [r3, #32]
    29f2:	cmp	r3, r0
    29f4:	bne.w	2de2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5de>
    29f8:	ldr	r2, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    29fa:	ldr	r3, [pc, #452]	; (2bc0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3bc>)
    29fc:	str	r3, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    29fe:	cbz	r2, 2a66 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x262>
    2a00:	ldr	r3, [r2, #16]
    2a02:	subs	r3, #1
    2a04:	str	r3, [r2, #16]
    2a06:	cbnz	r3, 2a66 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x262>
    2a08:	ldr.w	sl, [r7, #16]
    2a0c:	cmp.w	sl, #0
    2a10:	beq.n	2a66 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x262>
    2a12:	ldr.w	r3, [sl]
    2a16:	ldr	r3, [r3, #32]
    2a18:	cmp	r3, r0
    2a1a:	bne.w	2fbc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7b8>
    2a1e:	ldr.w	r2, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2a22:	ldr	r3, [pc, #412]	; (2bc0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3bc>)
    2a24:	str.w	r3, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2a28:	cbz	r2, 2a5e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x25a>
    2a2a:	ldr	r3, [r2, #16]
    2a2c:	subs	r3, #1
    2a2e:	str	r3, [r2, #16]
    2a30:	cbnz	r3, 2a5e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x25a>
    2a32:	ldr.w	r3, [sl, #16]
    2a36:	cbz	r3, 2a5e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x25a>
    2a38:	ldr	r2, [r3, #0]
    2a3a:	ldr	r2, [r2, #32]
    2a3c:	cmp	r2, r0
    2a3e:	bne.w	2fc2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7be>
    2a42:	ldr	r1, [r3, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2a44:	str.w	r9, [r3]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2a48:	cbz	r1, 2a56 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x252>
    2a4a:	ldr	r2, [r1, #16]
    2a4c:	subs	r2, #1
    2a4e:	str	r2, [r1, #16]
    2a50:	cmp	r2, #0
    2a52:	beq.w	2ede <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6da>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    2a56:	mov	r0, r3
    2a58:	movs	r1, #20
    2a5a:	bl	ddec <operator delete(void*, unsigned int)>
    2a5e:	mov	r0, sl
    2a60:	movs	r1, #20
    2a62:	bl	ddec <operator delete(void*, unsigned int)>
    2a66:	mov	r0, r7
    2a68:	movs	r1, #20
    2a6a:	bl	ddec <operator delete(void*, unsigned int)>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    2a6e:	ldr.w	r0, [r4, #224]	; 0xe0
    2a72:	cmp	r0, #0
    2a74:	beq.w	2b9e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    2a78:	ldr	r3, [r0, #0]
    2a7a:	ldr	r3, [r3, #68]	; 0x44
    2a7c:	cmp	r3, r8
    2a7e:	bne.w	2bb8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    2a82:	ldr	r0, [r0, #16]
    2a84:	cmp	r0, #0
    2a86:	beq.w	2b9e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    2a8a:	ldr	r3, [r0, #0]
    2a8c:	ldr	r3, [r3, #68]	; 0x44
    2a8e:	cmp	r3, r8
    2a90:	bne.w	2bb8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    2a94:	ldr	r0, [r0, #16]
    2a96:	cmp	r0, #0
    2a98:	beq.w	2b9e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    2a9c:	ldr	r3, [r0, #0]
    2a9e:	ldr	r3, [r3, #68]	; 0x44
    2aa0:	cmp	r3, r8
    2aa2:	bne.w	2bb8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    2aa6:	ldr	r0, [r0, #16]
    2aa8:	cmp	r0, #0
    2aaa:	beq.n	2b9e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    2aac:	ldr	r3, [r0, #0]
    2aae:	ldr	r3, [r3, #68]	; 0x44
    2ab0:	cmp	r3, r8
    2ab2:	bne.w	2bb8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    2ab6:	ldr	r0, [r0, #16]
    2ab8:	cmp	r0, #0
    2aba:	beq.n	2b9e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    2abc:	ldr	r3, [r0, #0]
    2abe:	ldr	r3, [r3, #68]	; 0x44
    2ac0:	cmp	r3, r8
    2ac2:	bne.n	2bb8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    2ac4:	ldr	r0, [r0, #16]
    2ac6:	cmp	r0, #0
    2ac8:	beq.n	2b9e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    2aca:	ldr	r3, [r0, #0]
    2acc:	ldr	r3, [r3, #68]	; 0x44
    2ace:	cmp	r3, r8
    2ad0:	bne.n	2bb8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    2ad2:	ldr	r0, [r0, #16]
    2ad4:	cmp	r0, #0
    2ad6:	beq.n	2b9e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    2ad8:	ldr	r3, [r0, #0]
    2ada:	ldr	r3, [r3, #68]	; 0x44
    2adc:	cmp	r3, r8
    2ade:	bne.n	2bb8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    2ae0:	ldr	r0, [r0, #16]
    2ae2:	cmp	r0, #0
    2ae4:	beq.n	2b9e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    2ae6:	ldr	r3, [r0, #0]
    2ae8:	ldr	r3, [r3, #68]	; 0x44
    2aea:	cmp	r3, r8
    2aec:	bne.n	2bb8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    2aee:	ldr	r0, [r0, #16]
    2af0:	cmp	r0, #0
    2af2:	beq.n	2b9e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    2af4:	ldr	r3, [r0, #0]
    2af6:	ldr	r3, [r3, #68]	; 0x44
    2af8:	blx	r3
      int sibling = 0;
      while (true) 
      { mtp_lock_storage(true);
        child_=file_.openNextFile();
        mtp_lock_storage(false);
        if(!sd_isOpen(child_)) break;
    2afa:	cmp	r0, #0
    2afc:	beq.n	2b9e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    2afe:	ldr.w	r3, [r4, #224]	; 0xe0

        Record r;
        r.store = record.store;
    2b02:	ldrh.w	r2, [sp, #30]
        r.parent = i;
    2b06:	str	r6, [sp, #288]	; 0x120
        r.sibling = sibling;
    2b08:	str	r5, [sp, #296]	; 0x128
        child_=file_.openNextFile();
        mtp_lock_storage(false);
        if(!sd_isOpen(child_)) break;

        Record r;
        r.store = record.store;
    2b0a:	strh.w	r2, [sp, #302]	; 0x12e
    2b0e:	cmp	r3, #0
    2b10:	beq.w	2d3a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    2b14:	ldr	r1, [r3, #0]
    2b16:	ldr	r2, [pc, #172]	; (2bc4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c0>)
    2b18:	ldr	r1, [r1, #76]	; 0x4c
    2b1a:	cmp	r1, r2
    2b1c:	bne.n	2bd0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3cc>
    2b1e:	ldr	r0, [r3, #16]
    2b20:	cmp	r0, #0
    2b22:	beq.w	2d3a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    2b26:	ldr	r1, [r0, #0]
    2b28:	ldr	r1, [r1, #76]	; 0x4c
    2b2a:	cmp	r1, r2
    2b2c:	bne.n	2bd2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    2b2e:	ldr	r0, [r0, #16]
    2b30:	cmp	r0, #0
    2b32:	beq.w	2d3a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    2b36:	ldr	r1, [r0, #0]
    2b38:	ldr	r1, [r1, #76]	; 0x4c
    2b3a:	cmp	r1, r2
    2b3c:	bne.n	2bd2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    2b3e:	ldr	r0, [r0, #16]
    2b40:	cmp	r0, #0
    2b42:	beq.w	2d3a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    2b46:	ldr	r1, [r0, #0]
    2b48:	ldr	r1, [r1, #76]	; 0x4c
    2b4a:	cmp	r1, r2
    2b4c:	bne.n	2bd2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    2b4e:	ldr	r0, [r0, #16]
    2b50:	cmp	r0, #0
    2b52:	beq.w	2d3a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    2b56:	ldr	r1, [r0, #0]
    2b58:	ldr	r1, [r1, #76]	; 0x4c
    2b5a:	cmp	r1, r2
    2b5c:	bne.n	2bd2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    2b5e:	ldr	r0, [r0, #16]
    2b60:	cmp	r0, #0
    2b62:	beq.w	2d3a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    2b66:	ldr	r1, [r0, #0]
    2b68:	ldr	r1, [r1, #76]	; 0x4c
    2b6a:	cmp	r1, r2
    2b6c:	bne.n	2bd2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    2b6e:	ldr	r0, [r0, #16]
    2b70:	cmp	r0, #0
    2b72:	beq.w	2d3a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    2b76:	ldr	r1, [r0, #0]
    2b78:	ldr	r1, [r1, #76]	; 0x4c
    2b7a:	cmp	r1, r2
    2b7c:	bne.n	2bd2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    2b7e:	ldr	r0, [r0, #16]
    2b80:	cmp	r0, #0
    2b82:	beq.w	2d3a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    2b86:	ldr	r1, [r0, #0]
    2b88:	ldr	r1, [r1, #76]	; 0x4c
    2b8a:	cmp	r1, r2
    2b8c:	bne.n	2bd2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    2b8e:	ldr	r0, [r0, #16]
    2b90:	cmp	r0, #0
    2b92:	beq.w	2d3a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    2b96:	ldr	r3, [r0, #0]
    2b98:	ldr	r3, [r3, #76]	; 0x4c
    2b9a:	blx	r3
    2b9c:	b.n	2bd4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3d0>
        r.scanned = false;
        sd_getName(child_,r.name, MAX_FILENAME_LEN);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    2b9e:	movs	r3, #1
      record.child = sibling;
      WriteIndexRecord(i, record);
    2ba0:	mov	r1, r6
    2ba2:	mov	r0, r4
    2ba4:	add	r2, sp, #16
        sd_getName(child_,r.name, MAX_FILENAME_LEN);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
      record.child = sibling;
    2ba6:	str	r5, [sp, #20]
        r.scanned = false;
        sd_getName(child_,r.name, MAX_FILENAME_LEN);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    2ba8:	strb.w	r3, [sp, #29]
      record.child = sibling;
      WriteIndexRecord(i, record);
    2bac:	bl	1a4c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    }
  }
    2bb0:	add.w	sp, sp, #564	; 0x234
    2bb4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    2bb8:	blx	r3
    2bba:	b.n	2afa <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2f6>
    2bbc:	.word	0x00000eb1
    2bc0:	.word	0x00012e78
    2bc4:	.word	0x0000052d
    2bc8:	.word	0x0000050d
    2bcc:	.word	0x00000539
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    2bd0:	mov	r0, r3
    2bd2:	blx	r1

        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
    2bd4:	strb.w	r0, [sp, #300]	; 0x12c
    2bd8:	ldr.w	r3, [r4, #224]	; 0xe0
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    2bdc:	cmp	r0, #0
    2bde:	beq.w	2d40 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x53c>
    2be2:	movs	r0, #0
        r.scanned = false;
    2be4:	movs	r2, #0
        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    2be6:	str	r0, [sp, #292]	; 0x124
        r.scanned = false;
    2be8:	strb.w	r2, [sp, #301]	; 0x12d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    2bec:	cmp	r3, #0
    2bee:	beq.w	2dc2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    2bf2:	ldr	r1, [r3, #0]
    2bf4:	ldr	r2, [pc, #504]	; (2df0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ec>)
    2bf6:	ldr	r1, [r1, #72]	; 0x48
    2bf8:	cmp	r1, r2
    2bfa:	bne.w	2dba <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5b6>
    2bfe:	ldr	r0, [r3, #16]
    2c00:	cmp	r0, #0
    2c02:	beq.w	2dc2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    2c06:	ldr	r3, [r0, #0]
    2c08:	ldr	r3, [r3, #72]	; 0x48
    2c0a:	cmp	r3, r2
    2c0c:	bne.n	2c80 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    2c0e:	ldr	r0, [r0, #16]
    2c10:	cmp	r0, #0
    2c12:	beq.w	2dc2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    2c16:	ldr	r3, [r0, #0]
    2c18:	ldr	r3, [r3, #72]	; 0x48
    2c1a:	cmp	r3, r2
    2c1c:	bne.n	2c80 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    2c1e:	ldr	r0, [r0, #16]
    2c20:	cmp	r0, #0
    2c22:	beq.w	2dc2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    2c26:	ldr	r3, [r0, #0]
    2c28:	ldr	r3, [r3, #72]	; 0x48
    2c2a:	cmp	r3, r2
    2c2c:	bne.n	2c80 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    2c2e:	ldr	r0, [r0, #16]
    2c30:	cmp	r0, #0
    2c32:	beq.w	2dc2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    2c36:	ldr	r3, [r0, #0]
    2c38:	ldr	r3, [r3, #72]	; 0x48
    2c3a:	cmp	r3, r2
    2c3c:	bne.n	2c80 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    2c3e:	ldr	r0, [r0, #16]
    2c40:	cmp	r0, #0
    2c42:	beq.w	2dc2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    2c46:	ldr	r3, [r0, #0]
    2c48:	ldr	r3, [r3, #72]	; 0x48
    2c4a:	cmp	r3, r2
    2c4c:	bne.n	2c80 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    2c4e:	ldr	r0, [r0, #16]
    2c50:	cmp	r0, #0
    2c52:	beq.w	2dc2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    2c56:	ldr	r3, [r0, #0]
    2c58:	ldr	r3, [r3, #72]	; 0x48
    2c5a:	cmp	r3, r2
    2c5c:	bne.n	2c80 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    2c5e:	ldr	r0, [r0, #16]
    2c60:	cmp	r0, #0
    2c62:	beq.w	2dc2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    2c66:	ldr	r3, [r0, #0]
    2c68:	ldr	r3, [r3, #72]	; 0x48
    2c6a:	cmp	r3, r2
    2c6c:	bne.n	2c80 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    2c6e:	ldr	r0, [r0, #16]
    2c70:	cmp	r0, #0
    2c72:	beq.w	2dc2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    2c76:	ldr	r3, [r0, #0]
    2c78:	ldr	r3, [r3, #72]	; 0x48
    2c7a:	blx	r3
    2c7c:	mov	r1, r0
    2c7e:	b.n	2c84 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x480>
    2c80:	blx	r3
    2c82:	mov	r1, r0
        sd_getName(child_,r.name, MAX_FILENAME_LEN);
    2c84:	mov.w	r2, #256	; 0x100
    2c88:	add	r0, sp, #304	; 0x130
    2c8a:	bl	f8e4 <strlcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    2c8e:	ldr.w	r5, [r4, #244]	; 0xf4
    2c92:	adds	r3, r5, #1
    WriteIndexRecord(new_record, r);
    2c94:	mov	r0, r4
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    2c96:	str.w	r3, [r4, #244]	; 0xf4
    WriteIndexRecord(new_record, r);
    2c9a:	mov	r1, r5
    2c9c:	add	r2, sp, #288	; 0x120
    2c9e:	bl	1a4c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    2ca2:	ldr.w	r0, [r4, #224]	; 0xe0
    2ca6:	cmp	r0, #0
    2ca8:	beq.w	28a4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    2cac:	ldr	r2, [r0, #0]
    2cae:	ldr	r3, [pc, #324]	; (2df4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5f0>)
    2cb0:	ldr	r2, [r2, #64]	; 0x40
    2cb2:	cmp	r2, r3
    2cb4:	bne.n	2d36 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    2cb6:	ldr	r0, [r0, #16]
    2cb8:	cmp	r0, #0
    2cba:	beq.w	28a4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    2cbe:	ldr	r2, [r0, #0]
    2cc0:	ldr	r2, [r2, #64]	; 0x40
    2cc2:	cmp	r2, r3
    2cc4:	bne.n	2d36 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    2cc6:	ldr	r0, [r0, #16]
    2cc8:	cmp	r0, #0
    2cca:	beq.w	28a4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    2cce:	ldr	r2, [r0, #0]
    2cd0:	ldr	r2, [r2, #64]	; 0x40
    2cd2:	cmp	r2, r3
    2cd4:	bne.n	2d36 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    2cd6:	ldr	r0, [r0, #16]
    2cd8:	cmp	r0, #0
    2cda:	beq.w	28a4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    2cde:	ldr	r2, [r0, #0]
    2ce0:	ldr	r2, [r2, #64]	; 0x40
    2ce2:	cmp	r2, r3
    2ce4:	bne.n	2d36 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    2ce6:	ldr	r0, [r0, #16]
    2ce8:	cmp	r0, #0
    2cea:	beq.w	28a4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    2cee:	ldr	r2, [r0, #0]
    2cf0:	ldr	r2, [r2, #64]	; 0x40
    2cf2:	cmp	r2, r3
    2cf4:	bne.n	2d36 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    2cf6:	ldr	r0, [r0, #16]
    2cf8:	cmp	r0, #0
    2cfa:	beq.w	28a4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    2cfe:	ldr	r2, [r0, #0]
    2d00:	ldr	r2, [r2, #64]	; 0x40
    2d02:	cmp	r2, r3
    2d04:	bne.n	2d36 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    2d06:	ldr	r0, [r0, #16]
    2d08:	cmp	r0, #0
    2d0a:	beq.w	28a4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    2d0e:	ldr	r2, [r0, #0]
    2d10:	ldr	r2, [r2, #64]	; 0x40
    2d12:	cmp	r2, r3
    2d14:	bne.n	2d36 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    2d16:	ldr	r0, [r0, #16]
    2d18:	cmp	r0, #0
    2d1a:	beq.w	28a4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    2d1e:	ldr	r2, [r0, #0]
    2d20:	ldr	r2, [r2, #64]	; 0x40
    2d22:	cmp	r2, r3
    2d24:	bne.n	2d36 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    2d26:	ldr	r0, [r0, #16]
    2d28:	cmp	r0, #0
    2d2a:	beq.w	28a4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    2d2e:	ldr	r3, [r0, #0]
    2d30:	ldr	r3, [r3, #64]	; 0x40
    2d32:	blx	r3
    2d34:	b.n	28a4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    2d36:	blx	r2
    if (record.isdir && !record.scanned) {
      OpenFileByIndex(i);
      if (!sd_isOpen(file_)) return;
    
      int sibling = 0;
      while (true) 
    2d38:	b.n	28a4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>

        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
    2d3a:	movs	r2, #0
    2d3c:	strb.w	r2, [sp, #300]	; 0x12c
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    2d40:	cmp	r3, #0
    2d42:	beq.n	2dd8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5d4>
    2d44:	ldr	r1, [r3, #0]
    2d46:	ldr	r2, [pc, #176]	; (2df8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5f4>)
    2d48:	ldr	r1, [r1, #60]	; 0x3c
    2d4a:	cmp	r1, r2
    2d4c:	bne.n	2dce <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ca>
    2d4e:	ldr	r0, [r3, #16]
    2d50:	cbz	r0, 2da6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    2d52:	ldr	r1, [r0, #0]
    2d54:	ldr	r1, [r1, #60]	; 0x3c
    2d56:	cmp	r1, r2
    2d58:	bne.n	2dd0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5cc>
    2d5a:	ldr	r0, [r0, #16]
    2d5c:	cbz	r0, 2da6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    2d5e:	ldr	r1, [r0, #0]
    2d60:	ldr	r1, [r1, #60]	; 0x3c
    2d62:	cmp	r1, r2
    2d64:	bne.n	2dd0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5cc>
    2d66:	ldr	r0, [r0, #16]
    2d68:	cbz	r0, 2da6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    2d6a:	ldr	r1, [r0, #0]
    2d6c:	ldr	r1, [r1, #60]	; 0x3c
    2d6e:	cmp	r1, r2
    2d70:	bne.n	2dd0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5cc>
    2d72:	ldr	r0, [r0, #16]
    2d74:	cbz	r0, 2da6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    2d76:	ldr	r1, [r0, #0]
    2d78:	ldr	r1, [r1, #60]	; 0x3c
    2d7a:	cmp	r1, r2
    2d7c:	bne.n	2dd0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5cc>
    2d7e:	ldr	r0, [r0, #16]
    2d80:	cbz	r0, 2da6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    2d82:	ldr	r1, [r0, #0]
    2d84:	ldr	r1, [r1, #60]	; 0x3c
    2d86:	cmp	r1, r2
    2d88:	bne.n	2dd0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5cc>
    2d8a:	ldr	r0, [r0, #16]
    2d8c:	cbz	r0, 2da6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    2d8e:	ldr	r1, [r0, #0]
    2d90:	ldr	r1, [r1, #60]	; 0x3c
    2d92:	cmp	r1, r2
    2d94:	bne.n	2dd0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5cc>
    2d96:	ldr	r0, [r0, #16]
    2d98:	cbz	r0, 2da6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    2d9a:	ldr	r3, [r0, #0]
    2d9c:	ldr	r3, [r3, #60]	; 0x3c
    2d9e:	blx	r3
    2da0:	ldr.w	r3, [r4, #224]	; 0xe0
    2da4:	b.n	2be4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3e0>
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    2da6:	movs	r2, #0
        r.scanned = false;
    2da8:	strb.w	r2, [sp, #301]	; 0x12d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    2dac:	ldr	r1, [r3, #0]
        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    2dae:	str	r2, [sp, #292]	; 0x124
    2db0:	ldr	r1, [r1, #72]	; 0x48
    2db2:	ldr	r2, [pc, #60]	; (2df0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ec>)
    2db4:	cmp	r1, r2
    2db6:	beq.w	2bfe <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3fa>
    2dba:	mov	r0, r3
    2dbc:	blx	r1
    2dbe:	mov	r1, r0
    2dc0:	b.n	2c84 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x480>
    2dc2:	ldr	r1, [pc, #56]	; (2dfc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5f8>)
    2dc4:	b.n	2c84 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x480>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    2dc6:	movs	r2, #0
    2dc8:	add	r0, sp, #288	; 0x120
    2dca:	blx	r3
    2dcc:	b.n	2926 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x122>
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    2dce:	mov	r0, r3
    2dd0:	blx	r1
    2dd2:	ldr.w	r3, [r4, #224]	; 0xe0
    2dd6:	b.n	2be4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3e0>
    2dd8:	str	r3, [sp, #292]	; 0x124
        r.scanned = false;
    2dda:	strb.w	r3, [sp, #301]	; 0x12d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    2dde:	ldr	r1, [pc, #28]	; (2dfc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5f8>)
    2de0:	b.n	2c84 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x480>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2de2:	mov	r0, r7
    2de4:	blx	r3
    2de6:	b.n	2a6e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    2de8:	mov	r0, r7
    2dea:	blx	r3
    2dec:	b.n	29c2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1be>
    2dee:	nop
    2df0:	.word	0x00000519
    2df4:	.word	0x00000501
    2df8:	.word	0x000004f1
    2dfc:	.word	0x00012f70
    2e00:	ldr	r2, [r3, #16]
    2e02:	cmp	r2, #0
    2e04:	beq.w	29aa <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1a6>
    2e08:	ldr	r1, [r2, #0]
    2e0a:	ldr	r1, [r1, #32]
    2e0c:	cmp	r1, r0
    2e0e:	bne.w	2fd8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7d4>
    2e12:	ldr.w	lr, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2e16:	str.w	r9, [r2]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2e1a:	cmp.w	lr, #0
    2e1e:	beq.n	2ed0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6cc>
    2e20:	ldr.w	r1, [lr, #16]
    2e24:	subs	r1, #1
    2e26:	str.w	r1, [lr, #16]
    2e2a:	cmp	r1, #0
    2e2c:	bne.n	2ed0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6cc>
    2e2e:	ldr	r1, [r2, #16]
    2e30:	str	r1, [sp, #0]
    2e32:	cmp	r1, #0
    2e34:	beq.n	2ed0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6cc>
    2e36:	ldr	r1, [sp, #0]
    2e38:	ldr	r1, [r1, #0]
    2e3a:	ldr	r1, [r1, #32]
    2e3c:	cmp	r1, r0
    2e3e:	bne.w	2ff0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7ec>
    2e42:	ldr	r1, [sp, #0]
    2e44:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2e48:	str.w	r9, [r1]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2e4c:	cmp.w	lr, #0
    2e50:	beq.n	2ec0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6bc>
    2e52:	ldr.w	r1, [lr, #16]
    2e56:	subs	r1, #1
    2e58:	str.w	r1, [lr, #16]
    2e5c:	cbnz	r1, 2ec0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6bc>
    2e5e:	ldr	r1, [sp, #0]
    2e60:	ldr.w	ip, [r1, #16]
    2e64:	cmp.w	ip, #0
    2e68:	beq.n	2ec0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6bc>
    2e6a:	ldr.w	r1, [ip]
    2e6e:	ldr	r1, [r1, #32]
    2e70:	cmp	r1, r0
    2e72:	bne.w	300c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x808>
    2e76:	ldr.w	r0, [ip, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2e7a:	str.w	r9, [ip]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2e7e:	cbz	r0, 2eb0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6ac>
    2e80:	ldr	r1, [r0, #16]
    2e82:	add.w	lr, r1, #4294967295
    2e86:	str.w	lr, [r0, #16]
    2e8a:	cmp.w	lr, #0
    2e8e:	bne.n	2eb0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6ac>
    2e90:	ldr.w	r0, [ip, #16]
    2e94:	cbz	r0, 2eb0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6ac>
    2e96:	ldr.w	lr, [r0]
    2e9a:	str.w	ip, [sp, #12]
    2e9e:	str	r2, [sp, #8]
    2ea0:	str	r3, [sp, #4]
    2ea2:	ldr.w	r3, [lr, #32]
    2ea6:	blx	r3
    2ea8:	ldr.w	ip, [sp, #12]
    2eac:	ldr	r2, [sp, #8]
    2eae:	ldr	r3, [sp, #4]
    2eb0:	str	r2, [sp, #8]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    2eb2:	mov	r0, ip
    2eb4:	movs	r1, #20
    2eb6:	str	r3, [sp, #4]
    2eb8:	bl	ddec <operator delete(void*, unsigned int)>
    2ebc:	ldr	r3, [sp, #4]
    2ebe:	ldr	r2, [sp, #8]
    2ec0:	ldr	r0, [sp, #0]
    2ec2:	str	r2, [sp, #8]
    2ec4:	movs	r1, #20
    2ec6:	str	r3, [sp, #4]
    2ec8:	bl	ddec <operator delete(void*, unsigned int)>
    2ecc:	ldr	r3, [sp, #4]
    2ece:	ldr	r2, [sp, #8]
    2ed0:	str	r3, [sp, #0]
    2ed2:	mov	r0, r2
    2ed4:	movs	r1, #20
    2ed6:	bl	ddec <operator delete(void*, unsigned int)>
    2eda:	ldr	r3, [sp, #0]
    2edc:	b.n	29aa <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1a6>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2ede:	ldr	r2, [r3, #16]
    2ee0:	cmp	r2, #0
    2ee2:	beq.w	2a56 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x252>
    2ee6:	ldr	r1, [r2, #0]
    2ee8:	ldr	r1, [r1, #32]
    2eea:	cmp	r1, r0
    2eec:	bne.n	2fce <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7ca>
    2eee:	ldr.w	lr, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2ef2:	str.w	r9, [r2]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2ef6:	cmp.w	lr, #0
    2efa:	beq.n	2fa8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7a4>
    2efc:	ldr.w	r1, [lr, #16]
    2f00:	subs	r1, #1
    2f02:	str.w	r1, [lr, #16]
    2f06:	cmp	r1, #0
    2f08:	bne.n	2fa8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7a4>
    2f0a:	ldr	r1, [r2, #16]
    2f0c:	str	r1, [sp, #0]
    2f0e:	cmp	r1, #0
    2f10:	beq.n	2fa8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7a4>
    2f12:	ldr	r1, [sp, #0]
    2f14:	ldr	r1, [r1, #0]
    2f16:	ldr	r1, [r1, #32]
    2f18:	cmp	r1, r0
    2f1a:	bne.n	2fe2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7de>
    2f1c:	ldr	r1, [sp, #0]
    2f1e:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2f22:	str.w	r9, [r1]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2f26:	cmp.w	lr, #0
    2f2a:	beq.n	2f98 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x794>
    2f2c:	ldr.w	r1, [lr, #16]
    2f30:	subs	r1, #1
    2f32:	str.w	r1, [lr, #16]
    2f36:	cbnz	r1, 2f98 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x794>
    2f38:	ldr	r1, [sp, #0]
    2f3a:	ldr.w	ip, [r1, #16]
    2f3e:	cmp.w	ip, #0
    2f42:	beq.n	2f98 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x794>
    2f44:	ldr.w	r1, [ip]
    2f48:	ldr	r1, [r1, #32]
    2f4a:	cmp	r1, r0
    2f4c:	bne.n	2ffe <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7fa>
    2f4e:	ldr.w	r0, [ip, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2f52:	str.w	r9, [ip]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2f56:	cbz	r0, 2f88 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x784>
    2f58:	ldr	r1, [r0, #16]
    2f5a:	add.w	lr, r1, #4294967295
    2f5e:	str.w	lr, [r0, #16]
    2f62:	cmp.w	lr, #0
    2f66:	bne.n	2f88 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x784>
    2f68:	ldr.w	r0, [ip, #16]
    2f6c:	cbz	r0, 2f88 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x784>
    2f6e:	ldr.w	lr, [r0]
    2f72:	str.w	ip, [sp, #12]
    2f76:	str	r2, [sp, #8]
    2f78:	str	r3, [sp, #4]
    2f7a:	ldr.w	r3, [lr, #32]
    2f7e:	blx	r3
    2f80:	ldr.w	ip, [sp, #12]
    2f84:	ldr	r2, [sp, #8]
    2f86:	ldr	r3, [sp, #4]
    2f88:	str	r2, [sp, #8]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    2f8a:	mov	r0, ip
    2f8c:	movs	r1, #20
    2f8e:	str	r3, [sp, #4]
    2f90:	bl	ddec <operator delete(void*, unsigned int)>
    2f94:	ldr	r3, [sp, #4]
    2f96:	ldr	r2, [sp, #8]
    2f98:	ldr	r0, [sp, #0]
    2f9a:	str	r2, [sp, #8]
    2f9c:	movs	r1, #20
    2f9e:	str	r3, [sp, #4]
    2fa0:	bl	ddec <operator delete(void*, unsigned int)>
    2fa4:	ldr	r3, [sp, #4]
    2fa6:	ldr	r2, [sp, #8]
    2fa8:	str	r3, [sp, #0]
    2faa:	mov	r0, r2
    2fac:	movs	r1, #20
    2fae:	bl	ddec <operator delete(void*, unsigned int)>
    2fb2:	ldr	r3, [sp, #0]
    2fb4:	b.n	2a56 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x252>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2fb6:	mov	r0, sl
    2fb8:	blx	r3
    2fba:	b.n	29ba <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b6>
    2fbc:	mov	r0, sl
    2fbe:	blx	r3
    2fc0:	b.n	2a66 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x262>
    2fc2:	mov	r0, r3
    2fc4:	blx	r2
    2fc6:	b.n	2a5e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x25a>
    2fc8:	mov	r0, r3
    2fca:	blx	r2
    2fcc:	b.n	29b2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ae>
    2fce:	str	r3, [sp, #0]
    2fd0:	mov	r0, r2
    2fd2:	blx	r1
    2fd4:	ldr	r3, [sp, #0]
    2fd6:	b.n	2a56 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x252>
    2fd8:	str	r3, [sp, #0]
    2fda:	mov	r0, r2
    2fdc:	blx	r1
    2fde:	ldr	r3, [sp, #0]
    2fe0:	b.n	29aa <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1a6>
    2fe2:	str	r2, [sp, #8]
    2fe4:	str	r3, [sp, #4]
    2fe6:	ldr	r0, [sp, #0]
    2fe8:	blx	r1
    2fea:	ldr	r2, [sp, #8]
    2fec:	ldr	r3, [sp, #4]
    2fee:	b.n	2fa8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7a4>
    2ff0:	str	r2, [sp, #8]
    2ff2:	str	r3, [sp, #4]
    2ff4:	ldr	r0, [sp, #0]
    2ff6:	blx	r1
    2ff8:	ldr	r2, [sp, #8]
    2ffa:	ldr	r3, [sp, #4]
    2ffc:	b.n	2ed0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6cc>
    2ffe:	str	r2, [sp, #8]
    3000:	str	r3, [sp, #4]
    3002:	mov	r0, ip
    3004:	blx	r1
    3006:	ldr	r2, [sp, #8]
    3008:	ldr	r3, [sp, #4]
    300a:	b.n	2f98 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x794>
    300c:	str	r2, [sp, #8]
    300e:	str	r3, [sp, #4]
    3010:	mov	r0, ip
    3012:	blx	r1
    3014:	ldr	r2, [sp, #8]
    3016:	ldr	r3, [sp, #4]
    3018:	b.n	2ec0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6bc>
    301a:	nop

0000301c <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.9] [clone .constprop.11]>:

    GenerateIndex(store);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    301c:	push	{r4, r5, lr}
  { 
    GenerateIndex(store);
    if (parent) 
    { if (parent == 0xFFFFFFFF) parent = store; // As per initizalization
    301e:	cmp.w	r2, #4294967295
    3022:	ite	ne
    3024:	movne	r5, r2
    3026:	moveq	r5, r1

    GenerateIndex(store);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    3028:	mov	r4, r0
    302a:	sub	sp, #276	; 0x114
  { 
    GenerateIndex(store);
    if (parent) 
    { if (parent == 0xFFFFFFFF) parent = store; // As per initizalization

      ScanDir(store, parent);
    302c:	mov	r2, r5
    302e:	bl	2804 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      follow_sibling_ = true;
    3032:	movs	r3, #1
    3034:	strb.w	r3, [r4, #256]	; 0x100
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    3038:	mov	r2, r5
    303a:	mov	r1, r4
    303c:	mov	r0, sp
    303e:	bl	1c18 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    3042:	ldr	r3, [sp, #4]
    3044:	str.w	r3, [r4, #252]	; 0xfc
    { 
      ScanAll(store);
      follow_sibling_ = false;
      next_ = 1;
    }
  }
    3048:	add	sp, #276	; 0x114
    304a:	pop	{r4, r5, pc}

0000304c <MTPStorage_SD::ScanAll(unsigned long) [clone .part.8] [clone .constprop.12]>:

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
  { if (index_generated) return; 
    304c:	ldrb.w	r3, [r0, #248]	; 0xf8
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t store) 
  { if (all_scanned_) return;
    all_scanned_ = true;
    3050:	movs	r2, #1
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t store) 
    3052:	push	{r4, r5, r6, lr}
    3054:	mov	r5, r0
  { if (all_scanned_) return;
    all_scanned_ = true;
    3056:	strb.w	r2, [r0, #249]	; 0xf9
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t store) 
    305a:	mov	r6, r1

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
  { if (index_generated) return; 
    305c:	cbz	r3, 307c <MTPStorage_SD::ScanAll(unsigned long) [clone .part.8] [clone .constprop.12]+0x30>
  void MTPStorage_SD::ScanAll(uint32_t store) 
  { if (all_scanned_) return;
    all_scanned_ = true;

    GenerateIndex(store);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    305e:	ldr.w	r3, [r5, #244]	; 0xf4
    3062:	cbz	r3, 307a <MTPStorage_SD::ScanAll(unsigned long) [clone .part.8] [clone .constprop.12]+0x2e>
    3064:	movs	r4, #0
    3066:	mov	r2, r4
    3068:	mov	r1, r6
    306a:	mov	r0, r5
    306c:	bl	2804 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
    3070:	ldr.w	r3, [r5, #244]	; 0xf4
    3074:	adds	r4, #1
    3076:	cmp	r3, r4
    3078:	bhi.n	3066 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.8] [clone .constprop.12]+0x1a>
    307a:	pop	{r4, r5, r6, pc}
    307c:	bl	1ba8 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.13]>
    3080:	b.n	305e <MTPStorage_SD::ScanAll(unsigned long) [clone .part.8] [clone .constprop.12]+0x12>
    3082:	nop

00003084 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>:
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
  { 
    3084:	push	{r4, lr}

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
  { if (index_generated) return; 
    3086:	ldrb.w	r3, [r0, #248]	; 0xf8
    GenerateIndex(store);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
  { 
    308a:	sub	sp, #8
    308c:	mov	r4, r0

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
  { if (index_generated) return; 
    308e:	cbz	r3, 30b4 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x30>
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
  { 
    GenerateIndex(store);
    if (parent) 
    3090:	cbz	r2, 309e <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x1a>
    3092:	mov	r0, r4
    { 
      ScanAll(store);
      follow_sibling_ = false;
      next_ = 1;
    }
  }
    3094:	add	sp, #8
    3096:	ldmia.w	sp!, {r4, lr}
    309a:	b.w	301c <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.9] [clone .constprop.11]>
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t store) 
  { if (all_scanned_) return;
    309e:	ldrb.w	r3, [r4, #249]	; 0xf9
    30a2:	cbz	r3, 30c2 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x3e>
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { 
      ScanAll(store);
      follow_sibling_ = false;
    30a4:	movs	r2, #0
      next_ = 1;
    30a6:	movs	r3, #1
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { 
      ScanAll(store);
      follow_sibling_ = false;
    30a8:	strb.w	r2, [r4, #256]	; 0x100
      next_ = 1;
    30ac:	str.w	r3, [r4, #252]	; 0xfc
    }
  }
    30b0:	add	sp, #8
    30b2:	pop	{r4, pc}
    30b4:	stmia.w	sp, {r1, r2}
    30b8:	bl	1ba8 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.13]>
    30bc:	ldmia.w	sp, {r1, r2}
    30c0:	b.n	3090 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0xc>
    30c2:	mov	r0, r4
    30c4:	bl	304c <MTPStorage_SD::ScanAll(unsigned long) [clone .part.8] [clone .constprop.12]>
    30c8:	b.n	30a4 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x20>
    30ca:	nop

000030cc <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]>:
    file_.seek(pos);
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }

  bool MTPStorage_SD::DeleteObject(uint32_t object)
    30cc:	push	{r4, r5, r6, r7, lr}
    30ce:	subw	sp, sp, #2164	; 0x874
    char filename[MAX_FILENAME_LEN];

    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below

    // first create full filename
      ConstructFilename(object, filename, MAX_FILENAME_LEN);
    30d2:	mov.w	r3, #256	; 0x100
    file_.seek(pos);
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }

  bool MTPStorage_SD::DeleteObject(uint32_t object)
    30d6:	mov	r4, r0
    30d8:	mov	r6, r1
    char filename[MAX_FILENAME_LEN];

    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below

    // first create full filename
      ConstructFilename(object, filename, MAX_FILENAME_LEN);
    30da:	add	r2, sp, #272	; 0x110
    30dc:	bl	2078 <MTPStorage_SD::ConstructFilename(int, char*, int)>

    Record r = ReadIndexRecord(object);
    30e0:	mov	r2, r6
    30e2:	mov	r1, r4
    30e4:	add	r0, sp, #528	; 0x210
    30e6:	bl	1c18 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record t = ReadIndexRecord(r.parent);
    30ea:	ldr	r2, [sp, #528]	; 0x210
    30ec:	mov	r1, r4
    30ee:	add	r0, sp, #800	; 0x320
    30f0:	bl	1c18 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record ro = r;
    30f4:	add	r1, sp, #528	; 0x210
    30f6:	mov.w	r2, #272	; 0x110
    30fa:	add.w	r0, sp, #1072	; 0x430
    30fe:	bl	c198 <memcpy>
    Record to = t;
    3102:	add	r1, sp, #800	; 0x320
    3104:	add.w	r0, sp, #1344	; 0x540
    3108:	mov.w	r2, #272	; 0x110
    310c:	bl	c198 <memcpy>
    Record x;
    Record xo;
    uint32_t is=-1;
    if(!r.isdir || (!r.child && r.scanned)) // if file or empty directory
    3110:	ldrb.w	r3, [sp, #540]	; 0x21c
    3114:	cbz	r3, 315a <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0x8e>
    3116:	ldr	r5, [sp, #532]	; 0x214
    3118:	ldrb.w	r3, [sp, #541]	; 0x21d
    311c:	cbz	r5, 3154 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0x88>
           if(is>0)WriteIndexRecord(is, xo);
        }
        return success;
      }
    }
    if(!r.scanned) ScanDir(r.store, object) ; // have no info on directory, so scan it
    311e:	cmp	r3, #0
    3120:	beq.w	325e <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0x192>
    uint32_t ix = r.child;
    while(ix)
    { Record x= ReadIndexRecord(ix);
    3124:	mov	r2, r5
    3126:	mov	r1, r4
    3128:	add.w	r0, sp, #1888	; 0x760
    312c:	bl	1c18 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      DeleteObject(ix);
    3130:	ldr	r3, [r4, #0]
    3132:	mov	r1, r5
    3134:	ldr	r3, [r3, #60]	; 0x3c
    3136:	mov	r0, r4
    3138:	blx	r3
      ix=x.sibling;
    313a:	ldr.w	r5, [sp, #1896]	; 0x768
        return success;
      }
    }
    if(!r.scanned) ScanDir(r.store, object) ; // have no info on directory, so scan it
    uint32_t ix = r.child;
    while(ix)
    313e:	cmp	r5, #0
    3140:	bne.n	3124 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0x58>
    { Record x= ReadIndexRecord(ix);
      DeleteObject(ix);
      ix=x.sibling;
    }
    DeleteObject(object);
    3142:	ldr	r3, [r4, #0]
    3144:	mov	r1, r6
    3146:	ldr	r3, [r3, #60]	; 0x3c
    3148:	mov	r0, r4
    314a:	blx	r3
    return true;
    314c:	movs	r0, #1
  }
    314e:	addw	sp, sp, #2164	; 0x874
    3152:	pop	{r4, r5, r6, r7, pc}
    Record ro = r;
    Record to = t;
    Record x;
    Record xo;
    uint32_t is=-1;
    if(!r.isdir || (!r.child && r.scanned)) // if file or empty directory
    3154:	cmp	r3, #0
    3156:	beq.w	325e <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0x192>
    { //
      { if(t.child==object)
    315a:	ldr	r7, [sp, #804]	; 0x324
    315c:	cmp	r6, r7
    315e:	beq.n	324a <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0x17e>
        }
        else
        { // link junger to older sibling
          // find junger sibling
          is=t.child; // jungest sibling
          x = ReadIndexRecord(is); 
    3160:	mov	r0, sp
    3162:	mov	r2, r7
    3164:	mov	r1, r4
    3166:	bl	1c18 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    316a:	mov	r1, sp
    316c:	add.w	r0, sp, #1616	; 0x650
    3170:	mov.w	r2, #272	; 0x110
    3174:	bl	c198 <memcpy>
          while((is>r.store) && (x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    3178:	ldrh.w	r3, [sp, #542]	; 0x21e
    317c:	cmp	r7, r3
    317e:	bls.w	3288 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0x1bc>
    3182:	ldr.w	r5, [sp, #1624]	; 0x658
    3186:	cmp	r6, r5
    3188:	bne.n	3196 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0xca>
    318a:	b.n	3288 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0x1bc>
    318c:	ldr.w	r3, [sp, #1624]	; 0x658
    3190:	cmp	r6, r3
    3192:	beq.n	31b6 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0xea>
    3194:	mov	r5, r3
    3196:	mov	r2, r5
    3198:	mov	r1, r4
    319a:	mov	r0, sp
    319c:	bl	1c18 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    31a0:	mov.w	r2, #272	; 0x110
    31a4:	mov	r1, sp
    31a6:	add.w	r0, sp, #1616	; 0x650
    31aa:	bl	c198 <memcpy>
    31ae:	ldrh.w	r3, [sp, #542]	; 0x21e
    31b2:	cmp	r3, r5
    31b4:	bcc.n	318c <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0xc0>
          // is points now to junder sibling
          xo=x;
    31b6:	mov.w	r2, #272	; 0x110
    31ba:	add.w	r1, sp, #1616	; 0x650
    31be:	add.w	r0, sp, #1888	; 0x760
    31c2:	bl	c198 <memcpy>
          x.sibling = r.sibling;
    31c6:	ldr	r3, [sp, #536]	; 0x218
    31c8:	str.w	r3, [sp, #1624]	; 0x658
          WriteIndexRecord(is, x);
    31cc:	add.w	r2, sp, #1616	; 0x650
    31d0:	mov	r1, r5
    31d2:	mov	r0, r4
    31d4:	bl	1a4c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        }
        // delete now file
        mtp_lock_storage(true);
        bool success = r.isdir ? sd_rmdir(r.store,filename): sd_remove(r.store,filename);
    31d8:	ldrb.w	r3, [sp, #540]	; 0x21c
    31dc:	cbz	r3, 321a <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0x14e>
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) { return sdx[store]->remove(filename);  }
    bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
    31de:	ldrh.w	r3, [sp, #542]	; 0x21e
    31e2:	add.w	r3, r4, r3, lsl #2
    31e6:	add	r1, sp, #272	; 0x110
    31e8:	ldr	r0, [r3, #88]	; 0x58
    31ea:	ldr	r3, [r0, #0]
    31ec:	ldr	r3, [r3, #20]
    31ee:	blx	r3
    31f0:	mov	r7, r0
        mtp_lock_storage(false);
        if(success)
        { // mark object as deleted
          r.name[0]=0;
          WriteIndexRecord(object, r);
    31f2:	mov	r1, r6
        }
        // delete now file
        mtp_lock_storage(true);
        bool success = r.isdir ? sd_rmdir(r.store,filename): sd_remove(r.store,filename);
        mtp_lock_storage(false);
        if(success)
    31f4:	cbnz	r7, 3234 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0x168>
          r.name[0]=0;
          WriteIndexRecord(object, r);
        }
        else
        { // undo index manipulation
           WriteIndexRecord(object, ro);
    31f6:	add.w	r2, sp, #1072	; 0x430
    31fa:	mov	r0, r4
    31fc:	bl	1a4c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
           WriteIndexRecord(ro.parent, to);
    3200:	add.w	r2, sp, #1344	; 0x540
    3204:	ldr.w	r1, [sp, #1072]	; 0x430
    3208:	mov	r0, r4
    320a:	bl	1a4c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
           if(is>0)WriteIndexRecord(is, xo);
    320e:	cmp	r5, #0
    3210:	bne.n	3274 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0x1a8>
    3212:	mov	r0, r5
      DeleteObject(ix);
      ix=x.sibling;
    }
    DeleteObject(object);
    return true;
  }
    3214:	addw	sp, sp, #2164	; 0x874
    3218:	pop	{r4, r5, r6, r7, pc}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) { return sdx[store]->remove(filename);  }
    321a:	ldrh.w	r3, [sp, #542]	; 0x21e
    321e:	add.w	r3, r4, r3, lsl #2
    3222:	add	r1, sp, #272	; 0x110
    3224:	ldr	r0, [r3, #88]	; 0x58
    3226:	ldr	r3, [r0, #0]
    3228:	ldr	r3, [r3, #16]
    322a:	blx	r3
    322c:	mov	r7, r0
        bool success = r.isdir ? sd_rmdir(r.store,filename): sd_remove(r.store,filename);
        mtp_lock_storage(false);
        if(success)
        { // mark object as deleted
          r.name[0]=0;
          WriteIndexRecord(object, r);
    322e:	mov	r1, r6
        }
        // delete now file
        mtp_lock_storage(true);
        bool success = r.isdir ? sd_rmdir(r.store,filename): sd_remove(r.store,filename);
        mtp_lock_storage(false);
        if(success)
    3230:	cmp	r7, #0
    3232:	beq.n	31f6 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0x12a>
        { // mark object as deleted
          r.name[0]=0;
          WriteIndexRecord(object, r);
    3234:	mov	r0, r4
        mtp_lock_storage(true);
        bool success = r.isdir ? sd_rmdir(r.store,filename): sd_remove(r.store,filename);
        mtp_lock_storage(false);
        if(success)
        { // mark object as deleted
          r.name[0]=0;
    3236:	movs	r3, #0
          WriteIndexRecord(object, r);
    3238:	add	r2, sp, #528	; 0x210
        mtp_lock_storage(true);
        bool success = r.isdir ? sd_rmdir(r.store,filename): sd_remove(r.store,filename);
        mtp_lock_storage(false);
        if(success)
        { // mark object as deleted
          r.name[0]=0;
    323a:	strb.w	r3, [sp, #544]	; 0x220
          WriteIndexRecord(object, r);
    323e:	bl	1a4c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    3242:	movs	r0, #1
      DeleteObject(ix);
      ix=x.sibling;
    }
    DeleteObject(object);
    return true;
  }
    3244:	addw	sp, sp, #2164	; 0x874
    3248:	pop	{r4, r5, r6, r7, pc}
    uint32_t is=-1;
    if(!r.isdir || (!r.child && r.scanned)) // if file or empty directory
    { //
      { if(t.child==object)
        { // we are the jungest, simply relink parent to older sibling
          t.child = r.sibling;
    324a:	ldr	r3, [sp, #536]	; 0x218
          WriteIndexRecord(r.parent, t);
    324c:	ldr	r1, [sp, #528]	; 0x210
    uint32_t is=-1;
    if(!r.isdir || (!r.child && r.scanned)) // if file or empty directory
    { //
      { if(t.child==object)
        { // we are the jungest, simply relink parent to older sibling
          t.child = r.sibling;
    324e:	str	r3, [sp, #804]	; 0x324
          WriteIndexRecord(r.parent, t);
    3250:	add	r2, sp, #800	; 0x320
    3252:	mov	r0, r4
    3254:	bl	1a4c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record t = ReadIndexRecord(r.parent);
    Record ro = r;
    Record to = t;
    Record x;
    Record xo;
    uint32_t is=-1;
    3258:	mov.w	r5, #4294967295
    325c:	b.n	31d8 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0x10c>
           if(is>0)WriteIndexRecord(is, xo);
        }
        return success;
      }
    }
    if(!r.scanned) ScanDir(r.store, object) ; // have no info on directory, so scan it
    325e:	mov	r2, r6
    3260:	ldrh.w	r1, [sp, #542]	; 0x21e
    3264:	mov	r0, r4
    3266:	bl	2804 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
    uint32_t ix = r.child;
    326a:	ldr	r5, [sp, #532]	; 0x214
    while(ix)
    326c:	cmp	r5, #0
    326e:	bne.w	3124 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0x58>
    3272:	b.n	3142 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0x76>
        }
        else
        { // undo index manipulation
           WriteIndexRecord(object, ro);
           WriteIndexRecord(ro.parent, to);
           if(is>0)WriteIndexRecord(is, xo);
    3274:	mov	r0, r4
    3276:	mov	r1, r5
    3278:	add.w	r2, sp, #1888	; 0x760
    327c:	bl	1a4c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    3280:	mov	r0, r7
      DeleteObject(ix);
      ix=x.sibling;
    }
    DeleteObject(object);
    return true;
  }
    3282:	addw	sp, sp, #2164	; 0x874
    3286:	pop	{r4, r5, r6, r7, pc}
        else
        { // link junger to older sibling
          // find junger sibling
          is=t.child; // jungest sibling
          x = ReadIndexRecord(is); 
          while((is>r.store) && (x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    3288:	mov	r5, r7
    328a:	b.n	31b6 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0xea>

0000328c <MTPStorage_SD::DeleteObject(unsigned long)>:

  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    char filename[MAX_FILENAME_LEN];

    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below
    328c:	adds	r3, r1, #1
    328e:	beq.n	3294 <MTPStorage_SD::DeleteObject(unsigned long)+0x8>
    3290:	b.w	30cc <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]>
      DeleteObject(ix);
      ix=x.sibling;
    }
    DeleteObject(object);
    return true;
  }
    3294:	movs	r0, #1
    3296:	bx	lr

00003298 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>:
  WriteIndexRecord(newHandle,p2);
  return true;
}
/************************************** mSD_Base *******************************/
bool mSD_Base::sd_copy(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{
    3298:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    329c:	add.w	r1, r0, r1, lsl #2
    32a0:	mov	r6, r0
    32a2:	ldr	r1, [r1, #84]	; 0x54
    32a4:	ldr	r0, [r1, #0]
    32a6:	subw	sp, sp, #2092	; 0x82c
    32aa:	ldr	r4, [r0, #0]
    32ac:	mov	r7, r3
    32ae:	mov	r0, sp
    32b0:	movs	r3, #0
    32b2:	blx	r4
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    32b4:	ldr	r3, [sp, #16]
    32b6:	cmp	r3, #0
    32b8:	beq.w	36e2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x44a>
    32bc:	ldr	r2, [r3, #0]
    32be:	ldr	r5, [pc, #624]	; (3530 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x298>)
    32c0:	ldr	r2, [r2, #68]	; 0x44
    32c2:	cmp	r2, r5
    32c4:	bne.w	3640 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3a8>
    32c8:	ldr	r0, [r3, #16]
    32ca:	cmp	r0, #0
    32cc:	beq.w	34f0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    32d0:	ldr	r2, [r0, #0]
    32d2:	ldr	r2, [r2, #68]	; 0x44
    32d4:	cmp	r2, r5
    32d6:	bne.w	3642 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    32da:	ldr	r0, [r0, #16]
    32dc:	cmp	r0, #0
    32de:	beq.w	34f0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    32e2:	ldr	r2, [r0, #0]
    32e4:	ldr	r2, [r2, #68]	; 0x44
    32e6:	cmp	r2, r5
    32e8:	bne.w	3642 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    32ec:	ldr	r0, [r0, #16]
    32ee:	cmp	r0, #0
    32f0:	beq.w	34f0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    32f4:	ldr	r2, [r0, #0]
    32f6:	ldr	r2, [r2, #68]	; 0x44
    32f8:	cmp	r2, r5
    32fa:	bne.w	3642 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    32fe:	ldr	r0, [r0, #16]
    3300:	cmp	r0, #0
    3302:	beq.w	34f0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    3306:	ldr	r2, [r0, #0]
    3308:	ldr	r2, [r2, #68]	; 0x44
    330a:	cmp	r2, r5
    330c:	bne.w	3642 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    3310:	ldr	r0, [r0, #16]
    3312:	cmp	r0, #0
    3314:	beq.w	34f0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    3318:	ldr	r2, [r0, #0]
    331a:	ldr	r2, [r2, #68]	; 0x44
    331c:	cmp	r2, r5
    331e:	bne.w	3642 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    3322:	ldr	r0, [r0, #16]
    3324:	cmp	r0, #0
    3326:	beq.w	34f0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    332a:	ldr	r2, [r0, #0]
    332c:	ldr	r2, [r2, #68]	; 0x44
    332e:	cmp	r2, r5
    3330:	bne.w	3642 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    3334:	ldr	r0, [r0, #16]
    3336:	cmp	r0, #0
    3338:	beq.w	34f0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    333c:	ldr	r3, [r0, #0]
    333e:	ldr	r3, [r3, #68]	; 0x44
    3340:	blx	r3
    3342:	mov	r4, r0
  #if DEBUG>1
    Serial.print("From "); Serial.print(store0); Serial.print(": ");Serial.println(oldfilename);
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  File f1 = sd_open(store0,oldfilename,FILE_READ); if(!f1) {DBG_FAIL_MACRO; return false;}
    3344:	cmp	r4, #0
    3346:	beq.w	3b2a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x892>
    334a:	add.w	r6, r6, r7, lsl #2
    334e:	add	r0, sp, #20
    3350:	ldr	r1, [r6, #84]	; 0x54
    3352:	ldr.w	r2, [sp, #2128]	; 0x850
    3356:	ldr	r3, [r1, #0]
    3358:	ldr	r4, [r3, #0]
    335a:	movs	r3, #2
    335c:	blx	r4
    335e:	ldr	r0, [sp, #36]	; 0x24
    3360:	cmp	r0, #0
    3362:	beq.w	3648 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    3366:	ldr	r3, [r0, #0]
    3368:	ldr	r3, [r3, #68]	; 0x44
    336a:	cmp	r3, r5
    336c:	bne.w	3812 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    3370:	ldr	r0, [r0, #16]
    3372:	cmp	r0, #0
    3374:	beq.w	3648 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    3378:	ldr	r3, [r0, #0]
    337a:	ldr	r3, [r3, #68]	; 0x44
    337c:	cmp	r3, r5
    337e:	bne.w	3812 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    3382:	ldr	r0, [r0, #16]
    3384:	cmp	r0, #0
    3386:	beq.w	3648 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    338a:	ldr	r3, [r0, #0]
    338c:	ldr	r3, [r3, #68]	; 0x44
    338e:	cmp	r3, r5
    3390:	bne.w	3812 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    3394:	ldr	r0, [r0, #16]
    3396:	cmp	r0, #0
    3398:	beq.w	3648 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    339c:	ldr	r3, [r0, #0]
    339e:	ldr	r3, [r3, #68]	; 0x44
    33a0:	cmp	r3, r5
    33a2:	bne.w	3812 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    33a6:	ldr	r0, [r0, #16]
    33a8:	cmp	r0, #0
    33aa:	beq.w	3648 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    33ae:	ldr	r3, [r0, #0]
    33b0:	ldr	r3, [r3, #68]	; 0x44
    33b2:	cmp	r3, r5
    33b4:	bne.w	3812 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    33b8:	ldr	r0, [r0, #16]
    33ba:	cmp	r0, #0
    33bc:	beq.w	3648 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    33c0:	ldr	r3, [r0, #0]
    33c2:	ldr	r3, [r3, #68]	; 0x44
    33c4:	cmp	r3, r5
    33c6:	bne.w	3812 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    33ca:	ldr	r0, [r0, #16]
    33cc:	cmp	r0, #0
    33ce:	beq.w	3648 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    33d2:	ldr	r3, [r0, #0]
    33d4:	ldr	r3, [r3, #68]	; 0x44
    33d6:	cmp	r3, r5
    33d8:	bne.w	3812 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    33dc:	ldr	r0, [r0, #16]
    33de:	cmp	r0, #0
    33e0:	beq.w	3648 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    33e4:	ldr	r3, [r0, #0]
    33e6:	ldr	r3, [r3, #68]	; 0x44
    33e8:	cmp	r3, r5
    33ea:	bne.w	3812 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    33ee:	ldr	r0, [r0, #16]
    33f0:	cmp	r0, #0
    33f2:	beq.w	3648 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    33f6:	ldr	r3, [r0, #0]
    33f8:	ldr	r3, [r3, #68]	; 0x44
    33fa:	cmp	r3, r5
    33fc:	bne.w	3812 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    3400:	ldr	r0, [r0, #16]
    3402:	cmp	r0, #0
    3404:	beq.w	3648 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    3408:	ldr	r3, [r0, #0]
    340a:	ldr	r3, [r3, #68]	; 0x44
    340c:	cmp	r3, r5
    340e:	bne.w	3812 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    3412:	ldr	r0, [r0, #16]
    3414:	cmp	r0, #0
    3416:	beq.w	3648 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    341a:	ldr	r3, [r0, #0]
    341c:	ldr	r3, [r3, #68]	; 0x44
    341e:	blx	r3
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    3420:	cmp	r0, #0
    3422:	beq.w	3648 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    3426:	ldr	r5, [pc, #268]	; (3534 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x29c>)
    3428:	mov.w	r4, #4294967295
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	virtual int available() {
		return (f) ? f->available() : 0;
    342c:	ldr	r3, [sp, #16]
    342e:	cmp	r3, #0
    3430:	beq.w	3a2e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    3434:	ldr	r1, [r3, #0]
    3436:	ldr	r2, [r1, #16]
    3438:	cmp	r2, r5
    343a:	bne.w	3a20 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x788>
    343e:	ldr	r2, [r3, #16]
    3440:	cmp	r2, #0
    3442:	beq.w	3a26 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x78e>
    3446:	ldr	r0, [r2, #0]
    3448:	ldr	r6, [r0, #16]
    344a:	cmp	r6, r5
    344c:	bne.w	38c8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x630>
    3450:	ldr	r0, [r2, #16]
    3452:	cmp	r0, #0
    3454:	beq.w	3816 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    3458:	ldr	r6, [r0, #0]
    345a:	ldr	r6, [r6, #16]
    345c:	cmp	r6, r5
    345e:	bne.w	38ca <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    3462:	ldr	r0, [r0, #16]
    3464:	cmp	r0, #0
    3466:	beq.w	3816 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    346a:	ldr	r6, [r0, #0]
    346c:	ldr	r6, [r6, #16]
    346e:	cmp	r6, r5
    3470:	bne.w	38ca <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    3474:	ldr	r0, [r0, #16]
    3476:	cmp	r0, #0
    3478:	beq.w	3816 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    347c:	ldr	r6, [r0, #0]
    347e:	ldr	r6, [r6, #16]
    3480:	cmp	r6, r5
    3482:	bne.w	38ca <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    3486:	ldr	r0, [r0, #16]
    3488:	cmp	r0, #0
    348a:	beq.w	3816 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    348e:	ldr	r6, [r0, #0]
    3490:	ldr	r6, [r6, #16]
    3492:	cmp	r6, r5
    3494:	bne.w	38ca <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    3498:	ldr	r0, [r0, #16]
    349a:	cmp	r0, #0
    349c:	beq.w	3816 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    34a0:	ldr	r6, [r0, #0]
    34a2:	ldr	r6, [r6, #16]
    34a4:	cmp	r6, r5
    34a6:	bne.w	38ca <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    34aa:	ldr	r0, [r0, #16]
    34ac:	cmp	r0, #0
    34ae:	beq.w	3816 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    34b2:	ldr	r6, [r0, #0]
    34b4:	ldr	r6, [r6, #16]
    34b6:	cmp	r6, r5
    34b8:	bne.w	38ca <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    34bc:	ldr	r0, [r0, #16]
    34be:	cmp	r0, #0
    34c0:	beq.w	3816 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    34c4:	ldr	r6, [r0, #0]
    34c6:	ldr	r6, [r6, #16]
    34c8:	cmp	r6, r5
    34ca:	bne.w	38ca <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    34ce:	ldr	r0, [r0, #16]
    34d0:	cmp	r0, #0
    34d2:	beq.w	3816 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    34d6:	ldr	r6, [r0, #0]
    34d8:	ldr	r6, [r6, #16]
    34da:	cmp	r6, r5
    34dc:	bne.w	38ca <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    34e0:	ldr	r0, [r0, #16]
    34e2:	cmp	r0, #0
    34e4:	beq.w	3816 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    34e8:	ldr	r3, [r0, #0]
    34ea:	ldr	r3, [r3, #16]
    34ec:	blx	r3
    34ee:	b.n	38cc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x634>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    34f0:	ldr	r6, [pc, #68]	; (3538 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x2a0>)
    34f2:	str	r6, [sp, #0]
    34f4:	movs	r4, #0
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    34f6:	ldr	r2, [r3, #16]
    34f8:	subs	r2, #1
    34fa:	str	r2, [r3, #16]
    34fc:	cbnz	r2, 3524 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x28c>
    34fe:	ldr	r5, [sp, #16]
    3500:	cbz	r5, 3524 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x28c>
    3502:	ldr	r3, [r5, #0]
    3504:	ldr	r2, [pc, #52]	; (353c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x2a4>)
    3506:	ldr	r3, [r3, #32]
    3508:	cmp	r3, r2
    350a:	bne.w	3abe <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x826>
    350e:	ldr	r1, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3510:	str	r6, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3512:	cbz	r1, 351c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x284>
    3514:	ldr	r3, [r1, #16]
    3516:	subs	r3, #1
    3518:	str	r3, [r1, #16]
    351a:	cbz	r3, 3540 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x2a8>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    351c:	mov	r0, r5
    351e:	movs	r1, #20
    3520:	bl	ddec <operator delete(void*, unsigned int)>
  // close all files
  f1.close();
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}
    3524:	mov	r0, r4
    3526:	addw	sp, sp, #2092	; 0x82c
    352a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    352e:	nop
    3530:	.word	0x0000050d
    3534:	.word	0x00000495
    3538:	.word	0x00012e78
    353c:	.word	0x00000eb1
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3540:	ldr	r7, [r5, #16]
    3542:	cmp	r7, #0
    3544:	beq.n	351c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x284>
    3546:	ldr	r3, [r7, #0]
    3548:	ldr	r3, [r3, #32]
    354a:	cmp	r3, r2
    354c:	bne.w	3ae0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x848>
    3550:	ldr	r1, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3552:	str	r6, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3554:	cmp	r1, #0
    3556:	beq.n	3636 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x39e>
    3558:	ldr	r3, [r1, #16]
    355a:	subs	r3, #1
    355c:	str	r3, [r1, #16]
    355e:	cmp	r3, #0
    3560:	bne.n	3636 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x39e>
    3562:	ldr.w	r8, [r7, #16]
    3566:	cmp.w	r8, #0
    356a:	beq.n	3636 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x39e>
    356c:	ldr.w	r3, [r8]
    3570:	ldr	r3, [r3, #32]
    3572:	cmp	r3, r2
    3574:	bne.w	3b06 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x86e>
    3578:	ldr.w	r1, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    357c:	str.w	r6, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3580:	cmp	r1, #0
    3582:	beq.n	362e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x396>
    3584:	ldr	r3, [r1, #16]
    3586:	subs	r3, #1
    3588:	str	r3, [r1, #16]
    358a:	cmp	r3, #0
    358c:	bne.n	362e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x396>
    358e:	ldr.w	r9, [r8, #16]
    3592:	cmp.w	r9, #0
    3596:	beq.n	362e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x396>
    3598:	ldr.w	r3, [r9]
    359c:	ldr	r3, [r3, #32]
    359e:	cmp	r3, r2
    35a0:	bne.w	3b0c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x874>
    35a4:	ldr.w	r1, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    35a8:	str.w	r6, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    35ac:	cmp	r1, #0
    35ae:	beq.n	3626 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38e>
    35b0:	ldr	r3, [r1, #16]
    35b2:	subs	r3, #1
    35b4:	str	r3, [r1, #16]
    35b6:	cmp	r3, #0
    35b8:	bne.n	3626 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38e>
    35ba:	ldr.w	sl, [r9, #16]
    35be:	cmp.w	sl, #0
    35c2:	beq.n	3626 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38e>
    35c4:	ldr.w	r3, [sl]
    35c8:	ldr	r3, [r3, #32]
    35ca:	cmp	r3, r2
    35cc:	bne.w	3b1e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x886>
    35d0:	ldr.w	r1, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    35d4:	str.w	r6, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    35d8:	cbz	r1, 361e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x386>
    35da:	ldr	r3, [r1, #16]
    35dc:	subs	r3, #1
    35de:	str	r3, [r1, #16]
    35e0:	cbnz	r3, 361e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x386>
    35e2:	ldr.w	fp, [sl, #16]
    35e6:	cmp.w	fp, #0
    35ea:	beq.n	361e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x386>
    35ec:	ldr.w	r3, [fp]
    35f0:	ldr	r3, [r3, #32]
    35f2:	cmp	r3, r2
    35f4:	bne.w	3b24 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x88c>
    35f8:	ldr.w	r2, [fp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    35fc:	str.w	r6, [fp]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3600:	cbz	r2, 3616 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x37e>
    3602:	ldr	r3, [r2, #16]
    3604:	subs	r3, #1
    3606:	str	r3, [r2, #16]
    3608:	cbnz	r3, 3616 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x37e>
    360a:	ldr.w	r0, [fp, #16]
    360e:	cbz	r0, 3616 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x37e>
    3610:	ldr	r3, [r0, #0]
    3612:	ldr	r3, [r3, #32]
    3614:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    3616:	mov	r0, fp
    3618:	movs	r1, #20
    361a:	bl	ddec <operator delete(void*, unsigned int)>
    361e:	mov	r0, sl
    3620:	movs	r1, #20
    3622:	bl	ddec <operator delete(void*, unsigned int)>
    3626:	mov	r0, r9
    3628:	movs	r1, #20
    362a:	bl	ddec <operator delete(void*, unsigned int)>
    362e:	mov	r0, r8
    3630:	movs	r1, #20
    3632:	bl	ddec <operator delete(void*, unsigned int)>
    3636:	mov	r0, r7
    3638:	movs	r1, #20
    363a:	bl	ddec <operator delete(void*, unsigned int)>
    363e:	b.n	351c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x284>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    3640:	mov	r0, r3
    3642:	blx	r2
    3644:	mov	r4, r0
    3646:	b.n	3344 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xac>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    3648:	ldr	r0, [sp, #16]
    364a:	cmp	r0, #0
    364c:	beq.n	36ee <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    364e:	ldr	r3, [r0, #0]
    3650:	ldr	r1, [pc, #616]	; (38bc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x624>)
    3652:	ldr	r3, [r3, #64]	; 0x40
    3654:	cmp	r3, r1
    3656:	bne.w	380a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    365a:	ldr	r0, [r0, #16]
    365c:	cmp	r0, #0
    365e:	beq.n	36ee <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    3660:	ldr	r3, [r0, #0]
    3662:	ldr	r3, [r3, #64]	; 0x40
    3664:	cmp	r3, r1
    3666:	bne.w	380a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    366a:	ldr	r0, [r0, #16]
    366c:	cmp	r0, #0
    366e:	beq.n	36ee <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    3670:	ldr	r3, [r0, #0]
    3672:	ldr	r3, [r3, #64]	; 0x40
    3674:	cmp	r3, r1
    3676:	bne.w	380a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    367a:	ldr	r0, [r0, #16]
    367c:	cmp	r0, #0
    367e:	beq.n	36ee <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    3680:	ldr	r3, [r0, #0]
    3682:	ldr	r3, [r3, #64]	; 0x40
    3684:	cmp	r3, r1
    3686:	bne.w	380a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    368a:	ldr	r0, [r0, #16]
    368c:	cmp	r0, #0
    368e:	beq.n	36ee <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    3690:	ldr	r3, [r0, #0]
    3692:	ldr	r3, [r3, #64]	; 0x40
    3694:	cmp	r3, r1
    3696:	bne.w	380a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    369a:	ldr	r0, [r0, #16]
    369c:	cbz	r0, 36ee <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    369e:	ldr	r3, [r0, #0]
    36a0:	ldr	r3, [r3, #64]	; 0x40
    36a2:	cmp	r3, r1
    36a4:	bne.w	380a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    36a8:	ldr	r0, [r0, #16]
    36aa:	cbz	r0, 36ee <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    36ac:	ldr	r3, [r0, #0]
    36ae:	ldr	r3, [r3, #64]	; 0x40
    36b0:	cmp	r3, r1
    36b2:	bne.w	380a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    36b6:	ldr	r0, [r0, #16]
    36b8:	cbz	r0, 36ee <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    36ba:	ldr	r3, [r0, #0]
    36bc:	ldr	r3, [r3, #64]	; 0x40
    36be:	cmp	r3, r1
    36c0:	bne.w	380a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    36c4:	ldr	r0, [r0, #16]
    36c6:	cbz	r0, 36ee <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    36c8:	ldr	r3, [r0, #0]
    36ca:	ldr	r3, [r3, #64]	; 0x40
    36cc:	cmp	r3, r1
    36ce:	bne.w	380a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    36d2:	ldr	r0, [r0, #16]
    36d4:	cbz	r0, 36ee <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    36d6:	ldr	r3, [r0, #0]
    36d8:	ldr	r3, [r3, #64]	; 0x40
    36da:	blx	r3
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  File f1 = sd_open(store0,oldfilename,FILE_READ); if(!f1) {DBG_FAIL_MACRO; return false;}
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    36dc:	movs	r4, #0
    36de:	ldr	r3, [sp, #36]	; 0x24
    36e0:	b.n	36f2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x45a>
  #if DEBUG>1
    Serial.print("From "); Serial.print(store0); Serial.print(": ");Serial.println(oldfilename);
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  File f1 = sd_open(store0,oldfilename,FILE_READ); if(!f1) {DBG_FAIL_MACRO; return false;}
    36e2:	mov	r4, r3
  // close all files
  f1.close();
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}
    36e4:	mov	r0, r4
    36e6:	addw	sp, sp, #2092	; 0x82c
    36ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    36ee:	ldr	r3, [sp, #36]	; 0x24
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  File f1 = sd_open(store0,oldfilename,FILE_READ); if(!f1) {DBG_FAIL_MACRO; return false;}
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    36f0:	movs	r4, #0
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    36f2:	ldr	r6, [pc, #460]	; (38c0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x628>)
    36f4:	str	r6, [sp, #20]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    36f6:	cmp	r3, #0
    36f8:	beq.w	37fe <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x566>
    36fc:	ldr	r2, [r3, #16]
    36fe:	subs	r2, #1
    3700:	str	r2, [r3, #16]
    3702:	cmp	r2, #0
    3704:	bne.n	37fe <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x566>
    3706:	ldr	r5, [sp, #36]	; 0x24
    3708:	cmp	r5, #0
    370a:	beq.n	37fe <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x566>
    370c:	ldr	r3, [r5, #0]
    370e:	ldr	r2, [pc, #436]	; (38c4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x62c>)
    3710:	ldr	r3, [r3, #32]
    3712:	cmp	r3, r2
    3714:	bne.w	3ae6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x84e>
    3718:	ldr	r1, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    371a:	str	r6, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    371c:	cmp	r1, #0
    371e:	beq.n	37f6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x55e>
    3720:	ldr	r3, [r1, #16]
    3722:	subs	r3, #1
    3724:	str	r3, [r1, #16]
    3726:	cmp	r3, #0
    3728:	bne.n	37f6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x55e>
    372a:	ldr	r7, [r5, #16]
    372c:	cmp	r7, #0
    372e:	beq.n	37f6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x55e>
    3730:	ldr	r3, [r7, #0]
    3732:	ldr	r3, [r3, #32]
    3734:	cmp	r3, r2
    3736:	bne.w	3b00 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x868>
    373a:	ldr	r1, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    373c:	str	r6, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    373e:	cmp	r1, #0
    3740:	beq.n	37ee <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x556>
    3742:	ldr	r3, [r1, #16]
    3744:	subs	r3, #1
    3746:	str	r3, [r1, #16]
    3748:	cmp	r3, #0
    374a:	bne.n	37ee <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x556>
    374c:	ldr.w	r8, [r7, #16]
    3750:	cmp.w	r8, #0
    3754:	beq.n	37ee <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x556>
    3756:	ldr.w	r3, [r8]
    375a:	ldr	r3, [r3, #32]
    375c:	cmp	r3, r2
    375e:	bne.w	3b12 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x87a>
    3762:	ldr.w	r1, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3766:	str.w	r6, [r8]
    376a:	ldr	r0, [pc, #340]	; (38c0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x628>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    376c:	cmp	r1, #0
    376e:	beq.n	37e6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x54e>
    3770:	ldr	r3, [r1, #16]
    3772:	subs	r3, #1
    3774:	str	r3, [r1, #16]
    3776:	cmp	r3, #0
    3778:	bne.n	37e6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x54e>
    377a:	ldr.w	r9, [r8, #16]
    377e:	cmp.w	r9, #0
    3782:	beq.n	37e6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x54e>
    3784:	ldr.w	r3, [r9]
    3788:	ldr	r3, [r3, #32]
    378a:	cmp	r3, r2
    378c:	bne.w	3b18 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x880>
    3790:	ldr.w	r1, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3794:	str.w	r0, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3798:	cbz	r1, 37de <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x546>
    379a:	ldr	r3, [r1, #16]
    379c:	subs	r3, #1
    379e:	str	r3, [r1, #16]
    37a0:	cbnz	r3, 37de <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x546>
    37a2:	ldr.w	sl, [r9, #16]
    37a6:	cmp.w	sl, #0
    37aa:	beq.n	37de <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x546>
    37ac:	ldr.w	r3, [sl]
    37b0:	ldr	r3, [r3, #32]
    37b2:	cmp	r3, r2
    37b4:	bne.w	3b34 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x89c>
    37b8:	ldr.w	r2, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    37bc:	str.w	r6, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    37c0:	cbz	r2, 37d6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x53e>
    37c2:	ldr	r3, [r2, #16]
    37c4:	subs	r3, #1
    37c6:	str	r3, [r2, #16]
    37c8:	cbnz	r3, 37d6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x53e>
    37ca:	ldr.w	r0, [sl, #16]
    37ce:	cbz	r0, 37d6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x53e>
    37d0:	ldr	r3, [r0, #0]
    37d2:	ldr	r3, [r3, #32]
    37d4:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    37d6:	mov	r0, sl
    37d8:	movs	r1, #20
    37da:	bl	ddec <operator delete(void*, unsigned int)>
    37de:	mov	r0, r9
    37e0:	movs	r1, #20
    37e2:	bl	ddec <operator delete(void*, unsigned int)>
    37e6:	mov	r0, r8
    37e8:	movs	r1, #20
    37ea:	bl	ddec <operator delete(void*, unsigned int)>
    37ee:	mov	r0, r7
    37f0:	movs	r1, #20
    37f2:	bl	ddec <operator delete(void*, unsigned int)>
    37f6:	mov	r0, r5
    37f8:	movs	r1, #20
    37fa:	bl	ddec <operator delete(void*, unsigned int)>
    37fe:	ldr	r3, [sp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3800:	str	r6, [sp, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3802:	cmp	r3, #0
    3804:	bne.w	34f6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x25e>
    3808:	b.n	3524 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x28c>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    380a:	blx	r3
    380c:	movs	r4, #0
    380e:	ldr	r3, [sp, #36]	; 0x24
    3810:	b.n	36f2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x45a>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    3812:	blx	r3
    3814:	b.n	3420 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x188>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    3816:	ldr	r5, [r1, #64]	; 0x40
    3818:	ldr	r1, [pc, #160]	; (38bc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x624>)
    381a:	cmp	r5, r1
    381c:	bne.w	3aec <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x854>
    3820:	mov	r0, r2
    3822:	ldr	r3, [r0, #0]
    3824:	ldr	r3, [r3, #64]	; 0x40
    3826:	cmp	r3, r1
    3828:	bne.w	3adc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    382c:	ldr	r0, [r0, #16]
    382e:	cmp	r0, #0
    3830:	beq.w	3a2e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    3834:	ldr	r3, [r0, #0]
    3836:	ldr	r3, [r3, #64]	; 0x40
    3838:	cmp	r3, r1
    383a:	bne.w	3adc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    383e:	ldr	r0, [r0, #16]
    3840:	cmp	r0, #0
    3842:	beq.w	3a2e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    3846:	ldr	r3, [r0, #0]
    3848:	ldr	r3, [r3, #64]	; 0x40
    384a:	cmp	r3, r1
    384c:	bne.w	3adc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    3850:	ldr	r0, [r0, #16]
    3852:	cmp	r0, #0
    3854:	beq.w	3a2e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    3858:	ldr	r3, [r0, #0]
    385a:	ldr	r3, [r3, #64]	; 0x40
    385c:	cmp	r3, r1
    385e:	bne.w	3adc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    3862:	ldr	r0, [r0, #16]
    3864:	cmp	r0, #0
    3866:	beq.w	3a2e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    386a:	ldr	r3, [r0, #0]
    386c:	ldr	r3, [r3, #64]	; 0x40
    386e:	cmp	r3, r1
    3870:	bne.w	3adc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    3874:	ldr	r0, [r0, #16]
    3876:	cmp	r0, #0
    3878:	beq.w	3a2e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    387c:	ldr	r3, [r0, #0]
    387e:	ldr	r3, [r3, #64]	; 0x40
    3880:	cmp	r3, r1
    3882:	bne.w	3adc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    3886:	ldr	r0, [r0, #16]
    3888:	cmp	r0, #0
    388a:	beq.w	3a2e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    388e:	ldr	r3, [r0, #0]
    3890:	ldr	r3, [r3, #64]	; 0x40
    3892:	cmp	r3, r1
    3894:	bne.w	3adc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    3898:	ldr	r0, [r0, #16]
    389a:	cmp	r0, #0
    389c:	beq.w	3a2e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    38a0:	ldr	r3, [r0, #0]
    38a2:	ldr	r3, [r3, #64]	; 0x40
    38a4:	cmp	r3, r1
    38a6:	bne.w	3adc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    38aa:	ldr	r0, [r0, #16]
    38ac:	cmp	r0, #0
    38ae:	beq.w	3a2e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    38b2:	ldr	r3, [r0, #0]
    38b4:	ldr	r3, [r3, #64]	; 0x40
    38b6:	blx	r3
    38b8:	b.n	3a2e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    38ba:	nop
    38bc:	.word	0x00000501
    38c0:	.word	0x00012e78
    38c4:	.word	0x00000eb1
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	virtual int available() {
		return (f) ? f->available() : 0;
    38c8:	mov	r0, r2
    38ca:	blx	r6

  while(f1.available()>0)
    38cc:	cmp	r0, #0
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    38ce:	ldr	r3, [sp, #16]
    38d0:	ble.n	397c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6e4>
    38d2:	cmp	r3, #0
    38d4:	beq.n	3984 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    38d6:	ldr	r1, [r3, #0]
    38d8:	ldr	r2, [pc, #536]	; (3af4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x85c>)
    38da:	ldr	r4, [r1, #40]	; 0x28
    38dc:	cmp	r4, r2
    38de:	bne.n	395e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c6>
    38e0:	ldr	r0, [r3, #16]
    38e2:	cmp	r0, #0
    38e4:	beq.n	3984 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    38e6:	ldr	r1, [r0, #0]
    38e8:	ldr	r4, [r1, #40]	; 0x28
    38ea:	cmp	r4, r2
    38ec:	bne.n	3960 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    38ee:	ldr	r0, [r0, #16]
    38f0:	cmp	r0, #0
    38f2:	beq.n	3984 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    38f4:	ldr	r1, [r0, #0]
    38f6:	ldr	r4, [r1, #40]	; 0x28
    38f8:	cmp	r4, r2
    38fa:	bne.n	3960 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    38fc:	ldr	r0, [r0, #16]
    38fe:	cmp	r0, #0
    3900:	beq.n	3984 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    3902:	ldr	r1, [r0, #0]
    3904:	ldr	r4, [r1, #40]	; 0x28
    3906:	cmp	r4, r2
    3908:	bne.n	3960 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    390a:	ldr	r0, [r0, #16]
    390c:	cmp	r0, #0
    390e:	beq.n	3984 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    3910:	ldr	r1, [r0, #0]
    3912:	ldr	r4, [r1, #40]	; 0x28
    3914:	cmp	r4, r2
    3916:	bne.n	3960 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    3918:	ldr	r0, [r0, #16]
    391a:	cmp	r0, #0
    391c:	beq.n	3984 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    391e:	ldr	r1, [r0, #0]
    3920:	ldr	r4, [r1, #40]	; 0x28
    3922:	cmp	r4, r2
    3924:	bne.n	3960 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    3926:	ldr	r0, [r0, #16]
    3928:	cbz	r0, 3984 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    392a:	ldr	r1, [r0, #0]
    392c:	ldr	r4, [r1, #40]	; 0x28
    392e:	cmp	r4, r2
    3930:	bne.n	3960 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    3932:	ldr	r0, [r0, #16]
    3934:	cbz	r0, 3984 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    3936:	ldr	r1, [r0, #0]
    3938:	ldr	r4, [r1, #40]	; 0x28
    393a:	cmp	r4, r2
    393c:	bne.n	3960 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    393e:	ldr	r0, [r0, #16]
    3940:	cbz	r0, 3984 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    3942:	ldr	r1, [r0, #0]
    3944:	ldr	r4, [r1, #40]	; 0x28
    3946:	cmp	r4, r2
    3948:	bne.n	3960 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    394a:	ldr	r0, [r0, #16]
    394c:	cbz	r0, 3984 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    394e:	ldr	r3, [r0, #0]
    3950:	mov.w	r2, #2048	; 0x800
    3954:	ldr	r3, [r3, #40]	; 0x28
    3956:	add	r1, sp, #40	; 0x28
    3958:	blx	r3
    395a:	mov	r2, r0
    395c:	b.n	396a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6d2>
    395e:	mov	r0, r3
    3960:	mov.w	r2, #2048	; 0x800
    3964:	add	r1, sp, #40	; 0x28
    3966:	blx	r4
    3968:	mov	r2, r0
  {
    nd=f1.read(buffer,nbuf);
    if(nd<0) break;     // read error
    396a:	subs	r4, r2, #0
    396c:	blt.n	397a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6e2>
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    396e:	ldr	r0, [sp, #36]	; 0x24
    3970:	cbnz	r0, 3990 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6f8>
    f2.write(buffer,nd);
    if(nd<nbuf) break;  // end of file
    3972:	cmp.w	r4, #2048	; 0x800
    3976:	bge.w	342c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x194>
    397a:	ldr	r3, [sp, #16]
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    397c:	cmp	r3, #0
    397e:	bne.w	3aca <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x832>
    3982:	b.n	3a2e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    3984:	ldr	r0, [sp, #36]	; 0x24
    3986:	cmp	r0, #0
    3988:	beq.w	3ac4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x82c>
    398c:	movs	r2, #0
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}

  while(f1.available()>0)
  {
    nd=f1.read(buffer,nbuf);
    398e:	mov	r4, r2
    3990:	ldr	r1, [r0, #0]
    3992:	ldr	r3, [pc, #356]	; (3af8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x860>)
    3994:	ldr	r6, [r1, #44]	; 0x2c
    3996:	cmp	r6, r3
    3998:	bne.n	3a1a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    399a:	ldr	r0, [r0, #16]
    399c:	cmp	r0, #0
    399e:	beq.n	3972 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    39a0:	ldr	r1, [r0, #0]
    39a2:	ldr	r6, [r1, #44]	; 0x2c
    39a4:	cmp	r6, r3
    39a6:	bne.n	3a1a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    39a8:	ldr	r0, [r0, #16]
    39aa:	cmp	r0, #0
    39ac:	beq.n	3972 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    39ae:	ldr	r1, [r0, #0]
    39b0:	ldr	r6, [r1, #44]	; 0x2c
    39b2:	cmp	r6, r3
    39b4:	bne.n	3a1a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    39b6:	ldr	r0, [r0, #16]
    39b8:	cmp	r0, #0
    39ba:	beq.n	3972 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    39bc:	ldr	r1, [r0, #0]
    39be:	ldr	r6, [r1, #44]	; 0x2c
    39c0:	cmp	r6, r3
    39c2:	bne.n	3a1a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    39c4:	ldr	r0, [r0, #16]
    39c6:	cmp	r0, #0
    39c8:	beq.n	3972 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    39ca:	ldr	r1, [r0, #0]
    39cc:	ldr	r6, [r1, #44]	; 0x2c
    39ce:	cmp	r6, r3
    39d0:	bne.n	3a1a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    39d2:	ldr	r0, [r0, #16]
    39d4:	cmp	r0, #0
    39d6:	beq.n	3972 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    39d8:	ldr	r1, [r0, #0]
    39da:	ldr	r6, [r1, #44]	; 0x2c
    39dc:	cmp	r6, r3
    39de:	bne.n	3a1a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    39e0:	ldr	r0, [r0, #16]
    39e2:	cmp	r0, #0
    39e4:	beq.n	3972 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    39e6:	ldr	r1, [r0, #0]
    39e8:	ldr	r6, [r1, #44]	; 0x2c
    39ea:	cmp	r6, r3
    39ec:	bne.n	3a1a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    39ee:	ldr	r0, [r0, #16]
    39f0:	cmp	r0, #0
    39f2:	beq.n	3972 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    39f4:	ldr	r1, [r0, #0]
    39f6:	ldr	r6, [r1, #44]	; 0x2c
    39f8:	cmp	r6, r3
    39fa:	bne.n	3a1a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    39fc:	ldr	r0, [r0, #16]
    39fe:	cmp	r0, #0
    3a00:	beq.n	3972 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    3a02:	ldr	r1, [r0, #0]
    3a04:	ldr	r6, [r1, #44]	; 0x2c
    3a06:	cmp	r6, r3
    3a08:	bne.n	3a1a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    3a0a:	ldr	r0, [r0, #16]
    3a0c:	cmp	r0, #0
    3a0e:	beq.n	3972 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    3a10:	ldr	r3, [r0, #0]
    3a12:	add	r1, sp, #40	; 0x28
    3a14:	ldr	r3, [r3, #44]	; 0x2c
    3a16:	blx	r3
    3a18:	b.n	3972 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    3a1a:	add	r1, sp, #40	; 0x28
    3a1c:	blx	r6
    3a1e:	b.n	3972 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
	}
	virtual int available() {
		return (f) ? f->available() : 0;
    3a20:	mov	r0, r3
    3a22:	blx	r2
    3a24:	b.n	38cc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x634>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    3a26:	ldr	r5, [r1, #64]	; 0x40
    3a28:	ldr	r2, [pc, #208]	; (3afc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x864>)
    3a2a:	cmp	r5, r2
    3a2c:	bne.n	3aec <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x854>
    3a2e:	ldr	r3, [sp, #36]	; 0x24
    3a30:	cmp	r3, #0
    3a32:	beq.n	3ab8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    3a34:	ldr	r2, [r3, #0]
    3a36:	ldr	r1, [pc, #196]	; (3afc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x864>)
    3a38:	ldr	r2, [r2, #64]	; 0x40
    3a3a:	cmp	r2, r1
    3a3c:	bne.n	3ab2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81a>
    3a3e:	ldr	r0, [r3, #16]
    3a40:	cmp	r0, #0
    3a42:	beq.n	3ab8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    3a44:	ldr	r2, [r0, #0]
    3a46:	ldr	r2, [r2, #64]	; 0x40
    3a48:	cmp	r2, r1
    3a4a:	bne.n	3ab4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    3a4c:	ldr	r0, [r0, #16]
    3a4e:	cmp	r0, #0
    3a50:	beq.n	3ab8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    3a52:	ldr	r2, [r0, #0]
    3a54:	ldr	r2, [r2, #64]	; 0x40
    3a56:	cmp	r2, r1
    3a58:	bne.n	3ab4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    3a5a:	ldr	r0, [r0, #16]
    3a5c:	cmp	r0, #0
    3a5e:	beq.n	3ab8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    3a60:	ldr	r2, [r0, #0]
    3a62:	ldr	r2, [r2, #64]	; 0x40
    3a64:	cmp	r2, r1
    3a66:	bne.n	3ab4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    3a68:	ldr	r0, [r0, #16]
    3a6a:	cbz	r0, 3ab8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    3a6c:	ldr	r2, [r0, #0]
    3a6e:	ldr	r2, [r2, #64]	; 0x40
    3a70:	cmp	r2, r1
    3a72:	bne.n	3ab4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    3a74:	ldr	r0, [r0, #16]
    3a76:	cbz	r0, 3ab8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    3a78:	ldr	r2, [r0, #0]
    3a7a:	ldr	r2, [r2, #64]	; 0x40
    3a7c:	cmp	r2, r1
    3a7e:	bne.n	3ab4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    3a80:	ldr	r0, [r0, #16]
    3a82:	cbz	r0, 3ab8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    3a84:	ldr	r2, [r0, #0]
    3a86:	ldr	r2, [r2, #64]	; 0x40
    3a88:	cmp	r2, r1
    3a8a:	bne.n	3ab4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    3a8c:	ldr	r0, [r0, #16]
    3a8e:	cbz	r0, 3ab8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    3a90:	ldr	r2, [r0, #0]
    3a92:	ldr	r2, [r2, #64]	; 0x40
    3a94:	cmp	r2, r1
    3a96:	bne.n	3ab4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    3a98:	ldr	r0, [r0, #16]
    3a9a:	cbz	r0, 3ab8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    3a9c:	ldr	r2, [r0, #0]
    3a9e:	ldr	r2, [r2, #64]	; 0x40
    3aa0:	cmp	r2, r1
    3aa2:	bne.n	3ab4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    3aa4:	ldr	r0, [r0, #16]
    3aa6:	cbz	r0, 3ab8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    3aa8:	ldr	r3, [r0, #0]
    3aaa:	ldr	r3, [r3, #64]	; 0x40
    3aac:	blx	r3
    3aae:	ldr	r3, [sp, #36]	; 0x24
    3ab0:	b.n	3ab8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    3ab2:	mov	r0, r3
    3ab4:	blx	r2
    3ab6:	ldr	r3, [sp, #36]	; 0x24
    if(nd<nbuf) break;  // end of file
  }
  // close all files
  f1.close();
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
    3ab8:	mvns	r4, r4
    3aba:	lsrs	r4, r4, #31
    3abc:	b.n	36f2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x45a>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3abe:	mov	r0, r5
    3ac0:	blx	r3
    3ac2:	b.n	3524 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x28c>
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}

  while(f1.available()>0)
  {
    nd=f1.read(buffer,nbuf);
    3ac4:	mov	r4, r0
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    3ac6:	cmp	r3, #0
    3ac8:	beq.n	3b30 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x898>
    3aca:	ldr	r2, [r3, #0]
    3acc:	ldr	r1, [pc, #44]	; (3afc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x864>)
    3ace:	ldr	r5, [r2, #64]	; 0x40
    3ad0:	cmp	r5, r1
    3ad2:	bne.n	3aec <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x854>
    3ad4:	ldr	r0, [r3, #16]
    3ad6:	cmp	r0, #0
    3ad8:	beq.n	3a2e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    3ada:	b.n	3822 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x58a>
    3adc:	blx	r3
    3ade:	b.n	3a2e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3ae0:	mov	r0, r7
    3ae2:	blx	r3
    3ae4:	b.n	351c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x284>
    3ae6:	mov	r0, r5
    3ae8:	blx	r3
    3aea:	b.n	37fe <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x566>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    3aec:	mov	r0, r3
    3aee:	blx	r5
    3af0:	b.n	3a2e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    3af2:	nop
    3af4:	.word	0x0000047d
    3af8:	.word	0x00000489
    3afc:	.word	0x00000501
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3b00:	mov	r0, r7
    3b02:	blx	r3
    3b04:	b.n	37f6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x55e>
    3b06:	mov	r0, r8
    3b08:	blx	r3
    3b0a:	b.n	3636 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x39e>
    3b0c:	mov	r0, r9
    3b0e:	blx	r3
    3b10:	b.n	362e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x396>
    3b12:	mov	r0, r8
    3b14:	blx	r3
    3b16:	b.n	37ee <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x556>
    3b18:	mov	r0, r9
    3b1a:	blx	r3
    3b1c:	b.n	37e6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x54e>
    3b1e:	mov	r0, sl
    3b20:	blx	r3
    3b22:	b.n	3626 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38e>
    3b24:	mov	r0, fp
    3b26:	blx	r3
    3b28:	b.n	361e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x386>
    3b2a:	ldr	r3, [sp, #16]
    3b2c:	ldr	r6, [pc, #12]	; (3b3c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x8a4>)
    3b2e:	b.n	3800 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x568>
    3b30:	mov	r4, r3
    3b32:	b.n	3ab8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    3b34:	mov	r0, sl
    3b36:	blx	r3
    3b38:	b.n	37de <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x546>
    3b3a:	nop
    3b3c:	.word	0x00012e78

00003b40 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)>:
    WriteIndexRecord(newParent,p2o);      
    return false;
  }

  uint32_t MTPStorage_SD::copy(uint32_t handle, uint32_t newStore, uint32_t newParent ) 
  { 
    3b40:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b44:	mov	r8, r1
    3b46:	sub.w	sp, sp, #1336	; 0x538
    if(newParent==0xFFFFFFFFUL) newParent=newStore;
    3b4a:	cmp.w	r3, #4294967295
    3b4e:	ite	ne
    3b50:	movne	r7, r3
    3b52:	moveq	r7, r2

    Record p1 = ReadIndexRecord(handle);
    3b54:	mov	r1, r0
    WriteIndexRecord(newParent,p2o);      
    return false;
  }

  uint32_t MTPStorage_SD::copy(uint32_t handle, uint32_t newStore, uint32_t newParent ) 
  { 
    3b56:	mov	r4, r0
    if(newParent==0xFFFFFFFFUL) newParent=newStore;

    Record p1 = ReadIndexRecord(handle);
    3b58:	mov	r2, r8
    3b5a:	add	r0, sp, #520	; 0x208
    3b5c:	bl	1c18 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    3b60:	mov	r2, r7
    3b62:	mov	r1, r4
    3b64:	add	r0, sp, #792	; 0x318
    3b66:	bl	1c18 <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    uint32_t newHandle;
    if(p1.isdir)
    3b6a:	ldrb.w	r6, [sp, #532]	; 0x214
    3b6e:	cmp	r6, #0
    3b70:	bne.n	3bf8 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0xb8>
      CopyFiles(handle, p2.store, newHandle);
    }
    else
    {  
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
    3b72:	add	r1, sp, #536	; 0x218
    3b74:	mov.w	r2, #256	; 0x100
    3b78:	add.w	r0, sp, #1080	; 0x438
    3b7c:	bl	f8e4 <strlcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    3b80:	ldr.w	r5, [r4, #244]	; 0xf4
    }
    else
    {  
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
      r.store = p2.store;
    3b84:	ldrh.w	r0, [sp, #806]	; 0x326
      r.parent = newParent;
      r.child = 0;
      r.sibling = p2.child;
    3b88:	ldr	r3, [sp, #796]	; 0x31c
    }
    else
    {  
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
      r.store = p2.store;
    3b8a:	strh.w	r0, [sp, #1078]	; 0x436
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    3b8e:	adds	r2, r5, #1
    3b90:	str.w	r2, [r4, #244]	; 0xf4
    WriteIndexRecord(new_record, r);
    3b94:	mov	r1, r5
    3b96:	add.w	r2, sp, #1064	; 0x428
    3b9a:	mov	r0, r4
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
      r.store = p2.store;
      r.parent = newParent;
      r.child = 0;
      r.sibling = p2.child;
    3b9c:	str.w	r3, [sp, #1072]	; 0x430
    else
    {  
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
      r.store = p2.store;
      r.parent = newParent;
    3ba0:	str.w	r7, [sp, #1064]	; 0x428
      r.child = 0;
    3ba4:	str.w	r6, [sp, #1068]	; 0x42c
      r.sibling = p2.child;
      r.isdir = 0;
    3ba8:	strb.w	r6, [sp, #1076]	; 0x434
      r.scanned = 0;
    3bac:	strb.w	r6, [sp, #1077]	; 0x435
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    3bb0:	bl	1a4c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      r.child = 0;
      r.sibling = p2.child;
      r.isdir = 0;
      r.scanned = 0;
      newHandle = p2.child = AppendIndexRecord(r);
      WriteIndexRecord(newParent, p2);
    3bb4:	add	r2, sp, #792	; 0x318
    3bb6:	mov	r1, r7
    3bb8:	mov	r0, r4
      r.parent = newParent;
      r.child = 0;
      r.sibling = p2.child;
      r.isdir = 0;
      r.scanned = 0;
      newHandle = p2.child = AppendIndexRecord(r);
    3bba:	str	r5, [sp, #796]	; 0x31c
      WriteIndexRecord(newParent, p2);
    3bbc:	bl	1a4c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

      char oldfilename[MAX_FILENAME_LEN];
      char newfilename[MAX_FILENAME_LEN];
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    3bc0:	mov	r1, r8
    3bc2:	add	r2, sp, #8
    3bc4:	mov.w	r3, #256	; 0x100
    3bc8:	mov	r0, r4
    3bca:	bl	2078 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    3bce:	add	r6, sp, #264	; 0x108
      newHandle = p2.child = AppendIndexRecord(r);
      WriteIndexRecord(newParent, p2);

      char oldfilename[MAX_FILENAME_LEN];
      char newfilename[MAX_FILENAME_LEN];
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    3bd0:	mov	r7, r0
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    3bd2:	mov	r1, r5
    3bd4:	mov	r2, r6
    3bd6:	mov.w	r3, #256	; 0x100
    3bda:	mov	r0, r4
    3bdc:	bl	2078 <MTPStorage_SD::ConstructFilename(int, char*, int)>

      sd_copy(store0,oldfilename,store1,newfilename);
    3be0:	str	r6, [sp, #0]
    3be2:	mov	r3, r0
    3be4:	add	r2, sp, #8
    3be6:	mov	r1, r7
    3be8:	adds	r0, r4, #4
    3bea:	bl	3298 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    }

    return newHandle;
  }
    3bee:	mov	r0, r5
    3bf0:	add.w	sp, sp, #1336	; 0x538
    3bf4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Record p2 = ReadIndexRecord(newParent);

    uint32_t newHandle;
    if(p1.isdir)
    {
      ScanDir(p1.store+1,handle);
    3bf8:	ldrh.w	r1, [sp, #534]	; 0x216
    3bfc:	mov	r2, r8
    3bfe:	mov	r0, r4
    3c00:	adds	r1, #1
    3c02:	bl	2804 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    3c06:	ldrb.w	r3, [sp, #532]	; 0x214
    3c0a:	ldr	r0, [r4, #0]
    3c0c:	ldrh.w	r1, [sp, #806]	; 0x326
    3c10:	add	r2, sp, #536	; 0x218
    3c12:	adds	r3, #0
    3c14:	str	r2, [sp, #0]
    3c16:	it	ne
    3c18:	movne	r3, #1
    3c1a:	mov	r2, r7
    3c1c:	ldr	r5, [r0, #44]	; 0x2c
    3c1e:	mov	r0, r4
    3c20:	blx	r5
      CopyFiles(handle, p2.store, newHandle);
    3c22:	ldr	r3, [r4, #0]
    3c24:	ldrh.w	r2, [sp, #806]	; 0x326
    3c28:	ldr	r6, [r3, #84]	; 0x54

    uint32_t newHandle;
    if(p1.isdir)
    {
      ScanDir(p1.store+1,handle);
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    3c2a:	mov	r5, r0
      CopyFiles(handle, p2.store, newHandle);
    3c2c:	mov	r3, r0
    3c2e:	mov	r1, r8
    3c30:	mov	r0, r4
    3c32:	blx	r6

      sd_copy(store0,oldfilename,store1,newfilename);
    }

    return newHandle;
  }
    3c34:	mov	r0, r5
    3c36:	add.w	sp, sp, #1336	; 0x538
    3c3a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3c3e:	nop

00003c40 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)>:

bool MTPStorage_SD::CopyFiles(uint32_t handle, uint32_t store, uint32_t newHandle)
{ // assume handle and newHandle point to existing directories
    3c40:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c44:	mov	r4, r0
    3c46:	subw	sp, sp, #1612	; 0x64c
  if(newHandle==0xFFFFFFFFUL) newHandle=store;
    3c4a:	cmp.w	r3, #4294967295
    3c4e:	ite	ne
    3c50:	movne	r8, r3
    3c52:	moveq	r8, r2
  #if DEBUG>1
    Serial.printf("%d -> %d\n",handle,newHandle);
  #endif

  Record p1=ReadIndexRecord(handle);
    3c54:	add	r0, sp, #520	; 0x208
    3c56:	mov	r2, r1
    3c58:	mov	r1, r4
    3c5a:	bl	1c18 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  Record p2=ReadIndexRecord(newHandle);
    3c5e:	mov	r2, r8
    3c60:	mov	r1, r4
    3c62:	add	r0, sp, #792	; 0x318
  if(newHandle==0xFFFFFFFFUL) newHandle=store;
  #if DEBUG>1
    Serial.printf("%d -> %d\n",handle,newHandle);
  #endif

  Record p1=ReadIndexRecord(handle);
    3c64:	ldrh.w	r9, [sp, #534]	; 0x216
  Record p2=ReadIndexRecord(newHandle);
    3c68:	bl	1c18 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  uint32_t ix= p1.child;
    3c6c:	ldr	r6, [sp, #524]	; 0x20c
  uint32_t iy= 0;
  while(ix)
    3c6e:	cmp	r6, #0
    3c70:	beq.n	3d46 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x106>
    3c72:	movs	r5, #0
    3c74:	add	r7, sp, #264	; 0x108

      ScanDir(p1.store,ix); 
      CopyFiles(ix,p2.store,iy); 
    }
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    3c76:	add.w	sl, r4, #4
    3c7a:	b.n	3cb0 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x70>
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    3c7c:	ldrh.w	r3, [sp, #1350]	; 0x546
    3c80:	add.w	r3, r4, r3, lsl #2
    3c84:	ldr	r0, [r3, #88]	; 0x58
    3c86:	ldr	r3, [r0, #0]
    3c88:	ldr	r3, [r3, #8]
    3c8a:	blx	r3

    if(py.isdir) 
    { 
      sd_mkdir(py.store,newfilename);

      ScanDir(p1.store,ix); 
    3c8c:	mov	r2, r6
    3c8e:	mov	r1, r9
    3c90:	mov	r0, r4
    3c92:	bl	2804 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      CopyFiles(ix,p2.store,iy); 
    3c96:	ldr	r3, [r4, #0]
    3c98:	ldrh.w	r2, [sp, #806]	; 0x326
    3c9c:	ldr.w	fp, [r3, #84]	; 0x54
    3ca0:	mov	r1, r6
    3ca2:	mov	r3, r5
    3ca4:	mov	r0, r4
    3ca6:	blx	fp
    }
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    }
    ix = px.sibling;
    3ca8:	ldr.w	r6, [sp, #1072]	; 0x430

  Record p1=ReadIndexRecord(handle);
  Record p2=ReadIndexRecord(newHandle);
  uint32_t ix= p1.child;
  uint32_t iy= 0;
  while(ix)
    3cac:	cmp	r6, #0
    3cae:	beq.n	3d30 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xf0>
  { // get child
    Record px = ReadIndexRecord(ix) ;
    3cb0:	mov	r2, r6
    3cb2:	mov	r1, r4
    3cb4:	add.w	r0, sp, #1064	; 0x428
    3cb8:	bl	1c18 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record py = px;
    3cbc:	mov.w	r2, #272	; 0x110
    3cc0:	add.w	r1, sp, #1064	; 0x428
    3cc4:	add.w	r0, sp, #1336	; 0x538
    3cc8:	bl	c198 <memcpy>
    py.store = p2.store;
    py.parent = newHandle;
    py.sibling = iy;
    3ccc:	str.w	r5, [sp, #1344]	; 0x540
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    3cd0:	ldr.w	r5, [r4, #244]	; 0xf4
  uint32_t iy= 0;
  while(ix)
  { // get child
    Record px = ReadIndexRecord(ix) ;
    Record py = px;
    py.store = p2.store;
    3cd4:	ldrh.w	r3, [sp, #806]	; 0x326
    3cd8:	strh.w	r3, [sp, #1350]	; 0x546
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    3cdc:	adds	r2, r5, #1
    3cde:	str.w	r2, [r4, #244]	; 0xf4
    WriteIndexRecord(new_record, r);
    3ce2:	mov	r1, r5
    3ce4:	add.w	r2, sp, #1336	; 0x538
    3ce8:	mov	r0, r4
  while(ix)
  { // get child
    Record px = ReadIndexRecord(ix) ;
    Record py = px;
    py.store = p2.store;
    py.parent = newHandle;
    3cea:	str.w	r8, [sp, #1336]	; 0x538
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    3cee:	bl	1a4c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    py.sibling = iy;
    iy = AppendIndexRecord(py);

    char oldfilename[MAX_FILENAME_LEN];
    char newfilename[MAX_FILENAME_LEN];
    ConstructFilename(ix,oldfilename,MAX_FILENAME_LEN);
    3cf2:	mov.w	r3, #256	; 0x100
    3cf6:	add	r2, sp, #8
    3cf8:	mov	r1, r6
    3cfa:	mov	r0, r4
    3cfc:	bl	2078 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    ConstructFilename(iy,newfilename,MAX_FILENAME_LEN);
    3d00:	mov	r1, r5
    3d02:	mov.w	r3, #256	; 0x100
    3d06:	mov	r2, r7
    3d08:	mov	r0, r4
    3d0a:	bl	2078 <MTPStorage_SD::ConstructFilename(int, char*, int)>

    if(py.isdir) 
    3d0e:	ldrb.w	r3, [sp, #1348]	; 0x544
    3d12:	mov	r1, r7

      ScanDir(p1.store,ix); 
      CopyFiles(ix,p2.store,iy); 
    }
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    3d14:	add	r2, sp, #8
    3d16:	mov	r0, sl
    char oldfilename[MAX_FILENAME_LEN];
    char newfilename[MAX_FILENAME_LEN];
    ConstructFilename(ix,oldfilename,MAX_FILENAME_LEN);
    ConstructFilename(iy,newfilename,MAX_FILENAME_LEN);

    if(py.isdir) 
    3d18:	cmp	r3, #0
    3d1a:	bne.n	3c7c <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x3c>

      ScanDir(p1.store,ix); 
      CopyFiles(ix,p2.store,iy); 
    }
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    3d1c:	ldrh.w	r3, [sp, #1350]	; 0x546
    3d20:	str	r7, [sp, #0]
    3d22:	mov	r1, r9
    3d24:	bl	3298 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    }
    ix = px.sibling;
    3d28:	ldr.w	r6, [sp, #1072]	; 0x430

  Record p1=ReadIndexRecord(handle);
  Record p2=ReadIndexRecord(newHandle);
  uint32_t ix= p1.child;
  uint32_t iy= 0;
  while(ix)
    3d2c:	cmp	r6, #0
    3d2e:	bne.n	3cb0 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x70>
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    }
    ix = px.sibling;
  }
  p2.child=iy;
  WriteIndexRecord(newHandle,p2);
    3d30:	mov	r0, r4
    3d32:	mov	r1, r8
    3d34:	add	r2, sp, #792	; 0x318
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    }
    ix = px.sibling;
  }
  p2.child=iy;
    3d36:	str	r5, [sp, #796]	; 0x31c
  WriteIndexRecord(newHandle,p2);
    3d38:	bl	1a4c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  return true;
}
    3d3c:	movs	r0, #1
    3d3e:	addw	sp, sp, #1612	; 0x64c
    3d42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  #endif

  Record p1=ReadIndexRecord(handle);
  Record p2=ReadIndexRecord(newHandle);
  uint32_t ix= p1.child;
  uint32_t iy= 0;
    3d46:	mov	r5, r6
    3d48:	b.n	3d30 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xf0>
    3d4a:	nop

00003d4c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>:
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}

bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{ // old and new are directory paths
    3d4c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d50:	mov	r5, r3
    3d52:	add.w	r3, r0, r3, lsl #2
    3d56:	mov	r4, r0
    3d58:	ldr	r0, [r3, #84]	; 0x54
    3d5a:	ldr	r6, [sp, #24]
    3d5c:	ldr	r3, [r0, #0]
    3d5e:	mov	r7, r1
    3d60:	ldr	r3, [r3, #8]
    3d62:	mov	r1, r6
    3d64:	mov	r8, r2
    3d66:	blx	r3

  char tmp0Name[MAX_FILENAME_LEN];
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    3d68:	cbnz	r0, 3d6e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x22>
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    3d6a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3d6e:	str	r6, [sp, #24]
    3d70:	mov	r3, r5
    3d72:	mov	r2, r8
    3d74:	mov	r1, r7
    3d76:	mov	r0, r4
    3d78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3d7c:	b.w	3d80 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]>

00003d80 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]>:
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}

bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
    3d80:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d84:	add.w	sl, r0, r1, lsl #2
    3d88:	mov	r8, r1
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    3d8a:	ldr.w	r1, [sl, #84]	; 0x54
    3d8e:	sub.w	sp, sp, #596	; 0x254
    3d92:	mov	r9, r0
    3d94:	ldr	r0, [r1, #0]
    3d96:	str	r3, [sp, #8]
    3d98:	ldr	r4, [r0, #0]
    3d9a:	str	r2, [sp, #12]
    3d9c:	movs	r3, #0
    3d9e:	add	r0, sp, #40	; 0x28
    3da0:	blx	r4
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    3da2:	ldr	r3, [sp, #56]	; 0x38
    3da4:	cmp	r3, #0
    3da6:	beq.w	46ea <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x96a>
    3daa:	ldr	r2, [r3, #0]
    3dac:	ldr	r6, [pc, #460]	; (3f7c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1fc>)
    3dae:	ldr	r2, [r2, #68]	; 0x44
    3db0:	cmp	r2, r6
    3db2:	bne.w	408a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30a>
    3db6:	ldr	r0, [r3, #16]
    3db8:	cmp	r0, #0
    3dba:	beq.w	3f38 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    3dbe:	ldr	r2, [r0, #0]
    3dc0:	ldr	r2, [r2, #68]	; 0x44
    3dc2:	cmp	r2, r6
    3dc4:	bne.w	408c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    3dc8:	ldr	r0, [r0, #16]
    3dca:	cmp	r0, #0
    3dcc:	beq.w	3f38 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    3dd0:	ldr	r2, [r0, #0]
    3dd2:	ldr	r2, [r2, #68]	; 0x44
    3dd4:	cmp	r2, r6
    3dd6:	bne.w	408c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    3dda:	ldr	r0, [r0, #16]
    3ddc:	cmp	r0, #0
    3dde:	beq.w	3f38 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    3de2:	ldr	r2, [r0, #0]
    3de4:	ldr	r2, [r2, #68]	; 0x44
    3de6:	cmp	r2, r6
    3de8:	bne.w	408c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    3dec:	ldr	r0, [r0, #16]
    3dee:	cmp	r0, #0
    3df0:	beq.w	3f38 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    3df4:	ldr	r2, [r0, #0]
    3df6:	ldr	r2, [r2, #68]	; 0x44
    3df8:	cmp	r2, r6
    3dfa:	bne.w	408c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    3dfe:	ldr	r0, [r0, #16]
    3e00:	cmp	r0, #0
    3e02:	beq.w	3f38 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    3e06:	ldr	r2, [r0, #0]
    3e08:	ldr	r2, [r2, #68]	; 0x44
    3e0a:	cmp	r2, r6
    3e0c:	bne.w	408c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    3e10:	ldr	r0, [r0, #16]
    3e12:	cmp	r0, #0
    3e14:	beq.w	3f38 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    3e18:	ldr	r2, [r0, #0]
    3e1a:	ldr	r2, [r2, #68]	; 0x44
    3e1c:	cmp	r2, r6
    3e1e:	bne.w	408c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    3e22:	ldr	r0, [r0, #16]
    3e24:	cmp	r0, #0
    3e26:	beq.w	3f38 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    3e2a:	ldr	r3, [r0, #0]
    3e2c:	ldr	r3, [r3, #68]	; 0x44
    3e2e:	blx	r3
    3e30:	mov	r4, r0
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}

  File f1=sd_open(store0,oldfilename,FILE_READ);
  if(!f1) {DBG_FAIL_MACRO; return false;}
    3e32:	cmp	r4, #0
    3e34:	beq.w	47a0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa20>
    3e38:	ldr.w	fp, [pc, #336]	; 3f8c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x20c>
    3e3c:	add	r4, sp, #336	; 0x150
  { while(1)
    {
      strlcpy(tmp0Name,oldfilename,MAX_FILENAME_LEN);
    3e3e:	mov.w	r2, #256	; 0x100
    3e42:	ldr	r1, [sp, #12]
    3e44:	add	r0, sp, #80	; 0x50
    3e46:	bl	f8e4 <strlcpy>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    3e4a:	add	r0, sp, #80	; 0x50
    3e4c:	bl	f940 <strlen>
    3e50:	add	r3, sp, #80	; 0x50
    3e52:	add	r0, r3
    3e54:	ldrb.w	r3, [r0, #-1]
    3e58:	cmp	r3, #47	; 0x2f
    3e5a:	beq.n	3e68 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xe8>
    3e5c:	mov.w	r2, #256	; 0x100
    3e60:	ldr	r1, [pc, #284]	; (3f80 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x200>)
    3e62:	add	r0, sp, #80	; 0x50
    3e64:	bl	f890 <strlcat>

      strlcpy(tmp1Name,newfilename,MAX_FILENAME_LEN);
    3e68:	mov.w	r2, #256	; 0x100
    3e6c:	ldr	r1, [sp, #632]	; 0x278
    3e6e:	mov	r0, r4
    3e70:	bl	f8e4 <strlcpy>
      if(tmp1Name[strlen(tmp1Name)-1]!='/') strlcat(tmp1Name,"/",MAX_FILENAME_LEN);
    3e74:	mov	r0, r4
    3e76:	bl	f940 <strlen>
    3e7a:	add	r0, r4
    3e7c:	ldrb.w	r3, [r0, #-1]
    3e80:	cmp	r3, #47	; 0x2f
    3e82:	beq.n	3e90 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x110>
    3e84:	mov.w	r2, #256	; 0x100
    3e88:	ldr	r1, [pc, #244]	; (3f80 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x200>)
    3e8a:	mov	r0, r4
    3e8c:	bl	f890 <strlcat>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    3e90:	ldr	r1, [sp, #56]	; 0x38
    3e92:	cmp	r1, #0
    3e94:	beq.w	414e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    3e98:	ldr	r3, [r1, #0]
    3e9a:	ldr	r2, [pc, #232]	; (3f84 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x204>)
    3e9c:	ldr	r3, [r3, #80]	; 0x50
    3e9e:	cmp	r3, r2
    3ea0:	bne.w	4174 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    3ea4:	ldr	r1, [r1, #16]
    3ea6:	cmp	r1, #0
    3ea8:	beq.w	414e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    3eac:	ldr	r3, [r1, #0]
    3eae:	ldr	r3, [r3, #80]	; 0x50
    3eb0:	cmp	r3, r2
    3eb2:	bne.w	4174 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    3eb6:	ldr	r1, [r1, #16]
    3eb8:	cmp	r1, #0
    3eba:	beq.w	414e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    3ebe:	ldr	r3, [r1, #0]
    3ec0:	ldr	r3, [r3, #80]	; 0x50
    3ec2:	cmp	r3, r2
    3ec4:	bne.w	4174 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    3ec8:	ldr	r1, [r1, #16]
    3eca:	cmp	r1, #0
    3ecc:	beq.w	414e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    3ed0:	ldr	r3, [r1, #0]
    3ed2:	ldr	r3, [r3, #80]	; 0x50
    3ed4:	cmp	r3, r2
    3ed6:	bne.w	4174 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    3eda:	ldr	r1, [r1, #16]
    3edc:	cmp	r1, #0
    3ede:	beq.w	414e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    3ee2:	ldr	r3, [r1, #0]
    3ee4:	ldr	r3, [r3, #80]	; 0x50
    3ee6:	cmp	r3, r2
    3ee8:	bne.w	4174 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    3eec:	ldr	r1, [r1, #16]
    3eee:	cmp	r1, #0
    3ef0:	beq.w	414e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    3ef4:	ldr	r3, [r1, #0]
    3ef6:	ldr	r3, [r3, #80]	; 0x50
    3ef8:	cmp	r3, r2
    3efa:	bne.w	4174 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    3efe:	ldr	r1, [r1, #16]
    3f00:	cmp	r1, #0
    3f02:	beq.w	414e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    3f06:	ldr	r3, [r1, #0]
    3f08:	ldr	r3, [r3, #80]	; 0x50
    3f0a:	cmp	r3, r2
    3f0c:	bne.w	4174 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    3f10:	ldr	r1, [r1, #16]
    3f12:	cmp	r1, #0
    3f14:	beq.w	414e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    3f18:	ldr	r3, [r1, #0]
    3f1a:	ldr	r3, [r3, #80]	; 0x50
    3f1c:	cmp	r3, r2
    3f1e:	bne.w	4174 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    3f22:	ldr	r1, [r1, #16]
    3f24:	cmp	r1, #0
    3f26:	beq.w	414e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    3f2a:	ldr	r3, [r1, #0]
    3f2c:	add	r5, sp, #60	; 0x3c
    3f2e:	ldr	r3, [r3, #80]	; 0x50
    3f30:	mov	r0, r5
    3f32:	movs	r2, #0
    3f34:	blx	r3
    3f36:	b.n	417c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3fc>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3f38:	ldr.w	fp, [pc, #80]	; 3f8c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x20c>
    3f3c:	str.w	fp, [sp, #40]	; 0x28
    3f40:	movs	r4, #0
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3f42:	ldr	r2, [r3, #16]
    3f44:	subs	r2, #1
    3f46:	str	r2, [r3, #16]
    3f48:	cbnz	r2, 3f72 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1f2>
    3f4a:	ldr	r5, [sp, #56]	; 0x38
    3f4c:	cbz	r5, 3f72 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1f2>
    3f4e:	ldr	r2, [r5, #0]
    3f50:	ldr	r3, [pc, #52]	; (3f88 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x208>)
    3f52:	ldr	r2, [r2, #32]
    3f54:	cmp	r2, r3
    3f56:	bne.w	4704 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x984>
    3f5a:	ldr	r1, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3f5c:	str.w	fp, [r5]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3f60:	cbz	r1, 3f6a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1ea>
    3f62:	ldr	r2, [r1, #16]
    3f64:	subs	r2, #1
    3f66:	str	r2, [r1, #16]
    3f68:	cbz	r2, 3f90 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x210>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    3f6a:	mov	r0, r5
    3f6c:	movs	r1, #20
    3f6e:	bl	ddec <operator delete(void*, unsigned int)>
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    3f72:	mov	r0, r4
    3f74:	add.w	sp, sp, #596	; 0x254
    3f78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3f7c:	.word	0x0000050d
    3f80:	.word	0x0001307c
    3f84:	.word	0x00000539
    3f88:	.word	0x00000eb1
    3f8c:	.word	0x00012e78
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3f90:	ldr	r6, [r5, #16]
    3f92:	cmp	r6, #0
    3f94:	beq.n	3f6a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1ea>
    3f96:	ldr	r2, [r6, #0]
    3f98:	ldr	r2, [r2, #32]
    3f9a:	cmp	r2, r3
    3f9c:	bne.w	471a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x99a>
    3fa0:	ldr	r1, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3fa2:	str.w	fp, [r6]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3fa6:	cmp	r1, #0
    3fa8:	beq.n	4080 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x300>
    3faa:	ldr	r2, [r1, #16]
    3fac:	subs	r2, #1
    3fae:	str	r2, [r1, #16]
    3fb0:	cmp	r2, #0
    3fb2:	bne.n	4080 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x300>
    3fb4:	ldr	r7, [r6, #16]
    3fb6:	cmp	r7, #0
    3fb8:	beq.n	4080 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x300>
    3fba:	ldr	r2, [r7, #0]
    3fbc:	ldr	r2, [r2, #32]
    3fbe:	cmp	r2, r3
    3fc0:	bne.w	4736 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9b6>
    3fc4:	ldr	r1, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3fc6:	str.w	fp, [r7]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3fca:	cmp	r1, #0
    3fcc:	beq.n	4078 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f8>
    3fce:	ldr	r2, [r1, #16]
    3fd0:	subs	r2, #1
    3fd2:	str	r2, [r1, #16]
    3fd4:	cmp	r2, #0
    3fd6:	bne.n	4078 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f8>
    3fd8:	ldr.w	r8, [r7, #16]
    3fdc:	cmp.w	r8, #0
    3fe0:	beq.n	4078 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f8>
    3fe2:	ldr.w	r2, [r8]
    3fe6:	ldr	r2, [r2, #32]
    3fe8:	cmp	r2, r3
    3fea:	bne.w	474c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9cc>
    3fee:	ldr.w	r1, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3ff2:	str.w	fp, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3ff6:	cmp	r1, #0
    3ff8:	beq.n	4070 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f0>
    3ffa:	ldr	r2, [r1, #16]
    3ffc:	subs	r2, #1
    3ffe:	str	r2, [r1, #16]
    4000:	cmp	r2, #0
    4002:	bne.n	4070 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f0>
    4004:	ldr.w	r9, [r8, #16]
    4008:	cmp.w	r9, #0
    400c:	beq.n	4070 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f0>
    400e:	ldr.w	r2, [r9]
    4012:	ldr	r2, [r2, #32]
    4014:	cmp	r2, r3
    4016:	bne.w	4774 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9f4>
    401a:	ldr.w	r1, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    401e:	str.w	fp, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4022:	cbz	r1, 4068 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e8>
    4024:	ldr	r2, [r1, #16]
    4026:	subs	r2, #1
    4028:	str	r2, [r1, #16]
    402a:	cbnz	r2, 4068 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e8>
    402c:	ldr.w	sl, [r9, #16]
    4030:	cmp.w	sl, #0
    4034:	beq.n	4068 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e8>
    4036:	ldr.w	r2, [sl]
    403a:	ldr	r2, [r2, #32]
    403c:	cmp	r2, r3
    403e:	bne.w	477a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9fa>
    4042:	ldr.w	r2, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4046:	str.w	fp, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    404a:	cbz	r2, 4060 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e0>
    404c:	ldr	r3, [r2, #16]
    404e:	subs	r3, #1
    4050:	str	r3, [r2, #16]
    4052:	cbnz	r3, 4060 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e0>
    4054:	ldr.w	r0, [sl, #16]
    4058:	cbz	r0, 4060 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e0>
    405a:	ldr	r3, [r0, #0]
    405c:	ldr	r3, [r3, #32]
    405e:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    4060:	mov	r0, sl
    4062:	movs	r1, #20
    4064:	bl	ddec <operator delete(void*, unsigned int)>
    4068:	mov	r0, r9
    406a:	movs	r1, #20
    406c:	bl	ddec <operator delete(void*, unsigned int)>
    4070:	mov	r0, r8
    4072:	movs	r1, #20
    4074:	bl	ddec <operator delete(void*, unsigned int)>
    4078:	mov	r0, r7
    407a:	movs	r1, #20
    407c:	bl	ddec <operator delete(void*, unsigned int)>
    4080:	mov	r0, r6
    4082:	movs	r1, #20
    4084:	bl	ddec <operator delete(void*, unsigned int)>
    4088:	b.n	3f6a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1ea>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    408a:	mov	r0, r3
    408c:	blx	r2
    408e:	mov	r4, r0
    4090:	b.n	3e32 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xb2>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4092:	str.w	fp, [r5]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4096:	ldr	r3, [r2, #16]
    4098:	subs	r3, #1
    409a:	str	r3, [r2, #16]
    409c:	cmp	r3, #0
    409e:	bne.n	414e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    40a0:	ldr	r4, [r5, #16]
    40a2:	cmp	r4, #0
    40a4:	beq.n	414e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    40a6:	ldr	r2, [r4, #0]
    40a8:	ldr	r3, [pc, #192]	; (416c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ec>)
    40aa:	ldr	r2, [r2, #32]
    40ac:	cmp	r2, r3
    40ae:	bne.w	4726 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9a6>
    40b2:	ldr	r1, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    40b4:	str.w	fp, [r4]
    40b8:	ldr	r0, [pc, #180]	; (4170 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f0>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    40ba:	cmp	r1, #0
    40bc:	beq.n	4146 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3c6>
    40be:	ldr	r2, [r1, #16]
    40c0:	subs	r2, #1
    40c2:	str	r2, [r1, #16]
    40c4:	cmp	r2, #0
    40c6:	bne.n	4146 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3c6>
    40c8:	ldr	r5, [r4, #16]
    40ca:	cmp	r5, #0
    40cc:	beq.n	4146 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3c6>
    40ce:	ldr	r2, [r5, #0]
    40d0:	ldr	r2, [r2, #32]
    40d2:	cmp	r2, r3
    40d4:	bne.w	473c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9bc>
    40d8:	ldr	r1, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    40da:	str	r0, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    40dc:	cmp	r1, #0
    40de:	beq.n	413e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3be>
    40e0:	ldr	r2, [r1, #16]
    40e2:	subs	r2, #1
    40e4:	str	r2, [r1, #16]
    40e6:	cbnz	r2, 413e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3be>
    40e8:	ldr	r6, [r5, #16]
    40ea:	cbz	r6, 413e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3be>
    40ec:	ldr	r2, [r6, #0]
    40ee:	ldr	r2, [r2, #32]
    40f0:	cmp	r2, r3
    40f2:	bne.w	4762 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9e2>
    40f6:	ldr	r1, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    40f8:	str.w	fp, [r6]
    40fc:	ldr	r0, [pc, #112]	; (4170 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f0>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    40fe:	cbz	r1, 4136 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3b6>
    4100:	ldr	r2, [r1, #16]
    4102:	subs	r2, #1
    4104:	str	r2, [r1, #16]
    4106:	cbnz	r2, 4136 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3b6>
    4108:	ldr	r7, [r6, #16]
    410a:	cbz	r7, 4136 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3b6>
    410c:	ldr	r2, [r7, #0]
    410e:	ldr	r2, [r2, #32]
    4110:	cmp	r2, r3
    4112:	bne.w	4768 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9e8>
    4116:	ldr	r2, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4118:	str	r0, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    411a:	cbz	r2, 412e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ae>
    411c:	ldr	r3, [r2, #16]
    411e:	subs	r3, #1
    4120:	str	r3, [r2, #16]
    4122:	cbnz	r3, 412e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ae>
    4124:	ldr	r0, [r7, #16]
    4126:	cbz	r0, 412e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ae>
    4128:	ldr	r3, [r0, #0]
    412a:	ldr	r3, [r3, #32]
    412c:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    412e:	mov	r0, r7
    4130:	movs	r1, #20
    4132:	bl	ddec <operator delete(void*, unsigned int)>
    4136:	mov	r0, r6
    4138:	movs	r1, #20
    413a:	bl	ddec <operator delete(void*, unsigned int)>
    413e:	mov	r0, r5
    4140:	movs	r1, #20
    4142:	bl	ddec <operator delete(void*, unsigned int)>
    4146:	mov	r0, r4
    4148:	movs	r1, #20
    414a:	bl	ddec <operator delete(void*, unsigned int)>
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) { return sdx[store]->remove(filename);  }
    bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
    414e:	ldr.w	r0, [sl, #84]	; 0x54
    4152:	ldr	r1, [sp, #12]
    4154:	ldr	r3, [r0, #0]
    4156:	ldr	r3, [r3, #20]
    4158:	blx	r3
    415a:	ldr	r3, [sp, #56]	; 0x38
    415c:	mov	r4, r0
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    415e:	str.w	fp, [sp, #40]	; 0x28
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4162:	cmp	r3, #0
    4164:	bne.w	3f42 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1c2>
    4168:	b.n	3f72 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1f2>
    416a:	nop
    416c:	.word	0x00000eb1
    4170:	.word	0x00012e78
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    4174:	add	r5, sp, #60	; 0x3c
    4176:	mov	r0, r5
    4178:	movs	r2, #0
    417a:	blx	r3
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    417c:	ldr	r2, [r5, #16]
    417e:	cmp	r2, #0
    4180:	beq.n	414e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    4182:	ldr	r3, [r2, #0]
    4184:	ldr	r3, [r3, #68]	; 0x44
    4186:	cmp	r3, r6
    4188:	bne.w	46b8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x938>
    418c:	ldr	r0, [r2, #16]
    418e:	cmp	r0, #0
    4190:	beq.w	4092 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    4194:	ldr	r1, [r0, #0]
    4196:	ldr	r1, [r1, #68]	; 0x44
    4198:	cmp	r1, r6
    419a:	bne.w	46ce <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x94e>
    419e:	ldr	r0, [r0, #16]
    41a0:	cmp	r0, #0
    41a2:	beq.w	4092 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    41a6:	ldr	r3, [r0, #0]
    41a8:	ldr	r3, [r3, #68]	; 0x44
    41aa:	cmp	r3, r6
    41ac:	bne.w	46ba <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93a>
    41b0:	ldr	r0, [r0, #16]
    41b2:	cmp	r0, #0
    41b4:	beq.w	4092 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    41b8:	ldr	r3, [r0, #0]
    41ba:	ldr	r3, [r3, #68]	; 0x44
    41bc:	cmp	r3, r6
    41be:	bne.w	46ba <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93a>
    41c2:	ldr	r0, [r0, #16]
    41c4:	cmp	r0, #0
    41c6:	beq.w	4092 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    41ca:	ldr	r3, [r0, #0]
    41cc:	ldr	r3, [r3, #68]	; 0x44
    41ce:	cmp	r3, r6
    41d0:	bne.w	46ba <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93a>
    41d4:	ldr	r0, [r0, #16]
    41d6:	cmp	r0, #0
    41d8:	beq.w	4092 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    41dc:	ldr	r3, [r0, #0]
    41de:	ldr	r3, [r3, #68]	; 0x44
    41e0:	cmp	r3, r6
    41e2:	bne.w	46ba <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93a>
    41e6:	ldr	r0, [r0, #16]
    41e8:	cmp	r0, #0
    41ea:	beq.w	4092 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    41ee:	ldr	r3, [r0, #0]
    41f0:	ldr	r3, [r3, #68]	; 0x44
    41f2:	blx	r3

      strlcpy(tmp1Name,newfilename,MAX_FILENAME_LEN);
      if(tmp1Name[strlen(tmp1Name)-1]!='/') strlcat(tmp1Name,"/",MAX_FILENAME_LEN);

      File f2=f1.openNextFile();
      if(!f2) break;
    41f4:	cmp	r0, #0
    41f6:	beq.w	4792 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa12>
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    41fa:	ldr	r0, [r5, #16]
    41fc:	cmp	r0, #0
    41fe:	beq.w	46b4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x934>
    4202:	ldr	r2, [r0, #0]
    4204:	ldr	r3, [pc, #696]	; (44c0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x740>)
    4206:	ldr	r2, [r2, #72]	; 0x48
    4208:	cmp	r2, r3
    420a:	bne.w	46be <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93e>
    420e:	ldr	r0, [r0, #16]
    4210:	cmp	r0, #0
    4212:	beq.w	46b4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x934>
    4216:	ldr	r2, [r0, #0]
    4218:	ldr	r2, [r2, #72]	; 0x48
    421a:	cmp	r2, r3
    421c:	bne.w	46be <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93e>
    4220:	ldr	r0, [r0, #16]
    4222:	cmp	r0, #0
    4224:	beq.w	46b4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x934>
    4228:	ldr	r2, [r0, #0]
    422a:	ldr	r2, [r2, #72]	; 0x48
    422c:	cmp	r2, r3
    422e:	bne.w	46be <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93e>
    4232:	ldr	r0, [r0, #16]
    4234:	cmp	r0, #0
    4236:	beq.w	46b4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x934>
    423a:	ldr	r2, [r0, #0]
    423c:	ldr	r2, [r2, #72]	; 0x48
    423e:	cmp	r2, r3
    4240:	bne.w	46be <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93e>
    4244:	ldr	r0, [r0, #16]
    4246:	cmp	r0, #0
    4248:	beq.w	46b4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x934>
    424c:	ldr	r2, [r0, #0]
    424e:	ldr	r2, [r2, #72]	; 0x48
    4250:	cmp	r2, r3
    4252:	bne.w	46be <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93e>
    4256:	ldr	r0, [r0, #16]
    4258:	cmp	r0, #0
    425a:	beq.w	46b4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x934>
    425e:	ldr	r2, [r0, #0]
    4260:	ldr	r2, [r2, #72]	; 0x48
    4262:	cmp	r2, r3
    4264:	bne.w	46be <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93e>
    4268:	ldr	r0, [r0, #16]
    426a:	cmp	r0, #0
    426c:	beq.w	46b4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x934>
    4270:	ldr	r3, [r0, #0]
    4272:	ldr	r3, [r3, #72]	; 0x48
    4274:	blx	r3
    4276:	mov	r1, r0
      { // generate filenames
        strlcat(tmp0Name,f2.name(),MAX_FILENAME_LEN);
    4278:	mov.w	r2, #256	; 0x100
    427c:	add	r0, sp, #80	; 0x50
    427e:	bl	f890 <strlcat>
    4282:	ldr	r0, [r5, #16]
    4284:	cmp	r0, #0
    4286:	beq.w	46b0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x930>
    428a:	ldr	r2, [r0, #0]
    428c:	ldr	r3, [pc, #560]	; (44c0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x740>)
    428e:	ldr	r2, [r2, #72]	; 0x48
    4290:	cmp	r2, r3
    4292:	bne.w	46c8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    4296:	ldr	r0, [r0, #16]
    4298:	cmp	r0, #0
    429a:	beq.w	46b0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x930>
    429e:	ldr	r2, [r0, #0]
    42a0:	ldr	r2, [r2, #72]	; 0x48
    42a2:	cmp	r2, r3
    42a4:	bne.w	46c8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    42a8:	ldr	r0, [r0, #16]
    42aa:	cmp	r0, #0
    42ac:	beq.w	46b0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x930>
    42b0:	ldr	r2, [r0, #0]
    42b2:	ldr	r2, [r2, #72]	; 0x48
    42b4:	cmp	r2, r3
    42b6:	bne.w	46c8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    42ba:	ldr	r0, [r0, #16]
    42bc:	cmp	r0, #0
    42be:	beq.w	46b0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x930>
    42c2:	ldr	r2, [r0, #0]
    42c4:	ldr	r2, [r2, #72]	; 0x48
    42c6:	cmp	r2, r3
    42c8:	bne.w	46c8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    42cc:	ldr	r0, [r0, #16]
    42ce:	cmp	r0, #0
    42d0:	beq.w	46b0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x930>
    42d4:	ldr	r2, [r0, #0]
    42d6:	ldr	r2, [r2, #72]	; 0x48
    42d8:	cmp	r2, r3
    42da:	bne.w	46c8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    42de:	ldr	r0, [r0, #16]
    42e0:	cmp	r0, #0
    42e2:	beq.w	46b0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x930>
    42e6:	ldr	r2, [r0, #0]
    42e8:	ldr	r2, [r2, #72]	; 0x48
    42ea:	cmp	r2, r3
    42ec:	bne.w	46c8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    42f0:	ldr	r0, [r0, #16]
    42f2:	cmp	r0, #0
    42f4:	beq.w	46b0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x930>
    42f8:	ldr	r3, [r0, #0]
    42fa:	ldr	r3, [r3, #72]	; 0x48
    42fc:	blx	r3
    42fe:	mov	r1, r0
        strlcat(tmp1Name,f2.name(),MAX_FILENAME_LEN);
    4300:	mov.w	r2, #256	; 0x100
    4304:	mov	r0, r4
    4306:	bl	f890 <strlcat>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    430a:	ldr	r0, [r5, #16]
    430c:	cmp	r0, #0
    430e:	beq.w	4590 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    4312:	ldr	r2, [r0, #0]
    4314:	ldr	r3, [pc, #428]	; (44c4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x744>)
    4316:	ldr	r2, [r2, #76]	; 0x4c
    4318:	cmp	r2, r3
    431a:	bne.w	46c4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    431e:	ldr	r0, [r0, #16]
    4320:	cmp	r0, #0
    4322:	beq.w	4590 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    4326:	ldr	r2, [r0, #0]
    4328:	ldr	r2, [r2, #76]	; 0x4c
    432a:	cmp	r2, r3
    432c:	bne.w	46c4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    4330:	ldr	r0, [r0, #16]
    4332:	cmp	r0, #0
    4334:	beq.w	4590 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    4338:	ldr	r2, [r0, #0]
    433a:	ldr	r2, [r2, #76]	; 0x4c
    433c:	cmp	r2, r3
    433e:	bne.w	46c4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    4342:	ldr	r0, [r0, #16]
    4344:	cmp	r0, #0
    4346:	beq.w	4590 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    434a:	ldr	r2, [r0, #0]
    434c:	ldr	r2, [r2, #76]	; 0x4c
    434e:	cmp	r2, r3
    4350:	bne.w	46c4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    4354:	ldr	r0, [r0, #16]
    4356:	cmp	r0, #0
    4358:	beq.w	4590 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    435c:	ldr	r2, [r0, #0]
    435e:	ldr	r2, [r2, #76]	; 0x4c
    4360:	cmp	r2, r3
    4362:	bne.w	46c4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    4366:	ldr	r0, [r0, #16]
    4368:	cmp	r0, #0
    436a:	beq.w	4590 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    436e:	ldr	r2, [r0, #0]
    4370:	ldr	r2, [r2, #76]	; 0x4c
    4372:	cmp	r2, r3
    4374:	bne.w	46c4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    4378:	ldr	r0, [r0, #16]
    437a:	cmp	r0, #0
    437c:	beq.w	4590 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    4380:	ldr	r3, [r0, #0]
    4382:	ldr	r3, [r3, #76]	; 0x4c
    4384:	blx	r3

        if(f2.isDirectory())
    4386:	cmp	r0, #0
    4388:	beq.w	4590 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
        { 
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    438c:	str	r4, [sp, #0]
    438e:	ldr	r3, [sp, #8]
    4390:	add	r2, sp, #80	; 0x50
    4392:	mov	r1, r8
    4394:	mov	r0, r9
    4396:	bl	3d4c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    439a:	cmp	r0, #0
    439c:	beq.w	45b2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x832>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    43a0:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    43a2:	str.w	fp, [r5]
    43a6:	ldr	r1, [pc, #288]	; (44c8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x748>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    43a8:	cmp	r2, #0
    43aa:	beq.w	3e3e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
    43ae:	ldr	r3, [r2, #16]
    43b0:	subs	r3, #1
    43b2:	str	r3, [r2, #16]
    43b4:	cmp	r3, #0
    43b6:	bne.w	3e3e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
    43ba:	ldr	r5, [r5, #16]
    43bc:	cmp	r5, #0
    43be:	beq.w	3e3e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
    43c2:	ldr	r2, [r5, #0]
    43c4:	ldr	r3, [pc, #260]	; (44cc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x74c>)
    43c6:	ldr	r2, [r2, #32]
    43c8:	cmp	r2, r3
    43ca:	bne.w	46d2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    43ce:	ldr	r0, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    43d0:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    43d2:	cmp	r0, #0
    43d4:	beq.w	4586 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x806>
    43d8:	ldr	r2, [r0, #16]
    43da:	subs	r2, #1
    43dc:	str	r2, [r0, #16]
    43de:	cmp	r2, #0
    43e0:	bne.w	4586 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x806>
    43e4:	ldr	r7, [r5, #16]
    43e6:	cmp	r7, #0
    43e8:	beq.w	4586 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x806>
    43ec:	ldr	r2, [r7, #0]
    43ee:	ldr	r2, [r2, #32]
    43f0:	cmp	r2, r3
    43f2:	bne.w	46da <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95a>
    43f6:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    43f8:	str	r1, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    43fa:	cmp	r0, #0
    43fc:	beq.w	457e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7fe>
    4400:	ldr	r2, [r0, #16]
    4402:	subs	r2, #1
    4404:	str	r2, [r0, #16]
    4406:	cmp	r2, #0
    4408:	bne.w	457e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7fe>
    440c:	ldr	r2, [r7, #16]
    440e:	cmp	r2, #0
    4410:	beq.w	457e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7fe>
    4414:	ldr	r1, [r2, #0]
    4416:	ldr	r1, [r1, #32]
    4418:	cmp	r1, r3
    441a:	bne.w	46f6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x976>
    441e:	ldr.w	lr, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4422:	str.w	fp, [r2]
    4426:	ldr	r0, [pc, #160]	; (44c8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x748>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4428:	cmp.w	lr, #0
    442c:	beq.w	4576 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7f6>
    4430:	ldr.w	r1, [lr, #16]
    4434:	subs	r1, #1
    4436:	str.w	r1, [lr, #16]
    443a:	cmp	r1, #0
    443c:	bne.w	4576 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7f6>
    4440:	ldr	r1, [r2, #16]
    4442:	str	r1, [sp, #16]
    4444:	cmp	r1, #0
    4446:	beq.w	4576 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7f6>
    444a:	ldr	r1, [sp, #16]
    444c:	ldr	r1, [r1, #0]
    444e:	ldr	r1, [r1, #32]
    4450:	cmp	r1, r3
    4452:	bne.w	470a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x98a>
    4456:	ldr	r1, [sp, #16]
    4458:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    445c:	str	r0, [r1, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    445e:	cmp.w	lr, #0
    4462:	beq.w	456a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7ea>
    4466:	ldr.w	r1, [lr, #16]
    446a:	subs	r1, #1
    446c:	str.w	r1, [lr, #16]
    4470:	cmp	r1, #0
    4472:	bne.n	456a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7ea>
    4474:	ldr	r1, [sp, #16]
    4476:	ldr	r1, [r1, #16]
    4478:	str	r1, [sp, #20]
    447a:	cmp	r1, #0
    447c:	beq.n	456a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7ea>
    447e:	ldr	r0, [sp, #20]
    4480:	ldr	r1, [r0, #0]
    4482:	ldr	r1, [r1, #32]
    4484:	cmp	r1, r3
    4486:	bne.w	472c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9ac>
    448a:	ldr.w	lr, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    448e:	str.w	fp, [r0]
    4492:	ldr	r0, [pc, #52]	; (44c8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x748>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4494:	cmp.w	lr, #0
    4498:	beq.n	455e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7de>
    449a:	ldr.w	r1, [lr, #16]
    449e:	subs	r1, #1
    44a0:	str.w	r1, [lr, #16]
    44a4:	cmp	r1, #0
    44a6:	bne.n	455e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7de>
    44a8:	ldr	r1, [sp, #20]
    44aa:	ldr	r1, [r1, #16]
    44ac:	str	r1, [sp, #24]
    44ae:	cmp	r1, #0
    44b0:	beq.n	455e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7de>
    44b2:	ldr	r1, [sp, #24]
    44b4:	ldr	r1, [r1, #0]
    44b6:	ldr	r1, [r1, #32]
    44b8:	cmp	r1, r3
    44ba:	bne.w	4742 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9c2>
    44be:	b.n	44d0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x750>
    44c0:	.word	0x00000519
    44c4:	.word	0x0000052d
    44c8:	.word	0x00012e78
    44cc:	.word	0x00000eb1
    44d0:	ldr	r1, [sp, #24]
    44d2:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    44d6:	str	r0, [r1, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    44d8:	cmp.w	lr, #0
    44dc:	beq.n	4552 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7d2>
    44de:	ldr.w	r1, [lr, #16]
    44e2:	subs	r1, #1
    44e4:	str.w	r1, [lr, #16]
    44e8:	cmp	r1, #0
    44ea:	bne.n	4552 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7d2>
    44ec:	ldr	r1, [sp, #24]
    44ee:	ldr	r1, [r1, #16]
    44f0:	str	r1, [sp, #28]
    44f2:	cbz	r1, 4552 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7d2>
    44f4:	ldr	r1, [sp, #28]
    44f6:	ldr	r1, [r1, #0]
    44f8:	ldr	r1, [r1, #32]
    44fa:	cmp	r1, r3
    44fc:	bne.w	4758 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9d8>
    4500:	ldr	r1, [sp, #28]
    4502:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4506:	str	r0, [r1, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4508:	cmp.w	lr, #0
    450c:	beq.n	4546 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7c6>
    450e:	ldr.w	r1, [lr, #16]
    4512:	subs	r1, #1
    4514:	str.w	r1, [lr, #16]
    4518:	cbnz	r1, 4546 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7c6>
    451a:	ldr	r1, [sp, #28]
    451c:	ldr	r1, [r1, #16]
    451e:	cbz	r1, 4546 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7c6>
    4520:	ldr	r0, [r1, #0]
    4522:	ldr	r0, [r0, #32]
    4524:	cmp	r0, r3
    4526:	mov	lr, r0
    4528:	bne.w	4780 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa00>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    452c:	mov	r0, r1
    452e:	str	r2, [sp, #36]	; 0x24
    4530:	str.w	fp, [r0], #16
    4534:	str	r1, [sp, #32]
		invalidate();
    4536:	bl	1640 <File::invalidate() [clone .isra.0]>
	}
    453a:	ldr	r1, [sp, #32]
    453c:	mov	r0, r1
    453e:	movs	r1, #20
    4540:	bl	ddec <operator delete(void*, unsigned int)>
    4544:	ldr	r2, [sp, #36]	; 0x24
    4546:	ldr	r0, [sp, #28]
    4548:	str	r2, [sp, #32]
    454a:	movs	r1, #20
    454c:	bl	ddec <operator delete(void*, unsigned int)>
    4550:	ldr	r2, [sp, #32]
    4552:	ldr	r0, [sp, #24]
    4554:	str	r2, [sp, #28]
    4556:	movs	r1, #20
    4558:	bl	ddec <operator delete(void*, unsigned int)>
    455c:	ldr	r2, [sp, #28]
    455e:	ldr	r0, [sp, #20]
    4560:	str	r2, [sp, #24]
    4562:	movs	r1, #20
    4564:	bl	ddec <operator delete(void*, unsigned int)>
    4568:	ldr	r2, [sp, #24]
    456a:	ldr	r0, [sp, #16]
    456c:	str	r2, [sp, #20]
    456e:	movs	r1, #20
    4570:	bl	ddec <operator delete(void*, unsigned int)>
    4574:	ldr	r2, [sp, #20]
    4576:	mov	r0, r2
    4578:	movs	r1, #20
    457a:	bl	ddec <operator delete(void*, unsigned int)>
    457e:	mov	r0, r7
    4580:	movs	r1, #20
    4582:	bl	ddec <operator delete(void*, unsigned int)>
    4586:	mov	r0, r5
    4588:	movs	r1, #20
    458a:	bl	ddec <operator delete(void*, unsigned int)>
    458e:	b.n	3e3e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
        }
        else
        { 
          if(!sd_copy(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    4590:	str	r4, [sp, #0]
    4592:	ldr	r3, [sp, #8]
    4594:	add	r2, sp, #80	; 0x50
    4596:	mov	r1, r8
    4598:	mov	r0, r9
    459a:	bl	3298 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    459e:	cbz	r0, 45b2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x832>
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) { return sdx[store]->remove(filename);  }
    45a0:	ldr.w	r0, [sl, #84]	; 0x54
    45a4:	ldr	r3, [r0, #0]
    45a6:	add	r1, sp, #80	; 0x50
    45a8:	ldr	r3, [r3, #16]
    45aa:	blx	r3
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    45ac:	cmp	r0, #0
    45ae:	bne.w	43a0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x620>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    45b2:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    45b4:	str.w	fp, [r5]
    45b8:	ldr	r1, [pc, #492]	; (47a8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa28>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    45ba:	cmp	r2, #0
    45bc:	beq.n	46aa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x92a>
    45be:	ldr	r3, [r2, #16]
    45c0:	subs	r3, #1
    45c2:	str	r3, [r2, #16]
    45c4:	cmp	r3, #0
    45c6:	bne.n	46aa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x92a>
    45c8:	ldr	r4, [r5, #16]
    45ca:	cmp	r4, #0
    45cc:	beq.n	46aa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x92a>
    45ce:	ldr	r2, [r4, #0]
    45d0:	ldr	r3, [pc, #472]	; (47ac <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa2c>)
    45d2:	ldr	r2, [r2, #32]
    45d4:	cmp	r2, r3
    45d6:	bne.w	4720 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9a0>
    45da:	ldr	r0, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    45dc:	str	r1, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    45de:	cmp	r0, #0
    45e0:	beq.n	46a2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x922>
    45e2:	ldr	r2, [r0, #16]
    45e4:	subs	r2, #1
    45e6:	str	r2, [r0, #16]
    45e8:	cmp	r2, #0
    45ea:	bne.n	46a2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x922>
    45ec:	ldr	r5, [r4, #16]
    45ee:	cmp	r5, #0
    45f0:	beq.n	46a2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x922>
    45f2:	ldr	r2, [r5, #0]
    45f4:	ldr	r2, [r2, #32]
    45f6:	cmp	r2, r3
    45f8:	bne.w	4714 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x994>
    45fc:	ldr	r0, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    45fe:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4600:	cmp	r0, #0
    4602:	beq.n	469a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x91a>
    4604:	ldr	r2, [r0, #16]
    4606:	subs	r2, #1
    4608:	str	r2, [r0, #16]
    460a:	cmp	r2, #0
    460c:	bne.n	469a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x91a>
    460e:	ldr	r6, [r5, #16]
    4610:	cmp	r6, #0
    4612:	beq.n	469a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x91a>
    4614:	ldr	r2, [r6, #0]
    4616:	ldr	r2, [r2, #32]
    4618:	cmp	r2, r3
    461a:	bne.w	4752 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9d2>
    461e:	ldr	r1, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4620:	str.w	fp, [r6]
    4624:	ldr	r0, [pc, #384]	; (47a8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa28>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4626:	cmp	r1, #0
    4628:	beq.n	4692 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x912>
    462a:	ldr	r2, [r1, #16]
    462c:	subs	r2, #1
    462e:	str	r2, [r1, #16]
    4630:	cbnz	r2, 4692 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x912>
    4632:	ldr	r7, [r6, #16]
    4634:	cbz	r7, 4692 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x912>
    4636:	ldr	r2, [r7, #0]
    4638:	ldr	r2, [r2, #32]
    463a:	cmp	r2, r3
    463c:	bne.w	476e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9ee>
    4640:	ldr	r1, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4642:	str	r0, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4644:	cbz	r1, 468a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x90a>
    4646:	ldr	r2, [r1, #16]
    4648:	subs	r2, #1
    464a:	str	r2, [r1, #16]
    464c:	cbnz	r2, 468a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x90a>
    464e:	ldr.w	r8, [r7, #16]
    4652:	cmp.w	r8, #0
    4656:	beq.n	468a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x90a>
    4658:	ldr.w	r2, [r8]
    465c:	ldr	r2, [r2, #32]
    465e:	cmp	r2, r3
    4660:	bne.w	478c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa0c>
    4664:	ldr.w	r2, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4668:	str.w	fp, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    466c:	cbz	r2, 4682 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x902>
    466e:	ldr	r3, [r2, #16]
    4670:	subs	r3, #1
    4672:	str	r3, [r2, #16]
    4674:	cbnz	r3, 4682 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x902>
    4676:	ldr.w	r0, [r8, #16]
    467a:	cbz	r0, 4682 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x902>
    467c:	ldr	r3, [r0, #0]
    467e:	ldr	r3, [r3, #32]
    4680:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    4682:	mov	r0, r8
    4684:	movs	r1, #20
    4686:	bl	ddec <operator delete(void*, unsigned int)>
    468a:	mov	r0, r7
    468c:	movs	r1, #20
    468e:	bl	ddec <operator delete(void*, unsigned int)>
    4692:	mov	r0, r6
    4694:	movs	r1, #20
    4696:	bl	ddec <operator delete(void*, unsigned int)>
    469a:	mov	r0, r5
    469c:	movs	r1, #20
    469e:	bl	ddec <operator delete(void*, unsigned int)>
    46a2:	mov	r0, r4
    46a4:	movs	r1, #20
    46a6:	bl	ddec <operator delete(void*, unsigned int)>
    46aa:	ldr	r3, [sp, #56]	; 0x38
    46ac:	movs	r4, #0
    46ae:	b.n	415e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3de>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    46b0:	ldr	r1, [pc, #252]	; (47b0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa30>)
    46b2:	b.n	4300 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x580>
    46b4:	ldr	r1, [pc, #248]	; (47b0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa30>)
    46b6:	b.n	4278 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x4f8>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    46b8:	mov	r0, r2
    46ba:	blx	r3
    46bc:	b.n	41f4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x474>
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    46be:	blx	r2
    46c0:	mov	r1, r0
    46c2:	b.n	4278 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x4f8>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    46c4:	blx	r2
    46c6:	b.n	4386 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x606>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    46c8:	blx	r2
    46ca:	mov	r1, r0
    46cc:	b.n	4300 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x580>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    46ce:	blx	r1
    46d0:	b.n	41f4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x474>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    46d2:	mov	r0, r5
    46d4:	blx	r2
    46d6:	b.w	3e3e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
    46da:	mov	r0, r7
    46dc:	blx	r2
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    46de:	mov	r0, r5
    46e0:	movs	r1, #20
    46e2:	bl	ddec <operator delete(void*, unsigned int)>
    46e6:	b.w	3e3e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}

  File f1=sd_open(store0,oldfilename,FILE_READ);
  if(!f1) {DBG_FAIL_MACRO; return false;}
    46ea:	mov	r4, r3
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    46ec:	mov	r0, r4
    46ee:	add.w	sp, sp, #596	; 0x254
    46f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    46f6:	mov	r0, r2
    46f8:	blx	r1
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    46fa:	mov	r0, r7
    46fc:	movs	r1, #20
    46fe:	bl	ddec <operator delete(void*, unsigned int)>
    4702:	b.n	4586 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x806>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4704:	mov	r0, r5
    4706:	blx	r2
    4708:	b.n	3f72 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1f2>
    470a:	str	r2, [sp, #20]
    470c:	ldr	r0, [sp, #16]
    470e:	blx	r1
    4710:	ldr	r2, [sp, #20]
    4712:	b.n	4576 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7f6>
    4714:	mov	r0, r5
    4716:	blx	r2
    4718:	b.n	46a2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x922>
    471a:	mov	r0, r6
    471c:	blx	r2
    471e:	b.n	3f6a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1ea>
    4720:	mov	r0, r4
    4722:	blx	r2
    4724:	b.n	46aa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x92a>
    4726:	mov	r0, r4
    4728:	blx	r2
    472a:	b.n	414e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    472c:	str	r2, [sp, #24]
    472e:	ldr	r0, [sp, #20]
    4730:	blx	r1
    4732:	ldr	r2, [sp, #24]
    4734:	b.n	456a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7ea>
    4736:	mov	r0, r7
    4738:	blx	r2
    473a:	b.n	4080 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x300>
    473c:	mov	r0, r5
    473e:	blx	r2
    4740:	b.n	4146 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3c6>
    4742:	str	r2, [sp, #28]
    4744:	ldr	r0, [sp, #24]
    4746:	blx	r1
    4748:	ldr	r2, [sp, #28]
    474a:	b.n	455e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7de>
    474c:	mov	r0, r8
    474e:	blx	r2
    4750:	b.n	4078 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f8>
    4752:	mov	r0, r6
    4754:	blx	r2
    4756:	b.n	469a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x91a>
    4758:	str	r2, [sp, #32]
    475a:	ldr	r0, [sp, #28]
    475c:	blx	r1
    475e:	ldr	r2, [sp, #32]
    4760:	b.n	4552 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7d2>
    4762:	mov	r0, r6
    4764:	blx	r2
    4766:	b.n	413e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3be>
    4768:	mov	r0, r7
    476a:	blx	r2
    476c:	b.n	4136 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3b6>
    476e:	mov	r0, r7
    4770:	blx	r2
    4772:	b.n	4692 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x912>
    4774:	mov	r0, r9
    4776:	blx	r2
    4778:	b.n	4070 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f0>
    477a:	mov	r0, sl
    477c:	blx	r2
    477e:	b.n	4068 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e8>
    4780:	str	r2, [sp, #32]
    4782:	mov	r0, r1
    4784:	mov	r3, lr
    4786:	blx	r3
    4788:	ldr	r2, [sp, #32]
    478a:	b.n	4546 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7c6>
    478c:	mov	r0, r8
    478e:	blx	r2
    4790:	b.n	468a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x90a>
    4792:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4794:	str.w	fp, [r5]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4798:	cmp	r2, #0
    479a:	beq.w	414e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    479e:	b.n	4096 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x316>
    47a0:	ldr	r3, [sp, #56]	; 0x38
    47a2:	ldr.w	fp, [pc, #4]	; 47a8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa28>
    47a6:	b.n	415e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3de>
    47a8:	.word	0x00012e78
    47ac:	.word	0x00000eb1
    47b0:	.word	0x00012f70

000047b4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)>:
 * save p2
 * 
*/

  bool MTPStorage_SD::move(uint32_t handle, uint32_t newStore, uint32_t newParent ) 
  { 
    47b4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    47b8:	mov	r6, r1
    47ba:	subw	sp, sp, #2696	; 0xa88
    #if DEBUG>1
      Serial.printf("%d -> %d %d\n",handle,newStorage,newParent);
    #endif
    if(newParent==0xFFFFFFFFUL) newParent=newStore; //storage runs from 1, while record.store runs from 0
    47be:	cmp.w	r3, #4294967295
    47c2:	ite	ne
    47c4:	movne	r7, r3
    47c6:	moveq	r7, r2
 * save p2
 * 
*/

  bool MTPStorage_SD::move(uint32_t handle, uint32_t newStore, uint32_t newParent ) 
  { 
    47c8:	mov	r4, r0
    #if DEBUG>1
      Serial.printf("%d -> %d %d\n",handle,newStorage,newParent);
    #endif
    if(newParent==0xFFFFFFFFUL) newParent=newStore; //storage runs from 1, while record.store runs from 0

    Record p1 = ReadIndexRecord(handle);
    47ca:	mov	r1, r0
    47cc:	mov	r2, r6
    47ce:	add	r0, sp, #792	; 0x318
    47d0:	bl	1c18 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    47d4:	mov	r2, r7
    47d6:	mov	r1, r4
    47d8:	add.w	r0, sp, #1064	; 0x428
    47dc:	bl	1c18 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p3 = ReadIndexRecord(p1.parent); 
    47e0:	ldr	r2, [sp, #792]	; 0x318
    47e2:	mov	r1, r4
    47e4:	add.w	r0, sp, #1336	; 0x538
    47e8:	bl	1c18 <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    if(p1.isdir) 
    47ec:	ldrb.w	r3, [sp, #804]	; 0x324
    47f0:	cbz	r3, 47fc <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x48>
    { if(!p1.scanned) 
    47f2:	ldrb.w	r3, [sp, #805]	; 0x325
    47f6:	cmp	r3, #0
    47f8:	beq.w	4994 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1e0>
      { ScanDir(p1.store, handle) ; // in case scan directory
        WriteIndexRecord(handle, p1);
      }
    }

    Record p1o = p1;
    47fc:	mov.w	r2, #272	; 0x110
    4800:	add	r1, sp, #792	; 0x318
    4802:	add.w	r0, sp, #1608	; 0x648
    4806:	bl	c198 <memcpy>
    Record p2o = p2;
    480a:	mov.w	r2, #272	; 0x110
    480e:	add.w	r1, sp, #1064	; 0x428
    4812:	add.w	r0, sp, #1880	; 0x758
    4816:	bl	c198 <memcpy>
    Record p3o = p3;

    char oldName[MAX_FILENAME_LEN];
    ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    481a:	add	r2, sp, #280	; 0x118
    481c:	mov.w	r3, #256	; 0x100
    4820:	mov	r1, r6
    4822:	mov	r0, r4
    4824:	bl	2078 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    uint32_t jx=-1;
    Record pxo;

      // remove index from old parent
      Record px;
      if(p3.child==handle)
    4828:	ldr.w	r8, [sp, #1340]	; 0x53c
    482c:	cmp	r6, r8
    482e:	beq.w	495a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1a6>
        p3.child = p1.sibling;
        WriteIndexRecord(p1.parent, p3);    
      }
      else
      { jx = p3.child;
        px = ReadIndexRecord(jx); 
    4832:	add	r0, sp, #8
    4834:	mov	r2, r8
    4836:	mov	r1, r4
    4838:	bl	1c18 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    483c:	add	r1, sp, #8
    483e:	mov.w	r2, #272	; 0x110
    4842:	addw	r0, sp, #2424	; 0x978
    4846:	bl	c198 <memcpy>
        pxo = px;
    484a:	addw	r1, sp, #2424	; 0x978
    484e:	addw	r0, sp, #2152	; 0x868
    4852:	mov.w	r2, #272	; 0x110
    4856:	bl	c198 <memcpy>
        while(handle != px.sibling)
    485a:	ldr.w	r5, [sp, #2432]	; 0x980
    485e:	cmp	r6, r5
    4860:	bne.n	4866 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xb2>
    4862:	b.n	49ac <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1f8>
    4864:	mov	r5, r3
        {
          jx = px.sibling;
          px = ReadIndexRecord(jx); 
    4866:	mov	r2, r5
    4868:	mov	r1, r4
    486a:	add	r0, sp, #8
    486c:	bl	1c18 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    4870:	mov.w	r2, #272	; 0x110
    4874:	add	r1, sp, #8
    4876:	addw	r0, sp, #2424	; 0x978
    487a:	bl	c198 <memcpy>
          pxo = px;
    487e:	mov.w	r2, #272	; 0x110
    4882:	addw	r1, sp, #2424	; 0x978
    4886:	addw	r0, sp, #2152	; 0x868
    488a:	bl	c198 <memcpy>
      }
      else
      { jx = p3.child;
        px = ReadIndexRecord(jx); 
        pxo = px;
        while(handle != px.sibling)
    488e:	ldr.w	r3, [sp, #2432]	; 0x980
    4892:	cmp	r6, r3
    4894:	bne.n	4864 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xb0>
        {
          jx = px.sibling;
          px = ReadIndexRecord(jx); 
          pxo = px;
        }
        px.sibling = p1.sibling;
    4896:	ldr	r3, [sp, #800]	; 0x320
    4898:	str.w	r3, [sp, #2432]	; 0x980
        WriteIndexRecord(jx, px);
    489c:	addw	r2, sp, #2424	; 0x978
    48a0:	mov	r1, r5
    48a2:	mov	r0, r4
    48a4:	bl	1a4c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      }
    
      // add to new parent
      p1.parent = newParent;
      p1.store = p2.store;
    48a8:	ldrh.w	r0, [sp, #1078]	; 0x436
      p1.sibling = p2.child;
    48ac:	ldr.w	r3, [sp, #1068]	; 0x42c
        WriteIndexRecord(jx, px);
      }
    
      // add to new parent
      p1.parent = newParent;
      p1.store = p2.store;
    48b0:	strh.w	r0, [sp, #806]	; 0x326
      p1.sibling = p2.child;
      p2.child = handle;
      WriteIndexRecord(handle, p1);
    48b4:	add	r2, sp, #792	; 0x318
    48b6:	mov	r1, r6
    48b8:	mov	r0, r4
      }
    
      // add to new parent
      p1.parent = newParent;
      p1.store = p2.store;
      p1.sibling = p2.child;
    48ba:	str	r3, [sp, #800]	; 0x320
        px.sibling = p1.sibling;
        WriteIndexRecord(jx, px);
      }
    
      // add to new parent
      p1.parent = newParent;
    48bc:	str	r7, [sp, #792]	; 0x318
      p1.store = p2.store;
      p1.sibling = p2.child;
      p2.child = handle;
    48be:	str.w	r6, [sp, #1068]	; 0x42c
      WriteIndexRecord(handle, p1);
    48c2:	bl	1a4c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      WriteIndexRecord(newParent,p2);
    48c6:	add.w	r2, sp, #1064	; 0x428
    48ca:	mov	r1, r7
    48cc:	mov	r0, r4
    48ce:	bl	1a4c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

      // now working on disk storage
      char newName[MAX_FILENAME_LEN];
      ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    48d2:	mov.w	r3, #256	; 0x100
    48d6:	mov	r1, r6
    48d8:	add	r2, sp, #536	; 0x218
    48da:	mov	r0, r4
    48dc:	bl	2078 <MTPStorage_SD::ConstructFilename(int, char*, int)>
        Serial.print(p1.store); Serial.print(": ");Serial.println(newName);
        dumpIndexList();
      #endif


    if(p1o.store == p2o.store)
    48e0:	ldrh.w	r1, [sp, #1622]	; 0x656
    48e4:	ldrh.w	r3, [sp, #1894]	; 0x766
    48e8:	cmp	r1, r3
    48ea:	beq.n	4972 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1be>
    { // do a simple rename (works for files and directories)
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    }
    else if(!p1o.isdir)
    48ec:	ldrb.w	r2, [sp, #1620]	; 0x654
    48f0:	cbz	r2, 4934 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x180>
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    }
    else
    { // move directory cross mtp-disks
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    48f2:	add	r2, sp, #536	; 0x218
    48f4:	str	r2, [sp, #0]
    48f6:	adds	r0, r4, #4
    48f8:	add	r2, sp, #280	; 0x118
    48fa:	bl	3d4c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    48fe:	cmp	r0, #0
    4900:	bne.n	4986 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1d2>
    }

  fail:
    // undo changes in index list
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    4902:	mov	r1, r5
    4904:	addw	r2, sp, #2152	; 0x868
    4908:	mov	r0, r4
    490a:	bl	1a4c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(handle, p1o);
    490e:	add.w	r2, sp, #1608	; 0x648
    4912:	mov	r1, r6
    4914:	mov	r0, r4
    4916:	bl	1a4c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent,p2o);      
    491a:	add.w	r2, sp, #1880	; 0x758
    491e:	mov	r1, r7
    4920:	mov	r0, r4
    4922:	bl	1a4c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
    4926:	mov.w	r8, #0
  }
    492a:	mov	r0, r8
    492c:	addw	sp, sp, #2696	; 0xa88
    4930:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(p1o.store == p2o.store)
    { // do a simple rename (works for files and directories)
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    }
    else if(!p1o.isdir)
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    4934:	add	r2, sp, #536	; 0x218
    4936:	str	r2, [sp, #0]
    4938:	adds	r0, r4, #4
    493a:	add	r2, sp, #280	; 0x118
    493c:	bl	3298 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    4940:	mov	r8, r0
    4942:	cmp	r0, #0
    4944:	beq.n	4902 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x14e>
    4946:	ldrh.w	r3, [sp, #1894]	; 0x766
    494a:	add.w	r4, r4, r3, lsl #2
    494e:	add	r1, sp, #280	; 0x118
    4950:	ldr	r0, [r4, #88]	; 0x58
    4952:	ldr	r3, [r0, #0]
    4954:	ldr	r3, [r3, #16]
    4956:	blx	r3
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    4958:	b.n	492a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x176>

      // remove index from old parent
      Record px;
      if(p3.child==handle)
      {
        p3.child = p1.sibling;
    495a:	ldr	r3, [sp, #800]	; 0x320
        WriteIndexRecord(p1.parent, p3);    
    495c:	ldr	r1, [sp, #792]	; 0x318

      // remove index from old parent
      Record px;
      if(p3.child==handle)
      {
        p3.child = p1.sibling;
    495e:	str.w	r3, [sp, #1340]	; 0x53c
        WriteIndexRecord(p1.parent, p3);    
    4962:	add.w	r2, sp, #1336	; 0x538
    4966:	mov	r0, r4
    4968:	bl	1a4c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    #if DEBUG>1
      Serial.print(p1.store); Serial.print(": "); Serial.println(oldName);
      dumpIndexList();
    #endif

    uint32_t jx=-1;
    496c:	mov.w	r5, #4294967295
    4970:	b.n	48a8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xf4>
    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    4972:	add.w	r1, r4, r1, lsl #2
    4976:	add	r2, sp, #536	; 0x218
    4978:	ldr	r0, [r1, #88]	; 0x58
    497a:	ldr	r3, [r0, #0]
    497c:	add	r1, sp, #280	; 0x118
    497e:	ldr	r3, [r3, #12]
    4980:	blx	r3
      #endif


    if(p1o.store == p2o.store)
    { // do a simple rename (works for files and directories)
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    4982:	cmp	r0, #0
    4984:	beq.n	4902 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x14e>
    4986:	mov.w	r8, #1
    // undo changes in index list
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    WriteIndexRecord(handle, p1o);
    WriteIndexRecord(newParent,p2o);      
    return false;
  }
    498a:	mov	r0, r8
    498c:	addw	sp, sp, #2696	; 0xa88
    4990:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Record p2 = ReadIndexRecord(newParent);
    Record p3 = ReadIndexRecord(p1.parent); 

    if(p1.isdir) 
    { if(!p1.scanned) 
      { ScanDir(p1.store, handle) ; // in case scan directory
    4994:	mov	r2, r6
    4996:	ldrh.w	r1, [sp, #806]	; 0x326
    499a:	mov	r0, r4
    499c:	bl	2804 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
        WriteIndexRecord(handle, p1);
    49a0:	add	r2, sp, #792	; 0x318
    49a2:	mov	r1, r6
    49a4:	mov	r0, r4
    49a6:	bl	1a4c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    49aa:	b.n	47fc <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x48>
      }
      else
      { jx = p3.child;
        px = ReadIndexRecord(jx); 
        pxo = px;
        while(handle != px.sibling)
    49ac:	mov	r5, r8
    49ae:	b.n	4896 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xe2>

000049b0 <MTPD::GetNumObjects(unsigned long, unsigned long)>:

    //printf("%d %d ",storage,store); Serial.println(name); Serial.flush();
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    49b0:	push	{r4, r5, r6, lr}
    49b2:	mov	r6, r0
    storage_->StartGetObjectHandles(store, parent);
    49b4:	ldr	r0, [r0, #0]
    49b6:	ldr	r3, [r0, #0]

    //printf("%d %d ",storage,store); Serial.println(name); Serial.flush();
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    49b8:	subs	r5, r1, #1
    storage_->StartGetObjectHandles(store, parent);
    49ba:	ldr	r3, [r3, #28]
    49bc:	mov	r1, r5
    49be:	blx	r3
    int num = 0;
    49c0:	movs	r4, #0
    49c2:	b.n	49c6 <MTPD::GetNumObjects(unsigned long, unsigned long)+0x16>
    while (storage_->GetNextObjectHandle(store)) num++;
    49c4:	adds	r4, #1
    49c6:	ldr	r0, [r6, #0]
    49c8:	ldr	r3, [r0, #0]
    49ca:	mov	r1, r5
    49cc:	ldr	r3, [r3, #32]
    49ce:	blx	r3
    49d0:	cmp	r0, #0
    49d2:	bne.n	49c4 <MTPD::GetNumObjects(unsigned long, unsigned long)+0x14>
    return num;
  }
    49d4:	mov	r0, r4
    49d6:	pop	{r4, r5, r6, pc}

000049d8 <MTPD::get_buffer()>:


#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)

//  usb_packet_t *data_buffer_ = NULL;
  void MTPD::get_buffer() {
    49d8:	push	{r4, lr}
    49da:	mov	r4, r0
    49dc:	ldr	r0, [r4, #4]
    while (!data_buffer_) {
    49de:	cbnz	r0, 49e8 <MTPD::get_buffer()+0x10>
      data_buffer_ = usb_malloc();
    49e0:	bl	cd24 <usb_malloc>
    49e4:	str	r0, [r4, #4]
      if (!data_buffer_) mtp_yield();
    49e6:	cbz	r0, 49ea <MTPD::get_buffer()+0x12>
    49e8:	pop	{r4, pc}
    49ea:	bl	16e0 <mtp_yield()>
    49ee:	b.n	49dc <MTPD::get_buffer()+0x4>

000049f0 <MTPD::write(char const*, int) [clone .part.2]>:
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    49f0:	cmp	r2, #0
    49f2:	ble.n	4a52 <MTPD::write(char const*, int) [clone .part.2]+0x62>
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    49f4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    49f8:	mov.w	r9, #0
    49fc:	mov	r6, r2
    49fe:	mov	r7, r1
    4a00:	mov	r5, r0
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    4a02:	mov	r8, r9
    4a04:	b.n	4a0a <MTPD::write(char const*, int) [clone .part.2]+0x1a>
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    4a06:	cmp	r6, r9
    4a08:	ble.n	4a4e <MTPD::write(char const*, int) [clone .part.2]+0x5e>
        get_buffer();
    4a0a:	mov	r0, r5
    4a0c:	bl	49d8 <MTPD::get_buffer()>
        int avail = sizeof(data_buffer_->buf) - data_buffer_->len;
    4a10:	ldr	r3, [r5, #4]
    4a12:	ldrh.w	r0, [r3], #8
    4a16:	rsb	r2, r9, r6
    4a1a:	rsb	r4, r0, #64	; 0x40
    4a1e:	cmp	r4, r2
    4a20:	it	ge
    4a22:	movge	r4, r2
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
    4a24:	add.w	r1, r7, r9
    4a28:	add	r0, r3
    4a2a:	mov	r2, r4
    4a2c:	bl	c198 <memcpy>
        data_buffer_->len += to_copy;
    4a30:	ldr	r1, [r5, #4]
    4a32:	ldrh	r3, [r1, #0]
    4a34:	add	r3, r4
    4a36:	uxth	r3, r3
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    4a38:	cmp	r3, #64	; 0x40
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
    4a3a:	add	r9, r4
        int avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
        data_buffer_->len += to_copy;
    4a3c:	strh	r3, [r1, #0]
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    4a3e:	bne.n	4a06 <MTPD::write(char const*, int) [clone .part.2]+0x16>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
    4a40:	movs	r0, #4
    4a42:	bl	cf20 <usb_tx>
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    4a46:	cmp	r6, r9
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    4a48:	str.w	r8, [r5, #4]
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    4a4c:	bgt.n	4a0a <MTPD::write(char const*, int) [clone .part.2]+0x1a>
    4a4e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4a52:	bx	lr

00004a54 <MTPD::writestring(char const*)>:
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    4a54:	push	{r4, r5, lr}
    if (*str) 
    4a56:	ldrb	r3, [r1, #0]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    4a58:	sub	sp, #12
    4a5a:	mov	r4, r0
    if (*str) 
    4a5c:	cbz	r3, 4ab8 <MTPD::writestring(char const*)+0x64>
    { write8(strlen(str) + 1);
    4a5e:	mov	r0, r1
    4a60:	mov	r5, r1
    4a62:	bl	f940 <strlen>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4a66:	ldrb	r1, [r4, #8]
    4a68:	adds	r0, #1
    4a6a:	strb.w	r0, [sp, #3]
    4a6e:	cbz	r1, 4aca <MTPD::writestring(char const*)+0x76>
      write_length_ += len;
    4a70:	ldr	r3, [r4, #12]
    4a72:	adds	r3, #1
    4a74:	str	r3, [r4, #12]
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    4a76:	ldrb	r2, [r5, #0]
    4a78:	cbnz	r2, 4a88 <MTPD::writestring(char const*)+0x34>
    4a7a:	b.n	4ab0 <MTPD::writestring(char const*)+0x5c>
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    4a7c:	ldr	r3, [r4, #12]
    4a7e:	adds	r3, #2
    4a80:	str	r3, [r4, #12]
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    4a82:	ldrb.w	r2, [r5, #1]!
    4a86:	cbz	r2, 4aa6 <MTPD::writestring(char const*)+0x52>
    4a88:	strh.w	r2, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4a8c:	cmp	r1, #0
    4a8e:	bne.n	4a7c <MTPD::writestring(char const*)+0x28>
    4a90:	movs	r2, #2
    4a92:	add.w	r1, sp, #6
    4a96:	mov	r0, r4
    4a98:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    4a9c:	ldrb.w	r2, [r5, #1]!
    4aa0:	ldrb	r1, [r4, #8]
    4aa2:	cmp	r2, #0
    4aa4:	bne.n	4a88 <MTPD::writestring(char const*)+0x34>
    4aa6:	movs	r3, #0
    4aa8:	strh.w	r3, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4aac:	cbz	r1, 4aee <MTPD::writestring(char const*)+0x9a>
    4aae:	ldr	r3, [r4, #12]
      write_length_ += len;
    4ab0:	adds	r3, #2
    4ab2:	str	r3, [r4, #12]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    4ab4:	add	sp, #12
    4ab6:	pop	{r4, r5, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4ab8:	ldrb	r2, [r0, #8]
    4aba:	strb.w	r3, [sp, #2]
    4abe:	cbz	r2, 4ae0 <MTPD::writestring(char const*)+0x8c>
      write_length_ += len;
    4ac0:	ldr	r3, [r0, #12]
    4ac2:	adds	r3, #1
    4ac4:	str	r3, [r0, #12]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    4ac6:	add	sp, #12
    4ac8:	pop	{r4, r5, pc}
    4aca:	movs	r2, #1
    4acc:	add.w	r1, sp, #3
    4ad0:	mov	r0, r4
    4ad2:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    4ad6:	ldrb	r2, [r5, #0]
    4ad8:	ldrb	r1, [r4, #8]
    4ada:	cmp	r2, #0
    4adc:	bne.n	4a88 <MTPD::writestring(char const*)+0x34>
    4ade:	b.n	4aa6 <MTPD::writestring(char const*)+0x52>
    4ae0:	movs	r2, #1
    4ae2:	add.w	r1, sp, #2
    4ae6:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    } else 
    { write8(0);
    }
  }
    4aea:	add	sp, #12
    4aec:	pop	{r4, r5, pc}
    4aee:	mov	r0, r4
    4af0:	movs	r2, #2
    4af2:	add	r1, sp, #4
    4af4:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    4af8:	add	sp, #12
    4afa:	pop	{r4, r5, pc}

00004afc <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>:
        writestring(MTP_NAME);
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    4afc:	push	{r4, r5, r6, lr}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4afe:	ldrb	r3, [r0, #8]
        writestring(MTP_NAME);
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    4b00:	sub	sp, #8
    4b02:	mov	r4, r0
    4b04:	mov	r5, r1
    4b06:	strh.w	r1, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4b0a:	cbz	r3, 4b44 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x48>
      write_length_ += len;
    4b0c:	ldr	r3, [r0, #12]
    4b0e:	movw	r2, #65535	; 0xffff
    4b12:	adds	r3, #2
    4b14:	str	r3, [r0, #12]
    4b16:	strh.w	r2, [sp, #6]
    4b1a:	adds	r3, #2
    4b1c:	movs	r2, #0
    4b1e:	str	r3, [r4, #12]
    4b20:	strb.w	r2, [sp, #2]
    4b24:	adds	r3, #1
    4b26:	str	r3, [r4, #12]
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    4b28:	movw	r3, #54274	; 0xd402
    4b2c:	cmp	r5, r3
    4b2e:	beq.n	4b80 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x84>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4b30:	ldrb	r3, [r4, #8]
    4b32:	movs	r2, #0
    4b34:	strb.w	r2, [sp, #3]
    4b38:	cbz	r3, 4b9c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xa0>
      write_length_ += len;
    4b3a:	ldr	r3, [r4, #12]
    4b3c:	adds	r3, #1
    4b3e:	str	r3, [r4, #12]
        write8(0);       // read-only
        GetDevicePropValue(prop);
        GetDevicePropValue(prop);
        write8(0);       // no form
    }
  }
    4b40:	add	sp, #8
    4b42:	pop	{r4, r5, r6, pc}
    4b44:	movs	r2, #2
    4b46:	add	r1, sp, #4
    4b48:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    4b4c:	ldrb	r6, [r4, #8]
    4b4e:	movw	r3, #65535	; 0xffff
    4b52:	strh.w	r3, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4b56:	cbnz	r6, 4bac <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb0>
    4b58:	movs	r2, #2
    4b5a:	add.w	r1, sp, #6
    4b5e:	mov	r0, r4
    4b60:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    4b64:	ldrb	r3, [r4, #8]
    4b66:	strb.w	r6, [sp, #2]
    4b6a:	cbnz	r3, 4bb0 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb4>
    4b6c:	movs	r2, #1
    4b6e:	add.w	r1, sp, #2
    4b72:	mov	r0, r4
    4b74:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    4b78:	movw	r3, #54274	; 0xd402
    4b7c:	cmp	r5, r3
    4b7e:	bne.n	4b30 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x34>
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    4b80:	ldr	r1, [pc, #48]	; (4bb4 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb8>)
    4b82:	mov	r0, r4
    4b84:	bl	4a54 <MTPD::writestring(char const*)>
    4b88:	ldr	r1, [pc, #40]	; (4bb4 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb8>)
    4b8a:	mov	r0, r4
    4b8c:	bl	4a54 <MTPD::writestring(char const*)>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4b90:	ldrb	r3, [r4, #8]
    4b92:	movs	r2, #0
    4b94:	strb.w	r2, [sp, #3]
    4b98:	cmp	r3, #0
    4b9a:	bne.n	4b3a <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x3e>
    4b9c:	mov	r0, r4
    4b9e:	movs	r2, #1
    4ba0:	add.w	r1, sp, #3
    4ba4:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
        write8(0);       // read-only
        GetDevicePropValue(prop);
        GetDevicePropValue(prop);
        write8(0);       // no form
    }
  }
    4ba8:	add	sp, #8
    4baa:	pop	{r4, r5, r6, pc}
    4bac:	ldr	r3, [r4, #12]
    4bae:	b.n	4b1a <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x1e>
    4bb0:	ldr	r3, [r4, #12]
    4bb2:	b.n	4b24 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x28>
    4bb4:	.word	0x000130e4

00004bb8 <MTPD::WriteDescriptor()>:
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    4bb8:	push	{r4, r5, r6, r7, lr}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4bba:	ldrb	r3, [r0, #8]
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    4bbc:	sub	sp, #68	; 0x44
    4bbe:	movs	r5, #100	; 0x64
    4bc0:	mov	r4, r0
    4bc2:	strh.w	r5, [sp, #10]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4bc6:	cmp	r3, #0
    4bc8:	beq.w	4cd8 <MTPD::WriteDescriptor()+0x120>
      write_length_ += len;
    4bcc:	ldr	r3, [r0, #12]
    4bce:	movs	r2, #6
    4bd0:	adds	r3, #2
    4bd2:	str	r3, [r0, #12]
    4bd4:	str	r2, [sp, #24]
    4bd6:	adds	r3, #4
    4bd8:	movs	r2, #100	; 0x64
    4bda:	str	r3, [r4, #12]
    4bdc:	strh.w	r2, [sp, #8]
    4be0:	adds	r3, #2
    4be2:	str	r3, [r4, #12]
  void MTPD::WriteDescriptor() {
    write16(100);  // MTP version
    write32(6);    // MTP extension
//    write32(0xFFFFFFFFUL);    // MTP extension
    write16(100);  // MTP version
    writestring("microsoft.com: 1.0;");
    4be4:	ldr	r1, [pc, #504]	; (4de0 <MTPD::WriteDescriptor()+0x228>)
    4be6:	mov	r0, r4
    4be8:	bl	4a54 <MTPD::writestring(char const*)>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4bec:	ldrb	r3, [r4, #8]
    4bee:	movs	r2, #0
    4bf0:	strh.w	r2, [sp, #6]
    4bf4:	cmp	r3, #0
    4bf6:	beq.w	4d9a <MTPD::WriteDescriptor()+0x1e2>
      write_length_ += len;
    4bfa:	ldr	r3, [r4, #12]
    4bfc:	movs	r2, #20
    4bfe:	adds	r3, #2
    4c00:	str	r3, [r4, #12]
    4c02:	str	r2, [sp, #20]
    4c04:	adds	r3, #4
    4c06:	str	r3, [r4, #12]
    4c08:	movs	r6, #1
    4c0a:	ldr	r5, [pc, #472]	; (4de4 <MTPD::WriteDescriptor()+0x22c>)
    4c0c:	movw	r3, #4097	; 0x1001
    4c10:	add.w	r7, r5, #38	; 0x26
    4c14:	b.n	4c26 <MTPD::WriteDescriptor()+0x6e>
    4c16:	ldr	r3, [r4, #12]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    4c18:	cmp	r5, r7
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    4c1a:	add.w	r3, r3, #2
    4c1e:	str	r3, [r4, #12]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    4c20:	beq.n	4c3e <MTPD::WriteDescriptor()+0x86>
    4c22:	ldrh.w	r3, [r5, #2]!
    4c26:	strh.w	r3, [sp, #12]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4c2a:	cmp	r6, #0
    4c2c:	bne.n	4c16 <MTPD::WriteDescriptor()+0x5e>
    4c2e:	movs	r2, #2
    4c30:	add	r1, sp, #12
    4c32:	mov	r0, r4
    4c34:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    4c38:	cmp	r5, r7
    4c3a:	ldrb	r6, [r4, #8]
    4c3c:	bne.n	4c22 <MTPD::WriteDescriptor()+0x6a>
    4c3e:	movs	r3, #0
    4c40:	str	r3, [sp, #28]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4c42:	cmp	r6, #0
    4c44:	beq.n	4d0c <MTPD::WriteDescriptor()+0x154>
      write_length_ += len;
    4c46:	ldr	r3, [r4, #12]
    4c48:	movs	r2, #1
    4c4a:	adds	r3, #4
    4c4c:	str	r3, [r4, #12]
    4c4e:	str	r2, [sp, #40]	; 0x28
    4c50:	adds	r3, #4
    4c52:	movw	r2, #54274	; 0xd402
    4c56:	str	r3, [r4, #12]
    4c58:	strh.w	r2, [sp, #18]
    4c5c:	adds	r3, #2
    4c5e:	movs	r2, #0
    4c60:	str	r3, [r4, #12]
    4c62:	str	r2, [sp, #36]	; 0x24
    4c64:	adds	r3, #4
    4c66:	movs	r2, #2
    4c68:	str	r3, [r4, #12]
    4c6a:	str	r2, [sp, #32]
    4c6c:	adds	r3, #4
    4c6e:	mov.w	r2, #12288	; 0x3000
    4c72:	str	r3, [r4, #12]
    4c74:	strh.w	r2, [sp, #16]
    4c78:	adds	r3, #2
    4c7a:	movw	r2, #12289	; 0x3001
    4c7e:	str	r3, [r4, #12]
    4c80:	strh.w	r2, [sp, #14]
    4c84:	adds	r3, #2
    4c86:	str	r3, [r4, #12]

    write32(2);       // Playback formats (array of uint16)
    write16(0x3000);  // Undefined format
    write16(0x3001);  // Folders (associations)

    writestring(MTP_MANUF);     // Manufacturer
    4c88:	ldr	r1, [pc, #348]	; (4de8 <MTPD::WriteDescriptor()+0x230>)
    4c8a:	mov	r0, r4
    4c8c:	bl	4a54 <MTPD::writestring(char const*)>
    writestring(MTP_MODEL);     // Model
    4c90:	ldr	r1, [pc, #344]	; (4dec <MTPD::WriteDescriptor()+0x234>)
    4c92:	mov	r0, r4
    4c94:	bl	4a54 <MTPD::writestring(char const*)>
    //writestring(MTP_VERS);      // version
    //writestring(MTP_SERNR);     // serial
    
    char buf[20];    
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf);
    4c98:	vldr	s0, [pc, #340]	; 4df0 <MTPD::WriteDescriptor()+0x238>
    4c9c:	add	r2, sp, #44	; 0x2c
    4c9e:	movs	r1, #2
    4ca0:	movs	r0, #3
    4ca2:	bl	c6f8 <dtostrf>
    strlcat(buf, " / MTP " MTP_VERS, sizeof(buf) );
    4ca6:	movs	r2, #20
    4ca8:	ldr	r1, [pc, #328]	; (4df4 <MTPD::WriteDescriptor()+0x23c>)
    4caa:	add	r0, sp, #44	; 0x2c
    4cac:	bl	f890 <strlcat>
    writestring( buf );    
    4cb0:	mov	r0, r4
    4cb2:	add	r1, sp, #44	; 0x2c
    4cb4:	bl	4a54 <MTPD::writestring(char const*)>
    4cb8:	ldr	r2, [pc, #316]	; (4df8 <MTPD::WriteDescriptor()+0x240>)
    4cba:	add	r3, sp, #44	; 0x2c
    4cbc:	add.w	r0, sp, #54	; 0x36
    
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    4cc0:	ldrh.w	r1, [r2, #2]!
    4cc4:	strb.w	r1, [r3], #1
    4cc8:	cmp	r0, r3
    4cca:	bne.n	4cc0 <MTPD::WriteDescriptor()+0x108>
    writestring(buf);    
    4ccc:	add	r1, sp, #44	; 0x2c
    4cce:	mov	r0, r4
    4cd0:	bl	4a54 <MTPD::writestring(char const*)>
  }
    4cd4:	add	sp, #68	; 0x44
    4cd6:	pop	{r4, r5, r6, r7, pc}
    4cd8:	movs	r2, #2
    4cda:	add.w	r1, sp, #10
    4cde:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    4ce2:	ldrb	r3, [r4, #8]
    4ce4:	movs	r2, #6
    4ce6:	str	r2, [sp, #24]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4ce8:	cmp	r3, #0
    4cea:	bne.n	4dbc <MTPD::WriteDescriptor()+0x204>
    4cec:	movs	r2, #4
    4cee:	add	r1, sp, #24
    4cf0:	mov	r0, r4
    4cf2:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    4cf6:	ldrb	r3, [r4, #8]
    4cf8:	strh.w	r5, [sp, #8]
    4cfc:	cmp	r3, #0
    4cfe:	bne.n	4dc0 <MTPD::WriteDescriptor()+0x208>
    4d00:	movs	r2, #2
    4d02:	add	r1, sp, #8
    4d04:	mov	r0, r4
    4d06:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    4d0a:	b.n	4be4 <MTPD::WriteDescriptor()+0x2c>
    4d0c:	movs	r2, #4
    4d0e:	add	r1, sp, #28
    4d10:	mov	r0, r4
    4d12:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    4d16:	ldrb	r3, [r4, #8]
    4d18:	movs	r2, #1
    4d1a:	str	r2, [sp, #40]	; 0x28
    4d1c:	cmp	r3, #0
    4d1e:	bne.n	4dc4 <MTPD::WriteDescriptor()+0x20c>
    4d20:	movs	r2, #4
    4d22:	add	r1, sp, #40	; 0x28
    4d24:	mov	r0, r4
    4d26:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    4d2a:	ldrb	r3, [r4, #8]
    4d2c:	movw	r2, #54274	; 0xd402
    4d30:	strh.w	r2, [sp, #18]
    4d34:	cmp	r3, #0
    4d36:	bne.n	4dc8 <MTPD::WriteDescriptor()+0x210>
    4d38:	movs	r2, #2
    4d3a:	add.w	r1, sp, #18
    4d3e:	mov	r0, r4
    4d40:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    4d44:	ldrb	r3, [r4, #8]
    4d46:	str	r6, [sp, #36]	; 0x24
    4d48:	cmp	r3, #0
    4d4a:	bne.n	4dcc <MTPD::WriteDescriptor()+0x214>
    4d4c:	movs	r2, #4
    4d4e:	add	r1, sp, #36	; 0x24
    4d50:	mov	r0, r4
    4d52:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    4d56:	ldrb	r3, [r4, #8]
    4d58:	movs	r5, #2
    4d5a:	str	r5, [sp, #32]
    4d5c:	cmp	r3, #0
    4d5e:	bne.n	4dd0 <MTPD::WriteDescriptor()+0x218>
    4d60:	movs	r2, #4
    4d62:	add	r1, sp, #32
    4d64:	mov	r0, r4
    4d66:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    4d6a:	ldrb	r3, [r4, #8]
    4d6c:	mov.w	r2, #12288	; 0x3000
    4d70:	strh.w	r2, [sp, #16]
    4d74:	cbnz	r3, 4dd4 <MTPD::WriteDescriptor()+0x21c>
    4d76:	mov	r2, r5
    4d78:	add	r1, sp, #16
    4d7a:	mov	r0, r4
    4d7c:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    4d80:	ldrb	r3, [r4, #8]
    4d82:	movw	r2, #12289	; 0x3001
    4d86:	strh.w	r2, [sp, #14]
    4d8a:	cbnz	r3, 4dd8 <MTPD::WriteDescriptor()+0x220>
    4d8c:	mov	r2, r5
    4d8e:	add.w	r1, sp, #14
    4d92:	mov	r0, r4
    4d94:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    4d98:	b.n	4c88 <MTPD::WriteDescriptor()+0xd0>
    4d9a:	movs	r2, #2
    4d9c:	add.w	r1, sp, #6
    4da0:	mov	r0, r4
    4da2:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    4da6:	ldrb	r3, [r4, #8]
    4da8:	movs	r2, #20
    4daa:	str	r2, [sp, #20]
    4dac:	cbnz	r3, 4ddc <MTPD::WriteDescriptor()+0x224>
    4dae:	movs	r2, #4
    4db0:	add	r1, sp, #20
    4db2:	mov	r0, r4
    4db4:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    4db8:	ldrb	r6, [r4, #8]
    4dba:	b.n	4c0a <MTPD::WriteDescriptor()+0x52>
    4dbc:	ldr	r3, [r4, #12]
    4dbe:	b.n	4bd6 <MTPD::WriteDescriptor()+0x1e>
    4dc0:	ldr	r3, [r4, #12]
    4dc2:	b.n	4be0 <MTPD::WriteDescriptor()+0x28>
    4dc4:	ldr	r3, [r4, #12]
    4dc6:	b.n	4c50 <MTPD::WriteDescriptor()+0x98>
    4dc8:	ldr	r3, [r4, #12]
    4dca:	b.n	4c5c <MTPD::WriteDescriptor()+0xa4>
    4dcc:	ldr	r3, [r4, #12]
    4dce:	b.n	4c64 <MTPD::WriteDescriptor()+0xac>
    4dd0:	ldr	r3, [r4, #12]
    4dd2:	b.n	4c6c <MTPD::WriteDescriptor()+0xb4>
    4dd4:	ldr	r3, [r4, #12]
    4dd6:	b.n	4c78 <MTPD::WriteDescriptor()+0xc0>
    4dd8:	ldr	r3, [r4, #12]
    4dda:	b.n	4c84 <MTPD::WriteDescriptor()+0xcc>
    4ddc:	ldr	r3, [r4, #12]
    4dde:	b.n	4c04 <MTPD::WriteDescriptor()+0x4c>
    4de0:	.word	0x000130ec
    4de4:	.word	0x000130ac
    4de8:	.word	0x00013100
    4dec:	.word	0x000130e4
    4df0:	.word	0x3fc51eb8
    4df4:	.word	0x00013108
    4df8:	.word	0x1fff0a9c

00004dfc <MTPD::WriteStorageIDs()>:
    
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    writestring(buf);    
  }

  void MTPD::WriteStorageIDs() {
    4dfc:	push	{r4, r5, r6, lr}
    4dfe:	mov	r5, r0
    uint32_t num=storage_->get_FSCount();
    4e00:	ldr	r0, [r0, #0]
    4e02:	ldr	r2, [pc, #92]	; (4e60 <MTPD::WriteStorageIDs()+0x64>)
    4e04:	ldr	r3, [r0, #0]
    4e06:	ldr	r3, [r3, #4]
    4e08:	cmp	r3, r2
    
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    writestring(buf);    
  }

  void MTPD::WriteStorageIDs() {
    4e0a:	sub	sp, #8
    4e0c:	bne.n	4e58 <MTPD::WriteStorageIDs()+0x5c>
        sd_name[fsCount] = name;
        sdx[fsCount++] = &fs;
      }
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    4e0e:	ldr	r6, [r0, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4e10:	ldrb	r3, [r5, #8]
    4e12:	str	r6, [sp, #0]
    4e14:	cbz	r3, 4e4c <MTPD::WriteStorageIDs()+0x50>
      write_length_ += len;
    4e16:	ldr	r3, [r5, #12]
    4e18:	adds	r3, #4
    4e1a:	str	r3, [r5, #12]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    4e1c:	cbz	r6, 4e48 <MTPD::WriteStorageIDs()+0x4c>
    4e1e:	movs	r4, #0
    4e20:	b.n	4e2e <MTPD::WriteStorageIDs()+0x32>
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    4e22:	ldr	r3, [r5, #12]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    4e24:	cmp	r6, r4
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    4e26:	add.w	r3, r3, #4
    4e2a:	str	r3, [r5, #12]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    4e2c:	beq.n	4e48 <MTPD::WriteStorageIDs()+0x4c>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4e2e:	ldrb	r3, [r5, #8]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    4e30:	adds	r4, #1
    4e32:	str	r4, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4e34:	cmp	r3, #0
    4e36:	bne.n	4e22 <MTPD::WriteStorageIDs()+0x26>
    4e38:	movs	r2, #4
    4e3a:	add.w	r1, sp, r2
    4e3e:	mov	r0, r5
    4e40:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    4e44:	cmp	r6, r4
    4e46:	bne.n	4e2e <MTPD::WriteStorageIDs()+0x32>
  }
    4e48:	add	sp, #8
    4e4a:	pop	{r4, r5, r6, pc}
    4e4c:	movs	r2, #4
    4e4e:	mov	r1, sp
    4e50:	mov	r0, r5
    4e52:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    4e56:	b.n	4e1c <MTPD::WriteStorageIDs()+0x20>
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    writestring(buf);    
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    4e58:	blx	r3
    4e5a:	mov	r6, r0
    4e5c:	b.n	4e10 <MTPD::WriteStorageIDs()+0x14>
    4e5e:	nop
    4e60:	.word	0x0000147d

00004e64 <MTPD::GetObjectHandles(unsigned long, unsigned long)>:
    while (storage_->GetNextObjectHandle(store)) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    4e64:	push	{r4, r5, r6, lr}
    if (write_get_length_) {
    4e66:	ldrb	r3, [r0, #8]
    while (storage_->GetNextObjectHandle(store)) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    4e68:	sub	sp, #8
    4e6a:	mov	r4, r0
    if (write_get_length_) {
    4e6c:	cbnz	r3, 4eb8 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x54>
    4e6e:	mov	r5, r1
    4e70:	mov	r6, r2
      write_length_ = GetNumObjects(storage, parent);
      write_length_++;
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
    4e72:	bl	49b0 <MTPD::GetNumObjects(unsigned long, unsigned long)>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4e76:	ldrb	r3, [r4, #8]
    4e78:	str	r0, [sp, #0]
    4e7a:	cbz	r3, 4ec6 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x62>
      write_length_ += len;
    4e7c:	ldr	r3, [r4, #12]
    4e7e:	adds	r3, #4
    4e80:	str	r3, [r4, #12]
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(store, parent);
    4e82:	ldr	r0, [r4, #0]
    4e84:	ldr	r3, [r0, #0]
    while (storage_->GetNextObjectHandle(store)) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    4e86:	subs	r5, #1
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(store, parent);
    4e88:	mov	r2, r6
    4e8a:	ldr	r3, [r3, #28]
    4e8c:	mov	r1, r5
    4e8e:	blx	r3
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    4e90:	ldr	r0, [r4, #0]
    4e92:	ldr	r3, [r0, #0]
    4e94:	mov	r1, r5
    4e96:	ldr	r3, [r3, #32]
    4e98:	blx	r3
    4e9a:	cbz	r0, 4ec2 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x5e>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4e9c:	ldrb	r3, [r4, #8]
    4e9e:	str	r0, [sp, #4]
    4ea0:	cbz	r3, 4eaa <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x46>
      write_length_ += len;
    4ea2:	ldr	r3, [r4, #12]
    4ea4:	adds	r3, #4
    4ea6:	str	r3, [r4, #12]
    4ea8:	b.n	4e90 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x2c>
    4eaa:	movs	r2, #4
    4eac:	add.w	r1, sp, r2
    4eb0:	mov	r0, r4
    4eb2:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    4eb6:	b.n	4e90 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x2c>
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    if (write_get_length_) {
      write_length_ = GetNumObjects(storage, parent);
    4eb8:	bl	49b0 <MTPD::GetNumObjects(unsigned long, unsigned long)>
      write_length_++;
      write_length_ *= 4;
    4ebc:	adds	r0, #1
    4ebe:	lsls	r0, r0, #2
    4ec0:	str	r0, [r4, #12]
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(store, parent);
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    }
  }
    4ec2:	add	sp, #8
    4ec4:	pop	{r4, r5, r6, pc}
    4ec6:	movs	r2, #4
    4ec8:	mov	r1, sp
    4eca:	mov	r0, r4
    4ecc:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    4ed0:	b.n	4e82 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1e>
    4ed2:	nop

00004ed4 <MTPD::GetObjectInfo(unsigned long)>:
  
  void MTPD::GetObjectInfo(uint32_t handle) 
  {
    4ed4:	push	{r4, r5, r6, r7, lr}
    4ed6:	mov	r4, r0
    4ed8:	sub	sp, #332	; 0x14c
    char filename[MAX_FILENAME_LEN];
    uint32_t size, parent;
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);
    4eda:	ldr	r0, [r0, #0]
    4edc:	add.w	r6, sp, #10
    4ee0:	add	r5, sp, #24
    4ee2:	ldr	r3, [r0, #0]
    4ee4:	stmia.w	sp, {r5, r6}
    4ee8:	add	r2, sp, #72	; 0x48
    4eea:	ldr	r7, [r3, #36]	; 0x24
    4eec:	add	r3, sp, #20
    4eee:	blx	r7
    4ef0:	ldrh	r3, [r6, #0]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4ef2:	ldrb	r2, [r4, #8]
    4ef4:	adds	r3, #1
    4ef6:	str	r3, [sp, #28]
    4ef8:	cmp	r2, #0
    4efa:	beq.n	4fb0 <MTPD::GetObjectInfo(unsigned long)+0xdc>
      write_length_ += len;
    4efc:	ldr	r3, [r4, #12]
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    4efe:	ldr	r2, [sp, #20]
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    4f00:	adds	r3, #4
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    4f02:	adds	r2, #1
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    4f04:	str	r3, [r4, #12]
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    4f06:	beq.w	50e0 <MTPD::GetObjectInfo(unsigned long)+0x20c>
    4f0a:	movs	r2, #0
    4f0c:	strh.w	r2, [sp, #16]
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    4f10:	adds	r3, #2
    4f12:	movs	r2, #0
    4f14:	str	r3, [r4, #12]
    4f16:	strh.w	r2, [sp, #14]
    4f1a:	adds	r3, #2
    4f1c:	ldr	r2, [sp, #20]
    4f1e:	str	r3, [r4, #12]
    4f20:	str	r2, [sp, #60]	; 0x3c
    4f22:	adds	r3, #4
    4f24:	movs	r2, #0
    4f26:	str	r3, [r4, #12]
    4f28:	strh.w	r2, [sp, #12]
    4f2c:	adds	r3, #2
    4f2e:	movs	r2, #0
    4f30:	str	r3, [r4, #12]
    4f32:	str	r2, [sp, #56]	; 0x38
    4f34:	adds	r3, #4
    4f36:	movs	r2, #0
    4f38:	str	r3, [r4, #12]
    4f3a:	str	r2, [sp, #52]	; 0x34
    4f3c:	adds	r3, #4
    4f3e:	movs	r2, #0
    4f40:	str	r3, [r4, #12]
    4f42:	str	r2, [sp, #48]	; 0x30
    4f44:	adds	r3, #4
    4f46:	movs	r2, #0
    4f48:	str	r3, [r4, #12]
    4f4a:	str	r2, [sp, #44]	; 0x2c
    4f4c:	adds	r3, #4
    4f4e:	movs	r2, #0
    4f50:	str	r3, [r4, #12]
    4f52:	str	r2, [sp, #40]	; 0x28
    4f54:	adds	r3, #4
    4f56:	movs	r2, #0
    4f58:	str	r3, [r4, #12]
    4f5a:	str	r2, [sp, #36]	; 0x24
    4f5c:	adds	r3, #4
    4f5e:	ldr	r2, [r5, #0]
    4f60:	str	r3, [r4, #12]
    4f62:	str	r2, [sp, #32]
    4f64:	ldr	r2, [sp, #20]
    4f66:	sub.w	r2, r2, #4294967295
    4f6a:	clz	r2, r2
    4f6e:	lsrs	r2, r2, #5
    4f70:	adds	r3, #4
    4f72:	str	r3, [r4, #12]
    4f74:	strh.w	r2, [sp, #18]
    4f78:	adds	r3, #2
    4f7a:	movs	r2, #0
    4f7c:	str	r3, [r4, #12]
    4f7e:	str	r2, [sp, #68]	; 0x44
    4f80:	adds	r3, #4
    4f82:	movs	r2, #0
    4f84:	str	r3, [r4, #12]
    4f86:	str	r2, [sp, #64]	; 0x40
    4f88:	adds	r3, #4
    4f8a:	str	r3, [r4, #12]
    write32(0); // bit depth
    write32(parent); // parent
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    write32(0); // association description
    write32(0);  // sequence number
    writestring(filename);
    4f8c:	add	r1, sp, #72	; 0x48
    4f8e:	mov	r0, r4
    4f90:	bl	4a54 <MTPD::writestring(char const*)>
    writestring("");  // date created
    4f94:	mov	r0, r4
    4f96:	ldr	r1, [pc, #396]	; (5124 <MTPD::GetObjectInfo(unsigned long)+0x250>)
    4f98:	bl	4a54 <MTPD::writestring(char const*)>
    writestring("");  // date modified
    4f9c:	mov	r0, r4
    4f9e:	ldr	r1, [pc, #388]	; (5124 <MTPD::GetObjectInfo(unsigned long)+0x250>)
    4fa0:	bl	4a54 <MTPD::writestring(char const*)>
    writestring("");  // keywords
    4fa4:	mov	r0, r4
    4fa6:	ldr	r1, [pc, #380]	; (5124 <MTPD::GetObjectInfo(unsigned long)+0x250>)
    4fa8:	bl	4a54 <MTPD::writestring(char const*)>
  }
    4fac:	add	sp, #332	; 0x14c
    4fae:	pop	{r4, r5, r6, r7, pc}
    4fb0:	add	r1, sp, #28
    4fb2:	movs	r2, #4
    4fb4:	mov	r0, r4
    4fb6:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    4fba:	ldr	r3, [sp, #20]
    4fbc:	ldrb	r6, [r4, #8]
    4fbe:	adds	r3, #1
    4fc0:	movw	r3, #12289	; 0x3001
    4fc4:	it	ne
    4fc6:	movne	r3, #0
    4fc8:	strh.w	r3, [sp, #16]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4fcc:	cmp	r6, #0
    4fce:	bne.w	50f2 <MTPD::GetObjectInfo(unsigned long)+0x21e>
    4fd2:	add	r1, sp, #16
    4fd4:	movs	r2, #2
    4fd6:	mov	r0, r4
    4fd8:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    4fdc:	ldrb	r3, [r4, #8]
    4fde:	strh.w	r6, [sp, #14]
    4fe2:	cmp	r3, #0
    4fe4:	bne.w	50f6 <MTPD::GetObjectInfo(unsigned long)+0x222>
    4fe8:	movs	r2, #2
    4fea:	add.w	r1, sp, #14
    4fee:	mov	r0, r4
    4ff0:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    4ff4:	ldrb	r3, [r4, #8]
    4ff6:	ldr	r2, [sp, #20]
    4ff8:	str	r2, [sp, #60]	; 0x3c
    4ffa:	cmp	r3, #0
    4ffc:	bne.n	50fa <MTPD::GetObjectInfo(unsigned long)+0x226>
    4ffe:	add	r1, sp, #60	; 0x3c
    5000:	movs	r2, #4
    5002:	mov	r0, r4
    5004:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5008:	ldrb	r3, [r4, #8]
    500a:	strh.w	r6, [sp, #12]
    500e:	cmp	r3, #0
    5010:	bne.n	50fe <MTPD::GetObjectInfo(unsigned long)+0x22a>
    5012:	add	r1, sp, #12
    5014:	movs	r2, #2
    5016:	mov	r0, r4
    5018:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    501c:	ldrb	r3, [r4, #8]
    501e:	str	r6, [sp, #56]	; 0x38
    5020:	cmp	r3, #0
    5022:	bne.n	5102 <MTPD::GetObjectInfo(unsigned long)+0x22e>
    5024:	add	r1, sp, #56	; 0x38
    5026:	movs	r2, #4
    5028:	mov	r0, r4
    502a:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    502e:	ldrb	r3, [r4, #8]
    5030:	str	r6, [sp, #52]	; 0x34
    5032:	cmp	r3, #0
    5034:	bne.n	5106 <MTPD::GetObjectInfo(unsigned long)+0x232>
    5036:	add	r1, sp, #52	; 0x34
    5038:	movs	r2, #4
    503a:	mov	r0, r4
    503c:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5040:	ldrb	r3, [r4, #8]
    5042:	str	r6, [sp, #48]	; 0x30
    5044:	cmp	r3, #0
    5046:	bne.n	510a <MTPD::GetObjectInfo(unsigned long)+0x236>
    5048:	add	r1, sp, #48	; 0x30
    504a:	movs	r2, #4
    504c:	mov	r0, r4
    504e:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5052:	ldrb	r3, [r4, #8]
    5054:	str	r6, [sp, #44]	; 0x2c
    5056:	cmp	r3, #0
    5058:	bne.n	510e <MTPD::GetObjectInfo(unsigned long)+0x23a>
    505a:	add	r1, sp, #44	; 0x2c
    505c:	movs	r2, #4
    505e:	mov	r0, r4
    5060:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5064:	ldrb	r3, [r4, #8]
    5066:	str	r6, [sp, #40]	; 0x28
    5068:	cmp	r3, #0
    506a:	bne.n	5112 <MTPD::GetObjectInfo(unsigned long)+0x23e>
    506c:	add	r1, sp, #40	; 0x28
    506e:	movs	r2, #4
    5070:	mov	r0, r4
    5072:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5076:	ldrb	r3, [r4, #8]
    5078:	str	r6, [sp, #36]	; 0x24
    507a:	cmp	r3, #0
    507c:	bne.n	5116 <MTPD::GetObjectInfo(unsigned long)+0x242>
    507e:	movs	r2, #4
    5080:	add	r1, sp, #36	; 0x24
    5082:	mov	r0, r4
    5084:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5088:	ldrb	r3, [r4, #8]
    508a:	ldr	r2, [r5, #0]
    508c:	str	r2, [sp, #32]
    508e:	cmp	r3, #0
    5090:	bne.n	511a <MTPD::GetObjectInfo(unsigned long)+0x246>
    5092:	add	r1, sp, #32
    5094:	movs	r2, #4
    5096:	mov	r0, r4
    5098:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    509c:	ldr	r3, [sp, #20]
    509e:	ldrb	r6, [r4, #8]
    50a0:	sub.w	r3, r3, #4294967295
    50a4:	clz	r3, r3
    50a8:	lsrs	r3, r3, #5
    50aa:	strh.w	r3, [sp, #18]
    50ae:	cmp	r6, #0
    50b0:	bne.n	511e <MTPD::GetObjectInfo(unsigned long)+0x24a>
    50b2:	add.w	r1, sp, #18
    50b6:	movs	r2, #2
    50b8:	mov	r0, r4
    50ba:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    50be:	ldrb	r5, [r4, #8]
    50c0:	str	r6, [sp, #68]	; 0x44
    50c2:	cbnz	r5, 50ee <MTPD::GetObjectInfo(unsigned long)+0x21a>
    50c4:	add	r1, sp, #68	; 0x44
    50c6:	movs	r2, #4
    50c8:	mov	r0, r4
    50ca:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    50ce:	ldrb	r3, [r4, #8]
    50d0:	str	r5, [sp, #64]	; 0x40
    50d2:	cbnz	r3, 50ea <MTPD::GetObjectInfo(unsigned long)+0x216>
    50d4:	add	r1, sp, #64	; 0x40
    50d6:	movs	r2, #4
    50d8:	mov	r0, r4
    50da:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    50de:	b.n	4f8c <MTPD::GetObjectInfo(unsigned long)+0xb8>
    50e0:	movw	r2, #12289	; 0x3001
    50e4:	strh.w	r2, [sp, #16]
    50e8:	b.n	4f10 <MTPD::GetObjectInfo(unsigned long)+0x3c>
    50ea:	ldr	r3, [r4, #12]
    50ec:	b.n	4f88 <MTPD::GetObjectInfo(unsigned long)+0xb4>
    50ee:	ldr	r3, [r4, #12]
    50f0:	b.n	4f80 <MTPD::GetObjectInfo(unsigned long)+0xac>
    50f2:	ldr	r3, [r4, #12]
    50f4:	b.n	4f10 <MTPD::GetObjectInfo(unsigned long)+0x3c>
    50f6:	ldr	r3, [r4, #12]
    50f8:	b.n	4f1a <MTPD::GetObjectInfo(unsigned long)+0x46>
    50fa:	ldr	r3, [r4, #12]
    50fc:	b.n	4f22 <MTPD::GetObjectInfo(unsigned long)+0x4e>
    50fe:	ldr	r3, [r4, #12]
    5100:	b.n	4f2c <MTPD::GetObjectInfo(unsigned long)+0x58>
    5102:	ldr	r3, [r4, #12]
    5104:	b.n	4f34 <MTPD::GetObjectInfo(unsigned long)+0x60>
    5106:	ldr	r3, [r4, #12]
    5108:	b.n	4f3c <MTPD::GetObjectInfo(unsigned long)+0x68>
    510a:	ldr	r3, [r4, #12]
    510c:	b.n	4f44 <MTPD::GetObjectInfo(unsigned long)+0x70>
    510e:	ldr	r3, [r4, #12]
    5110:	b.n	4f4c <MTPD::GetObjectInfo(unsigned long)+0x78>
    5112:	ldr	r3, [r4, #12]
    5114:	b.n	4f54 <MTPD::GetObjectInfo(unsigned long)+0x80>
    5116:	ldr	r3, [r4, #12]
    5118:	b.n	4f5c <MTPD::GetObjectInfo(unsigned long)+0x88>
    511a:	ldr	r3, [r4, #12]
    511c:	b.n	4f64 <MTPD::GetObjectInfo(unsigned long)+0x90>
    511e:	ldr	r3, [r4, #12]
    5120:	b.n	4f78 <MTPD::GetObjectInfo(unsigned long)+0xa4>
    5122:	nop
    5124:	.word	0x00012f70

00005128 <MTPD::getObjectPropsSupported(unsigned long)>:
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    5128:	push	{r4, r5, r6, r7, lr}
      write32(propertyListNum);
    512a:	ldr	r7, [pc, #96]	; (518c <MTPD::getObjectPropsSupported(unsigned long)+0x64>)
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    512c:	ldrb	r2, [r0, #8]
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
    512e:	ldr	r3, [r7, #0]
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    5130:	sub	sp, #12
    5132:	mov	r4, r0
    5134:	str	r3, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5136:	cbz	r2, 517e <MTPD::getObjectPropsSupported(unsigned long)+0x56>
      write_length_ += len;
    5138:	ldr	r2, [r0, #12]
    513a:	adds	r2, #4
    513c:	str	r2, [r0, #12]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    513e:	cbz	r3, 517a <MTPD::getObjectPropsSupported(unsigned long)+0x52>
    5140:	ldr	r6, [pc, #76]	; (5190 <MTPD::getObjectPropsSupported(unsigned long)+0x68>)
    5142:	movw	r3, #56321	; 0xdc01
    5146:	movs	r5, #0
    5148:	b.n	515c <MTPD::getObjectPropsSupported(unsigned long)+0x34>
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    514a:	ldr	r3, [r4, #12]
    514c:	adds	r3, #2
    514e:	str	r3, [r4, #12]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    5150:	ldr	r3, [r7, #0]
    5152:	adds	r5, #1
    5154:	cmp	r3, r5
    5156:	bls.n	517a <MTPD::getObjectPropsSupported(unsigned long)+0x52>
    5158:	ldrh.w	r3, [r6, #2]!
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    515c:	ldrb	r2, [r4, #8]
    515e:	strh.w	r3, [sp, #2]
    5162:	cmp	r2, #0
    5164:	bne.n	514a <MTPD::getObjectPropsSupported(unsigned long)+0x22>
    5166:	movs	r2, #2
    5168:	add.w	r1, sp, r2
    516c:	mov	r0, r4
    516e:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    5172:	ldr	r3, [r7, #0]
    5174:	adds	r5, #1
    5176:	cmp	r3, r5
    5178:	bhi.n	5158 <MTPD::getObjectPropsSupported(unsigned long)+0x30>
    }
    517a:	add	sp, #12
    517c:	pop	{r4, r5, r6, r7, pc}
    517e:	movs	r2, #4
    5180:	add.w	r1, sp, r2
    5184:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5188:	ldr	r3, [r7, #0]
    518a:	b.n	513e <MTPD::getObjectPropsSupported(unsigned long)+0x16>
    518c:	.word	0x1fff0978
    5190:	.word	0x000130d4

00005194 <MTPD::getObjectPropValue(unsigned long, unsigned long)>:
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[MAX_FILENAME_LEN];
    5194:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5198:	mov	r5, r0
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    519a:	ldr	r0, [r0, #0]
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[MAX_FILENAME_LEN];
    519c:	sub	sp, #316	; 0x13c
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    519e:	ldr	r3, [r0, #0]
    51a0:	add.w	r6, sp, #10
    51a4:	add	r7, sp, #20
    51a6:	str	r6, [sp, #4]
    51a8:	str	r7, [sp, #0]
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[MAX_FILENAME_LEN];
    51aa:	mov	r4, r2
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    51ac:	ldr.w	r9, [r3, #36]	; 0x24
    51b0:	add	r2, sp, #56	; 0x38
    51b2:	add	r3, sp, #16
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[MAX_FILENAME_LEN];
    51b4:	mov	r8, r1
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    51b6:	blx	r9
      dir = size == 0xFFFFFFFFUL;
      uint32_t storage = Store2Storage(store);
      switch(p2)
    51b8:	sub.w	r2, r4, #56320	; 0xdc00
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
      dir = size == 0xFFFFFFFFUL;
      uint32_t storage = Store2Storage(store);
    51bc:	ldrh	r3, [r6, #0]
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
      dir = size == 0xFFFFFFFFUL;
    51be:	ldr	r1, [sp, #16]
      uint32_t storage = Store2Storage(store);
      switch(p2)
    51c0:	subs	r2, #1
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
      dir = size == 0xFFFFFFFFUL;
      uint32_t storage = Store2Storage(store);
    51c2:	adds	r4, r3, #1
      switch(p2)
    51c4:	cmp	r2, #67	; 0x43
    51c6:	bhi.n	522c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    51c8:	tbb	[pc, r2]
    51cc:	.word	0x74674b41
    51d0:	.word	0x333a3030
    51d4:	.word	0x305c3033
    51d8:	.word	0x30303030
    51dc:	.word	0x30303030
    51e0:	.word	0x30303030
    51e4:	.word	0x30303030
    51e8:	.word	0x30303030
    51ec:	.word	0x30303030
    51f0:	.word	0x30303030
    51f4:	.word	0x30303030
    51f8:	.word	0x30303030
    51fc:	.word	0x30303030
    5200:	.word	0x30303030
    5204:	.word	0x30303030
    5208:	.word	0x30303030
    520c:	.word	0x3a303022
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5210:	ldrb	r3, [r5, #8]
    5212:	str.w	r8, [sp, #52]	; 0x34
    5216:	cmp	r3, #0
    5218:	beq.n	52c4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x130>
      write_length_ += len;
    521a:	ldr	r3, [r5, #12]
    521c:	adds	r3, #4
    521e:	str	r3, [r5, #12]
    5220:	adds	r3, #4
    5222:	str	r3, [r5, #12]
    5224:	adds	r3, #4
    5226:	str	r3, [r5, #12]
    5228:	adds	r3, #4
    522a:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    522c:	add	sp, #316	; 0x13c
    522e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          break;
        case MTP_PROPERTY_DATE_CREATED:       //0xDC08:
          writestring("");
          break;
        case MTP_PROPERTY_DATE_MODIFIED:      //0xDC09:
          writestring("");
    5232:	mov	r0, r5
    5234:	ldr	r1, [pc, #268]	; (5344 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1b0>)
    5236:	bl	4a54 <MTPD::writestring(char const*)>
          writestring(name);
          break;
        default:
          break;
      }
    }
    523a:	add	sp, #316	; 0x13c
    523c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          write32(parent);
          write32(storage);
          write32(0);
          break;
        case MTP_PROPERTY_NAME:               //0xDC44:
          writestring(name);
    5240:	add	r1, sp, #56	; 0x38
    5242:	mov	r0, r5
    5244:	bl	4a54 <MTPD::writestring(char const*)>
          break;
        default:
          break;
      }
    }
    5248:	add	sp, #316	; 0x13c
    524a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    524e:	ldrb	r3, [r5, #8]
    5250:	str	r4, [sp, #24]
    5252:	cmp	r3, #0
    5254:	beq.n	5310 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x17c>
      write_length_ += len;
    5256:	ldr	r3, [r5, #12]
    5258:	adds	r3, #4
    525a:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    525c:	add	sp, #316	; 0x13c
    525e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(storage);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    5262:	adds	r1, #1
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5264:	ldrb	r2, [r5, #8]
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(storage);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    5266:	movw	r3, #12289	; 0x3001
    526a:	it	ne
    526c:	movne.w	r3, #12288	; 0x3000
    5270:	strh.w	r3, [sp, #12]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5274:	cmp	r2, #0
    5276:	beq.n	5304 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x170>
      write_length_ += len;
    5278:	ldr	r3, [r5, #12]
    527a:	adds	r3, #2
    527c:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    527e:	add	sp, #316	; 0x13c
    5280:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5284:	ldrb	r3, [r5, #8]
    5286:	ldr	r2, [r7, #0]
    5288:	str	r2, [sp, #36]	; 0x24
    528a:	cmp	r3, #0
    528c:	bne.n	5256 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xc2>
    528e:	add	r1, sp, #36	; 0x24
    5290:	mov	r0, r5
    5292:	movs	r2, #4
    5294:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5298:	b.n	522c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    529a:	ldrb	r3, [r5, #8]
    529c:	movs	r2, #0
    529e:	strh.w	r2, [sp, #14]
    52a2:	cmp	r3, #0
    52a4:	bne.n	5278 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xe4>
    52a6:	add.w	r1, sp, #14
    52aa:	mov	r0, r5
    52ac:	movs	r2, #2
    52ae:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    52b2:	b.n	522c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    52b4:	ldrb	r4, [r5, #8]
    52b6:	str	r1, [sp, #32]
    52b8:	cmp	r4, #0
    52ba:	beq.n	531c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x188>
      write_length_ += len;
    52bc:	ldr	r3, [r5, #12]
    52be:	adds	r3, #4
    52c0:	str	r3, [r5, #12]
    52c2:	b.n	5228 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x94>
    52c4:	movs	r2, #4
    52c6:	add	r1, sp, #52	; 0x34
    52c8:	mov	r0, r5
    52ca:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    52ce:	ldrb	r3, [r5, #8]
    52d0:	ldr	r2, [r7, #0]
    52d2:	str	r2, [sp, #48]	; 0x30
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    52d4:	cmp	r3, #0
    52d6:	bne.n	5340 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1ac>
    52d8:	add	r1, sp, #48	; 0x30
    52da:	movs	r2, #4
    52dc:	mov	r0, r5
    52de:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    52e2:	ldrb	r6, [r5, #8]
    52e4:	str	r4, [sp, #44]	; 0x2c
    52e6:	cbnz	r6, 533c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1a8>
    52e8:	add	r1, sp, #44	; 0x2c
    52ea:	movs	r2, #4
    52ec:	mov	r0, r5
    52ee:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    52f2:	ldrb	r3, [r5, #8]
    52f4:	str	r6, [sp, #40]	; 0x28
    52f6:	cbnz	r3, 5338 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1a4>
    52f8:	add	r1, sp, #40	; 0x28
    52fa:	mov	r0, r5
    52fc:	movs	r2, #4
    52fe:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5302:	b.n	522c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    5304:	add	r1, sp, #12
    5306:	mov	r0, r5
    5308:	movs	r2, #2
    530a:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    530e:	b.n	522c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    5310:	add	r1, sp, #24
    5312:	mov	r0, r5
    5314:	movs	r2, #4
    5316:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    531a:	b.n	522c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    531c:	add	r1, sp, #32
    531e:	movs	r2, #4
    5320:	mov	r0, r5
    5322:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5326:	ldrb	r3, [r5, #8]
    5328:	str	r4, [sp, #28]
    532a:	cbnz	r3, 5338 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1a4>
    532c:	add	r1, sp, #28
    532e:	mov	r0, r5
    5330:	movs	r2, #4
    5332:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5336:	b.n	522c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    5338:	ldr	r3, [r5, #12]
    533a:	b.n	5228 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x94>
    533c:	ldr	r3, [r5, #12]
    533e:	b.n	5224 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x90>
    5340:	ldr	r3, [r5, #12]
    5342:	b.n	5220 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8c>
    5344:	.word	0x00012f70

00005348 <MTPD::GetStorageInfo(unsigned long)>:
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    5348:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    534c:	mov	r4, r0
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    534e:	ldr	r0, [r0, #0]
    5350:	ldr	r3, [r0, #0]
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    uint32_t store = Storage2Store(storage);
    5352:	subs	r5, r1, #1
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    5354:	sub	sp, #36	; 0x24
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    5356:	ldr	r3, [r3, #20]
    5358:	mov	r1, r5
    535a:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    535c:	ldrb	r3, [r4, #8]
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    535e:	cmp	r0, #0
    5360:	ite	eq
    5362:	moveq	r2, #4
    5364:	movne	r2, #1
    5366:	strh.w	r2, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    536a:	cmp	r3, #0
    536c:	beq.n	5408 <MTPD::GetStorageInfo(unsigned long)+0xc0>
      write_length_ += len;
    536e:	ldr	r3, [r4, #12]
    5370:	adds	r3, #2
    5372:	str	r3, [r4, #12]
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    5374:	ldr	r0, [r4, #0]
    5376:	ldr	r3, [r0, #0]
    5378:	mov	r1, r5
    537a:	ldr	r3, [r3, #24]
    537c:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    537e:	ldrb	r6, [r4, #8]
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    5380:	cmp	r0, #0
    5382:	ite	eq
    5384:	moveq	r3, #1
    5386:	movne	r3, #2
    5388:	strh.w	r3, [sp, #10]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    538c:	cmp	r6, #0
    538e:	beq.n	5450 <MTPD::GetStorageInfo(unsigned long)+0x108>
      write_length_ += len;
    5390:	ldr	r3, [r4, #12]
    5392:	movs	r2, #0
    5394:	adds	r3, #2
    5396:	str	r3, [r4, #12]
    5398:	strh.w	r2, [sp, #8]
    539c:	adds	r3, #2
    539e:	str	r3, [r4, #12]
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)

    uint64_t ntotal = storage_->totalSize(store) ; 
    53a0:	ldr	r0, [r4, #0]
    53a2:	ldr	r3, [r0, #0]
    53a4:	mov	r1, r5
    53a6:	ldr	r3, [r3, #12]
    53a8:	blx	r3
    53aa:	mov	r6, r0
    uint64_t nused = storage_->usedSize(store) ; 
    53ac:	ldr	r0, [r4, #0]
    53ae:	ldr	r3, [r0, #0]
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)

    uint64_t ntotal = storage_->totalSize(store) ; 
    53b0:	mov	r7, r1
    uint64_t nused = storage_->usedSize(store) ; 
    53b2:	ldr	r3, [r3, #16]
    53b4:	mov	r1, r5
    53b6:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    53b8:	ldrb	r3, [r4, #8]
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)

    uint64_t ntotal = storage_->totalSize(store) ; 
    uint64_t nused = storage_->usedSize(store) ; 
    53ba:	mov	r8, r0
    53bc:	mov	r9, r1
    53be:	strd	r6, r7, [sp, #24]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    53c2:	cbz	r3, 5416 <MTPD::GetStorageInfo(unsigned long)+0xce>
    53c4:	subs	r6, r6, r0
      write_length_ += len;
    53c6:	ldr	r3, [r4, #12]
    53c8:	sbc.w	r7, r7, r1
    53cc:	strd	r6, r7, [sp, #16]
    53d0:	adds	r3, #8
    53d2:	str	r3, [r4, #12]
    53d4:	adds	r3, #8
    53d6:	mov.w	r2, #4294967295
    53da:	str	r3, [r4, #12]
    53dc:	str	r2, [sp, #12]
    53de:	adds	r3, #4
    53e0:	str	r3, [r4, #12]

    write64(ntotal);  // max capacity
    write64((ntotal-nused));  // free space (100M)
    //
    write32(0xFFFFFFFFUL);  // free space (objects)
    const char *name = storage_->get_FSName(store);
    53e2:	ldr	r0, [r4, #0]
    53e4:	ldr	r2, [pc, #156]	; (5484 <MTPD::GetStorageInfo(unsigned long)+0x13c>)
    53e6:	ldr	r3, [r0, #0]
    53e8:	ldr	r3, [r3, #8]
    53ea:	cmp	r3, r2
    53ec:	bne.n	5470 <MTPD::GetStorageInfo(unsigned long)+0x128>
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}
    53ee:	add.w	r0, r0, r5, lsl #2
    53f2:	ldr	r1, [r0, #8]
    writestring(name);  // storage descriptor
    53f4:	mov	r0, r4
    53f6:	bl	4a54 <MTPD::writestring(char const*)>
    writestring("");  // volume identifier
    53fa:	mov	r0, r4
    53fc:	ldr	r1, [pc, #136]	; (5488 <MTPD::GetStorageInfo(unsigned long)+0x140>)
    53fe:	bl	4a54 <MTPD::writestring(char const*)>

    //printf("%d %d ",storage,store); Serial.println(name); Serial.flush();
  }
    5402:	add	sp, #36	; 0x24
    5404:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5408:	movs	r2, #2
    540a:	add.w	r1, sp, #6
    540e:	mov	r0, r4
    5410:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5414:	b.n	5374 <MTPD::GetStorageInfo(unsigned long)+0x2c>
    5416:	movs	r2, #8
    5418:	add	r1, sp, #24
    541a:	mov	r0, r4
    541c:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5420:	subs.w	r6, r6, r8
    5424:	ldrb	r3, [r4, #8]
    5426:	sbc.w	r7, r7, r9
    542a:	strd	r6, r7, [sp, #16]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    542e:	cbnz	r3, 547c <MTPD::GetStorageInfo(unsigned long)+0x134>
    5430:	movs	r2, #8
    5432:	add	r1, sp, #16
    5434:	mov	r0, r4
    5436:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    543a:	ldrb	r3, [r4, #8]
    543c:	mov.w	r2, #4294967295
    5440:	str	r2, [sp, #12]
    5442:	cbnz	r3, 5478 <MTPD::GetStorageInfo(unsigned long)+0x130>
    5444:	movs	r2, #4
    5446:	add	r1, sp, #12
    5448:	mov	r0, r4
    544a:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    544e:	b.n	53e2 <MTPD::GetStorageInfo(unsigned long)+0x9a>
    5450:	movs	r2, #2
    5452:	add.w	r1, sp, #10
    5456:	mov	r0, r4
    5458:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    545c:	ldrb	r3, [r4, #8]
    545e:	strh.w	r6, [sp, #8]
    5462:	cbnz	r3, 5480 <MTPD::GetStorageInfo(unsigned long)+0x138>
    5464:	movs	r2, #2
    5466:	add	r1, sp, #8
    5468:	mov	r0, r4
    546a:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    546e:	b.n	53a0 <MTPD::GetStorageInfo(unsigned long)+0x58>

    write64(ntotal);  // max capacity
    write64((ntotal-nused));  // free space (100M)
    //
    write32(0xFFFFFFFFUL);  // free space (objects)
    const char *name = storage_->get_FSName(store);
    5470:	mov	r1, r5
    5472:	blx	r3
    5474:	mov	r1, r0
    5476:	b.n	53f4 <MTPD::GetStorageInfo(unsigned long)+0xac>
    5478:	ldr	r3, [r4, #12]
    547a:	b.n	53de <MTPD::GetStorageInfo(unsigned long)+0x96>
    547c:	ldr	r3, [r4, #12]
    547e:	b.n	53d4 <MTPD::GetStorageInfo(unsigned long)+0x8c>
    5480:	ldr	r3, [r4, #12]
    5482:	b.n	539c <MTPD::GetStorageInfo(unsigned long)+0x54>
    5484:	.word	0x00001481
    5488:	.word	0x00012f70

0000548c <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
    548c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      switch(p1)
    5490:	sub.w	r1, r1, #56320	; 0xdc00
    5494:	subs	r1, #1
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
    5496:	sub	sp, #148	; 0x94
    5498:	mov	r4, r0
      switch(p1)
    549a:	cmp	r1, #67	; 0x43
    549c:	bhi.n	5554 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    549e:	tbh	[pc, r1, lsl #1]
    54a2:	.short	0x005c
    54a4:	.word	0x0080006e
    54a8:	.word	0x005900c6
    54ac:	.word	0x00d80059
    54b0:	.word	0x01690121
    54b4:	.word	0x01b10059
    54b8:	.word	0x00590059
    54bc:	.word	0x00590059
    54c0:	.word	0x00590059
    54c4:	.word	0x00590059
    54c8:	.word	0x00590059
    54cc:	.word	0x00590059
    54d0:	.word	0x00590059
    54d4:	.word	0x00590059
    54d8:	.word	0x00590059
    54dc:	.word	0x00590059
    54e0:	.word	0x00590059
    54e4:	.word	0x00590059
    54e8:	.word	0x00590059
    54ec:	.word	0x00590059
    54f0:	.word	0x00590059
    54f4:	.word	0x00590059
    54f8:	.word	0x00590059
    54fc:	.word	0x00590059
    5500:	.word	0x00590059
    5504:	.word	0x00590059
    5508:	.word	0x00590059
    550c:	.word	0x00590059
    5510:	.word	0x00590059
    5514:	.word	0x00590059
    5518:	.word	0x00590059
    551c:	.word	0x00590059
    5520:	.word	0x01f70059
    5524:	.word	0x00590059
    5528:	.short	0x0044
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    552a:	ldrb	r3, [r0, #8]
    552c:	movw	r2, #56388	; 0xdc44
    5530:	strh.w	r2, [sp, #70]	; 0x46
    5534:	cmp	r3, #0
    5536:	beq.w	59b4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x528>
      write_length_ += len;
    553a:	ldr	r3, [r4, #12]
    553c:	adds	r3, #2
    553e:	str	r3, [r4, #12]
    5540:	adds	r3, #2
    5542:	str	r3, [r4, #12]
    5544:	adds	r3, #1
    5546:	str	r3, [r4, #12]
    5548:	adds	r3, #1
    554a:	str	r3, [r4, #12]
    554c:	adds	r3, #4
    554e:	str	r3, [r4, #12]
    5550:	adds	r3, #1
    5552:	str	r3, [r4, #12]
          write8(0);
          break;
        default:
          break;
      }
    }
    5554:	add	sp, #148	; 0x94
    5556:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    555a:	ldrb	r3, [r0, #8]
    555c:	movw	r2, #56321	; 0xdc01
    5560:	strh.w	r2, [sp, #30]
    5564:	cmp	r3, #0
    5566:	beq.w	5ac8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x63c>
      write_length_ += len;
    556a:	ldr	r3, [r4, #12]
    556c:	adds	r3, #2
    556e:	str	r3, [r4, #12]
    5570:	adds	r3, #2
    5572:	str	r3, [r4, #12]
    5574:	adds	r3, #1
    5576:	str	r3, [r4, #12]
    5578:	adds	r3, #4
    557a:	str	r3, [r4, #12]
    557c:	b.n	554c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    557e:	ldrb	r3, [r0, #8]
    5580:	movw	r2, #56322	; 0xdc02
    5584:	strh.w	r2, [sp, #36]	; 0x24
    5588:	cmp	r3, #0
    558a:	beq.w	5936 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4aa>
      write_length_ += len;
    558e:	ldr	r3, [r4, #12]
    5590:	adds	r3, #2
    5592:	str	r3, [r4, #12]
    5594:	adds	r3, #2
    5596:	str	r3, [r4, #12]
    5598:	adds	r3, #1
    559a:	str	r3, [r4, #12]
    559c:	adds	r3, #2
    559e:	str	r3, [r4, #12]
    55a0:	b.n	554c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    55a2:	ldrb	r3, [r0, #8]
    55a4:	movw	r2, #56323	; 0xdc03
    55a8:	strh.w	r2, [sp, #42]	; 0x2a
    55ac:	cmp	r3, #0
    55ae:	bne.n	558e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x102>
    55b0:	movs	r2, #2
    55b2:	add.w	r1, sp, #42	; 0x2a
    55b6:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    55ba:	ldrb	r7, [r4, #8]
    55bc:	movs	r6, #4
    55be:	strh.w	r6, [sp, #40]	; 0x28
    55c2:	cmp	r7, #0
    55c4:	bne.w	5b5e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d2>
    55c8:	movs	r2, #2
    55ca:	add	r1, sp, #40	; 0x28
    55cc:	mov	r0, r4
    55ce:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    55d2:	ldrb	r5, [r4, #8]
    55d4:	strb.w	r7, [sp, #9]
    55d8:	cmp	r5, #0
    55da:	bne.w	5b5a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ce>
    55de:	movs	r2, #1
    55e0:	add.w	r1, sp, #9
    55e4:	mov	r0, r4
    55e6:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    55ea:	ldrb	r7, [r4, #8]
    55ec:	strh.w	r5, [sp, #38]	; 0x26
    55f0:	cmp	r7, #0
    55f2:	bne.w	5b56 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ca>
    55f6:	movs	r2, #2
    55f8:	add.w	r1, sp, #38	; 0x26
    55fc:	mov	r0, r4
    55fe:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5602:	ldrb	r5, [r4, #8]
    5604:	str	r7, [sp, #84]	; 0x54
    5606:	cmp	r5, #0
    5608:	bne.w	5b32 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    560c:	mov	r2, r6
    560e:	add	r1, sp, #84	; 0x54
    5610:	mov	r0, r4
    5612:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5616:	ldrb	r3, [r4, #8]
    5618:	strb.w	r5, [sp, #8]
    561c:	cmp	r3, #0
    561e:	bne.w	5b2e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    5622:	mov	r0, r4
    5624:	movs	r2, #1
    5626:	add	r1, sp, #8
    5628:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    562c:	b.n	5554 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    562e:	ldrb	r3, [r0, #8]
    5630:	movw	r2, #56324	; 0xdc04
    5634:	strh.w	r2, [sp, #46]	; 0x2e
    5638:	cmp	r3, #0
    563a:	beq.w	58b4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x428>
      write_length_ += len;
    563e:	ldr	r3, [r0, #12]
    5640:	adds	r3, #2
    5642:	str	r3, [r0, #12]
    5644:	adds	r3, #2
    5646:	str	r3, [r4, #12]
    5648:	adds	r3, #1
    564a:	str	r3, [r4, #12]
    564c:	adds	r3, #8
    564e:	str	r3, [r4, #12]
    5650:	b.n	554c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5652:	ldrb	r3, [r0, #8]
    5654:	movw	r2, #56327	; 0xdc07
    5658:	strh.w	r2, [sp, #50]	; 0x32
    565c:	cmp	r3, #0
    565e:	bne.w	553a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    5662:	movs	r2, #2
    5664:	add.w	r1, sp, #50	; 0x32
    5668:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    566c:	ldrb	r3, [r4, #8]
    566e:	movw	r2, #65535	; 0xffff
    5672:	strh.w	r2, [sp, #48]	; 0x30
    5676:	cmp	r3, #0
    5678:	bne.w	5b46 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    567c:	movs	r2, #2
    567e:	add	r1, sp, #48	; 0x30
    5680:	mov	r0, r4
    5682:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5686:	ldrb	r6, [r4, #8]
    5688:	movs	r5, #1
    568a:	strb.w	r5, [sp, #14]
    568e:	cmp	r6, #0
    5690:	bne.w	5b42 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    5694:	mov	r2, r5
    5696:	add.w	r1, sp, #14
    569a:	mov	r0, r4
    569c:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    56a0:	ldrb	r7, [r4, #8]
    56a2:	strb.w	r6, [sp, #13]
    56a6:	cmp	r7, #0
    56a8:	bne.w	5b52 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    56ac:	mov	r2, r5
    56ae:	add.w	r1, sp, #13
    56b2:	mov	r0, r4
    56b4:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    56b8:	ldrb	r6, [r4, #8]
    56ba:	str	r7, [sp, #92]	; 0x5c
    56bc:	cmp	r6, #0
    56be:	bne.w	5b32 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    56c2:	movs	r2, #4
    56c4:	add	r1, sp, #92	; 0x5c
    56c6:	mov	r0, r4
    56c8:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    56cc:	ldrb	r3, [r4, #8]
    56ce:	strb.w	r6, [sp, #12]
    56d2:	cmp	r3, #0
    56d4:	bne.w	5b2e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    56d8:	mov	r2, r5
    56da:	mov	r0, r4
    56dc:	add	r1, sp, #12
    56de:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    56e2:	b.n	5554 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    56e4:	ldrb	r3, [r0, #8]
    56e6:	movw	r2, #56328	; 0xdc08
    56ea:	strh.w	r2, [sp, #54]	; 0x36
    56ee:	cmp	r3, #0
    56f0:	bne.w	553a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    56f4:	movs	r2, #2
    56f6:	add.w	r1, sp, #54	; 0x36
    56fa:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    56fe:	ldrb	r6, [r4, #8]
    5700:	movw	r3, #65535	; 0xffff
    5704:	strh.w	r3, [sp, #52]	; 0x34
    5708:	cmp	r6, #0
    570a:	bne.w	5b46 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    570e:	movs	r2, #2
    5710:	add	r1, sp, #52	; 0x34
    5712:	mov	r0, r4
    5714:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5718:	ldrb	r5, [r4, #8]
    571a:	strb.w	r6, [sp, #17]
    571e:	cmp	r5, #0
    5720:	bne.w	5b42 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    5724:	movs	r2, #1
    5726:	add.w	r1, sp, #17
    572a:	mov	r0, r4
    572c:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5730:	ldrb	r6, [r4, #8]
    5732:	strb.w	r5, [sp, #16]
    5736:	cmp	r6, #0
    5738:	bne.w	5b52 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    573c:	movs	r2, #1
    573e:	add	r1, sp, #16
    5740:	mov	r0, r4
    5742:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5746:	ldrb	r5, [r4, #8]
    5748:	str	r6, [sp, #96]	; 0x60
    574a:	cmp	r5, #0
    574c:	bne.w	5b32 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    5750:	movs	r2, #4
    5752:	add	r1, sp, #96	; 0x60
    5754:	mov	r0, r4
    5756:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    575a:	ldrb	r3, [r4, #8]
    575c:	strb.w	r5, [sp, #15]
    5760:	cmp	r3, #0
    5762:	bne.w	5b2e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    5766:	mov	r0, r4
    5768:	movs	r2, #1
    576a:	add.w	r1, sp, #15
    576e:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5772:	b.n	5554 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    5774:	ldrb	r3, [r0, #8]
    5776:	movw	r2, #56329	; 0xdc09
    577a:	strh.w	r2, [sp, #58]	; 0x3a
    577e:	cmp	r3, #0
    5780:	bne.w	553a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    5784:	movs	r2, #2
    5786:	add.w	r1, sp, #58	; 0x3a
    578a:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    578e:	ldrb	r6, [r4, #8]
    5790:	movw	r3, #65535	; 0xffff
    5794:	strh.w	r3, [sp, #56]	; 0x38
    5798:	cmp	r6, #0
    579a:	bne.w	5b46 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    579e:	movs	r2, #2
    57a0:	add	r1, sp, #56	; 0x38
    57a2:	mov	r0, r4
    57a4:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    57a8:	ldrb	r5, [r4, #8]
    57aa:	strb.w	r6, [sp, #20]
    57ae:	cmp	r5, #0
    57b0:	bne.w	5b42 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    57b4:	movs	r2, #1
    57b6:	add	r1, sp, #20
    57b8:	mov	r0, r4
    57ba:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    57be:	ldrb	r6, [r4, #8]
    57c0:	strb.w	r5, [sp, #19]
    57c4:	cmp	r6, #0
    57c6:	bne.w	5b52 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    57ca:	movs	r2, #1
    57cc:	add.w	r1, sp, #19
    57d0:	mov	r0, r4
    57d2:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    57d6:	ldrb	r5, [r4, #8]
    57d8:	str	r6, [sp, #100]	; 0x64
    57da:	cmp	r5, #0
    57dc:	bne.w	5b32 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    57e0:	movs	r2, #4
    57e2:	add	r1, sp, #100	; 0x64
    57e4:	mov	r0, r4
    57e6:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    57ea:	ldrb	r3, [r4, #8]
    57ec:	strb.w	r5, [sp, #18]
    57f0:	cmp	r3, #0
    57f2:	bne.w	5b2e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    57f6:	mov	r0, r4
    57f8:	movs	r2, #1
    57fa:	add.w	r1, sp, #18
    57fe:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5802:	b.n	5554 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    5804:	ldrb	r3, [r0, #8]
    5806:	movw	r2, #56331	; 0xdc0b
    580a:	strh.w	r2, [sp, #62]	; 0x3e
    580e:	cmp	r3, #0
    5810:	bne.w	556a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xde>
    5814:	movs	r2, #2
    5816:	add.w	r1, sp, #62	; 0x3e
    581a:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    581e:	ldrb	r6, [r4, #8]
    5820:	movs	r3, #6
    5822:	strh.w	r3, [sp, #60]	; 0x3c
    5826:	cmp	r6, #0
    5828:	bne.w	5b3e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b2>
    582c:	movs	r2, #2
    582e:	add	r1, sp, #60	; 0x3c
    5830:	mov	r0, r4
    5832:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5836:	ldrb	r5, [r4, #8]
    5838:	strb.w	r6, [sp, #22]
    583c:	cmp	r5, #0
    583e:	bne.w	5b3a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ae>
    5842:	movs	r2, #1
    5844:	add.w	r1, sp, #22
    5848:	mov	r0, r4
    584a:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    584e:	ldrb	r6, [r4, #8]
    5850:	str	r5, [sp, #108]	; 0x6c
    5852:	cmp	r6, #0
    5854:	bne.w	5b36 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6aa>
    5858:	movs	r2, #4
    585a:	add	r1, sp, #108	; 0x6c
    585c:	mov	r0, r4
    585e:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5862:	ldrb	r5, [r4, #8]
    5864:	str	r6, [sp, #104]	; 0x68
    5866:	cmp	r5, #0
    5868:	bne.w	5b32 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    586c:	movs	r2, #4
    586e:	add	r1, sp, #104	; 0x68
    5870:	mov	r0, r4
    5872:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5876:	ldrb	r3, [r4, #8]
    5878:	strb.w	r5, [sp, #21]
    587c:	cmp	r3, #0
    587e:	bne.w	5b2e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    5882:	mov	r0, r4
    5884:	movs	r2, #1
    5886:	add.w	r1, sp, #21
    588a:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    588e:	b.n	5554 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    5890:	ldrb	r3, [r0, #8]
    5892:	movw	r2, #56385	; 0xdc41
    5896:	strh.w	r2, [sp, #66]	; 0x42
    589a:	cmp	r3, #0
    589c:	beq.w	5a36 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5aa>
      write_length_ += len;
    58a0:	ldr	r3, [r0, #12]
    58a2:	adds	r3, #2
    58a4:	str	r3, [r0, #12]
    58a6:	adds	r3, #2
    58a8:	str	r3, [r4, #12]
    58aa:	adds	r3, #1
    58ac:	str	r3, [r4, #12]
    58ae:	adds	r3, #8
    58b0:	str	r3, [r4, #12]
    58b2:	b.n	564c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c0>
    58b4:	movs	r2, #2
    58b6:	add.w	r1, sp, #46	; 0x2e
    58ba:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    58be:	ldrb	r6, [r4, #8]
    58c0:	movs	r5, #8
    58c2:	strh.w	r5, [sp, #44]	; 0x2c
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    58c6:	cmp	r6, #0
    58c8:	bne.w	5b4e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c2>
    58cc:	movs	r2, #2
    58ce:	add	r1, sp, #44	; 0x2c
    58d0:	mov	r0, r4
    58d2:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    58d6:	ldrb	r3, [r4, #8]
    58d8:	strb.w	r6, [sp, #11]
    58dc:	cmp	r3, #0
    58de:	bne.w	5b4a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6be>
    58e2:	movs	r2, #1
    58e4:	add.w	r1, sp, #11
    58e8:	mov	r0, r4
    58ea:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    58ee:	ldrb	r6, [r4, #8]
    58f0:	movs	r2, #0
    58f2:	movs	r3, #0
    58f4:	strd	r2, r3, [sp, #120]	; 0x78
    58f8:	cmp	r6, #0
    58fa:	bne.w	5b62 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d6>
    58fe:	mov	r2, r5
    5900:	add	r1, sp, #120	; 0x78
    5902:	mov	r0, r4
    5904:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5908:	ldrb	r5, [r4, #8]
    590a:	str	r6, [sp, #88]	; 0x58
    590c:	cmp	r5, #0
    590e:	bne.w	5b32 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    5912:	movs	r2, #4
    5914:	add	r1, sp, #88	; 0x58
    5916:	mov	r0, r4
    5918:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    591c:	ldrb	r3, [r4, #8]
    591e:	strb.w	r5, [sp, #10]
    5922:	cmp	r3, #0
    5924:	bne.w	5b2e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    5928:	mov	r0, r4
    592a:	movs	r2, #1
    592c:	add.w	r1, sp, #10
    5930:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5934:	b.n	5554 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    5936:	movs	r2, #2
    5938:	add	r1, sp, #36	; 0x24
    593a:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    593e:	ldrb	r7, [r4, #8]
    5940:	movs	r6, #4
    5942:	strh.w	r6, [sp, #34]	; 0x22
    5946:	cmp	r7, #0
    5948:	bne.w	5b5e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d2>
    594c:	movs	r2, #2
    594e:	add.w	r1, sp, #34	; 0x22
    5952:	mov	r0, r4
    5954:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5958:	ldrb	r5, [r4, #8]
    595a:	strb.w	r7, [sp, #7]
    595e:	cmp	r5, #0
    5960:	bne.w	5b5a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ce>
    5964:	movs	r2, #1
    5966:	add.w	r1, sp, #7
    596a:	mov	r0, r4
    596c:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5970:	ldrb	r7, [r4, #8]
    5972:	strh.w	r5, [sp, #32]
    5976:	cmp	r7, #0
    5978:	bne.w	5b56 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ca>
    597c:	movs	r2, #2
    597e:	add	r1, sp, #32
    5980:	mov	r0, r4
    5982:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5986:	ldrb	r5, [r4, #8]
    5988:	str	r7, [sp, #80]	; 0x50
    598a:	cmp	r5, #0
    598c:	bne.w	5b32 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    5990:	mov	r2, r6
    5992:	add	r1, sp, #80	; 0x50
    5994:	mov	r0, r4
    5996:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    599a:	ldrb	r3, [r4, #8]
    599c:	strb.w	r5, [sp, #6]
    59a0:	cmp	r3, #0
    59a2:	bne.w	5b2e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    59a6:	mov	r0, r4
    59a8:	movs	r2, #1
    59aa:	add.w	r1, sp, #6
    59ae:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    59b2:	b.n	5554 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    59b4:	movs	r2, #2
    59b6:	add.w	r1, sp, #70	; 0x46
    59ba:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    59be:	ldrb	r6, [r4, #8]
    59c0:	movw	r3, #65535	; 0xffff
    59c4:	strh.w	r3, [sp, #68]	; 0x44
    59c8:	cmp	r6, #0
    59ca:	bne.w	5b46 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    59ce:	movs	r2, #2
    59d0:	add	r1, sp, #68	; 0x44
    59d2:	mov	r0, r4
    59d4:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    59d8:	ldrb	r5, [r4, #8]
    59da:	strb.w	r6, [sp, #27]
    59de:	cmp	r5, #0
    59e0:	bne.w	5b42 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    59e4:	movs	r2, #1
    59e6:	add.w	r1, sp, #27
    59ea:	mov	r0, r4
    59ec:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    59f0:	ldrb	r6, [r4, #8]
    59f2:	strb.w	r5, [sp, #26]
    59f6:	cmp	r6, #0
    59f8:	bne.w	5b52 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    59fc:	movs	r2, #1
    59fe:	add.w	r1, sp, #26
    5a02:	mov	r0, r4
    5a04:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5a08:	ldrb	r5, [r4, #8]
    5a0a:	str	r6, [sp, #116]	; 0x74
    5a0c:	cmp	r5, #0
    5a0e:	bne.w	5b32 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    5a12:	movs	r2, #4
    5a14:	add	r1, sp, #116	; 0x74
    5a16:	mov	r0, r4
    5a18:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5a1c:	ldrb	r3, [r4, #8]
    5a1e:	strb.w	r5, [sp, #25]
    5a22:	cmp	r3, #0
    5a24:	bne.w	5b2e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    5a28:	mov	r0, r4
    5a2a:	movs	r2, #1
    5a2c:	add.w	r1, sp, #25
    5a30:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5a34:	b.n	5554 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    5a36:	movs	r2, #2
    5a38:	add.w	r1, sp, #66	; 0x42
    5a3c:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5a40:	ldrb	r5, [r4, #8]
    5a42:	movs	r3, #10
    5a44:	strh.w	r3, [sp, #64]	; 0x40
    5a48:	cmp	r5, #0
    5a4a:	bne.w	5b6e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6e2>
    5a4e:	movs	r2, #2
    5a50:	add	r1, sp, #64	; 0x40
    5a52:	mov	r0, r4
    5a54:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5a58:	ldrb	r3, [r4, #8]
    5a5a:	strb.w	r5, [sp, #24]
    5a5e:	cmp	r3, #0
    5a60:	bne.w	5b6a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6de>
    5a64:	movs	r2, #1
    5a66:	add	r1, sp, #24
    5a68:	mov	r0, r4
    5a6a:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5a6e:	ldrb	r3, [r4, #8]
    5a70:	mov.w	r8, #0
    5a74:	mov.w	r9, #0
    5a78:	strd	r8, r9, [sp, #136]	; 0x88
    5a7c:	cmp	r3, #0
    5a7e:	bne.n	5b66 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6da>
    5a80:	movs	r2, #8
    5a82:	add	r1, sp, #136	; 0x88
    5a84:	mov	r0, r4
    5a86:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5a8a:	ldrb	r6, [r4, #8]
    5a8c:	strd	r8, r9, [sp, #128]	; 0x80
    5a90:	cmp	r6, #0
    5a92:	bne.n	5b62 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d6>
    5a94:	movs	r2, #8
    5a96:	add	r1, sp, #128	; 0x80
    5a98:	mov	r0, r4
    5a9a:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5a9e:	ldrb	r5, [r4, #8]
    5aa0:	str	r6, [sp, #112]	; 0x70
    5aa2:	cmp	r5, #0
    5aa4:	bne.n	5b32 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    5aa6:	movs	r2, #4
    5aa8:	add	r1, sp, #112	; 0x70
    5aaa:	mov	r0, r4
    5aac:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5ab0:	ldrb	r3, [r4, #8]
    5ab2:	strb.w	r5, [sp, #23]
    5ab6:	cmp	r3, #0
    5ab8:	bne.n	5b2e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    5aba:	mov	r0, r4
    5abc:	movs	r2, #1
    5abe:	add.w	r1, sp, #23
    5ac2:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5ac6:	b.n	5554 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    5ac8:	movs	r2, #2
    5aca:	add.w	r1, sp, #30
    5ace:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5ad2:	ldrb	r6, [r4, #8]
    5ad4:	movs	r3, #6
    5ad6:	strh.w	r3, [sp, #28]
    5ada:	cbnz	r6, 5b3e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b2>
    5adc:	movs	r2, #2
    5ade:	add	r1, sp, #28
    5ae0:	mov	r0, r4
    5ae2:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5ae6:	ldrb	r5, [r4, #8]
    5ae8:	strb.w	r6, [sp, #5]
    5aec:	cbnz	r5, 5b3a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ae>
    5aee:	movs	r2, #1
    5af0:	add.w	r1, sp, #5
    5af4:	mov	r0, r4
    5af6:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5afa:	ldrb	r6, [r4, #8]
    5afc:	str	r5, [sp, #76]	; 0x4c
    5afe:	cbnz	r6, 5b36 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6aa>
    5b00:	movs	r2, #4
    5b02:	add	r1, sp, #76	; 0x4c
    5b04:	mov	r0, r4
    5b06:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5b0a:	ldrb	r5, [r4, #8]
    5b0c:	str	r6, [sp, #72]	; 0x48
    5b0e:	cbnz	r5, 5b32 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    5b10:	movs	r2, #4
    5b12:	add	r1, sp, #72	; 0x48
    5b14:	mov	r0, r4
    5b16:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5b1a:	ldrb	r3, [r4, #8]
    5b1c:	strb.w	r5, [sp, #4]
    5b20:	cbnz	r3, 5b2e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    5b22:	mov	r0, r4
    5b24:	movs	r2, #1
    5b26:	add	r1, sp, #4
    5b28:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5b2c:	b.n	5554 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    5b2e:	ldr	r3, [r4, #12]
    5b30:	b.n	5550 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc4>
    5b32:	ldr	r3, [r4, #12]
    5b34:	b.n	554c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
    5b36:	ldr	r3, [r4, #12]
    5b38:	b.n	5578 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xec>
    5b3a:	ldr	r3, [r4, #12]
    5b3c:	b.n	5574 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe8>
    5b3e:	ldr	r3, [r4, #12]
    5b40:	b.n	5570 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe4>
    5b42:	ldr	r3, [r4, #12]
    5b44:	b.n	5544 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
    5b46:	ldr	r3, [r4, #12]
    5b48:	b.n	5540 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb4>
    5b4a:	ldr	r3, [r4, #12]
    5b4c:	b.n	5648 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1bc>
    5b4e:	ldr	r3, [r4, #12]
    5b50:	b.n	5644 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b8>
    5b52:	ldr	r3, [r4, #12]
    5b54:	b.n	5548 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbc>
    5b56:	ldr	r3, [r4, #12]
    5b58:	b.n	559c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x110>
    5b5a:	ldr	r3, [r4, #12]
    5b5c:	b.n	5598 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10c>
    5b5e:	ldr	r3, [r4, #12]
    5b60:	b.n	5594 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x108>
    5b62:	ldr	r3, [r4, #12]
    5b64:	b.n	564c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c0>
    5b66:	ldr	r3, [r4, #12]
    5b68:	b.n	58ae <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x422>
    5b6a:	ldr	r3, [r4, #12]
    5b6c:	b.n	58aa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x41e>
    5b6e:	ldr	r3, [r4, #12]
    5b70:	b.n	58a6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x41a>
    5b72:	nop

00005b74 <MTPD::receive_buffer()>:
      data_buffer_ = usb_malloc();
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::receive_buffer() {
    5b74:	push	{r4, lr}
    5b76:	mov	r4, r0
    5b78:	ldr	r3, [r4, #4]
    while (!data_buffer_) {
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
    5b7a:	movs	r0, #5
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::receive_buffer() {
    while (!data_buffer_) {
    5b7c:	cbnz	r3, 5b86 <MTPD::receive_buffer()+0x12>
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
    5b7e:	bl	cdb0 <usb_rx>
    5b82:	str	r0, [r4, #4]
      if (!data_buffer_) mtp_yield();
    5b84:	cbz	r0, 5b88 <MTPD::receive_buffer()+0x14>
    5b86:	pop	{r4, pc}
    5b88:	bl	16e0 <mtp_yield()>
    5b8c:	b.n	5b78 <MTPD::receive_buffer()+0x4>
    5b8e:	nop

00005b90 <MTPD::GetObject(unsigned long)>:
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    5b90:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5b94:	mov	r6, r0
    uint32_t size = storage_->GetSize(object_id);
    5b96:	ldr	r0, [r0, #0]
    5b98:	ldr	r3, [r0, #0]
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    5b9a:	sub	sp, #8
    uint32_t size = storage_->GetSize(object_id);
    5b9c:	ldr	r3, [r3, #40]	; 0x28
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    5b9e:	mov	r8, r1
    uint32_t size = storage_->GetSize(object_id);
    5ba0:	blx	r3
    if (write_get_length_) {
    5ba2:	ldrb	r5, [r6, #8]
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    uint32_t size = storage_->GetSize(object_id);
    5ba4:	mov	r7, r0
    if (write_get_length_) {
    5ba6:	cbnz	r5, 5c00 <MTPD::GetObject(unsigned long)+0x70>
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    5ba8:	cbz	r0, 5bfa <MTPD::GetObject(unsigned long)+0x6a>
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
        data_buffer_->len += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    5baa:	mov	r9, r5
    5bac:	b.n	5bb2 <MTPD::GetObject(unsigned long)+0x22>
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    5bae:	cmp	r7, r5
    5bb0:	bls.n	5bfa <MTPD::GetObject(unsigned long)+0x6a>
        get_buffer();
    5bb2:	mov	r0, r6
    5bb4:	bl	49d8 <MTPD::get_buffer()>
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
    5bb8:	ldmia.w	r6, {r0, r3}
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
        get_buffer();
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
    5bbc:	ldrh.w	r2, [r3], #8
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
    5bc0:	ldr	r1, [r0, #0]
    5bc2:	subs	r4, r7, r5
    5bc4:	rsb	lr, r2, #64	; 0x40
    5bc8:	cmp	r4, lr
    5bca:	it	cs
    5bcc:	movcs	r4, lr
    5bce:	str	r4, [sp, #0]
    5bd0:	add	r3, r2
    5bd2:	ldr.w	sl, [r1, #48]	; 0x30
    5bd6:	mov	r2, r5
    5bd8:	mov	r1, r8
    5bda:	blx	sl
        pos += to_copy;
        data_buffer_->len += to_copy;
    5bdc:	ldr	r1, [r6, #4]
    5bde:	ldrh	r3, [r1, #0]
    5be0:	add	r3, r4
    5be2:	uxth	r3, r3
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    5be4:	cmp	r3, #64	; 0x40
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
    5be6:	add	r5, r4
        data_buffer_->len += to_copy;
    5be8:	strh	r3, [r1, #0]
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    5bea:	bne.n	5bae <MTPD::GetObject(unsigned long)+0x1e>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
    5bec:	movs	r0, #4
    5bee:	bl	cf20 <usb_tx>
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    5bf2:	cmp	r7, r5
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
        data_buffer_->len += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    5bf4:	str.w	r9, [r6, #4]
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    5bf8:	bhi.n	5bb2 <MTPD::GetObject(unsigned long)+0x22>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
        }
      }
    }
  }
    5bfa:	add	sp, #8
    5bfc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    5c00:	ldr	r3, [r6, #12]
    5c02:	add	r7, r3
    5c04:	str	r7, [r6, #12]
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
        }
      }
    }
  }
    5c06:	add	sp, #8
    5c08:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00005c0c <MTPD::read(char*, unsigned long)>:
      printf("\n"); \
    }

  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    5c0c:	cbz	r2, 5c78 <MTPD::read(char*, unsigned long)+0x6c>
      if(CONTAINER->len>20) printf(" %x", CONTAINER->params[2]); \
      printf("\n"); \
    }

  void MTPD::read(char* data, uint32_t size) 
  {
    5c0e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5c12:	mov	r6, r0
    5c14:	mov	r5, r1
    while (size) {
    5c16:	mov	r8, r2
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
      if (data_buffer_->index == data_buffer_->len) {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
    5c18:	movs	r7, #0
    }

  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
      receive_buffer();
    5c1a:	mov	r0, r6
    5c1c:	bl	5b74 <MTPD::receive_buffer()>
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    5c20:	ldr	r3, [r6, #4]
    5c22:	ldrh.w	lr, [r3, #2]
    5c26:	ldrh.w	ip, [r3]
    5c2a:	rsb	r4, lr, ip
    5c2e:	cmp	r4, r8
    5c30:	it	cs
    5c32:	movcs	r4, r8
      to_copy = min(to_copy, size);
      if (data) {
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
    5c34:	add.w	r1, r3, #8
    5c38:	add	r1, lr
    5c3a:	mov	r0, r5
    5c3c:	mov	r2, r4
        data += to_copy;
      }
      size -= to_copy;
    5c3e:	rsb	r8, r4, r8
  {
    while (size) {
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, size);
      if (data) {
    5c42:	cbz	r5, 5c54 <MTPD::read(char*, unsigned long)+0x48>
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
    5c44:	bl	c198 <memcpy>
    5c48:	ldr	r3, [r6, #4]
    5c4a:	ldrh.w	lr, [r3, #2]
    5c4e:	ldrh.w	ip, [r3]
        data += to_copy;
    5c52:	add	r5, r4
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
    5c54:	add	r4, lr
    5c56:	uxth	r4, r4
      if (data_buffer_->index == data_buffer_->len) {
    5c58:	cmp	ip, r4
      if (data) {
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
        data += to_copy;
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
    5c5a:	strh	r4, [r3, #2]
      if (data_buffer_->index == data_buffer_->len) {
    5c5c:	beq.n	5c68 <MTPD::read(char*, unsigned long)+0x5c>
      printf("\n"); \
    }

  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    5c5e:	cmp.w	r8, #0
    5c62:	bne.n	5c1a <MTPD::read(char*, unsigned long)+0xe>
    5c64:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        data += to_copy;
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
      if (data_buffer_->index == data_buffer_->len) {
        usb_free(data_buffer_);
    5c68:	mov	r0, r3
    5c6a:	bl	cd64 <usb_free>
        data_buffer_ = NULL;
    5c6e:	str	r7, [r6, #4]
      printf("\n"); \
    }

  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    5c70:	cmp.w	r8, #0
    5c74:	bne.n	5c1a <MTPD::read(char*, unsigned long)+0xe>
    5c76:	b.n	5c64 <MTPD::read(char*, unsigned long)+0x58>
    5c78:	bx	lr
    5c7a:	nop

00005c7c <MTPD::readstring(char*)>:

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    5c7c:	push	{r4, r5, r6, lr}
    5c7e:	sub	sp, #8
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    5c80:	movs	r2, #1
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    5c82:	mov	r4, r1
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    5c84:	add.w	r1, sp, #6
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    5c88:	mov	r6, r0
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    5c8a:	bl	5c0c <MTPD::read(char*, unsigned long)>
    5c8e:	ldrb.w	r2, [sp, #6]
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
    5c92:	cbz	r4, 5cb4 <MTPD::readstring(char*)+0x38>
    5c94:	adds	r5, r4, r2
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    5c96:	cbz	r2, 5cb0 <MTPD::readstring(char*)+0x34>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    5c98:	movs	r2, #2
    5c9a:	add.w	r1, sp, #6
    5c9e:	mov	r0, r6
    5ca0:	bl	5c0c <MTPD::read(char*, unsigned long)>
    5ca4:	ldrh.w	r3, [sp, #6]
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
        int16_t c2;
        *(buffer++) = c2 = read16();
    5ca8:	strb.w	r3, [r4], #1
  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    5cac:	cmp	r5, r4
    5cae:	bne.n	5c98 <MTPD::readstring(char*)+0x1c>
        int16_t c2;
        *(buffer++) = c2 = read16();
      }
    }
  }
    5cb0:	add	sp, #8
    5cb2:	pop	{r4, r5, r6, pc}
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    5cb4:	lsls	r2, r2, #1
    5cb6:	mov	r1, r4
    5cb8:	mov	r0, r6
    5cba:	bl	5c0c <MTPD::read(char*, unsigned long)>
    5cbe:	b.n	5cb0 <MTPD::readstring(char*)+0x34>

00005cc0 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.6]>:
    }
    storage_->close();
    return true;
  }
  
    uint32_t MTPD::setObjectPropValue(uint32_t p1, uint32_t p2)
    5cc0:	push	{r4, r5, lr}
    5cc2:	sub	sp, #260	; 0x104
    5cc4:	mov	r4, r0
    5cc6:	mov	r5, r1
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    5cc8:	movs	r2, #12
    5cca:	mov	r1, sp
    5ccc:	bl	5c0c <MTPD::read(char*, unsigned long)>
      receive_buffer();
      if(p2==0xDC07)
      {
        char filename[MAX_FILENAME_LEN];
        ReadMTPHeader();
        readstring(filename);
    5cd0:	mov	r1, sp
    5cd2:	mov	r0, r4
    5cd4:	bl	5c7c <MTPD::readstring(char*)>

        storage_->rename(p1,filename);
    5cd8:	ldr	r0, [r4, #0]
    5cda:	ldr	r3, [r0, #0]
    5cdc:	mov	r2, sp
    5cde:	mov	r1, r5
    5ce0:	ldr	r3, [r3, #72]	; 0x48
    5ce2:	blx	r3

        return 0x2001;
      }
      else
        return 0x2005;
    }
    5ce4:	movw	r0, #8193	; 0x2001
    5ce8:	add	sp, #260	; 0x104
    5cea:	pop	{r4, r5, pc}

00005cec <MTPD::SendObject()>:
    while(len) {read8(); len--;}
    
    return storage_->Create(store, parent, dir, filename);
  }

  bool MTPD::SendObject() {
    5cec:	push	{r4, r5, r6, r7, lr}
    5cee:	sub	sp, #20
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    5cf0:	movs	r2, #12
    5cf2:	add	r1, sp, #4
    while(len) {read8(); len--;}
    
    return storage_->Create(store, parent, dir, filename);
  }

  bool MTPD::SendObject() {
    5cf4:	mov	r6, r0
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    5cf6:	bl	5c0c <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    5cfa:	ldrh.w	r3, [sp, #8]
    5cfe:	cmp	r3, #2
    5d00:	beq.n	5d10 <MTPD::SendObject()+0x24>
      {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
      }
    }
    storage_->close();
    5d02:	ldr	r0, [r6, #0]
    5d04:	ldr	r3, [r0, #0]
    5d06:	ldr	r3, [r3, #56]	; 0x38
    5d08:	blx	r3
    return true;
    5d0a:	movs	r0, #1
  }
    5d0c:	add	sp, #20
    5d0e:	pop	{r4, r5, r6, r7, pc}
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
      return header.len - 12;
    5d10:	ldr	r7, [sp, #4]
    return storage_->Create(store, parent, dir, filename);
  }

  bool MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    5d12:	subs	r7, #12
    5d14:	beq.n	5d02 <MTPD::SendObject()+0x16>
      data_buffer_->index += to_copy;
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
      {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
    5d16:	movs	r5, #0

  bool MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
    5d18:	mov	r0, r6
    5d1a:	bl	5b74 <MTPD::receive_buffer()>
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
    5d1e:	ldmia.w	r6, {r0, r1}
  bool MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    5d22:	ldrh	r2, [r1, #2]
    5d24:	ldrh.w	r4, [r1], #8
      to_copy = min(to_copy, len);
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
    5d28:	ldr	r3, [r0, #0]
  bool MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    5d2a:	subs	r4, r4, r2
    5d2c:	cmp	r4, r7
    5d2e:	it	cs
    5d30:	movcs	r4, r7
      to_copy = min(to_copy, len);
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
    5d32:	add	r1, r2
    5d34:	ldr	r3, [r3, #52]	; 0x34
    5d36:	mov	r2, r4
    5d38:	blx	r3
      data_buffer_->index += to_copy;
      len -= to_copy;
    5d3a:	subs	r7, r7, r4
    while (len) 
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
    5d3c:	cmp	r0, #0
    5d3e:	beq.n	5d0c <MTPD::SendObject()+0x20>
      data_buffer_->index += to_copy;
    5d40:	ldr	r0, [r6, #4]
    5d42:	ldrh	r3, [r0, #2]
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    5d44:	ldrh	r2, [r0, #0]
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
      data_buffer_->index += to_copy;
    5d46:	add	r4, r3
    5d48:	uxth	r4, r4
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    5d4a:	cmp	r2, r4
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
      data_buffer_->index += to_copy;
    5d4c:	strh	r4, [r0, #2]
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    5d4e:	beq.n	5d56 <MTPD::SendObject()+0x6a>
    return storage_->Create(store, parent, dir, filename);
  }

  bool MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    5d50:	cmp	r7, #0
    5d52:	bne.n	5d18 <MTPD::SendObject()+0x2c>
    5d54:	b.n	5d02 <MTPD::SendObject()+0x16>
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
      data_buffer_->index += to_copy;
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
      {
        usb_free(data_buffer_);
    5d56:	bl	cd64 <usb_free>
        data_buffer_ = NULL;
    5d5a:	str	r5, [r6, #4]
    return storage_->Create(store, parent, dir, filename);
  }

  bool MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    5d5c:	cmp	r7, #0
    5d5e:	bne.n	5d18 <MTPD::SendObject()+0x2c>
    5d60:	b.n	5d02 <MTPD::SendObject()+0x16>
    5d62:	nop

00005d64 <MTPD::loop()>:
      else
        return 0x2005;
    }

  void MTPD::loop(void) 
  {
    5d64:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5d68:	mov	r5, r0
    5d6a:	sub	sp, #36	; 0x24
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
    5d6c:	movs	r0, #5
    5d6e:	bl	cdb0 <usb_rx>
    5d72:	cmp	r0, #0
    5d74:	beq.n	5dde <MTPD::loop()+0x7a>
      printContainer();
    5d76:	ldr	r1, [r0, #16]
    5d78:	ldr	r3, [r0, #8]
    5d7a:	ldrh	r2, [r0, #14]
    5d7c:	str	r1, [sp, #4]
    5d7e:	ldrh	r1, [r0, #12]
    5d80:	str	r1, [sp, #0]
    5d82:	mov	r4, r0
    5d84:	ldr	r1, [pc, #744]	; (6070 <MTPD::loop()+0x30c>)
    5d86:	ldr	r0, [pc, #748]	; (6074 <MTPD::loop()+0x310>)
    5d88:	bl	dcfc <Print::printf(char const*, ...)>
    5d8c:	ldr	r3, [r4, #8]
    5d8e:	cmp	r3, #12
    5d90:	bhi.n	5e26 <MTPD::loop()+0xc2>
    5d92:	ldr	r1, [pc, #740]	; (6078 <MTPD::loop()+0x314>)
    5d94:	ldr	r0, [pc, #732]	; (6074 <MTPD::loop()+0x310>)
    5d96:	bl	dcfc <Print::printf(char const*, ...)>
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        TID=id;

      uint32_t return_code = 0;
      if (receive_buffer->len >= 12) {
    5d9a:	ldrh	r2, [r4, #0]
      
        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
    5d9c:	ldr	r6, [r4, #16]
  {
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
        int op = CONTAINER->op;
    5d9e:	ldrh	r0, [r4, #14]
        int p1 = CONTAINER->params[0];
    5da0:	ldr	r7, [r4, #20]
        int p2 = CONTAINER->params[1];
    5da2:	ldr.w	sl, [r4, #24]
        int p3 = CONTAINER->params[2];
    5da6:	ldr	r3, [r4, #28]
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
    5da8:	ldr.w	r8, [r4, #8]
        int typ= CONTAINER->type;
    5dac:	ldrh	r1, [r4, #12]
        TID=id;
    5dae:	str	r6, [r5, #16]

      uint32_t return_code = 0;
      if (receive_buffer->len >= 12) {
    5db0:	cmp	r2, #11
    5db2:	bls.n	5e1e <MTPD::loop()+0xba>
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
    5db4:	mov.w	fp, #12
        
        if (typ == 1) { // command
    5db8:	cmp	r1, #1
        TID=id;

      uint32_t return_code = 0;
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
    5dba:	strh.w	fp, [r4]
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
    5dbe:	mov	r9, r7
      uint32_t return_code = 0;
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
    5dc0:	beq.n	5e7e <MTPD::loop()+0x11a>
    5dc2:	mov.w	r0, #8192	; 0x2000
        } else {
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
        CONTAINER->type=3;
    5dc6:	movs	r3, #3
        CONTAINER->len=len;
        CONTAINER->op=return_code;
    5dc8:	strh	r0, [r4, #14]
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
        CONTAINER->type=3;
        CONTAINER->len=len;
    5dca:	str.w	r8, [r4, #8]
        CONTAINER->op=return_code;
        CONTAINER->transaction_id=id;
    5dce:	str	r6, [r4, #16]
        CONTAINER->params[0]=p1;
    5dd0:	str.w	r9, [r4, #20]
        } else {
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
        CONTAINER->type=3;
    5dd4:	strh	r3, [r4, #12]
        CONTAINER->params[0]=p1;
        #if DEBUG>1
          printContainer();
        #endif

        usb_tx(MTP_TX_ENDPOINT, receive_buffer);
    5dd6:	mov	r1, r4
    5dd8:	movs	r0, #4
    5dda:	bl	cf20 <usb_tx>
      } else {
          usb_free(receive_buffer);
      }
    }
    // Maybe put event handling inside mtp_yield()?
    if ((receive_buffer = usb_rx(MTP_EVENT_ENDPOINT))) {
    5dde:	movs	r0, #6
    5de0:	bl	cdb0 <usb_rx>
    5de4:	mov	r4, r0
    5de6:	cbz	r0, 5e18 <MTPD::loop()+0xb4>
      printf("Event: "); printContainer();
    5de8:	ldr	r1, [pc, #656]	; (607c <MTPD::loop()+0x318>)
    5dea:	ldr	r0, [pc, #648]	; (6074 <MTPD::loop()+0x310>)
    5dec:	bl	dcfc <Print::printf(char const*, ...)>
    5df0:	ldr	r1, [r4, #16]
    5df2:	ldr	r3, [r4, #8]
    5df4:	ldrh	r2, [r4, #14]
    5df6:	str	r1, [sp, #4]
    5df8:	ldrh	r1, [r4, #12]
    5dfa:	str	r1, [sp, #0]
    5dfc:	ldr	r0, [pc, #628]	; (6074 <MTPD::loop()+0x310>)
    5dfe:	ldr	r1, [pc, #624]	; (6070 <MTPD::loop()+0x30c>)
    5e00:	bl	dcfc <Print::printf(char const*, ...)>
    5e04:	ldr	r3, [r4, #8]
    5e06:	cmp	r3, #12
    5e08:	bhi.n	5e52 <MTPD::loop()+0xee>
    5e0a:	ldr	r1, [pc, #620]	; (6078 <MTPD::loop()+0x314>)
    5e0c:	ldr	r0, [pc, #612]	; (6074 <MTPD::loop()+0x310>)
    5e0e:	bl	dcfc <Print::printf(char const*, ...)>
      usb_free(receive_buffer);
    5e12:	mov	r0, r4
    5e14:	bl	cd64 <usb_free>
    }
  }
    5e18:	add	sp, #36	; 0x24
    5e1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        #endif

        usb_tx(MTP_TX_ENDPOINT, receive_buffer);
        receive_buffer = 0;
      } else {
          usb_free(receive_buffer);
    5e1e:	mov	r0, r4
    5e20:	bl	cd64 <usb_free>
    5e24:	b.n	5dde <MTPD::loop()+0x7a>

  void MTPD::loop(void) 
  {
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
    5e26:	ldr	r2, [r4, #20]
    5e28:	ldr	r1, [pc, #596]	; (6080 <MTPD::loop()+0x31c>)
    5e2a:	ldr	r0, [pc, #584]	; (6074 <MTPD::loop()+0x310>)
    5e2c:	bl	dcfc <Print::printf(char const*, ...)>
    5e30:	ldr	r3, [r4, #8]
    5e32:	cmp	r3, #16
    5e34:	bls.n	5d92 <MTPD::loop()+0x2e>
    5e36:	ldr	r2, [r4, #24]
    5e38:	ldr	r1, [pc, #580]	; (6080 <MTPD::loop()+0x31c>)
    5e3a:	ldr	r0, [pc, #568]	; (6074 <MTPD::loop()+0x310>)
    5e3c:	bl	dcfc <Print::printf(char const*, ...)>
    5e40:	ldr	r3, [r4, #8]
    5e42:	cmp	r3, #20
    5e44:	bls.n	5d92 <MTPD::loop()+0x2e>
    5e46:	ldr	r2, [r4, #28]
    5e48:	ldr	r1, [pc, #564]	; (6080 <MTPD::loop()+0x31c>)
    5e4a:	ldr	r0, [pc, #552]	; (6074 <MTPD::loop()+0x310>)
    5e4c:	bl	dcfc <Print::printf(char const*, ...)>
    5e50:	b.n	5d92 <MTPD::loop()+0x2e>
          usb_free(receive_buffer);
      }
    }
    // Maybe put event handling inside mtp_yield()?
    if ((receive_buffer = usb_rx(MTP_EVENT_ENDPOINT))) {
      printf("Event: "); printContainer();
    5e52:	ldr	r2, [r4, #20]
    5e54:	ldr	r1, [pc, #552]	; (6080 <MTPD::loop()+0x31c>)
    5e56:	ldr	r0, [pc, #540]	; (6074 <MTPD::loop()+0x310>)
    5e58:	bl	dcfc <Print::printf(char const*, ...)>
    5e5c:	ldr	r3, [r4, #8]
    5e5e:	cmp	r3, #16
    5e60:	bls.n	5e0a <MTPD::loop()+0xa6>
    5e62:	ldr	r2, [r4, #24]
    5e64:	ldr	r1, [pc, #536]	; (6080 <MTPD::loop()+0x31c>)
    5e66:	ldr	r0, [pc, #524]	; (6074 <MTPD::loop()+0x310>)
    5e68:	bl	dcfc <Print::printf(char const*, ...)>
    5e6c:	ldr	r3, [r4, #8]
    5e6e:	cmp	r3, #20
    5e70:	bls.n	5e0a <MTPD::loop()+0xa6>
    5e72:	ldr	r2, [r4, #28]
    5e74:	ldr	r1, [pc, #520]	; (6080 <MTPD::loop()+0x31c>)
    5e76:	ldr	r0, [pc, #508]	; (6074 <MTPD::loop()+0x310>)
    5e78:	bl	dcfc <Print::printf(char const*, ...)>
    5e7c:	b.n	5e0a <MTPD::loop()+0xa6>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    5e7e:	movw	r2, #4107	; 0x100b
    5e82:	cmp	r0, r2
    5e84:	beq.w	627a <MTPD::loop()+0x516>
    5e88:	bls.n	5f10 <MTPD::loop()+0x1ac>
    5e8a:	movw	r2, #4121	; 0x1019
    5e8e:	cmp	r0, r2
    5e90:	beq.w	629e <MTPD::loop()+0x53a>
    5e94:	bls.n	5f84 <MTPD::loop()+0x220>
    5e96:	movw	r2, #38914	; 0x9802
    5e9a:	cmp	r0, r2
    5e9c:	beq.w	61bc <MTPD::loop()+0x458>
    5ea0:	bhi.w	6084 <MTPD::loop()+0x320>
    5ea4:	movw	r2, #4122	; 0x101a
    5ea8:	cmp	r0, r2
    5eaa:	beq.w	6108 <MTPD::loop()+0x3a4>
    5eae:	movw	r3, #38913	; 0x9801
    5eb2:	cmp	r0, r3
    5eb4:	bne.w	6068 <MTPD::loop()+0x304>
              if(! return_code) { len  = receive_buffer->len = 12; return_code = 0x2005; }
              else {p1 = return_code; return_code=0x2001;}
              break;

          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
    5eb8:	movs	r3, #1
    5eba:	mov.w	sl, #0
    5ebe:	strb	r3, [r5, #8]
    5ec0:	mov	r1, r7
    5ec2:	mov	r0, r5
    5ec4:	str.w	sl, [r5, #12]
    5ec8:	bl	5128 <MTPD::getObjectPropsSupported(unsigned long)>
    5ecc:	ldr	r3, [r5, #12]
    5ece:	strb.w	sl, [r5, #8]
    5ed2:	adds	r3, #12
    5ed4:	movs	r2, #2
    5ed6:	strh.w	r2, [sp, #24]
    5eda:	str	r3, [sp, #20]
    5edc:	ldrh	r3, [r4, #14]
    5ede:	strh.w	r3, [sp, #26]
    5ee2:	ldr	r3, [r4, #16]
    5ee4:	str	r3, [sp, #28]
    5ee6:	add	r1, sp, #20
    5ee8:	mov	r0, r5
    5eea:	movs	r2, #12
    5eec:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5ef0:	mov	r1, r7
    5ef2:	mov	r0, r5
    5ef4:	bl	5128 <MTPD::getObjectPropsSupported(unsigned long)>
    5ef8:	mov	r0, r5
    5efa:	bl	49d8 <MTPD::get_buffer()>
    5efe:	ldr	r1, [r5, #4]
    5f00:	movs	r0, #4
    5f02:	bl	cf20 <usb_tx>
    5f06:	str.w	sl, [r5, #4]
            TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
            TRANSMIT(getObjectPropValue(p1,p2));
              break;
    5f0a:	movw	r0, #8193	; 0x2001
    5f0e:	b.n	5dc6 <MTPD::loop()+0x62>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    5f10:	movw	r2, #4101	; 0x1005
    5f14:	cmp	r0, r2
    5f16:	beq.w	6240 <MTPD::loop()+0x4dc>
    5f1a:	bhi.n	5ff0 <MTPD::loop()+0x28c>
    5f1c:	movw	r3, #4098	; 0x1002
    5f20:	cmp	r0, r3
    5f22:	beq.w	62c4 <MTPD::loop()+0x560>
    5f26:	bls.w	60b6 <MTPD::loop()+0x352>
    5f2a:	movw	r3, #4099	; 0x1003
    5f2e:	cmp	r0, r3
    5f30:	beq.n	5f0a <MTPD::loop()+0x1a6>
    5f32:	movw	r3, #4100	; 0x1004
    5f36:	cmp	r0, r3
    5f38:	bne.w	6068 <MTPD::loop()+0x304>
              openSession(p1);
              break;
            case 0x1003:  // CloseSession
              break;
            case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    5f3c:	movs	r3, #1
    5f3e:	movs	r7, #0
    5f40:	strb	r3, [r5, #8]
    5f42:	mov	r0, r5
    5f44:	str	r7, [r5, #12]
    5f46:	bl	4dfc <MTPD::WriteStorageIDs()>
    5f4a:	ldr	r3, [r5, #12]
    5f4c:	strb	r7, [r5, #8]
    5f4e:	adds	r3, #12
    5f50:	movs	r2, #2
    5f52:	strh.w	r2, [sp, #24]
    5f56:	str	r3, [sp, #20]
    5f58:	ldrh	r3, [r4, #14]
    5f5a:	strh.w	r3, [sp, #26]
    5f5e:	ldr	r3, [r4, #16]
    5f60:	str	r3, [sp, #28]
    5f62:	mov	r0, r5
    5f64:	movs	r2, #12
    5f66:	add	r1, sp, #20
    5f68:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5f6c:	mov	r0, r5
    5f6e:	bl	4dfc <MTPD::WriteStorageIDs()>
          case 0x9802:  // getObjectPropDesc
            TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
            TRANSMIT(getObjectPropValue(p1,p2));
    5f72:	mov	r0, r5
    5f74:	bl	49d8 <MTPD::get_buffer()>
    5f78:	ldr	r1, [r5, #4]
    5f7a:	movs	r0, #4
    5f7c:	bl	cf20 <usb_tx>
    5f80:	str	r7, [r5, #4]
    5f82:	b.n	5f0a <MTPD::loop()+0x1a6>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    5f84:	movw	r3, #4112	; 0x1010
    5f88:	cmp	r0, r3
    5f8a:	beq.n	6068 <MTPD::loop()+0x304>
    5f8c:	bls.w	60f4 <MTPD::loop()+0x390>
    5f90:	movw	r3, #4116	; 0x1014
    5f94:	cmp	r0, r3
    5f96:	beq.w	61fa <MTPD::loop()+0x496>
    5f9a:	movw	r3, #4117	; 0x1015
    5f9e:	cmp	r0, r3
    5fa0:	bne.n	6068 <MTPD::loop()+0x304>
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    5fa2:	movw	r3, #54274	; 0xd402
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    5fa6:	mov.w	sl, #0
    5faa:	movs	r2, #1
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    5fac:	cmp	r7, r3
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    5fae:	str.w	sl, [r5, #12]
    5fb2:	strb	r2, [r5, #8]
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    5fb4:	beq.w	632e <MTPD::loop()+0x5ca>
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    5fb8:	movs	r3, #2
    5fba:	movs	r2, #12
    5fbc:	strb.w	sl, [r5, #8]
    5fc0:	str	r2, [sp, #20]
    5fc2:	strh.w	r3, [sp, #24]
    5fc6:	ldrh	r3, [r4, #14]
    5fc8:	strh.w	r3, [sp, #26]
    5fcc:	ldr	r3, [r4, #16]
    5fce:	str	r3, [sp, #28]
    5fd0:	add	r1, sp, #20
    5fd2:	mov	r0, r5
    5fd4:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    5fd8:	mov	r0, r5
    5fda:	bl	49d8 <MTPD::get_buffer()>
    5fde:	movs	r0, #4
    5fe0:	ldr	r1, [r5, #4]
    5fe2:	bl	cf20 <usb_tx>
    5fe6:	movs	r3, #0
    5fe8:	str	r3, [r5, #4]
              break;
    5fea:	movw	r0, #8193	; 0x2001
    5fee:	b.n	5dc6 <MTPD::loop()+0x62>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    5ff0:	movw	r2, #4103	; 0x1007
    5ff4:	cmp	r0, r2
    5ff6:	beq.w	6172 <MTPD::loop()+0x40e>
    5ffa:	bcc.w	6164 <MTPD::loop()+0x400>
    5ffe:	movw	r3, #4104	; 0x1008
    6002:	cmp	r0, r3
    6004:	beq.w	612a <MTPD::loop()+0x3c6>
    6008:	movw	r3, #4105	; 0x1009
    600c:	cmp	r0, r3
    600e:	bne.n	6068 <MTPD::loop()+0x304>
              break;
            case 0x1008:  // GetObjectInfo
              TRANSMIT(GetObjectInfo(p1));
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(p1));
    6010:	mov.w	sl, #0
    6014:	movs	r3, #1
    6016:	strb	r3, [r5, #8]
    6018:	mov	r1, r7
    601a:	mov	r0, r5
    601c:	str.w	sl, [r5, #12]
    6020:	bl	5b90 <MTPD::GetObject(unsigned long)>
    6024:	ldr	r3, [r5, #12]
    6026:	strb.w	sl, [r5, #8]
    602a:	adds	r3, #12
    602c:	movs	r2, #2
    602e:	strh.w	r2, [sp, #24]
    6032:	str	r3, [sp, #20]
    6034:	ldrh	r3, [r4, #14]
    6036:	strh.w	r3, [sp, #26]
    603a:	ldr	r3, [r4, #16]
    603c:	str	r3, [sp, #28]
    603e:	movs	r2, #12
    6040:	add	r1, sp, #20
    6042:	mov	r0, r5
    6044:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    6048:	mov	r1, r7
    604a:	mov	r0, r5
    604c:	bl	5b90 <MTPD::GetObject(unsigned long)>
    6050:	mov	r0, r5
    6052:	bl	49d8 <MTPD::get_buffer()>
    6056:	movs	r0, #4
    6058:	ldr	r1, [r5, #4]
    605a:	bl	cf20 <usb_tx>
    605e:	str.w	sl, [r5, #4]
              break;
    6062:	movw	r0, #8193	; 0x2001
    6066:	b.n	5dc6 <MTPD::loop()+0x62>
              return_code = setObjectPropValue(p1,p2);
              break;
              
            default:
              return_code = 0x2005;  // operation not supported
              break;
    6068:	movw	r0, #8197	; 0x2005
    606c:	b.n	5dc6 <MTPD::loop()+0x62>
    606e:	nop
    6070:	.word	0x00013114
    6074:	.word	0x1fff0abc
    6078:	.word	0x00013128
    607c:	.word	0x0001312c
    6080:	.word	0x00013124
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    6084:	movw	r3, #38915	; 0x9803
    6088:	cmp	r0, r3
    608a:	beq.w	62d6 <MTPD::loop()+0x572>
    608e:	movw	r3, #38916	; 0x9804
    6092:	cmp	r0, r3
    6094:	bne.n	6068 <MTPD::loop()+0x304>
    return true;
  }
  
    uint32_t MTPD::setObjectPropValue(uint32_t p1, uint32_t p2)
    {
      receive_buffer();
    6096:	mov	r0, r5
    6098:	bl	5b74 <MTPD::receive_buffer()>
      if(p2==0xDC07)
    609c:	movw	r3, #56327	; 0xdc07
    60a0:	cmp	sl, r3
    60a2:	bne.n	6068 <MTPD::loop()+0x304>
    60a4:	mov	r1, r7
    60a6:	mov	r0, r5
    60a8:	bl	5cc0 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.6]>
          }
        } else {
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
    60ac:	cmp	r0, #0
    60ae:	beq.w	5e1e <MTPD::loop()+0xba>
    60b2:	uxth	r0, r0
    60b4:	b.n	5dc6 <MTPD::loop()+0x62>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    60b6:	movw	r3, #4097	; 0x1001
    60ba:	cmp	r0, r3
    60bc:	bne.n	6068 <MTPD::loop()+0x304>
            case 0x1001: // GetDescription
              TRANSMIT(WriteDescriptor());
    60be:	movs	r7, #0
    60c0:	strb	r1, [r5, #8]
    60c2:	mov	r0, r5
    60c4:	str	r7, [r5, #12]
    60c6:	bl	4bb8 <MTPD::WriteDescriptor()>
    60ca:	ldr	r3, [r5, #12]
    60cc:	strb	r7, [r5, #8]
    60ce:	adds	r3, #12
    60d0:	movs	r2, #2
    60d2:	strh.w	r2, [sp, #24]
    60d6:	str	r3, [sp, #20]
    60d8:	ldrh	r3, [r4, #14]
    60da:	strh.w	r3, [sp, #26]
    60de:	ldr	r3, [r4, #16]
    60e0:	str	r3, [sp, #28]
    60e2:	mov	r0, r5
    60e4:	mov	r2, fp
    60e6:	add	r1, sp, #20
    60e8:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    60ec:	mov	r0, r5
    60ee:	bl	4bb8 <MTPD::WriteDescriptor()>
    60f2:	b.n	5f72 <MTPD::loop()+0x20e>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    60f4:	movw	r3, #4109	; 0x100d
    60f8:	cmp	r0, r3
    60fa:	bne.n	6068 <MTPD::loop()+0x304>
              CONTAINER->params[1]=p2;
              CONTAINER->params[2]=p3;
              len = receive_buffer->len = 12 + 3 * 4;
              break;
            case 0x100D:  // SendObject
              SendObject();
    60fc:	mov	r0, r5
    60fe:	bl	5cec <MTPD::SendObject()>
              break;
    6102:	movw	r0, #8193	; 0x2001
    6106:	b.n	5dc6 <MTPD::loop()+0x62>
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    }
    
    uint32_t MTPD::copyObject(uint32_t handle, uint32_t newStorage, uint32_t newHandle)
    { uint32_t store1=Storage2Store(newStorage);
      return storage_->copy(handle,store1,newHandle);
    6108:	ldr	r0, [r5, #0]
    610a:	ldr	r1, [r0, #0]
    610c:	add.w	r2, sl, #4294967295
    6110:	ldr	r5, [r1, #80]	; 0x50
    6112:	mov	r1, r7
    6114:	blx	r5
              len  = receive_buffer->len = 12;
              break;

          case 0x101A:  // CopyObject
              return_code = copyObject(p1,p2,p3);
              if(! return_code) { len  = receive_buffer->len = 12; return_code = 0x2005; }
    6116:	cmp	r0, #0
    6118:	bne.w	6314 <MTPD::loop()+0x5b0>
    611c:	mov.w	r8, #12
    6120:	strh.w	r8, [r4]
    6124:	movw	r0, #8197	; 0x2005
    6128:	b.n	5dc6 <MTPD::loop()+0x62>
              } else {
                TRANSMIT(GetObjectHandles(p1, p3));
              }
              break;
            case 0x1008:  // GetObjectInfo
              TRANSMIT(GetObjectInfo(p1));
    612a:	movs	r7, #0
    612c:	strb	r1, [r5, #8]
    612e:	mov	r0, r5
    6130:	mov	r1, r9
    6132:	str	r7, [r5, #12]
    6134:	bl	4ed4 <MTPD::GetObjectInfo(unsigned long)>
    6138:	ldr	r3, [r5, #12]
    613a:	strb	r7, [r5, #8]
    613c:	adds	r3, #12
    613e:	movs	r2, #2
    6140:	strh.w	r2, [sp, #24]
    6144:	str	r3, [sp, #20]
    6146:	ldrh	r3, [r4, #14]
    6148:	strh.w	r3, [sp, #26]
    614c:	ldr	r3, [r4, #16]
    614e:	str	r3, [sp, #28]
    6150:	add	r1, sp, #20
    6152:	mov	r0, r5
    6154:	mov	r2, fp
    6156:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    615a:	mov	r1, r9
    615c:	mov	r0, r5
    615e:	bl	4ed4 <MTPD::GetObjectInfo(unsigned long)>
    6162:	b.n	5f72 <MTPD::loop()+0x20e>
              break;
            case 0x1005:  // GetStorageInfo
              TRANSMIT(GetStorageInfo(p1));
              break;
            case 0x1006:  // GetNumObjects
              if (p2) {
    6164:	cmp.w	sl, #0
    6168:	beq.w	631c <MTPD::loop()+0x5b8>
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(p1));
              break;
            case 0x100B:  // DeleteObject
              if (p2) {
    616c:	movw	r0, #8212	; 0x2014
    6170:	b.n	5dc6 <MTPD::loop()+0x62>
              } else {
                p1 = GetNumObjects(p1, p3);
              }
              break;
            case 0x1007:  // GetObjectHandles
              if (p2) {
    6172:	cmp.w	sl, #0
    6176:	bne.n	616c <MTPD::loop()+0x408>
                return_code = 0x2014; // spec by format unsupported
              } else {
                TRANSMIT(GetObjectHandles(p1, p3));
    6178:	mov	r2, r3
    617a:	strb	r1, [r5, #8]
    617c:	mov	r0, r5
    617e:	mov	r1, r7
    6180:	str.w	sl, [r5, #12]
    6184:	str	r3, [sp, #12]
    6186:	bl	4e64 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    618a:	ldr	r2, [r5, #12]
    618c:	strb.w	sl, [r5, #8]
    6190:	adds	r2, #12
    6192:	movs	r1, #2
    6194:	str	r2, [sp, #20]
    6196:	strh.w	r1, [sp, #24]
    619a:	ldrh	r2, [r4, #14]
    619c:	strh.w	r2, [sp, #26]
    61a0:	ldr	r1, [r4, #16]
    61a2:	str	r1, [sp, #28]
    61a4:	mov	r2, fp
    61a6:	add	r1, sp, #20
    61a8:	mov	r0, r5
    61aa:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    61ae:	ldr	r3, [sp, #12]
    61b0:	mov	r1, r7
    61b2:	mov	r2, r3
    61b4:	mov	r0, r5
    61b6:	bl	4e64 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    61ba:	b.n	5ef8 <MTPD::loop()+0x194>
          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
            TRANSMIT(getObjectPropDesc(p1,p2));
    61bc:	movs	r7, #0
    61be:	strb	r1, [r5, #8]
    61c0:	mov	r2, sl
    61c2:	mov	r1, r9
    61c4:	mov	r0, r5
    61c6:	str	r7, [r5, #12]
    61c8:	bl	548c <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    61cc:	ldr	r3, [r5, #12]
    61ce:	strb	r7, [r5, #8]
    61d0:	adds	r3, #12
    61d2:	movs	r2, #2
    61d4:	strh.w	r2, [sp, #24]
    61d8:	str	r3, [sp, #20]
    61da:	ldrh	r3, [r4, #14]
    61dc:	strh.w	r3, [sp, #26]
    61e0:	mov	r2, fp
    61e2:	ldr	r3, [r4, #16]
    61e4:	str	r3, [sp, #28]
    61e6:	add	r1, sp, #20
    61e8:	mov	r0, r5
    61ea:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    61ee:	mov	r2, sl
    61f0:	mov	r1, r9
    61f2:	mov	r0, r5
    61f4:	bl	548c <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    61f8:	b.n	5f72 <MTPD::loop()+0x20e>
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    61fa:	movw	r3, #54274	; 0xd402
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    61fe:	movs	r2, #0
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    6200:	cmp	r7, r3
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    6202:	strb	r1, [r5, #8]
    6204:	str	r2, [r5, #12]
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    6206:	beq.w	6364 <MTPD::loop()+0x600>
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    620a:	movs	r1, #0
    620c:	movs	r2, #12
    620e:	movs	r3, #2
    6210:	strb	r1, [r5, #8]
    6212:	str	r2, [sp, #20]
    6214:	strh.w	r3, [sp, #24]
    6218:	ldrh	r3, [r4, #14]
    621a:	strh.w	r3, [sp, #26]
    621e:	ldr	r3, [r4, #16]
    6220:	str	r3, [sp, #28]
    6222:	add	r1, sp, #20
    6224:	mov	r0, r5
    6226:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    622a:	movw	r3, #54274	; 0xd402
    622e:	cmp	r7, r3
    6230:	bne.w	5fd8 <MTPD::loop()+0x274>
    6234:	movw	r1, #54274	; 0xd402
    6238:	mov	r0, r5
    623a:	bl	4afc <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>
    623e:	b.n	5fd8 <MTPD::loop()+0x274>
              break;
            case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
              break;
            case 0x1005:  // GetStorageInfo
              TRANSMIT(GetStorageInfo(p1));
    6240:	movs	r7, #0
    6242:	strb	r1, [r5, #8]
    6244:	mov	r0, r5
    6246:	mov	r1, r9
    6248:	str	r7, [r5, #12]
    624a:	bl	5348 <MTPD::GetStorageInfo(unsigned long)>
    624e:	ldr	r3, [r5, #12]
    6250:	strb	r7, [r5, #8]
    6252:	adds	r3, #12
    6254:	movs	r2, #2
    6256:	strh.w	r2, [sp, #24]
    625a:	str	r3, [sp, #20]
    625c:	ldrh	r3, [r4, #14]
    625e:	strh.w	r3, [sp, #26]
    6262:	ldr	r3, [r4, #16]
    6264:	str	r3, [sp, #28]
    6266:	add	r1, sp, #20
    6268:	mov	r0, r5
    626a:	mov	r2, fp
    626c:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    6270:	mov	r1, r9
    6272:	mov	r0, r5
    6274:	bl	5348 <MTPD::GetStorageInfo(unsigned long)>
    6278:	b.n	5f72 <MTPD::loop()+0x20e>
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(p1));
              break;
            case 0x100B:  // DeleteObject
              if (p2) {
    627a:	cmp.w	sl, #0
    627e:	bne.w	616c <MTPD::loop()+0x408>
                return_code = 0x2014; // spec by format unsupported
              } else {
                if (!storage_->DeleteObject(p1)) {
    6282:	ldr	r0, [r5, #0]
    6284:	ldr	r3, [r0, #0]
    6286:	mov	r1, r7
    6288:	ldr	r3, [r3, #60]	; 0x3c
    628a:	blx	r3
    628c:	movw	r3, #8210	; 0x2012
    6290:	movw	r2, #8193	; 0x2001
    6294:	cmp	r0, #0
    6296:	ite	eq
    6298:	moveq	r0, r3
    629a:	movne	r0, r2
    629c:	b.n	5dc6 <MTPD::loop()+0x62>
        return 0x2001;
    }

    uint32_t MTPD::moveObject(uint32_t handle, uint32_t newStorage, uint32_t newHandle)
    { uint32_t store1=Storage2Store(newStorage);
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    629e:	ldr	r0, [r5, #0]
    62a0:	ldr	r1, [r0, #0]
    62a2:	add.w	r2, sl, #4294967295
    62a6:	ldr	r5, [r1, #76]	; 0x4c
    62a8:	mov	r1, r7
    62aa:	blx	r5
    62ac:	movw	r3, #8197	; 0x2005
    62b0:	movw	r2, #8193	; 0x2001
              return_code = 0x2005;
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(p1,p2,p3);
              len  = receive_buffer->len = 12;
    62b4:	strh.w	fp, [r4]
              break;
    62b8:	mov	r8, fp
        return 0x2001;
    }

    uint32_t MTPD::moveObject(uint32_t handle, uint32_t newStorage, uint32_t newHandle)
    { uint32_t store1=Storage2Store(newStorage);
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    62ba:	cmp	r0, #0
    62bc:	ite	eq
    62be:	moveq	r0, r3
    62c0:	movne	r0, r2
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(p1,p2,p3);
              len  = receive_buffer->len = 12;
              break;
    62c2:	b.n	5dc6 <MTPD::loop()+0x62>
    }
    
    void MTPD::openSession(uint32_t id)
    {
      sessionID_ = id;
      storage_->ResetIndex();
    62c4:	ldr	r0, [r5, #0]
      return storage_->copy(handle,store1,newHandle);
    }
    
    void MTPD::openSession(uint32_t id)
    {
      sessionID_ = id;
    62c6:	ldr	r2, [pc, #204]	; (6394 <MTPD::loop()+0x630>)
      storage_->ResetIndex();
    62c8:	ldr	r3, [r0, #0]
      return storage_->copy(handle,store1,newHandle);
    }
    
    void MTPD::openSession(uint32_t id)
    {
      sessionID_ = id;
    62ca:	str	r7, [r2, #0]
      storage_->ResetIndex();
    62cc:	ldr	r3, [r3, #68]	; 0x44
    62ce:	blx	r3
    62d0:	movw	r0, #8193	; 0x2001
    62d4:	b.n	5dc6 <MTPD::loop()+0x62>
          case 0x9802:  // getObjectPropDesc
            TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
            TRANSMIT(getObjectPropValue(p1,p2));
    62d6:	movs	r7, #0
    62d8:	strb	r1, [r5, #8]
    62da:	mov	r2, sl
    62dc:	mov	r1, r9
    62de:	mov	r0, r5
    62e0:	str	r7, [r5, #12]
    62e2:	bl	5194 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    62e6:	ldr	r3, [r5, #12]
    62e8:	strb	r7, [r5, #8]
    62ea:	adds	r3, #12
    62ec:	movs	r2, #2
    62ee:	strh.w	r2, [sp, #24]
    62f2:	str	r3, [sp, #20]
    62f4:	ldrh	r3, [r4, #14]
    62f6:	strh.w	r3, [sp, #26]
    62fa:	mov	r2, fp
    62fc:	ldr	r3, [r4, #16]
    62fe:	str	r3, [sp, #28]
    6300:	add	r1, sp, #20
    6302:	mov	r0, r5
    6304:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    6308:	mov	r2, sl
    630a:	mov	r1, r9
    630c:	mov	r0, r5
    630e:	bl	5194 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    6312:	b.n	5f72 <MTPD::loop()+0x20e>
              break;

          case 0x101A:  // CopyObject
              return_code = copyObject(p1,p2,p3);
              if(! return_code) { len  = receive_buffer->len = 12; return_code = 0x2005; }
              else {p1 = return_code; return_code=0x2001;}
    6314:	mov	r9, r0
    6316:	movw	r0, #8193	; 0x2001
    631a:	b.n	5dc6 <MTPD::loop()+0x62>
              break;
            case 0x1006:  // GetNumObjects
              if (p2) {
                return_code = 0x2014; // spec by format unsupported
              } else {
                p1 = GetNumObjects(p1, p3);
    631c:	mov	r2, r3
    631e:	mov	r1, r7
    6320:	mov	r0, r5
    6322:	bl	49b0 <MTPD::GetNumObjects(unsigned long, unsigned long)>
    6326:	mov	r9, r0
    6328:	movw	r0, #8193	; 0x2001
    632c:	b.n	5dc6 <MTPD::loop()+0x62>
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    632e:	mov	r0, r5
    6330:	ldr	r1, [pc, #100]	; (6398 <MTPD::loop()+0x634>)
    6332:	bl	4a54 <MTPD::writestring(char const*)>
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    6336:	ldr	r3, [r5, #12]
    6338:	strb.w	sl, [r5, #8]
    633c:	adds	r3, #12
    633e:	movs	r2, #2
    6340:	strh.w	r2, [sp, #24]
    6344:	str	r3, [sp, #20]
    6346:	ldrh	r3, [r4, #14]
    6348:	strh.w	r3, [sp, #26]
    634c:	ldr	r3, [r4, #16]
    634e:	str	r3, [sp, #28]
    6350:	add	r1, sp, #20
    6352:	mov	r0, r5
    6354:	movs	r2, #12
    6356:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    635a:	ldr	r1, [pc, #60]	; (6398 <MTPD::loop()+0x634>)
    635c:	mov	r0, r5
    635e:	bl	4a54 <MTPD::writestring(char const*)>
    6362:	b.n	5fd8 <MTPD::loop()+0x274>
    6364:	mov	r1, r3
    6366:	mov	r0, r5
    6368:	bl	4afc <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    636c:	ldr	r3, [r5, #12]
    636e:	movs	r1, #0
    6370:	adds	r3, #12
    6372:	movs	r2, #2
    6374:	strb	r1, [r5, #8]
    6376:	strh.w	r2, [sp, #24]
    637a:	str	r3, [sp, #20]
    637c:	ldrh	r3, [r4, #14]
    637e:	strh.w	r3, [sp, #26]
    6382:	ldr	r3, [r4, #16]
    6384:	str	r3, [sp, #28]
    6386:	movs	r2, #12
    6388:	add	r1, sp, #20
    638a:	mov	r0, r5
    638c:	bl	49f0 <MTPD::write(char const*, int) [clone .part.2]>
    6390:	b.n	6234 <MTPD::loop()+0x4d0>
    6392:	nop
    6394:	.word	0x1fff1a60
    6398:	.word	0x000130e4

0000639c <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    639c:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    639e:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    63a0:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    63a2:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    63a4:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    63a6:	beq.n	63b0 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    63a8:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    63ac:	b.w	dba0 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    63b0:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    63b2:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    63b6:	bx	r3

000063b8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>:
			}
		}
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    63b8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    63bc:	ldr	r4, [r0, #0]
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    63be:	ldr	r5, [r4, #12]
    63c0:	tst.w	r5, #16777216	; 0x1000000
		const uint8_t *p_write = (const uint8_t *)buf;
		uint8_t *p_read = (uint8_t *)retbuf;
		size_t count_read = count;

		// Lets clear the reader queue
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    63c4:	ldr	r5, [pc, #484]	; (65ac <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1f4>)
    63c6:	str	r5, [r4, #0]

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    63c8:	bne.n	6470 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xb8>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    63ca:	lsls	r7, r3, #31
    63cc:	bpl.w	6536 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17e>
		    if (p_write) {
    63d0:	cmp	r1, #0
    63d2:	beq.w	659c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1e4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    63d6:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    63d8:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    63da:	it	ne
    63dc:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    63e0:	str	r5, [r4, #52]	; 0x34
    63e2:	adds	r1, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    63e4:	ldrb.w	r8, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    63e8:	add.w	ip, r3, #4294967295
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    63ec:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    63f0:	cmp.w	ip, #0
    63f4:	beq.w	6548 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
			// Push out the next byte; 
		    if (p_write) {
    63f8:	cbz	r1, 6404 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x4c>
		    	w = (*p_write++) << 8;
				w |= *p_write++;
    63fa:	ldrb	r5, [r1, #1]
	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
    63fc:	ldrb.w	r8, [r1], #2
				w |= *p_write++;
    6400:	orr.w	r8, r5, r8, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    6404:	ldr	r5, [r0, #4]
    6406:	ldrb	r6, [r5, #8]
			if (count == 2)
    6408:	cmp.w	ip, #2
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    640c:	add.w	r6, r6, #4294967295
    6410:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    6414:	ite	eq
    6416:	orreq.w	r5, r8, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    641a:	orrne.w	r5, r8, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    641e:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    6420:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    6422:	sub.w	ip, ip, #2
    6426:	b.n	643a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x82>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    6428:	cbz	r2, 642e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x76>
							*p_read++ = w;  // Read any pending RX bytes in
    642a:	strb	r4, [r2, #0]
    642c:	adds	r2, #1
						} 
						count_read--;
    642e:	subs	r3, #1
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    6430:	and.w	r5, r5, #61440	; 0xf000
    6434:	cmp	r5, r6
    6436:	bls.n	6466 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xae>
    6438:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    643a:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    643c:	tst.w	r5, #240	; 0xf0
    6440:	beq.n	6430 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x78>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    6442:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    6444:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
    6448:	mov	r7, r2
    644a:	mov.w	lr, r4, asr #8
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    644e:	bne.n	6428 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x70>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    6450:	cbz	r2, 645a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xa2>
							*p_read++ = w >> 8;
    6452:	strb.w	lr, [r7], #2
							*p_read++ = (w & 0xff);
    6456:	strb	r4, [r2, #1]
    6458:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    645a:	and.w	r5, r5, #61440	; 0xf000
    645e:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
    6460:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    6464:	bhi.n	6438 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x80>
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
    6466:	cmp.w	ip, #0
    646a:	beq.n	6548 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    646c:	ldr	r4, [r0, #0]
    646e:	b.n	63f8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    6470:	lsls	r5, r3, #31
    6472:	bpl.n	650e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x156>
		    if (p_write) {
    6474:	cmp	r1, #0
    6476:	beq.w	658c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    647a:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    647c:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    647e:	it	ne
    6480:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    6484:	str	r5, [r4, #52]	; 0x34
    6486:	adds	r1, #1
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    6488:	add.w	lr, r3, #4294967295
		}

	    uint16_t w = _transferWriteFill;
    648c:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    6490:	cmp.w	lr, #0
    6494:	beq.n	651a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
			// Push out the next byte; 
		    if (p_write) {
    6496:	cbz	r1, 64a4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xec>
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
    6498:	ldrb.w	ip, [r1, #1]
    649c:	ldrb	r5, [r1, #0]
    649e:	adds	r1, #2
    64a0:	orr.w	ip, r5, ip, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    64a4:	ldr	r5, [r0, #4]
    64a6:	ldrb	r6, [r5, #8]
			if (count == 2)
    64a8:	cmp.w	lr, #2
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    64ac:	add.w	r6, r6, #4294967295
    64b0:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    64b4:	ite	eq
    64b6:	orreq.w	r5, ip, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    64ba:	orrne.w	r5, ip, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    64be:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    64c0:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    64c2:	sub.w	lr, lr, #2
    64c6:	b.n	64da <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x122>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    64c8:	cbz	r2, 64ce <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x116>
							*p_read++ = w;  // Read any pending RX bytes in
    64ca:	strb	r4, [r2, #0]
    64cc:	adds	r2, #1
						} 
						count_read--;
    64ce:	subs	r3, #1
							*p_read++ = w >> 8;
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    64d0:	and.w	r5, r5, #61440	; 0xf000
    64d4:	cmp	r5, r6
    64d6:	bls.n	6504 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x14c>
    64d8:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    64da:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    64dc:	tst.w	r5, #240	; 0xf0
    64e0:	beq.n	64d0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x118>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    64e2:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
    64e6:	mov	r7, r2
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    64e8:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    64ea:	bne.n	64c8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x110>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    64ec:	cbz	r2, 64f8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x140>
							*p_read++ = (w & 0xff);
    64ee:	strb.w	r4, [r7], #2
							*p_read++ = w >> 8;
    64f2:	asrs	r4, r4, #8
    64f4:	strb	r4, [r2, #1]
    64f6:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    64f8:	and.w	r5, r5, #61440	; 0xf000
    64fc:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
							*p_read++ = w >> 8;
						}
						count_read -= 2;
    64fe:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    6502:	bhi.n	64d8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x120>
			count--;
		}

	    uint16_t w = _transferWriteFill;

		while (count > 0) {
    6504:	cmp.w	lr, #0
    6508:	beq.n	651a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
    650a:	ldr	r4, [r0, #0]
    650c:	b.n	6496 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    650e:	mov	lr, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w = _transferWriteFill;
    6510:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    6514:	cmp.w	lr, #0
    6518:	bne.n	6496 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    651a:	cbz	r3, 6564 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    651c:	ldr	r4, [r0, #0]
			sr = port().SR;
    651e:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    6520:	tst.w	r1, #240	; 0xf0
    6524:	beq.n	651e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x166>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    6526:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    6528:	lsls	r4, r3, #31
    652a:	bpl.n	6568 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1b0>
					if (p_read)
    652c:	cbz	r2, 6532 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17a>
						*p_read++ = w;  // Read any pending RX bytes in
    652e:	strb	r1, [r2, #0]
    6530:	adds	r2, #1
					count_read--;
    6532:	subs	r3, #1
    6534:	b.n	651a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    6536:	ldrb.w	r8, [r0, #44]	; 0x2c
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    653a:	mov	ip, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    653c:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    6540:	cmp.w	ip, #0
    6544:	bne.w	63f8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    6548:	cbz	r3, 6564 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
    654a:	ldr	r4, [r0, #0]
			sr = port().SR;
    654c:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    654e:	tst.w	r1, #240	; 0xf0
    6552:	beq.n	654c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x194>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
				if (count_read & 1) {
    6554:	lsls	r6, r3, #31

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
			sr = port().SR;
			if (sr & 0xF0)  {
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    6556:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    6558:	bpl.n	657a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1c2>
					if (p_read)
    655a:	cbz	r2, 6560 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1a8>
						*p_read++ = w;  // Read any pending RX bytes in
    655c:	strb	r1, [r2, #0]
    655e:	adds	r2, #1
					count_read--;
    6560:	subs	r3, #1
    6562:	b.n	6548 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    6564:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    6568:	cbz	r2, 6576 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1be>
						*p_read++ = (w & 0xff);
    656a:	mov	r4, r2
						*p_read++ = w >> 8;
    656c:	asrs	r5, r1, #8
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
						*p_read++ = (w & 0xff);
    656e:	strb.w	r1, [r4], #2
						*p_read++ = w >> 8;
    6572:	strb	r5, [r2, #1]
    6574:	mov	r2, r4
					}
					count_read -= 2;
    6576:	subs	r3, #2
    6578:	b.n	651a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    657a:	cbz	r2, 6588 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d0>
						*p_read++ = w >> 8;
    657c:	mov	r4, r2
    657e:	asrs	r5, r1, #8
    6580:	strb.w	r5, [r4], #2
						*p_read++ = (w & 0xff);
    6584:	strb	r1, [r2, #1]
    6586:	mov	r2, r4
					}
					count_read -= 2;
    6588:	subs	r3, #2
    658a:	b.n	6548 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    658c:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    6590:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    6592:	it	ne
    6594:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    6598:	str	r5, [r4, #52]	; 0x34
    659a:	b.n	6488 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xd0>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    659c:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    65a0:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    65a2:	it	ne
    65a4:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    65a8:	str	r5, [r4, #52]	; 0x34
    65aa:	b.n	63e4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x2c>
    65ac:	.word	0x801f0400

000065b0 <_spi_dma_rxISR0()>:
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    65b0:	push	{r4, r5, r6, r7}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    65b2:	ldr	r3, [pc, #280]	; (66cc <_spi_dma_rxISR0()+0x11c>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    65b4:	ldr	r2, [pc, #280]	; (66d0 <_spi_dma_rxISR0()+0x120>)
    65b6:	ldr	r0, [r3, #56]	; 0x38
    65b8:	ldr	r4, [r3, #52]	; 0x34
    65ba:	ldrb	r1, [r0, #4]
    65bc:	strb	r1, [r2, #0]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    65be:	ldr	r1, [pc, #276]	; (66d4 <_spi_dma_rxISR0()+0x124>)
    65c0:	ldrb	r2, [r4, #4]
    65c2:	strb	r2, [r1, #0]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    65c4:	ldr	r2, [r3, #48]	; 0x30
    65c6:	ldrb	r0, [r0, #4]
    65c8:	strb	r0, [r1, #0]
    65ca:	cmp	r2, #0
    65cc:	beq.n	665c <_spi_dma_rxISR0()+0xac>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    65ce:	ldr	r1, [r3, #4]
    65d0:	ldr	r1, [r1, #12]
    65d2:	cmp	r2, r1
    65d4:	bhi.n	6654 <_spi_dma_rxISR0()+0xa4>
    65d6:	ldr	r1, [r4, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    65d8:	ldrh	r4, [r1, #30]
    65da:	lsls	r4, r4, #16
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    65dc:	add.w	r0, r2, #4294967295

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    65e0:	bmi.n	66ae <_spi_dma_rxISR0()+0xfe>
		tcd->BITER = len & 0x7fff;
    65e2:	ubfx	r0, r0, #0, #15
    65e6:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    65e8:	ldrh	r0, [r1, #30]
    65ea:	uxth	r0, r0
    65ec:	strh	r0, [r1, #22]
    65ee:	ldr	r1, [r3, #56]	; 0x38
    65f0:	ldr	r1, [r1, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    65f2:	ldrh	r0, [r1, #30]
    65f4:	lsls	r0, r0, #16
    65f6:	bmi.n	669e <_spi_dma_rxISR0()+0xee>
		tcd->BITER = len & 0x7fff;
    65f8:	ubfx	r0, r2, #0, #15
    65fc:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    65fe:	ldrh	r0, [r1, #30]
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    6600:	movs	r4, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    6602:	uxth	r0, r0
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    6604:	adds.w	r2, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    6608:	strh	r0, [r1, #22]
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    660a:	it	ne
    660c:	movne	r2, #1
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    660e:	str	r4, [r3, #48]	; 0x30
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    6610:	ldr	r1, [r3, #52]	; 0x34
    6612:	ldr	r0, [pc, #184]	; (66cc <_spi_dma_rxISR0()+0x11c>)
    6614:	ldr	r1, [r1, #0]
    6616:	ldr	r5, [r1, #0]
    6618:	add.w	r4, r0, #44	; 0x2c
    661c:	cmp	r5, r4
    661e:	beq.n	668e <_spi_dma_rxISR0()+0xde>
    6620:	ldr	r0, [r0, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    6622:	ldr	r4, [r0, #12]
    6624:	tst.w	r4, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    6628:	ldr	r4, [r1, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    662a:	ldr	r5, [r1, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    662c:	itete	ne
    662e:	ldrhne	r4, [r4, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    6630:	ldrbeq	r4, [r4, #0]
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    6632:	addne	r5, #2
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    6634:	addeq	r5, #1
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    6636:	orr.w	r4, r4, #2147483648	; 0x80000000
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    663a:	str	r5, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    663c:	str	r4, [r0, #52]	; 0x34
    663e:	ldr	r1, [r3, #56]	; 0x38
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    6640:	ldr	r3, [pc, #148]	; (66d8 <_spi_dma_rxISR0()+0x128>)
    6642:	ldrb	r1, [r1, #4]
    6644:	strb	r1, [r3, #0]
			}
		}
		_dmaRX->enable();
    6646:	ldr	r1, [pc, #132]	; (66cc <_spi_dma_rxISR0()+0x11c>)
		if (should_reenable_tx)
    6648:	cbz	r2, 6650 <_spi_dma_rxISR0()+0xa0>
    664a:	ldr	r2, [r1, #52]	; 0x34
    664c:	ldrb	r2, [r2, #4]
    664e:	strb	r2, [r3, #0]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    6650:	pop	{r4, r5, r6, r7}
    6652:	bx	lr
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
    6654:	subs	r2, r2, r1
    6656:	str	r2, [r3, #48]	; 0x30
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    6658:	movs	r2, #1
    665a:	b.n	6610 <_spi_dma_rxISR0()+0x60>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    665c:	ldr	r0, [r3, #60]	; 0x3c
    665e:	ldr	r1, [r3, #0]
    6660:	ldr	r5, [r0, #0]
			_dmaTX->enable();
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    6662:	ldr	r4, [pc, #120]	; (66dc <_spi_dma_rxISR0()+0x12c>)
		_dmaRX->enable();
		if (should_reenable_tx)
			_dmaTX->enable();
	} else {

		port().RSER = 0;
    6664:	str	r2, [r1, #48]	; 0x30
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    6666:	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    6668:	ldr	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    666a:	ldr	r5, [r5, #0]
    666c:	ldr	r6, [pc, #112]	; (66e0 <_spi_dma_rxISR0()+0x130>)
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    666e:	bic.w	r4, r4, #1073741824	; 0x40000000

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    6672:	movs	r7, #3
    6674:	cmp	r5, r6
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    6676:	str	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    6678:	strb.w	r7, [r3, #45]	; 0x2d
    667c:	bne.n	66be <_spi_dma_rxISR0()+0x10e>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    667e:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    6680:	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    6682:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    6684:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    6686:	beq.n	66c6 <_spi_dma_rxISR0()+0x116>
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    6688:	pop	{r4, r5, r6, r7}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    668a:	b.w	dba0 <EventResponder::triggerEventNotImmediate()>
    668e:	ldr	r1, [r0, #0]
			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    6690:	ldrb.w	r0, [r0, #44]	; 0x2c

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    6694:	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    6696:	orr.w	r0, r0, #2147483648	; 0x80000000
    669a:	str	r0, [r1, #52]	; 0x34
    669c:	b.n	663e <_spi_dma_rxISR0()+0x8e>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    669e:	ldrh	r4, [r1, #30]
    66a0:	ubfx	r0, r2, #0, #9
    66a4:	and.w	r4, r4, #65024	; 0xfe00
    66a8:	orrs	r0, r4
    66aa:	strh	r0, [r1, #30]
    66ac:	b.n	65fe <_spi_dma_rxISR0()+0x4e>
    66ae:	ldrh	r4, [r1, #30]
    66b0:	ubfx	r0, r0, #0, #9
    66b4:	and.w	r4, r4, #65024	; 0xfe00
    66b8:	orrs	r0, r4
    66ba:	strh	r0, [r1, #30]
    66bc:	b.n	65e8 <_spi_dma_rxISR0()+0x38>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    66be:	mov	r3, r5
    66c0:	mov	r1, r2
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    66c2:	pop	{r4, r5, r6, r7}
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    66c4:	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    66c6:	ldr	r3, [r0, #8]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    66c8:	pop	{r4, r5, r6, r7}
    66ca:	bx	r3
    66cc:	.word	0x1fff097c
    66d0:	.word	0x4000801f
    66d4:	.word	0x4000801c
    66d8:	.word	0x4000801b
    66dc:	.word	0xff0f0000
    66e0:	.word	0x0000639d

000066e4 <SPIClass::setMOSI(unsigned char)>:
	}
	return 0;
}

void SPIClass::setMOSI(uint8_t pin)
{
    66e4:	push	{r4, r5, r6, r7}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    66e6:	ldr	r3, [pc, #148]	; (677c <SPIClass::setMOSI(unsigned char)+0x98>)
    66e8:	ldr	r5, [r0, #4]
    66ea:	cmp	r3, r5
    66ec:	beq.n	6712 <SPIClass::setMOSI(unsigned char)+0x2e>
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
    66ee:	ldrb	r3, [r0, #9]
    66f0:	add	r3, r5
    66f2:	ldrb.w	r6, [r3, #44]	; 0x2c
    66f6:	cmp	r1, r6
    66f8:	beq.n	670e <SPIClass::setMOSI(unsigned char)+0x2a>
    66fa:	add.w	r2, r5, #43	; 0x2b
    66fe:	movs	r3, #0
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
    6700:	ldrb.w	r4, [r2, #1]!
    6704:	cmp	r4, r1
    6706:	beq.n	673e <SPIClass::setMOSI(unsigned char)+0x5a>
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
    6708:	adds	r3, #1
    670a:	cmp	r3, #4
    670c:	bne.n	6700 <SPIClass::setMOSI(unsigned char)+0x1c>
				mosi_pin_index = i;
				return;
			}
		}
	}
}
    670e:	pop	{r4, r5, r6, r7}
    6710:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMOSI_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 11) pinout &= ~3;
    6712:	cmp	r1, #11
    6714:	beq.n	6770 <SPIClass::setMOSI(unsigned char)+0x8c>
		if (pin == 7)  pinout = (pinout & ~0x3) | 1;
    6716:	cmp	r1, #7
    6718:	beq.n	672e <SPIClass::setMOSI(unsigned char)+0x4a>
		if (pin == 28) pinout = (pinout & ~0x3) | 2;
    671a:	cmp	r1, #28
    671c:	bne.n	66ee <SPIClass::setMOSI(unsigned char)+0xa>
    671e:	ldr	r2, [pc, #96]	; (6780 <SPIClass::setMOSI(unsigned char)+0x9c>)
    6720:	ldrb	r3, [r2, #0]
    6722:	bic.w	r3, r3, #3
    6726:	orr.w	r3, r3, #2
    672a:	strb	r3, [r2, #0]
    672c:	b.n	66ee <SPIClass::setMOSI(unsigned char)+0xa>
#endif
	}
	inline void setMOSI_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 11) pinout &= ~3;
		if (pin == 7)  pinout = (pinout & ~0x3) | 1;
    672e:	ldr	r2, [pc, #80]	; (6780 <SPIClass::setMOSI(unsigned char)+0x9c>)
    6730:	ldrb	r3, [r2, #0]
    6732:	bic.w	r3, r3, #3
    6736:	orr.w	r3, r3, #1
    673a:	strb	r3, [r2, #0]
    673c:	b.n	66ee <SPIClass::setMOSI(unsigned char)+0xa>
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    673e:	ldmia.w	r5, {r1, r2}
    6742:	ldr	r1, [r1, #0]
    6744:	tst	r1, r2
    6746:	beq.n	676a <SPIClass::setMOSI(unsigned char)+0x86>
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    6748:	ldr	r2, [pc, #56]	; (6784 <SPIClass::setMOSI(unsigned char)+0xa0>)
    674a:	add.w	r6, r2, r6, lsl #3
					*reg = 0;
    674e:	movs	r7, #0
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    6750:	ldr	r4, [r6, #4]
					*reg = 0;
					reg = portConfigRegister(hardware().mosi_pin[i]);
    6752:	adds	r1, r5, r3
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
					*reg = 0;
    6754:	str	r7, [r4, #0]
					reg = portConfigRegister(hardware().mosi_pin[i]);
    6756:	ldrb.w	r1, [r1, #44]	; 0x2c
    675a:	add.w	r2, r2, r1, lsl #3
					*reg = hardware().mosi_mux[i];
    675e:	add.w	r1, r3, #12
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().mosi_pin[i]);
    6762:	ldr	r4, [r2, #4]
					*reg = hardware().mosi_mux[i];
    6764:	ldr.w	r2, [r5, r1, lsl #2]
    6768:	str	r2, [r4, #0]
				}	
				mosi_pin_index = i;
    676a:	strb	r3, [r0, #9]
				return;
			}
		}
	}
}
    676c:	pop	{r4, r5, r6, r7}
    676e:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMOSI_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 11) pinout &= ~3;
    6770:	ldr	r2, [pc, #12]	; (6780 <SPIClass::setMOSI(unsigned char)+0x9c>)
    6772:	ldrb	r3, [r2, #0]
    6774:	bic.w	r3, r3, #3
    6778:	strb	r3, [r2, #0]
    677a:	b.n	66ee <SPIClass::setMOSI(unsigned char)+0xa>
    677c:	.word	0x00013134
    6780:	.word	0x1fff20b9
    6784:	.word	0x000132fc

00006788 <SPIClass::setMISO(unsigned char)>:

void SPIClass::setMISO(uint8_t pin)
{
    6788:	push	{r4, r5, r6, r7}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    678a:	ldr	r3, [pc, #144]	; (681c <SPIClass::setMISO(unsigned char)+0x94>)
    678c:	ldr	r5, [r0, #4]
    678e:	cmp	r3, r5
    6790:	beq.n	67b4 <SPIClass::setMISO(unsigned char)+0x2c>
		SPCR.setMISO_soft(pin);
	}
	if (pin != hardware().miso_pin[miso_pin_index]) {
    6792:	ldrb	r3, [r0, #8]
    6794:	add	r3, r5
    6796:	ldrb	r6, [r3, #24]
    6798:	cmp	r1, r6
    679a:	beq.n	67b0 <SPIClass::setMISO(unsigned char)+0x28>
    679c:	add.w	r2, r5, #23
    67a0:	movs	r3, #0
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if  (pin == hardware().miso_pin[i]) {
    67a2:	ldrb.w	r4, [r2, #1]!
    67a6:	cmp	r4, r1
    67a8:	beq.n	67e0 <SPIClass::setMISO(unsigned char)+0x58>
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setMISO_soft(pin);
	}
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
    67aa:	adds	r3, #1
    67ac:	cmp	r3, #4
    67ae:	bne.n	67a2 <SPIClass::setMISO(unsigned char)+0x1a>
				miso_pin_index = i;
				return;
			}
		}
	}
}
    67b0:	pop	{r4, r5, r6, r7}
    67b2:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMISO_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 12) pinout &= ~0xc;
    67b4:	cmp	r1, #12
    67b6:	beq.n	680e <SPIClass::setMISO(unsigned char)+0x86>
		if (pin == 8)  pinout = (pinout & ~0xc) | 4;
    67b8:	cmp	r1, #8
    67ba:	beq.n	67d0 <SPIClass::setMISO(unsigned char)+0x48>
		if (pin == 39) pinout = (pinout & ~0xc) | 8;
    67bc:	cmp	r1, #39	; 0x27
    67be:	bne.n	6792 <SPIClass::setMISO(unsigned char)+0xa>
    67c0:	ldr	r2, [pc, #92]	; (6820 <SPIClass::setMISO(unsigned char)+0x98>)
    67c2:	ldrb	r3, [r2, #0]
    67c4:	bic.w	r3, r3, #12
    67c8:	orr.w	r3, r3, #8
    67cc:	strb	r3, [r2, #0]
    67ce:	b.n	6792 <SPIClass::setMISO(unsigned char)+0xa>
#endif
	}
	inline void setMISO_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 12) pinout &= ~0xc;
		if (pin == 8)  pinout = (pinout & ~0xc) | 4;
    67d0:	ldr	r2, [pc, #76]	; (6820 <SPIClass::setMISO(unsigned char)+0x98>)
    67d2:	ldrb	r3, [r2, #0]
    67d4:	bic.w	r3, r3, #12
    67d8:	orr.w	r3, r3, #4
    67dc:	strb	r3, [r2, #0]
    67de:	b.n	6792 <SPIClass::setMISO(unsigned char)+0xa>
		SPCR.setMISO_soft(pin);
	}
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if  (pin == hardware().miso_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    67e0:	ldmia.w	r5, {r1, r2}
    67e4:	ldr	r1, [r1, #0]
    67e6:	tst	r1, r2
    67e8:	beq.n	6808 <SPIClass::setMISO(unsigned char)+0x80>
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    67ea:	ldr	r2, [pc, #56]	; (6824 <SPIClass::setMISO(unsigned char)+0x9c>)
    67ec:	add.w	r6, r2, r6, lsl #3
					*reg = 0;
					reg = portConfigRegister(hardware().miso_pin[i]);
    67f0:	adds	r1, r5, r3
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if  (pin == hardware().miso_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    67f2:	ldr	r4, [r6, #4]
					*reg = 0;
    67f4:	movs	r7, #0
    67f6:	str	r7, [r4, #0]
					reg = portConfigRegister(hardware().miso_pin[i]);
    67f8:	ldrb	r1, [r1, #24]
    67fa:	add.w	r2, r2, r1, lsl #3
					*reg = hardware().miso_mux[i];
    67fe:	add.w	r5, r5, r3, lsl #2
			if  (pin == hardware().miso_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().miso_pin[i]);
    6802:	ldr	r2, [r2, #4]
					*reg = hardware().miso_mux[i];
    6804:	ldr	r1, [r5, #28]
    6806:	str	r1, [r2, #0]
				}	
				miso_pin_index = i;
    6808:	strb	r3, [r0, #8]
				return;
			}
		}
	}
}
    680a:	pop	{r4, r5, r6, r7}
    680c:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMISO_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 12) pinout &= ~0xc;
    680e:	ldr	r2, [pc, #16]	; (6820 <SPIClass::setMISO(unsigned char)+0x98>)
    6810:	ldrb	r3, [r2, #0]
    6812:	bic.w	r3, r3, #12
    6816:	strb	r3, [r2, #0]
    6818:	b.n	6792 <SPIClass::setMISO(unsigned char)+0xa>
    681a:	nop
    681c:	.word	0x00013134
    6820:	.word	0x1fff20b9
    6824:	.word	0x000132fc

00006828 <SPIClass::setSCK(unsigned char)>:

void SPIClass::setSCK(uint8_t pin)
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    6828:	ldr	r2, [pc, #160]	; (68cc <SPIClass::setSCK(unsigned char)+0xa4>)
    682a:	ldr	r3, [r0, #4]
    682c:	cmp	r2, r3
		}
	}
}

void SPIClass::setSCK(uint8_t pin)
{
    682e:	push	{r4, r5, r6}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    6830:	beq.n	685e <SPIClass::setSCK(unsigned char)+0x36>
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
    6832:	ldrb	r2, [r0, #10]
    6834:	add	r2, r3
    6836:	ldrb.w	r2, [r2, #64]	; 0x40
    683a:	cmp	r1, r2
    683c:	beq.n	685a <SPIClass::setSCK(unsigned char)+0x32>
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
    683e:	ldrb.w	r4, [r3, #64]	; 0x40
    6842:	cmp	r4, r1
    6844:	beq.n	68c6 <SPIClass::setSCK(unsigned char)+0x9e>
    6846:	ldrb.w	r4, [r3, #65]	; 0x41
    684a:	cmp	r4, r1
    684c:	beq.n	688a <SPIClass::setSCK(unsigned char)+0x62>
    684e:	ldrb.w	r4, [r3, #66]	; 0x42
    6852:	cmp	r4, r1
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
    6854:	it	eq
    6856:	moveq	r1, #2
			if  (pin == hardware().sck_pin[i]) {
    6858:	beq.n	688c <SPIClass::setSCK(unsigned char)+0x64>
				sck_pin_index = i;
				return;
			}
		}
	}
}
    685a:	pop	{r4, r5, r6}
    685c:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setSCK_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 13) pinout &= ~0x30;
    685e:	cmp	r1, #13
    6860:	beq.n	68ba <SPIClass::setSCK(unsigned char)+0x92>
		if (pin == 14) pinout = (pinout & ~0x30) | 0x10;
    6862:	cmp	r1, #14
    6864:	beq.n	687a <SPIClass::setSCK(unsigned char)+0x52>
		if (pin == 27) pinout = (pinout & ~0x30) | 0x20;
    6866:	cmp	r1, #27
    6868:	bne.n	6832 <SPIClass::setSCK(unsigned char)+0xa>
    686a:	ldr	r4, [pc, #100]	; (68d0 <SPIClass::setSCK(unsigned char)+0xa8>)
    686c:	ldrb	r2, [r4, #0]
    686e:	bic.w	r2, r2, #48	; 0x30
    6872:	orr.w	r2, r2, #32
    6876:	strb	r2, [r4, #0]
    6878:	b.n	6832 <SPIClass::setSCK(unsigned char)+0xa>
#endif
	}
	inline void setSCK_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 13) pinout &= ~0x30;
		if (pin == 14) pinout = (pinout & ~0x30) | 0x10;
    687a:	ldr	r4, [pc, #84]	; (68d0 <SPIClass::setSCK(unsigned char)+0xa8>)
    687c:	ldrb	r2, [r4, #0]
    687e:	bic.w	r2, r2, #48	; 0x30
    6882:	orr.w	r2, r2, #16
    6886:	strb	r2, [r4, #0]
    6888:	b.n	6832 <SPIClass::setSCK(unsigned char)+0xa>
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
    688a:	movs	r1, #1
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    688c:	ldr	r5, [r3, #0]
    688e:	ldr	r4, [r3, #4]
    6890:	ldr	r5, [r5, #0]
    6892:	tst	r5, r4
    6894:	beq.n	68b6 <SPIClass::setSCK(unsigned char)+0x8e>
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    6896:	ldr	r4, [pc, #60]	; (68d4 <SPIClass::setSCK(unsigned char)+0xac>)
    6898:	add.w	r2, r4, r2, lsl #3
					*reg = 0;
    689c:	movs	r6, #0
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    689e:	ldr	r5, [r2, #4]
					*reg = 0;
					reg = portConfigRegister(hardware().sck_pin[i]);
    68a0:	adds	r2, r3, r1
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
					*reg = 0;
    68a2:	str	r6, [r5, #0]
					reg = portConfigRegister(hardware().sck_pin[i]);
    68a4:	ldrb.w	r2, [r2, #64]	; 0x40
    68a8:	add.w	r4, r4, r2, lsl #3
					*reg = hardware().sck_mux[i];
    68ac:	add.w	r3, r3, r1, lsl #2
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().sck_pin[i]);
    68b0:	ldr	r2, [r4, #4]
					*reg = hardware().sck_mux[i];
    68b2:	ldr	r3, [r3, #68]	; 0x44
    68b4:	str	r3, [r2, #0]
				}	
				sck_pin_index = i;
    68b6:	strb	r1, [r0, #10]
				return;
    68b8:	b.n	685a <SPIClass::setSCK(unsigned char)+0x32>
		pinout = newpinout;
#endif
	}
	inline void setSCK_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 13) pinout &= ~0x30;
    68ba:	ldr	r4, [pc, #20]	; (68d0 <SPIClass::setSCK(unsigned char)+0xa8>)
    68bc:	ldrb	r2, [r4, #0]
    68be:	bic.w	r2, r2, #48	; 0x30
    68c2:	strb	r2, [r4, #0]
    68c4:	b.n	6832 <SPIClass::setSCK(unsigned char)+0xa>
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
    68c6:	movs	r1, #0
    68c8:	b.n	688c <SPIClass::setSCK(unsigned char)+0x64>
    68ca:	nop
    68cc:	.word	0x00013134
    68d0:	.word	0x1fff20b9
    68d4:	.word	0x000132fc

000068d8 <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    68d8:	cbz	r3, 68de <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    68da:	b.w	63b8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>
    68de:	bx	lr

000068e0 <breakTime(long, tmElements_t&)>:
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    68e0:	ldr	r2, [pc, #400]	; (6a74 <breakTime(long, tmElements_t&)+0x194>)
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    68e2:	ldr	r3, [pc, #404]	; (6a78 <breakTime(long, tmElements_t&)+0x198>)
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
    68e4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    68e8:	ldr	r6, [pc, #400]	; (6a7c <breakTime(long, tmElements_t&)+0x19c>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    68ea:	ldr.w	sl, [pc, #416]	; 6a8c <breakTime(long, tmElements_t&)+0x1ac>
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    68ee:	ldr	r4, [pc, #400]	; (6a80 <breakTime(long, tmElements_t&)+0x1a0>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    68f0:	ldr.w	r9, [pc, #400]	; 6a84 <breakTime(long, tmElements_t&)+0x1a4>
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    68f4:	umull	r5, r2, r2, r0
    68f8:	mov.w	ip, r2, lsr #16
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    68fc:	add.w	r7, ip, #4
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    6900:	umull	r2, r5, r3, r0
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    6904:	umull	r6, r2, r6, r0
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    6908:	umull	sl, fp, r7, sl
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    690c:	lsrs	r5, r5, #5
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    690e:	lsrs	r2, r2, #11
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    6910:	umull	r6, r3, r3, r5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    6914:	umull	r6, r4, r4, r2
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    6918:	rsb	r6, fp, r7
    691c:	add.w	r6, fp, r6, lsr #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    6920:	lsrs	r3, r3, #5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    6922:	lsrs	r6, r6, #2
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    6924:	lsrs	r4, r4, #4
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    6926:	rsb	r6, r6, r6, lsl #3
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    692a:	rsb	r3, r3, r3, lsl #4
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    692e:	add.w	r4, r4, r4, lsl #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    6932:	sub.w	r3, r5, r3, lsl #2
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    6936:	subs	r6, r7, r6
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    6938:	rsb	r5, r5, r5, lsl #4
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    693c:	sub.w	r2, r2, r4, lsl #3
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    6940:	sub.w	r0, r0, r5, lsl #2
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    6944:	adds	r6, #1
    6946:	movs	r4, #0
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    6948:	strb	r2, [r1, #2]
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    694a:	strb	r0, [r1, #0]
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    694c:	strb	r3, [r1, #1]
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    694e:	strb	r6, [r1, #3]
  
  year = 0;  
  days = 0;
    6950:	mov	r2, r4
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    6952:	movw	fp, #365	; 0x16d
    6956:	mov.w	r8, #100	; 0x64
    695a:	mov.w	sl, #400	; 0x190
    695e:	b.n	697e <breakTime(long, tmElements_t&)+0x9e>
    6960:	rsb	r5, r6, r5, asr #7
    6964:	mls	r5, sl, r5, r3
    6968:	cbnz	r0, 69c8 <breakTime(long, tmElements_t&)+0xe8>
    696a:	cmp	r5, #0
    696c:	ite	ne
    696e:	movne	r0, fp
    6970:	moveq.w	r0, #366	; 0x16e
    6974:	add	r2, r0
    6976:	cmp	ip, r2
    6978:	add.w	r4, r4, #1
    697c:	bcc.n	69a6 <breakTime(long, tmElements_t&)+0xc6>
    697e:	uxtb	r7, r4
    6980:	addw	r3, r7, #1970	; 0x7b2
    6984:	smull	r0, r5, r9, r3
    6988:	asrs	r6, r3, #31
    698a:	rsb	r0, r6, r5, asr #5
    698e:	ands.w	lr, r3, #3
    6992:	mls	r0, r8, r0, r3
    6996:	beq.n	6960 <breakTime(long, tmElements_t&)+0x80>
    6998:	movw	r0, #365	; 0x16d
    699c:	add	r2, r0
    699e:	cmp	ip, r2
    69a0:	add.w	r4, r4, #1
    69a4:	bcs.n	697e <breakTime(long, tmElements_t&)+0x9e>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
    69a6:	strb	r7, [r1, #6]
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    69a8:	cmp.w	lr, #0
    69ac:	bne.n	69ce <breakTime(long, tmElements_t&)+0xee>
    69ae:	ldr	r0, [pc, #212]	; (6a84 <breakTime(long, tmElements_t&)+0x1a4>)
    69b0:	asrs	r6, r3, #31
    69b2:	smull	r4, r0, r0, r3
    69b6:	rsb	r4, r6, r0, asr #5
    69ba:	movs	r5, #100	; 0x64
    69bc:	mls	r4, r5, r4, r3
    69c0:	cbz	r4, 6a32 <breakTime(long, tmElements_t&)+0x152>
    69c2:	mov.w	r4, #366	; 0x16e
    69c6:	b.n	69d4 <breakTime(long, tmElements_t&)+0xf4>
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    69c8:	mov.w	r0, #366	; 0x16e
    69cc:	b.n	6974 <breakTime(long, tmElements_t&)+0x94>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    69ce:	movw	r4, #365	; 0x16d
    69d2:	asrs	r6, r3, #31
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    69d4:	ldr	r0, [pc, #172]	; (6a84 <breakTime(long, tmElements_t&)+0x1a4>)
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    69d6:	ldr	r5, [pc, #176]	; (6a88 <breakTime(long, tmElements_t&)+0x1a8>)
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    69d8:	smull	r7, r0, r0, r3
    69dc:	rsb	r8, r6, r0, asr #5
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    69e0:	subs	r2, r2, r4
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    69e2:	rsb	r6, r6, r0, asr #7
    69e6:	movs	r4, #100	; 0x64
    69e8:	mov.w	r0, #400	; 0x190
    69ec:	mls	r6, r0, r6, r3
    69f0:	mls	r8, r4, r8, r3
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    69f4:	rsb	r2, r2, ip
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    69f8:	movs	r0, #1
    69fa:	movs	r3, #0
    69fc:	b.n	6a04 <breakTime(long, tmElements_t&)+0x124>
    69fe:	adds	r0, #1
    6a00:	uxtb	r0, r0
    6a02:	adds	r3, #1
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    6a04:	cmp	r3, #1
    6a06:	uxtb	r7, r3
    6a08:	beq.n	6a4c <breakTime(long, tmElements_t&)+0x16c>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    6a0a:	ldrb	r4, [r3, r5]
    6a0c:	cmp	r4, r2
    6a0e:	bhi.n	6a24 <breakTime(long, tmElements_t&)+0x144>
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    6a10:	cmp	r0, #12
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
      time -= monthLength;
    6a12:	sub.w	r2, r2, r4
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    6a16:	bne.n	69fe <breakTime(long, tmElements_t&)+0x11e>
    6a18:	movs	r7, #13
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    6a1a:	adds	r2, #1
    6a1c:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    6a1e:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    6a20:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6a24:	adds	r7, #1
    6a26:	uxtb	r7, r7
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    6a28:	adds	r2, #1
    6a2a:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    6a2c:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    6a2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    6a32:	mov.w	r4, #400	; 0x190
    6a36:	rsb	r0, r6, r0, asr #7
    6a3a:	mls	r0, r4, r0, r3
    6a3e:	cmp	r0, #0
    6a40:	movw	r4, #365	; 0x16d
    6a44:	it	eq
    6a46:	moveq.w	r4, #366	; 0x16e
    6a4a:	b.n	69d4 <breakTime(long, tmElements_t&)+0xf4>
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    6a4c:	cmp.w	lr, #0
    6a50:	bne.n	6a68 <breakTime(long, tmElements_t&)+0x188>
    6a52:	cmp.w	r8, #0
    6a56:	bne.n	6a70 <breakTime(long, tmElements_t&)+0x190>
    6a58:	cmp	r6, #0
    6a5a:	ite	ne
    6a5c:	movne	r4, #28
    6a5e:	moveq	r4, #29
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    6a60:	cmp	r2, r4
    6a62:	bcc.n	6a6c <breakTime(long, tmElements_t&)+0x18c>
      time -= monthLength;
    6a64:	subs	r2, r2, r4
    6a66:	b.n	69fe <breakTime(long, tmElements_t&)+0x11e>
    6a68:	movs	r4, #28
    6a6a:	b.n	6a60 <breakTime(long, tmElements_t&)+0x180>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    6a6c:	movs	r7, #2
    6a6e:	b.n	6a1a <breakTime(long, tmElements_t&)+0x13a>
    6a70:	movs	r4, #29
    6a72:	b.n	6a60 <breakTime(long, tmElements_t&)+0x180>
    6a74:	.word	0xc22e4507
    6a78:	.word	0x88888889
    6a7c:	.word	0x91a2b3c5
    6a80:	.word	0xaaaaaaab
    6a84:	.word	0x51eb851f
    6a88:	.word	0x000131c8
    6a8c:	.word	0x24924925

00006a90 <refreshCache(long) [clone .part.0]>:

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    6a90:	push	{r4, lr}
  if (t != cacheTime) {
    breakTime(t, tm); 
    6a92:	ldr	r1, [pc, #12]	; (6aa0 <refreshCache(long) [clone .part.0]+0x10>)

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    6a94:	mov	r4, r0
  if (t != cacheTime) {
    breakTime(t, tm); 
    6a96:	bl	68e0 <breakTime(long, tmElements_t&)>
    cacheTime = t; 
    6a9a:	ldr	r3, [pc, #8]	; (6aa4 <refreshCache(long) [clone .part.0]+0x14>)
    6a9c:	str	r4, [r3, #0]
    6a9e:	pop	{r4, pc}
    6aa0:	.word	0x1fff1a68
    6aa4:	.word	0x1fff1a64

00006aa8 <now()>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    6aa8:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6aaa:	ldr	r4, [pc, #128]	; (6b2c <now()+0x84>)
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    6aac:	ldr	r6, [pc, #128]	; (6b30 <now()+0x88>)
    6aae:	ldr	r3, [r4, #0]
    6ab0:	ldr	r2, [r6, #0]
    6ab2:	ldr	r5, [pc, #128]	; (6b34 <now()+0x8c>)
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    6ab4:	sub	sp, #12
    6ab6:	ldr	r0, [r5, #0]
    6ab8:	str	r3, [sp, #0]
	return ret;
    6aba:	ldr	r3, [sp, #0]
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    6abc:	subs	r3, r3, r2
    6abe:	cmp.w	r3, #1000	; 0x3e8
    6ac2:	bcc.n	6ae4 <now()+0x3c>
    6ac4:	adds	r0, #1
    6ac6:	b.n	6aca <now()+0x22>
    6ac8:	mov	r0, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6aca:	ldr	r3, [r4, #0]
    6acc:	str	r3, [sp, #0]
	return ret;
    6ace:	ldr	r3, [sp, #0]
		// millis() and prevMillis are both unsigned ints thus the subtraction will always be the absolute value of the difference
    sysTime++;
    prevMillis += 1000;	
    6ad0:	add.w	r2, r2, #1000	; 0x3e8
#endif


time_t now() {
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    6ad4:	subs	r3, r3, r2
    6ad6:	cmp.w	r3, #1000	; 0x3e8
    6ada:	add.w	r1, r0, #1
    6ade:	bcs.n	6ac8 <now()+0x20>
    6ae0:	str	r0, [r5, #0]
    6ae2:	str	r2, [r6, #0]
    prevMillis += 1000;	
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
    6ae4:	ldr	r7, [pc, #80]	; (6b38 <now()+0x90>)
    6ae6:	ldr	r3, [r7, #0]
    6ae8:	cmp	r0, r3
    6aea:	bcc.n	6b0c <now()+0x64>
    if (getTimePtr != 0) {
    6aec:	ldr	r3, [pc, #76]	; (6b3c <now()+0x94>)
    6aee:	ldr	r3, [r3, #0]
    6af0:	cbz	r3, 6b0c <now()+0x64>
      time_t t = getTimePtr();
    6af2:	blx	r3
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    6af4:	ldr	r3, [pc, #72]	; (6b40 <now()+0x98>)
#endif
  }
  if (nextSyncTime <= sysTime) {
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
    6af6:	cbnz	r0, 6b10 <now()+0x68>
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    6af8:	ldr	r1, [pc, #72]	; (6b44 <now()+0x9c>)
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    6afa:	ldr	r2, [r3, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    6afc:	ldrb	r3, [r1, #0]
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    6afe:	ldr	r0, [r5, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    6b00:	adds	r3, #0
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    6b02:	add	r2, r0
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    6b04:	it	ne
    6b06:	movne	r3, #1
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    6b08:	str	r2, [r7, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    6b0a:	strb	r3, [r1, #0]
      }
    }
  }  
  return (time_t)sysTime;
}
    6b0c:	add	sp, #12
    6b0e:	pop	{r4, r5, r6, r7, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6b10:	ldr	r2, [r4, #0]
    6b12:	str	r2, [sp, #4]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    6b14:	ldr	r3, [r3, #0]
  Status = timeSet;
    6b16:	ldr	r2, [pc, #44]	; (6b44 <now()+0x9c>)
	return ret;
    6b18:	ldr	r4, [sp, #4]
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    6b1a:	str	r0, [r5, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
    6b1c:	add	r3, r0
  Status = timeSet;
    6b1e:	movs	r1, #2
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    6b20:	str	r4, [r6, #0]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    6b22:	str	r3, [r7, #0]
  Status = timeSet;
    6b24:	strb	r1, [r2, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
      }
    }
  }  
  return (time_t)sysTime;
}
    6b26:	add	sp, #12
    6b28:	pop	{r4, r5, r6, r7, pc}
    6b2a:	nop
    6b2c:	.word	0x1fff1f98
    6b30:	.word	0x1fff1a7c
    6b34:	.word	0x1fff1a70
    6b38:	.word	0x1fff1a80
    6b3c:	.word	0x1fff1a78
    6b40:	.word	0x1fff09bc
    6b44:	.word	0x1fff1a74

00006b48 <hour()>:
    breakTime(t, tm); 
    cacheTime = t; 
  }
}

int hour() { // the hour now 
    6b48:	push	{r3, lr}
  return hour(now()); 
    6b4a:	bl	6aa8 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    6b4e:	ldr	r3, [pc, #16]	; (6b60 <hour()+0x18>)
    6b50:	ldr	r3, [r3, #0]
    6b52:	cmp	r0, r3
    6b54:	beq.n	6b5a <hour()+0x12>
    6b56:	bl	6a90 <refreshCache(long) [clone .part.0]>
  return hour(now()); 
}

int hour(time_t t) { // the hour for the given time
  refreshCache(t);
  return tm.Hour;  
    6b5a:	ldr	r3, [pc, #8]	; (6b64 <hour()+0x1c>)
  }
}

int hour() { // the hour now 
  return hour(now()); 
}
    6b5c:	ldrb	r0, [r3, #2]
    6b5e:	pop	{r3, pc}
    6b60:	.word	0x1fff1a64
    6b64:	.word	0x1fff1a68

00006b68 <minute()>:

uint8_t isPM(time_t t) { // returns true if PM
  return (hour(t) >= 12); 
}

int minute() {
    6b68:	push	{r3, lr}
  return minute(now()); 
    6b6a:	bl	6aa8 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    6b6e:	ldr	r3, [pc, #16]	; (6b80 <minute()+0x18>)
    6b70:	ldr	r3, [r3, #0]
    6b72:	cmp	r0, r3
    6b74:	beq.n	6b7a <minute()+0x12>
    6b76:	bl	6a90 <refreshCache(long) [clone .part.0]>
  return minute(now()); 
}

int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
    6b7a:	ldr	r3, [pc, #8]	; (6b84 <minute()+0x1c>)
  return (hour(t) >= 12); 
}

int minute() {
  return minute(now()); 
}
    6b7c:	ldrb	r0, [r3, #1]
    6b7e:	pop	{r3, pc}
    6b80:	.word	0x1fff1a64
    6b84:	.word	0x1fff1a68

00006b88 <second()>:
int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
}

int second() {
    6b88:	push	{r3, lr}
  return second(now()); 
    6b8a:	bl	6aa8 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    6b8e:	ldr	r3, [pc, #16]	; (6ba0 <second()+0x18>)
    6b90:	ldr	r3, [r3, #0]
    6b92:	cmp	r0, r3
    6b94:	beq.n	6b9a <second()+0x12>
    6b96:	bl	6a90 <refreshCache(long) [clone .part.0]>
  return second(now()); 
}

int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
    6b9a:	ldr	r3, [pc, #8]	; (6ba4 <second()+0x1c>)
  return tm.Minute;  
}

int second() {
  return second(now()); 
}
    6b9c:	ldrb	r0, [r3, #0]
    6b9e:	pop	{r3, pc}
    6ba0:	.word	0x1fff1a64
    6ba4:	.word	0x1fff1a68

00006ba8 <day()>:
int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
}

int day(){
    6ba8:	push	{r3, lr}
  return(day(now())); 
    6baa:	bl	6aa8 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    6bae:	ldr	r3, [pc, #16]	; (6bc0 <day()+0x18>)
    6bb0:	ldr	r3, [r3, #0]
    6bb2:	cmp	r0, r3
    6bb4:	beq.n	6bba <day()+0x12>
    6bb6:	bl	6a90 <refreshCache(long) [clone .part.0]>
  return(day(now())); 
}

int day(time_t t) { // the day for the given time (0-6)
  refreshCache(t);
  return tm.Day;
    6bba:	ldr	r3, [pc, #8]	; (6bc4 <day()+0x1c>)
  return tm.Second;
}

int day(){
  return(day(now())); 
}
    6bbc:	ldrb	r0, [r3, #4]
    6bbe:	pop	{r3, pc}
    6bc0:	.word	0x1fff1a64
    6bc4:	.word	0x1fff1a68

00006bc8 <month()>:
int weekday(time_t t) {
  refreshCache(t);
  return tm.Wday;
}
   
int month(){
    6bc8:	push	{r3, lr}
  return month(now()); 
    6bca:	bl	6aa8 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    6bce:	ldr	r3, [pc, #16]	; (6be0 <month()+0x18>)
    6bd0:	ldr	r3, [r3, #0]
    6bd2:	cmp	r0, r3
    6bd4:	beq.n	6bda <month()+0x12>
    6bd6:	bl	6a90 <refreshCache(long) [clone .part.0]>
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
    6bda:	ldr	r3, [pc, #8]	; (6be4 <month()+0x1c>)
  return tm.Wday;
}
   
int month(){
  return month(now()); 
}
    6bdc:	ldrb	r0, [r3, #5]
    6bde:	pop	{r3, pc}
    6be0:	.word	0x1fff1a64
    6be4:	.word	0x1fff1a68

00006be8 <year()>:
int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
    6be8:	push	{r3, lr}
  return year(now()); 
    6bea:	bl	6aa8 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    6bee:	ldr	r3, [pc, #20]	; (6c04 <year()+0x1c>)
    6bf0:	ldr	r3, [r3, #0]
    6bf2:	cmp	r0, r3
    6bf4:	beq.n	6bfa <year()+0x12>
    6bf6:	bl	6a90 <refreshCache(long) [clone .part.0]>
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
  return tmYearToCalendar(tm.Year);
    6bfa:	ldr	r3, [pc, #12]	; (6c08 <year()+0x20>)
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
    6bfc:	ldrb	r0, [r3, #6]
}
    6bfe:	addw	r0, r0, #1970	; 0x7b2
    6c02:	pop	{r3, pc}
    6c04:	.word	0x1fff1a64
    6c08:	.word	0x1fff1a68

00006c0c <SDClass::~SDClass()>:
	char *filename;
};



class SDClass : public FS
    6c0c:	bx	lr
    6c0e:	nop

00006c10 <_GLOBAL__sub_I_SD>:
 */

#include <Arduino.h>
#include <SD.h>

SDClass SD;
    6c10:	push	{r4, r5, r6, r7}
{
public:
	SDClass() { }
    6c12:	ldr	r3, [pc, #60]	; (6c50 <_GLOBAL__sub_I_SD+0x40>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    6c14:	ldr	r4, [pc, #60]	; (6c54 <_GLOBAL__sub_I_SD+0x44>)
    6c16:	str.w	r4, [r3, #1164]	; 0x48c
    6c1a:	movs	r5, #40	; 0x28
    6c1c:	movs	r4, #0
    6c1e:	ldr	r0, [pc, #56]	; (6c58 <_GLOBAL__sub_I_SD+0x48>)
    6c20:	ldr	r7, [pc, #56]	; (6c5c <_GLOBAL__sub_I_SD+0x4c>)
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    6c22:	ldr	r6, [pc, #60]	; (6c60 <_GLOBAL__sub_I_SD+0x50>)
    6c24:	strb.w	r5, [r3, #1195]	; 0x4ab
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() : m_options(FIFO_SDIO) {}
    6c28:	strb.w	r4, [r3, #1172]	; 0x494
    6c2c:	strb.w	r4, [r3, #1198]	; 0x4ae
    6c30:	str	r0, [r3, #0]
    6c32:	str.w	r7, [r3, #1176]	; 0x498
    6c36:	str.w	r6, [r3, #1184]	; 0x4a0
    6c3a:	str.w	r4, [r3, #1148]	; 0x47c
    6c3e:	str.w	r4, [r3, #1152]	; 0x480
    6c42:	ldr	r2, [pc, #32]	; (6c64 <_GLOBAL__sub_I_SD+0x54>)
    6c44:	ldr	r1, [pc, #32]	; (6c68 <_GLOBAL__sub_I_SD+0x58>)
    6c46:	mov	r0, r3
    6c48:	pop	{r4, r5, r6, r7}
    6c4a:	b.w	ded0 <__aeabi_atexit>
    6c4e:	nop
    6c50:	.word	0x1fff1a84
    6c54:	.word	0x0001323c
    6c58:	.word	0x00012f38
    6c5c:	.word	0x000131e4
    6c60:	.word	0x38011001
    6c64:	.word	0x1fff0970
    6c68:	.word	0x00006c0d

00006c6c <fmtBase10(char*, unsigned short)>:
}
*/
//------------------------------------------------------------------------------
// Format 16-bit unsigned
char* fmtBase10(char* str, uint16_t n) {
  while (n > 9) {
    6c6c:	cmp	r1, #9
    6c6e:	bls.n	6cb8 <fmtBase10(char*, unsigned short)+0x4c>
// return q + (r > 9);
}
*/
//------------------------------------------------------------------------------
// Format 16-bit unsigned
char* fmtBase10(char* str, uint16_t n) {
    6c70:	push	{r4}
#ifdef USE_STIMMER
    uint8_t tmp8, r;
    divmod10_asm16(n, r, tmp8);
#else  // USE_STIMMER
    uint16_t t = n;
    n = (n >> 1) + (n >> 2);
    6c72:	asrs	r2, r1, #2
    6c74:	add.w	r2, r2, r1, lsr #1
    n = n + (n >> 4);
    6c78:	ubfx	r4, r2, #4, #16
    6c7c:	add	r2, r4
    6c7e:	uxth	r2, r2
    n = n + (n >> 8);
    // n = n + (n >> 16);  // no code for 16-bit n
    n = n >> 3;
    6c80:	add.w	r2, r2, r2, lsr #8
    6c84:	ubfx	r3, r2, #3, #13
    uint8_t r = t - (((n << 2) + n) << 1);
    6c88:	uxtb	r4, r3
    6c8a:	add.w	r4, r4, r4, lsl #2
    6c8e:	sub.w	r2, r1, r4, lsl #1
    6c92:	uxtb	r2, r2
    if (r > 9) {
    6c94:	cmp	r2, #9
    uint16_t t = n;
    n = (n >> 1) + (n >> 2);
    n = n + (n >> 4);
    n = n + (n >> 8);
    // n = n + (n >> 16);  // no code for 16-bit n
    n = n >> 3;
    6c96:	uxth	r1, r3
    uint8_t r = t - (((n << 2) + n) << 1);
    if (r > 9) {
      n++;
      r -= 10;
    6c98:	sub.w	r3, r2, #10
    6c9c:	itt	hi
    6c9e:	uxtbhi	r2, r3
    n = n + (n >> 8);
    // n = n + (n >> 16);  // no code for 16-bit n
    n = n >> 3;
    uint8_t r = t - (((n << 2) + n) << 1);
    if (r > 9) {
      n++;
    6ca0:	addhi	r1, #1
      r -= 10;
    }
#endif  // USE_STIMMER
    *--str = r + '0';
    6ca2:	adds	r2, #48	; 0x30
}
*/
//------------------------------------------------------------------------------
// Format 16-bit unsigned
char* fmtBase10(char* str, uint16_t n) {
  while (n > 9) {
    6ca4:	cmp	r1, #9
    if (r > 9) {
      n++;
      r -= 10;
    }
#endif  // USE_STIMMER
    *--str = r + '0';
    6ca6:	strb.w	r2, [r0, #-1]!
}
*/
//------------------------------------------------------------------------------
// Format 16-bit unsigned
char* fmtBase10(char* str, uint16_t n) {
  while (n > 9) {
    6caa:	bhi.n	6c72 <fmtBase10(char*, unsigned short)+0x6>
      r -= 10;
    }
#endif  // USE_STIMMER
    *--str = r + '0';
  }
  *--str = n + '0';
    6cac:	adds	r1, #48	; 0x30
    6cae:	strb.w	r1, [r0, #-1]!
  return str;
}
    6cb2:	ldr.w	r4, [sp], #4
    6cb6:	bx	lr
      r -= 10;
    }
#endif  // USE_STIMMER
    *--str = r + '0';
  }
  *--str = n + '0';
    6cb8:	adds	r1, #48	; 0x30
    6cba:	strb.w	r1, [r0, #-1]!
  return str;
}
    6cbe:	bx	lr

00006cc0 <fmtBase10(char*, unsigned long)>:
//------------------------------------------------------------------------------
// format 32-bit unsigned
char* fmtBase10(char* str, uint32_t n) {
  while (n > 0XFFFF) {
    6cc0:	cmp.w	r1, #65536	; 0x10000
    6cc4:	bcc.n	6d0c <fmtBase10(char*, unsigned long)+0x4c>
  *--str = n + '0';
  return str;
}
//------------------------------------------------------------------------------
// format 32-bit unsigned
char* fmtBase10(char* str, uint32_t n) {
    6cc6:	push	{r4}
#ifdef USE_STIMMER
    uint8_t tmp8, r;
    divmod10_asm32(n, r, tmp8);
#else  //  USE_STIMMER
    uint32_t t = n;
    n = (n >> 1) + (n >> 2);
    6cc8:	lsrs	r3, r1, #2
    6cca:	add.w	r3, r3, r1, lsr #1
    n = n + (n >> 4);
    6cce:	add.w	r3, r3, r3, lsr #4
    n = n + (n >> 8);
    6cd2:	add.w	r3, r3, r3, lsr #8
    n = n + (n >> 16);
    6cd6:	add.w	r3, r3, r3, lsr #16
    n = n >> 3;
    6cda:	lsrs	r3, r3, #3
    uint8_t r = t - (((n << 2) + n) << 1);
    6cdc:	uxtb	r2, r3
    6cde:	add.w	r2, r2, r2, lsl #2
    6ce2:	sub.w	r1, r1, r2, lsl #1
    6ce6:	uxtb	r2, r1
    if (r > 9) {
    6ce8:	cmp	r2, #9
      n++;
      r -= 10;
    6cea:	sub.w	r4, r2, #10
    6cee:	itte	hi
    6cf0:	uxtbhi	r2, r4
    n = n + (n >> 8);
    n = n + (n >> 16);
    n = n >> 3;
    uint8_t r = t - (((n << 2) + n) << 1);
    if (r > 9) {
      n++;
    6cf2:	addhi	r1, r3, #1
    uint32_t t = n;
    n = (n >> 1) + (n >> 2);
    n = n + (n >> 4);
    n = n + (n >> 8);
    n = n + (n >> 16);
    n = n >> 3;
    6cf4:	movls	r1, r3
    if (r > 9) {
      n++;
      r -= 10;
    }
#endif  // USE_STIMMER
    *--str = r + '0';
    6cf6:	adds	r2, #48	; 0x30
  return str;
}
//------------------------------------------------------------------------------
// format 32-bit unsigned
char* fmtBase10(char* str, uint32_t n) {
  while (n > 0XFFFF) {
    6cf8:	cmp.w	r1, #65536	; 0x10000
    if (r > 9) {
      n++;
      r -= 10;
    }
#endif  // USE_STIMMER
    *--str = r + '0';
    6cfc:	strb.w	r2, [r0, #-1]!
  return str;
}
//------------------------------------------------------------------------------
// format 32-bit unsigned
char* fmtBase10(char* str, uint32_t n) {
  while (n > 0XFFFF) {
    6d00:	bcs.n	6cc8 <fmtBase10(char*, unsigned long)+0x8>
      r -= 10;
    }
#endif  // USE_STIMMER
    *--str = r + '0';
  }
  return fmtBase10(str, (uint16_t)n);
    6d02:	uxth	r1, r1
}
    6d04:	ldr.w	r4, [sp], #4
      r -= 10;
    }
#endif  // USE_STIMMER
    *--str = r + '0';
  }
  return fmtBase10(str, (uint16_t)n);
    6d08:	b.w	6c6c <fmtBase10(char*, unsigned short)>
    6d0c:	uxth	r1, r1
    6d0e:	b.w	6c6c <fmtBase10(char*, unsigned short)>
    6d12:	nop

00006d14 <fsFmtDate(char*, unsigned short)>:
    *--str = '0';
  }
  return str;
}
//------------------------------------------------------------------------------
char* fsFmtDate(char* str, uint16_t date) {
    6d14:	push	{r3, r4, r5, lr}
  str = fsFmtField(str, date & 31, 0);
    6d16:	and.w	r5, r1, #31
    *--str = '0';
  }
  return str;
}
//------------------------------------------------------------------------------
char* fsFmtDate(char* str, uint16_t date) {
    6d1a:	mov	r4, r1
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
    6d1c:	mov	r1, r5
    6d1e:	bl	6c6c <fmtBase10(char*, unsigned short)>
  if (n < 10) {
    6d22:	cmp	r5, #9
    6d24:	bhi.n	6d2e <fsFmtDate(char*, unsigned short)+0x1a>
    *--str = '0';
    6d26:	movs	r3, #48	; 0x30
    6d28:	strb.w	r3, [r0, #-1]
    6d2c:	subs	r0, #1
  return str;
}
//------------------------------------------------------------------------------
char* fsFmtDate(char* str, uint16_t date) {
  str = fsFmtField(str, date & 31, 0);
  date >>= 5;
    6d2e:	asrs	r4, r4, #5
  str = fsFmtField(str, date & 15, '-');
    6d30:	and.w	r5, r4, #15
  }
}  // namespace FsDateTime
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
    6d34:	movs	r3, #45	; 0x2d
    6d36:	strb.w	r3, [r0, #-1]
  }
  str = fmtBase10(str, n);
    6d3a:	mov	r1, r5
    6d3c:	subs	r0, #1
    6d3e:	bl	6c6c <fmtBase10(char*, unsigned short)>
  if (n < 10) {
    6d42:	cmp	r5, #9
    6d44:	bhi.n	6d4e <fsFmtDate(char*, unsigned short)+0x3a>
    *--str = '0';
    6d46:	movs	r3, #48	; 0x30
    6d48:	strb.w	r3, [r0, #-1]
    6d4c:	subs	r0, #1
  }
}  // namespace FsDateTime
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
    6d4e:	movs	r3, #45	; 0x2d
  }
  str = fmtBase10(str, n);
    6d50:	asrs	r1, r4, #4
  }
}  // namespace FsDateTime
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
    6d52:	strb.w	r3, [r0, #-1]
  }
  str = fmtBase10(str, n);
    6d56:	addw	r1, r1, #1980	; 0x7bc
    6d5a:	subs	r0, #1
  str = fsFmtField(str, date & 31, 0);
  date >>= 5;
  str = fsFmtField(str, date & 15, '-');
  date >>= 4;
  return fsFmtField(str, 1980 + date, '-');
}
    6d5c:	ldmia.w	sp!, {r3, r4, r5, lr}
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
    6d60:	b.w	6c6c <fmtBase10(char*, unsigned short)>

00006d64 <fsFmtTime(char*, unsigned short)>:
  str = fsFmtField(str, date & 15, '-');
  date >>= 4;
  return fsFmtField(str, 1980 + date, '-');
}
//------------------------------------------------------------------------------
char* fsFmtTime(char* str, uint16_t time) {
    6d64:	push	{r3, r4, r5, lr}
  time >>= 5;
    6d66:	lsrs	r4, r1, #5
  str = fsFmtField(str, time & 63, 0);
    6d68:	and.w	r5, r4, #63	; 0x3f
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
    6d6c:	mov	r1, r5
    6d6e:	bl	6c6c <fmtBase10(char*, unsigned short)>
  if (n < 10) {
    6d72:	cmp	r5, #9
    6d74:	bhi.n	6d7e <fsFmtTime(char*, unsigned short)+0x1a>
    *--str = '0';
    6d76:	movs	r3, #48	; 0x30
    6d78:	strb.w	r3, [r0, #-1]
    6d7c:	subs	r0, #1
    6d7e:	asrs	r4, r4, #6
  }
}  // namespace FsDateTime
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
    6d80:	movs	r3, #58	; 0x3a
    6d82:	strb.w	r3, [r0, #-1]
  }
  str = fmtBase10(str, n);
    6d86:	mov	r1, r4
    6d88:	subs	r0, #1
    6d8a:	bl	6c6c <fmtBase10(char*, unsigned short)>
  if (n < 10) {
    6d8e:	cmp	r4, #9
    6d90:	bgt.n	6d9a <fsFmtTime(char*, unsigned short)+0x36>
    *--str = '0';
    6d92:	movs	r3, #48	; 0x30
    6d94:	strb.w	r3, [r0, #-1]
    6d98:	subs	r0, #1
//------------------------------------------------------------------------------
char* fsFmtTime(char* str, uint16_t time) {
  time >>= 5;
  str = fsFmtField(str, time & 63, 0);
  return fsFmtField(str, time >> 6, ':');
}
    6d9a:	pop	{r3, r4, r5, pc}

00006d9c <fsPrintDateTime(Print*, unsigned short, unsigned short)>:
    } while (str > buf);
  }
  return pr->write(reinterpret_cast<uint8_t*>(str), buf + sizeof(buf) - str);
}
//------------------------------------------------------------------------------
size_t fsPrintDateTime(print_t* pr, uint16_t date, uint16_t time) {
    6d9c:	push	{r4, r5, lr}
    6d9e:	mov	r4, r0
    6da0:	sub	sp, #20
  // Allow YYYY-MM-DD hh:mm
  char buf[sizeof("YYYY-MM-DD hh:mm") -1];
  char* str = buf + sizeof(buf);
  if (date) {
    6da2:	cbnz	r1, 6dc2 <fsPrintDateTime(Print*, unsigned short, unsigned short)+0x26>
    6da4:	add	r1, sp, #16
    6da6:	mov	r2, sp
    str = fsFmtTime(str, time);
    *--str = ' ';
    str = fsFmtDate(str, date);
  } else {
    do {
      *--str = ' ';
    6da8:	movs	r3, #32
    6daa:	strb.w	r3, [r1, #-1]!
    } while (str > buf);
    6dae:	cmp	r1, r2
    6db0:	bne.n	6daa <fsPrintDateTime(Print*, unsigned short, unsigned short)+0xe>
  }
  return pr->write(reinterpret_cast<uint8_t*>(str), buf + sizeof(buf) - str);
    6db2:	ldr	r3, [r4, #0]
    6db4:	add	r2, sp, #16
    6db6:	mov	r0, r4
    6db8:	ldr	r3, [r3, #4]
    6dba:	subs	r2, r2, r1
    6dbc:	blx	r3
}
    6dbe:	add	sp, #20
    6dc0:	pop	{r4, r5, pc}
    6dc2:	mov	r5, r1
size_t fsPrintDateTime(print_t* pr, uint16_t date, uint16_t time) {
  // Allow YYYY-MM-DD hh:mm
  char buf[sizeof("YYYY-MM-DD hh:mm") -1];
  char* str = buf + sizeof(buf);
  if (date) {
    str = fsFmtTime(str, time);
    6dc4:	add	r0, sp, #16
    6dc6:	mov	r1, r2
    6dc8:	bl	6d64 <fsFmtTime(char*, unsigned short)>
    *--str = ' ';
    6dcc:	movs	r3, #32
    str = fsFmtDate(str, date);
    6dce:	mov	r1, r5
  // Allow YYYY-MM-DD hh:mm
  char buf[sizeof("YYYY-MM-DD hh:mm") -1];
  char* str = buf + sizeof(buf);
  if (date) {
    str = fsFmtTime(str, time);
    *--str = ' ';
    6dd0:	strb.w	r3, [r0, #-1]
    str = fsFmtDate(str, date);
    6dd4:	subs	r0, #1
    6dd6:	bl	6d14 <fsFmtDate(char*, unsigned short)>
    6dda:	mov	r1, r0
    6ddc:	b.n	6db2 <fsPrintDateTime(Print*, unsigned short, unsigned short)+0x16>
    6dde:	nop

00006de0 <fsPrintDateTime(Print*, unsigned long)>:
  }
  return pr->write(reinterpret_cast<uint8_t*>(str), buf + sizeof(buf) - str);
}
//------------------------------------------------------------------------------
size_t fsPrintDateTime(print_t* pr, uint32_t dateTime) {
  return fsPrintDateTime(pr, dateTime >> 16, dateTime & 0XFFFF);
    6de0:	uxth	r2, r1
    6de2:	lsrs	r1, r1, #16
    6de4:	b.w	6d9c <fsPrintDateTime(Print*, unsigned short, unsigned short)>

00006de8 <ExFatFile::close()>:
#include "../common/DebugMacros.h"
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
    6de8:	push	{r4, lr}
    6dea:	mov	r4, r0
  bool rtn = sync();
    6dec:	bl	82c8 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    6df0:	movs	r3, #0
    6df2:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    6df6:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    6dfa:	pop	{r4, pc}

00006dfc <ExFatFile::getName(char*, unsigned int)>:
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
    6dfc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    6e00:	add.w	r3, r0, #36	; 0x24
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
    6e04:	mov	r6, r0
    6e06:	mov	r8, r1
    6e08:	mov	r5, r2
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    6e0a:	ldmia.w	r3, {r0, r1, r2}
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
    6e0e:	sub	sp, #20
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
  size_t n = 0;
  if (!isOpen()) {
    6e10:	ldrb.w	r3, [r6, #49]	; 0x31
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    6e14:	add.w	r9, sp, #4
    6e18:	stmia.w	r9, {r0, r1, r2}
  size_t n = 0;
  if (!isOpen()) {
    6e1c:	cmp	r3, #0
    6e1e:	beq.n	6e92 <ExFatFile::getName(char*, unsigned int)+0x96>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    6e20:	ldrb.w	r3, [r6, #48]	; 0x30
    6e24:	cmp	r3, #1
    6e26:	bls.n	6e9e <ExFatFile::getName(char*, unsigned int)+0xa2>
    6e28:	movs	r7, #1
    6e2a:	movs	r4, #0
    if (m_vol->dirSeek(&pos, is == 1 ? 64: 32) != 1) {
    6e2c:	cmp	r7, #1
    6e2e:	ite	eq
    6e30:	moveq	r2, #64	; 0x40
    6e32:	movne	r2, #32
    6e34:	mov	r1, r9
    6e36:	ldr	r0, [r6, #32]
    6e38:	bl	7d80 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    6e3c:	cmp	r0, #1
    6e3e:	bne.n	6e92 <ExFatFile::getName(char*, unsigned int)+0x96>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dn = reinterpret_cast<DirName_t*>
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    6e40:	movs	r2, #0
    6e42:	mov	r1, r9
    6e44:	ldr	r0, [r6, #32]
    6e46:	bl	7d4c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    6e4a:	cbz	r0, 6e92 <ExFatFile::getName(char*, unsigned int)+0x96>
    6e4c:	ldrb	r3, [r0, #0]
    6e4e:	cmp	r3, #193	; 0xc1
    6e50:	bne.n	6e92 <ExFatFile::getName(char*, unsigned int)+0x96>
    6e52:	add.w	r1, r0, #30
    6e56:	add.w	r2, r8, r4
    6e5a:	mov	r3, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
      if ((n + 1) >= length) {
    6e5c:	adds	r4, #1
    6e5e:	cmp	r4, r5
    6e60:	bcs.n	6e84 <ExFatFile::getName(char*, unsigned int)+0x88>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    6e62:	ldrh.w	r3, [r0, #2]!
        goto done;
      }
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    6e66:	cmp	r3, #126	; 0x7e
    6e68:	ite	ls
    6e6a:	uxtbls	r3, r3
    6e6c:	movhi	r3, #63	; 0x3f
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    6e6e:	cmp	r0, r1
      if ((n + 1) >= length) {
        goto done;
      }
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    6e70:	strb.w	r3, [r2], #1
    6e74:	mov	r3, r4
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    6e76:	bne.n	6e5c <ExFatFile::getName(char*, unsigned int)+0x60>
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    6e78:	adds	r7, #1
    6e7a:	ldrb.w	r2, [r6, #48]	; 0x30
    6e7e:	uxtb	r7, r7
    6e80:	cmp	r2, r7
    6e82:	bhi.n	6e2c <ExFatFile::getName(char*, unsigned int)+0x30>
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    6e84:	movs	r2, #0
  return n;
    6e86:	mov	r0, r3
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    6e88:	strb.w	r2, [r8, r3]
  return n;

 fail:
  *name = 0;
  return 0;
}
    6e8c:	add	sp, #20
    6e8e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
    6e92:	movs	r0, #0
    6e94:	strb.w	r0, [r8]
  return 0;
}
    6e98:	add	sp, #20
    6e9a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    6e9e:	movs	r3, #0
    6ea0:	b.n	6e84 <ExFatFile::getName(char*, unsigned int)+0x88>
    6ea2:	nop

00006ea4 <ExFatFile::openRoot(ExFatVolume*)>:
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    6ea4:	ldrb.w	r2, [r0, #49]	; 0x31
    6ea8:	cbz	r2, 6eae <ExFatFile::openRoot(ExFatVolume*)+0xa>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    6eaa:	movs	r0, #0
    6eac:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    6eae:	push	{r3, r4, r5, lr}
    6eb0:	mov	r4, r0
    6eb2:	mov	r5, r1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    6eb4:	mov	r1, r2
    6eb6:	movs	r2, #56	; 0x38
    6eb8:	bl	f32c <memset>
  m_attributes = FILE_ATTR_ROOT;
    6ebc:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    6ebe:	movs	r0, #1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    6ec0:	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    6ec4:	strb.w	r0, [r4, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    6ec8:	str	r5, [r4, #32]
    6eca:	pop	{r3, r4, r5, pc}

00006ecc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const ExChar_t* path,
                            ExName_t* fname, const ExChar_t** ptr) {
    6ecc:	push	{r4, r5, r6, r7, lr}
  ExChar_t c;
  int end;
  int len = 0;

  // Skip leading spaces.
  while (*path == ' ') {
    6ece:	ldrb	r0, [r1, #0]
    6ed0:	cmp	r0, #32
    6ed2:	bne.n	6edc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x10>
    6ed4:	ldrb.w	r0, [r1, #1]!
    6ed8:	cmp	r0, #32
    6eda:	beq.n	6ed4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8>
    path++;
  }
  fname->lfn = path;
    6edc:	str	r1, [r2, #4]

  for (len = 0; ; len++) {
    c = path[len];
    6ede:	ldrb	r0, [r1, #0]
    if (c == 0 || isDirSeparator(c)) {
    6ee0:	cmp	r0, #0
    6ee2:	beq.n	6f88 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xbc>
    6ee4:	cmp	r0, #47	; 0x2f
    6ee6:	beq.n	6f40 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    6ee8:	cmp	r0, #92	; 0x5c
    6eea:	beq.n	6f2e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    6eec:	sub.w	r4, r0, #34	; 0x22
    6ef0:	uxtb	r4, r4
    6ef2:	cmp	r4, #29
    6ef4:	bls.n	6f32 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x66>
    6ef6:	ldr.w	lr, [pc, #148]	; 6f8c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>
    6efa:	adds	r6, r1, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    6efc:	movs	r4, #0
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    6efe:	cmp	r0, #124	; 0x7c
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    6f00:	sub.w	r5, r0, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    6f04:	mov	r7, r6
    6f06:	beq.n	6f2e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    6f08:	cmp	r5, #94	; 0x5e
    6f0a:	bhi.n	6f2e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    6f0c:	ldrb.w	r0, [r6], #1
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    6f10:	sub.w	r5, r0, #34	; 0x22
    6f14:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    6f16:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    6f18:	cbz	r0, 6f7a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xae>
    6f1a:	cmp	r0, #47	; 0x2f
    6f1c:	beq.n	6f42 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
    6f1e:	cmp	r0, #92	; 0x5c
    6f20:	lsr.w	r7, lr, r5
    6f24:	beq.n	6f2e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    6f26:	cmp	r5, #29
    6f28:	bhi.n	6efe <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
    6f2a:	lsls	r5, r7, #31
    6f2c:	bpl.n	6efe <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    6f2e:	movs	r0, #0
    6f30:	pop	{r4, r5, r6, r7, pc}
    6f32:	ldr	r5, [pc, #88]	; (6f8c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>)
    6f34:	lsr.w	r4, r5, r4
    6f38:	lsls	r6, r4, #31
    6f3a:	bpl.n	6ef6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2a>
    6f3c:	movs	r0, #0
    6f3e:	pop	{r4, r5, r6, r7, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    6f40:	movs	r4, #0
    6f42:	adds	r7, r1, r4
    6f44:	mov	r6, r7
    6f46:	mov	r5, r4
    6f48:	movs	r0, #47	; 0x2f
    6f4a:	b.n	6f52 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x86>
    6f4c:	ldrb.w	r0, [r6, #1]!
    if (!lfnLegalChar(c)) {
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    6f50:	adds	r5, #1
    6f52:	cmp	r0, #32
    6f54:	beq.n	6f4c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
    6f56:	cmp	r0, #47	; 0x2f
    6f58:	beq.n	6f4c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
  *ptr = &path[end];
    6f5a:	add	r1, r5
    6f5c:	str	r1, [r3, #0]

  // Back over spaces and dots.
  while (len) {
    6f5e:	cbz	r4, 6f72 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    6f60:	mov	r1, r7
    c = path[len - 1];
    6f62:	ldrb.w	r3, [r1, #-1]!
    if (c != '.' && c != ' ') {
    6f66:	cmp	r3, #46	; 0x2e
    6f68:	beq.n	6f6e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa2>
    6f6a:	cmp	r3, #32
    6f6c:	bne.n	6f80 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xb4>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    6f6e:	subs	r4, #1
    6f70:	bne.n	6f62 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x96>
    6f72:	mov	r0, r4
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    return false;
  }
  fname->len = len;
    6f74:	str	r0, [r2, #0]
  return true;
    6f76:	movs	r0, #1
    6f78:	pop	{r4, r5, r6, r7, pc}
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    6f7a:	str	r7, [r3, #0]
    6f7c:	adds	r7, r1, r4
    6f7e:	b.n	6f60 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x94>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    6f80:	cmp	r4, #255	; 0xff
    6f82:	ble.n	6f72 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    6f84:	movs	r0, #0
    6f86:	pop	{r4, r5, r6, r7, pc}
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    6f88:	str	r1, [r3, #0]
    6f8a:	b.n	6f74 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa8>
    6f8c:	.word	0x35000101

00006f90 <ExFatFile::printName(Print*)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::printName(print_t* pr) {
    6f90:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    6f94:	add.w	r3, r0, #36	; 0x24
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::printName(print_t* pr) {
    6f98:	mov	r6, r0
    6f9a:	mov	r8, r1
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    6f9c:	ldmia.w	r3, {r0, r1, r2}
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::printName(print_t* pr) {
    6fa0:	sub	sp, #36	; 0x24
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
  size_t n = 0;
  uint8_t in;
  uint8_t buf[15];
  if (!isOpen()) {
    6fa2:	ldrb.w	r3, [r6, #49]	; 0x31
  return c;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::printName(print_t* pr) {
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    6fa6:	add	r7, sp, #4
    6fa8:	stmia.w	r7, {r0, r1, r2}
  size_t n = 0;
  uint8_t in;
  uint8_t buf[15];
  if (!isOpen()) {
    6fac:	cmp	r3, #0
    6fae:	beq.n	7036 <ExFatFile::printName(Print*)+0xa6>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    6fb0:	ldrb.w	r3, [r6, #48]	; 0x30
    6fb4:	cmp	r3, #1
    6fb6:	bls.n	7036 <ExFatFile::printName(Print*)+0xa6>
    6fb8:	movs	r5, #1
    6fba:	mov.w	r9, #0
    if (m_vol->dirSeek(&pos, is == 1 ? 64: 32) != 1) {
    6fbe:	cmp	r5, #1
    6fc0:	ite	ne
    6fc2:	movne	r2, #32
    6fc4:	moveq	r2, #64	; 0x40
    6fc6:	mov	r1, r7
    6fc8:	ldr	r0, [r6, #32]
    6fca:	bl	7d80 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    6fce:	cmp	r0, #1
    6fd0:	bne.n	7036 <ExFatFile::printName(Print*)+0xa6>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dn = reinterpret_cast<DirName_t*>
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    6fd2:	movs	r2, #0
    6fd4:	mov	r1, r7
    6fd6:	ldr	r0, [r6, #32]
    6fd8:	bl	7d4c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    6fdc:	cbz	r0, 7036 <ExFatFile::printName(Print*)+0xa6>
    6fde:	ldrb	r3, [r0, #0]
    6fe0:	cmp	r3, #193	; 0xc1
    6fe2:	bne.n	7036 <ExFatFile::printName(Print*)+0xa6>
    6fe4:	add.w	r1, sp, #15
    6fe8:	add.w	lr, r9, #15
    6fec:	mov	r4, r9
    6fee:	ldrh.w	r3, [r0, #2]!
    6ff2:	rsb	r2, r9, r4
    6ff6:	uxtb	r2, r2
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (in = 0; in < 15; in++) {
      uint16_t c = getLe16(dn->unicode + 2*in);
      if (!c) {
    6ff8:	cbz	r3, 7032 <ExFatFile::printName(Print*)+0xa2>
        break;;
      }
      buf[in] = c < 0X7f ? c : '?';
    6ffa:	cmp	r3, #126	; 0x7e
      n++;
    6ffc:	add.w	r4, r4, #1
    for (in = 0; in < 15; in++) {
      uint16_t c = getLe16(dn->unicode + 2*in);
      if (!c) {
        break;;
      }
      buf[in] = c < 0X7f ? c : '?';
    7000:	ite	ls
    7002:	uxtbls	r3, r3
    7004:	movhi	r3, #63	; 0x3f
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (in = 0; in < 15; in++) {
    7006:	cmp	r4, lr
      uint16_t c = getLe16(dn->unicode + 2*in);
      if (!c) {
        break;;
      }
      buf[in] = c < 0X7f ? c : '?';
    7008:	strb.w	r3, [r1, #1]!
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (in = 0; in < 15; in++) {
    700c:	bne.n	6fee <ExFatFile::printName(Print*)+0x5e>
    700e:	mov	r9, r4
    7010:	movs	r2, #15
        break;;
      }
      buf[in] = c < 0X7f ? c : '?';
      n++;
    }
    pr->write(buf, in);
    7012:	ldr.w	r3, [r8]
    7016:	add	r1, sp, #16
    7018:	ldr	r3, [r3, #4]
    701a:	mov	r0, r8
    701c:	blx	r3
  uint8_t buf[15];
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    701e:	adds	r5, #1
    7020:	ldrb.w	r3, [r6, #48]	; 0x30
    7024:	uxtb	r5, r5
    7026:	cmp	r3, r5
    7028:	bhi.n	6fbe <ExFatFile::printName(Print*)+0x2e>
    702a:	mov	r0, r4
  }
  return n;

 fail:
  return 0;
}
    702c:	add	sp, #36	; 0x24
    702e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (in = 0; in < 15; in++) {
      uint16_t c = getLe16(dn->unicode + 2*in);
      if (!c) {
    7032:	mov	r9, r4
    7034:	b.n	7012 <ExFatFile::printName(Print*)+0x82>
    pr->write(buf, in);
  }
  return n;

 fail:
  return 0;
    7036:	movs	r0, #0
}
    7038:	add	sp, #36	; 0x24
    703a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    703e:	nop

00007040 <ExFatFile::read(void*, unsigned int)>:
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    7040:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7044:	ldrb.w	r3, [r0, #51]	; 0x33
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    7048:	lsls	r5, r3, #31

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    704a:	sub	sp, #12
    704c:	mov	r4, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    704e:	bpl.w	71aa <ExFatFile::read(void*, unsigned int)+0x16a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    7052:	lsls	r0, r3, #25
    7054:	mov	r5, r1
    7056:	mov	r6, r2
    7058:	bpl.w	71c0 <ExFatFile::read(void*, unsigned int)+0x180>
    if ((m_curPosition + count) > m_validLength) {
    705c:	ldrd	r0, r1, [r4]
    7060:	ldrd	r2, r3, [r4, #16]
    7064:	adds.w	r8, r0, r6
    7068:	adc.w	r9, r1, #0
    706c:	cmp	r3, r9
    706e:	it	eq
    7070:	cmpeq	r2, r8
    7072:	bcc.w	71cc <ExFatFile::read(void*, unsigned int)+0x18c>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    7076:	cmp	r6, #0
    7078:	beq.w	71d0 <ExFatFile::read(void*, unsigned int)+0x190>
    707c:	mov	r9, r4
    707e:	ldrd	r2, r3, [r9], #24
    7082:	mov	r8, r6
    7084:	b.n	7126 <ExFatFile::read(void*, unsigned int)+0xe6>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
    7086:	orrs	r3, r2
    7088:	bne.n	7162 <ExFatFile::read(void*, unsigned int)+0x122>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    708a:	ldrb.w	r3, [r4, #49]	; 0x31
    708e:	lsls	r2, r3, #25
    7090:	ite	mi
    7092:	ldrmi.w	r1, [r0, #1068]	; 0x42c
    7096:	ldrpl	r1, [r4, #28]
      } else if (isContiguous()) {
        m_curCluster++;
    7098:	str	r1, [r4, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    709a:	ldrb.w	ip, [r0, #1085]	; 0x43d
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    709e:	ldr.w	r2, [r0, #1060]	; 0x424
    70a2:	subs	r1, #2
    70a4:	lsrs	r7, r7, #9
    70a6:	lsl.w	lr, r1, ip
    70aa:	adds	r1, r7, r2
    70ac:	add	r1, lr
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
    70ae:	cmp.w	sl, #0
    70b2:	bne.n	713a <ExFatFile::read(void*, unsigned int)+0xfa>
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    70b4:	cmp.w	r8, #512	; 0x200
    70b8:	bcc.n	713a <ExFatFile::read(void*, unsigned int)+0xfa>
    70ba:	ldr.w	r2, [r0, #532]	; 0x214
                          || sector == m_vol->dataCacheSector()) {
    70be:	cmp	r1, r2
    70c0:	beq.n	713a <ExFatFile::read(void*, unsigned int)+0xfa>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    70c2:	cmp.w	r8, #1024	; 0x400
    70c6:	bcc.n	7170 <ExFatFile::read(void*, unsigned int)+0x130>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    70c8:	movs	r3, #1
    70ca:	lsl.w	ip, r3, ip
    70ce:	rsb	r7, r7, ip
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    70d2:	mov.w	r3, r8, lsr #9
    70d6:	cmp	r7, r3
    70d8:	it	cs
    70da:	movcs	r7, r3
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    70dc:	cmp	r1, r2
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    70de:	mov.w	fp, r7, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    70e2:	bhi.n	70fc <ExFatFile::read(void*, unsigned int)+0xbc>
    70e4:	adds	r3, r7, r1
    70e6:	cmp	r3, r2
    70e8:	bls.n	70fc <ExFatFile::read(void*, unsigned int)+0xbc>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    70ea:	add.w	r0, r0, #524	; 0x20c
    70ee:	str	r1, [sp, #4]
    70f0:	bl	7ac4 <FsCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->dataCacheSync()) {
    70f4:	cmp	r0, #0
    70f6:	beq.n	71aa <ExFatFile::read(void*, unsigned int)+0x16a>
    70f8:	ldr	r0, [r4, #32]
    70fa:	ldr	r1, [sp, #4]
    70fc:	ldr.w	r0, [r0, #1080]	; 0x438
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
    7100:	ldr	r2, [r0, #0]
    7102:	mov	r3, r7
    7104:	ldr	r7, [r2, #12]
    7106:	mov	r2, r5
    7108:	blx	r7
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    710a:	cmp	r0, #0
    710c:	beq.n	71aa <ExFatFile::read(void*, unsigned int)+0x16a>
    710e:	mov	r0, fp
    7110:	movs	r1, #0
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    7112:	ldrd	r2, r3, [r4]
    7116:	adds	r2, r2, r0
    7118:	adcs	r3, r1
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    711a:	subs.w	r8, r8, fp
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    711e:	add	r5, fp
    m_curPosition += n;
    7120:	strd	r2, r3, [r4]
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    7124:	beq.n	71d0 <ExFatFile::read(void*, unsigned int)+0x190>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    7126:	ldr	r0, [r4, #32]
    7128:	ldr.w	r7, [r0, #1072]	; 0x430
    712c:	ands	r7, r2
    sectorOffset = clusterOffset & m_vol->sectorMask();
    712e:	ubfx	sl, r7, #0, #9
    if (clusterOffset == 0) {
    7132:	cmp	r7, #0
    7134:	beq.n	7086 <ExFatFile::read(void*, unsigned int)+0x46>
    7136:	ldr	r1, [r4, #24]
    7138:	b.n	709a <ExFatFile::read(void*, unsigned int)+0x5a>
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    713a:	add.w	r0, r0, #524	; 0x20c
    713e:	movs	r2, #0
    7140:	bl	7a04 <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
    7144:	cbz	r0, 71aa <ExFatFile::read(void*, unsigned int)+0x16a>
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
      n = m_vol->bytesPerSector() - sectorOffset;
    7146:	rsb	fp, sl, #512	; 0x200
    714a:	cmp	fp, r8
    714c:	it	cs
    714e:	movcs	fp, r8
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
    7150:	add.w	r1, r0, sl
    7154:	mov	r2, fp
    7156:	mov	r0, r5
    7158:	bl	c198 <memcpy>
    715c:	mov	r0, fp
    715e:	movs	r1, #0
    7160:	b.n	7112 <ExFatFile::read(void*, unsigned int)+0xd2>
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
    7162:	ldrb.w	r3, [r4, #51]	; 0x33
    7166:	lsls	r3, r3, #25
    7168:	bpl.n	718a <ExFatFile::read(void*, unsigned int)+0x14a>
        m_curCluster++;
    716a:	ldr	r1, [r4, #24]
    716c:	adds	r1, #1
    716e:	b.n	7098 <ExFatFile::read(void*, unsigned int)+0x58>
    7170:	ldr.w	r0, [r0, #1080]	; 0x438
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    7174:	ldr	r3, [r0, #0]
    7176:	mov	r2, r5
    7178:	ldr	r3, [r3, #8]
    717a:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    717c:	cbz	r0, 71aa <ExFatFile::read(void*, unsigned int)+0x16a>
    717e:	mov.w	r0, #512	; 0x200
    7182:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    7184:	mov.w	fp, #512	; 0x200
    7188:	b.n	7112 <ExFatFile::read(void*, unsigned int)+0xd2>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    718a:	mov	r2, r9
    718c:	ldr	r1, [r4, #24]
    718e:	bl	7dd8 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    7192:	sxtb	r0, r0
        if (fg < 0) {
    7194:	cmp	r0, #0
    7196:	blt.n	71aa <ExFatFile::read(void*, unsigned int)+0x16a>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
    7198:	beq.n	71a0 <ExFatFile::read(void*, unsigned int)+0x160>
    719a:	ldr	r0, [r4, #32]
    719c:	ldr	r1, [r4, #24]
    719e:	b.n	709a <ExFatFile::read(void*, unsigned int)+0x5a>
          // EOF if directory.
          if (isDir()) {
    71a0:	ldrb.w	r3, [r4, #49]	; 0x31
    71a4:	tst.w	r3, #80	; 0x50
    71a8:	bne.n	71d4 <ExFatFile::read(void*, unsigned int)+0x194>
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    71aa:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    71ae:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    71b2:	orr.w	r3, r3, #2
    71b6:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
}
    71ba:	add	sp, #12
    71bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    71c0:	ldrb.w	r3, [r4, #49]	; 0x31
    71c4:	lsls	r1, r3, #28
    71c6:	bmi.w	705c <ExFatFile::read(void*, unsigned int)+0x1c>
    71ca:	b.n	7076 <ExFatFile::read(void*, unsigned int)+0x36>
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    71cc:	subs	r6, r2, r0
    71ce:	b.n	7076 <ExFatFile::read(void*, unsigned int)+0x36>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    71d0:	mov.w	r8, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    71d4:	rsb	r0, r8, r6

fail:
  m_error |= READ_ERROR;
  return -1;
}
    71d8:	add	sp, #12
    71da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    71de:	nop

000071e0 <ExFatFile::peek()>:
  }
  fname->len = len;
  return true;
}
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
    71e0:	push	{r4, r5, r6, r7, lr}
    71e2:	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    71e4:	movs	r2, #1
    71e6:	add.w	r1, sp, #7
    71ea:	mov	r4, r0
  uint64_t curPosition = m_curPosition;
    71ec:	ldrd	r6, r7, [r0]
  uint32_t curCluster = m_curCluster;
    71f0:	ldr	r5, [r0, #24]
    71f2:	bl	7040 <ExFatFile::read(void*, unsigned int)>
    71f6:	cmp	r0, #1
    71f8:	it	eq
    71fa:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
  m_curCluster = curCluster;
    71fe:	str	r5, [r4, #24]
    7200:	it	ne
    7202:	movne.w	r0, #4294967295
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
    7206:	strd	r6, r7, [r4]
  m_curCluster = curCluster;
  return c;
}
    720a:	add	sp, #12
    720c:	pop	{r4, r5, r6, r7, pc}
    720e:	nop

00007210 <ExFatFile::seekSet(unsigned long long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    7210:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7214:	ldrb.w	lr, [r0, #49]	; 0x31
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    7218:	ldr	r5, [r0, #24]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    721a:	sub	sp, #12
    721c:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    721e:	cmp.w	lr, #0
    7222:	beq.n	725c <ExFatFile::seekSet(unsigned long long)+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    7224:	ldrd	r0, r1, [r0]
    7228:	cmp	r1, r3
    722a:	it	eq
    722c:	cmpeq	r0, r2
    722e:	mov	r6, r2
    7230:	mov	r7, r3
    7232:	beq.n	72ac <ExFatFile::seekSet(unsigned long long)+0x9c>
    return true;
  }
  if (pos == 0) {
    7234:	orrs.w	r3, r6, r7
    7238:	bne.n	724a <ExFatFile::seekSet(unsigned long long)+0x3a>
    // set position to start of file
    m_curCluster = 0;
    723a:	movs	r3, #0
    723c:	str	r3, [r4, #24]
    }
  }

done:
  m_curPosition = pos;
  return true;
    723e:	movs	r0, #1
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    7240:	strd	r6, r7, [r4]
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    7244:	add	sp, #12
    7246:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    724a:	tst.w	lr, #8
    724e:	beq.n	7266 <ExFatFile::seekSet(unsigned long long)+0x56>
    if (pos > m_validLength) {
    7250:	ldrd	r2, r3, [r4, #16]
    7254:	cmp	r3, r7
    7256:	it	eq
    7258:	cmpeq	r2, r6
    725a:	bcs.n	7266 <ExFatFile::seekSet(unsigned long long)+0x56>
done:
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
    725c:	str	r5, [r4, #24]
  return false;
    725e:	movs	r0, #0
}
    7260:	add	sp, #12
    7262:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    7266:	ldr	r3, [r4, #32]
    7268:	str	r3, [sp, #4]
    726a:	ldrb.w	ip, [r3, #1085]	; 0x43d
  if (isContiguous()) {
    726e:	ldrb.w	sl, [r4, #51]	; 0x33
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    7272:	add.w	ip, ip, #9
    7276:	uxtb.w	ip, ip
    727a:	adds.w	r2, r6, #4294967295
    727e:	adc.w	r3, r7, #4294967295
    7282:	rsb	r8, ip, #32
    7286:	lsl.w	fp, r3, r8
    728a:	lsr.w	r2, r2, ip
    728e:	orr.w	r2, r2, fp
    7292:	sub.w	fp, ip, #32
    7296:	lsr.w	r3, r3, fp
  if (isContiguous()) {
    729a:	tst.w	sl, #64	; 0x40
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    729e:	orr.w	r2, r2, r3
  if (isContiguous()) {
    72a2:	beq.n	72b0 <ExFatFile::seekSet(unsigned long long)+0xa0>
    m_curCluster = m_firstCluster + nNew;
    72a4:	ldr	r3, [r4, #28]
    72a6:	add	r2, r3
    72a8:	str	r2, [r4, #24]
    goto done;
    72aa:	b.n	723e <ExFatFile::seekSet(unsigned long long)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    72ac:	movs	r0, #1
    72ae:	b.n	7260 <ExFatFile::seekSet(unsigned long long)+0x50>
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    72b0:	adds.w	r9, r0, #4294967295
    72b4:	adc.w	sl, r1, #4294967295
    72b8:	lsr.w	ip, r9, ip
    72bc:	lsl.w	r8, sl, r8
    72c0:	orr.w	ip, ip, r8
    72c4:	lsr.w	fp, sl, fp
    72c8:	orr.w	ip, ip, fp
  if (nNew < nCur || m_curPosition == 0) {
    72cc:	cmp	r2, ip
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    72ce:	mov	r3, sl
  if (nNew < nCur || m_curPosition == 0) {
    72d0:	bcs.n	7302 <ExFatFile::seekSet(unsigned long long)+0xf2>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    72d2:	tst.w	lr, #64	; 0x40
    72d6:	itet	ne
    72d8:	ldrne	r3, [sp, #4]
    72da:	ldreq	r3, [r4, #28]
    72dc:	ldrne.w	r3, [r3, #1068]	; 0x42c
    72e0:	str	r3, [r4, #24]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    72e2:	mov	r8, r2
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    72e4:	add.w	r9, r4, #24
    72e8:	mov	r2, r9
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    72ea:	cmp.w	r8, #0
    72ee:	beq.n	723e <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    72f0:	ldr	r1, [r4, #24]
    72f2:	ldr	r0, [r4, #32]
    72f4:	bl	7dd8 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    72f8:	add.w	r8, r8, #4294967295
    72fc:	cmp	r0, #0
    72fe:	bne.n	72e8 <ExFatFile::seekSet(unsigned long long)+0xd8>
    7300:	b.n	725c <ExFatFile::seekSet(unsigned long long)+0x4c>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
  if (nNew < nCur || m_curPosition == 0) {
    7302:	orrs.w	r3, r0, r1
    7306:	beq.n	72d2 <ExFatFile::seekSet(unsigned long long)+0xc2>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    7308:	rsb	r2, ip, r2
    730c:	b.n	72e2 <ExFatFile::seekSet(unsigned long long)+0xd2>
    730e:	nop

00007310 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    7310:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7314:	mov	r6, r1
    7316:	sub	sp, #76	; 0x4c
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    7318:	ldrb.w	r1, [r0, #49]	; 0x31
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    731c:	str	r2, [sp, #0]
    731e:	mov	r5, r0
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    7320:	cbnz	r1, 732e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    7322:	mov	sl, r3
    7324:	ldrb.w	r3, [r6, #49]	; 0x31
    7328:	tst.w	r3, #80	; 0x50
    732c:	bne.n	733e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2e>
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
    732e:	movs	r0, #0
    7330:	strb.w	r0, [r5, #49]	; 0x31
  m_flags = 0;
    7334:	strb.w	r0, [r5, #51]	; 0x33
  return false;
}
    7338:	add	sp, #76	; 0x4c
    733a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    733e:	ldr	r3, [sp, #112]	; 0x70
    7340:	and.w	r3, r3, #3
    7344:	cmp	r3, #1
    7346:	beq.n	7356 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x46>
    7348:	cmp	r3, #2
    734a:	beq.w	7560 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x250>
    734e:	cmp	r3, #0
    7350:	bne.n	732e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    7352:	movs	r3, #1
    7354:	b.n	7358 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x48>
    7356:	movs	r3, #2
      break;
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    7358:	ldr	r2, [sp, #112]	; 0x70
    735a:	and.w	r2, r2, #8
    735e:	orrs	r3, r2
    7360:	str	r3, [sp, #4]
  if (name) {
    7362:	ldr	r3, [sp, #0]
    7364:	cmp	r3, #0
    7366:	beq.w	7564 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x254>
    nameHash = exFatHashName(name, nameLength, 0);
    736a:	mov	r0, r3
    736c:	movs	r2, #0
    736e:	mov	r1, sl
    7370:	bl	7f1c <exFatHashName(char const*, unsigned int, unsigned short)>
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    7374:	ldrb.w	r3, [r6, #49]	; 0x31
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    7378:	str	r0, [sp, #8]
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    737a:	cbz	r3, 7390 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    737c:	ldrd	r2, r3, [r6]
    7380:	orrs	r3, r2
    7382:	beq.n	7390 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    7384:	movs	r2, #0
    7386:	movs	r3, #0
    7388:	strd	r2, r3, [r6]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    738c:	movs	r1, #0
    738e:	str	r1, [r6, #24]
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    7390:	ldr	r2, [pc, #736]	; (7674 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x364>)
    7392:	add.w	r3, sl, #14
    7396:	smull	r1, r2, r2, r3
    739a:	add	r2, r3
    739c:	asrs	r3, r3, #31
    739e:	rsb	r3, r3, r2, asr #3
    73a2:	uxtb	r3, r3
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;
    73a4:	mov.w	r9, #0
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    73a8:	str	r3, [sp, #12]
    73aa:	adds	r3, #2
    73ac:	uxtb.w	fp, r3

  DirFile_t*   dirFile;
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
    73b0:	mov	r4, r9
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
    73b2:	mov	r7, r9
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    73b4:	movs	r2, #32
    73b6:	add	r1, sp, #40	; 0x28
    73b8:	mov	r0, r6
    73ba:	bl	7040 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    73be:	cmp	r0, #0
    73c0:	beq.n	743e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      goto create;
    }
    if (n != 32) {
    73c2:	cmp	r0, #32
    73c4:	bne.n	732e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
    73c6:	ldrb.w	r3, [sp, #40]	; 0x28
    73ca:	lsls	r2, r3, #24
    73cc:	bmi.n	749c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x18c>
      if (freeCount == 0) {
    73ce:	cmp	r4, #0
    73d0:	bne.n	7496 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x186>
        freePos.position = dir->curPosition() - 32;
    73d2:	ldr	r2, [r6, #0]
        freePos.cluster = dir->curCluster();
    73d4:	ldr	r1, [r6, #24]
    73d6:	str	r1, [sp, #28]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
    73d8:	subs	r2, #32
    73da:	str	r2, [sp, #32]
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
        freeCount++;
    73dc:	adds	r4, #1
    73de:	uxtb	r4, r4
      }
      if (!buf[0]) {
    73e0:	cbz	r3, 743e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      if (buf[0] != EXFAT_TYPE_FILE) {
        continue;
      }
      inSet = true;
    }
    switch (buf[0]) {
    73e2:	cmp	r3, #192	; 0xc0
    73e4:	beq.w	750e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fe>
    73e8:	cmp	r3, #193	; 0xc1
    73ea:	beq.n	74b2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1a2>
    73ec:	cmp	r3, #133	; 0x85
    73ee:	bne.n	73b4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
    73f0:	movs	r2, #56	; 0x38
    73f2:	movs	r1, #0
    73f4:	mov	r0, r5
    73f6:	bl	f32c <memset>
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    73fa:	ldrb.w	r3, [sp, #44]	; 0x2c
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
    73fe:	ldrb.w	r2, [sp, #41]	; 0x29
    7402:	strb.w	r2, [r5, #48]	; 0x30
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    7406:	lsls	r0, r3, #27
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    7408:	and.w	r2, r3, #55	; 0x37
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
    740c:	it	pl
    740e:	orrpl.w	r2, r2, #8
    7412:	strb.w	r2, [r5, #49]	; 0x31
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    7416:	ldr	r3, [r6, #0]
    7418:	ldr	r1, [r6, #32]
    741a:	ldr	r2, [r6, #24]
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
    741c:	str	r2, [r5, #36]	; 0x24
        m_dirPos.position = dir->curPosition() - 32;
    741e:	subs	r3, #32
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();
    7420:	str	r1, [r5, #32]

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    7422:	str	r3, [r5, #40]	; 0x28
        m_dirPos.isContiguous = dir->isContiguous();
    7424:	ldrb.w	r3, [r6, #51]	; 0x33
    7428:	ubfx	r3, r3, #6, #1
    742c:	strb.w	r3, [r5, #44]	; 0x2c
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    7430:	movs	r2, #32
    7432:	add	r1, sp, #40	; 0x28
    7434:	mov	r0, r6
    7436:	bl	7040 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    743a:	cmp	r0, #0
    743c:	bne.n	73c2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xb2>
#if READ_ONLY
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    743e:	ldr	r3, [sp, #112]	; 0x70
    7440:	lsls	r1, r3, #22
    7442:	bpl.w	732e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    7446:	ldr	r3, [sp, #4]
    7448:	lsls	r2, r3, #30
    744a:	bpl.w	732e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    744e:	ldr	r3, [sp, #0]
    7450:	cmp	r3, #0
    7452:	beq.w	732e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    7456:	cmp	r4, fp
    7458:	bcc.n	7474 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x164>
    745a:	b.n	756a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25a>
        goto fail;
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
    745c:	cmp	r0, #32
    745e:	bne.w	732e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
    7462:	cbnz	r4, 746e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x15e>
      freePos.position = dir->curPosition() - 32;
    7464:	ldr	r2, [r6, #0]
      freePos.cluster = dir->curCluster();
    7466:	ldr	r1, [r6, #24]
    7468:	str	r1, [sp, #28]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
    746a:	subs	r2, #32
    746c:	str	r2, [sp, #32]
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    746e:	uxtb	r4, r3
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    7470:	cmp	fp, r4
    7472:	bls.n	756a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25a>
    n = dir->read(buf, 32);
    7474:	movs	r2, #32
    7476:	add	r1, sp, #40	; 0x28
    7478:	mov	r0, r6
    747a:	bl	7040 <ExFatFile::read(void*, unsigned int)>
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    747e:	adds	r3, r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
    7480:	cmp	r0, #0
    7482:	bne.n	745c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x14c>
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
    7484:	mov	r0, r6
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
    7486:	ldr	r7, [r6, #24]
      if (!dir->addDirCluster()) {
    7488:	bl	8328 <ExFatFile::addDirCluster()>
    748c:	cmp	r0, #0
    748e:	beq.w	732e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
        DBG_FAIL_MACRO;
        goto fail;
      }
      dir->m_curCluster = curCluster;
    7492:	str	r7, [r6, #24]
      continue;
    7494:	b.n	7470 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x160>
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
    7496:	cmp	r4, fp
    7498:	bcs.n	73e0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd0>
    749a:	b.n	73dc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xcc>
        freeCount++;
      }
      if (!buf[0]) {
        goto create;
      }
    } else if (!inSet) {
    749c:	cmp.w	r9, #0
    74a0:	bne.n	73e2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd2>
      if (freeCount < freeNeed) {
        freeCount = 0;
    74a2:	cmp	r4, fp
    74a4:	it	cc
    74a6:	movcc	r4, #0
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
    74a8:	cmp	r3, #133	; 0x85
    74aa:	bne.n	73b4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        continue;
      }
      inSet = true;
    74ac:	mov.w	r9, #1
    74b0:	b.n	73f0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xe0>
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
    74b2:	rsb	r8, r7, sl
    74b6:	uxtb.w	r8, r8
    74ba:	cmp.w	r8, #15
    74be:	it	cs
    74c0:	movcs.w	r8, #15
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
    74c4:	mov	r3, r8
    74c6:	mov	r2, r7
    74c8:	ldr	r1, [sp, #0]
    74ca:	add	r0, sp, #40	; 0x28
    74cc:	bl	7f58 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>
    74d0:	cmp	r0, #0
    74d2:	beq.n	754e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x23e>
          inSet = false;
          break;
        }
        nameOffset += nCmp;
    74d4:	add	r7, r8
    74d6:	uxtb	r7, r7

        if (nameOffset == nameLength) {
    74d8:	cmp	sl, r7
    74da:	bne.w	73b4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    74de:	ldr	r3, [sp, #112]	; 0x70
    74e0:	lsls	r3, r3, #20
    74e2:	bmi.w	732e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    74e6:	ldr	r3, [sp, #112]	; 0x70
    74e8:	tst.w	r3, #17408	; 0x4400
    74ec:	bne.w	7630 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x320>
    74f0:	ldrb.w	r3, [r5, #51]	; 0x33
    74f4:	lsls	r7, r3, #30
    74f6:	bmi.w	7630 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x320>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    74fa:	ldr	r3, [sp, #112]	; 0x70
    74fc:	lsls	r3, r3, #21
    74fe:	bmi.w	732e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    7502:	ldr	r3, [sp, #112]	; 0x70
    7504:	lsls	r0, r3, #17
    7506:	bmi.w	7678 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x368>
    DBG_FAIL_MACRO;
    goto fail;
  }
#endif  // READ_ONLY
  return true;
    750a:	movs	r0, #1
    750c:	b.n	7338 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x28>
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    750e:	ldrb.w	r3, [sp, #41]	; 0x29
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
    7512:	ldr	r2, [sp, #4]
    7514:	strb.w	r2, [r5, #51]	; 0x33
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    7518:	lsls	r1, r3, #30
    751a:	bpl.n	7524 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x214>
          m_flags |= FILE_FLAG_CONTIGUOUS;
    751c:	orr.w	r3, r2, #64	; 0x40
    7520:	strb.w	r3, [r5, #51]	; 0x33
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    7524:	ldrd	r2, r3, [sp, #48]	; 0x30
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    7528:	ldrd	r0, r1, [sp, #64]	; 0x40
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    752c:	strd	r2, r3, [r5, #16]
        m_firstCluster = getLe32(dirStream->firstCluster);
    7530:	ldr	r3, [sp, #60]	; 0x3c
    7532:	str	r3, [r5, #28]
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
    7534:	ldr	r3, [sp, #0]
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    7536:	strd	r0, r1, [r5, #8]
        if (!name) {
    753a:	cmp	r3, #0
    753c:	beq.n	74de <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1ce>
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    753e:	ldrb.w	r3, [sp, #43]	; 0x2b
    7542:	cmp	r3, sl
    7544:	beq.n	7552 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x242>
            nameHash != getLe16(dirStream->nameHash)) {
          inSet = false;
    7546:	mov.w	r9, #0
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    754a:	mov	r7, r9
    754c:	b.n	73b4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        nCmp = nameLength - nameOffset;
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
          inSet = false;
    754e:	mov	r9, r0
    7550:	b.n	73b4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    7552:	ldrh.w	r3, [sp, #44]	; 0x2c
    7556:	ldr	r2, [sp, #8]
    7558:	cmp	r3, r2
    755a:	bne.n	7546 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x236>
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    755c:	movs	r7, #0
    755e:	b.n	73b4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    7560:	movs	r3, #3
    7562:	b.n	7358 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x48>
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
  uint8_t nCmp;
  uint8_t modeFlags;
  uint16_t nameHash = 0;
    7564:	ldr	r3, [sp, #0]
    7566:	str	r3, [sp, #8]
    7568:	b.n	7390 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    756a:	ldrb.w	r3, [r6, #51]	; 0x33
  memset(this, 0, sizeof(ExFatFile));
    756e:	movs	r2, #56	; 0x38
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    7570:	ubfx	r3, r3, #6, #1
  memset(this, 0, sizeof(ExFatFile));
    7574:	movs	r1, #0
    7576:	mov	r0, r5
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    7578:	add.w	r8, sp, #28
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    757c:	strb.w	r3, [sp, #36]	; 0x24
  memset(this, 0, sizeof(ExFatFile));
    7580:	bl	f32c <memset>
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    7584:	ldr	r4, [sp, #12]
    7586:	ldr	r3, [r6, #32]
    7588:	str.w	sl, [sp, #12]

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    758c:	ldmia.w	r8, {r0, r1, r2}
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    7590:	add.w	r9, r4, #1
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
    7594:	movs	r4, #8
    7596:	strb.w	r4, [r5, #49]	; 0x31
    759a:	add.w	r7, sl, #30
  m_dirPos = freePos;
    759e:	add.w	r4, r5, #36	; 0x24
    75a2:	ldr.w	sl, [sp]
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
    75a6:	str	r3, [r5, #32]
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    75a8:	uxtb.w	r9, r9

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    75ac:	stmia.w	r4, {r0, r1, r2}
    75b0:	uxtb	r7, r7
  for (uint8_t i = 0; i < freeNeed; i++) {
    75b2:	movs	r6, #0
    75b4:	mov	r0, r3
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
    75b6:	movs	r2, #1
    75b8:	mov	r1, r8
    75ba:	bl	7d4c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    75be:	mov	r4, r0
    75c0:	cmp	r0, #0
    75c2:	beq.w	732e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    75c6:	ldrsb.w	r3, [r0]
    75ca:	cmp	r3, #0
    75cc:	blt.w	732e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0 , 32);
    75d0:	movs	r2, #32
    75d2:	movs	r1, #0
    75d4:	bl	f32c <memset>
    if (i == 0) {
    75d8:	cmp	r6, #0
    75da:	beq.n	76aa <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x39a>
        FsDateTime::callback(&date, &time, &ms10);
        dirFile->createTimeMs = ms10;
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
    75dc:	cmp	r6, #1
    75de:	beq.n	768a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x37a>
    75e0:	rsb	r3, r6, r6, lsl #4
    75e4:	cmp	r7, #15
    75e6:	sub.w	r3, r3, #30

      dirStream->nameLength = nameLength;
      setLe16(dirStream->nameHash, nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
    75ea:	mov.w	r2, #193	; 0xc1
    75ee:	mov	r1, r7
    75f0:	it	cs
    75f2:	movcs	r1, #15
    75f4:	uxtb	r3, r3
    75f6:	strb	r2, [r4, #0]
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    75f8:	cbz	r1, 7610 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
    75fa:	adds	r4, #2
    75fc:	sxth	r1, r1
    75fe:	add.w	r1, r4, r1, lsl #1
    7602:	add	r3, sl
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
    7604:	ldrb.w	r2, [r3], #1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    7608:	strh.w	r2, [r4], #2
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    760c:	cmp	r1, r4
    760e:	bne.n	7604 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2f4>
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    7610:	adds	r6, #1
    7612:	uxtb	r6, r6
    7614:	cmp	fp, r6
    7616:	bls.n	766c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x35c>
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
    7618:	movs	r2, #32
    761a:	mov	r1, r8
    761c:	ldr	r0, [r5, #32]
    761e:	bl	7d80 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    7622:	cmp	r0, #1
    7624:	bne.w	732e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    7628:	subs	r7, #15
    762a:	uxtb	r7, r7
    762c:	ldr	r0, [r5, #32]
    762e:	b.n	75b6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2a6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || READ_ONLY) {
    7630:	ldrb.w	r3, [r5, #49]	; 0x31
    7634:	tst.w	r3, #17
    7638:	bne.w	732e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    763c:	ldr	r3, [sp, #112]	; 0x70
    763e:	lsls	r6, r3, #21
    7640:	bpl.w	7502 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1f2>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    7644:	ldrb.w	r3, [r5, #51]	; 0x33
    7648:	lsls	r4, r3, #30
    764a:	bpl.w	732e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    764e:	movs	r2, #0
    7650:	movs	r3, #0
    7652:	mov	r0, r5
    7654:	bl	7210 <ExFatFile::seekSet(unsigned long long)>
    7658:	cmp	r0, #0
    765a:	beq.w	732e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    765e:	mov	r0, r5
    7660:	bl	85f4 <ExFatFile::truncate()>
    7664:	cmp	r0, #0
    7666:	beq.w	732e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    766a:	b.n	750a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fa>
      for (size_t k = 0; k < nCmp; k++) {
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
      }
    }
  }
  return sync();
    766c:	mov	r0, r5
    766e:	bl	82c8 <ExFatFile::sync()>
    7672:	b.n	7338 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x28>
    7674:	.word	0x88888889
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    7678:	ldrd	r2, r3, [r5, #16]
    767c:	mov	r0, r5
    767e:	bl	7210 <ExFatFile::seekSet(unsigned long long)>
    7682:	cmp	r0, #0
    7684:	bne.w	750a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fa>
    7688:	b.n	732e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    768a:	movs	r3, #192	; 0xc0
    768c:	strb	r3, [r4, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    768e:	ldr	r3, [sp, #4]
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    7690:	movs	r2, #3
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    7692:	orn	r3, r3, #63	; 0x3f
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    7696:	strb	r2, [r4, #1]
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    7698:	strb.w	r3, [r5, #51]	; 0x33

      dirStream->nameLength = nameLength;
    769c:	ldrb.w	r3, [sp, #12]
    76a0:	strb	r3, [r4, #3]
    76a2:	ldrh.w	r3, [sp, #8]
    76a6:	strh	r3, [r4, #4]
    76a8:	b.n	7610 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
      goto fail;
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
    76aa:	movs	r3, #133	; 0x85
    76ac:	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
      dirFile->setCount = m_setCount;
      if (FsDateTime::callback) {
    76ae:	ldr	r3, [pc, #48]	; (76e0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3d0>)
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    76b0:	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    76b4:	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
    76b8:	ldr	r3, [r3, #0]
    76ba:	cmp	r3, #0
    76bc:	beq.n	7610 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
        uint16_t date, time;
        uint8_t ms10;
        FsDateTime::callback(&date, &time, &ms10);
    76be:	add.w	r2, sp, #23
    76c2:	add.w	r1, sp, #26
    76c6:	add	r0, sp, #24
    76c8:	blx	r3
        dirFile->createTimeMs = ms10;
    76ca:	ldrb.w	r1, [sp, #23]
    76ce:	ldrh.w	r2, [sp, #26]
    76d2:	ldrh.w	r3, [sp, #24]
    76d6:	strb	r1, [r4, #20]
    76d8:	strh	r2, [r4, #8]
    76da:	strh	r3, [r4, #10]
    76dc:	b.n	7610 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
    76de:	nop
    76e0:	.word	0x1fff1f34

000076e4 <ExFatFile::open(ExFatFile*, char const*, int)>:
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    76e4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    76e8:	mov	r6, r0
    76ea:	sub	sp, #84	; 0x54
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    76ec:	ldrb.w	r4, [r6, #49]	; 0x31
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    76f0:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    76f2:	movs	r0, #0
    76f4:	strb.w	r0, [sp, #73]	; 0x49
    76f8:	strb.w	r0, [sp, #74]	; 0x4a
    76fc:	strb.w	r0, [sp, #75]	; 0x4b
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    7700:	cbnz	r4, 7710 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
    7702:	mov	r9, r3
    7704:	ldrb.w	r3, [r1, #49]	; 0x31
    7708:	tst.w	r3, #80	; 0x50
    770c:	mov	r5, r1
    770e:	bne.n	7718 <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    7710:	movs	r0, #0
}
    7712:	add	sp, #84	; 0x54
    7714:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    7718:	ldrb	r3, [r2, #0]
    771a:	cmp	r3, #47	; 0x2f
    771c:	mov	r4, r2
    771e:	beq.n	7786 <ExFatFile::open(ExFatFile*, char const*, int)+0xa2>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    7720:	mov.w	r8, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    7724:	mov	r1, r4
    7726:	add	r3, sp, #12
    7728:	add	r2, sp, #16
    772a:	mov	r0, r6
    772c:	bl	6ecc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    7730:	cmp	r0, #0
    7732:	beq.n	7710 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    7734:	ldr	r3, [sp, #12]
    7736:	ldrb	r3, [r3, #0]
    7738:	cmp	r3, #0
    773a:	beq.n	77b0 <ExFatFile::open(ExFatFile*, char const*, int)+0xcc>
    773c:	ldrb.w	r3, [sp, #16]
    7740:	ldr	r2, [sp, #20]
    7742:	str.w	r8, [sp]
    7746:	mov	r1, r5
    7748:	mov	r0, r6
    774a:	bl	7310 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    774e:	cmp	r0, #0
    7750:	beq.n	7710 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    7752:	mov	r4, r6
    7754:	add	r7, sp, #24
    7756:	add.w	lr, r6, #48	; 0x30
    775a:	ldr	r0, [r4, #0]
    775c:	ldr	r1, [r4, #4]
    775e:	ldr	r2, [r4, #8]
    7760:	ldr	r3, [r4, #12]
    7762:	mov	r5, r7
    7764:	stmia	r5!, {r0, r1, r2, r3}
    7766:	adds	r4, #16
    7768:	cmp	r4, lr
    776a:	mov	r7, r5
    776c:	bne.n	775a <ExFatFile::open(ExFatFile*, char const*, int)+0x76>
    776e:	ldr	r0, [r4, #0]
    7770:	str	r0, [r5, #0]
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
    7772:	mov	r0, r6
    7774:	bl	82c8 <ExFatFile::sync()>
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    7778:	add	r5, sp, #24
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    777a:	strb.w	r8, [r6, #49]	; 0x31
  m_flags = 0;
    777e:	strb.w	r8, [r6, #51]	; 0x33
    7782:	ldr	r4, [sp, #12]
    7784:	b.n	7724 <ExFatFile::open(ExFatFile*, char const*, int)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    7786:	adds	r4, #1
    7788:	str	r4, [sp, #12]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    778a:	ldrb	r1, [r4, #0]
    778c:	cmp	r1, #47	; 0x2f
    778e:	beq.n	7786 <ExFatFile::open(ExFatFile*, char const*, int)+0xa2>
      path++;
    }
    if (*path == 0) {
    7790:	cbz	r1, 77c8 <ExFatFile::open(ExFatFile*, char const*, int)+0xe4>
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    7792:	movs	r2, #56	; 0x38
    7794:	add	r0, sp, #24
    7796:	movs	r1, #0
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    7798:	ldr	r7, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    779a:	bl	f32c <memset>
  m_attributes = FILE_ATTR_ROOT;
    779e:	movs	r2, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    77a0:	movs	r3, #1
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    77a2:	add	r5, sp, #24
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    77a4:	str	r7, [sp, #56]	; 0x38
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    77a6:	strb.w	r2, [sp, #73]	; 0x49
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    77aa:	strb.w	r3, [sp, #75]	; 0x4b
    77ae:	b.n	7720 <ExFatFile::open(ExFatFile*, char const*, int)+0x3c>
    77b0:	ldrb.w	r3, [sp, #16]
    77b4:	ldr	r2, [sp, #20]
    77b6:	str.w	r9, [sp]
    77ba:	mov	r1, r5
    77bc:	mov	r0, r6
    77be:	bl	7310 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    77c2:	add	sp, #84	; 0x54
    77c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    77c8:	movs	r2, #56	; 0x38
    77ca:	mov	r0, r6
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    77cc:	ldr	r4, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    77ce:	bl	f32c <memset>
  m_attributes = FILE_ATTR_ROOT;
    77d2:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    77d4:	movs	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    77d6:	str	r4, [r6, #32]
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    77d8:	strb.w	r3, [r6, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    77dc:	strb.w	r0, [r6, #51]	; 0x33
    77e0:	b.n	7712 <ExFatFile::open(ExFatFile*, char const*, int)+0x2e>
    77e2:	nop

000077e4 <ExFatFile::open(ExFatVolume*, char const*, int)>:
bool ExFatFile::open(const ExChar_t* path, int oflag) {
  return open(ExFatVolume::cwv(), path, oflag);
}
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
    77e4:	cbz	r1, 77ee <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    77e6:	add.w	r1, r1, #1088	; 0x440
    77ea:	b.w	76e4 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    77ee:	mov	r0, r1
    77f0:	bx	lr
    77f2:	nop

000077f4 <ExFatFile::openNext(ExFatFile*, int)>:
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    77f4:	ldrb.w	r3, [r0, #49]	; 0x31
    77f8:	cbnz	r3, 7810 <ExFatFile::openNext(ExFatFile*, int)+0x1c>
    DBG_FAIL_MACRO;
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    77fa:	push	{r4, r5, lr}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    77fc:	ldrb.w	r4, [r1, #49]	; 0x31
    7800:	ands.w	r4, r4, #80	; 0x50
    DBG_FAIL_MACRO;
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    7804:	sub	sp, #12
    7806:	mov	r5, r1
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    7808:	bne.n	7814 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    780a:	mov	r0, r4
}
    780c:	add	sp, #12
    780e:	pop	{r4, r5, pc}
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    7810:	movs	r0, #0
}
    7812:	bx	lr
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    7814:	ldrd	r4, r5, [r5]
    7818:	movs	r5, #0
    781a:	and.w	r4, r4, #31
    781e:	orrs	r4, r5
    7820:	beq.n	7828 <ExFatFile::openNext(ExFatFile*, int)+0x34>
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    7822:	mov	r0, r3
}
    7824:	add	sp, #12
    7826:	pop	{r4, r5, pc}
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);
    7828:	str	r2, [sp, #0]
    782a:	mov	r2, r3
    782c:	bl	7310 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>

 fail:
  return false;
}
    7830:	add	sp, #12
    7832:	pop	{r4, r5, pc}

00007834 <ExFatFile::printFileSize(Print*)>:
#include "../common/DebugMacros.h"
#include "ExFatFile.h"
#include "upcase.h"
#include "ExFatVolume.h"
//-----------------------------------------------------------------------------
size_t ExFatFile::printFileSize(print_t* pr) {
    7834:	push	{r4, r5, r6, lr}
    7836:	sub	sp, #24
  uint64_t n = m_validLength;
  char buf[21];
  char *str = &buf[sizeof(buf) - 1];
  char *bgn = str - 12;
  *str = '\0';
    7838:	add	r5, sp, #24
    783a:	movs	r2, #0
#include "ExFatFile.h"
#include "upcase.h"
#include "ExFatVolume.h"
//-----------------------------------------------------------------------------
size_t ExFatFile::printFileSize(print_t* pr) {
  uint64_t n = m_validLength;
    783c:	ldr	r4, [r0, #16]
    783e:	ldr	r3, [r0, #20]
  char buf[21];
  char *str = &buf[sizeof(buf) - 1];
  char *bgn = str - 12;
  *str = '\0';
    7840:	strb.w	r2, [r5, #-4]!
#include "../common/DebugMacros.h"
#include "ExFatFile.h"
#include "upcase.h"
#include "ExFatVolume.h"
//-----------------------------------------------------------------------------
size_t ExFatFile::printFileSize(print_t* pr) {
    7844:	mov	r6, r1
  char *str = &buf[sizeof(buf) - 1];
  char *bgn = str - 12;
  *str = '\0';
  do {
    uint64_t m = n;
    n /= 10;
    7846:	mov	r1, r3
    7848:	movs	r2, #10
    784a:	movs	r3, #0
    784c:	mov	r0, r4
    784e:	bl	e7fc <__aeabi_uldivmod>
    *--str = m - 10*n + '0';
    7852:	adds	r4, #48	; 0x30
    7854:	add.w	r3, r0, r0, lsl #2
    7858:	sub.w	r4, r4, r3, lsl #1
  uint64_t n = m_validLength;
  char buf[21];
  char *str = &buf[sizeof(buf) - 1];
  char *bgn = str - 12;
  *str = '\0';
  do {
    785c:	orrs.w	r2, r0, r1
    uint64_t m = n;
    n /= 10;
    *--str = m - 10*n + '0';
    7860:	strb.w	r4, [r5, #-1]!
    7864:	mov	r3, r1
    7866:	mov	r4, r0
  uint64_t n = m_validLength;
  char buf[21];
  char *str = &buf[sizeof(buf) - 1];
  char *bgn = str - 12;
  *str = '\0';
  do {
    7868:	bne.n	7846 <ExFatFile::printFileSize(Print*)+0x12>
    uint64_t m = n;
    n /= 10;
    *--str = m - 10*n + '0';
  } while (n);
  while (str > bgn) {
    786a:	add	r3, sp, #8
    786c:	cmp	r5, r3
    786e:	bls.n	787e <ExFatFile::printFileSize(Print*)+0x4a>
    7870:	mov	r1, r5
    *--str = ' ';
    7872:	movs	r2, #32
    7874:	strb.w	r2, [r1, #-1]!
  do {
    uint64_t m = n;
    n /= 10;
    *--str = m - 10*n + '0';
  } while (n);
  while (str > bgn) {
    7878:	cmp	r1, r3
    787a:	bne.n	7874 <ExFatFile::printFileSize(Print*)+0x40>
    787c:	add	r5, sp, #8
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    787e:	mov	r0, r5
    7880:	bl	f940 <strlen>
    7884:	ldr	r3, [r6, #0]
    7886:	mov	r2, r0
    7888:	mov	r1, r5
    788a:	ldr	r3, [r3, #4]
    788c:	mov	r0, r6
    788e:	blx	r3
    *--str = ' ';
  }
  return pr->write(str);
}
    7890:	add	sp, #24
    7892:	pop	{r4, r5, r6, pc}

00007894 <ExFatFile::printModifyDateTime(Print*)>:
  return fsPrintDateTime(pr, getLe32(df->createTime));
fail:
  return 0;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::printModifyDateTime(print_t* pr) {
    7894:	mov	r3, r0
    7896:	push	{r4, lr}
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    7898:	ldr	r0, [r0, #32]
  return fsPrintDateTime(pr, getLe32(df->createTime));
fail:
  return 0;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::printModifyDateTime(print_t* pr) {
    789a:	mov	r4, r1
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    789c:	movs	r2, #0
    789e:	add.w	r1, r3, #36	; 0x24
    78a2:	bl	7d4c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    78a6:	cbz	r0, 78b4 <ExFatFile::printModifyDateTime(Print*)+0x20>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return fsPrintDateTime(pr, getLe32(df->modifyTime));
    78a8:	ldr	r1, [r0, #12]
    78aa:	mov	r0, r4
fail:
  return 0;
}
    78ac:	ldmia.w	sp!, {r4, lr}
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
  if (!df) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return fsPrintDateTime(pr, getLe32(df->modifyTime));
    78b0:	b.w	6de0 <fsPrintDateTime(Print*, unsigned long)>
fail:
  return 0;
}
    78b4:	pop	{r4, pc}
    78b6:	nop

000078b8 <ExFatFile::ls(Print*, unsigned char, unsigned char)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::ls(print_t* pr, uint8_t flags, uint8_t indent) {
    78b8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ExFatFile file;
  if (!isDir()) {
    78bc:	ldrb.w	r6, [r0, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::ls(print_t* pr, uint8_t flags, uint8_t indent) {
    78c0:	sub	sp, #56	; 0x38
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    78c2:	movs	r4, #0
  ExFatFile file;
  if (!isDir()) {
    78c4:	tst.w	r6, #80	; 0x50
    78c8:	strb.w	r4, [sp, #49]	; 0x31
    78cc:	strb.w	r4, [sp, #50]	; 0x32
    78d0:	strb.w	r4, [sp, #51]	; 0x33
    78d4:	bne.n	78de <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x26>
    goto fail;
  }
  return true;

 fail:
  return false;
    78d6:	movs	r0, #0
}
    78d8:	add	sp, #56	; 0x38
    78da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    78de:	mov	r9, r0
    78e0:	mov	r8, r2
    78e2:	mov	r7, r3
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    78e4:	movs	r2, #0
    78e6:	movs	r3, #0
    78e8:	mov	r5, r1
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
        pr->write(' ');
      }
      if (flags & LS_DATE) {
    78ea:	and.w	sl, r8, #2
    78ee:	bl	7210 <ExFatFile::seekSet(unsigned long long)>
  if (!isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    78f2:	movs	r2, #0
    78f4:	mov	r1, r9
    78f6:	mov	r0, sp
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
        pr->write(' ');
      }
      if (flags & LS_DATE) {
    78f8:	uxtb.w	sl, sl
  if (!isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    78fc:	bl	77f4 <ExFatFile::openNext(ExFatFile*, int)>
    7900:	cmp	r0, #0
    7902:	beq.n	798c <ExFatFile::ls(Print*, unsigned char, unsigned char)+0xd4>
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
    7904:	ldrb.w	r3, [sp, #49]	; 0x31
    7908:	lsls	r3, r3, #30
    790a:	bpl.n	7912 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x5a>
    790c:	tst.w	r8, #1
    7910:	beq.n	7978 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0xc0>
      for (uint8_t i = 0; i < indent; i++) {
    7912:	movs	r4, #0
    7914:	cbz	r7, 7928 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x70>
        pr->write(' ');
    7916:	ldr	r3, [r5, #0]
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
    7918:	adds	r4, #1
        pr->write(' ');
    791a:	movs	r1, #32
    791c:	ldr	r6, [r3, #0]
    791e:	mov	r0, r5
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
    7920:	uxtb	r4, r4
        pr->write(' ');
    7922:	blx	r6
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
    7924:	cmp	r7, r4
    7926:	bne.n	7916 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x5e>
        pr->write(' ');
      }
      if (flags & LS_DATE) {
    7928:	cmp.w	sl, #0
    792c:	bne.n	79c4 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x10c>
        file.printModifyDateTime(pr);
        pr->write(' ');
      }
      if (flags & LS_SIZE) {
    792e:	tst.w	r8, #4
    7932:	bne.n	79b0 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0xf8>
        file.printFileSize(pr);
        pr->write(' ');
      }
      file.printName(pr);
    7934:	mov	r1, r5
    7936:	mov	r0, sp
    7938:	bl	6f90 <ExFatFile::printName(Print*)>
      if (file.isDir()) {
    793c:	ldrb.w	r3, [sp, #49]	; 0x31
    7940:	tst.w	r3, #80	; 0x50
    7944:	bne.n	79a4 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0xec>
        pr->write('/');
      }
      pr->write('\r');
    7946:	ldr	r3, [r5, #0]
    7948:	movs	r1, #13
    794a:	ldr	r3, [r3, #0]
    794c:	mov	r0, r5
    794e:	blx	r3
      pr->write('\n');
    7950:	ldr	r3, [r5, #0]
    7952:	movs	r1, #10
    7954:	ldr	r3, [r3, #0]
    7956:	mov	r0, r5
    7958:	blx	r3
      if ((flags & LS_R) && file.isDir()) {
    795a:	tst.w	r8, #8
    795e:	beq.n	7978 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0xc0>
    7960:	ldrb.w	r3, [sp, #49]	; 0x31
    7964:	tst.w	r3, #80	; 0x50
    7968:	beq.n	7978 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0xc0>
        file.ls(pr, flags, indent + 2);
    796a:	adds	r3, r7, #2
    796c:	uxtb	r3, r3
    796e:	mov	r2, r8
    7970:	mov	r1, r5
    7972:	mov	r0, sp
    7974:	bl	78b8 <ExFatFile::ls(Print*, unsigned char, unsigned char)>
      }
    }
    file.close();
    7978:	mov	r0, sp
    797a:	bl	6de8 <ExFatFile::close()>
  if (!isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    797e:	movs	r2, #0
    7980:	mov	r1, r9
    7982:	mov	r0, sp
    7984:	bl	77f4 <ExFatFile::openNext(ExFatFile*, int)>
    7988:	cmp	r0, #0
    798a:	bne.n	7904 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x4c>
  void clearWriteError() {
    m_error &= ~WRITE_ERROR;
  }
  /** \return All error bits. */
  uint8_t getError() {
    return isOpen() ? m_error : 0XFF;
    798c:	ldrb.w	r3, [r9, #49]	; 0x31
    7990:	cmp	r3, #0
    7992:	beq.n	78d6 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x1e>
        file.ls(pr, flags, indent + 2);
      }
    }
    file.close();
  }
  if (getError()) {
    7994:	ldrb.w	r0, [r9, #50]	; 0x32
    7998:	clz	r0, r0
    799c:	lsrs	r0, r0, #5
  }
  return true;

 fail:
  return false;
}
    799e:	add	sp, #56	; 0x38
    79a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        file.printFileSize(pr);
        pr->write(' ');
      }
      file.printName(pr);
      if (file.isDir()) {
        pr->write('/');
    79a4:	ldr	r3, [r5, #0]
    79a6:	movs	r1, #47	; 0x2f
    79a8:	ldr	r3, [r3, #0]
    79aa:	mov	r0, r5
    79ac:	blx	r3
    79ae:	b.n	7946 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x8e>
      if (flags & LS_DATE) {
        file.printModifyDateTime(pr);
        pr->write(' ');
      }
      if (flags & LS_SIZE) {
        file.printFileSize(pr);
    79b0:	mov	r1, r5
    79b2:	mov	r0, sp
    79b4:	bl	7834 <ExFatFile::printFileSize(Print*)>
        pr->write(' ');
    79b8:	ldr	r3, [r5, #0]
    79ba:	movs	r1, #32
    79bc:	ldr	r3, [r3, #0]
    79be:	mov	r0, r5
    79c0:	blx	r3
    79c2:	b.n	7934 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x7c>
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
        pr->write(' ');
      }
      if (flags & LS_DATE) {
        file.printModifyDateTime(pr);
    79c4:	mov	r1, r5
    79c6:	mov	r0, sp
    79c8:	bl	7894 <ExFatFile::printModifyDateTime(Print*)>
        pr->write(' ');
    79cc:	ldr	r3, [r5, #0]
    79ce:	movs	r1, #32
    79d0:	ldr	r3, [r3, #0]
    79d2:	mov	r0, r5
    79d4:	blx	r3
    79d6:	b.n	792e <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x76>

000079d8 <FsCache::sync() [clone .part.2]>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    79d8:	push	{r4, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    79da:	add.w	r2, r0, #12

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    79de:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    79e0:	ldr	r0, [r0, #4]
    79e2:	ldr	r1, [r4, #8]
    79e4:	ldr	r3, [r0, #0]
    79e6:	ldr	r3, [r3, #24]
    79e8:	blx	r3
    79ea:	cbz	r0, 79f4 <FsCache::sync() [clone .part.2]+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    79ec:	ldrb	r3, [r4, #0]
    79ee:	bic.w	r3, r3, #1
    79f2:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    79f4:	pop	{r4, pc}
    79f6:	nop

000079f8 <FsCache::invalidate()>:
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    79f8:	movs	r2, #0
  m_sector = 0XFFFFFFFF;
    79fa:	mov.w	r3, #4294967295
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    79fe:	strb	r2, [r0, #0]
  m_sector = 0XFFFFFFFF;
    7a00:	str	r3, [r0, #8]
    7a02:	bx	lr

00007a04 <FsCache::get(unsigned long, unsigned char)>:
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
    7a04:	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    7a06:	ldr	r5, [r0, #4]
    7a08:	cbz	r5, 7a4a <FsCache::get(unsigned long, unsigned char)+0x46>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    7a0a:	ldr	r3, [r0, #8]
    7a0c:	cmp	r3, r1
    7a0e:	mov	r4, r0
    7a10:	mov	r7, r2
    7a12:	mov	r6, r1
    7a14:	beq.n	7a34 <FsCache::get(unsigned long, unsigned char)+0x30>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    7a16:	ldrb	r3, [r0, #0]
    7a18:	lsls	r2, r3, #31
    7a1a:	bmi.n	7a42 <FsCache::get(unsigned long, unsigned char)+0x3e>
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    7a1c:	lsls	r3, r7, #30
    7a1e:	bpl.n	7a4e <FsCache::get(unsigned long, unsigned char)+0x4a>
    7a20:	add.w	r5, r4, #12
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    7a24:	and.w	r2, r7, #1
    7a28:	movs	r3, #0
    7a2a:	orrs	r3, r2
    7a2c:	strb	r3, [r4, #0]
    7a2e:	mov	r0, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    7a30:	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
}
    7a32:	pop	{r3, r4, r5, r6, r7, pc}
    7a34:	ldrsb.w	r3, [r0], #12
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    7a38:	and.w	r2, r7, #1
    7a3c:	orrs	r3, r2
    7a3e:	strb	r3, [r4, #0]
  return m_cacheBuffer;

fail:
  return nullptr;
}
    7a40:	pop	{r3, r4, r5, r6, r7, pc}
    7a42:	bl	79d8 <FsCache::sync() [clone .part.2]>
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
    7a46:	cmp	r0, #0
    7a48:	bne.n	7a1c <FsCache::get(unsigned long, unsigned char)+0x18>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
    7a4a:	movs	r0, #0
    7a4c:	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    7a4e:	ldr	r0, [r4, #4]
    7a50:	ldr	r3, [r0, #0]
    7a52:	add.w	r5, r4, #12
    7a56:	ldr	r3, [r3, #8]
    7a58:	mov	r2, r5
    7a5a:	mov	r1, r6
    7a5c:	blx	r3
    7a5e:	cmp	r0, #0
    7a60:	bne.n	7a24 <FsCache::get(unsigned long, unsigned char)+0x20>
    7a62:	b.n	7a4a <FsCache::get(unsigned long, unsigned char)+0x46>

00007a64 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>:
    }
  }
  return 1;
}
//-----------------------------------------------------------------------------
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    7a64:	push	{r3, r4, r5, lr}
    7a66:	mov	r4, r1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    7a68:	ldr.w	r1, [r0, #1052]	; 0x41c
    7a6c:	mov	r5, r2
    7a6e:	add.w	r1, r1, r4, lsr #7
    7a72:	add.w	r0, r0, #524	; 0x20c
    7a76:	movs	r2, #0
    7a78:	bl	7a04 <FsCache::get(unsigned long, unsigned char)>
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    7a7c:	cbz	r0, 7a90 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x2c>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    7a7e:	lsls	r4, r4, #2
    7a80:	ubfx	r4, r4, #0, #9
    7a84:	ldr	r3, [r0, r4]
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    7a86:	adds	r2, r3, #1
    7a88:	beq.n	7a94 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x30>
    return 0;
  }
  *value = next;
    7a8a:	str	r3, [r5, #0]
  return 1;
    7a8c:	movs	r0, #1
    7a8e:	pop	{r3, r4, r5, pc}
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
    7a90:	movs	r0, #255	; 0xff
    7a92:	pop	{r3, r4, r5, pc}
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    return 0;
    7a94:	movs	r0, #0
  }
  *value = next;
  return 1;
}
    7a96:	pop	{r3, r4, r5, pc}

00007a98 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>:
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    7a98:	push	{r3, r4, r5, lr}
    7a9a:	mov	r4, r1
    7a9c:	ldr.w	r1, [r0, #1052]	; 0x41c
    7aa0:	mov	r5, r2
    7aa2:	add.w	r1, r1, r4, lsr #7
    7aa6:	add.w	r0, r0, #524	; 0x20c
    7aaa:	movs	r2, #1
    7aac:	bl	7a04 <FsCache::get(unsigned long, unsigned char)>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCacheGet(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    7ab0:	mov	r3, r0
    7ab2:	cbz	r0, 7ac0 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]+0x28>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    7ab4:	lsls	r4, r4, #2
    7ab6:	ubfx	r4, r4, #0, #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;
    7aba:	movs	r0, #1
    7abc:	str	r5, [r3, r4]
    7abe:	pop	{r3, r4, r5, pc}

 fail:
  return false;
}
    7ac0:	pop	{r3, r4, r5, pc}
    7ac2:	nop

00007ac4 <FsCache::sync()>:
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    7ac4:	ldrb	r3, [r0, #0]
    7ac6:	lsls	r3, r3, #31
    7ac8:	bmi.n	7ace <FsCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    7aca:	movs	r0, #1
    7acc:	bx	lr
    7ace:	b.w	79d8 <FsCache::sync() [clone .part.2]>
    7ad2:	nop

00007ad4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
 fail:
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    7ad4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7ad8:	mov	r8, r0
    7ada:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    7adc:	mov	fp, r1
    7ade:	cmp	r1, #0
    7ae0:	beq.n	7b6c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x98>
    7ae2:	subs	r7, r1, #2
  if (start >= m_clusterCount) {
    7ae4:	ldr.w	r3, [r8, #1064]	; 0x428
    7ae8:	cmp	r7, r3
    7aea:	bcs.n	7b64 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x90>
    7aec:	and.w	r5, r7, #7
    7af0:	movs	r3, #1
    7af2:	lsl.w	r5, r3, r5
    7af6:	uxtb	r5, r5
    7af8:	ubfx	sl, r7, #3, #9
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
    7afc:	mov	r6, r7
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    7afe:	mov	r4, r7
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    7b00:	ldr.w	r1, [r8, #1060]	; 0x424
    7b04:	movs	r2, #0
    7b06:	add.w	r1, r1, r4, lsr #12
    7b0a:	mov	r0, r8
    7b0c:	bl	7a04 <FsCache::get(unsigned long, unsigned char)>
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    7b10:	cbz	r0, 7b44 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x70>
    7b12:	ldrb.w	r1, [r0, sl]
    7b16:	b.n	7b2e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5a>
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    7b18:	cmp	r2, r9
    7b1a:	beq.n	7b72 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9e>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    7b1c:	cmp	r7, r4
    7b1e:	beq.n	7b42 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    7b20:	ldr.w	r2, [r8, #1064]	; 0x428
    7b24:	cmp	r4, r2
    7b26:	bcs.n	7b58 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x84>
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    7b28:	ands.w	r5, r3, #255	; 0xff
    7b2c:	beq.n	7b48 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x74>
        endAlloc++;
    7b2e:	adds	r4, #1
        if (!(mask & cache[i])) {
    7b30:	tst	r5, r1
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    7b32:	mov.w	r3, r5, lsl #1
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    7b36:	sub.w	r2, r4, r6
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    7b3a:	beq.n	7b18 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x44>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    7b3c:	cmp	r7, r4
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    7b3e:	mov	r6, r4
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    7b40:	bne.n	7b20 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4c>
          return 1;
    7b42:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    7b44:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7b48:	add.w	sl, sl, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    7b4c:	cmp.w	sl, #512	; 0x200
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    7b50:	mov.w	r5, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    7b54:	bne.n	7b12 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3e>
    7b56:	b.n	7b5c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
    7b58:	movs	r6, #0
    7b5a:	mov	r4, r6
          break;
        }
      }
      mask = 1;
    }
    i = 0;
    7b5c:	mov.w	sl, #0
    7b60:	movs	r5, #1
    7b62:	b.n	7b00 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
    7b64:	movs	r7, #0
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
    7b66:	mov	sl, r7
    7b68:	movs	r5, #1
    7b6a:	b.n	7afc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    7b6c:	ldr.w	r7, [r0, #1048]	; 0x418
    7b70:	b.n	7ae4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
            if (cluster == 0 && count == 1) {
    7b72:	cmp.w	fp, #0
    7b76:	bne.n	7b82 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xae>
    7b78:	cmp.w	r9, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    7b7c:	it	eq
    7b7e:	streq.w	r6, [r8, #1048]	; 0x418
            }
            return bgnAlloc + 2;
    7b82:	adds	r0, r6, #2
    7b84:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00007b88 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    7b88:	push	{r3, r4, r5, r6, r7, lr}
    7b8a:	mov	r4, r0
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    7b8c:	movs	r3, #0
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
  m_sector = 0XFFFFFFFF;
    7b8e:	mov.w	r6, #4294967295
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    7b92:	add.w	r7, r0, #524	; 0x20c
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
  m_blockDev = dev;
    7b96:	str.w	r1, [r0, #1080]	; 0x438
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this partition.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    7b9a:	str	r1, [r0, #4]
    7b9c:	str.w	r1, [r0, #528]	; 0x210

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    7ba0:	mov	r5, r2
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    7ba2:	mov	r0, r7
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    7ba4:	strb.w	r3, [r4, #1084]	; 0x43c
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    7ba8:	strb	r3, [r4, #0]
    7baa:	strb.w	r3, [r4, #524]	; 0x20c
  m_sector = 0XFFFFFFFF;
    7bae:	str	r6, [r4, #8]
    7bb0:	str.w	r6, [r4, #532]	; 0x214
    7bb4:	mov	r2, r3
    7bb6:	mov	r1, r3
    7bb8:	bl	7a04 <FsCache::get(unsigned long, unsigned char)>

  m_fatType = 0;
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    7bbc:	cmp	r5, #4
    7bbe:	bhi.n	7bda <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    7bc0:	mov	r6, r0
    7bc2:	cbz	r0, 7bda <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    7bc4:	cbnz	r5, 7bde <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    7bc6:	movs	r2, #5
    7bc8:	ldr	r1, [pc, #152]	; (7c64 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xdc>)
    7bca:	adds	r0, r6, #3
    7bcc:	bl	fa1c <strncmp>
    7bd0:	cbnz	r0, 7bda <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    7bd2:	ldrb.w	r3, [r6, #108]	; 0x6c
    7bd6:	cmp	r3, #9
    7bd8:	beq.n	7c0e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x86>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    7bda:	movs	r0, #0
    7bdc:	pop	{r3, r4, r5, r6, r7, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    7bde:	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    7be0:	add.w	r3, r0, r3, lsl #4
    7be4:	ldrb.w	r2, [r3, #446]	; 0x1be
    7be8:	ands.w	r2, r2, #127	; 0x7f
    7bec:	bne.n	7bda <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    7bee:	ldrb.w	r3, [r3, #450]	; 0x1c2
    7bf2:	cmp	r3, #0
    7bf4:	beq.n	7bda <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    7bf6:	add.w	r5, r0, r5, lsl #4
    7bfa:	mov	r0, r7
    7bfc:	ldr.w	r5, [r5, #438]	; 0x1b6
    7c00:	mov	r1, r5
    7c02:	bl	7a04 <FsCache::get(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCacheGet(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
    7c06:	mov	r6, r0
    7c08:	cmp	r0, #0
    7c0a:	bne.n	7bc6 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x3e>
    7c0c:	b.n	7bda <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    7c0e:	ldr	r3, [r6, #80]	; 0x50
    7c10:	add	r3, r5
    7c12:	str.w	r3, [r4, #1052]	; 0x41c
    7c16:	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    7c18:	str.w	r3, [r4, #1056]	; 0x420
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    7c1c:	ldr	r3, [r6, #88]	; 0x58
    7c1e:	add	r5, r3
    7c20:	str.w	r5, [r4, #1060]	; 0x424
    7c24:	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    7c26:	str.w	r3, [r4, #1064]	; 0x428
    7c2a:	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    7c2c:	str.w	r3, [r4, #1068]	; 0x42c
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    7c30:	ldrb.w	r3, [r6, #109]	; 0x6d
    7c34:	strb.w	r3, [r4, #1085]	; 0x43d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    7c38:	movs	r5, #1
    7c3a:	adds	r3, #9
    7c3c:	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    7c40:	subs	r2, r3, #1
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    7c42:	str.w	r0, [r4, #1048]	; 0x418
  bitmapFind(0, 1);
    7c46:	mov	r1, r0
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    7c48:	str.w	r3, [r4, #1076]	; 0x434
  m_clusterMask = m_bytesPerCluster - 1;
    7c4c:	str.w	r2, [r4, #1072]	; 0x430
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    7c50:	mov	r0, r4
    7c52:	mov	r2, r5
    7c54:	bl	7ad4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    7c58:	movs	r3, #64	; 0x40
    7c5a:	strb.w	r3, [r4, #1084]	; 0x43c
  return true;
    7c5e:	mov	r0, r5

 fail:
  return false;
}
    7c60:	pop	{r3, r4, r5, r6, r7, pc}
    7c62:	nop
    7c64:	.word	0x000131d4

00007c68 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    7c68:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
    7c6c:	subs	r1, #2
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    7c6e:	mov	r8, r0
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    7c70:	ldr.w	r0, [r0, #1064]	; 0x428
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    7c74:	mov	r5, r2
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    7c76:	adds	r2, r1, r2
    7c78:	cmp	r2, r0
    7c7a:	bhi.n	7cee <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    7c7c:	mov	sl, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    7c7e:	ldr.w	r3, [r8, #1048]	; 0x418
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    7c82:	cmp.w	sl, #0
    7c86:	bne.n	7cf4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    7c88:	cmp	r1, r3
      m_bitmapStart = start;
    7c8a:	it	cc
    7c8c:	strcc.w	r1, [r8, #1048]	; 0x418
    }
  }
  mask = 1 << (start & 7);
    7c90:	and.w	r4, r1, #7
    7c94:	movs	r2, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    7c96:	ldr.w	r3, [r8, #1060]	; 0x424
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    7c9a:	lsl.w	r4, r2, r4
    7c9e:	uxtb	r4, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    7ca0:	add.w	r9, r3, r1, lsr #12
  i = (start >> 3) & m_sectorMask;
    7ca4:	ubfx	r6, r1, #3, #9
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    7ca8:	movs	r2, #1
    7caa:	mov	r1, r9
    7cac:	mov	r0, r8
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    7cae:	add	r9, r2
    7cb0:	bl	7a04 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    7cb4:	cbz	r0, 7cee <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    7cb6:	adds	r7, r0, r6
    7cb8:	add.w	r0, r0, #512	; 0x200
    7cbc:	ldrb.w	r2, [r7], #1
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    7cc0:	tst	r2, r4
    7cc2:	ite	ne
    7cc4:	movne	r6, #1
    7cc6:	moveq	r6, #0
    7cc8:	cmp	r6, sl
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    7cca:	eor.w	r2, r2, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    7cce:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    7cd2:	beq.n	7cee <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
    7cd4:	subs	r5, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    7cd6:	strb.w	r2, [r7, #-1]
        if (--count == 0) {
    7cda:	beq.n	7d08 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa0>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    7cdc:	ands.w	r4, r4, #255	; 0xff
    7ce0:	bne.n	7cc0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x58>
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    7ce2:	cmp	r0, r7
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    7ce4:	mov	r6, r4
    7ce6:	mov.w	r4, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    7cea:	bne.n	7cbc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    7cec:	b.n	7ca8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x40>
    }
    i = 0;
  }

 fail:
  return false;
    7cee:	movs	r0, #0
    7cf0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    7cf4:	cmp	r1, r3
    7cf6:	bhi.n	7c90 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
    7cf8:	cmp	r2, r3
    7cfa:	bls.n	7c90 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    7cfc:	cmp	r2, r0
    7cfe:	it	cs
    7d00:	movcs	r2, #0
    7d02:	str.w	r2, [r8, #1048]	; 0x418
    7d06:	b.n	7c90 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
    7d08:	movs	r0, #1
    i = 0;
  }

 fail:
  return false;
}
    7d0a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7d0e:	nop

00007d10 <ExFatPartition::chainSize(unsigned long)>:
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    7d10:	push	{r4, r5, r6, lr}
    7d12:	sub	sp, #8
    7d14:	add	r6, sp, #8
    7d16:	mov	r5, r0
    7d18:	str.w	r1, [r6, #-4]!
  uint32_t n = 0;
    7d1c:	movs	r4, #0
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    7d1e:	ldr.w	r3, [r5, #1064]	; 0x428
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    7d22:	ldr	r1, [sp, #4]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    7d24:	adds	r3, #1
    7d26:	cmp	r1, r3
    7d28:	bls.n	7d30 <ExFatPartition::chainSize(unsigned long)+0x20>
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    7d2a:	movs	r0, #0
    n++;
  } while (status);
  return n;
}
    7d2c:	add	sp, #8
    7d2e:	pop	{r4, r5, r6, pc}
    7d30:	mov	r2, r6
    7d32:	mov	r0, r5
    7d34:	bl	7a64 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    7d38:	sxtb	r0, r0
    if (status < 0) return 0;
    7d3a:	cmp	r0, #0
    7d3c:	blt.n	7d2a <ExFatPartition::chainSize(unsigned long)+0x1a>
    n++;
    7d3e:	add.w	r4, r4, #1
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    7d42:	bne.n	7d1e <ExFatPartition::chainSize(unsigned long)+0xe>
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    7d44:	mov	r0, r4
  } while (status);
  return n;
}
    7d46:	add	sp, #8
    7d48:	pop	{r4, r5, r6, pc}
    7d4a:	nop

00007d4c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
//-----------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    7d4c:	push	{r3, r4, r5, r6, r7, lr}
    7d4e:	mov	r6, r1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    7d50:	ldmia.w	r6, {r3, r5}
    7d54:	ldr.w	r1, [r0, #1072]	; 0x430
    7d58:	ldr.w	r4, [r0, #1060]	; 0x424
    7d5c:	ldrb.w	r7, [r0, #1085]	; 0x43d
    7d60:	ands	r1, r5
    7d62:	subs	r3, #2
    7d64:	add.w	r1, r4, r1, lsr #9
    7d68:	lsls	r3, r7
    7d6a:	add	r1, r3
    7d6c:	add.w	r0, r0, #524	; 0x20c
    7d70:	bl	7a04 <FsCache::get(unsigned long, unsigned char)>
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    7d74:	cbz	r0, 7d7e <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x32>
    7d76:	ldr	r3, [r6, #4]
    7d78:	ubfx	r3, r3, #0, #9
    7d7c:	add	r0, r3
}
    7d7e:	pop	{r3, r4, r5, r6, r7, pc}

00007d80 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    7d80:	push	{r4, r5, r6, lr}
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    7d82:	ldr	r4, [r1, #4]
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    7d84:	mov	r5, r1
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
    7d86:	adds	r3, r4, r2
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    7d88:	ldr.w	r1, [r0, #1072]	; 0x430
  pos->position += offset;
    7d8c:	str	r3, [r5, #4]
  tmp >>= bytesPerClusterShift();
    7d8e:	ldrb.w	r3, [r0, #1085]	; 0x43d
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    7d92:	ands	r4, r1
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    7d94:	adds	r3, #9
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    7d96:	add	r2, r4
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    7d98:	uxtb	r3, r3
    7d9a:	lsr.w	r4, r2, r3
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    7d9e:	mov	r6, r0
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    7da0:	cbz	r4, 7db2 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
    if (pos->isContiguous) {
    7da2:	ldrb	r3, [r5, #8]
    7da4:	cbz	r3, 7db6 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x36>
      pos->cluster++;
    7da6:	ldr	r3, [r5, #0]
    7da8:	adds	r3, #1
    7daa:	str	r3, [r5, #0]
    7dac:	subs	r4, #1
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    7dae:	cmp	r4, #0
    7db0:	bne.n	7da2 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x22>
      if (status != 1) {
        return status;
      }
    }
  }
  return 1;
    7db2:	movs	r0, #1
    7db4:	pop	{r4, r5, r6, pc}
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    7db6:	ldr.w	r3, [r6, #1064]	; 0x428
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    7dba:	ldr	r1, [r5, #0]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    7dbc:	adds	r3, #1
    7dbe:	cmp	r1, r3
    7dc0:	bls.n	7dc8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x48>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    7dc2:	mov.w	r0, #4294967295
        return status;
      }
    }
  }
  return 1;
}
    7dc6:	pop	{r4, r5, r6, pc}
    7dc8:	mov	r2, r5
    7dca:	mov	r0, r6
    7dcc:	bl	7a64 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    7dd0:	sxtb	r0, r0
      if (status != 1) {
    7dd2:	cmp	r0, #1
    7dd4:	beq.n	7dac <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
    7dd6:	pop	{r4, r5, r6, pc}

00007dd8 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    7dd8:	ldr.w	r3, [r0, #1064]	; 0x428
    7ddc:	adds	r3, #1
    7dde:	cmp	r3, r1
    7de0:	bcs.n	7de6 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xe>
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    7de2:	movs	r0, #255	; 0xff
    7de4:	bx	lr
    7de6:	b.w	7a64 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
    7dea:	nop

00007dec <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    7dec:	cmp	r1, #1
    7dee:	bls.n	7e0c <ExFatPartition::fatPut(unsigned long, unsigned long)+0x20>
    7df0:	ldr.w	r3, [r0, #1064]	; 0x428
    7df4:	adds	r3, #1
    7df6:	cmp	r1, r3
  }
  *value = next;
  return 1;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    7df8:	push	{r4}
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    7dfa:	bls.n	7e04 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x18>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
}
    7dfc:	movs	r0, #0
    7dfe:	ldr.w	r4, [sp], #4
    7e02:	bx	lr
    7e04:	ldr.w	r4, [sp], #4
    7e08:	b.w	7a98 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    7e0c:	movs	r0, #0
    7e0e:	bx	lr

00007e10 <ExFatPartition::freeChain(unsigned long)>:
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    7e10:	push	{r4, r5, r6, r7, lr}
    7e12:	mov	r4, r1
    7e14:	sub	sp, #12
    7e16:	mov	r5, r0
  uint32_t next;
  uint32_t start = cluster;
    7e18:	mov	r6, r1
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    7e1a:	ldr.w	r3, [r5, #1064]	; 0x428
    7e1e:	adds	r3, #1
    7e20:	cmp	r4, r3
    7e22:	bls.n	7e2a <ExFatPartition::freeChain(unsigned long)+0x1a>
  } while (status);

  return true;

 fail:
  return false;
    7e24:	movs	r0, #0
}
    7e26:	add	sp, #12
    7e28:	pop	{r4, r5, r6, r7, pc}
    7e2a:	add	r2, sp, #4
    7e2c:	mov	r1, r4
    7e2e:	mov	r0, r5
    7e30:	bl	7a64 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    7e34:	sxtb	r7, r0
    if (status < 0) {
    7e36:	cmp	r7, #0
    7e38:	blt.n	7e24 <ExFatPartition::freeChain(unsigned long)+0x14>
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    7e3a:	cmp	r4, #1
    7e3c:	bls.n	7e24 <ExFatPartition::freeChain(unsigned long)+0x14>
    7e3e:	ldr.w	r3, [r5, #1064]	; 0x428
    7e42:	adds	r3, #1
    7e44:	cmp	r4, r3
    7e46:	bhi.n	7e24 <ExFatPartition::freeChain(unsigned long)+0x14>
    7e48:	movs	r2, #0
    7e4a:	mov	r1, r4
    7e4c:	mov	r0, r5
    7e4e:	bl	7a98 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    7e52:	cmp	r0, #0
    7e54:	beq.n	7e24 <ExFatPartition::freeChain(unsigned long)+0x14>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    7e56:	ldr	r3, [sp, #4]
    7e58:	adds	r4, #1
    7e5a:	cmp	r4, r3
    7e5c:	bne.n	7e76 <ExFatPartition::freeChain(unsigned long)+0x66>
    7e5e:	cmp	r7, #0
    7e60:	bne.n	7e1a <ExFatPartition::freeChain(unsigned long)+0xa>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    7e62:	mov	r3, r7
    7e64:	subs	r2, r4, r6
    7e66:	mov	r1, r6
    7e68:	mov	r0, r5
    7e6a:	bl	7c68 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    7e6e:	cmp	r0, #0
    7e70:	beq.n	7e24 <ExFatPartition::freeChain(unsigned long)+0x14>

  return true;

 fail:
  return false;
}
    7e72:	add	sp, #12
    7e74:	pop	{r4, r5, r6, r7, pc}
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    7e76:	subs	r2, r4, r6
    7e78:	mov	r1, r6
    7e7a:	movs	r3, #0
    7e7c:	mov	r0, r5
    7e7e:	bl	7c68 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    7e82:	cmp	r0, #0
    7e84:	beq.n	7e24 <ExFatPartition::freeChain(unsigned long)+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    7e86:	ldr	r4, [sp, #4]
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    7e88:	cmp	r7, #0
    7e8a:	beq.n	7e26 <ExFatPartition::freeChain(unsigned long)+0x16>
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    7e8c:	mov	r6, r4
    7e8e:	b.n	7e1a <ExFatPartition::freeChain(unsigned long)+0xa>

00007e90 <ExFatPartition::freeClusterCount()>:

 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    7e90:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    7e94:	movs	r4, #0
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
    7e96:	ldr.w	r6, [r0, #1060]	; 0x424

 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    7e9a:	mov	r8, r0
    7e9c:	add.w	r7, r0, #524	; 0x20c
  uint32_t nc = 0;
    7ea0:	mov	r5, r4
    7ea2:	mov	r1, r6
    7ea4:	movs	r2, #0
    7ea6:	mov	r0, r7
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
  uint8_t* cache;

  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    7ea8:	adds	r6, #1
    7eaa:	bl	7a04 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    7eae:	cbz	r0, 7efe <ExFatPartition::freeClusterCount()+0x6e>
    7eb0:	add.w	lr, r0, #4294967295
    7eb4:	ldr.w	ip, [r8, #1064]	; 0x428
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    7eb8:	ldrb.w	r0, [lr, #1]!
    7ebc:	cmp	r0, #255	; 0xff
    7ebe:	add.w	r9, r5, #4096	; 0x1000
    7ec2:	beq.n	7eec <ExFatPartition::freeClusterCount()+0x5c>
        usedCount+= 8;
      } else if (cache[i]) {
    7ec4:	cbz	r0, 7eda <ExFatPartition::freeClusterCount()+0x4a>
    7ec6:	movs	r2, #8
    7ec8:	movs	r3, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
          if ((mask & cache[i])) {
    7eca:	tst	r0, r3
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    7ecc:	mov.w	r1, r3, lsl #1
          if ((mask & cache[i])) {
            usedCount++;
    7ed0:	it	ne
    7ed2:	addne	r4, #1
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    7ed4:	subs	r2, #1
    7ed6:	uxtb	r3, r1
    7ed8:	bne.n	7eca <ExFatPartition::freeClusterCount()+0x3a>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    7eda:	adds	r5, #8
      if (nc >= m_clusterCount) {
    7edc:	cmp	ip, r5
    7ede:	bls.n	7ef6 <ExFatPartition::freeClusterCount()+0x66>
  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    7ee0:	cmp	r5, r9
    7ee2:	beq.n	7ea2 <ExFatPartition::freeClusterCount()+0x12>
      if (cache[i] == 0XFF) {
    7ee4:	ldrb.w	r0, [lr, #1]!
    7ee8:	cmp	r0, #255	; 0xff
    7eea:	bne.n	7ec4 <ExFatPartition::freeClusterCount()+0x34>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    7eec:	adds	r5, #8
      if (nc >= m_clusterCount) {
    7eee:	cmp	ip, r5
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
    7ef0:	add.w	r4, r4, #8
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    7ef4:	bhi.n	7ee0 <ExFatPartition::freeClusterCount()+0x50>
        return m_clusterCount - usedCount;
    7ef6:	rsb	r0, r4, ip
    7efa:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      }
    }
  }
}
    7efe:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7f02:	nop

00007f04 <ExFatPartition::rootLength()>:
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    7f04:	push	{r4, lr}
    7f06:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    7f08:	ldr.w	r1, [r0, #1068]	; 0x42c
    7f0c:	bl	7d10 <ExFatPartition::chainSize(unsigned long)>
  return nc << bytesPerClusterShift();
    7f10:	ldrb.w	r3, [r4, #1085]	; 0x43d
    7f14:	adds	r3, #9
    7f16:	uxtb	r3, r3
}
    7f18:	lsls	r0, r3
    7f1a:	pop	{r4, pc}

00007f1c <exFatHashName(char const*, unsigned int, unsigned short)>:
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    7f1c:	cbz	r1, 7f52 <exFatHashName(char const*, unsigned int, unsigned short)+0x36>
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
    7f1e:	push	{r4}
    7f20:	add	r1, r0
    7f22:	lsls	r3, r2, #15
    7f24:	orr.w	r3, r3, r2, lsr #1
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    7f28:	ldrb.w	r2, [r0], #1
    if ('a' <= c && c <= 'z') {
    7f2c:	sub.w	r4, r2, #97	; 0x61
    7f30:	cmp	r4, #25
      c -= 'a' - 'A';
    7f32:	itt	ls
    7f34:	subls	r2, #32
    7f36:	uxtbls	r2, r2
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    7f38:	uxtah	r2, r2, r3
    7f3c:	uxth	r2, r2
    7f3e:	lsls	r3, r2, #15
    7f40:	orr.w	r2, r3, r2, lsr #1
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    7f44:	cmp	r1, r0
    7f46:	uxth	r2, r2
    7f48:	bne.n	7f22 <exFatHashName(char const*, unsigned int, unsigned short)+0x6>
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    hash = ((hash << 15) | (hash >> 1));
  }
  return hash;
}
    7f4a:	mov	r0, r2
    7f4c:	ldr.w	r4, [sp], #4
    7f50:	bx	lr
    7f52:	mov	r0, r2
    7f54:	bx	lr
    7f56:	nop

00007f58 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>:
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    7f58:	cbz	r3, 7fac <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x54>
  }
  return hash;
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
    7f5a:	push	{r4, r5, r6}
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    7f5c:	ldrh	r4, [r0, #2]
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    7f5e:	cmp	r4, #126	; 0x7e
    7f60:	bhi.n	7fa0 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
    7f62:	add	r3, r2
    7f64:	adds	r5, r1, r3
    7f66:	add	r2, r1
    7f68:	adds	r0, #2
    7f6a:	ldrb.w	r3, [r2], #1
    7f6e:	uxtb	r4, r4
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    7f70:	sub.w	r1, r3, #97	; 0x61
    7f74:	cmp	r1, #25
    7f76:	sub.w	r1, r4, #97	; 0x61
    7f7a:	ite	ls
    7f7c:	movls	r6, #32
    7f7e:	movhi	r6, #0
    7f80:	cmp	r1, #25
    7f82:	ite	ls
    7f84:	movls	r1, #32
    7f86:	movhi	r1, #0
    7f88:	subs	r3, r3, r6
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    7f8a:	subs	r4, r4, r1
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    7f8c:	uxtb	r3, r3
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    7f8e:	uxtb	r4, r4
    7f90:	cmp	r4, r3
    7f92:	bne.n	7fa0 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    7f94:	cmp	r2, r5
    7f96:	beq.n	7fa6 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4e>
    7f98:	ldrh.w	r4, [r0, #2]!
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    7f9c:	cmp	r4, #126	; 0x7e
    7f9e:	bls.n	7f6a <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x12>
      return false;
    7fa0:	movs	r0, #0
    }
  }
  return true;
}
    7fa2:	pop	{r4, r5, r6}
    7fa4:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    7fa6:	movs	r0, #1
}
    7fa8:	pop	{r4, r5, r6}
    7faa:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    7fac:	movs	r0, #1
}
    7fae:	bx	lr

00007fb0 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    7fb0:	ldr	r1, [r0, #24]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    7fb2:	push	{r3, r4, r5, r6, r7, lr}
    7fb4:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    7fb6:	ldr	r0, [r0, #32]
    7fb8:	cbz	r1, 7fbc <ExFatFile::addCluster()+0xc>
    7fba:	adds	r1, #1
    7fbc:	movs	r2, #1
    7fbe:	bl	7ad4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    7fc2:	cmp	r0, #1
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    7fc4:	mov	r6, r0
  if (find < 2) {
    7fc6:	bls.n	8028 <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    7fc8:	movs	r3, #1
    7fca:	mov	r1, r0
    7fcc:	mov	r2, r3
    7fce:	ldr	r0, [r4, #32]
    7fd0:	bl	7c68 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    7fd4:	mov	r7, r0
    7fd6:	cbz	r0, 8028 <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    7fd8:	ldr	r0, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    7fda:	ldrb.w	r3, [r4, #51]	; 0x33
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    7fde:	cbz	r0, 802e <ExFatFile::addCluster()+0x7e>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    7fe0:	lsls	r2, r3, #25
    7fe2:	bpl.n	800c <ExFatFile::addCluster()+0x5c>
    if (find == (m_curCluster + 1)) {
    7fe4:	adds	r2, r0, #1
    7fe6:	cmp	r6, r2
    7fe8:	beq.n	8036 <ExFatFile::addCluster()+0x86>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    7fea:	bic.w	r2, r3, #64	; 0x40
    7fee:	strb.w	r2, [r4, #51]	; 0x33

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    7ff2:	ldr	r3, [r4, #28]
    7ff4:	b.n	8002 <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    7ff6:	ldr	r0, [r4, #32]
    7ff8:	bl	7dec <ExFatPartition::fatPut(unsigned long, unsigned long)>
    7ffc:	cbz	r0, 8028 <ExFatFile::addCluster()+0x78>
    7ffe:	ldr	r0, [r4, #24]
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    8000:	mov	r3, r5
      if (!m_vol->fatPut(c, c + 1)) {
    8002:	adds	r5, r3, #1
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    8004:	cmp	r3, r0
      if (!m_vol->fatPut(c, c + 1)) {
    8006:	mov	r1, r3
    8008:	mov	r2, r5
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    800a:	bcc.n	7ff6 <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    800c:	mov.w	r2, #4294967295
    8010:	mov	r1, r6
    8012:	ldr	r0, [r4, #32]
    8014:	bl	7dec <ExFatPartition::fatPut(unsigned long, unsigned long)>
    8018:	cbz	r0, 8028 <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    801a:	ldr	r1, [r4, #24]
    801c:	cbz	r1, 8036 <ExFatFile::addCluster()+0x86>
    if (!m_vol->fatPut(m_curCluster, find)) {
    801e:	mov	r2, r6
    8020:	ldr	r0, [r4, #32]
    8022:	bl	7dec <ExFatPartition::fatPut(unsigned long, unsigned long)>
    8026:	cbnz	r0, 8036 <ExFatFile::addCluster()+0x86>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    8028:	movs	r7, #0
}
    802a:	mov	r0, r7
    802c:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    802e:	orr.w	r3, r3, #64	; 0x40
    8032:	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    8036:	str	r6, [r4, #24]
  return true;

 fail:
  return false;
}
    8038:	mov	r0, r7
    803a:	pop	{r3, r4, r5, r6, r7, pc}

0000803c <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    803c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirPos_t pos = m_dirPos;
    8040:	add.w	r3, r0, #36	; 0x24

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    8044:	mov	r5, r0
  DirPos_t pos = m_dirPos;
    8046:	ldmia.w	r3, {r0, r1, r2}

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    804a:	sub	sp, #20
    804c:	ldrb.w	r3, [r5, #51]	; 0x33
  DirPos_t pos = m_dirPos;
    8050:	add	r6, sp, #4
    8052:	stmia.w	r6, {r0, r1, r2}
  uint8_t* cache;
  if (!isWritable()) {
    8056:	lsls	r2, r3, #30
    8058:	bpl.n	8092 <ExFatFile::remove()+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    805a:	ldr	r1, [r5, #28]
    805c:	cbnz	r1, 809a <ExFatFile::remove()+0x5e>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    805e:	movs	r4, #0
  for (uint8_t i = 0; i <= m_setCount; i++) {
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    8060:	movs	r2, #1
    8062:	mov	r1, r6
    8064:	ldr	r0, [r5, #32]
    8066:	bl	7d4c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    806a:	adds	r4, #1
    806c:	uxtb	r4, r4
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
    806e:	cbz	r0, 8092 <ExFatFile::remove()+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    8070:	ldrb	r3, [r0, #0]
    8072:	and.w	r3, r3, #127	; 0x7f
    8076:	strb	r3, [r0, #0]
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    8078:	ldrb.w	r3, [r5, #48]	; 0x30
    807c:	cmp	r3, r4
    807e:	bcc.n	80e4 <ExFatFile::remove()+0xa8>
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
    8080:	cmp	r4, #0
    8082:	beq.n	8060 <ExFatFile::remove()+0x24>
    8084:	movs	r2, #32
    8086:	mov	r1, r6
    8088:	ldr	r0, [r5, #32]
    808a:	bl	7d80 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    808e:	cmp	r0, #1
    8090:	beq.n	8060 <ExFatFile::remove()+0x24>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    8092:	movs	r0, #0
}
    8094:	add	sp, #20
    8096:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    809a:	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    809c:	ldr	r0, [r5, #32]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    809e:	bpl.n	80da <ExFatFile::remove()+0x9e>
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    80a0:	ldrd	r2, r3, [r5, #8]
    80a4:	ldrb.w	r4, [r0, #1085]	; 0x43d
    80a8:	adds	r4, #9
    80aa:	uxtb	r4, r4
    80ac:	adds.w	r8, r2, #4294967295
    80b0:	adc.w	r9, r3, #4294967295
    80b4:	rsb	r7, r4, #32
    80b8:	lsl.w	r7, r9, r7
    80bc:	lsr.w	r2, r8, r4
    80c0:	sub.w	r3, r4, #32
    80c4:	lsr.w	r3, r9, r3
    80c8:	orrs	r2, r7
    80ca:	orrs	r2, r3
    80cc:	adds	r2, #1
    80ce:	movs	r3, #0
    80d0:	bl	7c68 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    80d4:	cmp	r0, #0
    80d6:	bne.n	805e <ExFatFile::remove()+0x22>
    80d8:	b.n	8092 <ExFatFile::remove()+0x56>
        DBG_FAIL_MACRO;
        goto fail;
      }
    } else {
      if (!m_vol->freeChain(m_firstCluster)) {
    80da:	bl	7e10 <ExFatPartition::freeChain(unsigned long)>
    80de:	cmp	r0, #0
    80e0:	bne.n	805e <ExFatFile::remove()+0x22>
    80e2:	b.n	8092 <ExFatFile::remove()+0x56>
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  return m_vol->cacheSync();
    80e4:	ldr	r4, [r5, #32]
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    80e6:	movs	r3, #0
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    80e8:	mov	r0, r4
    80ea:	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    80ee:	strb.w	r3, [r5, #51]	; 0x33
    80f2:	bl	7ac4 <FsCache::sync()>
    80f6:	cmp	r0, #0
    80f8:	beq.n	8092 <ExFatFile::remove()+0x56>
    80fa:	add.w	r0, r4, #524	; 0x20c
    80fe:	bl	7ac4 <FsCache::sync()>
    8102:	cmp	r0, #0
    8104:	beq.n	8092 <ExFatFile::remove()+0x56>
    8106:	ldr.w	r0, [r4, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    810a:	ldr	r3, [r0, #0]
    810c:	ldr	r3, [r3, #20]
    810e:	blx	r3
    8110:	b.n	8094 <ExFatFile::remove()+0x58>
    8112:	nop

00008114 <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    8114:	ldrb.w	r3, [r0, #49]	; 0x31
    8118:	lsls	r1, r3, #27
    811a:	bmi.n	8120 <ExFatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    811c:	movs	r0, #0
}
    811e:	bx	lr

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    8120:	push	{r4, lr}
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    8122:	movs	r2, #0
    8124:	sub	sp, #32
    8126:	movs	r3, #0
    8128:	mov	r4, r0
    812a:	bl	7210 <ExFatFile::seekSet(unsigned long long)>
    812e:	b.n	813e <ExFatFile::rmdir()+0x2a>
  while (1) {
    n = read(dir, 32);
    if (n == 0) {
      break;
    }
    if (n != 32 || dir[0] & 0X80) {
    8130:	cmp	r0, #32
    8132:	bne.n	8168 <ExFatFile::rmdir()+0x54>
    8134:	ldrb.w	r3, [sp]
    8138:	lsls	r2, r3, #24
    813a:	bmi.n	8168 <ExFatFile::rmdir()+0x54>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (dir[0] == 0) {
    813c:	cbz	r3, 814c <ExFatFile::rmdir()+0x38>
  }
  rewind();

  // make sure directory is empty
  while (1) {
    n = read(dir, 32);
    813e:	movs	r2, #32
    8140:	mov	r1, sp
    8142:	mov	r0, r4
    8144:	bl	7040 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    8148:	cmp	r0, #0
    814a:	bne.n	8130 <ExFatFile::rmdir()+0x1c>
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    814c:	ldrb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    8150:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
    8152:	orr.w	r3, r3, #2
    8156:	strb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    815a:	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    815e:	mov	r0, r4
    8160:	bl	803c <ExFatFile::remove()>

fail:
  return false;
}
    8164:	add	sp, #32
    8166:	pop	{r4, pc}
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    8168:	movs	r0, #0
}
    816a:	add	sp, #32
    816c:	pop	{r4, pc}
    816e:	nop

00008170 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    8170:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    8174:	add.w	fp, r0, #36	; 0x24
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    8178:	mov	r6, r0
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    817a:	ldmia.w	fp, {r0, r1, r2}
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    817e:	sub	sp, #28
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    8180:	add.w	r8, sp, #12
    8184:	stmia.w	r8, {r0, r1, r2}
    8188:	movs	r7, #0
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;
    818a:	mov	sl, r7
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    818c:	mov	r4, r7
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    818e:	movs	r2, #0
    8190:	mov	r1, r8
    8192:	ldr	r0, [r6, #32]
    8194:	bl	7d4c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    8198:	uxtb.w	r9, r7
    if (!cache) {
    819c:	mov	r5, r0
    819e:	cbz	r0, 81ae <ExFatFile::syncDir()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    81a0:	ldrb	r2, [r0, #0]
    81a2:	cmp	r2, #192	; 0xc0
    81a4:	beq.n	824c <ExFatFile::syncDir()+0xdc>
    81a6:	cmp	r2, #193	; 0xc1
    81a8:	beq.n	81c2 <ExFatFile::syncDir()+0x52>
    81aa:	cmp	r2, #133	; 0x85
    81ac:	beq.n	8202 <ExFatFile::syncDir()+0x92>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    81ae:	ldrb.w	r3, [r6, #50]	; 0x32
    81b2:	orr.w	r3, r3, #1
    81b6:	strb.w	r3, [r6, #50]	; 0x32
  return false;
    81ba:	movs	r0, #0
}
    81bc:	add	sp, #28
    81be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    81c2:	mov	r0, r2
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    81c4:	movs	r1, #0
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    81c6:	ldrb	r2, [r5, r1]
    81c8:	lsls	r3, r4, #15
    81ca:	orr.w	r4, r3, r4, lsr #1
    81ce:	uxtah	r4, r2, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    81d2:	cmp	r1, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    81d4:	uxth	r4, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    81d6:	add.w	r1, r1, #1
    81da:	beq.n	81f8 <ExFatFile::syncDir()+0x88>
    81dc:	cmp	r1, #31
    81de:	bls.n	81c6 <ExFatFile::syncDir()+0x56>
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    if (i == setCount) break;
    81e0:	cmp	sl, r9
    81e2:	beq.n	8288 <ExFatFile::syncDir()+0x118>
    if (m_vol->dirSeek(&pos, 32) != 1) {
    81e4:	movs	r2, #32
    81e6:	mov	r1, r8
    81e8:	ldr	r0, [r6, #32]
    81ea:	bl	7d80 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    81ee:	cmp	r0, #1
    81f0:	add.w	r7, r7, #1
    81f4:	beq.n	818e <ExFatFile::syncDir()+0x1e>
    81f6:	b.n	81ae <ExFatFile::syncDir()+0x3e>
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    81f8:	cmp	r0, #133	; 0x85
    81fa:	ite	eq
    81fc:	moveq	r1, #4
    81fe:	movne	r1, #2
    8200:	b.n	81c6 <ExFatFile::syncDir()+0x56>
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    8202:	ldr	r3, [pc, #192]	; (82c4 <ExFatFile::syncDir()+0x154>)
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    8204:	ldrb.w	r1, [r6, #49]	; 0x31
    8208:	ldr	r3, [r3, #0]
      goto fail;
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
    820a:	ldrb.w	sl, [r0, #1]
    820e:	and.w	r1, r1, #55	; 0x37
    8212:	strh	r1, [r0, #4]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    8214:	cmp	r3, #0
    8216:	beq.n	81c2 <ExFatFile::syncDir()+0x52>
          m_vol->dataCacheDirty();
    8218:	ldr	r1, [r6, #32]
    invalidate();
    return m_cacheBuffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    821a:	ldrb.w	r2, [r1, #524]	; 0x20c
    821e:	orr.w	r2, r2, #1
    8222:	strb.w	r2, [r1, #524]	; 0x20c
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    8226:	add	r0, sp, #8
    8228:	add.w	r2, sp, #7
    822c:	add.w	r1, sp, #10
    8230:	blx	r3
          df->modifyTimeMs = ms10;
          setLe16(df->modifyTime, time);
    8232:	ldrh.w	r2, [sp, #10]
          setLe16(df->modifyDate, date);
    8236:	ldrh.w	r3, [sp, #8]
        if (FsDateTime::callback) {
          m_vol->dataCacheDirty();
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
    823a:	ldrb.w	r1, [sp, #7]
    823e:	strb	r1, [r5, #21]
    8240:	strh	r2, [r5, #12]
    8242:	strh	r2, [r5, #16]
    8244:	strh	r3, [r5, #14]
    8246:	strh	r3, [r5, #18]
    8248:	ldrb	r0, [r5, #0]
    824a:	b.n	81c4 <ExFatFile::syncDir()+0x54>
        }
        break;

      case EXFAT_TYPE_STREAM:
        ds = reinterpret_cast<DirStream_t*>(cache);
        if (isContiguous()) {
    824c:	ldrb.w	r3, [r6, #51]	; 0x33
    8250:	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    8254:	ldrb	r3, [r0, #1]
    8256:	ite	ne
    8258:	orrne.w	r3, r3, #2
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    825c:	biceq.w	r3, r3, #2
    8260:	strb	r3, [r0, #1]
        }
        setLe64(ds->validLength, m_validLength);
    8262:	ldrd	r2, r3, [r6, #16]

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    8266:	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
    826a:	ldrd	r2, r3, [r6, #8]
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
    826e:	ldr	r1, [r6, #28]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    8270:	str	r1, [r0, #20]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    8272:	strd	r2, r3, [r0, #24]
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    8276:	ldr	r2, [r6, #32]
    8278:	ldrb.w	r3, [r2, #524]	; 0x20c
    827c:	orr.w	r3, r3, #1
    8280:	strb.w	r3, [r2, #524]	; 0x20c
    8284:	ldrb	r0, [r0, #0]
    8286:	b.n	81c4 <ExFatFile::syncDir()+0x54>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  df = reinterpret_cast<DirFile_t *>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    8288:	mov	r1, fp
    828a:	movs	r2, #1
    828c:	ldr	r0, [r6, #32]
    828e:	bl	7d4c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    8292:	cmp	r0, #0
    8294:	beq.n	81ae <ExFatFile::syncDir()+0x3e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    8296:	ldr	r5, [r6, #32]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    8298:	strh	r4, [r0, #2]
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    829a:	mov	r0, r5
    829c:	bl	7ac4 <FsCache::sync()>
    82a0:	cmp	r0, #0
    82a2:	beq.n	81ae <ExFatFile::syncDir()+0x3e>
    82a4:	add.w	r0, r5, #524	; 0x20c
    82a8:	bl	7ac4 <FsCache::sync()>
    82ac:	cmp	r0, #0
    82ae:	beq.w	81ae <ExFatFile::syncDir()+0x3e>
    82b2:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    82b6:	ldr	r3, [r0, #0]
    82b8:	ldr	r3, [r3, #20]
    82ba:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    82bc:	cmp	r0, #0
    82be:	beq.w	81ae <ExFatFile::syncDir()+0x3e>
    82c2:	b.n	81bc <ExFatFile::syncDir()+0x4c>
    82c4:	.word	0x1fff1f34

000082c8 <ExFatFile::sync()>:
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    82c8:	ldrb.w	r2, [r0, #49]	; 0x31
    82cc:	cbz	r2, 82f4 <ExFatFile::sync()+0x2c>

fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
    82ce:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    82d0:	ldrb.w	r2, [r0, #51]	; 0x33
    82d4:	lsls	r1, r2, #24
    82d6:	bmi.n	82f8 <ExFatFile::sync()+0x30>
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
  }
  if (!m_vol->cacheSync()) {
    82d8:	ldr	r5, [r0, #32]
    82da:	mov	r4, r0
    82dc:	mov	r0, r5
    82de:	bl	7ac4 <FsCache::sync()>
    82e2:	cbnz	r0, 8308 <ExFatFile::sync()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    82e4:	ldrb.w	r3, [r4, #50]	; 0x32
    82e8:	orr.w	r3, r3, #1
    82ec:	strb.w	r3, [r4, #50]	; 0x32
  return false;
    82f0:	movs	r0, #0
}
    82f2:	pop	{r3, r4, r5, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    82f4:	movs	r0, #1
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    82f6:	bx	lr
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    82f8:	and.w	r2, r2, #127	; 0x7f
    82fc:	strb.w	r2, [r0, #51]	; 0x33
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    8300:	ldmia.w	sp!, {r3, r4, r5, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    8304:	b.w	8170 <ExFatFile::syncDir()>
    8308:	add.w	r0, r5, #524	; 0x20c
    830c:	bl	7ac4 <FsCache::sync()>
    8310:	cmp	r0, #0
    8312:	beq.n	82e4 <ExFatFile::sync()+0x1c>
    8314:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    8318:	ldr	r3, [r0, #0]
    831a:	ldr	r3, [r3, #20]
    831c:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    831e:	cmp	r0, #0
    8320:	beq.n	82e4 <ExFatFile::sync()+0x1c>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    8322:	movs	r0, #1
    8324:	pop	{r3, r4, r5, pc}
    8326:	nop

00008328 <ExFatFile::addDirCluster()>:

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    8328:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    832c:	ldrb.w	r3, [r0, #49]	; 0x31
    8330:	lsls	r1, r3, #25

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    8332:	mov	r4, r0
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    8334:	bmi.n	83fe <ExFatFile::addDirCluster()+0xd6>
    8336:	ldr	r0, [r0, #8]
    8338:	ldr	r3, [r4, #32]
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    833a:	ldr.w	r3, [r3, #1076]	; 0x434
    833e:	add	r0, r3
    8340:	cmp.w	r0, #67108864	; 0x4000000
    8344:	bcc.n	834c <ExFatFile::addDirCluster()+0x24>
  }
  return sync();

 fail:
  return false;
}
    8346:	movs	r0, #0
    8348:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    834c:	mov	r0, r4
    834e:	bl	7fb0 <ExFatFile::addCluster()>
    8352:	cmp	r0, #0
    8354:	beq.n	8346 <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
    8356:	ldr	r6, [r4, #32]
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    8358:	ldrb.w	r3, [r6, #524]	; 0x20c
    835c:	lsls	r2, r3, #31

  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
    835e:	add.w	r5, r6, #524	; 0x20c
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    8362:	bmi.n	8406 <ExFatFile::addDirCluster()+0xde>
      return nullptr;
    }
    invalidate();
    8364:	mov	r0, r5
    return m_cacheBuffer;
    8366:	add.w	r6, r6, #536	; 0x218
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    836a:	bl	79f8 <FsCache::invalidate()>
  if (!cache) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
    836e:	mov.w	r2, #512	; 0x200
    8372:	movs	r1, #0
    8374:	mov	r0, r6
    8376:	bl	f32c <memset>
  sector = m_vol->clusterStartSector(m_curCluster);
    837a:	ldr	r2, [r4, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    837c:	ldr	r3, [r4, #24]
    837e:	ldrb.w	r0, [r2, #1085]	; 0x43d
    8382:	ldr.w	r1, [r2, #1060]	; 0x424
    8386:	sub.w	r8, r3, #2
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    838a:	movs	r7, #1
    838c:	lsl.w	r8, r8, r0
    8390:	lsls.w	r3, r7, r0
    8394:	add	r8, r1
    8396:	it	ne
    8398:	movne	r5, #0
    839a:	beq.n	83c0 <ExFatFile::addDirCluster()+0x98>
    839c:	ldr.w	r0, [r2, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    83a0:	ldr	r3, [r0, #0]
    83a2:	add.w	r1, r8, r5
    83a6:	ldr	r3, [r3, #24]
    83a8:	mov	r2, r6
    83aa:	blx	r3
    83ac:	adds	r5, #1
    if (!m_vol->writeSector(sector + i, cache)) {
    83ae:	cmp	r0, #0
    83b0:	beq.n	8346 <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
  sector = m_vol->clusterStartSector(m_curCluster);
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    83b2:	ldr	r2, [r4, #32]
    83b4:	ldrb.w	r3, [r2, #1085]	; 0x43d
    83b8:	lsl.w	r3, r7, r3
    83bc:	cmp	r3, r5
    83be:	bhi.n	839c <ExFatFile::addDirCluster()+0x74>
    if (!m_vol->writeSector(sector + i, cache)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    83c0:	ldrb.w	r3, [r4, #49]	; 0x31
    83c4:	lsls	r3, r3, #25
    83c6:	bmi.n	83f4 <ExFatFile::addDirCluster()+0xcc>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    83c8:	ldrb.w	r3, [r4, #51]	; 0x33
    83cc:	orn	r3, r3, #127	; 0x7f
    83d0:	strb.w	r3, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    83d4:	ldr.w	r6, [r2, #1076]	; 0x434
    83d8:	ldrd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    83dc:	ldrd	r0, r1, [r4, #16]
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    83e0:	adds	r2, r2, r6
    83e2:	mov.w	r7, #0
    83e6:	adcs	r3, r7
    m_validLength += m_vol->bytesPerCluster();
    83e8:	adds	r0, r0, r6
    83ea:	adcs	r1, r7
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    83ec:	strd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    83f0:	strd	r0, r1, [r4, #16]
  }
  return sync();
    83f4:	mov	r0, r4

 fail:
  return false;
}
    83f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    m_validLength += m_vol->bytesPerCluster();
  }
  return sync();
    83fa:	b.w	82c8 <ExFatFile::sync()>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    83fe:	ldr	r0, [r0, #32]
    8400:	bl	7f04 <ExFatPartition::rootLength()>
    8404:	b.n	8338 <ExFatFile::addDirCluster()+0x10>
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    8406:	mov	r0, r5
    8408:	bl	7ac4 <FsCache::sync()>
    840c:	cmp	r0, #0
    840e:	bne.n	8364 <ExFatFile::addDirCluster()+0x3c>
    8410:	b.n	8346 <ExFatFile::addDirCluster()+0x1e>
    8412:	nop

00008414 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
  if (!parent->isDir()) {
    8414:	ldrb.w	r3, [r1, #49]	; 0x31
    8418:	tst.w	r3, #80	; 0x50
    841c:	bne.n	8422 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    841e:	movs	r0, #0
    8420:	bx	lr

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    8422:	push	{r4, r5, lr}
    8424:	sub	sp, #12
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    8426:	movw	r5, #2562	; 0xa02
    842a:	ldrb	r3, [r2, #0]
    842c:	ldr	r2, [r2, #4]
    842e:	str	r5, [sp, #0]
    8430:	mov	r4, r0
    8432:	bl	7310 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    8436:	cbnz	r0, 843e <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x2a>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    8438:	movs	r0, #0
    843a:	add	sp, #12
    843c:	pop	{r4, r5, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory

  m_attributes = FILE_ATTR_SUBDIR;
    843e:	movs	r3, #16
    8440:	strb.w	r3, [r4, #49]	; 0x31

  // allocate and zero first cluster
  if (!addDirCluster()) {
    8444:	mov	r0, r4
    8446:	bl	8328 <ExFatFile::addDirCluster()>
    844a:	cmp	r0, #0
    844c:	beq.n	8438 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x24>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    844e:	ldr	r3, [r4, #24]
    8450:	str	r3, [r4, #28]
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    8452:	movs	r2, #0
    8454:	movs	r3, #0
    8456:	mov	r0, r4
    8458:	bl	7210 <ExFatFile::seekSet(unsigned long long)>

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    845c:	movs	r3, #193	; 0xc1
  return sync();
    845e:	mov	r0, r4
  }
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    8460:	strb.w	r3, [r4, #51]	; 0x33
  return sync();

fail:
  return false;
}
    8464:	add	sp, #12
    8466:	ldmia.w	sp!, {r4, r5, lr}
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();
    846a:	b.w	82c8 <ExFatFile::sync()>
    846e:	nop

00008470 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    8470:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8474:	mov	r6, r0
    8476:	sub	sp, #84	; 0x54
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    8478:	ldrb.w	r5, [r6, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    847c:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    847e:	movs	r0, #0
    8480:	strb.w	r0, [sp, #73]	; 0x49
    8484:	strb.w	r0, [sp, #74]	; 0x4a
    8488:	strb.w	r0, [sp, #75]	; 0x4b
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    848c:	cbnz	r5, 849c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    848e:	mov	r9, r3
    8490:	ldrb.w	r3, [r1, #49]	; 0x31
    8494:	tst.w	r3, #80	; 0x50
    8498:	mov	r4, r1
    849a:	bne.n	84a4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x34>
    close();
  }
  return mkdir(parent, &fname);

fail:
  return false;
    849c:	movs	r0, #0
}
    849e:	add	sp, #84	; 0x54
    84a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    84a4:	ldrb	r3, [r2, #0]
    84a6:	cmp	r3, #47	; 0x2f
    84a8:	mov	r1, r2
    84aa:	beq.n	851a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xaa>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    84ac:	mov.w	r8, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    84b0:	add	r3, sp, #12
    84b2:	add	r2, sp, #16
    84b4:	mov	r0, r6
    84b6:	bl	6ecc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    84ba:	cmp	r0, #0
    84bc:	beq.n	849c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    84be:	ldr	r3, [sp, #12]
    84c0:	ldrb	r3, [r3, #0]
    84c2:	cmp	r3, #0
    84c4:	beq.n	8536 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc6>
    84c6:	ldrb.w	r3, [sp, #16]
    84ca:	ldr	r2, [sp, #20]
    84cc:	str.w	r8, [sp]
    84d0:	mov	r1, r4
    84d2:	mov	r0, r6
    84d4:	bl	7310 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    84d8:	cbnz	r0, 84ee <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x7e>
      if (!pFlag || !mkdir(parent, &fname)) {
    84da:	cmp.w	r9, #0
    84de:	beq.n	849c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    84e0:	mov	r1, r4
    84e2:	add	r2, sp, #16
    84e4:	mov	r0, r6
    84e6:	bl	8414 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    84ea:	cmp	r0, #0
    84ec:	beq.n	849c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    84ee:	mov	r4, r6
    84f0:	add	r7, sp, #24
    84f2:	add.w	lr, r6, #48	; 0x30
    84f6:	ldr	r0, [r4, #0]
    84f8:	ldr	r1, [r4, #4]
    84fa:	ldr	r2, [r4, #8]
    84fc:	ldr	r3, [r4, #12]
    84fe:	mov	r5, r7
    8500:	stmia	r5!, {r0, r1, r2, r3}
    8502:	adds	r4, #16
    8504:	cmp	r4, lr
    8506:	mov	r7, r5
    8508:	bne.n	84f6 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x86>
    850a:	ldr	r0, [r4, #0]
    850c:	str	r0, [r5, #0]
    parent = &tmpDir;
    close();
    850e:	mov	r0, r6
    8510:	bl	6de8 <ExFatFile::close()>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    8514:	add	r4, sp, #24
    8516:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    8518:	b.n	84b0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    851a:	adds	r1, #1
    851c:	str	r1, [sp, #12]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    851e:	ldrb	r3, [r1, #0]
    8520:	cmp	r3, #47	; 0x2f
    8522:	beq.n	851a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xaa>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    8524:	ldr	r1, [r4, #32]
    8526:	add	r0, sp, #24
    8528:	bl	6ea4 <ExFatFile::openRoot(ExFatVolume*)>
    852c:	cmp	r0, #0
    852e:	beq.n	849c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    8530:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    8532:	add	r4, sp, #24
    8534:	b.n	84ac <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3c>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    8536:	add	r2, sp, #16
    8538:	mov	r1, r4
    853a:	mov	r0, r6
    853c:	bl	8414 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>

fail:
  return false;
}
    8540:	add	sp, #84	; 0x54
    8542:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8546:	nop

00008548 <ExFatFile::rename(ExFatFile*, char const*)>:
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    8548:	push	{r4, r5, r6, r7, lr}
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    854a:	ldrb.w	r4, [r0, #49]	; 0x31
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    854e:	sub	sp, #116	; 0x74
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    8550:	movs	r3, #0
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    8552:	tst.w	r4, #24
    8556:	strb.w	r3, [sp, #49]	; 0x31
    855a:	strb.w	r3, [sp, #50]	; 0x32
    855e:	strb.w	r3, [sp, #51]	; 0x33
    8562:	strb.w	r3, [sp, #105]	; 0x69
    8566:	strb.w	r3, [sp, #106]	; 0x6a
    856a:	strb.w	r3, [sp, #107]	; 0x6b
    856e:	beq.n	8578 <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    8570:	ldr	r3, [r1, #32]
    8572:	ldr	r4, [r0, #32]
    8574:	cmp	r4, r3
    8576:	beq.n	857e <ExFatFile::rename(ExFatFile*, char const*)+0x36>
  oldFile.m_flags = FILE_FLAG_WRITE;
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

fail:
  return false;
    8578:	movs	r0, #0
}
    857a:	add	sp, #116	; 0x74
    857c:	pop	{r4, r5, r6, r7, pc}
    857e:	mov	r4, r0
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    8580:	movw	r3, #2561	; 0xa01
    8584:	mov	r0, sp
    8586:	bl	76e4 <ExFatFile::open(ExFatFile*, char const*, int)>
    858a:	cmp	r0, #0
    858c:	beq.n	8578 <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
    858e:	add	r7, sp, #56	; 0x38
    8590:	mov	r5, r4
    8592:	add.w	lr, r4, #48	; 0x30
    8596:	ldr	r0, [r5, #0]
    8598:	ldr	r1, [r5, #4]
    859a:	ldr	r2, [r5, #8]
    859c:	ldr	r3, [r5, #12]
    859e:	mov	r6, r7
    85a0:	stmia	r6!, {r0, r1, r2, r3}
    85a2:	adds	r5, #16
    85a4:	cmp	r5, lr
    85a6:	mov	r7, r6
    85a8:	bne.n	8596 <ExFatFile::rename(ExFatFile*, char const*)+0x4e>
    85aa:	ldr	r0, [r5, #0]
    85ac:	str	r0, [r6, #0]
  m_dirPos = file.m_dirPos;
    85ae:	add	r3, sp, #36	; 0x24
    85b0:	ldmia.w	r3, {r0, r1, r2}
    85b4:	add.w	r3, r4, #36	; 0x24
    85b8:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    85bc:	ldrb.w	r3, [r4, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
    85c0:	ldrb.w	r2, [sp, #48]	; 0x30
    85c4:	strb.w	r2, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    85c8:	orn	r3, r3, #127	; 0x7f
    85cc:	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    85d0:	mov	r0, r4
    85d2:	bl	82c8 <ExFatFile::sync()>
    85d6:	cmp	r0, #0
    85d8:	beq.n	8578 <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    85da:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    85dc:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    85de:	movs	r3, #8
  return oldFile.remove();
    85e0:	add	r0, sp, #56	; 0x38
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    85e2:	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    85e4:	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    85e8:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    85ec:	bl	803c <ExFatFile::remove()>
    85f0:	b.n	857a <ExFatFile::rename(ExFatFile*, char const*)+0x32>
    85f2:	nop

000085f4 <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    85f4:	ldrb.w	r3, [r0, #51]	; 0x33
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    85f8:	lsls	r2, r3, #30
    85fa:	bpl.n	862e <ExFatFile::truncate()+0x3a>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    85fc:	push	{r4, r5, r6, r7, lr}
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    85fe:	ldr	r5, [r0, #28]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    8600:	sub	sp, #12
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    8602:	cbz	r5, 8628 <ExFatFile::truncate()+0x34>
      return true;
  }
  if (isContiguous()) {
    8604:	and.w	r3, r3, #64	; 0x40
    8608:	mov	r4, r0
    860a:	and.w	r0, r3, #255	; 0xff
    860e:	cbnz	r3, 8632 <ExFatFile::truncate()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
    8610:	ldr	r1, [r4, #24]
    8612:	cmp	r1, #0
    8614:	bne.n	869a <ExFatFile::truncate()+0xa6>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else {
      toFree = m_firstCluster;
    8616:	str	r5, [sp, #4]
      m_firstCluster = 0;
    8618:	str	r1, [r4, #28]
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
    861a:	mov	r1, r5
    861c:	ldr	r0, [r4, #32]
    861e:	bl	7e10 <ExFatPartition::freeChain(unsigned long)>
    8622:	cbnz	r0, 8672 <ExFatFile::truncate()+0x7e>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    8624:	movs	r0, #0
    8626:	b.n	862a <ExFatFile::truncate()+0x36>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    8628:	movs	r0, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    862a:	add	sp, #12
    862c:	pop	{r4, r5, r6, r7, pc}
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    862e:	movs	r0, #0
}
    8630:	bx	lr
    8632:	ldr	r0, [r4, #32]
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
    8634:	ldr	r1, [r4, #24]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    8636:	ldrb.w	r3, [r0, #1085]	; 0x43d
    863a:	ldrd	r6, r7, [r4, #8]
    863e:	adds	r3, #9
    8640:	uxtb	r3, r3
    8642:	adds.w	r6, r6, #4294967295
    8646:	rsb	lr, r3, #32
    864a:	adc.w	r7, r7, #4294967295
    864e:	lsr.w	r2, r6, r3
    8652:	lsl.w	lr, r7, lr
    8656:	subs	r3, #32
    8658:	orr.w	r2, r2, lr
    865c:	lsr.w	r3, r7, r3
    8660:	orrs	r2, r3
    8662:	adds	r2, #1
    if (m_curCluster) {
    8664:	cbz	r1, 8694 <ExFatFile::truncate()+0xa0>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    8666:	subs	r5, #1
    8668:	subs	r5, r5, r1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    866a:	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    866c:	add	r2, r5
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    866e:	str	r1, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    8670:	cbnz	r2, 86b6 <ExFatFile::truncate()+0xc2>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    8672:	ldrd	r0, r1, [r4]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    8676:	ldrb.w	r3, [r4, #51]	; 0x33
    867a:	orn	r3, r3, #127	; 0x7f
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    867e:	strd	r0, r1, [r4, #8]
  m_validLength = m_curPosition;
    8682:	strd	r0, r1, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    8686:	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    868a:	mov	r0, r4
    868c:	bl	82c8 <ExFatFile::sync()>

 fail:
  return false;
}
    8690:	add	sp, #12
    8692:	pop	{r4, r5, r6, r7, pc}
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
    8694:	str	r5, [sp, #4]
      m_firstCluster = 0;
    8696:	str	r1, [r4, #28]
    8698:	b.n	8670 <ExFatFile::truncate()+0x7c>
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    869a:	add	r2, sp, #8
    869c:	str.w	r0, [r2, #-4]!
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    86a0:	ldr	r0, [r4, #32]
    86a2:	bl	7dd8 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    86a6:	sxtb	r0, r0
      if (fg < 0) {
    86a8:	cmp	r0, #0
    86aa:	blt.n	8624 <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
    86ac:	bne.n	86c4 <ExFatFile::truncate()+0xd0>
      }
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
    86ae:	ldr	r5, [sp, #4]
    86b0:	cmp	r5, #0
    86b2:	beq.n	8672 <ExFatFile::truncate()+0x7e>
    86b4:	b.n	861a <ExFatFile::truncate()+0x26>
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    86b6:	movs	r3, #0
    86b8:	ldr	r1, [sp, #4]
    86ba:	bl	7c68 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    86be:	cmp	r0, #0
    86c0:	bne.n	8672 <ExFatFile::truncate()+0x7e>
    86c2:	b.n	8624 <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
        // current cluster is end of chain
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    86c4:	mov.w	r2, #4294967295
    86c8:	ldr	r1, [r4, #24]
    86ca:	ldr	r0, [r4, #32]
    86cc:	bl	7dec <ExFatPartition::fatPut(unsigned long, unsigned long)>
    86d0:	cmp	r0, #0
    86d2:	bne.n	86ae <ExFatFile::truncate()+0xba>
    86d4:	b.n	8624 <ExFatFile::truncate()+0x30>
    86d6:	nop

000086d8 <ExFatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    86d8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    86dc:	ldrb.w	r3, [r0, #51]	; 0x33
    86e0:	sub	sp, #20

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    86e2:	lsls	r4, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    86e4:	mov	r6, r0
    86e6:	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    86e8:	bmi.n	8700 <ExFatFile::write(void const*, unsigned int)+0x28>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    86ea:	ldrb.w	r3, [r6, #50]	; 0x32
    86ee:	orr.w	r3, r3, #1
    86f2:	strb.w	r3, [r6, #50]	; 0x32
  return -1;
    86f6:	mov.w	r0, #4294967295
}
    86fa:	add	sp, #20
    86fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    8700:	lsls	r2, r3, #28
    8702:	mov	sl, r1
    8704:	bmi.w	892c <ExFatFile::write(void const*, unsigned int)+0x254>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    8708:	ldr	r3, [sp, #4]
    870a:	cmp	r3, #0
    870c:	beq.w	8954 <ExFatFile::write(void const*, unsigned int)+0x27c>
    8710:	mov	r1, r6
    8712:	ldrd	r2, r3, [r1], #24
    8716:	ldr.w	r8, [sp, #4]
    871a:	str	r1, [sp, #12]
    871c:	mov	fp, r2
    clusterOffset = m_curPosition & m_vol->clusterMask();
    871e:	ldr	r0, [r6, #32]
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    8720:	ldr	r5, [r6, #24]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    8722:	ldr.w	r4, [r0, #1072]	; 0x430
    8726:	mov	r3, fp
    8728:	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    872a:	ubfx	r9, r4, #0, #9
    if (clusterOffset == 0) {
    872e:	cbnz	r4, 8784 <ExFatFile::write(void const*, unsigned int)+0xac>
      // start of new cluster
      if (m_curCluster != 0) {
    8730:	cmp	r5, #0
    8732:	beq.w	88b2 <ExFatFile::write(void const*, unsigned int)+0x1da>
        int fg;

        if (isContiguous()) {
    8736:	ldrb.w	r3, [r6, #51]	; 0x33
    873a:	lsls	r3, r3, #25
    873c:	bpl.w	88fa <ExFatFile::write(void const*, unsigned int)+0x222>
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    8740:	ldrd	r2, r3, [r6, #8]
    8744:	ldrb.w	r7, [r0, #1085]	; 0x43d
    8748:	adds	r7, #9
    874a:	uxtb	r7, r7
    874c:	adds.w	r2, r2, #4294967295
    8750:	adc.w	r3, r3, #4294967295
    8754:	rsb	lr, r7, #32
    8758:	lsl.w	lr, r3, lr
    875c:	lsr.w	r1, r2, r7
    8760:	subs	r7, #32
    8762:	lsr.w	r7, r3, r7
    8766:	orr.w	r1, r1, lr
    876a:	ldr	r3, [r6, #28]
    876c:	orrs	r1, r7
    876e:	add	r3, r1
    8770:	cmp	r5, r3
    8772:	bcc.w	88e0 <ExFatFile::write(void const*, unsigned int)+0x208>
            goto fail;
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
    8776:	mov	r0, r6
    8778:	bl	7fb0 <ExFatFile::addCluster()>
    877c:	cmp	r0, #0
    877e:	beq.n	86ea <ExFatFile::write(void const*, unsigned int)+0x12>
    8780:	ldr	r0, [r6, #32]
    8782:	ldr	r5, [r6, #24]
        }
      }
    }
    // sector for data write
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    8784:	ldr.w	r7, [r0, #1060]	; 0x424
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    8788:	ldrb.w	lr, [r0, #1085]	; 0x43d
    878c:	lsrs	r4, r4, #9
    878e:	subs	r5, #2
    8790:	adds	r1, r4, r7
    8792:	lsl.w	r5, r5, lr
    8796:	add	r1, r5

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    8798:	cmp.w	r9, #0
    879c:	bne.w	88a4 <ExFatFile::write(void const*, unsigned int)+0x1cc>
    87a0:	cmp.w	r8, #512	; 0x200
    87a4:	bcs.n	8856 <ExFatFile::write(void const*, unsigned int)+0x17e>
      // lesser of space and amount to write
      if (n > toWrite) {
        n = toWrite;
      }

      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    87a6:	ldrd	r2, r3, [r6, #16]
    87aa:	ldrd	r4, r5, [r6]
    87ae:	cmp.w	r8, #512	; 0x200
    87b2:	mov	r7, r8
    87b4:	it	cs
    87b6:	movcs.w	r7, #512	; 0x200
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    87ba:	cmp	r5, r3
    87bc:	it	eq
    87be:	cmpeq	r4, r2
    87c0:	ite	cc
    87c2:	movcc	r2, #1
    87c4:	movcs	r2, #3
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    87c6:	add.w	r0, r0, #524	; 0x20c
    87ca:	bl	7a04 <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    87ce:	cmp	r0, #0
    87d0:	beq.n	86ea <ExFatFile::write(void const*, unsigned int)+0x12>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    87d2:	add	r0, r9
    87d4:	mov	r2, r7
    87d6:	mov	r1, sl
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    87d8:	add	r9, r7
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    87da:	bl	c198 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    87de:	cmp.w	r9, #512	; 0x200
    87e2:	beq.w	890a <ExFatFile::write(void const*, unsigned int)+0x232>
    87e6:	mov	r0, r7
    87e8:	movs	r1, #0
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    87ea:	ldrd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    87ee:	ldrd	r4, r5, [r6, #16]
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    87f2:	adds.w	fp, r2, r0
    87f6:	adc.w	ip, r3, r1
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    87fa:	cmp	r5, ip
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    87fc:	mov	r2, fp
    87fe:	mov	r3, ip
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    8800:	it	eq
    8802:	cmpeq	r4, fp
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    8804:	add	sl, r7
    toWrite -= n;
    8806:	rsb	r8, r7, r8
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    880a:	strd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    880e:	bcs.n	8824 <ExFatFile::write(void const*, unsigned int)+0x14c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    8810:	ldrb.w	r1, [r6, #51]	; 0x33
      m_validLength = m_curPosition;
    8814:	mov	r4, ip
    8816:	mov	r3, fp
    8818:	strd	r3, r4, [r6, #16]
    }
    m_curPosition += n;
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
    881c:	orn	r1, r1, #127	; 0x7f
    8820:	strb.w	r1, [r6, #51]	; 0x33
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    8824:	cmp.w	r8, #0
    8828:	bne.w	871e <ExFatFile::write(void const*, unsigned int)+0x46>
    882c:	mov	r2, fp
    882e:	mov	r3, ip
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    8830:	ldrd	r0, r1, [r6, #8]
    8834:	cmp	r1, r3
    8836:	it	eq
    8838:	cmpeq	r0, r2
    883a:	bcc.n	893c <ExFatFile::write(void const*, unsigned int)+0x264>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    883c:	ldr	r3, [pc, #284]	; (895c <ExFatFile::write(void const*, unsigned int)+0x284>)
    883e:	ldr	r3, [r3, #0]
    8840:	cmp	r3, #0
    8842:	beq.w	8950 <ExFatFile::write(void const*, unsigned int)+0x278>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    8846:	ldrb.w	r3, [r6, #51]	; 0x33
    884a:	ldr	r0, [sp, #4]
    884c:	orn	r3, r3, #127	; 0x7f
    8850:	strb.w	r3, [r6, #51]	; 0x33
    8854:	b.n	86fa <ExFatFile::write(void const*, unsigned int)+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    8856:	cmp.w	r8, #1024	; 0x400
    885a:	bcc.n	88ba <ExFatFile::write(void const*, unsigned int)+0x1e2>
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    885c:	movs	r3, #1
    885e:	lsl.w	lr, r3, lr
    8862:	rsb	lr, r4, lr
    8866:	ldr.w	r3, [r0, #532]	; 0x214
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    886a:	mov.w	r4, r8, lsr #9
    886e:	cmp	r4, lr
    8870:	it	cs
    8872:	movcs	r4, lr
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    8874:	cmp	r1, r3
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    8876:	mov.w	r7, r4, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    887a:	bhi.n	8890 <ExFatFile::write(void const*, unsigned int)+0x1b8>
    887c:	adds	r2, r4, r1
    887e:	cmp	r2, r3
    8880:	bls.n	8890 <ExFatFile::write(void const*, unsigned int)+0x1b8>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    8882:	add.w	r0, r0, #524	; 0x20c
    8886:	str	r1, [sp, #8]
    8888:	bl	79f8 <FsCache::invalidate()>
    888c:	ldr	r0, [r6, #32]
    888e:	ldr	r1, [sp, #8]
    8890:	ldr.w	r0, [r0, #1080]	; 0x438
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t count) {
    return m_blockDev->writeSectors(sector, src, count);
    8894:	ldr	r5, [r0, #0]
    8896:	mov	r3, r4
    8898:	mov	r2, sl
    889a:	ldr	r4, [r5, #28]
    889c:	blx	r4
        // Invalidate cache if cache sector is in the range.
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, ns)) {
    889e:	cmp	r0, #0
    88a0:	bne.n	87e6 <ExFatFile::write(void const*, unsigned int)+0x10e>
    88a2:	b.n	86ea <ExFatFile::write(void const*, unsigned int)+0x12>
             (clusterOffset >> m_vol->bytesPerSectorShift());

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    88a4:	rsb	r7, r9, #512	; 0x200
    88a8:	cmp	r7, r8
    88aa:	it	cs
    88ac:	movcs	r7, r8
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    88ae:	movs	r2, #1
    88b0:	b.n	87c6 <ExFatFile::write(void const*, unsigned int)+0xee>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    88b2:	ldr	r5, [r6, #28]
    88b4:	cbz	r5, 88e6 <ExFatFile::write(void const*, unsigned int)+0x20e>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    88b6:	str	r5, [r6, #24]
    88b8:	b.n	8784 <ExFatFile::write(void const*, unsigned int)+0xac>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->dataCacheSector() == sector) {
    88ba:	ldr.w	r3, [r0, #532]	; 0x214
    88be:	cmp	r1, r3
    88c0:	beq.n	891c <ExFatFile::write(void const*, unsigned int)+0x244>
    88c2:	ldr.w	r0, [r0, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    88c6:	ldr	r3, [r0, #0]
    88c8:	mov	r2, sl
    88ca:	ldr	r3, [r3, #24]
    88cc:	blx	r3
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    88ce:	cmp	r0, #0
    88d0:	beq.w	86ea <ExFatFile::write(void const*, unsigned int)+0x12>
    88d4:	mov.w	r0, #512	; 0x200
    88d8:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    88da:	mov.w	r7, #512	; 0x200
    88de:	b.n	87ea <ExFatFile::write(void const*, unsigned int)+0x112>

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
            m_curCluster++;
    88e0:	adds	r5, #1
    88e2:	str	r5, [r6, #24]
    88e4:	b.n	8784 <ExFatFile::write(void const*, unsigned int)+0xac>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    88e6:	mov	r0, r6
    88e8:	bl	7fb0 <ExFatFile::addCluster()>
    88ec:	cmp	r0, #0
    88ee:	beq.w	86ea <ExFatFile::write(void const*, unsigned int)+0x12>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    88f2:	ldr	r5, [r6, #24]
    88f4:	str	r5, [r6, #28]
    88f6:	ldr	r0, [r6, #32]
    88f8:	b.n	8784 <ExFatFile::write(void const*, unsigned int)+0xac>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    88fa:	mov	r1, r5
    88fc:	ldr	r2, [sp, #12]
    88fe:	bl	7dd8 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
        if (fg == 0) {
    8902:	cmp	r0, #0
    8904:	bne.w	8780 <ExFatFile::write(void const*, unsigned int)+0xa8>
    8908:	b.n	8776 <ExFatFile::write(void const*, unsigned int)+0x9e>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    890a:	ldr	r0, [r6, #32]
    890c:	add.w	r0, r0, #524	; 0x20c
    8910:	bl	7ac4 <FsCache::sync()>
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->dataCacheSync()) {
    8914:	cmp	r0, #0
    8916:	bne.w	87e6 <ExFatFile::write(void const*, unsigned int)+0x10e>
    891a:	b.n	86ea <ExFatFile::write(void const*, unsigned int)+0x12>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    891c:	add.w	r0, r0, #524	; 0x20c
    8920:	str	r1, [sp, #8]
    8922:	bl	79f8 <FsCache::invalidate()>
    8926:	ldr	r0, [r6, #32]
    8928:	ldr	r1, [sp, #8]
    892a:	b.n	88c2 <ExFatFile::write(void const*, unsigned int)+0x1ea>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_validLength)) {
    892c:	ldrd	r2, r3, [r0, #16]
    8930:	bl	7210 <ExFatFile::seekSet(unsigned long long)>
    8934:	cmp	r0, #0
    8936:	beq.w	86ea <ExFatFile::write(void const*, unsigned int)+0x12>
    893a:	b.n	8708 <ExFatFile::write(void const*, unsigned int)+0x30>
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    893c:	ldrb.w	r1, [r6, #51]	; 0x33
    8940:	ldr	r0, [sp, #4]
    8942:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    8946:	strd	r2, r3, [r6, #8]
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    894a:	strb.w	r1, [r6, #51]	; 0x33
    894e:	b.n	86fa <ExFatFile::write(void const*, unsigned int)+0x22>
    8950:	ldr	r0, [sp, #4]
    8952:	b.n	86fa <ExFatFile::write(void const*, unsigned int)+0x22>
    8954:	ldrd	r2, r3, [r6]
    8958:	b.n	8830 <ExFatFile::write(void const*, unsigned int)+0x158>
    895a:	nop
    895c:	.word	0x1fff1f34

00008960 <FatFile::openRoot(FatVolume*) [clone .part.36]>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    8960:	push	{r3, r4, r5, lr}
    8962:	mov	r4, r0
    8964:	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    8966:	movs	r2, #36	; 0x24
    8968:	movs	r1, #0
    896a:	bl	f32c <memset>

  m_vol = vol;
    896e:	str	r5, [r4, #8]
  switch (vol->fatType()) {
    8970:	ldrb	r3, [r5, #7]
    8972:	cmp	r3, #16
    8974:	beq.n	8988 <FatFile::openRoot(FatVolume*) [clone .part.36]+0x28>
    8976:	cmp	r3, #32
    8978:	bne.n	8984 <FatFile::openRoot(FatVolume*) [clone .part.36]+0x24>
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    897a:	movs	r3, #64	; 0x40
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    897c:	movs	r0, #1
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    897e:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    8980:	strb	r0, [r4, #2]
    8982:	pop	{r3, r4, r5, pc}
  return true;

fail:
  return false;
    8984:	movs	r0, #0
}
    8986:	pop	{r3, r4, r5, pc}
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    8988:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    898a:	movs	r0, #1
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    898c:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    898e:	strb	r0, [r4, #2]
    8990:	pop	{r3, r4, r5, pc}
    8992:	nop

00008994 <FatFile::addCluster()>:
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    8994:	mov	r2, r0
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    8996:	push	{r3, r4, r5, lr}
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    8998:	ldr.w	r5, [r2, #16]!
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    899c:	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    899e:	mov	r1, r5
    89a0:	ldr	r0, [r0, #8]
    89a2:	bl	9a08 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    89a6:	cbz	r0, 89be <FatFile::addCluster()+0x2a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    89a8:	cbz	r5, 89c0 <FatFile::addCluster()+0x2c>
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    89aa:	ldr	r3, [r4, #16]
    89ac:	adds	r5, #1
    89ae:	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    89b0:	ldrb	r3, [r4, #2]
    89b2:	it	ne
    89b4:	andne.w	r3, r3, #191	; 0xbf
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    89b8:	orn	r3, r3, #127	; 0x7f
    89bc:	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    89be:	pop	{r3, r4, r5, pc}
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    89c0:	ldrb	r3, [r4, #2]
    89c2:	orr.w	r3, r3, #64	; 0x40
    89c6:	b.n	89b8 <FatFile::addCluster()+0x24>

000089c8 <FatFile::addDirCluster()>:
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    89c8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    89cc:	ldrb	r3, [r0, #0]
    89ce:	and.w	r3, r3, #32
    89d2:	cbnz	r3, 89e0 <FatFile::addDirCluster()+0x18>
    89d4:	and.w	r4, r3, #255	; 0xff
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    89d8:	ldr	r1, [r0, #20]
    89da:	ldr	r3, [pc, #124]	; (8a58 <FatFile::addDirCluster()+0x90>)
    89dc:	cmp	r1, r3
    89de:	bls.n	89e8 <FatFile::addDirCluster()+0x20>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    89e0:	movs	r6, #0
}
    89e2:	mov	r0, r6
    89e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    89e8:	mov	r5, r0
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    89ea:	bl	8994 <FatFile::addCluster()>
    89ee:	mov	r6, r0
    89f0:	cmp	r0, #0
    89f2:	beq.n	89e0 <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    89f4:	ldr	r1, [r5, #16]
    89f6:	ldr	r0, [r5, #8]
    89f8:	bl	9924 <FatPartition::clusterStartSector(unsigned long) const>
    89fc:	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    89fe:	ldr	r0, [r5, #8]
    8a00:	mov	r1, r7
    8a02:	adds	r0, #36	; 0x24
    8a04:	movs	r2, #5
    8a06:	bl	98b4 <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    8a0a:	mov	r8, r0
    8a0c:	cmp	r0, #0
    8a0e:	beq.n	89e0 <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
    8a10:	mov.w	r2, #512	; 0x200
    8a14:	mov	r1, r4
    8a16:	bl	f32c <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    8a1a:	ldr	r3, [r5, #8]
    8a1c:	ldrb	r2, [r3, #4]
    8a1e:	cmp	r2, #1
    8a20:	bls.n	8a44 <FatFile::addDirCluster()+0x7c>
    8a22:	movs	r4, #1
    8a24:	b.n	8a2e <FatFile::addDirCluster()+0x66>
    8a26:	ldr	r3, [r5, #8]
    8a28:	ldrb	r2, [r3, #4]
    8a2a:	cmp	r2, r4
    8a2c:	bls.n	8a44 <FatFile::addDirCluster()+0x7c>
    8a2e:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    8a30:	ldr	r3, [r0, #0]
    8a32:	adds	r1, r4, r7
    8a34:	ldr	r3, [r3, #24]
    8a36:	mov	r2, r8
    8a38:	blx	r3
    8a3a:	adds	r4, #1
    8a3c:	uxtb	r4, r4
    if (!m_vol->writeSector(sector + i, pc->data)) {
    8a3e:	cmp	r0, #0
    8a40:	bne.n	8a26 <FatFile::addDirCluster()+0x5e>
    8a42:	b.n	89e0 <FatFile::addDirCluster()+0x18>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    8a44:	ldrb	r3, [r3, #6]
    8a46:	ldr	r1, [r5, #20]
    8a48:	mov.w	r2, #512	; 0x200
    8a4c:	lsl.w	r3, r2, r3
    8a50:	uxtah	r3, r1, r3
    8a54:	str	r3, [r5, #20]
    8a56:	b.n	89e2 <FatFile::addDirCluster()+0x1a>
    8a58:	.word	0x001ffdff

00008a5c <FatFile::cacheDirEntry(unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    8a5c:	push	{r4, lr}
    8a5e:	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    8a60:	ldr	r0, [r0, #8]
    8a62:	mov	r2, r1
    8a64:	adds	r0, #36	; 0x24
    8a66:	ldr	r1, [r4, #24]
    8a68:	bl	98b4 <FatCache::read(unsigned long, unsigned char)>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    8a6c:	cbz	r0, 8a78 <FatFile::cacheDirEntry(unsigned char)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    8a6e:	ldrh	r3, [r4, #4]
    8a70:	and.w	r3, r3, #15
    8a74:	add.w	r0, r0, r3, lsl #5

fail:
  return nullptr;
}
    8a78:	pop	{r4, pc}
    8a7a:	nop

00008a7c <FatFile::sync() [clone .part.40]>:
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    8a7c:	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    8a7e:	ldrsb.w	r3, [r0, #2]
    8a82:	cmp	r3, #0
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    8a84:	sub	sp, #8
    8a86:	mov	r4, r0
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    8a88:	blt.n	8abe <FatFile::sync() [clone .part.40]+0x42>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    8a8a:	ldr	r5, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8a8c:	add.w	r0, r5, #36	; 0x24
    8a90:	bl	9914 <FatCache::sync()>
    8a94:	cbnz	r0, 8aa4 <FatFile::sync() [clone .part.40]+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    8a96:	ldrb	r3, [r4, #1]
    8a98:	orr.w	r3, r3, #1
    8a9c:	strb	r3, [r4, #1]
  return false;
    8a9e:	movs	r0, #0
}
    8aa0:	add	sp, #8
    8aa2:	pop	{r4, r5, r6, pc}
    8aa4:	add.w	r0, r5, #560	; 0x230
    8aa8:	bl	9914 <FatCache::sync()>
    8aac:	cmp	r0, #0
    8aae:	beq.n	8a96 <FatFile::sync() [clone .part.40]+0x1a>
    8ab0:	ldr	r0, [r5, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    8ab2:	ldr	r3, [r0, #0]
    8ab4:	ldr	r3, [r3, #20]
    8ab6:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8ab8:	cmp	r0, #0
    8aba:	beq.n	8a96 <FatFile::sync() [clone .part.40]+0x1a>
    8abc:	b.n	8aa0 <FatFile::sync() [clone .part.40]+0x24>
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    8abe:	movs	r1, #1
    8ac0:	bl	8a5c <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    8ac4:	mov	r5, r0
    8ac6:	cmp	r0, #0
    8ac8:	beq.n	8a96 <FatFile::sync() [clone .part.40]+0x1a>
    8aca:	ldrb	r3, [r0, #0]
    8acc:	cmp	r3, #229	; 0xe5
    8ace:	beq.n	8a96 <FatFile::sync() [clone .part.40]+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    8ad0:	ldrb	r3, [r4, #0]
    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    8ad2:	ldr	r2, [pc, #56]	; (8b0c <FatFile::sync() [clone .part.40]+0x90>)
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    8ad4:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    8ad6:	itt	mi
    8ad8:	ldrmi	r3, [r4, #28]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    8ada:	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    8adc:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    8ade:	ldr	r6, [r2, #0]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    8ae0:	strh	r3, [r0, #26]
    8ae2:	lsrs	r3, r3, #16
    8ae4:	strh	r3, [r0, #20]
    8ae6:	cbz	r6, 8b02 <FatFile::sync() [clone .part.40]+0x86>
      FsDateTime::callback(&date, &time, &ms10);
    8ae8:	add.w	r2, sp, #3
    8aec:	add.w	r1, sp, #6
    8af0:	add	r0, sp, #4
    8af2:	blx	r6
      setLe16(dir->modifyDate, date);
    8af4:	ldrh.w	r3, [sp, #4]
    8af8:	ldrh.w	r2, [sp, #6]
    8afc:	strh	r3, [r5, #24]
    8afe:	strh	r3, [r5, #18]
    8b00:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    8b02:	ldrb	r3, [r4, #2]
    8b04:	and.w	r3, r3, #127	; 0x7f
    8b08:	strb	r3, [r4, #2]
    8b0a:	b.n	8a8a <FatFile::sync() [clone .part.40]+0xe>
    8b0c:	.word	0x1fff1f34

00008b10 <FatFile::close()>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    8b10:	push	{r4, lr}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    8b12:	ldrb	r3, [r0, #0]

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    8b14:	mov	r4, r0
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    8b16:	cbnz	r3, 8b22 <FatFile::close()+0x12>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    8b18:	movs	r3, #0
    8b1a:	strb	r3, [r4, #0]
  m_flags = 0;
    8b1c:	strb	r3, [r4, #2]
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
    8b1e:	movs	r0, #1
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return rtn;
}
    8b20:	pop	{r4, pc}
    8b22:	bl	8a7c <FatFile::sync() [clone .part.40]>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    8b26:	movs	r3, #0
    8b28:	strb	r3, [r4, #0]
  m_flags = 0;
    8b2a:	strb	r3, [r4, #2]
  return rtn;
}
    8b2c:	pop	{r4, pc}
    8b2e:	nop

00008b30 <FatFile::dirEntry(DirFat_t*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::dirEntry(DirFat_t* dst) {
    8b30:	push	{r3, r4, r5, lr}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    8b32:	ldrb	r3, [r0, #0]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::dirEntry(DirFat_t* dst) {
    8b34:	mov	r5, r0
    8b36:	mov	r4, r1
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    8b38:	cbnz	r3, 8b68 <FatFile::dirEntry(DirFat_t*)+0x38>
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
    8b3a:	mov	r0, r5
    8b3c:	movs	r1, #0
    8b3e:	bl	8a5c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    8b42:	cbz	r0, 8b70 <FatFile::dirEntry(DirFat_t*)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy to caller's struct
  memcpy(dst, dir, sizeof(DirFat_t));
    8b44:	ldr	r1, [r0, #0]
    8b46:	ldr	r2, [r0, #4]
    8b48:	ldr	r3, [r0, #8]
    8b4a:	ldr	r5, [r0, #12]
    8b4c:	str	r5, [r4, #12]
    8b4e:	str	r1, [r4, #0]
    8b50:	str	r2, [r4, #4]
    8b52:	str	r3, [r4, #8]
    8b54:	ldr	r1, [r0, #16]
    8b56:	ldr	r2, [r0, #20]
    8b58:	ldr	r3, [r0, #24]
    8b5a:	ldr	r5, [r0, #28]
    8b5c:	str	r5, [r4, #28]
    8b5e:	str	r1, [r4, #16]
    8b60:	str	r2, [r4, #20]
    8b62:	str	r3, [r4, #24]
  return true;
    8b64:	movs	r0, #1

fail:
  return false;
}
    8b66:	pop	{r3, r4, r5, pc}
    8b68:	bl	8a7c <FatFile::sync() [clone .part.40]>
}
//------------------------------------------------------------------------------
bool FatFile::dirEntry(DirFat_t* dst) {
  DirFat_t* dir;
  // Make sure fields on device are correct.
  if (!sync()) {
    8b6c:	cmp	r0, #0
    8b6e:	bne.n	8b3a <FatFile::dirEntry(DirFat_t*)+0xa>
  // copy to caller's struct
  memcpy(dst, dir, sizeof(DirFat_t));
  return true;

fail:
  return false;
    8b70:	movs	r0, #0
    8b72:	pop	{r3, r4, r5, pc}

00008b74 <FatFile::mkdir(FatFile*, fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    8b74:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    8b78:	ldrb	r5, [r1, #0]
    8b7a:	tst.w	r5, #112	; 0x70

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    8b7e:	sub	sp, #36	; 0x24
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    8b80:	bne.n	8b8a <FatFile::mkdir(FatFile*, fname_t*)+0x16>
  // write first sector
  return m_vol->cacheSync();

fail:
  return false;
}
    8b82:	movs	r0, #0
    8b84:	add	sp, #36	; 0x24
    8b86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    8b8a:	movw	r3, #2562	; 0xa02
    8b8e:	mov	r4, r0
    8b90:	mov	r5, r1
    8b92:	bl	a2f0 <FatFile::open(FatFile*, fname_t*, int)>
    8b96:	cmp	r0, #0
    8b98:	beq.n	8b82 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    8b9a:	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    8b9c:	movs	r3, #16
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    8b9e:	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    8ba0:	strb	r3, [r4, #0]

  // allocate and zero first cluster
  if (!addDirCluster()) {
    8ba2:	mov	r0, r4
    8ba4:	bl	89c8 <FatFile::addDirCluster()>
    8ba8:	cmp	r0, #0
    8baa:	beq.n	8b82 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
bool FatFile::seekSet(uint32_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    8bac:	ldrb	r3, [r4, #0]
  // allocate and zero first cluster
  if (!addDirCluster()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    8bae:	ldr	r2, [r4, #16]
    8bb0:	str	r2, [r4, #32]
bool FatFile::seekSet(uint32_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    8bb2:	cmp	r3, #0
    8bb4:	bne.n	8ca2 <FatFile::mkdir(FatFile*, fname_t*)+0x12e>
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    8bb6:	movs	r1, #1
    8bb8:	mov	r0, r4
    8bba:	bl	8a5c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    8bbe:	mov	r6, r0
    8bc0:	cmp	r0, #0
    8bc2:	beq.n	8b82 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    8bc4:	movs	r3, #16
    8bc6:	strb	r3, [r0, #11]

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    8bc8:	ldr	r2, [r0, #8]
    8bca:	ldr	r1, [r6, #4]
    8bcc:	ldr	r3, [r6, #12]
    8bce:	ldr	r0, [r0, #0]
    8bd0:	ldrh.w	r8, [r6, #20]
    8bd4:	ldrh.w	r9, [r6, #26]
    8bd8:	mov	r7, sp
    8bda:	stmia	r7!, {r0, r1, r2, r3}
    8bdc:	ldr	r1, [r6, #20]
    8bde:	ldr	r2, [r6, #24]
    8be0:	ldr	r3, [r6, #28]
    8be2:	ldr	r0, [r6, #16]
  dot.name[0] = '.';
    8be4:	add	r6, sp, #32
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    8be6:	stmia	r7!, {r0, r1, r2, r3}
  dot.name[0] = '.';
    8be8:	movs	r3, #46	; 0x2e
    8bea:	strb.w	r3, [r6, #-32]!
    8bee:	add.w	r1, sp, #10
    8bf2:	mov	r3, r6
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
    8bf4:	movs	r2, #32
    8bf6:	strb.w	r2, [r3, #1]!
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    8bfa:	cmp	r1, r3
    8bfc:	bne.n	8bf6 <FatFile::mkdir(FatFile*, fname_t*)+0x82>
    dot.name[i] = ' ';
  }

  // cache sector for '.'  and '..'
  sector = m_vol->clusterStartSector(m_firstCluster);
    8bfe:	ldr	r1, [r4, #32]
    8c00:	ldr	r0, [r4, #8]
    8c02:	bl	9924 <FatPartition::clusterStartSector(unsigned long) const>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    8c06:	ldr	r3, [r4, #8]
    8c08:	mov	r1, r0
    8c0a:	movs	r2, #1
    8c0c:	add.w	r0, r3, #36	; 0x24
    8c10:	bl	98b4 <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
  if (!pc) {
    8c14:	mov	lr, r0
    8c16:	cmp	r0, #0
    8c18:	beq.n	8b82 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    8c1a:	mov	r7, r6
    8c1c:	strh.w	r8, [sp, #20]
    8c20:	strh.w	r9, [sp, #26]
    8c24:	ldmia	r7!, {r0, r1, r2, r3}
    8c26:	str.w	r0, [lr]
    8c2a:	str.w	r1, [lr, #4]
    8c2e:	str.w	r2, [lr, #8]
    8c32:	str.w	r3, [lr, #12]
    8c36:	ldmia	r7!, {r0, r1, r2, r3}
    8c38:	str.w	r0, [lr, #16]
    8c3c:	str.w	r1, [lr, #20]
    8c40:	str.w	r2, [lr, #24]
    8c44:	str.w	r3, [lr, #28]
  // make entry for '..'
  dot.name[1] = '.';
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    8c48:	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    8c4a:	strh.w	r3, [sp, #26]
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
  // make entry for '..'
  dot.name[1] = '.';
    8c4e:	movs	r2, #46	; 0x2e
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    8c50:	lsrs	r3, r3, #16
    8c52:	mov	r5, r6
    8c54:	strh.w	r3, [sp, #20]
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
  // make entry for '..'
  dot.name[1] = '.';
    8c58:	strb.w	r2, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    8c5c:	ldmia	r5!, {r0, r1, r2, r3}
    8c5e:	add.w	r6, lr, #32
    8c62:	str.w	r0, [lr, #32]
    8c66:	str	r1, [r6, #4]
    8c68:	str	r2, [r6, #8]
    8c6a:	str	r3, [r6, #12]
    8c6c:	ldmia	r5!, {r0, r1, r2, r3}
    8c6e:	str	r0, [r6, #16]
    8c70:	str	r1, [r6, #20]
    8c72:	str	r2, [r6, #24]
    8c74:	str	r3, [r6, #28]
  // write first sector
  return m_vol->cacheSync();
    8c76:	ldr	r4, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8c78:	add.w	r0, r4, #36	; 0x24
    8c7c:	bl	9914 <FatCache::sync()>
    8c80:	cmp	r0, #0
    8c82:	beq.w	8b82 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    8c86:	add.w	r0, r4, #560	; 0x230
    8c8a:	bl	9914 <FatCache::sync()>
    8c8e:	cmp	r0, #0
    8c90:	beq.w	8b82 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    8c94:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    8c96:	ldr	r3, [r0, #0]
    8c98:	ldr	r3, [r3, #20]

fail:
  return false;
}
    8c9a:	add	sp, #36	; 0x24
    8c9c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8ca0:	bx	r3
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    8ca2:	ldr	r3, [r4, #20]
    8ca4:	cbz	r3, 8cb4 <FatFile::mkdir(FatFile*, fname_t*)+0x140>
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    8ca6:	ldrb	r3, [r4, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    8ca8:	movs	r2, #0
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    8caa:	bic.w	r3, r3, #32
    8cae:	strb	r3, [r4, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    8cb0:	str	r2, [r4, #16]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    8cb2:	str	r2, [r4, #20]
    8cb4:	mov	r0, r4
    8cb6:	bl	8a7c <FatFile::sync() [clone .part.40]>
  }
  m_firstCluster = m_curCluster;
  // Set to start of dir
  rewind();
  // force entry to device
  if (!sync()) {
    8cba:	cmp	r0, #0
    8cbc:	beq.w	8b82 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    8cc0:	b.n	8bb6 <FatFile::mkdir(FatFile*, fname_t*)+0x42>
    8cc2:	nop

00008cc4 <FatFile::mkdir(FatFile*, char const*, bool)>:
void FatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    8cc4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8cc8:	mov	r6, r0
    8cca:	sub	sp, #72	; 0x48
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    8ccc:	ldrb	r5, [r6, #0]
void FatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    8cce:	str	r2, [sp, #4]
    8cd0:	movs	r0, #0
    8cd2:	strb.w	r0, [sp, #36]	; 0x24
    8cd6:	strb.w	r0, [sp, #37]	; 0x25
    8cda:	strb.w	r0, [sp, #38]	; 0x26
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    8cde:	cbnz	r5, 8cec <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    8ce0:	mov	r8, r3
    8ce2:	ldrb	r3, [r1, #0]
    8ce4:	tst.w	r3, #112	; 0x70
    8ce8:	mov	r4, r1
    8cea:	bne.n	8cf4 <FatFile::mkdir(FatFile*, char const*, bool)+0x30>
    close();
  }
  return mkdir(parent, &fname);

fail:
  return false;
    8cec:	movs	r0, #0
}
    8cee:	add	sp, #72	; 0x48
    8cf0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    8cf4:	ldrb	r3, [r2, #0]
    8cf6:	cmp	r3, #47	; 0x2f
    8cf8:	mov	r0, r2
    8cfa:	beq.n	8d52 <FatFile::mkdir(FatFile*, char const*, bool)+0x8e>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    8cfc:	movs	r7, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    8cfe:	add	r2, sp, #4
    8d00:	add	r1, sp, #12
    8d02:	bl	9e08 <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    8d06:	add	r2, sp, #12
    8d08:	mov	r1, r4
    8d0a:	movs	r3, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    8d0c:	cmp	r0, #0
    8d0e:	beq.n	8cec <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    8d10:	ldr	r5, [sp, #4]
    8d12:	ldrb	r5, [r5, #0]
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    8d14:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    8d16:	cmp	r5, #0
    8d18:	beq.n	8d76 <FatFile::mkdir(FatFile*, char const*, bool)+0xb2>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    8d1a:	bl	a2f0 <FatFile::open(FatFile*, fname_t*, int)>
    8d1e:	cbnz	r0, 8d34 <FatFile::mkdir(FatFile*, char const*, bool)+0x70>
      if (!pFlag || !mkdir(parent, &fname)) {
    8d20:	cmp.w	r8, #0
    8d24:	beq.n	8cec <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    8d26:	mov	r1, r4
    8d28:	add	r2, sp, #12
    8d2a:	mov	r0, r6
    8d2c:	bl	8b74 <FatFile::mkdir(FatFile*, fname_t*)>
    8d30:	cmp	r0, #0
    8d32:	beq.n	8cec <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    8d34:	mov	r5, r6
    8d36:	ldmia	r5!, {r0, r1, r2, r3}
    8d38:	add	r4, sp, #36	; 0x24
    8d3a:	stmia	r4!, {r0, r1, r2, r3}
    8d3c:	ldmia	r5!, {r0, r1, r2, r3}
    8d3e:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    8d40:	ldrb	r3, [r6, #0]
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    8d42:	ldr	r2, [r5, #0]
    8d44:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    8d46:	cbnz	r3, 8d6e <FatFile::mkdir(FatFile*, char const*, bool)+0xaa>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    8d48:	strb	r7, [r6, #0]
  m_flags = 0;
    8d4a:	strb	r7, [r6, #2]
    8d4c:	ldr	r0, [sp, #4]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    8d4e:	add	r4, sp, #36	; 0x24
    8d50:	b.n	8cfe <FatFile::mkdir(FatFile*, char const*, bool)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    8d52:	adds	r0, #1
    8d54:	str	r0, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    8d56:	ldrb	r3, [r0, #0]
    8d58:	cmp	r3, #47	; 0x2f
    8d5a:	beq.n	8d52 <FatFile::mkdir(FatFile*, char const*, bool)+0x8e>
    8d5c:	ldr	r1, [r4, #8]
    8d5e:	add	r0, sp, #36	; 0x24
    8d60:	bl	8960 <FatFile::openRoot(FatVolume*) [clone .part.36]>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    8d64:	cmp	r0, #0
    8d66:	beq.n	8cec <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    8d68:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    8d6a:	add	r4, sp, #36	; 0x24
    8d6c:	b.n	8cfc <FatFile::mkdir(FatFile*, char const*, bool)+0x38>
    8d6e:	mov	r0, r6
    8d70:	bl	8a7c <FatFile::sync() [clone .part.40]>
    8d74:	b.n	8d48 <FatFile::mkdir(FatFile*, char const*, bool)+0x84>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    8d76:	add	r2, sp, #12
    8d78:	mov	r1, r4
    8d7a:	mov	r0, r6
    8d7c:	bl	8b74 <FatFile::mkdir(FatFile*, fname_t*)>

fail:
  return false;
}
    8d80:	add	sp, #72	; 0x48
    8d82:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8d86:	nop

00008d88 <FatFile::open(FatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    8d88:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8d8c:	mov	r6, r0
    8d8e:	sub	sp, #72	; 0x48
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    8d90:	ldrb	r5, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    8d92:	str	r2, [sp, #4]
    8d94:	movs	r0, #0
    8d96:	strb.w	r0, [sp, #36]	; 0x24
    8d9a:	strb.w	r0, [sp, #37]	; 0x25
    8d9e:	strb.w	r0, [sp, #38]	; 0x26
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    8da2:	cbnz	r5, 8db0 <FatFile::open(FatFile*, char const*, int)+0x28>
    8da4:	mov	r8, r3
    8da6:	ldrb	r3, [r1, #0]
    8da8:	tst.w	r3, #112	; 0x70
    8dac:	mov	r4, r1
    8dae:	bne.n	8db8 <FatFile::open(FatFile*, char const*, int)+0x30>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    8db0:	movs	r0, #0
}
    8db2:	add	sp, #72	; 0x48
    8db4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    8db8:	ldrb	r3, [r2, #0]
    8dba:	cmp	r3, #47	; 0x2f
    8dbc:	mov	r0, r2
    8dbe:	beq.n	8e0c <FatFile::open(FatFile*, char const*, int)+0x84>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    8dc0:	movs	r7, #0
    8dc2:	b.n	8dcc <FatFile::open(FatFile*, char const*, int)+0x44>
    8dc4:	ldr	r0, [sp, #4]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    8dc6:	strb	r7, [r6, #0]
  m_flags = 0;
    8dc8:	strb	r7, [r6, #2]
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    8dca:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    8dcc:	add	r2, sp, #4
    8dce:	add	r1, sp, #12
    8dd0:	bl	9e08 <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    8dd4:	add	r2, sp, #12
    8dd6:	mov	r1, r4
    8dd8:	movs	r3, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    8dda:	cmp	r0, #0
    8ddc:	beq.n	8db0 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    8dde:	ldr	r5, [sp, #4]
    8de0:	ldrb	r5, [r5, #0]
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    8de2:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    8de4:	cbz	r5, 8e2a <FatFile::open(FatFile*, char const*, int)+0xa2>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    8de6:	bl	a2f0 <FatFile::open(FatFile*, fname_t*, int)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    8dea:	mov	r5, r6
    8dec:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    8dee:	cmp	r0, #0
    8df0:	beq.n	8db0 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    8df2:	ldmia	r5!, {r0, r1, r2, r3}
    8df4:	stmia	r4!, {r0, r1, r2, r3}
    8df6:	ldmia	r5!, {r0, r1, r2, r3}
    8df8:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    8dfa:	ldrb	r3, [r6, #0]
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    8dfc:	ldr	r2, [r5, #0]
    8dfe:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    8e00:	cmp	r3, #0
    8e02:	beq.n	8dc4 <FatFile::open(FatFile*, char const*, int)+0x3c>
    8e04:	mov	r0, r6
    8e06:	bl	8a7c <FatFile::sync() [clone .part.40]>
    8e0a:	b.n	8dc4 <FatFile::open(FatFile*, char const*, int)+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    8e0c:	adds	r0, #1
    8e0e:	str	r0, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    8e10:	ldrb	r3, [r0, #0]
    8e12:	cmp	r3, #47	; 0x2f
    8e14:	beq.n	8e0c <FatFile::open(FatFile*, char const*, int)+0x84>
      path++;
    }
    if (*path == 0) {
    8e16:	cbz	r3, 8e3c <FatFile::open(FatFile*, char const*, int)+0xb4>
    8e18:	ldr	r1, [r4, #8]
    8e1a:	add	r0, sp, #36	; 0x24
    8e1c:	bl	8960 <FatFile::openRoot(FatVolume*) [clone .part.36]>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    8e20:	cmp	r0, #0
    8e22:	beq.n	8db0 <FatFile::open(FatFile*, char const*, int)+0x28>
    8e24:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    8e26:	add	r4, sp, #36	; 0x24
    8e28:	b.n	8dc0 <FatFile::open(FatFile*, char const*, int)+0x38>
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return open(dirFile, &fname, oflag);
    8e2a:	mov	r3, r8
    8e2c:	add	r2, sp, #12
    8e2e:	mov	r1, r4
    8e30:	mov	r0, r6
    8e32:	bl	a2f0 <FatFile::open(FatFile*, fname_t*, int)>

fail:
  return false;
}
    8e36:	add	sp, #72	; 0x48
    8e38:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8e3c:	ldr	r1, [r4, #8]
    8e3e:	mov	r0, r6
    8e40:	bl	8960 <FatFile::openRoot(FatVolume*) [clone .part.36]>
    8e44:	b.n	8db2 <FatFile::open(FatFile*, char const*, int)+0x2a>
    8e46:	nop

00008e48 <FatFile::open(FatVolume*, char const*, int)>:
bool FatFile::open(const char* path, oflag_t oflag) {
  return open(FatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    8e48:	cbz	r1, 8e52 <FatFile::open(FatVolume*, char const*, int)+0xa>
    8e4a:	addw	r1, r1, #1084	; 0x43c
    8e4e:	b.w	8d88 <FatFile::open(FatFile*, char const*, int)>
}
    8e52:	mov	r0, r1
    8e54:	bx	lr
    8e56:	nop

00008e58 <FatFile::openRoot(FatVolume*)>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    8e58:	ldrb	r3, [r0, #0]
    8e5a:	cbz	r3, 8e60 <FatFile::openRoot(FatVolume*)+0x8>
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
}
    8e5c:	movs	r0, #0
    8e5e:	bx	lr
    8e60:	b.w	8960 <FatFile::openRoot(FatVolume*) [clone .part.36]>

00008e64 <FatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    8e64:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    8e68:	ldrb	r3, [r0, #2]
    8e6a:	lsls	r7, r3, #31
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    8e6c:	sub	sp, #12
    8e6e:	mov	r5, r0
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    8e70:	bpl.w	8f92 <FatFile::read(void*, unsigned int)+0x12e>
    8e74:	mov	r7, r1
    8e76:	ldrb	r1, [r0, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    8e78:	lsls	r6, r1, #28
    8e7a:	mov	r9, r2
    8e7c:	bmi.w	8fa4 <FatFile::read(void*, unsigned int)+0x140>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
    8e80:	lsls	r4, r1, #26
    8e82:	bpl.n	8e96 <FatFile::read(void*, unsigned int)+0x32>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    8e84:	ldr	r2, [r0, #8]
    if (nbyte > tmp16) {
    8e86:	ldr	r3, [r0, #20]
    8e88:	ldrh	r2, [r2, #8]
    8e8a:	rsb	r3, r3, r2, lsl #5
    8e8e:	uxth	r3, r3
    8e90:	cmp	r9, r3
    8e92:	it	cs
    8e94:	movcs	r9, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    8e96:	cmp.w	r9, #0
    8e9a:	beq.w	8ff0 <FatFile::read(void*, unsigned int)+0x18c>
    8e9e:	ldr	r3, [r5, #20]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    8ea0:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    8ea2:	lsls	r0, r1, #26
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    8ea4:	mov	r6, r9
    8ea6:	mov.w	r8, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    8eaa:	add.w	sl, r5, #16
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    8eae:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    8eb2:	bpl.n	8f32 <FatFile::read(void*, unsigned int)+0xce>
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    8eb4:	ldr	r1, [r2, #32]
    8eb6:	add.w	r1, r1, r3, lsr #9
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    8eba:	cmp.w	fp, #0
    8ebe:	bne.n	8f66 <FatFile::read(void*, unsigned int)+0x102>
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    8ec0:	cmp.w	r6, #512	; 0x200
    8ec4:	bcc.n	8f66 <FatFile::read(void*, unsigned int)+0x102>
    8ec6:	ldr	r3, [r2, #44]	; 0x2c
        || sector == m_vol->cacheSectorNumber()) {
    8ec8:	cmp	r1, r3
    8eca:	beq.n	8f66 <FatFile::read(void*, unsigned int)+0x102>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    8ecc:	cmp.w	r6, #1024	; 0x400
    8ed0:	bcc.n	8fb6 <FatFile::read(void*, unsigned int)+0x152>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isRootFixed()) {
    8ed2:	ldrb	r0, [r5, #0]
    8ed4:	lsls	r0, r0, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    8ed6:	mov.w	fp, r6, lsr #9
      if (!isRootFixed()) {
    8eda:	bmi.n	8ee8 <FatFile::read(void*, unsigned int)+0x84>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    8edc:	ldrb	r0, [r2, #4]
    8ede:	rsb	r0, r8, r0
    8ee2:	cmp	fp, r0
    8ee4:	it	cs
    8ee6:	movcs	fp, r0
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    8ee8:	cmp	r1, r3
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    8eea:	mov.w	r4, fp, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    8eee:	bhi.n	8f08 <FatFile::read(void*, unsigned int)+0xa4>
    8ef0:	add	r3, fp
    8ef2:	cmp	r1, r3
    8ef4:	bcs.n	8f08 <FatFile::read(void*, unsigned int)+0xa4>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    8ef6:	add.w	r0, r2, #36	; 0x24
    8efa:	str	r1, [sp, #4]
    8efc:	bl	9914 <FatCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->cacheSyncData()) {
    8f00:	cmp	r0, #0
    8f02:	beq.n	8f92 <FatFile::read(void*, unsigned int)+0x12e>
    8f04:	ldr	r2, [r5, #8]
    8f06:	ldr	r1, [sp, #4]
    8f08:	ldr	r0, [r2, #0]
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
    8f0a:	ldr	r2, [r0, #0]
    8f0c:	mov	r3, fp
    8f0e:	ldr.w	fp, [r2, #12]
    8f12:	mov	r2, r7
    8f14:	blx	fp
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    8f16:	cmp	r0, #0
    8f18:	beq.n	8f92 <FatFile::read(void*, unsigned int)+0x12e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    8f1a:	ldr	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    8f1c:	subs	r6, r6, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    8f1e:	add	r3, r4
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    8f20:	add	r7, r4
    m_curPosition += n;
    8f22:	str	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    8f24:	beq.n	8ff0 <FatFile::read(void*, unsigned int)+0x18c>
    8f26:	ldrb	r1, [r5, #0]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    8f28:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    8f2a:	lsls	r0, r1, #26
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    8f2c:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    8f30:	bmi.n	8eb4 <FatFile::read(void*, unsigned int)+0x50>
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    8f32:	ldrb.w	r8, [r2, #5]
    8f36:	and.w	r8, r8, r3, lsr #9
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    } else {
      sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
      if (offset == 0 && sectorOfCluster == 0) {
    8f3a:	cmp.w	fp, #0
    8f3e:	bne.n	8fb2 <FatFile::read(void*, unsigned int)+0x14e>
    8f40:	cmp.w	r8, #0
    8f44:	bne.n	8fb2 <FatFile::read(void*, unsigned int)+0x14e>
        // start of new cluster
        if (m_curPosition == 0) {
    8f46:	cmp	r3, #0
    8f48:	bne.n	8fca <FatFile::read(void*, unsigned int)+0x166>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    8f4a:	lsls	r1, r1, #25
    8f4c:	ite	mi
    8f4e:	ldrmi	r1, [r2, #32]
    8f50:	ldrpl	r1, [r5, #32]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
    8f52:	str	r1, [r5, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    8f54:	mov	r0, r2
    8f56:	bl	9924 <FatPartition::clusterStartSector(unsigned long) const>
    8f5a:	ldr	r2, [r5, #8]
    8f5c:	add.w	r1, r8, r0
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    8f60:	cmp.w	fp, #0
    8f64:	beq.n	8ec0 <FatFile::read(void*, unsigned int)+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    8f66:	add.w	r0, r2, #36	; 0x24
    8f6a:	movs	r2, #0
    8f6c:	bl	98b4 <FatCache::read(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
      if (!pc) {
    8f70:	cbz	r0, 8f92 <FatFile::read(void*, unsigned int)+0x12e>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
      // amount to be read from current sector
      n = m_vol->bytesPerSector() - offset;
    8f72:	rsb	r4, fp, #512	; 0x200
    8f76:	cmp	r4, r6
    8f78:	it	cs
    8f7a:	movcs	r4, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    8f7c:	add.w	r1, r0, fp
    8f80:	mov	r2, r4
    8f82:	mov	r0, r7
    8f84:	bl	c198 <memcpy>
    8f88:	b.n	8f1a <FatFile::read(void*, unsigned int)+0xb6>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
            if (isDir()) {
    8f8a:	ldrb	r3, [r5, #0]
    8f8c:	tst.w	r3, #112	; 0x70
    8f90:	bne.n	8ff2 <FatFile::read(void*, unsigned int)+0x18e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    8f92:	ldrb	r3, [r5, #1]
  return -1;
    8f94:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    8f98:	orr.w	r3, r3, #2
    8f9c:	strb	r3, [r5, #1]
  return -1;
}
    8f9e:	add	sp, #12
    8fa0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    uint32_t tmp32 = m_fileSize - m_curPosition;
    8fa4:	ldr	r3, [r0, #28]
    8fa6:	ldr	r2, [r0, #20]
    8fa8:	subs	r3, r3, r2
    8faa:	cmp	r9, r3
    8fac:	it	cs
    8fae:	movcs	r9, r3
    8fb0:	b.n	8e96 <FatFile::read(void*, unsigned int)+0x32>
    8fb2:	ldr	r1, [r5, #16]
    8fb4:	b.n	8f54 <FatFile::read(void*, unsigned int)+0xf0>
    8fb6:	ldr	r0, [r2, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    8fb8:	ldr	r3, [r0, #0]
    8fba:	mov	r2, r7
    8fbc:	ldr	r3, [r3, #8]
    8fbe:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    8fc0:	cmp	r0, #0
    8fc2:	beq.n	8f92 <FatFile::read(void*, unsigned int)+0x12e>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    8fc4:	mov.w	r4, #512	; 0x200
    8fc8:	b.n	8f1a <FatFile::read(void*, unsigned int)+0xb6>
        // start of new cluster
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
    8fca:	lsls	r3, r1, #28
    8fcc:	bpl.n	8fda <FatFile::read(void*, unsigned int)+0x176>
    8fce:	ldrb	r3, [r5, #2]
    8fd0:	lsls	r4, r3, #25
    8fd2:	bpl.n	8fda <FatFile::read(void*, unsigned int)+0x176>
          m_curCluster++;
    8fd4:	ldr	r1, [r5, #16]
    8fd6:	adds	r1, #1
    8fd8:	b.n	8f52 <FatFile::read(void*, unsigned int)+0xee>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    8fda:	mov	r0, r2
    8fdc:	ldr	r1, [r5, #16]
    8fde:	mov	r2, sl
    8fe0:	bl	9930 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    8fe4:	cmp	r0, #0
    8fe6:	blt.n	8f92 <FatFile::read(void*, unsigned int)+0x12e>
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
    8fe8:	beq.n	8f8a <FatFile::read(void*, unsigned int)+0x126>
    8fea:	ldr	r2, [r5, #8]
    8fec:	ldr	r1, [r5, #16]
    8fee:	b.n	8f54 <FatFile::read(void*, unsigned int)+0xf0>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    8ff0:	movs	r6, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    8ff2:	rsb	r0, r6, r9

fail:
  m_error |= READ_ERROR;
  return -1;
}
    8ff6:	add	sp, #12
    8ff8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00008ffc <FatFile::peek()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
    8ffc:	push	{r4, r5, r6, lr}
    8ffe:	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    9000:	movs	r2, #1
    9002:	add.w	r1, sp, #7
    9006:	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    9008:	ldr	r6, [r0, #20]
  uint32_t curCluster = m_curCluster;
    900a:	ldr	r5, [r0, #16]
    900c:	bl	8e64 <FatFile::read(void*, unsigned int)>
    9010:	cmp	r0, #1
    9012:	it	eq
    9014:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
    9018:	str	r6, [r4, #20]
    901a:	it	ne
    901c:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    9020:	str	r5, [r4, #16]
  return c;
}
    9022:	add	sp, #8
    9024:	pop	{r4, r5, r6, pc}
    9026:	nop

00009028 <FatFile::readDirCache(bool)>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    9028:	push	{r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
    902a:	ldr	r3, [r0, #20]
    902c:	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    9030:	sub	sp, #12
    9032:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    9034:	cbz	r5, 9038 <FatFile::readDirCache(bool)+0x10>
    9036:	cbnz	r1, 905c <FatFile::readDirCache(bool)+0x34>
    int8_t n = read(&n, 1);
    9038:	movs	r2, #1
    903a:	add.w	r1, sp, #7
    903e:	mov	r0, r4
    9040:	bl	8e64 <FatFile::read(void*, unsigned int)>
    9044:	sxtb	r0, r0
    if  (n != 1) {
    9046:	cmp	r0, #1
    9048:	bne.n	9062 <FatFile::readDirCache(bool)+0x3a>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
    904a:	ldr	r3, [r4, #20]
    904c:	adds	r3, #31
    904e:	str	r3, [r4, #20]
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  /** \return Cache sector address. */
  cache_t* buffer() {
    return &m_buffer;
    9050:	ldr	r0, [r4, #8]
    9052:	adds	r0, #48	; 0x30
  } else {
    m_curPosition += 32;
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    9054:	add.w	r0, r0, r5, lsl #5

fail:
  return nullptr;
}
    9058:	add	sp, #12
    905a:	pop	{r4, r5, pc}
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
    905c:	adds	r3, #32
    905e:	str	r3, [r0, #20]
    9060:	b.n	9050 <FatFile::readDirCache(bool)+0x28>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

fail:
  return nullptr;
    9062:	movs	r0, #0
}
    9064:	add	sp, #12
    9066:	pop	{r4, r5, pc}

00009068 <FatFile::rename(FatFile*, char const*)>:
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    9068:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    906c:	ldrb	r5, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    906e:	sub	sp, #104	; 0x68
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    9070:	movs	r4, #0
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    9072:	tst.w	r5, #24
    9076:	strb.w	r4, [sp, #32]
    907a:	strb.w	r4, [sp, #33]	; 0x21
    907e:	strb.w	r4, [sp, #34]	; 0x22
    9082:	strb.w	r4, [sp, #68]	; 0x44
    9086:	strb.w	r4, [sp, #69]	; 0x45
    908a:	strb.w	r4, [sp, #70]	; 0x46
    908e:	beq.n	909a <FatFile::rename(FatFile*, char const*)+0x32>
  if (!USE_LONG_FILE_NAMES && isLFN()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    9090:	ldr	r6, [r0, #8]
    9092:	ldr	r5, [r1, #8]
    9094:	cmp	r6, r5
    9096:	mov	r3, r0
    9098:	beq.n	90a2 <FatFile::rename(FatFile*, char const*)+0x3a>
    goto fail;
  }
  return m_vol->cacheSync();

fail:
  return false;
    909a:	movs	r0, #0
}
    909c:	add	sp, #104	; 0x68
    909e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    90a2:	mov	r5, r3
    90a4:	mov	r8, r2
    90a6:	mov	r6, r1
    90a8:	bl	8a7c <FatFile::sync() [clone .part.40]>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // sync() and cache directory entry
  sync();
  oldFile = *this;
    90ac:	mov	lr, r5
    90ae:	ldmia.w	lr!, {r0, r1, r2, r3}
    90b2:	add	r7, sp, #68	; 0x44
    90b4:	stmia	r7!, {r0, r1, r2, r3}
    90b6:	ldmia.w	lr!, {r0, r1, r2, r3}
    90ba:	stmia	r7!, {r0, r1, r2, r3}
    90bc:	ldr.w	r3, [lr]
    90c0:	str	r3, [r7, #0]
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
    90c2:	mov	r1, r4
    90c4:	mov	r0, r5
    90c6:	bl	8a5c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    90ca:	mov	lr, r0
    90cc:	cmp	r0, #0
    90ce:	beq.n	909a <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    90d0:	ldr.w	r1, [lr, #4]
    90d4:	ldr.w	r2, [lr, #8]
    90d8:	ldr.w	r3, [lr, #12]
    90dc:	ldr	r0, [r0, #0]
  // make directory entry for new path
  if (isFile()) {
    90de:	ldrb.w	ip, [r5]
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    90e2:	mov	r7, sp
    90e4:	stmia	r7!, {r0, r1, r2, r3}
    90e6:	ldr.w	r1, [lr, #20]
    90ea:	ldr.w	r2, [lr, #24]
    90ee:	ldr.w	r3, [lr, #28]
    90f2:	ldr.w	r0, [lr, #16]
  // make directory entry for new path
  if (isFile()) {
    90f6:	and.w	lr, ip, #8
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    90fa:	stmia	r7!, {r0, r1, r2, r3}
  // make directory entry for new path
  if (isFile()) {
    90fc:	and.w	r3, lr, #255	; 0xff
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    9100:	mov	r2, r8
    9102:	mov	r1, r6
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
  // make directory entry for new path
  if (isFile()) {
    9104:	cmp.w	lr, #0
    9108:	beq.w	922e <FatFile::rename(FatFile*, char const*)+0x1c6>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    910c:	movw	r3, #2561	; 0xa01
    9110:	add	r0, sp, #32
    9112:	bl	8d88 <FatFile::open(FatFile*, char const*, int)>
    9116:	cmp	r0, #0
    9118:	beq.n	909a <FatFile::rename(FatFile*, char const*)+0x32>
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    911a:	ldr	r0, [sp, #56]	; 0x38
  m_dirIndex = file.m_dirIndex;
    911c:	ldrh.w	r1, [sp, #36]	; 0x24
  m_lfnOrd = file.m_lfnOrd;
    9120:	ldrb.w	r2, [sp, #35]	; 0x23
  m_dirCluster = file.m_dirCluster;
    9124:	ldr	r3, [sp, #44]	; 0x2c
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    9126:	str	r0, [r5, #24]
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    9128:	movs	r6, #0
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
    912a:	strh	r1, [r5, #4]
  m_lfnOrd = file.m_lfnOrd;
    912c:	strb	r2, [r5, #3]
  m_dirCluster = file.m_dirCluster;
    912e:	str	r3, [r5, #12]
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    9130:	movs	r1, #1
    9132:	mov	r0, r5
  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    9134:	strb.w	r6, [sp, #32]
  file.m_flags = 0;
    9138:	strb.w	r6, [sp, #34]	; 0x22

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    913c:	bl	8a5c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    9140:	cmp	r0, #0
    9142:	beq.n	909a <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    9144:	add	r3, sp, #104	; 0x68
  dir->attributes = entry.attributes;
    9146:	ldrb.w	r2, [sp, #11]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    914a:	ldr.w	r7, [r3, #-91]!
    914e:	str.w	r7, [r0, #13]
    9152:	ldr	r7, [r3, #4]
    9154:	str.w	r7, [r0, #17]
    9158:	ldr	r7, [r3, #8]
    915a:	str.w	r7, [r0, #21]
    915e:	ldr	r7, [r3, #12]
    9160:	str.w	r7, [r0, #25]
    9164:	ldrh	r7, [r3, #16]
    9166:	ldrb	r3, [r3, #18]
    9168:	strh.w	r7, [r0, #29]
    916c:	strb	r3, [r0, #31]
  dir->attributes = entry.attributes;
    916e:	strb	r2, [r0, #11]

  // update dot dot if directory
  if (dirCluster) {
    9170:	cmp	r4, #0
    9172:	beq.n	91ea <FatFile::rename(FatFile*, char const*)+0x182>
    // get new dot dot
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    9174:	mov	r1, r4
    9176:	ldr	r0, [r5, #8]
    9178:	bl	9924 <FatPartition::clusterStartSector(unsigned long) const>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    917c:	ldr	r3, [r5, #8]
    917e:	mov	r1, r0
    9180:	mov	r2, r6
    9182:	add.w	r0, r3, #36	; 0x24
    9186:	bl	98b4 <FatCache::read(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    918a:	cmp	r0, #0
    918c:	beq.n	909a <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&entry, &pc->dir[1], sizeof(entry));
    918e:	mov	r6, r0
    9190:	mov	r7, sp
    9192:	ldr.w	r0, [r6, #32]!
    9196:	ldr	r1, [r6, #4]
    9198:	ldr	r2, [r6, #8]
    919a:	ldr	r3, [r6, #12]
    919c:	stmia	r7!, {r0, r1, r2, r3}
    919e:	ldr	r0, [r6, #16]
    91a0:	ldr	r1, [r6, #20]
    91a2:	ldr	r2, [r6, #24]
    91a4:	ldr	r3, [r6, #28]
    91a6:	stmia	r7!, {r0, r1, r2, r3}

    // free unused cluster
    if (!m_vol->freeChain(dirCluster)) {
    91a8:	mov	r1, r4
    91aa:	ldr	r0, [r5, #8]
    91ac:	bl	9a8c <FatPartition::freeChain(unsigned long)>
    91b0:	cmp	r0, #0
    91b2:	beq.w	909a <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // store new dot dot
    sector = m_vol->clusterStartSector(m_firstCluster);
    91b6:	ldr	r1, [r5, #32]
    91b8:	ldr	r0, [r5, #8]
    91ba:	bl	9924 <FatPartition::clusterStartSector(unsigned long) const>
    91be:	ldr	r3, [r5, #8]
    91c0:	mov	r1, r0
    91c2:	movs	r2, #1
    91c4:	add.w	r0, r3, #36	; 0x24
    91c8:	bl	98b4 <FatCache::read(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    91cc:	mov	r7, r0
    91ce:	cmp	r0, #0
    91d0:	beq.w	909a <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
    91d4:	mov	r4, sp
    91d6:	ldmia	r4!, {r0, r1, r2, r3}
    91d8:	str	r0, [r7, #32]
    91da:	str	r1, [r7, #36]	; 0x24
    91dc:	str	r2, [r7, #40]	; 0x28
    91de:	str	r3, [r7, #44]	; 0x2c
    91e0:	ldmia	r4!, {r0, r1, r2, r3}
    91e2:	str	r0, [r7, #48]	; 0x30
    91e4:	str	r1, [r7, #52]	; 0x34
    91e6:	str	r2, [r7, #56]	; 0x38
    91e8:	str	r3, [r7, #60]	; 0x3c
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    91ea:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    91ec:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    91ee:	movs	r3, #8
  if (!oldFile.remove()) {
    91f0:	add	r0, sp, #68	; 0x44
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    91f2:	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    91f4:	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    91f8:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    91fc:	bl	a110 <FatFile::remove()>
    9200:	cmp	r0, #0
    9202:	beq.w	909a <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return m_vol->cacheSync();
    9206:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    9208:	add.w	r0, r4, #36	; 0x24
    920c:	bl	9914 <FatCache::sync()>
    9210:	cmp	r0, #0
    9212:	beq.w	909a <FatFile::rename(FatFile*, char const*)+0x32>
    9216:	add.w	r0, r4, #560	; 0x230
    921a:	bl	9914 <FatCache::sync()>
    921e:	cmp	r0, #0
    9220:	beq.w	909a <FatFile::rename(FatFile*, char const*)+0x32>
    9224:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    9226:	ldr	r3, [r0, #0]
    9228:	ldr	r3, [r3, #20]
    922a:	blx	r3
    922c:	b.n	909c <FatFile::rename(FatFile*, char const*)+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // don't create missing path prefix components
    if (!file.mkdir(dirFile, newPath, false)) {
    922e:	add	r0, sp, #32
    9230:	bl	8cc4 <FatFile::mkdir(FatFile*, char const*, bool)>
    9234:	cmp	r0, #0
    9236:	beq.w	909a <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
    923a:	ldr	r4, [sp, #64]	; 0x40
    923c:	b.n	911a <FatFile::rename(FatFile*, char const*)+0xb2>
    923e:	nop

00009240 <FatFile::rmdir()>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
  // must be open subdirectory
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    9240:	ldrb	r3, [r0, #0]
    9242:	lsls	r2, r3, #27
    9244:	bpl.n	927c <FatFile::rmdir()+0x3c>
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    9246:	ldr	r3, [r0, #20]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
    9248:	push	{r4, lr}
    924a:	mov	r4, r0
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    924c:	cbz	r3, 925c <FatFile::rmdir()+0x1c>
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    924e:	ldrb	r3, [r0, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    9250:	movs	r2, #0
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    9252:	bic.w	r3, r3, #32
    9256:	strb	r3, [r0, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    9258:	str	r2, [r0, #16]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    925a:	str	r2, [r0, #20]
  }
  rewind();

  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    925c:	movs	r1, #1
    925e:	mov	r0, r4
    9260:	bl	9028 <FatFile::readDirCache(bool)>
    if (!dir) {
    9264:	cbz	r0, 9280 <FatFile::rmdir()+0x40>
      }
      DBG_FAIL_MACRO;
      goto fail;
    }
    // done if past last used entry
    if (dir->name[0] == FAT_NAME_FREE) {
    9266:	ldrb	r3, [r0, #0]
    9268:	cbz	r3, 9286 <FatFile::rmdir()+0x46>
      break;
    }
    // skip empty slot, '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    926a:	cmp	r3, #229	; 0xe5
    926c:	beq.n	925c <FatFile::rmdir()+0x1c>
    926e:	cmp	r3, #46	; 0x2e
    9270:	beq.n	925c <FatFile::rmdir()+0x1c>
      continue;
    }
    // error not empty
    if (isFileOrSubdir(dir)) {
    9272:	ldrb	r3, [r0, #11]
    9274:	lsls	r3, r3, #28
    9276:	bmi.n	925c <FatFile::rmdir()+0x1c>
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
}
    9278:	movs	r0, #0
    927a:	pop	{r4, pc}
    927c:	movs	r0, #0
    927e:	bx	lr
  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    if (!dir) {
      // EOF if no error.
      if (!getError()) {
    9280:	ldrb	r3, [r4, #1]
    9282:	cmp	r3, #0
    9284:	bne.n	9278 <FatFile::rmdir()+0x38>
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    9286:	ldrb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    9288:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
    928a:	orr.w	r3, r3, #2
    928e:	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    9290:	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    9292:	mov	r0, r4

fail:
  return false;
}
    9294:	ldmia.w	sp!, {r4, lr}
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    9298:	b.w	a110 <FatFile::remove()>

0000929c <FatFile::seekSet(unsigned long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    929c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    92a0:	ldrb	r3, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    92a2:	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    92a4:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    92a6:	cbz	r3, 92d6 <FatFile::seekSet(unsigned long)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    92a8:	ldr	r2, [r0, #20]
    92aa:	cmp	r2, r1
    92ac:	mov	r6, r1
    92ae:	beq.n	9326 <FatFile::seekSet(unsigned long)+0x8a>
    return true;
  }
  if (pos == 0) {
    92b0:	cbnz	r1, 92c4 <FatFile::seekSet(unsigned long)+0x28>
    // set position to start of file
    m_curCluster = 0;
    92b2:	str	r1, [r4, #16]
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    92b4:	ldrb	r3, [r4, #2]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    92b6:	str	r6, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    92b8:	bic.w	r3, r3, #32
    92bc:	strb	r3, [r4, #2]
  return true;
    92be:	movs	r0, #1
    92c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    92c4:	lsls	r0, r3, #28
    92c6:	bmi.n	92de <FatFile::seekSet(unsigned long)+0x42>
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
    92c8:	lsls	r1, r3, #26
    92ca:	bpl.n	92e4 <FatFile::seekSet(unsigned long)+0x48>
    92cc:	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
    92ce:	ldrh	r3, [r3, #8]
    92d0:	cmp.w	r6, r3, lsl #5
    92d4:	bls.n	92b4 <FatFile::seekSet(unsigned long)+0x18>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

fail:
  m_curCluster = tmp;
    92d6:	str	r7, [r4, #16]
  return false;
    92d8:	movs	r0, #0
    92da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_fileSize) {
    92de:	ldr	r1, [r4, #28]
    92e0:	cmp	r6, r1
    92e2:	bhi.n	92d6 <FatFile::seekSet(unsigned long)+0x3a>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    92e4:	ldr.w	lr, [r4, #8]
    92e8:	ldrb.w	r5, [lr, #6]
    92ec:	adds	r5, #9
    92ee:	uxtb	r1, r5
    92f0:	subs	r0, r2, #1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    92f2:	subs	r5, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    92f4:	lsrs	r0, r1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    92f6:	lsrs	r5, r1

  if (nNew < nCur || m_curPosition == 0) {
    92f8:	cmp	r0, r5
    92fa:	bhi.n	92fe <FatFile::seekSet(unsigned long)+0x62>
    92fc:	cbnz	r2, 932c <FatFile::seekSet(unsigned long)+0x90>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    92fe:	lsls	r3, r3, #25
    9300:	ite	mi
    9302:	ldrmi.w	r3, [lr, #32]
    9306:	ldrpl	r3, [r4, #32]
    9308:	str	r3, [r4, #16]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    930a:	add.w	r8, r4, #16
    930e:	mov	r2, r8
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    9310:	cmp	r5, #0
    9312:	beq.n	92b4 <FatFile::seekSet(unsigned long)+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    9314:	ldr	r1, [r4, #16]
    9316:	ldr	r0, [r4, #8]
    9318:	bl	9930 <FatPartition::fatGet(unsigned long, unsigned long*)>
    931c:	cmp	r0, #0
    931e:	add.w	r5, r5, #4294967295
    9322:	bgt.n	930e <FatFile::seekSet(unsigned long)+0x72>
    9324:	b.n	92d6 <FatFile::seekSet(unsigned long)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    9326:	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    9328:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    932c:	subs	r5, r5, r0
    932e:	b.n	930a <FatFile::seekSet(unsigned long)+0x6e>

00009330 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    9330:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9334:	mov	r5, r1
    9336:	mov	r8, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    9338:	movs	r1, #0
    933a:	movs	r2, #36	; 0x24
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    933c:	mov	r4, r0
    933e:	mov	r7, r3
    9340:	ldrb.w	r6, [sp, #24]
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    9344:	bl	f32c <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
    9348:	ldr	r0, [r5, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    934a:	ldr	r3, [r5, #32]
    934c:	str	r3, [r4, #12]
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  /** \return Cache sector address. */
  cache_t* buffer() {
    return &m_buffer;
    934e:	add.w	r2, r0, #48	; 0x30
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    9352:	and.w	r3, r8, #15
    9356:	add.w	r2, r2, r3, lsl #5
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
    935a:	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
    935c:	strh.w	r8, [r4, #4]
    9360:	ldrb	r1, [r2, #11]
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    9362:	lsls	r5, r1, #28
    9364:	bmi.n	938c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    9366:	and.w	r1, r1, #23
    936a:	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    936c:	ldrb	r3, [r2, #11]
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
    936e:	strb	r6, [r4, #3]
  if (!isFileOrSubdir(dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    9370:	tst.w	r3, #24
    m_attributes |= FILE_ATTR_FILE;
    9374:	it	eq
    9376:	orreq.w	r1, r1, #8
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    937a:	and.w	r3, r7, #3
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
    937e:	it	eq
    9380:	strbeq	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    9382:	cmp	r3, #1
    9384:	beq.n	9396 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
    9386:	cmp	r3, #2
    9388:	beq.n	93de <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xae>
    938a:	cbz	r3, 93d4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    938c:	movs	r0, #0
    938e:	strb	r0, [r4, #0]
  m_flags = 0;
    9390:	strb	r0, [r4, #2]
  return false;
    9392:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    9396:	movs	r3, #2
    9398:	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    939a:	ldrb	r1, [r4, #0]
    939c:	tst.w	r1, #17
    93a0:	bne.n	938c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    93a2:	sxtb	r1, r3
    93a4:	and.w	r5, r7, #1024	; 0x400
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    93a8:	and.w	r3, r7, #8
    93ac:	orrs	r3, r1
    93ae:	uxtb	r3, r3
    93b0:	strb	r3, [r4, #2]

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    93b2:	ldrh.w	lr, [r2, #20]
    93b6:	ldrh	r1, [r2, #26]
    93b8:	ldr	r6, [r0, #44]	; 0x2c
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);

  m_dirSector = m_vol->cacheSectorNumber();
    93ba:	str	r6, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    93bc:	orr.w	r1, r1, lr, lsl #16

  if (oflag & O_TRUNC) {
    93c0:	cbz	r5, 93e4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    93c2:	cbnz	r1, 93fa <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xca>
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    93c4:	orn	r3, r3, #127	; 0x7f
    93c8:	strb	r3, [r4, #2]
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    93ca:	lsls	r3, r7, #17
    93cc:	bmi.n	93ec <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    93ce:	movs	r0, #1
    93d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
    93d4:	ands.w	r5, r7, #1024	; 0x400
    93d8:	bne.n	938c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    93da:	movs	r1, #1
    93dc:	b.n	93a8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x78>
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    93de:	movs	r3, #3
    93e0:	strb	r3, [r4, #2]
      break;
    93e2:	b.n	939a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
    93e4:	str	r1, [r4, #32]
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    93e6:	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    93e8:	str	r3, [r4, #28]
    93ea:	b.n	93ca <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9a>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    93ec:	ldr	r1, [r4, #28]
    93ee:	mov	r0, r4
    93f0:	bl	929c <FatFile::seekSet(unsigned long)>
    93f4:	cmp	r0, #0
    93f6:	bne.n	93ce <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9e>
    93f8:	b.n	938c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    93fa:	bl	9a8c <FatPartition::freeChain(unsigned long)>
    93fe:	cmp	r0, #0
    9400:	beq.n	938c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    9402:	ldrb	r3, [r4, #2]
    9404:	b.n	93c4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
    9406:	nop

00009408 <FatFile::openNext(FatFile*, int)>:
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    9408:	ldrb	r3, [r0, #0]
    940a:	cbnz	r3, 9414 <FatFile::openNext(FatFile*, int)+0xc>
    940c:	ldrb	r3, [r1, #0]
    940e:	tst.w	r3, #112	; 0x70
    9412:	bne.n	9418 <FatFile::openNext(FatFile*, int)+0x10>
      lfnOrd = 0;
    }
  }

fail:
  return false;
    9414:	movs	r0, #0
}
    9416:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    9418:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    941c:	ldr	r6, [r1, #20]
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    941e:	ands.w	r7, r6, #31
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    9422:	sub	sp, #8
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    9424:	bne.n	946a <FatFile::openNext(FatFile*, int)+0x62>
    9426:	mov	r9, r2
    9428:	mov	r5, r1
    942a:	mov	r8, r0
    942c:	mov	sl, r7
    942e:	b.n	9434 <FatFile::openNext(FatFile*, int)+0x2c>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
        lfnOrd = ldir->order & 0X1F;
        checksum = ldir->checksum;
      }
    } else {
      lfnOrd = 0;
    9430:	movs	r7, #0
    9432:	ldr	r6, [r5, #20]
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    DirFat_t* dir = dirFile->readDirCache();
    9434:	movs	r1, #0
    9436:	mov	r0, r5
    9438:	bl	9028 <FatFile::readDirCache(bool)>
    if (!dir) {
    943c:	cbz	r0, 946a <FatFile::openNext(FatFile*, int)+0x62>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == FAT_NAME_FREE) {
    943e:	ldrb	r3, [r0, #0]
    9440:	cbz	r3, 946a <FatFile::openNext(FatFile*, int)+0x62>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    9442:	cmp	r3, #46	; 0x2e
    9444:	beq.n	9430 <FatFile::openNext(FatFile*, int)+0x28>
    9446:	cmp	r3, #229	; 0xe5
    9448:	beq.n	9430 <FatFile::openNext(FatFile*, int)+0x28>
    944a:	ldrb	r2, [r0, #11]
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
    944c:	lsls	r1, r2, #28
    944e:	bpl.n	9472 <FatFile::openNext(FatFile*, int)+0x6a>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (isLongName(dir)) {
    9450:	cmp	r2, #15
    9452:	bne.n	9430 <FatFile::openNext(FatFile*, int)+0x28>
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    9454:	lsls	r2, r3, #25
    9456:	bpl.n	9432 <FatFile::openNext(FatFile*, int)+0x2a>
        lfnOrd = ldir->order & 0X1F;
    9458:	and.w	r7, r3, #31
        checksum = ldir->checksum;
    945c:	ldrb.w	sl, [r0, #13]
    9460:	b.n	9432 <FatFile::openNext(FatFile*, int)+0x2a>
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    9462:	bl	9cb4 <FatFile::lfnChecksum(unsigned char*)>
    9466:	cmp	r0, sl
    9468:	beq.n	9476 <FatFile::openNext(FatFile*, int)+0x6e>
      lfnOrd = 0;
    }
  }

fail:
  return false;
    946a:	movs	r0, #0
}
    946c:	add	sp, #8
    946e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    9472:	cmp	r7, #0
    9474:	bne.n	9462 <FatFile::openNext(FatFile*, int)+0x5a>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    9476:	str	r7, [sp, #0]
    9478:	mov	r3, r9
    947a:	ubfx	r2, r6, #5, #16
    947e:	mov	r1, r5
    9480:	mov	r0, r8
    9482:	bl	9330 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    9486:	b.n	946c <FatFile::openNext(FatFile*, int)+0x64>

00009488 <FatFile::sync()>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    9488:	ldrb	r3, [r0, #0]
    948a:	cbz	r3, 9490 <FatFile::sync()+0x8>
    948c:	b.w	8a7c <FatFile::sync() [clone .part.40]>
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
    9490:	movs	r0, #1
    9492:	bx	lr

00009494 <FatFile::truncate()>:
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    9494:	ldrb	r3, [r0, #2]
    9496:	lsls	r3, r3, #30
    9498:	bpl.n	94d0 <FatFile::truncate()+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    949a:	ldr	r3, [r0, #32]
    949c:	cbz	r3, 94cc <FatFile::truncate()+0x38>

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    949e:	push	{r4, lr}
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    94a0:	ldr	r1, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    94a2:	sub	sp, #8
    94a4:	mov	r4, r0
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    94a6:	cbnz	r1, 94e6 <FatFile::truncate()+0x52>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    94a8:	str	r3, [sp, #4]
    m_firstCluster = 0;
    94aa:	str	r1, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    94ac:	mov	r1, r3
    94ae:	ldr	r0, [r4, #8]
    94b0:	bl	9a8c <FatPartition::freeChain(unsigned long)>
    94b4:	cbz	r0, 94e2 <FatFile::truncate()+0x4e>
    }
  }
  m_fileSize = m_curPosition;

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    94b6:	ldrb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    94b8:	ldrb	r2, [r4, #0]
    if (!m_vol->freeChain(toFree)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_fileSize = m_curPosition;
    94ba:	ldr	r1, [r4, #20]
    94bc:	str	r1, [r4, #28]

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    94be:	orn	r3, r3, #127	; 0x7f
    94c2:	strb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    94c4:	cbnz	r2, 9502 <FatFile::truncate()+0x6e>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    94c6:	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    94c8:	add	sp, #8
    94ca:	pop	{r4, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    94cc:	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    94ce:	bx	lr
    goto fail;
  }
  return true;

 fail:
  return false;
    94d0:	movs	r0, #0
}
    94d2:	bx	lr
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    94d4:	mvn.w	r2, #4026531840	; 0xf0000000
    94d8:	ldr	r1, [r4, #16]
    94da:	ldr	r0, [r4, #8]
    94dc:	bl	99a0 <FatPartition::fatPut(unsigned long, unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
      // current cluster is end of chain
      if (!m_vol->fatPutEOC(m_curCluster)) {
    94e0:	cbnz	r0, 94fa <FatFile::truncate()+0x66>
    goto fail;
  }
  return true;

 fail:
  return false;
    94e2:	movs	r0, #0
    94e4:	b.n	94c8 <FatFile::truncate()+0x34>
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    toFree = 0;
    94e6:	add	r2, sp, #8
    94e8:	movs	r3, #0
    94ea:	str.w	r3, [r2, #-4]!
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    94ee:	ldr	r0, [r0, #8]
    94f0:	bl	9930 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    94f4:	cmp	r0, #0
    94f6:	blt.n	94e2 <FatFile::truncate()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
    94f8:	bne.n	94d4 <FatFile::truncate()+0x40>
    }
  } else {
    toFree = m_firstCluster;
    m_firstCluster = 0;
  }
  if (toFree) {
    94fa:	ldr	r3, [sp, #4]
    94fc:	cmp	r3, #0
    94fe:	beq.n	94b6 <FatFile::truncate()+0x22>
    9500:	b.n	94ac <FatFile::truncate()+0x18>
    9502:	mov	r0, r4
    9504:	bl	8a7c <FatFile::sync() [clone .part.40]>
    9508:	b.n	94c8 <FatFile::truncate()+0x34>
    950a:	nop

0000950c <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    950c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9510:	ldrb	r3, [r0, #2]
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    9512:	lsls	r5, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    9514:	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    9516:	bmi.n	9528 <FatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    9518:	ldrb	r3, [r4, #1]
    951a:	orr.w	r3, r3, #1
    951e:	strb	r3, [r4, #1]
  return -1;
    9520:	mov.w	r0, #4294967295
    9524:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9528:	mov	r9, r2
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    952a:	lsls	r2, r3, #28
    952c:	mov	r8, r1
    952e:	bmi.w	96b0 <FatFile::write(void const*, unsigned int)+0x1a4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    9532:	ldr	r2, [r4, #20]
    9534:	mvns	r3, r2
    9536:	cmp	r9, r3
    9538:	bhi.n	9518 <FatFile::write(void const*, unsigned int)+0xc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    953a:	cmp.w	r9, #0
    953e:	beq.w	96be <FatFile::write(void const*, unsigned int)+0x1b2>
    9542:	mov	r6, r9
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    9544:	mov.w	sl, #0
    9548:	b.n	95ac <FatFile::write(void const*, unsigned int)+0xa0>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    954a:	cmp	r1, #0
    954c:	beq.n	9642 <FatFile::write(void const*, unsigned int)+0x136>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    954e:	ldrb	r3, [r4, #2]
    9550:	lsls	r3, r3, #25
    9552:	bpl.n	9650 <FatFile::write(void const*, unsigned int)+0x144>
    9554:	ldr	r3, [r4, #28]
    9556:	cmp	r3, r2
    9558:	bls.n	9650 <FatFile::write(void const*, unsigned int)+0x144>
          m_curCluster++;
    955a:	adds	r1, #1
    955c:	str	r1, [r4, #16]
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    955e:	bl	9924 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    9562:	cmp.w	r6, #512	; 0x200
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    9566:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    9568:	bcs.n	95e6 <FatFile::write(void const*, unsigned int)+0xda>
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    956a:	ldr	r2, [r4, #20]
    956c:	ldr	r3, [r4, #28]
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    956e:	ldr	r0, [r4, #8]
    9570:	cmp.w	r6, #512	; 0x200
    9574:	mov	r5, r6
    9576:	it	cs
    9578:	movcs.w	r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    957c:	cmp	r2, r3
    957e:	bcc.n	9672 <FatFile::write(void const*, unsigned int)+0x166>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    9580:	movs	r2, #5
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    9582:	adds	r0, #36	; 0x24
    9584:	bl	98b4 <FatCache::read(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
    9588:	cmp	r0, #0
    958a:	beq.n	9518 <FatFile::write(void const*, unsigned int)+0xc>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    958c:	add	r0, r7
    958e:	mov	r2, r5
    9590:	mov	r1, r8
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    9592:	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    9594:	bl	c198 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    9598:	cmp.w	r7, #512	; 0x200
    959c:	beq.n	968e <FatFile::write(void const*, unsigned int)+0x182>
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    959e:	ldr	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    95a0:	subs	r6, r6, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    95a2:	add	r2, r5
    src += n;
    95a4:	add	r8, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    95a6:	str	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    95a8:	beq.w	96be <FatFile::write(void const*, unsigned int)+0x1b2>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    95ac:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    95ae:	ldr	r1, [r4, #16]
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    95b0:	ldrb	r3, [r0, #5]
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    95b2:	ands.w	r5, r3, r2, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    95b6:	ubfx	r7, r2, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    95ba:	bne.n	95d6 <FatFile::write(void const*, unsigned int)+0xca>
    95bc:	cmp	r7, #0
    95be:	beq.n	954a <FatFile::write(void const*, unsigned int)+0x3e>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    95c0:	bl	9924 <FatPartition::clusterStartSector(unsigned long) const>
    95c4:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    95c6:	rsb	r5, r7, #512	; 0x200
    95ca:	cmp	r5, r6
    95cc:	it	cs
    95ce:	movcs	r5, r6
    95d0:	ldr	r0, [r4, #8]
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
    95d2:	movs	r2, #1
    95d4:	b.n	9582 <FatFile::write(void const*, unsigned int)+0x76>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    95d6:	bl	9924 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;
    95da:	adds	r1, r5, r0

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    95dc:	cmp	r7, #0
    95de:	bne.n	95c6 <FatFile::write(void const*, unsigned int)+0xba>
    95e0:	cmp.w	r6, #512	; 0x200
    95e4:	bcc.n	956a <FatFile::write(void const*, unsigned int)+0x5e>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    95e6:	cmp.w	r6, #1024	; 0x400
    95ea:	ldr	r2, [r4, #8]
    95ec:	bcc.n	9626 <FatFile::write(void const*, unsigned int)+0x11a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    95ee:	ldrb	r3, [r2, #4]
    95f0:	ldr	r7, [r2, #44]	; 0x2c
    95f2:	subs	r3, r3, r5
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    95f4:	lsrs	r0, r6, #9
    95f6:	cmp	r3, r0
    95f8:	it	cs
    95fa:	movcs	r3, r0
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    95fc:	cmp	r7, r1
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    95fe:	mov.w	r5, r3, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    9602:	bcc.n	9616 <FatFile::write(void const*, unsigned int)+0x10a>
    9604:	add	r7, r3
    9606:	cmp	r7, r1
    9608:	bls.n	9616 <FatFile::write(void const*, unsigned int)+0x10a>
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    960a:	strb.w	sl, [r2, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
    960e:	mov.w	r0, #4294967295
    9612:	str	r0, [r2, #44]	; 0x2c
    9614:	ldr	r2, [r4, #8]
    9616:	ldr	r0, [r2, #0]
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    return m_blockDev->writeSectors(sector, src, ns);
    9618:	ldr	r2, [r0, #0]
    961a:	ldr	r7, [r2, #28]
    961c:	mov	r2, r8
    961e:	blx	r7
        // Invalidate cache if cache sector is in the range.
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, nSector)) {
    9620:	cmp	r0, #0
    9622:	bne.n	959e <FatFile::write(void const*, unsigned int)+0x92>
    9624:	b.n	9518 <FatFile::write(void const*, unsigned int)+0xc>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->cacheSectorNumber() == sector) {
    9626:	ldr	r3, [r2, #44]	; 0x2c
    9628:	cmp	r3, r1
    962a:	beq.n	9680 <FatFile::write(void const*, unsigned int)+0x174>
    962c:	ldr	r0, [r2, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    962e:	ldr	r3, [r0, #0]
    9630:	mov	r2, r8
    9632:	ldr	r3, [r3, #24]
    9634:	blx	r3
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    9636:	cmp	r0, #0
    9638:	beq.w	9518 <FatFile::write(void const*, unsigned int)+0xc>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    963c:	mov.w	r5, #512	; 0x200
    9640:	b.n	959e <FatFile::write(void const*, unsigned int)+0x92>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    9642:	ldr	r1, [r4, #32]
    9644:	cbz	r1, 969c <FatFile::write(void const*, unsigned int)+0x190>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    9646:	str	r1, [r4, #16]
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    9648:	bl	9924 <FatPartition::clusterStartSector(unsigned long) const>
    964c:	mov	r1, r0
    964e:	b.n	95e0 <FatFile::write(void const*, unsigned int)+0xd4>
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    9650:	add.w	r2, r4, #16
    9654:	bl	9930 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    9658:	cmp	r0, #0
    965a:	blt.w	9518 <FatFile::write(void const*, unsigned int)+0xc>
        if (fg < 0) {
          DBG_FAIL_MACRO;
          goto fail;
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
    965e:	bne.n	966c <FatFile::write(void const*, unsigned int)+0x160>
          // add cluster if at end of chain
          if (!addCluster()) {
    9660:	mov	r0, r4
    9662:	bl	8994 <FatFile::addCluster()>
    9666:	cmp	r0, #0
    9668:	beq.w	9518 <FatFile::write(void const*, unsigned int)+0xc>
    966c:	ldr	r0, [r4, #8]
    966e:	ldr	r1, [r4, #16]
    9670:	b.n	9648 <FatFile::write(void const*, unsigned int)+0x13c>
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    9672:	ldrb	r3, [r4, #2]
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    9674:	tst.w	r3, #32
    9678:	ite	eq
    967a:	moveq	r2, #1
    967c:	movne	r2, #5
    967e:	b.n	9582 <FatFile::write(void const*, unsigned int)+0x76>
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    9680:	strb.w	sl, [r2, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
    9684:	mov.w	r3, #4294967295
    9688:	str	r3, [r2, #44]	; 0x2c
    968a:	ldr	r2, [r4, #8]
    968c:	b.n	962c <FatFile::write(void const*, unsigned int)+0x120>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    968e:	ldr	r0, [r4, #8]
    9690:	adds	r0, #36	; 0x24
    9692:	bl	9914 <FatCache::sync()>
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->cacheSyncData()) {
    9696:	cmp	r0, #0
    9698:	bne.n	959e <FatFile::write(void const*, unsigned int)+0x92>
    969a:	b.n	9518 <FatFile::write(void const*, unsigned int)+0xc>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    969c:	mov	r0, r4
    969e:	bl	8994 <FatFile::addCluster()>
    96a2:	cmp	r0, #0
    96a4:	beq.w	9518 <FatFile::write(void const*, unsigned int)+0xc>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    96a8:	ldr	r1, [r4, #16]
    96aa:	str	r1, [r4, #32]
    96ac:	ldr	r0, [r4, #8]
    96ae:	b.n	9648 <FatFile::write(void const*, unsigned int)+0x13c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_fileSize)) {
    96b0:	ldr	r1, [r0, #28]
    96b2:	bl	929c <FatFile::seekSet(unsigned long)>
    96b6:	cmp	r0, #0
    96b8:	beq.w	9518 <FatFile::write(void const*, unsigned int)+0xc>
    96bc:	b.n	9532 <FatFile::write(void const*, unsigned int)+0x26>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    96be:	ldr	r3, [r4, #28]
    96c0:	cmp	r3, r2
    96c2:	bcc.n	96d8 <FatFile::write(void const*, unsigned int)+0x1cc>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    96c4:	ldr	r3, [pc, #40]	; (96f0 <FatFile::write(void const*, unsigned int)+0x1e4>)
    96c6:	ldr	r3, [r3, #0]
    96c8:	cbz	r3, 96e8 <FatFile::write(void const*, unsigned int)+0x1dc>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    96ca:	ldrb	r3, [r4, #2]
    96cc:	orn	r3, r3, #127	; 0x7f
    96d0:	strb	r3, [r4, #2]
    96d2:	mov	r0, r9
    96d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    96d8:	ldrb	r3, [r4, #2]
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    96da:	str	r2, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    96dc:	orn	r3, r3, #127	; 0x7f
    96e0:	strb	r3, [r4, #2]
    96e2:	mov	r0, r9
    96e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    96e8:	mov	r0, r9
    96ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    96ee:	nop
    96f0:	.word	0x1fff1f34

000096f4 <FatFile::printModifyDateTime(Print*)>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::printModifyDateTime(print_t* pr) {
    96f4:	push	{r4, lr}
    96f6:	sub	sp, #32
    96f8:	mov	r4, r1
  DirFat_t dir;
  if (!dirEntry(&dir)) {
    96fa:	mov	r1, sp
    96fc:	bl	8b30 <FatFile::dirEntry(DirFat_t*)>
    9700:	cbz	r0, 9710 <FatFile::printModifyDateTime(Print*)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return fsPrintDateTime(pr, getLe16(dir.modifyDate), getLe16(dir.modifyTime));
    9702:	mov	r0, r4
    9704:	ldrh.w	r2, [sp, #22]
    9708:	ldrh.w	r1, [sp, #24]
    970c:	bl	6d9c <fsPrintDateTime(Print*, unsigned short, unsigned short)>

fail:
  return 0;
}
    9710:	add	sp, #32
    9712:	pop	{r4, pc}

00009714 <FatFile::printFileSize(Print*)>:
//------------------------------------------------------------------------------
size_t FatFile::printFileSize(print_t* pr) {
    9714:	push	{r4, r5, lr}
    9716:	sub	sp, #20
  char buf[11];
  char *ptr = buf + sizeof(buf);
  *--ptr = 0;
    9718:	movs	r3, #0

fail:
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::printFileSize(print_t* pr) {
    971a:	mov	r5, r1
  char buf[11];
  char *ptr = buf + sizeof(buf);
  *--ptr = 0;
  ptr = fmtBase10(ptr, fileSize());
    971c:	ldr	r1, [r0, #28]
}
//------------------------------------------------------------------------------
size_t FatFile::printFileSize(print_t* pr) {
  char buf[11];
  char *ptr = buf + sizeof(buf);
  *--ptr = 0;
    971e:	strb.w	r3, [sp, #14]
  ptr = fmtBase10(ptr, fileSize());
    9722:	add.w	r0, sp, #14
    9726:	bl	6cc0 <fmtBase10(char*, unsigned long)>
    972a:	add	r4, sp, #4
  while (ptr > buf) {
    972c:	cmp	r0, r4
    *--ptr = ' ';
    972e:	it	hi
    9730:	movhi	r3, #32
size_t FatFile::printFileSize(print_t* pr) {
  char buf[11];
  char *ptr = buf + sizeof(buf);
  *--ptr = 0;
  ptr = fmtBase10(ptr, fileSize());
  while (ptr > buf) {
    9732:	bls.n	973c <FatFile::printFileSize(Print*)+0x28>
    *--ptr = ' ';
    9734:	strb.w	r3, [r0, #-1]!
size_t FatFile::printFileSize(print_t* pr) {
  char buf[11];
  char *ptr = buf + sizeof(buf);
  *--ptr = 0;
  ptr = fmtBase10(ptr, fileSize());
  while (ptr > buf) {
    9738:	cmp	r0, r4
    973a:	bne.n	9734 <FatFile::printFileSize(Print*)+0x20>
    973c:	mov	r0, r4
    973e:	bl	f940 <strlen>
    9742:	ldr	r3, [r5, #0]
    9744:	mov	r2, r0
    9746:	mov	r1, r4
    9748:	ldr	r3, [r3, #4]
    974a:	mov	r0, r5
    974c:	blx	r3
    *--ptr = ' ';
  }
  return pr->write(buf);
}
    974e:	add	sp, #20
    9750:	pop	{r4, r5, pc}
    9752:	nop

00009754 <FatFile::ls(Print*, unsigned char, unsigned char)>:
  }
  pr->write('\r');
  pr->write('\n');
}
//------------------------------------------------------------------------------
bool FatFile::ls(print_t* pr, uint8_t flags, uint8_t indent) {
    9754:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  FatFile file;
  if (!isDir()) {
    9758:	ldrb	r4, [r0, #0]
  }
  pr->write('\r');
  pr->write('\n');
}
//------------------------------------------------------------------------------
bool FatFile::ls(print_t* pr, uint8_t flags, uint8_t indent) {
    975a:	sub	sp, #40	; 0x28
    975c:	movs	r6, #0
  FatFile file;
  if (!isDir()) {
    975e:	ands.w	r4, r4, #112	; 0x70
    9762:	strb.w	r6, [sp, #4]
    9766:	strb.w	r6, [sp, #5]
    976a:	strb.w	r6, [sp, #6]
    976e:	bne.n	9778 <FatFile::ls(Print*, unsigned char, unsigned char)+0x24>
    goto fail;
  }
  return true;

 fail:
  return false;
    9770:	mov	r0, r4
}
    9772:	add	sp, #40	; 0x28
    9774:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9778:	mov	r8, r2
    977a:	mov	r9, r0
    977c:	mov	r5, r1
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    977e:	mov	r1, r6
    9780:	mov	r7, r3
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
        pr->write(' ');
      }
      if (flags & LS_DATE) {
    9782:	and.w	sl, r8, #2
    9786:	bl	929c <FatFile::seekSet(unsigned long)>
  if (!isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    978a:	movs	r2, #0
    978c:	mov	r1, r9
    978e:	add	r0, sp, #4
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
        pr->write(' ');
      }
      if (flags & LS_DATE) {
    9790:	uxtb.w	sl, sl
  if (!isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    9794:	bl	9408 <FatFile::openNext(FatFile*, int)>
    9798:	cmp	r0, #0
    979a:	beq.n	9824 <FatFile::ls(Print*, unsigned char, unsigned char)+0xd0>
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
    979c:	ldrb.w	r3, [sp, #4]
    97a0:	lsls	r3, r3, #30
    97a2:	bpl.n	97aa <FatFile::ls(Print*, unsigned char, unsigned char)+0x56>
    97a4:	tst.w	r8, #1
    97a8:	beq.n	9810 <FatFile::ls(Print*, unsigned char, unsigned char)+0xbc>
      for (uint8_t i = 0; i < indent; i++) {
    97aa:	movs	r4, #0
    97ac:	cbz	r7, 97c0 <FatFile::ls(Print*, unsigned char, unsigned char)+0x6c>
        pr->write(' ');
    97ae:	ldr	r3, [r5, #0]
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
    97b0:	adds	r4, #1
        pr->write(' ');
    97b2:	movs	r1, #32
    97b4:	ldr	r6, [r3, #0]
    97b6:	mov	r0, r5
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
    97b8:	uxtb	r4, r4
        pr->write(' ');
    97ba:	blx	r6
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
    97bc:	cmp	r7, r4
    97be:	bne.n	97ae <FatFile::ls(Print*, unsigned char, unsigned char)+0x5a>
        pr->write(' ');
      }
      if (flags & LS_DATE) {
    97c0:	cmp.w	sl, #0
    97c4:	bne.n	9854 <FatFile::ls(Print*, unsigned char, unsigned char)+0x100>
        file.printModifyDateTime(pr);
        pr->write(' ');
      }
      if (flags & LS_SIZE) {
    97c6:	tst.w	r8, #4
    97ca:	bne.n	9840 <FatFile::ls(Print*, unsigned char, unsigned char)+0xec>
        file.printFileSize(pr);
        pr->write(' ');
      }
      file.printName(pr);
    97cc:	mov	r1, r5
    97ce:	add	r0, sp, #4
    97d0:	bl	a054 <FatFile::printName(Print*)>
      if (file.isDir()) {
    97d4:	ldrb.w	r3, [sp, #4]
    97d8:	tst.w	r3, #112	; 0x70
    97dc:	bne.n	9834 <FatFile::ls(Print*, unsigned char, unsigned char)+0xe0>
        pr->write('/');
      }
      pr->write('\r');
    97de:	ldr	r3, [r5, #0]
    97e0:	movs	r1, #13
    97e2:	ldr	r3, [r3, #0]
    97e4:	mov	r0, r5
    97e6:	blx	r3
      pr->write('\n');
    97e8:	ldr	r3, [r5, #0]
    97ea:	movs	r1, #10
    97ec:	ldr	r3, [r3, #0]
    97ee:	mov	r0, r5
    97f0:	blx	r3
      if ((flags & LS_R) && file.isDir()) {
    97f2:	tst.w	r8, #8
    97f6:	beq.n	9810 <FatFile::ls(Print*, unsigned char, unsigned char)+0xbc>
    97f8:	ldrb.w	r3, [sp, #4]
    97fc:	tst.w	r3, #112	; 0x70
    9800:	beq.n	9810 <FatFile::ls(Print*, unsigned char, unsigned char)+0xbc>
        file.ls(pr, flags, indent + 2);
    9802:	adds	r3, r7, #2
    9804:	uxtb	r3, r3
    9806:	mov	r2, r8
    9808:	mov	r1, r5
    980a:	add	r0, sp, #4
    980c:	bl	9754 <FatFile::ls(Print*, unsigned char, unsigned char)>
      }
    }
    file.close();
    9810:	add	r0, sp, #4
    9812:	bl	8b10 <FatFile::close()>
  if (!isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    9816:	movs	r2, #0
    9818:	mov	r1, r9
    981a:	add	r0, sp, #4
    981c:	bl	9408 <FatFile::openNext(FatFile*, int)>
    9820:	cmp	r0, #0
    9822:	bne.n	979c <FatFile::ls(Print*, unsigned char, unsigned char)+0x48>
        file.ls(pr, flags, indent + 2);
      }
    }
    file.close();
  }
  if (getError()) {
    9824:	ldrb.w	r0, [r9, #1]
    9828:	clz	r0, r0
    982c:	lsrs	r0, r0, #5
  }
  return true;

 fail:
  return false;
}
    982e:	add	sp, #40	; 0x28
    9830:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        file.printFileSize(pr);
        pr->write(' ');
      }
      file.printName(pr);
      if (file.isDir()) {
        pr->write('/');
    9834:	ldr	r3, [r5, #0]
    9836:	movs	r1, #47	; 0x2f
    9838:	ldr	r3, [r3, #0]
    983a:	mov	r0, r5
    983c:	blx	r3
    983e:	b.n	97de <FatFile::ls(Print*, unsigned char, unsigned char)+0x8a>
      if (flags & LS_DATE) {
        file.printModifyDateTime(pr);
        pr->write(' ');
      }
      if (flags & LS_SIZE) {
        file.printFileSize(pr);
    9840:	mov	r1, r5
    9842:	add	r0, sp, #4
    9844:	bl	9714 <FatFile::printFileSize(Print*)>
        pr->write(' ');
    9848:	ldr	r3, [r5, #0]
    984a:	movs	r1, #32
    984c:	ldr	r3, [r3, #0]
    984e:	mov	r0, r5
    9850:	blx	r3
    9852:	b.n	97cc <FatFile::ls(Print*, unsigned char, unsigned char)+0x78>
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
        pr->write(' ');
      }
      if (flags & LS_DATE) {
        file.printModifyDateTime(pr);
    9854:	mov	r1, r5
    9856:	add	r0, sp, #4
    9858:	bl	96f4 <FatFile::printModifyDateTime(Print*)>
        pr->write(' ');
    985c:	ldr	r3, [r5, #0]
    985e:	movs	r1, #32
    9860:	ldr	r3, [r3, #0]
    9862:	mov	r0, r5
    9864:	blx	r3
    9866:	b.n	97c6 <FatFile::ls(Print*, unsigned char, unsigned char)+0x72>

00009868 <FatCache::sync() [clone .part.8]>:
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    9868:	push	{r3, r4, r5, r6, r7, lr}
    986a:	ldr	r3, [r0, #4]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    986c:	ldr	r1, [r0, #8]
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    986e:	add.w	r6, r0, #12
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    9872:	mov	r4, r0
    9874:	ldr	r0, [r3, #0]
    9876:	ldr	r3, [r0, #0]
    9878:	mov	r2, r6
    987a:	ldr	r3, [r3, #24]
    987c:	blx	r3
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    987e:	cbz	r0, 9892 <FatCache::sync() [clone .part.8]+0x2a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    9880:	ldrb	r3, [r4, #0]
    9882:	lsls	r2, r3, #30
    9884:	mov	r5, r0
    9886:	bmi.n	9898 <FatCache::sync() [clone .part.8]+0x30>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    9888:	bic.w	r3, r3, #1
    988c:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    988e:	mov	r0, r5
    9890:	pop	{r3, r4, r5, r6, r7, pc}
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
    9892:	movs	r5, #0
}
    9894:	mov	r0, r5
    9896:	pop	{r3, r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    9898:	ldr	r3, [r4, #4]
    989a:	ldr	r1, [r4, #8]
    989c:	ldr	r0, [r3, #0]
    989e:	ldr	r7, [r3, #16]
    98a0:	ldr	r3, [r0, #0]
    98a2:	mov	r2, r6
    98a4:	add	r1, r7
    98a6:	ldr	r3, [r3, #24]
    98a8:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    98aa:	cmp	r0, #0
    98ac:	beq.n	9892 <FatCache::sync() [clone .part.8]+0x2a>
    98ae:	ldrb	r3, [r4, #0]
    98b0:	b.n	9888 <FatCache::sync() [clone .part.8]+0x20>
    98b2:	nop

000098b4 <FatCache::read(unsigned long, unsigned char)>:
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    98b4:	push	{r3, r4, r5, r6, r7, lr}
  if (m_lbn != sector) {
    98b6:	ldr	r3, [r0, #8]
    98b8:	cmp	r3, r1
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    98ba:	mov	r6, r0
    98bc:	mov	r4, r2
  if (m_lbn != sector) {
    98be:	beq.n	98e0 <FatCache::read(unsigned long, unsigned char)+0x2c>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    98c0:	ldrb	r3, [r0, #0]
    98c2:	lsls	r2, r3, #31
    98c4:	mov	r7, r1
    98c6:	bmi.n	98ee <FatCache::read(unsigned long, unsigned char)+0x3a>
  if (m_lbn != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    98c8:	lsls	r3, r4, #29
    98ca:	bpl.n	98fa <FatCache::read(unsigned long, unsigned char)+0x46>
    98cc:	add.w	r5, r6, #12
    98d0:	movs	r3, #0
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    98d2:	and.w	r4, r4, #3
    98d6:	orrs	r4, r3
    98d8:	strb	r4, [r6, #0]
    98da:	mov	r0, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    98dc:	str	r7, [r6, #8]
  return &m_buffer;

fail:

  return nullptr;
}
    98de:	pop	{r3, r4, r5, r6, r7, pc}
    98e0:	ldrsb.w	r3, [r0], #12
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    98e4:	and.w	r4, r4, #3
    98e8:	orrs	r4, r3
    98ea:	strb	r4, [r6, #0]
  return &m_buffer;

fail:

  return nullptr;
}
    98ec:	pop	{r3, r4, r5, r6, r7, pc}
    98ee:	bl	9868 <FatCache::sync() [clone .part.8]>
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    if (!sync()) {
    98f2:	cmp	r0, #0
    98f4:	bne.n	98c8 <FatCache::read(unsigned long, unsigned char)+0x14>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_buffer;

fail:

  return nullptr;
    98f6:	movs	r0, #0
    98f8:	pop	{r3, r4, r5, r6, r7, pc}
    98fa:	ldr	r3, [r6, #4]
    98fc:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    98fe:	ldr	r3, [r0, #0]
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    9900:	add.w	r5, r6, #12
    9904:	ldr	r3, [r3, #8]
    9906:	mov	r2, r5
    9908:	mov	r1, r7
    990a:	blx	r3
    990c:	cmp	r0, #0
    990e:	bne.n	98d0 <FatCache::read(unsigned long, unsigned char)+0x1c>
    9910:	b.n	98f6 <FatCache::read(unsigned long, unsigned char)+0x42>
    9912:	nop

00009914 <FatCache::sync()>:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    9914:	ldrb	r3, [r0, #0]
    9916:	lsls	r3, r3, #31
    9918:	bmi.n	991e <FatCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    991a:	movs	r0, #1
    991c:	bx	lr
    991e:	b.w	9868 <FatCache::sync() [clone .part.8]>
    9922:	nop

00009924 <FatPartition::clusterStartSector(unsigned long) const>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    9924:	ldrb	r3, [r0, #6]
    9926:	ldr	r0, [r0, #20]
    9928:	subs	r1, #2
    992a:	lsls	r1, r3
}
    992c:	add	r0, r1
    992e:	bx	lr

00009930 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    9930:	cmp	r1, #1
    9932:	bls.n	9998 <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
    9934:	ldr	r3, [r0, #28]
    9936:	cmp	r1, r3
    9938:	bhi.n	9998 <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    993a:	push	{r4, r5, r6, lr}
    993c:	ldrb	r3, [r0, #7]
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    993e:	cmp	r3, #32
    9940:	mov	r6, r2
    9942:	mov	r5, r0
    9944:	mov	r4, r1
    9946:	beq.n	997a <FatPartition::fatGet(unsigned long, unsigned long*)+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    9948:	cmp	r3, #16
    994a:	bne.n	9974 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
    994c:	ldr	r3, [r0, #24]
    994e:	ubfx	r1, r1, #8, #8
    9952:	add	r1, r3
    9954:	movs	r2, #2
    9956:	add.w	r0, r0, #560	; 0x230
    995a:	bl	98b4 <FatCache::read(unsigned long, unsigned char)>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    995e:	cbz	r0, 9974 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    9960:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    9962:	ldrh.w	r3, [r0, r1, lsl #1]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    9966:	ldr	r2, [r5, #28]
    9968:	cmp	r3, r2
    return 0;
  }
  *value = next;
  return 1;
    996a:	itte	ls
    996c:	movls	r0, #1
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
  }
  *value = next;
    996e:	strls	r3, [r6, #0]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
    9970:	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
    9972:	pop	{r4, r5, r6, pc}
  }
  *value = next;
  return 1;

fail:
  return -1;
    9974:	mov.w	r0, #4294967295
    9978:	pop	{r4, r5, r6, pc}
    997a:	ldr	r1, [r0, #24]
    997c:	movs	r2, #2
    997e:	add.w	r1, r1, r4, lsr #7
    9982:	add.w	r0, r0, #560	; 0x230
    9986:	bl	98b4 <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    998a:	cmp	r0, #0
    998c:	beq.n	9974 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    998e:	and.w	r1, r4, #127	; 0x7f
    9992:	ldr.w	r3, [r0, r1, lsl #2]
    9996:	b.n	9966 <FatPartition::fatGet(unsigned long, unsigned long*)+0x36>
  }
  *value = next;
  return 1;

fail:
  return -1;
    9998:	mov.w	r0, #4294967295
}
    999c:	bx	lr
    999e:	nop

000099a0 <FatPartition::fatPut(unsigned long, unsigned long)>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    99a0:	cmp	r1, #1
    99a2:	bls.n	99e0 <FatPartition::fatPut(unsigned long, unsigned long)+0x40>
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    99a4:	push	{r3, r4, r5, lr}
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    99a6:	ldr	r3, [r0, #28]
    99a8:	cmp	r1, r3
    99aa:	bhi.n	99ba <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    99ac:	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    99ae:	cmp	r3, #32
    99b0:	mov	r5, r2
    99b2:	mov	r4, r1
    99b4:	beq.n	99e4 <FatPartition::fatPut(unsigned long, unsigned long)+0x44>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    99b6:	cmp	r3, #16
    99b8:	beq.n	99be <FatPartition::fatPut(unsigned long, unsigned long)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    99ba:	movs	r0, #0
    99bc:	pop	{r3, r4, r5, pc}
    99be:	ldr	r3, [r0, #24]
    99c0:	ubfx	r1, r1, #8, #8
    99c4:	add	r1, r3
    99c6:	add.w	r0, r0, #560	; 0x230
    99ca:	movs	r2, #3
    99cc:	bl	98b4 <FatCache::read(unsigned long, unsigned char)>

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    99d0:	mov	r3, r0
    99d2:	cmp	r0, #0
    99d4:	beq.n	99ba <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    99d6:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe16(reinterpret_cast<uint8_t*>
           (&pc->fat16[cluster & (m_sectorMask >> 1)]), value);
    return true;
    99d8:	movs	r0, #1
    99da:	strh.w	r5, [r3, r1, lsl #1]
    goto fail;
  }

fail:
  return false;
}
    99de:	pop	{r3, r4, r5, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    99e0:	movs	r0, #0
}
    99e2:	bx	lr
    99e4:	ldr	r1, [r0, #24]
    99e6:	movs	r2, #3
    99e8:	add.w	r0, r0, #560	; 0x230
    99ec:	add.w	r1, r1, r4, lsr #7
    99f0:	bl	98b4 <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    99f4:	mov	r3, r0
    99f6:	cmp	r0, #0
    99f8:	beq.n	99ba <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    99fa:	and.w	r1, r4, #127	; 0x7f
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
    99fe:	movs	r0, #1
    9a00:	str.w	r5, [r3, r1, lsl #2]
    9a04:	pop	{r3, r4, r5, pc}
    9a06:	nop

00009a08 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    9a08:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    9a0c:	ldr	r4, [r0, #12]
    9a0e:	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    9a10:	sub	sp, #8
    9a12:	mov	r5, r0
    9a14:	mov	r7, r1
    9a16:	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    9a18:	itte	cc
    9a1a:	movcc	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
    9a1c:	movcc	r6, #0
  } else {
    find = m_allocSearchStart;
    setStart = true;
    9a1e:	movcs	r6, #1
    9a20:	ldr	r3, [r5, #28]
  }
  while (1) {
    find++;
    9a22:	adds	r4, #1
    if (find > m_lastCluster) {
    9a24:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    9a26:	add	r2, sp, #4
    9a28:	mov	r0, r5
    9a2a:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    9a2c:	bls.n	9a42 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x3a>
      if (setStart) {
    9a2e:	cbnz	r6, 9a80 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
    9a30:	ldr	r4, [r5, #12]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    9a32:	adds	r4, #1
    if (find > m_lastCluster) {
    9a34:	cmp	r4, r3
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
      setStart = true;
    9a36:	mov.w	r6, #1
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    9a3a:	add	r2, sp, #4
    9a3c:	mov	r0, r5
    9a3e:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    9a40:	bhi.n	9a2e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x26>
      }
      find = m_allocSearchStart;
      setStart = true;
      continue;
    }
    if (find == current) {
    9a42:	cmp	r7, r4
    9a44:	beq.n	9a80 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    9a46:	bl	9930 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    9a4a:	cmp	r0, #0
    9a4c:	blt.n	9a80 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
    9a4e:	beq.n	9a20 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    9a50:	ldr	r3, [sp, #4]
    9a52:	cmp	r3, #0
    9a54:	bne.n	9a20 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
      break;
    }
  }
  if (setStart) {
    9a56:	cbz	r6, 9a5a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x52>
    m_allocSearchStart = find;
    9a58:	str	r4, [r5, #12]
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    9a5a:	mvn.w	r2, #4026531840	; 0xf0000000
    9a5e:	mov	r1, r4
    9a60:	mov	r0, r5
    9a62:	bl	99a0 <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    9a66:	mov	r6, r0
    9a68:	cbz	r0, 9a80 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    9a6a:	cbnz	r7, 9a72 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6a>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
    9a6c:	str.w	r4, [r8]
  return true;
    9a70:	b.n	9a82 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
    9a72:	mov	r1, r7
    9a74:	mov	r0, r5
    9a76:	mov	r2, r4
    9a78:	bl	99a0 <FatPartition::fatPut(unsigned long, unsigned long)>
    9a7c:	cmp	r0, #0
    9a7e:	bne.n	9a6c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x64>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
    9a80:	movs	r6, #0
}
    9a82:	mov	r0, r6
    9a84:	add	sp, #8
    9a86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9a8a:	nop

00009a8c <FatPartition::freeChain(unsigned long)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    9a8c:	push	{r4, r5, r6, lr}
    9a8e:	mov	r5, r0
    9a90:	sub	sp, #8
    9a92:	mov	r4, r1
    9a94:	b.n	9aac <FatPartition::freeChain(unsigned long)+0x20>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    9a96:	bl	99a0 <FatPartition::fatPut(unsigned long, unsigned long)>
    9a9a:	cbz	r0, 9ac2 <FatPartition::freeChain(unsigned long)+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
    9a9c:	ldr	r3, [r5, #12]
    9a9e:	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
    9aa0:	itt	cc
    9aa2:	addcc.w	r4, r4, #4294967295
    9aa6:	strcc	r4, [r5, #12]
    }
    cluster = next;
    9aa8:	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    9aaa:	cbz	r6, 9ac4 <FatPartition::freeChain(unsigned long)+0x38>
    fg = fatGet(cluster, &next);
    9aac:	add	r2, sp, #4
    9aae:	mov	r1, r4
    9ab0:	mov	r0, r5
    9ab2:	bl	9930 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    9ab6:	subs	r6, r0, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    9ab8:	mov	r1, r4
    9aba:	mov.w	r2, #0
    9abe:	mov	r0, r5
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    9ac0:	bge.n	9a96 <FatPartition::freeChain(unsigned long)+0xa>
  } while (fg);

  return true;

fail:
  return false;
    9ac2:	movs	r0, #0
}
    9ac4:	add	sp, #8
    9ac6:	pop	{r4, r5, r6, pc}

00009ac8 <FatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    9ac8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9acc:	ldrb	r3, [r0, #7]
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    9ace:	ldr	r2, [r0, #28]
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    9ad0:	cmp	r3, #16
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    9ad2:	add.w	r8, r2, #1
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    9ad6:	beq.n	9ae4 <FatPartition::freeClusterCount()+0x1c>
    9ad8:	cmp	r3, #32
    9ada:	beq.n	9ae4 <FatPartition::freeClusterCount()+0x1c>
  }
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
    9adc:	mov.w	r0, #4294967295
    9ae0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    9ae4:	ldr	r5, [r0, #24]
    while (todo) {
    9ae6:	cmp.w	r8, #0
    9aea:	beq.n	9b6a <FatPartition::freeClusterCount()+0xa2>
    9aec:	mov	r6, r0
    9aee:	add.w	r7, r0, #560	; 0x230
    9af2:	movs	r4, #0
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
    9af4:	mov	r1, r5
    9af6:	movs	r2, #2
    9af8:	mov	r0, r7
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
    9afa:	adds	r5, #1
    9afc:	bl	98b4 <FatCache::read(unsigned long, unsigned char)>
      if (!pc) {
    9b00:	cmp	r0, #0
    9b02:	beq.n	9adc <FatPartition::freeClusterCount()+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    9b04:	ldrb	r3, [r6, #7]
    9b06:	cmp	r3, #16
    9b08:	beq.n	9b38 <FatPartition::freeClusterCount()+0x70>
      if (todo < n) {
    9b0a:	cmp.w	r8, #127	; 0x7f
    9b0e:	bhi.n	9b62 <FatPartition::freeClusterCount()+0x9a>
        n = todo;
    9b10:	uxth.w	r1, r8
    9b14:	mov	lr, r8
    9b16:	subs	r1, #1
    9b18:	uxth	r1, r1
    9b1a:	add.w	r1, r0, r1, lsl #2
    9b1e:	subs	r3, r0, #4
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat32[i] == 0) {
    9b20:	ldr.w	r2, [r3, #4]!
    9b24:	cbnz	r2, 9b28 <FatPartition::freeClusterCount()+0x60>
            free++;
    9b26:	adds	r4, #1
          if (pc->fat16[i] == 0) {
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
    9b28:	cmp	r3, r1
    9b2a:	bne.n	9b20 <FatPartition::freeClusterCount()+0x58>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    9b2c:	subs.w	r8, r8, lr
    9b30:	bne.n	9af4 <FatPartition::freeClusterCount()+0x2c>
    9b32:	mov	r0, r4
    9b34:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    9b38:	cmp.w	r8, #255	; 0xff
    9b3c:	bls.n	9b70 <FatPartition::freeClusterCount()+0xa8>
    9b3e:	mov.w	lr, #256	; 0x100
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    9b42:	mov	r3, lr
    9b44:	subs	r1, r3, #1
    9b46:	uxth	r1, r1
    9b48:	add.w	r1, r0, r1, lsl #1
    9b4c:	subs	r3, r0, #2
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat16[i] == 0) {
    9b4e:	ldrh.w	r2, [r3, #2]!
    9b52:	cbnz	r2, 9b56 <FatPartition::freeClusterCount()+0x8e>
            free++;
    9b54:	adds	r4, #1
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
    9b56:	cmp	r1, r3
    9b58:	bne.n	9b4e <FatPartition::freeClusterCount()+0x86>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    9b5a:	subs.w	r8, r8, lr
    9b5e:	bne.n	9af4 <FatPartition::freeClusterCount()+0x2c>
    9b60:	b.n	9b32 <FatPartition::freeClusterCount()+0x6a>
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    9b62:	mov.w	lr, #128	; 0x80
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    9b66:	mov	r1, lr
    9b68:	b.n	9b16 <FatPartition::freeClusterCount()+0x4e>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    9b6a:	mov	r0, r8
    // invalid FAT type
    DBG_FAIL_MACRO;
    goto fail;
  }
  setFreeClusterCount(free);
  return free;
    9b6c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
    9b70:	uxth.w	r3, r8
    9b74:	mov	lr, r8
    9b76:	b.n	9b44 <FatPartition::freeClusterCount()+0x7c>

00009b78 <FatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
    9b78:	push	{r3, r4, r5, r6, r7, lr}
    9b7a:	mov	r4, r0
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    9b7c:	movs	r3, #0
  m_allocSearchStart = 1;
    9b7e:	movs	r5, #1
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
    9b80:	mov.w	r0, #4294967295
    9b84:	str	r5, [r4, #12]
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    9b86:	str	r1, [r4, #0]
  }
  /** Initialize the cache.
   * \param[in] vol FatPartition that owns this FatCache.
   */
  void init(FatPartition *vol) {
    m_part = vol;
    9b88:	str	r4, [r4, #40]	; 0x28
    9b8a:	str.w	r4, [r4, #564]	; 0x234
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    9b8e:	strb	r3, [r4, #7]
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    9b90:	strb.w	r3, [r4, #36]	; 0x24
    9b94:	strb.w	r3, [r4, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
    9b98:	str	r0, [r4, #44]	; 0x2c
    9b9a:	str.w	r0, [r4, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    9b9e:	mov	r5, r2
    9ba0:	cbz	r2, 9bda <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    9ba2:	cmp	r2, #4
    9ba4:	bls.n	9baa <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x32>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    9ba6:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    9ba8:	pop	{r3, r4, r5, r6, r7, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    9baa:	add.w	r6, r4, #36	; 0x24
    9bae:	mov	r2, r3
    9bb0:	mov	r1, r3
    9bb2:	mov	r0, r6
    9bb4:	bl	98b4 <FatCache::read(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    mbr = reinterpret_cast<MbrSector_t*>
          (cacheFetchData(0, FatCache::CACHE_FOR_READ));
    MbrPart_t *mp = mbr->part + part - 1;
    9bb8:	add.w	r5, r5, #268435456	; 0x10000000
    9bbc:	subs	r5, #1
    9bbe:	lsls	r5, r5, #4
    9bc0:	add.w	r3, r0, #446	; 0x1be
    9bc4:	adds	r2, r3, r5

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    9bc6:	cmp	r0, #0
    9bc8:	beq.n	9ba6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    9bca:	ldrb	r1, [r2, #4]
    9bcc:	cmp	r1, #0
    9bce:	beq.n	9ba6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    9bd0:	ldrb	r3, [r3, r5]
    9bd2:	lsls	r3, r3, #25
    9bd4:	bne.n	9ba6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    9bd6:	ldr	r5, [r2, #8]
    9bd8:	b.n	9bde <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x66>
    9bda:	add.w	r6, r4, #36	; 0x24
    9bde:	mov	r0, r6
    9be0:	movs	r2, #0
    9be2:	mov	r1, r5
    9be4:	bl	98b4 <FatCache::read(unsigned long, unsigned char)>
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FatCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    9be8:	cmp	r0, #0
    9bea:	beq.n	9ba6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    9bec:	ldrb	r3, [r0, #16]
    9bee:	cmp	r3, #2
    9bf0:	bne.n	9ba6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    9bf2:	ldrh.w	r3, [r0, #11]
    9bf6:	cmp.w	r3, #512	; 0x200
    9bfa:	bne.n	9ba6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    9bfc:	ldrb	r6, [r0, #13]
    9bfe:	strb	r6, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    9c00:	subs	r3, r6, #1
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    9c02:	movs	r2, #0
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    9c04:	cmp	r6, #1
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    9c06:	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    9c08:	strb	r2, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    9c0a:	beq.n	9c2c <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb4>
    9c0c:	movs	r2, #1
    9c0e:	mov	r1, r2
    9c10:	b.n	9c14 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9c>
    9c12:	mov	r2, r3
    9c14:	lsls	r1, r1, #1
    9c16:	uxtb	r1, r1
    9c18:	adds	r3, r2, #1
    9c1a:	cmp	r6, r1
    9c1c:	uxtb	r3, r3
    9c1e:	beq.n	9c2a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb2>
    if (tmp == 0) {
    9c20:	cmp	r3, #9
    9c22:	bne.n	9c12 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9a>
    9c24:	strb	r2, [r4, #6]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    9c26:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    9c28:	pop	{r3, r4, r5, r6, r7, pc}
    9c2a:	strb	r2, [r4, #6]
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    9c2c:	ldrh	r1, [r0, #22]
    9c2e:	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    9c30:	cbnz	r1, 9c36 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xbe>
    9c32:	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    9c34:	str	r1, [r4, #16]
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    9c36:	ldrh	r7, [r0, #14]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    9c38:	ldrh.w	r3, [r0, #17]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    9c3c:	strh	r3, [r4, #8]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    9c3e:	add	r7, r5
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    9c40:	lsls	r3, r3, #5

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    9c42:	add.w	r6, r7, r1, lsl #1
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    9c46:	addw	r3, r3, #511	; 0x1ff
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
    9c4a:	ldrh.w	r1, [r0, #19]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    9c4e:	str	r7, [r4, #24]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    9c50:	add.w	r3, r6, r3, asr #9

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    9c54:	str	r6, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    9c56:	str	r3, [r4, #20]

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    9c58:	cbnz	r1, 9c5c <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xe4>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    9c5a:	ldr	r1, [r0, #32]
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    9c5c:	subs	r5, r5, r3
    9c5e:	add	r5, r1

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
    9c60:	lsr.w	r2, r5, r2
  m_lastCluster = clusterCount + 1;

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    9c64:	movw	r3, #4084	; 0xff4
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    9c68:	adds	r1, r2, #1

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    9c6a:	cmp	r2, r3
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    9c6c:	str	r1, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    9c6e:	bls.n	9c86 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x10e>
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    9c70:	movw	r3, #65524	; 0xfff4
    9c74:	cmp	r2, r3
    9c76:	ittet	hi
    9c78:	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    9c7a:	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
    9c7c:	movls	r3, #16
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
    9c7e:	movhi	r3, #32
    9c80:	strb	r3, [r4, #7]
  }
  return true;
    9c82:	movs	r0, #1
    9c84:	pop	{r3, r4, r5, r6, r7, pc}

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    9c86:	movs	r3, #12
    9c88:	strb	r3, [r4, #7]
    9c8a:	b.n	9ba6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>

00009c8c <lfnGetChar(DirLfn_t*, unsigned char)>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    9c8c:	cmp	r1, #4
    9c8e:	bls.n	9caa <lfnGetChar(DirLfn_t*, unsigned char)+0x1e>
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    9c90:	cmp	r1, #10
    9c92:	bls.n	9ca2 <lfnGetChar(DirLfn_t*, unsigned char)+0x16>
    return getLe16(ldir->unicode2 + 2*i - 10);
  } else if (i < 13) {
    9c94:	cmp	r1, #12
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    9c96:	itte	ls
    9c98:	addls.w	r1, r0, r1, lsl #1
    9c9c:	ldrhls	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2*i - 22);
  }
  return 0;
    9c9e:	movhi	r0, #0
}
    9ca0:	bx	lr
    9ca2:	add.w	r1, r0, r1, lsl #1
    9ca6:	ldrh	r0, [r1, #4]
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2*i - 10);
    9ca8:	bx	lr
    9caa:	add.w	r1, r0, r1, lsl #1
    9cae:	ldrh.w	r0, [r1, #1]
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
    9cb2:	bx	lr

00009cb4 <FatFile::lfnChecksum(unsigned char*)>:
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
    9cb4:	push	{r4}
    9cb6:	subs	r2, r0, #1
    9cb8:	add.w	r4, r0, #10
  uint8_t sum = 0;
    9cbc:	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    9cbe:	ldrb.w	r1, [r2, #1]!
    9cc2:	lsrs	r3, r0, #1
    9cc4:	orr.w	r0, r3, r0, lsl #7
    9cc8:	uxtab	r0, r1, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    9ccc:	cmp	r4, r2
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    9cce:	uxtb	r0, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    9cd0:	bne.n	9cbe <FatFile::lfnChecksum(unsigned char*)+0xa>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
    9cd2:	ldr.w	r4, [sp], #4
    9cd6:	bx	lr

00009cd8 <FatFile::openCluster(FatFile*)>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
    9cd8:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    9cda:	ldr	r3, [r1, #12]
    9cdc:	cbz	r3, 9cfc <FatFile::openCluster(FatFile*)+0x24>
    9cde:	mov	r5, r0
    9ce0:	mov	r4, r1
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
    9ce2:	movs	r2, #36	; 0x24
    9ce4:	movs	r1, #0
    9ce6:	bl	f32c <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    9cea:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    9cec:	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
    9cee:	strb	r3, [r5, #0]
  m_flags = FILE_FLAG_READ;
    9cf0:	strb	r0, [r5, #2]
  m_vol = file->m_vol;
    9cf2:	ldr	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    9cf4:	ldr	r3, [r4, #12]
    9cf6:	str	r3, [r5, #32]
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
    9cf8:	str	r2, [r5, #8]
  m_firstCluster = file->m_dirCluster;
  return true;
}
    9cfa:	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    9cfc:	ldr	r1, [r1, #8]
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
    9cfe:	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    9d02:	b.w	8e58 <FatFile::openRoot(FatVolume*)>
    9d06:	nop

00009d08 <FatFile::getName(char*, unsigned int)>:
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
    9d08:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9d0c:	sub	sp, #52	; 0x34
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    9d0e:	ldrb	r3, [r0, #0]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    9d10:	movs	r4, #0
    9d12:	strb.w	r4, [sp, #12]
    9d16:	strb.w	r4, [sp, #13]
    9d1a:	strb.w	r4, [sp, #14]
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
    9d1e:	mov	r9, r1
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    9d20:	cbz	r3, 9d28 <FatFile::getName(char*, unsigned int)+0x20>
    9d22:	cmp	r2, #12
    9d24:	mov	r5, r2
    9d26:	bhi.n	9d36 <FatFile::getName(char*, unsigned int)+0x2e>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
    9d28:	movs	r7, #0
    9d2a:	strb.w	r7, [r9]
  return false;
}
    9d2e:	mov	r0, r7
    9d30:	add	sp, #52	; 0x34
    9d32:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    9d36:	ldrb	r3, [r0, #3]
    9d38:	mov	r8, r0
    9d3a:	cmp	r3, #0
    9d3c:	beq.n	9df6 <FatFile::getName(char*, unsigned int)+0xee>
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
    9d3e:	add	r0, sp, #12
    9d40:	mov	r1, r8
    9d42:	bl	9cd8 <FatFile::openCluster(FatFile*)>
    9d46:	cmp	r0, #0
    9d48:	beq.n	9d28 <FatFile::getName(char*, unsigned int)+0x20>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    9d4a:	ldrb.w	r3, [r8, #3]
    9d4e:	cmp	r3, #0
    9d50:	beq.n	9d28 <FatFile::getName(char*, unsigned int)+0x20>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    9d52:	str	r4, [sp, #4]
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    9d54:	movs	r6, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    9d56:	ldrh.w	r1, [r8, #4]
    9d5a:	subs	r1, r1, r6
    9d5c:	lsls	r1, r1, #5
    9d5e:	add	r0, sp, #12
    9d60:	bl	929c <FatFile::seekSet(unsigned long)>
    9d64:	mov	r7, r0
    9d66:	cmp	r0, #0
    9d68:	beq.n	9d28 <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    9d6a:	movs	r1, #0
    9d6c:	add	r0, sp, #12
    9d6e:	bl	9028 <FatFile::readDirCache(bool)>
    if (!ldir) {
    9d72:	mov	sl, r0
    9d74:	cmp	r0, #0
    9d76:	beq.n	9d28 <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME) {
    9d78:	ldrb	r3, [r0, #11]
    9d7a:	cmp	r3, #15
    9d7c:	bne.n	9d28 <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (order != (ldir->order & 0X1F)) {
    9d7e:	ldrb	r3, [r0, #0]
    9d80:	and.w	r3, r3, #31
    9d84:	cmp	r6, r3
    9d86:	bne.n	9d28 <FatFile::getName(char*, unsigned int)+0x20>
  return 0;
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
    9d88:	subs	r3, r6, #1
    9d8a:	add.w	r2, r3, r3, lsl #1
    9d8e:	add.w	r2, r3, r2, lsl #2
    9d92:	mov	r3, r2
    9d94:	add.w	r4, r9, r2
    9d98:	add.w	fp, r2, #13
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    9d9c:	subs	r1, r3, r2
    9d9e:	uxtb	r1, r1
    9da0:	mov	r0, sl
    9da2:	bl	9c8c <lfnGetChar(DirLfn_t*, unsigned char)>
    if (c == 0 || k >= n) {
    9da6:	cbz	r0, 9e04 <FatFile::getName(char*, unsigned int)+0xfc>
    9da8:	cmp	r5, r3
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    9daa:	add.w	r3, r3, #1
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
    9dae:	bls.n	9dd4 <FatFile::getName(char*, unsigned int)+0xcc>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    9db0:	cmp	r0, #126	; 0x7e
    9db2:	ite	ls
    9db4:	uxtbls	r0, r0
    9db6:	movhi	r0, #63	; 0x3f
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    9db8:	cmp	fp, r3
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    9dba:	strb.w	r0, [r4], #1
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    9dbe:	bne.n	9d9c <FatFile::getName(char*, unsigned int)+0x94>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
  }
  // Terminate with zero byte if name fits.
  if (k < n && (ldir->order & FAT_ORDER_LAST_LONG_ENTRY)) {
    9dc0:	cmp	r5, fp
    9dc2:	bls.n	9dd4 <FatFile::getName(char*, unsigned int)+0xcc>
    9dc4:	ldrb.w	r3, [sl]
    9dc8:	lsls	r2, r3, #25
    name[k] = 0;
    9dca:	itt	mi
    9dcc:	ldrbmi.w	r3, [sp, #4]
    9dd0:	strbmi.w	r3, [r9, fp]
  }
  // Truncate if name is too long.
  name[n - 1] = 0;
    9dd4:	add.w	r3, r9, r5
    9dd8:	ldrb.w	r2, [sp, #4]
    9ddc:	strb.w	r2, [r3, #-1]
    }
    if (!lfnGetName(ldir, name, size)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    9de0:	ldrb.w	r3, [sl]
    9de4:	lsls	r3, r3, #25
    9de6:	bmi.n	9d2e <FatFile::getName(char*, unsigned int)+0x26>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    9de8:	adds	r6, #1
    9dea:	ldrb.w	r3, [r8, #3]
    9dee:	uxtb	r6, r6
    9df0:	cmp	r3, r6
    9df2:	bcs.n	9d56 <FatFile::getName(char*, unsigned int)+0x4e>
    9df4:	b.n	9d28 <FatFile::getName(char*, unsigned int)+0x20>
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    return getSFN(name);
    9df6:	bl	a6d0 <FatFile::getSFN(char*)>
    9dfa:	mov	r7, r0
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
  return false;
}
    9dfc:	mov	r0, r7
    9dfe:	add	sp, #52	; 0x34
    9e00:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
    9e04:	mov	fp, r3
    9e06:	b.n	9dc0 <FatFile::getName(char*, unsigned int)+0xb8>

00009e08 <FatFile::parsePathName(char const*, fname_t*, char const**)>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    9e08:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
    9e0c:	ldrb	r3, [r0, #0]
    9e0e:	cmp	r3, #32
    9e10:	bne.n	9e1a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12>
    9e12:	ldrb.w	r3, [r0, #1]!
    9e16:	cmp	r3, #32
    9e18:	beq.n	9e12 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
    9e1a:	str	r0, [r1, #8]

  for (len = 0; ; len++) {
    c = path[len];
    9e1c:	ldrb	r3, [r0, #0]
    if (c == 0 || isDirSeparator(c)) {
    9e1e:	cmp	r3, #0
    9e20:	beq.w	a032 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x22a>
    9e24:	cmp	r3, #47	; 0x2f
    9e26:	beq.n	9e88 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x80>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    9e28:	cmp	r3, #92	; 0x5c
    9e2a:	beq.n	9e72 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    9e2c:	sub.w	r4, r3, #34	; 0x22
    9e30:	uxtb	r4, r4
    9e32:	cmp	r4, #29
    9e34:	bls.n	9e78 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x70>
    9e36:	ldr.w	lr, [pc, #536]	; a050 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x248>
    9e3a:	adds	r6, r0, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    9e3c:	movs	r4, #0
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    9e3e:	cmp	r3, #124	; 0x7c
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    9e40:	sub.w	r5, r3, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    9e44:	mov	r7, r6
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    9e46:	beq.n	9e72 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    9e48:	cmp	r5, #94	; 0x5e
    9e4a:	bhi.n	9e72 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    9e4c:	ldrb.w	r3, [r6], #1
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    9e50:	sub.w	r5, r3, #34	; 0x22
    9e54:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    9e56:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    9e58:	cmp	r3, #0
    9e5a:	beq.w	a004 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1fc>
    9e5e:	cmp	r3, #47	; 0x2f
    9e60:	beq.n	9e8a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x82>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    9e62:	cmp	r3, #92	; 0x5c
    9e64:	lsr.w	r7, lr, r5
    9e68:	beq.n	9e72 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    9e6a:	cmp	r5, #29
    9e6c:	bhi.n	9e3e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    9e6e:	lsls	r7, r7, #31
    9e70:	bpl.n	9e3e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    9e72:	movs	r0, #0
    9e74:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    9e78:	ldr	r5, [pc, #468]	; (a050 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x248>)
    9e7a:	lsr.w	r4, r5, r4
    9e7e:	lsls	r4, r4, #31
    9e80:	bpl.n	9e36 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x2e>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    9e82:	movs	r0, #0
    9e84:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    9e88:	movs	r4, #0
    9e8a:	adds	r7, r0, r4
    9e8c:	mov	r6, r7
    9e8e:	mov	r5, r4
    9e90:	movs	r3, #47	; 0x2f
    9e92:	b.n	9e9a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x92>
    9e94:	ldrb.w	r3, [r6, #1]!
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    9e98:	adds	r5, #1
    9e9a:	cmp	r3, #32
    9e9c:	beq.n	9e94 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8c>
    9e9e:	cmp	r3, #47	; 0x2f
    9ea0:	beq.n	9e94 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8c>
  *ptr = &path[end];
    9ea2:	add	r5, r0
    9ea4:	str	r5, [r2, #0]

  // Back over spaces and dots.
  while (len) {
    9ea6:	cbz	r4, 9ebc <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb4>
    9ea8:	mov	r2, r7
    c = path[len - 1];
    9eaa:	ldrb.w	r3, [r2, #-1]!
    if (c != '.' && c != ' ') {
    9eae:	cmp	r3, #46	; 0x2e
    9eb0:	beq.n	9eb8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb0>
    9eb2:	cmp	r3, #32
    9eb4:	bne.w	a00a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x202>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    9eb8:	subs	r4, #1
    9eba:	bne.n	9eaa <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa2>
    9ebc:	mov.w	r5, #4294967295
    9ec0:	mov	r3, r4
  // Max length of LFN is 255.
  if (len > 255) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
    9ec2:	str	r3, [r1, #4]
    9ec4:	add.w	r6, r1, #23
    9ec8:	add.w	r3, r1, #12
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    9ecc:	movs	r2, #32
    9ece:	strb.w	r2, [r3, #1]!
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    9ed2:	cmp	r3, r6
    9ed4:	bne.n	9ece <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc6>
    9ed6:	subs	r6, r0, #1
    9ed8:	movs	r2, #0
    9eda:	b.n	9ede <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd6>
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    9edc:	adds	r2, #1
    9ede:	ldrb.w	r3, [r6, #1]!
    9ee2:	cmp	r3, #46	; 0x2e
    9ee4:	beq.n	9edc <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd4>
    9ee6:	cmp	r3, #32
    9ee8:	beq.n	9edc <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd4>
  // Not 8.3 if leading dot or space.
  is83 = !si;
    9eea:	clz	ip, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    9eee:	adds	r6, r5, #1
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
    9ef0:	mov.w	ip, ip, lsr #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    9ef4:	beq.n	9f10 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    9ef6:	ldrb	r7, [r0, r5]
    9ef8:	cmp	r7, #46	; 0x2e
    9efa:	add.w	r6, r0, r5
    9efe:	bne.n	9f0a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x102>
    9f00:	b.n	9f10 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    9f02:	ldrb.w	r7, [r6, #-1]!
    9f06:	cmp	r7, #46	; 0x2e
    9f08:	beq.n	9f10 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    9f0a:	adds.w	r5, r5, #4294967295
    9f0e:	bcs.n	9f02 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xfa>
  for (; si < len; si++) {
    9f10:	cmp	r2, r4
    9f12:	mov.w	r9, #0
    9f16:	bge.w	a03c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x234>
    9f1a:	mov	r6, r9
    9f1c:	mov	sl, r9
    9f1e:	movs	r7, #7
    9f20:	mov.w	r8, #8
    9f24:	b.n	9f72 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16a>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    9f26:	cmp	r3, #46	; 0x2e
    9f28:	beq.n	9fba <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b2>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
    9f2a:	cmp	r3, #34	; 0x22
    9f2c:	beq.n	9f46 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    9f2e:	cmp	r3, #124	; 0x7c
    9f30:	beq.n	9f46 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    9f32:	sub.w	lr, r3, #42	; 0x2a
    9f36:	cmp.w	lr, #5
    9f3a:	bls.n	9fce <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1c6>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
    9f3c:	sub.w	lr, r3, #58	; 0x3a
    9f40:	cmp.w	lr, #5
    9f44:	bhi.n	9ff8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1f0>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    9f46:	cmp	r5, r2
    9f48:	beq.n	9fbe <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b6>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    9f4a:	cmp	r7, r6
    9f4c:	bcc.n	9fa2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19a>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
    9f4e:	mov.w	ip, #0
      c = '_';
    9f52:	movs	r3, #95	; 0x5f
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    9f54:	add.w	lr, r6, #1
    9f58:	add.w	fp, r1, r6
    9f5c:	uxtb.w	r6, lr
      if (i < 7) {
    9f60:	cmp	r6, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    9f62:	strb.w	r3, [fp, #13]
      if (i < 7) {
    9f66:	bhi.n	9f6a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>
        fname->seqPos = i;
    9f68:	strb	r6, [r1, #12]
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    9f6a:	adds	r2, #1
    9f6c:	cmp	r2, r4
    9f6e:	bge.n	9f80 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x178>
    9f70:	ldrb	r3, [r0, r2]
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    9f72:	cmp	r3, #32
    9f74:	bne.n	9f26 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x11e>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    9f76:	adds	r2, #1
    9f78:	cmp	r2, r4
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
    9f7a:	mov.w	ip, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    9f7e:	blt.n	9f70 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x168>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    9f80:	ldrb	r3, [r1, #13]
    9f82:	cmp	r3, #32
    9f84:	beq.w	9e72 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (is83) {
    9f88:	cmp.w	ip, #0
    9f8c:	beq.n	a01e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x216>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    9f8e:	tst.w	sl, r9
    9f92:	it	ne
    9f94:	movne.w	r9, #2
    9f98:	strb.w	r9, [r1]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    9f9c:	movs	r0, #1
    9f9e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    9fa2:	cmp	r7, #10
    9fa4:	beq.n	a016 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
    9fa6:	cmp	r5, r2
    9fa8:	blt.n	a016 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
    9faa:	mov	r2, r5
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    9fac:	movs	r7, #10
      i = 8;    // Place for extension.
    9fae:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    9fb0:	mov.w	r8, #16
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
    9fb4:	mov.w	ip, #0
    9fb8:	b.n	9f6a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    9fba:	cmp	r5, r2
    9fbc:	bne.n	9f76 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16e>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    9fbe:	cmp	r7, #10
    9fc0:	beq.n	a016 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
    9fc2:	mov	r2, r5
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    9fc4:	movs	r7, #10
      i = 8;    // Place for extension.
    9fc6:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    9fc8:	mov.w	r8, #16
    9fcc:	b.n	9f6a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    9fce:	cmp	r3, #45	; 0x2d
    9fd0:	bne.n	9f46 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    9fd2:	sub.w	lr, r3, #33	; 0x21
    9fd6:	cmp.w	lr, #93	; 0x5d
    9fda:	bhi.n	9f46 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    9fdc:	cmp	r5, r2
    9fde:	beq.n	9fbe <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b6>
    9fe0:	cmp	r7, r6
    9fe2:	bcc.n	9fa2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19a>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
    9fe4:	sub.w	lr, r3, #97	; 0x61
    9fe8:	cmp.w	lr, #25
    9fec:	bhi.n	a040 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x238>
        c += 'A' - 'a';
    9fee:	subs	r3, #32
    9ff0:	uxtb	r3, r3
        lc |= bit;
    9ff2:	orr.w	r9, r8, r9
    9ff6:	b.n	9f54 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14c>
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
    9ff8:	sub.w	lr, r3, #91	; 0x5b
    9ffc:	cmp.w	lr, #2
    a000:	bls.n	9f46 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    a002:	b.n	9fd2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1ca>
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    a004:	str	r7, [r2, #0]
    a006:	adds	r7, r0, r4
    a008:	b.n	9ea8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa0>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
    a00a:	cmp	r4, #255	; 0xff
    a00c:	bgt.w	9e72 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    a010:	subs	r5, r4, #1
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    c = path[len - 1];
    a012:	mov	r3, r4
    a014:	b.n	9ec2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xba>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    a016:	ldrb	r3, [r1, #13]
    a018:	cmp	r3, #32
    a01a:	beq.w	9e72 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    a01e:	ldrb	r3, [r1, #12]
    a020:	add	r3, r1
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    a022:	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    a024:	movs	r4, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    a026:	movs	r2, #49	; 0x31
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    a028:	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
    a02a:	strb	r4, [r3, #13]
    fname->sfn[fname->seqPos + 1] = '1';
    a02c:	strb	r2, [r3, #14]
    a02e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    a032:	str	r0, [r2, #0]
    a034:	mov	r4, r3
    a036:	mov.w	r5, #4294967295
    a03a:	b.n	9ec2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xba>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    a03c:	mov	sl, r9
    a03e:	b.n	9f80 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x178>
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
    a040:	sub.w	lr, r3, #65	; 0x41
    a044:	cmp.w	lr, #25
        uc |= bit;
    a048:	it	ls
    a04a:	orrls.w	sl, r8, sl
    a04e:	b.n	9f54 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14c>
    a050:	.word	0x35000101

0000a054 <FatFile::printName(Print*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::printName(print_t* pr) {
    a054:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a058:	sub	sp, #56	; 0x38
  size_t n = 0;
  uint16_t u;
  uint8_t buf[13];
  uint8_t i;

  if (!isLFN()) {
    a05a:	ldrb	r3, [r0, #3]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    a05c:	movs	r5, #0
    a05e:	strb.w	r5, [sp, #20]
    a062:	strb.w	r5, [sp, #21]
    a066:	strb.w	r5, [sp, #22]
    a06a:	cmp	r3, #0
    a06c:	beq.n	a104 <FatFile::printName(Print*)+0xb0>
    a06e:	mov	r7, r0
    a070:	mov	r8, r1
    return printSFN(pr);
  }
  if (!dirFile.openCluster(this)) {
    a072:	add	r0, sp, #20
    a074:	mov	r1, r7
    a076:	bl	9cd8 <FatFile::openCluster(FatFile*)>
    a07a:	cmp	r0, #0
    a07c:	beq.n	a0f8 <FatFile::printName(Print*)+0xa4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    a07e:	ldrb	r3, [r7, #3]
    a080:	cmp	r3, #0
    a082:	beq.n	a0f8 <FatFile::printName(Print*)+0xa4>
    a084:	movs	r6, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    a086:	ldrh	r1, [r7, #4]
    a088:	subs	r1, r1, r6
    a08a:	lsls	r1, r1, #5
    a08c:	add	r0, sp, #20
    a08e:	bl	929c <FatFile::seekSet(unsigned long)>
    a092:	cbz	r0, a0f8 <FatFile::printName(Print*)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    a094:	movs	r1, #0
    a096:	add	r0, sp, #20
    a098:	bl	9028 <FatFile::readDirCache(bool)>
    if (!ldir) {
    a09c:	mov	r9, r0
    a09e:	cbz	r0, a0f8 <FatFile::printName(Print*)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    a0a0:	ldrb	r3, [r0, #11]
    a0a2:	cmp	r3, #15
    a0a4:	bne.n	a0f8 <FatFile::printName(Print*)+0xa4>
    a0a6:	ldrb	r3, [r0, #0]
    a0a8:	and.w	r3, r3, #31
    a0ac:	cmp	r6, r3
    a0ae:	bne.n	a0f8 <FatFile::printName(Print*)+0xa4>
    a0b0:	add	r3, sp, #4
    a0b2:	add.w	sl, r5, #13
    a0b6:	mov	r4, r5
    a0b8:	subs	r2, r4, r5
    a0ba:	uxtb	r2, r2
        order != (ldir->order & 0X1F)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (i = 0; i < 13; i++) {
      u = lfnGetChar(ldir, i);
    a0bc:	mov	r1, r2
    a0be:	mov	r0, r9
    a0c0:	bl	9c8c <lfnGetChar(DirLfn_t*, unsigned char)>
      if (u == 0) {
    a0c4:	cbz	r0, a100 <FatFile::printName(Print*)+0xac>
        // End of name.
        break;
      }
      buf[i] = u < 0X7F ? u : '?';
    a0c6:	cmp	r0, #126	; 0x7e
      n++;
    a0c8:	add.w	r4, r4, #1
      u = lfnGetChar(ldir, i);
      if (u == 0) {
        // End of name.
        break;
      }
      buf[i] = u < 0X7F ? u : '?';
    a0cc:	ite	ls
    a0ce:	uxtbls	r0, r0
    a0d0:	movhi	r0, #63	; 0x3f
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
        order != (ldir->order & 0X1F)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (i = 0; i < 13; i++) {
    a0d2:	cmp	r4, sl
      u = lfnGetChar(ldir, i);
      if (u == 0) {
        // End of name.
        break;
      }
      buf[i] = u < 0X7F ? u : '?';
    a0d4:	strb.w	r0, [r3], #1
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
        order != (ldir->order & 0X1F)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (i = 0; i < 13; i++) {
    a0d8:	bne.n	a0b8 <FatFile::printName(Print*)+0x64>
    a0da:	mov	r5, r4
    a0dc:	movs	r2, #13
        break;
      }
      buf[i] = u < 0X7F ? u : '?';
      n++;
    }
    pr->write(buf, i);
    a0de:	ldr.w	r3, [r8]
    a0e2:	add	r1, sp, #4
    a0e4:	ldr	r3, [r3, #4]
    a0e6:	mov	r0, r8
    a0e8:	blx	r3
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    a0ea:	adds	r6, #1
    a0ec:	ldrb	r3, [r7, #3]
    a0ee:	uxtb	r6, r6
    a0f0:	cmp	r3, r6
    a0f2:	bcs.n	a086 <FatFile::printName(Print*)+0x32>
    a0f4:	mov	r0, r4
    a0f6:	b.n	a0fa <FatFile::printName(Print*)+0xa6>
    pr->write(buf, i);
  }
  return n;

fail:
  return 0;
    a0f8:	movs	r0, #0
}
    a0fa:	add	sp, #56	; 0x38
    a0fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (i = 0; i < 13; i++) {
      u = lfnGetChar(ldir, i);
      if (u == 0) {
    a100:	mov	r5, r4
    a102:	b.n	a0de <FatFile::printName(Print*)+0x8a>
  uint16_t u;
  uint8_t buf[13];
  uint8_t i;

  if (!isLFN()) {
    return printSFN(pr);
    a104:	bl	a6f0 <FatFile::printSFN(Print*)>
  }
  return n;

fail:
  return 0;
}
    a108:	add	sp, #56	; 0x38
    a10a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a10e:	nop

0000a110 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    a110:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    a114:	ldrb	r2, [r0, #2]

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    a116:	sub	sp, #40	; 0x28
    a118:	movs	r3, #0
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    a11a:	lsls	r2, r2, #30
    a11c:	strb.w	r3, [sp, #4]
    a120:	strb.w	r3, [sp, #5]
    a124:	strb.w	r3, [sp, #6]
    a128:	bpl.n	a170 <FatFile::remove()+0x60>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    a12a:	ldr	r1, [r0, #32]
    a12c:	mov	r5, r0
    a12e:	cbnz	r1, a17a <FatFile::remove()+0x6a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    a130:	movs	r1, #1
    a132:	mov	r0, r5
    a134:	bl	8a5c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    a138:	cbz	r0, a170 <FatFile::remove()+0x60>
    a13a:	subs	r1, r0, #1
    a13c:	add.w	r7, r0, #10
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    a140:	movs	r4, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    a142:	lsrs	r2, r4, #1
    a144:	ldrb.w	r6, [r1, #1]!
    a148:	orr.w	r3, r2, r4, lsl #7
    a14c:	uxtab	r3, r6, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    a150:	cmp	r7, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    a152:	uxtb	r4, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    a154:	bne.n	a142 <FatFile::remove()+0x32>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    a156:	mov.w	r8, #229	; 0xe5
    a15a:	strb.w	r8, [r0]
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    a15e:	ldr	r6, [r5, #8]

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    a160:	movs	r3, #0
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    a162:	add.w	r0, r6, #36	; 0x24
    a166:	strb	r3, [r5, #0]
  m_flags = 0;
    a168:	strb	r3, [r5, #2]
    a16a:	bl	9914 <FatCache::sync()>
    a16e:	cbnz	r0, a186 <FatFile::remove()+0x76>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    a170:	movs	r6, #0
}
    a172:	mov	r0, r6
    a174:	add	sp, #40	; 0x28
    a176:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    a17a:	ldr	r0, [r0, #8]
    a17c:	bl	9a8c <FatPartition::freeChain(unsigned long)>
    a180:	cmp	r0, #0
    a182:	bne.n	a130 <FatFile::remove()+0x20>
    a184:	b.n	a170 <FatFile::remove()+0x60>
    a186:	add.w	r0, r6, #560	; 0x230
    a18a:	bl	9914 <FatCache::sync()>
    a18e:	cmp	r0, #0
    a190:	beq.n	a170 <FatFile::remove()+0x60>
    a192:	ldr	r0, [r6, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    a194:	ldr	r3, [r0, #0]
    a196:	ldr	r3, [r3, #20]
    a198:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    a19a:	mov	r6, r0
    a19c:	cmp	r0, #0
    a19e:	beq.n	a170 <FatFile::remove()+0x60>
  // Write entry to device.
  if (!m_vol->cacheSync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    a1a0:	ldrb	r3, [r5, #3]
    a1a2:	cmp	r3, #0
    a1a4:	beq.n	a172 <FatFile::remove()+0x62>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    a1a6:	add	r0, sp, #4
    a1a8:	mov	r1, r5
    a1aa:	bl	9cd8 <FatFile::openCluster(FatFile*)>
    a1ae:	cmp	r0, #0
    a1b0:	beq.n	a170 <FatFile::remove()+0x60>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    a1b2:	ldrb	r3, [r5, #3]
    a1b4:	cmp	r3, #0
    a1b6:	beq.n	a170 <FatFile::remove()+0x60>
    a1b8:	movs	r7, #1
    a1ba:	b.n	a1fc <FatFile::remove()+0xec>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    a1bc:	add	r0, sp, #4
    a1be:	bl	9028 <FatFile::readDirCache(bool)>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    a1c2:	adds	r3, r7, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
    a1c4:	cmp	r0, #0
    a1c6:	beq.n	a170 <FatFile::remove()+0x60>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    a1c8:	ldrb	r2, [r0, #11]
    a1ca:	cmp	r2, #15
    a1cc:	bne.n	a170 <FatFile::remove()+0x60>
        order != (ldir->order & 0X1F) ||
    a1ce:	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    a1d0:	and.w	r1, r2, #31
    a1d4:	cmp	r7, r1
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    a1d6:	uxtb	r7, r3
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    a1d8:	bne.n	a170 <FatFile::remove()+0x60>
        order != (ldir->order & 0X1F) ||
    a1da:	ldrb	r3, [r0, #13]
    a1dc:	cmp	r3, r4
    a1de:	bne.n	a170 <FatFile::remove()+0x60>
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    a1e0:	strb.w	r8, [r0]
    m_vol->cacheDirty();
    a1e4:	ldr	r1, [r5, #8]
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    a1e6:	ldrb.w	r3, [r1, #36]	; 0x24
    a1ea:	orr.w	r3, r3, #1
    a1ee:	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
    a1f2:	lsls	r3, r2, #25
    a1f4:	bmi.n	a210 <FatFile::remove()+0x100>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    a1f6:	ldrb	r3, [r5, #3]
    a1f8:	cmp	r3, r7
    a1fa:	bcc.n	a170 <FatFile::remove()+0x60>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    a1fc:	ldrh	r1, [r5, #4]
    a1fe:	subs	r1, r1, r7
    a200:	lsls	r1, r1, #5
    a202:	add	r0, sp, #4
    a204:	bl	929c <FatFile::seekSet(unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    a208:	movs	r1, #0
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    a20a:	cmp	r0, #0
    a20c:	bne.n	a1bc <FatFile::remove()+0xac>
    a20e:	b.n	a170 <FatFile::remove()+0x60>
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    m_vol->cacheDirty();
    if (last) {
      if (!m_vol->cacheSync()) {
    a210:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    a212:	add.w	r0, r4, #36	; 0x24
    a216:	bl	9914 <FatCache::sync()>
    a21a:	cmp	r0, #0
    a21c:	beq.n	a170 <FatFile::remove()+0x60>
    a21e:	add.w	r0, r4, #560	; 0x230
    a222:	bl	9914 <FatCache::sync()>
    a226:	cmp	r0, #0
    a228:	beq.n	a170 <FatFile::remove()+0x60>
    a22a:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    a22c:	ldr	r3, [r0, #0]
    a22e:	ldr	r3, [r3, #20]
    a230:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    a232:	cmp	r0, #0
    a234:	beq.n	a170 <FatFile::remove()+0x60>
    a236:	b.n	a172 <FatFile::remove()+0x62>

0000a238 <FatFile::lfnUniqueSfn(fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    a238:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    a23c:	ldrb	r7, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    a23e:	mov	r6, r1
    a240:	mov	r4, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    a242:	add.w	r5, r1, #13
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    a246:	mov.w	r8, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    a24a:	mov.w	r9, #126	; 0x7e
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
    a24e:	ldr	r0, [r6, #4]
    a250:	ldr	r1, [r6, #8]
    a252:	add.w	r3, r8, r0
    a256:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    a258:	cbz	r0, a26c <FatFile::lfnUniqueSfn(fname_t*)+0x34>
    a25a:	add	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    a25c:	ldrb.w	r2, [r1], #1
    a260:	add.w	r3, r3, r3, lsl #5
    a264:	eors	r3, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    a266:	cmp	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    a268:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    a26a:	bne.n	a25c <FatFile::lfnUniqueSfn(fname_t*)+0x24>
    a26c:	cmp	r7, #3
    a26e:	it	cs
    a270:	movcs	r7, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    a272:	adds	r2, r7, #4
    a274:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
    a276:	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    a27a:	adds	r0, r6, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    a27c:	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    a27e:	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    a280:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    a282:	ite	ls
    a284:	addls	r1, #48	; 0x30
    a286:	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    a288:	cmp	r7, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
    a28a:	mov.w	r3, r3, lsr #4
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    a28e:	strb	r1, [r0, #13]
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    a290:	bcc.n	a276 <FatFile::lfnUniqueSfn(fname_t*)+0x3e>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    a292:	adds	r3, r6, r7
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    a294:	movs	r1, #0
    a296:	strb.w	r9, [r3, #13]
    a29a:	mov	r0, r4
    a29c:	bl	929c <FatFile::seekSet(unsigned long)>
    rewind();
    while (1) {
      dir = readDirCache(true);
    a2a0:	movs	r1, #1
    a2a2:	mov	r0, r4
    a2a4:	bl	9028 <FatFile::readDirCache(bool)>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    a2a8:	movs	r2, #11
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    a2aa:	mov	r3, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    a2ac:	mov	r1, r0
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    a2ae:	cbz	r0, a2dc <FatFile::lfnUniqueSfn(fname_t*)+0xa4>
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    a2b0:	ldrb.w	lr, [r3]
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    a2b4:	mov	r0, r5
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    a2b6:	cmp.w	lr, #0
    a2ba:	beq.n	a2e8 <FatFile::lfnUniqueSfn(fname_t*)+0xb0>
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    a2bc:	ldrb	r3, [r3, #11]
    a2be:	lsls	r3, r3, #28
    a2c0:	bmi.n	a2a0 <FatFile::lfnUniqueSfn(fname_t*)+0x68>
    a2c2:	bl	f200 <memcmp>
    a2c6:	cmp	r0, #0
    a2c8:	bne.n	a2a0 <FatFile::lfnUniqueSfn(fname_t*)+0x68>
    a2ca:	add.w	r8, r8, #1
    a2ce:	uxth.w	r8, r8
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
    a2d2:	cmp.w	r8, #100	; 0x64
    a2d6:	bne.n	a24e <FatFile::lfnUniqueSfn(fname_t*)+0x16>
fail:
  return false;

done:
  return true;
}
    a2d8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
        if (!getError()) {
    a2dc:	ldrb	r0, [r4, #1]
    a2de:	clz	r0, r0
    a2e2:	lsrs	r0, r0, #5
    a2e4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

fail:
  return false;

done:
  return true;
    a2e8:	movs	r0, #1
    a2ea:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a2ee:	nop

0000a2f0 <FatFile::open(FatFile*, fname_t*, int)>:
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    a2f0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    a2f4:	ldrb	r4, [r1, #0]
    a2f6:	tst.w	r4, #112	; 0x70
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    a2fa:	sub	sp, #52	; 0x34
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    a2fc:	beq.n	a302 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    a2fe:	ldrb	r4, [r0, #0]
    a300:	cbz	r4, a30a <FatFile::open(FatFile*, fname_t*, int)+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
    a302:	movs	r0, #0
}
    a304:	add	sp, #52	; 0x34
    a306:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    a30a:	ldrb	r4, [r2, #0]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;
    a30c:	ldr.w	sl, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    a310:	lsls	r4, r4, #30
    a312:	bne.n	a39a <FatFile::open(FatFile*, fname_t*, int)+0xaa>
    a314:	mov.w	r8, #1
    a318:	mov	r6, r1
    a31a:	mov	fp, r2
    a31c:	str	r0, [sp, #36]	; 0x24
    a31e:	movs	r1, #0
    a320:	mov	r0, r6
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
  uint8_t ms10;
  uint16_t freeIndex = 0;
    a322:	mov	r7, r1
    a324:	str	r3, [sp, #28]
    a326:	bl	929c <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    a32a:	add.w	r3, fp, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
    a32e:	str	r7, [sp, #24]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
    a330:	str	r7, [sp, #12]
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
    a332:	mov	r4, r7
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
    a334:	mov	r9, r7
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
    a336:	str	r7, [sp, #20]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    a338:	str	r3, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    a33a:	movs	r1, #1
    a33c:	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    a33e:	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache(true);
    a340:	bl	9028 <FatFile::readDirCache(bool)>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    a344:	ubfx	r5, r5, #5, #16
    dir = dirFile->readDirCache(true);
    if (!dir) {
    a348:	mov	r3, r0
    a34a:	cmp	r0, #0
    a34c:	beq.w	a468 <FatFile::open(FatFile*, fname_t*, int)+0x178>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    a350:	ldrb	r2, [r0, #0]
    a352:	cmp	r2, #229	; 0xe5
    a354:	beq.n	a3cc <FatFile::open(FatFile*, fname_t*, int)+0xdc>
    a356:	cmp	r2, #0
    a358:	beq.n	a3cc <FatFile::open(FatFile*, fname_t*, int)+0xdc>
      if (dir->name[0] == FAT_NAME_FREE) {
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
    a35a:	cmp	r4, r8
    a35c:	it	cc
    a35e:	movcc	r4, #0
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    a360:	cmp	r2, #46	; 0x2e
    a362:	beq.n	a3c6 <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    a364:	ldrb	r1, [r3, #11]
      lfnOrd = 0;
    } else if (isLongName(dir)) {
    a366:	cmp	r1, #15
    a368:	beq.n	a3e8 <FatFile::open(FatFile*, fname_t*, int)+0xf8>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
    a36a:	and.w	r1, r1, #8
    a36e:	and.w	r2, r1, #255	; 0xff
    a372:	cbnz	r1, a3c6 <FatFile::open(FatFile*, fname_t*, int)+0xd6>
      if (lfnOrd) {
    a374:	cmp.w	r9, #0
    a378:	bne.w	a640 <FatFile::open(FatFile*, fname_t*, int)+0x350>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    a37c:	mov	r0, r3
    a37e:	movs	r2, #11
    a380:	ldr	r1, [sp, #16]
    a382:	bl	f200 <memcmp>
    a386:	cmp	r0, #0
    a388:	bne.n	a33a <FatFile::open(FatFile*, fname_t*, int)+0x4a>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    a38a:	ldrb.w	r3, [fp]
    a38e:	lsls	r0, r3, #31
    a390:	bpl.w	a668 <FatFile::open(FatFile*, fname_t*, int)+0x378>
          goto found;
        }
        fnameFound = true;
    a394:	movs	r3, #1
    a396:	str	r3, [sp, #20]
    a398:	b.n	a33a <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    a39a:	ldr	r5, [pc, #724]	; (a670 <FatFile::open(FatFile*, fname_t*, int)+0x380>)
    a39c:	add.w	r4, sl, #12
    a3a0:	umull	r4, r8, r5, r4
    a3a4:	mov.w	r8, r8, lsr #2
    a3a8:	add.w	r8, r8, #1
    a3ac:	uxtb.w	r8, r8
    a3b0:	b.n	a318 <FatFile::open(FatFile*, fname_t*, int)+0x28>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    a3b2:	ldr	r1, [sp, #12]
    a3b4:	subs	r1, #1
    a3b6:	uxtb	r1, r1
    a3b8:	cmp	r2, r1
    a3ba:	str	r1, [sp, #12]
    a3bc:	bne.n	a3c6 <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    a3be:	ldrb	r2, [r3, #13]
    a3c0:	ldr	r1, [sp, #24]
    a3c2:	cmp	r1, r2
    a3c4:	beq.n	a3fe <FatFile::open(FatFile*, fname_t*, int)+0x10e>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    a3c6:	mov.w	r9, #0
    a3ca:	b.n	a33a <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    a3cc:	cmp	r4, #0
    a3ce:	it	eq
    a3d0:	moveq	r7, r5
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
    a3d2:	cmp	r4, r8
        freeFound++;
    a3d4:	itt	cc
    a3d6:	addcc	r4, #1
    a3d8:	uxtbcc	r4, r4
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    a3da:	cmp	r2, #0
    a3dc:	beq.n	a470 <FatFile::open(FatFile*, fname_t*, int)+0x180>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    a3de:	cmp	r2, #229	; 0xe5
    a3e0:	bne.n	a360 <FatFile::open(FatFile*, fname_t*, int)+0x70>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    a3e2:	mov.w	r9, #0
    a3e6:	b.n	a33a <FatFile::open(FatFile*, fname_t*, int)+0x4a>
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
      lfnOrd = 0;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
    a3e8:	cmp.w	r9, #0
    a3ec:	bne.n	a3b2 <FatFile::open(FatFile*, fname_t*, int)+0xc2>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
    a3ee:	lsls	r5, r2, #25
    a3f0:	bpl.n	a33a <FatFile::open(FatFile*, fname_t*, int)+0x4a>
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    a3f2:	and.w	r9, r2, #31
        checksum = ldir->checksum;
    a3f6:	ldrb	r2, [r3, #13]
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    a3f8:	str.w	r9, [sp, #12]
        checksum = ldir->checksum;
    a3fc:	str	r2, [sp, #24]
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    a3fe:	ldr	r2, [sp, #12]
    a400:	subs	r2, #1
    a402:	add.w	r5, r2, r2, lsl #1
    a406:	add.w	r5, r2, r5, lsl #2
      if (k >= len) {
    a40a:	cmp	sl, r5
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    a40c:	mov	r2, r5
      if (k >= len) {
    a40e:	bls.n	a3c6 <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    a410:	add.w	r1, r5, #13
    a414:	str.w	r9, [sp, #32]
    a418:	mov	r9, r1
    a41a:	b.n	a444 <FatFile::open(FatFile*, fname_t*, int)+0x154>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    a41c:	ldr.w	r0, [fp, #8]
    a420:	ldrb	r2, [r0, r2]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    a422:	cmp.w	ip, #25
    a426:	it	ls
    a428:	addls	r1, #32
    a42a:	sub.w	r0, r2, #65	; 0x41
    a42e:	it	ls
    a430:	uxtbls	r1, r1
    a432:	cmp	r0, #25
    a434:	itt	ls
    a436:	addls	r2, #32
    a438:	uxtbls	r2, r2
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    a43a:	cmp	r2, r1
    a43c:	bne.n	a3c6 <FatFile::open(FatFile*, fname_t*, int)+0xd6>
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
    a43e:	cmp	lr, r9
    a440:	beq.n	a4c8 <FatFile::open(FatFile*, fname_t*, int)+0x1d8>
    a442:	mov	r2, lr
        uint16_t u = lfnGetChar(ldir, i);
    a444:	subs	r1, r2, r5
    a446:	uxtb	r1, r1
    a448:	mov	r0, r3
    a44a:	bl	9c8c <lfnGetChar(DirLfn_t*, unsigned char)>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    a44e:	uxtb	r1, r0
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    a450:	cmp	sl, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    a452:	sub.w	ip, r1, #65	; 0x41
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    a456:	add.w	lr, r2, #1
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    a45a:	beq.w	a632 <FatFile::open(FatFile*, fname_t*, int)+0x342>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    a45e:	cmp	r0, #255	; 0xff
    a460:	bls.n	a41c <FatFile::open(FatFile*, fname_t*, int)+0x12c>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    a462:	mov.w	r9, #0
    a466:	b.n	a33a <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
    a468:	ldrb	r3, [r6, #1]
    a46a:	cmp	r3, #0
    a46c:	bne.w	a302 <FatFile::open(FatFile*, fname_t*, int)+0x12>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    a470:	ldr	r2, [sp, #28]
    a472:	mov	r3, r2
    a474:	lsls	r2, r3, #22
    a476:	bpl.w	a302 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    a47a:	and.w	r3, r3, #3
    a47e:	subs	r3, #1
    a480:	cmp	r3, #1
    a482:	bhi.w	a302 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    a486:	cmp	r4, #0
    a488:	it	eq
    a48a:	moveq	r7, r5
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    a48c:	cmp	r4, r8
    a48e:	bcc.n	a498 <FatFile::open(FatFile*, fname_t*, int)+0x1a8>
    a490:	b.n	a4ce <FatFile::open(FatFile*, fname_t*, int)+0x1de>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    a492:	uxtb	r4, r3
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    a494:	cmp	r8, r4
    a496:	bls.n	a4ce <FatFile::open(FatFile*, fname_t*, int)+0x1de>
    dir = dirFile->readDirCache();
    a498:	movs	r1, #0
    a49a:	mov	r0, r6
    a49c:	bl	9028 <FatFile::readDirCache(bool)>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    a4a0:	adds	r3, r4, #1
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
    a4a2:	cmp	r0, #0
    a4a4:	bne.n	a492 <FatFile::open(FatFile*, fname_t*, int)+0x1a2>
      if (dirFile->getError()) {
    a4a6:	ldrb	r3, [r6, #1]
    a4a8:	cbz	r3, a4b4 <FatFile::open(FatFile*, fname_t*, int)+0x1c4>
    a4aa:	b.n	a302 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    a4ac:	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
    a4ae:	ldrb	r3, [r3, #4]
    a4b0:	cmp	r3, #1
    a4b2:	bhi.n	a4ce <FatFile::open(FatFile*, fname_t*, int)+0x1de>
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    a4b4:	cmp	r8, r4
    a4b6:	bls.n	a4ce <FatFile::open(FatFile*, fname_t*, int)+0x1de>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    a4b8:	mov	r0, r6
    a4ba:	bl	89c8 <FatFile::addDirCluster()>
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    a4be:	adds	r4, #16
    a4c0:	uxtb	r4, r4
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    a4c2:	cmp	r0, #0
    a4c4:	bne.n	a4ac <FatFile::open(FatFile*, fname_t*, int)+0x1bc>
    a4c6:	b.n	a302 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    a4c8:	ldr.w	r9, [sp, #32]
    a4cc:	b.n	a33a <FatFile::open(FatFile*, fname_t*, int)+0x4a>
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    a4ce:	ldr	r3, [sp, #20]
    a4d0:	cbz	r3, a4e0 <FatFile::open(FatFile*, fname_t*, int)+0x1f0>
    if (!dirFile->lfnUniqueSfn(fname)) {
    a4d2:	mov	r1, fp
    a4d4:	mov	r0, r6
    a4d6:	bl	a238 <FatFile::lfnUniqueSfn(fname_t*)>
    a4da:	cmp	r0, #0
    a4dc:	beq.w	a302 <FatFile::open(FatFile*, fname_t*, int)+0x12>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    a4e0:	lsls	r1, r7, #5
    a4e2:	mov	r0, r6
    a4e4:	bl	929c <FatFile::seekSet(unsigned long)>
    a4e8:	cmp	r0, #0
    a4ea:	beq.w	a302 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
    a4ee:	add.w	r8, r8, #4294967295
  for (order = lfnOrd ; order ; order--) {
    a4f2:	ands.w	r9, r8, #255	; 0xff
    a4f6:	beq.n	a5ac <FatFile::open(FatFile*, fname_t*, int)+0x2bc>
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    a4f8:	orr.w	r4, r9, #64	; 0x40
    a4fc:	uxtb	r4, r4
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    a4fe:	mov	r5, r9
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    a500:	movs	r7, #0
    a502:	movs	r1, #0
    a504:	mov	r0, r6
    a506:	bl	9028 <FatFile::readDirCache(bool)>
    if (!ldir) {
    a50a:	cmp	r0, #0
    a50c:	beq.w	a302 <FatFile::open(FatFile*, fname_t*, int)+0x12>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    a510:	ldr	r2, [r6, #8]
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    a512:	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    a516:	cmp	r9, r5
    a518:	orr.w	r3, r3, #1
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    a51c:	mov.w	ip, #15
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    a520:	ite	ne
    a522:	movne	r1, r5
    a524:	moveq	r1, r4
    a526:	strb.w	r3, [r2, #36]	; 0x24
    a52a:	add.w	lr, fp, #12
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    a52e:	strb.w	ip, [r0, #11]
    ldir->mustBeZero1 = 0;
    a532:	strb	r7, [r0, #12]
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    a534:	strb	r1, [r0, #0]
    a536:	add.w	ip, fp, #23
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    a53a:	movs	r3, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    a53c:	ldrb.w	r8, [lr, #1]!
    a540:	lsrs	r2, r3, #1
    a542:	orr.w	r3, r2, r3, lsl #7
    a546:	uxtab	r3, r8, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    a54a:	cmp	lr, ip
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    a54c:	uxtb	r3, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    a54e:	bne.n	a53c <FatFile::open(FatFile*, fname_t*, int)+0x24c>
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    a550:	and.w	r1, r1, #31
    a554:	subs	r1, #1
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    a556:	strb	r3, [r0, #13]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    a558:	add.w	r2, r1, r1, lsl #1
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
    a55c:	ldr.w	lr, [fp, #8]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    a560:	strh	r7, [r0, #26]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    a562:	add.w	r2, r1, r2, lsl #2
    a566:	adds	r0, #4
  for (uint8_t i = 0; i < 13; i++, k++) {
    a568:	movs	r3, #0
    a56a:	b.n	a58c <FatFile::open(FatFile*, fname_t*, int)+0x29c>
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    a56c:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    a56e:	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    a572:	bls.n	a59e <FatFile::open(FatFile*, fname_t*, int)+0x2ae>
    setLe16(ldir->unicode1 + 2*i, c);
  } else if (i < 11) {
    a574:	cmp	r3, #10
    a576:	ite	ls
    a578:	strhls	r1, [r0, #0]
    a57a:	strhhi	r1, [r0, #2]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    a57c:	adds	r3, #1
    a57e:	uxtb	r3, r3
    a580:	cmp	r3, #13
    a582:	add.w	r2, r2, #1
    a586:	add.w	r0, r0, #2
    a58a:	beq.n	a5a4 <FatFile::open(FatFile*, fname_t*, int)+0x2b4>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    a58c:	cmp	sl, r2
    a58e:	bhi.n	a56c <FatFile::open(FatFile*, fname_t*, int)+0x27c>
    a590:	ite	ne
    a592:	movne.w	r1, #4294967295
    a596:	moveq	r1, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    a598:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    a59a:	uxth	r1, r1
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    a59c:	bhi.n	a574 <FatFile::open(FatFile*, fname_t*, int)+0x284>
    a59e:	strh.w	r1, [r0, #-3]
    a5a2:	b.n	a57c <FatFile::open(FatFile*, fname_t*, int)+0x28c>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    a5a4:	subs	r5, #1
    a5a6:	ands.w	r5, r5, #255	; 0xff
    a5aa:	bne.n	a502 <FatFile::open(FatFile*, fname_t*, int)+0x212>
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
  dir = dirFile->readDirCache();
    a5ac:	movs	r1, #0
    a5ae:	mov	r0, r6
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    a5b0:	ldr	r5, [r6, #20]
  dir = dirFile->readDirCache();
    a5b2:	bl	9028 <FatFile::readDirCache(bool)>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    a5b6:	ubfx	r5, r5, #5, #16
  dir = dirFile->readDirCache();
  if (!dir) {
    a5ba:	mov	r4, r0
    a5bc:	cmp	r0, #0
    a5be:	beq.w	a302 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    a5c2:	movs	r2, #32
    a5c4:	movs	r1, #0
    a5c6:	bl	f32c <memset>
  memcpy(dir->name, fname->sfn, 11);
    a5ca:	mov	r3, fp

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;

  // set timestamps
  if (FsDateTime::callback) {
    a5cc:	ldr	r2, [pc, #164]	; (a674 <FatFile::open(FatFile*, fname_t*, int)+0x384>)
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);
    a5ce:	ldr.w	r1, [r3, #13]!
    a5d2:	ldr	r0, [r3, #4]
    a5d4:	str	r0, [r4, #4]
    a5d6:	str	r1, [r4, #0]
    a5d8:	ldrh	r1, [r3, #8]
    a5da:	ldrb	r3, [r3, #10]
    a5dc:	strb	r3, [r4, #10]
    a5de:	strh	r1, [r4, #8]

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    a5e0:	ldrb.w	r3, [fp]

  // set timestamps
  if (FsDateTime::callback) {
    a5e4:	ldr	r7, [r2, #0]
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    a5e6:	and.w	r3, r3, #24
    a5ea:	strb	r3, [r4, #12]

  // set timestamps
  if (FsDateTime::callback) {
    a5ec:	cbz	r7, a612 <FatFile::open(FatFile*, fname_t*, int)+0x322>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    a5ee:	add.w	r2, sp, #43	; 0x2b
    a5f2:	add.w	r1, sp, #46	; 0x2e
    a5f6:	add	r0, sp, #44	; 0x2c
    a5f8:	blx	r7
    dir->createTimeMs = ms10;
    setLe16(dir->createDate, date);
    a5fa:	ldrh.w	r3, [sp, #44]	; 0x2c
    setLe16(dir->createTime, time);
    a5fe:	ldrh.w	r2, [sp, #46]	; 0x2e

  // set timestamps
  if (FsDateTime::callback) {
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    dir->createTimeMs = ms10;
    a602:	ldrb.w	r1, [sp, #43]	; 0x2b
    a606:	strb	r1, [r4, #13]
    a608:	strh	r3, [r4, #16]
    a60a:	strh	r3, [r4, #18]
    a60c:	strh	r3, [r4, #24]
    a60e:	strh	r2, [r4, #14]
    a610:	strh	r2, [r4, #22]
    setLe16(dir->accessDate, date);
    setLe16(dir->modifyDate, date);
    setLe16(dir->modifyTime, time);;
  }
  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
    a612:	ldr	r2, [r6, #8]
    a614:	ldrb.w	r3, [r2, #36]	; 0x24
    a618:	orr.w	r3, r3, #1
    a61c:	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    a620:	str.w	r9, [sp]
    a624:	ldr	r3, [sp, #28]
    a626:	ldr	r0, [sp, #36]	; 0x24
    a628:	mov	r2, r5
    a62a:	mov	r1, r6
    a62c:	bl	9330 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    a630:	b.n	a304 <FatFile::open(FatFile*, fname_t*, int)+0x14>
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
    a632:	cmp	r0, #0
    a634:	ldr.w	r9, [sp, #32]
    a638:	it	ne
    a63a:	movne.w	r9, #0
    a63e:	b.n	a33a <FatFile::open(FatFile*, fname_t*, int)+0x4a>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    a640:	ldr	r1, [sp, #12]
    a642:	cmp	r1, #1
    a644:	bne.w	a302 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    a648:	subs	r4, r3, #1
    a64a:	adds	r3, #10
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    a64c:	ldrb.w	r0, [r4, #1]!
    a650:	lsrs	r1, r2, #1
    a652:	orr.w	r2, r1, r2, lsl #7
    a656:	uxtab	r2, r0, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    a65a:	cmp	r4, r3
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    a65c:	uxtb	r2, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    a65e:	bne.n	a64c <FatFile::open(FatFile*, fname_t*, int)+0x35c>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    a660:	ldr	r3, [sp, #24]
    a662:	cmp	r3, r2
    a664:	bne.w	a302 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    a668:	ldr	r3, [sp, #28]
    a66a:	lsls	r1, r3, #20
    a66c:	bpl.n	a620 <FatFile::open(FatFile*, fname_t*, int)+0x330>
    a66e:	b.n	a302 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    a670:	.word	0x4ec4ec4f
    a674:	.word	0x1fff1f34

0000a678 <FatFile::getSFN(char*) [clone .part.2]>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
    a678:	push	{r3, r4, r5, r6, r7, lr}
    a67a:	mov	r6, r1
    name[0] = '/';
    name[1] = '\0';
    return true;
  }
  // cache entry
  dir = reinterpret_cast<DirFat_t*>(cacheDirEntry(FatCache::CACHE_FOR_READ));
    a67c:	movs	r1, #0
    a67e:	bl	8a5c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    a682:	cbz	r0, a6c0 <FatFile::getSFN(char*) [clone .part.2]+0x48>
    a684:	movs	r2, #0
    a686:	mov	r1, r2
    a688:	subs	r4, r0, #1
    a68a:	movs	r7, #8
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    a68c:	mov.w	lr, #46	; 0x2e
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
    a690:	ldrb.w	r3, [r4, #1]!
    a694:	cmp	r3, #32
    a696:	beq.n	a6b4 <FatFile::getSFN(char*) [clone .part.2]+0x3c>
      continue;
    }
    if (i == 8) {
    a698:	cmp	r2, #8
    a69a:	beq.n	a6c2 <FatFile::getSFN(char*) [clone .part.2]+0x4a>
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    a69c:	sub.w	r5, r3, #65	; 0x41
    a6a0:	cmp	r5, #25
    a6a2:	bhi.n	a6ae <FatFile::getSFN(char*) [clone .part.2]+0x36>
    a6a4:	ldrb	r5, [r0, #12]
    a6a6:	tst	r7, r5
      c += 'a' - 'A';
    a6a8:	itt	ne
    a6aa:	addne	r3, #32
    a6ac:	uxtbne	r3, r3
    }
    name[j++] = c;
    a6ae:	strb	r3, [r6, r1]
    a6b0:	adds	r1, #1
    a6b2:	uxtb	r1, r1
    a6b4:	adds	r2, #1
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    a6b6:	cmp	r2, #11
    a6b8:	bne.n	a690 <FatFile::getSFN(char*) [clone .part.2]+0x18>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
    a6ba:	movs	r3, #0
    a6bc:	strb	r3, [r6, r1]
  return true;
    a6be:	movs	r0, #1

fail:
  return false;
}
    a6c0:	pop	{r3, r4, r5, r6, r7, pc}
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    a6c2:	strb.w	lr, [r6, r1]
    a6c6:	adds	r1, #1
    a6c8:	uxtb	r1, r1
    a6ca:	ldrb	r3, [r4, #0]
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
    a6cc:	movs	r7, #16
    a6ce:	b.n	a69c <FatFile::getSFN(char*) [clone .part.2]+0x24>

0000a6d0 <FatFile::getSFN(char*)>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
    a6d0:	ldrb	r3, [r0, #0]
    a6d2:	mov	r2, r1
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t *dir;

  if (!isOpen()) {
    a6d4:	cbz	r3, a6ec <FatFile::getSFN(char*)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    a6d6:	tst.w	r3, #96	; 0x60
    a6da:	beq.n	a6e8 <FatFile::getSFN(char*)+0x18>
    name[0] = '/';
    a6dc:	movs	r1, #47	; 0x2f
    name[1] = '\0';
    a6de:	movs	r3, #0
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    name[0] = '/';
    a6e0:	strb	r1, [r2, #0]
    name[1] = '\0';
    a6e2:	strb	r3, [r2, #1]
    return true;
    a6e4:	movs	r0, #1
    a6e6:	bx	lr
    a6e8:	b.w	a678 <FatFile::getSFN(char*) [clone .part.2]>
  }
  name[j] = 0;
  return true;

fail:
  return false;
    a6ec:	mov	r0, r3
}
    a6ee:	bx	lr

0000a6f0 <FatFile::printSFN(Print*)>:
//------------------------------------------------------------------------------
size_t FatFile::printSFN(print_t* pr) {
    a6f0:	ldrb	r3, [r0, #0]
bool FatFile::getSFN(char* name) {
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t *dir;

  if (!isOpen()) {
    a6f2:	cbnz	r3, a6f8 <FatFile::printSFN(Print*)+0x8>
    goto fail;
  }
  return pr->write(name);

fail:
  return 0;
    a6f4:	movs	r0, #0
}
    a6f6:	bx	lr

fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::printSFN(print_t* pr) {
    a6f8:	push	{r4, r5, lr}

  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    a6fa:	tst.w	r3, #96	; 0x60

fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::printSFN(print_t* pr) {
    a6fe:	sub	sp, #20
    a700:	mov	r4, r1

  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    a702:	beq.n	a728 <FatFile::printSFN(Print*)+0x38>
    name[0] = '/';
    a704:	movs	r2, #47	; 0x2f
    name[1] = '\0';
    a706:	movs	r3, #0
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    name[0] = '/';
    a708:	strb.w	r2, [sp]
    name[1] = '\0';
    a70c:	strb.w	r3, [sp, #1]
    a710:	mov	r5, sp
    a712:	mov	r0, r5
    a714:	bl	f940 <strlen>
    a718:	ldr	r3, [r4, #0]
    a71a:	mov	r2, r0
    a71c:	mov	r1, r5
    a71e:	ldr	r3, [r3, #4]
    a720:	mov	r0, r4
    a722:	blx	r3
  }
  return pr->write(name);

fail:
  return 0;
}
    a724:	add	sp, #20
    a726:	pop	{r4, r5, pc}
    a728:	mov	r1, sp
    a72a:	mov	r5, sp
    a72c:	bl	a678 <FatFile::getSFN(char*) [clone .part.2]>
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::printSFN(print_t* pr) {
  char name[13];
  if (!getSFN(name)) {
    a730:	cmp	r0, #0
    a732:	bne.n	a712 <FatFile::printSFN(Print*)+0x22>
    goto fail;
  }
  return pr->write(name);

fail:
  return 0;
    a734:	movs	r0, #0
}
    a736:	add	sp, #20
    a738:	pop	{r4, r5, pc}
    a73a:	nop

0000a73c <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    a73c:	push	{r3, r4, r5, r6, r7, lr}
  m_fFile = nullptr;
    a73e:	movs	r5, #0
    a740:	str	r5, [r0, #56]	; 0x38
  m_xFile = nullptr;
  if (from.m_fFile) {
    a742:	ldr	r4, [r1, #56]	; 0x38
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
  m_fFile = nullptr;
  m_xFile = nullptr;
    a744:	str	r5, [r0, #60]	; 0x3c
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    a746:	mov	r6, r0
    a748:	mov	r7, r1
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    a74a:	cbz	r4, a770 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    a74c:	mov	r1, r0
    a74e:	movs	r0, #36	; 0x24
    a750:	bl	a9a8 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    a754:	strb	r5, [r0, #0]
    a756:	strb	r5, [r0, #1]
    a758:	strb	r5, [r0, #2]
    a75a:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    a75c:	ldr	r5, [r7, #56]	; 0x38
    a75e:	mov	r4, r0
    a760:	ldmia	r5!, {r0, r1, r2, r3}
    a762:	stmia	r4!, {r0, r1, r2, r3}
    a764:	ldmia	r5!, {r0, r1, r2, r3}
    a766:	stmia	r4!, {r0, r1, r2, r3}
    a768:	ldr	r3, [r5, #0]
    a76a:	str	r3, [r4, #0]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
    a76c:	mov	r0, r6
    a76e:	pop	{r3, r4, r5, r6, r7, pc}
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    a770:	ldr	r3, [r1, #60]	; 0x3c
    a772:	cmp	r3, #0
    a774:	beq.n	a76c <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>
    m_xFile = new (m_fileMem) ExFatFile;
    a776:	mov	r1, r0
    a778:	movs	r0, #56	; 0x38
    a77a:	bl	a9a8 <operator new(unsigned int, unsigned long*)>
    a77e:	strb.w	r4, [r0, #49]	; 0x31
    a782:	strb.w	r4, [r0, #50]	; 0x32
    a786:	strb.w	r4, [r0, #51]	; 0x33
    a78a:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    a78c:	ldr	r3, [r7, #60]	; 0x3c
    a78e:	mov	r2, r0
    a790:	add.w	r1, r3, #48	; 0x30
    a794:	ldr	r5, [r3, #0]
    a796:	ldr	r4, [r3, #4]
    a798:	ldr	r0, [r3, #8]
    a79a:	ldr	r7, [r3, #12]
    a79c:	str	r7, [r2, #12]
    a79e:	adds	r3, #16
    a7a0:	cmp	r3, r1
    a7a2:	str	r5, [r2, #0]
    a7a4:	str	r4, [r2, #4]
    a7a6:	str	r0, [r2, #8]
    a7a8:	add.w	r2, r2, #16
    a7ac:	bne.n	a794 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x58>
    a7ae:	ldr	r3, [r3, #0]
    a7b0:	str	r3, [r2, #0]
    a7b2:	b.n	a76c <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>

0000a7b4 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    a7b4:	push	{r4, lr}
    a7b6:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    a7b8:	ldr	r0, [r0, #56]	; 0x38
    a7ba:	cbz	r0, a7c8 <FsBaseFile::close()+0x14>
    a7bc:	bl	8b10 <FatFile::close()>
    a7c0:	cbz	r0, a7c8 <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    a7c2:	movs	r3, #0
    a7c4:	str	r3, [r4, #56]	; 0x38
    return true;
    a7c6:	pop	{r4, pc}
  }
  if (m_xFile && m_xFile->close()) {
    a7c8:	ldr	r0, [r4, #60]	; 0x3c
    a7ca:	cbz	r0, a7d8 <FsBaseFile::close()+0x24>
    a7cc:	bl	6de8 <ExFatFile::close()>
    a7d0:	cbz	r0, a7d8 <FsBaseFile::close()+0x24>
    m_xFile = nullptr;
    a7d2:	movs	r3, #0
    a7d4:	str	r3, [r4, #60]	; 0x3c
    a7d6:	pop	{r4, pc}
    return true;
  }
  return false;
    a7d8:	movs	r0, #0
}
    a7da:	pop	{r4, pc}

0000a7dc <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    a7dc:	cbz	r1, a852 <FsBaseFile::open(FsVolume*, char const*, int)+0x76>
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    a7de:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a7e2:	mov	r4, r1
    a7e4:	mov	r5, r0
    a7e6:	mov	r8, r3
    a7e8:	mov	r7, r2
  if (!vol) {
    return false;
  }
  close();
    a7ea:	bl	a7b4 <FsBaseFile::close()>
  if (vol->m_fVol) {
    a7ee:	ldr.w	r6, [r4, #1144]	; 0x478
    a7f2:	cbz	r6, a820 <FsBaseFile::open(FsVolume*, char const*, int)+0x44>
    m_fFile = new (m_fileMem) FatFile;
    a7f4:	mov	r1, r5
    a7f6:	movs	r0, #36	; 0x24
    a7f8:	bl	a9a8 <operator new(unsigned int, unsigned long*)>
    a7fc:	movs	r1, #0
    a7fe:	strb	r1, [r0, #0]
    a800:	strb	r1, [r0, #1]
    a802:	strb	r1, [r0, #2]
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    a804:	ldr.w	r1, [r4, #1144]	; 0x478
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    a808:	str	r0, [r5, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    a80a:	mov	r3, r8
    a80c:	mov	r2, r7
    a80e:	bl	8e48 <FatFile::open(FatVolume*, char const*, int)>
    a812:	cbz	r0, a81a <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
      return true;
    a814:	movs	r0, #1
    a816:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    m_fFile = nullptr;
    a81a:	str	r0, [r5, #56]	; 0x38
    return false;
    a81c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    a820:	ldr.w	r3, [r4, #1148]	; 0x47c
    a824:	cbz	r3, a856 <FsBaseFile::open(FsVolume*, char const*, int)+0x7a>
    m_xFile = new (m_fileMem) ExFatFile;
    a826:	mov	r1, r5
    a828:	movs	r0, #56	; 0x38
    a82a:	bl	a9a8 <operator new(unsigned int, unsigned long*)>
    a82e:	strb.w	r6, [r0, #49]	; 0x31
    a832:	strb.w	r6, [r0, #50]	; 0x32
    a836:	strb.w	r6, [r0, #51]	; 0x33
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    a83a:	ldr.w	r1, [r4, #1148]	; 0x47c
      return true;
    }
    m_fFile = nullptr;
    return false;
  } else if (vol->m_xVol) {
    m_xFile = new (m_fileMem) ExFatFile;
    a83e:	str	r0, [r5, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    a840:	mov	r3, r8
    a842:	mov	r2, r7
    a844:	bl	77e4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    a848:	cmp	r0, #0
    a84a:	bne.n	a814 <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_xFile = nullptr;
    a84c:	str	r0, [r5, #60]	; 0x3c
  }
  return false;
}
    a84e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    a852:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    a854:	bx	lr
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    a856:	movs	r0, #0
    a858:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a85c <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    a85c:	push	{r3, r4, r5, r6, r7, lr}
    a85e:	mov	r5, r1
    a860:	mov	r7, r2
    a862:	mov	r4, r0
  close();
    a864:	bl	a7b4 <FsBaseFile::close()>
  if (dir->m_fFile) {
    a868:	ldr	r6, [r5, #56]	; 0x38
    a86a:	cbz	r6, a890 <FsBaseFile::openNext(FsBaseFile*, int)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    a86c:	mov	r1, r4
    a86e:	movs	r0, #36	; 0x24
    a870:	bl	a9a8 <operator new(unsigned int, unsigned long*)>
    a874:	movs	r2, #0
    a876:	strb	r2, [r0, #0]
    a878:	strb	r2, [r0, #1]
    a87a:	strb	r2, [r0, #2]
    a87c:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    a87e:	mov	r2, r7
    a880:	ldr	r1, [r5, #56]	; 0x38
    a882:	bl	9408 <FatFile::openNext(FatFile*, int)>
    a886:	cbz	r0, a88c <FsBaseFile::openNext(FsBaseFile*, int)+0x30>
      return true;
    a888:	movs	r0, #1
    a88a:	pop	{r3, r4, r5, r6, r7, pc}
    }
    m_fFile = nullptr;
    a88c:	str	r0, [r4, #56]	; 0x38
    a88e:	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
    a890:	ldr	r0, [r5, #60]	; 0x3c
    a892:	cbz	r0, a8b8 <FsBaseFile::openNext(FsBaseFile*, int)+0x5c>
    m_xFile = new (m_fileMem) ExFatFile;
    a894:	mov	r1, r4
    a896:	movs	r0, #56	; 0x38
    a898:	bl	a9a8 <operator new(unsigned int, unsigned long*)>
    a89c:	strb.w	r6, [r0, #49]	; 0x31
    a8a0:	strb.w	r6, [r0, #50]	; 0x32
    a8a4:	strb.w	r6, [r0, #51]	; 0x33
    a8a8:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    a8aa:	mov	r2, r7
    a8ac:	ldr	r1, [r5, #60]	; 0x3c
    a8ae:	bl	77f4 <ExFatFile::openNext(ExFatFile*, int)>
    a8b2:	cmp	r0, #0
    a8b4:	bne.n	a888 <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
      return true;
    }
    m_xFile = nullptr;
    a8b6:	str	r0, [r4, #60]	; 0x3c
  }
  return false;
}
    a8b8:	pop	{r3, r4, r5, r6, r7, pc}
    a8ba:	nop

0000a8bc <FsVolume::begin(BlockDeviceInterface*)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    a8bc:	push	{r4, r5, r6, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    a8be:	movs	r6, #0
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    a8c0:	mov	r5, r0
  m_blockDev = blockDev;
    a8c2:	str.w	r1, [r0, #1152]	; 0x480
  m_fVol = nullptr;
    a8c6:	str.w	r6, [r0, #1144]	; 0x478
  m_xVol = new (m_volMem) ExFatVolume;
    a8ca:	mov	r1, r0
    a8cc:	mov.w	r0, #1144	; 0x478
    a8d0:	bl	a9a8 <operator new(unsigned int, unsigned long*)>
    a8d4:	mov	r4, r0
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    a8d6:	str	r6, [r0, #4]
    invalidate();
    a8d8:	bl	79f8 <FsCache::invalidate()>
    a8dc:	add.w	r0, r4, #524	; 0x20c
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    a8e0:	str.w	r6, [r4, #528]	; 0x210
    invalidate();
    a8e4:	bl	79f8 <FsCache::invalidate()>
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() : m_fatType(0) {}
    a8e8:	strb.w	r6, [r4, #1084]	; 0x43c
    a8ec:	strb.w	r6, [r4, #1137]	; 0x471
    a8f0:	strb.w	r6, [r4, #1138]	; 0x472
    a8f4:	strb.w	r6, [r4, #1139]	; 0x473
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    a8f8:	ldr.w	r1, [r5, #1152]	; 0x480
    a8fc:	str.w	r4, [r5, #1148]	; 0x47c
    a900:	mov	r0, r4
    a902:	movs	r2, #1
    a904:	bl	7b88 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>
    a908:	cbnz	r0, a946 <FsVolume::begin(BlockDeviceInterface*)+0x8a>
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    a90a:	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    a90c:	mov	r1, r5
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    a90e:	str.w	r6, [r5, #1148]	; 0x47c
  m_fVol = new (m_volMem) FatVolume;
    a912:	mov.w	r0, #1120	; 0x460
    a916:	bl	a9a8 <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() : m_fatType(0) {}
    a91a:	strb	r6, [r0, #7]
    a91c:	strb.w	r6, [r0, #1084]	; 0x43c
    a920:	strb.w	r6, [r0, #1085]	; 0x43d
    a924:	strb.w	r6, [r0, #1086]	; 0x43e
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    a928:	movs	r2, #1
    a92a:	ldr.w	r1, [r5, #1152]	; 0x480
    a92e:	str.w	r0, [r5, #1144]	; 0x478
    a932:	mov	r4, r0
    a934:	bl	9b78 <FatPartition::init(BlockDeviceInterface*, unsigned char)>
    a938:	cbnz	r0, a964 <FsVolume::begin(BlockDeviceInterface*)+0xa8>
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    a93a:	ldr	r3, [pc, #64]	; (a97c <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
    a93c:	movs	r0, #0
    a93e:	str	r0, [r3, #0]
  m_fVol = nullptr;
    a940:	str.w	r0, [r5, #1144]	; 0x478
  return false;
    a944:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    a946:	add.w	r6, r4, #1088	; 0x440
    a94a:	mov	r0, r6
    a94c:	bl	6de8 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    a950:	mov	r1, r4
    a952:	mov	r0, r6
    a954:	bl	6ea4 <ExFatFile::openRoot(ExFatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    a958:	cmp	r0, #0
    a95a:	beq.n	a90a <FsVolume::begin(BlockDeviceInterface*)+0x4e>

 done:
  m_cwv = this;
    a95c:	ldr	r3, [pc, #28]	; (a97c <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
  return true;
    a95e:	movs	r0, #1
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    a960:	str	r5, [r3, #0]
  return true;
    a962:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    a964:	addw	r6, r4, #1084	; 0x43c
    a968:	mov	r0, r6
    a96a:	bl	8b10 <FatFile::close()>
    return m_vwd.openRoot(this);
    a96e:	mov	r1, r4
    a970:	mov	r0, r6
    a972:	bl	8e58 <FatFile::openRoot(FatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    a976:	cmp	r0, #0
    a978:	bne.n	a95c <FsVolume::begin(BlockDeviceInterface*)+0xa0>
    a97a:	b.n	a93a <FsVolume::begin(BlockDeviceInterface*)+0x7e>
    a97c:	.word	0x1fff1f38

0000a980 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    a980:	push	{r3, r4, r5, r6, r7, lr}
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    a982:	movs	r5, #0
    a984:	mov.w	r7, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    a988:	ldr	r6, [pc, #24]	; (a9a4 <FsVolume::open(char const*, int)+0x24>)
    a98a:	str	r7, [r0, #8]
    a98c:	mov	r4, r0
    a98e:	strb	r5, [r0, #4]
    a990:	strb	r5, [r0, #12]
 * \class FsBaseFile
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}
    a992:	str	r5, [r0, #72]	; 0x48
    a994:	str	r5, [r0, #76]	; 0x4c
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    a996:	str.w	r6, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    a99a:	bl	a7dc <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    a99e:	mov	r0, r4
    a9a0:	pop	{r3, r4, r5, r6, r7, pc}
    a9a2:	nop
    a9a4:	.word	0x00012e54

0000a9a8 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    a9a8:	mov	r0, r1
    a9aa:	bx	lr

0000a9ac <SdSpiCard::errorCode() const>:
  /**
   * \return code for the last error. See SdCardInfo.h for a list of error codes.
   */
  uint8_t errorCode() const {
    return m_errorCode;
  }
    a9ac:	ldrb	r0, [r0, #19]
    a9ae:	bx	lr

0000a9b0 <SdSpiCard::errorData() const>:
  /** \return error data for last error. */
  uint32_t errorData() const {
    return m_status;
  }
    a9b0:	ldrb	r0, [r0, #21]
    a9b2:	bx	lr

0000a9b4 <SdSpiCard::readSector(unsigned long, unsigned char*)>:
   *
   * \param[in] sector Logical sector to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
    a9b4:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    a9b6:	ldr	r4, [r0, #0]
    a9b8:	ldr	r4, [r4, #12]
    a9ba:	movs	r3, #1
    a9bc:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return readSingle(sector, dst);
#endif  // ENABLE_DEDICATED_SPI
  }
    a9be:	ldr.w	r4, [sp], #4
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    a9c2:	bx	ip

0000a9c4 <SdSpiCard::type() const>:
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
  }
    a9c4:	ldrb	r0, [r0, #22]
    a9c6:	bx	lr

0000a9c8 <SdSpiCard::writeSector(unsigned long, unsigned char const*)>:
   *
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    a9c8:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    a9ca:	ldr	r4, [r0, #0]
    a9cc:	ldr	r4, [r4, #28]
    a9ce:	movs	r3, #1
    a9d0:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return writeSingle(sector, src);
#endif  // ENABLE_DEDICATED_SPI
  }
    a9d2:	ldr.w	r4, [sp], #4
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    a9d6:	bx	ip

0000a9d8 <SdSpiCard::~SdSpiCard()>:
/**
 * \class SdSpiCard
 * \brief Raw access to SD and SDHC flash memory cards via SPI protocol.
 */
#if HAS_SDIO_CLASS
class SdSpiCard : public SdCardInterface {
    a9d8:	bx	lr
    a9da:	nop

0000a9dc <SdSpiCard::~SdSpiCard()>:
    a9dc:	push	{r4, lr}
    a9de:	movs	r1, #24
    a9e0:	mov	r4, r0
    a9e2:	bl	ddec <operator delete(void*, unsigned int)>
    a9e6:	mov	r0, r4
    a9e8:	pop	{r4, pc}
    a9ea:	nop

0000a9ec <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    a9ec:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a9f0:	mov	r6, r1
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    a9f2:	ldrb	r1, [r0, #16]
    a9f4:	cmp	r1, #2
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    a9f6:	mov	r4, r0
    a9f8:	mov	r5, r2
    a9fa:	mov	r7, r3
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    a9fc:	beq.n	aa0e <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x22>
    if (!syncDevice()) {
    a9fe:	ldr	r3, [r4, #0]
    aa00:	mov	r0, r4
    aa02:	ldr	r3, [r3, #20]
    aa04:	blx	r3
    aa06:	cbnz	r0, aa40 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x54>
      return false;
    aa08:	movs	r0, #0
    aa0a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    aa0e:	ldr	r3, [r0, #12]
    aa10:	cmp	r3, r6
    aa12:	bne.n	a9fe <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    aa14:	movs	r6, #0
    aa16:	cbz	r7, aa30 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeData(src)) {
    aa18:	ldr	r3, [r4, #0]
    aa1a:	mov	r1, r5
    aa1c:	ldr	r3, [r3, #68]	; 0x44
    aa1e:	mov	r0, r4
    aa20:	blx	r3
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    aa22:	adds	r6, #1
    aa24:	add.w	r5, r5, #512	; 0x200
    if (!writeData(src)) {
    aa28:	cmp	r0, #0
    aa2a:	beq.n	aa08 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    aa2c:	cmp	r7, r6
    aa2e:	bne.n	aa18 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2c>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    aa30:	ldr	r3, [r4, #12]
  return m_sharedSpi ? syncDevice() : true;
    aa32:	ldrb	r2, [r4, #17]
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    aa34:	add	r7, r3
    aa36:	str	r7, [r4, #12]
  return m_sharedSpi ? syncDevice() : true;
    aa38:	cbnz	r2, aa56 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x6a>
    aa3a:	movs	r0, #1
    aa3c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!syncDevice()) {
      return false;
    }
    if (!writeStart(sector)) {
    aa40:	ldr	r3, [r4, #0]
    aa42:	mov	r1, r6
    aa44:	ldr	r3, [r3, #72]	; 0x48
    aa46:	mov	r0, r4
    aa48:	blx	r3
    aa4a:	cmp	r0, #0
    aa4c:	beq.n	aa08 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    aa4e:	movs	r3, #2
      return false;
    }
    if (!writeStart(sector)) {
      return false;
    }
    m_curSector = sector;
    aa50:	str	r6, [r4, #12]
    m_curState = WRITE_STATE;
    aa52:	strb	r3, [r4, #16]
    aa54:	b.n	aa14 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x28>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    aa56:	ldr	r3, [r4, #0]
    aa58:	mov	r0, r4
    aa5a:	ldr	r3, [r3, #20]

 fail:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
    aa5c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    aa60:	bx	r3
    aa62:	nop

0000aa64 <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
    aa64:	push	{r4, lr}
    aa66:	mov	r4, r0
  bool waitNotBusy(SdMillis_t timeoutMS);
  bool writeData(uint8_t token, const uint8_t* src);

#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
    aa68:	adds	r0, #4
    aa6a:	bl	c014 <SdSpiArduinoDriver::activate()>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    aa6e:	ldrb	r0, [r4, #18]
    aa70:	movs	r1, #0
    aa72:	bl	c194 <sdCsWrite(unsigned char, bool)>
  if (!m_spiActive) {
    spiActivate();
    spiSelect();
    m_spiActive = true;
    aa76:	movs	r3, #1
    aa78:	strb	r3, [r4, #20]
    aa7a:	pop	{r4, pc}

0000aa7c <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>:
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
    aa7c:	push	{r3, r4, r5, lr}
    aa7e:	mov	r4, r0
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    aa80:	movs	r1, #1
    aa82:	ldrb	r0, [r0, #18]
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    aa84:	adds	r5, r4, #4
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    aa86:	bl	c194 <sdCsWrite(unsigned char, bool)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    aa8a:	mov	r0, r5
    aa8c:	movs	r1, #255	; 0xff
    aa8e:	bl	c128 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
    aa92:	mov	r0, r5
    aa94:	bl	c0a4 <SdSpiArduinoDriver::deactivate()>
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    aa98:	movs	r3, #0
    aa9a:	strb	r3, [r4, #20]
    aa9c:	pop	{r3, r4, r5, pc}
    aa9e:	nop

0000aaa0 <SdSpiCard::isBusy()>:
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    aaa0:	push	{r3, r4, r5, r6, r7, lr}
  bool rtn = true;
  bool spiActive = m_spiActive;
    aaa2:	ldrb	r7, [r0, #20]
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    aaa4:	mov	r6, r0
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    aaa6:	cbnz	r7, aaac <SdSpiCard::isBusy()+0xc>
    aaa8:	bl	aa64 <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>
    aaac:	adds	r5, r6, #4
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    aaae:	movs	r4, #8
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    aab0:	mov	r0, r5
    aab2:	bl	c0ec <SdSpiArduinoDriver::receive()>
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
    aab6:	cmp	r0, #255	; 0xff
    aab8:	add.w	r3, r4, #4294967295
    aabc:	beq.n	aada <SdSpiCard::isBusy()+0x3a>
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    aabe:	ands.w	r4, r3, #255	; 0xff
    aac2:	bne.n	aab0 <SdSpiCard::isBusy()+0x10>
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
  bool rtn = true;
    aac4:	movs	r4, #1
    if (0XFF == spiReceive()) {
      rtn = false;
      break;
    }
  }
  if (!spiActive) {
    aac6:	cbnz	r7, aacc <SdSpiCard::isBusy()+0x2c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    aac8:	ldrb	r3, [r6, #20]
    aaca:	cbnz	r3, aad0 <SdSpiCard::isBusy()+0x30>
  }
  if (!spiActive) {
    spiStop();
  }
  return rtn;
}
    aacc:	mov	r0, r4
    aace:	pop	{r3, r4, r5, r6, r7, pc}
    aad0:	mov	r0, r6
    aad2:	bl	aa7c <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    aad6:	mov	r0, r4
    aad8:	pop	{r3, r4, r5, r6, r7, pc}
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
      rtn = false;
    aada:	movs	r4, #0
    aadc:	b.n	aac6 <SdSpiCard::isBusy()+0x26>
    aade:	nop

0000aae0 <SdSpiCard::readData(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
    aae0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    aae4:	ldr	r6, [pc, #116]	; (ab5c <SdSpiCard::readData(unsigned char*, unsigned int)+0x7c>)
    aae6:	sub	sp, #12
    aae8:	ldr	r3, [r6, #0]
    aaea:	str	r3, [sp, #0]
	return ret;
    aaec:	ldr	r5, [sp, #0]
    aaee:	mov	r4, r0
    aaf0:	mov	r8, r1
    aaf2:	mov	r9, r2

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    aaf4:	uxth	r5, r5
    aaf6:	adds	r7, r0, #4
    aaf8:	b.n	ab0a <SdSpiCard::readData(unsigned char*, unsigned int)+0x2a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    aafa:	ldr	r3, [r6, #0]
    aafc:	str	r3, [sp, #4]
	return ret;
    aafe:	ldr	r3, [sp, #4]
    ab00:	uxth	r3, r3
    ab02:	subs	r3, r3, r5
    ab04:	cmp.w	r3, #300	; 0x12c
    ab08:	bgt.n	ab30 <SdSpiCard::readData(unsigned char*, unsigned int)+0x50>
    ab0a:	mov	r0, r7
    ab0c:	bl	c0ec <SdSpiArduinoDriver::receive()>
#endif  // USE_SD_CRC

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    ab10:	cmp	r0, #255	; 0xff
    ab12:	strb	r0, [r4, #21]
    ab14:	beq.n	aafa <SdSpiCard::readData(unsigned char*, unsigned int)+0x1a>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_SECTOR) {
    ab16:	cmp	r0, #254	; 0xfe
    ab18:	beq.n	ab36 <SdSpiCard::readData(unsigned char*, unsigned int)+0x56>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    ab1a:	movs	r3, #24
    ab1c:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    ab1e:	ldrb	r0, [r4, #20]
    ab20:	cbz	r0, ab2a <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    ab22:	mov	r0, r4
    ab24:	bl	aa7c <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
  return false;
    ab28:	movs	r0, #0
}
    ab2a:	add	sp, #12
    ab2c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ab30:	movs	r3, #29
    ab32:	strb	r3, [r4, #19]
    ab34:	b.n	ab1e <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
    ab36:	mov	r2, r9
    ab38:	mov	r1, r8
    ab3a:	mov	r0, r7
    ab3c:	bl	c108 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    ab40:	strb	r0, [r4, #21]
    ab42:	cbz	r0, ab4a <SdSpiCard::readData(unsigned char*, unsigned int)+0x6a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    ab44:	movs	r3, #36	; 0x24
    ab46:	strb	r3, [r4, #19]
    ab48:	b.n	ab1e <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    ab4a:	mov	r0, r7
    ab4c:	bl	c0ec <SdSpiArduinoDriver::receive()>
    ab50:	mov	r0, r7
    ab52:	bl	c0ec <SdSpiArduinoDriver::receive()>
#else  // USE_SD_CRC
  // discard crc
  spiReceive();
  spiReceive();
#endif  // USE_SD_CRC
  return true;
    ab56:	movs	r0, #1
    ab58:	b.n	ab2a <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    ab5a:	nop
    ab5c:	.word	0x1fff1f98

0000ab60 <SdSpiCard::waitNotBusy(unsigned short)>:
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(SdMillis_t timeoutMS) {
    ab60:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    ab62:	ldr	r5, [pc, #52]	; (ab98 <SdSpiCard::waitNotBusy(unsigned short)+0x38>)
    ab64:	sub	sp, #12
    ab66:	ldr	r3, [r5, #0]
    ab68:	str	r3, [sp, #0]
	return ret;
    ab6a:	ldr	r4, [sp, #0]
    ab6c:	mov	r7, r1
    ab6e:	adds	r6, r0, #4
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    ab70:	uxth	r4, r4
    ab72:	b.n	ab82 <SdSpiCard::waitNotBusy(unsigned short)+0x22>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    ab74:	ldr	r3, [r5, #0]
    ab76:	str	r3, [sp, #4]
	return ret;
    ab78:	ldr	r3, [sp, #4]
    ab7a:	uxth	r3, r3
    ab7c:	subs	r3, r3, r4
    ab7e:	cmp	r3, r7
    ab80:	bgt.n	ab92 <SdSpiCard::waitNotBusy(unsigned short)+0x32>
    ab82:	mov	r0, r6
    ab84:	bl	c0ec <SdSpiArduinoDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    ab88:	cmp	r0, #255	; 0xff
    ab8a:	bne.n	ab74 <SdSpiCard::waitNotBusy(unsigned short)+0x14>
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    }
  }
  return true;
    ab8c:	movs	r0, #1
#endif  // WDT_YIELD_TIME_MILLIS
}
    ab8e:	add	sp, #12
    ab90:	pop	{r4, r5, r6, r7, pc}
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    ab92:	movs	r0, #0
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
    ab94:	add	sp, #12
    ab96:	pop	{r4, r5, r6, r7, pc}
    ab98:	.word	0x1fff1f98

0000ab9c <SdSpiCard::cardCommand(unsigned char, unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    ab9c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // select card
  if (!m_spiActive) {
    aba0:	ldrb	r3, [r0, #20]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    aba2:	sub	sp, #8
    aba4:	mov	r6, r0
    aba6:	mov	r8, r1
    aba8:	str	r2, [sp, #4]
  // select card
  if (!m_spiActive) {
    abaa:	cbnz	r3, abb0 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x14>
    abac:	bl	aa64 <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    abb0:	cmp.w	r8, #0
    abb4:	bne.n	ac0c <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x70>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    abb6:	adds	r4, r6, #4
    abb8:	mov	r0, r4
    abba:	orr.w	r1, r8, #64	; 0x40
    abbe:	bl	c128 <SdSpiArduinoDriver::send(unsigned char)>
    abc2:	add	r7, sp, #4
    abc4:	add	r5, sp, #8
    abc6:	ldrb.w	r1, [r5, #-1]!
    abca:	mov	r0, r4
    abcc:	bl	c128 <SdSpiArduinoDriver::send(unsigned char)>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    abd0:	cmp	r5, r7
    abd2:	bne.n	abc6 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x2a>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    abd4:	cmp.w	r8, #0
    abd8:	ite	eq
    abda:	moveq	r1, #149	; 0x95
    abdc:	movne	r1, #135	; 0x87
    abde:	mov	r0, r4
    abe0:	bl	c128 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    abe4:	mov	r0, r4
    abe6:	bl	c0ec <SdSpiArduinoDriver::receive()>
    abea:	movs	r5, #11
    abec:	mov	r0, r4
    abee:	bl	c0ec <SdSpiArduinoDriver::receive()>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    abf2:	lsls	r3, r0, #24
    abf4:	strb	r0, [r6, #21]
    abf6:	bmi.n	abfe <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x62>
  }
  return m_status;
}
    abf8:	add	sp, #8
    abfa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    abfe:	subs	r3, r5, #1

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    ac00:	ands.w	r5, r3, #255	; 0xff
    ac04:	bne.n	abec <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
  }
  return m_status;
}
    ac06:	add	sp, #8
    ac08:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
    ac0c:	mov.w	r1, #300	; 0x12c
    ac10:	mov	r0, r6
    ac12:	bl	ab60 <SdSpiCard::waitNotBusy(unsigned short)>
    ac16:	b.n	abb6 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x1a>

0000ac18 <SdSpiCard::readOCR(unsigned long*)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    ac18:	push	{r3, r4, r5, r6, r7, lr}
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    ac1a:	ldr	r3, [r0, #0]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    ac1c:	mov	r5, r0
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    ac1e:	ldr	r3, [r3, #20]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    ac20:	mov	r6, r1
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    ac22:	blx	r3
  if (cardCommand(CMD58, 0)) {
    ac24:	mov	r0, r5
    ac26:	movs	r2, #0
    ac28:	movs	r1, #58	; 0x3a
    ac2a:	bl	ab9c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    ac2e:	cbnz	r0, ac4c <SdSpiCard::readOCR(unsigned long*)+0x34>
    ac30:	adds	r7, r5, #4
    ac32:	adds	r4, r6, #4
    ac34:	mov	r0, r7
    ac36:	bl	c0ec <SdSpiArduinoDriver::receive()>
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    p[3 - i] = spiReceive();
    ac3a:	strb.w	r0, [r4, #-1]!
  syncDevice();
  if (cardCommand(CMD58, 0)) {
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    ac3e:	cmp	r6, r4
    ac40:	bne.n	ac34 <SdSpiCard::readOCR(unsigned long*)+0x1c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    ac42:	ldrb	r4, [r5, #20]
    ac44:	cbnz	r4, ac62 <SdSpiCard::readOCR(unsigned long*)+0x4a>
    ac46:	movs	r4, #1
  return true;

fail:
  spiStop();
  return false;
}
    ac48:	mov	r0, r4
    ac4a:	pop	{r3, r4, r5, r6, r7, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    ac4c:	ldrb	r4, [r5, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    ac4e:	movs	r3, #18
    ac50:	strb	r3, [r5, #19]
    ac52:	cmp	r4, #0
    ac54:	beq.n	ac48 <SdSpiCard::readOCR(unsigned long*)+0x30>
    ac56:	mov	r0, r5
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    ac58:	movs	r4, #0
    ac5a:	bl	aa7c <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
}
    ac5e:	mov	r0, r4
    ac60:	pop	{r3, r4, r5, r6, r7, pc}
    ac62:	mov	r0, r5
    ac64:	bl	aa7c <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    ac68:	mov	r0, r4
    ac6a:	pop	{r3, r4, r5, r6, r7, pc}

0000ac6c <SdSpiCard::readRegister(unsigned char, void*)>:
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    ac6c:	ldr	r3, [r0, #0]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    ac6e:	push	{r4, r5, r6, lr}
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    ac70:	ldr	r3, [r3, #20]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    ac72:	mov	r4, r0
    ac74:	mov	r5, r1
    ac76:	mov	r6, r2
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    ac78:	blx	r3
  if (cardCommand(cmd, 0)) {
    ac7a:	mov	r1, r5
    ac7c:	mov	r0, r4
    ac7e:	movs	r2, #0
    ac80:	bl	ab9c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    ac84:	cbz	r0, ac98 <SdSpiCard::readRegister(unsigned char, void*)+0x2c>
    ac86:	movs	r3, #27
    ac88:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    ac8a:	ldrb	r0, [r4, #20]
    ac8c:	cbz	r0, ac96 <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    ac8e:	mov	r0, r4
    ac90:	bl	aa7c <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    ac94:	movs	r0, #0
}
    ac96:	pop	{r4, r5, r6, pc}
  syncDevice();
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    ac98:	mov	r1, r6
    ac9a:	movs	r2, #16
    ac9c:	mov	r0, r4
    ac9e:	bl	aae0 <SdSpiCard::readData(unsigned char*, unsigned int)>
    aca2:	cmp	r0, #0
    aca4:	beq.n	ac8a <SdSpiCard::readRegister(unsigned char, void*)+0x1e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    aca6:	ldrb	r5, [r4, #20]
    aca8:	cmp	r5, #0
    acaa:	beq.n	ac96 <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    acac:	mov	r0, r4
    acae:	bl	aa7c <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    acb2:	mov	r0, r5
    acb4:	pop	{r4, r5, r6, pc}
    acb6:	nop

0000acb8 <SdSpiCard::readCSD(csd_t*)>:
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    acb8:	mov	r2, r1
    acba:	movs	r1, #9
    acbc:	b.w	ac6c <SdSpiCard::readRegister(unsigned char, void*)>

0000acc0 <SdSpiCard::readCID(CID*)>:
   * \param[out] cid pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) {
    return readRegister(CMD10, cid);
    acc0:	mov	r2, r1
    acc2:	movs	r1, #10
    acc4:	b.w	ac6c <SdSpiCard::readRegister(unsigned char, void*)>

0000acc8 <SdSpiCard::sectorCount()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    acc8:	push	{r4, r5, lr}
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    acca:	ldr	r3, [r0, #0]
    accc:	ldr	r2, [pc, #140]	; (ad5c <SdSpiCard::sectorCount()+0x94>)
    acce:	ldr	r3, [r3, #52]	; 0x34
    acd0:	cmp	r3, r2
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    acd2:	sub	sp, #20
    acd4:	bne.n	ad36 <SdSpiCard::sectorCount()+0x6e>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    acd6:	mov	r2, sp
    acd8:	movs	r1, #9
    acda:	bl	ac6c <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    acde:	cbz	r0, acf0 <SdSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    ace0:	ldrb.w	r3, [sp]
    ace4:	ands.w	r3, r3, #192	; 0xc0
    ace8:	beq.n	acf4 <SdSpiCard::sectorCount()+0x2c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    acea:	cmp	r3, #64	; 0x40
    acec:	beq.n	ad3c <SdSpiCard::sectorCount()+0x74>
    acee:	movs	r0, #0
}
    acf0:	add	sp, #20
    acf2:	pop	{r4, r5, pc}
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    acf4:	ldrb.w	r4, [sp, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    acf8:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    acfc:	ldrb.w	r2, [sp, #7]
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    ad00:	ldrb.w	r0, [sp, #10]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    ad04:	ldrb.w	r1, [sp, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    ad08:	ldrb.w	r5, [sp, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    ad0c:	and.w	r4, r4, #3
    ad10:	lsls	r4, r4, #1
    ad12:	lsls	r2, r2, #2
    ad14:	and.w	r3, r3, #3
    ad18:	orr.w	r0, r4, r0, lsr #7
    ad1c:	and.w	r1, r1, #15
    ad20:	orr.w	r3, r2, r3, lsl #10
    ad24:	add	r0, r1
    ad26:	orr.w	r3, r3, r5, lsr #6
    ad2a:	adds	r3, #1
    ad2c:	subs	r0, #7
    ad2e:	lsl.w	r0, r3, r0
    ad32:	add	sp, #20
    ad34:	pop	{r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    ad36:	mov	r1, sp
    ad38:	blx	r3
    ad3a:	b.n	acde <SdSpiCard::sectorCount()+0x16>
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    ad3c:	ldrb.w	r3, [sp, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    ad40:	ldrb.w	r1, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    ad44:	ldrb.w	r0, [sp, #8]
    ad48:	adds	r2, r3, #1
    ad4a:	and.w	r3, r1, #63	; 0x3f
    ad4e:	add.w	r3, r2, r3, lsl #16
    ad52:	add.w	r0, r3, r0, lsl #8
    ad56:	lsls	r0, r0, #10
}
    ad58:	add	sp, #20
    ad5a:	pop	{r4, r5, pc}
    ad5c:	.word	0x0000acb9

0000ad60 <SdSpiCard::readStart(unsigned long)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    ad60:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    ad62:	ldr	r3, [r0, #0]
    ad64:	ldr	r5, [pc, #68]	; (adac <SdSpiCard::readStart(unsigned long)+0x4c>)
    ad66:	ldr	r3, [r3, #64]	; 0x40
    ad68:	cmp	r3, r5
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    ad6a:	sub	sp, #12
    ad6c:	mov	r4, r0
    ad6e:	mov	r2, r1
    ad70:	bne.n	ada2 <SdSpiCard::readStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    ad72:	ldrb	r0, [r0, #22]
  if (type() != SD_CARD_TYPE_SDHC) {
    ad74:	cmp	r0, #3
    sector <<= 9;
    ad76:	it	ne
    ad78:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD18, sector)) {
    ad7a:	movs	r1, #18
    ad7c:	mov	r0, r4
    ad7e:	bl	ab9c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    ad82:	cbz	r0, ad9c <SdSpiCard::readStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    ad84:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    ad86:	movs	r3, #12
    ad88:	strb	r3, [r4, #19]
    ad8a:	cbnz	r0, ad90 <SdSpiCard::readStart(unsigned long)+0x30>
  return true;

fail:
  spiStop();
  return false;
}
    ad8c:	add	sp, #12
    ad8e:	pop	{r4, r5, pc}
    ad90:	mov	r0, r4
    ad92:	bl	aa7c <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    ad96:	movs	r0, #0
    ad98:	add	sp, #12
    ad9a:	pop	{r4, r5, pc}
  if (cardCommand(CMD18, sector)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
    ad9c:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    ad9e:	add	sp, #12
    ada0:	pop	{r4, r5, pc}
    ada2:	str	r1, [sp, #4]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    ada4:	blx	r3
    ada6:	ldr	r2, [sp, #4]
    ada8:	b.n	ad74 <SdSpiCard::readStart(unsigned long)+0x14>
    adaa:	nop
    adac:	.word	0x0000a9c5

0000adb0 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    adb0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    adb4:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    adb6:	ldrb	r1, [r0, #16]
    adb8:	cmp	r1, #1
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    adba:	mov	r6, r0
    adbc:	mov	r4, r2
    adbe:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    adc0:	beq.n	add2 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!syncDevice()) {
    adc2:	ldr	r3, [r6, #0]
    adc4:	mov	r0, r6
    adc6:	ldr	r3, [r3, #20]
    adc8:	blx	r3
    adca:	cbnz	r0, ae06 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x56>
      return false;
    adcc:	movs	r0, #0
    adce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    add2:	ldr	r3, [r0, #12]
    add4:	cmp	r3, r5
    add6:	bne.n	adc2 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    add8:	movs	r5, #0
    adda:	cbz	r7, adf6 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    if (!readData(dst, 512)) {
    addc:	mov	r1, r4
    adde:	mov.w	r2, #512	; 0x200
    ade2:	mov	r0, r6
    ade4:	bl	aae0 <SdSpiCard::readData(unsigned char*, unsigned int)>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    ade8:	adds	r5, #1
    adea:	add.w	r4, r4, #512	; 0x200
    if (!readData(dst, 512)) {
    adee:	cmp	r0, #0
    adf0:	beq.n	adcc <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    adf2:	cmp	r7, r5
    adf4:	bne.n	addc <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    adf6:	ldr	r3, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    adf8:	ldrb	r2, [r6, #17]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    adfa:	add	r7, r3
    adfc:	str	r7, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    adfe:	cbnz	r2, ae1a <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x6a>
    ae00:	movs	r0, #1
    ae02:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    if (!syncDevice()) {
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
    ae06:	mov	r1, r5
    ae08:	mov	r0, r6
    ae0a:	bl	ad60 <SdSpiCard::readStart(unsigned long)>
    ae0e:	cmp	r0, #0
    ae10:	beq.n	adcc <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    ae12:	movs	r3, #1
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    }
    m_curSector = sector;
    ae14:	str	r5, [r6, #12]
    m_curState = READ_STATE;
    ae16:	strb	r3, [r6, #16]
    ae18:	b.n	add8 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    ae1a:	ldr	r3, [r6, #0]
    ae1c:	mov	r0, r6
    ae1e:	ldr	r3, [r3, #20]
      return false;
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
    ae20:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    ae24:	bx	r3
    ae26:	nop

0000ae28 <SdSpiCard::readStop()>:
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    ae28:	push	{r3, r4, r5, lr}
  if (cardCommand(CMD12, 0)) {
    ae2a:	movs	r2, #0
    ae2c:	movs	r1, #12
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    ae2e:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    ae30:	bl	ab9c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    ae34:	ldrb	r4, [r5, #20]
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    ae36:	cbz	r0, ae42 <SdSpiCard::readStop()+0x1a>
    ae38:	movs	r3, #9
    ae3a:	strb	r3, [r5, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    ae3c:	cbnz	r4, ae54 <SdSpiCard::readStop()+0x2c>
  return true;

fail:
  spiStop();
  return false;
}
    ae3e:	mov	r0, r4
    ae40:	pop	{r3, r4, r5, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    ae42:	cbnz	r4, ae4a <SdSpiCard::readStop()+0x22>
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
  return true;
    ae44:	movs	r4, #1

fail:
  spiStop();
  return false;
}
    ae46:	mov	r0, r4
    ae48:	pop	{r3, r4, r5, pc}
    ae4a:	mov	r0, r5
    ae4c:	bl	aa7c <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    ae50:	mov	r0, r4
    ae52:	pop	{r3, r4, r5, pc}
    ae54:	mov	r0, r5
    ae56:	movs	r4, #0
    ae58:	bl	aa7c <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    ae5c:	mov	r0, r4
    ae5e:	pop	{r3, r4, r5, pc}

0000ae60 <SdSpiCard::writeStart(unsigned long)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    ae60:	push	{r4, r5, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    ae62:	ldr	r3, [r0, #0]
    ae64:	ldr	r5, [pc, #68]	; (aeac <SdSpiCard::writeStart(unsigned long)+0x4c>)
    ae66:	ldr	r3, [r3, #64]	; 0x40
    ae68:	cmp	r3, r5
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    ae6a:	sub	sp, #12
    ae6c:	mov	r4, r0
    ae6e:	mov	r2, r1
    ae70:	bne.n	aea2 <SdSpiCard::writeStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    ae72:	ldrb	r0, [r0, #22]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    ae74:	cmp	r0, #3
    sector <<= 9;
    ae76:	it	ne
    ae78:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD25, sector)) {
    ae7a:	movs	r1, #25
    ae7c:	mov	r0, r4
    ae7e:	bl	ab9c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    ae82:	cbz	r0, ae9c <SdSpiCard::writeStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    ae84:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    ae86:	movs	r3, #14
    ae88:	strb	r3, [r4, #19]
    ae8a:	cbnz	r0, ae90 <SdSpiCard::writeStart(unsigned long)+0x30>
  return true;

fail:
  spiStop();
  return false;
}
    ae8c:	add	sp, #12
    ae8e:	pop	{r4, r5, pc}
    ae90:	mov	r0, r4
    ae92:	bl	aa7c <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    ae96:	movs	r0, #0
    ae98:	add	sp, #12
    ae9a:	pop	{r4, r5, pc}
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
    ae9c:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    ae9e:	add	sp, #12
    aea0:	pop	{r4, r5, pc}
    aea2:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    aea4:	blx	r3
    aea6:	ldr	r2, [sp, #4]
    aea8:	b.n	ae74 <SdSpiCard::writeStart(unsigned long)+0x14>
    aeaa:	nop
    aeac:	.word	0x0000a9c5

0000aeb0 <SdSpiCard::erase(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    aeb0:	push	{r4, r5, r6, r7, lr}
  csd_t csd;
  if (!readCSD(&csd)) {
    aeb2:	ldr	r3, [r0, #0]
    aeb4:	ldr	r7, [pc, #172]	; (af64 <SdSpiCard::erase(unsigned long, unsigned long)+0xb4>)
    aeb6:	ldr	r3, [r3, #52]	; 0x34
    aeb8:	cmp	r3, r7
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    aeba:	sub	sp, #20
    aebc:	mov	r4, r0
    aebe:	mov	r5, r1
    aec0:	mov	r6, r2
    aec2:	bne.n	af20 <SdSpiCard::erase(unsigned long, unsigned long)+0x70>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    aec4:	mov	r2, sp
    aec6:	movs	r1, #9
    aec8:	bl	ac6c <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  if (!readCSD(&csd)) {
    aecc:	cbz	r0, aef4 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    aece:	ldrb.w	r3, [sp, #10]
    aed2:	lsls	r2, r3, #25
    aed4:	bpl.n	af04 <SdSpiCard::erase(unsigned long, unsigned long)+0x54>
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    aed6:	ldrb	r3, [r4, #22]
    aed8:	cmp	r3, #3
    firstSector <<= 9;
    aeda:	it	ne
    aedc:	lslne	r5, r5, #9
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
    aede:	mov	r2, r5
    aee0:	mov.w	r1, #32
    aee4:	mov	r0, r4
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
    aee6:	it	ne
    aee8:	lslne	r6, r6, #9
  }
  if (cardCommand(CMD32, firstSector)
    aeea:	bl	ab9c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD33, lastSector)
      || cardCommand(CMD38, 0)) {
    aeee:	cbz	r0, af26 <SdSpiCard::erase(unsigned long, unsigned long)+0x76>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    aef0:	movs	r3, #37	; 0x25
    aef2:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    aef4:	ldrb	r0, [r4, #20]
    aef6:	cbz	r0, af00 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    aef8:	mov	r0, r4
    aefa:	bl	aa7c <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    aefe:	movs	r0, #0
}
    af00:	add	sp, #20
    af02:	pop	{r4, r5, r6, r7, pc}
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    af04:	and.w	r3, r3, #63	; 0x3f
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    af08:	ldrb.w	r1, [sp, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    af0c:	lsls	r3, r3, #1
    af0e:	adds	r2, r6, #1
    af10:	orr.w	r3, r3, r1, lsr #7
    af14:	orrs	r2, r5
    af16:	tst	r3, r2
    af18:	beq.n	aed6 <SdSpiCard::erase(unsigned long, unsigned long)+0x26>
    af1a:	movs	r3, #38	; 0x26
    af1c:	strb	r3, [r4, #19]
    af1e:	b.n	aef4 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    af20:	mov	r1, sp
    af22:	blx	r3
    af24:	b.n	aecc <SdSpiCard::erase(unsigned long, unsigned long)+0x1c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
      || cardCommand(CMD33, lastSector)
    af26:	mov	r2, r6
    af28:	movs	r1, #33	; 0x21
    af2a:	mov	r0, r4
    af2c:	bl	ab9c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    af30:	cmp	r0, #0
    af32:	bne.n	aef0 <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
      || cardCommand(CMD38, 0)) {
    af34:	mov	r2, r0
    af36:	movs	r1, #38	; 0x26
    af38:	mov	r0, r4
    af3a:	bl	ab9c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    af3e:	cmp	r0, #0
    af40:	bne.n	aef0 <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
    error(SD_CARD_ERROR_ERASE);
    goto fail;
  }
  DBG_BEGIN_TIME(DBG_ERASE_BUSY);
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    af42:	movw	r1, #10000	; 0x2710
    af46:	mov	r0, r4
    af48:	bl	ab60 <SdSpiCard::waitNotBusy(unsigned short)>
    af4c:	cbnz	r0, af54 <SdSpiCard::erase(unsigned long, unsigned long)+0xa4>
    af4e:	movs	r3, #39	; 0x27
    af50:	strb	r3, [r4, #19]
    af52:	b.n	aef4 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    af54:	ldrb	r5, [r4, #20]
    af56:	cmp	r5, #0
    af58:	beq.n	af00 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    af5a:	mov	r0, r4
    af5c:	bl	aa7c <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_ERASE_BUSY);
  spiStop();
  return true;
    af60:	mov	r0, r5
    af62:	b.n	af00 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    af64:	.word	0x0000acb9

0000af68 <SdSpiCard::writeStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    af68:	push	{r4, r5, r6, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    af6a:	mov.w	r1, #600	; 0x258
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    af6e:	mov	r5, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    af70:	bl	ab60 <SdSpiCard::waitNotBusy(unsigned short)>
    af74:	mov	r6, r0
    af76:	cbnz	r0, af90 <SdSpiCard::writeStop()+0x28>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    af78:	ldrb	r4, [r5, #20]
    af7a:	movs	r3, #30
    af7c:	strb	r3, [r5, #19]
    af7e:	cbnz	r4, af84 <SdSpiCard::writeStop()+0x1c>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    af80:	mov	r0, r4
    af82:	pop	{r4, r5, r6, pc}
    af84:	mov	r0, r5
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
    af86:	mov	r4, r6
    af88:	bl	aa7c <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
}
    af8c:	mov	r0, r4
    af8e:	pop	{r4, r5, r6, pc}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    af90:	movs	r1, #253	; 0xfd
    af92:	adds	r0, r5, #4
    af94:	bl	c128 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    af98:	ldrb	r4, [r5, #20]
    af9a:	cbnz	r4, afa2 <SdSpiCard::writeStop()+0x3a>
    af9c:	mov	r4, r6

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    af9e:	mov	r0, r4
    afa0:	pop	{r4, r5, r6, pc}
    afa2:	mov	r0, r5
    afa4:	bl	aa7c <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    afa8:	b.n	af80 <SdSpiCard::writeStop()+0x18>
    afaa:	nop

0000afac <SdSpiCard::syncDevice()>:
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    afac:	push	{r4, lr}
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    afae:	ldrb	r3, [r0, #16]
    afb0:	cmp	r3, #1
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    afb2:	mov	r4, r0
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    afb4:	beq.n	afc2 <SdSpiCard::syncDevice()+0x16>
    if (!SdSpiCard::readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    afb6:	cmp	r3, #2
    afb8:	beq.n	afce <SdSpiCard::syncDevice()+0x22>
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    afba:	movs	r3, #0
    afbc:	strb	r3, [r4, #16]
#endif  // ENABLE_DEDICATED_SPI
  return true;
    afbe:	movs	r0, #1
    afc0:	pop	{r4, pc}
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    if (!SdSpiCard::readStop()) {
    afc2:	bl	ae28 <SdSpiCard::readStop()>
    afc6:	cmp	r0, #0
    afc8:	bne.n	afba <SdSpiCard::syncDevice()+0xe>
      return false;
    afca:	movs	r0, #0
    afcc:	pop	{r4, pc}
    }
  } else if (m_curState == WRITE_STATE) {
    if (!SdSpiCard::writeStop()) {
    afce:	bl	af68 <SdSpiCard::writeStop()>
    afd2:	cmp	r0, #0
    afd4:	bne.n	afba <SdSpiCard::syncDevice()+0xe>
    afd6:	b.n	afca <SdSpiCard::syncDevice()+0x1e>

0000afd8 <SdSpiCard::writeData(unsigned char, unsigned char const*)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
    afd8:	push	{r4, r5, r6, lr}
    afda:	adds	r4, r0, #4
    afdc:	mov	r6, r2
    afde:	mov	r5, r0
    afe0:	mov	r0, r4
    afe2:	bl	c128 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver.send(buf, n);
    afe6:	mov.w	r2, #512	; 0x200
    afea:	mov	r1, r6
    afec:	mov	r0, r4
    afee:	bl	c140 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    aff2:	mov	r0, r4
    aff4:	movs	r1, #255	; 0xff
    aff6:	bl	c128 <SdSpiArduinoDriver::send(unsigned char)>
    affa:	mov	r0, r4
    affc:	movs	r1, #255	; 0xff
    affe:	bl	c128 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    b002:	mov	r0, r4
    b004:	bl	c0ec <SdSpiArduinoDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    b008:	and.w	r3, r0, #31
    b00c:	cmp	r3, #5
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    b00e:	strb	r0, [r5, #21]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    b010:	beq.n	b026 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x4e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    b012:	ldrb	r0, [r5, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    b014:	movs	r3, #31
    b016:	strb	r3, [r5, #19]
    b018:	cbnz	r0, b01c <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
  return true;

fail:
  spiStop();
  return false;
}
    b01a:	pop	{r4, r5, r6, pc}
    b01c:	mov	r0, r5
    b01e:	bl	aa7c <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  }
  return true;

fail:
  spiStop();
  return false;
    b022:	movs	r0, #0
    b024:	pop	{r4, r5, r6, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE_DATA);
    goto fail;
  }
  return true;
    b026:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    b028:	pop	{r4, r5, r6, pc}
    b02a:	nop

0000b02c <SdSpiCard::writeData(unsigned char const*)>:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    b02c:	push	{r3, r4, r5, lr}
    b02e:	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    b030:	mov.w	r1, #600	; 0x258
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    b034:	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    b036:	bl	ab60 <SdSpiCard::waitNotBusy(unsigned short)>
    b03a:	cbnz	r0, b04e <SdSpiCard::writeData(unsigned char const*)+0x22>
    b03c:	movs	r3, #35	; 0x23
    b03e:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    b040:	ldrb	r0, [r4, #20]
    b042:	cbz	r0, b04c <SdSpiCard::writeData(unsigned char const*)+0x20>
    b044:	mov	r0, r4
    b046:	bl	aa7c <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  }
  return true;

fail:
  spiStop();
  return false;
    b04a:	movs	r0, #0
}
    b04c:	pop	{r3, r4, r5, pc}
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    b04e:	mov	r2, r5
    b050:	movs	r1, #252	; 0xfc
    b052:	mov	r0, r4
    b054:	bl	afd8 <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    b058:	cmp	r0, #0
    b05a:	beq.n	b040 <SdSpiCard::writeData(unsigned char const*)+0x14>
  return true;

fail:
  spiStop();
  return false;
}
    b05c:	pop	{r3, r4, r5, pc}
    b05e:	nop

0000b060 <sdIrs()>:
#endif  // USE_DEBUG_MODE
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
    b060:	push	{r4}
  SDHC_IRQSIGEN = 0;
    b062:	ldr	r4, [pc, #28]	; (b080 <sdIrs()+0x20>)
  m_irqstat = SDHC_IRQSTAT;
    b064:	ldr	r2, [pc, #28]	; (b084 <sdIrs()+0x24>)
    b066:	ldr	r1, [pc, #32]	; (b088 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    b068:	ldr	r0, [pc, #32]	; (b08c <sdIrs()+0x2c>)
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    b06a:	movs	r3, #0
    b06c:	str	r3, [r4, #0]
  m_irqstat = SDHC_IRQSTAT;
    b06e:	ldr	r4, [r2, #0]
    b070:	str	r4, [r1, #0]
  SDHC_IRQSTAT = m_irqstat;
    b072:	ldr	r1, [r1, #0]
    b074:	str	r1, [r2, #0]
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
}
    b076:	ldr.w	r4, [sp], #4
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    b07a:	strb	r3, [r0, #0]
}
    b07c:	bx	lr
    b07e:	nop
    b080:	.word	0x400b1038
    b084:	.word	0x400b1030
    b088:	.word	0x1fff1f60
    b08c:	.word	0x1fff1f78

0000b090 <isBusyCommandComplete()>:
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    b090:	ldr	r3, [pc, #12]	; (b0a0 <isBusyCommandComplete()+0x10>)
    b092:	ldr	r0, [pc, #16]	; (b0a4 <isBusyCommandComplete()+0x14>)
    b094:	ldr	r3, [r3, #0]
    b096:	ands	r0, r3
}
    b098:	clz	r0, r0
    b09c:	lsrs	r0, r0, #5
    b09e:	bx	lr
    b0a0:	.word	0x400b1030
    b0a4:	.word	0x000f0001

0000b0a8 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    b0a8:	ldr	r3, [pc, #8]	; (b0b4 <isBusyCommandInhibit()+0xc>)
    b0aa:	ldr	r0, [r3, #0]
}
    b0ac:	and.w	r0, r0, #1
    b0b0:	bx	lr
    b0b2:	nop
    b0b4:	.word	0x400b1024

0000b0b8 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    b0b8:	ldr	r3, [pc, #4]	; (b0c0 <isBusyDMA()+0x8>)
    b0ba:	ldrb	r0, [r3, #0]
}
    b0bc:	bx	lr
    b0be:	nop
    b0c0:	.word	0x1fff1f78

0000b0c4 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    b0c4:	ldr	r3, [pc, #12]	; (b0d4 <isBusyFifoRead()+0x10>)
    b0c6:	ldr	r0, [r3, #0]
    b0c8:	eor.w	r0, r0, #2048	; 0x800
}
    b0cc:	ubfx	r0, r0, #11, #1
    b0d0:	bx	lr
    b0d2:	nop
    b0d4:	.word	0x400b1024

0000b0d8 <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    b0d8:	ldr	r3, [pc, #12]	; (b0e8 <isBusyFifoWrite()+0x10>)
    b0da:	ldr	r0, [r3, #0]
    b0dc:	eor.w	r0, r0, #1024	; 0x400
}
    b0e0:	ubfx	r0, r0, #10, #1
    b0e4:	bx	lr
    b0e6:	nop
    b0e8:	.word	0x400b1024

0000b0ec <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    b0ec:	ldr	r3, [pc, #12]	; (b0fc <isBusyTransferComplete()+0x10>)
    b0ee:	ldr	r0, [pc, #16]	; (b100 <isBusyTransferComplete()+0x14>)
    b0f0:	ldr	r3, [r3, #0]
    b0f2:	ands	r0, r3
}
    b0f4:	clz	r0, r0
    b0f8:	lsrs	r0, r0, #5
    b0fa:	bx	lr
    b0fc:	.word	0x400b1030
    b100:	.word	0x117f0002

0000b104 <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    b104:	mov.w	r2, #1000	; 0x3e8
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    b108:	ldr	r3, [pc, #176]	; (b1bc <setSdclk(unsigned long)+0xb8>)
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    b10a:	mul.w	r0, r2, r0
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    b10e:	cmp	r0, r3
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    b110:	push	{r4, r5, r6, r7}
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    b112:	bhi.n	b1ac <setSdclk(unsigned long)+0xa8>
    b114:	ldr	r5, [pc, #168]	; (b1c0 <setSdclk(unsigned long)+0xbc>)
    b116:	movs	r2, #8
    b118:	movs	r1, #1
    sdclkfs <<= 1;
    b11a:	lsls	r1, r1, #1
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    b11c:	lsls	r3, r1, #4
    b11e:	udiv	r3, r5, r3
    b122:	cmp	r0, r3
    b124:	ldr	r4, [pc, #152]	; (b1c0 <setSdclk(unsigned long)+0xbc>)
    b126:	bcs.n	b1a4 <setSdclk(unsigned long)+0xa0>
    b128:	subs	r2, #1
    b12a:	bne.n	b11a <setSdclk(unsigned long)+0x16>
    b12c:	udiv	r4, r4, r1
    b130:	lsrs	r3, r1, #1
    b132:	lsls	r7, r3, #8
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    b134:	cmp	r0, r4
    b136:	bcs.n	b1b4 <setSdclk(unsigned long)+0xb0>
    b138:	ldr	r6, [pc, #132]	; (b1c0 <setSdclk(unsigned long)+0xbc>)
    b13a:	lsls	r3, r1, #1
    b13c:	movs	r2, #1
    b13e:	b.n	b142 <setSdclk(unsigned long)+0x3e>
    b140:	mov	r3, r4
    b142:	udiv	r4, r6, r3
    b146:	cmp	r0, r4
    dvs++;
    b148:	add.w	r5, r2, #1
    b14c:	add.w	r4, r3, r1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    b150:	bcs.n	b1a0 <setSdclk(unsigned long)+0x9c>
    b152:	cmp	r5, #16
    b154:	mov	r2, r5
    b156:	bne.n	b140 <setSdclk(unsigned long)+0x3c>
    b158:	movs	r2, #240	; 0xf0
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    b15a:	ldr	r6, [pc, #104]	; (b1c4 <setSdclk(unsigned long)+0xc0>)
  sdclkfs >>= 1;
  dvs--;
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    b15c:	ldr	r4, [pc, #104]	; (b1c8 <setSdclk(unsigned long)+0xc4>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    b15e:	ldr	r0, [pc, #96]	; (b1c0 <setSdclk(unsigned long)+0xbc>)

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    b160:	ldr	r1, [pc, #104]	; (b1cc <setSdclk(unsigned long)+0xc8>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    b162:	mov.w	r5, #1000	; 0x3e8
    b166:	mul.w	r3, r5, r3
    b16a:	udiv	r3, r0, r3
    b16e:	str	r3, [r6, #0]
  sdclkfs >>= 1;
  dvs--;
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    b170:	ldr	r3, [r4, #0]
    b172:	bic.w	r3, r3, #8
    b176:	str	r3, [r4, #0]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    b178:	ldr	r0, [r4, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    b17a:	bic.w	r3, r0, #1044480	; 0xff000
    b17e:	bic.w	r3, r3, #4080	; 0xff0
    b182:	orr.w	r3, r3, #917504	; 0xe0000
    b186:	orrs	r3, r7
    b188:	orrs	r2, r3
    b18a:	str	r2, [r4, #0]

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    b18c:	ldr	r3, [r1, #0]
    b18e:	lsls	r3, r3, #28
    b190:	bpl.n	b18c <setSdclk(unsigned long)+0x88>
  }

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
    b192:	ldr	r2, [pc, #52]	; (b1c8 <setSdclk(unsigned long)+0xc4>)
    b194:	ldr	r3, [r2, #0]
    b196:	orr.w	r3, r3, #8
    b19a:	str	r3, [r2, #0]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    b19c:	pop	{r4, r5, r6, r7}
    b19e:	bx	lr
    b1a0:	lsls	r2, r2, #4
    b1a2:	b.n	b15a <setSdclk(unsigned long)+0x56>
    b1a4:	udiv	r4, r4, r1
    b1a8:	lsls	r7, r1, #7
    b1aa:	b.n	b134 <setSdclk(unsigned long)+0x30>
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    b1ac:	ldr	r4, [pc, #16]	; (b1c0 <setSdclk(unsigned long)+0xbc>)
    b1ae:	movs	r7, #0
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
    b1b0:	movs	r1, #1
    b1b2:	b.n	b134 <setSdclk(unsigned long)+0x30>
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    b1b4:	mov	r3, r1
    b1b6:	movs	r2, #0
    b1b8:	b.n	b15a <setSdclk(unsigned long)+0x56>
    b1ba:	nop
    b1bc:	.word	0x005b8d7f
    b1c0:	.word	0x05b8d800
    b1c4:	.word	0x1fff1f7c
    b1c8:	.word	0x400b102c
    b1cc:	.word	0x400b1024

0000b1d0 <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    b1d0:	ldr	r3, [pc, #4]	; (b1d8 <SdioCard::errorCode() const+0x8>)
}
    b1d2:	ldrb	r0, [r3, #0]
    b1d4:	bx	lr
    b1d6:	nop
    b1d8:	.word	0x1fff09c0

0000b1dc <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    b1dc:	ldr	r3, [pc, #4]	; (b1e4 <SdioCard::errorData() const+0x8>)
    b1de:	ldr	r0, [r3, #0]
}
    b1e0:	bx	lr
    b1e2:	nop
    b1e4:	.word	0x1fff1f60

0000b1e8 <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    b1e8:	push	{r4, r5}
  memcpy(cid, &m_cid, 16);
    b1ea:	ldr	r4, [pc, #20]	; (b200 <SdioCard::readCID(CID*)+0x18>)
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    b1ec:	mov	r5, r1
  memcpy(cid, &m_cid, 16);
    b1ee:	ldmia	r4!, {r0, r1, r2, r3}
    b1f0:	str	r0, [r5, #0]
    b1f2:	str	r1, [r5, #4]
    b1f4:	str	r2, [r5, #8]
    b1f6:	str	r3, [r5, #12]
  return true;
}
    b1f8:	movs	r0, #1
    b1fa:	pop	{r4, r5}
    b1fc:	bx	lr
    b1fe:	nop
    b200:	.word	0x1fff1f40

0000b204 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    b204:	push	{r4, r5}
  memcpy(csd, &m_csd, 16);
    b206:	ldr	r4, [pc, #20]	; (b21c <SdioCard::readCSD(csd_t*)+0x18>)
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    b208:	mov	r5, r1
  memcpy(csd, &m_csd, 16);
    b20a:	ldmia	r4!, {r0, r1, r2, r3}
    b20c:	str	r0, [r5, #0]
    b20e:	str	r1, [r5, #4]
    b210:	str	r2, [r5, #8]
    b212:	str	r3, [r5, #12]
  return true;
}
    b214:	movs	r0, #1
    b216:	pop	{r4, r5}
    b218:	bx	lr
    b21a:	nop
    b21c:	.word	0x1fff1f68

0000b220 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    b220:	ldr	r3, [pc, #8]	; (b22c <SdioCard::readOCR(unsigned long*)+0xc>)
    b222:	ldr	r3, [r3, #0]
    b224:	str	r3, [r1, #0]
  return true;
}
    b226:	movs	r0, #1
    b228:	bx	lr
    b22a:	nop
    b22c:	.word	0x1fff1f58

0000b230 <SdioCard::~SdioCard()>:
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    b230:	bx	lr
    b232:	nop

0000b234 <waitTimeout(bool (*)())>:
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
    b234:	push	{r3, r4, r5, r6, r7, lr}
    b236:	mov	r5, r0
  uint32_t m = micros();
    b238:	bl	cad8 <micros>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b23c:	ldr	r7, [pc, #24]	; (b258 <waitTimeout(bool (*)())+0x24>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    b23e:	mov	r6, r0
    b240:	b.n	b24c <waitTimeout(bool (*)())+0x18>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b242:	bl	cad8 <micros>
    b246:	subs	r0, r0, r6
    b248:	cmp	r0, r7
    b24a:	bhi.n	b254 <waitTimeout(bool (*)())+0x20>
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    b24c:	blx	r5
    b24e:	mov	r4, r0
    b250:	cmp	r0, #0
    b252:	bne.n	b242 <waitTimeout(bool (*)())+0xe>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      return true;
    }
  }
  return false;  // Caller will set errorCode.
}
    b254:	mov	r0, r4
    b256:	pop	{r3, r4, r5, r6, r7, pc}
    b258:	.word	0x000f4240

0000b25c <yieldTimeout(bool (*)())>:
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    b25c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    b260:	ldr.w	r8, [pc, #64]	; b2a4 <yieldTimeout(bool (*)())+0x48>
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b264:	ldr	r7, [pc, #56]	; (b2a0 <yieldTimeout(bool (*)())+0x44>)
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    b266:	str.w	r0, [r8]
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    b26a:	mov	r5, r0
  m_busyFcn = fcn;
  uint32_t m = micros();
    b26c:	bl	cad8 <micros>
    b270:	mov	r6, r0
    b272:	b.n	b282 <yieldTimeout(bool (*)())+0x26>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b274:	bl	cad8 <micros>
    b278:	subs	r0, r0, r6
    b27a:	cmp	r0, r7
    b27c:	bhi.n	b294 <yieldTimeout(bool (*)())+0x38>
  Particle.process();
}
#elif defined(ARDUINO)
inline void SysCall::yield() {
  // Use the external Arduino yield() function.
  ::yield();
    b27e:	bl	dab4 <yield>
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    b282:	blx	r5
    b284:	mov	r4, r0
    b286:	cmp	r0, #0
    b288:	bne.n	b274 <yieldTimeout(bool (*)())+0x18>
      m_busyFcn = 0;
      return true;
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
    b28a:	str.w	r0, [r8]
  return false;  // Caller will set errorCode.
}
    b28e:	mov	r0, r4
    b290:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    b294:	movs	r3, #0
    b296:	str.w	r3, [r8]
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    b29a:	mov	r0, r4
    b29c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b2a0:	.word	0x000f4240
    b2a4:	.word	0x1fff1f50

0000b2a8 <SdioCard::~SdioCard()>:
    b2a8:	push	{r4, lr}
    b2aa:	movs	r1, #12
    b2ac:	mov	r4, r0
    b2ae:	bl	ddec <operator delete(void*, unsigned int)>
    b2b2:	mov	r0, r4
    b2b4:	pop	{r4, pc}
    b2b6:	nop

0000b2b8 <SdioCard::type() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
    b2b8:	ldr	r3, [pc, #20]	; (b2d0 <SdioCard::type() const+0x18>)
    b2ba:	ldrb	r3, [r3, #0]
    b2bc:	cbz	r3, b2cc <SdioCard::type() const+0x14>
    b2be:	ldr	r3, [pc, #20]	; (b2d4 <SdioCard::type() const+0x1c>)
    b2c0:	ldrb	r3, [r3, #0]
    b2c2:	cmp	r3, #0
    b2c4:	ite	ne
    b2c6:	movne	r0, #3
    b2c8:	moveq	r0, #2
    b2ca:	bx	lr
    b2cc:	movs	r0, #1
}
    b2ce:	bx	lr
    b2d0:	.word	0x1fff1f3c
    b2d4:	.word	0x1fff1f54

0000b2d8 <cardCommand(unsigned long, unsigned long)>:
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    b2d8:	push	{r3, r4, r5, lr}
    b2da:	mov	r4, r0
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    b2dc:	ldr	r0, [pc, #60]	; (b31c <cardCommand(unsigned long, unsigned long)+0x44>)
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    b2de:	mov	r5, r1
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    b2e0:	bl	b234 <waitTimeout(bool (*)())>
    b2e4:	cbz	r0, b2ea <cardCommand(unsigned long, unsigned long)+0x12>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    b2e6:	movs	r0, #0
    b2e8:	pop	{r3, r4, r5, pc}
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    b2ea:	ldr	r2, [pc, #52]	; (b320 <cardCommand(unsigned long, unsigned long)+0x48>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    b2ec:	ldr	r3, [pc, #52]	; (b324 <cardCommand(unsigned long, unsigned long)+0x4c>)
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    b2ee:	str	r5, [r2, #0]
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
  if (waitTimeout(isBusyCommandComplete)) {
    b2f0:	ldr	r0, [pc, #52]	; (b328 <cardCommand(unsigned long, unsigned long)+0x50>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    b2f2:	str	r4, [r3, #0]
  if (waitTimeout(isBusyCommandComplete)) {
    b2f4:	bl	b234 <waitTimeout(bool (*)())>
    b2f8:	cmp	r0, #0
    b2fa:	bne.n	b2e6 <cardCommand(unsigned long, unsigned long)+0xe>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
    b2fc:	ldr	r2, [pc, #44]	; (b32c <cardCommand(unsigned long, unsigned long)+0x54>)
    b2fe:	ldr	r3, [pc, #48]	; (b330 <cardCommand(unsigned long, unsigned long)+0x58>)
    b300:	ldr	r1, [r2, #0]
    b302:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    b304:	ldr	r1, [r3, #0]
    b306:	str	r1, [r2, #0]

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    b308:	ldr	r2, [r3, #0]
    b30a:	lsls	r2, r2, #31
    b30c:	bpl.n	b2e6 <cardCommand(unsigned long, unsigned long)+0xe>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    b30e:	ldr	r3, [r3, #0]
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    b310:	tst.w	r3, #983040	; 0xf0000
    b314:	bne.n	b2e6 <cardCommand(unsigned long, unsigned long)+0xe>
    b316:	movs	r0, #1
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
    b318:	pop	{r3, r4, r5, pc}
    b31a:	nop
    b31c:	.word	0x0000b0a9
    b320:	.word	0x400b1008
    b324:	.word	0x400b100c
    b328:	.word	0x0000b091
    b32c:	.word	0x400b1030
    b330:	.word	0x1fff1f60

0000b334 <SdioCard::status()>:
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
    b334:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b336:	ldr	r3, [pc, #16]	; (b348 <SdioCard::status()+0x14>)
    b338:	ldr	r0, [pc, #16]	; (b34c <SdioCard::status()+0x18>)
    b33a:	ldr	r1, [r3, #0]
    b33c:	bl	b2d8 <cardCommand(unsigned long, unsigned long)>
    b340:	cbz	r0, b346 <SdioCard::status()+0x12>
    b342:	ldr	r3, [pc, #12]	; (b350 <SdioCard::status()+0x1c>)
    b344:	ldr	r0, [r3, #0]
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
    b346:	pop	{r3, pc}
    b348:	.word	0x1fff1f5c
    b34c:	.word	0x0d1a0000
    b350:	.word	0x400b1010

0000b354 <readReg16(unsigned long, void*)>:
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    b354:	push	{r4, r5, lr}
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    b356:	ldr	r3, [pc, #84]	; (b3ac <readReg16(unsigned long, void*)+0x58>)
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    b358:	sub	sp, #20
    b35a:	mov	r5, r1
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    b35c:	ldr	r1, [r3, #0]
    b35e:	bl	b2d8 <cardCommand(unsigned long, unsigned long)>
    b362:	cbz	r0, b3a6 <readReg16(unsigned long, void*)+0x52>
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    b364:	ldr	r2, [pc, #72]	; (b3b0 <readReg16(unsigned long, void*)+0x5c>)
    b366:	ldr	r3, [pc, #76]	; (b3b4 <readReg16(unsigned long, void*)+0x60>)
    b368:	ldr	r2, [r2, #0]
    b36a:	str	r2, [sp, #0]
    b36c:	ldr	r1, [r3, #0]
    b36e:	str	r1, [sp, #4]
    b370:	ldr	r1, [r3, #4]
    b372:	str	r1, [sp, #8]
    b374:	adds	r3, #8
    b376:	add.w	r4, r5, #15
    b37a:	ldr	r3, [r3, #0]
    b37c:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    b37e:	movs	r3, #0
    b380:	b.n	b386 <readReg16(unsigned long, void*)+0x32>
    b382:	ldr.w	r2, [r1, #-16]
    d[14 - i] = sr[i/4] >> 8*(i%4);
    b386:	and.w	r1, r3, #3
    b38a:	lsls	r1, r1, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    b38c:	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    b38e:	lsrs	r2, r1
    b390:	add.w	lr, sp, #16
    b394:	bic.w	r1, r3, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    b398:	cmp	r3, #15
    b39a:	add	r1, lr
    d[14 - i] = sr[i/4] >> 8*(i%4);
    b39c:	strb.w	r2, [r4, #-1]!
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    b3a0:	bne.n	b382 <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i/4] >> 8*(i%4);
  }
  d[15] = 0;
    b3a2:	movs	r3, #0
    b3a4:	strb	r3, [r5, #15]
  return true;
}
    b3a6:	add	sp, #20
    b3a8:	pop	{r4, r5, pc}
    b3aa:	nop
    b3ac:	.word	0x1fff1f5c
    b3b0:	.word	0x400b1010
    b3b4:	.word	0x400b1014

0000b3b8 <isBusyCMD13()>:
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
    b3b8:	push	{r3, lr}
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    b3ba:	ldr	r3, [pc, #28]	; (b3d8 <isBusyCMD13()+0x20>)
    b3bc:	ldr	r0, [pc, #28]	; (b3dc <isBusyCMD13()+0x24>)
    b3be:	ldr	r1, [r3, #0]
    b3c0:	bl	b2d8 <cardCommand(unsigned long, unsigned long)>
    b3c4:	cbz	r0, b3d4 <isBusyCMD13()+0x1c>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    b3c6:	ldr	r3, [pc, #24]	; (b3e0 <isBusyCMD13()+0x28>)
    b3c8:	ldr	r0, [r3, #0]
    b3ca:	eor.w	r0, r0, #256	; 0x100
    b3ce:	ubfx	r0, r0, #8, #1
    b3d2:	pop	{r3, pc}
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
    b3d4:	movs	r0, #1
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
    b3d6:	pop	{r3, pc}
    b3d8:	.word	0x1fff1f5c
    b3dc:	.word	0x0d1a0000
    b3e0:	.word	0x400b1010

0000b3e4 <SdioCard::isBusy()>:
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    b3e4:	ldr	r3, [pc, #16]	; (b3f8 <SdioCard::isBusy()+0x14>)
    b3e6:	ldr	r3, [r3, #0]
    b3e8:	cbz	r3, b3ec <SdioCard::isBusy()+0x8>
    b3ea:	bx	r3
    b3ec:	ldr	r3, [pc, #12]	; (b3fc <SdioCard::isBusy()+0x18>)
    b3ee:	ldrb	r0, [r3, #0]
    b3f0:	cbnz	r0, b3f4 <SdioCard::isBusy()+0x10>
}
    b3f2:	bx	lr
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    b3f4:	b.w	b3b8 <isBusyCMD13()>
    b3f8:	.word	0x1fff1f50
    b3fc:	.word	0x1fff1f64

0000b400 <waitDmaStatus() [clone .part.6]>:
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    b400:	ldr	r3, [pc, #20]	; (b418 <waitDmaStatus() [clone .part.6]+0x18>)
    b402:	ldr	r0, [r3, #0]
    b404:	ands.w	r0, r0, #2
    b408:	beq.n	b416 <waitDmaStatus() [clone .part.6]+0x16>
    b40a:	ldr	r3, [r3, #0]
    b40c:	ldr	r0, [pc, #12]	; (b41c <waitDmaStatus() [clone .part.6]+0x1c>)
    b40e:	ands	r0, r3
    b410:	clz	r0, r0
    b414:	lsrs	r0, r0, #5
}
    b416:	bx	lr
    b418:	.word	0x1fff1f60
    b41c:	.word	0x117f0000

0000b420 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//------------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    b420:	push	{r3, r4, r5, r6, r7, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
    b422:	lsls	r4, r2, #30
    b424:	bne.n	b428 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8>
    b426:	cbnz	r3, b43a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b428:	ldr	r1, [pc, #124]	; (b4a8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    b42a:	ldr	r3, [pc, #128]	; (b4ac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b42c:	movs	r0, #36	; 0x24
  m_errorLine = line;
    b42e:	mov.w	r2, #470	; 0x1d6
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b432:	strb	r0, [r1, #0]
  m_errorLine = line;
    b434:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    b436:	movs	r0, #0
    b438:	pop	{r3, r4, r5, r6, r7, pc}
    b43a:	mov	r6, r0
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    b43c:	ldr	r0, [pc, #112]	; (b4b0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    b43e:	mov	r4, r3
    b440:	mov	r7, r1
    b442:	mov	r5, r2
    b444:	bl	b25c <yieldTimeout(bool (*)())>
    b448:	cbnz	r0, b492 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x72>
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    b44a:	ldr	r1, [pc, #104]	; (b4b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    b44c:	ldr	r2, [pc, #104]	; (b4b8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    b44e:	ldr.w	lr, [pc, #128]	; b4d0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb0>
    b452:	mov.w	ip, #1
    b456:	strb.w	ip, [lr]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    b45a:	lsls	r3, r4, #16
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    b45c:	str	r0, [r1, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    b45e:	ldr	r4, [pc, #92]	; (b4bc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    b460:	str	r5, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    b462:	ldr	r2, [pc, #92]	; (b4c0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    b464:	ldr	r1, [pc, #92]	; (b4c4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa4>)
    b466:	ldr	r0, [pc, #96]	; (b4c8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>)
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    b468:	orr.w	r3, r3, #512	; 0x200
    b46c:	str	r3, [r4, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    b46e:	ldrb	r3, [r2, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    b470:	str	r0, [r1, #0]
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    b472:	cbnz	r3, b4a2 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x82>
    b474:	lsls	r1, r7, #9
    b476:	mov	r0, r6
    b478:	bl	b2d8 <cardCommand(unsigned long, unsigned long)>
    b47c:	cmp	r0, #0
    b47e:	beq.n	b436 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    b480:	ldr	r0, [pc, #72]	; (b4cc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xac>)
    b482:	bl	b25c <yieldTimeout(bool (*)())>
    b486:	cmp	r0, #0
    b488:	bne.n	b436 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    b48a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b48e:	b.w	b400 <waitDmaStatus() [clone .part.6]>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b492:	ldr	r1, [pc, #20]	; (b4a8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    b494:	ldr	r3, [pc, #20]	; (b4ac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b496:	movs	r0, #10
  m_errorLine = line;
    b498:	movw	r2, #473	; 0x1d9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b49c:	strb	r0, [r1, #0]
  m_errorLine = line;
    b49e:	str	r2, [r3, #0]
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    b4a0:	b.n	b436 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    b4a2:	mov	r1, r7
    b4a4:	b.n	b476 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
    b4a6:	nop
    b4a8:	.word	0x1fff09c0
    b4ac:	.word	0x1fff1f80
    b4b0:	.word	0x0000b3b9
    b4b4:	.word	0x1fff1f60
    b4b8:	.word	0x400b1000
    b4bc:	.word	0x400b1004
    b4c0:	.word	0x1fff1f54
    b4c4:	.word	0x400b1038
    b4c8:	.word	0x117f0002
    b4cc:	.word	0x0000b0b9
    b4d0:	.word	0x1fff1f78

0000b4d4 <SdioCard::sectorCount()>:
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
}
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
    b4d4:	push	{r4, r5, r6}
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    b4d6:	ldr	r1, [pc, #100]	; (b53c <SdioCard::sectorCount()+0x68>)
    b4d8:	ldrb	r3, [r1, #0]
    b4da:	ands.w	r3, r3, #192	; 0xc0
    b4de:	beq.n	b504 <SdioCard::sectorCount()+0x30>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    b4e0:	cmp	r3, #64	; 0x40
    b4e2:	beq.n	b4ea <SdioCard::sectorCount()+0x16>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
    b4e4:	movs	r0, #0
  return sdCardCapacity(&m_csd);
}
    b4e6:	pop	{r4, r5, r6}
    b4e8:	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    b4ea:	ldrb	r3, [r1, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    b4ec:	ldrb	r4, [r1, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    b4ee:	ldrb	r0, [r1, #8]
    b4f0:	adds	r2, r3, #1
    b4f2:	and.w	r3, r4, #63	; 0x3f
    b4f6:	add.w	r3, r2, r3, lsl #16
    b4fa:	add.w	r0, r3, r0, lsl #8
    b4fe:	lsls	r0, r0, #10
    b500:	pop	{r4, r5, r6}
    b502:	bx	lr
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    b504:	ldrb	r5, [r1, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    b506:	ldrb	r3, [r1, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    b508:	ldrb	r2, [r1, #7]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    b50a:	ldrb	r4, [r1, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    b50c:	ldrb	r6, [r1, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    b50e:	ldrb	r0, [r1, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    b510:	and.w	r1, r5, #3
    b514:	lsls	r1, r1, #1
    b516:	and.w	r3, r3, #3
    b51a:	lsls	r2, r2, #2
    b51c:	orr.w	r0, r1, r0, lsr #7
    b520:	orr.w	r3, r2, r3, lsl #10
    b524:	and.w	r1, r4, #15
    b528:	orr.w	r3, r3, r6, lsr #6
    b52c:	add	r0, r1
    b52e:	subs	r0, #7
    b530:	adds	r3, #1
    b532:	lsl.w	r0, r3, r0
    b536:	pop	{r4, r5, r6}
    b538:	bx	lr
    b53a:	nop
    b53c:	.word	0x1fff1f68

0000b540 <SdioCard::erase(unsigned long, unsigned long)>:
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    b540:	push	{r4, r5, r6, lr}
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    b542:	ldr	r6, [pc, #176]	; (b5f4 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    b544:	ldrb	r3, [r6, #10]
    b546:	and.w	r0, r3, #64	; 0x40
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    b54a:	mov	r5, r2
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    b54c:	cbnz	r0, b566 <SdioCard::erase(unsigned long, unsigned long)+0x26>
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    b54e:	and.w	r3, r3, #63	; 0x3f
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    b552:	ldrb	r2, [r6, #11]
    b554:	and.w	r4, r0, #255	; 0xff
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    b558:	lsls	r3, r3, #1
    b55a:	adds	r0, r5, #1
    b55c:	orr.w	r3, r3, r2, lsr #7
    b560:	orrs	r0, r1
    b562:	tst	r3, r0
    b564:	bne.n	b5aa <SdioCard::erase(unsigned long, unsigned long)+0x6a>
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    }
  }
  if (!m_highCapacity) {
    b566:	ldr	r3, [pc, #144]	; (b5f8 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    b568:	ldrb	r3, [r3, #0]
    b56a:	cbnz	r3, b570 <SdioCard::erase(unsigned long, unsigned long)+0x30>
    firstSector <<= 9;
    b56c:	lsls	r1, r1, #9
    lastSector <<= 9;
    b56e:	lsls	r5, r5, #9
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    b570:	ldr	r0, [pc, #136]	; (b5fc <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    b572:	bl	b2d8 <cardCommand(unsigned long, unsigned long)>
    b576:	mov	r4, r0
    b578:	cbnz	r0, b58c <SdioCard::erase(unsigned long, unsigned long)+0x4c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b57a:	ldr	r1, [pc, #132]	; (b600 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    b57c:	ldr	r3, [pc, #132]	; (b604 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b57e:	movs	r0, #15
  m_errorLine = line;
    b580:	mov.w	r2, #692	; 0x2b4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b584:	strb	r0, [r1, #0]
  m_errorLine = line;
    b586:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    b588:	mov	r0, r4
    b58a:	pop	{r4, r5, r6, pc}
    lastSector <<= 9;
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    b58c:	mov	r1, r5
    b58e:	ldr	r0, [pc, #120]	; (b608 <SdioCard::erase(unsigned long, unsigned long)+0xc8>)
    b590:	bl	b2d8 <cardCommand(unsigned long, unsigned long)>
    b594:	mov	r4, r0
    b596:	cbnz	r0, b5bc <SdioCard::erase(unsigned long, unsigned long)+0x7c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b598:	ldr	r1, [pc, #100]	; (b600 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    b59a:	ldr	r3, [pc, #104]	; (b604 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b59c:	movs	r0, #16
  m_errorLine = line;
    b59e:	movw	r2, #695	; 0x2b7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b5a2:	strb	r0, [r1, #0]
  m_errorLine = line;
    b5a4:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    b5a6:	mov	r0, r4
    b5a8:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b5aa:	ldr	r1, [pc, #84]	; (b600 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    b5ac:	ldr	r3, [pc, #84]	; (b604 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b5ae:	movs	r0, #38	; 0x26
  m_errorLine = line;
    b5b0:	mov.w	r2, #684	; 0x2ac
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b5b4:	strb	r0, [r1, #0]
  m_errorLine = line;
    b5b6:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    b5b8:	mov	r0, r4
    b5ba:	pop	{r4, r5, r6, pc}
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    b5bc:	movs	r1, #0
    b5be:	ldr	r0, [pc, #76]	; (b60c <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    b5c0:	bl	b2d8 <cardCommand(unsigned long, unsigned long)>
    b5c4:	mov	r4, r0
    b5c6:	cbnz	r0, b5d8 <SdioCard::erase(unsigned long, unsigned long)+0x98>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b5c8:	ldr	r1, [pc, #52]	; (b600 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    b5ca:	ldr	r3, [pc, #56]	; (b604 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b5cc:	movs	r0, #17
  m_errorLine = line;
    b5ce:	movw	r2, #698	; 0x2ba
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b5d2:	strb	r0, [r1, #0]
  m_errorLine = line;
    b5d4:	str	r2, [r3, #0]
    b5d6:	b.n	b588 <SdioCard::erase(unsigned long, unsigned long)+0x48>
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    b5d8:	ldr	r0, [pc, #52]	; (b610 <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    b5da:	bl	b234 <waitTimeout(bool (*)())>
    b5de:	cmp	r0, #0
    b5e0:	beq.n	b588 <SdioCard::erase(unsigned long, unsigned long)+0x48>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b5e2:	ldr	r1, [pc, #28]	; (b600 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    b5e4:	ldr	r3, [pc, #28]	; (b604 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b5e6:	movs	r0, #39	; 0x27
  m_errorLine = line;
    b5e8:	movw	r2, #701	; 0x2bd
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b5ec:	strb	r0, [r1, #0]
  m_errorLine = line;
    b5ee:	str	r2, [r3, #0]
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    b5f0:	movs	r4, #0
    b5f2:	b.n	b588 <SdioCard::erase(unsigned long, unsigned long)+0x48>
    b5f4:	.word	0x1fff1f68
    b5f8:	.word	0x1fff1f54
    b5fc:	.word	0x201a0000
    b600:	.word	0x1fff09c0
    b604:	.word	0x1fff1f80
    b608:	.word	0x211a0000
    b60c:	.word	0x261b0000
    b610:	.word	0x0000b3b9

0000b614 <transferStop()>:
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
    b614:	push	{r4, r5, r6, lr}
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    b616:	movs	r1, #0
    b618:	ldr	r0, [pc, #84]	; (b670 <transferStop()+0x5c>)
    b61a:	bl	b2d8 <cardCommand(unsigned long, unsigned long)>
    b61e:	mov	r4, r0
    b620:	cbnz	r0, b634 <transferStop()+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b622:	ldr	r1, [pc, #80]	; (b674 <transferStop()+0x60>)
  m_errorLine = line;
    b624:	ldr	r3, [pc, #80]	; (b678 <transferStop()+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b626:	movs	r0, #9
  m_errorLine = line;
    b628:	mov.w	r2, #540	; 0x21c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b62c:	strb	r0, [r1, #0]
  m_errorLine = line;
    b62e:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    b630:	mov	r0, r4
    b632:	pop	{r4, r5, r6, pc}
//------------------------------------------------------------------------------
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    b634:	ldr	r0, [pc, #68]	; (b67c <transferStop()+0x68>)
    b636:	bl	b25c <yieldTimeout(bool (*)())>
    b63a:	cbnz	r0, b65a <transferStop()+0x46>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    b63c:	ldr	r0, [pc, #64]	; (b680 <transferStop()+0x6c>)
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    b63e:	ldr	r1, [pc, #68]	; (b684 <transferStop()+0x70>)
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    b640:	ldr	r5, [pc, #68]	; (b688 <transferStop()+0x74>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    b642:	ldr	r6, [r0, #0]
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    b644:	ldr	r3, [r1, #0]
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    b646:	ldr	r2, [r5, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    b648:	bic.w	r3, r3, #65536	; 0x10000
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    b64c:	orr.w	r2, r2, #67108864	; 0x4000000
    b650:	str	r2, [r5, #0]
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
    b652:	str	r6, [r0, #0]
  SDHC_PROCTL = proctl;
    b654:	str	r3, [r1, #0]
  return true;
}
    b656:	mov	r0, r4
    b658:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b65a:	ldr	r1, [pc, #24]	; (b674 <transferStop()+0x60>)
  m_errorLine = line;
    b65c:	ldr	r3, [pc, #24]	; (b678 <transferStop()+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b65e:	movs	r0, #10
  m_errorLine = line;
    b660:	movw	r2, #543	; 0x21f
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b664:	strb	r0, [r1, #0]
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    b666:	movs	r4, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    b668:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    b66a:	mov	r0, r4
    b66c:	pop	{r4, r5, r6, pc}
    b66e:	nop
    b670:	.word	0x0cdb0000
    b674:	.word	0x1fff09c0
    b678:	.word	0x1fff1f80
    b67c:	.word	0x0000b3b9
    b680:	.word	0x400b1034
    b684:	.word	0x400b1028
    b688:	.word	0x400b102c

0000b68c <SdioCard::readStop()>:
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    b68c:	b.w	b614 <transferStop()>

0000b690 <SdioCard::writeData(unsigned char const*)>:
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    b690:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    b692:	ldr	r3, [pc, #160]	; (b734 <SdioCard::writeData(unsigned char const*)+0xa4>)
    b694:	ldr	r3, [r3, #0]
    b696:	lsls	r0, r3, #23
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    b698:	mov	r5, r1
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    b69a:	bmi.n	b6ae <SdioCard::writeData(unsigned char const*)+0x1e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    b69c:	ldr	r3, [pc, #152]	; (b738 <SdioCard::writeData(unsigned char const*)+0xa8>)
    b69e:	ldr	r2, [r3, #0]
    b6a0:	bic.w	r2, r2, #65536	; 0x10000
    b6a4:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    b6a6:	ldr	r2, [r3, #0]
    b6a8:	orr.w	r2, r2, #131072	; 0x20000
    b6ac:	str	r2, [r3, #0]
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    b6ae:	ldr	r2, [pc, #136]	; (b738 <SdioCard::writeData(unsigned char const*)+0xa8>)
  if (waitTimeout(isBusyFifoWrite)) {
    b6b0:	ldr	r0, [pc, #136]	; (b73c <SdioCard::writeData(unsigned char const*)+0xac>)
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    b6b2:	ldr	r3, [r2, #0]
    b6b4:	orr.w	r3, r3, #65536	; 0x10000
    b6b8:	str	r3, [r2, #0]
  if (waitTimeout(isBusyFifoWrite)) {
    b6ba:	bl	b234 <waitTimeout(bool (*)())>
    b6be:	cmp	r0, #0
    b6c0:	bne.n	b720 <SdioCard::writeData(unsigned char const*)+0x90>
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    b6c2:	ldr	r4, [pc, #112]	; (b734 <SdioCard::writeData(unsigned char const*)+0xa4>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    b6c4:	ldr	r0, [pc, #120]	; (b740 <SdioCard::writeData(unsigned char const*)+0xb0>)
    b6c6:	subs	r3, r5, #4
    b6c8:	add.w	r5, r5, #508	; 0x1fc
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    b6cc:	ldr	r2, [r4, #0]
    b6ce:	lsls	r1, r2, #21
    b6d0:	bpl.n	b6cc <SdioCard::writeData(unsigned char const*)+0x3c>
    b6d2:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    b6d6:	ldr.w	r2, [r3, #4]!
    b6da:	str	r2, [r0, #0]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    b6dc:	cmp	r1, r3
    b6de:	bne.n	b6d6 <SdioCard::writeData(unsigned char const*)+0x46>
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    b6e0:	cmp	r5, r1
    b6e2:	mov	r3, r1
    b6e4:	bne.n	b6cc <SdioCard::writeData(unsigned char const*)+0x3c>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    b6e6:	ldr	r0, [pc, #92]	; (b744 <SdioCard::writeData(unsigned char const*)+0xb4>)
    b6e8:	bl	b234 <waitTimeout(bool (*)())>
    b6ec:	cbnz	r0, b70e <SdioCard::writeData(unsigned char const*)+0x7e>
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    b6ee:	ldr	r2, [pc, #88]	; (b748 <SdioCard::writeData(unsigned char const*)+0xb8>)
    b6f0:	ldr	r3, [pc, #88]	; (b74c <SdioCard::writeData(unsigned char const*)+0xbc>)
    b6f2:	ldr	r1, [r2, #0]
    b6f4:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    b6f6:	ldr	r1, [r3, #0]
    b6f8:	str	r1, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    b6fa:	ldr	r2, [r3, #0]
    b6fc:	lsls	r2, r2, #30
    b6fe:	bpl.n	b730 <SdioCard::writeData(unsigned char const*)+0xa0>
    b700:	ldr	r3, [r3, #0]
    b702:	ldr	r0, [pc, #76]	; (b750 <SdioCard::writeData(unsigned char const*)+0xc0>)
    b704:	ands	r0, r3
    b706:	clz	r0, r0
    b70a:	lsrs	r0, r0, #5
    b70c:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b70e:	ldr	r1, [pc, #68]	; (b754 <SdioCard::writeData(unsigned char const*)+0xc4>)
  m_errorLine = line;
    b710:	ldr	r3, [pc, #68]	; (b758 <SdioCard::writeData(unsigned char const*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b712:	movs	r0, #35	; 0x23
  m_errorLine = line;
    b714:	movw	r2, #905	; 0x389
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b718:	strb	r0, [r1, #0]
  m_errorLine = line;
    b71a:	str	r2, [r3, #0]
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
    b71c:	movs	r0, #0
    b71e:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b720:	ldr	r1, [pc, #48]	; (b754 <SdioCard::writeData(unsigned char const*)+0xc4>)
  m_errorLine = line;
    b722:	ldr	r3, [pc, #52]	; (b758 <SdioCard::writeData(unsigned char const*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b724:	movs	r0, #32
  m_errorLine = line;
    b726:	movw	r2, #894	; 0x37e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b72a:	strb	r0, [r1, #0]
  m_errorLine = line;
    b72c:	str	r2, [r3, #0]
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    b72e:	movs	r0, #0
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    b730:	pop	{r3, r4, r5, pc}
    b732:	nop
    b734:	.word	0x400b1024
    b738:	.word	0x400b1028
    b73c:	.word	0x0000b0d9
    b740:	.word	0x400b1020
    b744:	.word	0x0000b0ed
    b748:	.word	0x400b1030
    b74c:	.word	0x1fff1f60
    b750:	.word	0x117f0000
    b754:	.word	0x1fff09c0
    b758:	.word	0x1fff1f80

0000b75c <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    b75c:	push	{r3, r4, r5, lr}
  if (yieldTimeout(isBusyCMD13)) {
    b75e:	ldr	r0, [pc, #80]	; (b7b0 <SdioCard::writeStart(unsigned long)+0x54>)
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    b760:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    b762:	bl	b25c <yieldTimeout(bool (*)())>
    b766:	cbnz	r0, b79c <SdioCard::writeStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    b768:	ldr	r2, [pc, #72]	; (b7b4 <SdioCard::writeStart(unsigned long)+0x58>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    b76a:	ldr	r1, [pc, #76]	; (b7b8 <SdioCard::writeStart(unsigned long)+0x5c>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    b76c:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    b76e:	ldr	r0, [pc, #76]	; (b7bc <SdioCard::writeStart(unsigned long)+0x60>)
    b770:	ldr	r5, [pc, #76]	; (b7c0 <SdioCard::writeStart(unsigned long)+0x64>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    b772:	bic.w	r3, r3, #65536	; 0x10000
    b776:	str	r3, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    b778:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    b77a:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    b77c:	cbnz	r3, b798 <SdioCard::writeStart(unsigned long)+0x3c>
    b77e:	lsls	r1, r4, #9
    b780:	ldr	r0, [pc, #64]	; (b7c4 <SdioCard::writeStart(unsigned long)+0x68>)
    b782:	bl	b2d8 <cardCommand(unsigned long, unsigned long)>
    b786:	cbnz	r0, b796 <SdioCard::writeStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b788:	ldr	r1, [pc, #60]	; (b7c8 <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    b78a:	ldr	r3, [pc, #64]	; (b7cc <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b78c:	movs	r4, #14
  m_errorLine = line;
    b78e:	movw	r2, #990	; 0x3de
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b792:	strb	r4, [r1, #0]
  m_errorLine = line;
    b794:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    b796:	pop	{r3, r4, r5, pc}
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    b798:	mov	r1, r4
    b79a:	b.n	b780 <SdioCard::writeStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b79c:	ldr	r1, [pc, #40]	; (b7c8 <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    b79e:	ldr	r3, [pc, #44]	; (b7cc <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b7a0:	movs	r0, #10
  m_errorLine = line;
    b7a2:	movw	r2, #978	; 0x3d2
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b7a6:	strb	r0, [r1, #0]
  m_errorLine = line;
    b7a8:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    b7aa:	movs	r0, #0
    b7ac:	pop	{r3, r4, r5, pc}
    b7ae:	nop
    b7b0:	.word	0x0000b3b9
    b7b4:	.word	0x400b1028
    b7b8:	.word	0x1fff1f54
    b7bc:	.word	0x400b1004
    b7c0:	.word	0xffff0200
    b7c4:	.word	0x193a0022
    b7c8:	.word	0x1fff09c0
    b7cc:	.word	0x1fff1f80

0000b7d0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    b7d0:	push	{r3, r4, r5, r6, r7, lr}
    b7d2:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    b7d4:	ldrb	r0, [r0, #8]
    b7d6:	lsls	r0, r0, #31
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    b7d8:	mov	r4, r1
    b7da:	mov	r5, r2
    b7dc:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    b7de:	bmi.n	b808 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
      return sdError(SD_CARD_ERROR_CMD18);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    b7e0:	cbz	r3, b804 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    b7e2:	add	r7, r1
    b7e4:	b.n	b7ea <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    b7e6:	cmp	r4, r7
    b7e8:	beq.n	b804 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    b7ea:	ldr	r3, [r6, #0]
    b7ec:	mov	r2, r5
    b7ee:	mov	r1, r4
    b7f0:	ldr	r3, [r3, #8]
    b7f2:	mov	r0, r6
    b7f4:	blx	r3
    b7f6:	adds	r4, #1
    b7f8:	add.w	r5, r5, #512	; 0x200
    b7fc:	cmp	r0, #0
    b7fe:	bne.n	b7e6 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
        if (!readSector(sector, dst)) {
          return false;  // readSector will set errorCode.
    b800:	movs	r0, #0
    b802:	pop	{r3, r4, r5, r6, r7, pc}
      if (!readSector(sector + i, dst + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    b804:	movs	r0, #1
    b806:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
    b808:	lsls	r0, r2, #30
    b80a:	beq.n	b832 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    b80c:	cmp	r3, #0
    b80e:	beq.n	b804 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    b810:	add	r7, r1
    b812:	b.n	b818 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    b814:	cmp	r7, r4
    b816:	beq.n	b804 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    b818:	ldr	r3, [r6, #0]
    b81a:	mov	r2, r5
    b81c:	mov	r1, r4
    b81e:	ldr	r3, [r3, #8]
    b820:	mov	r0, r6
    b822:	blx	r3
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    b824:	adds	r4, #1
    b826:	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    b82a:	cmp	r0, #0
    b82c:	bne.n	b814 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    b82e:	movs	r0, #0
    b830:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    b832:	ldr	r0, [pc, #24]	; (b84c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    b834:	bl	b420 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    b838:	cmp	r0, #0
    b83a:	bne.n	b804 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b83c:	ldr	r1, [pc, #16]	; (b850 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
  m_errorLine = line;
    b83e:	ldr	r3, [pc, #20]	; (b854 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b840:	movs	r4, #12
  m_errorLine = line;
    b842:	mov.w	r2, #820	; 0x334
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b846:	strb	r4, [r1, #0]
  m_errorLine = line;
    b848:	str	r2, [r3, #0]
    b84a:	pop	{r3, r4, r5, r6, r7, pc}
    b84c:	.word	0x123a0037
    b850:	.word	0x1fff09c0
    b854:	.word	0x1fff1f80

0000b858 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    b858:	push	{r3, r4, r5, r6, r7, lr}
    b85a:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    b85c:	ldrb	r0, [r0, #8]
    b85e:	lsls	r0, r0, #31
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    b860:	mov	r4, r1
    b862:	mov	r5, r2
    b864:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    b866:	bmi.n	b890 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    b868:	cbz	r3, b88c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    b86a:	add	r7, r1
    b86c:	b.n	b872 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    b86e:	cmp	r4, r7
    b870:	beq.n	b88c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    b872:	ldr	r3, [r6, #0]
    b874:	mov	r2, r5
    b876:	mov	r1, r4
    b878:	ldr	r3, [r3, #24]
    b87a:	mov	r0, r6
    b87c:	blx	r3
    b87e:	adds	r4, #1
    b880:	add.w	r5, r5, #512	; 0x200
    b884:	cmp	r0, #0
    b886:	bne.n	b86e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
        if (!writeSector(sector, ptr)) {
          return false;  // writeSector will set errorCode.
    b888:	movs	r0, #0
    b88a:	pop	{r3, r4, r5, r6, r7, pc}
      if (!writeSector(sector + i, src + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    b88c:	movs	r0, #1
    b88e:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
    b890:	lsls	r0, r2, #30
    b892:	beq.n	b8ba <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    b894:	cmp	r3, #0
    b896:	beq.n	b88c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    b898:	add	r7, r1
    b89a:	b.n	b8a0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    b89c:	cmp	r7, r4
    b89e:	beq.n	b88c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    b8a0:	ldr	r3, [r6, #0]
    b8a2:	mov	r2, r5
    b8a4:	mov	r1, r4
    b8a6:	ldr	r3, [r3, #24]
    b8a8:	mov	r0, r6
    b8aa:	blx	r3
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    b8ac:	adds	r4, #1
    b8ae:	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    b8b2:	cmp	r0, #0
    b8b4:	bne.n	b89c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    b8b6:	movs	r0, #0
    b8b8:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    b8ba:	ldr	r0, [pc, #24]	; (b8d4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    b8bc:	bl	b420 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    b8c0:	cmp	r0, #0
    b8c2:	bne.n	b88c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b8c4:	ldr	r1, [pc, #16]	; (b8d8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
  m_errorLine = line;
    b8c6:	ldr	r3, [pc, #20]	; (b8dc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b8c8:	movs	r4, #14
  m_errorLine = line;
    b8ca:	mov.w	r2, #964	; 0x3c4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b8ce:	strb	r4, [r1, #0]
  m_errorLine = line;
    b8d0:	str	r2, [r3, #0]
    b8d2:	pop	{r3, r4, r5, r6, r7, pc}
    b8d4:	.word	0x193a0027
    b8d8:	.word	0x1fff09c0
    b8dc:	.word	0x1fff1f80

0000b8e0 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    b8e0:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    b8e2:	ldrb	r3, [r0, #8]
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    b8e4:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    b8e6:	lsls	r2, r3, #31
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    b8e8:	sub.w	sp, sp, #512	; 0x200
    b8ec:	mov	r6, r1
  if (m_sdioConfig.useDma()) {
    b8ee:	bpl.n	b924 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
    b8f0:	lsls	r3, r5, #30
    b8f2:	beq.n	b902 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x22>
      ptr = aligned;
      memcpy(aligned, src, 512);
    b8f4:	mov	r1, r5
    b8f6:	mov	r0, sp
    b8f8:	mov.w	r2, #512	; 0x200
    b8fc:	bl	c198 <memcpy>
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_sdioConfig.useDma()) {
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
      ptr = aligned;
    b900:	mov	r5, sp
      memcpy(aligned, src, 512);
    } else {
      ptr = const_cast<uint8_t*>(src);
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    b902:	mov	r2, r5
    b904:	mov	r1, r6
    b906:	movs	r3, #1
    b908:	ldr	r0, [pc, #120]	; (b984 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>)
    b90a:	bl	b420 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    b90e:	cbnz	r0, b91e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b910:	ldr	r1, [pc, #116]	; (b988 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa8>)
  m_errorLine = line;
    b912:	ldr	r3, [pc, #120]	; (b98c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xac>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b914:	movs	r4, #13
  m_errorLine = line;
    b916:	movw	r2, #923	; 0x39b
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b91a:	strb	r4, [r1, #0]
  m_errorLine = line;
    b91c:	str	r2, [r3, #0]
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    b91e:	add.w	sp, sp, #512	; 0x200
    b922:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    b924:	ldrb	r3, [r0, #9]
    b926:	cmp	r3, #2
    b928:	mov	r4, r0
    b92a:	beq.n	b93e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
      if (!syncDevice()) {
    b92c:	ldr	r3, [r4, #0]
    b92e:	mov	r0, r4
    b930:	ldr	r3, [r3, #20]
    b932:	blx	r3
    b934:	cbnz	r0, b96e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x8e>
        return false;
    b936:	movs	r0, #0
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    b938:	add.w	sp, sp, #512	; 0x200
    b93c:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    b93e:	ldr	r3, [r0, #4]
    b940:	cmp	r1, r3
    b942:	bne.n	b92c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    }
    if (!writeData(src)) {
    b944:	ldr	r3, [r4, #0]
    b946:	mov	r1, r5
    b948:	ldr	r3, [r3, #68]	; 0x44
    b94a:	mov	r0, r4
    b94c:	blx	r3
    b94e:	cmp	r0, #0
    b950:	beq.n	b936 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
      return false;
    }
    m_curSector++;
    b952:	ldr	r3, [r4, #4]
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    b954:	ldr	r2, [pc, #56]	; (b990 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb0>)
      m_curState = WRITE_STATE;
    }
    if (!writeData(src)) {
      return false;
    }
    m_curSector++;
    b956:	adds	r3, #1
    b958:	str	r3, [r4, #4]
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    b95a:	ldr	r3, [r2, #0]
    b95c:	lsrs	r3, r3, #16
    b95e:	lsls	r3, r3, #16
    b960:	cmp	r3, #0
    b962:	bne.n	b91e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
      if (!syncDevice()) {
    b964:	ldr	r3, [r4, #0]
    b966:	mov	r0, r4
    b968:	ldr	r3, [r3, #20]
    b96a:	blx	r3
    b96c:	b.n	b91e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
      if (!syncDevice()) {
        return false;
      }
      if (!writeStart(sector )) {
    b96e:	ldr	r3, [r4, #0]
    b970:	mov	r1, r6
    b972:	ldr	r3, [r3, #72]	; 0x48
    b974:	mov	r0, r4
    b976:	blx	r3
    b978:	cmp	r0, #0
    b97a:	beq.n	b936 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    b97c:	movs	r3, #2
        return false;
      }
      if (!writeStart(sector )) {
        return false;
      }
      m_curSector = sector;
    b97e:	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    b980:	strb	r3, [r4, #9]
    b982:	b.n	b944 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x64>
    b984:	.word	0x183a0001
    b988:	.word	0x1fff09c0
    b98c:	.word	0x1fff1f80
    b990:	.word	0x400b1004

0000b994 <SdioCard::syncDevice()>:
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    b994:	ldrb	r3, [r0, #9]
    b996:	cmp	r3, #1
    b998:	beq.n	b9b4 <SdioCard::syncDevice()+0x20>
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    b99a:	cmp	r3, #2
    b99c:	beq.n	b9a2 <SdioCard::syncDevice()+0xe>
    if (!writeStop()) {
      return false;
    }
  }
  return true;
}
    b99e:	movs	r0, #1
    b9a0:	bx	lr
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    b9a2:	movs	r1, #0
    if (!writeStop()) {
    b9a4:	ldr	r3, [r0, #0]
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    b9a6:	strb	r1, [r0, #9]
    if (!writeStop()) {
    b9a8:	ldr	r3, [r3, #76]	; 0x4c
    b9aa:	ldr	r2, [pc, #20]	; (b9c0 <SdioCard::syncDevice()+0x2c>)
    b9ac:	cmp	r3, r2
    b9ae:	bne.n	b9bc <SdioCard::syncDevice()+0x28>
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    b9b0:	b.w	b614 <transferStop()>
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    b9b4:	movs	r3, #0
    b9b6:	strb	r3, [r0, #9]
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
    b9b8:	b.w	b614 <transferStop()>
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    if (!writeStop()) {
    b9bc:	bx	r3
    b9be:	nop
    b9c0:	.word	0x0000b68d

0000b9c4 <cardCMD6(unsigned long, unsigned char*)>:

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    b9c4:	push	{r3, r4, r5, r6, r7, lr}
    b9c6:	mov	r5, r0
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    b9c8:	ldr	r0, [pc, #116]	; (ba40 <cardCMD6(unsigned long, unsigned char*)+0x7c>)

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    b9ca:	mov	r4, r1
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    b9cc:	bl	b234 <waitTimeout(bool (*)())>
    b9d0:	cbz	r0, b9e4 <cardCMD6(unsigned long, unsigned char*)+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b9d2:	ldr	r1, [pc, #112]	; (ba44 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    b9d4:	ldr	r3, [pc, #112]	; (ba48 <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b9d6:	movs	r0, #10
  m_errorLine = line;
    b9d8:	movw	r2, #377	; 0x179
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    b9dc:	strb	r0, [r1, #0]
  m_errorLine = line;
    b9de:	str	r2, [r3, #0]
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    b9e0:	movs	r0, #0
    b9e2:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    b9e4:	ldr	r2, [pc, #100]	; (ba4c <cardCMD6(unsigned long, unsigned char*)+0x88>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    b9e6:	ldr.w	lr, [pc, #132]	; ba6c <cardCMD6(unsigned long, unsigned char*)+0xa8>
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    b9ea:	ldr	r7, [pc, #100]	; (ba50 <cardCMD6(unsigned long, unsigned char*)+0x8c>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    b9ec:	ldr	r6, [pc, #100]	; (ba54 <cardCMD6(unsigned long, unsigned char*)+0x90>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    b9ee:	ldr	r3, [pc, #104]	; (ba58 <cardCMD6(unsigned long, unsigned char*)+0x94>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    b9f0:	mov.w	ip, #1
    b9f4:	strb.w	ip, [lr]
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    b9f8:	mov	r1, r5
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    b9fa:	str	r0, [r2, #0]
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    b9fc:	ldr	r5, [pc, #92]	; (ba5c <cardCMD6(unsigned long, unsigned char*)+0x98>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    b9fe:	ldr	r2, [pc, #96]	; (ba60 <cardCMD6(unsigned long, unsigned char*)+0x9c>)
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    ba00:	str	r4, [r7, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    ba02:	ldr	r0, [pc, #96]	; (ba64 <cardCMD6(unsigned long, unsigned char*)+0xa0>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    ba04:	str	r5, [r6, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    ba06:	str	r2, [r3, #0]
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    ba08:	bl	b2d8 <cardCommand(unsigned long, unsigned long)>
    ba0c:	cbnz	r0, ba1e <cardCMD6(unsigned long, unsigned char*)+0x5a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ba0e:	ldr	r1, [pc, #52]	; (ba44 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    ba10:	ldr	r3, [pc, #52]	; (ba48 <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ba12:	movs	r4, #4
  m_errorLine = line;
    ba14:	mov.w	r2, #384	; 0x180
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ba18:	strb	r4, [r1, #0]
  m_errorLine = line;
    ba1a:	str	r2, [r3, #0]
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
    ba1c:	pop	{r3, r4, r5, r6, r7, pc}
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    ba1e:	ldr	r0, [pc, #72]	; (ba68 <cardCMD6(unsigned long, unsigned char*)+0xa4>)
    ba20:	bl	b25c <yieldTimeout(bool (*)())>
    ba24:	cbnz	r0, ba2e <cardCMD6(unsigned long, unsigned char*)+0x6a>
    ba26:	bl	b400 <waitDmaStatus() [clone .part.6]>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    ba2a:	cbz	r0, ba2e <cardCMD6(unsigned long, unsigned char*)+0x6a>
    return sdError(SD_CARD_ERROR_DMA);
  }
  return true;
}
    ba2c:	pop	{r3, r4, r5, r6, r7, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ba2e:	ldr	r1, [pc, #20]	; (ba44 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    ba30:	ldr	r3, [pc, #20]	; (ba48 <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ba32:	movs	r0, #36	; 0x24
  m_errorLine = line;
    ba34:	movw	r2, #387	; 0x183
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ba38:	strb	r0, [r1, #0]
  m_errorLine = line;
    ba3a:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    return sdError(SD_CARD_ERROR_DMA);
    ba3c:	movs	r0, #0
    ba3e:	pop	{r3, r4, r5, r6, r7, pc}
    ba40:	.word	0x0000b3b9
    ba44:	.word	0x1fff09c0
    ba48:	.word	0x1fff1f80
    ba4c:	.word	0x1fff1f60
    ba50:	.word	0x400b1000
    ba54:	.word	0x400b1004
    ba58:	.word	0x400b1038
    ba5c:	.word	0x00010040
    ba60:	.word	0x117f0002
    ba64:	.word	0x063a0011
    ba68:	.word	0x0000b0b9
    ba6c:	.word	0x1fff1f78

0000ba70 <SdioCard::begin(SdioConfig)>:
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    ba70:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    ba74:	ldr	r5, [pc, #568]	; (bcb0 <SdioCard::begin(SdioConfig)+0x240>)
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    ba76:	ldr	r4, [pc, #572]	; (bcb4 <SdioCard::begin(SdioConfig)+0x244>)
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    ba78:	ldr.w	r8, [pc, #684]	; bd28 <SdioCard::begin(SdioConfig)+0x2b8>
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    ba7c:	ldr	r7, [pc, #568]	; (bcb8 <SdioCard::begin(SdioConfig)+0x248>)
  m_version2 = false;
    ba7e:	ldr	r6, [pc, #572]	; (bcbc <SdioCard::begin(SdioConfig)+0x24c>)
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
    ba80:	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    ba82:	movs	r3, #0
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    ba84:	strb	r3, [r5, #0]
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    ba86:	strb	r3, [r0, #9]
  m_initDone = false;
    ba88:	strb.w	r3, [r8]
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    ba8c:	strb	r3, [r7, #0]
  m_version2 = false;
    ba8e:	strb	r3, [r6, #0]
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    ba90:	ldr	r3, [r4, #0]
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    ba92:	ldr	r2, [pc, #556]	; (bcc0 <SdioCard::begin(SdioConfig)+0x250>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    ba94:	ldr	r0, [pc, #556]	; (bcc4 <SdioCard::begin(SdioConfig)+0x254>)
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    ba96:	ldr	r1, [pc, #560]	; (bcc8 <SdioCard::begin(SdioConfig)+0x258>)
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    ba98:	ldr.w	lr, [pc, #656]	; bd2c <SdioCard::begin(SdioConfig)+0x2bc>
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    ba9c:	orr.w	r3, r3, #201326592	; 0xc000000
    baa0:	str	r3, [r4, #0]
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    baa2:	ldr	r3, [r2, #0]
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    baa4:	add.w	r4, r4, #260096	; 0x3f800
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    baa8:	orr.w	r3, r3, #131072	; 0x20000
    baac:	str	r3, [r2, #0]
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    baae:	adds	r4, #12
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    bab0:	add.w	r2, r2, #428032	; 0x68800
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    bab4:	movw	r3, #259	; 0x103
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    bab8:	addw	r2, r2, #2044	; 0x7fc
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    babc:	str	r3, [r0, #0]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    babe:	str.w	r3, [lr]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    bac2:	str	r3, [r1, #0]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    bac4:	str	r3, [r4, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    bac6:	str	r3, [r0, #16]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    bac8:	str	r3, [r1, #12]
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    baca:	ldr	r3, [r2, #0]
    bacc:	orr.w	r3, r3, #16777216	; 0x1000000
    bad0:	orr.w	r3, r3, #32768	; 0x8000
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    bad4:	sub	sp, #68	; 0x44
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    bad6:	str	r3, [r2, #0]

  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    bad8:	ldr	r3, [r2, #0]
    bada:	ldr	r4, [pc, #496]	; (bccc <SdioCard::begin(SdioConfig)+0x25c>)
    badc:	lsls	r1, r3, #7
    bade:	bmi.n	bad8 <SdioCard::begin(SdioConfig)+0x68>
  }

  // Set initial SCK rate.
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    bae0:	mov.w	r0, #400	; 0x190
    bae4:	bl	b104 <setSdclk(unsigned long)>
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    bae8:	ldr.w	ip, [pc, #472]	; bcc4 <SdioCard::begin(SdioConfig)+0x254>
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    baec:	ldr.w	lr, [pc, #572]	; bd2c <SdioCard::begin(SdioConfig)+0x2bc>
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    baf0:	ldr	r1, [pc, #468]	; (bcc8 <SdioCard::begin(SdioConfig)+0x258>)
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    baf2:	ldr	r2, [pc, #476]	; (bcd0 <SdioCard::begin(SdioConfig)+0x260>)
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    baf4:	ldr	r0, [pc, #476]	; (bcd4 <SdioCard::begin(SdioConfig)+0x264>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    baf6:	movw	r3, #1091	; 0x443
    bafa:	str.w	r3, [ip]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    bafe:	str.w	r3, [lr]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    bb02:	mov.w	lr, #1088	; 0x440
    bb06:	str.w	lr, [r1]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    bb0a:	str	r3, [r2, #0]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    bb0c:	add.w	r2, r2, #409600	; 0x64000
    bb10:	adds	r2, #40	; 0x28

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    bb12:	str	r3, [r0, #0]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    bb14:	ldr	r0, [pc, #448]	; (bcd8 <SdioCard::begin(SdioConfig)+0x268>)
  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    bb16:	str	r3, [r1, #12]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    bb18:	str	r0, [r2, #0]

  attachInterruptVector(IRQ_SDHC, sdIrs);
    bb1a:	ldr	r1, [pc, #448]	; (bcdc <SdioCard::begin(SdioConfig)+0x26c>)
    bb1c:	movs	r0, #81	; 0x51
    bb1e:	bl	ca98 <attachInterruptVector>
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    bb22:	ldr	r3, [pc, #444]	; (bce0 <SdioCard::begin(SdioConfig)+0x270>)

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    bb24:	ldr	r1, [pc, #444]	; (bce4 <SdioCard::begin(SdioConfig)+0x274>)
    bb26:	movs	r0, #96	; 0x60
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    bb28:	mov.w	r2, #131072	; 0x20000

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    bb2c:	strb	r0, [r1, #0]
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    bb2e:	str	r2, [r3, #0]

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    bb30:	ldr	r3, [r4, #0]
    bb32:	orr.w	r3, r3, #134217728	; 0x8000000
    bb36:	str	r3, [r4, #0]
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    bb38:	ldr	r1, [r4, #0]
    bb3a:	ands.w	r1, r1, #134217728	; 0x8000000
    bb3e:	bne.n	bb38 <SdioCard::begin(SdioConfig)+0xc8>
  m_highCapacity = false;
  m_version2 = false;

  // initialize controller.
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    bb40:	mov	r0, r1
    bb42:	bl	b2d8 <cardCommand(unsigned long, unsigned long)>
    bb46:	mov	r4, r0
    bb48:	cmp	r0, #0
    bb4a:	beq.n	bbea <SdioCard::begin(SdioConfig)+0x17a>
    bb4c:	movs	r4, #3
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    bb4e:	mov.w	r1, #426	; 0x1aa
    bb52:	ldr	r0, [pc, #404]	; (bce8 <SdioCard::begin(SdioConfig)+0x278>)
    bb54:	bl	b2d8 <cardCommand(unsigned long, unsigned long)>
    bb58:	cmp	r0, #0
    bb5a:	bne.n	bc18 <SdioCard::begin(SdioConfig)+0x1a8>
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    bb5c:	subs	r4, #1
    bb5e:	bne.n	bb4e <SdioCard::begin(SdioConfig)+0xde>
      }
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    bb60:	ldrb	r3, [r6, #0]
    bb62:	ldr	r6, [pc, #392]	; (bcec <SdioCard::begin(SdioConfig)+0x27c>)
    bb64:	cmp	r3, #0
    bb66:	it	eq
    bb68:	moveq.w	r6, #3145728	; 0x300000
  int m = micros();
    bb6c:	bl	cad8 <micros>
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    bb70:	ldr	r4, [pc, #380]	; (bcf0 <SdioCard::begin(SdioConfig)+0x280>)
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
    bb72:	mov	r9, r0
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    bb74:	movs	r1, #0
    bb76:	ldr	r0, [pc, #380]	; (bcf4 <SdioCard::begin(SdioConfig)+0x284>)
    bb78:	bl	b2d8 <cardCommand(unsigned long, unsigned long)>
    bb7c:	cbnz	r0, bb94 <SdioCard::begin(SdioConfig)+0x124>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    bb7e:	ldr	r2, [pc, #376]	; (bcf8 <SdioCard::begin(SdioConfig)+0x288>)
    bb80:	movw	r1, #621	; 0x26d
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    bb84:	movs	r3, #23
  m_errorLine = line;
    bb86:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    bb88:	strb	r3, [r5, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    bb8a:	movs	r4, #0

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    bb8c:	mov	r0, r4
    bb8e:	add	sp, #68	; 0x44
    bb90:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    bb94:	mov	r1, r6
    bb96:	ldr	r0, [pc, #356]	; (bcfc <SdioCard::begin(SdioConfig)+0x28c>)
    bb98:	bl	b2d8 <cardCommand(unsigned long, unsigned long)>
    bb9c:	cmp	r0, #0
    bb9e:	beq.n	bb7e <SdioCard::begin(SdioConfig)+0x10e>
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    bba0:	bl	cad8 <micros>
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    bba4:	ldr	r3, [pc, #344]	; (bd00 <SdioCard::begin(SdioConfig)+0x290>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    bba6:	ldr	r2, [pc, #328]	; (bcf0 <SdioCard::begin(SdioConfig)+0x280>)
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    bba8:	rsb	r0, r9, r0
    bbac:	cmp	r0, r3
    bbae:	bhi.n	bb7e <SdioCard::begin(SdioConfig)+0x10e>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    bbb0:	ldr	r3, [r4, #0]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    bbb2:	cmp	r3, #0
    bbb4:	bge.n	bb74 <SdioCard::begin(SdioConfig)+0x104>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
    bbb6:	ldr	r3, [pc, #332]	; (bd04 <SdioCard::begin(SdioConfig)+0x294>)
    bbb8:	ldr	r1, [r2, #0]
    bbba:	str	r1, [r3, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    bbbc:	ldr	r3, [r2, #0]
    // Is high capacity.
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    bbbe:	ldr	r0, [pc, #328]	; (bd08 <SdioCard::begin(SdioConfig)+0x298>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    bbc0:	lsls	r2, r3, #1
    // Is high capacity.
    m_highCapacity = true;
    bbc2:	it	mi
    bbc4:	movmi	r3, #1
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    bbc6:	mov.w	r1, #0
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    // Is high capacity.
    m_highCapacity = true;
    bbca:	it	mi
    bbcc:	strbmi	r3, [r7, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    bbce:	bl	b2d8 <cardCommand(unsigned long, unsigned long)>
    bbd2:	mov	r4, r0
    bbd4:	cbnz	r0, bbfe <SdioCard::begin(SdioConfig)+0x18e>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    bbd6:	ldr	r2, [pc, #288]	; (bcf8 <SdioCard::begin(SdioConfig)+0x288>)
    bbd8:	movw	r1, #630	; 0x276
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    bbdc:	movs	r3, #2

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    bbde:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    bbe0:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    bbe2:	strb	r3, [r5, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    bbe4:	add	sp, #68	; 0x44
    bbe6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    bbea:	ldr	r2, [pc, #268]	; (bcf8 <SdioCard::begin(SdioConfig)+0x288>)
    bbec:	mov.w	r1, #604	; 0x25c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    bbf0:	movs	r3, #1

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    bbf2:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    bbf4:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    bbf6:	strb	r3, [r5, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    bbf8:	add	sp, #68	; 0x44
    bbfa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    bbfe:	movs	r1, #0
    bc00:	ldr	r0, [pc, #264]	; (bd0c <SdioCard::begin(SdioConfig)+0x29c>)
    bc02:	bl	b2d8 <cardCommand(unsigned long, unsigned long)>
    bc06:	mov	r4, r0
    bc08:	cbnz	r0, bc3a <SdioCard::begin(SdioConfig)+0x1ca>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    bc0a:	ldr	r2, [pc, #236]	; (bcf8 <SdioCard::begin(SdioConfig)+0x288>)
    bc0c:	movw	r1, #633	; 0x279
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    bc10:	movs	r3, #3
  m_errorLine = line;
    bc12:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    bc14:	strb	r3, [r5, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
    bc16:	b.n	bb8c <SdioCard::begin(SdioConfig)+0x11c>
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
    bc18:	ldr	r3, [pc, #212]	; (bcf0 <SdioCard::begin(SdioConfig)+0x280>)
    bc1a:	ldr	r3, [r3, #0]
    bc1c:	cmp.w	r3, #426	; 0x1aa
    bc20:	beq.n	bc32 <SdioCard::begin(SdioConfig)+0x1c2>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    bc22:	ldr	r2, [pc, #212]	; (bcf8 <SdioCard::begin(SdioConfig)+0x288>)
    bc24:	movw	r1, #610	; 0x262
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    bc28:	movs	r3, #6
  m_errorLine = line;
    bc2a:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    bc2c:	strb	r3, [r5, #0]
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
    bc2e:	movs	r4, #0
    bc30:	b.n	bb8c <SdioCard::begin(SdioConfig)+0x11c>
      }
      m_version2 = true;
    bc32:	movs	r3, #1
    bc34:	strb	r3, [r6, #0]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    bc36:	ldr	r6, [pc, #180]	; (bcec <SdioCard::begin(SdioConfig)+0x27c>)
    bc38:	b.n	bb6c <SdioCard::begin(SdioConfig)+0xfc>
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    bc3a:	ldr	r3, [pc, #180]	; (bcf0 <SdioCard::begin(SdioConfig)+0x280>)
    bc3c:	ldr	r6, [pc, #208]	; (bd10 <SdioCard::begin(SdioConfig)+0x2a0>)
    bc3e:	ldr	r3, [r3, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    bc40:	ldr	r1, [pc, #208]	; (bd14 <SdioCard::begin(SdioConfig)+0x2a4>)
    bc42:	ldr	r0, [pc, #212]	; (bd18 <SdioCard::begin(SdioConfig)+0x2a8>)
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    bc44:	lsrs	r3, r3, #16
    bc46:	lsls	r3, r3, #16
    bc48:	str	r3, [r6, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    bc4a:	bl	b354 <readReg16(unsigned long, void*)>
    bc4e:	mov	r4, r0
    bc50:	cbnz	r0, bc60 <SdioCard::begin(SdioConfig)+0x1f0>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    bc52:	ldr	r2, [pc, #164]	; (bcf8 <SdioCard::begin(SdioConfig)+0x288>)
    bc54:	movw	r1, #638	; 0x27e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    bc58:	movs	r3, #7
  m_errorLine = line;
    bc5a:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    bc5c:	strb	r3, [r5, #0]
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
    bc5e:	b.n	bb8c <SdioCard::begin(SdioConfig)+0x11c>
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    bc60:	ldr	r1, [pc, #184]	; (bd1c <SdioCard::begin(SdioConfig)+0x2ac>)
    bc62:	ldr	r0, [pc, #188]	; (bd20 <SdioCard::begin(SdioConfig)+0x2b0>)
    bc64:	bl	b354 <readReg16(unsigned long, void*)>
    bc68:	mov	r4, r0
    bc6a:	cbnz	r0, bc7a <SdioCard::begin(SdioConfig)+0x20a>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    bc6c:	ldr	r2, [pc, #136]	; (bcf8 <SdioCard::begin(SdioConfig)+0x288>)
    bc6e:	movw	r1, #641	; 0x281
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    bc72:	movs	r3, #8
  m_errorLine = line;
    bc74:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    bc76:	strb	r3, [r5, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
    bc78:	b.n	bb8c <SdioCard::begin(SdioConfig)+0x11c>
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    bc7a:	ldr	r1, [r6, #0]
    bc7c:	ldr	r0, [pc, #164]	; (bd24 <SdioCard::begin(SdioConfig)+0x2b4>)
    bc7e:	bl	b2d8 <cardCommand(unsigned long, unsigned long)>
    bc82:	mov	r4, r0
    bc84:	cbnz	r0, bc94 <SdioCard::begin(SdioConfig)+0x224>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    bc86:	ldr	r2, [pc, #112]	; (bcf8 <SdioCard::begin(SdioConfig)+0x288>)
    bc88:	mov.w	r1, #644	; 0x284
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    bc8c:	movs	r3, #5
  m_errorLine = line;
    bc8e:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    bc90:	strb	r3, [r5, #0]
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
    bc92:	b.n	bb8c <SdioCard::begin(SdioConfig)+0x11c>
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    bc94:	ldr	r1, [r6, #0]
    bc96:	ldr	r0, [pc, #92]	; (bcf4 <SdioCard::begin(SdioConfig)+0x284>)
    bc98:	bl	b2d8 <cardCommand(unsigned long, unsigned long)>
    bc9c:	cmp	r0, #0
    bc9e:	bne.n	bd30 <SdioCard::begin(SdioConfig)+0x2c0>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    bca0:	ldr	r2, [pc, #84]	; (bcf8 <SdioCard::begin(SdioConfig)+0x288>)
    bca2:	mov.w	r1, #648	; 0x288
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    bca6:	movs	r3, #20
  m_errorLine = line;
    bca8:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    bcaa:	strb	r3, [r5, #0]
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    bcac:	movs	r4, #0
    bcae:	b.n	bb8c <SdioCard::begin(SdioConfig)+0x11c>
    bcb0:	.word	0x1fff09c0
    bcb4:	.word	0x4000d800
    bcb8:	.word	0x1fff1f54
    bcbc:	.word	0x1fff1f3c
    bcc0:	.word	0x40048030
    bcc4:	.word	0x4004d000
    bcc8:	.word	0x4004d008
    bccc:	.word	0x400b102c
    bcd0:	.word	0x4004d00c
    bcd4:	.word	0x4004d010
    bcd8:	.word	0x117f000b
    bcdc:	.word	0x0000b061
    bce0:	.word	0xe000e108
    bce4:	.word	0xe000e451
    bce8:	.word	0x081a0000
    bcec:	.word	0x40300000
    bcf0:	.word	0x400b1010
    bcf4:	.word	0x371a0000
    bcf8:	.word	0x1fff1f80
    bcfc:	.word	0x29020000
    bd00:	.word	0x000f4240
    bd04:	.word	0x1fff1f58
    bd08:	.word	0x02090000
    bd0c:	.word	0x031a0000
    bd10:	.word	0x1fff1f5c
    bd14:	.word	0x1fff1f68
    bd18:	.word	0x09090000
    bd1c:	.word	0x1fff1f40
    bd20:	.word	0x0a090000
    bd24:	.word	0x071b0000
    bd28:	.word	0x1fff1f64
    bd2c:	.word	0x4004d004
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    bd30:	movs	r1, #2
    bd32:	ldr	r0, [pc, #168]	; (bddc <SdioCard::begin(SdioConfig)+0x36c>)
    bd34:	bl	b2d8 <cardCommand(unsigned long, unsigned long)>
    bd38:	mov	r4, r0
    bd3a:	cmp	r0, #0
    bd3c:	beq.n	bca0 <SdioCard::begin(SdioConfig)+0x230>
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    bd3e:	ldr	r3, [pc, #160]	; (bde0 <SdioCard::begin(SdioConfig)+0x370>)
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    bd40:	ldr	r0, [pc, #160]	; (bde4 <SdioCard::begin(SdioConfig)+0x374>)
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    bd42:	ldr	r2, [r3, #0]
    bd44:	bic.w	r2, r2, #6
    bd48:	str	r2, [r3, #0]
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    bd4a:	ldr	r2, [r3, #0]

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    bd4c:	mov.w	r5, #1048592	; 0x100010
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    bd50:	orr.w	r2, r2, #2
    bd54:	str	r2, [r3, #0]
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    bd56:	mov	r1, sp
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    bd58:	str	r5, [r0, #0]

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    bd5a:	mvn.w	r0, #4278190080	; 0xff000000
    bd5e:	bl	b9c4 <cardCMD6(unsigned long, unsigned char*)>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    bd62:	cbz	r0, bd6c <SdioCard::begin(SdioConfig)+0x2fc>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    bd64:	ldrb.w	r3, [sp, #13]
    bd68:	lsls	r3, r3, #30
    bd6a:	bmi.n	bdbe <SdioCard::begin(SdioConfig)+0x34e>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    kHzSdClk = 50000;
  } else {
    kHzSdClk = 25000;
    bd6c:	movw	r0, #25000	; 0x61a8
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    bd70:	ldr.w	fp, [pc, #132]	; bdf8 <SdioCard::begin(SdioConfig)+0x388>
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    bd74:	ldr.w	sl, [pc, #132]	; bdfc <SdioCard::begin(SdioConfig)+0x38c>
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    bd78:	ldr.w	r9, [pc, #132]	; be00 <SdioCard::begin(SdioConfig)+0x390>
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    bd7c:	ldr	r7, [pc, #104]	; (bde8 <SdioCard::begin(SdioConfig)+0x378>)
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    bd7e:	ldr	r6, [pc, #108]	; (bdec <SdioCard::begin(SdioConfig)+0x37c>)
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    bd80:	ldr	r5, [pc, #108]	; (bdf0 <SdioCard::begin(SdioConfig)+0x380>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    bd82:	movw	r3, #259	; 0x103
    bd86:	str.w	r3, [fp]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    bd8a:	str.w	r3, [sl]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    bd8e:	str.w	r3, [r9]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    bd92:	str	r3, [r7, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    bd94:	str	r3, [r6, #0]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    bd96:	str	r3, [r5, #0]
  }
  // Disable GPIO.
  enableGPIO(false);

  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);
    bd98:	bl	b104 <setSdclk(unsigned long)>
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    bd9c:	movw	r3, #1091	; 0x443
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    bda0:	mov.w	r1, #1088	; 0x440
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    bda4:	movs	r2, #1
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    bda6:	str.w	r3, [fp]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    bdaa:	str.w	r3, [sl]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    bdae:	str.w	r1, [r9]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    bdb2:	str	r3, [r7, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    bdb4:	str	r3, [r6, #0]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    bdb6:	str	r3, [r5, #0]
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    bdb8:	strb.w	r2, [r8]
  return true;
    bdbc:	b.n	bb8c <SdioCard::begin(SdioConfig)+0x11c>

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    bdbe:	mov	r1, sp
    bdc0:	ldr	r0, [pc, #48]	; (bdf4 <SdioCard::begin(SdioConfig)+0x384>)
    bdc2:	bl	b9c4 <cardCMD6(unsigned long, unsigned char*)>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    bdc6:	cmp	r0, #0
    bdc8:	beq.n	bd6c <SdioCard::begin(SdioConfig)+0x2fc>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    bdca:	ldrb.w	r3, [sp, #16]
    bdce:	and.w	r3, r3, #15
    bdd2:	cmp	r3, #1
    bdd4:	bne.n	bd6c <SdioCard::begin(SdioConfig)+0x2fc>
    kHzSdClk = 50000;
    bdd6:	movw	r0, #50000	; 0xc350
    bdda:	b.n	bd70 <SdioCard::begin(SdioConfig)+0x300>
    bddc:	.word	0x061a0000
    bde0:	.word	0x400b1028
    bde4:	.word	0x400b1044
    bde8:	.word	0x4004d00c
    bdec:	.word	0x4004d010
    bdf0:	.word	0x4004d014
    bdf4:	.word	0x80fffff1
    bdf8:	.word	0x4004d000
    bdfc:	.word	0x4004d004
    be00:	.word	0x4004d008

0000be04 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    be04:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    be06:	ldr	r3, [pc, #160]	; (bea8 <SdioCard::readData(unsigned char*)+0xa4>)
    be08:	ldr	r3, [r3, #0]
    be0a:	lsls	r0, r3, #22
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    be0c:	mov	r5, r1
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    be0e:	bmi.n	be2e <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    be10:	ldr	r3, [pc, #152]	; (beac <SdioCard::readData(unsigned char*)+0xa8>)
    be12:	ldr	r2, [r3, #0]
    be14:	bic.w	r2, r2, #65536	; 0x10000
    be18:	str	r2, [r3, #0]
    noInterrupts();
    be1a:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    be1c:	ldr	r2, [r3, #0]
    be1e:	orr.w	r2, r2, #131072	; 0x20000
    be22:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    be24:	ldr	r2, [r3, #0]
    be26:	orr.w	r2, r2, #65536	; 0x10000
    be2a:	str	r2, [r3, #0]
    interrupts();
    be2c:	cpsie	i
  }
  if (waitTimeout(isBusyFifoRead)) {
    be2e:	ldr	r0, [pc, #128]	; (beb0 <SdioCard::readData(unsigned char*)+0xac>)
    be30:	bl	b234 <waitTimeout(bool (*)())>
    be34:	cmp	r0, #0
    be36:	bne.n	be96 <SdioCard::readData(unsigned char*)+0x92>
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    be38:	ldr	r4, [pc, #108]	; (bea8 <SdioCard::readData(unsigned char*)+0xa4>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    be3a:	ldr	r0, [pc, #120]	; (beb4 <SdioCard::readData(unsigned char*)+0xb0>)
    be3c:	subs	r3, r5, #4
    be3e:	add.w	r5, r5, #508	; 0x1fc
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    be42:	ldr	r2, [r4, #0]
    be44:	lsls	r1, r2, #20
    be46:	bpl.n	be42 <SdioCard::readData(unsigned char*)+0x3e>
    be48:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    be4c:	ldr	r2, [r0, #0]
    be4e:	str.w	r2, [r3, #4]!
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    be52:	cmp	r1, r3
    be54:	bne.n	be4c <SdioCard::readData(unsigned char*)+0x48>
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    be56:	cmp	r5, r1
    be58:	mov	r3, r1
    be5a:	bne.n	be42 <SdioCard::readData(unsigned char*)+0x3e>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    be5c:	ldr	r0, [pc, #88]	; (beb8 <SdioCard::readData(unsigned char*)+0xb4>)
    be5e:	bl	b234 <waitTimeout(bool (*)())>
    be62:	cbnz	r0, be84 <SdioCard::readData(unsigned char*)+0x80>
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    be64:	ldr	r2, [pc, #84]	; (bebc <SdioCard::readData(unsigned char*)+0xb8>)
    be66:	ldr	r3, [pc, #88]	; (bec0 <SdioCard::readData(unsigned char*)+0xbc>)
    be68:	ldr	r1, [r2, #0]
    be6a:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    be6c:	ldr	r1, [r3, #0]
    be6e:	str	r1, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    be70:	ldr	r2, [r3, #0]
    be72:	lsls	r2, r2, #30
    be74:	bpl.n	bea6 <SdioCard::readData(unsigned char*)+0xa2>
    be76:	ldr	r3, [r3, #0]
    be78:	ldr	r0, [pc, #72]	; (bec4 <SdioCard::readData(unsigned char*)+0xc0>)
    be7a:	ands	r0, r3
    be7c:	clz	r0, r0
    be80:	lsrs	r0, r0, #5
    be82:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    be84:	ldr	r1, [pc, #64]	; (bec8 <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    be86:	ldr	r3, [pc, #68]	; (becc <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    be88:	movs	r0, #29
  m_errorLine = line;
    be8a:	movw	r2, #759	; 0x2f7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    be8e:	strb	r0, [r1, #0]
  m_errorLine = line;
    be90:	str	r2, [r3, #0]
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    be92:	movs	r0, #0
    be94:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    be96:	ldr	r1, [pc, #48]	; (bec8 <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    be98:	ldr	r3, [pc, #48]	; (becc <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    be9a:	movs	r0, #26
  m_errorLine = line;
    be9c:	mov.w	r2, #748	; 0x2ec
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    bea0:	strb	r0, [r1, #0]
  m_errorLine = line;
    bea2:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    bea4:	movs	r0, #0
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    bea6:	pop	{r3, r4, r5, pc}
    bea8:	.word	0x400b1024
    beac:	.word	0x400b1028
    beb0:	.word	0x0000b0c5
    beb4:	.word	0x400b1020
    beb8:	.word	0x0000b0ed
    bebc:	.word	0x400b1030
    bec0:	.word	0x1fff1f60
    bec4:	.word	0x117f0000
    bec8:	.word	0x1fff09c0
    becc:	.word	0x1fff1f80

0000bed0 <SdioCard::readStart(unsigned long)>:
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    bed0:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    bed2:	ldr	r0, [pc, #80]	; (bf24 <SdioCard::readStart(unsigned long)+0x54>)
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    bed4:	mov	r4, r1
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    bed6:	bl	b25c <yieldTimeout(bool (*)())>
    beda:	cbnz	r0, bf10 <SdioCard::readStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    bedc:	ldr	r2, [pc, #72]	; (bf28 <SdioCard::readStart(unsigned long)+0x58>)
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    bede:	ldr	r1, [pc, #76]	; (bf2c <SdioCard::readStart(unsigned long)+0x5c>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    bee0:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    bee2:	ldr	r0, [pc, #76]	; (bf30 <SdioCard::readStart(unsigned long)+0x60>)
    bee4:	ldr	r5, [pc, #76]	; (bf34 <SdioCard::readStart(unsigned long)+0x64>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    bee6:	orr.w	r3, r3, #65536	; 0x10000
    beea:	str	r3, [r2, #0]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    beec:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    beee:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    bef0:	cbnz	r3, bf0c <SdioCard::readStart(unsigned long)+0x3c>
    bef2:	lsls	r1, r4, #9
    bef4:	ldr	r0, [pc, #64]	; (bf38 <SdioCard::readStart(unsigned long)+0x68>)
    bef6:	bl	b2d8 <cardCommand(unsigned long, unsigned long)>
    befa:	cbnz	r0, bf0a <SdioCard::readStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    befc:	ldr	r1, [pc, #60]	; (bf3c <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    befe:	ldr	r3, [pc, #64]	; (bf40 <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    bf00:	movs	r4, #12
  m_errorLine = line;
    bf02:	mov.w	r2, #848	; 0x350
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    bf06:	strb	r4, [r1, #0]
  m_errorLine = line;
    bf08:	str	r2, [r3, #0]

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD18);
  }
  return true;
}
    bf0a:	pop	{r3, r4, r5, pc}
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    bf0c:	mov	r1, r4
    bf0e:	b.n	bef4 <SdioCard::readStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    bf10:	ldr	r1, [pc, #40]	; (bf3c <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    bf12:	ldr	r3, [pc, #44]	; (bf40 <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    bf14:	movs	r0, #10
  m_errorLine = line;
    bf16:	mov.w	r2, #836	; 0x344
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    bf1a:	strb	r0, [r1, #0]
  m_errorLine = line;
    bf1c:	str	r2, [r3, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    bf1e:	movs	r0, #0
    bf20:	pop	{r3, r4, r5, pc}
    bf22:	nop
    bf24:	.word	0x0000b3b9
    bf28:	.word	0x400b1028
    bf2c:	.word	0x1fff1f54
    bf30:	.word	0x400b1004
    bf34:	.word	0xffff0200
    bf38:	.word	0x123a0032
    bf3c:	.word	0x1fff09c0
    bf40:	.word	0x1fff1f80

0000bf44 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    bf44:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    bf46:	ldrb	r3, [r0, #8]
    bf48:	lsls	r4, r3, #31
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    bf4a:	sub.w	sp, sp, #512	; 0x200
    bf4e:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    bf50:	bpl.n	bf78 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    bf52:	lsls	r3, r2, #30
    bf54:	beq.n	bf96 <SdioCard::readSector(unsigned long, unsigned char*)+0x52>

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    bf56:	mov	r2, sp
    bf58:	movs	r3, #1
    bf5a:	ldr	r0, [pc, #168]	; (c004 <SdioCard::readSector(unsigned long, unsigned char*)+0xc0>)
    bf5c:	bl	b420 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    bf60:	cbz	r0, bfa2 <SdioCard::readSector(unsigned long, unsigned char*)+0x5e>
      return sdError(SD_CARD_ERROR_CMD17);
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    bf62:	mov	r1, sp
    bf64:	mov	r0, r5
    bf66:	mov.w	r2, #512	; 0x200
    bf6a:	bl	c198 <memcpy>
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
    bf6e:	movs	r5, #1
}
    bf70:	mov	r0, r5
    bf72:	add.w	sp, sp, #512	; 0x200
    bf76:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    bf78:	ldrb	r3, [r0, #9]
    bf7a:	cmp	r3, #1
    bf7c:	mov	r4, r0
    bf7e:	mov	r6, r1
    bf80:	beq.n	bfba <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
      if (!syncDevice()) {
    bf82:	ldr	r3, [r4, #0]
    bf84:	mov	r0, r4
    bf86:	ldr	r3, [r3, #20]
    bf88:	blx	r3
    bf8a:	cbnz	r0, bfe0 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
        return false;
    bf8c:	movs	r5, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    bf8e:	mov	r0, r5
    bf90:	add.w	sp, sp, #512	; 0x200
    bf94:	pop	{r4, r5, r6, pc}
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    bf96:	movs	r3, #1
    bf98:	ldr	r0, [pc, #104]	; (c004 <SdioCard::readSector(unsigned long, unsigned char*)+0xc0>)
    bf9a:	bl	b420 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    bf9e:	cmp	r0, #0
    bfa0:	bne.n	bf6e <SdioCard::readSector(unsigned long, unsigned char*)+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    bfa2:	ldr	r1, [pc, #100]	; (c008 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>)
  m_errorLine = line;
    bfa4:	ldr	r3, [pc, #100]	; (c00c <SdioCard::readSector(unsigned long, unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    bfa6:	movs	r0, #11
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD17);
    bfa8:	movs	r5, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    bfaa:	movw	r2, #778	; 0x30a
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    bfae:	strb	r0, [r1, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    bfb0:	mov	r0, r5
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    bfb2:	str	r2, [r3, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    bfb4:	add.w	sp, sp, #512	; 0x200
    bfb8:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    bfba:	ldr	r3, [r0, #4]
    bfbc:	cmp	r1, r3
    bfbe:	bne.n	bf82 <SdioCard::readSector(unsigned long, unsigned char*)+0x3e>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    }
    if (!readData(dst)) {
    bfc0:	mov	r1, r5
    bfc2:	mov	r0, r4
    bfc4:	bl	be04 <SdioCard::readData(unsigned char*)>
    bfc8:	mov	r5, r0
    bfca:	cmp	r0, #0
    bfcc:	beq.n	bf8c <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    bfce:	ldr	r3, [pc, #64]	; (c010 <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>)
    bfd0:	ldr	r3, [r3, #0]
    bfd2:	lsrs	r3, r3, #16
    bfd4:	lsls	r3, r3, #16
    bfd6:	cbz	r3, bff4 <SdioCard::readSector(unsigned long, unsigned char*)+0xb0>
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
    bfd8:	ldr	r3, [r4, #4]
    bfda:	adds	r3, #1
    bfdc:	str	r3, [r4, #4]
    bfde:	b.n	bf8e <SdioCard::readSector(unsigned long, unsigned char*)+0x4a>
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
      if (!syncDevice()) {
        return false;
      }
      if (!readStart(sector)) {
    bfe0:	mov	r1, r6
    bfe2:	mov	r0, r4
    bfe4:	bl	bed0 <SdioCard::readStart(unsigned long)>
    bfe8:	cmp	r0, #0
    bfea:	beq.n	bf8c <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    bfec:	movs	r3, #1
        return false;
      }
      if (!readStart(sector)) {
        return false;
      }
      m_curSector = sector;
    bfee:	str	r6, [r4, #4]
      m_curState = READ_STATE;
    bff0:	strb	r3, [r4, #9]
    bff2:	b.n	bfc0 <SdioCard::readSector(unsigned long, unsigned char*)+0x7c>
    if (!readData(dst)) {
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
      if (!syncDevice()) {
    bff4:	ldr	r3, [r4, #0]
    bff6:	mov	r0, r4
    bff8:	ldr	r3, [r3, #20]
    bffa:	blx	r3
    bffc:	cmp	r0, #0
    bffe:	bne.n	bfd8 <SdioCard::readSector(unsigned long, unsigned char*)+0x94>
    c000:	b.n	bf8c <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
    c002:	nop
    c004:	.word	0x113a0011
    c008:	.word	0x1fff09c0
    c00c:	.word	0x1fff1f80
    c010:	.word	0x400b1004

0000c014 <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    c014:	push	{r4}
  m_spi->beginTransaction(m_spiSettings);
    c016:	ldr	r3, [r0, #0]
    c018:	ldr	r2, [r0, #4]

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    c01a:	ldrb	r1, [r3, #11]
    c01c:	cbz	r1, c05e <SdSpiArduinoDriver::activate()+0x4a>
			__disable_irq();
    c01e:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    c020:	ldrb	r1, [r3, #11]
    c022:	lsls	r0, r1, #31
    c024:	bpl.n	c034 <SdSpiArduinoDriver::activate()+0x20>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    c026:	ldr	r0, [pc, #100]	; (c08c <SdSpiArduinoDriver::activate()+0x78>)
    c028:	ldr	r1, [r3, #12]
    c02a:	ldr	r4, [r0, #0]
    c02c:	ands	r1, r4
    c02e:	str	r1, [r3, #28]
				NVIC_ICER0 = interruptSave[0];
    c030:	str	r1, [r0, #0]
    c032:	ldrb	r1, [r3, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    c034:	lsls	r4, r1, #30
    c036:	bpl.n	c046 <SdSpiArduinoDriver::activate()+0x32>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    c038:	ldr	r0, [pc, #84]	; (c090 <SdSpiArduinoDriver::activate()+0x7c>)
    c03a:	ldr	r1, [r3, #16]
    c03c:	ldr	r4, [r0, #0]
    c03e:	ands	r1, r4
    c040:	str	r1, [r3, #32]
				NVIC_ICER1 = interruptSave[1];
    c042:	str	r1, [r0, #0]
    c044:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    c046:	lsls	r0, r1, #29
    c048:	bpl.n	c058 <SdSpiArduinoDriver::activate()+0x44>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    c04a:	ldr	r0, [pc, #72]	; (c094 <SdSpiArduinoDriver::activate()+0x80>)
    c04c:	ldr	r1, [r3, #20]
    c04e:	ldr	r4, [r0, #0]
    c050:	ands	r1, r4
    c052:	str	r1, [r3, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    c054:	str	r1, [r0, #0]
    c056:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    c058:	lsls	r1, r1, #28
    c05a:	bmi.n	c07c <SdSpiArduinoDriver::activate()+0x68>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    c05c:	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    c05e:	ldr	r3, [r3, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    c060:	ldr	r1, [r3, #12]
    c062:	cmp	r1, r2
    c064:	beq.n	c076 <SdSpiArduinoDriver::activate()+0x62>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    c066:	ldr	r0, [pc, #48]	; (c098 <SdSpiArduinoDriver::activate()+0x84>)
    c068:	str	r0, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    c06a:	ldr	r1, [pc, #48]	; (c09c <SdSpiArduinoDriver::activate()+0x88>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    c06c:	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    c06e:	orr.w	r0, r2, #1073741824	; 0x40000000
    c072:	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    c074:	str	r1, [r3, #0]
}
    c076:	ldr.w	r4, [sp], #4
    c07a:	bx	lr
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    c07c:	ldr	r0, [pc, #32]	; (c0a0 <SdSpiArduinoDriver::activate()+0x8c>)
    c07e:	ldr	r1, [r3, #24]
    c080:	ldr	r4, [r0, #0]
    c082:	ands	r1, r4
    c084:	str	r1, [r3, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    c086:	str	r1, [r0, #0]
    c088:	b.n	c05c <SdSpiArduinoDriver::activate()+0x48>
    c08a:	nop
    c08c:	.word	0xe000e180
    c090:	.word	0xe000e184
    c094:	.word	0xe000e188
    c098:	.word	0x003f4001
    c09c:	.word	0x803f0000
    c0a0:	.word	0xe000e18c

0000c0a4 <SdSpiArduinoDriver::deactivate()>:
  }
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    c0a4:	ldr	r2, [r0, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    c0a6:	ldrb	r3, [r2, #11]
    c0a8:	cbz	r3, c0d8 <SdSpiArduinoDriver::deactivate()+0x34>
			if (interruptMasksUsed & 0x01) {
    c0aa:	lsls	r1, r3, #31
    c0ac:	bpl.n	c0b6 <SdSpiArduinoDriver::deactivate()+0x12>
				NVIC_ISER0 = interruptSave[0];
    c0ae:	ldr	r3, [pc, #44]	; (c0dc <SdSpiArduinoDriver::deactivate()+0x38>)
    c0b0:	ldr	r1, [r2, #28]
    c0b2:	str	r1, [r3, #0]
    c0b4:	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    c0b6:	lsls	r0, r3, #30
    c0b8:	bpl.n	c0c2 <SdSpiArduinoDriver::deactivate()+0x1e>
				NVIC_ISER1 = interruptSave[1];
    c0ba:	ldr	r3, [pc, #36]	; (c0e0 <SdSpiArduinoDriver::deactivate()+0x3c>)
    c0bc:	ldr	r1, [r2, #32]
    c0be:	str	r1, [r3, #0]
    c0c0:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    c0c2:	lsls	r1, r3, #29
    c0c4:	bpl.n	c0ce <SdSpiArduinoDriver::deactivate()+0x2a>
				NVIC_ISER2 = interruptSave[2];
    c0c6:	ldr	r3, [pc, #28]	; (c0e4 <SdSpiArduinoDriver::deactivate()+0x40>)
    c0c8:	ldr	r1, [r2, #36]	; 0x24
    c0ca:	str	r1, [r3, #0]
    c0cc:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    c0ce:	lsls	r3, r3, #28
    c0d0:	bpl.n	c0d8 <SdSpiArduinoDriver::deactivate()+0x34>
				NVIC_ISER3 = interruptSave[3];
    c0d2:	ldr	r3, [pc, #20]	; (c0e8 <SdSpiArduinoDriver::deactivate()+0x44>)
    c0d4:	ldr	r2, [r2, #40]	; 0x28
    c0d6:	str	r2, [r3, #0]
    c0d8:	bx	lr
    c0da:	nop
    c0dc:	.word	0xe000e100
    c0e0:	.word	0xe000e104
    c0e4:	.word	0xe000e108
    c0e8:	.word	0xe000e10c

0000c0ec <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
    c0ec:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    c0ee:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    c0f0:	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    c0f4:	movs	r3, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    c0f6:	str	r1, [r2, #44]	; 0x2c
		port().PUSHR = data;
    c0f8:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    c0fa:	ldr	r3, [r2, #44]	; 0x2c
    c0fc:	cmp	r3, #0
    c0fe:	bge.n	c0fa <SdSpiArduinoDriver::receive()+0xe>
		return port().POPR;
    c100:	ldr	r0, [r2, #56]	; 0x38
  return m_spi->transfer(0XFF);
}
    c102:	uxtb	r0, r0
    c104:	bx	lr
    c106:	nop

0000c108 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    c108:	push	{r4, r5, r6, lr}
    c10a:	mov	r5, r0
    c10c:	mov	r4, r1
    c10e:	mov	r6, r2
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    c110:	mov	r0, r1
    c112:	movs	r1, #255	; 0xff
    c114:	bl	f32c <memset>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    c118:	ldr	r0, [r5, #0]
    c11a:	mov	r3, r6
    c11c:	mov	r2, r4
    c11e:	mov	r1, r4
    c120:	bl	68d8 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    c124:	movs	r0, #0
    c126:	pop	{r4, r5, r6, pc}

0000c128 <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
    c128:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    c12a:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    c12c:	mov.w	r3, #2147483648	; 0x80000000
    c130:	str	r3, [r2, #44]	; 0x2c
		port().PUSHR = data;
    c132:	str	r1, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    c134:	ldr	r3, [r2, #44]	; 0x2c
    c136:	cmp	r3, #0
    c138:	bge.n	c134 <SdSpiArduinoDriver::send(unsigned char)+0xc>
		return port().POPR;
    c13a:	ldr	r3, [r2, #56]	; 0x38
    c13c:	bx	lr
    c13e:	nop

0000c140 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    c140:	push	{r4, r5, lr}
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    c142:	subs	r5, r2, #1
    c144:	cmp.w	r5, #512	; 0x200
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    c148:	sub.w	sp, sp, #516	; 0x204
    c14c:	mov	r3, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    c14e:	bcc.n	c176 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    c150:	cbz	r2, c170 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
    c152:	ldr	r2, [r0, #0]
    c154:	ldr	r2, [r2, #0]
    c156:	adds	r0, r1, r3
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    c158:	mov.w	r4, #2147483648	; 0x80000000
    m_spi->transfer(buf[i]);
    c15c:	ldrb.w	r3, [r1], #1
    c160:	str	r4, [r2, #44]	; 0x2c
		port().PUSHR = data;
    c162:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    c164:	ldr	r3, [r2, #44]	; 0x2c
    c166:	cmp	r3, #0
    c168:	bge.n	c164 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x24>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    c16a:	cmp	r1, r0
		return port().POPR;
    c16c:	ldr	r3, [r2, #56]	; 0x38
    c16e:	bne.n	c15c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    c170:	add.w	sp, sp, #516	; 0x204
    c174:	pop	{r4, r5, pc}
    c176:	mov	r5, r0
    c178:	mov	r4, r2
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    memcpy(tmp, buf, count);
    c17a:	mov	r0, sp
    c17c:	bl	c198 <memcpy>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    c180:	mov	r3, r4
    c182:	mov	r2, sp
    c184:	mov	r1, sp
    c186:	ldr	r0, [r5, #0]
    c188:	bl	68d8 <SPIClass::transfer(void const*, void*, unsigned int)>
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    m_spi->transfer(buf[i]);
  }
}
    c18c:	add.w	sp, sp, #516	; 0x204
    c190:	pop	{r4, r5, pc}
    c192:	nop

0000c194 <sdCsWrite(unsigned char, bool)>:
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    c194:	b.w	cacc <digitalWrite>

0000c198 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    c198:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    c19a:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    c19e:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    c1a2:	bne.n	c280 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    c1a4:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    c1a6:	bcc.n	c22c <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    c1a8:	ldr.w	r3, [r1], #4
    c1ac:	str.w	r3, [r0], #4
    c1b0:	ldr.w	r3, [r1], #4
    c1b4:	str.w	r3, [r0], #4
    c1b8:	ldr.w	r3, [r1], #4
    c1bc:	str.w	r3, [r0], #4
    c1c0:	ldr.w	r3, [r1], #4
    c1c4:	str.w	r3, [r0], #4
    c1c8:	ldr.w	r3, [r1], #4
    c1cc:	str.w	r3, [r0], #4
    c1d0:	ldr.w	r3, [r1], #4
    c1d4:	str.w	r3, [r0], #4
    c1d8:	ldr.w	r3, [r1], #4
    c1dc:	str.w	r3, [r0], #4
    c1e0:	ldr.w	r3, [r1], #4
    c1e4:	str.w	r3, [r0], #4
    c1e8:	ldr.w	r3, [r1], #4
    c1ec:	str.w	r3, [r0], #4
    c1f0:	ldr.w	r3, [r1], #4
    c1f4:	str.w	r3, [r0], #4
    c1f8:	ldr.w	r3, [r1], #4
    c1fc:	str.w	r3, [r0], #4
    c200:	ldr.w	r3, [r1], #4
    c204:	str.w	r3, [r0], #4
    c208:	ldr.w	r3, [r1], #4
    c20c:	str.w	r3, [r0], #4
    c210:	ldr.w	r3, [r1], #4
    c214:	str.w	r3, [r0], #4
    c218:	ldr.w	r3, [r1], #4
    c21c:	str.w	r3, [r0], #4
    c220:	ldr.w	r3, [r1], #4
    c224:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    c228:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    c22a:	bcs.n	c1a8 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    c22c:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    c22e:	bcc.n	c254 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    c230:	ldr.w	r3, [r1], #4
    c234:	str.w	r3, [r0], #4
    c238:	ldr.w	r3, [r1], #4
    c23c:	str.w	r3, [r0], #4
    c240:	ldr.w	r3, [r1], #4
    c244:	str.w	r3, [r0], #4
    c248:	ldr.w	r3, [r1], #4
    c24c:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    c250:	subs	r2, #16
	bhs	.Lmid_block_loop
    c252:	bcs.n	c230 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    c254:	adds	r2, #12
	blo	.Lcopy_less_than_4
    c256:	bcc.n	c264 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    c258:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    c25c:	str.w	r3, [r0], #4
	subs	r2, #4
    c260:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    c262:	bcs.n	c258 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    c264:	adds	r2, #4
	beq	.Ldone
    c266:	beq.n	c27a <memcpy+0xe2>

	lsls	r2, r2, #31
    c268:	lsls	r2, r2, #31
	itt ne
    c26a:	itt	ne
	ldrbne  r3, [r1], #1
    c26c:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    c270:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    c274:	bcc.n	c27a <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    c276:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    c278:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    c27a:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    c27c:	bx	lr
    c27e:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    c280:	cmp	r2, #8
	blo	.Lbyte_copy
    c282:	bcc.n	c2ac <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    c284:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    c286:	beq.n	c1a4 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    c288:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    c28c:	beq.n	c1a4 <memcpy+0xc>

	rsb	r3, #4
    c28e:	rsb	r3, r3, #4
	subs	r2, r3
    c292:	subs	r2, r2, r3

	lsls    r3, r3, #31
    c294:	lsls	r3, r3, #31
	itt ne
    c296:	itt	ne
	ldrbne  r3, [r1], #1
    c298:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    c29c:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    c2a0:	bcc.n	c1a4 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    c2a2:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    c2a6:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    c2aa:	b.n	c1a4 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    c2ac:	subs	r2, #4
	blo	.Lcopy_less_than_4
    c2ae:	bcc.n	c264 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    c2b0:	subs	r2, #1
	ldrb    r3, [r1], #1
    c2b2:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    c2b6:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    c2ba:	bcs.n	c2b0 <memcpy+0x118>

	ldrb	r3, [r1]
    c2bc:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    c2be:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    c2c0:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    c2c2:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    c2c4:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    c2c6:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    c2c8:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    c2ca:	bx	lr

0000c2cc <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    c2cc:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    c2ce:	ldr	r5, [pc, #60]	; (c30c <usb_serial_getchar+0x40>)
    c2d0:	ldr	r0, [r5, #0]
    c2d2:	cbz	r0, c2f4 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    c2d4:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    c2d6:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    c2d8:	adds	r1, r0, r3
    c2da:	adds	r3, #1
	if (i >= rx_packet->len) {
    c2dc:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    c2de:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    c2e0:	bcs.n	c2e8 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    c2e2:	strh	r3, [r0, #2]
	}
	return c;
    c2e4:	mov	r0, r4
}
    c2e6:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    c2e8:	bl	cd64 <usb_free>
		rx_packet = NULL;
    c2ec:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    c2ee:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    c2f0:	str	r3, [r5, #0]
    c2f2:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    c2f4:	ldr	r3, [pc, #24]	; (c310 <usb_serial_getchar+0x44>)
    c2f6:	ldrb	r3, [r3, #0]
    c2f8:	cbz	r3, c306 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    c2fa:	movs	r0, #2
    c2fc:	bl	cdb0 <usb_rx>
    c300:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    c302:	cmp	r0, #0
    c304:	bne.n	c2d4 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    c306:	mov.w	r0, #4294967295
    c30a:	pop	{r3, r4, r5, pc}
    c30c:	.word	0x1fff1f90
    c310:	.word	0x1fff209c

0000c314 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    c314:	push	{r4, lr}
	if (!rx_packet) {
    c316:	ldr	r4, [pc, #36]	; (c33c <usb_serial_peekchar+0x28>)
    c318:	ldr	r0, [r4, #0]
    c31a:	cbz	r0, c324 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    c31c:	ldrh	r3, [r0, #2]
    c31e:	add	r0, r3
    c320:	ldrb	r0, [r0, #8]
}
    c322:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    c324:	ldr	r3, [pc, #24]	; (c340 <usb_serial_peekchar+0x2c>)
    c326:	ldrb	r3, [r3, #0]
    c328:	cbz	r3, c336 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    c32a:	movs	r0, #2
    c32c:	bl	cdb0 <usb_rx>
    c330:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    c332:	cmp	r0, #0
    c334:	bne.n	c31c <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    c336:	mov.w	r0, #4294967295
    c33a:	pop	{r4, pc}
    c33c:	.word	0x1fff1f90
    c340:	.word	0x1fff209c

0000c344 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    c344:	ldr	r3, [pc, #16]	; (c358 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    c346:	ldr	r2, [pc, #20]	; (c35c <usb_serial_available+0x18>)
    c348:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    c34a:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    c34c:	cbz	r3, c356 <usb_serial_available+0x12>
    c34e:	ldrh	r2, [r3, #0]
    c350:	ldrh	r3, [r3, #2]
    c352:	subs	r3, r2, r3
    c354:	add	r0, r3
	return count;
}
    c356:	bx	lr
    c358:	.word	0x1fff1f90
    c35c:	.word	0x1fff2118

0000c360 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    c360:	ldr	r3, [pc, #44]	; (c390 <usb_serial_flush_input+0x30>)
    c362:	ldrb	r3, [r3, #0]
    c364:	cbz	r3, c38e <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    c366:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    c368:	ldr	r4, [pc, #40]	; (c394 <usb_serial_flush_input+0x34>)
    c36a:	ldr	r0, [r4, #0]
    c36c:	cbz	r0, c382 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    c36e:	bl	cd64 <usb_free>
		rx_packet = NULL;
    c372:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    c374:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    c376:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    c378:	bl	cdb0 <usb_rx>
		if (!rx) break;
    c37c:	cbz	r0, c38c <usb_serial_flush_input+0x2c>
		usb_free(rx);
    c37e:	bl	cd64 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    c382:	movs	r0, #2
    c384:	bl	cdb0 <usb_rx>
		if (!rx) break;
    c388:	cmp	r0, #0
    c38a:	bne.n	c37e <usb_serial_flush_input+0x1e>
    c38c:	pop	{r4, pc}
    c38e:	bx	lr
    c390:	.word	0x1fff209c
    c394:	.word	0x1fff1f90

0000c398 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    c398:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    c39c:	ldr.w	r9, [pc, #248]	; c498 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    c3a0:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    c3a2:	movs	r2, #1
    c3a4:	strb.w	r2, [r9]
	while (size > 0) {
    c3a8:	str	r1, [sp, #4]
    c3aa:	cbz	r1, c408 <usb_serial_write+0x70>
    c3ac:	ldr.w	r8, [pc, #236]	; c49c <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    c3b0:	ldr	r7, [pc, #216]	; (c48c <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    c3b2:	ldr	r6, [sp, #4]
    c3b4:	mov	fp, r0
		if (!tx_packet) {
    c3b6:	ldr.w	r0, [r8]
    c3ba:	cbz	r0, c42a <usb_serial_write+0x92>
    c3bc:	ldr	r5, [pc, #208]	; (c490 <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    c3be:	ldrh	r4, [r0, #2]
    c3c0:	rsb	r1, r4, #64	; 0x40
    c3c4:	cmp	r1, r6
    c3c6:	it	cs
    c3c8:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    c3ca:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    c3ce:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    c3d0:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    c3d4:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    c3d6:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    c3d8:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    c3dc:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    c3e0:	cbz	r1, c3f8 <usb_serial_write+0x60>
    c3e2:	subs	r4, #1
    c3e4:	add	r2, r4
    c3e6:	add	r1, fp
    c3e8:	ldrb.w	r4, [fp], #1
    c3ec:	strb.w	r4, [r2, #1]!
    c3f0:	cmp	fp, r1
    c3f2:	bne.n	c3e8 <usb_serial_write+0x50>
    c3f4:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    c3f8:	cmp.w	lr, #63	; 0x3f
    c3fc:	bhi.n	c416 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    c3fe:	ldr	r2, [pc, #148]	; (c494 <usb_serial_write+0xfc>)
    c400:	movs	r1, #5
    c402:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    c404:	cmp	r6, #0
    c406:	bne.n	c3b6 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    c408:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    c40a:	movs	r3, #0
    c40c:	strb.w	r3, [r9]
	return ret;
}
    c410:	add	sp, #12
    c412:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    c416:	movs	r2, #64	; 0x40
    c418:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    c41a:	mov	r1, r0
    c41c:	movs	r0, #3
    c41e:	bl	cf20 <usb_tx>
			tx_packet = NULL;
    c422:	movs	r2, #0
    c424:	str.w	r2, [r8]
    c428:	b.n	c3fe <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    c42a:	ldrb	r2, [r7, #0]
    c42c:	cbz	r2, c47a <usb_serial_write+0xe2>
    c42e:	ldr	r5, [pc, #96]	; (c490 <usb_serial_write+0xf8>)
    c430:	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    c434:	mov.w	sl, #1
    c438:	b.n	c44a <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    c43a:	subs	r4, #1
    c43c:	beq.n	c46c <usb_serial_write+0xd4>
    c43e:	ldrb	r2, [r5, #0]
    c440:	cbnz	r2, c46c <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    c442:	bl	dab4 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    c446:	ldrb	r2, [r7, #0]
    c448:	cbz	r2, c47a <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    c44a:	movs	r0, #3
    c44c:	bl	cdec <usb_tx_packet_count>
    c450:	cmp	r0, #7
    c452:	bhi.n	c43a <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    c454:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    c458:	bl	cd24 <usb_malloc>
    c45c:	str.w	r0, [r8]
					if (tx_packet) break;
    c460:	cmp	r0, #0
    c462:	bne.n	c3be <usb_serial_write+0x26>
					tx_noautoflush = 0;
    c464:	ldr	r3, [pc, #48]	; (c498 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    c466:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    c468:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    c46a:	bne.n	c43e <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    c46c:	movs	r3, #1
					return -1;
    c46e:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    c472:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    c474:	add	sp, #12
    c476:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    c47a:	movs	r3, #0
					return -1;
    c47c:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    c480:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    c484:	add	sp, #12
    c486:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c48a:	nop
    c48c:	.word	0x1fff209c
    c490:	.word	0x1fff1f8c
    c494:	.word	0x1fff1f84
    c498:	.word	0x1fff1f85
    c49c:	.word	0x1fff1f88

0000c4a0 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    c4a0:	push	{lr}
    c4a2:	sub	sp, #12
    c4a4:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    c4a6:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    c4a8:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    c4ac:	mov	r0, r3
    c4ae:	bl	c398 <usb_serial_write>
}
    c4b2:	add	sp, #12
    c4b4:	ldr.w	pc, [sp], #4

0000c4b8 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    c4b8:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    c4ba:	ldr	r5, [pc, #56]	; (c4f4 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    c4bc:	ldr	r4, [pc, #56]	; (c4f8 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    c4be:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    c4c0:	movs	r3, #1
    c4c2:	strb	r3, [r4, #0]
	if (!tx_packet) {
    c4c4:	cbz	r0, c4d2 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    c4c6:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    c4c8:	movs	r3, #0
    c4ca:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    c4cc:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    c4d0:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    c4d2:	ldr	r3, [pc, #40]	; (c4fc <usb_serial_write_buffer_free+0x44>)
    c4d4:	ldrb	r3, [r3, #0]
    c4d6:	cbnz	r3, c4de <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    c4d8:	movs	r0, #0
    c4da:	strb	r0, [r4, #0]
			return 0;
    c4dc:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    c4de:	movs	r0, #3
    c4e0:	bl	cdec <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    c4e4:	cmp	r0, #7
    c4e6:	bhi.n	c4d8 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    c4e8:	bl	cd24 <usb_malloc>
    c4ec:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    c4ee:	cmp	r0, #0
    c4f0:	bne.n	c4c6 <usb_serial_write_buffer_free+0xe>
    c4f2:	b.n	c4d8 <usb_serial_write_buffer_free+0x20>
    c4f4:	.word	0x1fff1f88
    c4f8:	.word	0x1fff1f85
    c4fc:	.word	0x1fff209c

0000c500 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    c500:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    c502:	ldr	r3, [pc, #68]	; (c548 <usb_serial_flush_output+0x48>)
    c504:	ldrb	r3, [r3, #0]
    c506:	cbz	r3, c52c <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    c508:	ldr	r6, [pc, #64]	; (c54c <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    c50a:	ldr	r5, [pc, #68]	; (c550 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    c50c:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    c50e:	movs	r7, #1
    c510:	strb	r7, [r5, #0]
	if (tx_packet) {
    c512:	cbz	r4, c52e <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    c514:	ldr	r2, [pc, #60]	; (c554 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    c516:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    c518:	movs	r7, #0
    c51a:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    c51c:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    c51e:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    c520:	movs	r0, #3
    c522:	bl	cf20 <usb_tx>
		tx_packet = NULL;
    c526:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    c528:	movs	r3, #0
    c52a:	strb	r3, [r5, #0]
    c52c:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    c52e:	bl	cd24 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    c532:	ldr	r3, [pc, #32]	; (c554 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    c534:	cbz	r0, c542 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    c536:	mov	r1, r0
    c538:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    c53a:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    c53c:	bl	cf20 <usb_tx>
    c540:	b.n	c528 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    c542:	strb	r7, [r3, #0]
    c544:	b.n	c528 <usb_serial_flush_output+0x28>
    c546:	nop
    c548:	.word	0x1fff209c
    c54c:	.word	0x1fff1f88
    c550:	.word	0x1fff1f85
    c554:	.word	0x1fff1f84

0000c558 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    c558:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    c55a:	ldr	r3, [pc, #56]	; (c594 <usb_serial_flush_callback+0x3c>)
    c55c:	ldrb	r3, [r3, #0]
    c55e:	cbnz	r3, c57e <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    c560:	ldr	r4, [pc, #52]	; (c598 <usb_serial_flush_callback+0x40>)
    c562:	ldr	r1, [r4, #0]
    c564:	cbz	r1, c580 <usb_serial_flush_callback+0x28>
    c566:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    c56a:	ldrh	r3, [r1, #2]
    c56c:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    c56e:	movs	r0, #3
    c570:	bl	cf20 <usb_tx>
		tx_packet = NULL;
    c574:	str	r5, [r4, #0]
    c576:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    c578:	ldr	r3, [pc, #32]	; (c59c <usb_serial_flush_callback+0x44>)
    c57a:	movs	r2, #1
    c57c:	strb	r2, [r3, #0]
    c57e:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    c580:	bl	cd24 <usb_malloc>
		if (tx) {
    c584:	cmp	r0, #0
    c586:	beq.n	c578 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    c588:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    c58a:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    c58e:	movs	r0, #3
    c590:	b.w	cf20 <usb_tx>
    c594:	.word	0x1fff1f85
    c598:	.word	0x1fff1f88
    c59c:	.word	0x1fff1f84

0000c5a0 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    c5a0:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    c5a2:	ldr	r4, [pc, #64]	; (c5e4 <fault_isr+0x44>)
    c5a4:	b.n	c5b8 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    c5a6:	ldr	r3, [r4, #0]
    c5a8:	lsls	r1, r3, #21
    c5aa:	bmi.n	c5c8 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    c5ac:	ldr	r3, [r4, #0]
    c5ae:	lsls	r2, r3, #20
    c5b0:	bmi.n	c5d2 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    c5b2:	ldr	r3, [r4, #0]
    c5b4:	lsls	r3, r3, #19
    c5b6:	bmi.n	c5dc <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    c5b8:	ldr	r3, [r4, #0]
    c5ba:	lsls	r0, r3, #13
    c5bc:	bpl.n	c5a6 <fault_isr+0x6>
    c5be:	bl	cfa4 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    c5c2:	ldr	r3, [r4, #0]
    c5c4:	lsls	r1, r3, #21
    c5c6:	bpl.n	c5ac <fault_isr+0xc>
    c5c8:	bl	c5e8 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    c5cc:	ldr	r3, [r4, #0]
    c5ce:	lsls	r2, r3, #20
    c5d0:	bpl.n	c5b2 <fault_isr+0x12>
    c5d2:	bl	c5e8 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    c5d6:	ldr	r3, [r4, #0]
    c5d8:	lsls	r3, r3, #19
    c5da:	bpl.n	c5b8 <fault_isr+0x18>
    c5dc:	bl	c5e8 <unused_isr>
    c5e0:	b.n	c5b8 <fault_isr+0x18>
    c5e2:	nop
    c5e4:	.word	0x40048034

0000c5e8 <unused_isr>:
	}
}

void unused_isr(void)
{
    c5e8:	push	{r3, lr}
	fault_isr();
    c5ea:	bl	c5a0 <fault_isr>
    c5ee:	nop

0000c5f0 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    c5f0:	ldr	r3, [pc, #4]	; (c5f8 <startup_early_hook+0x8>)
    c5f2:	movs	r2, #16
    c5f4:	strh	r2, [r3, #0]
    c5f6:	bx	lr
    c5f8:	.word	0x40052000

0000c5fc <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    c5fc:	bx	lr
    c5fe:	nop

0000c600 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    c600:	ldr	r1, [pc, #36]	; (c628 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    c602:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    c604:	ldr	r3, [r1, #0]
	if (incr != 0) {
    c606:	cbz	r0, c616 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    c608:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    c60a:	add	r0, r3
    c60c:	sub.w	r2, r2, #8192	; 0x2000
    c610:	cmp	r0, r2
    c612:	bcs.n	c61a <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    c614:	str	r0, [r1, #0]
	}
	return prev;
    c616:	mov	r0, r3
}
    c618:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    c61a:	bl	eb44 <__errno>
    c61e:	movs	r3, #12
    c620:	str	r3, [r0, #0]
			return (void *)-1;
    c622:	mov.w	r0, #4294967295
    c626:	pop	{r3, pc}
    c628:	.word	0x1fff09c4

0000c62c <__cxa_pure_virtual>:
	while (1);
}

__attribute__((weak)) 
void __cxa_pure_virtual()
{
    c62c:	b.n	c62c <__cxa_pure_virtual>
    c62e:	nop

0000c630 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    c630:	cpsid	i
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    c632:	ldr	r2, [pc, #96]	; (c694 <usb_init_serialnumber+0x64>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    c634:	ldr	r3, [pc, #96]	; (c698 <usb_init_serialnumber+0x68>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    c636:	ldr	r1, [pc, #100]	; (c69c <usb_init_serialnumber+0x6c>)
    c638:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    c63a:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    c63c:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    c63e:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    c640:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    c642:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    c644:	ldrb	r3, [r2, #0]
    c646:	lsls	r3, r3, #24
    c648:	bpl.n	c644 <usb_init_serialnumber+0x14>
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    c64a:	push	{r4, lr}
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    c64c:	ldr	r3, [pc, #80]	; (c6a0 <usb_init_serialnumber+0x70>)
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    c64e:	sub	sp, #16
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    c650:	ldr	r0, [r3, #0]
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    c652:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    c654:	ldr	r3, [pc, #76]	; (c6a4 <usb_init_serialnumber+0x74>)
    c656:	ldr	r4, [pc, #80]	; (c6a8 <usb_init_serialnumber+0x78>)
    c658:	cmp	r0, r3
    c65a:	it	ls
    c65c:	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    c660:	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    c662:	it	ls
    c664:	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    c666:	movs	r2, #10
    c668:	bl	c6ac <ultoa>
    c66c:	add	r1, sp, #4
    c66e:	mov	r0, r4
	for (i=0; i<10; i++) {
    c670:	movs	r3, #0
		char c = buf[i];
    c672:	ldrb.w	r2, [r1], #1
    c676:	adds	r3, #1
		if (!c) break;
    c678:	cbz	r2, c68a <usb_init_serialnumber+0x5a>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    c67a:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    c67c:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    c680:	bne.n	c672 <usb_init_serialnumber+0x42>
    c682:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    c684:	strb	r3, [r4, #0]
}
    c686:	add	sp, #16
    c688:	pop	{r4, pc}
    c68a:	lsls	r3, r3, #1
    c68c:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    c68e:	strb	r3, [r4, #0]
}
    c690:	add	sp, #16
    c692:	pop	{r4, pc}
    c694:	.word	0x40020004
    c698:	.word	0x40020000
    c69c:	.word	0x41070000
    c6a0:	.word	0x4002000c
    c6a4:	.word	0x0098967f
    c6a8:	.word	0x1fff0a9c

0000c6ac <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    c6ac:	push	{r4, r5, r6, r7}
    c6ae:	subs	r5, r1, #1
    c6b0:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    c6b2:	movs	r4, #0
    c6b4:	b.n	c6b8 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    c6b6:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    c6b8:	udiv	r3, r0, r2
    c6bc:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c6c0:	cmp	r0, #9
    c6c2:	add.w	r7, r0, #48	; 0x30
    c6c6:	itet	hi
    c6c8:	addhi	r0, #55	; 0x37
    c6ca:	uxtbls	r0, r7
    c6cc:	uxtbhi	r0, r0
    c6ce:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    c6d2:	mov	r0, r3
    c6d4:	cmp	r3, #0
    c6d6:	bne.n	c6b6 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    c6d8:	adds	r2, r1, r4
    c6da:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    c6dc:	cbz	r4, c6f2 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    c6de:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    c6e0:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    c6e4:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    c6e6:	adds	r3, #1
    c6e8:	subs	r0, r4, r3
    c6ea:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    c6ec:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    c6f0:	blt.n	c6de <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    c6f2:	mov	r0, r1
    c6f4:	pop	{r4, r5, r6, r7}
    c6f6:	bx	lr

0000c6f8 <dtostrf>:
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
    c6f8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c6fc:	vpush	{d8}
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    c700:	vcmp.f32	s0, s0
{
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
    c704:	eor.w	r3, r0, r0, asr #31
	if (isnanf(val)) {
    c708:	vmrs	APSR_nzcv, fpscr
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
    c70c:	sub	sp, #16
    c70e:	vmov.f32	s16, s0
    c712:	mov	r5, r0
    c714:	mov	r4, r2
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
    c716:	sub.w	r3, r3, r0, asr #31
	if (isnanf(val)) {
    c71a:	bvs.w	c978 <dtostrf+0x280>
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
    c71e:	vldr	s15, [pc, #800]	; ca40 <dtostrf+0x348>
    c722:	vabs.f32	s14, s0
    c726:	vcmp.f32	s14, s15
    c72a:	vmrs	APSR_nzcv, fpscr
    c72e:	ble.n	c7b6 <dtostrf+0xbe>
		int ndigs = (val<0) ? 4 : 3;
    c730:	vcmpe.f32	s0, #0.0
    c734:	vmrs	APSR_nzcv, fpscr
    c738:	ite	mi
    c73a:	movmi	r0, #4
    c73c:	movpl	r0, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    c73e:	cmp	r0, r3
    c740:	blt.n	c786 <dtostrf+0x8e>
		if (width<0) {
    c742:	cmp	r5, #0
    c744:	blt.w	ca2e <dtostrf+0x336>
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    c748:	movs	r0, #0
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    c74a:	vcmpe.f32	s16, #0.0
    c74e:	vmrs	APSR_nzcv, fpscr
    c752:	it	mi
    c754:	movmi	r3, r4
    c756:	bmi.n	c7ae <dtostrf+0xb6>
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    c758:	movs	r1, #73	; 0x49
    c75a:	movs	r2, #78	; 0x4e
    c75c:	movs	r3, #70	; 0x46
    c75e:	strb	r1, [r4, #0]
    c760:	strb	r2, [r4, #1]
    c762:	strb	r3, [r4, #2]
    c764:	adds	r4, #3
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
    c766:	cmp	r0, #0
    c768:	beq.w	ca36 <dtostrf+0x33e>
    c76c:	add	r0, r4
			*buf++ = ' ';
    c76e:	movs	r3, #32
    c770:	strb.w	r3, [r4], #1
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
    c774:	cmp	r0, r4
    c776:	bne.n	c770 <dtostrf+0x78>
			*buf++ = ' ';
			awidth--;
		}
		*buf = 0;
    c778:	movs	r3, #0
    c77a:	strb	r3, [r0, #0]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    c77c:	add	sp, #16
    c77e:	vpop	{d8}
    c782:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    c786:	cmp	r5, #0
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    c788:	sub.w	r0, r3, r0
		if (width<0) {
    c78c:	bge.n	c74a <dtostrf+0x52>
			while (awidth) {
    c78e:	cmp	r0, #0
    c790:	beq.w	ca2e <dtostrf+0x336>
    c794:	adds	r3, r2, r0
				*buf++ = ' ';
    c796:	movs	r2, #32
    c798:	strb.w	r2, [r4], #1
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
			while (awidth) {
    c79c:	cmp	r4, r3
    c79e:	bne.n	c798 <dtostrf+0xa0>
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    c7a0:	vcmpe.f32	s16, #0.0
    c7a4:	vmrs	APSR_nzcv, fpscr
    c7a8:	bpl.w	c9e4 <dtostrf+0x2ec>
    c7ac:	movs	r0, #0
    c7ae:	movs	r2, #45	; 0x2d
    c7b0:	strb	r2, [r3, #0]
    c7b2:	adds	r4, r3, #1
    c7b4:	b.n	c758 <dtostrf+0x60>
    c7b6:	mov	r7, r1
		}
		*buf = 0;
		return buf;
	}

	s = fcvtf(val, precision, &decpt, &sign);
    c7b8:	add	r2, sp, #8
    c7ba:	add	r1, sp, #4
    c7bc:	mov	r0, r7
    c7be:	bl	eb20 <fcvtf>
    c7c2:	mov	sl, r7
    c7c4:	mov	r8, r0

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
    c7c6:	ldr.w	r9, [sp, #4]
    c7ca:	cmp	r7, #0
    c7cc:	beq.n	c882 <dtostrf+0x18a>
    c7ce:	rsb	r3, r9, #0
		s = (*s < '5') ? "0" : "1";
		decpt++;
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
    c7d2:	cmp	r3, r7
    c7d4:	bgt.w	c904 <dtostrf+0x20c>
    c7d8:	mov	r0, r8
    c7da:	bl	f940 <strlen>
    c7de:	mov	r6, r0
	}

	reqd = strlen(s);

	// add 1 for decimal point
	if (reqd > decpt) reqd++;
    c7e0:	cmp	r9, r6
    c7e2:	it	lt
    c7e4:	addlt	r6, #1

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;
    c7e6:	cmp.w	r9, #0
    c7ea:	bne.w	c922 <dtostrf+0x22a>
    c7ee:	adds	r6, #1
			if (newDecimalPoint - decpt == precision + 1) decpt++;
		}
	}

	// add 1 for sign if negative
	if (sign) reqd++;
    c7f0:	ldr.w	lr, [sp, #8]
    c7f4:	cmp.w	lr, #0
    c7f8:	beq.n	c8a6 <dtostrf+0x1ae>
    c7fa:	adds	r6, #1

	p = buf;
	e = p + reqd;
	pad = width - reqd;
    c7fc:	subs	r0, r5, r6
	if (pad > 0) {
    c7fe:	cmp	r0, #0

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
	e = p + reqd;
    c800:	add.w	r1, r4, r6
	pad = width - reqd;
	if (pad > 0) {
    c804:	bgt.n	c8b2 <dtostrf+0x1ba>
	}

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
    c806:	mov	r3, r4
	pad = width - reqd;
	if (pad > 0) {
		e += pad;
		while (pad-- > 0) *p++ = ' ';
	}
	if (sign) *p++ = '-';
    c808:	movs	r2, #45	; 0x2d
    c80a:	strb	r2, [r3, #0]
    c80c:	adds	r3, #1
	if (decpt == 0 && precision > 0) {
    c80e:	cmp.w	r9, #0
    c812:	bne.n	c8e0 <dtostrf+0x1e8>
    c814:	cbz	r7, c824 <dtostrf+0x12c>
		*p++ = '0';
    c816:	mov	r2, r3
    c818:	movs	r0, #48	; 0x30
    c81a:	strb.w	r0, [r2], #2
		*p++ = '.';
    c81e:	movs	r0, #46	; 0x2e
    c820:	strb	r0, [r3, #1]
    c822:	mov	r3, r2
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    c824:	cmp	r3, r1
    c826:	bcs.n	c86a <dtostrf+0x172>
		*p++ = *s++;
    c828:	adds	r7, r3, #1
    c82a:	ldrb.w	r2, [r8]
    c82e:	strb	r2, [r3, #0]
		if (p == e) break;
    c830:	cmp	r7, r1
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
		*p++ = *s++;
    c832:	add.w	r8, r8, #1
		if (p == e) break;
    c836:	beq.n	c86c <dtostrf+0x174>
    c838:	ldr	r2, [sp, #4]
		if (--decpt == 0) *p++ = '.';
    c83a:	mov.w	lr, #46	; 0x2e
    c83e:	b.n	c858 <dtostrf+0x160>
    c840:	strb.w	lr, [r3, #1]
    c844:	adds	r3, #2
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    c846:	cmp	r3, r1
		*p++ = *s++;
    c848:	add.w	r7, r3, #1
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    c84c:	bcs.n	c86a <dtostrf+0x172>
		*p++ = *s++;
    c84e:	ldrb.w	r0, [r8], #1
    c852:	strb	r0, [r3, #0]
		if (p == e) break;
    c854:	cmp	r7, r1
    c856:	beq.n	c86c <dtostrf+0x174>
		if (--decpt == 0) *p++ = '.';
    c858:	subs	r2, #1
    c85a:	str	r2, [sp, #4]
    c85c:	cmp	r2, #0
    c85e:	beq.n	c840 <dtostrf+0x148>
    c860:	mov	r3, r7
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    c862:	cmp	r3, r1
		*p++ = *s++;
    c864:	add.w	r7, r3, #1
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    c868:	bcc.n	c84e <dtostrf+0x156>
    c86a:	mov	r1, r3
		*p++ = *s++;
		if (p == e) break;
		if (--decpt == 0) *p++ = '.';
	}
	if (width < 0) {
    c86c:	cmp	r5, #0
    c86e:	blt.w	c9b8 <dtostrf+0x2c0>
		pad = (reqd + width) * -1;
		while (pad-- > 0) *p++ = ' ';
	}
	*p = 0;
    c872:	movs	r3, #0

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
    c874:	mov	r0, r4
	}
	if (width < 0) {
		pad = (reqd + width) * -1;
		while (pad-- > 0) *p++ = ' ';
	}
	*p = 0;
    c876:	strb	r3, [r1, #0]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    c878:	add	sp, #16
    c87a:	vpop	{d8}
    c87e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	s = fcvtf(val, precision, &decpt, &sign);

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
    c882:	cmp.w	r9, #0
    c886:	bne.n	c7ce <dtostrf+0xd6>
		// round and move decimal point
		s = (*s < '5') ? "0" : "1";
    c888:	ldrb.w	r8, [r0]
    c88c:	ldr	r1, [pc, #436]	; (ca44 <dtostrf+0x34c>)
    c88e:	ldr	r2, [pc, #440]	; (ca48 <dtostrf+0x350>)
		decpt++;
    c890:	movs	r3, #1
    c892:	str	r3, [sp, #4]
    c894:	mov	r9, r3
	s = fcvtf(val, precision, &decpt, &sign);

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
		// round and move decimal point
		s = (*s < '5') ? "0" : "1";
    c896:	cmp.w	r8, #52	; 0x34
    c89a:	ite	hi
    c89c:	movhi	r8, r1
    c89e:	movls	r8, r2
		decpt++;
    c8a0:	mov.w	r3, #4294967295
    c8a4:	b.n	c7d2 <dtostrf+0xda>
	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
	e = p + reqd;
	pad = width - reqd;
    c8a6:	subs	r0, r5, r6
	if (pad > 0) {
    c8a8:	cmp	r0, #0

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
	e = p + reqd;
    c8aa:	add.w	r1, r4, r6
	pad = width - reqd;
	if (pad > 0) {
    c8ae:	ble.w	ca3a <dtostrf+0x342>
		e += pad;
    c8b2:	add	r1, r0
		decpt++;
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
    c8b4:	mov	r2, r4
	p = buf;
	e = p + reqd;
	pad = width - reqd;
	if (pad > 0) {
		e += pad;
		while (pad-- > 0) *p++ = ' ';
    c8b6:	subs	r0, #1
    c8b8:	mov.w	ip, #32
    c8bc:	strb.w	ip, [r2], #1
    c8c0:	rsb	r3, r2, #1
    c8c4:	add	r3, r0
    c8c6:	add	r3, r4
    c8c8:	cmp	r3, #0
    c8ca:	bgt.n	c8bc <dtostrf+0x1c4>
    c8cc:	bic.w	r3, r0, r0, asr #31
    c8d0:	adds	r3, #1
    c8d2:	add	r3, r4
	}
	if (sign) *p++ = '-';
    c8d4:	cmp.w	lr, #0
    c8d8:	bne.n	c808 <dtostrf+0x110>
	if (decpt == 0 && precision > 0) {
    c8da:	cmp.w	r9, #0
    c8de:	beq.n	c814 <dtostrf+0x11c>
		*p++ = '0';
		*p++ = '.';
	}
	else if (decpt < 0 && precision > 0) {
    c8e0:	bge.n	c824 <dtostrf+0x12c>
    c8e2:	cmp	r7, #0
    c8e4:	beq.n	c824 <dtostrf+0x12c>
		*p++ = '0';
    c8e6:	mov	r2, r3
    c8e8:	movs	r0, #48	; 0x30
    c8ea:	strb.w	r0, [r2], #2
		*p++ = '.';
    c8ee:	movs	r7, #46	; 0x2e
    c8f0:	strb	r7, [r3, #1]
    c8f2:	rsb	r3, r9, r2
		// print leading zeros
		while ( decpt < 0 ) {
			decpt++;
			*p++ = '0';
    c8f6:	strb.w	r0, [r2], #1
	}
	else if (decpt < 0 && precision > 0) {
		*p++ = '0';
		*p++ = '.';
		// print leading zeros
		while ( decpt < 0 ) {
    c8fa:	cmp	r3, r2
    c8fc:	bne.n	c8f6 <dtostrf+0x1fe>
    c8fe:	movs	r2, #0
    c900:	str	r2, [sp, #4]
    c902:	b.n	c824 <dtostrf+0x12c>
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
		decpt = -precision;
    c904:	rsb	r9, r7, #0
    c908:	movs	r6, #1
	}

	reqd = strlen(s);

	// add 1 for decimal point
	if (reqd > decpt) reqd++;
    c90a:	cmp	r9, r6
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
		decpt = -precision;
    c90c:	mov	r0, r6
	}

	reqd = strlen(s);

	// add 1 for decimal point
	if (reqd > decpt) reqd++;
    c90e:	it	lt
    c910:	addlt	r6, #1

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;
    c912:	cmp.w	r9, #0
		decpt++;
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
    c916:	ldr.w	r8, [pc, #304]	; ca48 <dtostrf+0x350>
		decpt = -precision;
    c91a:	str.w	r9, [sp, #4]

	// add 1 for decimal point
	if (reqd > decpt) reqd++;

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;
    c91e:	beq.w	c7ee <dtostrf+0xf6>

	// if leading zeros after decimal point
	if (decpt < 0 && precision > 0) {
    c922:	bge.w	c7f0 <dtostrf+0xf8>
    c926:	cmp	r7, #0
    c928:	beq.w	c7f0 <dtostrf+0xf8>
		// ensure enough trailing zeros, add 2 for '0.'
		reqd = precision + 2;

		if (strlen(s) > precision + decpt) {
    c92c:	add.w	r3, r9, r7
    c930:	cmp	r0, r3
	if (decpt == 0) reqd++;

	// if leading zeros after decimal point
	if (decpt < 0 && precision > 0) {
		// ensure enough trailing zeros, add 2 for '0.'
		reqd = precision + 2;
    c932:	add.w	r6, r7, #2

		if (strlen(s) > precision + decpt) {
    c936:	bls.w	c7f0 <dtostrf+0xf8>

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
    c93a:	cmp	r7, #0
    c93c:	ble.n	c94c <dtostrf+0x254>
				val *= 10.0;
    c93e:	vmov.f32	s15, #36	; 0x41200000  10.0

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
    c942:	subs.w	sl, sl, #1
				val *= 10.0;
    c946:	vmul.f32	s16, s16, s15

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
    c94a:	bne.n	c942 <dtostrf+0x24a>
				val *= 10.0;
				newPrecision--;
			}

			// round after accounting for leading 0's
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    c94c:	add	r2, sp, #8
    c94e:	mov	r0, sl
    c950:	vmov.f32	s0, s16
    c954:	add	r1, sp, #12
    c956:	bl	eb20 <fcvtf>

			// if rounded up to new digit (e.g. 0.09 to 0.1), move decimal point
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    c95a:	ldr.w	r9, [sp, #4]
    c95e:	ldr	r2, [sp, #12]
    c960:	adds	r3, r7, #1
    c962:	rsb	r2, r9, r2
    c966:	cmp	r2, r3
    c968:	it	eq
    c96a:	addeq.w	r9, r9, #1
				val *= 10.0;
				newPrecision--;
			}

			// round after accounting for leading 0's
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    c96e:	mov	r8, r0

			// if rounded up to new digit (e.g. 0.09 to 0.1), move decimal point
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    c970:	it	eq
    c972:	streq.w	r9, [sp, #4]
    c976:	b.n	c7f0 <dtostrf+0xf8>
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
    c978:	vcmpe.f32	s0, #0.0
    c97c:	vmrs	APSR_nzcv, fpscr
    c980:	ite	mi
    c982:	movmi	r0, #4
    c984:	movpl	r0, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    c986:	cmp	r0, r3
    c988:	bge.n	c9f4 <dtostrf+0x2fc>
		if (width<0) {
    c98a:	cmp	r5, #0
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    c98c:	sub.w	r3, r3, r0
		if (width<0) {
    c990:	blt.n	ca06 <dtostrf+0x30e>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    c992:	vmov	r2, s16
    c996:	cmp	r2, #0
    c998:	blt.n	c9fc <dtostrf+0x304>
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    c99a:	movs	r2, #78	; 0x4e
    c99c:	movs	r1, #65	; 0x41
    c99e:	strb	r2, [r4, #0]
    c9a0:	strb	r2, [r4, #2]
    c9a2:	strb	r1, [r4, #1]
    c9a4:	adds	r4, #3
		} else {
			*buf++ = 'n';  *buf++ = 'a';  *buf++ = 'n';
		}
		while (awidth) {
    c9a6:	cmp	r3, #0
    c9a8:	beq.n	ca36 <dtostrf+0x33e>
    c9aa:	adds	r0, r4, r3
			*buf++ = ' ';
    c9ac:	movs	r3, #32
    c9ae:	strb.w	r3, [r4], #1
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
		} else {
			*buf++ = 'n';  *buf++ = 'a';  *buf++ = 'n';
		}
		while (awidth) {
    c9b2:	cmp	r4, r0
    c9b4:	bne.n	c9ae <dtostrf+0x2b6>
    c9b6:	b.n	c778 <dtostrf+0x80>
		*p++ = *s++;
		if (p == e) break;
		if (--decpt == 0) *p++ = '.';
	}
	if (width < 0) {
		pad = (reqd + width) * -1;
    c9b8:	adds	r0, r5, r6
		while (pad-- > 0) *p++ = ' ';
    c9ba:	negs	r3, r0
    c9bc:	cmp	r3, #0
    c9be:	mvn.w	r0, r0
    c9c2:	ble.w	c872 <dtostrf+0x17a>
    c9c6:	mov	r2, r1
    c9c8:	movs	r5, #32
    c9ca:	strb.w	r5, [r2], #1
    c9ce:	rsb	r3, r2, #1
    c9d2:	add	r3, r0
    c9d4:	add	r3, r1
    c9d6:	cmp	r3, #0
    c9d8:	bgt.n	c9ca <dtostrf+0x2d2>
    c9da:	bic.w	r3, r0, r0, asr #31
    c9de:	adds	r3, #1
    c9e0:	add	r1, r3
    c9e2:	b.n	c872 <dtostrf+0x17a>
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    c9e4:	movs	r0, #73	; 0x49
    c9e6:	movs	r1, #78	; 0x4e
    c9e8:	movs	r2, #70	; 0x46
    c9ea:	strb	r0, [r3, #0]
    c9ec:	strb	r1, [r3, #1]
    c9ee:	strb	r2, [r3, #2]
    c9f0:	adds	r0, r3, #3
    c9f2:	b.n	c778 <dtostrf+0x80>

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    c9f4:	cmp	r5, #0
    c9f6:	blt.n	ca2a <dtostrf+0x332>
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    c9f8:	movs	r3, #0
    c9fa:	b.n	c992 <dtostrf+0x29a>
    c9fc:	mov	r0, r4
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    c9fe:	movs	r2, #45	; 0x2d
    ca00:	strb	r2, [r0, #0]
    ca02:	adds	r4, r0, #1
    ca04:	b.n	c99a <dtostrf+0x2a2>
	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
			while (awidth) {
    ca06:	cbz	r3, ca2a <dtostrf+0x332>
    ca08:	adds	r0, r2, r3
				*buf++ = ' ';
    ca0a:	movs	r3, #32
    ca0c:	strb.w	r3, [r4], #1
	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
			while (awidth) {
    ca10:	cmp	r4, r0
    ca12:	bne.n	ca0c <dtostrf+0x314>
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    ca14:	vmov	r3, s16
    ca18:	cmp	r3, #0
    ca1a:	blt.n	ca32 <dtostrf+0x33a>
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    ca1c:	movs	r3, #78	; 0x4e
    ca1e:	movs	r2, #65	; 0x41
    ca20:	strb	r3, [r0, #0]
    ca22:	strb	r3, [r0, #2]
    ca24:	strb	r2, [r0, #1]
    ca26:	adds	r0, #3
    ca28:	b.n	c778 <dtostrf+0x80>

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    ca2a:	mov	r0, r4
    ca2c:	b.n	ca14 <dtostrf+0x31c>
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    ca2e:	mov	r3, r4
    ca30:	b.n	c7a0 <dtostrf+0xa8>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    ca32:	movs	r3, #0
    ca34:	b.n	c9fe <dtostrf+0x306>
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    ca36:	mov	r0, r4
    ca38:	b.n	c778 <dtostrf+0x80>
	}

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
    ca3a:	mov	r3, r4
    ca3c:	b.n	c80e <dtostrf+0x116>
    ca3e:	nop
    ca40:	.word	0x7f7fffff
    ca44:	.word	0x000132f8
    ca48:	.word	0x000132f4

0000ca4c <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    ca4c:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    ca4e:	ldr	r3, [pc, #68]	; (ca94 <digitalWrite.part.1+0x48>)
    ca50:	ldr.w	r2, [r3, r0, lsl #3]
    ca54:	ldrb.w	r4, [r2, #640]	; 0x280
    ca58:	cbz	r4, ca68 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    ca5a:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    ca5c:	cbz	r1, ca7e <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    ca5e:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    ca62:	ldr.w	r4, [sp], #4
    ca66:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    ca68:	add.w	r3, r3, r0, lsl #3
    ca6c:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    ca6e:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    ca70:	cbnz	r1, ca88 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    ca72:	bic.w	r2, r2, #2
    ca76:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    ca78:	ldr.w	r4, [sp], #4
    ca7c:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    ca7e:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    ca82:	ldr.w	r4, [sp], #4
    ca86:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    ca88:	orr.w	r2, r2, #3
    ca8c:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    ca8e:	ldr.w	r4, [sp], #4
    ca92:	bx	lr
    ca94:	.word	0x000132fc

0000ca98 <attachInterruptVector>:
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    ca98:	adds	r0, #16
    ca9a:	ldr	r3, [pc, #8]	; (caa4 <attachInterruptVector+0xc>)
    ca9c:	str.w	r1, [r3, r0, lsl #2]
    caa0:	bx	lr
    caa2:	nop
    caa4:	.word	0x1fff0200

0000caa8 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    caa8:	push	{r4, r5}
	RTC_SR = 0;
    caaa:	ldr	r3, [pc, #20]	; (cac0 <rtc_set+0x18>)
	RTC_TPR = 0;
    caac:	ldr	r5, [pc, #20]	; (cac4 <rtc_set+0x1c>)
	RTC_TSR = t;
    caae:	ldr	r4, [pc, #24]	; (cac8 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    cab0:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    cab2:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    cab4:	str	r2, [r3, #0]
	RTC_TPR = 0;
    cab6:	str	r2, [r5, #0]
	RTC_TSR = t;
    cab8:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    caba:	str	r1, [r3, #0]
}
    cabc:	pop	{r4, r5}
    cabe:	bx	lr
    cac0:	.word	0x4003d014
    cac4:	.word	0x4003d004
    cac8:	.word	0x4003d000

0000cacc <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    cacc:	cmp	r0, #63	; 0x3f
    cace:	bhi.n	cad4 <digitalWrite+0x8>
    cad0:	b.w	ca4c <digitalWrite.part.1>
    cad4:	bx	lr
    cad6:	nop

0000cad8 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    cad8:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    cada:	ldr	r1, [pc, #48]	; (cb0c <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    cadc:	ldr	r3, [pc, #48]	; (cb10 <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    cade:	ldr	r2, [pc, #52]	; (cb14 <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    cae0:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    cae2:	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    cae4:	ldr	r2, [r2, #0]
	__enable_irq();
    cae6:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    cae8:	lsls	r2, r2, #5
    caea:	bpl.n	caf2 <micros+0x1a>
    caec:	cmp	r3, #50	; 0x32
    caee:	it	hi
    caf0:	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    caf2:	ldr	r1, [pc, #36]	; (cb18 <micros+0x40>)
    caf4:	rsb	r3, r3, #95744	; 0x17600
    caf8:	mov.w	r2, #1000	; 0x3e8
    cafc:	adds	r3, #255	; 0xff
    cafe:	umull	r1, r3, r1, r3
    cb02:	mul.w	r0, r2, r0
}
    cb06:	add.w	r0, r0, r3, lsr #6
    cb0a:	bx	lr
    cb0c:	.word	0x1fff1f98
    cb10:	.word	0xe000e018
    cb14:	.word	0xe000ed04
    cb18:	.word	0xaaaaaaab

0000cb1c <delay>:

void delay(uint32_t ms)
{
    cb1c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cb20:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    cb22:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    cb24:	ldr	r7, [pc, #128]	; (cba8 <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    cb26:	ldr	r3, [pc, #132]	; (cbac <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    cb28:	ldr	r2, [pc, #132]	; (cbb0 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    cb2a:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    cb2c:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    cb2e:	ldr	r2, [r2, #0]
	__enable_irq();
    cb30:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    cb32:	lsls	r2, r2, #5
    cb34:	bpl.n	cb3c <delay+0x20>
    cb36:	cmp	r3, #50	; 0x32
    cb38:	it	hi
    cb3a:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    cb3c:	cbz	r5, cba4 <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    cb3e:	rsb	r3, r3, #95744	; 0x17600
    cb42:	ldr	r6, [pc, #112]	; (cbb4 <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    cb44:	ldr.w	r9, [pc, #100]	; cbac <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    cb48:	ldr.w	r8, [pc, #100]	; cbb0 <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    cb4c:	adds	r3, #255	; 0xff
    cb4e:	mov.w	r2, #1000	; 0x3e8
    cb52:	umull	r1, r3, r6, r3
    cb56:	mul.w	r4, r2, r4
    cb5a:	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    cb5e:	cpsid	i
	current = SYST_CVR;
    cb60:	ldr.w	r1, [r9]
	count = systick_millis_count;
    cb64:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    cb66:	ldr.w	lr, [r8]
	__enable_irq();
    cb6a:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    cb6c:	rsb	r3, r1, #95744	; 0x17600
    cb70:	adds	r3, #255	; 0xff
    cb72:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    cb76:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    cb7a:	rsb	r3, r4, r3, lsr #6
    cb7e:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    cb82:	beq.n	cb8a <delay+0x6e>
    cb84:	cmp	r1, #50	; 0x32
    cb86:	it	hi
    cb88:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    cb8a:	mla	r3, r0, r2, r3
    cb8e:	cmp.w	r3, #1000	; 0x3e8
    cb92:	bcc.n	cb9e <delay+0x82>
				ms--;
				if (ms == 0) return;
    cb94:	subs	r5, #1
    cb96:	beq.n	cba4 <delay+0x88>
				start += 1000;
    cb98:	add.w	r4, r4, #1000	; 0x3e8
    cb9c:	b.n	cb5e <delay+0x42>
			}
			yield();
    cb9e:	bl	dab4 <yield>
		}
    cba2:	b.n	cb5e <delay+0x42>
    cba4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cba8:	.word	0x1fff1f98
    cbac:	.word	0xe000e018
    cbb0:	.word	0xe000ed04
    cbb4:	.word	0xaaaaaaab

0000cbb8 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    cbb8:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    cbba:	ldr	r3, [pc, #312]	; (ccf4 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    cbbc:	ldr	r0, [pc, #312]	; (ccf8 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    cbbe:	ldr.w	ip, [pc, #348]	; cd1c <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    cbc2:	ldr	r4, [pc, #312]	; (ccfc <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    cbc4:	ldr	r1, [pc, #312]	; (cd00 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    cbc6:	ldr.w	lr, [pc, #344]	; cd20 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    cbca:	ldr	r6, [pc, #312]	; (cd04 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    cbcc:	ldr	r5, [pc, #312]	; (cd08 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    cbce:	ldr	r7, [pc, #316]	; (cd0c <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    cbd0:	mov.w	r2, #134217728	; 0x8000000
    cbd4:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    cbd6:	mov.w	r2, #268435456	; 0x10000000
    cbda:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    cbdc:	mov.w	r2, #536870912	; 0x20000000
    cbe0:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    cbe2:	mov.w	r2, #1073741824	; 0x40000000
    cbe6:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    cbe8:	mov.w	r2, #2147483648	; 0x80000000
    cbec:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    cbee:	movs	r2, #0
    cbf0:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    cbf2:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    cbf4:	movw	r0, #49151	; 0xbfff
    cbf8:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    cbfc:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    cc00:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    cc02:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    cc06:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    cc08:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    cc0a:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    cc0c:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    cc10:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    cc12:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    cc16:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    cc18:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    cc1c:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    cc1e:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    cc22:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    cc26:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    cc2a:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    cc2e:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    cc32:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    cc34:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    cc38:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    cc3a:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    cc3c:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    cc3e:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    cc42:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    cc44:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    cc46:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    cc48:	ldr	r4, [pc, #196]	; (cd10 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    cc4a:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    cc4c:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    cc4e:	movs	r1, #9
    cc50:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    cc52:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    cc56:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    cc5a:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    cc5c:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    cc5e:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    cc60:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    cc62:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    cc64:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    cc66:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    cc6a:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    cc6e:	add.w	r7, r7, #520192	; 0x7f000
    cc72:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    cc74:	addw	r4, r4, #2044	; 0x7fc
    cc78:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    cc7a:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    cc7c:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    cc7e:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    cc80:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    cc84:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    cc86:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    cc8a:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    cc8e:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    cc90:	sub.w	r4, r4, #460800	; 0x70800
    cc94:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    cc98:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    cc9a:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    cc9c:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    cca0:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    cca2:	ldr	r0, [pc, #112]	; (cd14 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    cca4:	orr.w	r1, r1, #512	; 0x200
    cca8:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    ccaa:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    ccac:	ldr	r4, [pc, #104]	; (cd18 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    ccae:	add.w	lr, lr, #65280	; 0xff00
    ccb2:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    ccb6:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    ccba:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    ccbe:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    ccc2:	orr.w	r1, r1, #33554432	; 0x2000000
    ccc6:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    ccc8:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    cccc:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    ccd0:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    ccd2:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    ccd4:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    ccd6:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    ccd8:	str	r2, [r4, #0]
#endif
	analog_init();
    ccda:	bl	ddf0 <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    ccde:	movs	r0, #25
    cce0:	bl	cb1c <delay>
	usb_init();
    cce4:	bl	d9ec <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    cce8:	movw	r0, #275	; 0x113
}
    ccec:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    ccf0:	b.w	cb1c <delay>
    ccf4:	.word	0xe000e104
    ccf8:	.word	0x40038004
    ccfc:	.word	0x40038014
    cd00:	.word	0x4003801c
    cd04:	.word	0x40038024
    cd08:	.word	0x4003802c
    cd0c:	.word	0x40038034
    cd10:	.word	0x40038000
    cd14:	.word	0x40048004
    cd18:	.word	0x400c9000
    cd1c:	.word	0x40038008
    cd20:	.word	0x4003800c

0000cd24 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    cd24:	cpsid	i
	avail = usb_buffer_available;
    cd26:	ldr	r0, [pc, #52]	; (cd5c <usb_malloc+0x38>)
    cd28:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    cd2a:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    cd2e:	cmp	r3, #19
    cd30:	bgt.n	cd54 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    cd32:	mov.w	r1, #2147483648	; 0x80000000
    cd36:	lsrs	r1, r3
    cd38:	bic.w	r2, r2, r1
    cd3c:	str	r2, [r0, #0]
	__enable_irq();
    cd3e:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    cd40:	ldr	r0, [pc, #28]	; (cd60 <usb_malloc+0x3c>)
    cd42:	add.w	r3, r3, r3, lsl #3
    cd46:	lsls	r3, r3, #3
    cd48:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    cd4a:	movs	r1, #0
    cd4c:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    cd4e:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    cd50:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    cd52:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    cd54:	cpsie	i
		return NULL;
    cd56:	movs	r0, #0
    cd58:	bx	lr
    cd5a:	nop
    cd5c:	.word	0x1fff0ab4
    cd60:	.word	0x1fff03d0

0000cd64 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    cd64:	ldr	r3, [pc, #52]	; (cd9c <usb_free+0x38>)
    cd66:	ldr	r2, [pc, #56]	; (cda0 <usb_free+0x3c>)
    cd68:	subs	r3, r0, r3
    cd6a:	umull	r2, r3, r2, r3
    cd6e:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    cd70:	cmp	r3, #19
    cd72:	bhi.n	cd8e <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    cd74:	ldr	r2, [pc, #44]	; (cda4 <usb_free+0x40>)
    cd76:	ldrb	r2, [r2, #0]
    cd78:	cbnz	r2, cd90 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    cd7a:	cpsid	i
	usb_buffer_available |= mask;
    cd7c:	ldr	r0, [pc, #40]	; (cda8 <usb_free+0x44>)
    cd7e:	mov.w	r1, #2147483648	; 0x80000000
    cd82:	ldr	r2, [r0, #0]
    cd84:	lsr.w	r3, r1, r3
    cd88:	orrs	r2, r3
    cd8a:	str	r2, [r0, #0]
	__enable_irq();
    cd8c:	cpsie	i
    cd8e:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    cd90:	ldr	r2, [pc, #24]	; (cdac <usb_free+0x48>)
    cd92:	ldrb	r2, [r2, #0]
    cd94:	cmp	r2, #0
    cd96:	beq.n	cd7a <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    cd98:	b.w	ce18 <usb_rx_memory>
    cd9c:	.word	0x1fff03d0
    cda0:	.word	0x38e38e39
    cda4:	.word	0x1fff2091
    cda8:	.word	0x1fff0ab4
    cdac:	.word	0x1fff209c

0000cdb0 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    cdb0:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    cdb2:	cmp	r3, #5
    cdb4:	bhi.n	cde0 <usb_rx+0x30>
	__disable_irq();
    cdb6:	cpsid	i
	ret = rx_first[endpoint];
    cdb8:	ldr	r1, [pc, #40]	; (cde4 <usb_rx+0x34>)
    cdba:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    cdbe:	cbz	r0, cddc <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    cdc0:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    cdc2:	ldr	r4, [pc, #36]	; (cde8 <usb_rx+0x38>)
    cdc4:	ldrh	r5, [r0, #0]
    cdc6:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    cdca:	ldr	r6, [r0, #4]
    cdcc:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    cdd0:	subs	r2, r2, r5
    cdd2:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    cdd6:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    cdd8:	pop	{r4, r5, r6}
    cdda:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    cddc:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    cdde:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    cde0:	movs	r0, #0
    cde2:	bx	lr
    cde4:	.word	0x1fff1ffc
    cde8:	.word	0x1fff2118

0000cdec <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    cdec:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    cdee:	cmp	r0, #5
    cdf0:	bhi.n	ce0a <usb_tx_packet_count+0x1e>
	__disable_irq();
    cdf2:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    cdf4:	ldr	r3, [pc, #28]	; (ce14 <usb_tx_packet_count+0x28>)
    cdf6:	ldr.w	r3, [r3, r0, lsl #2]
    cdfa:	cbz	r3, ce0e <usb_tx_packet_count+0x22>
    cdfc:	movs	r0, #0
    cdfe:	ldr	r3, [r3, #4]
    ce00:	adds	r0, #1
    ce02:	cmp	r3, #0
    ce04:	bne.n	cdfe <usb_tx_packet_count+0x12>
	__enable_irq();
    ce06:	cpsie	i
	return count;
    ce08:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    ce0a:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    ce0c:	bx	lr
// https://forum.pjrc.com/threads/58663?p=223513&viewfull=1#post223513
//
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    ce0e:	mov	r0, r3
    ce10:	b.n	ce06 <usb_tx_packet_count+0x1a>
    ce12:	nop
    ce14:	.word	0x1fff2058

0000ce18 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    ce18:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    ce1a:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    ce1c:	ldr	r2, [pc, #236]	; (cf0c <usb_rx_memory+0xf4>)
    ce1e:	ldrb	r3, [r2, #0]
    ce20:	lsls	r1, r3, #28
    ce22:	bpl.n	ce32 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    ce24:	ldr	r3, [pc, #232]	; (cf10 <usb_rx_memory+0xf8>)
    ce26:	ldr	r1, [r3, #32]
    ce28:	cmp	r1, #0
    ce2a:	beq.n	cecc <usb_rx_memory+0xb4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    ce2c:	ldr	r1, [r3, #40]	; 0x28
    ce2e:	cmp	r1, #0
    ce30:	beq.n	cee8 <usb_rx_memory+0xd0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    ce32:	ldrb	r3, [r2, #1]
    ce34:	lsls	r3, r3, #28
    ce36:	bpl.n	ce46 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    ce38:	ldr	r3, [pc, #212]	; (cf10 <usb_rx_memory+0xf8>)
    ce3a:	ldr	r1, [r3, #64]	; 0x40
    ce3c:	cmp	r1, #0
    ce3e:	beq.n	cefc <usb_rx_memory+0xe4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    ce40:	ldr	r1, [r3, #72]	; 0x48
    ce42:	cmp	r1, #0
    ce44:	beq.n	ceec <usb_rx_memory+0xd4>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    ce46:	ldrb	r3, [r2, #2]
    ce48:	lsls	r5, r3, #28
    ce4a:	bpl.n	ce5a <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    ce4c:	ldr	r3, [pc, #192]	; (cf10 <usb_rx_memory+0xf8>)
    ce4e:	ldr	r1, [r3, #96]	; 0x60
    ce50:	cmp	r1, #0
    ce52:	beq.n	cef8 <usb_rx_memory+0xe0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    ce54:	ldr	r1, [r3, #104]	; 0x68
    ce56:	cmp	r1, #0
    ce58:	beq.n	cef0 <usb_rx_memory+0xd8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    ce5a:	ldrb	r3, [r2, #3]
    ce5c:	lsls	r4, r3, #28
    ce5e:	bpl.n	ce72 <usb_rx_memory+0x5a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    ce60:	ldr	r3, [pc, #172]	; (cf10 <usb_rx_memory+0xf8>)
    ce62:	ldr.w	r1, [r3, #128]	; 0x80
    ce66:	cmp	r1, #0
    ce68:	beq.n	cf00 <usb_rx_memory+0xe8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    ce6a:	ldr.w	r1, [r3, #136]	; 0x88
    ce6e:	cmp	r1, #0
    ce70:	beq.n	cef4 <usb_rx_memory+0xdc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    ce72:	ldrb	r3, [r2, #4]
    ce74:	lsls	r1, r3, #28
    ce76:	bpl.n	ce88 <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    ce78:	ldr	r3, [pc, #148]	; (cf10 <usb_rx_memory+0xf8>)
    ce7a:	ldr.w	r1, [r3, #160]	; 0xa0
    ce7e:	cmp	r1, #0
    ce80:	beq.n	cf08 <usb_rx_memory+0xf0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    ce82:	ldr.w	r1, [r3, #168]	; 0xa8
    ce86:	cbz	r1, ceae <usb_rx_memory+0x96>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    ce88:	ldrb	r3, [r2, #5]
    ce8a:	lsls	r3, r3, #28
    ce8c:	bpl.n	cea0 <usb_rx_memory+0x88>
			if (table[index(i, RX, EVEN)].desc == 0) {
    ce8e:	ldr	r3, [pc, #128]	; (cf10 <usb_rx_memory+0xf8>)
    ce90:	ldr.w	r2, [r3, #192]	; 0xc0
    ce94:	cmp	r2, #0
    ce96:	beq.n	cf04 <usb_rx_memory+0xec>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    ce98:	ldr.w	r2, [r3, #200]	; 0xc8
    ce9c:	movs	r4, #25
    ce9e:	cbz	r2, ceb0 <usb_rx_memory+0x98>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    cea0:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    cea2:	ldr	r3, [pc, #112]	; (cf14 <usb_rx_memory+0xfc>)
    cea4:	movs	r2, #0
    cea6:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    cea8:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    ceaa:	b.w	cd64 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    ceae:	movs	r4, #21
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    ceb0:	ldr	r1, [pc, #96]	; (cf14 <usb_rx_memory+0xfc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    ceb2:	ldr	r5, [pc, #100]	; (cf18 <usb_rx_memory+0x100>)
				usb_rx_memory_needed--;
    ceb4:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    ceb6:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    ceba:	add.w	r3, r3, r4, lsl #3
    cebe:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    cec0:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    cec2:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    cec4:	strb	r2, [r1, #0]
				__enable_irq();
    cec6:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    cec8:	pop	{r4, r5}
    ceca:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    cecc:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    cece:	ldr	r4, [pc, #68]	; (cf14 <usb_rx_memory+0xfc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    ced0:	ldr	r5, [pc, #72]	; (cf1c <usb_rx_memory+0x104>)
				usb_rx_memory_needed--;
    ced2:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    ced4:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    ced8:	add.w	r3, r3, r2, lsl #3
    cedc:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    cede:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    cee0:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    cee2:	strb	r2, [r4, #0]
				__enable_irq();
    cee4:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    cee6:	b.n	cec8 <usb_rx_memory+0xb0>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    cee8:	movs	r4, #5
    ceea:	b.n	ceb0 <usb_rx_memory+0x98>
    ceec:	movs	r4, #9
    ceee:	b.n	ceb0 <usb_rx_memory+0x98>
    cef0:	movs	r4, #13
    cef2:	b.n	ceb0 <usb_rx_memory+0x98>
    cef4:	movs	r4, #17
    cef6:	b.n	ceb0 <usb_rx_memory+0x98>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    cef8:	movs	r2, #12
    cefa:	b.n	cece <usb_rx_memory+0xb6>
    cefc:	movs	r2, #8
    cefe:	b.n	cece <usb_rx_memory+0xb6>
    cf00:	movs	r2, #16
    cf02:	b.n	cece <usb_rx_memory+0xb6>
    cf04:	movs	r2, #24
    cf06:	b.n	cece <usb_rx_memory+0xb6>
    cf08:	movs	r2, #20
    cf0a:	b.n	cece <usb_rx_memory+0xb6>
    cf0c:	.word	0x0001328c
    cf10:	.word	0x1fff0000
    cf14:	.word	0x1fff2091
    cf18:	.word	0x004000c8
    cf1c:	.word	0x00400088

0000cf20 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    cf20:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    cf22:	cmp	r3, #5
    cf24:	bhi.n	cf62 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    cf26:	ldr	r2, [pc, #108]	; (cf94 <usb_tx+0x74>)
    cf28:	lsls	r0, r0, #5
    cf2a:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    cf2e:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    cf30:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    cf32:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    cf34:	ldr	r4, [pc, #96]	; (cf98 <usb_tx+0x78>)
    cf36:	ldrb	r2, [r4, r3]
    cf38:	cmp	r2, #3
    cf3a:	bhi.n	cf74 <usb_tx+0x54>
    cf3c:	tbb	[pc, r2]
    cf40:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    cf44:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    cf46:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    cf48:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    cf4a:	tst.w	r0, #8
    cf4e:	ite	ne
    cf50:	movne	r3, #200	; 0xc8
    cf52:	moveq	r3, #136	; 0x88
    cf54:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    cf58:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    cf5a:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    cf5c:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    cf5e:	cpsie	i
}
    cf60:	pop	{r4, r5}
    cf62:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    cf64:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    cf66:	movs	r2, #2
		break;
    cf68:	b.n	cf46 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    cf6a:	movs	r2, #5
    cf6c:	b.n	cf46 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    cf6e:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    cf70:	movs	r2, #4
		break;
    cf72:	b.n	cf46 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    cf74:	ldr	r2, [pc, #36]	; (cf9c <usb_tx+0x7c>)
    cf76:	ldr.w	r0, [r2, r3, lsl #2]
    cf7a:	cbz	r0, cf8c <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    cf7c:	ldr	r2, [pc, #32]	; (cfa0 <usb_tx+0x80>)
    cf7e:	ldr.w	r0, [r2, r3, lsl #2]
    cf82:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    cf84:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    cf88:	cpsie	i
		return;
    cf8a:	b.n	cf60 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    cf8c:	str.w	r1, [r2, r3, lsl #2]
    cf90:	ldr	r2, [pc, #12]	; (cfa0 <usb_tx+0x80>)
    cf92:	b.n	cf84 <usb_tx+0x64>
    cf94:	.word	0x1fff0000
    cf98:	.word	0x1fff20a0
    cf9c:	.word	0x1fff2058
    cfa0:	.word	0x1fff2070

0000cfa4 <usb_isr>:
}



void usb_isr(void)
{
    cfa4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    cfa8:	ldr.w	fp, [pc, #780]	; d2b8 <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    cfac:	ldr.w	sl, [pc, #780]	; d2bc <usb_isr+0x318>
}



void usb_isr(void)
{
    cfb0:	sub	sp, #28
    cfb2:	b.n	d03e <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    cfb4:	ldr	r7, [pc, #692]	; (d26c <usb_isr+0x2c8>)
    cfb6:	mov.w	r8, r3, lsr #2
    cfba:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    cfbe:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    cfc0:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    cfc4:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    cfc8:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    cfca:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    cfce:	and.w	r4, r3, #255	; 0xff
    cfd2:	cmp	r3, #0
    cfd4:	bne.w	d2c0 <usb_isr+0x31c>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    cfd8:	ldr.w	r3, [r7, r8, lsl #3]
    cfdc:	lsrs	r3, r3, #16
    cfde:	uxth	r1, r3
    cfe0:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    cfe4:	cmp	r3, #0
    cfe6:	beq.w	d258 <usb_isr+0x2b4>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    cfea:	ldr	r3, [pc, #644]	; (d270 <usb_isr+0x2cc>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    cfec:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    cff0:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    cff4:	ldr.w	r2, [r3, r6, lsl #2]
    cff8:	cmp	r2, #0
    cffa:	beq.w	d35c <usb_isr+0x3b8>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    cffe:	ldr	r5, [pc, #628]	; (d274 <usb_isr+0x2d0>)
    d000:	ldr.w	r3, [r5, r6, lsl #2]
    d004:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    d006:	ldr	r4, [pc, #624]	; (d278 <usb_isr+0x2d4>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    d008:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    d00c:	ldrh.w	r3, [r4, r6, lsl #1]
    d010:	add	r1, r3
    d012:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    d016:	bl	cd24 <usb_malloc>
					if (packet) {
    d01a:	cmp	r0, #0
    d01c:	beq.w	d34e <usb_isr+0x3aa>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    d020:	ldr	r2, [pc, #600]	; (d27c <usb_isr+0x2d8>)
    d022:	ldr	r3, [pc, #604]	; (d280 <usb_isr+0x2dc>)
    d024:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    d028:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    d02c:	it	ne
    d02e:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    d030:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    d034:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    d038:	movs	r3, #8
    d03a:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    d03e:	ldrb.w	r4, [fp]
    d042:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    d044:	lsls	r5, r4, #29
    d046:	bpl.n	d080 <usb_isr+0xdc>
		if (usb_configuration) {
    d048:	ldr	r3, [pc, #568]	; (d284 <usb_isr+0x2e0>)
    d04a:	ldrb	r3, [r3, #0]
    d04c:	cbz	r3, d07a <usb_isr+0xd6>
			t = usb_reboot_timer;
    d04e:	ldr	r1, [pc, #568]	; (d288 <usb_isr+0x2e4>)
    d050:	ldrb	r2, [r1, #0]
			if (t) {
    d052:	and.w	r3, r2, #255	; 0xff
    d056:	cbz	r2, d064 <usb_isr+0xc0>
				usb_reboot_timer = --t;
    d058:	subs	r3, #1
    d05a:	uxtb	r3, r3
    d05c:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    d05e:	cmp	r3, #0
    d060:	beq.w	d9e2 <usb_isr+0xa3e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    d064:	ldr	r1, [pc, #548]	; (d28c <usb_isr+0x2e8>)
    d066:	ldrb	r2, [r1, #0]
			if (t) {
    d068:	and.w	r3, r2, #255	; 0xff
    d06c:	cbz	r2, d07a <usb_isr+0xd6>
				usb_cdc_transmit_flush_timer = --t;
    d06e:	subs	r3, #1
    d070:	uxtb	r3, r3
    d072:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    d074:	cmp	r3, #0
    d076:	beq.w	d348 <usb_isr+0x3a4>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    d07a:	movs	r3, #4
    d07c:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    d080:	and.w	r3, r4, #8
    d084:	and.w	r2, r3, #255	; 0xff
    d088:	cmp	r3, #0
    d08a:	beq.w	d31a <usb_isr+0x376>
		uint8_t endpoint;
		stat = USB0_STAT;
    d08e:	ldrb.w	r3, [sl]
    d092:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    d094:	lsrs	r6, r3, #4
    d096:	bne.n	cfb4 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    d098:	lsrs	r0, r3, #2
    d09a:	ldr.w	r9, [pc, #464]	; d26c <usb_isr+0x2c8>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    d09e:	ldr.w	r2, [r9, r0, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    d0a2:	add.w	r1, r9, r0, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    d0a6:	ubfx	r2, r2, #2, #4
    d0aa:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    d0ac:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    d0ae:	cmp	r2, #12
    d0b0:	bhi.w	d23a <usb_isr+0x296>
    d0b4:	tbh	[pc, r2, lsl #1]
    d0b8:	.word	0x00c500c5
    d0bc:	.word	0x00c100c1
    d0c0:	.word	0x00c100c1
    d0c4:	.word	0x00c100c1
    d0c8:	.word	0x00c1008b
    d0cc:	.word	0x00c100c1
    d0d0:	.short	0x000d
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    d0d2:	ldr	r2, [r1, #0]
    d0d4:	ldr	r5, [pc, #440]	; (d290 <usb_isr+0x2ec>)
		setup.word2 = *(uint32_t *)(buf + 4);
    d0d6:	ldr	r1, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    d0d8:	ldr	r7, [pc, #440]	; (d294 <usb_isr+0x2f0>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    d0da:	ldr	r6, [pc, #444]	; (d298 <usb_isr+0x2f4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    d0dc:	ldr	r4, [pc, #412]	; (d27c <usb_isr+0x2d8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    d0de:	str	r1, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    d0e0:	uxth	r1, r2
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    d0e2:	str.w	r4, [r9, r0, lsl #3]
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    d0e6:	str	r2, [r5, #0]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    d0e8:	movs	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    d0ea:	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    d0ec:	cmp.w	r1, #2176	; 0x880
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    d0f0:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    d0f2:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    d0f6:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    d0fa:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    d0fc:	beq.w	d79e <usb_isr+0x7fa>
    d100:	bls.w	d364 <usb_isr+0x3c0>
    d104:	movw	r4, #8993	; 0x2321
    d108:	cmp	r1, r4
    d10a:	beq.w	d7a8 <usb_isr+0x804>
    d10e:	bhi.w	d49a <usb_isr+0x4f6>
    d112:	movw	r4, #8225	; 0x2021
    d116:	cmp	r1, r4
    d118:	beq.w	d4b0 <usb_isr+0x50c>
    d11c:	movw	r4, #8737	; 0x2221
    d120:	cmp	r1, r4
    d122:	beq.w	d5fa <usb_isr+0x656>
    d126:	cmp.w	r1, #2304	; 0x900
    d12a:	bne.w	d4aa <usb_isr+0x506>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    d12e:	ldr	r2, [pc, #340]	; (d284 <usb_isr+0x2e0>)
    d130:	ldr	r4, [pc, #312]	; (d26c <usb_isr+0x2c8>)
    d132:	ldrb	r1, [r5, #2]
    d134:	strb	r1, [r2, #0]
    d136:	add.w	r5, r4, #192	; 0xc0
    d13a:	b.n	d142 <usb_isr+0x19e>
    d13c:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    d13e:	cmp	r5, r4
    d140:	beq.n	d156 <usb_isr+0x1b2>
			if (table[i].desc & BDT_OWN) {
    d142:	ldr	r3, [r4, #32]
    d144:	lsls	r0, r3, #24
    d146:	bpl.n	d13c <usb_isr+0x198>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    d148:	ldr	r0, [r4, #36]	; 0x24
    d14a:	adds	r4, #8
    d14c:	subs	r0, #8
    d14e:	bl	cd64 <usb_free>
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    d152:	cmp	r5, r4
    d154:	bne.n	d142 <usb_isr+0x19e>
    d156:	ldr	r4, [pc, #324]	; (d29c <usb_isr+0x2f8>)
    d158:	ldr	r2, [pc, #276]	; (d270 <usb_isr+0x2cc>)
    d15a:	ldr	r1, [pc, #324]	; (d2a0 <usb_isr+0x2fc>)
    d15c:	ldr	r0, [pc, #324]	; (d2a4 <usb_isr+0x300>)
    d15e:	ldr	r5, [pc, #276]	; (d274 <usb_isr+0x2d0>)
    d160:	str	r4, [sp, #4]
    d162:	movs	r3, #0
    d164:	ldr	r4, [pc, #272]	; (d278 <usb_isr+0x2d4>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    d166:	str	r6, [sp, #20]
    d168:	str	r5, [sp, #8]
    d16a:	str	r4, [sp, #12]
    d16c:	mov	r8, r0
    d16e:	str	r7, [sp, #16]
    d170:	mov	r6, r2
    d172:	mov	r5, r1
    d174:	mov	r4, r3
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    d176:	ldr	r0, [r6, #0]
			while (p) {
    d178:	cbz	r0, d186 <usb_isr+0x1e2>
				n = p->next;
    d17a:	ldr	r7, [r0, #4]
				usb_free(p);
    d17c:	bl	cd64 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    d180:	mov	r0, r7
    d182:	cmp	r7, #0
    d184:	bne.n	d17a <usb_isr+0x1d6>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    d186:	movs	r3, #0
    d188:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    d18a:	ldr	r3, [sp, #8]
			p = tx_first[i];
    d18c:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    d18e:	mov	r2, r3
    d190:	movs	r3, #0
    d192:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    d196:	cbz	r0, d1a4 <usb_isr+0x200>
				n = p->next;
    d198:	ldr	r7, [r0, #4]
				usb_free(p);
    d19a:	bl	cd64 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    d19e:	mov	r0, r7
    d1a0:	cmp	r7, #0
    d1a2:	bne.n	d198 <usb_isr+0x1f4>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    d1a4:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    d1a6:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    d1a8:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    d1aa:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    d1ac:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    d1b0:	ldr	r2, [sp, #12]
    d1b2:	mov.w	r1, #0
			switch (tx_state[i]) {
    d1b6:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    d1b8:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    d1bc:	cmp	r3, #3
    d1be:	bhi.w	d6d4 <usb_isr+0x730>
    d1c2:	tbh	[pc, r3, lsl #1]
    d1c6:	.short	0x02e7
    d1c8:	.word	0x02e70283
    d1cc:	.short	0x0283
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    d1ce:	ldr	r7, [pc, #196]	; (d294 <usb_isr+0x2f0>)
    d1d0:	ldr	r2, [r7, #0]
		if (data) {
    d1d2:	cbz	r2, d226 <usb_isr+0x282>
			size = ep0_tx_len;
    d1d4:	ldr	r3, [pc, #208]	; (d2a8 <usb_isr+0x304>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d1d6:	ldr	r6, [pc, #192]	; (d298 <usb_isr+0x2f4>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    d1d8:	ldr	r1, [pc, #208]	; (d2ac <usb_isr+0x308>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    d1da:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d1dc:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    d1de:	ldrb	r5, [r1, #0]
    d1e0:	cmp	r0, #64	; 0x40
    d1e2:	mov	lr, r0
    d1e4:	orr.w	r8, r5, #2
    d1e8:	it	cs
    d1ea:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d1ee:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    d1f0:	eor.w	r4, r4, #1
    d1f4:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    d1f6:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d1fa:	ite	eq
    d1fc:	moveq	r4, #136	; 0x88
    d1fe:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    d200:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    d204:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    d206:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d20a:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    d20e:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    d210:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d212:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    d216:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    d218:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    d21a:	cbnz	r0, d224 <usb_isr+0x280>
    d21c:	cmp.w	lr, #64	; 0x40
    d220:	it	ne
    d222:	movne	r2, #0
    d224:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    d226:	ldr	r3, [pc, #104]	; (d290 <usb_isr+0x2ec>)
    d228:	ldrh	r2, [r3, #0]
    d22a:	cmp.w	r2, #1280	; 0x500
    d22e:	bne.n	d23a <usb_isr+0x296>
			setup.bRequest = 0;
    d230:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    d232:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    d234:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    d236:	ldr	r3, [pc, #120]	; (d2b0 <usb_isr+0x30c>)
    d238:	strb	r2, [r3, #0]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    d23a:	ldr	r2, [pc, #120]	; (d2b4 <usb_isr+0x310>)
    d23c:	movs	r3, #1
    d23e:	strb	r3, [r2, #0]
    d240:	b.n	d038 <usb_isr+0x94>
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    d242:	ldr	r2, [pc, #76]	; (d290 <usb_isr+0x2ec>)
    d244:	ldrh	r5, [r2, #0]
    d246:	movw	r4, #8225	; 0x2021
    d24a:	cmp	r5, r4
    d24c:	beq.w	d444 <usb_isr+0x4a0>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    d250:	ldr	r2, [pc, #40]	; (d27c <usb_isr+0x2d8>)
    d252:	str.w	r2, [r9, r0, lsl #3]
    d256:	b.n	d23a <usb_isr+0x296>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    d258:	ldr	r2, [pc, #32]	; (d27c <usb_isr+0x2d8>)
    d25a:	ldr	r3, [pc, #36]	; (d280 <usb_isr+0x2dc>)
    d25c:	tst.w	r9, #8
    d260:	it	ne
    d262:	movne	r3, r2
    d264:	str.w	r3, [r7, r8, lsl #3]
    d268:	b.n	d038 <usb_isr+0x94>
    d26a:	nop
    d26c:	.word	0x1fff0000
    d270:	.word	0x1fff1ffc
    d274:	.word	0x1fff1fa0
    d278:	.word	0x1fff2118
    d27c:	.word	0x004000c8
    d280:	.word	0x00400088
    d284:	.word	0x1fff209c
    d288:	.word	0x1fff2015
    d28c:	.word	0x1fff1f84
    d290:	.word	0x1fff2088
    d294:	.word	0x1fff1f9c
    d298:	.word	0x1fff2014
    d29c:	.word	0x1fff20a0
    d2a0:	.word	0x1fff2058
    d2a4:	.word	0x1fff2070
    d2a8:	.word	0x1fff1fb8
    d2ac:	.word	0x1fff2090
    d2b0:	.word	0x40072098
    d2b4:	.word	0x40072094
    d2b8:	.word	0x40072080
    d2bc:	.word	0x40072090
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    d2c0:	bl	cd64 <usb_free>
				packet = tx_first[endpoint];
    d2c4:	ldr	r2, [pc, #692]	; (d57c <usb_isr+0x5d8>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    d2c6:	ldr	r1, [pc, #696]	; (d580 <usb_isr+0x5dc>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    d2c8:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    d2cc:	cmp	r3, #0
    d2ce:	beq.w	d424 <usb_isr+0x480>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    d2d2:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    d2d4:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    d2d6:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    d2da:	add.w	r2, r3, #8
    d2de:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    d2e2:	cmp	r4, #3
    d2e4:	bhi.n	d2f2 <usb_isr+0x34e>
    d2e6:	tbb	[pc, r4]
    d2ea:	.short	0x0f12
    d2ec:	.short	0x0215
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    d2ee:	movs	r2, #4
    d2f0:	strb	r2, [r1, r6]
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    d2f2:	ldrh	r2, [r3, #0]
    d2f4:	tst.w	r9, #8
    d2f8:	ite	eq
    d2fa:	moveq	r3, #136	; 0x88
    d2fc:	movne	r3, #200	; 0xc8
    d2fe:	orr.w	r3, r3, r2, lsl #16
    d302:	str.w	r3, [r7, r8, lsl #3]
    d306:	b.n	d038 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    d308:	movs	r2, #2
    d30a:	strb	r2, [r1, r6]
						break;
    d30c:	b.n	d2f2 <usb_isr+0x34e>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    d30e:	movs	r2, #3
    d310:	strb	r2, [r1, r6]
						break;
    d312:	b.n	d2f2 <usb_isr+0x34e>
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    d314:	movs	r2, #5
    d316:	strb	r2, [r1, r6]
						break;
    d318:	b.n	d2f2 <usb_isr+0x34e>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    d31a:	lsls	r0, r4, #31
    d31c:	bmi.w	d4b8 <usb_isr+0x514>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    d320:	lsls	r1, r4, #24
    d322:	bmi.w	d554 <usb_isr+0x5b0>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    d326:	lsls	r2, r4, #30
    d328:	bpl.n	d338 <usb_isr+0x394>
		uint8_t err = USB0_ERRSTAT;
    d32a:	ldr	r2, [pc, #600]	; (d584 <usb_isr+0x5e0>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    d32c:	ldr	r1, [pc, #600]	; (d588 <usb_isr+0x5e4>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    d32e:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    d330:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    d332:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    d334:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    d336:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    d338:	lsls	r3, r4, #27
    d33a:	bpl.n	d342 <usb_isr+0x39e>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    d33c:	ldr	r3, [pc, #584]	; (d588 <usb_isr+0x5e4>)
    d33e:	movs	r2, #16
    d340:	strb	r2, [r3, #0]
	}

}
    d342:	add	sp, #28
    d344:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    d348:	bl	c558 <usb_serial_flush_callback>
    d34c:	b.n	d07a <usb_isr+0xd6>
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    d34e:	ldr	r2, [pc, #572]	; (d58c <usb_isr+0x5e8>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    d350:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    d354:	ldrb	r3, [r2, #0]
    d356:	adds	r3, #1
    d358:	strb	r3, [r2, #0]
    d35a:	b.n	d038 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    d35c:	str.w	r0, [r3, r6, lsl #2]
    d360:	ldr	r5, [pc, #556]	; (d590 <usb_isr+0x5ec>)
    d362:	b.n	d006 <usb_isr+0x62>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    d364:	movw	r4, #770	; 0x302
    d368:	cmp	r1, r4
    d36a:	beq.w	d7b0 <usb_isr+0x80c>
    d36e:	bhi.w	d512 <usb_isr+0x56e>
    d372:	cmp	r1, #130	; 0x82
    d374:	beq.w	d6a6 <usb_isr+0x702>
    d378:	cmp.w	r1, #258	; 0x102
    d37c:	beq.w	d5d4 <usb_isr+0x630>
    d380:	cmp	r1, #128	; 0x80
    d382:	bne.w	d4aa <usb_isr+0x506>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    d386:	ldr	r4, [pc, #524]	; (d594 <usb_isr+0x5f0>)
		reply_buffer[1] = 0;
		datalen = 2;
    d388:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    d38a:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    d38c:	strb	r2, [r4, #1]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    d38e:	ldrh	r2, [r5, #6]
    d390:	cmp	r2, r0
    d392:	bcs.w	d932 <usb_isr+0x98e>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    d396:	ldr	r1, [pc, #512]	; (d598 <usb_isr+0x5f4>)
    d398:	ldrb	r5, [r1, #0]
    d39a:	cmp	r2, #64	; 0x40
    d39c:	mov	lr, r2
    d39e:	orr.w	ip, r5, #2
    d3a2:	it	cs
    d3a4:	movcs.w	lr, #64	; 0x40
    d3a8:	add.w	r3, r4, lr
    d3ac:	add.w	r0, r9, ip, lsl #3
    d3b0:	str	r3, [sp, #4]
    d3b2:	movs	r3, #1
    d3b4:	str	r4, [r0, #4]
    d3b6:	mov.w	r8, lr, lsl #16
    d3ba:	rsb	r0, lr, r2
    d3be:	str	r3, [sp, #8]
    d3c0:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d3c2:	movs	r4, #200	; 0xc8
    d3c4:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    d3c8:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d3cc:	str.w	r3, [r9, ip, lsl #3]
	ep0_tx_data_toggle ^= 1;
    d3d0:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    d3d2:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d3d4:	ldr.w	ip, [pc, #472]	; d5b0 <usb_isr+0x60c>
	ep0_tx_data_toggle ^= 1;
    d3d8:	ldr	r3, [pc, #448]	; (d59c <usb_isr+0x5f8>)
	ep0_tx_bdt_bank ^= 1;
    d3da:	ldr.w	r8, [pc, #444]	; d598 <usb_isr+0x5f4>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    d3de:	cmp	r0, #0
    d3e0:	bne.w	d63c <usb_isr+0x698>
    d3e4:	cmp.w	lr, #64	; 0x40
    d3e8:	bne.n	d4b0 <usb_isr+0x50c>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    d3ea:	orr.w	ip, r4, #2
    d3ee:	add.w	r3, r9, ip, lsl #3
    d3f2:	ldr	r4, [sp, #4]
    d3f4:	ldr.w	lr, [pc, #440]	; d5b0 <usb_isr+0x60c>
    d3f8:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d3fa:	cmp	r2, #0
    d3fc:	bne.w	d668 <usb_isr+0x6c4>
    d400:	lsls	r2, r0, #16
    d402:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    d406:	ldrb.w	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d40a:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    d40e:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    d410:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    d412:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    d414:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    d416:	cmp	r0, #64	; 0x40
    d418:	bne.n	d4b0 <usb_isr+0x50c>
    d41a:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    d41c:	ldr	r2, [pc, #384]	; (d5a0 <usb_isr+0x5fc>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    d41e:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    d420:	strh	r0, [r2, #0]
    d422:	b.n	d4b0 <usb_isr+0x50c>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    d424:	ldrb	r3, [r1, r6]
    d426:	cmp	r3, #3
    d428:	bhi.w	d698 <usb_isr+0x6f4>
    d42c:	add	r2, pc, #4	; (adr r2, d434 <usb_isr+0x490>)
    d42e:	ldr.w	pc, [r2, r3, lsl #2]
    d432:	nop
    d434:	.word	0x0000d039
    d438:	.word	0x0000d039
    d43c:	.word	0x0000d50d
    d440:	.word	0x0000d507
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
			int i;
			uint32_t *line_coding = NULL;
			switch (setup.wIndex) {
    d444:	ldrh	r2, [r2, #4]
    d446:	cbnz	r2, d46c <usb_isr+0x4c8>
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    d448:	ldr	r2, [pc, #344]	; (d5a4 <usb_isr+0x600>)
    d44a:	ldrb	r5, [r1, #0]
    d44c:	ldrb	r4, [r1, #1]
    d44e:	strb	r5, [r2, #0]
    d450:	strb	r4, [r2, #1]
    d452:	ldrb	r5, [r1, #2]
    d454:	ldrb	r4, [r1, #3]
    d456:	strb	r5, [r2, #2]
    d458:	strb	r4, [r2, #3]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    d45a:	ldr	r4, [r2, #0]
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    d45c:	ldrb	r5, [r1, #4]
    d45e:	strb	r5, [r2, #4]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    d460:	cmp	r4, #134	; 0x86
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    d462:	ldrb	r5, [r1, #5]
    d464:	ldrb	r1, [r1, #6]
    d466:	strb	r5, [r2, #5]
    d468:	strb	r1, [r2, #6]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    d46a:	beq.n	d568 <usb_isr+0x5c4>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    d46c:	ldr	r1, [pc, #296]	; (d598 <usb_isr+0x5f4>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d46e:	ldr	r6, [pc, #300]	; (d59c <usb_isr+0x5f8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    d470:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d472:	ldrb	r4, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    d474:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d478:	cmp	r4, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    d47a:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    d47e:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d480:	ite	eq
    d482:	moveq	r1, #136	; 0x88
    d484:	movne	r1, #200	; 0xc8
    d486:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    d48a:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    d48e:	eor.w	r4, r4, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    d492:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    d494:	strb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    d496:	str	r1, [r2, #4]
    d498:	b.n	d250 <usb_isr+0x2ac>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    d49a:	movw	r2, #26273	; 0x66a1
    d49e:	cmp	r1, r2
    d4a0:	beq.n	d4aa <usb_isr+0x506>
    d4a2:	movw	r2, #26529	; 0x67a1
    d4a6:	cmp	r1, r2
    d4a8:	beq.n	d570 <usb_isr+0x5cc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    d4aa:	ldr	r2, [pc, #252]	; (d5a8 <usb_isr+0x604>)
    d4ac:	movs	r3, #15
    d4ae:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    d4b0:	ldr	r2, [pc, #248]	; (d5ac <usb_isr+0x608>)
    d4b2:	movs	r3, #1
    d4b4:	strb	r3, [r2, #0]
    d4b6:	b.n	d23a <usb_isr+0x296>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    d4b8:	ldr	r3, [pc, #244]	; (d5b0 <usb_isr+0x60c>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    d4ba:	ldr	r0, [pc, #240]	; (d5ac <usb_isr+0x608>)
		ep0_tx_bdt_bank = 0;
    d4bc:	ldr	r1, [pc, #216]	; (d598 <usb_isr+0x5f4>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    d4be:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    d4c0:	mov.w	lr, #2
    d4c4:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    d4c8:	ldr	r7, [pc, #220]	; (d5a8 <usb_isr+0x604>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    d4ca:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    d4cc:	ldr	r1, [pc, #228]	; (d5b4 <usb_isr+0x610>)
    d4ce:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    d4d0:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    d4d2:	ldr	r6, [pc, #176]	; (d584 <usb_isr+0x5e0>)
		USB0_ISTAT = 0xFF;
    d4d4:	ldr	r5, [pc, #176]	; (d588 <usb_isr+0x5e4>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    d4d6:	ldr	r4, [pc, #224]	; (d5b8 <usb_isr+0x614>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    d4d8:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    d4da:	movs	r1, #13
    d4dc:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    d4de:	movs	r1, #255	; 0xff
    d4e0:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    d4e2:	ldr.w	lr, [pc, #236]	; d5d0 <usb_isr+0x62c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    d4e6:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    d4e8:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    d4ea:	ldr	r5, [pc, #208]	; (d5bc <usb_isr+0x618>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    d4ec:	ldr	r2, [pc, #208]	; (d5c0 <usb_isr+0x61c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    d4ee:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    d4f2:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    d4f4:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    d4f6:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    d4fa:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    d4fc:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    d4fe:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    d500:	add	sp, #28
    d502:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    d506:	movs	r3, #1
    d508:	strb	r3, [r1, r6]
						break;
    d50a:	b.n	d038 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    d50c:	movs	r3, #0
    d50e:	strb	r3, [r1, r6]
						break;
    d510:	b.n	d038 <usb_isr+0x94>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    d512:	cmp.w	r1, #1280	; 0x500
    d516:	beq.w	d7a8 <usb_isr+0x804>
    d51a:	bcc.n	d4aa <usb_isr+0x506>
    d51c:	sub.w	r1, r1, #1664	; 0x680
    d520:	cmp	r1, #1
    d522:	bhi.n	d4aa <usb_isr+0x506>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    d524:	ldr	r2, [pc, #156]	; (d5c4 <usb_isr+0x620>)
    d526:	ldr	r4, [r2, #4]
    d528:	cmp	r4, #0
    d52a:	beq.n	d4aa <usb_isr+0x506>
    d52c:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    d52e:	ldrh.w	lr, [r5, #4]
    d532:	b.n	d53c <usb_isr+0x598>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    d534:	adds	r2, #12
			if (list->addr == NULL) break;
    d536:	ldr	r4, [r2, #4]
    d538:	cmp	r4, #0
    d53a:	beq.n	d4aa <usb_isr+0x506>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    d53c:	ldrh	r3, [r2, #0]
    d53e:	cmp	r3, r0
    d540:	bne.n	d534 <usb_isr+0x590>
    d542:	ldrh	r3, [r2, #2]
    d544:	cmp	r3, lr
    d546:	bne.n	d534 <usb_isr+0x590>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    d548:	lsrs	r0, r0, #8
    d54a:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    d54c:	ite	eq
    d54e:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    d550:	ldrhne	r0, [r2, #8]
    d552:	b.n	d38e <usb_isr+0x3ea>
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    d554:	ldr	r1, [pc, #80]	; (d5a8 <usb_isr+0x604>)
		USB0_ISTAT = USB_ISTAT_STALL;
    d556:	ldr	r3, [pc, #48]	; (d588 <usb_isr+0x5e4>)
    d558:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    d55a:	movs	r0, #13
    d55c:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    d55e:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    d560:	lsls	r2, r4, #30
    d562:	bpl.w	d338 <usb_isr+0x394>
    d566:	b.n	d32a <usb_isr+0x386>
					//serial_phex(*buf);
					*dst++ = *buf++;
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    d568:	ldr	r2, [pc, #92]	; (d5c8 <usb_isr+0x624>)
    d56a:	movs	r1, #15
    d56c:	strb	r1, [r2, #0]
    d56e:	b.n	d46c <usb_isr+0x4c8>
		// TODO: required by PTP spec
		endpoint0_stall();
		return;
	case 0x67A1: // Get Device Statis (PTP spec, 5.2.4, page 10)
		// For now, always respond with status ok.
		reply_buffer[0] = 0x4;
    d570:	ldr	r4, [pc, #32]	; (d594 <usb_isr+0x5f0>)
    d572:	ldr	r3, [pc, #88]	; (d5cc <usb_isr+0x628>)
    d574:	str	r3, [r4, #0]
		reply_buffer[1] = 0;
		reply_buffer[2] = 0x01;
		reply_buffer[3] = 0x20;
		data = reply_buffer;
		datalen = 4;
    d576:	movs	r0, #4
    d578:	b.n	d38e <usb_isr+0x3ea>
    d57a:	nop
    d57c:	.word	0x1fff2058
    d580:	.word	0x1fff20a0
    d584:	.word	0x40072088
    d588:	.word	0x40072080
    d58c:	.word	0x1fff2091
    d590:	.word	0x1fff1fa0
    d594:	.word	0x1fff2094
    d598:	.word	0x1fff2090
    d59c:	.word	0x1fff2014
    d5a0:	.word	0x1fff1fb8
    d5a4:	.word	0x1fff210c
    d5a8:	.word	0x400720c0
    d5ac:	.word	0x40072094
    d5b0:	.word	0x1fff0000
    d5b4:	.word	0x00400088
    d5b8:	.word	0x40072098
    d5bc:	.word	0x1fff1fbc
    d5c0:	.word	0x1fff2018
    d5c4:	.word	0x00013294
    d5c8:	.word	0x1fff2015
    d5cc:	.word	0x20010004
    d5d0:	.word	0x4007208c
    d5d4:	ldrh	r1, [r5, #4]
    d5d6:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    d5da:	cmp	r1, #6
    d5dc:	bhi.w	d4aa <usb_isr+0x506>
    d5e0:	ldrh	r2, [r5, #2]
    d5e2:	cmp	r2, #0
    d5e4:	bne.w	d4aa <usb_isr+0x506>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    d5e8:	ldr	r4, [pc, #724]	; (d8c0 <usb_isr+0x91c>)
    d5ea:	str	r0, [sp, #8]
    d5ec:	lsls	r1, r1, #2
    d5ee:	add	r4, r1
    d5f0:	ldrb	r1, [r4, #0]
    d5f2:	bic.w	r1, r1, #2
    d5f6:	strb	r1, [r4, #0]
    d5f8:	b.n	d614 <usb_isr+0x670>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    d5fa:	ldrh	r1, [r5, #4]
    d5fc:	cmp	r1, #0
    d5fe:	bne.w	d7d6 <usb_isr+0x832>
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    d602:	ldr	r3, [pc, #704]	; (d8c4 <usb_isr+0x920>)
    d604:	ldr	r2, [pc, #704]	; (d8c8 <usb_isr+0x924>)
			usb_cdc_line_rtsdtr = setup.wValue;
    d606:	ldr	r4, [pc, #708]	; (d8cc <usb_isr+0x928>)
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    d608:	ldr	r3, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    d60a:	ldrb	r5, [r5, #2]
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    d60c:	str	r3, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    d60e:	str	r0, [sp, #8]
    d610:	mov	r2, r1
    d612:	strb	r5, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    d614:	movs	r0, #0
    d616:	str	r0, [sp, #4]
    d618:	mov	r8, r0
    d61a:	mov	lr, r0
    d61c:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    d61e:	ldr	r1, [pc, #688]	; (d8d0 <usb_isr+0x92c>)
    d620:	ldrb	r5, [r1, #0]
    d622:	orr.w	ip, r5, #2
    d626:	add.w	r3, r9, ip, lsl #3
    d62a:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d62c:	ldr	r3, [sp, #8]
    d62e:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    d630:	ldr	r3, [sp, #12]
    d632:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d634:	ite	eq
    d636:	moveq	r4, #136	; 0x88
    d638:	movne	r4, #200	; 0xc8
    d63a:	b.n	d3c4 <usb_isr+0x420>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    d63c:	cmp	r0, #64	; 0x40
    d63e:	bls.w	d3ea <usb_isr+0x446>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    d642:	orr.w	r4, r4, #2
    d646:	add.w	r1, ip, r4, lsl #3
    d64a:	ldr	r6, [sp, #4]
    d64c:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d64e:	cbz	r2, d680 <usb_isr+0x6dc>
	ep0_tx_data_toggle ^= 1;
    d650:	ldrb.w	r1, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d654:	ldr	r2, [pc, #636]	; (d8d4 <usb_isr+0x930>)
	ep0_tx_data_toggle ^= 1;
    d656:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    d658:	mov	r3, r6
    d65a:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    d65c:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    d660:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d662:	str.w	r2, [ip, r4, lsl #3]
    d666:	b.n	d41c <usb_isr+0x478>
	ep0_tx_data_toggle ^= 1;
    d668:	ldrb.w	r3, [sp, #8]
    d66c:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d66e:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    d670:	ldr	r3, [sp, #4]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    d672:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d674:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    d678:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d67a:	str.w	r2, [lr, ip, lsl #3]
    d67e:	b.n	d416 <usb_isr+0x472>
	ep0_tx_data_toggle ^= 1;
    d680:	ldrb.w	r1, [sp, #8]
    d684:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    d686:	ldr	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d688:	ldr	r2, [pc, #588]	; (d8d8 <usb_isr+0x934>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    d68a:	strb.w	r5, [r8]
    d68e:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    d690:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d692:	str.w	r2, [ip, r4, lsl #3]
    d696:	b.n	d41c <usb_isr+0x478>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    d698:	tst.w	r9, #8
    d69c:	ite	eq
    d69e:	moveq	r3, #2
    d6a0:	movne	r3, #3
    d6a2:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    d6a4:	b.n	d038 <usb_isr+0x94>
    d6a6:	ldrh	r1, [r5, #4]
    d6a8:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    d6ac:	cmp	r1, #6
    d6ae:	bhi.w	d4aa <usb_isr+0x506>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    d6b2:	ldr	r3, [pc, #524]	; (d8c0 <usb_isr+0x91c>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    d6b4:	ldr	r4, [pc, #548]	; (d8dc <usb_isr+0x938>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    d6b6:	lsls	r1, r1, #2
    d6b8:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    d6ba:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    d6bc:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    d6be:	ldrb	r2, [r3, #0]
    d6c0:	lsls	r3, r2, #30
    d6c2:	bpl.w	d7da <usb_isr+0x836>
    d6c6:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    d6c8:	movs	r0, #2
    d6ca:	b.n	d38e <usb_isr+0x3ea>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    d6cc:	ldr	r3, [sp, #4]
    d6ce:	mov.w	r2, #1
    d6d2:	strb	r2, [r3, #0]
    d6d4:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    d6d6:	adds	r4, #1
    d6d8:	adds	r3, #1
    d6da:	cmp	r4, #6
    d6dc:	add.w	r6, r6, #4
    d6e0:	add.w	r5, r5, #4
    d6e4:	str	r3, [sp, #4]
    d6e6:	bne.w	d176 <usb_isr+0x1d2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    d6ea:	ldr	r5, [pc, #500]	; (d8e0 <usb_isr+0x93c>)
			*reg = epconf;
    d6ec:	ldr	r1, [pc, #500]	; (d8e4 <usb_isr+0x940>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    d6ee:	ldrb	r2, [r5, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    d6f0:	ldr	r4, [pc, #500]	; (d8e8 <usb_isr+0x944>)
    d6f2:	ldr	r7, [sp, #16]
    d6f4:	ldr	r6, [sp, #20]
    d6f6:	movs	r0, #0
    d6f8:	strb	r0, [r4, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    d6fa:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    d6fc:	lsls	r1, r2, #28
    d6fe:	bmi.w	d80c <usb_isr+0x868>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    d702:	ldrb	r2, [r5, #1]
			*reg = epconf;
    d704:	ldr	r1, [pc, #484]	; (d8ec <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    d706:	ldr.w	r8, [pc, #504]	; d900 <usb_isr+0x95c>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    d70a:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    d70c:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    d70e:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    d710:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    d714:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    d718:	bmi.n	d7de <usb_isr+0x83a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    d71a:	ldrb	r2, [r5, #2]
			*reg = epconf;
    d71c:	ldr	r1, [pc, #464]	; (d8f0 <usb_isr+0x94c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    d71e:	ldr.w	r8, [pc, #480]	; d900 <usb_isr+0x95c>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    d722:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    d724:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    d726:	mov.w	r1, #0
    d72a:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    d72e:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    d732:	bmi.w	d908 <usb_isr+0x964>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    d736:	ldrb	r2, [r5, #3]
			*reg = epconf;
    d738:	ldr	r1, [pc, #440]	; (d8f4 <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    d73a:	ldr.w	r8, [pc, #452]	; d900 <usb_isr+0x95c>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    d73e:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    d740:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    d742:	mov.w	r1, #0
    d746:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    d74a:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    d74e:	bmi.w	d896 <usb_isr+0x8f2>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    d752:	ldr	r1, [pc, #420]	; (d8f8 <usb_isr+0x954>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    d754:	ldrb	r2, [r5, #4]
			*reg = epconf;
    d756:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    d758:	movs	r1, #0
    d75a:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    d75e:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    d762:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    d764:	ldr.w	r8, [pc, #408]	; d900 <usb_isr+0x95c>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    d768:	bmi.n	d868 <usb_isr+0x8c4>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    d76a:	ldrb	r2, [r5, #5]
			*reg = epconf;
    d76c:	ldr	r1, [pc, #396]	; (d8fc <usb_isr+0x958>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    d76e:	ldr	r5, [pc, #400]	; (d900 <usb_isr+0x95c>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    d770:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    d772:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    d774:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    d776:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    d77a:	str.w	r1, [r9, #184]	; 0xb8
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    d77e:	bmi.n	d83a <usb_isr+0x896>
    d780:	ldrb	r3, [r6, #0]
    d782:	str	r3, [sp, #8]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    d784:	movs	r1, #0
    d786:	eor.w	r2, r3, #1
    d78a:	str.w	r1, [r9, #208]	; 0xd0
			table[index(i, TX, ODD)].desc = 0;
    d78e:	str.w	r1, [r9, #216]	; 0xd8
    d792:	b.n	d614 <usb_isr+0x670>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    d794:	ldr	r3, [sp, #4]
    d796:	mov.w	r2, #0
    d79a:	strb	r2, [r3, #0]
    d79c:	b.n	d6d4 <usb_isr+0x730>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    d79e:	ldr	r2, [pc, #356]	; (d904 <usb_isr+0x960>)
    d7a0:	ldr	r4, [pc, #312]	; (d8dc <usb_isr+0x938>)
    d7a2:	ldrb	r2, [r2, #0]
    d7a4:	strb	r2, [r4, #0]
    d7a6:	b.n	d38e <usb_isr+0x3ea>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    d7a8:	movs	r3, #1
    d7aa:	movs	r2, #0
    d7ac:	str	r3, [sp, #8]
    d7ae:	b.n	d614 <usb_isr+0x670>
    d7b0:	ldrh	r1, [r5, #4]
    d7b2:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    d7b6:	cmp	r1, #6
    d7b8:	bhi.w	d4aa <usb_isr+0x506>
    d7bc:	ldrh	r2, [r5, #2]
    d7be:	cmp	r2, #0
    d7c0:	bne.w	d4aa <usb_isr+0x506>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    d7c4:	ldr	r4, [pc, #248]	; (d8c0 <usb_isr+0x91c>)
    d7c6:	str	r0, [sp, #8]
    d7c8:	lsls	r1, r1, #2
    d7ca:	add	r4, r1
    d7cc:	ldrb	r1, [r4, #0]
    d7ce:	orr.w	r1, r1, #2
    d7d2:	strb	r1, [r4, #0]
    d7d4:	b.n	d614 <usb_isr+0x670>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    d7d6:	str	r0, [sp, #8]
    d7d8:	b.n	d614 <usb_isr+0x670>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    d7da:	movs	r0, #2
    d7dc:	b.n	d38e <usb_isr+0x3ea>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    d7de:	bl	cd24 <usb_malloc>
				if (p) {
    d7e2:	cmp	r0, #0
    d7e4:	beq.w	d9be <usb_isr+0xa1a>
					table[index(i, RX, EVEN)].addr = p->buf;
    d7e8:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    d7ea:	ldr	r2, [pc, #236]	; (d8d8 <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    d7ec:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    d7f0:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    d7f4:	bl	cd24 <usb_malloc>
				if (p) {
    d7f8:	cmp	r0, #0
    d7fa:	beq.w	d9b2 <usb_isr+0xa0e>
					table[index(i, RX, ODD)].addr = p->buf;
    d7fe:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    d800:	ldr	r2, [pc, #208]	; (d8d4 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    d802:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    d806:	str.w	r2, [r9, #72]	; 0x48
    d80a:	b.n	d71a <usb_isr+0x776>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    d80c:	bl	cd24 <usb_malloc>
				if (p) {
    d810:	cmp	r0, #0
    d812:	beq.w	d98e <usb_isr+0x9ea>
					table[index(i, RX, EVEN)].addr = p->buf;
    d816:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    d818:	ldr	r2, [pc, #188]	; (d8d8 <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    d81a:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    d81e:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    d822:	bl	cd24 <usb_malloc>
				if (p) {
    d826:	cmp	r0, #0
    d828:	beq.w	d982 <usb_isr+0x9de>
					table[index(i, RX, ODD)].addr = p->buf;
    d82c:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    d82e:	ldr	r2, [pc, #164]	; (d8d4 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    d830:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    d834:	str.w	r2, [r9, #40]	; 0x28
    d838:	b.n	d702 <usb_isr+0x75e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    d83a:	bl	cd24 <usb_malloc>
				if (p) {
    d83e:	cmp	r0, #0
    d840:	beq.w	d976 <usb_isr+0x9d2>
					table[index(i, RX, EVEN)].addr = p->buf;
    d844:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    d846:	ldr	r2, [pc, #144]	; (d8d8 <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    d848:	str.w	r0, [r5, #196]	; 0xc4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    d84c:	str.w	r2, [r5, #192]	; 0xc0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    d850:	bl	cd24 <usb_malloc>
				if (p) {
    d854:	cmp	r0, #0
    d856:	beq.w	d96a <usb_isr+0x9c6>
					table[index(i, RX, ODD)].addr = p->buf;
    d85a:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    d85c:	ldr	r2, [pc, #116]	; (d8d4 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    d85e:	str.w	r0, [r9, #204]	; 0xcc
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    d862:	str.w	r2, [r9, #200]	; 0xc8
    d866:	b.n	d780 <usb_isr+0x7dc>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    d868:	bl	cd24 <usb_malloc>
				if (p) {
    d86c:	cmp	r0, #0
    d86e:	beq.w	d9a6 <usb_isr+0xa02>
					table[index(i, RX, EVEN)].addr = p->buf;
    d872:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    d874:	ldr	r2, [pc, #96]	; (d8d8 <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    d876:	str.w	r0, [r8, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    d87a:	str.w	r2, [r8, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    d87e:	bl	cd24 <usb_malloc>
				if (p) {
    d882:	cmp	r0, #0
    d884:	beq.w	d99a <usb_isr+0x9f6>
					table[index(i, RX, ODD)].addr = p->buf;
    d888:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    d88a:	ldr	r2, [pc, #72]	; (d8d4 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    d88c:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    d890:	str.w	r2, [r9, #168]	; 0xa8
    d894:	b.n	d76a <usb_isr+0x7c6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    d896:	bl	cd24 <usb_malloc>
				if (p) {
    d89a:	cmp	r0, #0
    d89c:	beq.n	d95e <usb_isr+0x9ba>
					table[index(i, RX, EVEN)].addr = p->buf;
    d89e:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    d8a0:	ldr	r2, [pc, #52]	; (d8d8 <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    d8a2:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    d8a6:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    d8aa:	bl	cd24 <usb_malloc>
				if (p) {
    d8ae:	cmp	r0, #0
    d8b0:	beq.n	d952 <usb_isr+0x9ae>
					table[index(i, RX, ODD)].addr = p->buf;
    d8b2:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    d8b4:	ldr	r2, [pc, #28]	; (d8d4 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    d8b6:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    d8ba:	str.w	r2, [r9, #136]	; 0x88
    d8be:	b.n	d752 <usb_isr+0x7ae>
    d8c0:	.word	0x400720c0
    d8c4:	.word	0x1fff1f98
    d8c8:	.word	0x1fff2114
    d8cc:	.word	0x1fff1f94
    d8d0:	.word	0x1fff2090
    d8d4:	.word	0x004000c8
    d8d8:	.word	0x00400088
    d8dc:	.word	0x1fff2094
    d8e0:	.word	0x0001328c
    d8e4:	.word	0x400720c4
    d8e8:	.word	0x1fff2091
    d8ec:	.word	0x400720c8
    d8f0:	.word	0x400720cc
    d8f4:	.word	0x400720d0
    d8f8:	.word	0x400720d4
    d8fc:	.word	0x400720d8
    d900:	.word	0x1fff0000
    d904:	.word	0x1fff209c
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    d908:	bl	cd24 <usb_malloc>
				if (p) {
    d90c:	cmp	r0, #0
    d90e:	beq.n	d9d6 <usb_isr+0xa32>
					table[index(i, RX, EVEN)].addr = p->buf;
    d910:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    d912:	ldr	r2, [pc, #208]	; (d9e4 <usb_isr+0xa40>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    d914:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    d918:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    d91c:	bl	cd24 <usb_malloc>
				if (p) {
    d920:	cmp	r0, #0
    d922:	beq.n	d9ca <usb_isr+0xa26>
					table[index(i, RX, ODD)].addr = p->buf;
    d924:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    d926:	ldr	r2, [pc, #192]	; (d9e8 <usb_isr+0xa44>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    d928:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    d92c:	str.w	r2, [r9, #104]	; 0x68
    d930:	b.n	d736 <usb_isr+0x792>
    d932:	cmp	r0, #64	; 0x40
    d934:	mov	lr, r0
    d936:	it	cs
    d938:	movcs.w	lr, #64	; 0x40
    d93c:	add.w	r3, r4, lr
    d940:	str	r3, [sp, #4]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    d942:	movs	r3, #1
    d944:	rsb	r0, lr, r0
    d948:	mov.w	r8, lr, lsl #16
    d94c:	movs	r2, #0
    d94e:	str	r3, [sp, #8]
    d950:	b.n	d61e <usb_isr+0x67a>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    d952:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    d954:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    d958:	adds	r2, #1
    d95a:	strb	r2, [r4, #0]
    d95c:	b.n	d752 <usb_isr+0x7ae>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    d95e:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    d960:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    d964:	adds	r2, #1
    d966:	strb	r2, [r4, #0]
    d968:	b.n	d8aa <usb_isr+0x906>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    d96a:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    d96c:	str.w	r0, [r9, #200]	; 0xc8
					usb_rx_memory_needed++;
    d970:	adds	r2, #1
    d972:	strb	r2, [r4, #0]
    d974:	b.n	d780 <usb_isr+0x7dc>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    d976:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    d978:	str.w	r0, [r5, #192]	; 0xc0
					usb_rx_memory_needed++;
    d97c:	adds	r2, #1
    d97e:	strb	r2, [r4, #0]
    d980:	b.n	d850 <usb_isr+0x8ac>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    d982:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    d984:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    d988:	adds	r2, #1
    d98a:	strb	r2, [r4, #0]
    d98c:	b.n	d702 <usb_isr+0x75e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    d98e:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    d990:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    d994:	adds	r2, #1
    d996:	strb	r2, [r4, #0]
    d998:	b.n	d822 <usb_isr+0x87e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    d99a:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    d99c:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    d9a0:	adds	r2, #1
    d9a2:	strb	r2, [r4, #0]
    d9a4:	b.n	d76a <usb_isr+0x7c6>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    d9a6:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    d9a8:	str.w	r0, [r8, #160]	; 0xa0
					usb_rx_memory_needed++;
    d9ac:	adds	r2, #1
    d9ae:	strb	r2, [r4, #0]
    d9b0:	b.n	d87e <usb_isr+0x8da>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    d9b2:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    d9b4:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    d9b8:	adds	r2, #1
    d9ba:	strb	r2, [r4, #0]
    d9bc:	b.n	d71a <usb_isr+0x776>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    d9be:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    d9c0:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    d9c4:	adds	r2, #1
    d9c6:	strb	r2, [r4, #0]
    d9c8:	b.n	d7f4 <usb_isr+0x850>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    d9ca:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    d9cc:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    d9d0:	adds	r2, #1
    d9d2:	strb	r2, [r4, #0]
    d9d4:	b.n	d736 <usb_isr+0x792>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    d9d6:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    d9d8:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    d9dc:	adds	r2, #1
    d9de:	strb	r2, [r4, #0]
    d9e0:	b.n	d91c <usb_isr+0x978>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    d9e2:	bkpt	0x0000
    d9e4:	.word	0x00400088
    d9e8:	.word	0x004000c8

0000d9ec <usb_init>:
}



void usb_init(void)
{
    d9ec:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d9f0:	ldr	r4, [pc, #144]	; (da84 <usb_init+0x98>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    d9f2:	bl	c630 <usb_init_serialnumber>

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
    d9f6:	movs	r2, #0
    d9f8:	add.w	r0, r4, #224	; 0xe0
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    d9fc:	mov	r3, r4

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
    d9fe:	str	r2, [r3, #0]
		table[i].addr = 0;
    da00:	str	r2, [r3, #4]
    da02:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    da04:	cmp	r3, r0
		table[i].desc = 0;
    da06:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    da0a:	bne.n	d9fe <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    da0c:	ldr	r0, [pc, #120]	; (da88 <usb_init+0x9c>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    da0e:	ldr	r2, [pc, #124]	; (da8c <usb_init+0xa0>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    da10:	ldr	r3, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    da12:	ldr.w	lr, [pc, #144]	; daa4 <usb_init+0xb8>
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    da16:	ldr	r7, [pc, #120]	; (da90 <usb_init+0xa4>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    da18:	ldr	r5, [pc, #120]	; (da94 <usb_init+0xa8>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    da1a:	ldr	r6, [pc, #124]	; (da98 <usb_init+0xac>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    da1c:	ldr.w	r8, [pc, #136]	; daa8 <usb_init+0xbc>
	USB0_ERRSTAT = 0xFF;
    da20:	ldr.w	ip, [pc, #136]	; daac <usb_init+0xc0>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    da24:	ldr.w	r9, [pc, #136]	; dab0 <usb_init+0xc4>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    da28:	orr.w	r3, r3, #262144	; 0x40000
    da2c:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    da2e:	ldr	r3, [r2, #0]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    da30:	ldr	r0, [pc, #104]	; (da9c <usb_init+0xb0>)

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    da32:	orr.w	r3, r3, #50331648	; 0x3000000
    da36:	str	r3, [r2, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    da38:	ubfx	r3, r4, #8, #8
    da3c:	strb.w	r3, [lr]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    da40:	ubfx	r3, r4, #16, #8
    da44:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    da46:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    da48:	movs	r3, #255	; 0xff
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    da4a:	add.w	r2, r2, #411648	; 0x64800
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    da4e:	strb	r4, [r5, #0]
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    da50:	add.w	r2, r2, #264	; 0x108
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    da54:	strb.w	r3, [r8]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    da58:	ldr	r5, [pc, #68]	; (daa0 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    da5a:	strb.w	r3, [ip]
	USB0_OTGISTAT = 0xFF;
    da5e:	strb	r3, [r6, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    da60:	movs	r3, #1
    da62:	strb.w	r3, [r9]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    da66:	movs	r6, #112	; 0x70

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    da68:	strb.w	r1, [lr, #100]	; 0x64
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    da6c:	mov.w	r4, #2097152	; 0x200000

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    da70:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    da72:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    da76:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    da78:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    da7a:	strb	r1, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    da7c:	add.w	lr, lr, #100	; 0x64
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    da80:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    da84:	.word	0x1fff0000
    da88:	.word	0x40048034
    da8c:	.word	0x4000d800
    da90:	.word	0x400720b0
    da94:	.word	0x400720b4
    da98:	.word	0x40072010
    da9c:	.word	0xe000e104
    daa0:	.word	0xe000e435
    daa4:	.word	0x4007209c
    daa8:	.word	0x40072080
    daac:	.word	0x40072088
    dab0:	.word	0x40072094

0000dab4 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    dab4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    dab8:	ldr	r6, [pc, #196]	; (db80 <yield+0xcc>)
    daba:	ldrb	r3, [r6, #0]
    dabc:	cbz	r3, dae4 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    dabe:	ldr	r7, [pc, #196]	; (db84 <yield+0xd0>)
    dac0:	ldrb	r2, [r7, #0]
    dac2:	cbnz	r2, dae4 <yield+0x30>
	running = 1;
    dac4:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    dac6:	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    dac8:	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    daca:	bmi.n	db3a <yield+0x86>
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIALUSB2) {
		if (SerialUSB2.available()) serialEventUSB2();
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    dacc:	lsls	r2, r3, #30
    dace:	bmi.n	db04 <yield+0x50>
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    dad0:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    dad2:	lsls	r3, r3, #29
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    dad4:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    dad6:	bpl.n	dae4 <yield+0x30>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;  
    dad8:	ldr	r3, [pc, #172]	; (db88 <yield+0xd4>)
    dada:	ldr	r2, [r3, #0]
    dadc:	cbz	r2, dae4 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    dade:	mrs	r2, IPSR
		if (ipsr != 0) return;
    dae2:	cbz	r2, dae8 <yield+0x34>
    dae4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    dae8:	mrs	r1, PRIMASK
		__disable_irq();
    daec:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    daee:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    daf0:	cbz	r0, dafa <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    daf2:	ldr	r4, [pc, #152]	; (db8c <yield+0xd8>)
    daf4:	ldrb	r2, [r4, #0]
    daf6:	cmp	r2, #0
    daf8:	beq.n	db58 <yield+0xa4>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    dafa:	cmp	r1, #0
    dafc:	bne.n	dae4 <yield+0x30>
    dafe:	cpsie	i
    db00:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial_putchar(c); return 1; }
	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    db04:	ldr.w	r8, [pc, #144]	; db98 <yield+0xe4>
    db08:	ldrb.w	r2, [r8]
    db0c:	cmp	r2, #0
    db0e:	beq.n	dad0 <yield+0x1c>
    db10:	ldr.w	r9, [pc, #136]	; db9c <yield+0xe8>
    db14:	movs	r4, #0
    db16:	b.n	db24 <yield+0x70>
    db18:	adds	r4, #1
    db1a:	ldrb.w	r3, [r8]
    db1e:	uxtb	r4, r4
    db20:	cmp	r3, r4
    db22:	bls.n	db4a <yield+0x96>
			s_serials_with_serial_events[i]->doYieldCode();
    db24:	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
	static uint8_t 			s_count_serials_with_serial_events;
	void 		(* const _serialEvent)(); 
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*_serialEvent)();
    db28:	ldr	r3, [r5, #0]
    db2a:	mov	r0, r5
    db2c:	ldr	r3, [r3, #16]
    db2e:	blx	r3
    db30:	cmp	r0, #0
    db32:	beq.n	db18 <yield+0x64>
    db34:	ldr	r3, [r5, #16]
    db36:	blx	r3
    db38:	b.n	db18 <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    db3a:	bl	c344 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    db3e:	cbnz	r0, db74 <yield+0xc0>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    db40:	ldr	r3, [pc, #76]	; (db90 <yield+0xdc>)
    db42:	ldrb	r3, [r3, #0]
    db44:	cbnz	r3, db4e <yield+0x9a>
    db46:	ldrb	r3, [r6, #0]
    db48:	b.n	dacc <yield+0x18>
    db4a:	ldrb	r3, [r6, #0]
    db4c:	b.n	dad0 <yield+0x1c>
    db4e:	ldrb	r3, [r6, #0]
    db50:	and.w	r3, r3, #254	; 0xfe
    db54:	strb	r3, [r6, #0]
    db56:	b.n	dacc <yield+0x18>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    db58:	ldr	r5, [r0, #20]
    db5a:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    db5c:	movs	r3, #1
    db5e:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    db60:	cbz	r5, db7a <yield+0xc6>
			firstYield->_prev = nullptr;
    db62:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    db64:	cbnz	r1, db68 <yield+0xb4>
    db66:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    db68:	movs	r5, #0
    db6a:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    db6c:	ldr	r3, [r0, #8]
    db6e:	blx	r3
		runningFromYield = false;
    db70:	strb	r5, [r4, #0]
    db72:	b.n	dae4 <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    db74:	bl	dde4 <serialEvent()>
    db78:	b.n	db40 <yield+0x8c>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    db7a:	ldr	r3, [pc, #24]	; (db94 <yield+0xe0>)
    db7c:	str	r5, [r3, #0]
    db7e:	b.n	db64 <yield+0xb0>
    db80:	.word	0x1fff0ab8
    db84:	.word	0x1fff20a6
    db88:	.word	0x1fff20b4
    db8c:	.word	0x1fff20b8
    db90:	.word	0x1fff0acc
    db94:	.word	0x1fff20b0
    db98:	.word	0x1fff20d4
    db9c:	.word	0x1fff20bc

0000dba0 <EventResponder::triggerEventNotImmediate()>:
uint8_t _serialEvent_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB1_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;	

void EventResponder::triggerEventNotImmediate()
{
    dba0:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    dba2:	mrs	r2, PRIMASK
		__disable_irq();
    dba6:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    dba8:	ldrb	r3, [r0, #29]
    dbaa:	cbnz	r3, dbba <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    dbac:	ldrb	r1, [r0, #28]
    dbae:	cmp	r1, #1
    dbb0:	beq.n	dbc4 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    dbb2:	cmp	r1, #3
    dbb4:	beq.n	dbd8 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    dbb6:	movs	r3, #1
    dbb8:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    dbba:	cbnz	r2, dbbe <EventResponder::triggerEventNotImmediate()+0x1e>
    dbbc:	cpsie	i
	}
	enableInterrupts(irq);
}
    dbbe:	ldr.w	r4, [sp], #4
    dbc2:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    dbc4:	ldr	r4, [pc, #68]	; (dc0c <EventResponder::triggerEventNotImmediate()+0x6c>)
    dbc6:	ldr	r1, [r4, #0]
    dbc8:	cbz	r1, dbf4 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    dbca:	ldr	r1, [pc, #68]	; (dc10 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    dbcc:	str	r3, [r0, #20]
				_prev = lastYield;
    dbce:	ldr	r3, [r1, #0]
    dbd0:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    dbd2:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    dbd4:	str	r0, [r3, #20]
    dbd6:	b.n	dbb6 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    dbd8:	ldr	r4, [pc, #56]	; (dc14 <EventResponder::triggerEventNotImmediate()+0x74>)
    dbda:	ldr	r1, [r4, #0]
    dbdc:	cbz	r1, dc00 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    dbde:	ldr	r1, [pc, #56]	; (dc18 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    dbe0:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    dbe2:	ldr	r3, [r1, #0]
    dbe4:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    dbe6:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    dbe8:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    dbea:	ldr	r3, [pc, #48]	; (dc1c <EventResponder::triggerEventNotImmediate()+0x7c>)
    dbec:	mov.w	r1, #268435456	; 0x10000000
    dbf0:	str	r1, [r3, #0]
    dbf2:	b.n	dbb6 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    dbf4:	ldr	r3, [pc, #24]	; (dc10 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    dbf6:	str	r1, [r0, #20]
				_prev = nullptr;
    dbf8:	str	r1, [r0, #24]
				firstYield = this;
    dbfa:	str	r0, [r4, #0]
				lastYield = this;
    dbfc:	str	r0, [r3, #0]
    dbfe:	b.n	dbb6 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    dc00:	ldr	r3, [pc, #20]	; (dc18 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    dc02:	str	r1, [r0, #20]
				_prev = nullptr;
    dc04:	str	r1, [r0, #24]
				firstInterrupt = this;
    dc06:	str	r0, [r4, #0]
				lastInterrupt = this;
    dc08:	str	r0, [r3, #0]
    dc0a:	b.n	dbea <EventResponder::triggerEventNotImmediate()+0x4a>
    dc0c:	.word	0x1fff20b4
    dc10:	.word	0x1fff20b0
    dc14:	.word	0x1fff20a8
    dc18:	.word	0x1fff20ac
    dc1c:	.word	0xe000ed04

0000dc20 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    dc20:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    dc22:	mrs	r2, PRIMASK
		__disable_irq();
    dc26:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    dc28:	ldr	r4, [pc, #48]	; (dc5c <EventResponder::runFromInterrupt()+0x3c>)
    dc2a:	ldr	r0, [r4, #0]
		if (first) {
    dc2c:	cbz	r0, dc50 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    dc2e:	ldr	r6, [pc, #48]	; (dc60 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    dc30:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    dc32:	ldr	r3, [r0, #20]
    dc34:	str	r3, [r4, #0]
			if (firstInterrupt) {
    dc36:	cbz	r3, dc56 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    dc38:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    dc3a:	cbnz	r2, dc3e <EventResponder::runFromInterrupt()+0x1e>
    dc3c:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    dc3e:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    dc40:	ldr	r3, [r0, #8]
    dc42:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    dc44:	mrs	r2, PRIMASK
		__disable_irq();
    dc48:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    dc4a:	ldr	r0, [r4, #0]
		if (first) {
    dc4c:	cmp	r0, #0
    dc4e:	bne.n	dc32 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    dc50:	cbnz	r2, dc54 <EventResponder::runFromInterrupt()+0x34>
    dc52:	cpsie	i
    dc54:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    dc56:	str	r3, [r6, #0]
    dc58:	b.n	dc3a <EventResponder::runFromInterrupt()+0x1a>
    dc5a:	nop
    dc5c:	.word	0x1fff20a8
    dc60:	.word	0x1fff20ac

0000dc64 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    dc64:	b.w	dc20 <EventResponder::runFromInterrupt()>

0000dc68 <systick_isr>:

extern "C" volatile uint32_t systick_millis_count;

void systick_isr(void)
{
	systick_millis_count++;
    dc68:	ldr	r2, [pc, #8]	; (dc74 <systick_isr+0xc>)
    dc6a:	ldr	r3, [r2, #0]
    dc6c:	adds	r3, #1
    dc6e:	str	r3, [r2, #0]
    dc70:	bx	lr
    dc72:	nop
    dc74:	.word	0x1fff1f98

0000dc78 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    dc78:	b.w	c360 <usb_serial_flush_input>

0000dc7c <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    dc7c:	b.w	c314 <usb_serial_peekchar>

0000dc80 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    dc80:	b.w	c2cc <usb_serial_getchar>

0000dc84 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    dc84:	b.w	c344 <usb_serial_available>

0000dc88 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    dc88:	b.w	c500 <usb_serial_flush_output>

0000dc8c <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    dc8c:	b.w	c4b8 <usb_serial_write_buffer_free>

0000dc90 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    dc90:	mov	r0, r1
    dc92:	mov	r1, r2
    dc94:	b.w	c398 <usb_serial_write>

0000dc98 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    dc98:	mov	r0, r1
    dc9a:	b.w	c4a0 <usb_serial_putchar>
    dc9e:	nop

0000dca0 <Print::write(unsigned char const*, unsigned int)>:

#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
    dca0:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    dca2:	mov	r6, r1
    dca4:	cbz	r1, dcc4 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    dca6:	cbz	r2, dcc8 <Print::write(unsigned char const*, unsigned int)+0x28>
    dca8:	mov	r7, r0
    dcaa:	mov	r4, r2
    dcac:	movs	r5, #0
    dcae:	ldr	r3, [r7, #0]
    dcb0:	ldrb.w	r1, [r6], #1
    dcb4:	ldr	r3, [r3, #0]
    dcb6:	mov	r0, r7
    dcb8:	blx	r3
    dcba:	subs	r4, #1
    dcbc:	add	r5, r0
    dcbe:	bne.n	dcae <Print::write(unsigned char const*, unsigned int)+0xe>
    dcc0:	mov	r0, r5
    dcc2:	pop	{r3, r4, r5, r6, r7, pc}
#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    dcc4:	mov	r0, r1
    dcc6:	pop	{r3, r4, r5, r6, r7, pc}
    dcc8:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    dcca:	pop	{r3, r4, r5, r6, r7, pc}

0000dccc <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    dccc:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    dcce:	ldr	r2, [pc, #24]	; (dce8 <Print::println()+0x1c>)
	return write(buf, 2);
    dcd0:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    dcd2:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    dcd4:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    dcd6:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    dcd8:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    dcda:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    dcde:	movs	r2, #2
    dce0:	blx	r3
}
    dce2:	add	sp, #12
    dce4:	ldr.w	pc, [sp], #4
    dce8:	.word	0x00013524

0000dcec <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    dcec:	push	{r4, lr}
	((class Print *)file)->write((uint8_t *)ptr, len);
    dcee:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    dcf0:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    dcf2:	ldr	r3, [r3, #4]
    dcf4:	blx	r3
	return len;
}
    dcf6:	mov	r0, r4
    dcf8:	pop	{r4, pc}
    dcfa:	nop

0000dcfc <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    dcfc:	push	{r1, r2, r3}
    dcfe:	push	{lr}
    dd00:	sub	sp, #8
    dd02:	add	r2, sp, #12
    dd04:	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    dd08:	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    dd0a:	bl	fb08 <vdprintf>
#endif
}
    dd0e:	add	sp, #8
    dd10:	ldr.w	lr, [sp], #4
    dd14:	add	sp, #12
    dd16:	bx	lr

0000dd18 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
    dd18:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dd1c:	sub	sp, #72	; 0x48
    dd1e:	ldrb.w	r6, [sp, #104]	; 0x68
    dd22:	ldrb.w	sl, [sp, #108]	; 0x6c
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
    dd26:	cmp	r6, #1
    dd28:	bls.n	ddca <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0xb2>
    dd2a:	mov	r4, r2
    dd2c:	mov	r5, r3
	if (n == 0) {
    dd2e:	orrs.w	r3, r4, r5
    dd32:	mov	r9, r0
    dd34:	beq.n	ddbe <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0xa6>
    dd36:	uxtb	r6, r6
    dd38:	movs	r7, #0
    dd3a:	mov.w	r8, #65	; 0x41
    dd3e:	b.n	dd44 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x2c>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    dd40:	uxtb.w	r8, r3
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    dd44:	mov	r0, r4
    dd46:	mov	r1, r5
    dd48:	mov	r2, r6
    dd4a:	mov	r3, r7
    dd4c:	bl	e7fc <__aeabi_uldivmod>
    dd50:	mov	r1, r3
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    dd52:	cmp	r1, #0
    dd54:	it	eq
    dd56:	cmpeq	r2, #10
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    dd58:	uxtb	r3, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
    dd5a:	mov	r0, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    dd5c:	add	r4, sp, #72	; 0x48
    dd5e:	add.w	lr, r3, #48	; 0x30
    dd62:	add	r4, r8
    dd64:	itte	cs
    dd66:	addcs	r3, #55	; 0x37
    dd68:	uxtbcs.w	lr, r3
    dd6c:	uxtbcc.w	lr, lr
			n /= base;
    dd70:	mov	r3, r7
    dd72:	mov	r1, r5
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    dd74:	strb.w	lr, [r4, #-68]
			n /= base;
    dd78:	mov	r2, r6
    dd7a:	bl	e7fc <__aeabi_uldivmod>
    dd7e:	mov	r4, r0
    dd80:	mov	r5, r1
			if (n == 0) break;
    dd82:	orrs.w	r3, r4, r5
			i--;
    dd86:	add.w	r3, r8, #4294967295
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    dd8a:	bne.n	dd40 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x28>
			i--;
		}
	}
	if (sign) {
    dd8c:	cmp.w	sl, #0
    dd90:	beq.n	dda4 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x8c>
		i--;
    dd92:	add.w	r8, r8, #4294967295
    dd96:	uxtb.w	r8, r8
		buf[i] = '-';
    dd9a:	add	r3, sp, #72	; 0x48
    dd9c:	add	r3, r8
    dd9e:	movs	r2, #45	; 0x2d
    dda0:	strb.w	r2, [r3, #-68]
	}
	return write(buf + i, sizeof(buf) - i);
    dda4:	ldr.w	r3, [r9]
    dda8:	add	r2, sp, #4
    ddaa:	add.w	r1, r2, r8
    ddae:	ldr	r3, [r3, #4]
    ddb0:	mov	r0, r9
    ddb2:	rsb	r2, r8, #66	; 0x42
    ddb6:	blx	r3
}
    ddb8:	add	sp, #72	; 0x48
    ddba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    ddbe:	movs	r3, #48	; 0x30
    ddc0:	strb.w	r3, [sp, #69]	; 0x45
		i = sizeof(buf) - 1;
    ddc4:	mov.w	r8, #65	; 0x41
    ddc8:	b.n	dd8c <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x74>
size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
    ddca:	movs	r0, #0
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    ddcc:	add	sp, #72	; 0x48
    ddce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ddd2:	nop

0000ddd4 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    ddd4:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    ddd6:	bl	1108 <setup>
	while (1) {
		loop();
    ddda:	bl	1364 <loop>
		yield();
    ddde:	bl	dab4 <yield>
    dde2:	b.n	ddda <main+0x6>

0000dde4 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    dde4:	bx	lr
    dde6:	nop

0000dde8 <operator new(unsigned int)>:
    dde8:	b.w	eba0 <malloc>

0000ddec <operator delete(void*, unsigned int)>:
    ddec:	b.w	ebb0 <free>

0000ddf0 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    ddf0:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    ddf2:	ldr	r0, [pc, #164]	; (de98 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    ddf4:	ldr	r2, [pc, #164]	; (de9c <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    ddf6:	ldr	r3, [pc, #168]	; (dea0 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    ddf8:	ldr	r5, [pc, #168]	; (dea4 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    ddfa:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    ddfc:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    ddfe:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    de00:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    de02:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    de04:	ldr	r4, [pc, #160]	; (dea8 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    de06:	cmp	r3, #8
    de08:	beq.n	de6c <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    de0a:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    de0c:	ldr	r0, [pc, #156]	; (deac <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    de0e:	ldr	r1, [pc, #160]	; (deb0 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    de10:	beq.n	de82 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    de12:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    de14:	ite	eq
    de16:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    de18:	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    de1a:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    de1c:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    de1e:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    de20:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    de22:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    de24:	ldr	r3, [pc, #140]	; (deb4 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    de26:	ldr	r1, [pc, #144]	; (deb8 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    de28:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    de2a:	ldr	r2, [pc, #144]	; (debc <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    de2c:	cbz	r3, de5e <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    de2e:	movs	r3, #1
    de30:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    de32:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    de34:	ldr	r3, [pc, #136]	; (dec0 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    de36:	ldr	r1, [pc, #140]	; (dec4 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    de38:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    de3a:	ldr	r2, [pc, #140]	; (dec8 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    de3c:	cmp	r3, #1
    de3e:	bls.n	de8e <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    de40:	cmp	r3, #4
    de42:	bls.n	de64 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    de44:	cmp	r3, #8
    de46:	bls.n	de86 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    de48:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    de4a:	ite	ls
    de4c:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    de4e:	movhi	r3, #135	; 0x87
    de50:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    de52:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    de54:	ldr	r3, [pc, #116]	; (decc <analog_init+0xdc>)
    de56:	movs	r2, #1
    de58:	strb	r2, [r3, #0]
}
    de5a:	pop	{r4, r5}
    de5c:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    de5e:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    de60:	str	r3, [r2, #0]
    de62:	b.n	de34 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    de64:	movs	r3, #132	; 0x84
    de66:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    de68:	str	r3, [r2, #0]
    de6a:	b.n	de54 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    de6c:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    de70:	ldr	r1, [pc, #60]	; (deb0 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    de72:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    de74:	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    de76:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    de78:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    de7a:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    de7c:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    de7e:	str	r3, [r1, #0]
    de80:	b.n	de24 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    de82:	movs	r2, #57	; 0x39
    de84:	b.n	de76 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    de86:	movs	r3, #133	; 0x85
    de88:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    de8a:	str	r3, [r2, #0]
    de8c:	b.n	de54 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    de8e:	movs	r3, #128	; 0x80
    de90:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    de92:	str	r3, [r2, #0]
    de94:	b.n	de54 <analog_init+0x64>
    de96:	nop
    de98:	.word	0x40074000
    de9c:	.word	0x40074001
    dea0:	.word	0x1fff0acd
    dea4:	.word	0x4003b008
    dea8:	.word	0x4003b00c
    deac:	.word	0x400bb008
    deb0:	.word	0x400bb00c
    deb4:	.word	0x1fff20d6
    deb8:	.word	0x4003b020
    debc:	.word	0x400bb020
    dec0:	.word	0x1fff0ace
    dec4:	.word	0x4003b024
    dec8:	.word	0x400bb024
    decc:	.word	0x1fff20d5

0000ded0 <__aeabi_atexit>:
    ded0:	mov	r3, r1
    ded2:	mov	r1, r0
    ded4:	mov	r0, r3
    ded6:	b.w	eb14 <__cxa_atexit>
    deda:	nop

0000dedc <__aeabi_drsub>:
    dedc:	eor.w	r1, r1, #2147483648	; 0x80000000
    dee0:	b.n	dee8 <__adddf3>
    dee2:	nop

0000dee4 <__aeabi_dsub>:
    dee4:	eor.w	r3, r3, #2147483648	; 0x80000000

0000dee8 <__adddf3>:
    dee8:	push	{r4, r5, lr}
    deea:	mov.w	r4, r1, lsl #1
    deee:	mov.w	r5, r3, lsl #1
    def2:	teq	r4, r5
    def6:	it	eq
    def8:	teqeq	r0, r2
    defc:	itttt	ne
    defe:	orrsne.w	ip, r4, r0
    df02:	orrsne.w	ip, r5, r2
    df06:	mvnsne.w	ip, r4, asr #21
    df0a:	mvnsne.w	ip, r5, asr #21
    df0e:	beq.w	e0d6 <__adddf3+0x1ee>
    df12:	mov.w	r4, r4, lsr #21
    df16:	rsbs	r5, r4, r5, lsr #21
    df1a:	it	lt
    df1c:	neglt	r5, r5
    df1e:	ble.n	df3a <__adddf3+0x52>
    df20:	add	r4, r5
    df22:	eor.w	r2, r0, r2
    df26:	eor.w	r3, r1, r3
    df2a:	eor.w	r0, r2, r0
    df2e:	eor.w	r1, r3, r1
    df32:	eor.w	r2, r0, r2
    df36:	eor.w	r3, r1, r3
    df3a:	cmp	r5, #54	; 0x36
    df3c:	it	hi
    df3e:	pophi	{r4, r5, pc}
    df40:	tst.w	r1, #2147483648	; 0x80000000
    df44:	mov.w	r1, r1, lsl #12
    df48:	mov.w	ip, #1048576	; 0x100000
    df4c:	orr.w	r1, ip, r1, lsr #12
    df50:	beq.n	df58 <__adddf3+0x70>
    df52:	negs	r0, r0
    df54:	sbc.w	r1, r1, r1, lsl #1
    df58:	tst.w	r3, #2147483648	; 0x80000000
    df5c:	mov.w	r3, r3, lsl #12
    df60:	orr.w	r3, ip, r3, lsr #12
    df64:	beq.n	df6c <__adddf3+0x84>
    df66:	negs	r2, r2
    df68:	sbc.w	r3, r3, r3, lsl #1
    df6c:	teq	r4, r5
    df70:	beq.w	e0c2 <__adddf3+0x1da>
    df74:	sub.w	r4, r4, #1
    df78:	rsbs	lr, r5, #32
    df7c:	blt.n	df9a <__adddf3+0xb2>
    df7e:	lsl.w	ip, r2, lr
    df82:	lsr.w	r2, r2, r5
    df86:	adds	r0, r0, r2
    df88:	adc.w	r1, r1, #0
    df8c:	lsl.w	r2, r3, lr
    df90:	adds	r0, r0, r2
    df92:	asr.w	r3, r3, r5
    df96:	adcs	r1, r3
    df98:	b.n	dfb8 <__adddf3+0xd0>
    df9a:	sub.w	r5, r5, #32
    df9e:	add.w	lr, lr, #32
    dfa2:	cmp	r2, #1
    dfa4:	lsl.w	ip, r3, lr
    dfa8:	it	cs
    dfaa:	orrcs.w	ip, ip, #2
    dfae:	asr.w	r3, r3, r5
    dfb2:	adds	r0, r0, r3
    dfb4:	adcs.w	r1, r1, r3, asr #31
    dfb8:	and.w	r5, r1, #2147483648	; 0x80000000
    dfbc:	bpl.n	dfce <__adddf3+0xe6>
    dfbe:	mov.w	lr, #0
    dfc2:	rsbs	ip, ip, #0
    dfc6:	sbcs.w	r0, lr, r0
    dfca:	sbc.w	r1, lr, r1
    dfce:	cmp.w	r1, #1048576	; 0x100000
    dfd2:	bcc.n	e00c <__adddf3+0x124>
    dfd4:	cmp.w	r1, #2097152	; 0x200000
    dfd8:	bcc.n	dff4 <__adddf3+0x10c>
    dfda:	lsrs	r1, r1, #1
    dfdc:	movs.w	r0, r0, rrx
    dfe0:	mov.w	ip, ip, rrx
    dfe4:	add.w	r4, r4, #1
    dfe8:	mov.w	r2, r4, lsl #21
    dfec:	cmn.w	r2, #4194304	; 0x400000
    dff0:	bcs.w	e128 <__adddf3+0x240>
    dff4:	cmp.w	ip, #2147483648	; 0x80000000
    dff8:	it	eq
    dffa:	movseq.w	ip, r0, lsr #1
    dffe:	adcs.w	r0, r0, #0
    e002:	adc.w	r1, r1, r4, lsl #20
    e006:	orr.w	r1, r1, r5
    e00a:	pop	{r4, r5, pc}
    e00c:	movs.w	ip, ip, lsl #1
    e010:	adcs	r0, r0
    e012:	adc.w	r1, r1, r1
    e016:	tst.w	r1, #1048576	; 0x100000
    e01a:	sub.w	r4, r4, #1
    e01e:	bne.n	dff4 <__adddf3+0x10c>
    e020:	teq	r1, #0
    e024:	itt	eq
    e026:	moveq	r1, r0
    e028:	moveq	r0, #0
    e02a:	clz	r3, r1
    e02e:	it	eq
    e030:	addeq	r3, #32
    e032:	sub.w	r3, r3, #11
    e036:	subs.w	r2, r3, #32
    e03a:	bge.n	e056 <__adddf3+0x16e>
    e03c:	adds	r2, #12
    e03e:	ble.n	e052 <__adddf3+0x16a>
    e040:	add.w	ip, r2, #20
    e044:	rsb	r2, r2, #12
    e048:	lsl.w	r0, r1, ip
    e04c:	lsr.w	r1, r1, r2
    e050:	b.n	e06c <__adddf3+0x184>
    e052:	add.w	r2, r2, #20
    e056:	it	le
    e058:	rsble	ip, r2, #32
    e05c:	lsl.w	r1, r1, r2
    e060:	lsr.w	ip, r0, ip
    e064:	itt	le
    e066:	orrle.w	r1, r1, ip
    e06a:	lslle	r0, r2
    e06c:	subs	r4, r4, r3
    e06e:	ittt	ge
    e070:	addge.w	r1, r1, r4, lsl #20
    e074:	orrge	r1, r5
    e076:	popge	{r4, r5, pc}
    e078:	mvn.w	r4, r4
    e07c:	subs	r4, #31
    e07e:	bge.n	e0ba <__adddf3+0x1d2>
    e080:	adds	r4, #12
    e082:	bgt.n	e0a2 <__adddf3+0x1ba>
    e084:	add.w	r4, r4, #20
    e088:	rsb	r2, r4, #32
    e08c:	lsr.w	r0, r0, r4
    e090:	lsl.w	r3, r1, r2
    e094:	orr.w	r0, r0, r3
    e098:	lsr.w	r3, r1, r4
    e09c:	orr.w	r1, r5, r3
    e0a0:	pop	{r4, r5, pc}
    e0a2:	rsb	r4, r4, #12
    e0a6:	rsb	r2, r4, #32
    e0aa:	lsr.w	r0, r0, r2
    e0ae:	lsl.w	r3, r1, r4
    e0b2:	orr.w	r0, r0, r3
    e0b6:	mov	r1, r5
    e0b8:	pop	{r4, r5, pc}
    e0ba:	lsr.w	r0, r1, r4
    e0be:	mov	r1, r5
    e0c0:	pop	{r4, r5, pc}
    e0c2:	teq	r4, #0
    e0c6:	eor.w	r3, r3, #1048576	; 0x100000
    e0ca:	itte	eq
    e0cc:	eoreq.w	r1, r1, #1048576	; 0x100000
    e0d0:	addeq	r4, #1
    e0d2:	subne	r5, #1
    e0d4:	b.n	df74 <__adddf3+0x8c>
    e0d6:	mvns.w	ip, r4, asr #21
    e0da:	it	ne
    e0dc:	mvnsne.w	ip, r5, asr #21
    e0e0:	beq.n	e136 <__adddf3+0x24e>
    e0e2:	teq	r4, r5
    e0e6:	it	eq
    e0e8:	teqeq	r0, r2
    e0ec:	beq.n	e0fa <__adddf3+0x212>
    e0ee:	orrs.w	ip, r4, r0
    e0f2:	itt	eq
    e0f4:	moveq	r1, r3
    e0f6:	moveq	r0, r2
    e0f8:	pop	{r4, r5, pc}
    e0fa:	teq	r1, r3
    e0fe:	ittt	ne
    e100:	movne	r1, #0
    e102:	movne	r0, #0
    e104:	popne	{r4, r5, pc}
    e106:	movs.w	ip, r4, lsr #21
    e10a:	bne.n	e118 <__adddf3+0x230>
    e10c:	lsls	r0, r0, #1
    e10e:	adcs	r1, r1
    e110:	it	cs
    e112:	orrcs.w	r1, r1, #2147483648	; 0x80000000
    e116:	pop	{r4, r5, pc}
    e118:	adds.w	r4, r4, #4194304	; 0x400000
    e11c:	itt	cc
    e11e:	addcc.w	r1, r1, #1048576	; 0x100000
    e122:	popcc	{r4, r5, pc}
    e124:	and.w	r5, r1, #2147483648	; 0x80000000
    e128:	orr.w	r1, r5, #2130706432	; 0x7f000000
    e12c:	orr.w	r1, r1, #15728640	; 0xf00000
    e130:	mov.w	r0, #0
    e134:	pop	{r4, r5, pc}
    e136:	mvns.w	ip, r4, asr #21
    e13a:	itte	ne
    e13c:	movne	r1, r3
    e13e:	movne	r0, r2
    e140:	mvnseq.w	ip, r5, asr #21
    e144:	itt	ne
    e146:	movne	r3, r1
    e148:	movne	r2, r0
    e14a:	orrs.w	r4, r0, r1, lsl #12
    e14e:	itte	eq
    e150:	orrseq.w	r5, r2, r3, lsl #12
    e154:	teqeq	r1, r3
    e158:	orrne.w	r1, r1, #524288	; 0x80000
    e15c:	pop	{r4, r5, pc}
    e15e:	nop

0000e160 <__aeabi_ui2d>:
    e160:	teq	r0, #0
    e164:	itt	eq
    e166:	moveq	r1, #0
    e168:	bxeq	lr
    e16a:	push	{r4, r5, lr}
    e16c:	mov.w	r4, #1024	; 0x400
    e170:	add.w	r4, r4, #50	; 0x32
    e174:	mov.w	r5, #0
    e178:	mov.w	r1, #0
    e17c:	b.n	e020 <__adddf3+0x138>
    e17e:	nop

0000e180 <__aeabi_i2d>:
    e180:	teq	r0, #0
    e184:	itt	eq
    e186:	moveq	r1, #0
    e188:	bxeq	lr
    e18a:	push	{r4, r5, lr}
    e18c:	mov.w	r4, #1024	; 0x400
    e190:	add.w	r4, r4, #50	; 0x32
    e194:	ands.w	r5, r0, #2147483648	; 0x80000000
    e198:	it	mi
    e19a:	negmi	r0, r0
    e19c:	mov.w	r1, #0
    e1a0:	b.n	e020 <__adddf3+0x138>
    e1a2:	nop

0000e1a4 <__aeabi_f2d>:
    e1a4:	lsls	r2, r0, #1
    e1a6:	mov.w	r1, r2, asr #3
    e1aa:	mov.w	r1, r1, rrx
    e1ae:	mov.w	r0, r2, lsl #28
    e1b2:	itttt	ne
    e1b4:	andsne.w	r3, r2, #4278190080	; 0xff000000
    e1b8:	teqne	r3, #4278190080	; 0xff000000
    e1bc:	eorne.w	r1, r1, #939524096	; 0x38000000
    e1c0:	bxne	lr
    e1c2:	teq	r2, #0
    e1c6:	ite	ne
    e1c8:	teqne	r3, #4278190080	; 0xff000000
    e1cc:	bxeq	lr
    e1ce:	push	{r4, r5, lr}
    e1d0:	mov.w	r4, #896	; 0x380
    e1d4:	and.w	r5, r1, #2147483648	; 0x80000000
    e1d8:	bic.w	r1, r1, #2147483648	; 0x80000000
    e1dc:	b.n	e020 <__adddf3+0x138>
    e1de:	nop

0000e1e0 <__aeabi_ul2d>:
    e1e0:	orrs.w	r2, r0, r1
    e1e4:	it	eq
    e1e6:	bxeq	lr
    e1e8:	push	{r4, r5, lr}
    e1ea:	mov.w	r5, #0
    e1ee:	b.n	e206 <__aeabi_l2d+0x16>

0000e1f0 <__aeabi_l2d>:
    e1f0:	orrs.w	r2, r0, r1
    e1f4:	it	eq
    e1f6:	bxeq	lr
    e1f8:	push	{r4, r5, lr}
    e1fa:	ands.w	r5, r1, #2147483648	; 0x80000000
    e1fe:	bpl.n	e206 <__aeabi_l2d+0x16>
    e200:	negs	r0, r0
    e202:	sbc.w	r1, r1, r1, lsl #1
    e206:	mov.w	r4, #1024	; 0x400
    e20a:	add.w	r4, r4, #50	; 0x32
    e20e:	movs.w	ip, r1, lsr #22
    e212:	beq.w	dfce <__adddf3+0xe6>
    e216:	mov.w	r2, #3
    e21a:	movs.w	ip, ip, lsr #3
    e21e:	it	ne
    e220:	addne	r2, #3
    e222:	movs.w	ip, ip, lsr #3
    e226:	it	ne
    e228:	addne	r2, #3
    e22a:	add.w	r2, r2, ip, lsr #3
    e22e:	rsb	r3, r2, #32
    e232:	lsl.w	ip, r0, r3
    e236:	lsr.w	r0, r0, r2
    e23a:	lsl.w	lr, r1, r3
    e23e:	orr.w	r0, r0, lr
    e242:	lsr.w	r1, r1, r2
    e246:	add	r4, r2
    e248:	b.n	dfce <__adddf3+0xe6>
    e24a:	nop

0000e24c <__aeabi_dmul>:
    e24c:	push	{r4, r5, r6, lr}
    e24e:	mov.w	ip, #255	; 0xff
    e252:	orr.w	ip, ip, #1792	; 0x700
    e256:	ands.w	r4, ip, r1, lsr #20
    e25a:	ittte	ne
    e25c:	andsne.w	r5, ip, r3, lsr #20
    e260:	teqne	r4, ip
    e264:	teqne	r5, ip
    e268:	bleq	e428 <__aeabi_dmul+0x1dc>
    e26c:	add	r4, r5
    e26e:	eor.w	r6, r1, r3
    e272:	bic.w	r1, r1, ip, lsl #21
    e276:	bic.w	r3, r3, ip, lsl #21
    e27a:	orrs.w	r5, r0, r1, lsl #12
    e27e:	it	ne
    e280:	orrsne.w	r5, r2, r3, lsl #12
    e284:	orr.w	r1, r1, #1048576	; 0x100000
    e288:	orr.w	r3, r3, #1048576	; 0x100000
    e28c:	beq.n	e300 <__aeabi_dmul+0xb4>
    e28e:	umull	ip, lr, r0, r2
    e292:	mov.w	r5, #0
    e296:	umlal	lr, r5, r1, r2
    e29a:	and.w	r2, r6, #2147483648	; 0x80000000
    e29e:	umlal	lr, r5, r0, r3
    e2a2:	mov.w	r6, #0
    e2a6:	umlal	r5, r6, r1, r3
    e2aa:	teq	ip, #0
    e2ae:	it	ne
    e2b0:	orrne.w	lr, lr, #1
    e2b4:	sub.w	r4, r4, #255	; 0xff
    e2b8:	cmp.w	r6, #512	; 0x200
    e2bc:	sbc.w	r4, r4, #768	; 0x300
    e2c0:	bcs.n	e2cc <__aeabi_dmul+0x80>
    e2c2:	movs.w	lr, lr, lsl #1
    e2c6:	adcs	r5, r5
    e2c8:	adc.w	r6, r6, r6
    e2cc:	orr.w	r1, r2, r6, lsl #11
    e2d0:	orr.w	r1, r1, r5, lsr #21
    e2d4:	mov.w	r0, r5, lsl #11
    e2d8:	orr.w	r0, r0, lr, lsr #21
    e2dc:	mov.w	lr, lr, lsl #11
    e2e0:	subs.w	ip, r4, #253	; 0xfd
    e2e4:	it	hi
    e2e6:	cmphi.w	ip, #1792	; 0x700
    e2ea:	bhi.n	e32a <__aeabi_dmul+0xde>
    e2ec:	cmp.w	lr, #2147483648	; 0x80000000
    e2f0:	it	eq
    e2f2:	movseq.w	lr, r0, lsr #1
    e2f6:	adcs.w	r0, r0, #0
    e2fa:	adc.w	r1, r1, r4, lsl #20
    e2fe:	pop	{r4, r5, r6, pc}
    e300:	and.w	r6, r6, #2147483648	; 0x80000000
    e304:	orr.w	r1, r6, r1
    e308:	orr.w	r0, r0, r2
    e30c:	eor.w	r1, r1, r3
    e310:	subs.w	r4, r4, ip, lsr #1
    e314:	ittt	gt
    e316:	rsbsgt	r5, r4, ip
    e31a:	orrgt.w	r1, r1, r4, lsl #20
    e31e:	popgt	{r4, r5, r6, pc}
    e320:	orr.w	r1, r1, #1048576	; 0x100000
    e324:	mov.w	lr, #0
    e328:	subs	r4, #1
    e32a:	bgt.w	e484 <__aeabi_dmul+0x238>
    e32e:	cmn.w	r4, #54	; 0x36
    e332:	ittt	le
    e334:	movle	r0, #0
    e336:	andle.w	r1, r1, #2147483648	; 0x80000000
    e33a:	pople	{r4, r5, r6, pc}
    e33c:	rsb	r4, r4, #0
    e340:	subs	r4, #32
    e342:	bge.n	e3b0 <__aeabi_dmul+0x164>
    e344:	adds	r4, #12
    e346:	bgt.n	e380 <__aeabi_dmul+0x134>
    e348:	add.w	r4, r4, #20
    e34c:	rsb	r5, r4, #32
    e350:	lsl.w	r3, r0, r5
    e354:	lsr.w	r0, r0, r4
    e358:	lsl.w	r2, r1, r5
    e35c:	orr.w	r0, r0, r2
    e360:	and.w	r2, r1, #2147483648	; 0x80000000
    e364:	bic.w	r1, r1, #2147483648	; 0x80000000
    e368:	adds.w	r0, r0, r3, lsr #31
    e36c:	lsr.w	r6, r1, r4
    e370:	adc.w	r1, r2, r6
    e374:	orrs.w	lr, lr, r3, lsl #1
    e378:	it	eq
    e37a:	biceq.w	r0, r0, r3, lsr #31
    e37e:	pop	{r4, r5, r6, pc}
    e380:	rsb	r4, r4, #12
    e384:	rsb	r5, r4, #32
    e388:	lsl.w	r3, r0, r4
    e38c:	lsr.w	r0, r0, r5
    e390:	lsl.w	r2, r1, r4
    e394:	orr.w	r0, r0, r2
    e398:	and.w	r1, r1, #2147483648	; 0x80000000
    e39c:	adds.w	r0, r0, r3, lsr #31
    e3a0:	adc.w	r1, r1, #0
    e3a4:	orrs.w	lr, lr, r3, lsl #1
    e3a8:	it	eq
    e3aa:	biceq.w	r0, r0, r3, lsr #31
    e3ae:	pop	{r4, r5, r6, pc}
    e3b0:	rsb	r5, r4, #32
    e3b4:	lsl.w	r2, r0, r5
    e3b8:	orr.w	lr, lr, r2
    e3bc:	lsr.w	r3, r0, r4
    e3c0:	lsl.w	r2, r1, r5
    e3c4:	orr.w	r3, r3, r2
    e3c8:	lsr.w	r0, r1, r4
    e3cc:	and.w	r1, r1, #2147483648	; 0x80000000
    e3d0:	lsr.w	r2, r1, r4
    e3d4:	bic.w	r0, r0, r2
    e3d8:	add.w	r0, r0, r3, lsr #31
    e3dc:	orrs.w	lr, lr, r3, lsl #1
    e3e0:	it	eq
    e3e2:	biceq.w	r0, r0, r3, lsr #31
    e3e6:	pop	{r4, r5, r6, pc}
    e3e8:	teq	r4, #0
    e3ec:	bne.n	e40e <__aeabi_dmul+0x1c2>
    e3ee:	and.w	r6, r1, #2147483648	; 0x80000000
    e3f2:	lsls	r0, r0, #1
    e3f4:	adc.w	r1, r1, r1
    e3f8:	tst.w	r1, #1048576	; 0x100000
    e3fc:	it	eq
    e3fe:	subeq	r4, #1
    e400:	beq.n	e3f2 <__aeabi_dmul+0x1a6>
    e402:	orr.w	r1, r1, r6
    e406:	teq	r5, #0
    e40a:	it	ne
    e40c:	bxne	lr
    e40e:	and.w	r6, r3, #2147483648	; 0x80000000
    e412:	lsls	r2, r2, #1
    e414:	adc.w	r3, r3, r3
    e418:	tst.w	r3, #1048576	; 0x100000
    e41c:	it	eq
    e41e:	subeq	r5, #1
    e420:	beq.n	e412 <__aeabi_dmul+0x1c6>
    e422:	orr.w	r3, r3, r6
    e426:	bx	lr
    e428:	teq	r4, ip
    e42c:	and.w	r5, ip, r3, lsr #20
    e430:	it	ne
    e432:	teqne	r5, ip
    e436:	beq.n	e452 <__aeabi_dmul+0x206>
    e438:	orrs.w	r6, r0, r1, lsl #1
    e43c:	it	ne
    e43e:	orrsne.w	r6, r2, r3, lsl #1
    e442:	bne.n	e3e8 <__aeabi_dmul+0x19c>
    e444:	eor.w	r1, r1, r3
    e448:	and.w	r1, r1, #2147483648	; 0x80000000
    e44c:	mov.w	r0, #0
    e450:	pop	{r4, r5, r6, pc}
    e452:	orrs.w	r6, r0, r1, lsl #1
    e456:	itte	eq
    e458:	moveq	r0, r2
    e45a:	moveq	r1, r3
    e45c:	orrsne.w	r6, r2, r3, lsl #1
    e460:	beq.n	e496 <__aeabi_dmul+0x24a>
    e462:	teq	r4, ip
    e466:	bne.n	e46e <__aeabi_dmul+0x222>
    e468:	orrs.w	r6, r0, r1, lsl #12
    e46c:	bne.n	e496 <__aeabi_dmul+0x24a>
    e46e:	teq	r5, ip
    e472:	bne.n	e480 <__aeabi_dmul+0x234>
    e474:	orrs.w	r6, r2, r3, lsl #12
    e478:	itt	ne
    e47a:	movne	r0, r2
    e47c:	movne	r1, r3
    e47e:	bne.n	e496 <__aeabi_dmul+0x24a>
    e480:	eor.w	r1, r1, r3
    e484:	and.w	r1, r1, #2147483648	; 0x80000000
    e488:	orr.w	r1, r1, #2130706432	; 0x7f000000
    e48c:	orr.w	r1, r1, #15728640	; 0xf00000
    e490:	mov.w	r0, #0
    e494:	pop	{r4, r5, r6, pc}
    e496:	orr.w	r1, r1, #2130706432	; 0x7f000000
    e49a:	orr.w	r1, r1, #16252928	; 0xf80000
    e49e:	pop	{r4, r5, r6, pc}

0000e4a0 <__aeabi_ddiv>:
    e4a0:	push	{r4, r5, r6, lr}
    e4a2:	mov.w	ip, #255	; 0xff
    e4a6:	orr.w	ip, ip, #1792	; 0x700
    e4aa:	ands.w	r4, ip, r1, lsr #20
    e4ae:	ittte	ne
    e4b0:	andsne.w	r5, ip, r3, lsr #20
    e4b4:	teqne	r4, ip
    e4b8:	teqne	r5, ip
    e4bc:	bleq	e60e <__aeabi_ddiv+0x16e>
    e4c0:	sub.w	r4, r4, r5
    e4c4:	eor.w	lr, r1, r3
    e4c8:	orrs.w	r5, r2, r3, lsl #12
    e4cc:	mov.w	r1, r1, lsl #12
    e4d0:	beq.w	e5e4 <__aeabi_ddiv+0x144>
    e4d4:	mov.w	r3, r3, lsl #12
    e4d8:	mov.w	r5, #268435456	; 0x10000000
    e4dc:	orr.w	r3, r5, r3, lsr #4
    e4e0:	orr.w	r3, r3, r2, lsr #24
    e4e4:	mov.w	r2, r2, lsl #8
    e4e8:	orr.w	r5, r5, r1, lsr #4
    e4ec:	orr.w	r5, r5, r0, lsr #24
    e4f0:	mov.w	r6, r0, lsl #8
    e4f4:	and.w	r1, lr, #2147483648	; 0x80000000
    e4f8:	cmp	r5, r3
    e4fa:	it	eq
    e4fc:	cmpeq	r6, r2
    e4fe:	adc.w	r4, r4, #253	; 0xfd
    e502:	add.w	r4, r4, #768	; 0x300
    e506:	bcs.n	e50e <__aeabi_ddiv+0x6e>
    e508:	lsrs	r3, r3, #1
    e50a:	mov.w	r2, r2, rrx
    e50e:	subs	r6, r6, r2
    e510:	sbc.w	r5, r5, r3
    e514:	lsrs	r3, r3, #1
    e516:	mov.w	r2, r2, rrx
    e51a:	mov.w	r0, #1048576	; 0x100000
    e51e:	mov.w	ip, #524288	; 0x80000
    e522:	subs.w	lr, r6, r2
    e526:	sbcs.w	lr, r5, r3
    e52a:	ittt	cs
    e52c:	subcs	r6, r6, r2
    e52e:	movcs	r5, lr
    e530:	orrcs.w	r0, r0, ip
    e534:	lsrs	r3, r3, #1
    e536:	mov.w	r2, r2, rrx
    e53a:	subs.w	lr, r6, r2
    e53e:	sbcs.w	lr, r5, r3
    e542:	ittt	cs
    e544:	subcs	r6, r6, r2
    e546:	movcs	r5, lr
    e548:	orrcs.w	r0, r0, ip, lsr #1
    e54c:	lsrs	r3, r3, #1
    e54e:	mov.w	r2, r2, rrx
    e552:	subs.w	lr, r6, r2
    e556:	sbcs.w	lr, r5, r3
    e55a:	ittt	cs
    e55c:	subcs	r6, r6, r2
    e55e:	movcs	r5, lr
    e560:	orrcs.w	r0, r0, ip, lsr #2
    e564:	lsrs	r3, r3, #1
    e566:	mov.w	r2, r2, rrx
    e56a:	subs.w	lr, r6, r2
    e56e:	sbcs.w	lr, r5, r3
    e572:	ittt	cs
    e574:	subcs	r6, r6, r2
    e576:	movcs	r5, lr
    e578:	orrcs.w	r0, r0, ip, lsr #3
    e57c:	orrs.w	lr, r5, r6
    e580:	beq.n	e5b4 <__aeabi_ddiv+0x114>
    e582:	mov.w	r5, r5, lsl #4
    e586:	orr.w	r5, r5, r6, lsr #28
    e58a:	mov.w	r6, r6, lsl #4
    e58e:	mov.w	r3, r3, lsl #3
    e592:	orr.w	r3, r3, r2, lsr #29
    e596:	mov.w	r2, r2, lsl #3
    e59a:	movs.w	ip, ip, lsr #4
    e59e:	bne.n	e522 <__aeabi_ddiv+0x82>
    e5a0:	tst.w	r1, #1048576	; 0x100000
    e5a4:	bne.n	e5be <__aeabi_ddiv+0x11e>
    e5a6:	orr.w	r1, r1, r0
    e5aa:	mov.w	r0, #0
    e5ae:	mov.w	ip, #2147483648	; 0x80000000
    e5b2:	b.n	e522 <__aeabi_ddiv+0x82>
    e5b4:	tst.w	r1, #1048576	; 0x100000
    e5b8:	itt	eq
    e5ba:	orreq	r1, r0
    e5bc:	moveq	r0, #0
    e5be:	subs.w	ip, r4, #253	; 0xfd
    e5c2:	it	hi
    e5c4:	cmphi.w	ip, #1792	; 0x700
    e5c8:	bhi.w	e32a <__aeabi_dmul+0xde>
    e5cc:	subs.w	ip, r5, r3
    e5d0:	itt	eq
    e5d2:	subseq.w	ip, r6, r2
    e5d6:	movseq.w	ip, r0, lsr #1
    e5da:	adcs.w	r0, r0, #0
    e5de:	adc.w	r1, r1, r4, lsl #20
    e5e2:	pop	{r4, r5, r6, pc}
    e5e4:	and.w	lr, lr, #2147483648	; 0x80000000
    e5e8:	orr.w	r1, lr, r1, lsr #12
    e5ec:	adds.w	r4, r4, ip, lsr #1
    e5f0:	ittt	gt
    e5f2:	rsbsgt	r5, r4, ip
    e5f6:	orrgt.w	r1, r1, r4, lsl #20
    e5fa:	popgt	{r4, r5, r6, pc}
    e5fc:	orr.w	r1, r1, #1048576	; 0x100000
    e600:	mov.w	lr, #0
    e604:	subs	r4, #1
    e606:	b.n	e32a <__aeabi_dmul+0xde>
    e608:	orr.w	lr, r5, r6
    e60c:	b.n	e32a <__aeabi_dmul+0xde>
    e60e:	and.w	r5, ip, r3, lsr #20
    e612:	teq	r4, ip
    e616:	it	eq
    e618:	teqeq	r5, ip
    e61c:	beq.w	e496 <__aeabi_dmul+0x24a>
    e620:	teq	r4, ip
    e624:	bne.n	e63c <__aeabi_ddiv+0x19c>
    e626:	orrs.w	r4, r0, r1, lsl #12
    e62a:	bne.w	e496 <__aeabi_dmul+0x24a>
    e62e:	teq	r5, ip
    e632:	bne.w	e480 <__aeabi_dmul+0x234>
    e636:	mov	r0, r2
    e638:	mov	r1, r3
    e63a:	b.n	e496 <__aeabi_dmul+0x24a>
    e63c:	teq	r5, ip
    e640:	bne.n	e650 <__aeabi_ddiv+0x1b0>
    e642:	orrs.w	r5, r2, r3, lsl #12
    e646:	beq.w	e444 <__aeabi_dmul+0x1f8>
    e64a:	mov	r0, r2
    e64c:	mov	r1, r3
    e64e:	b.n	e496 <__aeabi_dmul+0x24a>
    e650:	orrs.w	r6, r0, r1, lsl #1
    e654:	it	ne
    e656:	orrsne.w	r6, r2, r3, lsl #1
    e65a:	bne.w	e3e8 <__aeabi_dmul+0x19c>
    e65e:	orrs.w	r4, r0, r1, lsl #1
    e662:	bne.w	e480 <__aeabi_dmul+0x234>
    e666:	orrs.w	r5, r2, r3, lsl #1
    e66a:	bne.w	e444 <__aeabi_dmul+0x1f8>
    e66e:	b.n	e496 <__aeabi_dmul+0x24a>

0000e670 <__gedf2>:
    e670:	mov.w	ip, #4294967295
    e674:	b.n	e684 <__cmpdf2+0x4>
    e676:	nop

0000e678 <__ledf2>:
    e678:	mov.w	ip, #1
    e67c:	b.n	e684 <__cmpdf2+0x4>
    e67e:	nop

0000e680 <__cmpdf2>:
    e680:	mov.w	ip, #1
    e684:	str.w	ip, [sp, #-4]!
    e688:	mov.w	ip, r1, lsl #1
    e68c:	mvns.w	ip, ip, asr #21
    e690:	mov.w	ip, r3, lsl #1
    e694:	it	ne
    e696:	mvnsne.w	ip, ip, asr #21
    e69a:	beq.n	e6d4 <__cmpdf2+0x54>
    e69c:	add	sp, #4
    e69e:	orrs.w	ip, r0, r1, lsl #1
    e6a2:	ite	eq
    e6a4:	orrseq.w	ip, r2, r3, lsl #1
    e6a8:	teqne	r1, r3
    e6ac:	ittt	eq
    e6ae:	teqeq	r0, r2
    e6b2:	moveq	r0, #0
    e6b4:	bxeq	lr
    e6b6:	cmn.w	r0, #0
    e6ba:	teq	r1, r3
    e6be:	it	pl
    e6c0:	cmppl	r1, r3
    e6c2:	it	eq
    e6c4:	cmpeq	r0, r2
    e6c6:	ite	cs
    e6c8:	asrcs	r0, r3, #31
    e6ca:	mvncc.w	r0, r3, asr #31
    e6ce:	orr.w	r0, r0, #1
    e6d2:	bx	lr
    e6d4:	mov.w	ip, r1, lsl #1
    e6d8:	mvns.w	ip, ip, asr #21
    e6dc:	bne.n	e6e4 <__cmpdf2+0x64>
    e6de:	orrs.w	ip, r0, r1, lsl #12
    e6e2:	bne.n	e6f4 <__cmpdf2+0x74>
    e6e4:	mov.w	ip, r3, lsl #1
    e6e8:	mvns.w	ip, ip, asr #21
    e6ec:	bne.n	e69c <__cmpdf2+0x1c>
    e6ee:	orrs.w	ip, r2, r3, lsl #12
    e6f2:	beq.n	e69c <__cmpdf2+0x1c>
    e6f4:	ldr.w	r0, [sp], #4
    e6f8:	bx	lr
    e6fa:	nop

0000e6fc <__aeabi_cdrcmple>:
    e6fc:	mov	ip, r0
    e6fe:	mov	r0, r2
    e700:	mov	r2, ip
    e702:	mov	ip, r1
    e704:	mov	r1, r3
    e706:	mov	r3, ip
    e708:	b.n	e70c <__aeabi_cdcmpeq>
    e70a:	nop

0000e70c <__aeabi_cdcmpeq>:
    e70c:	push	{r0, lr}
    e70e:	bl	e680 <__cmpdf2>
    e712:	cmp	r0, #0
    e714:	it	mi
    e716:	cmnmi.w	r0, #0
    e71a:	pop	{r0, pc}

0000e71c <__aeabi_dcmpeq>:
    e71c:	str.w	lr, [sp, #-8]!
    e720:	bl	e70c <__aeabi_cdcmpeq>
    e724:	ite	eq
    e726:	moveq	r0, #1
    e728:	movne	r0, #0
    e72a:	ldr.w	pc, [sp], #8
    e72e:	nop

0000e730 <__aeabi_dcmplt>:
    e730:	str.w	lr, [sp, #-8]!
    e734:	bl	e70c <__aeabi_cdcmpeq>
    e738:	ite	cc
    e73a:	movcc	r0, #1
    e73c:	movcs	r0, #0
    e73e:	ldr.w	pc, [sp], #8
    e742:	nop

0000e744 <__aeabi_dcmple>:
    e744:	str.w	lr, [sp, #-8]!
    e748:	bl	e70c <__aeabi_cdcmpeq>
    e74c:	ite	ls
    e74e:	movls	r0, #1
    e750:	movhi	r0, #0
    e752:	ldr.w	pc, [sp], #8
    e756:	nop

0000e758 <__aeabi_dcmpge>:
    e758:	str.w	lr, [sp, #-8]!
    e75c:	bl	e6fc <__aeabi_cdrcmple>
    e760:	ite	ls
    e762:	movls	r0, #1
    e764:	movhi	r0, #0
    e766:	ldr.w	pc, [sp], #8
    e76a:	nop

0000e76c <__aeabi_dcmpgt>:
    e76c:	str.w	lr, [sp, #-8]!
    e770:	bl	e6fc <__aeabi_cdrcmple>
    e774:	ite	cc
    e776:	movcc	r0, #1
    e778:	movcs	r0, #0
    e77a:	ldr.w	pc, [sp], #8
    e77e:	nop

0000e780 <__aeabi_dcmpun>:
    e780:	mov.w	ip, r1, lsl #1
    e784:	mvns.w	ip, ip, asr #21
    e788:	bne.n	e790 <__aeabi_dcmpun+0x10>
    e78a:	orrs.w	ip, r0, r1, lsl #12
    e78e:	bne.n	e7a6 <__aeabi_dcmpun+0x26>
    e790:	mov.w	ip, r3, lsl #1
    e794:	mvns.w	ip, ip, asr #21
    e798:	bne.n	e7a0 <__aeabi_dcmpun+0x20>
    e79a:	orrs.w	ip, r2, r3, lsl #12
    e79e:	bne.n	e7a6 <__aeabi_dcmpun+0x26>
    e7a0:	mov.w	r0, #0
    e7a4:	bx	lr
    e7a6:	mov.w	r0, #1
    e7aa:	bx	lr

0000e7ac <__aeabi_d2iz>:
    e7ac:	mov.w	r2, r1, lsl #1
    e7b0:	adds.w	r2, r2, #2097152	; 0x200000
    e7b4:	bcs.n	e7e2 <__aeabi_d2iz+0x36>
    e7b6:	bpl.n	e7dc <__aeabi_d2iz+0x30>
    e7b8:	mvn.w	r3, #992	; 0x3e0
    e7bc:	subs.w	r2, r3, r2, asr #21
    e7c0:	bls.n	e7e8 <__aeabi_d2iz+0x3c>
    e7c2:	mov.w	r3, r1, lsl #11
    e7c6:	orr.w	r3, r3, #2147483648	; 0x80000000
    e7ca:	orr.w	r3, r3, r0, lsr #21
    e7ce:	tst.w	r1, #2147483648	; 0x80000000
    e7d2:	lsr.w	r0, r3, r2
    e7d6:	it	ne
    e7d8:	negne	r0, r0
    e7da:	bx	lr
    e7dc:	mov.w	r0, #0
    e7e0:	bx	lr
    e7e2:	orrs.w	r0, r0, r1, lsl #12
    e7e6:	bne.n	e7f4 <__aeabi_d2iz+0x48>
    e7e8:	ands.w	r0, r1, #2147483648	; 0x80000000
    e7ec:	it	eq
    e7ee:	mvneq.w	r0, #2147483648	; 0x80000000
    e7f2:	bx	lr
    e7f4:	mov.w	r0, #0
    e7f8:	bx	lr
    e7fa:	nop

0000e7fc <__aeabi_uldivmod>:
    e7fc:	cbnz	r3, e814 <__aeabi_uldivmod+0x18>
    e7fe:	cbnz	r2, e814 <__aeabi_uldivmod+0x18>
    e800:	cmp	r1, #0
    e802:	it	eq
    e804:	cmpeq	r0, #0
    e806:	itt	ne
    e808:	movne.w	r1, #4294967295
    e80c:	movne.w	r0, #4294967295
    e810:	b.w	eb10 <__aeabi_idiv0>
    e814:	sub.w	ip, sp, #8
    e818:	strd	ip, lr, [sp, #-16]!
    e81c:	bl	e82c <__udivmoddi4>
    e820:	ldr.w	lr, [sp, #4]
    e824:	ldrd	r2, r3, [sp, #8]
    e828:	add	sp, #16
    e82a:	bx	lr

0000e82c <__udivmoddi4>:
    e82c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e830:	mov	ip, r1
    e832:	mov	r6, r1
    e834:	mov	r4, r0
    e836:	ldr	r5, [sp, #32]
    e838:	cmp	r3, #0
    e83a:	bne.n	e8de <__udivmoddi4+0xb2>
    e83c:	cmp	r2, r1
    e83e:	mov	r7, r2
    e840:	bls.n	e91c <__udivmoddi4+0xf0>
    e842:	clz	lr, r2
    e846:	cmp.w	lr, #0
    e84a:	beq.n	e864 <__udivmoddi4+0x38>
    e84c:	rsb	r4, lr, #32
    e850:	lsr.w	r4, r0, r4
    e854:	lsl.w	r6, r1, lr
    e858:	orr.w	ip, r4, r6
    e85c:	lsl.w	r7, r2, lr
    e860:	lsl.w	r4, r0, lr
    e864:	mov.w	r9, r7, lsr #16
    e868:	lsrs	r2, r4, #16
    e86a:	udiv	r0, ip, r9
    e86e:	uxth.w	r8, r7
    e872:	mls	r6, r9, r0, ip
    e876:	orr.w	r6, r2, r6, lsl #16
    e87a:	mul.w	r3, r0, r8
    e87e:	cmp	r3, r6
    e880:	bls.n	e896 <__udivmoddi4+0x6a>
    e882:	adds	r6, r6, r7
    e884:	add.w	r2, r0, #4294967295
    e888:	bcs.w	ead0 <__udivmoddi4+0x2a4>
    e88c:	cmp	r3, r6
    e88e:	bls.w	ead0 <__udivmoddi4+0x2a4>
    e892:	subs	r0, #2
    e894:	add	r6, r7
    e896:	subs	r6, r6, r3
    e898:	uxth	r2, r4
    e89a:	udiv	r3, r6, r9
    e89e:	mls	r6, r9, r3, r6
    e8a2:	orr.w	r4, r2, r6, lsl #16
    e8a6:	mul.w	r8, r3, r8
    e8aa:	cmp	r8, r4
    e8ac:	bls.n	e8c2 <__udivmoddi4+0x96>
    e8ae:	adds	r4, r4, r7
    e8b0:	add.w	r2, r3, #4294967295
    e8b4:	bcs.w	eacc <__udivmoddi4+0x2a0>
    e8b8:	cmp	r8, r4
    e8ba:	bls.w	eacc <__udivmoddi4+0x2a0>
    e8be:	subs	r3, #2
    e8c0:	add	r4, r7
    e8c2:	rsb	r4, r8, r4
    e8c6:	orr.w	r0, r3, r0, lsl #16
    e8ca:	movs	r1, #0
    e8cc:	cmp	r5, #0
    e8ce:	beq.n	e996 <__udivmoddi4+0x16a>
    e8d0:	lsr.w	r4, r4, lr
    e8d4:	movs	r3, #0
    e8d6:	str	r4, [r5, #0]
    e8d8:	str	r3, [r5, #4]
    e8da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e8de:	cmp	r3, r1
    e8e0:	bls.n	e8f2 <__udivmoddi4+0xc6>
    e8e2:	cmp	r5, #0
    e8e4:	beq.n	e992 <__udivmoddi4+0x166>
    e8e6:	movs	r1, #0
    e8e8:	stmia.w	r5, {r0, r6}
    e8ec:	mov	r0, r1
    e8ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e8f2:	clz	r1, r3
    e8f6:	cmp	r1, #0
    e8f8:	bne.w	ea1c <__udivmoddi4+0x1f0>
    e8fc:	cmp	r3, r6
    e8fe:	bcc.n	e906 <__udivmoddi4+0xda>
    e900:	cmp	r2, r0
    e902:	bhi.w	eaf6 <__udivmoddi4+0x2ca>
    e906:	subs	r4, r0, r2
    e908:	sbc.w	r6, r6, r3
    e90c:	movs	r0, #1
    e90e:	mov	ip, r6
    e910:	cmp	r5, #0
    e912:	beq.n	e996 <__udivmoddi4+0x16a>
    e914:	stmia.w	r5, {r4, ip}
    e918:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e91c:	cbnz	r2, e924 <__udivmoddi4+0xf8>
    e91e:	movs	r7, #1
    e920:	udiv	r7, r7, r2
    e924:	clz	lr, r7
    e928:	cmp.w	lr, #0
    e92c:	bne.n	e99a <__udivmoddi4+0x16e>
    e92e:	subs	r3, r6, r7
    e930:	mov.w	r8, r7, lsr #16
    e934:	uxth.w	ip, r7
    e938:	movs	r1, #1
    e93a:	udiv	r0, r3, r8
    e93e:	lsrs	r2, r4, #16
    e940:	mls	r6, r8, r0, r3
    e944:	orr.w	r6, r2, r6, lsl #16
    e948:	mul.w	r3, ip, r0
    e94c:	cmp	r3, r6
    e94e:	bls.n	e960 <__udivmoddi4+0x134>
    e950:	adds	r6, r6, r7
    e952:	add.w	r2, r0, #4294967295
    e956:	bcs.n	e95e <__udivmoddi4+0x132>
    e958:	cmp	r3, r6
    e95a:	bhi.w	eafa <__udivmoddi4+0x2ce>
    e95e:	mov	r0, r2
    e960:	subs	r6, r6, r3
    e962:	uxth	r2, r4
    e964:	udiv	r3, r6, r8
    e968:	mls	r6, r8, r3, r6
    e96c:	orr.w	r4, r2, r6, lsl #16
    e970:	mul.w	ip, ip, r3
    e974:	cmp	ip, r4
    e976:	bls.n	e988 <__udivmoddi4+0x15c>
    e978:	adds	r4, r4, r7
    e97a:	add.w	r2, r3, #4294967295
    e97e:	bcs.n	e986 <__udivmoddi4+0x15a>
    e980:	cmp	ip, r4
    e982:	bhi.w	eaf0 <__udivmoddi4+0x2c4>
    e986:	mov	r3, r2
    e988:	rsb	r4, ip, r4
    e98c:	orr.w	r0, r3, r0, lsl #16
    e990:	b.n	e8cc <__udivmoddi4+0xa0>
    e992:	mov	r1, r5
    e994:	mov	r0, r5
    e996:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e99a:	rsb	r1, lr, #32
    e99e:	lsl.w	r3, r6, lr
    e9a2:	lsl.w	r7, r7, lr
    e9a6:	lsr.w	r9, r0, r1
    e9aa:	mov.w	r8, r7, lsr #16
    e9ae:	lsrs	r6, r1
    e9b0:	orr.w	r9, r9, r3
    e9b4:	udiv	sl, r6, r8
    e9b8:	mov.w	r4, r9, lsr #16
    e9bc:	mls	r6, r8, sl, r6
    e9c0:	uxth.w	ip, r7
    e9c4:	orr.w	r3, r4, r6, lsl #16
    e9c8:	mul.w	r2, sl, ip
    e9cc:	cmp	r2, r3
    e9ce:	lsl.w	r4, r0, lr
    e9d2:	bls.n	e9ea <__udivmoddi4+0x1be>
    e9d4:	adds	r3, r3, r7
    e9d6:	add.w	r1, sl, #4294967295
    e9da:	bcs.w	eaec <__udivmoddi4+0x2c0>
    e9de:	cmp	r2, r3
    e9e0:	bls.w	eaec <__udivmoddi4+0x2c0>
    e9e4:	sub.w	sl, sl, #2
    e9e8:	add	r3, r7
    e9ea:	subs	r3, r3, r2
    e9ec:	uxth.w	r9, r9
    e9f0:	udiv	r1, r3, r8
    e9f4:	mls	r3, r8, r1, r3
    e9f8:	orr.w	r3, r9, r3, lsl #16
    e9fc:	mul.w	r6, r1, ip
    ea00:	cmp	r6, r3
    ea02:	bls.n	ea14 <__udivmoddi4+0x1e8>
    ea04:	adds	r3, r3, r7
    ea06:	add.w	r2, r1, #4294967295
    ea0a:	bcs.n	eae4 <__udivmoddi4+0x2b8>
    ea0c:	cmp	r6, r3
    ea0e:	bls.n	eae4 <__udivmoddi4+0x2b8>
    ea10:	subs	r1, #2
    ea12:	add	r3, r7
    ea14:	subs	r3, r3, r6
    ea16:	orr.w	r1, r1, sl, lsl #16
    ea1a:	b.n	e93a <__udivmoddi4+0x10e>
    ea1c:	rsb	lr, r1, #32
    ea20:	lsr.w	r4, r2, lr
    ea24:	lsls	r3, r1
    ea26:	orrs	r3, r4
    ea28:	lsr.w	r7, r0, lr
    ea2c:	lsl.w	r4, r6, r1
    ea30:	mov.w	ip, r3, lsr #16
    ea34:	lsr.w	r6, r6, lr
    ea38:	orrs	r4, r7
    ea3a:	udiv	r9, r6, ip
    ea3e:	lsrs	r7, r4, #16
    ea40:	mls	r6, ip, r9, r6
    ea44:	uxth.w	r8, r3
    ea48:	orr.w	r6, r7, r6, lsl #16
    ea4c:	mul.w	r7, r9, r8
    ea50:	cmp	r7, r6
    ea52:	lsl.w	r2, r2, r1
    ea56:	lsl.w	sl, r0, r1
    ea5a:	bls.n	ea6e <__udivmoddi4+0x242>
    ea5c:	adds	r6, r6, r3
    ea5e:	add.w	r0, r9, #4294967295
    ea62:	bcs.n	eae8 <__udivmoddi4+0x2bc>
    ea64:	cmp	r7, r6
    ea66:	bls.n	eae8 <__udivmoddi4+0x2bc>
    ea68:	sub.w	r9, r9, #2
    ea6c:	add	r6, r3
    ea6e:	subs	r6, r6, r7
    ea70:	uxth	r0, r4
    ea72:	udiv	r4, r6, ip
    ea76:	mls	r6, ip, r4, r6
    ea7a:	orr.w	r7, r0, r6, lsl #16
    ea7e:	mul.w	r8, r4, r8
    ea82:	cmp	r8, r7
    ea84:	bls.n	ea96 <__udivmoddi4+0x26a>
    ea86:	adds	r7, r7, r3
    ea88:	add.w	r0, r4, #4294967295
    ea8c:	bcs.n	eae0 <__udivmoddi4+0x2b4>
    ea8e:	cmp	r8, r7
    ea90:	bls.n	eae0 <__udivmoddi4+0x2b4>
    ea92:	subs	r4, #2
    ea94:	add	r7, r3
    ea96:	orr.w	r0, r4, r9, lsl #16
    ea9a:	rsb	r7, r8, r7
    ea9e:	umull	r8, r9, r0, r2
    eaa2:	cmp	r7, r9
    eaa4:	mov	r4, r8
    eaa6:	mov	r6, r9
    eaa8:	bcc.n	ead4 <__udivmoddi4+0x2a8>
    eaaa:	beq.n	eb00 <__udivmoddi4+0x2d4>
    eaac:	cbz	r5, eb08 <__udivmoddi4+0x2dc>
    eaae:	subs.w	r3, sl, r4
    eab2:	sbc.w	r7, r7, r6
    eab6:	lsl.w	lr, r7, lr
    eaba:	lsrs	r3, r1
    eabc:	lsrs	r7, r1
    eabe:	orr.w	r3, lr, r3
    eac2:	stmia.w	r5, {r3, r7}
    eac6:	movs	r1, #0
    eac8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    eacc:	mov	r3, r2
    eace:	b.n	e8c2 <__udivmoddi4+0x96>
    ead0:	mov	r0, r2
    ead2:	b.n	e896 <__udivmoddi4+0x6a>
    ead4:	subs.w	r4, r8, r2
    ead8:	sbc.w	r6, r9, r3
    eadc:	subs	r0, #1
    eade:	b.n	eaac <__udivmoddi4+0x280>
    eae0:	mov	r4, r0
    eae2:	b.n	ea96 <__udivmoddi4+0x26a>
    eae4:	mov	r1, r2
    eae6:	b.n	ea14 <__udivmoddi4+0x1e8>
    eae8:	mov	r9, r0
    eaea:	b.n	ea6e <__udivmoddi4+0x242>
    eaec:	mov	sl, r1
    eaee:	b.n	e9ea <__udivmoddi4+0x1be>
    eaf0:	subs	r3, #2
    eaf2:	add	r4, r7
    eaf4:	b.n	e988 <__udivmoddi4+0x15c>
    eaf6:	mov	r0, r1
    eaf8:	b.n	e910 <__udivmoddi4+0xe4>
    eafa:	subs	r0, #2
    eafc:	add	r6, r7
    eafe:	b.n	e960 <__udivmoddi4+0x134>
    eb00:	cmp	sl, r8
    eb02:	bcc.n	ead4 <__udivmoddi4+0x2a8>
    eb04:	mov	r6, r7
    eb06:	b.n	eaac <__udivmoddi4+0x280>
    eb08:	mov	r1, r5
    eb0a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    eb0e:	nop

0000eb10 <__aeabi_idiv0>:
    eb10:	bx	lr
    eb12:	nop

0000eb14 <__cxa_atexit>:
    eb14:	mov	r3, r2
    eb16:	mov	r2, r1
    eb18:	mov	r1, r0
    eb1a:	movs	r0, #2
    eb1c:	b.w	fb68 <__register_exitproc>

0000eb20 <fcvtf>:
    eb20:	push	{r4, r5, r6, lr}
    eb22:	mov	r4, r0
    eb24:	vmov	r0, s0
    eb28:	mov	r5, r1
    eb2a:	mov	r6, r2
    eb2c:	bl	e1a4 <__aeabi_f2d>
    eb30:	mov	r2, r6
    eb32:	vmov	d0, r0, r1
    eb36:	movs	r3, #0
    eb38:	mov	r1, r5
    eb3a:	mov	r0, r4
    eb3c:	ldmia.w	sp!, {r4, r5, r6, lr}
    eb40:	b.w	fc2c <fcvtbuf>

0000eb44 <__errno>:
    eb44:	ldr	r3, [pc, #4]	; (eb4c <__errno+0x8>)
    eb46:	ldr	r0, [r3, #0]
    eb48:	bx	lr
    eb4a:	nop
    eb4c:	.word	0x1fff0ef8

0000eb50 <__libc_init_array>:
    eb50:	push	{r4, r5, r6, lr}
    eb52:	ldr	r6, [pc, #60]	; (eb90 <__libc_init_array+0x40>)
    eb54:	ldr	r5, [pc, #60]	; (eb94 <__libc_init_array+0x44>)
    eb56:	subs	r6, r6, r5
    eb58:	asrs	r6, r6, #2
    eb5a:	it	ne
    eb5c:	movne	r4, #0
    eb5e:	beq.n	eb6c <__libc_init_array+0x1c>
    eb60:	adds	r4, #1
    eb62:	ldr.w	r3, [r5], #4
    eb66:	blx	r3
    eb68:	cmp	r6, r4
    eb6a:	bne.n	eb60 <__libc_init_array+0x10>
    eb6c:	ldr	r6, [pc, #40]	; (eb98 <__libc_init_array+0x48>)
    eb6e:	ldr	r5, [pc, #44]	; (eb9c <__libc_init_array+0x4c>)
    eb70:	subs	r6, r6, r5
    eb72:	bl	137ac <_init>
    eb76:	asrs	r6, r6, #2
    eb78:	it	ne
    eb7a:	movne	r4, #0
    eb7c:	beq.n	eb8c <__libc_init_array+0x3c>
    eb7e:	adds	r4, #1
    eb80:	ldr.w	r3, [r5], #4
    eb84:	blx	r3
    eb86:	cmp	r6, r4
    eb88:	bne.n	eb7e <__libc_init_array+0x2e>
    eb8a:	pop	{r4, r5, r6, pc}
    eb8c:	pop	{r4, r5, r6, pc}
    eb8e:	nop
    eb90:	.word	0x000137b8
    eb94:	.word	0x000137b8
    eb98:	.word	0x000137c8
    eb9c:	.word	0x000137b8

0000eba0 <malloc>:
    eba0:	ldr	r3, [pc, #8]	; (ebac <malloc+0xc>)
    eba2:	mov	r1, r0
    eba4:	ldr	r0, [r3, #0]
    eba6:	b.w	ebc0 <_malloc_r>
    ebaa:	nop
    ebac:	.word	0x1fff0ef8

0000ebb0 <free>:
    ebb0:	ldr	r3, [pc, #8]	; (ebbc <free+0xc>)
    ebb2:	mov	r1, r0
    ebb4:	ldr	r0, [r3, #0]
    ebb6:	b.w	fdf0 <_free_r>
    ebba:	nop
    ebbc:	.word	0x1fff0ef8

0000ebc0 <_malloc_r>:
    ebc0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ebc4:	add.w	r5, r1, #11
    ebc8:	cmp	r5, #22
    ebca:	sub	sp, #12
    ebcc:	mov	r6, r0
    ebce:	bls.w	ed10 <_malloc_r+0x150>
    ebd2:	bics.w	r5, r5, #7
    ebd6:	bmi.w	ed58 <_malloc_r+0x198>
    ebda:	cmp	r1, r5
    ebdc:	bhi.w	ed58 <_malloc_r+0x198>
    ebe0:	bl	f3c8 <__malloc_lock>
    ebe4:	cmp.w	r5, #504	; 0x1f8
    ebe8:	bcc.w	f124 <_malloc_r+0x564>
    ebec:	lsrs	r3, r5, #9
    ebee:	beq.w	ed66 <_malloc_r+0x1a6>
    ebf2:	cmp	r3, #4
    ebf4:	bhi.w	eefe <_malloc_r+0x33e>
    ebf8:	lsrs	r0, r5, #6
    ebfa:	add.w	lr, r0, #57	; 0x39
    ebfe:	mov.w	r3, lr, lsl #1
    ec02:	adds	r0, #56	; 0x38
    ec04:	ldr	r7, [pc, #784]	; (ef18 <_malloc_r+0x358>)
    ec06:	add.w	r3, r7, r3, lsl #2
    ec0a:	sub.w	r1, r3, #8
    ec0e:	ldr	r4, [r3, #4]
    ec10:	cmp	r1, r4
    ec12:	bne.n	ec24 <_malloc_r+0x64>
    ec14:	b.n	ed70 <_malloc_r+0x1b0>
    ec16:	cmp	r2, #0
    ec18:	bge.w	ed74 <_malloc_r+0x1b4>
    ec1c:	ldr	r4, [r4, #12]
    ec1e:	cmp	r1, r4
    ec20:	beq.w	ed70 <_malloc_r+0x1b0>
    ec24:	ldr	r3, [r4, #4]
    ec26:	bic.w	r3, r3, #3
    ec2a:	subs	r2, r3, r5
    ec2c:	cmp	r2, #15
    ec2e:	ble.n	ec16 <_malloc_r+0x56>
    ec30:	ldr	r1, [pc, #740]	; (ef18 <_malloc_r+0x358>)
    ec32:	ldr	r4, [r7, #16]
    ec34:	add.w	lr, r1, #8
    ec38:	cmp	r4, lr
    ec3a:	beq.w	efa4 <_malloc_r+0x3e4>
    ec3e:	ldr	r3, [r4, #4]
    ec40:	bic.w	r3, r3, #3
    ec44:	subs	r2, r3, r5
    ec46:	cmp	r2, #15
    ec48:	bgt.w	ef7e <_malloc_r+0x3be>
    ec4c:	cmp	r2, #0
    ec4e:	str.w	lr, [r1, #20]
    ec52:	str.w	lr, [r1, #16]
    ec56:	bge.w	ed96 <_malloc_r+0x1d6>
    ec5a:	cmp.w	r3, #512	; 0x200
    ec5e:	bcs.w	ef30 <_malloc_r+0x370>
    ec62:	lsrs	r3, r3, #3
    ec64:	add.w	ip, r3, #1
    ec68:	movs	r2, #1
    ec6a:	asrs	r3, r3, #2
    ec6c:	lsl.w	r3, r2, r3
    ec70:	ldr	r2, [r1, #4]
    ec72:	ldr.w	r8, [r1, ip, lsl #3]
    ec76:	str.w	r8, [r4, #8]
    ec7a:	add.w	r9, r1, ip, lsl #3
    ec7e:	orrs	r2, r3
    ec80:	sub.w	r3, r9, #8
    ec84:	str	r3, [r4, #12]
    ec86:	str	r2, [r1, #4]
    ec88:	str.w	r4, [r1, ip, lsl #3]
    ec8c:	str.w	r4, [r8, #12]
    ec90:	asrs	r3, r0, #2
    ec92:	movs	r4, #1
    ec94:	lsls	r4, r3
    ec96:	cmp	r4, r2
    ec98:	bhi.w	edb0 <_malloc_r+0x1f0>
    ec9c:	tst	r4, r2
    ec9e:	bne.n	ecae <_malloc_r+0xee>
    eca0:	bic.w	r0, r0, #3
    eca4:	lsls	r4, r4, #1
    eca6:	tst	r4, r2
    eca8:	add.w	r0, r0, #4
    ecac:	beq.n	eca4 <_malloc_r+0xe4>
    ecae:	add.w	r9, r7, r0, lsl #3
    ecb2:	mov	ip, r9
    ecb4:	mov	r8, r0
    ecb6:	ldr.w	r1, [ip, #12]
    ecba:	cmp	ip, r1
    ecbc:	bne.n	ecce <_malloc_r+0x10e>
    ecbe:	b.n	efa8 <_malloc_r+0x3e8>
    ecc0:	cmp	r2, #0
    ecc2:	bge.w	efc8 <_malloc_r+0x408>
    ecc6:	ldr	r1, [r1, #12]
    ecc8:	cmp	ip, r1
    ecca:	beq.w	efa8 <_malloc_r+0x3e8>
    ecce:	ldr	r3, [r1, #4]
    ecd0:	bic.w	r3, r3, #3
    ecd4:	subs	r2, r3, r5
    ecd6:	cmp	r2, #15
    ecd8:	ble.n	ecc0 <_malloc_r+0x100>
    ecda:	mov	r4, r1
    ecdc:	ldr.w	ip, [r1, #12]
    ece0:	ldr.w	r8, [r4, #8]!
    ece4:	adds	r3, r1, r5
    ece6:	orr.w	r5, r5, #1
    ecea:	str	r5, [r1, #4]
    ecec:	orr.w	r1, r2, #1
    ecf0:	str.w	ip, [r8, #12]
    ecf4:	mov	r0, r6
    ecf6:	str.w	r8, [ip, #8]
    ecfa:	str	r3, [r7, #20]
    ecfc:	str	r3, [r7, #16]
    ecfe:	str.w	lr, [r3, #12]
    ed02:	str.w	lr, [r3, #8]
    ed06:	str	r1, [r3, #4]
    ed08:	str	r2, [r3, r2]
    ed0a:	bl	f3cc <__malloc_unlock>
    ed0e:	b.n	ed50 <_malloc_r+0x190>
    ed10:	cmp	r1, #16
    ed12:	bhi.n	ed58 <_malloc_r+0x198>
    ed14:	bl	f3c8 <__malloc_lock>
    ed18:	movs	r5, #16
    ed1a:	movs	r3, #6
    ed1c:	movs	r0, #2
    ed1e:	ldr	r7, [pc, #504]	; (ef18 <_malloc_r+0x358>)
    ed20:	add.w	r3, r7, r3, lsl #2
    ed24:	sub.w	r2, r3, #8
    ed28:	ldr	r4, [r3, #4]
    ed2a:	cmp	r4, r2
    ed2c:	beq.w	efba <_malloc_r+0x3fa>
    ed30:	ldr	r3, [r4, #4]
    ed32:	ldr	r1, [r4, #12]
    ed34:	ldr	r5, [r4, #8]
    ed36:	bic.w	r3, r3, #3
    ed3a:	add	r3, r4
    ed3c:	mov	r0, r6
    ed3e:	ldr	r2, [r3, #4]
    ed40:	str	r1, [r5, #12]
    ed42:	orr.w	r2, r2, #1
    ed46:	str	r5, [r1, #8]
    ed48:	str	r2, [r3, #4]
    ed4a:	bl	f3cc <__malloc_unlock>
    ed4e:	adds	r4, #8
    ed50:	mov	r0, r4
    ed52:	add	sp, #12
    ed54:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed58:	movs	r4, #0
    ed5a:	movs	r3, #12
    ed5c:	mov	r0, r4
    ed5e:	str	r3, [r6, #0]
    ed60:	add	sp, #12
    ed62:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed66:	movs	r3, #128	; 0x80
    ed68:	mov.w	lr, #64	; 0x40
    ed6c:	movs	r0, #63	; 0x3f
    ed6e:	b.n	ec04 <_malloc_r+0x44>
    ed70:	mov	r0, lr
    ed72:	b.n	ec30 <_malloc_r+0x70>
    ed74:	add	r3, r4
    ed76:	ldr	r1, [r4, #12]
    ed78:	ldr	r2, [r3, #4]
    ed7a:	ldr	r5, [r4, #8]
    ed7c:	orr.w	r2, r2, #1
    ed80:	str	r1, [r5, #12]
    ed82:	mov	r0, r6
    ed84:	str	r5, [r1, #8]
    ed86:	str	r2, [r3, #4]
    ed88:	bl	f3cc <__malloc_unlock>
    ed8c:	adds	r4, #8
    ed8e:	mov	r0, r4
    ed90:	add	sp, #12
    ed92:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed96:	add	r3, r4
    ed98:	mov	r0, r6
    ed9a:	ldr	r2, [r3, #4]
    ed9c:	orr.w	r2, r2, #1
    eda0:	str	r2, [r3, #4]
    eda2:	bl	f3cc <__malloc_unlock>
    eda6:	adds	r4, #8
    eda8:	mov	r0, r4
    edaa:	add	sp, #12
    edac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    edb0:	ldr	r4, [r7, #8]
    edb2:	ldr	r3, [r4, #4]
    edb4:	bic.w	r8, r3, #3
    edb8:	cmp	r8, r5
    edba:	bcc.n	edc6 <_malloc_r+0x206>
    edbc:	rsb	r3, r5, r8
    edc0:	cmp	r3, #15
    edc2:	bgt.w	eede <_malloc_r+0x31e>
    edc6:	ldr	r3, [pc, #340]	; (ef1c <_malloc_r+0x35c>)
    edc8:	ldr.w	r9, [pc, #352]	; ef2c <_malloc_r+0x36c>
    edcc:	ldr	r2, [r3, #0]
    edce:	ldr.w	r3, [r9]
    edd2:	adds	r3, #1
    edd4:	add	r2, r5
    edd6:	add.w	sl, r4, r8
    edda:	beq.w	f09e <_malloc_r+0x4de>
    edde:	add.w	r2, r2, #4096	; 0x1000
    ede2:	adds	r2, #15
    ede4:	bic.w	r2, r2, #4080	; 0xff0
    ede8:	bic.w	r2, r2, #15
    edec:	mov	r1, r2
    edee:	mov	r0, r6
    edf0:	str	r2, [sp, #4]
    edf2:	bl	f7b0 <_sbrk_r>
    edf6:	cmp.w	r0, #4294967295
    edfa:	mov	fp, r0
    edfc:	ldr	r2, [sp, #4]
    edfe:	beq.w	f0b2 <_malloc_r+0x4f2>
    ee02:	cmp	sl, r0
    ee04:	bhi.w	f000 <_malloc_r+0x440>
    ee08:	ldr	r3, [pc, #276]	; (ef20 <_malloc_r+0x360>)
    ee0a:	ldr	r1, [r3, #0]
    ee0c:	cmp	sl, fp
    ee0e:	add	r1, r2
    ee10:	str	r1, [r3, #0]
    ee12:	beq.w	f0bc <_malloc_r+0x4fc>
    ee16:	ldr.w	r0, [r9]
    ee1a:	ldr.w	lr, [pc, #272]	; ef2c <_malloc_r+0x36c>
    ee1e:	adds	r0, #1
    ee20:	ittet	ne
    ee22:	rsbne	sl, sl, fp
    ee26:	addne	r1, sl
    ee28:	streq.w	fp, [lr]
    ee2c:	strne	r1, [r3, #0]
    ee2e:	ands.w	r1, fp, #7
    ee32:	beq.w	f064 <_malloc_r+0x4a4>
    ee36:	rsb	r0, r1, #8
    ee3a:	rsb	r1, r1, #4096	; 0x1000
    ee3e:	add	fp, r0
    ee40:	adds	r1, #8
    ee42:	add	r2, fp
    ee44:	ubfx	r2, r2, #0, #12
    ee48:	rsb	r9, r2, r1
    ee4c:	mov	r1, r9
    ee4e:	mov	r0, r6
    ee50:	str	r3, [sp, #4]
    ee52:	bl	f7b0 <_sbrk_r>
    ee56:	adds	r3, r0, #1
    ee58:	ldr	r3, [sp, #4]
    ee5a:	beq.w	f0dc <_malloc_r+0x51c>
    ee5e:	rsb	r2, fp, r0
    ee62:	add	r2, r9
    ee64:	orr.w	r2, r2, #1
    ee68:	ldr	r1, [r3, #0]
    ee6a:	str.w	fp, [r7, #8]
    ee6e:	add	r1, r9
    ee70:	cmp	r4, r7
    ee72:	str.w	r2, [fp, #4]
    ee76:	str	r1, [r3, #0]
    ee78:	ldr.w	r9, [pc, #164]	; ef20 <_malloc_r+0x360>
    ee7c:	beq.n	eeac <_malloc_r+0x2ec>
    ee7e:	cmp.w	r8, #15
    ee82:	bls.w	f080 <_malloc_r+0x4c0>
    ee86:	ldr	r2, [r4, #4]
    ee88:	sub.w	r3, r8, #12
    ee8c:	bic.w	r3, r3, #7
    ee90:	adds	r0, r4, r3
    ee92:	and.w	r2, r2, #1
    ee96:	mov.w	lr, #5
    ee9a:	orrs	r2, r3
    ee9c:	cmp	r3, #15
    ee9e:	str	r2, [r4, #4]
    eea0:	str.w	lr, [r0, #4]
    eea4:	str.w	lr, [r0, #8]
    eea8:	bhi.w	f0e4 <_malloc_r+0x524>
    eeac:	ldr	r3, [pc, #116]	; (ef24 <_malloc_r+0x364>)
    eeae:	ldr	r4, [r7, #8]
    eeb0:	ldr	r2, [r3, #0]
    eeb2:	cmp	r1, r2
    eeb4:	it	hi
    eeb6:	strhi	r1, [r3, #0]
    eeb8:	ldr	r3, [pc, #108]	; (ef28 <_malloc_r+0x368>)
    eeba:	ldr	r2, [r3, #0]
    eebc:	cmp	r1, r2
    eebe:	ldr	r2, [r4, #4]
    eec0:	it	hi
    eec2:	strhi	r1, [r3, #0]
    eec4:	bic.w	r2, r2, #3
    eec8:	cmp	r5, r2
    eeca:	sub.w	r3, r2, r5
    eece:	bhi.n	eed4 <_malloc_r+0x314>
    eed0:	cmp	r3, #15
    eed2:	bgt.n	eede <_malloc_r+0x31e>
    eed4:	mov	r0, r6
    eed6:	bl	f3cc <__malloc_unlock>
    eeda:	movs	r4, #0
    eedc:	b.n	ed50 <_malloc_r+0x190>
    eede:	adds	r2, r4, r5
    eee0:	orr.w	r3, r3, #1
    eee4:	orr.w	r5, r5, #1
    eee8:	str	r5, [r4, #4]
    eeea:	mov	r0, r6
    eeec:	str	r2, [r7, #8]
    eeee:	str	r3, [r2, #4]
    eef0:	bl	f3cc <__malloc_unlock>
    eef4:	adds	r4, #8
    eef6:	mov	r0, r4
    eef8:	add	sp, #12
    eefa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eefe:	cmp	r3, #20
    ef00:	bls.n	efe6 <_malloc_r+0x426>
    ef02:	cmp	r3, #84	; 0x54
    ef04:	bhi.w	f050 <_malloc_r+0x490>
    ef08:	lsrs	r0, r5, #12
    ef0a:	add.w	lr, r0, #111	; 0x6f
    ef0e:	mov.w	r3, lr, lsl #1
    ef12:	adds	r0, #110	; 0x6e
    ef14:	b.n	ec04 <_malloc_r+0x44>
    ef16:	nop
    ef18:	.word	0x1fff1068
    ef1c:	.word	0x1fff20e0
    ef20:	.word	0x1fff20e4
    ef24:	.word	0x1fff20dc
    ef28:	.word	0x1fff20d8
    ef2c:	.word	0x1fff1474
    ef30:	lsrs	r2, r3, #9
    ef32:	cmp	r2, #4
    ef34:	bls.n	eff4 <_malloc_r+0x434>
    ef36:	cmp	r2, #20
    ef38:	bhi.w	f0a2 <_malloc_r+0x4e2>
    ef3c:	add.w	r1, r2, #92	; 0x5c
    ef40:	lsls	r1, r1, #1
    ef42:	adds	r2, #91	; 0x5b
    ef44:	add.w	ip, r7, r1, lsl #2
    ef48:	ldr.w	r1, [r7, r1, lsl #2]
    ef4c:	ldr.w	r8, [pc, #476]	; f12c <_malloc_r+0x56c>
    ef50:	sub.w	ip, ip, #8
    ef54:	cmp	ip, r1
    ef56:	beq.w	f06a <_malloc_r+0x4aa>
    ef5a:	ldr	r2, [r1, #4]
    ef5c:	bic.w	r2, r2, #3
    ef60:	cmp	r3, r2
    ef62:	bcs.n	ef6a <_malloc_r+0x3aa>
    ef64:	ldr	r1, [r1, #8]
    ef66:	cmp	ip, r1
    ef68:	bne.n	ef5a <_malloc_r+0x39a>
    ef6a:	ldr.w	ip, [r1, #12]
    ef6e:	ldr	r2, [r7, #4]
    ef70:	str.w	ip, [r4, #12]
    ef74:	str	r1, [r4, #8]
    ef76:	str.w	r4, [ip, #8]
    ef7a:	str	r4, [r1, #12]
    ef7c:	b.n	ec90 <_malloc_r+0xd0>
    ef7e:	adds	r3, r4, r5
    ef80:	orr.w	r7, r2, #1
    ef84:	orr.w	r5, r5, #1
    ef88:	str	r5, [r4, #4]
    ef8a:	mov	r0, r6
    ef8c:	str	r3, [r1, #20]
    ef8e:	str	r3, [r1, #16]
    ef90:	str.w	lr, [r3, #12]
    ef94:	str.w	lr, [r3, #8]
    ef98:	str	r7, [r3, #4]
    ef9a:	str	r2, [r3, r2]
    ef9c:	adds	r4, #8
    ef9e:	bl	f3cc <__malloc_unlock>
    efa2:	b.n	ed50 <_malloc_r+0x190>
    efa4:	ldr	r2, [r1, #4]
    efa6:	b.n	ec90 <_malloc_r+0xd0>
    efa8:	add.w	r8, r8, #1
    efac:	tst.w	r8, #3
    efb0:	add.w	ip, ip, #8
    efb4:	bne.w	ecb6 <_malloc_r+0xf6>
    efb8:	b.n	f01c <_malloc_r+0x45c>
    efba:	ldr	r4, [r3, #12]
    efbc:	cmp	r3, r4
    efbe:	it	eq
    efc0:	addeq	r0, #2
    efc2:	beq.w	ec30 <_malloc_r+0x70>
    efc6:	b.n	ed30 <_malloc_r+0x170>
    efc8:	add	r3, r1
    efca:	mov	r4, r1
    efcc:	ldr	r2, [r3, #4]
    efce:	ldr	r1, [r1, #12]
    efd0:	ldr.w	r5, [r4, #8]!
    efd4:	orr.w	r2, r2, #1
    efd8:	str	r2, [r3, #4]
    efda:	mov	r0, r6
    efdc:	str	r1, [r5, #12]
    efde:	str	r5, [r1, #8]
    efe0:	bl	f3cc <__malloc_unlock>
    efe4:	b.n	ed50 <_malloc_r+0x190>
    efe6:	add.w	lr, r3, #92	; 0x5c
    efea:	add.w	r0, r3, #91	; 0x5b
    efee:	mov.w	r3, lr, lsl #1
    eff2:	b.n	ec04 <_malloc_r+0x44>
    eff4:	lsrs	r2, r3, #6
    eff6:	add.w	r1, r2, #57	; 0x39
    effa:	lsls	r1, r1, #1
    effc:	adds	r2, #56	; 0x38
    effe:	b.n	ef44 <_malloc_r+0x384>
    f000:	cmp	r4, r7
    f002:	ldr	r3, [pc, #296]	; (f12c <_malloc_r+0x56c>)
    f004:	beq.w	ee08 <_malloc_r+0x248>
    f008:	ldr	r4, [r3, #8]
    f00a:	ldr	r2, [r4, #4]
    f00c:	bic.w	r2, r2, #3
    f010:	b.n	eec8 <_malloc_r+0x308>
    f012:	ldr.w	r3, [r9], #-8
    f016:	cmp	r9, r3
    f018:	bne.w	f120 <_malloc_r+0x560>
    f01c:	tst.w	r0, #3
    f020:	add.w	r0, r0, #4294967295
    f024:	bne.n	f012 <_malloc_r+0x452>
    f026:	ldr	r3, [r7, #4]
    f028:	bic.w	r3, r3, r4
    f02c:	str	r3, [r7, #4]
    f02e:	lsls	r4, r4, #1
    f030:	cmp	r4, r3
    f032:	bhi.w	edb0 <_malloc_r+0x1f0>
    f036:	cmp	r4, #0
    f038:	beq.w	edb0 <_malloc_r+0x1f0>
    f03c:	tst	r4, r3
    f03e:	mov	r0, r8
    f040:	bne.w	ecae <_malloc_r+0xee>
    f044:	lsls	r4, r4, #1
    f046:	tst	r4, r3
    f048:	add.w	r0, r0, #4
    f04c:	beq.n	f044 <_malloc_r+0x484>
    f04e:	b.n	ecae <_malloc_r+0xee>
    f050:	cmp.w	r3, #340	; 0x154
    f054:	bhi.n	f088 <_malloc_r+0x4c8>
    f056:	lsrs	r0, r5, #15
    f058:	add.w	lr, r0, #120	; 0x78
    f05c:	mov.w	r3, lr, lsl #1
    f060:	adds	r0, #119	; 0x77
    f062:	b.n	ec04 <_malloc_r+0x44>
    f064:	mov.w	r1, #4096	; 0x1000
    f068:	b.n	ee42 <_malloc_r+0x282>
    f06a:	movs	r1, #1
    f06c:	ldr.w	r3, [r8, #4]
    f070:	asrs	r2, r2, #2
    f072:	lsl.w	r2, r1, r2
    f076:	orrs	r2, r3
    f078:	str.w	r2, [r8, #4]
    f07c:	mov	r1, ip
    f07e:	b.n	ef70 <_malloc_r+0x3b0>
    f080:	movs	r3, #1
    f082:	str.w	r3, [fp, #4]
    f086:	b.n	eed4 <_malloc_r+0x314>
    f088:	movw	r2, #1364	; 0x554
    f08c:	cmp	r3, r2
    f08e:	bhi.n	f0d2 <_malloc_r+0x512>
    f090:	lsrs	r0, r5, #18
    f092:	add.w	lr, r0, #125	; 0x7d
    f096:	mov.w	r3, lr, lsl #1
    f09a:	adds	r0, #124	; 0x7c
    f09c:	b.n	ec04 <_malloc_r+0x44>
    f09e:	adds	r2, #16
    f0a0:	b.n	edec <_malloc_r+0x22c>
    f0a2:	cmp	r2, #84	; 0x54
    f0a4:	bhi.n	f0f4 <_malloc_r+0x534>
    f0a6:	lsrs	r2, r3, #12
    f0a8:	add.w	r1, r2, #111	; 0x6f
    f0ac:	lsls	r1, r1, #1
    f0ae:	adds	r2, #110	; 0x6e
    f0b0:	b.n	ef44 <_malloc_r+0x384>
    f0b2:	ldr	r4, [r7, #8]
    f0b4:	ldr	r2, [r4, #4]
    f0b6:	bic.w	r2, r2, #3
    f0ba:	b.n	eec8 <_malloc_r+0x308>
    f0bc:	ubfx	r0, sl, #0, #12
    f0c0:	cmp	r0, #0
    f0c2:	bne.w	ee16 <_malloc_r+0x256>
    f0c6:	add	r2, r8
    f0c8:	ldr	r3, [r7, #8]
    f0ca:	orr.w	r2, r2, #1
    f0ce:	str	r2, [r3, #4]
    f0d0:	b.n	eeac <_malloc_r+0x2ec>
    f0d2:	movs	r3, #254	; 0xfe
    f0d4:	mov.w	lr, #127	; 0x7f
    f0d8:	movs	r0, #126	; 0x7e
    f0da:	b.n	ec04 <_malloc_r+0x44>
    f0dc:	movs	r2, #1
    f0de:	mov.w	r9, #0
    f0e2:	b.n	ee68 <_malloc_r+0x2a8>
    f0e4:	add.w	r1, r4, #8
    f0e8:	mov	r0, r6
    f0ea:	bl	fdf0 <_free_r>
    f0ee:	ldr.w	r1, [r9]
    f0f2:	b.n	eeac <_malloc_r+0x2ec>
    f0f4:	cmp.w	r2, #340	; 0x154
    f0f8:	bhi.n	f106 <_malloc_r+0x546>
    f0fa:	lsrs	r2, r3, #15
    f0fc:	add.w	r1, r2, #120	; 0x78
    f100:	lsls	r1, r1, #1
    f102:	adds	r2, #119	; 0x77
    f104:	b.n	ef44 <_malloc_r+0x384>
    f106:	movw	r1, #1364	; 0x554
    f10a:	cmp	r2, r1
    f10c:	bhi.n	f11a <_malloc_r+0x55a>
    f10e:	lsrs	r2, r3, #18
    f110:	add.w	r1, r2, #125	; 0x7d
    f114:	lsls	r1, r1, #1
    f116:	adds	r2, #124	; 0x7c
    f118:	b.n	ef44 <_malloc_r+0x384>
    f11a:	movs	r1, #254	; 0xfe
    f11c:	movs	r2, #126	; 0x7e
    f11e:	b.n	ef44 <_malloc_r+0x384>
    f120:	ldr	r3, [r7, #4]
    f122:	b.n	f02e <_malloc_r+0x46e>
    f124:	lsrs	r0, r5, #3
    f126:	adds	r3, r0, #1
    f128:	lsls	r3, r3, #1
    f12a:	b.n	ed1e <_malloc_r+0x15e>
    f12c:	.word	0x1fff1068

0000f130 <__ascii_mbtowc>:
    f130:	sub	sp, #8
    f132:	cbz	r1, f148 <__ascii_mbtowc+0x18>
    f134:	cbz	r2, f14e <__ascii_mbtowc+0x1e>
    f136:	cbz	r3, f154 <__ascii_mbtowc+0x24>
    f138:	ldrb	r3, [r2, #0]
    f13a:	str	r3, [r1, #0]
    f13c:	ldrb	r2, [r2, #0]
    f13e:	adds	r0, r2, #0
    f140:	it	ne
    f142:	movne	r0, #1
    f144:	add	sp, #8
    f146:	bx	lr
    f148:	add	r1, sp, #4
    f14a:	cmp	r2, #0
    f14c:	bne.n	f136 <__ascii_mbtowc+0x6>
    f14e:	mov	r0, r2
    f150:	add	sp, #8
    f152:	bx	lr
    f154:	mvn.w	r0, #1
    f158:	b.n	f144 <__ascii_mbtowc+0x14>
    f15a:	nop
    f15c:			; <UNDEFINED> instruction: 0xffffffff

0000f160 <memchr>:
    f160:	and.w	r1, r1, #255	; 0xff
    f164:	cmp	r2, #16
    f166:	blt.n	f1c0 <memchr+0x60>
    f168:	tst.w	r0, #7
    f16c:	beq.n	f180 <memchr+0x20>
    f16e:	ldrb.w	r3, [r0], #1
    f172:	subs	r2, #1
    f174:	cmp	r3, r1
    f176:	beq.n	f1d4 <memchr+0x74>
    f178:	tst.w	r0, #7
    f17c:	cbz	r2, f1d0 <memchr+0x70>
    f17e:	bne.n	f16e <memchr+0xe>
    f180:	push	{r4, r5, r6, r7}
    f182:	orr.w	r1, r1, r1, lsl #8
    f186:	orr.w	r1, r1, r1, lsl #16
    f18a:	bic.w	r4, r2, #7
    f18e:	mvns.w	r7, #0
    f192:	movs	r3, #0
    f194:	ldrd	r5, r6, [r0], #8
    f198:	subs	r4, #8
    f19a:	eor.w	r5, r5, r1
    f19e:	eor.w	r6, r6, r1
    f1a2:	uadd8	r5, r5, r7
    f1a6:	sel	r5, r3, r7
    f1aa:	uadd8	r6, r6, r7
    f1ae:	sel	r6, r5, r7
    f1b2:	cbnz	r6, f1d8 <memchr+0x78>
    f1b4:	bne.n	f194 <memchr+0x34>
    f1b6:	pop	{r4, r5, r6, r7}
    f1b8:	and.w	r1, r1, #255	; 0xff
    f1bc:	and.w	r2, r2, #7
    f1c0:	cbz	r2, f1d0 <memchr+0x70>
    f1c2:	ldrb.w	r3, [r0], #1
    f1c6:	subs	r2, #1
    f1c8:	eor.w	r3, r3, r1
    f1cc:	cbz	r3, f1d4 <memchr+0x74>
    f1ce:	bne.n	f1c2 <memchr+0x62>
    f1d0:	movs	r0, #0
    f1d2:	bx	lr
    f1d4:	subs	r0, #1
    f1d6:	bx	lr
    f1d8:	cmp	r5, #0
    f1da:	itte	eq
    f1dc:	moveq	r5, r6
    f1de:	subeq	r0, #3
    f1e0:	subne	r0, #7
    f1e2:	tst.w	r5, #1
    f1e6:	bne.n	f1f8 <memchr+0x98>
    f1e8:	adds	r0, #1
    f1ea:	tst.w	r5, #256	; 0x100
    f1ee:	ittt	eq
    f1f0:	addeq	r0, #1
    f1f2:	tsteq.w	r5, #98304	; 0x18000
    f1f6:	addeq	r0, #1
    f1f8:	pop	{r4, r5, r6, r7}
    f1fa:	subs	r0, #1
    f1fc:	bx	lr
    f1fe:	nop

0000f200 <memcmp>:
    f200:	cmp	r2, #3
    f202:	push	{r4, r5, r6}
    f204:	bls.n	f254 <memcmp+0x54>
    f206:	orr.w	r3, r0, r1
    f20a:	lsls	r3, r3, #30
    f20c:	beq.n	f232 <memcmp+0x32>
    f20e:	ldrb	r4, [r0, #0]
    f210:	ldrb	r5, [r1, #0]
    f212:	cmp	r4, r5
    f214:	bne.n	f25c <memcmp+0x5c>
    f216:	add	r2, r0
    f218:	adds	r3, r0, #1
    f21a:	b.n	f228 <memcmp+0x28>
    f21c:	ldrb.w	r4, [r3], #1
    f220:	ldrb.w	r5, [r1, #1]!
    f224:	cmp	r4, r5
    f226:	bne.n	f25c <memcmp+0x5c>
    f228:	cmp	r3, r2
    f22a:	bne.n	f21c <memcmp+0x1c>
    f22c:	movs	r0, #0
    f22e:	pop	{r4, r5, r6}
    f230:	bx	lr
    f232:	mov	r4, r1
    f234:	mov	r3, r0
    f236:	ldr	r6, [r3, #0]
    f238:	ldr	r5, [r4, #0]
    f23a:	cmp	r6, r5
    f23c:	mov	r0, r3
    f23e:	mov	r1, r4
    f240:	add.w	r3, r3, #4
    f244:	add.w	r4, r4, #4
    f248:	bne.n	f20e <memcmp+0xe>
    f24a:	subs	r2, #4
    f24c:	cmp	r2, #3
    f24e:	mov	r0, r3
    f250:	mov	r1, r4
    f252:	bhi.n	f236 <memcmp+0x36>
    f254:	cmp	r2, #0
    f256:	bne.n	f20e <memcmp+0xe>
    f258:	mov	r0, r2
    f25a:	b.n	f22e <memcmp+0x2e>
    f25c:	subs	r0, r4, r5
    f25e:	pop	{r4, r5, r6}
    f260:	bx	lr
    f262:	nop

0000f264 <memmove>:
    f264:	cmp	r0, r1
    f266:	push	{r4, r5, r6, r7, lr}
    f268:	bls.n	f286 <memmove+0x22>
    f26a:	adds	r3, r1, r2
    f26c:	cmp	r0, r3
    f26e:	bcs.n	f286 <memmove+0x22>
    f270:	adds	r1, r0, r2
    f272:	cmp	r2, #0
    f274:	beq.n	f31a <memmove+0xb6>
    f276:	subs	r2, r3, r2
    f278:	ldrb.w	r4, [r3, #-1]!
    f27c:	strb.w	r4, [r1, #-1]!
    f280:	cmp	r3, r2
    f282:	bne.n	f278 <memmove+0x14>
    f284:	pop	{r4, r5, r6, r7, pc}
    f286:	cmp	r2, #15
    f288:	bls.n	f31c <memmove+0xb8>
    f28a:	orr.w	r3, r1, r0
    f28e:	lsls	r3, r3, #30
    f290:	bne.n	f320 <memmove+0xbc>
    f292:	add.w	r4, r0, #16
    f296:	add.w	r3, r1, #16
    f29a:	mov	r5, r2
    f29c:	ldr.w	r6, [r3, #-16]
    f2a0:	str.w	r6, [r4, #-16]
    f2a4:	ldr.w	r6, [r3, #-12]
    f2a8:	str.w	r6, [r4, #-12]
    f2ac:	ldr.w	r6, [r3, #-8]
    f2b0:	str.w	r6, [r4, #-8]
    f2b4:	subs	r5, #16
    f2b6:	ldr.w	r6, [r3, #-4]
    f2ba:	str.w	r6, [r4, #-4]
    f2be:	cmp	r5, #15
    f2c0:	add.w	r3, r3, #16
    f2c4:	add.w	r4, r4, #16
    f2c8:	bhi.n	f29c <memmove+0x38>
    f2ca:	sub.w	r3, r2, #16
    f2ce:	bic.w	r3, r3, #15
    f2d2:	and.w	lr, r2, #15
    f2d6:	adds	r3, #16
    f2d8:	cmp.w	lr, #3
    f2dc:	add	r1, r3
    f2de:	add	r3, r0
    f2e0:	bls.n	f326 <memmove+0xc2>
    f2e2:	subs	r6, r3, #4
    f2e4:	mov	r5, r1
    f2e6:	mov	r4, lr
    f2e8:	subs	r4, #4
    f2ea:	ldr.w	r7, [r5], #4
    f2ee:	str.w	r7, [r6, #4]!
    f2f2:	cmp	r4, #3
    f2f4:	bhi.n	f2e8 <memmove+0x84>
    f2f6:	sub.w	r4, lr, #4
    f2fa:	bic.w	r4, r4, #3
    f2fe:	adds	r4, #4
    f300:	add	r3, r4
    f302:	add	r1, r4
    f304:	and.w	r2, r2, #3
    f308:	cbz	r2, f324 <memmove+0xc0>
    f30a:	subs	r3, #1
    f30c:	add	r2, r1
    f30e:	ldrb.w	r4, [r1], #1
    f312:	strb.w	r4, [r3, #1]!
    f316:	cmp	r2, r1
    f318:	bne.n	f30e <memmove+0xaa>
    f31a:	pop	{r4, r5, r6, r7, pc}
    f31c:	mov	r3, r0
    f31e:	b.n	f308 <memmove+0xa4>
    f320:	mov	r3, r0
    f322:	b.n	f30a <memmove+0xa6>
    f324:	pop	{r4, r5, r6, r7, pc}
    f326:	mov	r2, lr
    f328:	b.n	f308 <memmove+0xa4>
    f32a:	nop

0000f32c <memset>:
    f32c:	push	{r4, r5, r6}
    f32e:	lsls	r4, r0, #30
    f330:	beq.n	f3c0 <memset+0x94>
    f332:	subs	r4, r2, #1
    f334:	cmp	r2, #0
    f336:	beq.n	f3bc <memset+0x90>
    f338:	uxtb	r5, r1
    f33a:	mov	r3, r0
    f33c:	b.n	f344 <memset+0x18>
    f33e:	subs	r2, r4, #1
    f340:	cbz	r4, f3bc <memset+0x90>
    f342:	mov	r4, r2
    f344:	strb.w	r5, [r3], #1
    f348:	lsls	r2, r3, #30
    f34a:	bne.n	f33e <memset+0x12>
    f34c:	cmp	r4, #3
    f34e:	bls.n	f3ae <memset+0x82>
    f350:	uxtb	r5, r1
    f352:	orr.w	r5, r5, r5, lsl #8
    f356:	cmp	r4, #15
    f358:	orr.w	r5, r5, r5, lsl #16
    f35c:	bls.n	f392 <memset+0x66>
    f35e:	add.w	r2, r3, #16
    f362:	mov	r6, r4
    f364:	subs	r6, #16
    f366:	cmp	r6, #15
    f368:	str.w	r5, [r2, #-16]
    f36c:	str.w	r5, [r2, #-12]
    f370:	str.w	r5, [r2, #-8]
    f374:	str.w	r5, [r2, #-4]
    f378:	add.w	r2, r2, #16
    f37c:	bhi.n	f364 <memset+0x38>
    f37e:	sub.w	r2, r4, #16
    f382:	bic.w	r2, r2, #15
    f386:	and.w	r4, r4, #15
    f38a:	adds	r2, #16
    f38c:	cmp	r4, #3
    f38e:	add	r3, r2
    f390:	bls.n	f3ae <memset+0x82>
    f392:	mov	r6, r3
    f394:	mov	r2, r4
    f396:	subs	r2, #4
    f398:	cmp	r2, #3
    f39a:	str.w	r5, [r6], #4
    f39e:	bhi.n	f396 <memset+0x6a>
    f3a0:	subs	r2, r4, #4
    f3a2:	bic.w	r2, r2, #3
    f3a6:	adds	r2, #4
    f3a8:	add	r3, r2
    f3aa:	and.w	r4, r4, #3
    f3ae:	cbz	r4, f3bc <memset+0x90>
    f3b0:	uxtb	r1, r1
    f3b2:	add	r4, r3
    f3b4:	strb.w	r1, [r3], #1
    f3b8:	cmp	r3, r4
    f3ba:	bne.n	f3b4 <memset+0x88>
    f3bc:	pop	{r4, r5, r6}
    f3be:	bx	lr
    f3c0:	mov	r4, r2
    f3c2:	mov	r3, r0
    f3c4:	b.n	f34c <memset+0x20>
    f3c6:	nop

0000f3c8 <__malloc_lock>:
    f3c8:	bx	lr
    f3ca:	nop

0000f3cc <__malloc_unlock>:
    f3cc:	bx	lr
    f3ce:	nop

0000f3d0 <_realloc_r>:
    f3d0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f3d4:	mov	r7, r2
    f3d6:	sub	sp, #12
    f3d8:	cmp	r1, #0
    f3da:	beq.w	f560 <_realloc_r+0x190>
    f3de:	mov	r6, r1
    f3e0:	mov	r9, r0
    f3e2:	add.w	r5, r7, #11
    f3e6:	bl	f3c8 <__malloc_lock>
    f3ea:	ldr.w	lr, [r6, #-4]
    f3ee:	cmp	r5, #22
    f3f0:	bic.w	r4, lr, #3
    f3f4:	sub.w	r8, r6, #8
    f3f8:	bhi.n	f47c <_realloc_r+0xac>
    f3fa:	movs	r2, #16
    f3fc:	mov	r5, r2
    f3fe:	cmp	r7, r5
    f400:	bhi.n	f486 <_realloc_r+0xb6>
    f402:	cmp	r4, r2
    f404:	bge.n	f4f2 <_realloc_r+0x122>
    f406:	ldr	r3, [pc, #804]	; (f72c <_realloc_r+0x35c>)
    f408:	ldr	r1, [r3, #8]
    f40a:	add.w	r0, r8, r4
    f40e:	cmp	r0, r1
    f410:	ldr	r1, [r0, #4]
    f412:	beq.w	f5c8 <_realloc_r+0x1f8>
    f416:	bic.w	r3, r1, #1
    f41a:	add	r3, r0
    f41c:	ldr	r3, [r3, #4]
    f41e:	lsls	r3, r3, #31
    f420:	bpl.n	f51e <_realloc_r+0x14e>
    f422:	tst.w	lr, #1
    f426:	beq.n	f494 <_realloc_r+0xc4>
    f428:	mov	r1, r7
    f42a:	mov	r0, r9
    f42c:	bl	ebc0 <_malloc_r>
    f430:	mov	r7, r0
    f432:	cbz	r0, f46e <_realloc_r+0x9e>
    f434:	ldr.w	r3, [r6, #-4]
    f438:	bic.w	r3, r3, #1
    f43c:	add	r3, r8
    f43e:	sub.w	r2, r0, #8
    f442:	cmp	r2, r3
    f444:	beq.w	f6d0 <_realloc_r+0x300>
    f448:	subs	r2, r4, #4
    f44a:	cmp	r2, #36	; 0x24
    f44c:	bhi.w	f6b2 <_realloc_r+0x2e2>
    f450:	cmp	r2, #19
    f452:	bhi.w	f65e <_realloc_r+0x28e>
    f456:	mov	r3, r0
    f458:	mov	r2, r6
    f45a:	ldr	r1, [r2, #0]
    f45c:	str	r1, [r3, #0]
    f45e:	ldr	r1, [r2, #4]
    f460:	str	r1, [r3, #4]
    f462:	ldr	r2, [r2, #8]
    f464:	str	r2, [r3, #8]
    f466:	mov	r1, r6
    f468:	mov	r0, r9
    f46a:	bl	fdf0 <_free_r>
    f46e:	mov	r0, r9
    f470:	bl	f3cc <__malloc_unlock>
    f474:	mov	r0, r7
    f476:	add	sp, #12
    f478:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f47c:	bic.w	r5, r5, #7
    f480:	cmp	r5, #0
    f482:	mov	r2, r5
    f484:	bge.n	f3fe <_realloc_r+0x2e>
    f486:	movs	r3, #12
    f488:	movs	r0, #0
    f48a:	str.w	r3, [r9]
    f48e:	add	sp, #12
    f490:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f494:	ldr.w	r3, [r6, #-8]
    f498:	rsb	sl, r3, r8
    f49c:	ldr.w	r3, [sl, #4]
    f4a0:	bic.w	ip, r3, #3
    f4a4:	add.w	r3, r4, ip
    f4a8:	cmp	r3, r2
    f4aa:	blt.n	f428 <_realloc_r+0x58>
    f4ac:	mov	r7, sl
    f4ae:	ldr.w	r1, [sl, #12]
    f4b2:	ldr.w	r0, [r7, #8]!
    f4b6:	subs	r2, r4, #4
    f4b8:	cmp	r2, #36	; 0x24
    f4ba:	str	r1, [r0, #12]
    f4bc:	str	r0, [r1, #8]
    f4be:	bhi.w	f6f0 <_realloc_r+0x320>
    f4c2:	cmp	r2, #19
    f4c4:	bls.w	f6ec <_realloc_r+0x31c>
    f4c8:	ldr	r1, [r6, #0]
    f4ca:	str.w	r1, [sl, #8]
    f4ce:	ldr	r1, [r6, #4]
    f4d0:	str.w	r1, [sl, #12]
    f4d4:	cmp	r2, #27
    f4d6:	bhi.w	f730 <_realloc_r+0x360>
    f4da:	adds	r6, #8
    f4dc:	add.w	r2, sl, #16
    f4e0:	ldr	r1, [r6, #0]
    f4e2:	str	r1, [r2, #0]
    f4e4:	ldr	r1, [r6, #4]
    f4e6:	str	r1, [r2, #4]
    f4e8:	ldr	r1, [r6, #8]
    f4ea:	str	r1, [r2, #8]
    f4ec:	mov	r6, r7
    f4ee:	mov	r4, r3
    f4f0:	mov	r8, sl
    f4f2:	subs	r3, r4, r5
    f4f4:	cmp	r3, #15
    f4f6:	bhi.n	f534 <_realloc_r+0x164>
    f4f8:	ldr.w	r3, [r8, #4]
    f4fc:	and.w	r3, r3, #1
    f500:	orrs	r3, r4
    f502:	add	r4, r8
    f504:	str.w	r3, [r8, #4]
    f508:	ldr	r3, [r4, #4]
    f50a:	orr.w	r3, r3, #1
    f50e:	str	r3, [r4, #4]
    f510:	mov	r0, r9
    f512:	bl	f3cc <__malloc_unlock>
    f516:	mov	r0, r6
    f518:	add	sp, #12
    f51a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f51e:	bic.w	r1, r1, #3
    f522:	add	r1, r4
    f524:	cmp	r1, r2
    f526:	blt.n	f56c <_realloc_r+0x19c>
    f528:	ldr	r3, [r0, #12]
    f52a:	ldr	r2, [r0, #8]
    f52c:	mov	r4, r1
    f52e:	str	r3, [r2, #12]
    f530:	str	r2, [r3, #8]
    f532:	b.n	f4f2 <_realloc_r+0x122>
    f534:	ldr.w	r2, [r8, #4]
    f538:	add.w	r1, r8, r5
    f53c:	and.w	r2, r2, #1
    f540:	orrs	r5, r2
    f542:	orr.w	r2, r3, #1
    f546:	add	r3, r1
    f548:	str.w	r5, [r8, #4]
    f54c:	str	r2, [r1, #4]
    f54e:	ldr	r2, [r3, #4]
    f550:	orr.w	r2, r2, #1
    f554:	adds	r1, #8
    f556:	str	r2, [r3, #4]
    f558:	mov	r0, r9
    f55a:	bl	fdf0 <_free_r>
    f55e:	b.n	f510 <_realloc_r+0x140>
    f560:	mov	r1, r2
    f562:	add	sp, #12
    f564:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f568:	b.w	ebc0 <_malloc_r>
    f56c:	tst.w	lr, #1
    f570:	bne.w	f428 <_realloc_r+0x58>
    f574:	ldr.w	r3, [r6, #-8]
    f578:	rsb	sl, r3, r8
    f57c:	ldr.w	r3, [sl, #4]
    f580:	bic.w	ip, r3, #3
    f584:	add.w	lr, r1, ip
    f588:	cmp	lr, r2
    f58a:	blt.n	f4a4 <_realloc_r+0xd4>
    f58c:	ldr	r3, [r0, #12]
    f58e:	ldr	r2, [r0, #8]
    f590:	mov	r7, sl
    f592:	str	r3, [r2, #12]
    f594:	str	r2, [r3, #8]
    f596:	ldr.w	r1, [r7, #8]!
    f59a:	ldr.w	r3, [sl, #12]
    f59e:	str	r3, [r1, #12]
    f5a0:	subs	r2, r4, #4
    f5a2:	cmp	r2, #36	; 0x24
    f5a4:	str	r1, [r3, #8]
    f5a6:	bhi.w	f6dc <_realloc_r+0x30c>
    f5aa:	cmp	r2, #19
    f5ac:	bls.n	f674 <_realloc_r+0x2a4>
    f5ae:	ldr	r3, [r6, #0]
    f5b0:	str.w	r3, [sl, #8]
    f5b4:	ldr	r3, [r6, #4]
    f5b6:	str.w	r3, [sl, #12]
    f5ba:	cmp	r2, #27
    f5bc:	bhi.w	f700 <_realloc_r+0x330>
    f5c0:	adds	r6, #8
    f5c2:	add.w	r3, sl, #16
    f5c6:	b.n	f676 <_realloc_r+0x2a6>
    f5c8:	bic.w	fp, r1, #3
    f5cc:	add	fp, r4
    f5ce:	add.w	r0, r5, #16
    f5d2:	cmp	fp, r0
    f5d4:	bge.n	f68a <_realloc_r+0x2ba>
    f5d6:	tst.w	lr, #1
    f5da:	bne.w	f428 <_realloc_r+0x58>
    f5de:	ldr.w	r1, [r6, #-8]
    f5e2:	rsb	sl, r1, r8
    f5e6:	ldr.w	r1, [sl, #4]
    f5ea:	bic.w	ip, r1, #3
    f5ee:	add	fp, ip
    f5f0:	cmp	r0, fp
    f5f2:	bgt.w	f4a4 <_realloc_r+0xd4>
    f5f6:	mov	r7, sl
    f5f8:	ldr.w	r1, [sl, #12]
    f5fc:	ldr.w	r0, [r7, #8]!
    f600:	subs	r2, r4, #4
    f602:	cmp	r2, #36	; 0x24
    f604:	str	r1, [r0, #12]
    f606:	str	r0, [r1, #8]
    f608:	bhi.w	f774 <_realloc_r+0x3a4>
    f60c:	cmp	r2, #19
    f60e:	bls.w	f75c <_realloc_r+0x38c>
    f612:	ldr	r1, [r6, #0]
    f614:	str.w	r1, [sl, #8]
    f618:	ldr	r1, [r6, #4]
    f61a:	str.w	r1, [sl, #12]
    f61e:	cmp	r2, #27
    f620:	bhi.w	f782 <_realloc_r+0x3b2>
    f624:	adds	r6, #8
    f626:	add.w	r2, sl, #16
    f62a:	ldr	r1, [r6, #0]
    f62c:	str	r1, [r2, #0]
    f62e:	ldr	r1, [r6, #4]
    f630:	str	r1, [r2, #4]
    f632:	ldr	r1, [r6, #8]
    f634:	str	r1, [r2, #8]
    f636:	add.w	r1, sl, r5
    f63a:	rsb	r2, r5, fp
    f63e:	orr.w	r2, r2, #1
    f642:	str	r1, [r3, #8]
    f644:	str	r2, [r1, #4]
    f646:	ldr.w	r3, [sl, #4]
    f64a:	and.w	r3, r3, #1
    f64e:	orrs	r5, r3
    f650:	mov	r0, r9
    f652:	str.w	r5, [sl, #4]
    f656:	bl	f3cc <__malloc_unlock>
    f65a:	mov	r0, r7
    f65c:	b.n	f518 <_realloc_r+0x148>
    f65e:	ldr	r3, [r6, #0]
    f660:	str	r3, [r0, #0]
    f662:	ldr	r3, [r6, #4]
    f664:	str	r3, [r0, #4]
    f666:	cmp	r2, #27
    f668:	bhi.n	f6ba <_realloc_r+0x2ea>
    f66a:	add.w	r3, r0, #8
    f66e:	add.w	r2, r6, #8
    f672:	b.n	f45a <_realloc_r+0x8a>
    f674:	mov	r3, r7
    f676:	ldr	r2, [r6, #0]
    f678:	str	r2, [r3, #0]
    f67a:	ldr	r2, [r6, #4]
    f67c:	str	r2, [r3, #4]
    f67e:	ldr	r2, [r6, #8]
    f680:	str	r2, [r3, #8]
    f682:	mov	r6, r7
    f684:	mov	r4, lr
    f686:	mov	r8, sl
    f688:	b.n	f4f2 <_realloc_r+0x122>
    f68a:	add.w	r1, r8, r5
    f68e:	rsb	fp, r5, fp
    f692:	orr.w	r2, fp, #1
    f696:	str	r1, [r3, #8]
    f698:	str	r2, [r1, #4]
    f69a:	ldr.w	r3, [r6, #-4]
    f69e:	and.w	r3, r3, #1
    f6a2:	orrs	r5, r3
    f6a4:	mov	r0, r9
    f6a6:	str.w	r5, [r6, #-4]
    f6aa:	bl	f3cc <__malloc_unlock>
    f6ae:	mov	r0, r6
    f6b0:	b.n	f518 <_realloc_r+0x148>
    f6b2:	mov	r1, r6
    f6b4:	bl	f264 <memmove>
    f6b8:	b.n	f466 <_realloc_r+0x96>
    f6ba:	ldr	r3, [r6, #8]
    f6bc:	str	r3, [r0, #8]
    f6be:	ldr	r3, [r6, #12]
    f6c0:	str	r3, [r0, #12]
    f6c2:	cmp	r2, #36	; 0x24
    f6c4:	beq.n	f718 <_realloc_r+0x348>
    f6c6:	add.w	r3, r0, #16
    f6ca:	add.w	r2, r6, #16
    f6ce:	b.n	f45a <_realloc_r+0x8a>
    f6d0:	ldr.w	r3, [r0, #-4]
    f6d4:	bic.w	r3, r3, #3
    f6d8:	add	r4, r3
    f6da:	b.n	f4f2 <_realloc_r+0x122>
    f6dc:	mov	r1, r6
    f6de:	mov	r0, r7
    f6e0:	mov	r4, lr
    f6e2:	mov	r8, sl
    f6e4:	bl	f264 <memmove>
    f6e8:	mov	r6, r7
    f6ea:	b.n	f4f2 <_realloc_r+0x122>
    f6ec:	mov	r2, r7
    f6ee:	b.n	f4e0 <_realloc_r+0x110>
    f6f0:	mov	r1, r6
    f6f2:	mov	r0, r7
    f6f4:	mov	r4, r3
    f6f6:	mov	r8, sl
    f6f8:	bl	f264 <memmove>
    f6fc:	mov	r6, r7
    f6fe:	b.n	f4f2 <_realloc_r+0x122>
    f700:	ldr	r3, [r6, #8]
    f702:	str.w	r3, [sl, #16]
    f706:	ldr	r3, [r6, #12]
    f708:	str.w	r3, [sl, #20]
    f70c:	cmp	r2, #36	; 0x24
    f70e:	beq.n	f748 <_realloc_r+0x378>
    f710:	adds	r6, #16
    f712:	add.w	r3, sl, #24
    f716:	b.n	f676 <_realloc_r+0x2a6>
    f718:	ldr	r3, [r6, #16]
    f71a:	str	r3, [r0, #16]
    f71c:	ldr	r3, [r6, #20]
    f71e:	str	r3, [r0, #20]
    f720:	add.w	r2, r6, #24
    f724:	add.w	r3, r0, #24
    f728:	b.n	f45a <_realloc_r+0x8a>
    f72a:	nop
    f72c:	.word	0x1fff1068
    f730:	ldr	r1, [r6, #8]
    f732:	str.w	r1, [sl, #16]
    f736:	ldr	r1, [r6, #12]
    f738:	str.w	r1, [sl, #20]
    f73c:	cmp	r2, #36	; 0x24
    f73e:	beq.n	f760 <_realloc_r+0x390>
    f740:	adds	r6, #16
    f742:	add.w	r2, sl, #24
    f746:	b.n	f4e0 <_realloc_r+0x110>
    f748:	ldr	r3, [r6, #16]
    f74a:	str.w	r3, [sl, #24]
    f74e:	ldr	r3, [r6, #20]
    f750:	str.w	r3, [sl, #28]
    f754:	adds	r6, #24
    f756:	add.w	r3, sl, #32
    f75a:	b.n	f676 <_realloc_r+0x2a6>
    f75c:	mov	r2, r7
    f75e:	b.n	f62a <_realloc_r+0x25a>
    f760:	ldr	r2, [r6, #16]
    f762:	str.w	r2, [sl, #24]
    f766:	ldr	r2, [r6, #20]
    f768:	str.w	r2, [sl, #28]
    f76c:	adds	r6, #24
    f76e:	add.w	r2, sl, #32
    f772:	b.n	f4e0 <_realloc_r+0x110>
    f774:	mov	r1, r6
    f776:	mov	r0, r7
    f778:	str	r3, [sp, #4]
    f77a:	bl	f264 <memmove>
    f77e:	ldr	r3, [sp, #4]
    f780:	b.n	f636 <_realloc_r+0x266>
    f782:	ldr	r1, [r6, #8]
    f784:	str.w	r1, [sl, #16]
    f788:	ldr	r1, [r6, #12]
    f78a:	str.w	r1, [sl, #20]
    f78e:	cmp	r2, #36	; 0x24
    f790:	beq.n	f79a <_realloc_r+0x3ca>
    f792:	adds	r6, #16
    f794:	add.w	r2, sl, #24
    f798:	b.n	f62a <_realloc_r+0x25a>
    f79a:	ldr	r2, [r6, #16]
    f79c:	str.w	r2, [sl, #24]
    f7a0:	ldr	r2, [r6, #20]
    f7a2:	str.w	r2, [sl, #28]
    f7a6:	adds	r6, #24
    f7a8:	add.w	r2, sl, #32
    f7ac:	b.n	f62a <_realloc_r+0x25a>
    f7ae:	nop

0000f7b0 <_sbrk_r>:
    f7b0:	push	{r3, r4, r5, lr}
    f7b2:	ldr	r4, [pc, #28]	; (f7d0 <_sbrk_r+0x20>)
    f7b4:	movs	r3, #0
    f7b6:	mov	r5, r0
    f7b8:	mov	r0, r1
    f7ba:	str	r3, [r4, #0]
    f7bc:	bl	c600 <_sbrk>
    f7c0:	adds	r3, r0, #1
    f7c2:	beq.n	f7c6 <_sbrk_r+0x16>
    f7c4:	pop	{r3, r4, r5, pc}
    f7c6:	ldr	r3, [r4, #0]
    f7c8:	cmp	r3, #0
    f7ca:	beq.n	f7c4 <_sbrk_r+0x14>
    f7cc:	str	r3, [r5, #0]
    f7ce:	pop	{r3, r4, r5, pc}
    f7d0:	.word	0x1fff2124

0000f7d4 <strcpy>:
    f7d4:	eor.w	r2, r0, r1
    f7d8:	mov	ip, r0
    f7da:	tst.w	r2, #3
    f7de:	bne.n	f880 <strcpy+0xac>
    f7e0:	tst.w	r1, #3
    f7e4:	bne.n	f84c <strcpy+0x78>
    f7e6:	str.w	r4, [sp, #-4]!
    f7ea:	tst.w	r1, #4
    f7ee:	ldr.w	r3, [r1], #4
    f7f2:	beq.n	f80c <strcpy+0x38>
    f7f4:	sub.w	r2, r3, #16843009	; 0x1010101
    f7f8:	bics	r2, r3
    f7fa:	tst.w	r2, #2155905152	; 0x80808080
    f7fe:	itt	eq
    f800:	streq.w	r3, [ip], #4
    f804:	ldreq.w	r3, [r1], #4
    f808:	bne.n	f838 <strcpy+0x64>
    f80a:	nop
    f80c:	ldr.w	r4, [r1], #4
    f810:	sub.w	r2, r3, #16843009	; 0x1010101
    f814:	bics	r2, r3
    f816:	tst.w	r2, #2155905152	; 0x80808080
    f81a:	sub.w	r2, r4, #16843009	; 0x1010101
    f81e:	bne.n	f838 <strcpy+0x64>
    f820:	str.w	r3, [ip], #4
    f824:	bics	r2, r4
    f826:	tst.w	r2, #2155905152	; 0x80808080
    f82a:	itt	eq
    f82c:	ldreq.w	r3, [r1], #4
    f830:	streq.w	r4, [ip], #4
    f834:	beq.n	f80c <strcpy+0x38>
    f836:	mov	r3, r4
    f838:	strb.w	r3, [ip], #1
    f83c:	tst.w	r3, #255	; 0xff
    f840:	mov.w	r3, r3, ror #8
    f844:	bne.n	f838 <strcpy+0x64>
    f846:	ldr.w	r4, [sp], #4
    f84a:	bx	lr
    f84c:	tst.w	r1, #1
    f850:	beq.n	f860 <strcpy+0x8c>
    f852:	ldrb.w	r2, [r1], #1
    f856:	strb.w	r2, [ip], #1
    f85a:	cmp	r2, #0
    f85c:	it	eq
    f85e:	bxeq	lr
    f860:	tst.w	r1, #2
    f864:	beq.n	f7e6 <strcpy+0x12>
    f866:	ldrh.w	r2, [r1], #2
    f86a:	tst.w	r2, #255	; 0xff
    f86e:	itet	ne
    f870:	strhne.w	r2, [ip], #2
    f874:	strbeq.w	r2, [ip]
    f878:	tstne.w	r2, #65280	; 0xff00
    f87c:	bne.n	f7e6 <strcpy+0x12>
    f87e:	bx	lr
    f880:	ldrb.w	r2, [r1], #1
    f884:	strb.w	r2, [ip], #1
    f888:	cmp	r2, #0
    f88a:	bne.n	f880 <strcpy+0xac>
    f88c:	bx	lr
    f88e:	nop

0000f890 <strlcat>:
    f890:	push	{r4, r5, r6, lr}
    f892:	cbz	r2, f8d2 <strlcat+0x42>
    f894:	ldrb	r6, [r0, #0]
    f896:	cbz	r6, f8de <strlcat+0x4e>
    f898:	adds	r3, r0, #1
    f89a:	adds	r6, r0, r2
    f89c:	b.n	f8a4 <strlcat+0x14>
    f89e:	ldrb	r5, [r3, #0]
    f8a0:	adds	r3, #1
    f8a2:	cbz	r5, f8aa <strlcat+0x1a>
    f8a4:	cmp	r6, r3
    f8a6:	mov	r4, r3
    f8a8:	bne.n	f89e <strlcat+0xe>
    f8aa:	subs	r6, r4, r0
    f8ac:	subs	r2, r2, r6
    f8ae:	beq.n	f8d4 <strlcat+0x44>
    f8b0:	ldrb	r3, [r1, #0]
    f8b2:	mov	r5, r1
    f8b4:	cbz	r3, f8ca <strlcat+0x3a>
    f8b6:	cmp	r2, #1
    f8b8:	beq.n	f8c0 <strlcat+0x30>
    f8ba:	strb	r3, [r4, #0]
    f8bc:	subs	r2, #1
    f8be:	adds	r4, #1
    f8c0:	ldrb.w	r3, [r5, #1]!
    f8c4:	cmp	r3, #0
    f8c6:	bne.n	f8b6 <strlcat+0x26>
    f8c8:	subs	r3, r5, r1
    f8ca:	movs	r2, #0
    f8cc:	strb	r2, [r4, #0]
    f8ce:	adds	r0, r6, r3
    f8d0:	pop	{r4, r5, r6, pc}
    f8d2:	mov	r6, r2
    f8d4:	mov	r0, r1
    f8d6:	bl	f940 <strlen>
    f8da:	add	r0, r6
    f8dc:	pop	{r4, r5, r6, pc}
    f8de:	mov	r4, r0
    f8e0:	b.n	f8b0 <strlcat+0x20>
    f8e2:	nop

0000f8e4 <strlcpy>:
    f8e4:	push	{r4}
    f8e6:	mov	r3, r1
    f8e8:	cbz	r2, f8fe <strlcpy+0x1a>
    f8ea:	b.n	f8f6 <strlcpy+0x12>
    f8ec:	ldrb.w	r4, [r3], #1
    f8f0:	strb.w	r4, [r0], #1
    f8f4:	cbz	r4, f906 <strlcpy+0x22>
    f8f6:	subs	r2, #1
    f8f8:	bne.n	f8ec <strlcpy+0x8>
    f8fa:	movs	r2, #0
    f8fc:	strb	r2, [r0, #0]
    f8fe:	ldrb.w	r2, [r3], #1
    f902:	cmp	r2, #0
    f904:	bne.n	f8fe <strlcpy+0x1a>
    f906:	subs	r0, r3, r1
    f908:	subs	r0, #1
    f90a:	ldr.w	r4, [sp], #4
    f90e:	bx	lr
    f910:			; <UNDEFINED> instruction: 0xffffffff
    f914:			; <UNDEFINED> instruction: 0xffffffff
    f918:			; <UNDEFINED> instruction: 0xffffffff
    f91c:			; <UNDEFINED> instruction: 0xffffffff
    f920:			; <UNDEFINED> instruction: 0xffffffff
    f924:			; <UNDEFINED> instruction: 0xffffffff
    f928:			; <UNDEFINED> instruction: 0xffffffff
    f92c:			; <UNDEFINED> instruction: 0xffffffff
    f930:			; <UNDEFINED> instruction: 0xffffffff
    f934:			; <UNDEFINED> instruction: 0xffffffff
    f938:			; <UNDEFINED> instruction: 0xffffffff
    f93c:			; <UNDEFINED> instruction: 0xffffffff

0000f940 <strlen>:
    f940:	pld	[r0]
    f944:	strd	r4, r5, [sp, #-8]!
    f948:	bic.w	r1, r0, #7
    f94c:	mvn.w	ip, #0
    f950:	ands.w	r4, r0, #7
    f954:	pld	[r1, #32]
    f958:	bne.w	f9ee <strlen+0xae>
    f95c:	mov.w	r4, #0
    f960:	mvn.w	r0, #7
    f964:	ldrd	r2, r3, [r1]
    f968:	pld	[r1, #64]	; 0x40
    f96c:	add.w	r0, r0, #8
    f970:	uadd8	r2, r2, ip
    f974:	sel	r2, r4, ip
    f978:	uadd8	r3, r3, ip
    f97c:	sel	r3, r2, ip
    f980:	cbnz	r3, f9d6 <strlen+0x96>
    f982:	ldrd	r2, r3, [r1, #8]
    f986:	uadd8	r2, r2, ip
    f98a:	add.w	r0, r0, #8
    f98e:	sel	r2, r4, ip
    f992:	uadd8	r3, r3, ip
    f996:	sel	r3, r2, ip
    f99a:	cbnz	r3, f9d6 <strlen+0x96>
    f99c:	ldrd	r2, r3, [r1, #16]
    f9a0:	uadd8	r2, r2, ip
    f9a4:	add.w	r0, r0, #8
    f9a8:	sel	r2, r4, ip
    f9ac:	uadd8	r3, r3, ip
    f9b0:	sel	r3, r2, ip
    f9b4:	cbnz	r3, f9d6 <strlen+0x96>
    f9b6:	ldrd	r2, r3, [r1, #24]
    f9ba:	add.w	r1, r1, #32
    f9be:	uadd8	r2, r2, ip
    f9c2:	add.w	r0, r0, #8
    f9c6:	sel	r2, r4, ip
    f9ca:	uadd8	r3, r3, ip
    f9ce:	sel	r3, r2, ip
    f9d2:	cmp	r3, #0
    f9d4:	beq.n	f964 <strlen+0x24>
    f9d6:	cmp	r2, #0
    f9d8:	itt	eq
    f9da:	addeq	r0, #4
    f9dc:	moveq	r2, r3
    f9de:	rev	r2, r2
    f9e0:	clz	r2, r2
    f9e4:	ldrd	r4, r5, [sp], #8
    f9e8:	add.w	r0, r0, r2, lsr #3
    f9ec:	bx	lr
    f9ee:	ldrd	r2, r3, [r1]
    f9f2:	and.w	r5, r4, #3
    f9f6:	rsb	r0, r4, #0
    f9fa:	mov.w	r5, r5, lsl #3
    f9fe:	tst.w	r4, #4
    fa02:	pld	[r1, #64]	; 0x40
    fa06:	lsl.w	r5, ip, r5
    fa0a:	orn	r2, r2, r5
    fa0e:	itt	ne
    fa10:	ornne	r3, r3, r5
    fa14:	movne	r2, ip
    fa16:	mov.w	r4, #0
    fa1a:	b.n	f970 <strlen+0x30>

0000fa1c <strncmp>:
    fa1c:	cmp	r2, #0
    fa1e:	beq.n	faa4 <strncmp+0x88>
    fa20:	orr.w	r3, r0, r1
    fa24:	ands.w	r3, r3, #3
    fa28:	push	{r4, r5, r6, r7}
    fa2a:	bne.n	fa78 <strncmp+0x5c>
    fa2c:	cmp	r2, #3
    fa2e:	bls.n	fa78 <strncmp+0x5c>
    fa30:	ldr	r4, [r0, #0]
    fa32:	ldr	r5, [r1, #0]
    fa34:	cmp	r4, r5
    fa36:	bne.n	fa78 <strncmp+0x5c>
    fa38:	subs	r2, #4
    fa3a:	beq.n	faa8 <strncmp+0x8c>
    fa3c:	sub.w	r5, r4, #16843009	; 0x1010101
    fa40:	bic.w	r4, r5, r4
    fa44:	tst.w	r4, #2155905152	; 0x80808080
    fa48:	bne.n	faae <strncmp+0x92>
    fa4a:	adds	r7, r0, #4
    fa4c:	adds	r5, r1, #4
    fa4e:	b.n	fa6c <strncmp+0x50>
    fa50:	ldr.w	r3, [r7], #4
    fa54:	ldr	r6, [r1, #0]
    fa56:	sub.w	r4, r3, #16843009	; 0x1010101
    fa5a:	cmp	r3, r6
    fa5c:	bic.w	r4, r4, r3
    fa60:	bne.n	fa78 <strncmp+0x5c>
    fa62:	subs	r2, #4
    fa64:	beq.n	faa8 <strncmp+0x8c>
    fa66:	tst.w	r4, #2155905152	; 0x80808080
    fa6a:	bne.n	fab4 <strncmp+0x98>
    fa6c:	cmp	r2, #3
    fa6e:	mov	r1, r5
    fa70:	mov	r0, r7
    fa72:	add.w	r5, r5, #4
    fa76:	bhi.n	fa50 <strncmp+0x34>
    fa78:	ldrb	r3, [r0, #0]
    fa7a:	ldrb	r4, [r1, #0]
    fa7c:	cmp	r4, r3
    fa7e:	add.w	r2, r2, #4294967295
    fa82:	bne.n	fa9e <strncmp+0x82>
    fa84:	cbz	r2, faa8 <strncmp+0x8c>
    fa86:	cbnz	r4, fa8e <strncmp+0x72>
    fa88:	b.n	fab8 <strncmp+0x9c>
    fa8a:	cbz	r2, faa8 <strncmp+0x8c>
    fa8c:	cbz	r3, faae <strncmp+0x92>
    fa8e:	ldrb.w	r3, [r0, #1]!
    fa92:	ldrb.w	r4, [r1, #1]!
    fa96:	cmp	r3, r4
    fa98:	add.w	r2, r2, #4294967295
    fa9c:	beq.n	fa8a <strncmp+0x6e>
    fa9e:	subs	r0, r3, r4
    faa0:	pop	{r4, r5, r6, r7}
    faa2:	bx	lr
    faa4:	mov	r0, r2
    faa6:	bx	lr
    faa8:	mov	r0, r2
    faaa:	pop	{r4, r5, r6, r7}
    faac:	bx	lr
    faae:	mov	r0, r3
    fab0:	pop	{r4, r5, r6, r7}
    fab2:	bx	lr
    fab4:	movs	r0, #0
    fab6:	b.n	faa0 <strncmp+0x84>
    fab8:	mov	r0, r4
    faba:	b.n	faa0 <strncmp+0x84>

0000fabc <_vdprintf_r>:
    fabc:	push	{r4, r5, r6, r7, lr}
    fabe:	sub.w	sp, sp, #532	; 0x214
    fac2:	add	r5, sp, #16
    fac4:	str	r3, [sp, #0]
    fac6:	mov	r7, r1
    fac8:	mov	r3, r2
    faca:	mov.w	r4, #512	; 0x200
    face:	add	r2, sp, #12
    fad0:	mov	r1, r5
    fad2:	str	r4, [sp, #12]
    fad4:	mov	r6, r0
    fad6:	bl	10600 <_vasnprintf_r>
    fada:	cbz	r0, fb00 <_vdprintf_r+0x44>
    fadc:	mov	r4, r0
    fade:	mov	r2, r0
    fae0:	mov	r1, r7
    fae2:	ldr	r3, [sp, #12]
    fae4:	mov	r0, r6
    fae6:	bl	fb3c <_write_r>
    faea:	cmp	r4, r5
    faec:	str	r0, [sp, #12]
    faee:	beq.n	fafa <_vdprintf_r+0x3e>
    faf0:	mov	r0, r6
    faf2:	mov	r1, r4
    faf4:	bl	fdf0 <_free_r>
    faf8:	ldr	r0, [sp, #12]
    fafa:	add.w	sp, sp, #532	; 0x214
    fafe:	pop	{r4, r5, r6, r7, pc}
    fb00:	mov.w	r0, #4294967295
    fb04:	b.n	fafa <_vdprintf_r+0x3e>
    fb06:	nop

0000fb08 <vdprintf>:
    fb08:	push	{r4}
    fb0a:	ldr	r4, [pc, #16]	; (fb1c <vdprintf+0x14>)
    fb0c:	mov	r3, r2
    fb0e:	mov	r2, r1
    fb10:	mov	r1, r0
    fb12:	ldr	r0, [r4, #0]
    fb14:	ldr.w	r4, [sp], #4
    fb18:	b.w	fabc <_vdprintf_r>
    fb1c:	.word	0x1fff0ef8

0000fb20 <__ascii_wctomb>:
    fb20:	cbz	r1, fb2c <__ascii_wctomb+0xc>
    fb22:	cmp	r2, #255	; 0xff
    fb24:	bhi.n	fb30 <__ascii_wctomb+0x10>
    fb26:	strb	r2, [r1, #0]
    fb28:	movs	r0, #1
    fb2a:	bx	lr
    fb2c:	mov	r0, r1
    fb2e:	bx	lr
    fb30:	movs	r3, #138	; 0x8a
    fb32:	str	r3, [r0, #0]
    fb34:	mov.w	r0, #4294967295
    fb38:	bx	lr
    fb3a:	nop

0000fb3c <_write_r>:
    fb3c:	push	{r4, r5, r6, lr}
    fb3e:	mov	r5, r1
    fb40:	ldr	r4, [pc, #32]	; (fb64 <_write_r+0x28>)
    fb42:	mov	r1, r2
    fb44:	mov	r6, r0
    fb46:	mov	r2, r3
    fb48:	mov	r0, r5
    fb4a:	movs	r3, #0
    fb4c:	str	r3, [r4, #0]
    fb4e:	bl	dcec <_write>
    fb52:	adds	r3, r0, #1
    fb54:	beq.n	fb58 <_write_r+0x1c>
    fb56:	pop	{r4, r5, r6, pc}
    fb58:	ldr	r3, [r4, #0]
    fb5a:	cmp	r3, #0
    fb5c:	beq.n	fb56 <_write_r+0x1a>
    fb5e:	str	r3, [r6, #0]
    fb60:	pop	{r4, r5, r6, pc}
    fb62:	nop
    fb64:	.word	0x1fff2124

0000fb68 <__register_exitproc>:
    fb68:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fb6c:	ldr	r4, [pc, #148]	; (fc04 <__register_exitproc+0x9c>)
    fb6e:	ldr	r5, [r4, #0]
    fb70:	ldr.w	r4, [r5, #328]	; 0x148
    fb74:	mov	r6, r0
    fb76:	mov	r8, r1
    fb78:	mov	sl, r2
    fb7a:	mov	r9, r3
    fb7c:	cbz	r4, fbf0 <__register_exitproc+0x88>
    fb7e:	ldr	r0, [r4, #4]
    fb80:	cmp	r0, #31
    fb82:	bgt.n	fbb4 <__register_exitproc+0x4c>
    fb84:	adds	r3, r0, #1
    fb86:	cbz	r6, fba6 <__register_exitproc+0x3e>
    fb88:	add.w	r5, r4, r0, lsl #2
    fb8c:	movs	r2, #1
    fb8e:	str.w	sl, [r5, #136]	; 0x88
    fb92:	ldr.w	r1, [r4, #392]	; 0x188
    fb96:	lsls	r2, r0
    fb98:	orrs	r1, r2
    fb9a:	cmp	r6, #2
    fb9c:	str.w	r1, [r4, #392]	; 0x188
    fba0:	str.w	r9, [r5, #264]	; 0x108
    fba4:	beq.n	fbe4 <__register_exitproc+0x7c>
    fba6:	adds	r0, #2
    fba8:	str	r3, [r4, #4]
    fbaa:	str.w	r8, [r4, r0, lsl #2]
    fbae:	movs	r0, #0
    fbb0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fbb4:	ldr	r3, [pc, #80]	; (fc08 <__register_exitproc+0xa0>)
    fbb6:	cbz	r3, fbfa <__register_exitproc+0x92>
    fbb8:	mov.w	r0, #400	; 0x190
    fbbc:	bl	eba0 <malloc>
    fbc0:	mov	r4, r0
    fbc2:	cbz	r0, fbfa <__register_exitproc+0x92>
    fbc4:	ldr.w	r3, [r5, #328]	; 0x148
    fbc8:	movs	r7, #0
    fbca:	stmia.w	r0, {r3, r7}
    fbce:	str.w	r4, [r5, #328]	; 0x148
    fbd2:	mov	r0, r7
    fbd4:	movs	r3, #1
    fbd6:	str.w	r7, [r4, #392]	; 0x188
    fbda:	str.w	r7, [r4, #396]	; 0x18c
    fbde:	cmp	r6, #0
    fbe0:	beq.n	fba6 <__register_exitproc+0x3e>
    fbe2:	b.n	fb88 <__register_exitproc+0x20>
    fbe4:	ldr.w	r1, [r4, #396]	; 0x18c
    fbe8:	orrs	r2, r1
    fbea:	str.w	r2, [r4, #396]	; 0x18c
    fbee:	b.n	fba6 <__register_exitproc+0x3e>
    fbf0:	add.w	r4, r5, #332	; 0x14c
    fbf4:	str.w	r4, [r5, #328]	; 0x148
    fbf8:	b.n	fb7e <__register_exitproc+0x16>
    fbfa:	mov.w	r0, #4294967295
    fbfe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fc02:	nop
    fc04:	.word	0x00013528
    fc08:	.word	0x0000eba1

0000fc0c <register_fini>:
    fc0c:	ldr	r3, [pc, #8]	; (fc18 <register_fini+0xc>)
    fc0e:	cbz	r3, fc16 <register_fini+0xa>
    fc10:	ldr	r0, [pc, #8]	; (fc1c <register_fini+0x10>)
    fc12:	b.w	fc20 <atexit>
    fc16:	bx	lr
    fc18:	.word	0x00000000
    fc1c:	.word	0x0000fd2d

0000fc20 <atexit>:
    fc20:	movs	r3, #0
    fc22:	mov	r1, r0
    fc24:	mov	r2, r3
    fc26:	mov	r0, r3
    fc28:	b.w	fb68 <__register_exitproc>

0000fc2c <fcvtbuf>:
    fc2c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fc30:	vpush	{d8}
    fc34:	vmov.f32	s16, s0
    fc38:	vmov.f32	s17, s1
    fc3c:	ldr	r5, [pc, #224]	; (fd20 <fcvtbuf+0xf4>)
    fc3e:	sub	sp, #20
    fc40:	ldr	r7, [r5, #0]
    fc42:	mov	r4, r0
    fc44:	mov	r6, r1
    fc46:	mov	r8, r2
    fc48:	mov	r5, r3
    fc4a:	cmp	r3, #0
    fc4c:	beq.n	fcea <fcvtbuf+0xbe>
    fc4e:	movs	r2, #0
    fc50:	ldr	r3, [pc, #208]	; (fd24 <fcvtbuf+0xf8>)
    fc52:	vmov	r0, r1, d8
    fc56:	bl	e730 <__aeabi_dcmplt>
    fc5a:	cbnz	r0, fcbc <fcvtbuf+0x90>
    fc5c:	vmov.f32	s0, s16
    fc60:	vmov.f32	s1, s17
    fc64:	add	r3, sp, #12
    fc66:	str	r3, [sp, #4]
    fc68:	str.w	r8, [sp]
    fc6c:	mov	r0, r7
    fc6e:	mov	r3, r6
    fc70:	mov	r2, r4
    fc72:	movs	r1, #3
    fc74:	bl	107e8 <_dtoa_r>
    fc78:	ldr	r3, [sp, #12]
    fc7a:	ldr	r1, [r6, #0]
    fc7c:	cmp	r0, r3
    fc7e:	rsb	r1, r1, #0
    fc82:	bcs.n	fcf8 <fcvtbuf+0xcc>
    fc84:	subs	r1, r1, r5
    fc86:	mov	r3, r5
    fc88:	ldrb.w	r2, [r0], #1
    fc8c:	strb.w	r2, [r3], #1
    fc90:	ldr	r2, [sp, #12]
    fc92:	cmp	r2, r0
    fc94:	add.w	r6, r3, r1
    fc98:	bhi.n	fc88 <fcvtbuf+0x5c>
    fc9a:	cmp	r4, r6
    fc9c:	ble.n	fcfe <fcvtbuf+0xd2>
    fc9e:	subs	r2, r4, r6
    fca0:	add	r2, r3
    fca2:	movs	r1, #48	; 0x30
    fca4:	strb.w	r1, [r3], #1
    fca8:	cmp	r2, r3
    fcaa:	bne.n	fca4 <fcvtbuf+0x78>
    fcac:	movs	r3, #0
    fcae:	strb	r3, [r2, #0]
    fcb0:	mov	r0, r5
    fcb2:	add	sp, #20
    fcb4:	vpop	{d8}
    fcb8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    fcbc:	movs	r2, #0
    fcbe:	ldr	r3, [pc, #104]	; (fd28 <fcvtbuf+0xfc>)
    fcc0:	vmov	r0, r1, d8
    fcc4:	bl	e76c <__aeabi_dcmpgt>
    fcc8:	cmp	r0, #0
    fcca:	beq.n	fc5c <fcvtbuf+0x30>
    fccc:	vmov.f32	s0, s16
    fcd0:	vmov.f32	s1, s17
    fcd4:	add	r3, sp, #12
    fcd6:	str	r3, [sp, #4]
    fcd8:	str.w	r8, [sp]
    fcdc:	mov	r0, r7
    fcde:	mov	r3, r6
    fce0:	mov	r2, r4
    fce2:	movs	r1, #2
    fce4:	bl	107e8 <_dtoa_r>
    fce8:	b.n	fc78 <fcvtbuf+0x4c>
    fcea:	ldr	r2, [r7, #80]	; 0x50
    fcec:	add.w	r3, r0, #35	; 0x23
    fcf0:	cmp	r2, r3
    fcf2:	ble.n	fd02 <fcvtbuf+0xd6>
    fcf4:	ldr	r5, [r7, #84]	; 0x54
    fcf6:	b.n	fc4e <fcvtbuf+0x22>
    fcf8:	mov	r6, r1
    fcfa:	mov	r3, r5
    fcfc:	b.n	fc9a <fcvtbuf+0x6e>
    fcfe:	mov	r2, r3
    fd00:	b.n	fcac <fcvtbuf+0x80>
    fd02:	add.w	r9, r0, #36	; 0x24
    fd06:	mov	r2, r9
    fd08:	ldr	r1, [r7, #84]	; 0x54
    fd0a:	mov	r0, r7
    fd0c:	bl	f3d0 <_realloc_r>
    fd10:	mov	r5, r0
    fd12:	cmp	r0, #0
    fd14:	beq.n	fcb0 <fcvtbuf+0x84>
    fd16:	str.w	r9, [r7, #80]	; 0x50
    fd1a:	str	r0, [r7, #84]	; 0x54
    fd1c:	b.n	fc4e <fcvtbuf+0x22>
    fd1e:	nop
    fd20:	.word	0x1fff0ef8
    fd24:	.word	0x3ff00000
    fd28:	.word	0xbff00000

0000fd2c <__libc_fini_array>:
    fd2c:	push	{r3, r4, r5, lr}
    fd2e:	ldr	r5, [pc, #28]	; (fd4c <__libc_fini_array+0x20>)
    fd30:	ldr	r4, [pc, #28]	; (fd50 <__libc_fini_array+0x24>)
    fd32:	subs	r4, r5, r4
    fd34:	asrs	r4, r4, #2
    fd36:	beq.n	fd44 <__libc_fini_array+0x18>
    fd38:	subs	r4, #1
    fd3a:	ldr.w	r3, [r5, #-4]!
    fd3e:	blx	r3
    fd40:	cmp	r4, #0
    fd42:	bne.n	fd38 <__libc_fini_array+0xc>
    fd44:	ldmia.w	sp!, {r3, r4, r5, lr}
    fd48:	b.w	137c8 <__init_array_end>
	...

0000fd54 <_malloc_trim_r>:
    fd54:	push	{r3, r4, r5, r6, r7, lr}
    fd56:	ldr	r7, [pc, #140]	; (fde4 <_malloc_trim_r+0x90>)
    fd58:	mov	r4, r1
    fd5a:	mov	r6, r0
    fd5c:	bl	f3c8 <__malloc_lock>
    fd60:	ldr	r3, [r7, #8]
    fd62:	ldr	r5, [r3, #4]
    fd64:	bic.w	r5, r5, #3
    fd68:	subs	r1, r5, r4
    fd6a:	addw	r1, r1, #4079	; 0xfef
    fd6e:	bic.w	r1, r1, #4080	; 0xff0
    fd72:	bic.w	r1, r1, #15
    fd76:	sub.w	r4, r1, #4096	; 0x1000
    fd7a:	cmp.w	r4, #4096	; 0x1000
    fd7e:	blt.n	fd90 <_malloc_trim_r+0x3c>
    fd80:	movs	r1, #0
    fd82:	mov	r0, r6
    fd84:	bl	f7b0 <_sbrk_r>
    fd88:	ldr	r3, [r7, #8]
    fd8a:	add	r3, r5
    fd8c:	cmp	r0, r3
    fd8e:	beq.n	fd9a <_malloc_trim_r+0x46>
    fd90:	mov	r0, r6
    fd92:	bl	f3cc <__malloc_unlock>
    fd96:	movs	r0, #0
    fd98:	pop	{r3, r4, r5, r6, r7, pc}
    fd9a:	negs	r1, r4
    fd9c:	mov	r0, r6
    fd9e:	bl	f7b0 <_sbrk_r>
    fda2:	adds	r0, #1
    fda4:	beq.n	fdc2 <_malloc_trim_r+0x6e>
    fda6:	ldr	r3, [pc, #64]	; (fde8 <_malloc_trim_r+0x94>)
    fda8:	ldr	r2, [r7, #8]
    fdaa:	ldr	r1, [r3, #0]
    fdac:	subs	r5, r5, r4
    fdae:	orr.w	r5, r5, #1
    fdb2:	mov	r0, r6
    fdb4:	subs	r1, r1, r4
    fdb6:	str	r5, [r2, #4]
    fdb8:	str	r1, [r3, #0]
    fdba:	bl	f3cc <__malloc_unlock>
    fdbe:	movs	r0, #1
    fdc0:	pop	{r3, r4, r5, r6, r7, pc}
    fdc2:	movs	r1, #0
    fdc4:	mov	r0, r6
    fdc6:	bl	f7b0 <_sbrk_r>
    fdca:	ldr	r2, [r7, #8]
    fdcc:	subs	r3, r0, r2
    fdce:	cmp	r3, #15
    fdd0:	ble.n	fd90 <_malloc_trim_r+0x3c>
    fdd2:	ldr	r4, [pc, #24]	; (fdec <_malloc_trim_r+0x98>)
    fdd4:	ldr	r1, [pc, #16]	; (fde8 <_malloc_trim_r+0x94>)
    fdd6:	ldr	r4, [r4, #0]
    fdd8:	orr.w	r3, r3, #1
    fddc:	subs	r0, r0, r4
    fdde:	str	r3, [r2, #4]
    fde0:	str	r0, [r1, #0]
    fde2:	b.n	fd90 <_malloc_trim_r+0x3c>
    fde4:	.word	0x1fff1068
    fde8:	.word	0x1fff20e4
    fdec:	.word	0x1fff1474

0000fdf0 <_free_r>:
    fdf0:	cmp	r1, #0
    fdf2:	beq.n	fe80 <_free_r+0x90>
    fdf4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fdf8:	mov	r5, r1
    fdfa:	mov	r8, r0
    fdfc:	bl	f3c8 <__malloc_lock>
    fe00:	ldr.w	r7, [r5, #-4]
    fe04:	ldr	r1, [pc, #424]	; (ffb0 <_free_r+0x1c0>)
    fe06:	bic.w	r3, r7, #1
    fe0a:	sub.w	r4, r5, #8
    fe0e:	adds	r2, r4, r3
    fe10:	ldr	r6, [r1, #8]
    fe12:	ldr	r0, [r2, #4]
    fe14:	cmp	r2, r6
    fe16:	bic.w	r0, r0, #3
    fe1a:	beq.n	fee2 <_free_r+0xf2>
    fe1c:	lsls	r6, r7, #31
    fe1e:	str	r0, [r2, #4]
    fe20:	bmi.n	fe3a <_free_r+0x4a>
    fe22:	ldr.w	r7, [r5, #-8]
    fe26:	subs	r4, r4, r7
    fe28:	add.w	lr, r1, #8
    fe2c:	ldr	r5, [r4, #8]
    fe2e:	cmp	r5, lr
    fe30:	add	r3, r7
    fe32:	beq.n	ff14 <_free_r+0x124>
    fe34:	ldr	r7, [r4, #12]
    fe36:	str	r7, [r5, #12]
    fe38:	str	r5, [r7, #8]
    fe3a:	adds	r5, r2, r0
    fe3c:	ldr	r5, [r5, #4]
    fe3e:	lsls	r5, r5, #31
    fe40:	bpl.n	fec8 <_free_r+0xd8>
    fe42:	orr.w	r2, r3, #1
    fe46:	str	r2, [r4, #4]
    fe48:	str	r3, [r4, r3]
    fe4a:	cmp.w	r3, #512	; 0x200
    fe4e:	bcs.n	fe82 <_free_r+0x92>
    fe50:	lsrs	r3, r3, #3
    fe52:	adds	r2, r3, #1
    fe54:	ldr	r5, [r1, #4]
    fe56:	ldr.w	r7, [r1, r2, lsl #3]
    fe5a:	str	r7, [r4, #8]
    fe5c:	movs	r0, #1
    fe5e:	asrs	r3, r3, #2
    fe60:	lsl.w	r3, r0, r3
    fe64:	add.w	r0, r1, r2, lsl #3
    fe68:	orrs	r5, r3
    fe6a:	subs	r0, #8
    fe6c:	str	r0, [r4, #12]
    fe6e:	str	r5, [r1, #4]
    fe70:	str.w	r4, [r1, r2, lsl #3]
    fe74:	str	r4, [r7, #12]
    fe76:	mov	r0, r8
    fe78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    fe7c:	b.w	f3cc <__malloc_unlock>
    fe80:	bx	lr
    fe82:	lsrs	r2, r3, #9
    fe84:	cmp	r2, #4
    fe86:	bhi.n	ff30 <_free_r+0x140>
    fe88:	lsrs	r2, r3, #6
    fe8a:	add.w	r7, r2, #57	; 0x39
    fe8e:	lsls	r7, r7, #1
    fe90:	add.w	r5, r2, #56	; 0x38
    fe94:	add.w	r0, r1, r7, lsl #2
    fe98:	ldr.w	r2, [r1, r7, lsl #2]
    fe9c:	ldr	r1, [pc, #272]	; (ffb0 <_free_r+0x1c0>)
    fe9e:	subs	r0, #8
    fea0:	cmp	r0, r2
    fea2:	beq.n	ff40 <_free_r+0x150>
    fea4:	ldr	r1, [r2, #4]
    fea6:	bic.w	r1, r1, #3
    feaa:	cmp	r3, r1
    feac:	bcs.n	feb4 <_free_r+0xc4>
    feae:	ldr	r2, [r2, #8]
    feb0:	cmp	r0, r2
    feb2:	bne.n	fea4 <_free_r+0xb4>
    feb4:	ldr	r0, [r2, #12]
    feb6:	str	r0, [r4, #12]
    feb8:	str	r2, [r4, #8]
    feba:	str	r4, [r0, #8]
    febc:	str	r4, [r2, #12]
    febe:	mov	r0, r8
    fec0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    fec4:	b.w	f3cc <__malloc_unlock>
    fec8:	ldr	r5, [r2, #8]
    feca:	ldr	r7, [pc, #232]	; (ffb4 <_free_r+0x1c4>)
    fecc:	cmp	r5, r7
    fece:	add	r3, r0
    fed0:	beq.n	ff52 <_free_r+0x162>
    fed2:	ldr	r0, [r2, #12]
    fed4:	str	r0, [r5, #12]
    fed6:	orr.w	r2, r3, #1
    feda:	str	r5, [r0, #8]
    fedc:	str	r2, [r4, #4]
    fede:	str	r3, [r4, r3]
    fee0:	b.n	fe4a <_free_r+0x5a>
    fee2:	lsls	r7, r7, #31
    fee4:	add	r3, r0
    fee6:	bmi.n	fef8 <_free_r+0x108>
    fee8:	ldr.w	r2, [r5, #-8]
    feec:	subs	r4, r4, r2
    feee:	add	r3, r2
    fef0:	ldr	r0, [r4, #8]
    fef2:	ldr	r2, [r4, #12]
    fef4:	str	r2, [r0, #12]
    fef6:	str	r0, [r2, #8]
    fef8:	ldr	r2, [pc, #188]	; (ffb8 <_free_r+0x1c8>)
    fefa:	ldr	r2, [r2, #0]
    fefc:	orr.w	r0, r3, #1
    ff00:	cmp	r3, r2
    ff02:	str	r0, [r4, #4]
    ff04:	str	r4, [r1, #8]
    ff06:	bcc.n	fe76 <_free_r+0x86>
    ff08:	ldr	r3, [pc, #176]	; (ffbc <_free_r+0x1cc>)
    ff0a:	mov	r0, r8
    ff0c:	ldr	r1, [r3, #0]
    ff0e:	bl	fd54 <_malloc_trim_r>
    ff12:	b.n	fe76 <_free_r+0x86>
    ff14:	adds	r1, r2, r0
    ff16:	ldr	r1, [r1, #4]
    ff18:	lsls	r1, r1, #31
    ff1a:	bmi.n	ffa6 <_free_r+0x1b6>
    ff1c:	ldr	r1, [r2, #8]
    ff1e:	ldr	r2, [r2, #12]
    ff20:	str	r2, [r1, #12]
    ff22:	add	r3, r0
    ff24:	orr.w	r0, r3, #1
    ff28:	str	r1, [r2, #8]
    ff2a:	str	r0, [r4, #4]
    ff2c:	str	r3, [r4, r3]
    ff2e:	b.n	fe76 <_free_r+0x86>
    ff30:	cmp	r2, #20
    ff32:	bhi.n	ff64 <_free_r+0x174>
    ff34:	add.w	r7, r2, #92	; 0x5c
    ff38:	lsls	r7, r7, #1
    ff3a:	add.w	r5, r2, #91	; 0x5b
    ff3e:	b.n	fe94 <_free_r+0xa4>
    ff40:	asrs	r2, r5, #2
    ff42:	ldr	r3, [r1, #4]
    ff44:	movs	r5, #1
    ff46:	lsl.w	r2, r5, r2
    ff4a:	orrs	r3, r2
    ff4c:	str	r3, [r1, #4]
    ff4e:	mov	r2, r0
    ff50:	b.n	feb6 <_free_r+0xc6>
    ff52:	orr.w	r2, r3, #1
    ff56:	str	r4, [r1, #20]
    ff58:	str	r4, [r1, #16]
    ff5a:	str	r5, [r4, #12]
    ff5c:	str	r5, [r4, #8]
    ff5e:	str	r2, [r4, #4]
    ff60:	str	r3, [r4, r3]
    ff62:	b.n	fe76 <_free_r+0x86>
    ff64:	cmp	r2, #84	; 0x54
    ff66:	bhi.n	ff76 <_free_r+0x186>
    ff68:	lsrs	r2, r3, #12
    ff6a:	add.w	r7, r2, #111	; 0x6f
    ff6e:	lsls	r7, r7, #1
    ff70:	add.w	r5, r2, #110	; 0x6e
    ff74:	b.n	fe94 <_free_r+0xa4>
    ff76:	cmp.w	r2, #340	; 0x154
    ff7a:	bhi.n	ff8a <_free_r+0x19a>
    ff7c:	lsrs	r2, r3, #15
    ff7e:	add.w	r7, r2, #120	; 0x78
    ff82:	lsls	r7, r7, #1
    ff84:	add.w	r5, r2, #119	; 0x77
    ff88:	b.n	fe94 <_free_r+0xa4>
    ff8a:	movw	r0, #1364	; 0x554
    ff8e:	cmp	r2, r0
    ff90:	bhi.n	ffa0 <_free_r+0x1b0>
    ff92:	lsrs	r2, r3, #18
    ff94:	add.w	r7, r2, #125	; 0x7d
    ff98:	lsls	r7, r7, #1
    ff9a:	add.w	r5, r2, #124	; 0x7c
    ff9e:	b.n	fe94 <_free_r+0xa4>
    ffa0:	movs	r7, #254	; 0xfe
    ffa2:	movs	r5, #126	; 0x7e
    ffa4:	b.n	fe94 <_free_r+0xa4>
    ffa6:	orr.w	r2, r3, #1
    ffaa:	str	r2, [r4, #4]
    ffac:	str	r3, [r4, r3]
    ffae:	b.n	fe76 <_free_r+0x86>
    ffb0:	.word	0x1fff1068
    ffb4:	.word	0x1fff1070
    ffb8:	.word	0x1fff1470
    ffbc:	.word	0x1fff20e0

0000ffc0 <_localeconv_r>:
    ffc0:	ldr	r2, [pc, #16]	; (ffd4 <_localeconv_r+0x14>)
    ffc2:	ldr	r3, [pc, #20]	; (ffd8 <_localeconv_r+0x18>)
    ffc4:	ldr	r2, [r2, #0]
    ffc6:	ldr	r0, [r2, #52]	; 0x34
    ffc8:	cmp	r0, #0
    ffca:	it	eq
    ffcc:	moveq	r0, r3
    ffce:	adds	r0, #240	; 0xf0
    ffd0:	bx	lr
    ffd2:	nop
    ffd4:	.word	0x1fff0ef8
    ffd8:	.word	0x1fff0efc

0000ffdc <_Balloc>:
    ffdc:	ldr	r3, [r0, #76]	; 0x4c
    ffde:	push	{r4, r5, r6, lr}
    ffe0:	mov	r5, r0
    ffe2:	mov	r4, r1
    ffe4:	cbz	r3, fffa <_Balloc+0x1e>
    ffe6:	ldr.w	r0, [r3, r4, lsl #2]
    ffea:	cbz	r0, 1000e <_Balloc+0x32>
    ffec:	ldr	r2, [r0, #0]
    ffee:	str.w	r2, [r3, r4, lsl #2]
    fff2:	movs	r3, #0
    fff4:	str	r3, [r0, #16]
    fff6:	str	r3, [r0, #12]
    fff8:	pop	{r4, r5, r6, pc}
    fffa:	movs	r2, #33	; 0x21
    fffc:	movs	r1, #4
    fffe:	bl	10660 <_calloc_r>
   10002:	str	r0, [r5, #76]	; 0x4c
   10004:	mov	r3, r0
   10006:	cmp	r0, #0
   10008:	bne.n	ffe6 <_Balloc+0xa>
   1000a:	movs	r0, #0
   1000c:	pop	{r4, r5, r6, pc}
   1000e:	movs	r1, #1
   10010:	lsl.w	r6, r1, r4
   10014:	adds	r2, r6, #5
   10016:	mov	r0, r5
   10018:	lsls	r2, r2, #2
   1001a:	bl	10660 <_calloc_r>
   1001e:	cmp	r0, #0
   10020:	beq.n	1000a <_Balloc+0x2e>
   10022:	str	r4, [r0, #4]
   10024:	str	r6, [r0, #8]
   10026:	b.n	fff2 <_Balloc+0x16>

00010028 <_Bfree>:
   10028:	cbz	r1, 10038 <_Bfree+0x10>
   1002a:	ldr	r3, [r0, #76]	; 0x4c
   1002c:	ldr	r2, [r1, #4]
   1002e:	ldr.w	r0, [r3, r2, lsl #2]
   10032:	str	r0, [r1, #0]
   10034:	str.w	r1, [r3, r2, lsl #2]
   10038:	bx	lr
   1003a:	nop

0001003c <__multadd>:
   1003c:	push	{r4, r5, r6, r7, lr}
   1003e:	ldr	r4, [r1, #16]
   10040:	sub	sp, #12
   10042:	mov	r5, r1
   10044:	mov	r6, r0
   10046:	add.w	lr, r1, #20
   1004a:	movs	r7, #0
   1004c:	ldr.w	r0, [lr]
   10050:	uxth	r1, r0
   10052:	mla	r1, r2, r1, r3
   10056:	lsrs	r3, r1, #16
   10058:	lsrs	r0, r0, #16
   1005a:	mla	r3, r2, r0, r3
   1005e:	uxth	r1, r1
   10060:	adds	r7, #1
   10062:	add.w	r1, r1, r3, lsl #16
   10066:	cmp	r4, r7
   10068:	str.w	r1, [lr], #4
   1006c:	mov.w	r3, r3, lsr #16
   10070:	bgt.n	1004c <__multadd+0x10>
   10072:	cbz	r3, 10084 <__multadd+0x48>
   10074:	ldr	r2, [r5, #8]
   10076:	cmp	r4, r2
   10078:	bge.n	1008a <__multadd+0x4e>
   1007a:	add.w	r2, r5, r4, lsl #2
   1007e:	adds	r4, #1
   10080:	str	r3, [r2, #20]
   10082:	str	r4, [r5, #16]
   10084:	mov	r0, r5
   10086:	add	sp, #12
   10088:	pop	{r4, r5, r6, r7, pc}
   1008a:	ldr	r1, [r5, #4]
   1008c:	str	r3, [sp, #4]
   1008e:	adds	r1, #1
   10090:	mov	r0, r6
   10092:	bl	ffdc <_Balloc>
   10096:	ldr	r2, [r5, #16]
   10098:	adds	r2, #2
   1009a:	add.w	r1, r5, #12
   1009e:	mov	r7, r0
   100a0:	lsls	r2, r2, #2
   100a2:	adds	r0, #12
   100a4:	bl	c198 <memcpy>
   100a8:	ldr	r2, [r6, #76]	; 0x4c
   100aa:	ldr	r1, [r5, #4]
   100ac:	ldr	r3, [sp, #4]
   100ae:	ldr.w	r0, [r2, r1, lsl #2]
   100b2:	str	r0, [r5, #0]
   100b4:	str.w	r5, [r2, r1, lsl #2]
   100b8:	mov	r5, r7
   100ba:	b.n	1007a <__multadd+0x3e>

000100bc <__hi0bits>:
   100bc:	lsrs	r3, r0, #16
   100be:	lsls	r3, r3, #16
   100c0:	cbnz	r3, 100f0 <__hi0bits+0x34>
   100c2:	lsls	r0, r0, #16
   100c4:	movs	r3, #16
   100c6:	tst.w	r0, #4278190080	; 0xff000000
   100ca:	itt	eq
   100cc:	lsleq	r0, r0, #8
   100ce:	addeq	r3, #8
   100d0:	tst.w	r0, #4026531840	; 0xf0000000
   100d4:	itt	eq
   100d6:	lsleq	r0, r0, #4
   100d8:	addeq	r3, #4
   100da:	tst.w	r0, #3221225472	; 0xc0000000
   100de:	itt	eq
   100e0:	lsleq	r0, r0, #2
   100e2:	addeq	r3, #2
   100e4:	cmp	r0, #0
   100e6:	blt.n	100f8 <__hi0bits+0x3c>
   100e8:	lsls	r2, r0, #1
   100ea:	bmi.n	100f4 <__hi0bits+0x38>
   100ec:	movs	r0, #32
   100ee:	bx	lr
   100f0:	movs	r3, #0
   100f2:	b.n	100c6 <__hi0bits+0xa>
   100f4:	adds	r0, r3, #1
   100f6:	bx	lr
   100f8:	mov	r0, r3
   100fa:	bx	lr

000100fc <__lo0bits>:
   100fc:	ldr	r3, [r0, #0]
   100fe:	ands.w	r2, r3, #7
   10102:	beq.n	10114 <__lo0bits+0x18>
   10104:	lsls	r1, r3, #31
   10106:	bmi.n	1014a <__lo0bits+0x4e>
   10108:	lsls	r2, r3, #30
   1010a:	bmi.n	1014e <__lo0bits+0x52>
   1010c:	lsrs	r3, r3, #2
   1010e:	str	r3, [r0, #0]
   10110:	movs	r0, #2
   10112:	bx	lr
   10114:	uxth	r1, r3
   10116:	cbnz	r1, 1011c <__lo0bits+0x20>
   10118:	lsrs	r3, r3, #16
   1011a:	movs	r2, #16
   1011c:	tst.w	r3, #255	; 0xff
   10120:	itt	eq
   10122:	lsreq	r3, r3, #8
   10124:	addeq	r2, #8
   10126:	lsls	r1, r3, #28
   10128:	itt	eq
   1012a:	lsreq	r3, r3, #4
   1012c:	addeq	r2, #4
   1012e:	lsls	r1, r3, #30
   10130:	itt	eq
   10132:	lsreq	r3, r3, #2
   10134:	addeq	r2, #2
   10136:	lsls	r1, r3, #31
   10138:	bmi.n	10144 <__lo0bits+0x48>
   1013a:	lsrs	r3, r3, #1
   1013c:	bne.n	10142 <__lo0bits+0x46>
   1013e:	movs	r0, #32
   10140:	bx	lr
   10142:	adds	r2, #1
   10144:	str	r3, [r0, #0]
   10146:	mov	r0, r2
   10148:	bx	lr
   1014a:	movs	r0, #0
   1014c:	bx	lr
   1014e:	lsrs	r3, r3, #1
   10150:	str	r3, [r0, #0]
   10152:	movs	r0, #1
   10154:	bx	lr
   10156:	nop

00010158 <__i2b>:
   10158:	push	{r4, lr}
   1015a:	mov	r4, r1
   1015c:	movs	r1, #1
   1015e:	bl	ffdc <_Balloc>
   10162:	movs	r2, #1
   10164:	str	r4, [r0, #20]
   10166:	str	r2, [r0, #16]
   10168:	pop	{r4, pc}
   1016a:	nop

0001016c <__multiply>:
   1016c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10170:	ldr	r5, [r1, #16]
   10172:	ldr	r7, [r2, #16]
   10174:	cmp	r5, r7
   10176:	sub	sp, #12
   10178:	mov	r4, r1
   1017a:	mov	r6, r2
   1017c:	bge.n	10188 <__multiply+0x1c>
   1017e:	mov	r2, r5
   10180:	mov	r4, r6
   10182:	mov	r5, r7
   10184:	mov	r6, r1
   10186:	mov	r7, r2
   10188:	ldr	r3, [r4, #8]
   1018a:	ldr	r1, [r4, #4]
   1018c:	add.w	r8, r5, r7
   10190:	cmp	r8, r3
   10192:	it	gt
   10194:	addgt	r1, #1
   10196:	bl	ffdc <_Balloc>
   1019a:	add.w	ip, r0, #20
   1019e:	add.w	r9, ip, r8, lsl #2
   101a2:	cmp	ip, r9
   101a4:	str	r0, [sp, #0]
   101a6:	bcs.n	101b4 <__multiply+0x48>
   101a8:	mov	r3, ip
   101aa:	movs	r1, #0
   101ac:	str.w	r1, [r3], #4
   101b0:	cmp	r9, r3
   101b2:	bhi.n	101ac <__multiply+0x40>
   101b4:	add.w	r2, r6, #20
   101b8:	add.w	sl, r2, r7, lsl #2
   101bc:	add.w	r3, r4, #20
   101c0:	cmp	r2, sl
   101c2:	add.w	lr, r3, r5, lsl #2
   101c6:	bcs.n	10272 <__multiply+0x106>
   101c8:	str.w	r9, [sp, #4]
   101cc:	mov	r9, r3
   101ce:	ldr.w	r3, [r2], #4
   101d2:	uxth.w	fp, r3
   101d6:	cmp.w	fp, #0
   101da:	beq.n	1021e <__multiply+0xb2>
   101dc:	movs	r0, #0
   101de:	mov	r7, r9
   101e0:	mov	r6, ip
   101e2:	mov	r5, r0
   101e4:	b.n	101e8 <__multiply+0x7c>
   101e6:	mov	r6, r3
   101e8:	ldr.w	r4, [r7], #4
   101ec:	ldr	r0, [r6, #0]
   101ee:	uxth	r1, r4
   101f0:	uxth	r3, r0
   101f2:	mla	r1, fp, r1, r3
   101f6:	lsrs	r4, r4, #16
   101f8:	lsrs	r0, r0, #16
   101fa:	adds	r3, r1, r5
   101fc:	mla	r0, fp, r4, r0
   10200:	add.w	r0, r0, r3, lsr #16
   10204:	uxth	r1, r3
   10206:	mov	r3, r6
   10208:	orr.w	r1, r1, r0, lsl #16
   1020c:	cmp	lr, r7
   1020e:	mov.w	r5, r0, lsr #16
   10212:	str.w	r1, [r3], #4
   10216:	bhi.n	101e6 <__multiply+0x7a>
   10218:	str	r5, [r6, #4]
   1021a:	ldr.w	r3, [r2, #-4]
   1021e:	movs.w	fp, r3, lsr #16
   10222:	beq.n	10266 <__multiply+0xfa>
   10224:	ldr.w	r3, [ip]
   10228:	mov	r7, ip
   1022a:	mov	r0, r3
   1022c:	mov	r5, r9
   1022e:	movs	r1, #0
   10230:	b.n	10234 <__multiply+0xc8>
   10232:	mov	r7, r6
   10234:	ldrh	r4, [r5, #0]
   10236:	lsrs	r0, r0, #16
   10238:	mla	r0, fp, r4, r0
   1023c:	add	r1, r0
   1023e:	uxth	r4, r3
   10240:	mov	r6, r7
   10242:	orr.w	r3, r4, r1, lsl #16
   10246:	str.w	r3, [r6], #4
   1024a:	ldr	r0, [r7, #4]
   1024c:	ldr.w	r4, [r5], #4
   10250:	uxth	r3, r0
   10252:	lsrs	r4, r4, #16
   10254:	mla	r4, fp, r4, r3
   10258:	add.w	r3, r4, r1, lsr #16
   1025c:	cmp	lr, r5
   1025e:	mov.w	r1, r3, lsr #16
   10262:	bhi.n	10232 <__multiply+0xc6>
   10264:	str	r3, [r7, #4]
   10266:	cmp	sl, r2
   10268:	add.w	ip, ip, #4
   1026c:	bhi.n	101ce <__multiply+0x62>
   1026e:	ldr.w	r9, [sp, #4]
   10272:	cmp.w	r8, #0
   10276:	ble.n	10290 <__multiply+0x124>
   10278:	ldr.w	r3, [r9, #-4]
   1027c:	sub.w	r9, r9, #4
   10280:	cbz	r3, 1028a <__multiply+0x11e>
   10282:	b.n	10290 <__multiply+0x124>
   10284:	ldr.w	r3, [r9, #-4]!
   10288:	cbnz	r3, 10290 <__multiply+0x124>
   1028a:	subs.w	r8, r8, #1
   1028e:	bne.n	10284 <__multiply+0x118>
   10290:	ldr	r0, [sp, #0]
   10292:	str.w	r8, [r0, #16]
   10296:	add	sp, #12
   10298:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001029c <__pow5mult>:
   1029c:	ands.w	r3, r2, #3
   102a0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   102a4:	mov	r4, r2
   102a6:	mov	r7, r0
   102a8:	bne.n	10308 <__pow5mult+0x6c>
   102aa:	mov	r6, r1
   102ac:	asrs	r4, r4, #2
   102ae:	beq.n	102ea <__pow5mult+0x4e>
   102b0:	ldr	r5, [r7, #72]	; 0x48
   102b2:	cbz	r5, 1031a <__pow5mult+0x7e>
   102b4:	lsls	r3, r4, #31
   102b6:	mov.w	r8, #0
   102ba:	bmi.n	102ca <__pow5mult+0x2e>
   102bc:	asrs	r4, r4, #1
   102be:	beq.n	102ea <__pow5mult+0x4e>
   102c0:	ldr	r0, [r5, #0]
   102c2:	cbz	r0, 102f0 <__pow5mult+0x54>
   102c4:	mov	r5, r0
   102c6:	lsls	r3, r4, #31
   102c8:	bpl.n	102bc <__pow5mult+0x20>
   102ca:	mov	r2, r5
   102cc:	mov	r1, r6
   102ce:	mov	r0, r7
   102d0:	bl	1016c <__multiply>
   102d4:	cbz	r6, 10304 <__pow5mult+0x68>
   102d6:	ldr	r2, [r6, #4]
   102d8:	ldr	r3, [r7, #76]	; 0x4c
   102da:	asrs	r4, r4, #1
   102dc:	ldr.w	r1, [r3, r2, lsl #2]
   102e0:	str	r1, [r6, #0]
   102e2:	str.w	r6, [r3, r2, lsl #2]
   102e6:	mov	r6, r0
   102e8:	bne.n	102c0 <__pow5mult+0x24>
   102ea:	mov	r0, r6
   102ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   102f0:	mov	r2, r5
   102f2:	mov	r1, r5
   102f4:	mov	r0, r7
   102f6:	bl	1016c <__multiply>
   102fa:	str	r0, [r5, #0]
   102fc:	str.w	r8, [r0]
   10300:	mov	r5, r0
   10302:	b.n	102c6 <__pow5mult+0x2a>
   10304:	mov	r6, r0
   10306:	b.n	102bc <__pow5mult+0x20>
   10308:	subs	r2, r3, #1
   1030a:	ldr	r5, [pc, #44]	; (10338 <__pow5mult+0x9c>)
   1030c:	movs	r3, #0
   1030e:	ldr.w	r2, [r5, r2, lsl #2]
   10312:	bl	1003c <__multadd>
   10316:	mov	r6, r0
   10318:	b.n	102ac <__pow5mult+0x10>
   1031a:	movs	r1, #1
   1031c:	mov	r0, r7
   1031e:	bl	ffdc <_Balloc>
   10322:	movw	r1, #625	; 0x271
   10326:	movs	r2, #1
   10328:	movs	r3, #0
   1032a:	str	r1, [r0, #20]
   1032c:	str	r2, [r0, #16]
   1032e:	mov	r5, r0
   10330:	str	r0, [r7, #72]	; 0x48
   10332:	str	r3, [r0, #0]
   10334:	b.n	102b4 <__pow5mult+0x18>
   10336:	nop
   10338:	.word	0x00013730

0001033c <__lshift>:
   1033c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10340:	mov	r9, r2
   10342:	ldr	r2, [r1, #16]
   10344:	ldr	r3, [r1, #8]
   10346:	mov.w	r4, r9, asr #5
   1034a:	add.w	r8, r4, r2
   1034e:	add.w	r5, r8, #1
   10352:	cmp	r5, r3
   10354:	mov	r6, r1
   10356:	mov	sl, r0
   10358:	ldr	r1, [r1, #4]
   1035a:	ble.n	10366 <__lshift+0x2a>
   1035c:	lsls	r3, r3, #1
   1035e:	cmp	r5, r3
   10360:	add.w	r1, r1, #1
   10364:	bgt.n	1035c <__lshift+0x20>
   10366:	mov	r0, sl
   10368:	bl	ffdc <_Balloc>
   1036c:	cmp	r4, #0
   1036e:	add.w	r2, r0, #20
   10372:	ble.n	103e6 <__lshift+0xaa>
   10374:	add.w	r3, r2, r4, lsl #2
   10378:	movs	r1, #0
   1037a:	str.w	r1, [r2], #4
   1037e:	cmp	r3, r2
   10380:	bne.n	1037a <__lshift+0x3e>
   10382:	ldr	r4, [r6, #16]
   10384:	add.w	r1, r6, #20
   10388:	ands.w	r9, r9, #31
   1038c:	add.w	lr, r1, r4, lsl #2
   10390:	beq.n	103d6 <__lshift+0x9a>
   10392:	rsb	r2, r9, #32
   10396:	movs	r4, #0
   10398:	ldr	r7, [r1, #0]
   1039a:	lsl.w	ip, r7, r9
   1039e:	orr.w	r4, ip, r4
   103a2:	mov	ip, r3
   103a4:	str.w	r4, [r3], #4
   103a8:	ldr.w	r4, [r1], #4
   103ac:	cmp	lr, r1
   103ae:	lsr.w	r4, r4, r2
   103b2:	bhi.n	10398 <__lshift+0x5c>
   103b4:	str.w	r4, [ip, #4]
   103b8:	cbz	r4, 103be <__lshift+0x82>
   103ba:	add.w	r5, r8, #2
   103be:	ldr.w	r3, [sl, #76]	; 0x4c
   103c2:	ldr	r2, [r6, #4]
   103c4:	subs	r5, #1
   103c6:	ldr.w	r1, [r3, r2, lsl #2]
   103ca:	str	r5, [r0, #16]
   103cc:	str	r1, [r6, #0]
   103ce:	str.w	r6, [r3, r2, lsl #2]
   103d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   103d6:	subs	r3, #4
   103d8:	ldr.w	r2, [r1], #4
   103dc:	str.w	r2, [r3, #4]!
   103e0:	cmp	lr, r1
   103e2:	bhi.n	103d8 <__lshift+0x9c>
   103e4:	b.n	103be <__lshift+0x82>
   103e6:	mov	r3, r2
   103e8:	b.n	10382 <__lshift+0x46>
   103ea:	nop

000103ec <__mcmp>:
   103ec:	ldr	r2, [r0, #16]
   103ee:	ldr	r3, [r1, #16]
   103f0:	subs	r2, r2, r3
   103f2:	bne.n	1041c <__mcmp+0x30>
   103f4:	lsls	r3, r3, #2
   103f6:	adds	r0, #20
   103f8:	adds	r1, #20
   103fa:	add	r1, r3
   103fc:	push	{r4}
   103fe:	add	r3, r0
   10400:	b.n	10406 <__mcmp+0x1a>
   10402:	cmp	r0, r3
   10404:	bcs.n	10420 <__mcmp+0x34>
   10406:	ldr.w	r4, [r3, #-4]!
   1040a:	ldr.w	r2, [r1, #-4]!
   1040e:	cmp	r4, r2
   10410:	beq.n	10402 <__mcmp+0x16>
   10412:	bcc.n	10428 <__mcmp+0x3c>
   10414:	movs	r0, #1
   10416:	ldr.w	r4, [sp], #4
   1041a:	bx	lr
   1041c:	mov	r0, r2
   1041e:	bx	lr
   10420:	movs	r0, #0
   10422:	ldr.w	r4, [sp], #4
   10426:	bx	lr
   10428:	mov.w	r0, #4294967295
   1042c:	b.n	10416 <__mcmp+0x2a>
   1042e:	nop

00010430 <__mdiff>:
   10430:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10434:	ldr	r3, [r1, #16]
   10436:	mov	r7, r1
   10438:	ldr	r1, [r2, #16]
   1043a:	subs	r3, r3, r1
   1043c:	cmp	r3, #0
   1043e:	mov	r8, r2
   10440:	bne.n	10472 <__mdiff+0x42>
   10442:	lsls	r1, r1, #2
   10444:	add.w	r2, r7, #20
   10448:	add.w	r5, r8, #20
   1044c:	adds	r3, r2, r1
   1044e:	add	r1, r5
   10450:	b.n	10456 <__mdiff+0x26>
   10452:	cmp	r2, r3
   10454:	bcs.n	10514 <__mdiff+0xe4>
   10456:	ldr.w	r6, [r3, #-4]!
   1045a:	ldr.w	r4, [r1, #-4]!
   1045e:	cmp	r6, r4
   10460:	beq.n	10452 <__mdiff+0x22>
   10462:	bcs.n	10526 <__mdiff+0xf6>
   10464:	mov	r3, r7
   10466:	mov	r4, r2
   10468:	mov	r7, r8
   1046a:	mov.w	r9, #1
   1046e:	mov	r8, r3
   10470:	b.n	10480 <__mdiff+0x50>
   10472:	blt.n	10530 <__mdiff+0x100>
   10474:	add.w	r5, r7, #20
   10478:	add.w	r4, r2, #20
   1047c:	mov.w	r9, #0
   10480:	ldr	r1, [r7, #4]
   10482:	bl	ffdc <_Balloc>
   10486:	ldr.w	r3, [r8, #16]
   1048a:	ldr	r6, [r7, #16]
   1048c:	str.w	r9, [r0, #12]
   10490:	add.w	ip, r4, r3, lsl #2
   10494:	mov	lr, r4
   10496:	add.w	r7, r5, r6, lsl #2
   1049a:	add.w	r4, r0, #20
   1049e:	movs	r3, #0
   104a0:	ldr.w	r1, [lr], #4
   104a4:	ldr.w	r8, [r5], #4
   104a8:	uxth	r2, r1
   104aa:	uxtah	r3, r3, r8
   104ae:	lsrs	r1, r1, #16
   104b0:	subs	r2, r3, r2
   104b2:	rsb	r3, r1, r8, lsr #16
   104b6:	add.w	r3, r3, r2, asr #16
   104ba:	uxth	r2, r2
   104bc:	orr.w	r2, r2, r3, lsl #16
   104c0:	cmp	ip, lr
   104c2:	str.w	r2, [r4], #4
   104c6:	mov.w	r3, r3, asr #16
   104ca:	bhi.n	104a0 <__mdiff+0x70>
   104cc:	cmp	r7, r5
   104ce:	bls.n	10500 <__mdiff+0xd0>
   104d0:	mov	ip, r4
   104d2:	mov	r1, r5
   104d4:	ldr.w	lr, [r1], #4
   104d8:	uxtah	r2, r3, lr
   104dc:	asrs	r3, r2, #16
   104de:	add.w	r3, r3, lr, lsr #16
   104e2:	uxth	r2, r2
   104e4:	orr.w	r2, r2, r3, lsl #16
   104e8:	cmp	r7, r1
   104ea:	str.w	r2, [ip], #4
   104ee:	mov.w	r3, r3, asr #16
   104f2:	bhi.n	104d4 <__mdiff+0xa4>
   104f4:	mvns	r5, r5
   104f6:	add	r5, r7
   104f8:	bic.w	r5, r5, #3
   104fc:	adds	r5, #4
   104fe:	add	r4, r5
   10500:	subs	r4, #4
   10502:	cbnz	r2, 1050e <__mdiff+0xde>
   10504:	ldr.w	r3, [r4, #-4]!
   10508:	subs	r6, #1
   1050a:	cmp	r3, #0
   1050c:	beq.n	10504 <__mdiff+0xd4>
   1050e:	str	r6, [r0, #16]
   10510:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10514:	movs	r1, #0
   10516:	bl	ffdc <_Balloc>
   1051a:	movs	r2, #1
   1051c:	movs	r3, #0
   1051e:	str	r2, [r0, #16]
   10520:	str	r3, [r0, #20]
   10522:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10526:	mov	r4, r5
   10528:	mov.w	r9, #0
   1052c:	mov	r5, r2
   1052e:	b.n	10480 <__mdiff+0x50>
   10530:	mov	r3, r7
   10532:	add.w	r4, r7, #20
   10536:	add.w	r5, r8, #20
   1053a:	mov	r7, r8
   1053c:	mov.w	r9, #1
   10540:	mov	r8, r3
   10542:	b.n	10480 <__mdiff+0x50>

00010544 <__d2b>:
   10544:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10548:	vmov	r6, r7, d0
   1054c:	sub	sp, #12
   1054e:	mov	r8, r1
   10550:	movs	r1, #1
   10552:	mov	r4, r7
   10554:	ubfx	r5, r7, #20, #11
   10558:	mov	r7, r2
   1055a:	bl	ffdc <_Balloc>
   1055e:	ubfx	r4, r4, #0, #20
   10562:	mov	r9, r0
   10564:	cbz	r5, 1056a <__d2b+0x26>
   10566:	orr.w	r4, r4, #1048576	; 0x100000
   1056a:	str	r4, [sp, #4]
   1056c:	cbz	r6, 105b6 <__d2b+0x72>
   1056e:	add	r0, sp, #8
   10570:	str.w	r6, [r0, #-8]!
   10574:	bl	100fc <__lo0bits>
   10578:	cmp	r0, #0
   1057a:	bne.n	105e6 <__d2b+0xa2>
   1057c:	ldmia.w	sp, {r2, r3}
   10580:	str.w	r2, [r9, #20]
   10584:	cmp	r3, #0
   10586:	ite	eq
   10588:	moveq	r1, #1
   1058a:	movne	r1, #2
   1058c:	str.w	r3, [r9, #24]
   10590:	str.w	r1, [r9, #16]
   10594:	cbnz	r5, 105ce <__d2b+0x8a>
   10596:	add.w	r3, r9, r1, lsl #2
   1059a:	subw	r0, r0, #1074	; 0x432
   1059e:	str.w	r0, [r8]
   105a2:	ldr	r0, [r3, #16]
   105a4:	bl	100bc <__hi0bits>
   105a8:	rsb	r0, r0, r1, lsl #5
   105ac:	str	r0, [r7, #0]
   105ae:	mov	r0, r9
   105b0:	add	sp, #12
   105b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   105b6:	add	r0, sp, #4
   105b8:	bl	100fc <__lo0bits>
   105bc:	ldr	r3, [sp, #4]
   105be:	str.w	r3, [r9, #20]
   105c2:	movs	r1, #1
   105c4:	adds	r0, #32
   105c6:	str.w	r1, [r9, #16]
   105ca:	cmp	r5, #0
   105cc:	beq.n	10596 <__d2b+0x52>
   105ce:	subw	r5, r5, #1075	; 0x433
   105d2:	add	r5, r0
   105d4:	rsb	r0, r0, #53	; 0x35
   105d8:	str.w	r5, [r8]
   105dc:	str	r0, [r7, #0]
   105de:	mov	r0, r9
   105e0:	add	sp, #12
   105e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   105e6:	ldmia.w	sp, {r2, r3}
   105ea:	rsb	r1, r0, #32
   105ee:	lsl.w	r1, r3, r1
   105f2:	orrs	r2, r1
   105f4:	lsrs	r3, r0
   105f6:	str	r3, [sp, #4]
   105f8:	str.w	r2, [r9, #20]
   105fc:	b.n	10584 <__d2b+0x40>
   105fe:	nop

00010600 <_vasnprintf_r>:
   10600:	push	{r4, r5, r6, lr}
   10602:	mov	r5, r2
   10604:	sub	sp, #104	; 0x68
   10606:	ldr	r4, [r2, #0]
   10608:	cbz	r1, 1060e <_vasnprintf_r+0xe>
   1060a:	cmp	r4, #0
   1060c:	bne.n	10644 <_vasnprintf_r+0x44>
   1060e:	movs	r4, #0
   10610:	mov.w	r2, #648	; 0x288
   10614:	strh.w	r2, [sp, #12]
   10618:	str	r4, [sp, #0]
   1061a:	str	r4, [sp, #16]
   1061c:	mov	r2, r3
   1061e:	movw	r6, #65535	; 0xffff
   10622:	ldr	r3, [sp, #120]	; 0x78
   10624:	str	r4, [sp, #8]
   10626:	mov	r1, sp
   10628:	str	r4, [sp, #20]
   1062a:	strh.w	r6, [sp, #14]
   1062e:	bl	11620 <_svfprintf_r>
   10632:	cmp	r0, #0
   10634:	blt.n	1065a <_vasnprintf_r+0x5a>
   10636:	ldr	r3, [sp, #0]
   10638:	str	r0, [r5, #0]
   1063a:	movs	r2, #0
   1063c:	strb	r2, [r3, #0]
   1063e:	ldr	r0, [sp, #16]
   10640:	add	sp, #104	; 0x68
   10642:	pop	{r4, r5, r6, pc}
   10644:	mov.w	r2, #1544	; 0x608
   10648:	str	r1, [sp, #0]
   1064a:	str	r1, [sp, #16]
   1064c:	strh.w	r2, [sp, #12]
   10650:	bge.n	1061c <_vasnprintf_r+0x1c>
   10652:	movs	r3, #139	; 0x8b
   10654:	str	r3, [r0, #0]
   10656:	movs	r0, #0
   10658:	b.n	10640 <_vasnprintf_r+0x40>
   1065a:	movs	r0, #0
   1065c:	b.n	10640 <_vasnprintf_r+0x40>
   1065e:	nop

00010660 <_calloc_r>:
   10660:	push	{r4, lr}
   10662:	mul.w	r1, r2, r1
   10666:	bl	ebc0 <_malloc_r>
   1066a:	mov	r4, r0
   1066c:	cbz	r0, 106a6 <_calloc_r+0x46>
   1066e:	ldr.w	r2, [r0, #-4]
   10672:	bic.w	r2, r2, #3
   10676:	subs	r2, #4
   10678:	cmp	r2, #36	; 0x24
   1067a:	bhi.n	106ae <_calloc_r+0x4e>
   1067c:	cmp	r2, #19
   1067e:	bls.n	106aa <_calloc_r+0x4a>
   10680:	movs	r3, #0
   10682:	cmp	r2, #27
   10684:	str	r3, [r0, #0]
   10686:	str	r3, [r0, #4]
   10688:	bls.n	106b8 <_calloc_r+0x58>
   1068a:	cmp	r2, #36	; 0x24
   1068c:	str	r3, [r0, #8]
   1068e:	str	r3, [r0, #12]
   10690:	iteee	ne
   10692:	addne.w	r2, r0, #16
   10696:	streq	r3, [r0, #16]
   10698:	streq	r3, [r0, #20]
   1069a:	addeq.w	r2, r0, #24
   1069e:	movs	r3, #0
   106a0:	str	r3, [r2, #0]
   106a2:	str	r3, [r2, #4]
   106a4:	str	r3, [r2, #8]
   106a6:	mov	r0, r4
   106a8:	pop	{r4, pc}
   106aa:	mov	r2, r0
   106ac:	b.n	1069e <_calloc_r+0x3e>
   106ae:	movs	r1, #0
   106b0:	bl	f32c <memset>
   106b4:	mov	r0, r4
   106b6:	pop	{r4, pc}
   106b8:	add.w	r2, r0, #8
   106bc:	b.n	1069e <_calloc_r+0x3e>
   106be:	nop

000106c0 <quorem>:
   106c0:	ldr	r2, [r0, #16]
   106c2:	ldr	r3, [r1, #16]
   106c4:	cmp	r3, r2
   106c6:	bgt.w	107e4 <quorem+0x124>
   106ca:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   106ce:	add.w	r8, r3, #4294967295
   106d2:	add.w	r7, r1, #20
   106d6:	add.w	fp, r0, #20
   106da:	ldr.w	r2, [r7, r8, lsl #2]
   106de:	ldr.w	r3, [fp, r8, lsl #2]
   106e2:	mov.w	r4, r8, lsl #2
   106e6:	sub	sp, #12
   106e8:	adds	r2, #1
   106ea:	udiv	r9, r3, r2
   106ee:	add.w	r3, fp, r4
   106f2:	str	r4, [sp, #0]
   106f4:	add.w	sl, r7, r4
   106f8:	str	r3, [sp, #4]
   106fa:	cmp.w	r9, #0
   106fe:	beq.n	10774 <quorem+0xb4>
   10700:	movs	r5, #0
   10702:	mov	ip, r7
   10704:	mov	lr, fp
   10706:	mov	r3, r5
   10708:	ldr.w	r6, [ip], #4
   1070c:	ldr.w	r2, [lr]
   10710:	uxth	r4, r6
   10712:	mla	r5, r9, r4, r5
   10716:	lsrs	r6, r6, #16
   10718:	lsrs	r4, r5, #16
   1071a:	mla	r4, r9, r6, r4
   1071e:	uxth	r5, r5
   10720:	subs	r3, r3, r5
   10722:	uxth	r6, r4
   10724:	uxtah	r3, r3, r2
   10728:	rsb	r6, r6, r2, lsr #16
   1072c:	add.w	r6, r6, r3, asr #16
   10730:	uxth	r3, r3
   10732:	orr.w	r3, r3, r6, lsl #16
   10736:	cmp	sl, ip
   10738:	str.w	r3, [lr], #4
   1073c:	mov.w	r5, r4, lsr #16
   10740:	mov.w	r3, r6, asr #16
   10744:	bcs.n	10708 <quorem+0x48>
   10746:	ldr	r3, [sp, #0]
   10748:	ldr.w	r3, [fp, r3]
   1074c:	cbnz	r3, 10774 <quorem+0xb4>
   1074e:	ldr	r4, [sp, #4]
   10750:	subs	r3, r4, #4
   10752:	cmp	fp, r3
   10754:	bcs.n	10770 <quorem+0xb0>
   10756:	ldr.w	r3, [r4, #-4]
   1075a:	cbnz	r3, 10770 <quorem+0xb0>
   1075c:	sub.w	r3, r4, #8
   10760:	b.n	10768 <quorem+0xa8>
   10762:	ldr	r2, [r3, #0]
   10764:	subs	r3, #4
   10766:	cbnz	r2, 10770 <quorem+0xb0>
   10768:	cmp	fp, r3
   1076a:	add.w	r8, r8, #4294967295
   1076e:	bcc.n	10762 <quorem+0xa2>
   10770:	str.w	r8, [r0, #16]
   10774:	mov	r4, r0
   10776:	bl	103ec <__mcmp>
   1077a:	cmp	r0, #0
   1077c:	blt.n	107dc <quorem+0x11c>
   1077e:	add.w	r9, r9, #1
   10782:	mov	r5, fp
   10784:	movs	r3, #0
   10786:	ldr.w	r1, [r7], #4
   1078a:	ldr	r0, [r5, #0]
   1078c:	uxth	r2, r1
   1078e:	subs	r2, r3, r2
   10790:	lsrs	r1, r1, #16
   10792:	uxtah	r2, r2, r0
   10796:	rsb	r3, r1, r0, lsr #16
   1079a:	add.w	r3, r3, r2, asr #16
   1079e:	uxth	r1, r2
   107a0:	orr.w	r1, r1, r3, lsl #16
   107a4:	cmp	sl, r7
   107a6:	str.w	r1, [r5], #4
   107aa:	mov.w	r3, r3, asr #16
   107ae:	bcs.n	10786 <quorem+0xc6>
   107b0:	ldr.w	r2, [fp, r8, lsl #2]
   107b4:	add.w	r3, fp, r8, lsl #2
   107b8:	cbnz	r2, 107dc <quorem+0x11c>
   107ba:	subs	r2, r3, #4
   107bc:	cmp	fp, r2
   107be:	bcs.n	107d8 <quorem+0x118>
   107c0:	ldr.w	r2, [r3, #-4]
   107c4:	cbnz	r2, 107d8 <quorem+0x118>
   107c6:	subs	r3, #8
   107c8:	b.n	107d0 <quorem+0x110>
   107ca:	ldr	r2, [r3, #0]
   107cc:	subs	r3, #4
   107ce:	cbnz	r2, 107d8 <quorem+0x118>
   107d0:	cmp	fp, r3
   107d2:	add.w	r8, r8, #4294967295
   107d6:	bcc.n	107ca <quorem+0x10a>
   107d8:	str.w	r8, [r4, #16]
   107dc:	mov	r0, r9
   107de:	add	sp, #12
   107e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   107e4:	movs	r0, #0
   107e6:	bx	lr

000107e8 <_dtoa_r>:
   107e8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   107ec:	vmov	r6, r7, d0
   107f0:	sub	sp, #108	; 0x6c
   107f2:	ldr	r4, [r0, #64]	; 0x40
   107f4:	ldr	r5, [sp, #144]	; 0x90
   107f6:	str	r1, [sp, #0]
   107f8:	mov	r9, r0
   107fa:	str	r2, [sp, #20]
   107fc:	str	r3, [sp, #12]
   107fe:	vmov	sl, s0
   10802:	mov	fp, r7
   10804:	cbz	r4, 1081c <_dtoa_r+0x34>
   10806:	ldr	r2, [r0, #68]	; 0x44
   10808:	str	r2, [r4, #4]
   1080a:	movs	r3, #1
   1080c:	lsls	r3, r2
   1080e:	str	r3, [r4, #8]
   10810:	mov	r1, r4
   10812:	bl	10028 <_Bfree>
   10816:	movs	r3, #0
   10818:	str.w	r3, [r9, #64]	; 0x40
   1081c:	cmp.w	fp, #0
   10820:	mov	r4, fp
   10822:	blt.n	1088e <_dtoa_r+0xa6>
   10824:	movs	r3, #0
   10826:	str	r3, [r5, #0]
   10828:	ldr	r3, [pc, #644]	; (10ab0 <_dtoa_r+0x2c8>)
   1082a:	mov	r2, r3
   1082c:	ands	r3, r4
   1082e:	cmp	r3, r2
   10830:	beq.n	10860 <_dtoa_r+0x78>
   10832:	movs	r2, #0
   10834:	movs	r3, #0
   10836:	mov	r0, sl
   10838:	mov	r1, fp
   1083a:	bl	e71c <__aeabi_dcmpeq>
   1083e:	mov	r6, sl
   10840:	mov	r7, fp
   10842:	mov	r8, r0
   10844:	cbz	r0, 1089a <_dtoa_r+0xb2>
   10846:	ldr	r2, [sp, #12]
   10848:	movs	r3, #1
   1084a:	str	r3, [r2, #0]
   1084c:	ldr	r3, [sp, #148]	; 0x94
   1084e:	cmp	r3, #0
   10850:	beq.w	109d0 <_dtoa_r+0x1e8>
   10854:	ldr	r0, [pc, #604]	; (10ab4 <_dtoa_r+0x2cc>)
   10856:	str	r0, [r3, #0]
   10858:	subs	r0, #1
   1085a:	add	sp, #108	; 0x6c
   1085c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10860:	ldr	r2, [sp, #12]
   10862:	movw	r3, #9999	; 0x270f
   10866:	str	r3, [r2, #0]
   10868:	cmp.w	sl, #0
   1086c:	beq.w	109a4 <_dtoa_r+0x1bc>
   10870:	ldr	r0, [pc, #580]	; (10ab8 <_dtoa_r+0x2d0>)
   10872:	ldr	r3, [sp, #148]	; 0x94
   10874:	cmp	r3, #0
   10876:	beq.n	1085a <_dtoa_r+0x72>
   10878:	ldrb	r3, [r0, #3]
   1087a:	cmp	r3, #0
   1087c:	beq.w	109d4 <_dtoa_r+0x1ec>
   10880:	add.w	r3, r0, #8
   10884:	ldr	r2, [sp, #148]	; 0x94
   10886:	str	r3, [r2, #0]
   10888:	add	sp, #108	; 0x6c
   1088a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1088e:	movs	r3, #1
   10890:	bic.w	r4, fp, #2147483648	; 0x80000000
   10894:	str	r3, [r5, #0]
   10896:	mov	fp, r4
   10898:	b.n	10828 <_dtoa_r+0x40>
   1089a:	add	r2, sp, #96	; 0x60
   1089c:	add	r1, sp, #100	; 0x64
   1089e:	vmov	d0, r6, r7
   108a2:	mov	r0, r9
   108a4:	bl	10544 <__d2b>
   108a8:	lsrs	r5, r4, #20
   108aa:	str	r0, [sp, #40]	; 0x28
   108ac:	bne.w	109b6 <_dtoa_r+0x1ce>
   108b0:	ldr	r5, [sp, #96]	; 0x60
   108b2:	ldr	r6, [sp, #100]	; 0x64
   108b4:	add	r6, r5
   108b6:	addw	r3, r6, #1074	; 0x432
   108ba:	cmp	r3, #32
   108bc:	ble.w	10dd0 <_dtoa_r+0x5e8>
   108c0:	rsb	r3, r3, #64	; 0x40
   108c4:	addw	r0, r6, #1042	; 0x412
   108c8:	lsls	r4, r3
   108ca:	lsr.w	r0, sl, r0
   108ce:	orrs	r0, r4
   108d0:	bl	e160 <__aeabi_ui2d>
   108d4:	movs	r3, #1
   108d6:	subs	r4, r6, #1
   108d8:	sub.w	r1, r1, #32505856	; 0x1f00000
   108dc:	str	r3, [sp, #60]	; 0x3c
   108de:	movs	r2, #0
   108e0:	ldr	r3, [pc, #472]	; (10abc <_dtoa_r+0x2d4>)
   108e2:	bl	dee4 <__aeabi_dsub>
   108e6:	add	r3, pc, #432	; (adr r3, 10a98 <_dtoa_r+0x2b0>)
   108e8:	ldrd	r2, r3, [r3]
   108ec:	bl	e24c <__aeabi_dmul>
   108f0:	add	r3, pc, #428	; (adr r3, 10aa0 <_dtoa_r+0x2b8>)
   108f2:	ldrd	r2, r3, [r3]
   108f6:	bl	dee8 <__adddf3>
   108fa:	mov	r6, r0
   108fc:	mov	r0, r4
   108fe:	mov	r7, r1
   10900:	bl	e180 <__aeabi_i2d>
   10904:	add	r3, pc, #416	; (adr r3, 10aa8 <_dtoa_r+0x2c0>)
   10906:	ldrd	r2, r3, [r3]
   1090a:	bl	e24c <__aeabi_dmul>
   1090e:	mov	r2, r0
   10910:	mov	r3, r1
   10912:	mov	r0, r6
   10914:	mov	r1, r7
   10916:	bl	dee8 <__adddf3>
   1091a:	mov	r6, r0
   1091c:	mov	r7, r1
   1091e:	bl	e7ac <__aeabi_d2iz>
   10922:	movs	r2, #0
   10924:	str	r0, [sp, #16]
   10926:	movs	r3, #0
   10928:	mov	r0, r6
   1092a:	mov	r1, r7
   1092c:	bl	e730 <__aeabi_dcmplt>
   10930:	cmp	r0, #0
   10932:	bne.w	10d86 <_dtoa_r+0x59e>
   10936:	ldr	r6, [sp, #16]
   10938:	cmp	r6, #22
   1093a:	bhi.w	10d80 <_dtoa_r+0x598>
   1093e:	ldr	r3, [pc, #384]	; (10ac0 <_dtoa_r+0x2d8>)
   10940:	add.w	r3, r3, r6, lsl #3
   10944:	ldrd	r0, r1, [r3]
   10948:	mov	r2, sl
   1094a:	mov	r3, fp
   1094c:	bl	e76c <__aeabi_dcmpgt>
   10950:	cmp	r0, #0
   10952:	beq.w	10dda <_dtoa_r+0x5f2>
   10956:	subs	r3, r6, #1
   10958:	str	r3, [sp, #16]
   1095a:	movs	r3, #0
   1095c:	str	r3, [sp, #52]	; 0x34
   1095e:	subs	r5, r5, r4
   10960:	subs.w	r8, r5, #1
   10964:	bmi.w	10dbc <_dtoa_r+0x5d4>
   10968:	movs	r3, #0
   1096a:	str	r3, [sp, #28]
   1096c:	ldr	r3, [sp, #16]
   1096e:	cmp	r3, #0
   10970:	blt.w	10daa <_dtoa_r+0x5c2>
   10974:	add	r8, r3
   10976:	str	r3, [sp, #48]	; 0x30
   10978:	movs	r3, #0
   1097a:	str	r3, [sp, #24]
   1097c:	ldr	r3, [sp, #0]
   1097e:	cmp	r3, #9
   10980:	bhi.n	109d8 <_dtoa_r+0x1f0>
   10982:	cmp	r3, #5
   10984:	ble.w	11610 <_dtoa_r+0xe28>
   10988:	subs	r3, #4
   1098a:	str	r3, [sp, #0]
   1098c:	movs	r6, #0
   1098e:	ldr	r3, [sp, #0]
   10990:	subs	r3, #2
   10992:	cmp	r3, #3
   10994:	bhi.w	115de <_dtoa_r+0xdf6>
   10998:	tbh	[pc, r3, lsl #1]
   1099c:	.word	0x0224032b
   109a0:	.word	0x04500336
   109a4:	ldr	r3, [pc, #272]	; (10ab8 <_dtoa_r+0x2d0>)
   109a6:	ldr	r2, [pc, #284]	; (10ac4 <_dtoa_r+0x2dc>)
   109a8:	ubfx	r0, r4, #0, #20
   109ac:	cmp	r0, #0
   109ae:	ite	ne
   109b0:	movne	r0, r3
   109b2:	moveq	r0, r2
   109b4:	b.n	10872 <_dtoa_r+0x8a>
   109b6:	ubfx	r3, fp, #0, #20
   109ba:	orr.w	r1, r3, #1069547520	; 0x3fc00000
   109be:	subw	r4, r5, #1023	; 0x3ff
   109c2:	mov	r0, sl
   109c4:	str.w	r8, [sp, #60]	; 0x3c
   109c8:	orr.w	r1, r1, #3145728	; 0x300000
   109cc:	ldr	r5, [sp, #96]	; 0x60
   109ce:	b.n	108de <_dtoa_r+0xf6>
   109d0:	ldr	r0, [pc, #244]	; (10ac8 <_dtoa_r+0x2e0>)
   109d2:	b.n	1085a <_dtoa_r+0x72>
   109d4:	adds	r3, r0, #3
   109d6:	b.n	10884 <_dtoa_r+0x9c>
   109d8:	movs	r1, #0
   109da:	str.w	r1, [r9, #68]	; 0x44
   109de:	mov	r0, r9
   109e0:	mov	r4, r1
   109e2:	str	r1, [sp, #0]
   109e4:	bl	ffdc <_Balloc>
   109e8:	mov.w	r3, #4294967295
   109ec:	str	r3, [sp, #32]
   109ee:	str	r3, [sp, #56]	; 0x38
   109f0:	movs	r3, #1
   109f2:	str	r0, [sp, #36]	; 0x24
   109f4:	str.w	r0, [r9, #64]	; 0x40
   109f8:	str	r4, [sp, #20]
   109fa:	str	r3, [sp, #44]	; 0x2c
   109fc:	ldr	r3, [sp, #100]	; 0x64
   109fe:	cmp	r3, #0
   10a00:	blt.w	10ba4 <_dtoa_r+0x3bc>
   10a04:	ldr	r2, [sp, #16]
   10a06:	cmp	r2, #14
   10a08:	bgt.w	10ba4 <_dtoa_r+0x3bc>
   10a0c:	ldr	r3, [pc, #176]	; (10ac0 <_dtoa_r+0x2d8>)
   10a0e:	add.w	r3, r3, r2, lsl #3
   10a12:	vldr	d7, [r3]
   10a16:	ldr	r3, [sp, #20]
   10a18:	cmp	r3, #0
   10a1a:	vstr	d7, [sp]
   10a1e:	blt.w	1101e <_dtoa_r+0x836>
   10a22:	mov	r6, sl
   10a24:	mov	r7, fp
   10a26:	ldrd	sl, fp, [sp]
   10a2a:	mov	r0, r6
   10a2c:	mov	r2, sl
   10a2e:	mov	r3, fp
   10a30:	mov	r1, r7
   10a32:	bl	e4a0 <__aeabi_ddiv>
   10a36:	bl	e7ac <__aeabi_d2iz>
   10a3a:	mov	r4, r0
   10a3c:	bl	e180 <__aeabi_i2d>
   10a40:	mov	r2, sl
   10a42:	mov	r3, fp
   10a44:	bl	e24c <__aeabi_dmul>
   10a48:	mov	r3, r1
   10a4a:	mov	r2, r0
   10a4c:	mov	r1, r7
   10a4e:	mov	r0, r6
   10a50:	bl	dee4 <__aeabi_dsub>
   10a54:	ldr	r5, [sp, #36]	; 0x24
   10a56:	add.w	r3, r4, #48	; 0x30
   10a5a:	strb	r3, [r5, #0]
   10a5c:	ldr	r3, [sp, #32]
   10a5e:	cmp	r3, #1
   10a60:	mov	r6, r0
   10a62:	mov	r7, r1
   10a64:	add.w	r5, r5, #1
   10a68:	beq.n	10b2e <_dtoa_r+0x346>
   10a6a:	movs	r2, #0
   10a6c:	ldr	r3, [pc, #92]	; (10acc <_dtoa_r+0x2e4>)
   10a6e:	bl	e24c <__aeabi_dmul>
   10a72:	movs	r2, #0
   10a74:	movs	r3, #0
   10a76:	mov	r6, r0
   10a78:	mov	r7, r1
   10a7a:	bl	e71c <__aeabi_dcmpeq>
   10a7e:	cmp	r0, #0
   10a80:	bne.n	10b7e <_dtoa_r+0x396>
   10a82:	str.w	r9, [sp, #20]
   10a86:	ldr.w	sl, [sp, #32]
   10a8a:	ldr.w	fp, [sp, #36]	; 0x24
   10a8e:	ldrd	r8, r9, [sp]
   10a92:	b.n	10ae6 <_dtoa_r+0x2fe>
   10a94:	nop.w
   10a98:	.word	0x636f4361
   10a9c:	.word	0x3fd287a7
   10aa0:	.word	0x8b60c8b3
   10aa4:	.word	0x3fc68a28
   10aa8:	.word	0x509f79fb
   10aac:	.word	0x3fd34413
   10ab0:	.word	0x7ff00000
   10ab4:	.word	0x000132f5
   10ab8:	.word	0x00013748
   10abc:	.word	0x3ff80000
   10ac0:	.word	0x00013640
   10ac4:	.word	0x0001373c
   10ac8:	.word	0x000132f4
   10acc:	.word	0x40240000
   10ad0:	bl	e24c <__aeabi_dmul>
   10ad4:	movs	r2, #0
   10ad6:	movs	r3, #0
   10ad8:	mov	r6, r0
   10ada:	mov	r7, r1
   10adc:	bl	e71c <__aeabi_dcmpeq>
   10ae0:	cmp	r0, #0
   10ae2:	bne.w	11242 <_dtoa_r+0xa5a>
   10ae6:	mov	r2, r8
   10ae8:	mov	r3, r9
   10aea:	mov	r0, r6
   10aec:	mov	r1, r7
   10aee:	bl	e4a0 <__aeabi_ddiv>
   10af2:	bl	e7ac <__aeabi_d2iz>
   10af6:	mov	r4, r0
   10af8:	bl	e180 <__aeabi_i2d>
   10afc:	mov	r2, r8
   10afe:	mov	r3, r9
   10b00:	bl	e24c <__aeabi_dmul>
   10b04:	mov	r2, r0
   10b06:	mov	r3, r1
   10b08:	mov	r0, r6
   10b0a:	mov	r1, r7
   10b0c:	bl	dee4 <__aeabi_dsub>
   10b10:	add.w	lr, r4, #48	; 0x30
   10b14:	strb.w	lr, [r5], #1
   10b18:	rsb	lr, fp, r5
   10b1c:	cmp	lr, sl
   10b1e:	mov	r6, r0
   10b20:	mov	r7, r1
   10b22:	mov.w	r2, #0
   10b26:	ldr	r3, [pc, #696]	; (10de0 <_dtoa_r+0x5f8>)
   10b28:	bne.n	10ad0 <_dtoa_r+0x2e8>
   10b2a:	ldr.w	r9, [sp, #20]
   10b2e:	mov	r2, r6
   10b30:	mov	r3, r7
   10b32:	mov	r0, r6
   10b34:	mov	r1, r7
   10b36:	bl	dee8 <__adddf3>
   10b3a:	mov	r6, r0
   10b3c:	mov	r7, r1
   10b3e:	mov	r2, r0
   10b40:	mov	r3, r1
   10b42:	ldrd	r0, r1, [sp]
   10b46:	bl	e730 <__aeabi_dcmplt>
   10b4a:	cbnz	r0, 10b5e <_dtoa_r+0x376>
   10b4c:	mov	r2, r6
   10b4e:	mov	r3, r7
   10b50:	ldrd	r0, r1, [sp]
   10b54:	bl	e71c <__aeabi_dcmpeq>
   10b58:	cbz	r0, 10b7e <_dtoa_r+0x396>
   10b5a:	lsls	r3, r4, #31
   10b5c:	bpl.n	10b7e <_dtoa_r+0x396>
   10b5e:	ldrb.w	r4, [r5, #-1]
   10b62:	ldr	r2, [sp, #36]	; 0x24
   10b64:	subs	r3, r5, #1
   10b66:	b.n	10b72 <_dtoa_r+0x38a>
   10b68:	cmp	r2, r3
   10b6a:	beq.w	11366 <_dtoa_r+0xb7e>
   10b6e:	ldrb.w	r4, [r3, #-1]!
   10b72:	cmp	r4, #57	; 0x39
   10b74:	add.w	r5, r3, #1
   10b78:	beq.n	10b68 <_dtoa_r+0x380>
   10b7a:	adds	r4, #1
   10b7c:	strb	r4, [r3, #0]
   10b7e:	ldr	r1, [sp, #40]	; 0x28
   10b80:	mov	r0, r9
   10b82:	bl	10028 <_Bfree>
   10b86:	movs	r2, #0
   10b88:	ldr	r3, [sp, #16]
   10b8a:	strb	r2, [r5, #0]
   10b8c:	ldr	r2, [sp, #12]
   10b8e:	adds	r3, #1
   10b90:	str	r3, [r2, #0]
   10b92:	ldr	r3, [sp, #148]	; 0x94
   10b94:	cmp	r3, #0
   10b96:	beq.w	112d0 <_dtoa_r+0xae8>
   10b9a:	ldr	r0, [sp, #36]	; 0x24
   10b9c:	str	r5, [r3, #0]
   10b9e:	add	sp, #108	; 0x6c
   10ba0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ba4:	ldr	r2, [sp, #44]	; 0x2c
   10ba6:	cmp	r2, #0
   10ba8:	beq.w	10dc8 <_dtoa_r+0x5e0>
   10bac:	ldr	r2, [sp, #0]
   10bae:	cmp	r2, #1
   10bb0:	ble.w	11062 <_dtoa_r+0x87a>
   10bb4:	ldr	r3, [sp, #32]
   10bb6:	ldr	r2, [sp, #24]
   10bb8:	subs	r7, r3, #1
   10bba:	cmp	r2, r7
   10bbc:	blt.w	112d6 <_dtoa_r+0xaee>
   10bc0:	subs	r7, r2, r7
   10bc2:	ldr	r3, [sp, #32]
   10bc4:	cmp	r3, #0
   10bc6:	blt.w	114ca <_dtoa_r+0xce2>
   10bca:	ldr	r5, [sp, #28]
   10bcc:	ldr	r3, [sp, #32]
   10bce:	ldr	r2, [sp, #28]
   10bd0:	movs	r1, #1
   10bd2:	add	r2, r3
   10bd4:	mov	r0, r9
   10bd6:	str	r2, [sp, #28]
   10bd8:	add	r8, r3
   10bda:	bl	10158 <__i2b>
   10bde:	mov	r6, r0
   10be0:	cbz	r5, 10bfc <_dtoa_r+0x414>
   10be2:	cmp.w	r8, #0
   10be6:	ble.n	10bfc <_dtoa_r+0x414>
   10be8:	cmp	r5, r8
   10bea:	ldr	r2, [sp, #28]
   10bec:	mov	r3, r5
   10bee:	it	ge
   10bf0:	movge	r3, r8
   10bf2:	subs	r2, r2, r3
   10bf4:	str	r2, [sp, #28]
   10bf6:	subs	r5, r5, r3
   10bf8:	rsb	r8, r3, r8
   10bfc:	ldr	r3, [sp, #24]
   10bfe:	cmp	r3, #0
   10c00:	ble.w	111ee <_dtoa_r+0xa06>
   10c04:	ldr	r2, [sp, #44]	; 0x2c
   10c06:	cmp	r2, #0
   10c08:	beq.w	11010 <_dtoa_r+0x828>
   10c0c:	cmp	r7, #0
   10c0e:	beq.w	11010 <_dtoa_r+0x828>
   10c12:	mov	r1, r6
   10c14:	mov	r2, r7
   10c16:	mov	r0, r9
   10c18:	bl	1029c <__pow5mult>
   10c1c:	ldr	r2, [sp, #40]	; 0x28
   10c1e:	mov	r1, r0
   10c20:	mov	r6, r0
   10c22:	mov	r0, r9
   10c24:	bl	1016c <__multiply>
   10c28:	ldr	r1, [sp, #40]	; 0x28
   10c2a:	mov	r4, r0
   10c2c:	mov	r0, r9
   10c2e:	bl	10028 <_Bfree>
   10c32:	ldr	r3, [sp, #24]
   10c34:	subs	r3, r3, r7
   10c36:	str	r3, [sp, #24]
   10c38:	bne.w	1100e <_dtoa_r+0x826>
   10c3c:	movs	r1, #1
   10c3e:	mov	r0, r9
   10c40:	bl	10158 <__i2b>
   10c44:	ldr	r3, [sp, #48]	; 0x30
   10c46:	str	r0, [sp, #24]
   10c48:	cmp	r3, #0
   10c4a:	beq.w	11078 <_dtoa_r+0x890>
   10c4e:	mov	r1, r0
   10c50:	mov	r2, r3
   10c52:	mov	r0, r9
   10c54:	bl	1029c <__pow5mult>
   10c58:	ldr	r3, [sp, #0]
   10c5a:	str	r0, [sp, #24]
   10c5c:	cmp	r3, #1
   10c5e:	ble.w	11248 <_dtoa_r+0xa60>
   10c62:	movs	r7, #0
   10c64:	ldr	r2, [sp, #24]
   10c66:	ldr	r3, [r2, #16]
   10c68:	add.w	r3, r2, r3, lsl #2
   10c6c:	ldr	r0, [r3, #16]
   10c6e:	bl	100bc <__hi0bits>
   10c72:	rsb	r0, r0, #32
   10c76:	add	r0, r8
   10c78:	ands.w	r0, r0, #31
   10c7c:	beq.w	11074 <_dtoa_r+0x88c>
   10c80:	rsb	r3, r0, #32
   10c84:	cmp	r3, #4
   10c86:	ble.w	11604 <_dtoa_r+0xe1c>
   10c8a:	rsb	r0, r0, #28
   10c8e:	ldr	r3, [sp, #28]
   10c90:	add	r3, r0
   10c92:	str	r3, [sp, #28]
   10c94:	add	r5, r0
   10c96:	add	r8, r0
   10c98:	ldr	r3, [sp, #28]
   10c9a:	cmp	r3, #0
   10c9c:	ble.n	10caa <_dtoa_r+0x4c2>
   10c9e:	mov	r1, r4
   10ca0:	mov	r2, r3
   10ca2:	mov	r0, r9
   10ca4:	bl	1033c <__lshift>
   10ca8:	mov	r4, r0
   10caa:	cmp.w	r8, #0
   10cae:	ble.n	10cbc <_dtoa_r+0x4d4>
   10cb0:	mov	r2, r8
   10cb2:	ldr	r1, [sp, #24]
   10cb4:	mov	r0, r9
   10cb6:	bl	1033c <__lshift>
   10cba:	str	r0, [sp, #24]
   10cbc:	ldr	r3, [sp, #52]	; 0x34
   10cbe:	cmp	r3, #0
   10cc0:	bne.w	111b8 <_dtoa_r+0x9d0>
   10cc4:	ldr	r3, [sp, #32]
   10cc6:	cmp	r3, #0
   10cc8:	ble.w	111f2 <_dtoa_r+0xa0a>
   10ccc:	ldr	r3, [sp, #44]	; 0x2c
   10cce:	cmp	r3, #0
   10cd0:	bne.w	110bc <_dtoa_r+0x8d4>
   10cd4:	ldr.w	fp, [sp, #36]	; 0x24
   10cd8:	ldr	r7, [sp, #32]
   10cda:	ldr.w	r8, [sp, #24]
   10cde:	mov	r5, fp
   10ce0:	b.n	10ce8 <_dtoa_r+0x500>
   10ce2:	bl	1003c <__multadd>
   10ce6:	mov	r4, r0
   10ce8:	mov	r1, r8
   10cea:	mov	r0, r4
   10cec:	bl	106c0 <quorem>
   10cf0:	add.w	sl, r0, #48	; 0x30
   10cf4:	strb.w	sl, [r5], #1
   10cf8:	rsb	r3, fp, r5
   10cfc:	cmp	r3, r7
   10cfe:	mov.w	r2, #10
   10d02:	mov.w	r3, #0
   10d06:	mov	r1, r4
   10d08:	mov	r0, r9
   10d0a:	blt.n	10ce2 <_dtoa_r+0x4fa>
   10d0c:	ldr	r3, [sp, #36]	; 0x24
   10d0e:	ldr	r2, [sp, #32]
   10d10:	cmp	r2, #1
   10d12:	ite	ge
   10d14:	addge	r3, r3, r2
   10d16:	addlt	r3, #1
   10d18:	mov	r5, r3
   10d1a:	mov.w	fp, #0
   10d1e:	mov	r1, r4
   10d20:	movs	r2, #1
   10d22:	mov	r0, r9
   10d24:	bl	1033c <__lshift>
   10d28:	ldr	r1, [sp, #24]
   10d2a:	str	r0, [sp, #40]	; 0x28
   10d2c:	bl	103ec <__mcmp>
   10d30:	cmp	r0, #0
   10d32:	ble.w	11340 <_dtoa_r+0xb58>
   10d36:	ldrb.w	r2, [r5, #-1]
   10d3a:	ldr	r1, [sp, #36]	; 0x24
   10d3c:	subs	r3, r5, #1
   10d3e:	b.n	10d4a <_dtoa_r+0x562>
   10d40:	cmp	r3, r1
   10d42:	beq.w	1122e <_dtoa_r+0xa46>
   10d46:	ldrb.w	r2, [r3, #-1]!
   10d4a:	cmp	r2, #57	; 0x39
   10d4c:	add.w	r5, r3, #1
   10d50:	beq.n	10d40 <_dtoa_r+0x558>
   10d52:	adds	r2, #1
   10d54:	strb	r2, [r3, #0]
   10d56:	ldr	r1, [sp, #24]
   10d58:	mov	r0, r9
   10d5a:	bl	10028 <_Bfree>
   10d5e:	cmp	r6, #0
   10d60:	beq.w	10b7e <_dtoa_r+0x396>
   10d64:	cmp.w	fp, #0
   10d68:	beq.n	10d76 <_dtoa_r+0x58e>
   10d6a:	cmp	fp, r6
   10d6c:	beq.n	10d76 <_dtoa_r+0x58e>
   10d6e:	mov	r1, fp
   10d70:	mov	r0, r9
   10d72:	bl	10028 <_Bfree>
   10d76:	mov	r1, r6
   10d78:	mov	r0, r9
   10d7a:	bl	10028 <_Bfree>
   10d7e:	b.n	10b7e <_dtoa_r+0x396>
   10d80:	movs	r3, #1
   10d82:	str	r3, [sp, #52]	; 0x34
   10d84:	b.n	1095e <_dtoa_r+0x176>
   10d86:	ldr.w	r8, [sp, #16]
   10d8a:	mov	r0, r8
   10d8c:	bl	e180 <__aeabi_i2d>
   10d90:	mov	r2, r0
   10d92:	mov	r3, r1
   10d94:	mov	r0, r6
   10d96:	mov	r1, r7
   10d98:	bl	e71c <__aeabi_dcmpeq>
   10d9c:	cmp	r0, #0
   10d9e:	bne.w	10936 <_dtoa_r+0x14e>
   10da2:	add.w	r3, r8, #4294967295
   10da6:	str	r3, [sp, #16]
   10da8:	b.n	10936 <_dtoa_r+0x14e>
   10daa:	ldr	r2, [sp, #28]
   10dac:	ldr	r3, [sp, #16]
   10dae:	subs	r2, r2, r3
   10db0:	negs	r3, r3
   10db2:	str	r3, [sp, #24]
   10db4:	movs	r3, #0
   10db6:	str	r2, [sp, #28]
   10db8:	str	r3, [sp, #48]	; 0x30
   10dba:	b.n	1097c <_dtoa_r+0x194>
   10dbc:	rsb	r3, r8, #0
   10dc0:	str	r3, [sp, #28]
   10dc2:	mov.w	r8, #0
   10dc6:	b.n	1096c <_dtoa_r+0x184>
   10dc8:	ldr	r7, [sp, #24]
   10dca:	ldr	r5, [sp, #28]
   10dcc:	ldr	r6, [sp, #44]	; 0x2c
   10dce:	b.n	10be0 <_dtoa_r+0x3f8>
   10dd0:	rsb	r4, r3, #32
   10dd4:	lsl.w	r0, sl, r4
   10dd8:	b.n	108d0 <_dtoa_r+0xe8>
   10dda:	str	r0, [sp, #52]	; 0x34
   10ddc:	b.n	1095e <_dtoa_r+0x176>
   10dde:	nop
   10de0:	.word	0x40240000
   10de4:	movs	r3, #0
   10de6:	str	r3, [sp, #44]	; 0x2c
   10de8:	ldr	r3, [sp, #16]
   10dea:	ldr	r2, [sp, #20]
   10dec:	add	r3, r2
   10dee:	str	r3, [sp, #56]	; 0x38
   10df0:	adds	r3, #1
   10df2:	cmp	r3, #0
   10df4:	str	r3, [sp, #32]
   10df6:	ble.w	112f4 <_dtoa_r+0xb0c>
   10dfa:	ldr	r4, [sp, #32]
   10dfc:	mov	r5, r4
   10dfe:	movs	r1, #0
   10e00:	cmp	r5, #23
   10e02:	str.w	r1, [r9, #68]	; 0x44
   10e06:	bls.n	10e20 <_dtoa_r+0x638>
   10e08:	movs	r2, #1
   10e0a:	movs	r3, #4
   10e0c:	lsls	r3, r3, #1
   10e0e:	add.w	r0, r3, #20
   10e12:	cmp	r0, r5
   10e14:	mov	r1, r2
   10e16:	add.w	r2, r2, #1
   10e1a:	bls.n	10e0c <_dtoa_r+0x624>
   10e1c:	str.w	r1, [r9, #68]	; 0x44
   10e20:	mov	r0, r9
   10e22:	bl	ffdc <_Balloc>
   10e26:	cmp	r4, #14
   10e28:	str	r0, [sp, #36]	; 0x24
   10e2a:	str.w	r0, [r9, #64]	; 0x40
   10e2e:	bhi.w	109fc <_dtoa_r+0x214>
   10e32:	cmp	r6, #0
   10e34:	beq.w	109fc <_dtoa_r+0x214>
   10e38:	ldr	r1, [sp, #16]
   10e3a:	cmp	r1, #0
   10e3c:	strd	sl, fp, [sp, #64]	; 0x40
   10e40:	ble.w	11378 <_dtoa_r+0xb90>
   10e44:	ldr	r3, [pc, #576]	; (11088 <_dtoa_r+0x8a0>)
   10e46:	and.w	r2, r1, #15
   10e4a:	asrs	r6, r1, #4
   10e4c:	add.w	r3, r3, r2, lsl #3
   10e50:	lsls	r0, r6, #27
   10e52:	ldrd	r4, r5, [r3]
   10e56:	bpl.w	112e6 <_dtoa_r+0xafe>
   10e5a:	ldr	r3, [pc, #560]	; (1108c <_dtoa_r+0x8a4>)
   10e5c:	mov	r0, sl
   10e5e:	mov	r1, fp
   10e60:	ldrd	r2, r3, [r3, #32]
   10e64:	bl	e4a0 <__aeabi_ddiv>
   10e68:	strd	r0, r1, [sp, #72]	; 0x48
   10e6c:	and.w	r6, r6, #15
   10e70:	mov.w	sl, #3
   10e74:	cbz	r6, 10e98 <_dtoa_r+0x6b0>
   10e76:	ldr	r7, [pc, #532]	; (1108c <_dtoa_r+0x8a4>)
   10e78:	lsls	r1, r6, #31
   10e7a:	bpl.n	10e90 <_dtoa_r+0x6a8>
   10e7c:	mov	r0, r4
   10e7e:	mov	r1, r5
   10e80:	ldrd	r2, r3, [r7]
   10e84:	bl	e24c <__aeabi_dmul>
   10e88:	add.w	sl, sl, #1
   10e8c:	mov	r4, r0
   10e8e:	mov	r5, r1
   10e90:	asrs	r6, r6, #1
   10e92:	add.w	r7, r7, #8
   10e96:	bne.n	10e78 <_dtoa_r+0x690>
   10e98:	mov	r2, r4
   10e9a:	mov	r3, r5
   10e9c:	ldrd	r0, r1, [sp, #72]	; 0x48
   10ea0:	bl	e4a0 <__aeabi_ddiv>
   10ea4:	mov	r6, r0
   10ea6:	mov	r7, r1
   10ea8:	ldr	r3, [sp, #52]	; 0x34
   10eaa:	cbz	r3, 10ebe <_dtoa_r+0x6d6>
   10eac:	movs	r2, #0
   10eae:	ldr	r3, [pc, #480]	; (11090 <_dtoa_r+0x8a8>)
   10eb0:	mov	r0, r6
   10eb2:	mov	r1, r7
   10eb4:	bl	e730 <__aeabi_dcmplt>
   10eb8:	cmp	r0, #0
   10eba:	bne.w	114f2 <_dtoa_r+0xd0a>
   10ebe:	mov	r0, sl
   10ec0:	bl	e180 <__aeabi_i2d>
   10ec4:	mov	r2, r6
   10ec6:	mov	r3, r7
   10ec8:	bl	e24c <__aeabi_dmul>
   10ecc:	ldr	r3, [pc, #452]	; (11094 <_dtoa_r+0x8ac>)
   10ece:	movs	r2, #0
   10ed0:	bl	dee8 <__adddf3>
   10ed4:	ldr	r3, [sp, #32]
   10ed6:	mov	r4, r0
   10ed8:	sub.w	r5, r1, #54525952	; 0x3400000
   10edc:	cmp	r3, #0
   10ede:	beq.w	11298 <_dtoa_r+0xab0>
   10ee2:	ldr	r3, [sp, #16]
   10ee4:	str	r3, [sp, #88]	; 0x58
   10ee6:	ldr	r3, [sp, #32]
   10ee8:	str	r3, [sp, #72]	; 0x48
   10eea:	ldr	r3, [sp, #44]	; 0x2c
   10eec:	cmp	r3, #0
   10eee:	beq.w	1141a <_dtoa_r+0xc32>
   10ef2:	ldr	r2, [sp, #72]	; 0x48
   10ef4:	ldr	r3, [pc, #400]	; (11088 <_dtoa_r+0x8a0>)
   10ef6:	ldr	r1, [pc, #416]	; (11098 <_dtoa_r+0x8b0>)
   10ef8:	add.w	r3, r3, r2, lsl #3
   10efc:	ldrd	r2, r3, [r3, #-8]
   10f00:	movs	r0, #0
   10f02:	bl	e4a0 <__aeabi_ddiv>
   10f06:	mov	r2, r4
   10f08:	mov	r3, r5
   10f0a:	bl	dee4 <__aeabi_dsub>
   10f0e:	mov	sl, r0
   10f10:	mov	fp, r1
   10f12:	mov	r0, r6
   10f14:	mov	r1, r7
   10f16:	bl	e7ac <__aeabi_d2iz>
   10f1a:	mov	r4, r0
   10f1c:	bl	e180 <__aeabi_i2d>
   10f20:	mov	r2, r0
   10f22:	mov	r3, r1
   10f24:	mov	r0, r6
   10f26:	mov	r1, r7
   10f28:	bl	dee4 <__aeabi_dsub>
   10f2c:	adds	r4, #48	; 0x30
   10f2e:	ldr	r5, [sp, #36]	; 0x24
   10f30:	uxtb	r4, r4
   10f32:	mov	r6, r0
   10f34:	mov	r7, r1
   10f36:	strb	r4, [r5, #0]
   10f38:	mov	r2, r0
   10f3a:	mov	r3, r1
   10f3c:	mov	r0, sl
   10f3e:	mov	r1, fp
   10f40:	adds	r5, #1
   10f42:	bl	e76c <__aeabi_dcmpgt>
   10f46:	cmp	r0, #0
   10f48:	bne.n	10fec <_dtoa_r+0x804>
   10f4a:	mov	r2, r6
   10f4c:	mov	r3, r7
   10f4e:	movs	r0, #0
   10f50:	ldr	r1, [pc, #316]	; (11090 <_dtoa_r+0x8a8>)
   10f52:	bl	dee4 <__aeabi_dsub>
   10f56:	mov	r2, r0
   10f58:	mov	r3, r1
   10f5a:	mov	r0, sl
   10f5c:	mov	r1, fp
   10f5e:	bl	e76c <__aeabi_dcmpgt>
   10f62:	cmp	r0, #0
   10f64:	bne.w	11578 <_dtoa_r+0xd90>
   10f68:	ldr	r2, [sp, #72]	; 0x48
   10f6a:	cmp	r2, #1
   10f6c:	ble.w	1135e <_dtoa_r+0xb76>
   10f70:	ldr	r3, [sp, #72]	; 0x48
   10f72:	ldr	r2, [sp, #36]	; 0x24
   10f74:	str.w	r8, [sp, #72]	; 0x48
   10f78:	add	r3, r2
   10f7a:	mov	r8, r3
   10f7c:	b.n	10f9a <_dtoa_r+0x7b2>
   10f7e:	movs	r0, #0
   10f80:	ldr	r1, [pc, #268]	; (11090 <_dtoa_r+0x8a8>)
   10f82:	bl	dee4 <__aeabi_dsub>
   10f86:	mov	r2, sl
   10f88:	mov	r3, fp
   10f8a:	bl	e730 <__aeabi_dcmplt>
   10f8e:	cmp	r0, #0
   10f90:	bne.w	11578 <_dtoa_r+0xd90>
   10f94:	cmp	r5, r8
   10f96:	beq.w	1135a <_dtoa_r+0xb72>
   10f9a:	mov	r0, sl
   10f9c:	mov	r1, fp
   10f9e:	movs	r2, #0
   10fa0:	ldr	r3, [pc, #248]	; (1109c <_dtoa_r+0x8b4>)
   10fa2:	bl	e24c <__aeabi_dmul>
   10fa6:	movs	r2, #0
   10fa8:	ldr	r3, [pc, #240]	; (1109c <_dtoa_r+0x8b4>)
   10faa:	mov	sl, r0
   10fac:	mov	fp, r1
   10fae:	mov	r0, r6
   10fb0:	mov	r1, r7
   10fb2:	bl	e24c <__aeabi_dmul>
   10fb6:	mov	r7, r1
   10fb8:	mov	r6, r0
   10fba:	bl	e7ac <__aeabi_d2iz>
   10fbe:	mov	r4, r0
   10fc0:	bl	e180 <__aeabi_i2d>
   10fc4:	mov	r2, r0
   10fc6:	mov	r3, r1
   10fc8:	mov	r0, r6
   10fca:	mov	r1, r7
   10fcc:	bl	dee4 <__aeabi_dsub>
   10fd0:	adds	r4, #48	; 0x30
   10fd2:	uxtb	r4, r4
   10fd4:	mov	r2, sl
   10fd6:	mov	r3, fp
   10fd8:	strb.w	r4, [r5], #1
   10fdc:	mov	r6, r0
   10fde:	mov	r7, r1
   10fe0:	bl	e730 <__aeabi_dcmplt>
   10fe4:	mov	r2, r6
   10fe6:	mov	r3, r7
   10fe8:	cmp	r0, #0
   10fea:	beq.n	10f7e <_dtoa_r+0x796>
   10fec:	ldr	r3, [sp, #88]	; 0x58
   10fee:	str	r3, [sp, #16]
   10ff0:	b.n	10b7e <_dtoa_r+0x396>
   10ff2:	movs	r3, #0
   10ff4:	str	r3, [sp, #44]	; 0x2c
   10ff6:	ldr	r3, [sp, #20]
   10ff8:	cmp	r3, #0
   10ffa:	ble.w	112fe <_dtoa_r+0xb16>
   10ffe:	mov	r5, r3
   11000:	mov	r4, r3
   11002:	str	r3, [sp, #56]	; 0x38
   11004:	str	r3, [sp, #32]
   11006:	b.n	10dfe <_dtoa_r+0x616>
   11008:	movs	r3, #1
   1100a:	str	r3, [sp, #44]	; 0x2c
   1100c:	b.n	10ff6 <_dtoa_r+0x80e>
   1100e:	str	r4, [sp, #40]	; 0x28
   11010:	ldr	r2, [sp, #24]
   11012:	ldr	r1, [sp, #40]	; 0x28
   11014:	mov	r0, r9
   11016:	bl	1029c <__pow5mult>
   1101a:	mov	r4, r0
   1101c:	b.n	10c3c <_dtoa_r+0x454>
   1101e:	ldr	r3, [sp, #32]
   11020:	cmp	r3, #0
   11022:	bgt.w	10a22 <_dtoa_r+0x23a>
   11026:	bne.w	112c8 <_dtoa_r+0xae0>
   1102a:	movs	r2, #0
   1102c:	ldr	r3, [pc, #112]	; (110a0 <_dtoa_r+0x8b8>)
   1102e:	ldrd	r0, r1, [sp]
   11032:	bl	e24c <__aeabi_dmul>
   11036:	mov	r3, fp
   11038:	mov	r2, sl
   1103a:	bl	e758 <__aeabi_dcmpge>
   1103e:	ldr	r3, [sp, #32]
   11040:	str	r3, [sp, #24]
   11042:	mov	r6, r3
   11044:	cmp	r0, #0
   11046:	beq.w	1121e <_dtoa_r+0xa36>
   1104a:	ldr	r3, [sp, #20]
   1104c:	ldr	r5, [sp, #36]	; 0x24
   1104e:	mvns	r3, r3
   11050:	str	r3, [sp, #16]
   11052:	ldr	r1, [sp, #24]
   11054:	mov	r0, r9
   11056:	bl	10028 <_Bfree>
   1105a:	cmp	r6, #0
   1105c:	beq.w	10b7e <_dtoa_r+0x396>
   11060:	b.n	10d76 <_dtoa_r+0x58e>
   11062:	ldr	r2, [sp, #60]	; 0x3c
   11064:	cmp	r2, #0
   11066:	beq.w	114da <_dtoa_r+0xcf2>
   1106a:	addw	r3, r3, #1075	; 0x433
   1106e:	ldr	r7, [sp, #24]
   11070:	ldr	r5, [sp, #28]
   11072:	b.n	10bce <_dtoa_r+0x3e6>
   11074:	movs	r0, #28
   11076:	b.n	10c8e <_dtoa_r+0x4a6>
   11078:	ldr	r3, [sp, #0]
   1107a:	cmp	r3, #1
   1107c:	ble.w	11580 <_dtoa_r+0xd98>
   11080:	ldr	r7, [sp, #48]	; 0x30
   11082:	movs	r0, #1
   11084:	b.n	10c76 <_dtoa_r+0x48e>
   11086:	nop
   11088:	.word	0x00013640
   1108c:	.word	0x00013708
   11090:	.word	0x3ff00000
   11094:	.word	0x401c0000
   11098:	.word	0x3fe00000
   1109c:	.word	0x40240000
   110a0:	.word	0x40140000
   110a4:	mov	r1, r6
   110a6:	movs	r3, #0
   110a8:	movs	r2, #10
   110aa:	mov	r0, r9
   110ac:	bl	1003c <__multadd>
   110b0:	ldr	r3, [sp, #56]	; 0x38
   110b2:	cmp	r3, #0
   110b4:	mov	r6, r0
   110b6:	ble.w	115d4 <_dtoa_r+0xdec>
   110ba:	str	r3, [sp, #32]
   110bc:	cmp	r5, #0
   110be:	ble.n	110cc <_dtoa_r+0x8e4>
   110c0:	mov	r1, r6
   110c2:	mov	r2, r5
   110c4:	mov	r0, r9
   110c6:	bl	1033c <__lshift>
   110ca:	mov	r6, r0
   110cc:	cmp	r7, #0
   110ce:	bne.w	113ca <_dtoa_r+0xbe2>
   110d2:	mov	r8, r6
   110d4:	ldr	r3, [sp, #32]
   110d6:	ldr	r2, [sp, #36]	; 0x24
   110d8:	subs	r3, #1
   110da:	adds	r3, r2, r3
   110dc:	str	r3, [sp, #32]
   110de:	and.w	r3, sl, #1
   110e2:	str	r3, [sp, #40]	; 0x28
   110e4:	mov	r7, r2
   110e6:	ldr.w	fp, [sp, #24]
   110ea:	mov	r0, r4
   110ec:	mov	r1, fp
   110ee:	bl	106c0 <quorem>
   110f2:	mov	r1, r6
   110f4:	mov	r5, r0
   110f6:	mov	r0, r4
   110f8:	bl	103ec <__mcmp>
   110fc:	mov	r2, r8
   110fe:	mov	r1, fp
   11100:	mov	sl, r0
   11102:	mov	r0, r9
   11104:	bl	10430 <__mdiff>
   11108:	ldr	r2, [r0, #12]
   1110a:	mov	fp, r0
   1110c:	add.w	r3, r5, #48	; 0x30
   11110:	cmp	r2, #0
   11112:	bne.n	111a8 <_dtoa_r+0x9c0>
   11114:	mov	r1, r0
   11116:	mov	r0, r4
   11118:	str	r3, [sp, #28]
   1111a:	bl	103ec <__mcmp>
   1111e:	mov	r1, fp
   11120:	str	r0, [sp, #20]
   11122:	mov	r0, r9
   11124:	bl	10028 <_Bfree>
   11128:	ldr	r2, [sp, #20]
   1112a:	ldr	r3, [sp, #28]
   1112c:	cbnz	r2, 1113a <_dtoa_r+0x952>
   1112e:	ldr	r1, [sp, #0]
   11130:	cbnz	r1, 1113a <_dtoa_r+0x952>
   11132:	ldr	r1, [sp, #40]	; 0x28
   11134:	cmp	r1, #0
   11136:	beq.w	115a4 <_dtoa_r+0xdbc>
   1113a:	cmp.w	sl, #0
   1113e:	blt.w	11308 <_dtoa_r+0xb20>
   11142:	bne.n	11150 <_dtoa_r+0x968>
   11144:	ldr	r1, [sp, #0]
   11146:	cbnz	r1, 11150 <_dtoa_r+0x968>
   11148:	ldr	r1, [sp, #40]	; 0x28
   1114a:	cmp	r1, #0
   1114c:	beq.w	11308 <_dtoa_r+0xb20>
   11150:	cmp	r2, #0
   11152:	bgt.w	113f2 <_dtoa_r+0xc0a>
   11156:	ldr	r2, [sp, #32]
   11158:	strb	r3, [r7, #0]
   1115a:	add.w	sl, r7, #1
   1115e:	cmp	r7, r2
   11160:	mov	r5, sl
   11162:	beq.w	1140a <_dtoa_r+0xc22>
   11166:	mov	r1, r4
   11168:	movs	r3, #0
   1116a:	movs	r2, #10
   1116c:	mov	r0, r9
   1116e:	bl	1003c <__multadd>
   11172:	cmp	r6, r8
   11174:	mov	r4, r0
   11176:	mov	r1, r6
   11178:	mov.w	r3, #0
   1117c:	mov.w	r2, #10
   11180:	mov	r0, r9
   11182:	beq.n	1119c <_dtoa_r+0x9b4>
   11184:	bl	1003c <__multadd>
   11188:	mov	r1, r8
   1118a:	mov	r6, r0
   1118c:	movs	r3, #0
   1118e:	movs	r2, #10
   11190:	mov	r0, r9
   11192:	bl	1003c <__multadd>
   11196:	mov	r7, sl
   11198:	mov	r8, r0
   1119a:	b.n	110e6 <_dtoa_r+0x8fe>
   1119c:	bl	1003c <__multadd>
   111a0:	mov	r7, sl
   111a2:	mov	r6, r0
   111a4:	mov	r8, r0
   111a6:	b.n	110e6 <_dtoa_r+0x8fe>
   111a8:	mov	r1, r0
   111aa:	mov	r0, r9
   111ac:	str	r3, [sp, #20]
   111ae:	bl	10028 <_Bfree>
   111b2:	movs	r2, #1
   111b4:	ldr	r3, [sp, #20]
   111b6:	b.n	1113a <_dtoa_r+0x952>
   111b8:	ldr	r1, [sp, #24]
   111ba:	mov	r0, r4
   111bc:	bl	103ec <__mcmp>
   111c0:	cmp	r0, #0
   111c2:	bge.w	10cc4 <_dtoa_r+0x4dc>
   111c6:	mov	r1, r4
   111c8:	ldr	r4, [sp, #16]
   111ca:	movs	r3, #0
   111cc:	subs	r4, #1
   111ce:	movs	r2, #10
   111d0:	mov	r0, r9
   111d2:	str	r4, [sp, #16]
   111d4:	bl	1003c <__multadd>
   111d8:	ldr	r3, [sp, #44]	; 0x2c
   111da:	mov	r4, r0
   111dc:	cmp	r3, #0
   111de:	bne.w	110a4 <_dtoa_r+0x8bc>
   111e2:	ldr	r3, [sp, #56]	; 0x38
   111e4:	cmp	r3, #0
   111e6:	ble.w	115c4 <_dtoa_r+0xddc>
   111ea:	str	r3, [sp, #32]
   111ec:	b.n	10cd4 <_dtoa_r+0x4ec>
   111ee:	ldr	r4, [sp, #40]	; 0x28
   111f0:	b.n	10c3c <_dtoa_r+0x454>
   111f2:	ldr	r3, [sp, #0]
   111f4:	cmp	r3, #2
   111f6:	ble.w	10ccc <_dtoa_r+0x4e4>
   111fa:	ldr	r3, [sp, #32]
   111fc:	cmp	r3, #0
   111fe:	bne.w	1153c <_dtoa_r+0xd54>
   11202:	ldr	r1, [sp, #24]
   11204:	movs	r2, #5
   11206:	mov	r0, r9
   11208:	bl	1003c <__multadd>
   1120c:	mov	r1, r0
   1120e:	str	r0, [sp, #24]
   11210:	mov	r0, r4
   11212:	bl	103ec <__mcmp>
   11216:	cmp	r0, #0
   11218:	str	r4, [sp, #40]	; 0x28
   1121a:	ble.w	1104a <_dtoa_r+0x862>
   1121e:	ldr	r2, [sp, #16]
   11220:	ldr	r1, [sp, #36]	; 0x24
   11222:	movs	r3, #49	; 0x31
   11224:	adds	r2, #1
   11226:	str	r2, [sp, #16]
   11228:	strb	r3, [r1, #0]
   1122a:	adds	r5, r1, #1
   1122c:	b.n	11052 <_dtoa_r+0x86a>
   1122e:	ldr	r2, [sp, #16]
   11230:	adds	r2, #1
   11232:	str	r2, [sp, #16]
   11234:	ldr	r2, [sp, #36]	; 0x24
   11236:	movs	r3, #49	; 0x31
   11238:	strb	r3, [r2, #0]
   1123a:	b.n	10d56 <_dtoa_r+0x56e>
   1123c:	movs	r3, #1
   1123e:	str	r3, [sp, #44]	; 0x2c
   11240:	b.n	10de8 <_dtoa_r+0x600>
   11242:	ldr.w	r9, [sp, #20]
   11246:	b.n	10b7e <_dtoa_r+0x396>
   11248:	cmp.w	sl, #0
   1124c:	bne.w	10c62 <_dtoa_r+0x47a>
   11250:	ubfx	r3, fp, #0, #20
   11254:	cmp	r3, #0
   11256:	bne.w	114d6 <_dtoa_r+0xcee>
   1125a:	bic.w	r7, fp, #2147483648	; 0x80000000
   1125e:	lsrs	r7, r7, #20
   11260:	lsls	r7, r7, #20
   11262:	cbz	r7, 11270 <_dtoa_r+0xa88>
   11264:	ldr	r3, [sp, #28]
   11266:	adds	r3, #1
   11268:	str	r3, [sp, #28]
   1126a:	add.w	r8, r8, #1
   1126e:	movs	r7, #1
   11270:	ldr	r3, [sp, #48]	; 0x30
   11272:	movs	r0, #1
   11274:	cmp	r3, #0
   11276:	beq.w	10c76 <_dtoa_r+0x48e>
   1127a:	b.n	10c64 <_dtoa_r+0x47c>
   1127c:	mov	r0, sl
   1127e:	bl	e180 <__aeabi_i2d>
   11282:	mov	r2, r6
   11284:	mov	r3, r7
   11286:	bl	e24c <__aeabi_dmul>
   1128a:	movs	r2, #0
   1128c:	ldr	r3, [pc, #764]	; (1158c <_dtoa_r+0xda4>)
   1128e:	bl	dee8 <__adddf3>
   11292:	mov	r4, r0
   11294:	sub.w	r5, r1, #54525952	; 0x3400000
   11298:	mov	r0, r6
   1129a:	mov	r1, r7
   1129c:	movs	r2, #0
   1129e:	ldr	r3, [pc, #752]	; (11590 <_dtoa_r+0xda8>)
   112a0:	bl	dee4 <__aeabi_dsub>
   112a4:	mov	r2, r4
   112a6:	mov	r3, r5
   112a8:	mov	r6, r0
   112aa:	mov	r7, r1
   112ac:	bl	e76c <__aeabi_dcmpgt>
   112b0:	cmp	r0, #0
   112b2:	bne.w	11412 <_dtoa_r+0xc2a>
   112b6:	mov	r2, r4
   112b8:	add.w	r3, r5, #2147483648	; 0x80000000
   112bc:	mov	r0, r6
   112be:	mov	r1, r7
   112c0:	bl	e730 <__aeabi_dcmplt>
   112c4:	cmp	r0, #0
   112c6:	beq.n	1135e <_dtoa_r+0xb76>
   112c8:	movs	r3, #0
   112ca:	str	r3, [sp, #24]
   112cc:	mov	r6, r3
   112ce:	b.n	1104a <_dtoa_r+0x862>
   112d0:	ldr	r0, [sp, #36]	; 0x24
   112d2:	b.w	1085a <_dtoa_r+0x72>
   112d6:	ldr	r3, [sp, #24]
   112d8:	ldr	r2, [sp, #48]	; 0x30
   112da:	str	r7, [sp, #24]
   112dc:	subs	r3, r7, r3
   112de:	add	r2, r3
   112e0:	str	r2, [sp, #48]	; 0x30
   112e2:	movs	r7, #0
   112e4:	b.n	10bc2 <_dtoa_r+0x3da>
   112e6:	vldr	d7, [sp, #64]	; 0x40
   112ea:	mov.w	sl, #2
   112ee:	vstr	d7, [sp, #72]	; 0x48
   112f2:	b.n	10e74 <_dtoa_r+0x68c>
   112f4:	mov	r4, r3
   112f6:	movs	r1, #0
   112f8:	str.w	r1, [r9, #68]	; 0x44
   112fc:	b.n	10e20 <_dtoa_r+0x638>
   112fe:	movs	r4, #1
   11300:	str	r4, [sp, #56]	; 0x38
   11302:	str	r4, [sp, #32]
   11304:	str	r4, [sp, #20]
   11306:	b.n	112f6 <_dtoa_r+0xb0e>
   11308:	cmp	r2, #0
   1130a:	mov	sl, r3
   1130c:	ble.n	11332 <_dtoa_r+0xb4a>
   1130e:	mov	r1, r4
   11310:	movs	r2, #1
   11312:	mov	r0, r9
   11314:	bl	1033c <__lshift>
   11318:	ldr	r1, [sp, #24]
   1131a:	mov	r4, r0
   1131c:	bl	103ec <__mcmp>
   11320:	cmp	r0, #0
   11322:	ble.w	115b6 <_dtoa_r+0xdce>
   11326:	cmp.w	sl, #57	; 0x39
   1132a:	beq.w	11540 <_dtoa_r+0xd58>
   1132e:	add.w	sl, r5, #49	; 0x31
   11332:	mov	fp, r6
   11334:	strb.w	sl, [r7]
   11338:	adds	r5, r7, #1
   1133a:	mov	r6, r8
   1133c:	str	r4, [sp, #40]	; 0x28
   1133e:	b.n	10d56 <_dtoa_r+0x56e>
   11340:	bne.n	1134c <_dtoa_r+0xb64>
   11342:	tst.w	sl, #1
   11346:	beq.n	1134c <_dtoa_r+0xb64>
   11348:	b.n	10d36 <_dtoa_r+0x54e>
   1134a:	mov	r5, r2
   1134c:	ldrb.w	r3, [r5, #-1]
   11350:	cmp	r3, #48	; 0x30
   11352:	add.w	r2, r5, #4294967295
   11356:	beq.n	1134a <_dtoa_r+0xb62>
   11358:	b.n	10d56 <_dtoa_r+0x56e>
   1135a:	ldr.w	r8, [sp, #72]	; 0x48
   1135e:	ldrd	sl, fp, [sp, #64]	; 0x40
   11362:	b.w	109fc <_dtoa_r+0x214>
   11366:	ldr	r1, [sp, #36]	; 0x24
   11368:	movs	r2, #48	; 0x30
   1136a:	strb	r2, [r1, #0]
   1136c:	ldr	r2, [sp, #16]
   1136e:	ldrb.w	r4, [r5, #-1]
   11372:	adds	r2, #1
   11374:	str	r2, [sp, #16]
   11376:	b.n	10b7a <_dtoa_r+0x392>
   11378:	ldr	r3, [sp, #16]
   1137a:	negs	r4, r3
   1137c:	cmp	r4, #0
   1137e:	beq.w	114e8 <_dtoa_r+0xd00>
   11382:	ldr	r3, [pc, #528]	; (11594 <_dtoa_r+0xdac>)
   11384:	and.w	r2, r4, #15
   11388:	add.w	r3, r3, r2, lsl #3
   1138c:	ldrd	r2, r3, [r3]
   11390:	ldrd	r0, r1, [sp, #64]	; 0x40
   11394:	bl	e24c <__aeabi_dmul>
   11398:	asrs	r4, r4, #4
   1139a:	mov	r6, r0
   1139c:	mov	r7, r1
   1139e:	beq.w	115ce <_dtoa_r+0xde6>
   113a2:	ldr	r5, [pc, #500]	; (11598 <_dtoa_r+0xdb0>)
   113a4:	mov.w	sl, #2
   113a8:	lsls	r2, r4, #31
   113aa:	bpl.n	113c0 <_dtoa_r+0xbd8>
   113ac:	mov	r0, r6
   113ae:	mov	r1, r7
   113b0:	ldrd	r2, r3, [r5]
   113b4:	bl	e24c <__aeabi_dmul>
   113b8:	add.w	sl, sl, #1
   113bc:	mov	r6, r0
   113be:	mov	r7, r1
   113c0:	asrs	r4, r4, #1
   113c2:	add.w	r5, r5, #8
   113c6:	bne.n	113a8 <_dtoa_r+0xbc0>
   113c8:	b.n	10ea8 <_dtoa_r+0x6c0>
   113ca:	ldr	r1, [r6, #4]
   113cc:	mov	r0, r9
   113ce:	bl	ffdc <_Balloc>
   113d2:	ldr	r3, [r6, #16]
   113d4:	adds	r2, r3, #2
   113d6:	mov	r5, r0
   113d8:	lsls	r2, r2, #2
   113da:	add.w	r1, r6, #12
   113de:	adds	r0, #12
   113e0:	bl	c198 <memcpy>
   113e4:	mov	r1, r5
   113e6:	movs	r2, #1
   113e8:	mov	r0, r9
   113ea:	bl	1033c <__lshift>
   113ee:	mov	r8, r0
   113f0:	b.n	110d4 <_dtoa_r+0x8ec>
   113f2:	cmp	r3, #57	; 0x39
   113f4:	beq.w	11540 <_dtoa_r+0xd58>
   113f8:	add.w	sl, r3, #1
   113fc:	mov	fp, r6
   113fe:	strb.w	sl, [r7]
   11402:	adds	r5, r7, #1
   11404:	mov	r6, r8
   11406:	str	r4, [sp, #40]	; 0x28
   11408:	b.n	10d56 <_dtoa_r+0x56e>
   1140a:	mov	fp, r6
   1140c:	mov	sl, r3
   1140e:	mov	r6, r8
   11410:	b.n	10d1e <_dtoa_r+0x536>
   11412:	movs	r3, #0
   11414:	str	r3, [sp, #24]
   11416:	mov	r6, r3
   11418:	b.n	1121e <_dtoa_r+0xa36>
   1141a:	ldr	r3, [sp, #72]	; 0x48
   1141c:	ldr	r1, [pc, #372]	; (11594 <_dtoa_r+0xdac>)
   1141e:	subs	r2, r3, #1
   11420:	add.w	r1, r1, r2, lsl #3
   11424:	mov	r3, r5
   11426:	str	r2, [sp, #92]	; 0x5c
   11428:	ldrd	r0, r1, [r1]
   1142c:	mov	r2, r4
   1142e:	bl	e24c <__aeabi_dmul>
   11432:	strd	r0, r1, [sp, #80]	; 0x50
   11436:	mov	r1, r7
   11438:	mov	r0, r6
   1143a:	bl	e7ac <__aeabi_d2iz>
   1143e:	mov	r4, r0
   11440:	bl	e180 <__aeabi_i2d>
   11444:	mov	r3, r1
   11446:	mov	r2, r0
   11448:	mov	r1, r7
   1144a:	mov	r0, r6
   1144c:	bl	dee4 <__aeabi_dsub>
   11450:	ldr	r3, [sp, #72]	; 0x48
   11452:	mov	r7, r1
   11454:	ldr	r1, [sp, #36]	; 0x24
   11456:	adds	r4, #48	; 0x30
   11458:	cmp	r3, #1
   1145a:	mov	r6, r0
   1145c:	strb	r4, [r1, #0]
   1145e:	add.w	r5, r1, #1
   11462:	beq.n	114a6 <_dtoa_r+0xcbe>
   11464:	ldr	r3, [sp, #72]	; 0x48
   11466:	ldr	r2, [sp, #36]	; 0x24
   11468:	add	r3, r2
   1146a:	mov	sl, r3
   1146c:	mov	fp, r5
   1146e:	movs	r2, #0
   11470:	ldr	r3, [pc, #296]	; (1159c <_dtoa_r+0xdb4>)
   11472:	mov	r0, r6
   11474:	mov	r1, r7
   11476:	bl	e24c <__aeabi_dmul>
   1147a:	mov	r7, r1
   1147c:	mov	r6, r0
   1147e:	bl	e7ac <__aeabi_d2iz>
   11482:	mov	r4, r0
   11484:	bl	e180 <__aeabi_i2d>
   11488:	adds	r4, #48	; 0x30
   1148a:	mov	r2, r0
   1148c:	mov	r3, r1
   1148e:	mov	r0, r6
   11490:	mov	r1, r7
   11492:	bl	dee4 <__aeabi_dsub>
   11496:	strb.w	r4, [fp], #1
   1149a:	cmp	sl, fp
   1149c:	mov	r6, r0
   1149e:	mov	r7, r1
   114a0:	bne.n	1146e <_dtoa_r+0xc86>
   114a2:	ldr	r3, [sp, #92]	; 0x5c
   114a4:	add	r5, r3
   114a6:	movs	r2, #0
   114a8:	ldr	r3, [pc, #244]	; (115a0 <_dtoa_r+0xdb8>)
   114aa:	ldrd	r0, r1, [sp, #80]	; 0x50
   114ae:	bl	dee8 <__adddf3>
   114b2:	mov	r2, r6
   114b4:	mov	r3, r7
   114b6:	bl	e730 <__aeabi_dcmplt>
   114ba:	cmp	r0, #0
   114bc:	beq.n	11550 <_dtoa_r+0xd68>
   114be:	ldr	r3, [sp, #88]	; 0x58
   114c0:	str	r3, [sp, #16]
   114c2:	ldrb.w	r4, [r5, #-1]
   114c6:	b.w	10b62 <_dtoa_r+0x37a>
   114ca:	ldr	r3, [sp, #28]
   114cc:	ldr	r2, [sp, #32]
   114ce:	subs	r5, r3, r2
   114d0:	movs	r3, #0
   114d2:	b.w	10bce <_dtoa_r+0x3e6>
   114d6:	movs	r7, #0
   114d8:	b.n	11270 <_dtoa_r+0xa88>
   114da:	ldr	r3, [sp, #96]	; 0x60
   114dc:	ldr	r7, [sp, #24]
   114de:	ldr	r5, [sp, #28]
   114e0:	rsb	r3, r3, #54	; 0x36
   114e4:	b.w	10bce <_dtoa_r+0x3e6>
   114e8:	ldrd	r6, r7, [sp, #64]	; 0x40
   114ec:	mov.w	sl, #2
   114f0:	b.n	10ea8 <_dtoa_r+0x6c0>
   114f2:	ldr	r3, [sp, #32]
   114f4:	cmp	r3, #0
   114f6:	beq.w	1127c <_dtoa_r+0xa94>
   114fa:	ldr	r3, [sp, #56]	; 0x38
   114fc:	cmp	r3, #0
   114fe:	ble.w	1135e <_dtoa_r+0xb76>
   11502:	movs	r2, #0
   11504:	ldr	r3, [pc, #148]	; (1159c <_dtoa_r+0xdb4>)
   11506:	mov	r0, r6
   11508:	mov	r1, r7
   1150a:	bl	e24c <__aeabi_dmul>
   1150e:	mov	r6, r0
   11510:	mov	r7, r1
   11512:	add.w	r0, sl, #1
   11516:	bl	e180 <__aeabi_i2d>
   1151a:	mov	r2, r6
   1151c:	mov	r3, r7
   1151e:	bl	e24c <__aeabi_dmul>
   11522:	movs	r2, #0
   11524:	ldr	r3, [pc, #100]	; (1158c <_dtoa_r+0xda4>)
   11526:	bl	dee8 <__adddf3>
   1152a:	ldr	r2, [sp, #16]
   1152c:	ldr	r3, [sp, #56]	; 0x38
   1152e:	str	r3, [sp, #72]	; 0x48
   11530:	subs	r2, #1
   11532:	mov	r4, r0
   11534:	sub.w	r5, r1, #54525952	; 0x3400000
   11538:	str	r2, [sp, #88]	; 0x58
   1153a:	b.n	10eea <_dtoa_r+0x702>
   1153c:	str	r4, [sp, #40]	; 0x28
   1153e:	b.n	1104a <_dtoa_r+0x862>
   11540:	movs	r2, #57	; 0x39
   11542:	mov	fp, r6
   11544:	str	r4, [sp, #40]	; 0x28
   11546:	mov	r6, r8
   11548:	strb	r2, [r7, #0]
   1154a:	adds	r5, r7, #1
   1154c:	b.w	10d3a <_dtoa_r+0x552>
   11550:	ldrd	r2, r3, [sp, #80]	; 0x50
   11554:	movs	r0, #0
   11556:	ldr	r1, [pc, #72]	; (115a0 <_dtoa_r+0xdb8>)
   11558:	bl	dee4 <__aeabi_dsub>
   1155c:	mov	r2, r6
   1155e:	mov	r3, r7
   11560:	bl	e76c <__aeabi_dcmpgt>
   11564:	cbnz	r0, 1156a <_dtoa_r+0xd82>
   11566:	b.n	1135e <_dtoa_r+0xb76>
   11568:	mov	r5, r2
   1156a:	ldrb.w	r3, [r5, #-1]
   1156e:	cmp	r3, #48	; 0x30
   11570:	add.w	r2, r5, #4294967295
   11574:	beq.n	11568 <_dtoa_r+0xd80>
   11576:	b.n	10fec <_dtoa_r+0x804>
   11578:	ldr	r3, [sp, #88]	; 0x58
   1157a:	str	r3, [sp, #16]
   1157c:	b.w	10b62 <_dtoa_r+0x37a>
   11580:	cmp.w	sl, #0
   11584:	bne.w	11080 <_dtoa_r+0x898>
   11588:	b.n	11250 <_dtoa_r+0xa68>
   1158a:	nop
   1158c:	.word	0x401c0000
   11590:	.word	0x40140000
   11594:	.word	0x00013640
   11598:	.word	0x00013708
   1159c:	.word	0x40240000
   115a0:	.word	0x3fe00000
   115a4:	cmp	r3, #57	; 0x39
   115a6:	mov	fp, sl
   115a8:	mov	sl, r3
   115aa:	beq.n	11540 <_dtoa_r+0xd58>
   115ac:	cmp.w	fp, #0
   115b0:	bgt.w	1132e <_dtoa_r+0xb46>
   115b4:	b.n	11332 <_dtoa_r+0xb4a>
   115b6:	bne.w	11332 <_dtoa_r+0xb4a>
   115ba:	tst.w	sl, #1
   115be:	beq.w	11332 <_dtoa_r+0xb4a>
   115c2:	b.n	11326 <_dtoa_r+0xb3e>
   115c4:	ldr	r3, [sp, #0]
   115c6:	cmp	r3, #2
   115c8:	bgt.n	11616 <_dtoa_r+0xe2e>
   115ca:	ldr	r3, [sp, #56]	; 0x38
   115cc:	b.n	111ea <_dtoa_r+0xa02>
   115ce:	mov.w	sl, #2
   115d2:	b.n	10ea8 <_dtoa_r+0x6c0>
   115d4:	ldr	r3, [sp, #0]
   115d6:	cmp	r3, #2
   115d8:	bgt.n	11616 <_dtoa_r+0xe2e>
   115da:	ldr	r3, [sp, #56]	; 0x38
   115dc:	b.n	110ba <_dtoa_r+0x8d2>
   115de:	movs	r4, #0
   115e0:	str.w	r4, [r9, #68]	; 0x44
   115e4:	mov	r1, r4
   115e6:	mov	r0, r9
   115e8:	bl	ffdc <_Balloc>
   115ec:	mov.w	r3, #4294967295
   115f0:	str	r3, [sp, #32]
   115f2:	str	r3, [sp, #56]	; 0x38
   115f4:	movs	r3, #1
   115f6:	str	r0, [sp, #36]	; 0x24
   115f8:	str	r4, [sp, #20]
   115fa:	str.w	r0, [r9, #64]	; 0x40
   115fe:	str	r3, [sp, #44]	; 0x2c
   11600:	b.w	109fc <_dtoa_r+0x214>
   11604:	beq.w	10c98 <_dtoa_r+0x4b0>
   11608:	rsb	r0, r0, #60	; 0x3c
   1160c:	b.w	10c8e <_dtoa_r+0x4a6>
   11610:	movs	r6, #1
   11612:	b.w	1098e <_dtoa_r+0x1a6>
   11616:	ldr	r3, [sp, #56]	; 0x38
   11618:	str	r3, [sp, #32]
   1161a:	b.n	111fa <_dtoa_r+0xa12>
   1161c:			; <UNDEFINED> instruction: 0xffffffff

00011620 <_svfprintf_r>:
   11620:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11624:	sub	sp, #260	; 0x104
   11626:	mov	r4, r1
   11628:	str	r1, [sp, #20]
   1162a:	mov	r5, r2
   1162c:	str	r3, [sp, #40]	; 0x28
   1162e:	str	r0, [sp, #24]
   11630:	bl	ffc0 <_localeconv_r>
   11634:	ldr	r3, [r0, #0]
   11636:	str	r3, [sp, #76]	; 0x4c
   11638:	mov	r0, r3
   1163a:	bl	f940 <strlen>
   1163e:	ldrh	r3, [r4, #12]
   11640:	str	r0, [sp, #72]	; 0x48
   11642:	lsls	r6, r3, #24
   11644:	bpl.n	1164e <_svfprintf_r+0x2e>
   11646:	ldr	r3, [r4, #16]
   11648:	cmp	r3, #0
   1164a:	beq.w	128b0 <_svfprintf_r+0x1290>
   1164e:	vldr	d7, [pc, #664]	; 118e8 <_svfprintf_r+0x2c8>
   11652:	movs	r3, #0
   11654:	vstr	d7, [sp, #64]	; 0x40
   11658:	str	r3, [sp, #56]	; 0x38
   1165a:	str	r3, [sp, #148]	; 0x94
   1165c:	str	r3, [sp, #144]	; 0x90
   1165e:	str	r3, [sp, #84]	; 0x54
   11660:	str	r3, [sp, #28]
   11662:	ldr.w	sl, [pc, #656]	; 118f4 <_svfprintf_r+0x2d4>
   11666:	add	r3, sp, #192	; 0xc0
   11668:	str	r3, [sp, #140]	; 0x8c
   1166a:	mov	r9, r3
   1166c:	mov	r8, r5
   1166e:	ldrb.w	r3, [r8]
   11672:	mov	r4, r8
   11674:	cbz	r3, 116b2 <_svfprintf_r+0x92>
   11676:	cmp	r3, #37	; 0x25
   11678:	bne.n	11680 <_svfprintf_r+0x60>
   1167a:	b.n	116b2 <_svfprintf_r+0x92>
   1167c:	cmp	r3, #37	; 0x25
   1167e:	beq.n	11688 <_svfprintf_r+0x68>
   11680:	ldrb.w	r3, [r4, #1]!
   11684:	cmp	r3, #0
   11686:	bne.n	1167c <_svfprintf_r+0x5c>
   11688:	rsb	r5, r8, r4
   1168c:	cbz	r5, 116b2 <_svfprintf_r+0x92>
   1168e:	ldr	r3, [sp, #144]	; 0x90
   11690:	ldr	r2, [sp, #148]	; 0x94
   11692:	str.w	r8, [r9]
   11696:	adds	r3, #1
   11698:	add	r2, r5
   1169a:	cmp	r3, #7
   1169c:	str.w	r5, [r9, #4]
   116a0:	str	r2, [sp, #148]	; 0x94
   116a2:	str	r3, [sp, #144]	; 0x90
   116a4:	bgt.w	117f4 <_svfprintf_r+0x1d4>
   116a8:	add.w	r9, r9, #8
   116ac:	ldr	r3, [sp, #28]
   116ae:	add	r3, r5
   116b0:	str	r3, [sp, #28]
   116b2:	ldrb	r3, [r4, #0]
   116b4:	cmp	r3, #0
   116b6:	beq.w	11806 <_svfprintf_r+0x1e6>
   116ba:	movs	r3, #0
   116bc:	mov	r2, r3
   116be:	strb.w	r3, [sp, #111]	; 0x6f
   116c2:	mov	r1, r3
   116c4:	str	r3, [sp, #32]
   116c6:	str	r3, [sp, #12]
   116c8:	mov.w	fp, #4294967295
   116cc:	ldrb	r3, [r4, #1]
   116ce:	add.w	r8, r4, #1
   116d2:	mov	r5, fp
   116d4:	add.w	r8, r8, #1
   116d8:	sub.w	r0, r3, #32
   116dc:	cmp	r0, #88	; 0x58
   116de:	bhi.w	11f4a <_svfprintf_r+0x92a>
   116e2:	tbh	[pc, r0, lsl #1]
   116e6:	.short	0x03a0
   116e8:	.word	0x04320432
   116ec:	.word	0x043203a8
   116f0:	.word	0x04320432
   116f4:	.word	0x04320432
   116f8:	.word	0x03af0432
   116fc:	.word	0x043203bd
   11700:	.word	0x00e2005d
   11704:	.word	0x01090432
   11708:	.word	0x01100110
   1170c:	.word	0x01100110
   11710:	.word	0x01100110
   11714:	.word	0x01100110
   11718:	.word	0x04320110
   1171c:	.word	0x04320432
   11720:	.word	0x04320432
   11724:	.word	0x04320432
   11728:	.word	0x04320432
   1172c:	.word	0x01200432
   11730:	.word	0x04320286
   11734:	.word	0x04320286
   11738:	.word	0x04320432
   1173c:	.word	0x02d40432
   11740:	.word	0x04320432
   11744:	.word	0x043202e5
   11748:	.word	0x04320432
   1174c:	.word	0x04320432
   11750:	.word	0x0432030f
   11754:	.word	0x033d0432
   11758:	.word	0x04320432
   1175c:	.word	0x04320432
   11760:	.word	0x04320432
   11764:	.word	0x04320432
   11768:	.word	0x04320432
   1176c:	.word	0x0391037e
   11770:	.word	0x02860286
   11774:	.word	0x03990286
   11778:	.word	0x04320391
   1177c:	.word	0x04070432
   11780:	.word	0x04120432
   11784:	.word	0x006400a3
   11788:	.word	0x043203c2
   1178c:	.word	0x043203c9
   11790:	.word	0x043203ea
   11794:	.word	0x03f20432
   11798:	ldr	r0, [sp, #32]
   1179a:	str	r3, [sp, #40]	; 0x28
   1179c:	negs	r0, r0
   1179e:	str	r0, [sp, #32]
   117a0:	ldr	r3, [sp, #12]
   117a2:	orr.w	r3, r3, #4
   117a6:	str	r3, [sp, #12]
   117a8:	ldrb.w	r3, [r8]
   117ac:	b.n	116d4 <_svfprintf_r+0xb4>
   117ae:	ldr	r0, [sp, #40]	; 0x28
   117b0:	mov	fp, r5
   117b2:	movs	r1, #0
   117b4:	ldr	r4, [r0, #0]
   117b6:	strb.w	r1, [sp, #111]	; 0x6f
   117ba:	adds	r7, r0, #4
   117bc:	ldr	r0, [sp, #12]
   117be:	movs	r3, #48	; 0x30
   117c0:	movs	r2, #120	; 0x78
   117c2:	cmp	fp, r1
   117c4:	strb.w	r3, [sp, #112]	; 0x70
   117c8:	mov.w	r5, #0
   117cc:	strb.w	r2, [sp, #113]	; 0x71
   117d0:	orr.w	r3, r0, #2
   117d4:	blt.w	11f84 <_svfprintf_r+0x964>
   117d8:	bic.w	r3, r0, #128	; 0x80
   117dc:	orr.w	r3, r3, #2
   117e0:	str	r3, [sp, #12]
   117e2:	orrs.w	r3, r4, r5
   117e6:	str	r7, [sp, #40]	; 0x28
   117e8:	beq.w	11f30 <_svfprintf_r+0x910>
   117ec:	mov	r7, r1
   117ee:	str	r2, [sp, #52]	; 0x34
   117f0:	ldr	r0, [pc, #252]	; (118f0 <_svfprintf_r+0x2d0>)
   117f2:	b.n	11dc2 <_svfprintf_r+0x7a2>
   117f4:	add	r2, sp, #140	; 0x8c
   117f6:	ldr	r1, [sp, #20]
   117f8:	ldr	r0, [sp, #24]
   117fa:	bl	12d04 <__ssprint_r>
   117fe:	cbnz	r0, 11814 <_svfprintf_r+0x1f4>
   11800:	add.w	r9, sp, #192	; 0xc0
   11804:	b.n	116ac <_svfprintf_r+0x8c>
   11806:	ldr	r3, [sp, #148]	; 0x94
   11808:	cbz	r3, 11814 <_svfprintf_r+0x1f4>
   1180a:	ldr	r0, [sp, #24]
   1180c:	ldr	r1, [sp, #20]
   1180e:	add	r2, sp, #140	; 0x8c
   11810:	bl	12d04 <__ssprint_r>
   11814:	ldr	r3, [sp, #20]
   11816:	ldrh	r3, [r3, #12]
   11818:	tst.w	r3, #64	; 0x40
   1181c:	ldr	r3, [sp, #28]
   1181e:	it	ne
   11820:	movne.w	r3, #4294967295
   11824:	mov	r0, r3
   11826:	add	sp, #260	; 0x104
   11828:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1182c:	str	r3, [sp, #52]	; 0x34
   1182e:	mov	fp, r5
   11830:	cmp	r2, #0
   11832:	bne.w	12c9c <_svfprintf_r+0x167c>
   11836:	ldr	r2, [sp, #12]
   11838:	ands.w	r3, r2, #32
   1183c:	beq.w	11ccc <_svfprintf_r+0x6ac>
   11840:	ldr	r7, [sp, #40]	; 0x28
   11842:	adds	r7, #7
   11844:	bic.w	r3, r7, #7
   11848:	movs	r7, #0
   1184a:	add.w	r1, r3, #8
   1184e:	cmp	fp, r7
   11850:	str	r1, [sp, #40]	; 0x28
   11852:	ldrd	r4, r5, [r3]
   11856:	strb.w	r7, [sp, #111]	; 0x6f
   1185a:	blt.w	12722 <_svfprintf_r+0x1102>
   1185e:	bic.w	r3, r2, #128	; 0x80
   11862:	str	r3, [sp, #12]
   11864:	orrs.w	r3, r4, r5
   11868:	beq.w	11f74 <_svfprintf_r+0x954>
   1186c:	add	r6, sp, #192	; 0xc0
   1186e:	lsrs	r2, r4, #3
   11870:	orr.w	r2, r2, r5, lsl #29
   11874:	lsrs	r1, r5, #3
   11876:	and.w	r3, r4, #7
   1187a:	mov	r5, r1
   1187c:	mov	r4, r2
   1187e:	adds	r3, #48	; 0x30
   11880:	orrs.w	r2, r4, r5
   11884:	strb.w	r3, [r6, #-1]!
   11888:	bne.n	1186e <_svfprintf_r+0x24e>
   1188a:	ldr	r2, [sp, #12]
   1188c:	lsls	r1, r2, #31
   1188e:	bpl.w	119b0 <_svfprintf_r+0x390>
   11892:	cmp	r3, #48	; 0x30
   11894:	beq.w	119b0 <_svfprintf_r+0x390>
   11898:	movs	r2, #48	; 0x30
   1189a:	subs	r3, r6, #1
   1189c:	strb.w	r2, [r6, #-1]
   118a0:	add	r2, sp, #192	; 0xc0
   118a2:	subs	r2, r2, r3
   118a4:	str	r2, [sp, #36]	; 0x24
   118a6:	mov	r6, r3
   118a8:	b.n	119b6 <_svfprintf_r+0x396>
   118aa:	ldrb.w	r3, [r8]
   118ae:	cmp	r3, #42	; 0x2a
   118b0:	add.w	r4, r8, #1
   118b4:	beq.w	12c80 <_svfprintf_r+0x1660>
   118b8:	sub.w	r0, r3, #48	; 0x30
   118bc:	cmp	r0, #9
   118be:	it	ls
   118c0:	movls	r5, #0
   118c2:	bhi.w	12bd2 <_svfprintf_r+0x15b2>
   118c6:	ldrb.w	r3, [r4], #1
   118ca:	add.w	r5, r5, r5, lsl #2
   118ce:	add.w	r5, r0, r5, lsl #1
   118d2:	sub.w	r0, r3, #48	; 0x30
   118d6:	cmp	r0, #9
   118d8:	bls.n	118c6 <_svfprintf_r+0x2a6>
   118da:	orr.w	r5, r5, r5, asr #31
   118de:	mov	r8, r4
   118e0:	b.n	116d8 <_svfprintf_r+0xb8>
   118e2:	nop
   118e4:	nop.w
	...
   118f0:	.word	0x00013780
   118f4:	.word	0x0001374c
   118f8:	ldr	r3, [sp, #12]
   118fa:	orr.w	r3, r3, #128	; 0x80
   118fe:	str	r3, [sp, #12]
   11900:	ldrb.w	r3, [r8]
   11904:	b.n	116d4 <_svfprintf_r+0xb4>
   11906:	sub.w	r0, r3, #48	; 0x30
   1190a:	movs	r3, #0
   1190c:	mov	r4, r3
   1190e:	ldrb.w	r3, [r8], #1
   11912:	add.w	r4, r4, r4, lsl #2
   11916:	add.w	r4, r0, r4, lsl #1
   1191a:	sub.w	r0, r3, #48	; 0x30
   1191e:	cmp	r0, #9
   11920:	bls.n	1190e <_svfprintf_r+0x2ee>
   11922:	str	r4, [sp, #32]
   11924:	b.n	116d8 <_svfprintf_r+0xb8>
   11926:	str	r3, [sp, #52]	; 0x34
   11928:	mov	fp, r5
   1192a:	cmp	r2, #0
   1192c:	bne.w	12cb8 <_svfprintf_r+0x1698>
   11930:	ldr	r3, [sp, #12]
   11932:	orr.w	r3, r3, #16
   11936:	str	r3, [sp, #12]
   11938:	ldr	r3, [sp, #12]
   1193a:	lsls	r4, r3, #26
   1193c:	bpl.w	123ae <_svfprintf_r+0xd8e>
   11940:	ldr	r7, [sp, #40]	; 0x28
   11942:	adds	r7, #7
   11944:	bic.w	r7, r7, #7
   11948:	ldrd	r2, r3, [r7]
   1194c:	add.w	r1, r7, #8
   11950:	str	r1, [sp, #40]	; 0x28
   11952:	mov	r4, r2
   11954:	mov	r5, r3
   11956:	cmp	r2, #0
   11958:	sbcs.w	r3, r3, #0
   1195c:	blt.w	12424 <_svfprintf_r+0xe04>
   11960:	cmp.w	fp, #0
   11964:	ldrb.w	r7, [sp, #111]	; 0x6f
   11968:	blt.w	123ea <_svfprintf_r+0xdca>
   1196c:	ldr	r3, [sp, #12]
   1196e:	bic.w	r3, r3, #128	; 0x80
   11972:	str	r3, [sp, #12]
   11974:	orrs.w	r3, r4, r5
   11978:	beq.w	11d4c <_svfprintf_r+0x72c>
   1197c:	cmp	r5, #0
   1197e:	it	eq
   11980:	cmpeq	r4, #10
   11982:	bcc.w	11d56 <_svfprintf_r+0x736>
   11986:	add	r6, sp, #192	; 0xc0
   11988:	mov	r0, r4
   1198a:	mov	r1, r5
   1198c:	movs	r2, #10
   1198e:	movs	r3, #0
   11990:	bl	e7fc <__aeabi_uldivmod>
   11994:	adds	r2, #48	; 0x30
   11996:	strb.w	r2, [r6, #-1]!
   1199a:	mov	r0, r4
   1199c:	mov	r1, r5
   1199e:	movs	r3, #0
   119a0:	movs	r2, #10
   119a2:	bl	e7fc <__aeabi_uldivmod>
   119a6:	mov	r4, r0
   119a8:	mov	r5, r1
   119aa:	orrs.w	r3, r4, r5
   119ae:	bne.n	11988 <_svfprintf_r+0x368>
   119b0:	add	r3, sp, #192	; 0xc0
   119b2:	subs	r3, r3, r6
   119b4:	str	r3, [sp, #36]	; 0x24
   119b6:	ldr	r3, [sp, #36]	; 0x24
   119b8:	cmp	r3, fp
   119ba:	it	lt
   119bc:	movlt	r3, fp
   119be:	str	r3, [sp, #16]
   119c0:	movs	r3, #0
   119c2:	str	r3, [sp, #60]	; 0x3c
   119c4:	cbz	r7, 119cc <_svfprintf_r+0x3ac>
   119c6:	ldr	r3, [sp, #16]
   119c8:	adds	r3, #1
   119ca:	str	r3, [sp, #16]
   119cc:	ldr	r3, [sp, #12]
   119ce:	ands.w	r3, r3, #2
   119d2:	str	r3, [sp, #44]	; 0x2c
   119d4:	beq.n	119dc <_svfprintf_r+0x3bc>
   119d6:	ldr	r3, [sp, #16]
   119d8:	adds	r3, #2
   119da:	str	r3, [sp, #16]
   119dc:	ldr	r3, [sp, #12]
   119de:	ands.w	r3, r3, #132	; 0x84
   119e2:	str	r3, [sp, #48]	; 0x30
   119e4:	bne.w	11f9e <_svfprintf_r+0x97e>
   119e8:	ldr	r3, [sp, #32]
   119ea:	ldr	r2, [sp, #16]
   119ec:	subs	r5, r3, r2
   119ee:	cmp	r5, #0
   119f0:	ble.w	11f9e <_svfprintf_r+0x97e>
   119f4:	cmp	r5, #16
   119f6:	ldr	r1, [sp, #148]	; 0x94
   119f8:	ldr	r2, [sp, #144]	; 0x90
   119fa:	ldr	r7, [pc, #672]	; (11c9c <_svfprintf_r+0x67c>)
   119fc:	ble.n	11a4e <_svfprintf_r+0x42e>
   119fe:	str	r6, [sp, #80]	; 0x50
   11a00:	mov	r0, r9
   11a02:	movs	r4, #16
   11a04:	mov	r9, r7
   11a06:	ldr	r6, [sp, #20]
   11a08:	mov	r7, r5
   11a0a:	ldr	r5, [sp, #24]
   11a0c:	b.n	11a18 <_svfprintf_r+0x3f8>
   11a0e:	subs	r7, #16
   11a10:	cmp	r7, #16
   11a12:	add.w	r0, r0, #8
   11a16:	ble.n	11a46 <_svfprintf_r+0x426>
   11a18:	adds	r2, #1
   11a1a:	ldr	r3, [pc, #640]	; (11c9c <_svfprintf_r+0x67c>)
   11a1c:	str	r2, [sp, #144]	; 0x90
   11a1e:	adds	r1, #16
   11a20:	cmp	r2, #7
   11a22:	str	r1, [sp, #148]	; 0x94
   11a24:	stmia.w	r0, {r3, r4}
   11a28:	ble.n	11a0e <_svfprintf_r+0x3ee>
   11a2a:	add	r2, sp, #140	; 0x8c
   11a2c:	mov	r1, r6
   11a2e:	mov	r0, r5
   11a30:	bl	12d04 <__ssprint_r>
   11a34:	cmp	r0, #0
   11a36:	bne.w	11814 <_svfprintf_r+0x1f4>
   11a3a:	subs	r7, #16
   11a3c:	cmp	r7, #16
   11a3e:	ldr	r1, [sp, #148]	; 0x94
   11a40:	ldr	r2, [sp, #144]	; 0x90
   11a42:	add	r0, sp, #192	; 0xc0
   11a44:	bgt.n	11a18 <_svfprintf_r+0x3f8>
   11a46:	ldr	r6, [sp, #80]	; 0x50
   11a48:	mov	r5, r7
   11a4a:	mov	r7, r9
   11a4c:	mov	r9, r0
   11a4e:	adds	r2, #1
   11a50:	adds	r4, r5, r1
   11a52:	cmp	r2, #7
   11a54:	str	r4, [sp, #148]	; 0x94
   11a56:	str	r2, [sp, #144]	; 0x90
   11a58:	str.w	r7, [r9]
   11a5c:	str.w	r5, [r9, #4]
   11a60:	bgt.w	122be <_svfprintf_r+0xc9e>
   11a64:	ldrb.w	r7, [sp, #111]	; 0x6f
   11a68:	add.w	r9, r9, #8
   11a6c:	cbz	r7, 11a8c <_svfprintf_r+0x46c>
   11a6e:	ldr	r3, [sp, #144]	; 0x90
   11a70:	adds	r3, #1
   11a72:	adds	r4, #1
   11a74:	add.w	r1, sp, #111	; 0x6f
   11a78:	movs	r2, #1
   11a7a:	cmp	r3, #7
   11a7c:	str	r4, [sp, #148]	; 0x94
   11a7e:	str	r3, [sp, #144]	; 0x90
   11a80:	stmia.w	r9, {r1, r2}
   11a84:	bgt.w	121d2 <_svfprintf_r+0xbb2>
   11a88:	add.w	r9, r9, #8
   11a8c:	ldr	r3, [sp, #44]	; 0x2c
   11a8e:	cbz	r3, 11aac <_svfprintf_r+0x48c>
   11a90:	ldr	r3, [sp, #144]	; 0x90
   11a92:	adds	r3, #1
   11a94:	adds	r4, #2
   11a96:	add	r1, sp, #112	; 0x70
   11a98:	movs	r2, #2
   11a9a:	cmp	r3, #7
   11a9c:	str	r4, [sp, #148]	; 0x94
   11a9e:	str	r3, [sp, #144]	; 0x90
   11aa0:	stmia.w	r9, {r1, r2}
   11aa4:	bgt.w	121ea <_svfprintf_r+0xbca>
   11aa8:	add.w	r9, r9, #8
   11aac:	ldr	r3, [sp, #48]	; 0x30
   11aae:	cmp	r3, #128	; 0x80
   11ab0:	beq.w	12076 <_svfprintf_r+0xa56>
   11ab4:	ldr	r3, [sp, #36]	; 0x24
   11ab6:	rsb	r7, r3, fp
   11aba:	cmp	r7, #0
   11abc:	ble.n	11b26 <_svfprintf_r+0x506>
   11abe:	ldr	r2, [pc, #480]	; (11ca0 <_svfprintf_r+0x680>)
   11ac0:	ldr	r3, [sp, #144]	; 0x90
   11ac2:	str	r2, [sp, #44]	; 0x2c
   11ac4:	cmp	r7, #16
   11ac6:	ble.n	11b0e <_svfprintf_r+0x4ee>
   11ac8:	mov	r2, r4
   11aca:	mov.w	fp, #16
   11ace:	ldr	r5, [sp, #24]
   11ad0:	ldr	r4, [sp, #20]
   11ad2:	b.n	11ade <_svfprintf_r+0x4be>
   11ad4:	subs	r7, #16
   11ad6:	cmp	r7, #16
   11ad8:	add.w	r9, r9, #8
   11adc:	ble.n	11b0c <_svfprintf_r+0x4ec>
   11ade:	adds	r3, #1
   11ae0:	adds	r2, #16
   11ae2:	cmp	r3, #7
   11ae4:	str	r2, [sp, #148]	; 0x94
   11ae6:	str	r3, [sp, #144]	; 0x90
   11ae8:	stmia.w	r9, {sl, fp}
   11aec:	ble.n	11ad4 <_svfprintf_r+0x4b4>
   11aee:	add	r2, sp, #140	; 0x8c
   11af0:	mov	r1, r4
   11af2:	mov	r0, r5
   11af4:	bl	12d04 <__ssprint_r>
   11af8:	cmp	r0, #0
   11afa:	bne.w	11814 <_svfprintf_r+0x1f4>
   11afe:	subs	r7, #16
   11b00:	cmp	r7, #16
   11b02:	ldr	r2, [sp, #148]	; 0x94
   11b04:	ldr	r3, [sp, #144]	; 0x90
   11b06:	add.w	r9, sp, #192	; 0xc0
   11b0a:	bgt.n	11ade <_svfprintf_r+0x4be>
   11b0c:	mov	r4, r2
   11b0e:	adds	r3, #1
   11b10:	ldr	r2, [sp, #44]	; 0x2c
   11b12:	str	r3, [sp, #144]	; 0x90
   11b14:	add	r4, r7
   11b16:	cmp	r3, #7
   11b18:	str	r4, [sp, #148]	; 0x94
   11b1a:	stmia.w	r9, {r2, r7}
   11b1e:	bgt.w	121ba <_svfprintf_r+0xb9a>
   11b22:	add.w	r9, r9, #8
   11b26:	ldr	r3, [sp, #12]
   11b28:	lsls	r2, r3, #23
   11b2a:	bmi.w	11fa2 <_svfprintf_r+0x982>
   11b2e:	ldr	r3, [sp, #144]	; 0x90
   11b30:	ldr	r1, [sp, #36]	; 0x24
   11b32:	str.w	r6, [r9]
   11b36:	adds	r3, #1
   11b38:	add	r4, r1
   11b3a:	cmp	r3, #7
   11b3c:	str	r4, [sp, #148]	; 0x94
   11b3e:	str.w	r1, [r9, #4]
   11b42:	str	r3, [sp, #144]	; 0x90
   11b44:	bgt.w	1218e <_svfprintf_r+0xb6e>
   11b48:	add.w	r9, r9, #8
   11b4c:	ldr	r3, [sp, #12]
   11b4e:	lsls	r1, r3, #29
   11b50:	bpl.n	11bd2 <_svfprintf_r+0x5b2>
   11b52:	ldr	r3, [sp, #32]
   11b54:	ldr	r2, [sp, #16]
   11b56:	subs	r5, r3, r2
   11b58:	cmp	r5, #0
   11b5a:	ble.n	11bd2 <_svfprintf_r+0x5b2>
   11b5c:	cmp	r5, #16
   11b5e:	ldr	r3, [sp, #144]	; 0x90
   11b60:	ldr	r7, [pc, #312]	; (11c9c <_svfprintf_r+0x67c>)
   11b62:	ble.n	11bac <_svfprintf_r+0x58c>
   11b64:	mov	r2, r4
   11b66:	movs	r6, #16
   11b68:	ldr.w	fp, [sp, #24]
   11b6c:	ldr	r4, [sp, #20]
   11b6e:	b.n	11b7a <_svfprintf_r+0x55a>
   11b70:	subs	r5, #16
   11b72:	cmp	r5, #16
   11b74:	add.w	r9, r9, #8
   11b78:	ble.n	11baa <_svfprintf_r+0x58a>
   11b7a:	adds	r3, #1
   11b7c:	ldr	r1, [pc, #284]	; (11c9c <_svfprintf_r+0x67c>)
   11b7e:	str	r3, [sp, #144]	; 0x90
   11b80:	adds	r2, #16
   11b82:	cmp	r3, #7
   11b84:	str	r2, [sp, #148]	; 0x94
   11b86:	stmia.w	r9, {r1, r6}
   11b8a:	ble.n	11b70 <_svfprintf_r+0x550>
   11b8c:	add	r2, sp, #140	; 0x8c
   11b8e:	mov	r1, r4
   11b90:	mov	r0, fp
   11b92:	bl	12d04 <__ssprint_r>
   11b96:	cmp	r0, #0
   11b98:	bne.w	11814 <_svfprintf_r+0x1f4>
   11b9c:	subs	r5, #16
   11b9e:	cmp	r5, #16
   11ba0:	ldr	r2, [sp, #148]	; 0x94
   11ba2:	ldr	r3, [sp, #144]	; 0x90
   11ba4:	add.w	r9, sp, #192	; 0xc0
   11ba8:	bgt.n	11b7a <_svfprintf_r+0x55a>
   11baa:	mov	r4, r2
   11bac:	adds	r3, #1
   11bae:	add	r4, r5
   11bb0:	cmp	r3, #7
   11bb2:	str	r4, [sp, #148]	; 0x94
   11bb4:	str	r3, [sp, #144]	; 0x90
   11bb6:	str.w	r7, [r9]
   11bba:	str.w	r5, [r9, #4]
   11bbe:	ble.n	11bd2 <_svfprintf_r+0x5b2>
   11bc0:	add	r2, sp, #140	; 0x8c
   11bc2:	ldr	r1, [sp, #20]
   11bc4:	ldr	r0, [sp, #24]
   11bc6:	bl	12d04 <__ssprint_r>
   11bca:	cmp	r0, #0
   11bcc:	bne.w	11814 <_svfprintf_r+0x1f4>
   11bd0:	ldr	r4, [sp, #148]	; 0x94
   11bd2:	ldr	r3, [sp, #28]
   11bd4:	ldr	r2, [sp, #32]
   11bd6:	ldr	r1, [sp, #16]
   11bd8:	cmp	r2, r1
   11bda:	ite	ge
   11bdc:	addge	r3, r3, r2
   11bde:	addlt	r3, r3, r1
   11be0:	str	r3, [sp, #28]
   11be2:	cmp	r4, #0
   11be4:	bne.w	121a6 <_svfprintf_r+0xb86>
   11be8:	movs	r3, #0
   11bea:	str	r3, [sp, #144]	; 0x90
   11bec:	add.w	r9, sp, #192	; 0xc0
   11bf0:	b.n	1166e <_svfprintf_r+0x4e>
   11bf2:	str	r3, [sp, #52]	; 0x34
   11bf4:	mov	fp, r5
   11bf6:	cmp	r2, #0
   11bf8:	bne.w	12cc0 <_svfprintf_r+0x16a0>
   11bfc:	ldr	r3, [sp, #12]
   11bfe:	ldr	r7, [sp, #40]	; 0x28
   11c00:	lsls	r2, r3, #28
   11c02:	add.w	r7, r7, #7
   11c06:	bpl.w	126f2 <_svfprintf_r+0x10d2>
   11c0a:	bic.w	r3, r7, #7
   11c0e:	vldr	d7, [r3]
   11c12:	vstr	d7, [sp, #64]	; 0x40
   11c16:	add.w	r2, r3, #8
   11c1a:	str	r2, [sp, #40]	; 0x28
   11c1c:	ldrd	r1, r2, [sp, #64]	; 0x40
   11c20:	bic.w	r3, r2, #2147483648	; 0x80000000
   11c24:	str	r1, [sp, #88]	; 0x58
   11c26:	str	r3, [sp, #92]	; 0x5c
   11c28:	ldrd	r4, r5, [sp, #88]	; 0x58
   11c2c:	mov.w	r2, #4294967295
   11c30:	mov	r0, r4
   11c32:	mov	r1, r5
   11c34:	ldr	r3, [pc, #108]	; (11ca4 <_svfprintf_r+0x684>)
   11c36:	bl	e780 <__aeabi_dcmpun>
   11c3a:	cmp	r0, #0
   11c3c:	bne.w	125f4 <_svfprintf_r+0xfd4>
   11c40:	mov.w	r2, #4294967295
   11c44:	ldr	r3, [pc, #92]	; (11ca4 <_svfprintf_r+0x684>)
   11c46:	mov	r0, r4
   11c48:	mov	r1, r5
   11c4a:	bl	e744 <__aeabi_dcmple>
   11c4e:	cmp	r0, #0
   11c50:	bne.w	125f4 <_svfprintf_r+0xfd4>
   11c54:	movs	r2, #0
   11c56:	movs	r3, #0
   11c58:	ldrd	r0, r1, [sp, #64]	; 0x40
   11c5c:	bl	e730 <__aeabi_dcmplt>
   11c60:	cmp	r0, #0
   11c62:	bne.w	12b0a <_svfprintf_r+0x14ea>
   11c66:	ldrb.w	r7, [sp, #111]	; 0x6f
   11c6a:	ldr	r6, [pc, #60]	; (11ca8 <_svfprintf_r+0x688>)
   11c6c:	ldr	r3, [pc, #60]	; (11cac <_svfprintf_r+0x68c>)
   11c6e:	ldr	r1, [sp, #12]
   11c70:	bic.w	r1, r1, #128	; 0x80
   11c74:	str	r1, [sp, #12]
   11c76:	ldr	r1, [sp, #52]	; 0x34
   11c78:	movs	r2, #3
   11c7a:	mov.w	fp, #0
   11c7e:	str	r2, [sp, #16]
   11c80:	cmp	r1, #71	; 0x47
   11c82:	it	le
   11c84:	movle	r6, r3
   11c86:	str	r2, [sp, #36]	; 0x24
   11c88:	str.w	fp, [sp, #60]	; 0x3c
   11c8c:	b.n	119c4 <_svfprintf_r+0x3a4>
   11c8e:	ldr	r3, [sp, #12]
   11c90:	orr.w	r3, r3, #8
   11c94:	str	r3, [sp, #12]
   11c96:	ldrb.w	r3, [r8]
   11c9a:	b.n	116d4 <_svfprintf_r+0xb4>
   11c9c:	.word	0x0001379c
   11ca0:	.word	0x0001374c
   11ca4:	.word	0x7fefffff
   11ca8:	.word	0x00013760
   11cac:	.word	0x0001375c
   11cb0:	str	r3, [sp, #52]	; 0x34
   11cb2:	mov	fp, r5
   11cb4:	cmp	r2, #0
   11cb6:	bne.w	12cd8 <_svfprintf_r+0x16b8>
   11cba:	ldr	r3, [sp, #12]
   11cbc:	orr.w	r3, r3, #16
   11cc0:	str	r3, [sp, #12]
   11cc2:	ldr	r2, [sp, #12]
   11cc4:	ands.w	r3, r2, #32
   11cc8:	bne.w	11840 <_svfprintf_r+0x220>
   11ccc:	ldr	r1, [sp, #12]
   11cce:	ands.w	r2, r1, #16
   11cd2:	beq.w	1258c <_svfprintf_r+0xf6c>
   11cd6:	ldr	r0, [sp, #40]	; 0x28
   11cd8:	strb.w	r3, [sp, #111]	; 0x6f
   11cdc:	cmp.w	fp, #0
   11ce0:	ldr	r4, [r0, #0]
   11ce2:	add.w	r7, r0, #4
   11ce6:	mov.w	r5, #0
   11cea:	blt.w	12720 <_svfprintf_r+0x1100>
   11cee:	mov	r2, r1
   11cf0:	bic.w	r2, r2, #128	; 0x80
   11cf4:	str	r2, [sp, #12]
   11cf6:	orrs.w	r2, r4, r5
   11cfa:	str	r7, [sp, #40]	; 0x28
   11cfc:	beq.w	11f74 <_svfprintf_r+0x954>
   11d00:	mov	r7, r3
   11d02:	b.n	1186c <_svfprintf_r+0x24c>
   11d04:	str	r3, [sp, #52]	; 0x34
   11d06:	mov	fp, r5
   11d08:	cmp	r2, #0
   11d0a:	bne.w	12cd0 <_svfprintf_r+0x16b0>
   11d0e:	ldr	r3, [sp, #12]
   11d10:	orr.w	r3, r3, #16
   11d14:	str	r3, [sp, #12]
   11d16:	ldr	r2, [sp, #12]
   11d18:	ands.w	r3, r2, #32
   11d1c:	beq.w	12378 <_svfprintf_r+0xd58>
   11d20:	ldr	r7, [sp, #40]	; 0x28
   11d22:	adds	r7, #7
   11d24:	bic.w	r3, r7, #7
   11d28:	movs	r7, #0
   11d2a:	add.w	r1, r3, #8
   11d2e:	cmp	fp, r7
   11d30:	str	r1, [sp, #40]	; 0x28
   11d32:	ldrd	r4, r5, [r3]
   11d36:	strb.w	r7, [sp, #111]	; 0x6f
   11d3a:	blt.w	123ea <_svfprintf_r+0xdca>
   11d3e:	bic.w	r3, r2, #128	; 0x80
   11d42:	str	r3, [sp, #12]
   11d44:	orrs.w	r3, r4, r5
   11d48:	bne.w	1197c <_svfprintf_r+0x35c>
   11d4c:	cmp.w	fp, #0
   11d50:	beq.w	11f3e <_svfprintf_r+0x91e>
   11d54:	movs	r4, #0
   11d56:	add	r6, sp, #256	; 0x100
   11d58:	adds	r4, #48	; 0x30
   11d5a:	strb.w	r4, [r6, #-65]!
   11d5e:	b.n	119b0 <_svfprintf_r+0x390>
   11d60:	str	r3, [sp, #52]	; 0x34
   11d62:	mov	fp, r5
   11d64:	cmp	r2, #0
   11d66:	bne.w	12cc8 <_svfprintf_r+0x16a8>
   11d6a:	ldr	r3, [sp, #12]
   11d6c:	ldr	r0, [pc, #700]	; (1202c <_svfprintf_r+0xa0c>)
   11d6e:	lsls	r5, r3, #26
   11d70:	bpl.w	11ede <_svfprintf_r+0x8be>
   11d74:	ldr	r7, [sp, #40]	; 0x28
   11d76:	adds	r7, #7
   11d78:	bic.w	r3, r7, #7
   11d7c:	ldrd	r4, r5, [r3]
   11d80:	add.w	r2, r3, #8
   11d84:	str	r2, [sp, #40]	; 0x28
   11d86:	ldr	r2, [sp, #12]
   11d88:	ands.w	r7, r2, #1
   11d8c:	beq.w	12202 <_svfprintf_r+0xbe2>
   11d90:	orrs.w	r3, r4, r5
   11d94:	beq.w	1279c <_svfprintf_r+0x117c>
   11d98:	ldrb.w	r2, [sp, #52]	; 0x34
   11d9c:	strb.w	r2, [sp, #113]	; 0x71
   11da0:	movs	r7, #0
   11da2:	ldr	r2, [sp, #12]
   11da4:	strb.w	r7, [sp, #111]	; 0x6f
   11da8:	movs	r3, #48	; 0x30
   11daa:	cmp	fp, r7
   11dac:	strb.w	r3, [sp, #112]	; 0x70
   11db0:	orr.w	r3, r2, #2
   11db4:	blt.w	12b14 <_svfprintf_r+0x14f4>
   11db8:	bic.w	r3, r2, #128	; 0x80
   11dbc:	orr.w	r3, r3, #2
   11dc0:	str	r3, [sp, #12]
   11dc2:	add	r6, sp, #192	; 0xc0
   11dc4:	lsrs	r3, r4, #4
   11dc6:	and.w	r1, r4, #15
   11dca:	orr.w	r3, r3, r5, lsl #28
   11dce:	lsrs	r2, r5, #4
   11dd0:	mov	r4, r3
   11dd2:	mov	r5, r2
   11dd4:	ldrb	r3, [r0, r1]
   11dd6:	strb.w	r3, [r6, #-1]!
   11dda:	orrs.w	r3, r4, r5
   11dde:	bne.n	11dc4 <_svfprintf_r+0x7a4>
   11de0:	b.n	119b0 <_svfprintf_r+0x390>
   11de2:	ldr	r1, [sp, #40]	; 0x28
   11de4:	str	r3, [sp, #52]	; 0x34
   11de6:	ldr	r2, [r1, #0]
   11de8:	strb.w	r2, [sp, #152]	; 0x98
   11dec:	movs	r3, #0
   11dee:	mov	r2, r1
   11df0:	mov	r7, r3
   11df2:	strb.w	r3, [sp, #111]	; 0x6f
   11df6:	adds	r2, #4
   11df8:	movs	r3, #1
   11dfa:	str	r3, [sp, #16]
   11dfc:	mov	fp, r7
   11dfe:	str	r7, [sp, #60]	; 0x3c
   11e00:	str	r2, [sp, #40]	; 0x28
   11e02:	str	r3, [sp, #36]	; 0x24
   11e04:	add	r6, sp, #152	; 0x98
   11e06:	b.n	119cc <_svfprintf_r+0x3ac>
   11e08:	str	r3, [sp, #52]	; 0x34
   11e0a:	mov	fp, r5
   11e0c:	cmp	r2, #0
   11e0e:	beq.w	11938 <_svfprintf_r+0x318>
   11e12:	strb.w	r1, [sp, #111]	; 0x6f
   11e16:	b.n	11938 <_svfprintf_r+0x318>
   11e18:	ldr	r3, [sp, #12]
   11e1a:	orr.w	r3, r3, #64	; 0x40
   11e1e:	str	r3, [sp, #12]
   11e20:	ldrb.w	r3, [r8]
   11e24:	b.n	116d4 <_svfprintf_r+0xb4>
   11e26:	ldrb.w	r3, [r8]
   11e2a:	cmp	r1, #0
   11e2c:	bne.w	116d4 <_svfprintf_r+0xb4>
   11e30:	movs	r2, #1
   11e32:	movs	r1, #32
   11e34:	b.n	116d4 <_svfprintf_r+0xb4>
   11e36:	ldr	r3, [sp, #12]
   11e38:	orr.w	r3, r3, #1
   11e3c:	str	r3, [sp, #12]
   11e3e:	ldrb.w	r3, [r8]
   11e42:	b.n	116d4 <_svfprintf_r+0xb4>
   11e44:	ldr	r4, [sp, #40]	; 0x28
   11e46:	ldr	r3, [r4, #0]
   11e48:	str	r3, [sp, #32]
   11e4a:	mov	r0, r3
   11e4c:	cmp	r0, #0
   11e4e:	mov	r3, r4
   11e50:	add.w	r3, r3, #4
   11e54:	blt.w	11798 <_svfprintf_r+0x178>
   11e58:	str	r3, [sp, #40]	; 0x28
   11e5a:	ldrb.w	r3, [r8]
   11e5e:	b.n	116d4 <_svfprintf_r+0xb4>
   11e60:	ldrb.w	r3, [r8]
   11e64:	movs	r2, #1
   11e66:	movs	r1, #43	; 0x2b
   11e68:	b.n	116d4 <_svfprintf_r+0xb4>
   11e6a:	ldr	r3, [sp, #12]
   11e6c:	orr.w	r3, r3, #32
   11e70:	str	r3, [sp, #12]
   11e72:	ldrb.w	r3, [r8]
   11e76:	b.n	116d4 <_svfprintf_r+0xb4>
   11e78:	ldr	r2, [sp, #40]	; 0x28
   11e7a:	str	r3, [sp, #52]	; 0x34
   11e7c:	ldr	r6, [r2, #0]
   11e7e:	movs	r4, #0
   11e80:	strb.w	r4, [sp, #111]	; 0x6f
   11e84:	adds	r7, r2, #4
   11e86:	cmp	r6, #0
   11e88:	beq.w	12ac4 <_svfprintf_r+0x14a4>
   11e8c:	cmp	r5, #0
   11e8e:	blt.w	12954 <_svfprintf_r+0x1334>
   11e92:	mov	r2, r5
   11e94:	mov	r1, r4
   11e96:	mov	r0, r6
   11e98:	bl	f160 <memchr>
   11e9c:	cmp	r0, #0
   11e9e:	beq.w	12b68 <_svfprintf_r+0x1548>
   11ea2:	subs	r3, r0, r6
   11ea4:	str	r3, [sp, #36]	; 0x24
   11ea6:	mov	fp, r4
   11ea8:	bic.w	r3, r3, r3, asr #31
   11eac:	str	r7, [sp, #40]	; 0x28
   11eae:	str	r3, [sp, #16]
   11eb0:	str.w	fp, [sp, #60]	; 0x3c
   11eb4:	ldrb.w	r7, [sp, #111]	; 0x6f
   11eb8:	b.n	119c4 <_svfprintf_r+0x3a4>
   11eba:	str	r3, [sp, #52]	; 0x34
   11ebc:	mov	fp, r5
   11ebe:	cmp	r2, #0
   11ec0:	beq.w	11d16 <_svfprintf_r+0x6f6>
   11ec4:	strb.w	r1, [sp, #111]	; 0x6f
   11ec8:	b.n	11d16 <_svfprintf_r+0x6f6>
   11eca:	str	r3, [sp, #52]	; 0x34
   11ecc:	mov	fp, r5
   11ece:	cmp	r2, #0
   11ed0:	bne.w	12cf0 <_svfprintf_r+0x16d0>
   11ed4:	ldr	r3, [sp, #12]
   11ed6:	ldr	r0, [pc, #344]	; (12030 <_svfprintf_r+0xa10>)
   11ed8:	lsls	r5, r3, #26
   11eda:	bmi.w	11d74 <_svfprintf_r+0x754>
   11ede:	ldr	r3, [sp, #12]
   11ee0:	lsls	r4, r3, #27
   11ee2:	bpl.w	12762 <_svfprintf_r+0x1142>
   11ee6:	ldr	r2, [sp, #40]	; 0x28
   11ee8:	mov	r3, r2
   11eea:	adds	r3, #4
   11eec:	ldr	r4, [r2, #0]
   11eee:	str	r3, [sp, #40]	; 0x28
   11ef0:	movs	r5, #0
   11ef2:	b.n	11d86 <_svfprintf_r+0x766>
   11ef4:	ldrb.w	r3, [r8]
   11ef8:	cmp	r3, #108	; 0x6c
   11efa:	beq.w	12882 <_svfprintf_r+0x1262>
   11efe:	ldr	r0, [sp, #12]
   11f00:	orr.w	r0, r0, #16
   11f04:	str	r0, [sp, #12]
   11f06:	b.w	116d4 <_svfprintf_r+0xb4>
   11f0a:	cmp	r2, #0
   11f0c:	bne.w	12ce8 <_svfprintf_r+0x16c8>
   11f10:	ldr	r3, [sp, #12]
   11f12:	lsls	r3, r3, #26
   11f14:	bpl.w	125c6 <_svfprintf_r+0xfa6>
   11f18:	ldr	r2, [sp, #40]	; 0x28
   11f1a:	ldr	r1, [sp, #28]
   11f1c:	ldr	r3, [r2, #0]
   11f1e:	asrs	r5, r1, #31
   11f20:	mov	r0, r1
   11f22:	adds	r2, #4
   11f24:	mov	r1, r5
   11f26:	str	r2, [sp, #40]	; 0x28
   11f28:	strd	r0, r1, [r3]
   11f2c:	b.w	1166e <_svfprintf_r+0x4e>
   11f30:	ldr	r0, [pc, #252]	; (12030 <_svfprintf_r+0xa10>)
   11f32:	str	r2, [sp, #52]	; 0x34
   11f34:	cmp.w	fp, #0
   11f38:	bne.w	12224 <_svfprintf_r+0xc04>
   11f3c:	mov	r7, fp
   11f3e:	mov.w	fp, #0
   11f42:	str.w	fp, [sp, #36]	; 0x24
   11f46:	add	r6, sp, #192	; 0xc0
   11f48:	b.n	119b6 <_svfprintf_r+0x396>
   11f4a:	str	r3, [sp, #52]	; 0x34
   11f4c:	cmp	r2, #0
   11f4e:	bne.w	12ce0 <_svfprintf_r+0x16c0>
   11f52:	ldr	r2, [sp, #52]	; 0x34
   11f54:	cmp	r2, #0
   11f56:	beq.w	11806 <_svfprintf_r+0x1e6>
   11f5a:	movs	r3, #0
   11f5c:	movs	r1, #1
   11f5e:	mov	r7, r3
   11f60:	str	r1, [sp, #16]
   11f62:	strb.w	r2, [sp, #152]	; 0x98
   11f66:	strb.w	r3, [sp, #111]	; 0x6f
   11f6a:	mov	fp, r3
   11f6c:	str	r3, [sp, #60]	; 0x3c
   11f6e:	str	r1, [sp, #36]	; 0x24
   11f70:	add	r6, sp, #152	; 0x98
   11f72:	b.n	119cc <_svfprintf_r+0x3ac>
   11f74:	cmp.w	fp, #0
   11f78:	beq.w	12b98 <_svfprintf_r+0x1578>
   11f7c:	movs	r7, #0
   11f7e:	movs	r4, #0
   11f80:	movs	r5, #0
   11f82:	b.n	1186c <_svfprintf_r+0x24c>
   11f84:	ldr	r0, [pc, #168]	; (12030 <_svfprintf_r+0xa10>)
   11f86:	str	r3, [sp, #12]
   11f88:	str	r2, [sp, #52]	; 0x34
   11f8a:	orrs.w	r3, r4, r5
   11f8e:	str	r7, [sp, #40]	; 0x28
   11f90:	mov.w	r7, #0
   11f94:	bne.w	11dc2 <_svfprintf_r+0x7a2>
   11f98:	movs	r4, #0
   11f9a:	movs	r5, #0
   11f9c:	b.n	11dc2 <_svfprintf_r+0x7a2>
   11f9e:	ldr	r4, [sp, #148]	; 0x94
   11fa0:	b.n	11a6c <_svfprintf_r+0x44c>
   11fa2:	ldr	r3, [sp, #52]	; 0x34
   11fa4:	cmp	r3, #101	; 0x65
   11fa6:	ble.w	120fe <_svfprintf_r+0xade>
   11faa:	movs	r2, #0
   11fac:	movs	r3, #0
   11fae:	ldrd	r0, r1, [sp, #64]	; 0x40
   11fb2:	bl	e71c <__aeabi_dcmpeq>
   11fb6:	cmp	r0, #0
   11fb8:	beq.w	12228 <_svfprintf_r+0xc08>
   11fbc:	ldr	r3, [sp, #144]	; 0x90
   11fbe:	ldr	r2, [pc, #116]	; (12034 <_svfprintf_r+0xa14>)
   11fc0:	str.w	r2, [r9]
   11fc4:	adds	r3, #1
   11fc6:	adds	r4, #1
   11fc8:	movs	r2, #1
   11fca:	cmp	r3, #7
   11fcc:	str	r4, [sp, #148]	; 0x94
   11fce:	str	r3, [sp, #144]	; 0x90
   11fd0:	str.w	r2, [r9, #4]
   11fd4:	bgt.w	127b4 <_svfprintf_r+0x1194>
   11fd8:	add.w	r9, r9, #8
   11fdc:	ldr	r3, [sp, #116]	; 0x74
   11fde:	ldr	r2, [sp, #56]	; 0x38
   11fe0:	cmp	r3, r2
   11fe2:	blt.n	11fec <_svfprintf_r+0x9cc>
   11fe4:	ldr	r3, [sp, #12]
   11fe6:	lsls	r3, r3, #31
   11fe8:	bpl.w	11b4c <_svfprintf_r+0x52c>
   11fec:	ldr	r3, [sp, #144]	; 0x90
   11fee:	ldr	r1, [sp, #72]	; 0x48
   11ff0:	ldr	r2, [sp, #76]	; 0x4c
   11ff2:	str.w	r2, [r9]
   11ff6:	adds	r3, #1
   11ff8:	add	r4, r1
   11ffa:	cmp	r3, #7
   11ffc:	str	r4, [sp, #148]	; 0x94
   11ffe:	str.w	r1, [r9, #4]
   12002:	str	r3, [sp, #144]	; 0x90
   12004:	bgt.w	12896 <_svfprintf_r+0x1276>
   12008:	add.w	r9, r9, #8
   1200c:	ldr	r3, [sp, #56]	; 0x38
   1200e:	subs	r5, r3, #1
   12010:	cmp	r5, #0
   12012:	ble.w	11b4c <_svfprintf_r+0x52c>
   12016:	ldr	r2, [pc, #32]	; (12038 <_svfprintf_r+0xa18>)
   12018:	ldr	r3, [sp, #144]	; 0x90
   1201a:	str	r2, [sp, #44]	; 0x2c
   1201c:	cmp	r5, #16
   1201e:	ble.w	123f4 <_svfprintf_r+0xdd4>
   12022:	movs	r6, #16
   12024:	ldr	r7, [sp, #24]
   12026:	ldr.w	fp, [sp, #20]
   1202a:	b.n	12048 <_svfprintf_r+0xa28>
   1202c:	.word	0x0001376c
   12030:	.word	0x00013780
   12034:	.word	0x000132f4
   12038:	.word	0x0001374c
   1203c:	add.w	r9, r9, #8
   12040:	subs	r5, #16
   12042:	cmp	r5, #16
   12044:	ble.w	123f4 <_svfprintf_r+0xdd4>
   12048:	adds	r3, #1
   1204a:	adds	r4, #16
   1204c:	cmp	r3, #7
   1204e:	str	r4, [sp, #148]	; 0x94
   12050:	str	r3, [sp, #144]	; 0x90
   12052:	str.w	sl, [r9]
   12056:	str.w	r6, [r9, #4]
   1205a:	ble.n	1203c <_svfprintf_r+0xa1c>
   1205c:	add	r2, sp, #140	; 0x8c
   1205e:	mov	r1, fp
   12060:	mov	r0, r7
   12062:	bl	12d04 <__ssprint_r>
   12066:	cmp	r0, #0
   12068:	bne.w	11814 <_svfprintf_r+0x1f4>
   1206c:	ldr	r4, [sp, #148]	; 0x94
   1206e:	ldr	r3, [sp, #144]	; 0x90
   12070:	add.w	r9, sp, #192	; 0xc0
   12074:	b.n	12040 <_svfprintf_r+0xa20>
   12076:	ldr	r3, [sp, #32]
   12078:	ldr	r2, [sp, #16]
   1207a:	subs	r7, r3, r2
   1207c:	cmp	r7, #0
   1207e:	ble.w	11ab4 <_svfprintf_r+0x494>
   12082:	ldr	r2, [pc, #752]	; (12374 <_svfprintf_r+0xd54>)
   12084:	ldr	r3, [sp, #144]	; 0x90
   12086:	str	r2, [sp, #44]	; 0x2c
   12088:	cmp	r7, #16
   1208a:	ble.n	120e4 <_svfprintf_r+0xac4>
   1208c:	mov	r2, r9
   1208e:	mov	r1, r4
   12090:	mov	r9, r7
   12092:	movs	r5, #16
   12094:	mov	r7, r6
   12096:	ldr	r4, [sp, #24]
   12098:	ldr	r6, [sp, #20]
   1209a:	b.n	120aa <_svfprintf_r+0xa8a>
   1209c:	sub.w	r9, r9, #16
   120a0:	cmp.w	r9, #16
   120a4:	add.w	r2, r2, #8
   120a8:	ble.n	120dc <_svfprintf_r+0xabc>
   120aa:	adds	r3, #1
   120ac:	adds	r1, #16
   120ae:	cmp	r3, #7
   120b0:	str	r1, [sp, #148]	; 0x94
   120b2:	str	r3, [sp, #144]	; 0x90
   120b4:	str.w	sl, [r2]
   120b8:	str	r5, [r2, #4]
   120ba:	ble.n	1209c <_svfprintf_r+0xa7c>
   120bc:	add	r2, sp, #140	; 0x8c
   120be:	mov	r1, r6
   120c0:	mov	r0, r4
   120c2:	bl	12d04 <__ssprint_r>
   120c6:	cmp	r0, #0
   120c8:	bne.w	11814 <_svfprintf_r+0x1f4>
   120cc:	sub.w	r9, r9, #16
   120d0:	cmp.w	r9, #16
   120d4:	ldr	r1, [sp, #148]	; 0x94
   120d6:	ldr	r3, [sp, #144]	; 0x90
   120d8:	add	r2, sp, #192	; 0xc0
   120da:	bgt.n	120aa <_svfprintf_r+0xa8a>
   120dc:	mov	r6, r7
   120de:	mov	r4, r1
   120e0:	mov	r7, r9
   120e2:	mov	r9, r2
   120e4:	adds	r3, #1
   120e6:	ldr	r2, [sp, #44]	; 0x2c
   120e8:	str	r3, [sp, #144]	; 0x90
   120ea:	add	r4, r7
   120ec:	cmp	r3, #7
   120ee:	str	r4, [sp, #148]	; 0x94
   120f0:	stmia.w	r9, {r2, r7}
   120f4:	bgt.w	12572 <_svfprintf_r+0xf52>
   120f8:	add.w	r9, r9, #8
   120fc:	b.n	11ab4 <_svfprintf_r+0x494>
   120fe:	ldr	r3, [sp, #56]	; 0x38
   12100:	ldr	r5, [sp, #144]	; 0x90
   12102:	cmp	r3, #1
   12104:	ble.w	1251c <_svfprintf_r+0xefc>
   12108:	adds	r5, #1
   1210a:	adds	r4, #1
   1210c:	movs	r3, #1
   1210e:	cmp	r5, #7
   12110:	str	r4, [sp, #148]	; 0x94
   12112:	str	r5, [sp, #144]	; 0x90
   12114:	str.w	r6, [r9]
   12118:	str.w	r3, [r9, #4]
   1211c:	bgt.w	1253e <_svfprintf_r+0xf1e>
   12120:	add.w	r9, r9, #8
   12124:	ldr	r2, [sp, #72]	; 0x48
   12126:	ldr	r3, [sp, #76]	; 0x4c
   12128:	str.w	r3, [r9]
   1212c:	adds	r5, #1
   1212e:	add	r4, r2
   12130:	cmp	r5, #7
   12132:	str	r4, [sp, #148]	; 0x94
   12134:	str	r5, [sp, #144]	; 0x90
   12136:	str.w	r2, [r9, #4]
   1213a:	bgt.w	12558 <_svfprintf_r+0xf38>
   1213e:	add.w	r9, r9, #8
   12142:	movs	r3, #0
   12144:	movs	r2, #0
   12146:	ldrd	r0, r1, [sp, #64]	; 0x40
   1214a:	bl	e71c <__aeabi_dcmpeq>
   1214e:	ldr	r3, [sp, #56]	; 0x38
   12150:	cmp	r0, #0
   12152:	bne.w	122dc <_svfprintf_r+0xcbc>
   12156:	subs	r3, #1
   12158:	adds	r5, #1
   1215a:	adds	r6, #1
   1215c:	add	r4, r3
   1215e:	cmp	r5, #7
   12160:	str	r5, [sp, #144]	; 0x90
   12162:	str	r4, [sp, #148]	; 0x94
   12164:	str.w	r6, [r9]
   12168:	str.w	r3, [r9, #4]
   1216c:	bgt.w	1235a <_svfprintf_r+0xd3a>
   12170:	add.w	r9, r9, #8
   12174:	ldr	r2, [sp, #84]	; 0x54
   12176:	str.w	r2, [r9, #4]
   1217a:	adds	r5, #1
   1217c:	add	r4, r2
   1217e:	add	r3, sp, #124	; 0x7c
   12180:	cmp	r5, #7
   12182:	str	r4, [sp, #148]	; 0x94
   12184:	str	r5, [sp, #144]	; 0x90
   12186:	str.w	r3, [r9]
   1218a:	ble.w	11b48 <_svfprintf_r+0x528>
   1218e:	add	r2, sp, #140	; 0x8c
   12190:	ldr	r1, [sp, #20]
   12192:	ldr	r0, [sp, #24]
   12194:	bl	12d04 <__ssprint_r>
   12198:	cmp	r0, #0
   1219a:	bne.w	11814 <_svfprintf_r+0x1f4>
   1219e:	ldr	r4, [sp, #148]	; 0x94
   121a0:	add.w	r9, sp, #192	; 0xc0
   121a4:	b.n	11b4c <_svfprintf_r+0x52c>
   121a6:	add	r2, sp, #140	; 0x8c
   121a8:	ldr	r1, [sp, #20]
   121aa:	ldr	r0, [sp, #24]
   121ac:	bl	12d04 <__ssprint_r>
   121b0:	cmp	r0, #0
   121b2:	beq.w	11be8 <_svfprintf_r+0x5c8>
   121b6:	b.w	11814 <_svfprintf_r+0x1f4>
   121ba:	add	r2, sp, #140	; 0x8c
   121bc:	ldr	r1, [sp, #20]
   121be:	ldr	r0, [sp, #24]
   121c0:	bl	12d04 <__ssprint_r>
   121c4:	cmp	r0, #0
   121c6:	bne.w	11814 <_svfprintf_r+0x1f4>
   121ca:	ldr	r4, [sp, #148]	; 0x94
   121cc:	add.w	r9, sp, #192	; 0xc0
   121d0:	b.n	11b26 <_svfprintf_r+0x506>
   121d2:	add	r2, sp, #140	; 0x8c
   121d4:	ldr	r1, [sp, #20]
   121d6:	ldr	r0, [sp, #24]
   121d8:	bl	12d04 <__ssprint_r>
   121dc:	cmp	r0, #0
   121de:	bne.w	11814 <_svfprintf_r+0x1f4>
   121e2:	ldr	r4, [sp, #148]	; 0x94
   121e4:	add.w	r9, sp, #192	; 0xc0
   121e8:	b.n	11a8c <_svfprintf_r+0x46c>
   121ea:	add	r2, sp, #140	; 0x8c
   121ec:	ldr	r1, [sp, #20]
   121ee:	ldr	r0, [sp, #24]
   121f0:	bl	12d04 <__ssprint_r>
   121f4:	cmp	r0, #0
   121f6:	bne.w	11814 <_svfprintf_r+0x1f4>
   121fa:	ldr	r4, [sp, #148]	; 0x94
   121fc:	add.w	r9, sp, #192	; 0xc0
   12200:	b.n	11aac <_svfprintf_r+0x48c>
   12202:	cmp.w	fp, #0
   12206:	strb.w	r7, [sp, #111]	; 0x6f
   1220a:	blt.w	127cc <_svfprintf_r+0x11ac>
   1220e:	bic.w	r3, r2, #128	; 0x80
   12212:	str	r3, [sp, #12]
   12214:	orrs.w	r3, r4, r5
   12218:	bne.w	11dc2 <_svfprintf_r+0x7a2>
   1221c:	cmp.w	fp, #0
   12220:	beq.w	11f3c <_svfprintf_r+0x91c>
   12224:	movs	r7, #0
   12226:	b.n	11f98 <_svfprintf_r+0x978>
   12228:	ldr	r5, [sp, #116]	; 0x74
   1222a:	cmp	r5, #0
   1222c:	ble.w	127d2 <_svfprintf_r+0x11b2>
   12230:	ldr	r3, [sp, #60]	; 0x3c
   12232:	ldr	r2, [sp, #56]	; 0x38
   12234:	cmp	r3, r2
   12236:	it	ge
   12238:	movge	r3, r2
   1223a:	cmp	r3, #0
   1223c:	mov	r5, r3
   1223e:	ble.n	1225c <_svfprintf_r+0xc3c>
   12240:	ldr	r3, [sp, #144]	; 0x90
   12242:	str.w	r6, [r9]
   12246:	adds	r3, #1
   12248:	add	r4, r5
   1224a:	cmp	r3, #7
   1224c:	str	r4, [sp, #148]	; 0x94
   1224e:	str.w	r5, [r9, #4]
   12252:	str	r3, [sp, #144]	; 0x90
   12254:	bgt.w	129aa <_svfprintf_r+0x138a>
   12258:	add.w	r9, r9, #8
   1225c:	ldr	r3, [sp, #60]	; 0x3c
   1225e:	cmp	r5, #0
   12260:	it	ge
   12262:	subge	r3, r3, r5
   12264:	cmp	r3, #0
   12266:	mov	r5, r3
   12268:	ble.w	1245c <_svfprintf_r+0xe3c>
   1226c:	ldr	r2, [pc, #260]	; (12374 <_svfprintf_r+0xd54>)
   1226e:	ldr	r3, [sp, #144]	; 0x90
   12270:	str	r2, [sp, #44]	; 0x2c
   12272:	cmp	r5, #16
   12274:	ble.w	1277e <_svfprintf_r+0x115e>
   12278:	mov	r2, r4
   1227a:	movs	r7, #16
   1227c:	ldr.w	fp, [sp, #24]
   12280:	ldr	r4, [sp, #20]
   12282:	b.n	12290 <_svfprintf_r+0xc70>
   12284:	add.w	r9, r9, #8
   12288:	subs	r5, #16
   1228a:	cmp	r5, #16
   1228c:	ble.w	1277c <_svfprintf_r+0x115c>
   12290:	adds	r3, #1
   12292:	adds	r2, #16
   12294:	cmp	r3, #7
   12296:	str	r2, [sp, #148]	; 0x94
   12298:	str	r3, [sp, #144]	; 0x90
   1229a:	str.w	sl, [r9]
   1229e:	str.w	r7, [r9, #4]
   122a2:	ble.n	12284 <_svfprintf_r+0xc64>
   122a4:	add	r2, sp, #140	; 0x8c
   122a6:	mov	r1, r4
   122a8:	mov	r0, fp
   122aa:	bl	12d04 <__ssprint_r>
   122ae:	cmp	r0, #0
   122b0:	bne.w	11814 <_svfprintf_r+0x1f4>
   122b4:	ldr	r2, [sp, #148]	; 0x94
   122b6:	ldr	r3, [sp, #144]	; 0x90
   122b8:	add.w	r9, sp, #192	; 0xc0
   122bc:	b.n	12288 <_svfprintf_r+0xc68>
   122be:	add	r2, sp, #140	; 0x8c
   122c0:	ldr	r1, [sp, #20]
   122c2:	ldr	r0, [sp, #24]
   122c4:	bl	12d04 <__ssprint_r>
   122c8:	cmp	r0, #0
   122ca:	bne.w	11814 <_svfprintf_r+0x1f4>
   122ce:	ldrb.w	r7, [sp, #111]	; 0x6f
   122d2:	ldr	r4, [sp, #148]	; 0x94
   122d4:	add.w	r9, sp, #192	; 0xc0
   122d8:	b.w	11a6c <_svfprintf_r+0x44c>
   122dc:	subs	r6, r3, #1
   122de:	cmp	r6, #0
   122e0:	ble.w	12174 <_svfprintf_r+0xb54>
   122e4:	ldr	r3, [pc, #140]	; (12374 <_svfprintf_r+0xd54>)
   122e6:	str	r3, [sp, #44]	; 0x2c
   122e8:	cmp	r6, #16
   122ea:	ble.n	12346 <_svfprintf_r+0xd26>
   122ec:	str.w	r8, [sp, #36]	; 0x24
   122f0:	movs	r7, #16
   122f2:	mov	r8, r6
   122f4:	ldr.w	fp, [sp, #24]
   122f8:	ldr	r6, [sp, #20]
   122fa:	b.n	1230a <_svfprintf_r+0xcea>
   122fc:	sub.w	r8, r8, #16
   12300:	cmp.w	r8, #16
   12304:	add.w	r9, r9, #8
   12308:	ble.n	12340 <_svfprintf_r+0xd20>
   1230a:	adds	r5, #1
   1230c:	adds	r4, #16
   1230e:	cmp	r5, #7
   12310:	str	r4, [sp, #148]	; 0x94
   12312:	str	r5, [sp, #144]	; 0x90
   12314:	str.w	sl, [r9]
   12318:	str.w	r7, [r9, #4]
   1231c:	ble.n	122fc <_svfprintf_r+0xcdc>
   1231e:	add	r2, sp, #140	; 0x8c
   12320:	mov	r1, r6
   12322:	mov	r0, fp
   12324:	bl	12d04 <__ssprint_r>
   12328:	cmp	r0, #0
   1232a:	bne.w	11814 <_svfprintf_r+0x1f4>
   1232e:	sub.w	r8, r8, #16
   12332:	cmp.w	r8, #16
   12336:	ldr	r4, [sp, #148]	; 0x94
   12338:	ldr	r5, [sp, #144]	; 0x90
   1233a:	add.w	r9, sp, #192	; 0xc0
   1233e:	bgt.n	1230a <_svfprintf_r+0xcea>
   12340:	mov	r6, r8
   12342:	ldr.w	r8, [sp, #36]	; 0x24
   12346:	ldr	r3, [sp, #44]	; 0x2c
   12348:	adds	r5, #1
   1234a:	add	r4, r6
   1234c:	cmp	r5, #7
   1234e:	str	r4, [sp, #148]	; 0x94
   12350:	str	r5, [sp, #144]	; 0x90
   12352:	stmia.w	r9, {r3, r6}
   12356:	ble.w	12170 <_svfprintf_r+0xb50>
   1235a:	add	r2, sp, #140	; 0x8c
   1235c:	ldr	r1, [sp, #20]
   1235e:	ldr	r0, [sp, #24]
   12360:	bl	12d04 <__ssprint_r>
   12364:	cmp	r0, #0
   12366:	bne.w	11814 <_svfprintf_r+0x1f4>
   1236a:	ldr	r4, [sp, #148]	; 0x94
   1236c:	ldr	r5, [sp, #144]	; 0x90
   1236e:	add.w	r9, sp, #192	; 0xc0
   12372:	b.n	12174 <_svfprintf_r+0xb54>
   12374:	.word	0x0001374c
   12378:	ldr	r1, [sp, #12]
   1237a:	ands.w	r2, r1, #16
   1237e:	beq.w	12728 <_svfprintf_r+0x1108>
   12382:	ldr	r0, [sp, #40]	; 0x28
   12384:	strb.w	r3, [sp, #111]	; 0x6f
   12388:	cmp.w	fp, #0
   1238c:	ldr	r4, [r0, #0]
   1238e:	add.w	r7, r0, #4
   12392:	mov.w	r5, #0
   12396:	blt.n	123e6 <_svfprintf_r+0xdc6>
   12398:	mov	r2, r1
   1239a:	bic.w	r2, r2, #128	; 0x80
   1239e:	str	r2, [sp, #12]
   123a0:	orrs.w	r2, r4, r5
   123a4:	str	r7, [sp, #40]	; 0x28
   123a6:	mov	r7, r3
   123a8:	bne.w	1197c <_svfprintf_r+0x35c>
   123ac:	b.n	11d4c <_svfprintf_r+0x72c>
   123ae:	ldr	r3, [sp, #12]
   123b0:	lsls	r0, r3, #27
   123b2:	bmi.n	1240a <_svfprintf_r+0xdea>
   123b4:	ldr	r3, [sp, #12]
   123b6:	lsls	r1, r3, #25
   123b8:	bpl.n	1240a <_svfprintf_r+0xdea>
   123ba:	ldr	r1, [sp, #40]	; 0x28
   123bc:	ldrsh.w	r4, [r1]
   123c0:	adds	r1, #4
   123c2:	asrs	r5, r4, #31
   123c4:	mov	r2, r4
   123c6:	mov	r3, r5
   123c8:	str	r1, [sp, #40]	; 0x28
   123ca:	b.w	11956 <_svfprintf_r+0x336>
   123ce:	ldr	r1, [sp, #40]	; 0x28
   123d0:	strb.w	r3, [sp, #111]	; 0x6f
   123d4:	cmp.w	fp, #0
   123d8:	ldr	r4, [r1, #0]
   123da:	add.w	r7, r1, #4
   123de:	mov.w	r5, #0
   123e2:	bge.w	1287e <_svfprintf_r+0x125e>
   123e6:	str	r7, [sp, #40]	; 0x28
   123e8:	mov	r7, r3
   123ea:	orrs.w	r3, r4, r5
   123ee:	bne.w	1197c <_svfprintf_r+0x35c>
   123f2:	b.n	11d56 <_svfprintf_r+0x736>
   123f4:	adds	r3, #1
   123f6:	ldr	r2, [sp, #44]	; 0x2c
   123f8:	str	r3, [sp, #144]	; 0x90
   123fa:	add	r4, r5
   123fc:	cmp	r3, #7
   123fe:	str	r4, [sp, #148]	; 0x94
   12400:	stmia.w	r9, {r2, r5}
   12404:	ble.w	11b48 <_svfprintf_r+0x528>
   12408:	b.n	1218e <_svfprintf_r+0xb6e>
   1240a:	ldr	r2, [sp, #40]	; 0x28
   1240c:	ldr	r4, [r2, #0]
   1240e:	mov	r3, r2
   12410:	adds	r3, #4
   12412:	asrs	r5, r4, #31
   12414:	mov	r2, r4
   12416:	str	r3, [sp, #40]	; 0x28
   12418:	cmp	r2, #0
   1241a:	mov	r3, r5
   1241c:	sbcs.w	r3, r3, #0
   12420:	bge.w	11960 <_svfprintf_r+0x340>
   12424:	negs	r4, r4
   12426:	mov.w	r7, #45	; 0x2d
   1242a:	sbc.w	r5, r5, r5, lsl #1
   1242e:	cmp.w	fp, #0
   12432:	strb.w	r7, [sp, #111]	; 0x6f
   12436:	blt.w	1197c <_svfprintf_r+0x35c>
   1243a:	ldr	r3, [sp, #12]
   1243c:	bic.w	r3, r3, #128	; 0x80
   12440:	str	r3, [sp, #12]
   12442:	b.w	1197c <_svfprintf_r+0x35c>
   12446:	add	r2, sp, #140	; 0x8c
   12448:	ldr	r1, [sp, #20]
   1244a:	ldr	r0, [sp, #24]
   1244c:	bl	12d04 <__ssprint_r>
   12450:	cmp	r0, #0
   12452:	bne.w	11814 <_svfprintf_r+0x1f4>
   12456:	ldr	r4, [sp, #148]	; 0x94
   12458:	add.w	r9, sp, #192	; 0xc0
   1245c:	ldr	r2, [sp, #60]	; 0x3c
   1245e:	ldr	r3, [sp, #116]	; 0x74
   12460:	add	r2, r6
   12462:	mov	r7, r2
   12464:	ldr	r2, [sp, #56]	; 0x38
   12466:	cmp	r3, r2
   12468:	blt.n	124fa <_svfprintf_r+0xeda>
   1246a:	ldr	r2, [sp, #12]
   1246c:	lsls	r5, r2, #31
   1246e:	bmi.n	124fa <_svfprintf_r+0xeda>
   12470:	ldr	r1, [sp, #56]	; 0x38
   12472:	add	r6, r1
   12474:	subs	r5, r6, r7
   12476:	subs	r3, r1, r3
   12478:	cmp	r5, r3
   1247a:	it	ge
   1247c:	movge	r5, r3
   1247e:	cmp	r5, #0
   12480:	mov	r6, r5
   12482:	ble.n	124a0 <_svfprintf_r+0xe80>
   12484:	ldr	r2, [sp, #144]	; 0x90
   12486:	str.w	r7, [r9]
   1248a:	adds	r2, #1
   1248c:	add	r4, r5
   1248e:	cmp	r2, #7
   12490:	str	r4, [sp, #148]	; 0x94
   12492:	str.w	r5, [r9, #4]
   12496:	str	r2, [sp, #144]	; 0x90
   12498:	bgt.w	12a98 <_svfprintf_r+0x1478>
   1249c:	add.w	r9, r9, #8
   124a0:	cmp	r6, #0
   124a2:	ite	ge
   124a4:	subge	r5, r3, r6
   124a6:	movlt	r5, r3
   124a8:	cmp	r5, #0
   124aa:	ble.w	11b4c <_svfprintf_r+0x52c>
   124ae:	ldr	r2, [pc, #744]	; (12798 <_svfprintf_r+0x1178>)
   124b0:	ldr	r3, [sp, #144]	; 0x90
   124b2:	str	r2, [sp, #44]	; 0x2c
   124b4:	cmp	r5, #16
   124b6:	ble.n	123f4 <_svfprintf_r+0xdd4>
   124b8:	movs	r6, #16
   124ba:	ldr	r7, [sp, #24]
   124bc:	ldr.w	fp, [sp, #20]
   124c0:	b.n	124cc <_svfprintf_r+0xeac>
   124c2:	add.w	r9, r9, #8
   124c6:	subs	r5, #16
   124c8:	cmp	r5, #16
   124ca:	ble.n	123f4 <_svfprintf_r+0xdd4>
   124cc:	adds	r3, #1
   124ce:	adds	r4, #16
   124d0:	cmp	r3, #7
   124d2:	str	r4, [sp, #148]	; 0x94
   124d4:	str	r3, [sp, #144]	; 0x90
   124d6:	str.w	sl, [r9]
   124da:	str.w	r6, [r9, #4]
   124de:	ble.n	124c2 <_svfprintf_r+0xea2>
   124e0:	add	r2, sp, #140	; 0x8c
   124e2:	mov	r1, fp
   124e4:	mov	r0, r7
   124e6:	bl	12d04 <__ssprint_r>
   124ea:	cmp	r0, #0
   124ec:	bne.w	11814 <_svfprintf_r+0x1f4>
   124f0:	ldr	r4, [sp, #148]	; 0x94
   124f2:	ldr	r3, [sp, #144]	; 0x90
   124f4:	add.w	r9, sp, #192	; 0xc0
   124f8:	b.n	124c6 <_svfprintf_r+0xea6>
   124fa:	ldr	r2, [sp, #144]	; 0x90
   124fc:	ldr	r0, [sp, #72]	; 0x48
   124fe:	ldr	r1, [sp, #76]	; 0x4c
   12500:	str.w	r1, [r9]
   12504:	adds	r2, #1
   12506:	add	r4, r0
   12508:	cmp	r2, #7
   1250a:	str	r4, [sp, #148]	; 0x94
   1250c:	str.w	r0, [r9, #4]
   12510:	str	r2, [sp, #144]	; 0x90
   12512:	bgt.w	12a7e <_svfprintf_r+0x145e>
   12516:	add.w	r9, r9, #8
   1251a:	b.n	12470 <_svfprintf_r+0xe50>
   1251c:	ldr	r3, [sp, #12]
   1251e:	lsls	r0, r3, #31
   12520:	bmi.w	12108 <_svfprintf_r+0xae8>
   12524:	adds	r5, #1
   12526:	adds	r4, #1
   12528:	movs	r3, #1
   1252a:	cmp	r5, #7
   1252c:	str	r4, [sp, #148]	; 0x94
   1252e:	str	r5, [sp, #144]	; 0x90
   12530:	str.w	r6, [r9]
   12534:	str.w	r3, [r9, #4]
   12538:	ble.w	12170 <_svfprintf_r+0xb50>
   1253c:	b.n	1235a <_svfprintf_r+0xd3a>
   1253e:	add	r2, sp, #140	; 0x8c
   12540:	ldr	r1, [sp, #20]
   12542:	ldr	r0, [sp, #24]
   12544:	bl	12d04 <__ssprint_r>
   12548:	cmp	r0, #0
   1254a:	bne.w	11814 <_svfprintf_r+0x1f4>
   1254e:	ldr	r4, [sp, #148]	; 0x94
   12550:	ldr	r5, [sp, #144]	; 0x90
   12552:	add.w	r9, sp, #192	; 0xc0
   12556:	b.n	12124 <_svfprintf_r+0xb04>
   12558:	add	r2, sp, #140	; 0x8c
   1255a:	ldr	r1, [sp, #20]
   1255c:	ldr	r0, [sp, #24]
   1255e:	bl	12d04 <__ssprint_r>
   12562:	cmp	r0, #0
   12564:	bne.w	11814 <_svfprintf_r+0x1f4>
   12568:	ldr	r4, [sp, #148]	; 0x94
   1256a:	ldr	r5, [sp, #144]	; 0x90
   1256c:	add.w	r9, sp, #192	; 0xc0
   12570:	b.n	12142 <_svfprintf_r+0xb22>
   12572:	add	r2, sp, #140	; 0x8c
   12574:	ldr	r1, [sp, #20]
   12576:	ldr	r0, [sp, #24]
   12578:	bl	12d04 <__ssprint_r>
   1257c:	cmp	r0, #0
   1257e:	bne.w	11814 <_svfprintf_r+0x1f4>
   12582:	ldr	r4, [sp, #148]	; 0x94
   12584:	add.w	r9, sp, #192	; 0xc0
   12588:	b.w	11ab4 <_svfprintf_r+0x494>
   1258c:	ldr	r1, [sp, #12]
   1258e:	ands.w	r3, r1, #64	; 0x40
   12592:	beq.w	12708 <_svfprintf_r+0x10e8>
   12596:	ldr	r0, [sp, #40]	; 0x28
   12598:	strb.w	r2, [sp, #111]	; 0x6f
   1259c:	mov	r3, r0
   1259e:	cmp.w	fp, #0
   125a2:	add.w	r3, r3, #4
   125a6:	ldrh	r4, [r0, #0]
   125a8:	mov.w	r5, #0
   125ac:	blt.w	12930 <_svfprintf_r+0x1310>
   125b0:	bic.w	r1, r1, #128	; 0x80
   125b4:	str	r1, [sp, #12]
   125b6:	orrs.w	r1, r4, r5
   125ba:	str	r3, [sp, #40]	; 0x28
   125bc:	beq.w	11f74 <_svfprintf_r+0x954>
   125c0:	mov	r7, r2
   125c2:	b.w	1186c <_svfprintf_r+0x24c>
   125c6:	ldr	r3, [sp, #12]
   125c8:	lsls	r7, r3, #27
   125ca:	bmi.n	125e4 <_svfprintf_r+0xfc4>
   125cc:	ldr	r3, [sp, #12]
   125ce:	lsls	r6, r3, #25
   125d0:	bpl.n	125e4 <_svfprintf_r+0xfc4>
   125d2:	ldr	r2, [sp, #40]	; 0x28
   125d4:	ldr	r3, [r2, #0]
   125d6:	adds	r2, #4
   125d8:	str	r2, [sp, #40]	; 0x28
   125da:	ldrh.w	r2, [sp, #28]
   125de:	strh	r2, [r3, #0]
   125e0:	b.w	1166e <_svfprintf_r+0x4e>
   125e4:	ldr	r2, [sp, #40]	; 0x28
   125e6:	ldr	r3, [r2, #0]
   125e8:	adds	r2, #4
   125ea:	str	r2, [sp, #40]	; 0x28
   125ec:	ldr	r2, [sp, #28]
   125ee:	str	r2, [r3, #0]
   125f0:	b.w	1166e <_svfprintf_r+0x4e>
   125f4:	ldrd	r0, r1, [sp, #64]	; 0x40
   125f8:	mov	r2, r0
   125fa:	mov	r3, r1
   125fc:	bl	e780 <__aeabi_dcmpun>
   12600:	cmp	r0, #0
   12602:	bne.w	12c00 <_svfprintf_r+0x15e0>
   12606:	ldr	r3, [sp, #52]	; 0x34
   12608:	cmp.w	fp, #4294967295
   1260c:	bic.w	r7, r3, #32
   12610:	beq.w	12ae2 <_svfprintf_r+0x14c2>
   12614:	cmp	r7, #71	; 0x47
   12616:	beq.w	1291e <_svfprintf_r+0x12fe>
   1261a:	ldr	r3, [sp, #68]	; 0x44
   1261c:	ldr	r2, [sp, #12]
   1261e:	cmp	r3, #0
   12620:	orr.w	r2, r2, #256	; 0x100
   12624:	str	r2, [sp, #44]	; 0x2c
   12626:	blt.w	12b1a <_svfprintf_r+0x14fa>
   1262a:	vldr	d7, [sp, #64]	; 0x40
   1262e:	vstr	d7, [sp, #96]	; 0x60
   12632:	movs	r3, #0
   12634:	str	r3, [sp, #16]
   12636:	ldr	r3, [sp, #52]	; 0x34
   12638:	cmp	r3, #102	; 0x66
   1263a:	beq.w	12ae8 <_svfprintf_r+0x14c8>
   1263e:	cmp	r3, #70	; 0x46
   12640:	beq.w	128ce <_svfprintf_r+0x12ae>
   12644:	cmp	r7, #69	; 0x45
   12646:	ite	eq
   12648:	addeq.w	r5, fp, #1
   1264c:	movne	r5, fp
   1264e:	add	r2, sp, #132	; 0x84
   12650:	add	r3, sp, #120	; 0x78
   12652:	str	r2, [sp, #4]
   12654:	str	r3, [sp, #0]
   12656:	mov	r2, r5
   12658:	add	r3, sp, #116	; 0x74
   1265a:	movs	r1, #2
   1265c:	vldr	d0, [sp, #96]	; 0x60
   12660:	ldr	r0, [sp, #24]
   12662:	bl	107e8 <_dtoa_r>
   12666:	ldr	r3, [sp, #52]	; 0x34
   12668:	cmp	r3, #103	; 0x67
   1266a:	mov	r6, r0
   1266c:	bne.w	12b46 <_svfprintf_r+0x1526>
   12670:	ldr	r3, [sp, #12]
   12672:	lsls	r2, r3, #31
   12674:	bpl.w	12bea <_svfprintf_r+0x15ca>
   12678:	adds	r4, r6, r5
   1267a:	movs	r2, #0
   1267c:	movs	r3, #0
   1267e:	ldrd	r0, r1, [sp, #96]	; 0x60
   12682:	bl	e71c <__aeabi_dcmpeq>
   12686:	cmp	r0, #0
   12688:	bne.w	129a6 <_svfprintf_r+0x1386>
   1268c:	ldr	r3, [sp, #132]	; 0x84
   1268e:	cmp	r4, r3
   12690:	bls.n	126a0 <_svfprintf_r+0x1080>
   12692:	movs	r1, #48	; 0x30
   12694:	adds	r2, r3, #1
   12696:	str	r2, [sp, #132]	; 0x84
   12698:	strb	r1, [r3, #0]
   1269a:	ldr	r3, [sp, #132]	; 0x84
   1269c:	cmp	r4, r3
   1269e:	bhi.n	12694 <_svfprintf_r+0x1074>
   126a0:	subs	r3, r3, r6
   126a2:	cmp	r7, #71	; 0x47
   126a4:	str	r3, [sp, #56]	; 0x38
   126a6:	beq.w	12998 <_svfprintf_r+0x1378>
   126aa:	ldr	r3, [sp, #52]	; 0x34
   126ac:	cmp	r3, #101	; 0x65
   126ae:	ble.w	12b64 <_svfprintf_r+0x1544>
   126b2:	ldr	r3, [sp, #52]	; 0x34
   126b4:	cmp	r3, #102	; 0x66
   126b6:	ldr	r3, [sp, #116]	; 0x74
   126b8:	str	r3, [sp, #60]	; 0x3c
   126ba:	beq.w	12b7e <_svfprintf_r+0x155e>
   126be:	ldr	r2, [sp, #60]	; 0x3c
   126c0:	ldr	r1, [sp, #56]	; 0x38
   126c2:	cmp	r2, r1
   126c4:	blt.w	12b2c <_svfprintf_r+0x150c>
   126c8:	ldr	r3, [sp, #12]
   126ca:	lsls	r1, r3, #31
   126cc:	bmi.w	12bee <_svfprintf_r+0x15ce>
   126d0:	bic.w	r3, r2, r2, asr #31
   126d4:	str	r2, [sp, #36]	; 0x24
   126d6:	movs	r2, #103	; 0x67
   126d8:	str	r2, [sp, #52]	; 0x34
   126da:	ldr	r2, [sp, #16]
   126dc:	cmp	r2, #0
   126de:	bne.w	12940 <_svfprintf_r+0x1320>
   126e2:	str	r3, [sp, #16]
   126e4:	ldr	r3, [sp, #44]	; 0x2c
   126e6:	str	r3, [sp, #12]
   126e8:	mov	fp, r2
   126ea:	ldrb.w	r7, [sp, #111]	; 0x6f
   126ee:	b.w	119c4 <_svfprintf_r+0x3a4>
   126f2:	bic.w	r7, r7, #7
   126f6:	vldr	d7, [r7]
   126fa:	add.w	r3, r7, #8
   126fe:	vstr	d7, [sp, #64]	; 0x40
   12702:	str	r3, [sp, #40]	; 0x28
   12704:	b.w	11c1c <_svfprintf_r+0x5fc>
   12708:	ldr	r1, [sp, #40]	; 0x28
   1270a:	strb.w	r3, [sp, #111]	; 0x6f
   1270e:	cmp.w	fp, #0
   12712:	ldr	r4, [r1, #0]
   12714:	add.w	r7, r1, #4
   12718:	mov.w	r5, #0
   1271c:	bge.w	12878 <_svfprintf_r+0x1258>
   12720:	str	r7, [sp, #40]	; 0x28
   12722:	movs	r7, #0
   12724:	b.w	1186c <_svfprintf_r+0x24c>
   12728:	ldr	r1, [sp, #12]
   1272a:	ands.w	r3, r1, #64	; 0x40
   1272e:	beq.w	123ce <_svfprintf_r+0xdae>
   12732:	ldr	r0, [sp, #40]	; 0x28
   12734:	strb.w	r2, [sp, #111]	; 0x6f
   12738:	mov	r3, r0
   1273a:	cmp.w	fp, #0
   1273e:	add.w	r3, r3, #4
   12742:	ldrh	r4, [r0, #0]
   12744:	mov.w	r5, #0
   12748:	blt.w	1292a <_svfprintf_r+0x130a>
   1274c:	bic.w	r1, r1, #128	; 0x80
   12750:	str	r1, [sp, #12]
   12752:	orrs.w	r1, r4, r5
   12756:	str	r3, [sp, #40]	; 0x28
   12758:	mov	r7, r2
   1275a:	bne.w	1197c <_svfprintf_r+0x35c>
   1275e:	b.w	11d4c <_svfprintf_r+0x72c>
   12762:	ldr	r3, [sp, #12]
   12764:	ldr	r2, [sp, #40]	; 0x28
   12766:	tst.w	r3, #64	; 0x40
   1276a:	mov	r3, r2
   1276c:	beq.w	12934 <_svfprintf_r+0x1314>
   12770:	adds	r3, #4
   12772:	ldrh	r4, [r2, #0]
   12774:	str	r3, [sp, #40]	; 0x28
   12776:	movs	r5, #0
   12778:	b.w	11d86 <_svfprintf_r+0x766>
   1277c:	mov	r4, r2
   1277e:	adds	r3, #1
   12780:	ldr	r2, [sp, #44]	; 0x2c
   12782:	str	r3, [sp, #144]	; 0x90
   12784:	add	r4, r5
   12786:	cmp	r3, #7
   12788:	str	r4, [sp, #148]	; 0x94
   1278a:	stmia.w	r9, {r2, r5}
   1278e:	bgt.w	12446 <_svfprintf_r+0xe26>
   12792:	add.w	r9, r9, #8
   12796:	b.n	1245c <_svfprintf_r+0xe3c>
   12798:	.word	0x0001374c
   1279c:	movs	r7, #0
   1279e:	cmp	fp, r7
   127a0:	strb.w	r7, [sp, #111]	; 0x6f
   127a4:	blt.w	11f98 <_svfprintf_r+0x978>
   127a8:	ldr	r3, [sp, #12]
   127aa:	bic.w	r3, r3, #128	; 0x80
   127ae:	str	r3, [sp, #12]
   127b0:	b.w	11f34 <_svfprintf_r+0x914>
   127b4:	add	r2, sp, #140	; 0x8c
   127b6:	ldr	r1, [sp, #20]
   127b8:	ldr	r0, [sp, #24]
   127ba:	bl	12d04 <__ssprint_r>
   127be:	cmp	r0, #0
   127c0:	bne.w	11814 <_svfprintf_r+0x1f4>
   127c4:	ldr	r4, [sp, #148]	; 0x94
   127c6:	add.w	r9, sp, #192	; 0xc0
   127ca:	b.n	11fdc <_svfprintf_r+0x9bc>
   127cc:	ldr	r7, [sp, #40]	; 0x28
   127ce:	b.w	11f8a <_svfprintf_r+0x96a>
   127d2:	ldr	r3, [sp, #144]	; 0x90
   127d4:	ldr	r2, [pc, #736]	; (12ab8 <_svfprintf_r+0x1498>)
   127d6:	str.w	r2, [r9]
   127da:	adds	r3, #1
   127dc:	adds	r4, #1
   127de:	movs	r2, #1
   127e0:	cmp	r3, #7
   127e2:	str	r4, [sp, #148]	; 0x94
   127e4:	str	r3, [sp, #144]	; 0x90
   127e6:	str.w	r2, [r9, #4]
   127ea:	bgt.w	12904 <_svfprintf_r+0x12e4>
   127ee:	add.w	r9, r9, #8
   127f2:	cbnz	r5, 12800 <_svfprintf_r+0x11e0>
   127f4:	ldr	r3, [sp, #56]	; 0x38
   127f6:	cbnz	r3, 12800 <_svfprintf_r+0x11e0>
   127f8:	ldr	r3, [sp, #12]
   127fa:	lsls	r7, r3, #31
   127fc:	bpl.w	11b4c <_svfprintf_r+0x52c>
   12800:	ldr	r3, [sp, #144]	; 0x90
   12802:	ldr	r1, [sp, #72]	; 0x48
   12804:	ldr	r2, [sp, #76]	; 0x4c
   12806:	str.w	r2, [r9]
   1280a:	adds	r3, #1
   1280c:	add	r4, r1
   1280e:	cmp	r3, #7
   12810:	str	r4, [sp, #148]	; 0x94
   12812:	str.w	r1, [r9, #4]
   12816:	str	r3, [sp, #144]	; 0x90
   12818:	bgt.w	12bb6 <_svfprintf_r+0x1596>
   1281c:	add.w	r9, r9, #8
   12820:	negs	r5, r5
   12822:	cmp	r5, #0
   12824:	ble.w	1297c <_svfprintf_r+0x135c>
   12828:	ldr	r2, [pc, #656]	; (12abc <_svfprintf_r+0x149c>)
   1282a:	str	r2, [sp, #44]	; 0x2c
   1282c:	cmp	r5, #16
   1282e:	ble.w	129c4 <_svfprintf_r+0x13a4>
   12832:	mov	r2, r4
   12834:	movs	r7, #16
   12836:	ldr.w	fp, [sp, #24]
   1283a:	ldr	r4, [sp, #20]
   1283c:	b.n	1284a <_svfprintf_r+0x122a>
   1283e:	add.w	r9, r9, #8
   12842:	subs	r5, #16
   12844:	cmp	r5, #16
   12846:	ble.w	129c2 <_svfprintf_r+0x13a2>
   1284a:	adds	r3, #1
   1284c:	adds	r2, #16
   1284e:	cmp	r3, #7
   12850:	str	r2, [sp, #148]	; 0x94
   12852:	str	r3, [sp, #144]	; 0x90
   12854:	str.w	sl, [r9]
   12858:	str.w	r7, [r9, #4]
   1285c:	ble.n	1283e <_svfprintf_r+0x121e>
   1285e:	add	r2, sp, #140	; 0x8c
   12860:	mov	r1, r4
   12862:	mov	r0, fp
   12864:	bl	12d04 <__ssprint_r>
   12868:	cmp	r0, #0
   1286a:	bne.w	11814 <_svfprintf_r+0x1f4>
   1286e:	ldr	r2, [sp, #148]	; 0x94
   12870:	ldr	r3, [sp, #144]	; 0x90
   12872:	add.w	r9, sp, #192	; 0xc0
   12876:	b.n	12842 <_svfprintf_r+0x1222>
   12878:	ldr	r2, [sp, #12]
   1287a:	b.w	11cf0 <_svfprintf_r+0x6d0>
   1287e:	ldr	r2, [sp, #12]
   12880:	b.n	1239a <_svfprintf_r+0xd7a>
   12882:	ldr	r3, [sp, #12]
   12884:	orr.w	r3, r3, #32
   12888:	str	r3, [sp, #12]
   1288a:	add.w	r8, r8, #1
   1288e:	ldrb.w	r3, [r8]
   12892:	b.w	116d4 <_svfprintf_r+0xb4>
   12896:	add	r2, sp, #140	; 0x8c
   12898:	ldr	r1, [sp, #20]
   1289a:	ldr	r0, [sp, #24]
   1289c:	bl	12d04 <__ssprint_r>
   128a0:	cmp	r0, #0
   128a2:	bne.w	11814 <_svfprintf_r+0x1f4>
   128a6:	ldr	r4, [sp, #148]	; 0x94
   128a8:	add.w	r9, sp, #192	; 0xc0
   128ac:	b.w	1200c <_svfprintf_r+0x9ec>
   128b0:	movs	r1, #64	; 0x40
   128b2:	ldr	r0, [sp, #24]
   128b4:	bl	ebc0 <_malloc_r>
   128b8:	ldr	r2, [sp, #20]
   128ba:	str	r0, [r2, #0]
   128bc:	str	r0, [r2, #16]
   128be:	cmp	r0, #0
   128c0:	beq.w	12caa <_svfprintf_r+0x168a>
   128c4:	ldr	r2, [sp, #20]
   128c6:	movs	r3, #64	; 0x40
   128c8:	str	r3, [r2, #20]
   128ca:	b.w	1164e <_svfprintf_r+0x2e>
   128ce:	add	r2, sp, #132	; 0x84
   128d0:	add	r3, sp, #120	; 0x78
   128d2:	str	r2, [sp, #4]
   128d4:	str	r3, [sp, #0]
   128d6:	mov	r2, fp
   128d8:	add	r3, sp, #116	; 0x74
   128da:	movs	r1, #3
   128dc:	vldr	d0, [sp, #96]	; 0x60
   128e0:	ldr	r0, [sp, #24]
   128e2:	bl	107e8 <_dtoa_r>
   128e6:	mov	r5, fp
   128e8:	mov	r6, r0
   128ea:	ldr	r3, [sp, #52]	; 0x34
   128ec:	cmp	r3, #70	; 0x46
   128ee:	add.w	r4, r6, r5
   128f2:	bne.w	1267a <_svfprintf_r+0x105a>
   128f6:	ldrb	r3, [r6, #0]
   128f8:	cmp	r3, #48	; 0x30
   128fa:	beq.w	12c0c <_svfprintf_r+0x15ec>
   128fe:	ldr	r5, [sp, #116]	; 0x74
   12900:	add	r4, r5
   12902:	b.n	1267a <_svfprintf_r+0x105a>
   12904:	add	r2, sp, #140	; 0x8c
   12906:	ldr	r1, [sp, #20]
   12908:	ldr	r0, [sp, #24]
   1290a:	bl	12d04 <__ssprint_r>
   1290e:	cmp	r0, #0
   12910:	bne.w	11814 <_svfprintf_r+0x1f4>
   12914:	ldr	r5, [sp, #116]	; 0x74
   12916:	ldr	r4, [sp, #148]	; 0x94
   12918:	add.w	r9, sp, #192	; 0xc0
   1291c:	b.n	127f2 <_svfprintf_r+0x11d2>
   1291e:	cmp.w	fp, #0
   12922:	it	eq
   12924:	moveq.w	fp, #1
   12928:	b.n	1261a <_svfprintf_r+0xffa>
   1292a:	str	r3, [sp, #40]	; 0x28
   1292c:	mov	r7, r2
   1292e:	b.n	123ea <_svfprintf_r+0xdca>
   12930:	str	r3, [sp, #40]	; 0x28
   12932:	b.n	12722 <_svfprintf_r+0x1102>
   12934:	adds	r3, #4
   12936:	ldr	r4, [r2, #0]
   12938:	str	r3, [sp, #40]	; 0x28
   1293a:	movs	r5, #0
   1293c:	b.w	11d86 <_svfprintf_r+0x766>
   12940:	movs	r7, #45	; 0x2d
   12942:	str	r3, [sp, #16]
   12944:	ldr	r3, [sp, #44]	; 0x2c
   12946:	str	r3, [sp, #12]
   12948:	strb.w	r7, [sp, #111]	; 0x6f
   1294c:	mov.w	fp, #0
   12950:	b.w	119c6 <_svfprintf_r+0x3a6>
   12954:	mov	r0, r6
   12956:	bl	f940 <strlen>
   1295a:	mov	fp, r4
   1295c:	mov	r3, r0
   1295e:	str	r0, [sp, #36]	; 0x24
   12960:	b.w	11ea8 <_svfprintf_r+0x888>
   12964:	add	r2, sp, #140	; 0x8c
   12966:	ldr	r1, [sp, #20]
   12968:	ldr	r0, [sp, #24]
   1296a:	bl	12d04 <__ssprint_r>
   1296e:	cmp	r0, #0
   12970:	bne.w	11814 <_svfprintf_r+0x1f4>
   12974:	ldr	r4, [sp, #148]	; 0x94
   12976:	ldr	r3, [sp, #144]	; 0x90
   12978:	add.w	r9, sp, #192	; 0xc0
   1297c:	ldr	r1, [sp, #56]	; 0x38
   1297e:	str.w	r6, [r9]
   12982:	adds	r3, #1
   12984:	add	r4, r1
   12986:	cmp	r3, #7
   12988:	str	r4, [sp, #148]	; 0x94
   1298a:	str	r3, [sp, #144]	; 0x90
   1298c:	str.w	r1, [r9, #4]
   12990:	ble.w	11b48 <_svfprintf_r+0x528>
   12994:	b.w	1218e <_svfprintf_r+0xb6e>
   12998:	ldr	r3, [sp, #116]	; 0x74
   1299a:	adds	r5, r3, #3
   1299c:	blt.n	129dc <_svfprintf_r+0x13bc>
   1299e:	cmp	fp, r3
   129a0:	blt.n	129dc <_svfprintf_r+0x13bc>
   129a2:	str	r3, [sp, #60]	; 0x3c
   129a4:	b.n	126be <_svfprintf_r+0x109e>
   129a6:	mov	r3, r4
   129a8:	b.n	126a0 <_svfprintf_r+0x1080>
   129aa:	add	r2, sp, #140	; 0x8c
   129ac:	ldr	r1, [sp, #20]
   129ae:	ldr	r0, [sp, #24]
   129b0:	bl	12d04 <__ssprint_r>
   129b4:	cmp	r0, #0
   129b6:	bne.w	11814 <_svfprintf_r+0x1f4>
   129ba:	ldr	r4, [sp, #148]	; 0x94
   129bc:	add.w	r9, sp, #192	; 0xc0
   129c0:	b.n	1225c <_svfprintf_r+0xc3c>
   129c2:	mov	r4, r2
   129c4:	adds	r3, #1
   129c6:	ldr	r2, [sp, #44]	; 0x2c
   129c8:	str	r3, [sp, #144]	; 0x90
   129ca:	add	r4, r5
   129cc:	cmp	r3, #7
   129ce:	str	r4, [sp, #148]	; 0x94
   129d0:	stmia.w	r9, {r2, r5}
   129d4:	bgt.n	12964 <_svfprintf_r+0x1344>
   129d6:	add.w	r9, r9, #8
   129da:	b.n	1297c <_svfprintf_r+0x135c>
   129dc:	ldr	r2, [sp, #52]	; 0x34
   129de:	subs	r2, #2
   129e0:	str	r2, [sp, #52]	; 0x34
   129e2:	subs	r3, #1
   129e4:	cmp	r3, #0
   129e6:	ldrb.w	r2, [sp, #52]	; 0x34
   129ea:	str	r3, [sp, #116]	; 0x74
   129ec:	it	lt
   129ee:	neglt	r3, r3
   129f0:	strb.w	r2, [sp, #124]	; 0x7c
   129f4:	ite	lt
   129f6:	movlt	r2, #45	; 0x2d
   129f8:	movge	r2, #43	; 0x2b
   129fa:	cmp	r3, #9
   129fc:	strb.w	r2, [sp, #125]	; 0x7d
   12a00:	ble.w	12bda <_svfprintf_r+0x15ba>
   12a04:	add.w	r0, sp, #139	; 0x8b
   12a08:	mov	r4, r0
   12a0a:	ldr	r2, [pc, #180]	; (12ac0 <_svfprintf_r+0x14a0>)
   12a0c:	smull	r2, r1, r2, r3
   12a10:	asrs	r2, r3, #31
   12a12:	rsb	r2, r2, r1, asr #2
   12a16:	add.w	r1, r2, r2, lsl #2
   12a1a:	sub.w	r3, r3, r1, lsl #1
   12a1e:	add.w	r1, r3, #48	; 0x30
   12a22:	cmp	r2, #9
   12a24:	mov	r3, r2
   12a26:	strb.w	r1, [r4, #-1]!
   12a2a:	bgt.n	12a0a <_svfprintf_r+0x13ea>
   12a2c:	mov	r1, r4
   12a2e:	adds	r3, #48	; 0x30
   12a30:	uxtb	r2, r3
   12a32:	strb.w	r2, [r1, #-1]!
   12a36:	cmp	r0, r1
   12a38:	bls.w	12ca4 <_svfprintf_r+0x1684>
   12a3c:	add.w	r1, sp, #126	; 0x7e
   12a40:	mov	r3, r4
   12a42:	b.n	12a48 <_svfprintf_r+0x1428>
   12a44:	ldrb.w	r2, [r3], #1
   12a48:	strb.w	r2, [r1], #1
   12a4c:	cmp	r0, r3
   12a4e:	bne.n	12a44 <_svfprintf_r+0x1424>
   12a50:	adds	r3, r0, #1
   12a52:	subs	r3, r3, r4
   12a54:	add.w	r2, sp, #126	; 0x7e
   12a58:	add	r3, r2
   12a5a:	add	r2, sp, #124	; 0x7c
   12a5c:	subs	r3, r3, r2
   12a5e:	ldr	r2, [sp, #56]	; 0x38
   12a60:	str	r3, [sp, #84]	; 0x54
   12a62:	cmp	r2, #1
   12a64:	add	r3, r2
   12a66:	str	r3, [sp, #36]	; 0x24
   12a68:	ble.w	12c3a <_svfprintf_r+0x161a>
   12a6c:	ldr	r3, [sp, #36]	; 0x24
   12a6e:	ldr	r2, [sp, #72]	; 0x48
   12a70:	add	r3, r2
   12a72:	movs	r2, #0
   12a74:	str	r3, [sp, #36]	; 0x24
   12a76:	str	r2, [sp, #60]	; 0x3c
   12a78:	bic.w	r3, r3, r3, asr #31
   12a7c:	b.n	126da <_svfprintf_r+0x10ba>
   12a7e:	add	r2, sp, #140	; 0x8c
   12a80:	ldr	r1, [sp, #20]
   12a82:	ldr	r0, [sp, #24]
   12a84:	bl	12d04 <__ssprint_r>
   12a88:	cmp	r0, #0
   12a8a:	bne.w	11814 <_svfprintf_r+0x1f4>
   12a8e:	ldr	r3, [sp, #116]	; 0x74
   12a90:	ldr	r4, [sp, #148]	; 0x94
   12a92:	add.w	r9, sp, #192	; 0xc0
   12a96:	b.n	12470 <_svfprintf_r+0xe50>
   12a98:	add	r2, sp, #140	; 0x8c
   12a9a:	ldr	r1, [sp, #20]
   12a9c:	ldr	r0, [sp, #24]
   12a9e:	bl	12d04 <__ssprint_r>
   12aa2:	cmp	r0, #0
   12aa4:	bne.w	11814 <_svfprintf_r+0x1f4>
   12aa8:	ldr	r3, [sp, #116]	; 0x74
   12aaa:	ldr	r2, [sp, #56]	; 0x38
   12aac:	ldr	r4, [sp, #148]	; 0x94
   12aae:	subs	r3, r2, r3
   12ab0:	add.w	r9, sp, #192	; 0xc0
   12ab4:	b.n	124a0 <_svfprintf_r+0xe80>
   12ab6:	nop
   12ab8:	.word	0x000132f4
   12abc:	.word	0x0001374c
   12ac0:	.word	0x66666667
   12ac4:	cmp	r5, #6
   12ac6:	mov	r3, r5
   12ac8:	it	cs
   12aca:	movcs	r3, #6
   12acc:	str	r3, [sp, #36]	; 0x24
   12ace:	bic.w	r3, r3, r3, asr #31
   12ad2:	mov	fp, r6
   12ad4:	str	r7, [sp, #40]	; 0x28
   12ad6:	str	r6, [sp, #60]	; 0x3c
   12ad8:	mov	r7, r6
   12ada:	str	r3, [sp, #16]
   12adc:	ldr	r6, [pc, #536]	; (12cf8 <_svfprintf_r+0x16d8>)
   12ade:	b.w	119c4 <_svfprintf_r+0x3a4>
   12ae2:	mov.w	fp, #6
   12ae6:	b.n	1261a <_svfprintf_r+0xffa>
   12ae8:	add	r2, sp, #132	; 0x84
   12aea:	add	r3, sp, #120	; 0x78
   12aec:	str	r2, [sp, #4]
   12aee:	str	r3, [sp, #0]
   12af0:	mov	r2, fp
   12af2:	add	r3, sp, #116	; 0x74
   12af4:	movs	r1, #3
   12af6:	vldr	d0, [sp, #96]	; 0x60
   12afa:	ldr	r0, [sp, #24]
   12afc:	bl	107e8 <_dtoa_r>
   12b00:	mov	r5, fp
   12b02:	mov	r6, r0
   12b04:	add.w	r4, r0, fp
   12b08:	b.n	128f6 <_svfprintf_r+0x12d6>
   12b0a:	movs	r7, #45	; 0x2d
   12b0c:	strb.w	r7, [sp, #111]	; 0x6f
   12b10:	b.w	11c6a <_svfprintf_r+0x64a>
   12b14:	str	r3, [sp, #12]
   12b16:	b.w	11dc2 <_svfprintf_r+0x7a2>
   12b1a:	ldrd	r1, r2, [sp, #64]	; 0x40
   12b1e:	add.w	r3, r2, #2147483648	; 0x80000000
   12b22:	str	r3, [sp, #100]	; 0x64
   12b24:	movs	r3, #45	; 0x2d
   12b26:	str	r1, [sp, #96]	; 0x60
   12b28:	str	r3, [sp, #16]
   12b2a:	b.n	12636 <_svfprintf_r+0x1016>
   12b2c:	ldr	r2, [sp, #72]	; 0x48
   12b2e:	ldr	r3, [sp, #56]	; 0x38
   12b30:	add	r3, r2
   12b32:	ldr	r2, [sp, #60]	; 0x3c
   12b34:	str	r3, [sp, #36]	; 0x24
   12b36:	cmp	r2, #0
   12b38:	ble.w	12c4e <_svfprintf_r+0x162e>
   12b3c:	movs	r2, #103	; 0x67
   12b3e:	bic.w	r3, r3, r3, asr #31
   12b42:	str	r2, [sp, #52]	; 0x34
   12b44:	b.n	126da <_svfprintf_r+0x10ba>
   12b46:	ldr	r3, [sp, #52]	; 0x34
   12b48:	cmp	r3, #71	; 0x47
   12b4a:	bne.w	12678 <_svfprintf_r+0x1058>
   12b4e:	ldr	r3, [sp, #12]
   12b50:	lsls	r3, r3, #31
   12b52:	bmi.w	128ea <_svfprintf_r+0x12ca>
   12b56:	ldr	r3, [sp, #132]	; 0x84
   12b58:	cmp	r7, #71	; 0x47
   12b5a:	sub.w	r3, r3, r6
   12b5e:	str	r3, [sp, #56]	; 0x38
   12b60:	beq.w	12998 <_svfprintf_r+0x1378>
   12b64:	ldr	r3, [sp, #116]	; 0x74
   12b66:	b.n	129e2 <_svfprintf_r+0x13c2>
   12b68:	bic.w	r3, r5, r5, asr #31
   12b6c:	str	r7, [sp, #40]	; 0x28
   12b6e:	str	r3, [sp, #16]
   12b70:	str	r5, [sp, #36]	; 0x24
   12b72:	mov	fp, r0
   12b74:	str	r0, [sp, #60]	; 0x3c
   12b76:	ldrb.w	r7, [sp, #111]	; 0x6f
   12b7a:	b.w	119c4 <_svfprintf_r+0x3a4>
   12b7e:	cmp	r3, #0
   12b80:	ble.n	12c5e <_svfprintf_r+0x163e>
   12b82:	cmp.w	fp, #0
   12b86:	bne.n	12c28 <_svfprintf_r+0x1608>
   12b88:	ldr	r2, [sp, #12]
   12b8a:	lsls	r4, r2, #31
   12b8c:	bmi.n	12c28 <_svfprintf_r+0x1608>
   12b8e:	mov	r2, r3
   12b90:	str	r2, [sp, #36]	; 0x24
   12b92:	bic.w	r3, r3, r3, asr #31
   12b96:	b.n	126da <_svfprintf_r+0x10ba>
   12b98:	ldr	r3, [sp, #12]
   12b9a:	lsls	r3, r3, #31
   12b9c:	mov	r7, fp
   12b9e:	bpl.n	12bac <_svfprintf_r+0x158c>
   12ba0:	add	r6, sp, #256	; 0x100
   12ba2:	movs	r3, #48	; 0x30
   12ba4:	strb.w	r3, [r6, #-65]!
   12ba8:	b.w	119b0 <_svfprintf_r+0x390>
   12bac:	str.w	fp, [sp, #36]	; 0x24
   12bb0:	add	r6, sp, #192	; 0xc0
   12bb2:	b.w	119b6 <_svfprintf_r+0x396>
   12bb6:	add	r2, sp, #140	; 0x8c
   12bb8:	ldr	r1, [sp, #20]
   12bba:	ldr	r0, [sp, #24]
   12bbc:	bl	12d04 <__ssprint_r>
   12bc0:	cmp	r0, #0
   12bc2:	bne.w	11814 <_svfprintf_r+0x1f4>
   12bc6:	ldr	r5, [sp, #116]	; 0x74
   12bc8:	ldr	r4, [sp, #148]	; 0x94
   12bca:	ldr	r3, [sp, #144]	; 0x90
   12bcc:	add.w	r9, sp, #192	; 0xc0
   12bd0:	b.n	12820 <_svfprintf_r+0x1200>
   12bd2:	mov	r8, r4
   12bd4:	movs	r5, #0
   12bd6:	b.w	116d8 <_svfprintf_r+0xb8>
   12bda:	adds	r3, #48	; 0x30
   12bdc:	movs	r2, #48	; 0x30
   12bde:	strb.w	r3, [sp, #127]	; 0x7f
   12be2:	strb.w	r2, [sp, #126]	; 0x7e
   12be6:	add	r3, sp, #128	; 0x80
   12be8:	b.n	12a5a <_svfprintf_r+0x143a>
   12bea:	ldr	r3, [sp, #132]	; 0x84
   12bec:	b.n	126a0 <_svfprintf_r+0x1080>
   12bee:	ldr	r2, [sp, #72]	; 0x48
   12bf0:	ldr	r3, [sp, #60]	; 0x3c
   12bf2:	add	r3, r2
   12bf4:	movs	r2, #103	; 0x67
   12bf6:	str	r3, [sp, #36]	; 0x24
   12bf8:	str	r2, [sp, #52]	; 0x34
   12bfa:	bic.w	r3, r3, r3, asr #31
   12bfe:	b.n	126da <_svfprintf_r+0x10ba>
   12c00:	ldr	r6, [pc, #248]	; (12cfc <_svfprintf_r+0x16dc>)
   12c02:	ldr	r3, [pc, #252]	; (12d00 <_svfprintf_r+0x16e0>)
   12c04:	ldrb.w	r7, [sp, #111]	; 0x6f
   12c08:	b.w	11c6e <_svfprintf_r+0x64e>
   12c0c:	movs	r2, #0
   12c0e:	movs	r3, #0
   12c10:	ldrd	r0, r1, [sp, #96]	; 0x60
   12c14:	bl	e71c <__aeabi_dcmpeq>
   12c18:	cmp	r0, #0
   12c1a:	bne.w	128fe <_svfprintf_r+0x12de>
   12c1e:	rsb	r5, r5, #1
   12c22:	str	r5, [sp, #116]	; 0x74
   12c24:	add	r4, r5
   12c26:	b.n	1267a <_svfprintf_r+0x105a>
   12c28:	ldr	r3, [sp, #60]	; 0x3c
   12c2a:	ldr	r2, [sp, #72]	; 0x48
   12c2c:	adds	r5, r3, r2
   12c2e:	add.w	r3, r5, fp
   12c32:	str	r3, [sp, #36]	; 0x24
   12c34:	bic.w	r3, r3, r3, asr #31
   12c38:	b.n	126da <_svfprintf_r+0x10ba>
   12c3a:	ldr	r3, [sp, #12]
   12c3c:	ands.w	r3, r3, #1
   12c40:	bne.w	12a6c <_svfprintf_r+0x144c>
   12c44:	str	r3, [sp, #60]	; 0x3c
   12c46:	ldr	r3, [sp, #36]	; 0x24
   12c48:	bic.w	r3, r3, r3, asr #31
   12c4c:	b.n	126da <_svfprintf_r+0x10ba>
   12c4e:	ldr	r3, [sp, #60]	; 0x3c
   12c50:	ldr	r2, [sp, #36]	; 0x24
   12c52:	rsb	r3, r3, #1
   12c56:	add	r2, r3
   12c58:	mov	r3, r2
   12c5a:	str	r2, [sp, #36]	; 0x24
   12c5c:	b.n	12b3c <_svfprintf_r+0x151c>
   12c5e:	cmp.w	fp, #0
   12c62:	bne.n	12c6a <_svfprintf_r+0x164a>
   12c64:	ldr	r3, [sp, #12]
   12c66:	lsls	r0, r3, #31
   12c68:	bpl.n	12c7a <_svfprintf_r+0x165a>
   12c6a:	ldr	r3, [sp, #72]	; 0x48
   12c6c:	adds	r5, r3, #1
   12c6e:	add.w	r3, r5, fp
   12c72:	str	r3, [sp, #36]	; 0x24
   12c74:	bic.w	r3, r3, r3, asr #31
   12c78:	b.n	126da <_svfprintf_r+0x10ba>
   12c7a:	movs	r3, #1
   12c7c:	str	r3, [sp, #36]	; 0x24
   12c7e:	b.n	126da <_svfprintf_r+0x10ba>
   12c80:	ldr	r0, [sp, #40]	; 0x28
   12c82:	ldrb.w	r3, [r8, #1]
   12c86:	ldr	r5, [r0, #0]
   12c88:	adds	r0, #4
   12c8a:	cmp	r5, #0
   12c8c:	str	r0, [sp, #40]	; 0x28
   12c8e:	mov	r8, r4
   12c90:	bge.w	116d4 <_svfprintf_r+0xb4>
   12c94:	mov.w	r5, #4294967295
   12c98:	b.w	116d4 <_svfprintf_r+0xb4>
   12c9c:	strb.w	r1, [sp, #111]	; 0x6f
   12ca0:	b.w	11836 <_svfprintf_r+0x216>
   12ca4:	add.w	r3, sp, #126	; 0x7e
   12ca8:	b.n	12a5a <_svfprintf_r+0x143a>
   12caa:	ldr	r2, [sp, #24]
   12cac:	movs	r3, #12
   12cae:	str	r3, [r2, #0]
   12cb0:	mov.w	r0, #4294967295
   12cb4:	b.w	11826 <_svfprintf_r+0x206>
   12cb8:	strb.w	r1, [sp, #111]	; 0x6f
   12cbc:	b.w	11930 <_svfprintf_r+0x310>
   12cc0:	strb.w	r1, [sp, #111]	; 0x6f
   12cc4:	b.w	11bfc <_svfprintf_r+0x5dc>
   12cc8:	strb.w	r1, [sp, #111]	; 0x6f
   12ccc:	b.w	11d6a <_svfprintf_r+0x74a>
   12cd0:	strb.w	r1, [sp, #111]	; 0x6f
   12cd4:	b.w	11d0e <_svfprintf_r+0x6ee>
   12cd8:	strb.w	r1, [sp, #111]	; 0x6f
   12cdc:	b.w	11cba <_svfprintf_r+0x69a>
   12ce0:	strb.w	r1, [sp, #111]	; 0x6f
   12ce4:	b.w	11f52 <_svfprintf_r+0x932>
   12ce8:	strb.w	r1, [sp, #111]	; 0x6f
   12cec:	b.w	11f10 <_svfprintf_r+0x8f0>
   12cf0:	strb.w	r1, [sp, #111]	; 0x6f
   12cf4:	b.w	11ed4 <_svfprintf_r+0x8b4>
   12cf8:	.word	0x00013794
   12cfc:	.word	0x00013768
   12d00:	.word	0x00013764

00012d04 <__ssprint_r>:
   12d04:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d08:	ldr	r3, [r2, #8]
   12d0a:	sub	sp, #12
   12d0c:	mov	r8, r2
   12d0e:	cmp	r3, #0
   12d10:	beq.n	12df8 <__ssprint_r+0xf4>
   12d12:	mov	fp, r0
   12d14:	mov.w	r9, #0
   12d18:	ldr	r6, [r2, #0]
   12d1a:	ldr	r0, [r1, #0]
   12d1c:	ldr	r3, [r1, #8]
   12d1e:	mov	r5, r1
   12d20:	mov	r4, r9
   12d22:	cmp	r4, #0
   12d24:	beq.n	12db2 <__ssprint_r+0xae>
   12d26:	cmp	r4, r3
   12d28:	mov	r7, r3
   12d2a:	mov	sl, r3
   12d2c:	bcc.n	12dbc <__ssprint_r+0xb8>
   12d2e:	ldrh	r3, [r5, #12]
   12d30:	tst.w	r3, #1152	; 0x480
   12d34:	beq.n	12d92 <__ssprint_r+0x8e>
   12d36:	ldr	r7, [r5, #20]
   12d38:	ldr	r1, [r5, #16]
   12d3a:	add.w	r7, r7, r7, lsl #1
   12d3e:	rsb	sl, r1, r0
   12d42:	add.w	r7, r7, r7, lsr #31
   12d46:	adds	r0, r4, #1
   12d48:	asrs	r7, r7, #1
   12d4a:	add	r0, sl
   12d4c:	cmp	r0, r7
   12d4e:	mov	r2, r7
   12d50:	itt	hi
   12d52:	movhi	r7, r0
   12d54:	movhi	r2, r7
   12d56:	lsls	r3, r3, #21
   12d58:	bpl.n	12dc2 <__ssprint_r+0xbe>
   12d5a:	mov	r1, r2
   12d5c:	mov	r0, fp
   12d5e:	bl	ebc0 <_malloc_r>
   12d62:	cmp	r0, #0
   12d64:	beq.n	12dd6 <__ssprint_r+0xd2>
   12d66:	mov	r2, sl
   12d68:	ldr	r1, [r5, #16]
   12d6a:	str	r0, [sp, #4]
   12d6c:	bl	c198 <memcpy>
   12d70:	ldrh	r2, [r5, #12]
   12d72:	ldr	r3, [sp, #4]
   12d74:	bic.w	r2, r2, #1152	; 0x480
   12d78:	orr.w	r2, r2, #128	; 0x80
   12d7c:	strh	r2, [r5, #12]
   12d7e:	rsb	r2, sl, r7
   12d82:	add.w	r0, r3, sl
   12d86:	str	r7, [r5, #20]
   12d88:	str	r3, [r5, #16]
   12d8a:	str	r0, [r5, #0]
   12d8c:	str	r2, [r5, #8]
   12d8e:	mov	r7, r4
   12d90:	mov	sl, r4
   12d92:	mov	r2, sl
   12d94:	mov	r1, r9
   12d96:	bl	f264 <memmove>
   12d9a:	ldr.w	r2, [r8, #8]
   12d9e:	ldr	r3, [r5, #8]
   12da0:	ldr	r0, [r5, #0]
   12da2:	subs	r3, r3, r7
   12da4:	add	r0, sl
   12da6:	subs	r4, r2, r4
   12da8:	str	r3, [r5, #8]
   12daa:	str	r0, [r5, #0]
   12dac:	str.w	r4, [r8, #8]
   12db0:	cbz	r4, 12df8 <__ssprint_r+0xf4>
   12db2:	ldr.w	r9, [r6]
   12db6:	ldr	r4, [r6, #4]
   12db8:	adds	r6, #8
   12dba:	b.n	12d22 <__ssprint_r+0x1e>
   12dbc:	mov	r7, r4
   12dbe:	mov	sl, r4
   12dc0:	b.n	12d92 <__ssprint_r+0x8e>
   12dc2:	mov	r0, fp
   12dc4:	bl	f3d0 <_realloc_r>
   12dc8:	mov	r3, r0
   12dca:	cmp	r0, #0
   12dcc:	bne.n	12d7e <__ssprint_r+0x7a>
   12dce:	ldr	r1, [r5, #16]
   12dd0:	mov	r0, fp
   12dd2:	bl	fdf0 <_free_r>
   12dd6:	movs	r3, #12
   12dd8:	str.w	r3, [fp]
   12ddc:	ldrh	r3, [r5, #12]
   12dde:	movs	r2, #0
   12de0:	orr.w	r3, r3, #64	; 0x40
   12de4:	mov.w	r0, #4294967295
   12de8:	strh	r3, [r5, #12]
   12dea:	str.w	r2, [r8, #8]
   12dee:	str.w	r2, [r8, #4]
   12df2:	add	sp, #12
   12df4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12df8:	movs	r0, #0
   12dfa:	str.w	r0, [r8, #4]
   12dfe:	add	sp, #12
   12e00:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012e04 <vtable for Stream>:
	...
   12e0c:	-.......m...q...
   12e1c:	-...-...-...

00012e28 <vtable for StreamFile<FsBaseFile, unsigned long long>>:
	...
   12e30:	E.......m.......
   12e40:	............

00012e4c <vtable for FsFile>:
	...
   12e54:	E.......m.......
   12e64:	............

00012e70 <vtable for File>:
	...
   12e78:	........m.......
   12e88:	....}.......%...
   12e98:	........}.......
   12ea8:	................
   12eb8:	............-...
   12ec8:	9...q...

00012ed0 <vtable for SDFile>:
	...
   12ed8:	........m...1...
   12ee8:	....}.......Y...
   12ef8:	M...............
   12f08:	................
   12f18:	........Q...e...
   12f28:	....1...

00012f30 <vtable for SDClass>:
	...
   12f38:	....U.......y...
   12f48:	........u...1...
   12f58:	  File    this=%
   12f68:	x, f=%x.....   S
   12f78:	DFile this=%x, r
   12f88:	efcount=%u..Stor
   12f98:	age %d %d %s ...
   12fa8:	No storage..test
   12fb8:	1.txt...This is 
   12fc8:	a test line..***
   12fd8:	* dir of sd[0] *
   12fe8:	***..Setup done.
   12ff8:	MTP_test....sdio
   13008:	....

0001300c <vtable for MTPStorage_SD>:
	...
   13014:	a...}...........
   13024:	.............0..
   13034:	)...........Y'..
   13044:	.%...........2..
   13054:	)........ ...G..
   13064:	A;..A<../mtpinde
   13074:	x.dat.../...%d: 
   13084:	%d %d %d %d %d %
   13094:	s...%d: %d %d %d
   130a4:	 %d %d..

000130ac <supported_op>:
   130ac:	................
   130bc:	................
   130cc:	........

000130d4 <propertyList>:
   130d4:	............A.D.
   130e4:	Teensy..microsof
   130f4:	t.com: 1.0;.PJRC
   13104:	.... / MTP 1.0..
   13114:	%x %d %d %d: ...
   13124:	 %x.....Event: .

00013134 <SPIClass::spi0_hardware>:
   13134:	<..@............
   13144:	.....e....'.....
   13154:	................
   13164:	................
   13174:	................
   13184:	..........-.....
   13194:	................
   131a4:	................
   131b4:	................
   131c4:	.. .

000131c8 <monthDays>:
   131c8:	............EXFA
   131d8:	T...

000131dc <vtable for SdSpiCard>:
	...
   131e4:	................
   131f4:	................
   13204:	................
   13214:	............u...
   13224:	....-...a...i...

00013234 <vtable for SdioCard>:
	...
   1323c:	1.......E.......
   1324c:	............Y...
   1325c:	A...............
   1326c:	........!...5...
   1327c:	........].......

0001328c <usb_endpoint_config_table>:
   1328c:	........

00013294 <usb_descriptor_list>:
   13294:	................
   132a4:	....i.......`...
   132b4:	................
   132c4:	................
   132d4:	h...............
	...
   132f4:	0...1...

000132fc <digital_pin_to_info_PGM>:
   132fc:	@..C@..@D..CD..@
   1330c:	...C...@0..C0..@
   1331c:	4..C4..@...C...@
   1332c:	...C...@...C...@
   1333c:	...C...@...C...@
   1334c:	...C...@...C...@
   1335c:	...C...@...C...@
   1336c:	...C...@...C...@
   1337c:	...C...@...C...@
   1338c:	...C...@...C...@
   1339c:	...C...@...C...@
   133ac:	...C...@...C...@
   133bc:	h .Ch..@...C...@
   133cc:	8..C8..@<..C<..@
   133dc:	@..C@..@H..CH..@
   133ec:	L..CL..@(..C(..@
   133fc:	,..C,..@` .C`..@
   1340c:	d .Cd..@ ..C ..@
   1341c:	$..C$..@(..C(..@
   1342c:	,..C,..@D..CD..@
   1343c:	p..Cp..@t..Ct..@
   1344c:	h..Ch..@P..CP..@
   1345c:	X..CX..@\..C\..@
   1346c:	T..CT..@ ..C ..@
   1347c:	$..C$..@...C...@
   1348c:	...C...@8..C8..@
   1349c:	4..C4..@0..C0..@
   134ac:	<..C<..@,..C,..@
   134bc:	( .C(..@, .C,..@
   134cc:	. .C...@. .C...@
   134dc:	. .C...@. .C...@
   134ec:	. .C...@. .C...@

000134fc <vtable for usb_serial_class>:
	...
   13504:	................
   13514:	........}...y...
   13524:	....

00013528 <_global_impure_ptr>:
   13528:	....C...POSIX...
   13538:	....

0001353c <_ctype_>:
   1353c:	.         ((((( 
   1354c:	                
   1355c:	 ...............
   1356c:	................
   1357c:	..AAAAAA........
   1358c:	................
   1359c:	..BBBBBB........
   135ac:	................
   135bc:	 ...............
	...
   1363c:	....

00013640 <__mprec_tens>:
   13640:	.......?......$@
   13650:	......Y@.....@.@
   13660:	.......@.....j.@
   13670:	.......A......cA
   13680:	.......A....e..A
   13690:	... _..B....vH7B
   136a0:	......mB..@..0.B
   136b0:	.......B..4&.k.C
   136c0:	...7y.AC....W4vC
   136d0:	..Ngm..C.=.`.X.C
   136e0:	@..x...DP.....KD
   136f0:	..M....D.J...-.D
   13700:	...yCx.D

00013708 <__mprec_bigtens>:
   13708:	...7y.AC.n.....F
   13718:	..?..O8M2.0.Hw.Z
   13728:	<.s..O.u

00013730 <p05.6087>:
   13730:	........}...Infi
   13740:	nity....NaN.

0001374c <zeroes.7258>:
   1374c:	0000000000000000
   1375c:	INF.inf.NAN.nan.
   1376c:	0123456789ABCDEF
   1377c:	....0123456789ab
   1378c:	cdef....(null)..

0001379c <blanks.7257>:
   1379c:	                

000137ac <_init>:
   137ac:	push	{r3, r4, r5, r6, r7, lr}
   137ae:	nop
   137b0:	pop	{r3, r4, r5, r6, r7}
   137b2:	pop	{r3}
   137b4:	mov	lr, r3
   137b6:	bx	lr

000137b8 <__init_array_start>:
   137b8:	.word	0x0000fc0d

000137bc <__frame_dummy_init_array_entry>:
   137bc:	5...q....l..

Disassembly of section .fini:

000137c8 <_fini>:
   137c8:	push	{r3, r4, r5, r6, r7, lr}
   137ca:	nop
