
.vsteensy/build/mtp-test_T36.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
0001035c l    d  .fini	00000000 .fini
00010360 l    d  .ARM.exidx	00000000 .ARM.exidx
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0970 l    d  .data	00000000 .data
1fff1438 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
000096d8 l     F .text	0000000c startup_default_early_hook
000096e4 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff1438 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff143c l       .bss	00000000 object.8610
00010350 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mtp-test.ino
00000718 l     F .text	00000074 _GLOBAL__sub_I_storage
00000000 l    df *ABS*	00000000 Storage.cpp
00000ff4 l     F .text	00000094 MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.53]
000018c0 l     F .text	0000002e MTPStorage_SD::ScanAll() [clone .part.48] [clone .constprop.52]
00000000 l    df *ABS*	00000000 MTP.cpp
000019b0 l     F .text	00000064 MTPD::write(char const*, int) [clone .part.2]
00001abc l     F .text	000000bc MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]
00002c10 l     F .text	0000002c MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.7]
0000fbe0 l     O .text	00000024 supported_op
0000fc04 l     O .text	00000014 propertyList
00000000 l    df *ABS*	00000000 SPI.cpp
00003388 l     F .text	000001f8 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]
00000000 l    df *ABS*	00000000 Time.cpp
00003738 l     F .text	00000018 refreshCache(long) [clone .part.0]
1fff14c0 l     O .bss	00000004 cacheTime
1fff14c4 l     O .bss	00000007 tm
1fff14cc l     O .bss	00000004 sysTime
1fff14d0 l     O .bss	00000001 Status
1fff14d8 l     O .bss	00000004 prevMillis
1fff0978 l     O .data	00000004 syncInterval
0000fc64 l     O .text	0000000c monthDays
1fff14dc l     O .bss	00000004 nextSyncTime
00000000 l    df *ABS*	00000000 SD.cpp
000038c0 l     F .text	00000054 _GLOBAL__sub_I_SD
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00003914 l     F .text	0000003c dbgPrint(unsigned short)
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
000043dc l     F .text	0000003c dbgPrint(unsigned short)
00004418 l     F .text	0000002c FsCache::sync() [clone .part.2]
00000000 l    df *ABS*	00000000 upcase.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00004a70 l     F .text	0000003c dbgPrint(unsigned short)
00000000 l    df *ABS*	00000000 FatFile.cpp
00005660 l     F .text	0000003c dbgPrint(unsigned short)
000057e0 l     F .text	000000a4 FatFile::sync() [clone .part.38]
00000000 l    df *ABS*	00000000 FatPartition.cpp
00006680 l     F .text	0000003c dbgPrint(unsigned short)
000066bc l     F .text	00000058 FatCache::sync() [clone .part.8]
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
00006c0c l     F .text	00000028 lfnGetChar(DirLfn_t*, unsigned char)
00006c34 l     F .text	0000003c dbgPrint(unsigned short)
00000000 l    df *ABS*	00000000 FatFileSFN.cpp
00007760 l     F .text	0000003c dbgPrint(unsigned short)
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
00007b48 l     F .text	00000018 SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]
00007b60 l     F .text	00000022 SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
00008144 l     F .text	00000030 sdIrs()
00008174 l     F .text	00000018 isBusyCommandComplete()
0000818c l     F .text	00000010 isBusyCommandInhibit()
0000819c l     F .text	0000000c isBusyDMA()
000081a8 l     F .text	00000014 isBusyFifoRead()
000081bc l     F .text	00000014 isBusyFifoWrite()
000081d0 l     F .text	00000018 isBusyTransferComplete()
000081e8 l     F .text	000000cc setSdclk(unsigned long)
00008318 l     F .text	00000028 waitTimeout(bool (*)())
00008340 l     F .text	0000004c yieldTimeout(bool (*)())
000083bc l     F .text	0000005c cardCommand(unsigned long, unsigned long)
00008438 l     F .text	00000064 readReg16(unsigned long, void*)
0000849c l     F .text	0000002c isBusyCMD13()
000084e4 l     F .text	00000020 waitDmaStatus() [clone .part.6]
00008504 l     F .text	000000b4 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
000086f8 l     F .text	00000078 transferStop()
00008aa8 l     F .text	000000ac cardCMD6(unsigned long, unsigned char*)
1fff1994 l     O .bss	00000001 m_version2
1fff1998 l     O .bss	00000010 m_cid
1fff19a8 l     O .bss	00000004 m_busyFcn
1fff19ac l     O .bss	00000001 m_highCapacity
1fff19b0 l     O .bss	00000004 m_ocr
1fff19b4 l     O .bss	00000004 m_rca
1fff19b8 l     O .bss	00000004 m_irqstat
1fff097c l     O .data	00000001 m_errorCode
1fff19bc l     O .bss	00000001 m_initDone
1fff19c0 l     O .bss	00000010 m_csd
1fff19d0 l     O .bss	00000001 m_dmaBusy
1fff19d4 l     O .bss	00000004 m_sdClkKhz
1fff19d8 l     O .bss	00000004 m_errorLine
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 usb1_mtp.c
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
1fff19dd l     O .bss	00000001 tx_noautoflush
1fff19e0 l     O .bss	00000004 tx_packet
1fff19e4 l     O .bss	00000001 transmit_previous_timeout
1fff19e8 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 pins_teensy.c
00009718 l     F .text	0000004c digitalWrite.part.1
00009764 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0984 l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff19f4 l     O .bss	00000004 ep0_tx_ptr
1fff19f8 l     O .bss	00000018 rx_last
1fff1a10 l     O .bss	00000002 ep0_tx_len
1fff1a14 l     O .bss	00000040 ep0_rx0_buf
1fff1a54 l     O .bss	00000018 rx_first
1fff1a6c l     O .bss	00000001 ep0_tx_data_toggle
1fff1a70 l     O .bss	00000040 ep0_rx1_buf
1fff1ab0 l     O .bss	00000018 tx_first
1fff0000 l     O .usbdescriptortable	000000e0 table
1fff1ac8 l     O .bss	00000018 tx_last
1fff1ae0 l     O .bss	00000008 setup
1fff1ae8 l     O .bss	00000001 ep0_tx_bdt_bank
1fff1aec l     O .bss	00000008 reply_buffer
1fff1af8 l     O .bss	00000006 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff1afe l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 serialEvent.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 analog.c
1fff1b2d l     O .bss	00000001 calibrating
1fff099d l     O .data	00000001 analog_config_bits
1fff1b2e l     O .bss	00000001 analog_reference_internal
1fff099e l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 usb_desc.c
1fff09a0 l     O .data	00000012 device_descriptor
1fff09cc l     O .data	00000069 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000c90c l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 mprec.c
000102c0 l     O .text	0000000c p05.6087
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 dtoa.c
0000d2c0 l     F .text	00000128 quorem
00000000 l    df *ABS*	00000000 vfprintf.c
000102e0 l     O .text	00000010 zeroes.7258
00010330 l     O .text	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 impure.c
1fff0a90 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.12/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.12/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff1438 l       .bss	00000000 __bss_start__
1fff1b80 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
000096d0  w    F .text	00000006 adc0_isr
00000fc0 g     F .text	00000032 MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)
0000b4ec g     F .text	0000002c .hidden __aeabi_dcmpun
0000942c g     F .text	0000001c usb_serial_available
0000b4b0 g     F .text	00000012 .hidden __aeabi_dcmple
0000c564 g     F .text	000000ba strcpy
0000b3ec g     F .text	0000007a .hidden __cmpdf2
000088b4 g     F .text	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000a804  w    F .text	000000ec yield
00006434 g     F .text	0000024c FatFile::write(void const*, unsigned int)
0000b3ec g     F .text	0000007a .hidden __eqdf2
00007abc  w    F .text	00000002 SdSpiCard::~SdSpiCard()
00003e48 g     F .text	00000430 ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)
1fff1454 g     O .bss	00000058 storage
1fff09b4 g     O .data	00000018 usb_string_manufacturer_name_default
0000af5c g     F .text	0000005a .hidden __floatdidf
00009688  w    F .text	00000048 hard_fault_isr
000096d0  w    F .text	00000006 dma_ch6_isr
1fff198c g     O .bss	00000004 FsDateTime::callback
0000a99c g     F .text	00000020 Print::println()
000096d0  w    F .text	00000006 uart0_lon_isr
00003d2c g     F .text	0000011c ExFatFile::seekSet(unsigned long long)
00009b68 g     F .text	00000108 usb_rx_memory
00007a90  w    F .text	00000004 SdSpiCard::errorCode() const
000004a8  w    F .text	0000000c File::flush()
000096d0  w    F .text	00000006 dma_ch8_isr
0000c11c g     F .text	00000002 __malloc_unlock
00000894  w    F .text	000000c0 SDFile::openNextFile(unsigned char)
1fff1990 g     O .bss	00000004 FsVolume::m_cwv
000058f0 g     F .text	00000104 FatFile::open(FatFile*, char const*, int)
0000aa94 g     F .text	000000e0 analog_init
00009c70 g     F .text	00000084 usb_tx
000096d0  w    F .text	00000006 portcd_isr
0000c7bc g     F .text	0000004a _vdprintf_r
0000fb00  w    O .text	0000005c vtable for SDFile
0000bfb4 g     F .text	000000c6 memmove
0000cbdc g     F .text	0000004c _Balloc
000096d0  w    F .text	00000006 can1_rx_warn_isr
00010368 g       .ARM.exidx	00000000 __exidx_end
000096d0  w    F .text	00000006 dma_error_isr
0000698c g     F .text	00000060 FatPartition::freeChain(unsigned long)
1fff1b10 g     O .bss	00000001 EventResponder::runningFromYield
000091d0 g     F .text	0000001a SdSpiArduinoDriver::receive()
00007c80 g     F .text	0000007c SdSpiCard::cardCommand(unsigned char, unsigned long)
000096d0  w    F .text	00000006 i2c0_isr
0000146c g     F .text	000000d4 MTPStorage_SD::move(unsigned long, unsigned long)
0000a970 g     F .text	0000002c Print::write(unsigned char const*, unsigned int)
0000b3dc g     F .text	0000008a .hidden __gtdf2
00006c70 g     F .text	00000024 FatFile::lfnChecksum(unsigned char*)
0000b88c g     F .text	0000000c __errno
00000b84  w    F .text	00000026 SDFile::isDirectory()
0000176c g     F .text	00000154 MTPStorage_SD::ScanDir(unsigned long)
000096d0  w    F .text	00000006 portd_isr
000096d0  w    F .text	00000006 enet_error_isr
000005c0  w    F .text	00000028 File::~File()
1fff1b00 g     O .bss	00000004 EventResponder::firstInterrupt
00001dcc g     F .text	0000008e MTPD::GetObjectHandles(unsigned long, unsigned long)
00007ac0  w    F .text	0000000e SdSpiCard::~SdSpiCard()
00007820 g     F .text	00000078 FsBaseFile::FsBaseFile(FsBaseFile const&)
000096d0  w    F .text	00000006 tpm1_isr
000049a0 g     F .text	0000003c ExFatPartition::rootLength()
00007a94  w    F .text	00000004 SdSpiCard::errorData() const
0000a960  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
0000fe24 g     O .text	00000200 digital_pin_to_info_PGM
1fff1b7c g     O .bss	00000004 errno
00007cfc g     F .text	00000054 SdSpiCard::readOCR(unsigned long*)
000091ec g     F .text	00000020 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
0000734c g     F .text	00000412 FatFile::open(FatFile*, fname_t*, int)
000047ac g     F .text	0000004a ExFatPartition::fatGet(unsigned long, unsigned long*)
00010368 g       .ARM.exidx	00000000 _etext
1fff1438 g       .bss	00000000 _sbss
0000b478 g     F .text	00000010 .hidden __aeabi_cdcmple
000082c0 g     F .text	0000000c SdioCard::errorData() const
000089c4 g     F .text	000000b4 SdioCard::writeSector(unsigned long, unsigned char const*)
000096d0  w    F .text	00000006 porte_isr
0000070c g     F .text	0000000c loop
000096d0  w    F .text	00000006 portb_isr
000096d0  w    F .text	00000006 spi1_isr
000022b0 g     F .text	0000012c MTPD::GetStorageInfo(unsigned long)
000096d0  w    F .text	00000006 uart3_status_isr
00003a54 g     F .text	000000c4 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
000096d0  w    F .text	00000006 mcm_isr
00008ee8 g     F .text	000000cc SdioCard::readData(unsigned char*)
000018f0 g     F .text	00000062 MTPStorage_SD::StartGetObjectHandles(unsigned long)
00007bc4 g     F .text	00000080 SdSpiCard::readData(unsigned char*, unsigned int)
1fff1b04 g     O .bss	00000004 EventResponder::lastInterrupt
000096d0  w    F .text	00000006 uart1_status_isr
00000c40  w    F .text	00000092 SDFile::seek(unsigned long, int)
00007898 g     F .text	00000028 FsBaseFile::close()
00009280 g     F .text	00000134 memcpy
000096d0  w    F .text	00000006 randnum_isr
0000b468 g     F .text	00000020 .hidden __aeabi_cdrcmple
0000048c  w    F .text	0000000c File::available()
00000b18 g     F .text	0000001c MTPStorage_SD::freeClusters()
00001954 g     F .text	00000044 Storage_init()
00004890 g     F .text	0000009c ExFatPartition::freeChain(unsigned long)
00001540 g     F .text	00000110 MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)
00005be4 g     F .text	0000002a FatFile::peek()
0000e220 g     F .text	000016e4 _svfprintf_r
0000aeec g     F .text	00000022 .hidden __floatsidf
00000880  w    F .text	00000014 SDFile::whoami()
1fff14bc  w    O .bss	00000001 SDFile::name()::zeroterm
1fff19f0 g     O .bss	00000004 systick_millis_count
0000b3e4 g     F .text	00000082 .hidden __ltdf2
00000954 g     F .text	00000020 MTPStorage_SD::clusterCount()
00005188 g     F .text	000000d8 ExFatFile::rename(ExFatFile*, char const*)
00009688  w    F .text	00000048 bus_fault_isr
00002dd8 g     F .text	000005b0 MTPD::loop()
000096d0  w    F .text	00000006 watchdog_isr
0000b568 g     F .text	00000000 .hidden __aeabi_uldivmod
000096d0  w    F .text	00000006 i2c1_isr
1fff1af4 g     O .bss	00000001 usb_configuration
000096d0  w    F .text	00000006 dma_ch11_isr
000038b4  w    F .text	00000006 SdCardInterface::status()
00008a78 g     F .text	00000030 SdioCard::syncDevice()
00008774 g     F .text	000000cc SdioCard::writeData(unsigned char const*)
00000000  w      *UND*	00000000 __fini_array_end
00000998  w    F .text	00000058 StreamFile<FsBaseFile, unsigned long long>::available()
00005c10 g     F .text	0000004e FatFile::readDirCache(bool)
000004b4  w    F .text	0000000c File::seek(unsigned long, int)
000096d0  w    F .text	00000006 i2c2_isr
1fff09b4  w    O .data	00000018 usb_string_manufacturer_name
1fff1b70 g     O .bss	0000000c usb_rx_byte_count_data
000096d0  w    F .text	00000006 pit1_isr
1fff0a38 g     O .data	00000008 usb_string_mtp
0000b8e8 g     F .text	00000010 malloc
000096d0  w    F .text	00000006 dma_ch4_isr
000096d0  w    F .text	00000006 software_isr
0000fadc  w    O .text	00000024 vtable for FsFile
000096d0  w    F .text	00000006 dma_ch7_isr
000101d0 g     O .text	000000c8 __mprec_tens
0000a73c g     F .text	000000c8 usb_init
00007aa8  w    F .text	00000004 SdSpiCard::type() const
000096d0  w    F .text	00000006 lptmr_isr
1fff1b38 g     O .bss	00000004 __malloc_top_pad
000097ec g     F .text	00000024 rtc_set
00007ad0 g     F .text	00000076 SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00005260 g     F .text	00000120 ExFatFile::truncate()
1fff0970 g     O .data	00000000 .hidden __dso_handle
0000aecc g     F .text	0000001e .hidden __aeabi_ui2d
0000cbc0 g     F .text	0000001c _localeconv_r
000097dc g     F .text	00000010 attachInterruptVector
00009188 g     F .text	00000048 SdSpiArduinoDriver::deactivate()
0000cd58 g     F .text	00000012 __i2b
1fff0970 g       .data	00000000 _sdata
0000927c g     F .text	00000002 usb_mtp_configure
000004e4  w    F .text	0000000c File::operator bool()
00006790 g     F .text	0000000e FatCache::sync()
0000b598 g     F .text	000002e2 .hidden __udivmoddi4
00002114 g     F .text	0000019c MTPD::getObjectPropValue(unsigned long, unsigned long)
0000ac48 g     F .text	00000000 .hidden __aeabi_drsub
0000569c g     F .text	00000042 FatFile::addCluster()
0000c500 g     F .text	00000024 _sbrk_r
00007d50 g     F .text	0000004a SdSpiCard::readRegister(unsigned char, void*)
0000839c g     F .text	00000020 SdioCard::type() const
00000480  w    F .text	0000000c File::write(void const*, unsigned int)
000001d0 g     F .text	000001f0 ResetHandler
000093b4 g     F .text	00000048 usb_serial_getchar
000096d0  w    F .text	00000006 can1_bus_off_isr
000096d0  w    F .text	00000006 ftm2_isr
00000a88  w    F .text	0000004c SDFile::name()
1fff1b64 g     O .bss	00000008 usb_cdc_line_coding
00009810 g     F .text	0000000a digitalWrite
1fff1b08 g     O .bss	00000004 EventResponder::lastYield
000096d0  w    F .text	00000006 uart5_status_isr
000096d0  w    F .text	00000006 lpuart0_status_isr
00003a24 g     F .text	0000002e ExFatFile::openRoot(ExFatVolume*)
00010050 g     O .text	00000006 usb_endpoint_config_table
000096d0  w    F .text	00000006 dma_ch9_isr
00000a08  w    F .text	00000038 StreamFile<FsBaseFile, unsigned long long>::read()
000096d0  w    F .text	00000006 pit2_isr
0000b49c g     F .text	00000012 .hidden __aeabi_dcmplt
1fff1b34 g     O .bss	00000004 __malloc_max_sbrked_mem
00000b44  w    F .text	00000010 SDFile::position()
0000981c g     F .text	0000000a pinMode
0000804c g     F .text	00000042 SdSpiCard::writeStop()
00001650 g     F .text	00000036 MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)
00009ab4 g     F .text	0000004c usb_free
000096d0  w    F .text	00000006 i2c3_isr
0000af10 g     F .text	0000003a .hidden __extendsfdf2
0000b20c g     F .text	000001d0 .hidden __aeabi_ddiv
0000ac54 g     F .text	00000276 .hidden __adddf3
000020a8 g     F .text	0000006c MTPD::getObjectPropsSupported(unsigned long)
00001a14 g     F .text	000000a8 MTPD::writestring(char const*)
00008110 g     F .text	00000032 SdSpiCard::writeData(unsigned char const*)
00000498  w    F .text	00000010 File::peek()
000069ec g     F .text	000000d6 FatPartition::freeClusterCount()
00010360 g       .ARM.exidx	00000000 __exidx_start
0000afb8 g     F .text	00000254 .hidden __aeabi_dmul
00007f44 g     F .text	00000050 SdSpiCard::writeStart(unsigned long)
000096d0  w    F .text	00000006 pit0_isr
1fff1b0c g     O .bss	00000004 EventResponder::firstYield
000100b8 g     O .text	00000004 _global_impure_ptr
000007c0 g     F .text	0000000c MTPStorage_SD::write(char const*, unsigned long)
000096d0  w    F .text	00000006 can1_error_isr
00000a54  w    F .text	00000034 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
0000c120 g     F .text	000003de _realloc_r
00000b54  w    F .text	00000018 SDFile::read(void*, unsigned int)
0000b898 g     F .text	00000050 __libc_init_array
1fff1b80 g       .bss	00000000 __bss_end
00000ad4  w    F .text	00000044 SDFile::rewindDirectory()
000096d0  w    F .text	00000006 can0_wakeup_isr
00004390 g     F .text	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
000082cc g     F .text	0000001c SdioCard::readCID(CID*)
00004ef8 g     F .text	00000114 ExFatFile::addDirCluster()
000096d0  w    F .text	00000006 flash_cmd_isr
000080bc g     F .text	00000052 SdSpiCard::writeData(unsigned char, unsigned char const*)
00001128 g     F .text	0000003a MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*)
00010298 g     O .text	00000028 __mprec_bigtens
0000a948  w    F .text	00000004 usb_serial_class::clear()
0000aecc g     F .text	0000001e .hidden __floatunsidf
000096d0  w    F .text	00000006 uart2_status_isr
000096e8 g     F .text	0000002c _sbrk
0000cfec g     F .text	00000042 __mcmp
0000078c  w    F .text	00000012 SDFile::operator bool()
1fff0980 g     O .data	00000004 __brkval
1fff19ec g     O .bss	00000001 usb_cdc_line_rtsdtr
00009640 g     F .text	00000048 usb_serial_flush_callback
00010340 g     F .text	00000000 _init
000057b4 g     F .text	0000002a FatFile::cacheDirEntry(unsigned char)
000096d0  w    F .text	00000006 svcall_isr
00000864  w    F .text	0000001c SDFile::close()
000096d0  w    F .text	00000006 dma_ch15_isr
00000d38  w    F .text	0000005c SDFile::~SDFile()
00003850 g     F .text	00000020 day()
000096d0  w    F .text	00000006 uart1_error_isr
0000c92c g     F .text	00000028 __libc_fini_array
000096d0  w    F .text	00000006 usbhs_phy_isr
1fff1b80 g       .bss	00000000 _ebss
0000893c g     F .text	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00001b78 g     F .text	00000214 MTPD::WriteDescriptor()
1fff0974 g     O .data	00000004 propertyListNum
00000a40  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
00006714 g     F .text	0000007a FatCache::read(unsigned long, unsigned char)
0000ccbc g     F .text	00000040 __hi0bits
0000b518 g     F .text	0000004e .hidden __fixdfsi
0000500c g     F .text	00000072 ExFatFile::mkdir(ExFatFile*, ExName_t*)
000096d0 g     F .text	00000006 unused_isr
00001d8c g     F .text	0000003e MTPD::WriteStorageIDs()
000096d0  w    F .text	00000006 spi0_isr
000096d0  w    F .text	00000006 dma_ch3_isr
000038bc  w    F .text	00000002 SDClass::~SDClass()
000005c0  w    F .text	00000028 File::~File()
00003890 g     F .text	00000024 year()
0000aa90 g     F .text	00000004 operator delete(void*, unsigned int)
000096d0  w    F .text	00000006 flash_error_isr
0000ac54 g     F .text	00000276 .hidden __aeabi_dadd
0000b3e4 g     F .text	00000082 .hidden __ledf2
0000c524 g     F .text	0000003e strcat
000096d0  w    F .text	00000006 uart5_error_isr
000096d0  w    F .text	00000006 rtc_seconds_isr
000096d0  w    F .text	00000006 pdb_isr
0000ce9c g     F .text	000000a0 __pow5mult
00005d1c g     F .text	00000068 FatFile::rmdir()
0000af4c g     F .text	0000006a .hidden __aeabi_ul2d
00009688  w    F .text	00000048 usage_fault_isr
000096d0  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
000068cc g     F .text	000000c0 FatPartition::allocateCluster(unsigned long, unsigned long*)
000096d0  w    F .text	00000006 dma_ch14_isr
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1b6c g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000a938 g     F .text	00000010 systick_isr
000096d0  w    F .text	00000006 rtc_alarm_isr
00000504  w    F .text	0000000c File::isDirectory()
0000779c g     F .text	00000084 FatFile::getSFN(char*)
00007e94 g     F .text	00000076 SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
000096d0  w    F .text	00000006 dma_ch2_isr
1fff098c g     O .data	00000010 Serial
000096d0  w    F .text	00000006 ftm1_isr
0000a968  w    F .text	00000006 usb_serial_class::write(unsigned char)
00007940 g     F .text	0000005e FsBaseFile::openNext(FsBaseFile*, int)
000096d8  w    F .text	0000000c startup_early_hook
000096d0  w    F .text	00000006 dma_ch13_isr
00004aac g     F .text	000000c6 ExFatFile::addCluster()
0000fa04  w    O .text	0000005c vtable for File
000096d0  w    F .text	00000006 uart2_error_isr
000093fc g     F .text	00000030 usb_serial_peekchar
0000b4d8 g     F .text	00000012 .hidden __aeabi_dcmpgt
00000eec g     F .text	00000002 mtp_yield()
0000beb0 g     F .text	00000000 memchr
00006840 g     F .text	0000008a FatPartition::fatPut(unsigned long, unsigned long)
1fff0a74 g     O .data	00000016 usb_string_serial_number_default
00009688 g     F .text	00000048 fault_isr
0000c9f0 g     F .text	000001d0 _free_r
00008770 g     F .text	00000004 SdioCard::readStop()
00004450 g     F .text	0000008c FsCache::get(unsigned long, unsigned char)
0000b4c4 g     F .text	00000012 .hidden __aeabi_dcmpge
000096d0  w    F .text	00000006 usb_charge_isr
0000a958  w    F .text	00000004 usb_serial_class::flush()
000096d0  w    F .text	00000006 cmt_isr
0000ac50 g     F .text	0000027a .hidden __aeabi_dsub
00006ac4 g     F .text	00000146 FatPartition::init(BlockDeviceInterface*, unsigned char)
000096d0  w    F .text	00000006 usbhs_isr
00005f6c g     F .text	00000188 FatFile::mkdir(FatFile*, fname_t*)
1fff1434 g     O .data	00000004 __malloc_sbrk_base
0000a950  w    F .text	00000004 usb_serial_class::read()
000096d0  w    F .text	00000006 ftm3_isr
00000548  w    F .text	0000000c File::rewindDirectory()
000096d0  w    F .text	00000006 tsi0_isr
00007064 g     F .text	000001b2 FatFile::remove()
0000af4c g     F .text	0000006a .hidden __floatundidf
00009714  w    F .text	00000002 __cxa_pure_virtual
0000cf3c g     F .text	000000ae __lshift
000060f4 g     F .text	000000fc FatFile::mkdir(FatFile*, char const*, bool)
000096d0  w    F .text	00000006 spi2_isr
00004a18 g     F .text	00000058 exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)
000010d8 g     F .text	00000050 MTPStorage_SD::GetNextObjectHandle()
0000f904 g     F .text	00000100 __ssprint_r
0000d200 g     F .text	0000005e _vasnprintf_r
0000aa88  w    F .text	00000002 serialEvent()
1fff1a6d g     O .bss	00000001 usb_reboot_timer
0000c868 g     F .text	000000a4 __register_exitproc
00004278 g     F .text	00000116 ExFatFile::open(ExFatFile*, char const*, int)
0000c71c g     F .text	000000a0 strncmp
00005080 g     F .text	00000108 ExFatFile::mkdir(ExFatFile*, char const*, bool)
00009448 g     F .text	00000038 usb_serial_flush_input
0000492c g     F .text	00000072 ExFatPartition::freeClusterCount()
000011bc g     F .text	0000006c MTPStorage_SD::ConstructFilename(int, char*, int)
0000cd6c g     F .text	00000130 __multiply
00009588 g     F .text	00000018 usb_serial_putchar
00000022 g       *ABS*	00000000 _teensy_model_identifier
1fff1b3c g     O .bss	00000028 __malloc_current_mallinfo
0000d144 g     F .text	000000ba __d2b
1fff1b14 g     O .bss	00000018 HardwareSerial::s_serials_with_serial_events
000096d0  w    F .text	00000006 can0_bus_off_isr
0000838c  w    F .text	0000000e SdioCard::~SdioCard()
00003964 g     F .text	000000be ExFatFile::getName(char*, unsigned int)
000007a0 g     F .text	00000004 MTPStorage_SD::readonly()
1fff1ae9 g     O .bss	00000001 usb_rx_memory_needed
00008840 g     F .text	00000074 SdioCard::writeStart(unsigned long)
00009cf4 g     F .text	00000a48 usb_isr
0000b880 g     F .text	0000000c __cxa_atexit
00003b18 g     F .text	000001e4 ExFatFile::read(void*, unsigned int)
0000aeec g     F .text	00000022 .hidden __aeabi_i2d
000009f0  w    F .text	00000018 SDFile::peek()
000044dc g     F .text	0000000e FsCache::sync()
0000bf50 g     F .text	00000062 memcmp
00010024  w    O .text	00000028 vtable for usb_serial_class
0000920c g     F .text	00000016 SdSpiArduinoDriver::send(unsigned char)
000096d0  w    F .text	00000006 uart3_error_isr
00002ae0 g     F .text	0000007c MTPD::GetObject(unsigned long)
00009278 g     F .text	00000004 sdCsWrite(unsigned char, bool)
0000b87c  w    F .text	00000002 .hidden __aeabi_ldiv0
00004c9c g     F .text	00000072 ExFatFile::rmdir()
000096d0  w    F .text	00000006 porta_isr
000023dc g     F .text	000006e6 MTPD::getObjectPropDesc(unsigned long, unsigned long)
0000b20c g     F .text	000001d0 .hidden __divdf3
1fff03d0 g     O .usbbuffers	000005a0 usb_buffer_memory
00007dac g     F .text	00000098 SdSpiCard::sectorCount()
000096d0  w    F .text	00000006 low_voltage_isr
1fff1028 g     O .data	00000408 __malloc_av_
000096d0  w    F .text	00000006 can0_error_isr
00009908 g     F .text	0000016c _init_Teensyduino_internal_
00000bac  w    F .text	00000014 SDFile::flush()
0000afb8 g     F .text	00000254 .hidden __muldf3
000095e8 g     F .text	00000058 usb_serial_flush_output
000096d0  w    F .text	00000006 dma_ch12_isr
0000c118 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
00006df8 g     F .text	0000026c FatFile::parsePathName(char const*, fname_t*, char const**)
000096d0  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
00009224 g     F .text	00000052 SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
0000d260 g     F .text	0000005e _calloc_r
000096d0  w    F .text	00000006 pit3_isr
00002b5c g     F .text	0000006e MTPD::read(char*, unsigned long)
1fff14d4 g     O .bss	00000004 getTimePtr
1fff0988 g     O .data	00000001 yield_active_check_flags
000096d0  w    F .text	00000006 enet_rx_isr
00004e90 g     F .text	00000066 ExFatFile::sync()
000061f0 g     F .text	00000238 FatFile::rename(FatFile*, char const*)
000084c8 g     F .text	0000001c SdioCard::isBusy()
000096d0  w    F .text	00000006 portc_isr
00007f0c g     F .text	00000038 SdSpiCard::readStop()
0000c07c g     F .text	0000009a memset
0000aa78 g     F .text	00000010 main
1fff1b30 g     O .bss	00000004 __malloc_max_total_mem
000044ec g     F .text	000000b4 ExFatPartition::bitmapFind(unsigned long, unsigned long)
00003750 g     F .text	000000a0 now()
00005380 g     F .text	000002e0 ExFatFile::write(void const*, unsigned int)
0000fb5c g     O .text	00000050 vtable for MTPStorage_SD
00002c3c g     F .text	00000126 MTPD::SendObjectInfo(unsigned long, unsigned long)
00009688  w    F .text	00000048 memmanage_fault_isr
00000be8  w    F .text	00000058 SDFile::available()
000004d8  w    F .text	0000000c File::close()
0000ab74 g     F .text	0000007c usb_init_serialnumber
0001035c g       .text	00000000 __init_array_end
0000d3e8 g     F .text	00000e34 _dtoa_r
0000b908 g     F .text	00000570 _malloc_r
1fff1b2c g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
000096d0  w    F .text	00000006 debugmonitor_isr
0000c820 g     F .text	0000001a __ascii_wctomb
00007820 g     F .text	00000078 FsBaseFile::FsBaseFile(FsBaseFile const&)
0000af5c g     F .text	0000005a .hidden __aeabi_l2d
00003580 g     F .text	00000008 SPIClass::transfer(void const*, void*, unsigned int)
00000031 g       *ABS*	00000000 __rtc_localtime
00009828 g     F .text	00000044 micros
00000000  w      *UND*	00000000 __libc_fini
00000510  w    F .text	00000038 File::openNextFile(unsigned char)
000096d0  w    F .text	00000006 cmp1_isr
000096d0  w    F .text	00000006 ftm0_isr
00004d10 g     F .text	00000180 ExFatFile::syncDir()
0000c954 g     F .text	0000009c _malloc_trim_r
1fff0a70 g     O .data	00000004 string0
00009480 g     F .text	00000108 usb_serial_write
000096e4  w    F .text	00000002 startup_late_hook
0000a954  w    F .text	00000004 usb_serial_class::available()
1fff099c g     O .data	00000001 _serialEvent_default
00002bcc g     F .text	00000044 MTPD::readstring(char*)
00006428 g     F .text	0000000c FatFile::sync()
1fff0a40  w    O .data	0000002e usb_string_product_name
0000986c g     F .text	0000009c delay
0000b3ec g     F .text	0000007a .hidden __nedf2
000096d0  w    F .text	00000006 tpm0_isr
000007a8 g     F .text	00000018 MTPStorage_SD::CloseIndex()
0001035c g     F .fini	00000000 _fini
00001998 g     F .text	00000018 MTPD::get_buffer()
000004f0  w    F .text	00000014 File::name()
00003870 g     F .text	00000020 month()
00007e44 g     F .text	00000050 SdSpiCard::readStart(unsigned long)
000043a0 g     F .text	0000003a ExFatFile::openNext(ExFatFile*, int)
0000a9cc g     F .text	0000001c Print::printf(char const*, ...)
000096d0  w    F .text	00000006 i2s0_rx_isr
000096d0  w    F .text	00000006 uart4_error_isr
0000aa68 g     F .text	00000010 Print::print(long)
00005884 g     F .text	0000001e FatFile::close()
000004c0  w    F .text	0000000c File::position()
00000cd4  w    F .text	00000064 SDFile::~SDFile()
000067a0 g     F .text	0000000c FatPartition::clusterStartSector(unsigned long) const
0000c920 g     F .text	0000000c atexit
00008314  w    F .text	00000002 SdioCard::~SdioCard()
00000b6c  w    F .text	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
00000580  w    F .text	00000018 File::write(unsigned char)
0000c83c g     F .text	0000002c _write_r
1fff14e0 g     O .bss	000004ac SD
00008624 g     F .text	000000d4 SdioCard::erase(unsigned long, unsigned long)
000096d0  w    F .text	00000006 can0_message_isr
1fff0eb8 g     O .data	00000004 _impure_ptr
0000fa94  w    O .text	00000024 vtable for Stream
000096d0  w    F .text	00000006 can1_message_isr
00003cfc g     F .text	0000002e ExFatFile::peek()
0000fab8  w    O .text	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
000096d0  w    F .text	00000006 nmi_isr
00007218 g     F .text	00000134 FatFile::lfnUniqueSfn(fname_t*)
00000bd4  w    F .text	00000014 SDFile::write(void const*, unsigned int)
00007a64 g     F .text	00000028 FsVolume::open(char const*, int)
000082b4 g     F .text	0000000c SdioCard::errorCode() const
000059f4 g     F .text	0000000e FatFile::open(FatVolume*, char const*, int)
00000bc0  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
0001034c g       .text	00000000 __preinit_array_end
000007cc g     F .text	00000098 dateTime(unsigned short*, unsigned short*, unsigned char*)
00007abc  w    F .text	00000002 SdSpiCard::~SdSpiCard()
000096d0  w    F .text	00000006 sdhc_isr
00003810 g     F .text	00000020 minute()
000045a0 g     F .text	00000110 ExFatPartition::init(BlockDeviceInterface*, unsigned char)
00004778 g     F .text	00000034 ExFatPartition::dirCache(DirPos_t*, unsigned char)
00007f94 g     F .text	000000b8 SdSpiCard::erase(unsigned long, unsigned long)
00001228 g     F .text	00000188 MTPStorage_SD::DeleteObject(unsigned long)
0000be78 g     F .text	0000002a __ascii_mbtowc
00007b84 g     F .text	0000003e SdSpiCard::isBusy()
0000fd74 g     O .text	00000058 vtable for SdSpiCard
00007da4  w    F .text	00000008 SdSpiCard::readCID(CID*)
00000680 g     F .text	0000008c setup
00010058 g     O .text	00000060 usb_descriptor_list
00009b00 g     F .text	0000003c usb_rx
00008418 g     F .text	00000020 SdioCard::status()
00000d94 g     F .text	00000158 MTPStorage_SD::ResetIndex()
000096d0  w    F .text	00000006 dma_ch10_isr
00000470  w    F .text	00000002 Print::flush()
000096d0  w    F .text	00000006 uart0_error_isr
000004cc  w    F .text	0000000c File::size()
00009a74 g     F .text	00000040 usb_malloc
00005a04 g     F .text	000001de FatFile::read(void*, unsigned int)
000096d0  w    F .text	00000006 i2s0_isr
000058a4 g     F .text	0000004a FatFile::openRoot(FatVolume*)
20030000 g       .bss	00000000 _estack
00007a8c g     F .text	00000004 operator new(unsigned int, unsigned long*)
00007d9c  w    F .text	00000008 SdSpiCard::readCSD(csd_t*)
00000554  w    F .text	0000002c File::read()
000095a0 g     F .text	00000048 usb_serial_write_buffer_free
00007c44 g     F .text	0000003c SdSpiCard::waitNotBusy(unsigned short)
000096d0  w    F .text	00000006 enet_timer_isr
0000b488 g     F .text	00000012 .hidden __aeabi_dcmpeq
000005e8  w    F .text	00000030 File::~File()
0000a9bc  w    F .text	0000000e _write
1fff1438 g       .data	00000000 _edata
00004840 g     F .text	0000004e ExFatPartition::fatPut(unsigned long, unsigned long)
00001e5c g     F .text	0000024c MTPD::GetObjectInfo(unsigned long)
00008314  w    F .text	00000002 SdioCard::~SdioCard()
000096d0  w    F .text	00000006 i2s0_tx_isr
000096d0  w    F .text	00000006 adc1_isr
00008090 g     F .text	0000002c SdSpiCard::syncDevice()
000056e0 g     F .text	000000d4 FatFile::addDirCluster()
00000474  w    F .text	0000000c File::read(void*, unsigned int)
0000a95c  w    F .text	00000004 usb_serial_class::availableForWrite()
000096d0  w    F .text	00000006 cmp0_isr
0000abf0 g     F .text	0000004c ultoa
000038bc  w    F .text	00000002 SDClass::~SDClass()
00003830 g     F .text	00000020 second()
000078c0 g     F .text	00000080 FsBaseFile::open(FsVolume*, char const*, int)
00001088 g     F .text	0000004e MTPStorage_SD::ReadIndexRecord(unsigned long)
0000aa8c g     F .text	00000004 operator new(unsigned int)
0000a8f0 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff1430 g     O .data	00000004 __malloc_trim_threshold
0000a94c  w    F .text	00000004 usb_serial_class::peek()
00000618  w    F .text	00000068 MTPStorage_SD::~MTPStorage_SD()
1fff14ac g     O .bss	00000010 mtpd
0000d030 g     F .text	00000114 __mdiff
00008304 g     F .text	00000010 SdioCard::readOCR(unsigned long*)
0000b518 g     F .text	0000004e .hidden __aeabi_d2iz
000047f8 g     F .text	00000048 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
1fff19dc g     O .bss	00000001 usb_cdc_transmit_flush_timer
000096d0  w    F .text	00000006 pit_isr
000037f0 g     F .text	00000020 hour()
00008770 g     F .text	00000004 SdioCard::writeStop()
00007aac  w    F .text	00000010 SdSpiCard::writeSector(unsigned long, unsigned char const*)
00003950 g     F .text	00000014 ExFatFile::close()
000100cc g     O .text	00000101 _ctype_
000096d0  w    F .text	00000006 dac0_isr
00007a98  w    F .text	00000010 SdSpiCard::readSector(unsigned long, unsigned char*)
0001034c g       .text	00000000 __init_array_start
0000b87c  w    F .text	00000002 .hidden __aeabi_idiv0
000096d0  w    F .text	00000006 can1_tx_warn_isr
00000ef0 g     F .text	000000d0 MTPStorage_SD::OpenIndex()
0000b4ec g     F .text	0000002c .hidden __unorddf2
000096d0  w    F .text	00000006 uart0_status_isr
000096d0  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
0000c640 g     F .text	000000dc strlen
00006c94 g     F .text	0000002e FatFile::openCluster(FatFile*)
0000b478 g     F .text	00000010 .hidden __aeabi_cdcmpeq
0000b3dc g     F .text	0000008a .hidden __gedf2
00005c60 g     F .text	000000ba FatFile::seekSet(unsigned long)
00001688 g     F .text	000000e4 MTPStorage_SD::Create(unsigned long, bool, char const*)
1fff0a40 g     O .data	0000002e usb_string_product_name_default
0000c808 g     F .text	00000018 vdprintf
000096d0  w    F .text	00000006 dma_ch1_isr
000085b8 g     F .text	0000006c SdioCard::sectorCount()
000079a0 g     F .text	000000c4 FsVolume::begin(BlockDeviceInterface*)
00009b3c g     F .text	0000002c usb_tx_packet_count
00005eb4 g     F .text	000000b8 FatFile::openNext(FatFile*, int)
0000fdcc g     O .text	00000058 vtable for SdioCard
0000af10 g     F .text	0000003a .hidden __aeabi_f2d
000096d0  w    F .text	00000006 dma_ch5_isr
0000117c g     F .text	00000040 MTPStorage_SD::close()
00006cc4 g     F .text	00000134 FatFile::getName(char*, unsigned int)
000096d0  w    F .text	00000006 can0_rx_warn_isr
00000618  w    F .text	00000068 MTPStorage_SD::~MTPStorage_SD()
000013b0 g     F .text	000000bc MTPStorage_SD::rename(unsigned long, char const*)
000096d0  w    F .text	00000006 can0_tx_warn_isr
000096d0  w    F .text	00000006 uart4_status_isr
00008fb4 g     F .text	00000074 SdioCard::readStart(unsigned long)
00000000  w      *UND*	00000000 _Jv_RegisterClasses
000090f8 g     F .text	00000090 SdSpiArduinoDriver::activate()
0000ac50 g     F .text	0000027a .hidden __subdf3
0001034c g       .text	00000000 __preinit_array_start
000046b0 g     F .text	000000c8 ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
00001164 g     F .text	00000016 MTPStorage_SD::GetSize(unsigned long)
00000598  w    F .text	00000028 File::whoami()
0000ccfc g     F .text	0000005a __lo0bits
000007a4 g     F .text	00000004 MTPStorage_SD::has_directories()
00005d84 g     F .text	00000130 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
0000ac3c g     F .text	0000000a __aeabi_atexit
00002ac4 g     F .text	0000001a MTPD::receive_buffer()
00000000  w      *UND*	00000000 __register_frame_info
00000974 g     F .text	00000024 MTPStorage_SD::clusterSize()
00004b74 g     F .text	00000126 ExFatFile::remove()
000096d0  w    F .text	00000006 cmp2_isr
0000a934 g     F .text	00000004 pendablesrvreq_isr
00002d64 g     F .text	00000072 MTPD::SendObject()
0000046c  w    F .text	00000004 Print::availableForWrite()
1fff0ebc g     O .data	0000016c __global_locale
000096d0  w    F .text	00000006 wakeup_isr
00008b54 g     F .text	00000394 SdioCard::begin(SdioConfig)
00004444 g     F .text	0000000c FsCache::invalidate()
000096d0  w    F .text	00000006 cmp3_isr
00003588 g     F .text	000001b0 breakTime(long, tmElements_t&)
0000a9e8 g     F .text	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
000067ac g     F .text	00000092 FatPartition::fatGet(unsigned long, unsigned long*)
0000b8f8 g     F .text	00000010 free
000096d0  w    F .text	00000006 tpm2_isr
0000cc3c g     F .text	00000080 __multadd
0000cc28 g     F .text	00000012 _Bfree
00000b34  w    F .text	00000010 SDFile::size()
000096d0  w    F .text	00000006 dma_ch0_isr
00000d38  w    F .text	0000005c SDFile::~SDFile()
1fff0a74  w    O .data	00000016 usb_string_serial_number
000096d0  w    F .text	00000006 enet_tx_isr
000049dc g     F .text	0000003a exFatHashName(char const*, unsigned int, unsigned short)
00009028 g     F .text	000000d0 SdioCard::readSector(unsigned long, unsigned char*)
000082e8 g     F .text	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text:

00000000 <_VectorsFlash>:
  str = fsFmtField(str, 2*(time & 31) + sec100/100, '.');
  *--str = ':';
  return fsFmtTime(str, time);
}
//------------------------------------------------------------------------------
char* fsFmtTimeZone(char* str, int8_t tz) {
       0:	... ............
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      10:	................
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
      20:	................
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      30:	........5...9...
  }
}  // namespace FsDateTime
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
      40:	................
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
      50:	................
      tz = -tz;
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      60:	................
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      *--str = sign;
    }
    *--str = 'C';
    *--str = 'T';
      70:	................
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      80:	................
      90:	................
      a0:	................
      b0:	................
      c0:	................
      d0:	................
      e0:	................
      f0:	................
     100:	................
     110:	................
     120:	................
     130:	................
     140:	................
     150:	................
     160:	................
     170:	................
     180:	................
     190:	................
     1a0:	................
     1b0:	................
     1c0:	................

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #356]	; (338 <ResetHandler+0x168>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	96d8 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #336]	; (33c <ResetHandler+0x16c>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #332]	; (340 <ResetHandler+0x170>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #332]	; (344 <ResetHandler+0x174>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #332]	; (348 <ResetHandler+0x178>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #328]	; (34c <ResetHandler+0x17c>)
     202:	ldr	r2, [pc, #332]	; (350 <ResetHandler+0x180>)
     204:	str	r2, [r3, #0]
		RTC_SR = 0;
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     206:	ldr	r3, [pc, #332]	; (354 <ResetHandler+0x184>)
     208:	ldrb	r2, [r3, #0]
     20a:	lsls	r1, r2, #28
     20c:	bpl.n	216 <ResetHandler+0x46>
     20e:	ldrb	r2, [r3, #0]
     210:	orr.w	r2, r2, #8
     214:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     216:	ldr	r3, [pc, #320]	; (358 <ResetHandler+0x188>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     218:	ldr	r1, [pc, #320]	; (35c <ResetHandler+0x18c>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     21a:	movs	r2, #170	; 0xaa
     21c:	strb	r2, [r3, #0]
     21e:	ldr	r2, [pc, #320]	; (360 <ResetHandler+0x190>)
     220:	ldr	r3, [pc, #320]	; (364 <ResetHandler+0x194>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     222:	cmp	r3, r1
     224:	bcs.n	230 <ResetHandler+0x60>
     226:	ldr.w	r0, [r2, #4]!
     22a:	str.w	r0, [r3], #4
     22e:	b.n	222 <ResetHandler+0x52>
     230:	ldr	r3, [pc, #308]	; (368 <ResetHandler+0x198>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     232:	ldr	r1, [pc, #312]	; (36c <ResetHandler+0x19c>)
     234:	movs	r2, #0
     236:	cmp	r3, r1
     238:	bcs.n	240 <ResetHandler+0x70>
     23a:	str.w	r2, [r3], #4
     23e:	b.n	236 <ResetHandler+0x66>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     240:	ldr	r1, [pc, #300]	; (370 <ResetHandler+0x1a0>)
     242:	ldr	r2, [pc, #304]	; (374 <ResetHandler+0x1a4>)
     244:	movs	r3, #0
     246:	ldr.w	r0, [r2, r3, lsl #2]
     24a:	str.w	r0, [r1, r3, lsl #2]
     24e:	adds	r3, #1
     250:	cmp	r3, #116	; 0x74
     252:	bne.n	246 <ResetHandler+0x76>
     254:	ldr	r3, [pc, #288]	; (378 <ResetHandler+0x1a8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     256:	ldr	r2, [pc, #292]	; (37c <ResetHandler+0x1ac>)
     258:	movs	r1, #128	; 0x80
     25a:	strb.w	r1, [r3], #1
     25e:	cmp	r3, r2
     260:	bne.n	25a <ResetHandler+0x8a>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     262:	ldr	r3, [pc, #284]	; (380 <ResetHandler+0x1b0>)
     264:	ldr	r2, [pc, #264]	; (370 <ResetHandler+0x1a0>)
     266:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     268:	ldr	r3, [pc, #280]	; (384 <ResetHandler+0x1b4>)
     26a:	movs	r2, #138	; 0x8a
     26c:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     26e:	sub.w	r3, r3, #4096	; 0x1000
     272:	movs	r2, #36	; 0x24
     274:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     276:	movs	r2, #160	; 0xa0
     278:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     27a:	ldrb	r2, [r3, #6]
     27c:	lsls	r2, r2, #30
     27e:	bpl.n	27a <ResetHandler+0xaa>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     280:	ldrb	r2, [r3, #6]
     282:	lsls	r4, r2, #27
     284:	bmi.n	280 <ResetHandler+0xb0>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     286:	ldr	r2, [pc, #256]	; (388 <ResetHandler+0x1b8>)
     288:	ldrb	r3, [r2, #6]
     28a:	and.w	r3, r3, #12
     28e:	cmp	r3, #8
     290:	ldr	r3, [pc, #244]	; (388 <ResetHandler+0x1b8>)
     292:	bne.n	288 <ResetHandler+0xb8>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(2);
    #elif F_CPU == 120000000
	MCG_C5 = MCG_C5_PRDIV0(1);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(14);
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     294:	movs	r2, #1
     296:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
     298:	movs	r2, #72	; 0x48
     29a:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     29c:	ldrb	r2, [r3, #6]
     29e:	lsls	r0, r2, #26
     2a0:	bpl.n	29c <ResetHandler+0xcc>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2a2:	ldr	r2, [pc, #228]	; (388 <ResetHandler+0x1b8>)
     2a4:	ldrb	r1, [r2, #6]
     2a6:	ldr	r3, [pc, #224]	; (388 <ResetHandler+0x1b8>)
     2a8:	lsls	r1, r1, #25
     2aa:	bpl.n	2a4 <ResetHandler+0xd4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     2ac:	ldr	r2, [pc, #220]	; (38c <ResetHandler+0x1bc>)
     2ae:	ldr	r1, [pc, #224]	; (390 <ResetHandler+0x1c0>)
     2b0:	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2b2:	movs	r1, #2
     2b4:	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2b6:	movs	r2, #32
     2b8:	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ba:	ldrb	r2, [r3, #6]
     2bc:	and.w	r2, r2, #12
     2c0:	cmp	r2, #12
     2c2:	bne.n	2ba <ResetHandler+0xea>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2c4:	ldr	r3, [pc, #204]	; (394 <ResetHandler+0x1c4>)
     2c6:	ldr	r2, [pc, #208]	; (398 <ResetHandler+0x1c8>)
     2c8:	str	r2, [r3, #0]
#endif

#if defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started.  For Teensy 3.6
	// we don't do this early.  See comment above about slow rising power.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     2ca:	ldr	r2, [pc, #208]	; (39c <ResetHandler+0x1cc>)
     2cc:	ldr	r4, [pc, #208]	; (3a0 <ResetHandler+0x1d0>)
     2ce:	ldr	r3, [r2, #0]
     2d0:	ands.w	r3, r3, #256	; 0x100
     2d4:	bne.n	2de <ResetHandler+0x10e>
		RTC_SR = 0;
     2d6:	str	r3, [r4, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     2d8:	mov.w	r3, #5376	; 0x1500
     2dc:	str	r3, [r2, #0]
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2de:	ldr	r3, [pc, #196]	; (3a4 <ResetHandler+0x1d4>)
     2e0:	ldr	r2, [pc, #196]	; (3a8 <ResetHandler+0x1d8>)
     2e2:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2e4:	movs	r2, #0
     2e6:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2e8:	movs	r2, #7
     2ea:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2ee:	ldr	r2, [pc, #188]	; (3ac <ResetHandler+0x1dc>)
     2f0:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2f4:	cpsie	i

	_init_Teensyduino_internal_();
     2f6:	bl	9908 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2fa:	ldr	r3, [r4, #0]
     2fc:	lsls	r2, r3, #31
     2fe:	bpl.n	30c <ResetHandler+0x13c>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     300:	ldr	r0, [pc, #172]	; (3b0 <ResetHandler+0x1e0>)
     302:	bl	97ec <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     306:	ldr	r3, [pc, #172]	; (3b4 <ResetHandler+0x1e4>)
     308:	ldr	r2, [pc, #172]	; (3b8 <ResetHandler+0x1e8>)
     30a:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     30c:	ldr	r3, [pc, #172]	; (3bc <ResetHandler+0x1ec>)
     30e:	ldrb	r3, [r3, #0]
     310:	lsls	r3, r3, #25
     312:	bpl.n	328 <ResetHandler+0x158>
     314:	ldr	r4, [pc, #156]	; (3b4 <ResetHandler+0x1e4>)
     316:	ldr	r3, [pc, #160]	; (3b8 <ResetHandler+0x1e8>)
     318:	ldr	r2, [r4, #0]
     31a:	cmp	r2, r3
     31c:	bne.n	328 <ResetHandler+0x158>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     31e:	ldr	r0, [pc, #144]	; (3b0 <ResetHandler+0x1e0>)
     320:	bl	97ec <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     324:	movs	r3, #0
     326:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     328:	bl	b898 <__libc_init_array>

	startup_late_hook();
     32c:	bl	96e4 <startup_late_hook>
	main();
     330:	bl	aa78 <main>
     334:	b.n	334 <ResetHandler+0x164>
     336:	nop
     338:	.word	0x4005200e
     33c:	.word	0x40048030
     340:	.word	0x00043f82
     344:	.word	0x2b000001
     348:	.word	0xe000ed88
     34c:	.word	0xe0082000
     350:	.word	0x85000003
     354:	.word	0x4007d002
     358:	.word	0x4007e000
     35c:	.word	0x1fff1438
     360:	.word	0x00010364
     364:	.word	0x1fff0970
     368:	.word	0x1fff1438
     36c:	.word	0x1fff1b80
     370:	.word	0x1fff0200
     374:	.word	0x00000000
     378:	.word	0xe000e400
     37c:	.word	0xe000e464
     380:	.word	0xe000ed08
     384:	.word	0x40065000
     388:	.word	0x40064000
     38c:	.word	0x40048044
     390:	.word	0x01030000
     394:	.word	0x40048004
     398:	.word	0x000510c0
     39c:	.word	0x4003d010
     3a0:	.word	0x4003d014
     3a4:	.word	0xe000e014
     3a8:	.word	0x000176ff
     3ac:	.word	0x20200000
     3b0:	.word	0x00000031
     3b4:	.word	0x4003e01c
     3b8:	.word	0x5a94c3a5
     3bc:	.word	0x4007f000
     3c0:	.word	0xffffffff
     3c4:	.word	0xffffffff
     3c8:	.word	0xffffffff
     3cc:	.word	0xffffffff
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff1438
     42c:	.word	0x00000000
     430:	.word	0x00010360

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff143c
     460:	.word	0x00010360
     464:	.word	0x1fff1438
     468:	.word	0x00000000

0000046c <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     46c:	movs	r0, #0
     46e:	bx	lr

00000470 <Print::flush()>:
	virtual void flush()				{ }
     470:	bx	lr
     472:	nop

00000474 <File::read(void*, unsigned int)>:
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
     474:	ldr	r0, [r0, #16]
     476:	cbz	r0, 47e <File::read(void*, unsigned int)+0xa>
     478:	ldr	r3, [r0, #0]
     47a:	ldr	r3, [r3, #40]	; 0x28
     47c:	bx	r3
	}
     47e:	bx	lr

00000480 <File::write(void const*, unsigned int)>:
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
     480:	ldr	r0, [r0, #16]
     482:	cbz	r0, 48a <File::write(void const*, unsigned int)+0xa>
     484:	ldr	r3, [r0, #0]
     486:	ldr	r3, [r3, #44]	; 0x2c
     488:	bx	r3
	}
     48a:	bx	lr

0000048c <File::available()>:
	virtual int available() {
		return (f) ? f->available() : 0;
     48c:	ldr	r0, [r0, #16]
     48e:	cbz	r0, 496 <File::available()+0xa>
     490:	ldr	r3, [r0, #0]
     492:	ldr	r3, [r3, #16]
     494:	bx	r3
	}
     496:	bx	lr

00000498 <File::peek()>:
	virtual int peek() {
		return (f) ? f->peek() : -1;
     498:	ldr	r0, [r0, #16]
     49a:	cbz	r0, 4a2 <File::peek()+0xa>
     49c:	ldr	r3, [r0, #0]
     49e:	ldr	r3, [r3, #24]
     4a0:	bx	r3
	}
     4a2:	mov.w	r0, #4294967295
     4a6:	bx	lr

000004a8 <File::flush()>:
	virtual void flush() {
		if (f) f->flush();
     4a8:	ldr	r0, [r0, #16]
     4aa:	cbz	r0, 4b2 <File::flush()+0xa>
     4ac:	ldr	r3, [r0, #0]
     4ae:	ldr	r3, [r3, #12]
     4b0:	bx	r3
     4b2:	bx	lr

000004b4 <File::seek(unsigned long, int)>:
	}
	virtual bool seek(uint32_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
     4b4:	ldr	r0, [r0, #16]
     4b6:	cbz	r0, 4be <File::seek(unsigned long, int)+0xa>
     4b8:	ldr	r3, [r0, #0]
     4ba:	ldr	r3, [r3, #48]	; 0x30
     4bc:	bx	r3
	}
     4be:	bx	lr

000004c0 <File::position()>:
	virtual uint32_t position() {
		return (f) ? f->position() : 0;
     4c0:	ldr	r0, [r0, #16]
     4c2:	cbz	r0, 4ca <File::position()+0xa>
     4c4:	ldr	r3, [r0, #0]
     4c6:	ldr	r3, [r3, #52]	; 0x34
     4c8:	bx	r3
	}
     4ca:	bx	lr

000004cc <File::size()>:
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
     4cc:	ldr	r0, [r0, #16]
     4ce:	cbz	r0, 4d6 <File::size()+0xa>
     4d0:	ldr	r3, [r0, #0]
     4d2:	ldr	r3, [r3, #56]	; 0x38
     4d4:	bx	r3
	}
     4d6:	bx	lr

000004d8 <File::close()>:
	virtual void close() {
		if (f) f->close();
     4d8:	ldr	r0, [r0, #16]
     4da:	cbz	r0, 4e2 <File::close()+0xa>
     4dc:	ldr	r3, [r0, #0]
     4de:	ldr	r3, [r3, #60]	; 0x3c
     4e0:	bx	r3
     4e2:	bx	lr

000004e4 <File::operator bool()>:
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
     4e4:	ldr	r0, [r0, #16]
     4e6:	cbz	r0, 4ee <File::operator bool()+0xa>
     4e8:	ldr	r3, [r0, #0]
     4ea:	ldr	r3, [r3, #64]	; 0x40
     4ec:	bx	r3
	}
     4ee:	bx	lr

000004f0 <File::name()>:
	virtual const char* name() {
		return (f) ? f->name() : "";
     4f0:	ldr	r0, [r0, #16]
     4f2:	cbz	r0, 4fa <File::name()+0xa>
     4f4:	ldr	r3, [r0, #0]
     4f6:	ldr	r3, [r3, #68]	; 0x44
     4f8:	bx	r3
	}
     4fa:	ldr	r0, [pc, #4]	; (500 <File::name()+0x10>)
     4fc:	bx	lr
     4fe:	nop
     500:	.word	0x0000fa78

00000504 <File::isDirectory()>:
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
     504:	ldr	r0, [r0, #16]
     506:	cbz	r0, 50e <File::isDirectory()+0xa>
     508:	ldr	r3, [r0, #0]
     50a:	ldr	r3, [r3, #72]	; 0x48
     50c:	bx	r3
	}
     50e:	bx	lr

00000510 <File::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
     510:	push	{r3, r4, r5, lr}
		return (f) ? f->openNextFile(mode) : *this;
     512:	ldr	r3, [r1, #16]
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
     514:	mov	r4, r0
		return (f) ? f->openNextFile(mode) : *this;
     516:	cbz	r3, 524 <File::openNextFile(unsigned char)+0x14>
     518:	ldr	r5, [r3, #0]
     51a:	mov	r1, r3
     51c:	ldr	r3, [r5, #76]	; 0x4c
     51e:	blx	r3
	}
     520:	mov	r0, r4
     522:	pop	{r3, r4, r5, pc}
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     524:	mov.w	r0, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
     528:	ldr	r2, [pc, #24]	; (544 <File::openNextFile(unsigned char)+0x34>)
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
     52a:	strb	r3, [r4, #4]
     52c:	strb	r3, [r4, #12]
     52e:	str	r0, [r4, #8]
     530:	str	r2, [r4, #0]
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
     532:	ldr	r3, [r1, #16]
     534:	str	r3, [r4, #16]
		if (f) f->refcount++;
     536:	cmp	r3, #0
     538:	beq.n	520 <File::openNextFile(unsigned char)+0x10>
     53a:	ldr	r2, [r3, #16]
     53c:	adds	r2, #1
     53e:	str	r2, [r3, #16]
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
	}
     540:	mov	r0, r4
     542:	pop	{r3, r4, r5, pc}
     544:	.word	0x0000fa0c

00000548 <File::rewindDirectory()>:
	virtual void rewindDirectory(void) {
		if (f) f->rewindDirectory();
     548:	ldr	r0, [r0, #16]
     54a:	cbz	r0, 552 <File::rewindDirectory()+0xa>
     54c:	ldr	r3, [r0, #0]
     54e:	ldr	r3, [r3, #80]	; 0x50
     550:	bx	r3
     552:	bx	lr

00000554 <File::read()>:
	}
	bool seek(uint32_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     554:	ldr	r0, [r0, #16]
     556:	cbz	r0, 57a <File::read()+0x26>
		if (f) f->rewindDirectory();
	}
	bool seek(uint32_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
     558:	push	{lr}
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     55a:	ldr	r3, [r0, #0]
		if (f) f->rewindDirectory();
	}
	bool seek(uint32_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
     55c:	sub	sp, #12
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     55e:	ldr	r3, [r3, #40]	; 0x28
     560:	movs	r2, #1
     562:	add.w	r1, sp, #7
     566:	blx	r3
     568:	cbz	r0, 574 <File::read()+0x20>
		return b;
     56a:	ldrb.w	r0, [sp, #7]
	}
     56e:	add	sp, #12
     570:	ldr.w	pc, [sp], #4
	}
	bool seek(uint32_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     574:	mov.w	r0, #4294967295
     578:	b.n	56e <File::read()+0x1a>
     57a:	mov.w	r0, #4294967295
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
     57e:	bx	lr

00000580 <File::write(unsigned char)>:
	size_t write(uint8_t b) {
     580:	push	{r4, lr}
     582:	sub	sp, #8
     584:	add	r3, sp, #8
		return write(&b, 1);
     586:	ldr	r2, [r0, #0]
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
	size_t write(uint8_t b) {
     588:	strb.w	r1, [r3, #-1]!
		return write(&b, 1);
     58c:	ldr	r4, [r2, #44]	; 0x2c
     58e:	mov	r1, r3
     590:	movs	r2, #1
     592:	blx	r4
	}
     594:	add	sp, #8
     596:	pop	{r4, pc}

00000598 <File::whoami()>:
	}
	virtual ~File() {
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
     598:	push	{r4, lr}
     59a:	mov	r4, r0
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
     59c:	mov	r2, r0
     59e:	ldr	r3, [r0, #16]
     5a0:	ldr	r1, [pc, #20]	; (5b8 <File::whoami()+0x20>)
     5a2:	ldr	r0, [pc, #24]	; (5bc <File::whoami()+0x24>)
     5a4:	bl	a9cc <Print::printf(char const*, ...)>
		if (f) f->whoami();
     5a8:	ldr	r0, [r4, #16]
     5aa:	cbz	r0, 5b6 <File::whoami()+0x1e>
     5ac:	ldr	r3, [r0, #0]
	}
     5ae:	ldmia.w	sp!, {r4, lr}
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
		if (f) f->whoami();
     5b2:	ldr	r3, [r3, #36]	; 0x24
     5b4:	bx	r3
     5b6:	pop	{r4, pc}
     5b8:	.word	0x0000fa60
     5bc:	.word	0x1fff098c

000005c0 <File::~File()>:
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     5c0:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     5c2:	ldr	r3, [pc, #32]	; (5e4 <File::~File()+0x24>)
     5c4:	push	{r4, lr}
     5c6:	mov	r4, r0
     5c8:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     5ca:	cbz	r2, 5de <File::~File()+0x1e>
     5cc:	ldr	r3, [r2, #16]
     5ce:	subs	r3, #1
     5d0:	str	r3, [r2, #16]
     5d2:	cbnz	r3, 5de <File::~File()+0x1e>
     5d4:	ldr	r0, [r0, #16]
     5d6:	cbz	r0, 5de <File::~File()+0x1e>
     5d8:	ldr	r3, [r0, #0]
     5da:	ldr	r3, [r3, #32]
     5dc:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
     5de:	mov	r0, r4
     5e0:	pop	{r4, pc}
     5e2:	nop
     5e4:	.word	0x0000fa0c

000005e8 <File::~File()>:
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     5e8:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     5ea:	ldr	r3, [pc, #40]	; (614 <File::~File()+0x2c>)
     5ec:	push	{r4, lr}
     5ee:	mov	r4, r0
     5f0:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     5f2:	cbz	r2, 606 <File::~File()+0x1e>
     5f4:	ldr	r3, [r2, #16]
     5f6:	subs	r3, #1
     5f8:	str	r3, [r2, #16]
     5fa:	cbnz	r3, 606 <File::~File()+0x1e>
     5fc:	ldr	r0, [r0, #16]
     5fe:	cbz	r0, 606 <File::~File()+0x1e>
     600:	ldr	r3, [r0, #0]
     602:	ldr	r3, [r3, #32]
     604:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
     606:	mov	r0, r4
     608:	movs	r1, #20
     60a:	bl	aa90 <operator delete(void*, unsigned int)>
     60e:	mov	r0, r4
     610:	pop	{r4, pc}
     612:	nop
     614:	.word	0x0000fa0c

00000618 <MTPStorage_SD::~MTPStorage_SD()>:
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     618:	ldr	r2, [r0, #60]	; 0x3c

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface 
     61a:	push	{r3, r4, r5, lr}
     61c:	ldr	r3, [pc, #88]	; (678 <MTPStorage_SD::~MTPStorage_SD()+0x60>)
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     61e:	ldr	r5, [pc, #92]	; (67c <MTPStorage_SD::~MTPStorage_SD()+0x64>)
     620:	str	r3, [r0, #0]
     622:	mov	r4, r0
     624:	str	r5, [r0, #44]	; 0x2c
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     626:	cbz	r2, 630 <MTPStorage_SD::~MTPStorage_SD()+0x18>
     628:	ldr	r3, [r2, #16]
     62a:	subs	r3, #1
     62c:	str	r3, [r2, #16]
     62e:	cbz	r3, 65a <MTPStorage_SD::~MTPStorage_SD()+0x42>
     630:	ldr	r2, [r4, #40]	; 0x28
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     632:	str	r5, [r4, #24]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     634:	cbz	r2, 63e <MTPStorage_SD::~MTPStorage_SD()+0x26>
     636:	ldr	r3, [r2, #16]
     638:	subs	r3, #1
     63a:	str	r3, [r2, #16]
     63c:	cbz	r3, 668 <MTPStorage_SD::~MTPStorage_SD()+0x50>
     63e:	ldr	r2, [r4, #20]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     640:	str	r5, [r4, #4]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     642:	cbz	r2, 656 <MTPStorage_SD::~MTPStorage_SD()+0x3e>
     644:	ldr	r3, [r2, #16]
     646:	subs	r3, #1
     648:	str	r3, [r2, #16]
     64a:	cbnz	r3, 656 <MTPStorage_SD::~MTPStorage_SD()+0x3e>
     64c:	ldr	r0, [r4, #20]
     64e:	cbz	r0, 656 <MTPStorage_SD::~MTPStorage_SD()+0x3e>
     650:	ldr	r3, [r0, #0]
     652:	ldr	r3, [r3, #32]
     654:	blx	r3
     656:	mov	r0, r4
     658:	pop	{r3, r4, r5, pc}
     65a:	ldr	r0, [r0, #60]	; 0x3c
     65c:	cmp	r0, #0
     65e:	beq.n	630 <MTPStorage_SD::~MTPStorage_SD()+0x18>
     660:	ldr	r3, [r0, #0]
     662:	ldr	r3, [r3, #32]
     664:	blx	r3
     666:	b.n	630 <MTPStorage_SD::~MTPStorage_SD()+0x18>
     668:	ldr	r0, [r4, #40]	; 0x28
     66a:	cmp	r0, #0
     66c:	beq.n	63e <MTPStorage_SD::~MTPStorage_SD()+0x26>
     66e:	ldr	r3, [r0, #0]
     670:	ldr	r3, [r3, #32]
     672:	blx	r3
     674:	b.n	63e <MTPStorage_SD::~MTPStorage_SD()+0x26>
     676:	nop
     678:	.word	0x0000fb64
     67c:	.word	0x0000fa0c

00000680 <setup>:
    to=millis();
  }
}

void setup()
{ 
     680:	push	{r4, r5, r6, lr}
     682:	ldr	r2, [pc, #108]	; (6f0 <setup+0x70>)
     684:	ldr	r5, [pc, #108]	; (6f4 <setup+0x74>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     686:	ldr	r4, [pc, #112]	; (6f8 <setup+0x78>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     688:	ldr	r0, [pc, #112]	; (6fc <setup+0x7c>)
     68a:	sub	sp, #8
  while(!Serial && millis()<3000); 
     68c:	movw	r1, #2999	; 0xbb7
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     690:	ldrb	r3, [r5, #0]
     692:	cbz	r3, 6be <setup+0x3e>
     694:	ldrb	r3, [r4, #0]
     696:	lsls	r3, r3, #31
     698:	bpl.n	6be <setup+0x3e>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     69a:	ldr	r3, [r2, #0]
     69c:	ldr	r6, [r0, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     69e:	subs	r3, r3, r6
     6a0:	cmp	r3, #14
     6a2:	bls.n	6be <setup+0x3e>
  usb_mtp_configure();
     6a4:	bl	927c <usb_mtp_configure>
  if(!Storage_init()) {Serial.println("No storage"); while(1);};
     6a8:	bl	1954 <Storage_init()>
     6ac:	cbnz	r0, 6d4 <setup+0x54>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     6ae:	movs	r1, #10
     6b0:	ldr	r0, [pc, #76]	; (700 <setup+0x80>)
     6b2:	bl	9480 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     6b6:	ldr	r0, [pc, #76]	; (704 <setup+0x84>)
     6b8:	bl	a99c <Print::println()>
     6bc:	b.n	6bc <setup+0x3c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6be:	ldr	r3, [r2, #0]
     6c0:	str	r3, [sp, #4]
	return ret;
     6c2:	ldr	r3, [sp, #4]
  }
}

void setup()
{ 
  while(!Serial && millis()<3000); 
     6c4:	cmp	r3, r1
     6c6:	bls.n	690 <setup+0x10>
  usb_mtp_configure();
     6c8:	bl	927c <usb_mtp_configure>
  if(!Storage_init()) {Serial.println("No storage"); while(1);};
     6cc:	bl	1954 <Storage_init()>
     6d0:	cmp	r0, #0
     6d2:	beq.n	6ae <setup+0x2e>
     6d4:	movs	r1, #8
     6d6:	ldr	r0, [pc, #48]	; (708 <setup+0x88>)
     6d8:	bl	9480 <usb_serial_write>
     6dc:	ldr	r0, [pc, #36]	; (704 <setup+0x84>)
     6de:	bl	a99c <Print::println()>

  Serial.println("MTP test");

#if USE_SDIO==1
  pinMode(13,OUTPUT);
     6e2:	movs	r1, #1
     6e4:	movs	r0, #13
     6e6:	bl	981c <pinMode>
#endif

}
     6ea:	add	sp, #8
     6ec:	pop	{r4, r5, r6, pc}
     6ee:	nop
     6f0:	.word	0x1fff19f0
     6f4:	.word	0x1fff1af4
     6f8:	.word	0x1fff19ec
     6fc:	.word	0x1fff1b6c
     700:	.word	0x0000fa7c
     704:	.word	0x1fff098c
     708:	.word	0x0000fa88

0000070c <loop>:

void loop()
{ 
  mtpd.loop();
     70c:	ldr	r0, [pc, #4]	; (714 <loop+0x8>)
     70e:	b.w	2dd8 <MTPD::loop()>
     712:	nop
     714:	.word	0x1fff14ac

00000718 <_GLOBAL__sub_I_storage>:

  //logg(1000,"loop");
  //asm("wfi"); // may wait forever on T4.x
}
     718:	push	{r3, r4, r5, r6, r7, lr}
     71a:	ldr	r4, [pc, #88]	; (774 <_GLOBAL__sub_I_storage+0x5c>)

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     71c:	ldr	r3, [pc, #88]	; (778 <_GLOBAL__sub_I_storage+0x60>)
     71e:	ldr	r0, [pc, #92]	; (77c <_GLOBAL__sub_I_storage+0x64>)
     720:	str	r0, [r4, #0]
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
     722:	movs	r5, #0
     724:	mov.w	r6, #1000	; 0x3e8
     728:	str	r3, [r4, #4]
     72a:	str	r3, [r4, #24]
     72c:	str	r3, [r4, #44]	; 0x2c
#endif

  #include "MTP.h"
  #include "usb1_mtp.h"

  MTPStorage_SD storage;
     72e:	ldr	r2, [pc, #80]	; (780 <_GLOBAL__sub_I_storage+0x68>)
     730:	ldr	r1, [pc, #80]	; (784 <_GLOBAL__sub_I_storage+0x6c>)
     732:	strb	r5, [r4, #8]
     734:	mvn.w	r7, #1
     738:	mov	r0, r4
     73a:	strb	r5, [r4, #16]
     73c:	str	r5, [r4, #20]
     73e:	strb	r5, [r4, #28]
     740:	strb.w	r5, [r4, #36]	; 0x24
     744:	str	r5, [r4, #40]	; 0x28
     746:	strb.w	r5, [r4, #48]	; 0x30
     74a:	strb.w	r5, [r4, #56]	; 0x38
     74e:	str	r5, [r4, #60]	; 0x3c
     750:	str	r6, [r4, #12]
     752:	str	r6, [r4, #32]
     754:	str	r6, [r4, #52]	; 0x34
     756:	str	r7, [r4, #68]	; 0x44
     758:	str	r5, [r4, #64]	; 0x40
     75a:	str	r5, [r4, #72]	; 0x48
     75c:	strb.w	r5, [r4, #76]	; 0x4c
     760:	strb.w	r5, [r4, #77]	; 0x4d
     764:	bl	ac3c <__aeabi_atexit>
#include "Storage.h"

// MTP Responder.
class MTPD {
public:
  explicit MTPD(MTPStorageInterface* storage) : storage_(storage) {}
     768:	ldr	r3, [pc, #28]	; (788 <_GLOBAL__sub_I_storage+0x70>)
     76a:	stmia.w	r3, {r4, r5}
     76e:	strb	r5, [r3, #8]
     770:	str	r5, [r3, #12]
     772:	pop	{r3, r4, r5, r6, r7, pc}
     774:	.word	0x1fff1454
     778:	.word	0x0000fa0c
     77c:	.word	0x0000fb64
     780:	.word	0x1fff0970
     784:	.word	0x00000619
     788:	.word	0x1fff14ac

0000078c <SDFile::operator bool()>:
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     78c:	ldr	r3, [r0, #92]	; 0x5c
     78e:	cbz	r3, 794 <SDFile::operator bool()+0x8>
     790:	movs	r0, #1
		}
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
     792:	bx	lr
     794:	ldr	r0, [r0, #96]	; 0x60
     796:	adds	r0, #0
     798:	it	ne
     79a:	movne	r0, #1
     79c:	bx	lr
     79e:	nop

000007a0 <MTPStorage_SD::readonly()>:

// These should probably be weak.
void mtp_yield() {}
void mtp_lock_storage(bool lock) {}

  bool MTPStorage_SD::readonly() { return false; }
     7a0:	movs	r0, #0
     7a2:	bx	lr

000007a4 <MTPStorage_SD::has_directories()>:
  bool MTPStorage_SD::has_directories() { return true; }
     7a4:	movs	r0, #1
     7a6:	bx	lr

000007a8 <MTPStorage_SD::CloseIndex()>:
    index_generated=false;
    open_file_ = 0xFFFFFFFEUL;
  }

  void MTPStorage_SD::CloseIndex()
  {
     7a8:	push	{r4, lr}
     7aa:	mov	r4, r0
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
     7ac:	ldr	r0, [r0, #20]
     7ae:	cbz	r0, 7b6 <MTPStorage_SD::CloseIndex()+0xe>
     7b0:	ldr	r3, [r0, #0]
     7b2:	ldr	r3, [r3, #60]	; 0x3c
     7b4:	blx	r3
    mtp_lock_storage(true);
    index_.close();
    mtp_lock_storage(false);
    index_generated = false;
     7b6:	movs	r3, #0
     7b8:	strb.w	r3, [r4, #76]	; 0x4c
    index_entries_ = 0;
     7bc:	str	r3, [r4, #72]	; 0x48
     7be:	pop	{r4, pc}

000007c0 <MTPStorage_SD::write(char const*, unsigned long)>:
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
     7c0:	ldr	r0, [r0, #40]	; 0x28
     7c2:	cbz	r0, 7ca <MTPStorage_SD::write(char const*, unsigned long)+0xa>
     7c4:	ldr	r3, [r0, #0]
     7c6:	ldr	r3, [r3, #44]	; 0x2c
     7c8:	bx	r3
     7ca:	bx	lr

000007cc <dateTime(unsigned short*, unsigned short*, unsigned char*)>:
  #define indexFile "/mtpindex.dat"

   #include "TimeLib.h"
  // Call back for file timestamps.  Only called for file create and sync().
  void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
  { 
     7cc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     7d0:	mov	r7, r1
     7d2:	mov	r6, r2
     7d4:	mov	r8, r0
    // Return date using FS_DATE macro to format fields.
    *date = FS_DATE(year(), month(), day());
     7d6:	bl	3890 <year()>
     7da:	mov	r4, r0
     7dc:	bl	3870 <month()>
     7e0:	mov	r5, r0
     7e2:	bl	3850 <day()>
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
     7e6:	subw	r3, r4, #1980	; 0x7bc
     7ea:	uxth	r3, r3
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
     7ec:	cmp	r3, #127	; 0x7f
     7ee:	bhi.n	7f6 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
     7f0:	uxtb	r2, r5
     7f2:	cmp	r2, #12
     7f4:	bls.n	84e <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x82>
         year << 9 | month << 5 | day;
     7f6:	movs	r3, #0
     7f8:	strh.w	r3, [r8]

    // Return time using FS_TIME macro to format fields.
    *time = FS_TIME(hour(), minute(), second());
     7fc:	bl	37f0 <hour()>
     800:	mov	r4, r0
     802:	bl	3810 <minute()>
     806:	mov	r5, r0
     808:	bl	3830 <second()>
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
     80c:	uxtb	r3, r4
     80e:	cmp	r3, #23
     810:	bhi.n	818 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
     812:	uxtb	r3, r5
     814:	cmp	r3, #59	; 0x3b
     816:	bls.n	830 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x64>
         hour << 11 | minute << 5 | second >> 1;
     818:	movs	r3, #0
     81a:	strh	r3, [r7, #0]
    
    // Return low time bits in units of 10 ms.
    *ms10 = second() & 1 ? 100 : 0;
     81c:	bl	3830 <second()>
     820:	tst.w	r0, #1
     824:	ite	ne
     826:	movne	r3, #100	; 0x64
     828:	moveq	r3, #0
     82a:	strb	r3, [r6, #0]
     82c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
     830:	uxtb	r3, r0
     832:	cmp	r3, #59	; 0x3b
     834:	bhi.n	818 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
         hour << 11 | minute << 5 | second >> 1;
     836:	lsls	r4, r4, #11
     838:	lsls	r3, r5, #5
     83a:	and.w	r4, r4, #522240	; 0x7f800
     83e:	and.w	r3, r3, #8160	; 0x1fe0
     842:	orrs	r3, r4
     844:	ubfx	r0, r0, #1, #7
     848:	orrs	r3, r0
     84a:	uxth	r3, r3
     84c:	b.n	81a <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4e>
   #include "TimeLib.h"
  // Call back for file timestamps.  Only called for file create and sync().
  void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
  { 
    // Return date using FS_DATE macro to format fields.
    *date = FS_DATE(year(), month(), day());
     84e:	uxtb	r0, r0
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
     850:	cmp	r0, #31
     852:	bhi.n	7f6 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
         year << 9 | month << 5 | day;
     854:	lsls	r5, r5, #5
     856:	and.w	r5, r5, #8160	; 0x1fe0
     85a:	orrs	r0, r5
     85c:	orr.w	r3, r0, r3, lsl #9
     860:	uxth	r3, r3
     862:	b.n	7f8 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2c>

00000864 <SDFile::close()>:
		return sdfatfile.curPosition();
	}
	virtual uint32_t size() {
		return sdfatfile.size();
	}
	virtual void close() {
     864:	push	{r4, lr}
     866:	mov	r4, r0
		if (filename) {
     868:	ldr	r0, [r0, #100]	; 0x64
     86a:	cbz	r0, 874 <SDFile::close()+0x10>
			free(filename);
     86c:	bl	b8f8 <free>
			filename = nullptr;
     870:	movs	r3, #0
     872:	str	r3, [r4, #100]	; 0x64
		}
		sdfatfile.close();
     874:	add.w	r0, r4, #36	; 0x24
	}
     878:	ldmia.w	sp!, {r4, lr}
	virtual void close() {
		if (filename) {
			free(filename);
			filename = nullptr;
		}
		sdfatfile.close();
     87c:	b.w	7898 <FsBaseFile::close()>

00000880 <SDFile::whoami()>:
		if (filename) free(filename);
	}
#ifdef FILE_WHOAMI
	virtual void whoami() {
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
     880:	mov	r2, r0
     882:	ldr	r3, [r0, #16]
     884:	ldr	r1, [pc, #4]	; (88c <SDFile::whoami()+0xc>)
     886:	ldr	r0, [pc, #8]	; (890 <SDFile::whoami()+0x10>)
     888:	b.w	a9cc <Print::printf(char const*, ...)>
     88c:	.word	0x0000fbac
     890:	.word	0x1fff098c

00000894 <SDFile::openNextFile(unsigned char)>:
		return filename;
	}
	virtual boolean isDirectory(void) {
		return sdfatfile.isDirectory();
	}
	virtual File openNextFile(uint8_t mode=0) {
     894:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     898:	movs	r3, #0
     89a:	sub	sp, #80	; 0x50
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     89c:	mov	r2, r3
     89e:	mov	r5, r0
     8a0:	adds	r1, #36	; 0x24
     8a2:	add	r0, sp, #16
     8a4:	mov.w	r4, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     8a8:	ldr	r7, [pc, #148]	; (940 <SDFile::openNextFile(unsigned char)+0xac>)
     8aa:	strb.w	r3, [sp, #4]
     8ae:	strb.w	r3, [sp, #12]
 * \class FsBaseFile
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}
     8b2:	str	r3, [sp, #72]	; 0x48
     8b4:	str	r3, [sp, #76]	; 0x4c
     8b6:	str	r4, [sp, #8]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     8b8:	str	r7, [sp, #0]
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     8ba:	bl	7940 <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     8be:	ldr	r3, [sp, #72]	; 0x48
     8c0:	cmp	r3, #0
     8c2:	beq.n	92a <SDFile::openNextFile(unsigned char)+0x96>
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
     8c4:	movs	r0, #104	; 0x68
     8c6:	bl	aa8c <operator new(unsigned int)>
     8ca:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     8cc:	ldrb.w	r6, [sp, #4]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     8d0:	ldr	r2, [sp, #8]
     8d2:	ldrb.w	r3, [sp, #12]
#endif

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     8d6:	ldr	r0, [pc, #108]	; (944 <SDFile::openNextFile(unsigned char)+0xb0>)
     8d8:	ldr	r1, [pc, #108]	; (948 <SDFile::openNextFile(unsigned char)+0xb4>)
     8da:	strb	r6, [r4, #24]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     8dc:	mov.w	r8, #1000	; 0x3e8
{
  public:
	constexpr Print() : write_error(0) {}
     8e0:	movs	r6, #0
     8e2:	str	r0, [r4, #0]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     8e4:	str	r1, [r4, #20]
     8e6:	str	r2, [r4, #28]
     8e8:	strb.w	r3, [r4, #32]
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     8ec:	add.w	r0, r4, #36	; 0x24
     8f0:	add	r1, sp, #16
     8f2:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     8f4:	strb	r6, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     8f6:	str	r6, [r4, #16]
     8f8:	str.w	r8, [r4, #8]
     8fc:	bl	7820 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     900:	ldr	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     902:	ldr	r2, [pc, #72]	; (94c <SDFile::openNextFile(unsigned char)+0xb8>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     904:	str	r7, [r4, #20]
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     906:	adds	r3, #1
     908:	str	r6, [r4, #100]	; 0x64
     90a:	strb	r6, [r5, #4]
     90c:	str.w	r8, [r5, #8]
     910:	strb	r6, [r5, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
     912:	str	r4, [r5, #16]
		if (f) f->refcount++;
     914:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     916:	str	r2, [r5, #0]
     918:	ldr	r3, [pc, #52]	; (950 <SDFile::openNextFile(unsigned char)+0xbc>)
     91a:	str	r3, [sp, #0]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     91c:	add	r0, sp, #16
     91e:	bl	7898 <FsBaseFile::close()>
	}
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
     922:	mov	r0, r5
     924:	add	sp, #80	; 0x50
     926:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     92a:	ldr	r3, [sp, #76]	; 0x4c
     92c:	cmp	r3, #0
     92e:	bne.n	8c4 <SDFile::openNextFile(unsigned char)+0x30>

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     930:	ldr	r2, [pc, #24]	; (94c <SDFile::openNextFile(unsigned char)+0xb8>)
     932:	strb	r3, [r5, #4]
     934:	str	r4, [r5, #8]
     936:	strb	r3, [r5, #12]
     938:	str	r3, [r5, #16]
     93a:	str	r2, [r5, #0]
     93c:	b.n	918 <SDFile::openNextFile(unsigned char)+0x84>
     93e:	nop
     940:	.word	0x0000fae4
     944:	.word	0x0000fb08
     948:	.word	0x0000fa9c
     94c:	.word	0x0000fa0c
     950:	.word	0x0000fac0

00000954 <MTPStorage_SD::clusterCount()>:
#if USE_SDFS==1
  uint32_t MTPStorage_SD::clusterCount() { return sd.clusterCount(); }
  uint32_t MTPStorage_SD::freeClusters() { return sd.freeClusterCount(); }
  uint32_t MTPStorage_SD::clusterSize() { return sd.sectorsPerCluster(); }
#else
  uint32_t MTPStorage_SD::clusterCount() { return SD.sdfs.clusterCount(); }
     954:	ldr	r2, [pc, #24]	; (970 <MTPStorage_SD::clusterCount()+0x1c>)
     956:	ldr.w	r3, [r2, #1144]	; 0x478
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     95a:	cbz	r3, 962 <MTPStorage_SD::clusterCount()+0xe>
    m_cache.invalidate();
    return m_cache.buffer();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
     95c:	ldr	r0, [r3, #28]
     95e:	subs	r0, #1
     960:	bx	lr
     962:	ldr.w	r0, [r2, #1148]	; 0x47c
     966:	cbz	r0, 96c <MTPStorage_SD::clusterCount()+0x18>
     968:	ldr.w	r0, [r0, #1064]	; 0x428
     96c:	bx	lr
     96e:	nop
     970:	.word	0x1fff14e0

00000974 <MTPStorage_SD::clusterSize()>:
  uint32_t MTPStorage_SD::freeClusters() { return SD.sdfs.freeClusterCount(); }
  uint32_t MTPStorage_SD::clusterSize() { return SD.sdfs.sectorsPerCluster(); }
     974:	ldr	r2, [pc, #28]	; (994 <MTPStorage_SD::clusterSize()+0x20>)
     976:	ldr.w	r3, [r2, #1144]	; 0x478
           m_xVol ? m_xVol->freeClusterCount() : 0;
  }
  /** \return The volume's cluster size in sectors. */
  uint32_t sectorsPerCluster() const {
    return m_fVol ? m_fVol->sectorsPerCluster() :
           m_xVol ? m_xVol->sectorsPerCluster() : 0;
     97a:	cbz	r3, 980 <MTPStorage_SD::clusterSize()+0xc>
     97c:	ldrb	r0, [r3, #4]
     97e:	bx	lr
     980:	ldr.w	r0, [r2, #1148]	; 0x47c
     984:	cbz	r0, 990 <MTPStorage_SD::clusterSize()+0x1c>
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() {return m_rootDirectoryCluster;}
  /** \return the root directory length. */
  uint32_t rootLength();
  /** \return the number of sectors in a cluster. */
  uint32_t sectorsPerCluster() {return 1UL << m_sectorsPerClusterShift;}
     986:	ldrb.w	r0, [r0, #1085]	; 0x43d
     98a:	movs	r3, #1
     98c:	lsl.w	r0, r3, r0
     990:	bx	lr
     992:	nop
     994:	.word	0x1fff14e0

00000998 <StreamFile<FsBaseFile, unsigned long long>::available()>:
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
     998:	ldr	r2, [r0, #72]	; 0x48
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     99a:	cbz	r2, 9b6 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  void fsetpos(const fspos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() {
    return isFile() ? fileSize() - curPosition() : 0;
     99c:	ldrb	r3, [r2, #0]
     99e:	and.w	r3, r3, #8
     9a2:	and.w	r0, r3, #255	; 0xff
     9a6:	cbz	r3, 9ea <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     9a8:	ldr	r3, [r2, #28]
     9aa:	ldr	r0, [r2, #20]
     9ac:	subs	r0, r3, r0
     9ae:	it	mi
     9b0:	mvnmi.w	r0, #2147483648	; 0x80000000
     9b4:	bx	lr
     9b6:	ldr	r1, [r0, #76]	; 0x4c
     9b8:	cbz	r1, 9ec <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     9ba:	ldrb.w	r3, [r1, #49]	; 0x31
     9be:	and.w	r3, r3, #8
     9c2:	and.w	r0, r3, #255	; 0xff
     9c6:	cbz	r3, 9ea <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
     9c8:	ldrd	r2, r3, [r1, #16]
     9cc:	ldrd	r0, r1, [r1]
     9d0:	subs	r0, r2, r0
     9d2:	push	{r4, r5}
     9d4:	sbc.w	r1, r3, r1
     9d8:	movs	r5, #0
     9da:	mvn.w	r4, #2147483648	; 0x80000000
     9de:	cmp	r5, r1
     9e0:	it	eq
     9e2:	cmpeq	r4, r0
     9e4:	bcs.n	9e8 <StreamFile<FsBaseFile, unsigned long long>::available()+0x50>
     9e6:	mov	r0, r4
    return BaseFile::available();
  }
     9e8:	pop	{r4, r5}
     9ea:	bx	lr
     9ec:	mov	r0, r1
     9ee:	bx	lr

000009f0 <SDFile::peek()>:
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
		return sdfatfile.write(buf, size);
	}
	virtual int peek() {
     9f0:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     9f2:	cbz	r3, 9fa <SDFile::peek()+0xa>
     9f4:	mov	r0, r3
     9f6:	b.w	5be4 <FatFile::peek()>
     9fa:	ldr	r0, [r0, #96]	; 0x60
     9fc:	cbz	r0, a02 <SDFile::peek()+0x12>
     9fe:	b.w	3cfc <ExFatFile::peek()>
		return sdfatfile.peek();
	}
     a02:	mov.w	r0, #4294967295
     a06:	bx	lr

00000a08 <StreamFile<FsBaseFile, unsigned long long>::read()>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
     a08:	push	{lr}
     a0a:	ldr	r3, [r0, #72]	; 0x48
     a0c:	sub	sp, #12
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     a0e:	cbz	r3, a2a <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     a10:	mov	r0, r3
     a12:	movs	r2, #1
     a14:	add.w	r1, sp, #7
     a18:	bl	5a04 <FatFile::read(void*, unsigned int)>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     a1c:	cmp	r0, #1
     a1e:	bne.n	a3a <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     a20:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
  }
     a24:	add	sp, #12
     a26:	ldr.w	pc, [sp], #4
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     a2a:	ldr	r0, [r0, #76]	; 0x4c
     a2c:	cbz	r0, a3a <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     a2e:	movs	r2, #1
     a30:	add.w	r1, sp, #7
     a34:	bl	3b18 <ExFatFile::read(void*, unsigned int)>
     a38:	b.n	a1c <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     a3a:	mov.w	r0, #4294967295
     a3e:	b.n	a24 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000a40 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   */
  int available() {
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
     a40:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     a42:	cbz	r3, a4a <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     a44:	mov	r0, r3
     a46:	b.w	6428 <FatFile::sync()>
     a4a:	ldr	r0, [r0, #76]	; 0x4c
     a4c:	cbz	r0, a52 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     a4e:	b.w	4e90 <ExFatFile::sync()>
     a52:	bx	lr

00000a54 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     a54:	push	{lr}
     a56:	ldr	r3, [r0, #72]	; 0x48
     a58:	sub	sp, #12
     a5a:	strb.w	r1, [sp, #7]
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     a5e:	cbz	r3, a72 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     a60:	mov	r0, r3
     a62:	movs	r2, #1
     a64:	add.w	r1, sp, #7
     a68:	bl	6434 <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     a6c:	add	sp, #12
     a6e:	ldr.w	pc, [sp], #4
     a72:	ldr	r0, [r0, #76]	; 0x4c
     a74:	cmp	r0, #0
     a76:	beq.n	a6c <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     a78:	movs	r2, #1
     a7a:	add.w	r1, sp, #7
     a7e:	bl	5380 <ExFatFile::write(void const*, unsigned int)>
     a82:	add	sp, #12
     a84:	ldr.w	pc, [sp], #4

00000a88 <SDFile::name()>:
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
     a88:	push	{r3, r4, r5, lr}
		if (!filename) {
     a8a:	ldr	r4, [r0, #100]	; 0x64
     a8c:	cbz	r4, a92 <SDFile::name()+0xa>
				static char zeroterm = 0;
				filename = &zeroterm;
			}
		}
		return filename;
	}
     a8e:	mov	r0, r4
     a90:	pop	{r3, r4, r5, pc}
     a92:	mov	r5, r0
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
		if (!filename) {
			filename = (char *)malloc(MAX_FILENAME_LEN);
     a94:	mov.w	r0, #256	; 0x100
     a98:	bl	b8e8 <malloc>
     a9c:	mov	r1, r0
     a9e:	str	r0, [r5, #100]	; 0x64
			if (filename) {
     aa0:	cbz	r0, ac4 <SDFile::name()+0x3c>
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    return m_fFile ? m_fFile->getName(name, len) :
     aa2:	ldr	r0, [r5, #92]	; 0x5c
   *             must be at least 13 bytes long.  The file's name will be
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
     aa4:	strb	r4, [r1, #0]
    return m_fFile ? m_fFile->getName(name, len) :
           m_xFile ? m_xFile->getName(name, len) : 0;
     aa6:	cbz	r0, ab4 <SDFile::name()+0x2c>
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    return m_fFile ? m_fFile->getName(name, len) :
     aa8:	mov.w	r2, #256	; 0x100
     aac:	bl	6cc4 <FatFile::getName(char*, unsigned int)>
     ab0:	ldr	r4, [r5, #100]	; 0x64
     ab2:	b.n	a8e <SDFile::name()+0x6>
           m_xFile ? m_xFile->getName(name, len) : 0;
     ab4:	ldr	r0, [r5, #96]	; 0x60
     ab6:	cbz	r0, aca <SDFile::name()+0x42>
     ab8:	mov.w	r2, #256	; 0x100
     abc:	bl	3964 <ExFatFile::getName(char*, unsigned int)>
     ac0:	ldr	r4, [r5, #100]	; 0x64
     ac2:	b.n	a8e <SDFile::name()+0x6>
				sdfatfile.getName(filename, MAX_FILENAME_LEN);
			} else {
				static char zeroterm = 0;
				filename = &zeroterm;
     ac4:	ldr	r4, [pc, #8]	; (ad0 <SDFile::name()+0x48>)
     ac6:	str	r4, [r5, #100]	; 0x64
     ac8:	b.n	a8e <SDFile::name()+0x6>
     aca:	mov	r4, r1
     acc:	b.n	a8e <SDFile::name()+0x6>
     ace:	nop
     ad0:	.word	0x1fff14bc

00000ad4 <SDFile::rewindDirectory()>:
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
	virtual void rewindDirectory(void) {
     ad4:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     ad6:	cbz	r3, b00 <SDFile::rewindDirectory()+0x2c>
  int read() {
    return BaseFile::read();
  }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
     ad8:	ldrb	r2, [r3, #0]
     ada:	tst.w	r2, #112	; 0x70
     ade:	bne.n	ae2 <SDFile::rewindDirectory()+0xe>
     ae0:	bx	lr
     ae2:	push	{r4, lr}
     ae4:	mov	r4, r0
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     ae6:	movs	r1, #0
     ae8:	mov	r0, r3
     aea:	bl	5c60 <FatFile::seekSet(unsigned long)>
     aee:	ldr	r0, [r4, #96]	; 0x60
           m_xFile ? m_xFile->rename(dirFile->m_xFile, newPath) : false;
  }
  /** Set the file's current position to zero. */
  void rewind() {
    if (m_fFile) m_fFile->rewind();
    if (m_xFile) m_xFile->rewind();
     af0:	cbz	r0, afe <SDFile::rewindDirectory()+0x2a>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     af2:	movs	r2, #0
     af4:	movs	r3, #0
		sdfatfile.rewindDirectory();
	}
     af6:	ldmia.w	sp!, {r4, lr}
     afa:	b.w	3d2c <ExFatFile::seekSet(unsigned long long)>
     afe:	pop	{r4, pc}
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     b00:	ldr	r0, [r0, #96]	; 0x60
     b02:	cmp	r0, #0
     b04:	beq.n	ae0 <SDFile::rewindDirectory()+0xc>
     b06:	ldrb.w	r3, [r0, #49]	; 0x31
     b0a:	tst.w	r3, #80	; 0x50
     b0e:	beq.n	ae0 <SDFile::rewindDirectory()+0xc>
     b10:	movs	r2, #0
     b12:	movs	r3, #0
     b14:	b.w	3d2c <ExFatFile::seekSet(unsigned long long)>

00000b18 <MTPStorage_SD::freeClusters()>:
  uint32_t MTPStorage_SD::clusterCount() { return sd.clusterCount(); }
  uint32_t MTPStorage_SD::freeClusters() { return sd.freeClusterCount(); }
  uint32_t MTPStorage_SD::clusterSize() { return sd.sectorsPerCluster(); }
#else
  uint32_t MTPStorage_SD::clusterCount() { return SD.sdfs.clusterCount(); }
  uint32_t MTPStorage_SD::freeClusters() { return SD.sdfs.freeClusterCount(); }
     b18:	ldr	r3, [pc, #20]	; (b30 <MTPStorage_SD::freeClusters()+0x18>)
     b1a:	ldr.w	r0, [r3, #1144]	; 0x478
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
     b1e:	cbz	r0, b24 <MTPStorage_SD::freeClusters()+0xc>
    return m_fVol ? m_fVol->fatStartSector() :
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
     b20:	b.w	69ec <FatPartition::freeClusterCount()>
           m_xVol ? m_xVol->freeClusterCount() : 0;
     b24:	ldr.w	r0, [r3, #1148]	; 0x47c
     b28:	cbz	r0, b2e <MTPStorage_SD::freeClusters()+0x16>
     b2a:	b.w	492c <ExFatPartition::freeClusterCount()>
     b2e:	bx	lr
     b30:	.word	0x1fff14e0

00000b34 <SDFile::size()>:
		return false;
	}
	virtual uint32_t position() {
		return sdfatfile.curPosition();
	}
	virtual uint32_t size() {
     b34:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     b36:	cbz	r3, b3c <SDFile::size()+0x8>
     b38:	ldr	r0, [r3, #28]
     b3a:	bx	lr
     b3c:	ldr	r0, [r0, #96]	; 0x60
     b3e:	cbz	r0, b42 <SDFile::size()+0xe>
     b40:	ldr	r0, [r0, #16]
		return sdfatfile.size();
	}
     b42:	bx	lr

00000b44 <SDFile::position()>:
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
		return false;
	}
	virtual uint32_t position() {
     b44:	ldr	r3, [r0, #92]	; 0x5c
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     b46:	cbz	r3, b4c <SDFile::position()+0x8>
     b48:	ldr	r0, [r3, #20]
     b4a:	bx	lr
     b4c:	ldr	r0, [r0, #96]	; 0x60
     b4e:	cbz	r0, b52 <SDFile::position()+0xe>
     b50:	ldr	r0, [r0, #0]
		return sdfatfile.curPosition();
	}
     b52:	bx	lr

00000b54 <SDFile::read(void*, unsigned int)>:
		return sdfatfile.available();
	}
	virtual void flush() {
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
     b54:	ldr	r3, [r0, #92]	; 0x5c
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     b56:	cbz	r3, b5e <SDFile::read(void*, unsigned int)+0xa>
     b58:	mov	r0, r3
     b5a:	b.w	5a04 <FatFile::read(void*, unsigned int)>
     b5e:	ldr	r0, [r0, #96]	; 0x60
     b60:	cbz	r0, b66 <SDFile::read(void*, unsigned int)+0x12>
     b62:	b.w	3b18 <ExFatFile::read(void*, unsigned int)>
		return sdfatfile.read(buf, nbyte);
	}
     b66:	mov.w	r0, #4294967295
     b6a:	bx	lr

00000b6c <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  }
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
     b6c:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     b6e:	cbz	r3, b76 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     b70:	mov	r0, r3
     b72:	b.w	5be4 <FatFile::peek()>
     b76:	ldr	r0, [r0, #76]	; 0x4c
     b78:	cbz	r0, b7e <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     b7a:	b.w	3cfc <ExFatFile::peek()>
    return BaseFile::peek();
  }
     b7e:	mov.w	r0, #4294967295
     b82:	bx	lr

00000b84 <SDFile::isDirectory()>:
				filename = &zeroterm;
			}
		}
		return filename;
	}
	virtual boolean isDirectory(void) {
     b84:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     b86:	cbz	r3, b96 <SDFile::isDirectory()+0x12>
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {
    return m_attributes & FILE_ATTR_DIR;
     b88:	ldrb	r3, [r3, #0]
     b8a:	tst.w	r3, #112	; 0x70
     b8e:	ite	ne
     b90:	movne	r0, #1
     b92:	moveq	r0, #0
     b94:	bx	lr
     b96:	ldr	r0, [r0, #96]	; 0x60
     b98:	cbz	r0, ba8 <SDFile::isDirectory()+0x24>
    return isOpen() ? m_error & WRITE_ERROR : true;
  }
  /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
  /** \return True if this is a directory. */
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
     b9a:	ldrb.w	r3, [r0, #49]	; 0x31
     b9e:	tst.w	r3, #80	; 0x50
     ba2:	ite	ne
     ba4:	movne	r0, #1
     ba6:	moveq	r0, #0
		return sdfatfile.isDirectory();
	}
     ba8:	bx	lr
     baa:	nop

00000bac <SDFile::flush()>:
		return sdfatfile.peek();
	}
	virtual int available() {
		return sdfatfile.available();
	}
	virtual void flush() {
     bac:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     bae:	cbz	r3, bb6 <SDFile::flush()+0xa>
     bb0:	mov	r0, r3
     bb2:	b.w	6428 <FatFile::sync()>
     bb6:	ldr	r0, [r0, #96]	; 0x60
     bb8:	cbz	r0, bbe <SDFile::flush()+0x12>
     bba:	b.w	4e90 <ExFatFile::sync()>
     bbe:	bx	lr

00000bc0 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     bc0:	ldr	r3, [r0, #72]	; 0x48
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     bc2:	cbz	r3, bca <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     bc4:	mov	r0, r3
     bc6:	b.w	6434 <FatFile::write(void const*, unsigned int)>
     bca:	ldr	r0, [r0, #76]	; 0x4c
     bcc:	cbz	r0, bd2 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     bce:	b.w	5380 <ExFatFile::write(void const*, unsigned int)>
    return BaseFile::write(buffer, size);
  }
     bd2:	bx	lr

00000bd4 <SDFile::write(void const*, unsigned int)>:
	virtual void whoami() {
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
     bd4:	ldr	r3, [r0, #92]	; 0x5c
     bd6:	cbz	r3, bde <SDFile::write(void const*, unsigned int)+0xa>
     bd8:	mov	r0, r3
     bda:	b.w	6434 <FatFile::write(void const*, unsigned int)>
     bde:	ldr	r0, [r0, #96]	; 0x60
     be0:	cbz	r0, be6 <SDFile::write(void const*, unsigned int)+0x12>
     be2:	b.w	5380 <ExFatFile::write(void const*, unsigned int)>
		return sdfatfile.write(buf, size);
	}
     be6:	bx	lr

00000be8 <SDFile::available()>:
	virtual int peek() {
		return sdfatfile.peek();
	}
	virtual int available() {
     be8:	ldr	r2, [r0, #92]	; 0x5c
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     bea:	cbz	r2, c06 <SDFile::available()+0x1e>
  void fsetpos(const fspos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() {
    return isFile() ? fileSize() - curPosition() : 0;
     bec:	ldrb	r3, [r2, #0]
     bee:	and.w	r3, r3, #8
     bf2:	and.w	r0, r3, #255	; 0xff
     bf6:	cbz	r3, c3a <SDFile::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     bf8:	ldr	r3, [r2, #28]
     bfa:	ldr	r0, [r2, #20]
     bfc:	subs	r0, r3, r0
     bfe:	it	mi
     c00:	mvnmi.w	r0, #2147483648	; 0x80000000
     c04:	bx	lr
     c06:	ldr	r1, [r0, #96]	; 0x60
     c08:	cbz	r1, c3c <SDFile::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     c0a:	ldrb.w	r3, [r1, #49]	; 0x31
     c0e:	and.w	r3, r3, #8
     c12:	and.w	r0, r3, #255	; 0xff
     c16:	cbz	r3, c3a <SDFile::available()+0x52>
     c18:	ldrd	r2, r3, [r1, #16]
     c1c:	ldrd	r0, r1, [r1]
     c20:	subs	r0, r2, r0
     c22:	push	{r4, r5}
     c24:	sbc.w	r1, r3, r1
     c28:	movs	r5, #0
     c2a:	mvn.w	r4, #2147483648	; 0x80000000
     c2e:	cmp	r5, r1
     c30:	it	eq
     c32:	cmpeq	r4, r0
     c34:	bcs.n	c38 <SDFile::available()+0x50>
     c36:	mov	r0, r4
		return sdfatfile.available();
	}
     c38:	pop	{r4, r5}
     c3a:	bx	lr
     c3c:	mov	r0, r1
     c3e:	bx	lr

00000c40 <SDFile::seek(unsigned long, int)>:
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
		return sdfatfile.read(buf, nbyte);
	}
	virtual bool seek(uint32_t pos, int mode = SeekSet) {
     c40:	push	{r4, r5}
     c42:	mov	r4, r1
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
     c44:	cbz	r2, c54 <SDFile::seek(unsigned long, int)+0x14>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
     c46:	cmp	r2, #1
     c48:	beq.n	c80 <SDFile::seek(unsigned long, int)+0x40>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
     c4a:	cmp	r2, #2
     c4c:	beq.n	c60 <SDFile::seek(unsigned long, int)+0x20>
		return false;
	}
     c4e:	movs	r0, #0
     c50:	pop	{r4, r5}
     c52:	bx	lr
     c54:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     c56:	cbz	r3, c98 <SDFile::seek(unsigned long, int)+0x58>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     c58:	mov	r0, r3
     c5a:	pop	{r4, r5}
     c5c:	b.w	5c60 <FatFile::seekSet(unsigned long)>
     c60:	ldr	r5, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     c62:	cbz	r5, ca6 <SDFile::seek(unsigned long, int)+0x66>
     c64:	ldr	r1, [r5, #28]
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     c66:	movs	r3, #0
     c68:	adds	r2, r4, r1
     c6a:	adc.w	r3, r3, #0
     c6e:	cmp	r3, #1
     c70:	it	eq
     c72:	cmpeq	r2, #0
     c74:	bcs.n	c4e <SDFile::seek(unsigned long, int)+0xe>
     c76:	add	r1, r4
     c78:	mov	r0, r5
     c7a:	pop	{r4, r5}
     c7c:	b.w	5c60 <FatFile::seekSet(unsigned long)>
     c80:	ldr	r5, [r0, #92]	; 0x5c
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     c82:	cbz	r5, cbc <SDFile::seek(unsigned long, int)+0x7c>
     c84:	ldr	r1, [r5, #20]
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     c86:	movs	r3, #0
     c88:	adds	r2, r1, r4
     c8a:	adc.w	r3, r3, #0
     c8e:	cmp	r3, #1
     c90:	it	eq
     c92:	cmpeq	r2, #0
     c94:	bcs.n	c4e <SDFile::seek(unsigned long, int)+0xe>
     c96:	b.n	c76 <SDFile::seek(unsigned long, int)+0x36>
           m_xFile ? m_xFile->seekSet(pos) : false;
     c98:	ldr	r0, [r0, #96]	; 0x60
     c9a:	cmp	r0, #0
     c9c:	beq.n	c4e <SDFile::seek(unsigned long, int)+0xe>
     c9e:	mov	r2, r1
     ca0:	pop	{r4, r5}
     ca2:	b.w	3d2c <ExFatFile::seekSet(unsigned long long)>
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     ca6:	ldr	r0, [r0, #96]	; 0x60
     ca8:	cmp	r0, #0
     caa:	beq.n	c4e <SDFile::seek(unsigned long, int)+0xe>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     cac:	ldrd	r2, r3, [r0, #16]
     cb0:	adds	r2, r2, r1
     cb2:	adc.w	r3, r3, #0
     cb6:	pop	{r4, r5}
     cb8:	b.w	3d2c <ExFatFile::seekSet(unsigned long long)>
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     cbc:	ldr	r0, [r0, #96]	; 0x60
     cbe:	cmp	r0, #0
     cc0:	beq.n	c4e <SDFile::seek(unsigned long, int)+0xe>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     cc2:	ldrd	r2, r3, [r0]
     cc6:	adds	r2, r2, r1
     cc8:	adc.w	r3, r3, #0
     ccc:	pop	{r4, r5}
     cce:	b.w	3d2c <ExFatFile::seekSet(unsigned long long)>
     cd2:	nop

00000cd4 <SDFile::~SDFile()>:

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	virtual ~SDFile(void) {
     cd4:	push	{r3, r4, r5, lr}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     cd6:	ldr	r3, [r0, #92]	; 0x5c
     cd8:	ldr	r2, [pc, #80]	; (d2c <SDFile::~SDFile()+0x58>)
     cda:	str	r2, [r0, #0]
     cdc:	mov	r4, r0
		if (sdfatfile) sdfatfile.close();
     cde:	add.w	r5, r0, #36	; 0x24
     ce2:	cbz	r3, d22 <SDFile::~SDFile()+0x4e>
     ce4:	mov	r0, r5
     ce6:	bl	7898 <FsBaseFile::close()>
		if (filename) free(filename);
     cea:	ldr	r0, [r4, #100]	; 0x64
     cec:	cbz	r0, cf2 <SDFile::~SDFile()+0x1e>
     cee:	bl	b8f8 <free>
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     cf2:	ldr	r3, [pc, #60]	; (d30 <SDFile::~SDFile()+0x5c>)
     cf4:	str	r3, [r4, #20]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     cf6:	mov	r0, r5
     cf8:	bl	7898 <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     cfc:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     cfe:	ldr	r3, [pc, #52]	; (d34 <SDFile::~SDFile()+0x60>)
     d00:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     d02:	cbz	r2, d16 <SDFile::~SDFile()+0x42>
     d04:	ldr	r3, [r2, #16]
     d06:	subs	r3, #1
     d08:	str	r3, [r2, #16]
     d0a:	cbnz	r3, d16 <SDFile::~SDFile()+0x42>
     d0c:	ldr	r0, [r4, #16]
     d0e:	cbz	r0, d16 <SDFile::~SDFile()+0x42>
     d10:	ldr	r3, [r0, #0]
     d12:	ldr	r3, [r3, #32]
     d14:	blx	r3
	}
     d16:	mov	r0, r4
     d18:	movs	r1, #104	; 0x68
     d1a:	bl	aa90 <operator delete(void*, unsigned int)>
     d1e:	mov	r0, r4
     d20:	pop	{r3, r4, r5, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     d22:	ldr	r3, [r0, #96]	; 0x60
     d24:	cmp	r3, #0
     d26:	bne.n	ce4 <SDFile::~SDFile()+0x10>
     d28:	b.n	cea <SDFile::~SDFile()+0x16>
     d2a:	nop
     d2c:	.word	0x0000fb08
     d30:	.word	0x0000fac0
     d34:	.word	0x0000fa0c

00000d38 <SDFile::~SDFile()>:

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	virtual ~SDFile(void) {
     d38:	push	{r3, r4, r5, lr}
     d3a:	ldr	r3, [r0, #92]	; 0x5c
     d3c:	ldr	r2, [pc, #72]	; (d88 <SDFile::~SDFile()+0x50>)
     d3e:	str	r2, [r0, #0]
     d40:	mov	r4, r0
		if (sdfatfile) sdfatfile.close();
     d42:	add.w	r5, r0, #36	; 0x24
     d46:	cbz	r3, d7e <SDFile::~SDFile()+0x46>
     d48:	mov	r0, r5
     d4a:	bl	7898 <FsBaseFile::close()>
		if (filename) free(filename);
     d4e:	ldr	r0, [r4, #100]	; 0x64
     d50:	cbz	r0, d56 <SDFile::~SDFile()+0x1e>
     d52:	bl	b8f8 <free>
     d56:	ldr	r3, [pc, #52]	; (d8c <SDFile::~SDFile()+0x54>)
     d58:	str	r3, [r4, #20]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     d5a:	mov	r0, r5
     d5c:	bl	7898 <FsBaseFile::close()>
     d60:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     d62:	ldr	r3, [pc, #44]	; (d90 <SDFile::~SDFile()+0x58>)
     d64:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     d66:	cbz	r2, d7a <SDFile::~SDFile()+0x42>
     d68:	ldr	r3, [r2, #16]
     d6a:	subs	r3, #1
     d6c:	str	r3, [r2, #16]
     d6e:	cbnz	r3, d7a <SDFile::~SDFile()+0x42>
     d70:	ldr	r0, [r4, #16]
     d72:	cbz	r0, d7a <SDFile::~SDFile()+0x42>
     d74:	ldr	r3, [r0, #0]
     d76:	ldr	r3, [r3, #32]
     d78:	blx	r3
	}
     d7a:	mov	r0, r4
     d7c:	pop	{r3, r4, r5, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     d7e:	ldr	r3, [r0, #96]	; 0x60
     d80:	cmp	r3, #0
     d82:	bne.n	d48 <SDFile::~SDFile()+0x10>
     d84:	b.n	d4e <SDFile::~SDFile()+0x16>
     d86:	nop
     d88:	.word	0x0000fb08
     d8c:	.word	0x0000fac0
     d90:	.word	0x0000fa0c

00000d94 <MTPStorage_SD::ResetIndex()>:
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
     d94:	ldr	r3, [r0, #20]
     d96:	cmp	r3, #0
     d98:	beq.n	e92 <MTPStorage_SD::ResetIndex()+0xfe>
  uint32_t MTPStorage_SD::clusterSize() { return SD.sdfs.sectorsPerCluster(); }
#endif

  void MTPStorage_SD::ResetIndex() {
     d9a:	push	{r4, r5, r6, r7, lr}
     d9c:	ldr	r2, [r3, #0]
     d9e:	sub	sp, #84	; 0x54
     da0:	mov	r5, r0
     da2:	mov	r0, r3
     da4:	ldr	r3, [r2, #64]	; 0x40
     da6:	blx	r3
    if(!sd_isOpen(index_)) return;
     da8:	cbnz	r0, dae <MTPStorage_SD::ResetIndex()+0x1a>
    mtp_lock_storage(false);

    all_scanned_ = false;
    index_generated=false;
    open_file_ = 0xFFFFFFFEUL;
  }
     daa:	add	sp, #84	; 0x54
     dac:	pop	{r4, r5, r6, r7, pc}
     dae:	ldr	r0, [r5, #20]
     db0:	cbz	r0, dc4 <MTPStorage_SD::ResetIndex()+0x30>
     db2:	ldr	r3, [r0, #0]
     db4:	ldr	r3, [r3, #64]	; 0x40
     db6:	blx	r3

  void MTPStorage_SD::ResetIndex() {
    if(!sd_isOpen(index_)) return;
    
    mtp_lock_storage(true);
    if(sd_isOpen(index_)) index_.close();
     db8:	cbz	r0, dc4 <MTPStorage_SD::ResetIndex()+0x30>
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
     dba:	ldr	r0, [r5, #20]
     dbc:	cbz	r0, dc4 <MTPStorage_SD::ResetIndex()+0x30>
     dbe:	ldr	r3, [r0, #0]
     dc0:	ldr	r3, [r3, #60]	; 0x3c
     dc2:	blx	r3
     dc4:	ldr	r3, [pc, #268]	; (ed4 <MTPStorage_SD::ResetIndex()+0x140>)
     dc6:	ldr.w	r4, [r3, #1144]	; 0x478
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
     dca:	cmp	r4, #0
     dcc:	beq.n	e9c <MTPStorage_SD::ResetIndex()+0x108>
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     dce:	mov	r1, r4
     dd0:	mov	r0, sp
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     dd2:	movs	r4, #0
     dd4:	movs	r3, #1
     dd6:	ldr	r2, [pc, #256]	; (ed8 <MTPStorage_SD::ResetIndex()+0x144>)
     dd8:	strb.w	r4, [sp]
     ddc:	mov	r6, sp
     dde:	strb.w	r4, [sp, #1]
     de2:	strb.w	r4, [sp, #2]
     de6:	bl	59f4 <FatFile::open(FatVolume*, char const*, int)>
     dea:	cmp	r0, #0
     dec:	bne.n	e94 <MTPStorage_SD::ResetIndex()+0x100>
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
     dee:	movw	r3, #16898	; 0x4202
     df2:	mov	r0, r6
     df4:	ldr	r2, [pc, #224]	; (ed8 <MTPStorage_SD::ResetIndex()+0x144>)
     df6:	ldr	r1, [pc, #220]	; (ed4 <MTPStorage_SD::ResetIndex()+0x140>)
     df8:	bl	7a64 <FsVolume::open(char const*, int)>
     dfc:	ldr	r3, [sp, #72]	; 0x48
     dfe:	cmp	r3, #0
     e00:	beq.n	ec8 <MTPStorage_SD::ResetIndex()+0x134>
		if (file) return File(new SDFile(file));
     e02:	movs	r0, #104	; 0x68
     e04:	bl	aa8c <operator new(unsigned int)>
     e08:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     e0a:	ldrb.w	r6, [sp, #4]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     e0e:	ldr	r2, [sp, #8]
#endif

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     e10:	ldr	r0, [pc, #200]	; (edc <MTPStorage_SD::ResetIndex()+0x148>)
     e12:	ldr	r1, [pc, #204]	; (ee0 <MTPStorage_SD::ResetIndex()+0x14c>)
     e14:	strb	r6, [r4, #24]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     e16:	mov.w	r3, #1000	; 0x3e8
{
  public:
	constexpr Print() : write_error(0) {}
     e1a:	movs	r6, #0
     e1c:	str	r3, [r4, #8]
     e1e:	add	r7, sp, #16
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     e20:	ldrb.w	r3, [sp, #12]
     e24:	str	r0, [r4, #0]
     e26:	str	r1, [r4, #20]
     e28:	str	r2, [r4, #28]
     e2a:	strb.w	r3, [r4, #32]
     e2e:	add.w	r0, r4, #36	; 0x24
     e32:	mov	r1, r7
     e34:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     e36:	strb	r6, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     e38:	str	r6, [r4, #16]
     e3a:	bl	7820 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     e3e:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     e40:	ldr	r2, [pc, #160]	; (ee4 <MTPStorage_SD::ResetIndex()+0x150>)
     e42:	str	r6, [r4, #100]	; 0x64
     e44:	adds	r3, #1
     e46:	str	r2, [r4, #20]
     e48:	str	r3, [r4, #16]
     e4a:	ldr	r3, [pc, #156]	; (ee8 <MTPStorage_SD::ResetIndex()+0x154>)
     e4c:	str	r3, [sp, #0]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     e4e:	mov	r0, r7
     e50:	bl	7898 <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     e54:	ldr	r2, [r5, #20]
     e56:	cbz	r2, e60 <MTPStorage_SD::ResetIndex()+0xcc>
     e58:	ldr	r3, [r2, #16]
     e5a:	subs	r3, #1
     e5c:	str	r3, [r2, #16]
     e5e:	cbz	r3, e84 <MTPStorage_SD::ResetIndex()+0xf0>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
     e60:	str	r4, [r5, #20]
		if (f) f->refcount++;
     e62:	cbz	r4, e70 <MTPStorage_SD::ResetIndex()+0xdc>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     e64:	ldr	r3, [r4, #16]
     e66:	cbnz	r3, e70 <MTPStorage_SD::ResetIndex()+0xdc>
     e68:	ldr	r3, [r4, #0]
     e6a:	mov	r0, r4
     e6c:	ldr	r3, [r3, #32]
     e6e:	blx	r3
    sd_remove(indexFile);
    index_ = sd_open(indexFile, FILE_WRITE);
    mtp_lock_storage(false);

    all_scanned_ = false;
     e70:	movs	r3, #0
    index_generated=false;
    open_file_ = 0xFFFFFFFEUL;
     e72:	mvn.w	r2, #1
    if(sd_isOpen(index_)) index_.close();
    sd_remove(indexFile);
    index_ = sd_open(indexFile, FILE_WRITE);
    mtp_lock_storage(false);

    all_scanned_ = false;
     e76:	strb.w	r3, [r5, #77]	; 0x4d
    index_generated=false;
     e7a:	strb.w	r3, [r5, #76]	; 0x4c
    open_file_ = 0xFFFFFFFEUL;
     e7e:	str	r2, [r5, #68]	; 0x44
  }
     e80:	add	sp, #84	; 0x54
     e82:	pop	{r4, r5, r6, r7, pc}
     e84:	ldr	r0, [r5, #20]
     e86:	cmp	r0, #0
     e88:	beq.n	e60 <MTPStorage_SD::ResetIndex()+0xcc>
     e8a:	ldr	r3, [r0, #0]
     e8c:	ldr	r3, [r3, #32]
     e8e:	blx	r3
     e90:	b.n	e60 <MTPStorage_SD::ResetIndex()+0xcc>
     e92:	bx	lr
     e94:	mov	r0, sp
     e96:	bl	7064 <FatFile::remove()>
     e9a:	b.n	dee <MTPStorage_SD::ResetIndex()+0x5a>
     e9c:	ldr.w	r1, [r3, #1148]	; 0x47c
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     ea0:	mov	r6, sp
     ea2:	cmp	r1, #0
     ea4:	beq.n	dee <MTPStorage_SD::ResetIndex()+0x5a>
     ea6:	mov	r0, sp
     ea8:	movs	r3, #1
     eaa:	ldr	r2, [pc, #44]	; (ed8 <MTPStorage_SD::ResetIndex()+0x144>)
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     eac:	strb.w	r4, [sp, #49]	; 0x31
     eb0:	strb.w	r4, [sp, #50]	; 0x32
     eb4:	strb.w	r4, [sp, #51]	; 0x33
     eb8:	bl	4390 <ExFatFile::open(ExFatVolume*, char const*, int)>
     ebc:	cmp	r0, #0
     ebe:	beq.n	dee <MTPStorage_SD::ResetIndex()+0x5a>
     ec0:	mov	r0, sp
     ec2:	bl	4b74 <ExFatFile::remove()>
     ec6:	b.n	dee <MTPStorage_SD::ResetIndex()+0x5a>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     ec8:	ldr	r4, [sp, #76]	; 0x4c
     eca:	cmp	r4, #0
     ecc:	bne.n	e02 <MTPStorage_SD::ResetIndex()+0x6e>
     ece:	add	r7, sp, #16
     ed0:	b.n	e4a <MTPStorage_SD::ResetIndex()+0xb6>
     ed2:	nop
     ed4:	.word	0x1fff14e0
     ed8:	.word	0x0000fbcc
     edc:	.word	0x0000fb08
     ee0:	.word	0x0000fa9c
     ee4:	.word	0x0000fae4
     ee8:	.word	0x0000fac0

00000eec <mtp_yield()>:
//   support serialflash
//   partial object fetch/receive
//   events (notify usb host when local storage changes) (But, this seems too difficult)

// These should probably be weak.
void mtp_yield() {}
     eec:	bx	lr
     eee:	nop

00000ef0 <MTPStorage_SD::OpenIndex()>:
    index_generated = false;
    index_entries_ = 0;
  }

  void MTPStorage_SD::OpenIndex() 
  { if(sd_isOpen(index_)) return; // only once
     ef0:	push	{r4, r5, r6, r7, lr}
     ef2:	mov	r5, r0
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
     ef4:	ldr	r0, [r0, #20]
     ef6:	sub	sp, #84	; 0x54
     ef8:	cbz	r0, f06 <MTPStorage_SD::OpenIndex()+0x16>
     efa:	ldr	r3, [r0, #0]
     efc:	ldr	r3, [r3, #64]	; 0x40
     efe:	blx	r3
     f00:	cbz	r0, f06 <MTPStorage_SD::OpenIndex()+0x16>
    mtp_lock_storage(true);
    index_=sd_open(indexFile, FILE_WRITE);
    mtp_lock_storage(false);
  }
     f02:	add	sp, #84	; 0x54
     f04:	pop	{r4, r5, r6, r7, pc}
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
     f06:	movw	r3, #16898	; 0x4202
     f0a:	ldr	r2, [pc, #156]	; (fa8 <MTPStorage_SD::OpenIndex()+0xb8>)
     f0c:	ldr	r1, [pc, #156]	; (fac <MTPStorage_SD::OpenIndex()+0xbc>)
     f0e:	mov	r0, sp
     f10:	bl	7a64 <FsVolume::open(char const*, int)>
     f14:	ldr	r3, [sp, #72]	; 0x48
     f16:	cmp	r3, #0
     f18:	beq.n	f9e <MTPStorage_SD::OpenIndex()+0xae>
		if (file) return File(new SDFile(file));
     f1a:	movs	r0, #104	; 0x68
     f1c:	bl	aa8c <operator new(unsigned int)>
     f20:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     f22:	ldrb.w	r6, [sp, #4]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     f26:	ldr	r2, [sp, #8]
#endif

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     f28:	ldr	r0, [pc, #132]	; (fb0 <MTPStorage_SD::OpenIndex()+0xc0>)
     f2a:	ldr	r1, [pc, #136]	; (fb4 <MTPStorage_SD::OpenIndex()+0xc4>)
     f2c:	strb	r6, [r4, #24]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     f2e:	mov.w	r3, #1000	; 0x3e8
{
  public:
	constexpr Print() : write_error(0) {}
     f32:	movs	r6, #0
     f34:	str	r3, [r4, #8]
     f36:	add	r7, sp, #16
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     f38:	ldrb.w	r3, [sp, #12]
     f3c:	str	r0, [r4, #0]
     f3e:	str	r1, [r4, #20]
     f40:	str	r2, [r4, #28]
     f42:	strb.w	r3, [r4, #32]
     f46:	add.w	r0, r4, #36	; 0x24
     f4a:	mov	r1, r7
     f4c:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     f4e:	strb	r6, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     f50:	str	r6, [r4, #16]
     f52:	bl	7820 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     f56:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     f58:	ldr	r2, [pc, #92]	; (fb8 <MTPStorage_SD::OpenIndex()+0xc8>)
     f5a:	str	r6, [r4, #100]	; 0x64
     f5c:	adds	r3, #1
     f5e:	str	r2, [r4, #20]
     f60:	str	r3, [r4, #16]
     f62:	ldr	r3, [pc, #88]	; (fbc <MTPStorage_SD::OpenIndex()+0xcc>)
     f64:	str	r3, [sp, #0]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     f66:	mov	r0, r7
     f68:	bl	7898 <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     f6c:	ldr	r2, [r5, #20]
     f6e:	cbz	r2, f78 <MTPStorage_SD::OpenIndex()+0x88>
     f70:	ldr	r3, [r2, #16]
     f72:	subs	r3, #1
     f74:	str	r3, [r2, #16]
     f76:	cbz	r3, f90 <MTPStorage_SD::OpenIndex()+0xa0>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
     f78:	str	r4, [r5, #20]
		if (f) f->refcount++;
     f7a:	cmp	r4, #0
     f7c:	beq.n	f02 <MTPStorage_SD::OpenIndex()+0x12>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     f7e:	ldr	r3, [r4, #16]
     f80:	cmp	r3, #0
     f82:	bne.n	f02 <MTPStorage_SD::OpenIndex()+0x12>
     f84:	ldr	r3, [r4, #0]
     f86:	mov	r0, r4
     f88:	ldr	r3, [r3, #32]
     f8a:	blx	r3
     f8c:	add	sp, #84	; 0x54
     f8e:	pop	{r4, r5, r6, r7, pc}
     f90:	ldr	r0, [r5, #20]
     f92:	cmp	r0, #0
     f94:	beq.n	f78 <MTPStorage_SD::OpenIndex()+0x88>
     f96:	ldr	r3, [r0, #0]
     f98:	ldr	r3, [r3, #32]
     f9a:	blx	r3
     f9c:	b.n	f78 <MTPStorage_SD::OpenIndex()+0x88>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     f9e:	ldr	r4, [sp, #76]	; 0x4c
     fa0:	cmp	r4, #0
     fa2:	bne.n	f1a <MTPStorage_SD::OpenIndex()+0x2a>
     fa4:	add	r7, sp, #16
     fa6:	b.n	f62 <MTPStorage_SD::OpenIndex()+0x72>
     fa8:	.word	0x0000fbcc
     fac:	.word	0x1fff14e0
     fb0:	.word	0x0000fb08
     fb4:	.word	0x0000fa9c
     fb8:	.word	0x0000fae4
     fbc:	.word	0x0000fac0

00000fc0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:

  void MTPStorage_SD::WriteIndexRecord(uint32_t i, const Record& r) 
  {
     fc0:	push	{r4, r5, r6, lr}
     fc2:	mov	r5, r0
     fc4:	mov	r4, r1
     fc6:	mov	r6, r2
    OpenIndex();
     fc8:	bl	ef0 <MTPStorage_SD::OpenIndex()>
	}
	virtual void flush() {
		if (f) f->flush();
	}
	virtual bool seek(uint32_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
     fcc:	ldr	r0, [r5, #20]
    mtp_lock_storage(true);
    index_.seek(sizeof(r) * i);
     fce:	add.w	r4, r4, r4, lsl #2
     fd2:	cbz	r0, ff0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x30>
     fd4:	ldr	r3, [r0, #0]
     fd6:	lsls	r1, r4, #4
     fd8:	ldr	r3, [r3, #48]	; 0x30
     fda:	movs	r2, #0
     fdc:	blx	r3
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
     fde:	ldr	r0, [r5, #20]
     fe0:	cbz	r0, ff0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x30>
     fe2:	ldr	r3, [r0, #0]
     fe4:	mov	r1, r6
     fe6:	ldr	r3, [r3, #44]	; 0x2c
     fe8:	movs	r2, #80	; 0x50
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }
     fea:	ldmia.w	sp!, {r4, r5, r6, lr}
     fee:	bx	r3
     ff0:	pop	{r4, r5, r6, pc}
     ff2:	nop

00000ff4 <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.53]>:
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
     ff4:	push	{r4, r5, r6, lr}
     ff6:	ldr	r2, [pc, #136]	; (1080 <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.53]+0x8c>)
     ff8:	ldr.w	r5, [r2, #1144]	; 0x478
  { if (index_generated) return; 
    index_generated = true;
     ffc:	movs	r3, #1
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
     ffe:	sub	sp, #80	; 0x50
    1000:	mov	r4, r0
  { if (index_generated) return; 
    index_generated = true;
    1002:	strb.w	r3, [r0, #76]	; 0x4c
    1006:	cbz	r5, 1054 <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.53]+0x60>
    1008:	mov	r1, r5
    100a:	mov	r0, sp
    100c:	movs	r5, #0
    100e:	ldr	r2, [pc, #116]	; (1084 <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.53]+0x90>)
    1010:	strb.w	r5, [sp]
    1014:	mov	r6, sp
    1016:	strb.w	r5, [sp, #1]
    101a:	strb.w	r5, [sp, #2]
    101e:	bl	59f4 <FatFile::open(FatVolume*, char const*, int)>
    1022:	cbnz	r0, 104c <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.53]+0x58>
    sd_remove(indexFile);
    mtp_lock_storage(false);

    index_entries_ = 0;
    Record r;
    r.parent = 0;
    1024:	movs	r3, #0
    r.sibling = 0;
    r.child = 0;
    r.isdir = true;
    1026:	movs	r5, #1
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    1028:	str	r5, [r4, #72]	; 0x48
    WriteIndexRecord(new_record, r);
    102a:	mov	r0, r4
    102c:	mov	r2, r6
    102e:	mov	r1, r3
    r.parent = 0;
    r.sibling = 0;
    r.child = 0;
    r.isdir = true;
    r.scanned = false;
    strcpy(r.name, "/");
    1030:	movs	r4, #47	; 0x2f
    sd_remove(indexFile);
    mtp_lock_storage(false);

    index_entries_ = 0;
    Record r;
    r.parent = 0;
    1032:	str	r3, [sp, #0]
    r.sibling = 0;
    1034:	str	r3, [sp, #8]
    r.child = 0;
    1036:	str	r3, [sp, #4]
    r.isdir = true;
    r.scanned = false;
    1038:	strb.w	r3, [sp, #13]
    index_entries_ = 0;
    Record r;
    r.parent = 0;
    r.sibling = 0;
    r.child = 0;
    r.isdir = true;
    103c:	strb.w	r5, [sp, #12]
    r.scanned = false;
    strcpy(r.name, "/");
    1040:	strh.w	r4, [sp, #14]
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    1044:	bl	fc0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    r.child = 0;
    r.isdir = true;
    r.scanned = false;
    strcpy(r.name, "/");
    AppendIndexRecord(r);
  }
    1048:	add	sp, #80	; 0x50
    104a:	pop	{r4, r5, r6, pc}
    104c:	mov	r0, sp
    104e:	bl	7064 <FatFile::remove()>
    1052:	b.n	1024 <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.53]+0x30>
    1054:	ldr.w	r1, [r2, #1148]	; 0x47c
    1058:	mov	r6, sp
    105a:	cmp	r1, #0
    105c:	beq.n	1024 <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.53]+0x30>
    105e:	mov	r0, sp
    1060:	ldr	r2, [pc, #32]	; (1084 <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.53]+0x90>)
    1062:	strb.w	r5, [sp, #49]	; 0x31
    1066:	strb.w	r5, [sp, #50]	; 0x32
    106a:	strb.w	r5, [sp, #51]	; 0x33
    106e:	bl	4390 <ExFatFile::open(ExFatVolume*, char const*, int)>
    1072:	cmp	r0, #0
    1074:	beq.n	1024 <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.53]+0x30>
    1076:	mov	r0, sp
    1078:	bl	4b74 <ExFatFile::remove()>
    107c:	b.n	1024 <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.53]+0x30>
    107e:	nop
    1080:	.word	0x1fff14e0
    1084:	.word	0x0000fbcc

00001088 <MTPStorage_SD::ReadIndexRecord(unsigned long)>:
    return new_record;
  }

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    1088:	push	{r4, r5, r6, lr}
    108a:	mov	r5, r1
    108c:	mov	r4, r2
    Record ret;
    memset(&ret, 0, sizeof(ret));
    108e:	movs	r1, #0
    1090:	movs	r2, #80	; 0x50
    return new_record;
  }

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    1092:	mov	r6, r0
    Record ret;
    memset(&ret, 0, sizeof(ret));
    1094:	bl	c07c <memset>
    if (i > index_entries_) 
    1098:	ldr	r3, [r5, #72]	; 0x48
    109a:	cmp	r3, r4
    109c:	bcc.n	10c8 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x40>
    { memset(&ret, 0, sizeof(ret));
      return ret;
    }
    OpenIndex();
    109e:	mov	r0, r5
    10a0:	bl	ef0 <MTPStorage_SD::OpenIndex()>
	}
	virtual void flush() {
		if (f) f->flush();
	}
	virtual bool seek(uint32_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    10a4:	ldr	r0, [r5, #20]
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
    10a6:	add.w	r4, r4, r4, lsl #2
    10aa:	lsls	r1, r4, #4
    10ac:	cbz	r0, 10c4 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x3c>
    10ae:	ldr	r3, [r0, #0]
    10b0:	movs	r2, #0
    10b2:	ldr	r3, [r3, #48]	; 0x30
    10b4:	blx	r3
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    10b6:	ldr	r0, [r5, #20]
    10b8:	cbz	r0, 10c4 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x3c>
    10ba:	ldr	r3, [r0, #0]
    10bc:	movs	r2, #80	; 0x50
    10be:	ldr	r3, [r3, #40]	; 0x28
    10c0:	mov	r1, r6
    10c2:	blx	r3
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);
    return ret;
  }
    10c4:	mov	r0, r6
    10c6:	pop	{r4, r5, r6, pc}
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    Record ret;
    memset(&ret, 0, sizeof(ret));
    if (i > index_entries_) 
    { memset(&ret, 0, sizeof(ret));
    10c8:	movs	r2, #80	; 0x50
    10ca:	movs	r1, #0
    10cc:	mov	r0, r6
    10ce:	bl	c07c <memset>
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);
    return ret;
  }
    10d2:	mov	r0, r6
    10d4:	pop	{r4, r5, r6, pc}
    10d6:	nop

000010d8 <MTPStorage_SD::GetNextObjectHandle()>:
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle()
  {
    10d8:	push	{r4, r5, lr}
    while (true) 
    { if (next_ == 0) return 0;
    10da:	ldr	r5, [r0, #80]	; 0x50
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle()
  {
    10dc:	sub	sp, #84	; 0x54
    10de:	mov	r4, r0
    while (true) 
    { if (next_ == 0) return 0;
    10e0:	cbnz	r5, 10f2 <MTPStorage_SD::GetNextObjectHandle()+0x1a>
    10e2:	b.n	1120 <MTPStorage_SD::GetNextObjectHandle()+0x48>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
    10e4:	ldr	r3, [sp, #8]
    10e6:	str	r3, [r4, #80]	; 0x50
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    10e8:	ldrb.w	r3, [sp, #14]
    10ec:	cbnz	r3, 111a <MTPStorage_SD::GetNextObjectHandle()+0x42>
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle()
  {
    while (true) 
    { if (next_ == 0) return 0;
    10ee:	ldr	r5, [r4, #80]	; 0x50
    10f0:	cbz	r5, 1120 <MTPStorage_SD::GetNextObjectHandle()+0x48>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
    10f2:	mov	r2, r5
    10f4:	mov	r1, r4
    10f6:	mov	r0, sp
    10f8:	bl	1088 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    10fc:	ldrb.w	r2, [r4, #84]	; 0x54
    1100:	cmp	r2, #0
    1102:	bne.n	10e4 <MTPStorage_SD::GetNextObjectHandle()+0xc>
      { next_ = r.sibling;
      } 
      else 
      { next_++;
    1104:	ldr	r3, [r4, #80]	; 0x50
        if (next_ >= index_entries_) next_ = 0;
    1106:	ldr	r1, [r4, #72]	; 0x48
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
      } 
      else 
      { next_++;
    1108:	adds	r3, #1
    110a:	str	r3, [r4, #80]	; 0x50
        if (next_ >= index_entries_) next_ = 0;
    110c:	cmp	r3, r1
      }
      if (r.name[0]) return ret;
    110e:	ldrb.w	r3, [sp, #14]
      if (follow_sibling_) 
      { next_ = r.sibling;
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
    1112:	it	cs
    1114:	strcs	r2, [r4, #80]	; 0x50
      }
      if (r.name[0]) return ret;
    1116:	cmp	r3, #0
    1118:	beq.n	10ee <MTPStorage_SD::GetNextObjectHandle()+0x16>
    }
  }
    111a:	mov	r0, r5
    111c:	add	sp, #84	; 0x54
    111e:	pop	{r4, r5, pc}
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle()
  {
    while (true) 
    { if (next_ == 0) return 0;
    1120:	movs	r5, #0
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    }
  }
    1122:	mov	r0, r5
    1124:	add	sp, #84	; 0x54
    1126:	pop	{r4, r5, pc}

00001128 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*)>:

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent)
  {
    1128:	push	{r4, r5, r6, lr}
    112a:	sub	sp, #80	; 0x50
    112c:	mov	r6, r2
    Record r = ReadIndexRecord(handle);
    112e:	mov	r2, r1
    1130:	mov	r1, r0
    1132:	mov	r0, sp
      if (r.name[0]) return ret;
    }
  }

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent)
  {
    1134:	mov	r4, r3
    1136:	ldr	r5, [sp, #96]	; 0x60
    Record r = ReadIndexRecord(handle);
    1138:	bl	1088 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    113c:	mov	r0, r6
    113e:	add.w	r1, sp, #14
    1142:	bl	c564 <strcpy>
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    1146:	ldrb.w	r3, [sp, #12]

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    114a:	ldr	r2, [sp, #0]
    114c:	str	r2, [r5, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    114e:	cbnz	r3, 1158 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*)+0x30>
    1150:	ldr	r3, [sp, #4]
    1152:	str	r3, [r4, #0]
  }
    1154:	add	sp, #80	; 0x50
    1156:	pop	{r4, r5, r6, pc}
  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    1158:	mov.w	r3, #4294967295
    115c:	str	r3, [r4, #0]
  }
    115e:	add	sp, #80	; 0x50
    1160:	pop	{r4, r5, r6, pc}
    1162:	nop

00001164 <MTPStorage_SD::GetSize(unsigned long)>:

  uint32_t MTPStorage_SD::GetSize(uint32_t handle) 
  {
    1164:	push	{lr}
    1166:	sub	sp, #84	; 0x54
    return ReadIndexRecord(handle).child;
    1168:	mov	r2, r1
    116a:	mov	r1, r0
    116c:	mov	r0, sp
    116e:	bl	1088 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    1172:	ldr	r0, [sp, #4]
    1174:	add	sp, #84	; 0x54
    1176:	ldr.w	pc, [sp], #4
    117a:	nop

0000117c <MTPStorage_SD::close()>:
      file_.write(data,bytes);
      mtp_lock_storage(false);
  }

  void MTPStorage_SD::close() 
  {
    117c:	push	{r4, r5, lr}
    117e:	mov	r4, r0
	}
	virtual uint32_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
    1180:	ldr	r0, [r0, #40]	; 0x28
    1182:	sub	sp, #84	; 0x54
    1184:	cbz	r0, 11b8 <MTPStorage_SD::close()+0x3c>
    1186:	ldr	r3, [r0, #0]
    1188:	ldr	r3, [r3, #56]	; 0x38
    118a:	blx	r3
    118c:	mov	r5, r0
	}
	virtual void close() {
		if (f) f->close();
    118e:	ldr	r0, [r4, #40]	; 0x28
    1190:	cbz	r0, 1198 <MTPStorage_SD::close()+0x1c>
    1192:	ldr	r3, [r0, #0]
    1194:	ldr	r3, [r3, #60]	; 0x3c
    1196:	blx	r3
    mtp_lock_storage(true);
    uint64_t size = file_.size();
    file_.close();
    mtp_lock_storage(false);
    Record r = ReadIndexRecord(open_file_);
    1198:	mov	r0, sp
    119a:	ldr	r2, [r4, #68]	; 0x44
    119c:	mov	r1, r4
    119e:	bl	1088 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    r.child = size;
    WriteIndexRecord(open_file_, r);
    11a2:	mov	r2, sp
    11a4:	ldr	r1, [r4, #68]	; 0x44
    mtp_lock_storage(true);
    uint64_t size = file_.size();
    file_.close();
    mtp_lock_storage(false);
    Record r = ReadIndexRecord(open_file_);
    r.child = size;
    11a6:	str	r5, [sp, #4]
    WriteIndexRecord(open_file_, r);
    11a8:	mov	r0, r4
    11aa:	bl	fc0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    11ae:	mvn.w	r3, #1
    11b2:	str	r3, [r4, #68]	; 0x44
  }
    11b4:	add	sp, #84	; 0x54
    11b6:	pop	{r4, r5, pc}
	}
	virtual uint32_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
    11b8:	mov	r5, r0
    11ba:	b.n	1198 <MTPStorage_SD::close()+0x1c>

000011bc <MTPStorage_SD::ConstructFilename(int, char*, int)>:
    return ret;
  }

  void MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    if (i == 0) 
    11bc:	cbz	r1, 120c <MTPStorage_SD::ConstructFilename(int, char*, int)+0x50>
    mtp_lock_storage(false);
    return ret;
  }

  void MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    11be:	push	{r4, r5, r6, lr}
    11c0:	sub	sp, #80	; 0x50
    11c2:	mov	r5, r2
    11c4:	mov	r4, r0
    if (i == 0) 
    { strcpy(out, "/");
    }
    else 
    { Record tmp = ReadIndexRecord(i);
    11c6:	mov	r2, r1
    11c8:	mov	r6, r3
    11ca:	mov	r1, r0
    11cc:	mov	r0, sp
    11ce:	bl	1088 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      ConstructFilename(tmp.parent, out, len);
    11d2:	mov	r3, r6
    11d4:	mov	r0, r4
    11d6:	mov	r2, r5
    11d8:	ldr	r1, [sp, #0]
    11da:	bl	11bc <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strcat(out, "/");
    11de:	mov	r0, r5
    11e0:	bl	c640 <strlen>
    11e4:	adds	r3, r5, r0
    11e6:	mov	r4, r0
    11e8:	ldrb.w	r3, [r3, #-1]
    11ec:	cmp	r3, #47	; 0x2f
    11ee:	beq.n	11f8 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x3c>
    11f0:	ldr	r3, [pc, #48]	; (1224 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x68>)
    11f2:	ldrh	r3, [r3, #0]
    11f4:	strh	r3, [r5, r0]
    11f6:	adds	r4, #1
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
    11f8:	add.w	r0, sp, #14
    11fc:	bl	c640 <strlen>
    1200:	add	r0, r4
    1202:	adds	r0, #1
    1204:	cmp	r0, r6
    1206:	bcc.n	1214 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x58>
    }
  }
    1208:	add	sp, #80	; 0x50
    120a:	pop	{r4, r5, r6, pc}
  }

  void MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    if (i == 0) 
    { strcpy(out, "/");
    120c:	ldr	r3, [pc, #20]	; (1224 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x68>)
    120e:	ldrh	r3, [r3, #0]
    1210:	strh	r3, [r2, #0]
    1212:	bx	lr
    }
    else 
    { Record tmp = ReadIndexRecord(i);
      ConstructFilename(tmp.parent, out, len);
      if (out[strlen(out)-1] != '/') strcat(out, "/");
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
    1214:	add.w	r1, sp, #14
    1218:	mov	r0, r5
    121a:	bl	c524 <strcat>
    }
  }
    121e:	add	sp, #80	; 0x50
    1220:	pop	{r4, r5, r6, pc}
    1222:	nop
    1224:	.word	0x0000fbdc

00001228 <MTPStorage_SD::DeleteObject(unsigned long)>:
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }

  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    1228:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    122c:	adds	r2, r1, #1
    122e:	sub	sp, #496	; 0x1f0
    1230:	mov	r6, r1
    1232:	mov	r4, r0
    1234:	ite	ne
    1236:	movne	r5, r1
    1238:	moveq	r5, #0
    123a:	b.n	124c <MTPStorage_SD::DeleteObject(unsigned long)+0x24>
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
      if (!r.child) break;
    123c:	ldr	r3, [sp, #84]	; 0x54
      if (!DeleteObject(r.child))  return false;
    123e:	mov	r1, r3
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
      if (!r.child) break;
    1240:	cbz	r3, 126c <MTPStorage_SD::DeleteObject(unsigned long)+0x44>
      if (!DeleteObject(r.child))  return false;
    1242:	ldr	r3, [r4, #0]
    1244:	ldr	r3, [r3, #52]	; 0x34
    1246:	blx	r3
    1248:	cmp	r0, #0
    124a:	beq.n	131c <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
    124c:	mov	r2, r5
    124e:	mov	r1, r4
    1250:	mov	r0, sp
    1252:	bl	1088 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1256:	movs	r2, #80	; 0x50
    1258:	mov	r1, sp
    125a:	add.w	r0, sp, r2
    125e:	bl	9280 <memcpy>
      if (!r.isdir) break;
    1262:	ldrb.w	r3, [sp, #92]	; 0x5c
      if (!r.child) break;
      if (!DeleteObject(r.child))  return false;
    1266:	mov	r0, r4
  {
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
    1268:	cmp	r3, #0
    126a:	bne.n	123c <MTPStorage_SD::DeleteObject(unsigned long)+0x14>
      if (!DeleteObject(r.child))  return false;
    }

    // We can't actually delete the root folder,
    // but if we deleted everything else, return true.
    if (object == 0xFFFFFFFFUL) return true;
    126c:	adds	r3, r6, #1
    126e:	beq.n	1332 <MTPStorage_SD::DeleteObject(unsigned long)+0x10a>

    ConstructFilename(object, filename, 256);
    1270:	mov.w	r3, #256	; 0x100
    1274:	add	r2, sp, #240	; 0xf0
    1276:	mov	r1, r6
    1278:	mov	r0, r4
    127a:	bl	11bc <MTPStorage_SD::ConstructFilename(int, char*, int)>
    bool success;
    mtp_lock_storage(true);
    if (r.isdir) success = sd_rmdir(filename); else  success = sd_remove(filename);
    127e:	ldrb.w	r7, [sp, #92]	; 0x5c
    1282:	ldr	r3, [pc, #296]	; (13ac <MTPStorage_SD::DeleteObject(unsigned long)+0x184>)
    1284:	cmp	r7, #0
    1286:	beq.n	133a <MTPStorage_SD::DeleteObject(unsigned long)+0x112>
    1288:	ldr.w	r7, [r3, #1144]	; 0x478
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
           m_xVol ? m_xVol->rmdir(path) : false;
    128c:	cbz	r7, 12fa <MTPStorage_SD::DeleteObject(unsigned long)+0xd2>
    128e:	add	r5, sp, #160	; 0xa0
    1290:	mov.w	lr, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    1294:	add	r2, sp, #240	; 0xf0
    1296:	mov	r1, r7
    1298:	mov	r0, r5
    129a:	mov	r3, lr
    129c:	strb.w	lr, [r5]
    12a0:	strb.w	lr, [r5, #1]
    12a4:	strb.w	lr, [r5, #2]
    12a8:	bl	59f4 <FatFile::open(FatVolume*, char const*, int)>
    12ac:	cbz	r0, 131c <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    12ae:	mov	r0, r5
    12b0:	bl	5d1c <FatFile::rmdir()>
    mtp_lock_storage(false);
    if (!success) return false;
    12b4:	cbz	r0, 131c <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    
    r.name[0] = 0;
    int p = r.parent;
    12b6:	ldr.w	r8, [sp, #80]	; 0x50
    mtp_lock_storage(true);
    if (r.isdir) success = sd_rmdir(filename); else  success = sd_remove(filename);
    mtp_lock_storage(false);
    if (!success) return false;
    
    r.name[0] = 0;
    12ba:	movs	r3, #0
    int p = r.parent;
    WriteIndexRecord(object, r);
    12bc:	add	r2, sp, #80	; 0x50
    12be:	mov	r1, r6
    12c0:	mov	r0, r4
    mtp_lock_storage(true);
    if (r.isdir) success = sd_rmdir(filename); else  success = sd_remove(filename);
    mtp_lock_storage(false);
    if (!success) return false;
    
    r.name[0] = 0;
    12c2:	strb.w	r3, [sp, #94]	; 0x5e
    int p = r.parent;
    WriteIndexRecord(object, r);
    12c6:	bl	fc0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record tmp = ReadIndexRecord(p);
    12ca:	mov	r2, r8
    12cc:	mov	r1, r4
    12ce:	mov	r0, r5
    12d0:	bl	1088 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (tmp.child == object) 
    12d4:	ldr	r7, [r5, #4]
    12d6:	cmp	r6, r7
    12d8:	beq.n	1324 <MTPStorage_SD::DeleteObject(unsigned long)+0xfc>
    { tmp.child = r.sibling;
      WriteIndexRecord(p, tmp);
    } 
    else 
    { int c = tmp.child;
      while (c) 
    12da:	cbz	r7, 1332 <MTPStorage_SD::DeleteObject(unsigned long)+0x10a>
      { tmp = ReadIndexRecord(c);
    12dc:	mov	r2, r7
    12de:	mov	r1, r4
    12e0:	mov	r0, sp
    12e2:	bl	1088 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    12e6:	movs	r2, #80	; 0x50
    12e8:	mov	r1, sp
    12ea:	mov	r0, r5
    12ec:	bl	9280 <memcpy>
        if (tmp.sibling == object) 
    12f0:	ldr	r3, [r5, #8]
    12f2:	cmp	r6, r3
    12f4:	beq.n	1390 <MTPStorage_SD::DeleteObject(unsigned long)+0x168>
    { tmp.child = r.sibling;
      WriteIndexRecord(p, tmp);
    } 
    else 
    { int c = tmp.child;
      while (c) 
    12f6:	mov	r7, r3
    12f8:	b.n	12da <MTPStorage_SD::DeleteObject(unsigned long)+0xb2>
    12fa:	ldr.w	r1, [r3, #1148]	; 0x47c
    12fe:	cbz	r1, 131c <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    1300:	add	r5, sp, #160	; 0xa0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    1302:	add	r2, sp, #240	; 0xf0
    1304:	mov	r3, r7
    1306:	mov	r0, r5
    1308:	strb.w	r7, [r5, #49]	; 0x31
    130c:	strb.w	r7, [r5, #50]	; 0x32
    1310:	strb.w	r7, [r5, #51]	; 0x33
    1314:	bl	4390 <ExFatFile::open(ExFatVolume*, char const*, int)>
    1318:	cmp	r0, #0
    131a:	bne.n	13a2 <MTPStorage_SD::DeleteObject(unsigned long)+0x17a>
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
      if (!r.child) break;
      if (!DeleteObject(r.child))  return false;
    131c:	movs	r0, #0
        { c = tmp.sibling;
        }
      }
    }
    return true;
  }
    131e:	add	sp, #496	; 0x1f0
    1320:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    r.name[0] = 0;
    int p = r.parent;
    WriteIndexRecord(object, r);
    Record tmp = ReadIndexRecord(p);
    if (tmp.child == object) 
    { tmp.child = r.sibling;
    1324:	ldr	r3, [sp, #88]	; 0x58
    1326:	str	r3, [r5, #4]
      WriteIndexRecord(p, tmp);
    1328:	mov	r2, r5
    132a:	mov	r1, r8
    132c:	mov	r0, r4
    132e:	bl	fc0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        else 
        { c = tmp.sibling;
        }
      }
    }
    return true;
    1332:	movs	r0, #1
  }
    1334:	add	sp, #496	; 0x1f0
    1336:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    133a:	ldr.w	lr, [r3, #1144]	; 0x478
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
    133e:	cmp.w	lr, #0
    1342:	beq.n	1364 <MTPStorage_SD::DeleteObject(unsigned long)+0x13c>
    1344:	add	r5, sp, #160	; 0xa0
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    1346:	add	r2, sp, #240	; 0xf0
    1348:	mov	r1, lr
    134a:	mov	r0, r5
    134c:	movs	r3, #1
    134e:	strb	r7, [r5, #0]
    1350:	strb	r7, [r5, #1]
    1352:	strb	r7, [r5, #2]
    1354:	bl	59f4 <FatFile::open(FatVolume*, char const*, int)>
    1358:	cmp	r0, #0
    135a:	beq.n	131c <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    135c:	mov	r0, r5
    135e:	bl	7064 <FatFile::remove()>
    1362:	b.n	12b4 <MTPStorage_SD::DeleteObject(unsigned long)+0x8c>
    1364:	ldr.w	r1, [r3, #1148]	; 0x47c
    1368:	cmp	r1, #0
    136a:	beq.n	131c <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    136c:	add	r5, sp, #160	; 0xa0
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    136e:	add	r2, sp, #240	; 0xf0
    1370:	mov	r0, r5
    1372:	movs	r3, #1
    1374:	strb.w	lr, [r5, #49]	; 0x31
    1378:	strb.w	lr, [r5, #50]	; 0x32
    137c:	strb.w	lr, [r5, #51]	; 0x33
    1380:	bl	4390 <ExFatFile::open(ExFatVolume*, char const*, int)>
    1384:	cmp	r0, #0
    1386:	beq.n	131c <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    1388:	mov	r0, r5
    138a:	bl	4b74 <ExFatFile::remove()>
    138e:	b.n	12b4 <MTPStorage_SD::DeleteObject(unsigned long)+0x8c>
    else 
    { int c = tmp.child;
      while (c) 
      { tmp = ReadIndexRecord(c);
        if (tmp.sibling == object) 
        { tmp.sibling = r.sibling;
    1390:	ldr	r3, [sp, #88]	; 0x58
    1392:	str	r3, [r5, #8]
          WriteIndexRecord(c, tmp);
    1394:	mov	r0, r4
    1396:	mov	r2, r5
    1398:	mov	r1, r7
    139a:	bl	fc0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        else 
        { c = tmp.sibling;
        }
      }
    }
    return true;
    139e:	movs	r0, #1
      while (c) 
      { tmp = ReadIndexRecord(c);
        if (tmp.sibling == object) 
        { tmp.sibling = r.sibling;
          WriteIndexRecord(c, tmp);
          break;
    13a0:	b.n	131e <MTPStorage_SD::DeleteObject(unsigned long)+0xf6>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    13a2:	mov	r0, r5
    13a4:	bl	4c9c <ExFatFile::rmdir()>
    13a8:	b.n	12b4 <MTPStorage_SD::DeleteObject(unsigned long)+0x8c>
    13aa:	nop
    13ac:	.word	0x1fff14e0

000013b0 <MTPStorage_SD::rename(unsigned long, char const*)>:
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  void MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[256];
    13b0:	push	{r4, r5, r6, lr}
    13b2:	sub.w	sp, sp, #648	; 0x288
    13b6:	mov	r4, r0
    13b8:	mov	r5, r1
    char newName[256];

    ConstructFilename(handle, oldName, 256);
    13ba:	mov.w	r3, #256	; 0x100
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  void MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[256];
    13be:	mov	r6, r2
    char newName[256];

    ConstructFilename(handle, oldName, 256);
    13c0:	add	r2, sp, #136	; 0x88
    13c2:	bl	11bc <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Record p1 = ReadIndexRecord(handle);
    13c6:	mov	r2, r5
    13c8:	mov	r1, r4
    13ca:	add	r0, sp, #56	; 0x38
    13cc:	bl	1088 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(p1.name,name);
    13d0:	mov	r1, r6
    13d2:	add.w	r0, sp, #70	; 0x46
    13d6:	bl	c564 <strcpy>
    WriteIndexRecord(handle, p1);
    13da:	mov	r0, r4
    13dc:	add	r2, sp, #56	; 0x38
    13de:	mov	r1, r5
    13e0:	bl	fc0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, 256);
    13e4:	mov	r0, r4
    13e6:	mov.w	r3, #256	; 0x100
    13ea:	mov	r1, r5
    13ec:	add	r2, sp, #392	; 0x188
    13ee:	bl	11bc <MTPStorage_SD::ConstructFilename(int, char*, int)>
    13f2:	ldr	r3, [pc, #116]	; (1468 <MTPStorage_SD::rename(unsigned long, char const*)+0xb8>)
    13f4:	ldr.w	r4, [r3, #1144]	; 0x478
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    13f8:	cbz	r4, 1430 <MTPStorage_SD::rename(unsigned long, char const*)+0x80>
    13fa:	movs	r5, #0
    return truncate(path.c_str(), length);
  }
#endif  // ENABLE_ARDUINO_STRING

 private:
  FatFile* vwd() {return &m_vwd;}
    13fc:	add.w	r4, r4, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    FatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    1400:	add	r2, sp, #136	; 0x88
    1402:	mov	r1, r4
    1404:	mov	r0, sp
    1406:	mov	r3, r5
    1408:	strb.w	r5, [sp]
    140c:	strb.w	r5, [sp, #1]
    1410:	strb.w	r5, [sp, #2]
    1414:	bl	58f0 <FatFile::open(FatFile*, char const*, int)>
    1418:	cbnz	r0, 1420 <MTPStorage_SD::rename(unsigned long, char const*)+0x70>

    sd_rename(oldName,newName);
  }
    141a:	add.w	sp, sp, #648	; 0x288
    141e:	pop	{r4, r5, r6, pc}
    1420:	add	r2, sp, #392	; 0x188
    1422:	mov	r1, r4
    1424:	mov	r0, sp
    1426:	bl	61f0 <FatFile::rename(FatFile*, char const*)>
    142a:	add.w	sp, sp, #648	; 0x288
    142e:	pop	{r4, r5, r6, pc}
    1430:	ldr.w	r1, [r3, #1148]	; 0x47c
    1434:	cmp	r1, #0
    1436:	beq.n	141a <MTPStorage_SD::rename(unsigned long, char const*)+0x6a>
  bool rmdir(const char* path);
#endif  //  USE_EXFAT_UNICODE_NAMES

 private:
  friend ExFatFile;
  ExFatFile* vwd() {return &m_vwd;}
    1438:	add.w	r5, r1, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const ExChar_t* oldPath, const ExChar_t* newPath) {
    ExFatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    143c:	add	r2, sp, #136	; 0x88
    143e:	mov	r1, r5
    1440:	mov	r3, r4
    1442:	mov	r0, sp
    1444:	strb.w	r4, [sp, #49]	; 0x31
    1448:	strb.w	r4, [sp, #50]	; 0x32
    144c:	strb.w	r4, [sp, #51]	; 0x33
    1450:	bl	4278 <ExFatFile::open(ExFatFile*, char const*, int)>
    1454:	cmp	r0, #0
    1456:	beq.n	141a <MTPStorage_SD::rename(unsigned long, char const*)+0x6a>
    1458:	add	r2, sp, #392	; 0x188
    145a:	mov	r1, r5
    145c:	mov	r0, sp
    145e:	bl	5188 <ExFatFile::rename(ExFatFile*, char const*)>
    1462:	add.w	sp, sp, #648	; 0x288
    1466:	pop	{r4, r5, r6, pc}
    1468:	.word	0x1fff14e0

0000146c <MTPStorage_SD::move(unsigned long, unsigned long)>:

  void MTPStorage_SD::move(uint32_t handle, uint32_t newParent ) 
  { char oldName[256];
    146c:	push	{r4, r5, r6, lr}
    146e:	sub.w	sp, sp, #728	; 0x2d8
    1472:	mov	r4, r2
    1474:	mov	r5, r0
    1476:	mov	r6, r1
    char newName[256];

    ConstructFilename(handle, oldName, 256);
    1478:	mov.w	r3, #256	; 0x100
    147c:	add	r2, sp, #216	; 0xd8
    147e:	bl	11bc <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Record p1 = ReadIndexRecord(handle);
    1482:	mov	r2, r6
    1484:	mov	r1, r5
    1486:	add	r0, sp, #56	; 0x38
    1488:	bl	1088 <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    if (newParent == 0xFFFFFFFFUL) newParent = 0;
    148c:	adds	r3, r4, #1
    148e:	it	eq
    1490:	moveq	r4, #0
    Record p2 = ReadIndexRecord(newParent); // is pointing to last object in directory
    1492:	mov	r2, r4
    1494:	mov	r1, r5
    1496:	add	r0, sp, #136	; 0x88
    1498:	bl	1088 <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    p1.sibling = p2.child;
    149c:	ldr	r3, [sp, #140]	; 0x8c
    149e:	str	r3, [sp, #64]	; 0x40
    p1.parent = newParent;

    p2.child = handle; 
    WriteIndexRecord(handle, p1);
    14a0:	add	r2, sp, #56	; 0x38
    14a2:	mov	r1, r6
    14a4:	mov	r0, r5

    if (newParent == 0xFFFFFFFFUL) newParent = 0;
    Record p2 = ReadIndexRecord(newParent); // is pointing to last object in directory

    p1.sibling = p2.child;
    p1.parent = newParent;
    14a6:	str	r4, [sp, #56]	; 0x38

    p2.child = handle; 
    14a8:	str	r6, [sp, #140]	; 0x8c
    WriteIndexRecord(handle, p1);
    14aa:	bl	fc0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent, p2);
    14ae:	mov	r1, r4
    14b0:	add	r2, sp, #136	; 0x88
    14b2:	mov	r0, r5
    14b4:	bl	fc0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

    ConstructFilename(handle, newName, 256);
    14b8:	mov.w	r3, #256	; 0x100
    14bc:	mov	r1, r6
    14be:	mov	r0, r5
    14c0:	add	r2, sp, #472	; 0x1d8
    14c2:	bl	11bc <MTPStorage_SD::ConstructFilename(int, char*, int)>
    14c6:	ldr	r3, [pc, #116]	; (153c <MTPStorage_SD::move(unsigned long, unsigned long)+0xd0>)
    14c8:	ldr.w	r4, [r3, #1144]	; 0x478
    14cc:	cbz	r4, 1504 <MTPStorage_SD::move(unsigned long, unsigned long)+0x98>
    14ce:	movs	r5, #0
    return truncate(path.c_str(), length);
  }
#endif  // ENABLE_ARDUINO_STRING

 private:
  FatFile* vwd() {return &m_vwd;}
    14d0:	add.w	r4, r4, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    FatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    14d4:	add	r2, sp, #216	; 0xd8
    14d6:	mov	r1, r4
    14d8:	mov	r0, sp
    14da:	mov	r3, r5
    14dc:	strb.w	r5, [sp]
    14e0:	strb.w	r5, [sp, #1]
    14e4:	strb.w	r5, [sp, #2]
    14e8:	bl	58f0 <FatFile::open(FatFile*, char const*, int)>
    14ec:	cbnz	r0, 14f4 <MTPStorage_SD::move(unsigned long, unsigned long)+0x88>
    sd_rename(oldName,newName);
  }
    14ee:	add.w	sp, sp, #728	; 0x2d8
    14f2:	pop	{r4, r5, r6, pc}
    14f4:	add	r2, sp, #472	; 0x1d8
    14f6:	mov	r1, r4
    14f8:	mov	r0, sp
    14fa:	bl	61f0 <FatFile::rename(FatFile*, char const*)>
    14fe:	add.w	sp, sp, #728	; 0x2d8
    1502:	pop	{r4, r5, r6, pc}
    1504:	ldr.w	r1, [r3, #1148]	; 0x47c
    1508:	cmp	r1, #0
    150a:	beq.n	14ee <MTPStorage_SD::move(unsigned long, unsigned long)+0x82>
  bool rmdir(const char* path);
#endif  //  USE_EXFAT_UNICODE_NAMES

 private:
  friend ExFatFile;
  ExFatFile* vwd() {return &m_vwd;}
    150c:	add.w	r5, r1, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const ExChar_t* oldPath, const ExChar_t* newPath) {
    ExFatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    1510:	add	r2, sp, #216	; 0xd8
    1512:	mov	r1, r5
    1514:	mov	r3, r4
    1516:	mov	r0, sp
    1518:	strb.w	r4, [sp, #49]	; 0x31
    151c:	strb.w	r4, [sp, #50]	; 0x32
    1520:	strb.w	r4, [sp, #51]	; 0x33
    1524:	bl	4278 <ExFatFile::open(ExFatFile*, char const*, int)>
    1528:	cmp	r0, #0
    152a:	beq.n	14ee <MTPStorage_SD::move(unsigned long, unsigned long)+0x82>
    152c:	add	r2, sp, #472	; 0x1d8
    152e:	mov	r1, r5
    1530:	mov	r0, sp
    1532:	bl	5188 <ExFatFile::rename(ExFatFile*, char const*)>
    1536:	add.w	sp, sp, #728	; 0x2d8
    153a:	pop	{r4, r5, r6, pc}
    153c:	.word	0x1fff14e0

00001540 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    1540:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (open_file_ == i && mode_ == mode) return;
    1544:	ldr	r3, [r0, #68]	; 0x44
    1546:	cmp	r3, r1
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    1548:	sub	sp, #340	; 0x154
    if (open_file_ == i && mode_ == mode) return;
    154a:	beq.n	1622 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xe2>
    154c:	mov	r5, r0
    154e:	mov	r7, r2
    char filename[256];
    ConstructFilename(i, filename, 256);
    1550:	mov.w	r3, #256	; 0x100
    1554:	add	r2, sp, #80	; 0x50
    1556:	mov	r6, r1
    1558:	bl	11bc <MTPStorage_SD::ConstructFilename(int, char*, int)>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    155c:	ldr	r0, [r5, #40]	; 0x28
    155e:	cbz	r0, 1572 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x32>
    1560:	ldr	r3, [r0, #0]
    1562:	ldr	r3, [r3, #64]	; 0x40
    1564:	blx	r3
    mtp_lock_storage(true);
    if(sd_isOpen(file_)) file_.close();
    1566:	cbz	r0, 1572 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x32>
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    1568:	ldr	r0, [r5, #40]	; 0x28
    156a:	cbz	r0, 1572 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x32>
    156c:	ldr	r3, [r0, #0]
    156e:	ldr	r3, [r3, #60]	; 0x3c
    1570:	blx	r3
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(24)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    1572:	uxtb	r3, r7
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(24)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
    1574:	cmp	r3, #1
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    1576:	add	r2, sp, #80	; 0x50
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(24)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
    1578:	movw	r3, #16898	; 0x4202
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    157c:	mov	r0, sp
    157e:	it	ne
    1580:	movne	r3, #0
    1582:	ldr	r1, [pc, #184]	; (163c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xfc>)
    1584:	bl	7a64 <FsVolume::open(char const*, int)>
    1588:	ldr	r3, [sp, #72]	; 0x48
    158a:	cmp	r3, #0
    158c:	beq.n	162e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xee>
		if (file) return File(new SDFile(file));
    158e:	movs	r0, #104	; 0x68
    1590:	bl	aa8c <operator new(unsigned int)>
    1594:	mov	r4, r0
    1596:	mov.w	r3, #1000	; 0x3e8
#endif

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    159a:	ldr	r2, [pc, #164]	; (1640 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x100>)
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    159c:	ldrb.w	r0, [sp, #4]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    15a0:	ldr	r1, [pc, #160]	; (1644 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x104>)
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    15a2:	str	r3, [r4, #8]
{
  public:
	constexpr Print() : write_error(0) {}
    15a4:	mov.w	r8, #0
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    15a8:	ldr	r3, [sp, #8]
    15aa:	str	r2, [r4, #0]
    15ac:	add.w	r9, sp, #16
    15b0:	ldrb.w	r2, [sp, #12]
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    15b4:	strb	r0, [r4, #24]
    15b6:	str	r1, [r4, #20]
    15b8:	str	r3, [r4, #28]
    15ba:	strb.w	r2, [r4, #32]
    15be:	add.w	r0, r4, #36	; 0x24
    15c2:	mov	r1, r9
{
  public:
	constexpr Print() : write_error(0) {}
    15c4:	strb.w	r8, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    15c8:	strb.w	r8, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    15cc:	str.w	r8, [r4, #16]
    15d0:	bl	7820 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    15d4:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    15d6:	ldr	r2, [pc, #112]	; (1648 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x108>)
    15d8:	str.w	r8, [r4, #100]	; 0x64
    15dc:	adds	r3, #1
    15de:	str	r2, [r4, #20]
    15e0:	str	r3, [r4, #16]
    15e2:	ldr	r3, [pc, #104]	; (164c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x10c>)
    15e4:	str	r3, [sp, #0]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
    15e6:	mov	r0, r9
    15e8:	bl	7898 <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    15ec:	ldr	r2, [r5, #40]	; 0x28
    15ee:	cbz	r2, 15f8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xb8>
    15f0:	ldr	r3, [r2, #16]
    15f2:	subs	r3, #1
    15f4:	str	r3, [r2, #16]
    15f6:	cbz	r3, 160a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xca>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    15f8:	str	r4, [r5, #40]	; 0x28
		if (f) f->refcount++;
    15fa:	cbz	r4, 1600 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xc0>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    15fc:	ldr	r3, [r4, #16]
    15fe:	cbz	r3, 1618 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xd8>
    file_=sd_open(filename,mode);
    open_file_ = i;
    1600:	str	r6, [r5, #68]	; 0x44
    mode_ = mode;
    1602:	str	r7, [r5, #64]	; 0x40
    mtp_lock_storage(false);
  }
    1604:	add	sp, #340	; 0x154
    1606:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    160a:	ldr	r0, [r5, #40]	; 0x28
    160c:	cmp	r0, #0
    160e:	beq.n	15f8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xb8>
    1610:	ldr	r3, [r0, #0]
    1612:	ldr	r3, [r3, #32]
    1614:	blx	r3
    1616:	b.n	15f8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xb8>
    1618:	ldr	r3, [r4, #0]
    161a:	mov	r0, r4
    161c:	ldr	r3, [r3, #32]
    161e:	blx	r3
    1620:	b.n	1600 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xc0>
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    if (open_file_ == i && mode_ == mode) return;
    1622:	ldr	r3, [r0, #64]	; 0x40
    1624:	cmp	r3, r2
    1626:	bne.n	154c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xc>
    if(sd_isOpen(file_)) file_.close();
    file_=sd_open(filename,mode);
    open_file_ = i;
    mode_ = mode;
    mtp_lock_storage(false);
  }
    1628:	add	sp, #340	; 0x154
    162a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    162e:	ldr	r4, [sp, #76]	; 0x4c
    1630:	cmp	r4, #0
    1632:	bne.n	158e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x4e>
    1634:	add.w	r9, sp, #16
    1638:	b.n	15e2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xa2>
    163a:	nop
    163c:	.word	0x1fff14e0
    1640:	.word	0x0000fb08
    1644:	.word	0x0000fa9c
    1648:	.word	0x0000fae4
    164c:	.word	0x0000fac0

00001650 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    1650:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1654:	mov	r4, r0
    1656:	mov	r7, r2
    OpenFileByIndex(handle);
    1658:	movs	r2, #0
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    165a:	mov	r5, r3
    165c:	ldr	r6, [sp, #24]
    OpenFileByIndex(handle);
    165e:	bl	1540 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
	}
	virtual void flush() {
		if (f) f->flush();
	}
	virtual bool seek(uint32_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    1662:	ldr	r0, [r4, #40]	; 0x28
    1664:	cbz	r0, 1682 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x32>
    1666:	ldr	r3, [r0, #0]
    1668:	mov	r1, r7
    166a:	ldr	r3, [r3, #48]	; 0x30
    166c:	movs	r2, #0
    166e:	blx	r3
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    1670:	ldr	r0, [r4, #40]	; 0x28
    1672:	cbz	r0, 1682 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x32>
    1674:	ldr	r3, [r0, #0]
    1676:	mov	r2, r6
    1678:	mov	r1, r5
    167a:	ldr	r3, [r3, #40]	; 0x28
    mtp_lock_storage(true);
    file_.seek(pos);
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }
    167c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1680:	bx	r3
    1682:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1686:	nop

00001688 <MTPStorage_SD::Create(unsigned long, bool, char const*)>:
    }
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t parent,  bool folder, const char* filename)
  {
    1688:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    168c:	cmp.w	r1, #4294967295
    1690:	ite	ne
    1692:	movne	r6, r1
    1694:	moveq	r6, #0
    }
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t parent,  bool folder, const char* filename)
  {
    1696:	sub	sp, #476	; 0x1dc
    1698:	mov	r5, r3
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    169a:	mov	r1, r0
    }
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t parent,  bool folder, const char* filename)
  {
    169c:	mov	r4, r0
    169e:	mov	r7, r2
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    16a0:	add	r0, sp, #56	; 0x38
    16a2:	mov	r2, r6
    16a4:	bl	1088 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record r;
    if (strlen(filename) > 62) return 0;
    16a8:	mov	r0, r5
    16aa:	bl	c640 <strlen>
    16ae:	cmp	r0, #62	; 0x3e
    16b0:	bls.n	16bc <MTPStorage_SD::Create(unsigned long, bool, char const*)+0x34>
    16b2:	movs	r5, #0
    else 
    {
      OpenFileByIndex(ret, FILE_WRITE);
    }
    return ret;
  }
    16b4:	mov	r0, r5
    16b6:	add	sp, #476	; 0x1dc
    16b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    16bc:	adds	r2, r0, #1
    16be:	mov	r1, r5
    16c0:	add.w	r0, sp, #150	; 0x96
    16c4:	bl	9280 <memcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    16c8:	ldr	r5, [r4, #72]	; 0x48
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    16ca:	ldr	r3, [sp, #60]	; 0x3c
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.parent = parent;
    16cc:	str	r6, [sp, #136]	; 0x88
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    16ce:	adds	r2, r5, #1
    16d0:	str	r2, [r4, #72]	; 0x48
    WriteIndexRecord(new_record, r);
    16d2:	mov	r1, r5
    16d4:	add	r2, sp, #136	; 0x88
    16d6:	mov	r0, r4
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.parent = parent;
    r.child = 0;
    16d8:	mov.w	r9, #0
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    16dc:	mov.w	r8, #1
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    16e0:	strb.w	r7, [sp, #148]	; 0x94
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    16e4:	str	r3, [sp, #144]	; 0x90
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.parent = parent;
    r.child = 0;
    16e6:	str.w	r9, [sp, #140]	; 0x8c
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    16ea:	strb.w	r8, [sp, #149]	; 0x95
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    16ee:	bl	fc0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    16f2:	add	r2, sp, #56	; 0x38
    16f4:	mov	r1, r6
    16f6:	mov	r0, r4
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    16f8:	str	r5, [sp, #60]	; 0x3c
    WriteIndexRecord(parent, p);
    16fa:	bl	fc0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    16fe:	cbnz	r7, 1712 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0x8a>
      sd_mkdir(filename);
      mtp_lock_storage(false);
    } 
    else 
    {
      OpenFileByIndex(ret, FILE_WRITE);
    1700:	mov	r0, r4
    1702:	mov	r2, r8
    1704:	mov	r1, r5
    1706:	bl	1540 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    }
    return ret;
  }
    170a:	mov	r0, r5
    170c:	add	sp, #476	; 0x1dc
    170e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    if (folder) 
    {
      char filename[256];
      ConstructFilename(ret, filename, 256);
    1712:	mov	r0, r4
    1714:	mov.w	r3, #256	; 0x100
    1718:	add	r2, sp, #216	; 0xd8
    171a:	mov	r1, r5
    171c:	bl	11bc <MTPStorage_SD::ConstructFilename(int, char*, int)>
    1720:	ldr	r3, [pc, #68]	; (1768 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0xe0>)
    1722:	ldr.w	r4, [r3, #1144]	; 0x478
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    1726:	cbz	r4, 1744 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0xbc>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    1728:	mov	r3, r8
    172a:	add	r2, sp, #216	; 0xd8
    172c:	add.w	r1, r4, #1088	; 0x440
    1730:	mov	r0, sp
    1732:	strb.w	r9, [sp]
    1736:	strb.w	r9, [sp, #1]
    173a:	strb.w	r9, [sp, #2]
    173e:	bl	60f4 <FatFile::mkdir(FatFile*, char const*, bool)>
    1742:	b.n	16b4 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0x2c>
    1744:	ldr.w	r1, [r3, #1148]	; 0x47c
    1748:	cmp	r1, #0
    174a:	beq.n	16b4 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0x2c>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const ExChar_t* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    174c:	mov	r3, r8
    174e:	add	r2, sp, #216	; 0xd8
    1750:	add.w	r1, r1, #1088	; 0x440
    1754:	mov	r0, sp
    1756:	strb.w	r4, [sp, #49]	; 0x31
    175a:	strb.w	r4, [sp, #50]	; 0x32
    175e:	strb.w	r4, [sp, #51]	; 0x33
    1762:	bl	5080 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    1766:	b.n	16b4 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0x2c>
    1768:	.word	0x1fff14e0

0000176c <MTPStorage_SD::ScanDir(unsigned long)>:
    strcpy(r.name, "/");
    AppendIndexRecord(r);
  }

  void MTPStorage_SD::ScanDir(uint32_t i) 
  { Record record = ReadIndexRecord(i);
    176c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1770:	sub	sp, #160	; 0xa0
    1772:	mov	r2, r1
    1774:	mov	r4, r0
    1776:	mov	r6, r1
    1778:	mov	r1, r0
    177a:	mov	r0, sp
    177c:	bl	1088 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    1780:	ldrb.w	r3, [sp, #12]
    1784:	cbz	r3, 178c <MTPStorage_SD::ScanDir(unsigned long)+0x20>
    1786:	ldrb.w	r5, [sp, #13]
    178a:	cbz	r5, 1792 <MTPStorage_SD::ScanDir(unsigned long)+0x26>
      }
      record.scanned = true;
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }
    178c:	add	sp, #160	; 0xa0
    178e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }

  void MTPStorage_SD::ScanDir(uint32_t i) 
  { Record record = ReadIndexRecord(i);
    if (record.isdir && !record.scanned) {
      OpenFileByIndex(i);
    1792:	mov	r0, r4
    1794:	mov	r2, r5
    1796:	mov	r1, r6
    1798:	bl	1540 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    179c:	ldr	r0, [r4, #40]	; 0x28
    179e:	cmp	r0, #0
    17a0:	beq.n	178c <MTPStorage_SD::ScanDir(unsigned long)+0x20>
    17a2:	ldr	r3, [r0, #0]
    17a4:	ldr	r3, [r3, #64]	; 0x40
    17a6:	blx	r3
      if (!sd_isOpen(file_)) return;
    17a8:	cmp	r0, #0
    17aa:	beq.n	178c <MTPStorage_SD::ScanDir(unsigned long)+0x20>
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    17ac:	ldr	r7, [pc, #264]	; (18b8 <MTPStorage_SD::ScanDir(unsigned long)+0x14c>)
    17ae:	mov.w	r8, #1000	; 0x3e8
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    17b2:	ldr	r1, [r4, #40]	; 0x28
    17b4:	cmp	r1, #0
    17b6:	beq.n	1866 <MTPStorage_SD::ScanDir(unsigned long)+0xfa>
    17b8:	ldr	r3, [r1, #0]
    17ba:	movs	r2, #0
    17bc:	ldr	r3, [r3, #76]	; 0x4c
    17be:	add	r0, sp, #80	; 0x50
    17c0:	blx	r3
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    17c2:	ldr	r2, [r4, #60]	; 0x3c
    17c4:	cbz	r2, 17d8 <MTPStorage_SD::ScanDir(unsigned long)+0x6c>
    17c6:	ldr	r3, [r2, #16]
    17c8:	subs	r3, #1
    17ca:	str	r3, [r2, #16]
    17cc:	cbnz	r3, 17d8 <MTPStorage_SD::ScanDir(unsigned long)+0x6c>
    17ce:	ldr	r0, [r4, #60]	; 0x3c
    17d0:	cbz	r0, 17d8 <MTPStorage_SD::ScanDir(unsigned long)+0x6c>
    17d2:	ldr	r3, [r0, #0]
    17d4:	ldr	r3, [r3, #32]
    17d6:	blx	r3
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    17d8:	ldr	r3, [sp, #96]	; 0x60
    17da:	str	r3, [r4, #60]	; 0x3c
		if (f) f->refcount++;
    17dc:	cbz	r3, 17fc <MTPStorage_SD::ScanDir(unsigned long)+0x90>
    17de:	ldr	r2, [r3, #16]
    17e0:	adds	r2, #1
    17e2:	str	r2, [r3, #16]
    17e4:	ldr	r2, [sp, #96]	; 0x60
		return *this;
	}
	virtual ~File() {
    17e6:	str	r7, [sp, #80]	; 0x50
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    17e8:	cbz	r2, 17fc <MTPStorage_SD::ScanDir(unsigned long)+0x90>
    17ea:	ldr	r3, [r2, #16]
    17ec:	subs	r3, #1
    17ee:	str	r3, [r2, #16]
    17f0:	cbnz	r3, 17fc <MTPStorage_SD::ScanDir(unsigned long)+0x90>
    17f2:	ldr	r0, [sp, #96]	; 0x60
    17f4:	cbz	r0, 17fc <MTPStorage_SD::ScanDir(unsigned long)+0x90>
    17f6:	ldr	r3, [r0, #0]
    17f8:	ldr	r3, [r3, #32]
    17fa:	blx	r3
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    17fc:	ldr	r0, [r4, #60]	; 0x3c
    17fe:	cmp	r0, #0
    1800:	beq.n	1888 <MTPStorage_SD::ScanDir(unsigned long)+0x11c>
    1802:	ldr	r3, [r0, #0]
    1804:	ldr	r3, [r3, #64]	; 0x40
    1806:	blx	r3
      int sibling = 0;
      while (true) 
      { mtp_lock_storage(true);
        child_=file_.openNextFile();
        mtp_lock_storage(false);
        if(!sd_isOpen(child_)) break;
    1808:	cmp	r0, #0
    180a:	beq.n	1888 <MTPStorage_SD::ScanDir(unsigned long)+0x11c>
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    180c:	ldr	r0, [r4, #60]	; 0x3c

        Record r;
        r.parent = i;
    180e:	str	r6, [sp, #80]	; 0x50
        r.sibling = sibling;
    1810:	str	r5, [sp, #88]	; 0x58
    1812:	cmp	r0, #0
    1814:	beq.n	1878 <MTPStorage_SD::ScanDir(unsigned long)+0x10c>
    1816:	ldr	r3, [r0, #0]
    1818:	ldr	r3, [r3, #72]	; 0x48
    181a:	blx	r3
        r.isdir = child_.isDirectory();
    181c:	strb.w	r0, [sp, #92]	; 0x5c
        r.child = r.isdir ? 0 : child_.size();
    1820:	cmp	r0, #0
    1822:	beq.n	18a0 <MTPStorage_SD::ScanDir(unsigned long)+0x134>
    1824:	ldr	r0, [r4, #60]	; 0x3c
    1826:	movs	r3, #0
    1828:	str	r3, [sp, #84]	; 0x54
        r.scanned = false;
    182a:	movs	r3, #0
    182c:	strb.w	r3, [sp, #93]	; 0x5d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    1830:	cmp	r0, #0
    1832:	beq.n	18b2 <MTPStorage_SD::ScanDir(unsigned long)+0x146>
    1834:	ldr	r3, [r0, #0]
    1836:	ldr	r3, [r3, #68]	; 0x44
    1838:	blx	r3
    183a:	mov	r1, r0
        sd_getName(child_,r.name,64);
    183c:	add.w	r0, sp, #94	; 0x5e
    1840:	bl	c564 <strcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    1844:	ldr	r5, [r4, #72]	; 0x48
    1846:	adds	r3, r5, #1
    WriteIndexRecord(new_record, r);
    1848:	mov	r0, r4
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    184a:	str	r3, [r4, #72]	; 0x48
    WriteIndexRecord(new_record, r);
    184c:	mov	r1, r5
    184e:	add	r2, sp, #80	; 0x50
    1850:	bl	fc0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    1854:	ldr	r0, [r4, #60]	; 0x3c
    1856:	cmp	r0, #0
    1858:	beq.n	17b2 <MTPStorage_SD::ScanDir(unsigned long)+0x46>
    185a:	ldr	r3, [r0, #0]
    185c:	ldr	r3, [r3, #60]	; 0x3c
    185e:	blx	r3
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    1860:	ldr	r1, [r4, #40]	; 0x28
    1862:	cmp	r1, #0
    1864:	bne.n	17b8 <MTPStorage_SD::ScanDir(unsigned long)+0x4c>
    1866:	strb.w	r1, [sp, #84]	; 0x54
    186a:	str.w	r8, [sp, #88]	; 0x58
    186e:	strb.w	r1, [sp, #92]	; 0x5c
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    1872:	str	r7, [sp, #80]	; 0x50
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
    1874:	str	r1, [sp, #96]	; 0x60
    1876:	b.n	17c2 <MTPStorage_SD::ScanDir(unsigned long)+0x56>
        if(!sd_isOpen(child_)) break;

        Record r;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
    1878:	strb.w	r0, [sp, #92]	; 0x5c
        r.child = r.isdir ? 0 : child_.size();
    187c:	movs	r3, #0
    187e:	str	r3, [sp, #84]	; 0x54
        r.scanned = false;
    1880:	strb.w	r3, [sp, #93]	; 0x5d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    1884:	ldr	r1, [pc, #52]	; (18bc <MTPStorage_SD::ScanDir(unsigned long)+0x150>)
    1886:	b.n	183c <MTPStorage_SD::ScanDir(unsigned long)+0xd0>
        sd_getName(child_,r.name,64);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    1888:	movs	r3, #1
      record.child = sibling;
      WriteIndexRecord(i, record);
    188a:	mov	r2, sp
    188c:	mov	r1, r6
    188e:	mov	r0, r4
        sd_getName(child_,r.name,64);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
      record.child = sibling;
    1890:	str	r5, [sp, #4]
        r.scanned = false;
        sd_getName(child_,r.name,64);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    1892:	strb.w	r3, [sp, #13]
      record.child = sibling;
      WriteIndexRecord(i, record);
    1896:	bl	fc0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    }
  }
    189a:	add	sp, #160	; 0xa0
    189c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	virtual uint32_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
    18a0:	ldr	r0, [r4, #60]	; 0x3c
    18a2:	cmp	r0, #0
    18a4:	beq.n	187c <MTPStorage_SD::ScanDir(unsigned long)+0x110>
    18a6:	ldr	r3, [r0, #0]
    18a8:	ldr	r3, [r3, #56]	; 0x38
    18aa:	blx	r3
    18ac:	mov	r3, r0
    18ae:	ldr	r0, [r4, #60]	; 0x3c
    18b0:	b.n	1828 <MTPStorage_SD::ScanDir(unsigned long)+0xbc>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    18b2:	ldr	r1, [pc, #8]	; (18bc <MTPStorage_SD::ScanDir(unsigned long)+0x150>)
    18b4:	b.n	183c <MTPStorage_SD::ScanDir(unsigned long)+0xd0>
    18b6:	nop
    18b8:	.word	0x0000fa0c
    18bc:	.word	0x0000fa78

000018c0 <MTPStorage_SD::ScanAll() [clone .part.48] [clone .constprop.52]>:

  void MTPStorage_SD::ScanAll() 
    18c0:	push	{r3, r4, r5, lr}

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
  { if (index_generated) return; 
    18c2:	ldrb.w	r3, [r0, #76]	; 0x4c
    }
  }

  void MTPStorage_SD::ScanAll() 
  { if (all_scanned_) return;
    all_scanned_ = true;
    18c6:	movs	r2, #1
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll() 
    18c8:	mov	r5, r0
  { if (all_scanned_) return;
    all_scanned_ = true;
    18ca:	strb.w	r2, [r0, #77]	; 0x4d

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
  { if (index_generated) return; 
    18ce:	cbz	r3, 18e8 <MTPStorage_SD::ScanAll() [clone .part.48] [clone .constprop.52]+0x28>
  void MTPStorage_SD::ScanAll() 
  { if (all_scanned_) return;
    all_scanned_ = true;

    GenerateIndex();
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(i);
    18d0:	ldr	r3, [r5, #72]	; 0x48
    18d2:	cbz	r3, 18e6 <MTPStorage_SD::ScanAll() [clone .part.48] [clone .constprop.52]+0x26>
    18d4:	movs	r4, #0
    18d6:	mov	r1, r4
    18d8:	mov	r0, r5
    18da:	bl	176c <MTPStorage_SD::ScanDir(unsigned long)>
    18de:	ldr	r3, [r5, #72]	; 0x48
    18e0:	adds	r4, #1
    18e2:	cmp	r3, r4
    18e4:	bhi.n	18d6 <MTPStorage_SD::ScanAll() [clone .part.48] [clone .constprop.52]+0x16>
    18e6:	pop	{r3, r4, r5, pc}
    18e8:	bl	ff4 <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.53]>
    18ec:	b.n	18d0 <MTPStorage_SD::ScanAll() [clone .part.48] [clone .constprop.52]+0x10>
    18ee:	nop

000018f0 <MTPStorage_SD::StartGetObjectHandles(unsigned long)>:
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t parent) 
  {
    18f0:	push	{r4, r5, lr}

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
  { if (index_generated) return; 
    18f2:	ldrb.w	r3, [r0, #76]	; 0x4c
    GenerateIndex();
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(i);
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t parent) 
  {
    18f6:	sub	sp, #84	; 0x54
    18f8:	mov	r4, r0
    18fa:	mov	r5, r1

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
  { if (index_generated) return; 
    18fc:	cbz	r3, 193a <MTPStorage_SD::StartGetObjectHandles(unsigned long)+0x4a>
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t parent) 
  {
    GenerateIndex();
    if (parent) 
    18fe:	cbz	r5, 1926 <MTPStorage_SD::StartGetObjectHandles(unsigned long)+0x36>
    { if (parent == 0xFFFFFFFF) parent = 0;
    1900:	adds	r3, r5, #1
    1902:	it	eq
    1904:	moveq	r5, #0

      ScanDir(parent);
    1906:	mov	r1, r5
    1908:	mov	r0, r4
    190a:	bl	176c <MTPStorage_SD::ScanDir(unsigned long)>
      follow_sibling_ = true;
    190e:	movs	r3, #1
    1910:	strb.w	r3, [r4, #84]	; 0x54
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    1914:	mov	r2, r5
    1916:	mov	r1, r4
    1918:	mov	r0, sp
    191a:	bl	1088 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    191e:	ldr	r3, [sp, #4]
    1920:	str	r3, [r4, #80]	; 0x50
    else 
    { ScanAll();
      follow_sibling_ = false;
      next_ = 1;
    }
  }
    1922:	add	sp, #84	; 0x54
    1924:	pop	{r4, r5, pc}
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll() 
  { if (all_scanned_) return;
    1926:	ldrb.w	r3, [r4, #77]	; 0x4d
    192a:	cbz	r3, 1940 <MTPStorage_SD::StartGetObjectHandles(unsigned long)+0x50>
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { ScanAll();
      follow_sibling_ = false;
    192c:	movs	r2, #0
      next_ = 1;
    192e:	movs	r3, #1
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { ScanAll();
      follow_sibling_ = false;
    1930:	strb.w	r2, [r4, #84]	; 0x54
      next_ = 1;
    1934:	str	r3, [r4, #80]	; 0x50
    }
  }
    1936:	add	sp, #84	; 0x54
    1938:	pop	{r4, r5, pc}
    193a:	bl	ff4 <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.53]>
    193e:	b.n	18fe <MTPStorage_SD::StartGetObjectHandles(unsigned long)+0xe>
    1940:	mov	r0, r4
    1942:	bl	18c0 <MTPStorage_SD::ScanAll() [clone .part.48] [clone .constprop.52]>
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { ScanAll();
      follow_sibling_ = false;
    1946:	movs	r2, #0
      next_ = 1;
    1948:	movs	r3, #1
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { ScanAll();
      follow_sibling_ = false;
    194a:	strb.w	r2, [r4, #84]	; 0x54
      next_ = 1;
    194e:	str	r3, [r4, #80]	; 0x50
    1950:	b.n	1936 <MTPStorage_SD::StartGetObjectHandles(unsigned long)+0x46>
    1952:	nop

00001954 <Storage_init()>:
    *ms10 = second() & 1 ? 100 : 0;
  }


 bool Storage_init()
  { 
    1954:	push	{r3, r4, r5, lr}
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    1956:	ldr	r4, [pc, #52]	; (198c <Storage_init()+0x38>)
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    1958:	sub.w	r5, r4, #1160	; 0x488
    195c:	mov.w	r1, #0
    1960:	mov	r0, r4
    1962:	bl	8b54 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    1966:	mov	r0, r4
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    1968:	str.w	r4, [r5, #1156]	; 0x484
    return m_card && !m_card->errorCode();
    196c:	bl	82b4 <SdioCard::errorCode() const>
    1970:	cbz	r0, 1976 <Storage_init()+0x22>
      SPI.setMOSI(SD_MOSI);
      SPI.setMISO(SD_MISO);
      SPI.setSCK(SD_SCK);
    #endif

    if (!sd_begin(SD_CONFIG)) return false;
    1972:	movs	r0, #0
    1974:	pop	{r3, r4, r5, pc}
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    1976:	ldr.w	r1, [r5, #1156]	; 0x484
    197a:	mov	r0, r5
    197c:	bl	79a0 <FsVolume::begin(BlockDeviceInterface*)>
    1980:	cmp	r0, #0
    1982:	beq.n	1972 <Storage_init()+0x1e>

    // Set Time callback
    FsDateTime::callback = dateTime;
    1984:	ldr	r3, [pc, #8]	; (1990 <Storage_init()+0x3c>)
    1986:	ldr	r2, [pc, #12]	; (1994 <Storage_init()+0x40>)
    1988:	str	r2, [r3, #0]

    return true;
	}
    198a:	pop	{r3, r4, r5, pc}
    198c:	.word	0x1fff1968
    1990:	.word	0x1fff198c
    1994:	.word	0x000007cd

00001998 <MTPD::get_buffer()>:
    }

#if defined(__MK66FX1M0__)

//  usb_packet_t *data_buffer_ = NULL;
  void MTPD::get_buffer() {
    1998:	push	{r4, lr}
    199a:	mov	r4, r0
    199c:	ldr	r0, [r4, #4]
    while (!data_buffer_) {
    199e:	cbnz	r0, 19a8 <MTPD::get_buffer()+0x10>
      data_buffer_ = usb_malloc();
    19a0:	bl	9a74 <usb_malloc>
    19a4:	str	r0, [r4, #4]
      if (!data_buffer_) mtp_yield();
    19a6:	cbz	r0, 19aa <MTPD::get_buffer()+0x12>
    19a8:	pop	{r4, pc}
    19aa:	bl	eec <mtp_yield()>
    19ae:	b.n	199c <MTPD::get_buffer()+0x4>

000019b0 <MTPD::write(char const*, int) [clone .part.2]>:
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    19b0:	cmp	r2, #0
    19b2:	ble.n	1a12 <MTPD::write(char const*, int) [clone .part.2]+0x62>
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    19b4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    19b8:	mov.w	r9, #0
    19bc:	mov	r6, r2
    19be:	mov	r7, r1
    19c0:	mov	r5, r0
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    19c2:	mov	r8, r9
    19c4:	b.n	19ca <MTPD::write(char const*, int) [clone .part.2]+0x1a>
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    19c6:	cmp	r6, r9
    19c8:	ble.n	1a0e <MTPD::write(char const*, int) [clone .part.2]+0x5e>
        get_buffer();
    19ca:	mov	r0, r5
    19cc:	bl	1998 <MTPD::get_buffer()>
        int avail = sizeof(data_buffer_->buf) - data_buffer_->len;
    19d0:	ldr	r3, [r5, #4]
    19d2:	ldrh.w	r0, [r3], #8
    19d6:	rsb	r2, r9, r6
    19da:	rsb	r4, r0, #64	; 0x40
    19de:	cmp	r4, r2
    19e0:	it	ge
    19e2:	movge	r4, r2
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
    19e4:	add.w	r1, r7, r9
    19e8:	add	r0, r3
    19ea:	mov	r2, r4
    19ec:	bl	9280 <memcpy>
        data_buffer_->len += to_copy;
    19f0:	ldr	r1, [r5, #4]
    19f2:	ldrh	r3, [r1, #0]
    19f4:	add	r3, r4
    19f6:	uxth	r3, r3
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    19f8:	cmp	r3, #64	; 0x40
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
    19fa:	add	r9, r4
        int avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
        data_buffer_->len += to_copy;
    19fc:	strh	r3, [r1, #0]
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    19fe:	bne.n	19c6 <MTPD::write(char const*, int) [clone .part.2]+0x16>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
    1a00:	movs	r0, #4
    1a02:	bl	9c70 <usb_tx>
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    1a06:	cmp	r6, r9
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    1a08:	str.w	r8, [r5, #4]
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    1a0c:	bgt.n	19ca <MTPD::write(char const*, int) [clone .part.2]+0x1a>
    1a0e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1a12:	bx	lr

00001a14 <MTPD::writestring(char const*)>:
  void MTPD::write8 (uint8_t  x) { write((char*)&x, sizeof(x)); }
  void MTPD::write16(uint16_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    1a14:	push	{r4, r5, lr}
    if (*str) 
    1a16:	ldrb	r3, [r1, #0]
  void MTPD::write8 (uint8_t  x) { write((char*)&x, sizeof(x)); }
  void MTPD::write16(uint16_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    1a18:	sub	sp, #12
    1a1a:	mov	r4, r0
    if (*str) 
    1a1c:	cbz	r3, 1a78 <MTPD::writestring(char const*)+0x64>
    { write8(strlen(str) + 1);
    1a1e:	mov	r0, r1
    1a20:	mov	r5, r1
    1a22:	bl	c640 <strlen>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1a26:	ldrb	r1, [r4, #8]
    1a28:	adds	r0, #1
    1a2a:	strb.w	r0, [sp, #3]
    1a2e:	cbz	r1, 1a8a <MTPD::writestring(char const*)+0x76>
      write_length_ += len;
    1a30:	ldr	r3, [r4, #12]
    1a32:	adds	r3, #1
    1a34:	str	r3, [r4, #12]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1a36:	ldrb	r2, [r5, #0]
    1a38:	cbnz	r2, 1a48 <MTPD::writestring(char const*)+0x34>
    1a3a:	b.n	1a70 <MTPD::writestring(char const*)+0x5c>
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    1a3c:	ldr	r3, [r4, #12]
    1a3e:	adds	r3, #2
    1a40:	str	r3, [r4, #12]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1a42:	ldrb.w	r2, [r5, #1]!
    1a46:	cbz	r2, 1a66 <MTPD::writestring(char const*)+0x52>
    1a48:	strh.w	r2, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1a4c:	cmp	r1, #0
    1a4e:	bne.n	1a3c <MTPD::writestring(char const*)+0x28>
    1a50:	movs	r2, #2
    1a52:	add.w	r1, sp, #6
    1a56:	mov	r0, r4
    1a58:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1a5c:	ldrb.w	r2, [r5, #1]!
    1a60:	ldrb	r1, [r4, #8]
    1a62:	cmp	r2, #0
    1a64:	bne.n	1a48 <MTPD::writestring(char const*)+0x34>
    1a66:	movs	r3, #0
    1a68:	strh.w	r3, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1a6c:	cbz	r1, 1aae <MTPD::writestring(char const*)+0x9a>
    1a6e:	ldr	r3, [r4, #12]
      write_length_ += len;
    1a70:	adds	r3, #2
    1a72:	str	r3, [r4, #12]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    1a74:	add	sp, #12
    1a76:	pop	{r4, r5, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1a78:	ldrb	r2, [r0, #8]
    1a7a:	strb.w	r3, [sp, #2]
    1a7e:	cbz	r2, 1aa0 <MTPD::writestring(char const*)+0x8c>
      write_length_ += len;
    1a80:	ldr	r3, [r0, #12]
    1a82:	adds	r3, #1
    1a84:	str	r3, [r0, #12]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    1a86:	add	sp, #12
    1a88:	pop	{r4, r5, pc}
    1a8a:	movs	r2, #1
    1a8c:	add.w	r1, sp, #3
    1a90:	mov	r0, r4
    1a92:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1a96:	ldrb	r2, [r5, #0]
    1a98:	ldrb	r1, [r4, #8]
    1a9a:	cmp	r2, #0
    1a9c:	bne.n	1a48 <MTPD::writestring(char const*)+0x34>
    1a9e:	b.n	1a66 <MTPD::writestring(char const*)+0x52>
    1aa0:	movs	r2, #1
    1aa2:	add.w	r1, sp, #2
    1aa6:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    } else 
    { write8(0);
    }
  }
    1aaa:	add	sp, #12
    1aac:	pop	{r4, r5, pc}
    1aae:	mov	r0, r4
    1ab0:	movs	r2, #2
    1ab2:	add	r1, sp, #4
    1ab4:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    1ab8:	add	sp, #12
    1aba:	pop	{r4, r5, pc}

00001abc <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>:
        writestring("Teensy");
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    1abc:	push	{r4, r5, r6, lr}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1abe:	ldrb	r3, [r0, #8]
        writestring("Teensy");
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    1ac0:	sub	sp, #8
    1ac2:	mov	r4, r0
    1ac4:	mov	r5, r1
    1ac6:	strh.w	r1, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1aca:	cbz	r3, 1b04 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x48>
      write_length_ += len;
    1acc:	ldr	r3, [r0, #12]
    1ace:	movw	r2, #65535	; 0xffff
    1ad2:	adds	r3, #2
    1ad4:	str	r3, [r0, #12]
    1ad6:	strh.w	r2, [sp, #6]
    1ada:	adds	r3, #2
    1adc:	movs	r2, #0
    1ade:	str	r3, [r4, #12]
    1ae0:	strb.w	r2, [sp, #2]
    1ae4:	adds	r3, #1
    1ae6:	str	r3, [r4, #12]
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    1ae8:	movw	r3, #54274	; 0xd402
    1aec:	cmp	r5, r3
    1aee:	beq.n	1b40 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x84>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1af0:	ldrb	r3, [r4, #8]
    1af2:	movs	r2, #0
    1af4:	strb.w	r2, [sp, #3]
    1af8:	cbz	r3, 1b5c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xa0>
      write_length_ += len;
    1afa:	ldr	r3, [r4, #12]
    1afc:	adds	r3, #1
    1afe:	str	r3, [r4, #12]
        write8(0);       // read-only
        GetDevicePropValue(prop);
        GetDevicePropValue(prop);
        write8(0);       // no form
    }
  }
    1b00:	add	sp, #8
    1b02:	pop	{r4, r5, r6, pc}
    1b04:	movs	r2, #2
    1b06:	add	r1, sp, #4
    1b08:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    1b0c:	ldrb	r6, [r4, #8]
    1b0e:	movw	r3, #65535	; 0xffff
    1b12:	strh.w	r3, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1b16:	cbnz	r6, 1b6c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb0>
    1b18:	movs	r2, #2
    1b1a:	add.w	r1, sp, #6
    1b1e:	mov	r0, r4
    1b20:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    1b24:	ldrb	r3, [r4, #8]
    1b26:	strb.w	r6, [sp, #2]
    1b2a:	cbnz	r3, 1b70 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb4>
    1b2c:	movs	r2, #1
    1b2e:	add.w	r1, sp, #2
    1b32:	mov	r0, r4
    1b34:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    1b38:	movw	r3, #54274	; 0xd402
    1b3c:	cmp	r5, r3
    1b3e:	bne.n	1af0 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x34>
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring("Teensy");
    1b40:	ldr	r1, [pc, #48]	; (1b74 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb8>)
    1b42:	mov	r0, r4
    1b44:	bl	1a14 <MTPD::writestring(char const*)>
    1b48:	ldr	r1, [pc, #40]	; (1b74 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb8>)
    1b4a:	mov	r0, r4
    1b4c:	bl	1a14 <MTPD::writestring(char const*)>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1b50:	ldrb	r3, [r4, #8]
    1b52:	movs	r2, #0
    1b54:	strb.w	r2, [sp, #3]
    1b58:	cmp	r3, #0
    1b5a:	bne.n	1afa <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x3e>
    1b5c:	mov	r0, r4
    1b5e:	movs	r2, #1
    1b60:	add.w	r1, sp, #3
    1b64:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
        write8(0);       // read-only
        GetDevicePropValue(prop);
        GetDevicePropValue(prop);
        write8(0);       // no form
    }
  }
    1b68:	add	sp, #8
    1b6a:	pop	{r4, r5, r6, pc}
    1b6c:	ldr	r3, [r4, #12]
    1b6e:	b.n	1ada <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x1e>
    1b70:	ldr	r3, [r4, #12]
    1b72:	b.n	1ae4 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x28>
    1b74:	.word	0x0000fc18

00001b78 <MTPD::WriteDescriptor()>:
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    1b78:	push	{r4, r5, r6, r7, lr}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1b7a:	ldrb	r3, [r0, #8]
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    1b7c:	sub	sp, #44	; 0x2c
    1b7e:	movs	r5, #100	; 0x64
    1b80:	mov	r4, r0
    1b82:	strh.w	r5, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1b86:	cmp	r3, #0
    1b88:	beq.n	1c6a <MTPD::WriteDescriptor()+0xf2>
      write_length_ += len;
    1b8a:	ldr	r3, [r0, #12]
    1b8c:	movs	r2, #6
    1b8e:	adds	r3, #2
    1b90:	str	r3, [r0, #12]
    1b92:	str	r2, [sp, #20]
    1b94:	adds	r3, #4
    1b96:	movs	r2, #100	; 0x64
    1b98:	str	r3, [r4, #12]
    1b9a:	strh.w	r2, [sp, #4]
    1b9e:	adds	r3, #2
    1ba0:	str	r3, [r4, #12]
  void MTPD::WriteDescriptor() {
    write16(100);  // MTP version
    write32(6);    // MTP extension
//    write32(0xFFFFFFFFUL);    // MTP extension
    write16(100);  // MTP version
    writestring("microsoft.com: 1.0;");
    1ba2:	ldr	r1, [pc, #464]	; (1d74 <MTPD::WriteDescriptor()+0x1fc>)
    1ba4:	mov	r0, r4
    1ba6:	bl	1a14 <MTPD::writestring(char const*)>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1baa:	ldrb	r3, [r4, #8]
    1bac:	movs	r2, #0
    1bae:	strh.w	r2, [sp, #2]
    1bb2:	cmp	r3, #0
    1bb4:	beq.w	1d2c <MTPD::WriteDescriptor()+0x1b4>
      write_length_ += len;
    1bb8:	ldr	r3, [r4, #12]
    1bba:	movs	r2, #18
    1bbc:	adds	r3, #2
    1bbe:	str	r3, [r4, #12]
    1bc0:	str	r2, [sp, #16]
    1bc2:	adds	r3, #4
    1bc4:	str	r3, [r4, #12]
    1bc6:	movs	r6, #1
    1bc8:	ldr	r5, [pc, #428]	; (1d78 <MTPD::WriteDescriptor()+0x200>)
    1bca:	movw	r3, #4097	; 0x1001
    1bce:	add.w	r7, r5, #34	; 0x22
    1bd2:	b.n	1be4 <MTPD::WriteDescriptor()+0x6c>
    1bd4:	ldr	r3, [r4, #12]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
      write32(supported_op_num);
      for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    1bd6:	cmp	r7, r5
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    1bd8:	add.w	r3, r3, #2
    1bdc:	str	r3, [r4, #12]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
      write32(supported_op_num);
      for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    1bde:	beq.n	1bfc <MTPD::WriteDescriptor()+0x84>
    1be0:	ldrh.w	r3, [r5, #2]!
    1be4:	strh.w	r3, [sp, #8]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1be8:	cmp	r6, #0
    1bea:	bne.n	1bd4 <MTPD::WriteDescriptor()+0x5c>
    1bec:	movs	r2, #2
    1bee:	add	r1, sp, #8
    1bf0:	mov	r0, r4
    1bf2:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
      write32(supported_op_num);
      for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    1bf6:	cmp	r7, r5
    1bf8:	ldrb	r6, [r4, #8]
    1bfa:	bne.n	1be0 <MTPD::WriteDescriptor()+0x68>
    1bfc:	movs	r3, #0
    1bfe:	str	r3, [sp, #36]	; 0x24
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1c00:	cmp	r6, #0
    1c02:	beq.n	1c9e <MTPD::WriteDescriptor()+0x126>
      write_length_ += len;
    1c04:	ldr	r3, [r4, #12]
    1c06:	movs	r2, #1
    1c08:	adds	r3, #4
    1c0a:	str	r3, [r4, #12]
    1c0c:	str	r2, [sp, #32]
    1c0e:	adds	r3, #4
    1c10:	movw	r2, #54274	; 0xd402
    1c14:	str	r3, [r4, #12]
    1c16:	strh.w	r2, [sp, #14]
    1c1a:	adds	r3, #2
    1c1c:	movs	r2, #0
    1c1e:	str	r3, [r4, #12]
    1c20:	str	r2, [sp, #28]
    1c22:	adds	r3, #4
    1c24:	movs	r2, #2
    1c26:	str	r3, [r4, #12]
    1c28:	str	r2, [sp, #24]
    1c2a:	adds	r3, #4
    1c2c:	mov.w	r2, #12288	; 0x3000
    1c30:	str	r3, [r4, #12]
    1c32:	strh.w	r2, [sp, #12]
    1c36:	adds	r3, #2
    1c38:	movw	r2, #12289	; 0x3001
    1c3c:	str	r3, [r4, #12]
    1c3e:	strh.w	r2, [sp, #10]
    1c42:	adds	r3, #2
    1c44:	str	r3, [r4, #12]

    write32(2);       // Playback formats (array of uint16)
    write16(0x3000);  // Undefined format
    write16(0x3001);  // Folders (associations)

    writestring("PJRC");     // Manufacturer
    1c46:	mov	r0, r4
    1c48:	ldr	r1, [pc, #304]	; (1d7c <MTPD::WriteDescriptor()+0x204>)
    1c4a:	bl	1a14 <MTPD::writestring(char const*)>
    writestring("Teensy");   // Model
    1c4e:	mov	r0, r4
    1c50:	ldr	r1, [pc, #300]	; (1d80 <MTPD::WriteDescriptor()+0x208>)
    1c52:	bl	1a14 <MTPD::writestring(char const*)>
    writestring("1.0");      // version
    1c56:	mov	r0, r4
    1c58:	ldr	r1, [pc, #296]	; (1d84 <MTPD::WriteDescriptor()+0x20c>)
    1c5a:	bl	1a14 <MTPD::writestring(char const*)>
    writestring("???");      // serial
    1c5e:	mov	r0, r4
    1c60:	ldr	r1, [pc, #292]	; (1d88 <MTPD::WriteDescriptor()+0x210>)
    1c62:	bl	1a14 <MTPD::writestring(char const*)>
  }
    1c66:	add	sp, #44	; 0x2c
    1c68:	pop	{r4, r5, r6, r7, pc}
    1c6a:	movs	r2, #2
    1c6c:	add.w	r1, sp, #6
    1c70:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    1c74:	ldrb	r3, [r4, #8]
    1c76:	movs	r2, #6
    1c78:	str	r2, [sp, #20]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1c7a:	cmp	r3, #0
    1c7c:	bne.n	1d5a <MTPD::WriteDescriptor()+0x1e2>
    1c7e:	movs	r2, #4
    1c80:	add	r1, sp, #20
    1c82:	mov	r0, r4
    1c84:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    1c88:	ldrb	r3, [r4, #8]
    1c8a:	strh.w	r5, [sp, #4]
    1c8e:	cmp	r3, #0
    1c90:	bne.n	1d5e <MTPD::WriteDescriptor()+0x1e6>
    1c92:	movs	r2, #2
    1c94:	add	r1, sp, #4
    1c96:	mov	r0, r4
    1c98:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    1c9c:	b.n	1ba2 <MTPD::WriteDescriptor()+0x2a>
    1c9e:	movs	r2, #4
    1ca0:	add	r1, sp, #36	; 0x24
    1ca2:	mov	r0, r4
    1ca4:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    1ca8:	ldrb	r3, [r4, #8]
    1caa:	movs	r2, #1
    1cac:	str	r2, [sp, #32]
    1cae:	cmp	r3, #0
    1cb0:	bne.n	1d62 <MTPD::WriteDescriptor()+0x1ea>
    1cb2:	movs	r2, #4
    1cb4:	add	r1, sp, #32
    1cb6:	mov	r0, r4
    1cb8:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    1cbc:	ldrb	r3, [r4, #8]
    1cbe:	movw	r2, #54274	; 0xd402
    1cc2:	strh.w	r2, [sp, #14]
    1cc6:	cmp	r3, #0
    1cc8:	bne.n	1d66 <MTPD::WriteDescriptor()+0x1ee>
    1cca:	movs	r2, #2
    1ccc:	add.w	r1, sp, #14
    1cd0:	mov	r0, r4
    1cd2:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    1cd6:	ldrb	r3, [r4, #8]
    1cd8:	str	r6, [sp, #28]
    1cda:	cmp	r3, #0
    1cdc:	bne.n	1d6a <MTPD::WriteDescriptor()+0x1f2>
    1cde:	movs	r2, #4
    1ce0:	add	r1, sp, #28
    1ce2:	mov	r0, r4
    1ce4:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    1ce8:	ldrb	r3, [r4, #8]
    1cea:	movs	r5, #2
    1cec:	str	r5, [sp, #24]
    1cee:	cmp	r3, #0
    1cf0:	bne.n	1d6e <MTPD::WriteDescriptor()+0x1f6>
    1cf2:	movs	r2, #4
    1cf4:	add	r1, sp, #24
    1cf6:	mov	r0, r4
    1cf8:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    1cfc:	ldrb	r3, [r4, #8]
    1cfe:	mov.w	r2, #12288	; 0x3000
    1d02:	strh.w	r2, [sp, #12]
    1d06:	cbnz	r3, 1d52 <MTPD::WriteDescriptor()+0x1da>
    1d08:	mov	r2, r5
    1d0a:	add	r1, sp, #12
    1d0c:	mov	r0, r4
    1d0e:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    1d12:	ldrb	r3, [r4, #8]
    1d14:	movw	r2, #12289	; 0x3001
    1d18:	strh.w	r2, [sp, #10]
    1d1c:	cbnz	r3, 1d4e <MTPD::WriteDescriptor()+0x1d6>
    1d1e:	mov	r2, r5
    1d20:	add.w	r1, sp, #10
    1d24:	mov	r0, r4
    1d26:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    1d2a:	b.n	1c46 <MTPD::WriteDescriptor()+0xce>
    1d2c:	movs	r2, #2
    1d2e:	add.w	r1, sp, r2
    1d32:	mov	r0, r4
    1d34:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    1d38:	ldrb	r3, [r4, #8]
    1d3a:	movs	r2, #18
    1d3c:	str	r2, [sp, #16]
    1d3e:	cbnz	r3, 1d56 <MTPD::WriteDescriptor()+0x1de>
    1d40:	movs	r2, #4
    1d42:	add	r1, sp, #16
    1d44:	mov	r0, r4
    1d46:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    1d4a:	ldrb	r6, [r4, #8]
    1d4c:	b.n	1bc8 <MTPD::WriteDescriptor()+0x50>
    1d4e:	ldr	r3, [r4, #12]
    1d50:	b.n	1c42 <MTPD::WriteDescriptor()+0xca>
    1d52:	ldr	r3, [r4, #12]
    1d54:	b.n	1c36 <MTPD::WriteDescriptor()+0xbe>
    1d56:	ldr	r3, [r4, #12]
    1d58:	b.n	1bc2 <MTPD::WriteDescriptor()+0x4a>
    1d5a:	ldr	r3, [r4, #12]
    1d5c:	b.n	1b94 <MTPD::WriteDescriptor()+0x1c>
    1d5e:	ldr	r3, [r4, #12]
    1d60:	b.n	1b9e <MTPD::WriteDescriptor()+0x26>
    1d62:	ldr	r3, [r4, #12]
    1d64:	b.n	1c0e <MTPD::WriteDescriptor()+0x96>
    1d66:	ldr	r3, [r4, #12]
    1d68:	b.n	1c1a <MTPD::WriteDescriptor()+0xa2>
    1d6a:	ldr	r3, [r4, #12]
    1d6c:	b.n	1c22 <MTPD::WriteDescriptor()+0xaa>
    1d6e:	ldr	r3, [r4, #12]
    1d70:	b.n	1c2a <MTPD::WriteDescriptor()+0xb2>
    1d72:	nop
    1d74:	.word	0x0000fc20
    1d78:	.word	0x0000fbe0
    1d7c:	.word	0x0000fc34
    1d80:	.word	0x0000fc18
    1d84:	.word	0x0000fc3c
    1d88:	.word	0x0000fc40

00001d8c <MTPD::WriteStorageIDs()>:
    writestring("Teensy");   // Model
    writestring("1.0");      // version
    writestring("???");      // serial
  }

  void MTPD::WriteStorageIDs() {
    1d8c:	push	{r4, r5, lr}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1d8e:	ldrb	r3, [r0, #8]
    writestring("Teensy");   // Model
    writestring("1.0");      // version
    writestring("???");      // serial
  }

  void MTPD::WriteStorageIDs() {
    1d90:	sub	sp, #12
    1d92:	movs	r5, #1
    1d94:	mov	r4, r0
    1d96:	str	r5, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1d98:	cbz	r3, 1da8 <MTPD::WriteStorageIDs()+0x1c>
      write_length_ += len;
    1d9a:	ldr	r3, [r0, #12]
    1d9c:	adds	r3, #4
    1d9e:	str	r3, [r0, #12]
    1da0:	adds	r3, #4
    1da2:	str	r3, [r4, #12]
  }

  void MTPD::WriteStorageIDs() {
    write32(1); // 1 entry
    write32(1); // 1 storage
  }
    1da4:	add	sp, #12
    1da6:	pop	{r4, r5, pc}
    1da8:	movs	r2, #4
    1daa:	add.w	r1, sp, r2
    1dae:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    1db2:	ldrb	r3, [r4, #8]
    1db4:	str	r5, [sp, #0]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1db6:	cbnz	r3, 1dc6 <MTPD::WriteStorageIDs()+0x3a>
    1db8:	mov	r0, r4
    1dba:	movs	r2, #4
    1dbc:	mov	r1, sp
    1dbe:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
  }

  void MTPD::WriteStorageIDs() {
    write32(1); // 1 entry
    write32(1); // 1 storage
  }
    1dc2:	add	sp, #12
    1dc4:	pop	{r4, r5, pc}
    1dc6:	ldr	r3, [r4, #12]
    1dc8:	b.n	1da0 <MTPD::WriteStorageIDs()+0x14>
    1dca:	nop

00001dcc <MTPD::GetObjectHandles(unsigned long, unsigned long)>:
    while (storage_->GetNextObjectHandle()) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    1dcc:	push	{r4, r5, r6, lr}
    1dce:	mov	r4, r0
    if (write_get_length_) {
    1dd0:	ldrb	r5, [r0, #8]
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(parent);
    1dd2:	ldr	r0, [r0, #0]
    while (storage_->GetNextObjectHandle()) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    1dd4:	sub	sp, #8
    1dd6:	mov	r6, r2
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(parent);
    1dd8:	ldr	r3, [r0, #0]
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    if (write_get_length_) {
    1dda:	cbz	r5, 1dfa <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x2e>
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(parent);
    1ddc:	mov	r1, r2
    1dde:	ldr	r3, [r3, #20]
    1de0:	blx	r3
    int num = 0;
    1de2:	movs	r5, #0
    while (storage_->GetNextObjectHandle()) num++;
    1de4:	ldr	r0, [r4, #0]
    1de6:	ldr	r3, [r0, #0]
    1de8:	ldr	r3, [r3, #24]
    1dea:	blx	r3
    1dec:	adds	r5, #1
    1dee:	cmp	r0, #0
    1df0:	bne.n	1de4 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x18>
  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    if (write_get_length_) {
      write_length_ = GetNumObjects(storage, parent);
      write_length_++;
      write_length_ *= 4;
    1df2:	lsls	r5, r5, #2
    1df4:	str	r5, [r4, #12]
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(parent);
      while ((handle = storage_->GetNextObjectHandle())) write32(handle);
    }
  }
    1df6:	add	sp, #8
    1df8:	pop	{r4, r5, r6, pc}
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(parent);
    1dfa:	ldr	r3, [r3, #20]
    1dfc:	mov	r1, r2
    1dfe:	blx	r3
    1e00:	b.n	1e04 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x38>
    int num = 0;
    while (storage_->GetNextObjectHandle()) num++;
    1e02:	adds	r5, #1
    1e04:	ldr	r0, [r4, #0]
    1e06:	ldr	r3, [r0, #0]
    1e08:	ldr	r3, [r3, #24]
    1e0a:	blx	r3
    1e0c:	cmp	r0, #0
    1e0e:	bne.n	1e02 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x36>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1e10:	ldrb	r3, [r4, #8]
    1e12:	str	r5, [sp, #4]
    1e14:	cbz	r3, 1e4c <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x80>
      write_length_ += len;
    1e16:	ldr	r3, [r4, #12]
    1e18:	adds	r3, #4
    1e1a:	str	r3, [r4, #12]
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(parent);
    1e1c:	ldr	r0, [r4, #0]
    1e1e:	ldr	r3, [r0, #0]
    1e20:	mov	r1, r6
    1e22:	ldr	r3, [r3, #20]
    1e24:	blx	r3
      while ((handle = storage_->GetNextObjectHandle())) write32(handle);
    1e26:	ldr	r0, [r4, #0]
    1e28:	ldr	r3, [r0, #0]
    1e2a:	ldr	r3, [r3, #24]
    1e2c:	blx	r3
    1e2e:	cmp	r0, #0
    1e30:	beq.n	1df6 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x2a>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1e32:	ldrb	r3, [r4, #8]
    1e34:	str	r0, [sp, #0]
    1e36:	cbz	r3, 1e40 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x74>
      write_length_ += len;
    1e38:	ldr	r3, [r4, #12]
    1e3a:	adds	r3, #4
    1e3c:	str	r3, [r4, #12]
    1e3e:	b.n	1e26 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x5a>
    1e40:	movs	r2, #4
    1e42:	mov	r1, sp
    1e44:	mov	r0, r4
    1e46:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    1e4a:	b.n	1e26 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x5a>
    1e4c:	movs	r2, #4
    1e4e:	add.w	r1, sp, r2
    1e52:	mov	r0, r4
    1e54:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    1e58:	b.n	1e1c <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x50>
    1e5a:	nop

00001e5c <MTPD::GetObjectInfo(unsigned long)>:
      while ((handle = storage_->GetNextObjectHandle())) write32(handle);
    }
  }
  
  void MTPD::GetObjectInfo(uint32_t handle) 
  {
    1e5c:	push	{r4, r5, r6, lr}
    1e5e:	mov	r4, r0
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);
    1e60:	ldr	r0, [r0, #0]
      while ((handle = storage_->GetNextObjectHandle())) write32(handle);
    }
  }
  
  void MTPD::GetObjectInfo(uint32_t handle) 
  {
    1e62:	sub	sp, #328	; 0x148
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);
    1e64:	ldr	r3, [r0, #0]
    1e66:	add	r5, sp, #24
    1e68:	str	r5, [sp, #0]
    1e6a:	ldr	r6, [r3, #28]
    1e6c:	add	r2, sp, #72	; 0x48
    1e6e:	add	r3, sp, #20
    1e70:	blx	r6
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1e72:	ldrb	r3, [r4, #8]
    1e74:	movs	r2, #1
    1e76:	str	r2, [sp, #28]
    1e78:	cmp	r3, #0
    1e7a:	beq.n	1f30 <MTPD::GetObjectInfo(unsigned long)+0xd4>
      write_length_ += len;
    1e7c:	ldr	r3, [r4, #12]
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);

    write32(1); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    1e7e:	ldr	r2, [sp, #20]
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    1e80:	adds	r3, #4
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);

    write32(1); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    1e82:	adds	r2, #1
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    1e84:	str	r3, [r4, #12]
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);

    write32(1); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    1e86:	beq.w	2060 <MTPD::GetObjectInfo(unsigned long)+0x204>
    1e8a:	movs	r2, #0
    1e8c:	strh.w	r2, [sp, #16]
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    1e90:	adds	r3, #2
    1e92:	movs	r2, #0
    1e94:	str	r3, [r4, #12]
    1e96:	strh.w	r2, [sp, #14]
    1e9a:	adds	r3, #2
    1e9c:	ldr	r2, [sp, #20]
    1e9e:	str	r3, [r4, #12]
    1ea0:	str	r2, [sp, #60]	; 0x3c
    1ea2:	adds	r3, #4
    1ea4:	movs	r2, #0
    1ea6:	str	r3, [r4, #12]
    1ea8:	strh.w	r2, [sp, #12]
    1eac:	adds	r3, #2
    1eae:	movs	r2, #0
    1eb0:	str	r3, [r4, #12]
    1eb2:	str	r2, [sp, #56]	; 0x38
    1eb4:	adds	r3, #4
    1eb6:	movs	r2, #0
    1eb8:	str	r3, [r4, #12]
    1eba:	str	r2, [sp, #52]	; 0x34
    1ebc:	adds	r3, #4
    1ebe:	movs	r2, #0
    1ec0:	str	r3, [r4, #12]
    1ec2:	str	r2, [sp, #48]	; 0x30
    1ec4:	adds	r3, #4
    1ec6:	movs	r2, #0
    1ec8:	str	r3, [r4, #12]
    1eca:	str	r2, [sp, #44]	; 0x2c
    1ecc:	adds	r3, #4
    1ece:	movs	r2, #0
    1ed0:	str	r3, [r4, #12]
    1ed2:	str	r2, [sp, #40]	; 0x28
    1ed4:	adds	r3, #4
    1ed6:	movs	r2, #0
    1ed8:	str	r3, [r4, #12]
    1eda:	str	r2, [sp, #36]	; 0x24
    1edc:	adds	r3, #4
    1ede:	ldr	r2, [r5, #0]
    1ee0:	str	r3, [r4, #12]
    1ee2:	str	r2, [sp, #32]
    1ee4:	ldr	r2, [sp, #20]
    1ee6:	sub.w	r2, r2, #4294967295
    1eea:	clz	r2, r2
    1eee:	lsrs	r2, r2, #5
    1ef0:	adds	r3, #4
    1ef2:	str	r3, [r4, #12]
    1ef4:	strh.w	r2, [sp, #18]
    1ef8:	adds	r3, #2
    1efa:	movs	r2, #0
    1efc:	str	r3, [r4, #12]
    1efe:	str	r2, [sp, #68]	; 0x44
    1f00:	adds	r3, #4
    1f02:	movs	r2, #0
    1f04:	str	r3, [r4, #12]
    1f06:	str	r2, [sp, #64]	; 0x40
    1f08:	adds	r3, #4
    1f0a:	str	r3, [r4, #12]
    write32(0); // bit depth
    write32(parent); // parent
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    write32(0); // association description
    write32(0);  // sequence number
    writestring(filename);
    1f0c:	add	r1, sp, #72	; 0x48
    1f0e:	mov	r0, r4
    1f10:	bl	1a14 <MTPD::writestring(char const*)>
    writestring("");  // date created
    1f14:	mov	r0, r4
    1f16:	ldr	r1, [pc, #396]	; (20a4 <MTPD::GetObjectInfo(unsigned long)+0x248>)
    1f18:	bl	1a14 <MTPD::writestring(char const*)>
    writestring("");  // date modified
    1f1c:	mov	r0, r4
    1f1e:	ldr	r1, [pc, #388]	; (20a4 <MTPD::GetObjectInfo(unsigned long)+0x248>)
    1f20:	bl	1a14 <MTPD::writestring(char const*)>
    writestring("");  // keywords
    1f24:	mov	r0, r4
    1f26:	ldr	r1, [pc, #380]	; (20a4 <MTPD::GetObjectInfo(unsigned long)+0x248>)
    1f28:	bl	1a14 <MTPD::writestring(char const*)>
  }
    1f2c:	add	sp, #328	; 0x148
    1f2e:	pop	{r4, r5, r6, pc}
    1f30:	add	r1, sp, #28
    1f32:	movs	r2, #4
    1f34:	mov	r0, r4
    1f36:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);

    write32(1); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    1f3a:	ldr	r3, [sp, #20]
    1f3c:	ldrb	r6, [r4, #8]
    1f3e:	adds	r3, #1
    1f40:	movw	r3, #12289	; 0x3001
    1f44:	it	ne
    1f46:	movne	r3, #0
    1f48:	strh.w	r3, [sp, #16]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1f4c:	cmp	r6, #0
    1f4e:	bne.w	2072 <MTPD::GetObjectInfo(unsigned long)+0x216>
    1f52:	add	r1, sp, #16
    1f54:	movs	r2, #2
    1f56:	mov	r0, r4
    1f58:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    1f5c:	ldrb	r3, [r4, #8]
    1f5e:	strh.w	r6, [sp, #14]
    1f62:	cmp	r3, #0
    1f64:	bne.w	2076 <MTPD::GetObjectInfo(unsigned long)+0x21a>
    1f68:	movs	r2, #2
    1f6a:	add.w	r1, sp, #14
    1f6e:	mov	r0, r4
    1f70:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    1f74:	ldrb	r3, [r4, #8]
    1f76:	ldr	r2, [sp, #20]
    1f78:	str	r2, [sp, #60]	; 0x3c
    1f7a:	cmp	r3, #0
    1f7c:	bne.n	207a <MTPD::GetObjectInfo(unsigned long)+0x21e>
    1f7e:	add	r1, sp, #60	; 0x3c
    1f80:	movs	r2, #4
    1f82:	mov	r0, r4
    1f84:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    1f88:	ldrb	r3, [r4, #8]
    1f8a:	strh.w	r6, [sp, #12]
    1f8e:	cmp	r3, #0
    1f90:	bne.n	207e <MTPD::GetObjectInfo(unsigned long)+0x222>
    1f92:	add	r1, sp, #12
    1f94:	movs	r2, #2
    1f96:	mov	r0, r4
    1f98:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    1f9c:	ldrb	r3, [r4, #8]
    1f9e:	str	r6, [sp, #56]	; 0x38
    1fa0:	cmp	r3, #0
    1fa2:	bne.n	2082 <MTPD::GetObjectInfo(unsigned long)+0x226>
    1fa4:	add	r1, sp, #56	; 0x38
    1fa6:	movs	r2, #4
    1fa8:	mov	r0, r4
    1faa:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    1fae:	ldrb	r3, [r4, #8]
    1fb0:	str	r6, [sp, #52]	; 0x34
    1fb2:	cmp	r3, #0
    1fb4:	bne.n	2086 <MTPD::GetObjectInfo(unsigned long)+0x22a>
    1fb6:	add	r1, sp, #52	; 0x34
    1fb8:	movs	r2, #4
    1fba:	mov	r0, r4
    1fbc:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    1fc0:	ldrb	r3, [r4, #8]
    1fc2:	str	r6, [sp, #48]	; 0x30
    1fc4:	cmp	r3, #0
    1fc6:	bne.n	208a <MTPD::GetObjectInfo(unsigned long)+0x22e>
    1fc8:	add	r1, sp, #48	; 0x30
    1fca:	movs	r2, #4
    1fcc:	mov	r0, r4
    1fce:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    1fd2:	ldrb	r3, [r4, #8]
    1fd4:	str	r6, [sp, #44]	; 0x2c
    1fd6:	cmp	r3, #0
    1fd8:	bne.n	208e <MTPD::GetObjectInfo(unsigned long)+0x232>
    1fda:	add	r1, sp, #44	; 0x2c
    1fdc:	movs	r2, #4
    1fde:	mov	r0, r4
    1fe0:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    1fe4:	ldrb	r3, [r4, #8]
    1fe6:	str	r6, [sp, #40]	; 0x28
    1fe8:	cmp	r3, #0
    1fea:	bne.n	2092 <MTPD::GetObjectInfo(unsigned long)+0x236>
    1fec:	add	r1, sp, #40	; 0x28
    1fee:	movs	r2, #4
    1ff0:	mov	r0, r4
    1ff2:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    1ff6:	ldrb	r3, [r4, #8]
    1ff8:	str	r6, [sp, #36]	; 0x24
    1ffa:	cmp	r3, #0
    1ffc:	bne.n	2096 <MTPD::GetObjectInfo(unsigned long)+0x23a>
    1ffe:	movs	r2, #4
    2000:	add	r1, sp, #36	; 0x24
    2002:	mov	r0, r4
    2004:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2008:	ldrb	r3, [r4, #8]
    200a:	ldr	r2, [r5, #0]
    200c:	str	r2, [sp, #32]
    200e:	cmp	r3, #0
    2010:	bne.n	209a <MTPD::GetObjectInfo(unsigned long)+0x23e>
    2012:	add	r1, sp, #32
    2014:	movs	r2, #4
    2016:	mov	r0, r4
    2018:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    201c:	ldr	r3, [sp, #20]
    201e:	ldrb	r6, [r4, #8]
    2020:	sub.w	r3, r3, #4294967295
    2024:	clz	r3, r3
    2028:	lsrs	r3, r3, #5
    202a:	strh.w	r3, [sp, #18]
    202e:	cmp	r6, #0
    2030:	bne.n	209e <MTPD::GetObjectInfo(unsigned long)+0x242>
    2032:	add.w	r1, sp, #18
    2036:	movs	r2, #2
    2038:	mov	r0, r4
    203a:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    203e:	ldrb	r5, [r4, #8]
    2040:	str	r6, [sp, #68]	; 0x44
    2042:	cbnz	r5, 206e <MTPD::GetObjectInfo(unsigned long)+0x212>
    2044:	add	r1, sp, #68	; 0x44
    2046:	movs	r2, #4
    2048:	mov	r0, r4
    204a:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    204e:	ldrb	r3, [r4, #8]
    2050:	str	r5, [sp, #64]	; 0x40
    2052:	cbnz	r3, 206a <MTPD::GetObjectInfo(unsigned long)+0x20e>
    2054:	add	r1, sp, #64	; 0x40
    2056:	movs	r2, #4
    2058:	mov	r0, r4
    205a:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    205e:	b.n	1f0c <MTPD::GetObjectInfo(unsigned long)+0xb0>
    2060:	movw	r2, #12289	; 0x3001
    2064:	strh.w	r2, [sp, #16]
    2068:	b.n	1e90 <MTPD::GetObjectInfo(unsigned long)+0x34>
    206a:	ldr	r3, [r4, #12]
    206c:	b.n	1f08 <MTPD::GetObjectInfo(unsigned long)+0xac>
    206e:	ldr	r3, [r4, #12]
    2070:	b.n	1f00 <MTPD::GetObjectInfo(unsigned long)+0xa4>
    2072:	ldr	r3, [r4, #12]
    2074:	b.n	1e90 <MTPD::GetObjectInfo(unsigned long)+0x34>
    2076:	ldr	r3, [r4, #12]
    2078:	b.n	1e9a <MTPD::GetObjectInfo(unsigned long)+0x3e>
    207a:	ldr	r3, [r4, #12]
    207c:	b.n	1ea2 <MTPD::GetObjectInfo(unsigned long)+0x46>
    207e:	ldr	r3, [r4, #12]
    2080:	b.n	1eac <MTPD::GetObjectInfo(unsigned long)+0x50>
    2082:	ldr	r3, [r4, #12]
    2084:	b.n	1eb4 <MTPD::GetObjectInfo(unsigned long)+0x58>
    2086:	ldr	r3, [r4, #12]
    2088:	b.n	1ebc <MTPD::GetObjectInfo(unsigned long)+0x60>
    208a:	ldr	r3, [r4, #12]
    208c:	b.n	1ec4 <MTPD::GetObjectInfo(unsigned long)+0x68>
    208e:	ldr	r3, [r4, #12]
    2090:	b.n	1ecc <MTPD::GetObjectInfo(unsigned long)+0x70>
    2092:	ldr	r3, [r4, #12]
    2094:	b.n	1ed4 <MTPD::GetObjectInfo(unsigned long)+0x78>
    2096:	ldr	r3, [r4, #12]
    2098:	b.n	1edc <MTPD::GetObjectInfo(unsigned long)+0x80>
    209a:	ldr	r3, [r4, #12]
    209c:	b.n	1ee4 <MTPD::GetObjectInfo(unsigned long)+0x88>
    209e:	ldr	r3, [r4, #12]
    20a0:	b.n	1ef8 <MTPD::GetObjectInfo(unsigned long)+0x9c>
    20a2:	nop
    20a4:	.word	0x0000fa78

000020a8 <MTPD::getObjectPropsSupported(unsigned long)>:
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    20a8:	push	{r4, r5, r6, r7, lr}
      write32(propertyListNum);
    20aa:	ldr	r7, [pc, #96]	; (210c <MTPD::getObjectPropsSupported(unsigned long)+0x64>)
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    20ac:	ldrb	r2, [r0, #8]
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
    20ae:	ldr	r3, [r7, #0]
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    20b0:	sub	sp, #12
    20b2:	mov	r5, r0
    20b4:	str	r3, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    20b6:	cbz	r2, 20fe <MTPD::getObjectPropsSupported(unsigned long)+0x56>
      write_length_ += len;
    20b8:	ldr	r2, [r0, #12]
    20ba:	adds	r2, #4
    20bc:	str	r2, [r0, #12]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    20be:	cbz	r3, 20fa <MTPD::getObjectPropsSupported(unsigned long)+0x52>
    20c0:	ldr	r6, [pc, #76]	; (2110 <MTPD::getObjectPropsSupported(unsigned long)+0x68>)
    20c2:	movw	r2, #56321	; 0xdc01
    20c6:	movs	r4, #0
    20c8:	b.n	20dc <MTPD::getObjectPropsSupported(unsigned long)+0x34>
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    20ca:	ldr	r3, [r5, #12]
    20cc:	adds	r3, #2
    20ce:	str	r3, [r5, #12]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    20d0:	ldr	r3, [r7, #0]
    20d2:	adds	r4, #1
    20d4:	cmp	r3, r4
    20d6:	bls.n	20fa <MTPD::getObjectPropsSupported(unsigned long)+0x52>
    20d8:	ldrh.w	r2, [r6, #2]!
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    20dc:	ldrb	r3, [r5, #8]
    20de:	strh.w	r2, [sp, #2]
    20e2:	cmp	r3, #0
    20e4:	bne.n	20ca <MTPD::getObjectPropsSupported(unsigned long)+0x22>
    20e6:	movs	r2, #2
    20e8:	add.w	r1, sp, r2
    20ec:	mov	r0, r5
    20ee:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    20f2:	ldr	r3, [r7, #0]
    20f4:	adds	r4, #1
    20f6:	cmp	r3, r4
    20f8:	bhi.n	20d8 <MTPD::getObjectPropsSupported(unsigned long)+0x30>
    }
    20fa:	add	sp, #12
    20fc:	pop	{r4, r5, r6, r7, pc}
    20fe:	movs	r2, #4
    2100:	add.w	r1, sp, r2
    2104:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2108:	ldr	r3, [r7, #0]
    210a:	b.n	20be <MTPD::getObjectPropsSupported(unsigned long)+0x16>
    210c:	.word	0x1fff0974
    2110:	.word	0x0000fc04

00002114 <MTPD::getObjectPropValue(unsigned long, unsigned long)>:
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    2114:	push	{r4, r5, r6, r7, lr}
    2116:	mov	r5, r0
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      storage_->GetObjectInfo(p1,name,&size,&parent);
    2118:	ldr	r0, [r0, #0]
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    211a:	sub	sp, #188	; 0xbc
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      storage_->GetObjectInfo(p1,name,&size,&parent);
    211c:	ldr	r3, [r0, #0]
    211e:	add	r4, sp, #20
    2120:	str	r4, [sp, #0]
    2122:	ldr	r6, [r3, #28]
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    2124:	mov	r4, r2
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      storage_->GetObjectInfo(p1,name,&size,&parent);
    2126:	add	r3, sp, #16
    2128:	add	r2, sp, #56	; 0x38
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    212a:	mov	r7, r1
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      storage_->GetObjectInfo(p1,name,&size,&parent);
    212c:	blx	r6
      dir = size == 0xFFFFFFFFUL;
      switch(p2)
    212e:	sub.w	r2, r4, #56320	; 0xdc00
    2132:	subs	r2, #1
    { char name[128];
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      storage_->GetObjectInfo(p1,name,&size,&parent);
      dir = size == 0xFFFFFFFFUL;
    2134:	ldr	r3, [sp, #16]
      switch(p2)
    2136:	cmp	r2, #67	; 0x43
    2138:	bhi.n	219c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x88>
    213a:	tbb	[pc, r2]
    213e:	.short	0x463d
    2140:	.word	0x2f2f6e61
    2144:	.word	0x2f313137
    2148:	.word	0x2f2f2f56
    214c:	.word	0x2f2f2f2f
    2150:	.word	0x2f2f2f2f
    2154:	.word	0x2f2f2f2f
    2158:	.word	0x2f2f2f2f
    215c:	.word	0x2f2f2f2f
    2160:	.word	0x2f2f2f2f
    2164:	.word	0x2f2f2f2f
    2168:	.word	0x2f2f2f2f
    216c:	.word	0x2f2f2f2f
    2170:	.word	0x2f2f2f2f
    2174:	.word	0x2f2f2f2f
    2178:	.word	0x2f2f2f2f
    217c:	.word	0x2f222f2f
    2180:	.short	0x372f
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2182:	ldrb	r3, [r5, #8]
    2184:	str	r7, [sp, #52]	; 0x34
    2186:	cmp	r3, #0
    2188:	beq.n	222a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x116>
      write_length_ += len;
    218a:	ldr	r3, [r5, #12]
    218c:	adds	r3, #4
    218e:	str	r3, [r5, #12]
    2190:	adds	r3, #4
    2192:	str	r3, [r5, #12]
    2194:	adds	r3, #4
    2196:	str	r3, [r5, #12]
    2198:	adds	r3, #4
    219a:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    219c:	add	sp, #188	; 0xbc
    219e:	pop	{r4, r5, r6, r7, pc}
          break;
        case MTP_PROPERTY_DATE_CREATED:       //0xDC08:
          writestring("");
          break;
        case MTP_PROPERTY_DATE_MODIFIED:      //0xDC09:
          writestring("");
    21a0:	mov	r0, r5
    21a2:	ldr	r1, [pc, #264]	; (22ac <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x198>)
    21a4:	bl	1a14 <MTPD::writestring(char const*)>
          writestring(name);
          break;
        default:
          break;
      }
    }
    21a8:	add	sp, #188	; 0xbc
    21aa:	pop	{r4, r5, r6, r7, pc}
          write32(parent);
          write32(1);
          write32(0);
          break;
        case MTP_PROPERTY_NAME:               //0xDC44:
          writestring(name);
    21ac:	add	r1, sp, #56	; 0x38
    21ae:	mov	r0, r5
    21b0:	bl	1a14 <MTPD::writestring(char const*)>
          break;
        default:
          break;
      }
    }
    21b4:	add	sp, #188	; 0xbc
    21b6:	pop	{r4, r5, r6, r7, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    21b8:	ldrb	r3, [r5, #8]
    21ba:	str	r7, [sp, #24]
    21bc:	cmp	r3, #0
    21be:	beq.n	2278 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x164>
      write_length_ += len;
    21c0:	ldr	r3, [r5, #12]
    21c2:	adds	r3, #4
    21c4:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    21c6:	add	sp, #188	; 0xbc
    21c8:	pop	{r4, r5, r6, r7, pc}
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(p1);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    21ca:	adds	r3, #1
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    21cc:	ldrb	r2, [r5, #8]
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(p1);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    21ce:	movw	r3, #12289	; 0x3001
    21d2:	it	ne
    21d4:	movne.w	r3, #12288	; 0x3000
    21d8:	strh.w	r3, [sp, #12]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    21dc:	cmp	r2, #0
    21de:	beq.n	226c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x158>
      write_length_ += len;
    21e0:	ldr	r3, [r5, #12]
    21e2:	adds	r3, #2
    21e4:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    21e6:	add	sp, #188	; 0xbc
    21e8:	pop	{r4, r5, r6, r7, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    21ea:	ldrb	r3, [r5, #8]
    21ec:	ldr	r2, [sp, #20]
    21ee:	str	r2, [sp, #36]	; 0x24
    21f0:	cmp	r3, #0
    21f2:	bne.n	21c0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xac>
    21f4:	mov	r0, r5
    21f6:	movs	r2, #4
    21f8:	add	r1, sp, #36	; 0x24
    21fa:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    21fe:	b.n	219c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x88>
    2200:	ldrb	r3, [r5, #8]
    2202:	movs	r2, #0
    2204:	strh.w	r2, [sp, #14]
    2208:	cmp	r3, #0
    220a:	bne.n	21e0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    220c:	mov	r0, r5
    220e:	movs	r2, #2
    2210:	add.w	r1, sp, #14
    2214:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2218:	b.n	219c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x88>
    221a:	ldrb	r4, [r5, #8]
    221c:	str	r3, [sp, #32]
    221e:	cmp	r4, #0
    2220:	beq.n	2284 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x170>
      write_length_ += len;
    2222:	ldr	r3, [r5, #12]
    2224:	adds	r3, #4
    2226:	str	r3, [r5, #12]
    2228:	b.n	2198 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x84>
    222a:	movs	r2, #4
    222c:	add	r1, sp, #52	; 0x34
    222e:	mov	r0, r5
    2230:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2234:	ldrb	r3, [r5, #8]
    2236:	ldr	r2, [sp, #20]
    2238:	str	r2, [sp, #48]	; 0x30
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    223a:	cmp	r3, #0
    223c:	bne.n	22a8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x194>
    223e:	movs	r2, #4
    2240:	add	r1, sp, #48	; 0x30
    2242:	mov	r0, r5
    2244:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2248:	ldrb	r4, [r5, #8]
    224a:	movs	r3, #1
    224c:	str	r3, [sp, #44]	; 0x2c
    224e:	cbnz	r4, 22a4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x190>
    2250:	movs	r2, #4
    2252:	add	r1, sp, #44	; 0x2c
    2254:	mov	r0, r5
    2256:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    225a:	ldrb	r3, [r5, #8]
    225c:	str	r4, [sp, #40]	; 0x28
    225e:	cbnz	r3, 22a0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x18c>
    2260:	mov	r0, r5
    2262:	movs	r2, #4
    2264:	add	r1, sp, #40	; 0x28
    2266:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    226a:	b.n	219c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x88>
    226c:	mov	r0, r5
    226e:	movs	r2, #2
    2270:	add	r1, sp, #12
    2272:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2276:	b.n	219c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x88>
    2278:	mov	r0, r5
    227a:	movs	r2, #4
    227c:	add	r1, sp, #24
    227e:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2282:	b.n	219c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x88>
    2284:	movs	r2, #4
    2286:	add	r1, sp, #32
    2288:	mov	r0, r5
    228a:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    228e:	ldrb	r3, [r5, #8]
    2290:	str	r4, [sp, #28]
    2292:	cbnz	r3, 22a0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x18c>
    2294:	mov	r0, r5
    2296:	movs	r2, #4
    2298:	add	r1, sp, #28
    229a:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    229e:	b.n	219c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x88>
    22a0:	ldr	r3, [r5, #12]
    22a2:	b.n	2198 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x84>
    22a4:	ldr	r3, [r5, #12]
    22a6:	b.n	2194 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x80>
    22a8:	ldr	r3, [r5, #12]
    22aa:	b.n	2190 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x7c>
    22ac:	.word	0x0000fa78

000022b0 <MTPD::GetStorageInfo(unsigned long)>:
  void MTPD::WriteStorageIDs() {
    write32(1); // 1 entry
    write32(1); // 1 storage
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    22b0:	push	{r4, r5, r6, lr}
    22b2:	mov	r4, r0
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    22b4:	ldr	r0, [r0, #0]
    22b6:	ldr	r3, [r0, #0]
  void MTPD::WriteStorageIDs() {
    write32(1); // 1 entry
    write32(1); // 1 storage
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    22b8:	sub	sp, #32
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    22ba:	ldr	r3, [r3, #0]
    22bc:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    22be:	ldrb	r3, [r4, #8]
    write32(1); // 1 entry
    write32(1); // 1 storage
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    22c0:	cmp	r0, #0
    22c2:	ite	eq
    22c4:	moveq	r2, #4
    22c6:	movne	r2, #1
    22c8:	strh.w	r2, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    22cc:	cmp	r3, #0
    22ce:	beq.n	2370 <MTPD::GetStorageInfo(unsigned long)+0xc0>
      write_length_ += len;
    22d0:	ldr	r3, [r4, #12]
    22d2:	adds	r3, #2
    22d4:	str	r3, [r4, #12]
    write32(1); // 1 storage
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories() ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    22d6:	ldr	r0, [r4, #0]
    22d8:	ldr	r3, [r0, #0]
    22da:	ldr	r3, [r3, #4]
    22dc:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    22de:	ldrb	r5, [r4, #8]
    write32(1); // 1 storage
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories() ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    22e0:	cmp	r0, #0
    22e2:	ite	eq
    22e4:	moveq	r3, #1
    22e6:	movne	r3, #2
    22e8:	strh.w	r3, [sp, #10]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    22ec:	cmp	r5, #0
    22ee:	beq.n	23aa <MTPD::GetStorageInfo(unsigned long)+0xfa>
      write_length_ += len;
    22f0:	ldr	r3, [r4, #12]
    22f2:	movs	r2, #0
    22f4:	adds	r3, #2
    22f6:	str	r3, [r4, #12]
    22f8:	strh.w	r2, [sp, #8]
    22fc:	adds	r3, #2
    22fe:	str	r3, [r4, #12]
  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories() ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)
    
  uint64_t nclust = storage_->clusterCount() ;
    2300:	ldr	r0, [r4, #0]
    2302:	ldr	r3, [r0, #0]
    2304:	ldr	r3, [r3, #8]
    2306:	blx	r3
    2308:	mov	r5, r0
  uint64_t nsect = storage_->clusterSize() ;
    230a:	ldr	r0, [r4, #0]
    230c:	ldr	r3, [r0, #0]
    230e:	ldr	r3, [r3, #16]
    2310:	blx	r3
    2312:	mov	r6, r0
    2314:	umull	r0, r1, r5, r0
    2318:	lsls	r3, r1, #9
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    231a:	ldrb	r2, [r4, #8]
    231c:	orr.w	r3, r3, r0, lsr #23
    2320:	lsls	r0, r0, #9
    2322:	str	r3, [sp, #28]
    2324:	str	r0, [sp, #24]
    2326:	cmp	r2, #0
    2328:	beq.n	239e <MTPD::GetStorageInfo(unsigned long)+0xee>
      write_length_ += len;
    232a:	ldr	r3, [r4, #12]
    232c:	adds	r3, #8
    232e:	str	r3, [r4, #12]
    write16(0x0000);   // access capability (read-write)
    
  uint64_t nclust = storage_->clusterCount() ;
  uint64_t nsect = storage_->clusterSize() ;
    write64(nclust*nsect*512L);  // max capacity
  uint64_t nfree = storage_->freeClusters() ;
    2330:	ldr	r0, [r4, #0]
    2332:	ldr	r3, [r0, #0]
    2334:	ldr	r3, [r3, #12]
    2336:	blx	r3
    2338:	lsls	r2, r6, #9
    233a:	umull	r2, r3, r2, r0
    233e:	lsrs	r6, r6, #23
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2340:	ldrb	r1, [r4, #8]
    2342:	mla	r3, r0, r6, r3
    2346:	strd	r2, r3, [sp, #16]
    234a:	cbz	r1, 237e <MTPD::GetStorageInfo(unsigned long)+0xce>
      write_length_ += len;
    234c:	ldr	r3, [r4, #12]
    234e:	mov.w	r2, #4294967295
    2352:	adds	r3, #8
    2354:	str	r3, [r4, #12]
    2356:	str	r2, [sp, #12]
    2358:	adds	r3, #4
    235a:	str	r3, [r4, #12]
    write64(nclust*nsect*512L);  // max capacity
  uint64_t nfree = storage_->freeClusters() ;
    write64(nfree*nsect*512L);  // free space (100M)
    //
    write32(0xFFFFFFFFUL);  // free space (objects)
    writestring("SD Card");  // storage descriptor
    235c:	mov	r0, r4
    235e:	ldr	r1, [pc, #116]	; (23d4 <MTPD::GetStorageInfo(unsigned long)+0x124>)
    2360:	bl	1a14 <MTPD::writestring(char const*)>
    writestring("");  // volume identifier
    2364:	mov	r0, r4
    2366:	ldr	r1, [pc, #112]	; (23d8 <MTPD::GetStorageInfo(unsigned long)+0x128>)
    2368:	bl	1a14 <MTPD::writestring(char const*)>
  }
    236c:	add	sp, #32
    236e:	pop	{r4, r5, r6, pc}
    2370:	movs	r2, #2
    2372:	add.w	r1, sp, #6
    2376:	mov	r0, r4
    2378:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    237c:	b.n	22d6 <MTPD::GetStorageInfo(unsigned long)+0x26>
    237e:	movs	r2, #8
    2380:	add	r1, sp, #16
    2382:	mov	r0, r4
    2384:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2388:	ldrb	r3, [r4, #8]
    238a:	mov.w	r2, #4294967295
    238e:	str	r2, [sp, #12]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2390:	cbnz	r3, 23ca <MTPD::GetStorageInfo(unsigned long)+0x11a>
    2392:	movs	r2, #4
    2394:	add	r1, sp, #12
    2396:	mov	r0, r4
    2398:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    239c:	b.n	235c <MTPD::GetStorageInfo(unsigned long)+0xac>
    239e:	movs	r2, #8
    23a0:	add	r1, sp, #24
    23a2:	mov	r0, r4
    23a4:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    23a8:	b.n	2330 <MTPD::GetStorageInfo(unsigned long)+0x80>
    23aa:	movs	r2, #2
    23ac:	add.w	r1, sp, #10
    23b0:	mov	r0, r4
    23b2:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    23b6:	ldrb	r3, [r4, #8]
    23b8:	strh.w	r5, [sp, #8]
    23bc:	cbnz	r3, 23ce <MTPD::GetStorageInfo(unsigned long)+0x11e>
    23be:	movs	r2, #2
    23c0:	add	r1, sp, #8
    23c2:	mov	r0, r4
    23c4:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    23c8:	b.n	2300 <MTPD::GetStorageInfo(unsigned long)+0x50>
    23ca:	ldr	r3, [r4, #12]
    23cc:	b.n	2358 <MTPD::GetStorageInfo(unsigned long)+0xa8>
    23ce:	ldr	r3, [r4, #12]
    23d0:	b.n	22fc <MTPD::GetStorageInfo(unsigned long)+0x4c>
    23d2:	nop
    23d4:	.word	0x0000fc44
    23d8:	.word	0x0000fa78

000023dc <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
    23dc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      switch(p1)
    23e0:	sub.w	r1, r1, #56320	; 0xdc00
    23e4:	subs	r1, #1
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
    23e6:	sub	sp, #148	; 0x94
    23e8:	mov	r4, r0
      switch(p1)
    23ea:	cmp	r1, #67	; 0x43
    23ec:	bhi.n	24a4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    23ee:	tbh	[pc, r1, lsl #1]
    23f2:	.short	0x005c
    23f4:	.word	0x0080006e
    23f8:	.word	0x005900c6
    23fc:	.word	0x00d80059
    2400:	.word	0x01690121
    2404:	.word	0x01b10059
    2408:	.word	0x00590059
    240c:	.word	0x00590059
    2410:	.word	0x00590059
    2414:	.word	0x00590059
    2418:	.word	0x00590059
    241c:	.word	0x00590059
    2420:	.word	0x00590059
    2424:	.word	0x00590059
    2428:	.word	0x00590059
    242c:	.word	0x00590059
    2430:	.word	0x00590059
    2434:	.word	0x00590059
    2438:	.word	0x00590059
    243c:	.word	0x00590059
    2440:	.word	0x00590059
    2444:	.word	0x00590059
    2448:	.word	0x00590059
    244c:	.word	0x00590059
    2450:	.word	0x00590059
    2454:	.word	0x00590059
    2458:	.word	0x00590059
    245c:	.word	0x00590059
    2460:	.word	0x00590059
    2464:	.word	0x00590059
    2468:	.word	0x00590059
    246c:	.word	0x00590059
    2470:	.word	0x01f70059
    2474:	.word	0x00590059
    2478:	.short	0x0044
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    247a:	ldrb	r3, [r0, #8]
    247c:	movw	r2, #56388	; 0xdc44
    2480:	strh.w	r2, [sp, #70]	; 0x46
    2484:	cmp	r3, #0
    2486:	beq.w	2904 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x528>
      write_length_ += len;
    248a:	ldr	r3, [r4, #12]
    248c:	adds	r3, #2
    248e:	str	r3, [r4, #12]
    2490:	adds	r3, #2
    2492:	str	r3, [r4, #12]
    2494:	adds	r3, #1
    2496:	str	r3, [r4, #12]
    2498:	adds	r3, #1
    249a:	str	r3, [r4, #12]
    249c:	adds	r3, #4
    249e:	str	r3, [r4, #12]
    24a0:	adds	r3, #1
    24a2:	str	r3, [r4, #12]
          write8(0);
          break;
        default:
          break;
      }
    }
    24a4:	add	sp, #148	; 0x94
    24a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    24aa:	ldrb	r3, [r0, #8]
    24ac:	movw	r2, #56321	; 0xdc01
    24b0:	strh.w	r2, [sp, #30]
    24b4:	cmp	r3, #0
    24b6:	beq.w	2a18 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x63c>
      write_length_ += len;
    24ba:	ldr	r3, [r4, #12]
    24bc:	adds	r3, #2
    24be:	str	r3, [r4, #12]
    24c0:	adds	r3, #2
    24c2:	str	r3, [r4, #12]
    24c4:	adds	r3, #1
    24c6:	str	r3, [r4, #12]
    24c8:	adds	r3, #4
    24ca:	str	r3, [r4, #12]
    24cc:	b.n	249c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    24ce:	ldrb	r3, [r0, #8]
    24d0:	movw	r2, #56322	; 0xdc02
    24d4:	strh.w	r2, [sp, #36]	; 0x24
    24d8:	cmp	r3, #0
    24da:	beq.w	2886 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4aa>
      write_length_ += len;
    24de:	ldr	r3, [r4, #12]
    24e0:	adds	r3, #2
    24e2:	str	r3, [r4, #12]
    24e4:	adds	r3, #2
    24e6:	str	r3, [r4, #12]
    24e8:	adds	r3, #1
    24ea:	str	r3, [r4, #12]
    24ec:	adds	r3, #2
    24ee:	str	r3, [r4, #12]
    24f0:	b.n	249c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    24f2:	ldrb	r3, [r0, #8]
    24f4:	movw	r2, #56323	; 0xdc03
    24f8:	strh.w	r2, [sp, #42]	; 0x2a
    24fc:	cmp	r3, #0
    24fe:	bne.n	24de <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x102>
    2500:	movs	r2, #2
    2502:	add.w	r1, sp, #42	; 0x2a
    2506:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    250a:	ldrb	r7, [r4, #8]
    250c:	movs	r6, #4
    250e:	strh.w	r6, [sp, #40]	; 0x28
    2512:	cmp	r7, #0
    2514:	bne.w	2aae <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d2>
    2518:	movs	r2, #2
    251a:	add	r1, sp, #40	; 0x28
    251c:	mov	r0, r4
    251e:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2522:	ldrb	r5, [r4, #8]
    2524:	strb.w	r7, [sp, #9]
    2528:	cmp	r5, #0
    252a:	bne.w	2aaa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ce>
    252e:	movs	r2, #1
    2530:	add.w	r1, sp, #9
    2534:	mov	r0, r4
    2536:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    253a:	ldrb	r7, [r4, #8]
    253c:	strh.w	r5, [sp, #38]	; 0x26
    2540:	cmp	r7, #0
    2542:	bne.w	2aa6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ca>
    2546:	movs	r2, #2
    2548:	add.w	r1, sp, #38	; 0x26
    254c:	mov	r0, r4
    254e:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2552:	ldrb	r5, [r4, #8]
    2554:	str	r7, [sp, #84]	; 0x54
    2556:	cmp	r5, #0
    2558:	bne.w	2a82 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    255c:	mov	r2, r6
    255e:	add	r1, sp, #84	; 0x54
    2560:	mov	r0, r4
    2562:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2566:	ldrb	r3, [r4, #8]
    2568:	strb.w	r5, [sp, #8]
    256c:	cmp	r3, #0
    256e:	bne.w	2a7e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    2572:	mov	r0, r4
    2574:	movs	r2, #1
    2576:	add	r1, sp, #8
    2578:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    257c:	b.n	24a4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    257e:	ldrb	r3, [r0, #8]
    2580:	movw	r2, #56324	; 0xdc04
    2584:	strh.w	r2, [sp, #46]	; 0x2e
    2588:	cmp	r3, #0
    258a:	beq.w	2804 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x428>
      write_length_ += len;
    258e:	ldr	r3, [r0, #12]
    2590:	adds	r3, #2
    2592:	str	r3, [r0, #12]
    2594:	adds	r3, #2
    2596:	str	r3, [r4, #12]
    2598:	adds	r3, #1
    259a:	str	r3, [r4, #12]
    259c:	adds	r3, #8
    259e:	str	r3, [r4, #12]
    25a0:	b.n	249c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    25a2:	ldrb	r3, [r0, #8]
    25a4:	movw	r2, #56327	; 0xdc07
    25a8:	strh.w	r2, [sp, #50]	; 0x32
    25ac:	cmp	r3, #0
    25ae:	bne.w	248a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    25b2:	movs	r2, #2
    25b4:	add.w	r1, sp, #50	; 0x32
    25b8:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    25bc:	ldrb	r3, [r4, #8]
    25be:	movw	r2, #65535	; 0xffff
    25c2:	strh.w	r2, [sp, #48]	; 0x30
    25c6:	cmp	r3, #0
    25c8:	bne.w	2a96 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    25cc:	movs	r2, #2
    25ce:	add	r1, sp, #48	; 0x30
    25d0:	mov	r0, r4
    25d2:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    25d6:	ldrb	r6, [r4, #8]
    25d8:	movs	r5, #1
    25da:	strb.w	r5, [sp, #14]
    25de:	cmp	r6, #0
    25e0:	bne.w	2a92 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    25e4:	mov	r2, r5
    25e6:	add.w	r1, sp, #14
    25ea:	mov	r0, r4
    25ec:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    25f0:	ldrb	r7, [r4, #8]
    25f2:	strb.w	r6, [sp, #13]
    25f6:	cmp	r7, #0
    25f8:	bne.w	2aa2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    25fc:	mov	r2, r5
    25fe:	add.w	r1, sp, #13
    2602:	mov	r0, r4
    2604:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2608:	ldrb	r6, [r4, #8]
    260a:	str	r7, [sp, #92]	; 0x5c
    260c:	cmp	r6, #0
    260e:	bne.w	2a82 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    2612:	movs	r2, #4
    2614:	add	r1, sp, #92	; 0x5c
    2616:	mov	r0, r4
    2618:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    261c:	ldrb	r3, [r4, #8]
    261e:	strb.w	r6, [sp, #12]
    2622:	cmp	r3, #0
    2624:	bne.w	2a7e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    2628:	mov	r2, r5
    262a:	mov	r0, r4
    262c:	add	r1, sp, #12
    262e:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2632:	b.n	24a4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    2634:	ldrb	r3, [r0, #8]
    2636:	movw	r2, #56328	; 0xdc08
    263a:	strh.w	r2, [sp, #54]	; 0x36
    263e:	cmp	r3, #0
    2640:	bne.w	248a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    2644:	movs	r2, #2
    2646:	add.w	r1, sp, #54	; 0x36
    264a:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    264e:	ldrb	r6, [r4, #8]
    2650:	movw	r3, #65535	; 0xffff
    2654:	strh.w	r3, [sp, #52]	; 0x34
    2658:	cmp	r6, #0
    265a:	bne.w	2a96 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    265e:	movs	r2, #2
    2660:	add	r1, sp, #52	; 0x34
    2662:	mov	r0, r4
    2664:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2668:	ldrb	r5, [r4, #8]
    266a:	strb.w	r6, [sp, #17]
    266e:	cmp	r5, #0
    2670:	bne.w	2a92 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    2674:	movs	r2, #1
    2676:	add.w	r1, sp, #17
    267a:	mov	r0, r4
    267c:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2680:	ldrb	r6, [r4, #8]
    2682:	strb.w	r5, [sp, #16]
    2686:	cmp	r6, #0
    2688:	bne.w	2aa2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    268c:	movs	r2, #1
    268e:	add	r1, sp, #16
    2690:	mov	r0, r4
    2692:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2696:	ldrb	r5, [r4, #8]
    2698:	str	r6, [sp, #96]	; 0x60
    269a:	cmp	r5, #0
    269c:	bne.w	2a82 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    26a0:	movs	r2, #4
    26a2:	add	r1, sp, #96	; 0x60
    26a4:	mov	r0, r4
    26a6:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    26aa:	ldrb	r3, [r4, #8]
    26ac:	strb.w	r5, [sp, #15]
    26b0:	cmp	r3, #0
    26b2:	bne.w	2a7e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    26b6:	mov	r0, r4
    26b8:	movs	r2, #1
    26ba:	add.w	r1, sp, #15
    26be:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    26c2:	b.n	24a4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    26c4:	ldrb	r3, [r0, #8]
    26c6:	movw	r2, #56329	; 0xdc09
    26ca:	strh.w	r2, [sp, #58]	; 0x3a
    26ce:	cmp	r3, #0
    26d0:	bne.w	248a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    26d4:	movs	r2, #2
    26d6:	add.w	r1, sp, #58	; 0x3a
    26da:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    26de:	ldrb	r6, [r4, #8]
    26e0:	movw	r3, #65535	; 0xffff
    26e4:	strh.w	r3, [sp, #56]	; 0x38
    26e8:	cmp	r6, #0
    26ea:	bne.w	2a96 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    26ee:	movs	r2, #2
    26f0:	add	r1, sp, #56	; 0x38
    26f2:	mov	r0, r4
    26f4:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    26f8:	ldrb	r5, [r4, #8]
    26fa:	strb.w	r6, [sp, #20]
    26fe:	cmp	r5, #0
    2700:	bne.w	2a92 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    2704:	movs	r2, #1
    2706:	add	r1, sp, #20
    2708:	mov	r0, r4
    270a:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    270e:	ldrb	r6, [r4, #8]
    2710:	strb.w	r5, [sp, #19]
    2714:	cmp	r6, #0
    2716:	bne.w	2aa2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    271a:	movs	r2, #1
    271c:	add.w	r1, sp, #19
    2720:	mov	r0, r4
    2722:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2726:	ldrb	r5, [r4, #8]
    2728:	str	r6, [sp, #100]	; 0x64
    272a:	cmp	r5, #0
    272c:	bne.w	2a82 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    2730:	movs	r2, #4
    2732:	add	r1, sp, #100	; 0x64
    2734:	mov	r0, r4
    2736:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    273a:	ldrb	r3, [r4, #8]
    273c:	strb.w	r5, [sp, #18]
    2740:	cmp	r3, #0
    2742:	bne.w	2a7e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    2746:	mov	r0, r4
    2748:	movs	r2, #1
    274a:	add.w	r1, sp, #18
    274e:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2752:	b.n	24a4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    2754:	ldrb	r3, [r0, #8]
    2756:	movw	r2, #56331	; 0xdc0b
    275a:	strh.w	r2, [sp, #62]	; 0x3e
    275e:	cmp	r3, #0
    2760:	bne.w	24ba <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xde>
    2764:	movs	r2, #2
    2766:	add.w	r1, sp, #62	; 0x3e
    276a:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    276e:	ldrb	r6, [r4, #8]
    2770:	movs	r3, #6
    2772:	strh.w	r3, [sp, #60]	; 0x3c
    2776:	cmp	r6, #0
    2778:	bne.w	2a8e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b2>
    277c:	movs	r2, #2
    277e:	add	r1, sp, #60	; 0x3c
    2780:	mov	r0, r4
    2782:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2786:	ldrb	r5, [r4, #8]
    2788:	strb.w	r6, [sp, #22]
    278c:	cmp	r5, #0
    278e:	bne.w	2a8a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ae>
    2792:	movs	r2, #1
    2794:	add.w	r1, sp, #22
    2798:	mov	r0, r4
    279a:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    279e:	ldrb	r6, [r4, #8]
    27a0:	str	r5, [sp, #108]	; 0x6c
    27a2:	cmp	r6, #0
    27a4:	bne.w	2a86 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6aa>
    27a8:	movs	r2, #4
    27aa:	add	r1, sp, #108	; 0x6c
    27ac:	mov	r0, r4
    27ae:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    27b2:	ldrb	r5, [r4, #8]
    27b4:	str	r6, [sp, #104]	; 0x68
    27b6:	cmp	r5, #0
    27b8:	bne.w	2a82 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    27bc:	movs	r2, #4
    27be:	add	r1, sp, #104	; 0x68
    27c0:	mov	r0, r4
    27c2:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    27c6:	ldrb	r3, [r4, #8]
    27c8:	strb.w	r5, [sp, #21]
    27cc:	cmp	r3, #0
    27ce:	bne.w	2a7e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    27d2:	mov	r0, r4
    27d4:	movs	r2, #1
    27d6:	add.w	r1, sp, #21
    27da:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    27de:	b.n	24a4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    27e0:	ldrb	r3, [r0, #8]
    27e2:	movw	r2, #56385	; 0xdc41
    27e6:	strh.w	r2, [sp, #66]	; 0x42
    27ea:	cmp	r3, #0
    27ec:	beq.w	2986 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5aa>
      write_length_ += len;
    27f0:	ldr	r3, [r0, #12]
    27f2:	adds	r3, #2
    27f4:	str	r3, [r0, #12]
    27f6:	adds	r3, #2
    27f8:	str	r3, [r4, #12]
    27fa:	adds	r3, #1
    27fc:	str	r3, [r4, #12]
    27fe:	adds	r3, #8
    2800:	str	r3, [r4, #12]
    2802:	b.n	259c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c0>
    2804:	movs	r2, #2
    2806:	add.w	r1, sp, #46	; 0x2e
    280a:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    280e:	ldrb	r6, [r4, #8]
    2810:	movs	r5, #8
    2812:	strh.w	r5, [sp, #44]	; 0x2c
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2816:	cmp	r6, #0
    2818:	bne.w	2a9e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c2>
    281c:	movs	r2, #2
    281e:	add	r1, sp, #44	; 0x2c
    2820:	mov	r0, r4
    2822:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2826:	ldrb	r3, [r4, #8]
    2828:	strb.w	r6, [sp, #11]
    282c:	cmp	r3, #0
    282e:	bne.w	2a9a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6be>
    2832:	movs	r2, #1
    2834:	add.w	r1, sp, #11
    2838:	mov	r0, r4
    283a:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    283e:	ldrb	r6, [r4, #8]
    2840:	movs	r2, #0
    2842:	movs	r3, #0
    2844:	strd	r2, r3, [sp, #120]	; 0x78
    2848:	cmp	r6, #0
    284a:	bne.w	2ab2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d6>
    284e:	mov	r2, r5
    2850:	add	r1, sp, #120	; 0x78
    2852:	mov	r0, r4
    2854:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2858:	ldrb	r5, [r4, #8]
    285a:	str	r6, [sp, #88]	; 0x58
    285c:	cmp	r5, #0
    285e:	bne.w	2a82 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    2862:	movs	r2, #4
    2864:	add	r1, sp, #88	; 0x58
    2866:	mov	r0, r4
    2868:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    286c:	ldrb	r3, [r4, #8]
    286e:	strb.w	r5, [sp, #10]
    2872:	cmp	r3, #0
    2874:	bne.w	2a7e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    2878:	mov	r0, r4
    287a:	movs	r2, #1
    287c:	add.w	r1, sp, #10
    2880:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2884:	b.n	24a4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    2886:	movs	r2, #2
    2888:	add	r1, sp, #36	; 0x24
    288a:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    288e:	ldrb	r7, [r4, #8]
    2890:	movs	r6, #4
    2892:	strh.w	r6, [sp, #34]	; 0x22
    2896:	cmp	r7, #0
    2898:	bne.w	2aae <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d2>
    289c:	movs	r2, #2
    289e:	add.w	r1, sp, #34	; 0x22
    28a2:	mov	r0, r4
    28a4:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    28a8:	ldrb	r5, [r4, #8]
    28aa:	strb.w	r7, [sp, #7]
    28ae:	cmp	r5, #0
    28b0:	bne.w	2aaa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ce>
    28b4:	movs	r2, #1
    28b6:	add.w	r1, sp, #7
    28ba:	mov	r0, r4
    28bc:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    28c0:	ldrb	r7, [r4, #8]
    28c2:	strh.w	r5, [sp, #32]
    28c6:	cmp	r7, #0
    28c8:	bne.w	2aa6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ca>
    28cc:	movs	r2, #2
    28ce:	add	r1, sp, #32
    28d0:	mov	r0, r4
    28d2:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    28d6:	ldrb	r5, [r4, #8]
    28d8:	str	r7, [sp, #80]	; 0x50
    28da:	cmp	r5, #0
    28dc:	bne.w	2a82 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    28e0:	mov	r2, r6
    28e2:	add	r1, sp, #80	; 0x50
    28e4:	mov	r0, r4
    28e6:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    28ea:	ldrb	r3, [r4, #8]
    28ec:	strb.w	r5, [sp, #6]
    28f0:	cmp	r3, #0
    28f2:	bne.w	2a7e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    28f6:	mov	r0, r4
    28f8:	movs	r2, #1
    28fa:	add.w	r1, sp, #6
    28fe:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2902:	b.n	24a4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    2904:	movs	r2, #2
    2906:	add.w	r1, sp, #70	; 0x46
    290a:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    290e:	ldrb	r6, [r4, #8]
    2910:	movw	r3, #65535	; 0xffff
    2914:	strh.w	r3, [sp, #68]	; 0x44
    2918:	cmp	r6, #0
    291a:	bne.w	2a96 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    291e:	movs	r2, #2
    2920:	add	r1, sp, #68	; 0x44
    2922:	mov	r0, r4
    2924:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2928:	ldrb	r5, [r4, #8]
    292a:	strb.w	r6, [sp, #27]
    292e:	cmp	r5, #0
    2930:	bne.w	2a92 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    2934:	movs	r2, #1
    2936:	add.w	r1, sp, #27
    293a:	mov	r0, r4
    293c:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2940:	ldrb	r6, [r4, #8]
    2942:	strb.w	r5, [sp, #26]
    2946:	cmp	r6, #0
    2948:	bne.w	2aa2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    294c:	movs	r2, #1
    294e:	add.w	r1, sp, #26
    2952:	mov	r0, r4
    2954:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2958:	ldrb	r5, [r4, #8]
    295a:	str	r6, [sp, #116]	; 0x74
    295c:	cmp	r5, #0
    295e:	bne.w	2a82 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    2962:	movs	r2, #4
    2964:	add	r1, sp, #116	; 0x74
    2966:	mov	r0, r4
    2968:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    296c:	ldrb	r3, [r4, #8]
    296e:	strb.w	r5, [sp, #25]
    2972:	cmp	r3, #0
    2974:	bne.w	2a7e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    2978:	mov	r0, r4
    297a:	movs	r2, #1
    297c:	add.w	r1, sp, #25
    2980:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2984:	b.n	24a4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    2986:	movs	r2, #2
    2988:	add.w	r1, sp, #66	; 0x42
    298c:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2990:	ldrb	r5, [r4, #8]
    2992:	movs	r3, #10
    2994:	strh.w	r3, [sp, #64]	; 0x40
    2998:	cmp	r5, #0
    299a:	bne.w	2abe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6e2>
    299e:	movs	r2, #2
    29a0:	add	r1, sp, #64	; 0x40
    29a2:	mov	r0, r4
    29a4:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    29a8:	ldrb	r3, [r4, #8]
    29aa:	strb.w	r5, [sp, #24]
    29ae:	cmp	r3, #0
    29b0:	bne.w	2aba <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6de>
    29b4:	movs	r2, #1
    29b6:	add	r1, sp, #24
    29b8:	mov	r0, r4
    29ba:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    29be:	ldrb	r3, [r4, #8]
    29c0:	mov.w	r8, #0
    29c4:	mov.w	r9, #0
    29c8:	strd	r8, r9, [sp, #136]	; 0x88
    29cc:	cmp	r3, #0
    29ce:	bne.n	2ab6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6da>
    29d0:	movs	r2, #8
    29d2:	add	r1, sp, #136	; 0x88
    29d4:	mov	r0, r4
    29d6:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    29da:	ldrb	r6, [r4, #8]
    29dc:	strd	r8, r9, [sp, #128]	; 0x80
    29e0:	cmp	r6, #0
    29e2:	bne.n	2ab2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d6>
    29e4:	movs	r2, #8
    29e6:	add	r1, sp, #128	; 0x80
    29e8:	mov	r0, r4
    29ea:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    29ee:	ldrb	r5, [r4, #8]
    29f0:	str	r6, [sp, #112]	; 0x70
    29f2:	cmp	r5, #0
    29f4:	bne.n	2a82 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    29f6:	movs	r2, #4
    29f8:	add	r1, sp, #112	; 0x70
    29fa:	mov	r0, r4
    29fc:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2a00:	ldrb	r3, [r4, #8]
    2a02:	strb.w	r5, [sp, #23]
    2a06:	cmp	r3, #0
    2a08:	bne.n	2a7e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    2a0a:	mov	r0, r4
    2a0c:	movs	r2, #1
    2a0e:	add.w	r1, sp, #23
    2a12:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2a16:	b.n	24a4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    2a18:	movs	r2, #2
    2a1a:	add.w	r1, sp, #30
    2a1e:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2a22:	ldrb	r6, [r4, #8]
    2a24:	movs	r3, #6
    2a26:	strh.w	r3, [sp, #28]
    2a2a:	cbnz	r6, 2a8e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b2>
    2a2c:	movs	r2, #2
    2a2e:	add	r1, sp, #28
    2a30:	mov	r0, r4
    2a32:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2a36:	ldrb	r5, [r4, #8]
    2a38:	strb.w	r6, [sp, #5]
    2a3c:	cbnz	r5, 2a8a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ae>
    2a3e:	movs	r2, #1
    2a40:	add.w	r1, sp, #5
    2a44:	mov	r0, r4
    2a46:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2a4a:	ldrb	r6, [r4, #8]
    2a4c:	str	r5, [sp, #76]	; 0x4c
    2a4e:	cbnz	r6, 2a86 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6aa>
    2a50:	movs	r2, #4
    2a52:	add	r1, sp, #76	; 0x4c
    2a54:	mov	r0, r4
    2a56:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2a5a:	ldrb	r5, [r4, #8]
    2a5c:	str	r6, [sp, #72]	; 0x48
    2a5e:	cbnz	r5, 2a82 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    2a60:	movs	r2, #4
    2a62:	add	r1, sp, #72	; 0x48
    2a64:	mov	r0, r4
    2a66:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2a6a:	ldrb	r3, [r4, #8]
    2a6c:	strb.w	r5, [sp, #4]
    2a70:	cbnz	r3, 2a7e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    2a72:	mov	r0, r4
    2a74:	movs	r2, #1
    2a76:	add	r1, sp, #4
    2a78:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2a7c:	b.n	24a4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    2a7e:	ldr	r3, [r4, #12]
    2a80:	b.n	24a0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc4>
    2a82:	ldr	r3, [r4, #12]
    2a84:	b.n	249c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
    2a86:	ldr	r3, [r4, #12]
    2a88:	b.n	24c8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xec>
    2a8a:	ldr	r3, [r4, #12]
    2a8c:	b.n	24c4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe8>
    2a8e:	ldr	r3, [r4, #12]
    2a90:	b.n	24c0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe4>
    2a92:	ldr	r3, [r4, #12]
    2a94:	b.n	2494 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
    2a96:	ldr	r3, [r4, #12]
    2a98:	b.n	2490 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb4>
    2a9a:	ldr	r3, [r4, #12]
    2a9c:	b.n	2598 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1bc>
    2a9e:	ldr	r3, [r4, #12]
    2aa0:	b.n	2594 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b8>
    2aa2:	ldr	r3, [r4, #12]
    2aa4:	b.n	2498 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbc>
    2aa6:	ldr	r3, [r4, #12]
    2aa8:	b.n	24ec <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x110>
    2aaa:	ldr	r3, [r4, #12]
    2aac:	b.n	24e8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10c>
    2aae:	ldr	r3, [r4, #12]
    2ab0:	b.n	24e4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x108>
    2ab2:	ldr	r3, [r4, #12]
    2ab4:	b.n	259c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c0>
    2ab6:	ldr	r3, [r4, #12]
    2ab8:	b.n	27fe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x422>
    2aba:	ldr	r3, [r4, #12]
    2abc:	b.n	27fa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x41e>
    2abe:	ldr	r3, [r4, #12]
    2ac0:	b.n	27f6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x41a>
    2ac2:	nop

00002ac4 <MTPD::receive_buffer()>:
      data_buffer_ = usb_malloc();
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::receive_buffer() {
    2ac4:	push	{r4, lr}
    2ac6:	mov	r4, r0
    2ac8:	ldr	r3, [r4, #4]
    while (!data_buffer_) {
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
    2aca:	movs	r0, #5
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::receive_buffer() {
    while (!data_buffer_) {
    2acc:	cbnz	r3, 2ad6 <MTPD::receive_buffer()+0x12>
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
    2ace:	bl	9b00 <usb_rx>
    2ad2:	str	r0, [r4, #4]
      if (!data_buffer_) mtp_yield();
    2ad4:	cbz	r0, 2ad8 <MTPD::receive_buffer()+0x14>
    2ad6:	pop	{r4, pc}
    2ad8:	bl	eec <mtp_yield()>
    2adc:	b.n	2ac8 <MTPD::receive_buffer()+0x4>
    2ade:	nop

00002ae0 <MTPD::GetObject(unsigned long)>:
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    2ae0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2ae4:	mov	r6, r0
    uint32_t size = storage_->GetSize(object_id);
    2ae6:	ldr	r0, [r0, #0]
    2ae8:	ldr	r3, [r0, #0]
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    2aea:	sub	sp, #8
    uint32_t size = storage_->GetSize(object_id);
    2aec:	ldr	r3, [r3, #32]
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    2aee:	mov	r8, r1
    uint32_t size = storage_->GetSize(object_id);
    2af0:	blx	r3
    if (write_get_length_) {
    2af2:	ldrb	r5, [r6, #8]
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    uint32_t size = storage_->GetSize(object_id);
    2af4:	mov	r7, r0
    if (write_get_length_) {
    2af6:	cbnz	r5, 2b50 <MTPD::GetObject(unsigned long)+0x70>
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    2af8:	cbz	r0, 2b4a <MTPD::GetObject(unsigned long)+0x6a>
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
        data_buffer_->len += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    2afa:	mov	r9, r5
    2afc:	b.n	2b02 <MTPD::GetObject(unsigned long)+0x22>
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    2afe:	cmp	r7, r5
    2b00:	bls.n	2b4a <MTPD::GetObject(unsigned long)+0x6a>
        get_buffer();
    2b02:	mov	r0, r6
    2b04:	bl	1998 <MTPD::get_buffer()>
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
    2b08:	ldmia.w	r6, {r0, r3}
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
        get_buffer();
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
    2b0c:	ldrh.w	r2, [r3], #8
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
    2b10:	ldr	r1, [r0, #0]
    2b12:	subs	r4, r7, r5
    2b14:	rsb	lr, r2, #64	; 0x40
    2b18:	cmp	r4, lr
    2b1a:	it	cs
    2b1c:	movcs	r4, lr
    2b1e:	str	r4, [sp, #0]
    2b20:	add	r3, r2
    2b22:	ldr.w	sl, [r1, #40]	; 0x28
    2b26:	mov	r2, r5
    2b28:	mov	r1, r8
    2b2a:	blx	sl
        pos += to_copy;
        data_buffer_->len += to_copy;
    2b2c:	ldr	r1, [r6, #4]
    2b2e:	ldrh	r3, [r1, #0]
    2b30:	add	r3, r4
    2b32:	uxth	r3, r3
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    2b34:	cmp	r3, #64	; 0x40
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
    2b36:	add	r5, r4
        data_buffer_->len += to_copy;
    2b38:	strh	r3, [r1, #0]
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    2b3a:	bne.n	2afe <MTPD::GetObject(unsigned long)+0x1e>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
    2b3c:	movs	r0, #4
    2b3e:	bl	9c70 <usb_tx>
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    2b42:	cmp	r7, r5
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
        data_buffer_->len += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    2b44:	str.w	r9, [r6, #4]
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    2b48:	bhi.n	2b02 <MTPD::GetObject(unsigned long)+0x22>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
        }
      }
    }
  }
    2b4a:	add	sp, #8
    2b4c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    2b50:	ldr	r3, [r6, #12]
    2b52:	add	r7, r3
    2b54:	str	r7, [r6, #12]
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
        }
      }
    }
  }
    2b56:	add	sp, #8
    2b58:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00002b5c <MTPD::read(char*, unsigned long)>:
                CONTAINER->params[0], CONTAINER->params[1], CONTAINER->params[2]);  }


  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    2b5c:	cbz	r2, 2bc8 <MTPD::read(char*, unsigned long)+0x6c>
                CONTAINER->op, CONTAINER->len, CONTAINER->type, CONTAINER->transaction_id, \
                CONTAINER->params[0], CONTAINER->params[1], CONTAINER->params[2]);  }


  void MTPD::read(char* data, uint32_t size) 
  {
    2b5e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b62:	mov	r6, r0
    2b64:	mov	r5, r1
    while (size) {
    2b66:	mov	r8, r2
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
      if (data_buffer_->index == data_buffer_->len) {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
    2b68:	movs	r7, #0


  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
      receive_buffer();
    2b6a:	mov	r0, r6
    2b6c:	bl	2ac4 <MTPD::receive_buffer()>
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    2b70:	ldr	r3, [r6, #4]
    2b72:	ldrh.w	lr, [r3, #2]
    2b76:	ldrh.w	ip, [r3]
    2b7a:	rsb	r4, lr, ip
    2b7e:	cmp	r4, r8
    2b80:	it	cs
    2b82:	movcs	r4, r8
      to_copy = min(to_copy, size);
      if (data) {
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
    2b84:	add.w	r1, r3, #8
    2b88:	add	r1, lr
    2b8a:	mov	r0, r5
    2b8c:	mov	r2, r4
        data += to_copy;
      }
      size -= to_copy;
    2b8e:	rsb	r8, r4, r8
  {
    while (size) {
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, size);
      if (data) {
    2b92:	cbz	r5, 2ba4 <MTPD::read(char*, unsigned long)+0x48>
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
    2b94:	bl	9280 <memcpy>
    2b98:	ldr	r3, [r6, #4]
    2b9a:	ldrh.w	lr, [r3, #2]
    2b9e:	ldrh.w	ip, [r3]
        data += to_copy;
    2ba2:	add	r5, r4
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
    2ba4:	add	r4, lr
    2ba6:	uxth	r4, r4
      if (data_buffer_->index == data_buffer_->len) {
    2ba8:	cmp	ip, r4
      if (data) {
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
        data += to_copy;
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
    2baa:	strh	r4, [r3, #2]
      if (data_buffer_->index == data_buffer_->len) {
    2bac:	beq.n	2bb8 <MTPD::read(char*, unsigned long)+0x5c>
                CONTAINER->params[0], CONTAINER->params[1], CONTAINER->params[2]);  }


  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    2bae:	cmp.w	r8, #0
    2bb2:	bne.n	2b6a <MTPD::read(char*, unsigned long)+0xe>
    2bb4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        data += to_copy;
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
      if (data_buffer_->index == data_buffer_->len) {
        usb_free(data_buffer_);
    2bb8:	mov	r0, r3
    2bba:	bl	9ab4 <usb_free>
        data_buffer_ = NULL;
    2bbe:	str	r7, [r6, #4]
                CONTAINER->params[0], CONTAINER->params[1], CONTAINER->params[2]);  }


  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    2bc0:	cmp.w	r8, #0
    2bc4:	bne.n	2b6a <MTPD::read(char*, unsigned long)+0xe>
    2bc6:	b.n	2bb4 <MTPD::read(char*, unsigned long)+0x58>
    2bc8:	bx	lr
    2bca:	nop

00002bcc <MTPD::readstring(char*)>:

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    2bcc:	push	{r4, r5, r6, lr}
    2bce:	sub	sp, #8
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    2bd0:	movs	r2, #1
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    2bd2:	mov	r4, r1
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    2bd4:	add.w	r1, sp, #6
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    2bd8:	mov	r6, r0
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    2bda:	bl	2b5c <MTPD::read(char*, unsigned long)>
    2bde:	ldrb.w	r2, [sp, #6]
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
    2be2:	cbz	r4, 2c04 <MTPD::readstring(char*)+0x38>
    2be4:	adds	r5, r4, r2
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    2be6:	cbz	r2, 2c00 <MTPD::readstring(char*)+0x34>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2be8:	movs	r2, #2
    2bea:	add.w	r1, sp, #6
    2bee:	mov	r0, r6
    2bf0:	bl	2b5c <MTPD::read(char*, unsigned long)>
    2bf4:	ldrh.w	r3, [sp, #6]
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
        *(buffer++) = read16();
    2bf8:	strb.w	r3, [r4], #1
  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    2bfc:	cmp	r5, r4
    2bfe:	bne.n	2be8 <MTPD::readstring(char*)+0x1c>
        *(buffer++) = read16();
      }
    }
  }
    2c00:	add	sp, #8
    2c02:	pop	{r4, r5, r6, pc}
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    2c04:	lsls	r2, r2, #1
    2c06:	mov	r1, r4
    2c08:	mov	r0, r6
    2c0a:	bl	2b5c <MTPD::read(char*, unsigned long)>
    2c0e:	b.n	2c00 <MTPD::readstring(char*)+0x34>

00002c10 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.7]>:
      }
    }
    storage_->close();
  }
  
    uint32_t MTPD::setObjectPropValue(uint32_t p1, uint32_t p2)
    2c10:	push	{r4, r5, lr}
    2c12:	sub	sp, #132	; 0x84
    2c14:	mov	r4, r0
    2c16:	mov	r5, r1


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    2c18:	movs	r2, #12
    2c1a:	mov	r1, sp
    2c1c:	bl	2b5c <MTPD::read(char*, unsigned long)>
      receive_buffer();
      if(p2==0xDC07)
      {
        char filename[128];
        ReadMTPHeader();
        readstring(filename);
    2c20:	mov	r1, sp
    2c22:	mov	r0, r4
    2c24:	bl	2bcc <MTPD::readstring(char*)>

        storage_->rename(p1,filename);
    2c28:	ldr	r0, [r4, #0]
    2c2a:	ldr	r3, [r0, #0]
    2c2c:	mov	r2, sp
    2c2e:	mov	r1, r5
    2c30:	ldr	r3, [r3, #64]	; 0x40
    2c32:	blx	r3

        return 0x2001;
      }
      else
        return 0x2005;
    }
    2c34:	movw	r0, #8193	; 0x2001
    2c38:	add	sp, #132	; 0x84
    2c3a:	pop	{r4, r5, pc}

00002c3c <MTPD::SendObjectInfo(unsigned long, unsigned long)>:
        data_buffer_ = NULL;
      }
    }
  }

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    2c3c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2c40:	sub	sp, #268	; 0x10c


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    2c42:	add	r1, sp, #8
        data_buffer_ = NULL;
      }
    }
  }

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    2c44:	mov	r9, r2


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    2c46:	movs	r2, #12
        data_buffer_ = NULL;
      }
    }
  }

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    2c48:	mov	r5, r0


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    2c4a:	bl	2b5c <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    2c4e:	ldrh.w	r3, [sp, #12]
    2c52:	cmp	r3, #2
    2c54:	it	eq
    2c56:	ldreq	r4, [sp, #8]
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2c58:	mov.w	r2, #4
    2c5c:	add	r1, sp, #8
    2c5e:	mov	r0, r5
    2c60:	ite	eq
    2c62:	subeq	r4, #65	; 0x41
  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
    2c64:	mvnne.w	r4, #52	; 0x34
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2c68:	bl	2b5c <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2c6c:	movs	r2, #2
    2c6e:	add	r1, sp, #8
    2c70:	mov	r0, r5
    2c72:	bl	2b5c <MTPD::read(char*, unsigned long)>
    2c76:	ldrh.w	r8, [sp, #8]
  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    uint32_t len = ReadMTPHeader();
    char filename[256];

    read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    2c7a:	movw	r3, #12289	; 0x3001
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2c7e:	movs	r2, #2
    2c80:	add	r1, sp, #8
    2c82:	mov	r0, r5
  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    uint32_t len = ReadMTPHeader();
    char filename[256];

    read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    2c84:	rsb	r8, r3, r8
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2c88:	bl	2b5c <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2c8c:	movs	r2, #4
    2c8e:	add	r1, sp, #8
    2c90:	mov	r0, r5
    2c92:	bl	2b5c <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2c96:	movs	r2, #2
    2c98:	add	r1, sp, #8
    2c9a:	mov	r0, r5
    2c9c:	bl	2b5c <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2ca0:	movs	r2, #4
    2ca2:	add	r1, sp, #8
    2ca4:	mov	r0, r5
    2ca6:	bl	2b5c <MTPD::read(char*, unsigned long)>
    2caa:	movs	r2, #4
    2cac:	add	r1, sp, #8
    2cae:	mov	r0, r5
    2cb0:	bl	2b5c <MTPD::read(char*, unsigned long)>
    2cb4:	movs	r2, #4
    2cb6:	add	r1, sp, #8
    2cb8:	mov	r0, r5
    2cba:	bl	2b5c <MTPD::read(char*, unsigned long)>
    2cbe:	movs	r2, #4
    2cc0:	add	r1, sp, #8
    2cc2:	mov	r0, r5
    2cc4:	bl	2b5c <MTPD::read(char*, unsigned long)>
    2cc8:	movs	r2, #4
    2cca:	add	r1, sp, #8
    2ccc:	mov	r0, r5
    2cce:	bl	2b5c <MTPD::read(char*, unsigned long)>
    2cd2:	movs	r2, #4
    2cd4:	add	r1, sp, #8
    2cd6:	mov	r0, r5
    2cd8:	bl	2b5c <MTPD::read(char*, unsigned long)>
    2cdc:	movs	r2, #4
    2cde:	add	r1, sp, #8
    2ce0:	mov	r0, r5
    2ce2:	bl	2b5c <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2ce6:	movs	r2, #2
    2ce8:	add	r1, sp, #8
    2cea:	mov	r0, r5
    2cec:	bl	2b5c <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2cf0:	movs	r2, #4
    2cf2:	add	r1, sp, #8
    2cf4:	mov	r0, r5
    2cf6:	bl	2b5c <MTPD::read(char*, unsigned long)>
    2cfa:	movs	r2, #4
    2cfc:	add	r1, sp, #8
    2cfe:	mov	r0, r5
    2d00:	bl	2b5c <MTPD::read(char*, unsigned long)>
    read32(); len-=4; // parent
    read16(); len-=2; // association type
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    2d04:	add	r1, sp, #8
    2d06:	mov	r0, r5
    2d08:	bl	2bcc <MTPD::readstring(char*)>
    2d0c:	add	r0, sp, #8
    2d0e:	bl	c640 <strlen>
    2d12:	adds	r0, #1
    2d14:	sub.w	r4, r4, r0, lsl #1
  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    uint32_t len = ReadMTPHeader();
    char filename[256];

    read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    2d18:	clz	r8, r8
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    2d1c:	cmp	r4, #3
  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    uint32_t len = ReadMTPHeader();
    char filename[256];

    read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    2d1e:	mov.w	r8, r8, lsr #5
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    2d22:	bls.n	2d3c <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x100>
    2d24:	mov	r6, r4
    2d26:	add	r7, sp, #4
    2d28:	subs	r6, #4
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2d2a:	movs	r2, #4
    2d2c:	mov	r1, r7
    2d2e:	mov	r0, r5
    2d30:	bl	2b5c <MTPD::read(char*, unsigned long)>
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    2d34:	cmp	r6, #3
    2d36:	bhi.n	2d28 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xec>
    2d38:	and.w	r4, r4, #3
    2d3c:	add	r7, sp, #4
    while(len) {read8(); len--;}
    2d3e:	cbz	r4, 2d4e <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x112>
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    2d40:	movs	r2, #1
    2d42:	mov	r1, r7
    2d44:	mov	r0, r5
    2d46:	bl	2b5c <MTPD::read(char*, unsigned long)>
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    while(len) {read8(); len--;}
    2d4a:	subs	r4, #1
    2d4c:	bne.n	2d40 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x104>
    
    return storage_->Create(parent, dir, filename);
    2d4e:	ldr	r0, [r5, #0]
    2d50:	ldr	r4, [r0, #0]
    2d52:	add	r3, sp, #8
    2d54:	mov	r2, r8
    2d56:	mov	r1, r9
    2d58:	ldr	r4, [r4, #36]	; 0x24
    2d5a:	blx	r4
  }
    2d5c:	add	sp, #268	; 0x10c
    2d5e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2d62:	nop

00002d64 <MTPD::SendObject()>:

  void MTPD::SendObject() {
    2d64:	push	{r4, r5, r6, r7, lr}
    2d66:	sub	sp, #20


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    2d68:	movs	r2, #12
    2d6a:	add	r1, sp, #4
    while(len) {read8(); len--;}
    
    return storage_->Create(parent, dir, filename);
  }

  void MTPD::SendObject() {
    2d6c:	mov	r7, r0


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    2d6e:	bl	2b5c <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    2d72:	ldrh.w	r3, [sp, #8]
    2d76:	cmp	r3, #2
    2d78:	beq.n	2d86 <MTPD::SendObject()+0x22>
      {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
      }
    }
    storage_->close();
    2d7a:	ldr	r0, [r7, #0]
    2d7c:	ldr	r3, [r0, #0]
    2d7e:	ldr	r3, [r3, #48]	; 0x30
    2d80:	blx	r3
  }
    2d82:	add	sp, #20
    2d84:	pop	{r4, r5, r6, r7, pc}
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
      return header.len - 12;
    2d86:	ldr	r5, [sp, #4]
    return storage_->Create(parent, dir, filename);
  }

  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    2d88:	subs	r5, #12
    2d8a:	beq.n	2d7a <MTPD::SendObject()+0x16>
      data_buffer_->index += to_copy;
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
      {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
    2d8c:	movs	r6, #0

  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
    2d8e:	mov	r0, r7
    2d90:	bl	2ac4 <MTPD::receive_buffer()>
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
    2d94:	ldmia.w	r7, {r0, r1}
  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    2d98:	ldrh	r2, [r1, #2]
    2d9a:	ldrh.w	r4, [r1], #8
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
    2d9e:	ldr	r3, [r0, #0]
  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    2da0:	subs	r4, r4, r2
    2da2:	cmp	r4, r5
    2da4:	it	cs
    2da6:	movcs	r4, r5
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
    2da8:	ldr	r3, [r3, #44]	; 0x2c
    2daa:	add	r1, r2
    2dac:	mov	r2, r4
    2dae:	blx	r3
      data_buffer_->index += to_copy;
    2db0:	ldr	r0, [r7, #4]
    2db2:	ldrh	r3, [r0, #2]
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    2db4:	ldrh	r2, [r0, #0]
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
      data_buffer_->index += to_copy;
    2db6:	add	r3, r4
    2db8:	uxth	r3, r3
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    2dba:	cmp	r2, r3
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
      data_buffer_->index += to_copy;
      len -= to_copy;
    2dbc:	sub.w	r5, r5, r4
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
      data_buffer_->index += to_copy;
    2dc0:	strh	r3, [r0, #2]
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    2dc2:	beq.n	2dca <MTPD::SendObject()+0x66>
    return storage_->Create(parent, dir, filename);
  }

  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    2dc4:	cmp	r5, #0
    2dc6:	bne.n	2d8e <MTPD::SendObject()+0x2a>
    2dc8:	b.n	2d7a <MTPD::SendObject()+0x16>
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
      data_buffer_->index += to_copy;
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
      {
        usb_free(data_buffer_);
    2dca:	bl	9ab4 <usb_free>
        data_buffer_ = NULL;
    2dce:	str	r6, [r7, #4]
    return storage_->Create(parent, dir, filename);
  }

  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    2dd0:	cmp	r5, #0
    2dd2:	bne.n	2d8e <MTPD::SendObject()+0x2a>
    2dd4:	b.n	2d7a <MTPD::SendObject()+0x16>
    2dd6:	nop

00002dd8 <MTPD::loop()>:
      else
        return 0x2005;
    }

  void MTPD::loop(void) 
  {
    2dd8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2ddc:	mov	r6, r0
    2dde:	sub	sp, #44	; 0x2c
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
    2de0:	movs	r0, #5
    2de2:	bl	9b00 <usb_rx>
    2de6:	cmp	r0, #0
    2de8:	beq.n	2e4e <MTPD::loop()+0x76>
      printContainer();
    2dea:	ldr	r1, [r0, #28]
    2dec:	ldr	r3, [r0, #8]
    2dee:	ldrh	r2, [r0, #14]
    2df0:	str	r1, [sp, #16]
    2df2:	ldr	r1, [r0, #24]
    2df4:	str	r1, [sp, #12]
    2df6:	ldr	r1, [r0, #20]
    2df8:	str	r1, [sp, #8]
    2dfa:	ldr	r1, [r0, #16]
    2dfc:	str	r1, [sp, #4]
    2dfe:	ldrh	r1, [r0, #12]
    2e00:	str	r1, [sp, #0]
    2e02:	mov	r4, r0
    2e04:	ldr	r1, [pc, #716]	; (30d4 <MTPD::loop()+0x2fc>)
    2e06:	ldr	r0, [pc, #720]	; (30d8 <MTPD::loop()+0x300>)
    2e08:	bl	a9cc <Print::printf(char const*, ...)>
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
      if (receive_buffer->len >= 12) {
    2e0c:	ldrh	r3, [r4, #0]
    2e0e:	cmp	r3, #11
    2e10:	bls.n	2e60 <MTPD::loop()+0x88>
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
    2e12:	ldrh	r2, [r4, #12]
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
    2e14:	movs	r5, #12
        
        if (CONTAINER->type == 1) { // command
    2e16:	cmp	r2, #1
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
    2e18:	strh	r5, [r4, #0]
        
        if (CONTAINER->type == 1) { // command
    2e1a:	beq.n	2e68 <MTPD::loop()+0x90>
    2e1c:	mov.w	r2, #8192	; 0x2000
    2e20:	ldr	r3, [r4, #8]
    2e22:	ldr	r5, [r4, #24]
    2e24:	ldr	r0, [r4, #28]
    2e26:	mov	r6, r2
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    2e28:	movs	r7, #0
        } else {
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
        CONTAINER->type = 3;
    2e2a:	movs	r1, #3
    2e2c:	strh	r1, [r4, #12]
        CONTAINER->op = return_code;
    2e2e:	strh	r6, [r4, #14]
        CONTAINER->params[0] = p1;
    2e30:	str	r7, [r4, #20]
        printContainer();
    2e32:	str	r0, [sp, #16]
    2e34:	str	r5, [sp, #12]
    2e36:	str	r7, [sp, #8]
    2e38:	ldr	r0, [r4, #16]
    2e3a:	str	r0, [sp, #4]
    2e3c:	str	r1, [sp, #0]
    2e3e:	ldr	r0, [pc, #664]	; (30d8 <MTPD::loop()+0x300>)
    2e40:	ldr	r1, [pc, #656]	; (30d4 <MTPD::loop()+0x2fc>)
    2e42:	bl	a9cc <Print::printf(char const*, ...)>

        usb_tx(MTP_TX_ENDPOINT, receive_buffer);
    2e46:	mov	r1, r4
    2e48:	movs	r0, #4
    2e4a:	bl	9c70 <usb_tx>
      } else {
          usb_free(receive_buffer);
      }
    }
    // Maybe put event handling inside mtp_yield()?
    if ((receive_buffer = usb_rx(MTP_EVENT_ENDPOINT))) {
    2e4e:	movs	r0, #6
    2e50:	bl	9b00 <usb_rx>
    2e54:	cbz	r0, 2e5a <MTPD::loop()+0x82>
      usb_free(receive_buffer);
    2e56:	bl	9ab4 <usb_free>
    }
  }
    2e5a:	add	sp, #44	; 0x2c
    2e5c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        printContainer();

        usb_tx(MTP_TX_ENDPOINT, receive_buffer);
        receive_buffer = 0;
      } else {
          usb_free(receive_buffer);
    2e60:	mov	r0, r4
    2e62:	bl	9ab4 <usb_free>
    2e66:	b.n	2e4e <MTPD::loop()+0x76>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    2e68:	ldrh	r1, [r4, #14]
    2e6a:	movw	r3, #4108	; 0x100c
    2e6e:	cmp	r1, r3
    2e70:	beq.w	3126 <MTPD::loop()+0x34e>
    2e74:	bls.n	2efe <MTPD::loop()+0x126>
    2e76:	movw	r3, #4121	; 0x1019
    2e7a:	cmp	r1, r3
    2e7c:	beq.w	314a <MTPD::loop()+0x372>
    2e80:	bls.n	2f40 <MTPD::loop()+0x168>
    2e82:	movw	r3, #38914	; 0x9802
    2e86:	cmp	r1, r3
    2e88:	beq.w	320c <MTPD::loop()+0x434>
    2e8c:	bhi.w	3066 <MTPD::loop()+0x28e>
    2e90:	movw	r3, #4122	; 0x101a
    2e94:	cmp	r1, r3
    2e96:	beq.w	3014 <MTPD::loop()+0x23c>
    2e9a:	movw	r3, #38913	; 0x9801
    2e9e:	cmp	r1, r3
    2ea0:	bne.w	3014 <MTPD::loop()+0x23c>
          case 0x101A:  // CopyObject
              return_code = 0x2005;
              break;

          case 0x9801:  // getObjectPropsSupported
            p1=CONTAINER->params[0];
    2ea4:	ldr	r7, [r4, #20]

              TRANSMIT(getObjectPropsSupported(p1));
    2ea6:	movs	r3, #1
    2ea8:	movs	r5, #0
    2eaa:	mov	r1, r7
    2eac:	strb	r3, [r6, #8]
    2eae:	mov	r0, r6
    2eb0:	str	r5, [r6, #12]
    2eb2:	bl	20a8 <MTPD::getObjectPropsSupported(unsigned long)>
    2eb6:	ldr	r3, [r6, #12]
    2eb8:	strb	r5, [r6, #8]
    2eba:	adds	r3, #12
    2ebc:	movs	r2, #2
    2ebe:	strh.w	r2, [sp, #32]
    2ec2:	str	r3, [sp, #28]
    2ec4:	ldrh	r3, [r4, #14]
    2ec6:	strh.w	r3, [sp, #34]	; 0x22
    2eca:	ldr	r3, [r4, #16]
    2ecc:	str	r3, [sp, #36]	; 0x24
    2ece:	add	r1, sp, #28
    2ed0:	mov	r0, r6
    2ed2:	movs	r2, #12
    2ed4:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2ed8:	mov	r1, r7
    2eda:	mov	r0, r6
    2edc:	bl	20a8 <MTPD::getObjectPropsSupported(unsigned long)>

          case 0x9803:  // getObjectPropertyValue
            p1=CONTAINER->params[0];
            p2=CONTAINER->params[1];

            TRANSMIT(getObjectPropValue(p1,p2));
    2ee0:	mov	r0, r6
    2ee2:	bl	1998 <MTPD::get_buffer()>
    2ee6:	ldr	r1, [r6, #4]
    2ee8:	movs	r0, #4
    2eea:	bl	9c70 <usb_tx>
    2eee:	str	r5, [r6, #4]
              break;
    2ef0:	movw	r2, #8193	; 0x2001
    2ef4:	ldr	r3, [r4, #8]
    2ef6:	ldr	r5, [r4, #24]
    2ef8:	ldr	r0, [r4, #28]
    2efa:	mov	r6, r2
    2efc:	b.n	2e2a <MTPD::loop()+0x52>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    2efe:	movw	r3, #4101	; 0x1005
    2f02:	cmp	r1, r3
    2f04:	beq.w	316a <MTPD::loop()+0x392>
    2f08:	bls.n	2fb2 <MTPD::loop()+0x1da>
    2f0a:	movw	r3, #4104	; 0x1008
    2f0e:	cmp	r1, r3
    2f10:	beq.w	309a <MTPD::loop()+0x2c2>
    2f14:	bhi.w	302e <MTPD::loop()+0x256>
    2f18:	movw	r3, #4102	; 0x1006
    2f1c:	cmp	r1, r3
    2f1e:	beq.w	31da <MTPD::loop()+0x402>
    2f22:	movw	r3, #4103	; 0x1007
    2f26:	cmp	r1, r3
    2f28:	bne.n	3014 <MTPD::loop()+0x23c>
              } else {
                p1 = GetNumObjects(CONTAINER->params[0], CONTAINER->params[2]);
              }
              break;
            case 0x1007:  // GetObjectHandles
              if (CONTAINER->params[1]) {
    2f2a:	ldr	r5, [r4, #24]
    2f2c:	cmp	r5, #0
    2f2e:	beq.w	32f6 <MTPD::loop()+0x51e>
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(CONTAINER->params[0]));
              break;
            case 0x100B:  // DeleteObject
              if (CONTAINER->params[1]) {
    2f32:	movw	r2, #8212	; 0x2014
    2f36:	mov	r6, r2
    2f38:	ldr	r3, [r4, #8]
    2f3a:	ldr	r0, [r4, #28]
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    2f3c:	movs	r7, #0
    2f3e:	b.n	2e2a <MTPD::loop()+0x52>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    2f40:	movw	r3, #4112	; 0x1010
    2f44:	cmp	r1, r3
    2f46:	beq.n	3014 <MTPD::loop()+0x23c>
    2f48:	bls.n	301a <MTPD::loop()+0x242>
    2f4a:	movw	r3, #4116	; 0x1014
    2f4e:	cmp	r1, r3
    2f50:	beq.w	30dc <MTPD::loop()+0x304>
    2f54:	movw	r3, #4117	; 0x1015
    2f58:	cmp	r1, r3
    2f5a:	bne.n	3014 <MTPD::loop()+0x23c>
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(CONTAINER->params[0]));
    2f5c:	movs	r2, #0
    2f5e:	movs	r3, #1
    2f60:	strb	r3, [r6, #8]
    2f62:	str	r2, [r6, #12]
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    2f64:	ldr	r2, [r4, #20]
    2f66:	movw	r3, #54274	; 0xd402
    2f6a:	cmp	r2, r3
    2f6c:	beq.w	335c <MTPD::loop()+0x584>
    2f70:	movs	r3, #12
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(CONTAINER->params[0]));
    2f72:	movs	r1, #0
    2f74:	movs	r2, #2
    2f76:	strb	r1, [r6, #8]
    2f78:	strh.w	r2, [sp, #32]
    2f7c:	str	r3, [sp, #28]
    2f7e:	ldrh	r3, [r4, #14]
    2f80:	strh.w	r3, [sp, #34]	; 0x22
    2f84:	ldr	r3, [r4, #16]
    2f86:	str	r3, [sp, #36]	; 0x24
    2f88:	movs	r2, #12
    2f8a:	add	r1, sp, #28
    2f8c:	mov	r0, r6
    2f8e:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    2f92:	ldr	r2, [r4, #20]
    2f94:	movw	r3, #54274	; 0xd402
    2f98:	cmp	r2, r3
    2f9a:	beq.w	3352 <MTPD::loop()+0x57a>
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(CONTAINER->params[0]));
    2f9e:	mov	r0, r6
    2fa0:	bl	1998 <MTPD::get_buffer()>
    2fa4:	movs	r7, #0
    2fa6:	ldr	r1, [r6, #4]
    2fa8:	movs	r0, #4
    2faa:	bl	9c70 <usb_tx>
    2fae:	str	r7, [r6, #4]
    2fb0:	b.n	2ef0 <MTPD::loop()+0x118>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    2fb2:	movw	r3, #4099	; 0x1003
    2fb6:	cmp	r1, r3
    2fb8:	bhi.w	31a4 <MTPD::loop()+0x3cc>
    2fbc:	movw	r3, #4098	; 0x1002
    2fc0:	cmp	r1, r3
    2fc2:	bcs.n	3028 <MTPD::loop()+0x250>
    2fc4:	movw	r3, #4097	; 0x1001
    2fc8:	cmp	r1, r3
    2fca:	bne.n	3014 <MTPD::loop()+0x23c>
            case 0x1001: // GetDescription
              TRANSMIT(WriteDescriptor());
    2fcc:	movs	r3, #1
    2fce:	movs	r7, #0
    2fd0:	strb	r3, [r6, #8]
    2fd2:	mov	r0, r6
    2fd4:	str	r7, [r6, #12]
    2fd6:	bl	1b78 <MTPD::WriteDescriptor()>
    2fda:	ldr	r3, [r6, #12]
    2fdc:	strb	r7, [r6, #8]
    2fde:	adds	r3, #12
    2fe0:	movs	r2, #2
    2fe2:	strh.w	r2, [sp, #32]
    2fe6:	str	r3, [sp, #28]
    2fe8:	ldrh	r3, [r4, #14]
    2fea:	strh.w	r3, [sp, #34]	; 0x22
    2fee:	ldr	r3, [r4, #16]
    2ff0:	str	r3, [sp, #36]	; 0x24
    2ff2:	mov	r0, r6
    2ff4:	movs	r2, #12
    2ff6:	add	r1, sp, #28
    2ff8:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    2ffc:	mov	r0, r6
    2ffe:	bl	1b78 <MTPD::WriteDescriptor()>
              openSession();
              break;
            case 0x1003:  // CloseSession
              break;
            case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    3002:	mov	r0, r6
    3004:	bl	1998 <MTPD::get_buffer()>
    3008:	ldr	r1, [r6, #4]
    300a:	movs	r0, #4
    300c:	bl	9c70 <usb_tx>
    3010:	str	r7, [r6, #4]
    3012:	b.n	2ef0 <MTPD::loop()+0x118>
              return_code = setObjectPropValue(p1,p2);
              break;
              
            default:
              return_code = 0x2005;  // operation not supported
              break;
    3014:	movw	r2, #8197	; 0x2005
    3018:	b.n	2e20 <MTPD::loop()+0x48>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    301a:	movw	r3, #4109	; 0x100d
    301e:	cmp	r1, r3
    3020:	bne.n	3014 <MTPD::loop()+0x23c>
                  p1 = CONTAINER->params[0];
              if (!p1) p1 = 1;
              CONTAINER->len = receive_buffer->len = 12 + 3 * 4;
              break;
            case 0x100D:  // SendObject
              SendObject();
    3022:	mov	r0, r6
    3024:	bl	2d64 <MTPD::SendObject()>
              break;
    3028:	movw	r2, #8193	; 0x2001
    302c:	b.n	2e20 <MTPD::loop()+0x48>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    302e:	movw	r3, #4105	; 0x1009
    3032:	cmp	r1, r3
    3034:	beq.w	3268 <MTPD::loop()+0x490>
    3038:	movw	r3, #4107	; 0x100b
    303c:	cmp	r1, r3
    303e:	bne.n	3014 <MTPD::loop()+0x23c>
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(CONTAINER->params[0]));
              break;
            case 0x100B:  // DeleteObject
              if (CONTAINER->params[1]) {
    3040:	ldr	r5, [r4, #24]
    3042:	cmp	r5, #0
    3044:	bne.w	2f32 <MTPD::loop()+0x15a>
                return_code = 0x2014; // spec by format unsupported
              } else {
                if (!storage_->DeleteObject(CONTAINER->params[0])) {
    3048:	ldr	r0, [r6, #0]
    304a:	ldr	r1, [r4, #20]
    304c:	ldr	r3, [r0, #0]
    304e:	ldr	r3, [r3, #52]	; 0x34
    3050:	blx	r3
    3052:	cmp	r0, #0
    3054:	bne.n	3028 <MTPD::loop()+0x250>
    3056:	movw	r2, #8210	; 0x2012
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    305a:	mov	r7, r0
    305c:	mov	r6, r2
    305e:	ldr	r3, [r4, #8]
    3060:	ldr	r5, [r4, #24]
    3062:	ldr	r0, [r4, #28]
    3064:	b.n	2e2a <MTPD::loop()+0x52>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    3066:	movw	r3, #38915	; 0x9803
    306a:	cmp	r1, r3
    306c:	beq.w	32a4 <MTPD::loop()+0x4cc>
    3070:	movw	r3, #38916	; 0x9804
    3074:	cmp	r1, r3
    3076:	bne.n	3014 <MTPD::loop()+0x23c>
              break;

          case 0x9804:  // setObjectPropertyValue

            p1=CONTAINER->params[0];
            p2=CONTAINER->params[1];
    3078:	ldr	r5, [r4, #24]
            TRANSMIT(getObjectPropValue(p1,p2));
              break;

          case 0x9804:  // setObjectPropertyValue

            p1=CONTAINER->params[0];
    307a:	ldr	r7, [r4, #20]
    storage_->close();
  }
  
    uint32_t MTPD::setObjectPropValue(uint32_t p1, uint32_t p2)
    {
      receive_buffer();
    307c:	mov	r0, r6
    307e:	bl	2ac4 <MTPD::receive_buffer()>
      if(p2==0xDC07)
    3082:	movw	r3, #56327	; 0xdc07
    3086:	cmp	r5, r3
    3088:	beq.w	336a <MTPD::loop()+0x592>
    308c:	movw	r2, #8197	; 0x2005
    3090:	mov	r6, r2
    3092:	ldr	r3, [r4, #8]
    3094:	ldr	r5, [r4, #24]
    3096:	ldr	r0, [r4, #28]
    3098:	b.n	2e2a <MTPD::loop()+0x52>
              } else {
                TRANSMIT(GetObjectHandles(CONTAINER->params[0], CONTAINER->params[2]));
              }
              break;
            case 0x1008:  // GetObjectInfo
              TRANSMIT(GetObjectInfo(CONTAINER->params[0]));
    309a:	movs	r7, #0
    309c:	strb	r2, [r6, #8]
    309e:	str	r7, [r6, #12]
    30a0:	ldr	r1, [r4, #20]
    30a2:	mov	r0, r6
    30a4:	bl	1e5c <MTPD::GetObjectInfo(unsigned long)>
    30a8:	ldr	r3, [r6, #12]
    30aa:	strb	r7, [r6, #8]
    30ac:	adds	r3, #12
    30ae:	movs	r2, #2
    30b0:	strh.w	r2, [sp, #32]
    30b4:	str	r3, [sp, #28]
    30b6:	ldrh	r3, [r4, #14]
    30b8:	strh.w	r3, [sp, #34]	; 0x22
    30bc:	ldr	r3, [r4, #16]
    30be:	str	r3, [sp, #36]	; 0x24
    30c0:	add	r1, sp, #28
    30c2:	mov	r0, r6
    30c4:	mov	r2, r5
    30c6:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    30ca:	ldr	r1, [r4, #20]
    30cc:	mov	r0, r6
    30ce:	bl	1e5c <MTPD::GetObjectInfo(unsigned long)>
    30d2:	b.n	3002 <MTPD::loop()+0x22a>
    30d4:	.word	0x0000fc4c
    30d8:	.word	0x1fff098c
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
    30dc:	movs	r3, #1
    30de:	movs	r2, #0
    30e0:	strb	r3, [r6, #8]
    30e2:	str	r2, [r6, #12]
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    30e4:	ldr	r1, [r4, #20]
    30e6:	movw	r3, #54274	; 0xd402
    30ea:	cmp	r1, r3
    30ec:	beq.w	32ea <MTPD::loop()+0x512>
    30f0:	movs	r3, #12
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
    30f2:	movs	r1, #0
    30f4:	movs	r2, #2
    30f6:	strb	r1, [r6, #8]
    30f8:	strh.w	r2, [sp, #32]
    30fc:	str	r3, [sp, #28]
    30fe:	ldrh	r3, [r4, #14]
    3100:	strh.w	r3, [sp, #34]	; 0x22
    3104:	ldr	r3, [r4, #16]
    3106:	str	r3, [sp, #36]	; 0x24
    3108:	add	r1, sp, #28
    310a:	movs	r2, #12
    310c:	mov	r0, r6
    310e:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    3112:	ldr	r1, [r4, #20]
    3114:	movw	r3, #54274	; 0xd402
    3118:	cmp	r1, r3
    311a:	bne.w	2f9e <MTPD::loop()+0x1c6>
    311e:	mov	r0, r6
    3120:	bl	1abc <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>
    3124:	b.n	2f9e <MTPD::loop()+0x1c6>
                }
              }
              break;
            case 0x100C:  // SendObjectInfo
              CONTAINER->params[2] =
                  SendObjectInfo(CONTAINER->params[0], // storage
    3126:	mov	r0, r6
    3128:	ldr	r2, [r4, #24]
    312a:	ldr	r1, [r4, #20]
    312c:	bl	2c3c <MTPD::SendObjectInfo(unsigned long, unsigned long)>
                                 CONTAINER->params[1]); // parent
                  p1 = CONTAINER->params[0];
    3130:	ldr	r7, [r4, #20]
              }
              break;
            case 0x100C:  // SendObjectInfo
              CONTAINER->params[2] =
                  SendObjectInfo(CONTAINER->params[0], // storage
                                 CONTAINER->params[1]); // parent
    3132:	str	r0, [r4, #28]
                  p1 = CONTAINER->params[0];
              if (!p1) p1 = 1;
              CONTAINER->len = receive_buffer->len = 12 + 3 * 4;
    3134:	movs	r3, #24
            case 0x100C:  // SendObjectInfo
              CONTAINER->params[2] =
                  SendObjectInfo(CONTAINER->params[0], // storage
                                 CONTAINER->params[1]); // parent
                  p1 = CONTAINER->params[0];
              if (!p1) p1 = 1;
    3136:	cmp	r7, #0
              CONTAINER->len = receive_buffer->len = 12 + 3 * 4;
              break;
    3138:	movw	r2, #8193	; 0x2001
            case 0x100C:  // SendObjectInfo
              CONTAINER->params[2] =
                  SendObjectInfo(CONTAINER->params[0], // storage
                                 CONTAINER->params[1]); // parent
                  p1 = CONTAINER->params[0];
              if (!p1) p1 = 1;
    313c:	it	eq
    313e:	moveq	r7, #1
              CONTAINER->len = receive_buffer->len = 12 + 3 * 4;
    3140:	strh	r3, [r4, #0]
    3142:	str	r3, [r4, #8]
              break;
    3144:	mov	r6, r2
    3146:	ldr	r5, [r4, #24]
    3148:	b.n	2e2a <MTPD::loop()+0x52>
    }

    uint32_t MTPD::moveObject(uint32_t p1, uint32_t p3)
    { // p1 object
      // p3 new directory
      storage_->move(p1,p3);
    314a:	ldr	r0, [r6, #0]
    314c:	ldr	r2, [r4, #28]
    314e:	ldr	r3, [r0, #0]
    3150:	ldr	r1, [r4, #20]
    3152:	ldr	r3, [r3, #68]	; 0x44
    3154:	blx	r3
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(CONTAINER->params[0],CONTAINER->params[2]);
              CONTAINER->len  = receive_buffer->len = 12;
              break;
    3156:	movw	r2, #8193	; 0x2001
              return_code = 0x2005;
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(CONTAINER->params[0],CONTAINER->params[2]);
              CONTAINER->len  = receive_buffer->len = 12;
    315a:	strh	r5, [r4, #0]
    315c:	str	r5, [r4, #8]
              break;
    315e:	mov	r3, r5
    3160:	mov	r6, r2
    3162:	ldr	r5, [r4, #24]
    3164:	ldr	r0, [r4, #28]
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    3166:	movs	r7, #0
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(CONTAINER->params[0],CONTAINER->params[2]);
              CONTAINER->len  = receive_buffer->len = 12;
              break;
    3168:	b.n	2e2a <MTPD::loop()+0x52>
              break;
            case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
              break;
            case 0x1005:  // GetStorageInfo
              TRANSMIT(GetStorageInfo(CONTAINER->params[0]));
    316a:	movs	r7, #0
    316c:	strb	r2, [r6, #8]
    316e:	str	r7, [r6, #12]
    3170:	ldr	r1, [r4, #20]
    3172:	mov	r0, r6
    3174:	bl	22b0 <MTPD::GetStorageInfo(unsigned long)>
    3178:	ldr	r3, [r6, #12]
    317a:	strb	r7, [r6, #8]
    317c:	adds	r3, #12
    317e:	movs	r2, #2
    3180:	strh.w	r2, [sp, #32]
    3184:	str	r3, [sp, #28]
    3186:	ldrh	r3, [r4, #14]
    3188:	strh.w	r3, [sp, #34]	; 0x22
    318c:	ldr	r3, [r4, #16]
    318e:	str	r3, [sp, #36]	; 0x24
    3190:	add	r1, sp, #28
    3192:	mov	r0, r6
    3194:	mov	r2, r5
    3196:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    319a:	ldr	r1, [r4, #20]
    319c:	mov	r0, r6
    319e:	bl	22b0 <MTPD::GetStorageInfo(unsigned long)>
    31a2:	b.n	3002 <MTPD::loop()+0x22a>
              openSession();
              break;
            case 0x1003:  // CloseSession
              break;
            case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    31a4:	movs	r7, #0
    31a6:	strb	r2, [r6, #8]
    31a8:	mov	r0, r6
    31aa:	str	r7, [r6, #12]
    31ac:	bl	1d8c <MTPD::WriteStorageIDs()>
    31b0:	ldr	r3, [r6, #12]
    31b2:	strb	r7, [r6, #8]
    31b4:	adds	r3, #12
    31b6:	movs	r2, #2
    31b8:	strh.w	r2, [sp, #32]
    31bc:	str	r3, [sp, #28]
    31be:	ldrh	r3, [r4, #14]
    31c0:	strh.w	r3, [sp, #34]	; 0x22
    31c4:	ldr	r3, [r4, #16]
    31c6:	str	r3, [sp, #36]	; 0x24
    31c8:	mov	r0, r6
    31ca:	mov	r2, r5
    31cc:	add	r1, sp, #28
    31ce:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    31d2:	mov	r0, r6
    31d4:	bl	1d8c <MTPD::WriteStorageIDs()>
    31d8:	b.n	3002 <MTPD::loop()+0x22a>
              break;
            case 0x1005:  // GetStorageInfo
              TRANSMIT(GetStorageInfo(CONTAINER->params[0]));
              break;
            case 0x1006:  // GetNumObjects
              if (CONTAINER->params[1]) {
    31da:	ldr	r5, [r4, #24]
    31dc:	cmp	r5, #0
    31de:	bne.w	2f32 <MTPD::loop()+0x15a>
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(parent);
    31e2:	ldr	r0, [r6, #0]
    31e4:	ldr	r1, [r4, #28]
    31e6:	ldr	r3, [r0, #0]
    31e8:	ldr	r3, [r3, #20]
    31ea:	blx	r3
    31ec:	b.n	31f0 <MTPD::loop()+0x418>
    int num = 0;
    while (storage_->GetNextObjectHandle()) num++;
    31ee:	adds	r5, #1
    31f0:	ldr	r0, [r6, #0]
    31f2:	ldr	r3, [r0, #0]
    31f4:	ldr	r3, [r3, #24]
    31f6:	blx	r3
    31f8:	cmp	r0, #0
    31fa:	bne.n	31ee <MTPD::loop()+0x416>
    return num;
    31fc:	movw	r2, #8193	; 0x2001
    3200:	mov	r7, r5
    3202:	mov	r6, r2
    3204:	ldr	r3, [r4, #8]
    3206:	ldr	r5, [r4, #24]
    3208:	ldr	r0, [r4, #28]
    320a:	b.n	2e2a <MTPD::loop()+0x52>

              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
            p1=CONTAINER->params[0];
    320c:	ldr	r7, [r4, #20]
            p2=CONTAINER->params[1];
    320e:	ldr.w	r9, [r4, #24]

            TRANSMIT(getObjectPropDesc(p1,p2));
    3212:	strb	r2, [r6, #8]
    3214:	mov.w	r8, #0
    3218:	mov	r1, r7
    321a:	mov	r2, r9
    321c:	mov	r0, r6
    321e:	str.w	r8, [r6, #12]
    3222:	bl	23dc <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    3226:	ldr	r3, [r6, #12]
    3228:	strb.w	r8, [r6, #8]
    322c:	adds	r3, #12
    322e:	movs	r2, #2
    3230:	strh.w	r2, [sp, #32]
    3234:	str	r3, [sp, #28]
    3236:	ldrh	r3, [r4, #14]
    3238:	strh.w	r3, [sp, #34]	; 0x22
    323c:	ldr	r3, [r4, #16]
    323e:	str	r3, [sp, #36]	; 0x24
    3240:	mov	r2, r5
    3242:	add	r1, sp, #28
    3244:	mov	r0, r6
    3246:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    324a:	mov	r2, r9
    324c:	mov	r1, r7
    324e:	mov	r0, r6
    3250:	bl	23dc <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    3254:	mov	r0, r6
    3256:	bl	1998 <MTPD::get_buffer()>
    325a:	ldr	r1, [r6, #4]
    325c:	movs	r0, #4
    325e:	bl	9c70 <usb_tx>
    3262:	str.w	r8, [r6, #4]
    3266:	b.n	2ef0 <MTPD::loop()+0x118>
              break;
            case 0x1008:  // GetObjectInfo
              TRANSMIT(GetObjectInfo(CONTAINER->params[0]));
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(CONTAINER->params[0]));
    3268:	movs	r7, #0
    326a:	movs	r3, #1
    326c:	strb	r3, [r6, #8]
    326e:	str	r7, [r6, #12]
    3270:	ldr	r1, [r4, #20]
    3272:	mov	r0, r6
    3274:	bl	2ae0 <MTPD::GetObject(unsigned long)>
    3278:	ldr	r3, [r6, #12]
    327a:	strb	r7, [r6, #8]
    327c:	adds	r3, #12
    327e:	movs	r2, #2
    3280:	strh.w	r2, [sp, #32]
    3284:	str	r3, [sp, #28]
    3286:	ldrh	r3, [r4, #14]
    3288:	strh.w	r3, [sp, #34]	; 0x22
    328c:	ldr	r3, [r4, #16]
    328e:	str	r3, [sp, #36]	; 0x24
    3290:	add	r1, sp, #28
    3292:	mov	r0, r6
    3294:	movs	r2, #12
    3296:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    329a:	ldr	r1, [r4, #20]
    329c:	mov	r0, r6
    329e:	bl	2ae0 <MTPD::GetObject(unsigned long)>
    32a2:	b.n	3002 <MTPD::loop()+0x22a>

            TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
            p1=CONTAINER->params[0];
    32a4:	ldr	r7, [r4, #20]
            p2=CONTAINER->params[1];
    32a6:	ldr.w	r8, [r4, #24]

            TRANSMIT(getObjectPropValue(p1,p2));
    32aa:	movs	r5, #0
    32ac:	movs	r3, #1
    32ae:	mov	r1, r7
    32b0:	mov	r2, r8
    32b2:	strb	r3, [r6, #8]
    32b4:	mov	r0, r6
    32b6:	str	r5, [r6, #12]
    32b8:	bl	2114 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    32bc:	ldr	r3, [r6, #12]
    32be:	strb	r5, [r6, #8]
    32c0:	adds	r3, #12
    32c2:	movs	r2, #2
    32c4:	strh.w	r2, [sp, #32]
    32c8:	str	r3, [sp, #28]
    32ca:	ldrh	r3, [r4, #14]
    32cc:	strh.w	r3, [sp, #34]	; 0x22
    32d0:	ldr	r3, [r4, #16]
    32d2:	str	r3, [sp, #36]	; 0x24
    32d4:	add	r1, sp, #28
    32d6:	mov	r0, r6
    32d8:	movs	r2, #12
    32da:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    32de:	mov	r2, r8
    32e0:	mov	r1, r7
    32e2:	mov	r0, r6
    32e4:	bl	2114 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    32e8:	b.n	2ee0 <MTPD::loop()+0x108>
    32ea:	mov	r0, r6
    32ec:	bl	1abc <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>
    32f0:	ldr	r3, [r6, #12]
    32f2:	adds	r3, #12
    32f4:	b.n	30f2 <MTPD::loop()+0x31a>
              break;
            case 0x1007:  // GetObjectHandles
              if (CONTAINER->params[1]) {
                return_code = 0x2014; // spec by format unsupported
              } else {
                TRANSMIT(GetObjectHandles(CONTAINER->params[0], CONTAINER->params[2]));
    32f6:	movs	r3, #1
    32f8:	str	r5, [r6, #12]
    32fa:	strb	r3, [r6, #8]
    32fc:	mov	r0, r6
    32fe:	ldr	r2, [r4, #28]
    3300:	ldr	r1, [r4, #20]
    3302:	bl	1dcc <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    3306:	ldr	r3, [r6, #12]
    3308:	strb	r5, [r6, #8]
    330a:	adds	r3, #12
    330c:	movs	r2, #2
    330e:	strh.w	r2, [sp, #32]
    3312:	str	r3, [sp, #28]
    3314:	ldrh	r3, [r4, #14]
    3316:	strh.w	r3, [sp, #34]	; 0x22
    331a:	ldr	r3, [r4, #16]
    331c:	str	r3, [sp, #36]	; 0x24
    331e:	mov	r0, r6
    3320:	movs	r2, #12
    3322:	add	r1, sp, #28
    3324:	bl	19b0 <MTPD::write(char const*, int) [clone .part.2]>
    3328:	ldr	r2, [r4, #28]
    332a:	ldr	r1, [r4, #20]
    332c:	mov	r0, r6
    332e:	bl	1dcc <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    3332:	mov	r0, r6
    3334:	bl	1998 <MTPD::get_buffer()>
    3338:	ldr	r1, [r6, #4]
    333a:	movs	r0, #4
    333c:	bl	9c70 <usb_tx>
    3340:	str	r5, [r6, #4]
    3342:	movw	r2, #8193	; 0x2001
    3346:	ldr	r3, [r4, #8]
    3348:	ldr	r5, [r4, #24]
    334a:	ldr	r0, [r4, #28]
    334c:	mov	r6, r2
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    334e:	movs	r7, #0
    3350:	b.n	2e2a <MTPD::loop()+0x52>
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring("Teensy");
    3352:	ldr	r1, [pc, #48]	; (3384 <MTPD::loop()+0x5ac>)
    3354:	mov	r0, r6
    3356:	bl	1a14 <MTPD::writestring(char const*)>
    335a:	b.n	2f9e <MTPD::loop()+0x1c6>
    335c:	ldr	r1, [pc, #36]	; (3384 <MTPD::loop()+0x5ac>)
    335e:	mov	r0, r6
    3360:	bl	1a14 <MTPD::writestring(char const*)>
    3364:	ldr	r3, [r6, #12]
    3366:	adds	r3, #12
    3368:	b.n	2f72 <MTPD::loop()+0x19a>
    336a:	mov	r0, r6
    336c:	mov	r1, r7
    336e:	bl	2c10 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.7]>
          }
        } else {
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
    3372:	cmp	r0, #0
    3374:	beq.w	2e60 <MTPD::loop()+0x88>
    3378:	uxth	r6, r0
    337a:	ldr	r3, [r4, #8]
    337c:	ldr	r5, [r4, #24]
    337e:	ldr	r0, [r4, #28]
    3380:	mov	r2, r6
    3382:	b.n	2e2a <MTPD::loop()+0x52>
    3384:	.word	0x0000fc18

00003388 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>:
			}
		}
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    3388:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    338c:	ldr	r4, [r0, #0]
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    338e:	ldr	r5, [r4, #12]
    3390:	tst.w	r5, #16777216	; 0x1000000
		const uint8_t *p_write = (const uint8_t *)buf;
		uint8_t *p_read = (uint8_t *)retbuf;
		size_t count_read = count;

		// Lets clear the reader queue
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    3394:	ldr	r5, [pc, #484]	; (357c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1f4>)
    3396:	str	r5, [r4, #0]

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    3398:	bne.n	3440 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xb8>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    339a:	lsls	r7, r3, #31
    339c:	bpl.w	3506 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17e>
		    if (p_write) {
    33a0:	cmp	r1, #0
    33a2:	beq.w	356c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1e4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    33a6:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    33a8:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    33aa:	it	ne
    33ac:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    33b0:	str	r5, [r4, #52]	; 0x34
    33b2:	adds	r1, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    33b4:	ldrb.w	r8, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    33b8:	add.w	ip, r3, #4294967295
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    33bc:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    33c0:	cmp.w	ip, #0
    33c4:	beq.w	3518 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
			// Push out the next byte; 
		    if (p_write) {
    33c8:	cbz	r1, 33d4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x4c>
		    	w = (*p_write++) << 8;
				w |= *p_write++;
    33ca:	ldrb	r5, [r1, #1]
	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
    33cc:	ldrb.w	r8, [r1], #2
				w |= *p_write++;
    33d0:	orr.w	r8, r5, r8, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    33d4:	ldr	r5, [r0, #4]
    33d6:	ldrb	r6, [r5, #8]
			if (count == 2)
    33d8:	cmp.w	ip, #2
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    33dc:	add.w	r6, r6, #4294967295
    33e0:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    33e4:	ite	eq
    33e6:	orreq.w	r5, r8, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    33ea:	orrne.w	r5, r8, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    33ee:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    33f0:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    33f2:	sub.w	ip, ip, #2
    33f6:	b.n	340a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x82>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    33f8:	cbz	r2, 33fe <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x76>
							*p_read++ = w;  // Read any pending RX bytes in
    33fa:	strb	r4, [r2, #0]
    33fc:	adds	r2, #1
						} 
						count_read--;
    33fe:	subs	r3, #1
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    3400:	and.w	r5, r5, #61440	; 0xf000
    3404:	cmp	r5, r6
    3406:	bls.n	3436 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xae>
    3408:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    340a:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    340c:	tst.w	r5, #240	; 0xf0
    3410:	beq.n	3400 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x78>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    3412:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    3414:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
    3418:	mov	r7, r2
    341a:	mov.w	lr, r4, asr #8
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    341e:	bne.n	33f8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x70>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    3420:	cbz	r2, 342a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xa2>
							*p_read++ = w >> 8;
    3422:	strb.w	lr, [r7], #2
							*p_read++ = (w & 0xff);
    3426:	strb	r4, [r2, #1]
    3428:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    342a:	and.w	r5, r5, #61440	; 0xf000
    342e:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
    3430:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    3434:	bhi.n	3408 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x80>
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
    3436:	cmp.w	ip, #0
    343a:	beq.n	3518 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    343c:	ldr	r4, [r0, #0]
    343e:	b.n	33c8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    3440:	lsls	r5, r3, #31
    3442:	bpl.n	34de <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x156>
		    if (p_write) {
    3444:	cmp	r1, #0
    3446:	beq.w	355c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    344a:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    344c:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    344e:	it	ne
    3450:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    3454:	str	r5, [r4, #52]	; 0x34
    3456:	adds	r1, #1
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    3458:	add.w	lr, r3, #4294967295
		}

	    uint16_t w = _transferWriteFill;
    345c:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    3460:	cmp.w	lr, #0
    3464:	beq.n	34ea <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
			// Push out the next byte; 
		    if (p_write) {
    3466:	cbz	r1, 3474 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xec>
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
    3468:	ldrb.w	ip, [r1, #1]
    346c:	ldrb	r5, [r1, #0]
    346e:	adds	r1, #2
    3470:	orr.w	ip, r5, ip, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    3474:	ldr	r5, [r0, #4]
    3476:	ldrb	r6, [r5, #8]
			if (count == 2)
    3478:	cmp.w	lr, #2
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    347c:	add.w	r6, r6, #4294967295
    3480:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    3484:	ite	eq
    3486:	orreq.w	r5, ip, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    348a:	orrne.w	r5, ip, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    348e:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    3490:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    3492:	sub.w	lr, lr, #2
    3496:	b.n	34aa <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x122>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    3498:	cbz	r2, 349e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x116>
							*p_read++ = w;  // Read any pending RX bytes in
    349a:	strb	r4, [r2, #0]
    349c:	adds	r2, #1
						} 
						count_read--;
    349e:	subs	r3, #1
							*p_read++ = w >> 8;
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    34a0:	and.w	r5, r5, #61440	; 0xf000
    34a4:	cmp	r5, r6
    34a6:	bls.n	34d4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x14c>
    34a8:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    34aa:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    34ac:	tst.w	r5, #240	; 0xf0
    34b0:	beq.n	34a0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x118>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    34b2:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
    34b6:	mov	r7, r2
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    34b8:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    34ba:	bne.n	3498 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x110>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    34bc:	cbz	r2, 34c8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x140>
							*p_read++ = (w & 0xff);
    34be:	strb.w	r4, [r7], #2
							*p_read++ = w >> 8;
    34c2:	asrs	r4, r4, #8
    34c4:	strb	r4, [r2, #1]
    34c6:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    34c8:	and.w	r5, r5, #61440	; 0xf000
    34cc:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
							*p_read++ = w >> 8;
						}
						count_read -= 2;
    34ce:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    34d2:	bhi.n	34a8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x120>
			count--;
		}

	    uint16_t w = _transferWriteFill;

		while (count > 0) {
    34d4:	cmp.w	lr, #0
    34d8:	beq.n	34ea <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
    34da:	ldr	r4, [r0, #0]
    34dc:	b.n	3466 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    34de:	mov	lr, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w = _transferWriteFill;
    34e0:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    34e4:	cmp.w	lr, #0
    34e8:	bne.n	3466 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    34ea:	cbz	r3, 3534 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    34ec:	ldr	r4, [r0, #0]
			sr = port().SR;
    34ee:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    34f0:	tst.w	r1, #240	; 0xf0
    34f4:	beq.n	34ee <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x166>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    34f6:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    34f8:	lsls	r4, r3, #31
    34fa:	bpl.n	3538 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1b0>
					if (p_read)
    34fc:	cbz	r2, 3502 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17a>
						*p_read++ = w;  // Read any pending RX bytes in
    34fe:	strb	r1, [r2, #0]
    3500:	adds	r2, #1
					count_read--;
    3502:	subs	r3, #1
    3504:	b.n	34ea <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    3506:	ldrb.w	r8, [r0, #44]	; 0x2c
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    350a:	mov	ip, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    350c:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    3510:	cmp.w	ip, #0
    3514:	bne.w	33c8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    3518:	cbz	r3, 3534 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
    351a:	ldr	r4, [r0, #0]
			sr = port().SR;
    351c:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    351e:	tst.w	r1, #240	; 0xf0
    3522:	beq.n	351c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x194>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
				if (count_read & 1) {
    3524:	lsls	r6, r3, #31

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
			sr = port().SR;
			if (sr & 0xF0)  {
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    3526:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    3528:	bpl.n	354a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1c2>
					if (p_read)
    352a:	cbz	r2, 3530 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1a8>
						*p_read++ = w;  // Read any pending RX bytes in
    352c:	strb	r1, [r2, #0]
    352e:	adds	r2, #1
					count_read--;
    3530:	subs	r3, #1
    3532:	b.n	3518 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    3534:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    3538:	cbz	r2, 3546 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1be>
						*p_read++ = (w & 0xff);
    353a:	mov	r4, r2
						*p_read++ = w >> 8;
    353c:	asrs	r5, r1, #8
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
						*p_read++ = (w & 0xff);
    353e:	strb.w	r1, [r4], #2
						*p_read++ = w >> 8;
    3542:	strb	r5, [r2, #1]
    3544:	mov	r2, r4
					}
					count_read -= 2;
    3546:	subs	r3, #2
    3548:	b.n	34ea <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    354a:	cbz	r2, 3558 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d0>
						*p_read++ = w >> 8;
    354c:	mov	r4, r2
    354e:	asrs	r5, r1, #8
    3550:	strb.w	r5, [r4], #2
						*p_read++ = (w & 0xff);
    3554:	strb	r1, [r2, #1]
    3556:	mov	r2, r4
					}
					count_read -= 2;
    3558:	subs	r3, #2
    355a:	b.n	3518 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    355c:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    3560:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    3562:	it	ne
    3564:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    3568:	str	r5, [r4, #52]	; 0x34
    356a:	b.n	3458 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xd0>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    356c:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    3570:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    3572:	it	ne
    3574:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    3578:	str	r5, [r4, #52]	; 0x34
    357a:	b.n	33b4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x2c>
    357c:	.word	0x801f0400

00003580 <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    3580:	cbz	r3, 3586 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    3582:	b.w	3388 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>
    3586:	bx	lr

00003588 <breakTime(long, tmElements_t&)>:
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    3588:	ldr	r2, [pc, #400]	; (371c <breakTime(long, tmElements_t&)+0x194>)
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    358a:	ldr	r3, [pc, #404]	; (3720 <breakTime(long, tmElements_t&)+0x198>)
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
    358c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    3590:	ldr	r6, [pc, #400]	; (3724 <breakTime(long, tmElements_t&)+0x19c>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    3592:	ldr.w	sl, [pc, #416]	; 3734 <breakTime(long, tmElements_t&)+0x1ac>
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    3596:	ldr	r4, [pc, #400]	; (3728 <breakTime(long, tmElements_t&)+0x1a0>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3598:	ldr.w	r9, [pc, #400]	; 372c <breakTime(long, tmElements_t&)+0x1a4>
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    359c:	umull	r5, r2, r2, r0
    35a0:	mov.w	ip, r2, lsr #16
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    35a4:	add.w	r7, ip, #4
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    35a8:	umull	r2, r5, r3, r0
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    35ac:	umull	r6, r2, r6, r0
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    35b0:	umull	sl, fp, r7, sl
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    35b4:	lsrs	r5, r5, #5
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    35b6:	lsrs	r2, r2, #11
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    35b8:	umull	r6, r3, r3, r5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    35bc:	umull	r6, r4, r4, r2
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    35c0:	rsb	r6, fp, r7
    35c4:	add.w	r6, fp, r6, lsr #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    35c8:	lsrs	r3, r3, #5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    35ca:	lsrs	r6, r6, #2
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    35cc:	lsrs	r4, r4, #4
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    35ce:	rsb	r6, r6, r6, lsl #3
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    35d2:	rsb	r3, r3, r3, lsl #4
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    35d6:	add.w	r4, r4, r4, lsl #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    35da:	sub.w	r3, r5, r3, lsl #2
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    35de:	subs	r6, r7, r6
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    35e0:	rsb	r5, r5, r5, lsl #4
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    35e4:	sub.w	r2, r2, r4, lsl #3
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    35e8:	sub.w	r0, r0, r5, lsl #2
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    35ec:	adds	r6, #1
    35ee:	movs	r4, #0
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    35f0:	strb	r2, [r1, #2]
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    35f2:	strb	r0, [r1, #0]
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    35f4:	strb	r3, [r1, #1]
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    35f6:	strb	r6, [r1, #3]
  
  year = 0;  
  days = 0;
    35f8:	mov	r2, r4
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    35fa:	movw	fp, #365	; 0x16d
    35fe:	mov.w	r8, #100	; 0x64
    3602:	mov.w	sl, #400	; 0x190
    3606:	b.n	3626 <breakTime(long, tmElements_t&)+0x9e>
    3608:	rsb	r5, r6, r5, asr #7
    360c:	mls	r5, sl, r5, r3
    3610:	cbnz	r0, 3670 <breakTime(long, tmElements_t&)+0xe8>
    3612:	cmp	r5, #0
    3614:	ite	ne
    3616:	movne	r0, fp
    3618:	moveq.w	r0, #366	; 0x16e
    361c:	add	r2, r0
    361e:	cmp	ip, r2
    3620:	add.w	r4, r4, #1
    3624:	bcc.n	364e <breakTime(long, tmElements_t&)+0xc6>
    3626:	uxtb	r7, r4
    3628:	addw	r3, r7, #1970	; 0x7b2
    362c:	smull	r0, r5, r9, r3
    3630:	asrs	r6, r3, #31
    3632:	rsb	r0, r6, r5, asr #5
    3636:	ands.w	lr, r3, #3
    363a:	mls	r0, r8, r0, r3
    363e:	beq.n	3608 <breakTime(long, tmElements_t&)+0x80>
    3640:	movw	r0, #365	; 0x16d
    3644:	add	r2, r0
    3646:	cmp	ip, r2
    3648:	add.w	r4, r4, #1
    364c:	bcs.n	3626 <breakTime(long, tmElements_t&)+0x9e>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
    364e:	strb	r7, [r1, #6]
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    3650:	cmp.w	lr, #0
    3654:	bne.n	3676 <breakTime(long, tmElements_t&)+0xee>
    3656:	ldr	r0, [pc, #212]	; (372c <breakTime(long, tmElements_t&)+0x1a4>)
    3658:	asrs	r6, r3, #31
    365a:	smull	r4, r0, r0, r3
    365e:	rsb	r4, r6, r0, asr #5
    3662:	movs	r5, #100	; 0x64
    3664:	mls	r4, r5, r4, r3
    3668:	cbz	r4, 36da <breakTime(long, tmElements_t&)+0x152>
    366a:	mov.w	r4, #366	; 0x16e
    366e:	b.n	367c <breakTime(long, tmElements_t&)+0xf4>
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3670:	mov.w	r0, #366	; 0x16e
    3674:	b.n	361c <breakTime(long, tmElements_t&)+0x94>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    3676:	movw	r4, #365	; 0x16d
    367a:	asrs	r6, r3, #31
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    367c:	ldr	r0, [pc, #172]	; (372c <breakTime(long, tmElements_t&)+0x1a4>)
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    367e:	ldr	r5, [pc, #176]	; (3730 <breakTime(long, tmElements_t&)+0x1a8>)
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    3680:	smull	r7, r0, r0, r3
    3684:	rsb	r8, r6, r0, asr #5
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    3688:	subs	r2, r2, r4
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    368a:	rsb	r6, r6, r0, asr #7
    368e:	movs	r4, #100	; 0x64
    3690:	mov.w	r0, #400	; 0x190
    3694:	mls	r6, r0, r6, r3
    3698:	mls	r8, r4, r8, r3
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    369c:	rsb	r2, r2, ip
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    36a0:	movs	r0, #1
    36a2:	movs	r3, #0
    36a4:	b.n	36ac <breakTime(long, tmElements_t&)+0x124>
    36a6:	adds	r0, #1
    36a8:	uxtb	r0, r0
    36aa:	adds	r3, #1
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    36ac:	cmp	r3, #1
    36ae:	uxtb	r7, r3
    36b0:	beq.n	36f4 <breakTime(long, tmElements_t&)+0x16c>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    36b2:	ldrb	r4, [r3, r5]
    36b4:	cmp	r4, r2
    36b6:	bhi.n	36cc <breakTime(long, tmElements_t&)+0x144>
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    36b8:	cmp	r0, #12
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
      time -= monthLength;
    36ba:	sub.w	r2, r2, r4
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    36be:	bne.n	36a6 <breakTime(long, tmElements_t&)+0x11e>
    36c0:	movs	r7, #13
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    36c2:	adds	r2, #1
    36c4:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    36c6:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    36c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    36cc:	adds	r7, #1
    36ce:	uxtb	r7, r7
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    36d0:	adds	r2, #1
    36d2:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    36d4:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    36d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    36da:	mov.w	r4, #400	; 0x190
    36de:	rsb	r0, r6, r0, asr #7
    36e2:	mls	r0, r4, r0, r3
    36e6:	cmp	r0, #0
    36e8:	movw	r4, #365	; 0x16d
    36ec:	it	eq
    36ee:	moveq.w	r4, #366	; 0x16e
    36f2:	b.n	367c <breakTime(long, tmElements_t&)+0xf4>
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    36f4:	cmp.w	lr, #0
    36f8:	bne.n	3710 <breakTime(long, tmElements_t&)+0x188>
    36fa:	cmp.w	r8, #0
    36fe:	bne.n	3718 <breakTime(long, tmElements_t&)+0x190>
    3700:	cmp	r6, #0
    3702:	ite	ne
    3704:	movne	r4, #28
    3706:	moveq	r4, #29
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    3708:	cmp	r2, r4
    370a:	bcc.n	3714 <breakTime(long, tmElements_t&)+0x18c>
      time -= monthLength;
    370c:	subs	r2, r2, r4
    370e:	b.n	36a6 <breakTime(long, tmElements_t&)+0x11e>
    3710:	movs	r4, #28
    3712:	b.n	3708 <breakTime(long, tmElements_t&)+0x180>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    3714:	movs	r7, #2
    3716:	b.n	36c2 <breakTime(long, tmElements_t&)+0x13a>
    3718:	movs	r4, #29
    371a:	b.n	3708 <breakTime(long, tmElements_t&)+0x180>
    371c:	.word	0xc22e4507
    3720:	.word	0x88888889
    3724:	.word	0x91a2b3c5
    3728:	.word	0xaaaaaaab
    372c:	.word	0x51eb851f
    3730:	.word	0x0000fc64
    3734:	.word	0x24924925

00003738 <refreshCache(long) [clone .part.0]>:

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    3738:	push	{r4, lr}
  if (t != cacheTime) {
    breakTime(t, tm); 
    373a:	ldr	r1, [pc, #12]	; (3748 <refreshCache(long) [clone .part.0]+0x10>)

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    373c:	mov	r4, r0
  if (t != cacheTime) {
    breakTime(t, tm); 
    373e:	bl	3588 <breakTime(long, tmElements_t&)>
    cacheTime = t; 
    3742:	ldr	r3, [pc, #8]	; (374c <refreshCache(long) [clone .part.0]+0x14>)
    3744:	str	r4, [r3, #0]
    3746:	pop	{r4, pc}
    3748:	.word	0x1fff14c4
    374c:	.word	0x1fff14c0

00003750 <now()>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    3750:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3752:	ldr	r4, [pc, #128]	; (37d4 <now()+0x84>)
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    3754:	ldr	r6, [pc, #128]	; (37d8 <now()+0x88>)
    3756:	ldr	r3, [r4, #0]
    3758:	ldr	r2, [r6, #0]
    375a:	ldr	r5, [pc, #128]	; (37dc <now()+0x8c>)
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    375c:	sub	sp, #12
    375e:	ldr	r0, [r5, #0]
    3760:	str	r3, [sp, #0]
	return ret;
    3762:	ldr	r3, [sp, #0]
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    3764:	subs	r3, r3, r2
    3766:	cmp.w	r3, #1000	; 0x3e8
    376a:	bcc.n	378c <now()+0x3c>
    376c:	adds	r0, #1
    376e:	b.n	3772 <now()+0x22>
    3770:	mov	r0, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3772:	ldr	r3, [r4, #0]
    3774:	str	r3, [sp, #0]
	return ret;
    3776:	ldr	r3, [sp, #0]
		// millis() and prevMillis are both unsigned ints thus the subtraction will always be the absolute value of the difference
    sysTime++;
    prevMillis += 1000;	
    3778:	add.w	r2, r2, #1000	; 0x3e8
#endif


time_t now() {
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    377c:	subs	r3, r3, r2
    377e:	cmp.w	r3, #1000	; 0x3e8
    3782:	add.w	r1, r0, #1
    3786:	bcs.n	3770 <now()+0x20>
    3788:	str	r0, [r5, #0]
    378a:	str	r2, [r6, #0]
    prevMillis += 1000;	
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
    378c:	ldr	r7, [pc, #80]	; (37e0 <now()+0x90>)
    378e:	ldr	r3, [r7, #0]
    3790:	cmp	r0, r3
    3792:	bcc.n	37b4 <now()+0x64>
    if (getTimePtr != 0) {
    3794:	ldr	r3, [pc, #76]	; (37e4 <now()+0x94>)
    3796:	ldr	r3, [r3, #0]
    3798:	cbz	r3, 37b4 <now()+0x64>
      time_t t = getTimePtr();
    379a:	blx	r3
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    379c:	ldr	r3, [pc, #72]	; (37e8 <now()+0x98>)
#endif
  }
  if (nextSyncTime <= sysTime) {
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
    379e:	cbnz	r0, 37b8 <now()+0x68>
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    37a0:	ldr	r1, [pc, #72]	; (37ec <now()+0x9c>)
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    37a2:	ldr	r2, [r3, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    37a4:	ldrb	r3, [r1, #0]
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    37a6:	ldr	r0, [r5, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    37a8:	adds	r3, #0
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    37aa:	add	r2, r0
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    37ac:	it	ne
    37ae:	movne	r3, #1
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    37b0:	str	r2, [r7, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    37b2:	strb	r3, [r1, #0]
      }
    }
  }  
  return (time_t)sysTime;
}
    37b4:	add	sp, #12
    37b6:	pop	{r4, r5, r6, r7, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    37b8:	ldr	r2, [r4, #0]
    37ba:	str	r2, [sp, #4]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    37bc:	ldr	r3, [r3, #0]
  Status = timeSet;
    37be:	ldr	r2, [pc, #44]	; (37ec <now()+0x9c>)
	return ret;
    37c0:	ldr	r4, [sp, #4]
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    37c2:	str	r0, [r5, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
    37c4:	add	r3, r0
  Status = timeSet;
    37c6:	movs	r1, #2
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    37c8:	str	r4, [r6, #0]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    37ca:	str	r3, [r7, #0]
  Status = timeSet;
    37cc:	strb	r1, [r2, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
      }
    }
  }  
  return (time_t)sysTime;
}
    37ce:	add	sp, #12
    37d0:	pop	{r4, r5, r6, r7, pc}
    37d2:	nop
    37d4:	.word	0x1fff19f0
    37d8:	.word	0x1fff14d8
    37dc:	.word	0x1fff14cc
    37e0:	.word	0x1fff14dc
    37e4:	.word	0x1fff14d4
    37e8:	.word	0x1fff0978
    37ec:	.word	0x1fff14d0

000037f0 <hour()>:
    breakTime(t, tm); 
    cacheTime = t; 
  }
}

int hour() { // the hour now 
    37f0:	push	{r3, lr}
  return hour(now()); 
    37f2:	bl	3750 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    37f6:	ldr	r3, [pc, #16]	; (3808 <hour()+0x18>)
    37f8:	ldr	r3, [r3, #0]
    37fa:	cmp	r0, r3
    37fc:	beq.n	3802 <hour()+0x12>
    37fe:	bl	3738 <refreshCache(long) [clone .part.0]>
  return hour(now()); 
}

int hour(time_t t) { // the hour for the given time
  refreshCache(t);
  return tm.Hour;  
    3802:	ldr	r3, [pc, #8]	; (380c <hour()+0x1c>)
  }
}

int hour() { // the hour now 
  return hour(now()); 
}
    3804:	ldrb	r0, [r3, #2]
    3806:	pop	{r3, pc}
    3808:	.word	0x1fff14c0
    380c:	.word	0x1fff14c4

00003810 <minute()>:

uint8_t isPM(time_t t) { // returns true if PM
  return (hour(t) >= 12); 
}

int minute() {
    3810:	push	{r3, lr}
  return minute(now()); 
    3812:	bl	3750 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    3816:	ldr	r3, [pc, #16]	; (3828 <minute()+0x18>)
    3818:	ldr	r3, [r3, #0]
    381a:	cmp	r0, r3
    381c:	beq.n	3822 <minute()+0x12>
    381e:	bl	3738 <refreshCache(long) [clone .part.0]>
  return minute(now()); 
}

int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
    3822:	ldr	r3, [pc, #8]	; (382c <minute()+0x1c>)
  return (hour(t) >= 12); 
}

int minute() {
  return minute(now()); 
}
    3824:	ldrb	r0, [r3, #1]
    3826:	pop	{r3, pc}
    3828:	.word	0x1fff14c0
    382c:	.word	0x1fff14c4

00003830 <second()>:
int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
}

int second() {
    3830:	push	{r3, lr}
  return second(now()); 
    3832:	bl	3750 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    3836:	ldr	r3, [pc, #16]	; (3848 <second()+0x18>)
    3838:	ldr	r3, [r3, #0]
    383a:	cmp	r0, r3
    383c:	beq.n	3842 <second()+0x12>
    383e:	bl	3738 <refreshCache(long) [clone .part.0]>
  return second(now()); 
}

int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
    3842:	ldr	r3, [pc, #8]	; (384c <second()+0x1c>)
  return tm.Minute;  
}

int second() {
  return second(now()); 
}
    3844:	ldrb	r0, [r3, #0]
    3846:	pop	{r3, pc}
    3848:	.word	0x1fff14c0
    384c:	.word	0x1fff14c4

00003850 <day()>:
int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
}

int day(){
    3850:	push	{r3, lr}
  return(day(now())); 
    3852:	bl	3750 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    3856:	ldr	r3, [pc, #16]	; (3868 <day()+0x18>)
    3858:	ldr	r3, [r3, #0]
    385a:	cmp	r0, r3
    385c:	beq.n	3862 <day()+0x12>
    385e:	bl	3738 <refreshCache(long) [clone .part.0]>
  return(day(now())); 
}

int day(time_t t) { // the day for the given time (0-6)
  refreshCache(t);
  return tm.Day;
    3862:	ldr	r3, [pc, #8]	; (386c <day()+0x1c>)
  return tm.Second;
}

int day(){
  return(day(now())); 
}
    3864:	ldrb	r0, [r3, #4]
    3866:	pop	{r3, pc}
    3868:	.word	0x1fff14c0
    386c:	.word	0x1fff14c4

00003870 <month()>:
int weekday(time_t t) {
  refreshCache(t);
  return tm.Wday;
}
   
int month(){
    3870:	push	{r3, lr}
  return month(now()); 
    3872:	bl	3750 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    3876:	ldr	r3, [pc, #16]	; (3888 <month()+0x18>)
    3878:	ldr	r3, [r3, #0]
    387a:	cmp	r0, r3
    387c:	beq.n	3882 <month()+0x12>
    387e:	bl	3738 <refreshCache(long) [clone .part.0]>
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
    3882:	ldr	r3, [pc, #8]	; (388c <month()+0x1c>)
  return tm.Wday;
}
   
int month(){
  return month(now()); 
}
    3884:	ldrb	r0, [r3, #5]
    3886:	pop	{r3, pc}
    3888:	.word	0x1fff14c0
    388c:	.word	0x1fff14c4

00003890 <year()>:
int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
    3890:	push	{r3, lr}
  return year(now()); 
    3892:	bl	3750 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    3896:	ldr	r3, [pc, #20]	; (38ac <year()+0x1c>)
    3898:	ldr	r3, [r3, #0]
    389a:	cmp	r0, r3
    389c:	beq.n	38a2 <year()+0x12>
    389e:	bl	3738 <refreshCache(long) [clone .part.0]>
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
  return tmYearToCalendar(tm.Year);
    38a2:	ldr	r3, [pc, #12]	; (38b0 <year()+0x20>)
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
    38a4:	ldrb	r0, [r3, #6]
}
    38a6:	addw	r0, r0, #1970	; 0x7b2
    38aa:	pop	{r3, pc}
    38ac:	.word	0x1fff14c0
    38b0:	.word	0x1fff14c4

000038b4 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    38b4:	mov.w	r0, #4294967295
    38b8:	bx	lr
    38ba:	nop

000038bc <SDClass::~SDClass()>:
	char *filename;
};



class SDClass : public FS
    38bc:	bx	lr
    38be:	nop

000038c0 <_GLOBAL__sub_I_SD>:
#include <Arduino.h>
#include <SD.h>

SDClass SD;
    38c0:	push	{r4, r5, r6, r7}
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() : m_fVol(nullptr), m_xVol(nullptr) {}
    38c2:	ldr	r3, [pc, #56]	; (38fc <_GLOBAL__sub_I_SD+0x3c>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    38c4:	ldr	r0, [pc, #56]	; (3900 <_GLOBAL__sub_I_SD+0x40>)
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
    38c6:	ldr	r7, [pc, #60]	; (3904 <_GLOBAL__sub_I_SD+0x44>)
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    38c8:	ldr	r6, [pc, #60]	; (3908 <_GLOBAL__sub_I_SD+0x48>)
    38ca:	str.w	r0, [r3, #1160]	; 0x488
    38ce:	movs	r4, #0
    38d0:	movs	r5, #40	; 0x28
    38d2:	strb.w	r5, [r3, #1191]	; 0x4a7
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() : m_options(FIFO_SDIO) {}
    38d6:	strb.w	r4, [r3, #1168]	; 0x490
    38da:	strb.w	r4, [r3, #1194]	; 0x4aa
    38de:	str.w	r7, [r3, #1172]	; 0x494
    38e2:	str.w	r6, [r3, #1180]	; 0x49c
    38e6:	str.w	r4, [r3, #1144]	; 0x478
    38ea:	str.w	r4, [r3, #1148]	; 0x47c
    38ee:	ldr	r2, [pc, #28]	; (390c <_GLOBAL__sub_I_SD+0x4c>)
    38f0:	ldr	r1, [pc, #28]	; (3910 <_GLOBAL__sub_I_SD+0x50>)
    38f2:	mov	r0, r3
    38f4:	pop	{r4, r5, r6, r7}
    38f6:	b.w	ac3c <__aeabi_atexit>
    38fa:	nop
    38fc:	.word	0x1fff14e0
    3900:	.word	0x0000fdd4
    3904:	.word	0x0000fd7c
    3908:	.word	0x38011001
    390c:	.word	0x1fff0970
    3910:	.word	0x000038bd

00003914 <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    3914:	push	{r3, r4, r5, lr}
    3916:	movs	r1, #10
    3918:	mov	r5, r0
    391a:	ldr	r0, [pc, #40]	; (3944 <dbgPrint(unsigned short)+0x30>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    391c:	ldr	r4, [pc, #40]	; (3948 <dbgPrint(unsigned short)+0x34>)
    391e:	bl	9480 <usb_serial_write>
    3922:	movs	r1, #13
    3924:	ldr	r0, [pc, #36]	; (394c <dbgPrint(unsigned short)+0x38>)
    3926:	bl	9480 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    392a:	movs	r0, #46	; 0x2e
    392c:	bl	9588 <usb_serial_putchar>
    3930:	mov	r1, r5
    3932:	mov	r0, r4
    3934:	bl	aa68 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    3938:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    393a:	ldmia.w	sp!, {r3, r4, r5, lr}
    393e:	b.w	a99c <Print::println()>
    3942:	nop
    3944:	.word	0x0000fc70
    3948:	.word	0x1fff098c
    394c:	.word	0x0000fc7c

00003950 <ExFatFile::close()>:
#include "../common/DebugMacros.h"
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
    3950:	push	{r4, lr}
    3952:	mov	r4, r0
  bool rtn = sync();
    3954:	bl	4e90 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    3958:	movs	r3, #0
    395a:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    395e:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    3962:	pop	{r4, pc}

00003964 <ExFatFile::getName(char*, unsigned int)>:
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
    3964:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    3968:	add.w	r3, r0, #36	; 0x24
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
    396c:	mov	r9, r0
    396e:	mov	r8, r1
    3970:	mov	r5, r2
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    3972:	ldmia.w	r3, {r0, r1, r2}
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
    3976:	sub	sp, #20
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
  size_t n = 0;
  if (!isOpen()) {
    3978:	ldrb.w	r3, [r9, #49]	; 0x31
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    397c:	add	r6, sp, #4
    397e:	stmia.w	r6, {r0, r1, r2}
  size_t n = 0;
  if (!isOpen()) {
    3982:	cmp	r3, #0
    3984:	beq.n	39fc <ExFatFile::getName(char*, unsigned int)+0x98>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    3986:	ldrb.w	r3, [r9, #48]	; 0x30
    398a:	cmp	r3, #1
    398c:	bls.n	3a1e <ExFatFile::getName(char*, unsigned int)+0xba>
    398e:	movs	r7, #1
    3990:	movs	r4, #0
    if (m_vol->dirSeek(&pos, is == 1 ? 64: 32) != 1) {
    3992:	cmp	r7, #1
    3994:	ite	eq
    3996:	moveq	r2, #64	; 0x40
    3998:	movne	r2, #32
    399a:	mov	r1, r6
    399c:	ldr.w	r0, [r9, #32]
    39a0:	bl	47f8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    39a4:	cmp	r0, #1
    39a6:	bne.n	3a16 <ExFatFile::getName(char*, unsigned int)+0xb2>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dn = reinterpret_cast<DirName_t*>
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    39a8:	movs	r2, #0
    39aa:	mov	r1, r6
    39ac:	ldr.w	r0, [r9, #32]
    39b0:	bl	4778 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    39b4:	cbz	r0, 3a0e <ExFatFile::getName(char*, unsigned int)+0xaa>
    39b6:	ldrb	r3, [r0, #0]
    39b8:	cmp	r3, #193	; 0xc1
    39ba:	bne.n	3a0e <ExFatFile::getName(char*, unsigned int)+0xaa>
    39bc:	add.w	r1, r0, #30
    39c0:	add.w	r2, r8, r4
    39c4:	mov	r3, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
      if ((n + 1) >= length) {
    39c6:	adds	r4, #1
    39c8:	cmp	r4, r5
    39ca:	bcs.n	39ee <ExFatFile::getName(char*, unsigned int)+0x8a>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    39cc:	ldrh.w	r3, [r0, #2]!
        goto done;
      }
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    39d0:	cmp	r3, #126	; 0x7e
    39d2:	ite	ls
    39d4:	uxtbls	r3, r3
    39d6:	movhi	r3, #63	; 0x3f
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    39d8:	cmp	r0, r1
      if ((n + 1) >= length) {
        goto done;
      }
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    39da:	strb.w	r3, [r2], #1
    39de:	mov	r3, r4
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    39e0:	bne.n	39c6 <ExFatFile::getName(char*, unsigned int)+0x62>
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    39e2:	adds	r7, #1
    39e4:	ldrb.w	r2, [r9, #48]	; 0x30
    39e8:	uxtb	r7, r7
    39ea:	cmp	r2, r7
    39ec:	bhi.n	3992 <ExFatFile::getName(char*, unsigned int)+0x2e>
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    39ee:	movs	r2, #0
  return n;
    39f0:	mov	r0, r3
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    39f2:	strb.w	r2, [r8, r3]
  return n;

 fail:
  *name = 0;
  return 0;
}
    39f6:	add	sp, #20
    39f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
    39fc:	movs	r0, #81	; 0x51
    39fe:	bl	3914 <dbgPrint(unsigned short)>
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
    3a02:	movs	r0, #0
    3a04:	strb.w	r0, [r8]
  return 0;
}
    3a08:	add	sp, #20
    3a0a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      goto fail;
    }
    dn = reinterpret_cast<DirName_t*>
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
    3a0e:	movs	r0, #92	; 0x5c
    3a10:	bl	3914 <dbgPrint(unsigned short)>
      goto fail;
    3a14:	b.n	3a02 <ExFatFile::getName(char*, unsigned int)+0x9e>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    if (m_vol->dirSeek(&pos, is == 1 ? 64: 32) != 1) {
      DBG_FAIL_MACRO;
    3a16:	movs	r0, #86	; 0x56
    3a18:	bl	3914 <dbgPrint(unsigned short)>
      goto fail;
    3a1c:	b.n	3a02 <ExFatFile::getName(char*, unsigned int)+0x9e>
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    3a1e:	movs	r3, #0
    3a20:	b.n	39ee <ExFatFile::getName(char*, unsigned int)+0x8a>
    3a22:	nop

00003a24 <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    3a24:	push	{r3, r4, r5, lr}
    3a26:	mov	r5, r1
  if (isOpen()) {
    3a28:	ldrb.w	r1, [r0, #49]	; 0x31
    3a2c:	cbnz	r1, 3a46 <ExFatFile::openRoot(ExFatVolume*)+0x22>
    3a2e:	mov	r4, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    3a30:	movs	r2, #56	; 0x38
    3a32:	bl	c07c <memset>
  m_attributes = FILE_ATTR_ROOT;
    3a36:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    3a38:	movs	r0, #1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    3a3a:	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    3a3e:	strb.w	r0, [r4, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    3a42:	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
}
    3a44:	pop	{r3, r4, r5, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    3a46:	mov.w	r0, #444	; 0x1bc
    3a4a:	bl	3914 <dbgPrint(unsigned short)>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    3a4e:	movs	r0, #0
    3a50:	pop	{r3, r4, r5, pc}
    3a52:	nop

00003a54 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const ExChar_t* path,
                            ExName_t* fname, const ExChar_t** ptr) {
    3a54:	push	{r4, r5, r6, r7, lr}
  ExChar_t c;
  int end;
  int len = 0;

  // Skip leading spaces.
  while (*path == ' ') {
    3a56:	ldrb	r0, [r1, #0]
    3a58:	cmp	r0, #32
    3a5a:	bne.n	3a64 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x10>
    3a5c:	ldrb.w	r0, [r1, #1]!
    3a60:	cmp	r0, #32
    3a62:	beq.n	3a5c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8>
    path++;
  }
  fname->lfn = path;
    3a64:	str	r1, [r2, #4]

  for (len = 0; ; len++) {
    c = path[len];
    3a66:	ldrb	r0, [r1, #0]
    if (c == 0 || isDirSeparator(c)) {
    3a68:	cmp	r0, #0
    3a6a:	beq.n	3b10 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xbc>
    3a6c:	cmp	r0, #47	; 0x2f
    3a6e:	beq.n	3ac8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    3a70:	cmp	r0, #92	; 0x5c
    3a72:	beq.n	3ab6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    3a74:	sub.w	r4, r0, #34	; 0x22
    3a78:	uxtb	r4, r4
    3a7a:	cmp	r4, #29
    3a7c:	bls.n	3aba <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x66>
    3a7e:	ldr.w	lr, [pc, #148]	; 3b14 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>
    3a82:	adds	r6, r1, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    3a84:	movs	r4, #0
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    3a86:	cmp	r0, #124	; 0x7c
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    3a88:	sub.w	r5, r0, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    3a8c:	mov	r7, r6
    3a8e:	beq.n	3ab6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    3a90:	cmp	r5, #94	; 0x5e
    3a92:	bhi.n	3ab6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    3a94:	ldrb.w	r0, [r6], #1
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    3a98:	sub.w	r5, r0, #34	; 0x22
    3a9c:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    3a9e:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    3aa0:	cbz	r0, 3b02 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xae>
    3aa2:	cmp	r0, #47	; 0x2f
    3aa4:	beq.n	3aca <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
    3aa6:	cmp	r0, #92	; 0x5c
    3aa8:	lsr.w	r7, lr, r5
    3aac:	beq.n	3ab6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    3aae:	cmp	r5, #29
    3ab0:	bhi.n	3a86 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
    3ab2:	lsls	r5, r7, #31
    3ab4:	bpl.n	3a86 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    3ab6:	movs	r0, #0
    3ab8:	pop	{r4, r5, r6, r7, pc}
    3aba:	ldr	r5, [pc, #88]	; (3b14 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>)
    3abc:	lsr.w	r4, r5, r4
    3ac0:	lsls	r6, r4, #31
    3ac2:	bpl.n	3a7e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2a>
    3ac4:	movs	r0, #0
    3ac6:	pop	{r4, r5, r6, r7, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    3ac8:	movs	r4, #0
    3aca:	adds	r7, r1, r4
    3acc:	mov	r6, r7
    3ace:	mov	r5, r4
    3ad0:	movs	r0, #47	; 0x2f
    3ad2:	b.n	3ada <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x86>
    3ad4:	ldrb.w	r0, [r6, #1]!
    if (!lfnLegalChar(c)) {
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    3ad8:	adds	r5, #1
    3ada:	cmp	r0, #32
    3adc:	beq.n	3ad4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
    3ade:	cmp	r0, #47	; 0x2f
    3ae0:	beq.n	3ad4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
  *ptr = &path[end];
    3ae2:	add	r1, r5
    3ae4:	str	r1, [r3, #0]

  // Back over spaces and dots.
  while (len) {
    3ae6:	cbz	r4, 3afa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    3ae8:	mov	r1, r7
    c = path[len - 1];
    3aea:	ldrb.w	r3, [r1, #-1]!
    if (c != '.' && c != ' ') {
    3aee:	cmp	r3, #46	; 0x2e
    3af0:	beq.n	3af6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa2>
    3af2:	cmp	r3, #32
    3af4:	bne.n	3b08 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xb4>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    3af6:	subs	r4, #1
    3af8:	bne.n	3aea <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x96>
    3afa:	mov	r0, r4
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    return false;
  }
  fname->len = len;
    3afc:	str	r0, [r2, #0]
  return true;
    3afe:	movs	r0, #1
    3b00:	pop	{r4, r5, r6, r7, pc}
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    3b02:	str	r7, [r3, #0]
    3b04:	adds	r7, r1, r4
    3b06:	b.n	3ae8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x94>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    3b08:	cmp	r4, #255	; 0xff
    3b0a:	ble.n	3afa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    3b0c:	movs	r0, #0
    3b0e:	pop	{r4, r5, r6, r7, pc}
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    3b10:	str	r1, [r3, #0]
    3b12:	b.n	3afc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa8>
    3b14:	.word	0x35000101

00003b18 <ExFatFile::read(void*, unsigned int)>:

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    3b18:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b1c:	ldrb.w	r3, [r0, #51]	; 0x33
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    3b20:	lsls	r5, r3, #31

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    3b22:	sub	sp, #12
    3b24:	mov	r4, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    3b26:	bpl.w	3cf2 <ExFatFile::read(void*, unsigned int)+0x1da>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    3b2a:	lsls	r0, r3, #25
    3b2c:	mov	r5, r1
    3b2e:	mov	r6, r2
    3b30:	bpl.w	3c7a <ExFatFile::read(void*, unsigned int)+0x162>
    if ((m_curPosition + count) > m_validLength) {
    3b34:	ldrd	r0, r1, [r4]
    3b38:	ldrd	r2, r3, [r4, #16]
    3b3c:	adds.w	r8, r0, r6
    3b40:	adc.w	r9, r1, #0
    3b44:	cmp	r3, r9
    3b46:	it	eq
    3b48:	cmpeq	r2, r8
    3b4a:	bcc.w	3c86 <ExFatFile::read(void*, unsigned int)+0x16e>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    3b4e:	cmp	r6, #0
    3b50:	beq.w	3c8a <ExFatFile::read(void*, unsigned int)+0x172>
    3b54:	mov	r9, r4
    3b56:	ldrd	r2, r3, [r9], #24
    3b5a:	mov	r8, r6
    3b5c:	b.n	3bfe <ExFatFile::read(void*, unsigned int)+0xe6>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
    3b5e:	orrs	r3, r2
    3b60:	bne.n	3c3c <ExFatFile::read(void*, unsigned int)+0x124>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    3b62:	ldrb.w	r3, [r4, #49]	; 0x31
    3b66:	lsls	r2, r3, #25
    3b68:	ite	mi
    3b6a:	ldrmi.w	r1, [r0, #1068]	; 0x42c
    3b6e:	ldrpl	r1, [r4, #28]
      } else if (isContiguous()) {
        m_curCluster++;
    3b70:	str	r1, [r4, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    3b72:	ldrb.w	ip, [r0, #1085]	; 0x43d
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    3b76:	ldr.w	r2, [r0, #1060]	; 0x424
    3b7a:	subs	r1, #2
    3b7c:	lsrs	r7, r7, #9
    3b7e:	lsl.w	lr, r1, ip
    3b82:	adds	r1, r7, r2
    3b84:	add	r1, lr
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
    3b86:	cmp.w	sl, #0
    3b8a:	bne.n	3c12 <ExFatFile::read(void*, unsigned int)+0xfa>
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    3b8c:	cmp.w	r8, #512	; 0x200
    3b90:	bcc.n	3c12 <ExFatFile::read(void*, unsigned int)+0xfa>
    3b92:	ldr.w	r2, [r0, #532]	; 0x214
                          || sector == m_vol->dataCacheSector()) {
    3b96:	cmp	r1, r2
    3b98:	beq.n	3c12 <ExFatFile::read(void*, unsigned int)+0xfa>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    3b9a:	cmp.w	r8, #1024	; 0x400
    3b9e:	bcc.n	3c4a <ExFatFile::read(void*, unsigned int)+0x132>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    3ba0:	movs	r3, #1
    3ba2:	lsl.w	ip, r3, ip
    3ba6:	rsb	r7, r7, ip
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    3baa:	mov.w	r3, r8, lsr #9
    3bae:	cmp	r7, r3
    3bb0:	it	cs
    3bb2:	movcs	r7, r3
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    3bb4:	cmp	r1, r2
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    3bb6:	mov.w	fp, r7, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    3bba:	bhi.n	3bd4 <ExFatFile::read(void*, unsigned int)+0xbc>
    3bbc:	adds	r3, r7, r1
    3bbe:	cmp	r3, r2
    3bc0:	bls.n	3bd4 <ExFatFile::read(void*, unsigned int)+0xbc>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    3bc2:	add.w	r0, r0, #524	; 0x20c
    3bc6:	str	r1, [sp, #4]
    3bc8:	bl	44dc <FsCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->dataCacheSync()) {
    3bcc:	cmp	r0, #0
    3bce:	beq.n	3cc0 <ExFatFile::read(void*, unsigned int)+0x1a8>
    3bd0:	ldr	r0, [r4, #32]
    3bd2:	ldr	r1, [sp, #4]
    3bd4:	ldr.w	r0, [r0, #1080]	; 0x438
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
    3bd8:	ldr	r2, [r0, #0]
    3bda:	mov	r3, r7
    3bdc:	ldr	r7, [r2, #12]
    3bde:	mov	r2, r5
    3be0:	blx	r7
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    3be2:	cmp	r0, #0
    3be4:	beq.n	3cb6 <ExFatFile::read(void*, unsigned int)+0x19e>
    3be6:	mov	r0, fp
    3be8:	movs	r1, #0
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    3bea:	ldrd	r2, r3, [r4]
    3bee:	adds	r2, r2, r0
    3bf0:	adcs	r3, r1
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    3bf2:	subs.w	r8, r8, fp
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    3bf6:	add	r5, fp
    m_curPosition += n;
    3bf8:	strd	r2, r3, [r4]
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    3bfc:	beq.n	3c8a <ExFatFile::read(void*, unsigned int)+0x172>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    3bfe:	ldr	r0, [r4, #32]
    3c00:	ldr.w	r7, [r0, #1072]	; 0x430
    3c04:	ands	r7, r2
    sectorOffset = clusterOffset & m_vol->sectorMask();
    3c06:	ubfx	sl, r7, #0, #9
    if (clusterOffset == 0) {
    3c0a:	cmp	r7, #0
    3c0c:	beq.n	3b5e <ExFatFile::read(void*, unsigned int)+0x46>
    3c0e:	ldr	r1, [r4, #24]
    3c10:	b.n	3b72 <ExFatFile::read(void*, unsigned int)+0x5a>
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    3c12:	add.w	r0, r0, #524	; 0x20c
    3c16:	movs	r2, #0
    3c18:	bl	4450 <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
    3c1c:	cmp	r0, #0
    3c1e:	beq.n	3c98 <ExFatFile::read(void*, unsigned int)+0x180>
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
      n = m_vol->bytesPerSector() - sectorOffset;
    3c20:	rsb	fp, sl, #512	; 0x200
    3c24:	cmp	fp, r8
    3c26:	it	cs
    3c28:	movcs	fp, r8
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
    3c2a:	add.w	r1, r0, sl
    3c2e:	mov	r2, fp
    3c30:	mov	r0, r5
    3c32:	bl	9280 <memcpy>
    3c36:	mov	r0, fp
    3c38:	movs	r1, #0
    3c3a:	b.n	3bea <ExFatFile::read(void*, unsigned int)+0xd2>
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
    3c3c:	ldrb.w	r3, [r4, #51]	; 0x33
    3c40:	lsls	r3, r3, #25
    3c42:	bpl.n	3c64 <ExFatFile::read(void*, unsigned int)+0x14c>
        m_curCluster++;
    3c44:	ldr	r1, [r4, #24]
    3c46:	adds	r1, #1
    3c48:	b.n	3b70 <ExFatFile::read(void*, unsigned int)+0x58>
    3c4a:	ldr.w	r0, [r0, #1080]	; 0x438
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    3c4e:	ldr	r3, [r0, #0]
    3c50:	mov	r2, r5
    3c52:	ldr	r3, [r3, #8]
    3c54:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    3c56:	cbz	r0, 3cca <ExFatFile::read(void*, unsigned int)+0x1b2>
    3c58:	mov.w	r0, #512	; 0x200
    3c5c:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    3c5e:	mov.w	fp, #512	; 0x200
    3c62:	b.n	3bea <ExFatFile::read(void*, unsigned int)+0xd2>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3c64:	mov	r2, r9
    3c66:	ldr	r1, [r4, #24]
    3c68:	bl	47ac <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    3c6c:	sxtb	r0, r0
        if (fg < 0) {
    3c6e:	cmp	r0, #0
    3c70:	blt.n	3cd4 <ExFatFile::read(void*, unsigned int)+0x1bc>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
    3c72:	beq.n	3cde <ExFatFile::read(void*, unsigned int)+0x1c6>
    3c74:	ldr	r0, [r4, #32]
    3c76:	ldr	r1, [r4, #24]
    3c78:	b.n	3b72 <ExFatFile::read(void*, unsigned int)+0x5a>

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    3c7a:	ldrb.w	r3, [r4, #49]	; 0x31
    3c7e:	lsls	r1, r3, #28
    3c80:	bmi.w	3b34 <ExFatFile::read(void*, unsigned int)+0x1c>
    3c84:	b.n	3b4e <ExFatFile::read(void*, unsigned int)+0x36>
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    3c86:	subs	r6, r2, r0
    3c88:	b.n	3b4e <ExFatFile::read(void*, unsigned int)+0x36>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    3c8a:	mov.w	r8, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    3c8e:	rsb	r0, r8, r6

fail:
  m_error |= READ_ERROR;
  return -1;
}
    3c92:	add	sp, #12
    3c94:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
        DBG_FAIL_MACRO;
    3c98:	movw	r0, #599	; 0x257
    3c9c:	bl	3914 <dbgPrint(unsigned short)>
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    3ca0:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    3ca4:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    3ca8:	orr.w	r3, r3, #2
    3cac:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
}
    3cb0:	add	sp, #12
    3cb2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
        DBG_FAIL_MACRO;
    3cb6:	mov.w	r0, #624	; 0x270
    3cba:	bl	3914 <dbgPrint(unsigned short)>
        goto fail;
    3cbe:	b.n	3ca0 <ExFatFile::read(void*, unsigned int)+0x188>
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
        // Flush cache if cache sector is in the range.
        if (!m_vol->dataCacheSync()) {
          DBG_FAIL_MACRO;
    3cc0:	movw	r0, #619	; 0x26b
    3cc4:	bl	3914 <dbgPrint(unsigned short)>
          goto fail;
    3cc8:	b.n	3ca0 <ExFatFile::read(void*, unsigned int)+0x188>
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
    3cca:	mov.w	r0, #632	; 0x278
    3cce:	bl	3914 <dbgPrint(unsigned short)>
        goto fail;
    3cd2:	b.n	3ca0 <ExFatFile::read(void*, unsigned int)+0x188>
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
        if (fg < 0) {
          DBG_FAIL_MACRO;
    3cd4:	movw	r0, #575	; 0x23f
    3cd8:	bl	3914 <dbgPrint(unsigned short)>
          goto fail;
    3cdc:	b.n	3ca0 <ExFatFile::read(void*, unsigned int)+0x188>
        }
        if (fg == 0) {
          // EOF if directory.
          if (isDir()) {
    3cde:	ldrb.w	r3, [r4, #49]	; 0x31
    3ce2:	tst.w	r3, #80	; 0x50
    3ce6:	bne.n	3c8e <ExFatFile::read(void*, unsigned int)+0x176>
            break;
          }
          DBG_FAIL_MACRO;
    3ce8:	movw	r0, #583	; 0x247
    3cec:	bl	3914 <dbgPrint(unsigned short)>
          goto fail;
    3cf0:	b.n	3ca0 <ExFatFile::read(void*, unsigned int)+0x188>
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    3cf2:	movw	r0, #555	; 0x22b
    3cf6:	bl	3914 <dbgPrint(unsigned short)>
    goto fail;
    3cfa:	b.n	3ca0 <ExFatFile::read(void*, unsigned int)+0x188>

00003cfc <ExFatFile::peek()>:
  }
  fname->len = len;
  return true;
}
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
    3cfc:	push	{r4, r5, r6, r7, lr}
    3cfe:	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    3d00:	movs	r2, #1
    3d02:	add.w	r1, sp, #7
    3d06:	mov	r4, r0
  uint64_t curPosition = m_curPosition;
    3d08:	ldrd	r6, r7, [r0]
  uint32_t curCluster = m_curCluster;
    3d0c:	ldr	r5, [r0, #24]
    3d0e:	bl	3b18 <ExFatFile::read(void*, unsigned int)>
    3d12:	cmp	r0, #1
    3d14:	it	eq
    3d16:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
  m_curCluster = curCluster;
    3d1a:	str	r5, [r4, #24]
    3d1c:	it	ne
    3d1e:	movne.w	r0, #4294967295
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
    3d22:	strd	r6, r7, [r4]
  m_curCluster = curCluster;
  return c;
}
    3d26:	add	sp, #12
    3d28:	pop	{r4, r5, r6, r7, pc}
    3d2a:	nop

00003d2c <ExFatFile::seekSet(unsigned long long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    3d2c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d30:	ldrb.w	ip, [r0, #49]	; 0x31
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    3d34:	ldr	r5, [r0, #24]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    3d36:	sub	sp, #12
    3d38:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    3d3a:	cmp.w	ip, #0
    3d3e:	beq.n	3e16 <ExFatFile::seekSet(unsigned long long)+0xea>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    3d40:	ldrd	r0, r1, [r0]
    3d44:	cmp	r1, r3
    3d46:	it	eq
    3d48:	cmpeq	r0, r2
    3d4a:	mov	r6, r2
    3d4c:	mov	r7, r3
    3d4e:	beq.n	3e30 <ExFatFile::seekSet(unsigned long long)+0x104>
    return true;
  }
  if (pos == 0) {
    3d50:	orrs.w	r3, r6, r7
    3d54:	bne.n	3d66 <ExFatFile::seekSet(unsigned long long)+0x3a>
    // set position to start of file
    m_curCluster = 0;
    3d56:	movs	r3, #0
    3d58:	str	r3, [r4, #24]
    }
  }

done:
  m_curPosition = pos;
  return true;
    3d5a:	movs	r0, #1
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    3d5c:	strd	r6, r7, [r4]
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    3d60:	add	sp, #12
    3d62:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    3d66:	tst.w	ip, #8
    3d6a:	beq.n	3d78 <ExFatFile::seekSet(unsigned long long)+0x4c>
    if (pos > m_validLength) {
    3d6c:	ldrd	r2, r3, [r4, #16]
    3d70:	cmp	r3, r7
    3d72:	it	eq
    3d74:	cmpeq	r2, r6
    3d76:	bcc.n	3e38 <ExFatFile::seekSet(unsigned long long)+0x10c>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    3d78:	ldr	r3, [r4, #32]
    3d7a:	str	r3, [sp, #4]
    3d7c:	ldrb.w	lr, [r3, #1085]	; 0x43d
  if (isContiguous()) {
    3d80:	ldrb.w	sl, [r4, #51]	; 0x33
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    3d84:	add.w	lr, lr, #9
    3d88:	uxtb.w	lr, lr
    3d8c:	adds.w	r2, r6, #4294967295
    3d90:	adc.w	r3, r7, #4294967295
    3d94:	rsb	r8, lr, #32
    3d98:	lsl.w	fp, r3, r8
    3d9c:	lsr.w	r2, r2, lr
    3da0:	orr.w	r2, r2, fp
    3da4:	sub.w	fp, lr, #32
    3da8:	lsr.w	r3, r3, fp
  if (isContiguous()) {
    3dac:	tst.w	sl, #64	; 0x40
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    3db0:	orr.w	r2, r2, r3
  if (isContiguous()) {
    3db4:	bne.n	3e28 <ExFatFile::seekSet(unsigned long long)+0xfc>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    3db6:	adds.w	r9, r0, #4294967295
    3dba:	adc.w	sl, r1, #4294967295
    3dbe:	lsr.w	lr, r9, lr
    3dc2:	lsl.w	r8, sl, r8
    3dc6:	orr.w	lr, lr, r8
    3dca:	lsr.w	fp, sl, fp
    3dce:	orr.w	lr, lr, fp
  if (nNew < nCur || m_curPosition == 0) {
    3dd2:	cmp	r2, lr
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    3dd4:	mov	r3, sl
  if (nNew < nCur || m_curPosition == 0) {
    3dd6:	bcc.n	3dde <ExFatFile::seekSet(unsigned long long)+0xb2>
    3dd8:	orrs.w	r3, r0, r1
    3ddc:	bne.n	3e42 <ExFatFile::seekSet(unsigned long long)+0x116>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    3dde:	tst.w	ip, #64	; 0x40
    3de2:	itet	ne
    3de4:	ldrne	r3, [sp, #4]
    3de6:	ldreq	r3, [r4, #28]
    3de8:	ldrne.w	r3, [r3, #1068]	; 0x42c
    3dec:	str	r3, [r4, #24]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    3dee:	mov	r8, r2
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    3df0:	add.w	r9, r4, #24
    3df4:	mov	r2, r9
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    3df6:	cmp.w	r8, #0
    3dfa:	beq.n	3d5a <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    3dfc:	ldr	r1, [r4, #24]
    3dfe:	ldr	r0, [r4, #32]
    3e00:	bl	47ac <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    3e04:	add.w	r8, r8, #4294967295
    3e08:	cmp	r0, #0
    3e0a:	bne.n	3df4 <ExFatFile::seekSet(unsigned long long)+0xc8>
      DBG_FAIL_MACRO;
    3e0c:	mov.w	r0, #700	; 0x2bc
    3e10:	bl	3914 <dbgPrint(unsigned short)>
      goto fail;
    3e14:	b.n	3e1e <ExFatFile::seekSet(unsigned long long)+0xf2>
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    3e16:	movw	r0, #665	; 0x299
    3e1a:	bl	3914 <dbgPrint(unsigned short)>
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
  return false;
    3e1e:	movs	r0, #0
done:
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
    3e20:	str	r5, [r4, #24]
  return false;
}
    3e22:	add	sp, #12
    3e24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    3e28:	ldr	r3, [r4, #28]
    3e2a:	add	r2, r3
    3e2c:	str	r2, [r4, #24]
    goto done;
    3e2e:	b.n	3d5a <ExFatFile::seekSet(unsigned long long)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    3e30:	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    3e32:	add	sp, #12
    3e34:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_validLength) {
      DBG_FAIL_MACRO;
    3e38:	movw	r0, #679	; 0x2a7
    3e3c:	bl	3914 <dbgPrint(unsigned short)>
      goto fail;
    3e40:	b.n	3e1e <ExFatFile::seekSet(unsigned long long)+0xf2>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    3e42:	rsb	r2, lr, r2
    3e46:	b.n	3dee <ExFatFile::seekSet(unsigned long long)+0xc2>

00003e48 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    3e48:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3e4c:	mov	r5, r1
    3e4e:	sub	sp, #76	; 0x4c
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    3e50:	ldrb.w	r1, [r0, #49]	; 0x31
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    3e54:	str	r2, [sp, #0]
    3e56:	mov	r6, r0
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    3e58:	cbnz	r1, 3e66 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    3e5a:	mov	fp, r3
    3e5c:	ldrb.w	r3, [r5, #49]	; 0x31
    3e60:	tst.w	r3, #80	; 0x50
    3e64:	bne.n	3e7c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x34>
    DBG_FAIL_MACRO;
    3e66:	movs	r0, #206	; 0xce
    3e68:	bl	3914 <dbgPrint(unsigned short)>
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
    3e6c:	movs	r0, #0
    3e6e:	strb.w	r0, [r6, #49]	; 0x31
  m_flags = 0;
    3e72:	strb.w	r0, [r6, #51]	; 0x33
  return false;
}
    3e76:	add	sp, #76	; 0x4c
    3e78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    3e7c:	ldr	r3, [sp, #112]	; 0x70
    3e7e:	and.w	r3, r3, #3
    3e82:	cmp	r3, #1
    3e84:	beq.w	40a4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25c>
    3e88:	cmp	r3, #2
    3e8a:	beq.n	3e9a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x52>
    3e8c:	cmp	r3, #0
    3e8e:	beq.w	40a0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x258>
      break;
    case O_RDWR:
      modeFlags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;
    default:
      DBG_FAIL_MACRO;
    3e92:	movs	r0, #220	; 0xdc
    3e94:	bl	3914 <dbgPrint(unsigned short)>
      goto fail;
    3e98:	b.n	3e6c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    3e9a:	movs	r3, #3
      break;
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    3e9c:	ldr	r2, [sp, #112]	; 0x70
    3e9e:	and.w	r2, r2, #8
    3ea2:	orrs	r3, r2
    3ea4:	str	r3, [sp, #4]
  if (name) {
    3ea6:	ldr	r3, [sp, #0]
    3ea8:	cmp	r3, #0
    3eaa:	beq.w	40b0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x268>
    nameHash = exFatHashName(name, nameLength, 0);
    3eae:	movs	r2, #0
    3eb0:	mov	r0, r3
    3eb2:	mov	r1, fp
    3eb4:	bl	49dc <exFatHashName(char const*, unsigned int, unsigned short)>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    3eb8:	movs	r2, #0
    3eba:	str	r0, [sp, #8]
    3ebc:	movs	r3, #0
    3ebe:	mov	r0, r5
    3ec0:	bl	3d2c <ExFatFile::seekSet(unsigned long long)>
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    3ec4:	ldr	r2, [pc, #708]	; (418c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x344>)
    3ec6:	add.w	r3, fp, #14
    3eca:	smull	r1, r2, r2, r3
    3ece:	add	r2, r3
    3ed0:	asrs	r3, r3, #31
    3ed2:	rsb	r3, r3, r2, asr #3
    3ed6:	uxtb	r3, r3
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;
    3ed8:	mov.w	r9, #0
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    3edc:	add.w	sl, r3, #2
    3ee0:	str	r3, [sp, #12]
    3ee2:	uxtb.w	sl, sl

  DirFile_t*   dirFile;
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
    3ee6:	mov	r4, r9
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
    3ee8:	mov	r7, r9
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    3eea:	movs	r2, #32
    3eec:	add	r1, sp, #40	; 0x28
    3eee:	mov	r0, r5
    3ef0:	bl	3b18 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    3ef4:	cmp	r0, #0
    3ef6:	beq.n	3f76 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      goto create;
    }
    if (n != 32) {
    3ef8:	cmp	r0, #32
    3efa:	bne.w	40a8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x260>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
    3efe:	ldrb.w	r3, [sp, #40]	; 0x28
    3f02:	lsls	r2, r3, #24
    3f04:	bmi.n	3fd6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x18e>
      if (freeCount == 0) {
    3f06:	cmp	r4, #0
    3f08:	bne.n	3fd0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x188>
        freePos.position = dir->curPosition() - 32;
    3f0a:	ldr	r2, [r5, #0]
        freePos.cluster = dir->curCluster();
    3f0c:	ldr	r1, [r5, #24]
    3f0e:	str	r1, [sp, #28]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
    3f10:	subs	r2, #32
    3f12:	str	r2, [sp, #32]
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
        freeCount++;
    3f14:	adds	r4, #1
    3f16:	uxtb	r4, r4
      }
      if (!buf[0]) {
    3f18:	cbz	r3, 3f76 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      if (buf[0] != EXFAT_TYPE_FILE) {
        continue;
      }
      inSet = true;
    }
    switch (buf[0]) {
    3f1a:	cmp	r3, #192	; 0xc0
    3f1c:	beq.w	4044 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fc>
    3f20:	cmp	r3, #193	; 0xc1
    3f22:	beq.n	3fec <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1a4>
    3f24:	cmp	r3, #133	; 0x85
    3f26:	bne.n	3eea <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa2>
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
    3f28:	movs	r2, #56	; 0x38
    3f2a:	movs	r1, #0
    3f2c:	mov	r0, r6
    3f2e:	bl	c07c <memset>
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    3f32:	ldrb.w	r3, [sp, #44]	; 0x2c
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
    3f36:	ldrb.w	r2, [sp, #41]	; 0x29
    3f3a:	strb.w	r2, [r6, #48]	; 0x30
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    3f3e:	lsls	r0, r3, #27
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    3f40:	and.w	r2, r3, #55	; 0x37
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
    3f44:	it	pl
    3f46:	orrpl.w	r2, r2, #8
    3f4a:	strb.w	r2, [r6, #49]	; 0x31
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    3f4e:	ldr	r3, [r5, #0]
    3f50:	ldr	r1, [r5, #32]
    3f52:	ldr	r2, [r5, #24]
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
    3f54:	str	r2, [r6, #36]	; 0x24
        m_dirPos.position = dir->curPosition() - 32;
    3f56:	subs	r3, #32
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();
    3f58:	str	r1, [r6, #32]

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    3f5a:	str	r3, [r6, #40]	; 0x28
        m_dirPos.isContiguous = dir->isContiguous();
    3f5c:	ldrb.w	r3, [r5, #51]	; 0x33
    3f60:	ubfx	r3, r3, #6, #1
    3f64:	strb.w	r3, [r6, #44]	; 0x2c
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    3f68:	movs	r2, #32
    3f6a:	add	r1, sp, #40	; 0x28
    3f6c:	mov	r0, r5
    3f6e:	bl	3b18 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    3f72:	cmp	r0, #0
    3f74:	bne.n	3ef8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xb0>
#if READ_ONLY
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    3f76:	ldr	r3, [sp, #112]	; 0x70
    3f78:	lsls	r1, r3, #22
    3f7a:	bpl.w	4096 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24e>
    3f7e:	ldr	r3, [sp, #4]
    3f80:	lsls	r2, r3, #30
    3f82:	bpl.w	4096 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24e>
    3f86:	ldr	r3, [sp, #0]
    3f88:	cmp	r3, #0
    3f8a:	beq.w	4096 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    3f8e:	cmp	r4, sl
    3f90:	bcc.n	3fae <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x166>
    3f92:	b.n	40c0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x278>
        goto fail;
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
    3f94:	cmp	r0, #32
    3f96:	bne.w	4182 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x33a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
    3f9a:	cbnz	r4, 3fa6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x15e>
      freePos.position = dir->curPosition() - 32;
    3f9c:	ldr	r2, [r5, #0]
      freePos.cluster = dir->curCluster();
    3f9e:	ldr	r1, [r5, #24]
    3fa0:	str	r1, [sp, #28]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
    3fa2:	subs	r2, #32
    3fa4:	str	r2, [sp, #32]
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    3fa6:	uxtb	r4, r3
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    3fa8:	cmp	sl, r4
    3faa:	bls.w	40c0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x278>
    n = dir->read(buf, 32);
    3fae:	movs	r2, #32
    3fb0:	add	r1, sp, #40	; 0x28
    3fb2:	mov	r0, r5
    3fb4:	bl	3b18 <ExFatFile::read(void*, unsigned int)>
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    3fb8:	adds	r3, r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
    3fba:	cmp	r0, #0
    3fbc:	bne.n	3f94 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x14c>
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
    3fbe:	mov	r0, r5
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
    3fc0:	ldr	r7, [r5, #24]
      if (!dir->addDirCluster()) {
    3fc2:	bl	4ef8 <ExFatFile::addDirCluster()>
    3fc6:	cmp	r0, #0
    3fc8:	beq.w	41de <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x396>
        DBG_FAIL_MACRO;
        goto fail;
      }
      dir->m_curCluster = curCluster;
    3fcc:	str	r7, [r5, #24]
      continue;
    3fce:	b.n	3fa8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x160>
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
    3fd0:	cmp	r4, sl
    3fd2:	bcs.n	3f18 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd0>
    3fd4:	b.n	3f14 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xcc>
        freeCount++;
      }
      if (!buf[0]) {
        goto create;
      }
    } else if (!inSet) {
    3fd6:	cmp.w	r9, #0
    3fda:	bne.n	3f1a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd2>
      if (freeCount < freeNeed) {
        freeCount = 0;
    3fdc:	cmp	r4, sl
    3fde:	it	cc
    3fe0:	movcc	r4, #0
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
    3fe2:	cmp	r3, #133	; 0x85
    3fe4:	bne.n	3eea <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa2>
        continue;
      }
      inSet = true;
    3fe6:	mov.w	r9, #1
    3fea:	b.n	3f28 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xe0>
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
    3fec:	rsb	r8, r7, fp
    3ff0:	uxtb.w	r8, r8
    3ff4:	cmp.w	r8, #15
    3ff8:	it	cs
    3ffa:	movcs.w	r8, #15
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
    3ffe:	mov	r3, r8
    4000:	mov	r2, r7
    4002:	ldr	r1, [sp, #0]
    4004:	add	r0, sp, #40	; 0x28
    4006:	bl	4a18 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>
    400a:	cmp	r0, #0
    400c:	beq.n	4084 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x23c>
          inSet = false;
          break;
        }
        nameOffset += nCmp;
    400e:	add	r7, r8
    4010:	uxtb	r7, r7

        if (nameOffset == nameLength) {
    4012:	cmp	fp, r7
    4014:	bne.w	3eea <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa2>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    4018:	ldr	r3, [sp, #112]	; 0x70
    401a:	lsls	r3, r3, #20
    401c:	bmi.n	40b6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x26e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    401e:	ldr	r3, [sp, #112]	; 0x70
    4020:	tst.w	r3, #17408	; 0x4400
    4024:	bne.w	4190 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x348>
    4028:	ldrb.w	r3, [r6, #51]	; 0x33
    402c:	lsls	r7, r3, #30
    402e:	bmi.w	4190 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x348>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    4032:	ldr	r3, [sp, #112]	; 0x70
    4034:	lsls	r3, r3, #21
    4036:	bpl.w	41d4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x38c>
    if (!(m_flags & FILE_FLAG_WRITE)) {
      DBG_FAIL_MACRO;
    403a:	mov.w	r0, #334	; 0x14e
    403e:	bl	3914 <dbgPrint(unsigned short)>
      goto fail;
    4042:	b.n	3e6c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    4044:	ldrb.w	r3, [sp, #41]	; 0x29
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
    4048:	ldr	r2, [sp, #4]
    404a:	strb.w	r2, [r6, #51]	; 0x33
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    404e:	lsls	r1, r3, #30
    4050:	bpl.n	405a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x212>
          m_flags |= FILE_FLAG_CONTIGUOUS;
    4052:	orr.w	r3, r2, #64	; 0x40
    4056:	strb.w	r3, [r6, #51]	; 0x33
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    405a:	ldrd	r2, r3, [sp, #48]	; 0x30
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    405e:	ldrd	r0, r1, [sp, #64]	; 0x40
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    4062:	strd	r2, r3, [r6, #16]
        m_firstCluster = getLe32(dirStream->firstCluster);
    4066:	ldr	r3, [sp, #60]	; 0x3c
    4068:	str	r3, [r6, #28]
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
    406a:	ldr	r3, [sp, #0]
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    406c:	strd	r0, r1, [r6, #8]
        if (!name) {
    4070:	cmp	r3, #0
    4072:	beq.n	4018 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1d0>
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    4074:	ldrb.w	r3, [sp, #43]	; 0x2b
    4078:	cmp	r3, fp
    407a:	beq.n	4088 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x240>
            nameHash != getLe16(dirStream->nameHash)) {
          inSet = false;
    407c:	mov.w	r9, #0
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    4080:	mov	r7, r9
    4082:	b.n	3eea <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa2>
        nCmp = nameLength - nameOffset;
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
          inSet = false;
    4084:	mov	r9, r0
    4086:	b.n	3eea <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa2>
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    4088:	ldrh.w	r3, [sp, #44]	; 0x2c
    408c:	ldr	r2, [sp, #8]
    408e:	cmp	r3, r2
    4090:	bne.n	407c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x234>
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    4092:	movs	r7, #0
    4094:	b.n	3eea <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa2>
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    DBG_FAIL_MACRO;
    4096:	movw	r0, #355	; 0x163
    409a:	bl	3914 <dbgPrint(unsigned short)>
    goto fail;
    409e:	b.n	3e6c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    40a0:	movs	r3, #1
    40a2:	b.n	3e9c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x54>
    40a4:	movs	r3, #2
    40a6:	b.n	3e9c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x54>
    n = dir->read(buf, 32);
    if (n == 0) {
      goto create;
    }
    if (n != 32) {
      DBG_FAIL_MACRO;
    40a8:	movs	r0, #236	; 0xec
    40aa:	bl	3914 <dbgPrint(unsigned short)>
      goto fail;
    40ae:	b.n	3e6c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
  uint8_t nCmp;
  uint8_t modeFlags;
  uint16_t nameHash = 0;
    40b0:	ldr	r3, [sp, #0]
    40b2:	str	r3, [sp, #8]
    40b4:	b.n	3ec4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x7c>
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    DBG_FAIL_MACRO;
    40b6:	mov.w	r0, #320	; 0x140
    40ba:	bl	3914 <dbgPrint(unsigned short)>
    goto fail;
    40be:	b.n	3e6c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    40c0:	ldrb.w	r3, [r5, #51]	; 0x33
  memset(this, 0, sizeof(ExFatFile));
    40c4:	movs	r2, #56	; 0x38
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    40c6:	ubfx	r3, r3, #6, #1
  memset(this, 0, sizeof(ExFatFile));
    40ca:	movs	r1, #0
    40cc:	mov	r0, r6
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    40ce:	add.w	r8, sp, #28
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    40d2:	strb.w	r3, [sp, #36]	; 0x24
  memset(this, 0, sizeof(ExFatFile));
    40d6:	bl	c07c <memset>
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    40da:	ldr	r4, [sp, #12]
    40dc:	ldr	r3, [r5, #32]
    40de:	str.w	fp, [sp, #12]

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    40e2:	ldmia.w	r8, {r0, r1, r2}
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    40e6:	add.w	r9, r4, #1
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
    40ea:	movs	r4, #8
    40ec:	strb.w	r4, [r6, #49]	; 0x31
    40f0:	add.w	r7, fp, #30
  m_dirPos = freePos;
    40f4:	add.w	r4, r6, #36	; 0x24
    40f8:	ldr.w	fp, [sp]
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
    40fc:	str	r3, [r6, #32]
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    40fe:	uxtb.w	r9, r9

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    4102:	stmia.w	r4, {r0, r1, r2}
    4106:	uxtb	r7, r7
  for (uint8_t i = 0; i < freeNeed; i++) {
    4108:	movs	r5, #0
    410a:	mov	r0, r3
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
    410c:	movs	r2, #1
    410e:	mov	r1, r8
    4110:	bl	4778 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    4114:	mov	r4, r0
    4116:	cmp	r0, #0
    4118:	beq.n	41ca <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x382>
    411a:	ldrsb.w	r3, [r0]
    411e:	cmp	r3, #0
    4120:	blt.n	41ca <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x382>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0 , 32);
    4122:	movs	r2, #32
    4124:	movs	r1, #0
    4126:	bl	c07c <memset>
    if (i == 0) {
    412a:	cmp	r5, #0
    412c:	beq.w	423e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3f6>
        FsDateTime::callback(&date, &time, &ms10);
        dirFile->createTimeMs = ms10;
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
    4130:	cmp	r5, #1
    4132:	beq.n	421e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3d6>
    4134:	rsb	r3, r5, r5, lsl #4
    4138:	cmp	r7, #15
    413a:	sub.w	r3, r3, #30

      dirStream->nameLength = nameLength;
      setLe16(dirStream->nameHash, nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
    413e:	mov.w	r2, #193	; 0xc1
    4142:	mov	r1, r7
    4144:	it	cs
    4146:	movcs	r1, #15
    4148:	uxtb	r3, r3
    414a:	strb	r2, [r4, #0]
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    414c:	cbz	r1, 4164 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x31c>
    414e:	adds	r4, #2
    4150:	sxth	r1, r1
    4152:	add.w	r1, r4, r1, lsl #1
    4156:	add	r3, fp
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
    4158:	ldrb.w	r2, [r3], #1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    415c:	strh.w	r2, [r4], #2
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    4160:	cmp	r1, r4
    4162:	bne.n	4158 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x310>
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    4164:	adds	r5, #1
    4166:	uxtb	r5, r5
    4168:	cmp	sl, r5
    416a:	bls.n	41f2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3aa>
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
    416c:	movs	r2, #32
    416e:	mov	r1, r8
    4170:	ldr	r0, [r6, #32]
    4172:	bl	47f8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    4176:	cmp	r0, #1
    4178:	bne.n	41e8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3a0>
    417a:	subs	r7, #15
    417c:	ldr	r0, [r6, #32]
    417e:	uxtb	r7, r7
    4180:	b.n	410c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2c4>
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
      DBG_FAIL_MACRO;
    4182:	mov.w	r0, #370	; 0x172
    4186:	bl	3914 <dbgPrint(unsigned short)>
      goto fail;
    418a:	b.n	3e6c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
    418c:	.word	0x88888889
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || READ_ONLY) {
    4190:	ldrb.w	r3, [r6, #49]	; 0x31
    4194:	tst.w	r3, #17
    4198:	bne.n	41c0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x378>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    419a:	ldr	r3, [sp, #112]	; 0x70
    419c:	lsls	r5, r3, #21
    419e:	bpl.n	41d4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x38c>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    41a0:	ldrb.w	r3, [r6, #51]	; 0x33
    41a4:	lsls	r4, r3, #30
    41a6:	bpl.w	403a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1f2>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    41aa:	movs	r2, #0
    41ac:	movs	r3, #0
    41ae:	mov	r0, r6
    41b0:	bl	3d2c <ExFatFile::seekSet(unsigned long long)>
    41b4:	cbnz	r0, 4212 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3ca>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
    41b6:	mov.w	r0, #338	; 0x152
    41ba:	bl	3914 <dbgPrint(unsigned short)>
      goto fail;
    41be:	b.n	3e6c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || READ_ONLY) {
      DBG_FAIL_MACRO;
    41c0:	mov.w	r0, #326	; 0x146
    41c4:	bl	3914 <dbgPrint(unsigned short)>
      goto fail;
    41c8:	b.n	3e6c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
    if (!cache || (cache[0] & 0x80)) {
      DBG_FAIL_MACRO;
    41ca:	mov.w	r0, #394	; 0x18a
    41ce:	bl	3914 <dbgPrint(unsigned short)>
      goto fail;
    41d2:	b.n	3e6c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    41d4:	ldr	r3, [sp, #112]	; 0x70
    41d6:	lsls	r0, r3, #17
    41d8:	bmi.n	41fa <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3b2>
    DBG_FAIL_MACRO;
    goto fail;
  }
#endif  // READ_ONLY
  return true;
    41da:	movs	r0, #1
    41dc:	b.n	3e76 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2e>
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
        DBG_FAIL_MACRO;
    41de:	movw	r0, #363	; 0x16b
    41e2:	bl	3914 <dbgPrint(unsigned short)>
        goto fail;
    41e6:	b.n	3e6c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
    41e8:	mov.w	r0, #388	; 0x184
    41ec:	bl	3914 <dbgPrint(unsigned short)>
        goto fail;
    41f0:	b.n	3e6c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
      for (size_t k = 0; k < nCmp; k++) {
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
      }
    }
  }
  return sync();
    41f2:	mov	r0, r6
    41f4:	bl	4e90 <ExFatFile::sync()>
    41f8:	b.n	3e76 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2e>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    41fa:	ldrd	r2, r3, [r6, #16]
    41fe:	mov	r0, r6
    4200:	bl	3d2c <ExFatFile::seekSet(unsigned long long)>
    4204:	cmp	r0, #0
    4206:	bne.n	41da <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x392>
    DBG_FAIL_MACRO;
    4208:	mov.w	r0, #342	; 0x156
    420c:	bl	3914 <dbgPrint(unsigned short)>
    goto fail;
    4210:	b.n	3e6c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
    4212:	mov	r0, r6
    4214:	bl	5260 <ExFatFile::truncate()>
    4218:	cmp	r0, #0
    421a:	beq.n	41b6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x36e>
    421c:	b.n	41da <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x392>
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    421e:	movs	r3, #192	; 0xc0
    4220:	strb	r3, [r4, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4222:	ldr	r3, [sp, #4]
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    4224:	movs	r2, #3
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4226:	orn	r3, r3, #63	; 0x3f
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    422a:	strb	r2, [r4, #1]
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    422c:	strb.w	r3, [r6, #51]	; 0x33

      dirStream->nameLength = nameLength;
    4230:	ldrb.w	r3, [sp, #12]
    4234:	strb	r3, [r4, #3]
    4236:	ldrh.w	r3, [sp, #8]
    423a:	strh	r3, [r4, #4]
    423c:	b.n	4164 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x31c>
      goto fail;
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
    423e:	movs	r3, #133	; 0x85
    4240:	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
      dirFile->setCount = m_setCount;
      if (FsDateTime::callback) {
    4242:	ldr	r3, [pc, #48]	; (4274 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x42c>)
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    4244:	strb.w	r9, [r6, #48]	; 0x30
      dirFile->setCount = m_setCount;
    4248:	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
    424c:	ldr	r3, [r3, #0]
    424e:	cmp	r3, #0
    4250:	beq.n	4164 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x31c>
        uint16_t date, time;
        uint8_t ms10;
        FsDateTime::callback(&date, &time, &ms10);
    4252:	add.w	r2, sp, #23
    4256:	add.w	r1, sp, #26
    425a:	add	r0, sp, #24
    425c:	blx	r3
        dirFile->createTimeMs = ms10;
    425e:	ldrb.w	r1, [sp, #23]
    4262:	ldrh.w	r2, [sp, #26]
    4266:	ldrh.w	r3, [sp, #24]
    426a:	strb	r1, [r4, #20]
    426c:	strh	r2, [r4, #8]
    426e:	strh	r3, [r4, #10]
    4270:	b.n	4164 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x31c>
    4272:	nop
    4274:	.word	0x1fff198c

00004278 <ExFatFile::open(ExFatFile*, char const*, int)>:
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    4278:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    427c:	mov	r6, r0
    427e:	sub	sp, #84	; 0x54
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    4280:	ldrb.w	r4, [r6, #49]	; 0x31
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    4284:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    4286:	movs	r0, #0
    4288:	strb.w	r0, [sp, #73]	; 0x49
    428c:	strb.w	r0, [sp, #74]	; 0x4a
    4290:	strb.w	r0, [sp, #75]	; 0x4b
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    4294:	cmp	r4, #0
    4296:	bne.n	4334 <ExFatFile::open(ExFatFile*, char const*, int)+0xbc>
    4298:	mov	r9, r3
    429a:	ldrb.w	r3, [r1, #49]	; 0x31
    429e:	tst.w	r3, #80	; 0x50
    42a2:	mov	r5, r1
    42a4:	beq.n	4334 <ExFatFile::open(ExFatFile*, char const*, int)+0xbc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    42a6:	ldrb	r3, [r2, #0]
    42a8:	cmp	r3, #47	; 0x2f
    42aa:	mov	r1, r2
    42ac:	beq.n	4316 <ExFatFile::open(ExFatFile*, char const*, int)+0x9e>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    42ae:	mov.w	r8, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    42b2:	add	r3, sp, #12
    42b4:	add	r2, sp, #16
    42b6:	mov	r0, r6
    42b8:	bl	3a54 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    42bc:	mov	r4, r0
    42be:	cmp	r0, #0
    42c0:	beq.n	4344 <ExFatFile::open(ExFatFile*, char const*, int)+0xcc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    42c2:	ldr	r3, [sp, #12]
    42c4:	ldrb	r3, [r3, #0]
    42c6:	cmp	r3, #0
    42c8:	beq.n	4352 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
    42ca:	ldrb.w	r3, [sp, #16]
    42ce:	ldr	r2, [sp, #20]
    42d0:	str.w	r8, [sp]
    42d4:	mov	r1, r5
    42d6:	mov	r0, r6
    42d8:	bl	3e48 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    42dc:	mov	r4, r0
    42de:	cmp	r0, #0
    42e0:	beq.n	436e <ExFatFile::open(ExFatFile*, char const*, int)+0xf6>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    42e2:	mov	r4, r6
    42e4:	add	r7, sp, #24
    42e6:	add.w	lr, r6, #48	; 0x30
    42ea:	ldr	r0, [r4, #0]
    42ec:	ldr	r1, [r4, #4]
    42ee:	ldr	r2, [r4, #8]
    42f0:	ldr	r3, [r4, #12]
    42f2:	mov	r5, r7
    42f4:	stmia	r5!, {r0, r1, r2, r3}
    42f6:	adds	r4, #16
    42f8:	cmp	r4, lr
    42fa:	mov	r7, r5
    42fc:	bne.n	42ea <ExFatFile::open(ExFatFile*, char const*, int)+0x72>
    42fe:	ldr	r0, [r4, #0]
    4300:	str	r0, [r5, #0]
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
    4302:	mov	r0, r6
    4304:	bl	4e90 <ExFatFile::sync()>
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    4308:	add	r5, sp, #24
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    430a:	strb.w	r8, [r6, #49]	; 0x31
  m_flags = 0;
    430e:	strb.w	r8, [r6, #51]	; 0x33
    4312:	ldr	r1, [sp, #12]
    4314:	b.n	42b2 <ExFatFile::open(ExFatFile*, char const*, int)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    4316:	adds	r1, #1
    4318:	str	r1, [sp, #12]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    431a:	ldrb	r3, [r1, #0]
    431c:	cmp	r3, #47	; 0x2f
    431e:	beq.n	4316 <ExFatFile::open(ExFatFile*, char const*, int)+0x9e>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    4320:	ldr	r1, [r5, #32]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
    4322:	cbz	r3, 437c <ExFatFile::open(ExFatFile*, char const*, int)+0x104>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    4324:	add	r0, sp, #24
    4326:	bl	3a24 <ExFatFile::openRoot(ExFatVolume*)>
    432a:	mov	r4, r0
    432c:	cbz	r0, 4386 <ExFatFile::open(ExFatFile*, char const*, int)+0x10e>
    432e:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    4330:	add	r5, sp, #24
    4332:	b.n	42ae <ExFatFile::open(ExFatFile*, char const*, int)+0x36>
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    4334:	movs	r0, #125	; 0x7d
    4336:	bl	3914 <dbgPrint(unsigned short)>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    433a:	movs	r4, #0
}
    433c:	mov	r0, r4
    433e:	add	sp, #84	; 0x54
    4340:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
    4344:	movs	r0, #143	; 0x8f
    4346:	bl	3914 <dbgPrint(unsigned short)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    434a:	mov	r0, r4
    434c:	add	sp, #84	; 0x54
    434e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4352:	ldrb.w	r3, [sp, #16]
    4356:	ldr	r2, [sp, #20]
    4358:	str.w	r9, [sp]
    435c:	mov	r1, r5
    435e:	mov	r0, r6
    4360:	bl	3e48 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
    4364:	mov	r4, r0
    4366:	mov	r0, r4
    4368:	add	sp, #84	; 0x54
    436a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
    436e:	movs	r0, #150	; 0x96
    4370:	bl	3914 <dbgPrint(unsigned short)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    4374:	mov	r0, r4
    4376:	add	sp, #84	; 0x54
    4378:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    437c:	mov	r0, r6
    437e:	bl	3a24 <ExFatFile::openRoot(ExFatVolume*)>
    4382:	mov	r4, r0
    4384:	b.n	433c <ExFatFile::open(ExFatFile*, char const*, int)+0xc4>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
      DBG_FAIL_MACRO;
    4386:	movs	r0, #136	; 0x88
    4388:	bl	3914 <dbgPrint(unsigned short)>
      goto fail;
    438c:	b.n	433c <ExFatFile::open(ExFatFile*, char const*, int)+0xc4>
    438e:	nop

00004390 <ExFatFile::open(ExFatVolume*, char const*, int)>:
bool ExFatFile::open(const ExChar_t* path, int oflag) {
  return open(ExFatVolume::cwv(), path, oflag);
}
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
    4390:	cbz	r1, 439a <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    4392:	add.w	r1, r1, #1088	; 0x440
    4396:	b.w	4278 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    439a:	mov	r0, r1
    439c:	bx	lr
    439e:	nop

000043a0 <ExFatFile::openNext(ExFatFile*, int)>:
    DBG_FAIL_MACRO;
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    43a0:	push	{r4, r5, lr}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    43a2:	ldrb.w	r3, [r0, #49]	; 0x31
    DBG_FAIL_MACRO;
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    43a6:	sub	sp, #12
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    43a8:	cbnz	r3, 43b4 <ExFatFile::openNext(ExFatFile*, int)+0x14>
    43aa:	ldrb.w	r5, [r1, #49]	; 0x31
    43ae:	tst.w	r5, #80	; 0x50
    43b2:	bne.n	43c0 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    DBG_FAIL_MACRO;
    43b4:	movs	r0, #176	; 0xb0
    43b6:	bl	3914 <dbgPrint(unsigned short)>
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    43ba:	movs	r0, #0
}
    43bc:	add	sp, #12
    43be:	pop	{r4, r5, pc}
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    43c0:	ldrd	r4, r5, [r1]
    43c4:	movs	r5, #0
    43c6:	and.w	r4, r4, #31
    43ca:	orrs	r4, r5
    43cc:	bne.n	43b4 <ExFatFile::openNext(ExFatFile*, int)+0x14>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);
    43ce:	str	r2, [sp, #0]
    43d0:	mov	r2, r3
    43d2:	bl	3e48 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>

 fail:
  return false;
}
    43d6:	add	sp, #12
    43d8:	pop	{r4, r5, pc}
    43da:	nop

000043dc <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    43dc:	push	{r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    43de:	movs	r1, #10
    43e0:	mov	r5, r0
    43e2:	ldr	r0, [pc, #40]	; (440c <dbgPrint(unsigned short)+0x30>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    43e4:	ldr	r4, [pc, #40]	; (4410 <dbgPrint(unsigned short)+0x34>)
    43e6:	bl	9480 <usb_serial_write>
    43ea:	movs	r1, #18
    43ec:	ldr	r0, [pc, #36]	; (4414 <dbgPrint(unsigned short)+0x38>)
    43ee:	bl	9480 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    43f2:	movs	r0, #46	; 0x2e
    43f4:	bl	9588 <usb_serial_putchar>
    43f8:	mov	r1, r5
    43fa:	mov	r0, r4
    43fc:	bl	aa68 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    4400:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    4402:	ldmia.w	sp!, {r3, r4, r5, lr}
    4406:	b.w	a99c <Print::println()>
    440a:	nop
    440c:	.word	0x0000fc70
    4410:	.word	0x1fff098c
    4414:	.word	0x0000fc8c

00004418 <FsCache::sync() [clone .part.2]>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    4418:	push	{r3, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    441a:	add.w	r2, r0, #12

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    441e:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    4420:	ldr	r0, [r0, #4]
    4422:	ldr	r1, [r4, #8]
    4424:	ldr	r3, [r0, #0]
    4426:	ldr	r3, [r3, #24]
    4428:	blx	r3
    442a:	mov	r5, r0
    442c:	cbz	r0, 443a <FsCache::sync() [clone .part.2]+0x22>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    442e:	ldrb	r3, [r4, #0]
    4430:	bic.w	r3, r3, #1
    4434:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    4436:	mov	r0, r5
    4438:	pop	{r3, r4, r5, pc}
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
      DBG_FAIL_MACRO;
    443a:	movs	r0, #64	; 0x40
    443c:	bl	43dc <dbgPrint(unsigned short)>
  }
  return true;

fail:
  return false;
}
    4440:	mov	r0, r5
    4442:	pop	{r3, r4, r5, pc}

00004444 <FsCache::invalidate()>:
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    4444:	movs	r2, #0
  m_sector = 0XFFFFFFFF;
    4446:	mov.w	r3, #4294967295
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    444a:	strb	r2, [r0, #0]
  m_sector = 0XFFFFFFFF;
    444c:	str	r3, [r0, #8]
    444e:	bx	lr

00004450 <FsCache::get(unsigned long, unsigned char)>:
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
    4450:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!m_blockDev) {
    4454:	ldr	r4, [r0, #4]
    4456:	cmp	r4, #0
    4458:	beq.n	44d0 <FsCache::get(unsigned long, unsigned char)+0x80>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    445a:	ldr	r3, [r0, #8]
    445c:	cmp	r3, r1
    445e:	mov	r6, r0
    4460:	mov	r8, r1
    4462:	mov	r7, r2
    4464:	beq.n	4488 <FsCache::get(unsigned long, unsigned char)+0x38>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    4466:	ldrb	r3, [r0, #0]
    4468:	lsls	r2, r3, #31
    446a:	bmi.n	4498 <FsCache::get(unsigned long, unsigned char)+0x48>
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    446c:	lsls	r3, r7, #30
    446e:	bpl.n	44ae <FsCache::get(unsigned long, unsigned char)+0x5e>
    4470:	add.w	r5, r6, #12
    4474:	movs	r3, #0
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    4476:	and.w	r7, r7, #1
    447a:	orrs	r7, r3
    447c:	strb	r7, [r6, #0]
    447e:	mov	r0, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    4480:	str.w	r8, [r6, #8]
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
}
    4484:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4488:	ldrsb.w	r3, [r0], #12
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    448c:	and.w	r7, r7, #1
    4490:	orrs	r7, r3
    4492:	strb	r7, [r6, #0]
  return m_cacheBuffer;

fail:
  return nullptr;
}
    4494:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4498:	bl	4418 <FsCache::sync() [clone .part.2]>
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
    449c:	mov	r4, r0
    449e:	cmp	r0, #0
    44a0:	bne.n	446c <FsCache::get(unsigned long, unsigned char)+0x1c>
      DBG_FAIL_MACRO;
    44a2:	movs	r0, #42	; 0x2a
    44a4:	bl	43dc <dbgPrint(unsigned short)>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
    44a8:	mov	r0, r4
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    44aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    44ae:	ldr	r0, [r6, #4]
    44b0:	ldr	r3, [r0, #0]
    44b2:	add.w	r5, r6, #12
    44b6:	ldr	r3, [r3, #8]
    44b8:	mov	r2, r5
    44ba:	mov	r1, r8
    44bc:	blx	r3
    44be:	mov	r4, r0
    44c0:	cmp	r0, #0
    44c2:	bne.n	4474 <FsCache::get(unsigned long, unsigned char)+0x24>
        DBG_FAIL_MACRO;
    44c4:	movs	r0, #47	; 0x2f
    44c6:	bl	43dc <dbgPrint(unsigned short)>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
    44ca:	mov	r0, r4
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
        DBG_FAIL_MACRO;
        goto fail;
    44cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    44d0:	movs	r0, #37	; 0x25
    44d2:	bl	43dc <dbgPrint(unsigned short)>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
    44d6:	mov	r0, r4
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
    44d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000044dc <FsCache::sync()>:
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    44dc:	ldrb	r3, [r0, #0]
    44de:	lsls	r3, r3, #31
    44e0:	bmi.n	44e6 <FsCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    44e2:	movs	r0, #1
    44e4:	bx	lr
    44e6:	b.w	4418 <FsCache::sync() [clone .part.2]>
    44ea:	nop

000044ec <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
 fail:
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    44ec:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    44f0:	mov	r8, r0
    44f2:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    44f4:	mov	fp, r1
    44f6:	cmp	r1, #0
    44f8:	beq.n	4584 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x98>
    44fa:	subs	r7, r1, #2
  if (start >= m_clusterCount) {
    44fc:	ldr.w	r3, [r8, #1064]	; 0x428
    4500:	cmp	r7, r3
    4502:	bcs.n	457c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x90>
    4504:	and.w	r5, r7, #7
    4508:	movs	r3, #1
    450a:	lsl.w	r5, r3, r5
    450e:	uxtb	r5, r5
    4510:	ubfx	sl, r7, #3, #9
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
    4514:	mov	r6, r7
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    4516:	mov	r4, r7
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    4518:	ldr.w	r1, [r8, #1060]	; 0x424
    451c:	movs	r2, #0
    451e:	add.w	r1, r1, r4, lsr #12
    4522:	mov	r0, r8
    4524:	bl	4450 <FsCache::get(unsigned long, unsigned char)>
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    4528:	cbz	r0, 455c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x70>
    452a:	ldrb.w	r1, [r0, sl]
    452e:	b.n	4546 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5a>
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    4530:	cmp	r2, r9
    4532:	beq.n	458a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9e>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    4534:	cmp	r7, r4
    4536:	beq.n	455a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    4538:	ldr.w	r2, [r8, #1064]	; 0x428
    453c:	cmp	r4, r2
    453e:	bcs.n	4570 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x84>
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    4540:	ands.w	r5, r3, #255	; 0xff
    4544:	beq.n	4560 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x74>
        endAlloc++;
    4546:	adds	r4, #1
        if (!(mask & cache[i])) {
    4548:	tst	r5, r1
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    454a:	mov.w	r3, r5, lsl #1
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    454e:	sub.w	r2, r4, r6
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    4552:	beq.n	4530 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x44>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    4554:	cmp	r7, r4
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    4556:	mov	r6, r4
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    4558:	bne.n	4538 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4c>
          return 1;
    455a:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    455c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4560:	add.w	sl, sl, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    4564:	cmp.w	sl, #512	; 0x200
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    4568:	mov.w	r5, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    456c:	bne.n	452a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3e>
    456e:	b.n	4574 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
    4570:	movs	r6, #0
    4572:	mov	r4, r6
          break;
        }
      }
      mask = 1;
    }
    i = 0;
    4574:	mov.w	sl, #0
    4578:	movs	r5, #1
    457a:	b.n	4518 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
    457c:	movs	r7, #0
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
    457e:	mov	sl, r7
    4580:	movs	r5, #1
    4582:	b.n	4514 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    4584:	ldr.w	r7, [r0, #1048]	; 0x418
    4588:	b.n	44fc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
            if (cluster == 0 && count == 1) {
    458a:	cmp.w	fp, #0
    458e:	bne.n	459a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xae>
    4590:	cmp.w	r9, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    4594:	it	eq
    4596:	streq.w	r6, [r8, #1048]	; 0x418
            }
            return bgnAlloc + 2;
    459a:	adds	r0, r6, #2
    459c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000045a0 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    45a0:	push	{r3, r4, r5, r6, r7, lr}
    45a2:	mov	r4, r0
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    45a4:	movs	r3, #0
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
  m_sector = 0XFFFFFFFF;
    45a6:	mov.w	r6, #4294967295
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    45aa:	add.w	r7, r0, #524	; 0x20c
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
  m_blockDev = dev;
    45ae:	str.w	r1, [r0, #1080]	; 0x438
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this partition.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    45b2:	str	r1, [r0, #4]
    45b4:	str.w	r1, [r0, #528]	; 0x210

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    45b8:	mov	r5, r2
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    45ba:	mov	r0, r7
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    45bc:	strb.w	r3, [r4, #1084]	; 0x43c
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    45c0:	strb	r3, [r4, #0]
    45c2:	strb.w	r3, [r4, #524]	; 0x20c
  m_sector = 0XFFFFFFFF;
    45c6:	str	r6, [r4, #8]
    45c8:	str.w	r6, [r4, #532]	; 0x214
    45cc:	mov	r2, r3
    45ce:	mov	r1, r3
    45d0:	bl	4450 <FsCache::get(unsigned long, unsigned char)>

  m_fatType = 0;
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    45d4:	cmp	r5, #4
    45d6:	bhi.n	4642 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xa2>
    45d8:	mov	r6, r0
    45da:	cbz	r0, 4642 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xa2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    45dc:	cbnz	r5, 4600 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x60>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    45de:	movs	r2, #5
    45e0:	ldr	r1, [pc, #200]	; (46ac <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x10c>)
    45e2:	adds	r0, r6, #3
    45e4:	bl	c71c <strncmp>
    45e8:	mov	r7, r0
    45ea:	cmp	r0, #0
    45ec:	bne.n	46a0 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x100>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    45ee:	ldrb.w	r3, [r6, #108]	; 0x6c
    45f2:	cmp	r3, #9
    45f4:	beq.n	464c <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xac>
    DBG_FAIL_MACRO;
    45f6:	movs	r0, #112	; 0x70
    45f8:	bl	43dc <dbgPrint(unsigned short)>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    45fc:	mov	r0, r7
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
    45fe:	pop	{r3, r4, r5, r6, r7, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    4600:	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    4602:	add.w	r3, r0, r3, lsl #4
    4606:	ldrb.w	r2, [r3, #446]	; 0x1be
    460a:	ands.w	r2, r2, #127	; 0x7f
    460e:	beq.n	461a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x7a>
      DBG_FAIL_MACRO;
    4610:	movs	r0, #95	; 0x5f
    4612:	bl	43dc <dbgPrint(unsigned short)>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    4616:	movs	r0, #0
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    4618:	pop	{r3, r4, r5, r6, r7, pc}
    goto fail;
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    461a:	ldrb.w	r3, [r3, #450]	; 0x1c2
    461e:	cmp	r3, #0
    4620:	beq.n	4610 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x70>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    4622:	add.w	r5, r0, r5, lsl #4
    4626:	mov	r0, r7
    4628:	ldr.w	r5, [r5, #438]	; 0x1b6
    462c:	mov	r1, r5
    462e:	bl	4450 <FsCache::get(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCacheGet(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
    4632:	mov	r6, r0
    4634:	cmp	r0, #0
    4636:	bne.n	45de <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x3e>
      DBG_FAIL_MACRO;
    4638:	movs	r0, #101	; 0x65
    463a:	bl	43dc <dbgPrint(unsigned short)>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    463e:	mov	r0, r6
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCacheGet(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    4640:	pop	{r3, r4, r5, r6, r7, pc}
  m_fatType = 0;
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    DBG_FAIL_MACRO;
    4642:	movs	r0, #88	; 0x58
    4644:	bl	43dc <dbgPrint(unsigned short)>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    4648:	movs	r0, #0
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    DBG_FAIL_MACRO;
    goto fail;
    464a:	pop	{r3, r4, r5, r6, r7, pc}
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    464c:	ldr	r3, [r6, #80]	; 0x50
    464e:	add	r3, r5
    4650:	str.w	r3, [r4, #1052]	; 0x41c
    4654:	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    4656:	str.w	r3, [r4, #1056]	; 0x420
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    465a:	ldr	r3, [r6, #88]	; 0x58
    465c:	add	r5, r3
    465e:	str.w	r5, [r4, #1060]	; 0x424
    4662:	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    4664:	str.w	r3, [r4, #1064]	; 0x428
    4668:	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    466a:	str.w	r3, [r4, #1068]	; 0x42c
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    466e:	ldrb.w	r3, [r6, #109]	; 0x6d
    4672:	strb.w	r3, [r4, #1085]	; 0x43d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4676:	movs	r6, #1
    4678:	adds	r3, #9
    467a:	lsl.w	r3, r6, r3
  m_clusterMask = m_bytesPerCluster - 1;
    467e:	subs	r2, r3, #1
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    4680:	str.w	r0, [r4, #1048]	; 0x418
  bitmapFind(0, 1);
    4684:	mov	r1, r0
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4686:	str.w	r3, [r4, #1076]	; 0x434
  m_clusterMask = m_bytesPerCluster - 1;
    468a:	str.w	r2, [r4, #1072]	; 0x430
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    468e:	mov	r0, r4
    4690:	mov	r2, r6
    4692:	bl	44ec <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    4696:	movs	r3, #64	; 0x40
    4698:	strb.w	r3, [r4, #1084]	; 0x43c
  return true;
    469c:	mov	r0, r6

 fail:
  return false;
}
    469e:	pop	{r3, r4, r5, r6, r7, pc}
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    DBG_FAIL_MACRO;
    46a0:	movs	r0, #107	; 0x6b
    46a2:	bl	43dc <dbgPrint(unsigned short)>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    46a6:	movs	r0, #0
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    DBG_FAIL_MACRO;
    goto fail;
    46a8:	pop	{r3, r4, r5, r6, r7, pc}
    46aa:	nop
    46ac:	.word	0x0000fca0

000046b0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    46b0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
    46b4:	subs	r1, #2
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    46b6:	mov	r9, r0
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    46b8:	ldr.w	r0, [r0, #1064]	; 0x428
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    46bc:	mov	r5, r2
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    46be:	adds	r2, r1, r2
    46c0:	cmp	r2, r0
    46c2:	bhi.n	4760 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xb0>
    46c4:	mov	sl, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    46c6:	ldr.w	r3, [r9, #1048]	; 0x418
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    46ca:	cmp.w	sl, #0
    46ce:	bne.n	473a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8a>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    46d0:	cmp	r1, r3
      m_bitmapStart = start;
    46d2:	it	cc
    46d4:	strcc.w	r1, [r9, #1048]	; 0x418
    }
  }
  mask = 1 << (start & 7);
    46d8:	and.w	r4, r1, #7
    46dc:	movs	r2, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    46de:	ldr.w	r3, [r9, #1060]	; 0x424
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    46e2:	lsl.w	r4, r2, r4
    46e6:	uxtb	r4, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    46e8:	add.w	r8, r3, r1, lsr #12
  i = (start >> 3) & m_sectorMask;
    46ec:	ubfx	fp, r1, #3, #9
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    46f0:	movs	r2, #1
    46f2:	mov	r1, r8
    46f4:	mov	r0, r9
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    46f6:	add	r8, r2
    46f8:	bl	4450 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    46fc:	mov	r6, r0
    46fe:	cbz	r0, 476c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xbc>
    4700:	add.w	r7, r0, fp
    4704:	add.w	r3, r0, #512	; 0x200
    4708:	ldrb.w	r2, [r7], #1
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    470c:	tst	r2, r4
    470e:	ite	ne
    4710:	movne	r6, #1
    4712:	moveq	r6, #0
    4714:	cmp	r6, sl
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    4716:	eor.w	r2, r2, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    471a:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    471e:	beq.n	474e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x9e>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
    4720:	subs	r5, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    4722:	strb.w	r2, [r7, #-1]
        if (--count == 0) {
    4726:	beq.n	475a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xaa>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    4728:	ands.w	r4, r4, #255	; 0xff
    472c:	bne.n	470c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x5c>
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    472e:	cmp	r3, r7
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    4730:	mov	fp, r4
    4732:	mov.w	r4, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    4736:	bne.n	4708 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x58>
    4738:	b.n	46f0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x40>
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    473a:	cmp	r1, r3
    473c:	bhi.n	46d8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
    473e:	cmp	r2, r3
    4740:	bls.n	46d8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    4742:	cmp	r2, r0
    4744:	it	cs
    4746:	movcs	r2, #0
    4748:	str.w	r2, [r9, #1048]	; 0x418
    474c:	b.n	46d8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
    474e:	movs	r0, #216	; 0xd8
    4750:	bl	43dc <dbgPrint(unsigned short)>
    }
    i = 0;
  }

 fail:
  return false;
    4754:	movs	r0, #0
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
    4756:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        }
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
    475a:	movs	r0, #1
    i = 0;
  }

 fail:
  return false;
}
    475c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    4760:	movs	r0, #191	; 0xbf
    4762:	bl	43dc <dbgPrint(unsigned short)>
    }
    i = 0;
  }

 fail:
  return false;
    4766:	movs	r0, #0
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
    4768:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
    476c:	movs	r0, #210	; 0xd2
    476e:	bl	43dc <dbgPrint(unsigned short)>
    }
    i = 0;
  }

 fail:
  return false;
    4772:	mov	r0, r6
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    4774:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00004778 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
    n++;
  } while (status);
  return n;
}
//-----------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    4778:	push	{r3, r4, r5, r6, r7, lr}
    477a:	mov	r6, r1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    477c:	ldmia.w	r6, {r3, r5}
    4780:	ldr.w	r1, [r0, #1072]	; 0x430
    4784:	ldr.w	r4, [r0, #1060]	; 0x424
    4788:	ldrb.w	r7, [r0, #1085]	; 0x43d
    478c:	ands	r1, r5
    478e:	subs	r3, #2
    4790:	add.w	r1, r4, r1, lsr #9
    4794:	lsls	r3, r7
    4796:	add	r1, r3
    4798:	add.w	r0, r0, #524	; 0x20c
    479c:	bl	4450 <FsCache::get(unsigned long, unsigned char)>
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    47a0:	cbz	r0, 47aa <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x32>
    47a2:	ldr	r3, [r6, #4]
    47a4:	ubfx	r3, r3, #0, #9
    47a8:	add	r0, r3
}
    47aa:	pop	{r3, r4, r5, r6, r7, pc}

000047ac <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
    }
  }
  return 1;
}
//-----------------------------------------------------------------------------
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    47ac:	push	{r3, r4, r5, lr}
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    47ae:	ldr.w	r3, [r0, #1064]	; 0x428
    47b2:	adds	r3, #1
    47b4:	cmp	r3, r1
    47b6:	bcs.n	47c4 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x18>
    DBG_FAIL_MACRO;
    47b8:	mov.w	r0, #276	; 0x114
    47bc:	bl	43dc <dbgPrint(unsigned short)>
    return -1;
    47c0:	movs	r0, #255	; 0xff
    47c2:	pop	{r3, r4, r5, pc}
    47c4:	mov	r4, r1
    47c6:	ldr.w	r1, [r0, #1052]	; 0x41c
    47ca:	mov	r5, r2
    47cc:	add.w	r0, r0, #524	; 0x20c
    47d0:	add.w	r1, r1, r4, lsr #7
    47d4:	movs	r2, #0
    47d6:	bl	4450 <FsCache::get(unsigned long, unsigned char)>
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    47da:	cbz	r0, 47ee <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x42>
    47dc:	lsls	r4, r4, #2
    47de:	ubfx	r4, r4, #0, #9
    47e2:	ldr	r3, [r0, r4]
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    47e4:	adds	r2, r3, #1
    47e6:	beq.n	47f2 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x46>
    return 0;
  }
  *value = next;
    47e8:	str	r3, [r5, #0]
  return 1;
    47ea:	movs	r0, #1
    47ec:	pop	{r3, r4, r5, pc}
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
    47ee:	movs	r0, #255	; 0xff
    47f0:	pop	{r3, r4, r5, pc}
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    return 0;
    47f2:	movs	r0, #0
  }
  *value = next;
  return 1;
}
    47f4:	pop	{r3, r4, r5, pc}
    47f6:	nop

000047f8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    47f8:	push	{r4, r5, r6, lr}
    47fa:	mov	r5, r1
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    47fc:	ldr	r1, [r1, #4]
    47fe:	ldr.w	r3, [r0, #1072]	; 0x430
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    4802:	mov	r6, r0
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
    4804:	adds	r0, r1, r2
    4806:	str	r0, [r5, #4]
  tmp >>= bytesPerClusterShift();
    4808:	ldrb.w	r4, [r6, #1085]	; 0x43d
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    480c:	ands	r3, r1
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    480e:	adds	r4, #9
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4810:	add	r2, r3
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    4812:	uxtb	r4, r4
    4814:	lsr.w	r4, r2, r4
  while (tmp--) {
    4818:	cbz	r4, 482a <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
    if (pos->isContiguous) {
    481a:	ldrb	r3, [r5, #8]
    481c:	cbz	r3, 482e <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x36>
      pos->cluster++;
    481e:	ldr	r3, [r5, #0]
    4820:	adds	r3, #1
    4822:	str	r3, [r5, #0]
    4824:	subs	r4, #1
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    4826:	cmp	r4, #0
    4828:	bne.n	481a <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x22>
      if (status != 1) {
        return status;
      }
    }
  }
  return 1;
    482a:	movs	r0, #1
}
    482c:	pop	{r4, r5, r6, pc}
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    482e:	mov	r2, r5
    4830:	ldr	r1, [r5, #0]
    4832:	mov	r0, r6
    4834:	bl	47ac <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    4838:	sxtb	r0, r0
      if (status != 1) {
    483a:	cmp	r0, #1
    483c:	beq.n	4824 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
    483e:	pop	{r4, r5, r6, pc}

00004840 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4840:	cmp	r1, #1
  }
  *value = next;
  return 1;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    4842:	push	{r4, r5, r6, lr}
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4844:	bls.n	4852 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
    4846:	ldr.w	r3, [r0, #1064]	; 0x428
    484a:	adds	r3, #1
    484c:	cmp	r1, r3
    484e:	mov	r4, r1
    4850:	bls.n	485e <ExFatPartition::fatPut(unsigned long, unsigned long)+0x1e>
    DBG_FAIL_MACRO;
    4852:	mov.w	r0, #298	; 0x12a
    4856:	bl	43dc <dbgPrint(unsigned short)>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    485a:	movs	r0, #0
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    goto fail;
    485c:	pop	{r4, r5, r6, pc}
    485e:	ldr.w	r1, [r0, #1052]	; 0x41c
    4862:	mov	r5, r2
    4864:	add.w	r0, r0, #524	; 0x20c
    4868:	add.w	r1, r1, r4, lsr #7
    486c:	movs	r2, #1
    486e:	bl	4450 <FsCache::get(unsigned long, unsigned char)>
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCacheGet(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    4872:	mov	r6, r0
    4874:	cbz	r0, 4882 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x42>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    4876:	lsls	r4, r4, #2
    4878:	ubfx	r4, r4, #0, #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;
    487c:	movs	r0, #1
    487e:	str	r5, [r6, r4]

 fail:
  return false;
}
    4880:	pop	{r4, r5, r6, pc}
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCacheGet(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    DBG_FAIL_MACRO;
    4882:	mov.w	r0, #304	; 0x130
    4886:	bl	43dc <dbgPrint(unsigned short)>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    488a:	mov	r0, r6
    488c:	pop	{r4, r5, r6, pc}
    488e:	nop

00004890 <ExFatPartition::freeChain(unsigned long)>:
}
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    4890:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4894:	mov	r4, r1
    4896:	sub	sp, #12
    4898:	mov	r6, r0
  uint32_t next;
  uint32_t start = cluster;
    489a:	mov	r8, r1
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    489c:	mov	r1, r4
    489e:	add	r2, sp, #4
    48a0:	mov	r0, r6
    48a2:	bl	47ac <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    48a6:	movs	r2, #0
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    48a8:	sxtb	r5, r0
    if (status < 0) {
    48aa:	cmp	r5, r2
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    48ac:	mov	r1, r4
    48ae:	mov	r0, r6
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    48b0:	add.w	r4, r4, #1
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    if (status < 0) {
    48b4:	blt.n	4908 <ExFatPartition::freeChain(unsigned long)+0x78>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    48b6:	bl	4840 <ExFatPartition::fatPut(unsigned long, unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    48ba:	rsb	r2, r8, r4
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    48be:	mov	r9, r0
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    48c0:	mov	r1, r8
    48c2:	movs	r3, #0
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    48c4:	cbz	r0, 491c <ExFatPartition::freeChain(unsigned long)+0x8c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    48c6:	ldr	r7, [sp, #4]
    48c8:	cmp	r4, r7
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    48ca:	mov	r0, r6
    }
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    48cc:	bne.n	48f6 <ExFatPartition::freeChain(unsigned long)+0x66>
    48ce:	cmp	r5, #0
    48d0:	bne.n	489c <ExFatPartition::freeChain(unsigned long)+0xc>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    48d2:	mov	r3, r5
    48d4:	rsb	r2, r8, r4
    48d8:	mov	r1, r8
    48da:	mov	r0, r6
    48dc:	bl	46b0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    48e0:	cbnz	r0, 48ee <ExFatPartition::freeChain(unsigned long)+0x5e>
        DBG_FAIL_MACRO;
    48e2:	mov.w	r0, #330	; 0x14a
    48e6:	bl	43dc <dbgPrint(unsigned short)>
  } while (status);

  return true;

 fail:
  return false;
    48ea:	mov.w	r9, #0
}
    48ee:	mov	r0, r9
    48f0:	add	sp, #12
    48f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    48f6:	bl	46b0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    48fa:	cmp	r0, #0
    48fc:	beq.n	48e2 <ExFatPartition::freeChain(unsigned long)+0x52>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    48fe:	ldr	r4, [sp, #4]
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    4900:	cmp	r5, #0
    4902:	beq.n	48ee <ExFatPartition::freeChain(unsigned long)+0x5e>
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    4904:	mov	r8, r4
    4906:	b.n	489c <ExFatPartition::freeChain(unsigned long)+0xc>
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
    4908:	movw	r0, #321	; 0x141
    490c:	bl	43dc <dbgPrint(unsigned short)>
  } while (status);

  return true;

 fail:
  return false;
    4910:	mov.w	r9, #0
}
    4914:	mov	r0, r9
    4916:	add	sp, #12
    4918:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
    491c:	movw	r0, #325	; 0x145
    4920:	bl	43dc <dbgPrint(unsigned short)>

  return true;

 fail:
  return false;
}
    4924:	mov	r0, r9
    4926:	add	sp, #12
    4928:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000492c <ExFatPartition::freeClusterCount()>:
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    492c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    4930:	movs	r4, #0
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
    4932:	ldr.w	r6, [r0, #1060]	; 0x424

 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    4936:	mov	r8, r0
    4938:	add.w	r7, r0, #524	; 0x20c
  uint32_t nc = 0;
    493c:	mov	r5, r4
    493e:	mov	r1, r6
    4940:	movs	r2, #0
    4942:	mov	r0, r7
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
  uint8_t* cache;

  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    4944:	adds	r6, #1
    4946:	bl	4450 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    494a:	cbz	r0, 499a <ExFatPartition::freeClusterCount()+0x6e>
    494c:	add.w	lr, r0, #4294967295
    4950:	ldr.w	ip, [r8, #1064]	; 0x428
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    4954:	ldrb.w	r0, [lr, #1]!
    4958:	cmp	r0, #255	; 0xff
    495a:	add.w	r9, r5, #4096	; 0x1000
    495e:	beq.n	4988 <ExFatPartition::freeClusterCount()+0x5c>
        usedCount+= 8;
      } else if (cache[i]) {
    4960:	cbz	r0, 4976 <ExFatPartition::freeClusterCount()+0x4a>
    4962:	movs	r2, #8
    4964:	movs	r3, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
          if ((mask & cache[i])) {
    4966:	tst	r0, r3
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    4968:	mov.w	r1, r3, lsl #1
          if ((mask & cache[i])) {
            usedCount++;
    496c:	it	ne
    496e:	addne	r4, #1
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    4970:	subs	r2, #1
    4972:	uxtb	r3, r1
    4974:	bne.n	4966 <ExFatPartition::freeClusterCount()+0x3a>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    4976:	adds	r5, #8
      if (nc >= m_clusterCount) {
    4978:	cmp	ip, r5
    497a:	bls.n	4992 <ExFatPartition::freeClusterCount()+0x66>
  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    497c:	cmp	r5, r9
    497e:	beq.n	493e <ExFatPartition::freeClusterCount()+0x12>
      if (cache[i] == 0XFF) {
    4980:	ldrb.w	r0, [lr, #1]!
    4984:	cmp	r0, #255	; 0xff
    4986:	bne.n	4960 <ExFatPartition::freeClusterCount()+0x34>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    4988:	adds	r5, #8
      if (nc >= m_clusterCount) {
    498a:	cmp	ip, r5
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
    498c:	add.w	r4, r4, #8
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    4990:	bhi.n	497c <ExFatPartition::freeClusterCount()+0x50>
        return m_clusterCount - usedCount;
    4992:	rsb	r0, r4, ip
    4996:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      }
    }
  }
}
    499a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    499e:	nop

000049a0 <ExFatPartition::rootLength()>:
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    49a0:	push	{r4, r5, r6, lr}
    49a2:	sub	sp, #8
    49a4:	add	r6, sp, #8
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    49a6:	ldr.w	r1, [r0, #1068]	; 0x42c
    49aa:	str.w	r1, [r6, #-4]!
      }
    }
  }
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    49ae:	mov	r5, r0
 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
    49b0:	movs	r4, #0
    49b2:	b.n	49bc <ExFatPartition::rootLength()+0x1c>
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    49b4:	add.w	r4, r4, #1
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    49b8:	beq.n	49cc <ExFatPartition::rootLength()+0x2c>
    49ba:	ldr	r1, [sp, #4]
    status = fatGet(cluster, & cluster);
    49bc:	mov	r2, r6
    49be:	mov	r0, r5
    49c0:	bl	47ac <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    49c4:	sxtb	r0, r0
    if (status < 0) return 0;
    49c6:	cmp	r0, #0
    49c8:	bge.n	49b4 <ExFatPartition::rootLength()+0x14>
    49ca:	movs	r4, #0
  }
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
  uint32_t nc = chainSize(m_rootDirectoryCluster);
  return nc << bytesPerClusterShift();
    49cc:	ldrb.w	r0, [r5, #1085]	; 0x43d
    49d0:	adds	r0, #9
    49d2:	uxtb	r0, r0
}
    49d4:	lsl.w	r0, r4, r0
    49d8:	add	sp, #8
    49da:	pop	{r4, r5, r6, pc}

000049dc <exFatHashName(char const*, unsigned int, unsigned short)>:
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    49dc:	cbz	r1, 4a12 <exFatHashName(char const*, unsigned int, unsigned short)+0x36>
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
    49de:	push	{r4}
    49e0:	add	r1, r0
    49e2:	lsls	r3, r2, #15
    49e4:	orr.w	r3, r3, r2, lsr #1
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    49e8:	ldrb.w	r2, [r0], #1
    if ('a' <= c && c <= 'z') {
    49ec:	sub.w	r4, r2, #97	; 0x61
    49f0:	cmp	r4, #25
      c -= 'a' - 'A';
    49f2:	itt	ls
    49f4:	subls	r2, #32
    49f6:	uxtbls	r2, r2
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    49f8:	uxtah	r2, r2, r3
    49fc:	uxth	r2, r2
    49fe:	lsls	r3, r2, #15
    4a00:	orr.w	r2, r3, r2, lsr #1
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    4a04:	cmp	r1, r0
    4a06:	uxth	r2, r2
    4a08:	bne.n	49e2 <exFatHashName(char const*, unsigned int, unsigned short)+0x6>
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    hash = ((hash << 15) | (hash >> 1));
  }
  return hash;
}
    4a0a:	mov	r0, r2
    4a0c:	ldr.w	r4, [sp], #4
    4a10:	bx	lr
    4a12:	mov	r0, r2
    4a14:	bx	lr
    4a16:	nop

00004a18 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>:
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    4a18:	cbz	r3, 4a6c <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x54>
  }
  return hash;
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
    4a1a:	push	{r4, r5, r6}
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    4a1c:	ldrh	r4, [r0, #2]
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4a1e:	cmp	r4, #126	; 0x7e
    4a20:	bhi.n	4a60 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
    4a22:	add	r3, r2
    4a24:	adds	r5, r1, r3
    4a26:	add	r2, r1
    4a28:	adds	r0, #2
    4a2a:	ldrb.w	r3, [r2], #1
    4a2e:	uxtb	r4, r4
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    4a30:	sub.w	r1, r3, #97	; 0x61
    4a34:	cmp	r1, #25
    4a36:	sub.w	r1, r4, #97	; 0x61
    4a3a:	ite	ls
    4a3c:	movls	r6, #32
    4a3e:	movhi	r6, #0
    4a40:	cmp	r1, #25
    4a42:	ite	ls
    4a44:	movls	r1, #32
    4a46:	movhi	r1, #0
    4a48:	subs	r3, r3, r6
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4a4a:	subs	r4, r4, r1
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    4a4c:	uxtb	r3, r3
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4a4e:	uxtb	r4, r4
    4a50:	cmp	r4, r3
    4a52:	bne.n	4a60 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    4a54:	cmp	r2, r5
    4a56:	beq.n	4a66 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4e>
    4a58:	ldrh.w	r4, [r0, #2]!
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4a5c:	cmp	r4, #126	; 0x7e
    4a5e:	bls.n	4a2a <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x12>
      return false;
    4a60:	movs	r0, #0
    }
  }
  return true;
}
    4a62:	pop	{r4, r5, r6}
    4a64:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    4a66:	movs	r0, #1
}
    4a68:	pop	{r4, r5, r6}
    4a6a:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    4a6c:	movs	r0, #1
}
    4a6e:	bx	lr

00004a70 <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    4a70:	push	{r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4a72:	movs	r1, #10
    4a74:	mov	r5, r0
    4a76:	ldr	r0, [pc, #40]	; (4aa0 <dbgPrint(unsigned short)+0x30>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    4a78:	ldr	r4, [pc, #40]	; (4aa4 <dbgPrint(unsigned short)+0x34>)
    4a7a:	bl	9480 <usb_serial_write>
    4a7e:	movs	r1, #18
    4a80:	ldr	r0, [pc, #36]	; (4aa8 <dbgPrint(unsigned short)+0x38>)
    4a82:	bl	9480 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    4a86:	movs	r0, #46	; 0x2e
    4a88:	bl	9588 <usb_serial_putchar>
    4a8c:	mov	r1, r5
    4a8e:	mov	r0, r4
    4a90:	bl	aa68 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    4a94:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    4a96:	ldmia.w	sp!, {r3, r4, r5, lr}
    4a9a:	b.w	a99c <Print::println()>
    4a9e:	nop
    4aa0:	.word	0x0000fc70
    4aa4:	.word	0x1fff098c
    4aa8:	.word	0x0000fca8

00004aac <ExFatFile::addCluster()>:
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    4aac:	ldr	r1, [r0, #24]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    4aae:	push	{r3, r4, r5, r6, r7, lr}
    4ab0:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    4ab2:	ldr	r0, [r0, #32]
    4ab4:	cbz	r1, 4ab8 <ExFatFile::addCluster()+0xc>
    4ab6:	adds	r1, #1
    4ab8:	movs	r2, #1
    4aba:	bl	44ec <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    4abe:	cmp	r0, #1
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    4ac0:	mov	r6, r0
  if (find < 2) {
    4ac2:	bls.n	4b48 <ExFatFile::addCluster()+0x9c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    4ac4:	movs	r3, #1
    4ac6:	mov	r1, r0
    4ac8:	mov	r2, r3
    4aca:	ldr	r0, [r4, #32]
    4acc:	bl	46b0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4ad0:	mov	r7, r0
    4ad2:	cmp	r0, #0
    4ad4:	beq.n	4b54 <ExFatFile::addCluster()+0xa8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    4ad6:	ldr	r0, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    4ad8:	ldrb.w	r3, [r4, #51]	; 0x33
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    4adc:	cbnz	r0, 4aec <ExFatFile::addCluster()+0x40>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    4ade:	orr.w	r3, r3, #64	; 0x40
    4ae2:	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    4ae6:	str	r6, [r4, #24]
  return true;

 fail:
  return false;
}
    4ae8:	mov	r0, r7
    4aea:	pop	{r3, r4, r5, r6, r7, pc}
  }
  if (m_curCluster == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    4aec:	lsls	r2, r3, #25
    4aee:	bpl.n	4b1a <ExFatFile::addCluster()+0x6e>
    if (find == (m_curCluster + 1)) {
    4af0:	adds	r2, r0, #1
    4af2:	cmp	r6, r2
    4af4:	beq.n	4ae6 <ExFatFile::addCluster()+0x3a>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    4af6:	bic.w	r2, r3, #64	; 0x40
    4afa:	strb.w	r2, [r4, #51]	; 0x33

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4afe:	ldr	r3, [r4, #28]
    4b00:	b.n	4b10 <ExFatFile::addCluster()+0x64>
      if (!m_vol->fatPut(c, c + 1)) {
    4b02:	ldr	r0, [r4, #32]
    4b04:	bl	4840 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4b08:	mov	r3, r0
    4b0a:	cbz	r0, 4b5e <ExFatFile::addCluster()+0xb2>
    4b0c:	ldr	r0, [r4, #24]
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4b0e:	mov	r3, r5
      if (!m_vol->fatPut(c, c + 1)) {
    4b10:	adds	r5, r3, #1
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4b12:	cmp	r3, r0
      if (!m_vol->fatPut(c, c + 1)) {
    4b14:	mov	r1, r3
    4b16:	mov	r2, r5
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4b18:	bcc.n	4b02 <ExFatFile::addCluster()+0x56>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    4b1a:	mov.w	r2, #4294967295
    4b1e:	mov	r1, r6
    4b20:	ldr	r0, [r4, #32]
    4b22:	bl	4840 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4b26:	mov	r3, r0
    4b28:	cbz	r0, 4b68 <ExFatFile::addCluster()+0xbc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    4b2a:	ldr	r1, [r4, #24]
    4b2c:	cmp	r1, #0
    4b2e:	beq.n	4ae6 <ExFatFile::addCluster()+0x3a>
    if (!m_vol->fatPut(m_curCluster, find)) {
    4b30:	mov	r2, r6
    4b32:	ldr	r0, [r4, #32]
    4b34:	bl	4840 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4b38:	mov	r3, r0
    4b3a:	cmp	r0, #0
    4b3c:	bne.n	4ae6 <ExFatFile::addCluster()+0x3a>
      DBG_FAIL_MACRO;
    4b3e:	movs	r0, #110	; 0x6e
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    4b40:	mov	r7, r3
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    if (!m_vol->fatPut(m_curCluster, find)) {
      DBG_FAIL_MACRO;
    4b42:	bl	4a70 <dbgPrint(unsigned short)>
      goto fail;
    4b46:	b.n	4ae8 <ExFatFile::addCluster()+0x3c>
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
  if (find < 2) {
    DBG_FAIL_MACRO;
    4b48:	movs	r0, #77	; 0x4d
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    4b4a:	movs	r7, #0
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
  if (find < 2) {
    DBG_FAIL_MACRO;
    4b4c:	bl	4a70 <dbgPrint(unsigned short)>
  m_curCluster = find;
  return true;

 fail:
  return false;
}
    4b50:	mov	r0, r7
    4b52:	pop	{r3, r4, r5, r6, r7, pc}
  if (find < 2) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    4b54:	movs	r0, #81	; 0x51
    4b56:	bl	4a70 <dbgPrint(unsigned short)>
  m_curCluster = find;
  return true;

 fail:
  return false;
}
    4b5a:	mov	r0, r7
    4b5c:	pop	{r3, r4, r5, r6, r7, pc}
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
      if (!m_vol->fatPut(c, c + 1)) {
        DBG_FAIL_MACRO;
    4b5e:	movs	r0, #97	; 0x61
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    4b60:	mov	r7, r3
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
      if (!m_vol->fatPut(c, c + 1)) {
        DBG_FAIL_MACRO;
    4b62:	bl	4a70 <dbgPrint(unsigned short)>
        goto fail;
    4b66:	b.n	4ae8 <ExFatFile::addCluster()+0x3c>
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    DBG_FAIL_MACRO;
    4b68:	movs	r0, #104	; 0x68
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    4b6a:	mov	r7, r3
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    DBG_FAIL_MACRO;
    4b6c:	bl	4a70 <dbgPrint(unsigned short)>
    goto fail;
    4b70:	b.n	4ae8 <ExFatFile::addCluster()+0x3c>
    4b72:	nop

00004b74 <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    4b74:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirPos_t pos = m_dirPos;
    4b78:	add.w	r3, r0, #36	; 0x24

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    4b7c:	mov	r5, r0
  DirPos_t pos = m_dirPos;
    4b7e:	ldmia.w	r3, {r0, r1, r2}
    4b82:	ldrb.w	r7, [r5, #51]	; 0x33

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    4b86:	sub	sp, #20
  DirPos_t pos = m_dirPos;
    4b88:	add	r6, sp, #4
  uint8_t* cache;
  if (!isWritable()) {
    4b8a:	and.w	r4, r7, #2
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  DirPos_t pos = m_dirPos;
    4b8e:	stmia.w	r6, {r0, r1, r2}
  uint8_t* cache;
  if (!isWritable()) {
    4b92:	cmp	r4, #0
    4b94:	beq.n	4c70 <ExFatFile::remove()+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    4b96:	ldr	r1, [r5, #28]
    4b98:	cbnz	r1, 4be4 <ExFatFile::remove()+0x70>
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4b9a:	movs	r4, #0
  for (uint8_t i = 0; i <= m_setCount; i++) {
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    4b9c:	movs	r2, #1
    4b9e:	mov	r1, r6
    4ba0:	ldr	r0, [r5, #32]
    4ba2:	bl	4778 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    4ba6:	adds	r4, #1
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
    4ba8:	mov	r3, r0
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    4baa:	uxtb	r4, r4
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
    4bac:	cmp	r0, #0
    4bae:	beq.n	4c5e <ExFatFile::remove()+0xea>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    4bb0:	ldrb	r2, [r3, #0]
    4bb2:	and.w	r2, r2, #127	; 0x7f
    4bb6:	strb	r2, [r3, #0]
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    4bb8:	ldrb.w	r3, [r5, #48]	; 0x30
    4bbc:	cmp	r3, r4
    4bbe:	bcc.n	4c2e <ExFatFile::remove()+0xba>
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
    4bc0:	cmp	r4, #0
    4bc2:	beq.n	4b9c <ExFatFile::remove()+0x28>
    4bc4:	movs	r2, #32
    4bc6:	mov	r1, r6
    4bc8:	ldr	r0, [r5, #32]
    4bca:	bl	47f8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    4bce:	cmp	r0, #1
    4bd0:	beq.n	4b9c <ExFatFile::remove()+0x28>
      DBG_FAIL_MACRO;
    4bd2:	movw	r0, #287	; 0x11f
    4bd6:	bl	4a70 <dbgPrint(unsigned short)>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    4bda:	movs	r4, #0
}
    4bdc:	mov	r0, r4
    4bde:	add	sp, #20
    4be0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    4be4:	lsls	r3, r7, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    4be6:	ldr	r0, [r5, #32]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    4be8:	bpl.n	4c86 <ExFatFile::remove()+0x112>
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    4bea:	ldrd	r2, r3, [r5, #8]
    4bee:	ldrb.w	r4, [r0, #1085]	; 0x43d
    4bf2:	adds	r4, #9
    4bf4:	uxtb	r4, r4
    4bf6:	adds.w	r8, r2, #4294967295
    4bfa:	adc.w	r9, r3, #4294967295
    4bfe:	rsb	r7, r4, #32
    4c02:	lsr.w	r2, r8, r4
    4c06:	sub.w	r3, r4, #32
    4c0a:	lsl.w	r7, r9, r7
    4c0e:	lsr.w	r3, r9, r3
    4c12:	orrs	r2, r7
    4c14:	orrs	r2, r3
    4c16:	adds	r2, #1
    4c18:	movs	r3, #0
    4c1a:	bl	46b0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4c1e:	mov	r4, r0
    4c20:	cmp	r0, #0
    4c22:	bne.n	4b9a <ExFatFile::remove()+0x26>
        DBG_FAIL_MACRO;
    4c24:	mov.w	r0, #274	; 0x112
    4c28:	bl	4a70 <dbgPrint(unsigned short)>
        goto fail;
    4c2c:	b.n	4bdc <ExFatFile::remove()+0x68>
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  return m_vol->cacheSync();
    4c2e:	ldr	r4, [r5, #32]
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    4c30:	movs	r3, #0
    4c32:	mov	r0, r4
    4c34:	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    4c38:	strb.w	r3, [r5, #51]	; 0x33
    4c3c:	bl	44dc <FsCache::sync()>
    4c40:	cmp	r0, #0
    4c42:	beq.n	4bda <ExFatFile::remove()+0x66>
    4c44:	add.w	r0, r4, #524	; 0x20c
    4c48:	bl	44dc <FsCache::sync()>
    4c4c:	cmp	r0, #0
    4c4e:	beq.n	4bda <ExFatFile::remove()+0x66>
    4c50:	ldr.w	r0, [r4, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    4c54:	ldr	r3, [r0, #0]
    4c56:	ldr	r3, [r3, #20]
    4c58:	blx	r3
    4c5a:	mov	r4, r0
    4c5c:	b.n	4bdc <ExFatFile::remove()+0x68>
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
    4c5e:	mov.w	r0, #292	; 0x124

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    4c62:	mov	r4, r3
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
    4c64:	bl	4a70 <dbgPrint(unsigned short)>
  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
}
    4c68:	mov	r0, r4
    4c6a:	add	sp, #20
    4c6c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4c70:	and.w	r3, r4, #255	; 0xff
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  DirPos_t pos = m_dirPos;
  uint8_t* cache;
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    4c74:	mov.w	r0, #266	; 0x10a

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    4c78:	mov	r4, r3
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  DirPos_t pos = m_dirPos;
  uint8_t* cache;
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    4c7a:	bl	4a70 <dbgPrint(unsigned short)>
  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
}
    4c7e:	mov	r0, r4
    4c80:	add	sp, #20
    4c82:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    } else {
      if (!m_vol->freeChain(m_firstCluster)) {
    4c86:	bl	4890 <ExFatPartition::freeChain(unsigned long)>
    4c8a:	mov	r4, r0
    4c8c:	cmp	r0, #0
    4c8e:	bne.n	4b9a <ExFatFile::remove()+0x26>
        DBG_FAIL_MACRO;
    4c90:	movw	r0, #279	; 0x117
    4c94:	bl	4a70 <dbgPrint(unsigned short)>
        goto fail;
    4c98:	b.n	4bdc <ExFatFile::remove()+0x68>
    4c9a:	nop

00004c9c <ExFatFile::rmdir()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    4c9c:	push	{r4, r5, lr}
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    4c9e:	ldrb.w	r3, [r0, #49]	; 0x31
    4ca2:	and.w	r3, r3, #16

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    4ca6:	sub	sp, #36	; 0x24
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    4ca8:	cbz	r3, 4cee <ExFatFile::rmdir()+0x52>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    4caa:	movs	r2, #0
    4cac:	movs	r3, #0
    4cae:	mov	r4, r0
    4cb0:	bl	3d2c <ExFatFile::seekSet(unsigned long long)>
    4cb4:	b.n	4cc4 <ExFatFile::rmdir()+0x28>
  while (1) {
    n = read(dir, 32);
    if (n == 0) {
      break;
    }
    if (n != 32 || dir[0] & 0X80) {
    4cb6:	cmp	r0, #32
    4cb8:	bne.n	4d00 <ExFatFile::rmdir()+0x64>
    4cba:	ldrb.w	r3, [sp]
    4cbe:	lsls	r2, r3, #24
    4cc0:	bmi.n	4d00 <ExFatFile::rmdir()+0x64>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (dir[0] == 0) {
    4cc2:	cbz	r3, 4cd2 <ExFatFile::rmdir()+0x36>
  }
  rewind();

  // make sure directory is empty
  while (1) {
    n = read(dir, 32);
    4cc4:	movs	r2, #32
    4cc6:	mov	r1, sp
    4cc8:	mov	r0, r4
    4cca:	bl	3b18 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    4cce:	cmp	r0, #0
    4cd0:	bne.n	4cb6 <ExFatFile::rmdir()+0x1a>
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    4cd2:	ldrb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    4cd6:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
    4cd8:	orr.w	r3, r3, #2
    4cdc:	strb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    4ce0:	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    4ce4:	mov	r0, r4
    4ce6:	bl	4b74 <ExFatFile::remove()>

fail:
  return false;
}
    4cea:	add	sp, #36	; 0x24
    4cec:	pop	{r4, r5, pc}
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    DBG_FAIL_MACRO;
    4cee:	mov.w	r0, #354	; 0x162
    4cf2:	and.w	r5, r3, #255	; 0xff
    4cf6:	bl	4a70 <dbgPrint(unsigned short)>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    4cfa:	mov	r0, r5
}
    4cfc:	add	sp, #36	; 0x24
    4cfe:	pop	{r4, r5, pc}
    n = read(dir, 32);
    if (n == 0) {
      break;
    }
    if (n != 32 || dir[0] & 0X80) {
      DBG_FAIL_MACRO;
    4d00:	mov.w	r0, #366	; 0x16e
    4d04:	bl	4a70 <dbgPrint(unsigned short)>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    4d08:	movs	r0, #0
}
    4d0a:	add	sp, #36	; 0x24
    4d0c:	pop	{r4, r5, pc}
    4d0e:	nop

00004d10 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    4d10:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    4d14:	add.w	fp, r0, #36	; 0x24
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    4d18:	mov	r6, r0
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    4d1a:	ldmia.w	fp, {r0, r1, r2}
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    4d1e:	sub	sp, #28
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    4d20:	add.w	r8, sp, #12
    4d24:	stmia.w	r8, {r0, r1, r2}
    4d28:	movs	r7, #0
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;
    4d2a:	mov	sl, r7
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    4d2c:	mov	r4, r7
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    4d2e:	movs	r2, #0
    4d30:	mov	r1, r8
    4d32:	ldr	r0, [r6, #32]
    4d34:	bl	4778 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    4d38:	uxtb.w	r9, r7
    if (!cache) {
    4d3c:	mov	r5, r0
    4d3e:	cmp	r0, #0
    4d40:	beq.n	4e3a <ExFatFile::syncDir()+0x12a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    4d42:	ldrb	r2, [r0, #0]
    4d44:	cmp	r2, #192	; 0xc0
    4d46:	beq.n	4db4 <ExFatFile::syncDir()+0xa4>
    4d48:	cmp	r2, #193	; 0xc1
    4d4a:	beq.n	4d6c <ExFatFile::syncDir()+0x5c>
    4d4c:	cmp	r2, #133	; 0x85
    4d4e:	beq.n	4df0 <ExFatFile::syncDir()+0xe0>

      case EXFAT_TYPE_NAME:
        break;

      default:
        DBG_FAIL_MACRO;
    4d50:	mov.w	r0, #452	; 0x1c4
    4d54:	bl	4a70 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    4d58:	ldrb.w	r3, [r6, #50]	; 0x32
    4d5c:	orr.w	r3, r3, #1
    4d60:	strb.w	r3, [r6, #50]	; 0x32
  return false;
    4d64:	movs	r0, #0
}
    4d66:	add	sp, #28
    4d68:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4d6c:	mov	r0, r2
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4d6e:	movs	r1, #0
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4d70:	ldrb	r2, [r5, r1]
    4d72:	lsls	r3, r4, #15
    4d74:	orr.w	r4, r3, r4, lsr #1
    4d78:	uxtah	r4, r2, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4d7c:	cmp	r1, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4d7e:	uxth	r4, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4d80:	add.w	r1, r1, #1
    4d84:	beq.n	4daa <ExFatFile::syncDir()+0x9a>
    4d86:	cmp	r1, #31
    4d88:	bls.n	4d70 <ExFatFile::syncDir()+0x60>
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    if (i == setCount) break;
    4d8a:	cmp	sl, r9
    4d8c:	beq.n	4e44 <ExFatFile::syncDir()+0x134>
    if (m_vol->dirSeek(&pos, 32) != 1) {
    4d8e:	movs	r2, #32
    4d90:	mov	r1, r8
    4d92:	ldr	r0, [r6, #32]
    4d94:	bl	47f8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    4d98:	cmp	r0, #1
    4d9a:	add.w	r7, r7, #1
    4d9e:	beq.n	4d2e <ExFatFile::syncDir()+0x1e>
      DBG_FAIL_MACRO;
    4da0:	movw	r0, #459	; 0x1cb
    4da4:	bl	4a70 <dbgPrint(unsigned short)>
      goto fail;
    4da8:	b.n	4d58 <ExFatFile::syncDir()+0x48>
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4daa:	cmp	r0, #133	; 0x85
    4dac:	ite	eq
    4dae:	moveq	r1, #4
    4db0:	movne	r1, #2
    4db2:	b.n	4d70 <ExFatFile::syncDir()+0x60>
        }
        break;

      case EXFAT_TYPE_STREAM:
        ds = reinterpret_cast<DirStream_t*>(cache);
        if (isContiguous()) {
    4db4:	ldrb.w	r3, [r6, #51]	; 0x33
    4db8:	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    4dbc:	ldrb	r3, [r0, #1]
    4dbe:	ite	ne
    4dc0:	orrne.w	r3, r3, #2
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    4dc4:	biceq.w	r3, r3, #2
    4dc8:	strb	r3, [r0, #1]
        }
        setLe64(ds->validLength, m_validLength);
    4dca:	ldrd	r2, r3, [r6, #16]

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    4dce:	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
    4dd2:	ldrd	r2, r3, [r6, #8]
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
    4dd6:	ldr	r1, [r6, #28]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    4dd8:	str	r1, [r0, #20]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    4dda:	strd	r2, r3, [r0, #24]
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    4dde:	ldr	r2, [r6, #32]
    invalidate();
    return m_cacheBuffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    4de0:	ldrb.w	r3, [r2, #524]	; 0x20c
    4de4:	orr.w	r3, r3, #1
    4de8:	strb.w	r3, [r2, #524]	; 0x20c
    4dec:	ldrb	r0, [r0, #0]
    4dee:	b.n	4d6e <ExFatFile::syncDir()+0x5e>
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    4df0:	ldr	r3, [pc, #152]	; (4e8c <ExFatFile::syncDir()+0x17c>)
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    4df2:	ldrb.w	r1, [r6, #49]	; 0x31
    4df6:	ldr	r3, [r3, #0]
      goto fail;
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
    4df8:	ldrb.w	sl, [r0, #1]
    4dfc:	and.w	r1, r1, #55	; 0x37
    4e00:	strh	r1, [r0, #4]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    4e02:	cmp	r3, #0
    4e04:	beq.n	4d6c <ExFatFile::syncDir()+0x5c>
          m_vol->dataCacheDirty();
    4e06:	ldr	r1, [r6, #32]
    4e08:	ldrb.w	r2, [r1, #524]	; 0x20c
    4e0c:	orr.w	r2, r2, #1
    4e10:	strb.w	r2, [r1, #524]	; 0x20c
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    4e14:	add	r0, sp, #8
    4e16:	add.w	r2, sp, #7
    4e1a:	add.w	r1, sp, #10
    4e1e:	blx	r3
          df->modifyTimeMs = ms10;
          setLe16(df->modifyTime, time);
    4e20:	ldrh.w	r2, [sp, #10]
          setLe16(df->modifyDate, date);
    4e24:	ldrh.w	r3, [sp, #8]
        if (FsDateTime::callback) {
          m_vol->dataCacheDirty();
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
    4e28:	ldrb.w	r1, [sp, #7]
    4e2c:	strb	r1, [r5, #21]
    4e2e:	strh	r2, [r5, #12]
    4e30:	strh	r2, [r5, #16]
    4e32:	strh	r3, [r5, #14]
    4e34:	strh	r3, [r5, #18]
    4e36:	ldrb	r0, [r5, #0]
    4e38:	b.n	4d6e <ExFatFile::syncDir()+0x5e>
  DirPos_t pos = m_dirPos;

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    if (!cache) {
      DBG_FAIL_MACRO;
    4e3a:	mov.w	r0, #414	; 0x19e
    4e3e:	bl	4a70 <dbgPrint(unsigned short)>
      goto fail;
    4e42:	b.n	4d58 <ExFatFile::syncDir()+0x48>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  df = reinterpret_cast<DirFile_t *>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    4e44:	mov	r1, fp
    4e46:	movs	r2, #1
    4e48:	ldr	r0, [r6, #32]
    4e4a:	bl	4778 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    4e4e:	cbz	r0, 4e66 <ExFatFile::syncDir()+0x156>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    4e50:	ldr	r5, [r6, #32]
    4e52:	strh	r4, [r0, #2]
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4e54:	mov	r0, r5
    4e56:	bl	44dc <FsCache::sync()>
    4e5a:	cbnz	r0, 4e70 <ExFatFile::syncDir()+0x160>
    DBG_FAIL_MACRO;
    4e5c:	movw	r0, #471	; 0x1d7
    4e60:	bl	4a70 <dbgPrint(unsigned short)>
    goto fail;
    4e64:	b.n	4d58 <ExFatFile::syncDir()+0x48>
    }
  }
  df = reinterpret_cast<DirFile_t *>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
  if (!df) {
    DBG_FAIL_MACRO;
    4e66:	mov.w	r0, #466	; 0x1d2
    4e6a:	bl	4a70 <dbgPrint(unsigned short)>
    goto fail;
    4e6e:	b.n	4d58 <ExFatFile::syncDir()+0x48>
    4e70:	add.w	r0, r5, #524	; 0x20c
    4e74:	bl	44dc <FsCache::sync()>
    4e78:	cmp	r0, #0
    4e7a:	beq.n	4e5c <ExFatFile::syncDir()+0x14c>
    4e7c:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    4e80:	ldr	r3, [r0, #0]
    4e82:	ldr	r3, [r3, #20]
    4e84:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4e86:	cmp	r0, #0
    4e88:	beq.n	4e5c <ExFatFile::syncDir()+0x14c>
    4e8a:	b.n	4d66 <ExFatFile::syncDir()+0x56>
    4e8c:	.word	0x1fff198c

00004e90 <ExFatFile::sync()>:
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    4e90:	ldrb.w	r2, [r0, #49]	; 0x31
    4e94:	cbz	r2, 4ec4 <ExFatFile::sync()+0x34>

fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
    4e96:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    4e98:	ldrb.w	r2, [r0, #51]	; 0x33
    4e9c:	lsls	r1, r2, #24
    4e9e:	bmi.n	4ec8 <ExFatFile::sync()+0x38>
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
  }
  if (!m_vol->cacheSync()) {
    4ea0:	ldr	r5, [r0, #32]
    4ea2:	mov	r4, r0
    4ea4:	mov	r0, r5
    4ea6:	bl	44dc <FsCache::sync()>
    4eaa:	cbnz	r0, 4ed8 <ExFatFile::sync()+0x48>
    DBG_FAIL_MACRO;
    4eac:	mov.w	r0, #392	; 0x188
    4eb0:	bl	4a70 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    4eb4:	ldrb.w	r3, [r4, #50]	; 0x32
    4eb8:	orr.w	r3, r3, #1
    4ebc:	strb.w	r3, [r4, #50]	; 0x32
    4ec0:	movs	r0, #0
  return false;
}
    4ec2:	pop	{r3, r4, r5, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    4ec4:	movs	r0, #1
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    4ec6:	bx	lr
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4ec8:	and.w	r2, r2, #127	; 0x7f
    4ecc:	strb.w	r2, [r0, #51]	; 0x33
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    4ed0:	ldmia.w	sp!, {r3, r4, r5, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    4ed4:	b.w	4d10 <ExFatFile::syncDir()>
    4ed8:	add.w	r0, r5, #524	; 0x20c
    4edc:	bl	44dc <FsCache::sync()>
    4ee0:	cmp	r0, #0
    4ee2:	beq.n	4eac <ExFatFile::sync()+0x1c>
    4ee4:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    4ee8:	ldr	r3, [r0, #0]
    4eea:	ldr	r3, [r3, #20]
    4eec:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4eee:	cmp	r0, #0
    4ef0:	beq.n	4eac <ExFatFile::sync()+0x1c>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    4ef2:	movs	r0, #1
    4ef4:	pop	{r3, r4, r5, pc}
    4ef6:	nop

00004ef8 <ExFatFile::addDirCluster()>:

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    4ef8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4efc:	ldrb.w	r3, [r0, #49]	; 0x31
    4f00:	lsls	r1, r3, #25

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    4f02:	mov	r8, r0
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4f04:	bmi.n	4fb4 <ExFatFile::addDirCluster()+0xbc>
    4f06:	ldr	r0, [r0, #8]
    4f08:	ldr.w	r3, [r8, #32]
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    4f0c:	ldr.w	r3, [r3, #1076]	; 0x434
    4f10:	add	r0, r3
    4f12:	cmp.w	r0, #67108864	; 0x4000000
    4f16:	bcs.n	4fa8 <ExFatFile::addDirCluster()+0xb0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    4f18:	mov	r0, r8
    4f1a:	bl	4aac <ExFatFile::addCluster()>
    4f1e:	cmp	r0, #0
    4f20:	beq.n	4f9c <ExFatFile::addDirCluster()+0xa4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
    4f22:	ldr.w	r5, [r8, #32]
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    4f26:	ldrb.w	r3, [r5, #524]	; 0x20c
    4f2a:	lsls	r2, r3, #31

  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
    4f2c:	add.w	r4, r5, #524	; 0x20c
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    4f30:	bmi.n	4ffa <ExFatFile::addDirCluster()+0x102>
      return nullptr;
    }
    invalidate();
    4f32:	mov	r0, r4
    return m_cacheBuffer;
    4f34:	add.w	r5, r5, #536	; 0x218
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    4f38:	bl	4444 <FsCache::invalidate()>
  if (!cache) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
    4f3c:	mov.w	r2, #512	; 0x200
    4f40:	movs	r1, #0
    4f42:	mov	r0, r5
    4f44:	bl	c07c <memset>
  sector = m_vol->clusterStartSector(m_curCluster);
    4f48:	ldr.w	r2, [r8, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    4f4c:	ldr.w	r3, [r8, #24]
    4f50:	ldrb.w	r1, [r2, #1085]	; 0x43d
    4f54:	ldr.w	r7, [r2, #1060]	; 0x424
    4f58:	subs	r3, #2
    4f5a:	lsls	r3, r1
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    4f5c:	movs	r6, #1
    4f5e:	add	r7, r3
    4f60:	lsls.w	r3, r6, r1
    4f64:	it	ne
    4f66:	movne	r4, #0
    4f68:	bne.n	4f7c <ExFatFile::addDirCluster()+0x84>
    4f6a:	b.n	4fbc <ExFatFile::addDirCluster()+0xc4>
    4f6c:	ldr.w	r2, [r8, #32]
    4f70:	ldrb.w	r3, [r2, #1085]	; 0x43d
    4f74:	lsl.w	r3, r6, r3
    4f78:	cmp	r3, r4
    4f7a:	bls.n	4fbc <ExFatFile::addDirCluster()+0xc4>
    4f7c:	ldr.w	r0, [r2, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    4f80:	ldr	r3, [r0, #0]
    4f82:	adds	r1, r7, r4
    4f84:	ldr	r3, [r3, #24]
    4f86:	mov	r2, r5
    4f88:	blx	r3
    4f8a:	adds	r4, #1
    if (!m_vol->writeSector(sector + i, cache)) {
    4f8c:	cmp	r0, #0
    4f8e:	bne.n	4f6c <ExFatFile::addDirCluster()+0x74>
      DBG_FAIL_MACRO;
    4f90:	movs	r0, #145	; 0x91
    4f92:	bl	4a70 <dbgPrint(unsigned short)>
  }
  return sync();

 fail:
  return false;
}
    4f96:	movs	r0, #0
    4f98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    DBG_FAIL_MACRO;
    4f9c:	movs	r0, #133	; 0x85
    4f9e:	bl	4a70 <dbgPrint(unsigned short)>
  }
  return sync();

 fail:
  return false;
}
    4fa2:	movs	r0, #0
    4fa4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    4fa8:	movs	r0, #129	; 0x81
    4faa:	bl	4a70 <dbgPrint(unsigned short)>
  }
  return sync();

 fail:
  return false;
}
    4fae:	movs	r0, #0
    4fb0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4fb4:	ldr	r0, [r0, #32]
    4fb6:	bl	49a0 <ExFatPartition::rootLength()>
    4fba:	b.n	4f08 <ExFatFile::addDirCluster()+0x10>
    if (!m_vol->writeSector(sector + i, cache)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    4fbc:	ldrb.w	r3, [r8, #49]	; 0x31
    4fc0:	lsls	r3, r3, #25
    4fc2:	bmi.n	4ff0 <ExFatFile::addDirCluster()+0xf8>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4fc4:	ldrb.w	r3, [r8, #51]	; 0x33
    4fc8:	orn	r3, r3, #127	; 0x7f
    4fcc:	strb.w	r3, [r8, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    4fd0:	ldr.w	r4, [r2, #1076]	; 0x434
    4fd4:	ldrd	r2, r3, [r8, #8]
    m_validLength += m_vol->bytesPerCluster();
    4fd8:	ldrd	r0, r1, [r8, #16]
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    4fdc:	adds	r2, r2, r4
    4fde:	mov.w	r5, #0
    4fe2:	adcs	r3, r5
    m_validLength += m_vol->bytesPerCluster();
    4fe4:	adds	r0, r0, r4
    4fe6:	adcs	r1, r5
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    4fe8:	strd	r2, r3, [r8, #8]
    m_validLength += m_vol->bytesPerCluster();
    4fec:	strd	r0, r1, [r8, #16]
  }
  return sync();
    4ff0:	mov	r0, r8

 fail:
  return false;
}
    4ff2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    m_validLength += m_vol->bytesPerCluster();
  }
  return sync();
    4ff6:	b.w	4e90 <ExFatFile::sync()>
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    4ffa:	mov	r0, r4
    4ffc:	bl	44dc <FsCache::sync()>
    5000:	cmp	r0, #0
    5002:	bne.n	4f32 <ExFatFile::addDirCluster()+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
  if (!cache) {
    DBG_FAIL_MACRO;
    5004:	movs	r0, #138	; 0x8a
    5006:	bl	4a70 <dbgPrint(unsigned short)>
    500a:	b.n	4fa2 <ExFatFile::addDirCluster()+0xaa>

0000500c <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    500c:	push	{r4, r5, lr}
  if (!parent->isDir()) {
    500e:	ldrb.w	r3, [r1, #49]	; 0x31
    5012:	tst.w	r3, #80	; 0x50

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    5016:	sub	sp, #12
  if (!parent->isDir()) {
    5018:	beq.n	5066 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x5a>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    501a:	movw	r5, #2562	; 0xa02
    501e:	ldrb	r3, [r2, #0]
    5020:	ldr	r2, [r2, #4]
    5022:	str	r5, [sp, #0]
    5024:	mov	r4, r0
    5026:	bl	3e48 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    502a:	cbz	r0, 505a <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x4e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory

  m_attributes = FILE_ATTR_SUBDIR;
    502c:	movs	r3, #16
    502e:	strb.w	r3, [r4, #49]	; 0x31

  // allocate and zero first cluster
  if (!addDirCluster()) {
    5032:	mov	r0, r4
    5034:	bl	4ef8 <ExFatFile::addDirCluster()>
    5038:	cbz	r0, 5072 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x66>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    503a:	ldr	r3, [r4, #24]
    503c:	str	r3, [r4, #28]
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    503e:	movs	r2, #0
    5040:	movs	r3, #0
    5042:	mov	r0, r4
    5044:	bl	3d2c <ExFatFile::seekSet(unsigned long long)>

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    5048:	movs	r3, #193	; 0xc1
  return sync();
    504a:	mov	r0, r4
  }
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    504c:	strb.w	r3, [r4, #51]	; 0x33
  return sync();

fail:
  return false;
}
    5050:	add	sp, #12
    5052:	ldmia.w	sp!, {r4, r5, lr}
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();
    5056:	b.w	4e90 <ExFatFile::sync()>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    505a:	movs	r0, #209	; 0xd1
    505c:	bl	4a70 <dbgPrint(unsigned short)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    5060:	movs	r0, #0
    5062:	add	sp, #12
    5064:	pop	{r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    5066:	movs	r0, #204	; 0xcc
    5068:	bl	4a70 <dbgPrint(unsigned short)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    506c:	movs	r0, #0
    506e:	add	sp, #12
    5070:	pop	{r4, r5, pc}

  m_attributes = FILE_ATTR_SUBDIR;

  // allocate and zero first cluster
  if (!addDirCluster()) {
    DBG_FAIL_MACRO;
    5072:	movs	r0, #218	; 0xda
    5074:	bl	4a70 <dbgPrint(unsigned short)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    5078:	movs	r0, #0
    507a:	add	sp, #12
    507c:	pop	{r4, r5, pc}
    507e:	nop

00005080 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    5080:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5084:	mov	r6, r0
    5086:	sub	sp, #84	; 0x54
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    5088:	ldrb.w	r4, [r6, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    508c:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    508e:	movs	r0, #0
    5090:	strb.w	r0, [sp, #73]	; 0x49
    5094:	strb.w	r0, [sp, #74]	; 0x4a
    5098:	strb.w	r0, [sp, #75]	; 0x4b
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    509c:	cmp	r4, #0
    509e:	bne.n	511a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x9a>
    50a0:	mov	r9, r3
    50a2:	ldrb.w	r3, [r1, #49]	; 0x31
    50a6:	tst.w	r3, #80	; 0x50
    50aa:	mov	r5, r1
    50ac:	beq.n	511a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x9a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    50ae:	ldrb	r3, [r2, #0]
    50b0:	cmp	r3, #47	; 0x2f
    50b2:	mov	r1, r2
    50b4:	beq.n	50fc <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x7c>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    50b6:	mov.w	r8, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    50ba:	add	r3, sp, #12
    50bc:	add	r2, sp, #16
    50be:	mov	r0, r6
    50c0:	bl	3a54 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    50c4:	mov	r4, r0
    50c6:	cmp	r0, #0
    50c8:	beq.n	5164 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xe4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    50ca:	ldr	r3, [sp, #12]
    50cc:	ldrb	r3, [r3, #0]
    50ce:	cmp	r3, #0
    50d0:	beq.n	5172 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xf2>
    50d2:	ldrb.w	r3, [sp, #16]
    50d6:	ldr	r2, [sp, #20]
    50d8:	str.w	r8, [sp]
    50dc:	mov	r1, r5
    50de:	mov	r0, r6
    50e0:	bl	3e48 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    50e4:	mov	r4, r0
    50e6:	cbnz	r0, 5138 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xb8>
      if (!pFlag || !mkdir(parent, &fname)) {
    50e8:	cmp.w	r9, #0
    50ec:	bne.n	512a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xaa>
        DBG_FAIL_MACRO;
    50ee:	movs	r0, #188	; 0xbc
    50f0:	bl	4a70 <dbgPrint(unsigned short)>
  }
  return mkdir(parent, &fname);

fail:
  return false;
}
    50f4:	mov	r0, r4
    50f6:	add	sp, #84	; 0x54
    50f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    50fc:	adds	r1, #1
    50fe:	str	r1, [sp, #12]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    5100:	ldrb	r3, [r1, #0]
    5102:	cmp	r3, #47	; 0x2f
    5104:	beq.n	50fc <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x7c>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    5106:	ldr	r1, [r5, #32]
    5108:	add	r0, sp, #24
    510a:	bl	3a24 <ExFatFile::openRoot(ExFatVolume*)>
    510e:	mov	r4, r0
    5110:	cmp	r0, #0
    5112:	beq.n	5180 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x100>
    5114:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    5116:	add	r5, sp, #24
    5118:	b.n	50b6 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x36>
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    511a:	movs	r0, #165	; 0xa5
    511c:	bl	4a70 <dbgPrint(unsigned short)>
    close();
  }
  return mkdir(parent, &fname);

fail:
  return false;
    5120:	movs	r4, #0
}
    5122:	mov	r0, r4
    5124:	add	sp, #84	; 0x54
    5126:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
      if (!pFlag || !mkdir(parent, &fname)) {
    512a:	mov	r1, r5
    512c:	add	r2, sp, #16
    512e:	mov	r0, r6
    5130:	bl	500c <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    5134:	cmp	r0, #0
    5136:	beq.n	50ee <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x6e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    5138:	mov	r4, r6
    513a:	add	r7, sp, #24
    513c:	add.w	lr, r6, #48	; 0x30
    5140:	ldr	r0, [r4, #0]
    5142:	ldr	r1, [r4, #4]
    5144:	ldr	r2, [r4, #8]
    5146:	ldr	r3, [r4, #12]
    5148:	mov	r5, r7
    514a:	stmia	r5!, {r0, r1, r2, r3}
    514c:	adds	r4, #16
    514e:	cmp	r4, lr
    5150:	mov	r7, r5
    5152:	bne.n	5140 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc0>
    5154:	ldr	r0, [r4, #0]
    5156:	str	r0, [r5, #0]
    parent = &tmpDir;
    close();
    5158:	mov	r0, r6
    515a:	bl	3950 <ExFatFile::close()>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    515e:	add	r5, sp, #24
    5160:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    5162:	b.n	50ba <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3a>
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
    5164:	movs	r0, #180	; 0xb4
    5166:	bl	4a70 <dbgPrint(unsigned short)>
  }
  return mkdir(parent, &fname);

fail:
  return false;
}
    516a:	mov	r0, r4
    516c:	add	sp, #84	; 0x54
    516e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    5172:	add	r2, sp, #16
    5174:	mov	r1, r5
    5176:	mov	r0, r6
    5178:	bl	500c <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    517c:	mov	r4, r0
    517e:	b.n	50f4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x74>
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
      DBG_FAIL_MACRO;
    5180:	movs	r0, #173	; 0xad
    5182:	bl	4a70 <dbgPrint(unsigned short)>
      goto fail;
    5186:	b.n	50f4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x74>

00005188 <ExFatFile::rename(ExFatFile*, char const*)>:
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    5188:	push	{r4, r5, r6, r7, lr}
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    518a:	ldrb.w	r4, [r0, #49]	; 0x31
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    518e:	sub	sp, #116	; 0x74
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    5190:	movs	r3, #0
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    5192:	ands.w	r4, r4, #24
    5196:	strb.w	r3, [sp, #49]	; 0x31
    519a:	strb.w	r3, [sp, #50]	; 0x32
    519e:	strb.w	r3, [sp, #51]	; 0x33
    51a2:	strb.w	r3, [sp, #105]	; 0x69
    51a6:	strb.w	r3, [sp, #106]	; 0x6a
    51aa:	strb.w	r3, [sp, #107]	; 0x6b
    51ae:	bne.n	51be <ExFatFile::rename(ExFatFile*, char const*)+0x36>
    DBG_FAIL_MACRO;
    51b0:	movw	r0, #319	; 0x13f
    51b4:	bl	4a70 <dbgPrint(unsigned short)>
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

fail:
  return false;
}
    51b8:	mov	r0, r4
    51ba:	add	sp, #116	; 0x74
    51bc:	pop	{r4, r5, r6, r7, pc}
    51be:	mov	r5, r0
  if (!(isFile() || isSubDir())) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    51c0:	ldr	r0, [r1, #32]
    51c2:	ldr	r4, [r5, #32]
    51c4:	cmp	r4, r0
    51c6:	beq.n	51d8 <ExFatFile::rename(ExFatFile*, char const*)+0x50>
    DBG_FAIL_MACRO;
    51c8:	mov.w	r0, #324	; 0x144
  oldFile.m_flags = FILE_FLAG_WRITE;
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

fail:
  return false;
    51cc:	mov	r4, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    51ce:	bl	4a70 <dbgPrint(unsigned short)>
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

fail:
  return false;
}
    51d2:	mov	r0, r4
    51d4:	add	sp, #116	; 0x74
    51d6:	pop	{r4, r5, r6, r7, pc}
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    51d8:	movw	r3, #2561	; 0xa01
    51dc:	mov	r0, sp
    51de:	bl	4278 <ExFatFile::open(ExFatFile*, char const*, int)>
    51e2:	mov	r4, r0
    51e4:	cbz	r0, 524c <ExFatFile::rename(ExFatFile*, char const*)+0xc4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
    51e6:	add	r7, sp, #56	; 0x38
    51e8:	mov	r4, r5
    51ea:	add.w	lr, r5, #48	; 0x30
    51ee:	ldr	r0, [r4, #0]
    51f0:	ldr	r1, [r4, #4]
    51f2:	ldr	r2, [r4, #8]
    51f4:	ldr	r3, [r4, #12]
    51f6:	mov	r6, r7
    51f8:	stmia	r6!, {r0, r1, r2, r3}
    51fa:	adds	r4, #16
    51fc:	cmp	r4, lr
    51fe:	mov	r7, r6
    5200:	bne.n	51ee <ExFatFile::rename(ExFatFile*, char const*)+0x66>
    5202:	ldr	r0, [r4, #0]
    5204:	str	r0, [r6, #0]
  m_dirPos = file.m_dirPos;
    5206:	add	r3, sp, #36	; 0x24
    5208:	ldmia.w	r3, {r0, r1, r2}
    520c:	add.w	r3, r5, #36	; 0x24
    5210:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5214:	ldrb.w	r3, [r5, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
    5218:	ldrb.w	r2, [sp, #48]	; 0x30
    521c:	strb.w	r2, [r5, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5220:	orn	r3, r3, #127	; 0x7f
    5224:	strb.w	r3, [r5, #51]	; 0x33
  if (!sync()) {
    5228:	mov	r0, r5
    522a:	bl	4e90 <ExFatFile::sync()>
    522e:	mov	r4, r0
    5230:	cbz	r0, 5256 <ExFatFile::rename(ExFatFile*, char const*)+0xce>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    5232:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    5234:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    5236:	movs	r3, #8
  return oldFile.remove();
    5238:	add	r0, sp, #56	; 0x38
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    523a:	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    523c:	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    5240:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    5244:	bl	4b74 <ExFatFile::remove()>
    5248:	mov	r4, r0
    524a:	b.n	51b8 <ExFatFile::rename(ExFatFile*, char const*)+0x30>
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    DBG_FAIL_MACRO;
    524c:	mov.w	r0, #328	; 0x148
    5250:	bl	4a70 <dbgPrint(unsigned short)>
    goto fail;
    5254:	b.n	51b8 <ExFatFile::rename(ExFatFile*, char const*)+0x30>
  oldFile = *this;
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  if (!sync()) {
    DBG_FAIL_MACRO;
    5256:	mov.w	r0, #336	; 0x150
    525a:	bl	4a70 <dbgPrint(unsigned short)>
    goto fail;
    525e:	b.n	51b8 <ExFatFile::rename(ExFatFile*, char const*)+0x30>

00005260 <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    5260:	push	{r4, r5, r6, r7, lr}
    5262:	ldrb.w	r3, [r0, #51]	; 0x33
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    5266:	and.w	r2, r3, #2

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    526a:	sub	sp, #12
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    526c:	cmp	r2, #0
    526e:	beq.n	531a <ExFatFile::truncate()+0xba>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    5270:	ldr	r1, [r0, #28]
    5272:	mov	r4, r0
    5274:	cbz	r1, 52d8 <ExFatFile::truncate()+0x78>
      return true;
  }
  if (isContiguous()) {
    5276:	and.w	r3, r3, #64	; 0x40
    527a:	and.w	r5, r3, #255	; 0xff
    527e:	cbz	r3, 52e0 <ExFatFile::truncate()+0x80>
    5280:	ldr	r0, [r0, #32]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
    5282:	ldr	r5, [r4, #24]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    5284:	ldrb.w	r3, [r0, #1085]	; 0x43d
    5288:	ldrd	r6, r7, [r4, #8]
    528c:	adds	r3, #9
    528e:	uxtb	r3, r3
    5290:	adds.w	r6, r6, #4294967295
    5294:	rsb	lr, r3, #32
    5298:	adc.w	r7, r7, #4294967295
    529c:	lsr.w	r2, r6, r3
    52a0:	lsl.w	lr, r7, lr
    52a4:	subs	r3, #32
    52a6:	orr.w	r2, r2, lr
    52aa:	lsr.w	r3, r7, r3
    52ae:	orrs	r2, r3
    52b0:	adds	r2, #1
    if (m_curCluster) {
    52b2:	cmp	r5, #0
    52b4:	beq.n	532c <ExFatFile::truncate()+0xcc>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    52b6:	subs	r1, #1
    52b8:	subs	r1, r1, r5
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    52ba:	adds	r5, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    52bc:	add	r2, r1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    52be:	str	r5, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    52c0:	cbz	r2, 52f4 <ExFatFile::truncate()+0x94>
    52c2:	movs	r3, #0
    52c4:	ldr	r1, [sp, #4]
    52c6:	bl	46b0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    52ca:	mov	r5, r0
    52cc:	cbnz	r0, 52f4 <ExFatFile::truncate()+0x94>
      DBG_FAIL_MACRO;
    52ce:	movw	r0, #599	; 0x257
    52d2:	bl	4a70 <dbgPrint(unsigned short)>
      goto fail;
    52d6:	b.n	52da <ExFatFile::truncate()+0x7a>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    52d8:	movs	r5, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    52da:	mov	r0, r5
    52dc:	add	sp, #12
    52de:	pop	{r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
    52e0:	ldr	r3, [r0, #24]
    52e2:	cbnz	r3, 5332 <ExFatFile::truncate()+0xd2>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else {
      toFree = m_firstCluster;
    52e4:	str	r1, [sp, #4]
      m_firstCluster = 0;
    52e6:	str	r3, [r0, #28]
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
    52e8:	ldr	r0, [r4, #32]
    52ea:	bl	4890 <ExFatPartition::freeChain(unsigned long)>
    52ee:	mov	r5, r0
    52f0:	cmp	r0, #0
    52f2:	beq.n	536c <ExFatFile::truncate()+0x10c>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    52f4:	ldrd	r0, r1, [r4]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    52f8:	ldrb.w	r3, [r4, #51]	; 0x33
    52fc:	orn	r3, r3, #127	; 0x7f
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    5300:	strd	r0, r1, [r4, #8]
  m_validLength = m_curPosition;
    5304:	strd	r0, r1, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5308:	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    530c:	mov	r0, r4
    530e:	bl	4e90 <ExFatFile::sync()>
    5312:	mov	r5, r0

 fail:
  return false;
}
    5314:	mov	r0, r5
    5316:	add	sp, #12
    5318:	pop	{r4, r5, r6, r7, pc}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    531a:	movw	r0, #583	; 0x247
    531e:	and.w	r5, r2, #255	; 0xff
    5322:	bl	4a70 <dbgPrint(unsigned short)>
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    5326:	mov	r0, r5
    5328:	add	sp, #12
    532a:	pop	{r4, r5, r6, r7, pc}
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
    532c:	str	r1, [sp, #4]
      m_firstCluster = 0;
    532e:	str	r5, [r4, #28]
    5330:	b.n	52c0 <ExFatFile::truncate()+0x60>
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    5332:	add	r2, sp, #8
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    5334:	mov	r1, r3
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    5336:	str.w	r5, [r2, #-4]!
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    533a:	ldr	r0, [r0, #32]
    533c:	bl	47ac <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    5340:	sxtb	r0, r0
      if (fg < 0) {
    5342:	cmp	r0, #0
    5344:	blt.n	5376 <ExFatFile::truncate()+0x116>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
    5346:	bne.n	5350 <ExFatFile::truncate()+0xf0>
      }
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
    5348:	ldr	r1, [sp, #4]
    534a:	cmp	r1, #0
    534c:	beq.n	52f4 <ExFatFile::truncate()+0x94>
    534e:	b.n	52e8 <ExFatFile::truncate()+0x88>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
        // current cluster is end of chain
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    5350:	mov.w	r2, #4294967295
    5354:	ldr	r1, [r4, #24]
    5356:	ldr	r0, [r4, #32]
    5358:	bl	4840 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    535c:	mov	r5, r0
    535e:	cmp	r0, #0
    5360:	bne.n	5348 <ExFatFile::truncate()+0xe8>
          DBG_FAIL_MACRO;
    5362:	movw	r0, #614	; 0x266
    5366:	bl	4a70 <dbgPrint(unsigned short)>
          goto fail;
    536a:	b.n	52da <ExFatFile::truncate()+0x7a>
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
        DBG_FAIL_MACRO;
    536c:	mov.w	r0, #624	; 0x270
    5370:	bl	4a70 <dbgPrint(unsigned short)>
        goto fail;
    5374:	b.n	52da <ExFatFile::truncate()+0x7a>
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
      if (fg < 0) {
        DBG_FAIL_MACRO;
    5376:	mov.w	r0, #608	; 0x260
    537a:	bl	4a70 <dbgPrint(unsigned short)>
        goto fail;
    537e:	b.n	52da <ExFatFile::truncate()+0x7a>

00005380 <ExFatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    5380:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5384:	ldrb.w	r3, [r0, #51]	; 0x33
    5388:	sub	sp, #20

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    538a:	lsls	r4, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    538c:	mov	r6, r0
    538e:	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    5390:	bpl.w	55da <ExFatFile::write(void const*, unsigned int)+0x25a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    5394:	lsls	r2, r3, #28
    5396:	mov	sl, r1
    5398:	bmi.w	5608 <ExFatFile::write(void const*, unsigned int)+0x288>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    539c:	ldr	r3, [sp, #4]
    539e:	cmp	r3, #0
    53a0:	beq.w	5656 <ExFatFile::write(void const*, unsigned int)+0x2d6>
    53a4:	mov	r1, r6
    53a6:	ldrd	r2, r3, [r1], #24
    53aa:	ldr.w	r8, [sp, #4]
    53ae:	str	r1, [sp, #12]
    53b0:	mov	fp, r2
    clusterOffset = m_curPosition & m_vol->clusterMask();
    53b2:	ldr	r0, [r6, #32]
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    53b4:	ldr	r5, [r6, #24]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    53b6:	ldr.w	r4, [r0, #1072]	; 0x430
    53ba:	mov	r3, fp
    53bc:	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    53be:	ubfx	r9, r4, #0, #9
    if (clusterOffset == 0) {
    53c2:	cbnz	r4, 541a <ExFatFile::write(void const*, unsigned int)+0x9a>
      // start of new cluster
      if (m_curCluster != 0) {
    53c4:	cmp	r5, #0
    53c6:	beq.w	556c <ExFatFile::write(void const*, unsigned int)+0x1ec>
        int fg;

        if (isContiguous()) {
    53ca:	ldrb.w	r3, [r6, #51]	; 0x33
    53ce:	lsls	r3, r3, #25
    53d0:	bpl.w	559e <ExFatFile::write(void const*, unsigned int)+0x21e>
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    53d4:	ldrd	r2, r3, [r6, #8]
    53d8:	ldrb.w	r7, [r0, #1085]	; 0x43d
    53dc:	adds	r7, #9
    53de:	uxtb	r7, r7
    53e0:	adds.w	r2, r2, #4294967295
    53e4:	adc.w	r3, r3, #4294967295
    53e8:	rsb	lr, r7, #32
    53ec:	lsl.w	lr, r3, lr
    53f0:	lsr.w	r1, r2, r7
    53f4:	subs	r7, #32
    53f6:	lsr.w	r7, r3, r7
    53fa:	orr.w	r1, r1, lr
    53fe:	ldr	r3, [r6, #28]
    5400:	orrs	r1, r7
    5402:	add	r3, r1
    5404:	cmp	r5, r3
    5406:	bcc.w	5598 <ExFatFile::write(void const*, unsigned int)+0x218>
            goto fail;
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
    540a:	mov	r0, r6
    540c:	bl	4aac <ExFatFile::addCluster()>
    5410:	cmp	r0, #0
    5412:	beq.w	5642 <ExFatFile::write(void const*, unsigned int)+0x2c2>
    5416:	ldr	r0, [r6, #32]
    5418:	ldr	r5, [r6, #24]
        }
      }
    }
    // sector for data write
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    541a:	ldr.w	r7, [r0, #1060]	; 0x424
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    541e:	ldrb.w	lr, [r0, #1085]	; 0x43d
    5422:	lsrs	r4, r4, #9
    5424:	subs	r5, #2
    5426:	adds	r1, r4, r7
    5428:	lsl.w	r5, r5, lr
    542c:	add	r1, r5

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    542e:	cmp.w	r9, #0
    5432:	bne.w	5548 <ExFatFile::write(void const*, unsigned int)+0x1c8>
    5436:	cmp.w	r8, #512	; 0x200
    543a:	bcs.n	54f2 <ExFatFile::write(void const*, unsigned int)+0x172>
      // lesser of space and amount to write
      if (n > toWrite) {
        n = toWrite;
      }

      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    543c:	ldrd	r2, r3, [r6, #16]
    5440:	ldrd	r4, r5, [r6]
    5444:	cmp.w	r8, #512	; 0x200
    5448:	mov	r7, r8
    544a:	it	cs
    544c:	movcs.w	r7, #512	; 0x200
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    5450:	cmp	r5, r3
    5452:	it	eq
    5454:	cmpeq	r4, r2
    5456:	ite	cc
    5458:	movcc	r2, #1
    545a:	movcs	r2, #3
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    545c:	add.w	r0, r0, #524	; 0x20c
    5460:	bl	4450 <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    5464:	cmp	r0, #0
    5466:	beq.n	5562 <ExFatFile::write(void const*, unsigned int)+0x1e2>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    5468:	add	r0, r9
    546a:	mov	r2, r7
    546c:	mov	r1, sl
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    546e:	add	r9, r7
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    5470:	bl	9280 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5474:	cmp.w	r9, #512	; 0x200
    5478:	beq.w	55c0 <ExFatFile::write(void const*, unsigned int)+0x240>
    547c:	mov	r0, r7
    547e:	movs	r1, #0
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5480:	ldrd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    5484:	ldrd	r4, r5, [r6, #16]
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5488:	adds.w	fp, r2, r0
    548c:	adc.w	ip, r3, r1
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    5490:	cmp	r5, ip
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5492:	mov	r2, fp
    5494:	mov	r3, ip
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    5496:	it	eq
    5498:	cmpeq	r4, fp
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    549a:	add	sl, r7
    toWrite -= n;
    549c:	rsb	r8, r7, r8
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    54a0:	strd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    54a4:	bcs.n	54ba <ExFatFile::write(void const*, unsigned int)+0x13a>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    54a6:	ldrb.w	r1, [r6, #51]	; 0x33
      m_validLength = m_curPosition;
    54aa:	mov	r4, ip
    54ac:	mov	r3, fp
    54ae:	strd	r3, r4, [r6, #16]
    }
    m_curPosition += n;
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
    54b2:	orn	r1, r1, #127	; 0x7f
    54b6:	strb.w	r1, [r6, #51]	; 0x33
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    54ba:	cmp.w	r8, #0
    54be:	bne.w	53b2 <ExFatFile::write(void const*, unsigned int)+0x32>
    54c2:	mov	r2, fp
    54c4:	mov	r3, ip
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    54c6:	ldrd	r0, r1, [r6, #8]
    54ca:	cmp	r1, r3
    54cc:	it	eq
    54ce:	cmpeq	r0, r2
    54d0:	bcc.w	5620 <ExFatFile::write(void const*, unsigned int)+0x2a0>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    54d4:	ldr	r3, [pc, #388]	; (565c <ExFatFile::write(void const*, unsigned int)+0x2dc>)
    54d6:	ldr	r3, [r3, #0]
    54d8:	cmp	r3, #0
    54da:	beq.w	563e <ExFatFile::write(void const*, unsigned int)+0x2be>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    54de:	ldrb.w	r3, [r6, #51]	; 0x33
    54e2:	ldr	r0, [sp, #4]
    54e4:	orn	r3, r3, #127	; 0x7f
    54e8:	strb.w	r3, [r6, #51]	; 0x33

fail:
  // return for write error
  m_error |= WRITE_ERROR;
  return -1;
}
    54ec:	add	sp, #20
    54ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    54f2:	cmp.w	r8, #1024	; 0x400
    54f6:	bcc.n	5574 <ExFatFile::write(void const*, unsigned int)+0x1f4>
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    54f8:	movs	r3, #1
    54fa:	lsl.w	lr, r3, lr
    54fe:	rsb	lr, r4, lr
    5502:	ldr.w	r3, [r0, #532]	; 0x214
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    5506:	mov.w	r4, r8, lsr #9
    550a:	cmp	r4, lr
    550c:	it	cs
    550e:	movcs	r4, lr
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    5510:	cmp	r1, r3
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    5512:	mov.w	r7, r4, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    5516:	bhi.n	552c <ExFatFile::write(void const*, unsigned int)+0x1ac>
    5518:	adds	r2, r4, r1
    551a:	cmp	r2, r3
    551c:	bls.n	552c <ExFatFile::write(void const*, unsigned int)+0x1ac>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    551e:	add.w	r0, r0, #524	; 0x20c
    5522:	str	r1, [sp, #8]
    5524:	bl	4444 <FsCache::invalidate()>
    5528:	ldr	r0, [r6, #32]
    552a:	ldr	r1, [sp, #8]
    552c:	ldr.w	r0, [r0, #1080]	; 0x438
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t count) {
    return m_blockDev->writeSectors(sector, src, count);
    5530:	ldr	r5, [r0, #0]
    5532:	mov	r3, r4
    5534:	mov	r2, sl
    5536:	ldr	r4, [r5, #28]
    5538:	blx	r4
        // Invalidate cache if cache sector is in the range.
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, ns)) {
    553a:	cmp	r0, #0
    553c:	bne.n	547c <ExFatFile::write(void const*, unsigned int)+0xfc>
        DBG_FAIL_MACRO;
    553e:	movw	r0, #758	; 0x2f6
    5542:	bl	4a70 <dbgPrint(unsigned short)>
        goto fail;
    5546:	b.n	55e2 <ExFatFile::write(void const*, unsigned int)+0x262>
             (clusterOffset >> m_vol->bytesPerSectorShift());

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    5548:	rsb	r7, r9, #512	; 0x200
    554c:	cmp	r7, r8
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    554e:	mov.w	r2, #1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    5552:	add.w	r0, r0, #524	; 0x20c
    5556:	it	cs
    5558:	movcs	r7, r8
    555a:	bl	4450 <FsCache::get(unsigned long, unsigned char)>
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    555e:	cmp	r0, #0
    5560:	bne.n	5468 <ExFatFile::write(void const*, unsigned int)+0xe8>
        DBG_FAIL_MACRO;
    5562:	mov.w	r0, #728	; 0x2d8
    5566:	bl	4a70 <dbgPrint(unsigned short)>
        goto fail;
    556a:	b.n	55e2 <ExFatFile::write(void const*, unsigned int)+0x262>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    556c:	ldr	r5, [r6, #28]
    556e:	cbz	r5, 55ae <ExFatFile::write(void const*, unsigned int)+0x22e>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    5570:	str	r5, [r6, #24]
    5572:	b.n	541a <ExFatFile::write(void const*, unsigned int)+0x9a>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->dataCacheSector() == sector) {
    5574:	ldr.w	r3, [r0, #532]	; 0x214
    5578:	cmp	r1, r3
    557a:	beq.n	55f8 <ExFatFile::write(void const*, unsigned int)+0x278>
    557c:	ldr.w	r0, [r0, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5580:	ldr	r3, [r0, #0]
    5582:	mov	r2, sl
    5584:	ldr	r3, [r3, #24]
    5586:	blx	r3
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    5588:	cmp	r0, #0
    558a:	beq.n	5634 <ExFatFile::write(void const*, unsigned int)+0x2b4>
    558c:	mov.w	r0, #512	; 0x200
    5590:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    5592:	mov.w	r7, #512	; 0x200
    5596:	b.n	5480 <ExFatFile::write(void const*, unsigned int)+0x100>

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
            m_curCluster++;
    5598:	adds	r5, #1
    559a:	str	r5, [r6, #24]
    559c:	b.n	541a <ExFatFile::write(void const*, unsigned int)+0x9a>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    559e:	mov	r1, r5
    55a0:	ldr	r2, [sp, #12]
    55a2:	bl	47ac <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
        if (fg == 0) {
    55a6:	cmp	r0, #0
    55a8:	bne.w	5416 <ExFatFile::write(void const*, unsigned int)+0x96>
    55ac:	b.n	540a <ExFatFile::write(void const*, unsigned int)+0x8a>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    55ae:	mov	r0, r6
    55b0:	bl	4aac <ExFatFile::addCluster()>
    55b4:	cmp	r0, #0
    55b6:	beq.n	564c <ExFatFile::write(void const*, unsigned int)+0x2cc>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    55b8:	ldr	r5, [r6, #24]
    55ba:	str	r5, [r6, #28]
    55bc:	ldr	r0, [r6, #32]
    55be:	b.n	541a <ExFatFile::write(void const*, unsigned int)+0x9a>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    55c0:	ldr	r0, [r6, #32]
    55c2:	add.w	r0, r0, #524	; 0x20c
    55c6:	bl	44dc <FsCache::sync()>
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->dataCacheSync()) {
    55ca:	cmp	r0, #0
    55cc:	bne.w	547c <ExFatFile::write(void const*, unsigned int)+0xfc>
          DBG_FAIL_MACRO;
    55d0:	mov.w	r0, #736	; 0x2e0
    55d4:	bl	4a70 <dbgPrint(unsigned short)>
          goto fail;
    55d8:	b.n	55e2 <ExFatFile::write(void const*, unsigned int)+0x262>
  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    55da:	mov.w	r0, #652	; 0x28c
    55de:	bl	4a70 <dbgPrint(unsigned short)>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    55e2:	ldrb.w	r3, [r6, #50]	; 0x32
    55e6:	orr.w	r3, r3, #1
    55ea:	strb.w	r3, [r6, #50]	; 0x32
  return -1;
    55ee:	mov.w	r0, #4294967295
}
    55f2:	add	sp, #20
    55f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    55f8:	add.w	r0, r0, #524	; 0x20c
    55fc:	str	r1, [sp, #8]
    55fe:	bl	4444 <FsCache::invalidate()>
    5602:	ldr	r0, [r6, #32]
    5604:	ldr	r1, [sp, #8]
    5606:	b.n	557c <ExFatFile::write(void const*, unsigned int)+0x1fc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_validLength)) {
    5608:	ldrd	r2, r3, [r0, #16]
    560c:	bl	3d2c <ExFatFile::seekSet(unsigned long long)>
    5610:	cmp	r0, #0
    5612:	bne.w	539c <ExFatFile::write(void const*, unsigned int)+0x1c>
      DBG_FAIL_MACRO;
    5616:	movw	r0, #658	; 0x292
    561a:	bl	4a70 <dbgPrint(unsigned short)>
      goto fail;
    561e:	b.n	55e2 <ExFatFile::write(void const*, unsigned int)+0x262>
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5620:	ldrb.w	r1, [r6, #51]	; 0x33
    5624:	ldr	r0, [sp, #4]
    5626:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    562a:	strd	r2, r3, [r6, #8]
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    562e:	strb.w	r1, [r6, #51]	; 0x33
    5632:	b.n	55f2 <ExFatFile::write(void const*, unsigned int)+0x272>
      n = m_vol->bytesPerSector();
      if (m_vol->dataCacheSector() == sector) {
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
    5634:	movw	r0, #769	; 0x301
    5638:	bl	4a70 <dbgPrint(unsigned short)>
        goto fail;
    563c:	b.n	55e2 <ExFatFile::write(void const*, unsigned int)+0x262>
    563e:	ldr	r0, [sp, #4]
    5640:	b.n	55f2 <ExFatFile::write(void const*, unsigned int)+0x272>
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
            DBG_FAIL_MACRO;
    5642:	movw	r0, #689	; 0x2b1
    5646:	bl	4a70 <dbgPrint(unsigned short)>
            goto fail;
    564a:	b.n	55e2 <ExFatFile::write(void const*, unsigned int)+0x262>
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
            DBG_FAIL_MACRO;
    564c:	movw	r0, #697	; 0x2b9
    5650:	bl	4a70 <dbgPrint(unsigned short)>
            goto fail;
    5654:	b.n	55e2 <ExFatFile::write(void const*, unsigned int)+0x262>
    5656:	ldrd	r2, r3, [r6]
    565a:	b.n	54c6 <ExFatFile::write(void const*, unsigned int)+0x146>
    565c:	.word	0x1fff198c

00005660 <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    5660:	push	{r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5662:	movs	r1, #10
    5664:	mov	r5, r0
    5666:	ldr	r0, [pc, #40]	; (5690 <dbgPrint(unsigned short)+0x30>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    5668:	ldr	r4, [pc, #40]	; (5694 <dbgPrint(unsigned short)+0x34>)
    566a:	bl	9480 <usb_serial_write>
    566e:	movs	r1, #11
    5670:	ldr	r0, [pc, #36]	; (5698 <dbgPrint(unsigned short)+0x38>)
    5672:	bl	9480 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    5676:	movs	r0, #46	; 0x2e
    5678:	bl	9588 <usb_serial_putchar>
    567c:	mov	r1, r5
    567e:	mov	r0, r4
    5680:	bl	aa68 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    5684:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    5686:	ldmia.w	sp!, {r3, r4, r5, lr}
    568a:	b.w	a99c <Print::println()>
    568e:	nop
    5690:	.word	0x0000fc70
    5694:	.word	0x1fff098c
    5698:	.word	0x0000fcbc

0000569c <FatFile::addCluster()>:
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    569c:	mov	r2, r0
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    569e:	push	{r4, r5, r6, lr}
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    56a0:	ldr.w	r5, [r2, #16]!
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    56a4:	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    56a6:	mov	r1, r5
    56a8:	ldr	r0, [r0, #8]
    56aa:	bl	68cc <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    56ae:	mov	r6, r0
    56b0:	cbz	r0, 56d4 <FatFile::addCluster()+0x38>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    56b2:	cbz	r5, 56cc <FatFile::addCluster()+0x30>
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    56b4:	ldr	r3, [r4, #16]
    56b6:	adds	r5, #1
    56b8:	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    56ba:	ldrb	r3, [r4, #2]
    56bc:	it	ne
    56be:	andne.w	r3, r3, #191	; 0xbf
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    56c2:	orn	r3, r3, #127	; 0x7f
    56c6:	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    56c8:	mov	r0, r6
    56ca:	pop	{r4, r5, r6, pc}
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    56cc:	ldrb	r3, [r4, #2]
    56ce:	orr.w	r3, r3, #64	; 0x40
    56d2:	b.n	56c2 <FatFile::addCluster()+0x26>
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    56d4:	movs	r0, #35	; 0x23
    56d6:	bl	5660 <dbgPrint(unsigned short)>
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    56da:	mov	r0, r6
    56dc:	pop	{r4, r5, r6, pc}
    56de:	nop

000056e0 <FatFile::addDirCluster()>:
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    56e0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    56e4:	ldrb	r3, [r0, #0]
    56e6:	and.w	r3, r3, #32
    56ea:	cmp	r3, #0
    56ec:	bne.n	5772 <FatFile::addDirCluster()+0x92>
    56ee:	and.w	r4, r3, #255	; 0xff
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    56f2:	ldr	r2, [r0, #20]
    56f4:	ldr	r3, [pc, #184]	; (57b0 <FatFile::addDirCluster()+0xd0>)
    56f6:	cmp	r2, r3
    56f8:	mov	r5, r0
    56fa:	bhi.n	5764 <FatFile::addDirCluster()+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    56fc:	bl	569c <FatFile::addCluster()>
    5700:	mov	r8, r0
    5702:	cmp	r0, #0
    5704:	beq.n	5782 <FatFile::addDirCluster()+0xa2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    5706:	ldr	r1, [r5, #16]
    5708:	ldr	r0, [r5, #8]
    570a:	bl	67a0 <FatPartition::clusterStartSector(unsigned long) const>
    570e:	mov	r6, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    5710:	ldr	r0, [r5, #8]
    5712:	mov	r1, r6
    5714:	adds	r0, #40	; 0x28
    5716:	movs	r2, #5
    5718:	bl	6714 <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    571c:	mov	r7, r0
    571e:	cmp	r0, #0
    5720:	beq.n	57a6 <FatFile::addDirCluster()+0xc6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
    5722:	mov.w	r2, #512	; 0x200
    5726:	mov	r1, r4
    5728:	bl	c07c <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    572c:	ldr	r3, [r5, #8]
    572e:	ldrb	r2, [r3, #4]
    5730:	cmp	r2, #1
    5732:	bls.n	578e <FatFile::addDirCluster()+0xae>
    5734:	movs	r4, #1
    5736:	b.n	5740 <FatFile::addDirCluster()+0x60>
    5738:	ldr	r3, [r5, #8]
    573a:	ldrb	r2, [r3, #4]
    573c:	cmp	r2, r4
    573e:	bls.n	578e <FatFile::addDirCluster()+0xae>
    5740:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5742:	ldr	r3, [r0, #0]
    5744:	adds	r1, r4, r6
    5746:	ldr	r3, [r3, #24]
    5748:	mov	r2, r7
    574a:	blx	r3
    574c:	adds	r4, #1
    if (!m_vol->writeSector(sector + i, pc->data)) {
    574e:	mov	r3, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    5750:	uxtb	r4, r4
    if (!m_vol->writeSector(sector + i, pc->data)) {
    5752:	cmp	r0, #0
    5754:	bne.n	5738 <FatFile::addDirCluster()+0x58>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    5756:	mov	r8, r3
  }
  memset(pc, 0, m_vol->bytesPerSector());
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    if (!m_vol->writeSector(sector + i, pc->data)) {
      DBG_FAIL_MACRO;
    5758:	movs	r0, #83	; 0x53
    575a:	bl	5660 <dbgPrint(unsigned short)>
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
}
    575e:	mov	r0, r8
    5760:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    5764:	movs	r0, #66	; 0x42
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    5766:	mov	r8, r4
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    5768:	bl	5660 <dbgPrint(unsigned short)>
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
}
    576c:	mov	r0, r8
    576e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
bool FatFile::addDirCluster() {
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    5772:	movs	r0, #61	; 0x3d
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    5774:	mov.w	r8, #0
bool FatFile::addDirCluster() {
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    5778:	bl	5660 <dbgPrint(unsigned short)>
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
}
    577c:	mov	r0, r8
    577e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    DBG_FAIL_MACRO;
    5782:	movs	r0, #70	; 0x46
    5784:	bl	5660 <dbgPrint(unsigned short)>
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
}
    5788:	mov	r0, r8
    578a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    578e:	ldrb	r3, [r3, #6]
    5790:	ldr	r1, [r5, #20]
    5792:	mov.w	r2, #512	; 0x200
    5796:	lsl.w	r3, r2, r3
    579a:	uxtah	r3, r1, r3
    579e:	str	r3, [r5, #20]
  return true;

fail:
  return false;
}
    57a0:	mov	r0, r8
    57a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    DBG_FAIL_MACRO;
    57a6:	movs	r0, #76	; 0x4c
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    57a8:	mov	r8, r7
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    DBG_FAIL_MACRO;
    57aa:	bl	5660 <dbgPrint(unsigned short)>
    57ae:	b.n	576c <FatFile::addDirCluster()+0x8c>
    57b0:	.word	0x001ffdff

000057b4 <FatFile::cacheDirEntry(unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    57b4:	push	{r3, r4, r5, lr}
    57b6:	mov	r5, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    57b8:	ldr	r0, [r0, #8]
    57ba:	mov	r2, r1
    57bc:	adds	r0, #40	; 0x28
    57be:	ldr	r1, [r5, #24]
    57c0:	bl	6714 <FatCache::read(unsigned long, unsigned char)>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    57c4:	mov	r4, r0
    57c6:	cbz	r0, 57d4 <FatFile::cacheDirEntry(unsigned char)+0x20>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    57c8:	ldrh	r0, [r5, #4]
    57ca:	and.w	r0, r0, #15
    57ce:	add.w	r0, r4, r0, lsl #5

fail:
  return nullptr;
}
    57d2:	pop	{r3, r4, r5, pc}
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    DBG_FAIL_MACRO;
    57d4:	movs	r0, #101	; 0x65
    57d6:	bl	5660 <dbgPrint(unsigned short)>
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);

fail:
  return nullptr;
    57da:	mov	r0, r4
    57dc:	pop	{r3, r4, r5, pc}
    57de:	nop

000057e0 <FatFile::sync() [clone .part.38]>:
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    57e0:	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    57e2:	ldrsb.w	r3, [r0, #2]
    57e6:	cmp	r3, #0
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    57e8:	sub	sp, #8
    57ea:	mov	r4, r0
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    57ec:	blt.n	582a <FatFile::sync() [clone .part.38]+0x4a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    57ee:	ldr	r5, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    57f0:	add.w	r0, r5, #40	; 0x28
    57f4:	bl	6790 <FatCache::sync()>
    57f8:	cbnz	r0, 5810 <FatFile::sync() [clone .part.38]+0x30>
    return true;
  }
  DBG_FAIL_MACRO;
    57fa:	movw	r0, #1183	; 0x49f
    57fe:	bl	5660 <dbgPrint(unsigned short)>

fail:
  m_error |= WRITE_ERROR;
    5802:	ldrb	r3, [r4, #1]
    5804:	orr.w	r3, r3, #1
    5808:	strb	r3, [r4, #1]
  return false;
    580a:	movs	r0, #0
}
    580c:	add	sp, #8
    580e:	pop	{r4, r5, r6, pc}
    5810:	add.w	r0, r5, #564	; 0x234
    5814:	bl	6790 <FatCache::sync()>
    5818:	cmp	r0, #0
    581a:	beq.n	57fa <FatFile::sync() [clone .part.38]+0x1a>
    581c:	ldr	r0, [r5, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    581e:	ldr	r3, [r0, #0]
    5820:	ldr	r3, [r3, #20]
    5822:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5824:	cmp	r0, #0
    5826:	beq.n	57fa <FatFile::sync() [clone .part.38]+0x1a>
    5828:	b.n	580c <FatFile::sync() [clone .part.38]+0x2c>
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    582a:	movs	r1, #1
    582c:	bl	57b4 <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    5830:	mov	r5, r0
    5832:	cbz	r0, 5876 <FatFile::sync() [clone .part.38]+0x96>
    5834:	ldrb	r3, [r0, #0]
    5836:	cmp	r3, #229	; 0xe5
    5838:	beq.n	5876 <FatFile::sync() [clone .part.38]+0x96>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    583a:	ldrb	r3, [r4, #0]
    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    583c:	ldr	r2, [pc, #64]	; (5880 <FatFile::sync() [clone .part.38]+0xa0>)
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    583e:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    5840:	itt	mi
    5842:	ldrmi	r3, [r4, #28]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    5844:	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    5846:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    5848:	ldr	r6, [r2, #0]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    584a:	strh	r3, [r0, #26]
    584c:	lsrs	r3, r3, #16
    584e:	strh	r3, [r0, #20]
    5850:	cbz	r6, 586c <FatFile::sync() [clone .part.38]+0x8c>
      FsDateTime::callback(&date, &time, &ms10);
    5852:	add.w	r2, sp, #3
    5856:	add.w	r1, sp, #6
    585a:	add	r0, sp, #4
    585c:	blx	r6
      setLe16(dir->modifyDate, date);
    585e:	ldrh.w	r3, [sp, #4]
    5862:	ldrh.w	r2, [sp, #6]
    5866:	strh	r3, [r5, #24]
    5868:	strh	r3, [r5, #18]
    586a:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    586c:	ldrb	r3, [r4, #2]
    586e:	and.w	r3, r3, #127	; 0x7f
    5872:	strb	r3, [r4, #2]
    5874:	b.n	57ee <FatFile::sync() [clone .part.38]+0xe>
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
      DBG_FAIL_MACRO;
    5876:	movw	r0, #1158	; 0x486
    587a:	bl	5660 <dbgPrint(unsigned short)>
    587e:	b.n	5802 <FatFile::sync() [clone .part.38]+0x22>
    5880:	.word	0x1fff198c

00005884 <FatFile::close()>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    5884:	push	{r4, lr}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5886:	ldrb	r3, [r0, #0]

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    5888:	mov	r4, r0
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    588a:	cbnz	r3, 5896 <FatFile::close()+0x12>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    588c:	movs	r3, #0
    588e:	strb	r3, [r4, #0]
  m_flags = 0;
    5890:	strb	r3, [r4, #2]
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
    5892:	movs	r0, #1
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return rtn;
}
    5894:	pop	{r4, pc}
    5896:	bl	57e0 <FatFile::sync() [clone .part.38]>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    589a:	movs	r3, #0
    589c:	strb	r3, [r4, #0]
  m_flags = 0;
    589e:	strb	r3, [r4, #2]
  return rtn;
}
    58a0:	pop	{r4, pc}
    58a2:	nop

000058a4 <FatFile::openRoot(FatVolume*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    58a4:	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
    58a6:	ldrb	r4, [r0, #0]
    58a8:	cbnz	r4, 58d6 <FatFile::openRoot(FatVolume*)+0x32>
    58aa:	mov	r5, r0
    58ac:	mov	r6, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    58ae:	movs	r2, #36	; 0x24
    58b0:	mov	r1, r4
    58b2:	bl	c07c <memset>

  m_vol = vol;
    58b6:	str	r6, [r5, #8]
  switch (vol->fatType()) {
    58b8:	ldrb	r3, [r6, #7]
    58ba:	cmp	r3, #16
    58bc:	beq.n	58cc <FatFile::openRoot(FatVolume*)+0x28>
    58be:	cmp	r3, #32
    58c0:	bne.n	58e2 <FatFile::openRoot(FatVolume*)+0x3e>
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    58c2:	movs	r3, #64	; 0x40
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    58c4:	movs	r0, #1
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    58c6:	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    58c8:	strb	r0, [r5, #2]
  return true;

fail:
  return false;
}
    58ca:	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    58cc:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    58ce:	movs	r0, #1
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    58d0:	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    58d2:	strb	r0, [r5, #2]
  return true;

fail:
  return false;
}
    58d4:	pop	{r4, r5, r6, pc}
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    58d6:	movw	r0, #639	; 0x27f
    58da:	bl	5660 <dbgPrint(unsigned short)>
  // read only
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
    58de:	movs	r0, #0
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
    58e0:	pop	{r4, r5, r6, pc}
  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    break;

  default:
    DBG_FAIL_MACRO;
    58e2:	movw	r0, #658	; 0x292
    58e6:	bl	5660 <dbgPrint(unsigned short)>
  // read only
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
    58ea:	mov	r0, r4
    58ec:	pop	{r4, r5, r6, pc}
    58ee:	nop

000058f0 <FatFile::open(FatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    58f0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    58f4:	mov	r6, r0
    58f6:	sub	sp, #76	; 0x4c
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    58f8:	ldrb	r4, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    58fa:	str	r2, [sp, #4]
    58fc:	movs	r0, #0
    58fe:	strb.w	r0, [sp, #36]	; 0x24
    5902:	strb.w	r0, [sp, #37]	; 0x25
    5906:	strb.w	r0, [sp, #38]	; 0x26
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    590a:	cmp	r4, #0
    590c:	bne.n	5998 <FatFile::open(FatFile*, char const*, int)+0xa8>
    590e:	mov	r9, r3
    5910:	ldrb	r3, [r1, #0]
    5912:	tst.w	r3, #112	; 0x70
    5916:	mov	r5, r1
    5918:	beq.n	5998 <FatFile::open(FatFile*, char const*, int)+0xa8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    591a:	ldrb	r3, [r2, #0]
    591c:	cmp	r3, #47	; 0x2f
    591e:	mov	r0, r2
    5920:	beq.n	597a <FatFile::open(FatFile*, char const*, int)+0x8a>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5922:	mov.w	r8, #0
    5926:	b.n	5934 <FatFile::open(FatFile*, char const*, int)+0x44>
    5928:	ldr	r0, [sp, #4]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    592a:	strb.w	r8, [r6]
  m_flags = 0;
    592e:	strb.w	r8, [r6, #2]
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    5932:	add	r5, sp, #36	; 0x24
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5934:	add	r2, sp, #4
    5936:	add	r1, sp, #12
    5938:	bl	6df8 <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    593c:	add	r2, sp, #12
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    593e:	mov	r7, r0
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5940:	mov	r1, r5
    5942:	movs	r3, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5944:	cmp	r0, #0
    5946:	beq.n	59aa <FatFile::open(FatFile*, char const*, int)+0xba>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    5948:	ldr	r4, [sp, #4]
    594a:	ldrb	r4, [r4, #0]
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    594c:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    594e:	cmp	r4, #0
    5950:	beq.n	59ba <FatFile::open(FatFile*, char const*, int)+0xca>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5952:	bl	734c <FatFile::open(FatFile*, fname_t*, int)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5956:	mov	r5, r6
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5958:	mov	r7, r0
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    595a:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    595c:	cmp	r0, #0
    595e:	beq.n	59d0 <FatFile::open(FatFile*, char const*, int)+0xe0>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5960:	ldmia	r5!, {r0, r1, r2, r3}
    5962:	stmia	r4!, {r0, r1, r2, r3}
    5964:	ldmia	r5!, {r0, r1, r2, r3}
    5966:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5968:	ldrb	r3, [r6, #0]
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    596a:	ldr	r2, [r5, #0]
    596c:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    596e:	cmp	r3, #0
    5970:	beq.n	5928 <FatFile::open(FatFile*, char const*, int)+0x38>
    5972:	mov	r0, r6
    5974:	bl	57e0 <FatFile::sync() [clone .part.38]>
    5978:	b.n	5928 <FatFile::open(FatFile*, char const*, int)+0x38>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    597a:	adds	r0, #1
    597c:	str	r0, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    597e:	ldrb	r3, [r0, #0]
    5980:	cmp	r3, #47	; 0x2f
    5982:	beq.n	597a <FatFile::open(FatFile*, char const*, int)+0x8a>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    5984:	ldr	r1, [r5, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
    5986:	cbz	r3, 59e0 <FatFile::open(FatFile*, char const*, int)+0xf0>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    5988:	add	r0, sp, #36	; 0x24
    598a:	bl	58a4 <FatFile::openRoot(FatVolume*)>
    598e:	mov	r7, r0
    5990:	cbz	r0, 59ea <FatFile::open(FatFile*, char const*, int)+0xfa>
    5992:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    5994:	add	r5, sp, #36	; 0x24
    5996:	b.n	5922 <FatFile::open(FatFile*, char const*, int)+0x32>
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    5998:	mov.w	r0, #418	; 0x1a2
    599c:	bl	5660 <dbgPrint(unsigned short)>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    59a0:	movs	r7, #0
}
    59a2:	mov	r0, r7
    59a4:	add	sp, #76	; 0x4c
    59a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
    59aa:	mov.w	r0, #436	; 0x1b4
    59ae:	bl	5660 <dbgPrint(unsigned short)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    59b2:	mov	r0, r7
    59b4:	add	sp, #76	; 0x4c
    59b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return open(dirFile, &fname, oflag);
    59ba:	mov	r3, r9
    59bc:	add	r2, sp, #12
    59be:	mov	r1, r5
    59c0:	mov	r0, r6
    59c2:	bl	734c <FatFile::open(FatFile*, fname_t*, int)>
    59c6:	mov	r7, r0

fail:
  return false;
}
    59c8:	mov	r0, r7
    59ca:	add	sp, #76	; 0x4c
    59cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
    59d0:	movw	r0, #443	; 0x1bb
    59d4:	bl	5660 <dbgPrint(unsigned short)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    59d8:	mov	r0, r7
    59da:	add	sp, #76	; 0x4c
    59dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    59e0:	mov	r0, r6
    59e2:	bl	58a4 <FatFile::openRoot(FatVolume*)>
    59e6:	mov	r7, r0
    59e8:	b.n	59a2 <FatFile::open(FatFile*, char const*, int)+0xb2>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
      DBG_FAIL_MACRO;
    59ea:	movw	r0, #429	; 0x1ad
    59ee:	bl	5660 <dbgPrint(unsigned short)>
      goto fail;
    59f2:	b.n	59a2 <FatFile::open(FatFile*, char const*, int)+0xb2>

000059f4 <FatFile::open(FatVolume*, char const*, int)>:
bool FatFile::open(const char* path, oflag_t oflag) {
  return open(FatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    59f4:	cbz	r1, 59fe <FatFile::open(FatVolume*, char const*, int)+0xa>
    59f6:	add.w	r1, r1, #1088	; 0x440
    59fa:	b.w	58f0 <FatFile::open(FatFile*, char const*, int)>
}
    59fe:	mov	r0, r1
    5a00:	bx	lr
    5a02:	nop

00005a04 <FatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    5a04:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    5a08:	ldrb	r3, [r0, #2]
    5a0a:	lsls	r7, r3, #31
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    5a0c:	sub	sp, #12
    5a0e:	mov	r5, r0
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    5a10:	bpl.w	5bbc <FatFile::read(void*, unsigned int)+0x1b8>
    5a14:	mov	r7, r1
    5a16:	ldrb	r1, [r0, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    5a18:	lsls	r6, r1, #28
    5a1a:	mov	r9, r2
    5a1c:	bmi.w	5b2e <FatFile::read(void*, unsigned int)+0x12a>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
    5a20:	lsls	r4, r1, #26
    5a22:	bpl.n	5a36 <FatFile::read(void*, unsigned int)+0x32>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    5a24:	ldr	r2, [r0, #8]
    if (nbyte > tmp16) {
    5a26:	ldr	r3, [r0, #20]
    5a28:	ldrh	r2, [r2, #8]
    5a2a:	rsb	r3, r3, r2, lsl #5
    5a2e:	uxth	r3, r3
    5a30:	cmp	r9, r3
    5a32:	it	cs
    5a34:	movcs	r9, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5a36:	cmp.w	r9, #0
    5a3a:	beq.w	5b78 <FatFile::read(void*, unsigned int)+0x174>
    5a3e:	ldr	r3, [r5, #20]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5a40:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    5a42:	lsls	r0, r1, #26
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5a44:	mov	r6, r9
    5a46:	mov.w	r8, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5a4a:	add.w	sl, r5, #16
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5a4e:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    5a52:	bpl.n	5ad4 <FatFile::read(void*, unsigned int)+0xd0>
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    5a54:	ldr	r1, [r2, #32]
    5a56:	add.w	r1, r1, r3, lsr #9
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    5a5a:	cmp.w	fp, #0
    5a5e:	bne.n	5b08 <FatFile::read(void*, unsigned int)+0x104>
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    5a60:	cmp.w	r6, #512	; 0x200
    5a64:	bcc.n	5b08 <FatFile::read(void*, unsigned int)+0x104>
    5a66:	ldr	r3, [r2, #48]	; 0x30
        || sector == m_vol->cacheSectorNumber()) {
    5a68:	cmp	r1, r3
    5a6a:	beq.n	5b08 <FatFile::read(void*, unsigned int)+0x104>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    5a6c:	cmp.w	r6, #1024	; 0x400
    5a70:	bcc.n	5b40 <FatFile::read(void*, unsigned int)+0x13c>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isRootFixed()) {
    5a72:	ldrb	r0, [r5, #0]
    5a74:	lsls	r0, r0, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    5a76:	mov.w	fp, r6, lsr #9
      if (!isRootFixed()) {
    5a7a:	bmi.n	5a88 <FatFile::read(void*, unsigned int)+0x84>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    5a7c:	ldrb	r0, [r2, #4]
    5a7e:	rsb	r0, r8, r0
    5a82:	cmp	fp, r0
    5a84:	it	cs
    5a86:	movcs	fp, r0
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    5a88:	cmp	r1, r3
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    5a8a:	mov.w	r4, fp, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    5a8e:	bhi.n	5aaa <FatFile::read(void*, unsigned int)+0xa6>
    5a90:	add	r3, fp
    5a92:	cmp	r1, r3
    5a94:	bcs.n	5aaa <FatFile::read(void*, unsigned int)+0xa6>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    5a96:	add.w	r0, r2, #40	; 0x28
    5a9a:	str	r1, [sp, #4]
    5a9c:	bl	6790 <FatCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->cacheSyncData()) {
    5aa0:	cmp	r0, #0
    5aa2:	beq.w	5ba8 <FatFile::read(void*, unsigned int)+0x1a4>
    5aa6:	ldr	r2, [r5, #8]
    5aa8:	ldr	r1, [sp, #4]
    5aaa:	ldr	r0, [r2, #0]
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
    5aac:	ldr	r2, [r0, #0]
    5aae:	mov	r3, fp
    5ab0:	ldr.w	fp, [r2, #12]
    5ab4:	mov	r2, r7
    5ab6:	blx	fp
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    5ab8:	cmp	r0, #0
    5aba:	beq.n	5b9e <FatFile::read(void*, unsigned int)+0x19a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    5abc:	ldr	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5abe:	subs	r6, r6, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    5ac0:	add	r3, r4
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    5ac2:	add	r7, r4
    m_curPosition += n;
    5ac4:	str	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5ac6:	beq.n	5b78 <FatFile::read(void*, unsigned int)+0x174>
    5ac8:	ldrb	r1, [r5, #0]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5aca:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    5acc:	lsls	r0, r1, #26
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5ace:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    5ad2:	bmi.n	5a54 <FatFile::read(void*, unsigned int)+0x50>
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    5ad4:	ldrb.w	r8, [r2, #5]
    5ad8:	and.w	r8, r8, r3, lsr #9
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    } else {
      sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
      if (offset == 0 && sectorOfCluster == 0) {
    5adc:	cmp.w	fp, #0
    5ae0:	bne.n	5b3c <FatFile::read(void*, unsigned int)+0x138>
    5ae2:	cmp.w	r8, #0
    5ae6:	bne.n	5b3c <FatFile::read(void*, unsigned int)+0x138>
        // start of new cluster
        if (m_curPosition == 0) {
    5ae8:	cmp	r3, #0
    5aea:	bne.n	5b52 <FatFile::read(void*, unsigned int)+0x14e>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    5aec:	lsls	r1, r1, #25
    5aee:	ite	mi
    5af0:	ldrmi	r1, [r2, #32]
    5af2:	ldrpl	r1, [r5, #32]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
    5af4:	str	r1, [r5, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    5af6:	mov	r0, r2
    5af8:	bl	67a0 <FatPartition::clusterStartSector(unsigned long) const>
    5afc:	ldr	r2, [r5, #8]
    5afe:	add.w	r1, r8, r0
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    5b02:	cmp.w	fp, #0
    5b06:	beq.n	5a60 <FatFile::read(void*, unsigned int)+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    5b08:	add.w	r0, r2, #40	; 0x28
    5b0c:	movs	r2, #0
    5b0e:	bl	6714 <FatCache::read(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
      if (!pc) {
    5b12:	cmp	r0, #0
    5b14:	beq.n	5b84 <FatFile::read(void*, unsigned int)+0x180>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
      // amount to be read from current sector
      n = m_vol->bytesPerSector() - offset;
    5b16:	rsb	r4, fp, #512	; 0x200
    5b1a:	cmp	r4, r6
    5b1c:	it	cs
    5b1e:	movcs	r4, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    5b20:	add.w	r1, r0, fp
    5b24:	mov	r2, r4
    5b26:	mov	r0, r7
    5b28:	bl	9280 <memcpy>
    5b2c:	b.n	5abc <FatFile::read(void*, unsigned int)+0xb8>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    uint32_t tmp32 = m_fileSize - m_curPosition;
    5b2e:	ldr	r3, [r0, #28]
    5b30:	ldr	r2, [r0, #20]
    5b32:	subs	r3, r3, r2
    5b34:	cmp	r9, r3
    5b36:	it	cs
    5b38:	movcs	r9, r3
    5b3a:	b.n	5a36 <FatFile::read(void*, unsigned int)+0x32>
    5b3c:	ldr	r1, [r5, #16]
    5b3e:	b.n	5af6 <FatFile::read(void*, unsigned int)+0xf2>
    5b40:	ldr	r0, [r2, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    5b42:	ldr	r3, [r0, #0]
    5b44:	mov	r2, r7
    5b46:	ldr	r3, [r3, #8]
    5b48:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    5b4a:	cbz	r0, 5bb2 <FatFile::read(void*, unsigned int)+0x1ae>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    5b4c:	mov.w	r4, #512	; 0x200
    5b50:	b.n	5abc <FatFile::read(void*, unsigned int)+0xb8>
        // start of new cluster
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
    5b52:	lsls	r3, r1, #28
    5b54:	bpl.n	5b62 <FatFile::read(void*, unsigned int)+0x15e>
    5b56:	ldrb	r3, [r5, #2]
    5b58:	lsls	r4, r3, #25
    5b5a:	bpl.n	5b62 <FatFile::read(void*, unsigned int)+0x15e>
          m_curCluster++;
    5b5c:	ldr	r1, [r5, #16]
    5b5e:	adds	r1, #1
    5b60:	b.n	5af4 <FatFile::read(void*, unsigned int)+0xf0>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5b62:	mov	r0, r2
    5b64:	ldr	r1, [r5, #16]
    5b66:	mov	r2, sl
    5b68:	bl	67ac <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    5b6c:	cmp	r0, #0
    5b6e:	blt.n	5bd8 <FatFile::read(void*, unsigned int)+0x1d4>
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
    5b70:	beq.n	5bc6 <FatFile::read(void*, unsigned int)+0x1c2>
    5b72:	ldr	r2, [r5, #8]
    5b74:	ldr	r1, [r5, #16]
    5b76:	b.n	5af6 <FatFile::read(void*, unsigned int)+0xf2>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    5b78:	movs	r6, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    5b7a:	rsb	r0, r6, r9

fail:
  m_error |= READ_ERROR;
  return -1;
}
    5b7e:	add	sp, #12
    5b80:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
    5b84:	movw	r0, #750	; 0x2ee
    5b88:	bl	5660 <dbgPrint(unsigned short)>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    5b8c:	ldrb	r3, [r5, #1]
  return -1;
    5b8e:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    5b92:	orr.w	r3, r3, #2
    5b96:	strb	r3, [r5, #1]
  return -1;
}
    5b98:	add	sp, #12
    5b9a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
        DBG_FAIL_MACRO;
    5b9e:	movw	r0, #775	; 0x307
    5ba2:	bl	5660 <dbgPrint(unsigned short)>
        goto fail;
    5ba6:	b.n	5b8c <FatFile::read(void*, unsigned int)+0x188>
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
        // Flush cache if cache sector is in the range.
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
    5ba8:	movw	r0, #770	; 0x302
    5bac:	bl	5660 <dbgPrint(unsigned short)>
          goto fail;
    5bb0:	b.n	5b8c <FatFile::read(void*, unsigned int)+0x188>
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
    5bb2:	movw	r0, #783	; 0x30f
    5bb6:	bl	5660 <dbgPrint(unsigned short)>
        goto fail;
    5bba:	b.n	5b8c <FatFile::read(void*, unsigned int)+0x188>
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    DBG_FAIL_MACRO;
    5bbc:	movw	r0, #689	; 0x2b1
    5bc0:	bl	5660 <dbgPrint(unsigned short)>
    goto fail;
    5bc4:	b.n	5b8c <FatFile::read(void*, unsigned int)+0x188>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
            if (isDir()) {
    5bc6:	ldrb	r3, [r5, #0]
    5bc8:	tst.w	r3, #112	; 0x70
    5bcc:	bne.n	5b7a <FatFile::read(void*, unsigned int)+0x176>
              break;
            }
            DBG_FAIL_MACRO;
    5bce:	movw	r0, #733	; 0x2dd
    5bd2:	bl	5660 <dbgPrint(unsigned short)>
            goto fail;
    5bd6:	b.n	5b8c <FatFile::read(void*, unsigned int)+0x188>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
    5bd8:	movw	r0, #726	; 0x2d6
    5bdc:	bl	5660 <dbgPrint(unsigned short)>
            goto fail;
    5be0:	b.n	5b8c <FatFile::read(void*, unsigned int)+0x188>
    5be2:	nop

00005be4 <FatFile::peek()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
    5be4:	push	{r4, r5, r6, lr}
    5be6:	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    5be8:	movs	r2, #1
    5bea:	add.w	r1, sp, #7
    5bee:	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    5bf0:	ldr	r6, [r0, #20]
  uint32_t curCluster = m_curCluster;
    5bf2:	ldr	r5, [r0, #16]
    5bf4:	bl	5a04 <FatFile::read(void*, unsigned int)>
    5bf8:	cmp	r0, #1
    5bfa:	it	eq
    5bfc:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
    5c00:	str	r6, [r4, #20]
    5c02:	it	ne
    5c04:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    5c08:	str	r5, [r4, #16]
  return c;
}
    5c0a:	add	sp, #8
    5c0c:	pop	{r4, r5, r6, pc}
    5c0e:	nop

00005c10 <FatFile::readDirCache(bool)>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    5c10:	push	{r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
    5c12:	ldr	r3, [r0, #20]
    5c14:	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    5c18:	sub	sp, #12
    5c1a:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    5c1c:	cbz	r5, 5c20 <FatFile::readDirCache(bool)+0x10>
    5c1e:	cbnz	r1, 5c48 <FatFile::readDirCache(bool)+0x38>
    int8_t n = read(&n, 1);
    5c20:	movs	r2, #1
    5c22:	add.w	r1, sp, #7
    5c26:	mov	r0, r4
    5c28:	bl	5a04 <FatFile::read(void*, unsigned int)>
    5c2c:	sxtb	r0, r0
    if  (n != 1) {
    5c2e:	cmp	r0, #1
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    int8_t n = read(&n, 1);
    5c30:	strb.w	r0, [sp, #7]
    if  (n != 1) {
    5c34:	bne.n	5c4e <FatFile::readDirCache(bool)+0x3e>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
    5c36:	ldr	r3, [r4, #20]
    5c38:	adds	r3, #31
    5c3a:	str	r3, [r4, #20]
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  /** \return Cache sector address. */
  cache_t* buffer() {
    return &m_buffer;
    5c3c:	ldr	r0, [r4, #8]
    5c3e:	adds	r0, #52	; 0x34
  } else {
    m_curPosition += 32;
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    5c40:	add.w	r0, r0, r5, lsl #5

fail:
  return nullptr;
}
    5c44:	add	sp, #12
    5c46:	pop	{r4, r5, pc}
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
    5c48:	adds	r3, #32
    5c4a:	str	r3, [r0, #20]
    5c4c:	b.n	5c3c <FatFile::readDirCache(bool)+0x2c>
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    int8_t n = read(&n, 1);
    if  (n != 1) {
      if (n != 0) {
    5c4e:	cbz	r0, 5c58 <FatFile::readDirCache(bool)+0x48>
        DBG_FAIL_MACRO;
    5c50:	movw	r0, #834	; 0x342
    5c54:	bl	5660 <dbgPrint(unsigned short)>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

fail:
  return nullptr;
    5c58:	movs	r0, #0
}
    5c5a:	add	sp, #12
    5c5c:	pop	{r4, r5, pc}
    5c5e:	nop

00005c60 <FatFile::seekSet(unsigned long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    5c60:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5c64:	ldrb	r3, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    5c66:	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    5c68:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    5c6a:	cmp	r3, #0
    5c6c:	beq.n	5cde <FatFile::seekSet(unsigned long)+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    5c6e:	ldr	r2, [r0, #20]
    5c70:	cmp	r2, r1
    5c72:	mov	r6, r1
    5c74:	beq.n	5d06 <FatFile::seekSet(unsigned long)+0xa6>
    return true;
  }
  if (pos == 0) {
    5c76:	cbnz	r1, 5c8a <FatFile::seekSet(unsigned long)+0x2a>
    // set position to start of file
    m_curCluster = 0;
    5c78:	str	r1, [r4, #16]
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5c7a:	ldrb	r3, [r4, #2]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    5c7c:	str	r6, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5c7e:	bic.w	r3, r3, #32
    5c82:	strb	r3, [r4, #2]
  return true;
    5c84:	movs	r0, #1
    5c86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    5c8a:	lsls	r0, r3, #28
    5c8c:	bpl.n	5cee <FatFile::seekSet(unsigned long)+0x8e>
    if (pos > m_fileSize) {
    5c8e:	ldr	r1, [r4, #28]
    5c90:	cmp	r6, r1
    5c92:	bhi.n	5d10 <FatFile::seekSet(unsigned long)+0xb0>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    5c94:	ldr.w	lr, [r4, #8]
    5c98:	ldrb.w	r5, [lr, #6]
    5c9c:	adds	r5, #9
    5c9e:	uxtb	r1, r5
    5ca0:	subs	r0, r2, #1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    5ca2:	subs	r5, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    5ca4:	lsrs	r0, r1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    5ca6:	lsrs	r5, r1

  if (nNew < nCur || m_curPosition == 0) {
    5ca8:	cmp	r0, r5
    5caa:	bhi.n	5cae <FatFile::seekSet(unsigned long)+0x4e>
    5cac:	cbnz	r2, 5d0c <FatFile::seekSet(unsigned long)+0xac>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    5cae:	lsls	r3, r3, #25
    5cb0:	ite	mi
    5cb2:	ldrmi.w	r3, [lr, #32]
    5cb6:	ldrpl	r3, [r4, #32]
    5cb8:	str	r3, [r4, #16]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5cba:	add.w	r8, r4, #16
    5cbe:	mov	r2, r8
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    5cc0:	cmp	r5, #0
    5cc2:	beq.n	5c7a <FatFile::seekSet(unsigned long)+0x1a>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5cc4:	ldr	r1, [r4, #16]
    5cc6:	ldr	r0, [r4, #8]
    5cc8:	bl	67ac <FatPartition::fatGet(unsigned long, unsigned long*)>
    5ccc:	cmp	r0, #0
    5cce:	add.w	r5, r5, #4294967295
    5cd2:	bgt.n	5cbe <FatFile::seekSet(unsigned long)+0x5e>
      DBG_FAIL_MACRO;
    5cd4:	movw	r0, #1133	; 0x46d
    5cd8:	bl	5660 <dbgPrint(unsigned short)>
      goto fail;
    5cdc:	b.n	5ce6 <FatFile::seekSet(unsigned long)+0x86>
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    5cde:	mov.w	r0, #1096	; 0x448
    5ce2:	bl	5660 <dbgPrint(unsigned short)>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

fail:
  m_curCluster = tmp;
    5ce6:	str	r7, [r4, #16]
  return false;
    5ce8:	movs	r0, #0
    5cea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (isFile()) {
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
    5cee:	lsls	r1, r3, #26
    5cf0:	bpl.n	5c94 <FatFile::seekSet(unsigned long)+0x34>
    5cf2:	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
    5cf4:	ldrh	r3, [r3, #8]
    5cf6:	cmp.w	r6, r3, lsl #5
    5cfa:	bls.n	5c7a <FatFile::seekSet(unsigned long)+0x1a>
      goto done;
    }
    DBG_FAIL_MACRO;
    5cfc:	movw	r0, #1117	; 0x45d
    5d00:	bl	5660 <dbgPrint(unsigned short)>
    goto fail;
    5d04:	b.n	5ce6 <FatFile::seekSet(unsigned long)+0x86>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    5d06:	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    5d08:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    5d0c:	subs	r5, r5, r0
    5d0e:	b.n	5cba <FatFile::seekSet(unsigned long)+0x5a>
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
    5d10:	movw	r0, #1110	; 0x456
    5d14:	bl	5660 <dbgPrint(unsigned short)>
      goto fail;
    5d18:	b.n	5ce6 <FatFile::seekSet(unsigned long)+0x86>
    5d1a:	nop

00005d1c <FatFile::rmdir()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
    5d1c:	push	{r4, lr}
  // must be open subdirectory
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    5d1e:	ldrb	r3, [r0, #0]
    5d20:	lsls	r2, r3, #27
    5d22:	bmi.n	5d30 <FatFile::rmdir()+0x14>
    DBG_FAIL_MACRO;
    5d24:	mov.w	r0, #976	; 0x3d0
    5d28:	bl	5660 <dbgPrint(unsigned short)>
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
}
    5d2c:	movs	r0, #0
    5d2e:	pop	{r4, pc}
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    5d30:	movs	r1, #0
    5d32:	mov	r4, r0
    5d34:	bl	5c60 <FatFile::seekSet(unsigned long)>
  }
  rewind();

  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    5d38:	movs	r1, #1
    5d3a:	mov	r0, r4
    5d3c:	bl	5c10 <FatFile::readDirCache(bool)>
    if (!dir) {
    5d40:	cbz	r0, 5d60 <FatFile::rmdir()+0x44>
      }
      DBG_FAIL_MACRO;
      goto fail;
    }
    // done if past last used entry
    if (dir->name[0] == FAT_NAME_FREE) {
    5d42:	ldrb	r3, [r0, #0]
    5d44:	cbz	r3, 5d64 <FatFile::rmdir()+0x48>
      break;
    }
    // skip empty slot, '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    5d46:	cmp	r3, #229	; 0xe5
    5d48:	beq.n	5d38 <FatFile::rmdir()+0x1c>
    5d4a:	cmp	r3, #46	; 0x2e
    5d4c:	beq.n	5d38 <FatFile::rmdir()+0x1c>
      continue;
    }
    // error not empty
    if (isFileOrSubdir(dir)) {
    5d4e:	ldrb	r3, [r0, #11]
    5d50:	lsls	r3, r3, #28
    5d52:	bmi.n	5d38 <FatFile::rmdir()+0x1c>
      DBG_FAIL_MACRO;
    5d54:	movw	r0, #1002	; 0x3ea
    5d58:	bl	5660 <dbgPrint(unsigned short)>
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
}
    5d5c:	movs	r0, #0
    5d5e:	pop	{r4, pc}
  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    if (!dir) {
      // EOF if no error.
      if (!getError()) {
    5d60:	ldrb	r3, [r4, #1]
    5d62:	cbnz	r3, 5d7a <FatFile::rmdir()+0x5e>
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    5d64:	ldrb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    5d66:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
    5d68:	orr.w	r3, r3, #2
    5d6c:	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    5d6e:	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    5d70:	mov	r0, r4

fail:
  return false;
}
    5d72:	ldmia.w	sp!, {r4, lr}
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    5d76:	b.w	7064 <FatFile::remove()>
    if (!dir) {
      // EOF if no error.
      if (!getError()) {
        break;
      }
      DBG_FAIL_MACRO;
    5d7a:	movw	r0, #989	; 0x3dd
    5d7e:	bl	5660 <dbgPrint(unsigned short)>
      goto fail;
    5d82:	b.n	5d2c <FatFile::rmdir()+0x10>

00005d84 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    5d84:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d88:	mov	r8, r1
    5d8a:	mov	r7, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    5d8c:	movs	r1, #0
    5d8e:	movs	r2, #36	; 0x24
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    5d90:	mov	r4, r0
    5d92:	mov	r6, r3
    5d94:	ldrb.w	r5, [sp, #24]
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    5d98:	bl	c07c <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
    5d9c:	ldr.w	r0, [r8, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    5da0:	ldr.w	r3, [r8, #32]
    5da4:	str	r3, [r4, #12]
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    5da6:	and.w	r2, r7, #15
    5daa:	add.w	r3, r0, #52	; 0x34
    5dae:	add.w	r2, r3, r2, lsl #5
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
    5db2:	strh	r7, [r4, #4]
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
    5db4:	str	r0, [r4, #8]
    5db6:	ldrb	r1, [r2, #11]
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    5db8:	lsls	r7, r1, #28
    5dba:	bmi.n	5df4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x70>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    5dbc:	and.w	r1, r1, #23
    5dc0:	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    5dc2:	ldrb	r3, [r2, #11]
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
    5dc4:	strb	r5, [r4, #3]
  if (!isFileOrSubdir(dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    5dc6:	tst.w	r3, #24
    m_attributes |= FILE_ATTR_FILE;
    5dca:	it	eq
    5dcc:	orreq.w	r1, r1, #8
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    5dd0:	and.w	r3, r6, #3
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
    5dd4:	it	eq
    5dd6:	strbeq	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    5dd8:	cmp	r3, #1
    5dda:	beq.n	5e82 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xfe>
    5ddc:	cmp	r3, #2
    5dde:	beq.n	5e06 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x82>
    5de0:	cbz	r3, 5e24 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa0>
    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
      break;

    default:
      DBG_FAIL_MACRO;
    5de2:	movw	r0, #541	; 0x21d
    5de6:	bl	5660 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    5dea:	movs	r0, #0
    5dec:	strb	r0, [r4, #0]
  m_flags = 0;
    5dee:	strb	r0, [r4, #2]
  return false;
    5df0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    DBG_FAIL_MACRO;
    5df4:	movw	r0, #514	; 0x202
    5df8:	bl	5660 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    5dfc:	movs	r0, #0
    5dfe:	strb	r0, [r4, #0]
  m_flags = 0;
    5e00:	strb	r0, [r4, #2]
  return false;
    5e02:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    5e06:	ldrb	r3, [r4, #0]
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    5e08:	movs	r5, #3
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    5e0a:	tst.w	r3, #17
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    5e0e:	strb	r5, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    5e10:	beq.n	5e8e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x10a>
      DBG_FAIL_MACRO;
    5e12:	movw	r0, #547	; 0x223
    5e16:	bl	5660 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    5e1a:	movs	r0, #0
    5e1c:	strb	r0, [r4, #0]
  m_flags = 0;
    5e1e:	strb	r0, [r4, #2]
  return false;
    5e20:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
    5e24:	ands.w	lr, r6, #1024	; 0x400
    5e28:	bne.n	5ea6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x122>
    5e2a:	movs	r5, #1
    if (isSubDir() || isReadOnly()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    5e2c:	and.w	r3, r6, #8
    5e30:	orrs	r5, r3
    5e32:	uxtb	r5, r5
    5e34:	strb	r5, [r4, #2]

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    5e36:	ldrh	r1, [r2, #20]
    5e38:	ldrh	r3, [r2, #26]
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);

  m_dirSector = m_vol->cacheSectorNumber();
    5e3a:	ldr	r7, [r0, #48]	; 0x30
    5e3c:	str	r7, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    5e3e:	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
    5e42:	cmp.w	lr, #0
    5e46:	beq.n	5e5a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd6>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    5e48:	cbnz	r1, 5e96 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x112>
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5e4a:	orn	r5, r5, #127	; 0x7f
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    5e4e:	lsls	r3, r6, #17
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5e50:	strb	r5, [r4, #2]
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    5e52:	bmi.n	5e64 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xe0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    5e54:	movs	r0, #1
    5e56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
    5e5a:	str	r1, [r4, #32]
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    5e5c:	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    5e5e:	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    5e60:	lsls	r3, r6, #17
    5e62:	bpl.n	5e54 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd0>
    5e64:	ldr	r1, [r4, #28]
    5e66:	mov	r0, r4
    5e68:	bl	5c60 <FatFile::seekSet(unsigned long)>
    5e6c:	cmp	r0, #0
    5e6e:	bne.n	5e54 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd0>
    DBG_FAIL_MACRO;
    5e70:	mov.w	r0, #572	; 0x23c
    5e74:	bl	5660 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    5e78:	movs	r0, #0
    5e7a:	strb	r0, [r4, #0]
  m_flags = 0;
    5e7c:	strb	r0, [r4, #2]
  return false;
    5e7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    5e82:	ldrb	r3, [r4, #0]
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    5e84:	movs	r5, #2
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    5e86:	tst.w	r3, #17
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    5e8a:	strb	r5, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    5e8c:	bne.n	5e12 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8e>
    5e8e:	sxtb	r5, r5
    5e90:	and.w	lr, r6, #1024	; 0x400
    5e94:	b.n	5e2c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa8>
  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    5e96:	bl	698c <FatPartition::freeChain(unsigned long)>
    5e9a:	cbnz	r0, 5eb0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x12c>
      DBG_FAIL_MACRO;
    5e9c:	movw	r0, #561	; 0x231
    5ea0:	bl	5660 <dbgPrint(unsigned short)>
      goto fail;
    5ea4:	b.n	5dea <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
        DBG_FAIL_MACRO;
    5ea6:	movw	r0, #526	; 0x20e
    5eaa:	bl	5660 <dbgPrint(unsigned short)>
        goto fail;
    5eae:	b.n	5dea <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
    5eb0:	ldrb	r5, [r4, #2]
    5eb2:	b.n	5e4a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc6>

00005eb4 <FatFile::openNext(FatFile*, int)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    5eb4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    5eb8:	ldrb	r3, [r0, #0]
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    5eba:	sub	sp, #12
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    5ebc:	cbnz	r3, 5ec8 <FatFile::openNext(FatFile*, int)+0x14>
    5ebe:	ldrb	r3, [r1, #0]
    5ec0:	tst.w	r3, #112	; 0x70
    5ec4:	mov	r5, r1
    5ec6:	bne.n	5eda <FatFile::openNext(FatFile*, int)+0x26>
    DBG_FAIL_MACRO;
    5ec8:	movw	r0, #591	; 0x24f
    5ecc:	bl	5660 <dbgPrint(unsigned short)>
      lfnOrd = 0;
    }
  }

fail:
  return false;
    5ed0:	movs	r4, #0
}
    5ed2:	mov	r0, r4
    5ed4:	add	sp, #12
    5ed6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5eda:	ldr	r6, [r1, #20]
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    5edc:	ands.w	r7, r6, #31
    5ee0:	bne.n	5ec8 <FatFile::openNext(FatFile*, int)+0x14>
    5ee2:	mov	r8, r0
    5ee4:	mov	r9, r2
    5ee6:	mov	sl, r7
    5ee8:	b.n	5eee <FatFile::openNext(FatFile*, int)+0x3a>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
        lfnOrd = ldir->order & 0X1F;
        checksum = ldir->checksum;
      }
    } else {
      lfnOrd = 0;
    5eea:	movs	r7, #0
    5eec:	ldr	r6, [r5, #20]
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    DirFat_t* dir = dirFile->readDirCache();
    5eee:	movs	r1, #0
    5ef0:	mov	r0, r5
    5ef2:	bl	5c10 <FatFile::readDirCache(bool)>
    if (!dir) {
    5ef6:	mov	r4, r0
    5ef8:	cbz	r0, 5f26 <FatFile::openNext(FatFile*, int)+0x72>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == FAT_NAME_FREE) {
    5efa:	ldrb	r3, [r0, #0]
    5efc:	cmp	r3, #0
    5efe:	beq.n	5ed0 <FatFile::openNext(FatFile*, int)+0x1c>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    5f00:	cmp	r3, #46	; 0x2e
    5f02:	beq.n	5eea <FatFile::openNext(FatFile*, int)+0x36>
    5f04:	cmp	r3, #229	; 0xe5
    5f06:	beq.n	5eea <FatFile::openNext(FatFile*, int)+0x36>
    5f08:	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
    5f0a:	and.w	r2, r1, #8
    5f0e:	and.w	fp, r2, #255	; 0xff
    5f12:	cbz	r2, 5f36 <FatFile::openNext(FatFile*, int)+0x82>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (isLongName(dir)) {
    5f14:	cmp	r1, #15
    5f16:	bne.n	5eea <FatFile::openNext(FatFile*, int)+0x36>
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    5f18:	lsls	r2, r3, #25
    5f1a:	bpl.n	5eec <FatFile::openNext(FatFile*, int)+0x38>
        lfnOrd = ldir->order & 0X1F;
    5f1c:	and.w	r7, r3, #31
        checksum = ldir->checksum;
    5f20:	ldrb.w	sl, [r0, #13]
    5f24:	b.n	5eec <FatFile::openNext(FatFile*, int)+0x38>
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    DirFat_t* dir = dirFile->readDirCache();
    if (!dir) {
      if (dirFile->getError()) {
    5f26:	ldrb	r3, [r5, #1]
    5f28:	cmp	r3, #0
    5f2a:	beq.n	5ed0 <FatFile::openNext(FatFile*, int)+0x1c>
        DBG_FAIL_MACRO;
    5f2c:	mov.w	r0, #600	; 0x258
    5f30:	bl	5660 <dbgPrint(unsigned short)>
    5f34:	b.n	5ed2 <FatFile::openNext(FatFile*, int)+0x1e>
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    5f36:	cbnz	r7, 5f58 <FatFile::openNext(FatFile*, int)+0xa4>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    5f38:	str	r7, [sp, #0]
    5f3a:	mov	r3, r9
    5f3c:	ubfx	r2, r6, #5, #16
    5f40:	mov	r1, r5
    5f42:	mov	r0, r8
    5f44:	bl	5d84 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    5f48:	mov	r4, r0
    5f4a:	cmp	r0, #0
    5f4c:	bne.n	5ed2 <FatFile::openNext(FatFile*, int)+0x1e>
        DBG_FAIL_MACRO;
    5f4e:	movw	r0, #617	; 0x269
    5f52:	bl	5660 <dbgPrint(unsigned short)>
        goto fail;
    5f56:	b.n	5ed2 <FatFile::openNext(FatFile*, int)+0x1e>
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    5f58:	bl	6c70 <FatFile::lfnChecksum(unsigned char*)>
    5f5c:	cmp	sl, r0
    5f5e:	beq.n	5f38 <FatFile::openNext(FatFile*, int)+0x84>
        DBG_FAIL_MACRO;
    5f60:	movw	r0, #613	; 0x265
      lfnOrd = 0;
    }
  }

fail:
  return false;
    5f64:	mov	r4, fp
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
        DBG_FAIL_MACRO;
    5f66:	bl	5660 <dbgPrint(unsigned short)>
        goto fail;
    5f6a:	b.n	5ed2 <FatFile::openNext(FatFile*, int)+0x1e>

00005f6c <FatFile::mkdir(FatFile*, fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    5f6c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    5f70:	ldrb	r3, [r1, #0]
    5f72:	tst.w	r3, #112	; 0x70

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    5f76:	sub	sp, #36	; 0x24
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    5f78:	beq.w	60aa <FatFile::mkdir(FatFile*, fname_t*)+0x13e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    5f7c:	movw	r3, #2562	; 0xa02
    5f80:	mov	r6, r1
    5f82:	mov	r4, r0
    5f84:	bl	734c <FatFile::open(FatFile*, fname_t*, int)>
    5f88:	cmp	r0, #0
    5f8a:	beq.w	609a <FatFile::mkdir(FatFile*, fname_t*)+0x12e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    5f8e:	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    5f90:	movs	r3, #16
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    5f92:	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    5f94:	strb	r3, [r4, #0]

  // allocate and zero first cluster
  if (!addDirCluster()) {
    5f96:	mov	r0, r4
    5f98:	bl	56e0 <FatFile::addDirCluster()>
    5f9c:	cmp	r0, #0
    5f9e:	beq.w	60d0 <FatFile::mkdir(FatFile*, fname_t*)+0x164>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    5fa2:	ldr	r3, [r4, #16]
    5fa4:	str	r3, [r4, #32]
    5fa6:	movs	r1, #0
    5fa8:	mov	r0, r4
    5faa:	bl	5c60 <FatFile::seekSet(unsigned long)>
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5fae:	ldrb	r3, [r4, #0]
    5fb0:	cmp	r3, #0
    5fb2:	bne.w	60ba <FatFile::mkdir(FatFile*, fname_t*)+0x14e>
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    5fb6:	movs	r1, #1
    5fb8:	mov	r0, r4
    5fba:	bl	57b4 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    5fbe:	mov	r5, r0
    5fc0:	cmp	r0, #0
    5fc2:	beq.w	60ea <FatFile::mkdir(FatFile*, fname_t*)+0x17e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    5fc6:	movs	r3, #16
    5fc8:	strb	r3, [r0, #11]

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    5fca:	ldr	r2, [r0, #8]
    5fcc:	ldr	r1, [r5, #4]
    5fce:	ldr	r3, [r5, #12]
    5fd0:	ldr	r0, [r0, #0]
    5fd2:	ldrh.w	r8, [r5, #20]
    5fd6:	ldrh.w	r9, [r5, #26]
    5fda:	mov	r7, sp
    5fdc:	stmia	r7!, {r0, r1, r2, r3}
    5fde:	ldr	r1, [r5, #20]
    5fe0:	ldr	r2, [r5, #24]
    5fe2:	ldr	r3, [r5, #28]
    5fe4:	ldr	r0, [r5, #16]
  dot.name[0] = '.';
    5fe6:	add	r5, sp, #32
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    5fe8:	stmia	r7!, {r0, r1, r2, r3}
  dot.name[0] = '.';
    5fea:	movs	r3, #46	; 0x2e
    5fec:	strb.w	r3, [r5, #-32]!
    5ff0:	add.w	r1, sp, #10
    5ff4:	mov	r3, r5
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
    5ff6:	movs	r2, #32
    5ff8:	strb.w	r2, [r3, #1]!
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    5ffc:	cmp	r1, r3
    5ffe:	bne.n	5ff8 <FatFile::mkdir(FatFile*, fname_t*)+0x8c>
    dot.name[i] = ' ';
  }

  // cache sector for '.'  and '..'
  sector = m_vol->clusterStartSector(m_firstCluster);
    6000:	ldr	r1, [r4, #32]
    6002:	ldr	r0, [r4, #8]
    6004:	bl	67a0 <FatPartition::clusterStartSector(unsigned long) const>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    6008:	ldr	r3, [r4, #8]
    600a:	mov	r1, r0
    600c:	movs	r2, #1
    600e:	add.w	r0, r3, #40	; 0x28
    6012:	bl	6714 <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
  if (!pc) {
    6016:	mov	lr, r0
    6018:	cmp	r0, #0
    601a:	beq.n	60e0 <FatFile::mkdir(FatFile*, fname_t*)+0x174>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    601c:	strh.w	r8, [sp, #20]
    6020:	strh.w	r9, [sp, #26]
    6024:	mov	r7, r5
    6026:	ldmia	r7!, {r0, r1, r2, r3}
    6028:	str.w	r0, [lr]
    602c:	str.w	r1, [lr, #4]
    6030:	str.w	r2, [lr, #8]
    6034:	str.w	r3, [lr, #12]
    6038:	ldmia	r7!, {r0, r1, r2, r3}
    603a:	str.w	r0, [lr, #16]
    603e:	str.w	r1, [lr, #20]
    6042:	str.w	r2, [lr, #24]
    6046:	str.w	r3, [lr, #28]
  // make entry for '..'
  dot.name[1] = '.';
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    604a:	ldr	r3, [r6, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    604c:	strh.w	r3, [sp, #26]
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
  // make entry for '..'
  dot.name[1] = '.';
    6050:	movs	r2, #46	; 0x2e
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    6052:	lsrs	r3, r3, #16
    6054:	strh.w	r3, [sp, #20]
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
  // make entry for '..'
  dot.name[1] = '.';
    6058:	strb.w	r2, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    605c:	ldmia	r5!, {r0, r1, r2, r3}
    605e:	add.w	r6, lr, #32
    6062:	str.w	r0, [lr, #32]
    6066:	str	r1, [r6, #4]
    6068:	str	r2, [r6, #8]
    606a:	str	r3, [r6, #12]
    606c:	ldmia	r5!, {r0, r1, r2, r3}
    606e:	str	r0, [r6, #16]
    6070:	str	r1, [r6, #20]
    6072:	str	r2, [r6, #24]
    6074:	str	r3, [r6, #28]
  // write first sector
  return m_vol->cacheSync();
    6076:	ldr	r4, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    6078:	add.w	r0, r4, #40	; 0x28
    607c:	bl	6790 <FatCache::sync()>
    6080:	cbz	r0, 60a2 <FatFile::mkdir(FatFile*, fname_t*)+0x136>
    6082:	add.w	r0, r4, #564	; 0x234
    6086:	bl	6790 <FatCache::sync()>
    608a:	cbz	r0, 60a2 <FatFile::mkdir(FatFile*, fname_t*)+0x136>
    608c:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    608e:	ldr	r3, [r0, #0]
    6090:	ldr	r3, [r3, #20]

fail:
  return false;
}
    6092:	add	sp, #36	; 0x24
    6094:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6098:	bx	r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    609a:	mov.w	r0, #346	; 0x15a
    609e:	bl	5660 <dbgPrint(unsigned short)>
  // write first sector
  return m_vol->cacheSync();

fail:
  return false;
}
    60a2:	movs	r0, #0
    60a4:	add	sp, #36	; 0x24
    60a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    60aa:	movw	r0, #341	; 0x155
    60ae:	bl	5660 <dbgPrint(unsigned short)>
  // write first sector
  return m_vol->cacheSync();

fail:
  return false;
}
    60b2:	movs	r0, #0
    60b4:	add	sp, #36	; 0x24
    60b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    60ba:	mov	r0, r4
    60bc:	bl	57e0 <FatFile::sync() [clone .part.38]>
  }
  m_firstCluster = m_curCluster;
  // Set to start of dir
  rewind();
  // force entry to device
  if (!sync()) {
    60c0:	cmp	r0, #0
    60c2:	bne.w	5fb6 <FatFile::mkdir(FatFile*, fname_t*)+0x4a>
    DBG_FAIL_MACRO;
    60c6:	movw	r0, #363	; 0x16b
    60ca:	bl	5660 <dbgPrint(unsigned short)>
    60ce:	b.n	60a2 <FatFile::mkdir(FatFile*, fname_t*)+0x136>
  m_flags = FILE_FLAG_READ;
  m_attributes = FILE_ATTR_SUBDIR;

  // allocate and zero first cluster
  if (!addDirCluster()) {
    DBG_FAIL_MACRO;
    60d0:	movw	r0, #355	; 0x163
    60d4:	bl	5660 <dbgPrint(unsigned short)>
  // write first sector
  return m_vol->cacheSync();

fail:
  return false;
}
    60d8:	movs	r0, #0
    60da:	add	sp, #36	; 0x24
    60dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

  // cache sector for '.'  and '..'
  sector = m_vol->clusterStartSector(m_firstCluster);
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
  if (!pc) {
    DBG_FAIL_MACRO;
    60e0:	mov.w	r0, #386	; 0x182
    60e4:	bl	5660 <dbgPrint(unsigned short)>
    60e8:	b.n	60a2 <FatFile::mkdir(FatFile*, fname_t*)+0x136>
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    60ea:	movw	r0, #369	; 0x171
    60ee:	bl	5660 <dbgPrint(unsigned short)>
    60f2:	b.n	60a2 <FatFile::mkdir(FatFile*, fname_t*)+0x136>

000060f4 <FatFile::mkdir(FatFile*, char const*, bool)>:
void FatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    60f4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    60f8:	mov	r6, r0
    60fa:	sub	sp, #72	; 0x48
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    60fc:	ldrb	r4, [r6, #0]
void FatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    60fe:	str	r2, [sp, #4]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    6100:	movs	r0, #0
    6102:	strb.w	r0, [sp, #36]	; 0x24
    6106:	strb.w	r0, [sp, #37]	; 0x25
    610a:	strb.w	r0, [sp, #38]	; 0x26
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    610e:	cmp	r4, #0
    6110:	bne.n	6182 <FatFile::mkdir(FatFile*, char const*, bool)+0x8e>
    6112:	mov	r8, r3
    6114:	ldrb	r3, [r1, #0]
    6116:	tst.w	r3, #112	; 0x70
    611a:	mov	r5, r1
    611c:	beq.n	6182 <FatFile::mkdir(FatFile*, char const*, bool)+0x8e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    611e:	ldrb	r3, [r2, #0]
    6120:	cmp	r3, #47	; 0x2f
    6122:	mov	r0, r2
    6124:	beq.n	6164 <FatFile::mkdir(FatFile*, char const*, bool)+0x70>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    6126:	movs	r7, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    6128:	add	r2, sp, #4
    612a:	add	r1, sp, #12
    612c:	bl	6df8 <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    6130:	add	r2, sp, #12
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    6132:	mov	r4, r0
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    6134:	mov	r1, r5
    6136:	movs	r3, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    6138:	cmp	r0, #0
    613a:	beq.n	61c8 <FatFile::mkdir(FatFile*, char const*, bool)+0xd4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    613c:	ldr	r4, [sp, #4]
    613e:	ldrb	r4, [r4, #0]
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    6140:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    6142:	cmp	r4, #0
    6144:	beq.n	61d8 <FatFile::mkdir(FatFile*, char const*, bool)+0xe4>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    6146:	bl	734c <FatFile::open(FatFile*, fname_t*, int)>
    614a:	mov	r4, r0
    614c:	cbnz	r0, 61a2 <FatFile::mkdir(FatFile*, char const*, bool)+0xae>
      if (!pFlag || !mkdir(parent, &fname)) {
    614e:	cmp.w	r8, #0
    6152:	bne.n	6194 <FatFile::mkdir(FatFile*, char const*, bool)+0xa0>
        DBG_FAIL_MACRO;
    6154:	mov.w	r0, #320	; 0x140
    6158:	bl	5660 <dbgPrint(unsigned short)>
  }
  return mkdir(parent, &fname);

fail:
  return false;
}
    615c:	mov	r0, r4
    615e:	add	sp, #72	; 0x48
    6160:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    6164:	adds	r0, #1
    6166:	str	r0, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    6168:	ldrb	r3, [r0, #0]
    616a:	cmp	r3, #47	; 0x2f
    616c:	beq.n	6164 <FatFile::mkdir(FatFile*, char const*, bool)+0x70>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    616e:	ldr	r1, [r5, #8]
    6170:	add	r0, sp, #36	; 0x24
    6172:	bl	58a4 <FatFile::openRoot(FatVolume*)>
    6176:	mov	r4, r0
    6178:	cmp	r0, #0
    617a:	beq.n	61e6 <FatFile::mkdir(FatFile*, char const*, bool)+0xf2>
    617c:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    617e:	add	r5, sp, #36	; 0x24
    6180:	b.n	6126 <FatFile::mkdir(FatFile*, char const*, bool)+0x32>
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    6182:	movw	r0, #297	; 0x129
    6186:	bl	5660 <dbgPrint(unsigned short)>
    close();
  }
  return mkdir(parent, &fname);

fail:
  return false;
    618a:	movs	r4, #0
}
    618c:	mov	r0, r4
    618e:	add	sp, #72	; 0x48
    6190:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
      if (!pFlag || !mkdir(parent, &fname)) {
    6194:	mov	r1, r5
    6196:	add	r2, sp, #12
    6198:	mov	r0, r6
    619a:	bl	5f6c <FatFile::mkdir(FatFile*, fname_t*)>
    619e:	cmp	r0, #0
    61a0:	beq.n	6154 <FatFile::mkdir(FatFile*, char const*, bool)+0x60>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    61a2:	mov	r5, r6
    61a4:	ldmia	r5!, {r0, r1, r2, r3}
    61a6:	add	r4, sp, #36	; 0x24
    61a8:	stmia	r4!, {r0, r1, r2, r3}
    61aa:	ldmia	r5!, {r0, r1, r2, r3}
    61ac:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    61ae:	ldrb	r3, [r6, #0]
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    61b0:	ldr	r2, [r5, #0]
    61b2:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    61b4:	cbnz	r3, 61c0 <FatFile::mkdir(FatFile*, char const*, bool)+0xcc>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    61b6:	strb	r7, [r6, #0]
  m_flags = 0;
    61b8:	strb	r7, [r6, #2]
    61ba:	ldr	r0, [sp, #4]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    61bc:	add	r5, sp, #36	; 0x24
    61be:	b.n	6128 <FatFile::mkdir(FatFile*, char const*, bool)+0x34>
    61c0:	mov	r0, r6
    61c2:	bl	57e0 <FatFile::sync() [clone .part.38]>
    61c6:	b.n	61b6 <FatFile::mkdir(FatFile*, char const*, bool)+0xc2>
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
    61c8:	mov.w	r0, #312	; 0x138
    61cc:	bl	5660 <dbgPrint(unsigned short)>
  }
  return mkdir(parent, &fname);

fail:
  return false;
}
    61d0:	mov	r0, r4
    61d2:	add	sp, #72	; 0x48
    61d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    61d8:	add	r2, sp, #12
    61da:	mov	r1, r5
    61dc:	mov	r0, r6
    61de:	bl	5f6c <FatFile::mkdir(FatFile*, fname_t*)>
    61e2:	mov	r4, r0
    61e4:	b.n	615c <FatFile::mkdir(FatFile*, char const*, bool)+0x68>
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
      DBG_FAIL_MACRO;
    61e6:	movw	r0, #305	; 0x131
    61ea:	bl	5660 <dbgPrint(unsigned short)>
      goto fail;
    61ee:	b.n	615c <FatFile::mkdir(FatFile*, char const*, bool)+0x68>

000061f0 <FatFile::rename(FatFile*, char const*)>:
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    61f0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    61f4:	ldrb	r4, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    61f6:	sub	sp, #104	; 0x68
    61f8:	movs	r6, #0
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    61fa:	ands.w	r4, r4, #24
    61fe:	strb.w	r6, [sp, #32]
    6202:	strb.w	r6, [sp, #33]	; 0x21
    6206:	strb.w	r6, [sp, #34]	; 0x22
    620a:	strb.w	r6, [sp, #68]	; 0x44
    620e:	strb.w	r6, [sp, #69]	; 0x45
    6212:	strb.w	r6, [sp, #70]	; 0x46
    6216:	bne.n	6228 <FatFile::rename(FatFile*, char const*)+0x38>
    DBG_FAIL_MACRO;
    6218:	movw	r0, #875	; 0x36b
    621c:	bl	5660 <dbgPrint(unsigned short)>
  }
  return m_vol->cacheSync();

fail:
  return false;
}
    6220:	mov	r0, r4
    6222:	add	sp, #104	; 0x68
    6224:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6228:	mov	r8, r2
  if (!USE_LONG_FILE_NAMES && isLFN()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    622a:	ldr	r3, [r1, #8]
    622c:	ldr	r2, [r0, #8]
    622e:	cmp	r2, r3
    6230:	mov	r5, r0
    6232:	mov	r7, r1
    6234:	beq.n	6248 <FatFile::rename(FatFile*, char const*)+0x58>
    DBG_FAIL_MACRO;
    6236:	movw	r0, #885	; 0x375
    623a:	bl	5660 <dbgPrint(unsigned short)>
    goto fail;
  }
  return m_vol->cacheSync();

fail:
  return false;
    623e:	mov	r4, r6
}
    6240:	mov	r0, r4
    6242:	add	sp, #104	; 0x68
    6244:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6248:	bl	57e0 <FatFile::sync() [clone .part.38]>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // sync() and cache directory entry
  sync();
  oldFile = *this;
    624c:	mov	lr, r5
    624e:	ldmia.w	lr!, {r0, r1, r2, r3}
    6252:	add	r4, sp, #68	; 0x44
    6254:	stmia	r4!, {r0, r1, r2, r3}
    6256:	ldmia.w	lr!, {r0, r1, r2, r3}
    625a:	stmia	r4!, {r0, r1, r2, r3}
    625c:	ldr.w	r3, [lr]
    6260:	str	r3, [r4, #0]
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
    6262:	mov	r1, r6
    6264:	mov	r0, r5
    6266:	bl	57b4 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    626a:	mov	r4, r0
    626c:	cmp	r0, #0
    626e:	beq.w	640a <FatFile::rename(FatFile*, char const*)+0x21a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    6272:	ldr	r1, [r4, #4]
    6274:	ldr	r2, [r4, #8]
    6276:	ldr	r3, [r4, #12]
    6278:	ldr	r0, [r0, #0]
  // make directory entry for new path
  if (isFile()) {
    627a:	ldrb.w	ip, [r5]
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    627e:	mov	lr, sp
    6280:	stmia.w	lr!, {r0, r1, r2, r3}
    6284:	ldr	r1, [r4, #20]
    6286:	ldr	r2, [r4, #24]
    6288:	ldr	r3, [r4, #28]
    628a:	ldr	r0, [r4, #16]
  // make directory entry for new path
  if (isFile()) {
    628c:	and.w	r4, ip, #8
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    6290:	stmia.w	lr!, {r0, r1, r2, r3}
  // make directory entry for new path
  if (isFile()) {
    6294:	and.w	r3, r4, #255	; 0xff
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    6298:	mov	r2, r8
    629a:	mov	r1, r7
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
  // make directory entry for new path
  if (isFile()) {
    629c:	cmp	r4, #0
    629e:	bne.w	63ae <FatFile::rename(FatFile*, char const*)+0x1be>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // don't create missing path prefix components
    if (!file.mkdir(dirFile, newPath, false)) {
    62a2:	add	r0, sp, #32
    62a4:	bl	60f4 <FatFile::mkdir(FatFile*, char const*, bool)>
    62a8:	mov	r4, r0
    62aa:	cmp	r0, #0
    62ac:	beq.w	63f6 <FatFile::rename(FatFile*, char const*)+0x206>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
    62b0:	ldr	r6, [sp, #64]	; 0x40
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    62b2:	ldr	r0, [sp, #56]	; 0x38
  m_dirIndex = file.m_dirIndex;
    62b4:	ldrh.w	r1, [sp, #36]	; 0x24
  m_lfnOrd = file.m_lfnOrd;
    62b8:	ldrb.w	r2, [sp, #35]	; 0x23
  m_dirCluster = file.m_dirCluster;
    62bc:	ldr	r3, [sp, #44]	; 0x2c
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    62be:	str	r0, [r5, #24]
  m_dirIndex = file.m_dirIndex;
    62c0:	strh	r1, [r5, #4]
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    62c2:	movs	r7, #0
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
    62c4:	strb	r2, [r5, #3]
  m_dirCluster = file.m_dirCluster;
    62c6:	str	r3, [r5, #12]
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    62c8:	movs	r1, #1
    62ca:	mov	r0, r5
  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    62cc:	strb.w	r7, [sp, #32]
  file.m_flags = 0;
    62d0:	strb.w	r7, [sp, #34]	; 0x22

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    62d4:	bl	57b4 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    62d8:	mov	r4, r0
    62da:	cmp	r0, #0
    62dc:	beq.w	6400 <FatFile::rename(FatFile*, char const*)+0x210>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    62e0:	add	r3, sp, #104	; 0x68
  dir->attributes = entry.attributes;
    62e2:	ldrb.w	r2, [sp, #11]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    62e6:	ldr.w	r0, [r3, #-91]!
    62ea:	str.w	r0, [r4, #13]
    62ee:	ldr	r0, [r3, #4]
    62f0:	str.w	r0, [r4, #17]
    62f4:	ldr	r0, [r3, #8]
    62f6:	str.w	r0, [r4, #21]
    62fa:	ldr	r0, [r3, #12]
    62fc:	str.w	r0, [r4, #25]
    6300:	ldrh	r0, [r3, #16]
    6302:	ldrb	r3, [r3, #18]
    6304:	strh.w	r0, [r4, #29]
    6308:	strb	r3, [r4, #31]
  dir->attributes = entry.attributes;
    630a:	strb	r2, [r4, #11]

  // update dot dot if directory
  if (dirCluster) {
    630c:	cmp	r6, #0
    630e:	beq.n	6384 <FatFile::rename(FatFile*, char const*)+0x194>
    // get new dot dot
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    6310:	mov	r1, r6
    6312:	ldr	r0, [r5, #8]
    6314:	bl	67a0 <FatPartition::clusterStartSector(unsigned long) const>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    6318:	ldr	r3, [r5, #8]
    631a:	mov	r1, r0
    631c:	mov	r2, r7
    631e:	add.w	r0, r3, #40	; 0x28
    6322:	bl	6714 <FatCache::read(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    6326:	mov	r4, r0
    6328:	cmp	r0, #0
    632a:	beq.n	6414 <FatFile::rename(FatFile*, char const*)+0x224>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&entry, &pc->dir[1], sizeof(entry));
    632c:	ldr.w	r0, [r4, #32]!
    6330:	ldr	r1, [r4, #4]
    6332:	ldr	r2, [r4, #8]
    6334:	ldr	r3, [r4, #12]
    6336:	mov	r7, sp
    6338:	stmia	r7!, {r0, r1, r2, r3}
    633a:	ldr	r0, [r4, #16]
    633c:	ldr	r1, [r4, #20]
    633e:	ldr	r2, [r4, #24]
    6340:	ldr	r3, [r4, #28]
    6342:	stmia	r7!, {r0, r1, r2, r3}

    // free unused cluster
    if (!m_vol->freeChain(dirCluster)) {
    6344:	mov	r1, r6
    6346:	ldr	r0, [r5, #8]
    6348:	bl	698c <FatPartition::freeChain(unsigned long)>
    634c:	mov	r4, r0
    634e:	cmp	r0, #0
    6350:	beq.n	63ec <FatFile::rename(FatFile*, char const*)+0x1fc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // store new dot dot
    sector = m_vol->clusterStartSector(m_firstCluster);
    6352:	ldr	r1, [r5, #32]
    6354:	ldr	r0, [r5, #8]
    6356:	bl	67a0 <FatPartition::clusterStartSector(unsigned long) const>
    635a:	ldr	r3, [r5, #8]
    635c:	mov	r1, r0
    635e:	movs	r2, #1
    6360:	add.w	r0, r3, #40	; 0x28
    6364:	bl	6714 <FatCache::read(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    6368:	mov	r4, r0
    636a:	cmp	r0, #0
    636c:	beq.n	641e <FatFile::rename(FatFile*, char const*)+0x22e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
    636e:	mov	r6, sp
    6370:	ldmia	r6!, {r0, r1, r2, r3}
    6372:	str	r0, [r4, #32]
    6374:	str	r1, [r4, #36]	; 0x24
    6376:	str	r2, [r4, #40]	; 0x28
    6378:	str	r3, [r4, #44]	; 0x2c
    637a:	ldmia	r6!, {r0, r1, r2, r3}
    637c:	str	r0, [r4, #48]	; 0x30
    637e:	str	r1, [r4, #52]	; 0x34
    6380:	str	r2, [r4, #56]	; 0x38
    6382:	str	r3, [r4, #60]	; 0x3c
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    6384:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    6386:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    6388:	movs	r3, #8
  if (!oldFile.remove()) {
    638a:	add	r0, sp, #68	; 0x44
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    638c:	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    638e:	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    6392:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    6396:	bl	7064 <FatFile::remove()>
    639a:	mov	r4, r0
    639c:	cbz	r0, 63ca <FatFile::rename(FatFile*, char const*)+0x1da>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return m_vol->cacheSync();
    639e:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    63a0:	add.w	r0, r4, #40	; 0x28
    63a4:	bl	6790 <FatCache::sync()>
    63a8:	cbnz	r0, 63d4 <FatFile::rename(FatFile*, char const*)+0x1e4>
    63aa:	movs	r4, #0
    63ac:	b.n	6220 <FatFile::rename(FatFile*, char const*)+0x30>
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
  // make directory entry for new path
  if (isFile()) {
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    63ae:	movw	r3, #2561	; 0xa01
    63b2:	add	r0, sp, #32
    63b4:	bl	58f0 <FatFile::open(FatFile*, char const*, int)>
    63b8:	mov	r4, r0
    63ba:	cmp	r0, #0
    63bc:	bne.w	62b2 <FatFile::rename(FatFile*, char const*)+0xc2>
      DBG_FAIL_MACRO;
    63c0:	movw	r0, #901	; 0x385
    63c4:	bl	5660 <dbgPrint(unsigned short)>
      goto fail;
    63c8:	b.n	6220 <FatFile::rename(FatFile*, char const*)+0x30>
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
  oldFile.m_flags = FILE_FLAG_WRITE;
  oldFile.m_attributes = FILE_ATTR_FILE;
  if (!oldFile.remove()) {
    DBG_FAIL_MACRO;
    63ca:	mov.w	r0, #964	; 0x3c4
    63ce:	bl	5660 <dbgPrint(unsigned short)>
    goto fail;
    63d2:	b.n	6220 <FatFile::rename(FatFile*, char const*)+0x30>
    63d4:	add.w	r0, r4, #564	; 0x234
    63d8:	bl	6790 <FatCache::sync()>
    63dc:	cmp	r0, #0
    63de:	beq.n	63aa <FatFile::rename(FatFile*, char const*)+0x1ba>
    63e0:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    63e2:	ldr	r3, [r0, #0]
    63e4:	ldr	r3, [r3, #20]
    63e6:	blx	r3
    63e8:	mov	r4, r0
    63ea:	b.n	6220 <FatFile::rename(FatFile*, char const*)+0x30>
    }
    memcpy(&entry, &pc->dir[1], sizeof(entry));

    // free unused cluster
    if (!m_vol->freeChain(dirCluster)) {
      DBG_FAIL_MACRO;
    63ec:	movw	r0, #947	; 0x3b3
    63f0:	bl	5660 <dbgPrint(unsigned short)>
      goto fail;
    63f4:	b.n	6220 <FatFile::rename(FatFile*, char const*)+0x30>
      goto fail;
    }
  } else {
    // don't create missing path prefix components
    if (!file.mkdir(dirFile, newPath, false)) {
      DBG_FAIL_MACRO;
    63f6:	movw	r0, #907	; 0x38b
    63fa:	bl	5660 <dbgPrint(unsigned short)>
      goto fail;
    63fe:	b.n	6220 <FatFile::rename(FatFile*, char const*)+0x30>
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    6400:	movw	r0, #926	; 0x39e
    6404:	bl	5660 <dbgPrint(unsigned short)>
    goto fail;
    6408:	b.n	6220 <FatFile::rename(FatFile*, char const*)+0x30>
  // sync() and cache directory entry
  sync();
  oldFile = *this;
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
  if (!dir) {
    DBG_FAIL_MACRO;
    640a:	movw	r0, #893	; 0x37d
    640e:	bl	5660 <dbgPrint(unsigned short)>
    goto fail;
    6412:	b.n	6220 <FatFile::rename(FatFile*, char const*)+0x30>
  if (dirCluster) {
    // get new dot dot
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
    6414:	mov.w	r0, #940	; 0x3ac
    6418:	bl	5660 <dbgPrint(unsigned short)>
      goto fail;
    641c:	b.n	6220 <FatFile::rename(FatFile*, char const*)+0x30>
    }
    // store new dot dot
    sector = m_vol->clusterStartSector(m_firstCluster);
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
    641e:	movw	r0, #954	; 0x3ba
    6422:	bl	5660 <dbgPrint(unsigned short)>
      goto fail;
    6426:	b.n	6220 <FatFile::rename(FatFile*, char const*)+0x30>

00006428 <FatFile::sync()>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    6428:	ldrb	r3, [r0, #0]
    642a:	cbz	r3, 6430 <FatFile::sync()+0x8>
    642c:	b.w	57e0 <FatFile::sync() [clone .part.38]>
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
    6430:	movs	r0, #1
    6432:	bx	lr

00006434 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    6434:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6438:	ldrb	r3, [r0, #2]
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    643a:	lsls	r5, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    643c:	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    643e:	bpl.w	65aa <FatFile::write(void const*, unsigned int)+0x176>
    6442:	mov	r9, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    6444:	lsls	r2, r3, #28
    6446:	mov	r8, r1
    6448:	bmi.w	6604 <FatFile::write(void const*, unsigned int)+0x1d0>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    644c:	ldr	r2, [r4, #20]
    644e:	mvns	r3, r2
    6450:	cmp	r9, r3
    6452:	bhi.w	65fa <FatFile::write(void const*, unsigned int)+0x1c6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    6456:	cmp.w	r9, #0
    645a:	beq.w	661a <FatFile::write(void const*, unsigned int)+0x1e6>
    645e:	mov	r6, r9
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    6460:	mov.w	sl, #0
    6464:	b.n	64d2 <FatFile::write(void const*, unsigned int)+0x9e>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    6466:	cmp	r1, #0
    6468:	beq.w	656e <FatFile::write(void const*, unsigned int)+0x13a>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    646c:	ldrb	r3, [r4, #2]
    646e:	lsls	r3, r3, #25
    6470:	bpl.w	657e <FatFile::write(void const*, unsigned int)+0x14a>
    6474:	ldr	r3, [r4, #28]
    6476:	cmp	r3, r2
    6478:	bls.w	657e <FatFile::write(void const*, unsigned int)+0x14a>
          m_curCluster++;
    647c:	adds	r1, #1
    647e:	str	r1, [r4, #16]
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    6480:	bl	67a0 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    6484:	cmp.w	r6, #512	; 0x200
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    6488:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    648a:	bcs.n	650c <FatFile::write(void const*, unsigned int)+0xd8>
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    648c:	ldr	r2, [r4, #20]
    648e:	ldr	r3, [r4, #28]
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    6490:	ldr	r0, [r4, #8]
    6492:	cmp.w	r6, #512	; 0x200
    6496:	mov	r5, r6
    6498:	it	cs
    649a:	movcs.w	r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    649e:	cmp	r2, r3
    64a0:	bcc.n	659c <FatFile::write(void const*, unsigned int)+0x168>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    64a2:	movs	r2, #5
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    64a4:	adds	r0, #40	; 0x28
    64a6:	bl	6714 <FatCache::read(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
    64aa:	cmp	r0, #0
    64ac:	beq.w	6634 <FatFile::write(void const*, unsigned int)+0x200>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    64b0:	add	r0, r7
    64b2:	mov	r2, r5
    64b4:	mov	r1, r8
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    64b6:	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    64b8:	bl	9280 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    64bc:	cmp.w	r7, #512	; 0x200
    64c0:	beq.w	65d0 <FatFile::write(void const*, unsigned int)+0x19c>
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    64c4:	ldr	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    64c6:	subs	r6, r6, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    64c8:	add	r2, r5
    src += n;
    64ca:	add	r8, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    64cc:	str	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    64ce:	beq.w	661a <FatFile::write(void const*, unsigned int)+0x1e6>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    64d2:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    64d4:	ldr	r1, [r4, #16]
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    64d6:	ldrb	r3, [r0, #5]
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    64d8:	ands.w	r5, r3, r2, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    64dc:	ubfx	r7, r2, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    64e0:	bne.n	64fc <FatFile::write(void const*, unsigned int)+0xc8>
    64e2:	cmp	r7, #0
    64e4:	beq.n	6466 <FatFile::write(void const*, unsigned int)+0x32>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    64e6:	bl	67a0 <FatPartition::clusterStartSector(unsigned long) const>
    64ea:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    64ec:	rsb	r5, r7, #512	; 0x200
    64f0:	cmp	r5, r6
    64f2:	it	cs
    64f4:	movcs	r5, r6
    64f6:	ldr	r0, [r4, #8]
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
    64f8:	movs	r2, #1
    64fa:	b.n	64a4 <FatFile::write(void const*, unsigned int)+0x70>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    64fc:	bl	67a0 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;
    6500:	adds	r1, r5, r0

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    6502:	cmp	r7, #0
    6504:	bne.n	64ec <FatFile::write(void const*, unsigned int)+0xb8>
    6506:	cmp.w	r6, #512	; 0x200
    650a:	bcc.n	648c <FatFile::write(void const*, unsigned int)+0x58>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    650c:	cmp.w	r6, #1024	; 0x400
    6510:	ldr	r2, [r4, #8]
    6512:	bcc.n	6554 <FatFile::write(void const*, unsigned int)+0x120>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    6514:	ldrb	r3, [r2, #4]
    6516:	ldr	r7, [r2, #48]	; 0x30
    6518:	subs	r3, r3, r5
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    651a:	lsrs	r0, r6, #9
    651c:	cmp	r3, r0
    651e:	it	cs
    6520:	movcs	r3, r0
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    6522:	cmp	r7, r1
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    6524:	mov.w	r5, r3, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    6528:	bcc.n	653c <FatFile::write(void const*, unsigned int)+0x108>
    652a:	add	r7, r3
    652c:	cmp	r7, r1
    652e:	bls.n	653c <FatFile::write(void const*, unsigned int)+0x108>
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    6530:	strb.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
    6534:	mov.w	r0, #4294967295
    6538:	str	r0, [r2, #48]	; 0x30
    653a:	ldr	r2, [r4, #8]
    653c:	ldr	r0, [r2, #0]
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    return m_blockDev->writeSectors(sector, src, ns);
    653e:	ldr	r2, [r0, #0]
    6540:	ldr	r7, [r2, #28]
    6542:	mov	r2, r8
    6544:	blx	r7
        // Invalidate cache if cache sector is in the range.
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, nSector)) {
    6546:	cmp	r0, #0
    6548:	bne.n	64c4 <FatFile::write(void const*, unsigned int)+0x90>
        DBG_FAIL_MACRO;
    654a:	movw	r0, #1410	; 0x582
    654e:	bl	5660 <dbgPrint(unsigned short)>
        goto fail;
    6552:	b.n	65b2 <FatFile::write(void const*, unsigned int)+0x17e>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->cacheSectorNumber() == sector) {
    6554:	ldr	r3, [r2, #48]	; 0x30
    6556:	cmp	r3, r1
    6558:	beq.n	65c2 <FatFile::write(void const*, unsigned int)+0x18e>
    655a:	ldr	r0, [r2, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    655c:	ldr	r3, [r0, #0]
    655e:	mov	r2, r8
    6560:	ldr	r3, [r3, #24]
    6562:	blx	r3
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    6564:	cmp	r0, #0
    6566:	beq.n	664e <FatFile::write(void const*, unsigned int)+0x21a>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    6568:	mov.w	r5, #512	; 0x200
    656c:	b.n	64c4 <FatFile::write(void const*, unsigned int)+0x90>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    656e:	ldr	r1, [r4, #32]
    6570:	cmp	r1, #0
    6572:	beq.n	65e8 <FatFile::write(void const*, unsigned int)+0x1b4>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    6574:	str	r1, [r4, #16]
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    6576:	bl	67a0 <FatPartition::clusterStartSector(unsigned long) const>
    657a:	mov	r1, r0
    657c:	b.n	6506 <FatFile::write(void const*, unsigned int)+0xd2>
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    657e:	add.w	r2, r4, #16
    6582:	bl	67ac <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    6586:	cmp	r0, #0
    6588:	blt.n	665e <FatFile::write(void const*, unsigned int)+0x22a>
        if (fg < 0) {
          DBG_FAIL_MACRO;
          goto fail;
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
    658a:	bne.n	6596 <FatFile::write(void const*, unsigned int)+0x162>
          // add cluster if at end of chain
          if (!addCluster()) {
    658c:	mov	r0, r4
    658e:	bl	569c <FatFile::addCluster()>
    6592:	cmp	r0, #0
    6594:	beq.n	6668 <FatFile::write(void const*, unsigned int)+0x234>
    6596:	ldr	r0, [r4, #8]
    6598:	ldr	r1, [r4, #16]
    659a:	b.n	6576 <FatFile::write(void const*, unsigned int)+0x142>
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    659c:	ldrb	r3, [r4, #2]
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    659e:	tst.w	r3, #32
    65a2:	ite	eq
    65a4:	moveq	r2, #1
    65a6:	movne	r2, #5
    65a8:	b.n	64a4 <FatFile::write(void const*, unsigned int)+0x70>
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    65aa:	movw	r0, #1299	; 0x513
    65ae:	bl	5660 <dbgPrint(unsigned short)>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    65b2:	ldrb	r3, [r4, #1]
    65b4:	orr.w	r3, r3, #1
    65b8:	strb	r3, [r4, #1]
  return -1;
    65ba:	mov.w	r0, #4294967295
    65be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    65c2:	strb.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
    65c6:	mov.w	r3, #4294967295
    65ca:	str	r3, [r2, #48]	; 0x30
    65cc:	ldr	r2, [r4, #8]
    65ce:	b.n	655a <FatFile::write(void const*, unsigned int)+0x126>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    65d0:	ldr	r0, [r4, #8]
    65d2:	adds	r0, #40	; 0x28
    65d4:	bl	6790 <FatCache::sync()>
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->cacheSyncData()) {
    65d8:	cmp	r0, #0
    65da:	bne.w	64c4 <FatFile::write(void const*, unsigned int)+0x90>
          DBG_FAIL_MACRO;
    65de:	movw	r0, #1390	; 0x56e
    65e2:	bl	5660 <dbgPrint(unsigned short)>
          goto fail;
    65e6:	b.n	65b2 <FatFile::write(void const*, unsigned int)+0x17e>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    65e8:	mov	r0, r4
    65ea:	bl	569c <FatFile::addCluster()>
    65ee:	cmp	r0, #0
    65f0:	beq.n	6672 <FatFile::write(void const*, unsigned int)+0x23e>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    65f2:	ldr	r1, [r4, #16]
    65f4:	str	r1, [r4, #32]
    65f6:	ldr	r0, [r4, #8]
    65f8:	b.n	6576 <FatFile::write(void const*, unsigned int)+0x142>
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    65fa:	movw	r0, #1311	; 0x51f
    65fe:	bl	5660 <dbgPrint(unsigned short)>
    goto fail;
    6602:	b.n	65b2 <FatFile::write(void const*, unsigned int)+0x17e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_fileSize)) {
    6604:	ldr	r1, [r0, #28]
    6606:	bl	5c60 <FatFile::seekSet(unsigned long)>
    660a:	cmp	r0, #0
    660c:	bne.w	644c <FatFile::write(void const*, unsigned int)+0x18>
      DBG_FAIL_MACRO;
    6610:	movw	r0, #1305	; 0x519
    6614:	bl	5660 <dbgPrint(unsigned short)>
      goto fail;
    6618:	b.n	65b2 <FatFile::write(void const*, unsigned int)+0x17e>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    661a:	ldr	r3, [r4, #28]
    661c:	cmp	r3, r2
    661e:	bcc.n	663e <FatFile::write(void const*, unsigned int)+0x20a>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    6620:	ldr	r3, [pc, #88]	; (667c <FatFile::write(void const*, unsigned int)+0x248>)
    6622:	ldr	r3, [r3, #0]
    6624:	cbz	r3, 6658 <FatFile::write(void const*, unsigned int)+0x224>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6626:	ldrb	r3, [r4, #2]
    6628:	orn	r3, r3, #127	; 0x7f
    662c:	strb	r3, [r4, #2]
    662e:	mov	r0, r9
    6630:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
        DBG_FAIL_MACRO;
    6634:	movw	r0, #1382	; 0x566
    6638:	bl	5660 <dbgPrint(unsigned short)>
        goto fail;
    663c:	b.n	65b2 <FatFile::write(void const*, unsigned int)+0x17e>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    663e:	ldrb	r3, [r4, #2]
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    6640:	str	r2, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6642:	orn	r3, r3, #127	; 0x7f
    6646:	strb	r3, [r4, #2]
    6648:	mov	r0, r9
    664a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      n = m_vol->bytesPerSector();
      if (m_vol->cacheSectorNumber() == sector) {
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
    664e:	movw	r0, #1421	; 0x58d
    6652:	bl	5660 <dbgPrint(unsigned short)>
        goto fail;
    6656:	b.n	65b2 <FatFile::write(void const*, unsigned int)+0x17e>
    6658:	mov	r0, r9
    665a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
    665e:	mov.w	r0, #1328	; 0x530
    6662:	bl	5660 <dbgPrint(unsigned short)>
            goto fail;
    6666:	b.n	65b2 <FatFile::write(void const*, unsigned int)+0x17e>
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
            DBG_FAIL_MACRO;
    6668:	movw	r0, #1342	; 0x53e
    666c:	bl	5660 <dbgPrint(unsigned short)>
            goto fail;
    6670:	b.n	65b2 <FatFile::write(void const*, unsigned int)+0x17e>
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
            DBG_FAIL_MACRO;
    6672:	movw	r0, #1350	; 0x546
    6676:	bl	5660 <dbgPrint(unsigned short)>
            goto fail;
    667a:	b.n	65b2 <FatFile::write(void const*, unsigned int)+0x17e>
    667c:	.word	0x1fff198c

00006680 <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    6680:	push	{r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    6682:	movs	r1, #10
    6684:	mov	r5, r0
    6686:	ldr	r0, [pc, #40]	; (66b0 <dbgPrint(unsigned short)+0x30>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    6688:	ldr	r4, [pc, #40]	; (66b4 <dbgPrint(unsigned short)+0x34>)
    668a:	bl	9480 <usb_serial_write>
    668e:	movs	r1, #16
    6690:	ldr	r0, [pc, #36]	; (66b8 <dbgPrint(unsigned short)+0x38>)
    6692:	bl	9480 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    6696:	movs	r0, #46	; 0x2e
    6698:	bl	9588 <usb_serial_putchar>
    669c:	mov	r1, r5
    669e:	mov	r0, r4
    66a0:	bl	aa68 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    66a4:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    66a6:	ldmia.w	sp!, {r3, r4, r5, lr}
    66aa:	b.w	a99c <Print::println()>
    66ae:	nop
    66b0:	.word	0x0000fc70
    66b4:	.word	0x1fff098c
    66b8:	.word	0x0000fcc8

000066bc <FatCache::sync() [clone .part.8]>:
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    66bc:	push	{r3, r4, r5, r6, r7, lr}
    66be:	ldr	r3, [r0, #4]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    66c0:	ldr	r1, [r0, #8]
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    66c2:	add.w	r6, r0, #12
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    66c6:	mov	r4, r0
    66c8:	ldr	r0, [r3, #0]
    66ca:	ldr	r3, [r0, #0]
    66cc:	mov	r2, r6
    66ce:	ldr	r3, [r3, #24]
    66d0:	blx	r3
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    66d2:	mov	r5, r0
    66d4:	cbz	r0, 6700 <FatCache::sync() [clone .part.8]+0x44>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    66d6:	ldrb	r3, [r4, #0]
    66d8:	lsls	r2, r3, #30
    66da:	bmi.n	66e6 <FatCache::sync() [clone .part.8]+0x2a>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    66dc:	bic.w	r3, r3, #1
    66e0:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    66e2:	mov	r0, r5
    66e4:	pop	{r3, r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    66e6:	ldr	r3, [r4, #4]
    66e8:	ldr	r1, [r4, #8]
    66ea:	ldr	r0, [r3, #0]
    66ec:	ldr	r7, [r3, #16]
    66ee:	ldr	r3, [r0, #0]
    66f0:	mov	r2, r6
    66f2:	ldr	r3, [r3, #24]
    66f4:	add	r1, r7
    66f6:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    66f8:	mov	r3, r0
    66fa:	cbz	r0, 670a <FatCache::sync() [clone .part.8]+0x4e>
    66fc:	ldrb	r3, [r4, #0]
    66fe:	b.n	66dc <FatCache::sync() [clone .part.8]+0x20>
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
      DBG_FAIL_MACRO;
    6700:	movs	r0, #57	; 0x39
    6702:	bl	6680 <dbgPrint(unsigned short)>
  }
  return true;

fail:
  return false;
}
    6706:	mov	r0, r5
    6708:	pop	{r3, r4, r5, r6, r7, pc}
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
    670a:	movs	r0, #64	; 0x40
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
    670c:	mov	r5, r3
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
    670e:	bl	6680 <dbgPrint(unsigned short)>
    6712:	b.n	66e2 <FatCache::sync() [clone .part.8]+0x26>

00006714 <FatCache::read(unsigned long, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    6714:	ldr	r3, [r0, #8]
    6716:	cmp	r3, r1
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    6718:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    671c:	mov	r6, r0
    671e:	mov	r5, r2
  if (m_lbn != sector) {
    6720:	beq.n	6744 <FatCache::read(unsigned long, unsigned char)+0x30>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    6722:	ldrb	r3, [r0, #0]
    6724:	lsls	r2, r3, #31
    6726:	mov	r7, r1
    6728:	bmi.n	6754 <FatCache::read(unsigned long, unsigned char)+0x40>
  if (m_lbn != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    672a:	lsls	r3, r5, #29
    672c:	bpl.n	676a <FatCache::read(unsigned long, unsigned char)+0x56>
    672e:	add.w	r4, r6, #12
    6732:	movs	r3, #0
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    6734:	and.w	r5, r5, #3
    6738:	orrs	r5, r3
    673a:	strb	r5, [r6, #0]
    673c:	mov	r0, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    673e:	str	r7, [r6, #8]
  return &m_buffer;

fail:

  return nullptr;
}
    6740:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6744:	ldrsb.w	r3, [r0], #12
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    6748:	and.w	r5, r5, #3
    674c:	orrs	r5, r3
    674e:	strb	r5, [r6, #0]
  return &m_buffer;

fail:

  return nullptr;
}
    6750:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6754:	bl	66bc <FatCache::sync() [clone .part.8]>
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    if (!sync()) {
    6758:	mov	r4, r0
    675a:	cmp	r0, #0
    675c:	bne.n	672a <FatCache::read(unsigned long, unsigned char)+0x16>
      DBG_FAIL_MACRO;
    675e:	movs	r0, #34	; 0x22
    6760:	bl	6680 <dbgPrint(unsigned short)>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_buffer;

fail:

  return nullptr;
    6764:	mov	r0, r4
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    6766:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    676a:	ldr	r3, [r6, #4]
    676c:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    676e:	ldr	r3, [r0, #0]
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    6770:	add.w	r4, r6, #12
    6774:	ldr	r3, [r3, #8]
    6776:	mov	r2, r4
    6778:	mov	r1, r7
    677a:	blx	r3
    677c:	mov	r8, r0
    677e:	cmp	r0, #0
    6780:	bne.n	6732 <FatCache::read(unsigned long, unsigned char)+0x1e>
        DBG_FAIL_MACRO;
    6782:	movs	r0, #39	; 0x27
    6784:	bl	6680 <dbgPrint(unsigned short)>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_buffer;

fail:

  return nullptr;
    6788:	mov	r0, r8
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
    678a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    678e:	nop

00006790 <FatCache::sync()>:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    6790:	ldrb	r3, [r0, #0]
    6792:	lsls	r3, r3, #31
    6794:	bmi.n	679a <FatCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    6796:	movs	r0, #1
    6798:	bx	lr
    679a:	b.w	66bc <FatCache::sync() [clone .part.8]>
    679e:	nop

000067a0 <FatPartition::clusterStartSector(unsigned long) const>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    67a0:	ldrb	r3, [r0, #6]
    67a2:	ldr	r0, [r0, #20]
    67a4:	subs	r1, #2
    67a6:	lsls	r1, r3
}
    67a8:	add	r0, r1
    67aa:	bx	lr

000067ac <FatPartition::fatGet(unsigned long, unsigned long*)>:
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    67ac:	cmp	r1, #1
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    67ae:	push	{r4, r5, r6, lr}
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    67b0:	bls.n	681a <FatPartition::fatGet(unsigned long, unsigned long*)+0x6e>
    67b2:	ldr	r3, [r0, #28]
    67b4:	cmp	r1, r3
    67b6:	mov	r4, r1
    67b8:	mov	r5, r0
    67ba:	bhi.n	681a <FatPartition::fatGet(unsigned long, unsigned long*)+0x6e>
    67bc:	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    67be:	cmp	r3, #32
    67c0:	mov	r6, r2
    67c2:	beq.n	67f0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    67c4:	cmp	r3, #16
    67c6:	bne.n	680c <FatPartition::fatGet(unsigned long, unsigned long*)+0x60>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
    67c8:	ldr	r3, [r0, #24]
    67ca:	ubfx	r1, r1, #8, #8
    67ce:	add	r1, r3
    67d0:	movs	r2, #2
    67d2:	add.w	r0, r0, #564	; 0x234
    67d6:	bl	6714 <FatCache::read(unsigned long, unsigned char)>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    67da:	cbz	r0, 6826 <FatPartition::fatGet(unsigned long, unsigned long*)+0x7a>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    67dc:	uxtb	r4, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    67de:	ldrh.w	r3, [r0, r4, lsl #1]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    67e2:	ldr	r2, [r5, #28]
    67e4:	cmp	r3, r2
    return 0;
  }
  *value = next;
  return 1;
    67e6:	itte	ls
    67e8:	movls	r0, #1
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
  }
  *value = next;
    67ea:	strls	r3, [r6, #0]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
    67ec:	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
    67ee:	pop	{r4, r5, r6, pc}
    67f0:	ldr	r1, [r0, #24]
    67f2:	movs	r2, #2
    67f4:	add.w	r1, r1, r4, lsr #7
    67f8:	add.w	r0, r0, #564	; 0x234
    67fc:	bl	6714 <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    6800:	cbz	r0, 6832 <FatPartition::fatGet(unsigned long, unsigned long*)+0x86>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    6802:	and.w	r4, r4, #127	; 0x7f
    6806:	ldr.w	r3, [r0, r4, lsl #2]
    680a:	b.n	67e2 <FatPartition::fatGet(unsigned long, unsigned long*)+0x36>
      index = 0;
    }
    tmp |= pc->data[index] << 8;
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    680c:	mov.w	r0, #260	; 0x104
    6810:	bl	6680 <dbgPrint(unsigned short)>
  }
  *value = next;
  return 1;

fail:
  return -1;
    6814:	mov.w	r0, #4294967295
    }
    tmp |= pc->data[index] << 8;
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
    6818:	pop	{r4, r5, r6, pc}
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    681a:	movs	r0, #214	; 0xd6
    681c:	bl	6680 <dbgPrint(unsigned short)>
  }
  *value = next;
  return 1;

fail:
  return -1;
    6820:	mov.w	r0, #4294967295
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
    6824:	pop	{r4, r5, r6, pc}
  } else if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
    6826:	movs	r0, #232	; 0xe8
    6828:	bl	6680 <dbgPrint(unsigned short)>
  }
  *value = next;
  return 1;

fail:
  return -1;
    682c:	mov.w	r0, #4294967295
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    6830:	pop	{r4, r5, r6, pc}

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
    6832:	movs	r0, #222	; 0xde
    6834:	bl	6680 <dbgPrint(unsigned short)>
  }
  *value = next;
  return 1;

fail:
  return -1;
    6838:	mov.w	r0, #4294967295
  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    683c:	pop	{r4, r5, r6, pc}
    683e:	nop

00006840 <FatPartition::fatPut(unsigned long, unsigned long)>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    6840:	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    6842:	push	{r4, r5, r6, lr}
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    6844:	bls.n	6866 <FatPartition::fatPut(unsigned long, unsigned long)+0x26>
    6846:	ldr	r3, [r0, #28]
    6848:	cmp	r1, r3
    684a:	mov	r4, r1
    684c:	bhi.n	6866 <FatPartition::fatPut(unsigned long, unsigned long)+0x26>
    684e:	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    6850:	cmp	r3, #32
    6852:	mov	r5, r2
    6854:	beq.n	6872 <FatPartition::fatPut(unsigned long, unsigned long)+0x32>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    6856:	cmp	r3, #16
    6858:	beq.n	6892 <FatPartition::fatPut(unsigned long, unsigned long)+0x52>
      tmp = ((pc->data[index] & 0XF0)) | tmp >> 4;
    }
    pc->data[index] = tmp;
    return true;
  } else {
    DBG_FAIL_MACRO;
    685a:	mov.w	r0, #342	; 0x156
    685e:	bl	6680 <dbgPrint(unsigned short)>
    goto fail;
  }

fail:
  return false;
    6862:	movs	r0, #0
}
    6864:	pop	{r4, r5, r6, pc}
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    6866:	mov.w	r0, #280	; 0x118
    686a:	bl	6680 <dbgPrint(unsigned short)>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    686e:	movs	r0, #0
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
    6870:	pop	{r4, r5, r6, pc}
    6872:	ldr	r1, [r0, #24]
    6874:	movs	r2, #3
    6876:	add.w	r0, r0, #564	; 0x234
    687a:	add.w	r1, r1, r4, lsr #7
    687e:	bl	6714 <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    6882:	mov	r6, r0
    6884:	cbz	r0, 68be <FatPartition::fatPut(unsigned long, unsigned long)+0x7e>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    6886:	and.w	r4, r4, #127	; 0x7f
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
    688a:	movs	r0, #1
    688c:	str.w	r5, [r6, r4, lsl #2]
    6890:	pop	{r4, r5, r6, pc}
    6892:	ldr	r3, [r0, #24]
    6894:	ubfx	r1, r1, #8, #8
    6898:	add.w	r0, r0, #564	; 0x234
    689c:	add	r1, r3
    689e:	movs	r2, #3
    68a0:	bl	6714 <FatCache::read(unsigned long, unsigned char)>

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    68a4:	mov	r6, r0
    68a6:	cbz	r0, 68b2 <FatPartition::fatPut(unsigned long, unsigned long)+0x72>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    68a8:	uxtb	r4, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe16(reinterpret_cast<uint8_t*>
           (&pc->fat16[cluster & (m_sectorMask >> 1)]), value);
    return true;
    68aa:	movs	r0, #1
    68ac:	strh.w	r5, [r6, r4, lsl #1]
    68b0:	pop	{r4, r5, r6, pc}
  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
    68b2:	movw	r0, #301	; 0x12d
    68b6:	bl	6680 <dbgPrint(unsigned short)>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    68ba:	mov	r0, r6
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    68bc:	pop	{r4, r5, r6, pc}

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
    68be:	mov.w	r0, #288	; 0x120
    68c2:	bl	6680 <dbgPrint(unsigned short)>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    68c6:	mov	r0, r6
    68c8:	pop	{r4, r5, r6, pc}
    68ca:	nop

000068cc <FatPartition::allocateCluster(unsigned long, unsigned long*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    68cc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    68d0:	ldr	r4, [r0, #12]
    68d2:	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    68d4:	sub	sp, #8
    68d6:	mov	r5, r0
    68d8:	mov	r7, r1
    68da:	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    68dc:	itte	cc
    68de:	movcc	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
    68e0:	movcc	r6, #0
  } else {
    find = m_allocSearchStart;
    setStart = true;
    68e2:	movcs	r6, #1
    68e4:	ldr	r3, [r5, #28]
  }
  while (1) {
    find++;
    68e6:	adds	r4, #1
    if (find > m_lastCluster) {
    68e8:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    68ea:	add	r2, sp, #4
    68ec:	mov	r0, r5
    68ee:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    68f0:	bls.n	6906 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x3a>
      if (setStart) {
    68f2:	cbnz	r6, 695a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8e>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
    68f4:	ldr	r4, [r5, #12]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    68f6:	adds	r4, #1
    if (find > m_lastCluster) {
    68f8:	cmp	r4, r3
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
      setStart = true;
    68fa:	mov.w	r6, #1
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    68fe:	add	r2, sp, #4
    6900:	mov	r0, r5
    6902:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    6904:	bhi.n	68f2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x26>
      }
      find = m_allocSearchStart;
      setStart = true;
      continue;
    }
    if (find == current) {
    6906:	cmp	r7, r4
    6908:	beq.n	694a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7e>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    690a:	bl	67ac <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    690e:	cmp	r0, #0
    6910:	blt.n	6962 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x96>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
    6912:	beq.n	68e4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    6914:	ldr	r3, [sp, #4]
    6916:	cmp	r3, #0
    6918:	bne.n	68e4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
      break;
    }
  }
  if (setStart) {
    691a:	cbz	r6, 691e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x52>
    m_allocSearchStart = find;
    691c:	str	r4, [r5, #12]
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    691e:	mvn.w	r2, #4026531840	; 0xf0000000
    6922:	mov	r1, r4
    6924:	mov	r0, r5
    6926:	bl	6840 <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    692a:	mov	r6, r0
    692c:	cbz	r0, 6984 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0xb8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    692e:	cbnz	r7, 696a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x9e>
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
    6930:	ldr	r3, [r5, #36]	; 0x24
    6932:	cmp	r3, #0
      m_freeClusterCount += change;
    6934:	it	ge
    6936:	addge.w	r3, r3, #4294967295
  *next = find;
  return true;

fail:
  return false;
}
    693a:	mov	r0, r6
    693c:	it	ge
    693e:	strge	r3, [r5, #36]	; 0x24
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
    6940:	str.w	r4, [r8]
  return true;

fail:
  return false;
}
    6944:	add	sp, #8
    6946:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      setStart = true;
      continue;
    }
    if (find == current) {
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
    694a:	movs	r0, #101	; 0x65
    694c:	bl	6680 <dbgPrint(unsigned short)>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
    6950:	movs	r6, #0
}
    6952:	mov	r0, r6
    6954:	add	sp, #8
    6956:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while (1) {
    find++;
    if (find > m_lastCluster) {
      if (setStart) {
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
    695a:	movs	r0, #92	; 0x5c
    695c:	bl	6680 <dbgPrint(unsigned short)>
        goto fail;
    6960:	b.n	6950 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x84>
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    if (fg < 0) {
      DBG_FAIL_MACRO;
    6962:	movs	r0, #107	; 0x6b
    6964:	bl	6680 <dbgPrint(unsigned short)>
      goto fail;
    6968:	b.n	6950 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
    696a:	mov	r1, r7
    696c:	mov	r2, r4
    696e:	mov	r0, r5
    6970:	bl	6840 <FatPartition::fatPut(unsigned long, unsigned long)>
    6974:	mov	r3, r0
    6976:	cmp	r0, #0
    6978:	bne.n	6930 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x64>
      DBG_FAIL_MACRO;
    697a:	movs	r0, #125	; 0x7d
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
    697c:	mov	r6, r3
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
      DBG_FAIL_MACRO;
    697e:	bl	6680 <dbgPrint(unsigned short)>
      goto fail;
    6982:	b.n	6952 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x86>
  if (setStart) {
    m_allocSearchStart = find;
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    6984:	movs	r0, #119	; 0x77
    6986:	bl	6680 <dbgPrint(unsigned short)>
    goto fail;
    698a:	b.n	6952 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x86>

0000698c <FatPartition::freeChain(unsigned long)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    698c:	push	{r4, r5, r6, r7, lr}
    698e:	mov	r5, r0
    6990:	sub	sp, #12
    6992:	mov	r4, r1
    6994:	b.n	69b8 <FatPartition::freeChain(unsigned long)+0x2c>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    6996:	bl	6840 <FatPartition::fatPut(unsigned long, unsigned long)>
    699a:	mov	r6, r0
    699c:	cbz	r0, 69de <FatPartition::freeChain(unsigned long)+0x52>
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
    699e:	ldr	r3, [r5, #36]	; 0x24
    69a0:	cmp	r3, #0
      m_freeClusterCount += change;
    69a2:	itt	ge
    69a4:	addge	r3, #1
    69a6:	strge	r3, [r5, #36]	; 0x24
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
    69a8:	ldr	r3, [r5, #12]
    69aa:	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
    69ac:	itt	cc
    69ae:	addcc.w	r4, r4, #4294967295
    69b2:	strcc	r4, [r5, #12]
    }
    cluster = next;
    69b4:	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    69b6:	cbz	r7, 69d8 <FatPartition::freeChain(unsigned long)+0x4c>
    fg = fatGet(cluster, &next);
    69b8:	add	r2, sp, #4
    69ba:	mov	r1, r4
    69bc:	mov	r0, r5
    69be:	bl	67ac <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    69c2:	subs	r7, r0, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    69c4:	mov	r1, r4
    69c6:	mov.w	r2, #0
    69ca:	mov	r0, r5
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    69cc:	bge.n	6996 <FatPartition::freeChain(unsigned long)+0xa>
      DBG_FAIL_MACRO;
    69ce:	movw	r0, #357	; 0x165
    69d2:	bl	6680 <dbgPrint(unsigned short)>
  } while (fg);

  return true;

fail:
  return false;
    69d6:	movs	r6, #0
}
    69d8:	mov	r0, r6
    69da:	add	sp, #12
    69dc:	pop	{r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
    69de:	mov.w	r0, #362	; 0x16a
    69e2:	bl	6680 <dbgPrint(unsigned short)>

  return true;

fail:
  return false;
}
    69e6:	mov	r0, r6
    69e8:	add	sp, #12
    69ea:	pop	{r4, r5, r6, r7, pc}

000069ec <FatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    69ec:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    69f0:	ldr	r4, [r0, #36]	; 0x24
    69f2:	cmp	r4, #0
    69f4:	blt.n	69fc <FatPartition::freeClusterCount()+0x10>
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
}
    69f6:	mov	r0, r4
    69f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    69fc:	ldrb	r3, [r0, #7]
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    69fe:	ldr	r2, [r0, #28]
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    6a00:	cmp	r3, #16
    6a02:	mov	r6, r0
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    6a04:	add.w	r8, r2, #1
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    6a08:	beq.n	6a20 <FatPartition::freeClusterCount()+0x34>
    6a0a:	cmp	r3, #32
    6a0c:	beq.n	6a20 <FatPartition::freeClusterCount()+0x34>
      }
      todo -= n;
    }
  } else {
    // invalid FAT type
    DBG_FAIL_MACRO;
    6a0e:	movw	r0, #431	; 0x1af
  }
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
    6a12:	mov.w	r4, #4294967295
      }
      todo -= n;
    }
  } else {
    // invalid FAT type
    DBG_FAIL_MACRO;
    6a16:	bl	6680 <dbgPrint(unsigned short)>
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
}
    6a1a:	mov	r0, r4
    6a1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    6a20:	ldr	r5, [r6, #24]
    while (todo) {
    6a22:	cmp.w	r8, #0
    6a26:	beq.n	6ab6 <FatPartition::freeClusterCount()+0xca>
    6a28:	add.w	r7, r6, #564	; 0x234
    6a2c:	movs	r4, #0
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
    6a2e:	mov	r1, r5
    6a30:	movs	r2, #2
    6a32:	mov	r0, r7
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
    6a34:	adds	r5, #1
    6a36:	bl	6714 <FatCache::read(unsigned long, unsigned char)>
      if (!pc) {
    6a3a:	cbz	r0, 6aa4 <FatPartition::freeClusterCount()+0xb8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    6a3c:	ldrb	r3, [r6, #7]
    6a3e:	cmp	r3, #16
    6a40:	beq.n	6a72 <FatPartition::freeClusterCount()+0x86>
      if (todo < n) {
    6a42:	cmp.w	r8, #127	; 0x7f
    6a46:	bhi.n	6a9c <FatPartition::freeClusterCount()+0xb0>
        n = todo;
    6a48:	uxth.w	r1, r8
    6a4c:	mov	lr, r8
    6a4e:	subs	r1, #1
    6a50:	uxth	r1, r1
    6a52:	add.w	r1, r0, r1, lsl #2
    6a56:	subs	r3, r0, #4
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat32[i] == 0) {
    6a58:	ldr.w	r2, [r3, #4]!
    6a5c:	cbnz	r2, 6a60 <FatPartition::freeClusterCount()+0x74>
            free++;
    6a5e:	adds	r4, #1
          if (pc->fat16[i] == 0) {
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
    6a60:	cmp	r3, r1
    6a62:	bne.n	6a58 <FatPartition::freeClusterCount()+0x6c>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    6a64:	subs.w	r8, r8, lr
    6a68:	bne.n	6a2e <FatPartition::freeClusterCount()+0x42>
  }
#endif  // USE_MULTI_SECTOR_IO
#if MAINTAIN_FREE_CLUSTER_COUNT
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
    6a6a:	str	r4, [r6, #36]	; 0x24
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
}
    6a6c:	mov	r0, r4
    6a6e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    6a72:	cmp.w	r8, #255	; 0xff
    6a76:	bls.n	6aba <FatPartition::freeClusterCount()+0xce>
    6a78:	mov.w	lr, #256	; 0x100
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    6a7c:	mov	r3, lr
    6a7e:	subs	r1, r3, #1
    6a80:	uxth	r1, r1
    6a82:	add.w	r1, r0, r1, lsl #1
    6a86:	subs	r3, r0, #2
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat16[i] == 0) {
    6a88:	ldrh.w	r2, [r3, #2]!
    6a8c:	cbnz	r2, 6a90 <FatPartition::freeClusterCount()+0xa4>
            free++;
    6a8e:	adds	r4, #1
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
    6a90:	cmp	r1, r3
    6a92:	bne.n	6a88 <FatPartition::freeClusterCount()+0x9c>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    6a94:	subs.w	r8, r8, lr
    6a98:	bne.n	6a2e <FatPartition::freeClusterCount()+0x42>
    6a9a:	b.n	6a6a <FatPartition::freeClusterCount()+0x7e>
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    6a9c:	mov.w	lr, #128	; 0x80
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    6aa0:	mov	r1, lr
    6aa2:	b.n	6a4e <FatPartition::freeClusterCount()+0x62>
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
    6aa4:	movw	r0, #407	; 0x197
  }
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
    6aa8:	mov.w	r4, #4294967295
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
    6aac:	bl	6680 <dbgPrint(unsigned short)>
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
}
    6ab0:	mov	r0, r4
    6ab2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    6ab6:	mov	r4, r8
    6ab8:	b.n	6a6a <FatPartition::freeClusterCount()+0x7e>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
    6aba:	uxth.w	r3, r8
    6abe:	mov	lr, r8
    6ac0:	b.n	6a7e <FatPartition::freeClusterCount()+0x92>
    6ac2:	nop

00006ac4 <FatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
    6ac4:	push	{r3, r4, r5, r6, r7, lr}
    6ac6:	mov	r4, r0
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    6ac8:	movs	r5, #0
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
    6aca:	mov.w	r3, #4294967295
  m_allocSearchStart = 1;
    6ace:	movs	r0, #1
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    6ad0:	str	r1, [r4, #0]
  }
  /** Initialize the cache.
   * \param[in] vol FatPartition that owns this FatCache.
   */
  void init(FatPartition *vol) {
    m_part = vol;
    6ad2:	str	r4, [r4, #44]	; 0x2c
    6ad4:	str.w	r4, [r4, #568]	; 0x238
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
    6ad8:	str	r0, [r4, #12]
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    6ada:	strb	r5, [r4, #7]
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    6adc:	strb.w	r5, [r4, #40]	; 0x28
    6ae0:	strb.w	r5, [r4, #564]	; 0x234
    m_lbn = 0XFFFFFFFF;
    6ae4:	str	r3, [r4, #48]	; 0x30
    6ae6:	str.w	r3, [r4, #572]	; 0x23c
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    6aea:	mov	r6, r2
    6aec:	cbz	r2, 6b32 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x6e>
    if (part > 4) {
    6aee:	cmp	r2, #4
    6af0:	bhi.n	6b26 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x62>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    6af2:	add.w	r7, r4, #40	; 0x28
    6af6:	mov	r2, r5
    6af8:	mov	r0, r7
    6afa:	mov	r1, r5
    6afc:	bl	6714 <FatCache::read(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    mbr = reinterpret_cast<MbrSector_t*>
          (cacheFetchData(0, FatCache::CACHE_FOR_READ));
    MbrPart_t *mp = mbr->part + part - 1;
    6b00:	add.w	r6, r6, #268435456	; 0x10000000
    6b04:	subs	r6, #1
    6b06:	lsls	r6, r6, #4
    6b08:	add.w	r3, r0, #446	; 0x1be
    6b0c:	adds	r2, r3, r6

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    6b0e:	cbz	r0, 6b1a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
    6b10:	ldrb	r1, [r2, #4]
    6b12:	cbz	r1, 6b1a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
    6b14:	ldrb	r3, [r3, r6]
    6b16:	lsls	r3, r3, #25
    6b18:	beq.n	6b54 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x90>
      DBG_FAIL_MACRO;
    6b1a:	mov.w	r0, #468	; 0x1d4
    6b1e:	bl	6680 <dbgPrint(unsigned short)>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    6b22:	movs	r0, #0
          (cacheFetchData(0, FatCache::CACHE_FOR_READ));
    MbrPart_t *mp = mbr->part + part - 1;

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
      DBG_FAIL_MACRO;
      goto fail;
    6b24:	pop	{r3, r4, r5, r6, r7, pc}
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4) {
      DBG_FAIL_MACRO;
    6b26:	mov.w	r0, #460	; 0x1cc
    6b2a:	bl	6680 <dbgPrint(unsigned short)>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    6b2e:	mov	r0, r5
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4) {
      DBG_FAIL_MACRO;
      goto fail;
    6b30:	pop	{r3, r4, r5, r6, r7, pc}
    6b32:	add.w	r7, r4, #40	; 0x28
    6b36:	mov	r0, r7
    6b38:	movs	r2, #0
    6b3a:	mov	r1, r6
    6b3c:	bl	6714 <FatCache::read(unsigned long, unsigned char)>
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FatCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    6b40:	cbz	r0, 6b48 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x84>
    6b42:	ldrb	r3, [r0, #16]
    6b44:	cmp	r3, #2
    6b46:	beq.n	6b58 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x94>
    DBG_FAIL_MACRO;
    6b48:	mov.w	r0, #478	; 0x1de
    6b4c:	bl	6680 <dbgPrint(unsigned short)>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    6b50:	movs	r0, #0
        (cacheFetchData(volumeStartSector, FatCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
    6b52:	pop	{r3, r4, r5, r6, r7, pc}
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    6b54:	ldr	r6, [r2, #8]
    6b56:	b.n	6b36 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x72>
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FatCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    6b58:	ldrh.w	r3, [r0, #11]
    6b5c:	cmp.w	r3, #512	; 0x200
    6b60:	bne.n	6b48 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    6b62:	ldrb	r5, [r0, #13]
    6b64:	strb	r5, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    6b66:	subs	r3, r5, #1
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    6b68:	movs	r2, #0
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6b6a:	cmp	r5, #1
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    6b6c:	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    6b6e:	strb	r2, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6b70:	beq.n	6b9a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xd6>
    6b72:	movs	r2, #1
    6b74:	mov	r1, r2
    6b76:	b.n	6b7a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb6>
    6b78:	mov	r2, r3
    6b7a:	lsls	r1, r1, #1
    6b7c:	uxtb	r1, r1
    6b7e:	adds	r3, r2, #1
    6b80:	cmp	r5, r1
    6b82:	uxtb	r3, r3
    6b84:	beq.n	6b98 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xd4>
    if (tmp == 0) {
    6b86:	cmp	r3, #9
    6b88:	bne.n	6b78 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb4>
    6b8a:	strb	r2, [r4, #6]
      DBG_FAIL_MACRO;
    6b8c:	movw	r0, #487	; 0x1e7
    6b90:	bl	6680 <dbgPrint(unsigned short)>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    6b94:	movs	r0, #0
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    6b96:	pop	{r3, r4, r5, r6, r7, pc}
    6b98:	strb	r2, [r4, #6]
    }
    m_sectorsPerClusterShift++;
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    6b9a:	ldrh	r1, [r0, #22]
    6b9c:	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    6b9e:	cbnz	r1, 6ba4 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xe0>
    6ba0:	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    6ba2:	str	r1, [r4, #16]
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    6ba4:	ldrh	r7, [r0, #14]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    6ba6:	ldrh.w	r3, [r0, #17]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    6baa:	strh	r3, [r4, #8]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    6bac:	add	r7, r6
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    6bae:	lsls	r3, r3, #5

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    6bb0:	add.w	r5, r7, r1, lsl #1
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    6bb4:	addw	r3, r3, #511	; 0x1ff
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
    6bb8:	ldrh.w	r1, [r0, #19]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    6bbc:	str	r7, [r4, #24]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    6bbe:	add.w	r3, r5, r3, asr #9

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    6bc2:	str	r5, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    6bc4:	str	r3, [r4, #20]

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    6bc6:	cbnz	r1, 6bca <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x106>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    6bc8:	ldr	r1, [r0, #32]
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    6bca:	subs	r6, r6, r3
    6bcc:	add	r6, r1

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
    6bce:	lsr.w	r2, r6, r2
  m_lastCluster = clusterCount + 1;

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    6bd2:	movw	r3, #4084	; 0xff4
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    6bd6:	adds	r5, r2, #1
  }
#endif  // USE_MULTI_SECTOR_IO
#if MAINTAIN_FREE_CLUSTER_COUNT
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
    6bd8:	mov.w	r1, #4294967295

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    6bdc:	cmp	r2, r3
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    6bde:	str	r5, [r4, #28]
    6be0:	str	r1, [r4, #36]	; 0x24

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    6be2:	bls.n	6bfa <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x136>
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    6be4:	movw	r3, #65524	; 0xfff4
    6be8:	cmp	r2, r3
    6bea:	ittet	hi
    6bec:	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    6bee:	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
    6bf0:	movls	r3, #16
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
    6bf2:	movhi	r3, #32
    6bf4:	strb	r3, [r4, #7]
  }
  return true;
    6bf6:	movs	r0, #1
    6bf8:	pop	{r3, r4, r5, r6, r7, pc}

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    6bfa:	movs	r3, #12
    6bfc:	strb	r3, [r4, #7]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
    6bfe:	movw	r0, #525	; 0x20d
    6c02:	bl	6680 <dbgPrint(unsigned short)>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    6c06:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    6c08:	pop	{r3, r4, r5, r6, r7, pc}
    6c0a:	nop

00006c0c <lfnGetChar(DirLfn_t*, unsigned char)>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    6c0c:	cmp	r1, #4
    6c0e:	bls.n	6c2a <lfnGetChar(DirLfn_t*, unsigned char)+0x1e>
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    6c10:	cmp	r1, #10
    6c12:	bls.n	6c22 <lfnGetChar(DirLfn_t*, unsigned char)+0x16>
    return getLe16(ldir->unicode2 + 2*i - 10);
  } else if (i < 13) {
    6c14:	cmp	r1, #12
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    6c16:	itte	ls
    6c18:	addls.w	r1, r0, r1, lsl #1
    6c1c:	ldrhls	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2*i - 22);
  }
  return 0;
    6c1e:	movhi	r0, #0
}
    6c20:	bx	lr
    6c22:	add.w	r1, r0, r1, lsl #1
    6c26:	ldrh	r0, [r1, #4]
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2*i - 10);
    6c28:	bx	lr
    6c2a:	add.w	r1, r0, r1, lsl #1
    6c2e:	ldrh.w	r0, [r1, #1]
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
    6c32:	bx	lr

00006c34 <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    6c34:	push	{r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    6c36:	movs	r1, #10
    6c38:	mov	r5, r0
    6c3a:	ldr	r0, [pc, #40]	; (6c64 <dbgPrint(unsigned short)+0x30>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    6c3c:	ldr	r4, [pc, #40]	; (6c68 <dbgPrint(unsigned short)+0x34>)
    6c3e:	bl	9480 <usb_serial_write>
    6c42:	movs	r1, #14
    6c44:	ldr	r0, [pc, #36]	; (6c6c <dbgPrint(unsigned short)+0x38>)
    6c46:	bl	9480 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    6c4a:	movs	r0, #46	; 0x2e
    6c4c:	bl	9588 <usb_serial_putchar>
    6c50:	mov	r1, r5
    6c52:	mov	r0, r4
    6c54:	bl	aa68 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    6c58:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    6c5a:	ldmia.w	sp!, {r3, r4, r5, lr}
    6c5e:	b.w	a99c <Print::println()>
    6c62:	nop
    6c64:	.word	0x0000fc70
    6c68:	.word	0x1fff098c
    6c6c:	.word	0x0000fcdc

00006c70 <FatFile::lfnChecksum(unsigned char*)>:
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
    6c70:	push	{r4}
    6c72:	subs	r2, r0, #1
    6c74:	add.w	r4, r0, #10
  uint8_t sum = 0;
    6c78:	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6c7a:	ldrb.w	r1, [r2, #1]!
    6c7e:	lsrs	r3, r0, #1
    6c80:	orr.w	r0, r3, r0, lsl #7
    6c84:	uxtab	r0, r1, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6c88:	cmp	r4, r2
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6c8a:	uxtb	r0, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6c8c:	bne.n	6c7a <FatFile::lfnChecksum(unsigned char*)+0xa>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
    6c8e:	ldr.w	r4, [sp], #4
    6c92:	bx	lr

00006c94 <FatFile::openCluster(FatFile*)>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
    6c94:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    6c96:	ldr	r3, [r1, #12]
    6c98:	cbz	r3, 6cb8 <FatFile::openCluster(FatFile*)+0x24>
    6c9a:	mov	r5, r0
    6c9c:	mov	r4, r1
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
    6c9e:	movs	r2, #36	; 0x24
    6ca0:	movs	r1, #0
    6ca2:	bl	c07c <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    6ca6:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    6ca8:	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
    6caa:	strb	r3, [r5, #0]
  m_flags = FILE_FLAG_READ;
    6cac:	strb	r0, [r5, #2]
  m_vol = file->m_vol;
    6cae:	ldr	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    6cb0:	ldr	r3, [r4, #12]
    6cb2:	str	r3, [r5, #32]
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
    6cb4:	str	r2, [r5, #8]
  m_firstCluster = file->m_dirCluster;
  return true;
}
    6cb6:	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    6cb8:	ldr	r1, [r1, #8]
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
    6cba:	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    6cbe:	b.w	58a4 <FatFile::openRoot(FatVolume*)>
    6cc2:	nop

00006cc4 <FatFile::getName(char*, unsigned int)>:
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
    6cc4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6cc8:	sub	sp, #52	; 0x34
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    6cca:	ldrb	r3, [r0, #0]
    6ccc:	movs	r4, #0
    6cce:	strb.w	r4, [sp, #12]
    6cd2:	strb.w	r4, [sp, #13]
    6cd6:	strb.w	r4, [sp, #14]
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
    6cda:	mov	r9, r1
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    6cdc:	cbz	r3, 6ce4 <FatFile::getName(char*, unsigned int)+0x20>
    6cde:	cmp	r2, #12
    6ce0:	mov	r5, r2
    6ce2:	bhi.n	6cf8 <FatFile::getName(char*, unsigned int)+0x34>
    DBG_FAIL_MACRO;
    6ce4:	movs	r0, #129	; 0x81
    6ce6:	bl	6c34 <dbgPrint(unsigned short)>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
    6cea:	movs	r7, #0
    6cec:	strb.w	r7, [r9]
  return false;
}
    6cf0:	mov	r0, r7
    6cf2:	add	sp, #52	; 0x34
    6cf4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    6cf8:	ldrb	r3, [r0, #3]
    6cfa:	mov	r8, r0
    6cfc:	cmp	r3, #0
    6cfe:	beq.n	6dbe <FatFile::getName(char*, unsigned int)+0xfa>
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
    6d00:	add	r0, sp, #12
    6d02:	mov	r1, r8
    6d04:	bl	6c94 <FatFile::openCluster(FatFile*)>
    6d08:	cmp	r0, #0
    6d0a:	beq.n	6dd0 <FatFile::getName(char*, unsigned int)+0x10c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    6d0c:	ldrb.w	r3, [r8, #3]
    6d10:	cmp	r3, #0
    6d12:	beq.n	6db6 <FatFile::getName(char*, unsigned int)+0xf2>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    6d14:	str	r4, [sp, #4]
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    6d16:	movs	r6, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    6d18:	ldrh.w	r1, [r8, #4]
    6d1c:	subs	r1, r1, r6
    6d1e:	lsls	r1, r1, #5
    6d20:	add	r0, sp, #12
    6d22:	bl	5c60 <FatFile::seekSet(unsigned long)>
    6d26:	mov	r7, r0
    6d28:	cmp	r0, #0
    6d2a:	beq.n	6dd8 <FatFile::getName(char*, unsigned int)+0x114>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    6d2c:	movs	r1, #0
    6d2e:	add	r0, sp, #12
    6d30:	bl	5c10 <FatFile::readDirCache(bool)>
    if (!ldir) {
    6d34:	mov	sl, r0
    6d36:	cmp	r0, #0
    6d38:	beq.n	6de0 <FatFile::getName(char*, unsigned int)+0x11c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME) {
    6d3a:	ldrb	r3, [r0, #11]
    6d3c:	cmp	r3, #15
    6d3e:	bne.n	6de8 <FatFile::getName(char*, unsigned int)+0x124>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (order != (ldir->order & 0X1F)) {
    6d40:	ldrb	r3, [r0, #0]
    6d42:	and.w	r3, r3, #31
    6d46:	cmp	r6, r3
    6d48:	bne.n	6df0 <FatFile::getName(char*, unsigned int)+0x12c>
  return 0;
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
    6d4a:	subs	r3, r6, #1
    6d4c:	add.w	r2, r3, r3, lsl #1
    6d50:	add.w	r2, r3, r2, lsl #2
    6d54:	mov	r3, r2
    6d56:	add.w	r4, r9, r2
    6d5a:	add.w	fp, r2, #13
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    6d5e:	subs	r1, r3, r2
    6d60:	uxtb	r1, r1
    6d62:	mov	r0, sl
    6d64:	bl	6c0c <lfnGetChar(DirLfn_t*, unsigned char)>
    if (c == 0 || k >= n) {
    6d68:	cbz	r0, 6dcc <FatFile::getName(char*, unsigned int)+0x108>
    6d6a:	cmp	r5, r3
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    6d6c:	add.w	r3, r3, #1
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
    6d70:	bls.n	6d96 <FatFile::getName(char*, unsigned int)+0xd2>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    6d72:	cmp	r0, #126	; 0x7e
    6d74:	ite	ls
    6d76:	uxtbls	r0, r0
    6d78:	movhi	r0, #63	; 0x3f
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    6d7a:	cmp	r3, fp
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    6d7c:	strb.w	r0, [r4], #1
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    6d80:	bne.n	6d5e <FatFile::getName(char*, unsigned int)+0x9a>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
  }
  // Terminate with zero byte if name fits.
  if (k < n && (ldir->order & FAT_ORDER_LAST_LONG_ENTRY)) {
    6d82:	cmp	r5, fp
    6d84:	bls.n	6d96 <FatFile::getName(char*, unsigned int)+0xd2>
    6d86:	ldrb.w	r3, [sl]
    6d8a:	lsls	r2, r3, #25
    name[k] = 0;
    6d8c:	itt	mi
    6d8e:	ldrbmi.w	r3, [sp, #4]
    6d92:	strbmi.w	r3, [r9, fp]
  }
  // Truncate if name is too long.
  name[n - 1] = 0;
    6d96:	add.w	r3, r9, r5
    6d9a:	ldrb.w	r2, [sp, #4]
    6d9e:	strb.w	r2, [r3, #-1]
    }
    if (!lfnGetName(ldir, name, size)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    6da2:	ldrb.w	r3, [sl]
    6da6:	lsls	r3, r3, #25
    6da8:	bmi.n	6cf0 <FatFile::getName(char*, unsigned int)+0x2c>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    6daa:	adds	r6, #1
    6dac:	ldrb.w	r3, [r8, #3]
    6db0:	uxtb	r6, r6
    6db2:	cmp	r3, r6
    6db4:	bcs.n	6d18 <FatFile::getName(char*, unsigned int)+0x54>
    if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
      return true;
    }
  }
  // Fall into fail.
  DBG_FAIL_MACRO;
    6db6:	movs	r0, #166	; 0xa6
    6db8:	bl	6c34 <dbgPrint(unsigned short)>
    6dbc:	b.n	6cea <FatFile::getName(char*, unsigned int)+0x26>
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    return getSFN(name);
    6dbe:	bl	779c <FatFile::getSFN(char*)>
    6dc2:	mov	r7, r0
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
  return false;
}
    6dc4:	mov	r0, r7
    6dc6:	add	sp, #52	; 0x34
    6dc8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
    6dcc:	mov	fp, r3
    6dce:	b.n	6d82 <FatFile::getName(char*, unsigned int)+0xbe>
  }
  if (!isLFN()) {
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    6dd0:	movs	r0, #136	; 0x88
    6dd2:	bl	6c34 <dbgPrint(unsigned short)>
    goto fail;
    6dd6:	b.n	6cea <FatFile::getName(char*, unsigned int)+0x26>
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
    6dd8:	movs	r0, #141	; 0x8d
    6dda:	bl	6c34 <dbgPrint(unsigned short)>
      goto fail;
    6dde:	b.n	6cea <FatFile::getName(char*, unsigned int)+0x26>
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
    6de0:	movs	r0, #146	; 0x92
    6de2:	bl	6c34 <dbgPrint(unsigned short)>
      goto fail;
    6de6:	b.n	6cea <FatFile::getName(char*, unsigned int)+0x26>
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME) {
      DBG_FAIL_MACRO;
    6de8:	movs	r0, #150	; 0x96
    6dea:	bl	6c34 <dbgPrint(unsigned short)>
      goto fail;
    6dee:	b.n	6cea <FatFile::getName(char*, unsigned int)+0x26>
    }
    if (order != (ldir->order & 0X1F)) {
      DBG_FAIL_MACRO;
    6df0:	movs	r0, #154	; 0x9a
    6df2:	bl	6c34 <dbgPrint(unsigned short)>
      goto fail;
    6df6:	b.n	6cea <FatFile::getName(char*, unsigned int)+0x26>

00006df8 <FatFile::parsePathName(char const*, fname_t*, char const**)>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    6df8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
    6dfc:	ldrb	r3, [r0, #0]
    6dfe:	cmp	r3, #32
    6e00:	bne.n	6e0a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12>
    6e02:	ldrb.w	r3, [r0, #1]!
    6e06:	cmp	r3, #32
    6e08:	beq.n	6e02 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
    6e0a:	str	r0, [r1, #8]

  for (len = 0; ; len++) {
    c = path[len];
    6e0c:	ldrb	r3, [r0, #0]
    if (c == 0 || isDirSeparator(c)) {
    6e0e:	cmp	r3, #0
    6e10:	beq.w	7042 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x24a>
    6e14:	cmp	r3, #47	; 0x2f
    6e16:	beq.n	6e84 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8c>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    6e18:	cmp	r3, #92	; 0x5c
    6e1a:	beq.n	6e62 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    6e1c:	sub.w	r4, r3, #34	; 0x22
    6e20:	uxtb	r4, r4
    6e22:	cmp	r4, #29
    6e24:	bls.n	6e6e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x76>
    6e26:	ldr.w	lr, [pc, #568]	; 7060 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x268>
    6e2a:	adds	r6, r0, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    6e2c:	movs	r4, #0
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    6e2e:	cmp	r3, #124	; 0x7c
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    6e30:	sub.w	r5, r3, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    6e34:	mov	r7, r6
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    6e36:	beq.n	6e62 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    6e38:	cmp	r5, #94	; 0x5e
    6e3a:	bhi.n	6e62 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    6e3c:	ldrb.w	r3, [r6], #1
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    6e40:	sub.w	r5, r3, #34	; 0x22
    6e44:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    6e46:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    6e48:	cmp	r3, #0
    6e4a:	beq.w	6ffe <FatFile::parsePathName(char const*, fname_t*, char const**)+0x206>
    6e4e:	cmp	r3, #47	; 0x2f
    6e50:	beq.n	6e86 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8e>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    6e52:	cmp	r3, #92	; 0x5c
    6e54:	lsr.w	r7, lr, r5
    6e58:	beq.n	6e62 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    6e5a:	cmp	r5, #29
    6e5c:	bhi.n	6e2e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    6e5e:	lsls	r7, r7, #31
    6e60:	bpl.n	6e2e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      DBG_FAIL_MACRO;
    6e62:	movs	r0, #211	; 0xd3
    6e64:	bl	6c34 <dbgPrint(unsigned short)>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    6e68:	movs	r0, #0
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      DBG_FAIL_MACRO;
      goto fail;
    6e6a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    6e6e:	ldr	r5, [pc, #496]	; (7060 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x268>)
    6e70:	lsr.w	r4, r5, r4
    6e74:	lsls	r4, r4, #31
    6e76:	bpl.n	6e26 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x2e>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      DBG_FAIL_MACRO;
    6e78:	movs	r0, #211	; 0xd3
    6e7a:	bl	6c34 <dbgPrint(unsigned short)>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    6e7e:	movs	r0, #0
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      DBG_FAIL_MACRO;
      goto fail;
    6e80:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    6e84:	movs	r4, #0
    6e86:	adds	r7, r0, r4
    6e88:	mov	r6, r7
    6e8a:	mov	r5, r4
    6e8c:	movs	r3, #47	; 0x2f
    6e8e:	b.n	6e96 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x9e>
    6e90:	ldrb.w	r3, [r6, #1]!
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    6e94:	adds	r5, #1
    6e96:	cmp	r3, #32
    6e98:	beq.n	6e90 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x98>
    6e9a:	cmp	r3, #47	; 0x2f
    6e9c:	beq.n	6e90 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x98>
  *ptr = &path[end];
    6e9e:	add	r5, r0
    6ea0:	str	r5, [r2, #0]

  // Back over spaces and dots.
  while (len) {
    6ea2:	cbz	r4, 6eb8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc0>
    6ea4:	mov	r2, r7
    c = path[len - 1];
    6ea6:	ldrb.w	r3, [r2, #-1]!
    if (c != '.' && c != ' ') {
    6eaa:	cmp	r3, #46	; 0x2e
    6eac:	beq.n	6eb4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xbc>
    6eae:	cmp	r3, #32
    6eb0:	bne.w	7004 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20c>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    6eb4:	subs	r4, #1
    6eb6:	bne.n	6ea6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xae>
    6eb8:	mov.w	r5, #4294967295
    6ebc:	mov	r3, r4
  // Max length of LFN is 255.
  if (len > 255) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
    6ebe:	str	r3, [r1, #4]
    6ec0:	add.w	r6, r1, #23
    6ec4:	add.w	r3, r1, #12
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    6ec8:	movs	r2, #32
    6eca:	strb.w	r2, [r3, #1]!
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    6ece:	cmp	r3, r6
    6ed0:	bne.n	6eca <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd2>
    6ed2:	subs	r6, r0, #1
    6ed4:	movs	r2, #0
    6ed6:	b.n	6eda <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe2>
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    6ed8:	adds	r2, #1
    6eda:	ldrb.w	r3, [r6, #1]!
    6ede:	cmp	r3, #46	; 0x2e
    6ee0:	beq.n	6ed8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe0>
    6ee2:	cmp	r3, #32
    6ee4:	beq.n	6ed8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe0>
  // Not 8.3 if leading dot or space.
  is83 = !si;
    6ee6:	clz	ip, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    6eea:	adds	r6, r5, #1
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
    6eec:	mov.w	ip, ip, lsr #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    6ef0:	beq.n	6f0c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x114>
    6ef2:	ldrb	r7, [r0, r5]
    6ef4:	cmp	r7, #46	; 0x2e
    6ef6:	add.w	r6, r0, r5
    6efa:	bne.n	6f06 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x10e>
    6efc:	b.n	6f0c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x114>
    6efe:	ldrb.w	r7, [r6, #-1]!
    6f02:	cmp	r7, #46	; 0x2e
    6f04:	beq.n	6f0c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x114>
    6f06:	adds.w	r5, r5, #4294967295
    6f0a:	bcs.n	6efe <FatFile::parsePathName(char const*, fname_t*, char const**)+0x106>
  for (; si < len; si++) {
    6f0c:	cmp	r2, r4
    6f0e:	mov.w	r9, #0
    6f12:	bge.w	704c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x254>
    6f16:	mov	r6, r9
    6f18:	mov	sl, r9
    6f1a:	movs	r7, #7
    6f1c:	mov.w	r8, #8
    6f20:	b.n	6f6e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x176>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    6f22:	cmp	r3, #46	; 0x2e
    6f24:	beq.n	6fb4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1bc>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
    6f26:	cmp	r3, #34	; 0x22
    6f28:	beq.n	6f42 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14a>
    6f2a:	cmp	r3, #124	; 0x7c
    6f2c:	beq.n	6f42 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14a>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    6f2e:	sub.w	lr, r3, #42	; 0x2a
    6f32:	cmp.w	lr, #5
    6f36:	bls.n	6fc8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1d0>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
    6f38:	sub.w	lr, r3, #58	; 0x3a
    6f3c:	cmp.w	lr, #5
    6f40:	bhi.n	6ff2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1fa>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    6f42:	cmp	r5, r2
    6f44:	beq.n	6fb8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    6f46:	cmp	r7, r6
    6f48:	bcc.n	6f9c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1a4>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
    6f4a:	mov.w	ip, #0
      c = '_';
    6f4e:	movs	r3, #95	; 0x5f
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    6f50:	add.w	lr, r6, #1
    6f54:	add.w	fp, r1, r6
    6f58:	uxtb.w	r6, lr
      if (i < 7) {
    6f5c:	cmp	r6, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    6f5e:	strb.w	r3, [fp, #13]
      if (i < 7) {
    6f62:	bhi.n	6f66 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16e>
        fname->seqPos = i;
    6f64:	strb	r6, [r1, #12]
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    6f66:	adds	r2, #1
    6f68:	cmp	r2, r4
    6f6a:	bge.n	6f7c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x184>
    6f6c:	ldrb	r3, [r0, r2]
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    6f6e:	cmp	r3, #32
    6f70:	bne.n	6f22 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12a>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    6f72:	adds	r2, #1
    6f74:	cmp	r2, r4
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
    6f76:	mov.w	ip, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    6f7a:	blt.n	6f6c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x174>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    6f7c:	ldrb	r3, [r1, #13]
    6f7e:	cmp	r3, #32
    6f80:	beq.n	702e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x236>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (is83) {
    6f82:	cmp.w	ip, #0
    6f86:	beq.n	7014 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x21c>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    6f88:	tst.w	sl, r9
    6f8c:	it	ne
    6f8e:	movne.w	r9, #2
    6f92:	strb.w	r9, [r1]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    6f96:	movs	r0, #1
    6f98:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    6f9c:	cmp	r7, #10
    6f9e:	beq.n	7028 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x230>
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
    6fa0:	cmp	r5, r2
    6fa2:	blt.n	7028 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x230>
    6fa4:	mov	r2, r5
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    6fa6:	movs	r7, #10
      i = 8;    // Place for extension.
    6fa8:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    6faa:	mov.w	r8, #16
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
    6fae:	mov.w	ip, #0
    6fb2:	b.n	6f66 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16e>

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    6fb4:	cmp	r5, r2
    6fb6:	bne.n	6f72 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x17a>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    6fb8:	cmp	r7, #10
    6fba:	beq.n	7028 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x230>
    6fbc:	mov	r2, r5
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    6fbe:	movs	r7, #10
      i = 8;    // Place for extension.
    6fc0:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    6fc2:	mov.w	r8, #16
    6fc6:	b.n	6f66 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16e>
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    6fc8:	cmp	r3, #45	; 0x2d
    6fca:	bne.n	6f42 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14a>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    6fcc:	sub.w	lr, r3, #33	; 0x21
    6fd0:	cmp.w	lr, #93	; 0x5d
    6fd4:	bhi.n	6f42 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14a>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    6fd6:	cmp	r5, r2
    6fd8:	beq.n	6fb8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1c0>
    6fda:	cmp	r7, r6
    6fdc:	bcc.n	6f9c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1a4>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
    6fde:	sub.w	lr, r3, #97	; 0x61
    6fe2:	cmp.w	lr, #25
    6fe6:	bhi.n	7050 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x258>
        c += 'A' - 'a';
    6fe8:	subs	r3, #32
    6fea:	uxtb	r3, r3
        lc |= bit;
    6fec:	orr.w	r9, r8, r9
    6ff0:	b.n	6f50 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x158>
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
    6ff2:	sub.w	lr, r3, #91	; 0x5b
    6ff6:	cmp.w	lr, #2
    6ffa:	bls.n	6f42 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14a>
    6ffc:	b.n	6fcc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1d4>
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    6ffe:	str	r7, [r2, #0]
    7000:	adds	r7, r0, r4
    7002:	b.n	6ea4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xac>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
    7004:	cmp	r4, #255	; 0xff
    7006:	ble.n	703c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x244>
    DBG_FAIL_MACRO;
    7008:	movs	r0, #229	; 0xe5
    700a:	bl	6c34 <dbgPrint(unsigned short)>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    700e:	movs	r0, #0
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
    DBG_FAIL_MACRO;
    goto fail;
    7010:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    7014:	ldrb	r3, [r1, #12]
    7016:	add	r3, r1
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    7018:	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    701a:	movs	r4, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    701c:	movs	r2, #49	; 0x31
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    701e:	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
    7020:	strb	r4, [r3, #13]
    fname->sfn[fname->seqPos + 1] = '1';
    7022:	strb	r2, [r3, #14]
    7024:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    7028:	ldrb	r3, [r1, #13]
    702a:	cmp	r3, #32
    702c:	bne.n	7014 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x21c>
    DBG_FAIL_MACRO;
    702e:	movw	r0, #285	; 0x11d
    7032:	bl	6c34 <dbgPrint(unsigned short)>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    7036:	movs	r0, #0
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    DBG_FAIL_MACRO;
    goto fail;
    7038:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    703c:	subs	r5, r4, #1
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    c = path[len - 1];
    703e:	mov	r3, r4
    7040:	b.n	6ebe <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc6>
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    7042:	str	r0, [r2, #0]
    7044:	mov	r4, r3
    7046:	mov.w	r5, #4294967295
    704a:	b.n	6ebe <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc6>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    704c:	mov	sl, r9
    704e:	b.n	6f7c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x184>
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
    7050:	sub.w	lr, r3, #65	; 0x41
    7054:	cmp.w	lr, #25
        uc |= bit;
    7058:	it	ls
    705a:	orrls.w	sl, r8, sl
    705e:	b.n	6f50 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x158>
    7060:	.word	0x35000101

00007064 <FatFile::remove()>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    7064:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    7068:	ldrb	r3, [r0, #2]

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    706a:	sub	sp, #40	; 0x28
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    706c:	movs	r2, #0
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    706e:	and.w	r3, r3, #2
    7072:	strb.w	r2, [sp, #4]
    7076:	strb.w	r2, [sp, #5]
    707a:	strb.w	r2, [sp, #6]
    707e:	cmp	r3, #0
    7080:	beq.n	70fc <FatFile::remove()+0x98>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    7082:	ldr	r1, [r0, #32]
    7084:	mov	r6, r0
    7086:	cbnz	r1, 70e0 <FatFile::remove()+0x7c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    7088:	movs	r1, #1
    708a:	mov	r0, r6
    708c:	bl	57b4 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7090:	mov	r7, r0
    7092:	cmp	r0, #0
    7094:	beq.w	71c0 <FatFile::remove()+0x15c>
    7098:	subs	r1, r7, #1
    709a:	add.w	r0, r7, #10
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    709e:	movs	r4, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    70a0:	lsrs	r2, r4, #1
    70a2:	ldrb.w	r5, [r1, #1]!
    70a6:	orr.w	r3, r2, r4, lsl #7
    70aa:	uxtab	r3, r5, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    70ae:	cmp	r1, r0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    70b0:	uxtb	r4, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    70b2:	bne.n	70a0 <FatFile::remove()+0x3c>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    70b4:	mov.w	r8, #229	; 0xe5
    70b8:	strb.w	r8, [r7]
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    70bc:	ldr	r5, [r6, #8]

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    70be:	movs	r3, #0
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    70c0:	add.w	r0, r5, #40	; 0x28
    70c4:	strb	r3, [r6, #0]
  m_flags = 0;
    70c6:	strb	r3, [r6, #2]
    70c8:	bl	6790 <FatCache::sync()>
    70cc:	cbnz	r0, 7110 <FatFile::remove()+0xac>

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    DBG_FAIL_MACRO;
    70ce:	movw	r0, #594	; 0x252
    70d2:	bl	6c34 <dbgPrint(unsigned short)>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    70d6:	movs	r5, #0
}
    70d8:	mov	r0, r5
    70da:	add	sp, #40	; 0x28
    70dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    70e0:	ldr	r0, [r0, #8]
    70e2:	bl	698c <FatPartition::freeChain(unsigned long)>
    70e6:	mov	r5, r0
    70e8:	cmp	r0, #0
    70ea:	bne.n	7088 <FatFile::remove()+0x24>
    DBG_FAIL_MACRO;
    70ec:	movw	r0, #574	; 0x23e
    70f0:	bl	6c34 <dbgPrint(unsigned short)>
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
}
    70f4:	mov	r0, r5
    70f6:	add	sp, #40	; 0x28
    70f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    70fc:	movw	r0, #569	; 0x239
    7100:	and.w	r5, r3, #255	; 0xff
    7104:	bl	6c34 <dbgPrint(unsigned short)>
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
}
    7108:	mov	r0, r5
    710a:	add	sp, #40	; 0x28
    710c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7110:	add.w	r0, r5, #564	; 0x234
    7114:	bl	6790 <FatCache::sync()>
    7118:	cmp	r0, #0
    711a:	beq.n	70ce <FatFile::remove()+0x6a>
    711c:	ldr	r0, [r5, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    711e:	ldr	r3, [r0, #0]
    7120:	ldr	r3, [r3, #20]
    7122:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7124:	mov	r5, r0
    7126:	cmp	r0, #0
    7128:	beq.n	70ce <FatFile::remove()+0x6a>
  // Write entry to device.
  if (!m_vol->cacheSync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    712a:	ldrb	r3, [r6, #3]
    712c:	cmp	r3, #0
    712e:	beq.n	70d8 <FatFile::remove()+0x74>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    7130:	add	r0, sp, #4
    7132:	mov	r1, r6
    7134:	bl	6c94 <FatFile::openCluster(FatFile*)>
    7138:	mov	r3, r0
    713a:	cmp	r0, #0
    713c:	beq.n	71b4 <FatFile::remove()+0x150>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    713e:	ldrb	r3, [r6, #3]
    7140:	movs	r7, #1
    7142:	cbnz	r3, 7188 <FatFile::remove()+0x124>
    7144:	b.n	71cc <FatFile::remove()+0x168>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    7146:	add	r0, sp, #4
    7148:	bl	5c10 <FatFile::readDirCache(bool)>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    714c:	adds	r1, r7, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
    714e:	mov	r3, r0
    7150:	cmp	r0, #0
    7152:	beq.n	71d8 <FatFile::remove()+0x174>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    7154:	ldrb	r2, [r0, #11]
    7156:	cmp	r2, #15
    7158:	bne.n	71a8 <FatFile::remove()+0x144>
        order != (ldir->order & 0X1F) ||
    715a:	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    715c:	and.w	r0, r2, #31
    7160:	cmp	r7, r0
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    7162:	uxtb	r7, r1
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    7164:	bne.n	71a8 <FatFile::remove()+0x144>
        order != (ldir->order & 0X1F) ||
    7166:	ldrb	r1, [r3, #13]
    7168:	cmp	r1, r4
    716a:	bne.n	71a8 <FatFile::remove()+0x144>
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    716c:	strb.w	r8, [r3]
    m_vol->cacheDirty();
    7170:	ldr	r1, [r6, #8]
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    7172:	ldrb.w	r3, [r1, #40]	; 0x28
    7176:	orr.w	r3, r3, #1
    717a:	strb.w	r3, [r1, #40]	; 0x28
    if (last) {
    717e:	lsls	r3, r2, #25
    7180:	bmi.n	71e4 <FatFile::remove()+0x180>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    7182:	ldrb	r3, [r6, #3]
    7184:	cmp	r3, r7
    7186:	bcc.n	71cc <FatFile::remove()+0x168>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    7188:	ldrh	r1, [r6, #4]
    718a:	subs	r1, r1, r7
    718c:	lsls	r1, r1, #5
    718e:	add	r0, sp, #4
    7190:	bl	5c60 <FatFile::seekSet(unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    7194:	movs	r1, #0
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    7196:	mov	r3, r0
    7198:	cmp	r0, #0
    719a:	bne.n	7146 <FatFile::remove()+0xe2>
      DBG_FAIL_MACRO;
    719c:	movw	r0, #607	; 0x25f
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    71a0:	mov	r5, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
    71a2:	bl	6c34 <dbgPrint(unsigned short)>
      goto fail;
    71a6:	b.n	70d8 <FatFile::remove()+0x74>
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
        order != (ldir->order & 0X1F) ||
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
    71a8:	movw	r0, #618	; 0x26a
    71ac:	bl	6c34 <dbgPrint(unsigned short)>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    71b0:	movs	r5, #0
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
        order != (ldir->order & 0X1F) ||
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
      goto fail;
    71b2:	b.n	70d8 <FatFile::remove()+0x74>
  if (!isLFN()) {
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    71b4:	movw	r0, #602	; 0x25a
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    71b8:	mov	r5, r3
  if (!isLFN()) {
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    71ba:	bl	6c34 <dbgPrint(unsigned short)>
    goto fail;
    71be:	b.n	70d8 <FatFile::remove()+0x74>
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    71c0:	mov.w	r0, #580	; 0x244
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    71c4:	mov	r5, r7
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    71c6:	bl	6c34 <dbgPrint(unsigned short)>
    goto fail;
    71ca:	b.n	70d8 <FatFile::remove()+0x74>
      }
      return true;
    }
  }
  // Fall into fail.
  DBG_FAIL_MACRO;
    71cc:	movw	r0, #633	; 0x279
    71d0:	bl	6c34 <dbgPrint(unsigned short)>

fail:
  return false;
    71d4:	movs	r5, #0
    71d6:	b.n	70d8 <FatFile::remove()+0x74>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
    71d8:	mov.w	r0, #612	; 0x264
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    71dc:	mov	r5, r3
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
    71de:	bl	6c34 <dbgPrint(unsigned short)>
      goto fail;
    71e2:	b.n	70d8 <FatFile::remove()+0x74>
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    m_vol->cacheDirty();
    if (last) {
      if (!m_vol->cacheSync()) {
    71e4:	ldr	r4, [r6, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    71e6:	add.w	r0, r4, #40	; 0x28
    71ea:	bl	6790 <FatCache::sync()>
    71ee:	cbnz	r0, 71fc <FatFile::remove()+0x198>
        DBG_FAIL_MACRO;
    71f0:	movw	r0, #626	; 0x272
    71f4:	bl	6c34 <dbgPrint(unsigned short)>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    71f8:	movs	r5, #0
    ldir->order = FAT_NAME_DELETED;
    m_vol->cacheDirty();
    if (last) {
      if (!m_vol->cacheSync()) {
        DBG_FAIL_MACRO;
        goto fail;
    71fa:	b.n	70d8 <FatFile::remove()+0x74>
    71fc:	add.w	r0, r4, #564	; 0x234
    7200:	bl	6790 <FatCache::sync()>
    7204:	cmp	r0, #0
    7206:	beq.n	71f0 <FatFile::remove()+0x18c>
    7208:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    720a:	ldr	r3, [r0, #0]
    720c:	ldr	r3, [r3, #20]
    720e:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7210:	cmp	r0, #0
    7212:	beq.n	71f0 <FatFile::remove()+0x18c>
    7214:	b.n	70d8 <FatFile::remove()+0x74>
    7216:	nop

00007218 <FatFile::lfnUniqueSfn(fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    7218:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
  DirFat_t *dir;
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
    721c:	ldrb	r3, [r1, #0]
    721e:	lsls	r2, r3, #31
    7220:	bpl.n	7310 <FatFile::lfnUniqueSfn(fname_t*)+0xf8>
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    7222:	ldrb	r7, [r1, #12]
  DirFat_t *dir;
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');
    7224:	adds	r3, r1, r7
    7226:	mov	r5, r1
    7228:	ldrb	r2, [r3, #13]
    722a:	cmp	r2, #126	; 0x7e
    722c:	mov	r8, r0
    722e:	beq.n	7258 <FatFile::lfnUniqueSfn(fname_t*)+0x40>
    7230:	ldrb	r3, [r3, #14]
    7232:	cmp	r3, #49	; 0x31
    7234:	beq.n	7258 <FatFile::lfnUniqueSfn(fname_t*)+0x40>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    7236:	movs	r1, #9
    7238:	ldr	r0, [pc, #260]	; (7340 <FatFile::lfnUniqueSfn(fname_t*)+0x128>)
    723a:	bl	9480 <usb_serial_write>
    723e:	movs	r1, #107	; 0x6b
    7240:	ldr	r0, [pc, #256]	; (7344 <FatFile::lfnUniqueSfn(fname_t*)+0x12c>)
    7242:	bl	9480 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    7246:	movw	r1, #646	; 0x286
    724a:	ldr	r0, [pc, #252]	; (7348 <FatFile::lfnUniqueSfn(fname_t*)+0x130>)
    724c:	bl	aa68 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    7250:	ldr	r0, [pc, #244]	; (7348 <FatFile::lfnUniqueSfn(fname_t*)+0x130>)
    7252:	bl	a99c <Print::println()>
    7256:	b.n	7256 <FatFile::lfnUniqueSfn(fname_t*)+0x3e>
    7258:	movs	r6, #2
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    725a:	add.w	r9, r5, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
    725e:	ldr	r1, [r5, #4]
    7260:	ldr	r2, [r5, #8]
    7262:	adds	r3, r6, r1
    7264:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    7266:	cbz	r1, 727a <FatFile::lfnUniqueSfn(fname_t*)+0x62>
    7268:	adds	r0, r2, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    726a:	ldrb.w	r1, [r2], #1
    726e:	add.w	r3, r3, r3, lsl #5
    7272:	eors	r3, r1
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    7274:	cmp	r0, r2
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    7276:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    7278:	bne.n	726a <FatFile::lfnUniqueSfn(fname_t*)+0x52>
    727a:	cmp	r7, #3
    727c:	it	cs
    727e:	movcs	r7, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    7280:	adds	r2, r7, #4
    7282:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
    7284:	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    7288:	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    728a:	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    728c:	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    728e:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    7290:	ite	ls
    7292:	addls	r1, #48	; 0x30
    7294:	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    7296:	cmp	r2, r7
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
    7298:	mov.w	r3, r3, lsr #4
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    729c:	strb	r1, [r0, #13]
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    729e:	bhi.n	7284 <FatFile::lfnUniqueSfn(fname_t*)+0x6c>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    72a0:	adds	r3, r5, r7
    72a2:	movs	r2, #126	; 0x7e
    72a4:	strb	r2, [r3, #13]
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    72a6:	movs	r1, #0
    72a8:	mov	r0, r8
    72aa:	bl	5c60 <FatFile::seekSet(unsigned long)>
    rewind();
    while (1) {
      dir = readDirCache(true);
    72ae:	movs	r1, #1
    72b0:	mov	r0, r8
    72b2:	bl	5c10 <FatFile::readDirCache(bool)>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    72b6:	movs	r2, #11
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    72b8:	mov	r4, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    72ba:	mov	r1, r0
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    72bc:	cbz	r0, 72e6 <FatFile::lfnUniqueSfn(fname_t*)+0xce>
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    72be:	ldrb	r3, [r4, #0]
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    72c0:	mov	r0, r9
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    72c2:	cbz	r3, 72ec <FatFile::lfnUniqueSfn(fname_t*)+0xd4>
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    72c4:	ldrb	r3, [r4, #11]
    72c6:	lsls	r3, r3, #28
    72c8:	bmi.n	72ae <FatFile::lfnUniqueSfn(fname_t*)+0x96>
    72ca:	bl	bf50 <memcmp>
    72ce:	mov	r4, r0
    72d0:	cmp	r0, #0
    72d2:	bne.n	72ae <FatFile::lfnUniqueSfn(fname_t*)+0x96>
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
    72d4:	cmp	r6, #99	; 0x63
    72d6:	bne.n	72f2 <FatFile::lfnUniqueSfn(fname_t*)+0xda>
        break;
      }
    }
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;
    72d8:	movw	r0, #686	; 0x2ae
    72dc:	bl	6c34 <dbgPrint(unsigned short)>

fail:
  return false;
    72e0:	mov	r0, r4
    72e2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
        if (!getError()) {
    72e6:	ldrb.w	r3, [r8, #1]
    72ea:	cbnz	r3, 7332 <FatFile::lfnUniqueSfn(fname_t*)+0x11a>

fail:
  return false;

done:
  return true;
    72ec:	movs	r0, #1
    72ee:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    72f2:	movs	r1, #107	; 0x6b
    72f4:	ldr	r0, [pc, #76]	; (7344 <FatFile::lfnUniqueSfn(fname_t*)+0x12c>)
    72f6:	bl	9480 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    72fa:	mov.w	r1, #652	; 0x28c
    72fe:	ldr	r0, [pc, #72]	; (7348 <FatFile::lfnUniqueSfn(fname_t*)+0x130>)
    7300:	bl	aa68 <Print::print(long)>
    7304:	adds	r6, #1
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    7306:	ldr	r0, [pc, #64]	; (7348 <FatFile::lfnUniqueSfn(fname_t*)+0x130>)
    7308:	bl	a99c <Print::println()>
    730c:	uxth	r6, r6
    730e:	b.n	725e <FatFile::lfnUniqueSfn(fname_t*)+0x46>
    7310:	movs	r1, #9
    7312:	ldr	r0, [pc, #44]	; (7340 <FatFile::lfnUniqueSfn(fname_t*)+0x128>)
    7314:	bl	9480 <usb_serial_write>
    7318:	movs	r1, #107	; 0x6b
    731a:	ldr	r0, [pc, #40]	; (7344 <FatFile::lfnUniqueSfn(fname_t*)+0x12c>)
    731c:	bl	9480 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    7320:	movw	r1, #645	; 0x285
    7324:	ldr	r0, [pc, #32]	; (7348 <FatFile::lfnUniqueSfn(fname_t*)+0x130>)
    7326:	bl	aa68 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    732a:	ldr	r0, [pc, #28]	; (7348 <FatFile::lfnUniqueSfn(fname_t*)+0x130>)
    732c:	bl	a99c <Print::println()>
    7330:	b.n	7330 <FatFile::lfnUniqueSfn(fname_t*)+0x118>
      if (!dir) {
        if (!getError()) {
          // At EOF and name not found if no error.
          goto done;
        }
        DBG_FAIL_MACRO;
    7332:	movw	r0, #673	; 0x2a1
    7336:	bl	6c34 <dbgPrint(unsigned short)>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

fail:
  return false;
    733a:	mov	r0, r4
        if (!getError()) {
          // At EOF and name not found if no error.
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
    733c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7340:	.word	0x0000fcec
    7344:	.word	0x0000fcf8
    7348:	.word	0x1fff098c

0000734c <FatFile::open(FatFile*, fname_t*, int)>:
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    734c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7350:	mov	r6, r1
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    7352:	ldrb	r1, [r1, #0]
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    7354:	sub	sp, #52	; 0x34
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    7356:	tst.w	r1, #112	; 0x70
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    735a:	str	r0, [sp, #32]
    735c:	str	r3, [sp, #24]
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    735e:	beq.n	7364 <FatFile::open(FatFile*, fname_t*, int)+0x18>
    7360:	ldrb	r3, [r0, #0]
    7362:	cbz	r3, 7376 <FatFile::open(FatFile*, fname_t*, int)+0x2a>
    DBG_FAIL_MACRO;
    7364:	movw	r0, #319	; 0x13f
    7368:	bl	6c34 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  return false;
    736c:	movs	r5, #0
}
    736e:	mov	r0, r5
    7370:	add	sp, #52	; 0x34
    7372:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    7376:	ldrb	r3, [r2, #0]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;
    7378:	ldr.w	r8, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    737c:	lsls	r3, r3, #30
    737e:	mov	fp, r2
    7380:	bne.n	7404 <FatFile::open(FatFile*, fname_t*, int)+0xb8>
    7382:	movs	r7, #1
    7384:	movs	r1, #0
    7386:	mov	r0, r6
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
  uint8_t ms10;
  uint16_t freeIndex = 0;
    7388:	mov	r9, r1
    738a:	bl	5c60 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    738e:	add.w	r3, fp, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
    7392:	str.w	r9, [sp, #28]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
    7396:	str.w	r9, [sp, #12]
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
    739a:	mov	r4, r9
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
    739c:	mov	sl, r9
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
    739e:	str.w	r9, [sp, #20]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    73a2:	str	r3, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    73a4:	movs	r1, #1
    73a6:	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    73a8:	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache(true);
    73aa:	bl	5c10 <FatFile::readDirCache(bool)>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    73ae:	ubfx	r5, r5, #5, #16
    dir = dirFile->readDirCache(true);
    if (!dir) {
    73b2:	mov	r3, r0
    73b4:	cmp	r0, #0
    73b6:	beq.w	74ce <FatFile::open(FatFile*, fname_t*, int)+0x182>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    73ba:	ldrb	r2, [r0, #0]
    73bc:	cmp	r2, #229	; 0xe5
    73be:	beq.n	7430 <FatFile::open(FatFile*, fname_t*, int)+0xe4>
    73c0:	cmp	r2, #0
    73c2:	beq.n	7430 <FatFile::open(FatFile*, fname_t*, int)+0xe4>
      if (dir->name[0] == FAT_NAME_FREE) {
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
    73c4:	cmp	r4, r7
    73c6:	it	cc
    73c8:	movcc	r4, #0
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    73ca:	cmp	r2, #46	; 0x2e
    73cc:	beq.n	742a <FatFile::open(FatFile*, fname_t*, int)+0xde>
    73ce:	ldrb	r1, [r3, #11]
      lfnOrd = 0;
    } else if (isLongName(dir)) {
    73d0:	cmp	r1, #15
    73d2:	beq.n	744c <FatFile::open(FatFile*, fname_t*, int)+0x100>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
    73d4:	and.w	r1, r1, #8
    73d8:	and.w	r2, r1, #255	; 0xff
    73dc:	cbnz	r1, 742a <FatFile::open(FatFile*, fname_t*, int)+0xde>
      if (lfnOrd) {
    73de:	cmp.w	sl, #0
    73e2:	bne.w	7736 <FatFile::open(FatFile*, fname_t*, int)+0x3ea>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    73e6:	mov	r0, r3
    73e8:	movs	r2, #11
    73ea:	ldr	r1, [sp, #16]
    73ec:	bl	bf50 <memcmp>
    73f0:	cmp	r0, #0
    73f2:	bne.n	73a4 <FatFile::open(FatFile*, fname_t*, int)+0x58>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    73f4:	ldrb.w	r3, [fp]
    73f8:	lsls	r0, r3, #31
    73fa:	bpl.w	7716 <FatFile::open(FatFile*, fname_t*, int)+0x3ca>
          goto found;
        }
        fnameFound = true;
    73fe:	movs	r3, #1
    7400:	str	r3, [sp, #20]
    7402:	b.n	73a4 <FatFile::open(FatFile*, fname_t*, int)+0x58>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    7404:	ldr	r7, [pc, #744]	; (76f0 <FatFile::open(FatFile*, fname_t*, int)+0x3a4>)
    7406:	add.w	r3, r8, #12
    740a:	umull	r3, r7, r7, r3
    740e:	lsrs	r7, r7, #2
    7410:	adds	r7, #1
    7412:	uxtb	r7, r7
    7414:	b.n	7384 <FatFile::open(FatFile*, fname_t*, int)+0x38>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    7416:	ldr	r1, [sp, #12]
    7418:	subs	r1, #1
    741a:	uxtb	r1, r1
    741c:	cmp	r2, r1
    741e:	str	r1, [sp, #12]
    7420:	bne.n	742a <FatFile::open(FatFile*, fname_t*, int)+0xde>
    7422:	ldrb	r2, [r3, #13]
    7424:	ldr	r1, [sp, #28]
    7426:	cmp	r1, r2
    7428:	beq.n	7462 <FatFile::open(FatFile*, fname_t*, int)+0x116>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    742a:	mov.w	sl, #0
    742e:	b.n	73a4 <FatFile::open(FatFile*, fname_t*, int)+0x58>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    7430:	cmp	r4, #0
    7432:	it	eq
    7434:	moveq	r9, r5
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
    7436:	cmp	r4, r7
        freeFound++;
    7438:	itt	cc
    743a:	addcc	r4, #1
    743c:	uxtbcc	r4, r4
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    743e:	cmp	r2, #0
    7440:	beq.n	74d6 <FatFile::open(FatFile*, fname_t*, int)+0x18a>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    7442:	cmp	r2, #229	; 0xe5
    7444:	bne.n	73ca <FatFile::open(FatFile*, fname_t*, int)+0x7e>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    7446:	mov.w	sl, #0
    744a:	b.n	73a4 <FatFile::open(FatFile*, fname_t*, int)+0x58>
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
      lfnOrd = 0;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
    744c:	cmp.w	sl, #0
    7450:	bne.n	7416 <FatFile::open(FatFile*, fname_t*, int)+0xca>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
    7452:	lsls	r5, r2, #25
    7454:	bpl.n	73a4 <FatFile::open(FatFile*, fname_t*, int)+0x58>
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    7456:	and.w	sl, r2, #31
        checksum = ldir->checksum;
    745a:	ldrb	r2, [r3, #13]
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    745c:	str.w	sl, [sp, #12]
        checksum = ldir->checksum;
    7460:	str	r2, [sp, #28]
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    7462:	ldr	r2, [sp, #12]
    7464:	subs	r2, #1
    7466:	add.w	r5, r2, r2, lsl #1
    746a:	add.w	r5, r2, r5, lsl #2
      if (k >= len) {
    746e:	cmp	r8, r5
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    7470:	mov	r2, r5
      if (k >= len) {
    7472:	bls.n	742a <FatFile::open(FatFile*, fname_t*, int)+0xde>
    7474:	add.w	r1, r5, #13
    7478:	str.w	sl, [sp, #36]	; 0x24
    747c:	mov	sl, r1
    747e:	b.n	74aa <FatFile::open(FatFile*, fname_t*, int)+0x15e>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    7480:	ldr.w	r0, [fp, #8]
    7484:	ldrb	r2, [r0, r2]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    7486:	cmp.w	ip, #25
    748a:	it	ls
    748c:	addls	r1, #32
    748e:	sub.w	r0, r2, #65	; 0x41
    7492:	it	ls
    7494:	uxtbls	r1, r1
    7496:	cmp	r0, #25
    7498:	itt	ls
    749a:	addls	r2, #32
    749c:	uxtbls	r2, r2
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    749e:	cmp	r2, r1
    74a0:	bne.n	742a <FatFile::open(FatFile*, fname_t*, int)+0xde>
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
    74a2:	cmp	lr, sl
    74a4:	beq.w	7632 <FatFile::open(FatFile*, fname_t*, int)+0x2e6>
    74a8:	mov	r2, lr
        uint16_t u = lfnGetChar(ldir, i);
    74aa:	subs	r1, r2, r5
    74ac:	uxtb	r1, r1
    74ae:	mov	r0, r3
    74b0:	bl	6c0c <lfnGetChar(DirLfn_t*, unsigned char)>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    74b4:	uxtb	r1, r0
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    74b6:	cmp	r8, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    74b8:	sub.w	ip, r1, #65	; 0x41
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    74bc:	add.w	lr, r2, #1
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    74c0:	beq.w	76e0 <FatFile::open(FatFile*, fname_t*, int)+0x394>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    74c4:	cmp	r0, #255	; 0xff
    74c6:	bls.n	7480 <FatFile::open(FatFile*, fname_t*, int)+0x134>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    74c8:	mov.w	sl, #0
    74cc:	b.n	73a4 <FatFile::open(FatFile*, fname_t*, int)+0x58>
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
    74ce:	ldrb	r2, [r6, #1]
    74d0:	cmp	r2, #0
    74d2:	bne.w	7638 <FatFile::open(FatFile*, fname_t*, int)+0x2ec>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    74d6:	ldr	r2, [sp, #24]
    74d8:	mov	r3, r2
    74da:	lsls	r2, r3, #22
    74dc:	bpl.n	74e8 <FatFile::open(FatFile*, fname_t*, int)+0x19c>
    74de:	and.w	r3, r3, #3
    74e2:	subs	r3, #1
    74e4:	cmp	r3, #1
    74e6:	bls.n	74fa <FatFile::open(FatFile*, fname_t*, int)+0x1ae>
    DBG_FAIL_MACRO;
    74e8:	mov.w	r0, #418	; 0x1a2
    74ec:	bl	6c34 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  return false;
    74f0:	movs	r5, #0
}
    74f2:	mov	r0, r5
    74f4:	add	sp, #52	; 0x34
    74f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    74fa:	cmp	r4, #0
    74fc:	it	eq
    74fe:	moveq	r9, r5
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    7500:	cmp	r4, r7
    7502:	bcc.n	750c <FatFile::open(FatFile*, fname_t*, int)+0x1c0>
    7504:	b.n	7558 <FatFile::open(FatFile*, fname_t*, int)+0x20c>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    7506:	uxtb	r4, r3
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    7508:	cmp	r7, r4
    750a:	bls.n	7558 <FatFile::open(FatFile*, fname_t*, int)+0x20c>
    dir = dirFile->readDirCache();
    750c:	movs	r1, #0
    750e:	mov	r0, r6
    7510:	bl	5c10 <FatFile::readDirCache(bool)>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    7514:	adds	r3, r4, #1
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
    7516:	cmp	r0, #0
    7518:	bne.n	7506 <FatFile::open(FatFile*, fname_t*, int)+0x1ba>
      if (dirFile->getError()) {
    751a:	ldrb	r2, [r6, #1]
    751c:	mov	r3, r0
    751e:	cbz	r2, 7534 <FatFile::open(FatFile*, fname_t*, int)+0x1e8>
        DBG_FAIL_MACRO;
    7520:	mov.w	r0, #430	; 0x1ae
    goto fail;
  }
  return true;

fail:
  return false;
    7524:	mov	r5, r3

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
      if (dirFile->getError()) {
        DBG_FAIL_MACRO;
    7526:	bl	6c34 <dbgPrint(unsigned short)>
        goto fail;
    752a:	b.n	736e <FatFile::open(FatFile*, fname_t*, int)+0x22>
    752c:	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
    752e:	ldrb	r3, [r3, #4]
    7530:	cmp	r3, #1
    7532:	bhi.n	7558 <FatFile::open(FatFile*, fname_t*, int)+0x20c>
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    7534:	cmp	r7, r4
    7536:	bls.n	7558 <FatFile::open(FatFile*, fname_t*, int)+0x20c>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    7538:	mov	r0, r6
    753a:	bl	56e0 <FatFile::addDirCluster()>
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    753e:	adds	r4, #16
    7540:	uxtb	r4, r4
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    7542:	cmp	r0, #0
    7544:	bne.n	752c <FatFile::open(FatFile*, fname_t*, int)+0x1e0>
    7546:	mov	r5, r0
      DBG_FAIL_MACRO;
    7548:	movw	r0, #441	; 0x1b9
    754c:	bl	6c34 <dbgPrint(unsigned short)>
  }
  return true;

fail:
  return false;
}
    7550:	mov	r0, r5
    7552:	add	sp, #52	; 0x34
    7554:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    7558:	ldr	r3, [sp, #20]
    755a:	cbz	r3, 756c <FatFile::open(FatFile*, fname_t*, int)+0x220>
    if (!dirFile->lfnUniqueSfn(fname)) {
    755c:	mov	r1, fp
    755e:	mov	r0, r6
    7560:	bl	7218 <FatFile::lfnUniqueSfn(fname_t*)>
    7564:	mov	r5, r0
    7566:	cmp	r0, #0
    7568:	beq.w	736e <FatFile::open(FatFile*, fname_t*, int)+0x22>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    756c:	mov.w	r1, r9, lsl #5
    7570:	mov	r0, r6
    7572:	bl	5c60 <FatFile::seekSet(unsigned long)>
    7576:	mov	r5, r0
    7578:	cmp	r0, #0
    757a:	beq.w	7748 <FatFile::open(FatFile*, fname_t*, int)+0x3fc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
    757e:	subs	r7, #1
  for (order = lfnOrd ; order ; order--) {
    7580:	ands.w	sl, r7, #255	; 0xff
    7584:	beq.n	764c <FatFile::open(FatFile*, fname_t*, int)+0x300>
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    7586:	orr.w	r5, sl, #64	; 0x40
    758a:	uxtb	r5, r5
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    758c:	mov	r7, sl
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    758e:	mov.w	r9, #0
    7592:	movs	r1, #0
    7594:	mov	r0, r6
    7596:	bl	5c10 <FatFile::readDirCache(bool)>
    if (!ldir) {
    759a:	cmp	r0, #0
    759c:	beq.w	7728 <FatFile::open(FatFile*, fname_t*, int)+0x3dc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    75a0:	ldr	r2, [r6, #8]
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    75a2:	ldrb.w	r3, [r2, #40]	; 0x28
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    75a6:	cmp	sl, r7
    75a8:	orr.w	r3, r3, #1
    75ac:	ite	ne
    75ae:	movne	r4, r7
    75b0:	moveq	r4, r5
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    75b2:	movs	r1, #15
    75b4:	strb.w	r3, [r2, #40]	; 0x28
    75b8:	add.w	lr, fp, #23
    75bc:	add.w	r3, fp, #12
    ldir->mustBeZero1 = 0;
    75c0:	strb.w	r9, [r0, #12]
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    75c4:	strb	r4, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    75c6:	strb	r1, [r0, #11]
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    75c8:	movs	r2, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    75ca:	ldrb.w	ip, [r3, #1]!
    75ce:	lsrs	r1, r2, #1
    75d0:	orr.w	r2, r1, r2, lsl #7
    75d4:	uxtab	r2, ip, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    75d8:	cmp	r3, lr
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    75da:	uxtb	r2, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    75dc:	bne.n	75ca <FatFile::open(FatFile*, fname_t*, int)+0x27e>
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    75de:	and.w	r4, r4, #31
    75e2:	subs	r4, #1
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    75e4:	strb	r2, [r0, #13]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    75e6:	add.w	r3, r4, r4, lsl #1
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
    75ea:	ldr.w	r2, [fp, #8]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    75ee:	strh.w	r9, [r0, #26]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    75f2:	add.w	r4, r4, r3, lsl #2
    75f6:	adds	r0, #4
  for (uint8_t i = 0; i < 13; i++, k++) {
    75f8:	movs	r3, #0
    75fa:	b.n	761a <FatFile::open(FatFile*, fname_t*, int)+0x2ce>
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    75fc:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    75fe:	ldrb	r1, [r2, r4]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    7600:	bls.n	762c <FatFile::open(FatFile*, fname_t*, int)+0x2e0>
    setLe16(ldir->unicode1 + 2*i, c);
  } else if (i < 11) {
    7602:	cmp	r3, #10
    7604:	ite	ls
    7606:	strhls	r1, [r0, #0]
    7608:	strhhi	r1, [r0, #2]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    760a:	adds	r3, #1
    760c:	uxtb	r3, r3
    760e:	cmp	r3, #13
    7610:	add.w	r4, r4, #1
    7614:	add.w	r0, r0, #2
    7618:	beq.n	7644 <FatFile::open(FatFile*, fname_t*, int)+0x2f8>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    761a:	cmp	r8, r4
    761c:	bhi.n	75fc <FatFile::open(FatFile*, fname_t*, int)+0x2b0>
    761e:	ite	ne
    7620:	movne.w	r1, #4294967295
    7624:	moveq	r1, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    7626:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    7628:	uxth	r1, r1
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    762a:	bhi.n	7602 <FatFile::open(FatFile*, fname_t*, int)+0x2b6>
    762c:	strh.w	r1, [r0, #-3]
    7630:	b.n	760a <FatFile::open(FatFile*, fname_t*, int)+0x2be>
    7632:	ldr.w	sl, [sp, #36]	; 0x24
    7636:	b.n	73a4 <FatFile::open(FatFile*, fname_t*, int)+0x58>
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
        DBG_FAIL_MACRO;
    7638:	movw	r0, #331	; 0x14b
    goto fail;
  }
  return true;

fail:
  return false;
    763c:	mov	r5, r3
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
        DBG_FAIL_MACRO;
    763e:	bl	6c34 <dbgPrint(unsigned short)>
        goto fail;
    7642:	b.n	736e <FatFile::open(FatFile*, fname_t*, int)+0x22>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    7644:	subs	r7, #1
    7646:	ands.w	r7, r7, #255	; 0xff
    764a:	bne.n	7592 <FatFile::open(FatFile*, fname_t*, int)+0x246>
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
  dir = dirFile->readDirCache();
    764c:	movs	r1, #0
    764e:	mov	r0, r6
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    7650:	ldr	r5, [r6, #20]
  dir = dirFile->readDirCache();
    7652:	bl	5c10 <FatFile::readDirCache(bool)>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    7656:	ubfx	r5, r5, #5, #16
  dir = dirFile->readDirCache();
  if (!dir) {
    765a:	mov	r4, r0
    765c:	cmp	r0, #0
    765e:	beq.n	7752 <FatFile::open(FatFile*, fname_t*, int)+0x406>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    7660:	movs	r2, #32
    7662:	movs	r1, #0
    7664:	bl	c07c <memset>
  memcpy(dir->name, fname->sfn, 11);
    7668:	mov	r3, fp

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;

  // set timestamps
  if (FsDateTime::callback) {
    766a:	ldr	r2, [pc, #136]	; (76f4 <FatFile::open(FatFile*, fname_t*, int)+0x3a8>)
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);
    766c:	ldr.w	r1, [r3, #13]!
    7670:	ldr	r0, [r3, #4]
    7672:	str	r0, [r4, #4]
    7674:	str	r1, [r4, #0]
    7676:	ldrh	r1, [r3, #8]
    7678:	ldrb	r3, [r3, #10]
    767a:	strb	r3, [r4, #10]
    767c:	strh	r1, [r4, #8]

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    767e:	ldrb.w	r3, [fp]

  // set timestamps
  if (FsDateTime::callback) {
    7682:	ldr	r7, [r2, #0]
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    7684:	and.w	r3, r3, #24
    7688:	strb	r3, [r4, #12]

  // set timestamps
  if (FsDateTime::callback) {
    768a:	cbz	r7, 76b0 <FatFile::open(FatFile*, fname_t*, int)+0x364>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    768c:	add.w	r2, sp, #43	; 0x2b
    7690:	add.w	r1, sp, #46	; 0x2e
    7694:	add	r0, sp, #44	; 0x2c
    7696:	blx	r7
    dir->createTimeMs = ms10;
    setLe16(dir->createDate, date);
    7698:	ldrh.w	r3, [sp, #44]	; 0x2c
    setLe16(dir->createTime, time);
    769c:	ldrh.w	r2, [sp, #46]	; 0x2e

  // set timestamps
  if (FsDateTime::callback) {
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    dir->createTimeMs = ms10;
    76a0:	ldrb.w	r1, [sp, #43]	; 0x2b
    76a4:	strb	r1, [r4, #13]
    76a6:	strh	r3, [r4, #16]
    76a8:	strh	r3, [r4, #18]
    76aa:	strh	r3, [r4, #24]
    76ac:	strh	r2, [r4, #14]
    76ae:	strh	r2, [r4, #22]
    setLe16(dir->accessDate, date);
    setLe16(dir->modifyDate, date);
    setLe16(dir->modifyTime, time);;
  }
  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
    76b0:	ldr	r2, [r6, #8]
    76b2:	ldrb.w	r3, [r2, #40]	; 0x28
    76b6:	orr.w	r3, r3, #1
    76ba:	strb.w	r3, [r2, #40]	; 0x28

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    76be:	mov	r2, r5
    76c0:	str.w	sl, [sp]
    76c4:	ldr	r3, [sp, #24]
    76c6:	ldr	r0, [sp, #32]
    76c8:	mov	r1, r6
    76ca:	bl	5d84 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    76ce:	mov	r5, r0
    76d0:	cmp	r0, #0
    76d2:	bne.w	736e <FatFile::open(FatFile*, fname_t*, int)+0x22>
    DBG_FAIL_MACRO;
    76d6:	mov.w	r0, #504	; 0x1f8
    76da:	bl	6c34 <dbgPrint(unsigned short)>
    goto fail;
    76de:	b.n	736e <FatFile::open(FatFile*, fname_t*, int)+0x22>
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
    76e0:	cmp	r0, #0
    76e2:	ldr.w	sl, [sp, #36]	; 0x24
    76e6:	it	ne
    76e8:	movne.w	sl, #0
    76ec:	b.n	73a4 <FatFile::open(FatFile*, fname_t*, int)+0x58>
    76ee:	nop
    76f0:	.word	0x4ec4ec4f
    76f4:	.word	0x1fff198c
    76f8:	subs	r4, r3, #1
    76fa:	adds	r3, #10
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    76fc:	ldrb.w	r0, [r4, #1]!
    7700:	lsrs	r1, r2, #1
    7702:	orr.w	r2, r1, r2, lsl #7
    7706:	uxtab	r2, r0, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    770a:	cmp	r4, r3
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    770c:	uxtb	r2, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    770e:	bne.n	76fc <FatFile::open(FatFile*, fname_t*, int)+0x3b0>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    7710:	ldr	r3, [sp, #28]
    7712:	cmp	r3, r2
    7714:	bne.n	773c <FatFile::open(FatFile*, fname_t*, int)+0x3f0>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    7716:	ldr	r3, [sp, #24]
    7718:	lsls	r1, r3, #20
    771a:	bpl.n	76be <FatFile::open(FatFile*, fname_t*, int)+0x372>
    DBG_FAIL_MACRO;
    771c:	mov.w	r0, #410	; 0x19a
    7720:	bl	6c34 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  return false;
    7724:	movs	r5, #0

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    DBG_FAIL_MACRO;
    goto fail;
    7726:	b.n	736e <FatFile::open(FatFile*, fname_t*, int)+0x22>
    7728:	mov	r3, r0
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
    772a:	movw	r0, #463	; 0x1cf
    goto fail;
  }
  return true;

fail:
  return false;
    772e:	mov	r5, r3
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
    7730:	bl	6c34 <dbgPrint(unsigned short)>
      goto fail;
    7734:	b.n	736e <FatFile::open(FatFile*, fname_t*, int)+0x22>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    7736:	ldr	r1, [sp, #12]
    7738:	cmp	r1, #1
    773a:	beq.n	76f8 <FatFile::open(FatFile*, fname_t*, int)+0x3ac>
          goto found;
        }
        DBG_FAIL_MACRO;
    773c:	movw	r0, #393	; 0x189
    7740:	bl	6c34 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  return false;
    7744:	movs	r5, #0
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
    7746:	b.n	736e <FatFile::open(FatFile*, fname_t*, int)+0x22>
    if (!dirFile->lfnUniqueSfn(fname)) {
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    7748:	mov.w	r0, #456	; 0x1c8
    774c:	bl	6c34 <dbgPrint(unsigned short)>
    goto fail;
    7750:	b.n	736e <FatFile::open(FatFile*, fname_t*, int)+0x22>
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
  dir = dirFile->readDirCache();
  if (!dir) {
    DBG_FAIL_MACRO;
    7752:	movw	r0, #477	; 0x1dd
    goto fail;
  }
  return true;

fail:
  return false;
    7756:	mov	r5, r4
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
  dir = dirFile->readDirCache();
  if (!dir) {
    DBG_FAIL_MACRO;
    7758:	bl	6c34 <dbgPrint(unsigned short)>
    goto fail;
    775c:	b.n	736e <FatFile::open(FatFile*, fname_t*, int)+0x22>
    775e:	nop

00007760 <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    7760:	push	{r3, r4, r5, lr}
    7762:	movs	r1, #10
    7764:	mov	r5, r0
    7766:	ldr	r0, [pc, #40]	; (7790 <dbgPrint(unsigned short)+0x30>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    7768:	ldr	r4, [pc, #40]	; (7794 <dbgPrint(unsigned short)+0x34>)
    776a:	bl	9480 <usb_serial_write>
    776e:	movs	r1, #14
    7770:	ldr	r0, [pc, #36]	; (7798 <dbgPrint(unsigned short)+0x38>)
    7772:	bl	9480 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    7776:	movs	r0, #46	; 0x2e
    7778:	bl	9588 <usb_serial_putchar>
    777c:	mov	r1, r5
    777e:	mov	r0, r4
    7780:	bl	aa68 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    7784:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    7786:	ldmia.w	sp!, {r3, r4, r5, lr}
    778a:	b.w	a99c <Print::println()>
    778e:	nop
    7790:	.word	0x0000fc70
    7794:	.word	0x1fff098c
    7798:	.word	0x0000fd64

0000779c <FatFile::getSFN(char*)>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
    779c:	push	{r3, r4, r5, r6, r7, lr}
    779e:	ldrb	r4, [r0, #0]
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t *dir;

  if (!isOpen()) {
    77a0:	cbz	r4, 77fe <FatFile::getSFN(char*)+0x62>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    77a2:	ands.w	r4, r4, #96	; 0x60
    77a6:	mov	r5, r1
    77a8:	beq.n	77b6 <FatFile::getSFN(char*)+0x1a>
    name[0] = '/';
    77aa:	movs	r2, #47	; 0x2f
    name[1] = '\0';
    77ac:	movs	r3, #0
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    name[0] = '/';
    77ae:	strb	r2, [r1, #0]
    name[1] = '\0';
    77b0:	strb	r3, [r1, #1]
    return true;
    77b2:	movs	r0, #1
    77b4:	pop	{r3, r4, r5, r6, r7, pc}
  }
  // cache entry
  dir = reinterpret_cast<DirFat_t*>(cacheDirEntry(FatCache::CACHE_FOR_READ));
    77b6:	mov	r1, r4
    77b8:	bl	57b4 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    77bc:	mov	r6, r0
    77be:	cbz	r0, 7808 <FatFile::getSFN(char*)+0x6c>
    77c0:	mov	r1, r4
    77c2:	mov	r2, r4
    77c4:	subs	r0, #1
    77c6:	movs	r7, #8
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    77c8:	mov.w	lr, #46	; 0x2e
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
    77cc:	ldrb.w	r3, [r0, #1]!
    77d0:	cmp	r3, #32
    77d2:	beq.n	77f0 <FatFile::getSFN(char*)+0x54>
      continue;
    }
    if (i == 8) {
    77d4:	cmp	r1, #8
    77d6:	beq.n	7812 <FatFile::getSFN(char*)+0x76>
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    77d8:	sub.w	r4, r3, #65	; 0x41
    77dc:	cmp	r4, #25
    77de:	bhi.n	77ea <FatFile::getSFN(char*)+0x4e>
    77e0:	ldrb	r4, [r6, #12]
    77e2:	tst	r7, r4
      c += 'a' - 'A';
    77e4:	itt	ne
    77e6:	addne	r3, #32
    77e8:	uxtbne	r3, r3
    }
    name[j++] = c;
    77ea:	strb	r3, [r5, r2]
    77ec:	adds	r2, #1
    77ee:	uxtb	r2, r2
    77f0:	adds	r1, #1
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    77f2:	cmp	r1, #11
    77f4:	bne.n	77cc <FatFile::getSFN(char*)+0x30>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
    77f6:	movs	r3, #0
    77f8:	strb	r3, [r5, r2]
  return true;
    77fa:	movs	r0, #1

fail:
  return false;
}
    77fc:	pop	{r3, r4, r5, r6, r7, pc}
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t *dir;

  if (!isOpen()) {
    DBG_FAIL_MACRO;
    77fe:	movs	r0, #37	; 0x25
    7800:	bl	7760 <dbgPrint(unsigned short)>
  }
  name[j] = 0;
  return true;

fail:
  return false;
    7804:	mov	r0, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t *dir;

  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
    7806:	pop	{r3, r4, r5, r6, r7, pc}
    return true;
  }
  // cache entry
  dir = reinterpret_cast<DirFat_t*>(cacheDirEntry(FatCache::CACHE_FOR_READ));
  if (!dir) {
    DBG_FAIL_MACRO;
    7808:	movs	r0, #48	; 0x30
    780a:	bl	7760 <dbgPrint(unsigned short)>
  }
  name[j] = 0;
  return true;

fail:
  return false;
    780e:	mov	r0, r6
    7810:	pop	{r3, r4, r5, r6, r7, pc}
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    7812:	strb.w	lr, [r5, r2]
    7816:	adds	r2, #1
    7818:	uxtb	r2, r2
    781a:	ldrb	r3, [r0, #0]
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
    781c:	movs	r7, #16
    781e:	b.n	77d8 <FatFile::getSFN(char*)+0x3c>

00007820 <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    7820:	push	{r3, r4, r5, r6, r7, lr}
  m_fFile = nullptr;
    7822:	movs	r5, #0
    7824:	str	r5, [r0, #56]	; 0x38
  m_xFile = nullptr;
  if (from.m_fFile) {
    7826:	ldr	r4, [r1, #56]	; 0x38
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
  m_fFile = nullptr;
  m_xFile = nullptr;
    7828:	str	r5, [r0, #60]	; 0x3c
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    782a:	mov	r6, r0
    782c:	mov	r7, r1
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    782e:	cbz	r4, 7854 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    7830:	mov	r1, r0
    7832:	movs	r0, #36	; 0x24
    7834:	bl	7a8c <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    7838:	strb	r5, [r0, #0]
    783a:	strb	r5, [r0, #1]
    783c:	strb	r5, [r0, #2]
    783e:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    7840:	ldr	r5, [r7, #56]	; 0x38
    7842:	mov	r4, r0
    7844:	ldmia	r5!, {r0, r1, r2, r3}
    7846:	stmia	r4!, {r0, r1, r2, r3}
    7848:	ldmia	r5!, {r0, r1, r2, r3}
    784a:	stmia	r4!, {r0, r1, r2, r3}
    784c:	ldr	r3, [r5, #0]
    784e:	str	r3, [r4, #0]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
    7850:	mov	r0, r6
    7852:	pop	{r3, r4, r5, r6, r7, pc}
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    7854:	ldr	r3, [r1, #60]	; 0x3c
    7856:	cmp	r3, #0
    7858:	beq.n	7850 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>
    m_xFile = new (m_fileMem) ExFatFile;
    785a:	mov	r1, r0
    785c:	movs	r0, #56	; 0x38
    785e:	bl	7a8c <operator new(unsigned int, unsigned long*)>
    7862:	strb.w	r4, [r0, #49]	; 0x31
    7866:	strb.w	r4, [r0, #50]	; 0x32
    786a:	strb.w	r4, [r0, #51]	; 0x33
    786e:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    7870:	ldr	r3, [r7, #60]	; 0x3c
    7872:	mov	r2, r0
    7874:	add.w	r1, r3, #48	; 0x30
    7878:	ldr	r5, [r3, #0]
    787a:	ldr	r4, [r3, #4]
    787c:	ldr	r0, [r3, #8]
    787e:	ldr	r7, [r3, #12]
    7880:	str	r7, [r2, #12]
    7882:	adds	r3, #16
    7884:	cmp	r3, r1
    7886:	str	r5, [r2, #0]
    7888:	str	r4, [r2, #4]
    788a:	str	r0, [r2, #8]
    788c:	add.w	r2, r2, #16
    7890:	bne.n	7878 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x58>
    7892:	ldr	r3, [r3, #0]
    7894:	str	r3, [r2, #0]
    7896:	b.n	7850 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>

00007898 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    7898:	push	{r4, lr}
    789a:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    789c:	ldr	r0, [r0, #56]	; 0x38
    789e:	cbz	r0, 78ac <FsBaseFile::close()+0x14>
    78a0:	bl	5884 <FatFile::close()>
    78a4:	cbz	r0, 78ac <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    78a6:	movs	r3, #0
    78a8:	str	r3, [r4, #56]	; 0x38
    return true;
    78aa:	pop	{r4, pc}
  }
  if (m_xFile && m_xFile->close()) {
    78ac:	ldr	r0, [r4, #60]	; 0x3c
    78ae:	cbz	r0, 78bc <FsBaseFile::close()+0x24>
    78b0:	bl	3950 <ExFatFile::close()>
    78b4:	cbz	r0, 78bc <FsBaseFile::close()+0x24>
    m_xFile = nullptr;
    78b6:	movs	r3, #0
    78b8:	str	r3, [r4, #60]	; 0x3c
    78ba:	pop	{r4, pc}
    return true;
  }
  return false;
    78bc:	movs	r0, #0
}
    78be:	pop	{r4, pc}

000078c0 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    78c0:	cbz	r1, 7936 <FsBaseFile::open(FsVolume*, char const*, int)+0x76>
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    78c2:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    78c6:	mov	r4, r1
    78c8:	mov	r5, r0
    78ca:	mov	r8, r3
    78cc:	mov	r7, r2
  if (!vol) {
    return false;
  }
  close();
    78ce:	bl	7898 <FsBaseFile::close()>
  if (vol->m_fVol) {
    78d2:	ldr.w	r6, [r4, #1144]	; 0x478
    78d6:	cbz	r6, 7904 <FsBaseFile::open(FsVolume*, char const*, int)+0x44>
    m_fFile = new (m_fileMem) FatFile;
    78d8:	mov	r1, r5
    78da:	movs	r0, #36	; 0x24
    78dc:	bl	7a8c <operator new(unsigned int, unsigned long*)>
    78e0:	movs	r1, #0
    78e2:	strb	r1, [r0, #0]
    78e4:	strb	r1, [r0, #1]
    78e6:	strb	r1, [r0, #2]
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    78e8:	ldr.w	r1, [r4, #1144]	; 0x478
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    78ec:	str	r0, [r5, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    78ee:	mov	r3, r8
    78f0:	mov	r2, r7
    78f2:	bl	59f4 <FatFile::open(FatVolume*, char const*, int)>
    78f6:	cbz	r0, 78fe <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
      return true;
    78f8:	movs	r0, #1
    78fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    m_fFile = nullptr;
    78fe:	str	r0, [r5, #56]	; 0x38
    return false;
    7900:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    7904:	ldr.w	r3, [r4, #1148]	; 0x47c
    7908:	cbz	r3, 793a <FsBaseFile::open(FsVolume*, char const*, int)+0x7a>
    m_xFile = new (m_fileMem) ExFatFile;
    790a:	mov	r1, r5
    790c:	movs	r0, #56	; 0x38
    790e:	bl	7a8c <operator new(unsigned int, unsigned long*)>
    7912:	strb.w	r6, [r0, #49]	; 0x31
    7916:	strb.w	r6, [r0, #50]	; 0x32
    791a:	strb.w	r6, [r0, #51]	; 0x33
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    791e:	ldr.w	r1, [r4, #1148]	; 0x47c
      return true;
    }
    m_fFile = nullptr;
    return false;
  } else if (vol->m_xVol) {
    m_xFile = new (m_fileMem) ExFatFile;
    7922:	str	r0, [r5, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    7924:	mov	r3, r8
    7926:	mov	r2, r7
    7928:	bl	4390 <ExFatFile::open(ExFatVolume*, char const*, int)>
    792c:	cmp	r0, #0
    792e:	bne.n	78f8 <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_xFile = nullptr;
    7930:	str	r0, [r5, #60]	; 0x3c
  }
  return false;
}
    7932:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    7936:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    7938:	bx	lr
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    793a:	movs	r0, #0
    793c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007940 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    7940:	push	{r3, r4, r5, r6, r7, lr}
    7942:	mov	r5, r1
    7944:	mov	r7, r2
    7946:	mov	r4, r0
  close();
    7948:	bl	7898 <FsBaseFile::close()>
  if (dir->m_fFile) {
    794c:	ldr	r6, [r5, #56]	; 0x38
    794e:	cbz	r6, 7974 <FsBaseFile::openNext(FsBaseFile*, int)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    7950:	mov	r1, r4
    7952:	movs	r0, #36	; 0x24
    7954:	bl	7a8c <operator new(unsigned int, unsigned long*)>
    7958:	movs	r2, #0
    795a:	strb	r2, [r0, #0]
    795c:	strb	r2, [r0, #1]
    795e:	strb	r2, [r0, #2]
    7960:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    7962:	mov	r2, r7
    7964:	ldr	r1, [r5, #56]	; 0x38
    7966:	bl	5eb4 <FatFile::openNext(FatFile*, int)>
    796a:	cbz	r0, 7970 <FsBaseFile::openNext(FsBaseFile*, int)+0x30>
      return true;
    796c:	movs	r0, #1
    796e:	pop	{r3, r4, r5, r6, r7, pc}
    }
    m_fFile = nullptr;
    7970:	str	r0, [r4, #56]	; 0x38
    7972:	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
    7974:	ldr	r0, [r5, #60]	; 0x3c
    7976:	cbz	r0, 799c <FsBaseFile::openNext(FsBaseFile*, int)+0x5c>
    m_xFile = new (m_fileMem) ExFatFile;
    7978:	mov	r1, r4
    797a:	movs	r0, #56	; 0x38
    797c:	bl	7a8c <operator new(unsigned int, unsigned long*)>
    7980:	strb.w	r6, [r0, #49]	; 0x31
    7984:	strb.w	r6, [r0, #50]	; 0x32
    7988:	strb.w	r6, [r0, #51]	; 0x33
    798c:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    798e:	mov	r2, r7
    7990:	ldr	r1, [r5, #60]	; 0x3c
    7992:	bl	43a0 <ExFatFile::openNext(ExFatFile*, int)>
    7996:	cmp	r0, #0
    7998:	bne.n	796c <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
      return true;
    }
    m_xFile = nullptr;
    799a:	str	r0, [r4, #60]	; 0x3c
  }
  return false;
}
    799c:	pop	{r3, r4, r5, r6, r7, pc}
    799e:	nop

000079a0 <FsVolume::begin(BlockDeviceInterface*)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    79a0:	push	{r4, r5, r6, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    79a2:	movs	r6, #0
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    79a4:	mov	r5, r0
  m_blockDev = blockDev;
    79a6:	str.w	r1, [r0, #1152]	; 0x480
  m_fVol = nullptr;
    79aa:	str.w	r6, [r0, #1144]	; 0x478
  m_xVol = new (m_volMem) ExFatVolume;
    79ae:	mov	r1, r0
    79b0:	mov.w	r0, #1144	; 0x478
    79b4:	bl	7a8c <operator new(unsigned int, unsigned long*)>
    79b8:	mov	r4, r0
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    79ba:	str	r6, [r0, #4]
    invalidate();
    79bc:	bl	4444 <FsCache::invalidate()>
    79c0:	add.w	r0, r4, #524	; 0x20c
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    79c4:	str.w	r6, [r4, #528]	; 0x210
    invalidate();
    79c8:	bl	4444 <FsCache::invalidate()>
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() : m_fatType(0) {}
    79cc:	strb.w	r6, [r4, #1084]	; 0x43c
    79d0:	strb.w	r6, [r4, #1137]	; 0x471
    79d4:	strb.w	r6, [r4, #1138]	; 0x472
    79d8:	strb.w	r6, [r4, #1139]	; 0x473
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    79dc:	ldr.w	r1, [r5, #1152]	; 0x480
    79e0:	str.w	r4, [r5, #1148]	; 0x47c
    79e4:	mov	r0, r4
    79e6:	movs	r2, #1
    79e8:	bl	45a0 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>
    79ec:	cbnz	r0, 7a2a <FsVolume::begin(BlockDeviceInterface*)+0x8a>
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    79ee:	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    79f0:	mov	r1, r5
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    79f2:	str.w	r6, [r5, #1148]	; 0x47c
  m_fVol = new (m_volMem) FatVolume;
    79f6:	movw	r0, #1124	; 0x464
    79fa:	bl	7a8c <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() : m_fatType(0) {}
    79fe:	strb	r6, [r0, #7]
    7a00:	strb.w	r6, [r0, #1088]	; 0x440
    7a04:	strb.w	r6, [r0, #1089]	; 0x441
    7a08:	strb.w	r6, [r0, #1090]	; 0x442
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    7a0c:	movs	r2, #1
    7a0e:	ldr.w	r1, [r5, #1152]	; 0x480
    7a12:	str.w	r0, [r5, #1144]	; 0x478
    7a16:	mov	r4, r0
    7a18:	bl	6ac4 <FatPartition::init(BlockDeviceInterface*, unsigned char)>
    7a1c:	cbnz	r0, 7a48 <FsVolume::begin(BlockDeviceInterface*)+0xa8>
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    7a1e:	ldr	r3, [pc, #64]	; (7a60 <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
    7a20:	movs	r0, #0
    7a22:	str	r0, [r3, #0]
  m_fVol = nullptr;
    7a24:	str.w	r0, [r5, #1144]	; 0x478
  return false;
    7a28:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    7a2a:	add.w	r6, r4, #1088	; 0x440
    7a2e:	mov	r0, r6
    7a30:	bl	3950 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    7a34:	mov	r1, r4
    7a36:	mov	r0, r6
    7a38:	bl	3a24 <ExFatFile::openRoot(ExFatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    7a3c:	cmp	r0, #0
    7a3e:	beq.n	79ee <FsVolume::begin(BlockDeviceInterface*)+0x4e>

 done:
  m_cwv = this;
    7a40:	ldr	r3, [pc, #28]	; (7a60 <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
  return true;
    7a42:	movs	r0, #1
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    7a44:	str	r5, [r3, #0]
  return true;
    7a46:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    7a48:	add.w	r6, r4, #1088	; 0x440
    7a4c:	mov	r0, r6
    7a4e:	bl	5884 <FatFile::close()>
    return m_vwd.openRoot(this);
    7a52:	mov	r1, r4
    7a54:	mov	r0, r6
    7a56:	bl	58a4 <FatFile::openRoot(FatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    7a5a:	cmp	r0, #0
    7a5c:	bne.n	7a40 <FsVolume::begin(BlockDeviceInterface*)+0xa0>
    7a5e:	b.n	7a1e <FsVolume::begin(BlockDeviceInterface*)+0x7e>
    7a60:	.word	0x1fff1990

00007a64 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    7a64:	push	{r3, r4, r5, r6, r7, lr}
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    7a66:	movs	r5, #0
    7a68:	mov.w	r7, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    7a6c:	ldr	r6, [pc, #24]	; (7a88 <FsVolume::open(char const*, int)+0x24>)
    7a6e:	str	r7, [r0, #8]
    7a70:	mov	r4, r0
    7a72:	strb	r5, [r0, #4]
    7a74:	strb	r5, [r0, #12]
 * \class FsBaseFile
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}
    7a76:	str	r5, [r0, #72]	; 0x48
    7a78:	str	r5, [r0, #76]	; 0x4c
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    7a7a:	str.w	r6, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    7a7e:	bl	78c0 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    7a82:	mov	r0, r4
    7a84:	pop	{r3, r4, r5, r6, r7, pc}
    7a86:	nop
    7a88:	.word	0x0000fae4

00007a8c <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    7a8c:	mov	r0, r1
    7a8e:	bx	lr

00007a90 <SdSpiCard::errorCode() const>:
  /**
   * \return code for the last error. See SdCardInfo.h for a list of error codes.
   */
  uint8_t errorCode() const {
    return m_errorCode;
  }
    7a90:	ldrb	r0, [r0, #19]
    7a92:	bx	lr

00007a94 <SdSpiCard::errorData() const>:
  /** \return error data for last error. */
  uint32_t errorData() const {
    return m_status;
  }
    7a94:	ldrb	r0, [r0, #21]
    7a96:	bx	lr

00007a98 <SdSpiCard::readSector(unsigned long, unsigned char*)>:
   *
   * \param[in] sector Logical sector to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
    7a98:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    7a9a:	ldr	r4, [r0, #0]
    7a9c:	ldr	r4, [r4, #12]
    7a9e:	movs	r3, #1
    7aa0:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return readSingle(sector, dst);
#endif  // ENABLE_DEDICATED_SPI
  }
    7aa2:	ldr.w	r4, [sp], #4
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    7aa6:	bx	ip

00007aa8 <SdSpiCard::type() const>:
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
  }
    7aa8:	ldrb	r0, [r0, #22]
    7aaa:	bx	lr

00007aac <SdSpiCard::writeSector(unsigned long, unsigned char const*)>:
   *
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    7aac:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    7aae:	ldr	r4, [r0, #0]
    7ab0:	ldr	r4, [r4, #28]
    7ab2:	movs	r3, #1
    7ab4:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return writeSingle(sector, src);
#endif  // ENABLE_DEDICATED_SPI
  }
    7ab6:	ldr.w	r4, [sp], #4
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    7aba:	bx	ip

00007abc <SdSpiCard::~SdSpiCard()>:
/**
 * \class SdSpiCard
 * \brief Raw access to SD and SDHC flash memory cards via SPI protocol.
 */
#if HAS_SDIO_CLASS
class SdSpiCard : public SdCardInterface {
    7abc:	bx	lr
    7abe:	nop

00007ac0 <SdSpiCard::~SdSpiCard()>:
    7ac0:	push	{r4, lr}
    7ac2:	movs	r1, #24
    7ac4:	mov	r4, r0
    7ac6:	bl	aa90 <operator delete(void*, unsigned int)>
    7aca:	mov	r0, r4
    7acc:	pop	{r4, pc}
    7ace:	nop

00007ad0 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    7ad0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ad4:	mov	r6, r1
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    7ad6:	ldrb	r1, [r0, #16]
    7ad8:	cmp	r1, #2
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    7ada:	mov	r4, r0
    7adc:	mov	r5, r2
    7ade:	mov	r7, r3
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    7ae0:	beq.n	7af2 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x22>
    if (!syncDevice()) {
    7ae2:	ldr	r3, [r4, #0]
    7ae4:	mov	r0, r4
    7ae6:	ldr	r3, [r3, #20]
    7ae8:	blx	r3
    7aea:	cbnz	r0, 7b24 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x54>
      return false;
    7aec:	movs	r0, #0
    7aee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    7af2:	ldr	r3, [r0, #12]
    7af4:	cmp	r3, r6
    7af6:	bne.n	7ae2 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    7af8:	movs	r6, #0
    7afa:	cbz	r7, 7b14 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeData(src)) {
    7afc:	ldr	r3, [r4, #0]
    7afe:	mov	r1, r5
    7b00:	ldr	r3, [r3, #68]	; 0x44
    7b02:	mov	r0, r4
    7b04:	blx	r3
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    7b06:	adds	r6, #1
    7b08:	add.w	r5, r5, #512	; 0x200
    if (!writeData(src)) {
    7b0c:	cmp	r0, #0
    7b0e:	beq.n	7aec <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    7b10:	cmp	r7, r6
    7b12:	bne.n	7afc <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2c>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    7b14:	ldr	r3, [r4, #12]
  return m_sharedSpi ? syncDevice() : true;
    7b16:	ldrb	r2, [r4, #17]
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    7b18:	add	r7, r3
    7b1a:	str	r7, [r4, #12]
  return m_sharedSpi ? syncDevice() : true;
    7b1c:	cbnz	r2, 7b3a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x6a>
    7b1e:	movs	r0, #1
    7b20:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!syncDevice()) {
      return false;
    }
    if (!writeStart(sector)) {
    7b24:	ldr	r3, [r4, #0]
    7b26:	mov	r1, r6
    7b28:	ldr	r3, [r3, #72]	; 0x48
    7b2a:	mov	r0, r4
    7b2c:	blx	r3
    7b2e:	cmp	r0, #0
    7b30:	beq.n	7aec <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    7b32:	movs	r3, #2
      return false;
    }
    if (!writeStart(sector)) {
      return false;
    }
    m_curSector = sector;
    7b34:	str	r6, [r4, #12]
    m_curState = WRITE_STATE;
    7b36:	strb	r3, [r4, #16]
    7b38:	b.n	7af8 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x28>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    7b3a:	ldr	r3, [r4, #0]
    7b3c:	mov	r0, r4
    7b3e:	ldr	r3, [r3, #20]

 fail:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
    7b40:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    7b44:	bx	r3
    7b46:	nop

00007b48 <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
    7b48:	push	{r4, lr}
    7b4a:	mov	r4, r0
  bool waitNotBusy(SdMillis_t timeoutMS);
  bool writeData(uint8_t token, const uint8_t* src);

#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
    7b4c:	adds	r0, #4
    7b4e:	bl	90f8 <SdSpiArduinoDriver::activate()>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    7b52:	ldrb	r0, [r4, #18]
    7b54:	movs	r1, #0
    7b56:	bl	9278 <sdCsWrite(unsigned char, bool)>
  if (!m_spiActive) {
    spiActivate();
    spiSelect();
    m_spiActive = true;
    7b5a:	movs	r3, #1
    7b5c:	strb	r3, [r4, #20]
    7b5e:	pop	{r4, pc}

00007b60 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>:
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
    7b60:	push	{r3, r4, r5, lr}
    7b62:	mov	r4, r0
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    7b64:	movs	r1, #1
    7b66:	ldrb	r0, [r0, #18]
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    7b68:	adds	r5, r4, #4
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    7b6a:	bl	9278 <sdCsWrite(unsigned char, bool)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    7b6e:	mov	r0, r5
    7b70:	movs	r1, #255	; 0xff
    7b72:	bl	920c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
    7b76:	mov	r0, r5
    7b78:	bl	9188 <SdSpiArduinoDriver::deactivate()>
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7b7c:	movs	r3, #0
    7b7e:	strb	r3, [r4, #20]
    7b80:	pop	{r3, r4, r5, pc}
    7b82:	nop

00007b84 <SdSpiCard::isBusy()>:
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    7b84:	push	{r3, r4, r5, r6, r7, lr}
  bool rtn = true;
  bool spiActive = m_spiActive;
    7b86:	ldrb	r7, [r0, #20]
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    7b88:	mov	r6, r0
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    7b8a:	cbnz	r7, 7b90 <SdSpiCard::isBusy()+0xc>
    7b8c:	bl	7b48 <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>
    7b90:	adds	r5, r6, #4
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    7b92:	movs	r4, #8
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    7b94:	mov	r0, r5
    7b96:	bl	91d0 <SdSpiArduinoDriver::receive()>
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
    7b9a:	cmp	r0, #255	; 0xff
    7b9c:	add.w	r3, r4, #4294967295
    7ba0:	beq.n	7bbe <SdSpiCard::isBusy()+0x3a>
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    7ba2:	ands.w	r4, r3, #255	; 0xff
    7ba6:	bne.n	7b94 <SdSpiCard::isBusy()+0x10>
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
  bool rtn = true;
    7ba8:	movs	r4, #1
    if (0XFF == spiReceive()) {
      rtn = false;
      break;
    }
  }
  if (!spiActive) {
    7baa:	cbnz	r7, 7bb0 <SdSpiCard::isBusy()+0x2c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7bac:	ldrb	r3, [r6, #20]
    7bae:	cbnz	r3, 7bb4 <SdSpiCard::isBusy()+0x30>
  }
  if (!spiActive) {
    spiStop();
  }
  return rtn;
}
    7bb0:	mov	r0, r4
    7bb2:	pop	{r3, r4, r5, r6, r7, pc}
    7bb4:	mov	r0, r6
    7bb6:	bl	7b60 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    7bba:	mov	r0, r4
    7bbc:	pop	{r3, r4, r5, r6, r7, pc}
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
      rtn = false;
    7bbe:	movs	r4, #0
    7bc0:	b.n	7baa <SdSpiCard::isBusy()+0x26>
    7bc2:	nop

00007bc4 <SdSpiCard::readData(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
    7bc4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7bc8:	ldr	r6, [pc, #116]	; (7c40 <SdSpiCard::readData(unsigned char*, unsigned int)+0x7c>)
    7bca:	sub	sp, #12
    7bcc:	ldr	r3, [r6, #0]
    7bce:	str	r3, [sp, #0]
	return ret;
    7bd0:	ldr	r5, [sp, #0]
    7bd2:	mov	r4, r0
    7bd4:	mov	r8, r1
    7bd6:	mov	r9, r2

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    7bd8:	uxth	r5, r5
    7bda:	adds	r7, r0, #4
    7bdc:	b.n	7bee <SdSpiCard::readData(unsigned char*, unsigned int)+0x2a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7bde:	ldr	r3, [r6, #0]
    7be0:	str	r3, [sp, #4]
	return ret;
    7be2:	ldr	r3, [sp, #4]
    7be4:	uxth	r3, r3
    7be6:	subs	r3, r3, r5
    7be8:	cmp.w	r3, #300	; 0x12c
    7bec:	bgt.n	7c14 <SdSpiCard::readData(unsigned char*, unsigned int)+0x50>
    7bee:	mov	r0, r7
    7bf0:	bl	91d0 <SdSpiArduinoDriver::receive()>
#endif  // USE_SD_CRC

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    7bf4:	cmp	r0, #255	; 0xff
    7bf6:	strb	r0, [r4, #21]
    7bf8:	beq.n	7bde <SdSpiCard::readData(unsigned char*, unsigned int)+0x1a>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_SECTOR) {
    7bfa:	cmp	r0, #254	; 0xfe
    7bfc:	beq.n	7c1a <SdSpiCard::readData(unsigned char*, unsigned int)+0x56>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7bfe:	movs	r3, #24
    7c00:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7c02:	ldrb	r0, [r4, #20]
    7c04:	cbz	r0, 7c0e <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    7c06:	mov	r0, r4
    7c08:	bl	7b60 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
  return false;
    7c0c:	movs	r0, #0
}
    7c0e:	add	sp, #12
    7c10:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7c14:	movs	r3, #29
    7c16:	strb	r3, [r4, #19]
    7c18:	b.n	7c02 <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
    7c1a:	mov	r2, r9
    7c1c:	mov	r1, r8
    7c1e:	mov	r0, r7
    7c20:	bl	91ec <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    7c24:	strb	r0, [r4, #21]
    7c26:	cbz	r0, 7c2e <SdSpiCard::readData(unsigned char*, unsigned int)+0x6a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7c28:	movs	r3, #36	; 0x24
    7c2a:	strb	r3, [r4, #19]
    7c2c:	b.n	7c02 <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    7c2e:	mov	r0, r7
    7c30:	bl	91d0 <SdSpiArduinoDriver::receive()>
    7c34:	mov	r0, r7
    7c36:	bl	91d0 <SdSpiArduinoDriver::receive()>
#else  // USE_SD_CRC
  // discard crc
  spiReceive();
  spiReceive();
#endif  // USE_SD_CRC
  return true;
    7c3a:	movs	r0, #1
    7c3c:	b.n	7c0e <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    7c3e:	nop
    7c40:	.word	0x1fff19f0

00007c44 <SdSpiCard::waitNotBusy(unsigned short)>:
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(SdMillis_t timeoutMS) {
    7c44:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7c46:	ldr	r5, [pc, #52]	; (7c7c <SdSpiCard::waitNotBusy(unsigned short)+0x38>)
    7c48:	sub	sp, #12
    7c4a:	ldr	r3, [r5, #0]
    7c4c:	str	r3, [sp, #0]
	return ret;
    7c4e:	ldr	r4, [sp, #0]
    7c50:	mov	r7, r1
    7c52:	adds	r6, r0, #4
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    7c54:	uxth	r4, r4
    7c56:	b.n	7c66 <SdSpiCard::waitNotBusy(unsigned short)+0x22>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7c58:	ldr	r3, [r5, #0]
    7c5a:	str	r3, [sp, #4]
	return ret;
    7c5c:	ldr	r3, [sp, #4]
    7c5e:	uxth	r3, r3
    7c60:	subs	r3, r3, r4
    7c62:	cmp	r3, r7
    7c64:	bgt.n	7c76 <SdSpiCard::waitNotBusy(unsigned short)+0x32>
    7c66:	mov	r0, r6
    7c68:	bl	91d0 <SdSpiArduinoDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    7c6c:	cmp	r0, #255	; 0xff
    7c6e:	bne.n	7c58 <SdSpiCard::waitNotBusy(unsigned short)+0x14>
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    }
  }
  return true;
    7c70:	movs	r0, #1
#endif  // WDT_YIELD_TIME_MILLIS
}
    7c72:	add	sp, #12
    7c74:	pop	{r4, r5, r6, r7, pc}
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    7c76:	movs	r0, #0
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
    7c78:	add	sp, #12
    7c7a:	pop	{r4, r5, r6, r7, pc}
    7c7c:	.word	0x1fff19f0

00007c80 <SdSpiCard::cardCommand(unsigned char, unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    7c80:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // select card
  if (!m_spiActive) {
    7c84:	ldrb	r3, [r0, #20]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    7c86:	sub	sp, #8
    7c88:	mov	r6, r0
    7c8a:	mov	r8, r1
    7c8c:	str	r2, [sp, #4]
  // select card
  if (!m_spiActive) {
    7c8e:	cbnz	r3, 7c94 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x14>
    7c90:	bl	7b48 <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    7c94:	cmp.w	r8, #0
    7c98:	bne.n	7cf0 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x70>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    7c9a:	adds	r4, r6, #4
    7c9c:	mov	r0, r4
    7c9e:	orr.w	r1, r8, #64	; 0x40
    7ca2:	bl	920c <SdSpiArduinoDriver::send(unsigned char)>
    7ca6:	add	r7, sp, #4
    7ca8:	add	r5, sp, #8
    7caa:	ldrb.w	r1, [r5, #-1]!
    7cae:	mov	r0, r4
    7cb0:	bl	920c <SdSpiArduinoDriver::send(unsigned char)>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    7cb4:	cmp	r5, r7
    7cb6:	bne.n	7caa <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x2a>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    7cb8:	cmp.w	r8, #0
    7cbc:	ite	eq
    7cbe:	moveq	r1, #149	; 0x95
    7cc0:	movne	r1, #135	; 0x87
    7cc2:	mov	r0, r4
    7cc4:	bl	920c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    7cc8:	mov	r0, r4
    7cca:	bl	91d0 <SdSpiArduinoDriver::receive()>
    7cce:	movs	r5, #11
    7cd0:	mov	r0, r4
    7cd2:	bl	91d0 <SdSpiArduinoDriver::receive()>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    7cd6:	lsls	r3, r0, #24
    7cd8:	strb	r0, [r6, #21]
    7cda:	bmi.n	7ce2 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x62>
  }
  return m_status;
}
    7cdc:	add	sp, #8
    7cde:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7ce2:	subs	r3, r5, #1

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    7ce4:	ands.w	r5, r3, #255	; 0xff
    7ce8:	bne.n	7cd0 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
  }
  return m_status;
}
    7cea:	add	sp, #8
    7cec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
    7cf0:	mov.w	r1, #300	; 0x12c
    7cf4:	mov	r0, r6
    7cf6:	bl	7c44 <SdSpiCard::waitNotBusy(unsigned short)>
    7cfa:	b.n	7c9a <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x1a>

00007cfc <SdSpiCard::readOCR(unsigned long*)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    7cfc:	push	{r3, r4, r5, r6, r7, lr}
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    7cfe:	ldr	r3, [r0, #0]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    7d00:	mov	r5, r0
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    7d02:	ldr	r3, [r3, #20]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    7d04:	mov	r6, r1
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    7d06:	blx	r3
  if (cardCommand(CMD58, 0)) {
    7d08:	mov	r0, r5
    7d0a:	movs	r2, #0
    7d0c:	movs	r1, #58	; 0x3a
    7d0e:	bl	7c80 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7d12:	cbnz	r0, 7d30 <SdSpiCard::readOCR(unsigned long*)+0x34>
    7d14:	adds	r7, r5, #4
    7d16:	adds	r4, r6, #4
    7d18:	mov	r0, r7
    7d1a:	bl	91d0 <SdSpiArduinoDriver::receive()>
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    p[3 - i] = spiReceive();
    7d1e:	strb.w	r0, [r4, #-1]!
  syncDevice();
  if (cardCommand(CMD58, 0)) {
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    7d22:	cmp	r6, r4
    7d24:	bne.n	7d18 <SdSpiCard::readOCR(unsigned long*)+0x1c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7d26:	ldrb	r4, [r5, #20]
    7d28:	cbnz	r4, 7d46 <SdSpiCard::readOCR(unsigned long*)+0x4a>
    7d2a:	movs	r4, #1
  return true;

fail:
  spiStop();
  return false;
}
    7d2c:	mov	r0, r4
    7d2e:	pop	{r3, r4, r5, r6, r7, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7d30:	ldrb	r4, [r5, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7d32:	movs	r3, #18
    7d34:	strb	r3, [r5, #19]
    7d36:	cmp	r4, #0
    7d38:	beq.n	7d2c <SdSpiCard::readOCR(unsigned long*)+0x30>
    7d3a:	mov	r0, r5
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    7d3c:	movs	r4, #0
    7d3e:	bl	7b60 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
}
    7d42:	mov	r0, r4
    7d44:	pop	{r3, r4, r5, r6, r7, pc}
    7d46:	mov	r0, r5
    7d48:	bl	7b60 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    7d4c:	mov	r0, r4
    7d4e:	pop	{r3, r4, r5, r6, r7, pc}

00007d50 <SdSpiCard::readRegister(unsigned char, void*)>:
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    7d50:	ldr	r3, [r0, #0]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    7d52:	push	{r4, r5, r6, lr}
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    7d54:	ldr	r3, [r3, #20]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    7d56:	mov	r4, r0
    7d58:	mov	r5, r1
    7d5a:	mov	r6, r2
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    7d5c:	blx	r3
  if (cardCommand(cmd, 0)) {
    7d5e:	mov	r1, r5
    7d60:	mov	r0, r4
    7d62:	movs	r2, #0
    7d64:	bl	7c80 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7d68:	cbz	r0, 7d7c <SdSpiCard::readRegister(unsigned char, void*)+0x2c>
    7d6a:	movs	r3, #27
    7d6c:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7d6e:	ldrb	r0, [r4, #20]
    7d70:	cbz	r0, 7d7a <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    7d72:	mov	r0, r4
    7d74:	bl	7b60 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    7d78:	movs	r0, #0
}
    7d7a:	pop	{r4, r5, r6, pc}
  syncDevice();
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    7d7c:	mov	r1, r6
    7d7e:	movs	r2, #16
    7d80:	mov	r0, r4
    7d82:	bl	7bc4 <SdSpiCard::readData(unsigned char*, unsigned int)>
    7d86:	cmp	r0, #0
    7d88:	beq.n	7d6e <SdSpiCard::readRegister(unsigned char, void*)+0x1e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7d8a:	ldrb	r5, [r4, #20]
    7d8c:	cmp	r5, #0
    7d8e:	beq.n	7d7a <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    7d90:	mov	r0, r4
    7d92:	bl	7b60 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    7d96:	mov	r0, r5
    7d98:	pop	{r4, r5, r6, pc}
    7d9a:	nop

00007d9c <SdSpiCard::readCSD(csd_t*)>:
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    7d9c:	mov	r2, r1
    7d9e:	movs	r1, #9
    7da0:	b.w	7d50 <SdSpiCard::readRegister(unsigned char, void*)>

00007da4 <SdSpiCard::readCID(CID*)>:
   * \param[out] cid pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) {
    return readRegister(CMD10, cid);
    7da4:	mov	r2, r1
    7da6:	movs	r1, #10
    7da8:	b.w	7d50 <SdSpiCard::readRegister(unsigned char, void*)>

00007dac <SdSpiCard::sectorCount()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    7dac:	push	{r4, r5, lr}
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    7dae:	ldr	r3, [r0, #0]
    7db0:	ldr	r2, [pc, #140]	; (7e40 <SdSpiCard::sectorCount()+0x94>)
    7db2:	ldr	r3, [r3, #52]	; 0x34
    7db4:	cmp	r3, r2
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    7db6:	sub	sp, #20
    7db8:	bne.n	7e1a <SdSpiCard::sectorCount()+0x6e>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    7dba:	mov	r2, sp
    7dbc:	movs	r1, #9
    7dbe:	bl	7d50 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    7dc2:	cbz	r0, 7dd4 <SdSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    7dc4:	ldrb.w	r3, [sp]
    7dc8:	ands.w	r3, r3, #192	; 0xc0
    7dcc:	beq.n	7dd8 <SdSpiCard::sectorCount()+0x2c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    7dce:	cmp	r3, #64	; 0x40
    7dd0:	beq.n	7e20 <SdSpiCard::sectorCount()+0x74>
    7dd2:	movs	r0, #0
}
    7dd4:	add	sp, #20
    7dd6:	pop	{r4, r5, pc}
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    7dd8:	ldrb.w	r4, [sp, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    7ddc:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7de0:	ldrb.w	r2, [sp, #7]
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    7de4:	ldrb.w	r0, [sp, #10]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    7de8:	ldrb.w	r1, [sp, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    7dec:	ldrb.w	r5, [sp, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7df0:	and.w	r4, r4, #3
    7df4:	lsls	r4, r4, #1
    7df6:	lsls	r2, r2, #2
    7df8:	and.w	r3, r3, #3
    7dfc:	orr.w	r0, r4, r0, lsr #7
    7e00:	and.w	r1, r1, #15
    7e04:	orr.w	r3, r2, r3, lsl #10
    7e08:	add	r0, r1
    7e0a:	orr.w	r3, r3, r5, lsr #6
    7e0e:	adds	r3, #1
    7e10:	subs	r0, #7
    7e12:	lsl.w	r0, r3, r0
    7e16:	add	sp, #20
    7e18:	pop	{r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    7e1a:	mov	r1, sp
    7e1c:	blx	r3
    7e1e:	b.n	7dc2 <SdSpiCard::sectorCount()+0x16>
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7e20:	ldrb.w	r3, [sp, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    7e24:	ldrb.w	r1, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7e28:	ldrb.w	r0, [sp, #8]
    7e2c:	adds	r2, r3, #1
    7e2e:	and.w	r3, r1, #63	; 0x3f
    7e32:	add.w	r3, r2, r3, lsl #16
    7e36:	add.w	r0, r3, r0, lsl #8
    7e3a:	lsls	r0, r0, #10
}
    7e3c:	add	sp, #20
    7e3e:	pop	{r4, r5, pc}
    7e40:	.word	0x00007d9d

00007e44 <SdSpiCard::readStart(unsigned long)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    7e44:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    7e46:	ldr	r3, [r0, #0]
    7e48:	ldr	r5, [pc, #68]	; (7e90 <SdSpiCard::readStart(unsigned long)+0x4c>)
    7e4a:	ldr	r3, [r3, #64]	; 0x40
    7e4c:	cmp	r3, r5
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    7e4e:	sub	sp, #12
    7e50:	mov	r4, r0
    7e52:	mov	r2, r1
    7e54:	bne.n	7e86 <SdSpiCard::readStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    7e56:	ldrb	r0, [r0, #22]
  if (type() != SD_CARD_TYPE_SDHC) {
    7e58:	cmp	r0, #3
    sector <<= 9;
    7e5a:	it	ne
    7e5c:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD18, sector)) {
    7e5e:	movs	r1, #18
    7e60:	mov	r0, r4
    7e62:	bl	7c80 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7e66:	cbz	r0, 7e80 <SdSpiCard::readStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7e68:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7e6a:	movs	r3, #12
    7e6c:	strb	r3, [r4, #19]
    7e6e:	cbnz	r0, 7e74 <SdSpiCard::readStart(unsigned long)+0x30>
  return true;

fail:
  spiStop();
  return false;
}
    7e70:	add	sp, #12
    7e72:	pop	{r4, r5, pc}
    7e74:	mov	r0, r4
    7e76:	bl	7b60 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    7e7a:	movs	r0, #0
    7e7c:	add	sp, #12
    7e7e:	pop	{r4, r5, pc}
  if (cardCommand(CMD18, sector)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
    7e80:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    7e82:	add	sp, #12
    7e84:	pop	{r4, r5, pc}
    7e86:	str	r1, [sp, #4]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    7e88:	blx	r3
    7e8a:	ldr	r2, [sp, #4]
    7e8c:	b.n	7e58 <SdSpiCard::readStart(unsigned long)+0x14>
    7e8e:	nop
    7e90:	.word	0x00007aa9

00007e94 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    7e94:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e98:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    7e9a:	ldrb	r1, [r0, #16]
    7e9c:	cmp	r1, #1
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    7e9e:	mov	r6, r0
    7ea0:	mov	r4, r2
    7ea2:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    7ea4:	beq.n	7eb6 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!syncDevice()) {
    7ea6:	ldr	r3, [r6, #0]
    7ea8:	mov	r0, r6
    7eaa:	ldr	r3, [r3, #20]
    7eac:	blx	r3
    7eae:	cbnz	r0, 7eea <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x56>
      return false;
    7eb0:	movs	r0, #0
    7eb2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    7eb6:	ldr	r3, [r0, #12]
    7eb8:	cmp	r3, r5
    7eba:	bne.n	7ea6 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    7ebc:	movs	r5, #0
    7ebe:	cbz	r7, 7eda <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    if (!readData(dst, 512)) {
    7ec0:	mov	r1, r4
    7ec2:	mov.w	r2, #512	; 0x200
    7ec6:	mov	r0, r6
    7ec8:	bl	7bc4 <SdSpiCard::readData(unsigned char*, unsigned int)>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    7ecc:	adds	r5, #1
    7ece:	add.w	r4, r4, #512	; 0x200
    if (!readData(dst, 512)) {
    7ed2:	cmp	r0, #0
    7ed4:	beq.n	7eb0 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    7ed6:	cmp	r7, r5
    7ed8:	bne.n	7ec0 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    7eda:	ldr	r3, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    7edc:	ldrb	r2, [r6, #17]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    7ede:	add	r7, r3
    7ee0:	str	r7, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    7ee2:	cbnz	r2, 7efe <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x6a>
    7ee4:	movs	r0, #1
    7ee6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    if (!syncDevice()) {
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
    7eea:	mov	r1, r5
    7eec:	mov	r0, r6
    7eee:	bl	7e44 <SdSpiCard::readStart(unsigned long)>
    7ef2:	cmp	r0, #0
    7ef4:	beq.n	7eb0 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    7ef6:	movs	r3, #1
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    }
    m_curSector = sector;
    7ef8:	str	r5, [r6, #12]
    m_curState = READ_STATE;
    7efa:	strb	r3, [r6, #16]
    7efc:	b.n	7ebc <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    7efe:	ldr	r3, [r6, #0]
    7f00:	mov	r0, r6
    7f02:	ldr	r3, [r3, #20]
      return false;
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
    7f04:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    7f08:	bx	r3
    7f0a:	nop

00007f0c <SdSpiCard::readStop()>:
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    7f0c:	push	{r3, r4, r5, lr}
  if (cardCommand(CMD12, 0)) {
    7f0e:	movs	r2, #0
    7f10:	movs	r1, #12
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    7f12:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    7f14:	bl	7c80 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7f18:	ldrb	r4, [r5, #20]
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    7f1a:	cbz	r0, 7f26 <SdSpiCard::readStop()+0x1a>
    7f1c:	movs	r3, #9
    7f1e:	strb	r3, [r5, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7f20:	cbnz	r4, 7f38 <SdSpiCard::readStop()+0x2c>
  return true;

fail:
  spiStop();
  return false;
}
    7f22:	mov	r0, r4
    7f24:	pop	{r3, r4, r5, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7f26:	cbnz	r4, 7f2e <SdSpiCard::readStop()+0x22>
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
  return true;
    7f28:	movs	r4, #1

fail:
  spiStop();
  return false;
}
    7f2a:	mov	r0, r4
    7f2c:	pop	{r3, r4, r5, pc}
    7f2e:	mov	r0, r5
    7f30:	bl	7b60 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    7f34:	mov	r0, r4
    7f36:	pop	{r3, r4, r5, pc}
    7f38:	mov	r0, r5
    7f3a:	movs	r4, #0
    7f3c:	bl	7b60 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    7f40:	mov	r0, r4
    7f42:	pop	{r3, r4, r5, pc}

00007f44 <SdSpiCard::writeStart(unsigned long)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    7f44:	push	{r4, r5, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    7f46:	ldr	r3, [r0, #0]
    7f48:	ldr	r5, [pc, #68]	; (7f90 <SdSpiCard::writeStart(unsigned long)+0x4c>)
    7f4a:	ldr	r3, [r3, #64]	; 0x40
    7f4c:	cmp	r3, r5
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    7f4e:	sub	sp, #12
    7f50:	mov	r4, r0
    7f52:	mov	r2, r1
    7f54:	bne.n	7f86 <SdSpiCard::writeStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    7f56:	ldrb	r0, [r0, #22]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    7f58:	cmp	r0, #3
    sector <<= 9;
    7f5a:	it	ne
    7f5c:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD25, sector)) {
    7f5e:	movs	r1, #25
    7f60:	mov	r0, r4
    7f62:	bl	7c80 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7f66:	cbz	r0, 7f80 <SdSpiCard::writeStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7f68:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7f6a:	movs	r3, #14
    7f6c:	strb	r3, [r4, #19]
    7f6e:	cbnz	r0, 7f74 <SdSpiCard::writeStart(unsigned long)+0x30>
  return true;

fail:
  spiStop();
  return false;
}
    7f70:	add	sp, #12
    7f72:	pop	{r4, r5, pc}
    7f74:	mov	r0, r4
    7f76:	bl	7b60 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    7f7a:	movs	r0, #0
    7f7c:	add	sp, #12
    7f7e:	pop	{r4, r5, pc}
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
    7f80:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    7f82:	add	sp, #12
    7f84:	pop	{r4, r5, pc}
    7f86:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    7f88:	blx	r3
    7f8a:	ldr	r2, [sp, #4]
    7f8c:	b.n	7f58 <SdSpiCard::writeStart(unsigned long)+0x14>
    7f8e:	nop
    7f90:	.word	0x00007aa9

00007f94 <SdSpiCard::erase(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    7f94:	push	{r4, r5, r6, r7, lr}
  csd_t csd;
  if (!readCSD(&csd)) {
    7f96:	ldr	r3, [r0, #0]
    7f98:	ldr	r7, [pc, #172]	; (8048 <SdSpiCard::erase(unsigned long, unsigned long)+0xb4>)
    7f9a:	ldr	r3, [r3, #52]	; 0x34
    7f9c:	cmp	r3, r7
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    7f9e:	sub	sp, #20
    7fa0:	mov	r4, r0
    7fa2:	mov	r5, r1
    7fa4:	mov	r6, r2
    7fa6:	bne.n	8004 <SdSpiCard::erase(unsigned long, unsigned long)+0x70>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    7fa8:	mov	r2, sp
    7faa:	movs	r1, #9
    7fac:	bl	7d50 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  if (!readCSD(&csd)) {
    7fb0:	cbz	r0, 7fd8 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    7fb2:	ldrb.w	r3, [sp, #10]
    7fb6:	lsls	r2, r3, #25
    7fb8:	bpl.n	7fe8 <SdSpiCard::erase(unsigned long, unsigned long)+0x54>
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    7fba:	ldrb	r3, [r4, #22]
    7fbc:	cmp	r3, #3
    firstSector <<= 9;
    7fbe:	it	ne
    7fc0:	lslne	r5, r5, #9
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
    7fc2:	mov	r2, r5
    7fc4:	mov.w	r1, #32
    7fc8:	mov	r0, r4
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
    7fca:	it	ne
    7fcc:	lslne	r6, r6, #9
  }
  if (cardCommand(CMD32, firstSector)
    7fce:	bl	7c80 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD33, lastSector)
      || cardCommand(CMD38, 0)) {
    7fd2:	cbz	r0, 800a <SdSpiCard::erase(unsigned long, unsigned long)+0x76>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7fd4:	movs	r3, #37	; 0x25
    7fd6:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7fd8:	ldrb	r0, [r4, #20]
    7fda:	cbz	r0, 7fe4 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    7fdc:	mov	r0, r4
    7fde:	bl	7b60 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    7fe2:	movs	r0, #0
}
    7fe4:	add	sp, #20
    7fe6:	pop	{r4, r5, r6, r7, pc}
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    7fe8:	and.w	r3, r3, #63	; 0x3f
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    7fec:	ldrb.w	r1, [sp, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    7ff0:	lsls	r3, r3, #1
    7ff2:	adds	r2, r6, #1
    7ff4:	orr.w	r3, r3, r1, lsr #7
    7ff8:	orrs	r2, r5
    7ffa:	tst	r3, r2
    7ffc:	beq.n	7fba <SdSpiCard::erase(unsigned long, unsigned long)+0x26>
    7ffe:	movs	r3, #38	; 0x26
    8000:	strb	r3, [r4, #19]
    8002:	b.n	7fd8 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    8004:	mov	r1, sp
    8006:	blx	r3
    8008:	b.n	7fb0 <SdSpiCard::erase(unsigned long, unsigned long)+0x1c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
      || cardCommand(CMD33, lastSector)
    800a:	mov	r2, r6
    800c:	movs	r1, #33	; 0x21
    800e:	mov	r0, r4
    8010:	bl	7c80 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    8014:	cmp	r0, #0
    8016:	bne.n	7fd4 <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
      || cardCommand(CMD38, 0)) {
    8018:	mov	r2, r0
    801a:	movs	r1, #38	; 0x26
    801c:	mov	r0, r4
    801e:	bl	7c80 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    8022:	cmp	r0, #0
    8024:	bne.n	7fd4 <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
    error(SD_CARD_ERROR_ERASE);
    goto fail;
  }
  DBG_BEGIN_TIME(DBG_ERASE_BUSY);
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    8026:	movw	r1, #10000	; 0x2710
    802a:	mov	r0, r4
    802c:	bl	7c44 <SdSpiCard::waitNotBusy(unsigned short)>
    8030:	cbnz	r0, 8038 <SdSpiCard::erase(unsigned long, unsigned long)+0xa4>
    8032:	movs	r3, #39	; 0x27
    8034:	strb	r3, [r4, #19]
    8036:	b.n	7fd8 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8038:	ldrb	r5, [r4, #20]
    803a:	cmp	r5, #0
    803c:	beq.n	7fe4 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    803e:	mov	r0, r4
    8040:	bl	7b60 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_ERASE_BUSY);
  spiStop();
  return true;
    8044:	mov	r0, r5
    8046:	b.n	7fe4 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    8048:	.word	0x00007d9d

0000804c <SdSpiCard::writeStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    804c:	push	{r4, r5, r6, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    804e:	mov.w	r1, #600	; 0x258
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    8052:	mov	r5, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    8054:	bl	7c44 <SdSpiCard::waitNotBusy(unsigned short)>
    8058:	mov	r6, r0
    805a:	cbnz	r0, 8074 <SdSpiCard::writeStop()+0x28>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    805c:	ldrb	r4, [r5, #20]
    805e:	movs	r3, #30
    8060:	strb	r3, [r5, #19]
    8062:	cbnz	r4, 8068 <SdSpiCard::writeStop()+0x1c>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    8064:	mov	r0, r4
    8066:	pop	{r4, r5, r6, pc}
    8068:	mov	r0, r5
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
    806a:	mov	r4, r6
    806c:	bl	7b60 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
}
    8070:	mov	r0, r4
    8072:	pop	{r4, r5, r6, pc}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    8074:	movs	r1, #253	; 0xfd
    8076:	adds	r0, r5, #4
    8078:	bl	920c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    807c:	ldrb	r4, [r5, #20]
    807e:	cbnz	r4, 8086 <SdSpiCard::writeStop()+0x3a>
    8080:	mov	r4, r6

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    8082:	mov	r0, r4
    8084:	pop	{r4, r5, r6, pc}
    8086:	mov	r0, r5
    8088:	bl	7b60 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    808c:	b.n	8064 <SdSpiCard::writeStop()+0x18>
    808e:	nop

00008090 <SdSpiCard::syncDevice()>:
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    8090:	push	{r4, lr}
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    8092:	ldrb	r3, [r0, #16]
    8094:	cmp	r3, #1
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    8096:	mov	r4, r0
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    8098:	beq.n	80a6 <SdSpiCard::syncDevice()+0x16>
    if (!SdSpiCard::readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    809a:	cmp	r3, #2
    809c:	beq.n	80b2 <SdSpiCard::syncDevice()+0x22>
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    809e:	movs	r3, #0
    80a0:	strb	r3, [r4, #16]
#endif  // ENABLE_DEDICATED_SPI
  return true;
    80a2:	movs	r0, #1
    80a4:	pop	{r4, pc}
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    if (!SdSpiCard::readStop()) {
    80a6:	bl	7f0c <SdSpiCard::readStop()>
    80aa:	cmp	r0, #0
    80ac:	bne.n	809e <SdSpiCard::syncDevice()+0xe>
      return false;
    80ae:	movs	r0, #0
    80b0:	pop	{r4, pc}
    }
  } else if (m_curState == WRITE_STATE) {
    if (!SdSpiCard::writeStop()) {
    80b2:	bl	804c <SdSpiCard::writeStop()>
    80b6:	cmp	r0, #0
    80b8:	bne.n	809e <SdSpiCard::syncDevice()+0xe>
    80ba:	b.n	80ae <SdSpiCard::syncDevice()+0x1e>

000080bc <SdSpiCard::writeData(unsigned char, unsigned char const*)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
    80bc:	push	{r4, r5, r6, lr}
    80be:	adds	r4, r0, #4
    80c0:	mov	r6, r2
    80c2:	mov	r5, r0
    80c4:	mov	r0, r4
    80c6:	bl	920c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver.send(buf, n);
    80ca:	mov.w	r2, #512	; 0x200
    80ce:	mov	r1, r6
    80d0:	mov	r0, r4
    80d2:	bl	9224 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    80d6:	mov	r0, r4
    80d8:	movs	r1, #255	; 0xff
    80da:	bl	920c <SdSpiArduinoDriver::send(unsigned char)>
    80de:	mov	r0, r4
    80e0:	movs	r1, #255	; 0xff
    80e2:	bl	920c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    80e6:	mov	r0, r4
    80e8:	bl	91d0 <SdSpiArduinoDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    80ec:	and.w	r3, r0, #31
    80f0:	cmp	r3, #5
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    80f2:	strb	r0, [r5, #21]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    80f4:	beq.n	810a <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x4e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    80f6:	ldrb	r0, [r5, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    80f8:	movs	r3, #31
    80fa:	strb	r3, [r5, #19]
    80fc:	cbnz	r0, 8100 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
  return true;

fail:
  spiStop();
  return false;
}
    80fe:	pop	{r4, r5, r6, pc}
    8100:	mov	r0, r5
    8102:	bl	7b60 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  }
  return true;

fail:
  spiStop();
  return false;
    8106:	movs	r0, #0
    8108:	pop	{r4, r5, r6, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE_DATA);
    goto fail;
  }
  return true;
    810a:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    810c:	pop	{r4, r5, r6, pc}
    810e:	nop

00008110 <SdSpiCard::writeData(unsigned char const*)>:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    8110:	push	{r3, r4, r5, lr}
    8112:	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    8114:	mov.w	r1, #600	; 0x258
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    8118:	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    811a:	bl	7c44 <SdSpiCard::waitNotBusy(unsigned short)>
    811e:	cbnz	r0, 8132 <SdSpiCard::writeData(unsigned char const*)+0x22>
    8120:	movs	r3, #35	; 0x23
    8122:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8124:	ldrb	r0, [r4, #20]
    8126:	cbz	r0, 8130 <SdSpiCard::writeData(unsigned char const*)+0x20>
    8128:	mov	r0, r4
    812a:	bl	7b60 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  }
  return true;

fail:
  spiStop();
  return false;
    812e:	movs	r0, #0
}
    8130:	pop	{r3, r4, r5, pc}
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    8132:	mov	r2, r5
    8134:	movs	r1, #252	; 0xfc
    8136:	mov	r0, r4
    8138:	bl	80bc <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    813c:	cmp	r0, #0
    813e:	beq.n	8124 <SdSpiCard::writeData(unsigned char const*)+0x14>
  return true;

fail:
  spiStop();
  return false;
}
    8140:	pop	{r3, r4, r5, pc}
    8142:	nop

00008144 <sdIrs()>:
#endif  // USE_DEBUG_MODE
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
    8144:	push	{r4}
  SDHC_IRQSIGEN = 0;
    8146:	ldr	r4, [pc, #28]	; (8164 <sdIrs()+0x20>)
  m_irqstat = SDHC_IRQSTAT;
    8148:	ldr	r2, [pc, #28]	; (8168 <sdIrs()+0x24>)
    814a:	ldr	r1, [pc, #32]	; (816c <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    814c:	ldr	r0, [pc, #32]	; (8170 <sdIrs()+0x2c>)
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    814e:	movs	r3, #0
    8150:	str	r3, [r4, #0]
  m_irqstat = SDHC_IRQSTAT;
    8152:	ldr	r4, [r2, #0]
    8154:	str	r4, [r1, #0]
  SDHC_IRQSTAT = m_irqstat;
    8156:	ldr	r1, [r1, #0]
    8158:	str	r1, [r2, #0]
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
}
    815a:	ldr.w	r4, [sp], #4
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    815e:	strb	r3, [r0, #0]
}
    8160:	bx	lr
    8162:	nop
    8164:	.word	0x400b1038
    8168:	.word	0x400b1030
    816c:	.word	0x1fff19b8
    8170:	.word	0x1fff19d0

00008174 <isBusyCommandComplete()>:
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    8174:	ldr	r3, [pc, #12]	; (8184 <isBusyCommandComplete()+0x10>)
    8176:	ldr	r0, [pc, #16]	; (8188 <isBusyCommandComplete()+0x14>)
    8178:	ldr	r3, [r3, #0]
    817a:	ands	r0, r3
}
    817c:	clz	r0, r0
    8180:	lsrs	r0, r0, #5
    8182:	bx	lr
    8184:	.word	0x400b1030
    8188:	.word	0x000f0001

0000818c <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    818c:	ldr	r3, [pc, #8]	; (8198 <isBusyCommandInhibit()+0xc>)
    818e:	ldr	r0, [r3, #0]
}
    8190:	and.w	r0, r0, #1
    8194:	bx	lr
    8196:	nop
    8198:	.word	0x400b1024

0000819c <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    819c:	ldr	r3, [pc, #4]	; (81a4 <isBusyDMA()+0x8>)
    819e:	ldrb	r0, [r3, #0]
}
    81a0:	bx	lr
    81a2:	nop
    81a4:	.word	0x1fff19d0

000081a8 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    81a8:	ldr	r3, [pc, #12]	; (81b8 <isBusyFifoRead()+0x10>)
    81aa:	ldr	r0, [r3, #0]
    81ac:	eor.w	r0, r0, #2048	; 0x800
}
    81b0:	ubfx	r0, r0, #11, #1
    81b4:	bx	lr
    81b6:	nop
    81b8:	.word	0x400b1024

000081bc <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    81bc:	ldr	r3, [pc, #12]	; (81cc <isBusyFifoWrite()+0x10>)
    81be:	ldr	r0, [r3, #0]
    81c0:	eor.w	r0, r0, #1024	; 0x400
}
    81c4:	ubfx	r0, r0, #10, #1
    81c8:	bx	lr
    81ca:	nop
    81cc:	.word	0x400b1024

000081d0 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    81d0:	ldr	r3, [pc, #12]	; (81e0 <isBusyTransferComplete()+0x10>)
    81d2:	ldr	r0, [pc, #16]	; (81e4 <isBusyTransferComplete()+0x14>)
    81d4:	ldr	r3, [r3, #0]
    81d6:	ands	r0, r3
}
    81d8:	clz	r0, r0
    81dc:	lsrs	r0, r0, #5
    81de:	bx	lr
    81e0:	.word	0x400b1030
    81e4:	.word	0x117f0002

000081e8 <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    81e8:	mov.w	r2, #1000	; 0x3e8
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    81ec:	ldr	r3, [pc, #176]	; (82a0 <setSdclk(unsigned long)+0xb8>)
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    81ee:	mul.w	r0, r2, r0
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    81f2:	cmp	r0, r3
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    81f4:	push	{r4, r5, r6, r7}
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    81f6:	bhi.n	8290 <setSdclk(unsigned long)+0xa8>
    81f8:	ldr	r5, [pc, #168]	; (82a4 <setSdclk(unsigned long)+0xbc>)
    81fa:	movs	r2, #8
    81fc:	movs	r1, #1
    sdclkfs <<= 1;
    81fe:	lsls	r1, r1, #1
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    8200:	lsls	r3, r1, #4
    8202:	udiv	r3, r5, r3
    8206:	cmp	r0, r3
    8208:	ldr	r4, [pc, #152]	; (82a4 <setSdclk(unsigned long)+0xbc>)
    820a:	bcs.n	8288 <setSdclk(unsigned long)+0xa0>
    820c:	subs	r2, #1
    820e:	bne.n	81fe <setSdclk(unsigned long)+0x16>
    8210:	udiv	r4, r4, r1
    8214:	lsrs	r3, r1, #1
    8216:	lsls	r7, r3, #8
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8218:	cmp	r0, r4
    821a:	bcs.n	8298 <setSdclk(unsigned long)+0xb0>
    821c:	ldr	r6, [pc, #132]	; (82a4 <setSdclk(unsigned long)+0xbc>)
    821e:	lsls	r3, r1, #1
    8220:	movs	r2, #1
    8222:	b.n	8226 <setSdclk(unsigned long)+0x3e>
    8224:	mov	r3, r4
    8226:	udiv	r4, r6, r3
    822a:	cmp	r0, r4
    dvs++;
    822c:	add.w	r5, r2, #1
    8230:	add.w	r4, r3, r1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8234:	bcs.n	8284 <setSdclk(unsigned long)+0x9c>
    8236:	cmp	r5, #16
    8238:	mov	r2, r5
    823a:	bne.n	8224 <setSdclk(unsigned long)+0x3c>
    823c:	movs	r2, #240	; 0xf0
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    823e:	ldr	r6, [pc, #104]	; (82a8 <setSdclk(unsigned long)+0xc0>)
  sdclkfs >>= 1;
  dvs--;
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    8240:	ldr	r4, [pc, #104]	; (82ac <setSdclk(unsigned long)+0xc4>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    8242:	ldr	r0, [pc, #96]	; (82a4 <setSdclk(unsigned long)+0xbc>)

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    8244:	ldr	r1, [pc, #104]	; (82b0 <setSdclk(unsigned long)+0xc8>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    8246:	mov.w	r5, #1000	; 0x3e8
    824a:	mul.w	r3, r5, r3
    824e:	udiv	r3, r0, r3
    8252:	str	r3, [r6, #0]
  sdclkfs >>= 1;
  dvs--;
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    8254:	ldr	r3, [r4, #0]
    8256:	bic.w	r3, r3, #8
    825a:	str	r3, [r4, #0]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    825c:	ldr	r0, [r4, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    825e:	bic.w	r3, r0, #1044480	; 0xff000
    8262:	bic.w	r3, r3, #4080	; 0xff0
    8266:	orr.w	r3, r3, #917504	; 0xe0000
    826a:	orrs	r3, r7
    826c:	orrs	r2, r3
    826e:	str	r2, [r4, #0]

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    8270:	ldr	r3, [r1, #0]
    8272:	lsls	r3, r3, #28
    8274:	bpl.n	8270 <setSdclk(unsigned long)+0x88>
  }

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
    8276:	ldr	r2, [pc, #52]	; (82ac <setSdclk(unsigned long)+0xc4>)
    8278:	ldr	r3, [r2, #0]
    827a:	orr.w	r3, r3, #8
    827e:	str	r3, [r2, #0]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    8280:	pop	{r4, r5, r6, r7}
    8282:	bx	lr
    8284:	lsls	r2, r2, #4
    8286:	b.n	823e <setSdclk(unsigned long)+0x56>
    8288:	udiv	r4, r4, r1
    828c:	lsls	r7, r1, #7
    828e:	b.n	8218 <setSdclk(unsigned long)+0x30>
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    8290:	ldr	r4, [pc, #16]	; (82a4 <setSdclk(unsigned long)+0xbc>)
    8292:	movs	r7, #0
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
    8294:	movs	r1, #1
    8296:	b.n	8218 <setSdclk(unsigned long)+0x30>
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8298:	mov	r3, r1
    829a:	movs	r2, #0
    829c:	b.n	823e <setSdclk(unsigned long)+0x56>
    829e:	nop
    82a0:	.word	0x005b8d7f
    82a4:	.word	0x05b8d800
    82a8:	.word	0x1fff19d4
    82ac:	.word	0x400b102c
    82b0:	.word	0x400b1024

000082b4 <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    82b4:	ldr	r3, [pc, #4]	; (82bc <SdioCard::errorCode() const+0x8>)
}
    82b6:	ldrb	r0, [r3, #0]
    82b8:	bx	lr
    82ba:	nop
    82bc:	.word	0x1fff097c

000082c0 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    82c0:	ldr	r3, [pc, #4]	; (82c8 <SdioCard::errorData() const+0x8>)
    82c2:	ldr	r0, [r3, #0]
}
    82c4:	bx	lr
    82c6:	nop
    82c8:	.word	0x1fff19b8

000082cc <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    82cc:	push	{r4, r5}
  memcpy(cid, &m_cid, 16);
    82ce:	ldr	r4, [pc, #20]	; (82e4 <SdioCard::readCID(CID*)+0x18>)
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    82d0:	mov	r5, r1
  memcpy(cid, &m_cid, 16);
    82d2:	ldmia	r4!, {r0, r1, r2, r3}
    82d4:	str	r0, [r5, #0]
    82d6:	str	r1, [r5, #4]
    82d8:	str	r2, [r5, #8]
    82da:	str	r3, [r5, #12]
  return true;
}
    82dc:	movs	r0, #1
    82de:	pop	{r4, r5}
    82e0:	bx	lr
    82e2:	nop
    82e4:	.word	0x1fff1998

000082e8 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    82e8:	push	{r4, r5}
  memcpy(csd, &m_csd, 16);
    82ea:	ldr	r4, [pc, #20]	; (8300 <SdioCard::readCSD(csd_t*)+0x18>)
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    82ec:	mov	r5, r1
  memcpy(csd, &m_csd, 16);
    82ee:	ldmia	r4!, {r0, r1, r2, r3}
    82f0:	str	r0, [r5, #0]
    82f2:	str	r1, [r5, #4]
    82f4:	str	r2, [r5, #8]
    82f6:	str	r3, [r5, #12]
  return true;
}
    82f8:	movs	r0, #1
    82fa:	pop	{r4, r5}
    82fc:	bx	lr
    82fe:	nop
    8300:	.word	0x1fff19c0

00008304 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    8304:	ldr	r3, [pc, #8]	; (8310 <SdioCard::readOCR(unsigned long*)+0xc>)
    8306:	ldr	r3, [r3, #0]
    8308:	str	r3, [r1, #0]
  return true;
}
    830a:	movs	r0, #1
    830c:	bx	lr
    830e:	nop
    8310:	.word	0x1fff19b0

00008314 <SdioCard::~SdioCard()>:
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    8314:	bx	lr
    8316:	nop

00008318 <waitTimeout(bool (*)())>:
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
    8318:	push	{r3, r4, r5, r6, r7, lr}
    831a:	mov	r5, r0
  uint32_t m = micros();
    831c:	bl	9828 <micros>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8320:	ldr	r7, [pc, #24]	; (833c <waitTimeout(bool (*)())+0x24>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    8322:	mov	r6, r0
    8324:	b.n	8330 <waitTimeout(bool (*)())+0x18>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8326:	bl	9828 <micros>
    832a:	subs	r0, r0, r6
    832c:	cmp	r0, r7
    832e:	bhi.n	8338 <waitTimeout(bool (*)())+0x20>
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    8330:	blx	r5
    8332:	mov	r4, r0
    8334:	cmp	r0, #0
    8336:	bne.n	8326 <waitTimeout(bool (*)())+0xe>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      return true;
    }
  }
  return false;  // Caller will set errorCode.
}
    8338:	mov	r0, r4
    833a:	pop	{r3, r4, r5, r6, r7, pc}
    833c:	.word	0x000f4240

00008340 <yieldTimeout(bool (*)())>:
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    8340:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    8344:	ldr.w	r8, [pc, #64]	; 8388 <yieldTimeout(bool (*)())+0x48>
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8348:	ldr	r7, [pc, #56]	; (8384 <yieldTimeout(bool (*)())+0x44>)
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    834a:	str.w	r0, [r8]
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    834e:	mov	r5, r0
  m_busyFcn = fcn;
  uint32_t m = micros();
    8350:	bl	9828 <micros>
    8354:	mov	r6, r0
    8356:	b.n	8366 <yieldTimeout(bool (*)())+0x26>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8358:	bl	9828 <micros>
    835c:	subs	r0, r0, r6
    835e:	cmp	r0, r7
    8360:	bhi.n	8378 <yieldTimeout(bool (*)())+0x38>
  Particle.process();
}
#elif defined(ARDUINO)
inline void SysCall::yield() {
  // Use the external Arduino yield() function.
  ::yield();
    8362:	bl	a804 <yield>
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    8366:	blx	r5
    8368:	mov	r4, r0
    836a:	cmp	r0, #0
    836c:	bne.n	8358 <yieldTimeout(bool (*)())+0x18>
      m_busyFcn = 0;
      return true;
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
    836e:	str.w	r0, [r8]
  return false;  // Caller will set errorCode.
}
    8372:	mov	r0, r4
    8374:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    8378:	movs	r3, #0
    837a:	str.w	r3, [r8]
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    837e:	mov	r0, r4
    8380:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8384:	.word	0x000f4240
    8388:	.word	0x1fff19a8

0000838c <SdioCard::~SdioCard()>:
    838c:	push	{r4, lr}
    838e:	movs	r1, #12
    8390:	mov	r4, r0
    8392:	bl	aa90 <operator delete(void*, unsigned int)>
    8396:	mov	r0, r4
    8398:	pop	{r4, pc}
    839a:	nop

0000839c <SdioCard::type() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
    839c:	ldr	r3, [pc, #20]	; (83b4 <SdioCard::type() const+0x18>)
    839e:	ldrb	r3, [r3, #0]
    83a0:	cbz	r3, 83b0 <SdioCard::type() const+0x14>
    83a2:	ldr	r3, [pc, #20]	; (83b8 <SdioCard::type() const+0x1c>)
    83a4:	ldrb	r3, [r3, #0]
    83a6:	cmp	r3, #0
    83a8:	ite	ne
    83aa:	movne	r0, #3
    83ac:	moveq	r0, #2
    83ae:	bx	lr
    83b0:	movs	r0, #1
}
    83b2:	bx	lr
    83b4:	.word	0x1fff1994
    83b8:	.word	0x1fff19ac

000083bc <cardCommand(unsigned long, unsigned long)>:
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    83bc:	push	{r3, r4, r5, lr}
    83be:	mov	r4, r0
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    83c0:	ldr	r0, [pc, #60]	; (8400 <cardCommand(unsigned long, unsigned long)+0x44>)
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    83c2:	mov	r5, r1
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    83c4:	bl	8318 <waitTimeout(bool (*)())>
    83c8:	cbz	r0, 83ce <cardCommand(unsigned long, unsigned long)+0x12>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    83ca:	movs	r0, #0
    83cc:	pop	{r3, r4, r5, pc}
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    83ce:	ldr	r2, [pc, #52]	; (8404 <cardCommand(unsigned long, unsigned long)+0x48>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    83d0:	ldr	r3, [pc, #52]	; (8408 <cardCommand(unsigned long, unsigned long)+0x4c>)
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    83d2:	str	r5, [r2, #0]
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
  if (waitTimeout(isBusyCommandComplete)) {
    83d4:	ldr	r0, [pc, #52]	; (840c <cardCommand(unsigned long, unsigned long)+0x50>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    83d6:	str	r4, [r3, #0]
  if (waitTimeout(isBusyCommandComplete)) {
    83d8:	bl	8318 <waitTimeout(bool (*)())>
    83dc:	cmp	r0, #0
    83de:	bne.n	83ca <cardCommand(unsigned long, unsigned long)+0xe>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
    83e0:	ldr	r2, [pc, #44]	; (8410 <cardCommand(unsigned long, unsigned long)+0x54>)
    83e2:	ldr	r3, [pc, #48]	; (8414 <cardCommand(unsigned long, unsigned long)+0x58>)
    83e4:	ldr	r1, [r2, #0]
    83e6:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    83e8:	ldr	r1, [r3, #0]
    83ea:	str	r1, [r2, #0]

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    83ec:	ldr	r2, [r3, #0]
    83ee:	lsls	r2, r2, #31
    83f0:	bpl.n	83ca <cardCommand(unsigned long, unsigned long)+0xe>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    83f2:	ldr	r3, [r3, #0]
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    83f4:	tst.w	r3, #983040	; 0xf0000
    83f8:	bne.n	83ca <cardCommand(unsigned long, unsigned long)+0xe>
    83fa:	movs	r0, #1
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
    83fc:	pop	{r3, r4, r5, pc}
    83fe:	nop
    8400:	.word	0x0000818d
    8404:	.word	0x400b1008
    8408:	.word	0x400b100c
    840c:	.word	0x00008175
    8410:	.word	0x400b1030
    8414:	.word	0x1fff19b8

00008418 <SdioCard::status()>:
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
    8418:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    841a:	ldr	r3, [pc, #16]	; (842c <SdioCard::status()+0x14>)
    841c:	ldr	r0, [pc, #16]	; (8430 <SdioCard::status()+0x18>)
    841e:	ldr	r1, [r3, #0]
    8420:	bl	83bc <cardCommand(unsigned long, unsigned long)>
    8424:	cbz	r0, 842a <SdioCard::status()+0x12>
    8426:	ldr	r3, [pc, #12]	; (8434 <SdioCard::status()+0x1c>)
    8428:	ldr	r0, [r3, #0]
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
    842a:	pop	{r3, pc}
    842c:	.word	0x1fff19b4
    8430:	.word	0x0d1a0000
    8434:	.word	0x400b1010

00008438 <readReg16(unsigned long, void*)>:
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    8438:	push	{r4, r5, lr}
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    843a:	ldr	r3, [pc, #84]	; (8490 <readReg16(unsigned long, void*)+0x58>)
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    843c:	sub	sp, #20
    843e:	mov	r5, r1
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    8440:	ldr	r1, [r3, #0]
    8442:	bl	83bc <cardCommand(unsigned long, unsigned long)>
    8446:	cbz	r0, 848a <readReg16(unsigned long, void*)+0x52>
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    8448:	ldr	r2, [pc, #72]	; (8494 <readReg16(unsigned long, void*)+0x5c>)
    844a:	ldr	r3, [pc, #76]	; (8498 <readReg16(unsigned long, void*)+0x60>)
    844c:	ldr	r2, [r2, #0]
    844e:	str	r2, [sp, #0]
    8450:	ldr	r1, [r3, #0]
    8452:	str	r1, [sp, #4]
    8454:	ldr	r1, [r3, #4]
    8456:	str	r1, [sp, #8]
    8458:	adds	r3, #8
    845a:	add.w	r4, r5, #15
    845e:	ldr	r3, [r3, #0]
    8460:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    8462:	movs	r3, #0
    8464:	b.n	846a <readReg16(unsigned long, void*)+0x32>
    8466:	ldr.w	r2, [r1, #-16]
    d[14 - i] = sr[i/4] >> 8*(i%4);
    846a:	and.w	r1, r3, #3
    846e:	lsls	r1, r1, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    8470:	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8472:	lsrs	r2, r1
    8474:	add.w	lr, sp, #16
    8478:	bic.w	r1, r3, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    847c:	cmp	r3, #15
    847e:	add	r1, lr
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8480:	strb.w	r2, [r4, #-1]!
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    8484:	bne.n	8466 <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i/4] >> 8*(i%4);
  }
  d[15] = 0;
    8486:	movs	r3, #0
    8488:	strb	r3, [r5, #15]
  return true;
}
    848a:	add	sp, #20
    848c:	pop	{r4, r5, pc}
    848e:	nop
    8490:	.word	0x1fff19b4
    8494:	.word	0x400b1010
    8498:	.word	0x400b1014

0000849c <isBusyCMD13()>:
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
    849c:	push	{r3, lr}
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    849e:	ldr	r3, [pc, #28]	; (84bc <isBusyCMD13()+0x20>)
    84a0:	ldr	r0, [pc, #28]	; (84c0 <isBusyCMD13()+0x24>)
    84a2:	ldr	r1, [r3, #0]
    84a4:	bl	83bc <cardCommand(unsigned long, unsigned long)>
    84a8:	cbz	r0, 84b8 <isBusyCMD13()+0x1c>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    84aa:	ldr	r3, [pc, #24]	; (84c4 <isBusyCMD13()+0x28>)
    84ac:	ldr	r0, [r3, #0]
    84ae:	eor.w	r0, r0, #256	; 0x100
    84b2:	ubfx	r0, r0, #8, #1
    84b6:	pop	{r3, pc}
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
    84b8:	movs	r0, #1
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
    84ba:	pop	{r3, pc}
    84bc:	.word	0x1fff19b4
    84c0:	.word	0x0d1a0000
    84c4:	.word	0x400b1010

000084c8 <SdioCard::isBusy()>:
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    84c8:	ldr	r3, [pc, #16]	; (84dc <SdioCard::isBusy()+0x14>)
    84ca:	ldr	r3, [r3, #0]
    84cc:	cbz	r3, 84d0 <SdioCard::isBusy()+0x8>
    84ce:	bx	r3
    84d0:	ldr	r3, [pc, #12]	; (84e0 <SdioCard::isBusy()+0x18>)
    84d2:	ldrb	r0, [r3, #0]
    84d4:	cbnz	r0, 84d8 <SdioCard::isBusy()+0x10>
}
    84d6:	bx	lr
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    84d8:	b.w	849c <isBusyCMD13()>
    84dc:	.word	0x1fff19a8
    84e0:	.word	0x1fff19bc

000084e4 <waitDmaStatus() [clone .part.6]>:
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    84e4:	ldr	r3, [pc, #20]	; (84fc <waitDmaStatus() [clone .part.6]+0x18>)
    84e6:	ldr	r0, [r3, #0]
    84e8:	ands.w	r0, r0, #2
    84ec:	beq.n	84fa <waitDmaStatus() [clone .part.6]+0x16>
    84ee:	ldr	r3, [r3, #0]
    84f0:	ldr	r0, [pc, #12]	; (8500 <waitDmaStatus() [clone .part.6]+0x1c>)
    84f2:	ands	r0, r3
    84f4:	clz	r0, r0
    84f8:	lsrs	r0, r0, #5
}
    84fa:	bx	lr
    84fc:	.word	0x1fff19b8
    8500:	.word	0x117f0000

00008504 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//------------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    8504:	push	{r3, r4, r5, r6, r7, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
    8506:	lsls	r4, r2, #30
    8508:	bne.n	850c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8>
    850a:	cbnz	r3, 851e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    850c:	ldr	r1, [pc, #124]	; (858c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    850e:	ldr	r3, [pc, #128]	; (8590 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8510:	movs	r0, #36	; 0x24
  m_errorLine = line;
    8512:	mov.w	r2, #470	; 0x1d6
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8516:	strb	r0, [r1, #0]
  m_errorLine = line;
    8518:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    851a:	movs	r0, #0
    851c:	pop	{r3, r4, r5, r6, r7, pc}
    851e:	mov	r6, r0
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    8520:	ldr	r0, [pc, #112]	; (8594 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    8522:	mov	r4, r3
    8524:	mov	r7, r1
    8526:	mov	r5, r2
    8528:	bl	8340 <yieldTimeout(bool (*)())>
    852c:	cbnz	r0, 8576 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x72>
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    852e:	ldr	r1, [pc, #104]	; (8598 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    8530:	ldr	r2, [pc, #104]	; (859c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    8532:	ldr.w	lr, [pc, #128]	; 85b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb0>
    8536:	mov.w	ip, #1
    853a:	strb.w	ip, [lr]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    853e:	lsls	r3, r4, #16
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    8540:	str	r0, [r1, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8542:	ldr	r4, [pc, #92]	; (85a0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    8544:	str	r5, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    8546:	ldr	r2, [pc, #92]	; (85a4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8548:	ldr	r1, [pc, #92]	; (85a8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa4>)
    854a:	ldr	r0, [pc, #96]	; (85ac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>)
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    854c:	orr.w	r3, r3, #512	; 0x200
    8550:	str	r3, [r4, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    8552:	ldrb	r3, [r2, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8554:	str	r0, [r1, #0]
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    8556:	cbnz	r3, 8586 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x82>
    8558:	lsls	r1, r7, #9
    855a:	mov	r0, r6
    855c:	bl	83bc <cardCommand(unsigned long, unsigned long)>
    8560:	cmp	r0, #0
    8562:	beq.n	851a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    8564:	ldr	r0, [pc, #72]	; (85b0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xac>)
    8566:	bl	8340 <yieldTimeout(bool (*)())>
    856a:	cmp	r0, #0
    856c:	bne.n	851a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    856e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8572:	b.w	84e4 <waitDmaStatus() [clone .part.6]>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8576:	ldr	r1, [pc, #20]	; (858c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    8578:	ldr	r3, [pc, #20]	; (8590 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    857a:	movs	r0, #10
  m_errorLine = line;
    857c:	movw	r2, #473	; 0x1d9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8580:	strb	r0, [r1, #0]
  m_errorLine = line;
    8582:	str	r2, [r3, #0]
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    8584:	b.n	851a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    8586:	mov	r1, r7
    8588:	b.n	855a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
    858a:	nop
    858c:	.word	0x1fff097c
    8590:	.word	0x1fff19d8
    8594:	.word	0x0000849d
    8598:	.word	0x1fff19b8
    859c:	.word	0x400b1000
    85a0:	.word	0x400b1004
    85a4:	.word	0x1fff19ac
    85a8:	.word	0x400b1038
    85ac:	.word	0x117f0002
    85b0:	.word	0x0000819d
    85b4:	.word	0x1fff19d0

000085b8 <SdioCard::sectorCount()>:
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
}
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
    85b8:	push	{r4, r5, r6}
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    85ba:	ldr	r1, [pc, #100]	; (8620 <SdioCard::sectorCount()+0x68>)
    85bc:	ldrb	r3, [r1, #0]
    85be:	ands.w	r3, r3, #192	; 0xc0
    85c2:	beq.n	85e8 <SdioCard::sectorCount()+0x30>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    85c4:	cmp	r3, #64	; 0x40
    85c6:	beq.n	85ce <SdioCard::sectorCount()+0x16>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
    85c8:	movs	r0, #0
  return sdCardCapacity(&m_csd);
}
    85ca:	pop	{r4, r5, r6}
    85cc:	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    85ce:	ldrb	r3, [r1, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    85d0:	ldrb	r4, [r1, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    85d2:	ldrb	r0, [r1, #8]
    85d4:	adds	r2, r3, #1
    85d6:	and.w	r3, r4, #63	; 0x3f
    85da:	add.w	r3, r2, r3, lsl #16
    85de:	add.w	r0, r3, r0, lsl #8
    85e2:	lsls	r0, r0, #10
    85e4:	pop	{r4, r5, r6}
    85e6:	bx	lr
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    85e8:	ldrb	r5, [r1, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    85ea:	ldrb	r3, [r1, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    85ec:	ldrb	r2, [r1, #7]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    85ee:	ldrb	r4, [r1, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    85f0:	ldrb	r6, [r1, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    85f2:	ldrb	r0, [r1, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    85f4:	and.w	r1, r5, #3
    85f8:	lsls	r1, r1, #1
    85fa:	and.w	r3, r3, #3
    85fe:	lsls	r2, r2, #2
    8600:	orr.w	r0, r1, r0, lsr #7
    8604:	orr.w	r3, r2, r3, lsl #10
    8608:	and.w	r1, r4, #15
    860c:	orr.w	r3, r3, r6, lsr #6
    8610:	add	r0, r1
    8612:	subs	r0, #7
    8614:	adds	r3, #1
    8616:	lsl.w	r0, r3, r0
    861a:	pop	{r4, r5, r6}
    861c:	bx	lr
    861e:	nop
    8620:	.word	0x1fff19c0

00008624 <SdioCard::erase(unsigned long, unsigned long)>:
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8624:	push	{r4, r5, r6, lr}
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    8626:	ldr	r6, [pc, #176]	; (86d8 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    8628:	ldrb	r3, [r6, #10]
    862a:	and.w	r0, r3, #64	; 0x40
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    862e:	mov	r5, r2
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    8630:	cbnz	r0, 864a <SdioCard::erase(unsigned long, unsigned long)+0x26>
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    8632:	and.w	r3, r3, #63	; 0x3f
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    8636:	ldrb	r2, [r6, #11]
    8638:	and.w	r4, r0, #255	; 0xff
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    863c:	lsls	r3, r3, #1
    863e:	adds	r0, r5, #1
    8640:	orr.w	r3, r3, r2, lsr #7
    8644:	orrs	r0, r1
    8646:	tst	r3, r0
    8648:	bne.n	868e <SdioCard::erase(unsigned long, unsigned long)+0x6a>
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    }
  }
  if (!m_highCapacity) {
    864a:	ldr	r3, [pc, #144]	; (86dc <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    864c:	ldrb	r3, [r3, #0]
    864e:	cbnz	r3, 8654 <SdioCard::erase(unsigned long, unsigned long)+0x30>
    firstSector <<= 9;
    8650:	lsls	r1, r1, #9
    lastSector <<= 9;
    8652:	lsls	r5, r5, #9
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    8654:	ldr	r0, [pc, #136]	; (86e0 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    8656:	bl	83bc <cardCommand(unsigned long, unsigned long)>
    865a:	mov	r4, r0
    865c:	cbnz	r0, 8670 <SdioCard::erase(unsigned long, unsigned long)+0x4c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    865e:	ldr	r1, [pc, #132]	; (86e4 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    8660:	ldr	r3, [pc, #132]	; (86e8 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8662:	movs	r0, #15
  m_errorLine = line;
    8664:	mov.w	r2, #692	; 0x2b4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8668:	strb	r0, [r1, #0]
  m_errorLine = line;
    866a:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    866c:	mov	r0, r4
    866e:	pop	{r4, r5, r6, pc}
    lastSector <<= 9;
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    8670:	mov	r1, r5
    8672:	ldr	r0, [pc, #120]	; (86ec <SdioCard::erase(unsigned long, unsigned long)+0xc8>)
    8674:	bl	83bc <cardCommand(unsigned long, unsigned long)>
    8678:	mov	r4, r0
    867a:	cbnz	r0, 86a0 <SdioCard::erase(unsigned long, unsigned long)+0x7c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    867c:	ldr	r1, [pc, #100]	; (86e4 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    867e:	ldr	r3, [pc, #104]	; (86e8 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8680:	movs	r0, #16
  m_errorLine = line;
    8682:	movw	r2, #695	; 0x2b7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8686:	strb	r0, [r1, #0]
  m_errorLine = line;
    8688:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    868a:	mov	r0, r4
    868c:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    868e:	ldr	r1, [pc, #84]	; (86e4 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    8690:	ldr	r3, [pc, #84]	; (86e8 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8692:	movs	r0, #38	; 0x26
  m_errorLine = line;
    8694:	mov.w	r2, #684	; 0x2ac
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8698:	strb	r0, [r1, #0]
  m_errorLine = line;
    869a:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    869c:	mov	r0, r4
    869e:	pop	{r4, r5, r6, pc}
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    86a0:	movs	r1, #0
    86a2:	ldr	r0, [pc, #76]	; (86f0 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    86a4:	bl	83bc <cardCommand(unsigned long, unsigned long)>
    86a8:	mov	r4, r0
    86aa:	cbnz	r0, 86bc <SdioCard::erase(unsigned long, unsigned long)+0x98>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    86ac:	ldr	r1, [pc, #52]	; (86e4 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    86ae:	ldr	r3, [pc, #56]	; (86e8 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    86b0:	movs	r0, #17
  m_errorLine = line;
    86b2:	movw	r2, #698	; 0x2ba
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    86b6:	strb	r0, [r1, #0]
  m_errorLine = line;
    86b8:	str	r2, [r3, #0]
    86ba:	b.n	866c <SdioCard::erase(unsigned long, unsigned long)+0x48>
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    86bc:	ldr	r0, [pc, #52]	; (86f4 <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    86be:	bl	8318 <waitTimeout(bool (*)())>
    86c2:	cmp	r0, #0
    86c4:	beq.n	866c <SdioCard::erase(unsigned long, unsigned long)+0x48>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    86c6:	ldr	r1, [pc, #28]	; (86e4 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    86c8:	ldr	r3, [pc, #28]	; (86e8 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    86ca:	movs	r0, #39	; 0x27
  m_errorLine = line;
    86cc:	movw	r2, #701	; 0x2bd
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    86d0:	strb	r0, [r1, #0]
  m_errorLine = line;
    86d2:	str	r2, [r3, #0]
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    86d4:	movs	r4, #0
    86d6:	b.n	866c <SdioCard::erase(unsigned long, unsigned long)+0x48>
    86d8:	.word	0x1fff19c0
    86dc:	.word	0x1fff19ac
    86e0:	.word	0x201a0000
    86e4:	.word	0x1fff097c
    86e8:	.word	0x1fff19d8
    86ec:	.word	0x211a0000
    86f0:	.word	0x261b0000
    86f4:	.word	0x0000849d

000086f8 <transferStop()>:
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
    86f8:	push	{r4, r5, r6, lr}
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    86fa:	movs	r1, #0
    86fc:	ldr	r0, [pc, #84]	; (8754 <transferStop()+0x5c>)
    86fe:	bl	83bc <cardCommand(unsigned long, unsigned long)>
    8702:	mov	r4, r0
    8704:	cbnz	r0, 8718 <transferStop()+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8706:	ldr	r1, [pc, #80]	; (8758 <transferStop()+0x60>)
  m_errorLine = line;
    8708:	ldr	r3, [pc, #80]	; (875c <transferStop()+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    870a:	movs	r0, #9
  m_errorLine = line;
    870c:	mov.w	r2, #540	; 0x21c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8710:	strb	r0, [r1, #0]
  m_errorLine = line;
    8712:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    8714:	mov	r0, r4
    8716:	pop	{r4, r5, r6, pc}
//------------------------------------------------------------------------------
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    8718:	ldr	r0, [pc, #68]	; (8760 <transferStop()+0x68>)
    871a:	bl	8340 <yieldTimeout(bool (*)())>
    871e:	cbnz	r0, 873e <transferStop()+0x46>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    8720:	ldr	r0, [pc, #64]	; (8764 <transferStop()+0x6c>)
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    8722:	ldr	r1, [pc, #68]	; (8768 <transferStop()+0x70>)
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    8724:	ldr	r5, [pc, #68]	; (876c <transferStop()+0x74>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    8726:	ldr	r6, [r0, #0]
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    8728:	ldr	r3, [r1, #0]
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    872a:	ldr	r2, [r5, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    872c:	bic.w	r3, r3, #65536	; 0x10000
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    8730:	orr.w	r2, r2, #67108864	; 0x4000000
    8734:	str	r2, [r5, #0]
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
    8736:	str	r6, [r0, #0]
  SDHC_PROCTL = proctl;
    8738:	str	r3, [r1, #0]
  return true;
}
    873a:	mov	r0, r4
    873c:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    873e:	ldr	r1, [pc, #24]	; (8758 <transferStop()+0x60>)
  m_errorLine = line;
    8740:	ldr	r3, [pc, #24]	; (875c <transferStop()+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8742:	movs	r0, #10
  m_errorLine = line;
    8744:	movw	r2, #543	; 0x21f
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8748:	strb	r0, [r1, #0]
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    874a:	movs	r4, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    874c:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    874e:	mov	r0, r4
    8750:	pop	{r4, r5, r6, pc}
    8752:	nop
    8754:	.word	0x0cdb0000
    8758:	.word	0x1fff097c
    875c:	.word	0x1fff19d8
    8760:	.word	0x0000849d
    8764:	.word	0x400b1034
    8768:	.word	0x400b1028
    876c:	.word	0x400b102c

00008770 <SdioCard::readStop()>:
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    8770:	b.w	86f8 <transferStop()>

00008774 <SdioCard::writeData(unsigned char const*)>:
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    8774:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    8776:	ldr	r3, [pc, #160]	; (8818 <SdioCard::writeData(unsigned char const*)+0xa4>)
    8778:	ldr	r3, [r3, #0]
    877a:	lsls	r0, r3, #23
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    877c:	mov	r5, r1
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    877e:	bmi.n	8792 <SdioCard::writeData(unsigned char const*)+0x1e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8780:	ldr	r3, [pc, #152]	; (881c <SdioCard::writeData(unsigned char const*)+0xa8>)
    8782:	ldr	r2, [r3, #0]
    8784:	bic.w	r2, r2, #65536	; 0x10000
    8788:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    878a:	ldr	r2, [r3, #0]
    878c:	orr.w	r2, r2, #131072	; 0x20000
    8790:	str	r2, [r3, #0]
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8792:	ldr	r2, [pc, #136]	; (881c <SdioCard::writeData(unsigned char const*)+0xa8>)
  if (waitTimeout(isBusyFifoWrite)) {
    8794:	ldr	r0, [pc, #136]	; (8820 <SdioCard::writeData(unsigned char const*)+0xac>)
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8796:	ldr	r3, [r2, #0]
    8798:	orr.w	r3, r3, #65536	; 0x10000
    879c:	str	r3, [r2, #0]
  if (waitTimeout(isBusyFifoWrite)) {
    879e:	bl	8318 <waitTimeout(bool (*)())>
    87a2:	cmp	r0, #0
    87a4:	bne.n	8804 <SdioCard::writeData(unsigned char const*)+0x90>
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    87a6:	ldr	r4, [pc, #112]	; (8818 <SdioCard::writeData(unsigned char const*)+0xa4>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    87a8:	ldr	r0, [pc, #120]	; (8824 <SdioCard::writeData(unsigned char const*)+0xb0>)
    87aa:	subs	r3, r5, #4
    87ac:	add.w	r5, r5, #508	; 0x1fc
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    87b0:	ldr	r2, [r4, #0]
    87b2:	lsls	r1, r2, #21
    87b4:	bpl.n	87b0 <SdioCard::writeData(unsigned char const*)+0x3c>
    87b6:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    87ba:	ldr.w	r2, [r3, #4]!
    87be:	str	r2, [r0, #0]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    87c0:	cmp	r1, r3
    87c2:	bne.n	87ba <SdioCard::writeData(unsigned char const*)+0x46>
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    87c4:	cmp	r5, r1
    87c6:	mov	r3, r1
    87c8:	bne.n	87b0 <SdioCard::writeData(unsigned char const*)+0x3c>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    87ca:	ldr	r0, [pc, #92]	; (8828 <SdioCard::writeData(unsigned char const*)+0xb4>)
    87cc:	bl	8318 <waitTimeout(bool (*)())>
    87d0:	cbnz	r0, 87f2 <SdioCard::writeData(unsigned char const*)+0x7e>
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    87d2:	ldr	r2, [pc, #88]	; (882c <SdioCard::writeData(unsigned char const*)+0xb8>)
    87d4:	ldr	r3, [pc, #88]	; (8830 <SdioCard::writeData(unsigned char const*)+0xbc>)
    87d6:	ldr	r1, [r2, #0]
    87d8:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    87da:	ldr	r1, [r3, #0]
    87dc:	str	r1, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    87de:	ldr	r2, [r3, #0]
    87e0:	lsls	r2, r2, #30
    87e2:	bpl.n	8814 <SdioCard::writeData(unsigned char const*)+0xa0>
    87e4:	ldr	r3, [r3, #0]
    87e6:	ldr	r0, [pc, #76]	; (8834 <SdioCard::writeData(unsigned char const*)+0xc0>)
    87e8:	ands	r0, r3
    87ea:	clz	r0, r0
    87ee:	lsrs	r0, r0, #5
    87f0:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    87f2:	ldr	r1, [pc, #68]	; (8838 <SdioCard::writeData(unsigned char const*)+0xc4>)
  m_errorLine = line;
    87f4:	ldr	r3, [pc, #68]	; (883c <SdioCard::writeData(unsigned char const*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    87f6:	movs	r0, #35	; 0x23
  m_errorLine = line;
    87f8:	movw	r2, #905	; 0x389
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    87fc:	strb	r0, [r1, #0]
  m_errorLine = line;
    87fe:	str	r2, [r3, #0]
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
    8800:	movs	r0, #0
    8802:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8804:	ldr	r1, [pc, #48]	; (8838 <SdioCard::writeData(unsigned char const*)+0xc4>)
  m_errorLine = line;
    8806:	ldr	r3, [pc, #52]	; (883c <SdioCard::writeData(unsigned char const*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8808:	movs	r0, #32
  m_errorLine = line;
    880a:	movw	r2, #894	; 0x37e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    880e:	strb	r0, [r1, #0]
  m_errorLine = line;
    8810:	str	r2, [r3, #0]
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    8812:	movs	r0, #0
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    8814:	pop	{r3, r4, r5, pc}
    8816:	nop
    8818:	.word	0x400b1024
    881c:	.word	0x400b1028
    8820:	.word	0x000081bd
    8824:	.word	0x400b1020
    8828:	.word	0x000081d1
    882c:	.word	0x400b1030
    8830:	.word	0x1fff19b8
    8834:	.word	0x117f0000
    8838:	.word	0x1fff097c
    883c:	.word	0x1fff19d8

00008840 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    8840:	push	{r3, r4, r5, lr}
  if (yieldTimeout(isBusyCMD13)) {
    8842:	ldr	r0, [pc, #80]	; (8894 <SdioCard::writeStart(unsigned long)+0x54>)
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    8844:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    8846:	bl	8340 <yieldTimeout(bool (*)())>
    884a:	cbnz	r0, 8880 <SdioCard::writeStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    884c:	ldr	r2, [pc, #72]	; (8898 <SdioCard::writeStart(unsigned long)+0x58>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    884e:	ldr	r1, [pc, #76]	; (889c <SdioCard::writeStart(unsigned long)+0x5c>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8850:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    8852:	ldr	r0, [pc, #76]	; (88a0 <SdioCard::writeStart(unsigned long)+0x60>)
    8854:	ldr	r5, [pc, #76]	; (88a4 <SdioCard::writeStart(unsigned long)+0x64>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8856:	bic.w	r3, r3, #65536	; 0x10000
    885a:	str	r3, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    885c:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    885e:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8860:	cbnz	r3, 887c <SdioCard::writeStart(unsigned long)+0x3c>
    8862:	lsls	r1, r4, #9
    8864:	ldr	r0, [pc, #64]	; (88a8 <SdioCard::writeStart(unsigned long)+0x68>)
    8866:	bl	83bc <cardCommand(unsigned long, unsigned long)>
    886a:	cbnz	r0, 887a <SdioCard::writeStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    886c:	ldr	r1, [pc, #60]	; (88ac <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    886e:	ldr	r3, [pc, #64]	; (88b0 <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8870:	movs	r4, #14
  m_errorLine = line;
    8872:	movw	r2, #990	; 0x3de
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8876:	strb	r4, [r1, #0]
  m_errorLine = line;
    8878:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    887a:	pop	{r3, r4, r5, pc}
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    887c:	mov	r1, r4
    887e:	b.n	8864 <SdioCard::writeStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8880:	ldr	r1, [pc, #40]	; (88ac <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    8882:	ldr	r3, [pc, #44]	; (88b0 <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8884:	movs	r0, #10
  m_errorLine = line;
    8886:	movw	r2, #978	; 0x3d2
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    888a:	strb	r0, [r1, #0]
  m_errorLine = line;
    888c:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    888e:	movs	r0, #0
    8890:	pop	{r3, r4, r5, pc}
    8892:	nop
    8894:	.word	0x0000849d
    8898:	.word	0x400b1028
    889c:	.word	0x1fff19ac
    88a0:	.word	0x400b1004
    88a4:	.word	0xffff0200
    88a8:	.word	0x193a0022
    88ac:	.word	0x1fff097c
    88b0:	.word	0x1fff19d8

000088b4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    88b4:	push	{r3, r4, r5, r6, r7, lr}
    88b6:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    88b8:	ldrb	r0, [r0, #8]
    88ba:	lsls	r0, r0, #31
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    88bc:	mov	r4, r1
    88be:	mov	r5, r2
    88c0:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    88c2:	bmi.n	88ec <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
      return sdError(SD_CARD_ERROR_CMD18);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    88c4:	cbz	r3, 88e8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    88c6:	add	r7, r1
    88c8:	b.n	88ce <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    88ca:	cmp	r4, r7
    88cc:	beq.n	88e8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    88ce:	ldr	r3, [r6, #0]
    88d0:	mov	r2, r5
    88d2:	mov	r1, r4
    88d4:	ldr	r3, [r3, #8]
    88d6:	mov	r0, r6
    88d8:	blx	r3
    88da:	adds	r4, #1
    88dc:	add.w	r5, r5, #512	; 0x200
    88e0:	cmp	r0, #0
    88e2:	bne.n	88ca <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
        if (!readSector(sector, dst)) {
          return false;  // readSector will set errorCode.
    88e4:	movs	r0, #0
    88e6:	pop	{r3, r4, r5, r6, r7, pc}
      if (!readSector(sector + i, dst + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    88e8:	movs	r0, #1
    88ea:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
    88ec:	lsls	r0, r2, #30
    88ee:	beq.n	8916 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    88f0:	cmp	r3, #0
    88f2:	beq.n	88e8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    88f4:	add	r7, r1
    88f6:	b.n	88fc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    88f8:	cmp	r7, r4
    88fa:	beq.n	88e8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    88fc:	ldr	r3, [r6, #0]
    88fe:	mov	r2, r5
    8900:	mov	r1, r4
    8902:	ldr	r3, [r3, #8]
    8904:	mov	r0, r6
    8906:	blx	r3
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    8908:	adds	r4, #1
    890a:	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    890e:	cmp	r0, #0
    8910:	bne.n	88f8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    8912:	movs	r0, #0
    8914:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    8916:	ldr	r0, [pc, #24]	; (8930 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    8918:	bl	8504 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    891c:	cmp	r0, #0
    891e:	bne.n	88e8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8920:	ldr	r1, [pc, #16]	; (8934 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
  m_errorLine = line;
    8922:	ldr	r3, [pc, #20]	; (8938 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8924:	movs	r4, #12
  m_errorLine = line;
    8926:	mov.w	r2, #820	; 0x334
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    892a:	strb	r4, [r1, #0]
  m_errorLine = line;
    892c:	str	r2, [r3, #0]
    892e:	pop	{r3, r4, r5, r6, r7, pc}
    8930:	.word	0x123a0037
    8934:	.word	0x1fff097c
    8938:	.word	0x1fff19d8

0000893c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    893c:	push	{r3, r4, r5, r6, r7, lr}
    893e:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    8940:	ldrb	r0, [r0, #8]
    8942:	lsls	r0, r0, #31
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    8944:	mov	r4, r1
    8946:	mov	r5, r2
    8948:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    894a:	bmi.n	8974 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    894c:	cbz	r3, 8970 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    894e:	add	r7, r1
    8950:	b.n	8956 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    8952:	cmp	r4, r7
    8954:	beq.n	8970 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    8956:	ldr	r3, [r6, #0]
    8958:	mov	r2, r5
    895a:	mov	r1, r4
    895c:	ldr	r3, [r3, #24]
    895e:	mov	r0, r6
    8960:	blx	r3
    8962:	adds	r4, #1
    8964:	add.w	r5, r5, #512	; 0x200
    8968:	cmp	r0, #0
    896a:	bne.n	8952 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
        if (!writeSector(sector, ptr)) {
          return false;  // writeSector will set errorCode.
    896c:	movs	r0, #0
    896e:	pop	{r3, r4, r5, r6, r7, pc}
      if (!writeSector(sector + i, src + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    8970:	movs	r0, #1
    8972:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
    8974:	lsls	r0, r2, #30
    8976:	beq.n	899e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    8978:	cmp	r3, #0
    897a:	beq.n	8970 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    897c:	add	r7, r1
    897e:	b.n	8984 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    8980:	cmp	r7, r4
    8982:	beq.n	8970 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    8984:	ldr	r3, [r6, #0]
    8986:	mov	r2, r5
    8988:	mov	r1, r4
    898a:	ldr	r3, [r3, #24]
    898c:	mov	r0, r6
    898e:	blx	r3
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    8990:	adds	r4, #1
    8992:	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    8996:	cmp	r0, #0
    8998:	bne.n	8980 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    899a:	movs	r0, #0
    899c:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    899e:	ldr	r0, [pc, #24]	; (89b8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    89a0:	bl	8504 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    89a4:	cmp	r0, #0
    89a6:	bne.n	8970 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    89a8:	ldr	r1, [pc, #16]	; (89bc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
  m_errorLine = line;
    89aa:	ldr	r3, [pc, #20]	; (89c0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    89ac:	movs	r4, #14
  m_errorLine = line;
    89ae:	mov.w	r2, #964	; 0x3c4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    89b2:	strb	r4, [r1, #0]
  m_errorLine = line;
    89b4:	str	r2, [r3, #0]
    89b6:	pop	{r3, r4, r5, r6, r7, pc}
    89b8:	.word	0x193a0027
    89bc:	.word	0x1fff097c
    89c0:	.word	0x1fff19d8

000089c4 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    89c4:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    89c6:	ldrb	r3, [r0, #8]
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    89c8:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    89ca:	lsls	r2, r3, #31
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    89cc:	sub.w	sp, sp, #512	; 0x200
    89d0:	mov	r6, r1
  if (m_sdioConfig.useDma()) {
    89d2:	bpl.n	8a08 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
    89d4:	lsls	r3, r5, #30
    89d6:	beq.n	89e6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x22>
      ptr = aligned;
      memcpy(aligned, src, 512);
    89d8:	mov	r1, r5
    89da:	mov	r0, sp
    89dc:	mov.w	r2, #512	; 0x200
    89e0:	bl	9280 <memcpy>
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_sdioConfig.useDma()) {
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
      ptr = aligned;
    89e4:	mov	r5, sp
      memcpy(aligned, src, 512);
    } else {
      ptr = const_cast<uint8_t*>(src);
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    89e6:	mov	r2, r5
    89e8:	mov	r1, r6
    89ea:	movs	r3, #1
    89ec:	ldr	r0, [pc, #120]	; (8a68 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>)
    89ee:	bl	8504 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    89f2:	cbnz	r0, 8a02 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    89f4:	ldr	r1, [pc, #116]	; (8a6c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa8>)
  m_errorLine = line;
    89f6:	ldr	r3, [pc, #120]	; (8a70 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xac>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    89f8:	movs	r4, #13
  m_errorLine = line;
    89fa:	movw	r2, #923	; 0x39b
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    89fe:	strb	r4, [r1, #0]
  m_errorLine = line;
    8a00:	str	r2, [r3, #0]
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    8a02:	add.w	sp, sp, #512	; 0x200
    8a06:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    8a08:	ldrb	r3, [r0, #9]
    8a0a:	cmp	r3, #2
    8a0c:	mov	r4, r0
    8a0e:	beq.n	8a22 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
      if (!syncDevice()) {
    8a10:	ldr	r3, [r4, #0]
    8a12:	mov	r0, r4
    8a14:	ldr	r3, [r3, #20]
    8a16:	blx	r3
    8a18:	cbnz	r0, 8a52 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x8e>
        return false;
    8a1a:	movs	r0, #0
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    8a1c:	add.w	sp, sp, #512	; 0x200
    8a20:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    8a22:	ldr	r3, [r0, #4]
    8a24:	cmp	r1, r3
    8a26:	bne.n	8a10 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    }
    if (!writeData(src)) {
    8a28:	ldr	r3, [r4, #0]
    8a2a:	mov	r1, r5
    8a2c:	ldr	r3, [r3, #68]	; 0x44
    8a2e:	mov	r0, r4
    8a30:	blx	r3
    8a32:	cmp	r0, #0
    8a34:	beq.n	8a1a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
      return false;
    }
    m_curSector++;
    8a36:	ldr	r3, [r4, #4]
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    8a38:	ldr	r2, [pc, #56]	; (8a74 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb0>)
      m_curState = WRITE_STATE;
    }
    if (!writeData(src)) {
      return false;
    }
    m_curSector++;
    8a3a:	adds	r3, #1
    8a3c:	str	r3, [r4, #4]
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    8a3e:	ldr	r3, [r2, #0]
    8a40:	lsrs	r3, r3, #16
    8a42:	lsls	r3, r3, #16
    8a44:	cmp	r3, #0
    8a46:	bne.n	8a02 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
      if (!syncDevice()) {
    8a48:	ldr	r3, [r4, #0]
    8a4a:	mov	r0, r4
    8a4c:	ldr	r3, [r3, #20]
    8a4e:	blx	r3
    8a50:	b.n	8a02 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
      if (!syncDevice()) {
        return false;
      }
      if (!writeStart(sector )) {
    8a52:	ldr	r3, [r4, #0]
    8a54:	mov	r1, r6
    8a56:	ldr	r3, [r3, #72]	; 0x48
    8a58:	mov	r0, r4
    8a5a:	blx	r3
    8a5c:	cmp	r0, #0
    8a5e:	beq.n	8a1a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    8a60:	movs	r3, #2
        return false;
      }
      if (!writeStart(sector )) {
        return false;
      }
      m_curSector = sector;
    8a62:	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    8a64:	strb	r3, [r4, #9]
    8a66:	b.n	8a28 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x64>
    8a68:	.word	0x183a0001
    8a6c:	.word	0x1fff097c
    8a70:	.word	0x1fff19d8
    8a74:	.word	0x400b1004

00008a78 <SdioCard::syncDevice()>:
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    8a78:	ldrb	r3, [r0, #9]
    8a7a:	cmp	r3, #1
    8a7c:	beq.n	8a98 <SdioCard::syncDevice()+0x20>
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    8a7e:	cmp	r3, #2
    8a80:	beq.n	8a86 <SdioCard::syncDevice()+0xe>
    if (!writeStop()) {
      return false;
    }
  }
  return true;
}
    8a82:	movs	r0, #1
    8a84:	bx	lr
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    8a86:	movs	r1, #0
    if (!writeStop()) {
    8a88:	ldr	r3, [r0, #0]
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    8a8a:	strb	r1, [r0, #9]
    if (!writeStop()) {
    8a8c:	ldr	r3, [r3, #76]	; 0x4c
    8a8e:	ldr	r2, [pc, #20]	; (8aa4 <SdioCard::syncDevice()+0x2c>)
    8a90:	cmp	r3, r2
    8a92:	bne.n	8aa0 <SdioCard::syncDevice()+0x28>
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    8a94:	b.w	86f8 <transferStop()>
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    8a98:	movs	r3, #0
    8a9a:	strb	r3, [r0, #9]
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
    8a9c:	b.w	86f8 <transferStop()>
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    if (!writeStop()) {
    8aa0:	bx	r3
    8aa2:	nop
    8aa4:	.word	0x00008771

00008aa8 <cardCMD6(unsigned long, unsigned char*)>:

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    8aa8:	push	{r3, r4, r5, r6, r7, lr}
    8aaa:	mov	r5, r0
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    8aac:	ldr	r0, [pc, #116]	; (8b24 <cardCMD6(unsigned long, unsigned char*)+0x7c>)

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    8aae:	mov	r4, r1
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    8ab0:	bl	8318 <waitTimeout(bool (*)())>
    8ab4:	cbz	r0, 8ac8 <cardCMD6(unsigned long, unsigned char*)+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8ab6:	ldr	r1, [pc, #112]	; (8b28 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    8ab8:	ldr	r3, [pc, #112]	; (8b2c <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8aba:	movs	r0, #10
  m_errorLine = line;
    8abc:	movw	r2, #377	; 0x179
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8ac0:	strb	r0, [r1, #0]
  m_errorLine = line;
    8ac2:	str	r2, [r3, #0]
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    8ac4:	movs	r0, #0
    8ac6:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    8ac8:	ldr	r2, [pc, #100]	; (8b30 <cardCMD6(unsigned long, unsigned char*)+0x88>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    8aca:	ldr.w	lr, [pc, #132]	; 8b50 <cardCMD6(unsigned long, unsigned char*)+0xa8>
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    8ace:	ldr	r7, [pc, #100]	; (8b34 <cardCMD6(unsigned long, unsigned char*)+0x8c>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    8ad0:	ldr	r6, [pc, #100]	; (8b38 <cardCMD6(unsigned long, unsigned char*)+0x90>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8ad2:	ldr	r3, [pc, #104]	; (8b3c <cardCMD6(unsigned long, unsigned char*)+0x94>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    8ad4:	mov.w	ip, #1
    8ad8:	strb.w	ip, [lr]
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    8adc:	mov	r1, r5
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    8ade:	str	r0, [r2, #0]
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    8ae0:	ldr	r5, [pc, #92]	; (8b40 <cardCMD6(unsigned long, unsigned char*)+0x98>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8ae2:	ldr	r2, [pc, #96]	; (8b44 <cardCMD6(unsigned long, unsigned char*)+0x9c>)
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    8ae4:	str	r4, [r7, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    8ae6:	ldr	r0, [pc, #96]	; (8b48 <cardCMD6(unsigned long, unsigned char*)+0xa0>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    8ae8:	str	r5, [r6, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8aea:	str	r2, [r3, #0]
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    8aec:	bl	83bc <cardCommand(unsigned long, unsigned long)>
    8af0:	cbnz	r0, 8b02 <cardCMD6(unsigned long, unsigned char*)+0x5a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8af2:	ldr	r1, [pc, #52]	; (8b28 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    8af4:	ldr	r3, [pc, #52]	; (8b2c <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8af6:	movs	r4, #4
  m_errorLine = line;
    8af8:	mov.w	r2, #384	; 0x180
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8afc:	strb	r4, [r1, #0]
  m_errorLine = line;
    8afe:	str	r2, [r3, #0]
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
    8b00:	pop	{r3, r4, r5, r6, r7, pc}
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    8b02:	ldr	r0, [pc, #72]	; (8b4c <cardCMD6(unsigned long, unsigned char*)+0xa4>)
    8b04:	bl	8340 <yieldTimeout(bool (*)())>
    8b08:	cbnz	r0, 8b12 <cardCMD6(unsigned long, unsigned char*)+0x6a>
    8b0a:	bl	84e4 <waitDmaStatus() [clone .part.6]>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    8b0e:	cbz	r0, 8b12 <cardCMD6(unsigned long, unsigned char*)+0x6a>
    return sdError(SD_CARD_ERROR_DMA);
  }
  return true;
}
    8b10:	pop	{r3, r4, r5, r6, r7, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8b12:	ldr	r1, [pc, #20]	; (8b28 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    8b14:	ldr	r3, [pc, #20]	; (8b2c <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8b16:	movs	r0, #36	; 0x24
  m_errorLine = line;
    8b18:	movw	r2, #387	; 0x183
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8b1c:	strb	r0, [r1, #0]
  m_errorLine = line;
    8b1e:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    return sdError(SD_CARD_ERROR_DMA);
    8b20:	movs	r0, #0
    8b22:	pop	{r3, r4, r5, r6, r7, pc}
    8b24:	.word	0x0000849d
    8b28:	.word	0x1fff097c
    8b2c:	.word	0x1fff19d8
    8b30:	.word	0x1fff19b8
    8b34:	.word	0x400b1000
    8b38:	.word	0x400b1004
    8b3c:	.word	0x400b1038
    8b40:	.word	0x00010040
    8b44:	.word	0x117f0002
    8b48:	.word	0x063a0011
    8b4c:	.word	0x0000819d
    8b50:	.word	0x1fff19d0

00008b54 <SdioCard::begin(SdioConfig)>:
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    8b54:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    8b58:	ldr	r5, [pc, #568]	; (8d94 <SdioCard::begin(SdioConfig)+0x240>)
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    8b5a:	ldr	r4, [pc, #572]	; (8d98 <SdioCard::begin(SdioConfig)+0x244>)
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    8b5c:	ldr.w	r8, [pc, #684]	; 8e0c <SdioCard::begin(SdioConfig)+0x2b8>
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    8b60:	ldr	r7, [pc, #568]	; (8d9c <SdioCard::begin(SdioConfig)+0x248>)
  m_version2 = false;
    8b62:	ldr	r6, [pc, #572]	; (8da0 <SdioCard::begin(SdioConfig)+0x24c>)
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
    8b64:	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    8b66:	movs	r3, #0
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    8b68:	strb	r3, [r5, #0]
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    8b6a:	strb	r3, [r0, #9]
  m_initDone = false;
    8b6c:	strb.w	r3, [r8]
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    8b70:	strb	r3, [r7, #0]
  m_version2 = false;
    8b72:	strb	r3, [r6, #0]
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    8b74:	ldr	r3, [r4, #0]
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    8b76:	ldr	r2, [pc, #556]	; (8da4 <SdioCard::begin(SdioConfig)+0x250>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8b78:	ldr	r0, [pc, #556]	; (8da8 <SdioCard::begin(SdioConfig)+0x254>)
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8b7a:	ldr	r1, [pc, #560]	; (8dac <SdioCard::begin(SdioConfig)+0x258>)
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8b7c:	ldr.w	lr, [pc, #656]	; 8e10 <SdioCard::begin(SdioConfig)+0x2bc>
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    8b80:	orr.w	r3, r3, #201326592	; 0xc000000
    8b84:	str	r3, [r4, #0]
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    8b86:	ldr	r3, [r2, #0]
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8b88:	add.w	r4, r4, #260096	; 0x3f800
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    8b8c:	orr.w	r3, r3, #131072	; 0x20000
    8b90:	str	r3, [r2, #0]
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8b92:	adds	r4, #12
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    8b94:	add.w	r2, r2, #428032	; 0x68800
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8b98:	movw	r3, #259	; 0x103
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    8b9c:	addw	r2, r2, #2044	; 0x7fc
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8ba0:	str	r3, [r0, #0]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8ba2:	str.w	r3, [lr]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8ba6:	str	r3, [r1, #0]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8ba8:	str	r3, [r4, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8baa:	str	r3, [r0, #16]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8bac:	str	r3, [r1, #12]
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    8bae:	ldr	r3, [r2, #0]
    8bb0:	orr.w	r3, r3, #16777216	; 0x1000000
    8bb4:	orr.w	r3, r3, #32768	; 0x8000
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    8bb8:	sub	sp, #68	; 0x44
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    8bba:	str	r3, [r2, #0]

  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    8bbc:	ldr	r3, [r2, #0]
    8bbe:	ldr	r4, [pc, #496]	; (8db0 <SdioCard::begin(SdioConfig)+0x25c>)
    8bc0:	lsls	r1, r3, #7
    8bc2:	bmi.n	8bbc <SdioCard::begin(SdioConfig)+0x68>
  }

  // Set initial SCK rate.
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    8bc4:	mov.w	r0, #400	; 0x190
    8bc8:	bl	81e8 <setSdclk(unsigned long)>
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8bcc:	ldr.w	ip, [pc, #472]	; 8da8 <SdioCard::begin(SdioConfig)+0x254>
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8bd0:	ldr.w	lr, [pc, #572]	; 8e10 <SdioCard::begin(SdioConfig)+0x2bc>
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8bd4:	ldr	r1, [pc, #468]	; (8dac <SdioCard::begin(SdioConfig)+0x258>)
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8bd6:	ldr	r2, [pc, #476]	; (8db4 <SdioCard::begin(SdioConfig)+0x260>)
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8bd8:	ldr	r0, [pc, #476]	; (8db8 <SdioCard::begin(SdioConfig)+0x264>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8bda:	movw	r3, #1091	; 0x443
    8bde:	str.w	r3, [ip]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8be2:	str.w	r3, [lr]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8be6:	mov.w	lr, #1088	; 0x440
    8bea:	str.w	lr, [r1]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8bee:	str	r3, [r2, #0]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    8bf0:	add.w	r2, r2, #409600	; 0x64000
    8bf4:	adds	r2, #40	; 0x28

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8bf6:	str	r3, [r0, #0]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    8bf8:	ldr	r0, [pc, #448]	; (8dbc <SdioCard::begin(SdioConfig)+0x268>)
  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8bfa:	str	r3, [r1, #12]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    8bfc:	str	r0, [r2, #0]

  attachInterruptVector(IRQ_SDHC, sdIrs);
    8bfe:	ldr	r1, [pc, #448]	; (8dc0 <SdioCard::begin(SdioConfig)+0x26c>)
    8c00:	movs	r0, #81	; 0x51
    8c02:	bl	97dc <attachInterruptVector>
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    8c06:	ldr	r3, [pc, #444]	; (8dc4 <SdioCard::begin(SdioConfig)+0x270>)

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    8c08:	ldr	r1, [pc, #444]	; (8dc8 <SdioCard::begin(SdioConfig)+0x274>)
    8c0a:	movs	r0, #96	; 0x60
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    8c0c:	mov.w	r2, #131072	; 0x20000

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    8c10:	strb	r0, [r1, #0]
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    8c12:	str	r2, [r3, #0]

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    8c14:	ldr	r3, [r4, #0]
    8c16:	orr.w	r3, r3, #134217728	; 0x8000000
    8c1a:	str	r3, [r4, #0]
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    8c1c:	ldr	r1, [r4, #0]
    8c1e:	ands.w	r1, r1, #134217728	; 0x8000000
    8c22:	bne.n	8c1c <SdioCard::begin(SdioConfig)+0xc8>
  m_highCapacity = false;
  m_version2 = false;

  // initialize controller.
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    8c24:	mov	r0, r1
    8c26:	bl	83bc <cardCommand(unsigned long, unsigned long)>
    8c2a:	mov	r4, r0
    8c2c:	cmp	r0, #0
    8c2e:	beq.n	8cce <SdioCard::begin(SdioConfig)+0x17a>
    8c30:	movs	r4, #3
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    8c32:	mov.w	r1, #426	; 0x1aa
    8c36:	ldr	r0, [pc, #404]	; (8dcc <SdioCard::begin(SdioConfig)+0x278>)
    8c38:	bl	83bc <cardCommand(unsigned long, unsigned long)>
    8c3c:	cmp	r0, #0
    8c3e:	bne.n	8cfc <SdioCard::begin(SdioConfig)+0x1a8>
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    8c40:	subs	r4, #1
    8c42:	bne.n	8c32 <SdioCard::begin(SdioConfig)+0xde>
      }
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    8c44:	ldrb	r3, [r6, #0]
    8c46:	ldr	r6, [pc, #392]	; (8dd0 <SdioCard::begin(SdioConfig)+0x27c>)
    8c48:	cmp	r3, #0
    8c4a:	it	eq
    8c4c:	moveq.w	r6, #3145728	; 0x300000
  int m = micros();
    8c50:	bl	9828 <micros>
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    8c54:	ldr	r4, [pc, #380]	; (8dd4 <SdioCard::begin(SdioConfig)+0x280>)
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
    8c56:	mov	r9, r0
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8c58:	movs	r1, #0
    8c5a:	ldr	r0, [pc, #380]	; (8dd8 <SdioCard::begin(SdioConfig)+0x284>)
    8c5c:	bl	83bc <cardCommand(unsigned long, unsigned long)>
    8c60:	cbnz	r0, 8c78 <SdioCard::begin(SdioConfig)+0x124>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8c62:	ldr	r2, [pc, #376]	; (8ddc <SdioCard::begin(SdioConfig)+0x288>)
    8c64:	movw	r1, #621	; 0x26d
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8c68:	movs	r3, #23
  m_errorLine = line;
    8c6a:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8c6c:	strb	r3, [r5, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    8c6e:	movs	r4, #0

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    8c70:	mov	r0, r4
    8c72:	add	sp, #68	; 0x44
    8c74:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8c78:	mov	r1, r6
    8c7a:	ldr	r0, [pc, #356]	; (8de0 <SdioCard::begin(SdioConfig)+0x28c>)
    8c7c:	bl	83bc <cardCommand(unsigned long, unsigned long)>
    8c80:	cmp	r0, #0
    8c82:	beq.n	8c62 <SdioCard::begin(SdioConfig)+0x10e>
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    8c84:	bl	9828 <micros>
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    8c88:	ldr	r3, [pc, #344]	; (8de4 <SdioCard::begin(SdioConfig)+0x290>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    8c8a:	ldr	r2, [pc, #328]	; (8dd4 <SdioCard::begin(SdioConfig)+0x280>)
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    8c8c:	rsb	r0, r9, r0
    8c90:	cmp	r0, r3
    8c92:	bhi.n	8c62 <SdioCard::begin(SdioConfig)+0x10e>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    8c94:	ldr	r3, [r4, #0]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    8c96:	cmp	r3, #0
    8c98:	bge.n	8c58 <SdioCard::begin(SdioConfig)+0x104>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
    8c9a:	ldr	r3, [pc, #332]	; (8de8 <SdioCard::begin(SdioConfig)+0x294>)
    8c9c:	ldr	r1, [r2, #0]
    8c9e:	str	r1, [r3, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    8ca0:	ldr	r3, [r2, #0]
    // Is high capacity.
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    8ca2:	ldr	r0, [pc, #328]	; (8dec <SdioCard::begin(SdioConfig)+0x298>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    8ca4:	lsls	r2, r3, #1
    // Is high capacity.
    m_highCapacity = true;
    8ca6:	it	mi
    8ca8:	movmi	r3, #1
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    8caa:	mov.w	r1, #0
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    // Is high capacity.
    m_highCapacity = true;
    8cae:	it	mi
    8cb0:	strbmi	r3, [r7, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    8cb2:	bl	83bc <cardCommand(unsigned long, unsigned long)>
    8cb6:	mov	r4, r0
    8cb8:	cbnz	r0, 8ce2 <SdioCard::begin(SdioConfig)+0x18e>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8cba:	ldr	r2, [pc, #288]	; (8ddc <SdioCard::begin(SdioConfig)+0x288>)
    8cbc:	movw	r1, #630	; 0x276
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8cc0:	movs	r3, #2

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    8cc2:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8cc4:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8cc6:	strb	r3, [r5, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    8cc8:	add	sp, #68	; 0x44
    8cca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8cce:	ldr	r2, [pc, #268]	; (8ddc <SdioCard::begin(SdioConfig)+0x288>)
    8cd0:	mov.w	r1, #604	; 0x25c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8cd4:	movs	r3, #1

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    8cd6:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8cd8:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8cda:	strb	r3, [r5, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    8cdc:	add	sp, #68	; 0x44
    8cde:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    8ce2:	movs	r1, #0
    8ce4:	ldr	r0, [pc, #264]	; (8df0 <SdioCard::begin(SdioConfig)+0x29c>)
    8ce6:	bl	83bc <cardCommand(unsigned long, unsigned long)>
    8cea:	mov	r4, r0
    8cec:	cbnz	r0, 8d1e <SdioCard::begin(SdioConfig)+0x1ca>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8cee:	ldr	r2, [pc, #236]	; (8ddc <SdioCard::begin(SdioConfig)+0x288>)
    8cf0:	movw	r1, #633	; 0x279
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8cf4:	movs	r3, #3
  m_errorLine = line;
    8cf6:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8cf8:	strb	r3, [r5, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
    8cfa:	b.n	8c70 <SdioCard::begin(SdioConfig)+0x11c>
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
    8cfc:	ldr	r3, [pc, #212]	; (8dd4 <SdioCard::begin(SdioConfig)+0x280>)
    8cfe:	ldr	r3, [r3, #0]
    8d00:	cmp.w	r3, #426	; 0x1aa
    8d04:	beq.n	8d16 <SdioCard::begin(SdioConfig)+0x1c2>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8d06:	ldr	r2, [pc, #212]	; (8ddc <SdioCard::begin(SdioConfig)+0x288>)
    8d08:	movw	r1, #610	; 0x262
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d0c:	movs	r3, #6
  m_errorLine = line;
    8d0e:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d10:	strb	r3, [r5, #0]
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
    8d12:	movs	r4, #0
    8d14:	b.n	8c70 <SdioCard::begin(SdioConfig)+0x11c>
      }
      m_version2 = true;
    8d16:	movs	r3, #1
    8d18:	strb	r3, [r6, #0]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    8d1a:	ldr	r6, [pc, #180]	; (8dd0 <SdioCard::begin(SdioConfig)+0x27c>)
    8d1c:	b.n	8c50 <SdioCard::begin(SdioConfig)+0xfc>
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    8d1e:	ldr	r3, [pc, #180]	; (8dd4 <SdioCard::begin(SdioConfig)+0x280>)
    8d20:	ldr	r6, [pc, #208]	; (8df4 <SdioCard::begin(SdioConfig)+0x2a0>)
    8d22:	ldr	r3, [r3, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    8d24:	ldr	r1, [pc, #208]	; (8df8 <SdioCard::begin(SdioConfig)+0x2a4>)
    8d26:	ldr	r0, [pc, #212]	; (8dfc <SdioCard::begin(SdioConfig)+0x2a8>)
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    8d28:	lsrs	r3, r3, #16
    8d2a:	lsls	r3, r3, #16
    8d2c:	str	r3, [r6, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    8d2e:	bl	8438 <readReg16(unsigned long, void*)>
    8d32:	mov	r4, r0
    8d34:	cbnz	r0, 8d44 <SdioCard::begin(SdioConfig)+0x1f0>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8d36:	ldr	r2, [pc, #164]	; (8ddc <SdioCard::begin(SdioConfig)+0x288>)
    8d38:	movw	r1, #638	; 0x27e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d3c:	movs	r3, #7
  m_errorLine = line;
    8d3e:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d40:	strb	r3, [r5, #0]
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
    8d42:	b.n	8c70 <SdioCard::begin(SdioConfig)+0x11c>
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    8d44:	ldr	r1, [pc, #184]	; (8e00 <SdioCard::begin(SdioConfig)+0x2ac>)
    8d46:	ldr	r0, [pc, #188]	; (8e04 <SdioCard::begin(SdioConfig)+0x2b0>)
    8d48:	bl	8438 <readReg16(unsigned long, void*)>
    8d4c:	mov	r4, r0
    8d4e:	cbnz	r0, 8d5e <SdioCard::begin(SdioConfig)+0x20a>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8d50:	ldr	r2, [pc, #136]	; (8ddc <SdioCard::begin(SdioConfig)+0x288>)
    8d52:	movw	r1, #641	; 0x281
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d56:	movs	r3, #8
  m_errorLine = line;
    8d58:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d5a:	strb	r3, [r5, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
    8d5c:	b.n	8c70 <SdioCard::begin(SdioConfig)+0x11c>
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    8d5e:	ldr	r1, [r6, #0]
    8d60:	ldr	r0, [pc, #164]	; (8e08 <SdioCard::begin(SdioConfig)+0x2b4>)
    8d62:	bl	83bc <cardCommand(unsigned long, unsigned long)>
    8d66:	mov	r4, r0
    8d68:	cbnz	r0, 8d78 <SdioCard::begin(SdioConfig)+0x224>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8d6a:	ldr	r2, [pc, #112]	; (8ddc <SdioCard::begin(SdioConfig)+0x288>)
    8d6c:	mov.w	r1, #644	; 0x284
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d70:	movs	r3, #5
  m_errorLine = line;
    8d72:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d74:	strb	r3, [r5, #0]
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
    8d76:	b.n	8c70 <SdioCard::begin(SdioConfig)+0x11c>
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8d78:	ldr	r1, [r6, #0]
    8d7a:	ldr	r0, [pc, #92]	; (8dd8 <SdioCard::begin(SdioConfig)+0x284>)
    8d7c:	bl	83bc <cardCommand(unsigned long, unsigned long)>
    8d80:	cmp	r0, #0
    8d82:	bne.n	8e14 <SdioCard::begin(SdioConfig)+0x2c0>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8d84:	ldr	r2, [pc, #84]	; (8ddc <SdioCard::begin(SdioConfig)+0x288>)
    8d86:	mov.w	r1, #648	; 0x288
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d8a:	movs	r3, #20
  m_errorLine = line;
    8d8c:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d8e:	strb	r3, [r5, #0]
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    8d90:	movs	r4, #0
    8d92:	b.n	8c70 <SdioCard::begin(SdioConfig)+0x11c>
    8d94:	.word	0x1fff097c
    8d98:	.word	0x4000d800
    8d9c:	.word	0x1fff19ac
    8da0:	.word	0x1fff1994
    8da4:	.word	0x40048030
    8da8:	.word	0x4004d000
    8dac:	.word	0x4004d008
    8db0:	.word	0x400b102c
    8db4:	.word	0x4004d00c
    8db8:	.word	0x4004d010
    8dbc:	.word	0x117f000b
    8dc0:	.word	0x00008145
    8dc4:	.word	0xe000e108
    8dc8:	.word	0xe000e451
    8dcc:	.word	0x081a0000
    8dd0:	.word	0x40300000
    8dd4:	.word	0x400b1010
    8dd8:	.word	0x371a0000
    8ddc:	.word	0x1fff19d8
    8de0:	.word	0x29020000
    8de4:	.word	0x000f4240
    8de8:	.word	0x1fff19b0
    8dec:	.word	0x02090000
    8df0:	.word	0x031a0000
    8df4:	.word	0x1fff19b4
    8df8:	.word	0x1fff19c0
    8dfc:	.word	0x09090000
    8e00:	.word	0x1fff1998
    8e04:	.word	0x0a090000
    8e08:	.word	0x071b0000
    8e0c:	.word	0x1fff19bc
    8e10:	.word	0x4004d004
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8e14:	movs	r1, #2
    8e16:	ldr	r0, [pc, #168]	; (8ec0 <SdioCard::begin(SdioConfig)+0x36c>)
    8e18:	bl	83bc <cardCommand(unsigned long, unsigned long)>
    8e1c:	mov	r4, r0
    8e1e:	cmp	r0, #0
    8e20:	beq.n	8d84 <SdioCard::begin(SdioConfig)+0x230>
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    8e22:	ldr	r3, [pc, #160]	; (8ec4 <SdioCard::begin(SdioConfig)+0x370>)
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    8e24:	ldr	r0, [pc, #160]	; (8ec8 <SdioCard::begin(SdioConfig)+0x374>)
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    8e26:	ldr	r2, [r3, #0]
    8e28:	bic.w	r2, r2, #6
    8e2c:	str	r2, [r3, #0]
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    8e2e:	ldr	r2, [r3, #0]

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    8e30:	mov.w	r5, #1048592	; 0x100010
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    8e34:	orr.w	r2, r2, #2
    8e38:	str	r2, [r3, #0]
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    8e3a:	mov	r1, sp
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    8e3c:	str	r5, [r0, #0]

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    8e3e:	mvn.w	r0, #4278190080	; 0xff000000
    8e42:	bl	8aa8 <cardCMD6(unsigned long, unsigned char*)>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    8e46:	cbz	r0, 8e50 <SdioCard::begin(SdioConfig)+0x2fc>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    8e48:	ldrb.w	r3, [sp, #13]
    8e4c:	lsls	r3, r3, #30
    8e4e:	bmi.n	8ea2 <SdioCard::begin(SdioConfig)+0x34e>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    kHzSdClk = 50000;
  } else {
    kHzSdClk = 25000;
    8e50:	movw	r0, #25000	; 0x61a8
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8e54:	ldr.w	fp, [pc, #132]	; 8edc <SdioCard::begin(SdioConfig)+0x388>
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8e58:	ldr.w	sl, [pc, #132]	; 8ee0 <SdioCard::begin(SdioConfig)+0x38c>
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8e5c:	ldr.w	r9, [pc, #132]	; 8ee4 <SdioCard::begin(SdioConfig)+0x390>
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8e60:	ldr	r7, [pc, #104]	; (8ecc <SdioCard::begin(SdioConfig)+0x378>)
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8e62:	ldr	r6, [pc, #108]	; (8ed0 <SdioCard::begin(SdioConfig)+0x37c>)
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8e64:	ldr	r5, [pc, #108]	; (8ed4 <SdioCard::begin(SdioConfig)+0x380>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8e66:	movw	r3, #259	; 0x103
    8e6a:	str.w	r3, [fp]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8e6e:	str.w	r3, [sl]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8e72:	str.w	r3, [r9]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8e76:	str	r3, [r7, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8e78:	str	r3, [r6, #0]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8e7a:	str	r3, [r5, #0]
  }
  // Disable GPIO.
  enableGPIO(false);

  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);
    8e7c:	bl	81e8 <setSdclk(unsigned long)>
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8e80:	movw	r3, #1091	; 0x443
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8e84:	mov.w	r1, #1088	; 0x440
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    8e88:	movs	r2, #1
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8e8a:	str.w	r3, [fp]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8e8e:	str.w	r3, [sl]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8e92:	str.w	r1, [r9]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8e96:	str	r3, [r7, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8e98:	str	r3, [r6, #0]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8e9a:	str	r3, [r5, #0]
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    8e9c:	strb.w	r2, [r8]
  return true;
    8ea0:	b.n	8c70 <SdioCard::begin(SdioConfig)+0x11c>

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    8ea2:	mov	r1, sp
    8ea4:	ldr	r0, [pc, #48]	; (8ed8 <SdioCard::begin(SdioConfig)+0x384>)
    8ea6:	bl	8aa8 <cardCMD6(unsigned long, unsigned char*)>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    8eaa:	cmp	r0, #0
    8eac:	beq.n	8e50 <SdioCard::begin(SdioConfig)+0x2fc>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    8eae:	ldrb.w	r3, [sp, #16]
    8eb2:	and.w	r3, r3, #15
    8eb6:	cmp	r3, #1
    8eb8:	bne.n	8e50 <SdioCard::begin(SdioConfig)+0x2fc>
    kHzSdClk = 50000;
    8eba:	movw	r0, #50000	; 0xc350
    8ebe:	b.n	8e54 <SdioCard::begin(SdioConfig)+0x300>
    8ec0:	.word	0x061a0000
    8ec4:	.word	0x400b1028
    8ec8:	.word	0x400b1044
    8ecc:	.word	0x4004d00c
    8ed0:	.word	0x4004d010
    8ed4:	.word	0x4004d014
    8ed8:	.word	0x80fffff1
    8edc:	.word	0x4004d000
    8ee0:	.word	0x4004d004
    8ee4:	.word	0x4004d008

00008ee8 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    8ee8:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    8eea:	ldr	r3, [pc, #160]	; (8f8c <SdioCard::readData(unsigned char*)+0xa4>)
    8eec:	ldr	r3, [r3, #0]
    8eee:	lsls	r0, r3, #22
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    8ef0:	mov	r5, r1
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    8ef2:	bmi.n	8f12 <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8ef4:	ldr	r3, [pc, #152]	; (8f90 <SdioCard::readData(unsigned char*)+0xa8>)
    8ef6:	ldr	r2, [r3, #0]
    8ef8:	bic.w	r2, r2, #65536	; 0x10000
    8efc:	str	r2, [r3, #0]
    noInterrupts();
    8efe:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    8f00:	ldr	r2, [r3, #0]
    8f02:	orr.w	r2, r2, #131072	; 0x20000
    8f06:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8f08:	ldr	r2, [r3, #0]
    8f0a:	orr.w	r2, r2, #65536	; 0x10000
    8f0e:	str	r2, [r3, #0]
    interrupts();
    8f10:	cpsie	i
  }
  if (waitTimeout(isBusyFifoRead)) {
    8f12:	ldr	r0, [pc, #128]	; (8f94 <SdioCard::readData(unsigned char*)+0xac>)
    8f14:	bl	8318 <waitTimeout(bool (*)())>
    8f18:	cmp	r0, #0
    8f1a:	bne.n	8f7a <SdioCard::readData(unsigned char*)+0x92>
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    8f1c:	ldr	r4, [pc, #108]	; (8f8c <SdioCard::readData(unsigned char*)+0xa4>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    8f1e:	ldr	r0, [pc, #120]	; (8f98 <SdioCard::readData(unsigned char*)+0xb0>)
    8f20:	subs	r3, r5, #4
    8f22:	add.w	r5, r5, #508	; 0x1fc
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    8f26:	ldr	r2, [r4, #0]
    8f28:	lsls	r1, r2, #20
    8f2a:	bpl.n	8f26 <SdioCard::readData(unsigned char*)+0x3e>
    8f2c:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    8f30:	ldr	r2, [r0, #0]
    8f32:	str.w	r2, [r3, #4]!
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    8f36:	cmp	r1, r3
    8f38:	bne.n	8f30 <SdioCard::readData(unsigned char*)+0x48>
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    8f3a:	cmp	r5, r1
    8f3c:	mov	r3, r1
    8f3e:	bne.n	8f26 <SdioCard::readData(unsigned char*)+0x3e>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    8f40:	ldr	r0, [pc, #88]	; (8f9c <SdioCard::readData(unsigned char*)+0xb4>)
    8f42:	bl	8318 <waitTimeout(bool (*)())>
    8f46:	cbnz	r0, 8f68 <SdioCard::readData(unsigned char*)+0x80>
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    8f48:	ldr	r2, [pc, #84]	; (8fa0 <SdioCard::readData(unsigned char*)+0xb8>)
    8f4a:	ldr	r3, [pc, #88]	; (8fa4 <SdioCard::readData(unsigned char*)+0xbc>)
    8f4c:	ldr	r1, [r2, #0]
    8f4e:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    8f50:	ldr	r1, [r3, #0]
    8f52:	str	r1, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8f54:	ldr	r2, [r3, #0]
    8f56:	lsls	r2, r2, #30
    8f58:	bpl.n	8f8a <SdioCard::readData(unsigned char*)+0xa2>
    8f5a:	ldr	r3, [r3, #0]
    8f5c:	ldr	r0, [pc, #72]	; (8fa8 <SdioCard::readData(unsigned char*)+0xc0>)
    8f5e:	ands	r0, r3
    8f60:	clz	r0, r0
    8f64:	lsrs	r0, r0, #5
    8f66:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f68:	ldr	r1, [pc, #64]	; (8fac <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    8f6a:	ldr	r3, [pc, #68]	; (8fb0 <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f6c:	movs	r0, #29
  m_errorLine = line;
    8f6e:	movw	r2, #759	; 0x2f7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f72:	strb	r0, [r1, #0]
  m_errorLine = line;
    8f74:	str	r2, [r3, #0]
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    8f76:	movs	r0, #0
    8f78:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f7a:	ldr	r1, [pc, #48]	; (8fac <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    8f7c:	ldr	r3, [pc, #48]	; (8fb0 <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f7e:	movs	r0, #26
  m_errorLine = line;
    8f80:	mov.w	r2, #748	; 0x2ec
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f84:	strb	r0, [r1, #0]
  m_errorLine = line;
    8f86:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    8f88:	movs	r0, #0
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    8f8a:	pop	{r3, r4, r5, pc}
    8f8c:	.word	0x400b1024
    8f90:	.word	0x400b1028
    8f94:	.word	0x000081a9
    8f98:	.word	0x400b1020
    8f9c:	.word	0x000081d1
    8fa0:	.word	0x400b1030
    8fa4:	.word	0x1fff19b8
    8fa8:	.word	0x117f0000
    8fac:	.word	0x1fff097c
    8fb0:	.word	0x1fff19d8

00008fb4 <SdioCard::readStart(unsigned long)>:
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    8fb4:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    8fb6:	ldr	r0, [pc, #80]	; (9008 <SdioCard::readStart(unsigned long)+0x54>)
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    8fb8:	mov	r4, r1
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    8fba:	bl	8340 <yieldTimeout(bool (*)())>
    8fbe:	cbnz	r0, 8ff4 <SdioCard::readStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8fc0:	ldr	r2, [pc, #72]	; (900c <SdioCard::readStart(unsigned long)+0x58>)
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8fc2:	ldr	r1, [pc, #76]	; (9010 <SdioCard::readStart(unsigned long)+0x5c>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8fc4:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    8fc6:	ldr	r0, [pc, #76]	; (9014 <SdioCard::readStart(unsigned long)+0x60>)
    8fc8:	ldr	r5, [pc, #76]	; (9018 <SdioCard::readStart(unsigned long)+0x64>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8fca:	orr.w	r3, r3, #65536	; 0x10000
    8fce:	str	r3, [r2, #0]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8fd0:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    8fd2:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8fd4:	cbnz	r3, 8ff0 <SdioCard::readStart(unsigned long)+0x3c>
    8fd6:	lsls	r1, r4, #9
    8fd8:	ldr	r0, [pc, #64]	; (901c <SdioCard::readStart(unsigned long)+0x68>)
    8fda:	bl	83bc <cardCommand(unsigned long, unsigned long)>
    8fde:	cbnz	r0, 8fee <SdioCard::readStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8fe0:	ldr	r1, [pc, #60]	; (9020 <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    8fe2:	ldr	r3, [pc, #64]	; (9024 <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8fe4:	movs	r4, #12
  m_errorLine = line;
    8fe6:	mov.w	r2, #848	; 0x350
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8fea:	strb	r4, [r1, #0]
  m_errorLine = line;
    8fec:	str	r2, [r3, #0]

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD18);
  }
  return true;
}
    8fee:	pop	{r3, r4, r5, pc}
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8ff0:	mov	r1, r4
    8ff2:	b.n	8fd8 <SdioCard::readStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8ff4:	ldr	r1, [pc, #40]	; (9020 <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    8ff6:	ldr	r3, [pc, #44]	; (9024 <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8ff8:	movs	r0, #10
  m_errorLine = line;
    8ffa:	mov.w	r2, #836	; 0x344
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8ffe:	strb	r0, [r1, #0]
  m_errorLine = line;
    9000:	str	r2, [r3, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    9002:	movs	r0, #0
    9004:	pop	{r3, r4, r5, pc}
    9006:	nop
    9008:	.word	0x0000849d
    900c:	.word	0x400b1028
    9010:	.word	0x1fff19ac
    9014:	.word	0x400b1004
    9018:	.word	0xffff0200
    901c:	.word	0x123a0032
    9020:	.word	0x1fff097c
    9024:	.word	0x1fff19d8

00009028 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    9028:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    902a:	ldrb	r3, [r0, #8]
    902c:	lsls	r4, r3, #31
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    902e:	sub.w	sp, sp, #512	; 0x200
    9032:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    9034:	bpl.n	905c <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    9036:	lsls	r3, r2, #30
    9038:	beq.n	907a <SdioCard::readSector(unsigned long, unsigned char*)+0x52>

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    903a:	mov	r2, sp
    903c:	movs	r3, #1
    903e:	ldr	r0, [pc, #168]	; (90e8 <SdioCard::readSector(unsigned long, unsigned char*)+0xc0>)
    9040:	bl	8504 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9044:	cbz	r0, 9086 <SdioCard::readSector(unsigned long, unsigned char*)+0x5e>
      return sdError(SD_CARD_ERROR_CMD17);
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    9046:	mov	r1, sp
    9048:	mov	r0, r5
    904a:	mov.w	r2, #512	; 0x200
    904e:	bl	9280 <memcpy>
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
    9052:	movs	r5, #1
}
    9054:	mov	r0, r5
    9056:	add.w	sp, sp, #512	; 0x200
    905a:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    905c:	ldrb	r3, [r0, #9]
    905e:	cmp	r3, #1
    9060:	mov	r4, r0
    9062:	mov	r6, r1
    9064:	beq.n	909e <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
      if (!syncDevice()) {
    9066:	ldr	r3, [r4, #0]
    9068:	mov	r0, r4
    906a:	ldr	r3, [r3, #20]
    906c:	blx	r3
    906e:	cbnz	r0, 90c4 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
        return false;
    9070:	movs	r5, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    9072:	mov	r0, r5
    9074:	add.w	sp, sp, #512	; 0x200
    9078:	pop	{r4, r5, r6, pc}
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    907a:	movs	r3, #1
    907c:	ldr	r0, [pc, #104]	; (90e8 <SdioCard::readSector(unsigned long, unsigned char*)+0xc0>)
    907e:	bl	8504 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9082:	cmp	r0, #0
    9084:	bne.n	9052 <SdioCard::readSector(unsigned long, unsigned char*)+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9086:	ldr	r1, [pc, #100]	; (90ec <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>)
  m_errorLine = line;
    9088:	ldr	r3, [pc, #100]	; (90f0 <SdioCard::readSector(unsigned long, unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    908a:	movs	r0, #11
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD17);
    908c:	movs	r5, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    908e:	movw	r2, #778	; 0x30a
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9092:	strb	r0, [r1, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    9094:	mov	r0, r5
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    9096:	str	r2, [r3, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    9098:	add.w	sp, sp, #512	; 0x200
    909c:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    909e:	ldr	r3, [r0, #4]
    90a0:	cmp	r1, r3
    90a2:	bne.n	9066 <SdioCard::readSector(unsigned long, unsigned char*)+0x3e>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    }
    if (!readData(dst)) {
    90a4:	mov	r1, r5
    90a6:	mov	r0, r4
    90a8:	bl	8ee8 <SdioCard::readData(unsigned char*)>
    90ac:	mov	r5, r0
    90ae:	cmp	r0, #0
    90b0:	beq.n	9070 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    90b2:	ldr	r3, [pc, #64]	; (90f4 <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>)
    90b4:	ldr	r3, [r3, #0]
    90b6:	lsrs	r3, r3, #16
    90b8:	lsls	r3, r3, #16
    90ba:	cbz	r3, 90d8 <SdioCard::readSector(unsigned long, unsigned char*)+0xb0>
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
    90bc:	ldr	r3, [r4, #4]
    90be:	adds	r3, #1
    90c0:	str	r3, [r4, #4]
    90c2:	b.n	9072 <SdioCard::readSector(unsigned long, unsigned char*)+0x4a>
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
      if (!syncDevice()) {
        return false;
      }
      if (!readStart(sector)) {
    90c4:	mov	r1, r6
    90c6:	mov	r0, r4
    90c8:	bl	8fb4 <SdioCard::readStart(unsigned long)>
    90cc:	cmp	r0, #0
    90ce:	beq.n	9070 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    90d0:	movs	r3, #1
        return false;
      }
      if (!readStart(sector)) {
        return false;
      }
      m_curSector = sector;
    90d2:	str	r6, [r4, #4]
      m_curState = READ_STATE;
    90d4:	strb	r3, [r4, #9]
    90d6:	b.n	90a4 <SdioCard::readSector(unsigned long, unsigned char*)+0x7c>
    if (!readData(dst)) {
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
      if (!syncDevice()) {
    90d8:	ldr	r3, [r4, #0]
    90da:	mov	r0, r4
    90dc:	ldr	r3, [r3, #20]
    90de:	blx	r3
    90e0:	cmp	r0, #0
    90e2:	bne.n	90bc <SdioCard::readSector(unsigned long, unsigned char*)+0x94>
    90e4:	b.n	9070 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
    90e6:	nop
    90e8:	.word	0x113a0011
    90ec:	.word	0x1fff097c
    90f0:	.word	0x1fff19d8
    90f4:	.word	0x400b1004

000090f8 <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    90f8:	push	{r4}
  m_spi->beginTransaction(m_spiSettings);
    90fa:	ldr	r3, [r0, #0]
    90fc:	ldr	r2, [r0, #4]

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    90fe:	ldrb	r1, [r3, #11]
    9100:	cbz	r1, 9142 <SdSpiArduinoDriver::activate()+0x4a>
			__disable_irq();
    9102:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    9104:	ldrb	r1, [r3, #11]
    9106:	lsls	r0, r1, #31
    9108:	bpl.n	9118 <SdSpiArduinoDriver::activate()+0x20>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    910a:	ldr	r0, [pc, #100]	; (9170 <SdSpiArduinoDriver::activate()+0x78>)
    910c:	ldr	r1, [r3, #12]
    910e:	ldr	r4, [r0, #0]
    9110:	ands	r1, r4
    9112:	str	r1, [r3, #28]
				NVIC_ICER0 = interruptSave[0];
    9114:	str	r1, [r0, #0]
    9116:	ldrb	r1, [r3, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    9118:	lsls	r4, r1, #30
    911a:	bpl.n	912a <SdSpiArduinoDriver::activate()+0x32>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    911c:	ldr	r0, [pc, #84]	; (9174 <SdSpiArduinoDriver::activate()+0x7c>)
    911e:	ldr	r1, [r3, #16]
    9120:	ldr	r4, [r0, #0]
    9122:	ands	r1, r4
    9124:	str	r1, [r3, #32]
				NVIC_ICER1 = interruptSave[1];
    9126:	str	r1, [r0, #0]
    9128:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    912a:	lsls	r0, r1, #29
    912c:	bpl.n	913c <SdSpiArduinoDriver::activate()+0x44>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    912e:	ldr	r0, [pc, #72]	; (9178 <SdSpiArduinoDriver::activate()+0x80>)
    9130:	ldr	r1, [r3, #20]
    9132:	ldr	r4, [r0, #0]
    9134:	ands	r1, r4
    9136:	str	r1, [r3, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    9138:	str	r1, [r0, #0]
    913a:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    913c:	lsls	r1, r1, #28
    913e:	bmi.n	9160 <SdSpiArduinoDriver::activate()+0x68>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    9140:	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    9142:	ldr	r3, [r3, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    9144:	ldr	r1, [r3, #12]
    9146:	cmp	r1, r2
    9148:	beq.n	915a <SdSpiArduinoDriver::activate()+0x62>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    914a:	ldr	r0, [pc, #48]	; (917c <SdSpiArduinoDriver::activate()+0x84>)
    914c:	str	r0, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    914e:	ldr	r1, [pc, #48]	; (9180 <SdSpiArduinoDriver::activate()+0x88>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    9150:	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    9152:	orr.w	r0, r2, #1073741824	; 0x40000000
    9156:	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    9158:	str	r1, [r3, #0]
}
    915a:	ldr.w	r4, [sp], #4
    915e:	bx	lr
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    9160:	ldr	r0, [pc, #32]	; (9184 <SdSpiArduinoDriver::activate()+0x8c>)
    9162:	ldr	r1, [r3, #24]
    9164:	ldr	r4, [r0, #0]
    9166:	ands	r1, r4
    9168:	str	r1, [r3, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    916a:	str	r1, [r0, #0]
    916c:	b.n	9140 <SdSpiArduinoDriver::activate()+0x48>
    916e:	nop
    9170:	.word	0xe000e180
    9174:	.word	0xe000e184
    9178:	.word	0xe000e188
    917c:	.word	0x003f4001
    9180:	.word	0x803f0000
    9184:	.word	0xe000e18c

00009188 <SdSpiArduinoDriver::deactivate()>:
  }
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    9188:	ldr	r2, [r0, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    918a:	ldrb	r3, [r2, #11]
    918c:	cbz	r3, 91bc <SdSpiArduinoDriver::deactivate()+0x34>
			if (interruptMasksUsed & 0x01) {
    918e:	lsls	r1, r3, #31
    9190:	bpl.n	919a <SdSpiArduinoDriver::deactivate()+0x12>
				NVIC_ISER0 = interruptSave[0];
    9192:	ldr	r3, [pc, #44]	; (91c0 <SdSpiArduinoDriver::deactivate()+0x38>)
    9194:	ldr	r1, [r2, #28]
    9196:	str	r1, [r3, #0]
    9198:	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    919a:	lsls	r0, r3, #30
    919c:	bpl.n	91a6 <SdSpiArduinoDriver::deactivate()+0x1e>
				NVIC_ISER1 = interruptSave[1];
    919e:	ldr	r3, [pc, #36]	; (91c4 <SdSpiArduinoDriver::deactivate()+0x3c>)
    91a0:	ldr	r1, [r2, #32]
    91a2:	str	r1, [r3, #0]
    91a4:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    91a6:	lsls	r1, r3, #29
    91a8:	bpl.n	91b2 <SdSpiArduinoDriver::deactivate()+0x2a>
				NVIC_ISER2 = interruptSave[2];
    91aa:	ldr	r3, [pc, #28]	; (91c8 <SdSpiArduinoDriver::deactivate()+0x40>)
    91ac:	ldr	r1, [r2, #36]	; 0x24
    91ae:	str	r1, [r3, #0]
    91b0:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    91b2:	lsls	r3, r3, #28
    91b4:	bpl.n	91bc <SdSpiArduinoDriver::deactivate()+0x34>
				NVIC_ISER3 = interruptSave[3];
    91b6:	ldr	r3, [pc, #20]	; (91cc <SdSpiArduinoDriver::deactivate()+0x44>)
    91b8:	ldr	r2, [r2, #40]	; 0x28
    91ba:	str	r2, [r3, #0]
    91bc:	bx	lr
    91be:	nop
    91c0:	.word	0xe000e100
    91c4:	.word	0xe000e104
    91c8:	.word	0xe000e108
    91cc:	.word	0xe000e10c

000091d0 <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
    91d0:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    91d2:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    91d4:	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    91d8:	movs	r3, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    91da:	str	r1, [r2, #44]	; 0x2c
		port().PUSHR = data;
    91dc:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    91de:	ldr	r3, [r2, #44]	; 0x2c
    91e0:	cmp	r3, #0
    91e2:	bge.n	91de <SdSpiArduinoDriver::receive()+0xe>
		return port().POPR;
    91e4:	ldr	r0, [r2, #56]	; 0x38
  return m_spi->transfer(0XFF);
}
    91e6:	uxtb	r0, r0
    91e8:	bx	lr
    91ea:	nop

000091ec <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    91ec:	push	{r4, r5, r6, lr}
    91ee:	mov	r5, r0
    91f0:	mov	r4, r1
    91f2:	mov	r6, r2
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    91f4:	mov	r0, r1
    91f6:	movs	r1, #255	; 0xff
    91f8:	bl	c07c <memset>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    91fc:	ldr	r0, [r5, #0]
    91fe:	mov	r3, r6
    9200:	mov	r2, r4
    9202:	mov	r1, r4
    9204:	bl	3580 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    9208:	movs	r0, #0
    920a:	pop	{r4, r5, r6, pc}

0000920c <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
    920c:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    920e:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    9210:	mov.w	r3, #2147483648	; 0x80000000
    9214:	str	r3, [r2, #44]	; 0x2c
		port().PUSHR = data;
    9216:	str	r1, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    9218:	ldr	r3, [r2, #44]	; 0x2c
    921a:	cmp	r3, #0
    921c:	bge.n	9218 <SdSpiArduinoDriver::send(unsigned char)+0xc>
		return port().POPR;
    921e:	ldr	r3, [r2, #56]	; 0x38
    9220:	bx	lr
    9222:	nop

00009224 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    9224:	push	{r4, r5, lr}
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    9226:	subs	r5, r2, #1
    9228:	cmp.w	r5, #512	; 0x200
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    922c:	sub.w	sp, sp, #516	; 0x204
    9230:	mov	r3, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    9232:	bcc.n	925a <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    9234:	cbz	r2, 9254 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
    9236:	ldr	r2, [r0, #0]
    9238:	ldr	r2, [r2, #0]
    923a:	adds	r0, r1, r3
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    923c:	mov.w	r4, #2147483648	; 0x80000000
    m_spi->transfer(buf[i]);
    9240:	ldrb.w	r3, [r1], #1
    9244:	str	r4, [r2, #44]	; 0x2c
		port().PUSHR = data;
    9246:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    9248:	ldr	r3, [r2, #44]	; 0x2c
    924a:	cmp	r3, #0
    924c:	bge.n	9248 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x24>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    924e:	cmp	r1, r0
		return port().POPR;
    9250:	ldr	r3, [r2, #56]	; 0x38
    9252:	bne.n	9240 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    9254:	add.w	sp, sp, #516	; 0x204
    9258:	pop	{r4, r5, pc}
    925a:	mov	r5, r0
    925c:	mov	r4, r2
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    memcpy(tmp, buf, count);
    925e:	mov	r0, sp
    9260:	bl	9280 <memcpy>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    9264:	mov	r3, r4
    9266:	mov	r2, sp
    9268:	mov	r1, sp
    926a:	ldr	r0, [r5, #0]
    926c:	bl	3580 <SPIClass::transfer(void const*, void*, unsigned int)>
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    m_spi->transfer(buf[i]);
  }
}
    9270:	add.w	sp, sp, #516	; 0x204
    9274:	pop	{r4, r5, pc}
    9276:	nop

00009278 <sdCsWrite(unsigned char, bool)>:
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    9278:	b.w	9810 <digitalWrite>

0000927c <usb_mtp_configure>:
		if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
		return 0;
	}

#else
	void usb_mtp_configure(void) {}
    927c:	bx	lr
    927e:	nop

00009280 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    9280:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    9282:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    9286:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    928a:	bne.n	9368 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    928c:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    928e:	bcc.n	9314 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9290:	ldr.w	r3, [r1], #4
    9294:	str.w	r3, [r0], #4
    9298:	ldr.w	r3, [r1], #4
    929c:	str.w	r3, [r0], #4
    92a0:	ldr.w	r3, [r1], #4
    92a4:	str.w	r3, [r0], #4
    92a8:	ldr.w	r3, [r1], #4
    92ac:	str.w	r3, [r0], #4
    92b0:	ldr.w	r3, [r1], #4
    92b4:	str.w	r3, [r0], #4
    92b8:	ldr.w	r3, [r1], #4
    92bc:	str.w	r3, [r0], #4
    92c0:	ldr.w	r3, [r1], #4
    92c4:	str.w	r3, [r0], #4
    92c8:	ldr.w	r3, [r1], #4
    92cc:	str.w	r3, [r0], #4
    92d0:	ldr.w	r3, [r1], #4
    92d4:	str.w	r3, [r0], #4
    92d8:	ldr.w	r3, [r1], #4
    92dc:	str.w	r3, [r0], #4
    92e0:	ldr.w	r3, [r1], #4
    92e4:	str.w	r3, [r0], #4
    92e8:	ldr.w	r3, [r1], #4
    92ec:	str.w	r3, [r0], #4
    92f0:	ldr.w	r3, [r1], #4
    92f4:	str.w	r3, [r0], #4
    92f8:	ldr.w	r3, [r1], #4
    92fc:	str.w	r3, [r0], #4
    9300:	ldr.w	r3, [r1], #4
    9304:	str.w	r3, [r0], #4
    9308:	ldr.w	r3, [r1], #4
    930c:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9310:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    9312:	bcs.n	9290 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    9314:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    9316:	bcc.n	933c <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9318:	ldr.w	r3, [r1], #4
    931c:	str.w	r3, [r0], #4
    9320:	ldr.w	r3, [r1], #4
    9324:	str.w	r3, [r0], #4
    9328:	ldr.w	r3, [r1], #4
    932c:	str.w	r3, [r0], #4
    9330:	ldr.w	r3, [r1], #4
    9334:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    9338:	subs	r2, #16
	bhs	.Lmid_block_loop
    933a:	bcs.n	9318 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    933c:	adds	r2, #12
	blo	.Lcopy_less_than_4
    933e:	bcc.n	934c <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    9340:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    9344:	str.w	r3, [r0], #4
	subs	r2, #4
    9348:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    934a:	bcs.n	9340 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    934c:	adds	r2, #4
	beq	.Ldone
    934e:	beq.n	9362 <memcpy+0xe2>

	lsls	r2, r2, #31
    9350:	lsls	r2, r2, #31
	itt ne
    9352:	itt	ne
	ldrbne  r3, [r1], #1
    9354:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9358:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    935c:	bcc.n	9362 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    935e:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    9360:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    9362:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    9364:	bx	lr
    9366:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    9368:	cmp	r2, #8
	blo	.Lbyte_copy
    936a:	bcc.n	9394 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    936c:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    936e:	beq.n	928c <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    9370:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    9374:	beq.n	928c <memcpy+0xc>

	rsb	r3, #4
    9376:	rsb	r3, r3, #4
	subs	r2, r3
    937a:	subs	r2, r2, r3

	lsls    r3, r3, #31
    937c:	lsls	r3, r3, #31
	itt ne
    937e:	itt	ne
	ldrbne  r3, [r1], #1
    9380:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9384:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    9388:	bcc.n	928c <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    938a:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    938e:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    9392:	b.n	928c <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    9394:	subs	r2, #4
	blo	.Lcopy_less_than_4
    9396:	bcc.n	934c <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    9398:	subs	r2, #1
	ldrb    r3, [r1], #1
    939a:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    939e:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    93a2:	bcs.n	9398 <memcpy+0x118>

	ldrb	r3, [r1]
    93a4:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    93a6:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    93a8:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    93aa:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    93ac:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    93ae:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    93b0:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    93b2:	bx	lr

000093b4 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    93b4:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    93b6:	ldr	r5, [pc, #60]	; (93f4 <usb_serial_getchar+0x40>)
    93b8:	ldr	r0, [r5, #0]
    93ba:	cbz	r0, 93dc <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    93bc:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    93be:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    93c0:	adds	r1, r0, r3
    93c2:	adds	r3, #1
	if (i >= rx_packet->len) {
    93c4:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    93c6:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    93c8:	bcs.n	93d0 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    93ca:	strh	r3, [r0, #2]
	}
	return c;
    93cc:	mov	r0, r4
}
    93ce:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    93d0:	bl	9ab4 <usb_free>
		rx_packet = NULL;
    93d4:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    93d6:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    93d8:	str	r3, [r5, #0]
    93da:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    93dc:	ldr	r3, [pc, #24]	; (93f8 <usb_serial_getchar+0x44>)
    93de:	ldrb	r3, [r3, #0]
    93e0:	cbz	r3, 93ee <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    93e2:	movs	r0, #2
    93e4:	bl	9b00 <usb_rx>
    93e8:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    93ea:	cmp	r0, #0
    93ec:	bne.n	93bc <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    93ee:	mov.w	r0, #4294967295
    93f2:	pop	{r3, r4, r5, pc}
    93f4:	.word	0x1fff19e8
    93f8:	.word	0x1fff1af4

000093fc <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    93fc:	push	{r4, lr}
	if (!rx_packet) {
    93fe:	ldr	r4, [pc, #36]	; (9424 <usb_serial_peekchar+0x28>)
    9400:	ldr	r0, [r4, #0]
    9402:	cbz	r0, 940c <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    9404:	ldrh	r3, [r0, #2]
    9406:	add	r0, r3
    9408:	ldrb	r0, [r0, #8]
}
    940a:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    940c:	ldr	r3, [pc, #24]	; (9428 <usb_serial_peekchar+0x2c>)
    940e:	ldrb	r3, [r3, #0]
    9410:	cbz	r3, 941e <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    9412:	movs	r0, #2
    9414:	bl	9b00 <usb_rx>
    9418:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    941a:	cmp	r0, #0
    941c:	bne.n	9404 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    941e:	mov.w	r0, #4294967295
    9422:	pop	{r4, pc}
    9424:	.word	0x1fff19e8
    9428:	.word	0x1fff1af4

0000942c <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    942c:	ldr	r3, [pc, #16]	; (9440 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    942e:	ldr	r2, [pc, #20]	; (9444 <usb_serial_available+0x18>)
    9430:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    9432:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    9434:	cbz	r3, 943e <usb_serial_available+0x12>
    9436:	ldrh	r2, [r3, #0]
    9438:	ldrh	r3, [r3, #2]
    943a:	subs	r3, r2, r3
    943c:	add	r0, r3
	return count;
}
    943e:	bx	lr
    9440:	.word	0x1fff19e8
    9444:	.word	0x1fff1b70

00009448 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    9448:	ldr	r3, [pc, #44]	; (9478 <usb_serial_flush_input+0x30>)
    944a:	ldrb	r3, [r3, #0]
    944c:	cbz	r3, 9476 <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    944e:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    9450:	ldr	r4, [pc, #40]	; (947c <usb_serial_flush_input+0x34>)
    9452:	ldr	r0, [r4, #0]
    9454:	cbz	r0, 946a <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    9456:	bl	9ab4 <usb_free>
		rx_packet = NULL;
    945a:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    945c:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    945e:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    9460:	bl	9b00 <usb_rx>
		if (!rx) break;
    9464:	cbz	r0, 9474 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    9466:	bl	9ab4 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    946a:	movs	r0, #2
    946c:	bl	9b00 <usb_rx>
		if (!rx) break;
    9470:	cmp	r0, #0
    9472:	bne.n	9466 <usb_serial_flush_input+0x1e>
    9474:	pop	{r4, pc}
    9476:	bx	lr
    9478:	.word	0x1fff1af4
    947c:	.word	0x1fff19e8

00009480 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    9480:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    9484:	ldr.w	r9, [pc, #248]	; 9580 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    9488:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    948a:	movs	r2, #1
    948c:	strb.w	r2, [r9]
	while (size > 0) {
    9490:	str	r1, [sp, #4]
    9492:	cbz	r1, 94f0 <usb_serial_write+0x70>
    9494:	ldr.w	r8, [pc, #236]	; 9584 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    9498:	ldr	r7, [pc, #216]	; (9574 <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    949a:	ldr	r6, [sp, #4]
    949c:	mov	fp, r0
		if (!tx_packet) {
    949e:	ldr.w	r0, [r8]
    94a2:	cbz	r0, 9512 <usb_serial_write+0x92>
    94a4:	ldr	r5, [pc, #208]	; (9578 <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    94a6:	ldrh	r4, [r0, #2]
    94a8:	rsb	r1, r4, #64	; 0x40
    94ac:	cmp	r1, r6
    94ae:	it	cs
    94b0:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    94b2:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    94b6:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    94b8:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    94bc:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    94be:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    94c0:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    94c4:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    94c8:	cbz	r1, 94e0 <usb_serial_write+0x60>
    94ca:	subs	r4, #1
    94cc:	add	r2, r4
    94ce:	add	r1, fp
    94d0:	ldrb.w	r4, [fp], #1
    94d4:	strb.w	r4, [r2, #1]!
    94d8:	cmp	fp, r1
    94da:	bne.n	94d0 <usb_serial_write+0x50>
    94dc:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    94e0:	cmp.w	lr, #63	; 0x3f
    94e4:	bhi.n	94fe <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    94e6:	ldr	r2, [pc, #148]	; (957c <usb_serial_write+0xfc>)
    94e8:	movs	r1, #5
    94ea:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    94ec:	cmp	r6, #0
    94ee:	bne.n	949e <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    94f0:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    94f2:	movs	r3, #0
    94f4:	strb.w	r3, [r9]
	return ret;
}
    94f8:	add	sp, #12
    94fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    94fe:	movs	r2, #64	; 0x40
    9500:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    9502:	mov	r1, r0
    9504:	movs	r0, #3
    9506:	bl	9c70 <usb_tx>
			tx_packet = NULL;
    950a:	movs	r2, #0
    950c:	str.w	r2, [r8]
    9510:	b.n	94e6 <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    9512:	ldrb	r2, [r7, #0]
    9514:	cbz	r2, 9562 <usb_serial_write+0xe2>
    9516:	ldr	r5, [pc, #96]	; (9578 <usb_serial_write+0xf8>)
    9518:	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    951c:	mov.w	sl, #1
    9520:	b.n	9532 <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    9522:	subs	r4, #1
    9524:	beq.n	9554 <usb_serial_write+0xd4>
    9526:	ldrb	r2, [r5, #0]
    9528:	cbnz	r2, 9554 <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    952a:	bl	a804 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    952e:	ldrb	r2, [r7, #0]
    9530:	cbz	r2, 9562 <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    9532:	movs	r0, #3
    9534:	bl	9b3c <usb_tx_packet_count>
    9538:	cmp	r0, #7
    953a:	bhi.n	9522 <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    953c:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    9540:	bl	9a74 <usb_malloc>
    9544:	str.w	r0, [r8]
					if (tx_packet) break;
    9548:	cmp	r0, #0
    954a:	bne.n	94a6 <usb_serial_write+0x26>
					tx_noautoflush = 0;
    954c:	ldr	r3, [pc, #48]	; (9580 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    954e:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    9550:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    9552:	bne.n	9526 <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    9554:	movs	r3, #1
					return -1;
    9556:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    955a:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    955c:	add	sp, #12
    955e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    9562:	movs	r3, #0
					return -1;
    9564:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    9568:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    956c:	add	sp, #12
    956e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9572:	nop
    9574:	.word	0x1fff1af4
    9578:	.word	0x1fff19e4
    957c:	.word	0x1fff19dc
    9580:	.word	0x1fff19dd
    9584:	.word	0x1fff19e0

00009588 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    9588:	push	{lr}
    958a:	sub	sp, #12
    958c:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    958e:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    9590:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    9594:	mov	r0, r3
    9596:	bl	9480 <usb_serial_write>
}
    959a:	add	sp, #12
    959c:	ldr.w	pc, [sp], #4

000095a0 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    95a0:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    95a2:	ldr	r5, [pc, #56]	; (95dc <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    95a4:	ldr	r4, [pc, #56]	; (95e0 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    95a6:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    95a8:	movs	r3, #1
    95aa:	strb	r3, [r4, #0]
	if (!tx_packet) {
    95ac:	cbz	r0, 95ba <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    95ae:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    95b0:	movs	r3, #0
    95b2:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    95b4:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    95b8:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    95ba:	ldr	r3, [pc, #40]	; (95e4 <usb_serial_write_buffer_free+0x44>)
    95bc:	ldrb	r3, [r3, #0]
    95be:	cbnz	r3, 95c6 <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    95c0:	movs	r0, #0
    95c2:	strb	r0, [r4, #0]
			return 0;
    95c4:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    95c6:	movs	r0, #3
    95c8:	bl	9b3c <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    95cc:	cmp	r0, #7
    95ce:	bhi.n	95c0 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    95d0:	bl	9a74 <usb_malloc>
    95d4:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    95d6:	cmp	r0, #0
    95d8:	bne.n	95ae <usb_serial_write_buffer_free+0xe>
    95da:	b.n	95c0 <usb_serial_write_buffer_free+0x20>
    95dc:	.word	0x1fff19e0
    95e0:	.word	0x1fff19dd
    95e4:	.word	0x1fff1af4

000095e8 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    95e8:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    95ea:	ldr	r3, [pc, #68]	; (9630 <usb_serial_flush_output+0x48>)
    95ec:	ldrb	r3, [r3, #0]
    95ee:	cbz	r3, 9614 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    95f0:	ldr	r6, [pc, #64]	; (9634 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    95f2:	ldr	r5, [pc, #68]	; (9638 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    95f4:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    95f6:	movs	r7, #1
    95f8:	strb	r7, [r5, #0]
	if (tx_packet) {
    95fa:	cbz	r4, 9616 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    95fc:	ldr	r2, [pc, #60]	; (963c <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    95fe:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    9600:	movs	r7, #0
    9602:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    9604:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    9606:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    9608:	movs	r0, #3
    960a:	bl	9c70 <usb_tx>
		tx_packet = NULL;
    960e:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    9610:	movs	r3, #0
    9612:	strb	r3, [r5, #0]
    9614:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    9616:	bl	9a74 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    961a:	ldr	r3, [pc, #32]	; (963c <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    961c:	cbz	r0, 962a <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    961e:	mov	r1, r0
    9620:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    9622:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    9624:	bl	9c70 <usb_tx>
    9628:	b.n	9610 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    962a:	strb	r7, [r3, #0]
    962c:	b.n	9610 <usb_serial_flush_output+0x28>
    962e:	nop
    9630:	.word	0x1fff1af4
    9634:	.word	0x1fff19e0
    9638:	.word	0x1fff19dd
    963c:	.word	0x1fff19dc

00009640 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    9640:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    9642:	ldr	r3, [pc, #56]	; (967c <usb_serial_flush_callback+0x3c>)
    9644:	ldrb	r3, [r3, #0]
    9646:	cbnz	r3, 9666 <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    9648:	ldr	r4, [pc, #52]	; (9680 <usb_serial_flush_callback+0x40>)
    964a:	ldr	r1, [r4, #0]
    964c:	cbz	r1, 9668 <usb_serial_flush_callback+0x28>
    964e:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    9652:	ldrh	r3, [r1, #2]
    9654:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    9656:	movs	r0, #3
    9658:	bl	9c70 <usb_tx>
		tx_packet = NULL;
    965c:	str	r5, [r4, #0]
    965e:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    9660:	ldr	r3, [pc, #32]	; (9684 <usb_serial_flush_callback+0x44>)
    9662:	movs	r2, #1
    9664:	strb	r2, [r3, #0]
    9666:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    9668:	bl	9a74 <usb_malloc>
		if (tx) {
    966c:	cmp	r0, #0
    966e:	beq.n	9660 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    9670:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    9672:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    9676:	movs	r0, #3
    9678:	b.w	9c70 <usb_tx>
    967c:	.word	0x1fff19dd
    9680:	.word	0x1fff19e0
    9684:	.word	0x1fff19dc

00009688 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    9688:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    968a:	ldr	r4, [pc, #64]	; (96cc <fault_isr+0x44>)
    968c:	b.n	96a0 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    968e:	ldr	r3, [r4, #0]
    9690:	lsls	r1, r3, #21
    9692:	bmi.n	96b0 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    9694:	ldr	r3, [r4, #0]
    9696:	lsls	r2, r3, #20
    9698:	bmi.n	96ba <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    969a:	ldr	r3, [r4, #0]
    969c:	lsls	r3, r3, #19
    969e:	bmi.n	96c4 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    96a0:	ldr	r3, [r4, #0]
    96a2:	lsls	r0, r3, #13
    96a4:	bpl.n	968e <fault_isr+0x6>
    96a6:	bl	9cf4 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    96aa:	ldr	r3, [r4, #0]
    96ac:	lsls	r1, r3, #21
    96ae:	bpl.n	9694 <fault_isr+0xc>
    96b0:	bl	96d0 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    96b4:	ldr	r3, [r4, #0]
    96b6:	lsls	r2, r3, #20
    96b8:	bpl.n	969a <fault_isr+0x12>
    96ba:	bl	96d0 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    96be:	ldr	r3, [r4, #0]
    96c0:	lsls	r3, r3, #19
    96c2:	bpl.n	96a0 <fault_isr+0x18>
    96c4:	bl	96d0 <unused_isr>
    96c8:	b.n	96a0 <fault_isr+0x18>
    96ca:	nop
    96cc:	.word	0x40048034

000096d0 <unused_isr>:
	}
}

void unused_isr(void)
{
    96d0:	push	{r3, lr}
	fault_isr();
    96d2:	bl	9688 <fault_isr>
    96d6:	nop

000096d8 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    96d8:	ldr	r3, [pc, #4]	; (96e0 <startup_early_hook+0x8>)
    96da:	movs	r2, #16
    96dc:	strh	r2, [r3, #0]
    96de:	bx	lr
    96e0:	.word	0x40052000

000096e4 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    96e4:	bx	lr
    96e6:	nop

000096e8 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    96e8:	ldr	r1, [pc, #36]	; (9710 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    96ea:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    96ec:	ldr	r3, [r1, #0]
	if (incr != 0) {
    96ee:	cbz	r0, 96fe <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    96f0:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    96f2:	add	r0, r3
    96f4:	sub.w	r2, r2, #8192	; 0x2000
    96f8:	cmp	r0, r2
    96fa:	bcs.n	9702 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    96fc:	str	r0, [r1, #0]
	}
	return prev;
    96fe:	mov	r0, r3
}
    9700:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    9702:	bl	b88c <__errno>
    9706:	movs	r3, #12
    9708:	str	r3, [r0, #0]
			return (void *)-1;
    970a:	mov.w	r0, #4294967295
    970e:	pop	{r3, pc}
    9710:	.word	0x1fff0980

00009714 <__cxa_pure_virtual>:
	while (1);
}

__attribute__((weak)) 
void __cxa_pure_virtual()
{
    9714:	b.n	9714 <__cxa_pure_virtual>
    9716:	nop

00009718 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    9718:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    971a:	ldr	r3, [pc, #68]	; (9760 <digitalWrite.part.1+0x48>)
    971c:	ldr.w	r2, [r3, r0, lsl #3]
    9720:	ldrb.w	r4, [r2, #640]	; 0x280
    9724:	cbz	r4, 9734 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    9726:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    9728:	cbz	r1, 974a <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    972a:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    972e:	ldr.w	r4, [sp], #4
    9732:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    9734:	add.w	r3, r3, r0, lsl #3
    9738:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    973a:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    973c:	cbnz	r1, 9754 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    973e:	bic.w	r2, r2, #2
    9742:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    9744:	ldr.w	r4, [sp], #4
    9748:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    974a:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    974e:	ldr.w	r4, [sp], #4
    9752:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    9754:	orr.w	r2, r2, #3
    9758:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    975a:	ldr.w	r4, [sp], #4
    975e:	bx	lr
    9760:	.word	0x0000fe24

00009764 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    9764:	ldr	r2, [pc, #112]	; (97d8 <pinMode.part.2+0x74>)
    9766:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    976a:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    976c:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    976e:	beq.n	9794 <pinMode.part.2+0x30>
    9770:	cmp	r1, #4
    9772:	beq.n	97ac <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    9774:	ldr.w	r0, [r2, r0, lsl #3]
    9778:	movs	r2, #0
    977a:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    977e:	cbz	r1, 978c <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    9780:	cmp	r1, #2
    9782:	beq.n	97c6 <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    9784:	cmp	r1, #3
    9786:	beq.n	97ce <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    9788:	str	r2, [r3, #0]
    978a:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    978c:	mov.w	r2, #256	; 0x100
    9790:	str	r2, [r3, #0]
    9792:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    9794:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9798:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    979c:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    97a0:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    97a2:	ldr	r2, [r3, #0]
    97a4:	bic.w	r2, r2, #32
    97a8:	str	r2, [r3, #0]
    97aa:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    97ac:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    97b0:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    97b4:	movs	r0, #1
    97b6:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    97ba:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    97bc:	ldr	r2, [r3, #0]
    97be:	orr.w	r2, r2, #32
    97c2:	str	r2, [r3, #0]
    97c4:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    97c6:	movw	r2, #259	; 0x103
    97ca:	str	r2, [r3, #0]
    97cc:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    97ce:	mov.w	r2, #258	; 0x102
    97d2:	str	r2, [r3, #0]
    97d4:	bx	lr
    97d6:	nop
    97d8:	.word	0x0000fe24

000097dc <attachInterruptVector>:
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    97dc:	adds	r0, #16
    97de:	ldr	r3, [pc, #8]	; (97e8 <attachInterruptVector+0xc>)
    97e0:	str.w	r1, [r3, r0, lsl #2]
    97e4:	bx	lr
    97e6:	nop
    97e8:	.word	0x1fff0200

000097ec <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    97ec:	push	{r4, r5}
	RTC_SR = 0;
    97ee:	ldr	r3, [pc, #20]	; (9804 <rtc_set+0x18>)
	RTC_TPR = 0;
    97f0:	ldr	r5, [pc, #20]	; (9808 <rtc_set+0x1c>)
	RTC_TSR = t;
    97f2:	ldr	r4, [pc, #24]	; (980c <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    97f4:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    97f6:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    97f8:	str	r2, [r3, #0]
	RTC_TPR = 0;
    97fa:	str	r2, [r5, #0]
	RTC_TSR = t;
    97fc:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    97fe:	str	r1, [r3, #0]
}
    9800:	pop	{r4, r5}
    9802:	bx	lr
    9804:	.word	0x4003d014
    9808:	.word	0x4003d004
    980c:	.word	0x4003d000

00009810 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    9810:	cmp	r0, #63	; 0x3f
    9812:	bhi.n	9818 <digitalWrite+0x8>
    9814:	b.w	9718 <digitalWrite.part.1>
    9818:	bx	lr
    981a:	nop

0000981c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    981c:	cmp	r0, #63	; 0x3f
    981e:	bhi.n	9824 <pinMode+0x8>
    9820:	b.w	9764 <pinMode.part.2>
    9824:	bx	lr
    9826:	nop

00009828 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    9828:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    982a:	ldr	r1, [pc, #48]	; (985c <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    982c:	ldr	r3, [pc, #48]	; (9860 <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    982e:	ldr	r2, [pc, #52]	; (9864 <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9830:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    9832:	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9834:	ldr	r2, [r2, #0]
	__enable_irq();
    9836:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9838:	lsls	r2, r2, #5
    983a:	bpl.n	9842 <micros+0x1a>
    983c:	cmp	r3, #50	; 0x32
    983e:	it	hi
    9840:	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    9842:	ldr	r1, [pc, #36]	; (9868 <micros+0x40>)
    9844:	rsb	r3, r3, #95744	; 0x17600
    9848:	mov.w	r2, #1000	; 0x3e8
    984c:	adds	r3, #255	; 0xff
    984e:	umull	r1, r3, r1, r3
    9852:	mul.w	r0, r2, r0
}
    9856:	add.w	r0, r0, r3, lsr #6
    985a:	bx	lr
    985c:	.word	0x1fff19f0
    9860:	.word	0xe000e018
    9864:	.word	0xe000ed04
    9868:	.word	0xaaaaaaab

0000986c <delay>:

void delay(uint32_t ms)
{
    986c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9870:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    9872:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    9874:	ldr	r7, [pc, #128]	; (98f8 <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9876:	ldr	r3, [pc, #132]	; (98fc <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9878:	ldr	r2, [pc, #132]	; (9900 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    987a:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    987c:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    987e:	ldr	r2, [r2, #0]
	__enable_irq();
    9880:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9882:	lsls	r2, r2, #5
    9884:	bpl.n	988c <delay+0x20>
    9886:	cmp	r3, #50	; 0x32
    9888:	it	hi
    988a:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    988c:	cbz	r5, 98f4 <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    988e:	rsb	r3, r3, #95744	; 0x17600
    9892:	ldr	r6, [pc, #112]	; (9904 <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9894:	ldr.w	r9, [pc, #100]	; 98fc <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9898:	ldr.w	r8, [pc, #100]	; 9900 <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    989c:	adds	r3, #255	; 0xff
    989e:	mov.w	r2, #1000	; 0x3e8
    98a2:	umull	r1, r3, r6, r3
    98a6:	mul.w	r4, r2, r4
    98aa:	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    98ae:	cpsid	i
	current = SYST_CVR;
    98b0:	ldr.w	r1, [r9]
	count = systick_millis_count;
    98b4:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    98b6:	ldr.w	lr, [r8]
	__enable_irq();
    98ba:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    98bc:	rsb	r3, r1, #95744	; 0x17600
    98c0:	adds	r3, #255	; 0xff
    98c2:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    98c6:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    98ca:	rsb	r3, r4, r3, lsr #6
    98ce:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    98d2:	beq.n	98da <delay+0x6e>
    98d4:	cmp	r1, #50	; 0x32
    98d6:	it	hi
    98d8:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    98da:	mla	r3, r0, r2, r3
    98de:	cmp.w	r3, #1000	; 0x3e8
    98e2:	bcc.n	98ee <delay+0x82>
				ms--;
				if (ms == 0) return;
    98e4:	subs	r5, #1
    98e6:	beq.n	98f4 <delay+0x88>
				start += 1000;
    98e8:	add.w	r4, r4, #1000	; 0x3e8
    98ec:	b.n	98ae <delay+0x42>
			}
			yield();
    98ee:	bl	a804 <yield>
		}
    98f2:	b.n	98ae <delay+0x42>
    98f4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    98f8:	.word	0x1fff19f0
    98fc:	.word	0xe000e018
    9900:	.word	0xe000ed04
    9904:	.word	0xaaaaaaab

00009908 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    9908:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    990a:	ldr	r3, [pc, #312]	; (9a44 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    990c:	ldr	r0, [pc, #312]	; (9a48 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    990e:	ldr.w	ip, [pc, #348]	; 9a6c <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    9912:	ldr	r4, [pc, #312]	; (9a4c <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    9914:	ldr	r1, [pc, #312]	; (9a50 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    9916:	ldr.w	lr, [pc, #344]	; 9a70 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    991a:	ldr	r6, [pc, #312]	; (9a54 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    991c:	ldr	r5, [pc, #312]	; (9a58 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    991e:	ldr	r7, [pc, #316]	; (9a5c <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    9920:	mov.w	r2, #134217728	; 0x8000000
    9924:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    9926:	mov.w	r2, #268435456	; 0x10000000
    992a:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    992c:	mov.w	r2, #536870912	; 0x20000000
    9930:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    9932:	mov.w	r2, #1073741824	; 0x40000000
    9936:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    9938:	mov.w	r2, #2147483648	; 0x80000000
    993c:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    993e:	movs	r2, #0
    9940:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    9942:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    9944:	movw	r0, #49151	; 0xbfff
    9948:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    994c:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    9950:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    9952:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    9956:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    9958:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    995a:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    995c:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    9960:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    9962:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    9966:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    9968:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    996c:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    996e:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    9972:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    9976:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    997a:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    997e:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    9982:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    9984:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    9988:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    998a:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    998c:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    998e:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    9992:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    9994:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    9996:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9998:	ldr	r4, [pc, #196]	; (9a60 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    999a:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    999c:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    999e:	movs	r1, #9
    99a0:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    99a2:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    99a6:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    99aa:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    99ac:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    99ae:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    99b0:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    99b2:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    99b4:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    99b6:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    99ba:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    99be:	add.w	r7, r7, #520192	; 0x7f000
    99c2:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    99c4:	addw	r4, r4, #2044	; 0x7fc
    99c8:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    99ca:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    99cc:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    99ce:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    99d0:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    99d4:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    99d6:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    99da:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    99de:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    99e0:	sub.w	r4, r4, #460800	; 0x70800
    99e4:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    99e8:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    99ea:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    99ec:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    99f0:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    99f2:	ldr	r0, [pc, #112]	; (9a64 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    99f4:	orr.w	r1, r1, #512	; 0x200
    99f8:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    99fa:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    99fc:	ldr	r4, [pc, #104]	; (9a68 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    99fe:	add.w	lr, lr, #65280	; 0xff00
    9a02:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    9a06:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    9a0a:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    9a0e:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    9a12:	orr.w	r1, r1, #33554432	; 0x2000000
    9a16:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    9a18:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    9a1c:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    9a20:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    9a22:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    9a24:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    9a26:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    9a28:	str	r2, [r4, #0]
#endif
	analog_init();
    9a2a:	bl	aa94 <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    9a2e:	movs	r0, #25
    9a30:	bl	986c <delay>
	usb_init();
    9a34:	bl	a73c <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    9a38:	movw	r0, #275	; 0x113
}
    9a3c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    9a40:	b.w	986c <delay>
    9a44:	.word	0xe000e104
    9a48:	.word	0x40038004
    9a4c:	.word	0x40038014
    9a50:	.word	0x4003801c
    9a54:	.word	0x40038024
    9a58:	.word	0x4003802c
    9a5c:	.word	0x40038034
    9a60:	.word	0x40038000
    9a64:	.word	0x40048004
    9a68:	.word	0x400c9000
    9a6c:	.word	0x40038008
    9a70:	.word	0x4003800c

00009a74 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    9a74:	cpsid	i
	avail = usb_buffer_available;
    9a76:	ldr	r0, [pc, #52]	; (9aac <usb_malloc+0x38>)
    9a78:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    9a7a:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    9a7e:	cmp	r3, #19
    9a80:	bgt.n	9aa4 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    9a82:	mov.w	r1, #2147483648	; 0x80000000
    9a86:	lsrs	r1, r3
    9a88:	bic.w	r2, r2, r1
    9a8c:	str	r2, [r0, #0]
	__enable_irq();
    9a8e:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    9a90:	ldr	r0, [pc, #28]	; (9ab0 <usb_malloc+0x3c>)
    9a92:	add.w	r3, r3, r3, lsl #3
    9a96:	lsls	r3, r3, #3
    9a98:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    9a9a:	movs	r1, #0
    9a9c:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    9a9e:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    9aa0:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    9aa2:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    9aa4:	cpsie	i
		return NULL;
    9aa6:	movs	r0, #0
    9aa8:	bx	lr
    9aaa:	nop
    9aac:	.word	0x1fff0984
    9ab0:	.word	0x1fff03d0

00009ab4 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    9ab4:	ldr	r3, [pc, #52]	; (9aec <usb_free+0x38>)
    9ab6:	ldr	r2, [pc, #56]	; (9af0 <usb_free+0x3c>)
    9ab8:	subs	r3, r0, r3
    9aba:	umull	r2, r3, r2, r3
    9abe:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    9ac0:	cmp	r3, #19
    9ac2:	bhi.n	9ade <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    9ac4:	ldr	r2, [pc, #44]	; (9af4 <usb_free+0x40>)
    9ac6:	ldrb	r2, [r2, #0]
    9ac8:	cbnz	r2, 9ae0 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    9aca:	cpsid	i
	usb_buffer_available |= mask;
    9acc:	ldr	r0, [pc, #40]	; (9af8 <usb_free+0x44>)
    9ace:	mov.w	r1, #2147483648	; 0x80000000
    9ad2:	ldr	r2, [r0, #0]
    9ad4:	lsr.w	r3, r1, r3
    9ad8:	orrs	r2, r3
    9ada:	str	r2, [r0, #0]
	__enable_irq();
    9adc:	cpsie	i
    9ade:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    9ae0:	ldr	r2, [pc, #24]	; (9afc <usb_free+0x48>)
    9ae2:	ldrb	r2, [r2, #0]
    9ae4:	cmp	r2, #0
    9ae6:	beq.n	9aca <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    9ae8:	b.w	9b68 <usb_rx_memory>
    9aec:	.word	0x1fff03d0
    9af0:	.word	0x38e38e39
    9af4:	.word	0x1fff1ae9
    9af8:	.word	0x1fff0984
    9afc:	.word	0x1fff1af4

00009b00 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    9b00:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    9b02:	cmp	r3, #5
    9b04:	bhi.n	9b30 <usb_rx+0x30>
	__disable_irq();
    9b06:	cpsid	i
	ret = rx_first[endpoint];
    9b08:	ldr	r1, [pc, #40]	; (9b34 <usb_rx+0x34>)
    9b0a:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    9b0e:	cbz	r0, 9b2c <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    9b10:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    9b12:	ldr	r4, [pc, #36]	; (9b38 <usb_rx+0x38>)
    9b14:	ldrh	r5, [r0, #0]
    9b16:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    9b1a:	ldr	r6, [r0, #4]
    9b1c:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    9b20:	subs	r2, r2, r5
    9b22:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    9b26:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    9b28:	pop	{r4, r5, r6}
    9b2a:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    9b2c:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    9b2e:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    9b30:	movs	r0, #0
    9b32:	bx	lr
    9b34:	.word	0x1fff1a54
    9b38:	.word	0x1fff1b70

00009b3c <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    9b3c:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    9b3e:	cmp	r0, #5
    9b40:	bhi.n	9b5a <usb_tx_packet_count+0x1e>
	__disable_irq();
    9b42:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    9b44:	ldr	r3, [pc, #28]	; (9b64 <usb_tx_packet_count+0x28>)
    9b46:	ldr.w	r3, [r3, r0, lsl #2]
    9b4a:	cbz	r3, 9b5e <usb_tx_packet_count+0x22>
    9b4c:	movs	r0, #0
    9b4e:	ldr	r3, [r3, #4]
    9b50:	adds	r0, #1
    9b52:	cmp	r3, #0
    9b54:	bne.n	9b4e <usb_tx_packet_count+0x12>
	__enable_irq();
    9b56:	cpsie	i
	return count;
    9b58:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    9b5a:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    9b5c:	bx	lr
// https://forum.pjrc.com/threads/58663?p=223513&viewfull=1#post223513
//
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    9b5e:	mov	r0, r3
    9b60:	b.n	9b56 <usb_tx_packet_count+0x1a>
    9b62:	nop
    9b64:	.word	0x1fff1ab0

00009b68 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    9b68:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    9b6a:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9b6c:	ldr	r2, [pc, #236]	; (9c5c <usb_rx_memory+0xf4>)
    9b6e:	ldrb	r3, [r2, #0]
    9b70:	lsls	r1, r3, #28
    9b72:	bpl.n	9b82 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9b74:	ldr	r3, [pc, #232]	; (9c60 <usb_rx_memory+0xf8>)
    9b76:	ldr	r1, [r3, #32]
    9b78:	cmp	r1, #0
    9b7a:	beq.n	9c1c <usb_rx_memory+0xb4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9b7c:	ldr	r1, [r3, #40]	; 0x28
    9b7e:	cmp	r1, #0
    9b80:	beq.n	9c38 <usb_rx_memory+0xd0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9b82:	ldrb	r3, [r2, #1]
    9b84:	lsls	r3, r3, #28
    9b86:	bpl.n	9b96 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9b88:	ldr	r3, [pc, #212]	; (9c60 <usb_rx_memory+0xf8>)
    9b8a:	ldr	r1, [r3, #64]	; 0x40
    9b8c:	cmp	r1, #0
    9b8e:	beq.n	9c4c <usb_rx_memory+0xe4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9b90:	ldr	r1, [r3, #72]	; 0x48
    9b92:	cmp	r1, #0
    9b94:	beq.n	9c3c <usb_rx_memory+0xd4>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9b96:	ldrb	r3, [r2, #2]
    9b98:	lsls	r5, r3, #28
    9b9a:	bpl.n	9baa <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9b9c:	ldr	r3, [pc, #192]	; (9c60 <usb_rx_memory+0xf8>)
    9b9e:	ldr	r1, [r3, #96]	; 0x60
    9ba0:	cmp	r1, #0
    9ba2:	beq.n	9c48 <usb_rx_memory+0xe0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9ba4:	ldr	r1, [r3, #104]	; 0x68
    9ba6:	cmp	r1, #0
    9ba8:	beq.n	9c40 <usb_rx_memory+0xd8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9baa:	ldrb	r3, [r2, #3]
    9bac:	lsls	r4, r3, #28
    9bae:	bpl.n	9bc2 <usb_rx_memory+0x5a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9bb0:	ldr	r3, [pc, #172]	; (9c60 <usb_rx_memory+0xf8>)
    9bb2:	ldr.w	r1, [r3, #128]	; 0x80
    9bb6:	cmp	r1, #0
    9bb8:	beq.n	9c50 <usb_rx_memory+0xe8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9bba:	ldr.w	r1, [r3, #136]	; 0x88
    9bbe:	cmp	r1, #0
    9bc0:	beq.n	9c44 <usb_rx_memory+0xdc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9bc2:	ldrb	r3, [r2, #4]
    9bc4:	lsls	r1, r3, #28
    9bc6:	bpl.n	9bd8 <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9bc8:	ldr	r3, [pc, #148]	; (9c60 <usb_rx_memory+0xf8>)
    9bca:	ldr.w	r1, [r3, #160]	; 0xa0
    9bce:	cmp	r1, #0
    9bd0:	beq.n	9c58 <usb_rx_memory+0xf0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9bd2:	ldr.w	r1, [r3, #168]	; 0xa8
    9bd6:	cbz	r1, 9bfe <usb_rx_memory+0x96>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9bd8:	ldrb	r3, [r2, #5]
    9bda:	lsls	r3, r3, #28
    9bdc:	bpl.n	9bf0 <usb_rx_memory+0x88>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9bde:	ldr	r3, [pc, #128]	; (9c60 <usb_rx_memory+0xf8>)
    9be0:	ldr.w	r2, [r3, #192]	; 0xc0
    9be4:	cmp	r2, #0
    9be6:	beq.n	9c54 <usb_rx_memory+0xec>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9be8:	ldr.w	r2, [r3, #200]	; 0xc8
    9bec:	movs	r4, #25
    9bee:	cbz	r2, 9c00 <usb_rx_memory+0x98>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    9bf0:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    9bf2:	ldr	r3, [pc, #112]	; (9c64 <usb_rx_memory+0xfc>)
    9bf4:	movs	r2, #0
    9bf6:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    9bf8:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    9bfa:	b.w	9ab4 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9bfe:	movs	r4, #21
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    9c00:	ldr	r1, [pc, #96]	; (9c64 <usb_rx_memory+0xfc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9c02:	ldr	r5, [pc, #100]	; (9c68 <usb_rx_memory+0x100>)
				usb_rx_memory_needed--;
    9c04:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9c06:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    9c0a:	add.w	r3, r3, r4, lsl #3
    9c0e:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    9c10:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    9c12:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    9c14:	strb	r2, [r1, #0]
				__enable_irq();
    9c16:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    9c18:	pop	{r4, r5}
    9c1a:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    9c1c:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    9c1e:	ldr	r4, [pc, #68]	; (9c64 <usb_rx_memory+0xfc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9c20:	ldr	r5, [pc, #72]	; (9c6c <usb_rx_memory+0x104>)
				usb_rx_memory_needed--;
    9c22:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9c24:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    9c28:	add.w	r3, r3, r2, lsl #3
    9c2c:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    9c2e:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    9c30:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    9c32:	strb	r2, [r4, #0]
				__enable_irq();
    9c34:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    9c36:	b.n	9c18 <usb_rx_memory+0xb0>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9c38:	movs	r4, #5
    9c3a:	b.n	9c00 <usb_rx_memory+0x98>
    9c3c:	movs	r4, #9
    9c3e:	b.n	9c00 <usb_rx_memory+0x98>
    9c40:	movs	r4, #13
    9c42:	b.n	9c00 <usb_rx_memory+0x98>
    9c44:	movs	r4, #17
    9c46:	b.n	9c00 <usb_rx_memory+0x98>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    9c48:	movs	r2, #12
    9c4a:	b.n	9c1e <usb_rx_memory+0xb6>
    9c4c:	movs	r2, #8
    9c4e:	b.n	9c1e <usb_rx_memory+0xb6>
    9c50:	movs	r2, #16
    9c52:	b.n	9c1e <usb_rx_memory+0xb6>
    9c54:	movs	r2, #24
    9c56:	b.n	9c1e <usb_rx_memory+0xb6>
    9c58:	movs	r2, #20
    9c5a:	b.n	9c1e <usb_rx_memory+0xb6>
    9c5c:	.word	0x00010050
    9c60:	.word	0x1fff0000
    9c64:	.word	0x1fff1ae9
    9c68:	.word	0x004000c8
    9c6c:	.word	0x00400088

00009c70 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    9c70:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    9c72:	cmp	r3, #5
    9c74:	bhi.n	9cb2 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    9c76:	ldr	r2, [pc, #108]	; (9ce4 <usb_tx+0x74>)
    9c78:	lsls	r0, r0, #5
    9c7a:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    9c7e:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    9c80:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    9c82:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    9c84:	ldr	r4, [pc, #96]	; (9ce8 <usb_tx+0x78>)
    9c86:	ldrb	r2, [r4, r3]
    9c88:	cmp	r2, #3
    9c8a:	bhi.n	9cc4 <usb_tx+0x54>
    9c8c:	tbb	[pc, r2]
    9c90:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    9c94:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    9c96:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    9c98:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    9c9a:	tst.w	r0, #8
    9c9e:	ite	ne
    9ca0:	movne	r3, #200	; 0xc8
    9ca2:	moveq	r3, #136	; 0x88
    9ca4:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    9ca8:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    9caa:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    9cac:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    9cae:	cpsie	i
}
    9cb0:	pop	{r4, r5}
    9cb2:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    9cb4:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    9cb6:	movs	r2, #2
		break;
    9cb8:	b.n	9c96 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    9cba:	movs	r2, #5
    9cbc:	b.n	9c96 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    9cbe:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    9cc0:	movs	r2, #4
		break;
    9cc2:	b.n	9c96 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    9cc4:	ldr	r2, [pc, #36]	; (9cec <usb_tx+0x7c>)
    9cc6:	ldr.w	r0, [r2, r3, lsl #2]
    9cca:	cbz	r0, 9cdc <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    9ccc:	ldr	r2, [pc, #32]	; (9cf0 <usb_tx+0x80>)
    9cce:	ldr.w	r0, [r2, r3, lsl #2]
    9cd2:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    9cd4:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    9cd8:	cpsie	i
		return;
    9cda:	b.n	9cb0 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    9cdc:	str.w	r1, [r2, r3, lsl #2]
    9ce0:	ldr	r2, [pc, #12]	; (9cf0 <usb_tx+0x80>)
    9ce2:	b.n	9cd4 <usb_tx+0x64>
    9ce4:	.word	0x1fff0000
    9ce8:	.word	0x1fff1af8
    9cec:	.word	0x1fff1ab0
    9cf0:	.word	0x1fff1ac8

00009cf4 <usb_isr>:
}



void usb_isr(void)
{
    9cf4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    9cf8:	ldr.w	fp, [pc, #780]	; a008 <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    9cfc:	ldr.w	sl, [pc, #780]	; a00c <usb_isr+0x318>
}



void usb_isr(void)
{
    9d00:	sub	sp, #28
    9d02:	b.n	9d8e <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    9d04:	ldr	r7, [pc, #692]	; (9fbc <usb_isr+0x2c8>)
    9d06:	mov.w	r8, r3, lsr #2
    9d0a:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    9d0e:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    9d10:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    9d14:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    9d18:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    9d1a:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    9d1e:	and.w	r4, r3, #255	; 0xff
    9d22:	cmp	r3, #0
    9d24:	bne.w	a010 <usb_isr+0x31c>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    9d28:	ldr.w	r3, [r7, r8, lsl #3]
    9d2c:	lsrs	r3, r3, #16
    9d2e:	uxth	r1, r3
    9d30:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    9d34:	cmp	r3, #0
    9d36:	beq.w	9fa8 <usb_isr+0x2b4>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    9d3a:	ldr	r3, [pc, #644]	; (9fc0 <usb_isr+0x2cc>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    9d3c:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    9d40:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    9d44:	ldr.w	r2, [r3, r6, lsl #2]
    9d48:	cmp	r2, #0
    9d4a:	beq.w	a0ac <usb_isr+0x3b8>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    9d4e:	ldr	r5, [pc, #628]	; (9fc4 <usb_isr+0x2d0>)
    9d50:	ldr.w	r3, [r5, r6, lsl #2]
    9d54:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    9d56:	ldr	r4, [pc, #624]	; (9fc8 <usb_isr+0x2d4>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    9d58:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    9d5c:	ldrh.w	r3, [r4, r6, lsl #1]
    9d60:	add	r1, r3
    9d62:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    9d66:	bl	9a74 <usb_malloc>
					if (packet) {
    9d6a:	cmp	r0, #0
    9d6c:	beq.w	a09e <usb_isr+0x3aa>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    9d70:	ldr	r2, [pc, #600]	; (9fcc <usb_isr+0x2d8>)
    9d72:	ldr	r3, [pc, #604]	; (9fd0 <usb_isr+0x2dc>)
    9d74:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    9d78:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    9d7c:	it	ne
    9d7e:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    9d80:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    9d84:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    9d88:	movs	r3, #8
    9d8a:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    9d8e:	ldrb.w	r4, [fp]
    9d92:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    9d94:	lsls	r5, r4, #29
    9d96:	bpl.n	9dd0 <usb_isr+0xdc>
		if (usb_configuration) {
    9d98:	ldr	r3, [pc, #568]	; (9fd4 <usb_isr+0x2e0>)
    9d9a:	ldrb	r3, [r3, #0]
    9d9c:	cbz	r3, 9dca <usb_isr+0xd6>
			t = usb_reboot_timer;
    9d9e:	ldr	r1, [pc, #568]	; (9fd8 <usb_isr+0x2e4>)
    9da0:	ldrb	r2, [r1, #0]
			if (t) {
    9da2:	and.w	r3, r2, #255	; 0xff
    9da6:	cbz	r2, 9db4 <usb_isr+0xc0>
				usb_reboot_timer = --t;
    9da8:	subs	r3, #1
    9daa:	uxtb	r3, r3
    9dac:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    9dae:	cmp	r3, #0
    9db0:	beq.w	a732 <usb_isr+0xa3e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    9db4:	ldr	r1, [pc, #548]	; (9fdc <usb_isr+0x2e8>)
    9db6:	ldrb	r2, [r1, #0]
			if (t) {
    9db8:	and.w	r3, r2, #255	; 0xff
    9dbc:	cbz	r2, 9dca <usb_isr+0xd6>
				usb_cdc_transmit_flush_timer = --t;
    9dbe:	subs	r3, #1
    9dc0:	uxtb	r3, r3
    9dc2:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    9dc4:	cmp	r3, #0
    9dc6:	beq.w	a098 <usb_isr+0x3a4>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    9dca:	movs	r3, #4
    9dcc:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    9dd0:	and.w	r3, r4, #8
    9dd4:	and.w	r2, r3, #255	; 0xff
    9dd8:	cmp	r3, #0
    9dda:	beq.w	a06a <usb_isr+0x376>
		uint8_t endpoint;
		stat = USB0_STAT;
    9dde:	ldrb.w	r3, [sl]
    9de2:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    9de4:	lsrs	r6, r3, #4
    9de6:	bne.n	9d04 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    9de8:	lsrs	r0, r3, #2
    9dea:	ldr.w	r9, [pc, #464]	; 9fbc <usb_isr+0x2c8>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    9dee:	ldr.w	r2, [r9, r0, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    9df2:	add.w	r1, r9, r0, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    9df6:	ubfx	r2, r2, #2, #4
    9dfa:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    9dfc:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    9dfe:	cmp	r2, #12
    9e00:	bhi.w	9f8a <usb_isr+0x296>
    9e04:	tbh	[pc, r2, lsl #1]
    9e08:	.word	0x00c500c5
    9e0c:	.word	0x00c100c1
    9e10:	.word	0x00c100c1
    9e14:	.word	0x00c100c1
    9e18:	.word	0x00c1008b
    9e1c:	.word	0x00c100c1
    9e20:	.short	0x000d
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    9e22:	ldr	r2, [r1, #0]
    9e24:	ldr	r5, [pc, #440]	; (9fe0 <usb_isr+0x2ec>)
		setup.word2 = *(uint32_t *)(buf + 4);
    9e26:	ldr	r1, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    9e28:	ldr	r7, [pc, #440]	; (9fe4 <usb_isr+0x2f0>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    9e2a:	ldr	r6, [pc, #444]	; (9fe8 <usb_isr+0x2f4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    9e2c:	ldr	r4, [pc, #412]	; (9fcc <usb_isr+0x2d8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    9e2e:	str	r1, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9e30:	uxth	r1, r2
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    9e32:	str.w	r4, [r9, r0, lsl #3]
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    9e36:	str	r2, [r5, #0]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    9e38:	movs	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    9e3a:	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9e3c:	cmp.w	r1, #2176	; 0x880
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    9e40:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    9e42:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    9e46:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    9e4a:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9e4c:	beq.w	a4ee <usb_isr+0x7fa>
    9e50:	bls.w	a0b4 <usb_isr+0x3c0>
    9e54:	movw	r4, #8993	; 0x2321
    9e58:	cmp	r1, r4
    9e5a:	beq.w	a4f8 <usb_isr+0x804>
    9e5e:	bhi.w	a1ea <usb_isr+0x4f6>
    9e62:	movw	r4, #8225	; 0x2021
    9e66:	cmp	r1, r4
    9e68:	beq.w	a200 <usb_isr+0x50c>
    9e6c:	movw	r4, #8737	; 0x2221
    9e70:	cmp	r1, r4
    9e72:	beq.w	a34a <usb_isr+0x656>
    9e76:	cmp.w	r1, #2304	; 0x900
    9e7a:	bne.w	a1fa <usb_isr+0x506>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    9e7e:	ldr	r2, [pc, #340]	; (9fd4 <usb_isr+0x2e0>)
    9e80:	ldr	r4, [pc, #312]	; (9fbc <usb_isr+0x2c8>)
    9e82:	ldrb	r1, [r5, #2]
    9e84:	strb	r1, [r2, #0]
    9e86:	add.w	r5, r4, #192	; 0xc0
    9e8a:	b.n	9e92 <usb_isr+0x19e>
    9e8c:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    9e8e:	cmp	r5, r4
    9e90:	beq.n	9ea6 <usb_isr+0x1b2>
			if (table[i].desc & BDT_OWN) {
    9e92:	ldr	r3, [r4, #32]
    9e94:	lsls	r0, r3, #24
    9e96:	bpl.n	9e8c <usb_isr+0x198>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    9e98:	ldr	r0, [r4, #36]	; 0x24
    9e9a:	adds	r4, #8
    9e9c:	subs	r0, #8
    9e9e:	bl	9ab4 <usb_free>
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    9ea2:	cmp	r5, r4
    9ea4:	bne.n	9e92 <usb_isr+0x19e>
    9ea6:	ldr	r4, [pc, #324]	; (9fec <usb_isr+0x2f8>)
    9ea8:	ldr	r2, [pc, #276]	; (9fc0 <usb_isr+0x2cc>)
    9eaa:	ldr	r1, [pc, #324]	; (9ff0 <usb_isr+0x2fc>)
    9eac:	ldr	r0, [pc, #324]	; (9ff4 <usb_isr+0x300>)
    9eae:	ldr	r5, [pc, #276]	; (9fc4 <usb_isr+0x2d0>)
    9eb0:	str	r4, [sp, #4]
    9eb2:	movs	r3, #0
    9eb4:	ldr	r4, [pc, #272]	; (9fc8 <usb_isr+0x2d4>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    9eb6:	str	r6, [sp, #20]
    9eb8:	str	r5, [sp, #8]
    9eba:	str	r4, [sp, #12]
    9ebc:	mov	r8, r0
    9ebe:	str	r7, [sp, #16]
    9ec0:	mov	r6, r2
    9ec2:	mov	r5, r1
    9ec4:	mov	r4, r3
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    9ec6:	ldr	r0, [r6, #0]
			while (p) {
    9ec8:	cbz	r0, 9ed6 <usb_isr+0x1e2>
				n = p->next;
    9eca:	ldr	r7, [r0, #4]
				usb_free(p);
    9ecc:	bl	9ab4 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    9ed0:	mov	r0, r7
    9ed2:	cmp	r7, #0
    9ed4:	bne.n	9eca <usb_isr+0x1d6>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    9ed6:	movs	r3, #0
    9ed8:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    9eda:	ldr	r3, [sp, #8]
			p = tx_first[i];
    9edc:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    9ede:	mov	r2, r3
    9ee0:	movs	r3, #0
    9ee2:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    9ee6:	cbz	r0, 9ef4 <usb_isr+0x200>
				n = p->next;
    9ee8:	ldr	r7, [r0, #4]
				usb_free(p);
    9eea:	bl	9ab4 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    9eee:	mov	r0, r7
    9ef0:	cmp	r7, #0
    9ef2:	bne.n	9ee8 <usb_isr+0x1f4>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    9ef4:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    9ef6:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    9ef8:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    9efa:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    9efc:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    9f00:	ldr	r2, [sp, #12]
    9f02:	mov.w	r1, #0
			switch (tx_state[i]) {
    9f06:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    9f08:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    9f0c:	cmp	r3, #3
    9f0e:	bhi.w	a424 <usb_isr+0x730>
    9f12:	tbh	[pc, r3, lsl #1]
    9f16:	.short	0x02e7
    9f18:	.word	0x02e70283
    9f1c:	.short	0x0283
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    9f1e:	ldr	r7, [pc, #196]	; (9fe4 <usb_isr+0x2f0>)
    9f20:	ldr	r2, [r7, #0]
		if (data) {
    9f22:	cbz	r2, 9f76 <usb_isr+0x282>
			size = ep0_tx_len;
    9f24:	ldr	r3, [pc, #208]	; (9ff8 <usb_isr+0x304>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9f26:	ldr	r6, [pc, #192]	; (9fe8 <usb_isr+0x2f4>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9f28:	ldr	r1, [pc, #208]	; (9ffc <usb_isr+0x308>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    9f2a:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9f2c:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9f2e:	ldrb	r5, [r1, #0]
    9f30:	cmp	r0, #64	; 0x40
    9f32:	mov	lr, r0
    9f34:	orr.w	r8, r5, #2
    9f38:	it	cs
    9f3a:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9f3e:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    9f40:	eor.w	r4, r4, #1
    9f44:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    9f46:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9f4a:	ite	eq
    9f4c:	moveq	r4, #136	; 0x88
    9f4e:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9f50:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    9f54:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9f56:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9f5a:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9f5e:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    9f60:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9f62:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    9f66:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9f68:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    9f6a:	cbnz	r0, 9f74 <usb_isr+0x280>
    9f6c:	cmp.w	lr, #64	; 0x40
    9f70:	it	ne
    9f72:	movne	r2, #0
    9f74:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    9f76:	ldr	r3, [pc, #104]	; (9fe0 <usb_isr+0x2ec>)
    9f78:	ldrh	r2, [r3, #0]
    9f7a:	cmp.w	r2, #1280	; 0x500
    9f7e:	bne.n	9f8a <usb_isr+0x296>
			setup.bRequest = 0;
    9f80:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    9f82:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    9f84:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    9f86:	ldr	r3, [pc, #120]	; (a000 <usb_isr+0x30c>)
    9f88:	strb	r2, [r3, #0]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    9f8a:	ldr	r2, [pc, #120]	; (a004 <usb_isr+0x310>)
    9f8c:	movs	r3, #1
    9f8e:	strb	r3, [r2, #0]
    9f90:	b.n	9d88 <usb_isr+0x94>
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    9f92:	ldr	r2, [pc, #76]	; (9fe0 <usb_isr+0x2ec>)
    9f94:	ldrh	r5, [r2, #0]
    9f96:	movw	r4, #8225	; 0x2021
    9f9a:	cmp	r5, r4
    9f9c:	beq.w	a194 <usb_isr+0x4a0>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    9fa0:	ldr	r2, [pc, #40]	; (9fcc <usb_isr+0x2d8>)
    9fa2:	str.w	r2, [r9, r0, lsl #3]
    9fa6:	b.n	9f8a <usb_isr+0x296>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    9fa8:	ldr	r2, [pc, #32]	; (9fcc <usb_isr+0x2d8>)
    9faa:	ldr	r3, [pc, #36]	; (9fd0 <usb_isr+0x2dc>)
    9fac:	tst.w	r9, #8
    9fb0:	it	ne
    9fb2:	movne	r3, r2
    9fb4:	str.w	r3, [r7, r8, lsl #3]
    9fb8:	b.n	9d88 <usb_isr+0x94>
    9fba:	nop
    9fbc:	.word	0x1fff0000
    9fc0:	.word	0x1fff1a54
    9fc4:	.word	0x1fff19f8
    9fc8:	.word	0x1fff1b70
    9fcc:	.word	0x004000c8
    9fd0:	.word	0x00400088
    9fd4:	.word	0x1fff1af4
    9fd8:	.word	0x1fff1a6d
    9fdc:	.word	0x1fff19dc
    9fe0:	.word	0x1fff1ae0
    9fe4:	.word	0x1fff19f4
    9fe8:	.word	0x1fff1a6c
    9fec:	.word	0x1fff1af8
    9ff0:	.word	0x1fff1ab0
    9ff4:	.word	0x1fff1ac8
    9ff8:	.word	0x1fff1a10
    9ffc:	.word	0x1fff1ae8
    a000:	.word	0x40072098
    a004:	.word	0x40072094
    a008:	.word	0x40072080
    a00c:	.word	0x40072090
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    a010:	bl	9ab4 <usb_free>
				packet = tx_first[endpoint];
    a014:	ldr	r2, [pc, #692]	; (a2cc <usb_isr+0x5d8>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    a016:	ldr	r1, [pc, #696]	; (a2d0 <usb_isr+0x5dc>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    a018:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    a01c:	cmp	r3, #0
    a01e:	beq.w	a174 <usb_isr+0x480>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    a022:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    a024:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    a026:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    a02a:	add.w	r2, r3, #8
    a02e:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    a032:	cmp	r4, #3
    a034:	bhi.n	a042 <usb_isr+0x34e>
    a036:	tbb	[pc, r4]
    a03a:	.short	0x0f12
    a03c:	.short	0x0215
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    a03e:	movs	r2, #4
    a040:	strb	r2, [r1, r6]
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    a042:	ldrh	r2, [r3, #0]
    a044:	tst.w	r9, #8
    a048:	ite	eq
    a04a:	moveq	r3, #136	; 0x88
    a04c:	movne	r3, #200	; 0xc8
    a04e:	orr.w	r3, r3, r2, lsl #16
    a052:	str.w	r3, [r7, r8, lsl #3]
    a056:	b.n	9d88 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    a058:	movs	r2, #2
    a05a:	strb	r2, [r1, r6]
						break;
    a05c:	b.n	a042 <usb_isr+0x34e>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    a05e:	movs	r2, #3
    a060:	strb	r2, [r1, r6]
						break;
    a062:	b.n	a042 <usb_isr+0x34e>
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    a064:	movs	r2, #5
    a066:	strb	r2, [r1, r6]
						break;
    a068:	b.n	a042 <usb_isr+0x34e>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    a06a:	lsls	r0, r4, #31
    a06c:	bmi.w	a208 <usb_isr+0x514>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    a070:	lsls	r1, r4, #24
    a072:	bmi.w	a2a4 <usb_isr+0x5b0>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    a076:	lsls	r2, r4, #30
    a078:	bpl.n	a088 <usb_isr+0x394>
		uint8_t err = USB0_ERRSTAT;
    a07a:	ldr	r2, [pc, #600]	; (a2d4 <usb_isr+0x5e0>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    a07c:	ldr	r1, [pc, #600]	; (a2d8 <usb_isr+0x5e4>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    a07e:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    a080:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    a082:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    a084:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    a086:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    a088:	lsls	r3, r4, #27
    a08a:	bpl.n	a092 <usb_isr+0x39e>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    a08c:	ldr	r3, [pc, #584]	; (a2d8 <usb_isr+0x5e4>)
    a08e:	movs	r2, #16
    a090:	strb	r2, [r3, #0]
	}

}
    a092:	add	sp, #28
    a094:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    a098:	bl	9640 <usb_serial_flush_callback>
    a09c:	b.n	9dca <usb_isr+0xd6>
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    a09e:	ldr	r2, [pc, #572]	; (a2dc <usb_isr+0x5e8>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    a0a0:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    a0a4:	ldrb	r3, [r2, #0]
    a0a6:	adds	r3, #1
    a0a8:	strb	r3, [r2, #0]
    a0aa:	b.n	9d88 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    a0ac:	str.w	r0, [r3, r6, lsl #2]
    a0b0:	ldr	r5, [pc, #556]	; (a2e0 <usb_isr+0x5ec>)
    a0b2:	b.n	9d56 <usb_isr+0x62>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a0b4:	movw	r4, #770	; 0x302
    a0b8:	cmp	r1, r4
    a0ba:	beq.w	a500 <usb_isr+0x80c>
    a0be:	bhi.w	a262 <usb_isr+0x56e>
    a0c2:	cmp	r1, #130	; 0x82
    a0c4:	beq.w	a3f6 <usb_isr+0x702>
    a0c8:	cmp.w	r1, #258	; 0x102
    a0cc:	beq.w	a324 <usb_isr+0x630>
    a0d0:	cmp	r1, #128	; 0x80
    a0d2:	bne.w	a1fa <usb_isr+0x506>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    a0d6:	ldr	r4, [pc, #524]	; (a2e4 <usb_isr+0x5f0>)
		reply_buffer[1] = 0;
		datalen = 2;
    a0d8:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    a0da:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    a0dc:	strb	r2, [r4, #1]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    a0de:	ldrh	r2, [r5, #6]
    a0e0:	cmp	r2, r0
    a0e2:	bcs.w	a682 <usb_isr+0x98e>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a0e6:	ldr	r1, [pc, #512]	; (a2e8 <usb_isr+0x5f4>)
    a0e8:	ldrb	r5, [r1, #0]
    a0ea:	cmp	r2, #64	; 0x40
    a0ec:	mov	lr, r2
    a0ee:	orr.w	ip, r5, #2
    a0f2:	it	cs
    a0f4:	movcs.w	lr, #64	; 0x40
    a0f8:	add.w	r3, r4, lr
    a0fc:	add.w	r0, r9, ip, lsl #3
    a100:	str	r3, [sp, #4]
    a102:	movs	r3, #1
    a104:	str	r4, [r0, #4]
    a106:	mov.w	r8, lr, lsl #16
    a10a:	rsb	r0, lr, r2
    a10e:	str	r3, [sp, #8]
    a110:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a112:	movs	r4, #200	; 0xc8
    a114:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a118:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a11c:	str.w	r3, [r9, ip, lsl #3]
	ep0_tx_data_toggle ^= 1;
    a120:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    a122:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a124:	ldr.w	ip, [pc, #472]	; a300 <usb_isr+0x60c>
	ep0_tx_data_toggle ^= 1;
    a128:	ldr	r3, [pc, #448]	; (a2ec <usb_isr+0x5f8>)
	ep0_tx_bdt_bank ^= 1;
    a12a:	ldr.w	r8, [pc, #444]	; a2e8 <usb_isr+0x5f4>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    a12e:	cmp	r0, #0
    a130:	bne.w	a38c <usb_isr+0x698>
    a134:	cmp.w	lr, #64	; 0x40
    a138:	bne.n	a200 <usb_isr+0x50c>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a13a:	orr.w	ip, r4, #2
    a13e:	add.w	r3, r9, ip, lsl #3
    a142:	ldr	r4, [sp, #4]
    a144:	ldr.w	lr, [pc, #440]	; a300 <usb_isr+0x60c>
    a148:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a14a:	cmp	r2, #0
    a14c:	bne.w	a3b8 <usb_isr+0x6c4>
    a150:	lsls	r2, r0, #16
    a152:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    a156:	ldrb.w	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a15a:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a15e:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    a160:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    a162:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a164:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    a166:	cmp	r0, #64	; 0x40
    a168:	bne.n	a200 <usb_isr+0x50c>
    a16a:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    a16c:	ldr	r2, [pc, #384]	; (a2f0 <usb_isr+0x5fc>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    a16e:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    a170:	strh	r0, [r2, #0]
    a172:	b.n	a200 <usb_isr+0x50c>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    a174:	ldrb	r3, [r1, r6]
    a176:	cmp	r3, #3
    a178:	bhi.w	a3e8 <usb_isr+0x6f4>
    a17c:	add	r2, pc, #4	; (adr r2, a184 <usb_isr+0x490>)
    a17e:	ldr.w	pc, [r2, r3, lsl #2]
    a182:	nop
    a184:	.word	0x00009d89
    a188:	.word	0x00009d89
    a18c:	.word	0x0000a25d
    a190:	.word	0x0000a257
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
			int i;
			uint32_t *line_coding = NULL;
			switch (setup.wIndex) {
    a194:	ldrh	r2, [r2, #4]
    a196:	cbnz	r2, a1bc <usb_isr+0x4c8>
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    a198:	ldr	r2, [pc, #344]	; (a2f4 <usb_isr+0x600>)
    a19a:	ldrb	r5, [r1, #0]
    a19c:	ldrb	r4, [r1, #1]
    a19e:	strb	r5, [r2, #0]
    a1a0:	strb	r4, [r2, #1]
    a1a2:	ldrb	r5, [r1, #2]
    a1a4:	ldrb	r4, [r1, #3]
    a1a6:	strb	r5, [r2, #2]
    a1a8:	strb	r4, [r2, #3]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    a1aa:	ldr	r4, [r2, #0]
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    a1ac:	ldrb	r5, [r1, #4]
    a1ae:	strb	r5, [r2, #4]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    a1b0:	cmp	r4, #134	; 0x86
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    a1b2:	ldrb	r5, [r1, #5]
    a1b4:	ldrb	r1, [r1, #6]
    a1b6:	strb	r5, [r2, #5]
    a1b8:	strb	r1, [r2, #6]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    a1ba:	beq.n	a2b8 <usb_isr+0x5c4>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a1bc:	ldr	r1, [pc, #296]	; (a2e8 <usb_isr+0x5f4>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a1be:	ldr	r6, [pc, #300]	; (a2ec <usb_isr+0x5f8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a1c0:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a1c2:	ldrb	r4, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a1c4:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a1c8:	cmp	r4, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a1ca:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a1ce:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a1d0:	ite	eq
    a1d2:	moveq	r1, #136	; 0x88
    a1d4:	movne	r1, #200	; 0xc8
    a1d6:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a1da:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    a1de:	eor.w	r4, r4, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a1e2:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    a1e4:	strb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a1e6:	str	r1, [r2, #4]
    a1e8:	b.n	9fa0 <usb_isr+0x2ac>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a1ea:	movw	r2, #26273	; 0x66a1
    a1ee:	cmp	r1, r2
    a1f0:	beq.n	a1fa <usb_isr+0x506>
    a1f2:	movw	r2, #26529	; 0x67a1
    a1f6:	cmp	r1, r2
    a1f8:	beq.n	a2c0 <usb_isr+0x5cc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    a1fa:	ldr	r2, [pc, #252]	; (a2f8 <usb_isr+0x604>)
    a1fc:	movs	r3, #15
    a1fe:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    a200:	ldr	r2, [pc, #248]	; (a2fc <usb_isr+0x608>)
    a202:	movs	r3, #1
    a204:	strb	r3, [r2, #0]
    a206:	b.n	9f8a <usb_isr+0x296>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    a208:	ldr	r3, [pc, #244]	; (a300 <usb_isr+0x60c>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    a20a:	ldr	r0, [pc, #240]	; (a2fc <usb_isr+0x608>)
		ep0_tx_bdt_bank = 0;
    a20c:	ldr	r1, [pc, #216]	; (a2e8 <usb_isr+0x5f4>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    a20e:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    a210:	mov.w	lr, #2
    a214:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    a218:	ldr	r7, [pc, #220]	; (a2f8 <usb_isr+0x604>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    a21a:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    a21c:	ldr	r1, [pc, #228]	; (a304 <usb_isr+0x610>)
    a21e:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    a220:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    a222:	ldr	r6, [pc, #176]	; (a2d4 <usb_isr+0x5e0>)
		USB0_ISTAT = 0xFF;
    a224:	ldr	r5, [pc, #176]	; (a2d8 <usb_isr+0x5e4>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    a226:	ldr	r4, [pc, #224]	; (a308 <usb_isr+0x614>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    a228:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    a22a:	movs	r1, #13
    a22c:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    a22e:	movs	r1, #255	; 0xff
    a230:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    a232:	ldr.w	lr, [pc, #236]	; a320 <usb_isr+0x62c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    a236:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    a238:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    a23a:	ldr	r5, [pc, #208]	; (a30c <usb_isr+0x618>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    a23c:	ldr	r2, [pc, #208]	; (a310 <usb_isr+0x61c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    a23e:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    a242:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    a244:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    a246:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    a24a:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    a24c:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    a24e:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    a250:	add	sp, #28
    a252:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    a256:	movs	r3, #1
    a258:	strb	r3, [r1, r6]
						break;
    a25a:	b.n	9d88 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    a25c:	movs	r3, #0
    a25e:	strb	r3, [r1, r6]
						break;
    a260:	b.n	9d88 <usb_isr+0x94>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a262:	cmp.w	r1, #1280	; 0x500
    a266:	beq.w	a4f8 <usb_isr+0x804>
    a26a:	bcc.n	a1fa <usb_isr+0x506>
    a26c:	sub.w	r1, r1, #1664	; 0x680
    a270:	cmp	r1, #1
    a272:	bhi.n	a1fa <usb_isr+0x506>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    a274:	ldr	r2, [pc, #156]	; (a314 <usb_isr+0x620>)
    a276:	ldr	r4, [r2, #4]
    a278:	cmp	r4, #0
    a27a:	beq.n	a1fa <usb_isr+0x506>
    a27c:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    a27e:	ldrh.w	lr, [r5, #4]
    a282:	b.n	a28c <usb_isr+0x598>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    a284:	adds	r2, #12
			if (list->addr == NULL) break;
    a286:	ldr	r4, [r2, #4]
    a288:	cmp	r4, #0
    a28a:	beq.n	a1fa <usb_isr+0x506>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    a28c:	ldrh	r3, [r2, #0]
    a28e:	cmp	r3, r0
    a290:	bne.n	a284 <usb_isr+0x590>
    a292:	ldrh	r3, [r2, #2]
    a294:	cmp	r3, lr
    a296:	bne.n	a284 <usb_isr+0x590>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    a298:	lsrs	r0, r0, #8
    a29a:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    a29c:	ite	eq
    a29e:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    a2a0:	ldrhne	r0, [r2, #8]
    a2a2:	b.n	a0de <usb_isr+0x3ea>
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    a2a4:	ldr	r1, [pc, #80]	; (a2f8 <usb_isr+0x604>)
		USB0_ISTAT = USB_ISTAT_STALL;
    a2a6:	ldr	r3, [pc, #48]	; (a2d8 <usb_isr+0x5e4>)
    a2a8:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    a2aa:	movs	r0, #13
    a2ac:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    a2ae:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    a2b0:	lsls	r2, r4, #30
    a2b2:	bpl.w	a088 <usb_isr+0x394>
    a2b6:	b.n	a07a <usb_isr+0x386>
					//serial_phex(*buf);
					*dst++ = *buf++;
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    a2b8:	ldr	r2, [pc, #92]	; (a318 <usb_isr+0x624>)
    a2ba:	movs	r1, #15
    a2bc:	strb	r1, [r2, #0]
    a2be:	b.n	a1bc <usb_isr+0x4c8>
		// TODO: required by PTP spec
		endpoint0_stall();
		return;
	case 0x67A1: // Get Device Statis (PTP spec, 5.2.4, page 10)
		// For now, always respond with status ok.
		reply_buffer[0] = 0x4;
    a2c0:	ldr	r4, [pc, #32]	; (a2e4 <usb_isr+0x5f0>)
    a2c2:	ldr	r3, [pc, #88]	; (a31c <usb_isr+0x628>)
    a2c4:	str	r3, [r4, #0]
		reply_buffer[1] = 0;
		reply_buffer[2] = 0x01;
		reply_buffer[3] = 0x20;
		data = reply_buffer;
		datalen = 4;
    a2c6:	movs	r0, #4
    a2c8:	b.n	a0de <usb_isr+0x3ea>
    a2ca:	nop
    a2cc:	.word	0x1fff1ab0
    a2d0:	.word	0x1fff1af8
    a2d4:	.word	0x40072088
    a2d8:	.word	0x40072080
    a2dc:	.word	0x1fff1ae9
    a2e0:	.word	0x1fff19f8
    a2e4:	.word	0x1fff1aec
    a2e8:	.word	0x1fff1ae8
    a2ec:	.word	0x1fff1a6c
    a2f0:	.word	0x1fff1a10
    a2f4:	.word	0x1fff1b64
    a2f8:	.word	0x400720c0
    a2fc:	.word	0x40072094
    a300:	.word	0x1fff0000
    a304:	.word	0x00400088
    a308:	.word	0x40072098
    a30c:	.word	0x1fff1a14
    a310:	.word	0x1fff1a70
    a314:	.word	0x00010058
    a318:	.word	0x1fff1a6d
    a31c:	.word	0x20010004
    a320:	.word	0x4007208c
    a324:	ldrh	r1, [r5, #4]
    a326:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    a32a:	cmp	r1, #6
    a32c:	bhi.w	a1fa <usb_isr+0x506>
    a330:	ldrh	r2, [r5, #2]
    a332:	cmp	r2, #0
    a334:	bne.w	a1fa <usb_isr+0x506>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    a338:	ldr	r4, [pc, #724]	; (a610 <usb_isr+0x91c>)
    a33a:	str	r0, [sp, #8]
    a33c:	lsls	r1, r1, #2
    a33e:	add	r4, r1
    a340:	ldrb	r1, [r4, #0]
    a342:	bic.w	r1, r1, #2
    a346:	strb	r1, [r4, #0]
    a348:	b.n	a364 <usb_isr+0x670>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    a34a:	ldrh	r1, [r5, #4]
    a34c:	cmp	r1, #0
    a34e:	bne.w	a526 <usb_isr+0x832>
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a352:	ldr	r3, [pc, #704]	; (a614 <usb_isr+0x920>)
    a354:	ldr	r2, [pc, #704]	; (a618 <usb_isr+0x924>)
			usb_cdc_line_rtsdtr = setup.wValue;
    a356:	ldr	r4, [pc, #708]	; (a61c <usb_isr+0x928>)
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a358:	ldr	r3, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    a35a:	ldrb	r5, [r5, #2]
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a35c:	str	r3, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    a35e:	str	r0, [sp, #8]
    a360:	mov	r2, r1
    a362:	strb	r5, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    a364:	movs	r0, #0
    a366:	str	r0, [sp, #4]
    a368:	mov	r8, r0
    a36a:	mov	lr, r0
    a36c:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a36e:	ldr	r1, [pc, #688]	; (a620 <usb_isr+0x92c>)
    a370:	ldrb	r5, [r1, #0]
    a372:	orr.w	ip, r5, #2
    a376:	add.w	r3, r9, ip, lsl #3
    a37a:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a37c:	ldr	r3, [sp, #8]
    a37e:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a380:	ldr	r3, [sp, #12]
    a382:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a384:	ite	eq
    a386:	moveq	r4, #136	; 0x88
    a388:	movne	r4, #200	; 0xc8
    a38a:	b.n	a114 <usb_isr+0x420>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    a38c:	cmp	r0, #64	; 0x40
    a38e:	bls.w	a13a <usb_isr+0x446>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a392:	orr.w	r4, r4, #2
    a396:	add.w	r1, ip, r4, lsl #3
    a39a:	ldr	r6, [sp, #4]
    a39c:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a39e:	cbz	r2, a3d0 <usb_isr+0x6dc>
	ep0_tx_data_toggle ^= 1;
    a3a0:	ldrb.w	r1, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a3a4:	ldr	r2, [pc, #636]	; (a624 <usb_isr+0x930>)
	ep0_tx_data_toggle ^= 1;
    a3a6:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a3a8:	mov	r3, r6
    a3aa:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a3ac:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a3b0:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a3b2:	str.w	r2, [ip, r4, lsl #3]
    a3b6:	b.n	a16c <usb_isr+0x478>
	ep0_tx_data_toggle ^= 1;
    a3b8:	ldrb.w	r3, [sp, #8]
    a3bc:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a3be:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a3c0:	ldr	r3, [sp, #4]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a3c2:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a3c4:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a3c8:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a3ca:	str.w	r2, [lr, ip, lsl #3]
    a3ce:	b.n	a166 <usb_isr+0x472>
	ep0_tx_data_toggle ^= 1;
    a3d0:	ldrb.w	r1, [sp, #8]
    a3d4:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a3d6:	ldr	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a3d8:	ldr	r2, [pc, #588]	; (a628 <usb_isr+0x934>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a3da:	strb.w	r5, [r8]
    a3de:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a3e0:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a3e2:	str.w	r2, [ip, r4, lsl #3]
    a3e6:	b.n	a16c <usb_isr+0x478>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    a3e8:	tst.w	r9, #8
    a3ec:	ite	eq
    a3ee:	moveq	r3, #2
    a3f0:	movne	r3, #3
    a3f2:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    a3f4:	b.n	9d88 <usb_isr+0x94>
    a3f6:	ldrh	r1, [r5, #4]
    a3f8:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    a3fc:	cmp	r1, #6
    a3fe:	bhi.w	a1fa <usb_isr+0x506>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    a402:	ldr	r3, [pc, #524]	; (a610 <usb_isr+0x91c>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    a404:	ldr	r4, [pc, #548]	; (a62c <usb_isr+0x938>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    a406:	lsls	r1, r1, #2
    a408:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    a40a:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    a40c:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    a40e:	ldrb	r2, [r3, #0]
    a410:	lsls	r3, r2, #30
    a412:	bpl.w	a52a <usb_isr+0x836>
    a416:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    a418:	movs	r0, #2
    a41a:	b.n	a0de <usb_isr+0x3ea>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    a41c:	ldr	r3, [sp, #4]
    a41e:	mov.w	r2, #1
    a422:	strb	r2, [r3, #0]
    a424:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    a426:	adds	r4, #1
    a428:	adds	r3, #1
    a42a:	cmp	r4, #6
    a42c:	add.w	r6, r6, #4
    a430:	add.w	r5, r5, #4
    a434:	str	r3, [sp, #4]
    a436:	bne.w	9ec6 <usb_isr+0x1d2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a43a:	ldr	r5, [pc, #500]	; (a630 <usb_isr+0x93c>)
			*reg = epconf;
    a43c:	ldr	r1, [pc, #500]	; (a634 <usb_isr+0x940>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a43e:	ldrb	r2, [r5, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    a440:	ldr	r4, [pc, #500]	; (a638 <usb_isr+0x944>)
    a442:	ldr	r7, [sp, #16]
    a444:	ldr	r6, [sp, #20]
    a446:	movs	r0, #0
    a448:	strb	r0, [r4, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    a44a:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a44c:	lsls	r1, r2, #28
    a44e:	bmi.w	a55c <usb_isr+0x868>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a452:	ldrb	r2, [r5, #1]
			*reg = epconf;
    a454:	ldr	r1, [pc, #484]	; (a63c <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a456:	ldr.w	r8, [pc, #504]	; a650 <usb_isr+0x95c>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    a45a:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a45c:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a45e:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a460:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    a464:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a468:	bmi.n	a52e <usb_isr+0x83a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a46a:	ldrb	r2, [r5, #2]
			*reg = epconf;
    a46c:	ldr	r1, [pc, #464]	; (a640 <usb_isr+0x94c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a46e:	ldr.w	r8, [pc, #480]	; a650 <usb_isr+0x95c>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    a472:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a474:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a476:	mov.w	r1, #0
    a47a:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    a47e:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a482:	bmi.w	a658 <usb_isr+0x964>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a486:	ldrb	r2, [r5, #3]
			*reg = epconf;
    a488:	ldr	r1, [pc, #440]	; (a644 <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a48a:	ldr.w	r8, [pc, #452]	; a650 <usb_isr+0x95c>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    a48e:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a490:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a492:	mov.w	r1, #0
    a496:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    a49a:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a49e:	bmi.w	a5e6 <usb_isr+0x8f2>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    a4a2:	ldr	r1, [pc, #420]	; (a648 <usb_isr+0x954>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a4a4:	ldrb	r2, [r5, #4]
			*reg = epconf;
    a4a6:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a4a8:	movs	r1, #0
    a4aa:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    a4ae:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a4b2:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a4b4:	ldr.w	r8, [pc, #408]	; a650 <usb_isr+0x95c>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a4b8:	bmi.n	a5b8 <usb_isr+0x8c4>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a4ba:	ldrb	r2, [r5, #5]
			*reg = epconf;
    a4bc:	ldr	r1, [pc, #396]	; (a64c <usb_isr+0x958>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a4be:	ldr	r5, [pc, #400]	; (a650 <usb_isr+0x95c>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    a4c0:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a4c2:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a4c4:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a4c6:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    a4ca:	str.w	r1, [r9, #184]	; 0xb8
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a4ce:	bmi.n	a58a <usb_isr+0x896>
    a4d0:	ldrb	r3, [r6, #0]
    a4d2:	str	r3, [sp, #8]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a4d4:	movs	r1, #0
    a4d6:	eor.w	r2, r3, #1
    a4da:	str.w	r1, [r9, #208]	; 0xd0
			table[index(i, TX, ODD)].desc = 0;
    a4de:	str.w	r1, [r9, #216]	; 0xd8
    a4e2:	b.n	a364 <usb_isr+0x670>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    a4e4:	ldr	r3, [sp, #4]
    a4e6:	mov.w	r2, #0
    a4ea:	strb	r2, [r3, #0]
    a4ec:	b.n	a424 <usb_isr+0x730>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    a4ee:	ldr	r2, [pc, #356]	; (a654 <usb_isr+0x960>)
    a4f0:	ldr	r4, [pc, #312]	; (a62c <usb_isr+0x938>)
    a4f2:	ldrb	r2, [r2, #0]
    a4f4:	strb	r2, [r4, #0]
    a4f6:	b.n	a0de <usb_isr+0x3ea>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a4f8:	movs	r3, #1
    a4fa:	movs	r2, #0
    a4fc:	str	r3, [sp, #8]
    a4fe:	b.n	a364 <usb_isr+0x670>
    a500:	ldrh	r1, [r5, #4]
    a502:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    a506:	cmp	r1, #6
    a508:	bhi.w	a1fa <usb_isr+0x506>
    a50c:	ldrh	r2, [r5, #2]
    a50e:	cmp	r2, #0
    a510:	bne.w	a1fa <usb_isr+0x506>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    a514:	ldr	r4, [pc, #248]	; (a610 <usb_isr+0x91c>)
    a516:	str	r0, [sp, #8]
    a518:	lsls	r1, r1, #2
    a51a:	add	r4, r1
    a51c:	ldrb	r1, [r4, #0]
    a51e:	orr.w	r1, r1, #2
    a522:	strb	r1, [r4, #0]
    a524:	b.n	a364 <usb_isr+0x670>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    a526:	str	r0, [sp, #8]
    a528:	b.n	a364 <usb_isr+0x670>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    a52a:	movs	r0, #2
    a52c:	b.n	a0de <usb_isr+0x3ea>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a52e:	bl	9a74 <usb_malloc>
				if (p) {
    a532:	cmp	r0, #0
    a534:	beq.w	a70e <usb_isr+0xa1a>
					table[index(i, RX, EVEN)].addr = p->buf;
    a538:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a53a:	ldr	r2, [pc, #236]	; (a628 <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a53c:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a540:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a544:	bl	9a74 <usb_malloc>
				if (p) {
    a548:	cmp	r0, #0
    a54a:	beq.w	a702 <usb_isr+0xa0e>
					table[index(i, RX, ODD)].addr = p->buf;
    a54e:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a550:	ldr	r2, [pc, #208]	; (a624 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a552:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a556:	str.w	r2, [r9, #72]	; 0x48
    a55a:	b.n	a46a <usb_isr+0x776>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a55c:	bl	9a74 <usb_malloc>
				if (p) {
    a560:	cmp	r0, #0
    a562:	beq.w	a6de <usb_isr+0x9ea>
					table[index(i, RX, EVEN)].addr = p->buf;
    a566:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a568:	ldr	r2, [pc, #188]	; (a628 <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a56a:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a56e:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a572:	bl	9a74 <usb_malloc>
				if (p) {
    a576:	cmp	r0, #0
    a578:	beq.w	a6d2 <usb_isr+0x9de>
					table[index(i, RX, ODD)].addr = p->buf;
    a57c:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a57e:	ldr	r2, [pc, #164]	; (a624 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a580:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a584:	str.w	r2, [r9, #40]	; 0x28
    a588:	b.n	a452 <usb_isr+0x75e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a58a:	bl	9a74 <usb_malloc>
				if (p) {
    a58e:	cmp	r0, #0
    a590:	beq.w	a6c6 <usb_isr+0x9d2>
					table[index(i, RX, EVEN)].addr = p->buf;
    a594:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a596:	ldr	r2, [pc, #144]	; (a628 <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a598:	str.w	r0, [r5, #196]	; 0xc4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a59c:	str.w	r2, [r5, #192]	; 0xc0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a5a0:	bl	9a74 <usb_malloc>
				if (p) {
    a5a4:	cmp	r0, #0
    a5a6:	beq.w	a6ba <usb_isr+0x9c6>
					table[index(i, RX, ODD)].addr = p->buf;
    a5aa:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a5ac:	ldr	r2, [pc, #116]	; (a624 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a5ae:	str.w	r0, [r9, #204]	; 0xcc
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a5b2:	str.w	r2, [r9, #200]	; 0xc8
    a5b6:	b.n	a4d0 <usb_isr+0x7dc>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a5b8:	bl	9a74 <usb_malloc>
				if (p) {
    a5bc:	cmp	r0, #0
    a5be:	beq.w	a6f6 <usb_isr+0xa02>
					table[index(i, RX, EVEN)].addr = p->buf;
    a5c2:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a5c4:	ldr	r2, [pc, #96]	; (a628 <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a5c6:	str.w	r0, [r8, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a5ca:	str.w	r2, [r8, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a5ce:	bl	9a74 <usb_malloc>
				if (p) {
    a5d2:	cmp	r0, #0
    a5d4:	beq.w	a6ea <usb_isr+0x9f6>
					table[index(i, RX, ODD)].addr = p->buf;
    a5d8:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a5da:	ldr	r2, [pc, #72]	; (a624 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a5dc:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a5e0:	str.w	r2, [r9, #168]	; 0xa8
    a5e4:	b.n	a4ba <usb_isr+0x7c6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a5e6:	bl	9a74 <usb_malloc>
				if (p) {
    a5ea:	cmp	r0, #0
    a5ec:	beq.n	a6ae <usb_isr+0x9ba>
					table[index(i, RX, EVEN)].addr = p->buf;
    a5ee:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a5f0:	ldr	r2, [pc, #52]	; (a628 <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a5f2:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a5f6:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a5fa:	bl	9a74 <usb_malloc>
				if (p) {
    a5fe:	cmp	r0, #0
    a600:	beq.n	a6a2 <usb_isr+0x9ae>
					table[index(i, RX, ODD)].addr = p->buf;
    a602:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a604:	ldr	r2, [pc, #28]	; (a624 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a606:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a60a:	str.w	r2, [r9, #136]	; 0x88
    a60e:	b.n	a4a2 <usb_isr+0x7ae>
    a610:	.word	0x400720c0
    a614:	.word	0x1fff19f0
    a618:	.word	0x1fff1b6c
    a61c:	.word	0x1fff19ec
    a620:	.word	0x1fff1ae8
    a624:	.word	0x004000c8
    a628:	.word	0x00400088
    a62c:	.word	0x1fff1aec
    a630:	.word	0x00010050
    a634:	.word	0x400720c4
    a638:	.word	0x1fff1ae9
    a63c:	.word	0x400720c8
    a640:	.word	0x400720cc
    a644:	.word	0x400720d0
    a648:	.word	0x400720d4
    a64c:	.word	0x400720d8
    a650:	.word	0x1fff0000
    a654:	.word	0x1fff1af4
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a658:	bl	9a74 <usb_malloc>
				if (p) {
    a65c:	cmp	r0, #0
    a65e:	beq.n	a726 <usb_isr+0xa32>
					table[index(i, RX, EVEN)].addr = p->buf;
    a660:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a662:	ldr	r2, [pc, #208]	; (a734 <usb_isr+0xa40>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a664:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a668:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a66c:	bl	9a74 <usb_malloc>
				if (p) {
    a670:	cmp	r0, #0
    a672:	beq.n	a71a <usb_isr+0xa26>
					table[index(i, RX, ODD)].addr = p->buf;
    a674:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a676:	ldr	r2, [pc, #192]	; (a738 <usb_isr+0xa44>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a678:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a67c:	str.w	r2, [r9, #104]	; 0x68
    a680:	b.n	a486 <usb_isr+0x792>
    a682:	cmp	r0, #64	; 0x40
    a684:	mov	lr, r0
    a686:	it	cs
    a688:	movcs.w	lr, #64	; 0x40
    a68c:	add.w	r3, r4, lr
    a690:	str	r3, [sp, #4]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    a692:	movs	r3, #1
    a694:	rsb	r0, lr, r0
    a698:	mov.w	r8, lr, lsl #16
    a69c:	movs	r2, #0
    a69e:	str	r3, [sp, #8]
    a6a0:	b.n	a36e <usb_isr+0x67a>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a6a2:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a6a4:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    a6a8:	adds	r2, #1
    a6aa:	strb	r2, [r4, #0]
    a6ac:	b.n	a4a2 <usb_isr+0x7ae>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a6ae:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a6b0:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    a6b4:	adds	r2, #1
    a6b6:	strb	r2, [r4, #0]
    a6b8:	b.n	a5fa <usb_isr+0x906>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a6ba:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a6bc:	str.w	r0, [r9, #200]	; 0xc8
					usb_rx_memory_needed++;
    a6c0:	adds	r2, #1
    a6c2:	strb	r2, [r4, #0]
    a6c4:	b.n	a4d0 <usb_isr+0x7dc>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a6c6:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a6c8:	str.w	r0, [r5, #192]	; 0xc0
					usb_rx_memory_needed++;
    a6cc:	adds	r2, #1
    a6ce:	strb	r2, [r4, #0]
    a6d0:	b.n	a5a0 <usb_isr+0x8ac>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a6d2:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a6d4:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    a6d8:	adds	r2, #1
    a6da:	strb	r2, [r4, #0]
    a6dc:	b.n	a452 <usb_isr+0x75e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a6de:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a6e0:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    a6e4:	adds	r2, #1
    a6e6:	strb	r2, [r4, #0]
    a6e8:	b.n	a572 <usb_isr+0x87e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a6ea:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a6ec:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    a6f0:	adds	r2, #1
    a6f2:	strb	r2, [r4, #0]
    a6f4:	b.n	a4ba <usb_isr+0x7c6>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a6f6:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a6f8:	str.w	r0, [r8, #160]	; 0xa0
					usb_rx_memory_needed++;
    a6fc:	adds	r2, #1
    a6fe:	strb	r2, [r4, #0]
    a700:	b.n	a5ce <usb_isr+0x8da>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a702:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a704:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    a708:	adds	r2, #1
    a70a:	strb	r2, [r4, #0]
    a70c:	b.n	a46a <usb_isr+0x776>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a70e:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a710:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    a714:	adds	r2, #1
    a716:	strb	r2, [r4, #0]
    a718:	b.n	a544 <usb_isr+0x850>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a71a:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a71c:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    a720:	adds	r2, #1
    a722:	strb	r2, [r4, #0]
    a724:	b.n	a486 <usb_isr+0x792>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a726:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a728:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    a72c:	adds	r2, #1
    a72e:	strb	r2, [r4, #0]
    a730:	b.n	a66c <usb_isr+0x978>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    a732:	bkpt	0x0000
    a734:	.word	0x00400088
    a738:	.word	0x004000c8

0000a73c <usb_init>:
}



void usb_init(void)
{
    a73c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a740:	ldr	r4, [pc, #144]	; (a7d4 <usb_init+0x98>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    a742:	bl	ab74 <usb_init_serialnumber>

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
    a746:	movs	r2, #0
    a748:	add.w	r0, r4, #224	; 0xe0
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    a74c:	mov	r3, r4

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
    a74e:	str	r2, [r3, #0]
		table[i].addr = 0;
    a750:	str	r2, [r3, #4]
    a752:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    a754:	cmp	r3, r0
		table[i].desc = 0;
    a756:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    a75a:	bne.n	a74e <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    a75c:	ldr	r0, [pc, #120]	; (a7d8 <usb_init+0x9c>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    a75e:	ldr	r2, [pc, #124]	; (a7dc <usb_init+0xa0>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    a760:	ldr	r3, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    a762:	ldr.w	lr, [pc, #144]	; a7f4 <usb_init+0xb8>
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    a766:	ldr	r7, [pc, #120]	; (a7e0 <usb_init+0xa4>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    a768:	ldr	r5, [pc, #120]	; (a7e4 <usb_init+0xa8>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    a76a:	ldr	r6, [pc, #124]	; (a7e8 <usb_init+0xac>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    a76c:	ldr.w	r8, [pc, #136]	; a7f8 <usb_init+0xbc>
	USB0_ERRSTAT = 0xFF;
    a770:	ldr.w	ip, [pc, #136]	; a7fc <usb_init+0xc0>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    a774:	ldr.w	r9, [pc, #136]	; a800 <usb_init+0xc4>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    a778:	orr.w	r3, r3, #262144	; 0x40000
    a77c:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    a77e:	ldr	r3, [r2, #0]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    a780:	ldr	r0, [pc, #104]	; (a7ec <usb_init+0xb0>)

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    a782:	orr.w	r3, r3, #50331648	; 0x3000000
    a786:	str	r3, [r2, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    a788:	ubfx	r3, r4, #8, #8
    a78c:	strb.w	r3, [lr]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    a790:	ubfx	r3, r4, #16, #8
    a794:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    a796:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    a798:	movs	r3, #255	; 0xff
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    a79a:	add.w	r2, r2, #411648	; 0x64800
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    a79e:	strb	r4, [r5, #0]
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    a7a0:	add.w	r2, r2, #264	; 0x108
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    a7a4:	strb.w	r3, [r8]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    a7a8:	ldr	r5, [pc, #68]	; (a7f0 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    a7aa:	strb.w	r3, [ip]
	USB0_OTGISTAT = 0xFF;
    a7ae:	strb	r3, [r6, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    a7b0:	movs	r3, #1
    a7b2:	strb.w	r3, [r9]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    a7b6:	movs	r6, #112	; 0x70

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    a7b8:	strb.w	r1, [lr, #100]	; 0x64
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    a7bc:	mov.w	r4, #2097152	; 0x200000

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    a7c0:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    a7c2:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    a7c6:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    a7c8:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    a7ca:	strb	r1, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    a7cc:	add.w	lr, lr, #100	; 0x64
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    a7d0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a7d4:	.word	0x1fff0000
    a7d8:	.word	0x40048034
    a7dc:	.word	0x4000d800
    a7e0:	.word	0x400720b0
    a7e4:	.word	0x400720b4
    a7e8:	.word	0x40072010
    a7ec:	.word	0xe000e104
    a7f0:	.word	0xe000e435
    a7f4:	.word	0x4007209c
    a7f8:	.word	0x40072080
    a7fc:	.word	0x40072088
    a800:	.word	0x40072094

0000a804 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    a804:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    a808:	ldr	r6, [pc, #196]	; (a8d0 <yield+0xcc>)
    a80a:	ldrb	r3, [r6, #0]
    a80c:	cbz	r3, a834 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    a80e:	ldr	r7, [pc, #196]	; (a8d4 <yield+0xd0>)
    a810:	ldrb	r2, [r7, #0]
    a812:	cbnz	r2, a834 <yield+0x30>
	running = 1;
    a814:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    a816:	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    a818:	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    a81a:	bmi.n	a88a <yield+0x86>
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIALUSB2) {
		if (SerialUSB2.available()) serialEventUSB2();
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    a81c:	lsls	r2, r3, #30
    a81e:	bmi.n	a854 <yield+0x50>
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    a820:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a822:	lsls	r3, r3, #29
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    a824:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a826:	bpl.n	a834 <yield+0x30>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;  
    a828:	ldr	r3, [pc, #172]	; (a8d8 <yield+0xd4>)
    a82a:	ldr	r2, [r3, #0]
    a82c:	cbz	r2, a834 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    a82e:	mrs	r2, IPSR
		if (ipsr != 0) return;
    a832:	cbz	r2, a838 <yield+0x34>
    a834:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a838:	mrs	r1, PRIMASK
		__disable_irq();
    a83c:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    a83e:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    a840:	cbz	r0, a84a <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    a842:	ldr	r4, [pc, #152]	; (a8dc <yield+0xd8>)
    a844:	ldrb	r2, [r4, #0]
    a846:	cmp	r2, #0
    a848:	beq.n	a8a8 <yield+0xa4>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a84a:	cmp	r1, #0
    a84c:	bne.n	a834 <yield+0x30>
    a84e:	cpsie	i
    a850:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial_putchar(c); return 1; }
	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    a854:	ldr.w	r8, [pc, #144]	; a8e8 <yield+0xe4>
    a858:	ldrb.w	r2, [r8]
    a85c:	cmp	r2, #0
    a85e:	beq.n	a820 <yield+0x1c>
    a860:	ldr.w	r9, [pc, #136]	; a8ec <yield+0xe8>
    a864:	movs	r4, #0
    a866:	b.n	a874 <yield+0x70>
    a868:	adds	r4, #1
    a86a:	ldrb.w	r3, [r8]
    a86e:	uxtb	r4, r4
    a870:	cmp	r3, r4
    a872:	bls.n	a89a <yield+0x96>
			s_serials_with_serial_events[i]->doYieldCode();
    a874:	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
	static uint8_t 			s_count_serials_with_serial_events;
	void 		(* const _serialEvent)(); 
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*_serialEvent)();
    a878:	ldr	r3, [r5, #0]
    a87a:	mov	r0, r5
    a87c:	ldr	r3, [r3, #16]
    a87e:	blx	r3
    a880:	cmp	r0, #0
    a882:	beq.n	a868 <yield+0x64>
    a884:	ldr	r3, [r5, #16]
    a886:	blx	r3
    a888:	b.n	a868 <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    a88a:	bl	942c <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    a88e:	cbnz	r0, a8c4 <yield+0xc0>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    a890:	ldr	r3, [pc, #76]	; (a8e0 <yield+0xdc>)
    a892:	ldrb	r3, [r3, #0]
    a894:	cbnz	r3, a89e <yield+0x9a>
    a896:	ldrb	r3, [r6, #0]
    a898:	b.n	a81c <yield+0x18>
    a89a:	ldrb	r3, [r6, #0]
    a89c:	b.n	a820 <yield+0x1c>
    a89e:	ldrb	r3, [r6, #0]
    a8a0:	and.w	r3, r3, #254	; 0xfe
    a8a4:	strb	r3, [r6, #0]
    a8a6:	b.n	a81c <yield+0x18>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    a8a8:	ldr	r5, [r0, #20]
    a8aa:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    a8ac:	movs	r3, #1
    a8ae:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    a8b0:	cbz	r5, a8ca <yield+0xc6>
			firstYield->_prev = nullptr;
    a8b2:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a8b4:	cbnz	r1, a8b8 <yield+0xb4>
    a8b6:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    a8b8:	movs	r5, #0
    a8ba:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    a8bc:	ldr	r3, [r0, #8]
    a8be:	blx	r3
		runningFromYield = false;
    a8c0:	strb	r5, [r4, #0]
    a8c2:	b.n	a834 <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    a8c4:	bl	aa88 <serialEvent()>
    a8c8:	b.n	a890 <yield+0x8c>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    a8ca:	ldr	r3, [pc, #24]	; (a8e4 <yield+0xe0>)
    a8cc:	str	r5, [r3, #0]
    a8ce:	b.n	a8b4 <yield+0xb0>
    a8d0:	.word	0x1fff0988
    a8d4:	.word	0x1fff1afe
    a8d8:	.word	0x1fff1b0c
    a8dc:	.word	0x1fff1b10
    a8e0:	.word	0x1fff099c
    a8e4:	.word	0x1fff1b08
    a8e8:	.word	0x1fff1b2c
    a8ec:	.word	0x1fff1b14

0000a8f0 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    a8f0:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a8f2:	mrs	r2, PRIMASK
		__disable_irq();
    a8f6:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    a8f8:	ldr	r4, [pc, #48]	; (a92c <EventResponder::runFromInterrupt()+0x3c>)
    a8fa:	ldr	r0, [r4, #0]
		if (first) {
    a8fc:	cbz	r0, a920 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    a8fe:	ldr	r6, [pc, #48]	; (a930 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    a900:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    a902:	ldr	r3, [r0, #20]
    a904:	str	r3, [r4, #0]
			if (firstInterrupt) {
    a906:	cbz	r3, a926 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    a908:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a90a:	cbnz	r2, a90e <EventResponder::runFromInterrupt()+0x1e>
    a90c:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    a90e:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    a910:	ldr	r3, [r0, #8]
    a912:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a914:	mrs	r2, PRIMASK
		__disable_irq();
    a918:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    a91a:	ldr	r0, [r4, #0]
		if (first) {
    a91c:	cmp	r0, #0
    a91e:	bne.n	a902 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a920:	cbnz	r2, a924 <EventResponder::runFromInterrupt()+0x34>
    a922:	cpsie	i
    a924:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    a926:	str	r3, [r6, #0]
    a928:	b.n	a90a <EventResponder::runFromInterrupt()+0x1a>
    a92a:	nop
    a92c:	.word	0x1fff1b00
    a930:	.word	0x1fff1b04

0000a934 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    a934:	b.w	a8f0 <EventResponder::runFromInterrupt()>

0000a938 <systick_isr>:

extern "C" volatile uint32_t systick_millis_count;

void systick_isr(void)
{
	systick_millis_count++;
    a938:	ldr	r2, [pc, #8]	; (a944 <systick_isr+0xc>)
    a93a:	ldr	r3, [r2, #0]
    a93c:	adds	r3, #1
    a93e:	str	r3, [r2, #0]
    a940:	bx	lr
    a942:	nop
    a944:	.word	0x1fff19f0

0000a948 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    a948:	b.w	9448 <usb_serial_flush_input>

0000a94c <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    a94c:	b.w	93fc <usb_serial_peekchar>

0000a950 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    a950:	b.w	93b4 <usb_serial_getchar>

0000a954 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    a954:	b.w	942c <usb_serial_available>

0000a958 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    a958:	b.w	95e8 <usb_serial_flush_output>

0000a95c <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    a95c:	b.w	95a0 <usb_serial_write_buffer_free>

0000a960 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a960:	mov	r0, r1
    a962:	mov	r1, r2
    a964:	b.w	9480 <usb_serial_write>

0000a968 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a968:	mov	r0, r1
    a96a:	b.w	9588 <usb_serial_putchar>
    a96e:	nop

0000a970 <Print::write(unsigned char const*, unsigned int)>:

#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
    a970:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    a972:	mov	r6, r1
    a974:	cbz	r1, a994 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    a976:	cbz	r2, a998 <Print::write(unsigned char const*, unsigned int)+0x28>
    a978:	mov	r7, r0
    a97a:	mov	r4, r2
    a97c:	movs	r5, #0
    a97e:	ldr	r3, [r7, #0]
    a980:	ldrb.w	r1, [r6], #1
    a984:	ldr	r3, [r3, #0]
    a986:	mov	r0, r7
    a988:	blx	r3
    a98a:	subs	r4, #1
    a98c:	add	r5, r0
    a98e:	bne.n	a97e <Print::write(unsigned char const*, unsigned int)+0xe>
    a990:	mov	r0, r5
    a992:	pop	{r3, r4, r5, r6, r7, pc}
#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    a994:	mov	r0, r1
    a996:	pop	{r3, r4, r5, r6, r7, pc}
    a998:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    a99a:	pop	{r3, r4, r5, r6, r7, pc}

0000a99c <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    a99c:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    a99e:	ldr	r2, [pc, #24]	; (a9b8 <Print::println()+0x1c>)
	return write(buf, 2);
    a9a0:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    a9a2:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    a9a4:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    a9a6:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    a9a8:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    a9aa:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    a9ae:	movs	r2, #2
    a9b0:	blx	r3
}
    a9b2:	add	sp, #12
    a9b4:	ldr.w	pc, [sp], #4
    a9b8:	.word	0x0001004c

0000a9bc <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    a9bc:	push	{r4, lr}
	((class Print *)file)->write((uint8_t *)ptr, len);
    a9be:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    a9c0:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    a9c2:	ldr	r3, [r3, #4]
    a9c4:	blx	r3
	return len;
}
    a9c6:	mov	r0, r4
    a9c8:	pop	{r4, pc}
    a9ca:	nop

0000a9cc <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    a9cc:	push	{r1, r2, r3}
    a9ce:	push	{lr}
    a9d0:	sub	sp, #8
    a9d2:	add	r2, sp, #12
    a9d4:	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    a9d8:	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    a9da:	bl	c808 <vdprintf>
#endif
}
    a9de:	add	sp, #8
    a9e0:	ldr.w	lr, [sp], #4
    a9e4:	add	sp, #12
    a9e6:	bx	lr

0000a9e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    a9e8:	push	{r4, r5, r6, r7, lr}
    a9ea:	mov	r7, r0
    a9ec:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    a9ee:	cmp	r2, #0
    a9f0:	beq.n	aa5a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    a9f2:	cmp	r2, #1
    a9f4:	it	eq
    a9f6:	moveq	r2, #10
	}


	if (n == 0) {
    a9f8:	cbz	r1, aa50 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    a9fa:	movs	r4, #33	; 0x21
    a9fc:	b.n	aa00 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    a9fe:	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    aa00:	udiv	r5, r1, r2
    aa04:	mls	r1, r2, r5, r1
    aa08:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    aa0a:	cmp	r1, #9
    aa0c:	add.w	r1, r0, #48	; 0x30
    aa10:	it	ls
    aa12:	uxtbls	r0, r1
    aa14:	add	r1, sp, #40	; 0x28
    aa16:	it	hi
    aa18:	addhi	r0, #55	; 0x37
    aa1a:	add	r1, r4
    aa1c:	it	hi
    aa1e:	uxtbhi	r0, r0
    aa20:	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    aa24:	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    aa26:	mov	r1, r5
    aa28:	cmp	r5, #0
    aa2a:	bne.n	a9fe <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    aa2c:	cbz	r3, aa3c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    aa2e:	subs	r4, #1
    aa30:	uxtb	r4, r4
		buf[i] = '-';
    aa32:	add	r3, sp, #40	; 0x28
    aa34:	add	r3, r4
    aa36:	movs	r2, #45	; 0x2d
    aa38:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    aa3c:	ldr	r3, [r7, #0]
    aa3e:	add	r2, sp, #4
    aa40:	adds	r1, r2, r4
    aa42:	ldr	r3, [r3, #4]
    aa44:	mov	r0, r7
    aa46:	rsb	r2, r4, #34	; 0x22
    aa4a:	blx	r3
}
    aa4c:	add	sp, #44	; 0x2c
    aa4e:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    aa50:	movs	r2, #48	; 0x30
    aa52:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    aa56:	movs	r4, #33	; 0x21
    aa58:	b.n	aa2c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    aa5a:	ldr	r3, [r0, #0]
    aa5c:	uxtb	r1, r1
    aa5e:	ldr	r3, [r3, #0]
    aa60:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    aa62:	add	sp, #44	; 0x2c
    aa64:	pop	{r4, r5, r6, r7, pc}
    aa66:	nop

0000aa68 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    aa68:	cmp	r1, #0
		sign = '-';
		n = -n;
    aa6a:	itte	lt
    aa6c:	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    aa6e:	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    aa70:	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    aa72:	movs	r2, #10
    aa74:	b.w	a9e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

0000aa78 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    aa78:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    aa7a:	bl	680 <setup>
	while (1) {
		loop();
    aa7e:	bl	70c <loop>
		yield();
    aa82:	bl	a804 <yield>
    aa86:	b.n	aa7e <main+0x6>

0000aa88 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    aa88:	bx	lr
    aa8a:	nop

0000aa8c <operator new(unsigned int)>:
    aa8c:	b.w	b8e8 <malloc>

0000aa90 <operator delete(void*, unsigned int)>:
    aa90:	b.w	b8f8 <free>

0000aa94 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    aa94:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    aa96:	ldr	r0, [pc, #164]	; (ab3c <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    aa98:	ldr	r2, [pc, #164]	; (ab40 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    aa9a:	ldr	r3, [pc, #168]	; (ab44 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    aa9c:	ldr	r5, [pc, #168]	; (ab48 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    aa9e:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    aaa0:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    aaa2:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    aaa4:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    aaa6:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    aaa8:	ldr	r4, [pc, #160]	; (ab4c <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    aaaa:	cmp	r3, #8
    aaac:	beq.n	ab10 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    aaae:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    aab0:	ldr	r0, [pc, #156]	; (ab50 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    aab2:	ldr	r1, [pc, #160]	; (ab54 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    aab4:	beq.n	ab26 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    aab6:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    aab8:	ite	eq
    aaba:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    aabc:	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    aabe:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    aac0:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    aac2:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    aac4:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    aac6:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    aac8:	ldr	r3, [pc, #140]	; (ab58 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    aaca:	ldr	r1, [pc, #144]	; (ab5c <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    aacc:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    aace:	ldr	r2, [pc, #144]	; (ab60 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    aad0:	cbz	r3, ab02 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    aad2:	movs	r3, #1
    aad4:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    aad6:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    aad8:	ldr	r3, [pc, #136]	; (ab64 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    aada:	ldr	r1, [pc, #140]	; (ab68 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    aadc:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    aade:	ldr	r2, [pc, #140]	; (ab6c <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    aae0:	cmp	r3, #1
    aae2:	bls.n	ab32 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    aae4:	cmp	r3, #4
    aae6:	bls.n	ab08 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    aae8:	cmp	r3, #8
    aaea:	bls.n	ab2a <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    aaec:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    aaee:	ite	ls
    aaf0:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    aaf2:	movhi	r3, #135	; 0x87
    aaf4:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    aaf6:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    aaf8:	ldr	r3, [pc, #116]	; (ab70 <analog_init+0xdc>)
    aafa:	movs	r2, #1
    aafc:	strb	r2, [r3, #0]
}
    aafe:	pop	{r4, r5}
    ab00:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    ab02:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    ab04:	str	r3, [r2, #0]
    ab06:	b.n	aad8 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    ab08:	movs	r3, #132	; 0x84
    ab0a:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    ab0c:	str	r3, [r2, #0]
    ab0e:	b.n	aaf8 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    ab10:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    ab14:	ldr	r1, [pc, #60]	; (ab54 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    ab16:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    ab18:	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    ab1a:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    ab1c:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    ab1e:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    ab20:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    ab22:	str	r3, [r1, #0]
    ab24:	b.n	aac8 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    ab26:	movs	r2, #57	; 0x39
    ab28:	b.n	ab1a <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    ab2a:	movs	r3, #133	; 0x85
    ab2c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    ab2e:	str	r3, [r2, #0]
    ab30:	b.n	aaf8 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    ab32:	movs	r3, #128	; 0x80
    ab34:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    ab36:	str	r3, [r2, #0]
    ab38:	b.n	aaf8 <analog_init+0x64>
    ab3a:	nop
    ab3c:	.word	0x40074000
    ab40:	.word	0x40074001
    ab44:	.word	0x1fff099d
    ab48:	.word	0x4003b008
    ab4c:	.word	0x4003b00c
    ab50:	.word	0x400bb008
    ab54:	.word	0x400bb00c
    ab58:	.word	0x1fff1b2e
    ab5c:	.word	0x4003b020
    ab60:	.word	0x400bb020
    ab64:	.word	0x1fff099e
    ab68:	.word	0x4003b024
    ab6c:	.word	0x400bb024
    ab70:	.word	0x1fff1b2d

0000ab74 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    ab74:	cpsid	i
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    ab76:	ldr	r2, [pc, #96]	; (abd8 <usb_init_serialnumber+0x64>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    ab78:	ldr	r3, [pc, #96]	; (abdc <usb_init_serialnumber+0x68>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    ab7a:	ldr	r1, [pc, #100]	; (abe0 <usb_init_serialnumber+0x6c>)
    ab7c:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    ab7e:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    ab80:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    ab82:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    ab84:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    ab86:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    ab88:	ldrb	r3, [r2, #0]
    ab8a:	lsls	r3, r3, #24
    ab8c:	bpl.n	ab88 <usb_init_serialnumber+0x14>
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    ab8e:	push	{r4, lr}
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    ab90:	ldr	r3, [pc, #80]	; (abe4 <usb_init_serialnumber+0x70>)
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    ab92:	sub	sp, #16
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    ab94:	ldr	r0, [r3, #0]
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    ab96:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    ab98:	ldr	r3, [pc, #76]	; (abe8 <usb_init_serialnumber+0x74>)
    ab9a:	ldr	r4, [pc, #80]	; (abec <usb_init_serialnumber+0x78>)
    ab9c:	cmp	r0, r3
    ab9e:	it	ls
    aba0:	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    aba4:	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    aba6:	it	ls
    aba8:	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    abaa:	movs	r2, #10
    abac:	bl	abf0 <ultoa>
    abb0:	add	r1, sp, #4
    abb2:	mov	r0, r4
	for (i=0; i<10; i++) {
    abb4:	movs	r3, #0
		char c = buf[i];
    abb6:	ldrb.w	r2, [r1], #1
    abba:	adds	r3, #1
		if (!c) break;
    abbc:	cbz	r2, abce <usb_init_serialnumber+0x5a>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    abbe:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    abc0:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    abc4:	bne.n	abb6 <usb_init_serialnumber+0x42>
    abc6:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    abc8:	strb	r3, [r4, #0]
}
    abca:	add	sp, #16
    abcc:	pop	{r4, pc}
    abce:	lsls	r3, r3, #1
    abd0:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    abd2:	strb	r3, [r4, #0]
}
    abd4:	add	sp, #16
    abd6:	pop	{r4, pc}
    abd8:	.word	0x40020004
    abdc:	.word	0x40020000
    abe0:	.word	0x41070000
    abe4:	.word	0x4002000c
    abe8:	.word	0x0098967f
    abec:	.word	0x1fff0a74

0000abf0 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    abf0:	push	{r4, r5, r6, r7}
    abf2:	subs	r5, r1, #1
    abf4:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    abf6:	movs	r4, #0
    abf8:	b.n	abfc <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    abfa:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    abfc:	udiv	r3, r0, r2
    ac00:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    ac04:	cmp	r0, #9
    ac06:	add.w	r7, r0, #48	; 0x30
    ac0a:	itet	hi
    ac0c:	addhi	r0, #55	; 0x37
    ac0e:	uxtbls	r0, r7
    ac10:	uxtbhi	r0, r0
    ac12:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    ac16:	mov	r0, r3
    ac18:	cmp	r3, #0
    ac1a:	bne.n	abfa <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    ac1c:	adds	r2, r1, r4
    ac1e:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    ac20:	cbz	r4, ac36 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    ac22:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    ac24:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    ac28:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    ac2a:	adds	r3, #1
    ac2c:	subs	r0, r4, r3
    ac2e:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    ac30:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    ac34:	blt.n	ac22 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    ac36:	mov	r0, r1
    ac38:	pop	{r4, r5, r6, r7}
    ac3a:	bx	lr

0000ac3c <__aeabi_atexit>:
    ac3c:	mov	r3, r1
    ac3e:	mov	r1, r0
    ac40:	mov	r0, r3
    ac42:	b.w	b880 <__cxa_atexit>
    ac46:	nop

0000ac48 <__aeabi_drsub>:
    ac48:	eor.w	r1, r1, #2147483648	; 0x80000000
    ac4c:	b.n	ac54 <__adddf3>
    ac4e:	nop

0000ac50 <__aeabi_dsub>:
    ac50:	eor.w	r3, r3, #2147483648	; 0x80000000

0000ac54 <__adddf3>:
    ac54:	push	{r4, r5, lr}
    ac56:	mov.w	r4, r1, lsl #1
    ac5a:	mov.w	r5, r3, lsl #1
    ac5e:	teq	r4, r5
    ac62:	it	eq
    ac64:	teqeq	r0, r2
    ac68:	itttt	ne
    ac6a:	orrsne.w	ip, r4, r0
    ac6e:	orrsne.w	ip, r5, r2
    ac72:	mvnsne.w	ip, r4, asr #21
    ac76:	mvnsne.w	ip, r5, asr #21
    ac7a:	beq.w	ae42 <__adddf3+0x1ee>
    ac7e:	mov.w	r4, r4, lsr #21
    ac82:	rsbs	r5, r4, r5, lsr #21
    ac86:	it	lt
    ac88:	neglt	r5, r5
    ac8a:	ble.n	aca6 <__adddf3+0x52>
    ac8c:	add	r4, r5
    ac8e:	eor.w	r2, r0, r2
    ac92:	eor.w	r3, r1, r3
    ac96:	eor.w	r0, r2, r0
    ac9a:	eor.w	r1, r3, r1
    ac9e:	eor.w	r2, r0, r2
    aca2:	eor.w	r3, r1, r3
    aca6:	cmp	r5, #54	; 0x36
    aca8:	it	hi
    acaa:	pophi	{r4, r5, pc}
    acac:	tst.w	r1, #2147483648	; 0x80000000
    acb0:	mov.w	r1, r1, lsl #12
    acb4:	mov.w	ip, #1048576	; 0x100000
    acb8:	orr.w	r1, ip, r1, lsr #12
    acbc:	beq.n	acc4 <__adddf3+0x70>
    acbe:	negs	r0, r0
    acc0:	sbc.w	r1, r1, r1, lsl #1
    acc4:	tst.w	r3, #2147483648	; 0x80000000
    acc8:	mov.w	r3, r3, lsl #12
    accc:	orr.w	r3, ip, r3, lsr #12
    acd0:	beq.n	acd8 <__adddf3+0x84>
    acd2:	negs	r2, r2
    acd4:	sbc.w	r3, r3, r3, lsl #1
    acd8:	teq	r4, r5
    acdc:	beq.w	ae2e <__adddf3+0x1da>
    ace0:	sub.w	r4, r4, #1
    ace4:	rsbs	lr, r5, #32
    ace8:	blt.n	ad06 <__adddf3+0xb2>
    acea:	lsl.w	ip, r2, lr
    acee:	lsr.w	r2, r2, r5
    acf2:	adds	r0, r0, r2
    acf4:	adc.w	r1, r1, #0
    acf8:	lsl.w	r2, r3, lr
    acfc:	adds	r0, r0, r2
    acfe:	asr.w	r3, r3, r5
    ad02:	adcs	r1, r3
    ad04:	b.n	ad24 <__adddf3+0xd0>
    ad06:	sub.w	r5, r5, #32
    ad0a:	add.w	lr, lr, #32
    ad0e:	cmp	r2, #1
    ad10:	lsl.w	ip, r3, lr
    ad14:	it	cs
    ad16:	orrcs.w	ip, ip, #2
    ad1a:	asr.w	r3, r3, r5
    ad1e:	adds	r0, r0, r3
    ad20:	adcs.w	r1, r1, r3, asr #31
    ad24:	and.w	r5, r1, #2147483648	; 0x80000000
    ad28:	bpl.n	ad3a <__adddf3+0xe6>
    ad2a:	mov.w	lr, #0
    ad2e:	rsbs	ip, ip, #0
    ad32:	sbcs.w	r0, lr, r0
    ad36:	sbc.w	r1, lr, r1
    ad3a:	cmp.w	r1, #1048576	; 0x100000
    ad3e:	bcc.n	ad78 <__adddf3+0x124>
    ad40:	cmp.w	r1, #2097152	; 0x200000
    ad44:	bcc.n	ad60 <__adddf3+0x10c>
    ad46:	lsrs	r1, r1, #1
    ad48:	movs.w	r0, r0, rrx
    ad4c:	mov.w	ip, ip, rrx
    ad50:	add.w	r4, r4, #1
    ad54:	mov.w	r2, r4, lsl #21
    ad58:	cmn.w	r2, #4194304	; 0x400000
    ad5c:	bcs.w	ae94 <__adddf3+0x240>
    ad60:	cmp.w	ip, #2147483648	; 0x80000000
    ad64:	it	eq
    ad66:	movseq.w	ip, r0, lsr #1
    ad6a:	adcs.w	r0, r0, #0
    ad6e:	adc.w	r1, r1, r4, lsl #20
    ad72:	orr.w	r1, r1, r5
    ad76:	pop	{r4, r5, pc}
    ad78:	movs.w	ip, ip, lsl #1
    ad7c:	adcs	r0, r0
    ad7e:	adc.w	r1, r1, r1
    ad82:	tst.w	r1, #1048576	; 0x100000
    ad86:	sub.w	r4, r4, #1
    ad8a:	bne.n	ad60 <__adddf3+0x10c>
    ad8c:	teq	r1, #0
    ad90:	itt	eq
    ad92:	moveq	r1, r0
    ad94:	moveq	r0, #0
    ad96:	clz	r3, r1
    ad9a:	it	eq
    ad9c:	addeq	r3, #32
    ad9e:	sub.w	r3, r3, #11
    ada2:	subs.w	r2, r3, #32
    ada6:	bge.n	adc2 <__adddf3+0x16e>
    ada8:	adds	r2, #12
    adaa:	ble.n	adbe <__adddf3+0x16a>
    adac:	add.w	ip, r2, #20
    adb0:	rsb	r2, r2, #12
    adb4:	lsl.w	r0, r1, ip
    adb8:	lsr.w	r1, r1, r2
    adbc:	b.n	add8 <__adddf3+0x184>
    adbe:	add.w	r2, r2, #20
    adc2:	it	le
    adc4:	rsble	ip, r2, #32
    adc8:	lsl.w	r1, r1, r2
    adcc:	lsr.w	ip, r0, ip
    add0:	itt	le
    add2:	orrle.w	r1, r1, ip
    add6:	lslle	r0, r2
    add8:	subs	r4, r4, r3
    adda:	ittt	ge
    addc:	addge.w	r1, r1, r4, lsl #20
    ade0:	orrge	r1, r5
    ade2:	popge	{r4, r5, pc}
    ade4:	mvn.w	r4, r4
    ade8:	subs	r4, #31
    adea:	bge.n	ae26 <__adddf3+0x1d2>
    adec:	adds	r4, #12
    adee:	bgt.n	ae0e <__adddf3+0x1ba>
    adf0:	add.w	r4, r4, #20
    adf4:	rsb	r2, r4, #32
    adf8:	lsr.w	r0, r0, r4
    adfc:	lsl.w	r3, r1, r2
    ae00:	orr.w	r0, r0, r3
    ae04:	lsr.w	r3, r1, r4
    ae08:	orr.w	r1, r5, r3
    ae0c:	pop	{r4, r5, pc}
    ae0e:	rsb	r4, r4, #12
    ae12:	rsb	r2, r4, #32
    ae16:	lsr.w	r0, r0, r2
    ae1a:	lsl.w	r3, r1, r4
    ae1e:	orr.w	r0, r0, r3
    ae22:	mov	r1, r5
    ae24:	pop	{r4, r5, pc}
    ae26:	lsr.w	r0, r1, r4
    ae2a:	mov	r1, r5
    ae2c:	pop	{r4, r5, pc}
    ae2e:	teq	r4, #0
    ae32:	eor.w	r3, r3, #1048576	; 0x100000
    ae36:	itte	eq
    ae38:	eoreq.w	r1, r1, #1048576	; 0x100000
    ae3c:	addeq	r4, #1
    ae3e:	subne	r5, #1
    ae40:	b.n	ace0 <__adddf3+0x8c>
    ae42:	mvns.w	ip, r4, asr #21
    ae46:	it	ne
    ae48:	mvnsne.w	ip, r5, asr #21
    ae4c:	beq.n	aea2 <__adddf3+0x24e>
    ae4e:	teq	r4, r5
    ae52:	it	eq
    ae54:	teqeq	r0, r2
    ae58:	beq.n	ae66 <__adddf3+0x212>
    ae5a:	orrs.w	ip, r4, r0
    ae5e:	itt	eq
    ae60:	moveq	r1, r3
    ae62:	moveq	r0, r2
    ae64:	pop	{r4, r5, pc}
    ae66:	teq	r1, r3
    ae6a:	ittt	ne
    ae6c:	movne	r1, #0
    ae6e:	movne	r0, #0
    ae70:	popne	{r4, r5, pc}
    ae72:	movs.w	ip, r4, lsr #21
    ae76:	bne.n	ae84 <__adddf3+0x230>
    ae78:	lsls	r0, r0, #1
    ae7a:	adcs	r1, r1
    ae7c:	it	cs
    ae7e:	orrcs.w	r1, r1, #2147483648	; 0x80000000
    ae82:	pop	{r4, r5, pc}
    ae84:	adds.w	r4, r4, #4194304	; 0x400000
    ae88:	itt	cc
    ae8a:	addcc.w	r1, r1, #1048576	; 0x100000
    ae8e:	popcc	{r4, r5, pc}
    ae90:	and.w	r5, r1, #2147483648	; 0x80000000
    ae94:	orr.w	r1, r5, #2130706432	; 0x7f000000
    ae98:	orr.w	r1, r1, #15728640	; 0xf00000
    ae9c:	mov.w	r0, #0
    aea0:	pop	{r4, r5, pc}
    aea2:	mvns.w	ip, r4, asr #21
    aea6:	itte	ne
    aea8:	movne	r1, r3
    aeaa:	movne	r0, r2
    aeac:	mvnseq.w	ip, r5, asr #21
    aeb0:	itt	ne
    aeb2:	movne	r3, r1
    aeb4:	movne	r2, r0
    aeb6:	orrs.w	r4, r0, r1, lsl #12
    aeba:	itte	eq
    aebc:	orrseq.w	r5, r2, r3, lsl #12
    aec0:	teqeq	r1, r3
    aec4:	orrne.w	r1, r1, #524288	; 0x80000
    aec8:	pop	{r4, r5, pc}
    aeca:	nop

0000aecc <__aeabi_ui2d>:
    aecc:	teq	r0, #0
    aed0:	itt	eq
    aed2:	moveq	r1, #0
    aed4:	bxeq	lr
    aed6:	push	{r4, r5, lr}
    aed8:	mov.w	r4, #1024	; 0x400
    aedc:	add.w	r4, r4, #50	; 0x32
    aee0:	mov.w	r5, #0
    aee4:	mov.w	r1, #0
    aee8:	b.n	ad8c <__adddf3+0x138>
    aeea:	nop

0000aeec <__aeabi_i2d>:
    aeec:	teq	r0, #0
    aef0:	itt	eq
    aef2:	moveq	r1, #0
    aef4:	bxeq	lr
    aef6:	push	{r4, r5, lr}
    aef8:	mov.w	r4, #1024	; 0x400
    aefc:	add.w	r4, r4, #50	; 0x32
    af00:	ands.w	r5, r0, #2147483648	; 0x80000000
    af04:	it	mi
    af06:	negmi	r0, r0
    af08:	mov.w	r1, #0
    af0c:	b.n	ad8c <__adddf3+0x138>
    af0e:	nop

0000af10 <__aeabi_f2d>:
    af10:	lsls	r2, r0, #1
    af12:	mov.w	r1, r2, asr #3
    af16:	mov.w	r1, r1, rrx
    af1a:	mov.w	r0, r2, lsl #28
    af1e:	itttt	ne
    af20:	andsne.w	r3, r2, #4278190080	; 0xff000000
    af24:	teqne	r3, #4278190080	; 0xff000000
    af28:	eorne.w	r1, r1, #939524096	; 0x38000000
    af2c:	bxne	lr
    af2e:	teq	r2, #0
    af32:	ite	ne
    af34:	teqne	r3, #4278190080	; 0xff000000
    af38:	bxeq	lr
    af3a:	push	{r4, r5, lr}
    af3c:	mov.w	r4, #896	; 0x380
    af40:	and.w	r5, r1, #2147483648	; 0x80000000
    af44:	bic.w	r1, r1, #2147483648	; 0x80000000
    af48:	b.n	ad8c <__adddf3+0x138>
    af4a:	nop

0000af4c <__aeabi_ul2d>:
    af4c:	orrs.w	r2, r0, r1
    af50:	it	eq
    af52:	bxeq	lr
    af54:	push	{r4, r5, lr}
    af56:	mov.w	r5, #0
    af5a:	b.n	af72 <__aeabi_l2d+0x16>

0000af5c <__aeabi_l2d>:
    af5c:	orrs.w	r2, r0, r1
    af60:	it	eq
    af62:	bxeq	lr
    af64:	push	{r4, r5, lr}
    af66:	ands.w	r5, r1, #2147483648	; 0x80000000
    af6a:	bpl.n	af72 <__aeabi_l2d+0x16>
    af6c:	negs	r0, r0
    af6e:	sbc.w	r1, r1, r1, lsl #1
    af72:	mov.w	r4, #1024	; 0x400
    af76:	add.w	r4, r4, #50	; 0x32
    af7a:	movs.w	ip, r1, lsr #22
    af7e:	beq.w	ad3a <__adddf3+0xe6>
    af82:	mov.w	r2, #3
    af86:	movs.w	ip, ip, lsr #3
    af8a:	it	ne
    af8c:	addne	r2, #3
    af8e:	movs.w	ip, ip, lsr #3
    af92:	it	ne
    af94:	addne	r2, #3
    af96:	add.w	r2, r2, ip, lsr #3
    af9a:	rsb	r3, r2, #32
    af9e:	lsl.w	ip, r0, r3
    afa2:	lsr.w	r0, r0, r2
    afa6:	lsl.w	lr, r1, r3
    afaa:	orr.w	r0, r0, lr
    afae:	lsr.w	r1, r1, r2
    afb2:	add	r4, r2
    afb4:	b.n	ad3a <__adddf3+0xe6>
    afb6:	nop

0000afb8 <__aeabi_dmul>:
    afb8:	push	{r4, r5, r6, lr}
    afba:	mov.w	ip, #255	; 0xff
    afbe:	orr.w	ip, ip, #1792	; 0x700
    afc2:	ands.w	r4, ip, r1, lsr #20
    afc6:	ittte	ne
    afc8:	andsne.w	r5, ip, r3, lsr #20
    afcc:	teqne	r4, ip
    afd0:	teqne	r5, ip
    afd4:	bleq	b194 <__aeabi_dmul+0x1dc>
    afd8:	add	r4, r5
    afda:	eor.w	r6, r1, r3
    afde:	bic.w	r1, r1, ip, lsl #21
    afe2:	bic.w	r3, r3, ip, lsl #21
    afe6:	orrs.w	r5, r0, r1, lsl #12
    afea:	it	ne
    afec:	orrsne.w	r5, r2, r3, lsl #12
    aff0:	orr.w	r1, r1, #1048576	; 0x100000
    aff4:	orr.w	r3, r3, #1048576	; 0x100000
    aff8:	beq.n	b06c <__aeabi_dmul+0xb4>
    affa:	umull	ip, lr, r0, r2
    affe:	mov.w	r5, #0
    b002:	umlal	lr, r5, r1, r2
    b006:	and.w	r2, r6, #2147483648	; 0x80000000
    b00a:	umlal	lr, r5, r0, r3
    b00e:	mov.w	r6, #0
    b012:	umlal	r5, r6, r1, r3
    b016:	teq	ip, #0
    b01a:	it	ne
    b01c:	orrne.w	lr, lr, #1
    b020:	sub.w	r4, r4, #255	; 0xff
    b024:	cmp.w	r6, #512	; 0x200
    b028:	sbc.w	r4, r4, #768	; 0x300
    b02c:	bcs.n	b038 <__aeabi_dmul+0x80>
    b02e:	movs.w	lr, lr, lsl #1
    b032:	adcs	r5, r5
    b034:	adc.w	r6, r6, r6
    b038:	orr.w	r1, r2, r6, lsl #11
    b03c:	orr.w	r1, r1, r5, lsr #21
    b040:	mov.w	r0, r5, lsl #11
    b044:	orr.w	r0, r0, lr, lsr #21
    b048:	mov.w	lr, lr, lsl #11
    b04c:	subs.w	ip, r4, #253	; 0xfd
    b050:	it	hi
    b052:	cmphi.w	ip, #1792	; 0x700
    b056:	bhi.n	b096 <__aeabi_dmul+0xde>
    b058:	cmp.w	lr, #2147483648	; 0x80000000
    b05c:	it	eq
    b05e:	movseq.w	lr, r0, lsr #1
    b062:	adcs.w	r0, r0, #0
    b066:	adc.w	r1, r1, r4, lsl #20
    b06a:	pop	{r4, r5, r6, pc}
    b06c:	and.w	r6, r6, #2147483648	; 0x80000000
    b070:	orr.w	r1, r6, r1
    b074:	orr.w	r0, r0, r2
    b078:	eor.w	r1, r1, r3
    b07c:	subs.w	r4, r4, ip, lsr #1
    b080:	ittt	gt
    b082:	rsbsgt	r5, r4, ip
    b086:	orrgt.w	r1, r1, r4, lsl #20
    b08a:	popgt	{r4, r5, r6, pc}
    b08c:	orr.w	r1, r1, #1048576	; 0x100000
    b090:	mov.w	lr, #0
    b094:	subs	r4, #1
    b096:	bgt.w	b1f0 <__aeabi_dmul+0x238>
    b09a:	cmn.w	r4, #54	; 0x36
    b09e:	ittt	le
    b0a0:	movle	r0, #0
    b0a2:	andle.w	r1, r1, #2147483648	; 0x80000000
    b0a6:	pople	{r4, r5, r6, pc}
    b0a8:	rsb	r4, r4, #0
    b0ac:	subs	r4, #32
    b0ae:	bge.n	b11c <__aeabi_dmul+0x164>
    b0b0:	adds	r4, #12
    b0b2:	bgt.n	b0ec <__aeabi_dmul+0x134>
    b0b4:	add.w	r4, r4, #20
    b0b8:	rsb	r5, r4, #32
    b0bc:	lsl.w	r3, r0, r5
    b0c0:	lsr.w	r0, r0, r4
    b0c4:	lsl.w	r2, r1, r5
    b0c8:	orr.w	r0, r0, r2
    b0cc:	and.w	r2, r1, #2147483648	; 0x80000000
    b0d0:	bic.w	r1, r1, #2147483648	; 0x80000000
    b0d4:	adds.w	r0, r0, r3, lsr #31
    b0d8:	lsr.w	r6, r1, r4
    b0dc:	adc.w	r1, r2, r6
    b0e0:	orrs.w	lr, lr, r3, lsl #1
    b0e4:	it	eq
    b0e6:	biceq.w	r0, r0, r3, lsr #31
    b0ea:	pop	{r4, r5, r6, pc}
    b0ec:	rsb	r4, r4, #12
    b0f0:	rsb	r5, r4, #32
    b0f4:	lsl.w	r3, r0, r4
    b0f8:	lsr.w	r0, r0, r5
    b0fc:	lsl.w	r2, r1, r4
    b100:	orr.w	r0, r0, r2
    b104:	and.w	r1, r1, #2147483648	; 0x80000000
    b108:	adds.w	r0, r0, r3, lsr #31
    b10c:	adc.w	r1, r1, #0
    b110:	orrs.w	lr, lr, r3, lsl #1
    b114:	it	eq
    b116:	biceq.w	r0, r0, r3, lsr #31
    b11a:	pop	{r4, r5, r6, pc}
    b11c:	rsb	r5, r4, #32
    b120:	lsl.w	r2, r0, r5
    b124:	orr.w	lr, lr, r2
    b128:	lsr.w	r3, r0, r4
    b12c:	lsl.w	r2, r1, r5
    b130:	orr.w	r3, r3, r2
    b134:	lsr.w	r0, r1, r4
    b138:	and.w	r1, r1, #2147483648	; 0x80000000
    b13c:	lsr.w	r2, r1, r4
    b140:	bic.w	r0, r0, r2
    b144:	add.w	r0, r0, r3, lsr #31
    b148:	orrs.w	lr, lr, r3, lsl #1
    b14c:	it	eq
    b14e:	biceq.w	r0, r0, r3, lsr #31
    b152:	pop	{r4, r5, r6, pc}
    b154:	teq	r4, #0
    b158:	bne.n	b17a <__aeabi_dmul+0x1c2>
    b15a:	and.w	r6, r1, #2147483648	; 0x80000000
    b15e:	lsls	r0, r0, #1
    b160:	adc.w	r1, r1, r1
    b164:	tst.w	r1, #1048576	; 0x100000
    b168:	it	eq
    b16a:	subeq	r4, #1
    b16c:	beq.n	b15e <__aeabi_dmul+0x1a6>
    b16e:	orr.w	r1, r1, r6
    b172:	teq	r5, #0
    b176:	it	ne
    b178:	bxne	lr
    b17a:	and.w	r6, r3, #2147483648	; 0x80000000
    b17e:	lsls	r2, r2, #1
    b180:	adc.w	r3, r3, r3
    b184:	tst.w	r3, #1048576	; 0x100000
    b188:	it	eq
    b18a:	subeq	r5, #1
    b18c:	beq.n	b17e <__aeabi_dmul+0x1c6>
    b18e:	orr.w	r3, r3, r6
    b192:	bx	lr
    b194:	teq	r4, ip
    b198:	and.w	r5, ip, r3, lsr #20
    b19c:	it	ne
    b19e:	teqne	r5, ip
    b1a2:	beq.n	b1be <__aeabi_dmul+0x206>
    b1a4:	orrs.w	r6, r0, r1, lsl #1
    b1a8:	it	ne
    b1aa:	orrsne.w	r6, r2, r3, lsl #1
    b1ae:	bne.n	b154 <__aeabi_dmul+0x19c>
    b1b0:	eor.w	r1, r1, r3
    b1b4:	and.w	r1, r1, #2147483648	; 0x80000000
    b1b8:	mov.w	r0, #0
    b1bc:	pop	{r4, r5, r6, pc}
    b1be:	orrs.w	r6, r0, r1, lsl #1
    b1c2:	itte	eq
    b1c4:	moveq	r0, r2
    b1c6:	moveq	r1, r3
    b1c8:	orrsne.w	r6, r2, r3, lsl #1
    b1cc:	beq.n	b202 <__aeabi_dmul+0x24a>
    b1ce:	teq	r4, ip
    b1d2:	bne.n	b1da <__aeabi_dmul+0x222>
    b1d4:	orrs.w	r6, r0, r1, lsl #12
    b1d8:	bne.n	b202 <__aeabi_dmul+0x24a>
    b1da:	teq	r5, ip
    b1de:	bne.n	b1ec <__aeabi_dmul+0x234>
    b1e0:	orrs.w	r6, r2, r3, lsl #12
    b1e4:	itt	ne
    b1e6:	movne	r0, r2
    b1e8:	movne	r1, r3
    b1ea:	bne.n	b202 <__aeabi_dmul+0x24a>
    b1ec:	eor.w	r1, r1, r3
    b1f0:	and.w	r1, r1, #2147483648	; 0x80000000
    b1f4:	orr.w	r1, r1, #2130706432	; 0x7f000000
    b1f8:	orr.w	r1, r1, #15728640	; 0xf00000
    b1fc:	mov.w	r0, #0
    b200:	pop	{r4, r5, r6, pc}
    b202:	orr.w	r1, r1, #2130706432	; 0x7f000000
    b206:	orr.w	r1, r1, #16252928	; 0xf80000
    b20a:	pop	{r4, r5, r6, pc}

0000b20c <__aeabi_ddiv>:
    b20c:	push	{r4, r5, r6, lr}
    b20e:	mov.w	ip, #255	; 0xff
    b212:	orr.w	ip, ip, #1792	; 0x700
    b216:	ands.w	r4, ip, r1, lsr #20
    b21a:	ittte	ne
    b21c:	andsne.w	r5, ip, r3, lsr #20
    b220:	teqne	r4, ip
    b224:	teqne	r5, ip
    b228:	bleq	b37a <__aeabi_ddiv+0x16e>
    b22c:	sub.w	r4, r4, r5
    b230:	eor.w	lr, r1, r3
    b234:	orrs.w	r5, r2, r3, lsl #12
    b238:	mov.w	r1, r1, lsl #12
    b23c:	beq.w	b350 <__aeabi_ddiv+0x144>
    b240:	mov.w	r3, r3, lsl #12
    b244:	mov.w	r5, #268435456	; 0x10000000
    b248:	orr.w	r3, r5, r3, lsr #4
    b24c:	orr.w	r3, r3, r2, lsr #24
    b250:	mov.w	r2, r2, lsl #8
    b254:	orr.w	r5, r5, r1, lsr #4
    b258:	orr.w	r5, r5, r0, lsr #24
    b25c:	mov.w	r6, r0, lsl #8
    b260:	and.w	r1, lr, #2147483648	; 0x80000000
    b264:	cmp	r5, r3
    b266:	it	eq
    b268:	cmpeq	r6, r2
    b26a:	adc.w	r4, r4, #253	; 0xfd
    b26e:	add.w	r4, r4, #768	; 0x300
    b272:	bcs.n	b27a <__aeabi_ddiv+0x6e>
    b274:	lsrs	r3, r3, #1
    b276:	mov.w	r2, r2, rrx
    b27a:	subs	r6, r6, r2
    b27c:	sbc.w	r5, r5, r3
    b280:	lsrs	r3, r3, #1
    b282:	mov.w	r2, r2, rrx
    b286:	mov.w	r0, #1048576	; 0x100000
    b28a:	mov.w	ip, #524288	; 0x80000
    b28e:	subs.w	lr, r6, r2
    b292:	sbcs.w	lr, r5, r3
    b296:	ittt	cs
    b298:	subcs	r6, r6, r2
    b29a:	movcs	r5, lr
    b29c:	orrcs.w	r0, r0, ip
    b2a0:	lsrs	r3, r3, #1
    b2a2:	mov.w	r2, r2, rrx
    b2a6:	subs.w	lr, r6, r2
    b2aa:	sbcs.w	lr, r5, r3
    b2ae:	ittt	cs
    b2b0:	subcs	r6, r6, r2
    b2b2:	movcs	r5, lr
    b2b4:	orrcs.w	r0, r0, ip, lsr #1
    b2b8:	lsrs	r3, r3, #1
    b2ba:	mov.w	r2, r2, rrx
    b2be:	subs.w	lr, r6, r2
    b2c2:	sbcs.w	lr, r5, r3
    b2c6:	ittt	cs
    b2c8:	subcs	r6, r6, r2
    b2ca:	movcs	r5, lr
    b2cc:	orrcs.w	r0, r0, ip, lsr #2
    b2d0:	lsrs	r3, r3, #1
    b2d2:	mov.w	r2, r2, rrx
    b2d6:	subs.w	lr, r6, r2
    b2da:	sbcs.w	lr, r5, r3
    b2de:	ittt	cs
    b2e0:	subcs	r6, r6, r2
    b2e2:	movcs	r5, lr
    b2e4:	orrcs.w	r0, r0, ip, lsr #3
    b2e8:	orrs.w	lr, r5, r6
    b2ec:	beq.n	b320 <__aeabi_ddiv+0x114>
    b2ee:	mov.w	r5, r5, lsl #4
    b2f2:	orr.w	r5, r5, r6, lsr #28
    b2f6:	mov.w	r6, r6, lsl #4
    b2fa:	mov.w	r3, r3, lsl #3
    b2fe:	orr.w	r3, r3, r2, lsr #29
    b302:	mov.w	r2, r2, lsl #3
    b306:	movs.w	ip, ip, lsr #4
    b30a:	bne.n	b28e <__aeabi_ddiv+0x82>
    b30c:	tst.w	r1, #1048576	; 0x100000
    b310:	bne.n	b32a <__aeabi_ddiv+0x11e>
    b312:	orr.w	r1, r1, r0
    b316:	mov.w	r0, #0
    b31a:	mov.w	ip, #2147483648	; 0x80000000
    b31e:	b.n	b28e <__aeabi_ddiv+0x82>
    b320:	tst.w	r1, #1048576	; 0x100000
    b324:	itt	eq
    b326:	orreq	r1, r0
    b328:	moveq	r0, #0
    b32a:	subs.w	ip, r4, #253	; 0xfd
    b32e:	it	hi
    b330:	cmphi.w	ip, #1792	; 0x700
    b334:	bhi.w	b096 <__aeabi_dmul+0xde>
    b338:	subs.w	ip, r5, r3
    b33c:	itt	eq
    b33e:	subseq.w	ip, r6, r2
    b342:	movseq.w	ip, r0, lsr #1
    b346:	adcs.w	r0, r0, #0
    b34a:	adc.w	r1, r1, r4, lsl #20
    b34e:	pop	{r4, r5, r6, pc}
    b350:	and.w	lr, lr, #2147483648	; 0x80000000
    b354:	orr.w	r1, lr, r1, lsr #12
    b358:	adds.w	r4, r4, ip, lsr #1
    b35c:	ittt	gt
    b35e:	rsbsgt	r5, r4, ip
    b362:	orrgt.w	r1, r1, r4, lsl #20
    b366:	popgt	{r4, r5, r6, pc}
    b368:	orr.w	r1, r1, #1048576	; 0x100000
    b36c:	mov.w	lr, #0
    b370:	subs	r4, #1
    b372:	b.n	b096 <__aeabi_dmul+0xde>
    b374:	orr.w	lr, r5, r6
    b378:	b.n	b096 <__aeabi_dmul+0xde>
    b37a:	and.w	r5, ip, r3, lsr #20
    b37e:	teq	r4, ip
    b382:	it	eq
    b384:	teqeq	r5, ip
    b388:	beq.w	b202 <__aeabi_dmul+0x24a>
    b38c:	teq	r4, ip
    b390:	bne.n	b3a8 <__aeabi_ddiv+0x19c>
    b392:	orrs.w	r4, r0, r1, lsl #12
    b396:	bne.w	b202 <__aeabi_dmul+0x24a>
    b39a:	teq	r5, ip
    b39e:	bne.w	b1ec <__aeabi_dmul+0x234>
    b3a2:	mov	r0, r2
    b3a4:	mov	r1, r3
    b3a6:	b.n	b202 <__aeabi_dmul+0x24a>
    b3a8:	teq	r5, ip
    b3ac:	bne.n	b3bc <__aeabi_ddiv+0x1b0>
    b3ae:	orrs.w	r5, r2, r3, lsl #12
    b3b2:	beq.w	b1b0 <__aeabi_dmul+0x1f8>
    b3b6:	mov	r0, r2
    b3b8:	mov	r1, r3
    b3ba:	b.n	b202 <__aeabi_dmul+0x24a>
    b3bc:	orrs.w	r6, r0, r1, lsl #1
    b3c0:	it	ne
    b3c2:	orrsne.w	r6, r2, r3, lsl #1
    b3c6:	bne.w	b154 <__aeabi_dmul+0x19c>
    b3ca:	orrs.w	r4, r0, r1, lsl #1
    b3ce:	bne.w	b1ec <__aeabi_dmul+0x234>
    b3d2:	orrs.w	r5, r2, r3, lsl #1
    b3d6:	bne.w	b1b0 <__aeabi_dmul+0x1f8>
    b3da:	b.n	b202 <__aeabi_dmul+0x24a>

0000b3dc <__gedf2>:
    b3dc:	mov.w	ip, #4294967295
    b3e0:	b.n	b3f0 <__cmpdf2+0x4>
    b3e2:	nop

0000b3e4 <__ledf2>:
    b3e4:	mov.w	ip, #1
    b3e8:	b.n	b3f0 <__cmpdf2+0x4>
    b3ea:	nop

0000b3ec <__cmpdf2>:
    b3ec:	mov.w	ip, #1
    b3f0:	str.w	ip, [sp, #-4]!
    b3f4:	mov.w	ip, r1, lsl #1
    b3f8:	mvns.w	ip, ip, asr #21
    b3fc:	mov.w	ip, r3, lsl #1
    b400:	it	ne
    b402:	mvnsne.w	ip, ip, asr #21
    b406:	beq.n	b440 <__cmpdf2+0x54>
    b408:	add	sp, #4
    b40a:	orrs.w	ip, r0, r1, lsl #1
    b40e:	ite	eq
    b410:	orrseq.w	ip, r2, r3, lsl #1
    b414:	teqne	r1, r3
    b418:	ittt	eq
    b41a:	teqeq	r0, r2
    b41e:	moveq	r0, #0
    b420:	bxeq	lr
    b422:	cmn.w	r0, #0
    b426:	teq	r1, r3
    b42a:	it	pl
    b42c:	cmppl	r1, r3
    b42e:	it	eq
    b430:	cmpeq	r0, r2
    b432:	ite	cs
    b434:	asrcs	r0, r3, #31
    b436:	mvncc.w	r0, r3, asr #31
    b43a:	orr.w	r0, r0, #1
    b43e:	bx	lr
    b440:	mov.w	ip, r1, lsl #1
    b444:	mvns.w	ip, ip, asr #21
    b448:	bne.n	b450 <__cmpdf2+0x64>
    b44a:	orrs.w	ip, r0, r1, lsl #12
    b44e:	bne.n	b460 <__cmpdf2+0x74>
    b450:	mov.w	ip, r3, lsl #1
    b454:	mvns.w	ip, ip, asr #21
    b458:	bne.n	b408 <__cmpdf2+0x1c>
    b45a:	orrs.w	ip, r2, r3, lsl #12
    b45e:	beq.n	b408 <__cmpdf2+0x1c>
    b460:	ldr.w	r0, [sp], #4
    b464:	bx	lr
    b466:	nop

0000b468 <__aeabi_cdrcmple>:
    b468:	mov	ip, r0
    b46a:	mov	r0, r2
    b46c:	mov	r2, ip
    b46e:	mov	ip, r1
    b470:	mov	r1, r3
    b472:	mov	r3, ip
    b474:	b.n	b478 <__aeabi_cdcmpeq>
    b476:	nop

0000b478 <__aeabi_cdcmpeq>:
    b478:	push	{r0, lr}
    b47a:	bl	b3ec <__cmpdf2>
    b47e:	cmp	r0, #0
    b480:	it	mi
    b482:	cmnmi.w	r0, #0
    b486:	pop	{r0, pc}

0000b488 <__aeabi_dcmpeq>:
    b488:	str.w	lr, [sp, #-8]!
    b48c:	bl	b478 <__aeabi_cdcmpeq>
    b490:	ite	eq
    b492:	moveq	r0, #1
    b494:	movne	r0, #0
    b496:	ldr.w	pc, [sp], #8
    b49a:	nop

0000b49c <__aeabi_dcmplt>:
    b49c:	str.w	lr, [sp, #-8]!
    b4a0:	bl	b478 <__aeabi_cdcmpeq>
    b4a4:	ite	cc
    b4a6:	movcc	r0, #1
    b4a8:	movcs	r0, #0
    b4aa:	ldr.w	pc, [sp], #8
    b4ae:	nop

0000b4b0 <__aeabi_dcmple>:
    b4b0:	str.w	lr, [sp, #-8]!
    b4b4:	bl	b478 <__aeabi_cdcmpeq>
    b4b8:	ite	ls
    b4ba:	movls	r0, #1
    b4bc:	movhi	r0, #0
    b4be:	ldr.w	pc, [sp], #8
    b4c2:	nop

0000b4c4 <__aeabi_dcmpge>:
    b4c4:	str.w	lr, [sp, #-8]!
    b4c8:	bl	b468 <__aeabi_cdrcmple>
    b4cc:	ite	ls
    b4ce:	movls	r0, #1
    b4d0:	movhi	r0, #0
    b4d2:	ldr.w	pc, [sp], #8
    b4d6:	nop

0000b4d8 <__aeabi_dcmpgt>:
    b4d8:	str.w	lr, [sp, #-8]!
    b4dc:	bl	b468 <__aeabi_cdrcmple>
    b4e0:	ite	cc
    b4e2:	movcc	r0, #1
    b4e4:	movcs	r0, #0
    b4e6:	ldr.w	pc, [sp], #8
    b4ea:	nop

0000b4ec <__aeabi_dcmpun>:
    b4ec:	mov.w	ip, r1, lsl #1
    b4f0:	mvns.w	ip, ip, asr #21
    b4f4:	bne.n	b4fc <__aeabi_dcmpun+0x10>
    b4f6:	orrs.w	ip, r0, r1, lsl #12
    b4fa:	bne.n	b512 <__aeabi_dcmpun+0x26>
    b4fc:	mov.w	ip, r3, lsl #1
    b500:	mvns.w	ip, ip, asr #21
    b504:	bne.n	b50c <__aeabi_dcmpun+0x20>
    b506:	orrs.w	ip, r2, r3, lsl #12
    b50a:	bne.n	b512 <__aeabi_dcmpun+0x26>
    b50c:	mov.w	r0, #0
    b510:	bx	lr
    b512:	mov.w	r0, #1
    b516:	bx	lr

0000b518 <__aeabi_d2iz>:
    b518:	mov.w	r2, r1, lsl #1
    b51c:	adds.w	r2, r2, #2097152	; 0x200000
    b520:	bcs.n	b54e <__aeabi_d2iz+0x36>
    b522:	bpl.n	b548 <__aeabi_d2iz+0x30>
    b524:	mvn.w	r3, #992	; 0x3e0
    b528:	subs.w	r2, r3, r2, asr #21
    b52c:	bls.n	b554 <__aeabi_d2iz+0x3c>
    b52e:	mov.w	r3, r1, lsl #11
    b532:	orr.w	r3, r3, #2147483648	; 0x80000000
    b536:	orr.w	r3, r3, r0, lsr #21
    b53a:	tst.w	r1, #2147483648	; 0x80000000
    b53e:	lsr.w	r0, r3, r2
    b542:	it	ne
    b544:	negne	r0, r0
    b546:	bx	lr
    b548:	mov.w	r0, #0
    b54c:	bx	lr
    b54e:	orrs.w	r0, r0, r1, lsl #12
    b552:	bne.n	b560 <__aeabi_d2iz+0x48>
    b554:	ands.w	r0, r1, #2147483648	; 0x80000000
    b558:	it	eq
    b55a:	mvneq.w	r0, #2147483648	; 0x80000000
    b55e:	bx	lr
    b560:	mov.w	r0, #0
    b564:	bx	lr
    b566:	nop

0000b568 <__aeabi_uldivmod>:
    b568:	cbnz	r3, b580 <__aeabi_uldivmod+0x18>
    b56a:	cbnz	r2, b580 <__aeabi_uldivmod+0x18>
    b56c:	cmp	r1, #0
    b56e:	it	eq
    b570:	cmpeq	r0, #0
    b572:	itt	ne
    b574:	movne.w	r1, #4294967295
    b578:	movne.w	r0, #4294967295
    b57c:	b.w	b87c <__aeabi_idiv0>
    b580:	sub.w	ip, sp, #8
    b584:	strd	ip, lr, [sp, #-16]!
    b588:	bl	b598 <__udivmoddi4>
    b58c:	ldr.w	lr, [sp, #4]
    b590:	ldrd	r2, r3, [sp, #8]
    b594:	add	sp, #16
    b596:	bx	lr

0000b598 <__udivmoddi4>:
    b598:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b59c:	mov	ip, r1
    b59e:	mov	r6, r1
    b5a0:	mov	r4, r0
    b5a2:	ldr	r5, [sp, #32]
    b5a4:	cmp	r3, #0
    b5a6:	bne.n	b64a <__udivmoddi4+0xb2>
    b5a8:	cmp	r2, r1
    b5aa:	mov	r7, r2
    b5ac:	bls.n	b688 <__udivmoddi4+0xf0>
    b5ae:	clz	lr, r2
    b5b2:	cmp.w	lr, #0
    b5b6:	beq.n	b5d0 <__udivmoddi4+0x38>
    b5b8:	rsb	r4, lr, #32
    b5bc:	lsr.w	r4, r0, r4
    b5c0:	lsl.w	r6, r1, lr
    b5c4:	orr.w	ip, r4, r6
    b5c8:	lsl.w	r7, r2, lr
    b5cc:	lsl.w	r4, r0, lr
    b5d0:	mov.w	r9, r7, lsr #16
    b5d4:	lsrs	r2, r4, #16
    b5d6:	udiv	r0, ip, r9
    b5da:	uxth.w	r8, r7
    b5de:	mls	r6, r9, r0, ip
    b5e2:	orr.w	r6, r2, r6, lsl #16
    b5e6:	mul.w	r3, r0, r8
    b5ea:	cmp	r3, r6
    b5ec:	bls.n	b602 <__udivmoddi4+0x6a>
    b5ee:	adds	r6, r6, r7
    b5f0:	add.w	r2, r0, #4294967295
    b5f4:	bcs.w	b83c <__udivmoddi4+0x2a4>
    b5f8:	cmp	r3, r6
    b5fa:	bls.w	b83c <__udivmoddi4+0x2a4>
    b5fe:	subs	r0, #2
    b600:	add	r6, r7
    b602:	subs	r6, r6, r3
    b604:	uxth	r2, r4
    b606:	udiv	r3, r6, r9
    b60a:	mls	r6, r9, r3, r6
    b60e:	orr.w	r4, r2, r6, lsl #16
    b612:	mul.w	r8, r3, r8
    b616:	cmp	r8, r4
    b618:	bls.n	b62e <__udivmoddi4+0x96>
    b61a:	adds	r4, r4, r7
    b61c:	add.w	r2, r3, #4294967295
    b620:	bcs.w	b838 <__udivmoddi4+0x2a0>
    b624:	cmp	r8, r4
    b626:	bls.w	b838 <__udivmoddi4+0x2a0>
    b62a:	subs	r3, #2
    b62c:	add	r4, r7
    b62e:	rsb	r4, r8, r4
    b632:	orr.w	r0, r3, r0, lsl #16
    b636:	movs	r1, #0
    b638:	cmp	r5, #0
    b63a:	beq.n	b702 <__udivmoddi4+0x16a>
    b63c:	lsr.w	r4, r4, lr
    b640:	movs	r3, #0
    b642:	str	r4, [r5, #0]
    b644:	str	r3, [r5, #4]
    b646:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b64a:	cmp	r3, r1
    b64c:	bls.n	b65e <__udivmoddi4+0xc6>
    b64e:	cmp	r5, #0
    b650:	beq.n	b6fe <__udivmoddi4+0x166>
    b652:	movs	r1, #0
    b654:	stmia.w	r5, {r0, r6}
    b658:	mov	r0, r1
    b65a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b65e:	clz	r1, r3
    b662:	cmp	r1, #0
    b664:	bne.w	b788 <__udivmoddi4+0x1f0>
    b668:	cmp	r3, r6
    b66a:	bcc.n	b672 <__udivmoddi4+0xda>
    b66c:	cmp	r2, r0
    b66e:	bhi.w	b862 <__udivmoddi4+0x2ca>
    b672:	subs	r4, r0, r2
    b674:	sbc.w	r6, r6, r3
    b678:	movs	r0, #1
    b67a:	mov	ip, r6
    b67c:	cmp	r5, #0
    b67e:	beq.n	b702 <__udivmoddi4+0x16a>
    b680:	stmia.w	r5, {r4, ip}
    b684:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b688:	cbnz	r2, b690 <__udivmoddi4+0xf8>
    b68a:	movs	r7, #1
    b68c:	udiv	r7, r7, r2
    b690:	clz	lr, r7
    b694:	cmp.w	lr, #0
    b698:	bne.n	b706 <__udivmoddi4+0x16e>
    b69a:	subs	r3, r6, r7
    b69c:	mov.w	r8, r7, lsr #16
    b6a0:	uxth.w	ip, r7
    b6a4:	movs	r1, #1
    b6a6:	udiv	r0, r3, r8
    b6aa:	lsrs	r2, r4, #16
    b6ac:	mls	r6, r8, r0, r3
    b6b0:	orr.w	r6, r2, r6, lsl #16
    b6b4:	mul.w	r3, ip, r0
    b6b8:	cmp	r3, r6
    b6ba:	bls.n	b6cc <__udivmoddi4+0x134>
    b6bc:	adds	r6, r6, r7
    b6be:	add.w	r2, r0, #4294967295
    b6c2:	bcs.n	b6ca <__udivmoddi4+0x132>
    b6c4:	cmp	r3, r6
    b6c6:	bhi.w	b866 <__udivmoddi4+0x2ce>
    b6ca:	mov	r0, r2
    b6cc:	subs	r6, r6, r3
    b6ce:	uxth	r2, r4
    b6d0:	udiv	r3, r6, r8
    b6d4:	mls	r6, r8, r3, r6
    b6d8:	orr.w	r4, r2, r6, lsl #16
    b6dc:	mul.w	ip, ip, r3
    b6e0:	cmp	ip, r4
    b6e2:	bls.n	b6f4 <__udivmoddi4+0x15c>
    b6e4:	adds	r4, r4, r7
    b6e6:	add.w	r2, r3, #4294967295
    b6ea:	bcs.n	b6f2 <__udivmoddi4+0x15a>
    b6ec:	cmp	ip, r4
    b6ee:	bhi.w	b85c <__udivmoddi4+0x2c4>
    b6f2:	mov	r3, r2
    b6f4:	rsb	r4, ip, r4
    b6f8:	orr.w	r0, r3, r0, lsl #16
    b6fc:	b.n	b638 <__udivmoddi4+0xa0>
    b6fe:	mov	r1, r5
    b700:	mov	r0, r5
    b702:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b706:	rsb	r1, lr, #32
    b70a:	lsl.w	r3, r6, lr
    b70e:	lsl.w	r7, r7, lr
    b712:	lsr.w	r9, r0, r1
    b716:	mov.w	r8, r7, lsr #16
    b71a:	lsrs	r6, r1
    b71c:	orr.w	r9, r9, r3
    b720:	udiv	sl, r6, r8
    b724:	mov.w	r4, r9, lsr #16
    b728:	mls	r6, r8, sl, r6
    b72c:	uxth.w	ip, r7
    b730:	orr.w	r3, r4, r6, lsl #16
    b734:	mul.w	r2, sl, ip
    b738:	cmp	r2, r3
    b73a:	lsl.w	r4, r0, lr
    b73e:	bls.n	b756 <__udivmoddi4+0x1be>
    b740:	adds	r3, r3, r7
    b742:	add.w	r1, sl, #4294967295
    b746:	bcs.w	b858 <__udivmoddi4+0x2c0>
    b74a:	cmp	r2, r3
    b74c:	bls.w	b858 <__udivmoddi4+0x2c0>
    b750:	sub.w	sl, sl, #2
    b754:	add	r3, r7
    b756:	subs	r3, r3, r2
    b758:	uxth.w	r9, r9
    b75c:	udiv	r1, r3, r8
    b760:	mls	r3, r8, r1, r3
    b764:	orr.w	r3, r9, r3, lsl #16
    b768:	mul.w	r6, r1, ip
    b76c:	cmp	r6, r3
    b76e:	bls.n	b780 <__udivmoddi4+0x1e8>
    b770:	adds	r3, r3, r7
    b772:	add.w	r2, r1, #4294967295
    b776:	bcs.n	b850 <__udivmoddi4+0x2b8>
    b778:	cmp	r6, r3
    b77a:	bls.n	b850 <__udivmoddi4+0x2b8>
    b77c:	subs	r1, #2
    b77e:	add	r3, r7
    b780:	subs	r3, r3, r6
    b782:	orr.w	r1, r1, sl, lsl #16
    b786:	b.n	b6a6 <__udivmoddi4+0x10e>
    b788:	rsb	lr, r1, #32
    b78c:	lsr.w	r4, r2, lr
    b790:	lsls	r3, r1
    b792:	orrs	r3, r4
    b794:	lsr.w	r7, r0, lr
    b798:	lsl.w	r4, r6, r1
    b79c:	mov.w	ip, r3, lsr #16
    b7a0:	lsr.w	r6, r6, lr
    b7a4:	orrs	r4, r7
    b7a6:	udiv	r9, r6, ip
    b7aa:	lsrs	r7, r4, #16
    b7ac:	mls	r6, ip, r9, r6
    b7b0:	uxth.w	r8, r3
    b7b4:	orr.w	r6, r7, r6, lsl #16
    b7b8:	mul.w	r7, r9, r8
    b7bc:	cmp	r7, r6
    b7be:	lsl.w	r2, r2, r1
    b7c2:	lsl.w	sl, r0, r1
    b7c6:	bls.n	b7da <__udivmoddi4+0x242>
    b7c8:	adds	r6, r6, r3
    b7ca:	add.w	r0, r9, #4294967295
    b7ce:	bcs.n	b854 <__udivmoddi4+0x2bc>
    b7d0:	cmp	r7, r6
    b7d2:	bls.n	b854 <__udivmoddi4+0x2bc>
    b7d4:	sub.w	r9, r9, #2
    b7d8:	add	r6, r3
    b7da:	subs	r6, r6, r7
    b7dc:	uxth	r0, r4
    b7de:	udiv	r4, r6, ip
    b7e2:	mls	r6, ip, r4, r6
    b7e6:	orr.w	r7, r0, r6, lsl #16
    b7ea:	mul.w	r8, r4, r8
    b7ee:	cmp	r8, r7
    b7f0:	bls.n	b802 <__udivmoddi4+0x26a>
    b7f2:	adds	r7, r7, r3
    b7f4:	add.w	r0, r4, #4294967295
    b7f8:	bcs.n	b84c <__udivmoddi4+0x2b4>
    b7fa:	cmp	r8, r7
    b7fc:	bls.n	b84c <__udivmoddi4+0x2b4>
    b7fe:	subs	r4, #2
    b800:	add	r7, r3
    b802:	orr.w	r0, r4, r9, lsl #16
    b806:	rsb	r7, r8, r7
    b80a:	umull	r8, r9, r0, r2
    b80e:	cmp	r7, r9
    b810:	mov	r4, r8
    b812:	mov	r6, r9
    b814:	bcc.n	b840 <__udivmoddi4+0x2a8>
    b816:	beq.n	b86c <__udivmoddi4+0x2d4>
    b818:	cbz	r5, b874 <__udivmoddi4+0x2dc>
    b81a:	subs.w	r3, sl, r4
    b81e:	sbc.w	r7, r7, r6
    b822:	lsl.w	lr, r7, lr
    b826:	lsrs	r3, r1
    b828:	lsrs	r7, r1
    b82a:	orr.w	r3, lr, r3
    b82e:	stmia.w	r5, {r3, r7}
    b832:	movs	r1, #0
    b834:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b838:	mov	r3, r2
    b83a:	b.n	b62e <__udivmoddi4+0x96>
    b83c:	mov	r0, r2
    b83e:	b.n	b602 <__udivmoddi4+0x6a>
    b840:	subs.w	r4, r8, r2
    b844:	sbc.w	r6, r9, r3
    b848:	subs	r0, #1
    b84a:	b.n	b818 <__udivmoddi4+0x280>
    b84c:	mov	r4, r0
    b84e:	b.n	b802 <__udivmoddi4+0x26a>
    b850:	mov	r1, r2
    b852:	b.n	b780 <__udivmoddi4+0x1e8>
    b854:	mov	r9, r0
    b856:	b.n	b7da <__udivmoddi4+0x242>
    b858:	mov	sl, r1
    b85a:	b.n	b756 <__udivmoddi4+0x1be>
    b85c:	subs	r3, #2
    b85e:	add	r4, r7
    b860:	b.n	b6f4 <__udivmoddi4+0x15c>
    b862:	mov	r0, r1
    b864:	b.n	b67c <__udivmoddi4+0xe4>
    b866:	subs	r0, #2
    b868:	add	r6, r7
    b86a:	b.n	b6cc <__udivmoddi4+0x134>
    b86c:	cmp	sl, r8
    b86e:	bcc.n	b840 <__udivmoddi4+0x2a8>
    b870:	mov	r6, r7
    b872:	b.n	b818 <__udivmoddi4+0x280>
    b874:	mov	r1, r5
    b876:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b87a:	nop

0000b87c <__aeabi_idiv0>:
    b87c:	bx	lr
    b87e:	nop

0000b880 <__cxa_atexit>:
    b880:	mov	r3, r2
    b882:	mov	r2, r1
    b884:	mov	r1, r0
    b886:	movs	r0, #2
    b888:	b.w	c868 <__register_exitproc>

0000b88c <__errno>:
    b88c:	ldr	r3, [pc, #4]	; (b894 <__errno+0x8>)
    b88e:	ldr	r0, [r3, #0]
    b890:	bx	lr
    b892:	nop
    b894:	.word	0x1fff0eb8

0000b898 <__libc_init_array>:
    b898:	push	{r4, r5, r6, lr}
    b89a:	ldr	r6, [pc, #60]	; (b8d8 <__libc_init_array+0x40>)
    b89c:	ldr	r5, [pc, #60]	; (b8dc <__libc_init_array+0x44>)
    b89e:	subs	r6, r6, r5
    b8a0:	asrs	r6, r6, #2
    b8a2:	it	ne
    b8a4:	movne	r4, #0
    b8a6:	beq.n	b8b4 <__libc_init_array+0x1c>
    b8a8:	adds	r4, #1
    b8aa:	ldr.w	r3, [r5], #4
    b8ae:	blx	r3
    b8b0:	cmp	r6, r4
    b8b2:	bne.n	b8a8 <__libc_init_array+0x10>
    b8b4:	ldr	r6, [pc, #40]	; (b8e0 <__libc_init_array+0x48>)
    b8b6:	ldr	r5, [pc, #44]	; (b8e4 <__libc_init_array+0x4c>)
    b8b8:	subs	r6, r6, r5
    b8ba:	bl	10340 <_init>
    b8be:	asrs	r6, r6, #2
    b8c0:	it	ne
    b8c2:	movne	r4, #0
    b8c4:	beq.n	b8d4 <__libc_init_array+0x3c>
    b8c6:	adds	r4, #1
    b8c8:	ldr.w	r3, [r5], #4
    b8cc:	blx	r3
    b8ce:	cmp	r6, r4
    b8d0:	bne.n	b8c6 <__libc_init_array+0x2e>
    b8d2:	pop	{r4, r5, r6, pc}
    b8d4:	pop	{r4, r5, r6, pc}
    b8d6:	nop
    b8d8:	.word	0x0001034c
    b8dc:	.word	0x0001034c
    b8e0:	.word	0x0001035c
    b8e4:	.word	0x0001034c

0000b8e8 <malloc>:
    b8e8:	ldr	r3, [pc, #8]	; (b8f4 <malloc+0xc>)
    b8ea:	mov	r1, r0
    b8ec:	ldr	r0, [r3, #0]
    b8ee:	b.w	b908 <_malloc_r>
    b8f2:	nop
    b8f4:	.word	0x1fff0eb8

0000b8f8 <free>:
    b8f8:	ldr	r3, [pc, #8]	; (b904 <free+0xc>)
    b8fa:	mov	r1, r0
    b8fc:	ldr	r0, [r3, #0]
    b8fe:	b.w	c9f0 <_free_r>
    b902:	nop
    b904:	.word	0x1fff0eb8

0000b908 <_malloc_r>:
    b908:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b90c:	add.w	r5, r1, #11
    b910:	cmp	r5, #22
    b912:	sub	sp, #12
    b914:	mov	r6, r0
    b916:	bls.w	ba58 <_malloc_r+0x150>
    b91a:	bics.w	r5, r5, #7
    b91e:	bmi.w	baa0 <_malloc_r+0x198>
    b922:	cmp	r1, r5
    b924:	bhi.w	baa0 <_malloc_r+0x198>
    b928:	bl	c118 <__malloc_lock>
    b92c:	cmp.w	r5, #504	; 0x1f8
    b930:	bcc.w	be6c <_malloc_r+0x564>
    b934:	lsrs	r3, r5, #9
    b936:	beq.w	baae <_malloc_r+0x1a6>
    b93a:	cmp	r3, #4
    b93c:	bhi.w	bc46 <_malloc_r+0x33e>
    b940:	lsrs	r0, r5, #6
    b942:	add.w	lr, r0, #57	; 0x39
    b946:	mov.w	r3, lr, lsl #1
    b94a:	adds	r0, #56	; 0x38
    b94c:	ldr	r7, [pc, #784]	; (bc60 <_malloc_r+0x358>)
    b94e:	add.w	r3, r7, r3, lsl #2
    b952:	sub.w	r1, r3, #8
    b956:	ldr	r4, [r3, #4]
    b958:	cmp	r1, r4
    b95a:	bne.n	b96c <_malloc_r+0x64>
    b95c:	b.n	bab8 <_malloc_r+0x1b0>
    b95e:	cmp	r2, #0
    b960:	bge.w	babc <_malloc_r+0x1b4>
    b964:	ldr	r4, [r4, #12]
    b966:	cmp	r1, r4
    b968:	beq.w	bab8 <_malloc_r+0x1b0>
    b96c:	ldr	r3, [r4, #4]
    b96e:	bic.w	r3, r3, #3
    b972:	subs	r2, r3, r5
    b974:	cmp	r2, #15
    b976:	ble.n	b95e <_malloc_r+0x56>
    b978:	ldr	r1, [pc, #740]	; (bc60 <_malloc_r+0x358>)
    b97a:	ldr	r4, [r7, #16]
    b97c:	add.w	lr, r1, #8
    b980:	cmp	r4, lr
    b982:	beq.w	bcec <_malloc_r+0x3e4>
    b986:	ldr	r3, [r4, #4]
    b988:	bic.w	r3, r3, #3
    b98c:	subs	r2, r3, r5
    b98e:	cmp	r2, #15
    b990:	bgt.w	bcc6 <_malloc_r+0x3be>
    b994:	cmp	r2, #0
    b996:	str.w	lr, [r1, #20]
    b99a:	str.w	lr, [r1, #16]
    b99e:	bge.w	bade <_malloc_r+0x1d6>
    b9a2:	cmp.w	r3, #512	; 0x200
    b9a6:	bcs.w	bc78 <_malloc_r+0x370>
    b9aa:	lsrs	r3, r3, #3
    b9ac:	add.w	ip, r3, #1
    b9b0:	movs	r2, #1
    b9b2:	asrs	r3, r3, #2
    b9b4:	lsl.w	r3, r2, r3
    b9b8:	ldr	r2, [r1, #4]
    b9ba:	ldr.w	r8, [r1, ip, lsl #3]
    b9be:	str.w	r8, [r4, #8]
    b9c2:	add.w	r9, r1, ip, lsl #3
    b9c6:	orrs	r2, r3
    b9c8:	sub.w	r3, r9, #8
    b9cc:	str	r3, [r4, #12]
    b9ce:	str	r2, [r1, #4]
    b9d0:	str.w	r4, [r1, ip, lsl #3]
    b9d4:	str.w	r4, [r8, #12]
    b9d8:	asrs	r3, r0, #2
    b9da:	movs	r4, #1
    b9dc:	lsls	r4, r3
    b9de:	cmp	r4, r2
    b9e0:	bhi.w	baf8 <_malloc_r+0x1f0>
    b9e4:	tst	r4, r2
    b9e6:	bne.n	b9f6 <_malloc_r+0xee>
    b9e8:	bic.w	r0, r0, #3
    b9ec:	lsls	r4, r4, #1
    b9ee:	tst	r4, r2
    b9f0:	add.w	r0, r0, #4
    b9f4:	beq.n	b9ec <_malloc_r+0xe4>
    b9f6:	add.w	r9, r7, r0, lsl #3
    b9fa:	mov	ip, r9
    b9fc:	mov	r8, r0
    b9fe:	ldr.w	r1, [ip, #12]
    ba02:	cmp	ip, r1
    ba04:	bne.n	ba16 <_malloc_r+0x10e>
    ba06:	b.n	bcf0 <_malloc_r+0x3e8>
    ba08:	cmp	r2, #0
    ba0a:	bge.w	bd10 <_malloc_r+0x408>
    ba0e:	ldr	r1, [r1, #12]
    ba10:	cmp	ip, r1
    ba12:	beq.w	bcf0 <_malloc_r+0x3e8>
    ba16:	ldr	r3, [r1, #4]
    ba18:	bic.w	r3, r3, #3
    ba1c:	subs	r2, r3, r5
    ba1e:	cmp	r2, #15
    ba20:	ble.n	ba08 <_malloc_r+0x100>
    ba22:	mov	r4, r1
    ba24:	ldr.w	ip, [r1, #12]
    ba28:	ldr.w	r8, [r4, #8]!
    ba2c:	adds	r3, r1, r5
    ba2e:	orr.w	r5, r5, #1
    ba32:	str	r5, [r1, #4]
    ba34:	orr.w	r1, r2, #1
    ba38:	str.w	ip, [r8, #12]
    ba3c:	mov	r0, r6
    ba3e:	str.w	r8, [ip, #8]
    ba42:	str	r3, [r7, #20]
    ba44:	str	r3, [r7, #16]
    ba46:	str.w	lr, [r3, #12]
    ba4a:	str.w	lr, [r3, #8]
    ba4e:	str	r1, [r3, #4]
    ba50:	str	r2, [r3, r2]
    ba52:	bl	c11c <__malloc_unlock>
    ba56:	b.n	ba98 <_malloc_r+0x190>
    ba58:	cmp	r1, #16
    ba5a:	bhi.n	baa0 <_malloc_r+0x198>
    ba5c:	bl	c118 <__malloc_lock>
    ba60:	movs	r5, #16
    ba62:	movs	r3, #6
    ba64:	movs	r0, #2
    ba66:	ldr	r7, [pc, #504]	; (bc60 <_malloc_r+0x358>)
    ba68:	add.w	r3, r7, r3, lsl #2
    ba6c:	sub.w	r2, r3, #8
    ba70:	ldr	r4, [r3, #4]
    ba72:	cmp	r4, r2
    ba74:	beq.w	bd02 <_malloc_r+0x3fa>
    ba78:	ldr	r3, [r4, #4]
    ba7a:	ldr	r1, [r4, #12]
    ba7c:	ldr	r5, [r4, #8]
    ba7e:	bic.w	r3, r3, #3
    ba82:	add	r3, r4
    ba84:	mov	r0, r6
    ba86:	ldr	r2, [r3, #4]
    ba88:	str	r1, [r5, #12]
    ba8a:	orr.w	r2, r2, #1
    ba8e:	str	r5, [r1, #8]
    ba90:	str	r2, [r3, #4]
    ba92:	bl	c11c <__malloc_unlock>
    ba96:	adds	r4, #8
    ba98:	mov	r0, r4
    ba9a:	add	sp, #12
    ba9c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    baa0:	movs	r4, #0
    baa2:	movs	r3, #12
    baa4:	mov	r0, r4
    baa6:	str	r3, [r6, #0]
    baa8:	add	sp, #12
    baaa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    baae:	movs	r3, #128	; 0x80
    bab0:	mov.w	lr, #64	; 0x40
    bab4:	movs	r0, #63	; 0x3f
    bab6:	b.n	b94c <_malloc_r+0x44>
    bab8:	mov	r0, lr
    baba:	b.n	b978 <_malloc_r+0x70>
    babc:	add	r3, r4
    babe:	ldr	r1, [r4, #12]
    bac0:	ldr	r2, [r3, #4]
    bac2:	ldr	r5, [r4, #8]
    bac4:	orr.w	r2, r2, #1
    bac8:	str	r1, [r5, #12]
    baca:	mov	r0, r6
    bacc:	str	r5, [r1, #8]
    bace:	str	r2, [r3, #4]
    bad0:	bl	c11c <__malloc_unlock>
    bad4:	adds	r4, #8
    bad6:	mov	r0, r4
    bad8:	add	sp, #12
    bada:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bade:	add	r3, r4
    bae0:	mov	r0, r6
    bae2:	ldr	r2, [r3, #4]
    bae4:	orr.w	r2, r2, #1
    bae8:	str	r2, [r3, #4]
    baea:	bl	c11c <__malloc_unlock>
    baee:	adds	r4, #8
    baf0:	mov	r0, r4
    baf2:	add	sp, #12
    baf4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    baf8:	ldr	r4, [r7, #8]
    bafa:	ldr	r3, [r4, #4]
    bafc:	bic.w	r8, r3, #3
    bb00:	cmp	r8, r5
    bb02:	bcc.n	bb0e <_malloc_r+0x206>
    bb04:	rsb	r3, r5, r8
    bb08:	cmp	r3, #15
    bb0a:	bgt.w	bc26 <_malloc_r+0x31e>
    bb0e:	ldr	r3, [pc, #340]	; (bc64 <_malloc_r+0x35c>)
    bb10:	ldr.w	r9, [pc, #352]	; bc74 <_malloc_r+0x36c>
    bb14:	ldr	r2, [r3, #0]
    bb16:	ldr.w	r3, [r9]
    bb1a:	adds	r3, #1
    bb1c:	add	r2, r5
    bb1e:	add.w	sl, r4, r8
    bb22:	beq.w	bde6 <_malloc_r+0x4de>
    bb26:	add.w	r2, r2, #4096	; 0x1000
    bb2a:	adds	r2, #15
    bb2c:	bic.w	r2, r2, #4080	; 0xff0
    bb30:	bic.w	r2, r2, #15
    bb34:	mov	r1, r2
    bb36:	mov	r0, r6
    bb38:	str	r2, [sp, #4]
    bb3a:	bl	c500 <_sbrk_r>
    bb3e:	cmp.w	r0, #4294967295
    bb42:	mov	fp, r0
    bb44:	ldr	r2, [sp, #4]
    bb46:	beq.w	bdfa <_malloc_r+0x4f2>
    bb4a:	cmp	sl, r0
    bb4c:	bhi.w	bd48 <_malloc_r+0x440>
    bb50:	ldr	r3, [pc, #276]	; (bc68 <_malloc_r+0x360>)
    bb52:	ldr	r1, [r3, #0]
    bb54:	cmp	sl, fp
    bb56:	add	r1, r2
    bb58:	str	r1, [r3, #0]
    bb5a:	beq.w	be04 <_malloc_r+0x4fc>
    bb5e:	ldr.w	r0, [r9]
    bb62:	ldr.w	lr, [pc, #272]	; bc74 <_malloc_r+0x36c>
    bb66:	adds	r0, #1
    bb68:	ittet	ne
    bb6a:	rsbne	sl, sl, fp
    bb6e:	addne	r1, sl
    bb70:	streq.w	fp, [lr]
    bb74:	strne	r1, [r3, #0]
    bb76:	ands.w	r1, fp, #7
    bb7a:	beq.w	bdac <_malloc_r+0x4a4>
    bb7e:	rsb	r0, r1, #8
    bb82:	rsb	r1, r1, #4096	; 0x1000
    bb86:	add	fp, r0
    bb88:	adds	r1, #8
    bb8a:	add	r2, fp
    bb8c:	ubfx	r2, r2, #0, #12
    bb90:	rsb	r9, r2, r1
    bb94:	mov	r1, r9
    bb96:	mov	r0, r6
    bb98:	str	r3, [sp, #4]
    bb9a:	bl	c500 <_sbrk_r>
    bb9e:	adds	r3, r0, #1
    bba0:	ldr	r3, [sp, #4]
    bba2:	beq.w	be24 <_malloc_r+0x51c>
    bba6:	rsb	r2, fp, r0
    bbaa:	add	r2, r9
    bbac:	orr.w	r2, r2, #1
    bbb0:	ldr	r1, [r3, #0]
    bbb2:	str.w	fp, [r7, #8]
    bbb6:	add	r1, r9
    bbb8:	cmp	r4, r7
    bbba:	str.w	r2, [fp, #4]
    bbbe:	str	r1, [r3, #0]
    bbc0:	ldr.w	r9, [pc, #164]	; bc68 <_malloc_r+0x360>
    bbc4:	beq.n	bbf4 <_malloc_r+0x2ec>
    bbc6:	cmp.w	r8, #15
    bbca:	bls.w	bdc8 <_malloc_r+0x4c0>
    bbce:	ldr	r2, [r4, #4]
    bbd0:	sub.w	r3, r8, #12
    bbd4:	bic.w	r3, r3, #7
    bbd8:	adds	r0, r4, r3
    bbda:	and.w	r2, r2, #1
    bbde:	mov.w	lr, #5
    bbe2:	orrs	r2, r3
    bbe4:	cmp	r3, #15
    bbe6:	str	r2, [r4, #4]
    bbe8:	str.w	lr, [r0, #4]
    bbec:	str.w	lr, [r0, #8]
    bbf0:	bhi.w	be2c <_malloc_r+0x524>
    bbf4:	ldr	r3, [pc, #116]	; (bc6c <_malloc_r+0x364>)
    bbf6:	ldr	r4, [r7, #8]
    bbf8:	ldr	r2, [r3, #0]
    bbfa:	cmp	r1, r2
    bbfc:	it	hi
    bbfe:	strhi	r1, [r3, #0]
    bc00:	ldr	r3, [pc, #108]	; (bc70 <_malloc_r+0x368>)
    bc02:	ldr	r2, [r3, #0]
    bc04:	cmp	r1, r2
    bc06:	ldr	r2, [r4, #4]
    bc08:	it	hi
    bc0a:	strhi	r1, [r3, #0]
    bc0c:	bic.w	r2, r2, #3
    bc10:	cmp	r5, r2
    bc12:	sub.w	r3, r2, r5
    bc16:	bhi.n	bc1c <_malloc_r+0x314>
    bc18:	cmp	r3, #15
    bc1a:	bgt.n	bc26 <_malloc_r+0x31e>
    bc1c:	mov	r0, r6
    bc1e:	bl	c11c <__malloc_unlock>
    bc22:	movs	r4, #0
    bc24:	b.n	ba98 <_malloc_r+0x190>
    bc26:	adds	r2, r4, r5
    bc28:	orr.w	r3, r3, #1
    bc2c:	orr.w	r5, r5, #1
    bc30:	str	r5, [r4, #4]
    bc32:	mov	r0, r6
    bc34:	str	r2, [r7, #8]
    bc36:	str	r3, [r2, #4]
    bc38:	bl	c11c <__malloc_unlock>
    bc3c:	adds	r4, #8
    bc3e:	mov	r0, r4
    bc40:	add	sp, #12
    bc42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bc46:	cmp	r3, #20
    bc48:	bls.n	bd2e <_malloc_r+0x426>
    bc4a:	cmp	r3, #84	; 0x54
    bc4c:	bhi.w	bd98 <_malloc_r+0x490>
    bc50:	lsrs	r0, r5, #12
    bc52:	add.w	lr, r0, #111	; 0x6f
    bc56:	mov.w	r3, lr, lsl #1
    bc5a:	adds	r0, #110	; 0x6e
    bc5c:	b.n	b94c <_malloc_r+0x44>
    bc5e:	nop
    bc60:	.word	0x1fff1028
    bc64:	.word	0x1fff1b38
    bc68:	.word	0x1fff1b3c
    bc6c:	.word	0x1fff1b34
    bc70:	.word	0x1fff1b30
    bc74:	.word	0x1fff1434
    bc78:	lsrs	r2, r3, #9
    bc7a:	cmp	r2, #4
    bc7c:	bls.n	bd3c <_malloc_r+0x434>
    bc7e:	cmp	r2, #20
    bc80:	bhi.w	bdea <_malloc_r+0x4e2>
    bc84:	add.w	r1, r2, #92	; 0x5c
    bc88:	lsls	r1, r1, #1
    bc8a:	adds	r2, #91	; 0x5b
    bc8c:	add.w	ip, r7, r1, lsl #2
    bc90:	ldr.w	r1, [r7, r1, lsl #2]
    bc94:	ldr.w	r8, [pc, #476]	; be74 <_malloc_r+0x56c>
    bc98:	sub.w	ip, ip, #8
    bc9c:	cmp	ip, r1
    bc9e:	beq.w	bdb2 <_malloc_r+0x4aa>
    bca2:	ldr	r2, [r1, #4]
    bca4:	bic.w	r2, r2, #3
    bca8:	cmp	r3, r2
    bcaa:	bcs.n	bcb2 <_malloc_r+0x3aa>
    bcac:	ldr	r1, [r1, #8]
    bcae:	cmp	ip, r1
    bcb0:	bne.n	bca2 <_malloc_r+0x39a>
    bcb2:	ldr.w	ip, [r1, #12]
    bcb6:	ldr	r2, [r7, #4]
    bcb8:	str.w	ip, [r4, #12]
    bcbc:	str	r1, [r4, #8]
    bcbe:	str.w	r4, [ip, #8]
    bcc2:	str	r4, [r1, #12]
    bcc4:	b.n	b9d8 <_malloc_r+0xd0>
    bcc6:	adds	r3, r4, r5
    bcc8:	orr.w	r7, r2, #1
    bccc:	orr.w	r5, r5, #1
    bcd0:	str	r5, [r4, #4]
    bcd2:	mov	r0, r6
    bcd4:	str	r3, [r1, #20]
    bcd6:	str	r3, [r1, #16]
    bcd8:	str.w	lr, [r3, #12]
    bcdc:	str.w	lr, [r3, #8]
    bce0:	str	r7, [r3, #4]
    bce2:	str	r2, [r3, r2]
    bce4:	adds	r4, #8
    bce6:	bl	c11c <__malloc_unlock>
    bcea:	b.n	ba98 <_malloc_r+0x190>
    bcec:	ldr	r2, [r1, #4]
    bcee:	b.n	b9d8 <_malloc_r+0xd0>
    bcf0:	add.w	r8, r8, #1
    bcf4:	tst.w	r8, #3
    bcf8:	add.w	ip, ip, #8
    bcfc:	bne.w	b9fe <_malloc_r+0xf6>
    bd00:	b.n	bd64 <_malloc_r+0x45c>
    bd02:	ldr	r4, [r3, #12]
    bd04:	cmp	r3, r4
    bd06:	it	eq
    bd08:	addeq	r0, #2
    bd0a:	beq.w	b978 <_malloc_r+0x70>
    bd0e:	b.n	ba78 <_malloc_r+0x170>
    bd10:	add	r3, r1
    bd12:	mov	r4, r1
    bd14:	ldr	r2, [r3, #4]
    bd16:	ldr	r1, [r1, #12]
    bd18:	ldr.w	r5, [r4, #8]!
    bd1c:	orr.w	r2, r2, #1
    bd20:	str	r2, [r3, #4]
    bd22:	mov	r0, r6
    bd24:	str	r1, [r5, #12]
    bd26:	str	r5, [r1, #8]
    bd28:	bl	c11c <__malloc_unlock>
    bd2c:	b.n	ba98 <_malloc_r+0x190>
    bd2e:	add.w	lr, r3, #92	; 0x5c
    bd32:	add.w	r0, r3, #91	; 0x5b
    bd36:	mov.w	r3, lr, lsl #1
    bd3a:	b.n	b94c <_malloc_r+0x44>
    bd3c:	lsrs	r2, r3, #6
    bd3e:	add.w	r1, r2, #57	; 0x39
    bd42:	lsls	r1, r1, #1
    bd44:	adds	r2, #56	; 0x38
    bd46:	b.n	bc8c <_malloc_r+0x384>
    bd48:	cmp	r4, r7
    bd4a:	ldr	r3, [pc, #296]	; (be74 <_malloc_r+0x56c>)
    bd4c:	beq.w	bb50 <_malloc_r+0x248>
    bd50:	ldr	r4, [r3, #8]
    bd52:	ldr	r2, [r4, #4]
    bd54:	bic.w	r2, r2, #3
    bd58:	b.n	bc10 <_malloc_r+0x308>
    bd5a:	ldr.w	r3, [r9], #-8
    bd5e:	cmp	r9, r3
    bd60:	bne.w	be68 <_malloc_r+0x560>
    bd64:	tst.w	r0, #3
    bd68:	add.w	r0, r0, #4294967295
    bd6c:	bne.n	bd5a <_malloc_r+0x452>
    bd6e:	ldr	r3, [r7, #4]
    bd70:	bic.w	r3, r3, r4
    bd74:	str	r3, [r7, #4]
    bd76:	lsls	r4, r4, #1
    bd78:	cmp	r4, r3
    bd7a:	bhi.w	baf8 <_malloc_r+0x1f0>
    bd7e:	cmp	r4, #0
    bd80:	beq.w	baf8 <_malloc_r+0x1f0>
    bd84:	tst	r4, r3
    bd86:	mov	r0, r8
    bd88:	bne.w	b9f6 <_malloc_r+0xee>
    bd8c:	lsls	r4, r4, #1
    bd8e:	tst	r4, r3
    bd90:	add.w	r0, r0, #4
    bd94:	beq.n	bd8c <_malloc_r+0x484>
    bd96:	b.n	b9f6 <_malloc_r+0xee>
    bd98:	cmp.w	r3, #340	; 0x154
    bd9c:	bhi.n	bdd0 <_malloc_r+0x4c8>
    bd9e:	lsrs	r0, r5, #15
    bda0:	add.w	lr, r0, #120	; 0x78
    bda4:	mov.w	r3, lr, lsl #1
    bda8:	adds	r0, #119	; 0x77
    bdaa:	b.n	b94c <_malloc_r+0x44>
    bdac:	mov.w	r1, #4096	; 0x1000
    bdb0:	b.n	bb8a <_malloc_r+0x282>
    bdb2:	movs	r1, #1
    bdb4:	ldr.w	r3, [r8, #4]
    bdb8:	asrs	r2, r2, #2
    bdba:	lsl.w	r2, r1, r2
    bdbe:	orrs	r2, r3
    bdc0:	str.w	r2, [r8, #4]
    bdc4:	mov	r1, ip
    bdc6:	b.n	bcb8 <_malloc_r+0x3b0>
    bdc8:	movs	r3, #1
    bdca:	str.w	r3, [fp, #4]
    bdce:	b.n	bc1c <_malloc_r+0x314>
    bdd0:	movw	r2, #1364	; 0x554
    bdd4:	cmp	r3, r2
    bdd6:	bhi.n	be1a <_malloc_r+0x512>
    bdd8:	lsrs	r0, r5, #18
    bdda:	add.w	lr, r0, #125	; 0x7d
    bdde:	mov.w	r3, lr, lsl #1
    bde2:	adds	r0, #124	; 0x7c
    bde4:	b.n	b94c <_malloc_r+0x44>
    bde6:	adds	r2, #16
    bde8:	b.n	bb34 <_malloc_r+0x22c>
    bdea:	cmp	r2, #84	; 0x54
    bdec:	bhi.n	be3c <_malloc_r+0x534>
    bdee:	lsrs	r2, r3, #12
    bdf0:	add.w	r1, r2, #111	; 0x6f
    bdf4:	lsls	r1, r1, #1
    bdf6:	adds	r2, #110	; 0x6e
    bdf8:	b.n	bc8c <_malloc_r+0x384>
    bdfa:	ldr	r4, [r7, #8]
    bdfc:	ldr	r2, [r4, #4]
    bdfe:	bic.w	r2, r2, #3
    be02:	b.n	bc10 <_malloc_r+0x308>
    be04:	ubfx	r0, sl, #0, #12
    be08:	cmp	r0, #0
    be0a:	bne.w	bb5e <_malloc_r+0x256>
    be0e:	add	r2, r8
    be10:	ldr	r3, [r7, #8]
    be12:	orr.w	r2, r2, #1
    be16:	str	r2, [r3, #4]
    be18:	b.n	bbf4 <_malloc_r+0x2ec>
    be1a:	movs	r3, #254	; 0xfe
    be1c:	mov.w	lr, #127	; 0x7f
    be20:	movs	r0, #126	; 0x7e
    be22:	b.n	b94c <_malloc_r+0x44>
    be24:	movs	r2, #1
    be26:	mov.w	r9, #0
    be2a:	b.n	bbb0 <_malloc_r+0x2a8>
    be2c:	add.w	r1, r4, #8
    be30:	mov	r0, r6
    be32:	bl	c9f0 <_free_r>
    be36:	ldr.w	r1, [r9]
    be3a:	b.n	bbf4 <_malloc_r+0x2ec>
    be3c:	cmp.w	r2, #340	; 0x154
    be40:	bhi.n	be4e <_malloc_r+0x546>
    be42:	lsrs	r2, r3, #15
    be44:	add.w	r1, r2, #120	; 0x78
    be48:	lsls	r1, r1, #1
    be4a:	adds	r2, #119	; 0x77
    be4c:	b.n	bc8c <_malloc_r+0x384>
    be4e:	movw	r1, #1364	; 0x554
    be52:	cmp	r2, r1
    be54:	bhi.n	be62 <_malloc_r+0x55a>
    be56:	lsrs	r2, r3, #18
    be58:	add.w	r1, r2, #125	; 0x7d
    be5c:	lsls	r1, r1, #1
    be5e:	adds	r2, #124	; 0x7c
    be60:	b.n	bc8c <_malloc_r+0x384>
    be62:	movs	r1, #254	; 0xfe
    be64:	movs	r2, #126	; 0x7e
    be66:	b.n	bc8c <_malloc_r+0x384>
    be68:	ldr	r3, [r7, #4]
    be6a:	b.n	bd76 <_malloc_r+0x46e>
    be6c:	lsrs	r0, r5, #3
    be6e:	adds	r3, r0, #1
    be70:	lsls	r3, r3, #1
    be72:	b.n	ba66 <_malloc_r+0x15e>
    be74:	.word	0x1fff1028

0000be78 <__ascii_mbtowc>:
    be78:	sub	sp, #8
    be7a:	cbz	r1, be90 <__ascii_mbtowc+0x18>
    be7c:	cbz	r2, be96 <__ascii_mbtowc+0x1e>
    be7e:	cbz	r3, be9c <__ascii_mbtowc+0x24>
    be80:	ldrb	r3, [r2, #0]
    be82:	str	r3, [r1, #0]
    be84:	ldrb	r2, [r2, #0]
    be86:	adds	r0, r2, #0
    be88:	it	ne
    be8a:	movne	r0, #1
    be8c:	add	sp, #8
    be8e:	bx	lr
    be90:	add	r1, sp, #4
    be92:	cmp	r2, #0
    be94:	bne.n	be7e <__ascii_mbtowc+0x6>
    be96:	mov	r0, r2
    be98:	add	sp, #8
    be9a:	bx	lr
    be9c:	mvn.w	r0, #1
    bea0:	b.n	be8c <__ascii_mbtowc+0x14>
    bea2:	nop
    bea4:			; <UNDEFINED> instruction: 0xffffffff
    bea8:			; <UNDEFINED> instruction: 0xffffffff
    beac:			; <UNDEFINED> instruction: 0xffffffff

0000beb0 <memchr>:
    beb0:	and.w	r1, r1, #255	; 0xff
    beb4:	cmp	r2, #16
    beb6:	blt.n	bf10 <memchr+0x60>
    beb8:	tst.w	r0, #7
    bebc:	beq.n	bed0 <memchr+0x20>
    bebe:	ldrb.w	r3, [r0], #1
    bec2:	subs	r2, #1
    bec4:	cmp	r3, r1
    bec6:	beq.n	bf24 <memchr+0x74>
    bec8:	tst.w	r0, #7
    becc:	cbz	r2, bf20 <memchr+0x70>
    bece:	bne.n	bebe <memchr+0xe>
    bed0:	push	{r4, r5, r6, r7}
    bed2:	orr.w	r1, r1, r1, lsl #8
    bed6:	orr.w	r1, r1, r1, lsl #16
    beda:	bic.w	r4, r2, #7
    bede:	mvns.w	r7, #0
    bee2:	movs	r3, #0
    bee4:	ldrd	r5, r6, [r0], #8
    bee8:	subs	r4, #8
    beea:	eor.w	r5, r5, r1
    beee:	eor.w	r6, r6, r1
    bef2:	uadd8	r5, r5, r7
    bef6:	sel	r5, r3, r7
    befa:	uadd8	r6, r6, r7
    befe:	sel	r6, r5, r7
    bf02:	cbnz	r6, bf28 <memchr+0x78>
    bf04:	bne.n	bee4 <memchr+0x34>
    bf06:	pop	{r4, r5, r6, r7}
    bf08:	and.w	r1, r1, #255	; 0xff
    bf0c:	and.w	r2, r2, #7
    bf10:	cbz	r2, bf20 <memchr+0x70>
    bf12:	ldrb.w	r3, [r0], #1
    bf16:	subs	r2, #1
    bf18:	eor.w	r3, r3, r1
    bf1c:	cbz	r3, bf24 <memchr+0x74>
    bf1e:	bne.n	bf12 <memchr+0x62>
    bf20:	movs	r0, #0
    bf22:	bx	lr
    bf24:	subs	r0, #1
    bf26:	bx	lr
    bf28:	cmp	r5, #0
    bf2a:	itte	eq
    bf2c:	moveq	r5, r6
    bf2e:	subeq	r0, #3
    bf30:	subne	r0, #7
    bf32:	tst.w	r5, #1
    bf36:	bne.n	bf48 <memchr+0x98>
    bf38:	adds	r0, #1
    bf3a:	tst.w	r5, #256	; 0x100
    bf3e:	ittt	eq
    bf40:	addeq	r0, #1
    bf42:	tsteq.w	r5, #98304	; 0x18000
    bf46:	addeq	r0, #1
    bf48:	pop	{r4, r5, r6, r7}
    bf4a:	subs	r0, #1
    bf4c:	bx	lr
    bf4e:	nop

0000bf50 <memcmp>:
    bf50:	cmp	r2, #3
    bf52:	push	{r4, r5, r6}
    bf54:	bls.n	bfa4 <memcmp+0x54>
    bf56:	orr.w	r3, r0, r1
    bf5a:	lsls	r3, r3, #30
    bf5c:	beq.n	bf82 <memcmp+0x32>
    bf5e:	ldrb	r4, [r0, #0]
    bf60:	ldrb	r5, [r1, #0]
    bf62:	cmp	r4, r5
    bf64:	bne.n	bfac <memcmp+0x5c>
    bf66:	add	r2, r0
    bf68:	adds	r3, r0, #1
    bf6a:	b.n	bf78 <memcmp+0x28>
    bf6c:	ldrb.w	r4, [r3], #1
    bf70:	ldrb.w	r5, [r1, #1]!
    bf74:	cmp	r4, r5
    bf76:	bne.n	bfac <memcmp+0x5c>
    bf78:	cmp	r3, r2
    bf7a:	bne.n	bf6c <memcmp+0x1c>
    bf7c:	movs	r0, #0
    bf7e:	pop	{r4, r5, r6}
    bf80:	bx	lr
    bf82:	mov	r4, r1
    bf84:	mov	r3, r0
    bf86:	ldr	r6, [r3, #0]
    bf88:	ldr	r5, [r4, #0]
    bf8a:	cmp	r6, r5
    bf8c:	mov	r0, r3
    bf8e:	mov	r1, r4
    bf90:	add.w	r3, r3, #4
    bf94:	add.w	r4, r4, #4
    bf98:	bne.n	bf5e <memcmp+0xe>
    bf9a:	subs	r2, #4
    bf9c:	cmp	r2, #3
    bf9e:	mov	r0, r3
    bfa0:	mov	r1, r4
    bfa2:	bhi.n	bf86 <memcmp+0x36>
    bfa4:	cmp	r2, #0
    bfa6:	bne.n	bf5e <memcmp+0xe>
    bfa8:	mov	r0, r2
    bfaa:	b.n	bf7e <memcmp+0x2e>
    bfac:	subs	r0, r4, r5
    bfae:	pop	{r4, r5, r6}
    bfb0:	bx	lr
    bfb2:	nop

0000bfb4 <memmove>:
    bfb4:	cmp	r0, r1
    bfb6:	push	{r4, r5, r6, r7, lr}
    bfb8:	bls.n	bfd6 <memmove+0x22>
    bfba:	adds	r3, r1, r2
    bfbc:	cmp	r0, r3
    bfbe:	bcs.n	bfd6 <memmove+0x22>
    bfc0:	adds	r1, r0, r2
    bfc2:	cmp	r2, #0
    bfc4:	beq.n	c06a <memmove+0xb6>
    bfc6:	subs	r2, r3, r2
    bfc8:	ldrb.w	r4, [r3, #-1]!
    bfcc:	strb.w	r4, [r1, #-1]!
    bfd0:	cmp	r3, r2
    bfd2:	bne.n	bfc8 <memmove+0x14>
    bfd4:	pop	{r4, r5, r6, r7, pc}
    bfd6:	cmp	r2, #15
    bfd8:	bls.n	c06c <memmove+0xb8>
    bfda:	orr.w	r3, r1, r0
    bfde:	lsls	r3, r3, #30
    bfe0:	bne.n	c070 <memmove+0xbc>
    bfe2:	add.w	r4, r0, #16
    bfe6:	add.w	r3, r1, #16
    bfea:	mov	r5, r2
    bfec:	ldr.w	r6, [r3, #-16]
    bff0:	str.w	r6, [r4, #-16]
    bff4:	ldr.w	r6, [r3, #-12]
    bff8:	str.w	r6, [r4, #-12]
    bffc:	ldr.w	r6, [r3, #-8]
    c000:	str.w	r6, [r4, #-8]
    c004:	subs	r5, #16
    c006:	ldr.w	r6, [r3, #-4]
    c00a:	str.w	r6, [r4, #-4]
    c00e:	cmp	r5, #15
    c010:	add.w	r3, r3, #16
    c014:	add.w	r4, r4, #16
    c018:	bhi.n	bfec <memmove+0x38>
    c01a:	sub.w	r3, r2, #16
    c01e:	bic.w	r3, r3, #15
    c022:	and.w	lr, r2, #15
    c026:	adds	r3, #16
    c028:	cmp.w	lr, #3
    c02c:	add	r1, r3
    c02e:	add	r3, r0
    c030:	bls.n	c076 <memmove+0xc2>
    c032:	subs	r6, r3, #4
    c034:	mov	r5, r1
    c036:	mov	r4, lr
    c038:	subs	r4, #4
    c03a:	ldr.w	r7, [r5], #4
    c03e:	str.w	r7, [r6, #4]!
    c042:	cmp	r4, #3
    c044:	bhi.n	c038 <memmove+0x84>
    c046:	sub.w	r4, lr, #4
    c04a:	bic.w	r4, r4, #3
    c04e:	adds	r4, #4
    c050:	add	r3, r4
    c052:	add	r1, r4
    c054:	and.w	r2, r2, #3
    c058:	cbz	r2, c074 <memmove+0xc0>
    c05a:	subs	r3, #1
    c05c:	add	r2, r1
    c05e:	ldrb.w	r4, [r1], #1
    c062:	strb.w	r4, [r3, #1]!
    c066:	cmp	r2, r1
    c068:	bne.n	c05e <memmove+0xaa>
    c06a:	pop	{r4, r5, r6, r7, pc}
    c06c:	mov	r3, r0
    c06e:	b.n	c058 <memmove+0xa4>
    c070:	mov	r3, r0
    c072:	b.n	c05a <memmove+0xa6>
    c074:	pop	{r4, r5, r6, r7, pc}
    c076:	mov	r2, lr
    c078:	b.n	c058 <memmove+0xa4>
    c07a:	nop

0000c07c <memset>:
    c07c:	push	{r4, r5, r6}
    c07e:	lsls	r4, r0, #30
    c080:	beq.n	c110 <memset+0x94>
    c082:	subs	r4, r2, #1
    c084:	cmp	r2, #0
    c086:	beq.n	c10c <memset+0x90>
    c088:	uxtb	r5, r1
    c08a:	mov	r3, r0
    c08c:	b.n	c094 <memset+0x18>
    c08e:	subs	r2, r4, #1
    c090:	cbz	r4, c10c <memset+0x90>
    c092:	mov	r4, r2
    c094:	strb.w	r5, [r3], #1
    c098:	lsls	r2, r3, #30
    c09a:	bne.n	c08e <memset+0x12>
    c09c:	cmp	r4, #3
    c09e:	bls.n	c0fe <memset+0x82>
    c0a0:	uxtb	r5, r1
    c0a2:	orr.w	r5, r5, r5, lsl #8
    c0a6:	cmp	r4, #15
    c0a8:	orr.w	r5, r5, r5, lsl #16
    c0ac:	bls.n	c0e2 <memset+0x66>
    c0ae:	add.w	r2, r3, #16
    c0b2:	mov	r6, r4
    c0b4:	subs	r6, #16
    c0b6:	cmp	r6, #15
    c0b8:	str.w	r5, [r2, #-16]
    c0bc:	str.w	r5, [r2, #-12]
    c0c0:	str.w	r5, [r2, #-8]
    c0c4:	str.w	r5, [r2, #-4]
    c0c8:	add.w	r2, r2, #16
    c0cc:	bhi.n	c0b4 <memset+0x38>
    c0ce:	sub.w	r2, r4, #16
    c0d2:	bic.w	r2, r2, #15
    c0d6:	and.w	r4, r4, #15
    c0da:	adds	r2, #16
    c0dc:	cmp	r4, #3
    c0de:	add	r3, r2
    c0e0:	bls.n	c0fe <memset+0x82>
    c0e2:	mov	r6, r3
    c0e4:	mov	r2, r4
    c0e6:	subs	r2, #4
    c0e8:	cmp	r2, #3
    c0ea:	str.w	r5, [r6], #4
    c0ee:	bhi.n	c0e6 <memset+0x6a>
    c0f0:	subs	r2, r4, #4
    c0f2:	bic.w	r2, r2, #3
    c0f6:	adds	r2, #4
    c0f8:	add	r3, r2
    c0fa:	and.w	r4, r4, #3
    c0fe:	cbz	r4, c10c <memset+0x90>
    c100:	uxtb	r1, r1
    c102:	add	r4, r3
    c104:	strb.w	r1, [r3], #1
    c108:	cmp	r3, r4
    c10a:	bne.n	c104 <memset+0x88>
    c10c:	pop	{r4, r5, r6}
    c10e:	bx	lr
    c110:	mov	r4, r2
    c112:	mov	r3, r0
    c114:	b.n	c09c <memset+0x20>
    c116:	nop

0000c118 <__malloc_lock>:
    c118:	bx	lr
    c11a:	nop

0000c11c <__malloc_unlock>:
    c11c:	bx	lr
    c11e:	nop

0000c120 <_realloc_r>:
    c120:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c124:	mov	r7, r2
    c126:	sub	sp, #12
    c128:	cmp	r1, #0
    c12a:	beq.w	c2b0 <_realloc_r+0x190>
    c12e:	mov	r6, r1
    c130:	mov	r9, r0
    c132:	add.w	r5, r7, #11
    c136:	bl	c118 <__malloc_lock>
    c13a:	ldr.w	lr, [r6, #-4]
    c13e:	cmp	r5, #22
    c140:	bic.w	r4, lr, #3
    c144:	sub.w	r8, r6, #8
    c148:	bhi.n	c1cc <_realloc_r+0xac>
    c14a:	movs	r2, #16
    c14c:	mov	r5, r2
    c14e:	cmp	r7, r5
    c150:	bhi.n	c1d6 <_realloc_r+0xb6>
    c152:	cmp	r4, r2
    c154:	bge.n	c242 <_realloc_r+0x122>
    c156:	ldr	r3, [pc, #804]	; (c47c <_realloc_r+0x35c>)
    c158:	ldr	r1, [r3, #8]
    c15a:	add.w	r0, r8, r4
    c15e:	cmp	r0, r1
    c160:	ldr	r1, [r0, #4]
    c162:	beq.w	c318 <_realloc_r+0x1f8>
    c166:	bic.w	r3, r1, #1
    c16a:	add	r3, r0
    c16c:	ldr	r3, [r3, #4]
    c16e:	lsls	r3, r3, #31
    c170:	bpl.n	c26e <_realloc_r+0x14e>
    c172:	tst.w	lr, #1
    c176:	beq.n	c1e4 <_realloc_r+0xc4>
    c178:	mov	r1, r7
    c17a:	mov	r0, r9
    c17c:	bl	b908 <_malloc_r>
    c180:	mov	r7, r0
    c182:	cbz	r0, c1be <_realloc_r+0x9e>
    c184:	ldr.w	r3, [r6, #-4]
    c188:	bic.w	r3, r3, #1
    c18c:	add	r3, r8
    c18e:	sub.w	r2, r0, #8
    c192:	cmp	r2, r3
    c194:	beq.w	c420 <_realloc_r+0x300>
    c198:	subs	r2, r4, #4
    c19a:	cmp	r2, #36	; 0x24
    c19c:	bhi.w	c402 <_realloc_r+0x2e2>
    c1a0:	cmp	r2, #19
    c1a2:	bhi.w	c3ae <_realloc_r+0x28e>
    c1a6:	mov	r3, r0
    c1a8:	mov	r2, r6
    c1aa:	ldr	r1, [r2, #0]
    c1ac:	str	r1, [r3, #0]
    c1ae:	ldr	r1, [r2, #4]
    c1b0:	str	r1, [r3, #4]
    c1b2:	ldr	r2, [r2, #8]
    c1b4:	str	r2, [r3, #8]
    c1b6:	mov	r1, r6
    c1b8:	mov	r0, r9
    c1ba:	bl	c9f0 <_free_r>
    c1be:	mov	r0, r9
    c1c0:	bl	c11c <__malloc_unlock>
    c1c4:	mov	r0, r7
    c1c6:	add	sp, #12
    c1c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c1cc:	bic.w	r5, r5, #7
    c1d0:	cmp	r5, #0
    c1d2:	mov	r2, r5
    c1d4:	bge.n	c14e <_realloc_r+0x2e>
    c1d6:	movs	r3, #12
    c1d8:	movs	r0, #0
    c1da:	str.w	r3, [r9]
    c1de:	add	sp, #12
    c1e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c1e4:	ldr.w	r3, [r6, #-8]
    c1e8:	rsb	sl, r3, r8
    c1ec:	ldr.w	r3, [sl, #4]
    c1f0:	bic.w	ip, r3, #3
    c1f4:	add.w	r3, r4, ip
    c1f8:	cmp	r3, r2
    c1fa:	blt.n	c178 <_realloc_r+0x58>
    c1fc:	mov	r7, sl
    c1fe:	ldr.w	r1, [sl, #12]
    c202:	ldr.w	r0, [r7, #8]!
    c206:	subs	r2, r4, #4
    c208:	cmp	r2, #36	; 0x24
    c20a:	str	r1, [r0, #12]
    c20c:	str	r0, [r1, #8]
    c20e:	bhi.w	c440 <_realloc_r+0x320>
    c212:	cmp	r2, #19
    c214:	bls.w	c43c <_realloc_r+0x31c>
    c218:	ldr	r1, [r6, #0]
    c21a:	str.w	r1, [sl, #8]
    c21e:	ldr	r1, [r6, #4]
    c220:	str.w	r1, [sl, #12]
    c224:	cmp	r2, #27
    c226:	bhi.w	c480 <_realloc_r+0x360>
    c22a:	adds	r6, #8
    c22c:	add.w	r2, sl, #16
    c230:	ldr	r1, [r6, #0]
    c232:	str	r1, [r2, #0]
    c234:	ldr	r1, [r6, #4]
    c236:	str	r1, [r2, #4]
    c238:	ldr	r1, [r6, #8]
    c23a:	str	r1, [r2, #8]
    c23c:	mov	r6, r7
    c23e:	mov	r4, r3
    c240:	mov	r8, sl
    c242:	subs	r3, r4, r5
    c244:	cmp	r3, #15
    c246:	bhi.n	c284 <_realloc_r+0x164>
    c248:	ldr.w	r3, [r8, #4]
    c24c:	and.w	r3, r3, #1
    c250:	orrs	r3, r4
    c252:	add	r4, r8
    c254:	str.w	r3, [r8, #4]
    c258:	ldr	r3, [r4, #4]
    c25a:	orr.w	r3, r3, #1
    c25e:	str	r3, [r4, #4]
    c260:	mov	r0, r9
    c262:	bl	c11c <__malloc_unlock>
    c266:	mov	r0, r6
    c268:	add	sp, #12
    c26a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c26e:	bic.w	r1, r1, #3
    c272:	add	r1, r4
    c274:	cmp	r1, r2
    c276:	blt.n	c2bc <_realloc_r+0x19c>
    c278:	ldr	r3, [r0, #12]
    c27a:	ldr	r2, [r0, #8]
    c27c:	mov	r4, r1
    c27e:	str	r3, [r2, #12]
    c280:	str	r2, [r3, #8]
    c282:	b.n	c242 <_realloc_r+0x122>
    c284:	ldr.w	r2, [r8, #4]
    c288:	add.w	r1, r8, r5
    c28c:	and.w	r2, r2, #1
    c290:	orrs	r5, r2
    c292:	orr.w	r2, r3, #1
    c296:	add	r3, r1
    c298:	str.w	r5, [r8, #4]
    c29c:	str	r2, [r1, #4]
    c29e:	ldr	r2, [r3, #4]
    c2a0:	orr.w	r2, r2, #1
    c2a4:	adds	r1, #8
    c2a6:	str	r2, [r3, #4]
    c2a8:	mov	r0, r9
    c2aa:	bl	c9f0 <_free_r>
    c2ae:	b.n	c260 <_realloc_r+0x140>
    c2b0:	mov	r1, r2
    c2b2:	add	sp, #12
    c2b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c2b8:	b.w	b908 <_malloc_r>
    c2bc:	tst.w	lr, #1
    c2c0:	bne.w	c178 <_realloc_r+0x58>
    c2c4:	ldr.w	r3, [r6, #-8]
    c2c8:	rsb	sl, r3, r8
    c2cc:	ldr.w	r3, [sl, #4]
    c2d0:	bic.w	ip, r3, #3
    c2d4:	add.w	lr, r1, ip
    c2d8:	cmp	lr, r2
    c2da:	blt.n	c1f4 <_realloc_r+0xd4>
    c2dc:	ldr	r3, [r0, #12]
    c2de:	ldr	r2, [r0, #8]
    c2e0:	mov	r7, sl
    c2e2:	str	r3, [r2, #12]
    c2e4:	str	r2, [r3, #8]
    c2e6:	ldr.w	r1, [r7, #8]!
    c2ea:	ldr.w	r3, [sl, #12]
    c2ee:	str	r3, [r1, #12]
    c2f0:	subs	r2, r4, #4
    c2f2:	cmp	r2, #36	; 0x24
    c2f4:	str	r1, [r3, #8]
    c2f6:	bhi.w	c42c <_realloc_r+0x30c>
    c2fa:	cmp	r2, #19
    c2fc:	bls.n	c3c4 <_realloc_r+0x2a4>
    c2fe:	ldr	r3, [r6, #0]
    c300:	str.w	r3, [sl, #8]
    c304:	ldr	r3, [r6, #4]
    c306:	str.w	r3, [sl, #12]
    c30a:	cmp	r2, #27
    c30c:	bhi.w	c450 <_realloc_r+0x330>
    c310:	adds	r6, #8
    c312:	add.w	r3, sl, #16
    c316:	b.n	c3c6 <_realloc_r+0x2a6>
    c318:	bic.w	fp, r1, #3
    c31c:	add	fp, r4
    c31e:	add.w	r0, r5, #16
    c322:	cmp	fp, r0
    c324:	bge.n	c3da <_realloc_r+0x2ba>
    c326:	tst.w	lr, #1
    c32a:	bne.w	c178 <_realloc_r+0x58>
    c32e:	ldr.w	r1, [r6, #-8]
    c332:	rsb	sl, r1, r8
    c336:	ldr.w	r1, [sl, #4]
    c33a:	bic.w	ip, r1, #3
    c33e:	add	fp, ip
    c340:	cmp	r0, fp
    c342:	bgt.w	c1f4 <_realloc_r+0xd4>
    c346:	mov	r7, sl
    c348:	ldr.w	r1, [sl, #12]
    c34c:	ldr.w	r0, [r7, #8]!
    c350:	subs	r2, r4, #4
    c352:	cmp	r2, #36	; 0x24
    c354:	str	r1, [r0, #12]
    c356:	str	r0, [r1, #8]
    c358:	bhi.w	c4c4 <_realloc_r+0x3a4>
    c35c:	cmp	r2, #19
    c35e:	bls.w	c4ac <_realloc_r+0x38c>
    c362:	ldr	r1, [r6, #0]
    c364:	str.w	r1, [sl, #8]
    c368:	ldr	r1, [r6, #4]
    c36a:	str.w	r1, [sl, #12]
    c36e:	cmp	r2, #27
    c370:	bhi.w	c4d2 <_realloc_r+0x3b2>
    c374:	adds	r6, #8
    c376:	add.w	r2, sl, #16
    c37a:	ldr	r1, [r6, #0]
    c37c:	str	r1, [r2, #0]
    c37e:	ldr	r1, [r6, #4]
    c380:	str	r1, [r2, #4]
    c382:	ldr	r1, [r6, #8]
    c384:	str	r1, [r2, #8]
    c386:	add.w	r1, sl, r5
    c38a:	rsb	r2, r5, fp
    c38e:	orr.w	r2, r2, #1
    c392:	str	r1, [r3, #8]
    c394:	str	r2, [r1, #4]
    c396:	ldr.w	r3, [sl, #4]
    c39a:	and.w	r3, r3, #1
    c39e:	orrs	r5, r3
    c3a0:	mov	r0, r9
    c3a2:	str.w	r5, [sl, #4]
    c3a6:	bl	c11c <__malloc_unlock>
    c3aa:	mov	r0, r7
    c3ac:	b.n	c268 <_realloc_r+0x148>
    c3ae:	ldr	r3, [r6, #0]
    c3b0:	str	r3, [r0, #0]
    c3b2:	ldr	r3, [r6, #4]
    c3b4:	str	r3, [r0, #4]
    c3b6:	cmp	r2, #27
    c3b8:	bhi.n	c40a <_realloc_r+0x2ea>
    c3ba:	add.w	r3, r0, #8
    c3be:	add.w	r2, r6, #8
    c3c2:	b.n	c1aa <_realloc_r+0x8a>
    c3c4:	mov	r3, r7
    c3c6:	ldr	r2, [r6, #0]
    c3c8:	str	r2, [r3, #0]
    c3ca:	ldr	r2, [r6, #4]
    c3cc:	str	r2, [r3, #4]
    c3ce:	ldr	r2, [r6, #8]
    c3d0:	str	r2, [r3, #8]
    c3d2:	mov	r6, r7
    c3d4:	mov	r4, lr
    c3d6:	mov	r8, sl
    c3d8:	b.n	c242 <_realloc_r+0x122>
    c3da:	add.w	r1, r8, r5
    c3de:	rsb	fp, r5, fp
    c3e2:	orr.w	r2, fp, #1
    c3e6:	str	r1, [r3, #8]
    c3e8:	str	r2, [r1, #4]
    c3ea:	ldr.w	r3, [r6, #-4]
    c3ee:	and.w	r3, r3, #1
    c3f2:	orrs	r5, r3
    c3f4:	mov	r0, r9
    c3f6:	str.w	r5, [r6, #-4]
    c3fa:	bl	c11c <__malloc_unlock>
    c3fe:	mov	r0, r6
    c400:	b.n	c268 <_realloc_r+0x148>
    c402:	mov	r1, r6
    c404:	bl	bfb4 <memmove>
    c408:	b.n	c1b6 <_realloc_r+0x96>
    c40a:	ldr	r3, [r6, #8]
    c40c:	str	r3, [r0, #8]
    c40e:	ldr	r3, [r6, #12]
    c410:	str	r3, [r0, #12]
    c412:	cmp	r2, #36	; 0x24
    c414:	beq.n	c468 <_realloc_r+0x348>
    c416:	add.w	r3, r0, #16
    c41a:	add.w	r2, r6, #16
    c41e:	b.n	c1aa <_realloc_r+0x8a>
    c420:	ldr.w	r3, [r0, #-4]
    c424:	bic.w	r3, r3, #3
    c428:	add	r4, r3
    c42a:	b.n	c242 <_realloc_r+0x122>
    c42c:	mov	r1, r6
    c42e:	mov	r0, r7
    c430:	mov	r4, lr
    c432:	mov	r8, sl
    c434:	bl	bfb4 <memmove>
    c438:	mov	r6, r7
    c43a:	b.n	c242 <_realloc_r+0x122>
    c43c:	mov	r2, r7
    c43e:	b.n	c230 <_realloc_r+0x110>
    c440:	mov	r1, r6
    c442:	mov	r0, r7
    c444:	mov	r4, r3
    c446:	mov	r8, sl
    c448:	bl	bfb4 <memmove>
    c44c:	mov	r6, r7
    c44e:	b.n	c242 <_realloc_r+0x122>
    c450:	ldr	r3, [r6, #8]
    c452:	str.w	r3, [sl, #16]
    c456:	ldr	r3, [r6, #12]
    c458:	str.w	r3, [sl, #20]
    c45c:	cmp	r2, #36	; 0x24
    c45e:	beq.n	c498 <_realloc_r+0x378>
    c460:	adds	r6, #16
    c462:	add.w	r3, sl, #24
    c466:	b.n	c3c6 <_realloc_r+0x2a6>
    c468:	ldr	r3, [r6, #16]
    c46a:	str	r3, [r0, #16]
    c46c:	ldr	r3, [r6, #20]
    c46e:	str	r3, [r0, #20]
    c470:	add.w	r2, r6, #24
    c474:	add.w	r3, r0, #24
    c478:	b.n	c1aa <_realloc_r+0x8a>
    c47a:	nop
    c47c:	.word	0x1fff1028
    c480:	ldr	r1, [r6, #8]
    c482:	str.w	r1, [sl, #16]
    c486:	ldr	r1, [r6, #12]
    c488:	str.w	r1, [sl, #20]
    c48c:	cmp	r2, #36	; 0x24
    c48e:	beq.n	c4b0 <_realloc_r+0x390>
    c490:	adds	r6, #16
    c492:	add.w	r2, sl, #24
    c496:	b.n	c230 <_realloc_r+0x110>
    c498:	ldr	r3, [r6, #16]
    c49a:	str.w	r3, [sl, #24]
    c49e:	ldr	r3, [r6, #20]
    c4a0:	str.w	r3, [sl, #28]
    c4a4:	adds	r6, #24
    c4a6:	add.w	r3, sl, #32
    c4aa:	b.n	c3c6 <_realloc_r+0x2a6>
    c4ac:	mov	r2, r7
    c4ae:	b.n	c37a <_realloc_r+0x25a>
    c4b0:	ldr	r2, [r6, #16]
    c4b2:	str.w	r2, [sl, #24]
    c4b6:	ldr	r2, [r6, #20]
    c4b8:	str.w	r2, [sl, #28]
    c4bc:	adds	r6, #24
    c4be:	add.w	r2, sl, #32
    c4c2:	b.n	c230 <_realloc_r+0x110>
    c4c4:	mov	r1, r6
    c4c6:	mov	r0, r7
    c4c8:	str	r3, [sp, #4]
    c4ca:	bl	bfb4 <memmove>
    c4ce:	ldr	r3, [sp, #4]
    c4d0:	b.n	c386 <_realloc_r+0x266>
    c4d2:	ldr	r1, [r6, #8]
    c4d4:	str.w	r1, [sl, #16]
    c4d8:	ldr	r1, [r6, #12]
    c4da:	str.w	r1, [sl, #20]
    c4de:	cmp	r2, #36	; 0x24
    c4e0:	beq.n	c4ea <_realloc_r+0x3ca>
    c4e2:	adds	r6, #16
    c4e4:	add.w	r2, sl, #24
    c4e8:	b.n	c37a <_realloc_r+0x25a>
    c4ea:	ldr	r2, [r6, #16]
    c4ec:	str.w	r2, [sl, #24]
    c4f0:	ldr	r2, [r6, #20]
    c4f2:	str.w	r2, [sl, #28]
    c4f6:	adds	r6, #24
    c4f8:	add.w	r2, sl, #32
    c4fc:	b.n	c37a <_realloc_r+0x25a>
    c4fe:	nop

0000c500 <_sbrk_r>:
    c500:	push	{r3, r4, r5, lr}
    c502:	ldr	r4, [pc, #28]	; (c520 <_sbrk_r+0x20>)
    c504:	movs	r3, #0
    c506:	mov	r5, r0
    c508:	mov	r0, r1
    c50a:	str	r3, [r4, #0]
    c50c:	bl	96e8 <_sbrk>
    c510:	adds	r3, r0, #1
    c512:	beq.n	c516 <_sbrk_r+0x16>
    c514:	pop	{r3, r4, r5, pc}
    c516:	ldr	r3, [r4, #0]
    c518:	cmp	r3, #0
    c51a:	beq.n	c514 <_sbrk_r+0x14>
    c51c:	str	r3, [r5, #0]
    c51e:	pop	{r3, r4, r5, pc}
    c520:	.word	0x1fff1b7c

0000c524 <strcat>:
    c524:	lsls	r3, r0, #30
    c526:	push	{r4, lr}
    c528:	mov	r4, r0
    c52a:	bne.n	c54e <strcat+0x2a>
    c52c:	ldr	r2, [r0, #0]
    c52e:	sub.w	r3, r2, #16843009	; 0x1010101
    c532:	bic.w	r3, r3, r2
    c536:	tst.w	r3, #2155905152	; 0x80808080
    c53a:	bne.n	c54e <strcat+0x2a>
    c53c:	ldr.w	r2, [r0, #4]!
    c540:	sub.w	r3, r2, #16843009	; 0x1010101
    c544:	bic.w	r3, r3, r2
    c548:	tst.w	r3, #2155905152	; 0x80808080
    c54c:	beq.n	c53c <strcat+0x18>
    c54e:	ldrb	r3, [r0, #0]
    c550:	cbz	r3, c55a <strcat+0x36>
    c552:	ldrb.w	r3, [r0, #1]!
    c556:	cmp	r3, #0
    c558:	bne.n	c552 <strcat+0x2e>
    c55a:	bl	c564 <strcpy>
    c55e:	mov	r0, r4
    c560:	pop	{r4, pc}
    c562:	nop

0000c564 <strcpy>:
    c564:	eor.w	r2, r0, r1
    c568:	mov	ip, r0
    c56a:	tst.w	r2, #3
    c56e:	bne.n	c610 <strcpy+0xac>
    c570:	tst.w	r1, #3
    c574:	bne.n	c5dc <strcpy+0x78>
    c576:	str.w	r4, [sp, #-4]!
    c57a:	tst.w	r1, #4
    c57e:	ldr.w	r3, [r1], #4
    c582:	beq.n	c59c <strcpy+0x38>
    c584:	sub.w	r2, r3, #16843009	; 0x1010101
    c588:	bics	r2, r3
    c58a:	tst.w	r2, #2155905152	; 0x80808080
    c58e:	itt	eq
    c590:	streq.w	r3, [ip], #4
    c594:	ldreq.w	r3, [r1], #4
    c598:	bne.n	c5c8 <strcpy+0x64>
    c59a:	nop
    c59c:	ldr.w	r4, [r1], #4
    c5a0:	sub.w	r2, r3, #16843009	; 0x1010101
    c5a4:	bics	r2, r3
    c5a6:	tst.w	r2, #2155905152	; 0x80808080
    c5aa:	sub.w	r2, r4, #16843009	; 0x1010101
    c5ae:	bne.n	c5c8 <strcpy+0x64>
    c5b0:	str.w	r3, [ip], #4
    c5b4:	bics	r2, r4
    c5b6:	tst.w	r2, #2155905152	; 0x80808080
    c5ba:	itt	eq
    c5bc:	ldreq.w	r3, [r1], #4
    c5c0:	streq.w	r4, [ip], #4
    c5c4:	beq.n	c59c <strcpy+0x38>
    c5c6:	mov	r3, r4
    c5c8:	strb.w	r3, [ip], #1
    c5cc:	tst.w	r3, #255	; 0xff
    c5d0:	mov.w	r3, r3, ror #8
    c5d4:	bne.n	c5c8 <strcpy+0x64>
    c5d6:	ldr.w	r4, [sp], #4
    c5da:	bx	lr
    c5dc:	tst.w	r1, #1
    c5e0:	beq.n	c5f0 <strcpy+0x8c>
    c5e2:	ldrb.w	r2, [r1], #1
    c5e6:	strb.w	r2, [ip], #1
    c5ea:	cmp	r2, #0
    c5ec:	it	eq
    c5ee:	bxeq	lr
    c5f0:	tst.w	r1, #2
    c5f4:	beq.n	c576 <strcpy+0x12>
    c5f6:	ldrh.w	r2, [r1], #2
    c5fa:	tst.w	r2, #255	; 0xff
    c5fe:	itet	ne
    c600:	strhne.w	r2, [ip], #2
    c604:	strbeq.w	r2, [ip]
    c608:	tstne.w	r2, #65280	; 0xff00
    c60c:	bne.n	c576 <strcpy+0x12>
    c60e:	bx	lr
    c610:	ldrb.w	r2, [r1], #1
    c614:	strb.w	r2, [ip], #1
    c618:	cmp	r2, #0
    c61a:	bne.n	c610 <strcpy+0xac>
    c61c:	bx	lr
    c61e:	nop
    c620:			; <UNDEFINED> instruction: 0xffffffff
    c624:			; <UNDEFINED> instruction: 0xffffffff
    c628:			; <UNDEFINED> instruction: 0xffffffff
    c62c:			; <UNDEFINED> instruction: 0xffffffff
    c630:			; <UNDEFINED> instruction: 0xffffffff
    c634:			; <UNDEFINED> instruction: 0xffffffff
    c638:			; <UNDEFINED> instruction: 0xffffffff
    c63c:			; <UNDEFINED> instruction: 0xffffffff

0000c640 <strlen>:
    c640:	pld	[r0]
    c644:	strd	r4, r5, [sp, #-8]!
    c648:	bic.w	r1, r0, #7
    c64c:	mvn.w	ip, #0
    c650:	ands.w	r4, r0, #7
    c654:	pld	[r1, #32]
    c658:	bne.w	c6ee <strlen+0xae>
    c65c:	mov.w	r4, #0
    c660:	mvn.w	r0, #7
    c664:	ldrd	r2, r3, [r1]
    c668:	pld	[r1, #64]	; 0x40
    c66c:	add.w	r0, r0, #8
    c670:	uadd8	r2, r2, ip
    c674:	sel	r2, r4, ip
    c678:	uadd8	r3, r3, ip
    c67c:	sel	r3, r2, ip
    c680:	cbnz	r3, c6d6 <strlen+0x96>
    c682:	ldrd	r2, r3, [r1, #8]
    c686:	uadd8	r2, r2, ip
    c68a:	add.w	r0, r0, #8
    c68e:	sel	r2, r4, ip
    c692:	uadd8	r3, r3, ip
    c696:	sel	r3, r2, ip
    c69a:	cbnz	r3, c6d6 <strlen+0x96>
    c69c:	ldrd	r2, r3, [r1, #16]
    c6a0:	uadd8	r2, r2, ip
    c6a4:	add.w	r0, r0, #8
    c6a8:	sel	r2, r4, ip
    c6ac:	uadd8	r3, r3, ip
    c6b0:	sel	r3, r2, ip
    c6b4:	cbnz	r3, c6d6 <strlen+0x96>
    c6b6:	ldrd	r2, r3, [r1, #24]
    c6ba:	add.w	r1, r1, #32
    c6be:	uadd8	r2, r2, ip
    c6c2:	add.w	r0, r0, #8
    c6c6:	sel	r2, r4, ip
    c6ca:	uadd8	r3, r3, ip
    c6ce:	sel	r3, r2, ip
    c6d2:	cmp	r3, #0
    c6d4:	beq.n	c664 <strlen+0x24>
    c6d6:	cmp	r2, #0
    c6d8:	itt	eq
    c6da:	addeq	r0, #4
    c6dc:	moveq	r2, r3
    c6de:	rev	r2, r2
    c6e0:	clz	r2, r2
    c6e4:	ldrd	r4, r5, [sp], #8
    c6e8:	add.w	r0, r0, r2, lsr #3
    c6ec:	bx	lr
    c6ee:	ldrd	r2, r3, [r1]
    c6f2:	and.w	r5, r4, #3
    c6f6:	rsb	r0, r4, #0
    c6fa:	mov.w	r5, r5, lsl #3
    c6fe:	tst.w	r4, #4
    c702:	pld	[r1, #64]	; 0x40
    c706:	lsl.w	r5, ip, r5
    c70a:	orn	r2, r2, r5
    c70e:	itt	ne
    c710:	ornne	r3, r3, r5
    c714:	movne	r2, ip
    c716:	mov.w	r4, #0
    c71a:	b.n	c670 <strlen+0x30>

0000c71c <strncmp>:
    c71c:	cmp	r2, #0
    c71e:	beq.n	c7a4 <strncmp+0x88>
    c720:	orr.w	r3, r0, r1
    c724:	ands.w	r3, r3, #3
    c728:	push	{r4, r5, r6, r7}
    c72a:	bne.n	c778 <strncmp+0x5c>
    c72c:	cmp	r2, #3
    c72e:	bls.n	c778 <strncmp+0x5c>
    c730:	ldr	r4, [r0, #0]
    c732:	ldr	r5, [r1, #0]
    c734:	cmp	r4, r5
    c736:	bne.n	c778 <strncmp+0x5c>
    c738:	subs	r2, #4
    c73a:	beq.n	c7a8 <strncmp+0x8c>
    c73c:	sub.w	r5, r4, #16843009	; 0x1010101
    c740:	bic.w	r4, r5, r4
    c744:	tst.w	r4, #2155905152	; 0x80808080
    c748:	bne.n	c7ae <strncmp+0x92>
    c74a:	adds	r7, r0, #4
    c74c:	adds	r5, r1, #4
    c74e:	b.n	c76c <strncmp+0x50>
    c750:	ldr.w	r3, [r7], #4
    c754:	ldr	r6, [r1, #0]
    c756:	sub.w	r4, r3, #16843009	; 0x1010101
    c75a:	cmp	r3, r6
    c75c:	bic.w	r4, r4, r3
    c760:	bne.n	c778 <strncmp+0x5c>
    c762:	subs	r2, #4
    c764:	beq.n	c7a8 <strncmp+0x8c>
    c766:	tst.w	r4, #2155905152	; 0x80808080
    c76a:	bne.n	c7b4 <strncmp+0x98>
    c76c:	cmp	r2, #3
    c76e:	mov	r1, r5
    c770:	mov	r0, r7
    c772:	add.w	r5, r5, #4
    c776:	bhi.n	c750 <strncmp+0x34>
    c778:	ldrb	r3, [r0, #0]
    c77a:	ldrb	r4, [r1, #0]
    c77c:	cmp	r4, r3
    c77e:	add.w	r2, r2, #4294967295
    c782:	bne.n	c79e <strncmp+0x82>
    c784:	cbz	r2, c7a8 <strncmp+0x8c>
    c786:	cbnz	r4, c78e <strncmp+0x72>
    c788:	b.n	c7b8 <strncmp+0x9c>
    c78a:	cbz	r2, c7a8 <strncmp+0x8c>
    c78c:	cbz	r3, c7ae <strncmp+0x92>
    c78e:	ldrb.w	r3, [r0, #1]!
    c792:	ldrb.w	r4, [r1, #1]!
    c796:	cmp	r3, r4
    c798:	add.w	r2, r2, #4294967295
    c79c:	beq.n	c78a <strncmp+0x6e>
    c79e:	subs	r0, r3, r4
    c7a0:	pop	{r4, r5, r6, r7}
    c7a2:	bx	lr
    c7a4:	mov	r0, r2
    c7a6:	bx	lr
    c7a8:	mov	r0, r2
    c7aa:	pop	{r4, r5, r6, r7}
    c7ac:	bx	lr
    c7ae:	mov	r0, r3
    c7b0:	pop	{r4, r5, r6, r7}
    c7b2:	bx	lr
    c7b4:	movs	r0, #0
    c7b6:	b.n	c7a0 <strncmp+0x84>
    c7b8:	mov	r0, r4
    c7ba:	b.n	c7a0 <strncmp+0x84>

0000c7bc <_vdprintf_r>:
    c7bc:	push	{r4, r5, r6, r7, lr}
    c7be:	sub.w	sp, sp, #532	; 0x214
    c7c2:	add	r5, sp, #16
    c7c4:	str	r3, [sp, #0]
    c7c6:	mov	r7, r1
    c7c8:	mov	r3, r2
    c7ca:	mov.w	r4, #512	; 0x200
    c7ce:	add	r2, sp, #12
    c7d0:	mov	r1, r5
    c7d2:	str	r4, [sp, #12]
    c7d4:	mov	r6, r0
    c7d6:	bl	d200 <_vasnprintf_r>
    c7da:	cbz	r0, c800 <_vdprintf_r+0x44>
    c7dc:	mov	r4, r0
    c7de:	mov	r2, r0
    c7e0:	mov	r1, r7
    c7e2:	ldr	r3, [sp, #12]
    c7e4:	mov	r0, r6
    c7e6:	bl	c83c <_write_r>
    c7ea:	cmp	r4, r5
    c7ec:	str	r0, [sp, #12]
    c7ee:	beq.n	c7fa <_vdprintf_r+0x3e>
    c7f0:	mov	r0, r6
    c7f2:	mov	r1, r4
    c7f4:	bl	c9f0 <_free_r>
    c7f8:	ldr	r0, [sp, #12]
    c7fa:	add.w	sp, sp, #532	; 0x214
    c7fe:	pop	{r4, r5, r6, r7, pc}
    c800:	mov.w	r0, #4294967295
    c804:	b.n	c7fa <_vdprintf_r+0x3e>
    c806:	nop

0000c808 <vdprintf>:
    c808:	push	{r4}
    c80a:	ldr	r4, [pc, #16]	; (c81c <vdprintf+0x14>)
    c80c:	mov	r3, r2
    c80e:	mov	r2, r1
    c810:	mov	r1, r0
    c812:	ldr	r0, [r4, #0]
    c814:	ldr.w	r4, [sp], #4
    c818:	b.w	c7bc <_vdprintf_r>
    c81c:	.word	0x1fff0eb8

0000c820 <__ascii_wctomb>:
    c820:	cbz	r1, c82c <__ascii_wctomb+0xc>
    c822:	cmp	r2, #255	; 0xff
    c824:	bhi.n	c830 <__ascii_wctomb+0x10>
    c826:	strb	r2, [r1, #0]
    c828:	movs	r0, #1
    c82a:	bx	lr
    c82c:	mov	r0, r1
    c82e:	bx	lr
    c830:	movs	r3, #138	; 0x8a
    c832:	str	r3, [r0, #0]
    c834:	mov.w	r0, #4294967295
    c838:	bx	lr
    c83a:	nop

0000c83c <_write_r>:
    c83c:	push	{r4, r5, r6, lr}
    c83e:	mov	r5, r1
    c840:	ldr	r4, [pc, #32]	; (c864 <_write_r+0x28>)
    c842:	mov	r1, r2
    c844:	mov	r6, r0
    c846:	mov	r2, r3
    c848:	mov	r0, r5
    c84a:	movs	r3, #0
    c84c:	str	r3, [r4, #0]
    c84e:	bl	a9bc <_write>
    c852:	adds	r3, r0, #1
    c854:	beq.n	c858 <_write_r+0x1c>
    c856:	pop	{r4, r5, r6, pc}
    c858:	ldr	r3, [r4, #0]
    c85a:	cmp	r3, #0
    c85c:	beq.n	c856 <_write_r+0x1a>
    c85e:	str	r3, [r6, #0]
    c860:	pop	{r4, r5, r6, pc}
    c862:	nop
    c864:	.word	0x1fff1b7c

0000c868 <__register_exitproc>:
    c868:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c86c:	ldr	r4, [pc, #148]	; (c904 <__register_exitproc+0x9c>)
    c86e:	ldr	r5, [r4, #0]
    c870:	ldr.w	r4, [r5, #328]	; 0x148
    c874:	mov	r6, r0
    c876:	mov	r8, r1
    c878:	mov	sl, r2
    c87a:	mov	r9, r3
    c87c:	cbz	r4, c8f0 <__register_exitproc+0x88>
    c87e:	ldr	r0, [r4, #4]
    c880:	cmp	r0, #31
    c882:	bgt.n	c8b4 <__register_exitproc+0x4c>
    c884:	adds	r3, r0, #1
    c886:	cbz	r6, c8a6 <__register_exitproc+0x3e>
    c888:	add.w	r5, r4, r0, lsl #2
    c88c:	movs	r2, #1
    c88e:	str.w	sl, [r5, #136]	; 0x88
    c892:	ldr.w	r1, [r4, #392]	; 0x188
    c896:	lsls	r2, r0
    c898:	orrs	r1, r2
    c89a:	cmp	r6, #2
    c89c:	str.w	r1, [r4, #392]	; 0x188
    c8a0:	str.w	r9, [r5, #264]	; 0x108
    c8a4:	beq.n	c8e4 <__register_exitproc+0x7c>
    c8a6:	adds	r0, #2
    c8a8:	str	r3, [r4, #4]
    c8aa:	str.w	r8, [r4, r0, lsl #2]
    c8ae:	movs	r0, #0
    c8b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c8b4:	ldr	r3, [pc, #80]	; (c908 <__register_exitproc+0xa0>)
    c8b6:	cbz	r3, c8fa <__register_exitproc+0x92>
    c8b8:	mov.w	r0, #400	; 0x190
    c8bc:	bl	b8e8 <malloc>
    c8c0:	mov	r4, r0
    c8c2:	cbz	r0, c8fa <__register_exitproc+0x92>
    c8c4:	ldr.w	r3, [r5, #328]	; 0x148
    c8c8:	movs	r7, #0
    c8ca:	stmia.w	r0, {r3, r7}
    c8ce:	str.w	r4, [r5, #328]	; 0x148
    c8d2:	mov	r0, r7
    c8d4:	movs	r3, #1
    c8d6:	str.w	r7, [r4, #392]	; 0x188
    c8da:	str.w	r7, [r4, #396]	; 0x18c
    c8de:	cmp	r6, #0
    c8e0:	beq.n	c8a6 <__register_exitproc+0x3e>
    c8e2:	b.n	c888 <__register_exitproc+0x20>
    c8e4:	ldr.w	r1, [r4, #396]	; 0x18c
    c8e8:	orrs	r2, r1
    c8ea:	str.w	r2, [r4, #396]	; 0x18c
    c8ee:	b.n	c8a6 <__register_exitproc+0x3e>
    c8f0:	add.w	r4, r5, #332	; 0x14c
    c8f4:	str.w	r4, [r5, #328]	; 0x148
    c8f8:	b.n	c87e <__register_exitproc+0x16>
    c8fa:	mov.w	r0, #4294967295
    c8fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c902:	nop
    c904:	.word	0x000100b8
    c908:	.word	0x0000b8e9

0000c90c <register_fini>:
    c90c:	ldr	r3, [pc, #8]	; (c918 <register_fini+0xc>)
    c90e:	cbz	r3, c916 <register_fini+0xa>
    c910:	ldr	r0, [pc, #8]	; (c91c <register_fini+0x10>)
    c912:	b.w	c920 <atexit>
    c916:	bx	lr
    c918:	.word	0x00000000
    c91c:	.word	0x0000c92d

0000c920 <atexit>:
    c920:	movs	r3, #0
    c922:	mov	r1, r0
    c924:	mov	r2, r3
    c926:	mov	r0, r3
    c928:	b.w	c868 <__register_exitproc>

0000c92c <__libc_fini_array>:
    c92c:	push	{r3, r4, r5, lr}
    c92e:	ldr	r5, [pc, #28]	; (c94c <__libc_fini_array+0x20>)
    c930:	ldr	r4, [pc, #28]	; (c950 <__libc_fini_array+0x24>)
    c932:	subs	r4, r5, r4
    c934:	asrs	r4, r4, #2
    c936:	beq.n	c944 <__libc_fini_array+0x18>
    c938:	subs	r4, #1
    c93a:	ldr.w	r3, [r5, #-4]!
    c93e:	blx	r3
    c940:	cmp	r4, #0
    c942:	bne.n	c938 <__libc_fini_array+0xc>
    c944:	ldmia.w	sp!, {r3, r4, r5, lr}
    c948:	b.w	1035c <__init_array_end>
	...

0000c954 <_malloc_trim_r>:
    c954:	push	{r3, r4, r5, r6, r7, lr}
    c956:	ldr	r7, [pc, #140]	; (c9e4 <_malloc_trim_r+0x90>)
    c958:	mov	r4, r1
    c95a:	mov	r6, r0
    c95c:	bl	c118 <__malloc_lock>
    c960:	ldr	r3, [r7, #8]
    c962:	ldr	r5, [r3, #4]
    c964:	bic.w	r5, r5, #3
    c968:	subs	r1, r5, r4
    c96a:	addw	r1, r1, #4079	; 0xfef
    c96e:	bic.w	r1, r1, #4080	; 0xff0
    c972:	bic.w	r1, r1, #15
    c976:	sub.w	r4, r1, #4096	; 0x1000
    c97a:	cmp.w	r4, #4096	; 0x1000
    c97e:	blt.n	c990 <_malloc_trim_r+0x3c>
    c980:	movs	r1, #0
    c982:	mov	r0, r6
    c984:	bl	c500 <_sbrk_r>
    c988:	ldr	r3, [r7, #8]
    c98a:	add	r3, r5
    c98c:	cmp	r0, r3
    c98e:	beq.n	c99a <_malloc_trim_r+0x46>
    c990:	mov	r0, r6
    c992:	bl	c11c <__malloc_unlock>
    c996:	movs	r0, #0
    c998:	pop	{r3, r4, r5, r6, r7, pc}
    c99a:	negs	r1, r4
    c99c:	mov	r0, r6
    c99e:	bl	c500 <_sbrk_r>
    c9a2:	adds	r0, #1
    c9a4:	beq.n	c9c2 <_malloc_trim_r+0x6e>
    c9a6:	ldr	r3, [pc, #64]	; (c9e8 <_malloc_trim_r+0x94>)
    c9a8:	ldr	r2, [r7, #8]
    c9aa:	ldr	r1, [r3, #0]
    c9ac:	subs	r5, r5, r4
    c9ae:	orr.w	r5, r5, #1
    c9b2:	mov	r0, r6
    c9b4:	subs	r1, r1, r4
    c9b6:	str	r5, [r2, #4]
    c9b8:	str	r1, [r3, #0]
    c9ba:	bl	c11c <__malloc_unlock>
    c9be:	movs	r0, #1
    c9c0:	pop	{r3, r4, r5, r6, r7, pc}
    c9c2:	movs	r1, #0
    c9c4:	mov	r0, r6
    c9c6:	bl	c500 <_sbrk_r>
    c9ca:	ldr	r2, [r7, #8]
    c9cc:	subs	r3, r0, r2
    c9ce:	cmp	r3, #15
    c9d0:	ble.n	c990 <_malloc_trim_r+0x3c>
    c9d2:	ldr	r4, [pc, #24]	; (c9ec <_malloc_trim_r+0x98>)
    c9d4:	ldr	r1, [pc, #16]	; (c9e8 <_malloc_trim_r+0x94>)
    c9d6:	ldr	r4, [r4, #0]
    c9d8:	orr.w	r3, r3, #1
    c9dc:	subs	r0, r0, r4
    c9de:	str	r3, [r2, #4]
    c9e0:	str	r0, [r1, #0]
    c9e2:	b.n	c990 <_malloc_trim_r+0x3c>
    c9e4:	.word	0x1fff1028
    c9e8:	.word	0x1fff1b3c
    c9ec:	.word	0x1fff1434

0000c9f0 <_free_r>:
    c9f0:	cmp	r1, #0
    c9f2:	beq.n	ca80 <_free_r+0x90>
    c9f4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c9f8:	mov	r5, r1
    c9fa:	mov	r8, r0
    c9fc:	bl	c118 <__malloc_lock>
    ca00:	ldr.w	r7, [r5, #-4]
    ca04:	ldr	r1, [pc, #424]	; (cbb0 <_free_r+0x1c0>)
    ca06:	bic.w	r3, r7, #1
    ca0a:	sub.w	r4, r5, #8
    ca0e:	adds	r2, r4, r3
    ca10:	ldr	r6, [r1, #8]
    ca12:	ldr	r0, [r2, #4]
    ca14:	cmp	r2, r6
    ca16:	bic.w	r0, r0, #3
    ca1a:	beq.n	cae2 <_free_r+0xf2>
    ca1c:	lsls	r6, r7, #31
    ca1e:	str	r0, [r2, #4]
    ca20:	bmi.n	ca3a <_free_r+0x4a>
    ca22:	ldr.w	r7, [r5, #-8]
    ca26:	subs	r4, r4, r7
    ca28:	add.w	lr, r1, #8
    ca2c:	ldr	r5, [r4, #8]
    ca2e:	cmp	r5, lr
    ca30:	add	r3, r7
    ca32:	beq.n	cb14 <_free_r+0x124>
    ca34:	ldr	r7, [r4, #12]
    ca36:	str	r7, [r5, #12]
    ca38:	str	r5, [r7, #8]
    ca3a:	adds	r5, r2, r0
    ca3c:	ldr	r5, [r5, #4]
    ca3e:	lsls	r5, r5, #31
    ca40:	bpl.n	cac8 <_free_r+0xd8>
    ca42:	orr.w	r2, r3, #1
    ca46:	str	r2, [r4, #4]
    ca48:	str	r3, [r4, r3]
    ca4a:	cmp.w	r3, #512	; 0x200
    ca4e:	bcs.n	ca82 <_free_r+0x92>
    ca50:	lsrs	r3, r3, #3
    ca52:	adds	r2, r3, #1
    ca54:	ldr	r5, [r1, #4]
    ca56:	ldr.w	r7, [r1, r2, lsl #3]
    ca5a:	str	r7, [r4, #8]
    ca5c:	movs	r0, #1
    ca5e:	asrs	r3, r3, #2
    ca60:	lsl.w	r3, r0, r3
    ca64:	add.w	r0, r1, r2, lsl #3
    ca68:	orrs	r5, r3
    ca6a:	subs	r0, #8
    ca6c:	str	r0, [r4, #12]
    ca6e:	str	r5, [r1, #4]
    ca70:	str.w	r4, [r1, r2, lsl #3]
    ca74:	str	r4, [r7, #12]
    ca76:	mov	r0, r8
    ca78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ca7c:	b.w	c11c <__malloc_unlock>
    ca80:	bx	lr
    ca82:	lsrs	r2, r3, #9
    ca84:	cmp	r2, #4
    ca86:	bhi.n	cb30 <_free_r+0x140>
    ca88:	lsrs	r2, r3, #6
    ca8a:	add.w	r7, r2, #57	; 0x39
    ca8e:	lsls	r7, r7, #1
    ca90:	add.w	r5, r2, #56	; 0x38
    ca94:	add.w	r0, r1, r7, lsl #2
    ca98:	ldr.w	r2, [r1, r7, lsl #2]
    ca9c:	ldr	r1, [pc, #272]	; (cbb0 <_free_r+0x1c0>)
    ca9e:	subs	r0, #8
    caa0:	cmp	r0, r2
    caa2:	beq.n	cb40 <_free_r+0x150>
    caa4:	ldr	r1, [r2, #4]
    caa6:	bic.w	r1, r1, #3
    caaa:	cmp	r3, r1
    caac:	bcs.n	cab4 <_free_r+0xc4>
    caae:	ldr	r2, [r2, #8]
    cab0:	cmp	r0, r2
    cab2:	bne.n	caa4 <_free_r+0xb4>
    cab4:	ldr	r0, [r2, #12]
    cab6:	str	r0, [r4, #12]
    cab8:	str	r2, [r4, #8]
    caba:	str	r4, [r0, #8]
    cabc:	str	r4, [r2, #12]
    cabe:	mov	r0, r8
    cac0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cac4:	b.w	c11c <__malloc_unlock>
    cac8:	ldr	r5, [r2, #8]
    caca:	ldr	r7, [pc, #232]	; (cbb4 <_free_r+0x1c4>)
    cacc:	cmp	r5, r7
    cace:	add	r3, r0
    cad0:	beq.n	cb52 <_free_r+0x162>
    cad2:	ldr	r0, [r2, #12]
    cad4:	str	r0, [r5, #12]
    cad6:	orr.w	r2, r3, #1
    cada:	str	r5, [r0, #8]
    cadc:	str	r2, [r4, #4]
    cade:	str	r3, [r4, r3]
    cae0:	b.n	ca4a <_free_r+0x5a>
    cae2:	lsls	r7, r7, #31
    cae4:	add	r3, r0
    cae6:	bmi.n	caf8 <_free_r+0x108>
    cae8:	ldr.w	r2, [r5, #-8]
    caec:	subs	r4, r4, r2
    caee:	add	r3, r2
    caf0:	ldr	r0, [r4, #8]
    caf2:	ldr	r2, [r4, #12]
    caf4:	str	r2, [r0, #12]
    caf6:	str	r0, [r2, #8]
    caf8:	ldr	r2, [pc, #188]	; (cbb8 <_free_r+0x1c8>)
    cafa:	ldr	r2, [r2, #0]
    cafc:	orr.w	r0, r3, #1
    cb00:	cmp	r3, r2
    cb02:	str	r0, [r4, #4]
    cb04:	str	r4, [r1, #8]
    cb06:	bcc.n	ca76 <_free_r+0x86>
    cb08:	ldr	r3, [pc, #176]	; (cbbc <_free_r+0x1cc>)
    cb0a:	mov	r0, r8
    cb0c:	ldr	r1, [r3, #0]
    cb0e:	bl	c954 <_malloc_trim_r>
    cb12:	b.n	ca76 <_free_r+0x86>
    cb14:	adds	r1, r2, r0
    cb16:	ldr	r1, [r1, #4]
    cb18:	lsls	r1, r1, #31
    cb1a:	bmi.n	cba6 <_free_r+0x1b6>
    cb1c:	ldr	r1, [r2, #8]
    cb1e:	ldr	r2, [r2, #12]
    cb20:	str	r2, [r1, #12]
    cb22:	add	r3, r0
    cb24:	orr.w	r0, r3, #1
    cb28:	str	r1, [r2, #8]
    cb2a:	str	r0, [r4, #4]
    cb2c:	str	r3, [r4, r3]
    cb2e:	b.n	ca76 <_free_r+0x86>
    cb30:	cmp	r2, #20
    cb32:	bhi.n	cb64 <_free_r+0x174>
    cb34:	add.w	r7, r2, #92	; 0x5c
    cb38:	lsls	r7, r7, #1
    cb3a:	add.w	r5, r2, #91	; 0x5b
    cb3e:	b.n	ca94 <_free_r+0xa4>
    cb40:	asrs	r2, r5, #2
    cb42:	ldr	r3, [r1, #4]
    cb44:	movs	r5, #1
    cb46:	lsl.w	r2, r5, r2
    cb4a:	orrs	r3, r2
    cb4c:	str	r3, [r1, #4]
    cb4e:	mov	r2, r0
    cb50:	b.n	cab6 <_free_r+0xc6>
    cb52:	orr.w	r2, r3, #1
    cb56:	str	r4, [r1, #20]
    cb58:	str	r4, [r1, #16]
    cb5a:	str	r5, [r4, #12]
    cb5c:	str	r5, [r4, #8]
    cb5e:	str	r2, [r4, #4]
    cb60:	str	r3, [r4, r3]
    cb62:	b.n	ca76 <_free_r+0x86>
    cb64:	cmp	r2, #84	; 0x54
    cb66:	bhi.n	cb76 <_free_r+0x186>
    cb68:	lsrs	r2, r3, #12
    cb6a:	add.w	r7, r2, #111	; 0x6f
    cb6e:	lsls	r7, r7, #1
    cb70:	add.w	r5, r2, #110	; 0x6e
    cb74:	b.n	ca94 <_free_r+0xa4>
    cb76:	cmp.w	r2, #340	; 0x154
    cb7a:	bhi.n	cb8a <_free_r+0x19a>
    cb7c:	lsrs	r2, r3, #15
    cb7e:	add.w	r7, r2, #120	; 0x78
    cb82:	lsls	r7, r7, #1
    cb84:	add.w	r5, r2, #119	; 0x77
    cb88:	b.n	ca94 <_free_r+0xa4>
    cb8a:	movw	r0, #1364	; 0x554
    cb8e:	cmp	r2, r0
    cb90:	bhi.n	cba0 <_free_r+0x1b0>
    cb92:	lsrs	r2, r3, #18
    cb94:	add.w	r7, r2, #125	; 0x7d
    cb98:	lsls	r7, r7, #1
    cb9a:	add.w	r5, r2, #124	; 0x7c
    cb9e:	b.n	ca94 <_free_r+0xa4>
    cba0:	movs	r7, #254	; 0xfe
    cba2:	movs	r5, #126	; 0x7e
    cba4:	b.n	ca94 <_free_r+0xa4>
    cba6:	orr.w	r2, r3, #1
    cbaa:	str	r2, [r4, #4]
    cbac:	str	r3, [r4, r3]
    cbae:	b.n	ca76 <_free_r+0x86>
    cbb0:	.word	0x1fff1028
    cbb4:	.word	0x1fff1030
    cbb8:	.word	0x1fff1430
    cbbc:	.word	0x1fff1b38

0000cbc0 <_localeconv_r>:
    cbc0:	ldr	r2, [pc, #16]	; (cbd4 <_localeconv_r+0x14>)
    cbc2:	ldr	r3, [pc, #20]	; (cbd8 <_localeconv_r+0x18>)
    cbc4:	ldr	r2, [r2, #0]
    cbc6:	ldr	r0, [r2, #52]	; 0x34
    cbc8:	cmp	r0, #0
    cbca:	it	eq
    cbcc:	moveq	r0, r3
    cbce:	adds	r0, #240	; 0xf0
    cbd0:	bx	lr
    cbd2:	nop
    cbd4:	.word	0x1fff0eb8
    cbd8:	.word	0x1fff0ebc

0000cbdc <_Balloc>:
    cbdc:	ldr	r3, [r0, #76]	; 0x4c
    cbde:	push	{r4, r5, r6, lr}
    cbe0:	mov	r5, r0
    cbe2:	mov	r4, r1
    cbe4:	cbz	r3, cbfa <_Balloc+0x1e>
    cbe6:	ldr.w	r0, [r3, r4, lsl #2]
    cbea:	cbz	r0, cc0e <_Balloc+0x32>
    cbec:	ldr	r2, [r0, #0]
    cbee:	str.w	r2, [r3, r4, lsl #2]
    cbf2:	movs	r3, #0
    cbf4:	str	r3, [r0, #16]
    cbf6:	str	r3, [r0, #12]
    cbf8:	pop	{r4, r5, r6, pc}
    cbfa:	movs	r2, #33	; 0x21
    cbfc:	movs	r1, #4
    cbfe:	bl	d260 <_calloc_r>
    cc02:	str	r0, [r5, #76]	; 0x4c
    cc04:	mov	r3, r0
    cc06:	cmp	r0, #0
    cc08:	bne.n	cbe6 <_Balloc+0xa>
    cc0a:	movs	r0, #0
    cc0c:	pop	{r4, r5, r6, pc}
    cc0e:	movs	r1, #1
    cc10:	lsl.w	r6, r1, r4
    cc14:	adds	r2, r6, #5
    cc16:	mov	r0, r5
    cc18:	lsls	r2, r2, #2
    cc1a:	bl	d260 <_calloc_r>
    cc1e:	cmp	r0, #0
    cc20:	beq.n	cc0a <_Balloc+0x2e>
    cc22:	str	r4, [r0, #4]
    cc24:	str	r6, [r0, #8]
    cc26:	b.n	cbf2 <_Balloc+0x16>

0000cc28 <_Bfree>:
    cc28:	cbz	r1, cc38 <_Bfree+0x10>
    cc2a:	ldr	r3, [r0, #76]	; 0x4c
    cc2c:	ldr	r2, [r1, #4]
    cc2e:	ldr.w	r0, [r3, r2, lsl #2]
    cc32:	str	r0, [r1, #0]
    cc34:	str.w	r1, [r3, r2, lsl #2]
    cc38:	bx	lr
    cc3a:	nop

0000cc3c <__multadd>:
    cc3c:	push	{r4, r5, r6, r7, lr}
    cc3e:	ldr	r4, [r1, #16]
    cc40:	sub	sp, #12
    cc42:	mov	r5, r1
    cc44:	mov	r6, r0
    cc46:	add.w	lr, r1, #20
    cc4a:	movs	r7, #0
    cc4c:	ldr.w	r0, [lr]
    cc50:	uxth	r1, r0
    cc52:	mla	r1, r2, r1, r3
    cc56:	lsrs	r3, r1, #16
    cc58:	lsrs	r0, r0, #16
    cc5a:	mla	r3, r2, r0, r3
    cc5e:	uxth	r1, r1
    cc60:	adds	r7, #1
    cc62:	add.w	r1, r1, r3, lsl #16
    cc66:	cmp	r4, r7
    cc68:	str.w	r1, [lr], #4
    cc6c:	mov.w	r3, r3, lsr #16
    cc70:	bgt.n	cc4c <__multadd+0x10>
    cc72:	cbz	r3, cc84 <__multadd+0x48>
    cc74:	ldr	r2, [r5, #8]
    cc76:	cmp	r4, r2
    cc78:	bge.n	cc8a <__multadd+0x4e>
    cc7a:	add.w	r2, r5, r4, lsl #2
    cc7e:	adds	r4, #1
    cc80:	str	r3, [r2, #20]
    cc82:	str	r4, [r5, #16]
    cc84:	mov	r0, r5
    cc86:	add	sp, #12
    cc88:	pop	{r4, r5, r6, r7, pc}
    cc8a:	ldr	r1, [r5, #4]
    cc8c:	str	r3, [sp, #4]
    cc8e:	adds	r1, #1
    cc90:	mov	r0, r6
    cc92:	bl	cbdc <_Balloc>
    cc96:	ldr	r2, [r5, #16]
    cc98:	adds	r2, #2
    cc9a:	add.w	r1, r5, #12
    cc9e:	mov	r7, r0
    cca0:	lsls	r2, r2, #2
    cca2:	adds	r0, #12
    cca4:	bl	9280 <memcpy>
    cca8:	ldr	r2, [r6, #76]	; 0x4c
    ccaa:	ldr	r1, [r5, #4]
    ccac:	ldr	r3, [sp, #4]
    ccae:	ldr.w	r0, [r2, r1, lsl #2]
    ccb2:	str	r0, [r5, #0]
    ccb4:	str.w	r5, [r2, r1, lsl #2]
    ccb8:	mov	r5, r7
    ccba:	b.n	cc7a <__multadd+0x3e>

0000ccbc <__hi0bits>:
    ccbc:	lsrs	r3, r0, #16
    ccbe:	lsls	r3, r3, #16
    ccc0:	cbnz	r3, ccf0 <__hi0bits+0x34>
    ccc2:	lsls	r0, r0, #16
    ccc4:	movs	r3, #16
    ccc6:	tst.w	r0, #4278190080	; 0xff000000
    ccca:	itt	eq
    cccc:	lsleq	r0, r0, #8
    ccce:	addeq	r3, #8
    ccd0:	tst.w	r0, #4026531840	; 0xf0000000
    ccd4:	itt	eq
    ccd6:	lsleq	r0, r0, #4
    ccd8:	addeq	r3, #4
    ccda:	tst.w	r0, #3221225472	; 0xc0000000
    ccde:	itt	eq
    cce0:	lsleq	r0, r0, #2
    cce2:	addeq	r3, #2
    cce4:	cmp	r0, #0
    cce6:	blt.n	ccf8 <__hi0bits+0x3c>
    cce8:	lsls	r2, r0, #1
    ccea:	bmi.n	ccf4 <__hi0bits+0x38>
    ccec:	movs	r0, #32
    ccee:	bx	lr
    ccf0:	movs	r3, #0
    ccf2:	b.n	ccc6 <__hi0bits+0xa>
    ccf4:	adds	r0, r3, #1
    ccf6:	bx	lr
    ccf8:	mov	r0, r3
    ccfa:	bx	lr

0000ccfc <__lo0bits>:
    ccfc:	ldr	r3, [r0, #0]
    ccfe:	ands.w	r2, r3, #7
    cd02:	beq.n	cd14 <__lo0bits+0x18>
    cd04:	lsls	r1, r3, #31
    cd06:	bmi.n	cd4a <__lo0bits+0x4e>
    cd08:	lsls	r2, r3, #30
    cd0a:	bmi.n	cd4e <__lo0bits+0x52>
    cd0c:	lsrs	r3, r3, #2
    cd0e:	str	r3, [r0, #0]
    cd10:	movs	r0, #2
    cd12:	bx	lr
    cd14:	uxth	r1, r3
    cd16:	cbnz	r1, cd1c <__lo0bits+0x20>
    cd18:	lsrs	r3, r3, #16
    cd1a:	movs	r2, #16
    cd1c:	tst.w	r3, #255	; 0xff
    cd20:	itt	eq
    cd22:	lsreq	r3, r3, #8
    cd24:	addeq	r2, #8
    cd26:	lsls	r1, r3, #28
    cd28:	itt	eq
    cd2a:	lsreq	r3, r3, #4
    cd2c:	addeq	r2, #4
    cd2e:	lsls	r1, r3, #30
    cd30:	itt	eq
    cd32:	lsreq	r3, r3, #2
    cd34:	addeq	r2, #2
    cd36:	lsls	r1, r3, #31
    cd38:	bmi.n	cd44 <__lo0bits+0x48>
    cd3a:	lsrs	r3, r3, #1
    cd3c:	bne.n	cd42 <__lo0bits+0x46>
    cd3e:	movs	r0, #32
    cd40:	bx	lr
    cd42:	adds	r2, #1
    cd44:	str	r3, [r0, #0]
    cd46:	mov	r0, r2
    cd48:	bx	lr
    cd4a:	movs	r0, #0
    cd4c:	bx	lr
    cd4e:	lsrs	r3, r3, #1
    cd50:	str	r3, [r0, #0]
    cd52:	movs	r0, #1
    cd54:	bx	lr
    cd56:	nop

0000cd58 <__i2b>:
    cd58:	push	{r4, lr}
    cd5a:	mov	r4, r1
    cd5c:	movs	r1, #1
    cd5e:	bl	cbdc <_Balloc>
    cd62:	movs	r2, #1
    cd64:	str	r4, [r0, #20]
    cd66:	str	r2, [r0, #16]
    cd68:	pop	{r4, pc}
    cd6a:	nop

0000cd6c <__multiply>:
    cd6c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cd70:	ldr	r5, [r1, #16]
    cd72:	ldr	r7, [r2, #16]
    cd74:	cmp	r5, r7
    cd76:	sub	sp, #12
    cd78:	mov	r4, r1
    cd7a:	mov	r6, r2
    cd7c:	bge.n	cd88 <__multiply+0x1c>
    cd7e:	mov	r2, r5
    cd80:	mov	r4, r6
    cd82:	mov	r5, r7
    cd84:	mov	r6, r1
    cd86:	mov	r7, r2
    cd88:	ldr	r3, [r4, #8]
    cd8a:	ldr	r1, [r4, #4]
    cd8c:	add.w	r8, r5, r7
    cd90:	cmp	r8, r3
    cd92:	it	gt
    cd94:	addgt	r1, #1
    cd96:	bl	cbdc <_Balloc>
    cd9a:	add.w	ip, r0, #20
    cd9e:	add.w	r9, ip, r8, lsl #2
    cda2:	cmp	ip, r9
    cda4:	str	r0, [sp, #0]
    cda6:	bcs.n	cdb4 <__multiply+0x48>
    cda8:	mov	r3, ip
    cdaa:	movs	r1, #0
    cdac:	str.w	r1, [r3], #4
    cdb0:	cmp	r9, r3
    cdb2:	bhi.n	cdac <__multiply+0x40>
    cdb4:	add.w	r2, r6, #20
    cdb8:	add.w	sl, r2, r7, lsl #2
    cdbc:	add.w	r3, r4, #20
    cdc0:	cmp	r2, sl
    cdc2:	add.w	lr, r3, r5, lsl #2
    cdc6:	bcs.n	ce72 <__multiply+0x106>
    cdc8:	str.w	r9, [sp, #4]
    cdcc:	mov	r9, r3
    cdce:	ldr.w	r3, [r2], #4
    cdd2:	uxth.w	fp, r3
    cdd6:	cmp.w	fp, #0
    cdda:	beq.n	ce1e <__multiply+0xb2>
    cddc:	movs	r0, #0
    cdde:	mov	r7, r9
    cde0:	mov	r6, ip
    cde2:	mov	r5, r0
    cde4:	b.n	cde8 <__multiply+0x7c>
    cde6:	mov	r6, r3
    cde8:	ldr.w	r4, [r7], #4
    cdec:	ldr	r0, [r6, #0]
    cdee:	uxth	r1, r4
    cdf0:	uxth	r3, r0
    cdf2:	mla	r1, fp, r1, r3
    cdf6:	lsrs	r4, r4, #16
    cdf8:	lsrs	r0, r0, #16
    cdfa:	adds	r3, r1, r5
    cdfc:	mla	r0, fp, r4, r0
    ce00:	add.w	r0, r0, r3, lsr #16
    ce04:	uxth	r1, r3
    ce06:	mov	r3, r6
    ce08:	orr.w	r1, r1, r0, lsl #16
    ce0c:	cmp	lr, r7
    ce0e:	mov.w	r5, r0, lsr #16
    ce12:	str.w	r1, [r3], #4
    ce16:	bhi.n	cde6 <__multiply+0x7a>
    ce18:	str	r5, [r6, #4]
    ce1a:	ldr.w	r3, [r2, #-4]
    ce1e:	movs.w	fp, r3, lsr #16
    ce22:	beq.n	ce66 <__multiply+0xfa>
    ce24:	ldr.w	r3, [ip]
    ce28:	mov	r7, ip
    ce2a:	mov	r0, r3
    ce2c:	mov	r5, r9
    ce2e:	movs	r1, #0
    ce30:	b.n	ce34 <__multiply+0xc8>
    ce32:	mov	r7, r6
    ce34:	ldrh	r4, [r5, #0]
    ce36:	lsrs	r0, r0, #16
    ce38:	mla	r0, fp, r4, r0
    ce3c:	add	r1, r0
    ce3e:	uxth	r4, r3
    ce40:	mov	r6, r7
    ce42:	orr.w	r3, r4, r1, lsl #16
    ce46:	str.w	r3, [r6], #4
    ce4a:	ldr	r0, [r7, #4]
    ce4c:	ldr.w	r4, [r5], #4
    ce50:	uxth	r3, r0
    ce52:	lsrs	r4, r4, #16
    ce54:	mla	r4, fp, r4, r3
    ce58:	add.w	r3, r4, r1, lsr #16
    ce5c:	cmp	lr, r5
    ce5e:	mov.w	r1, r3, lsr #16
    ce62:	bhi.n	ce32 <__multiply+0xc6>
    ce64:	str	r3, [r7, #4]
    ce66:	cmp	sl, r2
    ce68:	add.w	ip, ip, #4
    ce6c:	bhi.n	cdce <__multiply+0x62>
    ce6e:	ldr.w	r9, [sp, #4]
    ce72:	cmp.w	r8, #0
    ce76:	ble.n	ce90 <__multiply+0x124>
    ce78:	ldr.w	r3, [r9, #-4]
    ce7c:	sub.w	r9, r9, #4
    ce80:	cbz	r3, ce8a <__multiply+0x11e>
    ce82:	b.n	ce90 <__multiply+0x124>
    ce84:	ldr.w	r3, [r9, #-4]!
    ce88:	cbnz	r3, ce90 <__multiply+0x124>
    ce8a:	subs.w	r8, r8, #1
    ce8e:	bne.n	ce84 <__multiply+0x118>
    ce90:	ldr	r0, [sp, #0]
    ce92:	str.w	r8, [r0, #16]
    ce96:	add	sp, #12
    ce98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000ce9c <__pow5mult>:
    ce9c:	ands.w	r3, r2, #3
    cea0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cea4:	mov	r4, r2
    cea6:	mov	r7, r0
    cea8:	bne.n	cf08 <__pow5mult+0x6c>
    ceaa:	mov	r6, r1
    ceac:	asrs	r4, r4, #2
    ceae:	beq.n	ceea <__pow5mult+0x4e>
    ceb0:	ldr	r5, [r7, #72]	; 0x48
    ceb2:	cbz	r5, cf1a <__pow5mult+0x7e>
    ceb4:	lsls	r3, r4, #31
    ceb6:	mov.w	r8, #0
    ceba:	bmi.n	ceca <__pow5mult+0x2e>
    cebc:	asrs	r4, r4, #1
    cebe:	beq.n	ceea <__pow5mult+0x4e>
    cec0:	ldr	r0, [r5, #0]
    cec2:	cbz	r0, cef0 <__pow5mult+0x54>
    cec4:	mov	r5, r0
    cec6:	lsls	r3, r4, #31
    cec8:	bpl.n	cebc <__pow5mult+0x20>
    ceca:	mov	r2, r5
    cecc:	mov	r1, r6
    cece:	mov	r0, r7
    ced0:	bl	cd6c <__multiply>
    ced4:	cbz	r6, cf04 <__pow5mult+0x68>
    ced6:	ldr	r2, [r6, #4]
    ced8:	ldr	r3, [r7, #76]	; 0x4c
    ceda:	asrs	r4, r4, #1
    cedc:	ldr.w	r1, [r3, r2, lsl #2]
    cee0:	str	r1, [r6, #0]
    cee2:	str.w	r6, [r3, r2, lsl #2]
    cee6:	mov	r6, r0
    cee8:	bne.n	cec0 <__pow5mult+0x24>
    ceea:	mov	r0, r6
    ceec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cef0:	mov	r2, r5
    cef2:	mov	r1, r5
    cef4:	mov	r0, r7
    cef6:	bl	cd6c <__multiply>
    cefa:	str	r0, [r5, #0]
    cefc:	str.w	r8, [r0]
    cf00:	mov	r5, r0
    cf02:	b.n	cec6 <__pow5mult+0x2a>
    cf04:	mov	r6, r0
    cf06:	b.n	cebc <__pow5mult+0x20>
    cf08:	subs	r2, r3, #1
    cf0a:	ldr	r5, [pc, #44]	; (cf38 <__pow5mult+0x9c>)
    cf0c:	movs	r3, #0
    cf0e:	ldr.w	r2, [r5, r2, lsl #2]
    cf12:	bl	cc3c <__multadd>
    cf16:	mov	r6, r0
    cf18:	b.n	ceac <__pow5mult+0x10>
    cf1a:	movs	r1, #1
    cf1c:	mov	r0, r7
    cf1e:	bl	cbdc <_Balloc>
    cf22:	movw	r1, #625	; 0x271
    cf26:	movs	r2, #1
    cf28:	movs	r3, #0
    cf2a:	str	r1, [r0, #20]
    cf2c:	str	r2, [r0, #16]
    cf2e:	mov	r5, r0
    cf30:	str	r0, [r7, #72]	; 0x48
    cf32:	str	r3, [r0, #0]
    cf34:	b.n	ceb4 <__pow5mult+0x18>
    cf36:	nop
    cf38:	.word	0x000102c0

0000cf3c <__lshift>:
    cf3c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cf40:	mov	r9, r2
    cf42:	ldr	r2, [r1, #16]
    cf44:	ldr	r3, [r1, #8]
    cf46:	mov.w	r4, r9, asr #5
    cf4a:	add.w	r8, r4, r2
    cf4e:	add.w	r5, r8, #1
    cf52:	cmp	r5, r3
    cf54:	mov	r6, r1
    cf56:	mov	sl, r0
    cf58:	ldr	r1, [r1, #4]
    cf5a:	ble.n	cf66 <__lshift+0x2a>
    cf5c:	lsls	r3, r3, #1
    cf5e:	cmp	r5, r3
    cf60:	add.w	r1, r1, #1
    cf64:	bgt.n	cf5c <__lshift+0x20>
    cf66:	mov	r0, sl
    cf68:	bl	cbdc <_Balloc>
    cf6c:	cmp	r4, #0
    cf6e:	add.w	r2, r0, #20
    cf72:	ble.n	cfe6 <__lshift+0xaa>
    cf74:	add.w	r3, r2, r4, lsl #2
    cf78:	movs	r1, #0
    cf7a:	str.w	r1, [r2], #4
    cf7e:	cmp	r3, r2
    cf80:	bne.n	cf7a <__lshift+0x3e>
    cf82:	ldr	r4, [r6, #16]
    cf84:	add.w	r1, r6, #20
    cf88:	ands.w	r9, r9, #31
    cf8c:	add.w	lr, r1, r4, lsl #2
    cf90:	beq.n	cfd6 <__lshift+0x9a>
    cf92:	rsb	r2, r9, #32
    cf96:	movs	r4, #0
    cf98:	ldr	r7, [r1, #0]
    cf9a:	lsl.w	ip, r7, r9
    cf9e:	orr.w	r4, ip, r4
    cfa2:	mov	ip, r3
    cfa4:	str.w	r4, [r3], #4
    cfa8:	ldr.w	r4, [r1], #4
    cfac:	cmp	lr, r1
    cfae:	lsr.w	r4, r4, r2
    cfb2:	bhi.n	cf98 <__lshift+0x5c>
    cfb4:	str.w	r4, [ip, #4]
    cfb8:	cbz	r4, cfbe <__lshift+0x82>
    cfba:	add.w	r5, r8, #2
    cfbe:	ldr.w	r3, [sl, #76]	; 0x4c
    cfc2:	ldr	r2, [r6, #4]
    cfc4:	subs	r5, #1
    cfc6:	ldr.w	r1, [r3, r2, lsl #2]
    cfca:	str	r5, [r0, #16]
    cfcc:	str	r1, [r6, #0]
    cfce:	str.w	r6, [r3, r2, lsl #2]
    cfd2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cfd6:	subs	r3, #4
    cfd8:	ldr.w	r2, [r1], #4
    cfdc:	str.w	r2, [r3, #4]!
    cfe0:	cmp	lr, r1
    cfe2:	bhi.n	cfd8 <__lshift+0x9c>
    cfe4:	b.n	cfbe <__lshift+0x82>
    cfe6:	mov	r3, r2
    cfe8:	b.n	cf82 <__lshift+0x46>
    cfea:	nop

0000cfec <__mcmp>:
    cfec:	ldr	r2, [r0, #16]
    cfee:	ldr	r3, [r1, #16]
    cff0:	subs	r2, r2, r3
    cff2:	bne.n	d01c <__mcmp+0x30>
    cff4:	lsls	r3, r3, #2
    cff6:	adds	r0, #20
    cff8:	adds	r1, #20
    cffa:	add	r1, r3
    cffc:	push	{r4}
    cffe:	add	r3, r0
    d000:	b.n	d006 <__mcmp+0x1a>
    d002:	cmp	r0, r3
    d004:	bcs.n	d020 <__mcmp+0x34>
    d006:	ldr.w	r4, [r3, #-4]!
    d00a:	ldr.w	r2, [r1, #-4]!
    d00e:	cmp	r4, r2
    d010:	beq.n	d002 <__mcmp+0x16>
    d012:	bcc.n	d028 <__mcmp+0x3c>
    d014:	movs	r0, #1
    d016:	ldr.w	r4, [sp], #4
    d01a:	bx	lr
    d01c:	mov	r0, r2
    d01e:	bx	lr
    d020:	movs	r0, #0
    d022:	ldr.w	r4, [sp], #4
    d026:	bx	lr
    d028:	mov.w	r0, #4294967295
    d02c:	b.n	d016 <__mcmp+0x2a>
    d02e:	nop

0000d030 <__mdiff>:
    d030:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d034:	ldr	r3, [r1, #16]
    d036:	mov	r7, r1
    d038:	ldr	r1, [r2, #16]
    d03a:	subs	r3, r3, r1
    d03c:	cmp	r3, #0
    d03e:	mov	r8, r2
    d040:	bne.n	d072 <__mdiff+0x42>
    d042:	lsls	r1, r1, #2
    d044:	add.w	r2, r7, #20
    d048:	add.w	r5, r8, #20
    d04c:	adds	r3, r2, r1
    d04e:	add	r1, r5
    d050:	b.n	d056 <__mdiff+0x26>
    d052:	cmp	r2, r3
    d054:	bcs.n	d114 <__mdiff+0xe4>
    d056:	ldr.w	r6, [r3, #-4]!
    d05a:	ldr.w	r4, [r1, #-4]!
    d05e:	cmp	r6, r4
    d060:	beq.n	d052 <__mdiff+0x22>
    d062:	bcs.n	d126 <__mdiff+0xf6>
    d064:	mov	r3, r7
    d066:	mov	r4, r2
    d068:	mov	r7, r8
    d06a:	mov.w	r9, #1
    d06e:	mov	r8, r3
    d070:	b.n	d080 <__mdiff+0x50>
    d072:	blt.n	d130 <__mdiff+0x100>
    d074:	add.w	r5, r7, #20
    d078:	add.w	r4, r2, #20
    d07c:	mov.w	r9, #0
    d080:	ldr	r1, [r7, #4]
    d082:	bl	cbdc <_Balloc>
    d086:	ldr.w	r3, [r8, #16]
    d08a:	ldr	r6, [r7, #16]
    d08c:	str.w	r9, [r0, #12]
    d090:	add.w	ip, r4, r3, lsl #2
    d094:	mov	lr, r4
    d096:	add.w	r7, r5, r6, lsl #2
    d09a:	add.w	r4, r0, #20
    d09e:	movs	r3, #0
    d0a0:	ldr.w	r1, [lr], #4
    d0a4:	ldr.w	r8, [r5], #4
    d0a8:	uxth	r2, r1
    d0aa:	uxtah	r3, r3, r8
    d0ae:	lsrs	r1, r1, #16
    d0b0:	subs	r2, r3, r2
    d0b2:	rsb	r3, r1, r8, lsr #16
    d0b6:	add.w	r3, r3, r2, asr #16
    d0ba:	uxth	r2, r2
    d0bc:	orr.w	r2, r2, r3, lsl #16
    d0c0:	cmp	ip, lr
    d0c2:	str.w	r2, [r4], #4
    d0c6:	mov.w	r3, r3, asr #16
    d0ca:	bhi.n	d0a0 <__mdiff+0x70>
    d0cc:	cmp	r7, r5
    d0ce:	bls.n	d100 <__mdiff+0xd0>
    d0d0:	mov	ip, r4
    d0d2:	mov	r1, r5
    d0d4:	ldr.w	lr, [r1], #4
    d0d8:	uxtah	r2, r3, lr
    d0dc:	asrs	r3, r2, #16
    d0de:	add.w	r3, r3, lr, lsr #16
    d0e2:	uxth	r2, r2
    d0e4:	orr.w	r2, r2, r3, lsl #16
    d0e8:	cmp	r7, r1
    d0ea:	str.w	r2, [ip], #4
    d0ee:	mov.w	r3, r3, asr #16
    d0f2:	bhi.n	d0d4 <__mdiff+0xa4>
    d0f4:	mvns	r5, r5
    d0f6:	add	r5, r7
    d0f8:	bic.w	r5, r5, #3
    d0fc:	adds	r5, #4
    d0fe:	add	r4, r5
    d100:	subs	r4, #4
    d102:	cbnz	r2, d10e <__mdiff+0xde>
    d104:	ldr.w	r3, [r4, #-4]!
    d108:	subs	r6, #1
    d10a:	cmp	r3, #0
    d10c:	beq.n	d104 <__mdiff+0xd4>
    d10e:	str	r6, [r0, #16]
    d110:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d114:	movs	r1, #0
    d116:	bl	cbdc <_Balloc>
    d11a:	movs	r2, #1
    d11c:	movs	r3, #0
    d11e:	str	r2, [r0, #16]
    d120:	str	r3, [r0, #20]
    d122:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d126:	mov	r4, r5
    d128:	mov.w	r9, #0
    d12c:	mov	r5, r2
    d12e:	b.n	d080 <__mdiff+0x50>
    d130:	mov	r3, r7
    d132:	add.w	r4, r7, #20
    d136:	add.w	r5, r8, #20
    d13a:	mov	r7, r8
    d13c:	mov.w	r9, #1
    d140:	mov	r8, r3
    d142:	b.n	d080 <__mdiff+0x50>

0000d144 <__d2b>:
    d144:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d148:	vmov	r6, r7, d0
    d14c:	sub	sp, #12
    d14e:	mov	r8, r1
    d150:	movs	r1, #1
    d152:	mov	r4, r7
    d154:	ubfx	r5, r7, #20, #11
    d158:	mov	r7, r2
    d15a:	bl	cbdc <_Balloc>
    d15e:	ubfx	r4, r4, #0, #20
    d162:	mov	r9, r0
    d164:	cbz	r5, d16a <__d2b+0x26>
    d166:	orr.w	r4, r4, #1048576	; 0x100000
    d16a:	str	r4, [sp, #4]
    d16c:	cbz	r6, d1b6 <__d2b+0x72>
    d16e:	add	r0, sp, #8
    d170:	str.w	r6, [r0, #-8]!
    d174:	bl	ccfc <__lo0bits>
    d178:	cmp	r0, #0
    d17a:	bne.n	d1e6 <__d2b+0xa2>
    d17c:	ldmia.w	sp, {r2, r3}
    d180:	str.w	r2, [r9, #20]
    d184:	cmp	r3, #0
    d186:	ite	eq
    d188:	moveq	r1, #1
    d18a:	movne	r1, #2
    d18c:	str.w	r3, [r9, #24]
    d190:	str.w	r1, [r9, #16]
    d194:	cbnz	r5, d1ce <__d2b+0x8a>
    d196:	add.w	r3, r9, r1, lsl #2
    d19a:	subw	r0, r0, #1074	; 0x432
    d19e:	str.w	r0, [r8]
    d1a2:	ldr	r0, [r3, #16]
    d1a4:	bl	ccbc <__hi0bits>
    d1a8:	rsb	r0, r0, r1, lsl #5
    d1ac:	str	r0, [r7, #0]
    d1ae:	mov	r0, r9
    d1b0:	add	sp, #12
    d1b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d1b6:	add	r0, sp, #4
    d1b8:	bl	ccfc <__lo0bits>
    d1bc:	ldr	r3, [sp, #4]
    d1be:	str.w	r3, [r9, #20]
    d1c2:	movs	r1, #1
    d1c4:	adds	r0, #32
    d1c6:	str.w	r1, [r9, #16]
    d1ca:	cmp	r5, #0
    d1cc:	beq.n	d196 <__d2b+0x52>
    d1ce:	subw	r5, r5, #1075	; 0x433
    d1d2:	add	r5, r0
    d1d4:	rsb	r0, r0, #53	; 0x35
    d1d8:	str.w	r5, [r8]
    d1dc:	str	r0, [r7, #0]
    d1de:	mov	r0, r9
    d1e0:	add	sp, #12
    d1e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d1e6:	ldmia.w	sp, {r2, r3}
    d1ea:	rsb	r1, r0, #32
    d1ee:	lsl.w	r1, r3, r1
    d1f2:	orrs	r2, r1
    d1f4:	lsrs	r3, r0
    d1f6:	str	r3, [sp, #4]
    d1f8:	str.w	r2, [r9, #20]
    d1fc:	b.n	d184 <__d2b+0x40>
    d1fe:	nop

0000d200 <_vasnprintf_r>:
    d200:	push	{r4, r5, r6, lr}
    d202:	mov	r5, r2
    d204:	sub	sp, #104	; 0x68
    d206:	ldr	r4, [r2, #0]
    d208:	cbz	r1, d20e <_vasnprintf_r+0xe>
    d20a:	cmp	r4, #0
    d20c:	bne.n	d244 <_vasnprintf_r+0x44>
    d20e:	movs	r4, #0
    d210:	mov.w	r2, #648	; 0x288
    d214:	strh.w	r2, [sp, #12]
    d218:	str	r4, [sp, #0]
    d21a:	str	r4, [sp, #16]
    d21c:	mov	r2, r3
    d21e:	movw	r6, #65535	; 0xffff
    d222:	ldr	r3, [sp, #120]	; 0x78
    d224:	str	r4, [sp, #8]
    d226:	mov	r1, sp
    d228:	str	r4, [sp, #20]
    d22a:	strh.w	r6, [sp, #14]
    d22e:	bl	e220 <_svfprintf_r>
    d232:	cmp	r0, #0
    d234:	blt.n	d25a <_vasnprintf_r+0x5a>
    d236:	ldr	r3, [sp, #0]
    d238:	str	r0, [r5, #0]
    d23a:	movs	r2, #0
    d23c:	strb	r2, [r3, #0]
    d23e:	ldr	r0, [sp, #16]
    d240:	add	sp, #104	; 0x68
    d242:	pop	{r4, r5, r6, pc}
    d244:	mov.w	r2, #1544	; 0x608
    d248:	str	r1, [sp, #0]
    d24a:	str	r1, [sp, #16]
    d24c:	strh.w	r2, [sp, #12]
    d250:	bge.n	d21c <_vasnprintf_r+0x1c>
    d252:	movs	r3, #139	; 0x8b
    d254:	str	r3, [r0, #0]
    d256:	movs	r0, #0
    d258:	b.n	d240 <_vasnprintf_r+0x40>
    d25a:	movs	r0, #0
    d25c:	b.n	d240 <_vasnprintf_r+0x40>
    d25e:	nop

0000d260 <_calloc_r>:
    d260:	push	{r4, lr}
    d262:	mul.w	r1, r2, r1
    d266:	bl	b908 <_malloc_r>
    d26a:	mov	r4, r0
    d26c:	cbz	r0, d2a6 <_calloc_r+0x46>
    d26e:	ldr.w	r2, [r0, #-4]
    d272:	bic.w	r2, r2, #3
    d276:	subs	r2, #4
    d278:	cmp	r2, #36	; 0x24
    d27a:	bhi.n	d2ae <_calloc_r+0x4e>
    d27c:	cmp	r2, #19
    d27e:	bls.n	d2aa <_calloc_r+0x4a>
    d280:	movs	r3, #0
    d282:	cmp	r2, #27
    d284:	str	r3, [r0, #0]
    d286:	str	r3, [r0, #4]
    d288:	bls.n	d2b8 <_calloc_r+0x58>
    d28a:	cmp	r2, #36	; 0x24
    d28c:	str	r3, [r0, #8]
    d28e:	str	r3, [r0, #12]
    d290:	iteee	ne
    d292:	addne.w	r2, r0, #16
    d296:	streq	r3, [r0, #16]
    d298:	streq	r3, [r0, #20]
    d29a:	addeq.w	r2, r0, #24
    d29e:	movs	r3, #0
    d2a0:	str	r3, [r2, #0]
    d2a2:	str	r3, [r2, #4]
    d2a4:	str	r3, [r2, #8]
    d2a6:	mov	r0, r4
    d2a8:	pop	{r4, pc}
    d2aa:	mov	r2, r0
    d2ac:	b.n	d29e <_calloc_r+0x3e>
    d2ae:	movs	r1, #0
    d2b0:	bl	c07c <memset>
    d2b4:	mov	r0, r4
    d2b6:	pop	{r4, pc}
    d2b8:	add.w	r2, r0, #8
    d2bc:	b.n	d29e <_calloc_r+0x3e>
    d2be:	nop

0000d2c0 <quorem>:
    d2c0:	ldr	r2, [r0, #16]
    d2c2:	ldr	r3, [r1, #16]
    d2c4:	cmp	r3, r2
    d2c6:	bgt.w	d3e4 <quorem+0x124>
    d2ca:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d2ce:	add.w	r8, r3, #4294967295
    d2d2:	add.w	r7, r1, #20
    d2d6:	add.w	fp, r0, #20
    d2da:	ldr.w	r2, [r7, r8, lsl #2]
    d2de:	ldr.w	r3, [fp, r8, lsl #2]
    d2e2:	mov.w	r4, r8, lsl #2
    d2e6:	sub	sp, #12
    d2e8:	adds	r2, #1
    d2ea:	udiv	r9, r3, r2
    d2ee:	add.w	r3, fp, r4
    d2f2:	str	r4, [sp, #0]
    d2f4:	add.w	sl, r7, r4
    d2f8:	str	r3, [sp, #4]
    d2fa:	cmp.w	r9, #0
    d2fe:	beq.n	d374 <quorem+0xb4>
    d300:	movs	r5, #0
    d302:	mov	ip, r7
    d304:	mov	lr, fp
    d306:	mov	r3, r5
    d308:	ldr.w	r6, [ip], #4
    d30c:	ldr.w	r2, [lr]
    d310:	uxth	r4, r6
    d312:	mla	r5, r9, r4, r5
    d316:	lsrs	r6, r6, #16
    d318:	lsrs	r4, r5, #16
    d31a:	mla	r4, r9, r6, r4
    d31e:	uxth	r5, r5
    d320:	subs	r3, r3, r5
    d322:	uxth	r6, r4
    d324:	uxtah	r3, r3, r2
    d328:	rsb	r6, r6, r2, lsr #16
    d32c:	add.w	r6, r6, r3, asr #16
    d330:	uxth	r3, r3
    d332:	orr.w	r3, r3, r6, lsl #16
    d336:	cmp	sl, ip
    d338:	str.w	r3, [lr], #4
    d33c:	mov.w	r5, r4, lsr #16
    d340:	mov.w	r3, r6, asr #16
    d344:	bcs.n	d308 <quorem+0x48>
    d346:	ldr	r3, [sp, #0]
    d348:	ldr.w	r3, [fp, r3]
    d34c:	cbnz	r3, d374 <quorem+0xb4>
    d34e:	ldr	r4, [sp, #4]
    d350:	subs	r3, r4, #4
    d352:	cmp	fp, r3
    d354:	bcs.n	d370 <quorem+0xb0>
    d356:	ldr.w	r3, [r4, #-4]
    d35a:	cbnz	r3, d370 <quorem+0xb0>
    d35c:	sub.w	r3, r4, #8
    d360:	b.n	d368 <quorem+0xa8>
    d362:	ldr	r2, [r3, #0]
    d364:	subs	r3, #4
    d366:	cbnz	r2, d370 <quorem+0xb0>
    d368:	cmp	fp, r3
    d36a:	add.w	r8, r8, #4294967295
    d36e:	bcc.n	d362 <quorem+0xa2>
    d370:	str.w	r8, [r0, #16]
    d374:	mov	r4, r0
    d376:	bl	cfec <__mcmp>
    d37a:	cmp	r0, #0
    d37c:	blt.n	d3dc <quorem+0x11c>
    d37e:	add.w	r9, r9, #1
    d382:	mov	r5, fp
    d384:	movs	r3, #0
    d386:	ldr.w	r1, [r7], #4
    d38a:	ldr	r0, [r5, #0]
    d38c:	uxth	r2, r1
    d38e:	subs	r2, r3, r2
    d390:	lsrs	r1, r1, #16
    d392:	uxtah	r2, r2, r0
    d396:	rsb	r3, r1, r0, lsr #16
    d39a:	add.w	r3, r3, r2, asr #16
    d39e:	uxth	r1, r2
    d3a0:	orr.w	r1, r1, r3, lsl #16
    d3a4:	cmp	sl, r7
    d3a6:	str.w	r1, [r5], #4
    d3aa:	mov.w	r3, r3, asr #16
    d3ae:	bcs.n	d386 <quorem+0xc6>
    d3b0:	ldr.w	r2, [fp, r8, lsl #2]
    d3b4:	add.w	r3, fp, r8, lsl #2
    d3b8:	cbnz	r2, d3dc <quorem+0x11c>
    d3ba:	subs	r2, r3, #4
    d3bc:	cmp	fp, r2
    d3be:	bcs.n	d3d8 <quorem+0x118>
    d3c0:	ldr.w	r2, [r3, #-4]
    d3c4:	cbnz	r2, d3d8 <quorem+0x118>
    d3c6:	subs	r3, #8
    d3c8:	b.n	d3d0 <quorem+0x110>
    d3ca:	ldr	r2, [r3, #0]
    d3cc:	subs	r3, #4
    d3ce:	cbnz	r2, d3d8 <quorem+0x118>
    d3d0:	cmp	fp, r3
    d3d2:	add.w	r8, r8, #4294967295
    d3d6:	bcc.n	d3ca <quorem+0x10a>
    d3d8:	str.w	r8, [r4, #16]
    d3dc:	mov	r0, r9
    d3de:	add	sp, #12
    d3e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d3e4:	movs	r0, #0
    d3e6:	bx	lr

0000d3e8 <_dtoa_r>:
    d3e8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d3ec:	vmov	r6, r7, d0
    d3f0:	sub	sp, #108	; 0x6c
    d3f2:	ldr	r4, [r0, #64]	; 0x40
    d3f4:	ldr	r5, [sp, #144]	; 0x90
    d3f6:	str	r1, [sp, #0]
    d3f8:	mov	r9, r0
    d3fa:	str	r2, [sp, #20]
    d3fc:	str	r3, [sp, #12]
    d3fe:	vmov	sl, s0
    d402:	mov	fp, r7
    d404:	cbz	r4, d41c <_dtoa_r+0x34>
    d406:	ldr	r2, [r0, #68]	; 0x44
    d408:	str	r2, [r4, #4]
    d40a:	movs	r3, #1
    d40c:	lsls	r3, r2
    d40e:	str	r3, [r4, #8]
    d410:	mov	r1, r4
    d412:	bl	cc28 <_Bfree>
    d416:	movs	r3, #0
    d418:	str.w	r3, [r9, #64]	; 0x40
    d41c:	cmp.w	fp, #0
    d420:	mov	r4, fp
    d422:	blt.n	d48e <_dtoa_r+0xa6>
    d424:	movs	r3, #0
    d426:	str	r3, [r5, #0]
    d428:	ldr	r3, [pc, #644]	; (d6b0 <_dtoa_r+0x2c8>)
    d42a:	mov	r2, r3
    d42c:	ands	r3, r4
    d42e:	cmp	r3, r2
    d430:	beq.n	d460 <_dtoa_r+0x78>
    d432:	movs	r2, #0
    d434:	movs	r3, #0
    d436:	mov	r0, sl
    d438:	mov	r1, fp
    d43a:	bl	b488 <__aeabi_dcmpeq>
    d43e:	mov	r6, sl
    d440:	mov	r7, fp
    d442:	mov	r8, r0
    d444:	cbz	r0, d49a <_dtoa_r+0xb2>
    d446:	ldr	r2, [sp, #12]
    d448:	movs	r3, #1
    d44a:	str	r3, [r2, #0]
    d44c:	ldr	r3, [sp, #148]	; 0x94
    d44e:	cmp	r3, #0
    d450:	beq.w	d5d0 <_dtoa_r+0x1e8>
    d454:	ldr	r0, [pc, #604]	; (d6b4 <_dtoa_r+0x2cc>)
    d456:	str	r0, [r3, #0]
    d458:	subs	r0, #1
    d45a:	add	sp, #108	; 0x6c
    d45c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d460:	ldr	r2, [sp, #12]
    d462:	movw	r3, #9999	; 0x270f
    d466:	str	r3, [r2, #0]
    d468:	cmp.w	sl, #0
    d46c:	beq.w	d5a4 <_dtoa_r+0x1bc>
    d470:	ldr	r0, [pc, #580]	; (d6b8 <_dtoa_r+0x2d0>)
    d472:	ldr	r3, [sp, #148]	; 0x94
    d474:	cmp	r3, #0
    d476:	beq.n	d45a <_dtoa_r+0x72>
    d478:	ldrb	r3, [r0, #3]
    d47a:	cmp	r3, #0
    d47c:	beq.w	d5d4 <_dtoa_r+0x1ec>
    d480:	add.w	r3, r0, #8
    d484:	ldr	r2, [sp, #148]	; 0x94
    d486:	str	r3, [r2, #0]
    d488:	add	sp, #108	; 0x6c
    d48a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d48e:	movs	r3, #1
    d490:	bic.w	r4, fp, #2147483648	; 0x80000000
    d494:	str	r3, [r5, #0]
    d496:	mov	fp, r4
    d498:	b.n	d428 <_dtoa_r+0x40>
    d49a:	add	r2, sp, #96	; 0x60
    d49c:	add	r1, sp, #100	; 0x64
    d49e:	vmov	d0, r6, r7
    d4a2:	mov	r0, r9
    d4a4:	bl	d144 <__d2b>
    d4a8:	lsrs	r5, r4, #20
    d4aa:	str	r0, [sp, #40]	; 0x28
    d4ac:	bne.w	d5b6 <_dtoa_r+0x1ce>
    d4b0:	ldr	r5, [sp, #96]	; 0x60
    d4b2:	ldr	r6, [sp, #100]	; 0x64
    d4b4:	add	r6, r5
    d4b6:	addw	r3, r6, #1074	; 0x432
    d4ba:	cmp	r3, #32
    d4bc:	ble.w	d9d0 <_dtoa_r+0x5e8>
    d4c0:	rsb	r3, r3, #64	; 0x40
    d4c4:	addw	r0, r6, #1042	; 0x412
    d4c8:	lsls	r4, r3
    d4ca:	lsr.w	r0, sl, r0
    d4ce:	orrs	r0, r4
    d4d0:	bl	aecc <__aeabi_ui2d>
    d4d4:	movs	r3, #1
    d4d6:	subs	r4, r6, #1
    d4d8:	sub.w	r1, r1, #32505856	; 0x1f00000
    d4dc:	str	r3, [sp, #60]	; 0x3c
    d4de:	movs	r2, #0
    d4e0:	ldr	r3, [pc, #472]	; (d6bc <_dtoa_r+0x2d4>)
    d4e2:	bl	ac50 <__aeabi_dsub>
    d4e6:	add	r3, pc, #432	; (adr r3, d698 <_dtoa_r+0x2b0>)
    d4e8:	ldrd	r2, r3, [r3]
    d4ec:	bl	afb8 <__aeabi_dmul>
    d4f0:	add	r3, pc, #428	; (adr r3, d6a0 <_dtoa_r+0x2b8>)
    d4f2:	ldrd	r2, r3, [r3]
    d4f6:	bl	ac54 <__adddf3>
    d4fa:	mov	r6, r0
    d4fc:	mov	r0, r4
    d4fe:	mov	r7, r1
    d500:	bl	aeec <__aeabi_i2d>
    d504:	add	r3, pc, #416	; (adr r3, d6a8 <_dtoa_r+0x2c0>)
    d506:	ldrd	r2, r3, [r3]
    d50a:	bl	afb8 <__aeabi_dmul>
    d50e:	mov	r2, r0
    d510:	mov	r3, r1
    d512:	mov	r0, r6
    d514:	mov	r1, r7
    d516:	bl	ac54 <__adddf3>
    d51a:	mov	r6, r0
    d51c:	mov	r7, r1
    d51e:	bl	b518 <__aeabi_d2iz>
    d522:	movs	r2, #0
    d524:	str	r0, [sp, #16]
    d526:	movs	r3, #0
    d528:	mov	r0, r6
    d52a:	mov	r1, r7
    d52c:	bl	b49c <__aeabi_dcmplt>
    d530:	cmp	r0, #0
    d532:	bne.w	d986 <_dtoa_r+0x59e>
    d536:	ldr	r6, [sp, #16]
    d538:	cmp	r6, #22
    d53a:	bhi.w	d980 <_dtoa_r+0x598>
    d53e:	ldr	r3, [pc, #384]	; (d6c0 <_dtoa_r+0x2d8>)
    d540:	add.w	r3, r3, r6, lsl #3
    d544:	ldrd	r0, r1, [r3]
    d548:	mov	r2, sl
    d54a:	mov	r3, fp
    d54c:	bl	b4d8 <__aeabi_dcmpgt>
    d550:	cmp	r0, #0
    d552:	beq.w	d9da <_dtoa_r+0x5f2>
    d556:	subs	r3, r6, #1
    d558:	str	r3, [sp, #16]
    d55a:	movs	r3, #0
    d55c:	str	r3, [sp, #52]	; 0x34
    d55e:	subs	r5, r5, r4
    d560:	subs.w	r8, r5, #1
    d564:	bmi.w	d9bc <_dtoa_r+0x5d4>
    d568:	movs	r3, #0
    d56a:	str	r3, [sp, #28]
    d56c:	ldr	r3, [sp, #16]
    d56e:	cmp	r3, #0
    d570:	blt.w	d9aa <_dtoa_r+0x5c2>
    d574:	add	r8, r3
    d576:	str	r3, [sp, #48]	; 0x30
    d578:	movs	r3, #0
    d57a:	str	r3, [sp, #24]
    d57c:	ldr	r3, [sp, #0]
    d57e:	cmp	r3, #9
    d580:	bhi.n	d5d8 <_dtoa_r+0x1f0>
    d582:	cmp	r3, #5
    d584:	ble.w	e210 <_dtoa_r+0xe28>
    d588:	subs	r3, #4
    d58a:	str	r3, [sp, #0]
    d58c:	movs	r6, #0
    d58e:	ldr	r3, [sp, #0]
    d590:	subs	r3, #2
    d592:	cmp	r3, #3
    d594:	bhi.w	e1de <_dtoa_r+0xdf6>
    d598:	tbh	[pc, r3, lsl #1]
    d59c:	.word	0x0224032b
    d5a0:	.word	0x04500336
    d5a4:	ldr	r3, [pc, #272]	; (d6b8 <_dtoa_r+0x2d0>)
    d5a6:	ldr	r2, [pc, #284]	; (d6c4 <_dtoa_r+0x2dc>)
    d5a8:	ubfx	r0, r4, #0, #20
    d5ac:	cmp	r0, #0
    d5ae:	ite	ne
    d5b0:	movne	r0, r3
    d5b2:	moveq	r0, r2
    d5b4:	b.n	d472 <_dtoa_r+0x8a>
    d5b6:	ubfx	r3, fp, #0, #20
    d5ba:	orr.w	r1, r3, #1069547520	; 0x3fc00000
    d5be:	subw	r4, r5, #1023	; 0x3ff
    d5c2:	mov	r0, sl
    d5c4:	str.w	r8, [sp, #60]	; 0x3c
    d5c8:	orr.w	r1, r1, #3145728	; 0x300000
    d5cc:	ldr	r5, [sp, #96]	; 0x60
    d5ce:	b.n	d4de <_dtoa_r+0xf6>
    d5d0:	ldr	r0, [pc, #244]	; (d6c8 <_dtoa_r+0x2e0>)
    d5d2:	b.n	d45a <_dtoa_r+0x72>
    d5d4:	adds	r3, r0, #3
    d5d6:	b.n	d484 <_dtoa_r+0x9c>
    d5d8:	movs	r1, #0
    d5da:	str.w	r1, [r9, #68]	; 0x44
    d5de:	mov	r0, r9
    d5e0:	mov	r4, r1
    d5e2:	str	r1, [sp, #0]
    d5e4:	bl	cbdc <_Balloc>
    d5e8:	mov.w	r3, #4294967295
    d5ec:	str	r3, [sp, #32]
    d5ee:	str	r3, [sp, #56]	; 0x38
    d5f0:	movs	r3, #1
    d5f2:	str	r0, [sp, #36]	; 0x24
    d5f4:	str.w	r0, [r9, #64]	; 0x40
    d5f8:	str	r4, [sp, #20]
    d5fa:	str	r3, [sp, #44]	; 0x2c
    d5fc:	ldr	r3, [sp, #100]	; 0x64
    d5fe:	cmp	r3, #0
    d600:	blt.w	d7a4 <_dtoa_r+0x3bc>
    d604:	ldr	r2, [sp, #16]
    d606:	cmp	r2, #14
    d608:	bgt.w	d7a4 <_dtoa_r+0x3bc>
    d60c:	ldr	r3, [pc, #176]	; (d6c0 <_dtoa_r+0x2d8>)
    d60e:	add.w	r3, r3, r2, lsl #3
    d612:	vldr	d7, [r3]
    d616:	ldr	r3, [sp, #20]
    d618:	cmp	r3, #0
    d61a:	vstr	d7, [sp]
    d61e:	blt.w	dc1e <_dtoa_r+0x836>
    d622:	mov	r6, sl
    d624:	mov	r7, fp
    d626:	ldrd	sl, fp, [sp]
    d62a:	mov	r0, r6
    d62c:	mov	r2, sl
    d62e:	mov	r3, fp
    d630:	mov	r1, r7
    d632:	bl	b20c <__aeabi_ddiv>
    d636:	bl	b518 <__aeabi_d2iz>
    d63a:	mov	r4, r0
    d63c:	bl	aeec <__aeabi_i2d>
    d640:	mov	r2, sl
    d642:	mov	r3, fp
    d644:	bl	afb8 <__aeabi_dmul>
    d648:	mov	r3, r1
    d64a:	mov	r2, r0
    d64c:	mov	r1, r7
    d64e:	mov	r0, r6
    d650:	bl	ac50 <__aeabi_dsub>
    d654:	ldr	r5, [sp, #36]	; 0x24
    d656:	add.w	r3, r4, #48	; 0x30
    d65a:	strb	r3, [r5, #0]
    d65c:	ldr	r3, [sp, #32]
    d65e:	cmp	r3, #1
    d660:	mov	r6, r0
    d662:	mov	r7, r1
    d664:	add.w	r5, r5, #1
    d668:	beq.n	d72e <_dtoa_r+0x346>
    d66a:	movs	r2, #0
    d66c:	ldr	r3, [pc, #92]	; (d6cc <_dtoa_r+0x2e4>)
    d66e:	bl	afb8 <__aeabi_dmul>
    d672:	movs	r2, #0
    d674:	movs	r3, #0
    d676:	mov	r6, r0
    d678:	mov	r7, r1
    d67a:	bl	b488 <__aeabi_dcmpeq>
    d67e:	cmp	r0, #0
    d680:	bne.n	d77e <_dtoa_r+0x396>
    d682:	str.w	r9, [sp, #20]
    d686:	ldr.w	sl, [sp, #32]
    d68a:	ldr.w	fp, [sp, #36]	; 0x24
    d68e:	ldrd	r8, r9, [sp]
    d692:	b.n	d6e6 <_dtoa_r+0x2fe>
    d694:	nop.w
    d698:	.word	0x636f4361
    d69c:	.word	0x3fd287a7
    d6a0:	.word	0x8b60c8b3
    d6a4:	.word	0x3fc68a28
    d6a8:	.word	0x509f79fb
    d6ac:	.word	0x3fd34413
    d6b0:	.word	0x7ff00000
    d6b4:	.word	0x000102dd
    d6b8:	.word	0x000102d8
    d6bc:	.word	0x3ff80000
    d6c0:	.word	0x000101d0
    d6c4:	.word	0x000102cc
    d6c8:	.word	0x000102dc
    d6cc:	.word	0x40240000
    d6d0:	bl	afb8 <__aeabi_dmul>
    d6d4:	movs	r2, #0
    d6d6:	movs	r3, #0
    d6d8:	mov	r6, r0
    d6da:	mov	r7, r1
    d6dc:	bl	b488 <__aeabi_dcmpeq>
    d6e0:	cmp	r0, #0
    d6e2:	bne.w	de42 <_dtoa_r+0xa5a>
    d6e6:	mov	r2, r8
    d6e8:	mov	r3, r9
    d6ea:	mov	r0, r6
    d6ec:	mov	r1, r7
    d6ee:	bl	b20c <__aeabi_ddiv>
    d6f2:	bl	b518 <__aeabi_d2iz>
    d6f6:	mov	r4, r0
    d6f8:	bl	aeec <__aeabi_i2d>
    d6fc:	mov	r2, r8
    d6fe:	mov	r3, r9
    d700:	bl	afb8 <__aeabi_dmul>
    d704:	mov	r2, r0
    d706:	mov	r3, r1
    d708:	mov	r0, r6
    d70a:	mov	r1, r7
    d70c:	bl	ac50 <__aeabi_dsub>
    d710:	add.w	lr, r4, #48	; 0x30
    d714:	strb.w	lr, [r5], #1
    d718:	rsb	lr, fp, r5
    d71c:	cmp	lr, sl
    d71e:	mov	r6, r0
    d720:	mov	r7, r1
    d722:	mov.w	r2, #0
    d726:	ldr	r3, [pc, #696]	; (d9e0 <_dtoa_r+0x5f8>)
    d728:	bne.n	d6d0 <_dtoa_r+0x2e8>
    d72a:	ldr.w	r9, [sp, #20]
    d72e:	mov	r2, r6
    d730:	mov	r3, r7
    d732:	mov	r0, r6
    d734:	mov	r1, r7
    d736:	bl	ac54 <__adddf3>
    d73a:	mov	r6, r0
    d73c:	mov	r7, r1
    d73e:	mov	r2, r0
    d740:	mov	r3, r1
    d742:	ldrd	r0, r1, [sp]
    d746:	bl	b49c <__aeabi_dcmplt>
    d74a:	cbnz	r0, d75e <_dtoa_r+0x376>
    d74c:	mov	r2, r6
    d74e:	mov	r3, r7
    d750:	ldrd	r0, r1, [sp]
    d754:	bl	b488 <__aeabi_dcmpeq>
    d758:	cbz	r0, d77e <_dtoa_r+0x396>
    d75a:	lsls	r3, r4, #31
    d75c:	bpl.n	d77e <_dtoa_r+0x396>
    d75e:	ldrb.w	r4, [r5, #-1]
    d762:	ldr	r2, [sp, #36]	; 0x24
    d764:	subs	r3, r5, #1
    d766:	b.n	d772 <_dtoa_r+0x38a>
    d768:	cmp	r2, r3
    d76a:	beq.w	df66 <_dtoa_r+0xb7e>
    d76e:	ldrb.w	r4, [r3, #-1]!
    d772:	cmp	r4, #57	; 0x39
    d774:	add.w	r5, r3, #1
    d778:	beq.n	d768 <_dtoa_r+0x380>
    d77a:	adds	r4, #1
    d77c:	strb	r4, [r3, #0]
    d77e:	ldr	r1, [sp, #40]	; 0x28
    d780:	mov	r0, r9
    d782:	bl	cc28 <_Bfree>
    d786:	movs	r2, #0
    d788:	ldr	r3, [sp, #16]
    d78a:	strb	r2, [r5, #0]
    d78c:	ldr	r2, [sp, #12]
    d78e:	adds	r3, #1
    d790:	str	r3, [r2, #0]
    d792:	ldr	r3, [sp, #148]	; 0x94
    d794:	cmp	r3, #0
    d796:	beq.w	ded0 <_dtoa_r+0xae8>
    d79a:	ldr	r0, [sp, #36]	; 0x24
    d79c:	str	r5, [r3, #0]
    d79e:	add	sp, #108	; 0x6c
    d7a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d7a4:	ldr	r2, [sp, #44]	; 0x2c
    d7a6:	cmp	r2, #0
    d7a8:	beq.w	d9c8 <_dtoa_r+0x5e0>
    d7ac:	ldr	r2, [sp, #0]
    d7ae:	cmp	r2, #1
    d7b0:	ble.w	dc62 <_dtoa_r+0x87a>
    d7b4:	ldr	r3, [sp, #32]
    d7b6:	ldr	r2, [sp, #24]
    d7b8:	subs	r7, r3, #1
    d7ba:	cmp	r2, r7
    d7bc:	blt.w	ded6 <_dtoa_r+0xaee>
    d7c0:	subs	r7, r2, r7
    d7c2:	ldr	r3, [sp, #32]
    d7c4:	cmp	r3, #0
    d7c6:	blt.w	e0ca <_dtoa_r+0xce2>
    d7ca:	ldr	r5, [sp, #28]
    d7cc:	ldr	r3, [sp, #32]
    d7ce:	ldr	r2, [sp, #28]
    d7d0:	movs	r1, #1
    d7d2:	add	r2, r3
    d7d4:	mov	r0, r9
    d7d6:	str	r2, [sp, #28]
    d7d8:	add	r8, r3
    d7da:	bl	cd58 <__i2b>
    d7de:	mov	r6, r0
    d7e0:	cbz	r5, d7fc <_dtoa_r+0x414>
    d7e2:	cmp.w	r8, #0
    d7e6:	ble.n	d7fc <_dtoa_r+0x414>
    d7e8:	cmp	r5, r8
    d7ea:	ldr	r2, [sp, #28]
    d7ec:	mov	r3, r5
    d7ee:	it	ge
    d7f0:	movge	r3, r8
    d7f2:	subs	r2, r2, r3
    d7f4:	str	r2, [sp, #28]
    d7f6:	subs	r5, r5, r3
    d7f8:	rsb	r8, r3, r8
    d7fc:	ldr	r3, [sp, #24]
    d7fe:	cmp	r3, #0
    d800:	ble.w	ddee <_dtoa_r+0xa06>
    d804:	ldr	r2, [sp, #44]	; 0x2c
    d806:	cmp	r2, #0
    d808:	beq.w	dc10 <_dtoa_r+0x828>
    d80c:	cmp	r7, #0
    d80e:	beq.w	dc10 <_dtoa_r+0x828>
    d812:	mov	r1, r6
    d814:	mov	r2, r7
    d816:	mov	r0, r9
    d818:	bl	ce9c <__pow5mult>
    d81c:	ldr	r2, [sp, #40]	; 0x28
    d81e:	mov	r1, r0
    d820:	mov	r6, r0
    d822:	mov	r0, r9
    d824:	bl	cd6c <__multiply>
    d828:	ldr	r1, [sp, #40]	; 0x28
    d82a:	mov	r4, r0
    d82c:	mov	r0, r9
    d82e:	bl	cc28 <_Bfree>
    d832:	ldr	r3, [sp, #24]
    d834:	subs	r3, r3, r7
    d836:	str	r3, [sp, #24]
    d838:	bne.w	dc0e <_dtoa_r+0x826>
    d83c:	movs	r1, #1
    d83e:	mov	r0, r9
    d840:	bl	cd58 <__i2b>
    d844:	ldr	r3, [sp, #48]	; 0x30
    d846:	str	r0, [sp, #24]
    d848:	cmp	r3, #0
    d84a:	beq.w	dc78 <_dtoa_r+0x890>
    d84e:	mov	r1, r0
    d850:	mov	r2, r3
    d852:	mov	r0, r9
    d854:	bl	ce9c <__pow5mult>
    d858:	ldr	r3, [sp, #0]
    d85a:	str	r0, [sp, #24]
    d85c:	cmp	r3, #1
    d85e:	ble.w	de48 <_dtoa_r+0xa60>
    d862:	movs	r7, #0
    d864:	ldr	r2, [sp, #24]
    d866:	ldr	r3, [r2, #16]
    d868:	add.w	r3, r2, r3, lsl #2
    d86c:	ldr	r0, [r3, #16]
    d86e:	bl	ccbc <__hi0bits>
    d872:	rsb	r0, r0, #32
    d876:	add	r0, r8
    d878:	ands.w	r0, r0, #31
    d87c:	beq.w	dc74 <_dtoa_r+0x88c>
    d880:	rsb	r3, r0, #32
    d884:	cmp	r3, #4
    d886:	ble.w	e204 <_dtoa_r+0xe1c>
    d88a:	rsb	r0, r0, #28
    d88e:	ldr	r3, [sp, #28]
    d890:	add	r3, r0
    d892:	str	r3, [sp, #28]
    d894:	add	r5, r0
    d896:	add	r8, r0
    d898:	ldr	r3, [sp, #28]
    d89a:	cmp	r3, #0
    d89c:	ble.n	d8aa <_dtoa_r+0x4c2>
    d89e:	mov	r1, r4
    d8a0:	mov	r2, r3
    d8a2:	mov	r0, r9
    d8a4:	bl	cf3c <__lshift>
    d8a8:	mov	r4, r0
    d8aa:	cmp.w	r8, #0
    d8ae:	ble.n	d8bc <_dtoa_r+0x4d4>
    d8b0:	mov	r2, r8
    d8b2:	ldr	r1, [sp, #24]
    d8b4:	mov	r0, r9
    d8b6:	bl	cf3c <__lshift>
    d8ba:	str	r0, [sp, #24]
    d8bc:	ldr	r3, [sp, #52]	; 0x34
    d8be:	cmp	r3, #0
    d8c0:	bne.w	ddb8 <_dtoa_r+0x9d0>
    d8c4:	ldr	r3, [sp, #32]
    d8c6:	cmp	r3, #0
    d8c8:	ble.w	ddf2 <_dtoa_r+0xa0a>
    d8cc:	ldr	r3, [sp, #44]	; 0x2c
    d8ce:	cmp	r3, #0
    d8d0:	bne.w	dcbc <_dtoa_r+0x8d4>
    d8d4:	ldr.w	fp, [sp, #36]	; 0x24
    d8d8:	ldr	r7, [sp, #32]
    d8da:	ldr.w	r8, [sp, #24]
    d8de:	mov	r5, fp
    d8e0:	b.n	d8e8 <_dtoa_r+0x500>
    d8e2:	bl	cc3c <__multadd>
    d8e6:	mov	r4, r0
    d8e8:	mov	r1, r8
    d8ea:	mov	r0, r4
    d8ec:	bl	d2c0 <quorem>
    d8f0:	add.w	sl, r0, #48	; 0x30
    d8f4:	strb.w	sl, [r5], #1
    d8f8:	rsb	r3, fp, r5
    d8fc:	cmp	r3, r7
    d8fe:	mov.w	r2, #10
    d902:	mov.w	r3, #0
    d906:	mov	r1, r4
    d908:	mov	r0, r9
    d90a:	blt.n	d8e2 <_dtoa_r+0x4fa>
    d90c:	ldr	r3, [sp, #36]	; 0x24
    d90e:	ldr	r2, [sp, #32]
    d910:	cmp	r2, #1
    d912:	ite	ge
    d914:	addge	r3, r3, r2
    d916:	addlt	r3, #1
    d918:	mov	r5, r3
    d91a:	mov.w	fp, #0
    d91e:	mov	r1, r4
    d920:	movs	r2, #1
    d922:	mov	r0, r9
    d924:	bl	cf3c <__lshift>
    d928:	ldr	r1, [sp, #24]
    d92a:	str	r0, [sp, #40]	; 0x28
    d92c:	bl	cfec <__mcmp>
    d930:	cmp	r0, #0
    d932:	ble.w	df40 <_dtoa_r+0xb58>
    d936:	ldrb.w	r2, [r5, #-1]
    d93a:	ldr	r1, [sp, #36]	; 0x24
    d93c:	subs	r3, r5, #1
    d93e:	b.n	d94a <_dtoa_r+0x562>
    d940:	cmp	r3, r1
    d942:	beq.w	de2e <_dtoa_r+0xa46>
    d946:	ldrb.w	r2, [r3, #-1]!
    d94a:	cmp	r2, #57	; 0x39
    d94c:	add.w	r5, r3, #1
    d950:	beq.n	d940 <_dtoa_r+0x558>
    d952:	adds	r2, #1
    d954:	strb	r2, [r3, #0]
    d956:	ldr	r1, [sp, #24]
    d958:	mov	r0, r9
    d95a:	bl	cc28 <_Bfree>
    d95e:	cmp	r6, #0
    d960:	beq.w	d77e <_dtoa_r+0x396>
    d964:	cmp.w	fp, #0
    d968:	beq.n	d976 <_dtoa_r+0x58e>
    d96a:	cmp	fp, r6
    d96c:	beq.n	d976 <_dtoa_r+0x58e>
    d96e:	mov	r1, fp
    d970:	mov	r0, r9
    d972:	bl	cc28 <_Bfree>
    d976:	mov	r1, r6
    d978:	mov	r0, r9
    d97a:	bl	cc28 <_Bfree>
    d97e:	b.n	d77e <_dtoa_r+0x396>
    d980:	movs	r3, #1
    d982:	str	r3, [sp, #52]	; 0x34
    d984:	b.n	d55e <_dtoa_r+0x176>
    d986:	ldr.w	r8, [sp, #16]
    d98a:	mov	r0, r8
    d98c:	bl	aeec <__aeabi_i2d>
    d990:	mov	r2, r0
    d992:	mov	r3, r1
    d994:	mov	r0, r6
    d996:	mov	r1, r7
    d998:	bl	b488 <__aeabi_dcmpeq>
    d99c:	cmp	r0, #0
    d99e:	bne.w	d536 <_dtoa_r+0x14e>
    d9a2:	add.w	r3, r8, #4294967295
    d9a6:	str	r3, [sp, #16]
    d9a8:	b.n	d536 <_dtoa_r+0x14e>
    d9aa:	ldr	r2, [sp, #28]
    d9ac:	ldr	r3, [sp, #16]
    d9ae:	subs	r2, r2, r3
    d9b0:	negs	r3, r3
    d9b2:	str	r3, [sp, #24]
    d9b4:	movs	r3, #0
    d9b6:	str	r2, [sp, #28]
    d9b8:	str	r3, [sp, #48]	; 0x30
    d9ba:	b.n	d57c <_dtoa_r+0x194>
    d9bc:	rsb	r3, r8, #0
    d9c0:	str	r3, [sp, #28]
    d9c2:	mov.w	r8, #0
    d9c6:	b.n	d56c <_dtoa_r+0x184>
    d9c8:	ldr	r7, [sp, #24]
    d9ca:	ldr	r5, [sp, #28]
    d9cc:	ldr	r6, [sp, #44]	; 0x2c
    d9ce:	b.n	d7e0 <_dtoa_r+0x3f8>
    d9d0:	rsb	r4, r3, #32
    d9d4:	lsl.w	r0, sl, r4
    d9d8:	b.n	d4d0 <_dtoa_r+0xe8>
    d9da:	str	r0, [sp, #52]	; 0x34
    d9dc:	b.n	d55e <_dtoa_r+0x176>
    d9de:	nop
    d9e0:	.word	0x40240000
    d9e4:	movs	r3, #0
    d9e6:	str	r3, [sp, #44]	; 0x2c
    d9e8:	ldr	r3, [sp, #16]
    d9ea:	ldr	r2, [sp, #20]
    d9ec:	add	r3, r2
    d9ee:	str	r3, [sp, #56]	; 0x38
    d9f0:	adds	r3, #1
    d9f2:	cmp	r3, #0
    d9f4:	str	r3, [sp, #32]
    d9f6:	ble.w	def4 <_dtoa_r+0xb0c>
    d9fa:	ldr	r4, [sp, #32]
    d9fc:	mov	r5, r4
    d9fe:	movs	r1, #0
    da00:	cmp	r5, #23
    da02:	str.w	r1, [r9, #68]	; 0x44
    da06:	bls.n	da20 <_dtoa_r+0x638>
    da08:	movs	r2, #1
    da0a:	movs	r3, #4
    da0c:	lsls	r3, r3, #1
    da0e:	add.w	r0, r3, #20
    da12:	cmp	r0, r5
    da14:	mov	r1, r2
    da16:	add.w	r2, r2, #1
    da1a:	bls.n	da0c <_dtoa_r+0x624>
    da1c:	str.w	r1, [r9, #68]	; 0x44
    da20:	mov	r0, r9
    da22:	bl	cbdc <_Balloc>
    da26:	cmp	r4, #14
    da28:	str	r0, [sp, #36]	; 0x24
    da2a:	str.w	r0, [r9, #64]	; 0x40
    da2e:	bhi.w	d5fc <_dtoa_r+0x214>
    da32:	cmp	r6, #0
    da34:	beq.w	d5fc <_dtoa_r+0x214>
    da38:	ldr	r1, [sp, #16]
    da3a:	cmp	r1, #0
    da3c:	strd	sl, fp, [sp, #64]	; 0x40
    da40:	ble.w	df78 <_dtoa_r+0xb90>
    da44:	ldr	r3, [pc, #576]	; (dc88 <_dtoa_r+0x8a0>)
    da46:	and.w	r2, r1, #15
    da4a:	asrs	r6, r1, #4
    da4c:	add.w	r3, r3, r2, lsl #3
    da50:	lsls	r0, r6, #27
    da52:	ldrd	r4, r5, [r3]
    da56:	bpl.w	dee6 <_dtoa_r+0xafe>
    da5a:	ldr	r3, [pc, #560]	; (dc8c <_dtoa_r+0x8a4>)
    da5c:	mov	r0, sl
    da5e:	mov	r1, fp
    da60:	ldrd	r2, r3, [r3, #32]
    da64:	bl	b20c <__aeabi_ddiv>
    da68:	strd	r0, r1, [sp, #72]	; 0x48
    da6c:	and.w	r6, r6, #15
    da70:	mov.w	sl, #3
    da74:	cbz	r6, da98 <_dtoa_r+0x6b0>
    da76:	ldr	r7, [pc, #532]	; (dc8c <_dtoa_r+0x8a4>)
    da78:	lsls	r1, r6, #31
    da7a:	bpl.n	da90 <_dtoa_r+0x6a8>
    da7c:	mov	r0, r4
    da7e:	mov	r1, r5
    da80:	ldrd	r2, r3, [r7]
    da84:	bl	afb8 <__aeabi_dmul>
    da88:	add.w	sl, sl, #1
    da8c:	mov	r4, r0
    da8e:	mov	r5, r1
    da90:	asrs	r6, r6, #1
    da92:	add.w	r7, r7, #8
    da96:	bne.n	da78 <_dtoa_r+0x690>
    da98:	mov	r2, r4
    da9a:	mov	r3, r5
    da9c:	ldrd	r0, r1, [sp, #72]	; 0x48
    daa0:	bl	b20c <__aeabi_ddiv>
    daa4:	mov	r6, r0
    daa6:	mov	r7, r1
    daa8:	ldr	r3, [sp, #52]	; 0x34
    daaa:	cbz	r3, dabe <_dtoa_r+0x6d6>
    daac:	movs	r2, #0
    daae:	ldr	r3, [pc, #480]	; (dc90 <_dtoa_r+0x8a8>)
    dab0:	mov	r0, r6
    dab2:	mov	r1, r7
    dab4:	bl	b49c <__aeabi_dcmplt>
    dab8:	cmp	r0, #0
    daba:	bne.w	e0f2 <_dtoa_r+0xd0a>
    dabe:	mov	r0, sl
    dac0:	bl	aeec <__aeabi_i2d>
    dac4:	mov	r2, r6
    dac6:	mov	r3, r7
    dac8:	bl	afb8 <__aeabi_dmul>
    dacc:	ldr	r3, [pc, #452]	; (dc94 <_dtoa_r+0x8ac>)
    dace:	movs	r2, #0
    dad0:	bl	ac54 <__adddf3>
    dad4:	ldr	r3, [sp, #32]
    dad6:	mov	r4, r0
    dad8:	sub.w	r5, r1, #54525952	; 0x3400000
    dadc:	cmp	r3, #0
    dade:	beq.w	de98 <_dtoa_r+0xab0>
    dae2:	ldr	r3, [sp, #16]
    dae4:	str	r3, [sp, #88]	; 0x58
    dae6:	ldr	r3, [sp, #32]
    dae8:	str	r3, [sp, #72]	; 0x48
    daea:	ldr	r3, [sp, #44]	; 0x2c
    daec:	cmp	r3, #0
    daee:	beq.w	e01a <_dtoa_r+0xc32>
    daf2:	ldr	r2, [sp, #72]	; 0x48
    daf4:	ldr	r3, [pc, #400]	; (dc88 <_dtoa_r+0x8a0>)
    daf6:	ldr	r1, [pc, #416]	; (dc98 <_dtoa_r+0x8b0>)
    daf8:	add.w	r3, r3, r2, lsl #3
    dafc:	ldrd	r2, r3, [r3, #-8]
    db00:	movs	r0, #0
    db02:	bl	b20c <__aeabi_ddiv>
    db06:	mov	r2, r4
    db08:	mov	r3, r5
    db0a:	bl	ac50 <__aeabi_dsub>
    db0e:	mov	sl, r0
    db10:	mov	fp, r1
    db12:	mov	r0, r6
    db14:	mov	r1, r7
    db16:	bl	b518 <__aeabi_d2iz>
    db1a:	mov	r4, r0
    db1c:	bl	aeec <__aeabi_i2d>
    db20:	mov	r2, r0
    db22:	mov	r3, r1
    db24:	mov	r0, r6
    db26:	mov	r1, r7
    db28:	bl	ac50 <__aeabi_dsub>
    db2c:	adds	r4, #48	; 0x30
    db2e:	ldr	r5, [sp, #36]	; 0x24
    db30:	uxtb	r4, r4
    db32:	mov	r6, r0
    db34:	mov	r7, r1
    db36:	strb	r4, [r5, #0]
    db38:	mov	r2, r0
    db3a:	mov	r3, r1
    db3c:	mov	r0, sl
    db3e:	mov	r1, fp
    db40:	adds	r5, #1
    db42:	bl	b4d8 <__aeabi_dcmpgt>
    db46:	cmp	r0, #0
    db48:	bne.n	dbec <_dtoa_r+0x804>
    db4a:	mov	r2, r6
    db4c:	mov	r3, r7
    db4e:	movs	r0, #0
    db50:	ldr	r1, [pc, #316]	; (dc90 <_dtoa_r+0x8a8>)
    db52:	bl	ac50 <__aeabi_dsub>
    db56:	mov	r2, r0
    db58:	mov	r3, r1
    db5a:	mov	r0, sl
    db5c:	mov	r1, fp
    db5e:	bl	b4d8 <__aeabi_dcmpgt>
    db62:	cmp	r0, #0
    db64:	bne.w	e178 <_dtoa_r+0xd90>
    db68:	ldr	r2, [sp, #72]	; 0x48
    db6a:	cmp	r2, #1
    db6c:	ble.w	df5e <_dtoa_r+0xb76>
    db70:	ldr	r3, [sp, #72]	; 0x48
    db72:	ldr	r2, [sp, #36]	; 0x24
    db74:	str.w	r8, [sp, #72]	; 0x48
    db78:	add	r3, r2
    db7a:	mov	r8, r3
    db7c:	b.n	db9a <_dtoa_r+0x7b2>
    db7e:	movs	r0, #0
    db80:	ldr	r1, [pc, #268]	; (dc90 <_dtoa_r+0x8a8>)
    db82:	bl	ac50 <__aeabi_dsub>
    db86:	mov	r2, sl
    db88:	mov	r3, fp
    db8a:	bl	b49c <__aeabi_dcmplt>
    db8e:	cmp	r0, #0
    db90:	bne.w	e178 <_dtoa_r+0xd90>
    db94:	cmp	r5, r8
    db96:	beq.w	df5a <_dtoa_r+0xb72>
    db9a:	mov	r0, sl
    db9c:	mov	r1, fp
    db9e:	movs	r2, #0
    dba0:	ldr	r3, [pc, #248]	; (dc9c <_dtoa_r+0x8b4>)
    dba2:	bl	afb8 <__aeabi_dmul>
    dba6:	movs	r2, #0
    dba8:	ldr	r3, [pc, #240]	; (dc9c <_dtoa_r+0x8b4>)
    dbaa:	mov	sl, r0
    dbac:	mov	fp, r1
    dbae:	mov	r0, r6
    dbb0:	mov	r1, r7
    dbb2:	bl	afb8 <__aeabi_dmul>
    dbb6:	mov	r7, r1
    dbb8:	mov	r6, r0
    dbba:	bl	b518 <__aeabi_d2iz>
    dbbe:	mov	r4, r0
    dbc0:	bl	aeec <__aeabi_i2d>
    dbc4:	mov	r2, r0
    dbc6:	mov	r3, r1
    dbc8:	mov	r0, r6
    dbca:	mov	r1, r7
    dbcc:	bl	ac50 <__aeabi_dsub>
    dbd0:	adds	r4, #48	; 0x30
    dbd2:	uxtb	r4, r4
    dbd4:	mov	r2, sl
    dbd6:	mov	r3, fp
    dbd8:	strb.w	r4, [r5], #1
    dbdc:	mov	r6, r0
    dbde:	mov	r7, r1
    dbe0:	bl	b49c <__aeabi_dcmplt>
    dbe4:	mov	r2, r6
    dbe6:	mov	r3, r7
    dbe8:	cmp	r0, #0
    dbea:	beq.n	db7e <_dtoa_r+0x796>
    dbec:	ldr	r3, [sp, #88]	; 0x58
    dbee:	str	r3, [sp, #16]
    dbf0:	b.n	d77e <_dtoa_r+0x396>
    dbf2:	movs	r3, #0
    dbf4:	str	r3, [sp, #44]	; 0x2c
    dbf6:	ldr	r3, [sp, #20]
    dbf8:	cmp	r3, #0
    dbfa:	ble.w	defe <_dtoa_r+0xb16>
    dbfe:	mov	r5, r3
    dc00:	mov	r4, r3
    dc02:	str	r3, [sp, #56]	; 0x38
    dc04:	str	r3, [sp, #32]
    dc06:	b.n	d9fe <_dtoa_r+0x616>
    dc08:	movs	r3, #1
    dc0a:	str	r3, [sp, #44]	; 0x2c
    dc0c:	b.n	dbf6 <_dtoa_r+0x80e>
    dc0e:	str	r4, [sp, #40]	; 0x28
    dc10:	ldr	r2, [sp, #24]
    dc12:	ldr	r1, [sp, #40]	; 0x28
    dc14:	mov	r0, r9
    dc16:	bl	ce9c <__pow5mult>
    dc1a:	mov	r4, r0
    dc1c:	b.n	d83c <_dtoa_r+0x454>
    dc1e:	ldr	r3, [sp, #32]
    dc20:	cmp	r3, #0
    dc22:	bgt.w	d622 <_dtoa_r+0x23a>
    dc26:	bne.w	dec8 <_dtoa_r+0xae0>
    dc2a:	movs	r2, #0
    dc2c:	ldr	r3, [pc, #112]	; (dca0 <_dtoa_r+0x8b8>)
    dc2e:	ldrd	r0, r1, [sp]
    dc32:	bl	afb8 <__aeabi_dmul>
    dc36:	mov	r3, fp
    dc38:	mov	r2, sl
    dc3a:	bl	b4c4 <__aeabi_dcmpge>
    dc3e:	ldr	r3, [sp, #32]
    dc40:	str	r3, [sp, #24]
    dc42:	mov	r6, r3
    dc44:	cmp	r0, #0
    dc46:	beq.w	de1e <_dtoa_r+0xa36>
    dc4a:	ldr	r3, [sp, #20]
    dc4c:	ldr	r5, [sp, #36]	; 0x24
    dc4e:	mvns	r3, r3
    dc50:	str	r3, [sp, #16]
    dc52:	ldr	r1, [sp, #24]
    dc54:	mov	r0, r9
    dc56:	bl	cc28 <_Bfree>
    dc5a:	cmp	r6, #0
    dc5c:	beq.w	d77e <_dtoa_r+0x396>
    dc60:	b.n	d976 <_dtoa_r+0x58e>
    dc62:	ldr	r2, [sp, #60]	; 0x3c
    dc64:	cmp	r2, #0
    dc66:	beq.w	e0da <_dtoa_r+0xcf2>
    dc6a:	addw	r3, r3, #1075	; 0x433
    dc6e:	ldr	r7, [sp, #24]
    dc70:	ldr	r5, [sp, #28]
    dc72:	b.n	d7ce <_dtoa_r+0x3e6>
    dc74:	movs	r0, #28
    dc76:	b.n	d88e <_dtoa_r+0x4a6>
    dc78:	ldr	r3, [sp, #0]
    dc7a:	cmp	r3, #1
    dc7c:	ble.w	e180 <_dtoa_r+0xd98>
    dc80:	ldr	r7, [sp, #48]	; 0x30
    dc82:	movs	r0, #1
    dc84:	b.n	d876 <_dtoa_r+0x48e>
    dc86:	nop
    dc88:	.word	0x000101d0
    dc8c:	.word	0x00010298
    dc90:	.word	0x3ff00000
    dc94:	.word	0x401c0000
    dc98:	.word	0x3fe00000
    dc9c:	.word	0x40240000
    dca0:	.word	0x40140000
    dca4:	mov	r1, r6
    dca6:	movs	r3, #0
    dca8:	movs	r2, #10
    dcaa:	mov	r0, r9
    dcac:	bl	cc3c <__multadd>
    dcb0:	ldr	r3, [sp, #56]	; 0x38
    dcb2:	cmp	r3, #0
    dcb4:	mov	r6, r0
    dcb6:	ble.w	e1d4 <_dtoa_r+0xdec>
    dcba:	str	r3, [sp, #32]
    dcbc:	cmp	r5, #0
    dcbe:	ble.n	dccc <_dtoa_r+0x8e4>
    dcc0:	mov	r1, r6
    dcc2:	mov	r2, r5
    dcc4:	mov	r0, r9
    dcc6:	bl	cf3c <__lshift>
    dcca:	mov	r6, r0
    dccc:	cmp	r7, #0
    dcce:	bne.w	dfca <_dtoa_r+0xbe2>
    dcd2:	mov	r8, r6
    dcd4:	ldr	r3, [sp, #32]
    dcd6:	ldr	r2, [sp, #36]	; 0x24
    dcd8:	subs	r3, #1
    dcda:	adds	r3, r2, r3
    dcdc:	str	r3, [sp, #32]
    dcde:	and.w	r3, sl, #1
    dce2:	str	r3, [sp, #40]	; 0x28
    dce4:	mov	r7, r2
    dce6:	ldr.w	fp, [sp, #24]
    dcea:	mov	r0, r4
    dcec:	mov	r1, fp
    dcee:	bl	d2c0 <quorem>
    dcf2:	mov	r1, r6
    dcf4:	mov	r5, r0
    dcf6:	mov	r0, r4
    dcf8:	bl	cfec <__mcmp>
    dcfc:	mov	r2, r8
    dcfe:	mov	r1, fp
    dd00:	mov	sl, r0
    dd02:	mov	r0, r9
    dd04:	bl	d030 <__mdiff>
    dd08:	ldr	r2, [r0, #12]
    dd0a:	mov	fp, r0
    dd0c:	add.w	r3, r5, #48	; 0x30
    dd10:	cmp	r2, #0
    dd12:	bne.n	dda8 <_dtoa_r+0x9c0>
    dd14:	mov	r1, r0
    dd16:	mov	r0, r4
    dd18:	str	r3, [sp, #28]
    dd1a:	bl	cfec <__mcmp>
    dd1e:	mov	r1, fp
    dd20:	str	r0, [sp, #20]
    dd22:	mov	r0, r9
    dd24:	bl	cc28 <_Bfree>
    dd28:	ldr	r2, [sp, #20]
    dd2a:	ldr	r3, [sp, #28]
    dd2c:	cbnz	r2, dd3a <_dtoa_r+0x952>
    dd2e:	ldr	r1, [sp, #0]
    dd30:	cbnz	r1, dd3a <_dtoa_r+0x952>
    dd32:	ldr	r1, [sp, #40]	; 0x28
    dd34:	cmp	r1, #0
    dd36:	beq.w	e1a4 <_dtoa_r+0xdbc>
    dd3a:	cmp.w	sl, #0
    dd3e:	blt.w	df08 <_dtoa_r+0xb20>
    dd42:	bne.n	dd50 <_dtoa_r+0x968>
    dd44:	ldr	r1, [sp, #0]
    dd46:	cbnz	r1, dd50 <_dtoa_r+0x968>
    dd48:	ldr	r1, [sp, #40]	; 0x28
    dd4a:	cmp	r1, #0
    dd4c:	beq.w	df08 <_dtoa_r+0xb20>
    dd50:	cmp	r2, #0
    dd52:	bgt.w	dff2 <_dtoa_r+0xc0a>
    dd56:	ldr	r2, [sp, #32]
    dd58:	strb	r3, [r7, #0]
    dd5a:	add.w	sl, r7, #1
    dd5e:	cmp	r7, r2
    dd60:	mov	r5, sl
    dd62:	beq.w	e00a <_dtoa_r+0xc22>
    dd66:	mov	r1, r4
    dd68:	movs	r3, #0
    dd6a:	movs	r2, #10
    dd6c:	mov	r0, r9
    dd6e:	bl	cc3c <__multadd>
    dd72:	cmp	r6, r8
    dd74:	mov	r4, r0
    dd76:	mov	r1, r6
    dd78:	mov.w	r3, #0
    dd7c:	mov.w	r2, #10
    dd80:	mov	r0, r9
    dd82:	beq.n	dd9c <_dtoa_r+0x9b4>
    dd84:	bl	cc3c <__multadd>
    dd88:	mov	r1, r8
    dd8a:	mov	r6, r0
    dd8c:	movs	r3, #0
    dd8e:	movs	r2, #10
    dd90:	mov	r0, r9
    dd92:	bl	cc3c <__multadd>
    dd96:	mov	r7, sl
    dd98:	mov	r8, r0
    dd9a:	b.n	dce6 <_dtoa_r+0x8fe>
    dd9c:	bl	cc3c <__multadd>
    dda0:	mov	r7, sl
    dda2:	mov	r6, r0
    dda4:	mov	r8, r0
    dda6:	b.n	dce6 <_dtoa_r+0x8fe>
    dda8:	mov	r1, r0
    ddaa:	mov	r0, r9
    ddac:	str	r3, [sp, #20]
    ddae:	bl	cc28 <_Bfree>
    ddb2:	movs	r2, #1
    ddb4:	ldr	r3, [sp, #20]
    ddb6:	b.n	dd3a <_dtoa_r+0x952>
    ddb8:	ldr	r1, [sp, #24]
    ddba:	mov	r0, r4
    ddbc:	bl	cfec <__mcmp>
    ddc0:	cmp	r0, #0
    ddc2:	bge.w	d8c4 <_dtoa_r+0x4dc>
    ddc6:	mov	r1, r4
    ddc8:	ldr	r4, [sp, #16]
    ddca:	movs	r3, #0
    ddcc:	subs	r4, #1
    ddce:	movs	r2, #10
    ddd0:	mov	r0, r9
    ddd2:	str	r4, [sp, #16]
    ddd4:	bl	cc3c <__multadd>
    ddd8:	ldr	r3, [sp, #44]	; 0x2c
    ddda:	mov	r4, r0
    dddc:	cmp	r3, #0
    ddde:	bne.w	dca4 <_dtoa_r+0x8bc>
    dde2:	ldr	r3, [sp, #56]	; 0x38
    dde4:	cmp	r3, #0
    dde6:	ble.w	e1c4 <_dtoa_r+0xddc>
    ddea:	str	r3, [sp, #32]
    ddec:	b.n	d8d4 <_dtoa_r+0x4ec>
    ddee:	ldr	r4, [sp, #40]	; 0x28
    ddf0:	b.n	d83c <_dtoa_r+0x454>
    ddf2:	ldr	r3, [sp, #0]
    ddf4:	cmp	r3, #2
    ddf6:	ble.w	d8cc <_dtoa_r+0x4e4>
    ddfa:	ldr	r3, [sp, #32]
    ddfc:	cmp	r3, #0
    ddfe:	bne.w	e13c <_dtoa_r+0xd54>
    de02:	ldr	r1, [sp, #24]
    de04:	movs	r2, #5
    de06:	mov	r0, r9
    de08:	bl	cc3c <__multadd>
    de0c:	mov	r1, r0
    de0e:	str	r0, [sp, #24]
    de10:	mov	r0, r4
    de12:	bl	cfec <__mcmp>
    de16:	cmp	r0, #0
    de18:	str	r4, [sp, #40]	; 0x28
    de1a:	ble.w	dc4a <_dtoa_r+0x862>
    de1e:	ldr	r2, [sp, #16]
    de20:	ldr	r1, [sp, #36]	; 0x24
    de22:	movs	r3, #49	; 0x31
    de24:	adds	r2, #1
    de26:	str	r2, [sp, #16]
    de28:	strb	r3, [r1, #0]
    de2a:	adds	r5, r1, #1
    de2c:	b.n	dc52 <_dtoa_r+0x86a>
    de2e:	ldr	r2, [sp, #16]
    de30:	adds	r2, #1
    de32:	str	r2, [sp, #16]
    de34:	ldr	r2, [sp, #36]	; 0x24
    de36:	movs	r3, #49	; 0x31
    de38:	strb	r3, [r2, #0]
    de3a:	b.n	d956 <_dtoa_r+0x56e>
    de3c:	movs	r3, #1
    de3e:	str	r3, [sp, #44]	; 0x2c
    de40:	b.n	d9e8 <_dtoa_r+0x600>
    de42:	ldr.w	r9, [sp, #20]
    de46:	b.n	d77e <_dtoa_r+0x396>
    de48:	cmp.w	sl, #0
    de4c:	bne.w	d862 <_dtoa_r+0x47a>
    de50:	ubfx	r3, fp, #0, #20
    de54:	cmp	r3, #0
    de56:	bne.w	e0d6 <_dtoa_r+0xcee>
    de5a:	bic.w	r7, fp, #2147483648	; 0x80000000
    de5e:	lsrs	r7, r7, #20
    de60:	lsls	r7, r7, #20
    de62:	cbz	r7, de70 <_dtoa_r+0xa88>
    de64:	ldr	r3, [sp, #28]
    de66:	adds	r3, #1
    de68:	str	r3, [sp, #28]
    de6a:	add.w	r8, r8, #1
    de6e:	movs	r7, #1
    de70:	ldr	r3, [sp, #48]	; 0x30
    de72:	movs	r0, #1
    de74:	cmp	r3, #0
    de76:	beq.w	d876 <_dtoa_r+0x48e>
    de7a:	b.n	d864 <_dtoa_r+0x47c>
    de7c:	mov	r0, sl
    de7e:	bl	aeec <__aeabi_i2d>
    de82:	mov	r2, r6
    de84:	mov	r3, r7
    de86:	bl	afb8 <__aeabi_dmul>
    de8a:	movs	r2, #0
    de8c:	ldr	r3, [pc, #764]	; (e18c <_dtoa_r+0xda4>)
    de8e:	bl	ac54 <__adddf3>
    de92:	mov	r4, r0
    de94:	sub.w	r5, r1, #54525952	; 0x3400000
    de98:	mov	r0, r6
    de9a:	mov	r1, r7
    de9c:	movs	r2, #0
    de9e:	ldr	r3, [pc, #752]	; (e190 <_dtoa_r+0xda8>)
    dea0:	bl	ac50 <__aeabi_dsub>
    dea4:	mov	r2, r4
    dea6:	mov	r3, r5
    dea8:	mov	r6, r0
    deaa:	mov	r7, r1
    deac:	bl	b4d8 <__aeabi_dcmpgt>
    deb0:	cmp	r0, #0
    deb2:	bne.w	e012 <_dtoa_r+0xc2a>
    deb6:	mov	r2, r4
    deb8:	add.w	r3, r5, #2147483648	; 0x80000000
    debc:	mov	r0, r6
    debe:	mov	r1, r7
    dec0:	bl	b49c <__aeabi_dcmplt>
    dec4:	cmp	r0, #0
    dec6:	beq.n	df5e <_dtoa_r+0xb76>
    dec8:	movs	r3, #0
    deca:	str	r3, [sp, #24]
    decc:	mov	r6, r3
    dece:	b.n	dc4a <_dtoa_r+0x862>
    ded0:	ldr	r0, [sp, #36]	; 0x24
    ded2:	b.w	d45a <_dtoa_r+0x72>
    ded6:	ldr	r3, [sp, #24]
    ded8:	ldr	r2, [sp, #48]	; 0x30
    deda:	str	r7, [sp, #24]
    dedc:	subs	r3, r7, r3
    dede:	add	r2, r3
    dee0:	str	r2, [sp, #48]	; 0x30
    dee2:	movs	r7, #0
    dee4:	b.n	d7c2 <_dtoa_r+0x3da>
    dee6:	vldr	d7, [sp, #64]	; 0x40
    deea:	mov.w	sl, #2
    deee:	vstr	d7, [sp, #72]	; 0x48
    def2:	b.n	da74 <_dtoa_r+0x68c>
    def4:	mov	r4, r3
    def6:	movs	r1, #0
    def8:	str.w	r1, [r9, #68]	; 0x44
    defc:	b.n	da20 <_dtoa_r+0x638>
    defe:	movs	r4, #1
    df00:	str	r4, [sp, #56]	; 0x38
    df02:	str	r4, [sp, #32]
    df04:	str	r4, [sp, #20]
    df06:	b.n	def6 <_dtoa_r+0xb0e>
    df08:	cmp	r2, #0
    df0a:	mov	sl, r3
    df0c:	ble.n	df32 <_dtoa_r+0xb4a>
    df0e:	mov	r1, r4
    df10:	movs	r2, #1
    df12:	mov	r0, r9
    df14:	bl	cf3c <__lshift>
    df18:	ldr	r1, [sp, #24]
    df1a:	mov	r4, r0
    df1c:	bl	cfec <__mcmp>
    df20:	cmp	r0, #0
    df22:	ble.w	e1b6 <_dtoa_r+0xdce>
    df26:	cmp.w	sl, #57	; 0x39
    df2a:	beq.w	e140 <_dtoa_r+0xd58>
    df2e:	add.w	sl, r5, #49	; 0x31
    df32:	mov	fp, r6
    df34:	strb.w	sl, [r7]
    df38:	adds	r5, r7, #1
    df3a:	mov	r6, r8
    df3c:	str	r4, [sp, #40]	; 0x28
    df3e:	b.n	d956 <_dtoa_r+0x56e>
    df40:	bne.n	df4c <_dtoa_r+0xb64>
    df42:	tst.w	sl, #1
    df46:	beq.n	df4c <_dtoa_r+0xb64>
    df48:	b.n	d936 <_dtoa_r+0x54e>
    df4a:	mov	r5, r2
    df4c:	ldrb.w	r3, [r5, #-1]
    df50:	cmp	r3, #48	; 0x30
    df52:	add.w	r2, r5, #4294967295
    df56:	beq.n	df4a <_dtoa_r+0xb62>
    df58:	b.n	d956 <_dtoa_r+0x56e>
    df5a:	ldr.w	r8, [sp, #72]	; 0x48
    df5e:	ldrd	sl, fp, [sp, #64]	; 0x40
    df62:	b.w	d5fc <_dtoa_r+0x214>
    df66:	ldr	r1, [sp, #36]	; 0x24
    df68:	movs	r2, #48	; 0x30
    df6a:	strb	r2, [r1, #0]
    df6c:	ldr	r2, [sp, #16]
    df6e:	ldrb.w	r4, [r5, #-1]
    df72:	adds	r2, #1
    df74:	str	r2, [sp, #16]
    df76:	b.n	d77a <_dtoa_r+0x392>
    df78:	ldr	r3, [sp, #16]
    df7a:	negs	r4, r3
    df7c:	cmp	r4, #0
    df7e:	beq.w	e0e8 <_dtoa_r+0xd00>
    df82:	ldr	r3, [pc, #528]	; (e194 <_dtoa_r+0xdac>)
    df84:	and.w	r2, r4, #15
    df88:	add.w	r3, r3, r2, lsl #3
    df8c:	ldrd	r2, r3, [r3]
    df90:	ldrd	r0, r1, [sp, #64]	; 0x40
    df94:	bl	afb8 <__aeabi_dmul>
    df98:	asrs	r4, r4, #4
    df9a:	mov	r6, r0
    df9c:	mov	r7, r1
    df9e:	beq.w	e1ce <_dtoa_r+0xde6>
    dfa2:	ldr	r5, [pc, #500]	; (e198 <_dtoa_r+0xdb0>)
    dfa4:	mov.w	sl, #2
    dfa8:	lsls	r2, r4, #31
    dfaa:	bpl.n	dfc0 <_dtoa_r+0xbd8>
    dfac:	mov	r0, r6
    dfae:	mov	r1, r7
    dfb0:	ldrd	r2, r3, [r5]
    dfb4:	bl	afb8 <__aeabi_dmul>
    dfb8:	add.w	sl, sl, #1
    dfbc:	mov	r6, r0
    dfbe:	mov	r7, r1
    dfc0:	asrs	r4, r4, #1
    dfc2:	add.w	r5, r5, #8
    dfc6:	bne.n	dfa8 <_dtoa_r+0xbc0>
    dfc8:	b.n	daa8 <_dtoa_r+0x6c0>
    dfca:	ldr	r1, [r6, #4]
    dfcc:	mov	r0, r9
    dfce:	bl	cbdc <_Balloc>
    dfd2:	ldr	r3, [r6, #16]
    dfd4:	adds	r2, r3, #2
    dfd6:	mov	r5, r0
    dfd8:	lsls	r2, r2, #2
    dfda:	add.w	r1, r6, #12
    dfde:	adds	r0, #12
    dfe0:	bl	9280 <memcpy>
    dfe4:	mov	r1, r5
    dfe6:	movs	r2, #1
    dfe8:	mov	r0, r9
    dfea:	bl	cf3c <__lshift>
    dfee:	mov	r8, r0
    dff0:	b.n	dcd4 <_dtoa_r+0x8ec>
    dff2:	cmp	r3, #57	; 0x39
    dff4:	beq.w	e140 <_dtoa_r+0xd58>
    dff8:	add.w	sl, r3, #1
    dffc:	mov	fp, r6
    dffe:	strb.w	sl, [r7]
    e002:	adds	r5, r7, #1
    e004:	mov	r6, r8
    e006:	str	r4, [sp, #40]	; 0x28
    e008:	b.n	d956 <_dtoa_r+0x56e>
    e00a:	mov	fp, r6
    e00c:	mov	sl, r3
    e00e:	mov	r6, r8
    e010:	b.n	d91e <_dtoa_r+0x536>
    e012:	movs	r3, #0
    e014:	str	r3, [sp, #24]
    e016:	mov	r6, r3
    e018:	b.n	de1e <_dtoa_r+0xa36>
    e01a:	ldr	r3, [sp, #72]	; 0x48
    e01c:	ldr	r1, [pc, #372]	; (e194 <_dtoa_r+0xdac>)
    e01e:	subs	r2, r3, #1
    e020:	add.w	r1, r1, r2, lsl #3
    e024:	mov	r3, r5
    e026:	str	r2, [sp, #92]	; 0x5c
    e028:	ldrd	r0, r1, [r1]
    e02c:	mov	r2, r4
    e02e:	bl	afb8 <__aeabi_dmul>
    e032:	strd	r0, r1, [sp, #80]	; 0x50
    e036:	mov	r1, r7
    e038:	mov	r0, r6
    e03a:	bl	b518 <__aeabi_d2iz>
    e03e:	mov	r4, r0
    e040:	bl	aeec <__aeabi_i2d>
    e044:	mov	r3, r1
    e046:	mov	r2, r0
    e048:	mov	r1, r7
    e04a:	mov	r0, r6
    e04c:	bl	ac50 <__aeabi_dsub>
    e050:	ldr	r3, [sp, #72]	; 0x48
    e052:	mov	r7, r1
    e054:	ldr	r1, [sp, #36]	; 0x24
    e056:	adds	r4, #48	; 0x30
    e058:	cmp	r3, #1
    e05a:	mov	r6, r0
    e05c:	strb	r4, [r1, #0]
    e05e:	add.w	r5, r1, #1
    e062:	beq.n	e0a6 <_dtoa_r+0xcbe>
    e064:	ldr	r3, [sp, #72]	; 0x48
    e066:	ldr	r2, [sp, #36]	; 0x24
    e068:	add	r3, r2
    e06a:	mov	sl, r3
    e06c:	mov	fp, r5
    e06e:	movs	r2, #0
    e070:	ldr	r3, [pc, #296]	; (e19c <_dtoa_r+0xdb4>)
    e072:	mov	r0, r6
    e074:	mov	r1, r7
    e076:	bl	afb8 <__aeabi_dmul>
    e07a:	mov	r7, r1
    e07c:	mov	r6, r0
    e07e:	bl	b518 <__aeabi_d2iz>
    e082:	mov	r4, r0
    e084:	bl	aeec <__aeabi_i2d>
    e088:	adds	r4, #48	; 0x30
    e08a:	mov	r2, r0
    e08c:	mov	r3, r1
    e08e:	mov	r0, r6
    e090:	mov	r1, r7
    e092:	bl	ac50 <__aeabi_dsub>
    e096:	strb.w	r4, [fp], #1
    e09a:	cmp	sl, fp
    e09c:	mov	r6, r0
    e09e:	mov	r7, r1
    e0a0:	bne.n	e06e <_dtoa_r+0xc86>
    e0a2:	ldr	r3, [sp, #92]	; 0x5c
    e0a4:	add	r5, r3
    e0a6:	movs	r2, #0
    e0a8:	ldr	r3, [pc, #244]	; (e1a0 <_dtoa_r+0xdb8>)
    e0aa:	ldrd	r0, r1, [sp, #80]	; 0x50
    e0ae:	bl	ac54 <__adddf3>
    e0b2:	mov	r2, r6
    e0b4:	mov	r3, r7
    e0b6:	bl	b49c <__aeabi_dcmplt>
    e0ba:	cmp	r0, #0
    e0bc:	beq.n	e150 <_dtoa_r+0xd68>
    e0be:	ldr	r3, [sp, #88]	; 0x58
    e0c0:	str	r3, [sp, #16]
    e0c2:	ldrb.w	r4, [r5, #-1]
    e0c6:	b.w	d762 <_dtoa_r+0x37a>
    e0ca:	ldr	r3, [sp, #28]
    e0cc:	ldr	r2, [sp, #32]
    e0ce:	subs	r5, r3, r2
    e0d0:	movs	r3, #0
    e0d2:	b.w	d7ce <_dtoa_r+0x3e6>
    e0d6:	movs	r7, #0
    e0d8:	b.n	de70 <_dtoa_r+0xa88>
    e0da:	ldr	r3, [sp, #96]	; 0x60
    e0dc:	ldr	r7, [sp, #24]
    e0de:	ldr	r5, [sp, #28]
    e0e0:	rsb	r3, r3, #54	; 0x36
    e0e4:	b.w	d7ce <_dtoa_r+0x3e6>
    e0e8:	ldrd	r6, r7, [sp, #64]	; 0x40
    e0ec:	mov.w	sl, #2
    e0f0:	b.n	daa8 <_dtoa_r+0x6c0>
    e0f2:	ldr	r3, [sp, #32]
    e0f4:	cmp	r3, #0
    e0f6:	beq.w	de7c <_dtoa_r+0xa94>
    e0fa:	ldr	r3, [sp, #56]	; 0x38
    e0fc:	cmp	r3, #0
    e0fe:	ble.w	df5e <_dtoa_r+0xb76>
    e102:	movs	r2, #0
    e104:	ldr	r3, [pc, #148]	; (e19c <_dtoa_r+0xdb4>)
    e106:	mov	r0, r6
    e108:	mov	r1, r7
    e10a:	bl	afb8 <__aeabi_dmul>
    e10e:	mov	r6, r0
    e110:	mov	r7, r1
    e112:	add.w	r0, sl, #1
    e116:	bl	aeec <__aeabi_i2d>
    e11a:	mov	r2, r6
    e11c:	mov	r3, r7
    e11e:	bl	afb8 <__aeabi_dmul>
    e122:	movs	r2, #0
    e124:	ldr	r3, [pc, #100]	; (e18c <_dtoa_r+0xda4>)
    e126:	bl	ac54 <__adddf3>
    e12a:	ldr	r2, [sp, #16]
    e12c:	ldr	r3, [sp, #56]	; 0x38
    e12e:	str	r3, [sp, #72]	; 0x48
    e130:	subs	r2, #1
    e132:	mov	r4, r0
    e134:	sub.w	r5, r1, #54525952	; 0x3400000
    e138:	str	r2, [sp, #88]	; 0x58
    e13a:	b.n	daea <_dtoa_r+0x702>
    e13c:	str	r4, [sp, #40]	; 0x28
    e13e:	b.n	dc4a <_dtoa_r+0x862>
    e140:	movs	r2, #57	; 0x39
    e142:	mov	fp, r6
    e144:	str	r4, [sp, #40]	; 0x28
    e146:	mov	r6, r8
    e148:	strb	r2, [r7, #0]
    e14a:	adds	r5, r7, #1
    e14c:	b.w	d93a <_dtoa_r+0x552>
    e150:	ldrd	r2, r3, [sp, #80]	; 0x50
    e154:	movs	r0, #0
    e156:	ldr	r1, [pc, #72]	; (e1a0 <_dtoa_r+0xdb8>)
    e158:	bl	ac50 <__aeabi_dsub>
    e15c:	mov	r2, r6
    e15e:	mov	r3, r7
    e160:	bl	b4d8 <__aeabi_dcmpgt>
    e164:	cbnz	r0, e16a <_dtoa_r+0xd82>
    e166:	b.n	df5e <_dtoa_r+0xb76>
    e168:	mov	r5, r2
    e16a:	ldrb.w	r3, [r5, #-1]
    e16e:	cmp	r3, #48	; 0x30
    e170:	add.w	r2, r5, #4294967295
    e174:	beq.n	e168 <_dtoa_r+0xd80>
    e176:	b.n	dbec <_dtoa_r+0x804>
    e178:	ldr	r3, [sp, #88]	; 0x58
    e17a:	str	r3, [sp, #16]
    e17c:	b.w	d762 <_dtoa_r+0x37a>
    e180:	cmp.w	sl, #0
    e184:	bne.w	dc80 <_dtoa_r+0x898>
    e188:	b.n	de50 <_dtoa_r+0xa68>
    e18a:	nop
    e18c:	.word	0x401c0000
    e190:	.word	0x40140000
    e194:	.word	0x000101d0
    e198:	.word	0x00010298
    e19c:	.word	0x40240000
    e1a0:	.word	0x3fe00000
    e1a4:	cmp	r3, #57	; 0x39
    e1a6:	mov	fp, sl
    e1a8:	mov	sl, r3
    e1aa:	beq.n	e140 <_dtoa_r+0xd58>
    e1ac:	cmp.w	fp, #0
    e1b0:	bgt.w	df2e <_dtoa_r+0xb46>
    e1b4:	b.n	df32 <_dtoa_r+0xb4a>
    e1b6:	bne.w	df32 <_dtoa_r+0xb4a>
    e1ba:	tst.w	sl, #1
    e1be:	beq.w	df32 <_dtoa_r+0xb4a>
    e1c2:	b.n	df26 <_dtoa_r+0xb3e>
    e1c4:	ldr	r3, [sp, #0]
    e1c6:	cmp	r3, #2
    e1c8:	bgt.n	e216 <_dtoa_r+0xe2e>
    e1ca:	ldr	r3, [sp, #56]	; 0x38
    e1cc:	b.n	ddea <_dtoa_r+0xa02>
    e1ce:	mov.w	sl, #2
    e1d2:	b.n	daa8 <_dtoa_r+0x6c0>
    e1d4:	ldr	r3, [sp, #0]
    e1d6:	cmp	r3, #2
    e1d8:	bgt.n	e216 <_dtoa_r+0xe2e>
    e1da:	ldr	r3, [sp, #56]	; 0x38
    e1dc:	b.n	dcba <_dtoa_r+0x8d2>
    e1de:	movs	r4, #0
    e1e0:	str.w	r4, [r9, #68]	; 0x44
    e1e4:	mov	r1, r4
    e1e6:	mov	r0, r9
    e1e8:	bl	cbdc <_Balloc>
    e1ec:	mov.w	r3, #4294967295
    e1f0:	str	r3, [sp, #32]
    e1f2:	str	r3, [sp, #56]	; 0x38
    e1f4:	movs	r3, #1
    e1f6:	str	r0, [sp, #36]	; 0x24
    e1f8:	str	r4, [sp, #20]
    e1fa:	str.w	r0, [r9, #64]	; 0x40
    e1fe:	str	r3, [sp, #44]	; 0x2c
    e200:	b.w	d5fc <_dtoa_r+0x214>
    e204:	beq.w	d898 <_dtoa_r+0x4b0>
    e208:	rsb	r0, r0, #60	; 0x3c
    e20c:	b.w	d88e <_dtoa_r+0x4a6>
    e210:	movs	r6, #1
    e212:	b.w	d58e <_dtoa_r+0x1a6>
    e216:	ldr	r3, [sp, #56]	; 0x38
    e218:	str	r3, [sp, #32]
    e21a:	b.n	ddfa <_dtoa_r+0xa12>
    e21c:			; <UNDEFINED> instruction: 0xffffffff

0000e220 <_svfprintf_r>:
    e220:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e224:	sub	sp, #260	; 0x104
    e226:	mov	r4, r1
    e228:	str	r1, [sp, #20]
    e22a:	mov	r5, r2
    e22c:	str	r3, [sp, #40]	; 0x28
    e22e:	str	r0, [sp, #24]
    e230:	bl	cbc0 <_localeconv_r>
    e234:	ldr	r3, [r0, #0]
    e236:	str	r3, [sp, #76]	; 0x4c
    e238:	mov	r0, r3
    e23a:	bl	c640 <strlen>
    e23e:	ldrh	r3, [r4, #12]
    e240:	str	r0, [sp, #72]	; 0x48
    e242:	lsls	r6, r3, #24
    e244:	bpl.n	e24e <_svfprintf_r+0x2e>
    e246:	ldr	r3, [r4, #16]
    e248:	cmp	r3, #0
    e24a:	beq.w	f4b0 <_svfprintf_r+0x1290>
    e24e:	vldr	d7, [pc, #664]	; e4e8 <_svfprintf_r+0x2c8>
    e252:	movs	r3, #0
    e254:	vstr	d7, [sp, #64]	; 0x40
    e258:	str	r3, [sp, #56]	; 0x38
    e25a:	str	r3, [sp, #148]	; 0x94
    e25c:	str	r3, [sp, #144]	; 0x90
    e25e:	str	r3, [sp, #84]	; 0x54
    e260:	str	r3, [sp, #28]
    e262:	ldr.w	sl, [pc, #656]	; e4f4 <_svfprintf_r+0x2d4>
    e266:	add	r3, sp, #192	; 0xc0
    e268:	str	r3, [sp, #140]	; 0x8c
    e26a:	mov	r9, r3
    e26c:	mov	r8, r5
    e26e:	ldrb.w	r3, [r8]
    e272:	mov	r4, r8
    e274:	cbz	r3, e2b2 <_svfprintf_r+0x92>
    e276:	cmp	r3, #37	; 0x25
    e278:	bne.n	e280 <_svfprintf_r+0x60>
    e27a:	b.n	e2b2 <_svfprintf_r+0x92>
    e27c:	cmp	r3, #37	; 0x25
    e27e:	beq.n	e288 <_svfprintf_r+0x68>
    e280:	ldrb.w	r3, [r4, #1]!
    e284:	cmp	r3, #0
    e286:	bne.n	e27c <_svfprintf_r+0x5c>
    e288:	rsb	r5, r8, r4
    e28c:	cbz	r5, e2b2 <_svfprintf_r+0x92>
    e28e:	ldr	r3, [sp, #144]	; 0x90
    e290:	ldr	r2, [sp, #148]	; 0x94
    e292:	str.w	r8, [r9]
    e296:	adds	r3, #1
    e298:	add	r2, r5
    e29a:	cmp	r3, #7
    e29c:	str.w	r5, [r9, #4]
    e2a0:	str	r2, [sp, #148]	; 0x94
    e2a2:	str	r3, [sp, #144]	; 0x90
    e2a4:	bgt.w	e3f4 <_svfprintf_r+0x1d4>
    e2a8:	add.w	r9, r9, #8
    e2ac:	ldr	r3, [sp, #28]
    e2ae:	add	r3, r5
    e2b0:	str	r3, [sp, #28]
    e2b2:	ldrb	r3, [r4, #0]
    e2b4:	cmp	r3, #0
    e2b6:	beq.w	e406 <_svfprintf_r+0x1e6>
    e2ba:	movs	r3, #0
    e2bc:	mov	r2, r3
    e2be:	strb.w	r3, [sp, #111]	; 0x6f
    e2c2:	mov	r1, r3
    e2c4:	str	r3, [sp, #32]
    e2c6:	str	r3, [sp, #12]
    e2c8:	mov.w	fp, #4294967295
    e2cc:	ldrb	r3, [r4, #1]
    e2ce:	add.w	r8, r4, #1
    e2d2:	mov	r5, fp
    e2d4:	add.w	r8, r8, #1
    e2d8:	sub.w	r0, r3, #32
    e2dc:	cmp	r0, #88	; 0x58
    e2de:	bhi.w	eb4a <_svfprintf_r+0x92a>
    e2e2:	tbh	[pc, r0, lsl #1]
    e2e6:	.short	0x03a0
    e2e8:	.word	0x04320432
    e2ec:	.word	0x043203a8
    e2f0:	.word	0x04320432
    e2f4:	.word	0x04320432
    e2f8:	.word	0x03af0432
    e2fc:	.word	0x043203bd
    e300:	.word	0x00e2005d
    e304:	.word	0x01090432
    e308:	.word	0x01100110
    e30c:	.word	0x01100110
    e310:	.word	0x01100110
    e314:	.word	0x01100110
    e318:	.word	0x04320110
    e31c:	.word	0x04320432
    e320:	.word	0x04320432
    e324:	.word	0x04320432
    e328:	.word	0x04320432
    e32c:	.word	0x01200432
    e330:	.word	0x04320286
    e334:	.word	0x04320286
    e338:	.word	0x04320432
    e33c:	.word	0x02d40432
    e340:	.word	0x04320432
    e344:	.word	0x043202e5
    e348:	.word	0x04320432
    e34c:	.word	0x04320432
    e350:	.word	0x0432030f
    e354:	.word	0x033d0432
    e358:	.word	0x04320432
    e35c:	.word	0x04320432
    e360:	.word	0x04320432
    e364:	.word	0x04320432
    e368:	.word	0x04320432
    e36c:	.word	0x0391037e
    e370:	.word	0x02860286
    e374:	.word	0x03990286
    e378:	.word	0x04320391
    e37c:	.word	0x04070432
    e380:	.word	0x04120432
    e384:	.word	0x006400a3
    e388:	.word	0x043203c2
    e38c:	.word	0x043203c9
    e390:	.word	0x043203ea
    e394:	.word	0x03f20432
    e398:	ldr	r0, [sp, #32]
    e39a:	str	r3, [sp, #40]	; 0x28
    e39c:	negs	r0, r0
    e39e:	str	r0, [sp, #32]
    e3a0:	ldr	r3, [sp, #12]
    e3a2:	orr.w	r3, r3, #4
    e3a6:	str	r3, [sp, #12]
    e3a8:	ldrb.w	r3, [r8]
    e3ac:	b.n	e2d4 <_svfprintf_r+0xb4>
    e3ae:	ldr	r0, [sp, #40]	; 0x28
    e3b0:	mov	fp, r5
    e3b2:	movs	r1, #0
    e3b4:	ldr	r4, [r0, #0]
    e3b6:	strb.w	r1, [sp, #111]	; 0x6f
    e3ba:	adds	r7, r0, #4
    e3bc:	ldr	r0, [sp, #12]
    e3be:	movs	r3, #48	; 0x30
    e3c0:	movs	r2, #120	; 0x78
    e3c2:	cmp	fp, r1
    e3c4:	strb.w	r3, [sp, #112]	; 0x70
    e3c8:	mov.w	r5, #0
    e3cc:	strb.w	r2, [sp, #113]	; 0x71
    e3d0:	orr.w	r3, r0, #2
    e3d4:	blt.w	eb84 <_svfprintf_r+0x964>
    e3d8:	bic.w	r3, r0, #128	; 0x80
    e3dc:	orr.w	r3, r3, #2
    e3e0:	str	r3, [sp, #12]
    e3e2:	orrs.w	r3, r4, r5
    e3e6:	str	r7, [sp, #40]	; 0x28
    e3e8:	beq.w	eb30 <_svfprintf_r+0x910>
    e3ec:	mov	r7, r1
    e3ee:	str	r2, [sp, #52]	; 0x34
    e3f0:	ldr	r0, [pc, #252]	; (e4f0 <_svfprintf_r+0x2d0>)
    e3f2:	b.n	e9c2 <_svfprintf_r+0x7a2>
    e3f4:	add	r2, sp, #140	; 0x8c
    e3f6:	ldr	r1, [sp, #20]
    e3f8:	ldr	r0, [sp, #24]
    e3fa:	bl	f904 <__ssprint_r>
    e3fe:	cbnz	r0, e414 <_svfprintf_r+0x1f4>
    e400:	add.w	r9, sp, #192	; 0xc0
    e404:	b.n	e2ac <_svfprintf_r+0x8c>
    e406:	ldr	r3, [sp, #148]	; 0x94
    e408:	cbz	r3, e414 <_svfprintf_r+0x1f4>
    e40a:	ldr	r0, [sp, #24]
    e40c:	ldr	r1, [sp, #20]
    e40e:	add	r2, sp, #140	; 0x8c
    e410:	bl	f904 <__ssprint_r>
    e414:	ldr	r3, [sp, #20]
    e416:	ldrh	r3, [r3, #12]
    e418:	tst.w	r3, #64	; 0x40
    e41c:	ldr	r3, [sp, #28]
    e41e:	it	ne
    e420:	movne.w	r3, #4294967295
    e424:	mov	r0, r3
    e426:	add	sp, #260	; 0x104
    e428:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e42c:	str	r3, [sp, #52]	; 0x34
    e42e:	mov	fp, r5
    e430:	cmp	r2, #0
    e432:	bne.w	f89c <_svfprintf_r+0x167c>
    e436:	ldr	r2, [sp, #12]
    e438:	ands.w	r3, r2, #32
    e43c:	beq.w	e8cc <_svfprintf_r+0x6ac>
    e440:	ldr	r7, [sp, #40]	; 0x28
    e442:	adds	r7, #7
    e444:	bic.w	r3, r7, #7
    e448:	movs	r7, #0
    e44a:	add.w	r1, r3, #8
    e44e:	cmp	fp, r7
    e450:	str	r1, [sp, #40]	; 0x28
    e452:	ldrd	r4, r5, [r3]
    e456:	strb.w	r7, [sp, #111]	; 0x6f
    e45a:	blt.w	f322 <_svfprintf_r+0x1102>
    e45e:	bic.w	r3, r2, #128	; 0x80
    e462:	str	r3, [sp, #12]
    e464:	orrs.w	r3, r4, r5
    e468:	beq.w	eb74 <_svfprintf_r+0x954>
    e46c:	add	r6, sp, #192	; 0xc0
    e46e:	lsrs	r2, r4, #3
    e470:	orr.w	r2, r2, r5, lsl #29
    e474:	lsrs	r1, r5, #3
    e476:	and.w	r3, r4, #7
    e47a:	mov	r5, r1
    e47c:	mov	r4, r2
    e47e:	adds	r3, #48	; 0x30
    e480:	orrs.w	r2, r4, r5
    e484:	strb.w	r3, [r6, #-1]!
    e488:	bne.n	e46e <_svfprintf_r+0x24e>
    e48a:	ldr	r2, [sp, #12]
    e48c:	lsls	r1, r2, #31
    e48e:	bpl.w	e5b0 <_svfprintf_r+0x390>
    e492:	cmp	r3, #48	; 0x30
    e494:	beq.w	e5b0 <_svfprintf_r+0x390>
    e498:	movs	r2, #48	; 0x30
    e49a:	subs	r3, r6, #1
    e49c:	strb.w	r2, [r6, #-1]
    e4a0:	add	r2, sp, #192	; 0xc0
    e4a2:	subs	r2, r2, r3
    e4a4:	str	r2, [sp, #36]	; 0x24
    e4a6:	mov	r6, r3
    e4a8:	b.n	e5b6 <_svfprintf_r+0x396>
    e4aa:	ldrb.w	r3, [r8]
    e4ae:	cmp	r3, #42	; 0x2a
    e4b0:	add.w	r4, r8, #1
    e4b4:	beq.w	f880 <_svfprintf_r+0x1660>
    e4b8:	sub.w	r0, r3, #48	; 0x30
    e4bc:	cmp	r0, #9
    e4be:	it	ls
    e4c0:	movls	r5, #0
    e4c2:	bhi.w	f7d2 <_svfprintf_r+0x15b2>
    e4c6:	ldrb.w	r3, [r4], #1
    e4ca:	add.w	r5, r5, r5, lsl #2
    e4ce:	add.w	r5, r0, r5, lsl #1
    e4d2:	sub.w	r0, r3, #48	; 0x30
    e4d6:	cmp	r0, #9
    e4d8:	bls.n	e4c6 <_svfprintf_r+0x2a6>
    e4da:	orr.w	r5, r5, r5, asr #31
    e4de:	mov	r8, r4
    e4e0:	b.n	e2d8 <_svfprintf_r+0xb8>
    e4e2:	nop
    e4e4:	nop.w
	...
    e4f0:	.word	0x00010314
    e4f4:	.word	0x000102e0
    e4f8:	ldr	r3, [sp, #12]
    e4fa:	orr.w	r3, r3, #128	; 0x80
    e4fe:	str	r3, [sp, #12]
    e500:	ldrb.w	r3, [r8]
    e504:	b.n	e2d4 <_svfprintf_r+0xb4>
    e506:	sub.w	r0, r3, #48	; 0x30
    e50a:	movs	r3, #0
    e50c:	mov	r4, r3
    e50e:	ldrb.w	r3, [r8], #1
    e512:	add.w	r4, r4, r4, lsl #2
    e516:	add.w	r4, r0, r4, lsl #1
    e51a:	sub.w	r0, r3, #48	; 0x30
    e51e:	cmp	r0, #9
    e520:	bls.n	e50e <_svfprintf_r+0x2ee>
    e522:	str	r4, [sp, #32]
    e524:	b.n	e2d8 <_svfprintf_r+0xb8>
    e526:	str	r3, [sp, #52]	; 0x34
    e528:	mov	fp, r5
    e52a:	cmp	r2, #0
    e52c:	bne.w	f8b8 <_svfprintf_r+0x1698>
    e530:	ldr	r3, [sp, #12]
    e532:	orr.w	r3, r3, #16
    e536:	str	r3, [sp, #12]
    e538:	ldr	r3, [sp, #12]
    e53a:	lsls	r4, r3, #26
    e53c:	bpl.w	efae <_svfprintf_r+0xd8e>
    e540:	ldr	r7, [sp, #40]	; 0x28
    e542:	adds	r7, #7
    e544:	bic.w	r7, r7, #7
    e548:	ldrd	r2, r3, [r7]
    e54c:	add.w	r1, r7, #8
    e550:	str	r1, [sp, #40]	; 0x28
    e552:	mov	r4, r2
    e554:	mov	r5, r3
    e556:	cmp	r2, #0
    e558:	sbcs.w	r3, r3, #0
    e55c:	blt.w	f024 <_svfprintf_r+0xe04>
    e560:	cmp.w	fp, #0
    e564:	ldrb.w	r7, [sp, #111]	; 0x6f
    e568:	blt.w	efea <_svfprintf_r+0xdca>
    e56c:	ldr	r3, [sp, #12]
    e56e:	bic.w	r3, r3, #128	; 0x80
    e572:	str	r3, [sp, #12]
    e574:	orrs.w	r3, r4, r5
    e578:	beq.w	e94c <_svfprintf_r+0x72c>
    e57c:	cmp	r5, #0
    e57e:	it	eq
    e580:	cmpeq	r4, #10
    e582:	bcc.w	e956 <_svfprintf_r+0x736>
    e586:	add	r6, sp, #192	; 0xc0
    e588:	mov	r0, r4
    e58a:	mov	r1, r5
    e58c:	movs	r2, #10
    e58e:	movs	r3, #0
    e590:	bl	b568 <__aeabi_uldivmod>
    e594:	adds	r2, #48	; 0x30
    e596:	strb.w	r2, [r6, #-1]!
    e59a:	mov	r0, r4
    e59c:	mov	r1, r5
    e59e:	movs	r3, #0
    e5a0:	movs	r2, #10
    e5a2:	bl	b568 <__aeabi_uldivmod>
    e5a6:	mov	r4, r0
    e5a8:	mov	r5, r1
    e5aa:	orrs.w	r3, r4, r5
    e5ae:	bne.n	e588 <_svfprintf_r+0x368>
    e5b0:	add	r3, sp, #192	; 0xc0
    e5b2:	subs	r3, r3, r6
    e5b4:	str	r3, [sp, #36]	; 0x24
    e5b6:	ldr	r3, [sp, #36]	; 0x24
    e5b8:	cmp	r3, fp
    e5ba:	it	lt
    e5bc:	movlt	r3, fp
    e5be:	str	r3, [sp, #16]
    e5c0:	movs	r3, #0
    e5c2:	str	r3, [sp, #60]	; 0x3c
    e5c4:	cbz	r7, e5cc <_svfprintf_r+0x3ac>
    e5c6:	ldr	r3, [sp, #16]
    e5c8:	adds	r3, #1
    e5ca:	str	r3, [sp, #16]
    e5cc:	ldr	r3, [sp, #12]
    e5ce:	ands.w	r3, r3, #2
    e5d2:	str	r3, [sp, #44]	; 0x2c
    e5d4:	beq.n	e5dc <_svfprintf_r+0x3bc>
    e5d6:	ldr	r3, [sp, #16]
    e5d8:	adds	r3, #2
    e5da:	str	r3, [sp, #16]
    e5dc:	ldr	r3, [sp, #12]
    e5de:	ands.w	r3, r3, #132	; 0x84
    e5e2:	str	r3, [sp, #48]	; 0x30
    e5e4:	bne.w	eb9e <_svfprintf_r+0x97e>
    e5e8:	ldr	r3, [sp, #32]
    e5ea:	ldr	r2, [sp, #16]
    e5ec:	subs	r5, r3, r2
    e5ee:	cmp	r5, #0
    e5f0:	ble.w	eb9e <_svfprintf_r+0x97e>
    e5f4:	cmp	r5, #16
    e5f6:	ldr	r1, [sp, #148]	; 0x94
    e5f8:	ldr	r2, [sp, #144]	; 0x90
    e5fa:	ldr	r7, [pc, #672]	; (e89c <_svfprintf_r+0x67c>)
    e5fc:	ble.n	e64e <_svfprintf_r+0x42e>
    e5fe:	str	r6, [sp, #80]	; 0x50
    e600:	mov	r0, r9
    e602:	movs	r4, #16
    e604:	mov	r9, r7
    e606:	ldr	r6, [sp, #20]
    e608:	mov	r7, r5
    e60a:	ldr	r5, [sp, #24]
    e60c:	b.n	e618 <_svfprintf_r+0x3f8>
    e60e:	subs	r7, #16
    e610:	cmp	r7, #16
    e612:	add.w	r0, r0, #8
    e616:	ble.n	e646 <_svfprintf_r+0x426>
    e618:	adds	r2, #1
    e61a:	ldr	r3, [pc, #640]	; (e89c <_svfprintf_r+0x67c>)
    e61c:	str	r2, [sp, #144]	; 0x90
    e61e:	adds	r1, #16
    e620:	cmp	r2, #7
    e622:	str	r1, [sp, #148]	; 0x94
    e624:	stmia.w	r0, {r3, r4}
    e628:	ble.n	e60e <_svfprintf_r+0x3ee>
    e62a:	add	r2, sp, #140	; 0x8c
    e62c:	mov	r1, r6
    e62e:	mov	r0, r5
    e630:	bl	f904 <__ssprint_r>
    e634:	cmp	r0, #0
    e636:	bne.w	e414 <_svfprintf_r+0x1f4>
    e63a:	subs	r7, #16
    e63c:	cmp	r7, #16
    e63e:	ldr	r1, [sp, #148]	; 0x94
    e640:	ldr	r2, [sp, #144]	; 0x90
    e642:	add	r0, sp, #192	; 0xc0
    e644:	bgt.n	e618 <_svfprintf_r+0x3f8>
    e646:	ldr	r6, [sp, #80]	; 0x50
    e648:	mov	r5, r7
    e64a:	mov	r7, r9
    e64c:	mov	r9, r0
    e64e:	adds	r2, #1
    e650:	adds	r4, r5, r1
    e652:	cmp	r2, #7
    e654:	str	r4, [sp, #148]	; 0x94
    e656:	str	r2, [sp, #144]	; 0x90
    e658:	str.w	r7, [r9]
    e65c:	str.w	r5, [r9, #4]
    e660:	bgt.w	eebe <_svfprintf_r+0xc9e>
    e664:	ldrb.w	r7, [sp, #111]	; 0x6f
    e668:	add.w	r9, r9, #8
    e66c:	cbz	r7, e68c <_svfprintf_r+0x46c>
    e66e:	ldr	r3, [sp, #144]	; 0x90
    e670:	adds	r3, #1
    e672:	adds	r4, #1
    e674:	add.w	r1, sp, #111	; 0x6f
    e678:	movs	r2, #1
    e67a:	cmp	r3, #7
    e67c:	str	r4, [sp, #148]	; 0x94
    e67e:	str	r3, [sp, #144]	; 0x90
    e680:	stmia.w	r9, {r1, r2}
    e684:	bgt.w	edd2 <_svfprintf_r+0xbb2>
    e688:	add.w	r9, r9, #8
    e68c:	ldr	r3, [sp, #44]	; 0x2c
    e68e:	cbz	r3, e6ac <_svfprintf_r+0x48c>
    e690:	ldr	r3, [sp, #144]	; 0x90
    e692:	adds	r3, #1
    e694:	adds	r4, #2
    e696:	add	r1, sp, #112	; 0x70
    e698:	movs	r2, #2
    e69a:	cmp	r3, #7
    e69c:	str	r4, [sp, #148]	; 0x94
    e69e:	str	r3, [sp, #144]	; 0x90
    e6a0:	stmia.w	r9, {r1, r2}
    e6a4:	bgt.w	edea <_svfprintf_r+0xbca>
    e6a8:	add.w	r9, r9, #8
    e6ac:	ldr	r3, [sp, #48]	; 0x30
    e6ae:	cmp	r3, #128	; 0x80
    e6b0:	beq.w	ec76 <_svfprintf_r+0xa56>
    e6b4:	ldr	r3, [sp, #36]	; 0x24
    e6b6:	rsb	r7, r3, fp
    e6ba:	cmp	r7, #0
    e6bc:	ble.n	e726 <_svfprintf_r+0x506>
    e6be:	ldr	r2, [pc, #480]	; (e8a0 <_svfprintf_r+0x680>)
    e6c0:	ldr	r3, [sp, #144]	; 0x90
    e6c2:	str	r2, [sp, #44]	; 0x2c
    e6c4:	cmp	r7, #16
    e6c6:	ble.n	e70e <_svfprintf_r+0x4ee>
    e6c8:	mov	r2, r4
    e6ca:	mov.w	fp, #16
    e6ce:	ldr	r5, [sp, #24]
    e6d0:	ldr	r4, [sp, #20]
    e6d2:	b.n	e6de <_svfprintf_r+0x4be>
    e6d4:	subs	r7, #16
    e6d6:	cmp	r7, #16
    e6d8:	add.w	r9, r9, #8
    e6dc:	ble.n	e70c <_svfprintf_r+0x4ec>
    e6de:	adds	r3, #1
    e6e0:	adds	r2, #16
    e6e2:	cmp	r3, #7
    e6e4:	str	r2, [sp, #148]	; 0x94
    e6e6:	str	r3, [sp, #144]	; 0x90
    e6e8:	stmia.w	r9, {sl, fp}
    e6ec:	ble.n	e6d4 <_svfprintf_r+0x4b4>
    e6ee:	add	r2, sp, #140	; 0x8c
    e6f0:	mov	r1, r4
    e6f2:	mov	r0, r5
    e6f4:	bl	f904 <__ssprint_r>
    e6f8:	cmp	r0, #0
    e6fa:	bne.w	e414 <_svfprintf_r+0x1f4>
    e6fe:	subs	r7, #16
    e700:	cmp	r7, #16
    e702:	ldr	r2, [sp, #148]	; 0x94
    e704:	ldr	r3, [sp, #144]	; 0x90
    e706:	add.w	r9, sp, #192	; 0xc0
    e70a:	bgt.n	e6de <_svfprintf_r+0x4be>
    e70c:	mov	r4, r2
    e70e:	adds	r3, #1
    e710:	ldr	r2, [sp, #44]	; 0x2c
    e712:	str	r3, [sp, #144]	; 0x90
    e714:	add	r4, r7
    e716:	cmp	r3, #7
    e718:	str	r4, [sp, #148]	; 0x94
    e71a:	stmia.w	r9, {r2, r7}
    e71e:	bgt.w	edba <_svfprintf_r+0xb9a>
    e722:	add.w	r9, r9, #8
    e726:	ldr	r3, [sp, #12]
    e728:	lsls	r2, r3, #23
    e72a:	bmi.w	eba2 <_svfprintf_r+0x982>
    e72e:	ldr	r3, [sp, #144]	; 0x90
    e730:	ldr	r1, [sp, #36]	; 0x24
    e732:	str.w	r6, [r9]
    e736:	adds	r3, #1
    e738:	add	r4, r1
    e73a:	cmp	r3, #7
    e73c:	str	r4, [sp, #148]	; 0x94
    e73e:	str.w	r1, [r9, #4]
    e742:	str	r3, [sp, #144]	; 0x90
    e744:	bgt.w	ed8e <_svfprintf_r+0xb6e>
    e748:	add.w	r9, r9, #8
    e74c:	ldr	r3, [sp, #12]
    e74e:	lsls	r1, r3, #29
    e750:	bpl.n	e7d2 <_svfprintf_r+0x5b2>
    e752:	ldr	r3, [sp, #32]
    e754:	ldr	r2, [sp, #16]
    e756:	subs	r5, r3, r2
    e758:	cmp	r5, #0
    e75a:	ble.n	e7d2 <_svfprintf_r+0x5b2>
    e75c:	cmp	r5, #16
    e75e:	ldr	r3, [sp, #144]	; 0x90
    e760:	ldr	r7, [pc, #312]	; (e89c <_svfprintf_r+0x67c>)
    e762:	ble.n	e7ac <_svfprintf_r+0x58c>
    e764:	mov	r2, r4
    e766:	movs	r6, #16
    e768:	ldr.w	fp, [sp, #24]
    e76c:	ldr	r4, [sp, #20]
    e76e:	b.n	e77a <_svfprintf_r+0x55a>
    e770:	subs	r5, #16
    e772:	cmp	r5, #16
    e774:	add.w	r9, r9, #8
    e778:	ble.n	e7aa <_svfprintf_r+0x58a>
    e77a:	adds	r3, #1
    e77c:	ldr	r1, [pc, #284]	; (e89c <_svfprintf_r+0x67c>)
    e77e:	str	r3, [sp, #144]	; 0x90
    e780:	adds	r2, #16
    e782:	cmp	r3, #7
    e784:	str	r2, [sp, #148]	; 0x94
    e786:	stmia.w	r9, {r1, r6}
    e78a:	ble.n	e770 <_svfprintf_r+0x550>
    e78c:	add	r2, sp, #140	; 0x8c
    e78e:	mov	r1, r4
    e790:	mov	r0, fp
    e792:	bl	f904 <__ssprint_r>
    e796:	cmp	r0, #0
    e798:	bne.w	e414 <_svfprintf_r+0x1f4>
    e79c:	subs	r5, #16
    e79e:	cmp	r5, #16
    e7a0:	ldr	r2, [sp, #148]	; 0x94
    e7a2:	ldr	r3, [sp, #144]	; 0x90
    e7a4:	add.w	r9, sp, #192	; 0xc0
    e7a8:	bgt.n	e77a <_svfprintf_r+0x55a>
    e7aa:	mov	r4, r2
    e7ac:	adds	r3, #1
    e7ae:	add	r4, r5
    e7b0:	cmp	r3, #7
    e7b2:	str	r4, [sp, #148]	; 0x94
    e7b4:	str	r3, [sp, #144]	; 0x90
    e7b6:	str.w	r7, [r9]
    e7ba:	str.w	r5, [r9, #4]
    e7be:	ble.n	e7d2 <_svfprintf_r+0x5b2>
    e7c0:	add	r2, sp, #140	; 0x8c
    e7c2:	ldr	r1, [sp, #20]
    e7c4:	ldr	r0, [sp, #24]
    e7c6:	bl	f904 <__ssprint_r>
    e7ca:	cmp	r0, #0
    e7cc:	bne.w	e414 <_svfprintf_r+0x1f4>
    e7d0:	ldr	r4, [sp, #148]	; 0x94
    e7d2:	ldr	r3, [sp, #28]
    e7d4:	ldr	r2, [sp, #32]
    e7d6:	ldr	r1, [sp, #16]
    e7d8:	cmp	r2, r1
    e7da:	ite	ge
    e7dc:	addge	r3, r3, r2
    e7de:	addlt	r3, r3, r1
    e7e0:	str	r3, [sp, #28]
    e7e2:	cmp	r4, #0
    e7e4:	bne.w	eda6 <_svfprintf_r+0xb86>
    e7e8:	movs	r3, #0
    e7ea:	str	r3, [sp, #144]	; 0x90
    e7ec:	add.w	r9, sp, #192	; 0xc0
    e7f0:	b.n	e26e <_svfprintf_r+0x4e>
    e7f2:	str	r3, [sp, #52]	; 0x34
    e7f4:	mov	fp, r5
    e7f6:	cmp	r2, #0
    e7f8:	bne.w	f8c0 <_svfprintf_r+0x16a0>
    e7fc:	ldr	r3, [sp, #12]
    e7fe:	ldr	r7, [sp, #40]	; 0x28
    e800:	lsls	r2, r3, #28
    e802:	add.w	r7, r7, #7
    e806:	bpl.w	f2f2 <_svfprintf_r+0x10d2>
    e80a:	bic.w	r3, r7, #7
    e80e:	vldr	d7, [r3]
    e812:	vstr	d7, [sp, #64]	; 0x40
    e816:	add.w	r2, r3, #8
    e81a:	str	r2, [sp, #40]	; 0x28
    e81c:	ldrd	r1, r2, [sp, #64]	; 0x40
    e820:	bic.w	r3, r2, #2147483648	; 0x80000000
    e824:	str	r1, [sp, #88]	; 0x58
    e826:	str	r3, [sp, #92]	; 0x5c
    e828:	ldrd	r4, r5, [sp, #88]	; 0x58
    e82c:	mov.w	r2, #4294967295
    e830:	mov	r0, r4
    e832:	mov	r1, r5
    e834:	ldr	r3, [pc, #108]	; (e8a4 <_svfprintf_r+0x684>)
    e836:	bl	b4ec <__aeabi_dcmpun>
    e83a:	cmp	r0, #0
    e83c:	bne.w	f1f4 <_svfprintf_r+0xfd4>
    e840:	mov.w	r2, #4294967295
    e844:	ldr	r3, [pc, #92]	; (e8a4 <_svfprintf_r+0x684>)
    e846:	mov	r0, r4
    e848:	mov	r1, r5
    e84a:	bl	b4b0 <__aeabi_dcmple>
    e84e:	cmp	r0, #0
    e850:	bne.w	f1f4 <_svfprintf_r+0xfd4>
    e854:	movs	r2, #0
    e856:	movs	r3, #0
    e858:	ldrd	r0, r1, [sp, #64]	; 0x40
    e85c:	bl	b49c <__aeabi_dcmplt>
    e860:	cmp	r0, #0
    e862:	bne.w	f70a <_svfprintf_r+0x14ea>
    e866:	ldrb.w	r7, [sp, #111]	; 0x6f
    e86a:	ldr	r6, [pc, #60]	; (e8a8 <_svfprintf_r+0x688>)
    e86c:	ldr	r3, [pc, #60]	; (e8ac <_svfprintf_r+0x68c>)
    e86e:	ldr	r1, [sp, #12]
    e870:	bic.w	r1, r1, #128	; 0x80
    e874:	str	r1, [sp, #12]
    e876:	ldr	r1, [sp, #52]	; 0x34
    e878:	movs	r2, #3
    e87a:	mov.w	fp, #0
    e87e:	str	r2, [sp, #16]
    e880:	cmp	r1, #71	; 0x47
    e882:	it	le
    e884:	movle	r6, r3
    e886:	str	r2, [sp, #36]	; 0x24
    e888:	str.w	fp, [sp, #60]	; 0x3c
    e88c:	b.n	e5c4 <_svfprintf_r+0x3a4>
    e88e:	ldr	r3, [sp, #12]
    e890:	orr.w	r3, r3, #8
    e894:	str	r3, [sp, #12]
    e896:	ldrb.w	r3, [r8]
    e89a:	b.n	e2d4 <_svfprintf_r+0xb4>
    e89c:	.word	0x00010330
    e8a0:	.word	0x000102e0
    e8a4:	.word	0x7fefffff
    e8a8:	.word	0x000102f4
    e8ac:	.word	0x000102f0
    e8b0:	str	r3, [sp, #52]	; 0x34
    e8b2:	mov	fp, r5
    e8b4:	cmp	r2, #0
    e8b6:	bne.w	f8d8 <_svfprintf_r+0x16b8>
    e8ba:	ldr	r3, [sp, #12]
    e8bc:	orr.w	r3, r3, #16
    e8c0:	str	r3, [sp, #12]
    e8c2:	ldr	r2, [sp, #12]
    e8c4:	ands.w	r3, r2, #32
    e8c8:	bne.w	e440 <_svfprintf_r+0x220>
    e8cc:	ldr	r1, [sp, #12]
    e8ce:	ands.w	r2, r1, #16
    e8d2:	beq.w	f18c <_svfprintf_r+0xf6c>
    e8d6:	ldr	r0, [sp, #40]	; 0x28
    e8d8:	strb.w	r3, [sp, #111]	; 0x6f
    e8dc:	cmp.w	fp, #0
    e8e0:	ldr	r4, [r0, #0]
    e8e2:	add.w	r7, r0, #4
    e8e6:	mov.w	r5, #0
    e8ea:	blt.w	f320 <_svfprintf_r+0x1100>
    e8ee:	mov	r2, r1
    e8f0:	bic.w	r2, r2, #128	; 0x80
    e8f4:	str	r2, [sp, #12]
    e8f6:	orrs.w	r2, r4, r5
    e8fa:	str	r7, [sp, #40]	; 0x28
    e8fc:	beq.w	eb74 <_svfprintf_r+0x954>
    e900:	mov	r7, r3
    e902:	b.n	e46c <_svfprintf_r+0x24c>
    e904:	str	r3, [sp, #52]	; 0x34
    e906:	mov	fp, r5
    e908:	cmp	r2, #0
    e90a:	bne.w	f8d0 <_svfprintf_r+0x16b0>
    e90e:	ldr	r3, [sp, #12]
    e910:	orr.w	r3, r3, #16
    e914:	str	r3, [sp, #12]
    e916:	ldr	r2, [sp, #12]
    e918:	ands.w	r3, r2, #32
    e91c:	beq.w	ef78 <_svfprintf_r+0xd58>
    e920:	ldr	r7, [sp, #40]	; 0x28
    e922:	adds	r7, #7
    e924:	bic.w	r3, r7, #7
    e928:	movs	r7, #0
    e92a:	add.w	r1, r3, #8
    e92e:	cmp	fp, r7
    e930:	str	r1, [sp, #40]	; 0x28
    e932:	ldrd	r4, r5, [r3]
    e936:	strb.w	r7, [sp, #111]	; 0x6f
    e93a:	blt.w	efea <_svfprintf_r+0xdca>
    e93e:	bic.w	r3, r2, #128	; 0x80
    e942:	str	r3, [sp, #12]
    e944:	orrs.w	r3, r4, r5
    e948:	bne.w	e57c <_svfprintf_r+0x35c>
    e94c:	cmp.w	fp, #0
    e950:	beq.w	eb3e <_svfprintf_r+0x91e>
    e954:	movs	r4, #0
    e956:	add	r6, sp, #256	; 0x100
    e958:	adds	r4, #48	; 0x30
    e95a:	strb.w	r4, [r6, #-65]!
    e95e:	b.n	e5b0 <_svfprintf_r+0x390>
    e960:	str	r3, [sp, #52]	; 0x34
    e962:	mov	fp, r5
    e964:	cmp	r2, #0
    e966:	bne.w	f8c8 <_svfprintf_r+0x16a8>
    e96a:	ldr	r3, [sp, #12]
    e96c:	ldr	r0, [pc, #700]	; (ec2c <_svfprintf_r+0xa0c>)
    e96e:	lsls	r5, r3, #26
    e970:	bpl.w	eade <_svfprintf_r+0x8be>
    e974:	ldr	r7, [sp, #40]	; 0x28
    e976:	adds	r7, #7
    e978:	bic.w	r3, r7, #7
    e97c:	ldrd	r4, r5, [r3]
    e980:	add.w	r2, r3, #8
    e984:	str	r2, [sp, #40]	; 0x28
    e986:	ldr	r2, [sp, #12]
    e988:	ands.w	r7, r2, #1
    e98c:	beq.w	ee02 <_svfprintf_r+0xbe2>
    e990:	orrs.w	r3, r4, r5
    e994:	beq.w	f39c <_svfprintf_r+0x117c>
    e998:	ldrb.w	r2, [sp, #52]	; 0x34
    e99c:	strb.w	r2, [sp, #113]	; 0x71
    e9a0:	movs	r7, #0
    e9a2:	ldr	r2, [sp, #12]
    e9a4:	strb.w	r7, [sp, #111]	; 0x6f
    e9a8:	movs	r3, #48	; 0x30
    e9aa:	cmp	fp, r7
    e9ac:	strb.w	r3, [sp, #112]	; 0x70
    e9b0:	orr.w	r3, r2, #2
    e9b4:	blt.w	f714 <_svfprintf_r+0x14f4>
    e9b8:	bic.w	r3, r2, #128	; 0x80
    e9bc:	orr.w	r3, r3, #2
    e9c0:	str	r3, [sp, #12]
    e9c2:	add	r6, sp, #192	; 0xc0
    e9c4:	lsrs	r3, r4, #4
    e9c6:	and.w	r1, r4, #15
    e9ca:	orr.w	r3, r3, r5, lsl #28
    e9ce:	lsrs	r2, r5, #4
    e9d0:	mov	r4, r3
    e9d2:	mov	r5, r2
    e9d4:	ldrb	r3, [r0, r1]
    e9d6:	strb.w	r3, [r6, #-1]!
    e9da:	orrs.w	r3, r4, r5
    e9de:	bne.n	e9c4 <_svfprintf_r+0x7a4>
    e9e0:	b.n	e5b0 <_svfprintf_r+0x390>
    e9e2:	ldr	r1, [sp, #40]	; 0x28
    e9e4:	str	r3, [sp, #52]	; 0x34
    e9e6:	ldr	r2, [r1, #0]
    e9e8:	strb.w	r2, [sp, #152]	; 0x98
    e9ec:	movs	r3, #0
    e9ee:	mov	r2, r1
    e9f0:	mov	r7, r3
    e9f2:	strb.w	r3, [sp, #111]	; 0x6f
    e9f6:	adds	r2, #4
    e9f8:	movs	r3, #1
    e9fa:	str	r3, [sp, #16]
    e9fc:	mov	fp, r7
    e9fe:	str	r7, [sp, #60]	; 0x3c
    ea00:	str	r2, [sp, #40]	; 0x28
    ea02:	str	r3, [sp, #36]	; 0x24
    ea04:	add	r6, sp, #152	; 0x98
    ea06:	b.n	e5cc <_svfprintf_r+0x3ac>
    ea08:	str	r3, [sp, #52]	; 0x34
    ea0a:	mov	fp, r5
    ea0c:	cmp	r2, #0
    ea0e:	beq.w	e538 <_svfprintf_r+0x318>
    ea12:	strb.w	r1, [sp, #111]	; 0x6f
    ea16:	b.n	e538 <_svfprintf_r+0x318>
    ea18:	ldr	r3, [sp, #12]
    ea1a:	orr.w	r3, r3, #64	; 0x40
    ea1e:	str	r3, [sp, #12]
    ea20:	ldrb.w	r3, [r8]
    ea24:	b.n	e2d4 <_svfprintf_r+0xb4>
    ea26:	ldrb.w	r3, [r8]
    ea2a:	cmp	r1, #0
    ea2c:	bne.w	e2d4 <_svfprintf_r+0xb4>
    ea30:	movs	r2, #1
    ea32:	movs	r1, #32
    ea34:	b.n	e2d4 <_svfprintf_r+0xb4>
    ea36:	ldr	r3, [sp, #12]
    ea38:	orr.w	r3, r3, #1
    ea3c:	str	r3, [sp, #12]
    ea3e:	ldrb.w	r3, [r8]
    ea42:	b.n	e2d4 <_svfprintf_r+0xb4>
    ea44:	ldr	r4, [sp, #40]	; 0x28
    ea46:	ldr	r3, [r4, #0]
    ea48:	str	r3, [sp, #32]
    ea4a:	mov	r0, r3
    ea4c:	cmp	r0, #0
    ea4e:	mov	r3, r4
    ea50:	add.w	r3, r3, #4
    ea54:	blt.w	e398 <_svfprintf_r+0x178>
    ea58:	str	r3, [sp, #40]	; 0x28
    ea5a:	ldrb.w	r3, [r8]
    ea5e:	b.n	e2d4 <_svfprintf_r+0xb4>
    ea60:	ldrb.w	r3, [r8]
    ea64:	movs	r2, #1
    ea66:	movs	r1, #43	; 0x2b
    ea68:	b.n	e2d4 <_svfprintf_r+0xb4>
    ea6a:	ldr	r3, [sp, #12]
    ea6c:	orr.w	r3, r3, #32
    ea70:	str	r3, [sp, #12]
    ea72:	ldrb.w	r3, [r8]
    ea76:	b.n	e2d4 <_svfprintf_r+0xb4>
    ea78:	ldr	r2, [sp, #40]	; 0x28
    ea7a:	str	r3, [sp, #52]	; 0x34
    ea7c:	ldr	r6, [r2, #0]
    ea7e:	movs	r4, #0
    ea80:	strb.w	r4, [sp, #111]	; 0x6f
    ea84:	adds	r7, r2, #4
    ea86:	cmp	r6, #0
    ea88:	beq.w	f6c4 <_svfprintf_r+0x14a4>
    ea8c:	cmp	r5, #0
    ea8e:	blt.w	f554 <_svfprintf_r+0x1334>
    ea92:	mov	r2, r5
    ea94:	mov	r1, r4
    ea96:	mov	r0, r6
    ea98:	bl	beb0 <memchr>
    ea9c:	cmp	r0, #0
    ea9e:	beq.w	f768 <_svfprintf_r+0x1548>
    eaa2:	subs	r3, r0, r6
    eaa4:	str	r3, [sp, #36]	; 0x24
    eaa6:	mov	fp, r4
    eaa8:	bic.w	r3, r3, r3, asr #31
    eaac:	str	r7, [sp, #40]	; 0x28
    eaae:	str	r3, [sp, #16]
    eab0:	str.w	fp, [sp, #60]	; 0x3c
    eab4:	ldrb.w	r7, [sp, #111]	; 0x6f
    eab8:	b.n	e5c4 <_svfprintf_r+0x3a4>
    eaba:	str	r3, [sp, #52]	; 0x34
    eabc:	mov	fp, r5
    eabe:	cmp	r2, #0
    eac0:	beq.w	e916 <_svfprintf_r+0x6f6>
    eac4:	strb.w	r1, [sp, #111]	; 0x6f
    eac8:	b.n	e916 <_svfprintf_r+0x6f6>
    eaca:	str	r3, [sp, #52]	; 0x34
    eacc:	mov	fp, r5
    eace:	cmp	r2, #0
    ead0:	bne.w	f8f0 <_svfprintf_r+0x16d0>
    ead4:	ldr	r3, [sp, #12]
    ead6:	ldr	r0, [pc, #344]	; (ec30 <_svfprintf_r+0xa10>)
    ead8:	lsls	r5, r3, #26
    eada:	bmi.w	e974 <_svfprintf_r+0x754>
    eade:	ldr	r3, [sp, #12]
    eae0:	lsls	r4, r3, #27
    eae2:	bpl.w	f362 <_svfprintf_r+0x1142>
    eae6:	ldr	r2, [sp, #40]	; 0x28
    eae8:	mov	r3, r2
    eaea:	adds	r3, #4
    eaec:	ldr	r4, [r2, #0]
    eaee:	str	r3, [sp, #40]	; 0x28
    eaf0:	movs	r5, #0
    eaf2:	b.n	e986 <_svfprintf_r+0x766>
    eaf4:	ldrb.w	r3, [r8]
    eaf8:	cmp	r3, #108	; 0x6c
    eafa:	beq.w	f482 <_svfprintf_r+0x1262>
    eafe:	ldr	r0, [sp, #12]
    eb00:	orr.w	r0, r0, #16
    eb04:	str	r0, [sp, #12]
    eb06:	b.w	e2d4 <_svfprintf_r+0xb4>
    eb0a:	cmp	r2, #0
    eb0c:	bne.w	f8e8 <_svfprintf_r+0x16c8>
    eb10:	ldr	r3, [sp, #12]
    eb12:	lsls	r3, r3, #26
    eb14:	bpl.w	f1c6 <_svfprintf_r+0xfa6>
    eb18:	ldr	r2, [sp, #40]	; 0x28
    eb1a:	ldr	r1, [sp, #28]
    eb1c:	ldr	r3, [r2, #0]
    eb1e:	asrs	r5, r1, #31
    eb20:	mov	r0, r1
    eb22:	adds	r2, #4
    eb24:	mov	r1, r5
    eb26:	str	r2, [sp, #40]	; 0x28
    eb28:	strd	r0, r1, [r3]
    eb2c:	b.w	e26e <_svfprintf_r+0x4e>
    eb30:	ldr	r0, [pc, #252]	; (ec30 <_svfprintf_r+0xa10>)
    eb32:	str	r2, [sp, #52]	; 0x34
    eb34:	cmp.w	fp, #0
    eb38:	bne.w	ee24 <_svfprintf_r+0xc04>
    eb3c:	mov	r7, fp
    eb3e:	mov.w	fp, #0
    eb42:	str.w	fp, [sp, #36]	; 0x24
    eb46:	add	r6, sp, #192	; 0xc0
    eb48:	b.n	e5b6 <_svfprintf_r+0x396>
    eb4a:	str	r3, [sp, #52]	; 0x34
    eb4c:	cmp	r2, #0
    eb4e:	bne.w	f8e0 <_svfprintf_r+0x16c0>
    eb52:	ldr	r2, [sp, #52]	; 0x34
    eb54:	cmp	r2, #0
    eb56:	beq.w	e406 <_svfprintf_r+0x1e6>
    eb5a:	movs	r3, #0
    eb5c:	movs	r1, #1
    eb5e:	mov	r7, r3
    eb60:	str	r1, [sp, #16]
    eb62:	strb.w	r2, [sp, #152]	; 0x98
    eb66:	strb.w	r3, [sp, #111]	; 0x6f
    eb6a:	mov	fp, r3
    eb6c:	str	r3, [sp, #60]	; 0x3c
    eb6e:	str	r1, [sp, #36]	; 0x24
    eb70:	add	r6, sp, #152	; 0x98
    eb72:	b.n	e5cc <_svfprintf_r+0x3ac>
    eb74:	cmp.w	fp, #0
    eb78:	beq.w	f798 <_svfprintf_r+0x1578>
    eb7c:	movs	r7, #0
    eb7e:	movs	r4, #0
    eb80:	movs	r5, #0
    eb82:	b.n	e46c <_svfprintf_r+0x24c>
    eb84:	ldr	r0, [pc, #168]	; (ec30 <_svfprintf_r+0xa10>)
    eb86:	str	r3, [sp, #12]
    eb88:	str	r2, [sp, #52]	; 0x34
    eb8a:	orrs.w	r3, r4, r5
    eb8e:	str	r7, [sp, #40]	; 0x28
    eb90:	mov.w	r7, #0
    eb94:	bne.w	e9c2 <_svfprintf_r+0x7a2>
    eb98:	movs	r4, #0
    eb9a:	movs	r5, #0
    eb9c:	b.n	e9c2 <_svfprintf_r+0x7a2>
    eb9e:	ldr	r4, [sp, #148]	; 0x94
    eba0:	b.n	e66c <_svfprintf_r+0x44c>
    eba2:	ldr	r3, [sp, #52]	; 0x34
    eba4:	cmp	r3, #101	; 0x65
    eba6:	ble.w	ecfe <_svfprintf_r+0xade>
    ebaa:	movs	r2, #0
    ebac:	movs	r3, #0
    ebae:	ldrd	r0, r1, [sp, #64]	; 0x40
    ebb2:	bl	b488 <__aeabi_dcmpeq>
    ebb6:	cmp	r0, #0
    ebb8:	beq.w	ee28 <_svfprintf_r+0xc08>
    ebbc:	ldr	r3, [sp, #144]	; 0x90
    ebbe:	ldr	r2, [pc, #116]	; (ec34 <_svfprintf_r+0xa14>)
    ebc0:	str.w	r2, [r9]
    ebc4:	adds	r3, #1
    ebc6:	adds	r4, #1
    ebc8:	movs	r2, #1
    ebca:	cmp	r3, #7
    ebcc:	str	r4, [sp, #148]	; 0x94
    ebce:	str	r3, [sp, #144]	; 0x90
    ebd0:	str.w	r2, [r9, #4]
    ebd4:	bgt.w	f3b4 <_svfprintf_r+0x1194>
    ebd8:	add.w	r9, r9, #8
    ebdc:	ldr	r3, [sp, #116]	; 0x74
    ebde:	ldr	r2, [sp, #56]	; 0x38
    ebe0:	cmp	r3, r2
    ebe2:	blt.n	ebec <_svfprintf_r+0x9cc>
    ebe4:	ldr	r3, [sp, #12]
    ebe6:	lsls	r3, r3, #31
    ebe8:	bpl.w	e74c <_svfprintf_r+0x52c>
    ebec:	ldr	r3, [sp, #144]	; 0x90
    ebee:	ldr	r1, [sp, #72]	; 0x48
    ebf0:	ldr	r2, [sp, #76]	; 0x4c
    ebf2:	str.w	r2, [r9]
    ebf6:	adds	r3, #1
    ebf8:	add	r4, r1
    ebfa:	cmp	r3, #7
    ebfc:	str	r4, [sp, #148]	; 0x94
    ebfe:	str.w	r1, [r9, #4]
    ec02:	str	r3, [sp, #144]	; 0x90
    ec04:	bgt.w	f496 <_svfprintf_r+0x1276>
    ec08:	add.w	r9, r9, #8
    ec0c:	ldr	r3, [sp, #56]	; 0x38
    ec0e:	subs	r5, r3, #1
    ec10:	cmp	r5, #0
    ec12:	ble.w	e74c <_svfprintf_r+0x52c>
    ec16:	ldr	r2, [pc, #32]	; (ec38 <_svfprintf_r+0xa18>)
    ec18:	ldr	r3, [sp, #144]	; 0x90
    ec1a:	str	r2, [sp, #44]	; 0x2c
    ec1c:	cmp	r5, #16
    ec1e:	ble.w	eff4 <_svfprintf_r+0xdd4>
    ec22:	movs	r6, #16
    ec24:	ldr	r7, [sp, #24]
    ec26:	ldr.w	fp, [sp, #20]
    ec2a:	b.n	ec48 <_svfprintf_r+0xa28>
    ec2c:	.word	0x00010300
    ec30:	.word	0x00010314
    ec34:	.word	0x000102dc
    ec38:	.word	0x000102e0
    ec3c:	add.w	r9, r9, #8
    ec40:	subs	r5, #16
    ec42:	cmp	r5, #16
    ec44:	ble.w	eff4 <_svfprintf_r+0xdd4>
    ec48:	adds	r3, #1
    ec4a:	adds	r4, #16
    ec4c:	cmp	r3, #7
    ec4e:	str	r4, [sp, #148]	; 0x94
    ec50:	str	r3, [sp, #144]	; 0x90
    ec52:	str.w	sl, [r9]
    ec56:	str.w	r6, [r9, #4]
    ec5a:	ble.n	ec3c <_svfprintf_r+0xa1c>
    ec5c:	add	r2, sp, #140	; 0x8c
    ec5e:	mov	r1, fp
    ec60:	mov	r0, r7
    ec62:	bl	f904 <__ssprint_r>
    ec66:	cmp	r0, #0
    ec68:	bne.w	e414 <_svfprintf_r+0x1f4>
    ec6c:	ldr	r4, [sp, #148]	; 0x94
    ec6e:	ldr	r3, [sp, #144]	; 0x90
    ec70:	add.w	r9, sp, #192	; 0xc0
    ec74:	b.n	ec40 <_svfprintf_r+0xa20>
    ec76:	ldr	r3, [sp, #32]
    ec78:	ldr	r2, [sp, #16]
    ec7a:	subs	r7, r3, r2
    ec7c:	cmp	r7, #0
    ec7e:	ble.w	e6b4 <_svfprintf_r+0x494>
    ec82:	ldr	r2, [pc, #752]	; (ef74 <_svfprintf_r+0xd54>)
    ec84:	ldr	r3, [sp, #144]	; 0x90
    ec86:	str	r2, [sp, #44]	; 0x2c
    ec88:	cmp	r7, #16
    ec8a:	ble.n	ece4 <_svfprintf_r+0xac4>
    ec8c:	mov	r2, r9
    ec8e:	mov	r1, r4
    ec90:	mov	r9, r7
    ec92:	movs	r5, #16
    ec94:	mov	r7, r6
    ec96:	ldr	r4, [sp, #24]
    ec98:	ldr	r6, [sp, #20]
    ec9a:	b.n	ecaa <_svfprintf_r+0xa8a>
    ec9c:	sub.w	r9, r9, #16
    eca0:	cmp.w	r9, #16
    eca4:	add.w	r2, r2, #8
    eca8:	ble.n	ecdc <_svfprintf_r+0xabc>
    ecaa:	adds	r3, #1
    ecac:	adds	r1, #16
    ecae:	cmp	r3, #7
    ecb0:	str	r1, [sp, #148]	; 0x94
    ecb2:	str	r3, [sp, #144]	; 0x90
    ecb4:	str.w	sl, [r2]
    ecb8:	str	r5, [r2, #4]
    ecba:	ble.n	ec9c <_svfprintf_r+0xa7c>
    ecbc:	add	r2, sp, #140	; 0x8c
    ecbe:	mov	r1, r6
    ecc0:	mov	r0, r4
    ecc2:	bl	f904 <__ssprint_r>
    ecc6:	cmp	r0, #0
    ecc8:	bne.w	e414 <_svfprintf_r+0x1f4>
    eccc:	sub.w	r9, r9, #16
    ecd0:	cmp.w	r9, #16
    ecd4:	ldr	r1, [sp, #148]	; 0x94
    ecd6:	ldr	r3, [sp, #144]	; 0x90
    ecd8:	add	r2, sp, #192	; 0xc0
    ecda:	bgt.n	ecaa <_svfprintf_r+0xa8a>
    ecdc:	mov	r6, r7
    ecde:	mov	r4, r1
    ece0:	mov	r7, r9
    ece2:	mov	r9, r2
    ece4:	adds	r3, #1
    ece6:	ldr	r2, [sp, #44]	; 0x2c
    ece8:	str	r3, [sp, #144]	; 0x90
    ecea:	add	r4, r7
    ecec:	cmp	r3, #7
    ecee:	str	r4, [sp, #148]	; 0x94
    ecf0:	stmia.w	r9, {r2, r7}
    ecf4:	bgt.w	f172 <_svfprintf_r+0xf52>
    ecf8:	add.w	r9, r9, #8
    ecfc:	b.n	e6b4 <_svfprintf_r+0x494>
    ecfe:	ldr	r3, [sp, #56]	; 0x38
    ed00:	ldr	r5, [sp, #144]	; 0x90
    ed02:	cmp	r3, #1
    ed04:	ble.w	f11c <_svfprintf_r+0xefc>
    ed08:	adds	r5, #1
    ed0a:	adds	r4, #1
    ed0c:	movs	r3, #1
    ed0e:	cmp	r5, #7
    ed10:	str	r4, [sp, #148]	; 0x94
    ed12:	str	r5, [sp, #144]	; 0x90
    ed14:	str.w	r6, [r9]
    ed18:	str.w	r3, [r9, #4]
    ed1c:	bgt.w	f13e <_svfprintf_r+0xf1e>
    ed20:	add.w	r9, r9, #8
    ed24:	ldr	r2, [sp, #72]	; 0x48
    ed26:	ldr	r3, [sp, #76]	; 0x4c
    ed28:	str.w	r3, [r9]
    ed2c:	adds	r5, #1
    ed2e:	add	r4, r2
    ed30:	cmp	r5, #7
    ed32:	str	r4, [sp, #148]	; 0x94
    ed34:	str	r5, [sp, #144]	; 0x90
    ed36:	str.w	r2, [r9, #4]
    ed3a:	bgt.w	f158 <_svfprintf_r+0xf38>
    ed3e:	add.w	r9, r9, #8
    ed42:	movs	r3, #0
    ed44:	movs	r2, #0
    ed46:	ldrd	r0, r1, [sp, #64]	; 0x40
    ed4a:	bl	b488 <__aeabi_dcmpeq>
    ed4e:	ldr	r3, [sp, #56]	; 0x38
    ed50:	cmp	r0, #0
    ed52:	bne.w	eedc <_svfprintf_r+0xcbc>
    ed56:	subs	r3, #1
    ed58:	adds	r5, #1
    ed5a:	adds	r6, #1
    ed5c:	add	r4, r3
    ed5e:	cmp	r5, #7
    ed60:	str	r5, [sp, #144]	; 0x90
    ed62:	str	r4, [sp, #148]	; 0x94
    ed64:	str.w	r6, [r9]
    ed68:	str.w	r3, [r9, #4]
    ed6c:	bgt.w	ef5a <_svfprintf_r+0xd3a>
    ed70:	add.w	r9, r9, #8
    ed74:	ldr	r2, [sp, #84]	; 0x54
    ed76:	str.w	r2, [r9, #4]
    ed7a:	adds	r5, #1
    ed7c:	add	r4, r2
    ed7e:	add	r3, sp, #124	; 0x7c
    ed80:	cmp	r5, #7
    ed82:	str	r4, [sp, #148]	; 0x94
    ed84:	str	r5, [sp, #144]	; 0x90
    ed86:	str.w	r3, [r9]
    ed8a:	ble.w	e748 <_svfprintf_r+0x528>
    ed8e:	add	r2, sp, #140	; 0x8c
    ed90:	ldr	r1, [sp, #20]
    ed92:	ldr	r0, [sp, #24]
    ed94:	bl	f904 <__ssprint_r>
    ed98:	cmp	r0, #0
    ed9a:	bne.w	e414 <_svfprintf_r+0x1f4>
    ed9e:	ldr	r4, [sp, #148]	; 0x94
    eda0:	add.w	r9, sp, #192	; 0xc0
    eda4:	b.n	e74c <_svfprintf_r+0x52c>
    eda6:	add	r2, sp, #140	; 0x8c
    eda8:	ldr	r1, [sp, #20]
    edaa:	ldr	r0, [sp, #24]
    edac:	bl	f904 <__ssprint_r>
    edb0:	cmp	r0, #0
    edb2:	beq.w	e7e8 <_svfprintf_r+0x5c8>
    edb6:	b.w	e414 <_svfprintf_r+0x1f4>
    edba:	add	r2, sp, #140	; 0x8c
    edbc:	ldr	r1, [sp, #20]
    edbe:	ldr	r0, [sp, #24]
    edc0:	bl	f904 <__ssprint_r>
    edc4:	cmp	r0, #0
    edc6:	bne.w	e414 <_svfprintf_r+0x1f4>
    edca:	ldr	r4, [sp, #148]	; 0x94
    edcc:	add.w	r9, sp, #192	; 0xc0
    edd0:	b.n	e726 <_svfprintf_r+0x506>
    edd2:	add	r2, sp, #140	; 0x8c
    edd4:	ldr	r1, [sp, #20]
    edd6:	ldr	r0, [sp, #24]
    edd8:	bl	f904 <__ssprint_r>
    eddc:	cmp	r0, #0
    edde:	bne.w	e414 <_svfprintf_r+0x1f4>
    ede2:	ldr	r4, [sp, #148]	; 0x94
    ede4:	add.w	r9, sp, #192	; 0xc0
    ede8:	b.n	e68c <_svfprintf_r+0x46c>
    edea:	add	r2, sp, #140	; 0x8c
    edec:	ldr	r1, [sp, #20]
    edee:	ldr	r0, [sp, #24]
    edf0:	bl	f904 <__ssprint_r>
    edf4:	cmp	r0, #0
    edf6:	bne.w	e414 <_svfprintf_r+0x1f4>
    edfa:	ldr	r4, [sp, #148]	; 0x94
    edfc:	add.w	r9, sp, #192	; 0xc0
    ee00:	b.n	e6ac <_svfprintf_r+0x48c>
    ee02:	cmp.w	fp, #0
    ee06:	strb.w	r7, [sp, #111]	; 0x6f
    ee0a:	blt.w	f3cc <_svfprintf_r+0x11ac>
    ee0e:	bic.w	r3, r2, #128	; 0x80
    ee12:	str	r3, [sp, #12]
    ee14:	orrs.w	r3, r4, r5
    ee18:	bne.w	e9c2 <_svfprintf_r+0x7a2>
    ee1c:	cmp.w	fp, #0
    ee20:	beq.w	eb3c <_svfprintf_r+0x91c>
    ee24:	movs	r7, #0
    ee26:	b.n	eb98 <_svfprintf_r+0x978>
    ee28:	ldr	r5, [sp, #116]	; 0x74
    ee2a:	cmp	r5, #0
    ee2c:	ble.w	f3d2 <_svfprintf_r+0x11b2>
    ee30:	ldr	r3, [sp, #60]	; 0x3c
    ee32:	ldr	r2, [sp, #56]	; 0x38
    ee34:	cmp	r3, r2
    ee36:	it	ge
    ee38:	movge	r3, r2
    ee3a:	cmp	r3, #0
    ee3c:	mov	r5, r3
    ee3e:	ble.n	ee5c <_svfprintf_r+0xc3c>
    ee40:	ldr	r3, [sp, #144]	; 0x90
    ee42:	str.w	r6, [r9]
    ee46:	adds	r3, #1
    ee48:	add	r4, r5
    ee4a:	cmp	r3, #7
    ee4c:	str	r4, [sp, #148]	; 0x94
    ee4e:	str.w	r5, [r9, #4]
    ee52:	str	r3, [sp, #144]	; 0x90
    ee54:	bgt.w	f5aa <_svfprintf_r+0x138a>
    ee58:	add.w	r9, r9, #8
    ee5c:	ldr	r3, [sp, #60]	; 0x3c
    ee5e:	cmp	r5, #0
    ee60:	it	ge
    ee62:	subge	r3, r3, r5
    ee64:	cmp	r3, #0
    ee66:	mov	r5, r3
    ee68:	ble.w	f05c <_svfprintf_r+0xe3c>
    ee6c:	ldr	r2, [pc, #260]	; (ef74 <_svfprintf_r+0xd54>)
    ee6e:	ldr	r3, [sp, #144]	; 0x90
    ee70:	str	r2, [sp, #44]	; 0x2c
    ee72:	cmp	r5, #16
    ee74:	ble.w	f37e <_svfprintf_r+0x115e>
    ee78:	mov	r2, r4
    ee7a:	movs	r7, #16
    ee7c:	ldr.w	fp, [sp, #24]
    ee80:	ldr	r4, [sp, #20]
    ee82:	b.n	ee90 <_svfprintf_r+0xc70>
    ee84:	add.w	r9, r9, #8
    ee88:	subs	r5, #16
    ee8a:	cmp	r5, #16
    ee8c:	ble.w	f37c <_svfprintf_r+0x115c>
    ee90:	adds	r3, #1
    ee92:	adds	r2, #16
    ee94:	cmp	r3, #7
    ee96:	str	r2, [sp, #148]	; 0x94
    ee98:	str	r3, [sp, #144]	; 0x90
    ee9a:	str.w	sl, [r9]
    ee9e:	str.w	r7, [r9, #4]
    eea2:	ble.n	ee84 <_svfprintf_r+0xc64>
    eea4:	add	r2, sp, #140	; 0x8c
    eea6:	mov	r1, r4
    eea8:	mov	r0, fp
    eeaa:	bl	f904 <__ssprint_r>
    eeae:	cmp	r0, #0
    eeb0:	bne.w	e414 <_svfprintf_r+0x1f4>
    eeb4:	ldr	r2, [sp, #148]	; 0x94
    eeb6:	ldr	r3, [sp, #144]	; 0x90
    eeb8:	add.w	r9, sp, #192	; 0xc0
    eebc:	b.n	ee88 <_svfprintf_r+0xc68>
    eebe:	add	r2, sp, #140	; 0x8c
    eec0:	ldr	r1, [sp, #20]
    eec2:	ldr	r0, [sp, #24]
    eec4:	bl	f904 <__ssprint_r>
    eec8:	cmp	r0, #0
    eeca:	bne.w	e414 <_svfprintf_r+0x1f4>
    eece:	ldrb.w	r7, [sp, #111]	; 0x6f
    eed2:	ldr	r4, [sp, #148]	; 0x94
    eed4:	add.w	r9, sp, #192	; 0xc0
    eed8:	b.w	e66c <_svfprintf_r+0x44c>
    eedc:	subs	r6, r3, #1
    eede:	cmp	r6, #0
    eee0:	ble.w	ed74 <_svfprintf_r+0xb54>
    eee4:	ldr	r3, [pc, #140]	; (ef74 <_svfprintf_r+0xd54>)
    eee6:	str	r3, [sp, #44]	; 0x2c
    eee8:	cmp	r6, #16
    eeea:	ble.n	ef46 <_svfprintf_r+0xd26>
    eeec:	str.w	r8, [sp, #36]	; 0x24
    eef0:	movs	r7, #16
    eef2:	mov	r8, r6
    eef4:	ldr.w	fp, [sp, #24]
    eef8:	ldr	r6, [sp, #20]
    eefa:	b.n	ef0a <_svfprintf_r+0xcea>
    eefc:	sub.w	r8, r8, #16
    ef00:	cmp.w	r8, #16
    ef04:	add.w	r9, r9, #8
    ef08:	ble.n	ef40 <_svfprintf_r+0xd20>
    ef0a:	adds	r5, #1
    ef0c:	adds	r4, #16
    ef0e:	cmp	r5, #7
    ef10:	str	r4, [sp, #148]	; 0x94
    ef12:	str	r5, [sp, #144]	; 0x90
    ef14:	str.w	sl, [r9]
    ef18:	str.w	r7, [r9, #4]
    ef1c:	ble.n	eefc <_svfprintf_r+0xcdc>
    ef1e:	add	r2, sp, #140	; 0x8c
    ef20:	mov	r1, r6
    ef22:	mov	r0, fp
    ef24:	bl	f904 <__ssprint_r>
    ef28:	cmp	r0, #0
    ef2a:	bne.w	e414 <_svfprintf_r+0x1f4>
    ef2e:	sub.w	r8, r8, #16
    ef32:	cmp.w	r8, #16
    ef36:	ldr	r4, [sp, #148]	; 0x94
    ef38:	ldr	r5, [sp, #144]	; 0x90
    ef3a:	add.w	r9, sp, #192	; 0xc0
    ef3e:	bgt.n	ef0a <_svfprintf_r+0xcea>
    ef40:	mov	r6, r8
    ef42:	ldr.w	r8, [sp, #36]	; 0x24
    ef46:	ldr	r3, [sp, #44]	; 0x2c
    ef48:	adds	r5, #1
    ef4a:	add	r4, r6
    ef4c:	cmp	r5, #7
    ef4e:	str	r4, [sp, #148]	; 0x94
    ef50:	str	r5, [sp, #144]	; 0x90
    ef52:	stmia.w	r9, {r3, r6}
    ef56:	ble.w	ed70 <_svfprintf_r+0xb50>
    ef5a:	add	r2, sp, #140	; 0x8c
    ef5c:	ldr	r1, [sp, #20]
    ef5e:	ldr	r0, [sp, #24]
    ef60:	bl	f904 <__ssprint_r>
    ef64:	cmp	r0, #0
    ef66:	bne.w	e414 <_svfprintf_r+0x1f4>
    ef6a:	ldr	r4, [sp, #148]	; 0x94
    ef6c:	ldr	r5, [sp, #144]	; 0x90
    ef6e:	add.w	r9, sp, #192	; 0xc0
    ef72:	b.n	ed74 <_svfprintf_r+0xb54>
    ef74:	.word	0x000102e0
    ef78:	ldr	r1, [sp, #12]
    ef7a:	ands.w	r2, r1, #16
    ef7e:	beq.w	f328 <_svfprintf_r+0x1108>
    ef82:	ldr	r0, [sp, #40]	; 0x28
    ef84:	strb.w	r3, [sp, #111]	; 0x6f
    ef88:	cmp.w	fp, #0
    ef8c:	ldr	r4, [r0, #0]
    ef8e:	add.w	r7, r0, #4
    ef92:	mov.w	r5, #0
    ef96:	blt.n	efe6 <_svfprintf_r+0xdc6>
    ef98:	mov	r2, r1
    ef9a:	bic.w	r2, r2, #128	; 0x80
    ef9e:	str	r2, [sp, #12]
    efa0:	orrs.w	r2, r4, r5
    efa4:	str	r7, [sp, #40]	; 0x28
    efa6:	mov	r7, r3
    efa8:	bne.w	e57c <_svfprintf_r+0x35c>
    efac:	b.n	e94c <_svfprintf_r+0x72c>
    efae:	ldr	r3, [sp, #12]
    efb0:	lsls	r0, r3, #27
    efb2:	bmi.n	f00a <_svfprintf_r+0xdea>
    efb4:	ldr	r3, [sp, #12]
    efb6:	lsls	r1, r3, #25
    efb8:	bpl.n	f00a <_svfprintf_r+0xdea>
    efba:	ldr	r1, [sp, #40]	; 0x28
    efbc:	ldrsh.w	r4, [r1]
    efc0:	adds	r1, #4
    efc2:	asrs	r5, r4, #31
    efc4:	mov	r2, r4
    efc6:	mov	r3, r5
    efc8:	str	r1, [sp, #40]	; 0x28
    efca:	b.w	e556 <_svfprintf_r+0x336>
    efce:	ldr	r1, [sp, #40]	; 0x28
    efd0:	strb.w	r3, [sp, #111]	; 0x6f
    efd4:	cmp.w	fp, #0
    efd8:	ldr	r4, [r1, #0]
    efda:	add.w	r7, r1, #4
    efde:	mov.w	r5, #0
    efe2:	bge.w	f47e <_svfprintf_r+0x125e>
    efe6:	str	r7, [sp, #40]	; 0x28
    efe8:	mov	r7, r3
    efea:	orrs.w	r3, r4, r5
    efee:	bne.w	e57c <_svfprintf_r+0x35c>
    eff2:	b.n	e956 <_svfprintf_r+0x736>
    eff4:	adds	r3, #1
    eff6:	ldr	r2, [sp, #44]	; 0x2c
    eff8:	str	r3, [sp, #144]	; 0x90
    effa:	add	r4, r5
    effc:	cmp	r3, #7
    effe:	str	r4, [sp, #148]	; 0x94
    f000:	stmia.w	r9, {r2, r5}
    f004:	ble.w	e748 <_svfprintf_r+0x528>
    f008:	b.n	ed8e <_svfprintf_r+0xb6e>
    f00a:	ldr	r2, [sp, #40]	; 0x28
    f00c:	ldr	r4, [r2, #0]
    f00e:	mov	r3, r2
    f010:	adds	r3, #4
    f012:	asrs	r5, r4, #31
    f014:	mov	r2, r4
    f016:	str	r3, [sp, #40]	; 0x28
    f018:	cmp	r2, #0
    f01a:	mov	r3, r5
    f01c:	sbcs.w	r3, r3, #0
    f020:	bge.w	e560 <_svfprintf_r+0x340>
    f024:	negs	r4, r4
    f026:	mov.w	r7, #45	; 0x2d
    f02a:	sbc.w	r5, r5, r5, lsl #1
    f02e:	cmp.w	fp, #0
    f032:	strb.w	r7, [sp, #111]	; 0x6f
    f036:	blt.w	e57c <_svfprintf_r+0x35c>
    f03a:	ldr	r3, [sp, #12]
    f03c:	bic.w	r3, r3, #128	; 0x80
    f040:	str	r3, [sp, #12]
    f042:	b.w	e57c <_svfprintf_r+0x35c>
    f046:	add	r2, sp, #140	; 0x8c
    f048:	ldr	r1, [sp, #20]
    f04a:	ldr	r0, [sp, #24]
    f04c:	bl	f904 <__ssprint_r>
    f050:	cmp	r0, #0
    f052:	bne.w	e414 <_svfprintf_r+0x1f4>
    f056:	ldr	r4, [sp, #148]	; 0x94
    f058:	add.w	r9, sp, #192	; 0xc0
    f05c:	ldr	r2, [sp, #60]	; 0x3c
    f05e:	ldr	r3, [sp, #116]	; 0x74
    f060:	add	r2, r6
    f062:	mov	r7, r2
    f064:	ldr	r2, [sp, #56]	; 0x38
    f066:	cmp	r3, r2
    f068:	blt.n	f0fa <_svfprintf_r+0xeda>
    f06a:	ldr	r2, [sp, #12]
    f06c:	lsls	r5, r2, #31
    f06e:	bmi.n	f0fa <_svfprintf_r+0xeda>
    f070:	ldr	r1, [sp, #56]	; 0x38
    f072:	add	r6, r1
    f074:	subs	r5, r6, r7
    f076:	subs	r3, r1, r3
    f078:	cmp	r5, r3
    f07a:	it	ge
    f07c:	movge	r5, r3
    f07e:	cmp	r5, #0
    f080:	mov	r6, r5
    f082:	ble.n	f0a0 <_svfprintf_r+0xe80>
    f084:	ldr	r2, [sp, #144]	; 0x90
    f086:	str.w	r7, [r9]
    f08a:	adds	r2, #1
    f08c:	add	r4, r5
    f08e:	cmp	r2, #7
    f090:	str	r4, [sp, #148]	; 0x94
    f092:	str.w	r5, [r9, #4]
    f096:	str	r2, [sp, #144]	; 0x90
    f098:	bgt.w	f698 <_svfprintf_r+0x1478>
    f09c:	add.w	r9, r9, #8
    f0a0:	cmp	r6, #0
    f0a2:	ite	ge
    f0a4:	subge	r5, r3, r6
    f0a6:	movlt	r5, r3
    f0a8:	cmp	r5, #0
    f0aa:	ble.w	e74c <_svfprintf_r+0x52c>
    f0ae:	ldr	r2, [pc, #744]	; (f398 <_svfprintf_r+0x1178>)
    f0b0:	ldr	r3, [sp, #144]	; 0x90
    f0b2:	str	r2, [sp, #44]	; 0x2c
    f0b4:	cmp	r5, #16
    f0b6:	ble.n	eff4 <_svfprintf_r+0xdd4>
    f0b8:	movs	r6, #16
    f0ba:	ldr	r7, [sp, #24]
    f0bc:	ldr.w	fp, [sp, #20]
    f0c0:	b.n	f0cc <_svfprintf_r+0xeac>
    f0c2:	add.w	r9, r9, #8
    f0c6:	subs	r5, #16
    f0c8:	cmp	r5, #16
    f0ca:	ble.n	eff4 <_svfprintf_r+0xdd4>
    f0cc:	adds	r3, #1
    f0ce:	adds	r4, #16
    f0d0:	cmp	r3, #7
    f0d2:	str	r4, [sp, #148]	; 0x94
    f0d4:	str	r3, [sp, #144]	; 0x90
    f0d6:	str.w	sl, [r9]
    f0da:	str.w	r6, [r9, #4]
    f0de:	ble.n	f0c2 <_svfprintf_r+0xea2>
    f0e0:	add	r2, sp, #140	; 0x8c
    f0e2:	mov	r1, fp
    f0e4:	mov	r0, r7
    f0e6:	bl	f904 <__ssprint_r>
    f0ea:	cmp	r0, #0
    f0ec:	bne.w	e414 <_svfprintf_r+0x1f4>
    f0f0:	ldr	r4, [sp, #148]	; 0x94
    f0f2:	ldr	r3, [sp, #144]	; 0x90
    f0f4:	add.w	r9, sp, #192	; 0xc0
    f0f8:	b.n	f0c6 <_svfprintf_r+0xea6>
    f0fa:	ldr	r2, [sp, #144]	; 0x90
    f0fc:	ldr	r0, [sp, #72]	; 0x48
    f0fe:	ldr	r1, [sp, #76]	; 0x4c
    f100:	str.w	r1, [r9]
    f104:	adds	r2, #1
    f106:	add	r4, r0
    f108:	cmp	r2, #7
    f10a:	str	r4, [sp, #148]	; 0x94
    f10c:	str.w	r0, [r9, #4]
    f110:	str	r2, [sp, #144]	; 0x90
    f112:	bgt.w	f67e <_svfprintf_r+0x145e>
    f116:	add.w	r9, r9, #8
    f11a:	b.n	f070 <_svfprintf_r+0xe50>
    f11c:	ldr	r3, [sp, #12]
    f11e:	lsls	r0, r3, #31
    f120:	bmi.w	ed08 <_svfprintf_r+0xae8>
    f124:	adds	r5, #1
    f126:	adds	r4, #1
    f128:	movs	r3, #1
    f12a:	cmp	r5, #7
    f12c:	str	r4, [sp, #148]	; 0x94
    f12e:	str	r5, [sp, #144]	; 0x90
    f130:	str.w	r6, [r9]
    f134:	str.w	r3, [r9, #4]
    f138:	ble.w	ed70 <_svfprintf_r+0xb50>
    f13c:	b.n	ef5a <_svfprintf_r+0xd3a>
    f13e:	add	r2, sp, #140	; 0x8c
    f140:	ldr	r1, [sp, #20]
    f142:	ldr	r0, [sp, #24]
    f144:	bl	f904 <__ssprint_r>
    f148:	cmp	r0, #0
    f14a:	bne.w	e414 <_svfprintf_r+0x1f4>
    f14e:	ldr	r4, [sp, #148]	; 0x94
    f150:	ldr	r5, [sp, #144]	; 0x90
    f152:	add.w	r9, sp, #192	; 0xc0
    f156:	b.n	ed24 <_svfprintf_r+0xb04>
    f158:	add	r2, sp, #140	; 0x8c
    f15a:	ldr	r1, [sp, #20]
    f15c:	ldr	r0, [sp, #24]
    f15e:	bl	f904 <__ssprint_r>
    f162:	cmp	r0, #0
    f164:	bne.w	e414 <_svfprintf_r+0x1f4>
    f168:	ldr	r4, [sp, #148]	; 0x94
    f16a:	ldr	r5, [sp, #144]	; 0x90
    f16c:	add.w	r9, sp, #192	; 0xc0
    f170:	b.n	ed42 <_svfprintf_r+0xb22>
    f172:	add	r2, sp, #140	; 0x8c
    f174:	ldr	r1, [sp, #20]
    f176:	ldr	r0, [sp, #24]
    f178:	bl	f904 <__ssprint_r>
    f17c:	cmp	r0, #0
    f17e:	bne.w	e414 <_svfprintf_r+0x1f4>
    f182:	ldr	r4, [sp, #148]	; 0x94
    f184:	add.w	r9, sp, #192	; 0xc0
    f188:	b.w	e6b4 <_svfprintf_r+0x494>
    f18c:	ldr	r1, [sp, #12]
    f18e:	ands.w	r3, r1, #64	; 0x40
    f192:	beq.w	f308 <_svfprintf_r+0x10e8>
    f196:	ldr	r0, [sp, #40]	; 0x28
    f198:	strb.w	r2, [sp, #111]	; 0x6f
    f19c:	mov	r3, r0
    f19e:	cmp.w	fp, #0
    f1a2:	add.w	r3, r3, #4
    f1a6:	ldrh	r4, [r0, #0]
    f1a8:	mov.w	r5, #0
    f1ac:	blt.w	f530 <_svfprintf_r+0x1310>
    f1b0:	bic.w	r1, r1, #128	; 0x80
    f1b4:	str	r1, [sp, #12]
    f1b6:	orrs.w	r1, r4, r5
    f1ba:	str	r3, [sp, #40]	; 0x28
    f1bc:	beq.w	eb74 <_svfprintf_r+0x954>
    f1c0:	mov	r7, r2
    f1c2:	b.w	e46c <_svfprintf_r+0x24c>
    f1c6:	ldr	r3, [sp, #12]
    f1c8:	lsls	r7, r3, #27
    f1ca:	bmi.n	f1e4 <_svfprintf_r+0xfc4>
    f1cc:	ldr	r3, [sp, #12]
    f1ce:	lsls	r6, r3, #25
    f1d0:	bpl.n	f1e4 <_svfprintf_r+0xfc4>
    f1d2:	ldr	r2, [sp, #40]	; 0x28
    f1d4:	ldr	r3, [r2, #0]
    f1d6:	adds	r2, #4
    f1d8:	str	r2, [sp, #40]	; 0x28
    f1da:	ldrh.w	r2, [sp, #28]
    f1de:	strh	r2, [r3, #0]
    f1e0:	b.w	e26e <_svfprintf_r+0x4e>
    f1e4:	ldr	r2, [sp, #40]	; 0x28
    f1e6:	ldr	r3, [r2, #0]
    f1e8:	adds	r2, #4
    f1ea:	str	r2, [sp, #40]	; 0x28
    f1ec:	ldr	r2, [sp, #28]
    f1ee:	str	r2, [r3, #0]
    f1f0:	b.w	e26e <_svfprintf_r+0x4e>
    f1f4:	ldrd	r0, r1, [sp, #64]	; 0x40
    f1f8:	mov	r2, r0
    f1fa:	mov	r3, r1
    f1fc:	bl	b4ec <__aeabi_dcmpun>
    f200:	cmp	r0, #0
    f202:	bne.w	f800 <_svfprintf_r+0x15e0>
    f206:	ldr	r3, [sp, #52]	; 0x34
    f208:	cmp.w	fp, #4294967295
    f20c:	bic.w	r7, r3, #32
    f210:	beq.w	f6e2 <_svfprintf_r+0x14c2>
    f214:	cmp	r7, #71	; 0x47
    f216:	beq.w	f51e <_svfprintf_r+0x12fe>
    f21a:	ldr	r3, [sp, #68]	; 0x44
    f21c:	ldr	r2, [sp, #12]
    f21e:	cmp	r3, #0
    f220:	orr.w	r2, r2, #256	; 0x100
    f224:	str	r2, [sp, #44]	; 0x2c
    f226:	blt.w	f71a <_svfprintf_r+0x14fa>
    f22a:	vldr	d7, [sp, #64]	; 0x40
    f22e:	vstr	d7, [sp, #96]	; 0x60
    f232:	movs	r3, #0
    f234:	str	r3, [sp, #16]
    f236:	ldr	r3, [sp, #52]	; 0x34
    f238:	cmp	r3, #102	; 0x66
    f23a:	beq.w	f6e8 <_svfprintf_r+0x14c8>
    f23e:	cmp	r3, #70	; 0x46
    f240:	beq.w	f4ce <_svfprintf_r+0x12ae>
    f244:	cmp	r7, #69	; 0x45
    f246:	ite	eq
    f248:	addeq.w	r5, fp, #1
    f24c:	movne	r5, fp
    f24e:	add	r2, sp, #132	; 0x84
    f250:	add	r3, sp, #120	; 0x78
    f252:	str	r2, [sp, #4]
    f254:	str	r3, [sp, #0]
    f256:	mov	r2, r5
    f258:	add	r3, sp, #116	; 0x74
    f25a:	movs	r1, #2
    f25c:	vldr	d0, [sp, #96]	; 0x60
    f260:	ldr	r0, [sp, #24]
    f262:	bl	d3e8 <_dtoa_r>
    f266:	ldr	r3, [sp, #52]	; 0x34
    f268:	cmp	r3, #103	; 0x67
    f26a:	mov	r6, r0
    f26c:	bne.w	f746 <_svfprintf_r+0x1526>
    f270:	ldr	r3, [sp, #12]
    f272:	lsls	r2, r3, #31
    f274:	bpl.w	f7ea <_svfprintf_r+0x15ca>
    f278:	adds	r4, r6, r5
    f27a:	movs	r2, #0
    f27c:	movs	r3, #0
    f27e:	ldrd	r0, r1, [sp, #96]	; 0x60
    f282:	bl	b488 <__aeabi_dcmpeq>
    f286:	cmp	r0, #0
    f288:	bne.w	f5a6 <_svfprintf_r+0x1386>
    f28c:	ldr	r3, [sp, #132]	; 0x84
    f28e:	cmp	r4, r3
    f290:	bls.n	f2a0 <_svfprintf_r+0x1080>
    f292:	movs	r1, #48	; 0x30
    f294:	adds	r2, r3, #1
    f296:	str	r2, [sp, #132]	; 0x84
    f298:	strb	r1, [r3, #0]
    f29a:	ldr	r3, [sp, #132]	; 0x84
    f29c:	cmp	r4, r3
    f29e:	bhi.n	f294 <_svfprintf_r+0x1074>
    f2a0:	subs	r3, r3, r6
    f2a2:	cmp	r7, #71	; 0x47
    f2a4:	str	r3, [sp, #56]	; 0x38
    f2a6:	beq.w	f598 <_svfprintf_r+0x1378>
    f2aa:	ldr	r3, [sp, #52]	; 0x34
    f2ac:	cmp	r3, #101	; 0x65
    f2ae:	ble.w	f764 <_svfprintf_r+0x1544>
    f2b2:	ldr	r3, [sp, #52]	; 0x34
    f2b4:	cmp	r3, #102	; 0x66
    f2b6:	ldr	r3, [sp, #116]	; 0x74
    f2b8:	str	r3, [sp, #60]	; 0x3c
    f2ba:	beq.w	f77e <_svfprintf_r+0x155e>
    f2be:	ldr	r2, [sp, #60]	; 0x3c
    f2c0:	ldr	r1, [sp, #56]	; 0x38
    f2c2:	cmp	r2, r1
    f2c4:	blt.w	f72c <_svfprintf_r+0x150c>
    f2c8:	ldr	r3, [sp, #12]
    f2ca:	lsls	r1, r3, #31
    f2cc:	bmi.w	f7ee <_svfprintf_r+0x15ce>
    f2d0:	bic.w	r3, r2, r2, asr #31
    f2d4:	str	r2, [sp, #36]	; 0x24
    f2d6:	movs	r2, #103	; 0x67
    f2d8:	str	r2, [sp, #52]	; 0x34
    f2da:	ldr	r2, [sp, #16]
    f2dc:	cmp	r2, #0
    f2de:	bne.w	f540 <_svfprintf_r+0x1320>
    f2e2:	str	r3, [sp, #16]
    f2e4:	ldr	r3, [sp, #44]	; 0x2c
    f2e6:	str	r3, [sp, #12]
    f2e8:	mov	fp, r2
    f2ea:	ldrb.w	r7, [sp, #111]	; 0x6f
    f2ee:	b.w	e5c4 <_svfprintf_r+0x3a4>
    f2f2:	bic.w	r7, r7, #7
    f2f6:	vldr	d7, [r7]
    f2fa:	add.w	r3, r7, #8
    f2fe:	vstr	d7, [sp, #64]	; 0x40
    f302:	str	r3, [sp, #40]	; 0x28
    f304:	b.w	e81c <_svfprintf_r+0x5fc>
    f308:	ldr	r1, [sp, #40]	; 0x28
    f30a:	strb.w	r3, [sp, #111]	; 0x6f
    f30e:	cmp.w	fp, #0
    f312:	ldr	r4, [r1, #0]
    f314:	add.w	r7, r1, #4
    f318:	mov.w	r5, #0
    f31c:	bge.w	f478 <_svfprintf_r+0x1258>
    f320:	str	r7, [sp, #40]	; 0x28
    f322:	movs	r7, #0
    f324:	b.w	e46c <_svfprintf_r+0x24c>
    f328:	ldr	r1, [sp, #12]
    f32a:	ands.w	r3, r1, #64	; 0x40
    f32e:	beq.w	efce <_svfprintf_r+0xdae>
    f332:	ldr	r0, [sp, #40]	; 0x28
    f334:	strb.w	r2, [sp, #111]	; 0x6f
    f338:	mov	r3, r0
    f33a:	cmp.w	fp, #0
    f33e:	add.w	r3, r3, #4
    f342:	ldrh	r4, [r0, #0]
    f344:	mov.w	r5, #0
    f348:	blt.w	f52a <_svfprintf_r+0x130a>
    f34c:	bic.w	r1, r1, #128	; 0x80
    f350:	str	r1, [sp, #12]
    f352:	orrs.w	r1, r4, r5
    f356:	str	r3, [sp, #40]	; 0x28
    f358:	mov	r7, r2
    f35a:	bne.w	e57c <_svfprintf_r+0x35c>
    f35e:	b.w	e94c <_svfprintf_r+0x72c>
    f362:	ldr	r3, [sp, #12]
    f364:	ldr	r2, [sp, #40]	; 0x28
    f366:	tst.w	r3, #64	; 0x40
    f36a:	mov	r3, r2
    f36c:	beq.w	f534 <_svfprintf_r+0x1314>
    f370:	adds	r3, #4
    f372:	ldrh	r4, [r2, #0]
    f374:	str	r3, [sp, #40]	; 0x28
    f376:	movs	r5, #0
    f378:	b.w	e986 <_svfprintf_r+0x766>
    f37c:	mov	r4, r2
    f37e:	adds	r3, #1
    f380:	ldr	r2, [sp, #44]	; 0x2c
    f382:	str	r3, [sp, #144]	; 0x90
    f384:	add	r4, r5
    f386:	cmp	r3, #7
    f388:	str	r4, [sp, #148]	; 0x94
    f38a:	stmia.w	r9, {r2, r5}
    f38e:	bgt.w	f046 <_svfprintf_r+0xe26>
    f392:	add.w	r9, r9, #8
    f396:	b.n	f05c <_svfprintf_r+0xe3c>
    f398:	.word	0x000102e0
    f39c:	movs	r7, #0
    f39e:	cmp	fp, r7
    f3a0:	strb.w	r7, [sp, #111]	; 0x6f
    f3a4:	blt.w	eb98 <_svfprintf_r+0x978>
    f3a8:	ldr	r3, [sp, #12]
    f3aa:	bic.w	r3, r3, #128	; 0x80
    f3ae:	str	r3, [sp, #12]
    f3b0:	b.w	eb34 <_svfprintf_r+0x914>
    f3b4:	add	r2, sp, #140	; 0x8c
    f3b6:	ldr	r1, [sp, #20]
    f3b8:	ldr	r0, [sp, #24]
    f3ba:	bl	f904 <__ssprint_r>
    f3be:	cmp	r0, #0
    f3c0:	bne.w	e414 <_svfprintf_r+0x1f4>
    f3c4:	ldr	r4, [sp, #148]	; 0x94
    f3c6:	add.w	r9, sp, #192	; 0xc0
    f3ca:	b.n	ebdc <_svfprintf_r+0x9bc>
    f3cc:	ldr	r7, [sp, #40]	; 0x28
    f3ce:	b.w	eb8a <_svfprintf_r+0x96a>
    f3d2:	ldr	r3, [sp, #144]	; 0x90
    f3d4:	ldr	r2, [pc, #736]	; (f6b8 <_svfprintf_r+0x1498>)
    f3d6:	str.w	r2, [r9]
    f3da:	adds	r3, #1
    f3dc:	adds	r4, #1
    f3de:	movs	r2, #1
    f3e0:	cmp	r3, #7
    f3e2:	str	r4, [sp, #148]	; 0x94
    f3e4:	str	r3, [sp, #144]	; 0x90
    f3e6:	str.w	r2, [r9, #4]
    f3ea:	bgt.w	f504 <_svfprintf_r+0x12e4>
    f3ee:	add.w	r9, r9, #8
    f3f2:	cbnz	r5, f400 <_svfprintf_r+0x11e0>
    f3f4:	ldr	r3, [sp, #56]	; 0x38
    f3f6:	cbnz	r3, f400 <_svfprintf_r+0x11e0>
    f3f8:	ldr	r3, [sp, #12]
    f3fa:	lsls	r7, r3, #31
    f3fc:	bpl.w	e74c <_svfprintf_r+0x52c>
    f400:	ldr	r3, [sp, #144]	; 0x90
    f402:	ldr	r1, [sp, #72]	; 0x48
    f404:	ldr	r2, [sp, #76]	; 0x4c
    f406:	str.w	r2, [r9]
    f40a:	adds	r3, #1
    f40c:	add	r4, r1
    f40e:	cmp	r3, #7
    f410:	str	r4, [sp, #148]	; 0x94
    f412:	str.w	r1, [r9, #4]
    f416:	str	r3, [sp, #144]	; 0x90
    f418:	bgt.w	f7b6 <_svfprintf_r+0x1596>
    f41c:	add.w	r9, r9, #8
    f420:	negs	r5, r5
    f422:	cmp	r5, #0
    f424:	ble.w	f57c <_svfprintf_r+0x135c>
    f428:	ldr	r2, [pc, #656]	; (f6bc <_svfprintf_r+0x149c>)
    f42a:	str	r2, [sp, #44]	; 0x2c
    f42c:	cmp	r5, #16
    f42e:	ble.w	f5c4 <_svfprintf_r+0x13a4>
    f432:	mov	r2, r4
    f434:	movs	r7, #16
    f436:	ldr.w	fp, [sp, #24]
    f43a:	ldr	r4, [sp, #20]
    f43c:	b.n	f44a <_svfprintf_r+0x122a>
    f43e:	add.w	r9, r9, #8
    f442:	subs	r5, #16
    f444:	cmp	r5, #16
    f446:	ble.w	f5c2 <_svfprintf_r+0x13a2>
    f44a:	adds	r3, #1
    f44c:	adds	r2, #16
    f44e:	cmp	r3, #7
    f450:	str	r2, [sp, #148]	; 0x94
    f452:	str	r3, [sp, #144]	; 0x90
    f454:	str.w	sl, [r9]
    f458:	str.w	r7, [r9, #4]
    f45c:	ble.n	f43e <_svfprintf_r+0x121e>
    f45e:	add	r2, sp, #140	; 0x8c
    f460:	mov	r1, r4
    f462:	mov	r0, fp
    f464:	bl	f904 <__ssprint_r>
    f468:	cmp	r0, #0
    f46a:	bne.w	e414 <_svfprintf_r+0x1f4>
    f46e:	ldr	r2, [sp, #148]	; 0x94
    f470:	ldr	r3, [sp, #144]	; 0x90
    f472:	add.w	r9, sp, #192	; 0xc0
    f476:	b.n	f442 <_svfprintf_r+0x1222>
    f478:	ldr	r2, [sp, #12]
    f47a:	b.w	e8f0 <_svfprintf_r+0x6d0>
    f47e:	ldr	r2, [sp, #12]
    f480:	b.n	ef9a <_svfprintf_r+0xd7a>
    f482:	ldr	r3, [sp, #12]
    f484:	orr.w	r3, r3, #32
    f488:	str	r3, [sp, #12]
    f48a:	add.w	r8, r8, #1
    f48e:	ldrb.w	r3, [r8]
    f492:	b.w	e2d4 <_svfprintf_r+0xb4>
    f496:	add	r2, sp, #140	; 0x8c
    f498:	ldr	r1, [sp, #20]
    f49a:	ldr	r0, [sp, #24]
    f49c:	bl	f904 <__ssprint_r>
    f4a0:	cmp	r0, #0
    f4a2:	bne.w	e414 <_svfprintf_r+0x1f4>
    f4a6:	ldr	r4, [sp, #148]	; 0x94
    f4a8:	add.w	r9, sp, #192	; 0xc0
    f4ac:	b.w	ec0c <_svfprintf_r+0x9ec>
    f4b0:	movs	r1, #64	; 0x40
    f4b2:	ldr	r0, [sp, #24]
    f4b4:	bl	b908 <_malloc_r>
    f4b8:	ldr	r2, [sp, #20]
    f4ba:	str	r0, [r2, #0]
    f4bc:	str	r0, [r2, #16]
    f4be:	cmp	r0, #0
    f4c0:	beq.w	f8aa <_svfprintf_r+0x168a>
    f4c4:	ldr	r2, [sp, #20]
    f4c6:	movs	r3, #64	; 0x40
    f4c8:	str	r3, [r2, #20]
    f4ca:	b.w	e24e <_svfprintf_r+0x2e>
    f4ce:	add	r2, sp, #132	; 0x84
    f4d0:	add	r3, sp, #120	; 0x78
    f4d2:	str	r2, [sp, #4]
    f4d4:	str	r3, [sp, #0]
    f4d6:	mov	r2, fp
    f4d8:	add	r3, sp, #116	; 0x74
    f4da:	movs	r1, #3
    f4dc:	vldr	d0, [sp, #96]	; 0x60
    f4e0:	ldr	r0, [sp, #24]
    f4e2:	bl	d3e8 <_dtoa_r>
    f4e6:	mov	r5, fp
    f4e8:	mov	r6, r0
    f4ea:	ldr	r3, [sp, #52]	; 0x34
    f4ec:	cmp	r3, #70	; 0x46
    f4ee:	add.w	r4, r6, r5
    f4f2:	bne.w	f27a <_svfprintf_r+0x105a>
    f4f6:	ldrb	r3, [r6, #0]
    f4f8:	cmp	r3, #48	; 0x30
    f4fa:	beq.w	f80c <_svfprintf_r+0x15ec>
    f4fe:	ldr	r5, [sp, #116]	; 0x74
    f500:	add	r4, r5
    f502:	b.n	f27a <_svfprintf_r+0x105a>
    f504:	add	r2, sp, #140	; 0x8c
    f506:	ldr	r1, [sp, #20]
    f508:	ldr	r0, [sp, #24]
    f50a:	bl	f904 <__ssprint_r>
    f50e:	cmp	r0, #0
    f510:	bne.w	e414 <_svfprintf_r+0x1f4>
    f514:	ldr	r5, [sp, #116]	; 0x74
    f516:	ldr	r4, [sp, #148]	; 0x94
    f518:	add.w	r9, sp, #192	; 0xc0
    f51c:	b.n	f3f2 <_svfprintf_r+0x11d2>
    f51e:	cmp.w	fp, #0
    f522:	it	eq
    f524:	moveq.w	fp, #1
    f528:	b.n	f21a <_svfprintf_r+0xffa>
    f52a:	str	r3, [sp, #40]	; 0x28
    f52c:	mov	r7, r2
    f52e:	b.n	efea <_svfprintf_r+0xdca>
    f530:	str	r3, [sp, #40]	; 0x28
    f532:	b.n	f322 <_svfprintf_r+0x1102>
    f534:	adds	r3, #4
    f536:	ldr	r4, [r2, #0]
    f538:	str	r3, [sp, #40]	; 0x28
    f53a:	movs	r5, #0
    f53c:	b.w	e986 <_svfprintf_r+0x766>
    f540:	movs	r7, #45	; 0x2d
    f542:	str	r3, [sp, #16]
    f544:	ldr	r3, [sp, #44]	; 0x2c
    f546:	str	r3, [sp, #12]
    f548:	strb.w	r7, [sp, #111]	; 0x6f
    f54c:	mov.w	fp, #0
    f550:	b.w	e5c6 <_svfprintf_r+0x3a6>
    f554:	mov	r0, r6
    f556:	bl	c640 <strlen>
    f55a:	mov	fp, r4
    f55c:	mov	r3, r0
    f55e:	str	r0, [sp, #36]	; 0x24
    f560:	b.w	eaa8 <_svfprintf_r+0x888>
    f564:	add	r2, sp, #140	; 0x8c
    f566:	ldr	r1, [sp, #20]
    f568:	ldr	r0, [sp, #24]
    f56a:	bl	f904 <__ssprint_r>
    f56e:	cmp	r0, #0
    f570:	bne.w	e414 <_svfprintf_r+0x1f4>
    f574:	ldr	r4, [sp, #148]	; 0x94
    f576:	ldr	r3, [sp, #144]	; 0x90
    f578:	add.w	r9, sp, #192	; 0xc0
    f57c:	ldr	r1, [sp, #56]	; 0x38
    f57e:	str.w	r6, [r9]
    f582:	adds	r3, #1
    f584:	add	r4, r1
    f586:	cmp	r3, #7
    f588:	str	r4, [sp, #148]	; 0x94
    f58a:	str	r3, [sp, #144]	; 0x90
    f58c:	str.w	r1, [r9, #4]
    f590:	ble.w	e748 <_svfprintf_r+0x528>
    f594:	b.w	ed8e <_svfprintf_r+0xb6e>
    f598:	ldr	r3, [sp, #116]	; 0x74
    f59a:	adds	r5, r3, #3
    f59c:	blt.n	f5dc <_svfprintf_r+0x13bc>
    f59e:	cmp	fp, r3
    f5a0:	blt.n	f5dc <_svfprintf_r+0x13bc>
    f5a2:	str	r3, [sp, #60]	; 0x3c
    f5a4:	b.n	f2be <_svfprintf_r+0x109e>
    f5a6:	mov	r3, r4
    f5a8:	b.n	f2a0 <_svfprintf_r+0x1080>
    f5aa:	add	r2, sp, #140	; 0x8c
    f5ac:	ldr	r1, [sp, #20]
    f5ae:	ldr	r0, [sp, #24]
    f5b0:	bl	f904 <__ssprint_r>
    f5b4:	cmp	r0, #0
    f5b6:	bne.w	e414 <_svfprintf_r+0x1f4>
    f5ba:	ldr	r4, [sp, #148]	; 0x94
    f5bc:	add.w	r9, sp, #192	; 0xc0
    f5c0:	b.n	ee5c <_svfprintf_r+0xc3c>
    f5c2:	mov	r4, r2
    f5c4:	adds	r3, #1
    f5c6:	ldr	r2, [sp, #44]	; 0x2c
    f5c8:	str	r3, [sp, #144]	; 0x90
    f5ca:	add	r4, r5
    f5cc:	cmp	r3, #7
    f5ce:	str	r4, [sp, #148]	; 0x94
    f5d0:	stmia.w	r9, {r2, r5}
    f5d4:	bgt.n	f564 <_svfprintf_r+0x1344>
    f5d6:	add.w	r9, r9, #8
    f5da:	b.n	f57c <_svfprintf_r+0x135c>
    f5dc:	ldr	r2, [sp, #52]	; 0x34
    f5de:	subs	r2, #2
    f5e0:	str	r2, [sp, #52]	; 0x34
    f5e2:	subs	r3, #1
    f5e4:	cmp	r3, #0
    f5e6:	ldrb.w	r2, [sp, #52]	; 0x34
    f5ea:	str	r3, [sp, #116]	; 0x74
    f5ec:	it	lt
    f5ee:	neglt	r3, r3
    f5f0:	strb.w	r2, [sp, #124]	; 0x7c
    f5f4:	ite	lt
    f5f6:	movlt	r2, #45	; 0x2d
    f5f8:	movge	r2, #43	; 0x2b
    f5fa:	cmp	r3, #9
    f5fc:	strb.w	r2, [sp, #125]	; 0x7d
    f600:	ble.w	f7da <_svfprintf_r+0x15ba>
    f604:	add.w	r0, sp, #139	; 0x8b
    f608:	mov	r4, r0
    f60a:	ldr	r2, [pc, #180]	; (f6c0 <_svfprintf_r+0x14a0>)
    f60c:	smull	r2, r1, r2, r3
    f610:	asrs	r2, r3, #31
    f612:	rsb	r2, r2, r1, asr #2
    f616:	add.w	r1, r2, r2, lsl #2
    f61a:	sub.w	r3, r3, r1, lsl #1
    f61e:	add.w	r1, r3, #48	; 0x30
    f622:	cmp	r2, #9
    f624:	mov	r3, r2
    f626:	strb.w	r1, [r4, #-1]!
    f62a:	bgt.n	f60a <_svfprintf_r+0x13ea>
    f62c:	mov	r1, r4
    f62e:	adds	r3, #48	; 0x30
    f630:	uxtb	r2, r3
    f632:	strb.w	r2, [r1, #-1]!
    f636:	cmp	r0, r1
    f638:	bls.w	f8a4 <_svfprintf_r+0x1684>
    f63c:	add.w	r1, sp, #126	; 0x7e
    f640:	mov	r3, r4
    f642:	b.n	f648 <_svfprintf_r+0x1428>
    f644:	ldrb.w	r2, [r3], #1
    f648:	strb.w	r2, [r1], #1
    f64c:	cmp	r0, r3
    f64e:	bne.n	f644 <_svfprintf_r+0x1424>
    f650:	adds	r3, r0, #1
    f652:	subs	r3, r3, r4
    f654:	add.w	r2, sp, #126	; 0x7e
    f658:	add	r3, r2
    f65a:	add	r2, sp, #124	; 0x7c
    f65c:	subs	r3, r3, r2
    f65e:	ldr	r2, [sp, #56]	; 0x38
    f660:	str	r3, [sp, #84]	; 0x54
    f662:	cmp	r2, #1
    f664:	add	r3, r2
    f666:	str	r3, [sp, #36]	; 0x24
    f668:	ble.w	f83a <_svfprintf_r+0x161a>
    f66c:	ldr	r3, [sp, #36]	; 0x24
    f66e:	ldr	r2, [sp, #72]	; 0x48
    f670:	add	r3, r2
    f672:	movs	r2, #0
    f674:	str	r3, [sp, #36]	; 0x24
    f676:	str	r2, [sp, #60]	; 0x3c
    f678:	bic.w	r3, r3, r3, asr #31
    f67c:	b.n	f2da <_svfprintf_r+0x10ba>
    f67e:	add	r2, sp, #140	; 0x8c
    f680:	ldr	r1, [sp, #20]
    f682:	ldr	r0, [sp, #24]
    f684:	bl	f904 <__ssprint_r>
    f688:	cmp	r0, #0
    f68a:	bne.w	e414 <_svfprintf_r+0x1f4>
    f68e:	ldr	r3, [sp, #116]	; 0x74
    f690:	ldr	r4, [sp, #148]	; 0x94
    f692:	add.w	r9, sp, #192	; 0xc0
    f696:	b.n	f070 <_svfprintf_r+0xe50>
    f698:	add	r2, sp, #140	; 0x8c
    f69a:	ldr	r1, [sp, #20]
    f69c:	ldr	r0, [sp, #24]
    f69e:	bl	f904 <__ssprint_r>
    f6a2:	cmp	r0, #0
    f6a4:	bne.w	e414 <_svfprintf_r+0x1f4>
    f6a8:	ldr	r3, [sp, #116]	; 0x74
    f6aa:	ldr	r2, [sp, #56]	; 0x38
    f6ac:	ldr	r4, [sp, #148]	; 0x94
    f6ae:	subs	r3, r2, r3
    f6b0:	add.w	r9, sp, #192	; 0xc0
    f6b4:	b.n	f0a0 <_svfprintf_r+0xe80>
    f6b6:	nop
    f6b8:	.word	0x000102dc
    f6bc:	.word	0x000102e0
    f6c0:	.word	0x66666667
    f6c4:	cmp	r5, #6
    f6c6:	mov	r3, r5
    f6c8:	it	cs
    f6ca:	movcs	r3, #6
    f6cc:	str	r3, [sp, #36]	; 0x24
    f6ce:	bic.w	r3, r3, r3, asr #31
    f6d2:	mov	fp, r6
    f6d4:	str	r7, [sp, #40]	; 0x28
    f6d6:	str	r6, [sp, #60]	; 0x3c
    f6d8:	mov	r7, r6
    f6da:	str	r3, [sp, #16]
    f6dc:	ldr	r6, [pc, #536]	; (f8f8 <_svfprintf_r+0x16d8>)
    f6de:	b.w	e5c4 <_svfprintf_r+0x3a4>
    f6e2:	mov.w	fp, #6
    f6e6:	b.n	f21a <_svfprintf_r+0xffa>
    f6e8:	add	r2, sp, #132	; 0x84
    f6ea:	add	r3, sp, #120	; 0x78
    f6ec:	str	r2, [sp, #4]
    f6ee:	str	r3, [sp, #0]
    f6f0:	mov	r2, fp
    f6f2:	add	r3, sp, #116	; 0x74
    f6f4:	movs	r1, #3
    f6f6:	vldr	d0, [sp, #96]	; 0x60
    f6fa:	ldr	r0, [sp, #24]
    f6fc:	bl	d3e8 <_dtoa_r>
    f700:	mov	r5, fp
    f702:	mov	r6, r0
    f704:	add.w	r4, r0, fp
    f708:	b.n	f4f6 <_svfprintf_r+0x12d6>
    f70a:	movs	r7, #45	; 0x2d
    f70c:	strb.w	r7, [sp, #111]	; 0x6f
    f710:	b.w	e86a <_svfprintf_r+0x64a>
    f714:	str	r3, [sp, #12]
    f716:	b.w	e9c2 <_svfprintf_r+0x7a2>
    f71a:	ldrd	r1, r2, [sp, #64]	; 0x40
    f71e:	add.w	r3, r2, #2147483648	; 0x80000000
    f722:	str	r3, [sp, #100]	; 0x64
    f724:	movs	r3, #45	; 0x2d
    f726:	str	r1, [sp, #96]	; 0x60
    f728:	str	r3, [sp, #16]
    f72a:	b.n	f236 <_svfprintf_r+0x1016>
    f72c:	ldr	r2, [sp, #72]	; 0x48
    f72e:	ldr	r3, [sp, #56]	; 0x38
    f730:	add	r3, r2
    f732:	ldr	r2, [sp, #60]	; 0x3c
    f734:	str	r3, [sp, #36]	; 0x24
    f736:	cmp	r2, #0
    f738:	ble.w	f84e <_svfprintf_r+0x162e>
    f73c:	movs	r2, #103	; 0x67
    f73e:	bic.w	r3, r3, r3, asr #31
    f742:	str	r2, [sp, #52]	; 0x34
    f744:	b.n	f2da <_svfprintf_r+0x10ba>
    f746:	ldr	r3, [sp, #52]	; 0x34
    f748:	cmp	r3, #71	; 0x47
    f74a:	bne.w	f278 <_svfprintf_r+0x1058>
    f74e:	ldr	r3, [sp, #12]
    f750:	lsls	r3, r3, #31
    f752:	bmi.w	f4ea <_svfprintf_r+0x12ca>
    f756:	ldr	r3, [sp, #132]	; 0x84
    f758:	cmp	r7, #71	; 0x47
    f75a:	sub.w	r3, r3, r6
    f75e:	str	r3, [sp, #56]	; 0x38
    f760:	beq.w	f598 <_svfprintf_r+0x1378>
    f764:	ldr	r3, [sp, #116]	; 0x74
    f766:	b.n	f5e2 <_svfprintf_r+0x13c2>
    f768:	bic.w	r3, r5, r5, asr #31
    f76c:	str	r7, [sp, #40]	; 0x28
    f76e:	str	r3, [sp, #16]
    f770:	str	r5, [sp, #36]	; 0x24
    f772:	mov	fp, r0
    f774:	str	r0, [sp, #60]	; 0x3c
    f776:	ldrb.w	r7, [sp, #111]	; 0x6f
    f77a:	b.w	e5c4 <_svfprintf_r+0x3a4>
    f77e:	cmp	r3, #0
    f780:	ble.n	f85e <_svfprintf_r+0x163e>
    f782:	cmp.w	fp, #0
    f786:	bne.n	f828 <_svfprintf_r+0x1608>
    f788:	ldr	r2, [sp, #12]
    f78a:	lsls	r4, r2, #31
    f78c:	bmi.n	f828 <_svfprintf_r+0x1608>
    f78e:	mov	r2, r3
    f790:	str	r2, [sp, #36]	; 0x24
    f792:	bic.w	r3, r3, r3, asr #31
    f796:	b.n	f2da <_svfprintf_r+0x10ba>
    f798:	ldr	r3, [sp, #12]
    f79a:	lsls	r3, r3, #31
    f79c:	mov	r7, fp
    f79e:	bpl.n	f7ac <_svfprintf_r+0x158c>
    f7a0:	add	r6, sp, #256	; 0x100
    f7a2:	movs	r3, #48	; 0x30
    f7a4:	strb.w	r3, [r6, #-65]!
    f7a8:	b.w	e5b0 <_svfprintf_r+0x390>
    f7ac:	str.w	fp, [sp, #36]	; 0x24
    f7b0:	add	r6, sp, #192	; 0xc0
    f7b2:	b.w	e5b6 <_svfprintf_r+0x396>
    f7b6:	add	r2, sp, #140	; 0x8c
    f7b8:	ldr	r1, [sp, #20]
    f7ba:	ldr	r0, [sp, #24]
    f7bc:	bl	f904 <__ssprint_r>
    f7c0:	cmp	r0, #0
    f7c2:	bne.w	e414 <_svfprintf_r+0x1f4>
    f7c6:	ldr	r5, [sp, #116]	; 0x74
    f7c8:	ldr	r4, [sp, #148]	; 0x94
    f7ca:	ldr	r3, [sp, #144]	; 0x90
    f7cc:	add.w	r9, sp, #192	; 0xc0
    f7d0:	b.n	f420 <_svfprintf_r+0x1200>
    f7d2:	mov	r8, r4
    f7d4:	movs	r5, #0
    f7d6:	b.w	e2d8 <_svfprintf_r+0xb8>
    f7da:	adds	r3, #48	; 0x30
    f7dc:	movs	r2, #48	; 0x30
    f7de:	strb.w	r3, [sp, #127]	; 0x7f
    f7e2:	strb.w	r2, [sp, #126]	; 0x7e
    f7e6:	add	r3, sp, #128	; 0x80
    f7e8:	b.n	f65a <_svfprintf_r+0x143a>
    f7ea:	ldr	r3, [sp, #132]	; 0x84
    f7ec:	b.n	f2a0 <_svfprintf_r+0x1080>
    f7ee:	ldr	r2, [sp, #72]	; 0x48
    f7f0:	ldr	r3, [sp, #60]	; 0x3c
    f7f2:	add	r3, r2
    f7f4:	movs	r2, #103	; 0x67
    f7f6:	str	r3, [sp, #36]	; 0x24
    f7f8:	str	r2, [sp, #52]	; 0x34
    f7fa:	bic.w	r3, r3, r3, asr #31
    f7fe:	b.n	f2da <_svfprintf_r+0x10ba>
    f800:	ldr	r6, [pc, #248]	; (f8fc <_svfprintf_r+0x16dc>)
    f802:	ldr	r3, [pc, #252]	; (f900 <_svfprintf_r+0x16e0>)
    f804:	ldrb.w	r7, [sp, #111]	; 0x6f
    f808:	b.w	e86e <_svfprintf_r+0x64e>
    f80c:	movs	r2, #0
    f80e:	movs	r3, #0
    f810:	ldrd	r0, r1, [sp, #96]	; 0x60
    f814:	bl	b488 <__aeabi_dcmpeq>
    f818:	cmp	r0, #0
    f81a:	bne.w	f4fe <_svfprintf_r+0x12de>
    f81e:	rsb	r5, r5, #1
    f822:	str	r5, [sp, #116]	; 0x74
    f824:	add	r4, r5
    f826:	b.n	f27a <_svfprintf_r+0x105a>
    f828:	ldr	r3, [sp, #60]	; 0x3c
    f82a:	ldr	r2, [sp, #72]	; 0x48
    f82c:	adds	r5, r3, r2
    f82e:	add.w	r3, r5, fp
    f832:	str	r3, [sp, #36]	; 0x24
    f834:	bic.w	r3, r3, r3, asr #31
    f838:	b.n	f2da <_svfprintf_r+0x10ba>
    f83a:	ldr	r3, [sp, #12]
    f83c:	ands.w	r3, r3, #1
    f840:	bne.w	f66c <_svfprintf_r+0x144c>
    f844:	str	r3, [sp, #60]	; 0x3c
    f846:	ldr	r3, [sp, #36]	; 0x24
    f848:	bic.w	r3, r3, r3, asr #31
    f84c:	b.n	f2da <_svfprintf_r+0x10ba>
    f84e:	ldr	r3, [sp, #60]	; 0x3c
    f850:	ldr	r2, [sp, #36]	; 0x24
    f852:	rsb	r3, r3, #1
    f856:	add	r2, r3
    f858:	mov	r3, r2
    f85a:	str	r2, [sp, #36]	; 0x24
    f85c:	b.n	f73c <_svfprintf_r+0x151c>
    f85e:	cmp.w	fp, #0
    f862:	bne.n	f86a <_svfprintf_r+0x164a>
    f864:	ldr	r3, [sp, #12]
    f866:	lsls	r0, r3, #31
    f868:	bpl.n	f87a <_svfprintf_r+0x165a>
    f86a:	ldr	r3, [sp, #72]	; 0x48
    f86c:	adds	r5, r3, #1
    f86e:	add.w	r3, r5, fp
    f872:	str	r3, [sp, #36]	; 0x24
    f874:	bic.w	r3, r3, r3, asr #31
    f878:	b.n	f2da <_svfprintf_r+0x10ba>
    f87a:	movs	r3, #1
    f87c:	str	r3, [sp, #36]	; 0x24
    f87e:	b.n	f2da <_svfprintf_r+0x10ba>
    f880:	ldr	r0, [sp, #40]	; 0x28
    f882:	ldrb.w	r3, [r8, #1]
    f886:	ldr	r5, [r0, #0]
    f888:	adds	r0, #4
    f88a:	cmp	r5, #0
    f88c:	str	r0, [sp, #40]	; 0x28
    f88e:	mov	r8, r4
    f890:	bge.w	e2d4 <_svfprintf_r+0xb4>
    f894:	mov.w	r5, #4294967295
    f898:	b.w	e2d4 <_svfprintf_r+0xb4>
    f89c:	strb.w	r1, [sp, #111]	; 0x6f
    f8a0:	b.w	e436 <_svfprintf_r+0x216>
    f8a4:	add.w	r3, sp, #126	; 0x7e
    f8a8:	b.n	f65a <_svfprintf_r+0x143a>
    f8aa:	ldr	r2, [sp, #24]
    f8ac:	movs	r3, #12
    f8ae:	str	r3, [r2, #0]
    f8b0:	mov.w	r0, #4294967295
    f8b4:	b.w	e426 <_svfprintf_r+0x206>
    f8b8:	strb.w	r1, [sp, #111]	; 0x6f
    f8bc:	b.w	e530 <_svfprintf_r+0x310>
    f8c0:	strb.w	r1, [sp, #111]	; 0x6f
    f8c4:	b.w	e7fc <_svfprintf_r+0x5dc>
    f8c8:	strb.w	r1, [sp, #111]	; 0x6f
    f8cc:	b.w	e96a <_svfprintf_r+0x74a>
    f8d0:	strb.w	r1, [sp, #111]	; 0x6f
    f8d4:	b.w	e90e <_svfprintf_r+0x6ee>
    f8d8:	strb.w	r1, [sp, #111]	; 0x6f
    f8dc:	b.w	e8ba <_svfprintf_r+0x69a>
    f8e0:	strb.w	r1, [sp, #111]	; 0x6f
    f8e4:	b.w	eb52 <_svfprintf_r+0x932>
    f8e8:	strb.w	r1, [sp, #111]	; 0x6f
    f8ec:	b.w	eb10 <_svfprintf_r+0x8f0>
    f8f0:	strb.w	r1, [sp, #111]	; 0x6f
    f8f4:	b.w	ead4 <_svfprintf_r+0x8b4>
    f8f8:	.word	0x00010328
    f8fc:	.word	0x000102fc
    f900:	.word	0x000102f8

0000f904 <__ssprint_r>:
    f904:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f908:	ldr	r3, [r2, #8]
    f90a:	sub	sp, #12
    f90c:	mov	r8, r2
    f90e:	cmp	r3, #0
    f910:	beq.n	f9f8 <__ssprint_r+0xf4>
    f912:	mov	fp, r0
    f914:	mov.w	r9, #0
    f918:	ldr	r6, [r2, #0]
    f91a:	ldr	r0, [r1, #0]
    f91c:	ldr	r3, [r1, #8]
    f91e:	mov	r5, r1
    f920:	mov	r4, r9
    f922:	cmp	r4, #0
    f924:	beq.n	f9b2 <__ssprint_r+0xae>
    f926:	cmp	r4, r3
    f928:	mov	r7, r3
    f92a:	mov	sl, r3
    f92c:	bcc.n	f9bc <__ssprint_r+0xb8>
    f92e:	ldrh	r3, [r5, #12]
    f930:	tst.w	r3, #1152	; 0x480
    f934:	beq.n	f992 <__ssprint_r+0x8e>
    f936:	ldr	r7, [r5, #20]
    f938:	ldr	r1, [r5, #16]
    f93a:	add.w	r7, r7, r7, lsl #1
    f93e:	rsb	sl, r1, r0
    f942:	add.w	r7, r7, r7, lsr #31
    f946:	adds	r0, r4, #1
    f948:	asrs	r7, r7, #1
    f94a:	add	r0, sl
    f94c:	cmp	r0, r7
    f94e:	mov	r2, r7
    f950:	itt	hi
    f952:	movhi	r7, r0
    f954:	movhi	r2, r7
    f956:	lsls	r3, r3, #21
    f958:	bpl.n	f9c2 <__ssprint_r+0xbe>
    f95a:	mov	r1, r2
    f95c:	mov	r0, fp
    f95e:	bl	b908 <_malloc_r>
    f962:	cmp	r0, #0
    f964:	beq.n	f9d6 <__ssprint_r+0xd2>
    f966:	mov	r2, sl
    f968:	ldr	r1, [r5, #16]
    f96a:	str	r0, [sp, #4]
    f96c:	bl	9280 <memcpy>
    f970:	ldrh	r2, [r5, #12]
    f972:	ldr	r3, [sp, #4]
    f974:	bic.w	r2, r2, #1152	; 0x480
    f978:	orr.w	r2, r2, #128	; 0x80
    f97c:	strh	r2, [r5, #12]
    f97e:	rsb	r2, sl, r7
    f982:	add.w	r0, r3, sl
    f986:	str	r7, [r5, #20]
    f988:	str	r3, [r5, #16]
    f98a:	str	r0, [r5, #0]
    f98c:	str	r2, [r5, #8]
    f98e:	mov	r7, r4
    f990:	mov	sl, r4
    f992:	mov	r2, sl
    f994:	mov	r1, r9
    f996:	bl	bfb4 <memmove>
    f99a:	ldr.w	r2, [r8, #8]
    f99e:	ldr	r3, [r5, #8]
    f9a0:	ldr	r0, [r5, #0]
    f9a2:	subs	r3, r3, r7
    f9a4:	add	r0, sl
    f9a6:	subs	r4, r2, r4
    f9a8:	str	r3, [r5, #8]
    f9aa:	str	r0, [r5, #0]
    f9ac:	str.w	r4, [r8, #8]
    f9b0:	cbz	r4, f9f8 <__ssprint_r+0xf4>
    f9b2:	ldr.w	r9, [r6]
    f9b6:	ldr	r4, [r6, #4]
    f9b8:	adds	r6, #8
    f9ba:	b.n	f922 <__ssprint_r+0x1e>
    f9bc:	mov	r7, r4
    f9be:	mov	sl, r4
    f9c0:	b.n	f992 <__ssprint_r+0x8e>
    f9c2:	mov	r0, fp
    f9c4:	bl	c120 <_realloc_r>
    f9c8:	mov	r3, r0
    f9ca:	cmp	r0, #0
    f9cc:	bne.n	f97e <__ssprint_r+0x7a>
    f9ce:	ldr	r1, [r5, #16]
    f9d0:	mov	r0, fp
    f9d2:	bl	c9f0 <_free_r>
    f9d6:	movs	r3, #12
    f9d8:	str.w	r3, [fp]
    f9dc:	ldrh	r3, [r5, #12]
    f9de:	movs	r2, #0
    f9e0:	orr.w	r3, r3, #64	; 0x40
    f9e4:	mov.w	r0, #4294967295
    f9e8:	strh	r3, [r5, #12]
    f9ea:	str.w	r2, [r8, #8]
    f9ee:	str.w	r2, [r8, #4]
    f9f2:	add	sp, #12
    f9f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f9f8:	movs	r0, #0
    f9fa:	str.w	r0, [r8, #4]
    f9fe:	add	sp, #12
    fa00:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000fa04 <vtable for File>:
	...
    fa0c:	....q...m.......
    fa1c:	....U...........
    fa2c:	........u.......
    fa3c:	................
    fa4c:	................
    fa5c:	I...  File    th
    fa6c:	is=%x, f=%x.....
    fa7c:	No storage..MTP 
    fa8c:	test....

0000fa94 <vtable for Stream>:
	...
    fa9c:	....q...m...q...
    faac:	............

0000fab8 <vtable for StreamFile<FsBaseFile, unsigned long long>>:
	...
    fac0:	U.......m...A...
    fad0:	........m...

0000fadc <vtable for FsFile>:
	...
    fae4:	U.......m...A...
    faf4:	........m...

0000fb00 <vtable for SDFile>:
	...
    fb08:	....q...m.......
    fb18:	....U.......9...
    fb28:	........U.......
    fb38:	A...E...5...e...
    fb48:	................
    fb58:	....

0000fb5c <vtable for MTPStorage_SD>:
	...
    fb64:	........U.......
    fb74:	u...........)...
    fb84:	e.......Q.......
    fb94:	}...)...........
    fba4:	....m...   SDFil
    fbb4:	e this=%x, refco
    fbc4:	unt=%u../mtpinde
    fbd4:	x.dat.../...

0000fbe0 <supported_op>:
    fbe0:	................
    fbf0:	................
    fc00:	....

0000fc04 <propertyList>:
    fc04:	................
    fc14:	A.D.Teensy..micr
    fc24:	osoft.com: 1.0;.
    fc34:	PJRC....1.0.???.
    fc44:	SD Card.%x %d %d
    fc54:	 %d: %x %x %x...

0000fc64 <monthDays>:
    fc64:	............DBG_
    fc74:	FAIL: ..ExFatFil
    fc84:	e.cpp...ExFatPar
    fc94:	tition.cpp..EXFA
    fca4:	T...ExFatFileWri
    fcb4:	te.cpp..FatFile.
    fcc4:	cpp.FatPartition
    fcd4:	.cpp....FatFileL
    fce4:	FN.cpp..DBG_HALT
    fcf4:	 ...C:\Users\zim
    fd04:	me\Documents\ard
    fd14:	uino-1.8.12\hard
    fd24:	ware\teensy\avr\
    fd34:	libraries/SdFat-
    fd44:	beta/src/FatLib/
    fd54:	/FatFileLFN.cpp.
    fd64:	FatFileSFN.cpp..

0000fd74 <vtable for SdSpiCard>:
	...
    fd7c:	.z...z...z...~..
    fd8c:	.}.......z...z..
    fd9c:	.....z...z...{..
    fdac:	.}...}...|...8..
    fdbc:	.z......E...M...

0000fdcc <vtable for SdioCard>:
	...
    fdd4:	........).......
    fde4:	....y.......=...
    fdf4:	%...............
    fe04:	................
    fe14:	....u...A...q...

0000fe24 <digital_pin_to_info_PGM>:
    fe24:	@..C@..@D..CD..@
    fe34:	...C...@0..C0..@
    fe44:	4..C4..@...C...@
    fe54:	...C...@...C...@
    fe64:	...C...@...C...@
    fe74:	...C...@...C...@
    fe84:	...C...@...C...@
    fe94:	...C...@...C...@
    fea4:	...C...@...C...@
    feb4:	...C...@...C...@
    fec4:	...C...@...C...@
    fed4:	...C...@...C...@
    fee4:	h .Ch..@...C...@
    fef4:	8..C8..@<..C<..@
    ff04:	@..C@..@H..CH..@
    ff14:	L..CL..@(..C(..@
    ff24:	,..C,..@` .C`..@
    ff34:	d .Cd..@ ..C ..@
    ff44:	$..C$..@(..C(..@
    ff54:	,..C,..@D..CD..@
    ff64:	p..Cp..@t..Ct..@
    ff74:	h..Ch..@P..CP..@
    ff84:	X..CX..@\..C\..@
    ff94:	T..CT..@ ..C ..@
    ffa4:	$..C$..@...C...@
    ffb4:	...C...@8..C8..@
    ffc4:	4..C4..@0..C0..@
    ffd4:	<..C<..@,..C,..@
    ffe4:	( .C(..@, .C,..@
    fff4:	. .C...@. .C...@
   10004:	. .C...@. .C...@
   10014:	. .C...@. .C...@

00010024 <vtable for usb_serial_class>:
	...
   1002c:	i...a...]...Y...
   1003c:	U...Q...M...I...
   1004c:	....

00010050 <usb_endpoint_config_table>:
   10050:	........

00010058 <usb_descriptor_list>:
   10058:	................
   10068:	....i.......8...
   10078:	........p.......
   10088:	................
   10098:	@...........t...
	...

000100b8 <_global_impure_ptr>:
   100b8:	....C...POSIX...
   100c8:	....

000100cc <_ctype_>:
   100cc:	.         ((((( 
   100dc:	                
   100ec:	 ...............
   100fc:	................
   1010c:	..AAAAAA........
   1011c:	................
   1012c:	..BBBBBB........
   1013c:	................
   1014c:	 ...............
	...
   101cc:	....

000101d0 <__mprec_tens>:
   101d0:	.......?......$@
   101e0:	......Y@.....@.@
   101f0:	.......@.....j.@
   10200:	.......A......cA
   10210:	.......A....e..A
   10220:	... _..B....vH7B
   10230:	......mB..@..0.B
   10240:	.......B..4&.k.C
   10250:	...7y.AC....W4vC
   10260:	..Ngm..C.=.`.X.C
   10270:	@..x...DP.....KD
   10280:	..M....D.J...-.D
   10290:	...yCx.D

00010298 <__mprec_bigtens>:
   10298:	...7y.AC.n.....F
   102a8:	..?..O8M2.0.Hw.Z
   102b8:	<.s..O.u

000102c0 <p05.6087>:
   102c0:	........}...Infi
   102d0:	nity....NaN.0...

000102e0 <zeroes.7258>:
   102e0:	0000000000000000
   102f0:	INF.inf.NAN.nan.
   10300:	0123456789ABCDEF
   10310:	....0123456789ab
   10320:	cdef....(null)..

00010330 <blanks.7257>:
   10330:	                

00010340 <_init>:
   10340:	push	{r3, r4, r5, r6, r7, lr}
   10342:	nop
   10344:	pop	{r3, r4, r5, r6, r7}
   10346:	pop	{r3}
   10348:	mov	lr, r3
   1034a:	bx	lr

0001034c <__init_array_start>:
   1034c:	.word	0x0000c90d

00010350 <__frame_dummy_init_array_entry>:
   10350:	5........8..

Disassembly of section .fini:

0001035c <_fini>:
   1035c:	push	{r3, r4, r5, r6, r7, lr}
   1035e:	nop
