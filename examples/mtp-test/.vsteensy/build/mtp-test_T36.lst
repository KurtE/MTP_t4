
.vsteensy/build/mtp-test_T36.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
000101ac l    d  .fini	00000000 .fini
000101b0 l    d  .ARM.exidx	00000000 .ARM.exidx
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0970 l    d  .data	00000000 .data
1fff14b8 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
000093dc l     F .text	0000000c startup_default_early_hook
000093e8 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff14b8 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff14bc l       .bss	00000000 object.8610
000101a0 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mtp-test.ino
000005b4 l     F .text	00000002 __tcf_0
00000f98 l     F .text	000000c8 _GLOBAL__sub_I_sd_str
0000f884 l     O .text	00000004 cs
00000000 l    df *ABS*	00000000 Storage.cpp
00001274 l     F .text	000000b8 MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]
00001cf4 l     F .text	00000032 MTPStorage_SD::ScanAll(unsigned long) [clone .part.45] [clone .constprop.48]
00000000 l    df *ABS*	00000000 MTP.cpp
00001dd0 l     F .text	00000064 MTPD::write(char const*, int) [clone .part.2]
00001edc l     F .text	000000bc MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]
00003058 l     F .text	0000002c MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.7]
0000f9a0 l     O .text	00000024 supported_op
0000f9c4 l     O .text	00000010 propertyList
00000000 l    df *ABS*	00000000 SPI.cpp
00003798 l     F .text	000001f8 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]
00000000 l    df *ABS*	00000000 SD.cpp
00003e74 l     F .text	0000005c _GLOBAL__sub_I_SD
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
0000486c l     F .text	0000001e FsCache::sync() [clone .part.2]
000048f8 l     F .text	00000034 ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]
0000492c l     F .text	0000002a ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]
00000000 l    df *ABS*	00000000 upcase.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
000057f4 l     F .text	00000032 FatFile::openRoot(FatVolume*) [clone .part.36]
00005910 l     F .text	00000094 FatFile::sync() [clone .part.40]
00000000 l    df *ABS*	00000000 FatPartition.cpp
000064cc l     F .text	0000004a FatCache::sync() [clone .part.8]
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
0000691c l     F .text	00000028 lfnGetChar(DirLfn_t*, unsigned char)
00000000 l    df *ABS*	00000000 FatFileSFN.cpp
0000724c l     F .text	00000058 FatFile::getSFN(char*) [clone .part.2]
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
000075ec l     F .text	00000018 SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]
00007604 l     F .text	00000022 SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
00007df0 l     F .text	00000030 sdIrs()
00007e20 l     F .text	00000018 isBusyCommandComplete()
00007e38 l     F .text	00000010 isBusyCommandInhibit()
00007e48 l     F .text	0000000c isBusyDMA()
00007e54 l     F .text	00000014 isBusyFifoRead()
00007e68 l     F .text	00000014 isBusyFifoWrite()
00007e7c l     F .text	00000018 isBusyTransferComplete()
00007e94 l     F .text	000000cc setSdclk(unsigned long)
00007fc4 l     F .text	00000028 waitTimeout(bool (*)())
00007fec l     F .text	0000004c yieldTimeout(bool (*)())
00008068 l     F .text	0000005c cardCommand(unsigned long, unsigned long)
000080e4 l     F .text	00000064 readReg16(unsigned long, void*)
00008148 l     F .text	0000002c isBusyCMD13()
00008190 l     F .text	00000020 waitDmaStatus() [clone .part.6]
000081b0 l     F .text	000000b4 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
000083a4 l     F .text	00000078 transferStop()
00008754 l     F .text	000000ac cardCMD6(unsigned long, unsigned char*)
1fff1eb0 l     O .bss	00000001 m_version2
1fff1eb4 l     O .bss	00000010 m_cid
1fff1ec4 l     O .bss	00000004 m_busyFcn
1fff1ec8 l     O .bss	00000001 m_highCapacity
1fff1ecc l     O .bss	00000004 m_ocr
1fff1ed0 l     O .bss	00000004 m_rca
1fff1ed4 l     O .bss	00000004 m_irqstat
1fff09fc l     O .data	00000001 m_errorCode
1fff1ed8 l     O .bss	00000001 m_initDone
1fff1edc l     O .bss	00000010 m_csd
1fff1eec l     O .bss	00000001 m_dmaBusy
1fff1ef0 l     O .bss	00000004 m_sdClkKhz
1fff1ef4 l     O .bss	00000004 m_errorLine
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 usb1_mtp.c
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
1fff1ef9 l     O .bss	00000001 tx_noautoflush
1fff1efc l     O .bss	00000004 tx_packet
1fff1f00 l     O .bss	00000001 transmit_previous_timeout
1fff1f04 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 pins_teensy.c
0000941c l     F .text	0000004c digitalWrite.part.1
00009468 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0a04 l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff1f10 l     O .bss	00000004 ep0_tx_ptr
1fff1f14 l     O .bss	00000018 rx_last
1fff1f2c l     O .bss	00000002 ep0_tx_len
1fff1f30 l     O .bss	00000040 ep0_rx0_buf
1fff1f70 l     O .bss	00000018 rx_first
1fff1f88 l     O .bss	00000001 ep0_tx_data_toggle
1fff1f8c l     O .bss	00000040 ep0_rx1_buf
1fff1fcc l     O .bss	00000018 tx_first
1fff0000 l     O .usbdescriptortable	000000e0 table
1fff1fe4 l     O .bss	00000018 tx_last
1fff1ffc l     O .bss	00000008 setup
1fff2004 l     O .bss	00000001 ep0_tx_bdt_bank
1fff2008 l     O .bss	00000008 reply_buffer
1fff2014 l     O .bss	00000006 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff201a l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 serialEvent.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 analog.c
1fff2049 l     O .bss	00000001 calibrating
1fff0a1d l     O .data	00000001 analog_config_bits
1fff204a l     O .bss	00000001 analog_reference_internal
1fff0a1e l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0a20 l     O .data	00000012 device_descriptor
1fff0a4c l     O .data	00000069 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stpcpy.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000c64c l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 mprec.c
00010110 l     O .text	0000000c p05.6087
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 dtoa.c
0000d000 l     F .text	00000128 quorem
00000000 l    df *ABS*	00000000 vfprintf.c
00010130 l     O .text	00000010 zeroes.7258
00010180 l     O .text	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 impure.c
1fff0b10 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.12/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.12/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 avr_emulation.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff14b8 l       .bss	00000000 __bss_start__
1fff209c l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
000093d4  w    F .text	00000006 adc0_isr
0000c214 g     F .text	0000004a stpcpy
00001240 g     F .text	00000032 MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)
000010cc g     F .text	00000004 MTPStorage_SD::getNumStorage()
0000b1e0 g     F .text	0000002c .hidden __aeabi_dcmpun
00009130 g     F .text	0000001c usb_serial_available
0000b1a4 g     F .text	00000012 .hidden __aeabi_dcmple
0000c2a0 g     F .text	000000ba strcpy
000010c4 g     F .text	00000006 MTPStorage_SD::setStorageNumbers(char const**, int)
0000b0e0 g     F .text	0000007a .hidden __cmpdf2
00008560 g     F .text	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000a508  w    F .text	000000ec yield
000062e4 g     F .text	000001e8 FatFile::write(void const*, unsigned int)
0000b0e0 g     F .text	0000007a .hidden __eqdf2
00007560  w    F .text	00000002 SdSpiCard::~SdSpiCard()
00004348 g     F .text	000003d4 ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)
1fff1988 g     O .bss	00000060 storage
1fff0a34 g     O .data	00000018 usb_string_manufacturer_name_default
000013cc g     F .text	0000003c MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)
0000ac50 g     F .text	0000005a .hidden __floatdidf
0000938c  w    F .text	00000048 hard_fault_isr
000093d4  w    F .text	00000006 dma_ch6_isr
1fff1ea8 g     O .bss	00000004 FsDateTime::callback
0000a720 g     F .text	00000020 Print::println()
000093d4  w    F .text	00000006 uart0_lon_isr
00004248 g     F .text	000000fe ExFatFile::seekSet(unsigned long long)
0000986c g     F .text	00000108 usb_rx_memory
00007534  w    F .text	00000004 SdSpiCard::errorCode() const
000004b0  w    F .text	0000000c File::flush()
000093d4  w    F .text	00000006 dma_ch8_isr
0000be0c g     F .text	00000002 __malloc_unlock
00000610  w    F .text	000000c0 SDFile::openNextFile(unsigned char)
1fff1eac g     O .bss	00000004 FsVolume::m_cwv
00005bd8 g     F .text	000000be FatFile::open(FatFile*, char const*, int)
0000a788 g     F .text	000000e0 analog_init
00009974 g     F .text	00000084 usb_tx
000093d4  w    F .text	00000006 portcd_isr
0000c4fc g     F .text	0000004a _vdprintf_r
00003db8 g     F .text	000000b0 SPIClass::setSCK(unsigned char)
0000f80c  w    O .text	0000005c vtable for SDFile
0000bca4 g     F .text	000000c6 memmove
00001d28 g     F .text	00000068 MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)
0000c91c g     F .text	0000004c _Balloc
000093d4  w    F .text	00000006 can1_rx_warn_isr
000101b8 g       .ARM.exidx	00000000 __exidx_end
000093d4  w    F .text	00000006 dma_error_isr
000066f8 g     F .text	00000046 FatPartition::freeChain(unsigned long)
1fff202c g     O .bss	00000001 EventResponder::runningFromYield
00008ecc g     F .text	0000001a SdSpiArduinoDriver::receive()
00007724 g     F .text	0000007c SdSpiCard::cardCommand(unsigned char, unsigned long)
000093d4  w    F .text	00000006 i2c0_isr
00001780 g     F .text	00000158 MTPStorage_SD::move(unsigned long, unsigned long)
0000a6f4 g     F .text	0000002c Print::write(unsigned char const*, unsigned int)
0000b0d0 g     F .text	0000008a .hidden __gtdf2
00006944 g     F .text	00000024 FatFile::lfnChecksum(unsigned char*)
0000b580 g     F .text	0000000c __errno
00000a60  w    F .text	00000026 SDFile::isDirectory()
000093d4  w    F .text	00000006 portd_isr
000093d4  w    F .text	00000006 enet_error_isr
00000c68  w    F .text	00000028 File::~File()
1fff201c g     O .bss	00000004 EventResponder::firstInterrupt
00002204 g     F .text	0000006c MTPD::GetObjectHandles(unsigned long, unsigned long)
00007564  w    F .text	0000000e SdSpiCard::~SdSpiCard()
000072c4 g     F .text	00000078 FsBaseFile::FsBaseFile(FsBaseFile const&)
000093d4  w    F .text	00000006 tpm1_isr
00004d98 g     F .text	00000018 ExFatPartition::rootLength()
00007538  w    F .text	00000004 SdSpiCard::errorData() const
0000a6e4  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
0000fc70 g     O .text	00000200 digital_pin_to_info_PGM
1fff2098 g     O .bss	00000004 errno
000079a8 g     F .text	00000054 SdSpiCard::readOCR(unsigned long*)
00008ee8 g     F .text	00000020 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
00006ec4 g     F .text	00000388 FatFile::open(FatFile*, fname_t*, int)
00004c6c g     F .text	00000012 ExFatPartition::fatGet(unsigned long, unsigned long*)
000101b8 g       .ARM.exidx	00000000 _etext
00003ac4 g     F .text	00000134 _spi_dma_rxISR0()
1fff14b8 g       .bss	00000000 _sbss
00008f74 g     F .text	00000006 sdCsInit(unsigned char)
0000b16c g     F .text	00000010 .hidden __aeabi_cdcmple
00007f6c g     F .text	0000000c SdioCard::errorData() const
00008670 g     F .text	000000b4 SdioCard::writeSector(unsigned long, unsigned char const*)
000093d4  w    F .text	00000006 porte_isr
00000f8c g     F .text	0000000c loop
000093d4  w    F .text	00000006 portb_isr
000093d4  w    F .text	00000006 spi1_isr
000026d4 g     F .text	00000150 MTPD::GetStorageInfo(unsigned long)
000093d4  w    F .text	00000006 uart3_status_isr
00003fb4 g     F .text	000000c4 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
000093d4  w    F .text	00000006 mcm_isr
00008b94 g     F .text	000000cc SdioCard::readData(unsigned char*)
00007668 g     F .text	00000080 SdSpiCard::readData(unsigned char*, unsigned int)
1fff2020 g     O .bss	00000004 EventResponder::lastInterrupt
000093d4  w    F .text	00000006 uart1_status_isr
00000bd4  w    F .text	00000092 SDFile::seek(unsigned long, int)
0000733c g     F .text	00000028 FsBaseFile::close()
00008f84 g     F .text	00000134 memcpy
000093d4  w    F .text	00000006 randnum_isr
0000b15c g     F .text	00000020 .hidden __aeabi_cdrcmple
00000494  w    F .text	0000000c File::available()
00001b9c g     F .text	00000158 MTPStorage_SD::ScanDir(unsigned long, unsigned long)
00004ca4 g     F .text	00000080 ExFatPartition::freeChain(unsigned long)
000018d8 g     F .text	00000184 MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)
00005e4c g     F .text	0000002a FatFile::peek()
0000df60 g     F .text	000016e4 _svfprintf_r
0000abe0 g     F .text	00000022 .hidden __floatsidf
000005e0  w    F .text	00000014 SDFile::whoami()
1fff14d4  w    O .bss	00000001 SDFile::name()::zeroterm
1fff1f0c g     O .bss	00000004 systick_millis_count
0000b0d8 g     F .text	00000082 .hidden __ltdf2
000053dc g     F .text	000000aa ExFatFile::rename(ExFatFile*, char const*)
0000938c  w    F .text	00000048 bus_fault_isr
00003228 g     F .text	00000554 MTPD::loop()
000093d4  w    F .text	00000006 watchdog_isr
0000b25c g     F .text	00000000 .hidden __aeabi_uldivmod
000093d4  w    F .text	00000006 i2c1_isr
1fff2010 g     O .bss	00000001 usb_configuration
000093d4  w    F .text	00000006 dma_ch11_isr
00000474  w    F .text	00000006 SdCardInterface::status()
00008724 g     F .text	00000030 SdioCard::syncDevice()
00008420 g     F .text	000000cc SdioCard::writeData(unsigned char const*)
00000000  w      *UND*	00000000 __fini_array_end
1fff202d g     O .bss	00000001 SPCRemulation::pinout
00000b7c  w    F .text	00000058 StreamFile<FsBaseFile, unsigned long long>::available()
00005e78 g     F .text	00000040 FatFile::readDirCache(bool)
000004bc  w    F .text	0000000c File::seek(unsigned long, int)
000093d4  w    F .text	00000006 i2c2_isr
1fff0a34  w    O .data	00000018 usb_string_manufacturer_name
1fff208c g     O .bss	0000000c usb_rx_byte_count_data
000093d4  w    F .text	00000006 pit1_isr
1fff0ab8 g     O .data	00000008 usb_string_mtp
0000b5dc g     F .text	00000010 malloc
000093d4  w    F .text	00000006 dma_ch4_isr
000093d4  w    F .text	00000006 software_isr
0000f78c  w    O .text	00000024 vtable for FsFile
000093d4  w    F .text	00000006 dma_ch7_isr
0000377c  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00010020 g     O .text	000000c8 __mprec_tens
0000a440 g     F .text	000000c8 usb_init
0000754c  w    F .text	00000004 SdSpiCard::type() const
000093d4  w    F .text	00000006 lptmr_isr
1fff2054 g     O .bss	00000004 __malloc_top_pad
000094f0 g     F .text	00000024 rtc_set
1fff09bc g     O .data	00000040 SPI1
00007574 g     F .text	00000076 SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00005488 g     F .text	000000e2 ExFatFile::truncate()
1fff0970 g     O .data	00000000 .hidden __dso_handle
0000abc0 g     F .text	0000001e .hidden __aeabi_ui2d
0000c900 g     F .text	0000001c _localeconv_r
1fff0974 g     O .data	00000004 sd_str
000094e0 g     F .text	00000010 attachInterruptVector
00008e84 g     F .text	00000048 SdSpiArduinoDriver::deactivate()
0000ca98 g     F .text	00000012 __i2b
1fff0970 g       .data	00000000 _sdata
00008f80 g     F .text	00000002 usb_mtp_configure
000004ec  w    F .text	0000000c File::operator bool()
00006578 g     F .text	0000000e FatCache::sync()
0000b28c g     F .text	000002e2 .hidden __udivmoddi4
0000252c g     F .text	000001a8 MTPD::getObjectPropValue(unsigned long, unsigned long)
0000a93c g     F .text	00000000 .hidden __aeabi_drsub
00005828 g     F .text	00000034 FatFile::addCluster()
0000c1f0 g     F .text	00000024 _sbrk_r
000079fc g     F .text	0000004a SdSpiCard::readRegister(unsigned char, void*)
00008048 g     F .text	00000020 SdioCard::type() const
00000488  w    F .text	0000000c File::write(void const*, unsigned int)
000001d0 g     F .text	000001f0 ResetHandler
000090b8 g     F .text	00000048 usb_serial_getchar
000093d4  w    F .text	00000006 can1_bus_off_isr
000093d4  w    F .text	00000006 ftm2_isr
000008e4  w    F .text	0000004c SDFile::name()
1fff2080 g     O .bss	00000008 usb_cdc_line_coding
00009514 g     F .text	0000000a digitalWrite
1fff2024 g     O .bss	00000004 EventResponder::lastYield
000093d4  w    F .text	00000006 uart5_status_isr
000093d4  w    F .text	00000006 lpuart0_status_isr
00003f8c g     F .text	00000028 ExFatFile::openRoot(ExFatVolume*)
0000fe9c g     O .text	00000006 usb_endpoint_config_table
000093d4  w    F .text	00000006 dma_ch9_isr
00000740  w    F .text	00000038 StreamFile<FsBaseFile, unsigned long long>::read()
000093d4  w    F .text	00000006 pit2_isr
0000b190 g     F .text	00000012 .hidden __aeabi_dcmplt
0000fb5c g     O .text	0000005c SPISettings::ctar_clock_table
1fff2050 g     O .bss	00000004 __malloc_max_sbrked_mem
00000a10  w    F .text	00000010 SDFile::position()
00009520 g     F .text	0000000a pinMode
00007cf8 g     F .text	00000042 SdSpiCard::writeStop()
00001a5c g     F .text	00000036 MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)
000097b8 g     F .text	0000004c usb_free
000093d4  w    F .text	00000006 i2c3_isr
0000ac04 g     F .text	0000003a .hidden __extendsfdf2
0000af00 g     F .text	000001d0 .hidden __aeabi_ddiv
0000a948 g     F .text	00000276 .hidden __adddf3
000024c0 g     F .text	0000006c MTPD::getObjectPropsSupported(unsigned long)
00001e34 g     F .text	000000a8 MTPD::writestring(char const*)
00007dbc g     F .text	00000032 SdSpiCard::writeData(unsigned char const*)
000004a0  w    F .text	00000010 File::peek()
00006740 g     F .text	000000be FatPartition::freeClusterCount()
00000a88  w    F .text	000000b8 SDClass::open(char const*, unsigned char)
000101b0 g       .ARM.exidx	00000000 __exidx_start
0000acac g     F .text	00000254 .hidden __aeabi_dmul
00007bf0 g     F .text	00000050 SdSpiCard::writeStart(unsigned long)
000093d4  w    F .text	00000006 pit0_isr
1fff2028 g     O .bss	00000004 EventResponder::firstYield
0000ff04 g     O .text	00000004 _global_impure_ptr
000010e0 g     F .text	0000000c MTPStorage_SD::write(char const*, unsigned long)
000093d4  w    F .text	00000006 can1_error_isr
0000078c  w    F .text	00000034 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
0000be10 g     F .text	000003de _realloc_r
00000a30  w    F .text	00000018 SDFile::read(void*, unsigned int)
0000b58c g     F .text	00000050 __libc_init_array
1fff209c g       .bss	00000000 __bss_end
000009cc  w    F .text	00000044 SDFile::rewindDirectory()
000093d4  w    F .text	00000006 can0_wakeup_isr
0000481c g     F .text	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
00007f78 g     F .text	0000001c SdioCard::readCID(CID*)
000051bc g     F .text	000000ea ExFatFile::addDirCluster()
000093d4  w    F .text	00000006 flash_cmd_isr
00007d68 g     F .text	00000052 SdSpiCard::writeData(unsigned char, unsigned char const*)
000100e8 g     O .text	00000028 __mprec_bigtens
0000a6cc  w    F .text	00000004 usb_serial_class::clear()
0000abc0 g     F .text	0000001e .hidden __floatunsidf
000093d4  w    F .text	00000006 uart2_status_isr
000093ec g     F .text	0000002c _sbrk
0000cd2c g     F .text	00000042 __mcmp
0000f868  w    O .text	0000001c vtable for SDClass
000005a0  w    F .text	00000012 SDFile::operator bool()
1fff0a00 g     O .data	00000004 __brkval
1fff1f08 g     O .bss	00000001 usb_cdc_line_rtsdtr
000010d0 g     F .text	0000000e MTPStorage_SD::getStorageName(unsigned long)
00009344 g     F .text	00000048 usb_serial_flush_callback
00010190 g     F .text	00000000 _init
000058f0 g     F .text	0000001e FatFile::cacheDirEntry(unsigned char)
000093d4  w    F .text	00000006 svcall_isr
0000081c  w    F .text	00000062 SDClass::remove(char const*)
000005f4  w    F .text	0000001c SDFile::close()
000093d4  w    F .text	00000006 dma_ch15_isr
000007c0  w    F .text	0000005c SDFile::~SDFile()
000093d4  w    F .text	00000006 uart1_error_isr
0000c66c g     F .text	00000028 __libc_fini_array
000093d4  w    F .text	00000006 usbhs_phy_isr
00008e34 g     F .text	00000050 SdSpiArduinoDriver::begin(SdSpiConfig)
1fff209c g       .bss	00000000 _ebss
000085e8 g     F .text	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00001f98 g     F .text	00000214 MTPD::WriteDescriptor()
1fff0978 g     O .data	00000004 propertyListNum
00000b40  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
00006518 g     F .text	0000005e FatCache::read(unsigned long, unsigned char)
0000c9fc g     F .text	00000040 __hi0bits
0000b20c g     F .text	0000004e .hidden __fixdfsi
000052a8 g     F .text	0000005a ExFatFile::mkdir(ExFatFile*, ExName_t*)
000093d4 g     F .text	00000006 unused_isr
000021ac g     F .text	00000058 MTPD::WriteStorageIDs()
000093d4  w    F .text	00000006 spi0_isr
000093d4  w    F .text	00000006 dma_ch3_isr
00003e70  w    F .text	00000002 SDClass::~SDClass()
1fff14d8 g     O .bss	000004b0 sdx
00000c68  w    F .text	00000028 File::~File()
0000a784 g     F .text	00000004 operator delete(void*, unsigned int)
000093d4  w    F .text	00000006 flash_error_isr
0000a948 g     F .text	00000276 .hidden __aeabi_dadd
0000b0d8 g     F .text	00000082 .hidden __ledf2
0000c260 g     F .text	0000003e strcat
000093d4  w    F .text	00000006 uart5_error_isr
000093d4  w    F .text	00000006 rtc_seconds_isr
0000fac8 g     O .text	00000094 SPIClass::spi0_hardware
000093d4  w    F .text	00000006 pdb_isr
0000cbdc g     F .text	000000a0 __pow5mult
00006090 g     F .text	0000005c FatFile::rmdir()
0000ac40 g     F .text	0000006a .hidden __aeabi_ul2d
0000938c  w    F .text	00000048 usage_fault_isr
000093d4  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
0000666c g     F .text	0000008c FatPartition::allocateCluster(unsigned long, unsigned long*)
000093d4  w    F .text	00000006 dma_ch14_isr
00000980  w    F .text	0000004c SDClass::exists(char const*)
00000000  w      *UND*	00000000 __deregister_frame_info
00000d8c g     F .text	0000016c storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)
1fff2088 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000a6bc g     F .text	00000010 systick_isr
000093d4  w    F .text	00000006 rtc_alarm_isr
0000050c  w    F .text	0000000c File::isDirectory()
000072a4 g     F .text	00000020 FatFile::getSFN(char*)
00007b40 g     F .text	00000076 SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
000093d4  w    F .text	00000006 dma_ch2_isr
1fff0a0c g     O .data	00000010 Serial
000093d4  w    F .text	00000006 ftm1_isr
0000a6ec  w    F .text	00000006 usb_serial_class::write(unsigned char)
000073e4 g     F .text	0000005e FsBaseFile::openNext(FsBaseFile*, int)
000093dc  w    F .text	0000000c startup_early_hook
000093d4  w    F .text	00000006 dma_ch13_isr
00004e44 g     F .text	0000008c ExFatFile::addCluster()
0000f7b0  w    O .text	0000005c vtable for File
000093d4  w    F .text	00000006 uart2_error_isr
00009100 g     F .text	00000030 usb_serial_peekchar
0000b1cc g     F .text	00000012 .hidden __aeabi_dcmpgt
00001138 g     F .text	00000002 mtp_yield()
0000bba0 g     F .text	00000000 memchr
00006604 g     F .text	00000066 FatPartition::fatPut(unsigned long, unsigned long)
1fff0af4 g     O .data	00000016 usb_string_serial_number_default
0000938c g     F .text	00000048 fault_isr
0000c730 g     F .text	000001d0 _free_r
0000841c g     F .text	00000004 SdioCard::readStop()
00004898 g     F .text	00000060 FsCache::get(unsigned long, unsigned char)
0000b1b8 g     F .text	00000012 .hidden __aeabi_dcmpge
000093d4  w    F .text	00000006 usb_charge_isr
0000a6dc  w    F .text	00000004 usb_serial_class::flush()
000093d4  w    F .text	00000006 cmt_isr
000010ec g     F .text	00000028 MTPStorage_SD::freeClusters(unsigned long)
0000a944 g     F .text	0000027a .hidden __aeabi_dsub
00006800 g     F .text	0000011a FatPartition::init(BlockDeviceInterface*, unsigned char)
000093d4  w    F .text	00000006 usbhs_isr
000059c4 g     F .text	0000014e FatFile::mkdir(FatFile*, fname_t*)
1fff14b4 g     O .data	00000004 __malloc_sbrk_base
0000a6d4  w    F .text	00000004 usb_serial_class::read()
000093d4  w    F .text	00000006 ftm3_isr
00000550  w    F .text	0000000c File::rewindDirectory()
000093d4  w    F .text	00000006 tsi0_isr
00006ce4 g     F .text	00000128 FatFile::remove()
0000ac40 g     F .text	0000006a .hidden __floatundidf
00009418  w    F .text	00000002 __cxa_pure_virtual
0000cc7c g     F .text	000000ae __lshift
00005b14 g     F .text	000000c2 FatFile::mkdir(FatFile*, char const*, bool)
000093d4  w    F .text	00000006 spi2_isr
00004dec g     F .text	00000058 exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)
0000f644 g     F .text	00000100 __ssprint_r
0000cf40 g     F .text	0000005e _vasnprintf_r
0000a77c  w    F .text	00000002 serialEvent()
1fff1f89 g     O .bss	00000001 usb_reboot_timer
0000c5a8 g     F .text	000000a4 __register_exitproc
0000471c g     F .text	000000fe ExFatFile::open(ExFatFile*, char const*, int)
0000c45c g     F .text	000000a0 strncmp
00005304 g     F .text	000000d6 ExFatFile::mkdir(ExFatFile*, char const*, bool)
0000914c g     F .text	00000038 usb_serial_flush_input
00004d24 g     F .text	00000072 ExFatPartition::freeClusterCount()
00001460 g     F .text	00000074 MTPStorage_SD::ConstructFilename(int, char*, int)
0000caac g     F .text	00000130 __multiply
0000928c g     F .text	00000018 usb_serial_putchar
00000022 g       *ABS*	00000000 _teensy_model_identifier
1fff2058 g     O .bss	00000028 __malloc_current_mallinfo
0000ce84 g     F .text	000000ba __d2b
1fff2030 g     O .bss	00000018 HardwareSerial::s_serials_with_serial_events
000093d4  w    F .text	00000006 can0_bus_off_isr
00008038  w    F .text	0000000e SdioCard::~SdioCard()
00003ee4 g     F .text	000000a6 ExFatFile::getName(char*, unsigned int)
1fff2005 g     O .bss	00000001 usb_rx_memory_needed
000084ec g     F .text	00000074 SdioCard::writeStart(unsigned long)
000099f8 g     F .text	00000a48 usb_isr
0000b574 g     F .text	0000000c __cxa_atexit
00004078 g     F .text	0000019e ExFatFile::read(void*, unsigned int)
0000abe0 g     F .text	00000022 .hidden __aeabi_i2d
00000a48  w    F .text	00000018 SDFile::peek()
00004958 g     F .text	0000000e FsCache::sync()
00001094 g     F .text	00000030 MTPStorage_SD::clusterSize(unsigned long)
1fff097c g     O .data	00000040 SPI
0000bc40 g     F .text	00000062 memcmp
0000fe70  w    O .text	00000028 vtable for usb_serial_class
00008f08 g     F .text	00000016 SdSpiArduinoDriver::send(unsigned char)
000093d4  w    F .text	00000006 uart3_error_isr
00002f28 g     F .text	0000007c MTPD::GetObject(unsigned long)
00008f7c g     F .text	00000004 sdCsWrite(unsigned char, bool)
0000b570  w    F .text	00000002 .hidden __aeabi_ldiv0
00004fa8 g     F .text	0000005a ExFatFile::rmdir()
000093d4  w    F .text	00000006 porta_isr
00002824 g     F .text	000006e6 MTPD::getObjectPropDesc(unsigned long, unsigned long)
0000af00 g     F .text	000001d0 .hidden __divdf3
1fff03d0 g     O .usbbuffers	000005a0 usb_buffer_memory
00007a58 g     F .text	00000098 SdSpiCard::sectorCount()
000093d4  w    F .text	00000006 low_voltage_isr
00001064 g     F .text	00000004 MTPStorage_SD::has_directories(unsigned long)
1fff10a8 g     O .data	00000408 __malloc_av_
000093d4  w    F .text	00000006 can0_error_isr
0000960c g     F .text	0000016c _init_Teensyduino_internal_
00000778  w    F .text	00000014 SDFile::flush()
0000acac g     F .text	00000254 .hidden __muldf3
000092ec g     F .text	00000058 usb_serial_flush_output
000093d4  w    F .text	00000006 dma_ch12_isr
0000be08 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
00006a98 g     F .text	0000024c FatFile::parsePathName(char const*, fname_t*, char const**)
000093d4  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
00008f20 g     F .text	00000052 SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
0000cfa0 g     F .text	0000005e _calloc_r
000093d4  w    F .text	00000006 pit3_isr
00003bf8 g     F .text	0000007c SPIClass::begin()
00002fa4 g     F .text	0000006e MTPD::read(char*, unsigned long)
00001068 g     F .text	0000002c MTPStorage_SD::clusterCount(unsigned long)
1fff0a08 g     O .data	00000001 yield_active_check_flags
000093d4  w    F .text	00000006 enet_rx_isr
0000515c g     F .text	0000005e ExFatFile::sync()
00005eb8 g     F .text	000001d6 FatFile::rename(FatFile*, char const*)
00008174 g     F .text	0000001c SdioCard::isBusy()
000093d4  w    F .text	00000006 portc_isr
00007bb8 g     F .text	00000038 SdSpiCard::readStop()
0000bd6c g     F .text	0000009a memset
0000a76c g     F .text	00000010 main
1fff204c g     O .bss	00000004 __malloc_max_total_mem
00004968 g     F .text	000000b4 ExFatPartition::bitmapFind(unsigned long, unsigned long)
0000556c g     F .text	00000288 ExFatFile::write(void const*, unsigned int)
0000f908 g     O .text	0000005c vtable for MTPStorage_SD
00003084 g     F .text	00000130 MTPD::SendObjectInfo(unsigned long, unsigned long)
0000938c  w    F .text	00000048 memmanage_fault_isr
000006d0  w    F .text	00000058 SDFile::available()
000004e0  w    F .text	0000000c File::close()
0000a868 g     F .text	0000007c usb_init_serialnumber
000101ac g       .text	00000000 __init_array_end
0000d128 g     F .text	00000e34 _dtoa_r
0000b5fc g     F .text	00000570 _malloc_r
1fff2048 g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
000093d4  w    F .text	00000006 debugmonitor_isr
0000c560 g     F .text	0000001a __ascii_wctomb
000072c4 g     F .text	00000078 FsBaseFile::FsBaseFile(FsBaseFile const&)
0000ac50 g     F .text	0000005a .hidden __aeabi_l2d
0000a5f4 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
00003e68 g     F .text	00000008 SPIClass::transfer(void const*, void*, unsigned int)
00000031 g       *ABS*	00000000 __rtc_localtime
0000952c g     F .text	00000044 micros
00000000  w      *UND*	00000000 __libc_fini
00000518  w    F .text	00000038 File::openNextFile(unsigned char)
000093d4  w    F .text	00000006 cmp1_isr
000093d4  w    F .text	00000006 ftm0_isr
00005004 g     F .text	00000158 ExFatFile::syncDir()
0000c694 g     F .text	0000009c _malloc_trim_r
1fff0af0 g     O .data	00000004 string0
00009184 g     F .text	00000108 usb_serial_write
000093e8  w    F .text	00000002 startup_late_hook
0000a6d8  w    F .text	00000004 usb_serial_class::available()
1fff0a1c g     O .data	00000001 _serialEvent_default
00003014 g     F .text	00000044 MTPD::readstring(char*)
000062d8 g     F .text	0000000c FatFile::sync()
00000930  w    F .text	00000050 SDClass::mkdir(char const*)
1fff0ac0  w    O .data	0000002e usb_string_product_name
00001d90 g     F .text	00000026 MTPD::GetNumObjects(unsigned long, unsigned long)
00009570 g     F .text	0000009c delay
0000b0e0 g     F .text	0000007a .hidden __nedf2
000093d4  w    F .text	00000006 tpm0_isr
00001114 g     F .text	00000024 MTPStorage_SD::CloseIndex()
000101ac g     F .fini	00000000 _fini
00001db8 g     F .text	00000018 MTPD::get_buffer()
000004f8  w    F .text	00000014 File::name()
0000fa98 g     O .text	0000002e SPISettings::ctar_div_table
00007af0 g     F .text	00000050 SdSpiCard::readStart(unsigned long)
0000482c g     F .text	00000040 ExFatFile::openNext(ExFatFile*, int)
0000a750 g     F .text	0000001c Print::printf(char const*, ...)
000093d4  w    F .text	00000006 i2s0_rx_isr
000093d4  w    F .text	00000006 uart4_error_isr
000059a4 g     F .text	0000001e FatFile::close()
000004c8  w    F .text	0000000c File::position()
00000c90  w    F .text	00000064 SDFile::~SDFile()
00006588 g     F .text	0000000c FatPartition::clusterStartSector(unsigned long) const
0000c660 g     F .text	0000000c atexit
00007fc0  w    F .text	00000002 SdioCard::~SdioCard()
00000728  w    F .text	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
00000588  w    F .text	00000018 File::write(unsigned char)
0000c57c g     F .text	0000002c _write_r
1fff19f8 g     O .bss	000004b0 SD
000082d0 g     F .text	000000d4 SdioCard::erase(unsigned long, unsigned long)
000093d4  w    F .text	00000006 can0_message_isr
00003c74 g     F .text	000000a4 SPIClass::setMOSI(unsigned char)
1fff0f38 g     O .data	00000004 _impure_ptr
0000f744  w    O .text	00000024 vtable for Stream
000093d4  w    F .text	00000006 can1_message_isr
00004218 g     F .text	0000002e ExFatFile::peek()
0000f768  w    O .text	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
000093d4  w    F .text	00000006 nmi_isr
00006e0c g     F .text	000000b6 FatFile::lfnUniqueSfn(fname_t*)
00000b54  w    F .text	00000014 SDFile::write(void const*, unsigned int)
00007508 g     F .text	00000028 FsVolume::open(char const*, int)
00007f60 g     F .text	0000000c SdioCard::errorCode() const
00005c98 g     F .text	0000000e FatFile::open(FatVolume*, char const*, int)
00000b68  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
0001019c g       .text	00000000 __preinit_array_end
00007560  w    F .text	00000002 SdSpiCard::~SdSpiCard()
000093d4  w    F .text	00000006 sdhc_isr
00004a1c g     F .text	000000e0 ExFatPartition::init(BlockDeviceInterface*, unsigned char)
00004be0 g     F .text	00000034 ExFatPartition::dirCache(DirPos_t*, unsigned char)
00007c40 g     F .text	000000b8 SdSpiCard::erase(unsigned long, unsigned long)
000014d4 g     F .text	00000188 MTPStorage_SD::DeleteObject(unsigned long)
0000bb6c g     F .text	0000002a __ascii_mbtowc
00007628 g     F .text	0000003e SdSpiCard::isBusy()
0000fbc0 g     O .text	00000058 vtable for SdSpiCard
00007a50  w    F .text	00000008 SdSpiCard::readCID(CID*)
00000ef8 g     F .text	00000094 setup
0000fea4 g     O .text	00000060 usb_descriptor_list
00009804 g     F .text	0000003c usb_rx
000080c4 g     F .text	00000020 SdioCard::status()
0000120c g     F .text	00000032 MTPStorage_SD::ResetIndex()
000093d4  w    F .text	00000006 dma_ch10_isr
00000470  w    F .text	00000002 Print::flush()
000093d4  w    F .text	00000006 uart0_error_isr
000004d4  w    F .text	0000000c File::size()
00000880  w    F .text	00000062 SDClass::rmdir(char const*)
00009778 g     F .text	00000040 usb_malloc
00005cb4 g     F .text	00000198 FatFile::read(void*, unsigned int)
000093d4  w    F .text	00000006 i2s0_isr
00005ca8 g     F .text	0000000c FatFile::openRoot(FatVolume*)
20030000 g       .bss	00000000 _estack
00007530 g     F .text	00000004 operator new(unsigned int, unsigned long*)
00007a48  w    F .text	00000008 SdSpiCard::readCSD(csd_t*)
0000055c  w    F .text	0000002c File::read()
000092a4 g     F .text	00000048 usb_serial_write_buffer_free
000076e8 g     F .text	0000003c SdSpiCard::waitNotBusy(unsigned short)
000093d4  w    F .text	00000006 enet_timer_isr
0000b17c g     F .text	00000012 .hidden __aeabi_dcmpeq
00000cf4  w    F .text	00000030 File::~File()
0000a740  w    F .text	0000000e _write
1fff14b8 g       .data	00000000 _edata
00004c80 g     F .text	00000024 ExFatPartition::fatPut(unsigned long, unsigned long)
00002270 g     F .text	00000250 MTPD::GetObjectInfo(unsigned long)
00007fc0  w    F .text	00000002 SdioCard::~SdioCard()
000093d4  w    F .text	00000006 i2s0_tx_isr
000093d4  w    F .text	00000006 adc1_isr
00007d3c g     F .text	0000002c SdSpiCard::syncDevice()
0000585c g     F .text	00000094 FatFile::addDirCluster()
0000047c  w    F .text	0000000c File::read(void*, unsigned int)
0000a6e0  w    F .text	00000004 usb_serial_class::availableForWrite()
000093d4  w    F .text	00000006 cmp0_isr
0000a8e4 g     F .text	0000004c ultoa
00003e70  w    F .text	00000002 SDClass::~SDClass()
000077a0 g     F .text	00000208 SdSpiCard::begin(SdSpiConfig)
00007364 g     F .text	00000080 FsBaseFile::open(FsVolume*, char const*, int)
0000132c g     F .text	0000004e MTPStorage_SD::ReadIndexRecord(unsigned long)
0000a780 g     F .text	00000004 operator new(unsigned int)
0000a674 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff14b0 g     O .data	00000004 __malloc_trim_threshold
0000a6d0  w    F .text	00000004 usb_serial_class::peek()
0000137c g     F .text	00000050 MTPStorage_SD::GetNextObjectHandle(unsigned long)
00000d24  w    F .text	00000068 MTPStorage_SD::~MTPStorage_SD()
1fff19e8 g     O .bss	00000010 mtpd
0000cd70 g     F .text	00000114 __mdiff
00007fb0 g     F .text	00000010 SdioCard::readOCR(unsigned long*)
0000b20c g     F .text	0000004e .hidden __aeabi_d2iz
00001a94 g     F .text	00000108 MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)
00004c14 g     F .text	00000058 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
1fff1ef8 g     O .bss	00000001 usb_cdc_transmit_flush_timer
00003990 g     F .text	00000134 _spi_dma_rxISR1()
000093d4  w    F .text	00000006 pit_isr
0000841c g     F .text	00000004 SdioCard::writeStop()
00007550  w    F .text	00000010 SdSpiCard::writeSector(unsigned long, unsigned char const*)
00003ed0 g     F .text	00000014 ExFatFile::close()
0000ff18 g     O .text	00000101 _ctype_
000093d4  w    F .text	00000006 dac0_isr
0000753c  w    F .text	00000010 SdSpiCard::readSector(unsigned long, unsigned char*)
0001019c g       .text	00000000 __init_array_start
0000b570  w    F .text	00000002 .hidden __aeabi_idiv0
000093d4  w    F .text	00000006 can1_tx_warn_isr
0000113c g     F .text	000000d0 MTPStorage_SD::OpenIndex()
0000b1e0 g     F .text	0000002c .hidden __unorddf2
000093d4  w    F .text	00000006 uart0_status_isr
000093d4  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
0000c380 g     F .text	000000dc strlen
00006968 g     F .text	0000002e FatFile::openCluster(FatFile*)
0000fa04 g     O .text	00000094 SPIClass::spi1_hardware
0000b16c g     F .text	00000010 .hidden __aeabi_cdcmpeq
0000b0d0 g     F .text	0000008a .hidden __gedf2
000060ec g     F .text	00000094 FatFile::seekSet(unsigned long)
1fff0ac0 g     O .data	0000002e usb_string_product_name_default
0000c548 g     F .text	00000018 vdprintf
000093d4  w    F .text	00000006 dma_ch1_isr
00008264 g     F .text	0000006c SdioCard::sectorCount()
00007444 g     F .text	000000c4 FsVolume::begin(BlockDeviceInterface*)
00009840 g     F .text	0000002c usb_tx_packet_count
00006258 g     F .text	00000080 FatFile::openNext(FatFile*, int)
0000fc18 g     O .text	00000058 vtable for SdioCard
0000ac04 g     F .text	0000003a .hidden __aeabi_f2d
000093d4  w    F .text	00000006 dma_ch5_isr
00001420 g     F .text	00000040 MTPStorage_SD::close()
00006998 g     F .text	00000100 FatFile::getName(char*, unsigned int)
000093d4  w    F .text	00000006 can0_rx_warn_isr
00000d24  w    F .text	00000068 MTPStorage_SD::~MTPStorage_SD()
0000165c g     F .text	00000124 MTPStorage_SD::rename(unsigned long, char const*)
000093d4  w    F .text	00000006 can0_tx_warn_isr
000093d4  w    F .text	00000006 uart4_status_isr
00008c60 g     F .text	00000074 SdioCard::readStart(unsigned long)
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00008da4 g     F .text	00000090 SdSpiArduinoDriver::activate()
00001060 g     F .text	00000004 MTPStorage_SD::readonly(unsigned long)
0000a944 g     F .text	0000027a .hidden __subdf3
0001019c g       .text	00000000 __preinit_array_start
00004afc g     F .text	000000a6 ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
00001408 g     F .text	00000016 MTPStorage_SD::GetSize(unsigned long)
000005b8  w    F .text	00000028 File::whoami()
0000ca3c g     F .text	0000005a __lo0bits
00004ba4 g     F .text	0000003a ExFatPartition::chainSize(unsigned long)
00006180 g     F .text	000000d6 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
0000a930 g     F .text	0000000a __aeabi_atexit
00002f0c g     F .text	0000001a MTPD::receive_buffer()
00000000  w      *UND*	00000000 __register_frame_info
00004ed0 g     F .text	000000d6 ExFatFile::remove()
000093d4  w    F .text	00000006 cmp2_isr
0000a6b8 g     F .text	00000004 pendablesrvreq_isr
000031b4 g     F .text	00000072 MTPD::SendObject()
0000046c  w    F .text	00000004 Print::availableForWrite()
1fff0f3c g     O .data	0000016c __global_locale
000093d4  w    F .text	00000006 wakeup_isr
00003d18 g     F .text	000000a0 SPIClass::setMISO(unsigned char)
00008800 g     F .text	00000394 SdioCard::begin(SdioConfig)
0000488c g     F .text	0000000c FsCache::invalidate()
000093d4  w    F .text	00000006 cmp3_isr
00006594 g     F .text	0000006e FatPartition::fatGet(unsigned long, unsigned long*)
0000b5ec g     F .text	00000010 free
000093d4  w    F .text	00000006 tpm2_isr
0000c97c g     F .text	00000080 __multadd
0000c968 g     F .text	00000012 _Bfree
00000a20  w    F .text	00000010 SDFile::size()
000093d4  w    F .text	00000006 dma_ch0_isr
000007c0  w    F .text	0000005c SDFile::~SDFile()
1fff0af4  w    O .data	00000016 usb_string_serial_number
000093d4  w    F .text	00000006 enet_tx_isr
00004db0 g     F .text	0000003a exFatHashName(char const*, unsigned int, unsigned short)
00008cd4 g     F .text	000000d0 SdioCard::readSector(unsigned long, unsigned char*)
00007f94 g     F .text	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text:

00000000 <_VectorsFlash>:
  str = fsFmtField(str, 2*(time & 31) + sec100/100, '.');
  *--str = ':';
  return fsFmtTime(str, time);
}
//------------------------------------------------------------------------------
char* fsFmtTimeZone(char* str, int8_t tz) {
       0:	... ............
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      10:	................
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
      20:	................
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      30:	................
  }
}  // namespace FsDateTime
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
      40:	................
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
      50:	................
      tz = -tz;
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      60:	................
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      *--str = sign;
    }
    *--str = 'C';
    *--str = 'T';
      70:	................
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      80:	................
      90:	................
      a0:	................
      b0:	................
      c0:	................
      d0:	................
      e0:	................
      f0:	................
     100:	................
     110:	................
     120:	................
     130:	................
     140:	................
     150:	................
     160:	................
     170:	................
     180:	................
     190:	................
     1a0:	................
     1b0:	................
     1c0:	................

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #356]	; (338 <ResetHandler+0x168>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	93dc <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #336]	; (33c <ResetHandler+0x16c>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #332]	; (340 <ResetHandler+0x170>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #332]	; (344 <ResetHandler+0x174>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #332]	; (348 <ResetHandler+0x178>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #328]	; (34c <ResetHandler+0x17c>)
     202:	ldr	r2, [pc, #332]	; (350 <ResetHandler+0x180>)
     204:	str	r2, [r3, #0]
		RTC_SR = 0;
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     206:	ldr	r3, [pc, #332]	; (354 <ResetHandler+0x184>)
     208:	ldrb	r2, [r3, #0]
     20a:	lsls	r1, r2, #28
     20c:	bpl.n	216 <ResetHandler+0x46>
     20e:	ldrb	r2, [r3, #0]
     210:	orr.w	r2, r2, #8
     214:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     216:	ldr	r3, [pc, #320]	; (358 <ResetHandler+0x188>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     218:	ldr	r1, [pc, #320]	; (35c <ResetHandler+0x18c>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     21a:	movs	r2, #170	; 0xaa
     21c:	strb	r2, [r3, #0]
     21e:	ldr	r2, [pc, #320]	; (360 <ResetHandler+0x190>)
     220:	ldr	r3, [pc, #320]	; (364 <ResetHandler+0x194>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     222:	cmp	r3, r1
     224:	bcs.n	230 <ResetHandler+0x60>
     226:	ldr.w	r0, [r2, #4]!
     22a:	str.w	r0, [r3], #4
     22e:	b.n	222 <ResetHandler+0x52>
     230:	ldr	r3, [pc, #308]	; (368 <ResetHandler+0x198>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     232:	ldr	r1, [pc, #312]	; (36c <ResetHandler+0x19c>)
     234:	movs	r2, #0
     236:	cmp	r3, r1
     238:	bcs.n	240 <ResetHandler+0x70>
     23a:	str.w	r2, [r3], #4
     23e:	b.n	236 <ResetHandler+0x66>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     240:	ldr	r1, [pc, #300]	; (370 <ResetHandler+0x1a0>)
     242:	ldr	r2, [pc, #304]	; (374 <ResetHandler+0x1a4>)
     244:	movs	r3, #0
     246:	ldr.w	r0, [r2, r3, lsl #2]
     24a:	str.w	r0, [r1, r3, lsl #2]
     24e:	adds	r3, #1
     250:	cmp	r3, #116	; 0x74
     252:	bne.n	246 <ResetHandler+0x76>
     254:	ldr	r3, [pc, #288]	; (378 <ResetHandler+0x1a8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     256:	ldr	r2, [pc, #292]	; (37c <ResetHandler+0x1ac>)
     258:	movs	r1, #128	; 0x80
     25a:	strb.w	r1, [r3], #1
     25e:	cmp	r3, r2
     260:	bne.n	25a <ResetHandler+0x8a>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     262:	ldr	r3, [pc, #284]	; (380 <ResetHandler+0x1b0>)
     264:	ldr	r2, [pc, #264]	; (370 <ResetHandler+0x1a0>)
     266:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     268:	ldr	r3, [pc, #280]	; (384 <ResetHandler+0x1b4>)
     26a:	movs	r2, #138	; 0x8a
     26c:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     26e:	sub.w	r3, r3, #4096	; 0x1000
     272:	movs	r2, #36	; 0x24
     274:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     276:	movs	r2, #160	; 0xa0
     278:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     27a:	ldrb	r2, [r3, #6]
     27c:	lsls	r2, r2, #30
     27e:	bpl.n	27a <ResetHandler+0xaa>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     280:	ldrb	r2, [r3, #6]
     282:	lsls	r4, r2, #27
     284:	bmi.n	280 <ResetHandler+0xb0>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     286:	ldr	r2, [pc, #256]	; (388 <ResetHandler+0x1b8>)
     288:	ldrb	r3, [r2, #6]
     28a:	and.w	r3, r3, #12
     28e:	cmp	r3, #8
     290:	ldr	r3, [pc, #244]	; (388 <ResetHandler+0x1b8>)
     292:	bne.n	288 <ResetHandler+0xb8>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(2);
    #elif F_CPU == 120000000
	MCG_C5 = MCG_C5_PRDIV0(1);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(14);
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     294:	movs	r2, #1
     296:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
     298:	movs	r2, #72	; 0x48
     29a:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     29c:	ldrb	r2, [r3, #6]
     29e:	lsls	r0, r2, #26
     2a0:	bpl.n	29c <ResetHandler+0xcc>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2a2:	ldr	r2, [pc, #228]	; (388 <ResetHandler+0x1b8>)
     2a4:	ldrb	r1, [r2, #6]
     2a6:	ldr	r3, [pc, #224]	; (388 <ResetHandler+0x1b8>)
     2a8:	lsls	r1, r1, #25
     2aa:	bpl.n	2a4 <ResetHandler+0xd4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     2ac:	ldr	r2, [pc, #220]	; (38c <ResetHandler+0x1bc>)
     2ae:	ldr	r1, [pc, #224]	; (390 <ResetHandler+0x1c0>)
     2b0:	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2b2:	movs	r1, #2
     2b4:	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2b6:	movs	r2, #32
     2b8:	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ba:	ldrb	r2, [r3, #6]
     2bc:	and.w	r2, r2, #12
     2c0:	cmp	r2, #12
     2c2:	bne.n	2ba <ResetHandler+0xea>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2c4:	ldr	r3, [pc, #204]	; (394 <ResetHandler+0x1c4>)
     2c6:	ldr	r2, [pc, #208]	; (398 <ResetHandler+0x1c8>)
     2c8:	str	r2, [r3, #0]
#endif

#if defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started.  For Teensy 3.6
	// we don't do this early.  See comment above about slow rising power.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     2ca:	ldr	r2, [pc, #208]	; (39c <ResetHandler+0x1cc>)
     2cc:	ldr	r4, [pc, #208]	; (3a0 <ResetHandler+0x1d0>)
     2ce:	ldr	r3, [r2, #0]
     2d0:	ands.w	r3, r3, #256	; 0x100
     2d4:	bne.n	2de <ResetHandler+0x10e>
		RTC_SR = 0;
     2d6:	str	r3, [r4, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     2d8:	mov.w	r3, #5376	; 0x1500
     2dc:	str	r3, [r2, #0]
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2de:	ldr	r3, [pc, #196]	; (3a4 <ResetHandler+0x1d4>)
     2e0:	ldr	r2, [pc, #196]	; (3a8 <ResetHandler+0x1d8>)
     2e2:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2e4:	movs	r2, #0
     2e6:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2e8:	movs	r2, #7
     2ea:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2ee:	ldr	r2, [pc, #188]	; (3ac <ResetHandler+0x1dc>)
     2f0:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2f4:	cpsie	i

	_init_Teensyduino_internal_();
     2f6:	bl	960c <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2fa:	ldr	r3, [r4, #0]
     2fc:	lsls	r2, r3, #31
     2fe:	bpl.n	30c <ResetHandler+0x13c>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     300:	ldr	r0, [pc, #172]	; (3b0 <ResetHandler+0x1e0>)
     302:	bl	94f0 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     306:	ldr	r3, [pc, #172]	; (3b4 <ResetHandler+0x1e4>)
     308:	ldr	r2, [pc, #172]	; (3b8 <ResetHandler+0x1e8>)
     30a:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     30c:	ldr	r3, [pc, #172]	; (3bc <ResetHandler+0x1ec>)
     30e:	ldrb	r3, [r3, #0]
     310:	lsls	r3, r3, #25
     312:	bpl.n	328 <ResetHandler+0x158>
     314:	ldr	r4, [pc, #156]	; (3b4 <ResetHandler+0x1e4>)
     316:	ldr	r3, [pc, #160]	; (3b8 <ResetHandler+0x1e8>)
     318:	ldr	r2, [r4, #0]
     31a:	cmp	r2, r3
     31c:	bne.n	328 <ResetHandler+0x158>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     31e:	ldr	r0, [pc, #144]	; (3b0 <ResetHandler+0x1e0>)
     320:	bl	94f0 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     324:	movs	r3, #0
     326:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     328:	bl	b58c <__libc_init_array>

	startup_late_hook();
     32c:	bl	93e8 <startup_late_hook>
	main();
     330:	bl	a76c <main>
     334:	b.n	334 <ResetHandler+0x164>
     336:	nop
     338:	.word	0x4005200e
     33c:	.word	0x40048030
     340:	.word	0x00043f82
     344:	.word	0x2b000001
     348:	.word	0xe000ed88
     34c:	.word	0xe0082000
     350:	.word	0x85000003
     354:	.word	0x4007d002
     358:	.word	0x4007e000
     35c:	.word	0x1fff14b8
     360:	.word	0x000101b4
     364:	.word	0x1fff0970
     368:	.word	0x1fff14b8
     36c:	.word	0x1fff209c
     370:	.word	0x1fff0200
     374:	.word	0x00000000
     378:	.word	0xe000e400
     37c:	.word	0xe000e464
     380:	.word	0xe000ed08
     384:	.word	0x40065000
     388:	.word	0x40064000
     38c:	.word	0x40048044
     390:	.word	0x01030000
     394:	.word	0x40048004
     398:	.word	0x000510c0
     39c:	.word	0x4003d010
     3a0:	.word	0x4003d014
     3a4:	.word	0xe000e014
     3a8:	.word	0x000176ff
     3ac:	.word	0x20200000
     3b0:	.word	0x00000031
     3b4:	.word	0x4003e01c
     3b8:	.word	0x5a94c3a5
     3bc:	.word	0x4007f000
     3c0:	.word	0xffffffff
     3c4:	.word	0xffffffff
     3c8:	.word	0xffffffff
     3cc:	.word	0xffffffff
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff14b8
     42c:	.word	0x00000000
     430:	.word	0x000101b0

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff14bc
     460:	.word	0x000101b0
     464:	.word	0x1fff14b8
     468:	.word	0x00000000

0000046c <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     46c:	movs	r0, #0
     46e:	bx	lr

00000470 <Print::flush()>:
	virtual void flush()				{ }
     470:	bx	lr
     472:	nop

00000474 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
     474:	mov.w	r0, #4294967295
     478:	bx	lr
     47a:	nop

0000047c <File::read(void*, unsigned int)>:
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
     47c:	ldr	r0, [r0, #16]
     47e:	cbz	r0, 486 <File::read(void*, unsigned int)+0xa>
     480:	ldr	r3, [r0, #0]
     482:	ldr	r3, [r3, #40]	; 0x28
     484:	bx	r3
	}
     486:	bx	lr

00000488 <File::write(void const*, unsigned int)>:
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
     488:	ldr	r0, [r0, #16]
     48a:	cbz	r0, 492 <File::write(void const*, unsigned int)+0xa>
     48c:	ldr	r3, [r0, #0]
     48e:	ldr	r3, [r3, #44]	; 0x2c
     490:	bx	r3
	}
     492:	bx	lr

00000494 <File::available()>:
	virtual int available() {
		return (f) ? f->available() : 0;
     494:	ldr	r0, [r0, #16]
     496:	cbz	r0, 49e <File::available()+0xa>
     498:	ldr	r3, [r0, #0]
     49a:	ldr	r3, [r3, #16]
     49c:	bx	r3
	}
     49e:	bx	lr

000004a0 <File::peek()>:
	virtual int peek() {
		return (f) ? f->peek() : -1;
     4a0:	ldr	r0, [r0, #16]
     4a2:	cbz	r0, 4aa <File::peek()+0xa>
     4a4:	ldr	r3, [r0, #0]
     4a6:	ldr	r3, [r3, #24]
     4a8:	bx	r3
	}
     4aa:	mov.w	r0, #4294967295
     4ae:	bx	lr

000004b0 <File::flush()>:
	virtual void flush() {
		if (f) f->flush();
     4b0:	ldr	r0, [r0, #16]
     4b2:	cbz	r0, 4ba <File::flush()+0xa>
     4b4:	ldr	r3, [r0, #0]
     4b6:	ldr	r3, [r3, #12]
     4b8:	bx	r3
     4ba:	bx	lr

000004bc <File::seek(unsigned long, int)>:
	}
	virtual bool seek(uint32_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
     4bc:	ldr	r0, [r0, #16]
     4be:	cbz	r0, 4c6 <File::seek(unsigned long, int)+0xa>
     4c0:	ldr	r3, [r0, #0]
     4c2:	ldr	r3, [r3, #48]	; 0x30
     4c4:	bx	r3
	}
     4c6:	bx	lr

000004c8 <File::position()>:
	virtual uint32_t position() {
		return (f) ? f->position() : 0;
     4c8:	ldr	r0, [r0, #16]
     4ca:	cbz	r0, 4d2 <File::position()+0xa>
     4cc:	ldr	r3, [r0, #0]
     4ce:	ldr	r3, [r3, #52]	; 0x34
     4d0:	bx	r3
	}
     4d2:	bx	lr

000004d4 <File::size()>:
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
     4d4:	ldr	r0, [r0, #16]
     4d6:	cbz	r0, 4de <File::size()+0xa>
     4d8:	ldr	r3, [r0, #0]
     4da:	ldr	r3, [r3, #56]	; 0x38
     4dc:	bx	r3
	}
     4de:	bx	lr

000004e0 <File::close()>:
	virtual void close() {
		if (f) f->close();
     4e0:	ldr	r0, [r0, #16]
     4e2:	cbz	r0, 4ea <File::close()+0xa>
     4e4:	ldr	r3, [r0, #0]
     4e6:	ldr	r3, [r3, #60]	; 0x3c
     4e8:	bx	r3
     4ea:	bx	lr

000004ec <File::operator bool()>:
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
     4ec:	ldr	r0, [r0, #16]
     4ee:	cbz	r0, 4f6 <File::operator bool()+0xa>
     4f0:	ldr	r3, [r0, #0]
     4f2:	ldr	r3, [r3, #64]	; 0x40
     4f4:	bx	r3
	}
     4f6:	bx	lr

000004f8 <File::name()>:
	virtual const char* name() {
		return (f) ? f->name() : "";
     4f8:	ldr	r0, [r0, #16]
     4fa:	cbz	r0, 502 <File::name()+0xa>
     4fc:	ldr	r3, [r0, #0]
     4fe:	ldr	r3, [r3, #68]	; 0x44
     500:	bx	r3
	}
     502:	ldr	r0, [pc, #4]	; (508 <File::name()+0x10>)
     504:	bx	lr
     506:	nop
     508:	.word	0x0000f99c

0000050c <File::isDirectory()>:
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
     50c:	ldr	r0, [r0, #16]
     50e:	cbz	r0, 516 <File::isDirectory()+0xa>
     510:	ldr	r3, [r0, #0]
     512:	ldr	r3, [r3, #72]	; 0x48
     514:	bx	r3
	}
     516:	bx	lr

00000518 <File::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
     518:	push	{r3, r4, r5, lr}
		return (f) ? f->openNextFile(mode) : *this;
     51a:	ldr	r3, [r1, #16]
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
     51c:	mov	r4, r0
		return (f) ? f->openNextFile(mode) : *this;
     51e:	cbz	r3, 52c <File::openNextFile(unsigned char)+0x14>
     520:	ldr	r5, [r3, #0]
     522:	mov	r1, r3
     524:	ldr	r3, [r5, #76]	; 0x4c
     526:	blx	r3
	}
     528:	mov	r0, r4
     52a:	pop	{r3, r4, r5, pc}
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     52c:	mov.w	r0, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
     530:	ldr	r2, [pc, #24]	; (54c <File::openNextFile(unsigned char)+0x34>)
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
     532:	strb	r3, [r4, #4]
     534:	strb	r3, [r4, #12]
     536:	str	r0, [r4, #8]
     538:	str	r2, [r4, #0]
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
     53a:	ldr	r3, [r1, #16]
     53c:	str	r3, [r4, #16]
		if (f) f->refcount++;
     53e:	cmp	r3, #0
     540:	beq.n	528 <File::openNextFile(unsigned char)+0x10>
     542:	ldr	r2, [r3, #16]
     544:	adds	r2, #1
     546:	str	r2, [r3, #16]
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
	}
     548:	mov	r0, r4
     54a:	pop	{r3, r4, r5, pc}
     54c:	.word	0x0000f7b8

00000550 <File::rewindDirectory()>:
	virtual void rewindDirectory(void) {
		if (f) f->rewindDirectory();
     550:	ldr	r0, [r0, #16]
     552:	cbz	r0, 55a <File::rewindDirectory()+0xa>
     554:	ldr	r3, [r0, #0]
     556:	ldr	r3, [r3, #80]	; 0x50
     558:	bx	r3
     55a:	bx	lr

0000055c <File::read()>:
	}
	bool seek(uint32_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     55c:	ldr	r0, [r0, #16]
     55e:	cbz	r0, 582 <File::read()+0x26>
		if (f) f->rewindDirectory();
	}
	bool seek(uint32_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
     560:	push	{lr}
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     562:	ldr	r3, [r0, #0]
		if (f) f->rewindDirectory();
	}
	bool seek(uint32_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
     564:	sub	sp, #12
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     566:	ldr	r3, [r3, #40]	; 0x28
     568:	movs	r2, #1
     56a:	add.w	r1, sp, #7
     56e:	blx	r3
     570:	cbz	r0, 57c <File::read()+0x20>
		return b;
     572:	ldrb.w	r0, [sp, #7]
	}
     576:	add	sp, #12
     578:	ldr.w	pc, [sp], #4
	}
	bool seek(uint32_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     57c:	mov.w	r0, #4294967295
     580:	b.n	576 <File::read()+0x1a>
     582:	mov.w	r0, #4294967295
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
     586:	bx	lr

00000588 <File::write(unsigned char)>:
	size_t write(uint8_t b) {
     588:	push	{r4, lr}
     58a:	sub	sp, #8
     58c:	add	r3, sp, #8
		return write(&b, 1);
     58e:	ldr	r2, [r0, #0]
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
	size_t write(uint8_t b) {
     590:	strb.w	r1, [r3, #-1]!
		return write(&b, 1);
     594:	ldr	r4, [r2, #44]	; 0x2c
     596:	mov	r1, r3
     598:	movs	r2, #1
     59a:	blx	r4
	}
     59c:	add	sp, #8
     59e:	pop	{r4, pc}

000005a0 <SDFile::operator bool()>:
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     5a0:	ldr	r3, [r0, #92]	; 0x5c
     5a2:	cbz	r3, 5a8 <SDFile::operator bool()+0x8>
     5a4:	movs	r0, #1
		}
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
     5a6:	bx	lr
     5a8:	ldr	r0, [r0, #96]	; 0x60
     5aa:	adds	r0, #0
     5ac:	it	ne
     5ae:	movne	r0, #1
     5b0:	bx	lr
     5b2:	nop

000005b4 <__tcf_0>:

  const char *sd_str[]={"sdio"}; // edit to reflect your configuration
  const int cs[] = {BUILTIN_SDCARD}; // edit to reflect your configuration
  const int nsd = sizeof(cs)/sizeof(int);

SDClass sdx[nsd];
     5b4:	bx	lr
     5b6:	nop

000005b8 <File::whoami()>:
	}
	virtual ~File() {
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
     5b8:	push	{r4, lr}
     5ba:	mov	r4, r0
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
     5bc:	mov	r2, r0
     5be:	ldr	r3, [r0, #16]
     5c0:	ldr	r1, [pc, #20]	; (5d8 <File::whoami()+0x20>)
     5c2:	ldr	r0, [pc, #24]	; (5dc <File::whoami()+0x24>)
     5c4:	bl	a750 <Print::printf(char const*, ...)>
		if (f) f->whoami();
     5c8:	ldr	r0, [r4, #16]
     5ca:	cbz	r0, 5d6 <File::whoami()+0x1e>
     5cc:	ldr	r3, [r0, #0]
	}
     5ce:	ldmia.w	sp!, {r4, lr}
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
		if (f) f->whoami();
     5d2:	ldr	r3, [r3, #36]	; 0x24
     5d4:	bx	r3
     5d6:	pop	{r4, pc}
     5d8:	.word	0x0000f888
     5dc:	.word	0x1fff0a0c

000005e0 <SDFile::whoami()>:
		if (filename) free(filename);
	}
#ifdef FILE_WHOAMI
	virtual void whoami() {
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
     5e0:	mov	r2, r0
     5e2:	ldr	r3, [r0, #16]
     5e4:	ldr	r1, [pc, #4]	; (5ec <SDFile::whoami()+0xc>)
     5e6:	ldr	r0, [pc, #8]	; (5f0 <SDFile::whoami()+0x10>)
     5e8:	b.w	a750 <Print::printf(char const*, ...)>
     5ec:	.word	0x0000f8a4
     5f0:	.word	0x1fff0a0c

000005f4 <SDFile::close()>:
		return sdfatfile.curPosition();
	}
	virtual uint32_t size() {
		return sdfatfile.size();
	}
	virtual void close() {
     5f4:	push	{r4, lr}
     5f6:	mov	r4, r0
		if (filename) {
     5f8:	ldr	r0, [r0, #100]	; 0x64
     5fa:	cbz	r0, 604 <SDFile::close()+0x10>
			free(filename);
     5fc:	bl	b5ec <free>
			filename = nullptr;
     600:	movs	r3, #0
     602:	str	r3, [r4, #100]	; 0x64
		}
		sdfatfile.close();
     604:	add.w	r0, r4, #36	; 0x24
	}
     608:	ldmia.w	sp!, {r4, lr}
	virtual void close() {
		if (filename) {
			free(filename);
			filename = nullptr;
		}
		sdfatfile.close();
     60c:	b.w	733c <FsBaseFile::close()>

00000610 <SDFile::openNextFile(unsigned char)>:
		return filename;
	}
	virtual boolean isDirectory(void) {
		return sdfatfile.isDirectory();
	}
	virtual File openNextFile(uint8_t mode=0) {
     610:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     614:	movs	r3, #0
     616:	sub	sp, #80	; 0x50
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     618:	mov	r2, r3
     61a:	mov	r5, r0
     61c:	adds	r1, #36	; 0x24
     61e:	add	r0, sp, #16
     620:	mov.w	r4, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     624:	ldr	r7, [pc, #148]	; (6bc <SDFile::openNextFile(unsigned char)+0xac>)
     626:	strb.w	r3, [sp, #4]
     62a:	strb.w	r3, [sp, #12]
 * \class FsBaseFile
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}
     62e:	str	r3, [sp, #72]	; 0x48
     630:	str	r3, [sp, #76]	; 0x4c
     632:	str	r4, [sp, #8]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     634:	str	r7, [sp, #0]
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     636:	bl	73e4 <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     63a:	ldr	r3, [sp, #72]	; 0x48
     63c:	cmp	r3, #0
     63e:	beq.n	6a6 <SDFile::openNextFile(unsigned char)+0x96>
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
     640:	movs	r0, #104	; 0x68
     642:	bl	a780 <operator new(unsigned int)>
     646:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     648:	ldrb.w	r6, [sp, #4]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     64c:	ldr	r2, [sp, #8]
     64e:	ldrb.w	r3, [sp, #12]
#endif

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     652:	ldr	r0, [pc, #108]	; (6c0 <SDFile::openNextFile(unsigned char)+0xb0>)
     654:	ldr	r1, [pc, #108]	; (6c4 <SDFile::openNextFile(unsigned char)+0xb4>)
     656:	strb	r6, [r4, #24]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     658:	mov.w	r8, #1000	; 0x3e8
{
  public:
	constexpr Print() : write_error(0) {}
     65c:	movs	r6, #0
     65e:	str	r0, [r4, #0]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     660:	str	r1, [r4, #20]
     662:	str	r2, [r4, #28]
     664:	strb.w	r3, [r4, #32]
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     668:	add.w	r0, r4, #36	; 0x24
     66c:	add	r1, sp, #16
     66e:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     670:	strb	r6, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     672:	str	r6, [r4, #16]
     674:	str.w	r8, [r4, #8]
     678:	bl	72c4 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     67c:	ldr	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     67e:	ldr	r2, [pc, #72]	; (6c8 <SDFile::openNextFile(unsigned char)+0xb8>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     680:	str	r7, [r4, #20]
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     682:	adds	r3, #1
     684:	str	r6, [r4, #100]	; 0x64
     686:	strb	r6, [r5, #4]
     688:	str.w	r8, [r5, #8]
     68c:	strb	r6, [r5, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
     68e:	str	r4, [r5, #16]
		if (f) f->refcount++;
     690:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     692:	str	r2, [r5, #0]
     694:	ldr	r3, [pc, #52]	; (6cc <SDFile::openNextFile(unsigned char)+0xbc>)
     696:	str	r3, [sp, #0]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     698:	add	r0, sp, #16
     69a:	bl	733c <FsBaseFile::close()>
	}
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
     69e:	mov	r0, r5
     6a0:	add	sp, #80	; 0x50
     6a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     6a6:	ldr	r3, [sp, #76]	; 0x4c
     6a8:	cmp	r3, #0
     6aa:	bne.n	640 <SDFile::openNextFile(unsigned char)+0x30>

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     6ac:	ldr	r2, [pc, #24]	; (6c8 <SDFile::openNextFile(unsigned char)+0xb8>)
     6ae:	strb	r3, [r5, #4]
     6b0:	str	r4, [r5, #8]
     6b2:	strb	r3, [r5, #12]
     6b4:	str	r3, [r5, #16]
     6b6:	str	r2, [r5, #0]
     6b8:	b.n	694 <SDFile::openNextFile(unsigned char)+0x84>
     6ba:	nop
     6bc:	.word	0x0000f794
     6c0:	.word	0x0000f814
     6c4:	.word	0x0000f74c
     6c8:	.word	0x0000f7b8
     6cc:	.word	0x0000f770

000006d0 <SDFile::available()>:
		return sdfatfile.write(buf, size);
	}
	virtual int peek() {
		return sdfatfile.peek();
	}
	virtual int available() {
     6d0:	ldr	r2, [r0, #92]	; 0x5c
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     6d2:	cbz	r2, 6ee <SDFile::available()+0x1e>
  void fsetpos(const fspos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() {
    return isFile() ? fileSize() - curPosition() : 0;
     6d4:	ldrb	r3, [r2, #0]
     6d6:	and.w	r3, r3, #8
     6da:	and.w	r0, r3, #255	; 0xff
     6de:	cbz	r3, 722 <SDFile::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     6e0:	ldr	r3, [r2, #28]
     6e2:	ldr	r0, [r2, #20]
     6e4:	subs	r0, r3, r0
     6e6:	it	mi
     6e8:	mvnmi.w	r0, #2147483648	; 0x80000000
     6ec:	bx	lr
     6ee:	ldr	r1, [r0, #96]	; 0x60
     6f0:	cbz	r1, 724 <SDFile::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     6f2:	ldrb.w	r3, [r1, #49]	; 0x31
     6f6:	and.w	r3, r3, #8
     6fa:	and.w	r0, r3, #255	; 0xff
     6fe:	cbz	r3, 722 <SDFile::available()+0x52>
     700:	ldrd	r2, r3, [r1, #16]
     704:	ldrd	r0, r1, [r1]
     708:	subs	r0, r2, r0
     70a:	push	{r4, r5}
     70c:	sbc.w	r1, r3, r1
     710:	movs	r5, #0
     712:	mvn.w	r4, #2147483648	; 0x80000000
     716:	cmp	r5, r1
     718:	it	eq
     71a:	cmpeq	r4, r0
     71c:	bcs.n	720 <SDFile::available()+0x50>
     71e:	mov	r0, r4
		return sdfatfile.available();
	}
     720:	pop	{r4, r5}
     722:	bx	lr
     724:	mov	r0, r1
     726:	bx	lr

00000728 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  }
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
     728:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     72a:	cbz	r3, 732 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     72c:	mov	r0, r3
     72e:	b.w	5e4c <FatFile::peek()>
     732:	ldr	r0, [r0, #76]	; 0x4c
     734:	cbz	r0, 73a <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     736:	b.w	4218 <ExFatFile::peek()>
    return BaseFile::peek();
  }
     73a:	mov.w	r0, #4294967295
     73e:	bx	lr

00000740 <StreamFile<FsBaseFile, unsigned long long>::read()>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
     740:	push	{lr}
     742:	ldr	r3, [r0, #72]	; 0x48
     744:	sub	sp, #12
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     746:	cbz	r3, 762 <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     748:	mov	r0, r3
     74a:	movs	r2, #1
     74c:	add.w	r1, sp, #7
     750:	bl	5cb4 <FatFile::read(void*, unsigned int)>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     754:	cmp	r0, #1
     756:	bne.n	772 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     758:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
  }
     75c:	add	sp, #12
     75e:	ldr.w	pc, [sp], #4
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     762:	ldr	r0, [r0, #76]	; 0x4c
     764:	cbz	r0, 772 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     766:	movs	r2, #1
     768:	add.w	r1, sp, #7
     76c:	bl	4078 <ExFatFile::read(void*, unsigned int)>
     770:	b.n	754 <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     772:	mov.w	r0, #4294967295
     776:	b.n	75c <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000778 <SDFile::flush()>:
	virtual void flush() {
     778:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     77a:	cbz	r3, 782 <SDFile::flush()+0xa>
     77c:	mov	r0, r3
     77e:	b.w	62d8 <FatFile::sync()>
     782:	ldr	r0, [r0, #96]	; 0x60
     784:	cbz	r0, 78a <SDFile::flush()+0x12>
     786:	b.w	515c <ExFatFile::sync()>
     78a:	bx	lr

0000078c <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     78c:	push	{lr}
     78e:	ldr	r3, [r0, #72]	; 0x48
     790:	sub	sp, #12
     792:	strb.w	r1, [sp, #7]
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     796:	cbz	r3, 7aa <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     798:	mov	r0, r3
     79a:	movs	r2, #1
     79c:	add.w	r1, sp, #7
     7a0:	bl	62e4 <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     7a4:	add	sp, #12
     7a6:	ldr.w	pc, [sp], #4
     7aa:	ldr	r0, [r0, #76]	; 0x4c
     7ac:	cmp	r0, #0
     7ae:	beq.n	7a4 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     7b0:	movs	r2, #1
     7b2:	add.w	r1, sp, #7
     7b6:	bl	556c <ExFatFile::write(void const*, unsigned int)>
     7ba:	add	sp, #12
     7bc:	ldr.w	pc, [sp], #4

000007c0 <SDFile::~SDFile()>:

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	virtual ~SDFile(void) {
     7c0:	push	{r3, r4, r5, lr}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     7c2:	ldr	r3, [r0, #92]	; 0x5c
     7c4:	ldr	r2, [pc, #72]	; (810 <SDFile::~SDFile()+0x50>)
     7c6:	str	r2, [r0, #0]
     7c8:	mov	r4, r0
		if (sdfatfile) sdfatfile.close();
     7ca:	add.w	r5, r0, #36	; 0x24
     7ce:	cbz	r3, 806 <SDFile::~SDFile()+0x46>
     7d0:	mov	r0, r5
     7d2:	bl	733c <FsBaseFile::close()>
		if (filename) free(filename);
     7d6:	ldr	r0, [r4, #100]	; 0x64
     7d8:	cbz	r0, 7de <SDFile::~SDFile()+0x1e>
     7da:	bl	b5ec <free>
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     7de:	ldr	r3, [pc, #52]	; (814 <SDFile::~SDFile()+0x54>)
     7e0:	str	r3, [r4, #20]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     7e2:	mov	r0, r5
     7e4:	bl	733c <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     7e8:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     7ea:	ldr	r3, [pc, #44]	; (818 <SDFile::~SDFile()+0x58>)
     7ec:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     7ee:	cbz	r2, 802 <SDFile::~SDFile()+0x42>
     7f0:	ldr	r3, [r2, #16]
     7f2:	subs	r3, #1
     7f4:	str	r3, [r2, #16]
     7f6:	cbnz	r3, 802 <SDFile::~SDFile()+0x42>
     7f8:	ldr	r0, [r4, #16]
     7fa:	cbz	r0, 802 <SDFile::~SDFile()+0x42>
     7fc:	ldr	r3, [r0, #0]
     7fe:	ldr	r3, [r3, #32]
     800:	blx	r3
	}
     802:	mov	r0, r4
     804:	pop	{r3, r4, r5, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     806:	ldr	r3, [r0, #96]	; 0x60
     808:	cmp	r3, #0
     80a:	bne.n	7d0 <SDFile::~SDFile()+0x10>
     80c:	b.n	7d6 <SDFile::~SDFile()+0x16>
     80e:	nop
     810:	.word	0x0000f814
     814:	.word	0x0000f770
     818:	.word	0x0000f7b8

0000081c <SDClass::remove(char const*)>:
		return sdfs.mkdir(filepath);
	}
	bool rename(const char *oldfilepath, const char *newfilepath) {
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
     81c:	push	{r4, lr}
     81e:	ldr.w	r4, [r0, #1148]	; 0x47c
     822:	sub	sp, #56	; 0x38
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
     824:	cbz	r4, 850 <SDClass::remove(char const*)+0x34>
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     826:	mov	r2, r1
     828:	mov	r0, sp
     82a:	mov	r1, r4
     82c:	movs	r3, #1
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     82e:	movs	r4, #0
     830:	strb.w	r4, [sp]
     834:	strb.w	r4, [sp, #1]
     838:	strb.w	r4, [sp, #2]
     83c:	bl	5c98 <FatFile::open(FatVolume*, char const*, int)>
     840:	cbnz	r0, 846 <SDClass::remove(char const*)+0x2a>
		return sdfs.remove(filepath);
	}
     842:	add	sp, #56	; 0x38
     844:	pop	{r4, pc}
     846:	mov	r0, sp
     848:	bl	6ce4 <FatFile::remove()>
     84c:	add	sp, #56	; 0x38
     84e:	pop	{r4, pc}
     850:	ldr.w	r0, [r0, #1152]	; 0x480
     854:	cmp	r0, #0
     856:	beq.n	842 <SDClass::remove(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     858:	mov	r2, r1
     85a:	movs	r3, #1
     85c:	mov	r1, r0
     85e:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     860:	strb.w	r4, [sp, #49]	; 0x31
     864:	strb.w	r4, [sp, #50]	; 0x32
     868:	strb.w	r4, [sp, #51]	; 0x33
     86c:	bl	481c <ExFatFile::open(ExFatVolume*, char const*, int)>
     870:	cmp	r0, #0
     872:	beq.n	842 <SDClass::remove(char const*)+0x26>
     874:	mov	r0, sp
     876:	bl	4ed0 <ExFatFile::remove()>
     87a:	add	sp, #56	; 0x38
     87c:	pop	{r4, pc}
     87e:	nop

00000880 <SDClass::rmdir(char const*)>:
	bool rmdir(const char *filepath) {
     880:	push	{r4, r5, lr}
     882:	ldr.w	r4, [r0, #1148]	; 0x47c
     886:	sub	sp, #60	; 0x3c
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
           m_xVol ? m_xVol->rmdir(path) : false;
     888:	cbz	r4, 8b4 <SDClass::rmdir(char const*)+0x34>
     88a:	movs	r5, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     88c:	mov	r2, r1
     88e:	mov	r3, r5
     890:	mov	r1, r4
     892:	mov	r0, sp
     894:	strb.w	r5, [sp]
     898:	strb.w	r5, [sp, #1]
     89c:	strb.w	r5, [sp, #2]
     8a0:	bl	5c98 <FatFile::open(FatVolume*, char const*, int)>
     8a4:	cbnz	r0, 8aa <SDClass::rmdir(char const*)+0x2a>
		return sdfs.rmdir(filepath);
	}
     8a6:	add	sp, #60	; 0x3c
     8a8:	pop	{r4, r5, pc}
     8aa:	mov	r0, sp
     8ac:	bl	6090 <FatFile::rmdir()>
     8b0:	add	sp, #60	; 0x3c
     8b2:	pop	{r4, r5, pc}
     8b4:	ldr.w	r0, [r0, #1152]	; 0x480
     8b8:	cmp	r0, #0
     8ba:	beq.n	8a6 <SDClass::rmdir(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     8bc:	mov	r2, r1
     8be:	mov	r3, r4
     8c0:	mov	r1, r0
     8c2:	mov	r0, sp
     8c4:	strb.w	r4, [sp, #49]	; 0x31
     8c8:	strb.w	r4, [sp, #50]	; 0x32
     8cc:	strb.w	r4, [sp, #51]	; 0x33
     8d0:	bl	481c <ExFatFile::open(ExFatVolume*, char const*, int)>
     8d4:	cmp	r0, #0
     8d6:	beq.n	8a6 <SDClass::rmdir(char const*)+0x26>
     8d8:	mov	r0, sp
     8da:	bl	4fa8 <ExFatFile::rmdir()>
     8de:	add	sp, #60	; 0x3c
     8e0:	pop	{r4, r5, pc}
     8e2:	nop

000008e4 <SDFile::name()>:
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
     8e4:	push	{r3, r4, r5, lr}
		if (!filename) {
     8e6:	ldr	r4, [r0, #100]	; 0x64
     8e8:	cbz	r4, 8ee <SDFile::name()+0xa>
				static char zeroterm = 0;
				filename = &zeroterm;
			}
		}
		return filename;
	}
     8ea:	mov	r0, r4
     8ec:	pop	{r3, r4, r5, pc}
     8ee:	mov	r5, r0
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
		if (!filename) {
			filename = (char *)malloc(MAX_FILENAME_LEN);
     8f0:	mov.w	r0, #256	; 0x100
     8f4:	bl	b5dc <malloc>
     8f8:	mov	r1, r0
     8fa:	str	r0, [r5, #100]	; 0x64
			if (filename) {
     8fc:	cbz	r0, 920 <SDFile::name()+0x3c>
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    return m_fFile ? m_fFile->getName(name, len) :
     8fe:	ldr	r0, [r5, #92]	; 0x5c
   *             must be at least 13 bytes long.  The file's name will be
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
     900:	strb	r4, [r1, #0]
    return m_fFile ? m_fFile->getName(name, len) :
           m_xFile ? m_xFile->getName(name, len) : 0;
     902:	cbz	r0, 910 <SDFile::name()+0x2c>
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    return m_fFile ? m_fFile->getName(name, len) :
     904:	mov.w	r2, #256	; 0x100
     908:	bl	6998 <FatFile::getName(char*, unsigned int)>
     90c:	ldr	r4, [r5, #100]	; 0x64
     90e:	b.n	8ea <SDFile::name()+0x6>
           m_xFile ? m_xFile->getName(name, len) : 0;
     910:	ldr	r0, [r5, #96]	; 0x60
     912:	cbz	r0, 926 <SDFile::name()+0x42>
     914:	mov.w	r2, #256	; 0x100
     918:	bl	3ee4 <ExFatFile::getName(char*, unsigned int)>
     91c:	ldr	r4, [r5, #100]	; 0x64
     91e:	b.n	8ea <SDFile::name()+0x6>
				sdfatfile.getName(filename, MAX_FILENAME_LEN);
			} else {
				static char zeroterm = 0;
				filename = &zeroterm;
     920:	ldr	r4, [pc, #8]	; (92c <SDFile::name()+0x48>)
     922:	str	r4, [r5, #100]	; 0x64
     924:	b.n	8ea <SDFile::name()+0x6>
     926:	mov	r4, r1
     928:	b.n	8ea <SDFile::name()+0x6>
     92a:	nop
     92c:	.word	0x1fff14d4

00000930 <SDClass::mkdir(char const*)>:
		return File();
	}
	bool exists(const char *filepath) {
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
     930:	push	{r4, lr}
     932:	ldr.w	r4, [r0, #1148]	; 0x47c
     936:	sub	sp, #56	; 0x38
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
     938:	cbz	r4, 95a <SDClass::mkdir(char const*)+0x2a>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
     93a:	mov	r2, r1
     93c:	movs	r3, #1
     93e:	add.w	r1, r4, #1088	; 0x440
     942:	mov	r0, sp
     944:	movs	r4, #0
     946:	strb.w	r4, [sp]
     94a:	strb.w	r4, [sp, #1]
     94e:	strb.w	r4, [sp, #2]
     952:	bl	5b14 <FatFile::mkdir(FatFile*, char const*, bool)>
		return sdfs.mkdir(filepath);
	}
     956:	add	sp, #56	; 0x38
     958:	pop	{r4, pc}
     95a:	ldr.w	r0, [r0, #1152]	; 0x480
     95e:	cmp	r0, #0
     960:	beq.n	956 <SDClass::mkdir(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const ExChar_t* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
     962:	mov	r2, r1
     964:	movs	r3, #1
     966:	add.w	r1, r0, #1088	; 0x440
     96a:	mov	r0, sp
     96c:	strb.w	r4, [sp, #49]	; 0x31
     970:	strb.w	r4, [sp, #50]	; 0x32
     974:	strb.w	r4, [sp, #51]	; 0x33
     978:	bl	5304 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
     97c:	add	sp, #56	; 0x38
     97e:	pop	{r4, pc}

00000980 <SDClass::exists(char const*)>:
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
	bool exists(const char *filepath) {
     980:	push	{r4, r5, lr}
     982:	ldr.w	r4, [r0, #1148]	; 0x47c
     986:	sub	sp, #60	; 0x3c
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
           m_xVol ? m_xVol->exists(path) : false;
     988:	cbz	r4, 9a8 <SDClass::exists(char const*)+0x28>
     98a:	movs	r5, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
     98c:	mov	r2, r1
     98e:	mov	r3, r5
     990:	mov	r1, r4
     992:	mov	r0, sp
     994:	strb.w	r5, [sp]
     998:	strb.w	r5, [sp, #1]
     99c:	strb.w	r5, [sp, #2]
     9a0:	bl	5c98 <FatFile::open(FatVolume*, char const*, int)>
		return sdfs.exists(filepath);
	}
     9a4:	add	sp, #60	; 0x3c
     9a6:	pop	{r4, r5, pc}
     9a8:	ldr.w	r0, [r0, #1152]	; 0x480
     9ac:	cmp	r0, #0
     9ae:	beq.n	9a4 <SDClass::exists(char const*)+0x24>
   *
   * \return true if the file exists else false.
   */
  bool exists(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
     9b0:	mov	r2, r1
     9b2:	mov	r3, r4
     9b4:	mov	r1, r0
     9b6:	mov	r0, sp
     9b8:	strb.w	r4, [sp, #49]	; 0x31
     9bc:	strb.w	r4, [sp, #50]	; 0x32
     9c0:	strb.w	r4, [sp, #51]	; 0x33
     9c4:	bl	481c <ExFatFile::open(ExFatVolume*, char const*, int)>
     9c8:	add	sp, #60	; 0x3c
     9ca:	pop	{r4, r5, pc}

000009cc <SDFile::rewindDirectory()>:
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
	virtual void rewindDirectory(void) {
     9cc:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     9ce:	cbz	r3, 9f8 <SDFile::rewindDirectory()+0x2c>
  int read() {
    return BaseFile::read();
  }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
     9d0:	ldrb	r2, [r3, #0]
     9d2:	tst.w	r2, #112	; 0x70
     9d6:	bne.n	9da <SDFile::rewindDirectory()+0xe>
     9d8:	bx	lr
     9da:	push	{r4, lr}
     9dc:	mov	r4, r0
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     9de:	movs	r1, #0
     9e0:	mov	r0, r3
     9e2:	bl	60ec <FatFile::seekSet(unsigned long)>
     9e6:	ldr	r0, [r4, #96]	; 0x60
           m_xFile ? m_xFile->rename(dirFile->m_xFile, newPath) : false;
  }
  /** Set the file's current position to zero. */
  void rewind() {
    if (m_fFile) m_fFile->rewind();
    if (m_xFile) m_xFile->rewind();
     9e8:	cbz	r0, 9f6 <SDFile::rewindDirectory()+0x2a>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     9ea:	movs	r2, #0
     9ec:	movs	r3, #0
		sdfatfile.rewindDirectory();
	}
     9ee:	ldmia.w	sp!, {r4, lr}
     9f2:	b.w	4248 <ExFatFile::seekSet(unsigned long long)>
     9f6:	pop	{r4, pc}
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     9f8:	ldr	r0, [r0, #96]	; 0x60
     9fa:	cmp	r0, #0
     9fc:	beq.n	9d8 <SDFile::rewindDirectory()+0xc>
     9fe:	ldrb.w	r3, [r0, #49]	; 0x31
     a02:	tst.w	r3, #80	; 0x50
     a06:	beq.n	9d8 <SDFile::rewindDirectory()+0xc>
     a08:	movs	r2, #0
     a0a:	movs	r3, #0
     a0c:	b.w	4248 <ExFatFile::seekSet(unsigned long long)>

00000a10 <SDFile::position()>:
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
		return false;
	}
	virtual uint32_t position() {
     a10:	ldr	r3, [r0, #92]	; 0x5c
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     a12:	cbz	r3, a18 <SDFile::position()+0x8>
     a14:	ldr	r0, [r3, #20]
     a16:	bx	lr
     a18:	ldr	r0, [r0, #96]	; 0x60
     a1a:	cbz	r0, a1e <SDFile::position()+0xe>
     a1c:	ldr	r0, [r0, #0]
		return sdfatfile.curPosition();
	}
     a1e:	bx	lr

00000a20 <SDFile::size()>:
	virtual uint32_t size() {
     a20:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     a22:	cbz	r3, a28 <SDFile::size()+0x8>
     a24:	ldr	r0, [r3, #28]
     a26:	bx	lr
     a28:	ldr	r0, [r0, #96]	; 0x60
     a2a:	cbz	r0, a2e <SDFile::size()+0xe>
     a2c:	ldr	r0, [r0, #16]
		return sdfatfile.size();
	}
     a2e:	bx	lr

00000a30 <SDFile::read(void*, unsigned int)>:
		return sdfatfile.available();
	}
	virtual void flush() {
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
     a30:	ldr	r3, [r0, #92]	; 0x5c
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     a32:	cbz	r3, a3a <SDFile::read(void*, unsigned int)+0xa>
     a34:	mov	r0, r3
     a36:	b.w	5cb4 <FatFile::read(void*, unsigned int)>
     a3a:	ldr	r0, [r0, #96]	; 0x60
     a3c:	cbz	r0, a42 <SDFile::read(void*, unsigned int)+0x12>
     a3e:	b.w	4078 <ExFatFile::read(void*, unsigned int)>
		return sdfatfile.read(buf, nbyte);
	}
     a42:	mov.w	r0, #4294967295
     a46:	bx	lr

00000a48 <SDFile::peek()>:
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
		return sdfatfile.write(buf, size);
	}
	virtual int peek() {
     a48:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     a4a:	cbz	r3, a52 <SDFile::peek()+0xa>
     a4c:	mov	r0, r3
     a4e:	b.w	5e4c <FatFile::peek()>
     a52:	ldr	r0, [r0, #96]	; 0x60
     a54:	cbz	r0, a5a <SDFile::peek()+0x12>
     a56:	b.w	4218 <ExFatFile::peek()>
		return sdfatfile.peek();
	}
     a5a:	mov.w	r0, #4294967295
     a5e:	bx	lr

00000a60 <SDFile::isDirectory()>:
				filename = &zeroterm;
			}
		}
		return filename;
	}
	virtual boolean isDirectory(void) {
     a60:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     a62:	cbz	r3, a72 <SDFile::isDirectory()+0x12>
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {
    return m_attributes & FILE_ATTR_DIR;
     a64:	ldrb	r3, [r3, #0]
     a66:	tst.w	r3, #112	; 0x70
     a6a:	ite	ne
     a6c:	movne	r0, #1
     a6e:	moveq	r0, #0
     a70:	bx	lr
     a72:	ldr	r0, [r0, #96]	; 0x60
     a74:	cbz	r0, a84 <SDFile::isDirectory()+0x24>
    return isOpen() ? m_error & WRITE_ERROR : true;
  }
  /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
  /** \return True if this is a directory. */
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
     a76:	ldrb.w	r3, [r0, #49]	; 0x31
     a7a:	tst.w	r3, #80	; 0x50
     a7e:	ite	ne
     a80:	movne	r0, #1
     a82:	moveq	r0, #0
		return sdfatfile.isDirectory();
	}
     a84:	bx	lr
     a86:	nop

00000a88 <SDClass::open(char const*, unsigned char)>:
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
     a88:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     a8c:	cmp	r3, #1
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
     a8e:	sub	sp, #80	; 0x50
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     a90:	movw	r3, #16898	; 0x4202
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
     a94:	mov	r5, r0
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
     a96:	it	ne
     a98:	movne	r3, #0
     a9a:	adds	r1, #4
     a9c:	mov	r0, sp
     a9e:	bl	7508 <FsVolume::open(char const*, int)>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     aa2:	ldr	r3, [sp, #72]	; 0x48
     aa4:	cmp	r3, #0
     aa6:	beq.n	b12 <SDClass::open(char const*, unsigned char)+0x8a>
		if (file) return File(new SDFile(file));
     aa8:	movs	r0, #104	; 0x68
     aaa:	bl	a780 <operator new(unsigned int)>
     aae:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     ab0:	ldrb.w	r6, [sp, #4]
#endif

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     ab4:	ldr	r0, [pc, #116]	; (b2c <SDClass::open(char const*, unsigned char)+0xa4>)
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     ab6:	ldr	r1, [pc, #120]	; (b30 <SDClass::open(char const*, unsigned char)+0xa8>)
     ab8:	ldr	r2, [sp, #8]
     aba:	ldrb.w	r3, [sp, #12]
     abe:	str	r0, [r4, #0]
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     ac0:	add	r7, sp, #16
     ac2:	strb	r6, [r4, #24]
     ac4:	str	r1, [r4, #20]
{
  public:
	constexpr Print() : write_error(0) {}
     ac6:	movs	r6, #0
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     ac8:	mov.w	r8, #1000	; 0x3e8
     acc:	mov	r1, r7
     ace:	add.w	r0, r4, #36	; 0x24
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     ad2:	str	r2, [r4, #28]
     ad4:	strb.w	r3, [r4, #32]
     ad8:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     ada:	strb	r6, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     adc:	str	r6, [r4, #16]
     ade:	str.w	r8, [r4, #8]
     ae2:	bl	72c4 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     ae6:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     ae8:	ldr	r1, [pc, #72]	; (b34 <SDClass::open(char const*, unsigned char)+0xac>)
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     aea:	ldr	r2, [pc, #76]	; (b38 <SDClass::open(char const*, unsigned char)+0xb0>)
     aec:	str	r6, [r4, #100]	; 0x64
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     aee:	adds	r3, #1
     af0:	strb	r6, [r5, #4]
     af2:	str.w	r8, [r5, #8]
     af6:	strb	r6, [r5, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
     af8:	str	r4, [r5, #16]
     afa:	str	r1, [r4, #20]
		if (f) f->refcount++;
     afc:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     afe:	str	r2, [r5, #0]
     b00:	ldr	r3, [pc, #56]	; (b3c <SDClass::open(char const*, unsigned char)+0xb4>)
     b02:	str	r3, [sp, #0]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     b04:	mov	r0, r7
     b06:	bl	733c <FsBaseFile::close()>
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
     b0a:	mov	r0, r5
     b0c:	add	sp, #80	; 0x50
     b0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     b12:	ldr	r3, [sp, #76]	; 0x4c
     b14:	cmp	r3, #0
     b16:	bne.n	aa8 <SDClass::open(char const*, unsigned char)+0x20>
     b18:	mov.w	r1, #1000	; 0x3e8

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     b1c:	ldr	r2, [pc, #24]	; (b38 <SDClass::open(char const*, unsigned char)+0xb0>)
     b1e:	strb	r3, [r5, #4]
     b20:	strb	r3, [r5, #12]
     b22:	str	r3, [r5, #16]
     b24:	str	r1, [r5, #8]
     b26:	str	r2, [r5, #0]
     b28:	add	r7, sp, #16
     b2a:	b.n	b00 <SDClass::open(char const*, unsigned char)+0x78>
     b2c:	.word	0x0000f814
     b30:	.word	0x0000f74c
     b34:	.word	0x0000f794
     b38:	.word	0x0000f7b8
     b3c:	.word	0x0000f770

00000b40 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   */
  int available() {
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
     b40:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     b42:	cbz	r3, b4a <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     b44:	mov	r0, r3
     b46:	b.w	62d8 <FatFile::sync()>
     b4a:	ldr	r0, [r0, #76]	; 0x4c
     b4c:	cbz	r0, b52 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     b4e:	b.w	515c <ExFatFile::sync()>
     b52:	bx	lr

00000b54 <SDFile::write(void const*, unsigned int)>:
	virtual void whoami() {
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
     b54:	ldr	r3, [r0, #92]	; 0x5c
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     b56:	cbz	r3, b5e <SDFile::write(void const*, unsigned int)+0xa>
     b58:	mov	r0, r3
     b5a:	b.w	62e4 <FatFile::write(void const*, unsigned int)>
     b5e:	ldr	r0, [r0, #96]	; 0x60
     b60:	cbz	r0, b66 <SDFile::write(void const*, unsigned int)+0x12>
     b62:	b.w	556c <ExFatFile::write(void const*, unsigned int)>
		return sdfatfile.write(buf, size);
	}
     b66:	bx	lr

00000b68 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     b68:	ldr	r3, [r0, #72]	; 0x48
     b6a:	cbz	r3, b72 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     b6c:	mov	r0, r3
     b6e:	b.w	62e4 <FatFile::write(void const*, unsigned int)>
     b72:	ldr	r0, [r0, #76]	; 0x4c
     b74:	cbz	r0, b7a <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     b76:	b.w	556c <ExFatFile::write(void const*, unsigned int)>
    return BaseFile::write(buffer, size);
  }
     b7a:	bx	lr

00000b7c <StreamFile<FsBaseFile, unsigned long long>::available()>:
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
     b7c:	ldr	r2, [r0, #72]	; 0x48
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     b7e:	cbz	r2, b9a <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  void fsetpos(const fspos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() {
    return isFile() ? fileSize() - curPosition() : 0;
     b80:	ldrb	r3, [r2, #0]
     b82:	and.w	r3, r3, #8
     b86:	and.w	r0, r3, #255	; 0xff
     b8a:	cbz	r3, bce <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     b8c:	ldr	r3, [r2, #28]
     b8e:	ldr	r0, [r2, #20]
     b90:	subs	r0, r3, r0
     b92:	it	mi
     b94:	mvnmi.w	r0, #2147483648	; 0x80000000
     b98:	bx	lr
     b9a:	ldr	r1, [r0, #76]	; 0x4c
     b9c:	cbz	r1, bd0 <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     b9e:	ldrb.w	r3, [r1, #49]	; 0x31
     ba2:	and.w	r3, r3, #8
     ba6:	and.w	r0, r3, #255	; 0xff
     baa:	cbz	r3, bce <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
     bac:	ldrd	r2, r3, [r1, #16]
     bb0:	ldrd	r0, r1, [r1]
     bb4:	subs	r0, r2, r0
     bb6:	push	{r4, r5}
     bb8:	sbc.w	r1, r3, r1
     bbc:	movs	r5, #0
     bbe:	mvn.w	r4, #2147483648	; 0x80000000
     bc2:	cmp	r5, r1
     bc4:	it	eq
     bc6:	cmpeq	r4, r0
     bc8:	bcs.n	bcc <StreamFile<FsBaseFile, unsigned long long>::available()+0x50>
     bca:	mov	r0, r4
    return BaseFile::available();
  }
     bcc:	pop	{r4, r5}
     bce:	bx	lr
     bd0:	mov	r0, r1
     bd2:	bx	lr

00000bd4 <SDFile::seek(unsigned long, int)>:
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
		return sdfatfile.read(buf, nbyte);
	}
	virtual bool seek(uint32_t pos, int mode = SeekSet) {
     bd4:	push	{r4, r5}
     bd6:	mov	r4, r1
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
     bd8:	cbz	r2, be8 <SDFile::seek(unsigned long, int)+0x14>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
     bda:	cmp	r2, #1
     bdc:	beq.n	c14 <SDFile::seek(unsigned long, int)+0x40>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
     bde:	cmp	r2, #2
     be0:	beq.n	bf4 <SDFile::seek(unsigned long, int)+0x20>
		return false;
	}
     be2:	movs	r0, #0
     be4:	pop	{r4, r5}
     be6:	bx	lr
     be8:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     bea:	cbz	r3, c2c <SDFile::seek(unsigned long, int)+0x58>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     bec:	mov	r0, r3
     bee:	pop	{r4, r5}
     bf0:	b.w	60ec <FatFile::seekSet(unsigned long)>
     bf4:	ldr	r5, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     bf6:	cbz	r5, c3a <SDFile::seek(unsigned long, int)+0x66>
     bf8:	ldr	r1, [r5, #28]
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     bfa:	movs	r3, #0
     bfc:	adds	r2, r4, r1
     bfe:	adc.w	r3, r3, #0
     c02:	cmp	r3, #1
     c04:	it	eq
     c06:	cmpeq	r2, #0
     c08:	bcs.n	be2 <SDFile::seek(unsigned long, int)+0xe>
     c0a:	add	r1, r4
     c0c:	mov	r0, r5
     c0e:	pop	{r4, r5}
     c10:	b.w	60ec <FatFile::seekSet(unsigned long)>
     c14:	ldr	r5, [r0, #92]	; 0x5c
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     c16:	cbz	r5, c50 <SDFile::seek(unsigned long, int)+0x7c>
     c18:	ldr	r1, [r5, #20]
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     c1a:	movs	r3, #0
     c1c:	adds	r2, r1, r4
     c1e:	adc.w	r3, r3, #0
     c22:	cmp	r3, #1
     c24:	it	eq
     c26:	cmpeq	r2, #0
     c28:	bcs.n	be2 <SDFile::seek(unsigned long, int)+0xe>
     c2a:	b.n	c0a <SDFile::seek(unsigned long, int)+0x36>
           m_xFile ? m_xFile->seekSet(pos) : false;
     c2c:	ldr	r0, [r0, #96]	; 0x60
     c2e:	cmp	r0, #0
     c30:	beq.n	be2 <SDFile::seek(unsigned long, int)+0xe>
     c32:	mov	r2, r1
     c34:	pop	{r4, r5}
     c36:	b.w	4248 <ExFatFile::seekSet(unsigned long long)>
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     c3a:	ldr	r0, [r0, #96]	; 0x60
     c3c:	cmp	r0, #0
     c3e:	beq.n	be2 <SDFile::seek(unsigned long, int)+0xe>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     c40:	ldrd	r2, r3, [r0, #16]
     c44:	adds	r2, r2, r1
     c46:	adc.w	r3, r3, #0
     c4a:	pop	{r4, r5}
     c4c:	b.w	4248 <ExFatFile::seekSet(unsigned long long)>
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     c50:	ldr	r0, [r0, #96]	; 0x60
     c52:	cmp	r0, #0
     c54:	beq.n	be2 <SDFile::seek(unsigned long, int)+0xe>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     c56:	ldrd	r2, r3, [r0]
     c5a:	adds	r2, r2, r1
     c5c:	adc.w	r3, r3, #0
     c60:	pop	{r4, r5}
     c62:	b.w	4248 <ExFatFile::seekSet(unsigned long long)>
     c66:	nop

00000c68 <File::~File()>:
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     c68:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     c6a:	ldr	r3, [pc, #32]	; (c8c <File::~File()+0x24>)
     c6c:	push	{r4, lr}
     c6e:	mov	r4, r0
     c70:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     c72:	cbz	r2, c86 <File::~File()+0x1e>
     c74:	ldr	r3, [r2, #16]
     c76:	subs	r3, #1
     c78:	str	r3, [r2, #16]
     c7a:	cbnz	r3, c86 <File::~File()+0x1e>
     c7c:	ldr	r0, [r0, #16]
     c7e:	cbz	r0, c86 <File::~File()+0x1e>
     c80:	ldr	r3, [r0, #0]
     c82:	ldr	r3, [r3, #32]
     c84:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
     c86:	mov	r0, r4
     c88:	pop	{r4, pc}
     c8a:	nop
     c8c:	.word	0x0000f7b8

00000c90 <SDFile::~SDFile()>:

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	virtual ~SDFile(void) {
     c90:	push	{r3, r4, r5, lr}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     c92:	ldr	r3, [r0, #92]	; 0x5c
     c94:	ldr	r2, [pc, #80]	; (ce8 <SDFile::~SDFile()+0x58>)
     c96:	str	r2, [r0, #0]
     c98:	mov	r4, r0
		if (sdfatfile) sdfatfile.close();
     c9a:	add.w	r5, r0, #36	; 0x24
     c9e:	cbz	r3, cde <SDFile::~SDFile()+0x4e>
     ca0:	mov	r0, r5
     ca2:	bl	733c <FsBaseFile::close()>
		if (filename) free(filename);
     ca6:	ldr	r0, [r4, #100]	; 0x64
     ca8:	cbz	r0, cae <SDFile::~SDFile()+0x1e>
     caa:	bl	b5ec <free>
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     cae:	ldr	r3, [pc, #60]	; (cec <SDFile::~SDFile()+0x5c>)
     cb0:	str	r3, [r4, #20]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     cb2:	mov	r0, r5
     cb4:	bl	733c <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     cb8:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     cba:	ldr	r3, [pc, #52]	; (cf0 <SDFile::~SDFile()+0x60>)
     cbc:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     cbe:	cbz	r2, cd2 <SDFile::~SDFile()+0x42>
     cc0:	ldr	r3, [r2, #16]
     cc2:	subs	r3, #1
     cc4:	str	r3, [r2, #16]
     cc6:	cbnz	r3, cd2 <SDFile::~SDFile()+0x42>
     cc8:	ldr	r0, [r4, #16]
     cca:	cbz	r0, cd2 <SDFile::~SDFile()+0x42>
     ccc:	ldr	r3, [r0, #0]
     cce:	ldr	r3, [r3, #32]
     cd0:	blx	r3
	}
     cd2:	mov	r0, r4
     cd4:	movs	r1, #104	; 0x68
     cd6:	bl	a784 <operator delete(void*, unsigned int)>
     cda:	mov	r0, r4
     cdc:	pop	{r3, r4, r5, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     cde:	ldr	r3, [r0, #96]	; 0x60
     ce0:	cmp	r3, #0
     ce2:	bne.n	ca0 <SDFile::~SDFile()+0x10>
     ce4:	b.n	ca6 <SDFile::~SDFile()+0x16>
     ce6:	nop
     ce8:	.word	0x0000f814
     cec:	.word	0x0000f770
     cf0:	.word	0x0000f7b8

00000cf4 <File::~File()>:
     cf4:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     cf6:	ldr	r3, [pc, #40]	; (d20 <File::~File()+0x2c>)
     cf8:	push	{r4, lr}
     cfa:	mov	r4, r0
     cfc:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     cfe:	cbz	r2, d12 <File::~File()+0x1e>
     d00:	ldr	r3, [r2, #16]
     d02:	subs	r3, #1
     d04:	str	r3, [r2, #16]
     d06:	cbnz	r3, d12 <File::~File()+0x1e>
     d08:	ldr	r0, [r0, #16]
     d0a:	cbz	r0, d12 <File::~File()+0x1e>
     d0c:	ldr	r3, [r0, #0]
     d0e:	ldr	r3, [r3, #32]
     d10:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
     d12:	mov	r0, r4
     d14:	movs	r1, #20
     d16:	bl	a784 <operator delete(void*, unsigned int)>
     d1a:	mov	r0, r4
     d1c:	pop	{r4, pc}
     d1e:	nop
     d20:	.word	0x0000f7b8

00000d24 <MTPStorage_SD::~MTPStorage_SD()>:
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     d24:	ldr	r2, [r0, #60]	; 0x3c

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface 
     d26:	push	{r3, r4, r5, lr}
     d28:	ldr	r3, [pc, #88]	; (d84 <MTPStorage_SD::~MTPStorage_SD()+0x60>)
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     d2a:	ldr	r5, [pc, #92]	; (d88 <MTPStorage_SD::~MTPStorage_SD()+0x64>)
     d2c:	str	r3, [r0, #0]
     d2e:	mov	r4, r0
     d30:	str	r5, [r0, #44]	; 0x2c
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     d32:	cbz	r2, d3c <MTPStorage_SD::~MTPStorage_SD()+0x18>
     d34:	ldr	r3, [r2, #16]
     d36:	subs	r3, #1
     d38:	str	r3, [r2, #16]
     d3a:	cbz	r3, d66 <MTPStorage_SD::~MTPStorage_SD()+0x42>
     d3c:	ldr	r2, [r4, #40]	; 0x28
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     d3e:	str	r5, [r4, #24]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     d40:	cbz	r2, d4a <MTPStorage_SD::~MTPStorage_SD()+0x26>
     d42:	ldr	r3, [r2, #16]
     d44:	subs	r3, #1
     d46:	str	r3, [r2, #16]
     d48:	cbz	r3, d74 <MTPStorage_SD::~MTPStorage_SD()+0x50>
     d4a:	ldr	r2, [r4, #20]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     d4c:	str	r5, [r4, #4]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     d4e:	cbz	r2, d62 <MTPStorage_SD::~MTPStorage_SD()+0x3e>
     d50:	ldr	r3, [r2, #16]
     d52:	subs	r3, #1
     d54:	str	r3, [r2, #16]
     d56:	cbnz	r3, d62 <MTPStorage_SD::~MTPStorage_SD()+0x3e>
     d58:	ldr	r0, [r4, #20]
     d5a:	cbz	r0, d62 <MTPStorage_SD::~MTPStorage_SD()+0x3e>
     d5c:	ldr	r3, [r0, #0]
     d5e:	ldr	r3, [r3, #32]
     d60:	blx	r3
     d62:	mov	r0, r4
     d64:	pop	{r3, r4, r5, pc}
     d66:	ldr	r0, [r0, #60]	; 0x3c
     d68:	cmp	r0, #0
     d6a:	beq.n	d3c <MTPStorage_SD::~MTPStorage_SD()+0x18>
     d6c:	ldr	r3, [r0, #0]
     d6e:	ldr	r3, [r3, #32]
     d70:	blx	r3
     d72:	b.n	d3c <MTPStorage_SD::~MTPStorage_SD()+0x18>
     d74:	ldr	r0, [r4, #40]	; 0x28
     d76:	cmp	r0, #0
     d78:	beq.n	d4a <MTPStorage_SD::~MTPStorage_SD()+0x26>
     d7a:	ldr	r3, [r0, #0]
     d7c:	ldr	r3, [r3, #32]
     d7e:	blx	r3
     d80:	b.n	d4a <MTPStorage_SD::~MTPStorage_SD()+0x26>
     d82:	nop
     d84:	.word	0x0000f910
     d88:	.word	0x0000f7b8

00000d8c <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)>:

MTPStorage_SD storage;
MTPD       mtpd(&storage);

void storage_configure(MTPStorage_SD *storage, const char **sd_str, const int *cs, SDClass *sdx, int num)
{
     d8c:	push	{r4, r5, r6, r7, lr}
     d8e:	mov	r6, r0
     d90:	sub	sp, #60	; 0x3c
     d92:	mov	r7, r1
    #if defined SD_SCK
      SPI.setMOSI(SD_MOSI);
     d94:	ldr	r0, [pc, #328]	; (ee0 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x154>)
     d96:	movs	r1, #11

MTPStorage_SD storage;
MTPD       mtpd(&storage);

void storage_configure(MTPStorage_SD *storage, const char **sd_str, const int *cs, SDClass *sdx, int num)
{
     d98:	mov	r5, r2
     d9a:	mov	r4, r3
    #if defined SD_SCK
      SPI.setMOSI(SD_MOSI);
     d9c:	bl	3c74 <SPIClass::setMOSI(unsigned char)>
      SPI.setMISO(SD_MISO);
     da0:	movs	r1, #12
     da2:	ldr	r0, [pc, #316]	; (ee0 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x154>)
     da4:	bl	3d18 <SPIClass::setMISO(unsigned char)>
      SPI.setSCK(SD_SCK);
     da8:	movs	r1, #13
     daa:	ldr	r0, [pc, #308]	; (ee0 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x154>)
     dac:	bl	3db8 <SPIClass::setSCK(unsigned char)>
    #endif

    storage->setStorageNumbers(sd_str,nsd);
     db0:	ldr	r3, [r6, #0]
     db2:	mov	r0, r6
     db4:	mov	r1, r7
     db6:	ldr	r3, [r3, #0]
     db8:	movs	r2, #1
     dba:	blx	r3

    for(int ii=0; ii<nsd; ii++)
    { if(cs[ii] == BUILTIN_SDCARD)
     dbc:	ldr	r0, [r5, #0]
     dbe:	cmp	r0, #254	; 0xfe
     dc0:	beq.n	e72 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0xe6>
        uint32_t volClust = sdx[ii].sdfs.sectorsPerCluster();
        Serial.printf("Storage %d %d %d %d %d\n",ii,cs[ii],volCount,volFree,volClust);
      }
      else
      {
        pinMode(cs[ii],OUTPUT); digitalWriteFast(cs[ii],HIGH);
     dc2:	uxtb	r0, r0
     dc4:	movs	r1, #1
     dc6:	bl	9520 <pinMode>
			}
			#endif
		}
	} else {
		if (val) {
			*portSetRegister(pin) = digitalPinToBitMask(pin);
     dca:	ldrb	r2, [r5, #0]
     dcc:	ldr	r3, [pc, #276]	; (ee4 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x158>)
     dce:	ldr	r7, [pc, #280]	; (ee8 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x15c>)
     dd0:	ldr.w	r3, [r3, r2, lsl #3]
     dd4:	str	r7, [sp, #24]
     dd6:	movs	r2, #1
     dd8:	strb.w	r2, [r3, #128]	; 0x80
     ddc:	movs	r6, #0
        if(!sdx[ii].sdfs.begin(SdSpiConfig(cs[ii], SHARED_SPI, SD_SCK_MHZ(33)))) {Serial.println("No storage"); while(1);}
     dde:	ldrb.w	lr, [r5]
     de2:	strb.w	r6, [sp, #21]
     de6:	str	r6, [sp, #28]
     de8:	strb.w	lr, [sp, #20]
     dec:	add	r3, sp, #20
     dee:	ldmia.w	r3, {r0, r1, r2}
     df2:	add	r3, sp, #32
     df4:	stmia.w	r3, {r0, r1, r2}
     df8:	strb.w	r6, [sp, #33]	; 0x21
     dfc:	str	r6, [sp, #40]	; 0x28
     dfe:	strb.w	lr, [sp, #32]
     e02:	str	r7, [sp, #36]	; 0x24
     e04:	ldmia.w	r3, {r0, r1, r2}
     e08:	add	r3, sp, #44	; 0x2c
     e0a:	stmia.w	r3, {r0, r1, r2}
   *
   * \param[in] config SPI configuration.
   * \return generic card pointer.
   */
  SdCard* newCard(SdSpiConfig config) {
    m_spiCard.begin(config);
     e0e:	add.w	r6, r4, #1176	; 0x498
     e12:	ldmia	r3, {r1, r2, r3}
     e14:	mov	r0, r6
     e16:	bl	77a0 <SdSpiCard::begin(SdSpiConfig)>
   *
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdSpiConfig spiConfig) {
    m_card = m_cardFactory.newCard(spiConfig);
     e1a:	str.w	r6, [r4, #1160]	; 0x488
    return m_card && !m_card->errorCode();
     e1e:	cbz	r6, e26 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x9a>
     e20:	ldrb.w	r3, [r4, #1195]	; 0x4ab
     e24:	cbz	r3, e36 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0xaa>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     e26:	movs	r1, #10
     e28:	ldr	r0, [pc, #192]	; (eec <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x160>)
     e2a:	bl	9184 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     e2e:	ldr	r0, [pc, #192]	; (ef0 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x164>)
     e30:	bl	a720 <Print::println()>
     e34:	b.n	e34 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0xa8>
   *
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig) {
    return cardBegin(spiConfig) && Vol::begin(m_card);
     e36:	mov	r1, r6
     e38:	adds	r0, r4, #4
     e3a:	bl	7444 <FsVolume::begin(BlockDeviceInterface*)>
     e3e:	cmp	r0, #0
     e40:	beq.n	e26 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x9a>
     e42:	ldr.w	r0, [r4, #1148]	; 0x47c
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     e46:	cmp	r0, #0
     e48:	beq.n	eae <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x122>
    m_cache.invalidate();
    return m_cache.buffer();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
     e4a:	ldr	r6, [r0, #28]
    return m_fVol ? m_fVol->fatStartSector() :
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
     e4c:	bl	6740 <FatPartition::freeClusterCount()>
     e50:	ldr.w	r3, [r4, #1148]	; 0x47c
     e54:	subs	r6, #1
           m_xVol ? m_xVol->freeClusterCount() : 0;
  }
  /** \return The volume's cluster size in sectors. */
  uint32_t sectorsPerCluster() const {
    return m_fVol ? m_fVol->sectorsPerCluster() :
           m_xVol ? m_xVol->sectorsPerCluster() : 0;
     e56:	cmp	r3, #0
     e58:	beq.n	ec6 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x13a>
     e5a:	ldrb	r2, [r3, #4]
        uint32_t volCount  = sdx[ii].sdfs.clusterCount();
        uint32_t volFree  = sdx[ii].sdfs.freeClusterCount();
        uint32_t volClust = sdx[ii].sdfs.sectorsPerCluster();
        Serial.printf("Storage %d %d %d %d %d\n",ii,cs[ii],volCount,volFree,volClust);
     e5c:	ldr	r3, [r5, #0]
     e5e:	ldr	r1, [pc, #148]	; (ef4 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x168>)
     e60:	str	r2, [sp, #8]
     e62:	str	r0, [sp, #4]
     e64:	str	r6, [sp, #0]
     e66:	movs	r2, #0
     e68:	ldr	r0, [pc, #132]	; (ef0 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x164>)
     e6a:	bl	a750 <Print::printf(char const*, ...)>
      }
    }
}
     e6e:	add	sp, #60	; 0x3c
     e70:	pop	{r4, r5, r6, r7, pc}
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     e72:	addw	r6, r4, #1164	; 0x48c
     e76:	mov	r0, r6
     e78:	mov.w	r1, #0
     e7c:	bl	8800 <SdioCard::begin(SdioConfig)>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
     e80:	str.w	r6, [r4, #1160]	; 0x488
    return m_card && !m_card->errorCode();
     e84:	cbz	r6, e8e <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x102>
     e86:	mov	r0, r6
     e88:	bl	7f60 <SdioCard::errorCode() const>
     e8c:	cbz	r0, e9e <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x112>
     e8e:	movs	r1, #10
     e90:	ldr	r0, [pc, #88]	; (eec <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x160>)
     e92:	bl	9184 <usb_serial_write>
     e96:	ldr	r0, [pc, #88]	; (ef0 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x164>)
     e98:	bl	a720 <Print::println()>
     e9c:	b.n	e9c <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x110>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     e9e:	ldr.w	r1, [r4, #1160]	; 0x488
     ea2:	adds	r0, r4, #4
     ea4:	bl	7444 <FsVolume::begin(BlockDeviceInterface*)>
     ea8:	cmp	r0, #0
     eaa:	beq.n	e8e <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x102>
     eac:	b.n	e42 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0xb6>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     eae:	ldr.w	r6, [r4, #1152]	; 0x480
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
     eb2:	mov	r0, r6
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     eb4:	cbz	r6, eda <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x14e>
     eb6:	ldr.w	r6, [r6, #1064]	; 0x428
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
     eba:	bl	4d24 <ExFatPartition::freeClusterCount()>
     ebe:	ldr.w	r3, [r4, #1148]	; 0x47c
  }
  /** \return The volume's cluster size in sectors. */
  uint32_t sectorsPerCluster() const {
    return m_fVol ? m_fVol->sectorsPerCluster() :
           m_xVol ? m_xVol->sectorsPerCluster() : 0;
     ec2:	cmp	r3, #0
     ec4:	bne.n	e5a <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0xce>
     ec6:	ldr.w	r2, [r4, #1152]	; 0x480
     eca:	cmp	r2, #0
     ecc:	beq.n	e5c <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0xd0>
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() {return m_rootDirectoryCluster;}
  /** \return the root directory length. */
  uint32_t rootLength();
  /** \return the number of sectors in a cluster. */
  uint32_t sectorsPerCluster() {return 1UL << m_sectorsPerClusterShift;}
     ece:	ldrb.w	r2, [r2, #1085]	; 0x43d
     ed2:	movs	r3, #1
     ed4:	lsl.w	r2, r3, r2
     ed8:	b.n	e5c <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0xd0>
     eda:	mov	r2, r6
     edc:	b.n	e5c <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0xd0>
     ede:	nop
     ee0:	.word	0x1fff097c
     ee4:	.word	0x0000fc70
     ee8:	.word	0x01f78a40
     eec:	.word	0x0000f8dc
     ef0:	.word	0x1fff0a0c
     ef4:	.word	0x0000f8c4

00000ef8 <setup>:
    to=millis();
  }
}

void setup()
{ 
     ef8:	push	{r4, r5, r6, lr}
     efa:	ldr	r1, [pc, #100]	; (f60 <setup+0x68>)
     efc:	ldr	r2, [pc, #100]	; (f64 <setup+0x6c>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     efe:	ldr	r4, [pc, #104]	; (f68 <setup+0x70>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     f00:	ldr	r6, [pc, #104]	; (f6c <setup+0x74>)
     f02:	sub	sp, #16
  while(!Serial && millis()<3000); 
     f04:	movw	r0, #2999	; 0xbb7
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     f08:	ldrb	r3, [r1, #0]
     f0a:	cbz	r3, f54 <setup+0x5c>
     f0c:	ldrb	r3, [r4, #0]
     f0e:	lsls	r3, r3, #31
     f10:	bpl.n	f54 <setup+0x5c>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     f12:	ldr	r3, [r2, #0]
     f14:	ldr	r5, [r6, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     f16:	subs	r3, r3, r5
     f18:	cmp	r3, #14
     f1a:	bls.n	f54 <setup+0x5c>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     f1c:	movs	r1, #8
     f1e:	ldr	r0, [pc, #80]	; (f70 <setup+0x78>)
     f20:	bl	9184 <usb_serial_write>
     f24:	ldr	r0, [pc, #76]	; (f74 <setup+0x7c>)
     f26:	bl	a720 <Print::println()>
  Serial.println("MTP_test");
  
  usb_mtp_configure();
     f2a:	bl	8f80 <usb_mtp_configure>
  storage_configure(&storage, sd_str,cs, sdx, nsd);
     f2e:	movs	r3, #1
     f30:	ldr	r2, [pc, #68]	; (f78 <setup+0x80>)
     f32:	str	r3, [sp, #0]
     f34:	ldr	r1, [pc, #68]	; (f7c <setup+0x84>)
     f36:	ldr	r3, [pc, #72]	; (f80 <setup+0x88>)
     f38:	ldr	r0, [pc, #72]	; (f84 <setup+0x8c>)
     f3a:	bl	d8c <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)>
     f3e:	movs	r1, #10
     f40:	ldr	r0, [pc, #68]	; (f88 <setup+0x90>)
     f42:	bl	9184 <usb_serial_write>
     f46:	ldr	r0, [pc, #44]	; (f74 <setup+0x7c>)
     f48:	bl	a720 <Print::println()>
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
     f4c:	bl	92ec <usb_serial_flush_output>

  Serial.println("Setup done");
  Serial.flush();
}
     f50:	add	sp, #16
     f52:	pop	{r4, r5, r6, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     f54:	ldr	r3, [r2, #0]
     f56:	str	r3, [sp, #12]
	return ret;
     f58:	ldr	r3, [sp, #12]
  }
}

void setup()
{ 
  while(!Serial && millis()<3000); 
     f5a:	cmp	r3, r0
     f5c:	bls.n	f08 <setup+0x10>
     f5e:	b.n	f1c <setup+0x24>
     f60:	.word	0x1fff2010
     f64:	.word	0x1fff1f0c
     f68:	.word	0x1fff1f08
     f6c:	.word	0x1fff2088
     f70:	.word	0x0000f8e8
     f74:	.word	0x1fff0a0c
     f78:	.word	0x0000f884
     f7c:	.word	0x1fff0974
     f80:	.word	0x1fff14d8
     f84:	.word	0x1fff1988
     f88:	.word	0x0000f8f4

00000f8c <loop>:
  Serial.flush();
}

void loop()
{ 
  mtpd.loop();
     f8c:	ldr	r0, [pc, #4]	; (f94 <loop+0x8>)
     f8e:	b.w	3228 <MTPD::loop()>
     f92:	nop
     f94:	.word	0x1fff19e8

00000f98 <_GLOBAL__sub_I_sd_str>:

  //logg(1000,"loop");
  //asm("wfi"); // may wait forever on T4.x
}
     f98:	push	{r3, r4, r5, r6, r7, lr}


class SDClass : public FS
{
public:
	SDClass() { }
     f9a:	ldr	r3, [pc, #148]	; (1030 <_GLOBAL__sub_I_sd_str+0x98>)

  const char *sd_str[]={"sdio"}; // edit to reflect your configuration
  const int cs[] = {BUILTIN_SDCARD}; // edit to reflect your configuration
  const int nsd = sizeof(cs)/sizeof(int);

SDClass sdx[nsd];
     f9c:	ldr	r6, [pc, #148]	; (1034 <_GLOBAL__sub_I_sd_str+0x9c>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
     f9e:	ldr	r7, [pc, #152]	; (1038 <_GLOBAL__sub_I_sd_str+0xa0>)
     fa0:	str.w	r7, [r3, #1164]	; 0x48c
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() : m_fVol(nullptr), m_xVol(nullptr) {}
     fa4:	movs	r5, #0
     fa6:	ldr	r2, [pc, #148]	; (103c <_GLOBAL__sub_I_sd_str+0xa4>)
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
     fa8:	ldr	r0, [pc, #148]	; (1040 <_GLOBAL__sub_I_sd_str+0xa8>)
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
     faa:	ldr	r1, [pc, #152]	; (1044 <_GLOBAL__sub_I_sd_str+0xac>)
     fac:	ldr	r4, [pc, #152]	; (1048 <_GLOBAL__sub_I_sd_str+0xb0>)
     fae:	str	r2, [r3, #0]
     fb0:	movs	r7, #40	; 0x28
     fb2:	mov	r2, r6
     fb4:	str.w	r0, [r3, #1176]	; 0x498
     fb8:	str.w	r1, [r3, #1184]	; 0x4a0
     fbc:	strb.w	r7, [r3, #1195]	; 0x4ab
     fc0:	ldr	r1, [pc, #136]	; (104c <_GLOBAL__sub_I_sd_str+0xb4>)
     fc2:	str.w	r5, [r3, #1148]	; 0x47c
     fc6:	str.w	r5, [r3, #1152]	; 0x480
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() : m_options(FIFO_SDIO) {}
     fca:	strb.w	r5, [r3, #1172]	; 0x494
     fce:	strb.w	r5, [r3, #1198]	; 0x4ae
     fd2:	mov	r0, r5
     fd4:	bl	a930 <__aeabi_atexit>

MTPStorage_SD storage;
     fd8:	mov	r2, r6
     fda:	ldr	r6, [pc, #116]	; (1050 <_GLOBAL__sub_I_sd_str+0xb8>)

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     fdc:	ldr	r3, [pc, #116]	; (1054 <_GLOBAL__sub_I_sd_str+0xbc>)
     fde:	str	r6, [r4, #0]
     fe0:	mov.w	r6, #1000	; 0x3e8
     fe4:	str	r3, [r4, #4]
     fe6:	str	r3, [r4, #24]
     fe8:	str	r3, [r4, #44]	; 0x2c
     fea:	ldr	r1, [pc, #108]	; (1058 <_GLOBAL__sub_I_sd_str+0xc0>)
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
     fec:	strb	r5, [r4, #8]
     fee:	mvn.w	r7, #1
     ff2:	mov	r0, r4
     ff4:	strb	r5, [r4, #16]
     ff6:	str	r5, [r4, #20]
     ff8:	strb	r5, [r4, #28]
     ffa:	strb.w	r5, [r4, #36]	; 0x24
     ffe:	str	r5, [r4, #40]	; 0x28
    1000:	strb.w	r5, [r4, #48]	; 0x30
    1004:	strb.w	r5, [r4, #56]	; 0x38
    1008:	str	r5, [r4, #60]	; 0x3c
    100a:	str	r6, [r4, #12]
    100c:	str	r6, [r4, #32]
    100e:	str	r6, [r4, #52]	; 0x34
    1010:	str	r5, [r4, #68]	; 0x44
    1012:	str	r5, [r4, #72]	; 0x48
    1014:	str	r5, [r4, #80]	; 0x50
    1016:	strb.w	r5, [r4, #84]	; 0x54
    101a:	strb.w	r5, [r4, #85]	; 0x55
    101e:	str	r7, [r4, #76]	; 0x4c
    1020:	bl	a930 <__aeabi_atexit>
#define MTP_NAME  "Teensy"

// MTP Responder.
class MTPD {
public:
  explicit MTPD(MTPStorageInterface* storage) : storage_(storage) {}
    1024:	ldr	r3, [pc, #52]	; (105c <_GLOBAL__sub_I_sd_str+0xc4>)
    1026:	stmia.w	r3, {r4, r5}
    102a:	strb	r5, [r3, #8]
    102c:	str	r5, [r3, #12]
    102e:	pop	{r3, r4, r5, r6, r7, pc}
    1030:	.word	0x1fff14d8
    1034:	.word	0x1fff0970
    1038:	.word	0x0000fc20
    103c:	.word	0x0000f870
    1040:	.word	0x0000fbc8
    1044:	.word	0x38011001
    1048:	.word	0x1fff1988
    104c:	.word	0x000005b5
    1050:	.word	0x0000f910
    1054:	.word	0x0000f7b8
    1058:	.word	0x00000d25
    105c:	.word	0x1fff19e8

00001060 <MTPStorage_SD::readonly(unsigned long)>:

// These should probably be weak.
void mtp_yield() {}
void mtp_lock_storage(bool lock) {}

  bool MTPStorage_SD::readonly(uint32_t storage) { return false; }
    1060:	movs	r0, #0
    1062:	bx	lr

00001064 <MTPStorage_SD::has_directories(unsigned long)>:
  bool MTPStorage_SD::has_directories(uint32_t storage) { return true; }
    1064:	movs	r0, #1
    1066:	bx	lr

00001068 <MTPStorage_SD::clusterCount(unsigned long)>:

  uint32_t MTPStorage_SD::clusterCount(uint32_t storage) { return sdx[storage-1].sdfs.clusterCount(); }
    1068:	ldr	r3, [pc, #36]	; (1090 <MTPStorage_SD::clusterCount(unsigned long)+0x28>)
    106a:	subs	r1, #1
    106c:	mov.w	r2, #1200	; 0x4b0
    1070:	mla	r1, r2, r1, r3
    1074:	adds	r1, #4
    1076:	ldr.w	r3, [r1, #1144]	; 0x478
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    107a:	cbz	r3, 1082 <MTPStorage_SD::clusterCount(unsigned long)+0x1a>
    107c:	ldr	r0, [r3, #28]
    107e:	subs	r0, #1
    1080:	bx	lr
    1082:	ldr.w	r0, [r1, #1148]	; 0x47c
    1086:	cbz	r0, 108c <MTPStorage_SD::clusterCount(unsigned long)+0x24>
    1088:	ldr.w	r0, [r0, #1064]	; 0x428
    108c:	bx	lr
    108e:	nop
    1090:	.word	0x1fff14d8

00001094 <MTPStorage_SD::clusterSize(unsigned long)>:
  uint32_t MTPStorage_SD::freeClusters(uint32_t storage) { return sdx[storage-1].sdfs.freeClusterCount(); }
  uint32_t MTPStorage_SD::clusterSize(uint32_t storage)  { return sdx[storage-1].sdfs.sectorsPerCluster(); }
    1094:	ldr	r3, [pc, #40]	; (10c0 <MTPStorage_SD::clusterSize(unsigned long)+0x2c>)
    1096:	subs	r1, #1
    1098:	mov.w	r2, #1200	; 0x4b0
    109c:	mla	r1, r2, r1, r3
    10a0:	adds	r1, #4
    10a2:	ldr.w	r3, [r1, #1144]	; 0x478
           m_xVol ? m_xVol->freeClusterCount() : 0;
  }
  /** \return The volume's cluster size in sectors. */
  uint32_t sectorsPerCluster() const {
    return m_fVol ? m_fVol->sectorsPerCluster() :
           m_xVol ? m_xVol->sectorsPerCluster() : 0;
    10a6:	cbz	r3, 10ac <MTPStorage_SD::clusterSize(unsigned long)+0x18>
    10a8:	ldrb	r0, [r3, #4]
    10aa:	bx	lr
    10ac:	ldr.w	r0, [r1, #1148]	; 0x47c
    10b0:	cbz	r0, 10bc <MTPStorage_SD::clusterSize(unsigned long)+0x28>
    10b2:	ldrb.w	r0, [r0, #1085]	; 0x43d
    10b6:	movs	r3, #1
    10b8:	lsl.w	r0, r3, r0
    10bc:	bx	lr
    10be:	nop
    10c0:	.word	0x1fff14d8

000010c4 <MTPStorage_SD::setStorageNumbers(char const**, int)>:

    GenerateIndex(storage);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(storage,i);
  }

  void  MTPStorage_SD::setStorageNumbers(const char **str, int num) {sd_str = str; num_storage=num;}
    10c4:	str	r1, [r0, #68]	; 0x44
    10c6:	str	r2, [r0, #64]	; 0x40
    10c8:	bx	lr
    10ca:	nop

000010cc <MTPStorage_SD::getNumStorage()>:
  uint32_t MTPStorage_SD::getNumStorage() {return num_storage;}
    10cc:	ldr	r0, [r0, #64]	; 0x40
    10ce:	bx	lr

000010d0 <MTPStorage_SD::getStorageName(unsigned long)>:
  const char * MTPStorage_SD::getStorageName(uint32_t storage) {return sd_str[storage-1];}
    10d0:	add.w	r1, r1, #1073741824	; 0x40000000
    10d4:	subs	r1, #1
    10d6:	ldr	r3, [r0, #68]	; 0x44
    10d8:	ldr.w	r0, [r3, r1, lsl #2]
    10dc:	bx	lr
    10de:	nop

000010e0 <MTPStorage_SD::write(char const*, unsigned long)>:
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    10e0:	ldr	r0, [r0, #40]	; 0x28
    10e2:	cbz	r0, 10ea <MTPStorage_SD::write(char const*, unsigned long)+0xa>
    10e4:	ldr	r3, [r0, #0]
    10e6:	ldr	r3, [r3, #44]	; 0x2c
    10e8:	bx	r3
    10ea:	bx	lr

000010ec <MTPStorage_SD::freeClusters(unsigned long)>:

  bool MTPStorage_SD::readonly(uint32_t storage) { return false; }
  bool MTPStorage_SD::has_directories(uint32_t storage) { return true; }

  uint32_t MTPStorage_SD::clusterCount(uint32_t storage) { return sdx[storage-1].sdfs.clusterCount(); }
  uint32_t MTPStorage_SD::freeClusters(uint32_t storage) { return sdx[storage-1].sdfs.freeClusterCount(); }
    10ec:	ldr	r3, [pc, #32]	; (1110 <MTPStorage_SD::freeClusters(unsigned long)+0x24>)
    10ee:	subs	r1, #1
    10f0:	mov.w	r2, #1200	; 0x4b0
    10f4:	mla	r1, r2, r1, r3
    10f8:	adds	r1, #4
    10fa:	ldr.w	r0, [r1, #1144]	; 0x478
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
    10fe:	cbz	r0, 1104 <MTPStorage_SD::freeClusters(unsigned long)+0x18>
    return m_fVol ? m_fVol->fatStartSector() :
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
    1100:	b.w	6740 <FatPartition::freeClusterCount()>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    1104:	ldr.w	r0, [r1, #1148]	; 0x47c
    1108:	cbz	r0, 110e <MTPStorage_SD::freeClusters(unsigned long)+0x22>
    110a:	b.w	4d24 <ExFatPartition::freeClusterCount()>
    110e:	bx	lr
    1110:	.word	0x1fff14d8

00001114 <MTPStorage_SD::CloseIndex()>:
  uint32_t MTPStorage_SD::clusterSize(uint32_t storage)  { return sdx[storage-1].sdfs.sectorsPerCluster(); }

  void MTPStorage_SD::CloseIndex()
  {
    1114:	push	{r4, lr}
    1116:	mov	r4, r0
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1118:	ldr	r0, [r0, #20]
    111a:	cbz	r0, 112e <MTPStorage_SD::CloseIndex()+0x1a>
    111c:	ldr	r3, [r0, #0]
    111e:	ldr	r3, [r3, #64]	; 0x40
    1120:	blx	r3
    mtp_lock_storage(true);
    if(sd_isOpen(index_)) index_.close();
    1122:	cbz	r0, 112e <MTPStorage_SD::CloseIndex()+0x1a>
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    1124:	ldr	r0, [r4, #20]
    1126:	cbz	r0, 112e <MTPStorage_SD::CloseIndex()+0x1a>
    1128:	ldr	r3, [r0, #0]
    112a:	ldr	r3, [r3, #60]	; 0x3c
    112c:	blx	r3
    mtp_lock_storage(false);
    index_generated = false;
    112e:	movs	r3, #0
    1130:	strb.w	r3, [r4, #84]	; 0x54
    index_entries_ = 0;
    1134:	str	r3, [r4, #80]	; 0x50
    1136:	pop	{r4, pc}

00001138 <mtp_yield()>:
//   support serialflash
//   partial object fetch/receive
//   events (notify usb host when local storage changes) (But, this seems too difficult)

// These should probably be weak.
void mtp_yield() {}
    1138:	bx	lr
    113a:	nop

0000113c <MTPStorage_SD::OpenIndex()>:
    index_generated = false;
    index_entries_ = 0;
  }

  void MTPStorage_SD::OpenIndex() 
  { if(sd_isOpen(index_)) return; // only once
    113c:	push	{r4, r5, r6, r7, lr}
    113e:	mov	r5, r0
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1140:	ldr	r0, [r0, #20]
    1142:	sub	sp, #84	; 0x54
    1144:	cbz	r0, 1152 <MTPStorage_SD::OpenIndex()+0x16>
    1146:	ldr	r3, [r0, #0]
    1148:	ldr	r3, [r3, #64]	; 0x40
    114a:	blx	r3
    114c:	cbz	r0, 1152 <MTPStorage_SD::OpenIndex()+0x16>
    mtp_lock_storage(true);
    index_=sd_open(0,indexFile, FILE_WRITE);
    mtp_lock_storage(false);
  }
    114e:	add	sp, #84	; 0x54
    1150:	pop	{r4, r5, r6, r7, pc}
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    1152:	movw	r3, #16898	; 0x4202
    1156:	ldr	r2, [pc, #156]	; (11f4 <MTPStorage_SD::OpenIndex()+0xb8>)
    1158:	ldr	r1, [pc, #156]	; (11f8 <MTPStorage_SD::OpenIndex()+0xbc>)
    115a:	mov	r0, sp
    115c:	bl	7508 <FsVolume::open(char const*, int)>
    1160:	ldr	r3, [sp, #72]	; 0x48
    1162:	cmp	r3, #0
    1164:	beq.n	11ea <MTPStorage_SD::OpenIndex()+0xae>
		if (file) return File(new SDFile(file));
    1166:	movs	r0, #104	; 0x68
    1168:	bl	a780 <operator new(unsigned int)>
    116c:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    116e:	ldrb.w	r6, [sp, #4]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    1172:	ldr	r2, [sp, #8]
#endif

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    1174:	ldr	r0, [pc, #132]	; (11fc <MTPStorage_SD::OpenIndex()+0xc0>)
    1176:	ldr	r1, [pc, #136]	; (1200 <MTPStorage_SD::OpenIndex()+0xc4>)
    1178:	strb	r6, [r4, #24]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    117a:	mov.w	r3, #1000	; 0x3e8
{
  public:
	constexpr Print() : write_error(0) {}
    117e:	movs	r6, #0
    1180:	str	r3, [r4, #8]
    1182:	add	r7, sp, #16
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    1184:	ldrb.w	r3, [sp, #12]
    1188:	str	r0, [r4, #0]
    118a:	str	r1, [r4, #20]
    118c:	str	r2, [r4, #28]
    118e:	strb.w	r3, [r4, #32]
    1192:	add.w	r0, r4, #36	; 0x24
    1196:	mov	r1, r7
    1198:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    119a:	strb	r6, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    119c:	str	r6, [r4, #16]
    119e:	bl	72c4 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    11a2:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    11a4:	ldr	r2, [pc, #92]	; (1204 <MTPStorage_SD::OpenIndex()+0xc8>)
    11a6:	str	r6, [r4, #100]	; 0x64
    11a8:	adds	r3, #1
    11aa:	str	r2, [r4, #20]
    11ac:	str	r3, [r4, #16]
    11ae:	ldr	r3, [pc, #88]	; (1208 <MTPStorage_SD::OpenIndex()+0xcc>)
    11b0:	str	r3, [sp, #0]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
    11b2:	mov	r0, r7
    11b4:	bl	733c <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    11b8:	ldr	r2, [r5, #20]
    11ba:	cbz	r2, 11c4 <MTPStorage_SD::OpenIndex()+0x88>
    11bc:	ldr	r3, [r2, #16]
    11be:	subs	r3, #1
    11c0:	str	r3, [r2, #16]
    11c2:	cbz	r3, 11dc <MTPStorage_SD::OpenIndex()+0xa0>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    11c4:	str	r4, [r5, #20]
		if (f) f->refcount++;
    11c6:	cmp	r4, #0
    11c8:	beq.n	114e <MTPStorage_SD::OpenIndex()+0x12>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    11ca:	ldr	r3, [r4, #16]
    11cc:	cmp	r3, #0
    11ce:	bne.n	114e <MTPStorage_SD::OpenIndex()+0x12>
    11d0:	ldr	r3, [r4, #0]
    11d2:	mov	r0, r4
    11d4:	ldr	r3, [r3, #32]
    11d6:	blx	r3
    11d8:	add	sp, #84	; 0x54
    11da:	pop	{r4, r5, r6, r7, pc}
    11dc:	ldr	r0, [r5, #20]
    11de:	cmp	r0, #0
    11e0:	beq.n	11c4 <MTPStorage_SD::OpenIndex()+0x88>
    11e2:	ldr	r3, [r0, #0]
    11e4:	ldr	r3, [r3, #32]
    11e6:	blx	r3
    11e8:	b.n	11c4 <MTPStorage_SD::OpenIndex()+0x88>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    11ea:	ldr	r4, [sp, #76]	; 0x4c
    11ec:	cmp	r4, #0
    11ee:	bne.n	1166 <MTPStorage_SD::OpenIndex()+0x2a>
    11f0:	add	r7, sp, #16
    11f2:	b.n	11ae <MTPStorage_SD::OpenIndex()+0x72>
    11f4:	.word	0x0000f964
    11f8:	.word	0x1fff14dc
    11fc:	.word	0x0000f814
    1200:	.word	0x0000f74c
    1204:	.word	0x0000f794
    1208:	.word	0x0000f770

0000120c <MTPStorage_SD::ResetIndex()>:
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    120c:	ldr	r3, [r0, #20]
    120e:	cbz	r3, 123c <MTPStorage_SD::ResetIndex()+0x30>
    1210:	ldr	r2, [r3, #0]

  void MTPStorage_SD::ResetIndex() {
    1212:	push	{r4, lr}
    1214:	mov	r4, r0
    1216:	mov	r0, r3
    1218:	ldr	r3, [r2, #64]	; 0x40
    121a:	blx	r3
    if(!sd_isOpen(index_)) return;
    121c:	cbnz	r0, 1220 <MTPStorage_SD::ResetIndex()+0x14>
    121e:	pop	{r4, pc}
    
    CloseIndex();
    1220:	ldr	r3, [r4, #0]
    1222:	mov	r0, r4
    1224:	ldr	r3, [r3, #68]	; 0x44
    1226:	blx	r3
    OpenIndex();
    1228:	mov	r0, r4
    122a:	bl	113c <MTPStorage_SD::OpenIndex()>

    all_scanned_ = false;
    122e:	movs	r2, #0
    open_file_ = 0xFFFFFFFEUL;
    1230:	mvn.w	r3, #1
    if(!sd_isOpen(index_)) return;
    
    CloseIndex();
    OpenIndex();

    all_scanned_ = false;
    1234:	strb.w	r2, [r4, #85]	; 0x55
    open_file_ = 0xFFFFFFFEUL;
    1238:	str	r3, [r4, #76]	; 0x4c
    123a:	pop	{r4, pc}
    123c:	bx	lr
    123e:	nop

00001240 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:
  }

  void MTPStorage_SD::WriteIndexRecord(uint32_t i, const Record& r) 
  {
    1240:	push	{r4, r5, r6, lr}
    1242:	mov	r5, r0
    1244:	mov	r4, r1
    1246:	mov	r6, r2
    OpenIndex();
    1248:	bl	113c <MTPStorage_SD::OpenIndex()>
	}
	virtual void flush() {
		if (f) f->flush();
	}
	virtual bool seek(uint32_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    124c:	ldr	r0, [r5, #20]
    mtp_lock_storage(true);
    index_.seek(sizeof(r) * i);
    124e:	add.w	r4, r4, r4, lsl #2
    1252:	cbz	r0, 1270 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x30>
    1254:	ldr	r3, [r0, #0]
    1256:	lsls	r1, r4, #4
    1258:	ldr	r3, [r3, #48]	; 0x30
    125a:	movs	r2, #0
    125c:	blx	r3
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    125e:	ldr	r0, [r5, #20]
    1260:	cbz	r0, 1270 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x30>
    1262:	ldr	r3, [r0, #0]
    1264:	mov	r1, r6
    1266:	ldr	r3, [r3, #44]	; 0x2c
    1268:	movs	r2, #80	; 0x50
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }
    126a:	ldmia.w	sp!, {r4, r5, r6, lr}
    126e:	bx	r3
    1270:	pop	{r4, r5, r6, pc}
    1272:	nop

00001274 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]>:
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t storage)
    1274:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1278:	ldr	r2, [pc, #168]	; (1324 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]+0xb0>)
    127a:	ldr.w	r4, [r2, #1148]	; 0x47c
  { if (index_generated) return; 
    index_generated = true;
    127e:	movs	r3, #1
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t storage)
    1280:	sub	sp, #84	; 0x54
    1282:	mov	r5, r0
  { if (index_generated) return; 
    index_generated = true;
    1284:	strb.w	r3, [r0, #84]	; 0x54
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
    1288:	cmp	r4, #0
    128a:	beq.n	12fa <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]+0x86>
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    128c:	mov	r1, r4
    128e:	mov	r0, sp
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    1290:	movs	r4, #0
    1292:	ldr	r2, [pc, #148]	; (1328 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]+0xb4>)
    1294:	strb.w	r4, [sp]
    1298:	strb.w	r4, [sp, #1]
    129c:	strb.w	r4, [sp, #2]
    12a0:	bl	5c98 <FatFile::open(FatVolume*, char const*, int)>
    12a4:	cbnz	r0, 12f2 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]+0x7e>
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    12a6:	ldr	r3, [r5, #64]	; 0x40
    // first remove old index file
    mtp_lock_storage(true);
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    index_entries_ = 0;
    12a8:	movs	r1, #0
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    12aa:	cmp	r3, r1
    // first remove old index file
    mtp_lock_storage(true);
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    index_entries_ = 0;
    12ac:	str	r1, [r5, #80]	; 0x50
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    12ae:	ble.n	12ec <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]+0x78>
    12b0:	mov	r4, r1
    {
      r.store = ii; // store is typically (storage-1) //store 0...6; storage 1...7
      r.parent = ii;
      r.sibling = 0;
    12b2:	mov	r6, r1
    12b4:	mov	r7, sp
      r.child = 0;
      r.isdir = true;
    12b6:	mov.w	r9, #1
      r.scanned = false;
      strcpy(r.name, "/");
    12ba:	mov.w	r8, #47	; 0x2f
    12be:	b.n	12c2 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]+0x4e>
    12c0:	ldr	r1, [r5, #80]	; 0x50

    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    {
      r.store = ii; // store is typically (storage-1) //store 0...6; storage 1...7
    12c2:	strh.w	r4, [sp, #14]
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    12c6:	adds	r3, r1, #1
    12c8:	str	r3, [r5, #80]	; 0x50
    WriteIndexRecord(new_record, r);
    12ca:	mov	r2, r7
    12cc:	mov	r0, r5
    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    {
      r.store = ii; // store is typically (storage-1) //store 0...6; storage 1...7
      r.parent = ii;
    12ce:	str	r4, [sp, #0]
      r.sibling = 0;
    12d0:	str	r6, [sp, #8]
      r.child = 0;
    12d2:	str	r6, [sp, #4]
      r.isdir = true;
    12d4:	strb.w	r9, [sp, #12]
      r.scanned = false;
    12d8:	strb.w	r6, [sp, #13]
      strcpy(r.name, "/");
    12dc:	strh.w	r8, [sp, #16]
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    12e0:	bl	1240 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    12e4:	ldr	r3, [r5, #64]	; 0x40
    12e6:	adds	r4, #1
    12e8:	cmp	r3, r4
    12ea:	bgt.n	12c0 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]+0x4c>
      r.isdir = true;
      r.scanned = false;
      strcpy(r.name, "/");
      AppendIndexRecord(r);
    }
  }
    12ec:	add	sp, #84	; 0x54
    12ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    12f2:	mov	r0, sp
    12f4:	bl	6ce4 <FatFile::remove()>
    12f8:	b.n	12a6 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]+0x32>
    12fa:	ldr.w	r1, [r2, #1152]	; 0x480
    12fe:	cmp	r1, #0
    1300:	beq.n	12a6 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]+0x32>
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    1302:	mov	r0, sp
    1304:	ldr	r2, [pc, #32]	; (1328 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]+0xb4>)
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    1306:	strb.w	r4, [sp, #49]	; 0x31
    130a:	strb.w	r4, [sp, #50]	; 0x32
    130e:	strb.w	r4, [sp, #51]	; 0x33
    1312:	bl	481c <ExFatFile::open(ExFatVolume*, char const*, int)>
    1316:	cmp	r0, #0
    1318:	beq.n	12a6 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]+0x32>
    131a:	mov	r0, sp
    131c:	bl	4ed0 <ExFatFile::remove()>
    1320:	b.n	12a6 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]+0x32>
    1322:	nop
    1324:	.word	0x1fff14d8
    1328:	.word	0x0000f964

0000132c <MTPStorage_SD::ReadIndexRecord(unsigned long)>:
    return new_record;
  }

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    132c:	push	{r4, r5, r6, lr}
    132e:	mov	r5, r1
    1330:	mov	r4, r2
    Record ret;
    memset(&ret, 0, sizeof(ret));
    1332:	movs	r1, #0
    1334:	movs	r2, #80	; 0x50
    return new_record;
  }

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    1336:	mov	r6, r0
    Record ret;
    memset(&ret, 0, sizeof(ret));
    1338:	bl	bd6c <memset>
    if (i > index_entries_) 
    133c:	ldr	r3, [r5, #80]	; 0x50
    133e:	cmp	r3, r4
    1340:	bcc.n	136c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x40>
    { memset(&ret, 0, sizeof(ret));
      return ret;
    }
    OpenIndex();
    1342:	mov	r0, r5
    1344:	bl	113c <MTPStorage_SD::OpenIndex()>
	}
	virtual void flush() {
		if (f) f->flush();
	}
	virtual bool seek(uint32_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    1348:	ldr	r0, [r5, #20]
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
    134a:	add.w	r4, r4, r4, lsl #2
    134e:	lsls	r1, r4, #4
    1350:	cbz	r0, 1368 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x3c>
    1352:	ldr	r3, [r0, #0]
    1354:	movs	r2, #0
    1356:	ldr	r3, [r3, #48]	; 0x30
    1358:	blx	r3
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    135a:	ldr	r0, [r5, #20]
    135c:	cbz	r0, 1368 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x3c>
    135e:	ldr	r3, [r0, #0]
    1360:	movs	r2, #80	; 0x50
    1362:	ldr	r3, [r3, #40]	; 0x28
    1364:	mov	r1, r6
    1366:	blx	r3
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);
    return ret;
  }
    1368:	mov	r0, r6
    136a:	pop	{r4, r5, r6, pc}
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    Record ret;
    memset(&ret, 0, sizeof(ret));
    if (i > index_entries_) 
    { memset(&ret, 0, sizeof(ret));
    136c:	movs	r2, #80	; 0x50
    136e:	movs	r1, #0
    1370:	mov	r0, r6
    1372:	bl	bd6c <memset>
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);
    return ret;
  }
    1376:	mov	r0, r6
    1378:	pop	{r4, r5, r6, pc}
    137a:	nop

0000137c <MTPStorage_SD::GetNextObjectHandle(unsigned long)>:
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  storage)
  {
    137c:	push	{r4, r5, lr}
    while (true) 
    { if (next_ == 0) return 0;
    137e:	ldr	r5, [r0, #88]	; 0x58
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  storage)
  {
    1380:	sub	sp, #84	; 0x54
    1382:	mov	r4, r0
    while (true) 
    { if (next_ == 0) return 0;
    1384:	cbnz	r5, 1396 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x1a>
    1386:	b.n	13c4 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x48>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
    1388:	ldr	r3, [sp, #8]
    138a:	str	r3, [r4, #88]	; 0x58
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    138c:	ldrb.w	r3, [sp, #16]
    1390:	cbnz	r3, 13be <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x42>
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  storage)
  {
    while (true) 
    { if (next_ == 0) return 0;
    1392:	ldr	r5, [r4, #88]	; 0x58
    1394:	cbz	r5, 13c4 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x48>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
    1396:	mov	r2, r5
    1398:	mov	r1, r4
    139a:	mov	r0, sp
    139c:	bl	132c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    13a0:	ldrb.w	r2, [r4, #92]	; 0x5c
    13a4:	cmp	r2, #0
    13a6:	bne.n	1388 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0xc>
      { next_ = r.sibling;
      } 
      else 
      { next_++;
    13a8:	ldr	r3, [r4, #88]	; 0x58
        if (next_ >= index_entries_) next_ = 0;
    13aa:	ldr	r1, [r4, #80]	; 0x50
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
      } 
      else 
      { next_++;
    13ac:	adds	r3, #1
    13ae:	str	r3, [r4, #88]	; 0x58
        if (next_ >= index_entries_) next_ = 0;
    13b0:	cmp	r3, r1
      }
      if (r.name[0]) return ret;
    13b2:	ldrb.w	r3, [sp, #16]
      if (follow_sibling_) 
      { next_ = r.sibling;
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
    13b6:	it	cs
    13b8:	strcs	r2, [r4, #88]	; 0x58
      }
      if (r.name[0]) return ret;
    13ba:	cmp	r3, #0
    13bc:	beq.n	1392 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x16>
    }
  }
    13be:	mov	r0, r5
    13c0:	add	sp, #84	; 0x54
    13c2:	pop	{r4, r5, pc}
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  storage)
  {
    while (true) 
    { if (next_ == 0) return 0;
    13c4:	movs	r5, #0
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    }
  }
    13c6:	mov	r0, r5
    13c8:	add	sp, #84	; 0x54
    13ca:	pop	{r4, r5, pc}

000013cc <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)>:

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    13cc:	push	{r4, r5, r6, r7, lr}
    13ce:	sub	sp, #84	; 0x54
    13d0:	mov	r7, r2
    Record r = ReadIndexRecord(handle);
    13d2:	mov	r2, r1
    13d4:	mov	r1, r0
    13d6:	mov	r0, sp
      if (r.name[0]) return ret;
    }
  }

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    13d8:	mov	r5, r3
    13da:	ldr	r6, [sp, #104]	; 0x68
    13dc:	ldr	r4, [sp, #108]	; 0x6c
    Record r = ReadIndexRecord(handle);
    13de:	bl	132c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    13e2:	mov	r0, r7
    13e4:	add	r1, sp, #16
    13e6:	bl	c2a0 <strcpy>
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    13ea:	ldrb.w	r3, [sp, #12]

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    13ee:	ldr	r2, [sp, #0]
    13f0:	str	r2, [r6, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    13f2:	cbnz	r3, 1402 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x36>
    13f4:	ldr	r3, [sp, #4]
    *store = r.store;
    13f6:	ldrh.w	r2, [sp, #14]
  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    13fa:	str	r3, [r5, #0]
    *store = r.store;
    13fc:	strh	r2, [r4, #0]
  }
    13fe:	add	sp, #84	; 0x54
    1400:	pop	{r4, r5, r6, r7, pc}
  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    1402:	mov.w	r3, #4294967295
    1406:	b.n	13f6 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x2a>

00001408 <MTPStorage_SD::GetSize(unsigned long)>:
    *store = r.store;
  }

  uint32_t MTPStorage_SD::GetSize(uint32_t handle) 
  {
    1408:	push	{lr}
    140a:	sub	sp, #84	; 0x54
    return ReadIndexRecord(handle).child;
    140c:	mov	r2, r1
    140e:	mov	r1, r0
    1410:	mov	r0, sp
    1412:	bl	132c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    1416:	ldr	r0, [sp, #4]
    1418:	add	sp, #84	; 0x54
    141a:	ldr.w	pc, [sp], #4
    141e:	nop

00001420 <MTPStorage_SD::close()>:
      file_.write(data,bytes);
      mtp_lock_storage(false);
  }

  void MTPStorage_SD::close() 
  {
    1420:	push	{r4, r5, lr}
    1422:	mov	r4, r0
	}
	virtual uint32_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
    1424:	ldr	r0, [r0, #40]	; 0x28
    1426:	sub	sp, #84	; 0x54
    1428:	cbz	r0, 145c <MTPStorage_SD::close()+0x3c>
    142a:	ldr	r3, [r0, #0]
    142c:	ldr	r3, [r3, #56]	; 0x38
    142e:	blx	r3
    1430:	mov	r5, r0
	}
	virtual void close() {
		if (f) f->close();
    1432:	ldr	r0, [r4, #40]	; 0x28
    1434:	cbz	r0, 143c <MTPStorage_SD::close()+0x1c>
    1436:	ldr	r3, [r0, #0]
    1438:	ldr	r3, [r3, #60]	; 0x3c
    143a:	blx	r3
    mtp_lock_storage(true);
    uint64_t size = file_.size();
    file_.close();
    mtp_lock_storage(false);
    Record r = ReadIndexRecord(open_file_);
    143c:	mov	r0, sp
    143e:	ldr	r2, [r4, #76]	; 0x4c
    1440:	mov	r1, r4
    1442:	bl	132c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    r.child = size;
    WriteIndexRecord(open_file_, r);
    1446:	mov	r2, sp
    1448:	ldr	r1, [r4, #76]	; 0x4c
    mtp_lock_storage(true);
    uint64_t size = file_.size();
    file_.close();
    mtp_lock_storage(false);
    Record r = ReadIndexRecord(open_file_);
    r.child = size;
    144a:	str	r5, [sp, #4]
    WriteIndexRecord(open_file_, r);
    144c:	mov	r0, r4
    144e:	bl	1240 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    1452:	mvn.w	r3, #1
    1456:	str	r3, [r4, #76]	; 0x4c
  }
    1458:	add	sp, #84	; 0x54
    145a:	pop	{r4, r5, pc}
	}
	virtual uint32_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
    145c:	mov	r5, r0
    145e:	b.n	143c <MTPStorage_SD::close()+0x1c>

00001460 <MTPStorage_SD::ConstructFilename(int, char*, int)>:
    mtp_lock_storage(false);
    return ret;
  }

  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    1460:	push	{r4, r5, r6, r7, lr}
    1462:	mov	r4, r1
    1464:	sub	sp, #84	; 0x54
    Record tmp = ReadIndexRecord(i);
    1466:	mov	r1, r0
    mtp_lock_storage(false);
    return ret;
  }

  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    1468:	mov	r6, r0
    146a:	mov	r5, r2
    Record tmp = ReadIndexRecord(i);
    146c:	mov	r0, sp
    146e:	mov	r2, r4
    mtp_lock_storage(false);
    return ret;
  }

  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    1470:	mov	r7, r3
    Record tmp = ReadIndexRecord(i);
    1472:	bl	132c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      
    if (tmp.parent==(unsigned)i) 
    1476:	ldr	r1, [sp, #0]
    1478:	cmp	r4, r1
    147a:	beq.n	14c0 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x60>
    { strcpy(out, "/");
      return tmp.store;
    }
    else 
    { ConstructFilename(tmp.parent, out, len);
    147c:	mov	r3, r7
    147e:	mov	r2, r5
    1480:	mov	r0, r6
    1482:	bl	1460 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strcat(out, "/");
    1486:	mov	r0, r5
    1488:	bl	c380 <strlen>
    148c:	adds	r3, r5, r0
    148e:	mov	r4, r0
    1490:	ldrb.w	r3, [r3, #-1]
    1494:	cmp	r3, #47	; 0x2f
    1496:	beq.n	14a0 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x40>
    1498:	ldr	r3, [pc, #52]	; (14d0 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x70>)
    149a:	ldrh	r3, [r3, #0]
    149c:	strh	r3, [r5, r0]
    149e:	adds	r4, #1
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
    14a0:	add	r0, sp, #16
    14a2:	bl	c380 <strlen>
    14a6:	add	r0, r4
    14a8:	adds	r0, #1
    14aa:	cmp	r0, r7
    14ac:	bcc.n	14b6 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x56>
      return tmp.store;
    14ae:	ldrh.w	r0, [sp, #14]
    }
  }
    14b2:	add	sp, #84	; 0x54
    14b4:	pop	{r4, r5, r6, r7, pc}
      return tmp.store;
    }
    else 
    { ConstructFilename(tmp.parent, out, len);
      if (out[strlen(out)-1] != '/') strcat(out, "/");
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
    14b6:	add	r1, sp, #16
    14b8:	mov	r0, r5
    14ba:	bl	c260 <strcat>
    14be:	b.n	14ae <MTPStorage_SD::ConstructFilename(int, char*, int)+0x4e>
  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    Record tmp = ReadIndexRecord(i);
      
    if (tmp.parent==(unsigned)i) 
    { strcpy(out, "/");
    14c0:	ldr	r3, [pc, #12]	; (14d0 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x70>)
      return tmp.store;
    14c2:	ldrh.w	r0, [sp, #14]
  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    Record tmp = ReadIndexRecord(i);
      
    if (tmp.parent==(unsigned)i) 
    { strcpy(out, "/");
    14c6:	ldrh	r3, [r3, #0]
    14c8:	strh	r3, [r5, #0]
    { ConstructFilename(tmp.parent, out, len);
      if (out[strlen(out)-1] != '/') strcat(out, "/");
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
      return tmp.store;
    }
  }
    14ca:	add	sp, #84	; 0x54
    14cc:	pop	{r4, r5, r6, r7, pc}
    14ce:	nop
    14d0:	.word	0x0000f974

000014d4 <MTPStorage_SD::DeleteObject(unsigned long)>:
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }

  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    14d4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    14d8:	adds	r2, r1, #1
    14da:	sub	sp, #496	; 0x1f0
    14dc:	mov	r6, r1
    14de:	mov	r4, r0
    14e0:	ite	ne
    14e2:	movne	r5, r1
    14e4:	moveq	r5, #0
    14e6:	b.n	14f8 <MTPStorage_SD::DeleteObject(unsigned long)+0x24>
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
      if (!r.child) break;
    14e8:	ldr	r3, [sp, #84]	; 0x54
      if (!DeleteObject(r.child))  return false;
    14ea:	mov	r1, r3
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
      if (!r.child) break;
    14ec:	cbz	r3, 1518 <MTPStorage_SD::DeleteObject(unsigned long)+0x44>
      if (!DeleteObject(r.child))  return false;
    14ee:	ldr	r3, [r4, #0]
    14f0:	ldr	r3, [r3, #64]	; 0x40
    14f2:	blx	r3
    14f4:	cmp	r0, #0
    14f6:	beq.n	15c8 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
    14f8:	mov	r2, r5
    14fa:	mov	r1, r4
    14fc:	mov	r0, sp
    14fe:	bl	132c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1502:	movs	r2, #80	; 0x50
    1504:	mov	r1, sp
    1506:	add.w	r0, sp, r2
    150a:	bl	8f84 <memcpy>
      if (!r.isdir) break;
    150e:	ldrb.w	r3, [sp, #92]	; 0x5c
      if (!r.child) break;
      if (!DeleteObject(r.child))  return false;
    1512:	mov	r0, r4
  {
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
    1514:	cmp	r3, #0
    1516:	bne.n	14e8 <MTPStorage_SD::DeleteObject(unsigned long)+0x14>
      if (!DeleteObject(r.child))  return false;
    }

    // We can't actually delete the root folder,
    // but if we deleted everything else, return true.
    if (object == 0xFFFFFFFFUL) return true;
    1518:	adds	r3, r6, #1
    151a:	beq.n	15de <MTPStorage_SD::DeleteObject(unsigned long)+0x10a>

    ConstructFilename(object, filename, 256);
    151c:	mov.w	r3, #256	; 0x100
    1520:	add	r2, sp, #240	; 0xf0
    1522:	mov	r1, r6
    1524:	mov	r0, r4
    1526:	bl	1460 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    bool success;
    mtp_lock_storage(true);
    if (r.isdir) success = sd_rmdir(0,filename); else  success = sd_remove(0,filename);
    152a:	ldrb.w	r7, [sp, #92]	; 0x5c
    152e:	ldr	r3, [pc, #296]	; (1658 <MTPStorage_SD::DeleteObject(unsigned long)+0x184>)
    1530:	cmp	r7, #0
    1532:	beq.n	15e6 <MTPStorage_SD::DeleteObject(unsigned long)+0x112>
    1534:	ldr.w	r7, [r3, #1148]	; 0x47c
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
           m_xVol ? m_xVol->rmdir(path) : false;
    1538:	cbz	r7, 15a6 <MTPStorage_SD::DeleteObject(unsigned long)+0xd2>
    153a:	add	r5, sp, #160	; 0xa0
    153c:	mov.w	lr, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    1540:	add	r2, sp, #240	; 0xf0
    1542:	mov	r1, r7
    1544:	mov	r0, r5
    1546:	mov	r3, lr
    1548:	strb.w	lr, [r5]
    154c:	strb.w	lr, [r5, #1]
    1550:	strb.w	lr, [r5, #2]
    1554:	bl	5c98 <FatFile::open(FatVolume*, char const*, int)>
    1558:	cbz	r0, 15c8 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    155a:	mov	r0, r5
    155c:	bl	6090 <FatFile::rmdir()>
    mtp_lock_storage(false);
    if (!success) return false;
    1560:	cbz	r0, 15c8 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    
    r.name[0] = 0;
    int p = r.parent;
    1562:	ldr.w	r8, [sp, #80]	; 0x50
    mtp_lock_storage(true);
    if (r.isdir) success = sd_rmdir(0,filename); else  success = sd_remove(0,filename);
    mtp_lock_storage(false);
    if (!success) return false;
    
    r.name[0] = 0;
    1566:	movs	r3, #0
    int p = r.parent;
    WriteIndexRecord(object, r);
    1568:	add	r2, sp, #80	; 0x50
    156a:	mov	r1, r6
    156c:	mov	r0, r4
    mtp_lock_storage(true);
    if (r.isdir) success = sd_rmdir(0,filename); else  success = sd_remove(0,filename);
    mtp_lock_storage(false);
    if (!success) return false;
    
    r.name[0] = 0;
    156e:	strb.w	r3, [sp, #96]	; 0x60
    int p = r.parent;
    WriteIndexRecord(object, r);
    1572:	bl	1240 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record tmp = ReadIndexRecord(p);
    1576:	mov	r2, r8
    1578:	mov	r1, r4
    157a:	mov	r0, r5
    157c:	bl	132c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (tmp.child == object) 
    1580:	ldr	r7, [r5, #4]
    1582:	cmp	r6, r7
    1584:	beq.n	15d0 <MTPStorage_SD::DeleteObject(unsigned long)+0xfc>
    { tmp.child = r.sibling;
      WriteIndexRecord(p, tmp);
    } 
    else 
    { int c = tmp.child;
      while (c) 
    1586:	cbz	r7, 15de <MTPStorage_SD::DeleteObject(unsigned long)+0x10a>
      { tmp = ReadIndexRecord(c);
    1588:	mov	r2, r7
    158a:	mov	r1, r4
    158c:	mov	r0, sp
    158e:	bl	132c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1592:	movs	r2, #80	; 0x50
    1594:	mov	r1, sp
    1596:	mov	r0, r5
    1598:	bl	8f84 <memcpy>
        if (tmp.sibling == object) 
    159c:	ldr	r3, [r5, #8]
    159e:	cmp	r6, r3
    15a0:	beq.n	163c <MTPStorage_SD::DeleteObject(unsigned long)+0x168>
    { tmp.child = r.sibling;
      WriteIndexRecord(p, tmp);
    } 
    else 
    { int c = tmp.child;
      while (c) 
    15a2:	mov	r7, r3
    15a4:	b.n	1586 <MTPStorage_SD::DeleteObject(unsigned long)+0xb2>
    15a6:	ldr.w	r1, [r3, #1152]	; 0x480
    15aa:	cbz	r1, 15c8 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    15ac:	add	r5, sp, #160	; 0xa0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    15ae:	add	r2, sp, #240	; 0xf0
    15b0:	mov	r3, r7
    15b2:	mov	r0, r5
    15b4:	strb.w	r7, [r5, #49]	; 0x31
    15b8:	strb.w	r7, [r5, #50]	; 0x32
    15bc:	strb.w	r7, [r5, #51]	; 0x33
    15c0:	bl	481c <ExFatFile::open(ExFatVolume*, char const*, int)>
    15c4:	cmp	r0, #0
    15c6:	bne.n	164e <MTPStorage_SD::DeleteObject(unsigned long)+0x17a>
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
      if (!r.child) break;
      if (!DeleteObject(r.child))  return false;
    15c8:	movs	r0, #0
        { c = tmp.sibling;
        }
      }
    }
    return true;
  }
    15ca:	add	sp, #496	; 0x1f0
    15cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    r.name[0] = 0;
    int p = r.parent;
    WriteIndexRecord(object, r);
    Record tmp = ReadIndexRecord(p);
    if (tmp.child == object) 
    { tmp.child = r.sibling;
    15d0:	ldr	r3, [sp, #88]	; 0x58
    15d2:	str	r3, [r5, #4]
      WriteIndexRecord(p, tmp);
    15d4:	mov	r2, r5
    15d6:	mov	r1, r8
    15d8:	mov	r0, r4
    15da:	bl	1240 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        else 
        { c = tmp.sibling;
        }
      }
    }
    return true;
    15de:	movs	r0, #1
  }
    15e0:	add	sp, #496	; 0x1f0
    15e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    15e6:	ldr.w	lr, [r3, #1148]	; 0x47c
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
    15ea:	cmp.w	lr, #0
    15ee:	beq.n	1610 <MTPStorage_SD::DeleteObject(unsigned long)+0x13c>
    15f0:	add	r5, sp, #160	; 0xa0
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    15f2:	add	r2, sp, #240	; 0xf0
    15f4:	mov	r1, lr
    15f6:	mov	r0, r5
    15f8:	movs	r3, #1
    15fa:	strb	r7, [r5, #0]
    15fc:	strb	r7, [r5, #1]
    15fe:	strb	r7, [r5, #2]
    1600:	bl	5c98 <FatFile::open(FatVolume*, char const*, int)>
    1604:	cmp	r0, #0
    1606:	beq.n	15c8 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    1608:	mov	r0, r5
    160a:	bl	6ce4 <FatFile::remove()>
    160e:	b.n	1560 <MTPStorage_SD::DeleteObject(unsigned long)+0x8c>
    1610:	ldr.w	r1, [r3, #1152]	; 0x480
    1614:	cmp	r1, #0
    1616:	beq.n	15c8 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    1618:	add	r5, sp, #160	; 0xa0
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    161a:	add	r2, sp, #240	; 0xf0
    161c:	mov	r0, r5
    161e:	movs	r3, #1
    1620:	strb.w	lr, [r5, #49]	; 0x31
    1624:	strb.w	lr, [r5, #50]	; 0x32
    1628:	strb.w	lr, [r5, #51]	; 0x33
    162c:	bl	481c <ExFatFile::open(ExFatVolume*, char const*, int)>
    1630:	cmp	r0, #0
    1632:	beq.n	15c8 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    1634:	mov	r0, r5
    1636:	bl	4ed0 <ExFatFile::remove()>
    163a:	b.n	1560 <MTPStorage_SD::DeleteObject(unsigned long)+0x8c>
    else 
    { int c = tmp.child;
      while (c) 
      { tmp = ReadIndexRecord(c);
        if (tmp.sibling == object) 
        { tmp.sibling = r.sibling;
    163c:	ldr	r3, [sp, #88]	; 0x58
    163e:	str	r3, [r5, #8]
          WriteIndexRecord(c, tmp);
    1640:	mov	r0, r4
    1642:	mov	r2, r5
    1644:	mov	r1, r7
    1646:	bl	1240 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        else 
        { c = tmp.sibling;
        }
      }
    }
    return true;
    164a:	movs	r0, #1
      while (c) 
      { tmp = ReadIndexRecord(c);
        if (tmp.sibling == object) 
        { tmp.sibling = r.sibling;
          WriteIndexRecord(c, tmp);
          break;
    164c:	b.n	15ca <MTPStorage_SD::DeleteObject(unsigned long)+0xf6>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    164e:	mov	r0, r5
    1650:	bl	4fa8 <ExFatFile::rmdir()>
    1654:	b.n	1560 <MTPStorage_SD::DeleteObject(unsigned long)+0x8c>
    1656:	nop
    1658:	.word	0x1fff14d8

0000165c <MTPStorage_SD::rename(unsigned long, char const*)>:
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  bool MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[256];
    165c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1660:	sub.w	sp, sp, #716	; 0x2cc
    char newName[256];
    char temp[64];

    uint16_t store = ConstructFilename(handle, oldName, 256);
    1664:	mov.w	r3, #256	; 0x100
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  bool MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[256];
    1668:	mov	r9, r2
    char newName[256];
    char temp[64];

    uint16_t store = ConstructFilename(handle, oldName, 256);
    166a:	add	r2, sp, #200	; 0xc8
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  bool MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[256];
    166c:	mov	r6, r1
    166e:	mov	r5, r0
    char newName[256];
    char temp[64];

    uint16_t store = ConstructFilename(handle, oldName, 256);
    1670:	bl	1460 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    1674:	mov	r4, r0
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1676:	add	r0, sp, #200	; 0xc8
    1678:	bl	c380 <strlen>
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    167c:	mov	r1, r0
    167e:	add	r0, sp, #200	; 0xc8
    1680:	bl	9184 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1684:	ldr	r0, [pc, #240]	; (1778 <MTPStorage_SD::rename(unsigned long, char const*)+0x11c>)
    1686:	bl	a720 <Print::println()>
    Serial.println(oldName);

    Record p1 = ReadIndexRecord(handle);
    strcpy(temp,p1.name);
    168a:	add	r7, sp, #56	; 0x38
    char temp[64];

    uint16_t store = ConstructFilename(handle, oldName, 256);
    Serial.println(oldName);

    Record p1 = ReadIndexRecord(handle);
    168c:	mov	r2, r6
    168e:	mov	r1, r5
    1690:	add	r0, sp, #120	; 0x78
    1692:	bl	132c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(temp,p1.name);
    1696:	add	r1, sp, #136	; 0x88
    1698:	mov	r0, r7
    169a:	bl	c214 <stpcpy>
    strcpy(p1.name,name);
    169e:	mov	r1, r9

    uint16_t store = ConstructFilename(handle, oldName, 256);
    Serial.println(oldName);

    Record p1 = ReadIndexRecord(handle);
    strcpy(temp,p1.name);
    16a0:	mov	r8, r0
    strcpy(p1.name,name);
    16a2:	add	r0, sp, #136	; 0x88
    16a4:	bl	c2a0 <strcpy>

    WriteIndexRecord(handle, p1);
    16a8:	add	r2, sp, #120	; 0x78
    16aa:	mov	r1, r6
    16ac:	mov	r0, r5
    16ae:	bl	1240 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, 256);
    16b2:	mov.w	r3, #256	; 0x100
    16b6:	add	r2, sp, #456	; 0x1c8
    16b8:	mov	r1, r6
    16ba:	mov	r0, r5
    16bc:	bl	1460 <MTPStorage_SD::ConstructFilename(int, char*, int)>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    16c0:	add	r0, sp, #456	; 0x1c8
    16c2:	bl	c380 <strlen>
    16c6:	mov	r1, r0
    16c8:	add	r0, sp, #456	; 0x1c8
    16ca:	bl	9184 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    16ce:	ldr	r0, [pc, #168]	; (1778 <MTPStorage_SD::rename(unsigned long, char const*)+0x11c>)
    16d0:	bl	a720 <Print::println()>
    Serial.println(newName);

    if (sd_rename(store,oldName,newName)) return true;
    16d4:	ldr	r3, [pc, #164]	; (177c <MTPStorage_SD::rename(unsigned long, char const*)+0x120>)
    16d6:	mov.w	r0, #1200	; 0x4b0
    16da:	mla	r0, r0, r4, r3
    16de:	adds	r0, #4
    16e0:	ldr.w	r4, [r0, #1144]	; 0x478
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
      return m_fVol ? m_fVol->rename(oldPath, newPath) :
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    16e4:	cbz	r4, 1740 <MTPStorage_SD::rename(unsigned long, char const*)+0xe4>
    16e6:	mov.w	lr, #0
    return truncate(path.c_str(), length);
  }
#endif  // ENABLE_ARDUINO_STRING

 private:
  FatFile* vwd() {return &m_vwd;}
    16ea:	add.w	r4, r4, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    FatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    16ee:	add	r2, sp, #200	; 0xc8
    16f0:	mov	r1, r4
    16f2:	mov	r0, sp
    16f4:	mov	r3, lr
    16f6:	strb.w	lr, [sp]
    16fa:	strb.w	lr, [sp, #1]
    16fe:	strb.w	lr, [sp, #2]
    1702:	bl	5bd8 <FatFile::open(FatFile*, char const*, int)>
    1706:	cbnz	r0, 172a <MTPStorage_SD::rename(unsigned long, char const*)+0xce>

    // rename failed; undo index update
    strcpy(p1.name,temp);
    1708:	rsb	r2, r7, r8
    170c:	mov	r1, r7
    170e:	adds	r2, #1
    1710:	add	r0, sp, #136	; 0x88
    1712:	bl	8f84 <memcpy>
    WriteIndexRecord(handle, p1);
    1716:	mov	r0, r5
    1718:	add	r2, sp, #120	; 0x78
    171a:	mov	r1, r6
    171c:	bl	1240 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
    1720:	movs	r0, #0
  }
    1722:	add.w	sp, sp, #716	; 0x2cc
    1726:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    172a:	add	r2, sp, #456	; 0x1c8
    172c:	mov	r1, r4
    172e:	mov	r0, sp
    1730:	bl	5eb8 <FatFile::rename(FatFile*, char const*)>

    WriteIndexRecord(handle, p1);
    ConstructFilename(handle, newName, 256);
    Serial.println(newName);

    if (sd_rename(store,oldName,newName)) return true;
    1734:	cmp	r0, #0
    1736:	beq.n	1708 <MTPStorage_SD::rename(unsigned long, char const*)+0xac>

    // rename failed; undo index update
    strcpy(p1.name,temp);
    WriteIndexRecord(handle, p1);
    return false;
  }
    1738:	add.w	sp, sp, #716	; 0x2cc
    173c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1740:	ldr.w	r1, [r0, #1148]	; 0x47c
    1744:	cmp	r1, #0
    1746:	beq.n	1708 <MTPStorage_SD::rename(unsigned long, char const*)+0xac>
  bool rmdir(const char* path);
#endif  //  USE_EXFAT_UNICODE_NAMES

 private:
  friend ExFatFile;
  ExFatFile* vwd() {return &m_vwd;}
    1748:	add.w	r9, r1, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const ExChar_t* oldPath, const ExChar_t* newPath) {
    ExFatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    174c:	add	r2, sp, #200	; 0xc8
    174e:	mov	r1, r9
    1750:	mov	r3, r4
    1752:	mov	r0, sp
    1754:	strb.w	r4, [sp, #49]	; 0x31
    1758:	strb.w	r4, [sp, #50]	; 0x32
    175c:	strb.w	r4, [sp, #51]	; 0x33
    1760:	bl	471c <ExFatFile::open(ExFatFile*, char const*, int)>
    1764:	cmp	r0, #0
    1766:	beq.n	1708 <MTPStorage_SD::rename(unsigned long, char const*)+0xac>
    1768:	add	r2, sp, #456	; 0x1c8
    176a:	mov	r1, r9
    176c:	mov	r0, sp
    176e:	bl	53dc <ExFatFile::rename(ExFatFile*, char const*)>

    WriteIndexRecord(handle, p1);
    ConstructFilename(handle, newName, 256);
    Serial.println(newName);

    if (sd_rename(store,oldName,newName)) return true;
    1772:	cmp	r0, #0
    1774:	bne.n	1738 <MTPStorage_SD::rename(unsigned long, char const*)+0xdc>
    1776:	b.n	1708 <MTPStorage_SD::rename(unsigned long, char const*)+0xac>
    1778:	.word	0x1fff0a0c
    177c:	.word	0x1fff14d8

00001780 <MTPStorage_SD::move(unsigned long, unsigned long)>:
 * 
 */


  bool MTPStorage_SD::move(uint32_t handle, uint32_t newParent ) 
  { 
    1780:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1784:	mov	r7, r1
    1786:	sub.w	sp, sp, #888	; 0x378
    178a:	mov	r5, r0
    Record p1 = ReadIndexRecord(handle); 
    178c:	mov	r1, r0
 * 
 */


  bool MTPStorage_SD::move(uint32_t handle, uint32_t newParent ) 
  { 
    178e:	mov	r8, r2
    Record p1 = ReadIndexRecord(handle); 
    1790:	add	r0, sp, #136	; 0x88
    1792:	mov	r2, r7
    1794:	bl	132c <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    uint32_t oldParent = p1.parent;
    1798:	ldr	r4, [sp, #136]	; 0x88
    Record p2 = ReadIndexRecord(newParent);
    179a:	mov	r2, r8
    179c:	mov	r1, r5
    179e:	add	r0, sp, #216	; 0xd8
    17a0:	bl	132c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p3 = ReadIndexRecord(oldParent); 
    17a4:	mov	r2, r4
    17a6:	mov	r1, r5
    17a8:	add	r0, sp, #296	; 0x128
    17aa:	bl	132c <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    char oldName[256];
    uint16_t store0 = ConstructFilename(handle, oldName, 256);
    17ae:	mov	r1, r7
    17b0:	mov	r0, r5
    17b2:	add	r2, sp, #376	; 0x178
    17b4:	mov.w	r3, #256	; 0x100
    17b8:	bl	1460 <MTPStorage_SD::ConstructFilename(int, char*, int)>
//    printIndexList();

//    if(p1.store != p2.store) return false;

    // remove from old direcory
    if(p3.child==handle)
    17bc:	ldr.w	r9, [sp, #300]	; 0x12c
    17c0:	cmp	r7, r9
    uint32_t oldParent = p1.parent;
    Record p2 = ReadIndexRecord(newParent);
    Record p3 = ReadIndexRecord(oldParent); 

    char oldName[256];
    uint16_t store0 = ConstructFilename(handle, oldName, 256);
    17c2:	mov	sl, r0
//    printIndexList();

//    if(p1.store != p2.store) return false;

    // remove from old direcory
    if(p3.child==handle)
    17c4:	beq.n	1846 <MTPStorage_SD::move(unsigned long, unsigned long)+0xc6>
      p3.child = p1.sibling;
      WriteIndexRecord(oldParent, p3);    
    }
    else
    { uint32_t jx = p3.child;
      Record px = ReadIndexRecord(jx); 
    17c6:	add	r4, sp, #632	; 0x278
    17c8:	mov	r0, r4
    17ca:	mov	r2, r9
    17cc:	mov	r1, r5
    17ce:	bl	132c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      while(handle != px.sibling)
    17d2:	ldr	r6, [r4, #8]
    17d4:	cmp	r7, r6
    17d6:	bne.n	17dc <MTPStorage_SD::move(unsigned long, unsigned long)+0x5c>
    17d8:	b.n	18ce <MTPStorage_SD::move(unsigned long, unsigned long)+0x14e>
    17da:	mov	r6, r3
      {
        jx = px.sibling;
        px = ReadIndexRecord(jx); 
    17dc:	mov	r2, r6
    17de:	mov	r1, r5
    17e0:	mov	r0, sp
    17e2:	bl	132c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    17e6:	movs	r2, #80	; 0x50
    17e8:	mov	r1, sp
    17ea:	mov	r0, r4
    17ec:	bl	8f84 <memcpy>
      WriteIndexRecord(oldParent, p3);    
    }
    else
    { uint32_t jx = p3.child;
      Record px = ReadIndexRecord(jx); 
      while(handle != px.sibling)
    17f0:	ldr	r3, [r4, #8]
    17f2:	cmp	r7, r3
    17f4:	bne.n	17da <MTPStorage_SD::move(unsigned long, unsigned long)+0x5a>
      {
        jx = px.sibling;
        px = ReadIndexRecord(jx); 
      }
      px.sibling = p1.sibling;
    17f6:	ldr	r3, [sp, #144]	; 0x90
    17f8:	str	r3, [r4, #8]
      WriteIndexRecord(jx, px);
    17fa:	mov	r1, r6
    17fc:	mov	r2, r4
    17fe:	mov	r0, r5
    1800:	bl	1240 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    }
  
    // add to new directory
    p1.parent = newParent;
    p1.sibling = p2.child;
    1804:	ldr	r3, [sp, #220]	; 0xdc
    1806:	str	r3, [sp, #144]	; 0x90
    p2.child = handle;
    WriteIndexRecord(handle, p1);
    1808:	add	r2, sp, #136	; 0x88
    180a:	mov	r1, r7
    180c:	mov	r0, r5
      px.sibling = p1.sibling;
      WriteIndexRecord(jx, px);
    }
  
    // add to new directory
    p1.parent = newParent;
    180e:	str.w	r8, [sp, #136]	; 0x88
    p1.sibling = p2.child;
    p2.child = handle;
    1812:	str	r7, [sp, #220]	; 0xdc
    WriteIndexRecord(handle, p1);
    1814:	bl	1240 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent,p2);
    1818:	add	r2, sp, #216	; 0xd8
    181a:	mov	r1, r8
    181c:	mov	r0, r5
    181e:	bl	1240 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

    char newName[256];
    ConstructFilename(handle, newName, 256);
    1822:	mov.w	r3, #256	; 0x100
    1826:	mov	r2, r4
    1828:	mov	r1, r7
    182a:	mov	r0, r5
    182c:	bl	1460 <MTPStorage_SD::ConstructFilename(int, char*, int)>
//    Serial.println(newName);
//    printIndexList();

  if(p2.store == p3.store)
    1830:	ldrh.w	r2, [sp, #230]	; 0xe6
    1834:	ldrh.w	r3, [sp, #310]	; 0x136
    1838:	cmp	r2, r3
    183a:	beq.n	1858 <MTPStorage_SD::move(unsigned long, unsigned long)+0xd8>
    return sd_rename(store0,oldName,newName);
  return false;
    183c:	movs	r0, #0
  }
    183e:	add.w	sp, sp, #888	; 0x378
    1842:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

    // remove from old direcory
    if(p3.child==handle)
    {
      p3.child = p1.sibling;
      WriteIndexRecord(oldParent, p3);    
    1846:	mov	r1, r4
//    if(p1.store != p2.store) return false;

    // remove from old direcory
    if(p3.child==handle)
    {
      p3.child = p1.sibling;
    1848:	ldr	r3, [sp, #144]	; 0x90
    184a:	str	r3, [sp, #300]	; 0x12c
      WriteIndexRecord(oldParent, p3);    
    184c:	add	r2, sp, #296	; 0x128
    184e:	mov	r0, r5
    1850:	bl	1240 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    1854:	add	r4, sp, #632	; 0x278
    1856:	b.n	1804 <MTPStorage_SD::move(unsigned long, unsigned long)+0x84>
    ConstructFilename(handle, newName, 256);
//    Serial.println(newName);
//    printIndexList();

  if(p2.store == p3.store)
    return sd_rename(store0,oldName,newName);
    1858:	ldr	r3, [pc, #120]	; (18d4 <MTPStorage_SD::move(unsigned long, unsigned long)+0x154>)
    185a:	mov.w	r2, #1200	; 0x4b0
    185e:	mla	sl, r2, sl, r3
    1862:	add.w	sl, sl, #4
    1866:	ldr.w	r5, [sl, #1144]	; 0x478
    186a:	cbz	r5, 189a <MTPStorage_SD::move(unsigned long, unsigned long)+0x11a>
    186c:	movs	r6, #0
    return truncate(path.c_str(), length);
  }
#endif  // ENABLE_ARDUINO_STRING

 private:
  FatFile* vwd() {return &m_vwd;}
    186e:	add.w	r5, r5, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    FatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    1872:	add	r2, sp, #376	; 0x178
    1874:	mov	r1, r5
    1876:	add	r0, sp, #80	; 0x50
    1878:	mov	r3, r6
    187a:	strb.w	r6, [sp, #80]	; 0x50
    187e:	strb.w	r6, [sp, #81]	; 0x51
    1882:	strb.w	r6, [sp, #82]	; 0x52
    1886:	bl	5bd8 <FatFile::open(FatFile*, char const*, int)>
    188a:	cmp	r0, #0
    188c:	beq.n	183e <MTPStorage_SD::move(unsigned long, unsigned long)+0xbe>
    188e:	mov	r2, r4
    1890:	mov	r1, r5
    1892:	add	r0, sp, #80	; 0x50
    1894:	bl	5eb8 <FatFile::rename(FatFile*, char const*)>
    1898:	b.n	183e <MTPStorage_SD::move(unsigned long, unsigned long)+0xbe>
    189a:	ldr.w	r0, [sl, #1148]	; 0x47c
    189e:	cmp	r0, #0
    18a0:	beq.n	183e <MTPStorage_SD::move(unsigned long, unsigned long)+0xbe>
  bool rmdir(const char* path);
#endif  //  USE_EXFAT_UNICODE_NAMES

 private:
  friend ExFatFile;
  ExFatFile* vwd() {return &m_vwd;}
    18a2:	add.w	r6, r0, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const ExChar_t* oldPath, const ExChar_t* newPath) {
    ExFatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    18a6:	add	r2, sp, #376	; 0x178
    18a8:	mov	r1, r6
    18aa:	mov	r3, r5
    18ac:	add	r0, sp, #80	; 0x50
    18ae:	strb.w	r5, [sp, #129]	; 0x81
    18b2:	strb.w	r5, [sp, #130]	; 0x82
    18b6:	strb.w	r5, [sp, #131]	; 0x83
    18ba:	bl	471c <ExFatFile::open(ExFatFile*, char const*, int)>
    18be:	cmp	r0, #0
    18c0:	beq.n	183e <MTPStorage_SD::move(unsigned long, unsigned long)+0xbe>
    18c2:	mov	r2, r4
    18c4:	mov	r1, r6
    18c6:	add	r0, sp, #80	; 0x50
    18c8:	bl	53dc <ExFatFile::rename(ExFatFile*, char const*)>
    18cc:	b.n	183e <MTPStorage_SD::move(unsigned long, unsigned long)+0xbe>
      WriteIndexRecord(oldParent, p3);    
    }
    else
    { uint32_t jx = p3.child;
      Record px = ReadIndexRecord(jx); 
      while(handle != px.sibling)
    18ce:	mov	r6, r9
    18d0:	b.n	17f6 <MTPStorage_SD::move(unsigned long, unsigned long)+0x76>
    18d2:	nop
    18d4:	.word	0x1fff14d8

000018d8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
      return tmp.store;
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    18d8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (open_file_ == i && mode_ == mode) return;
    18dc:	ldr	r3, [r0, #76]	; 0x4c
    18de:	cmp	r3, r1
      return tmp.store;
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    18e0:	sub	sp, #364	; 0x16c
    if (open_file_ == i && mode_ == mode) return;
    18e2:	beq.w	1a08 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x130>
    18e6:	mov	r8, r2
    char filename[256];
    uint16_t store = ConstructFilename(i, filename, 256);
    18e8:	mov.w	r3, #256	; 0x100
    18ec:	add	r2, sp, #104	; 0x68
    18ee:	mov	r5, r0
    18f0:	mov	r7, r1
    18f2:	bl	1460 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    18f6:	mov	r4, r0
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    18f8:	ldr	r0, [r5, #40]	; 0x28
    18fa:	cbz	r0, 190e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x36>
    18fc:	ldr	r3, [r0, #0]
    18fe:	ldr	r3, [r3, #64]	; 0x40
    1900:	blx	r3
    mtp_lock_storage(true);
    if(sd_isOpen(file_)) file_.close();
    1902:	cbz	r0, 190e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x36>
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    1904:	ldr	r0, [r5, #40]	; 0x28
    1906:	cbz	r0, 190e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x36>
    1908:	ldr	r3, [r0, #0]
    190a:	ldr	r3, [r3, #60]	; 0x3c
    190c:	blx	r3
    file_=sd_open(store,filename,mode);
    190e:	mov.w	r0, #1200	; 0x4b0
    1912:	mul.w	r0, r0, r4
    1916:	ldr	r1, [pc, #296]	; (1a40 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x168>)
    1918:	ldr	r2, [pc, #296]	; (1a44 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x16c>)
    191a:	ldr	r3, [r1, r0]
    191c:	ldr	r4, [r3, #0]
    191e:	cmp	r4, r2
    1920:	add	r1, r0
    1922:	uxtb.w	r3, r8
    1926:	bne.n	1a16 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13e>
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
    1928:	cmp	r3, #1
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    192a:	add	r2, sp, #104	; 0x68
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
    192c:	movw	r3, #16898	; 0x4202
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    1930:	add.w	r1, r1, #4
    1934:	it	ne
    1936:	movne	r3, #0
    1938:	add	r0, sp, #24
    193a:	bl	7508 <FsVolume::open(char const*, int)>
    193e:	ldr	r3, [sp, #96]	; 0x60
    1940:	cmp	r3, #0
    1942:	beq.n	1a20 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x148>
		if (file) return File(new SDFile(file));
    1944:	movs	r0, #104	; 0x68
    1946:	bl	a780 <operator new(unsigned int)>
    194a:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    194c:	ldrb.w	r6, [sp, #28]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    1950:	ldr	r3, [sp, #32]
    1952:	ldrb.w	r2, [sp, #36]	; 0x24
#endif

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    1956:	ldr	r0, [pc, #240]	; (1a48 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x170>)
    1958:	ldr	r1, [pc, #240]	; (1a4c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x174>)
    195a:	strb	r6, [r4, #24]
{
  public:
	constexpr Print() : write_error(0) {}
    195c:	mov.w	r9, #0
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1960:	mov.w	fp, #1000	; 0x3e8
    1964:	add.w	sl, sp, #40	; 0x28
    1968:	str	r0, [r4, #0]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    196a:	str	r1, [r4, #20]
    196c:	str	r3, [r4, #28]
    196e:	mov	r1, sl
    1970:	strb.w	r2, [r4, #32]
    1974:	add.w	r0, r4, #36	; 0x24
    1978:	strb.w	r9, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    197c:	strb.w	r9, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    1980:	str.w	r9, [r4, #16]
    1984:	str.w	fp, [r4, #8]
    1988:	bl	72c4 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    198c:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    198e:	ldr	r1, [pc, #192]	; (1a50 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x178>)
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    1990:	ldr	r2, [pc, #192]	; (1a54 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17c>)
    1992:	str.w	r9, [r4, #100]	; 0x64
    1996:	add	r6, sp, #4
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    1998:	adds	r3, #1
    199a:	str	r1, [r4, #20]
    199c:	str	r3, [r4, #16]
    199e:	str.w	fp, [r6, #8]
    19a2:	strb.w	r9, [r6, #4]
    19a6:	strb.w	r9, [r6, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
    19aa:	str	r4, [r6, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    19ac:	str	r2, [r6, #0]
    19ae:	ldr	r3, [pc, #168]	; (1a58 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x180>)
    19b0:	str	r3, [sp, #24]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
    19b2:	mov	r0, sl
    19b4:	bl	733c <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    19b8:	ldr	r2, [r5, #40]	; 0x28
    19ba:	cbz	r2, 19c4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xec>
    19bc:	ldr	r3, [r2, #16]
    19be:	subs	r3, #1
    19c0:	str	r3, [r2, #16]
    19c2:	cbz	r3, 19ec <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x114>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    19c4:	ldr	r3, [r6, #16]
    19c6:	str	r3, [r5, #40]	; 0x28
		if (f) f->refcount++;
    19c8:	cbz	r3, 19e0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x108>
    19ca:	ldr	r2, [r3, #16]
		return *this;
	}
	virtual ~File() {
    19cc:	ldr	r1, [pc, #132]	; (1a54 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17c>)
    19ce:	str	r1, [r6, #0]
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    19d0:	adds	r2, #1
    19d2:	str	r2, [r3, #16]
    19d4:	ldr	r2, [r6, #16]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    19d6:	cbz	r2, 19e0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x108>
    19d8:	ldr	r3, [r2, #16]
    19da:	subs	r3, #1
    19dc:	str	r3, [r2, #16]
    19de:	cbz	r3, 19fa <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x122>
    open_file_ = i;
    19e0:	str	r7, [r5, #76]	; 0x4c
    mode_ = mode;
    19e2:	str.w	r8, [r5, #72]	; 0x48
    mtp_lock_storage(false);
  }
    19e6:	add	sp, #364	; 0x16c
    19e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    19ec:	ldr	r0, [r5, #40]	; 0x28
    19ee:	cmp	r0, #0
    19f0:	beq.n	19c4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xec>
    19f2:	ldr	r3, [r0, #0]
    19f4:	ldr	r3, [r3, #32]
    19f6:	blx	r3
    19f8:	b.n	19c4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xec>
    19fa:	ldr	r0, [r6, #16]
    19fc:	cmp	r0, #0
    19fe:	beq.n	19e0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x108>
    1a00:	ldr	r3, [r0, #0]
    1a02:	ldr	r3, [r3, #32]
    1a04:	blx	r3
    1a06:	b.n	19e0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x108>
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    if (open_file_ == i && mode_ == mode) return;
    1a08:	ldr	r3, [r0, #72]	; 0x48
    1a0a:	cmp	r3, r2
    1a0c:	bne.w	18e6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xe>
    if(sd_isOpen(file_)) file_.close();
    file_=sd_open(store,filename,mode);
    open_file_ = i;
    mode_ = mode;
    mtp_lock_storage(false);
  }
    1a10:	add	sp, #364	; 0x16c
    1a12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (open_file_ == i && mode_ == mode) return;
    char filename[256];
    uint16_t store = ConstructFilename(i, filename, 256);
    mtp_lock_storage(true);
    if(sd_isOpen(file_)) file_.close();
    file_=sd_open(store,filename,mode);
    1a16:	add	r6, sp, #4
    1a18:	add	r2, sp, #104	; 0x68
    1a1a:	mov	r0, r6
    1a1c:	blx	r4
    1a1e:	b.n	19b8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xe0>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    1a20:	ldr	r3, [sp, #100]	; 0x64
    1a22:	cmp	r3, #0
    1a24:	bne.n	1944 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x6c>
    1a26:	add	r6, sp, #4
    1a28:	mov.w	r1, #1000	; 0x3e8

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    1a2c:	ldr	r2, [pc, #36]	; (1a54 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17c>)
    1a2e:	strb	r3, [r6, #4]
    1a30:	strb	r3, [r6, #12]
    1a32:	str	r3, [r6, #16]
    1a34:	str	r1, [r6, #8]
    1a36:	str	r2, [r6, #0]
    1a38:	add.w	sl, sp, #40	; 0x28
    1a3c:	b.n	19ae <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xd6>
    1a3e:	nop
    1a40:	.word	0x1fff14d8
    1a44:	.word	0x00000a89
    1a48:	.word	0x0000f814
    1a4c:	.word	0x0000f74c
    1a50:	.word	0x0000f794
    1a54:	.word	0x0000f7b8
    1a58:	.word	0x0000f770

00001a5c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    1a5c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1a60:	mov	r4, r0
    1a62:	mov	r7, r2
    OpenFileByIndex(handle);
    1a64:	movs	r2, #0
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    1a66:	mov	r5, r3
    1a68:	ldr	r6, [sp, #24]
    OpenFileByIndex(handle);
    1a6a:	bl	18d8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
	}
	virtual void flush() {
		if (f) f->flush();
	}
	virtual bool seek(uint32_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    1a6e:	ldr	r0, [r4, #40]	; 0x28
    1a70:	cbz	r0, 1a8e <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x32>
    1a72:	ldr	r3, [r0, #0]
    1a74:	mov	r1, r7
    1a76:	ldr	r3, [r3, #48]	; 0x30
    1a78:	movs	r2, #0
    1a7a:	blx	r3
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    1a7c:	ldr	r0, [r4, #40]	; 0x28
    1a7e:	cbz	r0, 1a8e <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x32>
    1a80:	ldr	r3, [r0, #0]
    1a82:	mov	r2, r6
    1a84:	mov	r1, r5
    1a86:	ldr	r3, [r3, #40]	; 0x28
    mtp_lock_storage(true);
    file_.seek(pos);
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }
    1a88:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1a8c:	bx	r3
    1a8e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1a92:	nop

00001a94 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>:
    }
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t storage, uint32_t parent,  bool folder, const char* filename)
  {
    1a94:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    1a98:	cmp.w	r2, #4294967295
    1a9c:	ite	ne
    1a9e:	movne	r6, r2
    1aa0:	moveq	r6, #0
    }
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t storage, uint32_t parent,  bool folder, const char* filename)
  {
    1aa2:	sub	sp, #476	; 0x1dc
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    1aa4:	mov	r1, r0
    1aa6:	mov	r2, r6
    }
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t storage, uint32_t parent,  bool folder, const char* filename)
  {
    1aa8:	mov	r4, r0
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    1aaa:	add	r0, sp, #56	; 0x38
    }
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t storage, uint32_t parent,  bool folder, const char* filename)
  {
    1aac:	mov	r7, r3
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    1aae:	bl	132c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record r;
    if (strlen(filename) > 62) return 0;
    1ab2:	ldr	r0, [sp, #504]	; 0x1f8
    1ab4:	bl	c380 <strlen>
    1ab8:	cmp	r0, #62	; 0x3e
    1aba:	bls.n	1ac6 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x32>
    1abc:	movs	r5, #0
    else 
    {
      OpenFileByIndex(ret, FILE_WRITE);
    }
    return ret;
  }
    1abe:	mov	r0, r5
    1ac0:	add	sp, #476	; 0x1dc
    1ac2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    1ac6:	adds	r2, r0, #1
    1ac8:	ldr	r1, [sp, #504]	; 0x1f8
    1aca:	add	r0, sp, #152	; 0x98
    1acc:	bl	8f84 <memcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    1ad0:	ldr	r5, [r4, #80]	; 0x50
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.store = p.store;
    1ad2:	ldrh.w	r0, [sp, #70]	; 0x46
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    1ad6:	ldr	r3, [sp, #60]	; 0x3c
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.store = p.store;
    1ad8:	strh.w	r0, [sp, #150]	; 0x96
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    1adc:	adds	r2, r5, #1
    1ade:	str	r2, [r4, #80]	; 0x50
    WriteIndexRecord(new_record, r);
    1ae0:	mov	r1, r5
    1ae2:	add	r2, sp, #136	; 0x88
    1ae4:	mov	r0, r4
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    1ae6:	mov.w	r9, #0
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    1aea:	mov.w	r8, #1
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.store = p.store;
    r.parent = parent;
    1aee:	str	r6, [sp, #136]	; 0x88
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    1af0:	strb.w	r7, [sp, #148]	; 0x94
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    1af4:	str	r3, [sp, #144]	; 0x90
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    1af6:	str.w	r9, [sp, #140]	; 0x8c
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    1afa:	strb.w	r8, [sp, #149]	; 0x95
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    1afe:	bl	1240 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    1b02:	add	r2, sp, #56	; 0x38
    1b04:	mov	r1, r6
    1b06:	mov	r0, r4
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    1b08:	str	r5, [sp, #60]	; 0x3c
    WriteIndexRecord(parent, p);
    1b0a:	bl	1240 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    1b0e:	cbnz	r7, 1b22 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x8e>
      sd_mkdir(store,filename);
      mtp_lock_storage(false);
    } 
    else 
    {
      OpenFileByIndex(ret, FILE_WRITE);
    1b10:	mov	r0, r4
    1b12:	mov	r2, r8
    1b14:	mov	r1, r5
    1b16:	bl	18d8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    }
    return ret;
  }
    1b1a:	mov	r0, r5
    1b1c:	add	sp, #476	; 0x1dc
    1b1e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    if (folder) 
    {
      char filename[256];
      uint16_t store =ConstructFilename(ret, filename, 256);
    1b22:	add	r2, sp, #216	; 0xd8
    1b24:	mov.w	r3, #256	; 0x100
    1b28:	mov	r1, r5
    1b2a:	mov	r0, r4
    1b2c:	bl	1460 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      mtp_lock_storage(true);
      sd_mkdir(store,filename);
    1b30:	mov.w	r3, #1200	; 0x4b0
    1b34:	mul.w	r0, r3, r0
    1b38:	ldr	r3, [pc, #88]	; (1b94 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x100>)
    1b3a:	ldr	r1, [pc, #92]	; (1b98 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x104>)
    1b3c:	ldr	r2, [r3, r0]
    1b3e:	ldr	r2, [r2, #8]
    1b40:	cmp	r2, r1
    1b42:	add	r0, r3
    1b44:	bne.n	1b8c <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0xf8>
    1b46:	ldr.w	r4, [r0, #1148]	; 0x47c
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    1b4a:	cbz	r4, 1b68 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0xd4>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    1b4c:	mov	r3, r8
    1b4e:	add	r2, sp, #216	; 0xd8
    1b50:	add.w	r1, r4, #1088	; 0x440
    1b54:	mov	r0, sp
    1b56:	strb.w	r9, [sp]
    1b5a:	strb.w	r9, [sp, #1]
    1b5e:	strb.w	r9, [sp, #2]
    1b62:	bl	5b14 <FatFile::mkdir(FatFile*, char const*, bool)>
    1b66:	b.n	1abe <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x2a>
    1b68:	ldr.w	r1, [r0, #1152]	; 0x480
    1b6c:	cmp	r1, #0
    1b6e:	beq.n	1abe <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x2a>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const ExChar_t* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    1b70:	mov	r3, r8
    1b72:	add	r2, sp, #216	; 0xd8
    1b74:	add.w	r1, r1, #1088	; 0x440
    1b78:	mov	r0, sp
    1b7a:	strb.w	r4, [sp, #49]	; 0x31
    1b7e:	strb.w	r4, [sp, #50]	; 0x32
    1b82:	strb.w	r4, [sp, #51]	; 0x33
    1b86:	bl	5304 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    1b8a:	b.n	1abe <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x2a>
    1b8c:	add	r1, sp, #216	; 0xd8
    1b8e:	blx	r2
    1b90:	b.n	1abe <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x2a>
    1b92:	nop
    1b94:	.word	0x1fff14d8
    1b98:	.word	0x00000931

00001b9c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>:
      AppendIndexRecord(r);
    }
  }

  void MTPStorage_SD::ScanDir(uint32_t storage, uint32_t i) 
  { Record record = ReadIndexRecord(i);
    1b9c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ba0:	sub	sp, #160	; 0xa0
    1ba2:	mov	r1, r0
    1ba4:	mov	r4, r0
    1ba6:	mov	r0, sp
    1ba8:	mov	r6, r2
    1baa:	bl	132c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    1bae:	ldrb.w	r3, [sp, #12]
    1bb2:	cbz	r3, 1bba <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1e>
    1bb4:	ldrb.w	r5, [sp, #13]
    1bb8:	cbz	r5, 1bc0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x24>
      }
      record.scanned = true;
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }
    1bba:	add	sp, #160	; 0xa0
    1bbc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }

  void MTPStorage_SD::ScanDir(uint32_t storage, uint32_t i) 
  { Record record = ReadIndexRecord(i);
    if (record.isdir && !record.scanned) {
      OpenFileByIndex(i);
    1bc0:	mov	r0, r4
    1bc2:	mov	r2, r5
    1bc4:	mov	r1, r6
    1bc6:	bl	18d8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1bca:	ldr	r0, [r4, #40]	; 0x28
    1bcc:	cmp	r0, #0
    1bce:	beq.n	1bba <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1e>
    1bd0:	ldr	r3, [r0, #0]
    1bd2:	ldr	r3, [r3, #64]	; 0x40
    1bd4:	blx	r3
      if (!sd_isOpen(file_)) return;
    1bd6:	cmp	r0, #0
    1bd8:	beq.n	1bba <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1e>
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    1bda:	ldr	r7, [pc, #272]	; (1cec <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x150>)
    1bdc:	mov.w	r8, #1000	; 0x3e8
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    1be0:	ldr	r1, [r4, #40]	; 0x28
    1be2:	cmp	r1, #0
    1be4:	beq.n	1c9a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xfe>
    1be6:	ldr	r3, [r1, #0]
    1be8:	movs	r2, #0
    1bea:	ldr	r3, [r3, #76]	; 0x4c
    1bec:	add	r0, sp, #80	; 0x50
    1bee:	blx	r3
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1bf0:	ldr	r2, [r4, #60]	; 0x3c
    1bf2:	cbz	r2, 1c06 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6a>
    1bf4:	ldr	r3, [r2, #16]
    1bf6:	subs	r3, #1
    1bf8:	str	r3, [r2, #16]
    1bfa:	cbnz	r3, 1c06 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6a>
    1bfc:	ldr	r0, [r4, #60]	; 0x3c
    1bfe:	cbz	r0, 1c06 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6a>
    1c00:	ldr	r3, [r0, #0]
    1c02:	ldr	r3, [r3, #32]
    1c04:	blx	r3
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    1c06:	ldr	r3, [sp, #96]	; 0x60
    1c08:	str	r3, [r4, #60]	; 0x3c
		if (f) f->refcount++;
    1c0a:	cbz	r3, 1c2a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x8e>
    1c0c:	ldr	r2, [r3, #16]
    1c0e:	adds	r2, #1
    1c10:	str	r2, [r3, #16]
    1c12:	ldr	r2, [sp, #96]	; 0x60
		return *this;
	}
	virtual ~File() {
    1c14:	str	r7, [sp, #80]	; 0x50
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1c16:	cbz	r2, 1c2a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x8e>
    1c18:	ldr	r3, [r2, #16]
    1c1a:	subs	r3, #1
    1c1c:	str	r3, [r2, #16]
    1c1e:	cbnz	r3, 1c2a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x8e>
    1c20:	ldr	r0, [sp, #96]	; 0x60
    1c22:	cbz	r0, 1c2a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x8e>
    1c24:	ldr	r3, [r0, #0]
    1c26:	ldr	r3, [r3, #32]
    1c28:	blx	r3
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1c2a:	ldr	r0, [r4, #60]	; 0x3c
    1c2c:	cmp	r0, #0
    1c2e:	beq.n	1cbc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x120>
    1c30:	ldr	r3, [r0, #0]
    1c32:	ldr	r3, [r3, #64]	; 0x40
    1c34:	blx	r3
      int sibling = 0;
      while (true) 
      { mtp_lock_storage(true);
        child_=file_.openNextFile();
        mtp_lock_storage(false);
        if(!sd_isOpen(child_)) break;
    1c36:	cmp	r0, #0
    1c38:	beq.n	1cbc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x120>
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    1c3a:	ldr	r0, [r4, #60]	; 0x3c

        Record r;
        r.store = record.store;
    1c3c:	ldrh.w	r3, [sp, #14]
        r.parent = i;
    1c40:	str	r6, [sp, #80]	; 0x50
        r.sibling = sibling;
    1c42:	str	r5, [sp, #88]	; 0x58
        child_=file_.openNextFile();
        mtp_lock_storage(false);
        if(!sd_isOpen(child_)) break;

        Record r;
        r.store = record.store;
    1c44:	strh.w	r3, [sp, #94]	; 0x5e
    1c48:	cmp	r0, #0
    1c4a:	beq.n	1cac <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x110>
    1c4c:	ldr	r3, [r0, #0]
    1c4e:	ldr	r3, [r3, #72]	; 0x48
    1c50:	blx	r3
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
    1c52:	strb.w	r0, [sp, #92]	; 0x5c
        r.child = r.isdir ? 0 : child_.size();
    1c56:	cmp	r0, #0
    1c58:	beq.n	1cd4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x138>
    1c5a:	ldr	r0, [r4, #60]	; 0x3c
    1c5c:	movs	r3, #0
    1c5e:	str	r3, [sp, #84]	; 0x54
        r.scanned = false;
    1c60:	movs	r3, #0
    1c62:	strb.w	r3, [sp, #93]	; 0x5d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    1c66:	cmp	r0, #0
    1c68:	beq.n	1ce6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x14a>
    1c6a:	ldr	r3, [r0, #0]
    1c6c:	ldr	r3, [r3, #68]	; 0x44
    1c6e:	blx	r3
    1c70:	mov	r1, r0
        sd_getName(child_,r.name,64);
    1c72:	add	r0, sp, #96	; 0x60
    1c74:	bl	c2a0 <strcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    1c78:	ldr	r5, [r4, #80]	; 0x50
    1c7a:	adds	r3, r5, #1
    WriteIndexRecord(new_record, r);
    1c7c:	mov	r0, r4
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    1c7e:	str	r3, [r4, #80]	; 0x50
    WriteIndexRecord(new_record, r);
    1c80:	mov	r1, r5
    1c82:	add	r2, sp, #80	; 0x50
    1c84:	bl	1240 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    1c88:	ldr	r0, [r4, #60]	; 0x3c
    1c8a:	cmp	r0, #0
    1c8c:	beq.n	1be0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x44>
    1c8e:	ldr	r3, [r0, #0]
    1c90:	ldr	r3, [r3, #60]	; 0x3c
    1c92:	blx	r3
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    1c94:	ldr	r1, [r4, #40]	; 0x28
    1c96:	cmp	r1, #0
    1c98:	bne.n	1be6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x4a>
    1c9a:	strb.w	r1, [sp, #84]	; 0x54
    1c9e:	str.w	r8, [sp, #88]	; 0x58
    1ca2:	strb.w	r1, [sp, #92]	; 0x5c
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    1ca6:	str	r7, [sp, #80]	; 0x50
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
    1ca8:	str	r1, [sp, #96]	; 0x60
    1caa:	b.n	1bf0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x54>

        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
    1cac:	strb.w	r0, [sp, #92]	; 0x5c
        r.child = r.isdir ? 0 : child_.size();
    1cb0:	movs	r3, #0
    1cb2:	str	r3, [sp, #84]	; 0x54
        r.scanned = false;
    1cb4:	strb.w	r3, [sp, #93]	; 0x5d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    1cb8:	ldr	r1, [pc, #52]	; (1cf0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x154>)
    1cba:	b.n	1c72 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xd6>
        sd_getName(child_,r.name,64);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    1cbc:	movs	r3, #1
      record.child = sibling;
      WriteIndexRecord(i, record);
    1cbe:	mov	r2, sp
    1cc0:	mov	r1, r6
    1cc2:	mov	r0, r4
        sd_getName(child_,r.name,64);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
      record.child = sibling;
    1cc4:	str	r5, [sp, #4]
        r.scanned = false;
        sd_getName(child_,r.name,64);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    1cc6:	strb.w	r3, [sp, #13]
      record.child = sibling;
      WriteIndexRecord(i, record);
    1cca:	bl	1240 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    }
  }
    1cce:	add	sp, #160	; 0xa0
    1cd0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	virtual uint32_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
    1cd4:	ldr	r0, [r4, #60]	; 0x3c
    1cd6:	cmp	r0, #0
    1cd8:	beq.n	1cb0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x114>
    1cda:	ldr	r3, [r0, #0]
    1cdc:	ldr	r3, [r3, #56]	; 0x38
    1cde:	blx	r3
    1ce0:	mov	r3, r0
    1ce2:	ldr	r0, [r4, #60]	; 0x3c
    1ce4:	b.n	1c5e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xc2>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    1ce6:	ldr	r1, [pc, #8]	; (1cf0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x154>)
    1ce8:	b.n	1c72 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xd6>
    1cea:	nop
    1cec:	.word	0x0000f7b8
    1cf0:	.word	0x0000f99c

00001cf4 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.45] [clone .constprop.48]>:

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t storage)
  { if (index_generated) return; 
    1cf4:	ldrb.w	r3, [r0, #84]	; 0x54
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t storage) 
  { if (all_scanned_) return;
    all_scanned_ = true;
    1cf8:	movs	r2, #1
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t storage) 
    1cfa:	push	{r4, r5, r6, lr}
    1cfc:	mov	r5, r0
  { if (all_scanned_) return;
    all_scanned_ = true;
    1cfe:	strb.w	r2, [r0, #85]	; 0x55
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t storage) 
    1d02:	mov	r6, r1

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t storage)
  { if (index_generated) return; 
    1d04:	cbz	r3, 1d20 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.45] [clone .constprop.48]+0x2c>
  void MTPStorage_SD::ScanAll(uint32_t storage) 
  { if (all_scanned_) return;
    all_scanned_ = true;

    GenerateIndex(storage);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(storage,i);
    1d06:	ldr	r3, [r5, #80]	; 0x50
    1d08:	cbz	r3, 1d1e <MTPStorage_SD::ScanAll(unsigned long) [clone .part.45] [clone .constprop.48]+0x2a>
    1d0a:	movs	r4, #0
    1d0c:	mov	r2, r4
    1d0e:	mov	r1, r6
    1d10:	mov	r0, r5
    1d12:	bl	1b9c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
    1d16:	ldr	r3, [r5, #80]	; 0x50
    1d18:	adds	r4, #1
    1d1a:	cmp	r3, r4
    1d1c:	bhi.n	1d0c <MTPStorage_SD::ScanAll(unsigned long) [clone .part.45] [clone .constprop.48]+0x18>
    1d1e:	pop	{r4, r5, r6, pc}
    1d20:	bl	1274 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]>
    1d24:	b.n	1d06 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.45] [clone .constprop.48]+0x12>
    1d26:	nop

00001d28 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>:
  void  MTPStorage_SD::setStorageNumbers(const char **str, int num) {sd_str = str; num_storage=num;}
  uint32_t MTPStorage_SD::getNumStorage() {return num_storage;}
  const char * MTPStorage_SD::getStorageName(uint32_t storage) {return sd_str[storage-1];}

  void MTPStorage_SD::StartGetObjectHandles(uint32_t storage, uint32_t parent) 
  { 
    1d28:	push	{r4, r5, lr}

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t storage)
  { if (index_generated) return; 
    1d2a:	ldrb.w	r3, [r0, #84]	; 0x54
  void  MTPStorage_SD::setStorageNumbers(const char **str, int num) {sd_str = str; num_storage=num;}
  uint32_t MTPStorage_SD::getNumStorage() {return num_storage;}
  const char * MTPStorage_SD::getStorageName(uint32_t storage) {return sd_str[storage-1];}

  void MTPStorage_SD::StartGetObjectHandles(uint32_t storage, uint32_t parent) 
  { 
    1d2e:	sub	sp, #92	; 0x5c
    1d30:	mov	r4, r0
    1d32:	mov	r5, r2

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t storage)
  { if (index_generated) return; 
    1d34:	cbz	r3, 1d74 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x4c>
  const char * MTPStorage_SD::getStorageName(uint32_t storage) {return sd_str[storage-1];}

  void MTPStorage_SD::StartGetObjectHandles(uint32_t storage, uint32_t parent) 
  { 
    GenerateIndex(storage);
    if (parent) 
    1d36:	cbz	r5, 1d60 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x38>
    { if (parent == 0xFFFFFFFF) parent = storage-1; // As per initizalization
    1d38:	adds	r3, r5, #1
    1d3a:	it	eq
    1d3c:	addeq.w	r5, r1, #4294967295

      ScanDir(storage, parent);
    1d40:	mov	r2, r5
    1d42:	mov	r0, r4
    1d44:	bl	1b9c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      follow_sibling_ = true;
    1d48:	movs	r3, #1
    1d4a:	strb.w	r3, [r4, #92]	; 0x5c
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    1d4e:	mov	r2, r5
    1d50:	mov	r1, r4
    1d52:	add	r0, sp, #8
    1d54:	bl	132c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1d58:	ldr	r3, [sp, #12]
    1d5a:	str	r3, [r4, #88]	; 0x58
    { 
      ScanAll(storage);
      follow_sibling_ = false;
      next_ = 1;
    }
  }
    1d5c:	add	sp, #92	; 0x5c
    1d5e:	pop	{r4, r5, pc}
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t storage) 
  { if (all_scanned_) return;
    1d60:	ldrb.w	r3, [r4, #85]	; 0x55
    1d64:	cbz	r3, 1d7e <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x56>
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { 
      ScanAll(storage);
      follow_sibling_ = false;
    1d66:	movs	r2, #0
      next_ = 1;
    1d68:	movs	r3, #1
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { 
      ScanAll(storage);
      follow_sibling_ = false;
    1d6a:	strb.w	r2, [r4, #92]	; 0x5c
      next_ = 1;
    1d6e:	str	r3, [r4, #88]	; 0x58
    }
  }
    1d70:	add	sp, #92	; 0x5c
    1d72:	pop	{r4, r5, pc}
    1d74:	str	r1, [sp, #4]
    1d76:	bl	1274 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]>
    1d7a:	ldr	r1, [sp, #4]
    1d7c:	b.n	1d36 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0xe>
    1d7e:	mov	r0, r4
    1d80:	bl	1cf4 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.45] [clone .constprop.48]>
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { 
      ScanAll(storage);
      follow_sibling_ = false;
    1d84:	movs	r2, #0
      next_ = 1;
    1d86:	movs	r3, #1
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { 
      ScanAll(storage);
      follow_sibling_ = false;
    1d88:	strb.w	r2, [r4, #92]	; 0x5c
      next_ = 1;
    1d8c:	str	r3, [r4, #88]	; 0x58
    1d8e:	b.n	1d70 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x48>

00001d90 <MTPD::GetNumObjects(unsigned long, unsigned long)>:
    writestring(name);  // storage descriptor
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    1d90:	push	{r4, r5, r6, lr}
    1d92:	mov	r5, r0
    storage_->StartGetObjectHandles(storage, parent);
    1d94:	ldr	r0, [r0, #0]
    1d96:	ldr	r3, [r0, #0]
    1d98:	ldr	r3, [r3, #32]
    writestring(name);  // storage descriptor
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    1d9a:	mov	r6, r1
    storage_->StartGetObjectHandles(storage, parent);
    int num = 0;
    1d9c:	movs	r4, #0
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(storage, parent);
    1d9e:	blx	r3
    1da0:	b.n	1da4 <MTPD::GetNumObjects(unsigned long, unsigned long)+0x14>
    int num = 0;
    while (storage_->GetNextObjectHandle(storage)) num++;
    1da2:	adds	r4, #1
    1da4:	ldr	r0, [r5, #0]
    1da6:	ldr	r3, [r0, #0]
    1da8:	mov	r1, r6
    1daa:	ldr	r3, [r3, #36]	; 0x24
    1dac:	blx	r3
    1dae:	cmp	r0, #0
    1db0:	bne.n	1da2 <MTPD::GetNumObjects(unsigned long, unsigned long)+0x12>
    return num;
  }
    1db2:	mov	r0, r4
    1db4:	pop	{r4, r5, r6, pc}
    1db6:	nop

00001db8 <MTPD::get_buffer()>:
    }

#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)

//  usb_packet_t *data_buffer_ = NULL;
  void MTPD::get_buffer() {
    1db8:	push	{r4, lr}
    1dba:	mov	r4, r0
    1dbc:	ldr	r0, [r4, #4]
    while (!data_buffer_) {
    1dbe:	cbnz	r0, 1dc8 <MTPD::get_buffer()+0x10>
      data_buffer_ = usb_malloc();
    1dc0:	bl	9778 <usb_malloc>
    1dc4:	str	r0, [r4, #4]
      if (!data_buffer_) mtp_yield();
    1dc6:	cbz	r0, 1dca <MTPD::get_buffer()+0x12>
    1dc8:	pop	{r4, pc}
    1dca:	bl	1138 <mtp_yield()>
    1dce:	b.n	1dbc <MTPD::get_buffer()+0x4>

00001dd0 <MTPD::write(char const*, int) [clone .part.2]>:
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    1dd0:	cmp	r2, #0
    1dd2:	ble.n	1e32 <MTPD::write(char const*, int) [clone .part.2]+0x62>
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    1dd4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    1dd8:	mov.w	r9, #0
    1ddc:	mov	r6, r2
    1dde:	mov	r7, r1
    1de0:	mov	r5, r0
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    1de2:	mov	r8, r9
    1de4:	b.n	1dea <MTPD::write(char const*, int) [clone .part.2]+0x1a>
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    1de6:	cmp	r6, r9
    1de8:	ble.n	1e2e <MTPD::write(char const*, int) [clone .part.2]+0x5e>
        get_buffer();
    1dea:	mov	r0, r5
    1dec:	bl	1db8 <MTPD::get_buffer()>
        int avail = sizeof(data_buffer_->buf) - data_buffer_->len;
    1df0:	ldr	r3, [r5, #4]
    1df2:	ldrh.w	r0, [r3], #8
    1df6:	rsb	r2, r9, r6
    1dfa:	rsb	r4, r0, #64	; 0x40
    1dfe:	cmp	r4, r2
    1e00:	it	ge
    1e02:	movge	r4, r2
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
    1e04:	add.w	r1, r7, r9
    1e08:	add	r0, r3
    1e0a:	mov	r2, r4
    1e0c:	bl	8f84 <memcpy>
        data_buffer_->len += to_copy;
    1e10:	ldr	r1, [r5, #4]
    1e12:	ldrh	r3, [r1, #0]
    1e14:	add	r3, r4
    1e16:	uxth	r3, r3
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    1e18:	cmp	r3, #64	; 0x40
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
    1e1a:	add	r9, r4
        int avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
        data_buffer_->len += to_copy;
    1e1c:	strh	r3, [r1, #0]
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    1e1e:	bne.n	1de6 <MTPD::write(char const*, int) [clone .part.2]+0x16>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
    1e20:	movs	r0, #4
    1e22:	bl	9974 <usb_tx>
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    1e26:	cmp	r6, r9
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    1e28:	str.w	r8, [r5, #4]
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    1e2c:	bgt.n	1dea <MTPD::write(char const*, int) [clone .part.2]+0x1a>
    1e2e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1e32:	bx	lr

00001e34 <MTPD::writestring(char const*)>:
  void MTPD::write8 (uint8_t  x) { write((char*)&x, sizeof(x)); }
  void MTPD::write16(uint16_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    1e34:	push	{r4, r5, lr}
    if (*str) 
    1e36:	ldrb	r3, [r1, #0]
  void MTPD::write8 (uint8_t  x) { write((char*)&x, sizeof(x)); }
  void MTPD::write16(uint16_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    1e38:	sub	sp, #12
    1e3a:	mov	r4, r0
    if (*str) 
    1e3c:	cbz	r3, 1e98 <MTPD::writestring(char const*)+0x64>
    { write8(strlen(str) + 1);
    1e3e:	mov	r0, r1
    1e40:	mov	r5, r1
    1e42:	bl	c380 <strlen>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1e46:	ldrb	r1, [r4, #8]
    1e48:	adds	r0, #1
    1e4a:	strb.w	r0, [sp, #3]
    1e4e:	cbz	r1, 1eaa <MTPD::writestring(char const*)+0x76>
      write_length_ += len;
    1e50:	ldr	r3, [r4, #12]
    1e52:	adds	r3, #1
    1e54:	str	r3, [r4, #12]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1e56:	ldrb	r2, [r5, #0]
    1e58:	cbnz	r2, 1e68 <MTPD::writestring(char const*)+0x34>
    1e5a:	b.n	1e90 <MTPD::writestring(char const*)+0x5c>
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    1e5c:	ldr	r3, [r4, #12]
    1e5e:	adds	r3, #2
    1e60:	str	r3, [r4, #12]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1e62:	ldrb.w	r2, [r5, #1]!
    1e66:	cbz	r2, 1e86 <MTPD::writestring(char const*)+0x52>
    1e68:	strh.w	r2, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1e6c:	cmp	r1, #0
    1e6e:	bne.n	1e5c <MTPD::writestring(char const*)+0x28>
    1e70:	movs	r2, #2
    1e72:	add.w	r1, sp, #6
    1e76:	mov	r0, r4
    1e78:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1e7c:	ldrb.w	r2, [r5, #1]!
    1e80:	ldrb	r1, [r4, #8]
    1e82:	cmp	r2, #0
    1e84:	bne.n	1e68 <MTPD::writestring(char const*)+0x34>
    1e86:	movs	r3, #0
    1e88:	strh.w	r3, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1e8c:	cbz	r1, 1ece <MTPD::writestring(char const*)+0x9a>
    1e8e:	ldr	r3, [r4, #12]
      write_length_ += len;
    1e90:	adds	r3, #2
    1e92:	str	r3, [r4, #12]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    1e94:	add	sp, #12
    1e96:	pop	{r4, r5, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1e98:	ldrb	r2, [r0, #8]
    1e9a:	strb.w	r3, [sp, #2]
    1e9e:	cbz	r2, 1ec0 <MTPD::writestring(char const*)+0x8c>
      write_length_ += len;
    1ea0:	ldr	r3, [r0, #12]
    1ea2:	adds	r3, #1
    1ea4:	str	r3, [r0, #12]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    1ea6:	add	sp, #12
    1ea8:	pop	{r4, r5, pc}
    1eaa:	movs	r2, #1
    1eac:	add.w	r1, sp, #3
    1eb0:	mov	r0, r4
    1eb2:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1eb6:	ldrb	r2, [r5, #0]
    1eb8:	ldrb	r1, [r4, #8]
    1eba:	cmp	r2, #0
    1ebc:	bne.n	1e68 <MTPD::writestring(char const*)+0x34>
    1ebe:	b.n	1e86 <MTPD::writestring(char const*)+0x52>
    1ec0:	movs	r2, #1
    1ec2:	add.w	r1, sp, #2
    1ec6:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    } else 
    { write8(0);
    }
  }
    1eca:	add	sp, #12
    1ecc:	pop	{r4, r5, pc}
    1ece:	mov	r0, r4
    1ed0:	movs	r2, #2
    1ed2:	add	r1, sp, #4
    1ed4:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    1ed8:	add	sp, #12
    1eda:	pop	{r4, r5, pc}

00001edc <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>:
        writestring(MTP_NAME);
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    1edc:	push	{r4, r5, r6, lr}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1ede:	ldrb	r3, [r0, #8]
        writestring(MTP_NAME);
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    1ee0:	sub	sp, #8
    1ee2:	mov	r4, r0
    1ee4:	mov	r5, r1
    1ee6:	strh.w	r1, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1eea:	cbz	r3, 1f24 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x48>
      write_length_ += len;
    1eec:	ldr	r3, [r0, #12]
    1eee:	movw	r2, #65535	; 0xffff
    1ef2:	adds	r3, #2
    1ef4:	str	r3, [r0, #12]
    1ef6:	strh.w	r2, [sp, #6]
    1efa:	adds	r3, #2
    1efc:	movs	r2, #0
    1efe:	str	r3, [r4, #12]
    1f00:	strb.w	r2, [sp, #2]
    1f04:	adds	r3, #1
    1f06:	str	r3, [r4, #12]
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    1f08:	movw	r3, #54274	; 0xd402
    1f0c:	cmp	r5, r3
    1f0e:	beq.n	1f60 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x84>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1f10:	ldrb	r3, [r4, #8]
    1f12:	movs	r2, #0
    1f14:	strb.w	r2, [sp, #3]
    1f18:	cbz	r3, 1f7c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xa0>
      write_length_ += len;
    1f1a:	ldr	r3, [r4, #12]
    1f1c:	adds	r3, #1
    1f1e:	str	r3, [r4, #12]
        write8(0);       // read-only
        GetDevicePropValue(prop);
        GetDevicePropValue(prop);
        write8(0);       // no form
    }
  }
    1f20:	add	sp, #8
    1f22:	pop	{r4, r5, r6, pc}
    1f24:	movs	r2, #2
    1f26:	add	r1, sp, #4
    1f28:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    1f2c:	ldrb	r6, [r4, #8]
    1f2e:	movw	r3, #65535	; 0xffff
    1f32:	strh.w	r3, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1f36:	cbnz	r6, 1f8c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb0>
    1f38:	movs	r2, #2
    1f3a:	add.w	r1, sp, #6
    1f3e:	mov	r0, r4
    1f40:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    1f44:	ldrb	r3, [r4, #8]
    1f46:	strb.w	r6, [sp, #2]
    1f4a:	cbnz	r3, 1f90 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb4>
    1f4c:	movs	r2, #1
    1f4e:	add.w	r1, sp, #2
    1f52:	mov	r0, r4
    1f54:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    1f58:	movw	r3, #54274	; 0xd402
    1f5c:	cmp	r5, r3
    1f5e:	bne.n	1f10 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x34>
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    1f60:	ldr	r1, [pc, #48]	; (1f94 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb8>)
    1f62:	mov	r0, r4
    1f64:	bl	1e34 <MTPD::writestring(char const*)>
    1f68:	ldr	r1, [pc, #40]	; (1f94 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb8>)
    1f6a:	mov	r0, r4
    1f6c:	bl	1e34 <MTPD::writestring(char const*)>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1f70:	ldrb	r3, [r4, #8]
    1f72:	movs	r2, #0
    1f74:	strb.w	r2, [sp, #3]
    1f78:	cmp	r3, #0
    1f7a:	bne.n	1f1a <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x3e>
    1f7c:	mov	r0, r4
    1f7e:	movs	r2, #1
    1f80:	add.w	r1, sp, #3
    1f84:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
        write8(0);       // read-only
        GetDevicePropValue(prop);
        GetDevicePropValue(prop);
        write8(0);       // no form
    }
  }
    1f88:	add	sp, #8
    1f8a:	pop	{r4, r5, r6, pc}
    1f8c:	ldr	r3, [r4, #12]
    1f8e:	b.n	1efa <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x1e>
    1f90:	ldr	r3, [r4, #12]
    1f92:	b.n	1f04 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x28>
    1f94:	.word	0x0000f9d4

00001f98 <MTPD::WriteDescriptor()>:
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    1f98:	push	{r4, r5, r6, r7, lr}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1f9a:	ldrb	r3, [r0, #8]
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    1f9c:	sub	sp, #44	; 0x2c
    1f9e:	movs	r5, #100	; 0x64
    1fa0:	mov	r4, r0
    1fa2:	strh.w	r5, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1fa6:	cmp	r3, #0
    1fa8:	beq.n	208a <MTPD::WriteDescriptor()+0xf2>
      write_length_ += len;
    1faa:	ldr	r3, [r0, #12]
    1fac:	movs	r2, #6
    1fae:	adds	r3, #2
    1fb0:	str	r3, [r0, #12]
    1fb2:	str	r2, [sp, #20]
    1fb4:	adds	r3, #4
    1fb6:	movs	r2, #100	; 0x64
    1fb8:	str	r3, [r4, #12]
    1fba:	strh.w	r2, [sp, #4]
    1fbe:	adds	r3, #2
    1fc0:	str	r3, [r4, #12]
  void MTPD::WriteDescriptor() {
    write16(100);  // MTP version
    write32(6);    // MTP extension
//    write32(0xFFFFFFFFUL);    // MTP extension
    write16(100);  // MTP version
    writestring("microsoft.com: 1.0;");
    1fc2:	ldr	r1, [pc, #464]	; (2194 <MTPD::WriteDescriptor()+0x1fc>)
    1fc4:	mov	r0, r4
    1fc6:	bl	1e34 <MTPD::writestring(char const*)>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1fca:	ldrb	r3, [r4, #8]
    1fcc:	movs	r2, #0
    1fce:	strh.w	r2, [sp, #2]
    1fd2:	cmp	r3, #0
    1fd4:	beq.w	214c <MTPD::WriteDescriptor()+0x1b4>
      write_length_ += len;
    1fd8:	ldr	r3, [r4, #12]
    1fda:	movs	r2, #18
    1fdc:	adds	r3, #2
    1fde:	str	r3, [r4, #12]
    1fe0:	str	r2, [sp, #16]
    1fe2:	adds	r3, #4
    1fe4:	str	r3, [r4, #12]
    1fe6:	movs	r6, #1
    1fe8:	ldr	r5, [pc, #428]	; (2198 <MTPD::WriteDescriptor()+0x200>)
    1fea:	movw	r3, #4097	; 0x1001
    1fee:	add.w	r7, r5, #34	; 0x22
    1ff2:	b.n	2004 <MTPD::WriteDescriptor()+0x6c>
    1ff4:	ldr	r3, [r4, #12]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
      write32(supported_op_num);
      for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    1ff6:	cmp	r7, r5
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    1ff8:	add.w	r3, r3, #2
    1ffc:	str	r3, [r4, #12]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
      write32(supported_op_num);
      for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    1ffe:	beq.n	201c <MTPD::WriteDescriptor()+0x84>
    2000:	ldrh.w	r3, [r5, #2]!
    2004:	strh.w	r3, [sp, #8]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2008:	cmp	r6, #0
    200a:	bne.n	1ff4 <MTPD::WriteDescriptor()+0x5c>
    200c:	movs	r2, #2
    200e:	add	r1, sp, #8
    2010:	mov	r0, r4
    2012:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
      write32(supported_op_num);
      for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    2016:	cmp	r7, r5
    2018:	ldrb	r6, [r4, #8]
    201a:	bne.n	2000 <MTPD::WriteDescriptor()+0x68>
    201c:	movs	r3, #0
    201e:	str	r3, [sp, #36]	; 0x24
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2020:	cmp	r6, #0
    2022:	beq.n	20be <MTPD::WriteDescriptor()+0x126>
      write_length_ += len;
    2024:	ldr	r3, [r4, #12]
    2026:	movs	r2, #1
    2028:	adds	r3, #4
    202a:	str	r3, [r4, #12]
    202c:	str	r2, [sp, #32]
    202e:	adds	r3, #4
    2030:	movw	r2, #54274	; 0xd402
    2034:	str	r3, [r4, #12]
    2036:	strh.w	r2, [sp, #14]
    203a:	adds	r3, #2
    203c:	movs	r2, #0
    203e:	str	r3, [r4, #12]
    2040:	str	r2, [sp, #28]
    2042:	adds	r3, #4
    2044:	movs	r2, #2
    2046:	str	r3, [r4, #12]
    2048:	str	r2, [sp, #24]
    204a:	adds	r3, #4
    204c:	mov.w	r2, #12288	; 0x3000
    2050:	str	r3, [r4, #12]
    2052:	strh.w	r2, [sp, #12]
    2056:	adds	r3, #2
    2058:	movw	r2, #12289	; 0x3001
    205c:	str	r3, [r4, #12]
    205e:	strh.w	r2, [sp, #10]
    2062:	adds	r3, #2
    2064:	str	r3, [r4, #12]

    write32(2);       // Playback formats (array of uint16)
    write16(0x3000);  // Undefined format
    write16(0x3001);  // Folders (associations)

    writestring(MTP_MANUF);     // Manufacturer
    2066:	mov	r0, r4
    2068:	ldr	r1, [pc, #304]	; (219c <MTPD::WriteDescriptor()+0x204>)
    206a:	bl	1e34 <MTPD::writestring(char const*)>
    writestring(MTP_MODEL);     // Model
    206e:	mov	r0, r4
    2070:	ldr	r1, [pc, #300]	; (21a0 <MTPD::WriteDescriptor()+0x208>)
    2072:	bl	1e34 <MTPD::writestring(char const*)>
    writestring(MTP_VERS);      // version
    2076:	mov	r0, r4
    2078:	ldr	r1, [pc, #296]	; (21a4 <MTPD::WriteDescriptor()+0x20c>)
    207a:	bl	1e34 <MTPD::writestring(char const*)>
    writestring(MTP_SERNR);     // serial
    207e:	mov	r0, r4
    2080:	ldr	r1, [pc, #292]	; (21a8 <MTPD::WriteDescriptor()+0x210>)
    2082:	bl	1e34 <MTPD::writestring(char const*)>
  }
    2086:	add	sp, #44	; 0x2c
    2088:	pop	{r4, r5, r6, r7, pc}
    208a:	movs	r2, #2
    208c:	add.w	r1, sp, #6
    2090:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2094:	ldrb	r3, [r4, #8]
    2096:	movs	r2, #6
    2098:	str	r2, [sp, #20]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    209a:	cmp	r3, #0
    209c:	bne.n	217a <MTPD::WriteDescriptor()+0x1e2>
    209e:	movs	r2, #4
    20a0:	add	r1, sp, #20
    20a2:	mov	r0, r4
    20a4:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    20a8:	ldrb	r3, [r4, #8]
    20aa:	strh.w	r5, [sp, #4]
    20ae:	cmp	r3, #0
    20b0:	bne.n	217e <MTPD::WriteDescriptor()+0x1e6>
    20b2:	movs	r2, #2
    20b4:	add	r1, sp, #4
    20b6:	mov	r0, r4
    20b8:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    20bc:	b.n	1fc2 <MTPD::WriteDescriptor()+0x2a>
    20be:	movs	r2, #4
    20c0:	add	r1, sp, #36	; 0x24
    20c2:	mov	r0, r4
    20c4:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    20c8:	ldrb	r3, [r4, #8]
    20ca:	movs	r2, #1
    20cc:	str	r2, [sp, #32]
    20ce:	cmp	r3, #0
    20d0:	bne.n	2182 <MTPD::WriteDescriptor()+0x1ea>
    20d2:	movs	r2, #4
    20d4:	add	r1, sp, #32
    20d6:	mov	r0, r4
    20d8:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    20dc:	ldrb	r3, [r4, #8]
    20de:	movw	r2, #54274	; 0xd402
    20e2:	strh.w	r2, [sp, #14]
    20e6:	cmp	r3, #0
    20e8:	bne.n	2186 <MTPD::WriteDescriptor()+0x1ee>
    20ea:	movs	r2, #2
    20ec:	add.w	r1, sp, #14
    20f0:	mov	r0, r4
    20f2:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    20f6:	ldrb	r3, [r4, #8]
    20f8:	str	r6, [sp, #28]
    20fa:	cmp	r3, #0
    20fc:	bne.n	218a <MTPD::WriteDescriptor()+0x1f2>
    20fe:	movs	r2, #4
    2100:	add	r1, sp, #28
    2102:	mov	r0, r4
    2104:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2108:	ldrb	r3, [r4, #8]
    210a:	movs	r5, #2
    210c:	str	r5, [sp, #24]
    210e:	cmp	r3, #0
    2110:	bne.n	218e <MTPD::WriteDescriptor()+0x1f6>
    2112:	movs	r2, #4
    2114:	add	r1, sp, #24
    2116:	mov	r0, r4
    2118:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    211c:	ldrb	r3, [r4, #8]
    211e:	mov.w	r2, #12288	; 0x3000
    2122:	strh.w	r2, [sp, #12]
    2126:	cbnz	r3, 2172 <MTPD::WriteDescriptor()+0x1da>
    2128:	mov	r2, r5
    212a:	add	r1, sp, #12
    212c:	mov	r0, r4
    212e:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2132:	ldrb	r3, [r4, #8]
    2134:	movw	r2, #12289	; 0x3001
    2138:	strh.w	r2, [sp, #10]
    213c:	cbnz	r3, 216e <MTPD::WriteDescriptor()+0x1d6>
    213e:	mov	r2, r5
    2140:	add.w	r1, sp, #10
    2144:	mov	r0, r4
    2146:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    214a:	b.n	2066 <MTPD::WriteDescriptor()+0xce>
    214c:	movs	r2, #2
    214e:	add.w	r1, sp, r2
    2152:	mov	r0, r4
    2154:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2158:	ldrb	r3, [r4, #8]
    215a:	movs	r2, #18
    215c:	str	r2, [sp, #16]
    215e:	cbnz	r3, 2176 <MTPD::WriteDescriptor()+0x1de>
    2160:	movs	r2, #4
    2162:	add	r1, sp, #16
    2164:	mov	r0, r4
    2166:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    216a:	ldrb	r6, [r4, #8]
    216c:	b.n	1fe8 <MTPD::WriteDescriptor()+0x50>
    216e:	ldr	r3, [r4, #12]
    2170:	b.n	2062 <MTPD::WriteDescriptor()+0xca>
    2172:	ldr	r3, [r4, #12]
    2174:	b.n	2056 <MTPD::WriteDescriptor()+0xbe>
    2176:	ldr	r3, [r4, #12]
    2178:	b.n	1fe2 <MTPD::WriteDescriptor()+0x4a>
    217a:	ldr	r3, [r4, #12]
    217c:	b.n	1fb4 <MTPD::WriteDescriptor()+0x1c>
    217e:	ldr	r3, [r4, #12]
    2180:	b.n	1fbe <MTPD::WriteDescriptor()+0x26>
    2182:	ldr	r3, [r4, #12]
    2184:	b.n	202e <MTPD::WriteDescriptor()+0x96>
    2186:	ldr	r3, [r4, #12]
    2188:	b.n	203a <MTPD::WriteDescriptor()+0xa2>
    218a:	ldr	r3, [r4, #12]
    218c:	b.n	2042 <MTPD::WriteDescriptor()+0xaa>
    218e:	ldr	r3, [r4, #12]
    2190:	b.n	204a <MTPD::WriteDescriptor()+0xb2>
    2192:	nop
    2194:	.word	0x0000f9dc
    2198:	.word	0x0000f9a0
    219c:	.word	0x0000f9f0
    21a0:	.word	0x0000f9d4
    21a4:	.word	0x0000f9f8
    21a8:	.word	0x0000f9fc

000021ac <MTPD::WriteStorageIDs()>:
    writestring(MTP_MODEL);     // Model
    writestring(MTP_VERS);      // version
    writestring(MTP_SERNR);     // serial
  }

  void MTPD::WriteStorageIDs() {
    21ac:	push	{r4, r5, r6, lr}
    21ae:	mov	r5, r0
    uint32_t num=storage_->getNumStorage();
    21b0:	ldr	r0, [r0, #0]
    21b2:	ldr	r3, [r0, #0]
    writestring(MTP_MODEL);     // Model
    writestring(MTP_VERS);      // version
    writestring(MTP_SERNR);     // serial
  }

  void MTPD::WriteStorageIDs() {
    21b4:	sub	sp, #8
    uint32_t num=storage_->getNumStorage();
    21b6:	ldr	r3, [r3, #24]
    21b8:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    21ba:	ldrb	r3, [r5, #8]
    21bc:	str	r0, [sp, #0]
    writestring(MTP_VERS);      // version
    writestring(MTP_SERNR);     // serial
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->getNumStorage();
    21be:	mov	r6, r0
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    21c0:	cbz	r3, 21f8 <MTPD::WriteStorageIDs()+0x4c>
      write_length_ += len;
    21c2:	ldr	r3, [r5, #12]
    21c4:	adds	r3, #4
    21c6:	str	r3, [r5, #12]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->getNumStorage();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
    21c8:	movs	r4, #1
    21ca:	cbnz	r6, 21da <MTPD::WriteStorageIDs()+0x2e>
    21cc:	b.n	21f4 <MTPD::WriteStorageIDs()+0x48>
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    21ce:	ldr	r3, [r5, #12]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->getNumStorage();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
    21d0:	adds	r4, #1
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    21d2:	adds	r3, #4
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->getNumStorage();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
    21d4:	cmp	r6, r4
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    21d6:	str	r3, [r5, #12]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->getNumStorage();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
    21d8:	bcc.n	21f4 <MTPD::WriteStorageIDs()+0x48>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    21da:	ldrb	r3, [r5, #8]
    21dc:	str	r4, [sp, #4]
    21de:	cmp	r3, #0
    21e0:	bne.n	21ce <MTPD::WriteStorageIDs()+0x22>
    21e2:	movs	r2, #4
    21e4:	add.w	r1, sp, r2
    21e8:	mov	r0, r5
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->getNumStorage();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
    21ea:	adds	r4, #1
    21ec:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    21f0:	cmp	r6, r4
    21f2:	bcs.n	21da <MTPD::WriteStorageIDs()+0x2e>
  }
    21f4:	add	sp, #8
    21f6:	pop	{r4, r5, r6, pc}
    21f8:	movs	r2, #4
    21fa:	mov	r1, sp
    21fc:	mov	r0, r5
    21fe:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2202:	b.n	21c8 <MTPD::WriteStorageIDs()+0x1c>

00002204 <MTPD::GetObjectHandles(unsigned long, unsigned long)>:
    while (storage_->GetNextObjectHandle(storage)) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    2204:	push	{r4, r5, r6, lr}
    if (write_get_length_) {
    2206:	ldrb	r3, [r0, #8]
    while (storage_->GetNextObjectHandle(storage)) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    2208:	sub	sp, #8
    220a:	mov	r4, r0
    if (write_get_length_) {
    220c:	cbnz	r3, 2254 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x50>
    220e:	mov	r5, r1
    2210:	mov	r6, r2
      write_length_ = GetNumObjects(storage, parent);
      write_length_++;
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
    2212:	bl	1d90 <MTPD::GetNumObjects(unsigned long, unsigned long)>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2216:	ldrb	r3, [r4, #8]
    2218:	str	r0, [sp, #4]
    221a:	cbz	r3, 2262 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x5e>
      write_length_ += len;
    221c:	ldr	r3, [r4, #12]
    221e:	adds	r3, #4
    2220:	str	r3, [r4, #12]
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(storage, parent);
    2222:	ldr	r0, [r4, #0]
    2224:	ldr	r3, [r0, #0]
    2226:	mov	r2, r6
    2228:	ldr	r3, [r3, #32]
    222a:	mov	r1, r5
    222c:	blx	r3
      while ((handle = storage_->GetNextObjectHandle(storage))) write32(handle);
    222e:	ldr	r0, [r4, #0]
    2230:	ldr	r3, [r0, #0]
    2232:	mov	r1, r5
    2234:	ldr	r3, [r3, #36]	; 0x24
    2236:	blx	r3
    2238:	cbz	r0, 225e <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x5a>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    223a:	ldrb	r3, [r4, #8]
    223c:	str	r0, [sp, #0]
    223e:	cbz	r3, 2248 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x44>
      write_length_ += len;
    2240:	ldr	r3, [r4, #12]
    2242:	adds	r3, #4
    2244:	str	r3, [r4, #12]
    2246:	b.n	222e <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x2a>
    2248:	movs	r2, #4
    224a:	mov	r1, sp
    224c:	mov	r0, r4
    224e:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2252:	b.n	222e <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x2a>
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    if (write_get_length_) {
      write_length_ = GetNumObjects(storage, parent);
    2254:	bl	1d90 <MTPD::GetNumObjects(unsigned long, unsigned long)>
      write_length_++;
      write_length_ *= 4;
    2258:	adds	r0, #1
    225a:	lsls	r0, r0, #2
    225c:	str	r0, [r4, #12]
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(storage, parent);
      while ((handle = storage_->GetNextObjectHandle(storage))) write32(handle);
    }
  }
    225e:	add	sp, #8
    2260:	pop	{r4, r5, r6, pc}
    2262:	movs	r2, #4
    2264:	add.w	r1, sp, r2
    2268:	mov	r0, r4
    226a:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    226e:	b.n	2222 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1e>

00002270 <MTPD::GetObjectInfo(unsigned long)>:
  
  void MTPD::GetObjectInfo(uint32_t handle) 
  {
    2270:	push	{r4, r5, r6, r7, lr}
    2272:	mov	r4, r0
    2274:	sub	sp, #332	; 0x14c
    char filename[256];
    uint32_t size, parent;
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);
    2276:	ldr	r0, [r0, #0]
    2278:	add.w	r6, sp, #10
    227c:	add	r5, sp, #24
    227e:	ldr	r3, [r0, #0]
    2280:	stmia.w	sp, {r5, r6}
    2284:	add	r2, sp, #72	; 0x48
    2286:	ldr	r7, [r3, #40]	; 0x28
    2288:	add	r3, sp, #20
    228a:	blx	r7
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    228c:	ldrb	r3, [r4, #8]
    228e:	ldrh	r2, [r6, #0]
    2290:	str	r2, [sp, #28]
    2292:	cmp	r3, #0
    2294:	beq.n	234a <MTPD::GetObjectInfo(unsigned long)+0xda>
      write_length_ += len;
    2296:	ldr	r3, [r4, #12]
    uint32_t size, parent;
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    write32(store); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    2298:	ldr	r2, [sp, #20]
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    229a:	adds	r3, #4
    uint32_t size, parent;
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    write32(store); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    229c:	adds	r2, #1
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    229e:	str	r3, [r4, #12]
    uint32_t size, parent;
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    write32(store); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    22a0:	beq.w	247a <MTPD::GetObjectInfo(unsigned long)+0x20a>
    22a4:	movs	r2, #0
    22a6:	strh.w	r2, [sp, #16]
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    22aa:	adds	r3, #2
    22ac:	movs	r2, #0
    22ae:	str	r3, [r4, #12]
    22b0:	strh.w	r2, [sp, #14]
    22b4:	adds	r3, #2
    22b6:	ldr	r2, [sp, #20]
    22b8:	str	r3, [r4, #12]
    22ba:	str	r2, [sp, #60]	; 0x3c
    22bc:	adds	r3, #4
    22be:	movs	r2, #0
    22c0:	str	r3, [r4, #12]
    22c2:	strh.w	r2, [sp, #12]
    22c6:	adds	r3, #2
    22c8:	movs	r2, #0
    22ca:	str	r3, [r4, #12]
    22cc:	str	r2, [sp, #56]	; 0x38
    22ce:	adds	r3, #4
    22d0:	movs	r2, #0
    22d2:	str	r3, [r4, #12]
    22d4:	str	r2, [sp, #52]	; 0x34
    22d6:	adds	r3, #4
    22d8:	movs	r2, #0
    22da:	str	r3, [r4, #12]
    22dc:	str	r2, [sp, #48]	; 0x30
    22de:	adds	r3, #4
    22e0:	movs	r2, #0
    22e2:	str	r3, [r4, #12]
    22e4:	str	r2, [sp, #44]	; 0x2c
    22e6:	adds	r3, #4
    22e8:	movs	r2, #0
    22ea:	str	r3, [r4, #12]
    22ec:	str	r2, [sp, #40]	; 0x28
    22ee:	adds	r3, #4
    22f0:	movs	r2, #0
    22f2:	str	r3, [r4, #12]
    22f4:	str	r2, [sp, #36]	; 0x24
    22f6:	adds	r3, #4
    22f8:	ldr	r2, [r5, #0]
    22fa:	str	r3, [r4, #12]
    22fc:	str	r2, [sp, #32]
    22fe:	ldr	r2, [sp, #20]
    2300:	sub.w	r2, r2, #4294967295
    2304:	clz	r2, r2
    2308:	lsrs	r2, r2, #5
    230a:	adds	r3, #4
    230c:	str	r3, [r4, #12]
    230e:	strh.w	r2, [sp, #18]
    2312:	adds	r3, #2
    2314:	movs	r2, #0
    2316:	str	r3, [r4, #12]
    2318:	str	r2, [sp, #68]	; 0x44
    231a:	adds	r3, #4
    231c:	movs	r2, #0
    231e:	str	r3, [r4, #12]
    2320:	str	r2, [sp, #64]	; 0x40
    2322:	adds	r3, #4
    2324:	str	r3, [r4, #12]
    write32(0); // bit depth
    write32(parent); // parent
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    write32(0); // association description
    write32(0);  // sequence number
    writestring(filename);
    2326:	add	r1, sp, #72	; 0x48
    2328:	mov	r0, r4
    232a:	bl	1e34 <MTPD::writestring(char const*)>
    writestring("");  // date created
    232e:	mov	r0, r4
    2330:	ldr	r1, [pc, #392]	; (24bc <MTPD::GetObjectInfo(unsigned long)+0x24c>)
    2332:	bl	1e34 <MTPD::writestring(char const*)>
    writestring("");  // date modified
    2336:	mov	r0, r4
    2338:	ldr	r1, [pc, #384]	; (24bc <MTPD::GetObjectInfo(unsigned long)+0x24c>)
    233a:	bl	1e34 <MTPD::writestring(char const*)>
    writestring("");  // keywords
    233e:	mov	r0, r4
    2340:	ldr	r1, [pc, #376]	; (24bc <MTPD::GetObjectInfo(unsigned long)+0x24c>)
    2342:	bl	1e34 <MTPD::writestring(char const*)>
  }
    2346:	add	sp, #332	; 0x14c
    2348:	pop	{r4, r5, r6, r7, pc}
    234a:	add	r1, sp, #28
    234c:	movs	r2, #4
    234e:	mov	r0, r4
    2350:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    uint32_t size, parent;
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    write32(store); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    2354:	ldr	r3, [sp, #20]
    2356:	ldrb	r6, [r4, #8]
    2358:	adds	r3, #1
    235a:	movw	r3, #12289	; 0x3001
    235e:	it	ne
    2360:	movne	r3, #0
    2362:	strh.w	r3, [sp, #16]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2366:	cmp	r6, #0
    2368:	bne.w	248c <MTPD::GetObjectInfo(unsigned long)+0x21c>
    236c:	add	r1, sp, #16
    236e:	movs	r2, #2
    2370:	mov	r0, r4
    2372:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2376:	ldrb	r3, [r4, #8]
    2378:	strh.w	r6, [sp, #14]
    237c:	cmp	r3, #0
    237e:	bne.w	2490 <MTPD::GetObjectInfo(unsigned long)+0x220>
    2382:	movs	r2, #2
    2384:	add.w	r1, sp, #14
    2388:	mov	r0, r4
    238a:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    238e:	ldrb	r3, [r4, #8]
    2390:	ldr	r2, [sp, #20]
    2392:	str	r2, [sp, #60]	; 0x3c
    2394:	cmp	r3, #0
    2396:	bne.n	2494 <MTPD::GetObjectInfo(unsigned long)+0x224>
    2398:	add	r1, sp, #60	; 0x3c
    239a:	movs	r2, #4
    239c:	mov	r0, r4
    239e:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    23a2:	ldrb	r3, [r4, #8]
    23a4:	strh.w	r6, [sp, #12]
    23a8:	cmp	r3, #0
    23aa:	bne.n	2498 <MTPD::GetObjectInfo(unsigned long)+0x228>
    23ac:	add	r1, sp, #12
    23ae:	movs	r2, #2
    23b0:	mov	r0, r4
    23b2:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    23b6:	ldrb	r3, [r4, #8]
    23b8:	str	r6, [sp, #56]	; 0x38
    23ba:	cmp	r3, #0
    23bc:	bne.n	249c <MTPD::GetObjectInfo(unsigned long)+0x22c>
    23be:	add	r1, sp, #56	; 0x38
    23c0:	movs	r2, #4
    23c2:	mov	r0, r4
    23c4:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    23c8:	ldrb	r3, [r4, #8]
    23ca:	str	r6, [sp, #52]	; 0x34
    23cc:	cmp	r3, #0
    23ce:	bne.n	24a0 <MTPD::GetObjectInfo(unsigned long)+0x230>
    23d0:	add	r1, sp, #52	; 0x34
    23d2:	movs	r2, #4
    23d4:	mov	r0, r4
    23d6:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    23da:	ldrb	r3, [r4, #8]
    23dc:	str	r6, [sp, #48]	; 0x30
    23de:	cmp	r3, #0
    23e0:	bne.n	24a4 <MTPD::GetObjectInfo(unsigned long)+0x234>
    23e2:	add	r1, sp, #48	; 0x30
    23e4:	movs	r2, #4
    23e6:	mov	r0, r4
    23e8:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    23ec:	ldrb	r3, [r4, #8]
    23ee:	str	r6, [sp, #44]	; 0x2c
    23f0:	cmp	r3, #0
    23f2:	bne.n	24a8 <MTPD::GetObjectInfo(unsigned long)+0x238>
    23f4:	add	r1, sp, #44	; 0x2c
    23f6:	movs	r2, #4
    23f8:	mov	r0, r4
    23fa:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    23fe:	ldrb	r3, [r4, #8]
    2400:	str	r6, [sp, #40]	; 0x28
    2402:	cmp	r3, #0
    2404:	bne.n	24ac <MTPD::GetObjectInfo(unsigned long)+0x23c>
    2406:	add	r1, sp, #40	; 0x28
    2408:	movs	r2, #4
    240a:	mov	r0, r4
    240c:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2410:	ldrb	r3, [r4, #8]
    2412:	str	r6, [sp, #36]	; 0x24
    2414:	cmp	r3, #0
    2416:	bne.n	24b0 <MTPD::GetObjectInfo(unsigned long)+0x240>
    2418:	movs	r2, #4
    241a:	add	r1, sp, #36	; 0x24
    241c:	mov	r0, r4
    241e:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2422:	ldrb	r3, [r4, #8]
    2424:	ldr	r2, [r5, #0]
    2426:	str	r2, [sp, #32]
    2428:	cmp	r3, #0
    242a:	bne.n	24b4 <MTPD::GetObjectInfo(unsigned long)+0x244>
    242c:	add	r1, sp, #32
    242e:	movs	r2, #4
    2430:	mov	r0, r4
    2432:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2436:	ldr	r3, [sp, #20]
    2438:	ldrb	r6, [r4, #8]
    243a:	sub.w	r3, r3, #4294967295
    243e:	clz	r3, r3
    2442:	lsrs	r3, r3, #5
    2444:	strh.w	r3, [sp, #18]
    2448:	cmp	r6, #0
    244a:	bne.n	24b8 <MTPD::GetObjectInfo(unsigned long)+0x248>
    244c:	add.w	r1, sp, #18
    2450:	movs	r2, #2
    2452:	mov	r0, r4
    2454:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2458:	ldrb	r5, [r4, #8]
    245a:	str	r6, [sp, #68]	; 0x44
    245c:	cbnz	r5, 2488 <MTPD::GetObjectInfo(unsigned long)+0x218>
    245e:	add	r1, sp, #68	; 0x44
    2460:	movs	r2, #4
    2462:	mov	r0, r4
    2464:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2468:	ldrb	r3, [r4, #8]
    246a:	str	r5, [sp, #64]	; 0x40
    246c:	cbnz	r3, 2484 <MTPD::GetObjectInfo(unsigned long)+0x214>
    246e:	add	r1, sp, #64	; 0x40
    2470:	movs	r2, #4
    2472:	mov	r0, r4
    2474:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2478:	b.n	2326 <MTPD::GetObjectInfo(unsigned long)+0xb6>
    247a:	movw	r2, #12289	; 0x3001
    247e:	strh.w	r2, [sp, #16]
    2482:	b.n	22aa <MTPD::GetObjectInfo(unsigned long)+0x3a>
    2484:	ldr	r3, [r4, #12]
    2486:	b.n	2322 <MTPD::GetObjectInfo(unsigned long)+0xb2>
    2488:	ldr	r3, [r4, #12]
    248a:	b.n	231a <MTPD::GetObjectInfo(unsigned long)+0xaa>
    248c:	ldr	r3, [r4, #12]
    248e:	b.n	22aa <MTPD::GetObjectInfo(unsigned long)+0x3a>
    2490:	ldr	r3, [r4, #12]
    2492:	b.n	22b4 <MTPD::GetObjectInfo(unsigned long)+0x44>
    2494:	ldr	r3, [r4, #12]
    2496:	b.n	22bc <MTPD::GetObjectInfo(unsigned long)+0x4c>
    2498:	ldr	r3, [r4, #12]
    249a:	b.n	22c6 <MTPD::GetObjectInfo(unsigned long)+0x56>
    249c:	ldr	r3, [r4, #12]
    249e:	b.n	22ce <MTPD::GetObjectInfo(unsigned long)+0x5e>
    24a0:	ldr	r3, [r4, #12]
    24a2:	b.n	22d6 <MTPD::GetObjectInfo(unsigned long)+0x66>
    24a4:	ldr	r3, [r4, #12]
    24a6:	b.n	22de <MTPD::GetObjectInfo(unsigned long)+0x6e>
    24a8:	ldr	r3, [r4, #12]
    24aa:	b.n	22e6 <MTPD::GetObjectInfo(unsigned long)+0x76>
    24ac:	ldr	r3, [r4, #12]
    24ae:	b.n	22ee <MTPD::GetObjectInfo(unsigned long)+0x7e>
    24b0:	ldr	r3, [r4, #12]
    24b2:	b.n	22f6 <MTPD::GetObjectInfo(unsigned long)+0x86>
    24b4:	ldr	r3, [r4, #12]
    24b6:	b.n	22fe <MTPD::GetObjectInfo(unsigned long)+0x8e>
    24b8:	ldr	r3, [r4, #12]
    24ba:	b.n	2312 <MTPD::GetObjectInfo(unsigned long)+0xa2>
    24bc:	.word	0x0000f99c

000024c0 <MTPD::getObjectPropsSupported(unsigned long)>:
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    24c0:	push	{r4, r5, r6, r7, lr}
      write32(propertyListNum);
    24c2:	ldr	r7, [pc, #96]	; (2524 <MTPD::getObjectPropsSupported(unsigned long)+0x64>)
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    24c4:	ldrb	r2, [r0, #8]
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
    24c6:	ldr	r3, [r7, #0]
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    24c8:	sub	sp, #12
    24ca:	mov	r4, r0
    24cc:	str	r3, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    24ce:	cbz	r2, 2516 <MTPD::getObjectPropsSupported(unsigned long)+0x56>
      write_length_ += len;
    24d0:	ldr	r2, [r0, #12]
    24d2:	adds	r2, #4
    24d4:	str	r2, [r0, #12]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    24d6:	cbz	r3, 2512 <MTPD::getObjectPropsSupported(unsigned long)+0x52>
    24d8:	ldr	r6, [pc, #76]	; (2528 <MTPD::getObjectPropsSupported(unsigned long)+0x68>)
    24da:	movw	r3, #56321	; 0xdc01
    24de:	movs	r5, #0
    24e0:	b.n	24f4 <MTPD::getObjectPropsSupported(unsigned long)+0x34>
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    24e2:	ldr	r3, [r4, #12]
    24e4:	adds	r3, #2
    24e6:	str	r3, [r4, #12]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    24e8:	ldr	r3, [r7, #0]
    24ea:	adds	r5, #1
    24ec:	cmp	r3, r5
    24ee:	bls.n	2512 <MTPD::getObjectPropsSupported(unsigned long)+0x52>
    24f0:	ldrh.w	r3, [r6, #2]!
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    24f4:	ldrb	r2, [r4, #8]
    24f6:	strh.w	r3, [sp, #2]
    24fa:	cmp	r2, #0
    24fc:	bne.n	24e2 <MTPD::getObjectPropsSupported(unsigned long)+0x22>
    24fe:	movs	r2, #2
    2500:	add.w	r1, sp, r2
    2504:	mov	r0, r4
    2506:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    250a:	ldr	r3, [r7, #0]
    250c:	adds	r5, #1
    250e:	cmp	r3, r5
    2510:	bhi.n	24f0 <MTPD::getObjectPropsSupported(unsigned long)+0x30>
    }
    2512:	add	sp, #12
    2514:	pop	{r4, r5, r6, r7, pc}
    2516:	movs	r2, #4
    2518:	add.w	r1, sp, r2
    251c:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2520:	ldr	r3, [r7, #0]
    2522:	b.n	24d6 <MTPD::getObjectPropsSupported(unsigned long)+0x16>
    2524:	.word	0x1fff0978
    2528:	.word	0x0000f9c4

0000252c <MTPD::getObjectPropValue(unsigned long, unsigned long)>:
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    252c:	push	{r4, r5, r6, r7, lr}
    252e:	mov	r5, r0
    2530:	sub	sp, #188	; 0xbc
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    2532:	ldr	r0, [r0, #0]
    2534:	add.w	r6, sp, #10
    2538:	add	r4, sp, #20
    253a:	ldr	r3, [r0, #0]
    253c:	stmia.w	sp, {r4, r6}
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    2540:	mov	r4, r2
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    2542:	ldr	r6, [r3, #40]	; 0x28
    2544:	add	r2, sp, #56	; 0x38
    2546:	add	r3, sp, #16
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    2548:	mov	r7, r1
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    254a:	blx	r6
      dir = size == 0xFFFFFFFFUL;
      switch(p2)
    254c:	sub.w	r2, r4, #56320	; 0xdc00
    2550:	subs	r2, #1
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
      dir = size == 0xFFFFFFFFUL;
    2552:	ldr	r3, [sp, #16]
      switch(p2)
    2554:	cmp	r2, #67	; 0x43
    2556:	bhi.n	25ba <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8e>
    2558:	tbb	[pc, r2]
    255c:	.word	0x7063483d
    2560:	.word	0x31372f2f
    2564:	.word	0x2f582f31
    2568:	.word	0x2f2f2f2f
    256c:	.word	0x2f2f2f2f
    2570:	.word	0x2f2f2f2f
    2574:	.word	0x2f2f2f2f
    2578:	.word	0x2f2f2f2f
    257c:	.word	0x2f2f2f2f
    2580:	.word	0x2f2f2f2f
    2584:	.word	0x2f2f2f2f
    2588:	.word	0x2f2f2f2f
    258c:	.word	0x2f2f2f2f
    2590:	.word	0x2f2f2f2f
    2594:	.word	0x2f2f2f2f
    2598:	.word	0x2f2f2f2f
    259c:	.word	0x372f2f22
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    25a0:	ldrb	r3, [r5, #8]
    25a2:	str	r7, [sp, #52]	; 0x34
    25a4:	cmp	r3, #0
    25a6:	beq.n	264c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x120>
      write_length_ += len;
    25a8:	ldr	r3, [r5, #12]
    25aa:	adds	r3, #4
    25ac:	str	r3, [r5, #12]
    25ae:	adds	r3, #4
    25b0:	str	r3, [r5, #12]
    25b2:	adds	r3, #4
    25b4:	str	r3, [r5, #12]
    25b6:	adds	r3, #4
    25b8:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    25ba:	add	sp, #188	; 0xbc
    25bc:	pop	{r4, r5, r6, r7, pc}
          break;
        case MTP_PROPERTY_DATE_CREATED:       //0xDC08:
          writestring("");
          break;
        case MTP_PROPERTY_DATE_MODIFIED:      //0xDC09:
          writestring("");
    25be:	mov	r0, r5
    25c0:	ldr	r1, [pc, #268]	; (26d0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1a4>)
    25c2:	bl	1e34 <MTPD::writestring(char const*)>
          writestring(name);
          break;
        default:
          break;
      }
    }
    25c6:	add	sp, #188	; 0xbc
    25c8:	pop	{r4, r5, r6, r7, pc}
          write32(parent);
          write32(1);
          write32(0);
          break;
        case MTP_PROPERTY_NAME:               //0xDC44:
          writestring(name);
    25ca:	add	r1, sp, #56	; 0x38
    25cc:	mov	r0, r5
    25ce:	bl	1e34 <MTPD::writestring(char const*)>
          break;
        default:
          break;
      }
    }
    25d2:	add	sp, #188	; 0xbc
    25d4:	pop	{r4, r5, r6, r7, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    25d6:	ldrb	r3, [r5, #8]
    25d8:	ldrh.w	r2, [sp, #10]
    25dc:	str	r2, [sp, #24]
    25de:	cmp	r3, #0
    25e0:	beq.n	269a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x16e>
      write_length_ += len;
    25e2:	ldr	r3, [r5, #12]
    25e4:	adds	r3, #4
    25e6:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    25e8:	add	sp, #188	; 0xbc
    25ea:	pop	{r4, r5, r6, r7, pc}
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(store);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    25ec:	adds	r3, #1
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    25ee:	ldrb	r2, [r5, #8]
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(store);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    25f0:	movw	r3, #12289	; 0x3001
    25f4:	it	ne
    25f6:	movne.w	r3, #12288	; 0x3000
    25fa:	strh.w	r3, [sp, #12]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    25fe:	cmp	r2, #0
    2600:	beq.n	268e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x162>
      write_length_ += len;
    2602:	ldr	r3, [r5, #12]
    2604:	adds	r3, #2
    2606:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    2608:	add	sp, #188	; 0xbc
    260a:	pop	{r4, r5, r6, r7, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    260c:	ldrb	r3, [r5, #8]
    260e:	ldr	r2, [sp, #20]
    2610:	str	r2, [sp, #36]	; 0x24
    2612:	cmp	r3, #0
    2614:	bne.n	25e2 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xb6>
    2616:	mov	r0, r5
    2618:	movs	r2, #4
    261a:	add	r1, sp, #36	; 0x24
    261c:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2620:	b.n	25ba <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8e>
    2622:	ldrb	r3, [r5, #8]
    2624:	movs	r2, #0
    2626:	strh.w	r2, [sp, #14]
    262a:	cmp	r3, #0
    262c:	bne.n	2602 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xd6>
    262e:	mov	r0, r5
    2630:	movs	r2, #2
    2632:	add.w	r1, sp, #14
    2636:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    263a:	b.n	25ba <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8e>
    263c:	ldrb	r4, [r5, #8]
    263e:	str	r3, [sp, #32]
    2640:	cmp	r4, #0
    2642:	beq.n	26a6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x17a>
      write_length_ += len;
    2644:	ldr	r3, [r5, #12]
    2646:	adds	r3, #4
    2648:	str	r3, [r5, #12]
    264a:	b.n	25b6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8a>
    264c:	movs	r2, #4
    264e:	add	r1, sp, #52	; 0x34
    2650:	mov	r0, r5
    2652:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2656:	ldrb	r3, [r5, #8]
    2658:	ldr	r2, [sp, #20]
    265a:	str	r2, [sp, #48]	; 0x30
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    265c:	cmp	r3, #0
    265e:	bne.n	26ca <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x19e>
    2660:	movs	r2, #4
    2662:	add	r1, sp, #48	; 0x30
    2664:	mov	r0, r5
    2666:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    266a:	ldrb	r4, [r5, #8]
    266c:	movs	r3, #1
    266e:	str	r3, [sp, #44]	; 0x2c
    2670:	cbnz	r4, 26c6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x19a>
    2672:	movs	r2, #4
    2674:	add	r1, sp, #44	; 0x2c
    2676:	mov	r0, r5
    2678:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    267c:	ldrb	r3, [r5, #8]
    267e:	str	r4, [sp, #40]	; 0x28
    2680:	cbnz	r3, 26c2 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x196>
    2682:	mov	r0, r5
    2684:	movs	r2, #4
    2686:	add	r1, sp, #40	; 0x28
    2688:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    268c:	b.n	25ba <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8e>
    268e:	mov	r0, r5
    2690:	movs	r2, #2
    2692:	add	r1, sp, #12
    2694:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2698:	b.n	25ba <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8e>
    269a:	mov	r0, r5
    269c:	movs	r2, #4
    269e:	add	r1, sp, #24
    26a0:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    26a4:	b.n	25ba <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8e>
    26a6:	movs	r2, #4
    26a8:	add	r1, sp, #32
    26aa:	mov	r0, r5
    26ac:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    26b0:	ldrb	r3, [r5, #8]
    26b2:	str	r4, [sp, #28]
    26b4:	cbnz	r3, 26c2 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x196>
    26b6:	mov	r0, r5
    26b8:	movs	r2, #4
    26ba:	add	r1, sp, #28
    26bc:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    26c0:	b.n	25ba <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8e>
    26c2:	ldr	r3, [r5, #12]
    26c4:	b.n	25b6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8a>
    26c6:	ldr	r3, [r5, #12]
    26c8:	b.n	25b2 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x86>
    26ca:	ldr	r3, [r5, #12]
    26cc:	b.n	25ae <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x82>
    26ce:	nop
    26d0:	.word	0x0000f99c

000026d4 <MTPD::GetStorageInfo(unsigned long)>:
    uint32_t num=storage_->getNumStorage();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    26d4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    26d8:	mov	r4, r0
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    26da:	ldr	r0, [r0, #0]
    26dc:	ldr	r3, [r0, #0]
    uint32_t num=storage_->getNumStorage();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    26de:	sub	sp, #32
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    26e0:	ldr	r3, [r3, #4]
    uint32_t num=storage_->getNumStorage();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    26e2:	mov	r6, r1
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    26e4:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    26e6:	ldrb	r3, [r4, #8]
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    26e8:	cmp	r0, #0
    26ea:	ite	eq
    26ec:	moveq	r2, #4
    26ee:	movne	r2, #1
    26f0:	strh.w	r2, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    26f4:	cmp	r3, #0
    26f6:	beq.n	27a6 <MTPD::GetStorageInfo(unsigned long)+0xd2>
      write_length_ += len;
    26f8:	ldr	r3, [r4, #12]
    26fa:	adds	r3, #2
    26fc:	str	r3, [r4, #12]
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories( storage) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    26fe:	ldr	r0, [r4, #0]
    2700:	ldr	r3, [r0, #0]
    2702:	mov	r1, r6
    2704:	ldr	r3, [r3, #8]
    2706:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2708:	ldrb	r5, [r4, #8]
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories( storage) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    270a:	cmp	r0, #0
    270c:	ite	eq
    270e:	moveq	r3, #1
    2710:	movne	r3, #2
    2712:	strh.w	r3, [sp, #10]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2716:	cmp	r5, #0
    2718:	beq.n	27f2 <MTPD::GetStorageInfo(unsigned long)+0x11e>
      write_length_ += len;
    271a:	ldr	r3, [r4, #12]
    271c:	movs	r2, #0
    271e:	adds	r3, #2
    2720:	str	r3, [r4, #12]
    2722:	strh.w	r2, [sp, #8]
    2726:	adds	r3, #2
    2728:	str	r3, [r4, #12]
  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories( storage) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)
    
    uint32_t nclust = storage_->clusterCount(storage) ; 
    272a:	ldr	r0, [r4, #0]
    272c:	ldr	r3, [r0, #0]
    272e:	mov	r1, r6
    2730:	ldr	r3, [r3, #12]
    2732:	blx	r3
    2734:	mov	r5, r0
    uint32_t nsect = storage_->clusterSize(storage) ; 
    2736:	ldr	r0, [r4, #0]
    2738:	ldr	r3, [r0, #0]
    273a:	mov	r1, r6
    273c:	ldr	r3, [r3, #20]
    273e:	blx	r3
    2740:	mov	r7, r0
    uint32_t nfree = storage_->freeClusters(storage) ; 
    2742:	ldr	r0, [r4, #0]
    2744:	ldr	r3, [r0, #0]
    2746:	mov	r1, r6
    2748:	ldr	r3, [r3, #16]
    274a:	blx	r3
    274c:	mov	r8, r0
    274e:	umull	r0, r1, r5, r7
    2752:	lsls	r3, r1, #9
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2754:	ldrb	r2, [r4, #8]
    2756:	orr.w	r3, r3, r0, lsr #23
    275a:	lsls	r0, r0, #9
    275c:	str	r3, [sp, #28]
    275e:	str	r0, [sp, #24]
    2760:	cbz	r2, 27b4 <MTPD::GetStorageInfo(unsigned long)+0xe0>
    2762:	umull	r0, r1, r7, r8
      write_length_ += len;
    2766:	ldr	r3, [r4, #12]
    2768:	lsls	r2, r1, #9
    276a:	orr.w	r2, r2, r0, lsr #23
    276e:	adds	r3, #8
    2770:	lsls	r0, r0, #9
    2772:	str	r2, [sp, #20]
    2774:	str	r0, [sp, #16]
    2776:	str	r3, [r4, #12]
    2778:	adds	r3, #8
    277a:	mov.w	r2, #4294967295
    277e:	str	r3, [r4, #12]
    2780:	str	r2, [sp, #12]
    2782:	adds	r3, #4
    2784:	str	r3, [r4, #12]
    uint32_t nfree = storage_->freeClusters(storage) ; 
    write64((uint64_t)nclust*nsect*512L);  // max capacity
    write64((uint64_t)nfree*nsect*512L);  // free space (100M)
    //
    write32(0xFFFFFFFFUL);  // free space (objects)
    const char *name = storage_->getStorageName(storage);
    2786:	ldr	r0, [r4, #0]
    2788:	ldr	r3, [r0, #0]
    278a:	mov	r1, r6
    278c:	ldr	r3, [r3, #28]
    278e:	blx	r3
    writestring(name);  // storage descriptor
    2790:	mov	r1, r0
    2792:	mov	r0, r4
    2794:	bl	1e34 <MTPD::writestring(char const*)>
    writestring("");  // volume identifier
    2798:	mov	r0, r4
    279a:	ldr	r1, [pc, #132]	; (2820 <MTPD::GetStorageInfo(unsigned long)+0x14c>)
    279c:	bl	1e34 <MTPD::writestring(char const*)>
  }
    27a0:	add	sp, #32
    27a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    27a6:	movs	r2, #2
    27a8:	add.w	r1, sp, #6
    27ac:	mov	r0, r4
    27ae:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    27b2:	b.n	26fe <MTPD::GetStorageInfo(unsigned long)+0x2a>
    27b4:	movs	r2, #8
    27b6:	add	r1, sp, #24
    27b8:	mov	r0, r4
    27ba:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    27be:	umull	r0, r1, r7, r8
    27c2:	lsls	r3, r1, #9
    27c4:	ldrb	r2, [r4, #8]
    27c6:	orr.w	r3, r3, r0, lsr #23
    27ca:	lsls	r0, r0, #9
    27cc:	str	r3, [sp, #20]
    27ce:	str	r0, [sp, #16]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    27d0:	cbnz	r2, 2816 <MTPD::GetStorageInfo(unsigned long)+0x142>
    27d2:	movs	r2, #8
    27d4:	add	r1, sp, #16
    27d6:	mov	r0, r4
    27d8:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    27dc:	ldrb	r3, [r4, #8]
    27de:	mov.w	r2, #4294967295
    27e2:	str	r2, [sp, #12]
    27e4:	cbnz	r3, 2812 <MTPD::GetStorageInfo(unsigned long)+0x13e>
    27e6:	movs	r2, #4
    27e8:	add	r1, sp, #12
    27ea:	mov	r0, r4
    27ec:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    27f0:	b.n	2786 <MTPD::GetStorageInfo(unsigned long)+0xb2>
    27f2:	movs	r2, #2
    27f4:	add.w	r1, sp, #10
    27f8:	mov	r0, r4
    27fa:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    27fe:	ldrb	r3, [r4, #8]
    2800:	strh.w	r5, [sp, #8]
    2804:	cbnz	r3, 281a <MTPD::GetStorageInfo(unsigned long)+0x146>
    2806:	movs	r2, #2
    2808:	add	r1, sp, #8
    280a:	mov	r0, r4
    280c:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2810:	b.n	272a <MTPD::GetStorageInfo(unsigned long)+0x56>
    2812:	ldr	r3, [r4, #12]
    2814:	b.n	2782 <MTPD::GetStorageInfo(unsigned long)+0xae>
    2816:	ldr	r3, [r4, #12]
    2818:	b.n	2778 <MTPD::GetStorageInfo(unsigned long)+0xa4>
    281a:	ldr	r3, [r4, #12]
    281c:	b.n	2726 <MTPD::GetStorageInfo(unsigned long)+0x52>
    281e:	nop
    2820:	.word	0x0000f99c

00002824 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
    2824:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      switch(p1)
    2828:	sub.w	r1, r1, #56320	; 0xdc00
    282c:	subs	r1, #1
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
    282e:	sub	sp, #148	; 0x94
    2830:	mov	r4, r0
      switch(p1)
    2832:	cmp	r1, #67	; 0x43
    2834:	bhi.n	28ec <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    2836:	tbh	[pc, r1, lsl #1]
    283a:	.short	0x005c
    283c:	.word	0x0080006e
    2840:	.word	0x005900c6
    2844:	.word	0x00d80059
    2848:	.word	0x01690121
    284c:	.word	0x01b10059
    2850:	.word	0x00590059
    2854:	.word	0x00590059
    2858:	.word	0x00590059
    285c:	.word	0x00590059
    2860:	.word	0x00590059
    2864:	.word	0x00590059
    2868:	.word	0x00590059
    286c:	.word	0x00590059
    2870:	.word	0x00590059
    2874:	.word	0x00590059
    2878:	.word	0x00590059
    287c:	.word	0x00590059
    2880:	.word	0x00590059
    2884:	.word	0x00590059
    2888:	.word	0x00590059
    288c:	.word	0x00590059
    2890:	.word	0x00590059
    2894:	.word	0x00590059
    2898:	.word	0x00590059
    289c:	.word	0x00590059
    28a0:	.word	0x00590059
    28a4:	.word	0x00590059
    28a8:	.word	0x00590059
    28ac:	.word	0x00590059
    28b0:	.word	0x00590059
    28b4:	.word	0x00590059
    28b8:	.word	0x01f70059
    28bc:	.word	0x00590059
    28c0:	.short	0x0044
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    28c2:	ldrb	r3, [r0, #8]
    28c4:	movw	r2, #56388	; 0xdc44
    28c8:	strh.w	r2, [sp, #70]	; 0x46
    28cc:	cmp	r3, #0
    28ce:	beq.w	2d4c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x528>
      write_length_ += len;
    28d2:	ldr	r3, [r4, #12]
    28d4:	adds	r3, #2
    28d6:	str	r3, [r4, #12]
    28d8:	adds	r3, #2
    28da:	str	r3, [r4, #12]
    28dc:	adds	r3, #1
    28de:	str	r3, [r4, #12]
    28e0:	adds	r3, #1
    28e2:	str	r3, [r4, #12]
    28e4:	adds	r3, #4
    28e6:	str	r3, [r4, #12]
    28e8:	adds	r3, #1
    28ea:	str	r3, [r4, #12]
          write8(0);
          break;
        default:
          break;
      }
    }
    28ec:	add	sp, #148	; 0x94
    28ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    28f2:	ldrb	r3, [r0, #8]
    28f4:	movw	r2, #56321	; 0xdc01
    28f8:	strh.w	r2, [sp, #30]
    28fc:	cmp	r3, #0
    28fe:	beq.w	2e60 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x63c>
      write_length_ += len;
    2902:	ldr	r3, [r4, #12]
    2904:	adds	r3, #2
    2906:	str	r3, [r4, #12]
    2908:	adds	r3, #2
    290a:	str	r3, [r4, #12]
    290c:	adds	r3, #1
    290e:	str	r3, [r4, #12]
    2910:	adds	r3, #4
    2912:	str	r3, [r4, #12]
    2914:	b.n	28e4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2916:	ldrb	r3, [r0, #8]
    2918:	movw	r2, #56322	; 0xdc02
    291c:	strh.w	r2, [sp, #36]	; 0x24
    2920:	cmp	r3, #0
    2922:	beq.w	2cce <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4aa>
      write_length_ += len;
    2926:	ldr	r3, [r4, #12]
    2928:	adds	r3, #2
    292a:	str	r3, [r4, #12]
    292c:	adds	r3, #2
    292e:	str	r3, [r4, #12]
    2930:	adds	r3, #1
    2932:	str	r3, [r4, #12]
    2934:	adds	r3, #2
    2936:	str	r3, [r4, #12]
    2938:	b.n	28e4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    293a:	ldrb	r3, [r0, #8]
    293c:	movw	r2, #56323	; 0xdc03
    2940:	strh.w	r2, [sp, #42]	; 0x2a
    2944:	cmp	r3, #0
    2946:	bne.n	2926 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x102>
    2948:	movs	r2, #2
    294a:	add.w	r1, sp, #42	; 0x2a
    294e:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2952:	ldrb	r7, [r4, #8]
    2954:	movs	r6, #4
    2956:	strh.w	r6, [sp, #40]	; 0x28
    295a:	cmp	r7, #0
    295c:	bne.w	2ef6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d2>
    2960:	movs	r2, #2
    2962:	add	r1, sp, #40	; 0x28
    2964:	mov	r0, r4
    2966:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    296a:	ldrb	r5, [r4, #8]
    296c:	strb.w	r7, [sp, #9]
    2970:	cmp	r5, #0
    2972:	bne.w	2ef2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ce>
    2976:	movs	r2, #1
    2978:	add.w	r1, sp, #9
    297c:	mov	r0, r4
    297e:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2982:	ldrb	r7, [r4, #8]
    2984:	strh.w	r5, [sp, #38]	; 0x26
    2988:	cmp	r7, #0
    298a:	bne.w	2eee <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ca>
    298e:	movs	r2, #2
    2990:	add.w	r1, sp, #38	; 0x26
    2994:	mov	r0, r4
    2996:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    299a:	ldrb	r5, [r4, #8]
    299c:	str	r7, [sp, #84]	; 0x54
    299e:	cmp	r5, #0
    29a0:	bne.w	2eca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    29a4:	mov	r2, r6
    29a6:	add	r1, sp, #84	; 0x54
    29a8:	mov	r0, r4
    29aa:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    29ae:	ldrb	r3, [r4, #8]
    29b0:	strb.w	r5, [sp, #8]
    29b4:	cmp	r3, #0
    29b6:	bne.w	2ec6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    29ba:	mov	r0, r4
    29bc:	movs	r2, #1
    29be:	add	r1, sp, #8
    29c0:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    29c4:	b.n	28ec <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    29c6:	ldrb	r3, [r0, #8]
    29c8:	movw	r2, #56324	; 0xdc04
    29cc:	strh.w	r2, [sp, #46]	; 0x2e
    29d0:	cmp	r3, #0
    29d2:	beq.w	2c4c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x428>
      write_length_ += len;
    29d6:	ldr	r3, [r0, #12]
    29d8:	adds	r3, #2
    29da:	str	r3, [r0, #12]
    29dc:	adds	r3, #2
    29de:	str	r3, [r4, #12]
    29e0:	adds	r3, #1
    29e2:	str	r3, [r4, #12]
    29e4:	adds	r3, #8
    29e6:	str	r3, [r4, #12]
    29e8:	b.n	28e4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    29ea:	ldrb	r3, [r0, #8]
    29ec:	movw	r2, #56327	; 0xdc07
    29f0:	strh.w	r2, [sp, #50]	; 0x32
    29f4:	cmp	r3, #0
    29f6:	bne.w	28d2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    29fa:	movs	r2, #2
    29fc:	add.w	r1, sp, #50	; 0x32
    2a00:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2a04:	ldrb	r3, [r4, #8]
    2a06:	movw	r2, #65535	; 0xffff
    2a0a:	strh.w	r2, [sp, #48]	; 0x30
    2a0e:	cmp	r3, #0
    2a10:	bne.w	2ede <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    2a14:	movs	r2, #2
    2a16:	add	r1, sp, #48	; 0x30
    2a18:	mov	r0, r4
    2a1a:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2a1e:	ldrb	r6, [r4, #8]
    2a20:	movs	r5, #1
    2a22:	strb.w	r5, [sp, #14]
    2a26:	cmp	r6, #0
    2a28:	bne.w	2eda <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    2a2c:	mov	r2, r5
    2a2e:	add.w	r1, sp, #14
    2a32:	mov	r0, r4
    2a34:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2a38:	ldrb	r7, [r4, #8]
    2a3a:	strb.w	r6, [sp, #13]
    2a3e:	cmp	r7, #0
    2a40:	bne.w	2eea <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    2a44:	mov	r2, r5
    2a46:	add.w	r1, sp, #13
    2a4a:	mov	r0, r4
    2a4c:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2a50:	ldrb	r6, [r4, #8]
    2a52:	str	r7, [sp, #92]	; 0x5c
    2a54:	cmp	r6, #0
    2a56:	bne.w	2eca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    2a5a:	movs	r2, #4
    2a5c:	add	r1, sp, #92	; 0x5c
    2a5e:	mov	r0, r4
    2a60:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2a64:	ldrb	r3, [r4, #8]
    2a66:	strb.w	r6, [sp, #12]
    2a6a:	cmp	r3, #0
    2a6c:	bne.w	2ec6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    2a70:	mov	r2, r5
    2a72:	mov	r0, r4
    2a74:	add	r1, sp, #12
    2a76:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2a7a:	b.n	28ec <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    2a7c:	ldrb	r3, [r0, #8]
    2a7e:	movw	r2, #56328	; 0xdc08
    2a82:	strh.w	r2, [sp, #54]	; 0x36
    2a86:	cmp	r3, #0
    2a88:	bne.w	28d2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    2a8c:	movs	r2, #2
    2a8e:	add.w	r1, sp, #54	; 0x36
    2a92:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2a96:	ldrb	r6, [r4, #8]
    2a98:	movw	r3, #65535	; 0xffff
    2a9c:	strh.w	r3, [sp, #52]	; 0x34
    2aa0:	cmp	r6, #0
    2aa2:	bne.w	2ede <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    2aa6:	movs	r2, #2
    2aa8:	add	r1, sp, #52	; 0x34
    2aaa:	mov	r0, r4
    2aac:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2ab0:	ldrb	r5, [r4, #8]
    2ab2:	strb.w	r6, [sp, #17]
    2ab6:	cmp	r5, #0
    2ab8:	bne.w	2eda <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    2abc:	movs	r2, #1
    2abe:	add.w	r1, sp, #17
    2ac2:	mov	r0, r4
    2ac4:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2ac8:	ldrb	r6, [r4, #8]
    2aca:	strb.w	r5, [sp, #16]
    2ace:	cmp	r6, #0
    2ad0:	bne.w	2eea <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    2ad4:	movs	r2, #1
    2ad6:	add	r1, sp, #16
    2ad8:	mov	r0, r4
    2ada:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2ade:	ldrb	r5, [r4, #8]
    2ae0:	str	r6, [sp, #96]	; 0x60
    2ae2:	cmp	r5, #0
    2ae4:	bne.w	2eca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    2ae8:	movs	r2, #4
    2aea:	add	r1, sp, #96	; 0x60
    2aec:	mov	r0, r4
    2aee:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2af2:	ldrb	r3, [r4, #8]
    2af4:	strb.w	r5, [sp, #15]
    2af8:	cmp	r3, #0
    2afa:	bne.w	2ec6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    2afe:	mov	r0, r4
    2b00:	movs	r2, #1
    2b02:	add.w	r1, sp, #15
    2b06:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2b0a:	b.n	28ec <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    2b0c:	ldrb	r3, [r0, #8]
    2b0e:	movw	r2, #56329	; 0xdc09
    2b12:	strh.w	r2, [sp, #58]	; 0x3a
    2b16:	cmp	r3, #0
    2b18:	bne.w	28d2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    2b1c:	movs	r2, #2
    2b1e:	add.w	r1, sp, #58	; 0x3a
    2b22:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2b26:	ldrb	r6, [r4, #8]
    2b28:	movw	r3, #65535	; 0xffff
    2b2c:	strh.w	r3, [sp, #56]	; 0x38
    2b30:	cmp	r6, #0
    2b32:	bne.w	2ede <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    2b36:	movs	r2, #2
    2b38:	add	r1, sp, #56	; 0x38
    2b3a:	mov	r0, r4
    2b3c:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2b40:	ldrb	r5, [r4, #8]
    2b42:	strb.w	r6, [sp, #20]
    2b46:	cmp	r5, #0
    2b48:	bne.w	2eda <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    2b4c:	movs	r2, #1
    2b4e:	add	r1, sp, #20
    2b50:	mov	r0, r4
    2b52:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2b56:	ldrb	r6, [r4, #8]
    2b58:	strb.w	r5, [sp, #19]
    2b5c:	cmp	r6, #0
    2b5e:	bne.w	2eea <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    2b62:	movs	r2, #1
    2b64:	add.w	r1, sp, #19
    2b68:	mov	r0, r4
    2b6a:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2b6e:	ldrb	r5, [r4, #8]
    2b70:	str	r6, [sp, #100]	; 0x64
    2b72:	cmp	r5, #0
    2b74:	bne.w	2eca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    2b78:	movs	r2, #4
    2b7a:	add	r1, sp, #100	; 0x64
    2b7c:	mov	r0, r4
    2b7e:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2b82:	ldrb	r3, [r4, #8]
    2b84:	strb.w	r5, [sp, #18]
    2b88:	cmp	r3, #0
    2b8a:	bne.w	2ec6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    2b8e:	mov	r0, r4
    2b90:	movs	r2, #1
    2b92:	add.w	r1, sp, #18
    2b96:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2b9a:	b.n	28ec <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    2b9c:	ldrb	r3, [r0, #8]
    2b9e:	movw	r2, #56331	; 0xdc0b
    2ba2:	strh.w	r2, [sp, #62]	; 0x3e
    2ba6:	cmp	r3, #0
    2ba8:	bne.w	2902 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xde>
    2bac:	movs	r2, #2
    2bae:	add.w	r1, sp, #62	; 0x3e
    2bb2:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2bb6:	ldrb	r6, [r4, #8]
    2bb8:	movs	r3, #6
    2bba:	strh.w	r3, [sp, #60]	; 0x3c
    2bbe:	cmp	r6, #0
    2bc0:	bne.w	2ed6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b2>
    2bc4:	movs	r2, #2
    2bc6:	add	r1, sp, #60	; 0x3c
    2bc8:	mov	r0, r4
    2bca:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2bce:	ldrb	r5, [r4, #8]
    2bd0:	strb.w	r6, [sp, #22]
    2bd4:	cmp	r5, #0
    2bd6:	bne.w	2ed2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ae>
    2bda:	movs	r2, #1
    2bdc:	add.w	r1, sp, #22
    2be0:	mov	r0, r4
    2be2:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2be6:	ldrb	r6, [r4, #8]
    2be8:	str	r5, [sp, #108]	; 0x6c
    2bea:	cmp	r6, #0
    2bec:	bne.w	2ece <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6aa>
    2bf0:	movs	r2, #4
    2bf2:	add	r1, sp, #108	; 0x6c
    2bf4:	mov	r0, r4
    2bf6:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2bfa:	ldrb	r5, [r4, #8]
    2bfc:	str	r6, [sp, #104]	; 0x68
    2bfe:	cmp	r5, #0
    2c00:	bne.w	2eca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    2c04:	movs	r2, #4
    2c06:	add	r1, sp, #104	; 0x68
    2c08:	mov	r0, r4
    2c0a:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2c0e:	ldrb	r3, [r4, #8]
    2c10:	strb.w	r5, [sp, #21]
    2c14:	cmp	r3, #0
    2c16:	bne.w	2ec6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    2c1a:	mov	r0, r4
    2c1c:	movs	r2, #1
    2c1e:	add.w	r1, sp, #21
    2c22:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2c26:	b.n	28ec <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    2c28:	ldrb	r3, [r0, #8]
    2c2a:	movw	r2, #56385	; 0xdc41
    2c2e:	strh.w	r2, [sp, #66]	; 0x42
    2c32:	cmp	r3, #0
    2c34:	beq.w	2dce <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5aa>
      write_length_ += len;
    2c38:	ldr	r3, [r0, #12]
    2c3a:	adds	r3, #2
    2c3c:	str	r3, [r0, #12]
    2c3e:	adds	r3, #2
    2c40:	str	r3, [r4, #12]
    2c42:	adds	r3, #1
    2c44:	str	r3, [r4, #12]
    2c46:	adds	r3, #8
    2c48:	str	r3, [r4, #12]
    2c4a:	b.n	29e4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c0>
    2c4c:	movs	r2, #2
    2c4e:	add.w	r1, sp, #46	; 0x2e
    2c52:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2c56:	ldrb	r6, [r4, #8]
    2c58:	movs	r5, #8
    2c5a:	strh.w	r5, [sp, #44]	; 0x2c
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2c5e:	cmp	r6, #0
    2c60:	bne.w	2ee6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c2>
    2c64:	movs	r2, #2
    2c66:	add	r1, sp, #44	; 0x2c
    2c68:	mov	r0, r4
    2c6a:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2c6e:	ldrb	r3, [r4, #8]
    2c70:	strb.w	r6, [sp, #11]
    2c74:	cmp	r3, #0
    2c76:	bne.w	2ee2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6be>
    2c7a:	movs	r2, #1
    2c7c:	add.w	r1, sp, #11
    2c80:	mov	r0, r4
    2c82:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2c86:	ldrb	r6, [r4, #8]
    2c88:	movs	r2, #0
    2c8a:	movs	r3, #0
    2c8c:	strd	r2, r3, [sp, #120]	; 0x78
    2c90:	cmp	r6, #0
    2c92:	bne.w	2efa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d6>
    2c96:	mov	r2, r5
    2c98:	add	r1, sp, #120	; 0x78
    2c9a:	mov	r0, r4
    2c9c:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2ca0:	ldrb	r5, [r4, #8]
    2ca2:	str	r6, [sp, #88]	; 0x58
    2ca4:	cmp	r5, #0
    2ca6:	bne.w	2eca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    2caa:	movs	r2, #4
    2cac:	add	r1, sp, #88	; 0x58
    2cae:	mov	r0, r4
    2cb0:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2cb4:	ldrb	r3, [r4, #8]
    2cb6:	strb.w	r5, [sp, #10]
    2cba:	cmp	r3, #0
    2cbc:	bne.w	2ec6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    2cc0:	mov	r0, r4
    2cc2:	movs	r2, #1
    2cc4:	add.w	r1, sp, #10
    2cc8:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2ccc:	b.n	28ec <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    2cce:	movs	r2, #2
    2cd0:	add	r1, sp, #36	; 0x24
    2cd2:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2cd6:	ldrb	r7, [r4, #8]
    2cd8:	movs	r6, #4
    2cda:	strh.w	r6, [sp, #34]	; 0x22
    2cde:	cmp	r7, #0
    2ce0:	bne.w	2ef6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d2>
    2ce4:	movs	r2, #2
    2ce6:	add.w	r1, sp, #34	; 0x22
    2cea:	mov	r0, r4
    2cec:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2cf0:	ldrb	r5, [r4, #8]
    2cf2:	strb.w	r7, [sp, #7]
    2cf6:	cmp	r5, #0
    2cf8:	bne.w	2ef2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ce>
    2cfc:	movs	r2, #1
    2cfe:	add.w	r1, sp, #7
    2d02:	mov	r0, r4
    2d04:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2d08:	ldrb	r7, [r4, #8]
    2d0a:	strh.w	r5, [sp, #32]
    2d0e:	cmp	r7, #0
    2d10:	bne.w	2eee <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ca>
    2d14:	movs	r2, #2
    2d16:	add	r1, sp, #32
    2d18:	mov	r0, r4
    2d1a:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2d1e:	ldrb	r5, [r4, #8]
    2d20:	str	r7, [sp, #80]	; 0x50
    2d22:	cmp	r5, #0
    2d24:	bne.w	2eca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    2d28:	mov	r2, r6
    2d2a:	add	r1, sp, #80	; 0x50
    2d2c:	mov	r0, r4
    2d2e:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2d32:	ldrb	r3, [r4, #8]
    2d34:	strb.w	r5, [sp, #6]
    2d38:	cmp	r3, #0
    2d3a:	bne.w	2ec6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    2d3e:	mov	r0, r4
    2d40:	movs	r2, #1
    2d42:	add.w	r1, sp, #6
    2d46:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2d4a:	b.n	28ec <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    2d4c:	movs	r2, #2
    2d4e:	add.w	r1, sp, #70	; 0x46
    2d52:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2d56:	ldrb	r6, [r4, #8]
    2d58:	movw	r3, #65535	; 0xffff
    2d5c:	strh.w	r3, [sp, #68]	; 0x44
    2d60:	cmp	r6, #0
    2d62:	bne.w	2ede <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    2d66:	movs	r2, #2
    2d68:	add	r1, sp, #68	; 0x44
    2d6a:	mov	r0, r4
    2d6c:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2d70:	ldrb	r5, [r4, #8]
    2d72:	strb.w	r6, [sp, #27]
    2d76:	cmp	r5, #0
    2d78:	bne.w	2eda <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    2d7c:	movs	r2, #1
    2d7e:	add.w	r1, sp, #27
    2d82:	mov	r0, r4
    2d84:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2d88:	ldrb	r6, [r4, #8]
    2d8a:	strb.w	r5, [sp, #26]
    2d8e:	cmp	r6, #0
    2d90:	bne.w	2eea <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    2d94:	movs	r2, #1
    2d96:	add.w	r1, sp, #26
    2d9a:	mov	r0, r4
    2d9c:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2da0:	ldrb	r5, [r4, #8]
    2da2:	str	r6, [sp, #116]	; 0x74
    2da4:	cmp	r5, #0
    2da6:	bne.w	2eca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    2daa:	movs	r2, #4
    2dac:	add	r1, sp, #116	; 0x74
    2dae:	mov	r0, r4
    2db0:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2db4:	ldrb	r3, [r4, #8]
    2db6:	strb.w	r5, [sp, #25]
    2dba:	cmp	r3, #0
    2dbc:	bne.w	2ec6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    2dc0:	mov	r0, r4
    2dc2:	movs	r2, #1
    2dc4:	add.w	r1, sp, #25
    2dc8:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2dcc:	b.n	28ec <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    2dce:	movs	r2, #2
    2dd0:	add.w	r1, sp, #66	; 0x42
    2dd4:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2dd8:	ldrb	r5, [r4, #8]
    2dda:	movs	r3, #10
    2ddc:	strh.w	r3, [sp, #64]	; 0x40
    2de0:	cmp	r5, #0
    2de2:	bne.w	2f06 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6e2>
    2de6:	movs	r2, #2
    2de8:	add	r1, sp, #64	; 0x40
    2dea:	mov	r0, r4
    2dec:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2df0:	ldrb	r3, [r4, #8]
    2df2:	strb.w	r5, [sp, #24]
    2df6:	cmp	r3, #0
    2df8:	bne.w	2f02 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6de>
    2dfc:	movs	r2, #1
    2dfe:	add	r1, sp, #24
    2e00:	mov	r0, r4
    2e02:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2e06:	ldrb	r3, [r4, #8]
    2e08:	mov.w	r8, #0
    2e0c:	mov.w	r9, #0
    2e10:	strd	r8, r9, [sp, #136]	; 0x88
    2e14:	cmp	r3, #0
    2e16:	bne.n	2efe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6da>
    2e18:	movs	r2, #8
    2e1a:	add	r1, sp, #136	; 0x88
    2e1c:	mov	r0, r4
    2e1e:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2e22:	ldrb	r6, [r4, #8]
    2e24:	strd	r8, r9, [sp, #128]	; 0x80
    2e28:	cmp	r6, #0
    2e2a:	bne.n	2efa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d6>
    2e2c:	movs	r2, #8
    2e2e:	add	r1, sp, #128	; 0x80
    2e30:	mov	r0, r4
    2e32:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2e36:	ldrb	r5, [r4, #8]
    2e38:	str	r6, [sp, #112]	; 0x70
    2e3a:	cmp	r5, #0
    2e3c:	bne.n	2eca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    2e3e:	movs	r2, #4
    2e40:	add	r1, sp, #112	; 0x70
    2e42:	mov	r0, r4
    2e44:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2e48:	ldrb	r3, [r4, #8]
    2e4a:	strb.w	r5, [sp, #23]
    2e4e:	cmp	r3, #0
    2e50:	bne.n	2ec6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    2e52:	mov	r0, r4
    2e54:	movs	r2, #1
    2e56:	add.w	r1, sp, #23
    2e5a:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2e5e:	b.n	28ec <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    2e60:	movs	r2, #2
    2e62:	add.w	r1, sp, #30
    2e66:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2e6a:	ldrb	r6, [r4, #8]
    2e6c:	movs	r3, #6
    2e6e:	strh.w	r3, [sp, #28]
    2e72:	cbnz	r6, 2ed6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b2>
    2e74:	movs	r2, #2
    2e76:	add	r1, sp, #28
    2e78:	mov	r0, r4
    2e7a:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2e7e:	ldrb	r5, [r4, #8]
    2e80:	strb.w	r6, [sp, #5]
    2e84:	cbnz	r5, 2ed2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ae>
    2e86:	movs	r2, #1
    2e88:	add.w	r1, sp, #5
    2e8c:	mov	r0, r4
    2e8e:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2e92:	ldrb	r6, [r4, #8]
    2e94:	str	r5, [sp, #76]	; 0x4c
    2e96:	cbnz	r6, 2ece <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6aa>
    2e98:	movs	r2, #4
    2e9a:	add	r1, sp, #76	; 0x4c
    2e9c:	mov	r0, r4
    2e9e:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2ea2:	ldrb	r5, [r4, #8]
    2ea4:	str	r6, [sp, #72]	; 0x48
    2ea6:	cbnz	r5, 2eca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    2ea8:	movs	r2, #4
    2eaa:	add	r1, sp, #72	; 0x48
    2eac:	mov	r0, r4
    2eae:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2eb2:	ldrb	r3, [r4, #8]
    2eb4:	strb.w	r5, [sp, #4]
    2eb8:	cbnz	r3, 2ec6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    2eba:	mov	r0, r4
    2ebc:	movs	r2, #1
    2ebe:	add	r1, sp, #4
    2ec0:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    2ec4:	b.n	28ec <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    2ec6:	ldr	r3, [r4, #12]
    2ec8:	b.n	28e8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc4>
    2eca:	ldr	r3, [r4, #12]
    2ecc:	b.n	28e4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
    2ece:	ldr	r3, [r4, #12]
    2ed0:	b.n	2910 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xec>
    2ed2:	ldr	r3, [r4, #12]
    2ed4:	b.n	290c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe8>
    2ed6:	ldr	r3, [r4, #12]
    2ed8:	b.n	2908 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe4>
    2eda:	ldr	r3, [r4, #12]
    2edc:	b.n	28dc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
    2ede:	ldr	r3, [r4, #12]
    2ee0:	b.n	28d8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb4>
    2ee2:	ldr	r3, [r4, #12]
    2ee4:	b.n	29e0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1bc>
    2ee6:	ldr	r3, [r4, #12]
    2ee8:	b.n	29dc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b8>
    2eea:	ldr	r3, [r4, #12]
    2eec:	b.n	28e0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbc>
    2eee:	ldr	r3, [r4, #12]
    2ef0:	b.n	2934 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x110>
    2ef2:	ldr	r3, [r4, #12]
    2ef4:	b.n	2930 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10c>
    2ef6:	ldr	r3, [r4, #12]
    2ef8:	b.n	292c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x108>
    2efa:	ldr	r3, [r4, #12]
    2efc:	b.n	29e4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c0>
    2efe:	ldr	r3, [r4, #12]
    2f00:	b.n	2c46 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x422>
    2f02:	ldr	r3, [r4, #12]
    2f04:	b.n	2c42 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x41e>
    2f06:	ldr	r3, [r4, #12]
    2f08:	b.n	2c3e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x41a>
    2f0a:	nop

00002f0c <MTPD::receive_buffer()>:
      data_buffer_ = usb_malloc();
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::receive_buffer() {
    2f0c:	push	{r4, lr}
    2f0e:	mov	r4, r0
    2f10:	ldr	r3, [r4, #4]
    while (!data_buffer_) {
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
    2f12:	movs	r0, #5
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::receive_buffer() {
    while (!data_buffer_) {
    2f14:	cbnz	r3, 2f1e <MTPD::receive_buffer()+0x12>
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
    2f16:	bl	9804 <usb_rx>
    2f1a:	str	r0, [r4, #4]
      if (!data_buffer_) mtp_yield();
    2f1c:	cbz	r0, 2f20 <MTPD::receive_buffer()+0x14>
    2f1e:	pop	{r4, pc}
    2f20:	bl	1138 <mtp_yield()>
    2f24:	b.n	2f10 <MTPD::receive_buffer()+0x4>
    2f26:	nop

00002f28 <MTPD::GetObject(unsigned long)>:
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    2f28:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2f2c:	mov	r6, r0
    uint32_t size = storage_->GetSize(object_id);
    2f2e:	ldr	r0, [r0, #0]
    2f30:	ldr	r3, [r0, #0]
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    2f32:	sub	sp, #8
    uint32_t size = storage_->GetSize(object_id);
    2f34:	ldr	r3, [r3, #44]	; 0x2c
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    2f36:	mov	r8, r1
    uint32_t size = storage_->GetSize(object_id);
    2f38:	blx	r3
    if (write_get_length_) {
    2f3a:	ldrb	r5, [r6, #8]
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    uint32_t size = storage_->GetSize(object_id);
    2f3c:	mov	r7, r0
    if (write_get_length_) {
    2f3e:	cbnz	r5, 2f98 <MTPD::GetObject(unsigned long)+0x70>
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    2f40:	cbz	r0, 2f92 <MTPD::GetObject(unsigned long)+0x6a>
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
        data_buffer_->len += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    2f42:	mov	r9, r5
    2f44:	b.n	2f4a <MTPD::GetObject(unsigned long)+0x22>
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    2f46:	cmp	r7, r5
    2f48:	bls.n	2f92 <MTPD::GetObject(unsigned long)+0x6a>
        get_buffer();
    2f4a:	mov	r0, r6
    2f4c:	bl	1db8 <MTPD::get_buffer()>
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
    2f50:	ldmia.w	r6, {r0, r3}
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
        get_buffer();
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
    2f54:	ldrh.w	r2, [r3], #8
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
    2f58:	ldr	r1, [r0, #0]
    2f5a:	subs	r4, r7, r5
    2f5c:	rsb	lr, r2, #64	; 0x40
    2f60:	cmp	r4, lr
    2f62:	it	cs
    2f64:	movcs	r4, lr
    2f66:	str	r4, [sp, #0]
    2f68:	add	r3, r2
    2f6a:	ldr.w	sl, [r1, #52]	; 0x34
    2f6e:	mov	r2, r5
    2f70:	mov	r1, r8
    2f72:	blx	sl
        pos += to_copy;
        data_buffer_->len += to_copy;
    2f74:	ldr	r1, [r6, #4]
    2f76:	ldrh	r3, [r1, #0]
    2f78:	add	r3, r4
    2f7a:	uxth	r3, r3
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    2f7c:	cmp	r3, #64	; 0x40
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
    2f7e:	add	r5, r4
        data_buffer_->len += to_copy;
    2f80:	strh	r3, [r1, #0]
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    2f82:	bne.n	2f46 <MTPD::GetObject(unsigned long)+0x1e>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
    2f84:	movs	r0, #4
    2f86:	bl	9974 <usb_tx>
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    2f8a:	cmp	r7, r5
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
        data_buffer_->len += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    2f8c:	str.w	r9, [r6, #4]
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    2f90:	bhi.n	2f4a <MTPD::GetObject(unsigned long)+0x22>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
        }
      }
    }
  }
    2f92:	add	sp, #8
    2f94:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    2f98:	ldr	r3, [r6, #12]
    2f9a:	add	r7, r3
    2f9c:	str	r7, [r6, #12]
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
        }
      }
    }
  }
    2f9e:	add	sp, #8
    2fa0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00002fa4 <MTPD::read(char*, unsigned long)>:
                CONTAINER->params[0], CONTAINER->params[1], CONTAINER->params[2]);  }


  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    2fa4:	cbz	r2, 3010 <MTPD::read(char*, unsigned long)+0x6c>
                CONTAINER->op, CONTAINER->len, CONTAINER->type, CONTAINER->transaction_id, \
                CONTAINER->params[0], CONTAINER->params[1], CONTAINER->params[2]);  }


  void MTPD::read(char* data, uint32_t size) 
  {
    2fa6:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2faa:	mov	r6, r0
    2fac:	mov	r5, r1
    while (size) {
    2fae:	mov	r8, r2
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
      if (data_buffer_->index == data_buffer_->len) {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
    2fb0:	movs	r7, #0


  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
      receive_buffer();
    2fb2:	mov	r0, r6
    2fb4:	bl	2f0c <MTPD::receive_buffer()>
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    2fb8:	ldr	r3, [r6, #4]
    2fba:	ldrh.w	lr, [r3, #2]
    2fbe:	ldrh.w	ip, [r3]
    2fc2:	rsb	r4, lr, ip
    2fc6:	cmp	r4, r8
    2fc8:	it	cs
    2fca:	movcs	r4, r8
      to_copy = min(to_copy, size);
      if (data) {
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
    2fcc:	add.w	r1, r3, #8
    2fd0:	add	r1, lr
    2fd2:	mov	r0, r5
    2fd4:	mov	r2, r4
        data += to_copy;
      }
      size -= to_copy;
    2fd6:	rsb	r8, r4, r8
  {
    while (size) {
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, size);
      if (data) {
    2fda:	cbz	r5, 2fec <MTPD::read(char*, unsigned long)+0x48>
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
    2fdc:	bl	8f84 <memcpy>
    2fe0:	ldr	r3, [r6, #4]
    2fe2:	ldrh.w	lr, [r3, #2]
    2fe6:	ldrh.w	ip, [r3]
        data += to_copy;
    2fea:	add	r5, r4
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
    2fec:	add	r4, lr
    2fee:	uxth	r4, r4
      if (data_buffer_->index == data_buffer_->len) {
    2ff0:	cmp	ip, r4
      if (data) {
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
        data += to_copy;
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
    2ff2:	strh	r4, [r3, #2]
      if (data_buffer_->index == data_buffer_->len) {
    2ff4:	beq.n	3000 <MTPD::read(char*, unsigned long)+0x5c>
                CONTAINER->params[0], CONTAINER->params[1], CONTAINER->params[2]);  }


  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    2ff6:	cmp.w	r8, #0
    2ffa:	bne.n	2fb2 <MTPD::read(char*, unsigned long)+0xe>
    2ffc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        data += to_copy;
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
      if (data_buffer_->index == data_buffer_->len) {
        usb_free(data_buffer_);
    3000:	mov	r0, r3
    3002:	bl	97b8 <usb_free>
        data_buffer_ = NULL;
    3006:	str	r7, [r6, #4]
                CONTAINER->params[0], CONTAINER->params[1], CONTAINER->params[2]);  }


  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    3008:	cmp.w	r8, #0
    300c:	bne.n	2fb2 <MTPD::read(char*, unsigned long)+0xe>
    300e:	b.n	2ffc <MTPD::read(char*, unsigned long)+0x58>
    3010:	bx	lr
    3012:	nop

00003014 <MTPD::readstring(char*)>:

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    3014:	push	{r4, r5, r6, lr}
    3016:	sub	sp, #8
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    3018:	movs	r2, #1
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    301a:	mov	r4, r1
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    301c:	add.w	r1, sp, #6
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    3020:	mov	r6, r0
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    3022:	bl	2fa4 <MTPD::read(char*, unsigned long)>
    3026:	ldrb.w	r2, [sp, #6]
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
    302a:	cbz	r4, 304c <MTPD::readstring(char*)+0x38>
    302c:	adds	r5, r4, r2
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    302e:	cbz	r2, 3048 <MTPD::readstring(char*)+0x34>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3030:	movs	r2, #2
    3032:	add.w	r1, sp, #6
    3036:	mov	r0, r6
    3038:	bl	2fa4 <MTPD::read(char*, unsigned long)>
    303c:	ldrh.w	r3, [sp, #6]
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
        int16_t c2;
        *(buffer++) = c2 = read16();
    3040:	strb.w	r3, [r4], #1
  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    3044:	cmp	r5, r4
    3046:	bne.n	3030 <MTPD::readstring(char*)+0x1c>
        int16_t c2;
        *(buffer++) = c2 = read16();
      }
    }
  }
    3048:	add	sp, #8
    304a:	pop	{r4, r5, r6, pc}
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    304c:	lsls	r2, r2, #1
    304e:	mov	r1, r4
    3050:	mov	r0, r6
    3052:	bl	2fa4 <MTPD::read(char*, unsigned long)>
    3056:	b.n	3048 <MTPD::readstring(char*)+0x34>

00003058 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.7]>:
      }
    }
    storage_->close();
  }
  
    uint32_t MTPD::setObjectPropValue(uint32_t p1, uint32_t p2)
    3058:	push	{r4, r5, lr}
    305a:	sub	sp, #132	; 0x84
    305c:	mov	r4, r0
    305e:	mov	r5, r1
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    3060:	movs	r2, #12
    3062:	mov	r1, sp
    3064:	bl	2fa4 <MTPD::read(char*, unsigned long)>
      receive_buffer();
      if(p2==0xDC07)
      {
        char filename[128];
        ReadMTPHeader();
        readstring(filename);
    3068:	mov	r1, sp
    306a:	mov	r0, r4
    306c:	bl	3014 <MTPD::readstring(char*)>

        storage_->rename(p1,filename);
    3070:	ldr	r0, [r4, #0]
    3072:	ldr	r3, [r0, #0]
    3074:	mov	r2, sp
    3076:	mov	r1, r5
    3078:	ldr	r3, [r3, #76]	; 0x4c
    307a:	blx	r3

        return 0x2001;
      }
      else
        return 0x2005;
    }
    307c:	movw	r0, #8193	; 0x2001
    3080:	add	sp, #132	; 0x84
    3082:	pop	{r4, r5, pc}

00003084 <MTPD::SendObjectInfo(unsigned long, unsigned long)>:
        data_buffer_ = NULL;
      }
    }
  }

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    3084:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3088:	sub	sp, #276	; 0x114
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    308a:	add	r7, sp, #16
    308c:	mov	r1, r7
        data_buffer_ = NULL;
      }
    }
  }

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    308e:	mov	sl, r2
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    3090:	movs	r2, #12
        data_buffer_ = NULL;
      }
    }
  }

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    3092:	mov	r5, r0
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    3094:	bl	2fa4 <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    3098:	ldrh	r3, [r7, #4]
    309a:	cmp	r3, #2
    309c:	it	eq
    309e:	ldreq	r4, [r7, #0]
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    30a0:	mov.w	r2, #4
    30a4:	mov	r1, r7
    30a6:	mov	r0, r5
    30a8:	ite	eq
    30aa:	subeq	r4, #65	; 0x41
  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
    30ac:	mvnne.w	r4, #52	; 0x34
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    30b0:	bl	2fa4 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    30b4:	movs	r2, #2
    30b6:	mov	r1, r7
    30b8:	mov	r0, r5
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    30ba:	ldr.w	r9, [r7]
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    30be:	bl	2fa4 <MTPD::read(char*, unsigned long)>
    30c2:	ldrh.w	r8, [r7]
  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    uint32_t len = ReadMTPHeader();
    char filename[256];

    uint32_t store = read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    30c6:	movw	r3, #12289	; 0x3001
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    30ca:	movs	r2, #2
    30cc:	mov	r1, r7
    30ce:	mov	r0, r5
  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    uint32_t len = ReadMTPHeader();
    char filename[256];

    uint32_t store = read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    30d0:	rsb	r8, r3, r8
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    30d4:	bl	2fa4 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    30d8:	movs	r2, #4
    30da:	mov	r1, r7
    30dc:	mov	r0, r5
    30de:	bl	2fa4 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    30e2:	movs	r2, #2
    30e4:	mov	r1, r7
    30e6:	mov	r0, r5
    30e8:	bl	2fa4 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    30ec:	movs	r2, #4
    30ee:	mov	r1, r7
    30f0:	mov	r0, r5
    30f2:	bl	2fa4 <MTPD::read(char*, unsigned long)>
    30f6:	movs	r2, #4
    30f8:	mov	r1, r7
    30fa:	mov	r0, r5
    30fc:	bl	2fa4 <MTPD::read(char*, unsigned long)>
    3100:	movs	r2, #4
    3102:	mov	r1, r7
    3104:	mov	r0, r5
    3106:	bl	2fa4 <MTPD::read(char*, unsigned long)>
    310a:	movs	r2, #4
    310c:	mov	r1, r7
    310e:	mov	r0, r5
    3110:	bl	2fa4 <MTPD::read(char*, unsigned long)>
    3114:	movs	r2, #4
    3116:	mov	r1, r7
    3118:	mov	r0, r5
    311a:	bl	2fa4 <MTPD::read(char*, unsigned long)>
    311e:	movs	r2, #4
    3120:	mov	r1, r7
    3122:	mov	r0, r5
    3124:	bl	2fa4 <MTPD::read(char*, unsigned long)>
    3128:	movs	r2, #4
    312a:	mov	r1, r7
    312c:	mov	r0, r5
    312e:	bl	2fa4 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3132:	movs	r2, #2
    3134:	mov	r1, r7
    3136:	mov	r0, r5
    3138:	bl	2fa4 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    313c:	movs	r2, #4
    313e:	mov	r1, r7
    3140:	mov	r0, r5
    3142:	bl	2fa4 <MTPD::read(char*, unsigned long)>
    3146:	movs	r2, #4
    3148:	mov	r1, r7
    314a:	mov	r0, r5
    314c:	bl	2fa4 <MTPD::read(char*, unsigned long)>
    read32(); len-=4; // parent
    read16(); len-=2; // association type
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    3150:	mov	r1, r7
    3152:	mov	r0, r5
    3154:	bl	3014 <MTPD::readstring(char*)>
    3158:	mov	r0, r7
    315a:	bl	c380 <strlen>
    315e:	adds	r0, #1
    3160:	sub.w	r4, r4, r0, lsl #1
  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    uint32_t len = ReadMTPHeader();
    char filename[256];

    uint32_t store = read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    3164:	clz	r8, r8
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    3168:	cmp	r4, #3
  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    uint32_t len = ReadMTPHeader();
    char filename[256];

    uint32_t store = read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    316a:	mov.w	r8, r8, lsr #5
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    316e:	bls.n	318a <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x106>
    3170:	mov	r6, r4
    3172:	add.w	fp, sp, #12
    3176:	subs	r6, #4
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3178:	movs	r2, #4
    317a:	mov	r1, fp
    317c:	mov	r0, r5
    317e:	bl	2fa4 <MTPD::read(char*, unsigned long)>
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    3182:	cmp	r6, #3
    3184:	bhi.n	3176 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xf2>
    3186:	and.w	r4, r4, #3
    318a:	add.w	fp, sp, #12
    while(len) {read8(); len--;}
    318e:	cbz	r4, 319e <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x11a>
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    3190:	movs	r2, #1
    3192:	mov	r1, fp
    3194:	mov	r0, r5
    3196:	bl	2fa4 <MTPD::read(char*, unsigned long)>
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    while(len) {read8(); len--;}
    319a:	subs	r4, #1
    319c:	bne.n	3190 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x10c>
    
    return storage_->Create(store, parent, dir, filename);
    319e:	ldr	r0, [r5, #0]
    31a0:	ldr	r4, [r0, #0]
    31a2:	str	r7, [sp, #0]
    31a4:	mov	r3, r8
    31a6:	mov	r2, sl
    31a8:	mov	r1, r9
    31aa:	ldr	r4, [r4, #48]	; 0x30
    31ac:	blx	r4
  }
    31ae:	add	sp, #276	; 0x114
    31b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000031b4 <MTPD::SendObject()>:

  void MTPD::SendObject() {
    31b4:	push	{r4, r5, r6, r7, lr}
    31b6:	sub	sp, #20
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    31b8:	movs	r2, #12
    31ba:	add	r1, sp, #4
    while(len) {read8(); len--;}
    
    return storage_->Create(store, parent, dir, filename);
  }

  void MTPD::SendObject() {
    31bc:	mov	r7, r0
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    31be:	bl	2fa4 <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    31c2:	ldrh.w	r3, [sp, #8]
    31c6:	cmp	r3, #2
    31c8:	beq.n	31d6 <MTPD::SendObject()+0x22>
      {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
      }
    }
    storage_->close();
    31ca:	ldr	r0, [r7, #0]
    31cc:	ldr	r3, [r0, #0]
    31ce:	ldr	r3, [r3, #60]	; 0x3c
    31d0:	blx	r3
  }
    31d2:	add	sp, #20
    31d4:	pop	{r4, r5, r6, r7, pc}
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
      return header.len - 12;
    31d6:	ldr	r5, [sp, #4]
    return storage_->Create(store, parent, dir, filename);
  }

  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    31d8:	subs	r5, #12
    31da:	beq.n	31ca <MTPD::SendObject()+0x16>
      data_buffer_->index += to_copy;
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
      {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
    31dc:	movs	r6, #0

  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
    31de:	mov	r0, r7
    31e0:	bl	2f0c <MTPD::receive_buffer()>
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
    31e4:	ldmia.w	r7, {r0, r1}
  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    31e8:	ldrh	r2, [r1, #2]
    31ea:	ldrh.w	r4, [r1], #8
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
    31ee:	ldr	r3, [r0, #0]
  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    31f0:	subs	r4, r4, r2
    31f2:	cmp	r4, r5
    31f4:	it	cs
    31f6:	movcs	r4, r5
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
    31f8:	ldr	r3, [r3, #56]	; 0x38
    31fa:	add	r1, r2
    31fc:	mov	r2, r4
    31fe:	blx	r3
      data_buffer_->index += to_copy;
    3200:	ldr	r0, [r7, #4]
    3202:	ldrh	r3, [r0, #2]
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    3204:	ldrh	r2, [r0, #0]
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
      data_buffer_->index += to_copy;
    3206:	add	r3, r4
    3208:	uxth	r3, r3
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    320a:	cmp	r2, r3
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
      data_buffer_->index += to_copy;
      len -= to_copy;
    320c:	sub.w	r5, r5, r4
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
      data_buffer_->index += to_copy;
    3210:	strh	r3, [r0, #2]
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    3212:	beq.n	321a <MTPD::SendObject()+0x66>
    return storage_->Create(store, parent, dir, filename);
  }

  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    3214:	cmp	r5, #0
    3216:	bne.n	31de <MTPD::SendObject()+0x2a>
    3218:	b.n	31ca <MTPD::SendObject()+0x16>
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
      data_buffer_->index += to_copy;
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
      {
        usb_free(data_buffer_);
    321a:	bl	97b8 <usb_free>
        data_buffer_ = NULL;
    321e:	str	r6, [r7, #4]
    return storage_->Create(store, parent, dir, filename);
  }

  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    3220:	cmp	r5, #0
    3222:	bne.n	31de <MTPD::SendObject()+0x2a>
    3224:	b.n	31ca <MTPD::SendObject()+0x16>
    3226:	nop

00003228 <MTPD::loop()>:
      else
        return 0x2005;
    }

  void MTPD::loop(void) 
  {
    3228:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    322c:	mov	r5, r0
    322e:	sub	sp, #20
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
    3230:	movs	r0, #5
    3232:	bl	9804 <usb_rx>
    3236:	cbz	r0, 3260 <MTPD::loop()+0x38>
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
      if (receive_buffer->len >= 12) {
    3238:	ldrh	r3, [r0, #0]
    323a:	cmp	r3, #11
    323c:	mov	r4, r0
    323e:	bls.n	3272 <MTPD::loop()+0x4a>
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
    3240:	ldrh	r3, [r0, #12]
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
    3242:	movs	r7, #12
        
        if (CONTAINER->type == 1) { // command
    3244:	cmp	r3, #1
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
    3246:	strh	r7, [r0, #0]
        
        if (CONTAINER->type == 1) { // command
    3248:	beq.n	327a <MTPD::loop()+0x52>
    324a:	mov.w	r0, #8192	; 0x2000
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    324e:	movs	r6, #0
        } else {
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
        CONTAINER->type = 3;
    3250:	movs	r3, #3
        CONTAINER->op = return_code;
    3252:	strh	r0, [r4, #14]
        CONTAINER->params[0] = p1;
    3254:	str	r6, [r4, #20]
        } else {
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
        CONTAINER->type = 3;
    3256:	strh	r3, [r4, #12]
        CONTAINER->op = return_code;
        CONTAINER->params[0] = p1;
        printContainer();

        usb_tx(MTP_TX_ENDPOINT, receive_buffer);
    3258:	mov	r1, r4
    325a:	movs	r0, #4
    325c:	bl	9974 <usb_tx>
      } else {
          usb_free(receive_buffer);
      }
    }
    // Maybe put event handling inside mtp_yield()?
    if ((receive_buffer = usb_rx(MTP_EVENT_ENDPOINT))) {
    3260:	movs	r0, #6
    3262:	bl	9804 <usb_rx>
    3266:	cbz	r0, 326c <MTPD::loop()+0x44>
      usb_free(receive_buffer);
    3268:	bl	97b8 <usb_free>
    }
  }
    326c:	add	sp, #20
    326e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        printContainer();

        usb_tx(MTP_TX_ENDPOINT, receive_buffer);
        receive_buffer = 0;
      } else {
          usb_free(receive_buffer);
    3272:	mov	r0, r4
    3274:	bl	97b8 <usb_free>
    3278:	b.n	3260 <MTPD::loop()+0x38>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    327a:	ldrh	r2, [r0, #14]
    327c:	movw	r1, #4107	; 0x100b
    3280:	cmp	r2, r1
    3282:	beq.w	370a <MTPD::loop()+0x4e2>
    3286:	bhi.n	3306 <MTPD::loop()+0xde>
    3288:	movw	r1, #4101	; 0x1005
    328c:	cmp	r2, r1
    328e:	beq.w	36ca <MTPD::loop()+0x4a2>
    3292:	bhi.w	33c4 <MTPD::loop()+0x19c>
    3296:	movw	r3, #4098	; 0x1002
    329a:	cmp	r2, r3
    329c:	beq.w	34c2 <MTPD::loop()+0x29a>
    32a0:	bls.w	3428 <MTPD::loop()+0x200>
    32a4:	movw	r3, #4099	; 0x1003
    32a8:	cmp	r2, r3
    32aa:	beq.w	36c2 <MTPD::loop()+0x49a>
    32ae:	movw	r3, #4100	; 0x1004
    32b2:	cmp	r2, r3
    32b4:	bne.w	3420 <MTPD::loop()+0x1f8>
              openSession();
              break;
            case 0x1003:  // CloseSession
              break;
            case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    32b8:	movs	r3, #1
    32ba:	movs	r7, #0
    32bc:	strb	r3, [r5, #8]
    32be:	mov	r0, r5
    32c0:	str	r7, [r5, #12]
    32c2:	bl	21ac <MTPD::WriteStorageIDs()>
    32c6:	ldr	r3, [r5, #12]
    32c8:	strb	r7, [r5, #8]
    32ca:	adds	r3, #12
    32cc:	movs	r2, #2
    32ce:	strh.w	r2, [sp, #8]
    32d2:	str	r3, [sp, #4]
    32d4:	ldrh	r3, [r4, #14]
    32d6:	strh.w	r3, [sp, #10]
    32da:	ldr	r3, [r4, #16]
    32dc:	str	r3, [sp, #12]
    32de:	mov	r0, r5
    32e0:	movs	r2, #12
    32e2:	add	r1, sp, #4
    32e4:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    32e8:	mov	r0, r5
    32ea:	bl	21ac <MTPD::WriteStorageIDs()>
              break;
            case 0x1008:  // GetObjectInfo
              TRANSMIT(GetObjectInfo(CONTAINER->params[0]));
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(CONTAINER->params[0]));
    32ee:	mov	r0, r5
    32f0:	bl	1db8 <MTPD::get_buffer()>
    32f4:	movs	r0, #4
    32f6:	ldr	r1, [r5, #4]
    32f8:	bl	9974 <usb_tx>
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    32fc:	mov	r6, r7
              break;
            case 0x1008:  // GetObjectInfo
              TRANSMIT(GetObjectInfo(CONTAINER->params[0]));
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(CONTAINER->params[0]));
    32fe:	str	r7, [r5, #4]
              break;
    3300:	movw	r0, #8193	; 0x2001
    3304:	b.n	3250 <MTPD::loop()+0x28>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    3306:	movw	r1, #4121	; 0x1019
    330a:	cmp	r2, r1
    330c:	beq.w	369e <MTPD::loop()+0x476>
    3310:	bhi.n	338c <MTPD::loop()+0x164>
    3312:	movw	r3, #4109	; 0x100d
    3316:	cmp	r2, r3
    3318:	beq.w	3690 <MTPD::loop()+0x468>
    331c:	bcc.w	3670 <MTPD::loop()+0x448>
    3320:	movw	r3, #4116	; 0x1014
    3324:	cmp	r2, r3
    3326:	beq.w	3578 <MTPD::loop()+0x350>
    332a:	movw	r3, #4117	; 0x1015
    332e:	cmp	r2, r3
    3330:	bne.n	3420 <MTPD::loop()+0x1f8>
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(CONTAINER->params[0]));
    3332:	movs	r2, #0
    3334:	movs	r3, #1
    3336:	strb	r3, [r5, #8]
    3338:	str	r2, [r5, #12]
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    333a:	ldr	r2, [r0, #20]
    333c:	movw	r3, #54274	; 0xd402
    3340:	cmp	r2, r3
    3342:	beq.w	3756 <MTPD::loop()+0x52e>
    3346:	movs	r3, #12
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(CONTAINER->params[0]));
    3348:	movs	r1, #0
    334a:	movs	r2, #2
    334c:	strb	r1, [r5, #8]
    334e:	strh.w	r2, [sp, #8]
    3352:	str	r3, [sp, #4]
    3354:	ldrh	r3, [r4, #14]
    3356:	strh.w	r3, [sp, #10]
    335a:	ldr	r3, [r4, #16]
    335c:	str	r3, [sp, #12]
    335e:	movs	r2, #12
    3360:	add	r1, sp, #4
    3362:	mov	r0, r5
    3364:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    3368:	ldr	r2, [r4, #20]
    336a:	movw	r3, #54274	; 0xd402
    336e:	cmp	r2, r3
    3370:	beq.w	374c <MTPD::loop()+0x524>
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(CONTAINER->params[0]));
    3374:	mov	r0, r5
    3376:	bl	1db8 <MTPD::get_buffer()>
    337a:	movs	r6, #0
    337c:	movs	r0, #4
    337e:	ldr	r1, [r5, #4]
    3380:	bl	9974 <usb_tx>
    3384:	str	r6, [r5, #4]
              break;
    3386:	movw	r0, #8193	; 0x2001
    338a:	b.n	3250 <MTPD::loop()+0x28>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    338c:	movw	r1, #38914	; 0x9802
    3390:	cmp	r2, r1
    3392:	beq.w	34d2 <MTPD::loop()+0x2aa>
    3396:	bls.n	3468 <MTPD::loop()+0x240>
    3398:	movw	r3, #38915	; 0x9803
    339c:	cmp	r2, r3
    339e:	beq.w	3532 <MTPD::loop()+0x30a>
    33a2:	movw	r3, #38916	; 0x9804
    33a6:	cmp	r2, r3
    33a8:	bne.n	3420 <MTPD::loop()+0x1f8>
              break;

          case 0x9804:  // setObjectPropertyValue

            p1=CONTAINER->params[0];
            p2=CONTAINER->params[1];
    33aa:	ldr	r7, [r0, #24]
            TRANSMIT(getObjectPropValue(p1,p2));
              break;

          case 0x9804:  // setObjectPropertyValue

            p1=CONTAINER->params[0];
    33ac:	ldr	r6, [r0, #20]
    storage_->close();
  }
  
    uint32_t MTPD::setObjectPropValue(uint32_t p1, uint32_t p2)
    {
      receive_buffer();
    33ae:	mov	r0, r5
    33b0:	bl	2f0c <MTPD::receive_buffer()>
      if(p2==0xDC07)
    33b4:	movw	r3, #56327	; 0xdc07
    33b8:	cmp	r7, r3
    33ba:	beq.w	3764 <MTPD::loop()+0x53c>
    33be:	movw	r0, #8197	; 0x2005
    33c2:	b.n	3250 <MTPD::loop()+0x28>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    33c4:	movw	r1, #4103	; 0x1007
    33c8:	cmp	r2, r1
    33ca:	beq.w	360e <MTPD::loop()+0x3e6>
    33ce:	bcc.w	35fe <MTPD::loop()+0x3d6>
    33d2:	movw	r3, #4104	; 0x1008
    33d6:	cmp	r2, r3
    33d8:	beq.w	35c2 <MTPD::loop()+0x39a>
    33dc:	movw	r3, #4105	; 0x1009
    33e0:	cmp	r2, r3
    33e2:	bne.n	3420 <MTPD::loop()+0x1f8>
              break;
            case 0x1008:  // GetObjectInfo
              TRANSMIT(GetObjectInfo(CONTAINER->params[0]));
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(CONTAINER->params[0]));
    33e4:	movs	r7, #0
    33e6:	movs	r3, #1
    33e8:	strb	r3, [r5, #8]
    33ea:	str	r7, [r5, #12]
    33ec:	ldr	r1, [r0, #20]
    33ee:	mov	r0, r5
    33f0:	bl	2f28 <MTPD::GetObject(unsigned long)>
    33f4:	ldr	r3, [r5, #12]
    33f6:	strb	r7, [r5, #8]
    33f8:	adds	r3, #12
    33fa:	movs	r2, #2
    33fc:	strh.w	r2, [sp, #8]
    3400:	str	r3, [sp, #4]
    3402:	ldrh	r3, [r4, #14]
    3404:	strh.w	r3, [sp, #10]
    3408:	ldr	r3, [r4, #16]
    340a:	str	r3, [sp, #12]
    340c:	add	r1, sp, #4
    340e:	mov	r0, r5
    3410:	movs	r2, #12
    3412:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    3416:	ldr	r1, [r4, #20]
    3418:	mov	r0, r5
    341a:	bl	2f28 <MTPD::GetObject(unsigned long)>
    341e:	b.n	32ee <MTPD::loop()+0xc6>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    3420:	movw	r0, #8197	; 0x2005
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    3424:	movs	r6, #0
    3426:	b.n	3250 <MTPD::loop()+0x28>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    3428:	movw	r3, #4097	; 0x1001
    342c:	cmp	r2, r3
    342e:	bne.n	3420 <MTPD::loop()+0x1f8>
            case 0x1001: // GetDescription
              TRANSMIT(WriteDescriptor());
    3430:	movs	r7, #0
    3432:	movs	r3, #1
    3434:	strb	r3, [r5, #8]
    3436:	mov	r0, r5
    3438:	str	r7, [r5, #12]
    343a:	bl	1f98 <MTPD::WriteDescriptor()>
    343e:	ldr	r3, [r5, #12]
    3440:	strb	r7, [r5, #8]
    3442:	adds	r3, #12
    3444:	movs	r2, #2
    3446:	strh.w	r2, [sp, #8]
    344a:	str	r3, [sp, #4]
    344c:	ldrh	r3, [r4, #14]
    344e:	strh.w	r3, [sp, #10]
    3452:	ldr	r3, [r4, #16]
    3454:	str	r3, [sp, #12]
    3456:	mov	r0, r5
    3458:	movs	r2, #12
    345a:	add	r1, sp, #4
    345c:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    3460:	mov	r0, r5
    3462:	bl	1f98 <MTPD::WriteDescriptor()>
    3466:	b.n	32ee <MTPD::loop()+0xc6>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    3468:	movw	r3, #38913	; 0x9801
    346c:	cmp	r2, r3
    346e:	bne.n	3420 <MTPD::loop()+0x1f8>
          case 0x101A:  // CopyObject
              return_code = 0x2005;
              break;

          case 0x9801:  // getObjectPropsSupported
            p1=CONTAINER->params[0];
    3470:	ldr	r6, [r0, #20]

              TRANSMIT(getObjectPropsSupported(p1));
    3472:	movs	r3, #1
    3474:	movs	r7, #0
    3476:	mov	r1, r6
    3478:	strb	r3, [r5, #8]
    347a:	mov	r0, r5
    347c:	str	r7, [r5, #12]
    347e:	bl	24c0 <MTPD::getObjectPropsSupported(unsigned long)>
    3482:	ldr	r3, [r5, #12]
    3484:	strb	r7, [r5, #8]
    3486:	adds	r3, #12
    3488:	movs	r2, #2
    348a:	strh.w	r2, [sp, #8]
    348e:	str	r3, [sp, #4]
    3490:	ldrh	r3, [r4, #14]
    3492:	strh.w	r3, [sp, #10]
    3496:	ldr	r3, [r4, #16]
    3498:	str	r3, [sp, #12]
    349a:	add	r1, sp, #4
    349c:	mov	r0, r5
    349e:	movs	r2, #12
    34a0:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    34a4:	mov	r1, r6
    34a6:	mov	r0, r5
    34a8:	bl	24c0 <MTPD::getObjectPropsSupported(unsigned long)>

          case 0x9803:  // getObjectPropertyValue
            p1=CONTAINER->params[0];
            p2=CONTAINER->params[1];

            TRANSMIT(getObjectPropValue(p1,p2));
    34ac:	mov	r0, r5
    34ae:	bl	1db8 <MTPD::get_buffer()>
    34b2:	movs	r0, #4
    34b4:	ldr	r1, [r5, #4]
    34b6:	bl	9974 <usb_tx>
    34ba:	str	r7, [r5, #4]
              break;
    34bc:	movw	r0, #8193	; 0x2001
    34c0:	b.n	3250 <MTPD::loop()+0x28>
      if(storage_->move(p1,p3)) return 0x2001; else return  0x2005;
    }
    
    void MTPD::openSession(void)
    {
      storage_->ResetIndex();
    34c2:	ldr	r0, [r5, #0]
    34c4:	ldr	r3, [r0, #0]
    34c6:	ldr	r3, [r3, #72]	; 0x48
    34c8:	blx	r3
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    34ca:	movs	r6, #0
      if(storage_->move(p1,p3)) return 0x2001; else return  0x2005;
    }
    
    void MTPD::openSession(void)
    {
      storage_->ResetIndex();
    34cc:	movw	r0, #8193	; 0x2001
    34d0:	b.n	3250 <MTPD::loop()+0x28>

              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
            p1=CONTAINER->params[0];
    34d2:	ldr	r6, [r0, #20]
            p2=CONTAINER->params[1];
    34d4:	ldr.w	r9, [r0, #24]

            TRANSMIT(getObjectPropDesc(p1,p2));
    34d8:	strb	r3, [r5, #8]
    34da:	mov.w	r8, #0
    34de:	mov	r1, r6
    34e0:	mov	r2, r9
    34e2:	mov	r0, r5
    34e4:	str.w	r8, [r5, #12]
    34e8:	bl	2824 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    34ec:	ldr	r3, [r5, #12]
    34ee:	strb.w	r8, [r5, #8]
    34f2:	adds	r3, #12
    34f4:	movs	r2, #2
    34f6:	strh.w	r2, [sp, #8]
    34fa:	str	r3, [sp, #4]
    34fc:	ldrh	r3, [r4, #14]
    34fe:	strh.w	r3, [sp, #10]
    3502:	ldr	r3, [r4, #16]
    3504:	str	r3, [sp, #12]
    3506:	mov	r2, r7
    3508:	add	r1, sp, #4
    350a:	mov	r0, r5
    350c:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    3510:	mov	r2, r9
    3512:	mov	r1, r6
    3514:	mov	r0, r5
    3516:	bl	2824 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    351a:	mov	r0, r5
    351c:	bl	1db8 <MTPD::get_buffer()>
    3520:	movs	r0, #4
    3522:	ldr	r1, [r5, #4]
    3524:	bl	9974 <usb_tx>
    3528:	str.w	r8, [r5, #4]
              break;
    352c:	movw	r0, #8193	; 0x2001
    3530:	b.n	3250 <MTPD::loop()+0x28>

          case 0x9803:  // getObjectPropertyValue
            p1=CONTAINER->params[0];
    3532:	ldr	r6, [r0, #20]
            p2=CONTAINER->params[1];
    3534:	ldr.w	r8, [r0, #24]

            TRANSMIT(getObjectPropValue(p1,p2));
    3538:	movs	r7, #0
    353a:	movs	r3, #1
    353c:	mov	r1, r6
    353e:	mov	r2, r8
    3540:	strb	r3, [r5, #8]
    3542:	mov	r0, r5
    3544:	str	r7, [r5, #12]
    3546:	bl	252c <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    354a:	ldr	r3, [r5, #12]
    354c:	strb	r7, [r5, #8]
    354e:	adds	r3, #12
    3550:	movs	r2, #2
    3552:	strh.w	r2, [sp, #8]
    3556:	str	r3, [sp, #4]
    3558:	ldrh	r3, [r4, #14]
    355a:	strh.w	r3, [sp, #10]
    355e:	ldr	r3, [r4, #16]
    3560:	str	r3, [sp, #12]
    3562:	add	r1, sp, #4
    3564:	mov	r0, r5
    3566:	movs	r2, #12
    3568:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    356c:	mov	r2, r8
    356e:	mov	r1, r6
    3570:	mov	r0, r5
    3572:	bl	252c <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    3576:	b.n	34ac <MTPD::loop()+0x284>
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
    3578:	movs	r3, #1
    357a:	movs	r2, #0
    357c:	strb	r3, [r5, #8]
    357e:	str	r2, [r5, #12]
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    3580:	ldr	r1, [r0, #20]
    3582:	movw	r3, #54274	; 0xd402
    3586:	cmp	r1, r3
    3588:	beq.w	3740 <MTPD::loop()+0x518>
    358c:	movs	r3, #12
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
    358e:	movs	r1, #0
    3590:	movs	r2, #2
    3592:	strb	r1, [r5, #8]
    3594:	strh.w	r2, [sp, #8]
    3598:	str	r3, [sp, #4]
    359a:	ldrh	r3, [r4, #14]
    359c:	strh.w	r3, [sp, #10]
    35a0:	ldr	r3, [r4, #16]
    35a2:	str	r3, [sp, #12]
    35a4:	add	r1, sp, #4
    35a6:	movs	r2, #12
    35a8:	mov	r0, r5
    35aa:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    35ae:	ldr	r1, [r4, #20]
    35b0:	movw	r3, #54274	; 0xd402
    35b4:	cmp	r1, r3
    35b6:	bne.w	3374 <MTPD::loop()+0x14c>
    35ba:	mov	r0, r5
    35bc:	bl	1edc <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>
    35c0:	b.n	3374 <MTPD::loop()+0x14c>
              } else {
                TRANSMIT(GetObjectHandles(CONTAINER->params[0], CONTAINER->params[2]));
              }
              break;
            case 0x1008:  // GetObjectInfo
              TRANSMIT(GetObjectInfo(CONTAINER->params[0]));
    35c2:	movs	r7, #0
    35c4:	movs	r3, #1
    35c6:	strb	r3, [r5, #8]
    35c8:	str	r7, [r5, #12]
    35ca:	ldr	r1, [r0, #20]
    35cc:	mov	r0, r5
    35ce:	bl	2270 <MTPD::GetObjectInfo(unsigned long)>
    35d2:	ldr	r3, [r5, #12]
    35d4:	strb	r7, [r5, #8]
    35d6:	adds	r3, #12
    35d8:	movs	r2, #2
    35da:	strh.w	r2, [sp, #8]
    35de:	str	r3, [sp, #4]
    35e0:	ldrh	r3, [r4, #14]
    35e2:	strh.w	r3, [sp, #10]
    35e6:	ldr	r3, [r4, #16]
    35e8:	str	r3, [sp, #12]
    35ea:	add	r1, sp, #4
    35ec:	mov	r0, r5
    35ee:	movs	r2, #12
    35f0:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    35f4:	ldr	r1, [r4, #20]
    35f6:	mov	r0, r5
    35f8:	bl	2270 <MTPD::GetObjectInfo(unsigned long)>
    35fc:	b.n	32ee <MTPD::loop()+0xc6>
              break;
            case 0x1005:  // GetStorageInfo
              TRANSMIT(GetStorageInfo(CONTAINER->params[0]));
              break;
            case 0x1006:  // GetNumObjects
              if (CONTAINER->params[1]) {
    35fe:	ldr	r3, [r0, #24]
    3600:	cmp	r3, #0
    3602:	beq.w	372e <MTPD::loop()+0x506>
    3606:	movw	r0, #8212	; 0x2014
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    360a:	movs	r6, #0
    360c:	b.n	3250 <MTPD::loop()+0x28>
              } else {
                p1 = GetNumObjects(CONTAINER->params[0], CONTAINER->params[2]);
              }
              break;
            case 0x1007:  // GetObjectHandles
              if (CONTAINER->params[1]) {
    360e:	ldr.w	r8, [r0, #24]
    3612:	cmp.w	r8, #0
    3616:	bne.n	3606 <MTPD::loop()+0x3de>
                return_code = 0x2014; // spec by format unsupported
              } else {
                TRANSMIT(GetObjectHandles(CONTAINER->params[0], CONTAINER->params[2]));
    3618:	strb	r3, [r5, #8]
    361a:	str.w	r8, [r5, #12]
    361e:	ldr	r2, [r0, #28]
    3620:	ldr	r1, [r0, #20]
    3622:	mov	r0, r5
    3624:	bl	2204 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    3628:	ldr	r3, [r5, #12]
    362a:	strb.w	r8, [r5, #8]
    362e:	adds	r3, #12
    3630:	movs	r2, #2
    3632:	strh.w	r2, [sp, #8]
    3636:	str	r3, [sp, #4]
    3638:	ldrh	r3, [r4, #14]
    363a:	strh.w	r3, [sp, #10]
    363e:	mov	r2, r7
    3640:	ldr	r3, [r4, #16]
    3642:	str	r3, [sp, #12]
    3644:	add	r1, sp, #4
    3646:	mov	r0, r5
    3648:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    364c:	ldr	r2, [r4, #28]
    364e:	ldr	r1, [r4, #20]
    3650:	mov	r0, r5
    3652:	bl	2204 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    3656:	mov	r0, r5
    3658:	bl	1db8 <MTPD::get_buffer()>
    365c:	movs	r0, #4
    365e:	ldr	r1, [r5, #4]
    3660:	bl	9974 <usb_tx>
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    3664:	mov	r6, r8
              break;
            case 0x1007:  // GetObjectHandles
              if (CONTAINER->params[1]) {
                return_code = 0x2014; // spec by format unsupported
              } else {
                TRANSMIT(GetObjectHandles(CONTAINER->params[0], CONTAINER->params[2]));
    3666:	str.w	r8, [r5, #4]
    366a:	movw	r0, #8193	; 0x2001
    366e:	b.n	3250 <MTPD::loop()+0x28>
                }
              }
              break;
            case 0x100C:  // SendObjectInfo
              CONTAINER->params[2] =
                  SendObjectInfo(CONTAINER->params[0], // storage
    3670:	mov	r0, r5
    3672:	ldr	r2, [r4, #24]
    3674:	ldr	r1, [r4, #20]
    3676:	bl	3084 <MTPD::SendObjectInfo(unsigned long, unsigned long)>
                                 CONTAINER->params[1]); // parent
                  p1 = CONTAINER->params[0];
    367a:	ldr	r6, [r4, #20]
              }
              break;
            case 0x100C:  // SendObjectInfo
              CONTAINER->params[2] =
                  SendObjectInfo(CONTAINER->params[0], // storage
                                 CONTAINER->params[1]); // parent
    367c:	str	r0, [r4, #28]
                  p1 = CONTAINER->params[0];
              if (!p1) p1 = 1;
              CONTAINER->len = receive_buffer->len = 12 + 3 * 4;
    367e:	movs	r3, #24
            case 0x100C:  // SendObjectInfo
              CONTAINER->params[2] =
                  SendObjectInfo(CONTAINER->params[0], // storage
                                 CONTAINER->params[1]); // parent
                  p1 = CONTAINER->params[0];
              if (!p1) p1 = 1;
    3680:	cmp	r6, #0
    3682:	it	eq
    3684:	moveq	r6, #1
              CONTAINER->len = receive_buffer->len = 12 + 3 * 4;
    3686:	strh	r3, [r4, #0]
    3688:	str	r3, [r4, #8]
              break;
    368a:	movw	r0, #8193	; 0x2001
    368e:	b.n	3250 <MTPD::loop()+0x28>
            case 0x100D:  // SendObject
              SendObject();
    3690:	mov	r0, r5
    3692:	bl	31b4 <MTPD::SendObject()>
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    3696:	movs	r6, #0
              if (!p1) p1 = 1;
              CONTAINER->len = receive_buffer->len = 12 + 3 * 4;
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
    3698:	movw	r0, #8193	; 0x2001
    369c:	b.n	3250 <MTPD::loop()+0x28>
    }

    uint32_t MTPD::moveObject(uint32_t p1, uint32_t p3)
    { // p1 object
      // p3 new directory
      if(storage_->move(p1,p3)) return 0x2001; else return  0x2005;
    369e:	ldr	r0, [r5, #0]
    36a0:	ldr	r2, [r4, #28]
    36a2:	ldr	r3, [r0, #0]
    36a4:	ldr	r1, [r4, #20]
    36a6:	ldr	r3, [r3, #80]	; 0x50
    36a8:	blx	r3
    36aa:	movw	r3, #8197	; 0x2005
    36ae:	movw	r2, #8193	; 0x2001
              return_code = 0x2005;
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(CONTAINER->params[0],CONTAINER->params[2]);
              CONTAINER->len  = receive_buffer->len = 12;
    36b2:	strh	r7, [r4, #0]
    36b4:	str	r7, [r4, #8]
    }

    uint32_t MTPD::moveObject(uint32_t p1, uint32_t p3)
    { // p1 object
      // p3 new directory
      if(storage_->move(p1,p3)) return 0x2001; else return  0x2005;
    36b6:	cmp	r0, #0
    36b8:	ite	eq
    36ba:	moveq	r0, r3
    36bc:	movne	r0, r2
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    36be:	movs	r6, #0
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(CONTAINER->params[0],CONTAINER->params[2]);
              CONTAINER->len  = receive_buffer->len = 12;
              break;
    36c0:	b.n	3250 <MTPD::loop()+0x28>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    36c2:	movw	r0, #8193	; 0x2001
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    36c6:	movs	r6, #0
    36c8:	b.n	3250 <MTPD::loop()+0x28>
              break;
            case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
              break;
            case 0x1005:  // GetStorageInfo
              TRANSMIT(GetStorageInfo(CONTAINER->params[0]));
    36ca:	mov.w	r8, #0
    36ce:	strb	r3, [r5, #8]
    36d0:	str.w	r8, [r5, #12]
    36d4:	ldr	r1, [r0, #20]
    36d6:	mov	r0, r5
    36d8:	bl	26d4 <MTPD::GetStorageInfo(unsigned long)>
    36dc:	ldr	r3, [r5, #12]
    36de:	strb.w	r8, [r5, #8]
    36e2:	adds	r3, #12
    36e4:	movs	r2, #2
    36e6:	strh.w	r2, [sp, #8]
    36ea:	str	r3, [sp, #4]
    36ec:	ldrh	r3, [r4, #14]
    36ee:	strh.w	r3, [sp, #10]
    36f2:	ldr	r3, [r4, #16]
    36f4:	str	r3, [sp, #12]
    36f6:	add	r1, sp, #4
    36f8:	mov	r0, r5
    36fa:	mov	r2, r7
    36fc:	bl	1dd0 <MTPD::write(char const*, int) [clone .part.2]>
    3700:	ldr	r1, [r4, #20]
    3702:	mov	r0, r5
    3704:	bl	26d4 <MTPD::GetStorageInfo(unsigned long)>
    3708:	b.n	3656 <MTPD::loop()+0x42e>
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(CONTAINER->params[0]));
              break;
            case 0x100B:  // DeleteObject
              if (CONTAINER->params[1]) {
    370a:	ldr	r6, [r0, #24]
    370c:	cmp	r6, #0
    370e:	bne.w	3606 <MTPD::loop()+0x3de>
                return_code = 0x2014; // spec by format unsupported
              } else {
                if (!storage_->DeleteObject(CONTAINER->params[0])) {
    3712:	ldr	r0, [r5, #0]
    3714:	ldr	r1, [r4, #20]
    3716:	ldr	r3, [r0, #0]
    3718:	ldr	r3, [r3, #64]	; 0x40
    371a:	blx	r3
    371c:	movw	r3, #8210	; 0x2012
    3720:	movw	r2, #8193	; 0x2001
    3724:	cmp	r0, #0
    3726:	ite	eq
    3728:	moveq	r0, r3
    372a:	movne	r0, r2
    372c:	b.n	3250 <MTPD::loop()+0x28>
              break;
            case 0x1006:  // GetNumObjects
              if (CONTAINER->params[1]) {
                return_code = 0x2014; // spec by format unsupported
              } else {
                p1 = GetNumObjects(CONTAINER->params[0], CONTAINER->params[2]);
    372e:	mov	r0, r5
    3730:	ldr	r2, [r4, #28]
    3732:	ldr	r1, [r4, #20]
    3734:	bl	1d90 <MTPD::GetNumObjects(unsigned long, unsigned long)>
    3738:	mov	r6, r0
    373a:	movw	r0, #8193	; 0x2001
    373e:	b.n	3250 <MTPD::loop()+0x28>
    3740:	mov	r0, r5
    3742:	bl	1edc <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>
    3746:	ldr	r3, [r5, #12]
    3748:	adds	r3, #12
    374a:	b.n	358e <MTPD::loop()+0x366>
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    374c:	ldr	r1, [pc, #40]	; (3778 <MTPD::loop()+0x550>)
    374e:	mov	r0, r5
    3750:	bl	1e34 <MTPD::writestring(char const*)>
    3754:	b.n	3374 <MTPD::loop()+0x14c>
    3756:	ldr	r1, [pc, #32]	; (3778 <MTPD::loop()+0x550>)
    3758:	mov	r0, r5
    375a:	bl	1e34 <MTPD::writestring(char const*)>
    375e:	ldr	r3, [r5, #12]
    3760:	adds	r3, #12
    3762:	b.n	3348 <MTPD::loop()+0x120>
    3764:	mov	r0, r5
    3766:	mov	r1, r6
    3768:	bl	3058 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.7]>
          }
        } else {
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
    376c:	cmp	r0, #0
    376e:	beq.w	3272 <MTPD::loop()+0x4a>
    3772:	uxth	r0, r0
    3774:	b.n	3250 <MTPD::loop()+0x28>
    3776:	nop
    3778:	.word	0x0000f9d4

0000377c <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    377c:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    377e:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3780:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    3782:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    3784:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    3786:	beq.n	3790 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    3788:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    378c:	b.w	a5f4 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3790:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    3792:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3796:	bx	r3

00003798 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>:
			}
		}
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    3798:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    379c:	ldr	r4, [r0, #0]
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    379e:	ldr	r5, [r4, #12]
    37a0:	tst.w	r5, #16777216	; 0x1000000
		const uint8_t *p_write = (const uint8_t *)buf;
		uint8_t *p_read = (uint8_t *)retbuf;
		size_t count_read = count;

		// Lets clear the reader queue
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    37a4:	ldr	r5, [pc, #484]	; (398c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1f4>)
    37a6:	str	r5, [r4, #0]

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    37a8:	bne.n	3850 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xb8>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    37aa:	lsls	r7, r3, #31
    37ac:	bpl.w	3916 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17e>
		    if (p_write) {
    37b0:	cmp	r1, #0
    37b2:	beq.w	397c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1e4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    37b6:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    37b8:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    37ba:	it	ne
    37bc:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    37c0:	str	r5, [r4, #52]	; 0x34
    37c2:	adds	r1, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    37c4:	ldrb.w	r8, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    37c8:	add.w	ip, r3, #4294967295
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    37cc:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    37d0:	cmp.w	ip, #0
    37d4:	beq.w	3928 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
			// Push out the next byte; 
		    if (p_write) {
    37d8:	cbz	r1, 37e4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x4c>
		    	w = (*p_write++) << 8;
				w |= *p_write++;
    37da:	ldrb	r5, [r1, #1]
	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
    37dc:	ldrb.w	r8, [r1], #2
				w |= *p_write++;
    37e0:	orr.w	r8, r5, r8, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    37e4:	ldr	r5, [r0, #4]
    37e6:	ldrb	r6, [r5, #8]
			if (count == 2)
    37e8:	cmp.w	ip, #2
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    37ec:	add.w	r6, r6, #4294967295
    37f0:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    37f4:	ite	eq
    37f6:	orreq.w	r5, r8, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    37fa:	orrne.w	r5, r8, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    37fe:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    3800:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    3802:	sub.w	ip, ip, #2
    3806:	b.n	381a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x82>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    3808:	cbz	r2, 380e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x76>
							*p_read++ = w;  // Read any pending RX bytes in
    380a:	strb	r4, [r2, #0]
    380c:	adds	r2, #1
						} 
						count_read--;
    380e:	subs	r3, #1
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    3810:	and.w	r5, r5, #61440	; 0xf000
    3814:	cmp	r5, r6
    3816:	bls.n	3846 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xae>
    3818:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    381a:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    381c:	tst.w	r5, #240	; 0xf0
    3820:	beq.n	3810 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x78>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    3822:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    3824:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
    3828:	mov	r7, r2
    382a:	mov.w	lr, r4, asr #8
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    382e:	bne.n	3808 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x70>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    3830:	cbz	r2, 383a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xa2>
							*p_read++ = w >> 8;
    3832:	strb.w	lr, [r7], #2
							*p_read++ = (w & 0xff);
    3836:	strb	r4, [r2, #1]
    3838:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    383a:	and.w	r5, r5, #61440	; 0xf000
    383e:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
    3840:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    3844:	bhi.n	3818 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x80>
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
    3846:	cmp.w	ip, #0
    384a:	beq.n	3928 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    384c:	ldr	r4, [r0, #0]
    384e:	b.n	37d8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    3850:	lsls	r5, r3, #31
    3852:	bpl.n	38ee <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x156>
		    if (p_write) {
    3854:	cmp	r1, #0
    3856:	beq.w	396c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    385a:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    385c:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    385e:	it	ne
    3860:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    3864:	str	r5, [r4, #52]	; 0x34
    3866:	adds	r1, #1
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    3868:	add.w	lr, r3, #4294967295
		}

	    uint16_t w = _transferWriteFill;
    386c:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    3870:	cmp.w	lr, #0
    3874:	beq.n	38fa <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
			// Push out the next byte; 
		    if (p_write) {
    3876:	cbz	r1, 3884 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xec>
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
    3878:	ldrb.w	ip, [r1, #1]
    387c:	ldrb	r5, [r1, #0]
    387e:	adds	r1, #2
    3880:	orr.w	ip, r5, ip, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    3884:	ldr	r5, [r0, #4]
    3886:	ldrb	r6, [r5, #8]
			if (count == 2)
    3888:	cmp.w	lr, #2
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    388c:	add.w	r6, r6, #4294967295
    3890:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    3894:	ite	eq
    3896:	orreq.w	r5, ip, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    389a:	orrne.w	r5, ip, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    389e:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    38a0:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    38a2:	sub.w	lr, lr, #2
    38a6:	b.n	38ba <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x122>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    38a8:	cbz	r2, 38ae <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x116>
							*p_read++ = w;  // Read any pending RX bytes in
    38aa:	strb	r4, [r2, #0]
    38ac:	adds	r2, #1
						} 
						count_read--;
    38ae:	subs	r3, #1
							*p_read++ = w >> 8;
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    38b0:	and.w	r5, r5, #61440	; 0xf000
    38b4:	cmp	r5, r6
    38b6:	bls.n	38e4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x14c>
    38b8:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    38ba:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    38bc:	tst.w	r5, #240	; 0xf0
    38c0:	beq.n	38b0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x118>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    38c2:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
    38c6:	mov	r7, r2
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    38c8:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    38ca:	bne.n	38a8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x110>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    38cc:	cbz	r2, 38d8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x140>
							*p_read++ = (w & 0xff);
    38ce:	strb.w	r4, [r7], #2
							*p_read++ = w >> 8;
    38d2:	asrs	r4, r4, #8
    38d4:	strb	r4, [r2, #1]
    38d6:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    38d8:	and.w	r5, r5, #61440	; 0xf000
    38dc:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
							*p_read++ = w >> 8;
						}
						count_read -= 2;
    38de:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    38e2:	bhi.n	38b8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x120>
			count--;
		}

	    uint16_t w = _transferWriteFill;

		while (count > 0) {
    38e4:	cmp.w	lr, #0
    38e8:	beq.n	38fa <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
    38ea:	ldr	r4, [r0, #0]
    38ec:	b.n	3876 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    38ee:	mov	lr, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w = _transferWriteFill;
    38f0:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    38f4:	cmp.w	lr, #0
    38f8:	bne.n	3876 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    38fa:	cbz	r3, 3944 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    38fc:	ldr	r4, [r0, #0]
			sr = port().SR;
    38fe:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    3900:	tst.w	r1, #240	; 0xf0
    3904:	beq.n	38fe <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x166>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    3906:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    3908:	lsls	r4, r3, #31
    390a:	bpl.n	3948 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1b0>
					if (p_read)
    390c:	cbz	r2, 3912 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17a>
						*p_read++ = w;  // Read any pending RX bytes in
    390e:	strb	r1, [r2, #0]
    3910:	adds	r2, #1
					count_read--;
    3912:	subs	r3, #1
    3914:	b.n	38fa <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    3916:	ldrb.w	r8, [r0, #44]	; 0x2c
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    391a:	mov	ip, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    391c:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    3920:	cmp.w	ip, #0
    3924:	bne.w	37d8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    3928:	cbz	r3, 3944 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
    392a:	ldr	r4, [r0, #0]
			sr = port().SR;
    392c:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    392e:	tst.w	r1, #240	; 0xf0
    3932:	beq.n	392c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x194>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
				if (count_read & 1) {
    3934:	lsls	r6, r3, #31

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
			sr = port().SR;
			if (sr & 0xF0)  {
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    3936:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    3938:	bpl.n	395a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1c2>
					if (p_read)
    393a:	cbz	r2, 3940 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1a8>
						*p_read++ = w;  // Read any pending RX bytes in
    393c:	strb	r1, [r2, #0]
    393e:	adds	r2, #1
					count_read--;
    3940:	subs	r3, #1
    3942:	b.n	3928 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    3944:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    3948:	cbz	r2, 3956 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1be>
						*p_read++ = (w & 0xff);
    394a:	mov	r4, r2
						*p_read++ = w >> 8;
    394c:	asrs	r5, r1, #8
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
						*p_read++ = (w & 0xff);
    394e:	strb.w	r1, [r4], #2
						*p_read++ = w >> 8;
    3952:	strb	r5, [r2, #1]
    3954:	mov	r2, r4
					}
					count_read -= 2;
    3956:	subs	r3, #2
    3958:	b.n	38fa <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    395a:	cbz	r2, 3968 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d0>
						*p_read++ = w >> 8;
    395c:	mov	r4, r2
    395e:	asrs	r5, r1, #8
    3960:	strb.w	r5, [r4], #2
						*p_read++ = (w & 0xff);
    3964:	strb	r1, [r2, #1]
    3966:	mov	r2, r4
					}
					count_read -= 2;
    3968:	subs	r3, #2
    396a:	b.n	3928 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    396c:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    3970:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    3972:	it	ne
    3974:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    3978:	str	r5, [r4, #52]	; 0x34
    397a:	b.n	3868 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xd0>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    397c:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    3980:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    3982:	it	ne
    3984:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    3988:	str	r5, [r4, #52]	; 0x34
    398a:	b.n	37c4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x2c>
    398c:	.word	0x801f0400

00003990 <_spi_dma_rxISR1()>:
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    3990:	push	{r4, r5, r6, r7}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    3992:	ldr	r3, [pc, #280]	; (3aac <_spi_dma_rxISR1()+0x11c>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    3994:	ldr	r2, [pc, #280]	; (3ab0 <_spi_dma_rxISR1()+0x120>)
    3996:	ldr	r0, [r3, #56]	; 0x38
    3998:	ldr	r4, [r3, #52]	; 0x34
    399a:	ldrb	r1, [r0, #4]
    399c:	strb	r1, [r2, #0]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    399e:	ldr	r1, [pc, #276]	; (3ab4 <_spi_dma_rxISR1()+0x124>)
    39a0:	ldrb	r2, [r4, #4]
    39a2:	strb	r2, [r1, #0]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    39a4:	ldr	r2, [r3, #48]	; 0x30
    39a6:	ldrb	r0, [r0, #4]
    39a8:	strb	r0, [r1, #0]
    39aa:	cmp	r2, #0
    39ac:	beq.n	3a3c <_spi_dma_rxISR1()+0xac>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    39ae:	ldr	r1, [r3, #4]
    39b0:	ldr	r1, [r1, #12]
    39b2:	cmp	r2, r1
    39b4:	bhi.n	3a34 <_spi_dma_rxISR1()+0xa4>
    39b6:	ldr	r1, [r4, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    39b8:	ldrh	r4, [r1, #30]
    39ba:	lsls	r4, r4, #16
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    39bc:	add.w	r0, r2, #4294967295

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    39c0:	bmi.n	3a8e <_spi_dma_rxISR1()+0xfe>
		tcd->BITER = len & 0x7fff;
    39c2:	ubfx	r0, r0, #0, #15
    39c6:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    39c8:	ldrh	r0, [r1, #30]
    39ca:	uxth	r0, r0
    39cc:	strh	r0, [r1, #22]
    39ce:	ldr	r1, [r3, #56]	; 0x38
    39d0:	ldr	r1, [r1, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    39d2:	ldrh	r0, [r1, #30]
    39d4:	lsls	r0, r0, #16
    39d6:	bmi.n	3a7e <_spi_dma_rxISR1()+0xee>
		tcd->BITER = len & 0x7fff;
    39d8:	ubfx	r0, r2, #0, #15
    39dc:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    39de:	ldrh	r0, [r1, #30]
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    39e0:	movs	r4, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    39e2:	uxth	r0, r0
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    39e4:	adds.w	r2, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    39e8:	strh	r0, [r1, #22]
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    39ea:	it	ne
    39ec:	movne	r2, #1
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    39ee:	str	r4, [r3, #48]	; 0x30
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    39f0:	ldr	r1, [r3, #52]	; 0x34
    39f2:	ldr	r0, [pc, #184]	; (3aac <_spi_dma_rxISR1()+0x11c>)
    39f4:	ldr	r1, [r1, #0]
    39f6:	ldr	r5, [r1, #0]
    39f8:	add.w	r4, r0, #44	; 0x2c
    39fc:	cmp	r5, r4
    39fe:	beq.n	3a6e <_spi_dma_rxISR1()+0xde>
    3a00:	ldr	r0, [r0, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    3a02:	ldr	r4, [r0, #12]
    3a04:	tst.w	r4, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    3a08:	ldr	r4, [r1, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    3a0a:	ldr	r5, [r1, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    3a0c:	itete	ne
    3a0e:	ldrhne	r4, [r4, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    3a10:	ldrbeq	r4, [r4, #0]
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    3a12:	addne	r5, #2
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    3a14:	addeq	r5, #1
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    3a16:	orr.w	r4, r4, #2147483648	; 0x80000000
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    3a1a:	str	r5, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    3a1c:	str	r4, [r0, #52]	; 0x34
    3a1e:	ldr	r1, [r3, #56]	; 0x38
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    3a20:	ldr	r3, [pc, #148]	; (3ab8 <_spi_dma_rxISR1()+0x128>)
    3a22:	ldrb	r1, [r1, #4]
    3a24:	strb	r1, [r3, #0]
			}
		}
		_dmaRX->enable();
    3a26:	ldr	r1, [pc, #132]	; (3aac <_spi_dma_rxISR1()+0x11c>)
		if (should_reenable_tx)
    3a28:	cbz	r2, 3a30 <_spi_dma_rxISR1()+0xa0>
    3a2a:	ldr	r2, [r1, #52]	; 0x34
    3a2c:	ldrb	r2, [r2, #4]
    3a2e:	strb	r2, [r3, #0]
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    3a30:	pop	{r4, r5, r6, r7}
    3a32:	bx	lr
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
    3a34:	subs	r2, r2, r1
    3a36:	str	r2, [r3, #48]	; 0x30
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    3a38:	movs	r2, #1
    3a3a:	b.n	39f0 <_spi_dma_rxISR1()+0x60>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    3a3c:	ldr	r0, [r3, #60]	; 0x3c
    3a3e:	ldr	r1, [r3, #0]
    3a40:	ldr	r5, [r0, #0]
			_dmaTX->enable();
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    3a42:	ldr	r4, [pc, #120]	; (3abc <_spi_dma_rxISR1()+0x12c>)
		_dmaRX->enable();
		if (should_reenable_tx)
			_dmaTX->enable();
	} else {

		port().RSER = 0;
    3a44:	str	r2, [r1, #48]	; 0x30
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    3a46:	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    3a48:	ldr	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    3a4a:	ldr	r5, [r5, #0]
    3a4c:	ldr	r6, [pc, #112]	; (3ac0 <_spi_dma_rxISR1()+0x130>)
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    3a4e:	bic.w	r4, r4, #1073741824	; 0x40000000

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    3a52:	movs	r7, #3
    3a54:	cmp	r5, r6
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    3a56:	str	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    3a58:	strb.w	r7, [r3, #45]	; 0x2d
    3a5c:	bne.n	3a9e <_spi_dma_rxISR1()+0x10e>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    3a5e:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3a60:	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    3a62:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    3a64:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    3a66:	beq.n	3aa6 <_spi_dma_rxISR1()+0x116>
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    3a68:	pop	{r4, r5, r6, r7}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3a6a:	b.w	a5f4 <EventResponder::triggerEventNotImmediate()>
    3a6e:	ldr	r1, [r0, #0]
			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    3a70:	ldrb.w	r0, [r0, #44]	; 0x2c

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    3a74:	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    3a76:	orr.w	r0, r0, #2147483648	; 0x80000000
    3a7a:	str	r0, [r1, #52]	; 0x34
    3a7c:	b.n	3a1e <_spi_dma_rxISR1()+0x8e>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    3a7e:	ldrh	r4, [r1, #30]
    3a80:	ubfx	r0, r2, #0, #9
    3a84:	and.w	r4, r4, #65024	; 0xfe00
    3a88:	orrs	r0, r4
    3a8a:	strh	r0, [r1, #30]
    3a8c:	b.n	39de <_spi_dma_rxISR1()+0x4e>
    3a8e:	ldrh	r4, [r1, #30]
    3a90:	ubfx	r0, r0, #0, #9
    3a94:	and.w	r4, r4, #65024	; 0xfe00
    3a98:	orrs	r0, r4
    3a9a:	strh	r0, [r1, #30]
    3a9c:	b.n	39c8 <_spi_dma_rxISR1()+0x38>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    3a9e:	mov	r3, r5
    3aa0:	mov	r1, r2
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    3aa2:	pop	{r4, r5, r6, r7}
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    3aa4:	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3aa6:	ldr	r3, [r0, #8]
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    3aa8:	pop	{r4, r5, r6, r7}
    3aaa:	bx	r3
    3aac:	.word	0x1fff09bc
    3ab0:	.word	0x4000801f
    3ab4:	.word	0x4000801c
    3ab8:	.word	0x4000801b
    3abc:	.word	0xff0f0000
    3ac0:	.word	0x0000377d

00003ac4 <_spi_dma_rxISR0()>:
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    3ac4:	push	{r4, r5, r6, r7}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    3ac6:	ldr	r3, [pc, #280]	; (3be0 <_spi_dma_rxISR0()+0x11c>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    3ac8:	ldr	r2, [pc, #280]	; (3be4 <_spi_dma_rxISR0()+0x120>)
    3aca:	ldr	r0, [r3, #56]	; 0x38
    3acc:	ldr	r4, [r3, #52]	; 0x34
    3ace:	ldrb	r1, [r0, #4]
    3ad0:	strb	r1, [r2, #0]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    3ad2:	ldr	r1, [pc, #276]	; (3be8 <_spi_dma_rxISR0()+0x124>)
    3ad4:	ldrb	r2, [r4, #4]
    3ad6:	strb	r2, [r1, #0]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    3ad8:	ldr	r2, [r3, #48]	; 0x30
    3ada:	ldrb	r0, [r0, #4]
    3adc:	strb	r0, [r1, #0]
    3ade:	cmp	r2, #0
    3ae0:	beq.n	3b70 <_spi_dma_rxISR0()+0xac>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    3ae2:	ldr	r1, [r3, #4]
    3ae4:	ldr	r1, [r1, #12]
    3ae6:	cmp	r2, r1
    3ae8:	bhi.n	3b68 <_spi_dma_rxISR0()+0xa4>
    3aea:	ldr	r1, [r4, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    3aec:	ldrh	r4, [r1, #30]
    3aee:	lsls	r4, r4, #16
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    3af0:	add.w	r0, r2, #4294967295

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    3af4:	bmi.n	3bc2 <_spi_dma_rxISR0()+0xfe>
		tcd->BITER = len & 0x7fff;
    3af6:	ubfx	r0, r0, #0, #15
    3afa:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    3afc:	ldrh	r0, [r1, #30]
    3afe:	uxth	r0, r0
    3b00:	strh	r0, [r1, #22]
    3b02:	ldr	r1, [r3, #56]	; 0x38
    3b04:	ldr	r1, [r1, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    3b06:	ldrh	r0, [r1, #30]
    3b08:	lsls	r0, r0, #16
    3b0a:	bmi.n	3bb2 <_spi_dma_rxISR0()+0xee>
		tcd->BITER = len & 0x7fff;
    3b0c:	ubfx	r0, r2, #0, #15
    3b10:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    3b12:	ldrh	r0, [r1, #30]
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    3b14:	movs	r4, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    3b16:	uxth	r0, r0
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    3b18:	adds.w	r2, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    3b1c:	strh	r0, [r1, #22]
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    3b1e:	it	ne
    3b20:	movne	r2, #1
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    3b22:	str	r4, [r3, #48]	; 0x30
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    3b24:	ldr	r1, [r3, #52]	; 0x34
    3b26:	ldr	r0, [pc, #184]	; (3be0 <_spi_dma_rxISR0()+0x11c>)
    3b28:	ldr	r1, [r1, #0]
    3b2a:	ldr	r5, [r1, #0]
    3b2c:	add.w	r4, r0, #44	; 0x2c
    3b30:	cmp	r5, r4
    3b32:	beq.n	3ba2 <_spi_dma_rxISR0()+0xde>
    3b34:	ldr	r0, [r0, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    3b36:	ldr	r4, [r0, #12]
    3b38:	tst.w	r4, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    3b3c:	ldr	r4, [r1, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    3b3e:	ldr	r5, [r1, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    3b40:	itete	ne
    3b42:	ldrhne	r4, [r4, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    3b44:	ldrbeq	r4, [r4, #0]
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    3b46:	addne	r5, #2
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    3b48:	addeq	r5, #1
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    3b4a:	orr.w	r4, r4, #2147483648	; 0x80000000
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    3b4e:	str	r5, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    3b50:	str	r4, [r0, #52]	; 0x34
    3b52:	ldr	r1, [r3, #56]	; 0x38
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    3b54:	ldr	r3, [pc, #148]	; (3bec <_spi_dma_rxISR0()+0x128>)
    3b56:	ldrb	r1, [r1, #4]
    3b58:	strb	r1, [r3, #0]
			}
		}
		_dmaRX->enable();
    3b5a:	ldr	r1, [pc, #132]	; (3be0 <_spi_dma_rxISR0()+0x11c>)
		if (should_reenable_tx)
    3b5c:	cbz	r2, 3b64 <_spi_dma_rxISR0()+0xa0>
    3b5e:	ldr	r2, [r1, #52]	; 0x34
    3b60:	ldrb	r2, [r2, #4]
    3b62:	strb	r2, [r3, #0]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    3b64:	pop	{r4, r5, r6, r7}
    3b66:	bx	lr
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
    3b68:	subs	r2, r2, r1
    3b6a:	str	r2, [r3, #48]	; 0x30
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    3b6c:	movs	r2, #1
    3b6e:	b.n	3b24 <_spi_dma_rxISR0()+0x60>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    3b70:	ldr	r0, [r3, #60]	; 0x3c
    3b72:	ldr	r1, [r3, #0]
    3b74:	ldr	r5, [r0, #0]
			_dmaTX->enable();
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    3b76:	ldr	r4, [pc, #120]	; (3bf0 <_spi_dma_rxISR0()+0x12c>)
		_dmaRX->enable();
		if (should_reenable_tx)
			_dmaTX->enable();
	} else {

		port().RSER = 0;
    3b78:	str	r2, [r1, #48]	; 0x30
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    3b7a:	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    3b7c:	ldr	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    3b7e:	ldr	r5, [r5, #0]
    3b80:	ldr	r6, [pc, #112]	; (3bf4 <_spi_dma_rxISR0()+0x130>)
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    3b82:	bic.w	r4, r4, #1073741824	; 0x40000000

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    3b86:	movs	r7, #3
    3b88:	cmp	r5, r6
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    3b8a:	str	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    3b8c:	strb.w	r7, [r3, #45]	; 0x2d
    3b90:	bne.n	3bd2 <_spi_dma_rxISR0()+0x10e>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    3b92:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3b94:	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    3b96:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    3b98:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    3b9a:	beq.n	3bda <_spi_dma_rxISR0()+0x116>
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    3b9c:	pop	{r4, r5, r6, r7}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3b9e:	b.w	a5f4 <EventResponder::triggerEventNotImmediate()>
    3ba2:	ldr	r1, [r0, #0]
			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    3ba4:	ldrb.w	r0, [r0, #44]	; 0x2c

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    3ba8:	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    3baa:	orr.w	r0, r0, #2147483648	; 0x80000000
    3bae:	str	r0, [r1, #52]	; 0x34
    3bb0:	b.n	3b52 <_spi_dma_rxISR0()+0x8e>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    3bb2:	ldrh	r4, [r1, #30]
    3bb4:	ubfx	r0, r2, #0, #9
    3bb8:	and.w	r4, r4, #65024	; 0xfe00
    3bbc:	orrs	r0, r4
    3bbe:	strh	r0, [r1, #30]
    3bc0:	b.n	3b12 <_spi_dma_rxISR0()+0x4e>
    3bc2:	ldrh	r4, [r1, #30]
    3bc4:	ubfx	r0, r0, #0, #9
    3bc8:	and.w	r4, r4, #65024	; 0xfe00
    3bcc:	orrs	r0, r4
    3bce:	strh	r0, [r1, #30]
    3bd0:	b.n	3afc <_spi_dma_rxISR0()+0x38>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    3bd2:	mov	r3, r5
    3bd4:	mov	r1, r2
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    3bd6:	pop	{r4, r5, r6, r7}
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    3bd8:	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3bda:	ldr	r3, [r0, #8]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    3bdc:	pop	{r4, r5, r6, r7}
    3bde:	bx	r3
    3be0:	.word	0x1fff097c
    3be4:	.word	0x4000801f
    3be8:	.word	0x4000801c
    3bec:	.word	0x4000801b
    3bf0:	.word	0xff0f0000
    3bf4:	.word	0x0000377d

00003bf8 <SPIClass::begin()>:
    3bf8:	ldmia.w	r0, {r2, r3}
SPIClass SPI2((uintptr_t)&KINETISK_SPI2, (uintptr_t)&SPIClass::spi2_hardware);
#endif


void SPIClass::begin()
{
    3bfc:	push	{r4, r5, r6, r7}
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
    3bfe:	ldr	r4, [r3, #0]
    3c00:	ldr	r1, [r3, #4]
    3c02:	ldr	r5, [r4, #0]
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
    3c04:	ldr	r7, [pc, #88]	; (3c60 <SPIClass::begin()+0x68>)
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    3c06:	ldr	r6, [pc, #92]	; (3c64 <SPIClass::begin()+0x6c>)

void SPIClass::begin()
{
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
    3c08:	orrs	r1, r5
    3c0a:	str	r1, [r4, #0]
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    3c0c:	ldr	r5, [pc, #88]	; (3c68 <SPIClass::begin()+0x70>)
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
    3c0e:	ldr	r1, [pc, #92]	; (3c6c <SPIClass::begin()+0x74>)
void SPIClass::begin()
{
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
    3c10:	str	r7, [r2, #0]
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    3c12:	str	r6, [r2, #12]
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    3c14:	str	r5, [r2, #16]
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
    3c16:	str	r1, [r2, #0]
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    3c18:	ldrb	r1, [r0, #9]
    3c1a:	ldr	r2, [pc, #84]	; (3c70 <SPIClass::begin()+0x78>)
    3c1c:	adds	r4, r3, r1
	*reg = hardware().mosi_mux[mosi_pin_index];
    3c1e:	adds	r1, #12
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    3c20:	ldrb.w	r4, [r4, #44]	; 0x2c
	*reg = hardware().mosi_mux[mosi_pin_index];
    3c24:	ldr.w	r5, [r3, r1, lsl #2]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    3c28:	add.w	r1, r2, r4, lsl #3
    3c2c:	ldr	r1, [r1, #4]
	*reg = hardware().mosi_mux[mosi_pin_index];
    3c2e:	str	r5, [r1, #0]
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    3c30:	ldrb	r1, [r0, #8]
    3c32:	adds	r4, r3, r1
	*reg= hardware().miso_mux[miso_pin_index];
    3c34:	add.w	r1, r3, r1, lsl #2
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    3c38:	ldrb	r4, [r4, #24]
	*reg= hardware().miso_mux[miso_pin_index];
    3c3a:	ldr	r5, [r1, #28]
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    3c3c:	add.w	r1, r2, r4, lsl #3
    3c40:	ldr	r1, [r1, #4]
	*reg= hardware().miso_mux[miso_pin_index];
    3c42:	str	r5, [r1, #0]
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    3c44:	ldrb	r1, [r0, #10]
    3c46:	adds	r0, r3, r1
	*reg = hardware().sck_mux[sck_pin_index];
    3c48:	add.w	r3, r3, r1, lsl #2
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    3c4c:	ldrb.w	r0, [r0, #64]	; 0x40
	*reg = hardware().sck_mux[sck_pin_index];
    3c50:	ldr	r1, [r3, #68]	; 0x44
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    3c52:	add.w	r2, r2, r0, lsl #3
	*reg = hardware().sck_mux[sck_pin_index];
}
    3c56:	pop	{r4, r5, r6, r7}
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    3c58:	ldr	r3, [r2, #4]
	*reg = hardware().sck_mux[sck_pin_index];
    3c5a:	str	r1, [r3, #0]
}
    3c5c:	bx	lr
    3c5e:	nop
    3c60:	.word	0x001f4001
    3c64:	.word	0x38001001
    3c68:	.word	0x78001001
    3c6c:	.word	0x801f0000
    3c70:	.word	0x0000fc70

00003c74 <SPIClass::setMOSI(unsigned char)>:
	}
	return 0;
}

void SPIClass::setMOSI(uint8_t pin)
{
    3c74:	push	{r4, r5, r6, r7}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    3c76:	ldr	r3, [pc, #148]	; (3d0c <SPIClass::setMOSI(unsigned char)+0x98>)
    3c78:	ldr	r5, [r0, #4]
    3c7a:	cmp	r3, r5
    3c7c:	beq.n	3ca2 <SPIClass::setMOSI(unsigned char)+0x2e>
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
    3c7e:	ldrb	r3, [r0, #9]
    3c80:	add	r3, r5
    3c82:	ldrb.w	r6, [r3, #44]	; 0x2c
    3c86:	cmp	r1, r6
    3c88:	beq.n	3c9e <SPIClass::setMOSI(unsigned char)+0x2a>
    3c8a:	add.w	r2, r5, #43	; 0x2b
    3c8e:	movs	r3, #0
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
    3c90:	ldrb.w	r4, [r2, #1]!
    3c94:	cmp	r4, r1
    3c96:	beq.n	3cce <SPIClass::setMOSI(unsigned char)+0x5a>
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
    3c98:	adds	r3, #1
    3c9a:	cmp	r3, #4
    3c9c:	bne.n	3c90 <SPIClass::setMOSI(unsigned char)+0x1c>
				mosi_pin_index = i;
				return;
			}
		}
	}
}
    3c9e:	pop	{r4, r5, r6, r7}
    3ca0:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMOSI_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 11) pinout &= ~3;
    3ca2:	cmp	r1, #11
    3ca4:	beq.n	3d00 <SPIClass::setMOSI(unsigned char)+0x8c>
		if (pin == 7)  pinout = (pinout & ~0x3) | 1;
    3ca6:	cmp	r1, #7
    3ca8:	beq.n	3cbe <SPIClass::setMOSI(unsigned char)+0x4a>
		if (pin == 28) pinout = (pinout & ~0x3) | 2;
    3caa:	cmp	r1, #28
    3cac:	bne.n	3c7e <SPIClass::setMOSI(unsigned char)+0xa>
    3cae:	ldr	r2, [pc, #96]	; (3d10 <SPIClass::setMOSI(unsigned char)+0x9c>)
    3cb0:	ldrb	r3, [r2, #0]
    3cb2:	bic.w	r3, r3, #3
    3cb6:	orr.w	r3, r3, #2
    3cba:	strb	r3, [r2, #0]
    3cbc:	b.n	3c7e <SPIClass::setMOSI(unsigned char)+0xa>
#endif
	}
	inline void setMOSI_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 11) pinout &= ~3;
		if (pin == 7)  pinout = (pinout & ~0x3) | 1;
    3cbe:	ldr	r2, [pc, #80]	; (3d10 <SPIClass::setMOSI(unsigned char)+0x9c>)
    3cc0:	ldrb	r3, [r2, #0]
    3cc2:	bic.w	r3, r3, #3
    3cc6:	orr.w	r3, r3, #1
    3cca:	strb	r3, [r2, #0]
    3ccc:	b.n	3c7e <SPIClass::setMOSI(unsigned char)+0xa>
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    3cce:	ldmia.w	r5, {r1, r2}
    3cd2:	ldr	r1, [r1, #0]
    3cd4:	tst	r1, r2
    3cd6:	beq.n	3cfa <SPIClass::setMOSI(unsigned char)+0x86>
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    3cd8:	ldr	r2, [pc, #56]	; (3d14 <SPIClass::setMOSI(unsigned char)+0xa0>)
    3cda:	add.w	r6, r2, r6, lsl #3
					*reg = 0;
    3cde:	movs	r7, #0
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    3ce0:	ldr	r4, [r6, #4]
					*reg = 0;
					reg = portConfigRegister(hardware().mosi_pin[i]);
    3ce2:	adds	r1, r5, r3
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
					*reg = 0;
    3ce4:	str	r7, [r4, #0]
					reg = portConfigRegister(hardware().mosi_pin[i]);
    3ce6:	ldrb.w	r1, [r1, #44]	; 0x2c
    3cea:	add.w	r2, r2, r1, lsl #3
					*reg = hardware().mosi_mux[i];
    3cee:	add.w	r1, r3, #12
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().mosi_pin[i]);
    3cf2:	ldr	r4, [r2, #4]
					*reg = hardware().mosi_mux[i];
    3cf4:	ldr.w	r2, [r5, r1, lsl #2]
    3cf8:	str	r2, [r4, #0]
				}	
				mosi_pin_index = i;
    3cfa:	strb	r3, [r0, #9]
				return;
			}
		}
	}
}
    3cfc:	pop	{r4, r5, r6, r7}
    3cfe:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMOSI_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 11) pinout &= ~3;
    3d00:	ldr	r2, [pc, #12]	; (3d10 <SPIClass::setMOSI(unsigned char)+0x9c>)
    3d02:	ldrb	r3, [r2, #0]
    3d04:	bic.w	r3, r3, #3
    3d08:	strb	r3, [r2, #0]
    3d0a:	b.n	3c7e <SPIClass::setMOSI(unsigned char)+0xa>
    3d0c:	.word	0x0000fac8
    3d10:	.word	0x1fff202d
    3d14:	.word	0x0000fc70

00003d18 <SPIClass::setMISO(unsigned char)>:

void SPIClass::setMISO(uint8_t pin)
{
    3d18:	push	{r4, r5, r6, r7}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    3d1a:	ldr	r3, [pc, #144]	; (3dac <SPIClass::setMISO(unsigned char)+0x94>)
    3d1c:	ldr	r5, [r0, #4]
    3d1e:	cmp	r3, r5
    3d20:	beq.n	3d44 <SPIClass::setMISO(unsigned char)+0x2c>
		SPCR.setMISO_soft(pin);
	}
	if (pin != hardware().miso_pin[miso_pin_index]) {
    3d22:	ldrb	r3, [r0, #8]
    3d24:	add	r3, r5
    3d26:	ldrb	r6, [r3, #24]
    3d28:	cmp	r1, r6
    3d2a:	beq.n	3d40 <SPIClass::setMISO(unsigned char)+0x28>
    3d2c:	add.w	r2, r5, #23
    3d30:	movs	r3, #0
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if  (pin == hardware().miso_pin[i]) {
    3d32:	ldrb.w	r4, [r2, #1]!
    3d36:	cmp	r4, r1
    3d38:	beq.n	3d70 <SPIClass::setMISO(unsigned char)+0x58>
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setMISO_soft(pin);
	}
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
    3d3a:	adds	r3, #1
    3d3c:	cmp	r3, #4
    3d3e:	bne.n	3d32 <SPIClass::setMISO(unsigned char)+0x1a>
				miso_pin_index = i;
				return;
			}
		}
	}
}
    3d40:	pop	{r4, r5, r6, r7}
    3d42:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMISO_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 12) pinout &= ~0xc;
    3d44:	cmp	r1, #12
    3d46:	beq.n	3d9e <SPIClass::setMISO(unsigned char)+0x86>
		if (pin == 8)  pinout = (pinout & ~0xc) | 4;
    3d48:	cmp	r1, #8
    3d4a:	beq.n	3d60 <SPIClass::setMISO(unsigned char)+0x48>
		if (pin == 39) pinout = (pinout & ~0xc) | 8;
    3d4c:	cmp	r1, #39	; 0x27
    3d4e:	bne.n	3d22 <SPIClass::setMISO(unsigned char)+0xa>
    3d50:	ldr	r2, [pc, #92]	; (3db0 <SPIClass::setMISO(unsigned char)+0x98>)
    3d52:	ldrb	r3, [r2, #0]
    3d54:	bic.w	r3, r3, #12
    3d58:	orr.w	r3, r3, #8
    3d5c:	strb	r3, [r2, #0]
    3d5e:	b.n	3d22 <SPIClass::setMISO(unsigned char)+0xa>
#endif
	}
	inline void setMISO_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 12) pinout &= ~0xc;
		if (pin == 8)  pinout = (pinout & ~0xc) | 4;
    3d60:	ldr	r2, [pc, #76]	; (3db0 <SPIClass::setMISO(unsigned char)+0x98>)
    3d62:	ldrb	r3, [r2, #0]
    3d64:	bic.w	r3, r3, #12
    3d68:	orr.w	r3, r3, #4
    3d6c:	strb	r3, [r2, #0]
    3d6e:	b.n	3d22 <SPIClass::setMISO(unsigned char)+0xa>
		SPCR.setMISO_soft(pin);
	}
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if  (pin == hardware().miso_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    3d70:	ldmia.w	r5, {r1, r2}
    3d74:	ldr	r1, [r1, #0]
    3d76:	tst	r1, r2
    3d78:	beq.n	3d98 <SPIClass::setMISO(unsigned char)+0x80>
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    3d7a:	ldr	r2, [pc, #56]	; (3db4 <SPIClass::setMISO(unsigned char)+0x9c>)
    3d7c:	add.w	r6, r2, r6, lsl #3
					*reg = 0;
					reg = portConfigRegister(hardware().miso_pin[i]);
    3d80:	adds	r1, r5, r3
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if  (pin == hardware().miso_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    3d82:	ldr	r4, [r6, #4]
					*reg = 0;
    3d84:	movs	r7, #0
    3d86:	str	r7, [r4, #0]
					reg = portConfigRegister(hardware().miso_pin[i]);
    3d88:	ldrb	r1, [r1, #24]
    3d8a:	add.w	r2, r2, r1, lsl #3
					*reg = hardware().miso_mux[i];
    3d8e:	add.w	r5, r5, r3, lsl #2
			if  (pin == hardware().miso_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().miso_pin[i]);
    3d92:	ldr	r2, [r2, #4]
					*reg = hardware().miso_mux[i];
    3d94:	ldr	r1, [r5, #28]
    3d96:	str	r1, [r2, #0]
				}	
				miso_pin_index = i;
    3d98:	strb	r3, [r0, #8]
				return;
			}
		}
	}
}
    3d9a:	pop	{r4, r5, r6, r7}
    3d9c:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMISO_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 12) pinout &= ~0xc;
    3d9e:	ldr	r2, [pc, #16]	; (3db0 <SPIClass::setMISO(unsigned char)+0x98>)
    3da0:	ldrb	r3, [r2, #0]
    3da2:	bic.w	r3, r3, #12
    3da6:	strb	r3, [r2, #0]
    3da8:	b.n	3d22 <SPIClass::setMISO(unsigned char)+0xa>
    3daa:	nop
    3dac:	.word	0x0000fac8
    3db0:	.word	0x1fff202d
    3db4:	.word	0x0000fc70

00003db8 <SPIClass::setSCK(unsigned char)>:

void SPIClass::setSCK(uint8_t pin)
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    3db8:	ldr	r2, [pc, #160]	; (3e5c <SPIClass::setSCK(unsigned char)+0xa4>)
    3dba:	ldr	r3, [r0, #4]
    3dbc:	cmp	r2, r3
		}
	}
}

void SPIClass::setSCK(uint8_t pin)
{
    3dbe:	push	{r4, r5, r6}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    3dc0:	beq.n	3dee <SPIClass::setSCK(unsigned char)+0x36>
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
    3dc2:	ldrb	r2, [r0, #10]
    3dc4:	add	r2, r3
    3dc6:	ldrb.w	r2, [r2, #64]	; 0x40
    3dca:	cmp	r1, r2
    3dcc:	beq.n	3dea <SPIClass::setSCK(unsigned char)+0x32>
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
    3dce:	ldrb.w	r4, [r3, #64]	; 0x40
    3dd2:	cmp	r4, r1
    3dd4:	beq.n	3e56 <SPIClass::setSCK(unsigned char)+0x9e>
    3dd6:	ldrb.w	r4, [r3, #65]	; 0x41
    3dda:	cmp	r4, r1
    3ddc:	beq.n	3e1a <SPIClass::setSCK(unsigned char)+0x62>
    3dde:	ldrb.w	r4, [r3, #66]	; 0x42
    3de2:	cmp	r4, r1
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
    3de4:	it	eq
    3de6:	moveq	r1, #2
			if  (pin == hardware().sck_pin[i]) {
    3de8:	beq.n	3e1c <SPIClass::setSCK(unsigned char)+0x64>
				sck_pin_index = i;
				return;
			}
		}
	}
}
    3dea:	pop	{r4, r5, r6}
    3dec:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setSCK_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 13) pinout &= ~0x30;
    3dee:	cmp	r1, #13
    3df0:	beq.n	3e4a <SPIClass::setSCK(unsigned char)+0x92>
		if (pin == 14) pinout = (pinout & ~0x30) | 0x10;
    3df2:	cmp	r1, #14
    3df4:	beq.n	3e0a <SPIClass::setSCK(unsigned char)+0x52>
		if (pin == 27) pinout = (pinout & ~0x30) | 0x20;
    3df6:	cmp	r1, #27
    3df8:	bne.n	3dc2 <SPIClass::setSCK(unsigned char)+0xa>
    3dfa:	ldr	r4, [pc, #100]	; (3e60 <SPIClass::setSCK(unsigned char)+0xa8>)
    3dfc:	ldrb	r2, [r4, #0]
    3dfe:	bic.w	r2, r2, #48	; 0x30
    3e02:	orr.w	r2, r2, #32
    3e06:	strb	r2, [r4, #0]
    3e08:	b.n	3dc2 <SPIClass::setSCK(unsigned char)+0xa>
#endif
	}
	inline void setSCK_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 13) pinout &= ~0x30;
		if (pin == 14) pinout = (pinout & ~0x30) | 0x10;
    3e0a:	ldr	r4, [pc, #84]	; (3e60 <SPIClass::setSCK(unsigned char)+0xa8>)
    3e0c:	ldrb	r2, [r4, #0]
    3e0e:	bic.w	r2, r2, #48	; 0x30
    3e12:	orr.w	r2, r2, #16
    3e16:	strb	r2, [r4, #0]
    3e18:	b.n	3dc2 <SPIClass::setSCK(unsigned char)+0xa>
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
    3e1a:	movs	r1, #1
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    3e1c:	ldr	r5, [r3, #0]
    3e1e:	ldr	r4, [r3, #4]
    3e20:	ldr	r5, [r5, #0]
    3e22:	tst	r5, r4
    3e24:	beq.n	3e46 <SPIClass::setSCK(unsigned char)+0x8e>
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    3e26:	ldr	r4, [pc, #60]	; (3e64 <SPIClass::setSCK(unsigned char)+0xac>)
    3e28:	add.w	r2, r4, r2, lsl #3
					*reg = 0;
    3e2c:	movs	r6, #0
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    3e2e:	ldr	r5, [r2, #4]
					*reg = 0;
					reg = portConfigRegister(hardware().sck_pin[i]);
    3e30:	adds	r2, r3, r1
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
					*reg = 0;
    3e32:	str	r6, [r5, #0]
					reg = portConfigRegister(hardware().sck_pin[i]);
    3e34:	ldrb.w	r2, [r2, #64]	; 0x40
    3e38:	add.w	r4, r4, r2, lsl #3
					*reg = hardware().sck_mux[i];
    3e3c:	add.w	r3, r3, r1, lsl #2
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().sck_pin[i]);
    3e40:	ldr	r2, [r4, #4]
					*reg = hardware().sck_mux[i];
    3e42:	ldr	r3, [r3, #68]	; 0x44
    3e44:	str	r3, [r2, #0]
				}	
				sck_pin_index = i;
    3e46:	strb	r1, [r0, #10]
				return;
    3e48:	b.n	3dea <SPIClass::setSCK(unsigned char)+0x32>
		pinout = newpinout;
#endif
	}
	inline void setSCK_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 13) pinout &= ~0x30;
    3e4a:	ldr	r4, [pc, #20]	; (3e60 <SPIClass::setSCK(unsigned char)+0xa8>)
    3e4c:	ldrb	r2, [r4, #0]
    3e4e:	bic.w	r2, r2, #48	; 0x30
    3e52:	strb	r2, [r4, #0]
    3e54:	b.n	3dc2 <SPIClass::setSCK(unsigned char)+0xa>
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
    3e56:	movs	r1, #0
    3e58:	b.n	3e1c <SPIClass::setSCK(unsigned char)+0x64>
    3e5a:	nop
    3e5c:	.word	0x0000fac8
    3e60:	.word	0x1fff202d
    3e64:	.word	0x0000fc70

00003e68 <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    3e68:	cbz	r3, 3e6e <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    3e6a:	b.w	3798 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>
    3e6e:	bx	lr

00003e70 <SDClass::~SDClass()>:
	char *filename;
};



class SDClass : public FS
    3e70:	bx	lr
    3e72:	nop

00003e74 <_GLOBAL__sub_I_SD>:
 */

#include <Arduino.h>
#include <SD.h>

SDClass SD;
    3e74:	push	{r4, r5, r6, r7}
{
public:
	SDClass() { }
    3e76:	ldr	r3, [pc, #60]	; (3eb4 <_GLOBAL__sub_I_SD+0x40>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    3e78:	ldr	r4, [pc, #60]	; (3eb8 <_GLOBAL__sub_I_SD+0x44>)
    3e7a:	str.w	r4, [r3, #1164]	; 0x48c
    3e7e:	movs	r5, #40	; 0x28
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() : m_fVol(nullptr), m_xVol(nullptr) {}
    3e80:	movs	r4, #0
    3e82:	ldr	r0, [pc, #56]	; (3ebc <_GLOBAL__sub_I_SD+0x48>)
    3e84:	ldr	r7, [pc, #56]	; (3ec0 <_GLOBAL__sub_I_SD+0x4c>)
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    3e86:	ldr	r6, [pc, #60]	; (3ec4 <_GLOBAL__sub_I_SD+0x50>)
    3e88:	strb.w	r5, [r3, #1195]	; 0x4ab
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() : m_options(FIFO_SDIO) {}
    3e8c:	strb.w	r4, [r3, #1172]	; 0x494
    3e90:	strb.w	r4, [r3, #1198]	; 0x4ae
    3e94:	str	r0, [r3, #0]
    3e96:	str.w	r7, [r3, #1176]	; 0x498
    3e9a:	str.w	r6, [r3, #1184]	; 0x4a0
    3e9e:	str.w	r4, [r3, #1148]	; 0x47c
    3ea2:	str.w	r4, [r3, #1152]	; 0x480
    3ea6:	ldr	r2, [pc, #32]	; (3ec8 <_GLOBAL__sub_I_SD+0x54>)
    3ea8:	ldr	r1, [pc, #32]	; (3ecc <_GLOBAL__sub_I_SD+0x58>)
    3eaa:	mov	r0, r3
    3eac:	pop	{r4, r5, r6, r7}
    3eae:	b.w	a930 <__aeabi_atexit>
    3eb2:	nop
    3eb4:	.word	0x1fff19f8
    3eb8:	.word	0x0000fc20
    3ebc:	.word	0x0000f870
    3ec0:	.word	0x0000fbc8
    3ec4:	.word	0x38011001
    3ec8:	.word	0x1fff0970
    3ecc:	.word	0x00003e71

00003ed0 <ExFatFile::close()>:
#include "../common/DebugMacros.h"
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
    3ed0:	push	{r4, lr}
    3ed2:	mov	r4, r0
  bool rtn = sync();
    3ed4:	bl	515c <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    3ed8:	movs	r3, #0
    3eda:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    3ede:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    3ee2:	pop	{r4, pc}

00003ee4 <ExFatFile::getName(char*, unsigned int)>:
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
    3ee4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    3ee8:	add.w	r3, r0, #36	; 0x24
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
    3eec:	mov	r6, r0
    3eee:	mov	r8, r1
    3ef0:	mov	r5, r2
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    3ef2:	ldmia.w	r3, {r0, r1, r2}
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
    3ef6:	sub	sp, #20
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
  size_t n = 0;
  if (!isOpen()) {
    3ef8:	ldrb.w	r3, [r6, #49]	; 0x31
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    3efc:	add.w	r9, sp, #4
    3f00:	stmia.w	r9, {r0, r1, r2}
  size_t n = 0;
  if (!isOpen()) {
    3f04:	cmp	r3, #0
    3f06:	beq.n	3f7a <ExFatFile::getName(char*, unsigned int)+0x96>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    3f08:	ldrb.w	r3, [r6, #48]	; 0x30
    3f0c:	cmp	r3, #1
    3f0e:	bls.n	3f86 <ExFatFile::getName(char*, unsigned int)+0xa2>
    3f10:	movs	r7, #1
    3f12:	movs	r4, #0
    if (m_vol->dirSeek(&pos, is == 1 ? 64: 32) != 1) {
    3f14:	cmp	r7, #1
    3f16:	ite	eq
    3f18:	moveq	r2, #64	; 0x40
    3f1a:	movne	r2, #32
    3f1c:	mov	r1, r9
    3f1e:	ldr	r0, [r6, #32]
    3f20:	bl	4c14 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    3f24:	cmp	r0, #1
    3f26:	bne.n	3f7a <ExFatFile::getName(char*, unsigned int)+0x96>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dn = reinterpret_cast<DirName_t*>
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    3f28:	movs	r2, #0
    3f2a:	mov	r1, r9
    3f2c:	ldr	r0, [r6, #32]
    3f2e:	bl	4be0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    3f32:	cbz	r0, 3f7a <ExFatFile::getName(char*, unsigned int)+0x96>
    3f34:	ldrb	r3, [r0, #0]
    3f36:	cmp	r3, #193	; 0xc1
    3f38:	bne.n	3f7a <ExFatFile::getName(char*, unsigned int)+0x96>
    3f3a:	add.w	r1, r0, #30
    3f3e:	add.w	r2, r8, r4
    3f42:	mov	r3, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
      if ((n + 1) >= length) {
    3f44:	adds	r4, #1
    3f46:	cmp	r4, r5
    3f48:	bcs.n	3f6c <ExFatFile::getName(char*, unsigned int)+0x88>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    3f4a:	ldrh.w	r3, [r0, #2]!
        goto done;
      }
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    3f4e:	cmp	r3, #126	; 0x7e
    3f50:	ite	ls
    3f52:	uxtbls	r3, r3
    3f54:	movhi	r3, #63	; 0x3f
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    3f56:	cmp	r0, r1
      if ((n + 1) >= length) {
        goto done;
      }
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    3f58:	strb.w	r3, [r2], #1
    3f5c:	mov	r3, r4
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    3f5e:	bne.n	3f44 <ExFatFile::getName(char*, unsigned int)+0x60>
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    3f60:	adds	r7, #1
    3f62:	ldrb.w	r2, [r6, #48]	; 0x30
    3f66:	uxtb	r7, r7
    3f68:	cmp	r2, r7
    3f6a:	bhi.n	3f14 <ExFatFile::getName(char*, unsigned int)+0x30>
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    3f6c:	movs	r2, #0
  return n;
    3f6e:	mov	r0, r3
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    3f70:	strb.w	r2, [r8, r3]
  return n;

 fail:
  *name = 0;
  return 0;
}
    3f74:	add	sp, #20
    3f76:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
    3f7a:	movs	r0, #0
    3f7c:	strb.w	r0, [r8]
  return 0;
}
    3f80:	add	sp, #20
    3f82:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    3f86:	movs	r3, #0
    3f88:	b.n	3f6c <ExFatFile::getName(char*, unsigned int)+0x88>
    3f8a:	nop

00003f8c <ExFatFile::openRoot(ExFatVolume*)>:
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    3f8c:	ldrb.w	r2, [r0, #49]	; 0x31
    3f90:	cbz	r2, 3f96 <ExFatFile::openRoot(ExFatVolume*)+0xa>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    3f92:	movs	r0, #0
    3f94:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    3f96:	push	{r3, r4, r5, lr}
    3f98:	mov	r4, r0
    3f9a:	mov	r5, r1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    3f9c:	mov	r1, r2
    3f9e:	movs	r2, #56	; 0x38
    3fa0:	bl	bd6c <memset>
  m_attributes = FILE_ATTR_ROOT;
    3fa4:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    3fa6:	movs	r0, #1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    3fa8:	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    3fac:	strb.w	r0, [r4, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    3fb0:	str	r5, [r4, #32]
    3fb2:	pop	{r3, r4, r5, pc}

00003fb4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const ExChar_t* path,
                            ExName_t* fname, const ExChar_t** ptr) {
    3fb4:	push	{r4, r5, r6, r7, lr}
  ExChar_t c;
  int end;
  int len = 0;

  // Skip leading spaces.
  while (*path == ' ') {
    3fb6:	ldrb	r0, [r1, #0]
    3fb8:	cmp	r0, #32
    3fba:	bne.n	3fc4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x10>
    3fbc:	ldrb.w	r0, [r1, #1]!
    3fc0:	cmp	r0, #32
    3fc2:	beq.n	3fbc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8>
    path++;
  }
  fname->lfn = path;
    3fc4:	str	r1, [r2, #4]

  for (len = 0; ; len++) {
    c = path[len];
    3fc6:	ldrb	r0, [r1, #0]
    if (c == 0 || isDirSeparator(c)) {
    3fc8:	cmp	r0, #0
    3fca:	beq.n	4070 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xbc>
    3fcc:	cmp	r0, #47	; 0x2f
    3fce:	beq.n	4028 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    3fd0:	cmp	r0, #92	; 0x5c
    3fd2:	beq.n	4016 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    3fd4:	sub.w	r4, r0, #34	; 0x22
    3fd8:	uxtb	r4, r4
    3fda:	cmp	r4, #29
    3fdc:	bls.n	401a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x66>
    3fde:	ldr.w	lr, [pc, #148]	; 4074 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>
    3fe2:	adds	r6, r1, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    3fe4:	movs	r4, #0
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    3fe6:	cmp	r0, #124	; 0x7c
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    3fe8:	sub.w	r5, r0, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    3fec:	mov	r7, r6
    3fee:	beq.n	4016 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    3ff0:	cmp	r5, #94	; 0x5e
    3ff2:	bhi.n	4016 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    3ff4:	ldrb.w	r0, [r6], #1
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    3ff8:	sub.w	r5, r0, #34	; 0x22
    3ffc:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    3ffe:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    4000:	cbz	r0, 4062 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xae>
    4002:	cmp	r0, #47	; 0x2f
    4004:	beq.n	402a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
    4006:	cmp	r0, #92	; 0x5c
    4008:	lsr.w	r7, lr, r5
    400c:	beq.n	4016 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    400e:	cmp	r5, #29
    4010:	bhi.n	3fe6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
    4012:	lsls	r5, r7, #31
    4014:	bpl.n	3fe6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    4016:	movs	r0, #0
    4018:	pop	{r4, r5, r6, r7, pc}
    401a:	ldr	r5, [pc, #88]	; (4074 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>)
    401c:	lsr.w	r4, r5, r4
    4020:	lsls	r6, r4, #31
    4022:	bpl.n	3fde <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2a>
    4024:	movs	r0, #0
    4026:	pop	{r4, r5, r6, r7, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    4028:	movs	r4, #0
    402a:	adds	r7, r1, r4
    402c:	mov	r6, r7
    402e:	mov	r5, r4
    4030:	movs	r0, #47	; 0x2f
    4032:	b.n	403a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x86>
    4034:	ldrb.w	r0, [r6, #1]!
    if (!lfnLegalChar(c)) {
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    4038:	adds	r5, #1
    403a:	cmp	r0, #32
    403c:	beq.n	4034 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
    403e:	cmp	r0, #47	; 0x2f
    4040:	beq.n	4034 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
  *ptr = &path[end];
    4042:	add	r1, r5
    4044:	str	r1, [r3, #0]

  // Back over spaces and dots.
  while (len) {
    4046:	cbz	r4, 405a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    4048:	mov	r1, r7
    c = path[len - 1];
    404a:	ldrb.w	r3, [r1, #-1]!
    if (c != '.' && c != ' ') {
    404e:	cmp	r3, #46	; 0x2e
    4050:	beq.n	4056 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa2>
    4052:	cmp	r3, #32
    4054:	bne.n	4068 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xb4>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    4056:	subs	r4, #1
    4058:	bne.n	404a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x96>
    405a:	mov	r0, r4
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    return false;
  }
  fname->len = len;
    405c:	str	r0, [r2, #0]
  return true;
    405e:	movs	r0, #1
    4060:	pop	{r4, r5, r6, r7, pc}
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    4062:	str	r7, [r3, #0]
    4064:	adds	r7, r1, r4
    4066:	b.n	4048 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x94>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    4068:	cmp	r4, #255	; 0xff
    406a:	ble.n	405a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    406c:	movs	r0, #0
    406e:	pop	{r4, r5, r6, r7, pc}
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    4070:	str	r1, [r3, #0]
    4072:	b.n	405c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa8>
    4074:	.word	0x35000101

00004078 <ExFatFile::read(void*, unsigned int)>:

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    4078:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    407c:	ldrb.w	r3, [r0, #51]	; 0x33
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    4080:	lsls	r5, r3, #31

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    4082:	sub	sp, #12
    4084:	mov	r4, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    4086:	bpl.w	41e2 <ExFatFile::read(void*, unsigned int)+0x16a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    408a:	lsls	r0, r3, #25
    408c:	mov	r5, r1
    408e:	mov	r6, r2
    4090:	bpl.w	41f8 <ExFatFile::read(void*, unsigned int)+0x180>
    if ((m_curPosition + count) > m_validLength) {
    4094:	ldrd	r0, r1, [r4]
    4098:	ldrd	r2, r3, [r4, #16]
    409c:	adds.w	r8, r0, r6
    40a0:	adc.w	r9, r1, #0
    40a4:	cmp	r3, r9
    40a6:	it	eq
    40a8:	cmpeq	r2, r8
    40aa:	bcc.w	4204 <ExFatFile::read(void*, unsigned int)+0x18c>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    40ae:	cmp	r6, #0
    40b0:	beq.w	4208 <ExFatFile::read(void*, unsigned int)+0x190>
    40b4:	mov	r9, r4
    40b6:	ldrd	r2, r3, [r9], #24
    40ba:	mov	r8, r6
    40bc:	b.n	415e <ExFatFile::read(void*, unsigned int)+0xe6>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
    40be:	orrs	r3, r2
    40c0:	bne.n	419a <ExFatFile::read(void*, unsigned int)+0x122>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    40c2:	ldrb.w	r3, [r4, #49]	; 0x31
    40c6:	lsls	r2, r3, #25
    40c8:	ite	mi
    40ca:	ldrmi.w	r1, [r0, #1068]	; 0x42c
    40ce:	ldrpl	r1, [r4, #28]
      } else if (isContiguous()) {
        m_curCluster++;
    40d0:	str	r1, [r4, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    40d2:	ldrb.w	ip, [r0, #1085]	; 0x43d
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    40d6:	ldr.w	r2, [r0, #1060]	; 0x424
    40da:	subs	r1, #2
    40dc:	lsrs	r7, r7, #9
    40de:	lsl.w	lr, r1, ip
    40e2:	adds	r1, r7, r2
    40e4:	add	r1, lr
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
    40e6:	cmp.w	sl, #0
    40ea:	bne.n	4172 <ExFatFile::read(void*, unsigned int)+0xfa>
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    40ec:	cmp.w	r8, #512	; 0x200
    40f0:	bcc.n	4172 <ExFatFile::read(void*, unsigned int)+0xfa>
    40f2:	ldr.w	r2, [r0, #532]	; 0x214
                          || sector == m_vol->dataCacheSector()) {
    40f6:	cmp	r1, r2
    40f8:	beq.n	4172 <ExFatFile::read(void*, unsigned int)+0xfa>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    40fa:	cmp.w	r8, #1024	; 0x400
    40fe:	bcc.n	41a8 <ExFatFile::read(void*, unsigned int)+0x130>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    4100:	movs	r3, #1
    4102:	lsl.w	ip, r3, ip
    4106:	rsb	r7, r7, ip
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    410a:	mov.w	r3, r8, lsr #9
    410e:	cmp	r7, r3
    4110:	it	cs
    4112:	movcs	r7, r3
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    4114:	cmp	r1, r2
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    4116:	mov.w	fp, r7, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    411a:	bhi.n	4134 <ExFatFile::read(void*, unsigned int)+0xbc>
    411c:	adds	r3, r7, r1
    411e:	cmp	r3, r2
    4120:	bls.n	4134 <ExFatFile::read(void*, unsigned int)+0xbc>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    4122:	add.w	r0, r0, #524	; 0x20c
    4126:	str	r1, [sp, #4]
    4128:	bl	4958 <FsCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->dataCacheSync()) {
    412c:	cmp	r0, #0
    412e:	beq.n	41e2 <ExFatFile::read(void*, unsigned int)+0x16a>
    4130:	ldr	r0, [r4, #32]
    4132:	ldr	r1, [sp, #4]
    4134:	ldr.w	r0, [r0, #1080]	; 0x438
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
    4138:	ldr	r2, [r0, #0]
    413a:	mov	r3, r7
    413c:	ldr	r7, [r2, #12]
    413e:	mov	r2, r5
    4140:	blx	r7
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    4142:	cmp	r0, #0
    4144:	beq.n	41e2 <ExFatFile::read(void*, unsigned int)+0x16a>
    4146:	mov	r0, fp
    4148:	movs	r1, #0
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    414a:	ldrd	r2, r3, [r4]
    414e:	adds	r2, r2, r0
    4150:	adcs	r3, r1
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    4152:	subs.w	r8, r8, fp
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    4156:	add	r5, fp
    m_curPosition += n;
    4158:	strd	r2, r3, [r4]
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    415c:	beq.n	4208 <ExFatFile::read(void*, unsigned int)+0x190>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    415e:	ldr	r0, [r4, #32]
    4160:	ldr.w	r7, [r0, #1072]	; 0x430
    4164:	ands	r7, r2
    sectorOffset = clusterOffset & m_vol->sectorMask();
    4166:	ubfx	sl, r7, #0, #9
    if (clusterOffset == 0) {
    416a:	cmp	r7, #0
    416c:	beq.n	40be <ExFatFile::read(void*, unsigned int)+0x46>
    416e:	ldr	r1, [r4, #24]
    4170:	b.n	40d2 <ExFatFile::read(void*, unsigned int)+0x5a>
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    4172:	add.w	r0, r0, #524	; 0x20c
    4176:	movs	r2, #0
    4178:	bl	4898 <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
    417c:	cbz	r0, 41e2 <ExFatFile::read(void*, unsigned int)+0x16a>
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
      n = m_vol->bytesPerSector() - sectorOffset;
    417e:	rsb	fp, sl, #512	; 0x200
    4182:	cmp	fp, r8
    4184:	it	cs
    4186:	movcs	fp, r8
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
    4188:	add.w	r1, r0, sl
    418c:	mov	r2, fp
    418e:	mov	r0, r5
    4190:	bl	8f84 <memcpy>
    4194:	mov	r0, fp
    4196:	movs	r1, #0
    4198:	b.n	414a <ExFatFile::read(void*, unsigned int)+0xd2>
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
    419a:	ldrb.w	r3, [r4, #51]	; 0x33
    419e:	lsls	r3, r3, #25
    41a0:	bpl.n	41c2 <ExFatFile::read(void*, unsigned int)+0x14a>
        m_curCluster++;
    41a2:	ldr	r1, [r4, #24]
    41a4:	adds	r1, #1
    41a6:	b.n	40d0 <ExFatFile::read(void*, unsigned int)+0x58>
    41a8:	ldr.w	r0, [r0, #1080]	; 0x438
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    41ac:	ldr	r3, [r0, #0]
    41ae:	mov	r2, r5
    41b0:	ldr	r3, [r3, #8]
    41b2:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    41b4:	cbz	r0, 41e2 <ExFatFile::read(void*, unsigned int)+0x16a>
    41b6:	mov.w	r0, #512	; 0x200
    41ba:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    41bc:	mov.w	fp, #512	; 0x200
    41c0:	b.n	414a <ExFatFile::read(void*, unsigned int)+0xd2>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    41c2:	mov	r2, r9
    41c4:	ldr	r1, [r4, #24]
    41c6:	bl	4c6c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    41ca:	sxtb	r0, r0
        if (fg < 0) {
    41cc:	cmp	r0, #0
    41ce:	blt.n	41e2 <ExFatFile::read(void*, unsigned int)+0x16a>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
    41d0:	beq.n	41d8 <ExFatFile::read(void*, unsigned int)+0x160>
    41d2:	ldr	r0, [r4, #32]
    41d4:	ldr	r1, [r4, #24]
    41d6:	b.n	40d2 <ExFatFile::read(void*, unsigned int)+0x5a>
          // EOF if directory.
          if (isDir()) {
    41d8:	ldrb.w	r3, [r4, #49]	; 0x31
    41dc:	tst.w	r3, #80	; 0x50
    41e0:	bne.n	420c <ExFatFile::read(void*, unsigned int)+0x194>
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    41e2:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    41e6:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    41ea:	orr.w	r3, r3, #2
    41ee:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
}
    41f2:	add	sp, #12
    41f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    41f8:	ldrb.w	r3, [r4, #49]	; 0x31
    41fc:	lsls	r1, r3, #28
    41fe:	bmi.w	4094 <ExFatFile::read(void*, unsigned int)+0x1c>
    4202:	b.n	40ae <ExFatFile::read(void*, unsigned int)+0x36>
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    4204:	subs	r6, r2, r0
    4206:	b.n	40ae <ExFatFile::read(void*, unsigned int)+0x36>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    4208:	mov.w	r8, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    420c:	rsb	r0, r8, r6

fail:
  m_error |= READ_ERROR;
  return -1;
}
    4210:	add	sp, #12
    4212:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4216:	nop

00004218 <ExFatFile::peek()>:
  }
  fname->len = len;
  return true;
}
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
    4218:	push	{r4, r5, r6, r7, lr}
    421a:	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    421c:	movs	r2, #1
    421e:	add.w	r1, sp, #7
    4222:	mov	r4, r0
  uint64_t curPosition = m_curPosition;
    4224:	ldrd	r6, r7, [r0]
  uint32_t curCluster = m_curCluster;
    4228:	ldr	r5, [r0, #24]
    422a:	bl	4078 <ExFatFile::read(void*, unsigned int)>
    422e:	cmp	r0, #1
    4230:	it	eq
    4232:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
  m_curCluster = curCluster;
    4236:	str	r5, [r4, #24]
    4238:	it	ne
    423a:	movne.w	r0, #4294967295
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
    423e:	strd	r6, r7, [r4]
  m_curCluster = curCluster;
  return c;
}
    4242:	add	sp, #12
    4244:	pop	{r4, r5, r6, r7, pc}
    4246:	nop

00004248 <ExFatFile::seekSet(unsigned long long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    4248:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    424c:	ldrb.w	lr, [r0, #49]	; 0x31
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    4250:	ldr	r5, [r0, #24]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    4252:	sub	sp, #12
    4254:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    4256:	cmp.w	lr, #0
    425a:	beq.n	4294 <ExFatFile::seekSet(unsigned long long)+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    425c:	ldrd	r0, r1, [r0]
    4260:	cmp	r1, r3
    4262:	it	eq
    4264:	cmpeq	r0, r2
    4266:	mov	r6, r2
    4268:	mov	r7, r3
    426a:	beq.n	42e4 <ExFatFile::seekSet(unsigned long long)+0x9c>
    return true;
  }
  if (pos == 0) {
    426c:	orrs.w	r3, r6, r7
    4270:	bne.n	4282 <ExFatFile::seekSet(unsigned long long)+0x3a>
    // set position to start of file
    m_curCluster = 0;
    4272:	movs	r3, #0
    4274:	str	r3, [r4, #24]
    }
  }

done:
  m_curPosition = pos;
  return true;
    4276:	movs	r0, #1
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    4278:	strd	r6, r7, [r4]
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    427c:	add	sp, #12
    427e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    4282:	tst.w	lr, #8
    4286:	beq.n	429e <ExFatFile::seekSet(unsigned long long)+0x56>
    if (pos > m_validLength) {
    4288:	ldrd	r2, r3, [r4, #16]
    428c:	cmp	r3, r7
    428e:	it	eq
    4290:	cmpeq	r2, r6
    4292:	bcs.n	429e <ExFatFile::seekSet(unsigned long long)+0x56>
done:
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
    4294:	str	r5, [r4, #24]
  return false;
    4296:	movs	r0, #0
}
    4298:	add	sp, #12
    429a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    429e:	ldr	r3, [r4, #32]
    42a0:	str	r3, [sp, #4]
    42a2:	ldrb.w	ip, [r3, #1085]	; 0x43d
  if (isContiguous()) {
    42a6:	ldrb.w	sl, [r4, #51]	; 0x33
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    42aa:	add.w	ip, ip, #9
    42ae:	uxtb.w	ip, ip
    42b2:	adds.w	r2, r6, #4294967295
    42b6:	adc.w	r3, r7, #4294967295
    42ba:	rsb	r8, ip, #32
    42be:	lsl.w	fp, r3, r8
    42c2:	lsr.w	r2, r2, ip
    42c6:	orr.w	r2, r2, fp
    42ca:	sub.w	fp, ip, #32
    42ce:	lsr.w	r3, r3, fp
  if (isContiguous()) {
    42d2:	tst.w	sl, #64	; 0x40
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    42d6:	orr.w	r2, r2, r3
  if (isContiguous()) {
    42da:	beq.n	42e8 <ExFatFile::seekSet(unsigned long long)+0xa0>
    m_curCluster = m_firstCluster + nNew;
    42dc:	ldr	r3, [r4, #28]
    42de:	add	r2, r3
    42e0:	str	r2, [r4, #24]
    goto done;
    42e2:	b.n	4276 <ExFatFile::seekSet(unsigned long long)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    42e4:	movs	r0, #1
    42e6:	b.n	4298 <ExFatFile::seekSet(unsigned long long)+0x50>
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    42e8:	adds.w	r9, r0, #4294967295
    42ec:	adc.w	sl, r1, #4294967295
    42f0:	lsr.w	ip, r9, ip
    42f4:	lsl.w	r8, sl, r8
    42f8:	orr.w	ip, ip, r8
    42fc:	lsr.w	fp, sl, fp
    4300:	orr.w	ip, ip, fp
  if (nNew < nCur || m_curPosition == 0) {
    4304:	cmp	r2, ip
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    4306:	mov	r3, sl
  if (nNew < nCur || m_curPosition == 0) {
    4308:	bcs.n	433a <ExFatFile::seekSet(unsigned long long)+0xf2>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    430a:	tst.w	lr, #64	; 0x40
    430e:	itet	ne
    4310:	ldrne	r3, [sp, #4]
    4312:	ldreq	r3, [r4, #28]
    4314:	ldrne.w	r3, [r3, #1068]	; 0x42c
    4318:	str	r3, [r4, #24]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    431a:	mov	r8, r2
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    431c:	add.w	r9, r4, #24
    4320:	mov	r2, r9
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    4322:	cmp.w	r8, #0
    4326:	beq.n	4276 <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    4328:	ldr	r1, [r4, #24]
    432a:	ldr	r0, [r4, #32]
    432c:	bl	4c6c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    4330:	add.w	r8, r8, #4294967295
    4334:	cmp	r0, #0
    4336:	bne.n	4320 <ExFatFile::seekSet(unsigned long long)+0xd8>
    4338:	b.n	4294 <ExFatFile::seekSet(unsigned long long)+0x4c>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
  if (nNew < nCur || m_curPosition == 0) {
    433a:	orrs.w	r3, r0, r1
    433e:	beq.n	430a <ExFatFile::seekSet(unsigned long long)+0xc2>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    4340:	rsb	r2, ip, r2
    4344:	b.n	431a <ExFatFile::seekSet(unsigned long long)+0xd2>
    4346:	nop

00004348 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    4348:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    434c:	mov	r6, r1
    434e:	sub	sp, #76	; 0x4c
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    4350:	ldrb.w	r1, [r0, #49]	; 0x31
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    4354:	str	r2, [sp, #0]
    4356:	mov	r5, r0
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    4358:	cbnz	r1, 4366 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    435a:	mov	sl, r3
    435c:	ldrb.w	r3, [r6, #49]	; 0x31
    4360:	tst.w	r3, #80	; 0x50
    4364:	bne.n	4376 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2e>
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
    4366:	movs	r0, #0
    4368:	strb.w	r0, [r5, #49]	; 0x31
  m_flags = 0;
    436c:	strb.w	r0, [r5, #51]	; 0x33
  return false;
}
    4370:	add	sp, #76	; 0x4c
    4372:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    4376:	ldr	r3, [sp, #112]	; 0x70
    4378:	and.w	r3, r3, #3
    437c:	cmp	r3, #1
    437e:	beq.n	438e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x46>
    4380:	cmp	r3, #2
    4382:	beq.w	4598 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x250>
    4386:	cmp	r3, #0
    4388:	bne.n	4366 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    438a:	movs	r3, #1
    438c:	b.n	4390 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x48>
    438e:	movs	r3, #2
      break;
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    4390:	ldr	r2, [sp, #112]	; 0x70
    4392:	and.w	r2, r2, #8
    4396:	orrs	r3, r2
    4398:	str	r3, [sp, #4]
  if (name) {
    439a:	ldr	r3, [sp, #0]
    439c:	cmp	r3, #0
    439e:	beq.w	459c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x254>
    nameHash = exFatHashName(name, nameLength, 0);
    43a2:	mov	r0, r3
    43a4:	movs	r2, #0
    43a6:	mov	r1, sl
    43a8:	bl	4db0 <exFatHashName(char const*, unsigned int, unsigned short)>
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    43ac:	ldrb.w	r3, [r6, #49]	; 0x31
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    43b0:	str	r0, [sp, #8]
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    43b2:	cbz	r3, 43c8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    43b4:	ldrd	r2, r3, [r6]
    43b8:	orrs	r3, r2
    43ba:	beq.n	43c8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    43bc:	movs	r2, #0
    43be:	movs	r3, #0
    43c0:	strd	r2, r3, [r6]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    43c4:	movs	r1, #0
    43c6:	str	r1, [r6, #24]
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    43c8:	ldr	r2, [pc, #736]	; (46ac <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x364>)
    43ca:	add.w	r3, sl, #14
    43ce:	smull	r1, r2, r2, r3
    43d2:	add	r2, r3
    43d4:	asrs	r3, r3, #31
    43d6:	rsb	r3, r3, r2, asr #3
    43da:	uxtb	r3, r3
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;
    43dc:	mov.w	r9, #0
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    43e0:	str	r3, [sp, #12]
    43e2:	adds	r3, #2
    43e4:	uxtb.w	fp, r3

  DirFile_t*   dirFile;
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
    43e8:	mov	r4, r9
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
    43ea:	mov	r7, r9
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    43ec:	movs	r2, #32
    43ee:	add	r1, sp, #40	; 0x28
    43f0:	mov	r0, r6
    43f2:	bl	4078 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    43f6:	cmp	r0, #0
    43f8:	beq.n	4476 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      goto create;
    }
    if (n != 32) {
    43fa:	cmp	r0, #32
    43fc:	bne.n	4366 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
    43fe:	ldrb.w	r3, [sp, #40]	; 0x28
    4402:	lsls	r2, r3, #24
    4404:	bmi.n	44d4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x18c>
      if (freeCount == 0) {
    4406:	cmp	r4, #0
    4408:	bne.n	44ce <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x186>
        freePos.position = dir->curPosition() - 32;
    440a:	ldr	r2, [r6, #0]
        freePos.cluster = dir->curCluster();
    440c:	ldr	r1, [r6, #24]
    440e:	str	r1, [sp, #28]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
    4410:	subs	r2, #32
    4412:	str	r2, [sp, #32]
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
        freeCount++;
    4414:	adds	r4, #1
    4416:	uxtb	r4, r4
      }
      if (!buf[0]) {
    4418:	cbz	r3, 4476 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      if (buf[0] != EXFAT_TYPE_FILE) {
        continue;
      }
      inSet = true;
    }
    switch (buf[0]) {
    441a:	cmp	r3, #192	; 0xc0
    441c:	beq.w	4546 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fe>
    4420:	cmp	r3, #193	; 0xc1
    4422:	beq.n	44ea <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1a2>
    4424:	cmp	r3, #133	; 0x85
    4426:	bne.n	43ec <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
    4428:	movs	r2, #56	; 0x38
    442a:	movs	r1, #0
    442c:	mov	r0, r5
    442e:	bl	bd6c <memset>
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    4432:	ldrb.w	r3, [sp, #44]	; 0x2c
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
    4436:	ldrb.w	r2, [sp, #41]	; 0x29
    443a:	strb.w	r2, [r5, #48]	; 0x30
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    443e:	lsls	r0, r3, #27
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    4440:	and.w	r2, r3, #55	; 0x37
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
    4444:	it	pl
    4446:	orrpl.w	r2, r2, #8
    444a:	strb.w	r2, [r5, #49]	; 0x31
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    444e:	ldr	r3, [r6, #0]
    4450:	ldr	r1, [r6, #32]
    4452:	ldr	r2, [r6, #24]
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
    4454:	str	r2, [r5, #36]	; 0x24
        m_dirPos.position = dir->curPosition() - 32;
    4456:	subs	r3, #32
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();
    4458:	str	r1, [r5, #32]

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    445a:	str	r3, [r5, #40]	; 0x28
        m_dirPos.isContiguous = dir->isContiguous();
    445c:	ldrb.w	r3, [r6, #51]	; 0x33
    4460:	ubfx	r3, r3, #6, #1
    4464:	strb.w	r3, [r5, #44]	; 0x2c
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    4468:	movs	r2, #32
    446a:	add	r1, sp, #40	; 0x28
    446c:	mov	r0, r6
    446e:	bl	4078 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    4472:	cmp	r0, #0
    4474:	bne.n	43fa <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xb2>
#if READ_ONLY
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    4476:	ldr	r3, [sp, #112]	; 0x70
    4478:	lsls	r1, r3, #22
    447a:	bpl.w	4366 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    447e:	ldr	r3, [sp, #4]
    4480:	lsls	r2, r3, #30
    4482:	bpl.w	4366 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    4486:	ldr	r3, [sp, #0]
    4488:	cmp	r3, #0
    448a:	beq.w	4366 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    448e:	cmp	r4, fp
    4490:	bcc.n	44ac <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x164>
    4492:	b.n	45a2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25a>
        goto fail;
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
    4494:	cmp	r0, #32
    4496:	bne.w	4366 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
    449a:	cbnz	r4, 44a6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x15e>
      freePos.position = dir->curPosition() - 32;
    449c:	ldr	r2, [r6, #0]
      freePos.cluster = dir->curCluster();
    449e:	ldr	r1, [r6, #24]
    44a0:	str	r1, [sp, #28]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
    44a2:	subs	r2, #32
    44a4:	str	r2, [sp, #32]
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    44a6:	uxtb	r4, r3
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    44a8:	cmp	fp, r4
    44aa:	bls.n	45a2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25a>
    n = dir->read(buf, 32);
    44ac:	movs	r2, #32
    44ae:	add	r1, sp, #40	; 0x28
    44b0:	mov	r0, r6
    44b2:	bl	4078 <ExFatFile::read(void*, unsigned int)>
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    44b6:	adds	r3, r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
    44b8:	cmp	r0, #0
    44ba:	bne.n	4494 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x14c>
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
    44bc:	mov	r0, r6
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
    44be:	ldr	r7, [r6, #24]
      if (!dir->addDirCluster()) {
    44c0:	bl	51bc <ExFatFile::addDirCluster()>
    44c4:	cmp	r0, #0
    44c6:	beq.w	4366 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
        DBG_FAIL_MACRO;
        goto fail;
      }
      dir->m_curCluster = curCluster;
    44ca:	str	r7, [r6, #24]
      continue;
    44cc:	b.n	44a8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x160>
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
    44ce:	cmp	r4, fp
    44d0:	bcs.n	4418 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd0>
    44d2:	b.n	4414 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xcc>
        freeCount++;
      }
      if (!buf[0]) {
        goto create;
      }
    } else if (!inSet) {
    44d4:	cmp.w	r9, #0
    44d8:	bne.n	441a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd2>
      if (freeCount < freeNeed) {
        freeCount = 0;
    44da:	cmp	r4, fp
    44dc:	it	cc
    44de:	movcc	r4, #0
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
    44e0:	cmp	r3, #133	; 0x85
    44e2:	bne.n	43ec <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        continue;
      }
      inSet = true;
    44e4:	mov.w	r9, #1
    44e8:	b.n	4428 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xe0>
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
    44ea:	rsb	r8, r7, sl
    44ee:	uxtb.w	r8, r8
    44f2:	cmp.w	r8, #15
    44f6:	it	cs
    44f8:	movcs.w	r8, #15
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
    44fc:	mov	r3, r8
    44fe:	mov	r2, r7
    4500:	ldr	r1, [sp, #0]
    4502:	add	r0, sp, #40	; 0x28
    4504:	bl	4dec <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>
    4508:	cmp	r0, #0
    450a:	beq.n	4586 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x23e>
          inSet = false;
          break;
        }
        nameOffset += nCmp;
    450c:	add	r7, r8
    450e:	uxtb	r7, r7

        if (nameOffset == nameLength) {
    4510:	cmp	sl, r7
    4512:	bne.w	43ec <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    4516:	ldr	r3, [sp, #112]	; 0x70
    4518:	lsls	r3, r3, #20
    451a:	bmi.w	4366 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    451e:	ldr	r3, [sp, #112]	; 0x70
    4520:	tst.w	r3, #17408	; 0x4400
    4524:	bne.w	4668 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x320>
    4528:	ldrb.w	r3, [r5, #51]	; 0x33
    452c:	lsls	r7, r3, #30
    452e:	bmi.w	4668 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x320>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    4532:	ldr	r3, [sp, #112]	; 0x70
    4534:	lsls	r3, r3, #21
    4536:	bmi.w	4366 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    453a:	ldr	r3, [sp, #112]	; 0x70
    453c:	lsls	r0, r3, #17
    453e:	bmi.w	46b0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x368>
    DBG_FAIL_MACRO;
    goto fail;
  }
#endif  // READ_ONLY
  return true;
    4542:	movs	r0, #1
    4544:	b.n	4370 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x28>
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    4546:	ldrb.w	r3, [sp, #41]	; 0x29
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
    454a:	ldr	r2, [sp, #4]
    454c:	strb.w	r2, [r5, #51]	; 0x33
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    4550:	lsls	r1, r3, #30
    4552:	bpl.n	455c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x214>
          m_flags |= FILE_FLAG_CONTIGUOUS;
    4554:	orr.w	r3, r2, #64	; 0x40
    4558:	strb.w	r3, [r5, #51]	; 0x33
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    455c:	ldrd	r2, r3, [sp, #48]	; 0x30
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    4560:	ldrd	r0, r1, [sp, #64]	; 0x40
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    4564:	strd	r2, r3, [r5, #16]
        m_firstCluster = getLe32(dirStream->firstCluster);
    4568:	ldr	r3, [sp, #60]	; 0x3c
    456a:	str	r3, [r5, #28]
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
    456c:	ldr	r3, [sp, #0]
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    456e:	strd	r0, r1, [r5, #8]
        if (!name) {
    4572:	cmp	r3, #0
    4574:	beq.n	4516 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1ce>
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    4576:	ldrb.w	r3, [sp, #43]	; 0x2b
    457a:	cmp	r3, sl
    457c:	beq.n	458a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x242>
            nameHash != getLe16(dirStream->nameHash)) {
          inSet = false;
    457e:	mov.w	r9, #0
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    4582:	mov	r7, r9
    4584:	b.n	43ec <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        nCmp = nameLength - nameOffset;
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
          inSet = false;
    4586:	mov	r9, r0
    4588:	b.n	43ec <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    458a:	ldrh.w	r3, [sp, #44]	; 0x2c
    458e:	ldr	r2, [sp, #8]
    4590:	cmp	r3, r2
    4592:	bne.n	457e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x236>
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    4594:	movs	r7, #0
    4596:	b.n	43ec <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    4598:	movs	r3, #3
    459a:	b.n	4390 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x48>
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
  uint8_t nCmp;
  uint8_t modeFlags;
  uint16_t nameHash = 0;
    459c:	ldr	r3, [sp, #0]
    459e:	str	r3, [sp, #8]
    45a0:	b.n	43c8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    45a2:	ldrb.w	r3, [r6, #51]	; 0x33
  memset(this, 0, sizeof(ExFatFile));
    45a6:	movs	r2, #56	; 0x38
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    45a8:	ubfx	r3, r3, #6, #1
  memset(this, 0, sizeof(ExFatFile));
    45ac:	movs	r1, #0
    45ae:	mov	r0, r5
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    45b0:	add.w	r8, sp, #28
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    45b4:	strb.w	r3, [sp, #36]	; 0x24
  memset(this, 0, sizeof(ExFatFile));
    45b8:	bl	bd6c <memset>
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    45bc:	ldr	r4, [sp, #12]
    45be:	ldr	r3, [r6, #32]
    45c0:	str.w	sl, [sp, #12]

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    45c4:	ldmia.w	r8, {r0, r1, r2}
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    45c8:	add.w	r9, r4, #1
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
    45cc:	movs	r4, #8
    45ce:	strb.w	r4, [r5, #49]	; 0x31
    45d2:	add.w	r7, sl, #30
  m_dirPos = freePos;
    45d6:	add.w	r4, r5, #36	; 0x24
    45da:	ldr.w	sl, [sp]
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
    45de:	str	r3, [r5, #32]
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    45e0:	uxtb.w	r9, r9

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    45e4:	stmia.w	r4, {r0, r1, r2}
    45e8:	uxtb	r7, r7
  for (uint8_t i = 0; i < freeNeed; i++) {
    45ea:	movs	r6, #0
    45ec:	mov	r0, r3
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
    45ee:	movs	r2, #1
    45f0:	mov	r1, r8
    45f2:	bl	4be0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    45f6:	mov	r4, r0
    45f8:	cmp	r0, #0
    45fa:	beq.w	4366 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    45fe:	ldrsb.w	r3, [r0]
    4602:	cmp	r3, #0
    4604:	blt.w	4366 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0 , 32);
    4608:	movs	r2, #32
    460a:	movs	r1, #0
    460c:	bl	bd6c <memset>
    if (i == 0) {
    4610:	cmp	r6, #0
    4612:	beq.n	46e2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x39a>
        FsDateTime::callback(&date, &time, &ms10);
        dirFile->createTimeMs = ms10;
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
    4614:	cmp	r6, #1
    4616:	beq.n	46c2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x37a>
    4618:	rsb	r3, r6, r6, lsl #4
    461c:	cmp	r7, #15
    461e:	sub.w	r3, r3, #30

      dirStream->nameLength = nameLength;
      setLe16(dirStream->nameHash, nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
    4622:	mov.w	r2, #193	; 0xc1
    4626:	mov	r1, r7
    4628:	it	cs
    462a:	movcs	r1, #15
    462c:	uxtb	r3, r3
    462e:	strb	r2, [r4, #0]
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    4630:	cbz	r1, 4648 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
    4632:	adds	r4, #2
    4634:	sxth	r1, r1
    4636:	add.w	r1, r4, r1, lsl #1
    463a:	add	r3, sl
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
    463c:	ldrb.w	r2, [r3], #1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    4640:	strh.w	r2, [r4], #2
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    4644:	cmp	r1, r4
    4646:	bne.n	463c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2f4>
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    4648:	adds	r6, #1
    464a:	uxtb	r6, r6
    464c:	cmp	fp, r6
    464e:	bls.n	46a4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x35c>
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
    4650:	movs	r2, #32
    4652:	mov	r1, r8
    4654:	ldr	r0, [r5, #32]
    4656:	bl	4c14 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    465a:	cmp	r0, #1
    465c:	bne.w	4366 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    4660:	subs	r7, #15
    4662:	uxtb	r7, r7
    4664:	ldr	r0, [r5, #32]
    4666:	b.n	45ee <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2a6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || READ_ONLY) {
    4668:	ldrb.w	r3, [r5, #49]	; 0x31
    466c:	tst.w	r3, #17
    4670:	bne.w	4366 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    4674:	ldr	r3, [sp, #112]	; 0x70
    4676:	lsls	r6, r3, #21
    4678:	bpl.w	453a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1f2>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    467c:	ldrb.w	r3, [r5, #51]	; 0x33
    4680:	lsls	r4, r3, #30
    4682:	bpl.w	4366 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    4686:	movs	r2, #0
    4688:	movs	r3, #0
    468a:	mov	r0, r5
    468c:	bl	4248 <ExFatFile::seekSet(unsigned long long)>
    4690:	cmp	r0, #0
    4692:	beq.w	4366 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    4696:	mov	r0, r5
    4698:	bl	5488 <ExFatFile::truncate()>
    469c:	cmp	r0, #0
    469e:	beq.w	4366 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    46a2:	b.n	4542 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fa>
      for (size_t k = 0; k < nCmp; k++) {
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
      }
    }
  }
  return sync();
    46a4:	mov	r0, r5
    46a6:	bl	515c <ExFatFile::sync()>
    46aa:	b.n	4370 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x28>
    46ac:	.word	0x88888889
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    46b0:	ldrd	r2, r3, [r5, #16]
    46b4:	mov	r0, r5
    46b6:	bl	4248 <ExFatFile::seekSet(unsigned long long)>
    46ba:	cmp	r0, #0
    46bc:	bne.w	4542 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fa>
    46c0:	b.n	4366 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    46c2:	movs	r3, #192	; 0xc0
    46c4:	strb	r3, [r4, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    46c6:	ldr	r3, [sp, #4]
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    46c8:	movs	r2, #3
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    46ca:	orn	r3, r3, #63	; 0x3f
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    46ce:	strb	r2, [r4, #1]
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    46d0:	strb.w	r3, [r5, #51]	; 0x33

      dirStream->nameLength = nameLength;
    46d4:	ldrb.w	r3, [sp, #12]
    46d8:	strb	r3, [r4, #3]
    46da:	ldrh.w	r3, [sp, #8]
    46de:	strh	r3, [r4, #4]
    46e0:	b.n	4648 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
      goto fail;
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
    46e2:	movs	r3, #133	; 0x85
    46e4:	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
      dirFile->setCount = m_setCount;
      if (FsDateTime::callback) {
    46e6:	ldr	r3, [pc, #48]	; (4718 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3d0>)
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    46e8:	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    46ec:	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
    46f0:	ldr	r3, [r3, #0]
    46f2:	cmp	r3, #0
    46f4:	beq.n	4648 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
        uint16_t date, time;
        uint8_t ms10;
        FsDateTime::callback(&date, &time, &ms10);
    46f6:	add.w	r2, sp, #23
    46fa:	add.w	r1, sp, #26
    46fe:	add	r0, sp, #24
    4700:	blx	r3
        dirFile->createTimeMs = ms10;
    4702:	ldrb.w	r1, [sp, #23]
    4706:	ldrh.w	r2, [sp, #26]
    470a:	ldrh.w	r3, [sp, #24]
    470e:	strb	r1, [r4, #20]
    4710:	strh	r2, [r4, #8]
    4712:	strh	r3, [r4, #10]
    4714:	b.n	4648 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
    4716:	nop
    4718:	.word	0x1fff1ea8

0000471c <ExFatFile::open(ExFatFile*, char const*, int)>:
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    471c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4720:	mov	r6, r0
    4722:	sub	sp, #84	; 0x54
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    4724:	ldrb.w	r4, [r6, #49]	; 0x31
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    4728:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    472a:	movs	r0, #0
    472c:	strb.w	r0, [sp, #73]	; 0x49
    4730:	strb.w	r0, [sp, #74]	; 0x4a
    4734:	strb.w	r0, [sp, #75]	; 0x4b
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    4738:	cbnz	r4, 4748 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
    473a:	mov	r9, r3
    473c:	ldrb.w	r3, [r1, #49]	; 0x31
    4740:	tst.w	r3, #80	; 0x50
    4744:	mov	r5, r1
    4746:	bne.n	4750 <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    4748:	movs	r0, #0
}
    474a:	add	sp, #84	; 0x54
    474c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    4750:	ldrb	r3, [r2, #0]
    4752:	cmp	r3, #47	; 0x2f
    4754:	mov	r4, r2
    4756:	beq.n	47be <ExFatFile::open(ExFatFile*, char const*, int)+0xa2>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    4758:	mov.w	r8, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    475c:	mov	r1, r4
    475e:	add	r3, sp, #12
    4760:	add	r2, sp, #16
    4762:	mov	r0, r6
    4764:	bl	3fb4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    4768:	cmp	r0, #0
    476a:	beq.n	4748 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    476c:	ldr	r3, [sp, #12]
    476e:	ldrb	r3, [r3, #0]
    4770:	cmp	r3, #0
    4772:	beq.n	47e8 <ExFatFile::open(ExFatFile*, char const*, int)+0xcc>
    4774:	ldrb.w	r3, [sp, #16]
    4778:	ldr	r2, [sp, #20]
    477a:	str.w	r8, [sp]
    477e:	mov	r1, r5
    4780:	mov	r0, r6
    4782:	bl	4348 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    4786:	cmp	r0, #0
    4788:	beq.n	4748 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    478a:	mov	r4, r6
    478c:	add	r7, sp, #24
    478e:	add.w	lr, r6, #48	; 0x30
    4792:	ldr	r0, [r4, #0]
    4794:	ldr	r1, [r4, #4]
    4796:	ldr	r2, [r4, #8]
    4798:	ldr	r3, [r4, #12]
    479a:	mov	r5, r7
    479c:	stmia	r5!, {r0, r1, r2, r3}
    479e:	adds	r4, #16
    47a0:	cmp	r4, lr
    47a2:	mov	r7, r5
    47a4:	bne.n	4792 <ExFatFile::open(ExFatFile*, char const*, int)+0x76>
    47a6:	ldr	r0, [r4, #0]
    47a8:	str	r0, [r5, #0]
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
    47aa:	mov	r0, r6
    47ac:	bl	515c <ExFatFile::sync()>
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    47b0:	add	r5, sp, #24
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    47b2:	strb.w	r8, [r6, #49]	; 0x31
  m_flags = 0;
    47b6:	strb.w	r8, [r6, #51]	; 0x33
    47ba:	ldr	r4, [sp, #12]
    47bc:	b.n	475c <ExFatFile::open(ExFatFile*, char const*, int)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    47be:	adds	r4, #1
    47c0:	str	r4, [sp, #12]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    47c2:	ldrb	r1, [r4, #0]
    47c4:	cmp	r1, #47	; 0x2f
    47c6:	beq.n	47be <ExFatFile::open(ExFatFile*, char const*, int)+0xa2>
      path++;
    }
    if (*path == 0) {
    47c8:	cbz	r1, 4800 <ExFatFile::open(ExFatFile*, char const*, int)+0xe4>
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    47ca:	movs	r2, #56	; 0x38
    47cc:	add	r0, sp, #24
    47ce:	movs	r1, #0
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    47d0:	ldr	r7, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    47d2:	bl	bd6c <memset>
  m_attributes = FILE_ATTR_ROOT;
    47d6:	movs	r2, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    47d8:	movs	r3, #1
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    47da:	add	r5, sp, #24
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    47dc:	str	r7, [sp, #56]	; 0x38
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    47de:	strb.w	r2, [sp, #73]	; 0x49
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    47e2:	strb.w	r3, [sp, #75]	; 0x4b
    47e6:	b.n	4758 <ExFatFile::open(ExFatFile*, char const*, int)+0x3c>
    47e8:	ldrb.w	r3, [sp, #16]
    47ec:	ldr	r2, [sp, #20]
    47ee:	str.w	r9, [sp]
    47f2:	mov	r1, r5
    47f4:	mov	r0, r6
    47f6:	bl	4348 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    47fa:	add	sp, #84	; 0x54
    47fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    4800:	movs	r2, #56	; 0x38
    4802:	mov	r0, r6
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    4804:	ldr	r4, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    4806:	bl	bd6c <memset>
  m_attributes = FILE_ATTR_ROOT;
    480a:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    480c:	movs	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    480e:	str	r4, [r6, #32]
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    4810:	strb.w	r3, [r6, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    4814:	strb.w	r0, [r6, #51]	; 0x33
    4818:	b.n	474a <ExFatFile::open(ExFatFile*, char const*, int)+0x2e>
    481a:	nop

0000481c <ExFatFile::open(ExFatVolume*, char const*, int)>:
bool ExFatFile::open(const ExChar_t* path, int oflag) {
  return open(ExFatVolume::cwv(), path, oflag);
}
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
    481c:	cbz	r1, 4826 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    481e:	add.w	r1, r1, #1088	; 0x440
    4822:	b.w	471c <ExFatFile::open(ExFatFile*, char const*, int)>
}
    4826:	mov	r0, r1
    4828:	bx	lr
    482a:	nop

0000482c <ExFatFile::openNext(ExFatFile*, int)>:
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    482c:	ldrb.w	r3, [r0, #49]	; 0x31
    4830:	cbnz	r3, 4848 <ExFatFile::openNext(ExFatFile*, int)+0x1c>
    DBG_FAIL_MACRO;
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    4832:	push	{r4, r5, lr}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    4834:	ldrb.w	r4, [r1, #49]	; 0x31
    4838:	ands.w	r4, r4, #80	; 0x50
    DBG_FAIL_MACRO;
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    483c:	sub	sp, #12
    483e:	mov	r5, r1
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    4840:	bne.n	484c <ExFatFile::openNext(ExFatFile*, int)+0x20>
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    4842:	mov	r0, r4
}
    4844:	add	sp, #12
    4846:	pop	{r4, r5, pc}
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    4848:	movs	r0, #0
}
    484a:	bx	lr
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    484c:	ldrd	r4, r5, [r5]
    4850:	movs	r5, #0
    4852:	and.w	r4, r4, #31
    4856:	orrs	r4, r5
    4858:	beq.n	4860 <ExFatFile::openNext(ExFatFile*, int)+0x34>
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    485a:	mov	r0, r3
}
    485c:	add	sp, #12
    485e:	pop	{r4, r5, pc}
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);
    4860:	str	r2, [sp, #0]
    4862:	mov	r2, r3
    4864:	bl	4348 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>

 fail:
  return false;
}
    4868:	add	sp, #12
    486a:	pop	{r4, r5, pc}

0000486c <FsCache::sync() [clone .part.2]>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    486c:	push	{r4, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    486e:	add.w	r2, r0, #12

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    4872:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    4874:	ldr	r0, [r0, #4]
    4876:	ldr	r1, [r4, #8]
    4878:	ldr	r3, [r0, #0]
    487a:	ldr	r3, [r3, #24]
    487c:	blx	r3
    487e:	cbz	r0, 4888 <FsCache::sync() [clone .part.2]+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    4880:	ldrb	r3, [r4, #0]
    4882:	bic.w	r3, r3, #1
    4886:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    4888:	pop	{r4, pc}
    488a:	nop

0000488c <FsCache::invalidate()>:
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    488c:	movs	r2, #0
  m_sector = 0XFFFFFFFF;
    488e:	mov.w	r3, #4294967295
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    4892:	strb	r2, [r0, #0]
  m_sector = 0XFFFFFFFF;
    4894:	str	r3, [r0, #8]
    4896:	bx	lr

00004898 <FsCache::get(unsigned long, unsigned char)>:
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
    4898:	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    489a:	ldr	r5, [r0, #4]
    489c:	cbz	r5, 48de <FsCache::get(unsigned long, unsigned char)+0x46>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    489e:	ldr	r3, [r0, #8]
    48a0:	cmp	r3, r1
    48a2:	mov	r4, r0
    48a4:	mov	r7, r2
    48a6:	mov	r6, r1
    48a8:	beq.n	48c8 <FsCache::get(unsigned long, unsigned char)+0x30>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    48aa:	ldrb	r3, [r0, #0]
    48ac:	lsls	r2, r3, #31
    48ae:	bmi.n	48d6 <FsCache::get(unsigned long, unsigned char)+0x3e>
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    48b0:	lsls	r3, r7, #30
    48b2:	bpl.n	48e2 <FsCache::get(unsigned long, unsigned char)+0x4a>
    48b4:	add.w	r5, r4, #12
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    48b8:	and.w	r2, r7, #1
    48bc:	movs	r3, #0
    48be:	orrs	r3, r2
    48c0:	strb	r3, [r4, #0]
    48c2:	mov	r0, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    48c4:	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
}
    48c6:	pop	{r3, r4, r5, r6, r7, pc}
    48c8:	ldrsb.w	r3, [r0], #12
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    48cc:	and.w	r2, r7, #1
    48d0:	orrs	r3, r2
    48d2:	strb	r3, [r4, #0]
  return m_cacheBuffer;

fail:
  return nullptr;
}
    48d4:	pop	{r3, r4, r5, r6, r7, pc}
    48d6:	bl	486c <FsCache::sync() [clone .part.2]>
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
    48da:	cmp	r0, #0
    48dc:	bne.n	48b0 <FsCache::get(unsigned long, unsigned char)+0x18>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
    48de:	movs	r0, #0
    48e0:	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    48e2:	ldr	r0, [r4, #4]
    48e4:	ldr	r3, [r0, #0]
    48e6:	add.w	r5, r4, #12
    48ea:	ldr	r3, [r3, #8]
    48ec:	mov	r2, r5
    48ee:	mov	r1, r6
    48f0:	blx	r3
    48f2:	cmp	r0, #0
    48f4:	bne.n	48b8 <FsCache::get(unsigned long, unsigned char)+0x20>
    48f6:	b.n	48de <FsCache::get(unsigned long, unsigned char)+0x46>

000048f8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>:
    }
  }
  return 1;
}
//-----------------------------------------------------------------------------
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    48f8:	push	{r3, r4, r5, lr}
    48fa:	mov	r4, r1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    48fc:	ldr.w	r1, [r0, #1052]	; 0x41c
    4900:	mov	r5, r2
    4902:	add.w	r1, r1, r4, lsr #7
    4906:	add.w	r0, r0, #524	; 0x20c
    490a:	movs	r2, #0
    490c:	bl	4898 <FsCache::get(unsigned long, unsigned char)>
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    4910:	cbz	r0, 4924 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x2c>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    4912:	lsls	r4, r4, #2
    4914:	ubfx	r4, r4, #0, #9
    4918:	ldr	r3, [r0, r4]
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    491a:	adds	r2, r3, #1
    491c:	beq.n	4928 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x30>
    return 0;
  }
  *value = next;
    491e:	str	r3, [r5, #0]
  return 1;
    4920:	movs	r0, #1
    4922:	pop	{r3, r4, r5, pc}
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
    4924:	movs	r0, #255	; 0xff
    4926:	pop	{r3, r4, r5, pc}
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    return 0;
    4928:	movs	r0, #0
  }
  *value = next;
  return 1;
}
    492a:	pop	{r3, r4, r5, pc}

0000492c <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>:
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    492c:	push	{r3, r4, r5, lr}
    492e:	mov	r4, r1
    4930:	ldr.w	r1, [r0, #1052]	; 0x41c
    4934:	mov	r5, r2
    4936:	add.w	r1, r1, r4, lsr #7
    493a:	add.w	r0, r0, #524	; 0x20c
    493e:	movs	r2, #1
    4940:	bl	4898 <FsCache::get(unsigned long, unsigned char)>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCacheGet(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    4944:	mov	r3, r0
    4946:	cbz	r0, 4954 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]+0x28>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    4948:	lsls	r4, r4, #2
    494a:	ubfx	r4, r4, #0, #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;
    494e:	movs	r0, #1
    4950:	str	r5, [r3, r4]
    4952:	pop	{r3, r4, r5, pc}

 fail:
  return false;
}
    4954:	pop	{r3, r4, r5, pc}
    4956:	nop

00004958 <FsCache::sync()>:
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    4958:	ldrb	r3, [r0, #0]
    495a:	lsls	r3, r3, #31
    495c:	bmi.n	4962 <FsCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    495e:	movs	r0, #1
    4960:	bx	lr
    4962:	b.w	486c <FsCache::sync() [clone .part.2]>
    4966:	nop

00004968 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
 fail:
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    4968:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    496c:	mov	r8, r0
    496e:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    4970:	mov	fp, r1
    4972:	cmp	r1, #0
    4974:	beq.n	4a00 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x98>
    4976:	subs	r7, r1, #2
  if (start >= m_clusterCount) {
    4978:	ldr.w	r3, [r8, #1064]	; 0x428
    497c:	cmp	r7, r3
    497e:	bcs.n	49f8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x90>
    4980:	and.w	r5, r7, #7
    4984:	movs	r3, #1
    4986:	lsl.w	r5, r3, r5
    498a:	uxtb	r5, r5
    498c:	ubfx	sl, r7, #3, #9
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
    4990:	mov	r6, r7
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    4992:	mov	r4, r7
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    4994:	ldr.w	r1, [r8, #1060]	; 0x424
    4998:	movs	r2, #0
    499a:	add.w	r1, r1, r4, lsr #12
    499e:	mov	r0, r8
    49a0:	bl	4898 <FsCache::get(unsigned long, unsigned char)>
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    49a4:	cbz	r0, 49d8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x70>
    49a6:	ldrb.w	r1, [r0, sl]
    49aa:	b.n	49c2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5a>
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    49ac:	cmp	r2, r9
    49ae:	beq.n	4a06 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9e>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    49b0:	cmp	r7, r4
    49b2:	beq.n	49d6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    49b4:	ldr.w	r2, [r8, #1064]	; 0x428
    49b8:	cmp	r4, r2
    49ba:	bcs.n	49ec <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x84>
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    49bc:	ands.w	r5, r3, #255	; 0xff
    49c0:	beq.n	49dc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x74>
        endAlloc++;
    49c2:	adds	r4, #1
        if (!(mask & cache[i])) {
    49c4:	tst	r5, r1
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    49c6:	mov.w	r3, r5, lsl #1
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    49ca:	sub.w	r2, r4, r6
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    49ce:	beq.n	49ac <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x44>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    49d0:	cmp	r7, r4
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    49d2:	mov	r6, r4
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    49d4:	bne.n	49b4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4c>
          return 1;
    49d6:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    49d8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    49dc:	add.w	sl, sl, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    49e0:	cmp.w	sl, #512	; 0x200
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    49e4:	mov.w	r5, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    49e8:	bne.n	49a6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3e>
    49ea:	b.n	49f0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
    49ec:	movs	r6, #0
    49ee:	mov	r4, r6
          break;
        }
      }
      mask = 1;
    }
    i = 0;
    49f0:	mov.w	sl, #0
    49f4:	movs	r5, #1
    49f6:	b.n	4994 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
    49f8:	movs	r7, #0
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
    49fa:	mov	sl, r7
    49fc:	movs	r5, #1
    49fe:	b.n	4990 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    4a00:	ldr.w	r7, [r0, #1048]	; 0x418
    4a04:	b.n	4978 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
            if (cluster == 0 && count == 1) {
    4a06:	cmp.w	fp, #0
    4a0a:	bne.n	4a16 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xae>
    4a0c:	cmp.w	r9, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    4a10:	it	eq
    4a12:	streq.w	r6, [r8, #1048]	; 0x418
            }
            return bgnAlloc + 2;
    4a16:	adds	r0, r6, #2
    4a18:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00004a1c <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    4a1c:	push	{r3, r4, r5, r6, r7, lr}
    4a1e:	mov	r4, r0
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    4a20:	movs	r3, #0
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
  m_sector = 0XFFFFFFFF;
    4a22:	mov.w	r6, #4294967295
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    4a26:	add.w	r7, r0, #524	; 0x20c
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
  m_blockDev = dev;
    4a2a:	str.w	r1, [r0, #1080]	; 0x438
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this partition.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    4a2e:	str	r1, [r0, #4]
    4a30:	str.w	r1, [r0, #528]	; 0x210

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    4a34:	mov	r5, r2
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    4a36:	mov	r0, r7
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    4a38:	strb.w	r3, [r4, #1084]	; 0x43c
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    4a3c:	strb	r3, [r4, #0]
    4a3e:	strb.w	r3, [r4, #524]	; 0x20c
  m_sector = 0XFFFFFFFF;
    4a42:	str	r6, [r4, #8]
    4a44:	str.w	r6, [r4, #532]	; 0x214
    4a48:	mov	r2, r3
    4a4a:	mov	r1, r3
    4a4c:	bl	4898 <FsCache::get(unsigned long, unsigned char)>

  m_fatType = 0;
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    4a50:	cmp	r5, #4
    4a52:	bhi.n	4a6e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    4a54:	mov	r6, r0
    4a56:	cbz	r0, 4a6e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    4a58:	cbnz	r5, 4a72 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    4a5a:	movs	r2, #5
    4a5c:	ldr	r1, [pc, #152]	; (4af8 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xdc>)
    4a5e:	adds	r0, r6, #3
    4a60:	bl	c45c <strncmp>
    4a64:	cbnz	r0, 4a6e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    4a66:	ldrb.w	r3, [r6, #108]	; 0x6c
    4a6a:	cmp	r3, #9
    4a6c:	beq.n	4aa2 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x86>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    4a6e:	movs	r0, #0
    4a70:	pop	{r3, r4, r5, r6, r7, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    4a72:	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    4a74:	add.w	r3, r0, r3, lsl #4
    4a78:	ldrb.w	r2, [r3, #446]	; 0x1be
    4a7c:	ands.w	r2, r2, #127	; 0x7f
    4a80:	bne.n	4a6e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    4a82:	ldrb.w	r3, [r3, #450]	; 0x1c2
    4a86:	cmp	r3, #0
    4a88:	beq.n	4a6e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    4a8a:	add.w	r5, r0, r5, lsl #4
    4a8e:	mov	r0, r7
    4a90:	ldr.w	r5, [r5, #438]	; 0x1b6
    4a94:	mov	r1, r5
    4a96:	bl	4898 <FsCache::get(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCacheGet(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
    4a9a:	mov	r6, r0
    4a9c:	cmp	r0, #0
    4a9e:	bne.n	4a5a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x3e>
    4aa0:	b.n	4a6e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    4aa2:	ldr	r3, [r6, #80]	; 0x50
    4aa4:	add	r3, r5
    4aa6:	str.w	r3, [r4, #1052]	; 0x41c
    4aaa:	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    4aac:	str.w	r3, [r4, #1056]	; 0x420
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    4ab0:	ldr	r3, [r6, #88]	; 0x58
    4ab2:	add	r5, r3
    4ab4:	str.w	r5, [r4, #1060]	; 0x424
    4ab8:	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    4aba:	str.w	r3, [r4, #1064]	; 0x428
    4abe:	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    4ac0:	str.w	r3, [r4, #1068]	; 0x42c
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    4ac4:	ldrb.w	r3, [r6, #109]	; 0x6d
    4ac8:	strb.w	r3, [r4, #1085]	; 0x43d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4acc:	movs	r5, #1
    4ace:	adds	r3, #9
    4ad0:	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    4ad4:	subs	r2, r3, #1
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    4ad6:	str.w	r0, [r4, #1048]	; 0x418
  bitmapFind(0, 1);
    4ada:	mov	r1, r0
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4adc:	str.w	r3, [r4, #1076]	; 0x434
  m_clusterMask = m_bytesPerCluster - 1;
    4ae0:	str.w	r2, [r4, #1072]	; 0x430
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    4ae4:	mov	r0, r4
    4ae6:	mov	r2, r5
    4ae8:	bl	4968 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    4aec:	movs	r3, #64	; 0x40
    4aee:	strb.w	r3, [r4, #1084]	; 0x43c
  return true;
    4af2:	mov	r0, r5

 fail:
  return false;
}
    4af4:	pop	{r3, r4, r5, r6, r7, pc}
    4af6:	nop
    4af8:	.word	0x0000fbb8

00004afc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    4afc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
    4b00:	subs	r1, #2
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    4b02:	mov	r8, r0
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    4b04:	ldr.w	r0, [r0, #1064]	; 0x428
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    4b08:	mov	r5, r2
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    4b0a:	adds	r2, r1, r2
    4b0c:	cmp	r2, r0
    4b0e:	bhi.n	4b82 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    4b10:	mov	sl, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    4b12:	ldr.w	r3, [r8, #1048]	; 0x418
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    4b16:	cmp.w	sl, #0
    4b1a:	bne.n	4b88 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    4b1c:	cmp	r1, r3
      m_bitmapStart = start;
    4b1e:	it	cc
    4b20:	strcc.w	r1, [r8, #1048]	; 0x418
    }
  }
  mask = 1 << (start & 7);
    4b24:	and.w	r4, r1, #7
    4b28:	movs	r2, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    4b2a:	ldr.w	r3, [r8, #1060]	; 0x424
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    4b2e:	lsl.w	r4, r2, r4
    4b32:	uxtb	r4, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    4b34:	add.w	r9, r3, r1, lsr #12
  i = (start >> 3) & m_sectorMask;
    4b38:	ubfx	r6, r1, #3, #9
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    4b3c:	movs	r2, #1
    4b3e:	mov	r1, r9
    4b40:	mov	r0, r8
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    4b42:	add	r9, r2
    4b44:	bl	4898 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    4b48:	cbz	r0, 4b82 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    4b4a:	adds	r7, r0, r6
    4b4c:	add.w	r0, r0, #512	; 0x200
    4b50:	ldrb.w	r2, [r7], #1
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    4b54:	tst	r2, r4
    4b56:	ite	ne
    4b58:	movne	r6, #1
    4b5a:	moveq	r6, #0
    4b5c:	cmp	r6, sl
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    4b5e:	eor.w	r2, r2, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    4b62:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    4b66:	beq.n	4b82 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
    4b68:	subs	r5, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    4b6a:	strb.w	r2, [r7, #-1]
        if (--count == 0) {
    4b6e:	beq.n	4b9c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa0>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    4b70:	ands.w	r4, r4, #255	; 0xff
    4b74:	bne.n	4b54 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x58>
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    4b76:	cmp	r0, r7
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    4b78:	mov	r6, r4
    4b7a:	mov.w	r4, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    4b7e:	bne.n	4b50 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    4b80:	b.n	4b3c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x40>
    }
    i = 0;
  }

 fail:
  return false;
    4b82:	movs	r0, #0
    4b84:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    4b88:	cmp	r1, r3
    4b8a:	bhi.n	4b24 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
    4b8c:	cmp	r2, r3
    4b8e:	bls.n	4b24 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    4b90:	cmp	r2, r0
    4b92:	it	cs
    4b94:	movcs	r2, #0
    4b96:	str.w	r2, [r8, #1048]	; 0x418
    4b9a:	b.n	4b24 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
    4b9c:	movs	r0, #1
    i = 0;
  }

 fail:
  return false;
}
    4b9e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4ba2:	nop

00004ba4 <ExFatPartition::chainSize(unsigned long)>:
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    4ba4:	push	{r4, r5, r6, lr}
    4ba6:	sub	sp, #8
    4ba8:	add	r6, sp, #8
    4baa:	mov	r5, r0
    4bac:	str.w	r1, [r6, #-4]!
  uint32_t n = 0;
    4bb0:	movs	r4, #0
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4bb2:	ldr.w	r3, [r5, #1064]	; 0x428
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    4bb6:	ldr	r1, [sp, #4]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4bb8:	adds	r3, #1
    4bba:	cmp	r1, r3
    4bbc:	bls.n	4bc4 <ExFatPartition::chainSize(unsigned long)+0x20>
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    4bbe:	movs	r0, #0
    n++;
  } while (status);
  return n;
}
    4bc0:	add	sp, #8
    4bc2:	pop	{r4, r5, r6, pc}
    4bc4:	mov	r2, r6
    4bc6:	mov	r0, r5
    4bc8:	bl	48f8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    4bcc:	sxtb	r0, r0
    if (status < 0) return 0;
    4bce:	cmp	r0, #0
    4bd0:	blt.n	4bbe <ExFatPartition::chainSize(unsigned long)+0x1a>
    n++;
    4bd2:	add.w	r4, r4, #1
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    4bd6:	bne.n	4bb2 <ExFatPartition::chainSize(unsigned long)+0xe>
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    4bd8:	mov	r0, r4
  } while (status);
  return n;
}
    4bda:	add	sp, #8
    4bdc:	pop	{r4, r5, r6, pc}
    4bde:	nop

00004be0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
//-----------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    4be0:	push	{r3, r4, r5, r6, r7, lr}
    4be2:	mov	r6, r1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    4be4:	ldmia.w	r6, {r3, r5}
    4be8:	ldr.w	r1, [r0, #1072]	; 0x430
    4bec:	ldr.w	r4, [r0, #1060]	; 0x424
    4bf0:	ldrb.w	r7, [r0, #1085]	; 0x43d
    4bf4:	ands	r1, r5
    4bf6:	subs	r3, #2
    4bf8:	add.w	r1, r4, r1, lsr #9
    4bfc:	lsls	r3, r7
    4bfe:	add	r1, r3
    4c00:	add.w	r0, r0, #524	; 0x20c
    4c04:	bl	4898 <FsCache::get(unsigned long, unsigned char)>
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    4c08:	cbz	r0, 4c12 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x32>
    4c0a:	ldr	r3, [r6, #4]
    4c0c:	ubfx	r3, r3, #0, #9
    4c10:	add	r0, r3
}
    4c12:	pop	{r3, r4, r5, r6, r7, pc}

00004c14 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    4c14:	push	{r4, r5, r6, lr}
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4c16:	ldr	r4, [r1, #4]
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    4c18:	mov	r5, r1
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
    4c1a:	adds	r3, r4, r2
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4c1c:	ldr.w	r1, [r0, #1072]	; 0x430
  pos->position += offset;
    4c20:	str	r3, [r5, #4]
  tmp >>= bytesPerClusterShift();
    4c22:	ldrb.w	r3, [r0, #1085]	; 0x43d
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4c26:	ands	r4, r1
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    4c28:	adds	r3, #9
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4c2a:	add	r2, r4
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    4c2c:	uxtb	r3, r3
    4c2e:	lsr.w	r4, r2, r3
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    4c32:	mov	r6, r0
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    4c34:	cbz	r4, 4c46 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
    if (pos->isContiguous) {
    4c36:	ldrb	r3, [r5, #8]
    4c38:	cbz	r3, 4c4a <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x36>
      pos->cluster++;
    4c3a:	ldr	r3, [r5, #0]
    4c3c:	adds	r3, #1
    4c3e:	str	r3, [r5, #0]
    4c40:	subs	r4, #1
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    4c42:	cmp	r4, #0
    4c44:	bne.n	4c36 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x22>
      if (status != 1) {
        return status;
      }
    }
  }
  return 1;
    4c46:	movs	r0, #1
    4c48:	pop	{r4, r5, r6, pc}
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4c4a:	ldr.w	r3, [r6, #1064]	; 0x428
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    4c4e:	ldr	r1, [r5, #0]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4c50:	adds	r3, #1
    4c52:	cmp	r1, r3
    4c54:	bls.n	4c5c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x48>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    4c56:	mov.w	r0, #4294967295
        return status;
      }
    }
  }
  return 1;
}
    4c5a:	pop	{r4, r5, r6, pc}
    4c5c:	mov	r2, r5
    4c5e:	mov	r0, r6
    4c60:	bl	48f8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    4c64:	sxtb	r0, r0
      if (status != 1) {
    4c66:	cmp	r0, #1
    4c68:	beq.n	4c40 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
    4c6a:	pop	{r4, r5, r6, pc}

00004c6c <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4c6c:	ldr.w	r3, [r0, #1064]	; 0x428
    4c70:	adds	r3, #1
    4c72:	cmp	r3, r1
    4c74:	bcs.n	4c7a <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xe>
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    4c76:	movs	r0, #255	; 0xff
    4c78:	bx	lr
    4c7a:	b.w	48f8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
    4c7e:	nop

00004c80 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4c80:	cmp	r1, #1
    4c82:	bls.n	4ca0 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x20>
    4c84:	ldr.w	r3, [r0, #1064]	; 0x428
    4c88:	adds	r3, #1
    4c8a:	cmp	r1, r3
  }
  *value = next;
  return 1;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    4c8c:	push	{r4}
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4c8e:	bls.n	4c98 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x18>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
}
    4c90:	movs	r0, #0
    4c92:	ldr.w	r4, [sp], #4
    4c96:	bx	lr
    4c98:	ldr.w	r4, [sp], #4
    4c9c:	b.w	492c <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    4ca0:	movs	r0, #0
    4ca2:	bx	lr

00004ca4 <ExFatPartition::freeChain(unsigned long)>:
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    4ca4:	push	{r4, r5, r6, r7, lr}
    4ca6:	mov	r4, r1
    4ca8:	sub	sp, #12
    4caa:	mov	r5, r0
  uint32_t next;
  uint32_t start = cluster;
    4cac:	mov	r6, r1
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4cae:	ldr.w	r3, [r5, #1064]	; 0x428
    4cb2:	adds	r3, #1
    4cb4:	cmp	r4, r3
    4cb6:	bls.n	4cbe <ExFatPartition::freeChain(unsigned long)+0x1a>
  } while (status);

  return true;

 fail:
  return false;
    4cb8:	movs	r0, #0
}
    4cba:	add	sp, #12
    4cbc:	pop	{r4, r5, r6, r7, pc}
    4cbe:	add	r2, sp, #4
    4cc0:	mov	r1, r4
    4cc2:	mov	r0, r5
    4cc4:	bl	48f8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    4cc8:	sxtb	r7, r0
    if (status < 0) {
    4cca:	cmp	r7, #0
    4ccc:	blt.n	4cb8 <ExFatPartition::freeChain(unsigned long)+0x14>
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4cce:	cmp	r4, #1
    4cd0:	bls.n	4cb8 <ExFatPartition::freeChain(unsigned long)+0x14>
    4cd2:	ldr.w	r3, [r5, #1064]	; 0x428
    4cd6:	adds	r3, #1
    4cd8:	cmp	r4, r3
    4cda:	bhi.n	4cb8 <ExFatPartition::freeChain(unsigned long)+0x14>
    4cdc:	movs	r2, #0
    4cde:	mov	r1, r4
    4ce0:	mov	r0, r5
    4ce2:	bl	492c <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    4ce6:	cmp	r0, #0
    4ce8:	beq.n	4cb8 <ExFatPartition::freeChain(unsigned long)+0x14>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    4cea:	ldr	r3, [sp, #4]
    4cec:	adds	r4, #1
    4cee:	cmp	r4, r3
    4cf0:	bne.n	4d0a <ExFatPartition::freeChain(unsigned long)+0x66>
    4cf2:	cmp	r7, #0
    4cf4:	bne.n	4cae <ExFatPartition::freeChain(unsigned long)+0xa>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    4cf6:	mov	r3, r7
    4cf8:	subs	r2, r4, r6
    4cfa:	mov	r1, r6
    4cfc:	mov	r0, r5
    4cfe:	bl	4afc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4d02:	cmp	r0, #0
    4d04:	beq.n	4cb8 <ExFatPartition::freeChain(unsigned long)+0x14>

  return true;

 fail:
  return false;
}
    4d06:	add	sp, #12
    4d08:	pop	{r4, r5, r6, r7, pc}
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    4d0a:	subs	r2, r4, r6
    4d0c:	mov	r1, r6
    4d0e:	movs	r3, #0
    4d10:	mov	r0, r5
    4d12:	bl	4afc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4d16:	cmp	r0, #0
    4d18:	beq.n	4cb8 <ExFatPartition::freeChain(unsigned long)+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    4d1a:	ldr	r4, [sp, #4]
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    4d1c:	cmp	r7, #0
    4d1e:	beq.n	4cba <ExFatPartition::freeChain(unsigned long)+0x16>
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    4d20:	mov	r6, r4
    4d22:	b.n	4cae <ExFatPartition::freeChain(unsigned long)+0xa>

00004d24 <ExFatPartition::freeClusterCount()>:

 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    4d24:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    4d28:	movs	r4, #0
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
    4d2a:	ldr.w	r6, [r0, #1060]	; 0x424

 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    4d2e:	mov	r8, r0
    4d30:	add.w	r7, r0, #524	; 0x20c
  uint32_t nc = 0;
    4d34:	mov	r5, r4
    4d36:	mov	r1, r6
    4d38:	movs	r2, #0
    4d3a:	mov	r0, r7
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
  uint8_t* cache;

  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    4d3c:	adds	r6, #1
    4d3e:	bl	4898 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    4d42:	cbz	r0, 4d92 <ExFatPartition::freeClusterCount()+0x6e>
    4d44:	add.w	lr, r0, #4294967295
    4d48:	ldr.w	ip, [r8, #1064]	; 0x428
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    4d4c:	ldrb.w	r0, [lr, #1]!
    4d50:	cmp	r0, #255	; 0xff
    4d52:	add.w	r9, r5, #4096	; 0x1000
    4d56:	beq.n	4d80 <ExFatPartition::freeClusterCount()+0x5c>
        usedCount+= 8;
      } else if (cache[i]) {
    4d58:	cbz	r0, 4d6e <ExFatPartition::freeClusterCount()+0x4a>
    4d5a:	movs	r2, #8
    4d5c:	movs	r3, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
          if ((mask & cache[i])) {
    4d5e:	tst	r0, r3
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    4d60:	mov.w	r1, r3, lsl #1
          if ((mask & cache[i])) {
            usedCount++;
    4d64:	it	ne
    4d66:	addne	r4, #1
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    4d68:	subs	r2, #1
    4d6a:	uxtb	r3, r1
    4d6c:	bne.n	4d5e <ExFatPartition::freeClusterCount()+0x3a>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    4d6e:	adds	r5, #8
      if (nc >= m_clusterCount) {
    4d70:	cmp	ip, r5
    4d72:	bls.n	4d8a <ExFatPartition::freeClusterCount()+0x66>
  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    4d74:	cmp	r5, r9
    4d76:	beq.n	4d36 <ExFatPartition::freeClusterCount()+0x12>
      if (cache[i] == 0XFF) {
    4d78:	ldrb.w	r0, [lr, #1]!
    4d7c:	cmp	r0, #255	; 0xff
    4d7e:	bne.n	4d58 <ExFatPartition::freeClusterCount()+0x34>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    4d80:	adds	r5, #8
      if (nc >= m_clusterCount) {
    4d82:	cmp	ip, r5
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
    4d84:	add.w	r4, r4, #8
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    4d88:	bhi.n	4d74 <ExFatPartition::freeClusterCount()+0x50>
        return m_clusterCount - usedCount;
    4d8a:	rsb	r0, r4, ip
    4d8e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      }
    }
  }
}
    4d92:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4d96:	nop

00004d98 <ExFatPartition::rootLength()>:
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    4d98:	push	{r4, lr}
    4d9a:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    4d9c:	ldr.w	r1, [r0, #1068]	; 0x42c
    4da0:	bl	4ba4 <ExFatPartition::chainSize(unsigned long)>
  return nc << bytesPerClusterShift();
    4da4:	ldrb.w	r3, [r4, #1085]	; 0x43d
    4da8:	adds	r3, #9
    4daa:	uxtb	r3, r3
}
    4dac:	lsls	r0, r3
    4dae:	pop	{r4, pc}

00004db0 <exFatHashName(char const*, unsigned int, unsigned short)>:
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    4db0:	cbz	r1, 4de6 <exFatHashName(char const*, unsigned int, unsigned short)+0x36>
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
    4db2:	push	{r4}
    4db4:	add	r1, r0
    4db6:	lsls	r3, r2, #15
    4db8:	orr.w	r3, r3, r2, lsr #1
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    4dbc:	ldrb.w	r2, [r0], #1
    if ('a' <= c && c <= 'z') {
    4dc0:	sub.w	r4, r2, #97	; 0x61
    4dc4:	cmp	r4, #25
      c -= 'a' - 'A';
    4dc6:	itt	ls
    4dc8:	subls	r2, #32
    4dca:	uxtbls	r2, r2
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    4dcc:	uxtah	r2, r2, r3
    4dd0:	uxth	r2, r2
    4dd2:	lsls	r3, r2, #15
    4dd4:	orr.w	r2, r3, r2, lsr #1
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    4dd8:	cmp	r1, r0
    4dda:	uxth	r2, r2
    4ddc:	bne.n	4db6 <exFatHashName(char const*, unsigned int, unsigned short)+0x6>
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    hash = ((hash << 15) | (hash >> 1));
  }
  return hash;
}
    4dde:	mov	r0, r2
    4de0:	ldr.w	r4, [sp], #4
    4de4:	bx	lr
    4de6:	mov	r0, r2
    4de8:	bx	lr
    4dea:	nop

00004dec <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>:
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    4dec:	cbz	r3, 4e40 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x54>
  }
  return hash;
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
    4dee:	push	{r4, r5, r6}
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    4df0:	ldrh	r4, [r0, #2]
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4df2:	cmp	r4, #126	; 0x7e
    4df4:	bhi.n	4e34 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
    4df6:	add	r3, r2
    4df8:	adds	r5, r1, r3
    4dfa:	add	r2, r1
    4dfc:	adds	r0, #2
    4dfe:	ldrb.w	r3, [r2], #1
    4e02:	uxtb	r4, r4
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    4e04:	sub.w	r1, r3, #97	; 0x61
    4e08:	cmp	r1, #25
    4e0a:	sub.w	r1, r4, #97	; 0x61
    4e0e:	ite	ls
    4e10:	movls	r6, #32
    4e12:	movhi	r6, #0
    4e14:	cmp	r1, #25
    4e16:	ite	ls
    4e18:	movls	r1, #32
    4e1a:	movhi	r1, #0
    4e1c:	subs	r3, r3, r6
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4e1e:	subs	r4, r4, r1
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    4e20:	uxtb	r3, r3
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4e22:	uxtb	r4, r4
    4e24:	cmp	r4, r3
    4e26:	bne.n	4e34 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    4e28:	cmp	r2, r5
    4e2a:	beq.n	4e3a <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4e>
    4e2c:	ldrh.w	r4, [r0, #2]!
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4e30:	cmp	r4, #126	; 0x7e
    4e32:	bls.n	4dfe <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x12>
      return false;
    4e34:	movs	r0, #0
    }
  }
  return true;
}
    4e36:	pop	{r4, r5, r6}
    4e38:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    4e3a:	movs	r0, #1
}
    4e3c:	pop	{r4, r5, r6}
    4e3e:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    4e40:	movs	r0, #1
}
    4e42:	bx	lr

00004e44 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    4e44:	ldr	r1, [r0, #24]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    4e46:	push	{r3, r4, r5, r6, r7, lr}
    4e48:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    4e4a:	ldr	r0, [r0, #32]
    4e4c:	cbz	r1, 4e50 <ExFatFile::addCluster()+0xc>
    4e4e:	adds	r1, #1
    4e50:	movs	r2, #1
    4e52:	bl	4968 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    4e56:	cmp	r0, #1
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    4e58:	mov	r6, r0
  if (find < 2) {
    4e5a:	bls.n	4ebc <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    4e5c:	movs	r3, #1
    4e5e:	mov	r1, r0
    4e60:	mov	r2, r3
    4e62:	ldr	r0, [r4, #32]
    4e64:	bl	4afc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4e68:	mov	r7, r0
    4e6a:	cbz	r0, 4ebc <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    4e6c:	ldr	r0, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    4e6e:	ldrb.w	r3, [r4, #51]	; 0x33
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    4e72:	cbz	r0, 4ec2 <ExFatFile::addCluster()+0x7e>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    4e74:	lsls	r2, r3, #25
    4e76:	bpl.n	4ea0 <ExFatFile::addCluster()+0x5c>
    if (find == (m_curCluster + 1)) {
    4e78:	adds	r2, r0, #1
    4e7a:	cmp	r6, r2
    4e7c:	beq.n	4eca <ExFatFile::addCluster()+0x86>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    4e7e:	bic.w	r2, r3, #64	; 0x40
    4e82:	strb.w	r2, [r4, #51]	; 0x33

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4e86:	ldr	r3, [r4, #28]
    4e88:	b.n	4e96 <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    4e8a:	ldr	r0, [r4, #32]
    4e8c:	bl	4c80 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4e90:	cbz	r0, 4ebc <ExFatFile::addCluster()+0x78>
    4e92:	ldr	r0, [r4, #24]
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4e94:	mov	r3, r5
      if (!m_vol->fatPut(c, c + 1)) {
    4e96:	adds	r5, r3, #1
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4e98:	cmp	r3, r0
      if (!m_vol->fatPut(c, c + 1)) {
    4e9a:	mov	r1, r3
    4e9c:	mov	r2, r5
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4e9e:	bcc.n	4e8a <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    4ea0:	mov.w	r2, #4294967295
    4ea4:	mov	r1, r6
    4ea6:	ldr	r0, [r4, #32]
    4ea8:	bl	4c80 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4eac:	cbz	r0, 4ebc <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    4eae:	ldr	r1, [r4, #24]
    4eb0:	cbz	r1, 4eca <ExFatFile::addCluster()+0x86>
    if (!m_vol->fatPut(m_curCluster, find)) {
    4eb2:	mov	r2, r6
    4eb4:	ldr	r0, [r4, #32]
    4eb6:	bl	4c80 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4eba:	cbnz	r0, 4eca <ExFatFile::addCluster()+0x86>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    4ebc:	movs	r7, #0
}
    4ebe:	mov	r0, r7
    4ec0:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    4ec2:	orr.w	r3, r3, #64	; 0x40
    4ec6:	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    4eca:	str	r6, [r4, #24]
  return true;

 fail:
  return false;
}
    4ecc:	mov	r0, r7
    4ece:	pop	{r3, r4, r5, r6, r7, pc}

00004ed0 <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    4ed0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirPos_t pos = m_dirPos;
    4ed4:	add.w	r3, r0, #36	; 0x24

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    4ed8:	mov	r5, r0
  DirPos_t pos = m_dirPos;
    4eda:	ldmia.w	r3, {r0, r1, r2}

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    4ede:	sub	sp, #20
    4ee0:	ldrb.w	r3, [r5, #51]	; 0x33
  DirPos_t pos = m_dirPos;
    4ee4:	add	r6, sp, #4
    4ee6:	stmia.w	r6, {r0, r1, r2}
  uint8_t* cache;
  if (!isWritable()) {
    4eea:	lsls	r2, r3, #30
    4eec:	bpl.n	4f26 <ExFatFile::remove()+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    4eee:	ldr	r1, [r5, #28]
    4ef0:	cbnz	r1, 4f2e <ExFatFile::remove()+0x5e>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    4ef2:	movs	r4, #0
  for (uint8_t i = 0; i <= m_setCount; i++) {
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    4ef4:	movs	r2, #1
    4ef6:	mov	r1, r6
    4ef8:	ldr	r0, [r5, #32]
    4efa:	bl	4be0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    4efe:	adds	r4, #1
    4f00:	uxtb	r4, r4
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
    4f02:	cbz	r0, 4f26 <ExFatFile::remove()+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    4f04:	ldrb	r3, [r0, #0]
    4f06:	and.w	r3, r3, #127	; 0x7f
    4f0a:	strb	r3, [r0, #0]
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    4f0c:	ldrb.w	r3, [r5, #48]	; 0x30
    4f10:	cmp	r3, r4
    4f12:	bcc.n	4f78 <ExFatFile::remove()+0xa8>
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
    4f14:	cmp	r4, #0
    4f16:	beq.n	4ef4 <ExFatFile::remove()+0x24>
    4f18:	movs	r2, #32
    4f1a:	mov	r1, r6
    4f1c:	ldr	r0, [r5, #32]
    4f1e:	bl	4c14 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    4f22:	cmp	r0, #1
    4f24:	beq.n	4ef4 <ExFatFile::remove()+0x24>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    4f26:	movs	r0, #0
}
    4f28:	add	sp, #20
    4f2a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    4f2e:	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    4f30:	ldr	r0, [r5, #32]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    4f32:	bpl.n	4f6e <ExFatFile::remove()+0x9e>
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    4f34:	ldrd	r2, r3, [r5, #8]
    4f38:	ldrb.w	r4, [r0, #1085]	; 0x43d
    4f3c:	adds	r4, #9
    4f3e:	uxtb	r4, r4
    4f40:	adds.w	r8, r2, #4294967295
    4f44:	adc.w	r9, r3, #4294967295
    4f48:	rsb	r7, r4, #32
    4f4c:	lsl.w	r7, r9, r7
    4f50:	lsr.w	r2, r8, r4
    4f54:	sub.w	r3, r4, #32
    4f58:	lsr.w	r3, r9, r3
    4f5c:	orrs	r2, r7
    4f5e:	orrs	r2, r3
    4f60:	adds	r2, #1
    4f62:	movs	r3, #0
    4f64:	bl	4afc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4f68:	cmp	r0, #0
    4f6a:	bne.n	4ef2 <ExFatFile::remove()+0x22>
    4f6c:	b.n	4f26 <ExFatFile::remove()+0x56>
        DBG_FAIL_MACRO;
        goto fail;
      }
    } else {
      if (!m_vol->freeChain(m_firstCluster)) {
    4f6e:	bl	4ca4 <ExFatPartition::freeChain(unsigned long)>
    4f72:	cmp	r0, #0
    4f74:	bne.n	4ef2 <ExFatFile::remove()+0x22>
    4f76:	b.n	4f26 <ExFatFile::remove()+0x56>
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  return m_vol->cacheSync();
    4f78:	ldr	r4, [r5, #32]
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    4f7a:	movs	r3, #0
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4f7c:	mov	r0, r4
    4f7e:	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    4f82:	strb.w	r3, [r5, #51]	; 0x33
    4f86:	bl	4958 <FsCache::sync()>
    4f8a:	cmp	r0, #0
    4f8c:	beq.n	4f26 <ExFatFile::remove()+0x56>
    4f8e:	add.w	r0, r4, #524	; 0x20c
    4f92:	bl	4958 <FsCache::sync()>
    4f96:	cmp	r0, #0
    4f98:	beq.n	4f26 <ExFatFile::remove()+0x56>
    4f9a:	ldr.w	r0, [r4, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    4f9e:	ldr	r3, [r0, #0]
    4fa0:	ldr	r3, [r3, #20]
    4fa2:	blx	r3
    4fa4:	b.n	4f28 <ExFatFile::remove()+0x58>
    4fa6:	nop

00004fa8 <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    4fa8:	ldrb.w	r3, [r0, #49]	; 0x31
    4fac:	lsls	r1, r3, #27
    4fae:	bmi.n	4fb4 <ExFatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    4fb0:	movs	r0, #0
}
    4fb2:	bx	lr

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    4fb4:	push	{r4, lr}
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    4fb6:	movs	r2, #0
    4fb8:	sub	sp, #32
    4fba:	movs	r3, #0
    4fbc:	mov	r4, r0
    4fbe:	bl	4248 <ExFatFile::seekSet(unsigned long long)>
    4fc2:	b.n	4fd2 <ExFatFile::rmdir()+0x2a>
  while (1) {
    n = read(dir, 32);
    if (n == 0) {
      break;
    }
    if (n != 32 || dir[0] & 0X80) {
    4fc4:	cmp	r0, #32
    4fc6:	bne.n	4ffc <ExFatFile::rmdir()+0x54>
    4fc8:	ldrb.w	r3, [sp]
    4fcc:	lsls	r2, r3, #24
    4fce:	bmi.n	4ffc <ExFatFile::rmdir()+0x54>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (dir[0] == 0) {
    4fd0:	cbz	r3, 4fe0 <ExFatFile::rmdir()+0x38>
  }
  rewind();

  // make sure directory is empty
  while (1) {
    n = read(dir, 32);
    4fd2:	movs	r2, #32
    4fd4:	mov	r1, sp
    4fd6:	mov	r0, r4
    4fd8:	bl	4078 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    4fdc:	cmp	r0, #0
    4fde:	bne.n	4fc4 <ExFatFile::rmdir()+0x1c>
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    4fe0:	ldrb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    4fe4:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
    4fe6:	orr.w	r3, r3, #2
    4fea:	strb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    4fee:	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    4ff2:	mov	r0, r4
    4ff4:	bl	4ed0 <ExFatFile::remove()>

fail:
  return false;
}
    4ff8:	add	sp, #32
    4ffa:	pop	{r4, pc}
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    4ffc:	movs	r0, #0
}
    4ffe:	add	sp, #32
    5000:	pop	{r4, pc}
    5002:	nop

00005004 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    5004:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    5008:	add.w	fp, r0, #36	; 0x24
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    500c:	mov	r6, r0
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    500e:	ldmia.w	fp, {r0, r1, r2}
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    5012:	sub	sp, #28
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    5014:	add.w	r8, sp, #12
    5018:	stmia.w	r8, {r0, r1, r2}
    501c:	movs	r7, #0
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;
    501e:	mov	sl, r7
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    5020:	mov	r4, r7
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    5022:	movs	r2, #0
    5024:	mov	r1, r8
    5026:	ldr	r0, [r6, #32]
    5028:	bl	4be0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    502c:	uxtb.w	r9, r7
    if (!cache) {
    5030:	mov	r5, r0
    5032:	cbz	r0, 5042 <ExFatFile::syncDir()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    5034:	ldrb	r2, [r0, #0]
    5036:	cmp	r2, #192	; 0xc0
    5038:	beq.n	50e0 <ExFatFile::syncDir()+0xdc>
    503a:	cmp	r2, #193	; 0xc1
    503c:	beq.n	5056 <ExFatFile::syncDir()+0x52>
    503e:	cmp	r2, #133	; 0x85
    5040:	beq.n	5096 <ExFatFile::syncDir()+0x92>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    5042:	ldrb.w	r3, [r6, #50]	; 0x32
    5046:	orr.w	r3, r3, #1
    504a:	strb.w	r3, [r6, #50]	; 0x32
  return false;
    504e:	movs	r0, #0
}
    5050:	add	sp, #28
    5052:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5056:	mov	r0, r2
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5058:	movs	r1, #0
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    505a:	ldrb	r2, [r5, r1]
    505c:	lsls	r3, r4, #15
    505e:	orr.w	r4, r3, r4, lsr #1
    5062:	uxtah	r4, r2, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5066:	cmp	r1, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    5068:	uxth	r4, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    506a:	add.w	r1, r1, #1
    506e:	beq.n	508c <ExFatFile::syncDir()+0x88>
    5070:	cmp	r1, #31
    5072:	bls.n	505a <ExFatFile::syncDir()+0x56>
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    if (i == setCount) break;
    5074:	cmp	sl, r9
    5076:	beq.n	511c <ExFatFile::syncDir()+0x118>
    if (m_vol->dirSeek(&pos, 32) != 1) {
    5078:	movs	r2, #32
    507a:	mov	r1, r8
    507c:	ldr	r0, [r6, #32]
    507e:	bl	4c14 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    5082:	cmp	r0, #1
    5084:	add.w	r7, r7, #1
    5088:	beq.n	5022 <ExFatFile::syncDir()+0x1e>
    508a:	b.n	5042 <ExFatFile::syncDir()+0x3e>
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    508c:	cmp	r0, #133	; 0x85
    508e:	ite	eq
    5090:	moveq	r1, #4
    5092:	movne	r1, #2
    5094:	b.n	505a <ExFatFile::syncDir()+0x56>
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    5096:	ldr	r3, [pc, #192]	; (5158 <ExFatFile::syncDir()+0x154>)
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5098:	ldrb.w	r1, [r6, #49]	; 0x31
    509c:	ldr	r3, [r3, #0]
      goto fail;
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
    509e:	ldrb.w	sl, [r0, #1]
    50a2:	and.w	r1, r1, #55	; 0x37
    50a6:	strh	r1, [r0, #4]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    50a8:	cmp	r3, #0
    50aa:	beq.n	5056 <ExFatFile::syncDir()+0x52>
          m_vol->dataCacheDirty();
    50ac:	ldr	r1, [r6, #32]
    invalidate();
    return m_cacheBuffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    50ae:	ldrb.w	r2, [r1, #524]	; 0x20c
    50b2:	orr.w	r2, r2, #1
    50b6:	strb.w	r2, [r1, #524]	; 0x20c
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    50ba:	add	r0, sp, #8
    50bc:	add.w	r2, sp, #7
    50c0:	add.w	r1, sp, #10
    50c4:	blx	r3
          df->modifyTimeMs = ms10;
          setLe16(df->modifyTime, time);
    50c6:	ldrh.w	r2, [sp, #10]
          setLe16(df->modifyDate, date);
    50ca:	ldrh.w	r3, [sp, #8]
        if (FsDateTime::callback) {
          m_vol->dataCacheDirty();
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
    50ce:	ldrb.w	r1, [sp, #7]
    50d2:	strb	r1, [r5, #21]
    50d4:	strh	r2, [r5, #12]
    50d6:	strh	r2, [r5, #16]
    50d8:	strh	r3, [r5, #14]
    50da:	strh	r3, [r5, #18]
    50dc:	ldrb	r0, [r5, #0]
    50de:	b.n	5058 <ExFatFile::syncDir()+0x54>
        }
        break;

      case EXFAT_TYPE_STREAM:
        ds = reinterpret_cast<DirStream_t*>(cache);
        if (isContiguous()) {
    50e0:	ldrb.w	r3, [r6, #51]	; 0x33
    50e4:	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    50e8:	ldrb	r3, [r0, #1]
    50ea:	ite	ne
    50ec:	orrne.w	r3, r3, #2
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    50f0:	biceq.w	r3, r3, #2
    50f4:	strb	r3, [r0, #1]
        }
        setLe64(ds->validLength, m_validLength);
    50f6:	ldrd	r2, r3, [r6, #16]

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    50fa:	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
    50fe:	ldrd	r2, r3, [r6, #8]
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
    5102:	ldr	r1, [r6, #28]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    5104:	str	r1, [r0, #20]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    5106:	strd	r2, r3, [r0, #24]
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    510a:	ldr	r2, [r6, #32]
    510c:	ldrb.w	r3, [r2, #524]	; 0x20c
    5110:	orr.w	r3, r3, #1
    5114:	strb.w	r3, [r2, #524]	; 0x20c
    5118:	ldrb	r0, [r0, #0]
    511a:	b.n	5058 <ExFatFile::syncDir()+0x54>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  df = reinterpret_cast<DirFile_t *>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    511c:	mov	r1, fp
    511e:	movs	r2, #1
    5120:	ldr	r0, [r6, #32]
    5122:	bl	4be0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    5126:	cmp	r0, #0
    5128:	beq.n	5042 <ExFatFile::syncDir()+0x3e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    512a:	ldr	r5, [r6, #32]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    512c:	strh	r4, [r0, #2]
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    512e:	mov	r0, r5
    5130:	bl	4958 <FsCache::sync()>
    5134:	cmp	r0, #0
    5136:	beq.n	5042 <ExFatFile::syncDir()+0x3e>
    5138:	add.w	r0, r5, #524	; 0x20c
    513c:	bl	4958 <FsCache::sync()>
    5140:	cmp	r0, #0
    5142:	beq.w	5042 <ExFatFile::syncDir()+0x3e>
    5146:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    514a:	ldr	r3, [r0, #0]
    514c:	ldr	r3, [r3, #20]
    514e:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    5150:	cmp	r0, #0
    5152:	beq.w	5042 <ExFatFile::syncDir()+0x3e>
    5156:	b.n	5050 <ExFatFile::syncDir()+0x4c>
    5158:	.word	0x1fff1ea8

0000515c <ExFatFile::sync()>:
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    515c:	ldrb.w	r2, [r0, #49]	; 0x31
    5160:	cbz	r2, 5188 <ExFatFile::sync()+0x2c>

fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
    5162:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5164:	ldrb.w	r2, [r0, #51]	; 0x33
    5168:	lsls	r1, r2, #24
    516a:	bmi.n	518c <ExFatFile::sync()+0x30>
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
  }
  if (!m_vol->cacheSync()) {
    516c:	ldr	r5, [r0, #32]
    516e:	mov	r4, r0
    5170:	mov	r0, r5
    5172:	bl	4958 <FsCache::sync()>
    5176:	cbnz	r0, 519c <ExFatFile::sync()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    5178:	ldrb.w	r3, [r4, #50]	; 0x32
    517c:	orr.w	r3, r3, #1
    5180:	strb.w	r3, [r4, #50]	; 0x32
  return false;
    5184:	movs	r0, #0
}
    5186:	pop	{r3, r4, r5, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    5188:	movs	r0, #1
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    518a:	bx	lr
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    518c:	and.w	r2, r2, #127	; 0x7f
    5190:	strb.w	r2, [r0, #51]	; 0x33
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    5194:	ldmia.w	sp!, {r3, r4, r5, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    5198:	b.w	5004 <ExFatFile::syncDir()>
    519c:	add.w	r0, r5, #524	; 0x20c
    51a0:	bl	4958 <FsCache::sync()>
    51a4:	cmp	r0, #0
    51a6:	beq.n	5178 <ExFatFile::sync()+0x1c>
    51a8:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    51ac:	ldr	r3, [r0, #0]
    51ae:	ldr	r3, [r3, #20]
    51b0:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    51b2:	cmp	r0, #0
    51b4:	beq.n	5178 <ExFatFile::sync()+0x1c>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    51b6:	movs	r0, #1
    51b8:	pop	{r3, r4, r5, pc}
    51ba:	nop

000051bc <ExFatFile::addDirCluster()>:

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    51bc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    51c0:	ldrb.w	r3, [r0, #49]	; 0x31
    51c4:	lsls	r1, r3, #25

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    51c6:	mov	r4, r0
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    51c8:	bmi.n	5292 <ExFatFile::addDirCluster()+0xd6>
    51ca:	ldr	r0, [r0, #8]
    51cc:	ldr	r3, [r4, #32]
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    51ce:	ldr.w	r3, [r3, #1076]	; 0x434
    51d2:	add	r0, r3
    51d4:	cmp.w	r0, #67108864	; 0x4000000
    51d8:	bcc.n	51e0 <ExFatFile::addDirCluster()+0x24>
  }
  return sync();

 fail:
  return false;
}
    51da:	movs	r0, #0
    51dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    51e0:	mov	r0, r4
    51e2:	bl	4e44 <ExFatFile::addCluster()>
    51e6:	cmp	r0, #0
    51e8:	beq.n	51da <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
    51ea:	ldr	r6, [r4, #32]
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    51ec:	ldrb.w	r3, [r6, #524]	; 0x20c
    51f0:	lsls	r2, r3, #31

  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
    51f2:	add.w	r5, r6, #524	; 0x20c
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    51f6:	bmi.n	529a <ExFatFile::addDirCluster()+0xde>
      return nullptr;
    }
    invalidate();
    51f8:	mov	r0, r5
    return m_cacheBuffer;
    51fa:	add.w	r6, r6, #536	; 0x218
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    51fe:	bl	488c <FsCache::invalidate()>
  if (!cache) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
    5202:	mov.w	r2, #512	; 0x200
    5206:	movs	r1, #0
    5208:	mov	r0, r6
    520a:	bl	bd6c <memset>
  sector = m_vol->clusterStartSector(m_curCluster);
    520e:	ldr	r2, [r4, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    5210:	ldr	r3, [r4, #24]
    5212:	ldrb.w	r0, [r2, #1085]	; 0x43d
    5216:	ldr.w	r1, [r2, #1060]	; 0x424
    521a:	sub.w	r8, r3, #2
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    521e:	movs	r7, #1
    5220:	lsl.w	r8, r8, r0
    5224:	lsls.w	r3, r7, r0
    5228:	add	r8, r1
    522a:	it	ne
    522c:	movne	r5, #0
    522e:	beq.n	5254 <ExFatFile::addDirCluster()+0x98>
    5230:	ldr.w	r0, [r2, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5234:	ldr	r3, [r0, #0]
    5236:	add.w	r1, r8, r5
    523a:	ldr	r3, [r3, #24]
    523c:	mov	r2, r6
    523e:	blx	r3
    5240:	adds	r5, #1
    if (!m_vol->writeSector(sector + i, cache)) {
    5242:	cmp	r0, #0
    5244:	beq.n	51da <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
  sector = m_vol->clusterStartSector(m_curCluster);
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    5246:	ldr	r2, [r4, #32]
    5248:	ldrb.w	r3, [r2, #1085]	; 0x43d
    524c:	lsl.w	r3, r7, r3
    5250:	cmp	r3, r5
    5252:	bhi.n	5230 <ExFatFile::addDirCluster()+0x74>
    if (!m_vol->writeSector(sector + i, cache)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    5254:	ldrb.w	r3, [r4, #49]	; 0x31
    5258:	lsls	r3, r3, #25
    525a:	bmi.n	5288 <ExFatFile::addDirCluster()+0xcc>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    525c:	ldrb.w	r3, [r4, #51]	; 0x33
    5260:	orn	r3, r3, #127	; 0x7f
    5264:	strb.w	r3, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    5268:	ldr.w	r6, [r2, #1076]	; 0x434
    526c:	ldrd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    5270:	ldrd	r0, r1, [r4, #16]
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    5274:	adds	r2, r2, r6
    5276:	mov.w	r7, #0
    527a:	adcs	r3, r7
    m_validLength += m_vol->bytesPerCluster();
    527c:	adds	r0, r0, r6
    527e:	adcs	r1, r7
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    5280:	strd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    5284:	strd	r0, r1, [r4, #16]
  }
  return sync();
    5288:	mov	r0, r4

 fail:
  return false;
}
    528a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    m_validLength += m_vol->bytesPerCluster();
  }
  return sync();
    528e:	b.w	515c <ExFatFile::sync()>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    5292:	ldr	r0, [r0, #32]
    5294:	bl	4d98 <ExFatPartition::rootLength()>
    5298:	b.n	51cc <ExFatFile::addDirCluster()+0x10>
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    529a:	mov	r0, r5
    529c:	bl	4958 <FsCache::sync()>
    52a0:	cmp	r0, #0
    52a2:	bne.n	51f8 <ExFatFile::addDirCluster()+0x3c>
    52a4:	b.n	51da <ExFatFile::addDirCluster()+0x1e>
    52a6:	nop

000052a8 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
  if (!parent->isDir()) {
    52a8:	ldrb.w	r3, [r1, #49]	; 0x31
    52ac:	tst.w	r3, #80	; 0x50
    52b0:	bne.n	52b6 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    52b2:	movs	r0, #0
    52b4:	bx	lr

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    52b6:	push	{r4, r5, lr}
    52b8:	sub	sp, #12
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    52ba:	movw	r5, #2562	; 0xa02
    52be:	ldrb	r3, [r2, #0]
    52c0:	ldr	r2, [r2, #4]
    52c2:	str	r5, [sp, #0]
    52c4:	mov	r4, r0
    52c6:	bl	4348 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    52ca:	cbnz	r0, 52d2 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x2a>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    52cc:	movs	r0, #0
    52ce:	add	sp, #12
    52d0:	pop	{r4, r5, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory

  m_attributes = FILE_ATTR_SUBDIR;
    52d2:	movs	r3, #16
    52d4:	strb.w	r3, [r4, #49]	; 0x31

  // allocate and zero first cluster
  if (!addDirCluster()) {
    52d8:	mov	r0, r4
    52da:	bl	51bc <ExFatFile::addDirCluster()>
    52de:	cmp	r0, #0
    52e0:	beq.n	52cc <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x24>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    52e2:	ldr	r3, [r4, #24]
    52e4:	str	r3, [r4, #28]
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    52e6:	movs	r2, #0
    52e8:	movs	r3, #0
    52ea:	mov	r0, r4
    52ec:	bl	4248 <ExFatFile::seekSet(unsigned long long)>

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    52f0:	movs	r3, #193	; 0xc1
  return sync();
    52f2:	mov	r0, r4
  }
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    52f4:	strb.w	r3, [r4, #51]	; 0x33
  return sync();

fail:
  return false;
}
    52f8:	add	sp, #12
    52fa:	ldmia.w	sp!, {r4, r5, lr}
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();
    52fe:	b.w	515c <ExFatFile::sync()>
    5302:	nop

00005304 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    5304:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5308:	mov	r6, r0
    530a:	sub	sp, #84	; 0x54
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    530c:	ldrb.w	r5, [r6, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    5310:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    5312:	movs	r0, #0
    5314:	strb.w	r0, [sp, #73]	; 0x49
    5318:	strb.w	r0, [sp, #74]	; 0x4a
    531c:	strb.w	r0, [sp, #75]	; 0x4b
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    5320:	cbnz	r5, 5330 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    5322:	mov	r9, r3
    5324:	ldrb.w	r3, [r1, #49]	; 0x31
    5328:	tst.w	r3, #80	; 0x50
    532c:	mov	r4, r1
    532e:	bne.n	5338 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x34>
    close();
  }
  return mkdir(parent, &fname);

fail:
  return false;
    5330:	movs	r0, #0
}
    5332:	add	sp, #84	; 0x54
    5334:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    5338:	ldrb	r3, [r2, #0]
    533a:	cmp	r3, #47	; 0x2f
    533c:	mov	r1, r2
    533e:	beq.n	53ae <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xaa>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    5340:	mov.w	r8, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5344:	add	r3, sp, #12
    5346:	add	r2, sp, #16
    5348:	mov	r0, r6
    534a:	bl	3fb4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    534e:	cmp	r0, #0
    5350:	beq.n	5330 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    5352:	ldr	r3, [sp, #12]
    5354:	ldrb	r3, [r3, #0]
    5356:	cmp	r3, #0
    5358:	beq.n	53ca <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc6>
    535a:	ldrb.w	r3, [sp, #16]
    535e:	ldr	r2, [sp, #20]
    5360:	str.w	r8, [sp]
    5364:	mov	r1, r4
    5366:	mov	r0, r6
    5368:	bl	4348 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    536c:	cbnz	r0, 5382 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x7e>
      if (!pFlag || !mkdir(parent, &fname)) {
    536e:	cmp.w	r9, #0
    5372:	beq.n	5330 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    5374:	mov	r1, r4
    5376:	add	r2, sp, #16
    5378:	mov	r0, r6
    537a:	bl	52a8 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    537e:	cmp	r0, #0
    5380:	beq.n	5330 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    5382:	mov	r4, r6
    5384:	add	r7, sp, #24
    5386:	add.w	lr, r6, #48	; 0x30
    538a:	ldr	r0, [r4, #0]
    538c:	ldr	r1, [r4, #4]
    538e:	ldr	r2, [r4, #8]
    5390:	ldr	r3, [r4, #12]
    5392:	mov	r5, r7
    5394:	stmia	r5!, {r0, r1, r2, r3}
    5396:	adds	r4, #16
    5398:	cmp	r4, lr
    539a:	mov	r7, r5
    539c:	bne.n	538a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x86>
    539e:	ldr	r0, [r4, #0]
    53a0:	str	r0, [r5, #0]
    parent = &tmpDir;
    close();
    53a2:	mov	r0, r6
    53a4:	bl	3ed0 <ExFatFile::close()>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    53a8:	add	r4, sp, #24
    53aa:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    53ac:	b.n	5344 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    53ae:	adds	r1, #1
    53b0:	str	r1, [sp, #12]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    53b2:	ldrb	r3, [r1, #0]
    53b4:	cmp	r3, #47	; 0x2f
    53b6:	beq.n	53ae <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xaa>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    53b8:	ldr	r1, [r4, #32]
    53ba:	add	r0, sp, #24
    53bc:	bl	3f8c <ExFatFile::openRoot(ExFatVolume*)>
    53c0:	cmp	r0, #0
    53c2:	beq.n	5330 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    53c4:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    53c6:	add	r4, sp, #24
    53c8:	b.n	5340 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3c>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    53ca:	add	r2, sp, #16
    53cc:	mov	r1, r4
    53ce:	mov	r0, r6
    53d0:	bl	52a8 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>

fail:
  return false;
}
    53d4:	add	sp, #84	; 0x54
    53d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    53da:	nop

000053dc <ExFatFile::rename(ExFatFile*, char const*)>:
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    53dc:	push	{r4, r5, r6, r7, lr}
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    53de:	ldrb.w	r4, [r0, #49]	; 0x31
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    53e2:	sub	sp, #116	; 0x74
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    53e4:	movs	r3, #0
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    53e6:	tst.w	r4, #24
    53ea:	strb.w	r3, [sp, #49]	; 0x31
    53ee:	strb.w	r3, [sp, #50]	; 0x32
    53f2:	strb.w	r3, [sp, #51]	; 0x33
    53f6:	strb.w	r3, [sp, #105]	; 0x69
    53fa:	strb.w	r3, [sp, #106]	; 0x6a
    53fe:	strb.w	r3, [sp, #107]	; 0x6b
    5402:	beq.n	540c <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    5404:	ldr	r3, [r1, #32]
    5406:	ldr	r4, [r0, #32]
    5408:	cmp	r4, r3
    540a:	beq.n	5412 <ExFatFile::rename(ExFatFile*, char const*)+0x36>
  oldFile.m_flags = FILE_FLAG_WRITE;
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

fail:
  return false;
    540c:	movs	r0, #0
}
    540e:	add	sp, #116	; 0x74
    5410:	pop	{r4, r5, r6, r7, pc}
    5412:	mov	r4, r0
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    5414:	movw	r3, #2561	; 0xa01
    5418:	mov	r0, sp
    541a:	bl	471c <ExFatFile::open(ExFatFile*, char const*, int)>
    541e:	cmp	r0, #0
    5420:	beq.n	540c <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
    5422:	add	r7, sp, #56	; 0x38
    5424:	mov	r5, r4
    5426:	add.w	lr, r4, #48	; 0x30
    542a:	ldr	r0, [r5, #0]
    542c:	ldr	r1, [r5, #4]
    542e:	ldr	r2, [r5, #8]
    5430:	ldr	r3, [r5, #12]
    5432:	mov	r6, r7
    5434:	stmia	r6!, {r0, r1, r2, r3}
    5436:	adds	r5, #16
    5438:	cmp	r5, lr
    543a:	mov	r7, r6
    543c:	bne.n	542a <ExFatFile::rename(ExFatFile*, char const*)+0x4e>
    543e:	ldr	r0, [r5, #0]
    5440:	str	r0, [r6, #0]
  m_dirPos = file.m_dirPos;
    5442:	add	r3, sp, #36	; 0x24
    5444:	ldmia.w	r3, {r0, r1, r2}
    5448:	add.w	r3, r4, #36	; 0x24
    544c:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5450:	ldrb.w	r3, [r4, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
    5454:	ldrb.w	r2, [sp, #48]	; 0x30
    5458:	strb.w	r2, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    545c:	orn	r3, r3, #127	; 0x7f
    5460:	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    5464:	mov	r0, r4
    5466:	bl	515c <ExFatFile::sync()>
    546a:	cmp	r0, #0
    546c:	beq.n	540c <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    546e:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    5470:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    5472:	movs	r3, #8
  return oldFile.remove();
    5474:	add	r0, sp, #56	; 0x38
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    5476:	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    5478:	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    547c:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    5480:	bl	4ed0 <ExFatFile::remove()>
    5484:	b.n	540e <ExFatFile::rename(ExFatFile*, char const*)+0x32>
    5486:	nop

00005488 <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    5488:	ldrb.w	r3, [r0, #51]	; 0x33
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    548c:	lsls	r2, r3, #30
    548e:	bpl.n	54c2 <ExFatFile::truncate()+0x3a>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    5490:	push	{r4, r5, r6, r7, lr}
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    5492:	ldr	r5, [r0, #28]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    5494:	sub	sp, #12
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    5496:	cbz	r5, 54bc <ExFatFile::truncate()+0x34>
      return true;
  }
  if (isContiguous()) {
    5498:	and.w	r3, r3, #64	; 0x40
    549c:	mov	r4, r0
    549e:	and.w	r0, r3, #255	; 0xff
    54a2:	cbnz	r3, 54c6 <ExFatFile::truncate()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
    54a4:	ldr	r1, [r4, #24]
    54a6:	cmp	r1, #0
    54a8:	bne.n	552e <ExFatFile::truncate()+0xa6>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else {
      toFree = m_firstCluster;
    54aa:	str	r5, [sp, #4]
      m_firstCluster = 0;
    54ac:	str	r1, [r4, #28]
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
    54ae:	mov	r1, r5
    54b0:	ldr	r0, [r4, #32]
    54b2:	bl	4ca4 <ExFatPartition::freeChain(unsigned long)>
    54b6:	cbnz	r0, 5506 <ExFatFile::truncate()+0x7e>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    54b8:	movs	r0, #0
    54ba:	b.n	54be <ExFatFile::truncate()+0x36>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    54bc:	movs	r0, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    54be:	add	sp, #12
    54c0:	pop	{r4, r5, r6, r7, pc}
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    54c2:	movs	r0, #0
}
    54c4:	bx	lr
    54c6:	ldr	r0, [r4, #32]
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
    54c8:	ldr	r1, [r4, #24]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    54ca:	ldrb.w	r3, [r0, #1085]	; 0x43d
    54ce:	ldrd	r6, r7, [r4, #8]
    54d2:	adds	r3, #9
    54d4:	uxtb	r3, r3
    54d6:	adds.w	r6, r6, #4294967295
    54da:	rsb	lr, r3, #32
    54de:	adc.w	r7, r7, #4294967295
    54e2:	lsr.w	r2, r6, r3
    54e6:	lsl.w	lr, r7, lr
    54ea:	subs	r3, #32
    54ec:	orr.w	r2, r2, lr
    54f0:	lsr.w	r3, r7, r3
    54f4:	orrs	r2, r3
    54f6:	adds	r2, #1
    if (m_curCluster) {
    54f8:	cbz	r1, 5528 <ExFatFile::truncate()+0xa0>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    54fa:	subs	r5, #1
    54fc:	subs	r5, r5, r1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    54fe:	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    5500:	add	r2, r5
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    5502:	str	r1, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    5504:	cbnz	r2, 554a <ExFatFile::truncate()+0xc2>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    5506:	ldrd	r0, r1, [r4]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    550a:	ldrb.w	r3, [r4, #51]	; 0x33
    550e:	orn	r3, r3, #127	; 0x7f
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    5512:	strd	r0, r1, [r4, #8]
  m_validLength = m_curPosition;
    5516:	strd	r0, r1, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    551a:	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    551e:	mov	r0, r4
    5520:	bl	515c <ExFatFile::sync()>

 fail:
  return false;
}
    5524:	add	sp, #12
    5526:	pop	{r4, r5, r6, r7, pc}
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
    5528:	str	r5, [sp, #4]
      m_firstCluster = 0;
    552a:	str	r1, [r4, #28]
    552c:	b.n	5504 <ExFatFile::truncate()+0x7c>
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    552e:	add	r2, sp, #8
    5530:	str.w	r0, [r2, #-4]!
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    5534:	ldr	r0, [r4, #32]
    5536:	bl	4c6c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    553a:	sxtb	r0, r0
      if (fg < 0) {
    553c:	cmp	r0, #0
    553e:	blt.n	54b8 <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
    5540:	bne.n	5558 <ExFatFile::truncate()+0xd0>
      }
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
    5542:	ldr	r5, [sp, #4]
    5544:	cmp	r5, #0
    5546:	beq.n	5506 <ExFatFile::truncate()+0x7e>
    5548:	b.n	54ae <ExFatFile::truncate()+0x26>
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    554a:	movs	r3, #0
    554c:	ldr	r1, [sp, #4]
    554e:	bl	4afc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    5552:	cmp	r0, #0
    5554:	bne.n	5506 <ExFatFile::truncate()+0x7e>
    5556:	b.n	54b8 <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
        // current cluster is end of chain
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    5558:	mov.w	r2, #4294967295
    555c:	ldr	r1, [r4, #24]
    555e:	ldr	r0, [r4, #32]
    5560:	bl	4c80 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    5564:	cmp	r0, #0
    5566:	bne.n	5542 <ExFatFile::truncate()+0xba>
    5568:	b.n	54b8 <ExFatFile::truncate()+0x30>
    556a:	nop

0000556c <ExFatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    556c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5570:	ldrb.w	r3, [r0, #51]	; 0x33
    5574:	sub	sp, #20

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    5576:	lsls	r4, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    5578:	mov	r6, r0
    557a:	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    557c:	bmi.n	5594 <ExFatFile::write(void const*, unsigned int)+0x28>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    557e:	ldrb.w	r3, [r6, #50]	; 0x32
    5582:	orr.w	r3, r3, #1
    5586:	strb.w	r3, [r6, #50]	; 0x32
  return -1;
    558a:	mov.w	r0, #4294967295
}
    558e:	add	sp, #20
    5590:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    5594:	lsls	r2, r3, #28
    5596:	mov	sl, r1
    5598:	bmi.w	57c0 <ExFatFile::write(void const*, unsigned int)+0x254>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    559c:	ldr	r3, [sp, #4]
    559e:	cmp	r3, #0
    55a0:	beq.w	57e8 <ExFatFile::write(void const*, unsigned int)+0x27c>
    55a4:	mov	r1, r6
    55a6:	ldrd	r2, r3, [r1], #24
    55aa:	ldr.w	r8, [sp, #4]
    55ae:	str	r1, [sp, #12]
    55b0:	mov	fp, r2
    clusterOffset = m_curPosition & m_vol->clusterMask();
    55b2:	ldr	r0, [r6, #32]
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    55b4:	ldr	r5, [r6, #24]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    55b6:	ldr.w	r4, [r0, #1072]	; 0x430
    55ba:	mov	r3, fp
    55bc:	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    55be:	ubfx	r9, r4, #0, #9
    if (clusterOffset == 0) {
    55c2:	cbnz	r4, 5618 <ExFatFile::write(void const*, unsigned int)+0xac>
      // start of new cluster
      if (m_curCluster != 0) {
    55c4:	cmp	r5, #0
    55c6:	beq.w	5746 <ExFatFile::write(void const*, unsigned int)+0x1da>
        int fg;

        if (isContiguous()) {
    55ca:	ldrb.w	r3, [r6, #51]	; 0x33
    55ce:	lsls	r3, r3, #25
    55d0:	bpl.w	578e <ExFatFile::write(void const*, unsigned int)+0x222>
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    55d4:	ldrd	r2, r3, [r6, #8]
    55d8:	ldrb.w	r7, [r0, #1085]	; 0x43d
    55dc:	adds	r7, #9
    55de:	uxtb	r7, r7
    55e0:	adds.w	r2, r2, #4294967295
    55e4:	adc.w	r3, r3, #4294967295
    55e8:	rsb	lr, r7, #32
    55ec:	lsl.w	lr, r3, lr
    55f0:	lsr.w	r1, r2, r7
    55f4:	subs	r7, #32
    55f6:	lsr.w	r7, r3, r7
    55fa:	orr.w	r1, r1, lr
    55fe:	ldr	r3, [r6, #28]
    5600:	orrs	r1, r7
    5602:	add	r3, r1
    5604:	cmp	r5, r3
    5606:	bcc.w	5774 <ExFatFile::write(void const*, unsigned int)+0x208>
            goto fail;
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
    560a:	mov	r0, r6
    560c:	bl	4e44 <ExFatFile::addCluster()>
    5610:	cmp	r0, #0
    5612:	beq.n	557e <ExFatFile::write(void const*, unsigned int)+0x12>
    5614:	ldr	r0, [r6, #32]
    5616:	ldr	r5, [r6, #24]
        }
      }
    }
    // sector for data write
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    5618:	ldr.w	r7, [r0, #1060]	; 0x424
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    561c:	ldrb.w	lr, [r0, #1085]	; 0x43d
    5620:	lsrs	r4, r4, #9
    5622:	subs	r5, #2
    5624:	adds	r1, r4, r7
    5626:	lsl.w	r5, r5, lr
    562a:	add	r1, r5

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    562c:	cmp.w	r9, #0
    5630:	bne.w	5738 <ExFatFile::write(void const*, unsigned int)+0x1cc>
    5634:	cmp.w	r8, #512	; 0x200
    5638:	bcs.n	56ea <ExFatFile::write(void const*, unsigned int)+0x17e>
      // lesser of space and amount to write
      if (n > toWrite) {
        n = toWrite;
      }

      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    563a:	ldrd	r2, r3, [r6, #16]
    563e:	ldrd	r4, r5, [r6]
    5642:	cmp.w	r8, #512	; 0x200
    5646:	mov	r7, r8
    5648:	it	cs
    564a:	movcs.w	r7, #512	; 0x200
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    564e:	cmp	r5, r3
    5650:	it	eq
    5652:	cmpeq	r4, r2
    5654:	ite	cc
    5656:	movcc	r2, #1
    5658:	movcs	r2, #3
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    565a:	add.w	r0, r0, #524	; 0x20c
    565e:	bl	4898 <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    5662:	cmp	r0, #0
    5664:	beq.n	557e <ExFatFile::write(void const*, unsigned int)+0x12>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    5666:	add	r0, r9
    5668:	mov	r2, r7
    566a:	mov	r1, sl
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    566c:	add	r9, r7
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    566e:	bl	8f84 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5672:	cmp.w	r9, #512	; 0x200
    5676:	beq.w	579e <ExFatFile::write(void const*, unsigned int)+0x232>
    567a:	mov	r0, r7
    567c:	movs	r1, #0
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    567e:	ldrd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    5682:	ldrd	r4, r5, [r6, #16]
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5686:	adds.w	fp, r2, r0
    568a:	adc.w	ip, r3, r1
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    568e:	cmp	r5, ip
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5690:	mov	r2, fp
    5692:	mov	r3, ip
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    5694:	it	eq
    5696:	cmpeq	r4, fp
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    5698:	add	sl, r7
    toWrite -= n;
    569a:	rsb	r8, r7, r8
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    569e:	strd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    56a2:	bcs.n	56b8 <ExFatFile::write(void const*, unsigned int)+0x14c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    56a4:	ldrb.w	r1, [r6, #51]	; 0x33
      m_validLength = m_curPosition;
    56a8:	mov	r4, ip
    56aa:	mov	r3, fp
    56ac:	strd	r3, r4, [r6, #16]
    }
    m_curPosition += n;
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
    56b0:	orn	r1, r1, #127	; 0x7f
    56b4:	strb.w	r1, [r6, #51]	; 0x33
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    56b8:	cmp.w	r8, #0
    56bc:	bne.w	55b2 <ExFatFile::write(void const*, unsigned int)+0x46>
    56c0:	mov	r2, fp
    56c2:	mov	r3, ip
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    56c4:	ldrd	r0, r1, [r6, #8]
    56c8:	cmp	r1, r3
    56ca:	it	eq
    56cc:	cmpeq	r0, r2
    56ce:	bcc.n	57d0 <ExFatFile::write(void const*, unsigned int)+0x264>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    56d0:	ldr	r3, [pc, #284]	; (57f0 <ExFatFile::write(void const*, unsigned int)+0x284>)
    56d2:	ldr	r3, [r3, #0]
    56d4:	cmp	r3, #0
    56d6:	beq.w	57e4 <ExFatFile::write(void const*, unsigned int)+0x278>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    56da:	ldrb.w	r3, [r6, #51]	; 0x33
    56de:	ldr	r0, [sp, #4]
    56e0:	orn	r3, r3, #127	; 0x7f
    56e4:	strb.w	r3, [r6, #51]	; 0x33
    56e8:	b.n	558e <ExFatFile::write(void const*, unsigned int)+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    56ea:	cmp.w	r8, #1024	; 0x400
    56ee:	bcc.n	574e <ExFatFile::write(void const*, unsigned int)+0x1e2>
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    56f0:	movs	r3, #1
    56f2:	lsl.w	lr, r3, lr
    56f6:	rsb	lr, r4, lr
    56fa:	ldr.w	r3, [r0, #532]	; 0x214
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    56fe:	mov.w	r4, r8, lsr #9
    5702:	cmp	r4, lr
    5704:	it	cs
    5706:	movcs	r4, lr
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    5708:	cmp	r1, r3
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    570a:	mov.w	r7, r4, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    570e:	bhi.n	5724 <ExFatFile::write(void const*, unsigned int)+0x1b8>
    5710:	adds	r2, r4, r1
    5712:	cmp	r2, r3
    5714:	bls.n	5724 <ExFatFile::write(void const*, unsigned int)+0x1b8>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    5716:	add.w	r0, r0, #524	; 0x20c
    571a:	str	r1, [sp, #8]
    571c:	bl	488c <FsCache::invalidate()>
    5720:	ldr	r0, [r6, #32]
    5722:	ldr	r1, [sp, #8]
    5724:	ldr.w	r0, [r0, #1080]	; 0x438
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t count) {
    return m_blockDev->writeSectors(sector, src, count);
    5728:	ldr	r5, [r0, #0]
    572a:	mov	r3, r4
    572c:	mov	r2, sl
    572e:	ldr	r4, [r5, #28]
    5730:	blx	r4
        // Invalidate cache if cache sector is in the range.
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, ns)) {
    5732:	cmp	r0, #0
    5734:	bne.n	567a <ExFatFile::write(void const*, unsigned int)+0x10e>
    5736:	b.n	557e <ExFatFile::write(void const*, unsigned int)+0x12>
             (clusterOffset >> m_vol->bytesPerSectorShift());

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    5738:	rsb	r7, r9, #512	; 0x200
    573c:	cmp	r7, r8
    573e:	it	cs
    5740:	movcs	r7, r8
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    5742:	movs	r2, #1
    5744:	b.n	565a <ExFatFile::write(void const*, unsigned int)+0xee>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    5746:	ldr	r5, [r6, #28]
    5748:	cbz	r5, 577a <ExFatFile::write(void const*, unsigned int)+0x20e>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    574a:	str	r5, [r6, #24]
    574c:	b.n	5618 <ExFatFile::write(void const*, unsigned int)+0xac>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->dataCacheSector() == sector) {
    574e:	ldr.w	r3, [r0, #532]	; 0x214
    5752:	cmp	r1, r3
    5754:	beq.n	57b0 <ExFatFile::write(void const*, unsigned int)+0x244>
    5756:	ldr.w	r0, [r0, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    575a:	ldr	r3, [r0, #0]
    575c:	mov	r2, sl
    575e:	ldr	r3, [r3, #24]
    5760:	blx	r3
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    5762:	cmp	r0, #0
    5764:	beq.w	557e <ExFatFile::write(void const*, unsigned int)+0x12>
    5768:	mov.w	r0, #512	; 0x200
    576c:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    576e:	mov.w	r7, #512	; 0x200
    5772:	b.n	567e <ExFatFile::write(void const*, unsigned int)+0x112>

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
            m_curCluster++;
    5774:	adds	r5, #1
    5776:	str	r5, [r6, #24]
    5778:	b.n	5618 <ExFatFile::write(void const*, unsigned int)+0xac>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    577a:	mov	r0, r6
    577c:	bl	4e44 <ExFatFile::addCluster()>
    5780:	cmp	r0, #0
    5782:	beq.w	557e <ExFatFile::write(void const*, unsigned int)+0x12>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    5786:	ldr	r5, [r6, #24]
    5788:	str	r5, [r6, #28]
    578a:	ldr	r0, [r6, #32]
    578c:	b.n	5618 <ExFatFile::write(void const*, unsigned int)+0xac>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    578e:	mov	r1, r5
    5790:	ldr	r2, [sp, #12]
    5792:	bl	4c6c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
        if (fg == 0) {
    5796:	cmp	r0, #0
    5798:	bne.w	5614 <ExFatFile::write(void const*, unsigned int)+0xa8>
    579c:	b.n	560a <ExFatFile::write(void const*, unsigned int)+0x9e>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    579e:	ldr	r0, [r6, #32]
    57a0:	add.w	r0, r0, #524	; 0x20c
    57a4:	bl	4958 <FsCache::sync()>
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->dataCacheSync()) {
    57a8:	cmp	r0, #0
    57aa:	bne.w	567a <ExFatFile::write(void const*, unsigned int)+0x10e>
    57ae:	b.n	557e <ExFatFile::write(void const*, unsigned int)+0x12>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    57b0:	add.w	r0, r0, #524	; 0x20c
    57b4:	str	r1, [sp, #8]
    57b6:	bl	488c <FsCache::invalidate()>
    57ba:	ldr	r0, [r6, #32]
    57bc:	ldr	r1, [sp, #8]
    57be:	b.n	5756 <ExFatFile::write(void const*, unsigned int)+0x1ea>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_validLength)) {
    57c0:	ldrd	r2, r3, [r0, #16]
    57c4:	bl	4248 <ExFatFile::seekSet(unsigned long long)>
    57c8:	cmp	r0, #0
    57ca:	beq.w	557e <ExFatFile::write(void const*, unsigned int)+0x12>
    57ce:	b.n	559c <ExFatFile::write(void const*, unsigned int)+0x30>
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    57d0:	ldrb.w	r1, [r6, #51]	; 0x33
    57d4:	ldr	r0, [sp, #4]
    57d6:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    57da:	strd	r2, r3, [r6, #8]
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    57de:	strb.w	r1, [r6, #51]	; 0x33
    57e2:	b.n	558e <ExFatFile::write(void const*, unsigned int)+0x22>
    57e4:	ldr	r0, [sp, #4]
    57e6:	b.n	558e <ExFatFile::write(void const*, unsigned int)+0x22>
    57e8:	ldrd	r2, r3, [r6]
    57ec:	b.n	56c4 <ExFatFile::write(void const*, unsigned int)+0x158>
    57ee:	nop
    57f0:	.word	0x1fff1ea8

000057f4 <FatFile::openRoot(FatVolume*) [clone .part.36]>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    57f4:	push	{r3, r4, r5, lr}
    57f6:	mov	r4, r0
    57f8:	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    57fa:	movs	r2, #36	; 0x24
    57fc:	movs	r1, #0
    57fe:	bl	bd6c <memset>

  m_vol = vol;
    5802:	str	r5, [r4, #8]
  switch (vol->fatType()) {
    5804:	ldrb	r3, [r5, #7]
    5806:	cmp	r3, #16
    5808:	beq.n	581c <FatFile::openRoot(FatVolume*) [clone .part.36]+0x28>
    580a:	cmp	r3, #32
    580c:	bne.n	5818 <FatFile::openRoot(FatVolume*) [clone .part.36]+0x24>
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    580e:	movs	r3, #64	; 0x40
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5810:	movs	r0, #1
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    5812:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5814:	strb	r0, [r4, #2]
    5816:	pop	{r3, r4, r5, pc}
  return true;

fail:
  return false;
    5818:	movs	r0, #0
}
    581a:	pop	{r3, r4, r5, pc}
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    581c:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    581e:	movs	r0, #1
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    5820:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5822:	strb	r0, [r4, #2]
    5824:	pop	{r3, r4, r5, pc}
    5826:	nop

00005828 <FatFile::addCluster()>:
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    5828:	mov	r2, r0
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    582a:	push	{r3, r4, r5, lr}
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    582c:	ldr.w	r5, [r2, #16]!
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    5830:	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    5832:	mov	r1, r5
    5834:	ldr	r0, [r0, #8]
    5836:	bl	666c <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    583a:	cbz	r0, 5852 <FatFile::addCluster()+0x2a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    583c:	cbz	r5, 5854 <FatFile::addCluster()+0x2c>
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    583e:	ldr	r3, [r4, #16]
    5840:	adds	r5, #1
    5842:	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    5844:	ldrb	r3, [r4, #2]
    5846:	it	ne
    5848:	andne.w	r3, r3, #191	; 0xbf
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    584c:	orn	r3, r3, #127	; 0x7f
    5850:	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    5852:	pop	{r3, r4, r5, pc}
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    5854:	ldrb	r3, [r4, #2]
    5856:	orr.w	r3, r3, #64	; 0x40
    585a:	b.n	584c <FatFile::addCluster()+0x24>

0000585c <FatFile::addDirCluster()>:
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    585c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    5860:	ldrb	r3, [r0, #0]
    5862:	and.w	r3, r3, #32
    5866:	cbnz	r3, 5874 <FatFile::addDirCluster()+0x18>
    5868:	and.w	r4, r3, #255	; 0xff
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    586c:	ldr	r1, [r0, #20]
    586e:	ldr	r3, [pc, #124]	; (58ec <FatFile::addDirCluster()+0x90>)
    5870:	cmp	r1, r3
    5872:	bls.n	587c <FatFile::addDirCluster()+0x20>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    5874:	movs	r6, #0
}
    5876:	mov	r0, r6
    5878:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    587c:	mov	r5, r0
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    587e:	bl	5828 <FatFile::addCluster()>
    5882:	mov	r6, r0
    5884:	cmp	r0, #0
    5886:	beq.n	5874 <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    5888:	ldr	r1, [r5, #16]
    588a:	ldr	r0, [r5, #8]
    588c:	bl	6588 <FatPartition::clusterStartSector(unsigned long) const>
    5890:	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    5892:	ldr	r0, [r5, #8]
    5894:	mov	r1, r7
    5896:	adds	r0, #40	; 0x28
    5898:	movs	r2, #5
    589a:	bl	6518 <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    589e:	mov	r8, r0
    58a0:	cmp	r0, #0
    58a2:	beq.n	5874 <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
    58a4:	mov.w	r2, #512	; 0x200
    58a8:	mov	r1, r4
    58aa:	bl	bd6c <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    58ae:	ldr	r3, [r5, #8]
    58b0:	ldrb	r2, [r3, #4]
    58b2:	cmp	r2, #1
    58b4:	bls.n	58d8 <FatFile::addDirCluster()+0x7c>
    58b6:	movs	r4, #1
    58b8:	b.n	58c2 <FatFile::addDirCluster()+0x66>
    58ba:	ldr	r3, [r5, #8]
    58bc:	ldrb	r2, [r3, #4]
    58be:	cmp	r2, r4
    58c0:	bls.n	58d8 <FatFile::addDirCluster()+0x7c>
    58c2:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    58c4:	ldr	r3, [r0, #0]
    58c6:	adds	r1, r4, r7
    58c8:	ldr	r3, [r3, #24]
    58ca:	mov	r2, r8
    58cc:	blx	r3
    58ce:	adds	r4, #1
    58d0:	uxtb	r4, r4
    if (!m_vol->writeSector(sector + i, pc->data)) {
    58d2:	cmp	r0, #0
    58d4:	bne.n	58ba <FatFile::addDirCluster()+0x5e>
    58d6:	b.n	5874 <FatFile::addDirCluster()+0x18>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    58d8:	ldrb	r3, [r3, #6]
    58da:	ldr	r1, [r5, #20]
    58dc:	mov.w	r2, #512	; 0x200
    58e0:	lsl.w	r3, r2, r3
    58e4:	uxtah	r3, r1, r3
    58e8:	str	r3, [r5, #20]
    58ea:	b.n	5876 <FatFile::addDirCluster()+0x1a>
    58ec:	.word	0x001ffdff

000058f0 <FatFile::cacheDirEntry(unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    58f0:	push	{r4, lr}
    58f2:	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    58f4:	ldr	r0, [r0, #8]
    58f6:	mov	r2, r1
    58f8:	adds	r0, #40	; 0x28
    58fa:	ldr	r1, [r4, #24]
    58fc:	bl	6518 <FatCache::read(unsigned long, unsigned char)>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    5900:	cbz	r0, 590c <FatFile::cacheDirEntry(unsigned char)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    5902:	ldrh	r3, [r4, #4]
    5904:	and.w	r3, r3, #15
    5908:	add.w	r0, r0, r3, lsl #5

fail:
  return nullptr;
}
    590c:	pop	{r4, pc}
    590e:	nop

00005910 <FatFile::sync() [clone .part.40]>:
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    5910:	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5912:	ldrsb.w	r3, [r0, #2]
    5916:	cmp	r3, #0
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    5918:	sub	sp, #8
    591a:	mov	r4, r0
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    591c:	blt.n	5952 <FatFile::sync() [clone .part.40]+0x42>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    591e:	ldr	r5, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5920:	add.w	r0, r5, #40	; 0x28
    5924:	bl	6578 <FatCache::sync()>
    5928:	cbnz	r0, 5938 <FatFile::sync() [clone .part.40]+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    592a:	ldrb	r3, [r4, #1]
    592c:	orr.w	r3, r3, #1
    5930:	strb	r3, [r4, #1]
  return false;
    5932:	movs	r0, #0
}
    5934:	add	sp, #8
    5936:	pop	{r4, r5, r6, pc}
    5938:	add.w	r0, r5, #564	; 0x234
    593c:	bl	6578 <FatCache::sync()>
    5940:	cmp	r0, #0
    5942:	beq.n	592a <FatFile::sync() [clone .part.40]+0x1a>
    5944:	ldr	r0, [r5, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    5946:	ldr	r3, [r0, #0]
    5948:	ldr	r3, [r3, #20]
    594a:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    594c:	cmp	r0, #0
    594e:	beq.n	592a <FatFile::sync() [clone .part.40]+0x1a>
    5950:	b.n	5934 <FatFile::sync() [clone .part.40]+0x24>
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    5952:	movs	r1, #1
    5954:	bl	58f0 <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    5958:	mov	r5, r0
    595a:	cmp	r0, #0
    595c:	beq.n	592a <FatFile::sync() [clone .part.40]+0x1a>
    595e:	ldrb	r3, [r0, #0]
    5960:	cmp	r3, #229	; 0xe5
    5962:	beq.n	592a <FatFile::sync() [clone .part.40]+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    5964:	ldrb	r3, [r4, #0]
    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    5966:	ldr	r2, [pc, #56]	; (59a0 <FatFile::sync() [clone .part.40]+0x90>)
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    5968:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    596a:	itt	mi
    596c:	ldrmi	r3, [r4, #28]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    596e:	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    5970:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    5972:	ldr	r6, [r2, #0]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5974:	strh	r3, [r0, #26]
    5976:	lsrs	r3, r3, #16
    5978:	strh	r3, [r0, #20]
    597a:	cbz	r6, 5996 <FatFile::sync() [clone .part.40]+0x86>
      FsDateTime::callback(&date, &time, &ms10);
    597c:	add.w	r2, sp, #3
    5980:	add.w	r1, sp, #6
    5984:	add	r0, sp, #4
    5986:	blx	r6
      setLe16(dir->modifyDate, date);
    5988:	ldrh.w	r3, [sp, #4]
    598c:	ldrh.w	r2, [sp, #6]
    5990:	strh	r3, [r5, #24]
    5992:	strh	r3, [r5, #18]
    5994:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5996:	ldrb	r3, [r4, #2]
    5998:	and.w	r3, r3, #127	; 0x7f
    599c:	strb	r3, [r4, #2]
    599e:	b.n	591e <FatFile::sync() [clone .part.40]+0xe>
    59a0:	.word	0x1fff1ea8

000059a4 <FatFile::close()>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    59a4:	push	{r4, lr}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    59a6:	ldrb	r3, [r0, #0]

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    59a8:	mov	r4, r0
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    59aa:	cbnz	r3, 59b6 <FatFile::close()+0x12>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    59ac:	movs	r3, #0
    59ae:	strb	r3, [r4, #0]
  m_flags = 0;
    59b0:	strb	r3, [r4, #2]
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
    59b2:	movs	r0, #1
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return rtn;
}
    59b4:	pop	{r4, pc}
    59b6:	bl	5910 <FatFile::sync() [clone .part.40]>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    59ba:	movs	r3, #0
    59bc:	strb	r3, [r4, #0]
  m_flags = 0;
    59be:	strb	r3, [r4, #2]
  return rtn;
}
    59c0:	pop	{r4, pc}
    59c2:	nop

000059c4 <FatFile::mkdir(FatFile*, fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    59c4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    59c8:	ldrb	r5, [r1, #0]
    59ca:	tst.w	r5, #112	; 0x70

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    59ce:	sub	sp, #36	; 0x24
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    59d0:	bne.n	59da <FatFile::mkdir(FatFile*, fname_t*)+0x16>
  // write first sector
  return m_vol->cacheSync();

fail:
  return false;
}
    59d2:	movs	r0, #0
    59d4:	add	sp, #36	; 0x24
    59d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    59da:	movw	r3, #2562	; 0xa02
    59de:	mov	r4, r0
    59e0:	mov	r5, r1
    59e2:	bl	6ec4 <FatFile::open(FatFile*, fname_t*, int)>
    59e6:	cmp	r0, #0
    59e8:	beq.n	59d2 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    59ea:	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    59ec:	movs	r3, #16
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    59ee:	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    59f0:	strb	r3, [r4, #0]

  // allocate and zero first cluster
  if (!addDirCluster()) {
    59f2:	mov	r0, r4
    59f4:	bl	585c <FatFile::addDirCluster()>
    59f8:	cmp	r0, #0
    59fa:	beq.n	59d2 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
bool FatFile::seekSet(uint32_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    59fc:	ldrb	r3, [r4, #0]
  // allocate and zero first cluster
  if (!addDirCluster()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    59fe:	ldr	r2, [r4, #16]
    5a00:	str	r2, [r4, #32]
bool FatFile::seekSet(uint32_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    5a02:	cmp	r3, #0
    5a04:	bne.n	5af2 <FatFile::mkdir(FatFile*, fname_t*)+0x12e>
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    5a06:	movs	r1, #1
    5a08:	mov	r0, r4
    5a0a:	bl	58f0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    5a0e:	mov	r6, r0
    5a10:	cmp	r0, #0
    5a12:	beq.n	59d2 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    5a14:	movs	r3, #16
    5a16:	strb	r3, [r0, #11]

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    5a18:	ldr	r2, [r0, #8]
    5a1a:	ldr	r1, [r6, #4]
    5a1c:	ldr	r3, [r6, #12]
    5a1e:	ldr	r0, [r0, #0]
    5a20:	ldrh.w	r8, [r6, #20]
    5a24:	ldrh.w	r9, [r6, #26]
    5a28:	mov	r7, sp
    5a2a:	stmia	r7!, {r0, r1, r2, r3}
    5a2c:	ldr	r1, [r6, #20]
    5a2e:	ldr	r2, [r6, #24]
    5a30:	ldr	r3, [r6, #28]
    5a32:	ldr	r0, [r6, #16]
  dot.name[0] = '.';
    5a34:	add	r6, sp, #32
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    5a36:	stmia	r7!, {r0, r1, r2, r3}
  dot.name[0] = '.';
    5a38:	movs	r3, #46	; 0x2e
    5a3a:	strb.w	r3, [r6, #-32]!
    5a3e:	add.w	r1, sp, #10
    5a42:	mov	r3, r6
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
    5a44:	movs	r2, #32
    5a46:	strb.w	r2, [r3, #1]!
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    5a4a:	cmp	r1, r3
    5a4c:	bne.n	5a46 <FatFile::mkdir(FatFile*, fname_t*)+0x82>
    dot.name[i] = ' ';
  }

  // cache sector for '.'  and '..'
  sector = m_vol->clusterStartSector(m_firstCluster);
    5a4e:	ldr	r1, [r4, #32]
    5a50:	ldr	r0, [r4, #8]
    5a52:	bl	6588 <FatPartition::clusterStartSector(unsigned long) const>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    5a56:	ldr	r3, [r4, #8]
    5a58:	mov	r1, r0
    5a5a:	movs	r2, #1
    5a5c:	add.w	r0, r3, #40	; 0x28
    5a60:	bl	6518 <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
  if (!pc) {
    5a64:	mov	lr, r0
    5a66:	cmp	r0, #0
    5a68:	beq.n	59d2 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    5a6a:	mov	r7, r6
    5a6c:	strh.w	r8, [sp, #20]
    5a70:	strh.w	r9, [sp, #26]
    5a74:	ldmia	r7!, {r0, r1, r2, r3}
    5a76:	str.w	r0, [lr]
    5a7a:	str.w	r1, [lr, #4]
    5a7e:	str.w	r2, [lr, #8]
    5a82:	str.w	r3, [lr, #12]
    5a86:	ldmia	r7!, {r0, r1, r2, r3}
    5a88:	str.w	r0, [lr, #16]
    5a8c:	str.w	r1, [lr, #20]
    5a90:	str.w	r2, [lr, #24]
    5a94:	str.w	r3, [lr, #28]
  // make entry for '..'
  dot.name[1] = '.';
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    5a98:	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    5a9a:	strh.w	r3, [sp, #26]
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
  // make entry for '..'
  dot.name[1] = '.';
    5a9e:	movs	r2, #46	; 0x2e
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    5aa0:	lsrs	r3, r3, #16
    5aa2:	mov	r5, r6
    5aa4:	strh.w	r3, [sp, #20]
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
  // make entry for '..'
  dot.name[1] = '.';
    5aa8:	strb.w	r2, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    5aac:	ldmia	r5!, {r0, r1, r2, r3}
    5aae:	add.w	r6, lr, #32
    5ab2:	str.w	r0, [lr, #32]
    5ab6:	str	r1, [r6, #4]
    5ab8:	str	r2, [r6, #8]
    5aba:	str	r3, [r6, #12]
    5abc:	ldmia	r5!, {r0, r1, r2, r3}
    5abe:	str	r0, [r6, #16]
    5ac0:	str	r1, [r6, #20]
    5ac2:	str	r2, [r6, #24]
    5ac4:	str	r3, [r6, #28]
  // write first sector
  return m_vol->cacheSync();
    5ac6:	ldr	r4, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5ac8:	add.w	r0, r4, #40	; 0x28
    5acc:	bl	6578 <FatCache::sync()>
    5ad0:	cmp	r0, #0
    5ad2:	beq.w	59d2 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    5ad6:	add.w	r0, r4, #564	; 0x234
    5ada:	bl	6578 <FatCache::sync()>
    5ade:	cmp	r0, #0
    5ae0:	beq.w	59d2 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    5ae4:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    5ae6:	ldr	r3, [r0, #0]
    5ae8:	ldr	r3, [r3, #20]

fail:
  return false;
}
    5aea:	add	sp, #36	; 0x24
    5aec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5af0:	bx	r3
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    5af2:	ldr	r3, [r4, #20]
    5af4:	cbz	r3, 5b04 <FatFile::mkdir(FatFile*, fname_t*)+0x140>
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5af6:	ldrb	r3, [r4, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    5af8:	movs	r2, #0
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5afa:	bic.w	r3, r3, #32
    5afe:	strb	r3, [r4, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    5b00:	str	r2, [r4, #16]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    5b02:	str	r2, [r4, #20]
    5b04:	mov	r0, r4
    5b06:	bl	5910 <FatFile::sync() [clone .part.40]>
  }
  m_firstCluster = m_curCluster;
  // Set to start of dir
  rewind();
  // force entry to device
  if (!sync()) {
    5b0a:	cmp	r0, #0
    5b0c:	beq.w	59d2 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    5b10:	b.n	5a06 <FatFile::mkdir(FatFile*, fname_t*)+0x42>
    5b12:	nop

00005b14 <FatFile::mkdir(FatFile*, char const*, bool)>:
void FatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    5b14:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b18:	mov	r6, r0
    5b1a:	sub	sp, #72	; 0x48
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    5b1c:	ldrb	r5, [r6, #0]
void FatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    5b1e:	str	r2, [sp, #4]
    5b20:	movs	r0, #0
    5b22:	strb.w	r0, [sp, #36]	; 0x24
    5b26:	strb.w	r0, [sp, #37]	; 0x25
    5b2a:	strb.w	r0, [sp, #38]	; 0x26
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    5b2e:	cbnz	r5, 5b3c <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    5b30:	mov	r8, r3
    5b32:	ldrb	r3, [r1, #0]
    5b34:	tst.w	r3, #112	; 0x70
    5b38:	mov	r4, r1
    5b3a:	bne.n	5b44 <FatFile::mkdir(FatFile*, char const*, bool)+0x30>
    close();
  }
  return mkdir(parent, &fname);

fail:
  return false;
    5b3c:	movs	r0, #0
}
    5b3e:	add	sp, #72	; 0x48
    5b40:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    5b44:	ldrb	r3, [r2, #0]
    5b46:	cmp	r3, #47	; 0x2f
    5b48:	mov	r0, r2
    5b4a:	beq.n	5ba2 <FatFile::mkdir(FatFile*, char const*, bool)+0x8e>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    5b4c:	movs	r7, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5b4e:	add	r2, sp, #4
    5b50:	add	r1, sp, #12
    5b52:	bl	6a98 <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    5b56:	add	r2, sp, #12
    5b58:	mov	r1, r4
    5b5a:	movs	r3, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5b5c:	cmp	r0, #0
    5b5e:	beq.n	5b3c <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    5b60:	ldr	r5, [sp, #4]
    5b62:	ldrb	r5, [r5, #0]
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    5b64:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    5b66:	cmp	r5, #0
    5b68:	beq.n	5bc6 <FatFile::mkdir(FatFile*, char const*, bool)+0xb2>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    5b6a:	bl	6ec4 <FatFile::open(FatFile*, fname_t*, int)>
    5b6e:	cbnz	r0, 5b84 <FatFile::mkdir(FatFile*, char const*, bool)+0x70>
      if (!pFlag || !mkdir(parent, &fname)) {
    5b70:	cmp.w	r8, #0
    5b74:	beq.n	5b3c <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    5b76:	mov	r1, r4
    5b78:	add	r2, sp, #12
    5b7a:	mov	r0, r6
    5b7c:	bl	59c4 <FatFile::mkdir(FatFile*, fname_t*)>
    5b80:	cmp	r0, #0
    5b82:	beq.n	5b3c <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    5b84:	mov	r5, r6
    5b86:	ldmia	r5!, {r0, r1, r2, r3}
    5b88:	add	r4, sp, #36	; 0x24
    5b8a:	stmia	r4!, {r0, r1, r2, r3}
    5b8c:	ldmia	r5!, {r0, r1, r2, r3}
    5b8e:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5b90:	ldrb	r3, [r6, #0]
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    5b92:	ldr	r2, [r5, #0]
    5b94:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5b96:	cbnz	r3, 5bbe <FatFile::mkdir(FatFile*, char const*, bool)+0xaa>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5b98:	strb	r7, [r6, #0]
  m_flags = 0;
    5b9a:	strb	r7, [r6, #2]
    5b9c:	ldr	r0, [sp, #4]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    5b9e:	add	r4, sp, #36	; 0x24
    5ba0:	b.n	5b4e <FatFile::mkdir(FatFile*, char const*, bool)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    5ba2:	adds	r0, #1
    5ba4:	str	r0, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    5ba6:	ldrb	r3, [r0, #0]
    5ba8:	cmp	r3, #47	; 0x2f
    5baa:	beq.n	5ba2 <FatFile::mkdir(FatFile*, char const*, bool)+0x8e>
    5bac:	ldr	r1, [r4, #8]
    5bae:	add	r0, sp, #36	; 0x24
    5bb0:	bl	57f4 <FatFile::openRoot(FatVolume*) [clone .part.36]>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    5bb4:	cmp	r0, #0
    5bb6:	beq.n	5b3c <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    5bb8:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    5bba:	add	r4, sp, #36	; 0x24
    5bbc:	b.n	5b4c <FatFile::mkdir(FatFile*, char const*, bool)+0x38>
    5bbe:	mov	r0, r6
    5bc0:	bl	5910 <FatFile::sync() [clone .part.40]>
    5bc4:	b.n	5b98 <FatFile::mkdir(FatFile*, char const*, bool)+0x84>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    5bc6:	add	r2, sp, #12
    5bc8:	mov	r1, r4
    5bca:	mov	r0, r6
    5bcc:	bl	59c4 <FatFile::mkdir(FatFile*, fname_t*)>

fail:
  return false;
}
    5bd0:	add	sp, #72	; 0x48
    5bd2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5bd6:	nop

00005bd8 <FatFile::open(FatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    5bd8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5bdc:	mov	r6, r0
    5bde:	sub	sp, #72	; 0x48
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    5be0:	ldrb	r5, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    5be2:	str	r2, [sp, #4]
    5be4:	movs	r0, #0
    5be6:	strb.w	r0, [sp, #36]	; 0x24
    5bea:	strb.w	r0, [sp, #37]	; 0x25
    5bee:	strb.w	r0, [sp, #38]	; 0x26
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    5bf2:	cbnz	r5, 5c00 <FatFile::open(FatFile*, char const*, int)+0x28>
    5bf4:	mov	r8, r3
    5bf6:	ldrb	r3, [r1, #0]
    5bf8:	tst.w	r3, #112	; 0x70
    5bfc:	mov	r4, r1
    5bfe:	bne.n	5c08 <FatFile::open(FatFile*, char const*, int)+0x30>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    5c00:	movs	r0, #0
}
    5c02:	add	sp, #72	; 0x48
    5c04:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    5c08:	ldrb	r3, [r2, #0]
    5c0a:	cmp	r3, #47	; 0x2f
    5c0c:	mov	r0, r2
    5c0e:	beq.n	5c5c <FatFile::open(FatFile*, char const*, int)+0x84>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5c10:	movs	r7, #0
    5c12:	b.n	5c1c <FatFile::open(FatFile*, char const*, int)+0x44>
    5c14:	ldr	r0, [sp, #4]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5c16:	strb	r7, [r6, #0]
  m_flags = 0;
    5c18:	strb	r7, [r6, #2]
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    5c1a:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5c1c:	add	r2, sp, #4
    5c1e:	add	r1, sp, #12
    5c20:	bl	6a98 <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5c24:	add	r2, sp, #12
    5c26:	mov	r1, r4
    5c28:	movs	r3, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5c2a:	cmp	r0, #0
    5c2c:	beq.n	5c00 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    5c2e:	ldr	r5, [sp, #4]
    5c30:	ldrb	r5, [r5, #0]
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5c32:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    5c34:	cbz	r5, 5c7a <FatFile::open(FatFile*, char const*, int)+0xa2>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5c36:	bl	6ec4 <FatFile::open(FatFile*, fname_t*, int)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5c3a:	mov	r5, r6
    5c3c:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5c3e:	cmp	r0, #0
    5c40:	beq.n	5c00 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5c42:	ldmia	r5!, {r0, r1, r2, r3}
    5c44:	stmia	r4!, {r0, r1, r2, r3}
    5c46:	ldmia	r5!, {r0, r1, r2, r3}
    5c48:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5c4a:	ldrb	r3, [r6, #0]
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5c4c:	ldr	r2, [r5, #0]
    5c4e:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5c50:	cmp	r3, #0
    5c52:	beq.n	5c14 <FatFile::open(FatFile*, char const*, int)+0x3c>
    5c54:	mov	r0, r6
    5c56:	bl	5910 <FatFile::sync() [clone .part.40]>
    5c5a:	b.n	5c14 <FatFile::open(FatFile*, char const*, int)+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    5c5c:	adds	r0, #1
    5c5e:	str	r0, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    5c60:	ldrb	r3, [r0, #0]
    5c62:	cmp	r3, #47	; 0x2f
    5c64:	beq.n	5c5c <FatFile::open(FatFile*, char const*, int)+0x84>
      path++;
    }
    if (*path == 0) {
    5c66:	cbz	r3, 5c8c <FatFile::open(FatFile*, char const*, int)+0xb4>
    5c68:	ldr	r1, [r4, #8]
    5c6a:	add	r0, sp, #36	; 0x24
    5c6c:	bl	57f4 <FatFile::openRoot(FatVolume*) [clone .part.36]>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    5c70:	cmp	r0, #0
    5c72:	beq.n	5c00 <FatFile::open(FatFile*, char const*, int)+0x28>
    5c74:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    5c76:	add	r4, sp, #36	; 0x24
    5c78:	b.n	5c10 <FatFile::open(FatFile*, char const*, int)+0x38>
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return open(dirFile, &fname, oflag);
    5c7a:	mov	r3, r8
    5c7c:	add	r2, sp, #12
    5c7e:	mov	r1, r4
    5c80:	mov	r0, r6
    5c82:	bl	6ec4 <FatFile::open(FatFile*, fname_t*, int)>

fail:
  return false;
}
    5c86:	add	sp, #72	; 0x48
    5c88:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5c8c:	ldr	r1, [r4, #8]
    5c8e:	mov	r0, r6
    5c90:	bl	57f4 <FatFile::openRoot(FatVolume*) [clone .part.36]>
    5c94:	b.n	5c02 <FatFile::open(FatFile*, char const*, int)+0x2a>
    5c96:	nop

00005c98 <FatFile::open(FatVolume*, char const*, int)>:
bool FatFile::open(const char* path, oflag_t oflag) {
  return open(FatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    5c98:	cbz	r1, 5ca2 <FatFile::open(FatVolume*, char const*, int)+0xa>
    5c9a:	add.w	r1, r1, #1088	; 0x440
    5c9e:	b.w	5bd8 <FatFile::open(FatFile*, char const*, int)>
}
    5ca2:	mov	r0, r1
    5ca4:	bx	lr
    5ca6:	nop

00005ca8 <FatFile::openRoot(FatVolume*)>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    5ca8:	ldrb	r3, [r0, #0]
    5caa:	cbz	r3, 5cb0 <FatFile::openRoot(FatVolume*)+0x8>
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
}
    5cac:	movs	r0, #0
    5cae:	bx	lr
    5cb0:	b.w	57f4 <FatFile::openRoot(FatVolume*) [clone .part.36]>

00005cb4 <FatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    5cb4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    5cb8:	ldrb	r3, [r0, #2]
    5cba:	lsls	r7, r3, #31
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    5cbc:	sub	sp, #12
    5cbe:	mov	r5, r0
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    5cc0:	bpl.w	5de2 <FatFile::read(void*, unsigned int)+0x12e>
    5cc4:	mov	r7, r1
    5cc6:	ldrb	r1, [r0, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    5cc8:	lsls	r6, r1, #28
    5cca:	mov	r9, r2
    5ccc:	bmi.w	5df4 <FatFile::read(void*, unsigned int)+0x140>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
    5cd0:	lsls	r4, r1, #26
    5cd2:	bpl.n	5ce6 <FatFile::read(void*, unsigned int)+0x32>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    5cd4:	ldr	r2, [r0, #8]
    if (nbyte > tmp16) {
    5cd6:	ldr	r3, [r0, #20]
    5cd8:	ldrh	r2, [r2, #8]
    5cda:	rsb	r3, r3, r2, lsl #5
    5cde:	uxth	r3, r3
    5ce0:	cmp	r9, r3
    5ce2:	it	cs
    5ce4:	movcs	r9, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5ce6:	cmp.w	r9, #0
    5cea:	beq.w	5e40 <FatFile::read(void*, unsigned int)+0x18c>
    5cee:	ldr	r3, [r5, #20]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5cf0:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    5cf2:	lsls	r0, r1, #26
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5cf4:	mov	r6, r9
    5cf6:	mov.w	r8, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5cfa:	add.w	sl, r5, #16
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5cfe:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    5d02:	bpl.n	5d82 <FatFile::read(void*, unsigned int)+0xce>
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    5d04:	ldr	r1, [r2, #32]
    5d06:	add.w	r1, r1, r3, lsr #9
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    5d0a:	cmp.w	fp, #0
    5d0e:	bne.n	5db6 <FatFile::read(void*, unsigned int)+0x102>
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    5d10:	cmp.w	r6, #512	; 0x200
    5d14:	bcc.n	5db6 <FatFile::read(void*, unsigned int)+0x102>
    5d16:	ldr	r3, [r2, #48]	; 0x30
        || sector == m_vol->cacheSectorNumber()) {
    5d18:	cmp	r1, r3
    5d1a:	beq.n	5db6 <FatFile::read(void*, unsigned int)+0x102>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    5d1c:	cmp.w	r6, #1024	; 0x400
    5d20:	bcc.n	5e06 <FatFile::read(void*, unsigned int)+0x152>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isRootFixed()) {
    5d22:	ldrb	r0, [r5, #0]
    5d24:	lsls	r0, r0, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    5d26:	mov.w	fp, r6, lsr #9
      if (!isRootFixed()) {
    5d2a:	bmi.n	5d38 <FatFile::read(void*, unsigned int)+0x84>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    5d2c:	ldrb	r0, [r2, #4]
    5d2e:	rsb	r0, r8, r0
    5d32:	cmp	fp, r0
    5d34:	it	cs
    5d36:	movcs	fp, r0
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    5d38:	cmp	r1, r3
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    5d3a:	mov.w	r4, fp, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    5d3e:	bhi.n	5d58 <FatFile::read(void*, unsigned int)+0xa4>
    5d40:	add	r3, fp
    5d42:	cmp	r1, r3
    5d44:	bcs.n	5d58 <FatFile::read(void*, unsigned int)+0xa4>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    5d46:	add.w	r0, r2, #40	; 0x28
    5d4a:	str	r1, [sp, #4]
    5d4c:	bl	6578 <FatCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->cacheSyncData()) {
    5d50:	cmp	r0, #0
    5d52:	beq.n	5de2 <FatFile::read(void*, unsigned int)+0x12e>
    5d54:	ldr	r2, [r5, #8]
    5d56:	ldr	r1, [sp, #4]
    5d58:	ldr	r0, [r2, #0]
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
    5d5a:	ldr	r2, [r0, #0]
    5d5c:	mov	r3, fp
    5d5e:	ldr.w	fp, [r2, #12]
    5d62:	mov	r2, r7
    5d64:	blx	fp
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    5d66:	cmp	r0, #0
    5d68:	beq.n	5de2 <FatFile::read(void*, unsigned int)+0x12e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    5d6a:	ldr	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5d6c:	subs	r6, r6, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    5d6e:	add	r3, r4
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    5d70:	add	r7, r4
    m_curPosition += n;
    5d72:	str	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5d74:	beq.n	5e40 <FatFile::read(void*, unsigned int)+0x18c>
    5d76:	ldrb	r1, [r5, #0]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5d78:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    5d7a:	lsls	r0, r1, #26
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5d7c:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    5d80:	bmi.n	5d04 <FatFile::read(void*, unsigned int)+0x50>
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    5d82:	ldrb.w	r8, [r2, #5]
    5d86:	and.w	r8, r8, r3, lsr #9
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    } else {
      sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
      if (offset == 0 && sectorOfCluster == 0) {
    5d8a:	cmp.w	fp, #0
    5d8e:	bne.n	5e02 <FatFile::read(void*, unsigned int)+0x14e>
    5d90:	cmp.w	r8, #0
    5d94:	bne.n	5e02 <FatFile::read(void*, unsigned int)+0x14e>
        // start of new cluster
        if (m_curPosition == 0) {
    5d96:	cmp	r3, #0
    5d98:	bne.n	5e1a <FatFile::read(void*, unsigned int)+0x166>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    5d9a:	lsls	r1, r1, #25
    5d9c:	ite	mi
    5d9e:	ldrmi	r1, [r2, #32]
    5da0:	ldrpl	r1, [r5, #32]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
    5da2:	str	r1, [r5, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    5da4:	mov	r0, r2
    5da6:	bl	6588 <FatPartition::clusterStartSector(unsigned long) const>
    5daa:	ldr	r2, [r5, #8]
    5dac:	add.w	r1, r8, r0
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    5db0:	cmp.w	fp, #0
    5db4:	beq.n	5d10 <FatFile::read(void*, unsigned int)+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    5db6:	add.w	r0, r2, #40	; 0x28
    5dba:	movs	r2, #0
    5dbc:	bl	6518 <FatCache::read(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
      if (!pc) {
    5dc0:	cbz	r0, 5de2 <FatFile::read(void*, unsigned int)+0x12e>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
      // amount to be read from current sector
      n = m_vol->bytesPerSector() - offset;
    5dc2:	rsb	r4, fp, #512	; 0x200
    5dc6:	cmp	r4, r6
    5dc8:	it	cs
    5dca:	movcs	r4, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    5dcc:	add.w	r1, r0, fp
    5dd0:	mov	r2, r4
    5dd2:	mov	r0, r7
    5dd4:	bl	8f84 <memcpy>
    5dd8:	b.n	5d6a <FatFile::read(void*, unsigned int)+0xb6>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
            if (isDir()) {
    5dda:	ldrb	r3, [r5, #0]
    5ddc:	tst.w	r3, #112	; 0x70
    5de0:	bne.n	5e42 <FatFile::read(void*, unsigned int)+0x18e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    5de2:	ldrb	r3, [r5, #1]
  return -1;
    5de4:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    5de8:	orr.w	r3, r3, #2
    5dec:	strb	r3, [r5, #1]
  return -1;
}
    5dee:	add	sp, #12
    5df0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    uint32_t tmp32 = m_fileSize - m_curPosition;
    5df4:	ldr	r3, [r0, #28]
    5df6:	ldr	r2, [r0, #20]
    5df8:	subs	r3, r3, r2
    5dfa:	cmp	r9, r3
    5dfc:	it	cs
    5dfe:	movcs	r9, r3
    5e00:	b.n	5ce6 <FatFile::read(void*, unsigned int)+0x32>
    5e02:	ldr	r1, [r5, #16]
    5e04:	b.n	5da4 <FatFile::read(void*, unsigned int)+0xf0>
    5e06:	ldr	r0, [r2, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    5e08:	ldr	r3, [r0, #0]
    5e0a:	mov	r2, r7
    5e0c:	ldr	r3, [r3, #8]
    5e0e:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    5e10:	cmp	r0, #0
    5e12:	beq.n	5de2 <FatFile::read(void*, unsigned int)+0x12e>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    5e14:	mov.w	r4, #512	; 0x200
    5e18:	b.n	5d6a <FatFile::read(void*, unsigned int)+0xb6>
        // start of new cluster
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
    5e1a:	lsls	r3, r1, #28
    5e1c:	bpl.n	5e2a <FatFile::read(void*, unsigned int)+0x176>
    5e1e:	ldrb	r3, [r5, #2]
    5e20:	lsls	r4, r3, #25
    5e22:	bpl.n	5e2a <FatFile::read(void*, unsigned int)+0x176>
          m_curCluster++;
    5e24:	ldr	r1, [r5, #16]
    5e26:	adds	r1, #1
    5e28:	b.n	5da2 <FatFile::read(void*, unsigned int)+0xee>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5e2a:	mov	r0, r2
    5e2c:	ldr	r1, [r5, #16]
    5e2e:	mov	r2, sl
    5e30:	bl	6594 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    5e34:	cmp	r0, #0
    5e36:	blt.n	5de2 <FatFile::read(void*, unsigned int)+0x12e>
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
    5e38:	beq.n	5dda <FatFile::read(void*, unsigned int)+0x126>
    5e3a:	ldr	r2, [r5, #8]
    5e3c:	ldr	r1, [r5, #16]
    5e3e:	b.n	5da4 <FatFile::read(void*, unsigned int)+0xf0>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    5e40:	movs	r6, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    5e42:	rsb	r0, r6, r9

fail:
  m_error |= READ_ERROR;
  return -1;
}
    5e46:	add	sp, #12
    5e48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00005e4c <FatFile::peek()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
    5e4c:	push	{r4, r5, r6, lr}
    5e4e:	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    5e50:	movs	r2, #1
    5e52:	add.w	r1, sp, #7
    5e56:	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    5e58:	ldr	r6, [r0, #20]
  uint32_t curCluster = m_curCluster;
    5e5a:	ldr	r5, [r0, #16]
    5e5c:	bl	5cb4 <FatFile::read(void*, unsigned int)>
    5e60:	cmp	r0, #1
    5e62:	it	eq
    5e64:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
    5e68:	str	r6, [r4, #20]
    5e6a:	it	ne
    5e6c:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    5e70:	str	r5, [r4, #16]
  return c;
}
    5e72:	add	sp, #8
    5e74:	pop	{r4, r5, r6, pc}
    5e76:	nop

00005e78 <FatFile::readDirCache(bool)>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    5e78:	push	{r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
    5e7a:	ldr	r3, [r0, #20]
    5e7c:	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    5e80:	sub	sp, #12
    5e82:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    5e84:	cbz	r5, 5e88 <FatFile::readDirCache(bool)+0x10>
    5e86:	cbnz	r1, 5eac <FatFile::readDirCache(bool)+0x34>
    int8_t n = read(&n, 1);
    5e88:	movs	r2, #1
    5e8a:	add.w	r1, sp, #7
    5e8e:	mov	r0, r4
    5e90:	bl	5cb4 <FatFile::read(void*, unsigned int)>
    5e94:	sxtb	r0, r0
    if  (n != 1) {
    5e96:	cmp	r0, #1
    5e98:	bne.n	5eb2 <FatFile::readDirCache(bool)+0x3a>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
    5e9a:	ldr	r3, [r4, #20]
    5e9c:	adds	r3, #31
    5e9e:	str	r3, [r4, #20]
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  /** \return Cache sector address. */
  cache_t* buffer() {
    return &m_buffer;
    5ea0:	ldr	r0, [r4, #8]
    5ea2:	adds	r0, #52	; 0x34
  } else {
    m_curPosition += 32;
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    5ea4:	add.w	r0, r0, r5, lsl #5

fail:
  return nullptr;
}
    5ea8:	add	sp, #12
    5eaa:	pop	{r4, r5, pc}
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
    5eac:	adds	r3, #32
    5eae:	str	r3, [r0, #20]
    5eb0:	b.n	5ea0 <FatFile::readDirCache(bool)+0x28>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

fail:
  return nullptr;
    5eb2:	movs	r0, #0
}
    5eb4:	add	sp, #12
    5eb6:	pop	{r4, r5, pc}

00005eb8 <FatFile::rename(FatFile*, char const*)>:
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    5eb8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    5ebc:	ldrb	r5, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    5ebe:	sub	sp, #104	; 0x68
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    5ec0:	movs	r4, #0
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    5ec2:	tst.w	r5, #24
    5ec6:	strb.w	r4, [sp, #32]
    5eca:	strb.w	r4, [sp, #33]	; 0x21
    5ece:	strb.w	r4, [sp, #34]	; 0x22
    5ed2:	strb.w	r4, [sp, #68]	; 0x44
    5ed6:	strb.w	r4, [sp, #69]	; 0x45
    5eda:	strb.w	r4, [sp, #70]	; 0x46
    5ede:	beq.n	5eea <FatFile::rename(FatFile*, char const*)+0x32>
  if (!USE_LONG_FILE_NAMES && isLFN()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    5ee0:	ldr	r6, [r0, #8]
    5ee2:	ldr	r5, [r1, #8]
    5ee4:	cmp	r6, r5
    5ee6:	mov	r3, r0
    5ee8:	beq.n	5ef2 <FatFile::rename(FatFile*, char const*)+0x3a>
    goto fail;
  }
  return m_vol->cacheSync();

fail:
  return false;
    5eea:	movs	r0, #0
}
    5eec:	add	sp, #104	; 0x68
    5eee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5ef2:	mov	r5, r3
    5ef4:	mov	r8, r2
    5ef6:	mov	r6, r1
    5ef8:	bl	5910 <FatFile::sync() [clone .part.40]>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // sync() and cache directory entry
  sync();
  oldFile = *this;
    5efc:	mov	lr, r5
    5efe:	ldmia.w	lr!, {r0, r1, r2, r3}
    5f02:	add	r7, sp, #68	; 0x44
    5f04:	stmia	r7!, {r0, r1, r2, r3}
    5f06:	ldmia.w	lr!, {r0, r1, r2, r3}
    5f0a:	stmia	r7!, {r0, r1, r2, r3}
    5f0c:	ldr.w	r3, [lr]
    5f10:	str	r3, [r7, #0]
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
    5f12:	mov	r1, r4
    5f14:	mov	r0, r5
    5f16:	bl	58f0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    5f1a:	mov	lr, r0
    5f1c:	cmp	r0, #0
    5f1e:	beq.n	5eea <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    5f20:	ldr.w	r1, [lr, #4]
    5f24:	ldr.w	r2, [lr, #8]
    5f28:	ldr.w	r3, [lr, #12]
    5f2c:	ldr	r0, [r0, #0]
  // make directory entry for new path
  if (isFile()) {
    5f2e:	ldrb.w	ip, [r5]
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    5f32:	mov	r7, sp
    5f34:	stmia	r7!, {r0, r1, r2, r3}
    5f36:	ldr.w	r1, [lr, #20]
    5f3a:	ldr.w	r2, [lr, #24]
    5f3e:	ldr.w	r3, [lr, #28]
    5f42:	ldr.w	r0, [lr, #16]
  // make directory entry for new path
  if (isFile()) {
    5f46:	and.w	lr, ip, #8
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    5f4a:	stmia	r7!, {r0, r1, r2, r3}
  // make directory entry for new path
  if (isFile()) {
    5f4c:	and.w	r3, lr, #255	; 0xff
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    5f50:	mov	r2, r8
    5f52:	mov	r1, r6
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
  // make directory entry for new path
  if (isFile()) {
    5f54:	cmp.w	lr, #0
    5f58:	beq.w	607e <FatFile::rename(FatFile*, char const*)+0x1c6>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    5f5c:	movw	r3, #2561	; 0xa01
    5f60:	add	r0, sp, #32
    5f62:	bl	5bd8 <FatFile::open(FatFile*, char const*, int)>
    5f66:	cmp	r0, #0
    5f68:	beq.n	5eea <FatFile::rename(FatFile*, char const*)+0x32>
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    5f6a:	ldr	r0, [sp, #56]	; 0x38
  m_dirIndex = file.m_dirIndex;
    5f6c:	ldrh.w	r1, [sp, #36]	; 0x24
  m_lfnOrd = file.m_lfnOrd;
    5f70:	ldrb.w	r2, [sp, #35]	; 0x23
  m_dirCluster = file.m_dirCluster;
    5f74:	ldr	r3, [sp, #44]	; 0x2c
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    5f76:	str	r0, [r5, #24]
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    5f78:	movs	r6, #0
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
    5f7a:	strh	r1, [r5, #4]
  m_lfnOrd = file.m_lfnOrd;
    5f7c:	strb	r2, [r5, #3]
  m_dirCluster = file.m_dirCluster;
    5f7e:	str	r3, [r5, #12]
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    5f80:	movs	r1, #1
    5f82:	mov	r0, r5
  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    5f84:	strb.w	r6, [sp, #32]
  file.m_flags = 0;
    5f88:	strb.w	r6, [sp, #34]	; 0x22

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    5f8c:	bl	58f0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    5f90:	cmp	r0, #0
    5f92:	beq.n	5eea <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    5f94:	add	r3, sp, #104	; 0x68
  dir->attributes = entry.attributes;
    5f96:	ldrb.w	r2, [sp, #11]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    5f9a:	ldr.w	r7, [r3, #-91]!
    5f9e:	str.w	r7, [r0, #13]
    5fa2:	ldr	r7, [r3, #4]
    5fa4:	str.w	r7, [r0, #17]
    5fa8:	ldr	r7, [r3, #8]
    5faa:	str.w	r7, [r0, #21]
    5fae:	ldr	r7, [r3, #12]
    5fb0:	str.w	r7, [r0, #25]
    5fb4:	ldrh	r7, [r3, #16]
    5fb6:	ldrb	r3, [r3, #18]
    5fb8:	strh.w	r7, [r0, #29]
    5fbc:	strb	r3, [r0, #31]
  dir->attributes = entry.attributes;
    5fbe:	strb	r2, [r0, #11]

  // update dot dot if directory
  if (dirCluster) {
    5fc0:	cmp	r4, #0
    5fc2:	beq.n	603a <FatFile::rename(FatFile*, char const*)+0x182>
    // get new dot dot
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    5fc4:	mov	r1, r4
    5fc6:	ldr	r0, [r5, #8]
    5fc8:	bl	6588 <FatPartition::clusterStartSector(unsigned long) const>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    5fcc:	ldr	r3, [r5, #8]
    5fce:	mov	r1, r0
    5fd0:	mov	r2, r6
    5fd2:	add.w	r0, r3, #40	; 0x28
    5fd6:	bl	6518 <FatCache::read(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    5fda:	cmp	r0, #0
    5fdc:	beq.n	5eea <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&entry, &pc->dir[1], sizeof(entry));
    5fde:	mov	r6, r0
    5fe0:	mov	r7, sp
    5fe2:	ldr.w	r0, [r6, #32]!
    5fe6:	ldr	r1, [r6, #4]
    5fe8:	ldr	r2, [r6, #8]
    5fea:	ldr	r3, [r6, #12]
    5fec:	stmia	r7!, {r0, r1, r2, r3}
    5fee:	ldr	r0, [r6, #16]
    5ff0:	ldr	r1, [r6, #20]
    5ff2:	ldr	r2, [r6, #24]
    5ff4:	ldr	r3, [r6, #28]
    5ff6:	stmia	r7!, {r0, r1, r2, r3}

    // free unused cluster
    if (!m_vol->freeChain(dirCluster)) {
    5ff8:	mov	r1, r4
    5ffa:	ldr	r0, [r5, #8]
    5ffc:	bl	66f8 <FatPartition::freeChain(unsigned long)>
    6000:	cmp	r0, #0
    6002:	beq.w	5eea <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // store new dot dot
    sector = m_vol->clusterStartSector(m_firstCluster);
    6006:	ldr	r1, [r5, #32]
    6008:	ldr	r0, [r5, #8]
    600a:	bl	6588 <FatPartition::clusterStartSector(unsigned long) const>
    600e:	ldr	r3, [r5, #8]
    6010:	mov	r1, r0
    6012:	movs	r2, #1
    6014:	add.w	r0, r3, #40	; 0x28
    6018:	bl	6518 <FatCache::read(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    601c:	mov	r7, r0
    601e:	cmp	r0, #0
    6020:	beq.w	5eea <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
    6024:	mov	r4, sp
    6026:	ldmia	r4!, {r0, r1, r2, r3}
    6028:	str	r0, [r7, #32]
    602a:	str	r1, [r7, #36]	; 0x24
    602c:	str	r2, [r7, #40]	; 0x28
    602e:	str	r3, [r7, #44]	; 0x2c
    6030:	ldmia	r4!, {r0, r1, r2, r3}
    6032:	str	r0, [r7, #48]	; 0x30
    6034:	str	r1, [r7, #52]	; 0x34
    6036:	str	r2, [r7, #56]	; 0x38
    6038:	str	r3, [r7, #60]	; 0x3c
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    603a:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    603c:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    603e:	movs	r3, #8
  if (!oldFile.remove()) {
    6040:	add	r0, sp, #68	; 0x44
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    6042:	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    6044:	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    6048:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    604c:	bl	6ce4 <FatFile::remove()>
    6050:	cmp	r0, #0
    6052:	beq.w	5eea <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return m_vol->cacheSync();
    6056:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    6058:	add.w	r0, r4, #40	; 0x28
    605c:	bl	6578 <FatCache::sync()>
    6060:	cmp	r0, #0
    6062:	beq.w	5eea <FatFile::rename(FatFile*, char const*)+0x32>
    6066:	add.w	r0, r4, #564	; 0x234
    606a:	bl	6578 <FatCache::sync()>
    606e:	cmp	r0, #0
    6070:	beq.w	5eea <FatFile::rename(FatFile*, char const*)+0x32>
    6074:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    6076:	ldr	r3, [r0, #0]
    6078:	ldr	r3, [r3, #20]
    607a:	blx	r3
    607c:	b.n	5eec <FatFile::rename(FatFile*, char const*)+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // don't create missing path prefix components
    if (!file.mkdir(dirFile, newPath, false)) {
    607e:	add	r0, sp, #32
    6080:	bl	5b14 <FatFile::mkdir(FatFile*, char const*, bool)>
    6084:	cmp	r0, #0
    6086:	beq.w	5eea <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
    608a:	ldr	r4, [sp, #64]	; 0x40
    608c:	b.n	5f6a <FatFile::rename(FatFile*, char const*)+0xb2>
    608e:	nop

00006090 <FatFile::rmdir()>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
  // must be open subdirectory
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    6090:	ldrb	r3, [r0, #0]
    6092:	lsls	r2, r3, #27
    6094:	bpl.n	60cc <FatFile::rmdir()+0x3c>
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    6096:	ldr	r3, [r0, #20]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
    6098:	push	{r4, lr}
    609a:	mov	r4, r0
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    609c:	cbz	r3, 60ac <FatFile::rmdir()+0x1c>
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    609e:	ldrb	r3, [r0, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    60a0:	movs	r2, #0
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    60a2:	bic.w	r3, r3, #32
    60a6:	strb	r3, [r0, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    60a8:	str	r2, [r0, #16]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    60aa:	str	r2, [r0, #20]
  }
  rewind();

  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    60ac:	movs	r1, #1
    60ae:	mov	r0, r4
    60b0:	bl	5e78 <FatFile::readDirCache(bool)>
    if (!dir) {
    60b4:	cbz	r0, 60d0 <FatFile::rmdir()+0x40>
      }
      DBG_FAIL_MACRO;
      goto fail;
    }
    // done if past last used entry
    if (dir->name[0] == FAT_NAME_FREE) {
    60b6:	ldrb	r3, [r0, #0]
    60b8:	cbz	r3, 60d6 <FatFile::rmdir()+0x46>
      break;
    }
    // skip empty slot, '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    60ba:	cmp	r3, #229	; 0xe5
    60bc:	beq.n	60ac <FatFile::rmdir()+0x1c>
    60be:	cmp	r3, #46	; 0x2e
    60c0:	beq.n	60ac <FatFile::rmdir()+0x1c>
      continue;
    }
    // error not empty
    if (isFileOrSubdir(dir)) {
    60c2:	ldrb	r3, [r0, #11]
    60c4:	lsls	r3, r3, #28
    60c6:	bmi.n	60ac <FatFile::rmdir()+0x1c>
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
}
    60c8:	movs	r0, #0
    60ca:	pop	{r4, pc}
    60cc:	movs	r0, #0
    60ce:	bx	lr
  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    if (!dir) {
      // EOF if no error.
      if (!getError()) {
    60d0:	ldrb	r3, [r4, #1]
    60d2:	cmp	r3, #0
    60d4:	bne.n	60c8 <FatFile::rmdir()+0x38>
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    60d6:	ldrb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    60d8:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
    60da:	orr.w	r3, r3, #2
    60de:	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    60e0:	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    60e2:	mov	r0, r4

fail:
  return false;
}
    60e4:	ldmia.w	sp!, {r4, lr}
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    60e8:	b.w	6ce4 <FatFile::remove()>

000060ec <FatFile::seekSet(unsigned long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    60ec:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    60f0:	ldrb	r3, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    60f2:	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    60f4:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    60f6:	cbz	r3, 6126 <FatFile::seekSet(unsigned long)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    60f8:	ldr	r2, [r0, #20]
    60fa:	cmp	r2, r1
    60fc:	mov	r6, r1
    60fe:	beq.n	6176 <FatFile::seekSet(unsigned long)+0x8a>
    return true;
  }
  if (pos == 0) {
    6100:	cbnz	r1, 6114 <FatFile::seekSet(unsigned long)+0x28>
    // set position to start of file
    m_curCluster = 0;
    6102:	str	r1, [r4, #16]
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    6104:	ldrb	r3, [r4, #2]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    6106:	str	r6, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    6108:	bic.w	r3, r3, #32
    610c:	strb	r3, [r4, #2]
  return true;
    610e:	movs	r0, #1
    6110:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    6114:	lsls	r0, r3, #28
    6116:	bmi.n	612e <FatFile::seekSet(unsigned long)+0x42>
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
    6118:	lsls	r1, r3, #26
    611a:	bpl.n	6134 <FatFile::seekSet(unsigned long)+0x48>
    611c:	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
    611e:	ldrh	r3, [r3, #8]
    6120:	cmp.w	r6, r3, lsl #5
    6124:	bls.n	6104 <FatFile::seekSet(unsigned long)+0x18>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

fail:
  m_curCluster = tmp;
    6126:	str	r7, [r4, #16]
  return false;
    6128:	movs	r0, #0
    612a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_fileSize) {
    612e:	ldr	r1, [r4, #28]
    6130:	cmp	r6, r1
    6132:	bhi.n	6126 <FatFile::seekSet(unsigned long)+0x3a>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    6134:	ldr.w	lr, [r4, #8]
    6138:	ldrb.w	r5, [lr, #6]
    613c:	adds	r5, #9
    613e:	uxtb	r1, r5
    6140:	subs	r0, r2, #1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    6142:	subs	r5, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    6144:	lsrs	r0, r1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    6146:	lsrs	r5, r1

  if (nNew < nCur || m_curPosition == 0) {
    6148:	cmp	r0, r5
    614a:	bhi.n	614e <FatFile::seekSet(unsigned long)+0x62>
    614c:	cbnz	r2, 617c <FatFile::seekSet(unsigned long)+0x90>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    614e:	lsls	r3, r3, #25
    6150:	ite	mi
    6152:	ldrmi.w	r3, [lr, #32]
    6156:	ldrpl	r3, [r4, #32]
    6158:	str	r3, [r4, #16]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    615a:	add.w	r8, r4, #16
    615e:	mov	r2, r8
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    6160:	cmp	r5, #0
    6162:	beq.n	6104 <FatFile::seekSet(unsigned long)+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    6164:	ldr	r1, [r4, #16]
    6166:	ldr	r0, [r4, #8]
    6168:	bl	6594 <FatPartition::fatGet(unsigned long, unsigned long*)>
    616c:	cmp	r0, #0
    616e:	add.w	r5, r5, #4294967295
    6172:	bgt.n	615e <FatFile::seekSet(unsigned long)+0x72>
    6174:	b.n	6126 <FatFile::seekSet(unsigned long)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    6176:	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    6178:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    617c:	subs	r5, r5, r0
    617e:	b.n	615a <FatFile::seekSet(unsigned long)+0x6e>

00006180 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    6180:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6184:	mov	r5, r1
    6186:	mov	r8, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    6188:	movs	r1, #0
    618a:	movs	r2, #36	; 0x24
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    618c:	mov	r4, r0
    618e:	mov	r7, r3
    6190:	ldrb.w	r6, [sp, #24]
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    6194:	bl	bd6c <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
    6198:	ldr	r0, [r5, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    619a:	ldr	r3, [r5, #32]
    619c:	str	r3, [r4, #12]
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  /** \return Cache sector address. */
  cache_t* buffer() {
    return &m_buffer;
    619e:	add.w	r2, r0, #52	; 0x34
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    61a2:	and.w	r3, r8, #15
    61a6:	add.w	r2, r2, r3, lsl #5
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
    61aa:	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
    61ac:	strh.w	r8, [r4, #4]
    61b0:	ldrb	r1, [r2, #11]
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    61b2:	lsls	r5, r1, #28
    61b4:	bmi.n	61dc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    61b6:	and.w	r1, r1, #23
    61ba:	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    61bc:	ldrb	r3, [r2, #11]
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
    61be:	strb	r6, [r4, #3]
  if (!isFileOrSubdir(dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    61c0:	tst.w	r3, #24
    m_attributes |= FILE_ATTR_FILE;
    61c4:	it	eq
    61c6:	orreq.w	r1, r1, #8
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    61ca:	and.w	r3, r7, #3
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
    61ce:	it	eq
    61d0:	strbeq	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    61d2:	cmp	r3, #1
    61d4:	beq.n	61e6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
    61d6:	cmp	r3, #2
    61d8:	beq.n	622e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xae>
    61da:	cbz	r3, 6224 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    61dc:	movs	r0, #0
    61de:	strb	r0, [r4, #0]
  m_flags = 0;
    61e0:	strb	r0, [r4, #2]
  return false;
    61e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    61e6:	movs	r3, #2
    61e8:	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    61ea:	ldrb	r1, [r4, #0]
    61ec:	tst.w	r1, #17
    61f0:	bne.n	61dc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    61f2:	sxtb	r1, r3
    61f4:	and.w	r5, r7, #1024	; 0x400
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    61f8:	and.w	r3, r7, #8
    61fc:	orrs	r3, r1
    61fe:	uxtb	r3, r3
    6200:	strb	r3, [r4, #2]

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    6202:	ldrh.w	lr, [r2, #20]
    6206:	ldrh	r1, [r2, #26]
    6208:	ldr	r6, [r0, #48]	; 0x30
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);

  m_dirSector = m_vol->cacheSectorNumber();
    620a:	str	r6, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    620c:	orr.w	r1, r1, lr, lsl #16

  if (oflag & O_TRUNC) {
    6210:	cbz	r5, 6234 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    6212:	cbnz	r1, 624a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xca>
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6214:	orn	r3, r3, #127	; 0x7f
    6218:	strb	r3, [r4, #2]
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    621a:	lsls	r3, r7, #17
    621c:	bmi.n	623c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    621e:	movs	r0, #1
    6220:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
    6224:	ands.w	r5, r7, #1024	; 0x400
    6228:	bne.n	61dc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    622a:	movs	r1, #1
    622c:	b.n	61f8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x78>
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    622e:	movs	r3, #3
    6230:	strb	r3, [r4, #2]
      break;
    6232:	b.n	61ea <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
    6234:	str	r1, [r4, #32]
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    6236:	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    6238:	str	r3, [r4, #28]
    623a:	b.n	621a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9a>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    623c:	ldr	r1, [r4, #28]
    623e:	mov	r0, r4
    6240:	bl	60ec <FatFile::seekSet(unsigned long)>
    6244:	cmp	r0, #0
    6246:	bne.n	621e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9e>
    6248:	b.n	61dc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    624a:	bl	66f8 <FatPartition::freeChain(unsigned long)>
    624e:	cmp	r0, #0
    6250:	beq.n	61dc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    6252:	ldrb	r3, [r4, #2]
    6254:	b.n	6214 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
    6256:	nop

00006258 <FatFile::openNext(FatFile*, int)>:
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    6258:	ldrb	r3, [r0, #0]
    625a:	cbnz	r3, 6264 <FatFile::openNext(FatFile*, int)+0xc>
    625c:	ldrb	r3, [r1, #0]
    625e:	tst.w	r3, #112	; 0x70
    6262:	bne.n	6268 <FatFile::openNext(FatFile*, int)+0x10>
      lfnOrd = 0;
    }
  }

fail:
  return false;
    6264:	movs	r0, #0
}
    6266:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    6268:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    626c:	ldr	r6, [r1, #20]
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    626e:	ands.w	r7, r6, #31
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    6272:	sub	sp, #8
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    6274:	bne.n	62ba <FatFile::openNext(FatFile*, int)+0x62>
    6276:	mov	r9, r2
    6278:	mov	r5, r1
    627a:	mov	r8, r0
    627c:	mov	sl, r7
    627e:	b.n	6284 <FatFile::openNext(FatFile*, int)+0x2c>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
        lfnOrd = ldir->order & 0X1F;
        checksum = ldir->checksum;
      }
    } else {
      lfnOrd = 0;
    6280:	movs	r7, #0
    6282:	ldr	r6, [r5, #20]
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    DirFat_t* dir = dirFile->readDirCache();
    6284:	movs	r1, #0
    6286:	mov	r0, r5
    6288:	bl	5e78 <FatFile::readDirCache(bool)>
    if (!dir) {
    628c:	cbz	r0, 62ba <FatFile::openNext(FatFile*, int)+0x62>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == FAT_NAME_FREE) {
    628e:	ldrb	r3, [r0, #0]
    6290:	cbz	r3, 62ba <FatFile::openNext(FatFile*, int)+0x62>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    6292:	cmp	r3, #46	; 0x2e
    6294:	beq.n	6280 <FatFile::openNext(FatFile*, int)+0x28>
    6296:	cmp	r3, #229	; 0xe5
    6298:	beq.n	6280 <FatFile::openNext(FatFile*, int)+0x28>
    629a:	ldrb	r2, [r0, #11]
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
    629c:	lsls	r1, r2, #28
    629e:	bpl.n	62c2 <FatFile::openNext(FatFile*, int)+0x6a>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (isLongName(dir)) {
    62a0:	cmp	r2, #15
    62a2:	bne.n	6280 <FatFile::openNext(FatFile*, int)+0x28>
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    62a4:	lsls	r2, r3, #25
    62a6:	bpl.n	6282 <FatFile::openNext(FatFile*, int)+0x2a>
        lfnOrd = ldir->order & 0X1F;
    62a8:	and.w	r7, r3, #31
        checksum = ldir->checksum;
    62ac:	ldrb.w	sl, [r0, #13]
    62b0:	b.n	6282 <FatFile::openNext(FatFile*, int)+0x2a>
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    62b2:	bl	6944 <FatFile::lfnChecksum(unsigned char*)>
    62b6:	cmp	r0, sl
    62b8:	beq.n	62c6 <FatFile::openNext(FatFile*, int)+0x6e>
      lfnOrd = 0;
    }
  }

fail:
  return false;
    62ba:	movs	r0, #0
}
    62bc:	add	sp, #8
    62be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    62c2:	cmp	r7, #0
    62c4:	bne.n	62b2 <FatFile::openNext(FatFile*, int)+0x5a>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    62c6:	str	r7, [sp, #0]
    62c8:	mov	r3, r9
    62ca:	ubfx	r2, r6, #5, #16
    62ce:	mov	r1, r5
    62d0:	mov	r0, r8
    62d2:	bl	6180 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    62d6:	b.n	62bc <FatFile::openNext(FatFile*, int)+0x64>

000062d8 <FatFile::sync()>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    62d8:	ldrb	r3, [r0, #0]
    62da:	cbz	r3, 62e0 <FatFile::sync()+0x8>
    62dc:	b.w	5910 <FatFile::sync() [clone .part.40]>
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
    62e0:	movs	r0, #1
    62e2:	bx	lr

000062e4 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    62e4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    62e8:	ldrb	r3, [r0, #2]
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    62ea:	lsls	r5, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    62ec:	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    62ee:	bmi.n	6300 <FatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    62f0:	ldrb	r3, [r4, #1]
    62f2:	orr.w	r3, r3, #1
    62f6:	strb	r3, [r4, #1]
  return -1;
    62f8:	mov.w	r0, #4294967295
    62fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6300:	mov	r9, r2
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    6302:	lsls	r2, r3, #28
    6304:	mov	r8, r1
    6306:	bmi.w	6488 <FatFile::write(void const*, unsigned int)+0x1a4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    630a:	ldr	r2, [r4, #20]
    630c:	mvns	r3, r2
    630e:	cmp	r9, r3
    6310:	bhi.n	62f0 <FatFile::write(void const*, unsigned int)+0xc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    6312:	cmp.w	r9, #0
    6316:	beq.w	6496 <FatFile::write(void const*, unsigned int)+0x1b2>
    631a:	mov	r6, r9
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    631c:	mov.w	sl, #0
    6320:	b.n	6384 <FatFile::write(void const*, unsigned int)+0xa0>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    6322:	cmp	r1, #0
    6324:	beq.n	641a <FatFile::write(void const*, unsigned int)+0x136>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    6326:	ldrb	r3, [r4, #2]
    6328:	lsls	r3, r3, #25
    632a:	bpl.n	6428 <FatFile::write(void const*, unsigned int)+0x144>
    632c:	ldr	r3, [r4, #28]
    632e:	cmp	r3, r2
    6330:	bls.n	6428 <FatFile::write(void const*, unsigned int)+0x144>
          m_curCluster++;
    6332:	adds	r1, #1
    6334:	str	r1, [r4, #16]
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    6336:	bl	6588 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    633a:	cmp.w	r6, #512	; 0x200
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    633e:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    6340:	bcs.n	63be <FatFile::write(void const*, unsigned int)+0xda>
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    6342:	ldr	r2, [r4, #20]
    6344:	ldr	r3, [r4, #28]
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    6346:	ldr	r0, [r4, #8]
    6348:	cmp.w	r6, #512	; 0x200
    634c:	mov	r5, r6
    634e:	it	cs
    6350:	movcs.w	r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    6354:	cmp	r2, r3
    6356:	bcc.n	644a <FatFile::write(void const*, unsigned int)+0x166>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    6358:	movs	r2, #5
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    635a:	adds	r0, #40	; 0x28
    635c:	bl	6518 <FatCache::read(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
    6360:	cmp	r0, #0
    6362:	beq.n	62f0 <FatFile::write(void const*, unsigned int)+0xc>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    6364:	add	r0, r7
    6366:	mov	r2, r5
    6368:	mov	r1, r8
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    636a:	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    636c:	bl	8f84 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6370:	cmp.w	r7, #512	; 0x200
    6374:	beq.n	6466 <FatFile::write(void const*, unsigned int)+0x182>
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    6376:	ldr	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    6378:	subs	r6, r6, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    637a:	add	r2, r5
    src += n;
    637c:	add	r8, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    637e:	str	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    6380:	beq.w	6496 <FatFile::write(void const*, unsigned int)+0x1b2>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    6384:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    6386:	ldr	r1, [r4, #16]
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    6388:	ldrb	r3, [r0, #5]
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    638a:	ands.w	r5, r3, r2, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    638e:	ubfx	r7, r2, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    6392:	bne.n	63ae <FatFile::write(void const*, unsigned int)+0xca>
    6394:	cmp	r7, #0
    6396:	beq.n	6322 <FatFile::write(void const*, unsigned int)+0x3e>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    6398:	bl	6588 <FatPartition::clusterStartSector(unsigned long) const>
    639c:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    639e:	rsb	r5, r7, #512	; 0x200
    63a2:	cmp	r5, r6
    63a4:	it	cs
    63a6:	movcs	r5, r6
    63a8:	ldr	r0, [r4, #8]
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
    63aa:	movs	r2, #1
    63ac:	b.n	635a <FatFile::write(void const*, unsigned int)+0x76>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    63ae:	bl	6588 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;
    63b2:	adds	r1, r5, r0

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    63b4:	cmp	r7, #0
    63b6:	bne.n	639e <FatFile::write(void const*, unsigned int)+0xba>
    63b8:	cmp.w	r6, #512	; 0x200
    63bc:	bcc.n	6342 <FatFile::write(void const*, unsigned int)+0x5e>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    63be:	cmp.w	r6, #1024	; 0x400
    63c2:	ldr	r2, [r4, #8]
    63c4:	bcc.n	63fe <FatFile::write(void const*, unsigned int)+0x11a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    63c6:	ldrb	r3, [r2, #4]
    63c8:	ldr	r7, [r2, #48]	; 0x30
    63ca:	subs	r3, r3, r5
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    63cc:	lsrs	r0, r6, #9
    63ce:	cmp	r3, r0
    63d0:	it	cs
    63d2:	movcs	r3, r0
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    63d4:	cmp	r7, r1
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    63d6:	mov.w	r5, r3, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    63da:	bcc.n	63ee <FatFile::write(void const*, unsigned int)+0x10a>
    63dc:	add	r7, r3
    63de:	cmp	r7, r1
    63e0:	bls.n	63ee <FatFile::write(void const*, unsigned int)+0x10a>
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    63e2:	strb.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
    63e6:	mov.w	r0, #4294967295
    63ea:	str	r0, [r2, #48]	; 0x30
    63ec:	ldr	r2, [r4, #8]
    63ee:	ldr	r0, [r2, #0]
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    return m_blockDev->writeSectors(sector, src, ns);
    63f0:	ldr	r2, [r0, #0]
    63f2:	ldr	r7, [r2, #28]
    63f4:	mov	r2, r8
    63f6:	blx	r7
        // Invalidate cache if cache sector is in the range.
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, nSector)) {
    63f8:	cmp	r0, #0
    63fa:	bne.n	6376 <FatFile::write(void const*, unsigned int)+0x92>
    63fc:	b.n	62f0 <FatFile::write(void const*, unsigned int)+0xc>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->cacheSectorNumber() == sector) {
    63fe:	ldr	r3, [r2, #48]	; 0x30
    6400:	cmp	r3, r1
    6402:	beq.n	6458 <FatFile::write(void const*, unsigned int)+0x174>
    6404:	ldr	r0, [r2, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    6406:	ldr	r3, [r0, #0]
    6408:	mov	r2, r8
    640a:	ldr	r3, [r3, #24]
    640c:	blx	r3
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    640e:	cmp	r0, #0
    6410:	beq.w	62f0 <FatFile::write(void const*, unsigned int)+0xc>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    6414:	mov.w	r5, #512	; 0x200
    6418:	b.n	6376 <FatFile::write(void const*, unsigned int)+0x92>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    641a:	ldr	r1, [r4, #32]
    641c:	cbz	r1, 6474 <FatFile::write(void const*, unsigned int)+0x190>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    641e:	str	r1, [r4, #16]
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    6420:	bl	6588 <FatPartition::clusterStartSector(unsigned long) const>
    6424:	mov	r1, r0
    6426:	b.n	63b8 <FatFile::write(void const*, unsigned int)+0xd4>
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6428:	add.w	r2, r4, #16
    642c:	bl	6594 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    6430:	cmp	r0, #0
    6432:	blt.w	62f0 <FatFile::write(void const*, unsigned int)+0xc>
        if (fg < 0) {
          DBG_FAIL_MACRO;
          goto fail;
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
    6436:	bne.n	6444 <FatFile::write(void const*, unsigned int)+0x160>
          // add cluster if at end of chain
          if (!addCluster()) {
    6438:	mov	r0, r4
    643a:	bl	5828 <FatFile::addCluster()>
    643e:	cmp	r0, #0
    6440:	beq.w	62f0 <FatFile::write(void const*, unsigned int)+0xc>
    6444:	ldr	r0, [r4, #8]
    6446:	ldr	r1, [r4, #16]
    6448:	b.n	6420 <FatFile::write(void const*, unsigned int)+0x13c>
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    644a:	ldrb	r3, [r4, #2]
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    644c:	tst.w	r3, #32
    6450:	ite	eq
    6452:	moveq	r2, #1
    6454:	movne	r2, #5
    6456:	b.n	635a <FatFile::write(void const*, unsigned int)+0x76>
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    6458:	strb.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
    645c:	mov.w	r3, #4294967295
    6460:	str	r3, [r2, #48]	; 0x30
    6462:	ldr	r2, [r4, #8]
    6464:	b.n	6404 <FatFile::write(void const*, unsigned int)+0x120>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    6466:	ldr	r0, [r4, #8]
    6468:	adds	r0, #40	; 0x28
    646a:	bl	6578 <FatCache::sync()>
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->cacheSyncData()) {
    646e:	cmp	r0, #0
    6470:	bne.n	6376 <FatFile::write(void const*, unsigned int)+0x92>
    6472:	b.n	62f0 <FatFile::write(void const*, unsigned int)+0xc>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    6474:	mov	r0, r4
    6476:	bl	5828 <FatFile::addCluster()>
    647a:	cmp	r0, #0
    647c:	beq.w	62f0 <FatFile::write(void const*, unsigned int)+0xc>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    6480:	ldr	r1, [r4, #16]
    6482:	str	r1, [r4, #32]
    6484:	ldr	r0, [r4, #8]
    6486:	b.n	6420 <FatFile::write(void const*, unsigned int)+0x13c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_fileSize)) {
    6488:	ldr	r1, [r0, #28]
    648a:	bl	60ec <FatFile::seekSet(unsigned long)>
    648e:	cmp	r0, #0
    6490:	beq.w	62f0 <FatFile::write(void const*, unsigned int)+0xc>
    6494:	b.n	630a <FatFile::write(void const*, unsigned int)+0x26>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    6496:	ldr	r3, [r4, #28]
    6498:	cmp	r3, r2
    649a:	bcc.n	64b0 <FatFile::write(void const*, unsigned int)+0x1cc>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    649c:	ldr	r3, [pc, #40]	; (64c8 <FatFile::write(void const*, unsigned int)+0x1e4>)
    649e:	ldr	r3, [r3, #0]
    64a0:	cbz	r3, 64c0 <FatFile::write(void const*, unsigned int)+0x1dc>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    64a2:	ldrb	r3, [r4, #2]
    64a4:	orn	r3, r3, #127	; 0x7f
    64a8:	strb	r3, [r4, #2]
    64aa:	mov	r0, r9
    64ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    64b0:	ldrb	r3, [r4, #2]
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    64b2:	str	r2, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    64b4:	orn	r3, r3, #127	; 0x7f
    64b8:	strb	r3, [r4, #2]
    64ba:	mov	r0, r9
    64bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    64c0:	mov	r0, r9
    64c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    64c6:	nop
    64c8:	.word	0x1fff1ea8

000064cc <FatCache::sync() [clone .part.8]>:
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    64cc:	push	{r3, r4, r5, r6, r7, lr}
    64ce:	ldr	r3, [r0, #4]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    64d0:	ldr	r1, [r0, #8]
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    64d2:	add.w	r6, r0, #12
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    64d6:	mov	r4, r0
    64d8:	ldr	r0, [r3, #0]
    64da:	ldr	r3, [r0, #0]
    64dc:	mov	r2, r6
    64de:	ldr	r3, [r3, #24]
    64e0:	blx	r3
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    64e2:	cbz	r0, 64f6 <FatCache::sync() [clone .part.8]+0x2a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    64e4:	ldrb	r3, [r4, #0]
    64e6:	lsls	r2, r3, #30
    64e8:	mov	r5, r0
    64ea:	bmi.n	64fc <FatCache::sync() [clone .part.8]+0x30>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    64ec:	bic.w	r3, r3, #1
    64f0:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    64f2:	mov	r0, r5
    64f4:	pop	{r3, r4, r5, r6, r7, pc}
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
    64f6:	movs	r5, #0
}
    64f8:	mov	r0, r5
    64fa:	pop	{r3, r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    64fc:	ldr	r3, [r4, #4]
    64fe:	ldr	r1, [r4, #8]
    6500:	ldr	r0, [r3, #0]
    6502:	ldr	r7, [r3, #16]
    6504:	ldr	r3, [r0, #0]
    6506:	mov	r2, r6
    6508:	add	r1, r7
    650a:	ldr	r3, [r3, #24]
    650c:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    650e:	cmp	r0, #0
    6510:	beq.n	64f6 <FatCache::sync() [clone .part.8]+0x2a>
    6512:	ldrb	r3, [r4, #0]
    6514:	b.n	64ec <FatCache::sync() [clone .part.8]+0x20>
    6516:	nop

00006518 <FatCache::read(unsigned long, unsigned char)>:
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    6518:	push	{r3, r4, r5, r6, r7, lr}
  if (m_lbn != sector) {
    651a:	ldr	r3, [r0, #8]
    651c:	cmp	r3, r1
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    651e:	mov	r6, r0
    6520:	mov	r4, r2
  if (m_lbn != sector) {
    6522:	beq.n	6544 <FatCache::read(unsigned long, unsigned char)+0x2c>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    6524:	ldrb	r3, [r0, #0]
    6526:	lsls	r2, r3, #31
    6528:	mov	r7, r1
    652a:	bmi.n	6552 <FatCache::read(unsigned long, unsigned char)+0x3a>
  if (m_lbn != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    652c:	lsls	r3, r4, #29
    652e:	bpl.n	655e <FatCache::read(unsigned long, unsigned char)+0x46>
    6530:	add.w	r5, r6, #12
    6534:	movs	r3, #0
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    6536:	and.w	r4, r4, #3
    653a:	orrs	r4, r3
    653c:	strb	r4, [r6, #0]
    653e:	mov	r0, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    6540:	str	r7, [r6, #8]
  return &m_buffer;

fail:

  return nullptr;
}
    6542:	pop	{r3, r4, r5, r6, r7, pc}
    6544:	ldrsb.w	r3, [r0], #12
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    6548:	and.w	r4, r4, #3
    654c:	orrs	r4, r3
    654e:	strb	r4, [r6, #0]
  return &m_buffer;

fail:

  return nullptr;
}
    6550:	pop	{r3, r4, r5, r6, r7, pc}
    6552:	bl	64cc <FatCache::sync() [clone .part.8]>
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    if (!sync()) {
    6556:	cmp	r0, #0
    6558:	bne.n	652c <FatCache::read(unsigned long, unsigned char)+0x14>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_buffer;

fail:

  return nullptr;
    655a:	movs	r0, #0
    655c:	pop	{r3, r4, r5, r6, r7, pc}
    655e:	ldr	r3, [r6, #4]
    6560:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    6562:	ldr	r3, [r0, #0]
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    6564:	add.w	r5, r6, #12
    6568:	ldr	r3, [r3, #8]
    656a:	mov	r2, r5
    656c:	mov	r1, r7
    656e:	blx	r3
    6570:	cmp	r0, #0
    6572:	bne.n	6534 <FatCache::read(unsigned long, unsigned char)+0x1c>
    6574:	b.n	655a <FatCache::read(unsigned long, unsigned char)+0x42>
    6576:	nop

00006578 <FatCache::sync()>:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    6578:	ldrb	r3, [r0, #0]
    657a:	lsls	r3, r3, #31
    657c:	bmi.n	6582 <FatCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    657e:	movs	r0, #1
    6580:	bx	lr
    6582:	b.w	64cc <FatCache::sync() [clone .part.8]>
    6586:	nop

00006588 <FatPartition::clusterStartSector(unsigned long) const>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6588:	ldrb	r3, [r0, #6]
    658a:	ldr	r0, [r0, #20]
    658c:	subs	r1, #2
    658e:	lsls	r1, r3
}
    6590:	add	r0, r1
    6592:	bx	lr

00006594 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    6594:	cmp	r1, #1
    6596:	bls.n	65fc <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
    6598:	ldr	r3, [r0, #28]
    659a:	cmp	r1, r3
    659c:	bhi.n	65fc <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    659e:	push	{r4, r5, r6, lr}
    65a0:	ldrb	r3, [r0, #7]
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    65a2:	cmp	r3, #32
    65a4:	mov	r6, r2
    65a6:	mov	r5, r0
    65a8:	mov	r4, r1
    65aa:	beq.n	65de <FatPartition::fatGet(unsigned long, unsigned long*)+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    65ac:	cmp	r3, #16
    65ae:	bne.n	65d8 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
    65b0:	ldr	r3, [r0, #24]
    65b2:	ubfx	r1, r1, #8, #8
    65b6:	add	r1, r3
    65b8:	movs	r2, #2
    65ba:	add.w	r0, r0, #564	; 0x234
    65be:	bl	6518 <FatCache::read(unsigned long, unsigned char)>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    65c2:	cbz	r0, 65d8 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    65c4:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    65c6:	ldrh.w	r3, [r0, r1, lsl #1]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    65ca:	ldr	r2, [r5, #28]
    65cc:	cmp	r3, r2
    return 0;
  }
  *value = next;
  return 1;
    65ce:	itte	ls
    65d0:	movls	r0, #1
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
  }
  *value = next;
    65d2:	strls	r3, [r6, #0]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
    65d4:	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
    65d6:	pop	{r4, r5, r6, pc}
  }
  *value = next;
  return 1;

fail:
  return -1;
    65d8:	mov.w	r0, #4294967295
    65dc:	pop	{r4, r5, r6, pc}
    65de:	ldr	r1, [r0, #24]
    65e0:	movs	r2, #2
    65e2:	add.w	r1, r1, r4, lsr #7
    65e6:	add.w	r0, r0, #564	; 0x234
    65ea:	bl	6518 <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    65ee:	cmp	r0, #0
    65f0:	beq.n	65d8 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    65f2:	and.w	r1, r4, #127	; 0x7f
    65f6:	ldr.w	r3, [r0, r1, lsl #2]
    65fa:	b.n	65ca <FatPartition::fatGet(unsigned long, unsigned long*)+0x36>
  }
  *value = next;
  return 1;

fail:
  return -1;
    65fc:	mov.w	r0, #4294967295
}
    6600:	bx	lr
    6602:	nop

00006604 <FatPartition::fatPut(unsigned long, unsigned long)>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    6604:	cmp	r1, #1
    6606:	bls.n	6644 <FatPartition::fatPut(unsigned long, unsigned long)+0x40>
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    6608:	push	{r3, r4, r5, lr}
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    660a:	ldr	r3, [r0, #28]
    660c:	cmp	r1, r3
    660e:	bhi.n	661e <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    6610:	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    6612:	cmp	r3, #32
    6614:	mov	r5, r2
    6616:	mov	r4, r1
    6618:	beq.n	6648 <FatPartition::fatPut(unsigned long, unsigned long)+0x44>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    661a:	cmp	r3, #16
    661c:	beq.n	6622 <FatPartition::fatPut(unsigned long, unsigned long)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    661e:	movs	r0, #0
    6620:	pop	{r3, r4, r5, pc}
    6622:	ldr	r3, [r0, #24]
    6624:	ubfx	r1, r1, #8, #8
    6628:	add	r1, r3
    662a:	add.w	r0, r0, #564	; 0x234
    662e:	movs	r2, #3
    6630:	bl	6518 <FatCache::read(unsigned long, unsigned char)>

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    6634:	mov	r3, r0
    6636:	cmp	r0, #0
    6638:	beq.n	661e <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    663a:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe16(reinterpret_cast<uint8_t*>
           (&pc->fat16[cluster & (m_sectorMask >> 1)]), value);
    return true;
    663c:	movs	r0, #1
    663e:	strh.w	r5, [r3, r1, lsl #1]
    goto fail;
  }

fail:
  return false;
}
    6642:	pop	{r3, r4, r5, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    6644:	movs	r0, #0
}
    6646:	bx	lr
    6648:	ldr	r1, [r0, #24]
    664a:	movs	r2, #3
    664c:	add.w	r0, r0, #564	; 0x234
    6650:	add.w	r1, r1, r4, lsr #7
    6654:	bl	6518 <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    6658:	mov	r3, r0
    665a:	cmp	r0, #0
    665c:	beq.n	661e <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    665e:	and.w	r1, r4, #127	; 0x7f
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
    6662:	movs	r0, #1
    6664:	str.w	r5, [r3, r1, lsl #2]
    6668:	pop	{r3, r4, r5, pc}
    666a:	nop

0000666c <FatPartition::allocateCluster(unsigned long, unsigned long*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    666c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    6670:	ldr	r4, [r0, #12]
    6672:	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6674:	sub	sp, #8
    6676:	mov	r5, r0
    6678:	mov	r7, r1
    667a:	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    667c:	itte	cc
    667e:	movcc	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
    6680:	movcc	r6, #0
  } else {
    find = m_allocSearchStart;
    setStart = true;
    6682:	movcs	r6, #1
    6684:	ldr	r3, [r5, #28]
  }
  while (1) {
    find++;
    6686:	adds	r4, #1
    if (find > m_lastCluster) {
    6688:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    668a:	add	r2, sp, #4
    668c:	mov	r0, r5
    668e:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    6690:	bls.n	66a6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x3a>
      if (setStart) {
    6692:	cbnz	r6, 66ee <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x82>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
    6694:	ldr	r4, [r5, #12]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    6696:	adds	r4, #1
    if (find > m_lastCluster) {
    6698:	cmp	r4, r3
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
      setStart = true;
    669a:	mov.w	r6, #1
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    669e:	add	r2, sp, #4
    66a0:	mov	r0, r5
    66a2:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    66a4:	bhi.n	6692 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x26>
      }
      find = m_allocSearchStart;
      setStart = true;
      continue;
    }
    if (find == current) {
    66a6:	cmp	r7, r4
    66a8:	beq.n	66ee <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x82>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    66aa:	bl	6594 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    66ae:	cmp	r0, #0
    66b0:	blt.n	66ee <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x82>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
    66b2:	beq.n	6684 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    66b4:	ldr	r3, [sp, #4]
    66b6:	cmp	r3, #0
    66b8:	bne.n	6684 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
      break;
    }
  }
  if (setStart) {
    66ba:	cbz	r6, 66be <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x52>
    m_allocSearchStart = find;
    66bc:	str	r4, [r5, #12]
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    66be:	mvn.w	r2, #4026531840	; 0xf0000000
    66c2:	mov	r1, r4
    66c4:	mov	r0, r5
    66c6:	bl	6604 <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    66ca:	mov	r6, r0
    66cc:	cbz	r0, 66ee <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x82>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    66ce:	cbnz	r7, 66e0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x74>
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
    66d0:	ldr	r3, [r5, #36]	; 0x24
    66d2:	cmp	r3, #0
    66d4:	blt.n	66da <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6e>
      m_freeClusterCount += change;
    66d6:	subs	r3, #1
    66d8:	str	r3, [r5, #36]	; 0x24
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
    66da:	str.w	r4, [r8]
  return true;
    66de:	b.n	66f0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
    66e0:	mov	r1, r7
    66e2:	mov	r2, r4
    66e4:	mov	r0, r5
    66e6:	bl	6604 <FatPartition::fatPut(unsigned long, unsigned long)>
    66ea:	cmp	r0, #0
    66ec:	bne.n	66d0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x64>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
    66ee:	movs	r6, #0
}
    66f0:	mov	r0, r6
    66f2:	add	sp, #8
    66f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000066f8 <FatPartition::freeChain(unsigned long)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    66f8:	push	{r4, r5, r6, lr}
    66fa:	mov	r5, r0
    66fc:	sub	sp, #8
    66fe:	mov	r4, r1
    6700:	b.n	6722 <FatPartition::freeChain(unsigned long)+0x2a>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    6702:	bl	6604 <FatPartition::fatPut(unsigned long, unsigned long)>
    6706:	cbz	r0, 6738 <FatPartition::freeChain(unsigned long)+0x40>
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
    6708:	ldr	r3, [r5, #36]	; 0x24
    670a:	cmp	r3, #0
      m_freeClusterCount += change;
    670c:	itt	ge
    670e:	addge	r3, #1
    6710:	strge	r3, [r5, #36]	; 0x24
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
    6712:	ldr	r3, [r5, #12]
    6714:	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
    6716:	itt	cc
    6718:	addcc.w	r4, r4, #4294967295
    671c:	strcc	r4, [r5, #12]
    }
    cluster = next;
    671e:	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    6720:	cbz	r6, 673a <FatPartition::freeChain(unsigned long)+0x42>
    fg = fatGet(cluster, &next);
    6722:	add	r2, sp, #4
    6724:	mov	r1, r4
    6726:	mov	r0, r5
    6728:	bl	6594 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    672c:	subs	r6, r0, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    672e:	mov	r1, r4
    6730:	mov.w	r2, #0
    6734:	mov	r0, r5
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    6736:	bge.n	6702 <FatPartition::freeChain(unsigned long)+0xa>
  } while (fg);

  return true;

fail:
  return false;
    6738:	movs	r0, #0
}
    673a:	add	sp, #8
    673c:	pop	{r4, r5, r6, pc}
    673e:	nop

00006740 <FatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    6740:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    6744:	ldr	r4, [r0, #36]	; 0x24
    6746:	cmp	r4, #0
    6748:	blt.n	6750 <FatPartition::freeClusterCount()+0x10>
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
}
    674a:	mov	r0, r4
    674c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6750:	ldrb	r3, [r0, #7]
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    6752:	ldr	r2, [r0, #28]
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    6754:	cmp	r3, #16
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    6756:	add.w	r8, r2, #1
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    675a:	beq.n	676a <FatPartition::freeClusterCount()+0x2a>
    675c:	cmp	r3, #32
    675e:	beq.n	676a <FatPartition::freeClusterCount()+0x2a>
  }
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
    6760:	mov.w	r4, #4294967295
}
    6764:	mov	r0, r4
    6766:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    676a:	mov	r6, r0
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    676c:	ldr	r5, [r0, #24]
    while (todo) {
    676e:	cmp.w	r8, #0
    6772:	beq.n	67f2 <FatPartition::freeClusterCount()+0xb2>
    6774:	add.w	r7, r0, #564	; 0x234
    6778:	movs	r4, #0
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
    677a:	mov	r1, r5
    677c:	movs	r2, #2
    677e:	mov	r0, r7
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
    6780:	adds	r5, #1
    6782:	bl	6518 <FatCache::read(unsigned long, unsigned char)>
      if (!pc) {
    6786:	cmp	r0, #0
    6788:	beq.n	6760 <FatPartition::freeClusterCount()+0x20>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    678a:	ldrb	r3, [r6, #7]
    678c:	cmp	r3, #16
    678e:	beq.n	67c0 <FatPartition::freeClusterCount()+0x80>
      if (todo < n) {
    6790:	cmp.w	r8, #127	; 0x7f
    6794:	bhi.n	67ea <FatPartition::freeClusterCount()+0xaa>
        n = todo;
    6796:	uxth.w	r1, r8
    679a:	mov	lr, r8
    679c:	subs	r1, #1
    679e:	uxth	r1, r1
    67a0:	add.w	r1, r0, r1, lsl #2
    67a4:	subs	r3, r0, #4
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat32[i] == 0) {
    67a6:	ldr.w	r2, [r3, #4]!
    67aa:	cbnz	r2, 67ae <FatPartition::freeClusterCount()+0x6e>
            free++;
    67ac:	adds	r4, #1
          if (pc->fat16[i] == 0) {
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
    67ae:	cmp	r3, r1
    67b0:	bne.n	67a6 <FatPartition::freeClusterCount()+0x66>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    67b2:	subs.w	r8, r8, lr
    67b6:	bne.n	677a <FatPartition::freeClusterCount()+0x3a>
  }
#endif  // USE_MULTI_SECTOR_IO
#if MAINTAIN_FREE_CLUSTER_COUNT
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
    67b8:	str	r4, [r6, #36]	; 0x24
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
}
    67ba:	mov	r0, r4
    67bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    67c0:	cmp.w	r8, #255	; 0xff
    67c4:	bls.n	67f6 <FatPartition::freeClusterCount()+0xb6>
    67c6:	mov.w	lr, #256	; 0x100
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    67ca:	mov	r3, lr
    67cc:	subs	r1, r3, #1
    67ce:	uxth	r1, r1
    67d0:	add.w	r1, r0, r1, lsl #1
    67d4:	subs	r3, r0, #2
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat16[i] == 0) {
    67d6:	ldrh.w	r2, [r3, #2]!
    67da:	cbnz	r2, 67de <FatPartition::freeClusterCount()+0x9e>
            free++;
    67dc:	adds	r4, #1
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
    67de:	cmp	r1, r3
    67e0:	bne.n	67d6 <FatPartition::freeClusterCount()+0x96>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    67e2:	subs.w	r8, r8, lr
    67e6:	bne.n	677a <FatPartition::freeClusterCount()+0x3a>
    67e8:	b.n	67b8 <FatPartition::freeClusterCount()+0x78>
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    67ea:	mov.w	lr, #128	; 0x80
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    67ee:	mov	r1, lr
    67f0:	b.n	679c <FatPartition::freeClusterCount()+0x5c>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    67f2:	mov	r4, r8
    67f4:	b.n	67b8 <FatPartition::freeClusterCount()+0x78>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
    67f6:	uxth.w	r3, r8
    67fa:	mov	lr, r8
    67fc:	b.n	67cc <FatPartition::freeClusterCount()+0x8c>
    67fe:	nop

00006800 <FatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
    6800:	push	{r3, r4, r5, r6, r7, lr}
    6802:	mov	r4, r0
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    6804:	movs	r3, #0
  m_allocSearchStart = 1;
    6806:	movs	r5, #1
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
    6808:	mov.w	r0, #4294967295
    680c:	str	r5, [r4, #12]
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    680e:	str	r1, [r4, #0]
  }
  /** Initialize the cache.
   * \param[in] vol FatPartition that owns this FatCache.
   */
  void init(FatPartition *vol) {
    m_part = vol;
    6810:	str	r4, [r4, #44]	; 0x2c
    6812:	str.w	r4, [r4, #568]	; 0x238
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    6816:	strb	r3, [r4, #7]
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    6818:	strb.w	r3, [r4, #40]	; 0x28
    681c:	strb.w	r3, [r4, #564]	; 0x234
    m_lbn = 0XFFFFFFFF;
    6820:	str	r0, [r4, #48]	; 0x30
    6822:	str.w	r0, [r4, #572]	; 0x23c
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    6826:	mov	r5, r2
    6828:	cbz	r2, 6862 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    682a:	cmp	r2, #4
    682c:	bls.n	6832 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x32>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    682e:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    6830:	pop	{r3, r4, r5, r6, r7, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    6832:	add.w	r6, r4, #40	; 0x28
    6836:	mov	r2, r3
    6838:	mov	r1, r3
    683a:	mov	r0, r6
    683c:	bl	6518 <FatCache::read(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    mbr = reinterpret_cast<MbrSector_t*>
          (cacheFetchData(0, FatCache::CACHE_FOR_READ));
    MbrPart_t *mp = mbr->part + part - 1;
    6840:	add.w	r5, r5, #268435456	; 0x10000000
    6844:	subs	r5, #1
    6846:	lsls	r5, r5, #4
    6848:	add.w	r3, r0, #446	; 0x1be
    684c:	adds	r2, r3, r5

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    684e:	cmp	r0, #0
    6850:	beq.n	682e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    6852:	ldrb	r1, [r2, #4]
    6854:	cmp	r1, #0
    6856:	beq.n	682e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    6858:	ldrb	r3, [r3, r5]
    685a:	lsls	r3, r3, #25
    685c:	bne.n	682e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    685e:	ldr	r5, [r2, #8]
    6860:	b.n	6866 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x66>
    6862:	add.w	r6, r4, #40	; 0x28
    6866:	mov	r0, r6
    6868:	movs	r2, #0
    686a:	mov	r1, r5
    686c:	bl	6518 <FatCache::read(unsigned long, unsigned char)>
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FatCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    6870:	cmp	r0, #0
    6872:	beq.n	682e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    6874:	ldrb	r3, [r0, #16]
    6876:	cmp	r3, #2
    6878:	bne.n	682e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    687a:	ldrh.w	r3, [r0, #11]
    687e:	cmp.w	r3, #512	; 0x200
    6882:	bne.n	682e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    6884:	ldrb	r6, [r0, #13]
    6886:	strb	r6, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    6888:	subs	r3, r6, #1
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    688a:	movs	r2, #0
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    688c:	cmp	r6, #1
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    688e:	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    6890:	strb	r2, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6892:	beq.n	68b4 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb4>
    6894:	movs	r2, #1
    6896:	mov	r1, r2
    6898:	b.n	689c <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9c>
    689a:	mov	r2, r3
    689c:	lsls	r1, r1, #1
    689e:	uxtb	r1, r1
    68a0:	adds	r3, r2, #1
    68a2:	cmp	r6, r1
    68a4:	uxtb	r3, r3
    68a6:	beq.n	68b2 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb2>
    if (tmp == 0) {
    68a8:	cmp	r3, #9
    68aa:	bne.n	689a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9a>
    68ac:	strb	r2, [r4, #6]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    68ae:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    68b0:	pop	{r3, r4, r5, r6, r7, pc}
    68b2:	strb	r2, [r4, #6]
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    68b4:	ldrh	r1, [r0, #22]
    68b6:	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    68b8:	cbnz	r1, 68be <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xbe>
    68ba:	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    68bc:	str	r1, [r4, #16]
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    68be:	ldrh	r7, [r0, #14]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    68c0:	ldrh.w	r3, [r0, #17]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    68c4:	strh	r3, [r4, #8]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    68c6:	add	r7, r5
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    68c8:	lsls	r3, r3, #5

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    68ca:	add.w	r6, r7, r1, lsl #1
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    68ce:	addw	r3, r3, #511	; 0x1ff
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
    68d2:	ldrh.w	r1, [r0, #19]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    68d6:	str	r7, [r4, #24]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    68d8:	add.w	r3, r6, r3, asr #9

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    68dc:	str	r6, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    68de:	str	r3, [r4, #20]

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    68e0:	cbnz	r1, 68e4 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xe4>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    68e2:	ldr	r1, [r0, #32]
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    68e4:	subs	r5, r5, r3
    68e6:	add	r5, r1

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
    68e8:	lsr.w	r2, r5, r2
  m_lastCluster = clusterCount + 1;

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    68ec:	movw	r3, #4084	; 0xff4
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    68f0:	adds	r5, r2, #1
  }
#endif  // USE_MULTI_SECTOR_IO
#if MAINTAIN_FREE_CLUSTER_COUNT
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
    68f2:	mov.w	r1, #4294967295

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    68f6:	cmp	r2, r3
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    68f8:	str	r5, [r4, #28]
    68fa:	str	r1, [r4, #36]	; 0x24

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    68fc:	bls.n	6914 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x114>
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    68fe:	movw	r3, #65524	; 0xfff4
    6902:	cmp	r2, r3
    6904:	ittet	hi
    6906:	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    6908:	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
    690a:	movls	r3, #16
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
    690c:	movhi	r3, #32
    690e:	strb	r3, [r4, #7]
  }
  return true;
    6910:	movs	r0, #1
    6912:	pop	{r3, r4, r5, r6, r7, pc}

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    6914:	movs	r3, #12
    6916:	strb	r3, [r4, #7]
    6918:	b.n	682e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    691a:	nop

0000691c <lfnGetChar(DirLfn_t*, unsigned char)>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    691c:	cmp	r1, #4
    691e:	bls.n	693a <lfnGetChar(DirLfn_t*, unsigned char)+0x1e>
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    6920:	cmp	r1, #10
    6922:	bls.n	6932 <lfnGetChar(DirLfn_t*, unsigned char)+0x16>
    return getLe16(ldir->unicode2 + 2*i - 10);
  } else if (i < 13) {
    6924:	cmp	r1, #12
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    6926:	itte	ls
    6928:	addls.w	r1, r0, r1, lsl #1
    692c:	ldrhls	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2*i - 22);
  }
  return 0;
    692e:	movhi	r0, #0
}
    6930:	bx	lr
    6932:	add.w	r1, r0, r1, lsl #1
    6936:	ldrh	r0, [r1, #4]
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2*i - 10);
    6938:	bx	lr
    693a:	add.w	r1, r0, r1, lsl #1
    693e:	ldrh.w	r0, [r1, #1]
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
    6942:	bx	lr

00006944 <FatFile::lfnChecksum(unsigned char*)>:
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
    6944:	push	{r4}
    6946:	subs	r2, r0, #1
    6948:	add.w	r4, r0, #10
  uint8_t sum = 0;
    694c:	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    694e:	ldrb.w	r1, [r2, #1]!
    6952:	lsrs	r3, r0, #1
    6954:	orr.w	r0, r3, r0, lsl #7
    6958:	uxtab	r0, r1, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    695c:	cmp	r4, r2
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    695e:	uxtb	r0, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6960:	bne.n	694e <FatFile::lfnChecksum(unsigned char*)+0xa>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
    6962:	ldr.w	r4, [sp], #4
    6966:	bx	lr

00006968 <FatFile::openCluster(FatFile*)>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
    6968:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    696a:	ldr	r3, [r1, #12]
    696c:	cbz	r3, 698c <FatFile::openCluster(FatFile*)+0x24>
    696e:	mov	r5, r0
    6970:	mov	r4, r1
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
    6972:	movs	r2, #36	; 0x24
    6974:	movs	r1, #0
    6976:	bl	bd6c <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    697a:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    697c:	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
    697e:	strb	r3, [r5, #0]
  m_flags = FILE_FLAG_READ;
    6980:	strb	r0, [r5, #2]
  m_vol = file->m_vol;
    6982:	ldr	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    6984:	ldr	r3, [r4, #12]
    6986:	str	r3, [r5, #32]
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
    6988:	str	r2, [r5, #8]
  m_firstCluster = file->m_dirCluster;
  return true;
}
    698a:	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    698c:	ldr	r1, [r1, #8]
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
    698e:	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    6992:	b.w	5ca8 <FatFile::openRoot(FatVolume*)>
    6996:	nop

00006998 <FatFile::getName(char*, unsigned int)>:
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
    6998:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    699c:	sub	sp, #52	; 0x34
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    699e:	ldrb	r3, [r0, #0]
    69a0:	movs	r4, #0
    69a2:	strb.w	r4, [sp, #12]
    69a6:	strb.w	r4, [sp, #13]
    69aa:	strb.w	r4, [sp, #14]
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
    69ae:	mov	r9, r1
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    69b0:	cbz	r3, 69b8 <FatFile::getName(char*, unsigned int)+0x20>
    69b2:	cmp	r2, #12
    69b4:	mov	r5, r2
    69b6:	bhi.n	69c6 <FatFile::getName(char*, unsigned int)+0x2e>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
    69b8:	movs	r7, #0
    69ba:	strb.w	r7, [r9]
  return false;
}
    69be:	mov	r0, r7
    69c0:	add	sp, #52	; 0x34
    69c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    69c6:	ldrb	r3, [r0, #3]
    69c8:	mov	r8, r0
    69ca:	cmp	r3, #0
    69cc:	beq.n	6a86 <FatFile::getName(char*, unsigned int)+0xee>
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
    69ce:	add	r0, sp, #12
    69d0:	mov	r1, r8
    69d2:	bl	6968 <FatFile::openCluster(FatFile*)>
    69d6:	cmp	r0, #0
    69d8:	beq.n	69b8 <FatFile::getName(char*, unsigned int)+0x20>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    69da:	ldrb.w	r3, [r8, #3]
    69de:	cmp	r3, #0
    69e0:	beq.n	69b8 <FatFile::getName(char*, unsigned int)+0x20>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    69e2:	str	r4, [sp, #4]
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    69e4:	movs	r6, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    69e6:	ldrh.w	r1, [r8, #4]
    69ea:	subs	r1, r1, r6
    69ec:	lsls	r1, r1, #5
    69ee:	add	r0, sp, #12
    69f0:	bl	60ec <FatFile::seekSet(unsigned long)>
    69f4:	mov	r7, r0
    69f6:	cmp	r0, #0
    69f8:	beq.n	69b8 <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    69fa:	movs	r1, #0
    69fc:	add	r0, sp, #12
    69fe:	bl	5e78 <FatFile::readDirCache(bool)>
    if (!ldir) {
    6a02:	mov	sl, r0
    6a04:	cmp	r0, #0
    6a06:	beq.n	69b8 <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME) {
    6a08:	ldrb	r3, [r0, #11]
    6a0a:	cmp	r3, #15
    6a0c:	bne.n	69b8 <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (order != (ldir->order & 0X1F)) {
    6a0e:	ldrb	r3, [r0, #0]
    6a10:	and.w	r3, r3, #31
    6a14:	cmp	r6, r3
    6a16:	bne.n	69b8 <FatFile::getName(char*, unsigned int)+0x20>
  return 0;
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
    6a18:	subs	r3, r6, #1
    6a1a:	add.w	r2, r3, r3, lsl #1
    6a1e:	add.w	r2, r3, r2, lsl #2
    6a22:	mov	r3, r2
    6a24:	add.w	r4, r9, r2
    6a28:	add.w	fp, r2, #13
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    6a2c:	subs	r1, r3, r2
    6a2e:	uxtb	r1, r1
    6a30:	mov	r0, sl
    6a32:	bl	691c <lfnGetChar(DirLfn_t*, unsigned char)>
    if (c == 0 || k >= n) {
    6a36:	cbz	r0, 6a94 <FatFile::getName(char*, unsigned int)+0xfc>
    6a38:	cmp	r5, r3
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    6a3a:	add.w	r3, r3, #1
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
    6a3e:	bls.n	6a64 <FatFile::getName(char*, unsigned int)+0xcc>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    6a40:	cmp	r0, #126	; 0x7e
    6a42:	ite	ls
    6a44:	uxtbls	r0, r0
    6a46:	movhi	r0, #63	; 0x3f
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    6a48:	cmp	fp, r3
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    6a4a:	strb.w	r0, [r4], #1
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    6a4e:	bne.n	6a2c <FatFile::getName(char*, unsigned int)+0x94>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
  }
  // Terminate with zero byte if name fits.
  if (k < n && (ldir->order & FAT_ORDER_LAST_LONG_ENTRY)) {
    6a50:	cmp	r5, fp
    6a52:	bls.n	6a64 <FatFile::getName(char*, unsigned int)+0xcc>
    6a54:	ldrb.w	r3, [sl]
    6a58:	lsls	r2, r3, #25
    name[k] = 0;
    6a5a:	itt	mi
    6a5c:	ldrbmi.w	r3, [sp, #4]
    6a60:	strbmi.w	r3, [r9, fp]
  }
  // Truncate if name is too long.
  name[n - 1] = 0;
    6a64:	add.w	r3, r9, r5
    6a68:	ldrb.w	r2, [sp, #4]
    6a6c:	strb.w	r2, [r3, #-1]
    }
    if (!lfnGetName(ldir, name, size)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    6a70:	ldrb.w	r3, [sl]
    6a74:	lsls	r3, r3, #25
    6a76:	bmi.n	69be <FatFile::getName(char*, unsigned int)+0x26>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    6a78:	adds	r6, #1
    6a7a:	ldrb.w	r3, [r8, #3]
    6a7e:	uxtb	r6, r6
    6a80:	cmp	r3, r6
    6a82:	bcs.n	69e6 <FatFile::getName(char*, unsigned int)+0x4e>
    6a84:	b.n	69b8 <FatFile::getName(char*, unsigned int)+0x20>
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    return getSFN(name);
    6a86:	bl	72a4 <FatFile::getSFN(char*)>
    6a8a:	mov	r7, r0
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
  return false;
}
    6a8c:	mov	r0, r7
    6a8e:	add	sp, #52	; 0x34
    6a90:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
    6a94:	mov	fp, r3
    6a96:	b.n	6a50 <FatFile::getName(char*, unsigned int)+0xb8>

00006a98 <FatFile::parsePathName(char const*, fname_t*, char const**)>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    6a98:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
    6a9c:	ldrb	r3, [r0, #0]
    6a9e:	cmp	r3, #32
    6aa0:	bne.n	6aaa <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12>
    6aa2:	ldrb.w	r3, [r0, #1]!
    6aa6:	cmp	r3, #32
    6aa8:	beq.n	6aa2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
    6aaa:	str	r0, [r1, #8]

  for (len = 0; ; len++) {
    c = path[len];
    6aac:	ldrb	r3, [r0, #0]
    if (c == 0 || isDirSeparator(c)) {
    6aae:	cmp	r3, #0
    6ab0:	beq.w	6cc2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x22a>
    6ab4:	cmp	r3, #47	; 0x2f
    6ab6:	beq.n	6b18 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x80>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    6ab8:	cmp	r3, #92	; 0x5c
    6aba:	beq.n	6b02 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    6abc:	sub.w	r4, r3, #34	; 0x22
    6ac0:	uxtb	r4, r4
    6ac2:	cmp	r4, #29
    6ac4:	bls.n	6b08 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x70>
    6ac6:	ldr.w	lr, [pc, #536]	; 6ce0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x248>
    6aca:	adds	r6, r0, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    6acc:	movs	r4, #0
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    6ace:	cmp	r3, #124	; 0x7c
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    6ad0:	sub.w	r5, r3, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    6ad4:	mov	r7, r6
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    6ad6:	beq.n	6b02 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    6ad8:	cmp	r5, #94	; 0x5e
    6ada:	bhi.n	6b02 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    6adc:	ldrb.w	r3, [r6], #1
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    6ae0:	sub.w	r5, r3, #34	; 0x22
    6ae4:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    6ae6:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    6ae8:	cmp	r3, #0
    6aea:	beq.w	6c94 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1fc>
    6aee:	cmp	r3, #47	; 0x2f
    6af0:	beq.n	6b1a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x82>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    6af2:	cmp	r3, #92	; 0x5c
    6af4:	lsr.w	r7, lr, r5
    6af8:	beq.n	6b02 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    6afa:	cmp	r5, #29
    6afc:	bhi.n	6ace <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    6afe:	lsls	r7, r7, #31
    6b00:	bpl.n	6ace <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    6b02:	movs	r0, #0
    6b04:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    6b08:	ldr	r5, [pc, #468]	; (6ce0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x248>)
    6b0a:	lsr.w	r4, r5, r4
    6b0e:	lsls	r4, r4, #31
    6b10:	bpl.n	6ac6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x2e>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    6b12:	movs	r0, #0
    6b14:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    6b18:	movs	r4, #0
    6b1a:	adds	r7, r0, r4
    6b1c:	mov	r6, r7
    6b1e:	mov	r5, r4
    6b20:	movs	r3, #47	; 0x2f
    6b22:	b.n	6b2a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x92>
    6b24:	ldrb.w	r3, [r6, #1]!
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    6b28:	adds	r5, #1
    6b2a:	cmp	r3, #32
    6b2c:	beq.n	6b24 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8c>
    6b2e:	cmp	r3, #47	; 0x2f
    6b30:	beq.n	6b24 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8c>
  *ptr = &path[end];
    6b32:	add	r5, r0
    6b34:	str	r5, [r2, #0]

  // Back over spaces and dots.
  while (len) {
    6b36:	cbz	r4, 6b4c <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb4>
    6b38:	mov	r2, r7
    c = path[len - 1];
    6b3a:	ldrb.w	r3, [r2, #-1]!
    if (c != '.' && c != ' ') {
    6b3e:	cmp	r3, #46	; 0x2e
    6b40:	beq.n	6b48 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb0>
    6b42:	cmp	r3, #32
    6b44:	bne.w	6c9a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x202>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    6b48:	subs	r4, #1
    6b4a:	bne.n	6b3a <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa2>
    6b4c:	mov.w	r5, #4294967295
    6b50:	mov	r3, r4
  // Max length of LFN is 255.
  if (len > 255) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
    6b52:	str	r3, [r1, #4]
    6b54:	add.w	r6, r1, #23
    6b58:	add.w	r3, r1, #12
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    6b5c:	movs	r2, #32
    6b5e:	strb.w	r2, [r3, #1]!
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    6b62:	cmp	r3, r6
    6b64:	bne.n	6b5e <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc6>
    6b66:	subs	r6, r0, #1
    6b68:	movs	r2, #0
    6b6a:	b.n	6b6e <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd6>
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    6b6c:	adds	r2, #1
    6b6e:	ldrb.w	r3, [r6, #1]!
    6b72:	cmp	r3, #46	; 0x2e
    6b74:	beq.n	6b6c <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd4>
    6b76:	cmp	r3, #32
    6b78:	beq.n	6b6c <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd4>
  // Not 8.3 if leading dot or space.
  is83 = !si;
    6b7a:	clz	ip, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    6b7e:	adds	r6, r5, #1
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
    6b80:	mov.w	ip, ip, lsr #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    6b84:	beq.n	6ba0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    6b86:	ldrb	r7, [r0, r5]
    6b88:	cmp	r7, #46	; 0x2e
    6b8a:	add.w	r6, r0, r5
    6b8e:	bne.n	6b9a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x102>
    6b90:	b.n	6ba0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    6b92:	ldrb.w	r7, [r6, #-1]!
    6b96:	cmp	r7, #46	; 0x2e
    6b98:	beq.n	6ba0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    6b9a:	adds.w	r5, r5, #4294967295
    6b9e:	bcs.n	6b92 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xfa>
  for (; si < len; si++) {
    6ba0:	cmp	r2, r4
    6ba2:	mov.w	r9, #0
    6ba6:	bge.w	6ccc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x234>
    6baa:	mov	r6, r9
    6bac:	mov	sl, r9
    6bae:	movs	r7, #7
    6bb0:	mov.w	r8, #8
    6bb4:	b.n	6c02 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16a>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    6bb6:	cmp	r3, #46	; 0x2e
    6bb8:	beq.n	6c4a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b2>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
    6bba:	cmp	r3, #34	; 0x22
    6bbc:	beq.n	6bd6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    6bbe:	cmp	r3, #124	; 0x7c
    6bc0:	beq.n	6bd6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    6bc2:	sub.w	lr, r3, #42	; 0x2a
    6bc6:	cmp.w	lr, #5
    6bca:	bls.n	6c5e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1c6>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
    6bcc:	sub.w	lr, r3, #58	; 0x3a
    6bd0:	cmp.w	lr, #5
    6bd4:	bhi.n	6c88 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1f0>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    6bd6:	cmp	r5, r2
    6bd8:	beq.n	6c4e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b6>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    6bda:	cmp	r7, r6
    6bdc:	bcc.n	6c32 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19a>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
    6bde:	mov.w	ip, #0
      c = '_';
    6be2:	movs	r3, #95	; 0x5f
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    6be4:	add.w	lr, r6, #1
    6be8:	add.w	fp, r1, r6
    6bec:	uxtb.w	r6, lr
      if (i < 7) {
    6bf0:	cmp	r6, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    6bf2:	strb.w	r3, [fp, #13]
      if (i < 7) {
    6bf6:	bhi.n	6bfa <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>
        fname->seqPos = i;
    6bf8:	strb	r6, [r1, #12]
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    6bfa:	adds	r2, #1
    6bfc:	cmp	r2, r4
    6bfe:	bge.n	6c10 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x178>
    6c00:	ldrb	r3, [r0, r2]
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    6c02:	cmp	r3, #32
    6c04:	bne.n	6bb6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x11e>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    6c06:	adds	r2, #1
    6c08:	cmp	r2, r4
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
    6c0a:	mov.w	ip, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    6c0e:	blt.n	6c00 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x168>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    6c10:	ldrb	r3, [r1, #13]
    6c12:	cmp	r3, #32
    6c14:	beq.w	6b02 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (is83) {
    6c18:	cmp.w	ip, #0
    6c1c:	beq.n	6cae <FatFile::parsePathName(char const*, fname_t*, char const**)+0x216>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    6c1e:	tst.w	sl, r9
    6c22:	it	ne
    6c24:	movne.w	r9, #2
    6c28:	strb.w	r9, [r1]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    6c2c:	movs	r0, #1
    6c2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    6c32:	cmp	r7, #10
    6c34:	beq.n	6ca6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
    6c36:	cmp	r5, r2
    6c38:	blt.n	6ca6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
    6c3a:	mov	r2, r5
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    6c3c:	movs	r7, #10
      i = 8;    // Place for extension.
    6c3e:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    6c40:	mov.w	r8, #16
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
    6c44:	mov.w	ip, #0
    6c48:	b.n	6bfa <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    6c4a:	cmp	r5, r2
    6c4c:	bne.n	6c06 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16e>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    6c4e:	cmp	r7, #10
    6c50:	beq.n	6ca6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
    6c52:	mov	r2, r5
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    6c54:	movs	r7, #10
      i = 8;    // Place for extension.
    6c56:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    6c58:	mov.w	r8, #16
    6c5c:	b.n	6bfa <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    6c5e:	cmp	r3, #45	; 0x2d
    6c60:	bne.n	6bd6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    6c62:	sub.w	lr, r3, #33	; 0x21
    6c66:	cmp.w	lr, #93	; 0x5d
    6c6a:	bhi.n	6bd6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    6c6c:	cmp	r5, r2
    6c6e:	beq.n	6c4e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b6>
    6c70:	cmp	r7, r6
    6c72:	bcc.n	6c32 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19a>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
    6c74:	sub.w	lr, r3, #97	; 0x61
    6c78:	cmp.w	lr, #25
    6c7c:	bhi.n	6cd0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x238>
        c += 'A' - 'a';
    6c7e:	subs	r3, #32
    6c80:	uxtb	r3, r3
        lc |= bit;
    6c82:	orr.w	r9, r8, r9
    6c86:	b.n	6be4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14c>
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
    6c88:	sub.w	lr, r3, #91	; 0x5b
    6c8c:	cmp.w	lr, #2
    6c90:	bls.n	6bd6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    6c92:	b.n	6c62 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1ca>
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    6c94:	str	r7, [r2, #0]
    6c96:	adds	r7, r0, r4
    6c98:	b.n	6b38 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa0>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
    6c9a:	cmp	r4, #255	; 0xff
    6c9c:	bgt.w	6b02 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    6ca0:	subs	r5, r4, #1
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    c = path[len - 1];
    6ca2:	mov	r3, r4
    6ca4:	b.n	6b52 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xba>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    6ca6:	ldrb	r3, [r1, #13]
    6ca8:	cmp	r3, #32
    6caa:	beq.w	6b02 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    6cae:	ldrb	r3, [r1, #12]
    6cb0:	add	r3, r1
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    6cb2:	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    6cb4:	movs	r4, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    6cb6:	movs	r2, #49	; 0x31
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    6cb8:	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
    6cba:	strb	r4, [r3, #13]
    fname->sfn[fname->seqPos + 1] = '1';
    6cbc:	strb	r2, [r3, #14]
    6cbe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    6cc2:	str	r0, [r2, #0]
    6cc4:	mov	r4, r3
    6cc6:	mov.w	r5, #4294967295
    6cca:	b.n	6b52 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xba>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    6ccc:	mov	sl, r9
    6cce:	b.n	6c10 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x178>
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
    6cd0:	sub.w	lr, r3, #65	; 0x41
    6cd4:	cmp.w	lr, #25
        uc |= bit;
    6cd8:	it	ls
    6cda:	orrls.w	sl, r8, sl
    6cde:	b.n	6be4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14c>
    6ce0:	.word	0x35000101

00006ce4 <FatFile::remove()>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    6ce4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    6ce8:	ldrb	r2, [r0, #2]

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    6cea:	sub	sp, #40	; 0x28
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    6cec:	movs	r3, #0
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    6cee:	lsls	r2, r2, #30
    6cf0:	strb.w	r3, [sp, #4]
    6cf4:	strb.w	r3, [sp, #5]
    6cf8:	strb.w	r3, [sp, #6]
    6cfc:	bpl.n	6d44 <FatFile::remove()+0x60>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    6cfe:	ldr	r1, [r0, #32]
    6d00:	mov	r5, r0
    6d02:	cbnz	r1, 6d4e <FatFile::remove()+0x6a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    6d04:	movs	r1, #1
    6d06:	mov	r0, r5
    6d08:	bl	58f0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    6d0c:	cbz	r0, 6d44 <FatFile::remove()+0x60>
    6d0e:	subs	r1, r0, #1
    6d10:	add.w	r7, r0, #10
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    6d14:	movs	r4, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6d16:	lsrs	r2, r4, #1
    6d18:	ldrb.w	r6, [r1, #1]!
    6d1c:	orr.w	r3, r2, r4, lsl #7
    6d20:	uxtab	r3, r6, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6d24:	cmp	r7, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6d26:	uxtb	r4, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6d28:	bne.n	6d16 <FatFile::remove()+0x32>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    6d2a:	mov.w	r8, #229	; 0xe5
    6d2e:	strb.w	r8, [r0]
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    6d32:	ldr	r6, [r5, #8]

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    6d34:	movs	r3, #0
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    6d36:	add.w	r0, r6, #40	; 0x28
    6d3a:	strb	r3, [r5, #0]
  m_flags = 0;
    6d3c:	strb	r3, [r5, #2]
    6d3e:	bl	6578 <FatCache::sync()>
    6d42:	cbnz	r0, 6d5a <FatFile::remove()+0x76>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    6d44:	movs	r6, #0
}
    6d46:	mov	r0, r6
    6d48:	add	sp, #40	; 0x28
    6d4a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    6d4e:	ldr	r0, [r0, #8]
    6d50:	bl	66f8 <FatPartition::freeChain(unsigned long)>
    6d54:	cmp	r0, #0
    6d56:	bne.n	6d04 <FatFile::remove()+0x20>
    6d58:	b.n	6d44 <FatFile::remove()+0x60>
    6d5a:	add.w	r0, r6, #564	; 0x234
    6d5e:	bl	6578 <FatCache::sync()>
    6d62:	cmp	r0, #0
    6d64:	beq.n	6d44 <FatFile::remove()+0x60>
    6d66:	ldr	r0, [r6, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    6d68:	ldr	r3, [r0, #0]
    6d6a:	ldr	r3, [r3, #20]
    6d6c:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    6d6e:	mov	r6, r0
    6d70:	cmp	r0, #0
    6d72:	beq.n	6d44 <FatFile::remove()+0x60>
  // Write entry to device.
  if (!m_vol->cacheSync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    6d74:	ldrb	r3, [r5, #3]
    6d76:	cmp	r3, #0
    6d78:	beq.n	6d46 <FatFile::remove()+0x62>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    6d7a:	add	r0, sp, #4
    6d7c:	mov	r1, r5
    6d7e:	bl	6968 <FatFile::openCluster(FatFile*)>
    6d82:	cmp	r0, #0
    6d84:	beq.n	6d44 <FatFile::remove()+0x60>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    6d86:	ldrb	r3, [r5, #3]
    6d88:	cmp	r3, #0
    6d8a:	beq.n	6d44 <FatFile::remove()+0x60>
    6d8c:	movs	r7, #1
    6d8e:	b.n	6dd0 <FatFile::remove()+0xec>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    6d90:	add	r0, sp, #4
    6d92:	bl	5e78 <FatFile::readDirCache(bool)>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    6d96:	adds	r3, r7, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
    6d98:	cmp	r0, #0
    6d9a:	beq.n	6d44 <FatFile::remove()+0x60>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    6d9c:	ldrb	r2, [r0, #11]
    6d9e:	cmp	r2, #15
    6da0:	bne.n	6d44 <FatFile::remove()+0x60>
        order != (ldir->order & 0X1F) ||
    6da2:	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    6da4:	and.w	r1, r2, #31
    6da8:	cmp	r7, r1
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    6daa:	uxtb	r7, r3
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    6dac:	bne.n	6d44 <FatFile::remove()+0x60>
        order != (ldir->order & 0X1F) ||
    6dae:	ldrb	r3, [r0, #13]
    6db0:	cmp	r3, r4
    6db2:	bne.n	6d44 <FatFile::remove()+0x60>
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    6db4:	strb.w	r8, [r0]
    m_vol->cacheDirty();
    6db8:	ldr	r1, [r5, #8]
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    6dba:	ldrb.w	r3, [r1, #40]	; 0x28
    6dbe:	orr.w	r3, r3, #1
    6dc2:	strb.w	r3, [r1, #40]	; 0x28
    if (last) {
    6dc6:	lsls	r3, r2, #25
    6dc8:	bmi.n	6de4 <FatFile::remove()+0x100>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    6dca:	ldrb	r3, [r5, #3]
    6dcc:	cmp	r3, r7
    6dce:	bcc.n	6d44 <FatFile::remove()+0x60>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    6dd0:	ldrh	r1, [r5, #4]
    6dd2:	subs	r1, r1, r7
    6dd4:	lsls	r1, r1, #5
    6dd6:	add	r0, sp, #4
    6dd8:	bl	60ec <FatFile::seekSet(unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    6ddc:	movs	r1, #0
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    6dde:	cmp	r0, #0
    6de0:	bne.n	6d90 <FatFile::remove()+0xac>
    6de2:	b.n	6d44 <FatFile::remove()+0x60>
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    m_vol->cacheDirty();
    if (last) {
      if (!m_vol->cacheSync()) {
    6de4:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    6de6:	add.w	r0, r4, #40	; 0x28
    6dea:	bl	6578 <FatCache::sync()>
    6dee:	cmp	r0, #0
    6df0:	beq.n	6d44 <FatFile::remove()+0x60>
    6df2:	add.w	r0, r4, #564	; 0x234
    6df6:	bl	6578 <FatCache::sync()>
    6dfa:	cmp	r0, #0
    6dfc:	beq.n	6d44 <FatFile::remove()+0x60>
    6dfe:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    6e00:	ldr	r3, [r0, #0]
    6e02:	ldr	r3, [r3, #20]
    6e04:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    6e06:	cmp	r0, #0
    6e08:	beq.n	6d44 <FatFile::remove()+0x60>
    6e0a:	b.n	6d46 <FatFile::remove()+0x62>

00006e0c <FatFile::lfnUniqueSfn(fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    6e0c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    6e10:	ldrb	r7, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    6e12:	mov	r6, r1
    6e14:	mov	r4, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    6e16:	add.w	r5, r1, #13
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    6e1a:	mov.w	r8, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    6e1e:	mov.w	r9, #126	; 0x7e
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
    6e22:	ldr	r0, [r6, #4]
    6e24:	ldr	r1, [r6, #8]
    6e26:	add.w	r3, r8, r0
    6e2a:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    6e2c:	cbz	r0, 6e40 <FatFile::lfnUniqueSfn(fname_t*)+0x34>
    6e2e:	add	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    6e30:	ldrb.w	r2, [r1], #1
    6e34:	add.w	r3, r3, r3, lsl #5
    6e38:	eors	r3, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    6e3a:	cmp	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    6e3c:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    6e3e:	bne.n	6e30 <FatFile::lfnUniqueSfn(fname_t*)+0x24>
    6e40:	cmp	r7, #3
    6e42:	it	cs
    6e44:	movcs	r7, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    6e46:	adds	r2, r7, #4
    6e48:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
    6e4a:	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6e4e:	adds	r0, r6, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    6e50:	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6e52:	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    6e54:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6e56:	ite	ls
    6e58:	addls	r1, #48	; 0x30
    6e5a:	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    6e5c:	cmp	r7, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
    6e5e:	mov.w	r3, r3, lsr #4
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6e62:	strb	r1, [r0, #13]
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    6e64:	bcc.n	6e4a <FatFile::lfnUniqueSfn(fname_t*)+0x3e>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    6e66:	adds	r3, r6, r7
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    6e68:	movs	r1, #0
    6e6a:	strb.w	r9, [r3, #13]
    6e6e:	mov	r0, r4
    6e70:	bl	60ec <FatFile::seekSet(unsigned long)>
    rewind();
    while (1) {
      dir = readDirCache(true);
    6e74:	movs	r1, #1
    6e76:	mov	r0, r4
    6e78:	bl	5e78 <FatFile::readDirCache(bool)>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    6e7c:	movs	r2, #11
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    6e7e:	mov	r3, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    6e80:	mov	r1, r0
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    6e82:	cbz	r0, 6eb0 <FatFile::lfnUniqueSfn(fname_t*)+0xa4>
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    6e84:	ldrb.w	lr, [r3]
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    6e88:	mov	r0, r5
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    6e8a:	cmp.w	lr, #0
    6e8e:	beq.n	6ebc <FatFile::lfnUniqueSfn(fname_t*)+0xb0>
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    6e90:	ldrb	r3, [r3, #11]
    6e92:	lsls	r3, r3, #28
    6e94:	bmi.n	6e74 <FatFile::lfnUniqueSfn(fname_t*)+0x68>
    6e96:	bl	bc40 <memcmp>
    6e9a:	cmp	r0, #0
    6e9c:	bne.n	6e74 <FatFile::lfnUniqueSfn(fname_t*)+0x68>
    6e9e:	add.w	r8, r8, #1
    6ea2:	uxth.w	r8, r8
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
    6ea6:	cmp.w	r8, #100	; 0x64
    6eaa:	bne.n	6e22 <FatFile::lfnUniqueSfn(fname_t*)+0x16>
fail:
  return false;

done:
  return true;
}
    6eac:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
        if (!getError()) {
    6eb0:	ldrb	r0, [r4, #1]
    6eb2:	clz	r0, r0
    6eb6:	lsrs	r0, r0, #5
    6eb8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

fail:
  return false;

done:
  return true;
    6ebc:	movs	r0, #1
    6ebe:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6ec2:	nop

00006ec4 <FatFile::open(FatFile*, fname_t*, int)>:
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    6ec4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    6ec8:	ldrb	r4, [r1, #0]
    6eca:	tst.w	r4, #112	; 0x70
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    6ece:	sub	sp, #52	; 0x34
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    6ed0:	beq.n	6ed6 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    6ed2:	ldrb	r4, [r0, #0]
    6ed4:	cbz	r4, 6ede <FatFile::open(FatFile*, fname_t*, int)+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
    6ed6:	movs	r0, #0
}
    6ed8:	add	sp, #52	; 0x34
    6eda:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    6ede:	ldrb	r4, [r2, #0]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;
    6ee0:	ldr.w	sl, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    6ee4:	lsls	r4, r4, #30
    6ee6:	bne.n	6f6e <FatFile::open(FatFile*, fname_t*, int)+0xaa>
    6ee8:	mov.w	r8, #1
    6eec:	mov	r6, r1
    6eee:	mov	fp, r2
    6ef0:	str	r0, [sp, #36]	; 0x24
    6ef2:	movs	r1, #0
    6ef4:	mov	r0, r6
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
  uint8_t ms10;
  uint16_t freeIndex = 0;
    6ef6:	mov	r7, r1
    6ef8:	str	r3, [sp, #28]
    6efa:	bl	60ec <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    6efe:	add.w	r3, fp, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
    6f02:	str	r7, [sp, #24]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
    6f04:	str	r7, [sp, #12]
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
    6f06:	mov	r4, r7
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
    6f08:	mov	r9, r7
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
    6f0a:	str	r7, [sp, #20]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    6f0c:	str	r3, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    6f0e:	movs	r1, #1
    6f10:	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    6f12:	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache(true);
    6f14:	bl	5e78 <FatFile::readDirCache(bool)>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    6f18:	ubfx	r5, r5, #5, #16
    dir = dirFile->readDirCache(true);
    if (!dir) {
    6f1c:	mov	r3, r0
    6f1e:	cmp	r0, #0
    6f20:	beq.w	703c <FatFile::open(FatFile*, fname_t*, int)+0x178>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    6f24:	ldrb	r2, [r0, #0]
    6f26:	cmp	r2, #229	; 0xe5
    6f28:	beq.n	6fa0 <FatFile::open(FatFile*, fname_t*, int)+0xdc>
    6f2a:	cmp	r2, #0
    6f2c:	beq.n	6fa0 <FatFile::open(FatFile*, fname_t*, int)+0xdc>
      if (dir->name[0] == FAT_NAME_FREE) {
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
    6f2e:	cmp	r4, r8
    6f30:	it	cc
    6f32:	movcc	r4, #0
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    6f34:	cmp	r2, #46	; 0x2e
    6f36:	beq.n	6f9a <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    6f38:	ldrb	r1, [r3, #11]
      lfnOrd = 0;
    } else if (isLongName(dir)) {
    6f3a:	cmp	r1, #15
    6f3c:	beq.n	6fbc <FatFile::open(FatFile*, fname_t*, int)+0xf8>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
    6f3e:	and.w	r1, r1, #8
    6f42:	and.w	r2, r1, #255	; 0xff
    6f46:	cbnz	r1, 6f9a <FatFile::open(FatFile*, fname_t*, int)+0xd6>
      if (lfnOrd) {
    6f48:	cmp.w	r9, #0
    6f4c:	bne.w	7214 <FatFile::open(FatFile*, fname_t*, int)+0x350>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    6f50:	mov	r0, r3
    6f52:	movs	r2, #11
    6f54:	ldr	r1, [sp, #16]
    6f56:	bl	bc40 <memcmp>
    6f5a:	cmp	r0, #0
    6f5c:	bne.n	6f0e <FatFile::open(FatFile*, fname_t*, int)+0x4a>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    6f5e:	ldrb.w	r3, [fp]
    6f62:	lsls	r0, r3, #31
    6f64:	bpl.w	723c <FatFile::open(FatFile*, fname_t*, int)+0x378>
          goto found;
        }
        fnameFound = true;
    6f68:	movs	r3, #1
    6f6a:	str	r3, [sp, #20]
    6f6c:	b.n	6f0e <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    6f6e:	ldr	r5, [pc, #724]	; (7244 <FatFile::open(FatFile*, fname_t*, int)+0x380>)
    6f70:	add.w	r4, sl, #12
    6f74:	umull	r4, r8, r5, r4
    6f78:	mov.w	r8, r8, lsr #2
    6f7c:	add.w	r8, r8, #1
    6f80:	uxtb.w	r8, r8
    6f84:	b.n	6eec <FatFile::open(FatFile*, fname_t*, int)+0x28>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    6f86:	ldr	r1, [sp, #12]
    6f88:	subs	r1, #1
    6f8a:	uxtb	r1, r1
    6f8c:	cmp	r2, r1
    6f8e:	str	r1, [sp, #12]
    6f90:	bne.n	6f9a <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    6f92:	ldrb	r2, [r3, #13]
    6f94:	ldr	r1, [sp, #24]
    6f96:	cmp	r1, r2
    6f98:	beq.n	6fd2 <FatFile::open(FatFile*, fname_t*, int)+0x10e>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    6f9a:	mov.w	r9, #0
    6f9e:	b.n	6f0e <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    6fa0:	cmp	r4, #0
    6fa2:	it	eq
    6fa4:	moveq	r7, r5
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
    6fa6:	cmp	r4, r8
        freeFound++;
    6fa8:	itt	cc
    6faa:	addcc	r4, #1
    6fac:	uxtbcc	r4, r4
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    6fae:	cmp	r2, #0
    6fb0:	beq.n	7044 <FatFile::open(FatFile*, fname_t*, int)+0x180>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    6fb2:	cmp	r2, #229	; 0xe5
    6fb4:	bne.n	6f34 <FatFile::open(FatFile*, fname_t*, int)+0x70>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    6fb6:	mov.w	r9, #0
    6fba:	b.n	6f0e <FatFile::open(FatFile*, fname_t*, int)+0x4a>
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
      lfnOrd = 0;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
    6fbc:	cmp.w	r9, #0
    6fc0:	bne.n	6f86 <FatFile::open(FatFile*, fname_t*, int)+0xc2>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
    6fc2:	lsls	r5, r2, #25
    6fc4:	bpl.n	6f0e <FatFile::open(FatFile*, fname_t*, int)+0x4a>
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    6fc6:	and.w	r9, r2, #31
        checksum = ldir->checksum;
    6fca:	ldrb	r2, [r3, #13]
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    6fcc:	str.w	r9, [sp, #12]
        checksum = ldir->checksum;
    6fd0:	str	r2, [sp, #24]
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    6fd2:	ldr	r2, [sp, #12]
    6fd4:	subs	r2, #1
    6fd6:	add.w	r5, r2, r2, lsl #1
    6fda:	add.w	r5, r2, r5, lsl #2
      if (k >= len) {
    6fde:	cmp	sl, r5
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    6fe0:	mov	r2, r5
      if (k >= len) {
    6fe2:	bls.n	6f9a <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    6fe4:	add.w	r1, r5, #13
    6fe8:	str.w	r9, [sp, #32]
    6fec:	mov	r9, r1
    6fee:	b.n	7018 <FatFile::open(FatFile*, fname_t*, int)+0x154>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    6ff0:	ldr.w	r0, [fp, #8]
    6ff4:	ldrb	r2, [r0, r2]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    6ff6:	cmp.w	ip, #25
    6ffa:	it	ls
    6ffc:	addls	r1, #32
    6ffe:	sub.w	r0, r2, #65	; 0x41
    7002:	it	ls
    7004:	uxtbls	r1, r1
    7006:	cmp	r0, #25
    7008:	itt	ls
    700a:	addls	r2, #32
    700c:	uxtbls	r2, r2
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    700e:	cmp	r2, r1
    7010:	bne.n	6f9a <FatFile::open(FatFile*, fname_t*, int)+0xd6>
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
    7012:	cmp	lr, r9
    7014:	beq.n	709c <FatFile::open(FatFile*, fname_t*, int)+0x1d8>
    7016:	mov	r2, lr
        uint16_t u = lfnGetChar(ldir, i);
    7018:	subs	r1, r2, r5
    701a:	uxtb	r1, r1
    701c:	mov	r0, r3
    701e:	bl	691c <lfnGetChar(DirLfn_t*, unsigned char)>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    7022:	uxtb	r1, r0
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    7024:	cmp	sl, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    7026:	sub.w	ip, r1, #65	; 0x41
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    702a:	add.w	lr, r2, #1
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    702e:	beq.w	7206 <FatFile::open(FatFile*, fname_t*, int)+0x342>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    7032:	cmp	r0, #255	; 0xff
    7034:	bls.n	6ff0 <FatFile::open(FatFile*, fname_t*, int)+0x12c>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    7036:	mov.w	r9, #0
    703a:	b.n	6f0e <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
    703c:	ldrb	r3, [r6, #1]
    703e:	cmp	r3, #0
    7040:	bne.w	6ed6 <FatFile::open(FatFile*, fname_t*, int)+0x12>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    7044:	ldr	r2, [sp, #28]
    7046:	mov	r3, r2
    7048:	lsls	r2, r3, #22
    704a:	bpl.w	6ed6 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    704e:	and.w	r3, r3, #3
    7052:	subs	r3, #1
    7054:	cmp	r3, #1
    7056:	bhi.w	6ed6 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    705a:	cmp	r4, #0
    705c:	it	eq
    705e:	moveq	r7, r5
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    7060:	cmp	r4, r8
    7062:	bcc.n	706c <FatFile::open(FatFile*, fname_t*, int)+0x1a8>
    7064:	b.n	70a2 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    7066:	uxtb	r4, r3
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    7068:	cmp	r8, r4
    706a:	bls.n	70a2 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
    dir = dirFile->readDirCache();
    706c:	movs	r1, #0
    706e:	mov	r0, r6
    7070:	bl	5e78 <FatFile::readDirCache(bool)>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    7074:	adds	r3, r4, #1
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
    7076:	cmp	r0, #0
    7078:	bne.n	7066 <FatFile::open(FatFile*, fname_t*, int)+0x1a2>
      if (dirFile->getError()) {
    707a:	ldrb	r3, [r6, #1]
    707c:	cbz	r3, 7088 <FatFile::open(FatFile*, fname_t*, int)+0x1c4>
    707e:	b.n	6ed6 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    7080:	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
    7082:	ldrb	r3, [r3, #4]
    7084:	cmp	r3, #1
    7086:	bhi.n	70a2 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    7088:	cmp	r8, r4
    708a:	bls.n	70a2 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    708c:	mov	r0, r6
    708e:	bl	585c <FatFile::addDirCluster()>
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    7092:	adds	r4, #16
    7094:	uxtb	r4, r4
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    7096:	cmp	r0, #0
    7098:	bne.n	7080 <FatFile::open(FatFile*, fname_t*, int)+0x1bc>
    709a:	b.n	6ed6 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    709c:	ldr.w	r9, [sp, #32]
    70a0:	b.n	6f0e <FatFile::open(FatFile*, fname_t*, int)+0x4a>
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    70a2:	ldr	r3, [sp, #20]
    70a4:	cbz	r3, 70b4 <FatFile::open(FatFile*, fname_t*, int)+0x1f0>
    if (!dirFile->lfnUniqueSfn(fname)) {
    70a6:	mov	r1, fp
    70a8:	mov	r0, r6
    70aa:	bl	6e0c <FatFile::lfnUniqueSfn(fname_t*)>
    70ae:	cmp	r0, #0
    70b0:	beq.w	6ed6 <FatFile::open(FatFile*, fname_t*, int)+0x12>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    70b4:	lsls	r1, r7, #5
    70b6:	mov	r0, r6
    70b8:	bl	60ec <FatFile::seekSet(unsigned long)>
    70bc:	cmp	r0, #0
    70be:	beq.w	6ed6 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
    70c2:	add.w	r8, r8, #4294967295
  for (order = lfnOrd ; order ; order--) {
    70c6:	ands.w	r9, r8, #255	; 0xff
    70ca:	beq.n	7180 <FatFile::open(FatFile*, fname_t*, int)+0x2bc>
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    70cc:	orr.w	r4, r9, #64	; 0x40
    70d0:	uxtb	r4, r4
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    70d2:	mov	r5, r9
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    70d4:	movs	r7, #0
    70d6:	movs	r1, #0
    70d8:	mov	r0, r6
    70da:	bl	5e78 <FatFile::readDirCache(bool)>
    if (!ldir) {
    70de:	cmp	r0, #0
    70e0:	beq.w	6ed6 <FatFile::open(FatFile*, fname_t*, int)+0x12>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    70e4:	ldr	r2, [r6, #8]
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    70e6:	ldrb.w	r3, [r2, #40]	; 0x28
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    70ea:	cmp	r9, r5
    70ec:	orr.w	r3, r3, #1
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    70f0:	mov.w	ip, #15
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    70f4:	ite	ne
    70f6:	movne	r1, r5
    70f8:	moveq	r1, r4
    70fa:	strb.w	r3, [r2, #40]	; 0x28
    70fe:	add.w	lr, fp, #12
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    7102:	strb.w	ip, [r0, #11]
    ldir->mustBeZero1 = 0;
    7106:	strb	r7, [r0, #12]
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    7108:	strb	r1, [r0, #0]
    710a:	add.w	ip, fp, #23
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    710e:	movs	r3, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    7110:	ldrb.w	r8, [lr, #1]!
    7114:	lsrs	r2, r3, #1
    7116:	orr.w	r3, r2, r3, lsl #7
    711a:	uxtab	r3, r8, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    711e:	cmp	lr, ip
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    7120:	uxtb	r3, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    7122:	bne.n	7110 <FatFile::open(FatFile*, fname_t*, int)+0x24c>
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    7124:	and.w	r1, r1, #31
    7128:	subs	r1, #1
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    712a:	strb	r3, [r0, #13]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    712c:	add.w	r2, r1, r1, lsl #1
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
    7130:	ldr.w	lr, [fp, #8]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    7134:	strh	r7, [r0, #26]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    7136:	add.w	r2, r1, r2, lsl #2
    713a:	adds	r0, #4
  for (uint8_t i = 0; i < 13; i++, k++) {
    713c:	movs	r3, #0
    713e:	b.n	7160 <FatFile::open(FatFile*, fname_t*, int)+0x29c>
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    7140:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    7142:	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    7146:	bls.n	7172 <FatFile::open(FatFile*, fname_t*, int)+0x2ae>
    setLe16(ldir->unicode1 + 2*i, c);
  } else if (i < 11) {
    7148:	cmp	r3, #10
    714a:	ite	ls
    714c:	strhls	r1, [r0, #0]
    714e:	strhhi	r1, [r0, #2]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    7150:	adds	r3, #1
    7152:	uxtb	r3, r3
    7154:	cmp	r3, #13
    7156:	add.w	r2, r2, #1
    715a:	add.w	r0, r0, #2
    715e:	beq.n	7178 <FatFile::open(FatFile*, fname_t*, int)+0x2b4>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    7160:	cmp	sl, r2
    7162:	bhi.n	7140 <FatFile::open(FatFile*, fname_t*, int)+0x27c>
    7164:	ite	ne
    7166:	movne.w	r1, #4294967295
    716a:	moveq	r1, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    716c:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    716e:	uxth	r1, r1
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    7170:	bhi.n	7148 <FatFile::open(FatFile*, fname_t*, int)+0x284>
    7172:	strh.w	r1, [r0, #-3]
    7176:	b.n	7150 <FatFile::open(FatFile*, fname_t*, int)+0x28c>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    7178:	subs	r5, #1
    717a:	ands.w	r5, r5, #255	; 0xff
    717e:	bne.n	70d6 <FatFile::open(FatFile*, fname_t*, int)+0x212>
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
  dir = dirFile->readDirCache();
    7180:	movs	r1, #0
    7182:	mov	r0, r6
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    7184:	ldr	r5, [r6, #20]
  dir = dirFile->readDirCache();
    7186:	bl	5e78 <FatFile::readDirCache(bool)>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    718a:	ubfx	r5, r5, #5, #16
  dir = dirFile->readDirCache();
  if (!dir) {
    718e:	mov	r4, r0
    7190:	cmp	r0, #0
    7192:	beq.w	6ed6 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    7196:	movs	r2, #32
    7198:	movs	r1, #0
    719a:	bl	bd6c <memset>
  memcpy(dir->name, fname->sfn, 11);
    719e:	mov	r3, fp

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;

  // set timestamps
  if (FsDateTime::callback) {
    71a0:	ldr	r2, [pc, #164]	; (7248 <FatFile::open(FatFile*, fname_t*, int)+0x384>)
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);
    71a2:	ldr.w	r1, [r3, #13]!
    71a6:	ldr	r0, [r3, #4]
    71a8:	str	r0, [r4, #4]
    71aa:	str	r1, [r4, #0]
    71ac:	ldrh	r1, [r3, #8]
    71ae:	ldrb	r3, [r3, #10]
    71b0:	strb	r3, [r4, #10]
    71b2:	strh	r1, [r4, #8]

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    71b4:	ldrb.w	r3, [fp]

  // set timestamps
  if (FsDateTime::callback) {
    71b8:	ldr	r7, [r2, #0]
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    71ba:	and.w	r3, r3, #24
    71be:	strb	r3, [r4, #12]

  // set timestamps
  if (FsDateTime::callback) {
    71c0:	cbz	r7, 71e6 <FatFile::open(FatFile*, fname_t*, int)+0x322>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    71c2:	add.w	r2, sp, #43	; 0x2b
    71c6:	add.w	r1, sp, #46	; 0x2e
    71ca:	add	r0, sp, #44	; 0x2c
    71cc:	blx	r7
    dir->createTimeMs = ms10;
    setLe16(dir->createDate, date);
    71ce:	ldrh.w	r3, [sp, #44]	; 0x2c
    setLe16(dir->createTime, time);
    71d2:	ldrh.w	r2, [sp, #46]	; 0x2e

  // set timestamps
  if (FsDateTime::callback) {
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    dir->createTimeMs = ms10;
    71d6:	ldrb.w	r1, [sp, #43]	; 0x2b
    71da:	strb	r1, [r4, #13]
    71dc:	strh	r3, [r4, #16]
    71de:	strh	r3, [r4, #18]
    71e0:	strh	r3, [r4, #24]
    71e2:	strh	r2, [r4, #14]
    71e4:	strh	r2, [r4, #22]
    setLe16(dir->accessDate, date);
    setLe16(dir->modifyDate, date);
    setLe16(dir->modifyTime, time);;
  }
  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
    71e6:	ldr	r2, [r6, #8]
    71e8:	ldrb.w	r3, [r2, #40]	; 0x28
    71ec:	orr.w	r3, r3, #1
    71f0:	strb.w	r3, [r2, #40]	; 0x28

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    71f4:	str.w	r9, [sp]
    71f8:	ldr	r3, [sp, #28]
    71fa:	ldr	r0, [sp, #36]	; 0x24
    71fc:	mov	r2, r5
    71fe:	mov	r1, r6
    7200:	bl	6180 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    7204:	b.n	6ed8 <FatFile::open(FatFile*, fname_t*, int)+0x14>
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
    7206:	cmp	r0, #0
    7208:	ldr.w	r9, [sp, #32]
    720c:	it	ne
    720e:	movne.w	r9, #0
    7212:	b.n	6f0e <FatFile::open(FatFile*, fname_t*, int)+0x4a>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    7214:	ldr	r1, [sp, #12]
    7216:	cmp	r1, #1
    7218:	bne.w	6ed6 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    721c:	subs	r4, r3, #1
    721e:	adds	r3, #10
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    7220:	ldrb.w	r0, [r4, #1]!
    7224:	lsrs	r1, r2, #1
    7226:	orr.w	r2, r1, r2, lsl #7
    722a:	uxtab	r2, r0, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    722e:	cmp	r4, r3
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    7230:	uxtb	r2, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    7232:	bne.n	7220 <FatFile::open(FatFile*, fname_t*, int)+0x35c>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    7234:	ldr	r3, [sp, #24]
    7236:	cmp	r3, r2
    7238:	bne.w	6ed6 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    723c:	ldr	r3, [sp, #28]
    723e:	lsls	r1, r3, #20
    7240:	bpl.n	71f4 <FatFile::open(FatFile*, fname_t*, int)+0x330>
    7242:	b.n	6ed6 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    7244:	.word	0x4ec4ec4f
    7248:	.word	0x1fff1ea8

0000724c <FatFile::getSFN(char*) [clone .part.2]>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
    724c:	push	{r3, r4, r5, r6, r7, lr}
    724e:	mov	r6, r1
    name[0] = '/';
    name[1] = '\0';
    return true;
  }
  // cache entry
  dir = reinterpret_cast<DirFat_t*>(cacheDirEntry(FatCache::CACHE_FOR_READ));
    7250:	movs	r1, #0
    7252:	bl	58f0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7256:	cbz	r0, 7294 <FatFile::getSFN(char*) [clone .part.2]+0x48>
    7258:	movs	r2, #0
    725a:	mov	r1, r2
    725c:	subs	r4, r0, #1
    725e:	movs	r7, #8
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    7260:	mov.w	lr, #46	; 0x2e
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
    7264:	ldrb.w	r3, [r4, #1]!
    7268:	cmp	r3, #32
    726a:	beq.n	7288 <FatFile::getSFN(char*) [clone .part.2]+0x3c>
      continue;
    }
    if (i == 8) {
    726c:	cmp	r2, #8
    726e:	beq.n	7296 <FatFile::getSFN(char*) [clone .part.2]+0x4a>
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    7270:	sub.w	r5, r3, #65	; 0x41
    7274:	cmp	r5, #25
    7276:	bhi.n	7282 <FatFile::getSFN(char*) [clone .part.2]+0x36>
    7278:	ldrb	r5, [r0, #12]
    727a:	tst	r7, r5
      c += 'a' - 'A';
    727c:	itt	ne
    727e:	addne	r3, #32
    7280:	uxtbne	r3, r3
    }
    name[j++] = c;
    7282:	strb	r3, [r6, r1]
    7284:	adds	r1, #1
    7286:	uxtb	r1, r1
    7288:	adds	r2, #1
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    728a:	cmp	r2, #11
    728c:	bne.n	7264 <FatFile::getSFN(char*) [clone .part.2]+0x18>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
    728e:	movs	r3, #0
    7290:	strb	r3, [r6, r1]
  return true;
    7292:	movs	r0, #1

fail:
  return false;
}
    7294:	pop	{r3, r4, r5, r6, r7, pc}
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    7296:	strb.w	lr, [r6, r1]
    729a:	adds	r1, #1
    729c:	uxtb	r1, r1
    729e:	ldrb	r3, [r4, #0]
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
    72a0:	movs	r7, #16
    72a2:	b.n	7270 <FatFile::getSFN(char*) [clone .part.2]+0x24>

000072a4 <FatFile::getSFN(char*)>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
    72a4:	ldrb	r3, [r0, #0]
    72a6:	mov	r2, r1
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t *dir;

  if (!isOpen()) {
    72a8:	cbz	r3, 72c0 <FatFile::getSFN(char*)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    72aa:	tst.w	r3, #96	; 0x60
    72ae:	beq.n	72bc <FatFile::getSFN(char*)+0x18>
    name[0] = '/';
    72b0:	movs	r1, #47	; 0x2f
    name[1] = '\0';
    72b2:	movs	r3, #0
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    name[0] = '/';
    72b4:	strb	r1, [r2, #0]
    name[1] = '\0';
    72b6:	strb	r3, [r2, #1]
    return true;
    72b8:	movs	r0, #1
    72ba:	bx	lr
    72bc:	b.w	724c <FatFile::getSFN(char*) [clone .part.2]>
  }
  name[j] = 0;
  return true;

fail:
  return false;
    72c0:	mov	r0, r3
}
    72c2:	bx	lr

000072c4 <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    72c4:	push	{r3, r4, r5, r6, r7, lr}
  m_fFile = nullptr;
    72c6:	movs	r5, #0
    72c8:	str	r5, [r0, #56]	; 0x38
  m_xFile = nullptr;
  if (from.m_fFile) {
    72ca:	ldr	r4, [r1, #56]	; 0x38
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
  m_fFile = nullptr;
  m_xFile = nullptr;
    72cc:	str	r5, [r0, #60]	; 0x3c
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    72ce:	mov	r6, r0
    72d0:	mov	r7, r1
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    72d2:	cbz	r4, 72f8 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    72d4:	mov	r1, r0
    72d6:	movs	r0, #36	; 0x24
    72d8:	bl	7530 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    72dc:	strb	r5, [r0, #0]
    72de:	strb	r5, [r0, #1]
    72e0:	strb	r5, [r0, #2]
    72e2:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    72e4:	ldr	r5, [r7, #56]	; 0x38
    72e6:	mov	r4, r0
    72e8:	ldmia	r5!, {r0, r1, r2, r3}
    72ea:	stmia	r4!, {r0, r1, r2, r3}
    72ec:	ldmia	r5!, {r0, r1, r2, r3}
    72ee:	stmia	r4!, {r0, r1, r2, r3}
    72f0:	ldr	r3, [r5, #0]
    72f2:	str	r3, [r4, #0]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
    72f4:	mov	r0, r6
    72f6:	pop	{r3, r4, r5, r6, r7, pc}
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    72f8:	ldr	r3, [r1, #60]	; 0x3c
    72fa:	cmp	r3, #0
    72fc:	beq.n	72f4 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>
    m_xFile = new (m_fileMem) ExFatFile;
    72fe:	mov	r1, r0
    7300:	movs	r0, #56	; 0x38
    7302:	bl	7530 <operator new(unsigned int, unsigned long*)>
    7306:	strb.w	r4, [r0, #49]	; 0x31
    730a:	strb.w	r4, [r0, #50]	; 0x32
    730e:	strb.w	r4, [r0, #51]	; 0x33
    7312:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    7314:	ldr	r3, [r7, #60]	; 0x3c
    7316:	mov	r2, r0
    7318:	add.w	r1, r3, #48	; 0x30
    731c:	ldr	r5, [r3, #0]
    731e:	ldr	r4, [r3, #4]
    7320:	ldr	r0, [r3, #8]
    7322:	ldr	r7, [r3, #12]
    7324:	str	r7, [r2, #12]
    7326:	adds	r3, #16
    7328:	cmp	r3, r1
    732a:	str	r5, [r2, #0]
    732c:	str	r4, [r2, #4]
    732e:	str	r0, [r2, #8]
    7330:	add.w	r2, r2, #16
    7334:	bne.n	731c <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x58>
    7336:	ldr	r3, [r3, #0]
    7338:	str	r3, [r2, #0]
    733a:	b.n	72f4 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>

0000733c <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    733c:	push	{r4, lr}
    733e:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    7340:	ldr	r0, [r0, #56]	; 0x38
    7342:	cbz	r0, 7350 <FsBaseFile::close()+0x14>
    7344:	bl	59a4 <FatFile::close()>
    7348:	cbz	r0, 7350 <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    734a:	movs	r3, #0
    734c:	str	r3, [r4, #56]	; 0x38
    return true;
    734e:	pop	{r4, pc}
  }
  if (m_xFile && m_xFile->close()) {
    7350:	ldr	r0, [r4, #60]	; 0x3c
    7352:	cbz	r0, 7360 <FsBaseFile::close()+0x24>
    7354:	bl	3ed0 <ExFatFile::close()>
    7358:	cbz	r0, 7360 <FsBaseFile::close()+0x24>
    m_xFile = nullptr;
    735a:	movs	r3, #0
    735c:	str	r3, [r4, #60]	; 0x3c
    735e:	pop	{r4, pc}
    return true;
  }
  return false;
    7360:	movs	r0, #0
}
    7362:	pop	{r4, pc}

00007364 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    7364:	cbz	r1, 73da <FsBaseFile::open(FsVolume*, char const*, int)+0x76>
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    7366:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    736a:	mov	r4, r1
    736c:	mov	r5, r0
    736e:	mov	r8, r3
    7370:	mov	r7, r2
  if (!vol) {
    return false;
  }
  close();
    7372:	bl	733c <FsBaseFile::close()>
  if (vol->m_fVol) {
    7376:	ldr.w	r6, [r4, #1144]	; 0x478
    737a:	cbz	r6, 73a8 <FsBaseFile::open(FsVolume*, char const*, int)+0x44>
    m_fFile = new (m_fileMem) FatFile;
    737c:	mov	r1, r5
    737e:	movs	r0, #36	; 0x24
    7380:	bl	7530 <operator new(unsigned int, unsigned long*)>
    7384:	movs	r1, #0
    7386:	strb	r1, [r0, #0]
    7388:	strb	r1, [r0, #1]
    738a:	strb	r1, [r0, #2]
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    738c:	ldr.w	r1, [r4, #1144]	; 0x478
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    7390:	str	r0, [r5, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    7392:	mov	r3, r8
    7394:	mov	r2, r7
    7396:	bl	5c98 <FatFile::open(FatVolume*, char const*, int)>
    739a:	cbz	r0, 73a2 <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
      return true;
    739c:	movs	r0, #1
    739e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    m_fFile = nullptr;
    73a2:	str	r0, [r5, #56]	; 0x38
    return false;
    73a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    73a8:	ldr.w	r3, [r4, #1148]	; 0x47c
    73ac:	cbz	r3, 73de <FsBaseFile::open(FsVolume*, char const*, int)+0x7a>
    m_xFile = new (m_fileMem) ExFatFile;
    73ae:	mov	r1, r5
    73b0:	movs	r0, #56	; 0x38
    73b2:	bl	7530 <operator new(unsigned int, unsigned long*)>
    73b6:	strb.w	r6, [r0, #49]	; 0x31
    73ba:	strb.w	r6, [r0, #50]	; 0x32
    73be:	strb.w	r6, [r0, #51]	; 0x33
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    73c2:	ldr.w	r1, [r4, #1148]	; 0x47c
      return true;
    }
    m_fFile = nullptr;
    return false;
  } else if (vol->m_xVol) {
    m_xFile = new (m_fileMem) ExFatFile;
    73c6:	str	r0, [r5, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    73c8:	mov	r3, r8
    73ca:	mov	r2, r7
    73cc:	bl	481c <ExFatFile::open(ExFatVolume*, char const*, int)>
    73d0:	cmp	r0, #0
    73d2:	bne.n	739c <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_xFile = nullptr;
    73d4:	str	r0, [r5, #60]	; 0x3c
  }
  return false;
}
    73d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    73da:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    73dc:	bx	lr
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    73de:	movs	r0, #0
    73e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000073e4 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    73e4:	push	{r3, r4, r5, r6, r7, lr}
    73e6:	mov	r5, r1
    73e8:	mov	r7, r2
    73ea:	mov	r4, r0
  close();
    73ec:	bl	733c <FsBaseFile::close()>
  if (dir->m_fFile) {
    73f0:	ldr	r6, [r5, #56]	; 0x38
    73f2:	cbz	r6, 7418 <FsBaseFile::openNext(FsBaseFile*, int)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    73f4:	mov	r1, r4
    73f6:	movs	r0, #36	; 0x24
    73f8:	bl	7530 <operator new(unsigned int, unsigned long*)>
    73fc:	movs	r2, #0
    73fe:	strb	r2, [r0, #0]
    7400:	strb	r2, [r0, #1]
    7402:	strb	r2, [r0, #2]
    7404:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    7406:	mov	r2, r7
    7408:	ldr	r1, [r5, #56]	; 0x38
    740a:	bl	6258 <FatFile::openNext(FatFile*, int)>
    740e:	cbz	r0, 7414 <FsBaseFile::openNext(FsBaseFile*, int)+0x30>
      return true;
    7410:	movs	r0, #1
    7412:	pop	{r3, r4, r5, r6, r7, pc}
    }
    m_fFile = nullptr;
    7414:	str	r0, [r4, #56]	; 0x38
    7416:	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
    7418:	ldr	r0, [r5, #60]	; 0x3c
    741a:	cbz	r0, 7440 <FsBaseFile::openNext(FsBaseFile*, int)+0x5c>
    m_xFile = new (m_fileMem) ExFatFile;
    741c:	mov	r1, r4
    741e:	movs	r0, #56	; 0x38
    7420:	bl	7530 <operator new(unsigned int, unsigned long*)>
    7424:	strb.w	r6, [r0, #49]	; 0x31
    7428:	strb.w	r6, [r0, #50]	; 0x32
    742c:	strb.w	r6, [r0, #51]	; 0x33
    7430:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    7432:	mov	r2, r7
    7434:	ldr	r1, [r5, #60]	; 0x3c
    7436:	bl	482c <ExFatFile::openNext(ExFatFile*, int)>
    743a:	cmp	r0, #0
    743c:	bne.n	7410 <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
      return true;
    }
    m_xFile = nullptr;
    743e:	str	r0, [r4, #60]	; 0x3c
  }
  return false;
}
    7440:	pop	{r3, r4, r5, r6, r7, pc}
    7442:	nop

00007444 <FsVolume::begin(BlockDeviceInterface*)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    7444:	push	{r4, r5, r6, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    7446:	movs	r6, #0
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    7448:	mov	r5, r0
  m_blockDev = blockDev;
    744a:	str.w	r1, [r0, #1152]	; 0x480
  m_fVol = nullptr;
    744e:	str.w	r6, [r0, #1144]	; 0x478
  m_xVol = new (m_volMem) ExFatVolume;
    7452:	mov	r1, r0
    7454:	mov.w	r0, #1144	; 0x478
    7458:	bl	7530 <operator new(unsigned int, unsigned long*)>
    745c:	mov	r4, r0
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    745e:	str	r6, [r0, #4]
    invalidate();
    7460:	bl	488c <FsCache::invalidate()>
    7464:	add.w	r0, r4, #524	; 0x20c
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    7468:	str.w	r6, [r4, #528]	; 0x210
    invalidate();
    746c:	bl	488c <FsCache::invalidate()>
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() : m_fatType(0) {}
    7470:	strb.w	r6, [r4, #1084]	; 0x43c
    7474:	strb.w	r6, [r4, #1137]	; 0x471
    7478:	strb.w	r6, [r4, #1138]	; 0x472
    747c:	strb.w	r6, [r4, #1139]	; 0x473
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    7480:	ldr.w	r1, [r5, #1152]	; 0x480
    7484:	str.w	r4, [r5, #1148]	; 0x47c
    7488:	mov	r0, r4
    748a:	movs	r2, #1
    748c:	bl	4a1c <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>
    7490:	cbnz	r0, 74ce <FsVolume::begin(BlockDeviceInterface*)+0x8a>
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    7492:	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    7494:	mov	r1, r5
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    7496:	str.w	r6, [r5, #1148]	; 0x47c
  m_fVol = new (m_volMem) FatVolume;
    749a:	movw	r0, #1124	; 0x464
    749e:	bl	7530 <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() : m_fatType(0) {}
    74a2:	strb	r6, [r0, #7]
    74a4:	strb.w	r6, [r0, #1088]	; 0x440
    74a8:	strb.w	r6, [r0, #1089]	; 0x441
    74ac:	strb.w	r6, [r0, #1090]	; 0x442
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    74b0:	movs	r2, #1
    74b2:	ldr.w	r1, [r5, #1152]	; 0x480
    74b6:	str.w	r0, [r5, #1144]	; 0x478
    74ba:	mov	r4, r0
    74bc:	bl	6800 <FatPartition::init(BlockDeviceInterface*, unsigned char)>
    74c0:	cbnz	r0, 74ec <FsVolume::begin(BlockDeviceInterface*)+0xa8>
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    74c2:	ldr	r3, [pc, #64]	; (7504 <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
    74c4:	movs	r0, #0
    74c6:	str	r0, [r3, #0]
  m_fVol = nullptr;
    74c8:	str.w	r0, [r5, #1144]	; 0x478
  return false;
    74cc:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    74ce:	add.w	r6, r4, #1088	; 0x440
    74d2:	mov	r0, r6
    74d4:	bl	3ed0 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    74d8:	mov	r1, r4
    74da:	mov	r0, r6
    74dc:	bl	3f8c <ExFatFile::openRoot(ExFatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    74e0:	cmp	r0, #0
    74e2:	beq.n	7492 <FsVolume::begin(BlockDeviceInterface*)+0x4e>

 done:
  m_cwv = this;
    74e4:	ldr	r3, [pc, #28]	; (7504 <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
  return true;
    74e6:	movs	r0, #1
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    74e8:	str	r5, [r3, #0]
  return true;
    74ea:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    74ec:	add.w	r6, r4, #1088	; 0x440
    74f0:	mov	r0, r6
    74f2:	bl	59a4 <FatFile::close()>
    return m_vwd.openRoot(this);
    74f6:	mov	r1, r4
    74f8:	mov	r0, r6
    74fa:	bl	5ca8 <FatFile::openRoot(FatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    74fe:	cmp	r0, #0
    7500:	bne.n	74e4 <FsVolume::begin(BlockDeviceInterface*)+0xa0>
    7502:	b.n	74c2 <FsVolume::begin(BlockDeviceInterface*)+0x7e>
    7504:	.word	0x1fff1eac

00007508 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    7508:	push	{r3, r4, r5, r6, r7, lr}
    750a:	movs	r5, #0
    750c:	mov.w	r7, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    7510:	ldr	r6, [pc, #24]	; (752c <FsVolume::open(char const*, int)+0x24>)
    7512:	str	r7, [r0, #8]
    7514:	mov	r4, r0
    7516:	strb	r5, [r0, #4]
    7518:	strb	r5, [r0, #12]
 * \class FsBaseFile
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}
    751a:	str	r5, [r0, #72]	; 0x48
    751c:	str	r5, [r0, #76]	; 0x4c
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    751e:	str.w	r6, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    7522:	bl	7364 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    7526:	mov	r0, r4
    7528:	pop	{r3, r4, r5, r6, r7, pc}
    752a:	nop
    752c:	.word	0x0000f794

00007530 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    7530:	mov	r0, r1
    7532:	bx	lr

00007534 <SdSpiCard::errorCode() const>:
  /**
   * \return code for the last error. See SdCardInfo.h for a list of error codes.
   */
  uint8_t errorCode() const {
    return m_errorCode;
  }
    7534:	ldrb	r0, [r0, #19]
    7536:	bx	lr

00007538 <SdSpiCard::errorData() const>:
  /** \return error data for last error. */
  uint32_t errorData() const {
    return m_status;
  }
    7538:	ldrb	r0, [r0, #21]
    753a:	bx	lr

0000753c <SdSpiCard::readSector(unsigned long, unsigned char*)>:
   *
   * \param[in] sector Logical sector to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
    753c:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    753e:	ldr	r4, [r0, #0]
    7540:	ldr	r4, [r4, #12]
    7542:	movs	r3, #1
    7544:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return readSingle(sector, dst);
#endif  // ENABLE_DEDICATED_SPI
  }
    7546:	ldr.w	r4, [sp], #4
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    754a:	bx	ip

0000754c <SdSpiCard::type() const>:
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
  }
    754c:	ldrb	r0, [r0, #22]
    754e:	bx	lr

00007550 <SdSpiCard::writeSector(unsigned long, unsigned char const*)>:
   *
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    7550:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    7552:	ldr	r4, [r0, #0]
    7554:	ldr	r4, [r4, #28]
    7556:	movs	r3, #1
    7558:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return writeSingle(sector, src);
#endif  // ENABLE_DEDICATED_SPI
  }
    755a:	ldr.w	r4, [sp], #4
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    755e:	bx	ip

00007560 <SdSpiCard::~SdSpiCard()>:
/**
 * \class SdSpiCard
 * \brief Raw access to SD and SDHC flash memory cards via SPI protocol.
 */
#if HAS_SDIO_CLASS
class SdSpiCard : public SdCardInterface {
    7560:	bx	lr
    7562:	nop

00007564 <SdSpiCard::~SdSpiCard()>:
    7564:	push	{r4, lr}
    7566:	movs	r1, #24
    7568:	mov	r4, r0
    756a:	bl	a784 <operator delete(void*, unsigned int)>
    756e:	mov	r0, r4
    7570:	pop	{r4, pc}
    7572:	nop

00007574 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    7574:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7578:	mov	r6, r1
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    757a:	ldrb	r1, [r0, #16]
    757c:	cmp	r1, #2
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    757e:	mov	r4, r0
    7580:	mov	r5, r2
    7582:	mov	r7, r3
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    7584:	beq.n	7596 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x22>
    if (!syncDevice()) {
    7586:	ldr	r3, [r4, #0]
    7588:	mov	r0, r4
    758a:	ldr	r3, [r3, #20]
    758c:	blx	r3
    758e:	cbnz	r0, 75c8 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x54>
      return false;
    7590:	movs	r0, #0
    7592:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    7596:	ldr	r3, [r0, #12]
    7598:	cmp	r3, r6
    759a:	bne.n	7586 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    759c:	movs	r6, #0
    759e:	cbz	r7, 75b8 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeData(src)) {
    75a0:	ldr	r3, [r4, #0]
    75a2:	mov	r1, r5
    75a4:	ldr	r3, [r3, #68]	; 0x44
    75a6:	mov	r0, r4
    75a8:	blx	r3
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    75aa:	adds	r6, #1
    75ac:	add.w	r5, r5, #512	; 0x200
    if (!writeData(src)) {
    75b0:	cmp	r0, #0
    75b2:	beq.n	7590 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    75b4:	cmp	r7, r6
    75b6:	bne.n	75a0 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2c>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    75b8:	ldr	r3, [r4, #12]
  return m_sharedSpi ? syncDevice() : true;
    75ba:	ldrb	r2, [r4, #17]
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    75bc:	add	r7, r3
    75be:	str	r7, [r4, #12]
  return m_sharedSpi ? syncDevice() : true;
    75c0:	cbnz	r2, 75de <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x6a>
    75c2:	movs	r0, #1
    75c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!syncDevice()) {
      return false;
    }
    if (!writeStart(sector)) {
    75c8:	ldr	r3, [r4, #0]
    75ca:	mov	r1, r6
    75cc:	ldr	r3, [r3, #72]	; 0x48
    75ce:	mov	r0, r4
    75d0:	blx	r3
    75d2:	cmp	r0, #0
    75d4:	beq.n	7590 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    75d6:	movs	r3, #2
      return false;
    }
    if (!writeStart(sector)) {
      return false;
    }
    m_curSector = sector;
    75d8:	str	r6, [r4, #12]
    m_curState = WRITE_STATE;
    75da:	strb	r3, [r4, #16]
    75dc:	b.n	759c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x28>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    75de:	ldr	r3, [r4, #0]
    75e0:	mov	r0, r4
    75e2:	ldr	r3, [r3, #20]

 fail:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
    75e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    75e8:	bx	r3
    75ea:	nop

000075ec <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
    75ec:	push	{r4, lr}
    75ee:	mov	r4, r0
  bool waitNotBusy(SdMillis_t timeoutMS);
  bool writeData(uint8_t token, const uint8_t* src);

#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
    75f0:	adds	r0, #4
    75f2:	bl	8da4 <SdSpiArduinoDriver::activate()>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    75f6:	ldrb	r0, [r4, #18]
    75f8:	movs	r1, #0
    75fa:	bl	8f7c <sdCsWrite(unsigned char, bool)>
  if (!m_spiActive) {
    spiActivate();
    spiSelect();
    m_spiActive = true;
    75fe:	movs	r3, #1
    7600:	strb	r3, [r4, #20]
    7602:	pop	{r4, pc}

00007604 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>:
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
    7604:	push	{r3, r4, r5, lr}
    7606:	mov	r4, r0
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    7608:	movs	r1, #1
    760a:	ldrb	r0, [r0, #18]
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    760c:	adds	r5, r4, #4
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    760e:	bl	8f7c <sdCsWrite(unsigned char, bool)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    7612:	mov	r0, r5
    7614:	movs	r1, #255	; 0xff
    7616:	bl	8f08 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
    761a:	mov	r0, r5
    761c:	bl	8e84 <SdSpiArduinoDriver::deactivate()>
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7620:	movs	r3, #0
    7622:	strb	r3, [r4, #20]
    7624:	pop	{r3, r4, r5, pc}
    7626:	nop

00007628 <SdSpiCard::isBusy()>:
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    7628:	push	{r3, r4, r5, r6, r7, lr}
  bool rtn = true;
  bool spiActive = m_spiActive;
    762a:	ldrb	r7, [r0, #20]
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    762c:	mov	r6, r0
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    762e:	cbnz	r7, 7634 <SdSpiCard::isBusy()+0xc>
    7630:	bl	75ec <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>
    7634:	adds	r5, r6, #4
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    7636:	movs	r4, #8
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    7638:	mov	r0, r5
    763a:	bl	8ecc <SdSpiArduinoDriver::receive()>
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
    763e:	cmp	r0, #255	; 0xff
    7640:	add.w	r3, r4, #4294967295
    7644:	beq.n	7662 <SdSpiCard::isBusy()+0x3a>
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    7646:	ands.w	r4, r3, #255	; 0xff
    764a:	bne.n	7638 <SdSpiCard::isBusy()+0x10>
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
  bool rtn = true;
    764c:	movs	r4, #1
    if (0XFF == spiReceive()) {
      rtn = false;
      break;
    }
  }
  if (!spiActive) {
    764e:	cbnz	r7, 7654 <SdSpiCard::isBusy()+0x2c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7650:	ldrb	r3, [r6, #20]
    7652:	cbnz	r3, 7658 <SdSpiCard::isBusy()+0x30>
  }
  if (!spiActive) {
    spiStop();
  }
  return rtn;
}
    7654:	mov	r0, r4
    7656:	pop	{r3, r4, r5, r6, r7, pc}
    7658:	mov	r0, r6
    765a:	bl	7604 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    765e:	mov	r0, r4
    7660:	pop	{r3, r4, r5, r6, r7, pc}
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
      rtn = false;
    7662:	movs	r4, #0
    7664:	b.n	764e <SdSpiCard::isBusy()+0x26>
    7666:	nop

00007668 <SdSpiCard::readData(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
    7668:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    766c:	ldr	r6, [pc, #116]	; (76e4 <SdSpiCard::readData(unsigned char*, unsigned int)+0x7c>)
    766e:	sub	sp, #12
    7670:	ldr	r3, [r6, #0]
    7672:	str	r3, [sp, #0]
	return ret;
    7674:	ldr	r5, [sp, #0]
    7676:	mov	r4, r0
    7678:	mov	r8, r1
    767a:	mov	r9, r2

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    767c:	uxth	r5, r5
    767e:	adds	r7, r0, #4
    7680:	b.n	7692 <SdSpiCard::readData(unsigned char*, unsigned int)+0x2a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7682:	ldr	r3, [r6, #0]
    7684:	str	r3, [sp, #4]
	return ret;
    7686:	ldr	r3, [sp, #4]
    7688:	uxth	r3, r3
    768a:	subs	r3, r3, r5
    768c:	cmp.w	r3, #300	; 0x12c
    7690:	bgt.n	76b8 <SdSpiCard::readData(unsigned char*, unsigned int)+0x50>
    7692:	mov	r0, r7
    7694:	bl	8ecc <SdSpiArduinoDriver::receive()>
#endif  // USE_SD_CRC

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    7698:	cmp	r0, #255	; 0xff
    769a:	strb	r0, [r4, #21]
    769c:	beq.n	7682 <SdSpiCard::readData(unsigned char*, unsigned int)+0x1a>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_SECTOR) {
    769e:	cmp	r0, #254	; 0xfe
    76a0:	beq.n	76be <SdSpiCard::readData(unsigned char*, unsigned int)+0x56>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    76a2:	movs	r3, #24
    76a4:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    76a6:	ldrb	r0, [r4, #20]
    76a8:	cbz	r0, 76b2 <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    76aa:	mov	r0, r4
    76ac:	bl	7604 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
  return false;
    76b0:	movs	r0, #0
}
    76b2:	add	sp, #12
    76b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    76b8:	movs	r3, #29
    76ba:	strb	r3, [r4, #19]
    76bc:	b.n	76a6 <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
    76be:	mov	r2, r9
    76c0:	mov	r1, r8
    76c2:	mov	r0, r7
    76c4:	bl	8ee8 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    76c8:	strb	r0, [r4, #21]
    76ca:	cbz	r0, 76d2 <SdSpiCard::readData(unsigned char*, unsigned int)+0x6a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    76cc:	movs	r3, #36	; 0x24
    76ce:	strb	r3, [r4, #19]
    76d0:	b.n	76a6 <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    76d2:	mov	r0, r7
    76d4:	bl	8ecc <SdSpiArduinoDriver::receive()>
    76d8:	mov	r0, r7
    76da:	bl	8ecc <SdSpiArduinoDriver::receive()>
#else  // USE_SD_CRC
  // discard crc
  spiReceive();
  spiReceive();
#endif  // USE_SD_CRC
  return true;
    76de:	movs	r0, #1
    76e0:	b.n	76b2 <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    76e2:	nop
    76e4:	.word	0x1fff1f0c

000076e8 <SdSpiCard::waitNotBusy(unsigned short)>:
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(SdMillis_t timeoutMS) {
    76e8:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    76ea:	ldr	r5, [pc, #52]	; (7720 <SdSpiCard::waitNotBusy(unsigned short)+0x38>)
    76ec:	sub	sp, #12
    76ee:	ldr	r3, [r5, #0]
    76f0:	str	r3, [sp, #0]
	return ret;
    76f2:	ldr	r4, [sp, #0]
    76f4:	mov	r7, r1
    76f6:	adds	r6, r0, #4
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    76f8:	uxth	r4, r4
    76fa:	b.n	770a <SdSpiCard::waitNotBusy(unsigned short)+0x22>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    76fc:	ldr	r3, [r5, #0]
    76fe:	str	r3, [sp, #4]
	return ret;
    7700:	ldr	r3, [sp, #4]
    7702:	uxth	r3, r3
    7704:	subs	r3, r3, r4
    7706:	cmp	r3, r7
    7708:	bgt.n	771a <SdSpiCard::waitNotBusy(unsigned short)+0x32>
    770a:	mov	r0, r6
    770c:	bl	8ecc <SdSpiArduinoDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    7710:	cmp	r0, #255	; 0xff
    7712:	bne.n	76fc <SdSpiCard::waitNotBusy(unsigned short)+0x14>
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    }
  }
  return true;
    7714:	movs	r0, #1
#endif  // WDT_YIELD_TIME_MILLIS
}
    7716:	add	sp, #12
    7718:	pop	{r4, r5, r6, r7, pc}
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    771a:	movs	r0, #0
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
    771c:	add	sp, #12
    771e:	pop	{r4, r5, r6, r7, pc}
    7720:	.word	0x1fff1f0c

00007724 <SdSpiCard::cardCommand(unsigned char, unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    7724:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // select card
  if (!m_spiActive) {
    7728:	ldrb	r3, [r0, #20]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    772a:	sub	sp, #8
    772c:	mov	r6, r0
    772e:	mov	r8, r1
    7730:	str	r2, [sp, #4]
  // select card
  if (!m_spiActive) {
    7732:	cbnz	r3, 7738 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x14>
    7734:	bl	75ec <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    7738:	cmp.w	r8, #0
    773c:	bne.n	7794 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x70>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    773e:	adds	r4, r6, #4
    7740:	mov	r0, r4
    7742:	orr.w	r1, r8, #64	; 0x40
    7746:	bl	8f08 <SdSpiArduinoDriver::send(unsigned char)>
    774a:	add	r7, sp, #4
    774c:	add	r5, sp, #8
    774e:	ldrb.w	r1, [r5, #-1]!
    7752:	mov	r0, r4
    7754:	bl	8f08 <SdSpiArduinoDriver::send(unsigned char)>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    7758:	cmp	r5, r7
    775a:	bne.n	774e <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x2a>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    775c:	cmp.w	r8, #0
    7760:	ite	eq
    7762:	moveq	r1, #149	; 0x95
    7764:	movne	r1, #135	; 0x87
    7766:	mov	r0, r4
    7768:	bl	8f08 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    776c:	mov	r0, r4
    776e:	bl	8ecc <SdSpiArduinoDriver::receive()>
    7772:	movs	r5, #11
    7774:	mov	r0, r4
    7776:	bl	8ecc <SdSpiArduinoDriver::receive()>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    777a:	lsls	r3, r0, #24
    777c:	strb	r0, [r6, #21]
    777e:	bmi.n	7786 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x62>
  }
  return m_status;
}
    7780:	add	sp, #8
    7782:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7786:	subs	r3, r5, #1

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    7788:	ands.w	r5, r3, #255	; 0xff
    778c:	bne.n	7774 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
  }
  return m_status;
}
    778e:	add	sp, #8
    7790:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
    7794:	mov.w	r1, #300	; 0x12c
    7798:	mov	r0, r6
    779a:	bl	76e8 <SdSpiCard::waitNotBusy(unsigned short)>
    779e:	b.n	773e <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x1a>

000077a0 <SdSpiCard::begin(SdSpiConfig)>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
    77a0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    77a4:	sub	sp, #40	; 0x28
    77a6:	add	r5, sp, #4
    77a8:	stmia.w	r5, {r1, r2, r3}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    77ac:	ldr	r7, [pc, #480]	; (7990 <SdSpiCard::begin(SdSpiConfig)+0x1f0>)
    77ae:	ldrb.w	r3, [sp, #4]
    77b2:	ldr	r2, [r7, #0]
  SdMillis_t t0 = SysCall::curTimeMS();
  m_errorCode = SD_CARD_ERROR_NONE;
  m_type = 0;
  m_csPin = spiConfig.csPin;
    77b4:	strb	r3, [r0, #18]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
    77b6:	mov	r6, r0
  SdMillis_t t0 = SysCall::curTimeMS();
  m_errorCode = SD_CARD_ERROR_NONE;
    77b8:	mov.w	sl, #0
    77bc:	str	r2, [sp, #20]
  if (!m_spiDriverPtr) {
    error(SD_CARD_ERROR_INVALID_CARD_CONFIG);
    goto fail;
  }
#endif  // SPI_DRIVER_SELECT
  sdCsInit(m_csPin);
    77be:	mov	r0, r3
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
  SdMillis_t t0 = SysCall::curTimeMS();
  m_errorCode = SD_CARD_ERROR_NONE;
    77c0:	strb.w	sl, [r6, #19]
  m_type = 0;
    77c4:	strb.w	sl, [r6, #22]
    77c8:	ldrb.w	r4, [sp, #5]
	return ret;
    77cc:	ldr.w	r8, [sp, #20]
    77d0:	ldr.w	r9, [sp, #8]
  if (!m_spiDriverPtr) {
    error(SD_CARD_ERROR_INVALID_CARD_CONFIG);
    goto fail;
  }
#endif  // SPI_DRIVER_SELECT
  sdCsInit(m_csPin);
    77d4:	bl	8f74 <sdCsInit(unsigned char)>
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    77d8:	ldrb	r0, [r6, #18]
    77da:	movs	r1, #1
    77dc:	bl	8f7c <sdCsWrite(unsigned char, bool)>
    77e0:	ldmia.w	r5, {r0, r1, r2}
    77e4:	add	r3, sp, #28
    77e6:	stmia.w	r3, {r0, r1, r2}
#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
    77ea:	adds	r5, r6, #4
  /** Save high speed SPISettings after SD initialization.
   *
   * \param[in] maxSck Maximum SCK frequency.
   */
  void setSckSpeed(uint32_t maxSck) {
    m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0);
    77ec:	ldr	r2, [pc, #420]	; (7994 <SdSpiCard::begin(SdSpiConfig)+0x1f4>)
    77ee:	str	r2, [r6, #8]
    77f0:	mov	r0, r5
    77f2:	ldmia	r3, {r1, r2, r3}
    77f4:	bl	8e34 <SdSpiArduinoDriver::begin(SdSpiConfig)>
  spiUnselect();
  spiSetSckSpeed(1000UL*SD_MAX_INIT_RATE_KHZ);
  spiBegin(spiConfig);
  uint32_t arg;
#if ENABLE_DEDICATED_SPI
  m_sharedSpi = !(spiConfig.options & DEDICATED_SPI);
    77f8:	mvns	r3, r4
    77fa:	ubfx	r3, r3, #7, #1
    77fe:	strb	r3, [r6, #17]
    7800:	mov	r0, r6
  m_spiActive = false;
    7802:	strb.w	sl, [r6, #20]
  m_curState = IDLE_STATE;
    7806:	strb.w	sl, [r6, #16]
    780a:	bl	75ec <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    780e:	ldrb	r0, [r6, #18]
    7810:	movs	r1, #1
    7812:	bl	8f7c <sdCsWrite(unsigned char, bool)>
    7816:	movs	r4, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    7818:	movs	r1, #255	; 0xff
    781a:	mov	r0, r5
    781c:	bl	8f08 <SdSpiArduinoDriver::send(unsigned char)>
    7820:	subs	r3, r4, #1

  spiStart();

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
    7822:	ands.w	r4, r3, #255	; 0xff
    7826:	bne.n	7818 <SdSpiCard::begin(SdSpiConfig)+0x78>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    7828:	mov	r1, r4
    782a:	ldrb	r0, [r6, #18]
    782c:	bl	8f7c <sdCsWrite(unsigned char, bool)>
    7830:	mov.w	sl, #10
  spiSelect();
  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
    7834:	movs	r2, #0
    7836:	mov	r1, r2
    7838:	mov	r0, r6
    783a:	bl	7724 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    783e:	cmp	r0, #1
    7840:	mov	r4, r0
    7842:	beq.n	7882 <SdSpiCard::begin(SdSpiConfig)+0xe2>
    7844:	add.w	r3, sl, #4294967295
      break;
    }
    if (i == SD_CMD0_RETRY) {
    7848:	ands.w	sl, r3, #255	; 0xff
    784c:	beq.n	7866 <SdSpiCard::begin(SdSpiConfig)+0xc6>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    784e:	movs	r1, #253	; 0xfd
    7850:	mov	r0, r5
    7852:	bl	8f08 <SdSpiArduinoDriver::send(unsigned char)>
    7856:	mov.w	r4, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    785a:	mov	r0, r5
    785c:	bl	8ecc <SdSpiArduinoDriver::receive()>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
    7860:	subs	r4, #1
    7862:	bne.n	785a <SdSpiCard::begin(SdSpiConfig)+0xba>
    7864:	b.n	7834 <SdSpiCard::begin(SdSpiConfig)+0x94>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7866:	movs	r3, #1
    7868:	strb	r3, [r6, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    786a:	ldrb	r0, [r6, #20]
    786c:	cbnz	r0, 7874 <SdSpiCard::begin(SdSpiConfig)+0xd4>
  return true;

fail:
  spiStop();
  return false;
}
    786e:	add	sp, #40	; 0x28
    7870:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7874:	mov	r0, r6
    7876:	bl	7604 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  spiSetSckSpeed(spiConfig.maxSck);
  return true;

fail:
  spiStop();
  return false;
    787a:	movs	r0, #0
}
    787c:	add	sp, #40	; 0x28
    787e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    goto fail;
  }
#endif  // USE_SD_CRC

  // check SD version
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    7882:	mov.w	r2, #426	; 0x1aa
    7886:	movs	r1, #8
    7888:	mov	r0, r6
    788a:	bl	7724 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    788e:	lsls	r3, r0, #29
    7890:	bpl.n	7924 <SdSpiCard::begin(SdSpiConfig)+0x184>
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    7892:	strb	r4, [r6, #22]
    }
  } else {
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    7894:	ldr	r3, [r6, #0]
    7896:	ldr.w	sl, [pc, #268]	; 79a4 <SdSpiCard::begin(SdSpiConfig)+0x204>
    789a:	ldr	r3, [r3, #64]	; 0x40
    789c:	cmp	r3, sl
    789e:	bne.n	794a <SdSpiCard::begin(SdSpiConfig)+0x1aa>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    78a0:	ldrb	r0, [r6, #22]
    78a2:	cmp	r0, #2
    78a4:	ite	eq
    78a6:	moveq.w	r4, #1073741824	; 0x40000000
    78aa:	movne	r4, #0
    78ac:	b.n	78be <SdSpiCard::begin(SdSpiConfig)+0x11e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    78ae:	ldr	r3, [r7, #0]
    78b0:	str	r3, [sp, #24]
	return ret;
    78b2:	ldr	r3, [sp, #24]
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
    78b4:	uxth	r3, r3
    78b6:	subs	r3, r3, r2
    78b8:	cmp.w	r3, #2000	; 0x7d0
    78bc:	bgt.n	7944 <SdSpiCard::begin(SdSpiConfig)+0x1a4>
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    78be:	movs	r2, #0
    78c0:	movs	r1, #55	; 0x37
    78c2:	mov	r0, r6
    78c4:	bl	7724 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    78c8:	mov	r2, r4
    78ca:	movs	r1, #41	; 0x29
    78cc:	mov	r0, r6
    78ce:	bl	7724 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    78d2:	uxth.w	r2, r8
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    78d6:	cmp	r0, #0
    78d8:	bne.n	78ae <SdSpiCard::begin(SdSpiConfig)+0x10e>
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);

  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    78da:	ldr	r3, [r6, #0]
    78dc:	ldr	r3, [r3, #64]	; 0x40
    78de:	cmp	r3, sl
    78e0:	bne.n	7950 <SdSpiCard::begin(SdSpiConfig)+0x1b0>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    78e2:	ldrb	r0, [r6, #22]
    78e4:	cmp	r0, #2
    78e6:	beq.n	7956 <SdSpiCard::begin(SdSpiConfig)+0x1b6>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    78e8:	ldrb	r3, [r6, #20]
    78ea:	cbz	r3, 78f2 <SdSpiCard::begin(SdSpiConfig)+0x152>
    78ec:	mov	r0, r6
    78ee:	bl	7604 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    78f2:	ldr	r1, [pc, #164]	; (7998 <SdSpiCard::begin(SdSpiConfig)+0x1f8>)
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    78f4:	ldr	r4, [pc, #164]	; (799c <SdSpiCard::begin(SdSpiConfig)+0x1fc>)
    }
  } else {
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    78f6:	movs	r3, #0
    78f8:	b.n	7900 <SdSpiCard::begin(SdSpiConfig)+0x160>
				t = SPI_CTAR_PBR(2) | SPI_CTAR_BR(7) | SPI_CTAR_CSSCK(6);
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
    78fa:	cmp	r0, #23
    78fc:	beq.n	7910 <SdSpiCard::begin(SdSpiConfig)+0x170>
    78fe:	mov	r3, r0
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    7900:	ldrh.w	r2, [r1, #2]!
    7904:	sdiv	r2, r4, r2
    7908:	cmp	r9, r2
				t = SPI_CTAR_PBR(2) | SPI_CTAR_BR(7) | SPI_CTAR_CSSCK(6);
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
    790a:	add.w	r0, r3, #1
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    790e:	bcc.n	78fa <SdSpiCard::begin(SdSpiConfig)+0x15a>
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
    7910:	ldr	r2, [pc, #140]	; (79a0 <SdSpiCard::begin(SdSpiConfig)+0x200>)
    7912:	ldr.w	r3, [r2, r3, lsl #2]
      spiReceive();
    }
  }
  spiStop();
  spiSetSckSpeed(spiConfig.maxSck);
  return true;
    7916:	movs	r0, #1
    7918:	orr.w	r3, r3, #939524096	; 0x38000000
    791c:	str	r3, [r6, #8]

fail:
  spiStop();
  return false;
}
    791e:	add	sp, #40	; 0x28
    7920:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    7924:	movs	r3, #2
    7926:	strb	r3, [r6, #22]
    7928:	movs	r4, #4
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    792a:	mov	r0, r5
    792c:	bl	8ecc <SdSpiArduinoDriver::receive()>
    7930:	subs	r4, #1
#endif  // USE_SD_CRC

  // check SD version
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    type(SD_CARD_TYPE_SD2);
    for (uint8_t i = 0; i < 4; i++) {
    7932:	ands.w	r4, r4, #255	; 0xff
      m_status = spiReceive();
    7936:	strb	r0, [r6, #21]
#endif  // USE_SD_CRC

  // check SD version
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    type(SD_CARD_TYPE_SD2);
    for (uint8_t i = 0; i < 4; i++) {
    7938:	bne.n	792a <SdSpiCard::begin(SdSpiConfig)+0x18a>
      m_status = spiReceive();
    }
    if (m_status != 0XAA) {
    793a:	cmp	r0, #170	; 0xaa
    793c:	beq.n	7894 <SdSpiCard::begin(SdSpiConfig)+0xf4>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    793e:	movs	r3, #6
    7940:	strb	r3, [r6, #19]
    7942:	b.n	786a <SdSpiCard::begin(SdSpiConfig)+0xca>
    7944:	movs	r3, #23
    7946:	strb	r3, [r6, #19]
    7948:	b.n	786a <SdSpiCard::begin(SdSpiConfig)+0xca>
    }
  } else {
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    794a:	mov	r0, r6
    794c:	blx	r3
    794e:	b.n	78a2 <SdSpiCard::begin(SdSpiConfig)+0x102>
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);

  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    7950:	mov	r0, r6
    7952:	blx	r3
    7954:	b.n	78e4 <SdSpiCard::begin(SdSpiConfig)+0x144>
    if (cardCommand(CMD58, 0)) {
    7956:	movs	r2, #0
    7958:	movs	r1, #58	; 0x3a
    795a:	mov	r0, r6
    795c:	bl	7724 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7960:	cbz	r0, 7968 <SdSpiCard::begin(SdSpiConfig)+0x1c8>
    7962:	movs	r3, #18
    7964:	strb	r3, [r6, #19]
    7966:	b.n	786a <SdSpiCard::begin(SdSpiConfig)+0xca>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    7968:	mov	r0, r5
    796a:	bl	8ecc <SdSpiArduinoDriver::receive()>
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
    796e:	and.w	r0, r0, #192	; 0xc0
    7972:	cmp	r0, #192	; 0xc0
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    7974:	itt	eq
    7976:	moveq	r3, #3
    7978:	strbeq	r3, [r6, #22]
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    797a:	mov	r0, r5
    797c:	bl	8ecc <SdSpiArduinoDriver::receive()>
    7980:	mov	r0, r5
    7982:	bl	8ecc <SdSpiArduinoDriver::receive()>
    7986:	mov	r0, r5
    7988:	bl	8ecc <SdSpiArduinoDriver::receive()>
    798c:	b.n	78e8 <SdSpiCard::begin(SdSpiConfig)+0x148>
    798e:	nop
    7990:	.word	0x1fff1f0c
    7994:	.word	0x38005006
    7998:	.word	0x0000fa96
    799c:	.word	0x02dc6c00
    79a0:	.word	0x0000fb5c
    79a4:	.word	0x0000754d

000079a8 <SdSpiCard::readOCR(unsigned long*)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    79a8:	push	{r3, r4, r5, r6, r7, lr}
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    79aa:	ldr	r3, [r0, #0]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    79ac:	mov	r5, r0
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    79ae:	ldr	r3, [r3, #20]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    79b0:	mov	r6, r1
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    79b2:	blx	r3
  if (cardCommand(CMD58, 0)) {
    79b4:	mov	r0, r5
    79b6:	movs	r2, #0
    79b8:	movs	r1, #58	; 0x3a
    79ba:	bl	7724 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    79be:	cbnz	r0, 79dc <SdSpiCard::readOCR(unsigned long*)+0x34>
    79c0:	adds	r7, r5, #4
    79c2:	adds	r4, r6, #4
    79c4:	mov	r0, r7
    79c6:	bl	8ecc <SdSpiArduinoDriver::receive()>
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    p[3 - i] = spiReceive();
    79ca:	strb.w	r0, [r4, #-1]!
  syncDevice();
  if (cardCommand(CMD58, 0)) {
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    79ce:	cmp	r6, r4
    79d0:	bne.n	79c4 <SdSpiCard::readOCR(unsigned long*)+0x1c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    79d2:	ldrb	r4, [r5, #20]
    79d4:	cbnz	r4, 79f2 <SdSpiCard::readOCR(unsigned long*)+0x4a>
    79d6:	movs	r4, #1
  return true;

fail:
  spiStop();
  return false;
}
    79d8:	mov	r0, r4
    79da:	pop	{r3, r4, r5, r6, r7, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    79dc:	ldrb	r4, [r5, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    79de:	movs	r3, #18
    79e0:	strb	r3, [r5, #19]
    79e2:	cmp	r4, #0
    79e4:	beq.n	79d8 <SdSpiCard::readOCR(unsigned long*)+0x30>
    79e6:	mov	r0, r5
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    79e8:	movs	r4, #0
    79ea:	bl	7604 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
}
    79ee:	mov	r0, r4
    79f0:	pop	{r3, r4, r5, r6, r7, pc}
    79f2:	mov	r0, r5
    79f4:	bl	7604 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    79f8:	mov	r0, r4
    79fa:	pop	{r3, r4, r5, r6, r7, pc}

000079fc <SdSpiCard::readRegister(unsigned char, void*)>:
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    79fc:	ldr	r3, [r0, #0]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    79fe:	push	{r4, r5, r6, lr}
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    7a00:	ldr	r3, [r3, #20]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    7a02:	mov	r4, r0
    7a04:	mov	r5, r1
    7a06:	mov	r6, r2
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    7a08:	blx	r3
  if (cardCommand(cmd, 0)) {
    7a0a:	mov	r1, r5
    7a0c:	mov	r0, r4
    7a0e:	movs	r2, #0
    7a10:	bl	7724 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7a14:	cbz	r0, 7a28 <SdSpiCard::readRegister(unsigned char, void*)+0x2c>
    7a16:	movs	r3, #27
    7a18:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7a1a:	ldrb	r0, [r4, #20]
    7a1c:	cbz	r0, 7a26 <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    7a1e:	mov	r0, r4
    7a20:	bl	7604 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    7a24:	movs	r0, #0
}
    7a26:	pop	{r4, r5, r6, pc}
  syncDevice();
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    7a28:	mov	r1, r6
    7a2a:	movs	r2, #16
    7a2c:	mov	r0, r4
    7a2e:	bl	7668 <SdSpiCard::readData(unsigned char*, unsigned int)>
    7a32:	cmp	r0, #0
    7a34:	beq.n	7a1a <SdSpiCard::readRegister(unsigned char, void*)+0x1e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7a36:	ldrb	r5, [r4, #20]
    7a38:	cmp	r5, #0
    7a3a:	beq.n	7a26 <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    7a3c:	mov	r0, r4
    7a3e:	bl	7604 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    7a42:	mov	r0, r5
    7a44:	pop	{r4, r5, r6, pc}
    7a46:	nop

00007a48 <SdSpiCard::readCSD(csd_t*)>:
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    7a48:	mov	r2, r1
    7a4a:	movs	r1, #9
    7a4c:	b.w	79fc <SdSpiCard::readRegister(unsigned char, void*)>

00007a50 <SdSpiCard::readCID(CID*)>:
   * \param[out] cid pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) {
    return readRegister(CMD10, cid);
    7a50:	mov	r2, r1
    7a52:	movs	r1, #10
    7a54:	b.w	79fc <SdSpiCard::readRegister(unsigned char, void*)>

00007a58 <SdSpiCard::sectorCount()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    7a58:	push	{r4, r5, lr}
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    7a5a:	ldr	r3, [r0, #0]
    7a5c:	ldr	r2, [pc, #140]	; (7aec <SdSpiCard::sectorCount()+0x94>)
    7a5e:	ldr	r3, [r3, #52]	; 0x34
    7a60:	cmp	r3, r2
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    7a62:	sub	sp, #20
    7a64:	bne.n	7ac6 <SdSpiCard::sectorCount()+0x6e>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    7a66:	mov	r2, sp
    7a68:	movs	r1, #9
    7a6a:	bl	79fc <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    7a6e:	cbz	r0, 7a80 <SdSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    7a70:	ldrb.w	r3, [sp]
    7a74:	ands.w	r3, r3, #192	; 0xc0
    7a78:	beq.n	7a84 <SdSpiCard::sectorCount()+0x2c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    7a7a:	cmp	r3, #64	; 0x40
    7a7c:	beq.n	7acc <SdSpiCard::sectorCount()+0x74>
    7a7e:	movs	r0, #0
}
    7a80:	add	sp, #20
    7a82:	pop	{r4, r5, pc}
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    7a84:	ldrb.w	r4, [sp, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    7a88:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7a8c:	ldrb.w	r2, [sp, #7]
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    7a90:	ldrb.w	r0, [sp, #10]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    7a94:	ldrb.w	r1, [sp, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    7a98:	ldrb.w	r5, [sp, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7a9c:	and.w	r4, r4, #3
    7aa0:	lsls	r4, r4, #1
    7aa2:	lsls	r2, r2, #2
    7aa4:	and.w	r3, r3, #3
    7aa8:	orr.w	r0, r4, r0, lsr #7
    7aac:	and.w	r1, r1, #15
    7ab0:	orr.w	r3, r2, r3, lsl #10
    7ab4:	add	r0, r1
    7ab6:	orr.w	r3, r3, r5, lsr #6
    7aba:	adds	r3, #1
    7abc:	subs	r0, #7
    7abe:	lsl.w	r0, r3, r0
    7ac2:	add	sp, #20
    7ac4:	pop	{r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    7ac6:	mov	r1, sp
    7ac8:	blx	r3
    7aca:	b.n	7a6e <SdSpiCard::sectorCount()+0x16>
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7acc:	ldrb.w	r3, [sp, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    7ad0:	ldrb.w	r1, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7ad4:	ldrb.w	r0, [sp, #8]
    7ad8:	adds	r2, r3, #1
    7ada:	and.w	r3, r1, #63	; 0x3f
    7ade:	add.w	r3, r2, r3, lsl #16
    7ae2:	add.w	r0, r3, r0, lsl #8
    7ae6:	lsls	r0, r0, #10
}
    7ae8:	add	sp, #20
    7aea:	pop	{r4, r5, pc}
    7aec:	.word	0x00007a49

00007af0 <SdSpiCard::readStart(unsigned long)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    7af0:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    7af2:	ldr	r3, [r0, #0]
    7af4:	ldr	r5, [pc, #68]	; (7b3c <SdSpiCard::readStart(unsigned long)+0x4c>)
    7af6:	ldr	r3, [r3, #64]	; 0x40
    7af8:	cmp	r3, r5
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    7afa:	sub	sp, #12
    7afc:	mov	r4, r0
    7afe:	mov	r2, r1
    7b00:	bne.n	7b32 <SdSpiCard::readStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    7b02:	ldrb	r0, [r0, #22]
  if (type() != SD_CARD_TYPE_SDHC) {
    7b04:	cmp	r0, #3
    sector <<= 9;
    7b06:	it	ne
    7b08:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD18, sector)) {
    7b0a:	movs	r1, #18
    7b0c:	mov	r0, r4
    7b0e:	bl	7724 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7b12:	cbz	r0, 7b2c <SdSpiCard::readStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7b14:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7b16:	movs	r3, #12
    7b18:	strb	r3, [r4, #19]
    7b1a:	cbnz	r0, 7b20 <SdSpiCard::readStart(unsigned long)+0x30>
  return true;

fail:
  spiStop();
  return false;
}
    7b1c:	add	sp, #12
    7b1e:	pop	{r4, r5, pc}
    7b20:	mov	r0, r4
    7b22:	bl	7604 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    7b26:	movs	r0, #0
    7b28:	add	sp, #12
    7b2a:	pop	{r4, r5, pc}
  if (cardCommand(CMD18, sector)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
    7b2c:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    7b2e:	add	sp, #12
    7b30:	pop	{r4, r5, pc}
    7b32:	str	r1, [sp, #4]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    7b34:	blx	r3
    7b36:	ldr	r2, [sp, #4]
    7b38:	b.n	7b04 <SdSpiCard::readStart(unsigned long)+0x14>
    7b3a:	nop
    7b3c:	.word	0x0000754d

00007b40 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    7b40:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7b44:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    7b46:	ldrb	r1, [r0, #16]
    7b48:	cmp	r1, #1
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    7b4a:	mov	r6, r0
    7b4c:	mov	r4, r2
    7b4e:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    7b50:	beq.n	7b62 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!syncDevice()) {
    7b52:	ldr	r3, [r6, #0]
    7b54:	mov	r0, r6
    7b56:	ldr	r3, [r3, #20]
    7b58:	blx	r3
    7b5a:	cbnz	r0, 7b96 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x56>
      return false;
    7b5c:	movs	r0, #0
    7b5e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    7b62:	ldr	r3, [r0, #12]
    7b64:	cmp	r3, r5
    7b66:	bne.n	7b52 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    7b68:	movs	r5, #0
    7b6a:	cbz	r7, 7b86 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    if (!readData(dst, 512)) {
    7b6c:	mov	r1, r4
    7b6e:	mov.w	r2, #512	; 0x200
    7b72:	mov	r0, r6
    7b74:	bl	7668 <SdSpiCard::readData(unsigned char*, unsigned int)>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    7b78:	adds	r5, #1
    7b7a:	add.w	r4, r4, #512	; 0x200
    if (!readData(dst, 512)) {
    7b7e:	cmp	r0, #0
    7b80:	beq.n	7b5c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    7b82:	cmp	r7, r5
    7b84:	bne.n	7b6c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    7b86:	ldr	r3, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    7b88:	ldrb	r2, [r6, #17]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    7b8a:	add	r7, r3
    7b8c:	str	r7, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    7b8e:	cbnz	r2, 7baa <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x6a>
    7b90:	movs	r0, #1
    7b92:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    if (!syncDevice()) {
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
    7b96:	mov	r1, r5
    7b98:	mov	r0, r6
    7b9a:	bl	7af0 <SdSpiCard::readStart(unsigned long)>
    7b9e:	cmp	r0, #0
    7ba0:	beq.n	7b5c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    7ba2:	movs	r3, #1
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    }
    m_curSector = sector;
    7ba4:	str	r5, [r6, #12]
    m_curState = READ_STATE;
    7ba6:	strb	r3, [r6, #16]
    7ba8:	b.n	7b68 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    7baa:	ldr	r3, [r6, #0]
    7bac:	mov	r0, r6
    7bae:	ldr	r3, [r3, #20]
      return false;
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
    7bb0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    7bb4:	bx	r3
    7bb6:	nop

00007bb8 <SdSpiCard::readStop()>:
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    7bb8:	push	{r3, r4, r5, lr}
  if (cardCommand(CMD12, 0)) {
    7bba:	movs	r2, #0
    7bbc:	movs	r1, #12
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    7bbe:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    7bc0:	bl	7724 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7bc4:	ldrb	r4, [r5, #20]
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    7bc6:	cbz	r0, 7bd2 <SdSpiCard::readStop()+0x1a>
    7bc8:	movs	r3, #9
    7bca:	strb	r3, [r5, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7bcc:	cbnz	r4, 7be4 <SdSpiCard::readStop()+0x2c>
  return true;

fail:
  spiStop();
  return false;
}
    7bce:	mov	r0, r4
    7bd0:	pop	{r3, r4, r5, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7bd2:	cbnz	r4, 7bda <SdSpiCard::readStop()+0x22>
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
  return true;
    7bd4:	movs	r4, #1

fail:
  spiStop();
  return false;
}
    7bd6:	mov	r0, r4
    7bd8:	pop	{r3, r4, r5, pc}
    7bda:	mov	r0, r5
    7bdc:	bl	7604 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    7be0:	mov	r0, r4
    7be2:	pop	{r3, r4, r5, pc}
    7be4:	mov	r0, r5
    7be6:	movs	r4, #0
    7be8:	bl	7604 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    7bec:	mov	r0, r4
    7bee:	pop	{r3, r4, r5, pc}

00007bf0 <SdSpiCard::writeStart(unsigned long)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    7bf0:	push	{r4, r5, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    7bf2:	ldr	r3, [r0, #0]
    7bf4:	ldr	r5, [pc, #68]	; (7c3c <SdSpiCard::writeStart(unsigned long)+0x4c>)
    7bf6:	ldr	r3, [r3, #64]	; 0x40
    7bf8:	cmp	r3, r5
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    7bfa:	sub	sp, #12
    7bfc:	mov	r4, r0
    7bfe:	mov	r2, r1
    7c00:	bne.n	7c32 <SdSpiCard::writeStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    7c02:	ldrb	r0, [r0, #22]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    7c04:	cmp	r0, #3
    sector <<= 9;
    7c06:	it	ne
    7c08:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD25, sector)) {
    7c0a:	movs	r1, #25
    7c0c:	mov	r0, r4
    7c0e:	bl	7724 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7c12:	cbz	r0, 7c2c <SdSpiCard::writeStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7c14:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7c16:	movs	r3, #14
    7c18:	strb	r3, [r4, #19]
    7c1a:	cbnz	r0, 7c20 <SdSpiCard::writeStart(unsigned long)+0x30>
  return true;

fail:
  spiStop();
  return false;
}
    7c1c:	add	sp, #12
    7c1e:	pop	{r4, r5, pc}
    7c20:	mov	r0, r4
    7c22:	bl	7604 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    7c26:	movs	r0, #0
    7c28:	add	sp, #12
    7c2a:	pop	{r4, r5, pc}
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
    7c2c:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    7c2e:	add	sp, #12
    7c30:	pop	{r4, r5, pc}
    7c32:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    7c34:	blx	r3
    7c36:	ldr	r2, [sp, #4]
    7c38:	b.n	7c04 <SdSpiCard::writeStart(unsigned long)+0x14>
    7c3a:	nop
    7c3c:	.word	0x0000754d

00007c40 <SdSpiCard::erase(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    7c40:	push	{r4, r5, r6, r7, lr}
  csd_t csd;
  if (!readCSD(&csd)) {
    7c42:	ldr	r3, [r0, #0]
    7c44:	ldr	r7, [pc, #172]	; (7cf4 <SdSpiCard::erase(unsigned long, unsigned long)+0xb4>)
    7c46:	ldr	r3, [r3, #52]	; 0x34
    7c48:	cmp	r3, r7
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    7c4a:	sub	sp, #20
    7c4c:	mov	r4, r0
    7c4e:	mov	r5, r1
    7c50:	mov	r6, r2
    7c52:	bne.n	7cb0 <SdSpiCard::erase(unsigned long, unsigned long)+0x70>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    7c54:	mov	r2, sp
    7c56:	movs	r1, #9
    7c58:	bl	79fc <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  if (!readCSD(&csd)) {
    7c5c:	cbz	r0, 7c84 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    7c5e:	ldrb.w	r3, [sp, #10]
    7c62:	lsls	r2, r3, #25
    7c64:	bpl.n	7c94 <SdSpiCard::erase(unsigned long, unsigned long)+0x54>
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    7c66:	ldrb	r3, [r4, #22]
    7c68:	cmp	r3, #3
    firstSector <<= 9;
    7c6a:	it	ne
    7c6c:	lslne	r5, r5, #9
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
    7c6e:	mov	r2, r5
    7c70:	mov.w	r1, #32
    7c74:	mov	r0, r4
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
    7c76:	it	ne
    7c78:	lslne	r6, r6, #9
  }
  if (cardCommand(CMD32, firstSector)
    7c7a:	bl	7724 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD33, lastSector)
      || cardCommand(CMD38, 0)) {
    7c7e:	cbz	r0, 7cb6 <SdSpiCard::erase(unsigned long, unsigned long)+0x76>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7c80:	movs	r3, #37	; 0x25
    7c82:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7c84:	ldrb	r0, [r4, #20]
    7c86:	cbz	r0, 7c90 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    7c88:	mov	r0, r4
    7c8a:	bl	7604 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    7c8e:	movs	r0, #0
}
    7c90:	add	sp, #20
    7c92:	pop	{r4, r5, r6, r7, pc}
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    7c94:	and.w	r3, r3, #63	; 0x3f
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    7c98:	ldrb.w	r1, [sp, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    7c9c:	lsls	r3, r3, #1
    7c9e:	adds	r2, r6, #1
    7ca0:	orr.w	r3, r3, r1, lsr #7
    7ca4:	orrs	r2, r5
    7ca6:	tst	r3, r2
    7ca8:	beq.n	7c66 <SdSpiCard::erase(unsigned long, unsigned long)+0x26>
    7caa:	movs	r3, #38	; 0x26
    7cac:	strb	r3, [r4, #19]
    7cae:	b.n	7c84 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    7cb0:	mov	r1, sp
    7cb2:	blx	r3
    7cb4:	b.n	7c5c <SdSpiCard::erase(unsigned long, unsigned long)+0x1c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
      || cardCommand(CMD33, lastSector)
    7cb6:	mov	r2, r6
    7cb8:	movs	r1, #33	; 0x21
    7cba:	mov	r0, r4
    7cbc:	bl	7724 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7cc0:	cmp	r0, #0
    7cc2:	bne.n	7c80 <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
      || cardCommand(CMD38, 0)) {
    7cc4:	mov	r2, r0
    7cc6:	movs	r1, #38	; 0x26
    7cc8:	mov	r0, r4
    7cca:	bl	7724 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7cce:	cmp	r0, #0
    7cd0:	bne.n	7c80 <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
    error(SD_CARD_ERROR_ERASE);
    goto fail;
  }
  DBG_BEGIN_TIME(DBG_ERASE_BUSY);
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    7cd2:	movw	r1, #10000	; 0x2710
    7cd6:	mov	r0, r4
    7cd8:	bl	76e8 <SdSpiCard::waitNotBusy(unsigned short)>
    7cdc:	cbnz	r0, 7ce4 <SdSpiCard::erase(unsigned long, unsigned long)+0xa4>
    7cde:	movs	r3, #39	; 0x27
    7ce0:	strb	r3, [r4, #19]
    7ce2:	b.n	7c84 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7ce4:	ldrb	r5, [r4, #20]
    7ce6:	cmp	r5, #0
    7ce8:	beq.n	7c90 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    7cea:	mov	r0, r4
    7cec:	bl	7604 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_ERASE_BUSY);
  spiStop();
  return true;
    7cf0:	mov	r0, r5
    7cf2:	b.n	7c90 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    7cf4:	.word	0x00007a49

00007cf8 <SdSpiCard::writeStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    7cf8:	push	{r4, r5, r6, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    7cfa:	mov.w	r1, #600	; 0x258
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    7cfe:	mov	r5, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    7d00:	bl	76e8 <SdSpiCard::waitNotBusy(unsigned short)>
    7d04:	mov	r6, r0
    7d06:	cbnz	r0, 7d20 <SdSpiCard::writeStop()+0x28>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7d08:	ldrb	r4, [r5, #20]
    7d0a:	movs	r3, #30
    7d0c:	strb	r3, [r5, #19]
    7d0e:	cbnz	r4, 7d14 <SdSpiCard::writeStop()+0x1c>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    7d10:	mov	r0, r4
    7d12:	pop	{r4, r5, r6, pc}
    7d14:	mov	r0, r5
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
    7d16:	mov	r4, r6
    7d18:	bl	7604 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
}
    7d1c:	mov	r0, r4
    7d1e:	pop	{r4, r5, r6, pc}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    7d20:	movs	r1, #253	; 0xfd
    7d22:	adds	r0, r5, #4
    7d24:	bl	8f08 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7d28:	ldrb	r4, [r5, #20]
    7d2a:	cbnz	r4, 7d32 <SdSpiCard::writeStop()+0x3a>
    7d2c:	mov	r4, r6

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    7d2e:	mov	r0, r4
    7d30:	pop	{r4, r5, r6, pc}
    7d32:	mov	r0, r5
    7d34:	bl	7604 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    7d38:	b.n	7d10 <SdSpiCard::writeStop()+0x18>
    7d3a:	nop

00007d3c <SdSpiCard::syncDevice()>:
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    7d3c:	push	{r4, lr}
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    7d3e:	ldrb	r3, [r0, #16]
    7d40:	cmp	r3, #1
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    7d42:	mov	r4, r0
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    7d44:	beq.n	7d52 <SdSpiCard::syncDevice()+0x16>
    if (!SdSpiCard::readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    7d46:	cmp	r3, #2
    7d48:	beq.n	7d5e <SdSpiCard::syncDevice()+0x22>
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    7d4a:	movs	r3, #0
    7d4c:	strb	r3, [r4, #16]
#endif  // ENABLE_DEDICATED_SPI
  return true;
    7d4e:	movs	r0, #1
    7d50:	pop	{r4, pc}
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    if (!SdSpiCard::readStop()) {
    7d52:	bl	7bb8 <SdSpiCard::readStop()>
    7d56:	cmp	r0, #0
    7d58:	bne.n	7d4a <SdSpiCard::syncDevice()+0xe>
      return false;
    7d5a:	movs	r0, #0
    7d5c:	pop	{r4, pc}
    }
  } else if (m_curState == WRITE_STATE) {
    if (!SdSpiCard::writeStop()) {
    7d5e:	bl	7cf8 <SdSpiCard::writeStop()>
    7d62:	cmp	r0, #0
    7d64:	bne.n	7d4a <SdSpiCard::syncDevice()+0xe>
    7d66:	b.n	7d5a <SdSpiCard::syncDevice()+0x1e>

00007d68 <SdSpiCard::writeData(unsigned char, unsigned char const*)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
    7d68:	push	{r4, r5, r6, lr}
    7d6a:	adds	r4, r0, #4
    7d6c:	mov	r6, r2
    7d6e:	mov	r5, r0
    7d70:	mov	r0, r4
    7d72:	bl	8f08 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver.send(buf, n);
    7d76:	mov.w	r2, #512	; 0x200
    7d7a:	mov	r1, r6
    7d7c:	mov	r0, r4
    7d7e:	bl	8f20 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    7d82:	mov	r0, r4
    7d84:	movs	r1, #255	; 0xff
    7d86:	bl	8f08 <SdSpiArduinoDriver::send(unsigned char)>
    7d8a:	mov	r0, r4
    7d8c:	movs	r1, #255	; 0xff
    7d8e:	bl	8f08 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    7d92:	mov	r0, r4
    7d94:	bl	8ecc <SdSpiArduinoDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    7d98:	and.w	r3, r0, #31
    7d9c:	cmp	r3, #5
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    7d9e:	strb	r0, [r5, #21]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    7da0:	beq.n	7db6 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x4e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7da2:	ldrb	r0, [r5, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7da4:	movs	r3, #31
    7da6:	strb	r3, [r5, #19]
    7da8:	cbnz	r0, 7dac <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
  return true;

fail:
  spiStop();
  return false;
}
    7daa:	pop	{r4, r5, r6, pc}
    7dac:	mov	r0, r5
    7dae:	bl	7604 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  }
  return true;

fail:
  spiStop();
  return false;
    7db2:	movs	r0, #0
    7db4:	pop	{r4, r5, r6, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE_DATA);
    goto fail;
  }
  return true;
    7db6:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    7db8:	pop	{r4, r5, r6, pc}
    7dba:	nop

00007dbc <SdSpiCard::writeData(unsigned char const*)>:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    7dbc:	push	{r3, r4, r5, lr}
    7dbe:	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    7dc0:	mov.w	r1, #600	; 0x258
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    7dc4:	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    7dc6:	bl	76e8 <SdSpiCard::waitNotBusy(unsigned short)>
    7dca:	cbnz	r0, 7dde <SdSpiCard::writeData(unsigned char const*)+0x22>
    7dcc:	movs	r3, #35	; 0x23
    7dce:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7dd0:	ldrb	r0, [r4, #20]
    7dd2:	cbz	r0, 7ddc <SdSpiCard::writeData(unsigned char const*)+0x20>
    7dd4:	mov	r0, r4
    7dd6:	bl	7604 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  }
  return true;

fail:
  spiStop();
  return false;
    7dda:	movs	r0, #0
}
    7ddc:	pop	{r3, r4, r5, pc}
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    7dde:	mov	r2, r5
    7de0:	movs	r1, #252	; 0xfc
    7de2:	mov	r0, r4
    7de4:	bl	7d68 <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    7de8:	cmp	r0, #0
    7dea:	beq.n	7dd0 <SdSpiCard::writeData(unsigned char const*)+0x14>
  return true;

fail:
  spiStop();
  return false;
}
    7dec:	pop	{r3, r4, r5, pc}
    7dee:	nop

00007df0 <sdIrs()>:
#endif  // USE_DEBUG_MODE
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
    7df0:	push	{r4}
  SDHC_IRQSIGEN = 0;
    7df2:	ldr	r4, [pc, #28]	; (7e10 <sdIrs()+0x20>)
  m_irqstat = SDHC_IRQSTAT;
    7df4:	ldr	r2, [pc, #28]	; (7e14 <sdIrs()+0x24>)
    7df6:	ldr	r1, [pc, #32]	; (7e18 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    7df8:	ldr	r0, [pc, #32]	; (7e1c <sdIrs()+0x2c>)
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    7dfa:	movs	r3, #0
    7dfc:	str	r3, [r4, #0]
  m_irqstat = SDHC_IRQSTAT;
    7dfe:	ldr	r4, [r2, #0]
    7e00:	str	r4, [r1, #0]
  SDHC_IRQSTAT = m_irqstat;
    7e02:	ldr	r1, [r1, #0]
    7e04:	str	r1, [r2, #0]
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
}
    7e06:	ldr.w	r4, [sp], #4
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    7e0a:	strb	r3, [r0, #0]
}
    7e0c:	bx	lr
    7e0e:	nop
    7e10:	.word	0x400b1038
    7e14:	.word	0x400b1030
    7e18:	.word	0x1fff1ed4
    7e1c:	.word	0x1fff1eec

00007e20 <isBusyCommandComplete()>:
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    7e20:	ldr	r3, [pc, #12]	; (7e30 <isBusyCommandComplete()+0x10>)
    7e22:	ldr	r0, [pc, #16]	; (7e34 <isBusyCommandComplete()+0x14>)
    7e24:	ldr	r3, [r3, #0]
    7e26:	ands	r0, r3
}
    7e28:	clz	r0, r0
    7e2c:	lsrs	r0, r0, #5
    7e2e:	bx	lr
    7e30:	.word	0x400b1030
    7e34:	.word	0x000f0001

00007e38 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    7e38:	ldr	r3, [pc, #8]	; (7e44 <isBusyCommandInhibit()+0xc>)
    7e3a:	ldr	r0, [r3, #0]
}
    7e3c:	and.w	r0, r0, #1
    7e40:	bx	lr
    7e42:	nop
    7e44:	.word	0x400b1024

00007e48 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    7e48:	ldr	r3, [pc, #4]	; (7e50 <isBusyDMA()+0x8>)
    7e4a:	ldrb	r0, [r3, #0]
}
    7e4c:	bx	lr
    7e4e:	nop
    7e50:	.word	0x1fff1eec

00007e54 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    7e54:	ldr	r3, [pc, #12]	; (7e64 <isBusyFifoRead()+0x10>)
    7e56:	ldr	r0, [r3, #0]
    7e58:	eor.w	r0, r0, #2048	; 0x800
}
    7e5c:	ubfx	r0, r0, #11, #1
    7e60:	bx	lr
    7e62:	nop
    7e64:	.word	0x400b1024

00007e68 <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    7e68:	ldr	r3, [pc, #12]	; (7e78 <isBusyFifoWrite()+0x10>)
    7e6a:	ldr	r0, [r3, #0]
    7e6c:	eor.w	r0, r0, #1024	; 0x400
}
    7e70:	ubfx	r0, r0, #10, #1
    7e74:	bx	lr
    7e76:	nop
    7e78:	.word	0x400b1024

00007e7c <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    7e7c:	ldr	r3, [pc, #12]	; (7e8c <isBusyTransferComplete()+0x10>)
    7e7e:	ldr	r0, [pc, #16]	; (7e90 <isBusyTransferComplete()+0x14>)
    7e80:	ldr	r3, [r3, #0]
    7e82:	ands	r0, r3
}
    7e84:	clz	r0, r0
    7e88:	lsrs	r0, r0, #5
    7e8a:	bx	lr
    7e8c:	.word	0x400b1030
    7e90:	.word	0x117f0002

00007e94 <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    7e94:	mov.w	r2, #1000	; 0x3e8
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    7e98:	ldr	r3, [pc, #176]	; (7f4c <setSdclk(unsigned long)+0xb8>)
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    7e9a:	mul.w	r0, r2, r0
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    7e9e:	cmp	r0, r3
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    7ea0:	push	{r4, r5, r6, r7}
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    7ea2:	bhi.n	7f3c <setSdclk(unsigned long)+0xa8>
    7ea4:	ldr	r5, [pc, #168]	; (7f50 <setSdclk(unsigned long)+0xbc>)
    7ea6:	movs	r2, #8
    7ea8:	movs	r1, #1
    sdclkfs <<= 1;
    7eaa:	lsls	r1, r1, #1
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    7eac:	lsls	r3, r1, #4
    7eae:	udiv	r3, r5, r3
    7eb2:	cmp	r0, r3
    7eb4:	ldr	r4, [pc, #152]	; (7f50 <setSdclk(unsigned long)+0xbc>)
    7eb6:	bcs.n	7f34 <setSdclk(unsigned long)+0xa0>
    7eb8:	subs	r2, #1
    7eba:	bne.n	7eaa <setSdclk(unsigned long)+0x16>
    7ebc:	udiv	r4, r4, r1
    7ec0:	lsrs	r3, r1, #1
    7ec2:	lsls	r7, r3, #8
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    7ec4:	cmp	r0, r4
    7ec6:	bcs.n	7f44 <setSdclk(unsigned long)+0xb0>
    7ec8:	ldr	r6, [pc, #132]	; (7f50 <setSdclk(unsigned long)+0xbc>)
    7eca:	lsls	r3, r1, #1
    7ecc:	movs	r2, #1
    7ece:	b.n	7ed2 <setSdclk(unsigned long)+0x3e>
    7ed0:	mov	r3, r4
    7ed2:	udiv	r4, r6, r3
    7ed6:	cmp	r0, r4
    dvs++;
    7ed8:	add.w	r5, r2, #1
    7edc:	add.w	r4, r3, r1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    7ee0:	bcs.n	7f30 <setSdclk(unsigned long)+0x9c>
    7ee2:	cmp	r5, #16
    7ee4:	mov	r2, r5
    7ee6:	bne.n	7ed0 <setSdclk(unsigned long)+0x3c>
    7ee8:	movs	r2, #240	; 0xf0
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    7eea:	ldr	r6, [pc, #104]	; (7f54 <setSdclk(unsigned long)+0xc0>)
  sdclkfs >>= 1;
  dvs--;
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    7eec:	ldr	r4, [pc, #104]	; (7f58 <setSdclk(unsigned long)+0xc4>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    7eee:	ldr	r0, [pc, #96]	; (7f50 <setSdclk(unsigned long)+0xbc>)

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    7ef0:	ldr	r1, [pc, #104]	; (7f5c <setSdclk(unsigned long)+0xc8>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    7ef2:	mov.w	r5, #1000	; 0x3e8
    7ef6:	mul.w	r3, r5, r3
    7efa:	udiv	r3, r0, r3
    7efe:	str	r3, [r6, #0]
  sdclkfs >>= 1;
  dvs--;
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    7f00:	ldr	r3, [r4, #0]
    7f02:	bic.w	r3, r3, #8
    7f06:	str	r3, [r4, #0]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    7f08:	ldr	r0, [r4, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    7f0a:	bic.w	r3, r0, #1044480	; 0xff000
    7f0e:	bic.w	r3, r3, #4080	; 0xff0
    7f12:	orr.w	r3, r3, #917504	; 0xe0000
    7f16:	orrs	r3, r7
    7f18:	orrs	r2, r3
    7f1a:	str	r2, [r4, #0]

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    7f1c:	ldr	r3, [r1, #0]
    7f1e:	lsls	r3, r3, #28
    7f20:	bpl.n	7f1c <setSdclk(unsigned long)+0x88>
  }

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
    7f22:	ldr	r2, [pc, #52]	; (7f58 <setSdclk(unsigned long)+0xc4>)
    7f24:	ldr	r3, [r2, #0]
    7f26:	orr.w	r3, r3, #8
    7f2a:	str	r3, [r2, #0]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    7f2c:	pop	{r4, r5, r6, r7}
    7f2e:	bx	lr
    7f30:	lsls	r2, r2, #4
    7f32:	b.n	7eea <setSdclk(unsigned long)+0x56>
    7f34:	udiv	r4, r4, r1
    7f38:	lsls	r7, r1, #7
    7f3a:	b.n	7ec4 <setSdclk(unsigned long)+0x30>
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    7f3c:	ldr	r4, [pc, #16]	; (7f50 <setSdclk(unsigned long)+0xbc>)
    7f3e:	movs	r7, #0
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
    7f40:	movs	r1, #1
    7f42:	b.n	7ec4 <setSdclk(unsigned long)+0x30>
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    7f44:	mov	r3, r1
    7f46:	movs	r2, #0
    7f48:	b.n	7eea <setSdclk(unsigned long)+0x56>
    7f4a:	nop
    7f4c:	.word	0x005b8d7f
    7f50:	.word	0x05b8d800
    7f54:	.word	0x1fff1ef0
    7f58:	.word	0x400b102c
    7f5c:	.word	0x400b1024

00007f60 <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    7f60:	ldr	r3, [pc, #4]	; (7f68 <SdioCard::errorCode() const+0x8>)
}
    7f62:	ldrb	r0, [r3, #0]
    7f64:	bx	lr
    7f66:	nop
    7f68:	.word	0x1fff09fc

00007f6c <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    7f6c:	ldr	r3, [pc, #4]	; (7f74 <SdioCard::errorData() const+0x8>)
    7f6e:	ldr	r0, [r3, #0]
}
    7f70:	bx	lr
    7f72:	nop
    7f74:	.word	0x1fff1ed4

00007f78 <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    7f78:	push	{r4, r5}
  memcpy(cid, &m_cid, 16);
    7f7a:	ldr	r4, [pc, #20]	; (7f90 <SdioCard::readCID(CID*)+0x18>)
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    7f7c:	mov	r5, r1
  memcpy(cid, &m_cid, 16);
    7f7e:	ldmia	r4!, {r0, r1, r2, r3}
    7f80:	str	r0, [r5, #0]
    7f82:	str	r1, [r5, #4]
    7f84:	str	r2, [r5, #8]
    7f86:	str	r3, [r5, #12]
  return true;
}
    7f88:	movs	r0, #1
    7f8a:	pop	{r4, r5}
    7f8c:	bx	lr
    7f8e:	nop
    7f90:	.word	0x1fff1eb4

00007f94 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    7f94:	push	{r4, r5}
  memcpy(csd, &m_csd, 16);
    7f96:	ldr	r4, [pc, #20]	; (7fac <SdioCard::readCSD(csd_t*)+0x18>)
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    7f98:	mov	r5, r1
  memcpy(csd, &m_csd, 16);
    7f9a:	ldmia	r4!, {r0, r1, r2, r3}
    7f9c:	str	r0, [r5, #0]
    7f9e:	str	r1, [r5, #4]
    7fa0:	str	r2, [r5, #8]
    7fa2:	str	r3, [r5, #12]
  return true;
}
    7fa4:	movs	r0, #1
    7fa6:	pop	{r4, r5}
    7fa8:	bx	lr
    7faa:	nop
    7fac:	.word	0x1fff1edc

00007fb0 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    7fb0:	ldr	r3, [pc, #8]	; (7fbc <SdioCard::readOCR(unsigned long*)+0xc>)
    7fb2:	ldr	r3, [r3, #0]
    7fb4:	str	r3, [r1, #0]
  return true;
}
    7fb6:	movs	r0, #1
    7fb8:	bx	lr
    7fba:	nop
    7fbc:	.word	0x1fff1ecc

00007fc0 <SdioCard::~SdioCard()>:
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    7fc0:	bx	lr
    7fc2:	nop

00007fc4 <waitTimeout(bool (*)())>:
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
    7fc4:	push	{r3, r4, r5, r6, r7, lr}
    7fc6:	mov	r5, r0
  uint32_t m = micros();
    7fc8:	bl	952c <micros>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7fcc:	ldr	r7, [pc, #24]	; (7fe8 <waitTimeout(bool (*)())+0x24>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    7fce:	mov	r6, r0
    7fd0:	b.n	7fdc <waitTimeout(bool (*)())+0x18>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7fd2:	bl	952c <micros>
    7fd6:	subs	r0, r0, r6
    7fd8:	cmp	r0, r7
    7fda:	bhi.n	7fe4 <waitTimeout(bool (*)())+0x20>
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    7fdc:	blx	r5
    7fde:	mov	r4, r0
    7fe0:	cmp	r0, #0
    7fe2:	bne.n	7fd2 <waitTimeout(bool (*)())+0xe>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      return true;
    }
  }
  return false;  // Caller will set errorCode.
}
    7fe4:	mov	r0, r4
    7fe6:	pop	{r3, r4, r5, r6, r7, pc}
    7fe8:	.word	0x000f4240

00007fec <yieldTimeout(bool (*)())>:
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    7fec:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    7ff0:	ldr.w	r8, [pc, #64]	; 8034 <yieldTimeout(bool (*)())+0x48>
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7ff4:	ldr	r7, [pc, #56]	; (8030 <yieldTimeout(bool (*)())+0x44>)
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    7ff6:	str.w	r0, [r8]
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    7ffa:	mov	r5, r0
  m_busyFcn = fcn;
  uint32_t m = micros();
    7ffc:	bl	952c <micros>
    8000:	mov	r6, r0
    8002:	b.n	8012 <yieldTimeout(bool (*)())+0x26>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8004:	bl	952c <micros>
    8008:	subs	r0, r0, r6
    800a:	cmp	r0, r7
    800c:	bhi.n	8024 <yieldTimeout(bool (*)())+0x38>
  Particle.process();
}
#elif defined(ARDUINO)
inline void SysCall::yield() {
  // Use the external Arduino yield() function.
  ::yield();
    800e:	bl	a508 <yield>
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    8012:	blx	r5
    8014:	mov	r4, r0
    8016:	cmp	r0, #0
    8018:	bne.n	8004 <yieldTimeout(bool (*)())+0x18>
      m_busyFcn = 0;
      return true;
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
    801a:	str.w	r0, [r8]
  return false;  // Caller will set errorCode.
}
    801e:	mov	r0, r4
    8020:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    8024:	movs	r3, #0
    8026:	str.w	r3, [r8]
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    802a:	mov	r0, r4
    802c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8030:	.word	0x000f4240
    8034:	.word	0x1fff1ec4

00008038 <SdioCard::~SdioCard()>:
    8038:	push	{r4, lr}
    803a:	movs	r1, #12
    803c:	mov	r4, r0
    803e:	bl	a784 <operator delete(void*, unsigned int)>
    8042:	mov	r0, r4
    8044:	pop	{r4, pc}
    8046:	nop

00008048 <SdioCard::type() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
    8048:	ldr	r3, [pc, #20]	; (8060 <SdioCard::type() const+0x18>)
    804a:	ldrb	r3, [r3, #0]
    804c:	cbz	r3, 805c <SdioCard::type() const+0x14>
    804e:	ldr	r3, [pc, #20]	; (8064 <SdioCard::type() const+0x1c>)
    8050:	ldrb	r3, [r3, #0]
    8052:	cmp	r3, #0
    8054:	ite	ne
    8056:	movne	r0, #3
    8058:	moveq	r0, #2
    805a:	bx	lr
    805c:	movs	r0, #1
}
    805e:	bx	lr
    8060:	.word	0x1fff1eb0
    8064:	.word	0x1fff1ec8

00008068 <cardCommand(unsigned long, unsigned long)>:
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    8068:	push	{r3, r4, r5, lr}
    806a:	mov	r4, r0
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    806c:	ldr	r0, [pc, #60]	; (80ac <cardCommand(unsigned long, unsigned long)+0x44>)
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    806e:	mov	r5, r1
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    8070:	bl	7fc4 <waitTimeout(bool (*)())>
    8074:	cbz	r0, 807a <cardCommand(unsigned long, unsigned long)+0x12>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    8076:	movs	r0, #0
    8078:	pop	{r3, r4, r5, pc}
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    807a:	ldr	r2, [pc, #52]	; (80b0 <cardCommand(unsigned long, unsigned long)+0x48>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    807c:	ldr	r3, [pc, #52]	; (80b4 <cardCommand(unsigned long, unsigned long)+0x4c>)
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    807e:	str	r5, [r2, #0]
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
  if (waitTimeout(isBusyCommandComplete)) {
    8080:	ldr	r0, [pc, #52]	; (80b8 <cardCommand(unsigned long, unsigned long)+0x50>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    8082:	str	r4, [r3, #0]
  if (waitTimeout(isBusyCommandComplete)) {
    8084:	bl	7fc4 <waitTimeout(bool (*)())>
    8088:	cmp	r0, #0
    808a:	bne.n	8076 <cardCommand(unsigned long, unsigned long)+0xe>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
    808c:	ldr	r2, [pc, #44]	; (80bc <cardCommand(unsigned long, unsigned long)+0x54>)
    808e:	ldr	r3, [pc, #48]	; (80c0 <cardCommand(unsigned long, unsigned long)+0x58>)
    8090:	ldr	r1, [r2, #0]
    8092:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    8094:	ldr	r1, [r3, #0]
    8096:	str	r1, [r2, #0]

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    8098:	ldr	r2, [r3, #0]
    809a:	lsls	r2, r2, #31
    809c:	bpl.n	8076 <cardCommand(unsigned long, unsigned long)+0xe>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    809e:	ldr	r3, [r3, #0]
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    80a0:	tst.w	r3, #983040	; 0xf0000
    80a4:	bne.n	8076 <cardCommand(unsigned long, unsigned long)+0xe>
    80a6:	movs	r0, #1
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
    80a8:	pop	{r3, r4, r5, pc}
    80aa:	nop
    80ac:	.word	0x00007e39
    80b0:	.word	0x400b1008
    80b4:	.word	0x400b100c
    80b8:	.word	0x00007e21
    80bc:	.word	0x400b1030
    80c0:	.word	0x1fff1ed4

000080c4 <SdioCard::status()>:
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
    80c4:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    80c6:	ldr	r3, [pc, #16]	; (80d8 <SdioCard::status()+0x14>)
    80c8:	ldr	r0, [pc, #16]	; (80dc <SdioCard::status()+0x18>)
    80ca:	ldr	r1, [r3, #0]
    80cc:	bl	8068 <cardCommand(unsigned long, unsigned long)>
    80d0:	cbz	r0, 80d6 <SdioCard::status()+0x12>
    80d2:	ldr	r3, [pc, #12]	; (80e0 <SdioCard::status()+0x1c>)
    80d4:	ldr	r0, [r3, #0]
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
    80d6:	pop	{r3, pc}
    80d8:	.word	0x1fff1ed0
    80dc:	.word	0x0d1a0000
    80e0:	.word	0x400b1010

000080e4 <readReg16(unsigned long, void*)>:
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    80e4:	push	{r4, r5, lr}
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    80e6:	ldr	r3, [pc, #84]	; (813c <readReg16(unsigned long, void*)+0x58>)
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    80e8:	sub	sp, #20
    80ea:	mov	r5, r1
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    80ec:	ldr	r1, [r3, #0]
    80ee:	bl	8068 <cardCommand(unsigned long, unsigned long)>
    80f2:	cbz	r0, 8136 <readReg16(unsigned long, void*)+0x52>
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    80f4:	ldr	r2, [pc, #72]	; (8140 <readReg16(unsigned long, void*)+0x5c>)
    80f6:	ldr	r3, [pc, #76]	; (8144 <readReg16(unsigned long, void*)+0x60>)
    80f8:	ldr	r2, [r2, #0]
    80fa:	str	r2, [sp, #0]
    80fc:	ldr	r1, [r3, #0]
    80fe:	str	r1, [sp, #4]
    8100:	ldr	r1, [r3, #4]
    8102:	str	r1, [sp, #8]
    8104:	adds	r3, #8
    8106:	add.w	r4, r5, #15
    810a:	ldr	r3, [r3, #0]
    810c:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    810e:	movs	r3, #0
    8110:	b.n	8116 <readReg16(unsigned long, void*)+0x32>
    8112:	ldr.w	r2, [r1, #-16]
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8116:	and.w	r1, r3, #3
    811a:	lsls	r1, r1, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    811c:	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    811e:	lsrs	r2, r1
    8120:	add.w	lr, sp, #16
    8124:	bic.w	r1, r3, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    8128:	cmp	r3, #15
    812a:	add	r1, lr
    d[14 - i] = sr[i/4] >> 8*(i%4);
    812c:	strb.w	r2, [r4, #-1]!
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    8130:	bne.n	8112 <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i/4] >> 8*(i%4);
  }
  d[15] = 0;
    8132:	movs	r3, #0
    8134:	strb	r3, [r5, #15]
  return true;
}
    8136:	add	sp, #20
    8138:	pop	{r4, r5, pc}
    813a:	nop
    813c:	.word	0x1fff1ed0
    8140:	.word	0x400b1010
    8144:	.word	0x400b1014

00008148 <isBusyCMD13()>:
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
    8148:	push	{r3, lr}
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    814a:	ldr	r3, [pc, #28]	; (8168 <isBusyCMD13()+0x20>)
    814c:	ldr	r0, [pc, #28]	; (816c <isBusyCMD13()+0x24>)
    814e:	ldr	r1, [r3, #0]
    8150:	bl	8068 <cardCommand(unsigned long, unsigned long)>
    8154:	cbz	r0, 8164 <isBusyCMD13()+0x1c>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    8156:	ldr	r3, [pc, #24]	; (8170 <isBusyCMD13()+0x28>)
    8158:	ldr	r0, [r3, #0]
    815a:	eor.w	r0, r0, #256	; 0x100
    815e:	ubfx	r0, r0, #8, #1
    8162:	pop	{r3, pc}
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
    8164:	movs	r0, #1
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
    8166:	pop	{r3, pc}
    8168:	.word	0x1fff1ed0
    816c:	.word	0x0d1a0000
    8170:	.word	0x400b1010

00008174 <SdioCard::isBusy()>:
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8174:	ldr	r3, [pc, #16]	; (8188 <SdioCard::isBusy()+0x14>)
    8176:	ldr	r3, [r3, #0]
    8178:	cbz	r3, 817c <SdioCard::isBusy()+0x8>
    817a:	bx	r3
    817c:	ldr	r3, [pc, #12]	; (818c <SdioCard::isBusy()+0x18>)
    817e:	ldrb	r0, [r3, #0]
    8180:	cbnz	r0, 8184 <SdioCard::isBusy()+0x10>
}
    8182:	bx	lr
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8184:	b.w	8148 <isBusyCMD13()>
    8188:	.word	0x1fff1ec4
    818c:	.word	0x1fff1ed8

00008190 <waitDmaStatus() [clone .part.6]>:
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8190:	ldr	r3, [pc, #20]	; (81a8 <waitDmaStatus() [clone .part.6]+0x18>)
    8192:	ldr	r0, [r3, #0]
    8194:	ands.w	r0, r0, #2
    8198:	beq.n	81a6 <waitDmaStatus() [clone .part.6]+0x16>
    819a:	ldr	r3, [r3, #0]
    819c:	ldr	r0, [pc, #12]	; (81ac <waitDmaStatus() [clone .part.6]+0x1c>)
    819e:	ands	r0, r3
    81a0:	clz	r0, r0
    81a4:	lsrs	r0, r0, #5
}
    81a6:	bx	lr
    81a8:	.word	0x1fff1ed4
    81ac:	.word	0x117f0000

000081b0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//------------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    81b0:	push	{r3, r4, r5, r6, r7, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
    81b2:	lsls	r4, r2, #30
    81b4:	bne.n	81b8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8>
    81b6:	cbnz	r3, 81ca <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    81b8:	ldr	r1, [pc, #124]	; (8238 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    81ba:	ldr	r3, [pc, #128]	; (823c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    81bc:	movs	r0, #36	; 0x24
  m_errorLine = line;
    81be:	mov.w	r2, #470	; 0x1d6
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    81c2:	strb	r0, [r1, #0]
  m_errorLine = line;
    81c4:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    81c6:	movs	r0, #0
    81c8:	pop	{r3, r4, r5, r6, r7, pc}
    81ca:	mov	r6, r0
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    81cc:	ldr	r0, [pc, #112]	; (8240 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    81ce:	mov	r4, r3
    81d0:	mov	r7, r1
    81d2:	mov	r5, r2
    81d4:	bl	7fec <yieldTimeout(bool (*)())>
    81d8:	cbnz	r0, 8222 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x72>
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    81da:	ldr	r1, [pc, #104]	; (8244 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    81dc:	ldr	r2, [pc, #104]	; (8248 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    81de:	ldr.w	lr, [pc, #128]	; 8260 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb0>
    81e2:	mov.w	ip, #1
    81e6:	strb.w	ip, [lr]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    81ea:	lsls	r3, r4, #16
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    81ec:	str	r0, [r1, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    81ee:	ldr	r4, [pc, #92]	; (824c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    81f0:	str	r5, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    81f2:	ldr	r2, [pc, #92]	; (8250 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    81f4:	ldr	r1, [pc, #92]	; (8254 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa4>)
    81f6:	ldr	r0, [pc, #96]	; (8258 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>)
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    81f8:	orr.w	r3, r3, #512	; 0x200
    81fc:	str	r3, [r4, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    81fe:	ldrb	r3, [r2, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8200:	str	r0, [r1, #0]
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    8202:	cbnz	r3, 8232 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x82>
    8204:	lsls	r1, r7, #9
    8206:	mov	r0, r6
    8208:	bl	8068 <cardCommand(unsigned long, unsigned long)>
    820c:	cmp	r0, #0
    820e:	beq.n	81c6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    8210:	ldr	r0, [pc, #72]	; (825c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xac>)
    8212:	bl	7fec <yieldTimeout(bool (*)())>
    8216:	cmp	r0, #0
    8218:	bne.n	81c6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    821a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    821e:	b.w	8190 <waitDmaStatus() [clone .part.6]>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8222:	ldr	r1, [pc, #20]	; (8238 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    8224:	ldr	r3, [pc, #20]	; (823c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8226:	movs	r0, #10
  m_errorLine = line;
    8228:	movw	r2, #473	; 0x1d9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    822c:	strb	r0, [r1, #0]
  m_errorLine = line;
    822e:	str	r2, [r3, #0]
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    8230:	b.n	81c6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    8232:	mov	r1, r7
    8234:	b.n	8206 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
    8236:	nop
    8238:	.word	0x1fff09fc
    823c:	.word	0x1fff1ef4
    8240:	.word	0x00008149
    8244:	.word	0x1fff1ed4
    8248:	.word	0x400b1000
    824c:	.word	0x400b1004
    8250:	.word	0x1fff1ec8
    8254:	.word	0x400b1038
    8258:	.word	0x117f0002
    825c:	.word	0x00007e49
    8260:	.word	0x1fff1eec

00008264 <SdioCard::sectorCount()>:
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
}
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
    8264:	push	{r4, r5, r6}
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    8266:	ldr	r1, [pc, #100]	; (82cc <SdioCard::sectorCount()+0x68>)
    8268:	ldrb	r3, [r1, #0]
    826a:	ands.w	r3, r3, #192	; 0xc0
    826e:	beq.n	8294 <SdioCard::sectorCount()+0x30>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    8270:	cmp	r3, #64	; 0x40
    8272:	beq.n	827a <SdioCard::sectorCount()+0x16>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
    8274:	movs	r0, #0
  return sdCardCapacity(&m_csd);
}
    8276:	pop	{r4, r5, r6}
    8278:	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    827a:	ldrb	r3, [r1, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    827c:	ldrb	r4, [r1, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    827e:	ldrb	r0, [r1, #8]
    8280:	adds	r2, r3, #1
    8282:	and.w	r3, r4, #63	; 0x3f
    8286:	add.w	r3, r2, r3, lsl #16
    828a:	add.w	r0, r3, r0, lsl #8
    828e:	lsls	r0, r0, #10
    8290:	pop	{r4, r5, r6}
    8292:	bx	lr
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    8294:	ldrb	r5, [r1, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    8296:	ldrb	r3, [r1, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8298:	ldrb	r2, [r1, #7]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    829a:	ldrb	r4, [r1, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    829c:	ldrb	r6, [r1, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    829e:	ldrb	r0, [r1, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    82a0:	and.w	r1, r5, #3
    82a4:	lsls	r1, r1, #1
    82a6:	and.w	r3, r3, #3
    82aa:	lsls	r2, r2, #2
    82ac:	orr.w	r0, r1, r0, lsr #7
    82b0:	orr.w	r3, r2, r3, lsl #10
    82b4:	and.w	r1, r4, #15
    82b8:	orr.w	r3, r3, r6, lsr #6
    82bc:	add	r0, r1
    82be:	subs	r0, #7
    82c0:	adds	r3, #1
    82c2:	lsl.w	r0, r3, r0
    82c6:	pop	{r4, r5, r6}
    82c8:	bx	lr
    82ca:	nop
    82cc:	.word	0x1fff1edc

000082d0 <SdioCard::erase(unsigned long, unsigned long)>:
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    82d0:	push	{r4, r5, r6, lr}
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    82d2:	ldr	r6, [pc, #176]	; (8384 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    82d4:	ldrb	r3, [r6, #10]
    82d6:	and.w	r0, r3, #64	; 0x40
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    82da:	mov	r5, r2
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    82dc:	cbnz	r0, 82f6 <SdioCard::erase(unsigned long, unsigned long)+0x26>
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    82de:	and.w	r3, r3, #63	; 0x3f
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    82e2:	ldrb	r2, [r6, #11]
    82e4:	and.w	r4, r0, #255	; 0xff
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    82e8:	lsls	r3, r3, #1
    82ea:	adds	r0, r5, #1
    82ec:	orr.w	r3, r3, r2, lsr #7
    82f0:	orrs	r0, r1
    82f2:	tst	r3, r0
    82f4:	bne.n	833a <SdioCard::erase(unsigned long, unsigned long)+0x6a>
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    }
  }
  if (!m_highCapacity) {
    82f6:	ldr	r3, [pc, #144]	; (8388 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    82f8:	ldrb	r3, [r3, #0]
    82fa:	cbnz	r3, 8300 <SdioCard::erase(unsigned long, unsigned long)+0x30>
    firstSector <<= 9;
    82fc:	lsls	r1, r1, #9
    lastSector <<= 9;
    82fe:	lsls	r5, r5, #9
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    8300:	ldr	r0, [pc, #136]	; (838c <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    8302:	bl	8068 <cardCommand(unsigned long, unsigned long)>
    8306:	mov	r4, r0
    8308:	cbnz	r0, 831c <SdioCard::erase(unsigned long, unsigned long)+0x4c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    830a:	ldr	r1, [pc, #132]	; (8390 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    830c:	ldr	r3, [pc, #132]	; (8394 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    830e:	movs	r0, #15
  m_errorLine = line;
    8310:	mov.w	r2, #692	; 0x2b4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8314:	strb	r0, [r1, #0]
  m_errorLine = line;
    8316:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    8318:	mov	r0, r4
    831a:	pop	{r4, r5, r6, pc}
    lastSector <<= 9;
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    831c:	mov	r1, r5
    831e:	ldr	r0, [pc, #120]	; (8398 <SdioCard::erase(unsigned long, unsigned long)+0xc8>)
    8320:	bl	8068 <cardCommand(unsigned long, unsigned long)>
    8324:	mov	r4, r0
    8326:	cbnz	r0, 834c <SdioCard::erase(unsigned long, unsigned long)+0x7c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8328:	ldr	r1, [pc, #100]	; (8390 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    832a:	ldr	r3, [pc, #104]	; (8394 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    832c:	movs	r0, #16
  m_errorLine = line;
    832e:	movw	r2, #695	; 0x2b7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8332:	strb	r0, [r1, #0]
  m_errorLine = line;
    8334:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    8336:	mov	r0, r4
    8338:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    833a:	ldr	r1, [pc, #84]	; (8390 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    833c:	ldr	r3, [pc, #84]	; (8394 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    833e:	movs	r0, #38	; 0x26
  m_errorLine = line;
    8340:	mov.w	r2, #684	; 0x2ac
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8344:	strb	r0, [r1, #0]
  m_errorLine = line;
    8346:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    8348:	mov	r0, r4
    834a:	pop	{r4, r5, r6, pc}
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    834c:	movs	r1, #0
    834e:	ldr	r0, [pc, #76]	; (839c <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    8350:	bl	8068 <cardCommand(unsigned long, unsigned long)>
    8354:	mov	r4, r0
    8356:	cbnz	r0, 8368 <SdioCard::erase(unsigned long, unsigned long)+0x98>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8358:	ldr	r1, [pc, #52]	; (8390 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    835a:	ldr	r3, [pc, #56]	; (8394 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    835c:	movs	r0, #17
  m_errorLine = line;
    835e:	movw	r2, #698	; 0x2ba
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8362:	strb	r0, [r1, #0]
  m_errorLine = line;
    8364:	str	r2, [r3, #0]
    8366:	b.n	8318 <SdioCard::erase(unsigned long, unsigned long)+0x48>
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    8368:	ldr	r0, [pc, #52]	; (83a0 <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    836a:	bl	7fc4 <waitTimeout(bool (*)())>
    836e:	cmp	r0, #0
    8370:	beq.n	8318 <SdioCard::erase(unsigned long, unsigned long)+0x48>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8372:	ldr	r1, [pc, #28]	; (8390 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    8374:	ldr	r3, [pc, #28]	; (8394 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8376:	movs	r0, #39	; 0x27
  m_errorLine = line;
    8378:	movw	r2, #701	; 0x2bd
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    837c:	strb	r0, [r1, #0]
  m_errorLine = line;
    837e:	str	r2, [r3, #0]
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    8380:	movs	r4, #0
    8382:	b.n	8318 <SdioCard::erase(unsigned long, unsigned long)+0x48>
    8384:	.word	0x1fff1edc
    8388:	.word	0x1fff1ec8
    838c:	.word	0x201a0000
    8390:	.word	0x1fff09fc
    8394:	.word	0x1fff1ef4
    8398:	.word	0x211a0000
    839c:	.word	0x261b0000
    83a0:	.word	0x00008149

000083a4 <transferStop()>:
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
    83a4:	push	{r4, r5, r6, lr}
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    83a6:	movs	r1, #0
    83a8:	ldr	r0, [pc, #84]	; (8400 <transferStop()+0x5c>)
    83aa:	bl	8068 <cardCommand(unsigned long, unsigned long)>
    83ae:	mov	r4, r0
    83b0:	cbnz	r0, 83c4 <transferStop()+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    83b2:	ldr	r1, [pc, #80]	; (8404 <transferStop()+0x60>)
  m_errorLine = line;
    83b4:	ldr	r3, [pc, #80]	; (8408 <transferStop()+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    83b6:	movs	r0, #9
  m_errorLine = line;
    83b8:	mov.w	r2, #540	; 0x21c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    83bc:	strb	r0, [r1, #0]
  m_errorLine = line;
    83be:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    83c0:	mov	r0, r4
    83c2:	pop	{r4, r5, r6, pc}
//------------------------------------------------------------------------------
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    83c4:	ldr	r0, [pc, #68]	; (840c <transferStop()+0x68>)
    83c6:	bl	7fec <yieldTimeout(bool (*)())>
    83ca:	cbnz	r0, 83ea <transferStop()+0x46>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    83cc:	ldr	r0, [pc, #64]	; (8410 <transferStop()+0x6c>)
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    83ce:	ldr	r1, [pc, #68]	; (8414 <transferStop()+0x70>)
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    83d0:	ldr	r5, [pc, #68]	; (8418 <transferStop()+0x74>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    83d2:	ldr	r6, [r0, #0]
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    83d4:	ldr	r3, [r1, #0]
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    83d6:	ldr	r2, [r5, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    83d8:	bic.w	r3, r3, #65536	; 0x10000
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    83dc:	orr.w	r2, r2, #67108864	; 0x4000000
    83e0:	str	r2, [r5, #0]
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
    83e2:	str	r6, [r0, #0]
  SDHC_PROCTL = proctl;
    83e4:	str	r3, [r1, #0]
  return true;
}
    83e6:	mov	r0, r4
    83e8:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    83ea:	ldr	r1, [pc, #24]	; (8404 <transferStop()+0x60>)
  m_errorLine = line;
    83ec:	ldr	r3, [pc, #24]	; (8408 <transferStop()+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    83ee:	movs	r0, #10
  m_errorLine = line;
    83f0:	movw	r2, #543	; 0x21f
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    83f4:	strb	r0, [r1, #0]
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    83f6:	movs	r4, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    83f8:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    83fa:	mov	r0, r4
    83fc:	pop	{r4, r5, r6, pc}
    83fe:	nop
    8400:	.word	0x0cdb0000
    8404:	.word	0x1fff09fc
    8408:	.word	0x1fff1ef4
    840c:	.word	0x00008149
    8410:	.word	0x400b1034
    8414:	.word	0x400b1028
    8418:	.word	0x400b102c

0000841c <SdioCard::readStop()>:
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    841c:	b.w	83a4 <transferStop()>

00008420 <SdioCard::writeData(unsigned char const*)>:
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    8420:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    8422:	ldr	r3, [pc, #160]	; (84c4 <SdioCard::writeData(unsigned char const*)+0xa4>)
    8424:	ldr	r3, [r3, #0]
    8426:	lsls	r0, r3, #23
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    8428:	mov	r5, r1
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    842a:	bmi.n	843e <SdioCard::writeData(unsigned char const*)+0x1e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    842c:	ldr	r3, [pc, #152]	; (84c8 <SdioCard::writeData(unsigned char const*)+0xa8>)
    842e:	ldr	r2, [r3, #0]
    8430:	bic.w	r2, r2, #65536	; 0x10000
    8434:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    8436:	ldr	r2, [r3, #0]
    8438:	orr.w	r2, r2, #131072	; 0x20000
    843c:	str	r2, [r3, #0]
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    843e:	ldr	r2, [pc, #136]	; (84c8 <SdioCard::writeData(unsigned char const*)+0xa8>)
  if (waitTimeout(isBusyFifoWrite)) {
    8440:	ldr	r0, [pc, #136]	; (84cc <SdioCard::writeData(unsigned char const*)+0xac>)
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8442:	ldr	r3, [r2, #0]
    8444:	orr.w	r3, r3, #65536	; 0x10000
    8448:	str	r3, [r2, #0]
  if (waitTimeout(isBusyFifoWrite)) {
    844a:	bl	7fc4 <waitTimeout(bool (*)())>
    844e:	cmp	r0, #0
    8450:	bne.n	84b0 <SdioCard::writeData(unsigned char const*)+0x90>
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    8452:	ldr	r4, [pc, #112]	; (84c4 <SdioCard::writeData(unsigned char const*)+0xa4>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    8454:	ldr	r0, [pc, #120]	; (84d0 <SdioCard::writeData(unsigned char const*)+0xb0>)
    8456:	subs	r3, r5, #4
    8458:	add.w	r5, r5, #508	; 0x1fc
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    845c:	ldr	r2, [r4, #0]
    845e:	lsls	r1, r2, #21
    8460:	bpl.n	845c <SdioCard::writeData(unsigned char const*)+0x3c>
    8462:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    8466:	ldr.w	r2, [r3, #4]!
    846a:	str	r2, [r0, #0]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    846c:	cmp	r1, r3
    846e:	bne.n	8466 <SdioCard::writeData(unsigned char const*)+0x46>
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    8470:	cmp	r5, r1
    8472:	mov	r3, r1
    8474:	bne.n	845c <SdioCard::writeData(unsigned char const*)+0x3c>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    8476:	ldr	r0, [pc, #92]	; (84d4 <SdioCard::writeData(unsigned char const*)+0xb4>)
    8478:	bl	7fc4 <waitTimeout(bool (*)())>
    847c:	cbnz	r0, 849e <SdioCard::writeData(unsigned char const*)+0x7e>
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    847e:	ldr	r2, [pc, #88]	; (84d8 <SdioCard::writeData(unsigned char const*)+0xb8>)
    8480:	ldr	r3, [pc, #88]	; (84dc <SdioCard::writeData(unsigned char const*)+0xbc>)
    8482:	ldr	r1, [r2, #0]
    8484:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    8486:	ldr	r1, [r3, #0]
    8488:	str	r1, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    848a:	ldr	r2, [r3, #0]
    848c:	lsls	r2, r2, #30
    848e:	bpl.n	84c0 <SdioCard::writeData(unsigned char const*)+0xa0>
    8490:	ldr	r3, [r3, #0]
    8492:	ldr	r0, [pc, #76]	; (84e0 <SdioCard::writeData(unsigned char const*)+0xc0>)
    8494:	ands	r0, r3
    8496:	clz	r0, r0
    849a:	lsrs	r0, r0, #5
    849c:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    849e:	ldr	r1, [pc, #68]	; (84e4 <SdioCard::writeData(unsigned char const*)+0xc4>)
  m_errorLine = line;
    84a0:	ldr	r3, [pc, #68]	; (84e8 <SdioCard::writeData(unsigned char const*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    84a2:	movs	r0, #35	; 0x23
  m_errorLine = line;
    84a4:	movw	r2, #905	; 0x389
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    84a8:	strb	r0, [r1, #0]
  m_errorLine = line;
    84aa:	str	r2, [r3, #0]
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
    84ac:	movs	r0, #0
    84ae:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    84b0:	ldr	r1, [pc, #48]	; (84e4 <SdioCard::writeData(unsigned char const*)+0xc4>)
  m_errorLine = line;
    84b2:	ldr	r3, [pc, #52]	; (84e8 <SdioCard::writeData(unsigned char const*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    84b4:	movs	r0, #32
  m_errorLine = line;
    84b6:	movw	r2, #894	; 0x37e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    84ba:	strb	r0, [r1, #0]
  m_errorLine = line;
    84bc:	str	r2, [r3, #0]
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    84be:	movs	r0, #0
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    84c0:	pop	{r3, r4, r5, pc}
    84c2:	nop
    84c4:	.word	0x400b1024
    84c8:	.word	0x400b1028
    84cc:	.word	0x00007e69
    84d0:	.word	0x400b1020
    84d4:	.word	0x00007e7d
    84d8:	.word	0x400b1030
    84dc:	.word	0x1fff1ed4
    84e0:	.word	0x117f0000
    84e4:	.word	0x1fff09fc
    84e8:	.word	0x1fff1ef4

000084ec <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    84ec:	push	{r3, r4, r5, lr}
  if (yieldTimeout(isBusyCMD13)) {
    84ee:	ldr	r0, [pc, #80]	; (8540 <SdioCard::writeStart(unsigned long)+0x54>)
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    84f0:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    84f2:	bl	7fec <yieldTimeout(bool (*)())>
    84f6:	cbnz	r0, 852c <SdioCard::writeStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    84f8:	ldr	r2, [pc, #72]	; (8544 <SdioCard::writeStart(unsigned long)+0x58>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    84fa:	ldr	r1, [pc, #76]	; (8548 <SdioCard::writeStart(unsigned long)+0x5c>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    84fc:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    84fe:	ldr	r0, [pc, #76]	; (854c <SdioCard::writeStart(unsigned long)+0x60>)
    8500:	ldr	r5, [pc, #76]	; (8550 <SdioCard::writeStart(unsigned long)+0x64>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8502:	bic.w	r3, r3, #65536	; 0x10000
    8506:	str	r3, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8508:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    850a:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    850c:	cbnz	r3, 8528 <SdioCard::writeStart(unsigned long)+0x3c>
    850e:	lsls	r1, r4, #9
    8510:	ldr	r0, [pc, #64]	; (8554 <SdioCard::writeStart(unsigned long)+0x68>)
    8512:	bl	8068 <cardCommand(unsigned long, unsigned long)>
    8516:	cbnz	r0, 8526 <SdioCard::writeStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8518:	ldr	r1, [pc, #60]	; (8558 <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    851a:	ldr	r3, [pc, #64]	; (855c <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    851c:	movs	r4, #14
  m_errorLine = line;
    851e:	movw	r2, #990	; 0x3de
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8522:	strb	r4, [r1, #0]
  m_errorLine = line;
    8524:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    8526:	pop	{r3, r4, r5, pc}
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8528:	mov	r1, r4
    852a:	b.n	8510 <SdioCard::writeStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    852c:	ldr	r1, [pc, #40]	; (8558 <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    852e:	ldr	r3, [pc, #44]	; (855c <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8530:	movs	r0, #10
  m_errorLine = line;
    8532:	movw	r2, #978	; 0x3d2
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8536:	strb	r0, [r1, #0]
  m_errorLine = line;
    8538:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    853a:	movs	r0, #0
    853c:	pop	{r3, r4, r5, pc}
    853e:	nop
    8540:	.word	0x00008149
    8544:	.word	0x400b1028
    8548:	.word	0x1fff1ec8
    854c:	.word	0x400b1004
    8550:	.word	0xffff0200
    8554:	.word	0x193a0022
    8558:	.word	0x1fff09fc
    855c:	.word	0x1fff1ef4

00008560 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    8560:	push	{r3, r4, r5, r6, r7, lr}
    8562:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    8564:	ldrb	r0, [r0, #8]
    8566:	lsls	r0, r0, #31
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    8568:	mov	r4, r1
    856a:	mov	r5, r2
    856c:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    856e:	bmi.n	8598 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
      return sdError(SD_CARD_ERROR_CMD18);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    8570:	cbz	r3, 8594 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    8572:	add	r7, r1
    8574:	b.n	857a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    8576:	cmp	r4, r7
    8578:	beq.n	8594 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    857a:	ldr	r3, [r6, #0]
    857c:	mov	r2, r5
    857e:	mov	r1, r4
    8580:	ldr	r3, [r3, #8]
    8582:	mov	r0, r6
    8584:	blx	r3
    8586:	adds	r4, #1
    8588:	add.w	r5, r5, #512	; 0x200
    858c:	cmp	r0, #0
    858e:	bne.n	8576 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
        if (!readSector(sector, dst)) {
          return false;  // readSector will set errorCode.
    8590:	movs	r0, #0
    8592:	pop	{r3, r4, r5, r6, r7, pc}
      if (!readSector(sector + i, dst + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    8594:	movs	r0, #1
    8596:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
    8598:	lsls	r0, r2, #30
    859a:	beq.n	85c2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    859c:	cmp	r3, #0
    859e:	beq.n	8594 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    85a0:	add	r7, r1
    85a2:	b.n	85a8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    85a4:	cmp	r7, r4
    85a6:	beq.n	8594 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    85a8:	ldr	r3, [r6, #0]
    85aa:	mov	r2, r5
    85ac:	mov	r1, r4
    85ae:	ldr	r3, [r3, #8]
    85b0:	mov	r0, r6
    85b2:	blx	r3
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    85b4:	adds	r4, #1
    85b6:	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    85ba:	cmp	r0, #0
    85bc:	bne.n	85a4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    85be:	movs	r0, #0
    85c0:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    85c2:	ldr	r0, [pc, #24]	; (85dc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    85c4:	bl	81b0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    85c8:	cmp	r0, #0
    85ca:	bne.n	8594 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    85cc:	ldr	r1, [pc, #16]	; (85e0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
  m_errorLine = line;
    85ce:	ldr	r3, [pc, #20]	; (85e4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    85d0:	movs	r4, #12
  m_errorLine = line;
    85d2:	mov.w	r2, #820	; 0x334
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    85d6:	strb	r4, [r1, #0]
  m_errorLine = line;
    85d8:	str	r2, [r3, #0]
    85da:	pop	{r3, r4, r5, r6, r7, pc}
    85dc:	.word	0x123a0037
    85e0:	.word	0x1fff09fc
    85e4:	.word	0x1fff1ef4

000085e8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    85e8:	push	{r3, r4, r5, r6, r7, lr}
    85ea:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    85ec:	ldrb	r0, [r0, #8]
    85ee:	lsls	r0, r0, #31
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    85f0:	mov	r4, r1
    85f2:	mov	r5, r2
    85f4:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    85f6:	bmi.n	8620 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    85f8:	cbz	r3, 861c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    85fa:	add	r7, r1
    85fc:	b.n	8602 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    85fe:	cmp	r4, r7
    8600:	beq.n	861c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    8602:	ldr	r3, [r6, #0]
    8604:	mov	r2, r5
    8606:	mov	r1, r4
    8608:	ldr	r3, [r3, #24]
    860a:	mov	r0, r6
    860c:	blx	r3
    860e:	adds	r4, #1
    8610:	add.w	r5, r5, #512	; 0x200
    8614:	cmp	r0, #0
    8616:	bne.n	85fe <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
        if (!writeSector(sector, ptr)) {
          return false;  // writeSector will set errorCode.
    8618:	movs	r0, #0
    861a:	pop	{r3, r4, r5, r6, r7, pc}
      if (!writeSector(sector + i, src + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    861c:	movs	r0, #1
    861e:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
    8620:	lsls	r0, r2, #30
    8622:	beq.n	864a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    8624:	cmp	r3, #0
    8626:	beq.n	861c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    8628:	add	r7, r1
    862a:	b.n	8630 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    862c:	cmp	r7, r4
    862e:	beq.n	861c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    8630:	ldr	r3, [r6, #0]
    8632:	mov	r2, r5
    8634:	mov	r1, r4
    8636:	ldr	r3, [r3, #24]
    8638:	mov	r0, r6
    863a:	blx	r3
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    863c:	adds	r4, #1
    863e:	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    8642:	cmp	r0, #0
    8644:	bne.n	862c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    8646:	movs	r0, #0
    8648:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    864a:	ldr	r0, [pc, #24]	; (8664 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    864c:	bl	81b0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    8650:	cmp	r0, #0
    8652:	bne.n	861c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8654:	ldr	r1, [pc, #16]	; (8668 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
  m_errorLine = line;
    8656:	ldr	r3, [pc, #20]	; (866c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8658:	movs	r4, #14
  m_errorLine = line;
    865a:	mov.w	r2, #964	; 0x3c4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    865e:	strb	r4, [r1, #0]
  m_errorLine = line;
    8660:	str	r2, [r3, #0]
    8662:	pop	{r3, r4, r5, r6, r7, pc}
    8664:	.word	0x193a0027
    8668:	.word	0x1fff09fc
    866c:	.word	0x1fff1ef4

00008670 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    8670:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    8672:	ldrb	r3, [r0, #8]
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    8674:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    8676:	lsls	r2, r3, #31
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    8678:	sub.w	sp, sp, #512	; 0x200
    867c:	mov	r6, r1
  if (m_sdioConfig.useDma()) {
    867e:	bpl.n	86b4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
    8680:	lsls	r3, r5, #30
    8682:	beq.n	8692 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x22>
      ptr = aligned;
      memcpy(aligned, src, 512);
    8684:	mov	r1, r5
    8686:	mov	r0, sp
    8688:	mov.w	r2, #512	; 0x200
    868c:	bl	8f84 <memcpy>
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_sdioConfig.useDma()) {
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
      ptr = aligned;
    8690:	mov	r5, sp
      memcpy(aligned, src, 512);
    } else {
      ptr = const_cast<uint8_t*>(src);
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    8692:	mov	r2, r5
    8694:	mov	r1, r6
    8696:	movs	r3, #1
    8698:	ldr	r0, [pc, #120]	; (8714 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>)
    869a:	bl	81b0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    869e:	cbnz	r0, 86ae <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    86a0:	ldr	r1, [pc, #116]	; (8718 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa8>)
  m_errorLine = line;
    86a2:	ldr	r3, [pc, #120]	; (871c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xac>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    86a4:	movs	r4, #13
  m_errorLine = line;
    86a6:	movw	r2, #923	; 0x39b
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    86aa:	strb	r4, [r1, #0]
  m_errorLine = line;
    86ac:	str	r2, [r3, #0]
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    86ae:	add.w	sp, sp, #512	; 0x200
    86b2:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    86b4:	ldrb	r3, [r0, #9]
    86b6:	cmp	r3, #2
    86b8:	mov	r4, r0
    86ba:	beq.n	86ce <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
      if (!syncDevice()) {
    86bc:	ldr	r3, [r4, #0]
    86be:	mov	r0, r4
    86c0:	ldr	r3, [r3, #20]
    86c2:	blx	r3
    86c4:	cbnz	r0, 86fe <SdioCard::writeSector(unsigned long, unsigned char const*)+0x8e>
        return false;
    86c6:	movs	r0, #0
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    86c8:	add.w	sp, sp, #512	; 0x200
    86cc:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    86ce:	ldr	r3, [r0, #4]
    86d0:	cmp	r1, r3
    86d2:	bne.n	86bc <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    }
    if (!writeData(src)) {
    86d4:	ldr	r3, [r4, #0]
    86d6:	mov	r1, r5
    86d8:	ldr	r3, [r3, #68]	; 0x44
    86da:	mov	r0, r4
    86dc:	blx	r3
    86de:	cmp	r0, #0
    86e0:	beq.n	86c6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
      return false;
    }
    m_curSector++;
    86e2:	ldr	r3, [r4, #4]
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    86e4:	ldr	r2, [pc, #56]	; (8720 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb0>)
      m_curState = WRITE_STATE;
    }
    if (!writeData(src)) {
      return false;
    }
    m_curSector++;
    86e6:	adds	r3, #1
    86e8:	str	r3, [r4, #4]
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    86ea:	ldr	r3, [r2, #0]
    86ec:	lsrs	r3, r3, #16
    86ee:	lsls	r3, r3, #16
    86f0:	cmp	r3, #0
    86f2:	bne.n	86ae <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
      if (!syncDevice()) {
    86f4:	ldr	r3, [r4, #0]
    86f6:	mov	r0, r4
    86f8:	ldr	r3, [r3, #20]
    86fa:	blx	r3
    86fc:	b.n	86ae <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
      if (!syncDevice()) {
        return false;
      }
      if (!writeStart(sector )) {
    86fe:	ldr	r3, [r4, #0]
    8700:	mov	r1, r6
    8702:	ldr	r3, [r3, #72]	; 0x48
    8704:	mov	r0, r4
    8706:	blx	r3
    8708:	cmp	r0, #0
    870a:	beq.n	86c6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    870c:	movs	r3, #2
        return false;
      }
      if (!writeStart(sector )) {
        return false;
      }
      m_curSector = sector;
    870e:	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    8710:	strb	r3, [r4, #9]
    8712:	b.n	86d4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x64>
    8714:	.word	0x183a0001
    8718:	.word	0x1fff09fc
    871c:	.word	0x1fff1ef4
    8720:	.word	0x400b1004

00008724 <SdioCard::syncDevice()>:
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    8724:	ldrb	r3, [r0, #9]
    8726:	cmp	r3, #1
    8728:	beq.n	8744 <SdioCard::syncDevice()+0x20>
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    872a:	cmp	r3, #2
    872c:	beq.n	8732 <SdioCard::syncDevice()+0xe>
    if (!writeStop()) {
      return false;
    }
  }
  return true;
}
    872e:	movs	r0, #1
    8730:	bx	lr
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    8732:	movs	r1, #0
    if (!writeStop()) {
    8734:	ldr	r3, [r0, #0]
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    8736:	strb	r1, [r0, #9]
    if (!writeStop()) {
    8738:	ldr	r3, [r3, #76]	; 0x4c
    873a:	ldr	r2, [pc, #20]	; (8750 <SdioCard::syncDevice()+0x2c>)
    873c:	cmp	r3, r2
    873e:	bne.n	874c <SdioCard::syncDevice()+0x28>
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    8740:	b.w	83a4 <transferStop()>
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    8744:	movs	r3, #0
    8746:	strb	r3, [r0, #9]
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
    8748:	b.w	83a4 <transferStop()>
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    if (!writeStop()) {
    874c:	bx	r3
    874e:	nop
    8750:	.word	0x0000841d

00008754 <cardCMD6(unsigned long, unsigned char*)>:

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    8754:	push	{r3, r4, r5, r6, r7, lr}
    8756:	mov	r5, r0
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    8758:	ldr	r0, [pc, #116]	; (87d0 <cardCMD6(unsigned long, unsigned char*)+0x7c>)

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    875a:	mov	r4, r1
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    875c:	bl	7fc4 <waitTimeout(bool (*)())>
    8760:	cbz	r0, 8774 <cardCMD6(unsigned long, unsigned char*)+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8762:	ldr	r1, [pc, #112]	; (87d4 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    8764:	ldr	r3, [pc, #112]	; (87d8 <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8766:	movs	r0, #10
  m_errorLine = line;
    8768:	movw	r2, #377	; 0x179
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    876c:	strb	r0, [r1, #0]
  m_errorLine = line;
    876e:	str	r2, [r3, #0]
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    8770:	movs	r0, #0
    8772:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    8774:	ldr	r2, [pc, #100]	; (87dc <cardCMD6(unsigned long, unsigned char*)+0x88>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    8776:	ldr.w	lr, [pc, #132]	; 87fc <cardCMD6(unsigned long, unsigned char*)+0xa8>
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    877a:	ldr	r7, [pc, #100]	; (87e0 <cardCMD6(unsigned long, unsigned char*)+0x8c>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    877c:	ldr	r6, [pc, #100]	; (87e4 <cardCMD6(unsigned long, unsigned char*)+0x90>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    877e:	ldr	r3, [pc, #104]	; (87e8 <cardCMD6(unsigned long, unsigned char*)+0x94>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    8780:	mov.w	ip, #1
    8784:	strb.w	ip, [lr]
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    8788:	mov	r1, r5
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    878a:	str	r0, [r2, #0]
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    878c:	ldr	r5, [pc, #92]	; (87ec <cardCMD6(unsigned long, unsigned char*)+0x98>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    878e:	ldr	r2, [pc, #96]	; (87f0 <cardCMD6(unsigned long, unsigned char*)+0x9c>)
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    8790:	str	r4, [r7, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    8792:	ldr	r0, [pc, #96]	; (87f4 <cardCMD6(unsigned long, unsigned char*)+0xa0>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    8794:	str	r5, [r6, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8796:	str	r2, [r3, #0]
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    8798:	bl	8068 <cardCommand(unsigned long, unsigned long)>
    879c:	cbnz	r0, 87ae <cardCMD6(unsigned long, unsigned char*)+0x5a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    879e:	ldr	r1, [pc, #52]	; (87d4 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    87a0:	ldr	r3, [pc, #52]	; (87d8 <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    87a2:	movs	r4, #4
  m_errorLine = line;
    87a4:	mov.w	r2, #384	; 0x180
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    87a8:	strb	r4, [r1, #0]
  m_errorLine = line;
    87aa:	str	r2, [r3, #0]
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
    87ac:	pop	{r3, r4, r5, r6, r7, pc}
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    87ae:	ldr	r0, [pc, #72]	; (87f8 <cardCMD6(unsigned long, unsigned char*)+0xa4>)
    87b0:	bl	7fec <yieldTimeout(bool (*)())>
    87b4:	cbnz	r0, 87be <cardCMD6(unsigned long, unsigned char*)+0x6a>
    87b6:	bl	8190 <waitDmaStatus() [clone .part.6]>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    87ba:	cbz	r0, 87be <cardCMD6(unsigned long, unsigned char*)+0x6a>
    return sdError(SD_CARD_ERROR_DMA);
  }
  return true;
}
    87bc:	pop	{r3, r4, r5, r6, r7, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    87be:	ldr	r1, [pc, #20]	; (87d4 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    87c0:	ldr	r3, [pc, #20]	; (87d8 <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    87c2:	movs	r0, #36	; 0x24
  m_errorLine = line;
    87c4:	movw	r2, #387	; 0x183
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    87c8:	strb	r0, [r1, #0]
  m_errorLine = line;
    87ca:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    return sdError(SD_CARD_ERROR_DMA);
    87cc:	movs	r0, #0
    87ce:	pop	{r3, r4, r5, r6, r7, pc}
    87d0:	.word	0x00008149
    87d4:	.word	0x1fff09fc
    87d8:	.word	0x1fff1ef4
    87dc:	.word	0x1fff1ed4
    87e0:	.word	0x400b1000
    87e4:	.word	0x400b1004
    87e8:	.word	0x400b1038
    87ec:	.word	0x00010040
    87f0:	.word	0x117f0002
    87f4:	.word	0x063a0011
    87f8:	.word	0x00007e49
    87fc:	.word	0x1fff1eec

00008800 <SdioCard::begin(SdioConfig)>:
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    8800:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    8804:	ldr	r5, [pc, #568]	; (8a40 <SdioCard::begin(SdioConfig)+0x240>)
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    8806:	ldr	r4, [pc, #572]	; (8a44 <SdioCard::begin(SdioConfig)+0x244>)
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    8808:	ldr.w	r8, [pc, #684]	; 8ab8 <SdioCard::begin(SdioConfig)+0x2b8>
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    880c:	ldr	r7, [pc, #568]	; (8a48 <SdioCard::begin(SdioConfig)+0x248>)
  m_version2 = false;
    880e:	ldr	r6, [pc, #572]	; (8a4c <SdioCard::begin(SdioConfig)+0x24c>)
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
    8810:	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    8812:	movs	r3, #0
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    8814:	strb	r3, [r5, #0]
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    8816:	strb	r3, [r0, #9]
  m_initDone = false;
    8818:	strb.w	r3, [r8]
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    881c:	strb	r3, [r7, #0]
  m_version2 = false;
    881e:	strb	r3, [r6, #0]
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    8820:	ldr	r3, [r4, #0]
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    8822:	ldr	r2, [pc, #556]	; (8a50 <SdioCard::begin(SdioConfig)+0x250>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8824:	ldr	r0, [pc, #556]	; (8a54 <SdioCard::begin(SdioConfig)+0x254>)
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8826:	ldr	r1, [pc, #560]	; (8a58 <SdioCard::begin(SdioConfig)+0x258>)
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8828:	ldr.w	lr, [pc, #656]	; 8abc <SdioCard::begin(SdioConfig)+0x2bc>
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    882c:	orr.w	r3, r3, #201326592	; 0xc000000
    8830:	str	r3, [r4, #0]
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    8832:	ldr	r3, [r2, #0]
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8834:	add.w	r4, r4, #260096	; 0x3f800
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    8838:	orr.w	r3, r3, #131072	; 0x20000
    883c:	str	r3, [r2, #0]
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    883e:	adds	r4, #12
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    8840:	add.w	r2, r2, #428032	; 0x68800
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8844:	movw	r3, #259	; 0x103
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    8848:	addw	r2, r2, #2044	; 0x7fc
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    884c:	str	r3, [r0, #0]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    884e:	str.w	r3, [lr]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8852:	str	r3, [r1, #0]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8854:	str	r3, [r4, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8856:	str	r3, [r0, #16]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8858:	str	r3, [r1, #12]
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    885a:	ldr	r3, [r2, #0]
    885c:	orr.w	r3, r3, #16777216	; 0x1000000
    8860:	orr.w	r3, r3, #32768	; 0x8000
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    8864:	sub	sp, #68	; 0x44
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    8866:	str	r3, [r2, #0]

  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    8868:	ldr	r3, [r2, #0]
    886a:	ldr	r4, [pc, #496]	; (8a5c <SdioCard::begin(SdioConfig)+0x25c>)
    886c:	lsls	r1, r3, #7
    886e:	bmi.n	8868 <SdioCard::begin(SdioConfig)+0x68>
  }

  // Set initial SCK rate.
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    8870:	mov.w	r0, #400	; 0x190
    8874:	bl	7e94 <setSdclk(unsigned long)>
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8878:	ldr.w	ip, [pc, #472]	; 8a54 <SdioCard::begin(SdioConfig)+0x254>
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    887c:	ldr.w	lr, [pc, #572]	; 8abc <SdioCard::begin(SdioConfig)+0x2bc>
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8880:	ldr	r1, [pc, #468]	; (8a58 <SdioCard::begin(SdioConfig)+0x258>)
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8882:	ldr	r2, [pc, #476]	; (8a60 <SdioCard::begin(SdioConfig)+0x260>)
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8884:	ldr	r0, [pc, #476]	; (8a64 <SdioCard::begin(SdioConfig)+0x264>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8886:	movw	r3, #1091	; 0x443
    888a:	str.w	r3, [ip]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    888e:	str.w	r3, [lr]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8892:	mov.w	lr, #1088	; 0x440
    8896:	str.w	lr, [r1]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    889a:	str	r3, [r2, #0]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    889c:	add.w	r2, r2, #409600	; 0x64000
    88a0:	adds	r2, #40	; 0x28

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    88a2:	str	r3, [r0, #0]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    88a4:	ldr	r0, [pc, #448]	; (8a68 <SdioCard::begin(SdioConfig)+0x268>)
  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    88a6:	str	r3, [r1, #12]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    88a8:	str	r0, [r2, #0]

  attachInterruptVector(IRQ_SDHC, sdIrs);
    88aa:	ldr	r1, [pc, #448]	; (8a6c <SdioCard::begin(SdioConfig)+0x26c>)
    88ac:	movs	r0, #81	; 0x51
    88ae:	bl	94e0 <attachInterruptVector>
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    88b2:	ldr	r3, [pc, #444]	; (8a70 <SdioCard::begin(SdioConfig)+0x270>)

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    88b4:	ldr	r1, [pc, #444]	; (8a74 <SdioCard::begin(SdioConfig)+0x274>)
    88b6:	movs	r0, #96	; 0x60
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    88b8:	mov.w	r2, #131072	; 0x20000

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    88bc:	strb	r0, [r1, #0]
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    88be:	str	r2, [r3, #0]

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    88c0:	ldr	r3, [r4, #0]
    88c2:	orr.w	r3, r3, #134217728	; 0x8000000
    88c6:	str	r3, [r4, #0]
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    88c8:	ldr	r1, [r4, #0]
    88ca:	ands.w	r1, r1, #134217728	; 0x8000000
    88ce:	bne.n	88c8 <SdioCard::begin(SdioConfig)+0xc8>
  m_highCapacity = false;
  m_version2 = false;

  // initialize controller.
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    88d0:	mov	r0, r1
    88d2:	bl	8068 <cardCommand(unsigned long, unsigned long)>
    88d6:	mov	r4, r0
    88d8:	cmp	r0, #0
    88da:	beq.n	897a <SdioCard::begin(SdioConfig)+0x17a>
    88dc:	movs	r4, #3
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    88de:	mov.w	r1, #426	; 0x1aa
    88e2:	ldr	r0, [pc, #404]	; (8a78 <SdioCard::begin(SdioConfig)+0x278>)
    88e4:	bl	8068 <cardCommand(unsigned long, unsigned long)>
    88e8:	cmp	r0, #0
    88ea:	bne.n	89a8 <SdioCard::begin(SdioConfig)+0x1a8>
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    88ec:	subs	r4, #1
    88ee:	bne.n	88de <SdioCard::begin(SdioConfig)+0xde>
      }
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    88f0:	ldrb	r3, [r6, #0]
    88f2:	ldr	r6, [pc, #392]	; (8a7c <SdioCard::begin(SdioConfig)+0x27c>)
    88f4:	cmp	r3, #0
    88f6:	it	eq
    88f8:	moveq.w	r6, #3145728	; 0x300000
  int m = micros();
    88fc:	bl	952c <micros>
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    8900:	ldr	r4, [pc, #380]	; (8a80 <SdioCard::begin(SdioConfig)+0x280>)
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
    8902:	mov	r9, r0
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8904:	movs	r1, #0
    8906:	ldr	r0, [pc, #380]	; (8a84 <SdioCard::begin(SdioConfig)+0x284>)
    8908:	bl	8068 <cardCommand(unsigned long, unsigned long)>
    890c:	cbnz	r0, 8924 <SdioCard::begin(SdioConfig)+0x124>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    890e:	ldr	r2, [pc, #376]	; (8a88 <SdioCard::begin(SdioConfig)+0x288>)
    8910:	movw	r1, #621	; 0x26d
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8914:	movs	r3, #23
  m_errorLine = line;
    8916:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8918:	strb	r3, [r5, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    891a:	movs	r4, #0

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    891c:	mov	r0, r4
    891e:	add	sp, #68	; 0x44
    8920:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8924:	mov	r1, r6
    8926:	ldr	r0, [pc, #356]	; (8a8c <SdioCard::begin(SdioConfig)+0x28c>)
    8928:	bl	8068 <cardCommand(unsigned long, unsigned long)>
    892c:	cmp	r0, #0
    892e:	beq.n	890e <SdioCard::begin(SdioConfig)+0x10e>
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    8930:	bl	952c <micros>
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    8934:	ldr	r3, [pc, #344]	; (8a90 <SdioCard::begin(SdioConfig)+0x290>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    8936:	ldr	r2, [pc, #328]	; (8a80 <SdioCard::begin(SdioConfig)+0x280>)
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    8938:	rsb	r0, r9, r0
    893c:	cmp	r0, r3
    893e:	bhi.n	890e <SdioCard::begin(SdioConfig)+0x10e>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    8940:	ldr	r3, [r4, #0]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    8942:	cmp	r3, #0
    8944:	bge.n	8904 <SdioCard::begin(SdioConfig)+0x104>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
    8946:	ldr	r3, [pc, #332]	; (8a94 <SdioCard::begin(SdioConfig)+0x294>)
    8948:	ldr	r1, [r2, #0]
    894a:	str	r1, [r3, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    894c:	ldr	r3, [r2, #0]
    // Is high capacity.
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    894e:	ldr	r0, [pc, #328]	; (8a98 <SdioCard::begin(SdioConfig)+0x298>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    8950:	lsls	r2, r3, #1
    // Is high capacity.
    m_highCapacity = true;
    8952:	it	mi
    8954:	movmi	r3, #1
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    8956:	mov.w	r1, #0
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    // Is high capacity.
    m_highCapacity = true;
    895a:	it	mi
    895c:	strbmi	r3, [r7, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    895e:	bl	8068 <cardCommand(unsigned long, unsigned long)>
    8962:	mov	r4, r0
    8964:	cbnz	r0, 898e <SdioCard::begin(SdioConfig)+0x18e>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8966:	ldr	r2, [pc, #288]	; (8a88 <SdioCard::begin(SdioConfig)+0x288>)
    8968:	movw	r1, #630	; 0x276
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    896c:	movs	r3, #2

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    896e:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8970:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8972:	strb	r3, [r5, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    8974:	add	sp, #68	; 0x44
    8976:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    897a:	ldr	r2, [pc, #268]	; (8a88 <SdioCard::begin(SdioConfig)+0x288>)
    897c:	mov.w	r1, #604	; 0x25c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8980:	movs	r3, #1

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    8982:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8984:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8986:	strb	r3, [r5, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    8988:	add	sp, #68	; 0x44
    898a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    898e:	movs	r1, #0
    8990:	ldr	r0, [pc, #264]	; (8a9c <SdioCard::begin(SdioConfig)+0x29c>)
    8992:	bl	8068 <cardCommand(unsigned long, unsigned long)>
    8996:	mov	r4, r0
    8998:	cbnz	r0, 89ca <SdioCard::begin(SdioConfig)+0x1ca>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    899a:	ldr	r2, [pc, #236]	; (8a88 <SdioCard::begin(SdioConfig)+0x288>)
    899c:	movw	r1, #633	; 0x279
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    89a0:	movs	r3, #3
  m_errorLine = line;
    89a2:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    89a4:	strb	r3, [r5, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
    89a6:	b.n	891c <SdioCard::begin(SdioConfig)+0x11c>
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
    89a8:	ldr	r3, [pc, #212]	; (8a80 <SdioCard::begin(SdioConfig)+0x280>)
    89aa:	ldr	r3, [r3, #0]
    89ac:	cmp.w	r3, #426	; 0x1aa
    89b0:	beq.n	89c2 <SdioCard::begin(SdioConfig)+0x1c2>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    89b2:	ldr	r2, [pc, #212]	; (8a88 <SdioCard::begin(SdioConfig)+0x288>)
    89b4:	movw	r1, #610	; 0x262
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    89b8:	movs	r3, #6
  m_errorLine = line;
    89ba:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    89bc:	strb	r3, [r5, #0]
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
    89be:	movs	r4, #0
    89c0:	b.n	891c <SdioCard::begin(SdioConfig)+0x11c>
      }
      m_version2 = true;
    89c2:	movs	r3, #1
    89c4:	strb	r3, [r6, #0]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    89c6:	ldr	r6, [pc, #180]	; (8a7c <SdioCard::begin(SdioConfig)+0x27c>)
    89c8:	b.n	88fc <SdioCard::begin(SdioConfig)+0xfc>
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    89ca:	ldr	r3, [pc, #180]	; (8a80 <SdioCard::begin(SdioConfig)+0x280>)
    89cc:	ldr	r6, [pc, #208]	; (8aa0 <SdioCard::begin(SdioConfig)+0x2a0>)
    89ce:	ldr	r3, [r3, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    89d0:	ldr	r1, [pc, #208]	; (8aa4 <SdioCard::begin(SdioConfig)+0x2a4>)
    89d2:	ldr	r0, [pc, #212]	; (8aa8 <SdioCard::begin(SdioConfig)+0x2a8>)
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    89d4:	lsrs	r3, r3, #16
    89d6:	lsls	r3, r3, #16
    89d8:	str	r3, [r6, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    89da:	bl	80e4 <readReg16(unsigned long, void*)>
    89de:	mov	r4, r0
    89e0:	cbnz	r0, 89f0 <SdioCard::begin(SdioConfig)+0x1f0>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    89e2:	ldr	r2, [pc, #164]	; (8a88 <SdioCard::begin(SdioConfig)+0x288>)
    89e4:	movw	r1, #638	; 0x27e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    89e8:	movs	r3, #7
  m_errorLine = line;
    89ea:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    89ec:	strb	r3, [r5, #0]
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
    89ee:	b.n	891c <SdioCard::begin(SdioConfig)+0x11c>
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    89f0:	ldr	r1, [pc, #184]	; (8aac <SdioCard::begin(SdioConfig)+0x2ac>)
    89f2:	ldr	r0, [pc, #188]	; (8ab0 <SdioCard::begin(SdioConfig)+0x2b0>)
    89f4:	bl	80e4 <readReg16(unsigned long, void*)>
    89f8:	mov	r4, r0
    89fa:	cbnz	r0, 8a0a <SdioCard::begin(SdioConfig)+0x20a>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    89fc:	ldr	r2, [pc, #136]	; (8a88 <SdioCard::begin(SdioConfig)+0x288>)
    89fe:	movw	r1, #641	; 0x281
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8a02:	movs	r3, #8
  m_errorLine = line;
    8a04:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8a06:	strb	r3, [r5, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
    8a08:	b.n	891c <SdioCard::begin(SdioConfig)+0x11c>
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    8a0a:	ldr	r1, [r6, #0]
    8a0c:	ldr	r0, [pc, #164]	; (8ab4 <SdioCard::begin(SdioConfig)+0x2b4>)
    8a0e:	bl	8068 <cardCommand(unsigned long, unsigned long)>
    8a12:	mov	r4, r0
    8a14:	cbnz	r0, 8a24 <SdioCard::begin(SdioConfig)+0x224>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8a16:	ldr	r2, [pc, #112]	; (8a88 <SdioCard::begin(SdioConfig)+0x288>)
    8a18:	mov.w	r1, #644	; 0x284
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8a1c:	movs	r3, #5
  m_errorLine = line;
    8a1e:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8a20:	strb	r3, [r5, #0]
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
    8a22:	b.n	891c <SdioCard::begin(SdioConfig)+0x11c>
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8a24:	ldr	r1, [r6, #0]
    8a26:	ldr	r0, [pc, #92]	; (8a84 <SdioCard::begin(SdioConfig)+0x284>)
    8a28:	bl	8068 <cardCommand(unsigned long, unsigned long)>
    8a2c:	cmp	r0, #0
    8a2e:	bne.n	8ac0 <SdioCard::begin(SdioConfig)+0x2c0>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8a30:	ldr	r2, [pc, #84]	; (8a88 <SdioCard::begin(SdioConfig)+0x288>)
    8a32:	mov.w	r1, #648	; 0x288
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8a36:	movs	r3, #20
  m_errorLine = line;
    8a38:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8a3a:	strb	r3, [r5, #0]
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    8a3c:	movs	r4, #0
    8a3e:	b.n	891c <SdioCard::begin(SdioConfig)+0x11c>
    8a40:	.word	0x1fff09fc
    8a44:	.word	0x4000d800
    8a48:	.word	0x1fff1ec8
    8a4c:	.word	0x1fff1eb0
    8a50:	.word	0x40048030
    8a54:	.word	0x4004d000
    8a58:	.word	0x4004d008
    8a5c:	.word	0x400b102c
    8a60:	.word	0x4004d00c
    8a64:	.word	0x4004d010
    8a68:	.word	0x117f000b
    8a6c:	.word	0x00007df1
    8a70:	.word	0xe000e108
    8a74:	.word	0xe000e451
    8a78:	.word	0x081a0000
    8a7c:	.word	0x40300000
    8a80:	.word	0x400b1010
    8a84:	.word	0x371a0000
    8a88:	.word	0x1fff1ef4
    8a8c:	.word	0x29020000
    8a90:	.word	0x000f4240
    8a94:	.word	0x1fff1ecc
    8a98:	.word	0x02090000
    8a9c:	.word	0x031a0000
    8aa0:	.word	0x1fff1ed0
    8aa4:	.word	0x1fff1edc
    8aa8:	.word	0x09090000
    8aac:	.word	0x1fff1eb4
    8ab0:	.word	0x0a090000
    8ab4:	.word	0x071b0000
    8ab8:	.word	0x1fff1ed8
    8abc:	.word	0x4004d004
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8ac0:	movs	r1, #2
    8ac2:	ldr	r0, [pc, #168]	; (8b6c <SdioCard::begin(SdioConfig)+0x36c>)
    8ac4:	bl	8068 <cardCommand(unsigned long, unsigned long)>
    8ac8:	mov	r4, r0
    8aca:	cmp	r0, #0
    8acc:	beq.n	8a30 <SdioCard::begin(SdioConfig)+0x230>
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    8ace:	ldr	r3, [pc, #160]	; (8b70 <SdioCard::begin(SdioConfig)+0x370>)
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    8ad0:	ldr	r0, [pc, #160]	; (8b74 <SdioCard::begin(SdioConfig)+0x374>)
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    8ad2:	ldr	r2, [r3, #0]
    8ad4:	bic.w	r2, r2, #6
    8ad8:	str	r2, [r3, #0]
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    8ada:	ldr	r2, [r3, #0]

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    8adc:	mov.w	r5, #1048592	; 0x100010
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    8ae0:	orr.w	r2, r2, #2
    8ae4:	str	r2, [r3, #0]
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    8ae6:	mov	r1, sp
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    8ae8:	str	r5, [r0, #0]

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    8aea:	mvn.w	r0, #4278190080	; 0xff000000
    8aee:	bl	8754 <cardCMD6(unsigned long, unsigned char*)>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    8af2:	cbz	r0, 8afc <SdioCard::begin(SdioConfig)+0x2fc>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    8af4:	ldrb.w	r3, [sp, #13]
    8af8:	lsls	r3, r3, #30
    8afa:	bmi.n	8b4e <SdioCard::begin(SdioConfig)+0x34e>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    kHzSdClk = 50000;
  } else {
    kHzSdClk = 25000;
    8afc:	movw	r0, #25000	; 0x61a8
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8b00:	ldr.w	fp, [pc, #132]	; 8b88 <SdioCard::begin(SdioConfig)+0x388>
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8b04:	ldr.w	sl, [pc, #132]	; 8b8c <SdioCard::begin(SdioConfig)+0x38c>
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8b08:	ldr.w	r9, [pc, #132]	; 8b90 <SdioCard::begin(SdioConfig)+0x390>
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8b0c:	ldr	r7, [pc, #104]	; (8b78 <SdioCard::begin(SdioConfig)+0x378>)
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8b0e:	ldr	r6, [pc, #108]	; (8b7c <SdioCard::begin(SdioConfig)+0x37c>)
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8b10:	ldr	r5, [pc, #108]	; (8b80 <SdioCard::begin(SdioConfig)+0x380>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8b12:	movw	r3, #259	; 0x103
    8b16:	str.w	r3, [fp]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8b1a:	str.w	r3, [sl]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8b1e:	str.w	r3, [r9]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8b22:	str	r3, [r7, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8b24:	str	r3, [r6, #0]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8b26:	str	r3, [r5, #0]
  }
  // Disable GPIO.
  enableGPIO(false);

  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);
    8b28:	bl	7e94 <setSdclk(unsigned long)>
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8b2c:	movw	r3, #1091	; 0x443
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8b30:	mov.w	r1, #1088	; 0x440
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    8b34:	movs	r2, #1
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8b36:	str.w	r3, [fp]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8b3a:	str.w	r3, [sl]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8b3e:	str.w	r1, [r9]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8b42:	str	r3, [r7, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8b44:	str	r3, [r6, #0]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8b46:	str	r3, [r5, #0]
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    8b48:	strb.w	r2, [r8]
  return true;
    8b4c:	b.n	891c <SdioCard::begin(SdioConfig)+0x11c>

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    8b4e:	mov	r1, sp
    8b50:	ldr	r0, [pc, #48]	; (8b84 <SdioCard::begin(SdioConfig)+0x384>)
    8b52:	bl	8754 <cardCMD6(unsigned long, unsigned char*)>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    8b56:	cmp	r0, #0
    8b58:	beq.n	8afc <SdioCard::begin(SdioConfig)+0x2fc>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    8b5a:	ldrb.w	r3, [sp, #16]
    8b5e:	and.w	r3, r3, #15
    8b62:	cmp	r3, #1
    8b64:	bne.n	8afc <SdioCard::begin(SdioConfig)+0x2fc>
    kHzSdClk = 50000;
    8b66:	movw	r0, #50000	; 0xc350
    8b6a:	b.n	8b00 <SdioCard::begin(SdioConfig)+0x300>
    8b6c:	.word	0x061a0000
    8b70:	.word	0x400b1028
    8b74:	.word	0x400b1044
    8b78:	.word	0x4004d00c
    8b7c:	.word	0x4004d010
    8b80:	.word	0x4004d014
    8b84:	.word	0x80fffff1
    8b88:	.word	0x4004d000
    8b8c:	.word	0x4004d004
    8b90:	.word	0x4004d008

00008b94 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    8b94:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    8b96:	ldr	r3, [pc, #160]	; (8c38 <SdioCard::readData(unsigned char*)+0xa4>)
    8b98:	ldr	r3, [r3, #0]
    8b9a:	lsls	r0, r3, #22
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    8b9c:	mov	r5, r1
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    8b9e:	bmi.n	8bbe <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8ba0:	ldr	r3, [pc, #152]	; (8c3c <SdioCard::readData(unsigned char*)+0xa8>)
    8ba2:	ldr	r2, [r3, #0]
    8ba4:	bic.w	r2, r2, #65536	; 0x10000
    8ba8:	str	r2, [r3, #0]
    noInterrupts();
    8baa:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    8bac:	ldr	r2, [r3, #0]
    8bae:	orr.w	r2, r2, #131072	; 0x20000
    8bb2:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8bb4:	ldr	r2, [r3, #0]
    8bb6:	orr.w	r2, r2, #65536	; 0x10000
    8bba:	str	r2, [r3, #0]
    interrupts();
    8bbc:	cpsie	i
  }
  if (waitTimeout(isBusyFifoRead)) {
    8bbe:	ldr	r0, [pc, #128]	; (8c40 <SdioCard::readData(unsigned char*)+0xac>)
    8bc0:	bl	7fc4 <waitTimeout(bool (*)())>
    8bc4:	cmp	r0, #0
    8bc6:	bne.n	8c26 <SdioCard::readData(unsigned char*)+0x92>
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    8bc8:	ldr	r4, [pc, #108]	; (8c38 <SdioCard::readData(unsigned char*)+0xa4>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    8bca:	ldr	r0, [pc, #120]	; (8c44 <SdioCard::readData(unsigned char*)+0xb0>)
    8bcc:	subs	r3, r5, #4
    8bce:	add.w	r5, r5, #508	; 0x1fc
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    8bd2:	ldr	r2, [r4, #0]
    8bd4:	lsls	r1, r2, #20
    8bd6:	bpl.n	8bd2 <SdioCard::readData(unsigned char*)+0x3e>
    8bd8:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    8bdc:	ldr	r2, [r0, #0]
    8bde:	str.w	r2, [r3, #4]!
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    8be2:	cmp	r1, r3
    8be4:	bne.n	8bdc <SdioCard::readData(unsigned char*)+0x48>
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    8be6:	cmp	r5, r1
    8be8:	mov	r3, r1
    8bea:	bne.n	8bd2 <SdioCard::readData(unsigned char*)+0x3e>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    8bec:	ldr	r0, [pc, #88]	; (8c48 <SdioCard::readData(unsigned char*)+0xb4>)
    8bee:	bl	7fc4 <waitTimeout(bool (*)())>
    8bf2:	cbnz	r0, 8c14 <SdioCard::readData(unsigned char*)+0x80>
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    8bf4:	ldr	r2, [pc, #84]	; (8c4c <SdioCard::readData(unsigned char*)+0xb8>)
    8bf6:	ldr	r3, [pc, #88]	; (8c50 <SdioCard::readData(unsigned char*)+0xbc>)
    8bf8:	ldr	r1, [r2, #0]
    8bfa:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    8bfc:	ldr	r1, [r3, #0]
    8bfe:	str	r1, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8c00:	ldr	r2, [r3, #0]
    8c02:	lsls	r2, r2, #30
    8c04:	bpl.n	8c36 <SdioCard::readData(unsigned char*)+0xa2>
    8c06:	ldr	r3, [r3, #0]
    8c08:	ldr	r0, [pc, #72]	; (8c54 <SdioCard::readData(unsigned char*)+0xc0>)
    8c0a:	ands	r0, r3
    8c0c:	clz	r0, r0
    8c10:	lsrs	r0, r0, #5
    8c12:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8c14:	ldr	r1, [pc, #64]	; (8c58 <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    8c16:	ldr	r3, [pc, #68]	; (8c5c <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8c18:	movs	r0, #29
  m_errorLine = line;
    8c1a:	movw	r2, #759	; 0x2f7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8c1e:	strb	r0, [r1, #0]
  m_errorLine = line;
    8c20:	str	r2, [r3, #0]
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    8c22:	movs	r0, #0
    8c24:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8c26:	ldr	r1, [pc, #48]	; (8c58 <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    8c28:	ldr	r3, [pc, #48]	; (8c5c <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8c2a:	movs	r0, #26
  m_errorLine = line;
    8c2c:	mov.w	r2, #748	; 0x2ec
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8c30:	strb	r0, [r1, #0]
  m_errorLine = line;
    8c32:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    8c34:	movs	r0, #0
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    8c36:	pop	{r3, r4, r5, pc}
    8c38:	.word	0x400b1024
    8c3c:	.word	0x400b1028
    8c40:	.word	0x00007e55
    8c44:	.word	0x400b1020
    8c48:	.word	0x00007e7d
    8c4c:	.word	0x400b1030
    8c50:	.word	0x1fff1ed4
    8c54:	.word	0x117f0000
    8c58:	.word	0x1fff09fc
    8c5c:	.word	0x1fff1ef4

00008c60 <SdioCard::readStart(unsigned long)>:
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    8c60:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    8c62:	ldr	r0, [pc, #80]	; (8cb4 <SdioCard::readStart(unsigned long)+0x54>)
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    8c64:	mov	r4, r1
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    8c66:	bl	7fec <yieldTimeout(bool (*)())>
    8c6a:	cbnz	r0, 8ca0 <SdioCard::readStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8c6c:	ldr	r2, [pc, #72]	; (8cb8 <SdioCard::readStart(unsigned long)+0x58>)
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8c6e:	ldr	r1, [pc, #76]	; (8cbc <SdioCard::readStart(unsigned long)+0x5c>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8c70:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    8c72:	ldr	r0, [pc, #76]	; (8cc0 <SdioCard::readStart(unsigned long)+0x60>)
    8c74:	ldr	r5, [pc, #76]	; (8cc4 <SdioCard::readStart(unsigned long)+0x64>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8c76:	orr.w	r3, r3, #65536	; 0x10000
    8c7a:	str	r3, [r2, #0]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8c7c:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    8c7e:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8c80:	cbnz	r3, 8c9c <SdioCard::readStart(unsigned long)+0x3c>
    8c82:	lsls	r1, r4, #9
    8c84:	ldr	r0, [pc, #64]	; (8cc8 <SdioCard::readStart(unsigned long)+0x68>)
    8c86:	bl	8068 <cardCommand(unsigned long, unsigned long)>
    8c8a:	cbnz	r0, 8c9a <SdioCard::readStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8c8c:	ldr	r1, [pc, #60]	; (8ccc <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    8c8e:	ldr	r3, [pc, #64]	; (8cd0 <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8c90:	movs	r4, #12
  m_errorLine = line;
    8c92:	mov.w	r2, #848	; 0x350
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8c96:	strb	r4, [r1, #0]
  m_errorLine = line;
    8c98:	str	r2, [r3, #0]

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD18);
  }
  return true;
}
    8c9a:	pop	{r3, r4, r5, pc}
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8c9c:	mov	r1, r4
    8c9e:	b.n	8c84 <SdioCard::readStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8ca0:	ldr	r1, [pc, #40]	; (8ccc <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    8ca2:	ldr	r3, [pc, #44]	; (8cd0 <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8ca4:	movs	r0, #10
  m_errorLine = line;
    8ca6:	mov.w	r2, #836	; 0x344
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8caa:	strb	r0, [r1, #0]
  m_errorLine = line;
    8cac:	str	r2, [r3, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    8cae:	movs	r0, #0
    8cb0:	pop	{r3, r4, r5, pc}
    8cb2:	nop
    8cb4:	.word	0x00008149
    8cb8:	.word	0x400b1028
    8cbc:	.word	0x1fff1ec8
    8cc0:	.word	0x400b1004
    8cc4:	.word	0xffff0200
    8cc8:	.word	0x123a0032
    8ccc:	.word	0x1fff09fc
    8cd0:	.word	0x1fff1ef4

00008cd4 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    8cd4:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    8cd6:	ldrb	r3, [r0, #8]
    8cd8:	lsls	r4, r3, #31
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    8cda:	sub.w	sp, sp, #512	; 0x200
    8cde:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    8ce0:	bpl.n	8d08 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    8ce2:	lsls	r3, r2, #30
    8ce4:	beq.n	8d26 <SdioCard::readSector(unsigned long, unsigned char*)+0x52>

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    8ce6:	mov	r2, sp
    8ce8:	movs	r3, #1
    8cea:	ldr	r0, [pc, #168]	; (8d94 <SdioCard::readSector(unsigned long, unsigned char*)+0xc0>)
    8cec:	bl	81b0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    8cf0:	cbz	r0, 8d32 <SdioCard::readSector(unsigned long, unsigned char*)+0x5e>
      return sdError(SD_CARD_ERROR_CMD17);
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    8cf2:	mov	r1, sp
    8cf4:	mov	r0, r5
    8cf6:	mov.w	r2, #512	; 0x200
    8cfa:	bl	8f84 <memcpy>
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
    8cfe:	movs	r5, #1
}
    8d00:	mov	r0, r5
    8d02:	add.w	sp, sp, #512	; 0x200
    8d06:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    8d08:	ldrb	r3, [r0, #9]
    8d0a:	cmp	r3, #1
    8d0c:	mov	r4, r0
    8d0e:	mov	r6, r1
    8d10:	beq.n	8d4a <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
      if (!syncDevice()) {
    8d12:	ldr	r3, [r4, #0]
    8d14:	mov	r0, r4
    8d16:	ldr	r3, [r3, #20]
    8d18:	blx	r3
    8d1a:	cbnz	r0, 8d70 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
        return false;
    8d1c:	movs	r5, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    8d1e:	mov	r0, r5
    8d20:	add.w	sp, sp, #512	; 0x200
    8d24:	pop	{r4, r5, r6, pc}
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    8d26:	movs	r3, #1
    8d28:	ldr	r0, [pc, #104]	; (8d94 <SdioCard::readSector(unsigned long, unsigned char*)+0xc0>)
    8d2a:	bl	81b0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    8d2e:	cmp	r0, #0
    8d30:	bne.n	8cfe <SdioCard::readSector(unsigned long, unsigned char*)+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d32:	ldr	r1, [pc, #100]	; (8d98 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>)
  m_errorLine = line;
    8d34:	ldr	r3, [pc, #100]	; (8d9c <SdioCard::readSector(unsigned long, unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d36:	movs	r0, #11
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD17);
    8d38:	movs	r5, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8d3a:	movw	r2, #778	; 0x30a
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d3e:	strb	r0, [r1, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    8d40:	mov	r0, r5
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8d42:	str	r2, [r3, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    8d44:	add.w	sp, sp, #512	; 0x200
    8d48:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    8d4a:	ldr	r3, [r0, #4]
    8d4c:	cmp	r1, r3
    8d4e:	bne.n	8d12 <SdioCard::readSector(unsigned long, unsigned char*)+0x3e>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    }
    if (!readData(dst)) {
    8d50:	mov	r1, r5
    8d52:	mov	r0, r4
    8d54:	bl	8b94 <SdioCard::readData(unsigned char*)>
    8d58:	mov	r5, r0
    8d5a:	cmp	r0, #0
    8d5c:	beq.n	8d1c <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    8d5e:	ldr	r3, [pc, #64]	; (8da0 <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>)
    8d60:	ldr	r3, [r3, #0]
    8d62:	lsrs	r3, r3, #16
    8d64:	lsls	r3, r3, #16
    8d66:	cbz	r3, 8d84 <SdioCard::readSector(unsigned long, unsigned char*)+0xb0>
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
    8d68:	ldr	r3, [r4, #4]
    8d6a:	adds	r3, #1
    8d6c:	str	r3, [r4, #4]
    8d6e:	b.n	8d1e <SdioCard::readSector(unsigned long, unsigned char*)+0x4a>
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
      if (!syncDevice()) {
        return false;
      }
      if (!readStart(sector)) {
    8d70:	mov	r1, r6
    8d72:	mov	r0, r4
    8d74:	bl	8c60 <SdioCard::readStart(unsigned long)>
    8d78:	cmp	r0, #0
    8d7a:	beq.n	8d1c <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    8d7c:	movs	r3, #1
        return false;
      }
      if (!readStart(sector)) {
        return false;
      }
      m_curSector = sector;
    8d7e:	str	r6, [r4, #4]
      m_curState = READ_STATE;
    8d80:	strb	r3, [r4, #9]
    8d82:	b.n	8d50 <SdioCard::readSector(unsigned long, unsigned char*)+0x7c>
    if (!readData(dst)) {
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
      if (!syncDevice()) {
    8d84:	ldr	r3, [r4, #0]
    8d86:	mov	r0, r4
    8d88:	ldr	r3, [r3, #20]
    8d8a:	blx	r3
    8d8c:	cmp	r0, #0
    8d8e:	bne.n	8d68 <SdioCard::readSector(unsigned long, unsigned char*)+0x94>
    8d90:	b.n	8d1c <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
    8d92:	nop
    8d94:	.word	0x113a0011
    8d98:	.word	0x1fff09fc
    8d9c:	.word	0x1fff1ef4
    8da0:	.word	0x400b1004

00008da4 <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    8da4:	push	{r4}
  m_spi->beginTransaction(m_spiSettings);
    8da6:	ldr	r3, [r0, #0]
    8da8:	ldr	r2, [r0, #4]

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    8daa:	ldrb	r1, [r3, #11]
    8dac:	cbz	r1, 8dee <SdSpiArduinoDriver::activate()+0x4a>
			__disable_irq();
    8dae:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    8db0:	ldrb	r1, [r3, #11]
    8db2:	lsls	r0, r1, #31
    8db4:	bpl.n	8dc4 <SdSpiArduinoDriver::activate()+0x20>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    8db6:	ldr	r0, [pc, #100]	; (8e1c <SdSpiArduinoDriver::activate()+0x78>)
    8db8:	ldr	r1, [r3, #12]
    8dba:	ldr	r4, [r0, #0]
    8dbc:	ands	r1, r4
    8dbe:	str	r1, [r3, #28]
				NVIC_ICER0 = interruptSave[0];
    8dc0:	str	r1, [r0, #0]
    8dc2:	ldrb	r1, [r3, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    8dc4:	lsls	r4, r1, #30
    8dc6:	bpl.n	8dd6 <SdSpiArduinoDriver::activate()+0x32>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    8dc8:	ldr	r0, [pc, #84]	; (8e20 <SdSpiArduinoDriver::activate()+0x7c>)
    8dca:	ldr	r1, [r3, #16]
    8dcc:	ldr	r4, [r0, #0]
    8dce:	ands	r1, r4
    8dd0:	str	r1, [r3, #32]
				NVIC_ICER1 = interruptSave[1];
    8dd2:	str	r1, [r0, #0]
    8dd4:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    8dd6:	lsls	r0, r1, #29
    8dd8:	bpl.n	8de8 <SdSpiArduinoDriver::activate()+0x44>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    8dda:	ldr	r0, [pc, #72]	; (8e24 <SdSpiArduinoDriver::activate()+0x80>)
    8ddc:	ldr	r1, [r3, #20]
    8dde:	ldr	r4, [r0, #0]
    8de0:	ands	r1, r4
    8de2:	str	r1, [r3, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    8de4:	str	r1, [r0, #0]
    8de6:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    8de8:	lsls	r1, r1, #28
    8dea:	bmi.n	8e0c <SdSpiArduinoDriver::activate()+0x68>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    8dec:	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    8dee:	ldr	r3, [r3, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    8df0:	ldr	r1, [r3, #12]
    8df2:	cmp	r1, r2
    8df4:	beq.n	8e06 <SdSpiArduinoDriver::activate()+0x62>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    8df6:	ldr	r0, [pc, #48]	; (8e28 <SdSpiArduinoDriver::activate()+0x84>)
    8df8:	str	r0, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    8dfa:	ldr	r1, [pc, #48]	; (8e2c <SdSpiArduinoDriver::activate()+0x88>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    8dfc:	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    8dfe:	orr.w	r0, r2, #1073741824	; 0x40000000
    8e02:	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    8e04:	str	r1, [r3, #0]
}
    8e06:	ldr.w	r4, [sp], #4
    8e0a:	bx	lr
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    8e0c:	ldr	r0, [pc, #32]	; (8e30 <SdSpiArduinoDriver::activate()+0x8c>)
    8e0e:	ldr	r1, [r3, #24]
    8e10:	ldr	r4, [r0, #0]
    8e12:	ands	r1, r4
    8e14:	str	r1, [r3, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    8e16:	str	r1, [r0, #0]
    8e18:	b.n	8dec <SdSpiArduinoDriver::activate()+0x48>
    8e1a:	nop
    8e1c:	.word	0xe000e180
    8e20:	.word	0xe000e184
    8e24:	.word	0xe000e188
    8e28:	.word	0x003f4001
    8e2c:	.word	0x803f0000
    8e30:	.word	0xe000e18c

00008e34 <SdSpiArduinoDriver::begin(SdSpiConfig)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
    8e34:	push	{r4, lr}
    8e36:	sub	sp, #16
    8e38:	add	r4, sp, #16
    8e3a:	stmdb	r4, {r1, r2, r3}
    8e3e:	ldr	r3, [sp, #12]
  if (spiConfig.spiPort) {
    8e40:	cbz	r3, 8e50 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x1c>
    m_spi->setMISO(SDCARD_MISO_PIN);
    m_spi->setMOSI(SDCARD_MOSI_PIN);
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
    8e42:	str	r3, [r0, #0]
    8e44:	mov	r0, r3
  }
  m_spi->begin();
}
    8e46:	add	sp, #16
    8e48:	ldmia.w	sp!, {r4, lr}
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    8e4c:	b.w	3bf8 <SPIClass::begin()>
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
  if (spiConfig.spiPort) {
    m_spi = spiConfig.spiPort;
#if defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else if (spiConfig.csPin == SDCARD_SS_PIN) {
    8e50:	ldrb.w	r3, [sp, #4]
    8e54:	cmp	r3, #62	; 0x3e
    8e56:	beq.n	8e5c <SdSpiArduinoDriver::begin(SdSpiConfig)+0x28>
    m_spi->setMISO(SDCARD_MISO_PIN);
    m_spi->setMOSI(SDCARD_MOSI_PIN);
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
    8e58:	ldr	r3, [pc, #32]	; (8e7c <SdSpiArduinoDriver::begin(SdSpiConfig)+0x48>)
    8e5a:	b.n	8e42 <SdSpiArduinoDriver::begin(SdSpiConfig)+0xe>
    8e5c:	mov	r4, r0
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
  if (spiConfig.spiPort) {
    m_spi = spiConfig.spiPort;
#if defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else if (spiConfig.csPin == SDCARD_SS_PIN) {
    m_spi = &SDCARD_SPI;
    8e5e:	ldr	r0, [pc, #32]	; (8e80 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x4c>)
    8e60:	str	r0, [r4, #0]
    m_spi->setMISO(SDCARD_MISO_PIN);
    8e62:	movs	r1, #59	; 0x3b
    8e64:	bl	3d18 <SPIClass::setMISO(unsigned char)>
    m_spi->setMOSI(SDCARD_MOSI_PIN);
    8e68:	movs	r1, #61	; 0x3d
    8e6a:	ldr	r0, [r4, #0]
    8e6c:	bl	3c74 <SPIClass::setMOSI(unsigned char)>
    m_spi->setSCK(SDCARD_SCK_PIN);
    8e70:	ldr	r0, [r4, #0]
    8e72:	movs	r1, #60	; 0x3c
    8e74:	bl	3db8 <SPIClass::setSCK(unsigned char)>
    8e78:	ldr	r0, [r4, #0]
    8e7a:	b.n	8e46 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x12>
    8e7c:	.word	0x1fff097c
    8e80:	.word	0x1fff09bc

00008e84 <SdSpiArduinoDriver::deactivate()>:
  }
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    8e84:	ldr	r2, [r0, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    8e86:	ldrb	r3, [r2, #11]
    8e88:	cbz	r3, 8eb8 <SdSpiArduinoDriver::deactivate()+0x34>
			if (interruptMasksUsed & 0x01) {
    8e8a:	lsls	r1, r3, #31
    8e8c:	bpl.n	8e96 <SdSpiArduinoDriver::deactivate()+0x12>
				NVIC_ISER0 = interruptSave[0];
    8e8e:	ldr	r3, [pc, #44]	; (8ebc <SdSpiArduinoDriver::deactivate()+0x38>)
    8e90:	ldr	r1, [r2, #28]
    8e92:	str	r1, [r3, #0]
    8e94:	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    8e96:	lsls	r0, r3, #30
    8e98:	bpl.n	8ea2 <SdSpiArduinoDriver::deactivate()+0x1e>
				NVIC_ISER1 = interruptSave[1];
    8e9a:	ldr	r3, [pc, #36]	; (8ec0 <SdSpiArduinoDriver::deactivate()+0x3c>)
    8e9c:	ldr	r1, [r2, #32]
    8e9e:	str	r1, [r3, #0]
    8ea0:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    8ea2:	lsls	r1, r3, #29
    8ea4:	bpl.n	8eae <SdSpiArduinoDriver::deactivate()+0x2a>
				NVIC_ISER2 = interruptSave[2];
    8ea6:	ldr	r3, [pc, #28]	; (8ec4 <SdSpiArduinoDriver::deactivate()+0x40>)
    8ea8:	ldr	r1, [r2, #36]	; 0x24
    8eaa:	str	r1, [r3, #0]
    8eac:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    8eae:	lsls	r3, r3, #28
    8eb0:	bpl.n	8eb8 <SdSpiArduinoDriver::deactivate()+0x34>
				NVIC_ISER3 = interruptSave[3];
    8eb2:	ldr	r3, [pc, #20]	; (8ec8 <SdSpiArduinoDriver::deactivate()+0x44>)
    8eb4:	ldr	r2, [r2, #40]	; 0x28
    8eb6:	str	r2, [r3, #0]
    8eb8:	bx	lr
    8eba:	nop
    8ebc:	.word	0xe000e100
    8ec0:	.word	0xe000e104
    8ec4:	.word	0xe000e108
    8ec8:	.word	0xe000e10c

00008ecc <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
    8ecc:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    8ece:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    8ed0:	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    8ed4:	movs	r3, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    8ed6:	str	r1, [r2, #44]	; 0x2c
		port().PUSHR = data;
    8ed8:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    8eda:	ldr	r3, [r2, #44]	; 0x2c
    8edc:	cmp	r3, #0
    8ede:	bge.n	8eda <SdSpiArduinoDriver::receive()+0xe>
		return port().POPR;
    8ee0:	ldr	r0, [r2, #56]	; 0x38
  return m_spi->transfer(0XFF);
}
    8ee2:	uxtb	r0, r0
    8ee4:	bx	lr
    8ee6:	nop

00008ee8 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    8ee8:	push	{r4, r5, r6, lr}
    8eea:	mov	r5, r0
    8eec:	mov	r4, r1
    8eee:	mov	r6, r2
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    8ef0:	mov	r0, r1
    8ef2:	movs	r1, #255	; 0xff
    8ef4:	bl	bd6c <memset>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    8ef8:	ldr	r0, [r5, #0]
    8efa:	mov	r3, r6
    8efc:	mov	r2, r4
    8efe:	mov	r1, r4
    8f00:	bl	3e68 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    8f04:	movs	r0, #0
    8f06:	pop	{r4, r5, r6, pc}

00008f08 <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
    8f08:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    8f0a:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    8f0c:	mov.w	r3, #2147483648	; 0x80000000
    8f10:	str	r3, [r2, #44]	; 0x2c
		port().PUSHR = data;
    8f12:	str	r1, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    8f14:	ldr	r3, [r2, #44]	; 0x2c
    8f16:	cmp	r3, #0
    8f18:	bge.n	8f14 <SdSpiArduinoDriver::send(unsigned char)+0xc>
		return port().POPR;
    8f1a:	ldr	r3, [r2, #56]	; 0x38
    8f1c:	bx	lr
    8f1e:	nop

00008f20 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    8f20:	push	{r4, r5, lr}
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    8f22:	subs	r5, r2, #1
    8f24:	cmp.w	r5, #512	; 0x200
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    8f28:	sub.w	sp, sp, #516	; 0x204
    8f2c:	mov	r3, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    8f2e:	bcc.n	8f56 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    8f30:	cbz	r2, 8f50 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
    8f32:	ldr	r2, [r0, #0]
    8f34:	ldr	r2, [r2, #0]
    8f36:	adds	r0, r1, r3
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    8f38:	mov.w	r4, #2147483648	; 0x80000000
    m_spi->transfer(buf[i]);
    8f3c:	ldrb.w	r3, [r1], #1
    8f40:	str	r4, [r2, #44]	; 0x2c
		port().PUSHR = data;
    8f42:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    8f44:	ldr	r3, [r2, #44]	; 0x2c
    8f46:	cmp	r3, #0
    8f48:	bge.n	8f44 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x24>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    8f4a:	cmp	r1, r0
		return port().POPR;
    8f4c:	ldr	r3, [r2, #56]	; 0x38
    8f4e:	bne.n	8f3c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    8f50:	add.w	sp, sp, #516	; 0x204
    8f54:	pop	{r4, r5, pc}
    8f56:	mov	r5, r0
    8f58:	mov	r4, r2
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    memcpy(tmp, buf, count);
    8f5a:	mov	r0, sp
    8f5c:	bl	8f84 <memcpy>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    8f60:	mov	r3, r4
    8f62:	mov	r2, sp
    8f64:	mov	r1, sp
    8f66:	ldr	r0, [r5, #0]
    8f68:	bl	3e68 <SPIClass::transfer(void const*, void*, unsigned int)>
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    m_spi->transfer(buf[i]);
  }
}
    8f6c:	add.w	sp, sp, #516	; 0x204
    8f70:	pop	{r4, r5, pc}
    8f72:	nop

00008f74 <sdCsInit(unsigned char)>:
#include "SdSpiDriver.h"
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
    8f74:	movs	r1, #1
    8f76:	b.w	9520 <pinMode>
    8f7a:	nop

00008f7c <sdCsWrite(unsigned char, bool)>:
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    8f7c:	b.w	9514 <digitalWrite>

00008f80 <usb_mtp_configure>:
		if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
		return 0;
	}

#else
	void usb_mtp_configure(void) {}
    8f80:	bx	lr
    8f82:	nop

00008f84 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    8f84:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    8f86:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    8f8a:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    8f8e:	bne.n	906c <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8f90:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    8f92:	bcc.n	9018 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    8f94:	ldr.w	r3, [r1], #4
    8f98:	str.w	r3, [r0], #4
    8f9c:	ldr.w	r3, [r1], #4
    8fa0:	str.w	r3, [r0], #4
    8fa4:	ldr.w	r3, [r1], #4
    8fa8:	str.w	r3, [r0], #4
    8fac:	ldr.w	r3, [r1], #4
    8fb0:	str.w	r3, [r0], #4
    8fb4:	ldr.w	r3, [r1], #4
    8fb8:	str.w	r3, [r0], #4
    8fbc:	ldr.w	r3, [r1], #4
    8fc0:	str.w	r3, [r0], #4
    8fc4:	ldr.w	r3, [r1], #4
    8fc8:	str.w	r3, [r0], #4
    8fcc:	ldr.w	r3, [r1], #4
    8fd0:	str.w	r3, [r0], #4
    8fd4:	ldr.w	r3, [r1], #4
    8fd8:	str.w	r3, [r0], #4
    8fdc:	ldr.w	r3, [r1], #4
    8fe0:	str.w	r3, [r0], #4
    8fe4:	ldr.w	r3, [r1], #4
    8fe8:	str.w	r3, [r0], #4
    8fec:	ldr.w	r3, [r1], #4
    8ff0:	str.w	r3, [r0], #4
    8ff4:	ldr.w	r3, [r1], #4
    8ff8:	str.w	r3, [r0], #4
    8ffc:	ldr.w	r3, [r1], #4
    9000:	str.w	r3, [r0], #4
    9004:	ldr.w	r3, [r1], #4
    9008:	str.w	r3, [r0], #4
    900c:	ldr.w	r3, [r1], #4
    9010:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9014:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    9016:	bcs.n	8f94 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    9018:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    901a:	bcc.n	9040 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    901c:	ldr.w	r3, [r1], #4
    9020:	str.w	r3, [r0], #4
    9024:	ldr.w	r3, [r1], #4
    9028:	str.w	r3, [r0], #4
    902c:	ldr.w	r3, [r1], #4
    9030:	str.w	r3, [r0], #4
    9034:	ldr.w	r3, [r1], #4
    9038:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    903c:	subs	r2, #16
	bhs	.Lmid_block_loop
    903e:	bcs.n	901c <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    9040:	adds	r2, #12
	blo	.Lcopy_less_than_4
    9042:	bcc.n	9050 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    9044:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    9048:	str.w	r3, [r0], #4
	subs	r2, #4
    904c:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    904e:	bcs.n	9044 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    9050:	adds	r2, #4
	beq	.Ldone
    9052:	beq.n	9066 <memcpy+0xe2>

	lsls	r2, r2, #31
    9054:	lsls	r2, r2, #31
	itt ne
    9056:	itt	ne
	ldrbne  r3, [r1], #1
    9058:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    905c:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    9060:	bcc.n	9066 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    9062:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    9064:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    9066:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    9068:	bx	lr
    906a:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    906c:	cmp	r2, #8
	blo	.Lbyte_copy
    906e:	bcc.n	9098 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    9070:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    9072:	beq.n	8f90 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    9074:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    9078:	beq.n	8f90 <memcpy+0xc>

	rsb	r3, #4
    907a:	rsb	r3, r3, #4
	subs	r2, r3
    907e:	subs	r2, r2, r3

	lsls    r3, r3, #31
    9080:	lsls	r3, r3, #31
	itt ne
    9082:	itt	ne
	ldrbne  r3, [r1], #1
    9084:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9088:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    908c:	bcc.n	8f90 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    908e:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    9092:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    9096:	b.n	8f90 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    9098:	subs	r2, #4
	blo	.Lcopy_less_than_4
    909a:	bcc.n	9050 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    909c:	subs	r2, #1
	ldrb    r3, [r1], #1
    909e:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    90a2:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    90a6:	bcs.n	909c <memcpy+0x118>

	ldrb	r3, [r1]
    90a8:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    90aa:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    90ac:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    90ae:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    90b0:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    90b2:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    90b4:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    90b6:	bx	lr

000090b8 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    90b8:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    90ba:	ldr	r5, [pc, #60]	; (90f8 <usb_serial_getchar+0x40>)
    90bc:	ldr	r0, [r5, #0]
    90be:	cbz	r0, 90e0 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    90c0:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    90c2:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    90c4:	adds	r1, r0, r3
    90c6:	adds	r3, #1
	if (i >= rx_packet->len) {
    90c8:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    90ca:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    90cc:	bcs.n	90d4 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    90ce:	strh	r3, [r0, #2]
	}
	return c;
    90d0:	mov	r0, r4
}
    90d2:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    90d4:	bl	97b8 <usb_free>
		rx_packet = NULL;
    90d8:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    90da:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    90dc:	str	r3, [r5, #0]
    90de:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    90e0:	ldr	r3, [pc, #24]	; (90fc <usb_serial_getchar+0x44>)
    90e2:	ldrb	r3, [r3, #0]
    90e4:	cbz	r3, 90f2 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    90e6:	movs	r0, #2
    90e8:	bl	9804 <usb_rx>
    90ec:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    90ee:	cmp	r0, #0
    90f0:	bne.n	90c0 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    90f2:	mov.w	r0, #4294967295
    90f6:	pop	{r3, r4, r5, pc}
    90f8:	.word	0x1fff1f04
    90fc:	.word	0x1fff2010

00009100 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    9100:	push	{r4, lr}
	if (!rx_packet) {
    9102:	ldr	r4, [pc, #36]	; (9128 <usb_serial_peekchar+0x28>)
    9104:	ldr	r0, [r4, #0]
    9106:	cbz	r0, 9110 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    9108:	ldrh	r3, [r0, #2]
    910a:	add	r0, r3
    910c:	ldrb	r0, [r0, #8]
}
    910e:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    9110:	ldr	r3, [pc, #24]	; (912c <usb_serial_peekchar+0x2c>)
    9112:	ldrb	r3, [r3, #0]
    9114:	cbz	r3, 9122 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    9116:	movs	r0, #2
    9118:	bl	9804 <usb_rx>
    911c:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    911e:	cmp	r0, #0
    9120:	bne.n	9108 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    9122:	mov.w	r0, #4294967295
    9126:	pop	{r4, pc}
    9128:	.word	0x1fff1f04
    912c:	.word	0x1fff2010

00009130 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    9130:	ldr	r3, [pc, #16]	; (9144 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    9132:	ldr	r2, [pc, #20]	; (9148 <usb_serial_available+0x18>)
    9134:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    9136:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    9138:	cbz	r3, 9142 <usb_serial_available+0x12>
    913a:	ldrh	r2, [r3, #0]
    913c:	ldrh	r3, [r3, #2]
    913e:	subs	r3, r2, r3
    9140:	add	r0, r3
	return count;
}
    9142:	bx	lr
    9144:	.word	0x1fff1f04
    9148:	.word	0x1fff208c

0000914c <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    914c:	ldr	r3, [pc, #44]	; (917c <usb_serial_flush_input+0x30>)
    914e:	ldrb	r3, [r3, #0]
    9150:	cbz	r3, 917a <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    9152:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    9154:	ldr	r4, [pc, #40]	; (9180 <usb_serial_flush_input+0x34>)
    9156:	ldr	r0, [r4, #0]
    9158:	cbz	r0, 916e <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    915a:	bl	97b8 <usb_free>
		rx_packet = NULL;
    915e:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    9160:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    9162:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    9164:	bl	9804 <usb_rx>
		if (!rx) break;
    9168:	cbz	r0, 9178 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    916a:	bl	97b8 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    916e:	movs	r0, #2
    9170:	bl	9804 <usb_rx>
		if (!rx) break;
    9174:	cmp	r0, #0
    9176:	bne.n	916a <usb_serial_flush_input+0x1e>
    9178:	pop	{r4, pc}
    917a:	bx	lr
    917c:	.word	0x1fff2010
    9180:	.word	0x1fff1f04

00009184 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    9184:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    9188:	ldr.w	r9, [pc, #248]	; 9284 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    918c:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    918e:	movs	r2, #1
    9190:	strb.w	r2, [r9]
	while (size > 0) {
    9194:	str	r1, [sp, #4]
    9196:	cbz	r1, 91f4 <usb_serial_write+0x70>
    9198:	ldr.w	r8, [pc, #236]	; 9288 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    919c:	ldr	r7, [pc, #216]	; (9278 <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    919e:	ldr	r6, [sp, #4]
    91a0:	mov	fp, r0
		if (!tx_packet) {
    91a2:	ldr.w	r0, [r8]
    91a6:	cbz	r0, 9216 <usb_serial_write+0x92>
    91a8:	ldr	r5, [pc, #208]	; (927c <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    91aa:	ldrh	r4, [r0, #2]
    91ac:	rsb	r1, r4, #64	; 0x40
    91b0:	cmp	r1, r6
    91b2:	it	cs
    91b4:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    91b6:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    91ba:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    91bc:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    91c0:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    91c2:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    91c4:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    91c8:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    91cc:	cbz	r1, 91e4 <usb_serial_write+0x60>
    91ce:	subs	r4, #1
    91d0:	add	r2, r4
    91d2:	add	r1, fp
    91d4:	ldrb.w	r4, [fp], #1
    91d8:	strb.w	r4, [r2, #1]!
    91dc:	cmp	fp, r1
    91de:	bne.n	91d4 <usb_serial_write+0x50>
    91e0:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    91e4:	cmp.w	lr, #63	; 0x3f
    91e8:	bhi.n	9202 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    91ea:	ldr	r2, [pc, #148]	; (9280 <usb_serial_write+0xfc>)
    91ec:	movs	r1, #5
    91ee:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    91f0:	cmp	r6, #0
    91f2:	bne.n	91a2 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    91f4:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    91f6:	movs	r3, #0
    91f8:	strb.w	r3, [r9]
	return ret;
}
    91fc:	add	sp, #12
    91fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    9202:	movs	r2, #64	; 0x40
    9204:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    9206:	mov	r1, r0
    9208:	movs	r0, #3
    920a:	bl	9974 <usb_tx>
			tx_packet = NULL;
    920e:	movs	r2, #0
    9210:	str.w	r2, [r8]
    9214:	b.n	91ea <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    9216:	ldrb	r2, [r7, #0]
    9218:	cbz	r2, 9266 <usb_serial_write+0xe2>
    921a:	ldr	r5, [pc, #96]	; (927c <usb_serial_write+0xf8>)
    921c:	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    9220:	mov.w	sl, #1
    9224:	b.n	9236 <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    9226:	subs	r4, #1
    9228:	beq.n	9258 <usb_serial_write+0xd4>
    922a:	ldrb	r2, [r5, #0]
    922c:	cbnz	r2, 9258 <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    922e:	bl	a508 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    9232:	ldrb	r2, [r7, #0]
    9234:	cbz	r2, 9266 <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    9236:	movs	r0, #3
    9238:	bl	9840 <usb_tx_packet_count>
    923c:	cmp	r0, #7
    923e:	bhi.n	9226 <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    9240:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    9244:	bl	9778 <usb_malloc>
    9248:	str.w	r0, [r8]
					if (tx_packet) break;
    924c:	cmp	r0, #0
    924e:	bne.n	91aa <usb_serial_write+0x26>
					tx_noautoflush = 0;
    9250:	ldr	r3, [pc, #48]	; (9284 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    9252:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    9254:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    9256:	bne.n	922a <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    9258:	movs	r3, #1
					return -1;
    925a:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    925e:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    9260:	add	sp, #12
    9262:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    9266:	movs	r3, #0
					return -1;
    9268:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    926c:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    9270:	add	sp, #12
    9272:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9276:	nop
    9278:	.word	0x1fff2010
    927c:	.word	0x1fff1f00
    9280:	.word	0x1fff1ef8
    9284:	.word	0x1fff1ef9
    9288:	.word	0x1fff1efc

0000928c <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    928c:	push	{lr}
    928e:	sub	sp, #12
    9290:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    9292:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    9294:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    9298:	mov	r0, r3
    929a:	bl	9184 <usb_serial_write>
}
    929e:	add	sp, #12
    92a0:	ldr.w	pc, [sp], #4

000092a4 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    92a4:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    92a6:	ldr	r5, [pc, #56]	; (92e0 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    92a8:	ldr	r4, [pc, #56]	; (92e4 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    92aa:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    92ac:	movs	r3, #1
    92ae:	strb	r3, [r4, #0]
	if (!tx_packet) {
    92b0:	cbz	r0, 92be <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    92b2:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    92b4:	movs	r3, #0
    92b6:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    92b8:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    92bc:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    92be:	ldr	r3, [pc, #40]	; (92e8 <usb_serial_write_buffer_free+0x44>)
    92c0:	ldrb	r3, [r3, #0]
    92c2:	cbnz	r3, 92ca <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    92c4:	movs	r0, #0
    92c6:	strb	r0, [r4, #0]
			return 0;
    92c8:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    92ca:	movs	r0, #3
    92cc:	bl	9840 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    92d0:	cmp	r0, #7
    92d2:	bhi.n	92c4 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    92d4:	bl	9778 <usb_malloc>
    92d8:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    92da:	cmp	r0, #0
    92dc:	bne.n	92b2 <usb_serial_write_buffer_free+0xe>
    92de:	b.n	92c4 <usb_serial_write_buffer_free+0x20>
    92e0:	.word	0x1fff1efc
    92e4:	.word	0x1fff1ef9
    92e8:	.word	0x1fff2010

000092ec <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    92ec:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    92ee:	ldr	r3, [pc, #68]	; (9334 <usb_serial_flush_output+0x48>)
    92f0:	ldrb	r3, [r3, #0]
    92f2:	cbz	r3, 9318 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    92f4:	ldr	r6, [pc, #64]	; (9338 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    92f6:	ldr	r5, [pc, #68]	; (933c <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    92f8:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    92fa:	movs	r7, #1
    92fc:	strb	r7, [r5, #0]
	if (tx_packet) {
    92fe:	cbz	r4, 931a <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    9300:	ldr	r2, [pc, #60]	; (9340 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    9302:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    9304:	movs	r7, #0
    9306:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    9308:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    930a:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    930c:	movs	r0, #3
    930e:	bl	9974 <usb_tx>
		tx_packet = NULL;
    9312:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    9314:	movs	r3, #0
    9316:	strb	r3, [r5, #0]
    9318:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    931a:	bl	9778 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    931e:	ldr	r3, [pc, #32]	; (9340 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    9320:	cbz	r0, 932e <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    9322:	mov	r1, r0
    9324:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    9326:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    9328:	bl	9974 <usb_tx>
    932c:	b.n	9314 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    932e:	strb	r7, [r3, #0]
    9330:	b.n	9314 <usb_serial_flush_output+0x28>
    9332:	nop
    9334:	.word	0x1fff2010
    9338:	.word	0x1fff1efc
    933c:	.word	0x1fff1ef9
    9340:	.word	0x1fff1ef8

00009344 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    9344:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    9346:	ldr	r3, [pc, #56]	; (9380 <usb_serial_flush_callback+0x3c>)
    9348:	ldrb	r3, [r3, #0]
    934a:	cbnz	r3, 936a <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    934c:	ldr	r4, [pc, #52]	; (9384 <usb_serial_flush_callback+0x40>)
    934e:	ldr	r1, [r4, #0]
    9350:	cbz	r1, 936c <usb_serial_flush_callback+0x28>
    9352:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    9356:	ldrh	r3, [r1, #2]
    9358:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    935a:	movs	r0, #3
    935c:	bl	9974 <usb_tx>
		tx_packet = NULL;
    9360:	str	r5, [r4, #0]
    9362:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    9364:	ldr	r3, [pc, #32]	; (9388 <usb_serial_flush_callback+0x44>)
    9366:	movs	r2, #1
    9368:	strb	r2, [r3, #0]
    936a:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    936c:	bl	9778 <usb_malloc>
		if (tx) {
    9370:	cmp	r0, #0
    9372:	beq.n	9364 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    9374:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    9376:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    937a:	movs	r0, #3
    937c:	b.w	9974 <usb_tx>
    9380:	.word	0x1fff1ef9
    9384:	.word	0x1fff1efc
    9388:	.word	0x1fff1ef8

0000938c <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    938c:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    938e:	ldr	r4, [pc, #64]	; (93d0 <fault_isr+0x44>)
    9390:	b.n	93a4 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    9392:	ldr	r3, [r4, #0]
    9394:	lsls	r1, r3, #21
    9396:	bmi.n	93b4 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    9398:	ldr	r3, [r4, #0]
    939a:	lsls	r2, r3, #20
    939c:	bmi.n	93be <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    939e:	ldr	r3, [r4, #0]
    93a0:	lsls	r3, r3, #19
    93a2:	bmi.n	93c8 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    93a4:	ldr	r3, [r4, #0]
    93a6:	lsls	r0, r3, #13
    93a8:	bpl.n	9392 <fault_isr+0x6>
    93aa:	bl	99f8 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    93ae:	ldr	r3, [r4, #0]
    93b0:	lsls	r1, r3, #21
    93b2:	bpl.n	9398 <fault_isr+0xc>
    93b4:	bl	93d4 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    93b8:	ldr	r3, [r4, #0]
    93ba:	lsls	r2, r3, #20
    93bc:	bpl.n	939e <fault_isr+0x12>
    93be:	bl	93d4 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    93c2:	ldr	r3, [r4, #0]
    93c4:	lsls	r3, r3, #19
    93c6:	bpl.n	93a4 <fault_isr+0x18>
    93c8:	bl	93d4 <unused_isr>
    93cc:	b.n	93a4 <fault_isr+0x18>
    93ce:	nop
    93d0:	.word	0x40048034

000093d4 <unused_isr>:
	}
}

void unused_isr(void)
{
    93d4:	push	{r3, lr}
	fault_isr();
    93d6:	bl	938c <fault_isr>
    93da:	nop

000093dc <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    93dc:	ldr	r3, [pc, #4]	; (93e4 <startup_early_hook+0x8>)
    93de:	movs	r2, #16
    93e0:	strh	r2, [r3, #0]
    93e2:	bx	lr
    93e4:	.word	0x40052000

000093e8 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    93e8:	bx	lr
    93ea:	nop

000093ec <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    93ec:	ldr	r1, [pc, #36]	; (9414 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    93ee:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    93f0:	ldr	r3, [r1, #0]
	if (incr != 0) {
    93f2:	cbz	r0, 9402 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    93f4:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    93f6:	add	r0, r3
    93f8:	sub.w	r2, r2, #8192	; 0x2000
    93fc:	cmp	r0, r2
    93fe:	bcs.n	9406 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    9400:	str	r0, [r1, #0]
	}
	return prev;
    9402:	mov	r0, r3
}
    9404:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    9406:	bl	b580 <__errno>
    940a:	movs	r3, #12
    940c:	str	r3, [r0, #0]
			return (void *)-1;
    940e:	mov.w	r0, #4294967295
    9412:	pop	{r3, pc}
    9414:	.word	0x1fff0a00

00009418 <__cxa_pure_virtual>:
	while (1);
}

__attribute__((weak)) 
void __cxa_pure_virtual()
{
    9418:	b.n	9418 <__cxa_pure_virtual>
    941a:	nop

0000941c <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    941c:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    941e:	ldr	r3, [pc, #68]	; (9464 <digitalWrite.part.1+0x48>)
    9420:	ldr.w	r2, [r3, r0, lsl #3]
    9424:	ldrb.w	r4, [r2, #640]	; 0x280
    9428:	cbz	r4, 9438 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    942a:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    942c:	cbz	r1, 944e <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    942e:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    9432:	ldr.w	r4, [sp], #4
    9436:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    9438:	add.w	r3, r3, r0, lsl #3
    943c:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    943e:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    9440:	cbnz	r1, 9458 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    9442:	bic.w	r2, r2, #2
    9446:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    9448:	ldr.w	r4, [sp], #4
    944c:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    944e:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    9452:	ldr.w	r4, [sp], #4
    9456:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    9458:	orr.w	r2, r2, #3
    945c:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    945e:	ldr.w	r4, [sp], #4
    9462:	bx	lr
    9464:	.word	0x0000fc70

00009468 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    9468:	ldr	r2, [pc, #112]	; (94dc <pinMode.part.2+0x74>)
    946a:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    946e:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    9470:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    9472:	beq.n	9498 <pinMode.part.2+0x30>
    9474:	cmp	r1, #4
    9476:	beq.n	94b0 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    9478:	ldr.w	r0, [r2, r0, lsl #3]
    947c:	movs	r2, #0
    947e:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    9482:	cbz	r1, 9490 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    9484:	cmp	r1, #2
    9486:	beq.n	94ca <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    9488:	cmp	r1, #3
    948a:	beq.n	94d2 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    948c:	str	r2, [r3, #0]
    948e:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    9490:	mov.w	r2, #256	; 0x100
    9494:	str	r2, [r3, #0]
    9496:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    9498:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    949c:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    94a0:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    94a4:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    94a6:	ldr	r2, [r3, #0]
    94a8:	bic.w	r2, r2, #32
    94ac:	str	r2, [r3, #0]
    94ae:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    94b0:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    94b4:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    94b8:	movs	r0, #1
    94ba:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    94be:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    94c0:	ldr	r2, [r3, #0]
    94c2:	orr.w	r2, r2, #32
    94c6:	str	r2, [r3, #0]
    94c8:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    94ca:	movw	r2, #259	; 0x103
    94ce:	str	r2, [r3, #0]
    94d0:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    94d2:	mov.w	r2, #258	; 0x102
    94d6:	str	r2, [r3, #0]
    94d8:	bx	lr
    94da:	nop
    94dc:	.word	0x0000fc70

000094e0 <attachInterruptVector>:
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    94e0:	adds	r0, #16
    94e2:	ldr	r3, [pc, #8]	; (94ec <attachInterruptVector+0xc>)
    94e4:	str.w	r1, [r3, r0, lsl #2]
    94e8:	bx	lr
    94ea:	nop
    94ec:	.word	0x1fff0200

000094f0 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    94f0:	push	{r4, r5}
	RTC_SR = 0;
    94f2:	ldr	r3, [pc, #20]	; (9508 <rtc_set+0x18>)
	RTC_TPR = 0;
    94f4:	ldr	r5, [pc, #20]	; (950c <rtc_set+0x1c>)
	RTC_TSR = t;
    94f6:	ldr	r4, [pc, #24]	; (9510 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    94f8:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    94fa:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    94fc:	str	r2, [r3, #0]
	RTC_TPR = 0;
    94fe:	str	r2, [r5, #0]
	RTC_TSR = t;
    9500:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    9502:	str	r1, [r3, #0]
}
    9504:	pop	{r4, r5}
    9506:	bx	lr
    9508:	.word	0x4003d014
    950c:	.word	0x4003d004
    9510:	.word	0x4003d000

00009514 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    9514:	cmp	r0, #63	; 0x3f
    9516:	bhi.n	951c <digitalWrite+0x8>
    9518:	b.w	941c <digitalWrite.part.1>
    951c:	bx	lr
    951e:	nop

00009520 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    9520:	cmp	r0, #63	; 0x3f
    9522:	bhi.n	9528 <pinMode+0x8>
    9524:	b.w	9468 <pinMode.part.2>
    9528:	bx	lr
    952a:	nop

0000952c <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    952c:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    952e:	ldr	r1, [pc, #48]	; (9560 <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9530:	ldr	r3, [pc, #48]	; (9564 <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9532:	ldr	r2, [pc, #52]	; (9568 <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9534:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    9536:	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9538:	ldr	r2, [r2, #0]
	__enable_irq();
    953a:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    953c:	lsls	r2, r2, #5
    953e:	bpl.n	9546 <micros+0x1a>
    9540:	cmp	r3, #50	; 0x32
    9542:	it	hi
    9544:	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    9546:	ldr	r1, [pc, #36]	; (956c <micros+0x40>)
    9548:	rsb	r3, r3, #95744	; 0x17600
    954c:	mov.w	r2, #1000	; 0x3e8
    9550:	adds	r3, #255	; 0xff
    9552:	umull	r1, r3, r1, r3
    9556:	mul.w	r0, r2, r0
}
    955a:	add.w	r0, r0, r3, lsr #6
    955e:	bx	lr
    9560:	.word	0x1fff1f0c
    9564:	.word	0xe000e018
    9568:	.word	0xe000ed04
    956c:	.word	0xaaaaaaab

00009570 <delay>:

void delay(uint32_t ms)
{
    9570:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9574:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    9576:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    9578:	ldr	r7, [pc, #128]	; (95fc <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    957a:	ldr	r3, [pc, #132]	; (9600 <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    957c:	ldr	r2, [pc, #132]	; (9604 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    957e:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    9580:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9582:	ldr	r2, [r2, #0]
	__enable_irq();
    9584:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9586:	lsls	r2, r2, #5
    9588:	bpl.n	9590 <delay+0x20>
    958a:	cmp	r3, #50	; 0x32
    958c:	it	hi
    958e:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    9590:	cbz	r5, 95f8 <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    9592:	rsb	r3, r3, #95744	; 0x17600
    9596:	ldr	r6, [pc, #112]	; (9608 <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9598:	ldr.w	r9, [pc, #100]	; 9600 <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    959c:	ldr.w	r8, [pc, #100]	; 9604 <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    95a0:	adds	r3, #255	; 0xff
    95a2:	mov.w	r2, #1000	; 0x3e8
    95a6:	umull	r1, r3, r6, r3
    95aa:	mul.w	r4, r2, r4
    95ae:	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    95b2:	cpsid	i
	current = SYST_CVR;
    95b4:	ldr.w	r1, [r9]
	count = systick_millis_count;
    95b8:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    95ba:	ldr.w	lr, [r8]
	__enable_irq();
    95be:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    95c0:	rsb	r3, r1, #95744	; 0x17600
    95c4:	adds	r3, #255	; 0xff
    95c6:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    95ca:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    95ce:	rsb	r3, r4, r3, lsr #6
    95d2:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    95d6:	beq.n	95de <delay+0x6e>
    95d8:	cmp	r1, #50	; 0x32
    95da:	it	hi
    95dc:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    95de:	mla	r3, r0, r2, r3
    95e2:	cmp.w	r3, #1000	; 0x3e8
    95e6:	bcc.n	95f2 <delay+0x82>
				ms--;
				if (ms == 0) return;
    95e8:	subs	r5, #1
    95ea:	beq.n	95f8 <delay+0x88>
				start += 1000;
    95ec:	add.w	r4, r4, #1000	; 0x3e8
    95f0:	b.n	95b2 <delay+0x42>
			}
			yield();
    95f2:	bl	a508 <yield>
		}
    95f6:	b.n	95b2 <delay+0x42>
    95f8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    95fc:	.word	0x1fff1f0c
    9600:	.word	0xe000e018
    9604:	.word	0xe000ed04
    9608:	.word	0xaaaaaaab

0000960c <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    960c:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    960e:	ldr	r3, [pc, #312]	; (9748 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    9610:	ldr	r0, [pc, #312]	; (974c <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    9612:	ldr.w	ip, [pc, #348]	; 9770 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    9616:	ldr	r4, [pc, #312]	; (9750 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    9618:	ldr	r1, [pc, #312]	; (9754 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    961a:	ldr.w	lr, [pc, #344]	; 9774 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    961e:	ldr	r6, [pc, #312]	; (9758 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    9620:	ldr	r5, [pc, #312]	; (975c <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    9622:	ldr	r7, [pc, #316]	; (9760 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    9624:	mov.w	r2, #134217728	; 0x8000000
    9628:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    962a:	mov.w	r2, #268435456	; 0x10000000
    962e:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    9630:	mov.w	r2, #536870912	; 0x20000000
    9634:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    9636:	mov.w	r2, #1073741824	; 0x40000000
    963a:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    963c:	mov.w	r2, #2147483648	; 0x80000000
    9640:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    9642:	movs	r2, #0
    9644:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    9646:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    9648:	movw	r0, #49151	; 0xbfff
    964c:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    9650:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    9654:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    9656:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    965a:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    965c:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    965e:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    9660:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    9664:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    9666:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    966a:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    966c:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    9670:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    9672:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    9676:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    967a:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    967e:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    9682:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    9686:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    9688:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    968c:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    968e:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    9690:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    9692:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    9696:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    9698:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    969a:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    969c:	ldr	r4, [pc, #196]	; (9764 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    969e:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    96a0:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    96a2:	movs	r1, #9
    96a4:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    96a6:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    96aa:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    96ae:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    96b0:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    96b2:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    96b4:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    96b6:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    96b8:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    96ba:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    96be:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    96c2:	add.w	r7, r7, #520192	; 0x7f000
    96c6:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    96c8:	addw	r4, r4, #2044	; 0x7fc
    96cc:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    96ce:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    96d0:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    96d2:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    96d4:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    96d8:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    96da:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    96de:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    96e2:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    96e4:	sub.w	r4, r4, #460800	; 0x70800
    96e8:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    96ec:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    96ee:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    96f0:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    96f4:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    96f6:	ldr	r0, [pc, #112]	; (9768 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    96f8:	orr.w	r1, r1, #512	; 0x200
    96fc:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    96fe:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    9700:	ldr	r4, [pc, #104]	; (976c <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    9702:	add.w	lr, lr, #65280	; 0xff00
    9706:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    970a:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    970e:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    9712:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    9716:	orr.w	r1, r1, #33554432	; 0x2000000
    971a:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    971c:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    9720:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    9724:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    9726:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    9728:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    972a:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    972c:	str	r2, [r4, #0]
#endif
	analog_init();
    972e:	bl	a788 <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    9732:	movs	r0, #25
    9734:	bl	9570 <delay>
	usb_init();
    9738:	bl	a440 <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    973c:	movw	r0, #275	; 0x113
}
    9740:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    9744:	b.w	9570 <delay>
    9748:	.word	0xe000e104
    974c:	.word	0x40038004
    9750:	.word	0x40038014
    9754:	.word	0x4003801c
    9758:	.word	0x40038024
    975c:	.word	0x4003802c
    9760:	.word	0x40038034
    9764:	.word	0x40038000
    9768:	.word	0x40048004
    976c:	.word	0x400c9000
    9770:	.word	0x40038008
    9774:	.word	0x4003800c

00009778 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    9778:	cpsid	i
	avail = usb_buffer_available;
    977a:	ldr	r0, [pc, #52]	; (97b0 <usb_malloc+0x38>)
    977c:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    977e:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    9782:	cmp	r3, #19
    9784:	bgt.n	97a8 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    9786:	mov.w	r1, #2147483648	; 0x80000000
    978a:	lsrs	r1, r3
    978c:	bic.w	r2, r2, r1
    9790:	str	r2, [r0, #0]
	__enable_irq();
    9792:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    9794:	ldr	r0, [pc, #28]	; (97b4 <usb_malloc+0x3c>)
    9796:	add.w	r3, r3, r3, lsl #3
    979a:	lsls	r3, r3, #3
    979c:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    979e:	movs	r1, #0
    97a0:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    97a2:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    97a4:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    97a6:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    97a8:	cpsie	i
		return NULL;
    97aa:	movs	r0, #0
    97ac:	bx	lr
    97ae:	nop
    97b0:	.word	0x1fff0a04
    97b4:	.word	0x1fff03d0

000097b8 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    97b8:	ldr	r3, [pc, #52]	; (97f0 <usb_free+0x38>)
    97ba:	ldr	r2, [pc, #56]	; (97f4 <usb_free+0x3c>)
    97bc:	subs	r3, r0, r3
    97be:	umull	r2, r3, r2, r3
    97c2:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    97c4:	cmp	r3, #19
    97c6:	bhi.n	97e2 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    97c8:	ldr	r2, [pc, #44]	; (97f8 <usb_free+0x40>)
    97ca:	ldrb	r2, [r2, #0]
    97cc:	cbnz	r2, 97e4 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    97ce:	cpsid	i
	usb_buffer_available |= mask;
    97d0:	ldr	r0, [pc, #40]	; (97fc <usb_free+0x44>)
    97d2:	mov.w	r1, #2147483648	; 0x80000000
    97d6:	ldr	r2, [r0, #0]
    97d8:	lsr.w	r3, r1, r3
    97dc:	orrs	r2, r3
    97de:	str	r2, [r0, #0]
	__enable_irq();
    97e0:	cpsie	i
    97e2:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    97e4:	ldr	r2, [pc, #24]	; (9800 <usb_free+0x48>)
    97e6:	ldrb	r2, [r2, #0]
    97e8:	cmp	r2, #0
    97ea:	beq.n	97ce <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    97ec:	b.w	986c <usb_rx_memory>
    97f0:	.word	0x1fff03d0
    97f4:	.word	0x38e38e39
    97f8:	.word	0x1fff2005
    97fc:	.word	0x1fff0a04
    9800:	.word	0x1fff2010

00009804 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    9804:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    9806:	cmp	r3, #5
    9808:	bhi.n	9834 <usb_rx+0x30>
	__disable_irq();
    980a:	cpsid	i
	ret = rx_first[endpoint];
    980c:	ldr	r1, [pc, #40]	; (9838 <usb_rx+0x34>)
    980e:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    9812:	cbz	r0, 9830 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    9814:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    9816:	ldr	r4, [pc, #36]	; (983c <usb_rx+0x38>)
    9818:	ldrh	r5, [r0, #0]
    981a:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    981e:	ldr	r6, [r0, #4]
    9820:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    9824:	subs	r2, r2, r5
    9826:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    982a:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    982c:	pop	{r4, r5, r6}
    982e:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    9830:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    9832:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    9834:	movs	r0, #0
    9836:	bx	lr
    9838:	.word	0x1fff1f70
    983c:	.word	0x1fff208c

00009840 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    9840:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    9842:	cmp	r0, #5
    9844:	bhi.n	985e <usb_tx_packet_count+0x1e>
	__disable_irq();
    9846:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    9848:	ldr	r3, [pc, #28]	; (9868 <usb_tx_packet_count+0x28>)
    984a:	ldr.w	r3, [r3, r0, lsl #2]
    984e:	cbz	r3, 9862 <usb_tx_packet_count+0x22>
    9850:	movs	r0, #0
    9852:	ldr	r3, [r3, #4]
    9854:	adds	r0, #1
    9856:	cmp	r3, #0
    9858:	bne.n	9852 <usb_tx_packet_count+0x12>
	__enable_irq();
    985a:	cpsie	i
	return count;
    985c:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    985e:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    9860:	bx	lr
// https://forum.pjrc.com/threads/58663?p=223513&viewfull=1#post223513
//
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    9862:	mov	r0, r3
    9864:	b.n	985a <usb_tx_packet_count+0x1a>
    9866:	nop
    9868:	.word	0x1fff1fcc

0000986c <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    986c:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    986e:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9870:	ldr	r2, [pc, #236]	; (9960 <usb_rx_memory+0xf4>)
    9872:	ldrb	r3, [r2, #0]
    9874:	lsls	r1, r3, #28
    9876:	bpl.n	9886 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9878:	ldr	r3, [pc, #232]	; (9964 <usb_rx_memory+0xf8>)
    987a:	ldr	r1, [r3, #32]
    987c:	cmp	r1, #0
    987e:	beq.n	9920 <usb_rx_memory+0xb4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9880:	ldr	r1, [r3, #40]	; 0x28
    9882:	cmp	r1, #0
    9884:	beq.n	993c <usb_rx_memory+0xd0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9886:	ldrb	r3, [r2, #1]
    9888:	lsls	r3, r3, #28
    988a:	bpl.n	989a <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    988c:	ldr	r3, [pc, #212]	; (9964 <usb_rx_memory+0xf8>)
    988e:	ldr	r1, [r3, #64]	; 0x40
    9890:	cmp	r1, #0
    9892:	beq.n	9950 <usb_rx_memory+0xe4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9894:	ldr	r1, [r3, #72]	; 0x48
    9896:	cmp	r1, #0
    9898:	beq.n	9940 <usb_rx_memory+0xd4>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    989a:	ldrb	r3, [r2, #2]
    989c:	lsls	r5, r3, #28
    989e:	bpl.n	98ae <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    98a0:	ldr	r3, [pc, #192]	; (9964 <usb_rx_memory+0xf8>)
    98a2:	ldr	r1, [r3, #96]	; 0x60
    98a4:	cmp	r1, #0
    98a6:	beq.n	994c <usb_rx_memory+0xe0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    98a8:	ldr	r1, [r3, #104]	; 0x68
    98aa:	cmp	r1, #0
    98ac:	beq.n	9944 <usb_rx_memory+0xd8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    98ae:	ldrb	r3, [r2, #3]
    98b0:	lsls	r4, r3, #28
    98b2:	bpl.n	98c6 <usb_rx_memory+0x5a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    98b4:	ldr	r3, [pc, #172]	; (9964 <usb_rx_memory+0xf8>)
    98b6:	ldr.w	r1, [r3, #128]	; 0x80
    98ba:	cmp	r1, #0
    98bc:	beq.n	9954 <usb_rx_memory+0xe8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    98be:	ldr.w	r1, [r3, #136]	; 0x88
    98c2:	cmp	r1, #0
    98c4:	beq.n	9948 <usb_rx_memory+0xdc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    98c6:	ldrb	r3, [r2, #4]
    98c8:	lsls	r1, r3, #28
    98ca:	bpl.n	98dc <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    98cc:	ldr	r3, [pc, #148]	; (9964 <usb_rx_memory+0xf8>)
    98ce:	ldr.w	r1, [r3, #160]	; 0xa0
    98d2:	cmp	r1, #0
    98d4:	beq.n	995c <usb_rx_memory+0xf0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    98d6:	ldr.w	r1, [r3, #168]	; 0xa8
    98da:	cbz	r1, 9902 <usb_rx_memory+0x96>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    98dc:	ldrb	r3, [r2, #5]
    98de:	lsls	r3, r3, #28
    98e0:	bpl.n	98f4 <usb_rx_memory+0x88>
			if (table[index(i, RX, EVEN)].desc == 0) {
    98e2:	ldr	r3, [pc, #128]	; (9964 <usb_rx_memory+0xf8>)
    98e4:	ldr.w	r2, [r3, #192]	; 0xc0
    98e8:	cmp	r2, #0
    98ea:	beq.n	9958 <usb_rx_memory+0xec>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    98ec:	ldr.w	r2, [r3, #200]	; 0xc8
    98f0:	movs	r4, #25
    98f2:	cbz	r2, 9904 <usb_rx_memory+0x98>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    98f4:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    98f6:	ldr	r3, [pc, #112]	; (9968 <usb_rx_memory+0xfc>)
    98f8:	movs	r2, #0
    98fa:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    98fc:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    98fe:	b.w	97b8 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9902:	movs	r4, #21
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    9904:	ldr	r1, [pc, #96]	; (9968 <usb_rx_memory+0xfc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9906:	ldr	r5, [pc, #100]	; (996c <usb_rx_memory+0x100>)
				usb_rx_memory_needed--;
    9908:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    990a:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    990e:	add.w	r3, r3, r4, lsl #3
    9912:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    9914:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    9916:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    9918:	strb	r2, [r1, #0]
				__enable_irq();
    991a:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    991c:	pop	{r4, r5}
    991e:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    9920:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    9922:	ldr	r4, [pc, #68]	; (9968 <usb_rx_memory+0xfc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9924:	ldr	r5, [pc, #72]	; (9970 <usb_rx_memory+0x104>)
				usb_rx_memory_needed--;
    9926:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9928:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    992c:	add.w	r3, r3, r2, lsl #3
    9930:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    9932:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    9934:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    9936:	strb	r2, [r4, #0]
				__enable_irq();
    9938:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    993a:	b.n	991c <usb_rx_memory+0xb0>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    993c:	movs	r4, #5
    993e:	b.n	9904 <usb_rx_memory+0x98>
    9940:	movs	r4, #9
    9942:	b.n	9904 <usb_rx_memory+0x98>
    9944:	movs	r4, #13
    9946:	b.n	9904 <usb_rx_memory+0x98>
    9948:	movs	r4, #17
    994a:	b.n	9904 <usb_rx_memory+0x98>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    994c:	movs	r2, #12
    994e:	b.n	9922 <usb_rx_memory+0xb6>
    9950:	movs	r2, #8
    9952:	b.n	9922 <usb_rx_memory+0xb6>
    9954:	movs	r2, #16
    9956:	b.n	9922 <usb_rx_memory+0xb6>
    9958:	movs	r2, #24
    995a:	b.n	9922 <usb_rx_memory+0xb6>
    995c:	movs	r2, #20
    995e:	b.n	9922 <usb_rx_memory+0xb6>
    9960:	.word	0x0000fe9c
    9964:	.word	0x1fff0000
    9968:	.word	0x1fff2005
    996c:	.word	0x004000c8
    9970:	.word	0x00400088

00009974 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    9974:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    9976:	cmp	r3, #5
    9978:	bhi.n	99b6 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    997a:	ldr	r2, [pc, #108]	; (99e8 <usb_tx+0x74>)
    997c:	lsls	r0, r0, #5
    997e:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    9982:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    9984:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    9986:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    9988:	ldr	r4, [pc, #96]	; (99ec <usb_tx+0x78>)
    998a:	ldrb	r2, [r4, r3]
    998c:	cmp	r2, #3
    998e:	bhi.n	99c8 <usb_tx+0x54>
    9990:	tbb	[pc, r2]
    9994:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    9998:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    999a:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    999c:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    999e:	tst.w	r0, #8
    99a2:	ite	ne
    99a4:	movne	r3, #200	; 0xc8
    99a6:	moveq	r3, #136	; 0x88
    99a8:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    99ac:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    99ae:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    99b0:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    99b2:	cpsie	i
}
    99b4:	pop	{r4, r5}
    99b6:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    99b8:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    99ba:	movs	r2, #2
		break;
    99bc:	b.n	999a <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    99be:	movs	r2, #5
    99c0:	b.n	999a <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    99c2:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    99c4:	movs	r2, #4
		break;
    99c6:	b.n	999a <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    99c8:	ldr	r2, [pc, #36]	; (99f0 <usb_tx+0x7c>)
    99ca:	ldr.w	r0, [r2, r3, lsl #2]
    99ce:	cbz	r0, 99e0 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    99d0:	ldr	r2, [pc, #32]	; (99f4 <usb_tx+0x80>)
    99d2:	ldr.w	r0, [r2, r3, lsl #2]
    99d6:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    99d8:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    99dc:	cpsie	i
		return;
    99de:	b.n	99b4 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    99e0:	str.w	r1, [r2, r3, lsl #2]
    99e4:	ldr	r2, [pc, #12]	; (99f4 <usb_tx+0x80>)
    99e6:	b.n	99d8 <usb_tx+0x64>
    99e8:	.word	0x1fff0000
    99ec:	.word	0x1fff2014
    99f0:	.word	0x1fff1fcc
    99f4:	.word	0x1fff1fe4

000099f8 <usb_isr>:
}



void usb_isr(void)
{
    99f8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    99fc:	ldr.w	fp, [pc, #780]	; 9d0c <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    9a00:	ldr.w	sl, [pc, #780]	; 9d10 <usb_isr+0x318>
}



void usb_isr(void)
{
    9a04:	sub	sp, #28
    9a06:	b.n	9a92 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    9a08:	ldr	r7, [pc, #692]	; (9cc0 <usb_isr+0x2c8>)
    9a0a:	mov.w	r8, r3, lsr #2
    9a0e:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    9a12:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    9a14:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    9a18:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    9a1c:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    9a1e:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    9a22:	and.w	r4, r3, #255	; 0xff
    9a26:	cmp	r3, #0
    9a28:	bne.w	9d14 <usb_isr+0x31c>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    9a2c:	ldr.w	r3, [r7, r8, lsl #3]
    9a30:	lsrs	r3, r3, #16
    9a32:	uxth	r1, r3
    9a34:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    9a38:	cmp	r3, #0
    9a3a:	beq.w	9cac <usb_isr+0x2b4>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    9a3e:	ldr	r3, [pc, #644]	; (9cc4 <usb_isr+0x2cc>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    9a40:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    9a44:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    9a48:	ldr.w	r2, [r3, r6, lsl #2]
    9a4c:	cmp	r2, #0
    9a4e:	beq.w	9db0 <usb_isr+0x3b8>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    9a52:	ldr	r5, [pc, #628]	; (9cc8 <usb_isr+0x2d0>)
    9a54:	ldr.w	r3, [r5, r6, lsl #2]
    9a58:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    9a5a:	ldr	r4, [pc, #624]	; (9ccc <usb_isr+0x2d4>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    9a5c:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    9a60:	ldrh.w	r3, [r4, r6, lsl #1]
    9a64:	add	r1, r3
    9a66:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    9a6a:	bl	9778 <usb_malloc>
					if (packet) {
    9a6e:	cmp	r0, #0
    9a70:	beq.w	9da2 <usb_isr+0x3aa>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    9a74:	ldr	r2, [pc, #600]	; (9cd0 <usb_isr+0x2d8>)
    9a76:	ldr	r3, [pc, #604]	; (9cd4 <usb_isr+0x2dc>)
    9a78:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    9a7c:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    9a80:	it	ne
    9a82:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    9a84:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    9a88:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    9a8c:	movs	r3, #8
    9a8e:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    9a92:	ldrb.w	r4, [fp]
    9a96:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    9a98:	lsls	r5, r4, #29
    9a9a:	bpl.n	9ad4 <usb_isr+0xdc>
		if (usb_configuration) {
    9a9c:	ldr	r3, [pc, #568]	; (9cd8 <usb_isr+0x2e0>)
    9a9e:	ldrb	r3, [r3, #0]
    9aa0:	cbz	r3, 9ace <usb_isr+0xd6>
			t = usb_reboot_timer;
    9aa2:	ldr	r1, [pc, #568]	; (9cdc <usb_isr+0x2e4>)
    9aa4:	ldrb	r2, [r1, #0]
			if (t) {
    9aa6:	and.w	r3, r2, #255	; 0xff
    9aaa:	cbz	r2, 9ab8 <usb_isr+0xc0>
				usb_reboot_timer = --t;
    9aac:	subs	r3, #1
    9aae:	uxtb	r3, r3
    9ab0:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    9ab2:	cmp	r3, #0
    9ab4:	beq.w	a436 <usb_isr+0xa3e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    9ab8:	ldr	r1, [pc, #548]	; (9ce0 <usb_isr+0x2e8>)
    9aba:	ldrb	r2, [r1, #0]
			if (t) {
    9abc:	and.w	r3, r2, #255	; 0xff
    9ac0:	cbz	r2, 9ace <usb_isr+0xd6>
				usb_cdc_transmit_flush_timer = --t;
    9ac2:	subs	r3, #1
    9ac4:	uxtb	r3, r3
    9ac6:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    9ac8:	cmp	r3, #0
    9aca:	beq.w	9d9c <usb_isr+0x3a4>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    9ace:	movs	r3, #4
    9ad0:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    9ad4:	and.w	r3, r4, #8
    9ad8:	and.w	r2, r3, #255	; 0xff
    9adc:	cmp	r3, #0
    9ade:	beq.w	9d6e <usb_isr+0x376>
		uint8_t endpoint;
		stat = USB0_STAT;
    9ae2:	ldrb.w	r3, [sl]
    9ae6:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    9ae8:	lsrs	r6, r3, #4
    9aea:	bne.n	9a08 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    9aec:	lsrs	r0, r3, #2
    9aee:	ldr.w	r9, [pc, #464]	; 9cc0 <usb_isr+0x2c8>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    9af2:	ldr.w	r2, [r9, r0, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    9af6:	add.w	r1, r9, r0, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    9afa:	ubfx	r2, r2, #2, #4
    9afe:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    9b00:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    9b02:	cmp	r2, #12
    9b04:	bhi.w	9c8e <usb_isr+0x296>
    9b08:	tbh	[pc, r2, lsl #1]
    9b0c:	.word	0x00c500c5
    9b10:	.word	0x00c100c1
    9b14:	.word	0x00c100c1
    9b18:	.word	0x00c100c1
    9b1c:	.word	0x00c1008b
    9b20:	.word	0x00c100c1
    9b24:	.short	0x000d
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    9b26:	ldr	r2, [r1, #0]
    9b28:	ldr	r5, [pc, #440]	; (9ce4 <usb_isr+0x2ec>)
		setup.word2 = *(uint32_t *)(buf + 4);
    9b2a:	ldr	r1, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    9b2c:	ldr	r7, [pc, #440]	; (9ce8 <usb_isr+0x2f0>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    9b2e:	ldr	r6, [pc, #444]	; (9cec <usb_isr+0x2f4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    9b30:	ldr	r4, [pc, #412]	; (9cd0 <usb_isr+0x2d8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    9b32:	str	r1, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9b34:	uxth	r1, r2
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    9b36:	str.w	r4, [r9, r0, lsl #3]
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    9b3a:	str	r2, [r5, #0]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    9b3c:	movs	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    9b3e:	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9b40:	cmp.w	r1, #2176	; 0x880
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    9b44:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    9b46:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    9b4a:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    9b4e:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9b50:	beq.w	a1f2 <usb_isr+0x7fa>
    9b54:	bls.w	9db8 <usb_isr+0x3c0>
    9b58:	movw	r4, #8993	; 0x2321
    9b5c:	cmp	r1, r4
    9b5e:	beq.w	a1fc <usb_isr+0x804>
    9b62:	bhi.w	9eee <usb_isr+0x4f6>
    9b66:	movw	r4, #8225	; 0x2021
    9b6a:	cmp	r1, r4
    9b6c:	beq.w	9f04 <usb_isr+0x50c>
    9b70:	movw	r4, #8737	; 0x2221
    9b74:	cmp	r1, r4
    9b76:	beq.w	a04e <usb_isr+0x656>
    9b7a:	cmp.w	r1, #2304	; 0x900
    9b7e:	bne.w	9efe <usb_isr+0x506>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    9b82:	ldr	r2, [pc, #340]	; (9cd8 <usb_isr+0x2e0>)
    9b84:	ldr	r4, [pc, #312]	; (9cc0 <usb_isr+0x2c8>)
    9b86:	ldrb	r1, [r5, #2]
    9b88:	strb	r1, [r2, #0]
    9b8a:	add.w	r5, r4, #192	; 0xc0
    9b8e:	b.n	9b96 <usb_isr+0x19e>
    9b90:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    9b92:	cmp	r5, r4
    9b94:	beq.n	9baa <usb_isr+0x1b2>
			if (table[i].desc & BDT_OWN) {
    9b96:	ldr	r3, [r4, #32]
    9b98:	lsls	r0, r3, #24
    9b9a:	bpl.n	9b90 <usb_isr+0x198>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    9b9c:	ldr	r0, [r4, #36]	; 0x24
    9b9e:	adds	r4, #8
    9ba0:	subs	r0, #8
    9ba2:	bl	97b8 <usb_free>
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    9ba6:	cmp	r5, r4
    9ba8:	bne.n	9b96 <usb_isr+0x19e>
    9baa:	ldr	r4, [pc, #324]	; (9cf0 <usb_isr+0x2f8>)
    9bac:	ldr	r2, [pc, #276]	; (9cc4 <usb_isr+0x2cc>)
    9bae:	ldr	r1, [pc, #324]	; (9cf4 <usb_isr+0x2fc>)
    9bb0:	ldr	r0, [pc, #324]	; (9cf8 <usb_isr+0x300>)
    9bb2:	ldr	r5, [pc, #276]	; (9cc8 <usb_isr+0x2d0>)
    9bb4:	str	r4, [sp, #4]
    9bb6:	movs	r3, #0
    9bb8:	ldr	r4, [pc, #272]	; (9ccc <usb_isr+0x2d4>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    9bba:	str	r6, [sp, #20]
    9bbc:	str	r5, [sp, #8]
    9bbe:	str	r4, [sp, #12]
    9bc0:	mov	r8, r0
    9bc2:	str	r7, [sp, #16]
    9bc4:	mov	r6, r2
    9bc6:	mov	r5, r1
    9bc8:	mov	r4, r3
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    9bca:	ldr	r0, [r6, #0]
			while (p) {
    9bcc:	cbz	r0, 9bda <usb_isr+0x1e2>
				n = p->next;
    9bce:	ldr	r7, [r0, #4]
				usb_free(p);
    9bd0:	bl	97b8 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    9bd4:	mov	r0, r7
    9bd6:	cmp	r7, #0
    9bd8:	bne.n	9bce <usb_isr+0x1d6>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    9bda:	movs	r3, #0
    9bdc:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    9bde:	ldr	r3, [sp, #8]
			p = tx_first[i];
    9be0:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    9be2:	mov	r2, r3
    9be4:	movs	r3, #0
    9be6:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    9bea:	cbz	r0, 9bf8 <usb_isr+0x200>
				n = p->next;
    9bec:	ldr	r7, [r0, #4]
				usb_free(p);
    9bee:	bl	97b8 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    9bf2:	mov	r0, r7
    9bf4:	cmp	r7, #0
    9bf6:	bne.n	9bec <usb_isr+0x1f4>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    9bf8:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    9bfa:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    9bfc:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    9bfe:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    9c00:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    9c04:	ldr	r2, [sp, #12]
    9c06:	mov.w	r1, #0
			switch (tx_state[i]) {
    9c0a:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    9c0c:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    9c10:	cmp	r3, #3
    9c12:	bhi.w	a128 <usb_isr+0x730>
    9c16:	tbh	[pc, r3, lsl #1]
    9c1a:	.short	0x02e7
    9c1c:	.word	0x02e70283
    9c20:	.short	0x0283
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    9c22:	ldr	r7, [pc, #196]	; (9ce8 <usb_isr+0x2f0>)
    9c24:	ldr	r2, [r7, #0]
		if (data) {
    9c26:	cbz	r2, 9c7a <usb_isr+0x282>
			size = ep0_tx_len;
    9c28:	ldr	r3, [pc, #208]	; (9cfc <usb_isr+0x304>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9c2a:	ldr	r6, [pc, #192]	; (9cec <usb_isr+0x2f4>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9c2c:	ldr	r1, [pc, #208]	; (9d00 <usb_isr+0x308>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    9c2e:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9c30:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9c32:	ldrb	r5, [r1, #0]
    9c34:	cmp	r0, #64	; 0x40
    9c36:	mov	lr, r0
    9c38:	orr.w	r8, r5, #2
    9c3c:	it	cs
    9c3e:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9c42:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    9c44:	eor.w	r4, r4, #1
    9c48:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    9c4a:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9c4e:	ite	eq
    9c50:	moveq	r4, #136	; 0x88
    9c52:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9c54:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    9c58:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9c5a:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9c5e:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9c62:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    9c64:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9c66:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    9c6a:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9c6c:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    9c6e:	cbnz	r0, 9c78 <usb_isr+0x280>
    9c70:	cmp.w	lr, #64	; 0x40
    9c74:	it	ne
    9c76:	movne	r2, #0
    9c78:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    9c7a:	ldr	r3, [pc, #104]	; (9ce4 <usb_isr+0x2ec>)
    9c7c:	ldrh	r2, [r3, #0]
    9c7e:	cmp.w	r2, #1280	; 0x500
    9c82:	bne.n	9c8e <usb_isr+0x296>
			setup.bRequest = 0;
    9c84:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    9c86:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    9c88:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    9c8a:	ldr	r3, [pc, #120]	; (9d04 <usb_isr+0x30c>)
    9c8c:	strb	r2, [r3, #0]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    9c8e:	ldr	r2, [pc, #120]	; (9d08 <usb_isr+0x310>)
    9c90:	movs	r3, #1
    9c92:	strb	r3, [r2, #0]
    9c94:	b.n	9a8c <usb_isr+0x94>
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    9c96:	ldr	r2, [pc, #76]	; (9ce4 <usb_isr+0x2ec>)
    9c98:	ldrh	r5, [r2, #0]
    9c9a:	movw	r4, #8225	; 0x2021
    9c9e:	cmp	r5, r4
    9ca0:	beq.w	9e98 <usb_isr+0x4a0>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    9ca4:	ldr	r2, [pc, #40]	; (9cd0 <usb_isr+0x2d8>)
    9ca6:	str.w	r2, [r9, r0, lsl #3]
    9caa:	b.n	9c8e <usb_isr+0x296>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    9cac:	ldr	r2, [pc, #32]	; (9cd0 <usb_isr+0x2d8>)
    9cae:	ldr	r3, [pc, #36]	; (9cd4 <usb_isr+0x2dc>)
    9cb0:	tst.w	r9, #8
    9cb4:	it	ne
    9cb6:	movne	r3, r2
    9cb8:	str.w	r3, [r7, r8, lsl #3]
    9cbc:	b.n	9a8c <usb_isr+0x94>
    9cbe:	nop
    9cc0:	.word	0x1fff0000
    9cc4:	.word	0x1fff1f70
    9cc8:	.word	0x1fff1f14
    9ccc:	.word	0x1fff208c
    9cd0:	.word	0x004000c8
    9cd4:	.word	0x00400088
    9cd8:	.word	0x1fff2010
    9cdc:	.word	0x1fff1f89
    9ce0:	.word	0x1fff1ef8
    9ce4:	.word	0x1fff1ffc
    9ce8:	.word	0x1fff1f10
    9cec:	.word	0x1fff1f88
    9cf0:	.word	0x1fff2014
    9cf4:	.word	0x1fff1fcc
    9cf8:	.word	0x1fff1fe4
    9cfc:	.word	0x1fff1f2c
    9d00:	.word	0x1fff2004
    9d04:	.word	0x40072098
    9d08:	.word	0x40072094
    9d0c:	.word	0x40072080
    9d10:	.word	0x40072090
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    9d14:	bl	97b8 <usb_free>
				packet = tx_first[endpoint];
    9d18:	ldr	r2, [pc, #692]	; (9fd0 <usb_isr+0x5d8>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    9d1a:	ldr	r1, [pc, #696]	; (9fd4 <usb_isr+0x5dc>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    9d1c:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    9d20:	cmp	r3, #0
    9d22:	beq.w	9e78 <usb_isr+0x480>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    9d26:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    9d28:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    9d2a:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    9d2e:	add.w	r2, r3, #8
    9d32:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    9d36:	cmp	r4, #3
    9d38:	bhi.n	9d46 <usb_isr+0x34e>
    9d3a:	tbb	[pc, r4]
    9d3e:	.short	0x0f12
    9d40:	.short	0x0215
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    9d42:	movs	r2, #4
    9d44:	strb	r2, [r1, r6]
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    9d46:	ldrh	r2, [r3, #0]
    9d48:	tst.w	r9, #8
    9d4c:	ite	eq
    9d4e:	moveq	r3, #136	; 0x88
    9d50:	movne	r3, #200	; 0xc8
    9d52:	orr.w	r3, r3, r2, lsl #16
    9d56:	str.w	r3, [r7, r8, lsl #3]
    9d5a:	b.n	9a8c <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    9d5c:	movs	r2, #2
    9d5e:	strb	r2, [r1, r6]
						break;
    9d60:	b.n	9d46 <usb_isr+0x34e>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    9d62:	movs	r2, #3
    9d64:	strb	r2, [r1, r6]
						break;
    9d66:	b.n	9d46 <usb_isr+0x34e>
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    9d68:	movs	r2, #5
    9d6a:	strb	r2, [r1, r6]
						break;
    9d6c:	b.n	9d46 <usb_isr+0x34e>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    9d6e:	lsls	r0, r4, #31
    9d70:	bmi.w	9f0c <usb_isr+0x514>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    9d74:	lsls	r1, r4, #24
    9d76:	bmi.w	9fa8 <usb_isr+0x5b0>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    9d7a:	lsls	r2, r4, #30
    9d7c:	bpl.n	9d8c <usb_isr+0x394>
		uint8_t err = USB0_ERRSTAT;
    9d7e:	ldr	r2, [pc, #600]	; (9fd8 <usb_isr+0x5e0>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    9d80:	ldr	r1, [pc, #600]	; (9fdc <usb_isr+0x5e4>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    9d82:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    9d84:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    9d86:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    9d88:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    9d8a:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    9d8c:	lsls	r3, r4, #27
    9d8e:	bpl.n	9d96 <usb_isr+0x39e>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    9d90:	ldr	r3, [pc, #584]	; (9fdc <usb_isr+0x5e4>)
    9d92:	movs	r2, #16
    9d94:	strb	r2, [r3, #0]
	}

}
    9d96:	add	sp, #28
    9d98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    9d9c:	bl	9344 <usb_serial_flush_callback>
    9da0:	b.n	9ace <usb_isr+0xd6>
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    9da2:	ldr	r2, [pc, #572]	; (9fe0 <usb_isr+0x5e8>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    9da4:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    9da8:	ldrb	r3, [r2, #0]
    9daa:	adds	r3, #1
    9dac:	strb	r3, [r2, #0]
    9dae:	b.n	9a8c <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    9db0:	str.w	r0, [r3, r6, lsl #2]
    9db4:	ldr	r5, [pc, #556]	; (9fe4 <usb_isr+0x5ec>)
    9db6:	b.n	9a5a <usb_isr+0x62>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9db8:	movw	r4, #770	; 0x302
    9dbc:	cmp	r1, r4
    9dbe:	beq.w	a204 <usb_isr+0x80c>
    9dc2:	bhi.w	9f66 <usb_isr+0x56e>
    9dc6:	cmp	r1, #130	; 0x82
    9dc8:	beq.w	a0fa <usb_isr+0x702>
    9dcc:	cmp.w	r1, #258	; 0x102
    9dd0:	beq.w	a028 <usb_isr+0x630>
    9dd4:	cmp	r1, #128	; 0x80
    9dd6:	bne.w	9efe <usb_isr+0x506>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    9dda:	ldr	r4, [pc, #524]	; (9fe8 <usb_isr+0x5f0>)
		reply_buffer[1] = 0;
		datalen = 2;
    9ddc:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    9dde:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    9de0:	strb	r2, [r4, #1]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    9de2:	ldrh	r2, [r5, #6]
    9de4:	cmp	r2, r0
    9de6:	bcs.w	a386 <usb_isr+0x98e>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9dea:	ldr	r1, [pc, #512]	; (9fec <usb_isr+0x5f4>)
    9dec:	ldrb	r5, [r1, #0]
    9dee:	cmp	r2, #64	; 0x40
    9df0:	mov	lr, r2
    9df2:	orr.w	ip, r5, #2
    9df6:	it	cs
    9df8:	movcs.w	lr, #64	; 0x40
    9dfc:	add.w	r3, r4, lr
    9e00:	add.w	r0, r9, ip, lsl #3
    9e04:	str	r3, [sp, #4]
    9e06:	movs	r3, #1
    9e08:	str	r4, [r0, #4]
    9e0a:	mov.w	r8, lr, lsl #16
    9e0e:	rsb	r0, lr, r2
    9e12:	str	r3, [sp, #8]
    9e14:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9e16:	movs	r4, #200	; 0xc8
    9e18:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9e1c:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9e20:	str.w	r3, [r9, ip, lsl #3]
	ep0_tx_data_toggle ^= 1;
    9e24:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    9e26:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9e28:	ldr.w	ip, [pc, #472]	; a004 <usb_isr+0x60c>
	ep0_tx_data_toggle ^= 1;
    9e2c:	ldr	r3, [pc, #448]	; (9ff0 <usb_isr+0x5f8>)
	ep0_tx_bdt_bank ^= 1;
    9e2e:	ldr.w	r8, [pc, #444]	; 9fec <usb_isr+0x5f4>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    9e32:	cmp	r0, #0
    9e34:	bne.w	a090 <usb_isr+0x698>
    9e38:	cmp.w	lr, #64	; 0x40
    9e3c:	bne.n	9f04 <usb_isr+0x50c>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9e3e:	orr.w	ip, r4, #2
    9e42:	add.w	r3, r9, ip, lsl #3
    9e46:	ldr	r4, [sp, #4]
    9e48:	ldr.w	lr, [pc, #440]	; a004 <usb_isr+0x60c>
    9e4c:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9e4e:	cmp	r2, #0
    9e50:	bne.w	a0bc <usb_isr+0x6c4>
    9e54:	lsls	r2, r0, #16
    9e56:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    9e5a:	ldrb.w	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9e5e:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9e62:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    9e64:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    9e66:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9e68:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    9e6a:	cmp	r0, #64	; 0x40
    9e6c:	bne.n	9f04 <usb_isr+0x50c>
    9e6e:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    9e70:	ldr	r2, [pc, #384]	; (9ff4 <usb_isr+0x5fc>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    9e72:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    9e74:	strh	r0, [r2, #0]
    9e76:	b.n	9f04 <usb_isr+0x50c>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    9e78:	ldrb	r3, [r1, r6]
    9e7a:	cmp	r3, #3
    9e7c:	bhi.w	a0ec <usb_isr+0x6f4>
    9e80:	add	r2, pc, #4	; (adr r2, 9e88 <usb_isr+0x490>)
    9e82:	ldr.w	pc, [r2, r3, lsl #2]
    9e86:	nop
    9e88:	.word	0x00009a8d
    9e8c:	.word	0x00009a8d
    9e90:	.word	0x00009f61
    9e94:	.word	0x00009f5b
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
			int i;
			uint32_t *line_coding = NULL;
			switch (setup.wIndex) {
    9e98:	ldrh	r2, [r2, #4]
    9e9a:	cbnz	r2, 9ec0 <usb_isr+0x4c8>
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    9e9c:	ldr	r2, [pc, #344]	; (9ff8 <usb_isr+0x600>)
    9e9e:	ldrb	r5, [r1, #0]
    9ea0:	ldrb	r4, [r1, #1]
    9ea2:	strb	r5, [r2, #0]
    9ea4:	strb	r4, [r2, #1]
    9ea6:	ldrb	r5, [r1, #2]
    9ea8:	ldrb	r4, [r1, #3]
    9eaa:	strb	r5, [r2, #2]
    9eac:	strb	r4, [r2, #3]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    9eae:	ldr	r4, [r2, #0]
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    9eb0:	ldrb	r5, [r1, #4]
    9eb2:	strb	r5, [r2, #4]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    9eb4:	cmp	r4, #134	; 0x86
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    9eb6:	ldrb	r5, [r1, #5]
    9eb8:	ldrb	r1, [r1, #6]
    9eba:	strb	r5, [r2, #5]
    9ebc:	strb	r1, [r2, #6]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    9ebe:	beq.n	9fbc <usb_isr+0x5c4>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9ec0:	ldr	r1, [pc, #296]	; (9fec <usb_isr+0x5f4>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9ec2:	ldr	r6, [pc, #300]	; (9ff0 <usb_isr+0x5f8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9ec4:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9ec6:	ldrb	r4, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9ec8:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9ecc:	cmp	r4, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9ece:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9ed2:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9ed4:	ite	eq
    9ed6:	moveq	r1, #136	; 0x88
    9ed8:	movne	r1, #200	; 0xc8
    9eda:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9ede:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    9ee2:	eor.w	r4, r4, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9ee6:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    9ee8:	strb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9eea:	str	r1, [r2, #4]
    9eec:	b.n	9ca4 <usb_isr+0x2ac>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9eee:	movw	r2, #26273	; 0x66a1
    9ef2:	cmp	r1, r2
    9ef4:	beq.n	9efe <usb_isr+0x506>
    9ef6:	movw	r2, #26529	; 0x67a1
    9efa:	cmp	r1, r2
    9efc:	beq.n	9fc4 <usb_isr+0x5cc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9efe:	ldr	r2, [pc, #252]	; (9ffc <usb_isr+0x604>)
    9f00:	movs	r3, #15
    9f02:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    9f04:	ldr	r2, [pc, #248]	; (a000 <usb_isr+0x608>)
    9f06:	movs	r3, #1
    9f08:	strb	r3, [r2, #0]
    9f0a:	b.n	9c8e <usb_isr+0x296>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    9f0c:	ldr	r3, [pc, #244]	; (a004 <usb_isr+0x60c>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    9f0e:	ldr	r0, [pc, #240]	; (a000 <usb_isr+0x608>)
		ep0_tx_bdt_bank = 0;
    9f10:	ldr	r1, [pc, #216]	; (9fec <usb_isr+0x5f4>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    9f12:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    9f14:	mov.w	lr, #2
    9f18:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9f1c:	ldr	r7, [pc, #220]	; (9ffc <usb_isr+0x604>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    9f1e:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    9f20:	ldr	r1, [pc, #228]	; (a008 <usb_isr+0x610>)
    9f22:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    9f24:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    9f26:	ldr	r6, [pc, #176]	; (9fd8 <usb_isr+0x5e0>)
		USB0_ISTAT = 0xFF;
    9f28:	ldr	r5, [pc, #176]	; (9fdc <usb_isr+0x5e4>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    9f2a:	ldr	r4, [pc, #224]	; (a00c <usb_isr+0x614>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    9f2c:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9f2e:	movs	r1, #13
    9f30:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    9f32:	movs	r1, #255	; 0xff
    9f34:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    9f36:	ldr.w	lr, [pc, #236]	; a024 <usb_isr+0x62c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    9f3a:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    9f3c:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    9f3e:	ldr	r5, [pc, #208]	; (a010 <usb_isr+0x618>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    9f40:	ldr	r2, [pc, #208]	; (a014 <usb_isr+0x61c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    9f42:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    9f46:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    9f48:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    9f4a:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    9f4e:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    9f50:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    9f52:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    9f54:	add	sp, #28
    9f56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    9f5a:	movs	r3, #1
    9f5c:	strb	r3, [r1, r6]
						break;
    9f5e:	b.n	9a8c <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    9f60:	movs	r3, #0
    9f62:	strb	r3, [r1, r6]
						break;
    9f64:	b.n	9a8c <usb_isr+0x94>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9f66:	cmp.w	r1, #1280	; 0x500
    9f6a:	beq.w	a1fc <usb_isr+0x804>
    9f6e:	bcc.n	9efe <usb_isr+0x506>
    9f70:	sub.w	r1, r1, #1664	; 0x680
    9f74:	cmp	r1, #1
    9f76:	bhi.n	9efe <usb_isr+0x506>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    9f78:	ldr	r2, [pc, #156]	; (a018 <usb_isr+0x620>)
    9f7a:	ldr	r4, [r2, #4]
    9f7c:	cmp	r4, #0
    9f7e:	beq.n	9efe <usb_isr+0x506>
    9f80:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    9f82:	ldrh.w	lr, [r5, #4]
    9f86:	b.n	9f90 <usb_isr+0x598>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    9f88:	adds	r2, #12
			if (list->addr == NULL) break;
    9f8a:	ldr	r4, [r2, #4]
    9f8c:	cmp	r4, #0
    9f8e:	beq.n	9efe <usb_isr+0x506>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    9f90:	ldrh	r3, [r2, #0]
    9f92:	cmp	r3, r0
    9f94:	bne.n	9f88 <usb_isr+0x590>
    9f96:	ldrh	r3, [r2, #2]
    9f98:	cmp	r3, lr
    9f9a:	bne.n	9f88 <usb_isr+0x590>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    9f9c:	lsrs	r0, r0, #8
    9f9e:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    9fa0:	ite	eq
    9fa2:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    9fa4:	ldrhne	r0, [r2, #8]
    9fa6:	b.n	9de2 <usb_isr+0x3ea>
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9fa8:	ldr	r1, [pc, #80]	; (9ffc <usb_isr+0x604>)
		USB0_ISTAT = USB_ISTAT_STALL;
    9faa:	ldr	r3, [pc, #48]	; (9fdc <usb_isr+0x5e4>)
    9fac:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9fae:	movs	r0, #13
    9fb0:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    9fb2:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    9fb4:	lsls	r2, r4, #30
    9fb6:	bpl.w	9d8c <usb_isr+0x394>
    9fba:	b.n	9d7e <usb_isr+0x386>
					//serial_phex(*buf);
					*dst++ = *buf++;
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    9fbc:	ldr	r2, [pc, #92]	; (a01c <usb_isr+0x624>)
    9fbe:	movs	r1, #15
    9fc0:	strb	r1, [r2, #0]
    9fc2:	b.n	9ec0 <usb_isr+0x4c8>
		// TODO: required by PTP spec
		endpoint0_stall();
		return;
	case 0x67A1: // Get Device Statis (PTP spec, 5.2.4, page 10)
		// For now, always respond with status ok.
		reply_buffer[0] = 0x4;
    9fc4:	ldr	r4, [pc, #32]	; (9fe8 <usb_isr+0x5f0>)
    9fc6:	ldr	r3, [pc, #88]	; (a020 <usb_isr+0x628>)
    9fc8:	str	r3, [r4, #0]
		reply_buffer[1] = 0;
		reply_buffer[2] = 0x01;
		reply_buffer[3] = 0x20;
		data = reply_buffer;
		datalen = 4;
    9fca:	movs	r0, #4
    9fcc:	b.n	9de2 <usb_isr+0x3ea>
    9fce:	nop
    9fd0:	.word	0x1fff1fcc
    9fd4:	.word	0x1fff2014
    9fd8:	.word	0x40072088
    9fdc:	.word	0x40072080
    9fe0:	.word	0x1fff2005
    9fe4:	.word	0x1fff1f14
    9fe8:	.word	0x1fff2008
    9fec:	.word	0x1fff2004
    9ff0:	.word	0x1fff1f88
    9ff4:	.word	0x1fff1f2c
    9ff8:	.word	0x1fff2080
    9ffc:	.word	0x400720c0
    a000:	.word	0x40072094
    a004:	.word	0x1fff0000
    a008:	.word	0x00400088
    a00c:	.word	0x40072098
    a010:	.word	0x1fff1f30
    a014:	.word	0x1fff1f8c
    a018:	.word	0x0000fea4
    a01c:	.word	0x1fff1f89
    a020:	.word	0x20010004
    a024:	.word	0x4007208c
    a028:	ldrh	r1, [r5, #4]
    a02a:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    a02e:	cmp	r1, #6
    a030:	bhi.w	9efe <usb_isr+0x506>
    a034:	ldrh	r2, [r5, #2]
    a036:	cmp	r2, #0
    a038:	bne.w	9efe <usb_isr+0x506>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    a03c:	ldr	r4, [pc, #724]	; (a314 <usb_isr+0x91c>)
    a03e:	str	r0, [sp, #8]
    a040:	lsls	r1, r1, #2
    a042:	add	r4, r1
    a044:	ldrb	r1, [r4, #0]
    a046:	bic.w	r1, r1, #2
    a04a:	strb	r1, [r4, #0]
    a04c:	b.n	a068 <usb_isr+0x670>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    a04e:	ldrh	r1, [r5, #4]
    a050:	cmp	r1, #0
    a052:	bne.w	a22a <usb_isr+0x832>
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a056:	ldr	r3, [pc, #704]	; (a318 <usb_isr+0x920>)
    a058:	ldr	r2, [pc, #704]	; (a31c <usb_isr+0x924>)
			usb_cdc_line_rtsdtr = setup.wValue;
    a05a:	ldr	r4, [pc, #708]	; (a320 <usb_isr+0x928>)
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a05c:	ldr	r3, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    a05e:	ldrb	r5, [r5, #2]
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a060:	str	r3, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    a062:	str	r0, [sp, #8]
    a064:	mov	r2, r1
    a066:	strb	r5, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    a068:	movs	r0, #0
    a06a:	str	r0, [sp, #4]
    a06c:	mov	r8, r0
    a06e:	mov	lr, r0
    a070:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a072:	ldr	r1, [pc, #688]	; (a324 <usb_isr+0x92c>)
    a074:	ldrb	r5, [r1, #0]
    a076:	orr.w	ip, r5, #2
    a07a:	add.w	r3, r9, ip, lsl #3
    a07e:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a080:	ldr	r3, [sp, #8]
    a082:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a084:	ldr	r3, [sp, #12]
    a086:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a088:	ite	eq
    a08a:	moveq	r4, #136	; 0x88
    a08c:	movne	r4, #200	; 0xc8
    a08e:	b.n	9e18 <usb_isr+0x420>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    a090:	cmp	r0, #64	; 0x40
    a092:	bls.w	9e3e <usb_isr+0x446>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a096:	orr.w	r4, r4, #2
    a09a:	add.w	r1, ip, r4, lsl #3
    a09e:	ldr	r6, [sp, #4]
    a0a0:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a0a2:	cbz	r2, a0d4 <usb_isr+0x6dc>
	ep0_tx_data_toggle ^= 1;
    a0a4:	ldrb.w	r1, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a0a8:	ldr	r2, [pc, #636]	; (a328 <usb_isr+0x930>)
	ep0_tx_data_toggle ^= 1;
    a0aa:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a0ac:	mov	r3, r6
    a0ae:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a0b0:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a0b4:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a0b6:	str.w	r2, [ip, r4, lsl #3]
    a0ba:	b.n	9e70 <usb_isr+0x478>
	ep0_tx_data_toggle ^= 1;
    a0bc:	ldrb.w	r3, [sp, #8]
    a0c0:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a0c2:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a0c4:	ldr	r3, [sp, #4]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a0c6:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a0c8:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a0cc:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a0ce:	str.w	r2, [lr, ip, lsl #3]
    a0d2:	b.n	9e6a <usb_isr+0x472>
	ep0_tx_data_toggle ^= 1;
    a0d4:	ldrb.w	r1, [sp, #8]
    a0d8:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a0da:	ldr	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a0dc:	ldr	r2, [pc, #588]	; (a32c <usb_isr+0x934>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a0de:	strb.w	r5, [r8]
    a0e2:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a0e4:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a0e6:	str.w	r2, [ip, r4, lsl #3]
    a0ea:	b.n	9e70 <usb_isr+0x478>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    a0ec:	tst.w	r9, #8
    a0f0:	ite	eq
    a0f2:	moveq	r3, #2
    a0f4:	movne	r3, #3
    a0f6:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    a0f8:	b.n	9a8c <usb_isr+0x94>
    a0fa:	ldrh	r1, [r5, #4]
    a0fc:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    a100:	cmp	r1, #6
    a102:	bhi.w	9efe <usb_isr+0x506>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    a106:	ldr	r3, [pc, #524]	; (a314 <usb_isr+0x91c>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    a108:	ldr	r4, [pc, #548]	; (a330 <usb_isr+0x938>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    a10a:	lsls	r1, r1, #2
    a10c:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    a10e:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    a110:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    a112:	ldrb	r2, [r3, #0]
    a114:	lsls	r3, r2, #30
    a116:	bpl.w	a22e <usb_isr+0x836>
    a11a:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    a11c:	movs	r0, #2
    a11e:	b.n	9de2 <usb_isr+0x3ea>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    a120:	ldr	r3, [sp, #4]
    a122:	mov.w	r2, #1
    a126:	strb	r2, [r3, #0]
    a128:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    a12a:	adds	r4, #1
    a12c:	adds	r3, #1
    a12e:	cmp	r4, #6
    a130:	add.w	r6, r6, #4
    a134:	add.w	r5, r5, #4
    a138:	str	r3, [sp, #4]
    a13a:	bne.w	9bca <usb_isr+0x1d2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a13e:	ldr	r5, [pc, #500]	; (a334 <usb_isr+0x93c>)
			*reg = epconf;
    a140:	ldr	r1, [pc, #500]	; (a338 <usb_isr+0x940>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a142:	ldrb	r2, [r5, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    a144:	ldr	r4, [pc, #500]	; (a33c <usb_isr+0x944>)
    a146:	ldr	r7, [sp, #16]
    a148:	ldr	r6, [sp, #20]
    a14a:	movs	r0, #0
    a14c:	strb	r0, [r4, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    a14e:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a150:	lsls	r1, r2, #28
    a152:	bmi.w	a260 <usb_isr+0x868>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a156:	ldrb	r2, [r5, #1]
			*reg = epconf;
    a158:	ldr	r1, [pc, #484]	; (a340 <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a15a:	ldr.w	r8, [pc, #504]	; a354 <usb_isr+0x95c>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    a15e:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a160:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a162:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a164:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    a168:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a16c:	bmi.n	a232 <usb_isr+0x83a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a16e:	ldrb	r2, [r5, #2]
			*reg = epconf;
    a170:	ldr	r1, [pc, #464]	; (a344 <usb_isr+0x94c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a172:	ldr.w	r8, [pc, #480]	; a354 <usb_isr+0x95c>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    a176:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a178:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a17a:	mov.w	r1, #0
    a17e:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    a182:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a186:	bmi.w	a35c <usb_isr+0x964>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a18a:	ldrb	r2, [r5, #3]
			*reg = epconf;
    a18c:	ldr	r1, [pc, #440]	; (a348 <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a18e:	ldr.w	r8, [pc, #452]	; a354 <usb_isr+0x95c>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    a192:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a194:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a196:	mov.w	r1, #0
    a19a:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    a19e:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a1a2:	bmi.w	a2ea <usb_isr+0x8f2>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    a1a6:	ldr	r1, [pc, #420]	; (a34c <usb_isr+0x954>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a1a8:	ldrb	r2, [r5, #4]
			*reg = epconf;
    a1aa:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a1ac:	movs	r1, #0
    a1ae:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    a1b2:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a1b6:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a1b8:	ldr.w	r8, [pc, #408]	; a354 <usb_isr+0x95c>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a1bc:	bmi.n	a2bc <usb_isr+0x8c4>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a1be:	ldrb	r2, [r5, #5]
			*reg = epconf;
    a1c0:	ldr	r1, [pc, #396]	; (a350 <usb_isr+0x958>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a1c2:	ldr	r5, [pc, #400]	; (a354 <usb_isr+0x95c>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    a1c4:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a1c6:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a1c8:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a1ca:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    a1ce:	str.w	r1, [r9, #184]	; 0xb8
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a1d2:	bmi.n	a28e <usb_isr+0x896>
    a1d4:	ldrb	r3, [r6, #0]
    a1d6:	str	r3, [sp, #8]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a1d8:	movs	r1, #0
    a1da:	eor.w	r2, r3, #1
    a1de:	str.w	r1, [r9, #208]	; 0xd0
			table[index(i, TX, ODD)].desc = 0;
    a1e2:	str.w	r1, [r9, #216]	; 0xd8
    a1e6:	b.n	a068 <usb_isr+0x670>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    a1e8:	ldr	r3, [sp, #4]
    a1ea:	mov.w	r2, #0
    a1ee:	strb	r2, [r3, #0]
    a1f0:	b.n	a128 <usb_isr+0x730>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    a1f2:	ldr	r2, [pc, #356]	; (a358 <usb_isr+0x960>)
    a1f4:	ldr	r4, [pc, #312]	; (a330 <usb_isr+0x938>)
    a1f6:	ldrb	r2, [r2, #0]
    a1f8:	strb	r2, [r4, #0]
    a1fa:	b.n	9de2 <usb_isr+0x3ea>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a1fc:	movs	r3, #1
    a1fe:	movs	r2, #0
    a200:	str	r3, [sp, #8]
    a202:	b.n	a068 <usb_isr+0x670>
    a204:	ldrh	r1, [r5, #4]
    a206:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    a20a:	cmp	r1, #6
    a20c:	bhi.w	9efe <usb_isr+0x506>
    a210:	ldrh	r2, [r5, #2]
    a212:	cmp	r2, #0
    a214:	bne.w	9efe <usb_isr+0x506>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    a218:	ldr	r4, [pc, #248]	; (a314 <usb_isr+0x91c>)
    a21a:	str	r0, [sp, #8]
    a21c:	lsls	r1, r1, #2
    a21e:	add	r4, r1
    a220:	ldrb	r1, [r4, #0]
    a222:	orr.w	r1, r1, #2
    a226:	strb	r1, [r4, #0]
    a228:	b.n	a068 <usb_isr+0x670>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    a22a:	str	r0, [sp, #8]
    a22c:	b.n	a068 <usb_isr+0x670>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    a22e:	movs	r0, #2
    a230:	b.n	9de2 <usb_isr+0x3ea>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a232:	bl	9778 <usb_malloc>
				if (p) {
    a236:	cmp	r0, #0
    a238:	beq.w	a412 <usb_isr+0xa1a>
					table[index(i, RX, EVEN)].addr = p->buf;
    a23c:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a23e:	ldr	r2, [pc, #236]	; (a32c <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a240:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a244:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a248:	bl	9778 <usb_malloc>
				if (p) {
    a24c:	cmp	r0, #0
    a24e:	beq.w	a406 <usb_isr+0xa0e>
					table[index(i, RX, ODD)].addr = p->buf;
    a252:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a254:	ldr	r2, [pc, #208]	; (a328 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a256:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a25a:	str.w	r2, [r9, #72]	; 0x48
    a25e:	b.n	a16e <usb_isr+0x776>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a260:	bl	9778 <usb_malloc>
				if (p) {
    a264:	cmp	r0, #0
    a266:	beq.w	a3e2 <usb_isr+0x9ea>
					table[index(i, RX, EVEN)].addr = p->buf;
    a26a:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a26c:	ldr	r2, [pc, #188]	; (a32c <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a26e:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a272:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a276:	bl	9778 <usb_malloc>
				if (p) {
    a27a:	cmp	r0, #0
    a27c:	beq.w	a3d6 <usb_isr+0x9de>
					table[index(i, RX, ODD)].addr = p->buf;
    a280:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a282:	ldr	r2, [pc, #164]	; (a328 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a284:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a288:	str.w	r2, [r9, #40]	; 0x28
    a28c:	b.n	a156 <usb_isr+0x75e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a28e:	bl	9778 <usb_malloc>
				if (p) {
    a292:	cmp	r0, #0
    a294:	beq.w	a3ca <usb_isr+0x9d2>
					table[index(i, RX, EVEN)].addr = p->buf;
    a298:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a29a:	ldr	r2, [pc, #144]	; (a32c <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a29c:	str.w	r0, [r5, #196]	; 0xc4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a2a0:	str.w	r2, [r5, #192]	; 0xc0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a2a4:	bl	9778 <usb_malloc>
				if (p) {
    a2a8:	cmp	r0, #0
    a2aa:	beq.w	a3be <usb_isr+0x9c6>
					table[index(i, RX, ODD)].addr = p->buf;
    a2ae:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a2b0:	ldr	r2, [pc, #116]	; (a328 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a2b2:	str.w	r0, [r9, #204]	; 0xcc
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a2b6:	str.w	r2, [r9, #200]	; 0xc8
    a2ba:	b.n	a1d4 <usb_isr+0x7dc>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a2bc:	bl	9778 <usb_malloc>
				if (p) {
    a2c0:	cmp	r0, #0
    a2c2:	beq.w	a3fa <usb_isr+0xa02>
					table[index(i, RX, EVEN)].addr = p->buf;
    a2c6:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a2c8:	ldr	r2, [pc, #96]	; (a32c <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a2ca:	str.w	r0, [r8, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a2ce:	str.w	r2, [r8, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a2d2:	bl	9778 <usb_malloc>
				if (p) {
    a2d6:	cmp	r0, #0
    a2d8:	beq.w	a3ee <usb_isr+0x9f6>
					table[index(i, RX, ODD)].addr = p->buf;
    a2dc:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a2de:	ldr	r2, [pc, #72]	; (a328 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a2e0:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a2e4:	str.w	r2, [r9, #168]	; 0xa8
    a2e8:	b.n	a1be <usb_isr+0x7c6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a2ea:	bl	9778 <usb_malloc>
				if (p) {
    a2ee:	cmp	r0, #0
    a2f0:	beq.n	a3b2 <usb_isr+0x9ba>
					table[index(i, RX, EVEN)].addr = p->buf;
    a2f2:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a2f4:	ldr	r2, [pc, #52]	; (a32c <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a2f6:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a2fa:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a2fe:	bl	9778 <usb_malloc>
				if (p) {
    a302:	cmp	r0, #0
    a304:	beq.n	a3a6 <usb_isr+0x9ae>
					table[index(i, RX, ODD)].addr = p->buf;
    a306:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a308:	ldr	r2, [pc, #28]	; (a328 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a30a:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a30e:	str.w	r2, [r9, #136]	; 0x88
    a312:	b.n	a1a6 <usb_isr+0x7ae>
    a314:	.word	0x400720c0
    a318:	.word	0x1fff1f0c
    a31c:	.word	0x1fff2088
    a320:	.word	0x1fff1f08
    a324:	.word	0x1fff2004
    a328:	.word	0x004000c8
    a32c:	.word	0x00400088
    a330:	.word	0x1fff2008
    a334:	.word	0x0000fe9c
    a338:	.word	0x400720c4
    a33c:	.word	0x1fff2005
    a340:	.word	0x400720c8
    a344:	.word	0x400720cc
    a348:	.word	0x400720d0
    a34c:	.word	0x400720d4
    a350:	.word	0x400720d8
    a354:	.word	0x1fff0000
    a358:	.word	0x1fff2010
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a35c:	bl	9778 <usb_malloc>
				if (p) {
    a360:	cmp	r0, #0
    a362:	beq.n	a42a <usb_isr+0xa32>
					table[index(i, RX, EVEN)].addr = p->buf;
    a364:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a366:	ldr	r2, [pc, #208]	; (a438 <usb_isr+0xa40>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a368:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a36c:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a370:	bl	9778 <usb_malloc>
				if (p) {
    a374:	cmp	r0, #0
    a376:	beq.n	a41e <usb_isr+0xa26>
					table[index(i, RX, ODD)].addr = p->buf;
    a378:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a37a:	ldr	r2, [pc, #192]	; (a43c <usb_isr+0xa44>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a37c:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a380:	str.w	r2, [r9, #104]	; 0x68
    a384:	b.n	a18a <usb_isr+0x792>
    a386:	cmp	r0, #64	; 0x40
    a388:	mov	lr, r0
    a38a:	it	cs
    a38c:	movcs.w	lr, #64	; 0x40
    a390:	add.w	r3, r4, lr
    a394:	str	r3, [sp, #4]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    a396:	movs	r3, #1
    a398:	rsb	r0, lr, r0
    a39c:	mov.w	r8, lr, lsl #16
    a3a0:	movs	r2, #0
    a3a2:	str	r3, [sp, #8]
    a3a4:	b.n	a072 <usb_isr+0x67a>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a3a6:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a3a8:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    a3ac:	adds	r2, #1
    a3ae:	strb	r2, [r4, #0]
    a3b0:	b.n	a1a6 <usb_isr+0x7ae>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a3b2:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a3b4:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    a3b8:	adds	r2, #1
    a3ba:	strb	r2, [r4, #0]
    a3bc:	b.n	a2fe <usb_isr+0x906>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a3be:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a3c0:	str.w	r0, [r9, #200]	; 0xc8
					usb_rx_memory_needed++;
    a3c4:	adds	r2, #1
    a3c6:	strb	r2, [r4, #0]
    a3c8:	b.n	a1d4 <usb_isr+0x7dc>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a3ca:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a3cc:	str.w	r0, [r5, #192]	; 0xc0
					usb_rx_memory_needed++;
    a3d0:	adds	r2, #1
    a3d2:	strb	r2, [r4, #0]
    a3d4:	b.n	a2a4 <usb_isr+0x8ac>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a3d6:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a3d8:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    a3dc:	adds	r2, #1
    a3de:	strb	r2, [r4, #0]
    a3e0:	b.n	a156 <usb_isr+0x75e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a3e2:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a3e4:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    a3e8:	adds	r2, #1
    a3ea:	strb	r2, [r4, #0]
    a3ec:	b.n	a276 <usb_isr+0x87e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a3ee:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a3f0:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    a3f4:	adds	r2, #1
    a3f6:	strb	r2, [r4, #0]
    a3f8:	b.n	a1be <usb_isr+0x7c6>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a3fa:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a3fc:	str.w	r0, [r8, #160]	; 0xa0
					usb_rx_memory_needed++;
    a400:	adds	r2, #1
    a402:	strb	r2, [r4, #0]
    a404:	b.n	a2d2 <usb_isr+0x8da>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a406:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a408:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    a40c:	adds	r2, #1
    a40e:	strb	r2, [r4, #0]
    a410:	b.n	a16e <usb_isr+0x776>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a412:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a414:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    a418:	adds	r2, #1
    a41a:	strb	r2, [r4, #0]
    a41c:	b.n	a248 <usb_isr+0x850>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a41e:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a420:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    a424:	adds	r2, #1
    a426:	strb	r2, [r4, #0]
    a428:	b.n	a18a <usb_isr+0x792>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a42a:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a42c:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    a430:	adds	r2, #1
    a432:	strb	r2, [r4, #0]
    a434:	b.n	a370 <usb_isr+0x978>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    a436:	bkpt	0x0000
    a438:	.word	0x00400088
    a43c:	.word	0x004000c8

0000a440 <usb_init>:
}



void usb_init(void)
{
    a440:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a444:	ldr	r4, [pc, #144]	; (a4d8 <usb_init+0x98>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    a446:	bl	a868 <usb_init_serialnumber>

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
    a44a:	movs	r2, #0
    a44c:	add.w	r0, r4, #224	; 0xe0
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    a450:	mov	r3, r4

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
    a452:	str	r2, [r3, #0]
		table[i].addr = 0;
    a454:	str	r2, [r3, #4]
    a456:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    a458:	cmp	r3, r0
		table[i].desc = 0;
    a45a:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    a45e:	bne.n	a452 <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    a460:	ldr	r0, [pc, #120]	; (a4dc <usb_init+0x9c>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    a462:	ldr	r2, [pc, #124]	; (a4e0 <usb_init+0xa0>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    a464:	ldr	r3, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    a466:	ldr.w	lr, [pc, #144]	; a4f8 <usb_init+0xb8>
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    a46a:	ldr	r7, [pc, #120]	; (a4e4 <usb_init+0xa4>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    a46c:	ldr	r5, [pc, #120]	; (a4e8 <usb_init+0xa8>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    a46e:	ldr	r6, [pc, #124]	; (a4ec <usb_init+0xac>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    a470:	ldr.w	r8, [pc, #136]	; a4fc <usb_init+0xbc>
	USB0_ERRSTAT = 0xFF;
    a474:	ldr.w	ip, [pc, #136]	; a500 <usb_init+0xc0>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    a478:	ldr.w	r9, [pc, #136]	; a504 <usb_init+0xc4>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    a47c:	orr.w	r3, r3, #262144	; 0x40000
    a480:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    a482:	ldr	r3, [r2, #0]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    a484:	ldr	r0, [pc, #104]	; (a4f0 <usb_init+0xb0>)

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    a486:	orr.w	r3, r3, #50331648	; 0x3000000
    a48a:	str	r3, [r2, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    a48c:	ubfx	r3, r4, #8, #8
    a490:	strb.w	r3, [lr]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    a494:	ubfx	r3, r4, #16, #8
    a498:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    a49a:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    a49c:	movs	r3, #255	; 0xff
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    a49e:	add.w	r2, r2, #411648	; 0x64800
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    a4a2:	strb	r4, [r5, #0]
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    a4a4:	add.w	r2, r2, #264	; 0x108
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    a4a8:	strb.w	r3, [r8]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    a4ac:	ldr	r5, [pc, #68]	; (a4f4 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    a4ae:	strb.w	r3, [ip]
	USB0_OTGISTAT = 0xFF;
    a4b2:	strb	r3, [r6, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    a4b4:	movs	r3, #1
    a4b6:	strb.w	r3, [r9]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    a4ba:	movs	r6, #112	; 0x70

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    a4bc:	strb.w	r1, [lr, #100]	; 0x64
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    a4c0:	mov.w	r4, #2097152	; 0x200000

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    a4c4:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    a4c6:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    a4ca:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    a4cc:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    a4ce:	strb	r1, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    a4d0:	add.w	lr, lr, #100	; 0x64
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    a4d4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a4d8:	.word	0x1fff0000
    a4dc:	.word	0x40048034
    a4e0:	.word	0x4000d800
    a4e4:	.word	0x400720b0
    a4e8:	.word	0x400720b4
    a4ec:	.word	0x40072010
    a4f0:	.word	0xe000e104
    a4f4:	.word	0xe000e435
    a4f8:	.word	0x4007209c
    a4fc:	.word	0x40072080
    a500:	.word	0x40072088
    a504:	.word	0x40072094

0000a508 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    a508:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    a50c:	ldr	r6, [pc, #196]	; (a5d4 <yield+0xcc>)
    a50e:	ldrb	r3, [r6, #0]
    a510:	cbz	r3, a538 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    a512:	ldr	r7, [pc, #196]	; (a5d8 <yield+0xd0>)
    a514:	ldrb	r2, [r7, #0]
    a516:	cbnz	r2, a538 <yield+0x30>
	running = 1;
    a518:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    a51a:	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    a51c:	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    a51e:	bmi.n	a58e <yield+0x86>
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIALUSB2) {
		if (SerialUSB2.available()) serialEventUSB2();
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    a520:	lsls	r2, r3, #30
    a522:	bmi.n	a558 <yield+0x50>
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    a524:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a526:	lsls	r3, r3, #29
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    a528:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a52a:	bpl.n	a538 <yield+0x30>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;  
    a52c:	ldr	r3, [pc, #172]	; (a5dc <yield+0xd4>)
    a52e:	ldr	r2, [r3, #0]
    a530:	cbz	r2, a538 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    a532:	mrs	r2, IPSR
		if (ipsr != 0) return;
    a536:	cbz	r2, a53c <yield+0x34>
    a538:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a53c:	mrs	r1, PRIMASK
		__disable_irq();
    a540:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    a542:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    a544:	cbz	r0, a54e <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    a546:	ldr	r4, [pc, #152]	; (a5e0 <yield+0xd8>)
    a548:	ldrb	r2, [r4, #0]
    a54a:	cmp	r2, #0
    a54c:	beq.n	a5ac <yield+0xa4>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a54e:	cmp	r1, #0
    a550:	bne.n	a538 <yield+0x30>
    a552:	cpsie	i
    a554:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial_putchar(c); return 1; }
	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    a558:	ldr.w	r8, [pc, #144]	; a5ec <yield+0xe4>
    a55c:	ldrb.w	r2, [r8]
    a560:	cmp	r2, #0
    a562:	beq.n	a524 <yield+0x1c>
    a564:	ldr.w	r9, [pc, #136]	; a5f0 <yield+0xe8>
    a568:	movs	r4, #0
    a56a:	b.n	a578 <yield+0x70>
    a56c:	adds	r4, #1
    a56e:	ldrb.w	r3, [r8]
    a572:	uxtb	r4, r4
    a574:	cmp	r3, r4
    a576:	bls.n	a59e <yield+0x96>
			s_serials_with_serial_events[i]->doYieldCode();
    a578:	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
	static uint8_t 			s_count_serials_with_serial_events;
	void 		(* const _serialEvent)(); 
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*_serialEvent)();
    a57c:	ldr	r3, [r5, #0]
    a57e:	mov	r0, r5
    a580:	ldr	r3, [r3, #16]
    a582:	blx	r3
    a584:	cmp	r0, #0
    a586:	beq.n	a56c <yield+0x64>
    a588:	ldr	r3, [r5, #16]
    a58a:	blx	r3
    a58c:	b.n	a56c <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    a58e:	bl	9130 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    a592:	cbnz	r0, a5c8 <yield+0xc0>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    a594:	ldr	r3, [pc, #76]	; (a5e4 <yield+0xdc>)
    a596:	ldrb	r3, [r3, #0]
    a598:	cbnz	r3, a5a2 <yield+0x9a>
    a59a:	ldrb	r3, [r6, #0]
    a59c:	b.n	a520 <yield+0x18>
    a59e:	ldrb	r3, [r6, #0]
    a5a0:	b.n	a524 <yield+0x1c>
    a5a2:	ldrb	r3, [r6, #0]
    a5a4:	and.w	r3, r3, #254	; 0xfe
    a5a8:	strb	r3, [r6, #0]
    a5aa:	b.n	a520 <yield+0x18>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    a5ac:	ldr	r5, [r0, #20]
    a5ae:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    a5b0:	movs	r3, #1
    a5b2:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    a5b4:	cbz	r5, a5ce <yield+0xc6>
			firstYield->_prev = nullptr;
    a5b6:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a5b8:	cbnz	r1, a5bc <yield+0xb4>
    a5ba:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    a5bc:	movs	r5, #0
    a5be:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    a5c0:	ldr	r3, [r0, #8]
    a5c2:	blx	r3
		runningFromYield = false;
    a5c4:	strb	r5, [r4, #0]
    a5c6:	b.n	a538 <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    a5c8:	bl	a77c <serialEvent()>
    a5cc:	b.n	a594 <yield+0x8c>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    a5ce:	ldr	r3, [pc, #24]	; (a5e8 <yield+0xe0>)
    a5d0:	str	r5, [r3, #0]
    a5d2:	b.n	a5b8 <yield+0xb0>
    a5d4:	.word	0x1fff0a08
    a5d8:	.word	0x1fff201a
    a5dc:	.word	0x1fff2028
    a5e0:	.word	0x1fff202c
    a5e4:	.word	0x1fff0a1c
    a5e8:	.word	0x1fff2024
    a5ec:	.word	0x1fff2048
    a5f0:	.word	0x1fff2030

0000a5f4 <EventResponder::triggerEventNotImmediate()>:
uint8_t _serialEvent_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB1_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;	

void EventResponder::triggerEventNotImmediate()
{
    a5f4:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a5f6:	mrs	r2, PRIMASK
		__disable_irq();
    a5fa:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    a5fc:	ldrb	r3, [r0, #29]
    a5fe:	cbnz	r3, a60e <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    a600:	ldrb	r1, [r0, #28]
    a602:	cmp	r1, #1
    a604:	beq.n	a618 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    a606:	cmp	r1, #3
    a608:	beq.n	a62c <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    a60a:	movs	r3, #1
    a60c:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a60e:	cbnz	r2, a612 <EventResponder::triggerEventNotImmediate()+0x1e>
    a610:	cpsie	i
	}
	enableInterrupts(irq);
}
    a612:	ldr.w	r4, [sp], #4
    a616:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    a618:	ldr	r4, [pc, #68]	; (a660 <EventResponder::triggerEventNotImmediate()+0x6c>)
    a61a:	ldr	r1, [r4, #0]
    a61c:	cbz	r1, a648 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    a61e:	ldr	r1, [pc, #68]	; (a664 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    a620:	str	r3, [r0, #20]
				_prev = lastYield;
    a622:	ldr	r3, [r1, #0]
    a624:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    a626:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    a628:	str	r0, [r3, #20]
    a62a:	b.n	a60a <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    a62c:	ldr	r4, [pc, #56]	; (a668 <EventResponder::triggerEventNotImmediate()+0x74>)
    a62e:	ldr	r1, [r4, #0]
    a630:	cbz	r1, a654 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    a632:	ldr	r1, [pc, #56]	; (a66c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    a634:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    a636:	ldr	r3, [r1, #0]
    a638:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    a63a:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    a63c:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    a63e:	ldr	r3, [pc, #48]	; (a670 <EventResponder::triggerEventNotImmediate()+0x7c>)
    a640:	mov.w	r1, #268435456	; 0x10000000
    a644:	str	r1, [r3, #0]
    a646:	b.n	a60a <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    a648:	ldr	r3, [pc, #24]	; (a664 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    a64a:	str	r1, [r0, #20]
				_prev = nullptr;
    a64c:	str	r1, [r0, #24]
				firstYield = this;
    a64e:	str	r0, [r4, #0]
				lastYield = this;
    a650:	str	r0, [r3, #0]
    a652:	b.n	a60a <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    a654:	ldr	r3, [pc, #20]	; (a66c <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    a656:	str	r1, [r0, #20]
				_prev = nullptr;
    a658:	str	r1, [r0, #24]
				firstInterrupt = this;
    a65a:	str	r0, [r4, #0]
				lastInterrupt = this;
    a65c:	str	r0, [r3, #0]
    a65e:	b.n	a63e <EventResponder::triggerEventNotImmediate()+0x4a>
    a660:	.word	0x1fff2028
    a664:	.word	0x1fff2024
    a668:	.word	0x1fff201c
    a66c:	.word	0x1fff2020
    a670:	.word	0xe000ed04

0000a674 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    a674:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a676:	mrs	r2, PRIMASK
		__disable_irq();
    a67a:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    a67c:	ldr	r4, [pc, #48]	; (a6b0 <EventResponder::runFromInterrupt()+0x3c>)
    a67e:	ldr	r0, [r4, #0]
		if (first) {
    a680:	cbz	r0, a6a4 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    a682:	ldr	r6, [pc, #48]	; (a6b4 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    a684:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    a686:	ldr	r3, [r0, #20]
    a688:	str	r3, [r4, #0]
			if (firstInterrupt) {
    a68a:	cbz	r3, a6aa <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    a68c:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a68e:	cbnz	r2, a692 <EventResponder::runFromInterrupt()+0x1e>
    a690:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    a692:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    a694:	ldr	r3, [r0, #8]
    a696:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a698:	mrs	r2, PRIMASK
		__disable_irq();
    a69c:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    a69e:	ldr	r0, [r4, #0]
		if (first) {
    a6a0:	cmp	r0, #0
    a6a2:	bne.n	a686 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a6a4:	cbnz	r2, a6a8 <EventResponder::runFromInterrupt()+0x34>
    a6a6:	cpsie	i
    a6a8:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    a6aa:	str	r3, [r6, #0]
    a6ac:	b.n	a68e <EventResponder::runFromInterrupt()+0x1a>
    a6ae:	nop
    a6b0:	.word	0x1fff201c
    a6b4:	.word	0x1fff2020

0000a6b8 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    a6b8:	b.w	a674 <EventResponder::runFromInterrupt()>

0000a6bc <systick_isr>:

extern "C" volatile uint32_t systick_millis_count;

void systick_isr(void)
{
	systick_millis_count++;
    a6bc:	ldr	r2, [pc, #8]	; (a6c8 <systick_isr+0xc>)
    a6be:	ldr	r3, [r2, #0]
    a6c0:	adds	r3, #1
    a6c2:	str	r3, [r2, #0]
    a6c4:	bx	lr
    a6c6:	nop
    a6c8:	.word	0x1fff1f0c

0000a6cc <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    a6cc:	b.w	914c <usb_serial_flush_input>

0000a6d0 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    a6d0:	b.w	9100 <usb_serial_peekchar>

0000a6d4 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    a6d4:	b.w	90b8 <usb_serial_getchar>

0000a6d8 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    a6d8:	b.w	9130 <usb_serial_available>

0000a6dc <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    a6dc:	b.w	92ec <usb_serial_flush_output>

0000a6e0 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    a6e0:	b.w	92a4 <usb_serial_write_buffer_free>

0000a6e4 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a6e4:	mov	r0, r1
    a6e6:	mov	r1, r2
    a6e8:	b.w	9184 <usb_serial_write>

0000a6ec <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a6ec:	mov	r0, r1
    a6ee:	b.w	928c <usb_serial_putchar>
    a6f2:	nop

0000a6f4 <Print::write(unsigned char const*, unsigned int)>:

#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
    a6f4:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    a6f6:	mov	r6, r1
    a6f8:	cbz	r1, a718 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    a6fa:	cbz	r2, a71c <Print::write(unsigned char const*, unsigned int)+0x28>
    a6fc:	mov	r7, r0
    a6fe:	mov	r4, r2
    a700:	movs	r5, #0
    a702:	ldr	r3, [r7, #0]
    a704:	ldrb.w	r1, [r6], #1
    a708:	ldr	r3, [r3, #0]
    a70a:	mov	r0, r7
    a70c:	blx	r3
    a70e:	subs	r4, #1
    a710:	add	r5, r0
    a712:	bne.n	a702 <Print::write(unsigned char const*, unsigned int)+0xe>
    a714:	mov	r0, r5
    a716:	pop	{r3, r4, r5, r6, r7, pc}
#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    a718:	mov	r0, r1
    a71a:	pop	{r3, r4, r5, r6, r7, pc}
    a71c:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    a71e:	pop	{r3, r4, r5, r6, r7, pc}

0000a720 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    a720:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    a722:	ldr	r2, [pc, #24]	; (a73c <Print::println()+0x1c>)
	return write(buf, 2);
    a724:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    a726:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    a728:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    a72a:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    a72c:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    a72e:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    a732:	movs	r2, #2
    a734:	blx	r3
}
    a736:	add	sp, #12
    a738:	ldr.w	pc, [sp], #4
    a73c:	.word	0x0000fe98

0000a740 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    a740:	push	{r4, lr}
	((class Print *)file)->write((uint8_t *)ptr, len);
    a742:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    a744:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    a746:	ldr	r3, [r3, #4]
    a748:	blx	r3
	return len;
}
    a74a:	mov	r0, r4
    a74c:	pop	{r4, pc}
    a74e:	nop

0000a750 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    a750:	push	{r1, r2, r3}
    a752:	push	{lr}
    a754:	sub	sp, #8
    a756:	add	r2, sp, #12
    a758:	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    a75c:	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    a75e:	bl	c548 <vdprintf>
#endif
}
    a762:	add	sp, #8
    a764:	ldr.w	lr, [sp], #4
    a768:	add	sp, #12
    a76a:	bx	lr

0000a76c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    a76c:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    a76e:	bl	ef8 <setup>
	while (1) {
		loop();
    a772:	bl	f8c <loop>
		yield();
    a776:	bl	a508 <yield>
    a77a:	b.n	a772 <main+0x6>

0000a77c <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    a77c:	bx	lr
    a77e:	nop

0000a780 <operator new(unsigned int)>:
    a780:	b.w	b5dc <malloc>

0000a784 <operator delete(void*, unsigned int)>:
    a784:	b.w	b5ec <free>

0000a788 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    a788:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    a78a:	ldr	r0, [pc, #164]	; (a830 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    a78c:	ldr	r2, [pc, #164]	; (a834 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    a78e:	ldr	r3, [pc, #168]	; (a838 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    a790:	ldr	r5, [pc, #168]	; (a83c <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    a792:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    a794:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    a796:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    a798:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    a79a:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    a79c:	ldr	r4, [pc, #160]	; (a840 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    a79e:	cmp	r3, #8
    a7a0:	beq.n	a804 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    a7a2:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    a7a4:	ldr	r0, [pc, #156]	; (a844 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    a7a6:	ldr	r1, [pc, #160]	; (a848 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    a7a8:	beq.n	a81a <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    a7aa:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    a7ac:	ite	eq
    a7ae:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    a7b0:	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    a7b2:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    a7b4:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    a7b6:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    a7b8:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    a7ba:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    a7bc:	ldr	r3, [pc, #140]	; (a84c <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    a7be:	ldr	r1, [pc, #144]	; (a850 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    a7c0:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    a7c2:	ldr	r2, [pc, #144]	; (a854 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    a7c4:	cbz	r3, a7f6 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    a7c6:	movs	r3, #1
    a7c8:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    a7ca:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    a7cc:	ldr	r3, [pc, #136]	; (a858 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    a7ce:	ldr	r1, [pc, #140]	; (a85c <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    a7d0:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    a7d2:	ldr	r2, [pc, #140]	; (a860 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    a7d4:	cmp	r3, #1
    a7d6:	bls.n	a826 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    a7d8:	cmp	r3, #4
    a7da:	bls.n	a7fc <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    a7dc:	cmp	r3, #8
    a7de:	bls.n	a81e <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    a7e0:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    a7e2:	ite	ls
    a7e4:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    a7e6:	movhi	r3, #135	; 0x87
    a7e8:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    a7ea:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    a7ec:	ldr	r3, [pc, #116]	; (a864 <analog_init+0xdc>)
    a7ee:	movs	r2, #1
    a7f0:	strb	r2, [r3, #0]
}
    a7f2:	pop	{r4, r5}
    a7f4:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    a7f6:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    a7f8:	str	r3, [r2, #0]
    a7fa:	b.n	a7cc <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    a7fc:	movs	r3, #132	; 0x84
    a7fe:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    a800:	str	r3, [r2, #0]
    a802:	b.n	a7ec <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    a804:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    a808:	ldr	r1, [pc, #60]	; (a848 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    a80a:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    a80c:	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    a80e:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    a810:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    a812:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    a814:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    a816:	str	r3, [r1, #0]
    a818:	b.n	a7bc <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    a81a:	movs	r2, #57	; 0x39
    a81c:	b.n	a80e <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    a81e:	movs	r3, #133	; 0x85
    a820:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    a822:	str	r3, [r2, #0]
    a824:	b.n	a7ec <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    a826:	movs	r3, #128	; 0x80
    a828:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    a82a:	str	r3, [r2, #0]
    a82c:	b.n	a7ec <analog_init+0x64>
    a82e:	nop
    a830:	.word	0x40074000
    a834:	.word	0x40074001
    a838:	.word	0x1fff0a1d
    a83c:	.word	0x4003b008
    a840:	.word	0x4003b00c
    a844:	.word	0x400bb008
    a848:	.word	0x400bb00c
    a84c:	.word	0x1fff204a
    a850:	.word	0x4003b020
    a854:	.word	0x400bb020
    a858:	.word	0x1fff0a1e
    a85c:	.word	0x4003b024
    a860:	.word	0x400bb024
    a864:	.word	0x1fff2049

0000a868 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    a868:	cpsid	i
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    a86a:	ldr	r2, [pc, #96]	; (a8cc <usb_init_serialnumber+0x64>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    a86c:	ldr	r3, [pc, #96]	; (a8d0 <usb_init_serialnumber+0x68>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    a86e:	ldr	r1, [pc, #100]	; (a8d4 <usb_init_serialnumber+0x6c>)
    a870:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    a872:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    a874:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    a876:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    a878:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    a87a:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    a87c:	ldrb	r3, [r2, #0]
    a87e:	lsls	r3, r3, #24
    a880:	bpl.n	a87c <usb_init_serialnumber+0x14>
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    a882:	push	{r4, lr}
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    a884:	ldr	r3, [pc, #80]	; (a8d8 <usb_init_serialnumber+0x70>)
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    a886:	sub	sp, #16
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    a888:	ldr	r0, [r3, #0]
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    a88a:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    a88c:	ldr	r3, [pc, #76]	; (a8dc <usb_init_serialnumber+0x74>)
    a88e:	ldr	r4, [pc, #80]	; (a8e0 <usb_init_serialnumber+0x78>)
    a890:	cmp	r0, r3
    a892:	it	ls
    a894:	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    a898:	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    a89a:	it	ls
    a89c:	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    a89e:	movs	r2, #10
    a8a0:	bl	a8e4 <ultoa>
    a8a4:	add	r1, sp, #4
    a8a6:	mov	r0, r4
	for (i=0; i<10; i++) {
    a8a8:	movs	r3, #0
		char c = buf[i];
    a8aa:	ldrb.w	r2, [r1], #1
    a8ae:	adds	r3, #1
		if (!c) break;
    a8b0:	cbz	r2, a8c2 <usb_init_serialnumber+0x5a>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    a8b2:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    a8b4:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    a8b8:	bne.n	a8aa <usb_init_serialnumber+0x42>
    a8ba:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    a8bc:	strb	r3, [r4, #0]
}
    a8be:	add	sp, #16
    a8c0:	pop	{r4, pc}
    a8c2:	lsls	r3, r3, #1
    a8c4:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    a8c6:	strb	r3, [r4, #0]
}
    a8c8:	add	sp, #16
    a8ca:	pop	{r4, pc}
    a8cc:	.word	0x40020004
    a8d0:	.word	0x40020000
    a8d4:	.word	0x41070000
    a8d8:	.word	0x4002000c
    a8dc:	.word	0x0098967f
    a8e0:	.word	0x1fff0af4

0000a8e4 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    a8e4:	push	{r4, r5, r6, r7}
    a8e6:	subs	r5, r1, #1
    a8e8:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    a8ea:	movs	r4, #0
    a8ec:	b.n	a8f0 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    a8ee:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    a8f0:	udiv	r3, r0, r2
    a8f4:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a8f8:	cmp	r0, #9
    a8fa:	add.w	r7, r0, #48	; 0x30
    a8fe:	itet	hi
    a900:	addhi	r0, #55	; 0x37
    a902:	uxtbls	r0, r7
    a904:	uxtbhi	r0, r0
    a906:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    a90a:	mov	r0, r3
    a90c:	cmp	r3, #0
    a90e:	bne.n	a8ee <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    a910:	adds	r2, r1, r4
    a912:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    a914:	cbz	r4, a92a <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    a916:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    a918:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    a91c:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    a91e:	adds	r3, #1
    a920:	subs	r0, r4, r3
    a922:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    a924:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    a928:	blt.n	a916 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    a92a:	mov	r0, r1
    a92c:	pop	{r4, r5, r6, r7}
    a92e:	bx	lr

0000a930 <__aeabi_atexit>:
    a930:	mov	r3, r1
    a932:	mov	r1, r0
    a934:	mov	r0, r3
    a936:	b.w	b574 <__cxa_atexit>
    a93a:	nop

0000a93c <__aeabi_drsub>:
    a93c:	eor.w	r1, r1, #2147483648	; 0x80000000
    a940:	b.n	a948 <__adddf3>
    a942:	nop

0000a944 <__aeabi_dsub>:
    a944:	eor.w	r3, r3, #2147483648	; 0x80000000

0000a948 <__adddf3>:
    a948:	push	{r4, r5, lr}
    a94a:	mov.w	r4, r1, lsl #1
    a94e:	mov.w	r5, r3, lsl #1
    a952:	teq	r4, r5
    a956:	it	eq
    a958:	teqeq	r0, r2
    a95c:	itttt	ne
    a95e:	orrsne.w	ip, r4, r0
    a962:	orrsne.w	ip, r5, r2
    a966:	mvnsne.w	ip, r4, asr #21
    a96a:	mvnsne.w	ip, r5, asr #21
    a96e:	beq.w	ab36 <__adddf3+0x1ee>
    a972:	mov.w	r4, r4, lsr #21
    a976:	rsbs	r5, r4, r5, lsr #21
    a97a:	it	lt
    a97c:	neglt	r5, r5
    a97e:	ble.n	a99a <__adddf3+0x52>
    a980:	add	r4, r5
    a982:	eor.w	r2, r0, r2
    a986:	eor.w	r3, r1, r3
    a98a:	eor.w	r0, r2, r0
    a98e:	eor.w	r1, r3, r1
    a992:	eor.w	r2, r0, r2
    a996:	eor.w	r3, r1, r3
    a99a:	cmp	r5, #54	; 0x36
    a99c:	it	hi
    a99e:	pophi	{r4, r5, pc}
    a9a0:	tst.w	r1, #2147483648	; 0x80000000
    a9a4:	mov.w	r1, r1, lsl #12
    a9a8:	mov.w	ip, #1048576	; 0x100000
    a9ac:	orr.w	r1, ip, r1, lsr #12
    a9b0:	beq.n	a9b8 <__adddf3+0x70>
    a9b2:	negs	r0, r0
    a9b4:	sbc.w	r1, r1, r1, lsl #1
    a9b8:	tst.w	r3, #2147483648	; 0x80000000
    a9bc:	mov.w	r3, r3, lsl #12
    a9c0:	orr.w	r3, ip, r3, lsr #12
    a9c4:	beq.n	a9cc <__adddf3+0x84>
    a9c6:	negs	r2, r2
    a9c8:	sbc.w	r3, r3, r3, lsl #1
    a9cc:	teq	r4, r5
    a9d0:	beq.w	ab22 <__adddf3+0x1da>
    a9d4:	sub.w	r4, r4, #1
    a9d8:	rsbs	lr, r5, #32
    a9dc:	blt.n	a9fa <__adddf3+0xb2>
    a9de:	lsl.w	ip, r2, lr
    a9e2:	lsr.w	r2, r2, r5
    a9e6:	adds	r0, r0, r2
    a9e8:	adc.w	r1, r1, #0
    a9ec:	lsl.w	r2, r3, lr
    a9f0:	adds	r0, r0, r2
    a9f2:	asr.w	r3, r3, r5
    a9f6:	adcs	r1, r3
    a9f8:	b.n	aa18 <__adddf3+0xd0>
    a9fa:	sub.w	r5, r5, #32
    a9fe:	add.w	lr, lr, #32
    aa02:	cmp	r2, #1
    aa04:	lsl.w	ip, r3, lr
    aa08:	it	cs
    aa0a:	orrcs.w	ip, ip, #2
    aa0e:	asr.w	r3, r3, r5
    aa12:	adds	r0, r0, r3
    aa14:	adcs.w	r1, r1, r3, asr #31
    aa18:	and.w	r5, r1, #2147483648	; 0x80000000
    aa1c:	bpl.n	aa2e <__adddf3+0xe6>
    aa1e:	mov.w	lr, #0
    aa22:	rsbs	ip, ip, #0
    aa26:	sbcs.w	r0, lr, r0
    aa2a:	sbc.w	r1, lr, r1
    aa2e:	cmp.w	r1, #1048576	; 0x100000
    aa32:	bcc.n	aa6c <__adddf3+0x124>
    aa34:	cmp.w	r1, #2097152	; 0x200000
    aa38:	bcc.n	aa54 <__adddf3+0x10c>
    aa3a:	lsrs	r1, r1, #1
    aa3c:	movs.w	r0, r0, rrx
    aa40:	mov.w	ip, ip, rrx
    aa44:	add.w	r4, r4, #1
    aa48:	mov.w	r2, r4, lsl #21
    aa4c:	cmn.w	r2, #4194304	; 0x400000
    aa50:	bcs.w	ab88 <__adddf3+0x240>
    aa54:	cmp.w	ip, #2147483648	; 0x80000000
    aa58:	it	eq
    aa5a:	movseq.w	ip, r0, lsr #1
    aa5e:	adcs.w	r0, r0, #0
    aa62:	adc.w	r1, r1, r4, lsl #20
    aa66:	orr.w	r1, r1, r5
    aa6a:	pop	{r4, r5, pc}
    aa6c:	movs.w	ip, ip, lsl #1
    aa70:	adcs	r0, r0
    aa72:	adc.w	r1, r1, r1
    aa76:	tst.w	r1, #1048576	; 0x100000
    aa7a:	sub.w	r4, r4, #1
    aa7e:	bne.n	aa54 <__adddf3+0x10c>
    aa80:	teq	r1, #0
    aa84:	itt	eq
    aa86:	moveq	r1, r0
    aa88:	moveq	r0, #0
    aa8a:	clz	r3, r1
    aa8e:	it	eq
    aa90:	addeq	r3, #32
    aa92:	sub.w	r3, r3, #11
    aa96:	subs.w	r2, r3, #32
    aa9a:	bge.n	aab6 <__adddf3+0x16e>
    aa9c:	adds	r2, #12
    aa9e:	ble.n	aab2 <__adddf3+0x16a>
    aaa0:	add.w	ip, r2, #20
    aaa4:	rsb	r2, r2, #12
    aaa8:	lsl.w	r0, r1, ip
    aaac:	lsr.w	r1, r1, r2
    aab0:	b.n	aacc <__adddf3+0x184>
    aab2:	add.w	r2, r2, #20
    aab6:	it	le
    aab8:	rsble	ip, r2, #32
    aabc:	lsl.w	r1, r1, r2
    aac0:	lsr.w	ip, r0, ip
    aac4:	itt	le
    aac6:	orrle.w	r1, r1, ip
    aaca:	lslle	r0, r2
    aacc:	subs	r4, r4, r3
    aace:	ittt	ge
    aad0:	addge.w	r1, r1, r4, lsl #20
    aad4:	orrge	r1, r5
    aad6:	popge	{r4, r5, pc}
    aad8:	mvn.w	r4, r4
    aadc:	subs	r4, #31
    aade:	bge.n	ab1a <__adddf3+0x1d2>
    aae0:	adds	r4, #12
    aae2:	bgt.n	ab02 <__adddf3+0x1ba>
    aae4:	add.w	r4, r4, #20
    aae8:	rsb	r2, r4, #32
    aaec:	lsr.w	r0, r0, r4
    aaf0:	lsl.w	r3, r1, r2
    aaf4:	orr.w	r0, r0, r3
    aaf8:	lsr.w	r3, r1, r4
    aafc:	orr.w	r1, r5, r3
    ab00:	pop	{r4, r5, pc}
    ab02:	rsb	r4, r4, #12
    ab06:	rsb	r2, r4, #32
    ab0a:	lsr.w	r0, r0, r2
    ab0e:	lsl.w	r3, r1, r4
    ab12:	orr.w	r0, r0, r3
    ab16:	mov	r1, r5
    ab18:	pop	{r4, r5, pc}
    ab1a:	lsr.w	r0, r1, r4
    ab1e:	mov	r1, r5
    ab20:	pop	{r4, r5, pc}
    ab22:	teq	r4, #0
    ab26:	eor.w	r3, r3, #1048576	; 0x100000
    ab2a:	itte	eq
    ab2c:	eoreq.w	r1, r1, #1048576	; 0x100000
    ab30:	addeq	r4, #1
    ab32:	subne	r5, #1
    ab34:	b.n	a9d4 <__adddf3+0x8c>
    ab36:	mvns.w	ip, r4, asr #21
    ab3a:	it	ne
    ab3c:	mvnsne.w	ip, r5, asr #21
    ab40:	beq.n	ab96 <__adddf3+0x24e>
    ab42:	teq	r4, r5
    ab46:	it	eq
    ab48:	teqeq	r0, r2
    ab4c:	beq.n	ab5a <__adddf3+0x212>
    ab4e:	orrs.w	ip, r4, r0
    ab52:	itt	eq
    ab54:	moveq	r1, r3
    ab56:	moveq	r0, r2
    ab58:	pop	{r4, r5, pc}
    ab5a:	teq	r1, r3
    ab5e:	ittt	ne
    ab60:	movne	r1, #0
    ab62:	movne	r0, #0
    ab64:	popne	{r4, r5, pc}
    ab66:	movs.w	ip, r4, lsr #21
    ab6a:	bne.n	ab78 <__adddf3+0x230>
    ab6c:	lsls	r0, r0, #1
    ab6e:	adcs	r1, r1
    ab70:	it	cs
    ab72:	orrcs.w	r1, r1, #2147483648	; 0x80000000
    ab76:	pop	{r4, r5, pc}
    ab78:	adds.w	r4, r4, #4194304	; 0x400000
    ab7c:	itt	cc
    ab7e:	addcc.w	r1, r1, #1048576	; 0x100000
    ab82:	popcc	{r4, r5, pc}
    ab84:	and.w	r5, r1, #2147483648	; 0x80000000
    ab88:	orr.w	r1, r5, #2130706432	; 0x7f000000
    ab8c:	orr.w	r1, r1, #15728640	; 0xf00000
    ab90:	mov.w	r0, #0
    ab94:	pop	{r4, r5, pc}
    ab96:	mvns.w	ip, r4, asr #21
    ab9a:	itte	ne
    ab9c:	movne	r1, r3
    ab9e:	movne	r0, r2
    aba0:	mvnseq.w	ip, r5, asr #21
    aba4:	itt	ne
    aba6:	movne	r3, r1
    aba8:	movne	r2, r0
    abaa:	orrs.w	r4, r0, r1, lsl #12
    abae:	itte	eq
    abb0:	orrseq.w	r5, r2, r3, lsl #12
    abb4:	teqeq	r1, r3
    abb8:	orrne.w	r1, r1, #524288	; 0x80000
    abbc:	pop	{r4, r5, pc}
    abbe:	nop

0000abc0 <__aeabi_ui2d>:
    abc0:	teq	r0, #0
    abc4:	itt	eq
    abc6:	moveq	r1, #0
    abc8:	bxeq	lr
    abca:	push	{r4, r5, lr}
    abcc:	mov.w	r4, #1024	; 0x400
    abd0:	add.w	r4, r4, #50	; 0x32
    abd4:	mov.w	r5, #0
    abd8:	mov.w	r1, #0
    abdc:	b.n	aa80 <__adddf3+0x138>
    abde:	nop

0000abe0 <__aeabi_i2d>:
    abe0:	teq	r0, #0
    abe4:	itt	eq
    abe6:	moveq	r1, #0
    abe8:	bxeq	lr
    abea:	push	{r4, r5, lr}
    abec:	mov.w	r4, #1024	; 0x400
    abf0:	add.w	r4, r4, #50	; 0x32
    abf4:	ands.w	r5, r0, #2147483648	; 0x80000000
    abf8:	it	mi
    abfa:	negmi	r0, r0
    abfc:	mov.w	r1, #0
    ac00:	b.n	aa80 <__adddf3+0x138>
    ac02:	nop

0000ac04 <__aeabi_f2d>:
    ac04:	lsls	r2, r0, #1
    ac06:	mov.w	r1, r2, asr #3
    ac0a:	mov.w	r1, r1, rrx
    ac0e:	mov.w	r0, r2, lsl #28
    ac12:	itttt	ne
    ac14:	andsne.w	r3, r2, #4278190080	; 0xff000000
    ac18:	teqne	r3, #4278190080	; 0xff000000
    ac1c:	eorne.w	r1, r1, #939524096	; 0x38000000
    ac20:	bxne	lr
    ac22:	teq	r2, #0
    ac26:	ite	ne
    ac28:	teqne	r3, #4278190080	; 0xff000000
    ac2c:	bxeq	lr
    ac2e:	push	{r4, r5, lr}
    ac30:	mov.w	r4, #896	; 0x380
    ac34:	and.w	r5, r1, #2147483648	; 0x80000000
    ac38:	bic.w	r1, r1, #2147483648	; 0x80000000
    ac3c:	b.n	aa80 <__adddf3+0x138>
    ac3e:	nop

0000ac40 <__aeabi_ul2d>:
    ac40:	orrs.w	r2, r0, r1
    ac44:	it	eq
    ac46:	bxeq	lr
    ac48:	push	{r4, r5, lr}
    ac4a:	mov.w	r5, #0
    ac4e:	b.n	ac66 <__aeabi_l2d+0x16>

0000ac50 <__aeabi_l2d>:
    ac50:	orrs.w	r2, r0, r1
    ac54:	it	eq
    ac56:	bxeq	lr
    ac58:	push	{r4, r5, lr}
    ac5a:	ands.w	r5, r1, #2147483648	; 0x80000000
    ac5e:	bpl.n	ac66 <__aeabi_l2d+0x16>
    ac60:	negs	r0, r0
    ac62:	sbc.w	r1, r1, r1, lsl #1
    ac66:	mov.w	r4, #1024	; 0x400
    ac6a:	add.w	r4, r4, #50	; 0x32
    ac6e:	movs.w	ip, r1, lsr #22
    ac72:	beq.w	aa2e <__adddf3+0xe6>
    ac76:	mov.w	r2, #3
    ac7a:	movs.w	ip, ip, lsr #3
    ac7e:	it	ne
    ac80:	addne	r2, #3
    ac82:	movs.w	ip, ip, lsr #3
    ac86:	it	ne
    ac88:	addne	r2, #3
    ac8a:	add.w	r2, r2, ip, lsr #3
    ac8e:	rsb	r3, r2, #32
    ac92:	lsl.w	ip, r0, r3
    ac96:	lsr.w	r0, r0, r2
    ac9a:	lsl.w	lr, r1, r3
    ac9e:	orr.w	r0, r0, lr
    aca2:	lsr.w	r1, r1, r2
    aca6:	add	r4, r2
    aca8:	b.n	aa2e <__adddf3+0xe6>
    acaa:	nop

0000acac <__aeabi_dmul>:
    acac:	push	{r4, r5, r6, lr}
    acae:	mov.w	ip, #255	; 0xff
    acb2:	orr.w	ip, ip, #1792	; 0x700
    acb6:	ands.w	r4, ip, r1, lsr #20
    acba:	ittte	ne
    acbc:	andsne.w	r5, ip, r3, lsr #20
    acc0:	teqne	r4, ip
    acc4:	teqne	r5, ip
    acc8:	bleq	ae88 <__aeabi_dmul+0x1dc>
    accc:	add	r4, r5
    acce:	eor.w	r6, r1, r3
    acd2:	bic.w	r1, r1, ip, lsl #21
    acd6:	bic.w	r3, r3, ip, lsl #21
    acda:	orrs.w	r5, r0, r1, lsl #12
    acde:	it	ne
    ace0:	orrsne.w	r5, r2, r3, lsl #12
    ace4:	orr.w	r1, r1, #1048576	; 0x100000
    ace8:	orr.w	r3, r3, #1048576	; 0x100000
    acec:	beq.n	ad60 <__aeabi_dmul+0xb4>
    acee:	umull	ip, lr, r0, r2
    acf2:	mov.w	r5, #0
    acf6:	umlal	lr, r5, r1, r2
    acfa:	and.w	r2, r6, #2147483648	; 0x80000000
    acfe:	umlal	lr, r5, r0, r3
    ad02:	mov.w	r6, #0
    ad06:	umlal	r5, r6, r1, r3
    ad0a:	teq	ip, #0
    ad0e:	it	ne
    ad10:	orrne.w	lr, lr, #1
    ad14:	sub.w	r4, r4, #255	; 0xff
    ad18:	cmp.w	r6, #512	; 0x200
    ad1c:	sbc.w	r4, r4, #768	; 0x300
    ad20:	bcs.n	ad2c <__aeabi_dmul+0x80>
    ad22:	movs.w	lr, lr, lsl #1
    ad26:	adcs	r5, r5
    ad28:	adc.w	r6, r6, r6
    ad2c:	orr.w	r1, r2, r6, lsl #11
    ad30:	orr.w	r1, r1, r5, lsr #21
    ad34:	mov.w	r0, r5, lsl #11
    ad38:	orr.w	r0, r0, lr, lsr #21
    ad3c:	mov.w	lr, lr, lsl #11
    ad40:	subs.w	ip, r4, #253	; 0xfd
    ad44:	it	hi
    ad46:	cmphi.w	ip, #1792	; 0x700
    ad4a:	bhi.n	ad8a <__aeabi_dmul+0xde>
    ad4c:	cmp.w	lr, #2147483648	; 0x80000000
    ad50:	it	eq
    ad52:	movseq.w	lr, r0, lsr #1
    ad56:	adcs.w	r0, r0, #0
    ad5a:	adc.w	r1, r1, r4, lsl #20
    ad5e:	pop	{r4, r5, r6, pc}
    ad60:	and.w	r6, r6, #2147483648	; 0x80000000
    ad64:	orr.w	r1, r6, r1
    ad68:	orr.w	r0, r0, r2
    ad6c:	eor.w	r1, r1, r3
    ad70:	subs.w	r4, r4, ip, lsr #1
    ad74:	ittt	gt
    ad76:	rsbsgt	r5, r4, ip
    ad7a:	orrgt.w	r1, r1, r4, lsl #20
    ad7e:	popgt	{r4, r5, r6, pc}
    ad80:	orr.w	r1, r1, #1048576	; 0x100000
    ad84:	mov.w	lr, #0
    ad88:	subs	r4, #1
    ad8a:	bgt.w	aee4 <__aeabi_dmul+0x238>
    ad8e:	cmn.w	r4, #54	; 0x36
    ad92:	ittt	le
    ad94:	movle	r0, #0
    ad96:	andle.w	r1, r1, #2147483648	; 0x80000000
    ad9a:	pople	{r4, r5, r6, pc}
    ad9c:	rsb	r4, r4, #0
    ada0:	subs	r4, #32
    ada2:	bge.n	ae10 <__aeabi_dmul+0x164>
    ada4:	adds	r4, #12
    ada6:	bgt.n	ade0 <__aeabi_dmul+0x134>
    ada8:	add.w	r4, r4, #20
    adac:	rsb	r5, r4, #32
    adb0:	lsl.w	r3, r0, r5
    adb4:	lsr.w	r0, r0, r4
    adb8:	lsl.w	r2, r1, r5
    adbc:	orr.w	r0, r0, r2
    adc0:	and.w	r2, r1, #2147483648	; 0x80000000
    adc4:	bic.w	r1, r1, #2147483648	; 0x80000000
    adc8:	adds.w	r0, r0, r3, lsr #31
    adcc:	lsr.w	r6, r1, r4
    add0:	adc.w	r1, r2, r6
    add4:	orrs.w	lr, lr, r3, lsl #1
    add8:	it	eq
    adda:	biceq.w	r0, r0, r3, lsr #31
    adde:	pop	{r4, r5, r6, pc}
    ade0:	rsb	r4, r4, #12
    ade4:	rsb	r5, r4, #32
    ade8:	lsl.w	r3, r0, r4
    adec:	lsr.w	r0, r0, r5
    adf0:	lsl.w	r2, r1, r4
    adf4:	orr.w	r0, r0, r2
    adf8:	and.w	r1, r1, #2147483648	; 0x80000000
    adfc:	adds.w	r0, r0, r3, lsr #31
    ae00:	adc.w	r1, r1, #0
    ae04:	orrs.w	lr, lr, r3, lsl #1
    ae08:	it	eq
    ae0a:	biceq.w	r0, r0, r3, lsr #31
    ae0e:	pop	{r4, r5, r6, pc}
    ae10:	rsb	r5, r4, #32
    ae14:	lsl.w	r2, r0, r5
    ae18:	orr.w	lr, lr, r2
    ae1c:	lsr.w	r3, r0, r4
    ae20:	lsl.w	r2, r1, r5
    ae24:	orr.w	r3, r3, r2
    ae28:	lsr.w	r0, r1, r4
    ae2c:	and.w	r1, r1, #2147483648	; 0x80000000
    ae30:	lsr.w	r2, r1, r4
    ae34:	bic.w	r0, r0, r2
    ae38:	add.w	r0, r0, r3, lsr #31
    ae3c:	orrs.w	lr, lr, r3, lsl #1
    ae40:	it	eq
    ae42:	biceq.w	r0, r0, r3, lsr #31
    ae46:	pop	{r4, r5, r6, pc}
    ae48:	teq	r4, #0
    ae4c:	bne.n	ae6e <__aeabi_dmul+0x1c2>
    ae4e:	and.w	r6, r1, #2147483648	; 0x80000000
    ae52:	lsls	r0, r0, #1
    ae54:	adc.w	r1, r1, r1
    ae58:	tst.w	r1, #1048576	; 0x100000
    ae5c:	it	eq
    ae5e:	subeq	r4, #1
    ae60:	beq.n	ae52 <__aeabi_dmul+0x1a6>
    ae62:	orr.w	r1, r1, r6
    ae66:	teq	r5, #0
    ae6a:	it	ne
    ae6c:	bxne	lr
    ae6e:	and.w	r6, r3, #2147483648	; 0x80000000
    ae72:	lsls	r2, r2, #1
    ae74:	adc.w	r3, r3, r3
    ae78:	tst.w	r3, #1048576	; 0x100000
    ae7c:	it	eq
    ae7e:	subeq	r5, #1
    ae80:	beq.n	ae72 <__aeabi_dmul+0x1c6>
    ae82:	orr.w	r3, r3, r6
    ae86:	bx	lr
    ae88:	teq	r4, ip
    ae8c:	and.w	r5, ip, r3, lsr #20
    ae90:	it	ne
    ae92:	teqne	r5, ip
    ae96:	beq.n	aeb2 <__aeabi_dmul+0x206>
    ae98:	orrs.w	r6, r0, r1, lsl #1
    ae9c:	it	ne
    ae9e:	orrsne.w	r6, r2, r3, lsl #1
    aea2:	bne.n	ae48 <__aeabi_dmul+0x19c>
    aea4:	eor.w	r1, r1, r3
    aea8:	and.w	r1, r1, #2147483648	; 0x80000000
    aeac:	mov.w	r0, #0
    aeb0:	pop	{r4, r5, r6, pc}
    aeb2:	orrs.w	r6, r0, r1, lsl #1
    aeb6:	itte	eq
    aeb8:	moveq	r0, r2
    aeba:	moveq	r1, r3
    aebc:	orrsne.w	r6, r2, r3, lsl #1
    aec0:	beq.n	aef6 <__aeabi_dmul+0x24a>
    aec2:	teq	r4, ip
    aec6:	bne.n	aece <__aeabi_dmul+0x222>
    aec8:	orrs.w	r6, r0, r1, lsl #12
    aecc:	bne.n	aef6 <__aeabi_dmul+0x24a>
    aece:	teq	r5, ip
    aed2:	bne.n	aee0 <__aeabi_dmul+0x234>
    aed4:	orrs.w	r6, r2, r3, lsl #12
    aed8:	itt	ne
    aeda:	movne	r0, r2
    aedc:	movne	r1, r3
    aede:	bne.n	aef6 <__aeabi_dmul+0x24a>
    aee0:	eor.w	r1, r1, r3
    aee4:	and.w	r1, r1, #2147483648	; 0x80000000
    aee8:	orr.w	r1, r1, #2130706432	; 0x7f000000
    aeec:	orr.w	r1, r1, #15728640	; 0xf00000
    aef0:	mov.w	r0, #0
    aef4:	pop	{r4, r5, r6, pc}
    aef6:	orr.w	r1, r1, #2130706432	; 0x7f000000
    aefa:	orr.w	r1, r1, #16252928	; 0xf80000
    aefe:	pop	{r4, r5, r6, pc}

0000af00 <__aeabi_ddiv>:
    af00:	push	{r4, r5, r6, lr}
    af02:	mov.w	ip, #255	; 0xff
    af06:	orr.w	ip, ip, #1792	; 0x700
    af0a:	ands.w	r4, ip, r1, lsr #20
    af0e:	ittte	ne
    af10:	andsne.w	r5, ip, r3, lsr #20
    af14:	teqne	r4, ip
    af18:	teqne	r5, ip
    af1c:	bleq	b06e <__aeabi_ddiv+0x16e>
    af20:	sub.w	r4, r4, r5
    af24:	eor.w	lr, r1, r3
    af28:	orrs.w	r5, r2, r3, lsl #12
    af2c:	mov.w	r1, r1, lsl #12
    af30:	beq.w	b044 <__aeabi_ddiv+0x144>
    af34:	mov.w	r3, r3, lsl #12
    af38:	mov.w	r5, #268435456	; 0x10000000
    af3c:	orr.w	r3, r5, r3, lsr #4
    af40:	orr.w	r3, r3, r2, lsr #24
    af44:	mov.w	r2, r2, lsl #8
    af48:	orr.w	r5, r5, r1, lsr #4
    af4c:	orr.w	r5, r5, r0, lsr #24
    af50:	mov.w	r6, r0, lsl #8
    af54:	and.w	r1, lr, #2147483648	; 0x80000000
    af58:	cmp	r5, r3
    af5a:	it	eq
    af5c:	cmpeq	r6, r2
    af5e:	adc.w	r4, r4, #253	; 0xfd
    af62:	add.w	r4, r4, #768	; 0x300
    af66:	bcs.n	af6e <__aeabi_ddiv+0x6e>
    af68:	lsrs	r3, r3, #1
    af6a:	mov.w	r2, r2, rrx
    af6e:	subs	r6, r6, r2
    af70:	sbc.w	r5, r5, r3
    af74:	lsrs	r3, r3, #1
    af76:	mov.w	r2, r2, rrx
    af7a:	mov.w	r0, #1048576	; 0x100000
    af7e:	mov.w	ip, #524288	; 0x80000
    af82:	subs.w	lr, r6, r2
    af86:	sbcs.w	lr, r5, r3
    af8a:	ittt	cs
    af8c:	subcs	r6, r6, r2
    af8e:	movcs	r5, lr
    af90:	orrcs.w	r0, r0, ip
    af94:	lsrs	r3, r3, #1
    af96:	mov.w	r2, r2, rrx
    af9a:	subs.w	lr, r6, r2
    af9e:	sbcs.w	lr, r5, r3
    afa2:	ittt	cs
    afa4:	subcs	r6, r6, r2
    afa6:	movcs	r5, lr
    afa8:	orrcs.w	r0, r0, ip, lsr #1
    afac:	lsrs	r3, r3, #1
    afae:	mov.w	r2, r2, rrx
    afb2:	subs.w	lr, r6, r2
    afb6:	sbcs.w	lr, r5, r3
    afba:	ittt	cs
    afbc:	subcs	r6, r6, r2
    afbe:	movcs	r5, lr
    afc0:	orrcs.w	r0, r0, ip, lsr #2
    afc4:	lsrs	r3, r3, #1
    afc6:	mov.w	r2, r2, rrx
    afca:	subs.w	lr, r6, r2
    afce:	sbcs.w	lr, r5, r3
    afd2:	ittt	cs
    afd4:	subcs	r6, r6, r2
    afd6:	movcs	r5, lr
    afd8:	orrcs.w	r0, r0, ip, lsr #3
    afdc:	orrs.w	lr, r5, r6
    afe0:	beq.n	b014 <__aeabi_ddiv+0x114>
    afe2:	mov.w	r5, r5, lsl #4
    afe6:	orr.w	r5, r5, r6, lsr #28
    afea:	mov.w	r6, r6, lsl #4
    afee:	mov.w	r3, r3, lsl #3
    aff2:	orr.w	r3, r3, r2, lsr #29
    aff6:	mov.w	r2, r2, lsl #3
    affa:	movs.w	ip, ip, lsr #4
    affe:	bne.n	af82 <__aeabi_ddiv+0x82>
    b000:	tst.w	r1, #1048576	; 0x100000
    b004:	bne.n	b01e <__aeabi_ddiv+0x11e>
    b006:	orr.w	r1, r1, r0
    b00a:	mov.w	r0, #0
    b00e:	mov.w	ip, #2147483648	; 0x80000000
    b012:	b.n	af82 <__aeabi_ddiv+0x82>
    b014:	tst.w	r1, #1048576	; 0x100000
    b018:	itt	eq
    b01a:	orreq	r1, r0
    b01c:	moveq	r0, #0
    b01e:	subs.w	ip, r4, #253	; 0xfd
    b022:	it	hi
    b024:	cmphi.w	ip, #1792	; 0x700
    b028:	bhi.w	ad8a <__aeabi_dmul+0xde>
    b02c:	subs.w	ip, r5, r3
    b030:	itt	eq
    b032:	subseq.w	ip, r6, r2
    b036:	movseq.w	ip, r0, lsr #1
    b03a:	adcs.w	r0, r0, #0
    b03e:	adc.w	r1, r1, r4, lsl #20
    b042:	pop	{r4, r5, r6, pc}
    b044:	and.w	lr, lr, #2147483648	; 0x80000000
    b048:	orr.w	r1, lr, r1, lsr #12
    b04c:	adds.w	r4, r4, ip, lsr #1
    b050:	ittt	gt
    b052:	rsbsgt	r5, r4, ip
    b056:	orrgt.w	r1, r1, r4, lsl #20
    b05a:	popgt	{r4, r5, r6, pc}
    b05c:	orr.w	r1, r1, #1048576	; 0x100000
    b060:	mov.w	lr, #0
    b064:	subs	r4, #1
    b066:	b.n	ad8a <__aeabi_dmul+0xde>
    b068:	orr.w	lr, r5, r6
    b06c:	b.n	ad8a <__aeabi_dmul+0xde>
    b06e:	and.w	r5, ip, r3, lsr #20
    b072:	teq	r4, ip
    b076:	it	eq
    b078:	teqeq	r5, ip
    b07c:	beq.w	aef6 <__aeabi_dmul+0x24a>
    b080:	teq	r4, ip
    b084:	bne.n	b09c <__aeabi_ddiv+0x19c>
    b086:	orrs.w	r4, r0, r1, lsl #12
    b08a:	bne.w	aef6 <__aeabi_dmul+0x24a>
    b08e:	teq	r5, ip
    b092:	bne.w	aee0 <__aeabi_dmul+0x234>
    b096:	mov	r0, r2
    b098:	mov	r1, r3
    b09a:	b.n	aef6 <__aeabi_dmul+0x24a>
    b09c:	teq	r5, ip
    b0a0:	bne.n	b0b0 <__aeabi_ddiv+0x1b0>
    b0a2:	orrs.w	r5, r2, r3, lsl #12
    b0a6:	beq.w	aea4 <__aeabi_dmul+0x1f8>
    b0aa:	mov	r0, r2
    b0ac:	mov	r1, r3
    b0ae:	b.n	aef6 <__aeabi_dmul+0x24a>
    b0b0:	orrs.w	r6, r0, r1, lsl #1
    b0b4:	it	ne
    b0b6:	orrsne.w	r6, r2, r3, lsl #1
    b0ba:	bne.w	ae48 <__aeabi_dmul+0x19c>
    b0be:	orrs.w	r4, r0, r1, lsl #1
    b0c2:	bne.w	aee0 <__aeabi_dmul+0x234>
    b0c6:	orrs.w	r5, r2, r3, lsl #1
    b0ca:	bne.w	aea4 <__aeabi_dmul+0x1f8>
    b0ce:	b.n	aef6 <__aeabi_dmul+0x24a>

0000b0d0 <__gedf2>:
    b0d0:	mov.w	ip, #4294967295
    b0d4:	b.n	b0e4 <__cmpdf2+0x4>
    b0d6:	nop

0000b0d8 <__ledf2>:
    b0d8:	mov.w	ip, #1
    b0dc:	b.n	b0e4 <__cmpdf2+0x4>
    b0de:	nop

0000b0e0 <__cmpdf2>:
    b0e0:	mov.w	ip, #1
    b0e4:	str.w	ip, [sp, #-4]!
    b0e8:	mov.w	ip, r1, lsl #1
    b0ec:	mvns.w	ip, ip, asr #21
    b0f0:	mov.w	ip, r3, lsl #1
    b0f4:	it	ne
    b0f6:	mvnsne.w	ip, ip, asr #21
    b0fa:	beq.n	b134 <__cmpdf2+0x54>
    b0fc:	add	sp, #4
    b0fe:	orrs.w	ip, r0, r1, lsl #1
    b102:	ite	eq
    b104:	orrseq.w	ip, r2, r3, lsl #1
    b108:	teqne	r1, r3
    b10c:	ittt	eq
    b10e:	teqeq	r0, r2
    b112:	moveq	r0, #0
    b114:	bxeq	lr
    b116:	cmn.w	r0, #0
    b11a:	teq	r1, r3
    b11e:	it	pl
    b120:	cmppl	r1, r3
    b122:	it	eq
    b124:	cmpeq	r0, r2
    b126:	ite	cs
    b128:	asrcs	r0, r3, #31
    b12a:	mvncc.w	r0, r3, asr #31
    b12e:	orr.w	r0, r0, #1
    b132:	bx	lr
    b134:	mov.w	ip, r1, lsl #1
    b138:	mvns.w	ip, ip, asr #21
    b13c:	bne.n	b144 <__cmpdf2+0x64>
    b13e:	orrs.w	ip, r0, r1, lsl #12
    b142:	bne.n	b154 <__cmpdf2+0x74>
    b144:	mov.w	ip, r3, lsl #1
    b148:	mvns.w	ip, ip, asr #21
    b14c:	bne.n	b0fc <__cmpdf2+0x1c>
    b14e:	orrs.w	ip, r2, r3, lsl #12
    b152:	beq.n	b0fc <__cmpdf2+0x1c>
    b154:	ldr.w	r0, [sp], #4
    b158:	bx	lr
    b15a:	nop

0000b15c <__aeabi_cdrcmple>:
    b15c:	mov	ip, r0
    b15e:	mov	r0, r2
    b160:	mov	r2, ip
    b162:	mov	ip, r1
    b164:	mov	r1, r3
    b166:	mov	r3, ip
    b168:	b.n	b16c <__aeabi_cdcmpeq>
    b16a:	nop

0000b16c <__aeabi_cdcmpeq>:
    b16c:	push	{r0, lr}
    b16e:	bl	b0e0 <__cmpdf2>
    b172:	cmp	r0, #0
    b174:	it	mi
    b176:	cmnmi.w	r0, #0
    b17a:	pop	{r0, pc}

0000b17c <__aeabi_dcmpeq>:
    b17c:	str.w	lr, [sp, #-8]!
    b180:	bl	b16c <__aeabi_cdcmpeq>
    b184:	ite	eq
    b186:	moveq	r0, #1
    b188:	movne	r0, #0
    b18a:	ldr.w	pc, [sp], #8
    b18e:	nop

0000b190 <__aeabi_dcmplt>:
    b190:	str.w	lr, [sp, #-8]!
    b194:	bl	b16c <__aeabi_cdcmpeq>
    b198:	ite	cc
    b19a:	movcc	r0, #1
    b19c:	movcs	r0, #0
    b19e:	ldr.w	pc, [sp], #8
    b1a2:	nop

0000b1a4 <__aeabi_dcmple>:
    b1a4:	str.w	lr, [sp, #-8]!
    b1a8:	bl	b16c <__aeabi_cdcmpeq>
    b1ac:	ite	ls
    b1ae:	movls	r0, #1
    b1b0:	movhi	r0, #0
    b1b2:	ldr.w	pc, [sp], #8
    b1b6:	nop

0000b1b8 <__aeabi_dcmpge>:
    b1b8:	str.w	lr, [sp, #-8]!
    b1bc:	bl	b15c <__aeabi_cdrcmple>
    b1c0:	ite	ls
    b1c2:	movls	r0, #1
    b1c4:	movhi	r0, #0
    b1c6:	ldr.w	pc, [sp], #8
    b1ca:	nop

0000b1cc <__aeabi_dcmpgt>:
    b1cc:	str.w	lr, [sp, #-8]!
    b1d0:	bl	b15c <__aeabi_cdrcmple>
    b1d4:	ite	cc
    b1d6:	movcc	r0, #1
    b1d8:	movcs	r0, #0
    b1da:	ldr.w	pc, [sp], #8
    b1de:	nop

0000b1e0 <__aeabi_dcmpun>:
    b1e0:	mov.w	ip, r1, lsl #1
    b1e4:	mvns.w	ip, ip, asr #21
    b1e8:	bne.n	b1f0 <__aeabi_dcmpun+0x10>
    b1ea:	orrs.w	ip, r0, r1, lsl #12
    b1ee:	bne.n	b206 <__aeabi_dcmpun+0x26>
    b1f0:	mov.w	ip, r3, lsl #1
    b1f4:	mvns.w	ip, ip, asr #21
    b1f8:	bne.n	b200 <__aeabi_dcmpun+0x20>
    b1fa:	orrs.w	ip, r2, r3, lsl #12
    b1fe:	bne.n	b206 <__aeabi_dcmpun+0x26>
    b200:	mov.w	r0, #0
    b204:	bx	lr
    b206:	mov.w	r0, #1
    b20a:	bx	lr

0000b20c <__aeabi_d2iz>:
    b20c:	mov.w	r2, r1, lsl #1
    b210:	adds.w	r2, r2, #2097152	; 0x200000
    b214:	bcs.n	b242 <__aeabi_d2iz+0x36>
    b216:	bpl.n	b23c <__aeabi_d2iz+0x30>
    b218:	mvn.w	r3, #992	; 0x3e0
    b21c:	subs.w	r2, r3, r2, asr #21
    b220:	bls.n	b248 <__aeabi_d2iz+0x3c>
    b222:	mov.w	r3, r1, lsl #11
    b226:	orr.w	r3, r3, #2147483648	; 0x80000000
    b22a:	orr.w	r3, r3, r0, lsr #21
    b22e:	tst.w	r1, #2147483648	; 0x80000000
    b232:	lsr.w	r0, r3, r2
    b236:	it	ne
    b238:	negne	r0, r0
    b23a:	bx	lr
    b23c:	mov.w	r0, #0
    b240:	bx	lr
    b242:	orrs.w	r0, r0, r1, lsl #12
    b246:	bne.n	b254 <__aeabi_d2iz+0x48>
    b248:	ands.w	r0, r1, #2147483648	; 0x80000000
    b24c:	it	eq
    b24e:	mvneq.w	r0, #2147483648	; 0x80000000
    b252:	bx	lr
    b254:	mov.w	r0, #0
    b258:	bx	lr
    b25a:	nop

0000b25c <__aeabi_uldivmod>:
    b25c:	cbnz	r3, b274 <__aeabi_uldivmod+0x18>
    b25e:	cbnz	r2, b274 <__aeabi_uldivmod+0x18>
    b260:	cmp	r1, #0
    b262:	it	eq
    b264:	cmpeq	r0, #0
    b266:	itt	ne
    b268:	movne.w	r1, #4294967295
    b26c:	movne.w	r0, #4294967295
    b270:	b.w	b570 <__aeabi_idiv0>
    b274:	sub.w	ip, sp, #8
    b278:	strd	ip, lr, [sp, #-16]!
    b27c:	bl	b28c <__udivmoddi4>
    b280:	ldr.w	lr, [sp, #4]
    b284:	ldrd	r2, r3, [sp, #8]
    b288:	add	sp, #16
    b28a:	bx	lr

0000b28c <__udivmoddi4>:
    b28c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b290:	mov	ip, r1
    b292:	mov	r6, r1
    b294:	mov	r4, r0
    b296:	ldr	r5, [sp, #32]
    b298:	cmp	r3, #0
    b29a:	bne.n	b33e <__udivmoddi4+0xb2>
    b29c:	cmp	r2, r1
    b29e:	mov	r7, r2
    b2a0:	bls.n	b37c <__udivmoddi4+0xf0>
    b2a2:	clz	lr, r2
    b2a6:	cmp.w	lr, #0
    b2aa:	beq.n	b2c4 <__udivmoddi4+0x38>
    b2ac:	rsb	r4, lr, #32
    b2b0:	lsr.w	r4, r0, r4
    b2b4:	lsl.w	r6, r1, lr
    b2b8:	orr.w	ip, r4, r6
    b2bc:	lsl.w	r7, r2, lr
    b2c0:	lsl.w	r4, r0, lr
    b2c4:	mov.w	r9, r7, lsr #16
    b2c8:	lsrs	r2, r4, #16
    b2ca:	udiv	r0, ip, r9
    b2ce:	uxth.w	r8, r7
    b2d2:	mls	r6, r9, r0, ip
    b2d6:	orr.w	r6, r2, r6, lsl #16
    b2da:	mul.w	r3, r0, r8
    b2de:	cmp	r3, r6
    b2e0:	bls.n	b2f6 <__udivmoddi4+0x6a>
    b2e2:	adds	r6, r6, r7
    b2e4:	add.w	r2, r0, #4294967295
    b2e8:	bcs.w	b530 <__udivmoddi4+0x2a4>
    b2ec:	cmp	r3, r6
    b2ee:	bls.w	b530 <__udivmoddi4+0x2a4>
    b2f2:	subs	r0, #2
    b2f4:	add	r6, r7
    b2f6:	subs	r6, r6, r3
    b2f8:	uxth	r2, r4
    b2fa:	udiv	r3, r6, r9
    b2fe:	mls	r6, r9, r3, r6
    b302:	orr.w	r4, r2, r6, lsl #16
    b306:	mul.w	r8, r3, r8
    b30a:	cmp	r8, r4
    b30c:	bls.n	b322 <__udivmoddi4+0x96>
    b30e:	adds	r4, r4, r7
    b310:	add.w	r2, r3, #4294967295
    b314:	bcs.w	b52c <__udivmoddi4+0x2a0>
    b318:	cmp	r8, r4
    b31a:	bls.w	b52c <__udivmoddi4+0x2a0>
    b31e:	subs	r3, #2
    b320:	add	r4, r7
    b322:	rsb	r4, r8, r4
    b326:	orr.w	r0, r3, r0, lsl #16
    b32a:	movs	r1, #0
    b32c:	cmp	r5, #0
    b32e:	beq.n	b3f6 <__udivmoddi4+0x16a>
    b330:	lsr.w	r4, r4, lr
    b334:	movs	r3, #0
    b336:	str	r4, [r5, #0]
    b338:	str	r3, [r5, #4]
    b33a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b33e:	cmp	r3, r1
    b340:	bls.n	b352 <__udivmoddi4+0xc6>
    b342:	cmp	r5, #0
    b344:	beq.n	b3f2 <__udivmoddi4+0x166>
    b346:	movs	r1, #0
    b348:	stmia.w	r5, {r0, r6}
    b34c:	mov	r0, r1
    b34e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b352:	clz	r1, r3
    b356:	cmp	r1, #0
    b358:	bne.w	b47c <__udivmoddi4+0x1f0>
    b35c:	cmp	r3, r6
    b35e:	bcc.n	b366 <__udivmoddi4+0xda>
    b360:	cmp	r2, r0
    b362:	bhi.w	b556 <__udivmoddi4+0x2ca>
    b366:	subs	r4, r0, r2
    b368:	sbc.w	r6, r6, r3
    b36c:	movs	r0, #1
    b36e:	mov	ip, r6
    b370:	cmp	r5, #0
    b372:	beq.n	b3f6 <__udivmoddi4+0x16a>
    b374:	stmia.w	r5, {r4, ip}
    b378:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b37c:	cbnz	r2, b384 <__udivmoddi4+0xf8>
    b37e:	movs	r7, #1
    b380:	udiv	r7, r7, r2
    b384:	clz	lr, r7
    b388:	cmp.w	lr, #0
    b38c:	bne.n	b3fa <__udivmoddi4+0x16e>
    b38e:	subs	r3, r6, r7
    b390:	mov.w	r8, r7, lsr #16
    b394:	uxth.w	ip, r7
    b398:	movs	r1, #1
    b39a:	udiv	r0, r3, r8
    b39e:	lsrs	r2, r4, #16
    b3a0:	mls	r6, r8, r0, r3
    b3a4:	orr.w	r6, r2, r6, lsl #16
    b3a8:	mul.w	r3, ip, r0
    b3ac:	cmp	r3, r6
    b3ae:	bls.n	b3c0 <__udivmoddi4+0x134>
    b3b0:	adds	r6, r6, r7
    b3b2:	add.w	r2, r0, #4294967295
    b3b6:	bcs.n	b3be <__udivmoddi4+0x132>
    b3b8:	cmp	r3, r6
    b3ba:	bhi.w	b55a <__udivmoddi4+0x2ce>
    b3be:	mov	r0, r2
    b3c0:	subs	r6, r6, r3
    b3c2:	uxth	r2, r4
    b3c4:	udiv	r3, r6, r8
    b3c8:	mls	r6, r8, r3, r6
    b3cc:	orr.w	r4, r2, r6, lsl #16
    b3d0:	mul.w	ip, ip, r3
    b3d4:	cmp	ip, r4
    b3d6:	bls.n	b3e8 <__udivmoddi4+0x15c>
    b3d8:	adds	r4, r4, r7
    b3da:	add.w	r2, r3, #4294967295
    b3de:	bcs.n	b3e6 <__udivmoddi4+0x15a>
    b3e0:	cmp	ip, r4
    b3e2:	bhi.w	b550 <__udivmoddi4+0x2c4>
    b3e6:	mov	r3, r2
    b3e8:	rsb	r4, ip, r4
    b3ec:	orr.w	r0, r3, r0, lsl #16
    b3f0:	b.n	b32c <__udivmoddi4+0xa0>
    b3f2:	mov	r1, r5
    b3f4:	mov	r0, r5
    b3f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b3fa:	rsb	r1, lr, #32
    b3fe:	lsl.w	r3, r6, lr
    b402:	lsl.w	r7, r7, lr
    b406:	lsr.w	r9, r0, r1
    b40a:	mov.w	r8, r7, lsr #16
    b40e:	lsrs	r6, r1
    b410:	orr.w	r9, r9, r3
    b414:	udiv	sl, r6, r8
    b418:	mov.w	r4, r9, lsr #16
    b41c:	mls	r6, r8, sl, r6
    b420:	uxth.w	ip, r7
    b424:	orr.w	r3, r4, r6, lsl #16
    b428:	mul.w	r2, sl, ip
    b42c:	cmp	r2, r3
    b42e:	lsl.w	r4, r0, lr
    b432:	bls.n	b44a <__udivmoddi4+0x1be>
    b434:	adds	r3, r3, r7
    b436:	add.w	r1, sl, #4294967295
    b43a:	bcs.w	b54c <__udivmoddi4+0x2c0>
    b43e:	cmp	r2, r3
    b440:	bls.w	b54c <__udivmoddi4+0x2c0>
    b444:	sub.w	sl, sl, #2
    b448:	add	r3, r7
    b44a:	subs	r3, r3, r2
    b44c:	uxth.w	r9, r9
    b450:	udiv	r1, r3, r8
    b454:	mls	r3, r8, r1, r3
    b458:	orr.w	r3, r9, r3, lsl #16
    b45c:	mul.w	r6, r1, ip
    b460:	cmp	r6, r3
    b462:	bls.n	b474 <__udivmoddi4+0x1e8>
    b464:	adds	r3, r3, r7
    b466:	add.w	r2, r1, #4294967295
    b46a:	bcs.n	b544 <__udivmoddi4+0x2b8>
    b46c:	cmp	r6, r3
    b46e:	bls.n	b544 <__udivmoddi4+0x2b8>
    b470:	subs	r1, #2
    b472:	add	r3, r7
    b474:	subs	r3, r3, r6
    b476:	orr.w	r1, r1, sl, lsl #16
    b47a:	b.n	b39a <__udivmoddi4+0x10e>
    b47c:	rsb	lr, r1, #32
    b480:	lsr.w	r4, r2, lr
    b484:	lsls	r3, r1
    b486:	orrs	r3, r4
    b488:	lsr.w	r7, r0, lr
    b48c:	lsl.w	r4, r6, r1
    b490:	mov.w	ip, r3, lsr #16
    b494:	lsr.w	r6, r6, lr
    b498:	orrs	r4, r7
    b49a:	udiv	r9, r6, ip
    b49e:	lsrs	r7, r4, #16
    b4a0:	mls	r6, ip, r9, r6
    b4a4:	uxth.w	r8, r3
    b4a8:	orr.w	r6, r7, r6, lsl #16
    b4ac:	mul.w	r7, r9, r8
    b4b0:	cmp	r7, r6
    b4b2:	lsl.w	r2, r2, r1
    b4b6:	lsl.w	sl, r0, r1
    b4ba:	bls.n	b4ce <__udivmoddi4+0x242>
    b4bc:	adds	r6, r6, r3
    b4be:	add.w	r0, r9, #4294967295
    b4c2:	bcs.n	b548 <__udivmoddi4+0x2bc>
    b4c4:	cmp	r7, r6
    b4c6:	bls.n	b548 <__udivmoddi4+0x2bc>
    b4c8:	sub.w	r9, r9, #2
    b4cc:	add	r6, r3
    b4ce:	subs	r6, r6, r7
    b4d0:	uxth	r0, r4
    b4d2:	udiv	r4, r6, ip
    b4d6:	mls	r6, ip, r4, r6
    b4da:	orr.w	r7, r0, r6, lsl #16
    b4de:	mul.w	r8, r4, r8
    b4e2:	cmp	r8, r7
    b4e4:	bls.n	b4f6 <__udivmoddi4+0x26a>
    b4e6:	adds	r7, r7, r3
    b4e8:	add.w	r0, r4, #4294967295
    b4ec:	bcs.n	b540 <__udivmoddi4+0x2b4>
    b4ee:	cmp	r8, r7
    b4f0:	bls.n	b540 <__udivmoddi4+0x2b4>
    b4f2:	subs	r4, #2
    b4f4:	add	r7, r3
    b4f6:	orr.w	r0, r4, r9, lsl #16
    b4fa:	rsb	r7, r8, r7
    b4fe:	umull	r8, r9, r0, r2
    b502:	cmp	r7, r9
    b504:	mov	r4, r8
    b506:	mov	r6, r9
    b508:	bcc.n	b534 <__udivmoddi4+0x2a8>
    b50a:	beq.n	b560 <__udivmoddi4+0x2d4>
    b50c:	cbz	r5, b568 <__udivmoddi4+0x2dc>
    b50e:	subs.w	r3, sl, r4
    b512:	sbc.w	r7, r7, r6
    b516:	lsl.w	lr, r7, lr
    b51a:	lsrs	r3, r1
    b51c:	lsrs	r7, r1
    b51e:	orr.w	r3, lr, r3
    b522:	stmia.w	r5, {r3, r7}
    b526:	movs	r1, #0
    b528:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b52c:	mov	r3, r2
    b52e:	b.n	b322 <__udivmoddi4+0x96>
    b530:	mov	r0, r2
    b532:	b.n	b2f6 <__udivmoddi4+0x6a>
    b534:	subs.w	r4, r8, r2
    b538:	sbc.w	r6, r9, r3
    b53c:	subs	r0, #1
    b53e:	b.n	b50c <__udivmoddi4+0x280>
    b540:	mov	r4, r0
    b542:	b.n	b4f6 <__udivmoddi4+0x26a>
    b544:	mov	r1, r2
    b546:	b.n	b474 <__udivmoddi4+0x1e8>
    b548:	mov	r9, r0
    b54a:	b.n	b4ce <__udivmoddi4+0x242>
    b54c:	mov	sl, r1
    b54e:	b.n	b44a <__udivmoddi4+0x1be>
    b550:	subs	r3, #2
    b552:	add	r4, r7
    b554:	b.n	b3e8 <__udivmoddi4+0x15c>
    b556:	mov	r0, r1
    b558:	b.n	b370 <__udivmoddi4+0xe4>
    b55a:	subs	r0, #2
    b55c:	add	r6, r7
    b55e:	b.n	b3c0 <__udivmoddi4+0x134>
    b560:	cmp	sl, r8
    b562:	bcc.n	b534 <__udivmoddi4+0x2a8>
    b564:	mov	r6, r7
    b566:	b.n	b50c <__udivmoddi4+0x280>
    b568:	mov	r1, r5
    b56a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b56e:	nop

0000b570 <__aeabi_idiv0>:
    b570:	bx	lr
    b572:	nop

0000b574 <__cxa_atexit>:
    b574:	mov	r3, r2
    b576:	mov	r2, r1
    b578:	mov	r1, r0
    b57a:	movs	r0, #2
    b57c:	b.w	c5a8 <__register_exitproc>

0000b580 <__errno>:
    b580:	ldr	r3, [pc, #4]	; (b588 <__errno+0x8>)
    b582:	ldr	r0, [r3, #0]
    b584:	bx	lr
    b586:	nop
    b588:	.word	0x1fff0f38

0000b58c <__libc_init_array>:
    b58c:	push	{r4, r5, r6, lr}
    b58e:	ldr	r6, [pc, #60]	; (b5cc <__libc_init_array+0x40>)
    b590:	ldr	r5, [pc, #60]	; (b5d0 <__libc_init_array+0x44>)
    b592:	subs	r6, r6, r5
    b594:	asrs	r6, r6, #2
    b596:	it	ne
    b598:	movne	r4, #0
    b59a:	beq.n	b5a8 <__libc_init_array+0x1c>
    b59c:	adds	r4, #1
    b59e:	ldr.w	r3, [r5], #4
    b5a2:	blx	r3
    b5a4:	cmp	r6, r4
    b5a6:	bne.n	b59c <__libc_init_array+0x10>
    b5a8:	ldr	r6, [pc, #40]	; (b5d4 <__libc_init_array+0x48>)
    b5aa:	ldr	r5, [pc, #44]	; (b5d8 <__libc_init_array+0x4c>)
    b5ac:	subs	r6, r6, r5
    b5ae:	bl	10190 <_init>
    b5b2:	asrs	r6, r6, #2
    b5b4:	it	ne
    b5b6:	movne	r4, #0
    b5b8:	beq.n	b5c8 <__libc_init_array+0x3c>
    b5ba:	adds	r4, #1
    b5bc:	ldr.w	r3, [r5], #4
    b5c0:	blx	r3
    b5c2:	cmp	r6, r4
    b5c4:	bne.n	b5ba <__libc_init_array+0x2e>
    b5c6:	pop	{r4, r5, r6, pc}
    b5c8:	pop	{r4, r5, r6, pc}
    b5ca:	nop
    b5cc:	.word	0x0001019c
    b5d0:	.word	0x0001019c
    b5d4:	.word	0x000101ac
    b5d8:	.word	0x0001019c

0000b5dc <malloc>:
    b5dc:	ldr	r3, [pc, #8]	; (b5e8 <malloc+0xc>)
    b5de:	mov	r1, r0
    b5e0:	ldr	r0, [r3, #0]
    b5e2:	b.w	b5fc <_malloc_r>
    b5e6:	nop
    b5e8:	.word	0x1fff0f38

0000b5ec <free>:
    b5ec:	ldr	r3, [pc, #8]	; (b5f8 <free+0xc>)
    b5ee:	mov	r1, r0
    b5f0:	ldr	r0, [r3, #0]
    b5f2:	b.w	c730 <_free_r>
    b5f6:	nop
    b5f8:	.word	0x1fff0f38

0000b5fc <_malloc_r>:
    b5fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b600:	add.w	r5, r1, #11
    b604:	cmp	r5, #22
    b606:	sub	sp, #12
    b608:	mov	r6, r0
    b60a:	bls.w	b74c <_malloc_r+0x150>
    b60e:	bics.w	r5, r5, #7
    b612:	bmi.w	b794 <_malloc_r+0x198>
    b616:	cmp	r1, r5
    b618:	bhi.w	b794 <_malloc_r+0x198>
    b61c:	bl	be08 <__malloc_lock>
    b620:	cmp.w	r5, #504	; 0x1f8
    b624:	bcc.w	bb60 <_malloc_r+0x564>
    b628:	lsrs	r3, r5, #9
    b62a:	beq.w	b7a2 <_malloc_r+0x1a6>
    b62e:	cmp	r3, #4
    b630:	bhi.w	b93a <_malloc_r+0x33e>
    b634:	lsrs	r0, r5, #6
    b636:	add.w	lr, r0, #57	; 0x39
    b63a:	mov.w	r3, lr, lsl #1
    b63e:	adds	r0, #56	; 0x38
    b640:	ldr	r7, [pc, #784]	; (b954 <_malloc_r+0x358>)
    b642:	add.w	r3, r7, r3, lsl #2
    b646:	sub.w	r1, r3, #8
    b64a:	ldr	r4, [r3, #4]
    b64c:	cmp	r1, r4
    b64e:	bne.n	b660 <_malloc_r+0x64>
    b650:	b.n	b7ac <_malloc_r+0x1b0>
    b652:	cmp	r2, #0
    b654:	bge.w	b7b0 <_malloc_r+0x1b4>
    b658:	ldr	r4, [r4, #12]
    b65a:	cmp	r1, r4
    b65c:	beq.w	b7ac <_malloc_r+0x1b0>
    b660:	ldr	r3, [r4, #4]
    b662:	bic.w	r3, r3, #3
    b666:	subs	r2, r3, r5
    b668:	cmp	r2, #15
    b66a:	ble.n	b652 <_malloc_r+0x56>
    b66c:	ldr	r1, [pc, #740]	; (b954 <_malloc_r+0x358>)
    b66e:	ldr	r4, [r7, #16]
    b670:	add.w	lr, r1, #8
    b674:	cmp	r4, lr
    b676:	beq.w	b9e0 <_malloc_r+0x3e4>
    b67a:	ldr	r3, [r4, #4]
    b67c:	bic.w	r3, r3, #3
    b680:	subs	r2, r3, r5
    b682:	cmp	r2, #15
    b684:	bgt.w	b9ba <_malloc_r+0x3be>
    b688:	cmp	r2, #0
    b68a:	str.w	lr, [r1, #20]
    b68e:	str.w	lr, [r1, #16]
    b692:	bge.w	b7d2 <_malloc_r+0x1d6>
    b696:	cmp.w	r3, #512	; 0x200
    b69a:	bcs.w	b96c <_malloc_r+0x370>
    b69e:	lsrs	r3, r3, #3
    b6a0:	add.w	ip, r3, #1
    b6a4:	movs	r2, #1
    b6a6:	asrs	r3, r3, #2
    b6a8:	lsl.w	r3, r2, r3
    b6ac:	ldr	r2, [r1, #4]
    b6ae:	ldr.w	r8, [r1, ip, lsl #3]
    b6b2:	str.w	r8, [r4, #8]
    b6b6:	add.w	r9, r1, ip, lsl #3
    b6ba:	orrs	r2, r3
    b6bc:	sub.w	r3, r9, #8
    b6c0:	str	r3, [r4, #12]
    b6c2:	str	r2, [r1, #4]
    b6c4:	str.w	r4, [r1, ip, lsl #3]
    b6c8:	str.w	r4, [r8, #12]
    b6cc:	asrs	r3, r0, #2
    b6ce:	movs	r4, #1
    b6d0:	lsls	r4, r3
    b6d2:	cmp	r4, r2
    b6d4:	bhi.w	b7ec <_malloc_r+0x1f0>
    b6d8:	tst	r4, r2
    b6da:	bne.n	b6ea <_malloc_r+0xee>
    b6dc:	bic.w	r0, r0, #3
    b6e0:	lsls	r4, r4, #1
    b6e2:	tst	r4, r2
    b6e4:	add.w	r0, r0, #4
    b6e8:	beq.n	b6e0 <_malloc_r+0xe4>
    b6ea:	add.w	r9, r7, r0, lsl #3
    b6ee:	mov	ip, r9
    b6f0:	mov	r8, r0
    b6f2:	ldr.w	r1, [ip, #12]
    b6f6:	cmp	ip, r1
    b6f8:	bne.n	b70a <_malloc_r+0x10e>
    b6fa:	b.n	b9e4 <_malloc_r+0x3e8>
    b6fc:	cmp	r2, #0
    b6fe:	bge.w	ba04 <_malloc_r+0x408>
    b702:	ldr	r1, [r1, #12]
    b704:	cmp	ip, r1
    b706:	beq.w	b9e4 <_malloc_r+0x3e8>
    b70a:	ldr	r3, [r1, #4]
    b70c:	bic.w	r3, r3, #3
    b710:	subs	r2, r3, r5
    b712:	cmp	r2, #15
    b714:	ble.n	b6fc <_malloc_r+0x100>
    b716:	mov	r4, r1
    b718:	ldr.w	ip, [r1, #12]
    b71c:	ldr.w	r8, [r4, #8]!
    b720:	adds	r3, r1, r5
    b722:	orr.w	r5, r5, #1
    b726:	str	r5, [r1, #4]
    b728:	orr.w	r1, r2, #1
    b72c:	str.w	ip, [r8, #12]
    b730:	mov	r0, r6
    b732:	str.w	r8, [ip, #8]
    b736:	str	r3, [r7, #20]
    b738:	str	r3, [r7, #16]
    b73a:	str.w	lr, [r3, #12]
    b73e:	str.w	lr, [r3, #8]
    b742:	str	r1, [r3, #4]
    b744:	str	r2, [r3, r2]
    b746:	bl	be0c <__malloc_unlock>
    b74a:	b.n	b78c <_malloc_r+0x190>
    b74c:	cmp	r1, #16
    b74e:	bhi.n	b794 <_malloc_r+0x198>
    b750:	bl	be08 <__malloc_lock>
    b754:	movs	r5, #16
    b756:	movs	r3, #6
    b758:	movs	r0, #2
    b75a:	ldr	r7, [pc, #504]	; (b954 <_malloc_r+0x358>)
    b75c:	add.w	r3, r7, r3, lsl #2
    b760:	sub.w	r2, r3, #8
    b764:	ldr	r4, [r3, #4]
    b766:	cmp	r4, r2
    b768:	beq.w	b9f6 <_malloc_r+0x3fa>
    b76c:	ldr	r3, [r4, #4]
    b76e:	ldr	r1, [r4, #12]
    b770:	ldr	r5, [r4, #8]
    b772:	bic.w	r3, r3, #3
    b776:	add	r3, r4
    b778:	mov	r0, r6
    b77a:	ldr	r2, [r3, #4]
    b77c:	str	r1, [r5, #12]
    b77e:	orr.w	r2, r2, #1
    b782:	str	r5, [r1, #8]
    b784:	str	r2, [r3, #4]
    b786:	bl	be0c <__malloc_unlock>
    b78a:	adds	r4, #8
    b78c:	mov	r0, r4
    b78e:	add	sp, #12
    b790:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b794:	movs	r4, #0
    b796:	movs	r3, #12
    b798:	mov	r0, r4
    b79a:	str	r3, [r6, #0]
    b79c:	add	sp, #12
    b79e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b7a2:	movs	r3, #128	; 0x80
    b7a4:	mov.w	lr, #64	; 0x40
    b7a8:	movs	r0, #63	; 0x3f
    b7aa:	b.n	b640 <_malloc_r+0x44>
    b7ac:	mov	r0, lr
    b7ae:	b.n	b66c <_malloc_r+0x70>
    b7b0:	add	r3, r4
    b7b2:	ldr	r1, [r4, #12]
    b7b4:	ldr	r2, [r3, #4]
    b7b6:	ldr	r5, [r4, #8]
    b7b8:	orr.w	r2, r2, #1
    b7bc:	str	r1, [r5, #12]
    b7be:	mov	r0, r6
    b7c0:	str	r5, [r1, #8]
    b7c2:	str	r2, [r3, #4]
    b7c4:	bl	be0c <__malloc_unlock>
    b7c8:	adds	r4, #8
    b7ca:	mov	r0, r4
    b7cc:	add	sp, #12
    b7ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b7d2:	add	r3, r4
    b7d4:	mov	r0, r6
    b7d6:	ldr	r2, [r3, #4]
    b7d8:	orr.w	r2, r2, #1
    b7dc:	str	r2, [r3, #4]
    b7de:	bl	be0c <__malloc_unlock>
    b7e2:	adds	r4, #8
    b7e4:	mov	r0, r4
    b7e6:	add	sp, #12
    b7e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b7ec:	ldr	r4, [r7, #8]
    b7ee:	ldr	r3, [r4, #4]
    b7f0:	bic.w	r8, r3, #3
    b7f4:	cmp	r8, r5
    b7f6:	bcc.n	b802 <_malloc_r+0x206>
    b7f8:	rsb	r3, r5, r8
    b7fc:	cmp	r3, #15
    b7fe:	bgt.w	b91a <_malloc_r+0x31e>
    b802:	ldr	r3, [pc, #340]	; (b958 <_malloc_r+0x35c>)
    b804:	ldr.w	r9, [pc, #352]	; b968 <_malloc_r+0x36c>
    b808:	ldr	r2, [r3, #0]
    b80a:	ldr.w	r3, [r9]
    b80e:	adds	r3, #1
    b810:	add	r2, r5
    b812:	add.w	sl, r4, r8
    b816:	beq.w	bada <_malloc_r+0x4de>
    b81a:	add.w	r2, r2, #4096	; 0x1000
    b81e:	adds	r2, #15
    b820:	bic.w	r2, r2, #4080	; 0xff0
    b824:	bic.w	r2, r2, #15
    b828:	mov	r1, r2
    b82a:	mov	r0, r6
    b82c:	str	r2, [sp, #4]
    b82e:	bl	c1f0 <_sbrk_r>
    b832:	cmp.w	r0, #4294967295
    b836:	mov	fp, r0
    b838:	ldr	r2, [sp, #4]
    b83a:	beq.w	baee <_malloc_r+0x4f2>
    b83e:	cmp	sl, r0
    b840:	bhi.w	ba3c <_malloc_r+0x440>
    b844:	ldr	r3, [pc, #276]	; (b95c <_malloc_r+0x360>)
    b846:	ldr	r1, [r3, #0]
    b848:	cmp	sl, fp
    b84a:	add	r1, r2
    b84c:	str	r1, [r3, #0]
    b84e:	beq.w	baf8 <_malloc_r+0x4fc>
    b852:	ldr.w	r0, [r9]
    b856:	ldr.w	lr, [pc, #272]	; b968 <_malloc_r+0x36c>
    b85a:	adds	r0, #1
    b85c:	ittet	ne
    b85e:	rsbne	sl, sl, fp
    b862:	addne	r1, sl
    b864:	streq.w	fp, [lr]
    b868:	strne	r1, [r3, #0]
    b86a:	ands.w	r1, fp, #7
    b86e:	beq.w	baa0 <_malloc_r+0x4a4>
    b872:	rsb	r0, r1, #8
    b876:	rsb	r1, r1, #4096	; 0x1000
    b87a:	add	fp, r0
    b87c:	adds	r1, #8
    b87e:	add	r2, fp
    b880:	ubfx	r2, r2, #0, #12
    b884:	rsb	r9, r2, r1
    b888:	mov	r1, r9
    b88a:	mov	r0, r6
    b88c:	str	r3, [sp, #4]
    b88e:	bl	c1f0 <_sbrk_r>
    b892:	adds	r3, r0, #1
    b894:	ldr	r3, [sp, #4]
    b896:	beq.w	bb18 <_malloc_r+0x51c>
    b89a:	rsb	r2, fp, r0
    b89e:	add	r2, r9
    b8a0:	orr.w	r2, r2, #1
    b8a4:	ldr	r1, [r3, #0]
    b8a6:	str.w	fp, [r7, #8]
    b8aa:	add	r1, r9
    b8ac:	cmp	r4, r7
    b8ae:	str.w	r2, [fp, #4]
    b8b2:	str	r1, [r3, #0]
    b8b4:	ldr.w	r9, [pc, #164]	; b95c <_malloc_r+0x360>
    b8b8:	beq.n	b8e8 <_malloc_r+0x2ec>
    b8ba:	cmp.w	r8, #15
    b8be:	bls.w	babc <_malloc_r+0x4c0>
    b8c2:	ldr	r2, [r4, #4]
    b8c4:	sub.w	r3, r8, #12
    b8c8:	bic.w	r3, r3, #7
    b8cc:	adds	r0, r4, r3
    b8ce:	and.w	r2, r2, #1
    b8d2:	mov.w	lr, #5
    b8d6:	orrs	r2, r3
    b8d8:	cmp	r3, #15
    b8da:	str	r2, [r4, #4]
    b8dc:	str.w	lr, [r0, #4]
    b8e0:	str.w	lr, [r0, #8]
    b8e4:	bhi.w	bb20 <_malloc_r+0x524>
    b8e8:	ldr	r3, [pc, #116]	; (b960 <_malloc_r+0x364>)
    b8ea:	ldr	r4, [r7, #8]
    b8ec:	ldr	r2, [r3, #0]
    b8ee:	cmp	r1, r2
    b8f0:	it	hi
    b8f2:	strhi	r1, [r3, #0]
    b8f4:	ldr	r3, [pc, #108]	; (b964 <_malloc_r+0x368>)
    b8f6:	ldr	r2, [r3, #0]
    b8f8:	cmp	r1, r2
    b8fa:	ldr	r2, [r4, #4]
    b8fc:	it	hi
    b8fe:	strhi	r1, [r3, #0]
    b900:	bic.w	r2, r2, #3
    b904:	cmp	r5, r2
    b906:	sub.w	r3, r2, r5
    b90a:	bhi.n	b910 <_malloc_r+0x314>
    b90c:	cmp	r3, #15
    b90e:	bgt.n	b91a <_malloc_r+0x31e>
    b910:	mov	r0, r6
    b912:	bl	be0c <__malloc_unlock>
    b916:	movs	r4, #0
    b918:	b.n	b78c <_malloc_r+0x190>
    b91a:	adds	r2, r4, r5
    b91c:	orr.w	r3, r3, #1
    b920:	orr.w	r5, r5, #1
    b924:	str	r5, [r4, #4]
    b926:	mov	r0, r6
    b928:	str	r2, [r7, #8]
    b92a:	str	r3, [r2, #4]
    b92c:	bl	be0c <__malloc_unlock>
    b930:	adds	r4, #8
    b932:	mov	r0, r4
    b934:	add	sp, #12
    b936:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b93a:	cmp	r3, #20
    b93c:	bls.n	ba22 <_malloc_r+0x426>
    b93e:	cmp	r3, #84	; 0x54
    b940:	bhi.w	ba8c <_malloc_r+0x490>
    b944:	lsrs	r0, r5, #12
    b946:	add.w	lr, r0, #111	; 0x6f
    b94a:	mov.w	r3, lr, lsl #1
    b94e:	adds	r0, #110	; 0x6e
    b950:	b.n	b640 <_malloc_r+0x44>
    b952:	nop
    b954:	.word	0x1fff10a8
    b958:	.word	0x1fff2054
    b95c:	.word	0x1fff2058
    b960:	.word	0x1fff2050
    b964:	.word	0x1fff204c
    b968:	.word	0x1fff14b4
    b96c:	lsrs	r2, r3, #9
    b96e:	cmp	r2, #4
    b970:	bls.n	ba30 <_malloc_r+0x434>
    b972:	cmp	r2, #20
    b974:	bhi.w	bade <_malloc_r+0x4e2>
    b978:	add.w	r1, r2, #92	; 0x5c
    b97c:	lsls	r1, r1, #1
    b97e:	adds	r2, #91	; 0x5b
    b980:	add.w	ip, r7, r1, lsl #2
    b984:	ldr.w	r1, [r7, r1, lsl #2]
    b988:	ldr.w	r8, [pc, #476]	; bb68 <_malloc_r+0x56c>
    b98c:	sub.w	ip, ip, #8
    b990:	cmp	ip, r1
    b992:	beq.w	baa6 <_malloc_r+0x4aa>
    b996:	ldr	r2, [r1, #4]
    b998:	bic.w	r2, r2, #3
    b99c:	cmp	r3, r2
    b99e:	bcs.n	b9a6 <_malloc_r+0x3aa>
    b9a0:	ldr	r1, [r1, #8]
    b9a2:	cmp	ip, r1
    b9a4:	bne.n	b996 <_malloc_r+0x39a>
    b9a6:	ldr.w	ip, [r1, #12]
    b9aa:	ldr	r2, [r7, #4]
    b9ac:	str.w	ip, [r4, #12]
    b9b0:	str	r1, [r4, #8]
    b9b2:	str.w	r4, [ip, #8]
    b9b6:	str	r4, [r1, #12]
    b9b8:	b.n	b6cc <_malloc_r+0xd0>
    b9ba:	adds	r3, r4, r5
    b9bc:	orr.w	r7, r2, #1
    b9c0:	orr.w	r5, r5, #1
    b9c4:	str	r5, [r4, #4]
    b9c6:	mov	r0, r6
    b9c8:	str	r3, [r1, #20]
    b9ca:	str	r3, [r1, #16]
    b9cc:	str.w	lr, [r3, #12]
    b9d0:	str.w	lr, [r3, #8]
    b9d4:	str	r7, [r3, #4]
    b9d6:	str	r2, [r3, r2]
    b9d8:	adds	r4, #8
    b9da:	bl	be0c <__malloc_unlock>
    b9de:	b.n	b78c <_malloc_r+0x190>
    b9e0:	ldr	r2, [r1, #4]
    b9e2:	b.n	b6cc <_malloc_r+0xd0>
    b9e4:	add.w	r8, r8, #1
    b9e8:	tst.w	r8, #3
    b9ec:	add.w	ip, ip, #8
    b9f0:	bne.w	b6f2 <_malloc_r+0xf6>
    b9f4:	b.n	ba58 <_malloc_r+0x45c>
    b9f6:	ldr	r4, [r3, #12]
    b9f8:	cmp	r3, r4
    b9fa:	it	eq
    b9fc:	addeq	r0, #2
    b9fe:	beq.w	b66c <_malloc_r+0x70>
    ba02:	b.n	b76c <_malloc_r+0x170>
    ba04:	add	r3, r1
    ba06:	mov	r4, r1
    ba08:	ldr	r2, [r3, #4]
    ba0a:	ldr	r1, [r1, #12]
    ba0c:	ldr.w	r5, [r4, #8]!
    ba10:	orr.w	r2, r2, #1
    ba14:	str	r2, [r3, #4]
    ba16:	mov	r0, r6
    ba18:	str	r1, [r5, #12]
    ba1a:	str	r5, [r1, #8]
    ba1c:	bl	be0c <__malloc_unlock>
    ba20:	b.n	b78c <_malloc_r+0x190>
    ba22:	add.w	lr, r3, #92	; 0x5c
    ba26:	add.w	r0, r3, #91	; 0x5b
    ba2a:	mov.w	r3, lr, lsl #1
    ba2e:	b.n	b640 <_malloc_r+0x44>
    ba30:	lsrs	r2, r3, #6
    ba32:	add.w	r1, r2, #57	; 0x39
    ba36:	lsls	r1, r1, #1
    ba38:	adds	r2, #56	; 0x38
    ba3a:	b.n	b980 <_malloc_r+0x384>
    ba3c:	cmp	r4, r7
    ba3e:	ldr	r3, [pc, #296]	; (bb68 <_malloc_r+0x56c>)
    ba40:	beq.w	b844 <_malloc_r+0x248>
    ba44:	ldr	r4, [r3, #8]
    ba46:	ldr	r2, [r4, #4]
    ba48:	bic.w	r2, r2, #3
    ba4c:	b.n	b904 <_malloc_r+0x308>
    ba4e:	ldr.w	r3, [r9], #-8
    ba52:	cmp	r9, r3
    ba54:	bne.w	bb5c <_malloc_r+0x560>
    ba58:	tst.w	r0, #3
    ba5c:	add.w	r0, r0, #4294967295
    ba60:	bne.n	ba4e <_malloc_r+0x452>
    ba62:	ldr	r3, [r7, #4]
    ba64:	bic.w	r3, r3, r4
    ba68:	str	r3, [r7, #4]
    ba6a:	lsls	r4, r4, #1
    ba6c:	cmp	r4, r3
    ba6e:	bhi.w	b7ec <_malloc_r+0x1f0>
    ba72:	cmp	r4, #0
    ba74:	beq.w	b7ec <_malloc_r+0x1f0>
    ba78:	tst	r4, r3
    ba7a:	mov	r0, r8
    ba7c:	bne.w	b6ea <_malloc_r+0xee>
    ba80:	lsls	r4, r4, #1
    ba82:	tst	r4, r3
    ba84:	add.w	r0, r0, #4
    ba88:	beq.n	ba80 <_malloc_r+0x484>
    ba8a:	b.n	b6ea <_malloc_r+0xee>
    ba8c:	cmp.w	r3, #340	; 0x154
    ba90:	bhi.n	bac4 <_malloc_r+0x4c8>
    ba92:	lsrs	r0, r5, #15
    ba94:	add.w	lr, r0, #120	; 0x78
    ba98:	mov.w	r3, lr, lsl #1
    ba9c:	adds	r0, #119	; 0x77
    ba9e:	b.n	b640 <_malloc_r+0x44>
    baa0:	mov.w	r1, #4096	; 0x1000
    baa4:	b.n	b87e <_malloc_r+0x282>
    baa6:	movs	r1, #1
    baa8:	ldr.w	r3, [r8, #4]
    baac:	asrs	r2, r2, #2
    baae:	lsl.w	r2, r1, r2
    bab2:	orrs	r2, r3
    bab4:	str.w	r2, [r8, #4]
    bab8:	mov	r1, ip
    baba:	b.n	b9ac <_malloc_r+0x3b0>
    babc:	movs	r3, #1
    babe:	str.w	r3, [fp, #4]
    bac2:	b.n	b910 <_malloc_r+0x314>
    bac4:	movw	r2, #1364	; 0x554
    bac8:	cmp	r3, r2
    baca:	bhi.n	bb0e <_malloc_r+0x512>
    bacc:	lsrs	r0, r5, #18
    bace:	add.w	lr, r0, #125	; 0x7d
    bad2:	mov.w	r3, lr, lsl #1
    bad6:	adds	r0, #124	; 0x7c
    bad8:	b.n	b640 <_malloc_r+0x44>
    bada:	adds	r2, #16
    badc:	b.n	b828 <_malloc_r+0x22c>
    bade:	cmp	r2, #84	; 0x54
    bae0:	bhi.n	bb30 <_malloc_r+0x534>
    bae2:	lsrs	r2, r3, #12
    bae4:	add.w	r1, r2, #111	; 0x6f
    bae8:	lsls	r1, r1, #1
    baea:	adds	r2, #110	; 0x6e
    baec:	b.n	b980 <_malloc_r+0x384>
    baee:	ldr	r4, [r7, #8]
    baf0:	ldr	r2, [r4, #4]
    baf2:	bic.w	r2, r2, #3
    baf6:	b.n	b904 <_malloc_r+0x308>
    baf8:	ubfx	r0, sl, #0, #12
    bafc:	cmp	r0, #0
    bafe:	bne.w	b852 <_malloc_r+0x256>
    bb02:	add	r2, r8
    bb04:	ldr	r3, [r7, #8]
    bb06:	orr.w	r2, r2, #1
    bb0a:	str	r2, [r3, #4]
    bb0c:	b.n	b8e8 <_malloc_r+0x2ec>
    bb0e:	movs	r3, #254	; 0xfe
    bb10:	mov.w	lr, #127	; 0x7f
    bb14:	movs	r0, #126	; 0x7e
    bb16:	b.n	b640 <_malloc_r+0x44>
    bb18:	movs	r2, #1
    bb1a:	mov.w	r9, #0
    bb1e:	b.n	b8a4 <_malloc_r+0x2a8>
    bb20:	add.w	r1, r4, #8
    bb24:	mov	r0, r6
    bb26:	bl	c730 <_free_r>
    bb2a:	ldr.w	r1, [r9]
    bb2e:	b.n	b8e8 <_malloc_r+0x2ec>
    bb30:	cmp.w	r2, #340	; 0x154
    bb34:	bhi.n	bb42 <_malloc_r+0x546>
    bb36:	lsrs	r2, r3, #15
    bb38:	add.w	r1, r2, #120	; 0x78
    bb3c:	lsls	r1, r1, #1
    bb3e:	adds	r2, #119	; 0x77
    bb40:	b.n	b980 <_malloc_r+0x384>
    bb42:	movw	r1, #1364	; 0x554
    bb46:	cmp	r2, r1
    bb48:	bhi.n	bb56 <_malloc_r+0x55a>
    bb4a:	lsrs	r2, r3, #18
    bb4c:	add.w	r1, r2, #125	; 0x7d
    bb50:	lsls	r1, r1, #1
    bb52:	adds	r2, #124	; 0x7c
    bb54:	b.n	b980 <_malloc_r+0x384>
    bb56:	movs	r1, #254	; 0xfe
    bb58:	movs	r2, #126	; 0x7e
    bb5a:	b.n	b980 <_malloc_r+0x384>
    bb5c:	ldr	r3, [r7, #4]
    bb5e:	b.n	ba6a <_malloc_r+0x46e>
    bb60:	lsrs	r0, r5, #3
    bb62:	adds	r3, r0, #1
    bb64:	lsls	r3, r3, #1
    bb66:	b.n	b75a <_malloc_r+0x15e>
    bb68:	.word	0x1fff10a8

0000bb6c <__ascii_mbtowc>:
    bb6c:	sub	sp, #8
    bb6e:	cbz	r1, bb84 <__ascii_mbtowc+0x18>
    bb70:	cbz	r2, bb8a <__ascii_mbtowc+0x1e>
    bb72:	cbz	r3, bb90 <__ascii_mbtowc+0x24>
    bb74:	ldrb	r3, [r2, #0]
    bb76:	str	r3, [r1, #0]
    bb78:	ldrb	r2, [r2, #0]
    bb7a:	adds	r0, r2, #0
    bb7c:	it	ne
    bb7e:	movne	r0, #1
    bb80:	add	sp, #8
    bb82:	bx	lr
    bb84:	add	r1, sp, #4
    bb86:	cmp	r2, #0
    bb88:	bne.n	bb72 <__ascii_mbtowc+0x6>
    bb8a:	mov	r0, r2
    bb8c:	add	sp, #8
    bb8e:	bx	lr
    bb90:	mvn.w	r0, #1
    bb94:	b.n	bb80 <__ascii_mbtowc+0x14>
    bb96:	nop
    bb98:			; <UNDEFINED> instruction: 0xffffffff
    bb9c:			; <UNDEFINED> instruction: 0xffffffff

0000bba0 <memchr>:
    bba0:	and.w	r1, r1, #255	; 0xff
    bba4:	cmp	r2, #16
    bba6:	blt.n	bc00 <memchr+0x60>
    bba8:	tst.w	r0, #7
    bbac:	beq.n	bbc0 <memchr+0x20>
    bbae:	ldrb.w	r3, [r0], #1
    bbb2:	subs	r2, #1
    bbb4:	cmp	r3, r1
    bbb6:	beq.n	bc14 <memchr+0x74>
    bbb8:	tst.w	r0, #7
    bbbc:	cbz	r2, bc10 <memchr+0x70>
    bbbe:	bne.n	bbae <memchr+0xe>
    bbc0:	push	{r4, r5, r6, r7}
    bbc2:	orr.w	r1, r1, r1, lsl #8
    bbc6:	orr.w	r1, r1, r1, lsl #16
    bbca:	bic.w	r4, r2, #7
    bbce:	mvns.w	r7, #0
    bbd2:	movs	r3, #0
    bbd4:	ldrd	r5, r6, [r0], #8
    bbd8:	subs	r4, #8
    bbda:	eor.w	r5, r5, r1
    bbde:	eor.w	r6, r6, r1
    bbe2:	uadd8	r5, r5, r7
    bbe6:	sel	r5, r3, r7
    bbea:	uadd8	r6, r6, r7
    bbee:	sel	r6, r5, r7
    bbf2:	cbnz	r6, bc18 <memchr+0x78>
    bbf4:	bne.n	bbd4 <memchr+0x34>
    bbf6:	pop	{r4, r5, r6, r7}
    bbf8:	and.w	r1, r1, #255	; 0xff
    bbfc:	and.w	r2, r2, #7
    bc00:	cbz	r2, bc10 <memchr+0x70>
    bc02:	ldrb.w	r3, [r0], #1
    bc06:	subs	r2, #1
    bc08:	eor.w	r3, r3, r1
    bc0c:	cbz	r3, bc14 <memchr+0x74>
    bc0e:	bne.n	bc02 <memchr+0x62>
    bc10:	movs	r0, #0
    bc12:	bx	lr
    bc14:	subs	r0, #1
    bc16:	bx	lr
    bc18:	cmp	r5, #0
    bc1a:	itte	eq
    bc1c:	moveq	r5, r6
    bc1e:	subeq	r0, #3
    bc20:	subne	r0, #7
    bc22:	tst.w	r5, #1
    bc26:	bne.n	bc38 <memchr+0x98>
    bc28:	adds	r0, #1
    bc2a:	tst.w	r5, #256	; 0x100
    bc2e:	ittt	eq
    bc30:	addeq	r0, #1
    bc32:	tsteq.w	r5, #98304	; 0x18000
    bc36:	addeq	r0, #1
    bc38:	pop	{r4, r5, r6, r7}
    bc3a:	subs	r0, #1
    bc3c:	bx	lr
    bc3e:	nop

0000bc40 <memcmp>:
    bc40:	cmp	r2, #3
    bc42:	push	{r4, r5, r6}
    bc44:	bls.n	bc94 <memcmp+0x54>
    bc46:	orr.w	r3, r0, r1
    bc4a:	lsls	r3, r3, #30
    bc4c:	beq.n	bc72 <memcmp+0x32>
    bc4e:	ldrb	r4, [r0, #0]
    bc50:	ldrb	r5, [r1, #0]
    bc52:	cmp	r4, r5
    bc54:	bne.n	bc9c <memcmp+0x5c>
    bc56:	add	r2, r0
    bc58:	adds	r3, r0, #1
    bc5a:	b.n	bc68 <memcmp+0x28>
    bc5c:	ldrb.w	r4, [r3], #1
    bc60:	ldrb.w	r5, [r1, #1]!
    bc64:	cmp	r4, r5
    bc66:	bne.n	bc9c <memcmp+0x5c>
    bc68:	cmp	r3, r2
    bc6a:	bne.n	bc5c <memcmp+0x1c>
    bc6c:	movs	r0, #0
    bc6e:	pop	{r4, r5, r6}
    bc70:	bx	lr
    bc72:	mov	r4, r1
    bc74:	mov	r3, r0
    bc76:	ldr	r6, [r3, #0]
    bc78:	ldr	r5, [r4, #0]
    bc7a:	cmp	r6, r5
    bc7c:	mov	r0, r3
    bc7e:	mov	r1, r4
    bc80:	add.w	r3, r3, #4
    bc84:	add.w	r4, r4, #4
    bc88:	bne.n	bc4e <memcmp+0xe>
    bc8a:	subs	r2, #4
    bc8c:	cmp	r2, #3
    bc8e:	mov	r0, r3
    bc90:	mov	r1, r4
    bc92:	bhi.n	bc76 <memcmp+0x36>
    bc94:	cmp	r2, #0
    bc96:	bne.n	bc4e <memcmp+0xe>
    bc98:	mov	r0, r2
    bc9a:	b.n	bc6e <memcmp+0x2e>
    bc9c:	subs	r0, r4, r5
    bc9e:	pop	{r4, r5, r6}
    bca0:	bx	lr
    bca2:	nop

0000bca4 <memmove>:
    bca4:	cmp	r0, r1
    bca6:	push	{r4, r5, r6, r7, lr}
    bca8:	bls.n	bcc6 <memmove+0x22>
    bcaa:	adds	r3, r1, r2
    bcac:	cmp	r0, r3
    bcae:	bcs.n	bcc6 <memmove+0x22>
    bcb0:	adds	r1, r0, r2
    bcb2:	cmp	r2, #0
    bcb4:	beq.n	bd5a <memmove+0xb6>
    bcb6:	subs	r2, r3, r2
    bcb8:	ldrb.w	r4, [r3, #-1]!
    bcbc:	strb.w	r4, [r1, #-1]!
    bcc0:	cmp	r3, r2
    bcc2:	bne.n	bcb8 <memmove+0x14>
    bcc4:	pop	{r4, r5, r6, r7, pc}
    bcc6:	cmp	r2, #15
    bcc8:	bls.n	bd5c <memmove+0xb8>
    bcca:	orr.w	r3, r1, r0
    bcce:	lsls	r3, r3, #30
    bcd0:	bne.n	bd60 <memmove+0xbc>
    bcd2:	add.w	r4, r0, #16
    bcd6:	add.w	r3, r1, #16
    bcda:	mov	r5, r2
    bcdc:	ldr.w	r6, [r3, #-16]
    bce0:	str.w	r6, [r4, #-16]
    bce4:	ldr.w	r6, [r3, #-12]
    bce8:	str.w	r6, [r4, #-12]
    bcec:	ldr.w	r6, [r3, #-8]
    bcf0:	str.w	r6, [r4, #-8]
    bcf4:	subs	r5, #16
    bcf6:	ldr.w	r6, [r3, #-4]
    bcfa:	str.w	r6, [r4, #-4]
    bcfe:	cmp	r5, #15
    bd00:	add.w	r3, r3, #16
    bd04:	add.w	r4, r4, #16
    bd08:	bhi.n	bcdc <memmove+0x38>
    bd0a:	sub.w	r3, r2, #16
    bd0e:	bic.w	r3, r3, #15
    bd12:	and.w	lr, r2, #15
    bd16:	adds	r3, #16
    bd18:	cmp.w	lr, #3
    bd1c:	add	r1, r3
    bd1e:	add	r3, r0
    bd20:	bls.n	bd66 <memmove+0xc2>
    bd22:	subs	r6, r3, #4
    bd24:	mov	r5, r1
    bd26:	mov	r4, lr
    bd28:	subs	r4, #4
    bd2a:	ldr.w	r7, [r5], #4
    bd2e:	str.w	r7, [r6, #4]!
    bd32:	cmp	r4, #3
    bd34:	bhi.n	bd28 <memmove+0x84>
    bd36:	sub.w	r4, lr, #4
    bd3a:	bic.w	r4, r4, #3
    bd3e:	adds	r4, #4
    bd40:	add	r3, r4
    bd42:	add	r1, r4
    bd44:	and.w	r2, r2, #3
    bd48:	cbz	r2, bd64 <memmove+0xc0>
    bd4a:	subs	r3, #1
    bd4c:	add	r2, r1
    bd4e:	ldrb.w	r4, [r1], #1
    bd52:	strb.w	r4, [r3, #1]!
    bd56:	cmp	r2, r1
    bd58:	bne.n	bd4e <memmove+0xaa>
    bd5a:	pop	{r4, r5, r6, r7, pc}
    bd5c:	mov	r3, r0
    bd5e:	b.n	bd48 <memmove+0xa4>
    bd60:	mov	r3, r0
    bd62:	b.n	bd4a <memmove+0xa6>
    bd64:	pop	{r4, r5, r6, r7, pc}
    bd66:	mov	r2, lr
    bd68:	b.n	bd48 <memmove+0xa4>
    bd6a:	nop

0000bd6c <memset>:
    bd6c:	push	{r4, r5, r6}
    bd6e:	lsls	r4, r0, #30
    bd70:	beq.n	be00 <memset+0x94>
    bd72:	subs	r4, r2, #1
    bd74:	cmp	r2, #0
    bd76:	beq.n	bdfc <memset+0x90>
    bd78:	uxtb	r5, r1
    bd7a:	mov	r3, r0
    bd7c:	b.n	bd84 <memset+0x18>
    bd7e:	subs	r2, r4, #1
    bd80:	cbz	r4, bdfc <memset+0x90>
    bd82:	mov	r4, r2
    bd84:	strb.w	r5, [r3], #1
    bd88:	lsls	r2, r3, #30
    bd8a:	bne.n	bd7e <memset+0x12>
    bd8c:	cmp	r4, #3
    bd8e:	bls.n	bdee <memset+0x82>
    bd90:	uxtb	r5, r1
    bd92:	orr.w	r5, r5, r5, lsl #8
    bd96:	cmp	r4, #15
    bd98:	orr.w	r5, r5, r5, lsl #16
    bd9c:	bls.n	bdd2 <memset+0x66>
    bd9e:	add.w	r2, r3, #16
    bda2:	mov	r6, r4
    bda4:	subs	r6, #16
    bda6:	cmp	r6, #15
    bda8:	str.w	r5, [r2, #-16]
    bdac:	str.w	r5, [r2, #-12]
    bdb0:	str.w	r5, [r2, #-8]
    bdb4:	str.w	r5, [r2, #-4]
    bdb8:	add.w	r2, r2, #16
    bdbc:	bhi.n	bda4 <memset+0x38>
    bdbe:	sub.w	r2, r4, #16
    bdc2:	bic.w	r2, r2, #15
    bdc6:	and.w	r4, r4, #15
    bdca:	adds	r2, #16
    bdcc:	cmp	r4, #3
    bdce:	add	r3, r2
    bdd0:	bls.n	bdee <memset+0x82>
    bdd2:	mov	r6, r3
    bdd4:	mov	r2, r4
    bdd6:	subs	r2, #4
    bdd8:	cmp	r2, #3
    bdda:	str.w	r5, [r6], #4
    bdde:	bhi.n	bdd6 <memset+0x6a>
    bde0:	subs	r2, r4, #4
    bde2:	bic.w	r2, r2, #3
    bde6:	adds	r2, #4
    bde8:	add	r3, r2
    bdea:	and.w	r4, r4, #3
    bdee:	cbz	r4, bdfc <memset+0x90>
    bdf0:	uxtb	r1, r1
    bdf2:	add	r4, r3
    bdf4:	strb.w	r1, [r3], #1
    bdf8:	cmp	r3, r4
    bdfa:	bne.n	bdf4 <memset+0x88>
    bdfc:	pop	{r4, r5, r6}
    bdfe:	bx	lr
    be00:	mov	r4, r2
    be02:	mov	r3, r0
    be04:	b.n	bd8c <memset+0x20>
    be06:	nop

0000be08 <__malloc_lock>:
    be08:	bx	lr
    be0a:	nop

0000be0c <__malloc_unlock>:
    be0c:	bx	lr
    be0e:	nop

0000be10 <_realloc_r>:
    be10:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    be14:	mov	r7, r2
    be16:	sub	sp, #12
    be18:	cmp	r1, #0
    be1a:	beq.w	bfa0 <_realloc_r+0x190>
    be1e:	mov	r6, r1
    be20:	mov	r9, r0
    be22:	add.w	r5, r7, #11
    be26:	bl	be08 <__malloc_lock>
    be2a:	ldr.w	lr, [r6, #-4]
    be2e:	cmp	r5, #22
    be30:	bic.w	r4, lr, #3
    be34:	sub.w	r8, r6, #8
    be38:	bhi.n	bebc <_realloc_r+0xac>
    be3a:	movs	r2, #16
    be3c:	mov	r5, r2
    be3e:	cmp	r7, r5
    be40:	bhi.n	bec6 <_realloc_r+0xb6>
    be42:	cmp	r4, r2
    be44:	bge.n	bf32 <_realloc_r+0x122>
    be46:	ldr	r3, [pc, #804]	; (c16c <_realloc_r+0x35c>)
    be48:	ldr	r1, [r3, #8]
    be4a:	add.w	r0, r8, r4
    be4e:	cmp	r0, r1
    be50:	ldr	r1, [r0, #4]
    be52:	beq.w	c008 <_realloc_r+0x1f8>
    be56:	bic.w	r3, r1, #1
    be5a:	add	r3, r0
    be5c:	ldr	r3, [r3, #4]
    be5e:	lsls	r3, r3, #31
    be60:	bpl.n	bf5e <_realloc_r+0x14e>
    be62:	tst.w	lr, #1
    be66:	beq.n	bed4 <_realloc_r+0xc4>
    be68:	mov	r1, r7
    be6a:	mov	r0, r9
    be6c:	bl	b5fc <_malloc_r>
    be70:	mov	r7, r0
    be72:	cbz	r0, beae <_realloc_r+0x9e>
    be74:	ldr.w	r3, [r6, #-4]
    be78:	bic.w	r3, r3, #1
    be7c:	add	r3, r8
    be7e:	sub.w	r2, r0, #8
    be82:	cmp	r2, r3
    be84:	beq.w	c110 <_realloc_r+0x300>
    be88:	subs	r2, r4, #4
    be8a:	cmp	r2, #36	; 0x24
    be8c:	bhi.w	c0f2 <_realloc_r+0x2e2>
    be90:	cmp	r2, #19
    be92:	bhi.w	c09e <_realloc_r+0x28e>
    be96:	mov	r3, r0
    be98:	mov	r2, r6
    be9a:	ldr	r1, [r2, #0]
    be9c:	str	r1, [r3, #0]
    be9e:	ldr	r1, [r2, #4]
    bea0:	str	r1, [r3, #4]
    bea2:	ldr	r2, [r2, #8]
    bea4:	str	r2, [r3, #8]
    bea6:	mov	r1, r6
    bea8:	mov	r0, r9
    beaa:	bl	c730 <_free_r>
    beae:	mov	r0, r9
    beb0:	bl	be0c <__malloc_unlock>
    beb4:	mov	r0, r7
    beb6:	add	sp, #12
    beb8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bebc:	bic.w	r5, r5, #7
    bec0:	cmp	r5, #0
    bec2:	mov	r2, r5
    bec4:	bge.n	be3e <_realloc_r+0x2e>
    bec6:	movs	r3, #12
    bec8:	movs	r0, #0
    beca:	str.w	r3, [r9]
    bece:	add	sp, #12
    bed0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bed4:	ldr.w	r3, [r6, #-8]
    bed8:	rsb	sl, r3, r8
    bedc:	ldr.w	r3, [sl, #4]
    bee0:	bic.w	ip, r3, #3
    bee4:	add.w	r3, r4, ip
    bee8:	cmp	r3, r2
    beea:	blt.n	be68 <_realloc_r+0x58>
    beec:	mov	r7, sl
    beee:	ldr.w	r1, [sl, #12]
    bef2:	ldr.w	r0, [r7, #8]!
    bef6:	subs	r2, r4, #4
    bef8:	cmp	r2, #36	; 0x24
    befa:	str	r1, [r0, #12]
    befc:	str	r0, [r1, #8]
    befe:	bhi.w	c130 <_realloc_r+0x320>
    bf02:	cmp	r2, #19
    bf04:	bls.w	c12c <_realloc_r+0x31c>
    bf08:	ldr	r1, [r6, #0]
    bf0a:	str.w	r1, [sl, #8]
    bf0e:	ldr	r1, [r6, #4]
    bf10:	str.w	r1, [sl, #12]
    bf14:	cmp	r2, #27
    bf16:	bhi.w	c170 <_realloc_r+0x360>
    bf1a:	adds	r6, #8
    bf1c:	add.w	r2, sl, #16
    bf20:	ldr	r1, [r6, #0]
    bf22:	str	r1, [r2, #0]
    bf24:	ldr	r1, [r6, #4]
    bf26:	str	r1, [r2, #4]
    bf28:	ldr	r1, [r6, #8]
    bf2a:	str	r1, [r2, #8]
    bf2c:	mov	r6, r7
    bf2e:	mov	r4, r3
    bf30:	mov	r8, sl
    bf32:	subs	r3, r4, r5
    bf34:	cmp	r3, #15
    bf36:	bhi.n	bf74 <_realloc_r+0x164>
    bf38:	ldr.w	r3, [r8, #4]
    bf3c:	and.w	r3, r3, #1
    bf40:	orrs	r3, r4
    bf42:	add	r4, r8
    bf44:	str.w	r3, [r8, #4]
    bf48:	ldr	r3, [r4, #4]
    bf4a:	orr.w	r3, r3, #1
    bf4e:	str	r3, [r4, #4]
    bf50:	mov	r0, r9
    bf52:	bl	be0c <__malloc_unlock>
    bf56:	mov	r0, r6
    bf58:	add	sp, #12
    bf5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bf5e:	bic.w	r1, r1, #3
    bf62:	add	r1, r4
    bf64:	cmp	r1, r2
    bf66:	blt.n	bfac <_realloc_r+0x19c>
    bf68:	ldr	r3, [r0, #12]
    bf6a:	ldr	r2, [r0, #8]
    bf6c:	mov	r4, r1
    bf6e:	str	r3, [r2, #12]
    bf70:	str	r2, [r3, #8]
    bf72:	b.n	bf32 <_realloc_r+0x122>
    bf74:	ldr.w	r2, [r8, #4]
    bf78:	add.w	r1, r8, r5
    bf7c:	and.w	r2, r2, #1
    bf80:	orrs	r5, r2
    bf82:	orr.w	r2, r3, #1
    bf86:	add	r3, r1
    bf88:	str.w	r5, [r8, #4]
    bf8c:	str	r2, [r1, #4]
    bf8e:	ldr	r2, [r3, #4]
    bf90:	orr.w	r2, r2, #1
    bf94:	adds	r1, #8
    bf96:	str	r2, [r3, #4]
    bf98:	mov	r0, r9
    bf9a:	bl	c730 <_free_r>
    bf9e:	b.n	bf50 <_realloc_r+0x140>
    bfa0:	mov	r1, r2
    bfa2:	add	sp, #12
    bfa4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bfa8:	b.w	b5fc <_malloc_r>
    bfac:	tst.w	lr, #1
    bfb0:	bne.w	be68 <_realloc_r+0x58>
    bfb4:	ldr.w	r3, [r6, #-8]
    bfb8:	rsb	sl, r3, r8
    bfbc:	ldr.w	r3, [sl, #4]
    bfc0:	bic.w	ip, r3, #3
    bfc4:	add.w	lr, r1, ip
    bfc8:	cmp	lr, r2
    bfca:	blt.n	bee4 <_realloc_r+0xd4>
    bfcc:	ldr	r3, [r0, #12]
    bfce:	ldr	r2, [r0, #8]
    bfd0:	mov	r7, sl
    bfd2:	str	r3, [r2, #12]
    bfd4:	str	r2, [r3, #8]
    bfd6:	ldr.w	r1, [r7, #8]!
    bfda:	ldr.w	r3, [sl, #12]
    bfde:	str	r3, [r1, #12]
    bfe0:	subs	r2, r4, #4
    bfe2:	cmp	r2, #36	; 0x24
    bfe4:	str	r1, [r3, #8]
    bfe6:	bhi.w	c11c <_realloc_r+0x30c>
    bfea:	cmp	r2, #19
    bfec:	bls.n	c0b4 <_realloc_r+0x2a4>
    bfee:	ldr	r3, [r6, #0]
    bff0:	str.w	r3, [sl, #8]
    bff4:	ldr	r3, [r6, #4]
    bff6:	str.w	r3, [sl, #12]
    bffa:	cmp	r2, #27
    bffc:	bhi.w	c140 <_realloc_r+0x330>
    c000:	adds	r6, #8
    c002:	add.w	r3, sl, #16
    c006:	b.n	c0b6 <_realloc_r+0x2a6>
    c008:	bic.w	fp, r1, #3
    c00c:	add	fp, r4
    c00e:	add.w	r0, r5, #16
    c012:	cmp	fp, r0
    c014:	bge.n	c0ca <_realloc_r+0x2ba>
    c016:	tst.w	lr, #1
    c01a:	bne.w	be68 <_realloc_r+0x58>
    c01e:	ldr.w	r1, [r6, #-8]
    c022:	rsb	sl, r1, r8
    c026:	ldr.w	r1, [sl, #4]
    c02a:	bic.w	ip, r1, #3
    c02e:	add	fp, ip
    c030:	cmp	r0, fp
    c032:	bgt.w	bee4 <_realloc_r+0xd4>
    c036:	mov	r7, sl
    c038:	ldr.w	r1, [sl, #12]
    c03c:	ldr.w	r0, [r7, #8]!
    c040:	subs	r2, r4, #4
    c042:	cmp	r2, #36	; 0x24
    c044:	str	r1, [r0, #12]
    c046:	str	r0, [r1, #8]
    c048:	bhi.w	c1b4 <_realloc_r+0x3a4>
    c04c:	cmp	r2, #19
    c04e:	bls.w	c19c <_realloc_r+0x38c>
    c052:	ldr	r1, [r6, #0]
    c054:	str.w	r1, [sl, #8]
    c058:	ldr	r1, [r6, #4]
    c05a:	str.w	r1, [sl, #12]
    c05e:	cmp	r2, #27
    c060:	bhi.w	c1c2 <_realloc_r+0x3b2>
    c064:	adds	r6, #8
    c066:	add.w	r2, sl, #16
    c06a:	ldr	r1, [r6, #0]
    c06c:	str	r1, [r2, #0]
    c06e:	ldr	r1, [r6, #4]
    c070:	str	r1, [r2, #4]
    c072:	ldr	r1, [r6, #8]
    c074:	str	r1, [r2, #8]
    c076:	add.w	r1, sl, r5
    c07a:	rsb	r2, r5, fp
    c07e:	orr.w	r2, r2, #1
    c082:	str	r1, [r3, #8]
    c084:	str	r2, [r1, #4]
    c086:	ldr.w	r3, [sl, #4]
    c08a:	and.w	r3, r3, #1
    c08e:	orrs	r5, r3
    c090:	mov	r0, r9
    c092:	str.w	r5, [sl, #4]
    c096:	bl	be0c <__malloc_unlock>
    c09a:	mov	r0, r7
    c09c:	b.n	bf58 <_realloc_r+0x148>
    c09e:	ldr	r3, [r6, #0]
    c0a0:	str	r3, [r0, #0]
    c0a2:	ldr	r3, [r6, #4]
    c0a4:	str	r3, [r0, #4]
    c0a6:	cmp	r2, #27
    c0a8:	bhi.n	c0fa <_realloc_r+0x2ea>
    c0aa:	add.w	r3, r0, #8
    c0ae:	add.w	r2, r6, #8
    c0b2:	b.n	be9a <_realloc_r+0x8a>
    c0b4:	mov	r3, r7
    c0b6:	ldr	r2, [r6, #0]
    c0b8:	str	r2, [r3, #0]
    c0ba:	ldr	r2, [r6, #4]
    c0bc:	str	r2, [r3, #4]
    c0be:	ldr	r2, [r6, #8]
    c0c0:	str	r2, [r3, #8]
    c0c2:	mov	r6, r7
    c0c4:	mov	r4, lr
    c0c6:	mov	r8, sl
    c0c8:	b.n	bf32 <_realloc_r+0x122>
    c0ca:	add.w	r1, r8, r5
    c0ce:	rsb	fp, r5, fp
    c0d2:	orr.w	r2, fp, #1
    c0d6:	str	r1, [r3, #8]
    c0d8:	str	r2, [r1, #4]
    c0da:	ldr.w	r3, [r6, #-4]
    c0de:	and.w	r3, r3, #1
    c0e2:	orrs	r5, r3
    c0e4:	mov	r0, r9
    c0e6:	str.w	r5, [r6, #-4]
    c0ea:	bl	be0c <__malloc_unlock>
    c0ee:	mov	r0, r6
    c0f0:	b.n	bf58 <_realloc_r+0x148>
    c0f2:	mov	r1, r6
    c0f4:	bl	bca4 <memmove>
    c0f8:	b.n	bea6 <_realloc_r+0x96>
    c0fa:	ldr	r3, [r6, #8]
    c0fc:	str	r3, [r0, #8]
    c0fe:	ldr	r3, [r6, #12]
    c100:	str	r3, [r0, #12]
    c102:	cmp	r2, #36	; 0x24
    c104:	beq.n	c158 <_realloc_r+0x348>
    c106:	add.w	r3, r0, #16
    c10a:	add.w	r2, r6, #16
    c10e:	b.n	be9a <_realloc_r+0x8a>
    c110:	ldr.w	r3, [r0, #-4]
    c114:	bic.w	r3, r3, #3
    c118:	add	r4, r3
    c11a:	b.n	bf32 <_realloc_r+0x122>
    c11c:	mov	r1, r6
    c11e:	mov	r0, r7
    c120:	mov	r4, lr
    c122:	mov	r8, sl
    c124:	bl	bca4 <memmove>
    c128:	mov	r6, r7
    c12a:	b.n	bf32 <_realloc_r+0x122>
    c12c:	mov	r2, r7
    c12e:	b.n	bf20 <_realloc_r+0x110>
    c130:	mov	r1, r6
    c132:	mov	r0, r7
    c134:	mov	r4, r3
    c136:	mov	r8, sl
    c138:	bl	bca4 <memmove>
    c13c:	mov	r6, r7
    c13e:	b.n	bf32 <_realloc_r+0x122>
    c140:	ldr	r3, [r6, #8]
    c142:	str.w	r3, [sl, #16]
    c146:	ldr	r3, [r6, #12]
    c148:	str.w	r3, [sl, #20]
    c14c:	cmp	r2, #36	; 0x24
    c14e:	beq.n	c188 <_realloc_r+0x378>
    c150:	adds	r6, #16
    c152:	add.w	r3, sl, #24
    c156:	b.n	c0b6 <_realloc_r+0x2a6>
    c158:	ldr	r3, [r6, #16]
    c15a:	str	r3, [r0, #16]
    c15c:	ldr	r3, [r6, #20]
    c15e:	str	r3, [r0, #20]
    c160:	add.w	r2, r6, #24
    c164:	add.w	r3, r0, #24
    c168:	b.n	be9a <_realloc_r+0x8a>
    c16a:	nop
    c16c:	.word	0x1fff10a8
    c170:	ldr	r1, [r6, #8]
    c172:	str.w	r1, [sl, #16]
    c176:	ldr	r1, [r6, #12]
    c178:	str.w	r1, [sl, #20]
    c17c:	cmp	r2, #36	; 0x24
    c17e:	beq.n	c1a0 <_realloc_r+0x390>
    c180:	adds	r6, #16
    c182:	add.w	r2, sl, #24
    c186:	b.n	bf20 <_realloc_r+0x110>
    c188:	ldr	r3, [r6, #16]
    c18a:	str.w	r3, [sl, #24]
    c18e:	ldr	r3, [r6, #20]
    c190:	str.w	r3, [sl, #28]
    c194:	adds	r6, #24
    c196:	add.w	r3, sl, #32
    c19a:	b.n	c0b6 <_realloc_r+0x2a6>
    c19c:	mov	r2, r7
    c19e:	b.n	c06a <_realloc_r+0x25a>
    c1a0:	ldr	r2, [r6, #16]
    c1a2:	str.w	r2, [sl, #24]
    c1a6:	ldr	r2, [r6, #20]
    c1a8:	str.w	r2, [sl, #28]
    c1ac:	adds	r6, #24
    c1ae:	add.w	r2, sl, #32
    c1b2:	b.n	bf20 <_realloc_r+0x110>
    c1b4:	mov	r1, r6
    c1b6:	mov	r0, r7
    c1b8:	str	r3, [sp, #4]
    c1ba:	bl	bca4 <memmove>
    c1be:	ldr	r3, [sp, #4]
    c1c0:	b.n	c076 <_realloc_r+0x266>
    c1c2:	ldr	r1, [r6, #8]
    c1c4:	str.w	r1, [sl, #16]
    c1c8:	ldr	r1, [r6, #12]
    c1ca:	str.w	r1, [sl, #20]
    c1ce:	cmp	r2, #36	; 0x24
    c1d0:	beq.n	c1da <_realloc_r+0x3ca>
    c1d2:	adds	r6, #16
    c1d4:	add.w	r2, sl, #24
    c1d8:	b.n	c06a <_realloc_r+0x25a>
    c1da:	ldr	r2, [r6, #16]
    c1dc:	str.w	r2, [sl, #24]
    c1e0:	ldr	r2, [r6, #20]
    c1e2:	str.w	r2, [sl, #28]
    c1e6:	adds	r6, #24
    c1e8:	add.w	r2, sl, #32
    c1ec:	b.n	c06a <_realloc_r+0x25a>
    c1ee:	nop

0000c1f0 <_sbrk_r>:
    c1f0:	push	{r3, r4, r5, lr}
    c1f2:	ldr	r4, [pc, #28]	; (c210 <_sbrk_r+0x20>)
    c1f4:	movs	r3, #0
    c1f6:	mov	r5, r0
    c1f8:	mov	r0, r1
    c1fa:	str	r3, [r4, #0]
    c1fc:	bl	93ec <_sbrk>
    c200:	adds	r3, r0, #1
    c202:	beq.n	c206 <_sbrk_r+0x16>
    c204:	pop	{r3, r4, r5, pc}
    c206:	ldr	r3, [r4, #0]
    c208:	cmp	r3, #0
    c20a:	beq.n	c204 <_sbrk_r+0x14>
    c20c:	str	r3, [r5, #0]
    c20e:	pop	{r3, r4, r5, pc}
    c210:	.word	0x1fff2098

0000c214 <stpcpy>:
    c214:	orr.w	r3, r1, r0
    c218:	lsls	r3, r3, #30
    c21a:	push	{r4}
    c21c:	bne.n	c248 <stpcpy+0x34>
    c21e:	ldr	r3, [r1, #0]
    c220:	sub.w	r2, r3, #16843009	; 0x1010101
    c224:	bic.w	r2, r2, r3
    c228:	tst.w	r2, #2155905152	; 0x80808080
    c22c:	bne.n	c248 <stpcpy+0x34>
    c22e:	adds	r4, r1, #4
    c230:	str.w	r3, [r0], #4
    c234:	mov	r1, r4
    c236:	ldr.w	r3, [r4], #4
    c23a:	sub.w	r2, r3, #16843009	; 0x1010101
    c23e:	bic.w	r2, r2, r3
    c242:	tst.w	r2, #2155905152	; 0x80808080
    c246:	beq.n	c230 <stpcpy+0x1c>
    c248:	mov	r3, r0
    c24a:	ldrb.w	r2, [r1], #1
    c24e:	mov	r0, r3
    c250:	strb.w	r2, [r3], #1
    c254:	cmp	r2, #0
    c256:	bne.n	c24a <stpcpy+0x36>
    c258:	ldr.w	r4, [sp], #4
    c25c:	bx	lr
    c25e:	nop

0000c260 <strcat>:
    c260:	lsls	r3, r0, #30
    c262:	push	{r4, lr}
    c264:	mov	r4, r0
    c266:	bne.n	c28a <strcat+0x2a>
    c268:	ldr	r2, [r0, #0]
    c26a:	sub.w	r3, r2, #16843009	; 0x1010101
    c26e:	bic.w	r3, r3, r2
    c272:	tst.w	r3, #2155905152	; 0x80808080
    c276:	bne.n	c28a <strcat+0x2a>
    c278:	ldr.w	r2, [r0, #4]!
    c27c:	sub.w	r3, r2, #16843009	; 0x1010101
    c280:	bic.w	r3, r3, r2
    c284:	tst.w	r3, #2155905152	; 0x80808080
    c288:	beq.n	c278 <strcat+0x18>
    c28a:	ldrb	r3, [r0, #0]
    c28c:	cbz	r3, c296 <strcat+0x36>
    c28e:	ldrb.w	r3, [r0, #1]!
    c292:	cmp	r3, #0
    c294:	bne.n	c28e <strcat+0x2e>
    c296:	bl	c2a0 <strcpy>
    c29a:	mov	r0, r4
    c29c:	pop	{r4, pc}
    c29e:	nop

0000c2a0 <strcpy>:
    c2a0:	eor.w	r2, r0, r1
    c2a4:	mov	ip, r0
    c2a6:	tst.w	r2, #3
    c2aa:	bne.n	c34c <strcpy+0xac>
    c2ac:	tst.w	r1, #3
    c2b0:	bne.n	c318 <strcpy+0x78>
    c2b2:	str.w	r4, [sp, #-4]!
    c2b6:	tst.w	r1, #4
    c2ba:	ldr.w	r3, [r1], #4
    c2be:	beq.n	c2d8 <strcpy+0x38>
    c2c0:	sub.w	r2, r3, #16843009	; 0x1010101
    c2c4:	bics	r2, r3
    c2c6:	tst.w	r2, #2155905152	; 0x80808080
    c2ca:	itt	eq
    c2cc:	streq.w	r3, [ip], #4
    c2d0:	ldreq.w	r3, [r1], #4
    c2d4:	bne.n	c304 <strcpy+0x64>
    c2d6:	nop
    c2d8:	ldr.w	r4, [r1], #4
    c2dc:	sub.w	r2, r3, #16843009	; 0x1010101
    c2e0:	bics	r2, r3
    c2e2:	tst.w	r2, #2155905152	; 0x80808080
    c2e6:	sub.w	r2, r4, #16843009	; 0x1010101
    c2ea:	bne.n	c304 <strcpy+0x64>
    c2ec:	str.w	r3, [ip], #4
    c2f0:	bics	r2, r4
    c2f2:	tst.w	r2, #2155905152	; 0x80808080
    c2f6:	itt	eq
    c2f8:	ldreq.w	r3, [r1], #4
    c2fc:	streq.w	r4, [ip], #4
    c300:	beq.n	c2d8 <strcpy+0x38>
    c302:	mov	r3, r4
    c304:	strb.w	r3, [ip], #1
    c308:	tst.w	r3, #255	; 0xff
    c30c:	mov.w	r3, r3, ror #8
    c310:	bne.n	c304 <strcpy+0x64>
    c312:	ldr.w	r4, [sp], #4
    c316:	bx	lr
    c318:	tst.w	r1, #1
    c31c:	beq.n	c32c <strcpy+0x8c>
    c31e:	ldrb.w	r2, [r1], #1
    c322:	strb.w	r2, [ip], #1
    c326:	cmp	r2, #0
    c328:	it	eq
    c32a:	bxeq	lr
    c32c:	tst.w	r1, #2
    c330:	beq.n	c2b2 <strcpy+0x12>
    c332:	ldrh.w	r2, [r1], #2
    c336:	tst.w	r2, #255	; 0xff
    c33a:	itet	ne
    c33c:	strhne.w	r2, [ip], #2
    c340:	strbeq.w	r2, [ip]
    c344:	tstne.w	r2, #65280	; 0xff00
    c348:	bne.n	c2b2 <strcpy+0x12>
    c34a:	bx	lr
    c34c:	ldrb.w	r2, [r1], #1
    c350:	strb.w	r2, [ip], #1
    c354:	cmp	r2, #0
    c356:	bne.n	c34c <strcpy+0xac>
    c358:	bx	lr
    c35a:	nop
    c35c:			; <UNDEFINED> instruction: 0xffffffff
    c360:			; <UNDEFINED> instruction: 0xffffffff
    c364:			; <UNDEFINED> instruction: 0xffffffff
    c368:			; <UNDEFINED> instruction: 0xffffffff
    c36c:			; <UNDEFINED> instruction: 0xffffffff
    c370:			; <UNDEFINED> instruction: 0xffffffff
    c374:			; <UNDEFINED> instruction: 0xffffffff
    c378:			; <UNDEFINED> instruction: 0xffffffff
    c37c:			; <UNDEFINED> instruction: 0xffffffff

0000c380 <strlen>:
    c380:	pld	[r0]
    c384:	strd	r4, r5, [sp, #-8]!
    c388:	bic.w	r1, r0, #7
    c38c:	mvn.w	ip, #0
    c390:	ands.w	r4, r0, #7
    c394:	pld	[r1, #32]
    c398:	bne.w	c42e <strlen+0xae>
    c39c:	mov.w	r4, #0
    c3a0:	mvn.w	r0, #7
    c3a4:	ldrd	r2, r3, [r1]
    c3a8:	pld	[r1, #64]	; 0x40
    c3ac:	add.w	r0, r0, #8
    c3b0:	uadd8	r2, r2, ip
    c3b4:	sel	r2, r4, ip
    c3b8:	uadd8	r3, r3, ip
    c3bc:	sel	r3, r2, ip
    c3c0:	cbnz	r3, c416 <strlen+0x96>
    c3c2:	ldrd	r2, r3, [r1, #8]
    c3c6:	uadd8	r2, r2, ip
    c3ca:	add.w	r0, r0, #8
    c3ce:	sel	r2, r4, ip
    c3d2:	uadd8	r3, r3, ip
    c3d6:	sel	r3, r2, ip
    c3da:	cbnz	r3, c416 <strlen+0x96>
    c3dc:	ldrd	r2, r3, [r1, #16]
    c3e0:	uadd8	r2, r2, ip
    c3e4:	add.w	r0, r0, #8
    c3e8:	sel	r2, r4, ip
    c3ec:	uadd8	r3, r3, ip
    c3f0:	sel	r3, r2, ip
    c3f4:	cbnz	r3, c416 <strlen+0x96>
    c3f6:	ldrd	r2, r3, [r1, #24]
    c3fa:	add.w	r1, r1, #32
    c3fe:	uadd8	r2, r2, ip
    c402:	add.w	r0, r0, #8
    c406:	sel	r2, r4, ip
    c40a:	uadd8	r3, r3, ip
    c40e:	sel	r3, r2, ip
    c412:	cmp	r3, #0
    c414:	beq.n	c3a4 <strlen+0x24>
    c416:	cmp	r2, #0
    c418:	itt	eq
    c41a:	addeq	r0, #4
    c41c:	moveq	r2, r3
    c41e:	rev	r2, r2
    c420:	clz	r2, r2
    c424:	ldrd	r4, r5, [sp], #8
    c428:	add.w	r0, r0, r2, lsr #3
    c42c:	bx	lr
    c42e:	ldrd	r2, r3, [r1]
    c432:	and.w	r5, r4, #3
    c436:	rsb	r0, r4, #0
    c43a:	mov.w	r5, r5, lsl #3
    c43e:	tst.w	r4, #4
    c442:	pld	[r1, #64]	; 0x40
    c446:	lsl.w	r5, ip, r5
    c44a:	orn	r2, r2, r5
    c44e:	itt	ne
    c450:	ornne	r3, r3, r5
    c454:	movne	r2, ip
    c456:	mov.w	r4, #0
    c45a:	b.n	c3b0 <strlen+0x30>

0000c45c <strncmp>:
    c45c:	cmp	r2, #0
    c45e:	beq.n	c4e4 <strncmp+0x88>
    c460:	orr.w	r3, r0, r1
    c464:	ands.w	r3, r3, #3
    c468:	push	{r4, r5, r6, r7}
    c46a:	bne.n	c4b8 <strncmp+0x5c>
    c46c:	cmp	r2, #3
    c46e:	bls.n	c4b8 <strncmp+0x5c>
    c470:	ldr	r4, [r0, #0]
    c472:	ldr	r5, [r1, #0]
    c474:	cmp	r4, r5
    c476:	bne.n	c4b8 <strncmp+0x5c>
    c478:	subs	r2, #4
    c47a:	beq.n	c4e8 <strncmp+0x8c>
    c47c:	sub.w	r5, r4, #16843009	; 0x1010101
    c480:	bic.w	r4, r5, r4
    c484:	tst.w	r4, #2155905152	; 0x80808080
    c488:	bne.n	c4ee <strncmp+0x92>
    c48a:	adds	r7, r0, #4
    c48c:	adds	r5, r1, #4
    c48e:	b.n	c4ac <strncmp+0x50>
    c490:	ldr.w	r3, [r7], #4
    c494:	ldr	r6, [r1, #0]
    c496:	sub.w	r4, r3, #16843009	; 0x1010101
    c49a:	cmp	r3, r6
    c49c:	bic.w	r4, r4, r3
    c4a0:	bne.n	c4b8 <strncmp+0x5c>
    c4a2:	subs	r2, #4
    c4a4:	beq.n	c4e8 <strncmp+0x8c>
    c4a6:	tst.w	r4, #2155905152	; 0x80808080
    c4aa:	bne.n	c4f4 <strncmp+0x98>
    c4ac:	cmp	r2, #3
    c4ae:	mov	r1, r5
    c4b0:	mov	r0, r7
    c4b2:	add.w	r5, r5, #4
    c4b6:	bhi.n	c490 <strncmp+0x34>
    c4b8:	ldrb	r3, [r0, #0]
    c4ba:	ldrb	r4, [r1, #0]
    c4bc:	cmp	r4, r3
    c4be:	add.w	r2, r2, #4294967295
    c4c2:	bne.n	c4de <strncmp+0x82>
    c4c4:	cbz	r2, c4e8 <strncmp+0x8c>
    c4c6:	cbnz	r4, c4ce <strncmp+0x72>
    c4c8:	b.n	c4f8 <strncmp+0x9c>
    c4ca:	cbz	r2, c4e8 <strncmp+0x8c>
    c4cc:	cbz	r3, c4ee <strncmp+0x92>
    c4ce:	ldrb.w	r3, [r0, #1]!
    c4d2:	ldrb.w	r4, [r1, #1]!
    c4d6:	cmp	r3, r4
    c4d8:	add.w	r2, r2, #4294967295
    c4dc:	beq.n	c4ca <strncmp+0x6e>
    c4de:	subs	r0, r3, r4
    c4e0:	pop	{r4, r5, r6, r7}
    c4e2:	bx	lr
    c4e4:	mov	r0, r2
    c4e6:	bx	lr
    c4e8:	mov	r0, r2
    c4ea:	pop	{r4, r5, r6, r7}
    c4ec:	bx	lr
    c4ee:	mov	r0, r3
    c4f0:	pop	{r4, r5, r6, r7}
    c4f2:	bx	lr
    c4f4:	movs	r0, #0
    c4f6:	b.n	c4e0 <strncmp+0x84>
    c4f8:	mov	r0, r4
    c4fa:	b.n	c4e0 <strncmp+0x84>

0000c4fc <_vdprintf_r>:
    c4fc:	push	{r4, r5, r6, r7, lr}
    c4fe:	sub.w	sp, sp, #532	; 0x214
    c502:	add	r5, sp, #16
    c504:	str	r3, [sp, #0]
    c506:	mov	r7, r1
    c508:	mov	r3, r2
    c50a:	mov.w	r4, #512	; 0x200
    c50e:	add	r2, sp, #12
    c510:	mov	r1, r5
    c512:	str	r4, [sp, #12]
    c514:	mov	r6, r0
    c516:	bl	cf40 <_vasnprintf_r>
    c51a:	cbz	r0, c540 <_vdprintf_r+0x44>
    c51c:	mov	r4, r0
    c51e:	mov	r2, r0
    c520:	mov	r1, r7
    c522:	ldr	r3, [sp, #12]
    c524:	mov	r0, r6
    c526:	bl	c57c <_write_r>
    c52a:	cmp	r4, r5
    c52c:	str	r0, [sp, #12]
    c52e:	beq.n	c53a <_vdprintf_r+0x3e>
    c530:	mov	r0, r6
    c532:	mov	r1, r4
    c534:	bl	c730 <_free_r>
    c538:	ldr	r0, [sp, #12]
    c53a:	add.w	sp, sp, #532	; 0x214
    c53e:	pop	{r4, r5, r6, r7, pc}
    c540:	mov.w	r0, #4294967295
    c544:	b.n	c53a <_vdprintf_r+0x3e>
    c546:	nop

0000c548 <vdprintf>:
    c548:	push	{r4}
    c54a:	ldr	r4, [pc, #16]	; (c55c <vdprintf+0x14>)
    c54c:	mov	r3, r2
    c54e:	mov	r2, r1
    c550:	mov	r1, r0
    c552:	ldr	r0, [r4, #0]
    c554:	ldr.w	r4, [sp], #4
    c558:	b.w	c4fc <_vdprintf_r>
    c55c:	.word	0x1fff0f38

0000c560 <__ascii_wctomb>:
    c560:	cbz	r1, c56c <__ascii_wctomb+0xc>
    c562:	cmp	r2, #255	; 0xff
    c564:	bhi.n	c570 <__ascii_wctomb+0x10>
    c566:	strb	r2, [r1, #0]
    c568:	movs	r0, #1
    c56a:	bx	lr
    c56c:	mov	r0, r1
    c56e:	bx	lr
    c570:	movs	r3, #138	; 0x8a
    c572:	str	r3, [r0, #0]
    c574:	mov.w	r0, #4294967295
    c578:	bx	lr
    c57a:	nop

0000c57c <_write_r>:
    c57c:	push	{r4, r5, r6, lr}
    c57e:	mov	r5, r1
    c580:	ldr	r4, [pc, #32]	; (c5a4 <_write_r+0x28>)
    c582:	mov	r1, r2
    c584:	mov	r6, r0
    c586:	mov	r2, r3
    c588:	mov	r0, r5
    c58a:	movs	r3, #0
    c58c:	str	r3, [r4, #0]
    c58e:	bl	a740 <_write>
    c592:	adds	r3, r0, #1
    c594:	beq.n	c598 <_write_r+0x1c>
    c596:	pop	{r4, r5, r6, pc}
    c598:	ldr	r3, [r4, #0]
    c59a:	cmp	r3, #0
    c59c:	beq.n	c596 <_write_r+0x1a>
    c59e:	str	r3, [r6, #0]
    c5a0:	pop	{r4, r5, r6, pc}
    c5a2:	nop
    c5a4:	.word	0x1fff2098

0000c5a8 <__register_exitproc>:
    c5a8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c5ac:	ldr	r4, [pc, #148]	; (c644 <__register_exitproc+0x9c>)
    c5ae:	ldr	r5, [r4, #0]
    c5b0:	ldr.w	r4, [r5, #328]	; 0x148
    c5b4:	mov	r6, r0
    c5b6:	mov	r8, r1
    c5b8:	mov	sl, r2
    c5ba:	mov	r9, r3
    c5bc:	cbz	r4, c630 <__register_exitproc+0x88>
    c5be:	ldr	r0, [r4, #4]
    c5c0:	cmp	r0, #31
    c5c2:	bgt.n	c5f4 <__register_exitproc+0x4c>
    c5c4:	adds	r3, r0, #1
    c5c6:	cbz	r6, c5e6 <__register_exitproc+0x3e>
    c5c8:	add.w	r5, r4, r0, lsl #2
    c5cc:	movs	r2, #1
    c5ce:	str.w	sl, [r5, #136]	; 0x88
    c5d2:	ldr.w	r1, [r4, #392]	; 0x188
    c5d6:	lsls	r2, r0
    c5d8:	orrs	r1, r2
    c5da:	cmp	r6, #2
    c5dc:	str.w	r1, [r4, #392]	; 0x188
    c5e0:	str.w	r9, [r5, #264]	; 0x108
    c5e4:	beq.n	c624 <__register_exitproc+0x7c>
    c5e6:	adds	r0, #2
    c5e8:	str	r3, [r4, #4]
    c5ea:	str.w	r8, [r4, r0, lsl #2]
    c5ee:	movs	r0, #0
    c5f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c5f4:	ldr	r3, [pc, #80]	; (c648 <__register_exitproc+0xa0>)
    c5f6:	cbz	r3, c63a <__register_exitproc+0x92>
    c5f8:	mov.w	r0, #400	; 0x190
    c5fc:	bl	b5dc <malloc>
    c600:	mov	r4, r0
    c602:	cbz	r0, c63a <__register_exitproc+0x92>
    c604:	ldr.w	r3, [r5, #328]	; 0x148
    c608:	movs	r7, #0
    c60a:	stmia.w	r0, {r3, r7}
    c60e:	str.w	r4, [r5, #328]	; 0x148
    c612:	mov	r0, r7
    c614:	movs	r3, #1
    c616:	str.w	r7, [r4, #392]	; 0x188
    c61a:	str.w	r7, [r4, #396]	; 0x18c
    c61e:	cmp	r6, #0
    c620:	beq.n	c5e6 <__register_exitproc+0x3e>
    c622:	b.n	c5c8 <__register_exitproc+0x20>
    c624:	ldr.w	r1, [r4, #396]	; 0x18c
    c628:	orrs	r2, r1
    c62a:	str.w	r2, [r4, #396]	; 0x18c
    c62e:	b.n	c5e6 <__register_exitproc+0x3e>
    c630:	add.w	r4, r5, #332	; 0x14c
    c634:	str.w	r4, [r5, #328]	; 0x148
    c638:	b.n	c5be <__register_exitproc+0x16>
    c63a:	mov.w	r0, #4294967295
    c63e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c642:	nop
    c644:	.word	0x0000ff04
    c648:	.word	0x0000b5dd

0000c64c <register_fini>:
    c64c:	ldr	r3, [pc, #8]	; (c658 <register_fini+0xc>)
    c64e:	cbz	r3, c656 <register_fini+0xa>
    c650:	ldr	r0, [pc, #8]	; (c65c <register_fini+0x10>)
    c652:	b.w	c660 <atexit>
    c656:	bx	lr
    c658:	.word	0x00000000
    c65c:	.word	0x0000c66d

0000c660 <atexit>:
    c660:	movs	r3, #0
    c662:	mov	r1, r0
    c664:	mov	r2, r3
    c666:	mov	r0, r3
    c668:	b.w	c5a8 <__register_exitproc>

0000c66c <__libc_fini_array>:
    c66c:	push	{r3, r4, r5, lr}
    c66e:	ldr	r5, [pc, #28]	; (c68c <__libc_fini_array+0x20>)
    c670:	ldr	r4, [pc, #28]	; (c690 <__libc_fini_array+0x24>)
    c672:	subs	r4, r5, r4
    c674:	asrs	r4, r4, #2
    c676:	beq.n	c684 <__libc_fini_array+0x18>
    c678:	subs	r4, #1
    c67a:	ldr.w	r3, [r5, #-4]!
    c67e:	blx	r3
    c680:	cmp	r4, #0
    c682:	bne.n	c678 <__libc_fini_array+0xc>
    c684:	ldmia.w	sp!, {r3, r4, r5, lr}
    c688:	b.w	101ac <__init_array_end>
	...

0000c694 <_malloc_trim_r>:
    c694:	push	{r3, r4, r5, r6, r7, lr}
    c696:	ldr	r7, [pc, #140]	; (c724 <_malloc_trim_r+0x90>)
    c698:	mov	r4, r1
    c69a:	mov	r6, r0
    c69c:	bl	be08 <__malloc_lock>
    c6a0:	ldr	r3, [r7, #8]
    c6a2:	ldr	r5, [r3, #4]
    c6a4:	bic.w	r5, r5, #3
    c6a8:	subs	r1, r5, r4
    c6aa:	addw	r1, r1, #4079	; 0xfef
    c6ae:	bic.w	r1, r1, #4080	; 0xff0
    c6b2:	bic.w	r1, r1, #15
    c6b6:	sub.w	r4, r1, #4096	; 0x1000
    c6ba:	cmp.w	r4, #4096	; 0x1000
    c6be:	blt.n	c6d0 <_malloc_trim_r+0x3c>
    c6c0:	movs	r1, #0
    c6c2:	mov	r0, r6
    c6c4:	bl	c1f0 <_sbrk_r>
    c6c8:	ldr	r3, [r7, #8]
    c6ca:	add	r3, r5
    c6cc:	cmp	r0, r3
    c6ce:	beq.n	c6da <_malloc_trim_r+0x46>
    c6d0:	mov	r0, r6
    c6d2:	bl	be0c <__malloc_unlock>
    c6d6:	movs	r0, #0
    c6d8:	pop	{r3, r4, r5, r6, r7, pc}
    c6da:	negs	r1, r4
    c6dc:	mov	r0, r6
    c6de:	bl	c1f0 <_sbrk_r>
    c6e2:	adds	r0, #1
    c6e4:	beq.n	c702 <_malloc_trim_r+0x6e>
    c6e6:	ldr	r3, [pc, #64]	; (c728 <_malloc_trim_r+0x94>)
    c6e8:	ldr	r2, [r7, #8]
    c6ea:	ldr	r1, [r3, #0]
    c6ec:	subs	r5, r5, r4
    c6ee:	orr.w	r5, r5, #1
    c6f2:	mov	r0, r6
    c6f4:	subs	r1, r1, r4
    c6f6:	str	r5, [r2, #4]
    c6f8:	str	r1, [r3, #0]
    c6fa:	bl	be0c <__malloc_unlock>
    c6fe:	movs	r0, #1
    c700:	pop	{r3, r4, r5, r6, r7, pc}
    c702:	movs	r1, #0
    c704:	mov	r0, r6
    c706:	bl	c1f0 <_sbrk_r>
    c70a:	ldr	r2, [r7, #8]
    c70c:	subs	r3, r0, r2
    c70e:	cmp	r3, #15
    c710:	ble.n	c6d0 <_malloc_trim_r+0x3c>
    c712:	ldr	r4, [pc, #24]	; (c72c <_malloc_trim_r+0x98>)
    c714:	ldr	r1, [pc, #16]	; (c728 <_malloc_trim_r+0x94>)
    c716:	ldr	r4, [r4, #0]
    c718:	orr.w	r3, r3, #1
    c71c:	subs	r0, r0, r4
    c71e:	str	r3, [r2, #4]
    c720:	str	r0, [r1, #0]
    c722:	b.n	c6d0 <_malloc_trim_r+0x3c>
    c724:	.word	0x1fff10a8
    c728:	.word	0x1fff2058
    c72c:	.word	0x1fff14b4

0000c730 <_free_r>:
    c730:	cmp	r1, #0
    c732:	beq.n	c7c0 <_free_r+0x90>
    c734:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c738:	mov	r5, r1
    c73a:	mov	r8, r0
    c73c:	bl	be08 <__malloc_lock>
    c740:	ldr.w	r7, [r5, #-4]
    c744:	ldr	r1, [pc, #424]	; (c8f0 <_free_r+0x1c0>)
    c746:	bic.w	r3, r7, #1
    c74a:	sub.w	r4, r5, #8
    c74e:	adds	r2, r4, r3
    c750:	ldr	r6, [r1, #8]
    c752:	ldr	r0, [r2, #4]
    c754:	cmp	r2, r6
    c756:	bic.w	r0, r0, #3
    c75a:	beq.n	c822 <_free_r+0xf2>
    c75c:	lsls	r6, r7, #31
    c75e:	str	r0, [r2, #4]
    c760:	bmi.n	c77a <_free_r+0x4a>
    c762:	ldr.w	r7, [r5, #-8]
    c766:	subs	r4, r4, r7
    c768:	add.w	lr, r1, #8
    c76c:	ldr	r5, [r4, #8]
    c76e:	cmp	r5, lr
    c770:	add	r3, r7
    c772:	beq.n	c854 <_free_r+0x124>
    c774:	ldr	r7, [r4, #12]
    c776:	str	r7, [r5, #12]
    c778:	str	r5, [r7, #8]
    c77a:	adds	r5, r2, r0
    c77c:	ldr	r5, [r5, #4]
    c77e:	lsls	r5, r5, #31
    c780:	bpl.n	c808 <_free_r+0xd8>
    c782:	orr.w	r2, r3, #1
    c786:	str	r2, [r4, #4]
    c788:	str	r3, [r4, r3]
    c78a:	cmp.w	r3, #512	; 0x200
    c78e:	bcs.n	c7c2 <_free_r+0x92>
    c790:	lsrs	r3, r3, #3
    c792:	adds	r2, r3, #1
    c794:	ldr	r5, [r1, #4]
    c796:	ldr.w	r7, [r1, r2, lsl #3]
    c79a:	str	r7, [r4, #8]
    c79c:	movs	r0, #1
    c79e:	asrs	r3, r3, #2
    c7a0:	lsl.w	r3, r0, r3
    c7a4:	add.w	r0, r1, r2, lsl #3
    c7a8:	orrs	r5, r3
    c7aa:	subs	r0, #8
    c7ac:	str	r0, [r4, #12]
    c7ae:	str	r5, [r1, #4]
    c7b0:	str.w	r4, [r1, r2, lsl #3]
    c7b4:	str	r4, [r7, #12]
    c7b6:	mov	r0, r8
    c7b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c7bc:	b.w	be0c <__malloc_unlock>
    c7c0:	bx	lr
    c7c2:	lsrs	r2, r3, #9
    c7c4:	cmp	r2, #4
    c7c6:	bhi.n	c870 <_free_r+0x140>
    c7c8:	lsrs	r2, r3, #6
    c7ca:	add.w	r7, r2, #57	; 0x39
    c7ce:	lsls	r7, r7, #1
    c7d0:	add.w	r5, r2, #56	; 0x38
    c7d4:	add.w	r0, r1, r7, lsl #2
    c7d8:	ldr.w	r2, [r1, r7, lsl #2]
    c7dc:	ldr	r1, [pc, #272]	; (c8f0 <_free_r+0x1c0>)
    c7de:	subs	r0, #8
    c7e0:	cmp	r0, r2
    c7e2:	beq.n	c880 <_free_r+0x150>
    c7e4:	ldr	r1, [r2, #4]
    c7e6:	bic.w	r1, r1, #3
    c7ea:	cmp	r3, r1
    c7ec:	bcs.n	c7f4 <_free_r+0xc4>
    c7ee:	ldr	r2, [r2, #8]
    c7f0:	cmp	r0, r2
    c7f2:	bne.n	c7e4 <_free_r+0xb4>
    c7f4:	ldr	r0, [r2, #12]
    c7f6:	str	r0, [r4, #12]
    c7f8:	str	r2, [r4, #8]
    c7fa:	str	r4, [r0, #8]
    c7fc:	str	r4, [r2, #12]
    c7fe:	mov	r0, r8
    c800:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c804:	b.w	be0c <__malloc_unlock>
    c808:	ldr	r5, [r2, #8]
    c80a:	ldr	r7, [pc, #232]	; (c8f4 <_free_r+0x1c4>)
    c80c:	cmp	r5, r7
    c80e:	add	r3, r0
    c810:	beq.n	c892 <_free_r+0x162>
    c812:	ldr	r0, [r2, #12]
    c814:	str	r0, [r5, #12]
    c816:	orr.w	r2, r3, #1
    c81a:	str	r5, [r0, #8]
    c81c:	str	r2, [r4, #4]
    c81e:	str	r3, [r4, r3]
    c820:	b.n	c78a <_free_r+0x5a>
    c822:	lsls	r7, r7, #31
    c824:	add	r3, r0
    c826:	bmi.n	c838 <_free_r+0x108>
    c828:	ldr.w	r2, [r5, #-8]
    c82c:	subs	r4, r4, r2
    c82e:	add	r3, r2
    c830:	ldr	r0, [r4, #8]
    c832:	ldr	r2, [r4, #12]
    c834:	str	r2, [r0, #12]
    c836:	str	r0, [r2, #8]
    c838:	ldr	r2, [pc, #188]	; (c8f8 <_free_r+0x1c8>)
    c83a:	ldr	r2, [r2, #0]
    c83c:	orr.w	r0, r3, #1
    c840:	cmp	r3, r2
    c842:	str	r0, [r4, #4]
    c844:	str	r4, [r1, #8]
    c846:	bcc.n	c7b6 <_free_r+0x86>
    c848:	ldr	r3, [pc, #176]	; (c8fc <_free_r+0x1cc>)
    c84a:	mov	r0, r8
    c84c:	ldr	r1, [r3, #0]
    c84e:	bl	c694 <_malloc_trim_r>
    c852:	b.n	c7b6 <_free_r+0x86>
    c854:	adds	r1, r2, r0
    c856:	ldr	r1, [r1, #4]
    c858:	lsls	r1, r1, #31
    c85a:	bmi.n	c8e6 <_free_r+0x1b6>
    c85c:	ldr	r1, [r2, #8]
    c85e:	ldr	r2, [r2, #12]
    c860:	str	r2, [r1, #12]
    c862:	add	r3, r0
    c864:	orr.w	r0, r3, #1
    c868:	str	r1, [r2, #8]
    c86a:	str	r0, [r4, #4]
    c86c:	str	r3, [r4, r3]
    c86e:	b.n	c7b6 <_free_r+0x86>
    c870:	cmp	r2, #20
    c872:	bhi.n	c8a4 <_free_r+0x174>
    c874:	add.w	r7, r2, #92	; 0x5c
    c878:	lsls	r7, r7, #1
    c87a:	add.w	r5, r2, #91	; 0x5b
    c87e:	b.n	c7d4 <_free_r+0xa4>
    c880:	asrs	r2, r5, #2
    c882:	ldr	r3, [r1, #4]
    c884:	movs	r5, #1
    c886:	lsl.w	r2, r5, r2
    c88a:	orrs	r3, r2
    c88c:	str	r3, [r1, #4]
    c88e:	mov	r2, r0
    c890:	b.n	c7f6 <_free_r+0xc6>
    c892:	orr.w	r2, r3, #1
    c896:	str	r4, [r1, #20]
    c898:	str	r4, [r1, #16]
    c89a:	str	r5, [r4, #12]
    c89c:	str	r5, [r4, #8]
    c89e:	str	r2, [r4, #4]
    c8a0:	str	r3, [r4, r3]
    c8a2:	b.n	c7b6 <_free_r+0x86>
    c8a4:	cmp	r2, #84	; 0x54
    c8a6:	bhi.n	c8b6 <_free_r+0x186>
    c8a8:	lsrs	r2, r3, #12
    c8aa:	add.w	r7, r2, #111	; 0x6f
    c8ae:	lsls	r7, r7, #1
    c8b0:	add.w	r5, r2, #110	; 0x6e
    c8b4:	b.n	c7d4 <_free_r+0xa4>
    c8b6:	cmp.w	r2, #340	; 0x154
    c8ba:	bhi.n	c8ca <_free_r+0x19a>
    c8bc:	lsrs	r2, r3, #15
    c8be:	add.w	r7, r2, #120	; 0x78
    c8c2:	lsls	r7, r7, #1
    c8c4:	add.w	r5, r2, #119	; 0x77
    c8c8:	b.n	c7d4 <_free_r+0xa4>
    c8ca:	movw	r0, #1364	; 0x554
    c8ce:	cmp	r2, r0
    c8d0:	bhi.n	c8e0 <_free_r+0x1b0>
    c8d2:	lsrs	r2, r3, #18
    c8d4:	add.w	r7, r2, #125	; 0x7d
    c8d8:	lsls	r7, r7, #1
    c8da:	add.w	r5, r2, #124	; 0x7c
    c8de:	b.n	c7d4 <_free_r+0xa4>
    c8e0:	movs	r7, #254	; 0xfe
    c8e2:	movs	r5, #126	; 0x7e
    c8e4:	b.n	c7d4 <_free_r+0xa4>
    c8e6:	orr.w	r2, r3, #1
    c8ea:	str	r2, [r4, #4]
    c8ec:	str	r3, [r4, r3]
    c8ee:	b.n	c7b6 <_free_r+0x86>
    c8f0:	.word	0x1fff10a8
    c8f4:	.word	0x1fff10b0
    c8f8:	.word	0x1fff14b0
    c8fc:	.word	0x1fff2054

0000c900 <_localeconv_r>:
    c900:	ldr	r2, [pc, #16]	; (c914 <_localeconv_r+0x14>)
    c902:	ldr	r3, [pc, #20]	; (c918 <_localeconv_r+0x18>)
    c904:	ldr	r2, [r2, #0]
    c906:	ldr	r0, [r2, #52]	; 0x34
    c908:	cmp	r0, #0
    c90a:	it	eq
    c90c:	moveq	r0, r3
    c90e:	adds	r0, #240	; 0xf0
    c910:	bx	lr
    c912:	nop
    c914:	.word	0x1fff0f38
    c918:	.word	0x1fff0f3c

0000c91c <_Balloc>:
    c91c:	ldr	r3, [r0, #76]	; 0x4c
    c91e:	push	{r4, r5, r6, lr}
    c920:	mov	r5, r0
    c922:	mov	r4, r1
    c924:	cbz	r3, c93a <_Balloc+0x1e>
    c926:	ldr.w	r0, [r3, r4, lsl #2]
    c92a:	cbz	r0, c94e <_Balloc+0x32>
    c92c:	ldr	r2, [r0, #0]
    c92e:	str.w	r2, [r3, r4, lsl #2]
    c932:	movs	r3, #0
    c934:	str	r3, [r0, #16]
    c936:	str	r3, [r0, #12]
    c938:	pop	{r4, r5, r6, pc}
    c93a:	movs	r2, #33	; 0x21
    c93c:	movs	r1, #4
    c93e:	bl	cfa0 <_calloc_r>
    c942:	str	r0, [r5, #76]	; 0x4c
    c944:	mov	r3, r0
    c946:	cmp	r0, #0
    c948:	bne.n	c926 <_Balloc+0xa>
    c94a:	movs	r0, #0
    c94c:	pop	{r4, r5, r6, pc}
    c94e:	movs	r1, #1
    c950:	lsl.w	r6, r1, r4
    c954:	adds	r2, r6, #5
    c956:	mov	r0, r5
    c958:	lsls	r2, r2, #2
    c95a:	bl	cfa0 <_calloc_r>
    c95e:	cmp	r0, #0
    c960:	beq.n	c94a <_Balloc+0x2e>
    c962:	str	r4, [r0, #4]
    c964:	str	r6, [r0, #8]
    c966:	b.n	c932 <_Balloc+0x16>

0000c968 <_Bfree>:
    c968:	cbz	r1, c978 <_Bfree+0x10>
    c96a:	ldr	r3, [r0, #76]	; 0x4c
    c96c:	ldr	r2, [r1, #4]
    c96e:	ldr.w	r0, [r3, r2, lsl #2]
    c972:	str	r0, [r1, #0]
    c974:	str.w	r1, [r3, r2, lsl #2]
    c978:	bx	lr
    c97a:	nop

0000c97c <__multadd>:
    c97c:	push	{r4, r5, r6, r7, lr}
    c97e:	ldr	r4, [r1, #16]
    c980:	sub	sp, #12
    c982:	mov	r5, r1
    c984:	mov	r6, r0
    c986:	add.w	lr, r1, #20
    c98a:	movs	r7, #0
    c98c:	ldr.w	r0, [lr]
    c990:	uxth	r1, r0
    c992:	mla	r1, r2, r1, r3
    c996:	lsrs	r3, r1, #16
    c998:	lsrs	r0, r0, #16
    c99a:	mla	r3, r2, r0, r3
    c99e:	uxth	r1, r1
    c9a0:	adds	r7, #1
    c9a2:	add.w	r1, r1, r3, lsl #16
    c9a6:	cmp	r4, r7
    c9a8:	str.w	r1, [lr], #4
    c9ac:	mov.w	r3, r3, lsr #16
    c9b0:	bgt.n	c98c <__multadd+0x10>
    c9b2:	cbz	r3, c9c4 <__multadd+0x48>
    c9b4:	ldr	r2, [r5, #8]
    c9b6:	cmp	r4, r2
    c9b8:	bge.n	c9ca <__multadd+0x4e>
    c9ba:	add.w	r2, r5, r4, lsl #2
    c9be:	adds	r4, #1
    c9c0:	str	r3, [r2, #20]
    c9c2:	str	r4, [r5, #16]
    c9c4:	mov	r0, r5
    c9c6:	add	sp, #12
    c9c8:	pop	{r4, r5, r6, r7, pc}
    c9ca:	ldr	r1, [r5, #4]
    c9cc:	str	r3, [sp, #4]
    c9ce:	adds	r1, #1
    c9d0:	mov	r0, r6
    c9d2:	bl	c91c <_Balloc>
    c9d6:	ldr	r2, [r5, #16]
    c9d8:	adds	r2, #2
    c9da:	add.w	r1, r5, #12
    c9de:	mov	r7, r0
    c9e0:	lsls	r2, r2, #2
    c9e2:	adds	r0, #12
    c9e4:	bl	8f84 <memcpy>
    c9e8:	ldr	r2, [r6, #76]	; 0x4c
    c9ea:	ldr	r1, [r5, #4]
    c9ec:	ldr	r3, [sp, #4]
    c9ee:	ldr.w	r0, [r2, r1, lsl #2]
    c9f2:	str	r0, [r5, #0]
    c9f4:	str.w	r5, [r2, r1, lsl #2]
    c9f8:	mov	r5, r7
    c9fa:	b.n	c9ba <__multadd+0x3e>

0000c9fc <__hi0bits>:
    c9fc:	lsrs	r3, r0, #16
    c9fe:	lsls	r3, r3, #16
    ca00:	cbnz	r3, ca30 <__hi0bits+0x34>
    ca02:	lsls	r0, r0, #16
    ca04:	movs	r3, #16
    ca06:	tst.w	r0, #4278190080	; 0xff000000
    ca0a:	itt	eq
    ca0c:	lsleq	r0, r0, #8
    ca0e:	addeq	r3, #8
    ca10:	tst.w	r0, #4026531840	; 0xf0000000
    ca14:	itt	eq
    ca16:	lsleq	r0, r0, #4
    ca18:	addeq	r3, #4
    ca1a:	tst.w	r0, #3221225472	; 0xc0000000
    ca1e:	itt	eq
    ca20:	lsleq	r0, r0, #2
    ca22:	addeq	r3, #2
    ca24:	cmp	r0, #0
    ca26:	blt.n	ca38 <__hi0bits+0x3c>
    ca28:	lsls	r2, r0, #1
    ca2a:	bmi.n	ca34 <__hi0bits+0x38>
    ca2c:	movs	r0, #32
    ca2e:	bx	lr
    ca30:	movs	r3, #0
    ca32:	b.n	ca06 <__hi0bits+0xa>
    ca34:	adds	r0, r3, #1
    ca36:	bx	lr
    ca38:	mov	r0, r3
    ca3a:	bx	lr

0000ca3c <__lo0bits>:
    ca3c:	ldr	r3, [r0, #0]
    ca3e:	ands.w	r2, r3, #7
    ca42:	beq.n	ca54 <__lo0bits+0x18>
    ca44:	lsls	r1, r3, #31
    ca46:	bmi.n	ca8a <__lo0bits+0x4e>
    ca48:	lsls	r2, r3, #30
    ca4a:	bmi.n	ca8e <__lo0bits+0x52>
    ca4c:	lsrs	r3, r3, #2
    ca4e:	str	r3, [r0, #0]
    ca50:	movs	r0, #2
    ca52:	bx	lr
    ca54:	uxth	r1, r3
    ca56:	cbnz	r1, ca5c <__lo0bits+0x20>
    ca58:	lsrs	r3, r3, #16
    ca5a:	movs	r2, #16
    ca5c:	tst.w	r3, #255	; 0xff
    ca60:	itt	eq
    ca62:	lsreq	r3, r3, #8
    ca64:	addeq	r2, #8
    ca66:	lsls	r1, r3, #28
    ca68:	itt	eq
    ca6a:	lsreq	r3, r3, #4
    ca6c:	addeq	r2, #4
    ca6e:	lsls	r1, r3, #30
    ca70:	itt	eq
    ca72:	lsreq	r3, r3, #2
    ca74:	addeq	r2, #2
    ca76:	lsls	r1, r3, #31
    ca78:	bmi.n	ca84 <__lo0bits+0x48>
    ca7a:	lsrs	r3, r3, #1
    ca7c:	bne.n	ca82 <__lo0bits+0x46>
    ca7e:	movs	r0, #32
    ca80:	bx	lr
    ca82:	adds	r2, #1
    ca84:	str	r3, [r0, #0]
    ca86:	mov	r0, r2
    ca88:	bx	lr
    ca8a:	movs	r0, #0
    ca8c:	bx	lr
    ca8e:	lsrs	r3, r3, #1
    ca90:	str	r3, [r0, #0]
    ca92:	movs	r0, #1
    ca94:	bx	lr
    ca96:	nop

0000ca98 <__i2b>:
    ca98:	push	{r4, lr}
    ca9a:	mov	r4, r1
    ca9c:	movs	r1, #1
    ca9e:	bl	c91c <_Balloc>
    caa2:	movs	r2, #1
    caa4:	str	r4, [r0, #20]
    caa6:	str	r2, [r0, #16]
    caa8:	pop	{r4, pc}
    caaa:	nop

0000caac <__multiply>:
    caac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cab0:	ldr	r5, [r1, #16]
    cab2:	ldr	r7, [r2, #16]
    cab4:	cmp	r5, r7
    cab6:	sub	sp, #12
    cab8:	mov	r4, r1
    caba:	mov	r6, r2
    cabc:	bge.n	cac8 <__multiply+0x1c>
    cabe:	mov	r2, r5
    cac0:	mov	r4, r6
    cac2:	mov	r5, r7
    cac4:	mov	r6, r1
    cac6:	mov	r7, r2
    cac8:	ldr	r3, [r4, #8]
    caca:	ldr	r1, [r4, #4]
    cacc:	add.w	r8, r5, r7
    cad0:	cmp	r8, r3
    cad2:	it	gt
    cad4:	addgt	r1, #1
    cad6:	bl	c91c <_Balloc>
    cada:	add.w	ip, r0, #20
    cade:	add.w	r9, ip, r8, lsl #2
    cae2:	cmp	ip, r9
    cae4:	str	r0, [sp, #0]
    cae6:	bcs.n	caf4 <__multiply+0x48>
    cae8:	mov	r3, ip
    caea:	movs	r1, #0
    caec:	str.w	r1, [r3], #4
    caf0:	cmp	r9, r3
    caf2:	bhi.n	caec <__multiply+0x40>
    caf4:	add.w	r2, r6, #20
    caf8:	add.w	sl, r2, r7, lsl #2
    cafc:	add.w	r3, r4, #20
    cb00:	cmp	r2, sl
    cb02:	add.w	lr, r3, r5, lsl #2
    cb06:	bcs.n	cbb2 <__multiply+0x106>
    cb08:	str.w	r9, [sp, #4]
    cb0c:	mov	r9, r3
    cb0e:	ldr.w	r3, [r2], #4
    cb12:	uxth.w	fp, r3
    cb16:	cmp.w	fp, #0
    cb1a:	beq.n	cb5e <__multiply+0xb2>
    cb1c:	movs	r0, #0
    cb1e:	mov	r7, r9
    cb20:	mov	r6, ip
    cb22:	mov	r5, r0
    cb24:	b.n	cb28 <__multiply+0x7c>
    cb26:	mov	r6, r3
    cb28:	ldr.w	r4, [r7], #4
    cb2c:	ldr	r0, [r6, #0]
    cb2e:	uxth	r1, r4
    cb30:	uxth	r3, r0
    cb32:	mla	r1, fp, r1, r3
    cb36:	lsrs	r4, r4, #16
    cb38:	lsrs	r0, r0, #16
    cb3a:	adds	r3, r1, r5
    cb3c:	mla	r0, fp, r4, r0
    cb40:	add.w	r0, r0, r3, lsr #16
    cb44:	uxth	r1, r3
    cb46:	mov	r3, r6
    cb48:	orr.w	r1, r1, r0, lsl #16
    cb4c:	cmp	lr, r7
    cb4e:	mov.w	r5, r0, lsr #16
    cb52:	str.w	r1, [r3], #4
    cb56:	bhi.n	cb26 <__multiply+0x7a>
    cb58:	str	r5, [r6, #4]
    cb5a:	ldr.w	r3, [r2, #-4]
    cb5e:	movs.w	fp, r3, lsr #16
    cb62:	beq.n	cba6 <__multiply+0xfa>
    cb64:	ldr.w	r3, [ip]
    cb68:	mov	r7, ip
    cb6a:	mov	r0, r3
    cb6c:	mov	r5, r9
    cb6e:	movs	r1, #0
    cb70:	b.n	cb74 <__multiply+0xc8>
    cb72:	mov	r7, r6
    cb74:	ldrh	r4, [r5, #0]
    cb76:	lsrs	r0, r0, #16
    cb78:	mla	r0, fp, r4, r0
    cb7c:	add	r1, r0
    cb7e:	uxth	r4, r3
    cb80:	mov	r6, r7
    cb82:	orr.w	r3, r4, r1, lsl #16
    cb86:	str.w	r3, [r6], #4
    cb8a:	ldr	r0, [r7, #4]
    cb8c:	ldr.w	r4, [r5], #4
    cb90:	uxth	r3, r0
    cb92:	lsrs	r4, r4, #16
    cb94:	mla	r4, fp, r4, r3
    cb98:	add.w	r3, r4, r1, lsr #16
    cb9c:	cmp	lr, r5
    cb9e:	mov.w	r1, r3, lsr #16
    cba2:	bhi.n	cb72 <__multiply+0xc6>
    cba4:	str	r3, [r7, #4]
    cba6:	cmp	sl, r2
    cba8:	add.w	ip, ip, #4
    cbac:	bhi.n	cb0e <__multiply+0x62>
    cbae:	ldr.w	r9, [sp, #4]
    cbb2:	cmp.w	r8, #0
    cbb6:	ble.n	cbd0 <__multiply+0x124>
    cbb8:	ldr.w	r3, [r9, #-4]
    cbbc:	sub.w	r9, r9, #4
    cbc0:	cbz	r3, cbca <__multiply+0x11e>
    cbc2:	b.n	cbd0 <__multiply+0x124>
    cbc4:	ldr.w	r3, [r9, #-4]!
    cbc8:	cbnz	r3, cbd0 <__multiply+0x124>
    cbca:	subs.w	r8, r8, #1
    cbce:	bne.n	cbc4 <__multiply+0x118>
    cbd0:	ldr	r0, [sp, #0]
    cbd2:	str.w	r8, [r0, #16]
    cbd6:	add	sp, #12
    cbd8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000cbdc <__pow5mult>:
    cbdc:	ands.w	r3, r2, #3
    cbe0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cbe4:	mov	r4, r2
    cbe6:	mov	r7, r0
    cbe8:	bne.n	cc48 <__pow5mult+0x6c>
    cbea:	mov	r6, r1
    cbec:	asrs	r4, r4, #2
    cbee:	beq.n	cc2a <__pow5mult+0x4e>
    cbf0:	ldr	r5, [r7, #72]	; 0x48
    cbf2:	cbz	r5, cc5a <__pow5mult+0x7e>
    cbf4:	lsls	r3, r4, #31
    cbf6:	mov.w	r8, #0
    cbfa:	bmi.n	cc0a <__pow5mult+0x2e>
    cbfc:	asrs	r4, r4, #1
    cbfe:	beq.n	cc2a <__pow5mult+0x4e>
    cc00:	ldr	r0, [r5, #0]
    cc02:	cbz	r0, cc30 <__pow5mult+0x54>
    cc04:	mov	r5, r0
    cc06:	lsls	r3, r4, #31
    cc08:	bpl.n	cbfc <__pow5mult+0x20>
    cc0a:	mov	r2, r5
    cc0c:	mov	r1, r6
    cc0e:	mov	r0, r7
    cc10:	bl	caac <__multiply>
    cc14:	cbz	r6, cc44 <__pow5mult+0x68>
    cc16:	ldr	r2, [r6, #4]
    cc18:	ldr	r3, [r7, #76]	; 0x4c
    cc1a:	asrs	r4, r4, #1
    cc1c:	ldr.w	r1, [r3, r2, lsl #2]
    cc20:	str	r1, [r6, #0]
    cc22:	str.w	r6, [r3, r2, lsl #2]
    cc26:	mov	r6, r0
    cc28:	bne.n	cc00 <__pow5mult+0x24>
    cc2a:	mov	r0, r6
    cc2c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cc30:	mov	r2, r5
    cc32:	mov	r1, r5
    cc34:	mov	r0, r7
    cc36:	bl	caac <__multiply>
    cc3a:	str	r0, [r5, #0]
    cc3c:	str.w	r8, [r0]
    cc40:	mov	r5, r0
    cc42:	b.n	cc06 <__pow5mult+0x2a>
    cc44:	mov	r6, r0
    cc46:	b.n	cbfc <__pow5mult+0x20>
    cc48:	subs	r2, r3, #1
    cc4a:	ldr	r5, [pc, #44]	; (cc78 <__pow5mult+0x9c>)
    cc4c:	movs	r3, #0
    cc4e:	ldr.w	r2, [r5, r2, lsl #2]
    cc52:	bl	c97c <__multadd>
    cc56:	mov	r6, r0
    cc58:	b.n	cbec <__pow5mult+0x10>
    cc5a:	movs	r1, #1
    cc5c:	mov	r0, r7
    cc5e:	bl	c91c <_Balloc>
    cc62:	movw	r1, #625	; 0x271
    cc66:	movs	r2, #1
    cc68:	movs	r3, #0
    cc6a:	str	r1, [r0, #20]
    cc6c:	str	r2, [r0, #16]
    cc6e:	mov	r5, r0
    cc70:	str	r0, [r7, #72]	; 0x48
    cc72:	str	r3, [r0, #0]
    cc74:	b.n	cbf4 <__pow5mult+0x18>
    cc76:	nop
    cc78:	.word	0x00010110

0000cc7c <__lshift>:
    cc7c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cc80:	mov	r9, r2
    cc82:	ldr	r2, [r1, #16]
    cc84:	ldr	r3, [r1, #8]
    cc86:	mov.w	r4, r9, asr #5
    cc8a:	add.w	r8, r4, r2
    cc8e:	add.w	r5, r8, #1
    cc92:	cmp	r5, r3
    cc94:	mov	r6, r1
    cc96:	mov	sl, r0
    cc98:	ldr	r1, [r1, #4]
    cc9a:	ble.n	cca6 <__lshift+0x2a>
    cc9c:	lsls	r3, r3, #1
    cc9e:	cmp	r5, r3
    cca0:	add.w	r1, r1, #1
    cca4:	bgt.n	cc9c <__lshift+0x20>
    cca6:	mov	r0, sl
    cca8:	bl	c91c <_Balloc>
    ccac:	cmp	r4, #0
    ccae:	add.w	r2, r0, #20
    ccb2:	ble.n	cd26 <__lshift+0xaa>
    ccb4:	add.w	r3, r2, r4, lsl #2
    ccb8:	movs	r1, #0
    ccba:	str.w	r1, [r2], #4
    ccbe:	cmp	r3, r2
    ccc0:	bne.n	ccba <__lshift+0x3e>
    ccc2:	ldr	r4, [r6, #16]
    ccc4:	add.w	r1, r6, #20
    ccc8:	ands.w	r9, r9, #31
    cccc:	add.w	lr, r1, r4, lsl #2
    ccd0:	beq.n	cd16 <__lshift+0x9a>
    ccd2:	rsb	r2, r9, #32
    ccd6:	movs	r4, #0
    ccd8:	ldr	r7, [r1, #0]
    ccda:	lsl.w	ip, r7, r9
    ccde:	orr.w	r4, ip, r4
    cce2:	mov	ip, r3
    cce4:	str.w	r4, [r3], #4
    cce8:	ldr.w	r4, [r1], #4
    ccec:	cmp	lr, r1
    ccee:	lsr.w	r4, r4, r2
    ccf2:	bhi.n	ccd8 <__lshift+0x5c>
    ccf4:	str.w	r4, [ip, #4]
    ccf8:	cbz	r4, ccfe <__lshift+0x82>
    ccfa:	add.w	r5, r8, #2
    ccfe:	ldr.w	r3, [sl, #76]	; 0x4c
    cd02:	ldr	r2, [r6, #4]
    cd04:	subs	r5, #1
    cd06:	ldr.w	r1, [r3, r2, lsl #2]
    cd0a:	str	r5, [r0, #16]
    cd0c:	str	r1, [r6, #0]
    cd0e:	str.w	r6, [r3, r2, lsl #2]
    cd12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cd16:	subs	r3, #4
    cd18:	ldr.w	r2, [r1], #4
    cd1c:	str.w	r2, [r3, #4]!
    cd20:	cmp	lr, r1
    cd22:	bhi.n	cd18 <__lshift+0x9c>
    cd24:	b.n	ccfe <__lshift+0x82>
    cd26:	mov	r3, r2
    cd28:	b.n	ccc2 <__lshift+0x46>
    cd2a:	nop

0000cd2c <__mcmp>:
    cd2c:	ldr	r2, [r0, #16]
    cd2e:	ldr	r3, [r1, #16]
    cd30:	subs	r2, r2, r3
    cd32:	bne.n	cd5c <__mcmp+0x30>
    cd34:	lsls	r3, r3, #2
    cd36:	adds	r0, #20
    cd38:	adds	r1, #20
    cd3a:	add	r1, r3
    cd3c:	push	{r4}
    cd3e:	add	r3, r0
    cd40:	b.n	cd46 <__mcmp+0x1a>
    cd42:	cmp	r0, r3
    cd44:	bcs.n	cd60 <__mcmp+0x34>
    cd46:	ldr.w	r4, [r3, #-4]!
    cd4a:	ldr.w	r2, [r1, #-4]!
    cd4e:	cmp	r4, r2
    cd50:	beq.n	cd42 <__mcmp+0x16>
    cd52:	bcc.n	cd68 <__mcmp+0x3c>
    cd54:	movs	r0, #1
    cd56:	ldr.w	r4, [sp], #4
    cd5a:	bx	lr
    cd5c:	mov	r0, r2
    cd5e:	bx	lr
    cd60:	movs	r0, #0
    cd62:	ldr.w	r4, [sp], #4
    cd66:	bx	lr
    cd68:	mov.w	r0, #4294967295
    cd6c:	b.n	cd56 <__mcmp+0x2a>
    cd6e:	nop

0000cd70 <__mdiff>:
    cd70:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cd74:	ldr	r3, [r1, #16]
    cd76:	mov	r7, r1
    cd78:	ldr	r1, [r2, #16]
    cd7a:	subs	r3, r3, r1
    cd7c:	cmp	r3, #0
    cd7e:	mov	r8, r2
    cd80:	bne.n	cdb2 <__mdiff+0x42>
    cd82:	lsls	r1, r1, #2
    cd84:	add.w	r2, r7, #20
    cd88:	add.w	r5, r8, #20
    cd8c:	adds	r3, r2, r1
    cd8e:	add	r1, r5
    cd90:	b.n	cd96 <__mdiff+0x26>
    cd92:	cmp	r2, r3
    cd94:	bcs.n	ce54 <__mdiff+0xe4>
    cd96:	ldr.w	r6, [r3, #-4]!
    cd9a:	ldr.w	r4, [r1, #-4]!
    cd9e:	cmp	r6, r4
    cda0:	beq.n	cd92 <__mdiff+0x22>
    cda2:	bcs.n	ce66 <__mdiff+0xf6>
    cda4:	mov	r3, r7
    cda6:	mov	r4, r2
    cda8:	mov	r7, r8
    cdaa:	mov.w	r9, #1
    cdae:	mov	r8, r3
    cdb0:	b.n	cdc0 <__mdiff+0x50>
    cdb2:	blt.n	ce70 <__mdiff+0x100>
    cdb4:	add.w	r5, r7, #20
    cdb8:	add.w	r4, r2, #20
    cdbc:	mov.w	r9, #0
    cdc0:	ldr	r1, [r7, #4]
    cdc2:	bl	c91c <_Balloc>
    cdc6:	ldr.w	r3, [r8, #16]
    cdca:	ldr	r6, [r7, #16]
    cdcc:	str.w	r9, [r0, #12]
    cdd0:	add.w	ip, r4, r3, lsl #2
    cdd4:	mov	lr, r4
    cdd6:	add.w	r7, r5, r6, lsl #2
    cdda:	add.w	r4, r0, #20
    cdde:	movs	r3, #0
    cde0:	ldr.w	r1, [lr], #4
    cde4:	ldr.w	r8, [r5], #4
    cde8:	uxth	r2, r1
    cdea:	uxtah	r3, r3, r8
    cdee:	lsrs	r1, r1, #16
    cdf0:	subs	r2, r3, r2
    cdf2:	rsb	r3, r1, r8, lsr #16
    cdf6:	add.w	r3, r3, r2, asr #16
    cdfa:	uxth	r2, r2
    cdfc:	orr.w	r2, r2, r3, lsl #16
    ce00:	cmp	ip, lr
    ce02:	str.w	r2, [r4], #4
    ce06:	mov.w	r3, r3, asr #16
    ce0a:	bhi.n	cde0 <__mdiff+0x70>
    ce0c:	cmp	r7, r5
    ce0e:	bls.n	ce40 <__mdiff+0xd0>
    ce10:	mov	ip, r4
    ce12:	mov	r1, r5
    ce14:	ldr.w	lr, [r1], #4
    ce18:	uxtah	r2, r3, lr
    ce1c:	asrs	r3, r2, #16
    ce1e:	add.w	r3, r3, lr, lsr #16
    ce22:	uxth	r2, r2
    ce24:	orr.w	r2, r2, r3, lsl #16
    ce28:	cmp	r7, r1
    ce2a:	str.w	r2, [ip], #4
    ce2e:	mov.w	r3, r3, asr #16
    ce32:	bhi.n	ce14 <__mdiff+0xa4>
    ce34:	mvns	r5, r5
    ce36:	add	r5, r7
    ce38:	bic.w	r5, r5, #3
    ce3c:	adds	r5, #4
    ce3e:	add	r4, r5
    ce40:	subs	r4, #4
    ce42:	cbnz	r2, ce4e <__mdiff+0xde>
    ce44:	ldr.w	r3, [r4, #-4]!
    ce48:	subs	r6, #1
    ce4a:	cmp	r3, #0
    ce4c:	beq.n	ce44 <__mdiff+0xd4>
    ce4e:	str	r6, [r0, #16]
    ce50:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ce54:	movs	r1, #0
    ce56:	bl	c91c <_Balloc>
    ce5a:	movs	r2, #1
    ce5c:	movs	r3, #0
    ce5e:	str	r2, [r0, #16]
    ce60:	str	r3, [r0, #20]
    ce62:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ce66:	mov	r4, r5
    ce68:	mov.w	r9, #0
    ce6c:	mov	r5, r2
    ce6e:	b.n	cdc0 <__mdiff+0x50>
    ce70:	mov	r3, r7
    ce72:	add.w	r4, r7, #20
    ce76:	add.w	r5, r8, #20
    ce7a:	mov	r7, r8
    ce7c:	mov.w	r9, #1
    ce80:	mov	r8, r3
    ce82:	b.n	cdc0 <__mdiff+0x50>

0000ce84 <__d2b>:
    ce84:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ce88:	vmov	r6, r7, d0
    ce8c:	sub	sp, #12
    ce8e:	mov	r8, r1
    ce90:	movs	r1, #1
    ce92:	mov	r4, r7
    ce94:	ubfx	r5, r7, #20, #11
    ce98:	mov	r7, r2
    ce9a:	bl	c91c <_Balloc>
    ce9e:	ubfx	r4, r4, #0, #20
    cea2:	mov	r9, r0
    cea4:	cbz	r5, ceaa <__d2b+0x26>
    cea6:	orr.w	r4, r4, #1048576	; 0x100000
    ceaa:	str	r4, [sp, #4]
    ceac:	cbz	r6, cef6 <__d2b+0x72>
    ceae:	add	r0, sp, #8
    ceb0:	str.w	r6, [r0, #-8]!
    ceb4:	bl	ca3c <__lo0bits>
    ceb8:	cmp	r0, #0
    ceba:	bne.n	cf26 <__d2b+0xa2>
    cebc:	ldmia.w	sp, {r2, r3}
    cec0:	str.w	r2, [r9, #20]
    cec4:	cmp	r3, #0
    cec6:	ite	eq
    cec8:	moveq	r1, #1
    ceca:	movne	r1, #2
    cecc:	str.w	r3, [r9, #24]
    ced0:	str.w	r1, [r9, #16]
    ced4:	cbnz	r5, cf0e <__d2b+0x8a>
    ced6:	add.w	r3, r9, r1, lsl #2
    ceda:	subw	r0, r0, #1074	; 0x432
    cede:	str.w	r0, [r8]
    cee2:	ldr	r0, [r3, #16]
    cee4:	bl	c9fc <__hi0bits>
    cee8:	rsb	r0, r0, r1, lsl #5
    ceec:	str	r0, [r7, #0]
    ceee:	mov	r0, r9
    cef0:	add	sp, #12
    cef2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    cef6:	add	r0, sp, #4
    cef8:	bl	ca3c <__lo0bits>
    cefc:	ldr	r3, [sp, #4]
    cefe:	str.w	r3, [r9, #20]
    cf02:	movs	r1, #1
    cf04:	adds	r0, #32
    cf06:	str.w	r1, [r9, #16]
    cf0a:	cmp	r5, #0
    cf0c:	beq.n	ced6 <__d2b+0x52>
    cf0e:	subw	r5, r5, #1075	; 0x433
    cf12:	add	r5, r0
    cf14:	rsb	r0, r0, #53	; 0x35
    cf18:	str.w	r5, [r8]
    cf1c:	str	r0, [r7, #0]
    cf1e:	mov	r0, r9
    cf20:	add	sp, #12
    cf22:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    cf26:	ldmia.w	sp, {r2, r3}
    cf2a:	rsb	r1, r0, #32
    cf2e:	lsl.w	r1, r3, r1
    cf32:	orrs	r2, r1
    cf34:	lsrs	r3, r0
    cf36:	str	r3, [sp, #4]
    cf38:	str.w	r2, [r9, #20]
    cf3c:	b.n	cec4 <__d2b+0x40>
    cf3e:	nop

0000cf40 <_vasnprintf_r>:
    cf40:	push	{r4, r5, r6, lr}
    cf42:	mov	r5, r2
    cf44:	sub	sp, #104	; 0x68
    cf46:	ldr	r4, [r2, #0]
    cf48:	cbz	r1, cf4e <_vasnprintf_r+0xe>
    cf4a:	cmp	r4, #0
    cf4c:	bne.n	cf84 <_vasnprintf_r+0x44>
    cf4e:	movs	r4, #0
    cf50:	mov.w	r2, #648	; 0x288
    cf54:	strh.w	r2, [sp, #12]
    cf58:	str	r4, [sp, #0]
    cf5a:	str	r4, [sp, #16]
    cf5c:	mov	r2, r3
    cf5e:	movw	r6, #65535	; 0xffff
    cf62:	ldr	r3, [sp, #120]	; 0x78
    cf64:	str	r4, [sp, #8]
    cf66:	mov	r1, sp
    cf68:	str	r4, [sp, #20]
    cf6a:	strh.w	r6, [sp, #14]
    cf6e:	bl	df60 <_svfprintf_r>
    cf72:	cmp	r0, #0
    cf74:	blt.n	cf9a <_vasnprintf_r+0x5a>
    cf76:	ldr	r3, [sp, #0]
    cf78:	str	r0, [r5, #0]
    cf7a:	movs	r2, #0
    cf7c:	strb	r2, [r3, #0]
    cf7e:	ldr	r0, [sp, #16]
    cf80:	add	sp, #104	; 0x68
    cf82:	pop	{r4, r5, r6, pc}
    cf84:	mov.w	r2, #1544	; 0x608
    cf88:	str	r1, [sp, #0]
    cf8a:	str	r1, [sp, #16]
    cf8c:	strh.w	r2, [sp, #12]
    cf90:	bge.n	cf5c <_vasnprintf_r+0x1c>
    cf92:	movs	r3, #139	; 0x8b
    cf94:	str	r3, [r0, #0]
    cf96:	movs	r0, #0
    cf98:	b.n	cf80 <_vasnprintf_r+0x40>
    cf9a:	movs	r0, #0
    cf9c:	b.n	cf80 <_vasnprintf_r+0x40>
    cf9e:	nop

0000cfa0 <_calloc_r>:
    cfa0:	push	{r4, lr}
    cfa2:	mul.w	r1, r2, r1
    cfa6:	bl	b5fc <_malloc_r>
    cfaa:	mov	r4, r0
    cfac:	cbz	r0, cfe6 <_calloc_r+0x46>
    cfae:	ldr.w	r2, [r0, #-4]
    cfb2:	bic.w	r2, r2, #3
    cfb6:	subs	r2, #4
    cfb8:	cmp	r2, #36	; 0x24
    cfba:	bhi.n	cfee <_calloc_r+0x4e>
    cfbc:	cmp	r2, #19
    cfbe:	bls.n	cfea <_calloc_r+0x4a>
    cfc0:	movs	r3, #0
    cfc2:	cmp	r2, #27
    cfc4:	str	r3, [r0, #0]
    cfc6:	str	r3, [r0, #4]
    cfc8:	bls.n	cff8 <_calloc_r+0x58>
    cfca:	cmp	r2, #36	; 0x24
    cfcc:	str	r3, [r0, #8]
    cfce:	str	r3, [r0, #12]
    cfd0:	iteee	ne
    cfd2:	addne.w	r2, r0, #16
    cfd6:	streq	r3, [r0, #16]
    cfd8:	streq	r3, [r0, #20]
    cfda:	addeq.w	r2, r0, #24
    cfde:	movs	r3, #0
    cfe0:	str	r3, [r2, #0]
    cfe2:	str	r3, [r2, #4]
    cfe4:	str	r3, [r2, #8]
    cfe6:	mov	r0, r4
    cfe8:	pop	{r4, pc}
    cfea:	mov	r2, r0
    cfec:	b.n	cfde <_calloc_r+0x3e>
    cfee:	movs	r1, #0
    cff0:	bl	bd6c <memset>
    cff4:	mov	r0, r4
    cff6:	pop	{r4, pc}
    cff8:	add.w	r2, r0, #8
    cffc:	b.n	cfde <_calloc_r+0x3e>
    cffe:	nop

0000d000 <quorem>:
    d000:	ldr	r2, [r0, #16]
    d002:	ldr	r3, [r1, #16]
    d004:	cmp	r3, r2
    d006:	bgt.w	d124 <quorem+0x124>
    d00a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d00e:	add.w	r8, r3, #4294967295
    d012:	add.w	r7, r1, #20
    d016:	add.w	fp, r0, #20
    d01a:	ldr.w	r2, [r7, r8, lsl #2]
    d01e:	ldr.w	r3, [fp, r8, lsl #2]
    d022:	mov.w	r4, r8, lsl #2
    d026:	sub	sp, #12
    d028:	adds	r2, #1
    d02a:	udiv	r9, r3, r2
    d02e:	add.w	r3, fp, r4
    d032:	str	r4, [sp, #0]
    d034:	add.w	sl, r7, r4
    d038:	str	r3, [sp, #4]
    d03a:	cmp.w	r9, #0
    d03e:	beq.n	d0b4 <quorem+0xb4>
    d040:	movs	r5, #0
    d042:	mov	ip, r7
    d044:	mov	lr, fp
    d046:	mov	r3, r5
    d048:	ldr.w	r6, [ip], #4
    d04c:	ldr.w	r2, [lr]
    d050:	uxth	r4, r6
    d052:	mla	r5, r9, r4, r5
    d056:	lsrs	r6, r6, #16
    d058:	lsrs	r4, r5, #16
    d05a:	mla	r4, r9, r6, r4
    d05e:	uxth	r5, r5
    d060:	subs	r3, r3, r5
    d062:	uxth	r6, r4
    d064:	uxtah	r3, r3, r2
    d068:	rsb	r6, r6, r2, lsr #16
    d06c:	add.w	r6, r6, r3, asr #16
    d070:	uxth	r3, r3
    d072:	orr.w	r3, r3, r6, lsl #16
    d076:	cmp	sl, ip
    d078:	str.w	r3, [lr], #4
    d07c:	mov.w	r5, r4, lsr #16
    d080:	mov.w	r3, r6, asr #16
    d084:	bcs.n	d048 <quorem+0x48>
    d086:	ldr	r3, [sp, #0]
    d088:	ldr.w	r3, [fp, r3]
    d08c:	cbnz	r3, d0b4 <quorem+0xb4>
    d08e:	ldr	r4, [sp, #4]
    d090:	subs	r3, r4, #4
    d092:	cmp	fp, r3
    d094:	bcs.n	d0b0 <quorem+0xb0>
    d096:	ldr.w	r3, [r4, #-4]
    d09a:	cbnz	r3, d0b0 <quorem+0xb0>
    d09c:	sub.w	r3, r4, #8
    d0a0:	b.n	d0a8 <quorem+0xa8>
    d0a2:	ldr	r2, [r3, #0]
    d0a4:	subs	r3, #4
    d0a6:	cbnz	r2, d0b0 <quorem+0xb0>
    d0a8:	cmp	fp, r3
    d0aa:	add.w	r8, r8, #4294967295
    d0ae:	bcc.n	d0a2 <quorem+0xa2>
    d0b0:	str.w	r8, [r0, #16]
    d0b4:	mov	r4, r0
    d0b6:	bl	cd2c <__mcmp>
    d0ba:	cmp	r0, #0
    d0bc:	blt.n	d11c <quorem+0x11c>
    d0be:	add.w	r9, r9, #1
    d0c2:	mov	r5, fp
    d0c4:	movs	r3, #0
    d0c6:	ldr.w	r1, [r7], #4
    d0ca:	ldr	r0, [r5, #0]
    d0cc:	uxth	r2, r1
    d0ce:	subs	r2, r3, r2
    d0d0:	lsrs	r1, r1, #16
    d0d2:	uxtah	r2, r2, r0
    d0d6:	rsb	r3, r1, r0, lsr #16
    d0da:	add.w	r3, r3, r2, asr #16
    d0de:	uxth	r1, r2
    d0e0:	orr.w	r1, r1, r3, lsl #16
    d0e4:	cmp	sl, r7
    d0e6:	str.w	r1, [r5], #4
    d0ea:	mov.w	r3, r3, asr #16
    d0ee:	bcs.n	d0c6 <quorem+0xc6>
    d0f0:	ldr.w	r2, [fp, r8, lsl #2]
    d0f4:	add.w	r3, fp, r8, lsl #2
    d0f8:	cbnz	r2, d11c <quorem+0x11c>
    d0fa:	subs	r2, r3, #4
    d0fc:	cmp	fp, r2
    d0fe:	bcs.n	d118 <quorem+0x118>
    d100:	ldr.w	r2, [r3, #-4]
    d104:	cbnz	r2, d118 <quorem+0x118>
    d106:	subs	r3, #8
    d108:	b.n	d110 <quorem+0x110>
    d10a:	ldr	r2, [r3, #0]
    d10c:	subs	r3, #4
    d10e:	cbnz	r2, d118 <quorem+0x118>
    d110:	cmp	fp, r3
    d112:	add.w	r8, r8, #4294967295
    d116:	bcc.n	d10a <quorem+0x10a>
    d118:	str.w	r8, [r4, #16]
    d11c:	mov	r0, r9
    d11e:	add	sp, #12
    d120:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d124:	movs	r0, #0
    d126:	bx	lr

0000d128 <_dtoa_r>:
    d128:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d12c:	vmov	r6, r7, d0
    d130:	sub	sp, #108	; 0x6c
    d132:	ldr	r4, [r0, #64]	; 0x40
    d134:	ldr	r5, [sp, #144]	; 0x90
    d136:	str	r1, [sp, #0]
    d138:	mov	r9, r0
    d13a:	str	r2, [sp, #20]
    d13c:	str	r3, [sp, #12]
    d13e:	vmov	sl, s0
    d142:	mov	fp, r7
    d144:	cbz	r4, d15c <_dtoa_r+0x34>
    d146:	ldr	r2, [r0, #68]	; 0x44
    d148:	str	r2, [r4, #4]
    d14a:	movs	r3, #1
    d14c:	lsls	r3, r2
    d14e:	str	r3, [r4, #8]
    d150:	mov	r1, r4
    d152:	bl	c968 <_Bfree>
    d156:	movs	r3, #0
    d158:	str.w	r3, [r9, #64]	; 0x40
    d15c:	cmp.w	fp, #0
    d160:	mov	r4, fp
    d162:	blt.n	d1ce <_dtoa_r+0xa6>
    d164:	movs	r3, #0
    d166:	str	r3, [r5, #0]
    d168:	ldr	r3, [pc, #644]	; (d3f0 <_dtoa_r+0x2c8>)
    d16a:	mov	r2, r3
    d16c:	ands	r3, r4
    d16e:	cmp	r3, r2
    d170:	beq.n	d1a0 <_dtoa_r+0x78>
    d172:	movs	r2, #0
    d174:	movs	r3, #0
    d176:	mov	r0, sl
    d178:	mov	r1, fp
    d17a:	bl	b17c <__aeabi_dcmpeq>
    d17e:	mov	r6, sl
    d180:	mov	r7, fp
    d182:	mov	r8, r0
    d184:	cbz	r0, d1da <_dtoa_r+0xb2>
    d186:	ldr	r2, [sp, #12]
    d188:	movs	r3, #1
    d18a:	str	r3, [r2, #0]
    d18c:	ldr	r3, [sp, #148]	; 0x94
    d18e:	cmp	r3, #0
    d190:	beq.w	d310 <_dtoa_r+0x1e8>
    d194:	ldr	r0, [pc, #604]	; (d3f4 <_dtoa_r+0x2cc>)
    d196:	str	r0, [r3, #0]
    d198:	subs	r0, #1
    d19a:	add	sp, #108	; 0x6c
    d19c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d1a0:	ldr	r2, [sp, #12]
    d1a2:	movw	r3, #9999	; 0x270f
    d1a6:	str	r3, [r2, #0]
    d1a8:	cmp.w	sl, #0
    d1ac:	beq.w	d2e4 <_dtoa_r+0x1bc>
    d1b0:	ldr	r0, [pc, #580]	; (d3f8 <_dtoa_r+0x2d0>)
    d1b2:	ldr	r3, [sp, #148]	; 0x94
    d1b4:	cmp	r3, #0
    d1b6:	beq.n	d19a <_dtoa_r+0x72>
    d1b8:	ldrb	r3, [r0, #3]
    d1ba:	cmp	r3, #0
    d1bc:	beq.w	d314 <_dtoa_r+0x1ec>
    d1c0:	add.w	r3, r0, #8
    d1c4:	ldr	r2, [sp, #148]	; 0x94
    d1c6:	str	r3, [r2, #0]
    d1c8:	add	sp, #108	; 0x6c
    d1ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d1ce:	movs	r3, #1
    d1d0:	bic.w	r4, fp, #2147483648	; 0x80000000
    d1d4:	str	r3, [r5, #0]
    d1d6:	mov	fp, r4
    d1d8:	b.n	d168 <_dtoa_r+0x40>
    d1da:	add	r2, sp, #96	; 0x60
    d1dc:	add	r1, sp, #100	; 0x64
    d1de:	vmov	d0, r6, r7
    d1e2:	mov	r0, r9
    d1e4:	bl	ce84 <__d2b>
    d1e8:	lsrs	r5, r4, #20
    d1ea:	str	r0, [sp, #40]	; 0x28
    d1ec:	bne.w	d2f6 <_dtoa_r+0x1ce>
    d1f0:	ldr	r5, [sp, #96]	; 0x60
    d1f2:	ldr	r6, [sp, #100]	; 0x64
    d1f4:	add	r6, r5
    d1f6:	addw	r3, r6, #1074	; 0x432
    d1fa:	cmp	r3, #32
    d1fc:	ble.w	d710 <_dtoa_r+0x5e8>
    d200:	rsb	r3, r3, #64	; 0x40
    d204:	addw	r0, r6, #1042	; 0x412
    d208:	lsls	r4, r3
    d20a:	lsr.w	r0, sl, r0
    d20e:	orrs	r0, r4
    d210:	bl	abc0 <__aeabi_ui2d>
    d214:	movs	r3, #1
    d216:	subs	r4, r6, #1
    d218:	sub.w	r1, r1, #32505856	; 0x1f00000
    d21c:	str	r3, [sp, #60]	; 0x3c
    d21e:	movs	r2, #0
    d220:	ldr	r3, [pc, #472]	; (d3fc <_dtoa_r+0x2d4>)
    d222:	bl	a944 <__aeabi_dsub>
    d226:	add	r3, pc, #432	; (adr r3, d3d8 <_dtoa_r+0x2b0>)
    d228:	ldrd	r2, r3, [r3]
    d22c:	bl	acac <__aeabi_dmul>
    d230:	add	r3, pc, #428	; (adr r3, d3e0 <_dtoa_r+0x2b8>)
    d232:	ldrd	r2, r3, [r3]
    d236:	bl	a948 <__adddf3>
    d23a:	mov	r6, r0
    d23c:	mov	r0, r4
    d23e:	mov	r7, r1
    d240:	bl	abe0 <__aeabi_i2d>
    d244:	add	r3, pc, #416	; (adr r3, d3e8 <_dtoa_r+0x2c0>)
    d246:	ldrd	r2, r3, [r3]
    d24a:	bl	acac <__aeabi_dmul>
    d24e:	mov	r2, r0
    d250:	mov	r3, r1
    d252:	mov	r0, r6
    d254:	mov	r1, r7
    d256:	bl	a948 <__adddf3>
    d25a:	mov	r6, r0
    d25c:	mov	r7, r1
    d25e:	bl	b20c <__aeabi_d2iz>
    d262:	movs	r2, #0
    d264:	str	r0, [sp, #16]
    d266:	movs	r3, #0
    d268:	mov	r0, r6
    d26a:	mov	r1, r7
    d26c:	bl	b190 <__aeabi_dcmplt>
    d270:	cmp	r0, #0
    d272:	bne.w	d6c6 <_dtoa_r+0x59e>
    d276:	ldr	r6, [sp, #16]
    d278:	cmp	r6, #22
    d27a:	bhi.w	d6c0 <_dtoa_r+0x598>
    d27e:	ldr	r3, [pc, #384]	; (d400 <_dtoa_r+0x2d8>)
    d280:	add.w	r3, r3, r6, lsl #3
    d284:	ldrd	r0, r1, [r3]
    d288:	mov	r2, sl
    d28a:	mov	r3, fp
    d28c:	bl	b1cc <__aeabi_dcmpgt>
    d290:	cmp	r0, #0
    d292:	beq.w	d71a <_dtoa_r+0x5f2>
    d296:	subs	r3, r6, #1
    d298:	str	r3, [sp, #16]
    d29a:	movs	r3, #0
    d29c:	str	r3, [sp, #52]	; 0x34
    d29e:	subs	r5, r5, r4
    d2a0:	subs.w	r8, r5, #1
    d2a4:	bmi.w	d6fc <_dtoa_r+0x5d4>
    d2a8:	movs	r3, #0
    d2aa:	str	r3, [sp, #28]
    d2ac:	ldr	r3, [sp, #16]
    d2ae:	cmp	r3, #0
    d2b0:	blt.w	d6ea <_dtoa_r+0x5c2>
    d2b4:	add	r8, r3
    d2b6:	str	r3, [sp, #48]	; 0x30
    d2b8:	movs	r3, #0
    d2ba:	str	r3, [sp, #24]
    d2bc:	ldr	r3, [sp, #0]
    d2be:	cmp	r3, #9
    d2c0:	bhi.n	d318 <_dtoa_r+0x1f0>
    d2c2:	cmp	r3, #5
    d2c4:	ble.w	df50 <_dtoa_r+0xe28>
    d2c8:	subs	r3, #4
    d2ca:	str	r3, [sp, #0]
    d2cc:	movs	r6, #0
    d2ce:	ldr	r3, [sp, #0]
    d2d0:	subs	r3, #2
    d2d2:	cmp	r3, #3
    d2d4:	bhi.w	df1e <_dtoa_r+0xdf6>
    d2d8:	tbh	[pc, r3, lsl #1]
    d2dc:	.word	0x0224032b
    d2e0:	.word	0x04500336
    d2e4:	ldr	r3, [pc, #272]	; (d3f8 <_dtoa_r+0x2d0>)
    d2e6:	ldr	r2, [pc, #284]	; (d404 <_dtoa_r+0x2dc>)
    d2e8:	ubfx	r0, r4, #0, #20
    d2ec:	cmp	r0, #0
    d2ee:	ite	ne
    d2f0:	movne	r0, r3
    d2f2:	moveq	r0, r2
    d2f4:	b.n	d1b2 <_dtoa_r+0x8a>
    d2f6:	ubfx	r3, fp, #0, #20
    d2fa:	orr.w	r1, r3, #1069547520	; 0x3fc00000
    d2fe:	subw	r4, r5, #1023	; 0x3ff
    d302:	mov	r0, sl
    d304:	str.w	r8, [sp, #60]	; 0x3c
    d308:	orr.w	r1, r1, #3145728	; 0x300000
    d30c:	ldr	r5, [sp, #96]	; 0x60
    d30e:	b.n	d21e <_dtoa_r+0xf6>
    d310:	ldr	r0, [pc, #244]	; (d408 <_dtoa_r+0x2e0>)
    d312:	b.n	d19a <_dtoa_r+0x72>
    d314:	adds	r3, r0, #3
    d316:	b.n	d1c4 <_dtoa_r+0x9c>
    d318:	movs	r1, #0
    d31a:	str.w	r1, [r9, #68]	; 0x44
    d31e:	mov	r0, r9
    d320:	mov	r4, r1
    d322:	str	r1, [sp, #0]
    d324:	bl	c91c <_Balloc>
    d328:	mov.w	r3, #4294967295
    d32c:	str	r3, [sp, #32]
    d32e:	str	r3, [sp, #56]	; 0x38
    d330:	movs	r3, #1
    d332:	str	r0, [sp, #36]	; 0x24
    d334:	str.w	r0, [r9, #64]	; 0x40
    d338:	str	r4, [sp, #20]
    d33a:	str	r3, [sp, #44]	; 0x2c
    d33c:	ldr	r3, [sp, #100]	; 0x64
    d33e:	cmp	r3, #0
    d340:	blt.w	d4e4 <_dtoa_r+0x3bc>
    d344:	ldr	r2, [sp, #16]
    d346:	cmp	r2, #14
    d348:	bgt.w	d4e4 <_dtoa_r+0x3bc>
    d34c:	ldr	r3, [pc, #176]	; (d400 <_dtoa_r+0x2d8>)
    d34e:	add.w	r3, r3, r2, lsl #3
    d352:	vldr	d7, [r3]
    d356:	ldr	r3, [sp, #20]
    d358:	cmp	r3, #0
    d35a:	vstr	d7, [sp]
    d35e:	blt.w	d95e <_dtoa_r+0x836>
    d362:	mov	r6, sl
    d364:	mov	r7, fp
    d366:	ldrd	sl, fp, [sp]
    d36a:	mov	r0, r6
    d36c:	mov	r2, sl
    d36e:	mov	r3, fp
    d370:	mov	r1, r7
    d372:	bl	af00 <__aeabi_ddiv>
    d376:	bl	b20c <__aeabi_d2iz>
    d37a:	mov	r4, r0
    d37c:	bl	abe0 <__aeabi_i2d>
    d380:	mov	r2, sl
    d382:	mov	r3, fp
    d384:	bl	acac <__aeabi_dmul>
    d388:	mov	r3, r1
    d38a:	mov	r2, r0
    d38c:	mov	r1, r7
    d38e:	mov	r0, r6
    d390:	bl	a944 <__aeabi_dsub>
    d394:	ldr	r5, [sp, #36]	; 0x24
    d396:	add.w	r3, r4, #48	; 0x30
    d39a:	strb	r3, [r5, #0]
    d39c:	ldr	r3, [sp, #32]
    d39e:	cmp	r3, #1
    d3a0:	mov	r6, r0
    d3a2:	mov	r7, r1
    d3a4:	add.w	r5, r5, #1
    d3a8:	beq.n	d46e <_dtoa_r+0x346>
    d3aa:	movs	r2, #0
    d3ac:	ldr	r3, [pc, #92]	; (d40c <_dtoa_r+0x2e4>)
    d3ae:	bl	acac <__aeabi_dmul>
    d3b2:	movs	r2, #0
    d3b4:	movs	r3, #0
    d3b6:	mov	r6, r0
    d3b8:	mov	r7, r1
    d3ba:	bl	b17c <__aeabi_dcmpeq>
    d3be:	cmp	r0, #0
    d3c0:	bne.n	d4be <_dtoa_r+0x396>
    d3c2:	str.w	r9, [sp, #20]
    d3c6:	ldr.w	sl, [sp, #32]
    d3ca:	ldr.w	fp, [sp, #36]	; 0x24
    d3ce:	ldrd	r8, r9, [sp]
    d3d2:	b.n	d426 <_dtoa_r+0x2fe>
    d3d4:	nop.w
    d3d8:	.word	0x636f4361
    d3dc:	.word	0x3fd287a7
    d3e0:	.word	0x8b60c8b3
    d3e4:	.word	0x3fc68a28
    d3e8:	.word	0x509f79fb
    d3ec:	.word	0x3fd34413
    d3f0:	.word	0x7ff00000
    d3f4:	.word	0x0001012d
    d3f8:	.word	0x00010128
    d3fc:	.word	0x3ff80000
    d400:	.word	0x00010020
    d404:	.word	0x0001011c
    d408:	.word	0x0001012c
    d40c:	.word	0x40240000
    d410:	bl	acac <__aeabi_dmul>
    d414:	movs	r2, #0
    d416:	movs	r3, #0
    d418:	mov	r6, r0
    d41a:	mov	r7, r1
    d41c:	bl	b17c <__aeabi_dcmpeq>
    d420:	cmp	r0, #0
    d422:	bne.w	db82 <_dtoa_r+0xa5a>
    d426:	mov	r2, r8
    d428:	mov	r3, r9
    d42a:	mov	r0, r6
    d42c:	mov	r1, r7
    d42e:	bl	af00 <__aeabi_ddiv>
    d432:	bl	b20c <__aeabi_d2iz>
    d436:	mov	r4, r0
    d438:	bl	abe0 <__aeabi_i2d>
    d43c:	mov	r2, r8
    d43e:	mov	r3, r9
    d440:	bl	acac <__aeabi_dmul>
    d444:	mov	r2, r0
    d446:	mov	r3, r1
    d448:	mov	r0, r6
    d44a:	mov	r1, r7
    d44c:	bl	a944 <__aeabi_dsub>
    d450:	add.w	lr, r4, #48	; 0x30
    d454:	strb.w	lr, [r5], #1
    d458:	rsb	lr, fp, r5
    d45c:	cmp	lr, sl
    d45e:	mov	r6, r0
    d460:	mov	r7, r1
    d462:	mov.w	r2, #0
    d466:	ldr	r3, [pc, #696]	; (d720 <_dtoa_r+0x5f8>)
    d468:	bne.n	d410 <_dtoa_r+0x2e8>
    d46a:	ldr.w	r9, [sp, #20]
    d46e:	mov	r2, r6
    d470:	mov	r3, r7
    d472:	mov	r0, r6
    d474:	mov	r1, r7
    d476:	bl	a948 <__adddf3>
    d47a:	mov	r6, r0
    d47c:	mov	r7, r1
    d47e:	mov	r2, r0
    d480:	mov	r3, r1
    d482:	ldrd	r0, r1, [sp]
    d486:	bl	b190 <__aeabi_dcmplt>
    d48a:	cbnz	r0, d49e <_dtoa_r+0x376>
    d48c:	mov	r2, r6
    d48e:	mov	r3, r7
    d490:	ldrd	r0, r1, [sp]
    d494:	bl	b17c <__aeabi_dcmpeq>
    d498:	cbz	r0, d4be <_dtoa_r+0x396>
    d49a:	lsls	r3, r4, #31
    d49c:	bpl.n	d4be <_dtoa_r+0x396>
    d49e:	ldrb.w	r4, [r5, #-1]
    d4a2:	ldr	r2, [sp, #36]	; 0x24
    d4a4:	subs	r3, r5, #1
    d4a6:	b.n	d4b2 <_dtoa_r+0x38a>
    d4a8:	cmp	r2, r3
    d4aa:	beq.w	dca6 <_dtoa_r+0xb7e>
    d4ae:	ldrb.w	r4, [r3, #-1]!
    d4b2:	cmp	r4, #57	; 0x39
    d4b4:	add.w	r5, r3, #1
    d4b8:	beq.n	d4a8 <_dtoa_r+0x380>
    d4ba:	adds	r4, #1
    d4bc:	strb	r4, [r3, #0]
    d4be:	ldr	r1, [sp, #40]	; 0x28
    d4c0:	mov	r0, r9
    d4c2:	bl	c968 <_Bfree>
    d4c6:	movs	r2, #0
    d4c8:	ldr	r3, [sp, #16]
    d4ca:	strb	r2, [r5, #0]
    d4cc:	ldr	r2, [sp, #12]
    d4ce:	adds	r3, #1
    d4d0:	str	r3, [r2, #0]
    d4d2:	ldr	r3, [sp, #148]	; 0x94
    d4d4:	cmp	r3, #0
    d4d6:	beq.w	dc10 <_dtoa_r+0xae8>
    d4da:	ldr	r0, [sp, #36]	; 0x24
    d4dc:	str	r5, [r3, #0]
    d4de:	add	sp, #108	; 0x6c
    d4e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d4e4:	ldr	r2, [sp, #44]	; 0x2c
    d4e6:	cmp	r2, #0
    d4e8:	beq.w	d708 <_dtoa_r+0x5e0>
    d4ec:	ldr	r2, [sp, #0]
    d4ee:	cmp	r2, #1
    d4f0:	ble.w	d9a2 <_dtoa_r+0x87a>
    d4f4:	ldr	r3, [sp, #32]
    d4f6:	ldr	r2, [sp, #24]
    d4f8:	subs	r7, r3, #1
    d4fa:	cmp	r2, r7
    d4fc:	blt.w	dc16 <_dtoa_r+0xaee>
    d500:	subs	r7, r2, r7
    d502:	ldr	r3, [sp, #32]
    d504:	cmp	r3, #0
    d506:	blt.w	de0a <_dtoa_r+0xce2>
    d50a:	ldr	r5, [sp, #28]
    d50c:	ldr	r3, [sp, #32]
    d50e:	ldr	r2, [sp, #28]
    d510:	movs	r1, #1
    d512:	add	r2, r3
    d514:	mov	r0, r9
    d516:	str	r2, [sp, #28]
    d518:	add	r8, r3
    d51a:	bl	ca98 <__i2b>
    d51e:	mov	r6, r0
    d520:	cbz	r5, d53c <_dtoa_r+0x414>
    d522:	cmp.w	r8, #0
    d526:	ble.n	d53c <_dtoa_r+0x414>
    d528:	cmp	r5, r8
    d52a:	ldr	r2, [sp, #28]
    d52c:	mov	r3, r5
    d52e:	it	ge
    d530:	movge	r3, r8
    d532:	subs	r2, r2, r3
    d534:	str	r2, [sp, #28]
    d536:	subs	r5, r5, r3
    d538:	rsb	r8, r3, r8
    d53c:	ldr	r3, [sp, #24]
    d53e:	cmp	r3, #0
    d540:	ble.w	db2e <_dtoa_r+0xa06>
    d544:	ldr	r2, [sp, #44]	; 0x2c
    d546:	cmp	r2, #0
    d548:	beq.w	d950 <_dtoa_r+0x828>
    d54c:	cmp	r7, #0
    d54e:	beq.w	d950 <_dtoa_r+0x828>
    d552:	mov	r1, r6
    d554:	mov	r2, r7
    d556:	mov	r0, r9
    d558:	bl	cbdc <__pow5mult>
    d55c:	ldr	r2, [sp, #40]	; 0x28
    d55e:	mov	r1, r0
    d560:	mov	r6, r0
    d562:	mov	r0, r9
    d564:	bl	caac <__multiply>
    d568:	ldr	r1, [sp, #40]	; 0x28
    d56a:	mov	r4, r0
    d56c:	mov	r0, r9
    d56e:	bl	c968 <_Bfree>
    d572:	ldr	r3, [sp, #24]
    d574:	subs	r3, r3, r7
    d576:	str	r3, [sp, #24]
    d578:	bne.w	d94e <_dtoa_r+0x826>
    d57c:	movs	r1, #1
    d57e:	mov	r0, r9
    d580:	bl	ca98 <__i2b>
    d584:	ldr	r3, [sp, #48]	; 0x30
    d586:	str	r0, [sp, #24]
    d588:	cmp	r3, #0
    d58a:	beq.w	d9b8 <_dtoa_r+0x890>
    d58e:	mov	r1, r0
    d590:	mov	r2, r3
    d592:	mov	r0, r9
    d594:	bl	cbdc <__pow5mult>
    d598:	ldr	r3, [sp, #0]
    d59a:	str	r0, [sp, #24]
    d59c:	cmp	r3, #1
    d59e:	ble.w	db88 <_dtoa_r+0xa60>
    d5a2:	movs	r7, #0
    d5a4:	ldr	r2, [sp, #24]
    d5a6:	ldr	r3, [r2, #16]
    d5a8:	add.w	r3, r2, r3, lsl #2
    d5ac:	ldr	r0, [r3, #16]
    d5ae:	bl	c9fc <__hi0bits>
    d5b2:	rsb	r0, r0, #32
    d5b6:	add	r0, r8
    d5b8:	ands.w	r0, r0, #31
    d5bc:	beq.w	d9b4 <_dtoa_r+0x88c>
    d5c0:	rsb	r3, r0, #32
    d5c4:	cmp	r3, #4
    d5c6:	ble.w	df44 <_dtoa_r+0xe1c>
    d5ca:	rsb	r0, r0, #28
    d5ce:	ldr	r3, [sp, #28]
    d5d0:	add	r3, r0
    d5d2:	str	r3, [sp, #28]
    d5d4:	add	r5, r0
    d5d6:	add	r8, r0
    d5d8:	ldr	r3, [sp, #28]
    d5da:	cmp	r3, #0
    d5dc:	ble.n	d5ea <_dtoa_r+0x4c2>
    d5de:	mov	r1, r4
    d5e0:	mov	r2, r3
    d5e2:	mov	r0, r9
    d5e4:	bl	cc7c <__lshift>
    d5e8:	mov	r4, r0
    d5ea:	cmp.w	r8, #0
    d5ee:	ble.n	d5fc <_dtoa_r+0x4d4>
    d5f0:	mov	r2, r8
    d5f2:	ldr	r1, [sp, #24]
    d5f4:	mov	r0, r9
    d5f6:	bl	cc7c <__lshift>
    d5fa:	str	r0, [sp, #24]
    d5fc:	ldr	r3, [sp, #52]	; 0x34
    d5fe:	cmp	r3, #0
    d600:	bne.w	daf8 <_dtoa_r+0x9d0>
    d604:	ldr	r3, [sp, #32]
    d606:	cmp	r3, #0
    d608:	ble.w	db32 <_dtoa_r+0xa0a>
    d60c:	ldr	r3, [sp, #44]	; 0x2c
    d60e:	cmp	r3, #0
    d610:	bne.w	d9fc <_dtoa_r+0x8d4>
    d614:	ldr.w	fp, [sp, #36]	; 0x24
    d618:	ldr	r7, [sp, #32]
    d61a:	ldr.w	r8, [sp, #24]
    d61e:	mov	r5, fp
    d620:	b.n	d628 <_dtoa_r+0x500>
    d622:	bl	c97c <__multadd>
    d626:	mov	r4, r0
    d628:	mov	r1, r8
    d62a:	mov	r0, r4
    d62c:	bl	d000 <quorem>
    d630:	add.w	sl, r0, #48	; 0x30
    d634:	strb.w	sl, [r5], #1
    d638:	rsb	r3, fp, r5
    d63c:	cmp	r3, r7
    d63e:	mov.w	r2, #10
    d642:	mov.w	r3, #0
    d646:	mov	r1, r4
    d648:	mov	r0, r9
    d64a:	blt.n	d622 <_dtoa_r+0x4fa>
    d64c:	ldr	r3, [sp, #36]	; 0x24
    d64e:	ldr	r2, [sp, #32]
    d650:	cmp	r2, #1
    d652:	ite	ge
    d654:	addge	r3, r3, r2
    d656:	addlt	r3, #1
    d658:	mov	r5, r3
    d65a:	mov.w	fp, #0
    d65e:	mov	r1, r4
    d660:	movs	r2, #1
    d662:	mov	r0, r9
    d664:	bl	cc7c <__lshift>
    d668:	ldr	r1, [sp, #24]
    d66a:	str	r0, [sp, #40]	; 0x28
    d66c:	bl	cd2c <__mcmp>
    d670:	cmp	r0, #0
    d672:	ble.w	dc80 <_dtoa_r+0xb58>
    d676:	ldrb.w	r2, [r5, #-1]
    d67a:	ldr	r1, [sp, #36]	; 0x24
    d67c:	subs	r3, r5, #1
    d67e:	b.n	d68a <_dtoa_r+0x562>
    d680:	cmp	r3, r1
    d682:	beq.w	db6e <_dtoa_r+0xa46>
    d686:	ldrb.w	r2, [r3, #-1]!
    d68a:	cmp	r2, #57	; 0x39
    d68c:	add.w	r5, r3, #1
    d690:	beq.n	d680 <_dtoa_r+0x558>
    d692:	adds	r2, #1
    d694:	strb	r2, [r3, #0]
    d696:	ldr	r1, [sp, #24]
    d698:	mov	r0, r9
    d69a:	bl	c968 <_Bfree>
    d69e:	cmp	r6, #0
    d6a0:	beq.w	d4be <_dtoa_r+0x396>
    d6a4:	cmp.w	fp, #0
    d6a8:	beq.n	d6b6 <_dtoa_r+0x58e>
    d6aa:	cmp	fp, r6
    d6ac:	beq.n	d6b6 <_dtoa_r+0x58e>
    d6ae:	mov	r1, fp
    d6b0:	mov	r0, r9
    d6b2:	bl	c968 <_Bfree>
    d6b6:	mov	r1, r6
    d6b8:	mov	r0, r9
    d6ba:	bl	c968 <_Bfree>
    d6be:	b.n	d4be <_dtoa_r+0x396>
    d6c0:	movs	r3, #1
    d6c2:	str	r3, [sp, #52]	; 0x34
    d6c4:	b.n	d29e <_dtoa_r+0x176>
    d6c6:	ldr.w	r8, [sp, #16]
    d6ca:	mov	r0, r8
    d6cc:	bl	abe0 <__aeabi_i2d>
    d6d0:	mov	r2, r0
    d6d2:	mov	r3, r1
    d6d4:	mov	r0, r6
    d6d6:	mov	r1, r7
    d6d8:	bl	b17c <__aeabi_dcmpeq>
    d6dc:	cmp	r0, #0
    d6de:	bne.w	d276 <_dtoa_r+0x14e>
    d6e2:	add.w	r3, r8, #4294967295
    d6e6:	str	r3, [sp, #16]
    d6e8:	b.n	d276 <_dtoa_r+0x14e>
    d6ea:	ldr	r2, [sp, #28]
    d6ec:	ldr	r3, [sp, #16]
    d6ee:	subs	r2, r2, r3
    d6f0:	negs	r3, r3
    d6f2:	str	r3, [sp, #24]
    d6f4:	movs	r3, #0
    d6f6:	str	r2, [sp, #28]
    d6f8:	str	r3, [sp, #48]	; 0x30
    d6fa:	b.n	d2bc <_dtoa_r+0x194>
    d6fc:	rsb	r3, r8, #0
    d700:	str	r3, [sp, #28]
    d702:	mov.w	r8, #0
    d706:	b.n	d2ac <_dtoa_r+0x184>
    d708:	ldr	r7, [sp, #24]
    d70a:	ldr	r5, [sp, #28]
    d70c:	ldr	r6, [sp, #44]	; 0x2c
    d70e:	b.n	d520 <_dtoa_r+0x3f8>
    d710:	rsb	r4, r3, #32
    d714:	lsl.w	r0, sl, r4
    d718:	b.n	d210 <_dtoa_r+0xe8>
    d71a:	str	r0, [sp, #52]	; 0x34
    d71c:	b.n	d29e <_dtoa_r+0x176>
    d71e:	nop
    d720:	.word	0x40240000
    d724:	movs	r3, #0
    d726:	str	r3, [sp, #44]	; 0x2c
    d728:	ldr	r3, [sp, #16]
    d72a:	ldr	r2, [sp, #20]
    d72c:	add	r3, r2
    d72e:	str	r3, [sp, #56]	; 0x38
    d730:	adds	r3, #1
    d732:	cmp	r3, #0
    d734:	str	r3, [sp, #32]
    d736:	ble.w	dc34 <_dtoa_r+0xb0c>
    d73a:	ldr	r4, [sp, #32]
    d73c:	mov	r5, r4
    d73e:	movs	r1, #0
    d740:	cmp	r5, #23
    d742:	str.w	r1, [r9, #68]	; 0x44
    d746:	bls.n	d760 <_dtoa_r+0x638>
    d748:	movs	r2, #1
    d74a:	movs	r3, #4
    d74c:	lsls	r3, r3, #1
    d74e:	add.w	r0, r3, #20
    d752:	cmp	r0, r5
    d754:	mov	r1, r2
    d756:	add.w	r2, r2, #1
    d75a:	bls.n	d74c <_dtoa_r+0x624>
    d75c:	str.w	r1, [r9, #68]	; 0x44
    d760:	mov	r0, r9
    d762:	bl	c91c <_Balloc>
    d766:	cmp	r4, #14
    d768:	str	r0, [sp, #36]	; 0x24
    d76a:	str.w	r0, [r9, #64]	; 0x40
    d76e:	bhi.w	d33c <_dtoa_r+0x214>
    d772:	cmp	r6, #0
    d774:	beq.w	d33c <_dtoa_r+0x214>
    d778:	ldr	r1, [sp, #16]
    d77a:	cmp	r1, #0
    d77c:	strd	sl, fp, [sp, #64]	; 0x40
    d780:	ble.w	dcb8 <_dtoa_r+0xb90>
    d784:	ldr	r3, [pc, #576]	; (d9c8 <_dtoa_r+0x8a0>)
    d786:	and.w	r2, r1, #15
    d78a:	asrs	r6, r1, #4
    d78c:	add.w	r3, r3, r2, lsl #3
    d790:	lsls	r0, r6, #27
    d792:	ldrd	r4, r5, [r3]
    d796:	bpl.w	dc26 <_dtoa_r+0xafe>
    d79a:	ldr	r3, [pc, #560]	; (d9cc <_dtoa_r+0x8a4>)
    d79c:	mov	r0, sl
    d79e:	mov	r1, fp
    d7a0:	ldrd	r2, r3, [r3, #32]
    d7a4:	bl	af00 <__aeabi_ddiv>
    d7a8:	strd	r0, r1, [sp, #72]	; 0x48
    d7ac:	and.w	r6, r6, #15
    d7b0:	mov.w	sl, #3
    d7b4:	cbz	r6, d7d8 <_dtoa_r+0x6b0>
    d7b6:	ldr	r7, [pc, #532]	; (d9cc <_dtoa_r+0x8a4>)
    d7b8:	lsls	r1, r6, #31
    d7ba:	bpl.n	d7d0 <_dtoa_r+0x6a8>
    d7bc:	mov	r0, r4
    d7be:	mov	r1, r5
    d7c0:	ldrd	r2, r3, [r7]
    d7c4:	bl	acac <__aeabi_dmul>
    d7c8:	add.w	sl, sl, #1
    d7cc:	mov	r4, r0
    d7ce:	mov	r5, r1
    d7d0:	asrs	r6, r6, #1
    d7d2:	add.w	r7, r7, #8
    d7d6:	bne.n	d7b8 <_dtoa_r+0x690>
    d7d8:	mov	r2, r4
    d7da:	mov	r3, r5
    d7dc:	ldrd	r0, r1, [sp, #72]	; 0x48
    d7e0:	bl	af00 <__aeabi_ddiv>
    d7e4:	mov	r6, r0
    d7e6:	mov	r7, r1
    d7e8:	ldr	r3, [sp, #52]	; 0x34
    d7ea:	cbz	r3, d7fe <_dtoa_r+0x6d6>
    d7ec:	movs	r2, #0
    d7ee:	ldr	r3, [pc, #480]	; (d9d0 <_dtoa_r+0x8a8>)
    d7f0:	mov	r0, r6
    d7f2:	mov	r1, r7
    d7f4:	bl	b190 <__aeabi_dcmplt>
    d7f8:	cmp	r0, #0
    d7fa:	bne.w	de32 <_dtoa_r+0xd0a>
    d7fe:	mov	r0, sl
    d800:	bl	abe0 <__aeabi_i2d>
    d804:	mov	r2, r6
    d806:	mov	r3, r7
    d808:	bl	acac <__aeabi_dmul>
    d80c:	ldr	r3, [pc, #452]	; (d9d4 <_dtoa_r+0x8ac>)
    d80e:	movs	r2, #0
    d810:	bl	a948 <__adddf3>
    d814:	ldr	r3, [sp, #32]
    d816:	mov	r4, r0
    d818:	sub.w	r5, r1, #54525952	; 0x3400000
    d81c:	cmp	r3, #0
    d81e:	beq.w	dbd8 <_dtoa_r+0xab0>
    d822:	ldr	r3, [sp, #16]
    d824:	str	r3, [sp, #88]	; 0x58
    d826:	ldr	r3, [sp, #32]
    d828:	str	r3, [sp, #72]	; 0x48
    d82a:	ldr	r3, [sp, #44]	; 0x2c
    d82c:	cmp	r3, #0
    d82e:	beq.w	dd5a <_dtoa_r+0xc32>
    d832:	ldr	r2, [sp, #72]	; 0x48
    d834:	ldr	r3, [pc, #400]	; (d9c8 <_dtoa_r+0x8a0>)
    d836:	ldr	r1, [pc, #416]	; (d9d8 <_dtoa_r+0x8b0>)
    d838:	add.w	r3, r3, r2, lsl #3
    d83c:	ldrd	r2, r3, [r3, #-8]
    d840:	movs	r0, #0
    d842:	bl	af00 <__aeabi_ddiv>
    d846:	mov	r2, r4
    d848:	mov	r3, r5
    d84a:	bl	a944 <__aeabi_dsub>
    d84e:	mov	sl, r0
    d850:	mov	fp, r1
    d852:	mov	r0, r6
    d854:	mov	r1, r7
    d856:	bl	b20c <__aeabi_d2iz>
    d85a:	mov	r4, r0
    d85c:	bl	abe0 <__aeabi_i2d>
    d860:	mov	r2, r0
    d862:	mov	r3, r1
    d864:	mov	r0, r6
    d866:	mov	r1, r7
    d868:	bl	a944 <__aeabi_dsub>
    d86c:	adds	r4, #48	; 0x30
    d86e:	ldr	r5, [sp, #36]	; 0x24
    d870:	uxtb	r4, r4
    d872:	mov	r6, r0
    d874:	mov	r7, r1
    d876:	strb	r4, [r5, #0]
    d878:	mov	r2, r0
    d87a:	mov	r3, r1
    d87c:	mov	r0, sl
    d87e:	mov	r1, fp
    d880:	adds	r5, #1
    d882:	bl	b1cc <__aeabi_dcmpgt>
    d886:	cmp	r0, #0
    d888:	bne.n	d92c <_dtoa_r+0x804>
    d88a:	mov	r2, r6
    d88c:	mov	r3, r7
    d88e:	movs	r0, #0
    d890:	ldr	r1, [pc, #316]	; (d9d0 <_dtoa_r+0x8a8>)
    d892:	bl	a944 <__aeabi_dsub>
    d896:	mov	r2, r0
    d898:	mov	r3, r1
    d89a:	mov	r0, sl
    d89c:	mov	r1, fp
    d89e:	bl	b1cc <__aeabi_dcmpgt>
    d8a2:	cmp	r0, #0
    d8a4:	bne.w	deb8 <_dtoa_r+0xd90>
    d8a8:	ldr	r2, [sp, #72]	; 0x48
    d8aa:	cmp	r2, #1
    d8ac:	ble.w	dc9e <_dtoa_r+0xb76>
    d8b0:	ldr	r3, [sp, #72]	; 0x48
    d8b2:	ldr	r2, [sp, #36]	; 0x24
    d8b4:	str.w	r8, [sp, #72]	; 0x48
    d8b8:	add	r3, r2
    d8ba:	mov	r8, r3
    d8bc:	b.n	d8da <_dtoa_r+0x7b2>
    d8be:	movs	r0, #0
    d8c0:	ldr	r1, [pc, #268]	; (d9d0 <_dtoa_r+0x8a8>)
    d8c2:	bl	a944 <__aeabi_dsub>
    d8c6:	mov	r2, sl
    d8c8:	mov	r3, fp
    d8ca:	bl	b190 <__aeabi_dcmplt>
    d8ce:	cmp	r0, #0
    d8d0:	bne.w	deb8 <_dtoa_r+0xd90>
    d8d4:	cmp	r5, r8
    d8d6:	beq.w	dc9a <_dtoa_r+0xb72>
    d8da:	mov	r0, sl
    d8dc:	mov	r1, fp
    d8de:	movs	r2, #0
    d8e0:	ldr	r3, [pc, #248]	; (d9dc <_dtoa_r+0x8b4>)
    d8e2:	bl	acac <__aeabi_dmul>
    d8e6:	movs	r2, #0
    d8e8:	ldr	r3, [pc, #240]	; (d9dc <_dtoa_r+0x8b4>)
    d8ea:	mov	sl, r0
    d8ec:	mov	fp, r1
    d8ee:	mov	r0, r6
    d8f0:	mov	r1, r7
    d8f2:	bl	acac <__aeabi_dmul>
    d8f6:	mov	r7, r1
    d8f8:	mov	r6, r0
    d8fa:	bl	b20c <__aeabi_d2iz>
    d8fe:	mov	r4, r0
    d900:	bl	abe0 <__aeabi_i2d>
    d904:	mov	r2, r0
    d906:	mov	r3, r1
    d908:	mov	r0, r6
    d90a:	mov	r1, r7
    d90c:	bl	a944 <__aeabi_dsub>
    d910:	adds	r4, #48	; 0x30
    d912:	uxtb	r4, r4
    d914:	mov	r2, sl
    d916:	mov	r3, fp
    d918:	strb.w	r4, [r5], #1
    d91c:	mov	r6, r0
    d91e:	mov	r7, r1
    d920:	bl	b190 <__aeabi_dcmplt>
    d924:	mov	r2, r6
    d926:	mov	r3, r7
    d928:	cmp	r0, #0
    d92a:	beq.n	d8be <_dtoa_r+0x796>
    d92c:	ldr	r3, [sp, #88]	; 0x58
    d92e:	str	r3, [sp, #16]
    d930:	b.n	d4be <_dtoa_r+0x396>
    d932:	movs	r3, #0
    d934:	str	r3, [sp, #44]	; 0x2c
    d936:	ldr	r3, [sp, #20]
    d938:	cmp	r3, #0
    d93a:	ble.w	dc3e <_dtoa_r+0xb16>
    d93e:	mov	r5, r3
    d940:	mov	r4, r3
    d942:	str	r3, [sp, #56]	; 0x38
    d944:	str	r3, [sp, #32]
    d946:	b.n	d73e <_dtoa_r+0x616>
    d948:	movs	r3, #1
    d94a:	str	r3, [sp, #44]	; 0x2c
    d94c:	b.n	d936 <_dtoa_r+0x80e>
    d94e:	str	r4, [sp, #40]	; 0x28
    d950:	ldr	r2, [sp, #24]
    d952:	ldr	r1, [sp, #40]	; 0x28
    d954:	mov	r0, r9
    d956:	bl	cbdc <__pow5mult>
    d95a:	mov	r4, r0
    d95c:	b.n	d57c <_dtoa_r+0x454>
    d95e:	ldr	r3, [sp, #32]
    d960:	cmp	r3, #0
    d962:	bgt.w	d362 <_dtoa_r+0x23a>
    d966:	bne.w	dc08 <_dtoa_r+0xae0>
    d96a:	movs	r2, #0
    d96c:	ldr	r3, [pc, #112]	; (d9e0 <_dtoa_r+0x8b8>)
    d96e:	ldrd	r0, r1, [sp]
    d972:	bl	acac <__aeabi_dmul>
    d976:	mov	r3, fp
    d978:	mov	r2, sl
    d97a:	bl	b1b8 <__aeabi_dcmpge>
    d97e:	ldr	r3, [sp, #32]
    d980:	str	r3, [sp, #24]
    d982:	mov	r6, r3
    d984:	cmp	r0, #0
    d986:	beq.w	db5e <_dtoa_r+0xa36>
    d98a:	ldr	r3, [sp, #20]
    d98c:	ldr	r5, [sp, #36]	; 0x24
    d98e:	mvns	r3, r3
    d990:	str	r3, [sp, #16]
    d992:	ldr	r1, [sp, #24]
    d994:	mov	r0, r9
    d996:	bl	c968 <_Bfree>
    d99a:	cmp	r6, #0
    d99c:	beq.w	d4be <_dtoa_r+0x396>
    d9a0:	b.n	d6b6 <_dtoa_r+0x58e>
    d9a2:	ldr	r2, [sp, #60]	; 0x3c
    d9a4:	cmp	r2, #0
    d9a6:	beq.w	de1a <_dtoa_r+0xcf2>
    d9aa:	addw	r3, r3, #1075	; 0x433
    d9ae:	ldr	r7, [sp, #24]
    d9b0:	ldr	r5, [sp, #28]
    d9b2:	b.n	d50e <_dtoa_r+0x3e6>
    d9b4:	movs	r0, #28
    d9b6:	b.n	d5ce <_dtoa_r+0x4a6>
    d9b8:	ldr	r3, [sp, #0]
    d9ba:	cmp	r3, #1
    d9bc:	ble.w	dec0 <_dtoa_r+0xd98>
    d9c0:	ldr	r7, [sp, #48]	; 0x30
    d9c2:	movs	r0, #1
    d9c4:	b.n	d5b6 <_dtoa_r+0x48e>
    d9c6:	nop
    d9c8:	.word	0x00010020
    d9cc:	.word	0x000100e8
    d9d0:	.word	0x3ff00000
    d9d4:	.word	0x401c0000
    d9d8:	.word	0x3fe00000
    d9dc:	.word	0x40240000
    d9e0:	.word	0x40140000
    d9e4:	mov	r1, r6
    d9e6:	movs	r3, #0
    d9e8:	movs	r2, #10
    d9ea:	mov	r0, r9
    d9ec:	bl	c97c <__multadd>
    d9f0:	ldr	r3, [sp, #56]	; 0x38
    d9f2:	cmp	r3, #0
    d9f4:	mov	r6, r0
    d9f6:	ble.w	df14 <_dtoa_r+0xdec>
    d9fa:	str	r3, [sp, #32]
    d9fc:	cmp	r5, #0
    d9fe:	ble.n	da0c <_dtoa_r+0x8e4>
    da00:	mov	r1, r6
    da02:	mov	r2, r5
    da04:	mov	r0, r9
    da06:	bl	cc7c <__lshift>
    da0a:	mov	r6, r0
    da0c:	cmp	r7, #0
    da0e:	bne.w	dd0a <_dtoa_r+0xbe2>
    da12:	mov	r8, r6
    da14:	ldr	r3, [sp, #32]
    da16:	ldr	r2, [sp, #36]	; 0x24
    da18:	subs	r3, #1
    da1a:	adds	r3, r2, r3
    da1c:	str	r3, [sp, #32]
    da1e:	and.w	r3, sl, #1
    da22:	str	r3, [sp, #40]	; 0x28
    da24:	mov	r7, r2
    da26:	ldr.w	fp, [sp, #24]
    da2a:	mov	r0, r4
    da2c:	mov	r1, fp
    da2e:	bl	d000 <quorem>
    da32:	mov	r1, r6
    da34:	mov	r5, r0
    da36:	mov	r0, r4
    da38:	bl	cd2c <__mcmp>
    da3c:	mov	r2, r8
    da3e:	mov	r1, fp
    da40:	mov	sl, r0
    da42:	mov	r0, r9
    da44:	bl	cd70 <__mdiff>
    da48:	ldr	r2, [r0, #12]
    da4a:	mov	fp, r0
    da4c:	add.w	r3, r5, #48	; 0x30
    da50:	cmp	r2, #0
    da52:	bne.n	dae8 <_dtoa_r+0x9c0>
    da54:	mov	r1, r0
    da56:	mov	r0, r4
    da58:	str	r3, [sp, #28]
    da5a:	bl	cd2c <__mcmp>
    da5e:	mov	r1, fp
    da60:	str	r0, [sp, #20]
    da62:	mov	r0, r9
    da64:	bl	c968 <_Bfree>
    da68:	ldr	r2, [sp, #20]
    da6a:	ldr	r3, [sp, #28]
    da6c:	cbnz	r2, da7a <_dtoa_r+0x952>
    da6e:	ldr	r1, [sp, #0]
    da70:	cbnz	r1, da7a <_dtoa_r+0x952>
    da72:	ldr	r1, [sp, #40]	; 0x28
    da74:	cmp	r1, #0
    da76:	beq.w	dee4 <_dtoa_r+0xdbc>
    da7a:	cmp.w	sl, #0
    da7e:	blt.w	dc48 <_dtoa_r+0xb20>
    da82:	bne.n	da90 <_dtoa_r+0x968>
    da84:	ldr	r1, [sp, #0]
    da86:	cbnz	r1, da90 <_dtoa_r+0x968>
    da88:	ldr	r1, [sp, #40]	; 0x28
    da8a:	cmp	r1, #0
    da8c:	beq.w	dc48 <_dtoa_r+0xb20>
    da90:	cmp	r2, #0
    da92:	bgt.w	dd32 <_dtoa_r+0xc0a>
    da96:	ldr	r2, [sp, #32]
    da98:	strb	r3, [r7, #0]
    da9a:	add.w	sl, r7, #1
    da9e:	cmp	r7, r2
    daa0:	mov	r5, sl
    daa2:	beq.w	dd4a <_dtoa_r+0xc22>
    daa6:	mov	r1, r4
    daa8:	movs	r3, #0
    daaa:	movs	r2, #10
    daac:	mov	r0, r9
    daae:	bl	c97c <__multadd>
    dab2:	cmp	r6, r8
    dab4:	mov	r4, r0
    dab6:	mov	r1, r6
    dab8:	mov.w	r3, #0
    dabc:	mov.w	r2, #10
    dac0:	mov	r0, r9
    dac2:	beq.n	dadc <_dtoa_r+0x9b4>
    dac4:	bl	c97c <__multadd>
    dac8:	mov	r1, r8
    daca:	mov	r6, r0
    dacc:	movs	r3, #0
    dace:	movs	r2, #10
    dad0:	mov	r0, r9
    dad2:	bl	c97c <__multadd>
    dad6:	mov	r7, sl
    dad8:	mov	r8, r0
    dada:	b.n	da26 <_dtoa_r+0x8fe>
    dadc:	bl	c97c <__multadd>
    dae0:	mov	r7, sl
    dae2:	mov	r6, r0
    dae4:	mov	r8, r0
    dae6:	b.n	da26 <_dtoa_r+0x8fe>
    dae8:	mov	r1, r0
    daea:	mov	r0, r9
    daec:	str	r3, [sp, #20]
    daee:	bl	c968 <_Bfree>
    daf2:	movs	r2, #1
    daf4:	ldr	r3, [sp, #20]
    daf6:	b.n	da7a <_dtoa_r+0x952>
    daf8:	ldr	r1, [sp, #24]
    dafa:	mov	r0, r4
    dafc:	bl	cd2c <__mcmp>
    db00:	cmp	r0, #0
    db02:	bge.w	d604 <_dtoa_r+0x4dc>
    db06:	mov	r1, r4
    db08:	ldr	r4, [sp, #16]
    db0a:	movs	r3, #0
    db0c:	subs	r4, #1
    db0e:	movs	r2, #10
    db10:	mov	r0, r9
    db12:	str	r4, [sp, #16]
    db14:	bl	c97c <__multadd>
    db18:	ldr	r3, [sp, #44]	; 0x2c
    db1a:	mov	r4, r0
    db1c:	cmp	r3, #0
    db1e:	bne.w	d9e4 <_dtoa_r+0x8bc>
    db22:	ldr	r3, [sp, #56]	; 0x38
    db24:	cmp	r3, #0
    db26:	ble.w	df04 <_dtoa_r+0xddc>
    db2a:	str	r3, [sp, #32]
    db2c:	b.n	d614 <_dtoa_r+0x4ec>
    db2e:	ldr	r4, [sp, #40]	; 0x28
    db30:	b.n	d57c <_dtoa_r+0x454>
    db32:	ldr	r3, [sp, #0]
    db34:	cmp	r3, #2
    db36:	ble.w	d60c <_dtoa_r+0x4e4>
    db3a:	ldr	r3, [sp, #32]
    db3c:	cmp	r3, #0
    db3e:	bne.w	de7c <_dtoa_r+0xd54>
    db42:	ldr	r1, [sp, #24]
    db44:	movs	r2, #5
    db46:	mov	r0, r9
    db48:	bl	c97c <__multadd>
    db4c:	mov	r1, r0
    db4e:	str	r0, [sp, #24]
    db50:	mov	r0, r4
    db52:	bl	cd2c <__mcmp>
    db56:	cmp	r0, #0
    db58:	str	r4, [sp, #40]	; 0x28
    db5a:	ble.w	d98a <_dtoa_r+0x862>
    db5e:	ldr	r2, [sp, #16]
    db60:	ldr	r1, [sp, #36]	; 0x24
    db62:	movs	r3, #49	; 0x31
    db64:	adds	r2, #1
    db66:	str	r2, [sp, #16]
    db68:	strb	r3, [r1, #0]
    db6a:	adds	r5, r1, #1
    db6c:	b.n	d992 <_dtoa_r+0x86a>
    db6e:	ldr	r2, [sp, #16]
    db70:	adds	r2, #1
    db72:	str	r2, [sp, #16]
    db74:	ldr	r2, [sp, #36]	; 0x24
    db76:	movs	r3, #49	; 0x31
    db78:	strb	r3, [r2, #0]
    db7a:	b.n	d696 <_dtoa_r+0x56e>
    db7c:	movs	r3, #1
    db7e:	str	r3, [sp, #44]	; 0x2c
    db80:	b.n	d728 <_dtoa_r+0x600>
    db82:	ldr.w	r9, [sp, #20]
    db86:	b.n	d4be <_dtoa_r+0x396>
    db88:	cmp.w	sl, #0
    db8c:	bne.w	d5a2 <_dtoa_r+0x47a>
    db90:	ubfx	r3, fp, #0, #20
    db94:	cmp	r3, #0
    db96:	bne.w	de16 <_dtoa_r+0xcee>
    db9a:	bic.w	r7, fp, #2147483648	; 0x80000000
    db9e:	lsrs	r7, r7, #20
    dba0:	lsls	r7, r7, #20
    dba2:	cbz	r7, dbb0 <_dtoa_r+0xa88>
    dba4:	ldr	r3, [sp, #28]
    dba6:	adds	r3, #1
    dba8:	str	r3, [sp, #28]
    dbaa:	add.w	r8, r8, #1
    dbae:	movs	r7, #1
    dbb0:	ldr	r3, [sp, #48]	; 0x30
    dbb2:	movs	r0, #1
    dbb4:	cmp	r3, #0
    dbb6:	beq.w	d5b6 <_dtoa_r+0x48e>
    dbba:	b.n	d5a4 <_dtoa_r+0x47c>
    dbbc:	mov	r0, sl
    dbbe:	bl	abe0 <__aeabi_i2d>
    dbc2:	mov	r2, r6
    dbc4:	mov	r3, r7
    dbc6:	bl	acac <__aeabi_dmul>
    dbca:	movs	r2, #0
    dbcc:	ldr	r3, [pc, #764]	; (decc <_dtoa_r+0xda4>)
    dbce:	bl	a948 <__adddf3>
    dbd2:	mov	r4, r0
    dbd4:	sub.w	r5, r1, #54525952	; 0x3400000
    dbd8:	mov	r0, r6
    dbda:	mov	r1, r7
    dbdc:	movs	r2, #0
    dbde:	ldr	r3, [pc, #752]	; (ded0 <_dtoa_r+0xda8>)
    dbe0:	bl	a944 <__aeabi_dsub>
    dbe4:	mov	r2, r4
    dbe6:	mov	r3, r5
    dbe8:	mov	r6, r0
    dbea:	mov	r7, r1
    dbec:	bl	b1cc <__aeabi_dcmpgt>
    dbf0:	cmp	r0, #0
    dbf2:	bne.w	dd52 <_dtoa_r+0xc2a>
    dbf6:	mov	r2, r4
    dbf8:	add.w	r3, r5, #2147483648	; 0x80000000
    dbfc:	mov	r0, r6
    dbfe:	mov	r1, r7
    dc00:	bl	b190 <__aeabi_dcmplt>
    dc04:	cmp	r0, #0
    dc06:	beq.n	dc9e <_dtoa_r+0xb76>
    dc08:	movs	r3, #0
    dc0a:	str	r3, [sp, #24]
    dc0c:	mov	r6, r3
    dc0e:	b.n	d98a <_dtoa_r+0x862>
    dc10:	ldr	r0, [sp, #36]	; 0x24
    dc12:	b.w	d19a <_dtoa_r+0x72>
    dc16:	ldr	r3, [sp, #24]
    dc18:	ldr	r2, [sp, #48]	; 0x30
    dc1a:	str	r7, [sp, #24]
    dc1c:	subs	r3, r7, r3
    dc1e:	add	r2, r3
    dc20:	str	r2, [sp, #48]	; 0x30
    dc22:	movs	r7, #0
    dc24:	b.n	d502 <_dtoa_r+0x3da>
    dc26:	vldr	d7, [sp, #64]	; 0x40
    dc2a:	mov.w	sl, #2
    dc2e:	vstr	d7, [sp, #72]	; 0x48
    dc32:	b.n	d7b4 <_dtoa_r+0x68c>
    dc34:	mov	r4, r3
    dc36:	movs	r1, #0
    dc38:	str.w	r1, [r9, #68]	; 0x44
    dc3c:	b.n	d760 <_dtoa_r+0x638>
    dc3e:	movs	r4, #1
    dc40:	str	r4, [sp, #56]	; 0x38
    dc42:	str	r4, [sp, #32]
    dc44:	str	r4, [sp, #20]
    dc46:	b.n	dc36 <_dtoa_r+0xb0e>
    dc48:	cmp	r2, #0
    dc4a:	mov	sl, r3
    dc4c:	ble.n	dc72 <_dtoa_r+0xb4a>
    dc4e:	mov	r1, r4
    dc50:	movs	r2, #1
    dc52:	mov	r0, r9
    dc54:	bl	cc7c <__lshift>
    dc58:	ldr	r1, [sp, #24]
    dc5a:	mov	r4, r0
    dc5c:	bl	cd2c <__mcmp>
    dc60:	cmp	r0, #0
    dc62:	ble.w	def6 <_dtoa_r+0xdce>
    dc66:	cmp.w	sl, #57	; 0x39
    dc6a:	beq.w	de80 <_dtoa_r+0xd58>
    dc6e:	add.w	sl, r5, #49	; 0x31
    dc72:	mov	fp, r6
    dc74:	strb.w	sl, [r7]
    dc78:	adds	r5, r7, #1
    dc7a:	mov	r6, r8
    dc7c:	str	r4, [sp, #40]	; 0x28
    dc7e:	b.n	d696 <_dtoa_r+0x56e>
    dc80:	bne.n	dc8c <_dtoa_r+0xb64>
    dc82:	tst.w	sl, #1
    dc86:	beq.n	dc8c <_dtoa_r+0xb64>
    dc88:	b.n	d676 <_dtoa_r+0x54e>
    dc8a:	mov	r5, r2
    dc8c:	ldrb.w	r3, [r5, #-1]
    dc90:	cmp	r3, #48	; 0x30
    dc92:	add.w	r2, r5, #4294967295
    dc96:	beq.n	dc8a <_dtoa_r+0xb62>
    dc98:	b.n	d696 <_dtoa_r+0x56e>
    dc9a:	ldr.w	r8, [sp, #72]	; 0x48
    dc9e:	ldrd	sl, fp, [sp, #64]	; 0x40
    dca2:	b.w	d33c <_dtoa_r+0x214>
    dca6:	ldr	r1, [sp, #36]	; 0x24
    dca8:	movs	r2, #48	; 0x30
    dcaa:	strb	r2, [r1, #0]
    dcac:	ldr	r2, [sp, #16]
    dcae:	ldrb.w	r4, [r5, #-1]
    dcb2:	adds	r2, #1
    dcb4:	str	r2, [sp, #16]
    dcb6:	b.n	d4ba <_dtoa_r+0x392>
    dcb8:	ldr	r3, [sp, #16]
    dcba:	negs	r4, r3
    dcbc:	cmp	r4, #0
    dcbe:	beq.w	de28 <_dtoa_r+0xd00>
    dcc2:	ldr	r3, [pc, #528]	; (ded4 <_dtoa_r+0xdac>)
    dcc4:	and.w	r2, r4, #15
    dcc8:	add.w	r3, r3, r2, lsl #3
    dccc:	ldrd	r2, r3, [r3]
    dcd0:	ldrd	r0, r1, [sp, #64]	; 0x40
    dcd4:	bl	acac <__aeabi_dmul>
    dcd8:	asrs	r4, r4, #4
    dcda:	mov	r6, r0
    dcdc:	mov	r7, r1
    dcde:	beq.w	df0e <_dtoa_r+0xde6>
    dce2:	ldr	r5, [pc, #500]	; (ded8 <_dtoa_r+0xdb0>)
    dce4:	mov.w	sl, #2
    dce8:	lsls	r2, r4, #31
    dcea:	bpl.n	dd00 <_dtoa_r+0xbd8>
    dcec:	mov	r0, r6
    dcee:	mov	r1, r7
    dcf0:	ldrd	r2, r3, [r5]
    dcf4:	bl	acac <__aeabi_dmul>
    dcf8:	add.w	sl, sl, #1
    dcfc:	mov	r6, r0
    dcfe:	mov	r7, r1
    dd00:	asrs	r4, r4, #1
    dd02:	add.w	r5, r5, #8
    dd06:	bne.n	dce8 <_dtoa_r+0xbc0>
    dd08:	b.n	d7e8 <_dtoa_r+0x6c0>
    dd0a:	ldr	r1, [r6, #4]
    dd0c:	mov	r0, r9
    dd0e:	bl	c91c <_Balloc>
    dd12:	ldr	r3, [r6, #16]
    dd14:	adds	r2, r3, #2
    dd16:	mov	r5, r0
    dd18:	lsls	r2, r2, #2
    dd1a:	add.w	r1, r6, #12
    dd1e:	adds	r0, #12
    dd20:	bl	8f84 <memcpy>
    dd24:	mov	r1, r5
    dd26:	movs	r2, #1
    dd28:	mov	r0, r9
    dd2a:	bl	cc7c <__lshift>
    dd2e:	mov	r8, r0
    dd30:	b.n	da14 <_dtoa_r+0x8ec>
    dd32:	cmp	r3, #57	; 0x39
    dd34:	beq.w	de80 <_dtoa_r+0xd58>
    dd38:	add.w	sl, r3, #1
    dd3c:	mov	fp, r6
    dd3e:	strb.w	sl, [r7]
    dd42:	adds	r5, r7, #1
    dd44:	mov	r6, r8
    dd46:	str	r4, [sp, #40]	; 0x28
    dd48:	b.n	d696 <_dtoa_r+0x56e>
    dd4a:	mov	fp, r6
    dd4c:	mov	sl, r3
    dd4e:	mov	r6, r8
    dd50:	b.n	d65e <_dtoa_r+0x536>
    dd52:	movs	r3, #0
    dd54:	str	r3, [sp, #24]
    dd56:	mov	r6, r3
    dd58:	b.n	db5e <_dtoa_r+0xa36>
    dd5a:	ldr	r3, [sp, #72]	; 0x48
    dd5c:	ldr	r1, [pc, #372]	; (ded4 <_dtoa_r+0xdac>)
    dd5e:	subs	r2, r3, #1
    dd60:	add.w	r1, r1, r2, lsl #3
    dd64:	mov	r3, r5
    dd66:	str	r2, [sp, #92]	; 0x5c
    dd68:	ldrd	r0, r1, [r1]
    dd6c:	mov	r2, r4
    dd6e:	bl	acac <__aeabi_dmul>
    dd72:	strd	r0, r1, [sp, #80]	; 0x50
    dd76:	mov	r1, r7
    dd78:	mov	r0, r6
    dd7a:	bl	b20c <__aeabi_d2iz>
    dd7e:	mov	r4, r0
    dd80:	bl	abe0 <__aeabi_i2d>
    dd84:	mov	r3, r1
    dd86:	mov	r2, r0
    dd88:	mov	r1, r7
    dd8a:	mov	r0, r6
    dd8c:	bl	a944 <__aeabi_dsub>
    dd90:	ldr	r3, [sp, #72]	; 0x48
    dd92:	mov	r7, r1
    dd94:	ldr	r1, [sp, #36]	; 0x24
    dd96:	adds	r4, #48	; 0x30
    dd98:	cmp	r3, #1
    dd9a:	mov	r6, r0
    dd9c:	strb	r4, [r1, #0]
    dd9e:	add.w	r5, r1, #1
    dda2:	beq.n	dde6 <_dtoa_r+0xcbe>
    dda4:	ldr	r3, [sp, #72]	; 0x48
    dda6:	ldr	r2, [sp, #36]	; 0x24
    dda8:	add	r3, r2
    ddaa:	mov	sl, r3
    ddac:	mov	fp, r5
    ddae:	movs	r2, #0
    ddb0:	ldr	r3, [pc, #296]	; (dedc <_dtoa_r+0xdb4>)
    ddb2:	mov	r0, r6
    ddb4:	mov	r1, r7
    ddb6:	bl	acac <__aeabi_dmul>
    ddba:	mov	r7, r1
    ddbc:	mov	r6, r0
    ddbe:	bl	b20c <__aeabi_d2iz>
    ddc2:	mov	r4, r0
    ddc4:	bl	abe0 <__aeabi_i2d>
    ddc8:	adds	r4, #48	; 0x30
    ddca:	mov	r2, r0
    ddcc:	mov	r3, r1
    ddce:	mov	r0, r6
    ddd0:	mov	r1, r7
    ddd2:	bl	a944 <__aeabi_dsub>
    ddd6:	strb.w	r4, [fp], #1
    ddda:	cmp	sl, fp
    dddc:	mov	r6, r0
    ddde:	mov	r7, r1
    dde0:	bne.n	ddae <_dtoa_r+0xc86>
    dde2:	ldr	r3, [sp, #92]	; 0x5c
    dde4:	add	r5, r3
    dde6:	movs	r2, #0
    dde8:	ldr	r3, [pc, #244]	; (dee0 <_dtoa_r+0xdb8>)
    ddea:	ldrd	r0, r1, [sp, #80]	; 0x50
    ddee:	bl	a948 <__adddf3>
    ddf2:	mov	r2, r6
    ddf4:	mov	r3, r7
    ddf6:	bl	b190 <__aeabi_dcmplt>
    ddfa:	cmp	r0, #0
    ddfc:	beq.n	de90 <_dtoa_r+0xd68>
    ddfe:	ldr	r3, [sp, #88]	; 0x58
    de00:	str	r3, [sp, #16]
    de02:	ldrb.w	r4, [r5, #-1]
    de06:	b.w	d4a2 <_dtoa_r+0x37a>
    de0a:	ldr	r3, [sp, #28]
    de0c:	ldr	r2, [sp, #32]
    de0e:	subs	r5, r3, r2
    de10:	movs	r3, #0
    de12:	b.w	d50e <_dtoa_r+0x3e6>
    de16:	movs	r7, #0
    de18:	b.n	dbb0 <_dtoa_r+0xa88>
    de1a:	ldr	r3, [sp, #96]	; 0x60
    de1c:	ldr	r7, [sp, #24]
    de1e:	ldr	r5, [sp, #28]
    de20:	rsb	r3, r3, #54	; 0x36
    de24:	b.w	d50e <_dtoa_r+0x3e6>
    de28:	ldrd	r6, r7, [sp, #64]	; 0x40
    de2c:	mov.w	sl, #2
    de30:	b.n	d7e8 <_dtoa_r+0x6c0>
    de32:	ldr	r3, [sp, #32]
    de34:	cmp	r3, #0
    de36:	beq.w	dbbc <_dtoa_r+0xa94>
    de3a:	ldr	r3, [sp, #56]	; 0x38
    de3c:	cmp	r3, #0
    de3e:	ble.w	dc9e <_dtoa_r+0xb76>
    de42:	movs	r2, #0
    de44:	ldr	r3, [pc, #148]	; (dedc <_dtoa_r+0xdb4>)
    de46:	mov	r0, r6
    de48:	mov	r1, r7
    de4a:	bl	acac <__aeabi_dmul>
    de4e:	mov	r6, r0
    de50:	mov	r7, r1
    de52:	add.w	r0, sl, #1
    de56:	bl	abe0 <__aeabi_i2d>
    de5a:	mov	r2, r6
    de5c:	mov	r3, r7
    de5e:	bl	acac <__aeabi_dmul>
    de62:	movs	r2, #0
    de64:	ldr	r3, [pc, #100]	; (decc <_dtoa_r+0xda4>)
    de66:	bl	a948 <__adddf3>
    de6a:	ldr	r2, [sp, #16]
    de6c:	ldr	r3, [sp, #56]	; 0x38
    de6e:	str	r3, [sp, #72]	; 0x48
    de70:	subs	r2, #1
    de72:	mov	r4, r0
    de74:	sub.w	r5, r1, #54525952	; 0x3400000
    de78:	str	r2, [sp, #88]	; 0x58
    de7a:	b.n	d82a <_dtoa_r+0x702>
    de7c:	str	r4, [sp, #40]	; 0x28
    de7e:	b.n	d98a <_dtoa_r+0x862>
    de80:	movs	r2, #57	; 0x39
    de82:	mov	fp, r6
    de84:	str	r4, [sp, #40]	; 0x28
    de86:	mov	r6, r8
    de88:	strb	r2, [r7, #0]
    de8a:	adds	r5, r7, #1
    de8c:	b.w	d67a <_dtoa_r+0x552>
    de90:	ldrd	r2, r3, [sp, #80]	; 0x50
    de94:	movs	r0, #0
    de96:	ldr	r1, [pc, #72]	; (dee0 <_dtoa_r+0xdb8>)
    de98:	bl	a944 <__aeabi_dsub>
    de9c:	mov	r2, r6
    de9e:	mov	r3, r7
    dea0:	bl	b1cc <__aeabi_dcmpgt>
    dea4:	cbnz	r0, deaa <_dtoa_r+0xd82>
    dea6:	b.n	dc9e <_dtoa_r+0xb76>
    dea8:	mov	r5, r2
    deaa:	ldrb.w	r3, [r5, #-1]
    deae:	cmp	r3, #48	; 0x30
    deb0:	add.w	r2, r5, #4294967295
    deb4:	beq.n	dea8 <_dtoa_r+0xd80>
    deb6:	b.n	d92c <_dtoa_r+0x804>
    deb8:	ldr	r3, [sp, #88]	; 0x58
    deba:	str	r3, [sp, #16]
    debc:	b.w	d4a2 <_dtoa_r+0x37a>
    dec0:	cmp.w	sl, #0
    dec4:	bne.w	d9c0 <_dtoa_r+0x898>
    dec8:	b.n	db90 <_dtoa_r+0xa68>
    deca:	nop
    decc:	.word	0x401c0000
    ded0:	.word	0x40140000
    ded4:	.word	0x00010020
    ded8:	.word	0x000100e8
    dedc:	.word	0x40240000
    dee0:	.word	0x3fe00000
    dee4:	cmp	r3, #57	; 0x39
    dee6:	mov	fp, sl
    dee8:	mov	sl, r3
    deea:	beq.n	de80 <_dtoa_r+0xd58>
    deec:	cmp.w	fp, #0
    def0:	bgt.w	dc6e <_dtoa_r+0xb46>
    def4:	b.n	dc72 <_dtoa_r+0xb4a>
    def6:	bne.w	dc72 <_dtoa_r+0xb4a>
    defa:	tst.w	sl, #1
    defe:	beq.w	dc72 <_dtoa_r+0xb4a>
    df02:	b.n	dc66 <_dtoa_r+0xb3e>
    df04:	ldr	r3, [sp, #0]
    df06:	cmp	r3, #2
    df08:	bgt.n	df56 <_dtoa_r+0xe2e>
    df0a:	ldr	r3, [sp, #56]	; 0x38
    df0c:	b.n	db2a <_dtoa_r+0xa02>
    df0e:	mov.w	sl, #2
    df12:	b.n	d7e8 <_dtoa_r+0x6c0>
    df14:	ldr	r3, [sp, #0]
    df16:	cmp	r3, #2
    df18:	bgt.n	df56 <_dtoa_r+0xe2e>
    df1a:	ldr	r3, [sp, #56]	; 0x38
    df1c:	b.n	d9fa <_dtoa_r+0x8d2>
    df1e:	movs	r4, #0
    df20:	str.w	r4, [r9, #68]	; 0x44
    df24:	mov	r1, r4
    df26:	mov	r0, r9
    df28:	bl	c91c <_Balloc>
    df2c:	mov.w	r3, #4294967295
    df30:	str	r3, [sp, #32]
    df32:	str	r3, [sp, #56]	; 0x38
    df34:	movs	r3, #1
    df36:	str	r0, [sp, #36]	; 0x24
    df38:	str	r4, [sp, #20]
    df3a:	str.w	r0, [r9, #64]	; 0x40
    df3e:	str	r3, [sp, #44]	; 0x2c
    df40:	b.w	d33c <_dtoa_r+0x214>
    df44:	beq.w	d5d8 <_dtoa_r+0x4b0>
    df48:	rsb	r0, r0, #60	; 0x3c
    df4c:	b.w	d5ce <_dtoa_r+0x4a6>
    df50:	movs	r6, #1
    df52:	b.w	d2ce <_dtoa_r+0x1a6>
    df56:	ldr	r3, [sp, #56]	; 0x38
    df58:	str	r3, [sp, #32]
    df5a:	b.n	db3a <_dtoa_r+0xa12>
    df5c:			; <UNDEFINED> instruction: 0xffffffff

0000df60 <_svfprintf_r>:
    df60:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    df64:	sub	sp, #260	; 0x104
    df66:	mov	r4, r1
    df68:	str	r1, [sp, #20]
    df6a:	mov	r5, r2
    df6c:	str	r3, [sp, #40]	; 0x28
    df6e:	str	r0, [sp, #24]
    df70:	bl	c900 <_localeconv_r>
    df74:	ldr	r3, [r0, #0]
    df76:	str	r3, [sp, #76]	; 0x4c
    df78:	mov	r0, r3
    df7a:	bl	c380 <strlen>
    df7e:	ldrh	r3, [r4, #12]
    df80:	str	r0, [sp, #72]	; 0x48
    df82:	lsls	r6, r3, #24
    df84:	bpl.n	df8e <_svfprintf_r+0x2e>
    df86:	ldr	r3, [r4, #16]
    df88:	cmp	r3, #0
    df8a:	beq.w	f1f0 <_svfprintf_r+0x1290>
    df8e:	vldr	d7, [pc, #664]	; e228 <_svfprintf_r+0x2c8>
    df92:	movs	r3, #0
    df94:	vstr	d7, [sp, #64]	; 0x40
    df98:	str	r3, [sp, #56]	; 0x38
    df9a:	str	r3, [sp, #148]	; 0x94
    df9c:	str	r3, [sp, #144]	; 0x90
    df9e:	str	r3, [sp, #84]	; 0x54
    dfa0:	str	r3, [sp, #28]
    dfa2:	ldr.w	sl, [pc, #656]	; e234 <_svfprintf_r+0x2d4>
    dfa6:	add	r3, sp, #192	; 0xc0
    dfa8:	str	r3, [sp, #140]	; 0x8c
    dfaa:	mov	r9, r3
    dfac:	mov	r8, r5
    dfae:	ldrb.w	r3, [r8]
    dfb2:	mov	r4, r8
    dfb4:	cbz	r3, dff2 <_svfprintf_r+0x92>
    dfb6:	cmp	r3, #37	; 0x25
    dfb8:	bne.n	dfc0 <_svfprintf_r+0x60>
    dfba:	b.n	dff2 <_svfprintf_r+0x92>
    dfbc:	cmp	r3, #37	; 0x25
    dfbe:	beq.n	dfc8 <_svfprintf_r+0x68>
    dfc0:	ldrb.w	r3, [r4, #1]!
    dfc4:	cmp	r3, #0
    dfc6:	bne.n	dfbc <_svfprintf_r+0x5c>
    dfc8:	rsb	r5, r8, r4
    dfcc:	cbz	r5, dff2 <_svfprintf_r+0x92>
    dfce:	ldr	r3, [sp, #144]	; 0x90
    dfd0:	ldr	r2, [sp, #148]	; 0x94
    dfd2:	str.w	r8, [r9]
    dfd6:	adds	r3, #1
    dfd8:	add	r2, r5
    dfda:	cmp	r3, #7
    dfdc:	str.w	r5, [r9, #4]
    dfe0:	str	r2, [sp, #148]	; 0x94
    dfe2:	str	r3, [sp, #144]	; 0x90
    dfe4:	bgt.w	e134 <_svfprintf_r+0x1d4>
    dfe8:	add.w	r9, r9, #8
    dfec:	ldr	r3, [sp, #28]
    dfee:	add	r3, r5
    dff0:	str	r3, [sp, #28]
    dff2:	ldrb	r3, [r4, #0]
    dff4:	cmp	r3, #0
    dff6:	beq.w	e146 <_svfprintf_r+0x1e6>
    dffa:	movs	r3, #0
    dffc:	mov	r2, r3
    dffe:	strb.w	r3, [sp, #111]	; 0x6f
    e002:	mov	r1, r3
    e004:	str	r3, [sp, #32]
    e006:	str	r3, [sp, #12]
    e008:	mov.w	fp, #4294967295
    e00c:	ldrb	r3, [r4, #1]
    e00e:	add.w	r8, r4, #1
    e012:	mov	r5, fp
    e014:	add.w	r8, r8, #1
    e018:	sub.w	r0, r3, #32
    e01c:	cmp	r0, #88	; 0x58
    e01e:	bhi.w	e88a <_svfprintf_r+0x92a>
    e022:	tbh	[pc, r0, lsl #1]
    e026:	.short	0x03a0
    e028:	.word	0x04320432
    e02c:	.word	0x043203a8
    e030:	.word	0x04320432
    e034:	.word	0x04320432
    e038:	.word	0x03af0432
    e03c:	.word	0x043203bd
    e040:	.word	0x00e2005d
    e044:	.word	0x01090432
    e048:	.word	0x01100110
    e04c:	.word	0x01100110
    e050:	.word	0x01100110
    e054:	.word	0x01100110
    e058:	.word	0x04320110
    e05c:	.word	0x04320432
    e060:	.word	0x04320432
    e064:	.word	0x04320432
    e068:	.word	0x04320432
    e06c:	.word	0x01200432
    e070:	.word	0x04320286
    e074:	.word	0x04320286
    e078:	.word	0x04320432
    e07c:	.word	0x02d40432
    e080:	.word	0x04320432
    e084:	.word	0x043202e5
    e088:	.word	0x04320432
    e08c:	.word	0x04320432
    e090:	.word	0x0432030f
    e094:	.word	0x033d0432
    e098:	.word	0x04320432
    e09c:	.word	0x04320432
    e0a0:	.word	0x04320432
    e0a4:	.word	0x04320432
    e0a8:	.word	0x04320432
    e0ac:	.word	0x0391037e
    e0b0:	.word	0x02860286
    e0b4:	.word	0x03990286
    e0b8:	.word	0x04320391
    e0bc:	.word	0x04070432
    e0c0:	.word	0x04120432
    e0c4:	.word	0x006400a3
    e0c8:	.word	0x043203c2
    e0cc:	.word	0x043203c9
    e0d0:	.word	0x043203ea
    e0d4:	.word	0x03f20432
    e0d8:	ldr	r0, [sp, #32]
    e0da:	str	r3, [sp, #40]	; 0x28
    e0dc:	negs	r0, r0
    e0de:	str	r0, [sp, #32]
    e0e0:	ldr	r3, [sp, #12]
    e0e2:	orr.w	r3, r3, #4
    e0e6:	str	r3, [sp, #12]
    e0e8:	ldrb.w	r3, [r8]
    e0ec:	b.n	e014 <_svfprintf_r+0xb4>
    e0ee:	ldr	r0, [sp, #40]	; 0x28
    e0f0:	mov	fp, r5
    e0f2:	movs	r1, #0
    e0f4:	ldr	r4, [r0, #0]
    e0f6:	strb.w	r1, [sp, #111]	; 0x6f
    e0fa:	adds	r7, r0, #4
    e0fc:	ldr	r0, [sp, #12]
    e0fe:	movs	r3, #48	; 0x30
    e100:	movs	r2, #120	; 0x78
    e102:	cmp	fp, r1
    e104:	strb.w	r3, [sp, #112]	; 0x70
    e108:	mov.w	r5, #0
    e10c:	strb.w	r2, [sp, #113]	; 0x71
    e110:	orr.w	r3, r0, #2
    e114:	blt.w	e8c4 <_svfprintf_r+0x964>
    e118:	bic.w	r3, r0, #128	; 0x80
    e11c:	orr.w	r3, r3, #2
    e120:	str	r3, [sp, #12]
    e122:	orrs.w	r3, r4, r5
    e126:	str	r7, [sp, #40]	; 0x28
    e128:	beq.w	e870 <_svfprintf_r+0x910>
    e12c:	mov	r7, r1
    e12e:	str	r2, [sp, #52]	; 0x34
    e130:	ldr	r0, [pc, #252]	; (e230 <_svfprintf_r+0x2d0>)
    e132:	b.n	e702 <_svfprintf_r+0x7a2>
    e134:	add	r2, sp, #140	; 0x8c
    e136:	ldr	r1, [sp, #20]
    e138:	ldr	r0, [sp, #24]
    e13a:	bl	f644 <__ssprint_r>
    e13e:	cbnz	r0, e154 <_svfprintf_r+0x1f4>
    e140:	add.w	r9, sp, #192	; 0xc0
    e144:	b.n	dfec <_svfprintf_r+0x8c>
    e146:	ldr	r3, [sp, #148]	; 0x94
    e148:	cbz	r3, e154 <_svfprintf_r+0x1f4>
    e14a:	ldr	r0, [sp, #24]
    e14c:	ldr	r1, [sp, #20]
    e14e:	add	r2, sp, #140	; 0x8c
    e150:	bl	f644 <__ssprint_r>
    e154:	ldr	r3, [sp, #20]
    e156:	ldrh	r3, [r3, #12]
    e158:	tst.w	r3, #64	; 0x40
    e15c:	ldr	r3, [sp, #28]
    e15e:	it	ne
    e160:	movne.w	r3, #4294967295
    e164:	mov	r0, r3
    e166:	add	sp, #260	; 0x104
    e168:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e16c:	str	r3, [sp, #52]	; 0x34
    e16e:	mov	fp, r5
    e170:	cmp	r2, #0
    e172:	bne.w	f5dc <_svfprintf_r+0x167c>
    e176:	ldr	r2, [sp, #12]
    e178:	ands.w	r3, r2, #32
    e17c:	beq.w	e60c <_svfprintf_r+0x6ac>
    e180:	ldr	r7, [sp, #40]	; 0x28
    e182:	adds	r7, #7
    e184:	bic.w	r3, r7, #7
    e188:	movs	r7, #0
    e18a:	add.w	r1, r3, #8
    e18e:	cmp	fp, r7
    e190:	str	r1, [sp, #40]	; 0x28
    e192:	ldrd	r4, r5, [r3]
    e196:	strb.w	r7, [sp, #111]	; 0x6f
    e19a:	blt.w	f062 <_svfprintf_r+0x1102>
    e19e:	bic.w	r3, r2, #128	; 0x80
    e1a2:	str	r3, [sp, #12]
    e1a4:	orrs.w	r3, r4, r5
    e1a8:	beq.w	e8b4 <_svfprintf_r+0x954>
    e1ac:	add	r6, sp, #192	; 0xc0
    e1ae:	lsrs	r2, r4, #3
    e1b0:	orr.w	r2, r2, r5, lsl #29
    e1b4:	lsrs	r1, r5, #3
    e1b6:	and.w	r3, r4, #7
    e1ba:	mov	r5, r1
    e1bc:	mov	r4, r2
    e1be:	adds	r3, #48	; 0x30
    e1c0:	orrs.w	r2, r4, r5
    e1c4:	strb.w	r3, [r6, #-1]!
    e1c8:	bne.n	e1ae <_svfprintf_r+0x24e>
    e1ca:	ldr	r2, [sp, #12]
    e1cc:	lsls	r1, r2, #31
    e1ce:	bpl.w	e2f0 <_svfprintf_r+0x390>
    e1d2:	cmp	r3, #48	; 0x30
    e1d4:	beq.w	e2f0 <_svfprintf_r+0x390>
    e1d8:	movs	r2, #48	; 0x30
    e1da:	subs	r3, r6, #1
    e1dc:	strb.w	r2, [r6, #-1]
    e1e0:	add	r2, sp, #192	; 0xc0
    e1e2:	subs	r2, r2, r3
    e1e4:	str	r2, [sp, #36]	; 0x24
    e1e6:	mov	r6, r3
    e1e8:	b.n	e2f6 <_svfprintf_r+0x396>
    e1ea:	ldrb.w	r3, [r8]
    e1ee:	cmp	r3, #42	; 0x2a
    e1f0:	add.w	r4, r8, #1
    e1f4:	beq.w	f5c0 <_svfprintf_r+0x1660>
    e1f8:	sub.w	r0, r3, #48	; 0x30
    e1fc:	cmp	r0, #9
    e1fe:	it	ls
    e200:	movls	r5, #0
    e202:	bhi.w	f512 <_svfprintf_r+0x15b2>
    e206:	ldrb.w	r3, [r4], #1
    e20a:	add.w	r5, r5, r5, lsl #2
    e20e:	add.w	r5, r0, r5, lsl #1
    e212:	sub.w	r0, r3, #48	; 0x30
    e216:	cmp	r0, #9
    e218:	bls.n	e206 <_svfprintf_r+0x2a6>
    e21a:	orr.w	r5, r5, r5, asr #31
    e21e:	mov	r8, r4
    e220:	b.n	e018 <_svfprintf_r+0xb8>
    e222:	nop
    e224:	nop.w
	...
    e230:	.word	0x00010164
    e234:	.word	0x00010130
    e238:	ldr	r3, [sp, #12]
    e23a:	orr.w	r3, r3, #128	; 0x80
    e23e:	str	r3, [sp, #12]
    e240:	ldrb.w	r3, [r8]
    e244:	b.n	e014 <_svfprintf_r+0xb4>
    e246:	sub.w	r0, r3, #48	; 0x30
    e24a:	movs	r3, #0
    e24c:	mov	r4, r3
    e24e:	ldrb.w	r3, [r8], #1
    e252:	add.w	r4, r4, r4, lsl #2
    e256:	add.w	r4, r0, r4, lsl #1
    e25a:	sub.w	r0, r3, #48	; 0x30
    e25e:	cmp	r0, #9
    e260:	bls.n	e24e <_svfprintf_r+0x2ee>
    e262:	str	r4, [sp, #32]
    e264:	b.n	e018 <_svfprintf_r+0xb8>
    e266:	str	r3, [sp, #52]	; 0x34
    e268:	mov	fp, r5
    e26a:	cmp	r2, #0
    e26c:	bne.w	f5f8 <_svfprintf_r+0x1698>
    e270:	ldr	r3, [sp, #12]
    e272:	orr.w	r3, r3, #16
    e276:	str	r3, [sp, #12]
    e278:	ldr	r3, [sp, #12]
    e27a:	lsls	r4, r3, #26
    e27c:	bpl.w	ecee <_svfprintf_r+0xd8e>
    e280:	ldr	r7, [sp, #40]	; 0x28
    e282:	adds	r7, #7
    e284:	bic.w	r7, r7, #7
    e288:	ldrd	r2, r3, [r7]
    e28c:	add.w	r1, r7, #8
    e290:	str	r1, [sp, #40]	; 0x28
    e292:	mov	r4, r2
    e294:	mov	r5, r3
    e296:	cmp	r2, #0
    e298:	sbcs.w	r3, r3, #0
    e29c:	blt.w	ed64 <_svfprintf_r+0xe04>
    e2a0:	cmp.w	fp, #0
    e2a4:	ldrb.w	r7, [sp, #111]	; 0x6f
    e2a8:	blt.w	ed2a <_svfprintf_r+0xdca>
    e2ac:	ldr	r3, [sp, #12]
    e2ae:	bic.w	r3, r3, #128	; 0x80
    e2b2:	str	r3, [sp, #12]
    e2b4:	orrs.w	r3, r4, r5
    e2b8:	beq.w	e68c <_svfprintf_r+0x72c>
    e2bc:	cmp	r5, #0
    e2be:	it	eq
    e2c0:	cmpeq	r4, #10
    e2c2:	bcc.w	e696 <_svfprintf_r+0x736>
    e2c6:	add	r6, sp, #192	; 0xc0
    e2c8:	mov	r0, r4
    e2ca:	mov	r1, r5
    e2cc:	movs	r2, #10
    e2ce:	movs	r3, #0
    e2d0:	bl	b25c <__aeabi_uldivmod>
    e2d4:	adds	r2, #48	; 0x30
    e2d6:	strb.w	r2, [r6, #-1]!
    e2da:	mov	r0, r4
    e2dc:	mov	r1, r5
    e2de:	movs	r3, #0
    e2e0:	movs	r2, #10
    e2e2:	bl	b25c <__aeabi_uldivmod>
    e2e6:	mov	r4, r0
    e2e8:	mov	r5, r1
    e2ea:	orrs.w	r3, r4, r5
    e2ee:	bne.n	e2c8 <_svfprintf_r+0x368>
    e2f0:	add	r3, sp, #192	; 0xc0
    e2f2:	subs	r3, r3, r6
    e2f4:	str	r3, [sp, #36]	; 0x24
    e2f6:	ldr	r3, [sp, #36]	; 0x24
    e2f8:	cmp	r3, fp
    e2fa:	it	lt
    e2fc:	movlt	r3, fp
    e2fe:	str	r3, [sp, #16]
    e300:	movs	r3, #0
    e302:	str	r3, [sp, #60]	; 0x3c
    e304:	cbz	r7, e30c <_svfprintf_r+0x3ac>
    e306:	ldr	r3, [sp, #16]
    e308:	adds	r3, #1
    e30a:	str	r3, [sp, #16]
    e30c:	ldr	r3, [sp, #12]
    e30e:	ands.w	r3, r3, #2
    e312:	str	r3, [sp, #44]	; 0x2c
    e314:	beq.n	e31c <_svfprintf_r+0x3bc>
    e316:	ldr	r3, [sp, #16]
    e318:	adds	r3, #2
    e31a:	str	r3, [sp, #16]
    e31c:	ldr	r3, [sp, #12]
    e31e:	ands.w	r3, r3, #132	; 0x84
    e322:	str	r3, [sp, #48]	; 0x30
    e324:	bne.w	e8de <_svfprintf_r+0x97e>
    e328:	ldr	r3, [sp, #32]
    e32a:	ldr	r2, [sp, #16]
    e32c:	subs	r5, r3, r2
    e32e:	cmp	r5, #0
    e330:	ble.w	e8de <_svfprintf_r+0x97e>
    e334:	cmp	r5, #16
    e336:	ldr	r1, [sp, #148]	; 0x94
    e338:	ldr	r2, [sp, #144]	; 0x90
    e33a:	ldr	r7, [pc, #672]	; (e5dc <_svfprintf_r+0x67c>)
    e33c:	ble.n	e38e <_svfprintf_r+0x42e>
    e33e:	str	r6, [sp, #80]	; 0x50
    e340:	mov	r0, r9
    e342:	movs	r4, #16
    e344:	mov	r9, r7
    e346:	ldr	r6, [sp, #20]
    e348:	mov	r7, r5
    e34a:	ldr	r5, [sp, #24]
    e34c:	b.n	e358 <_svfprintf_r+0x3f8>
    e34e:	subs	r7, #16
    e350:	cmp	r7, #16
    e352:	add.w	r0, r0, #8
    e356:	ble.n	e386 <_svfprintf_r+0x426>
    e358:	adds	r2, #1
    e35a:	ldr	r3, [pc, #640]	; (e5dc <_svfprintf_r+0x67c>)
    e35c:	str	r2, [sp, #144]	; 0x90
    e35e:	adds	r1, #16
    e360:	cmp	r2, #7
    e362:	str	r1, [sp, #148]	; 0x94
    e364:	stmia.w	r0, {r3, r4}
    e368:	ble.n	e34e <_svfprintf_r+0x3ee>
    e36a:	add	r2, sp, #140	; 0x8c
    e36c:	mov	r1, r6
    e36e:	mov	r0, r5
    e370:	bl	f644 <__ssprint_r>
    e374:	cmp	r0, #0
    e376:	bne.w	e154 <_svfprintf_r+0x1f4>
    e37a:	subs	r7, #16
    e37c:	cmp	r7, #16
    e37e:	ldr	r1, [sp, #148]	; 0x94
    e380:	ldr	r2, [sp, #144]	; 0x90
    e382:	add	r0, sp, #192	; 0xc0
    e384:	bgt.n	e358 <_svfprintf_r+0x3f8>
    e386:	ldr	r6, [sp, #80]	; 0x50
    e388:	mov	r5, r7
    e38a:	mov	r7, r9
    e38c:	mov	r9, r0
    e38e:	adds	r2, #1
    e390:	adds	r4, r5, r1
    e392:	cmp	r2, #7
    e394:	str	r4, [sp, #148]	; 0x94
    e396:	str	r2, [sp, #144]	; 0x90
    e398:	str.w	r7, [r9]
    e39c:	str.w	r5, [r9, #4]
    e3a0:	bgt.w	ebfe <_svfprintf_r+0xc9e>
    e3a4:	ldrb.w	r7, [sp, #111]	; 0x6f
    e3a8:	add.w	r9, r9, #8
    e3ac:	cbz	r7, e3cc <_svfprintf_r+0x46c>
    e3ae:	ldr	r3, [sp, #144]	; 0x90
    e3b0:	adds	r3, #1
    e3b2:	adds	r4, #1
    e3b4:	add.w	r1, sp, #111	; 0x6f
    e3b8:	movs	r2, #1
    e3ba:	cmp	r3, #7
    e3bc:	str	r4, [sp, #148]	; 0x94
    e3be:	str	r3, [sp, #144]	; 0x90
    e3c0:	stmia.w	r9, {r1, r2}
    e3c4:	bgt.w	eb12 <_svfprintf_r+0xbb2>
    e3c8:	add.w	r9, r9, #8
    e3cc:	ldr	r3, [sp, #44]	; 0x2c
    e3ce:	cbz	r3, e3ec <_svfprintf_r+0x48c>
    e3d0:	ldr	r3, [sp, #144]	; 0x90
    e3d2:	adds	r3, #1
    e3d4:	adds	r4, #2
    e3d6:	add	r1, sp, #112	; 0x70
    e3d8:	movs	r2, #2
    e3da:	cmp	r3, #7
    e3dc:	str	r4, [sp, #148]	; 0x94
    e3de:	str	r3, [sp, #144]	; 0x90
    e3e0:	stmia.w	r9, {r1, r2}
    e3e4:	bgt.w	eb2a <_svfprintf_r+0xbca>
    e3e8:	add.w	r9, r9, #8
    e3ec:	ldr	r3, [sp, #48]	; 0x30
    e3ee:	cmp	r3, #128	; 0x80
    e3f0:	beq.w	e9b6 <_svfprintf_r+0xa56>
    e3f4:	ldr	r3, [sp, #36]	; 0x24
    e3f6:	rsb	r7, r3, fp
    e3fa:	cmp	r7, #0
    e3fc:	ble.n	e466 <_svfprintf_r+0x506>
    e3fe:	ldr	r2, [pc, #480]	; (e5e0 <_svfprintf_r+0x680>)
    e400:	ldr	r3, [sp, #144]	; 0x90
    e402:	str	r2, [sp, #44]	; 0x2c
    e404:	cmp	r7, #16
    e406:	ble.n	e44e <_svfprintf_r+0x4ee>
    e408:	mov	r2, r4
    e40a:	mov.w	fp, #16
    e40e:	ldr	r5, [sp, #24]
    e410:	ldr	r4, [sp, #20]
    e412:	b.n	e41e <_svfprintf_r+0x4be>
    e414:	subs	r7, #16
    e416:	cmp	r7, #16
    e418:	add.w	r9, r9, #8
    e41c:	ble.n	e44c <_svfprintf_r+0x4ec>
    e41e:	adds	r3, #1
    e420:	adds	r2, #16
    e422:	cmp	r3, #7
    e424:	str	r2, [sp, #148]	; 0x94
    e426:	str	r3, [sp, #144]	; 0x90
    e428:	stmia.w	r9, {sl, fp}
    e42c:	ble.n	e414 <_svfprintf_r+0x4b4>
    e42e:	add	r2, sp, #140	; 0x8c
    e430:	mov	r1, r4
    e432:	mov	r0, r5
    e434:	bl	f644 <__ssprint_r>
    e438:	cmp	r0, #0
    e43a:	bne.w	e154 <_svfprintf_r+0x1f4>
    e43e:	subs	r7, #16
    e440:	cmp	r7, #16
    e442:	ldr	r2, [sp, #148]	; 0x94
    e444:	ldr	r3, [sp, #144]	; 0x90
    e446:	add.w	r9, sp, #192	; 0xc0
    e44a:	bgt.n	e41e <_svfprintf_r+0x4be>
    e44c:	mov	r4, r2
    e44e:	adds	r3, #1
    e450:	ldr	r2, [sp, #44]	; 0x2c
    e452:	str	r3, [sp, #144]	; 0x90
    e454:	add	r4, r7
    e456:	cmp	r3, #7
    e458:	str	r4, [sp, #148]	; 0x94
    e45a:	stmia.w	r9, {r2, r7}
    e45e:	bgt.w	eafa <_svfprintf_r+0xb9a>
    e462:	add.w	r9, r9, #8
    e466:	ldr	r3, [sp, #12]
    e468:	lsls	r2, r3, #23
    e46a:	bmi.w	e8e2 <_svfprintf_r+0x982>
    e46e:	ldr	r3, [sp, #144]	; 0x90
    e470:	ldr	r1, [sp, #36]	; 0x24
    e472:	str.w	r6, [r9]
    e476:	adds	r3, #1
    e478:	add	r4, r1
    e47a:	cmp	r3, #7
    e47c:	str	r4, [sp, #148]	; 0x94
    e47e:	str.w	r1, [r9, #4]
    e482:	str	r3, [sp, #144]	; 0x90
    e484:	bgt.w	eace <_svfprintf_r+0xb6e>
    e488:	add.w	r9, r9, #8
    e48c:	ldr	r3, [sp, #12]
    e48e:	lsls	r1, r3, #29
    e490:	bpl.n	e512 <_svfprintf_r+0x5b2>
    e492:	ldr	r3, [sp, #32]
    e494:	ldr	r2, [sp, #16]
    e496:	subs	r5, r3, r2
    e498:	cmp	r5, #0
    e49a:	ble.n	e512 <_svfprintf_r+0x5b2>
    e49c:	cmp	r5, #16
    e49e:	ldr	r3, [sp, #144]	; 0x90
    e4a0:	ldr	r7, [pc, #312]	; (e5dc <_svfprintf_r+0x67c>)
    e4a2:	ble.n	e4ec <_svfprintf_r+0x58c>
    e4a4:	mov	r2, r4
    e4a6:	movs	r6, #16
    e4a8:	ldr.w	fp, [sp, #24]
    e4ac:	ldr	r4, [sp, #20]
    e4ae:	b.n	e4ba <_svfprintf_r+0x55a>
    e4b0:	subs	r5, #16
    e4b2:	cmp	r5, #16
    e4b4:	add.w	r9, r9, #8
    e4b8:	ble.n	e4ea <_svfprintf_r+0x58a>
    e4ba:	adds	r3, #1
    e4bc:	ldr	r1, [pc, #284]	; (e5dc <_svfprintf_r+0x67c>)
    e4be:	str	r3, [sp, #144]	; 0x90
    e4c0:	adds	r2, #16
    e4c2:	cmp	r3, #7
    e4c4:	str	r2, [sp, #148]	; 0x94
    e4c6:	stmia.w	r9, {r1, r6}
    e4ca:	ble.n	e4b0 <_svfprintf_r+0x550>
    e4cc:	add	r2, sp, #140	; 0x8c
    e4ce:	mov	r1, r4
    e4d0:	mov	r0, fp
    e4d2:	bl	f644 <__ssprint_r>
    e4d6:	cmp	r0, #0
    e4d8:	bne.w	e154 <_svfprintf_r+0x1f4>
    e4dc:	subs	r5, #16
    e4de:	cmp	r5, #16
    e4e0:	ldr	r2, [sp, #148]	; 0x94
    e4e2:	ldr	r3, [sp, #144]	; 0x90
    e4e4:	add.w	r9, sp, #192	; 0xc0
    e4e8:	bgt.n	e4ba <_svfprintf_r+0x55a>
    e4ea:	mov	r4, r2
    e4ec:	adds	r3, #1
    e4ee:	add	r4, r5
    e4f0:	cmp	r3, #7
    e4f2:	str	r4, [sp, #148]	; 0x94
    e4f4:	str	r3, [sp, #144]	; 0x90
    e4f6:	str.w	r7, [r9]
    e4fa:	str.w	r5, [r9, #4]
    e4fe:	ble.n	e512 <_svfprintf_r+0x5b2>
    e500:	add	r2, sp, #140	; 0x8c
    e502:	ldr	r1, [sp, #20]
    e504:	ldr	r0, [sp, #24]
    e506:	bl	f644 <__ssprint_r>
    e50a:	cmp	r0, #0
    e50c:	bne.w	e154 <_svfprintf_r+0x1f4>
    e510:	ldr	r4, [sp, #148]	; 0x94
    e512:	ldr	r3, [sp, #28]
    e514:	ldr	r2, [sp, #32]
    e516:	ldr	r1, [sp, #16]
    e518:	cmp	r2, r1
    e51a:	ite	ge
    e51c:	addge	r3, r3, r2
    e51e:	addlt	r3, r3, r1
    e520:	str	r3, [sp, #28]
    e522:	cmp	r4, #0
    e524:	bne.w	eae6 <_svfprintf_r+0xb86>
    e528:	movs	r3, #0
    e52a:	str	r3, [sp, #144]	; 0x90
    e52c:	add.w	r9, sp, #192	; 0xc0
    e530:	b.n	dfae <_svfprintf_r+0x4e>
    e532:	str	r3, [sp, #52]	; 0x34
    e534:	mov	fp, r5
    e536:	cmp	r2, #0
    e538:	bne.w	f600 <_svfprintf_r+0x16a0>
    e53c:	ldr	r3, [sp, #12]
    e53e:	ldr	r7, [sp, #40]	; 0x28
    e540:	lsls	r2, r3, #28
    e542:	add.w	r7, r7, #7
    e546:	bpl.w	f032 <_svfprintf_r+0x10d2>
    e54a:	bic.w	r3, r7, #7
    e54e:	vldr	d7, [r3]
    e552:	vstr	d7, [sp, #64]	; 0x40
    e556:	add.w	r2, r3, #8
    e55a:	str	r2, [sp, #40]	; 0x28
    e55c:	ldrd	r1, r2, [sp, #64]	; 0x40
    e560:	bic.w	r3, r2, #2147483648	; 0x80000000
    e564:	str	r1, [sp, #88]	; 0x58
    e566:	str	r3, [sp, #92]	; 0x5c
    e568:	ldrd	r4, r5, [sp, #88]	; 0x58
    e56c:	mov.w	r2, #4294967295
    e570:	mov	r0, r4
    e572:	mov	r1, r5
    e574:	ldr	r3, [pc, #108]	; (e5e4 <_svfprintf_r+0x684>)
    e576:	bl	b1e0 <__aeabi_dcmpun>
    e57a:	cmp	r0, #0
    e57c:	bne.w	ef34 <_svfprintf_r+0xfd4>
    e580:	mov.w	r2, #4294967295
    e584:	ldr	r3, [pc, #92]	; (e5e4 <_svfprintf_r+0x684>)
    e586:	mov	r0, r4
    e588:	mov	r1, r5
    e58a:	bl	b1a4 <__aeabi_dcmple>
    e58e:	cmp	r0, #0
    e590:	bne.w	ef34 <_svfprintf_r+0xfd4>
    e594:	movs	r2, #0
    e596:	movs	r3, #0
    e598:	ldrd	r0, r1, [sp, #64]	; 0x40
    e59c:	bl	b190 <__aeabi_dcmplt>
    e5a0:	cmp	r0, #0
    e5a2:	bne.w	f44a <_svfprintf_r+0x14ea>
    e5a6:	ldrb.w	r7, [sp, #111]	; 0x6f
    e5aa:	ldr	r6, [pc, #60]	; (e5e8 <_svfprintf_r+0x688>)
    e5ac:	ldr	r3, [pc, #60]	; (e5ec <_svfprintf_r+0x68c>)
    e5ae:	ldr	r1, [sp, #12]
    e5b0:	bic.w	r1, r1, #128	; 0x80
    e5b4:	str	r1, [sp, #12]
    e5b6:	ldr	r1, [sp, #52]	; 0x34
    e5b8:	movs	r2, #3
    e5ba:	mov.w	fp, #0
    e5be:	str	r2, [sp, #16]
    e5c0:	cmp	r1, #71	; 0x47
    e5c2:	it	le
    e5c4:	movle	r6, r3
    e5c6:	str	r2, [sp, #36]	; 0x24
    e5c8:	str.w	fp, [sp, #60]	; 0x3c
    e5cc:	b.n	e304 <_svfprintf_r+0x3a4>
    e5ce:	ldr	r3, [sp, #12]
    e5d0:	orr.w	r3, r3, #8
    e5d4:	str	r3, [sp, #12]
    e5d6:	ldrb.w	r3, [r8]
    e5da:	b.n	e014 <_svfprintf_r+0xb4>
    e5dc:	.word	0x00010180
    e5e0:	.word	0x00010130
    e5e4:	.word	0x7fefffff
    e5e8:	.word	0x00010144
    e5ec:	.word	0x00010140
    e5f0:	str	r3, [sp, #52]	; 0x34
    e5f2:	mov	fp, r5
    e5f4:	cmp	r2, #0
    e5f6:	bne.w	f618 <_svfprintf_r+0x16b8>
    e5fa:	ldr	r3, [sp, #12]
    e5fc:	orr.w	r3, r3, #16
    e600:	str	r3, [sp, #12]
    e602:	ldr	r2, [sp, #12]
    e604:	ands.w	r3, r2, #32
    e608:	bne.w	e180 <_svfprintf_r+0x220>
    e60c:	ldr	r1, [sp, #12]
    e60e:	ands.w	r2, r1, #16
    e612:	beq.w	eecc <_svfprintf_r+0xf6c>
    e616:	ldr	r0, [sp, #40]	; 0x28
    e618:	strb.w	r3, [sp, #111]	; 0x6f
    e61c:	cmp.w	fp, #0
    e620:	ldr	r4, [r0, #0]
    e622:	add.w	r7, r0, #4
    e626:	mov.w	r5, #0
    e62a:	blt.w	f060 <_svfprintf_r+0x1100>
    e62e:	mov	r2, r1
    e630:	bic.w	r2, r2, #128	; 0x80
    e634:	str	r2, [sp, #12]
    e636:	orrs.w	r2, r4, r5
    e63a:	str	r7, [sp, #40]	; 0x28
    e63c:	beq.w	e8b4 <_svfprintf_r+0x954>
    e640:	mov	r7, r3
    e642:	b.n	e1ac <_svfprintf_r+0x24c>
    e644:	str	r3, [sp, #52]	; 0x34
    e646:	mov	fp, r5
    e648:	cmp	r2, #0
    e64a:	bne.w	f610 <_svfprintf_r+0x16b0>
    e64e:	ldr	r3, [sp, #12]
    e650:	orr.w	r3, r3, #16
    e654:	str	r3, [sp, #12]
    e656:	ldr	r2, [sp, #12]
    e658:	ands.w	r3, r2, #32
    e65c:	beq.w	ecb8 <_svfprintf_r+0xd58>
    e660:	ldr	r7, [sp, #40]	; 0x28
    e662:	adds	r7, #7
    e664:	bic.w	r3, r7, #7
    e668:	movs	r7, #0
    e66a:	add.w	r1, r3, #8
    e66e:	cmp	fp, r7
    e670:	str	r1, [sp, #40]	; 0x28
    e672:	ldrd	r4, r5, [r3]
    e676:	strb.w	r7, [sp, #111]	; 0x6f
    e67a:	blt.w	ed2a <_svfprintf_r+0xdca>
    e67e:	bic.w	r3, r2, #128	; 0x80
    e682:	str	r3, [sp, #12]
    e684:	orrs.w	r3, r4, r5
    e688:	bne.w	e2bc <_svfprintf_r+0x35c>
    e68c:	cmp.w	fp, #0
    e690:	beq.w	e87e <_svfprintf_r+0x91e>
    e694:	movs	r4, #0
    e696:	add	r6, sp, #256	; 0x100
    e698:	adds	r4, #48	; 0x30
    e69a:	strb.w	r4, [r6, #-65]!
    e69e:	b.n	e2f0 <_svfprintf_r+0x390>
    e6a0:	str	r3, [sp, #52]	; 0x34
    e6a2:	mov	fp, r5
    e6a4:	cmp	r2, #0
    e6a6:	bne.w	f608 <_svfprintf_r+0x16a8>
    e6aa:	ldr	r3, [sp, #12]
    e6ac:	ldr	r0, [pc, #700]	; (e96c <_svfprintf_r+0xa0c>)
    e6ae:	lsls	r5, r3, #26
    e6b0:	bpl.w	e81e <_svfprintf_r+0x8be>
    e6b4:	ldr	r7, [sp, #40]	; 0x28
    e6b6:	adds	r7, #7
    e6b8:	bic.w	r3, r7, #7
    e6bc:	ldrd	r4, r5, [r3]
    e6c0:	add.w	r2, r3, #8
    e6c4:	str	r2, [sp, #40]	; 0x28
    e6c6:	ldr	r2, [sp, #12]
    e6c8:	ands.w	r7, r2, #1
    e6cc:	beq.w	eb42 <_svfprintf_r+0xbe2>
    e6d0:	orrs.w	r3, r4, r5
    e6d4:	beq.w	f0dc <_svfprintf_r+0x117c>
    e6d8:	ldrb.w	r2, [sp, #52]	; 0x34
    e6dc:	strb.w	r2, [sp, #113]	; 0x71
    e6e0:	movs	r7, #0
    e6e2:	ldr	r2, [sp, #12]
    e6e4:	strb.w	r7, [sp, #111]	; 0x6f
    e6e8:	movs	r3, #48	; 0x30
    e6ea:	cmp	fp, r7
    e6ec:	strb.w	r3, [sp, #112]	; 0x70
    e6f0:	orr.w	r3, r2, #2
    e6f4:	blt.w	f454 <_svfprintf_r+0x14f4>
    e6f8:	bic.w	r3, r2, #128	; 0x80
    e6fc:	orr.w	r3, r3, #2
    e700:	str	r3, [sp, #12]
    e702:	add	r6, sp, #192	; 0xc0
    e704:	lsrs	r3, r4, #4
    e706:	and.w	r1, r4, #15
    e70a:	orr.w	r3, r3, r5, lsl #28
    e70e:	lsrs	r2, r5, #4
    e710:	mov	r4, r3
    e712:	mov	r5, r2
    e714:	ldrb	r3, [r0, r1]
    e716:	strb.w	r3, [r6, #-1]!
    e71a:	orrs.w	r3, r4, r5
    e71e:	bne.n	e704 <_svfprintf_r+0x7a4>
    e720:	b.n	e2f0 <_svfprintf_r+0x390>
    e722:	ldr	r1, [sp, #40]	; 0x28
    e724:	str	r3, [sp, #52]	; 0x34
    e726:	ldr	r2, [r1, #0]
    e728:	strb.w	r2, [sp, #152]	; 0x98
    e72c:	movs	r3, #0
    e72e:	mov	r2, r1
    e730:	mov	r7, r3
    e732:	strb.w	r3, [sp, #111]	; 0x6f
    e736:	adds	r2, #4
    e738:	movs	r3, #1
    e73a:	str	r3, [sp, #16]
    e73c:	mov	fp, r7
    e73e:	str	r7, [sp, #60]	; 0x3c
    e740:	str	r2, [sp, #40]	; 0x28
    e742:	str	r3, [sp, #36]	; 0x24
    e744:	add	r6, sp, #152	; 0x98
    e746:	b.n	e30c <_svfprintf_r+0x3ac>
    e748:	str	r3, [sp, #52]	; 0x34
    e74a:	mov	fp, r5
    e74c:	cmp	r2, #0
    e74e:	beq.w	e278 <_svfprintf_r+0x318>
    e752:	strb.w	r1, [sp, #111]	; 0x6f
    e756:	b.n	e278 <_svfprintf_r+0x318>
    e758:	ldr	r3, [sp, #12]
    e75a:	orr.w	r3, r3, #64	; 0x40
    e75e:	str	r3, [sp, #12]
    e760:	ldrb.w	r3, [r8]
    e764:	b.n	e014 <_svfprintf_r+0xb4>
    e766:	ldrb.w	r3, [r8]
    e76a:	cmp	r1, #0
    e76c:	bne.w	e014 <_svfprintf_r+0xb4>
    e770:	movs	r2, #1
    e772:	movs	r1, #32
    e774:	b.n	e014 <_svfprintf_r+0xb4>
    e776:	ldr	r3, [sp, #12]
    e778:	orr.w	r3, r3, #1
    e77c:	str	r3, [sp, #12]
    e77e:	ldrb.w	r3, [r8]
    e782:	b.n	e014 <_svfprintf_r+0xb4>
    e784:	ldr	r4, [sp, #40]	; 0x28
    e786:	ldr	r3, [r4, #0]
    e788:	str	r3, [sp, #32]
    e78a:	mov	r0, r3
    e78c:	cmp	r0, #0
    e78e:	mov	r3, r4
    e790:	add.w	r3, r3, #4
    e794:	blt.w	e0d8 <_svfprintf_r+0x178>
    e798:	str	r3, [sp, #40]	; 0x28
    e79a:	ldrb.w	r3, [r8]
    e79e:	b.n	e014 <_svfprintf_r+0xb4>
    e7a0:	ldrb.w	r3, [r8]
    e7a4:	movs	r2, #1
    e7a6:	movs	r1, #43	; 0x2b
    e7a8:	b.n	e014 <_svfprintf_r+0xb4>
    e7aa:	ldr	r3, [sp, #12]
    e7ac:	orr.w	r3, r3, #32
    e7b0:	str	r3, [sp, #12]
    e7b2:	ldrb.w	r3, [r8]
    e7b6:	b.n	e014 <_svfprintf_r+0xb4>
    e7b8:	ldr	r2, [sp, #40]	; 0x28
    e7ba:	str	r3, [sp, #52]	; 0x34
    e7bc:	ldr	r6, [r2, #0]
    e7be:	movs	r4, #0
    e7c0:	strb.w	r4, [sp, #111]	; 0x6f
    e7c4:	adds	r7, r2, #4
    e7c6:	cmp	r6, #0
    e7c8:	beq.w	f404 <_svfprintf_r+0x14a4>
    e7cc:	cmp	r5, #0
    e7ce:	blt.w	f294 <_svfprintf_r+0x1334>
    e7d2:	mov	r2, r5
    e7d4:	mov	r1, r4
    e7d6:	mov	r0, r6
    e7d8:	bl	bba0 <memchr>
    e7dc:	cmp	r0, #0
    e7de:	beq.w	f4a8 <_svfprintf_r+0x1548>
    e7e2:	subs	r3, r0, r6
    e7e4:	str	r3, [sp, #36]	; 0x24
    e7e6:	mov	fp, r4
    e7e8:	bic.w	r3, r3, r3, asr #31
    e7ec:	str	r7, [sp, #40]	; 0x28
    e7ee:	str	r3, [sp, #16]
    e7f0:	str.w	fp, [sp, #60]	; 0x3c
    e7f4:	ldrb.w	r7, [sp, #111]	; 0x6f
    e7f8:	b.n	e304 <_svfprintf_r+0x3a4>
    e7fa:	str	r3, [sp, #52]	; 0x34
    e7fc:	mov	fp, r5
    e7fe:	cmp	r2, #0
    e800:	beq.w	e656 <_svfprintf_r+0x6f6>
    e804:	strb.w	r1, [sp, #111]	; 0x6f
    e808:	b.n	e656 <_svfprintf_r+0x6f6>
    e80a:	str	r3, [sp, #52]	; 0x34
    e80c:	mov	fp, r5
    e80e:	cmp	r2, #0
    e810:	bne.w	f630 <_svfprintf_r+0x16d0>
    e814:	ldr	r3, [sp, #12]
    e816:	ldr	r0, [pc, #344]	; (e970 <_svfprintf_r+0xa10>)
    e818:	lsls	r5, r3, #26
    e81a:	bmi.w	e6b4 <_svfprintf_r+0x754>
    e81e:	ldr	r3, [sp, #12]
    e820:	lsls	r4, r3, #27
    e822:	bpl.w	f0a2 <_svfprintf_r+0x1142>
    e826:	ldr	r2, [sp, #40]	; 0x28
    e828:	mov	r3, r2
    e82a:	adds	r3, #4
    e82c:	ldr	r4, [r2, #0]
    e82e:	str	r3, [sp, #40]	; 0x28
    e830:	movs	r5, #0
    e832:	b.n	e6c6 <_svfprintf_r+0x766>
    e834:	ldrb.w	r3, [r8]
    e838:	cmp	r3, #108	; 0x6c
    e83a:	beq.w	f1c2 <_svfprintf_r+0x1262>
    e83e:	ldr	r0, [sp, #12]
    e840:	orr.w	r0, r0, #16
    e844:	str	r0, [sp, #12]
    e846:	b.w	e014 <_svfprintf_r+0xb4>
    e84a:	cmp	r2, #0
    e84c:	bne.w	f628 <_svfprintf_r+0x16c8>
    e850:	ldr	r3, [sp, #12]
    e852:	lsls	r3, r3, #26
    e854:	bpl.w	ef06 <_svfprintf_r+0xfa6>
    e858:	ldr	r2, [sp, #40]	; 0x28
    e85a:	ldr	r1, [sp, #28]
    e85c:	ldr	r3, [r2, #0]
    e85e:	asrs	r5, r1, #31
    e860:	mov	r0, r1
    e862:	adds	r2, #4
    e864:	mov	r1, r5
    e866:	str	r2, [sp, #40]	; 0x28
    e868:	strd	r0, r1, [r3]
    e86c:	b.w	dfae <_svfprintf_r+0x4e>
    e870:	ldr	r0, [pc, #252]	; (e970 <_svfprintf_r+0xa10>)
    e872:	str	r2, [sp, #52]	; 0x34
    e874:	cmp.w	fp, #0
    e878:	bne.w	eb64 <_svfprintf_r+0xc04>
    e87c:	mov	r7, fp
    e87e:	mov.w	fp, #0
    e882:	str.w	fp, [sp, #36]	; 0x24
    e886:	add	r6, sp, #192	; 0xc0
    e888:	b.n	e2f6 <_svfprintf_r+0x396>
    e88a:	str	r3, [sp, #52]	; 0x34
    e88c:	cmp	r2, #0
    e88e:	bne.w	f620 <_svfprintf_r+0x16c0>
    e892:	ldr	r2, [sp, #52]	; 0x34
    e894:	cmp	r2, #0
    e896:	beq.w	e146 <_svfprintf_r+0x1e6>
    e89a:	movs	r3, #0
    e89c:	movs	r1, #1
    e89e:	mov	r7, r3
    e8a0:	str	r1, [sp, #16]
    e8a2:	strb.w	r2, [sp, #152]	; 0x98
    e8a6:	strb.w	r3, [sp, #111]	; 0x6f
    e8aa:	mov	fp, r3
    e8ac:	str	r3, [sp, #60]	; 0x3c
    e8ae:	str	r1, [sp, #36]	; 0x24
    e8b0:	add	r6, sp, #152	; 0x98
    e8b2:	b.n	e30c <_svfprintf_r+0x3ac>
    e8b4:	cmp.w	fp, #0
    e8b8:	beq.w	f4d8 <_svfprintf_r+0x1578>
    e8bc:	movs	r7, #0
    e8be:	movs	r4, #0
    e8c0:	movs	r5, #0
    e8c2:	b.n	e1ac <_svfprintf_r+0x24c>
    e8c4:	ldr	r0, [pc, #168]	; (e970 <_svfprintf_r+0xa10>)
    e8c6:	str	r3, [sp, #12]
    e8c8:	str	r2, [sp, #52]	; 0x34
    e8ca:	orrs.w	r3, r4, r5
    e8ce:	str	r7, [sp, #40]	; 0x28
    e8d0:	mov.w	r7, #0
    e8d4:	bne.w	e702 <_svfprintf_r+0x7a2>
    e8d8:	movs	r4, #0
    e8da:	movs	r5, #0
    e8dc:	b.n	e702 <_svfprintf_r+0x7a2>
    e8de:	ldr	r4, [sp, #148]	; 0x94
    e8e0:	b.n	e3ac <_svfprintf_r+0x44c>
    e8e2:	ldr	r3, [sp, #52]	; 0x34
    e8e4:	cmp	r3, #101	; 0x65
    e8e6:	ble.w	ea3e <_svfprintf_r+0xade>
    e8ea:	movs	r2, #0
    e8ec:	movs	r3, #0
    e8ee:	ldrd	r0, r1, [sp, #64]	; 0x40
    e8f2:	bl	b17c <__aeabi_dcmpeq>
    e8f6:	cmp	r0, #0
    e8f8:	beq.w	eb68 <_svfprintf_r+0xc08>
    e8fc:	ldr	r3, [sp, #144]	; 0x90
    e8fe:	ldr	r2, [pc, #116]	; (e974 <_svfprintf_r+0xa14>)
    e900:	str.w	r2, [r9]
    e904:	adds	r3, #1
    e906:	adds	r4, #1
    e908:	movs	r2, #1
    e90a:	cmp	r3, #7
    e90c:	str	r4, [sp, #148]	; 0x94
    e90e:	str	r3, [sp, #144]	; 0x90
    e910:	str.w	r2, [r9, #4]
    e914:	bgt.w	f0f4 <_svfprintf_r+0x1194>
    e918:	add.w	r9, r9, #8
    e91c:	ldr	r3, [sp, #116]	; 0x74
    e91e:	ldr	r2, [sp, #56]	; 0x38
    e920:	cmp	r3, r2
    e922:	blt.n	e92c <_svfprintf_r+0x9cc>
    e924:	ldr	r3, [sp, #12]
    e926:	lsls	r3, r3, #31
    e928:	bpl.w	e48c <_svfprintf_r+0x52c>
    e92c:	ldr	r3, [sp, #144]	; 0x90
    e92e:	ldr	r1, [sp, #72]	; 0x48
    e930:	ldr	r2, [sp, #76]	; 0x4c
    e932:	str.w	r2, [r9]
    e936:	adds	r3, #1
    e938:	add	r4, r1
    e93a:	cmp	r3, #7
    e93c:	str	r4, [sp, #148]	; 0x94
    e93e:	str.w	r1, [r9, #4]
    e942:	str	r3, [sp, #144]	; 0x90
    e944:	bgt.w	f1d6 <_svfprintf_r+0x1276>
    e948:	add.w	r9, r9, #8
    e94c:	ldr	r3, [sp, #56]	; 0x38
    e94e:	subs	r5, r3, #1
    e950:	cmp	r5, #0
    e952:	ble.w	e48c <_svfprintf_r+0x52c>
    e956:	ldr	r2, [pc, #32]	; (e978 <_svfprintf_r+0xa18>)
    e958:	ldr	r3, [sp, #144]	; 0x90
    e95a:	str	r2, [sp, #44]	; 0x2c
    e95c:	cmp	r5, #16
    e95e:	ble.w	ed34 <_svfprintf_r+0xdd4>
    e962:	movs	r6, #16
    e964:	ldr	r7, [sp, #24]
    e966:	ldr.w	fp, [sp, #20]
    e96a:	b.n	e988 <_svfprintf_r+0xa28>
    e96c:	.word	0x00010150
    e970:	.word	0x00010164
    e974:	.word	0x0001012c
    e978:	.word	0x00010130
    e97c:	add.w	r9, r9, #8
    e980:	subs	r5, #16
    e982:	cmp	r5, #16
    e984:	ble.w	ed34 <_svfprintf_r+0xdd4>
    e988:	adds	r3, #1
    e98a:	adds	r4, #16
    e98c:	cmp	r3, #7
    e98e:	str	r4, [sp, #148]	; 0x94
    e990:	str	r3, [sp, #144]	; 0x90
    e992:	str.w	sl, [r9]
    e996:	str.w	r6, [r9, #4]
    e99a:	ble.n	e97c <_svfprintf_r+0xa1c>
    e99c:	add	r2, sp, #140	; 0x8c
    e99e:	mov	r1, fp
    e9a0:	mov	r0, r7
    e9a2:	bl	f644 <__ssprint_r>
    e9a6:	cmp	r0, #0
    e9a8:	bne.w	e154 <_svfprintf_r+0x1f4>
    e9ac:	ldr	r4, [sp, #148]	; 0x94
    e9ae:	ldr	r3, [sp, #144]	; 0x90
    e9b0:	add.w	r9, sp, #192	; 0xc0
    e9b4:	b.n	e980 <_svfprintf_r+0xa20>
    e9b6:	ldr	r3, [sp, #32]
    e9b8:	ldr	r2, [sp, #16]
    e9ba:	subs	r7, r3, r2
    e9bc:	cmp	r7, #0
    e9be:	ble.w	e3f4 <_svfprintf_r+0x494>
    e9c2:	ldr	r2, [pc, #752]	; (ecb4 <_svfprintf_r+0xd54>)
    e9c4:	ldr	r3, [sp, #144]	; 0x90
    e9c6:	str	r2, [sp, #44]	; 0x2c
    e9c8:	cmp	r7, #16
    e9ca:	ble.n	ea24 <_svfprintf_r+0xac4>
    e9cc:	mov	r2, r9
    e9ce:	mov	r1, r4
    e9d0:	mov	r9, r7
    e9d2:	movs	r5, #16
    e9d4:	mov	r7, r6
    e9d6:	ldr	r4, [sp, #24]
    e9d8:	ldr	r6, [sp, #20]
    e9da:	b.n	e9ea <_svfprintf_r+0xa8a>
    e9dc:	sub.w	r9, r9, #16
    e9e0:	cmp.w	r9, #16
    e9e4:	add.w	r2, r2, #8
    e9e8:	ble.n	ea1c <_svfprintf_r+0xabc>
    e9ea:	adds	r3, #1
    e9ec:	adds	r1, #16
    e9ee:	cmp	r3, #7
    e9f0:	str	r1, [sp, #148]	; 0x94
    e9f2:	str	r3, [sp, #144]	; 0x90
    e9f4:	str.w	sl, [r2]
    e9f8:	str	r5, [r2, #4]
    e9fa:	ble.n	e9dc <_svfprintf_r+0xa7c>
    e9fc:	add	r2, sp, #140	; 0x8c
    e9fe:	mov	r1, r6
    ea00:	mov	r0, r4
    ea02:	bl	f644 <__ssprint_r>
    ea06:	cmp	r0, #0
    ea08:	bne.w	e154 <_svfprintf_r+0x1f4>
    ea0c:	sub.w	r9, r9, #16
    ea10:	cmp.w	r9, #16
    ea14:	ldr	r1, [sp, #148]	; 0x94
    ea16:	ldr	r3, [sp, #144]	; 0x90
    ea18:	add	r2, sp, #192	; 0xc0
    ea1a:	bgt.n	e9ea <_svfprintf_r+0xa8a>
    ea1c:	mov	r6, r7
    ea1e:	mov	r4, r1
    ea20:	mov	r7, r9
    ea22:	mov	r9, r2
    ea24:	adds	r3, #1
    ea26:	ldr	r2, [sp, #44]	; 0x2c
    ea28:	str	r3, [sp, #144]	; 0x90
    ea2a:	add	r4, r7
    ea2c:	cmp	r3, #7
    ea2e:	str	r4, [sp, #148]	; 0x94
    ea30:	stmia.w	r9, {r2, r7}
    ea34:	bgt.w	eeb2 <_svfprintf_r+0xf52>
    ea38:	add.w	r9, r9, #8
    ea3c:	b.n	e3f4 <_svfprintf_r+0x494>
    ea3e:	ldr	r3, [sp, #56]	; 0x38
    ea40:	ldr	r5, [sp, #144]	; 0x90
    ea42:	cmp	r3, #1
    ea44:	ble.w	ee5c <_svfprintf_r+0xefc>
    ea48:	adds	r5, #1
    ea4a:	adds	r4, #1
    ea4c:	movs	r3, #1
    ea4e:	cmp	r5, #7
    ea50:	str	r4, [sp, #148]	; 0x94
    ea52:	str	r5, [sp, #144]	; 0x90
    ea54:	str.w	r6, [r9]
    ea58:	str.w	r3, [r9, #4]
    ea5c:	bgt.w	ee7e <_svfprintf_r+0xf1e>
    ea60:	add.w	r9, r9, #8
    ea64:	ldr	r2, [sp, #72]	; 0x48
    ea66:	ldr	r3, [sp, #76]	; 0x4c
    ea68:	str.w	r3, [r9]
    ea6c:	adds	r5, #1
    ea6e:	add	r4, r2
    ea70:	cmp	r5, #7
    ea72:	str	r4, [sp, #148]	; 0x94
    ea74:	str	r5, [sp, #144]	; 0x90
    ea76:	str.w	r2, [r9, #4]
    ea7a:	bgt.w	ee98 <_svfprintf_r+0xf38>
    ea7e:	add.w	r9, r9, #8
    ea82:	movs	r3, #0
    ea84:	movs	r2, #0
    ea86:	ldrd	r0, r1, [sp, #64]	; 0x40
    ea8a:	bl	b17c <__aeabi_dcmpeq>
    ea8e:	ldr	r3, [sp, #56]	; 0x38
    ea90:	cmp	r0, #0
    ea92:	bne.w	ec1c <_svfprintf_r+0xcbc>
    ea96:	subs	r3, #1
    ea98:	adds	r5, #1
    ea9a:	adds	r6, #1
    ea9c:	add	r4, r3
    ea9e:	cmp	r5, #7
    eaa0:	str	r5, [sp, #144]	; 0x90
    eaa2:	str	r4, [sp, #148]	; 0x94
    eaa4:	str.w	r6, [r9]
    eaa8:	str.w	r3, [r9, #4]
    eaac:	bgt.w	ec9a <_svfprintf_r+0xd3a>
    eab0:	add.w	r9, r9, #8
    eab4:	ldr	r2, [sp, #84]	; 0x54
    eab6:	str.w	r2, [r9, #4]
    eaba:	adds	r5, #1
    eabc:	add	r4, r2
    eabe:	add	r3, sp, #124	; 0x7c
    eac0:	cmp	r5, #7
    eac2:	str	r4, [sp, #148]	; 0x94
    eac4:	str	r5, [sp, #144]	; 0x90
    eac6:	str.w	r3, [r9]
    eaca:	ble.w	e488 <_svfprintf_r+0x528>
    eace:	add	r2, sp, #140	; 0x8c
    ead0:	ldr	r1, [sp, #20]
    ead2:	ldr	r0, [sp, #24]
    ead4:	bl	f644 <__ssprint_r>
    ead8:	cmp	r0, #0
    eada:	bne.w	e154 <_svfprintf_r+0x1f4>
    eade:	ldr	r4, [sp, #148]	; 0x94
    eae0:	add.w	r9, sp, #192	; 0xc0
    eae4:	b.n	e48c <_svfprintf_r+0x52c>
    eae6:	add	r2, sp, #140	; 0x8c
    eae8:	ldr	r1, [sp, #20]
    eaea:	ldr	r0, [sp, #24]
    eaec:	bl	f644 <__ssprint_r>
    eaf0:	cmp	r0, #0
    eaf2:	beq.w	e528 <_svfprintf_r+0x5c8>
    eaf6:	b.w	e154 <_svfprintf_r+0x1f4>
    eafa:	add	r2, sp, #140	; 0x8c
    eafc:	ldr	r1, [sp, #20]
    eafe:	ldr	r0, [sp, #24]
    eb00:	bl	f644 <__ssprint_r>
    eb04:	cmp	r0, #0
    eb06:	bne.w	e154 <_svfprintf_r+0x1f4>
    eb0a:	ldr	r4, [sp, #148]	; 0x94
    eb0c:	add.w	r9, sp, #192	; 0xc0
    eb10:	b.n	e466 <_svfprintf_r+0x506>
    eb12:	add	r2, sp, #140	; 0x8c
    eb14:	ldr	r1, [sp, #20]
    eb16:	ldr	r0, [sp, #24]
    eb18:	bl	f644 <__ssprint_r>
    eb1c:	cmp	r0, #0
    eb1e:	bne.w	e154 <_svfprintf_r+0x1f4>
    eb22:	ldr	r4, [sp, #148]	; 0x94
    eb24:	add.w	r9, sp, #192	; 0xc0
    eb28:	b.n	e3cc <_svfprintf_r+0x46c>
    eb2a:	add	r2, sp, #140	; 0x8c
    eb2c:	ldr	r1, [sp, #20]
    eb2e:	ldr	r0, [sp, #24]
    eb30:	bl	f644 <__ssprint_r>
    eb34:	cmp	r0, #0
    eb36:	bne.w	e154 <_svfprintf_r+0x1f4>
    eb3a:	ldr	r4, [sp, #148]	; 0x94
    eb3c:	add.w	r9, sp, #192	; 0xc0
    eb40:	b.n	e3ec <_svfprintf_r+0x48c>
    eb42:	cmp.w	fp, #0
    eb46:	strb.w	r7, [sp, #111]	; 0x6f
    eb4a:	blt.w	f10c <_svfprintf_r+0x11ac>
    eb4e:	bic.w	r3, r2, #128	; 0x80
    eb52:	str	r3, [sp, #12]
    eb54:	orrs.w	r3, r4, r5
    eb58:	bne.w	e702 <_svfprintf_r+0x7a2>
    eb5c:	cmp.w	fp, #0
    eb60:	beq.w	e87c <_svfprintf_r+0x91c>
    eb64:	movs	r7, #0
    eb66:	b.n	e8d8 <_svfprintf_r+0x978>
    eb68:	ldr	r5, [sp, #116]	; 0x74
    eb6a:	cmp	r5, #0
    eb6c:	ble.w	f112 <_svfprintf_r+0x11b2>
    eb70:	ldr	r3, [sp, #60]	; 0x3c
    eb72:	ldr	r2, [sp, #56]	; 0x38
    eb74:	cmp	r3, r2
    eb76:	it	ge
    eb78:	movge	r3, r2
    eb7a:	cmp	r3, #0
    eb7c:	mov	r5, r3
    eb7e:	ble.n	eb9c <_svfprintf_r+0xc3c>
    eb80:	ldr	r3, [sp, #144]	; 0x90
    eb82:	str.w	r6, [r9]
    eb86:	adds	r3, #1
    eb88:	add	r4, r5
    eb8a:	cmp	r3, #7
    eb8c:	str	r4, [sp, #148]	; 0x94
    eb8e:	str.w	r5, [r9, #4]
    eb92:	str	r3, [sp, #144]	; 0x90
    eb94:	bgt.w	f2ea <_svfprintf_r+0x138a>
    eb98:	add.w	r9, r9, #8
    eb9c:	ldr	r3, [sp, #60]	; 0x3c
    eb9e:	cmp	r5, #0
    eba0:	it	ge
    eba2:	subge	r3, r3, r5
    eba4:	cmp	r3, #0
    eba6:	mov	r5, r3
    eba8:	ble.w	ed9c <_svfprintf_r+0xe3c>
    ebac:	ldr	r2, [pc, #260]	; (ecb4 <_svfprintf_r+0xd54>)
    ebae:	ldr	r3, [sp, #144]	; 0x90
    ebb0:	str	r2, [sp, #44]	; 0x2c
    ebb2:	cmp	r5, #16
    ebb4:	ble.w	f0be <_svfprintf_r+0x115e>
    ebb8:	mov	r2, r4
    ebba:	movs	r7, #16
    ebbc:	ldr.w	fp, [sp, #24]
    ebc0:	ldr	r4, [sp, #20]
    ebc2:	b.n	ebd0 <_svfprintf_r+0xc70>
    ebc4:	add.w	r9, r9, #8
    ebc8:	subs	r5, #16
    ebca:	cmp	r5, #16
    ebcc:	ble.w	f0bc <_svfprintf_r+0x115c>
    ebd0:	adds	r3, #1
    ebd2:	adds	r2, #16
    ebd4:	cmp	r3, #7
    ebd6:	str	r2, [sp, #148]	; 0x94
    ebd8:	str	r3, [sp, #144]	; 0x90
    ebda:	str.w	sl, [r9]
    ebde:	str.w	r7, [r9, #4]
    ebe2:	ble.n	ebc4 <_svfprintf_r+0xc64>
    ebe4:	add	r2, sp, #140	; 0x8c
    ebe6:	mov	r1, r4
    ebe8:	mov	r0, fp
    ebea:	bl	f644 <__ssprint_r>
    ebee:	cmp	r0, #0
    ebf0:	bne.w	e154 <_svfprintf_r+0x1f4>
    ebf4:	ldr	r2, [sp, #148]	; 0x94
    ebf6:	ldr	r3, [sp, #144]	; 0x90
    ebf8:	add.w	r9, sp, #192	; 0xc0
    ebfc:	b.n	ebc8 <_svfprintf_r+0xc68>
    ebfe:	add	r2, sp, #140	; 0x8c
    ec00:	ldr	r1, [sp, #20]
    ec02:	ldr	r0, [sp, #24]
    ec04:	bl	f644 <__ssprint_r>
    ec08:	cmp	r0, #0
    ec0a:	bne.w	e154 <_svfprintf_r+0x1f4>
    ec0e:	ldrb.w	r7, [sp, #111]	; 0x6f
    ec12:	ldr	r4, [sp, #148]	; 0x94
    ec14:	add.w	r9, sp, #192	; 0xc0
    ec18:	b.w	e3ac <_svfprintf_r+0x44c>
    ec1c:	subs	r6, r3, #1
    ec1e:	cmp	r6, #0
    ec20:	ble.w	eab4 <_svfprintf_r+0xb54>
    ec24:	ldr	r3, [pc, #140]	; (ecb4 <_svfprintf_r+0xd54>)
    ec26:	str	r3, [sp, #44]	; 0x2c
    ec28:	cmp	r6, #16
    ec2a:	ble.n	ec86 <_svfprintf_r+0xd26>
    ec2c:	str.w	r8, [sp, #36]	; 0x24
    ec30:	movs	r7, #16
    ec32:	mov	r8, r6
    ec34:	ldr.w	fp, [sp, #24]
    ec38:	ldr	r6, [sp, #20]
    ec3a:	b.n	ec4a <_svfprintf_r+0xcea>
    ec3c:	sub.w	r8, r8, #16
    ec40:	cmp.w	r8, #16
    ec44:	add.w	r9, r9, #8
    ec48:	ble.n	ec80 <_svfprintf_r+0xd20>
    ec4a:	adds	r5, #1
    ec4c:	adds	r4, #16
    ec4e:	cmp	r5, #7
    ec50:	str	r4, [sp, #148]	; 0x94
    ec52:	str	r5, [sp, #144]	; 0x90
    ec54:	str.w	sl, [r9]
    ec58:	str.w	r7, [r9, #4]
    ec5c:	ble.n	ec3c <_svfprintf_r+0xcdc>
    ec5e:	add	r2, sp, #140	; 0x8c
    ec60:	mov	r1, r6
    ec62:	mov	r0, fp
    ec64:	bl	f644 <__ssprint_r>
    ec68:	cmp	r0, #0
    ec6a:	bne.w	e154 <_svfprintf_r+0x1f4>
    ec6e:	sub.w	r8, r8, #16
    ec72:	cmp.w	r8, #16
    ec76:	ldr	r4, [sp, #148]	; 0x94
    ec78:	ldr	r5, [sp, #144]	; 0x90
    ec7a:	add.w	r9, sp, #192	; 0xc0
    ec7e:	bgt.n	ec4a <_svfprintf_r+0xcea>
    ec80:	mov	r6, r8
    ec82:	ldr.w	r8, [sp, #36]	; 0x24
    ec86:	ldr	r3, [sp, #44]	; 0x2c
    ec88:	adds	r5, #1
    ec8a:	add	r4, r6
    ec8c:	cmp	r5, #7
    ec8e:	str	r4, [sp, #148]	; 0x94
    ec90:	str	r5, [sp, #144]	; 0x90
    ec92:	stmia.w	r9, {r3, r6}
    ec96:	ble.w	eab0 <_svfprintf_r+0xb50>
    ec9a:	add	r2, sp, #140	; 0x8c
    ec9c:	ldr	r1, [sp, #20]
    ec9e:	ldr	r0, [sp, #24]
    eca0:	bl	f644 <__ssprint_r>
    eca4:	cmp	r0, #0
    eca6:	bne.w	e154 <_svfprintf_r+0x1f4>
    ecaa:	ldr	r4, [sp, #148]	; 0x94
    ecac:	ldr	r5, [sp, #144]	; 0x90
    ecae:	add.w	r9, sp, #192	; 0xc0
    ecb2:	b.n	eab4 <_svfprintf_r+0xb54>
    ecb4:	.word	0x00010130
    ecb8:	ldr	r1, [sp, #12]
    ecba:	ands.w	r2, r1, #16
    ecbe:	beq.w	f068 <_svfprintf_r+0x1108>
    ecc2:	ldr	r0, [sp, #40]	; 0x28
    ecc4:	strb.w	r3, [sp, #111]	; 0x6f
    ecc8:	cmp.w	fp, #0
    eccc:	ldr	r4, [r0, #0]
    ecce:	add.w	r7, r0, #4
    ecd2:	mov.w	r5, #0
    ecd6:	blt.n	ed26 <_svfprintf_r+0xdc6>
    ecd8:	mov	r2, r1
    ecda:	bic.w	r2, r2, #128	; 0x80
    ecde:	str	r2, [sp, #12]
    ece0:	orrs.w	r2, r4, r5
    ece4:	str	r7, [sp, #40]	; 0x28
    ece6:	mov	r7, r3
    ece8:	bne.w	e2bc <_svfprintf_r+0x35c>
    ecec:	b.n	e68c <_svfprintf_r+0x72c>
    ecee:	ldr	r3, [sp, #12]
    ecf0:	lsls	r0, r3, #27
    ecf2:	bmi.n	ed4a <_svfprintf_r+0xdea>
    ecf4:	ldr	r3, [sp, #12]
    ecf6:	lsls	r1, r3, #25
    ecf8:	bpl.n	ed4a <_svfprintf_r+0xdea>
    ecfa:	ldr	r1, [sp, #40]	; 0x28
    ecfc:	ldrsh.w	r4, [r1]
    ed00:	adds	r1, #4
    ed02:	asrs	r5, r4, #31
    ed04:	mov	r2, r4
    ed06:	mov	r3, r5
    ed08:	str	r1, [sp, #40]	; 0x28
    ed0a:	b.w	e296 <_svfprintf_r+0x336>
    ed0e:	ldr	r1, [sp, #40]	; 0x28
    ed10:	strb.w	r3, [sp, #111]	; 0x6f
    ed14:	cmp.w	fp, #0
    ed18:	ldr	r4, [r1, #0]
    ed1a:	add.w	r7, r1, #4
    ed1e:	mov.w	r5, #0
    ed22:	bge.w	f1be <_svfprintf_r+0x125e>
    ed26:	str	r7, [sp, #40]	; 0x28
    ed28:	mov	r7, r3
    ed2a:	orrs.w	r3, r4, r5
    ed2e:	bne.w	e2bc <_svfprintf_r+0x35c>
    ed32:	b.n	e696 <_svfprintf_r+0x736>
    ed34:	adds	r3, #1
    ed36:	ldr	r2, [sp, #44]	; 0x2c
    ed38:	str	r3, [sp, #144]	; 0x90
    ed3a:	add	r4, r5
    ed3c:	cmp	r3, #7
    ed3e:	str	r4, [sp, #148]	; 0x94
    ed40:	stmia.w	r9, {r2, r5}
    ed44:	ble.w	e488 <_svfprintf_r+0x528>
    ed48:	b.n	eace <_svfprintf_r+0xb6e>
    ed4a:	ldr	r2, [sp, #40]	; 0x28
    ed4c:	ldr	r4, [r2, #0]
    ed4e:	mov	r3, r2
    ed50:	adds	r3, #4
    ed52:	asrs	r5, r4, #31
    ed54:	mov	r2, r4
    ed56:	str	r3, [sp, #40]	; 0x28
    ed58:	cmp	r2, #0
    ed5a:	mov	r3, r5
    ed5c:	sbcs.w	r3, r3, #0
    ed60:	bge.w	e2a0 <_svfprintf_r+0x340>
    ed64:	negs	r4, r4
    ed66:	mov.w	r7, #45	; 0x2d
    ed6a:	sbc.w	r5, r5, r5, lsl #1
    ed6e:	cmp.w	fp, #0
    ed72:	strb.w	r7, [sp, #111]	; 0x6f
    ed76:	blt.w	e2bc <_svfprintf_r+0x35c>
    ed7a:	ldr	r3, [sp, #12]
    ed7c:	bic.w	r3, r3, #128	; 0x80
    ed80:	str	r3, [sp, #12]
    ed82:	b.w	e2bc <_svfprintf_r+0x35c>
    ed86:	add	r2, sp, #140	; 0x8c
    ed88:	ldr	r1, [sp, #20]
    ed8a:	ldr	r0, [sp, #24]
    ed8c:	bl	f644 <__ssprint_r>
    ed90:	cmp	r0, #0
    ed92:	bne.w	e154 <_svfprintf_r+0x1f4>
    ed96:	ldr	r4, [sp, #148]	; 0x94
    ed98:	add.w	r9, sp, #192	; 0xc0
    ed9c:	ldr	r2, [sp, #60]	; 0x3c
    ed9e:	ldr	r3, [sp, #116]	; 0x74
    eda0:	add	r2, r6
    eda2:	mov	r7, r2
    eda4:	ldr	r2, [sp, #56]	; 0x38
    eda6:	cmp	r3, r2
    eda8:	blt.n	ee3a <_svfprintf_r+0xeda>
    edaa:	ldr	r2, [sp, #12]
    edac:	lsls	r5, r2, #31
    edae:	bmi.n	ee3a <_svfprintf_r+0xeda>
    edb0:	ldr	r1, [sp, #56]	; 0x38
    edb2:	add	r6, r1
    edb4:	subs	r5, r6, r7
    edb6:	subs	r3, r1, r3
    edb8:	cmp	r5, r3
    edba:	it	ge
    edbc:	movge	r5, r3
    edbe:	cmp	r5, #0
    edc0:	mov	r6, r5
    edc2:	ble.n	ede0 <_svfprintf_r+0xe80>
    edc4:	ldr	r2, [sp, #144]	; 0x90
    edc6:	str.w	r7, [r9]
    edca:	adds	r2, #1
    edcc:	add	r4, r5
    edce:	cmp	r2, #7
    edd0:	str	r4, [sp, #148]	; 0x94
    edd2:	str.w	r5, [r9, #4]
    edd6:	str	r2, [sp, #144]	; 0x90
    edd8:	bgt.w	f3d8 <_svfprintf_r+0x1478>
    eddc:	add.w	r9, r9, #8
    ede0:	cmp	r6, #0
    ede2:	ite	ge
    ede4:	subge	r5, r3, r6
    ede6:	movlt	r5, r3
    ede8:	cmp	r5, #0
    edea:	ble.w	e48c <_svfprintf_r+0x52c>
    edee:	ldr	r2, [pc, #744]	; (f0d8 <_svfprintf_r+0x1178>)
    edf0:	ldr	r3, [sp, #144]	; 0x90
    edf2:	str	r2, [sp, #44]	; 0x2c
    edf4:	cmp	r5, #16
    edf6:	ble.n	ed34 <_svfprintf_r+0xdd4>
    edf8:	movs	r6, #16
    edfa:	ldr	r7, [sp, #24]
    edfc:	ldr.w	fp, [sp, #20]
    ee00:	b.n	ee0c <_svfprintf_r+0xeac>
    ee02:	add.w	r9, r9, #8
    ee06:	subs	r5, #16
    ee08:	cmp	r5, #16
    ee0a:	ble.n	ed34 <_svfprintf_r+0xdd4>
    ee0c:	adds	r3, #1
    ee0e:	adds	r4, #16
    ee10:	cmp	r3, #7
    ee12:	str	r4, [sp, #148]	; 0x94
    ee14:	str	r3, [sp, #144]	; 0x90
    ee16:	str.w	sl, [r9]
    ee1a:	str.w	r6, [r9, #4]
    ee1e:	ble.n	ee02 <_svfprintf_r+0xea2>
    ee20:	add	r2, sp, #140	; 0x8c
    ee22:	mov	r1, fp
    ee24:	mov	r0, r7
    ee26:	bl	f644 <__ssprint_r>
    ee2a:	cmp	r0, #0
    ee2c:	bne.w	e154 <_svfprintf_r+0x1f4>
    ee30:	ldr	r4, [sp, #148]	; 0x94
    ee32:	ldr	r3, [sp, #144]	; 0x90
    ee34:	add.w	r9, sp, #192	; 0xc0
    ee38:	b.n	ee06 <_svfprintf_r+0xea6>
    ee3a:	ldr	r2, [sp, #144]	; 0x90
    ee3c:	ldr	r0, [sp, #72]	; 0x48
    ee3e:	ldr	r1, [sp, #76]	; 0x4c
    ee40:	str.w	r1, [r9]
    ee44:	adds	r2, #1
    ee46:	add	r4, r0
    ee48:	cmp	r2, #7
    ee4a:	str	r4, [sp, #148]	; 0x94
    ee4c:	str.w	r0, [r9, #4]
    ee50:	str	r2, [sp, #144]	; 0x90
    ee52:	bgt.w	f3be <_svfprintf_r+0x145e>
    ee56:	add.w	r9, r9, #8
    ee5a:	b.n	edb0 <_svfprintf_r+0xe50>
    ee5c:	ldr	r3, [sp, #12]
    ee5e:	lsls	r0, r3, #31
    ee60:	bmi.w	ea48 <_svfprintf_r+0xae8>
    ee64:	adds	r5, #1
    ee66:	adds	r4, #1
    ee68:	movs	r3, #1
    ee6a:	cmp	r5, #7
    ee6c:	str	r4, [sp, #148]	; 0x94
    ee6e:	str	r5, [sp, #144]	; 0x90
    ee70:	str.w	r6, [r9]
    ee74:	str.w	r3, [r9, #4]
    ee78:	ble.w	eab0 <_svfprintf_r+0xb50>
    ee7c:	b.n	ec9a <_svfprintf_r+0xd3a>
    ee7e:	add	r2, sp, #140	; 0x8c
    ee80:	ldr	r1, [sp, #20]
    ee82:	ldr	r0, [sp, #24]
    ee84:	bl	f644 <__ssprint_r>
    ee88:	cmp	r0, #0
    ee8a:	bne.w	e154 <_svfprintf_r+0x1f4>
    ee8e:	ldr	r4, [sp, #148]	; 0x94
    ee90:	ldr	r5, [sp, #144]	; 0x90
    ee92:	add.w	r9, sp, #192	; 0xc0
    ee96:	b.n	ea64 <_svfprintf_r+0xb04>
    ee98:	add	r2, sp, #140	; 0x8c
    ee9a:	ldr	r1, [sp, #20]
    ee9c:	ldr	r0, [sp, #24]
    ee9e:	bl	f644 <__ssprint_r>
    eea2:	cmp	r0, #0
    eea4:	bne.w	e154 <_svfprintf_r+0x1f4>
    eea8:	ldr	r4, [sp, #148]	; 0x94
    eeaa:	ldr	r5, [sp, #144]	; 0x90
    eeac:	add.w	r9, sp, #192	; 0xc0
    eeb0:	b.n	ea82 <_svfprintf_r+0xb22>
    eeb2:	add	r2, sp, #140	; 0x8c
    eeb4:	ldr	r1, [sp, #20]
    eeb6:	ldr	r0, [sp, #24]
    eeb8:	bl	f644 <__ssprint_r>
    eebc:	cmp	r0, #0
    eebe:	bne.w	e154 <_svfprintf_r+0x1f4>
    eec2:	ldr	r4, [sp, #148]	; 0x94
    eec4:	add.w	r9, sp, #192	; 0xc0
    eec8:	b.w	e3f4 <_svfprintf_r+0x494>
    eecc:	ldr	r1, [sp, #12]
    eece:	ands.w	r3, r1, #64	; 0x40
    eed2:	beq.w	f048 <_svfprintf_r+0x10e8>
    eed6:	ldr	r0, [sp, #40]	; 0x28
    eed8:	strb.w	r2, [sp, #111]	; 0x6f
    eedc:	mov	r3, r0
    eede:	cmp.w	fp, #0
    eee2:	add.w	r3, r3, #4
    eee6:	ldrh	r4, [r0, #0]
    eee8:	mov.w	r5, #0
    eeec:	blt.w	f270 <_svfprintf_r+0x1310>
    eef0:	bic.w	r1, r1, #128	; 0x80
    eef4:	str	r1, [sp, #12]
    eef6:	orrs.w	r1, r4, r5
    eefa:	str	r3, [sp, #40]	; 0x28
    eefc:	beq.w	e8b4 <_svfprintf_r+0x954>
    ef00:	mov	r7, r2
    ef02:	b.w	e1ac <_svfprintf_r+0x24c>
    ef06:	ldr	r3, [sp, #12]
    ef08:	lsls	r7, r3, #27
    ef0a:	bmi.n	ef24 <_svfprintf_r+0xfc4>
    ef0c:	ldr	r3, [sp, #12]
    ef0e:	lsls	r6, r3, #25
    ef10:	bpl.n	ef24 <_svfprintf_r+0xfc4>
    ef12:	ldr	r2, [sp, #40]	; 0x28
    ef14:	ldr	r3, [r2, #0]
    ef16:	adds	r2, #4
    ef18:	str	r2, [sp, #40]	; 0x28
    ef1a:	ldrh.w	r2, [sp, #28]
    ef1e:	strh	r2, [r3, #0]
    ef20:	b.w	dfae <_svfprintf_r+0x4e>
    ef24:	ldr	r2, [sp, #40]	; 0x28
    ef26:	ldr	r3, [r2, #0]
    ef28:	adds	r2, #4
    ef2a:	str	r2, [sp, #40]	; 0x28
    ef2c:	ldr	r2, [sp, #28]
    ef2e:	str	r2, [r3, #0]
    ef30:	b.w	dfae <_svfprintf_r+0x4e>
    ef34:	ldrd	r0, r1, [sp, #64]	; 0x40
    ef38:	mov	r2, r0
    ef3a:	mov	r3, r1
    ef3c:	bl	b1e0 <__aeabi_dcmpun>
    ef40:	cmp	r0, #0
    ef42:	bne.w	f540 <_svfprintf_r+0x15e0>
    ef46:	ldr	r3, [sp, #52]	; 0x34
    ef48:	cmp.w	fp, #4294967295
    ef4c:	bic.w	r7, r3, #32
    ef50:	beq.w	f422 <_svfprintf_r+0x14c2>
    ef54:	cmp	r7, #71	; 0x47
    ef56:	beq.w	f25e <_svfprintf_r+0x12fe>
    ef5a:	ldr	r3, [sp, #68]	; 0x44
    ef5c:	ldr	r2, [sp, #12]
    ef5e:	cmp	r3, #0
    ef60:	orr.w	r2, r2, #256	; 0x100
    ef64:	str	r2, [sp, #44]	; 0x2c
    ef66:	blt.w	f45a <_svfprintf_r+0x14fa>
    ef6a:	vldr	d7, [sp, #64]	; 0x40
    ef6e:	vstr	d7, [sp, #96]	; 0x60
    ef72:	movs	r3, #0
    ef74:	str	r3, [sp, #16]
    ef76:	ldr	r3, [sp, #52]	; 0x34
    ef78:	cmp	r3, #102	; 0x66
    ef7a:	beq.w	f428 <_svfprintf_r+0x14c8>
    ef7e:	cmp	r3, #70	; 0x46
    ef80:	beq.w	f20e <_svfprintf_r+0x12ae>
    ef84:	cmp	r7, #69	; 0x45
    ef86:	ite	eq
    ef88:	addeq.w	r5, fp, #1
    ef8c:	movne	r5, fp
    ef8e:	add	r2, sp, #132	; 0x84
    ef90:	add	r3, sp, #120	; 0x78
    ef92:	str	r2, [sp, #4]
    ef94:	str	r3, [sp, #0]
    ef96:	mov	r2, r5
    ef98:	add	r3, sp, #116	; 0x74
    ef9a:	movs	r1, #2
    ef9c:	vldr	d0, [sp, #96]	; 0x60
    efa0:	ldr	r0, [sp, #24]
    efa2:	bl	d128 <_dtoa_r>
    efa6:	ldr	r3, [sp, #52]	; 0x34
    efa8:	cmp	r3, #103	; 0x67
    efaa:	mov	r6, r0
    efac:	bne.w	f486 <_svfprintf_r+0x1526>
    efb0:	ldr	r3, [sp, #12]
    efb2:	lsls	r2, r3, #31
    efb4:	bpl.w	f52a <_svfprintf_r+0x15ca>
    efb8:	adds	r4, r6, r5
    efba:	movs	r2, #0
    efbc:	movs	r3, #0
    efbe:	ldrd	r0, r1, [sp, #96]	; 0x60
    efc2:	bl	b17c <__aeabi_dcmpeq>
    efc6:	cmp	r0, #0
    efc8:	bne.w	f2e6 <_svfprintf_r+0x1386>
    efcc:	ldr	r3, [sp, #132]	; 0x84
    efce:	cmp	r4, r3
    efd0:	bls.n	efe0 <_svfprintf_r+0x1080>
    efd2:	movs	r1, #48	; 0x30
    efd4:	adds	r2, r3, #1
    efd6:	str	r2, [sp, #132]	; 0x84
    efd8:	strb	r1, [r3, #0]
    efda:	ldr	r3, [sp, #132]	; 0x84
    efdc:	cmp	r4, r3
    efde:	bhi.n	efd4 <_svfprintf_r+0x1074>
    efe0:	subs	r3, r3, r6
    efe2:	cmp	r7, #71	; 0x47
    efe4:	str	r3, [sp, #56]	; 0x38
    efe6:	beq.w	f2d8 <_svfprintf_r+0x1378>
    efea:	ldr	r3, [sp, #52]	; 0x34
    efec:	cmp	r3, #101	; 0x65
    efee:	ble.w	f4a4 <_svfprintf_r+0x1544>
    eff2:	ldr	r3, [sp, #52]	; 0x34
    eff4:	cmp	r3, #102	; 0x66
    eff6:	ldr	r3, [sp, #116]	; 0x74
    eff8:	str	r3, [sp, #60]	; 0x3c
    effa:	beq.w	f4be <_svfprintf_r+0x155e>
    effe:	ldr	r2, [sp, #60]	; 0x3c
    f000:	ldr	r1, [sp, #56]	; 0x38
    f002:	cmp	r2, r1
    f004:	blt.w	f46c <_svfprintf_r+0x150c>
    f008:	ldr	r3, [sp, #12]
    f00a:	lsls	r1, r3, #31
    f00c:	bmi.w	f52e <_svfprintf_r+0x15ce>
    f010:	bic.w	r3, r2, r2, asr #31
    f014:	str	r2, [sp, #36]	; 0x24
    f016:	movs	r2, #103	; 0x67
    f018:	str	r2, [sp, #52]	; 0x34
    f01a:	ldr	r2, [sp, #16]
    f01c:	cmp	r2, #0
    f01e:	bne.w	f280 <_svfprintf_r+0x1320>
    f022:	str	r3, [sp, #16]
    f024:	ldr	r3, [sp, #44]	; 0x2c
    f026:	str	r3, [sp, #12]
    f028:	mov	fp, r2
    f02a:	ldrb.w	r7, [sp, #111]	; 0x6f
    f02e:	b.w	e304 <_svfprintf_r+0x3a4>
    f032:	bic.w	r7, r7, #7
    f036:	vldr	d7, [r7]
    f03a:	add.w	r3, r7, #8
    f03e:	vstr	d7, [sp, #64]	; 0x40
    f042:	str	r3, [sp, #40]	; 0x28
    f044:	b.w	e55c <_svfprintf_r+0x5fc>
    f048:	ldr	r1, [sp, #40]	; 0x28
    f04a:	strb.w	r3, [sp, #111]	; 0x6f
    f04e:	cmp.w	fp, #0
    f052:	ldr	r4, [r1, #0]
    f054:	add.w	r7, r1, #4
    f058:	mov.w	r5, #0
    f05c:	bge.w	f1b8 <_svfprintf_r+0x1258>
    f060:	str	r7, [sp, #40]	; 0x28
    f062:	movs	r7, #0
    f064:	b.w	e1ac <_svfprintf_r+0x24c>
    f068:	ldr	r1, [sp, #12]
    f06a:	ands.w	r3, r1, #64	; 0x40
    f06e:	beq.w	ed0e <_svfprintf_r+0xdae>
    f072:	ldr	r0, [sp, #40]	; 0x28
    f074:	strb.w	r2, [sp, #111]	; 0x6f
    f078:	mov	r3, r0
    f07a:	cmp.w	fp, #0
    f07e:	add.w	r3, r3, #4
    f082:	ldrh	r4, [r0, #0]
    f084:	mov.w	r5, #0
    f088:	blt.w	f26a <_svfprintf_r+0x130a>
    f08c:	bic.w	r1, r1, #128	; 0x80
    f090:	str	r1, [sp, #12]
    f092:	orrs.w	r1, r4, r5
    f096:	str	r3, [sp, #40]	; 0x28
    f098:	mov	r7, r2
    f09a:	bne.w	e2bc <_svfprintf_r+0x35c>
    f09e:	b.w	e68c <_svfprintf_r+0x72c>
    f0a2:	ldr	r3, [sp, #12]
    f0a4:	ldr	r2, [sp, #40]	; 0x28
    f0a6:	tst.w	r3, #64	; 0x40
    f0aa:	mov	r3, r2
    f0ac:	beq.w	f274 <_svfprintf_r+0x1314>
    f0b0:	adds	r3, #4
    f0b2:	ldrh	r4, [r2, #0]
    f0b4:	str	r3, [sp, #40]	; 0x28
    f0b6:	movs	r5, #0
    f0b8:	b.w	e6c6 <_svfprintf_r+0x766>
    f0bc:	mov	r4, r2
    f0be:	adds	r3, #1
    f0c0:	ldr	r2, [sp, #44]	; 0x2c
    f0c2:	str	r3, [sp, #144]	; 0x90
    f0c4:	add	r4, r5
    f0c6:	cmp	r3, #7
    f0c8:	str	r4, [sp, #148]	; 0x94
    f0ca:	stmia.w	r9, {r2, r5}
    f0ce:	bgt.w	ed86 <_svfprintf_r+0xe26>
    f0d2:	add.w	r9, r9, #8
    f0d6:	b.n	ed9c <_svfprintf_r+0xe3c>
    f0d8:	.word	0x00010130
    f0dc:	movs	r7, #0
    f0de:	cmp	fp, r7
    f0e0:	strb.w	r7, [sp, #111]	; 0x6f
    f0e4:	blt.w	e8d8 <_svfprintf_r+0x978>
    f0e8:	ldr	r3, [sp, #12]
    f0ea:	bic.w	r3, r3, #128	; 0x80
    f0ee:	str	r3, [sp, #12]
    f0f0:	b.w	e874 <_svfprintf_r+0x914>
    f0f4:	add	r2, sp, #140	; 0x8c
    f0f6:	ldr	r1, [sp, #20]
    f0f8:	ldr	r0, [sp, #24]
    f0fa:	bl	f644 <__ssprint_r>
    f0fe:	cmp	r0, #0
    f100:	bne.w	e154 <_svfprintf_r+0x1f4>
    f104:	ldr	r4, [sp, #148]	; 0x94
    f106:	add.w	r9, sp, #192	; 0xc0
    f10a:	b.n	e91c <_svfprintf_r+0x9bc>
    f10c:	ldr	r7, [sp, #40]	; 0x28
    f10e:	b.w	e8ca <_svfprintf_r+0x96a>
    f112:	ldr	r3, [sp, #144]	; 0x90
    f114:	ldr	r2, [pc, #736]	; (f3f8 <_svfprintf_r+0x1498>)
    f116:	str.w	r2, [r9]
    f11a:	adds	r3, #1
    f11c:	adds	r4, #1
    f11e:	movs	r2, #1
    f120:	cmp	r3, #7
    f122:	str	r4, [sp, #148]	; 0x94
    f124:	str	r3, [sp, #144]	; 0x90
    f126:	str.w	r2, [r9, #4]
    f12a:	bgt.w	f244 <_svfprintf_r+0x12e4>
    f12e:	add.w	r9, r9, #8
    f132:	cbnz	r5, f140 <_svfprintf_r+0x11e0>
    f134:	ldr	r3, [sp, #56]	; 0x38
    f136:	cbnz	r3, f140 <_svfprintf_r+0x11e0>
    f138:	ldr	r3, [sp, #12]
    f13a:	lsls	r7, r3, #31
    f13c:	bpl.w	e48c <_svfprintf_r+0x52c>
    f140:	ldr	r3, [sp, #144]	; 0x90
    f142:	ldr	r1, [sp, #72]	; 0x48
    f144:	ldr	r2, [sp, #76]	; 0x4c
    f146:	str.w	r2, [r9]
    f14a:	adds	r3, #1
    f14c:	add	r4, r1
    f14e:	cmp	r3, #7
    f150:	str	r4, [sp, #148]	; 0x94
    f152:	str.w	r1, [r9, #4]
    f156:	str	r3, [sp, #144]	; 0x90
    f158:	bgt.w	f4f6 <_svfprintf_r+0x1596>
    f15c:	add.w	r9, r9, #8
    f160:	negs	r5, r5
    f162:	cmp	r5, #0
    f164:	ble.w	f2bc <_svfprintf_r+0x135c>
    f168:	ldr	r2, [pc, #656]	; (f3fc <_svfprintf_r+0x149c>)
    f16a:	str	r2, [sp, #44]	; 0x2c
    f16c:	cmp	r5, #16
    f16e:	ble.w	f304 <_svfprintf_r+0x13a4>
    f172:	mov	r2, r4
    f174:	movs	r7, #16
    f176:	ldr.w	fp, [sp, #24]
    f17a:	ldr	r4, [sp, #20]
    f17c:	b.n	f18a <_svfprintf_r+0x122a>
    f17e:	add.w	r9, r9, #8
    f182:	subs	r5, #16
    f184:	cmp	r5, #16
    f186:	ble.w	f302 <_svfprintf_r+0x13a2>
    f18a:	adds	r3, #1
    f18c:	adds	r2, #16
    f18e:	cmp	r3, #7
    f190:	str	r2, [sp, #148]	; 0x94
    f192:	str	r3, [sp, #144]	; 0x90
    f194:	str.w	sl, [r9]
    f198:	str.w	r7, [r9, #4]
    f19c:	ble.n	f17e <_svfprintf_r+0x121e>
    f19e:	add	r2, sp, #140	; 0x8c
    f1a0:	mov	r1, r4
    f1a2:	mov	r0, fp
    f1a4:	bl	f644 <__ssprint_r>
    f1a8:	cmp	r0, #0
    f1aa:	bne.w	e154 <_svfprintf_r+0x1f4>
    f1ae:	ldr	r2, [sp, #148]	; 0x94
    f1b0:	ldr	r3, [sp, #144]	; 0x90
    f1b2:	add.w	r9, sp, #192	; 0xc0
    f1b6:	b.n	f182 <_svfprintf_r+0x1222>
    f1b8:	ldr	r2, [sp, #12]
    f1ba:	b.w	e630 <_svfprintf_r+0x6d0>
    f1be:	ldr	r2, [sp, #12]
    f1c0:	b.n	ecda <_svfprintf_r+0xd7a>
    f1c2:	ldr	r3, [sp, #12]
    f1c4:	orr.w	r3, r3, #32
    f1c8:	str	r3, [sp, #12]
    f1ca:	add.w	r8, r8, #1
    f1ce:	ldrb.w	r3, [r8]
    f1d2:	b.w	e014 <_svfprintf_r+0xb4>
    f1d6:	add	r2, sp, #140	; 0x8c
    f1d8:	ldr	r1, [sp, #20]
    f1da:	ldr	r0, [sp, #24]
    f1dc:	bl	f644 <__ssprint_r>
    f1e0:	cmp	r0, #0
    f1e2:	bne.w	e154 <_svfprintf_r+0x1f4>
    f1e6:	ldr	r4, [sp, #148]	; 0x94
    f1e8:	add.w	r9, sp, #192	; 0xc0
    f1ec:	b.w	e94c <_svfprintf_r+0x9ec>
    f1f0:	movs	r1, #64	; 0x40
    f1f2:	ldr	r0, [sp, #24]
    f1f4:	bl	b5fc <_malloc_r>
    f1f8:	ldr	r2, [sp, #20]
    f1fa:	str	r0, [r2, #0]
    f1fc:	str	r0, [r2, #16]
    f1fe:	cmp	r0, #0
    f200:	beq.w	f5ea <_svfprintf_r+0x168a>
    f204:	ldr	r2, [sp, #20]
    f206:	movs	r3, #64	; 0x40
    f208:	str	r3, [r2, #20]
    f20a:	b.w	df8e <_svfprintf_r+0x2e>
    f20e:	add	r2, sp, #132	; 0x84
    f210:	add	r3, sp, #120	; 0x78
    f212:	str	r2, [sp, #4]
    f214:	str	r3, [sp, #0]
    f216:	mov	r2, fp
    f218:	add	r3, sp, #116	; 0x74
    f21a:	movs	r1, #3
    f21c:	vldr	d0, [sp, #96]	; 0x60
    f220:	ldr	r0, [sp, #24]
    f222:	bl	d128 <_dtoa_r>
    f226:	mov	r5, fp
    f228:	mov	r6, r0
    f22a:	ldr	r3, [sp, #52]	; 0x34
    f22c:	cmp	r3, #70	; 0x46
    f22e:	add.w	r4, r6, r5
    f232:	bne.w	efba <_svfprintf_r+0x105a>
    f236:	ldrb	r3, [r6, #0]
    f238:	cmp	r3, #48	; 0x30
    f23a:	beq.w	f54c <_svfprintf_r+0x15ec>
    f23e:	ldr	r5, [sp, #116]	; 0x74
    f240:	add	r4, r5
    f242:	b.n	efba <_svfprintf_r+0x105a>
    f244:	add	r2, sp, #140	; 0x8c
    f246:	ldr	r1, [sp, #20]
    f248:	ldr	r0, [sp, #24]
    f24a:	bl	f644 <__ssprint_r>
    f24e:	cmp	r0, #0
    f250:	bne.w	e154 <_svfprintf_r+0x1f4>
    f254:	ldr	r5, [sp, #116]	; 0x74
    f256:	ldr	r4, [sp, #148]	; 0x94
    f258:	add.w	r9, sp, #192	; 0xc0
    f25c:	b.n	f132 <_svfprintf_r+0x11d2>
    f25e:	cmp.w	fp, #0
    f262:	it	eq
    f264:	moveq.w	fp, #1
    f268:	b.n	ef5a <_svfprintf_r+0xffa>
    f26a:	str	r3, [sp, #40]	; 0x28
    f26c:	mov	r7, r2
    f26e:	b.n	ed2a <_svfprintf_r+0xdca>
    f270:	str	r3, [sp, #40]	; 0x28
    f272:	b.n	f062 <_svfprintf_r+0x1102>
    f274:	adds	r3, #4
    f276:	ldr	r4, [r2, #0]
    f278:	str	r3, [sp, #40]	; 0x28
    f27a:	movs	r5, #0
    f27c:	b.w	e6c6 <_svfprintf_r+0x766>
    f280:	movs	r7, #45	; 0x2d
    f282:	str	r3, [sp, #16]
    f284:	ldr	r3, [sp, #44]	; 0x2c
    f286:	str	r3, [sp, #12]
    f288:	strb.w	r7, [sp, #111]	; 0x6f
    f28c:	mov.w	fp, #0
    f290:	b.w	e306 <_svfprintf_r+0x3a6>
    f294:	mov	r0, r6
    f296:	bl	c380 <strlen>
    f29a:	mov	fp, r4
    f29c:	mov	r3, r0
    f29e:	str	r0, [sp, #36]	; 0x24
    f2a0:	b.w	e7e8 <_svfprintf_r+0x888>
    f2a4:	add	r2, sp, #140	; 0x8c
    f2a6:	ldr	r1, [sp, #20]
    f2a8:	ldr	r0, [sp, #24]
    f2aa:	bl	f644 <__ssprint_r>
    f2ae:	cmp	r0, #0
    f2b0:	bne.w	e154 <_svfprintf_r+0x1f4>
    f2b4:	ldr	r4, [sp, #148]	; 0x94
    f2b6:	ldr	r3, [sp, #144]	; 0x90
    f2b8:	add.w	r9, sp, #192	; 0xc0
    f2bc:	ldr	r1, [sp, #56]	; 0x38
    f2be:	str.w	r6, [r9]
    f2c2:	adds	r3, #1
    f2c4:	add	r4, r1
    f2c6:	cmp	r3, #7
    f2c8:	str	r4, [sp, #148]	; 0x94
    f2ca:	str	r3, [sp, #144]	; 0x90
    f2cc:	str.w	r1, [r9, #4]
    f2d0:	ble.w	e488 <_svfprintf_r+0x528>
    f2d4:	b.w	eace <_svfprintf_r+0xb6e>
    f2d8:	ldr	r3, [sp, #116]	; 0x74
    f2da:	adds	r5, r3, #3
    f2dc:	blt.n	f31c <_svfprintf_r+0x13bc>
    f2de:	cmp	fp, r3
    f2e0:	blt.n	f31c <_svfprintf_r+0x13bc>
    f2e2:	str	r3, [sp, #60]	; 0x3c
    f2e4:	b.n	effe <_svfprintf_r+0x109e>
    f2e6:	mov	r3, r4
    f2e8:	b.n	efe0 <_svfprintf_r+0x1080>
    f2ea:	add	r2, sp, #140	; 0x8c
    f2ec:	ldr	r1, [sp, #20]
    f2ee:	ldr	r0, [sp, #24]
    f2f0:	bl	f644 <__ssprint_r>
    f2f4:	cmp	r0, #0
    f2f6:	bne.w	e154 <_svfprintf_r+0x1f4>
    f2fa:	ldr	r4, [sp, #148]	; 0x94
    f2fc:	add.w	r9, sp, #192	; 0xc0
    f300:	b.n	eb9c <_svfprintf_r+0xc3c>
    f302:	mov	r4, r2
    f304:	adds	r3, #1
    f306:	ldr	r2, [sp, #44]	; 0x2c
    f308:	str	r3, [sp, #144]	; 0x90
    f30a:	add	r4, r5
    f30c:	cmp	r3, #7
    f30e:	str	r4, [sp, #148]	; 0x94
    f310:	stmia.w	r9, {r2, r5}
    f314:	bgt.n	f2a4 <_svfprintf_r+0x1344>
    f316:	add.w	r9, r9, #8
    f31a:	b.n	f2bc <_svfprintf_r+0x135c>
    f31c:	ldr	r2, [sp, #52]	; 0x34
    f31e:	subs	r2, #2
    f320:	str	r2, [sp, #52]	; 0x34
    f322:	subs	r3, #1
    f324:	cmp	r3, #0
    f326:	ldrb.w	r2, [sp, #52]	; 0x34
    f32a:	str	r3, [sp, #116]	; 0x74
    f32c:	it	lt
    f32e:	neglt	r3, r3
    f330:	strb.w	r2, [sp, #124]	; 0x7c
    f334:	ite	lt
    f336:	movlt	r2, #45	; 0x2d
    f338:	movge	r2, #43	; 0x2b
    f33a:	cmp	r3, #9
    f33c:	strb.w	r2, [sp, #125]	; 0x7d
    f340:	ble.w	f51a <_svfprintf_r+0x15ba>
    f344:	add.w	r0, sp, #139	; 0x8b
    f348:	mov	r4, r0
    f34a:	ldr	r2, [pc, #180]	; (f400 <_svfprintf_r+0x14a0>)
    f34c:	smull	r2, r1, r2, r3
    f350:	asrs	r2, r3, #31
    f352:	rsb	r2, r2, r1, asr #2
    f356:	add.w	r1, r2, r2, lsl #2
    f35a:	sub.w	r3, r3, r1, lsl #1
    f35e:	add.w	r1, r3, #48	; 0x30
    f362:	cmp	r2, #9
    f364:	mov	r3, r2
    f366:	strb.w	r1, [r4, #-1]!
    f36a:	bgt.n	f34a <_svfprintf_r+0x13ea>
    f36c:	mov	r1, r4
    f36e:	adds	r3, #48	; 0x30
    f370:	uxtb	r2, r3
    f372:	strb.w	r2, [r1, #-1]!
    f376:	cmp	r0, r1
    f378:	bls.w	f5e4 <_svfprintf_r+0x1684>
    f37c:	add.w	r1, sp, #126	; 0x7e
    f380:	mov	r3, r4
    f382:	b.n	f388 <_svfprintf_r+0x1428>
    f384:	ldrb.w	r2, [r3], #1
    f388:	strb.w	r2, [r1], #1
    f38c:	cmp	r0, r3
    f38e:	bne.n	f384 <_svfprintf_r+0x1424>
    f390:	adds	r3, r0, #1
    f392:	subs	r3, r3, r4
    f394:	add.w	r2, sp, #126	; 0x7e
    f398:	add	r3, r2
    f39a:	add	r2, sp, #124	; 0x7c
    f39c:	subs	r3, r3, r2
    f39e:	ldr	r2, [sp, #56]	; 0x38
    f3a0:	str	r3, [sp, #84]	; 0x54
    f3a2:	cmp	r2, #1
    f3a4:	add	r3, r2
    f3a6:	str	r3, [sp, #36]	; 0x24
    f3a8:	ble.w	f57a <_svfprintf_r+0x161a>
    f3ac:	ldr	r3, [sp, #36]	; 0x24
    f3ae:	ldr	r2, [sp, #72]	; 0x48
    f3b0:	add	r3, r2
    f3b2:	movs	r2, #0
    f3b4:	str	r3, [sp, #36]	; 0x24
    f3b6:	str	r2, [sp, #60]	; 0x3c
    f3b8:	bic.w	r3, r3, r3, asr #31
    f3bc:	b.n	f01a <_svfprintf_r+0x10ba>
    f3be:	add	r2, sp, #140	; 0x8c
    f3c0:	ldr	r1, [sp, #20]
    f3c2:	ldr	r0, [sp, #24]
    f3c4:	bl	f644 <__ssprint_r>
    f3c8:	cmp	r0, #0
    f3ca:	bne.w	e154 <_svfprintf_r+0x1f4>
    f3ce:	ldr	r3, [sp, #116]	; 0x74
    f3d0:	ldr	r4, [sp, #148]	; 0x94
    f3d2:	add.w	r9, sp, #192	; 0xc0
    f3d6:	b.n	edb0 <_svfprintf_r+0xe50>
    f3d8:	add	r2, sp, #140	; 0x8c
    f3da:	ldr	r1, [sp, #20]
    f3dc:	ldr	r0, [sp, #24]
    f3de:	bl	f644 <__ssprint_r>
    f3e2:	cmp	r0, #0
    f3e4:	bne.w	e154 <_svfprintf_r+0x1f4>
    f3e8:	ldr	r3, [sp, #116]	; 0x74
    f3ea:	ldr	r2, [sp, #56]	; 0x38
    f3ec:	ldr	r4, [sp, #148]	; 0x94
    f3ee:	subs	r3, r2, r3
    f3f0:	add.w	r9, sp, #192	; 0xc0
    f3f4:	b.n	ede0 <_svfprintf_r+0xe80>
    f3f6:	nop
    f3f8:	.word	0x0001012c
    f3fc:	.word	0x00010130
    f400:	.word	0x66666667
    f404:	cmp	r5, #6
    f406:	mov	r3, r5
    f408:	it	cs
    f40a:	movcs	r3, #6
    f40c:	str	r3, [sp, #36]	; 0x24
    f40e:	bic.w	r3, r3, r3, asr #31
    f412:	mov	fp, r6
    f414:	str	r7, [sp, #40]	; 0x28
    f416:	str	r6, [sp, #60]	; 0x3c
    f418:	mov	r7, r6
    f41a:	str	r3, [sp, #16]
    f41c:	ldr	r6, [pc, #536]	; (f638 <_svfprintf_r+0x16d8>)
    f41e:	b.w	e304 <_svfprintf_r+0x3a4>
    f422:	mov.w	fp, #6
    f426:	b.n	ef5a <_svfprintf_r+0xffa>
    f428:	add	r2, sp, #132	; 0x84
    f42a:	add	r3, sp, #120	; 0x78
    f42c:	str	r2, [sp, #4]
    f42e:	str	r3, [sp, #0]
    f430:	mov	r2, fp
    f432:	add	r3, sp, #116	; 0x74
    f434:	movs	r1, #3
    f436:	vldr	d0, [sp, #96]	; 0x60
    f43a:	ldr	r0, [sp, #24]
    f43c:	bl	d128 <_dtoa_r>
    f440:	mov	r5, fp
    f442:	mov	r6, r0
    f444:	add.w	r4, r0, fp
    f448:	b.n	f236 <_svfprintf_r+0x12d6>
    f44a:	movs	r7, #45	; 0x2d
    f44c:	strb.w	r7, [sp, #111]	; 0x6f
    f450:	b.w	e5aa <_svfprintf_r+0x64a>
    f454:	str	r3, [sp, #12]
    f456:	b.w	e702 <_svfprintf_r+0x7a2>
    f45a:	ldrd	r1, r2, [sp, #64]	; 0x40
    f45e:	add.w	r3, r2, #2147483648	; 0x80000000
    f462:	str	r3, [sp, #100]	; 0x64
    f464:	movs	r3, #45	; 0x2d
    f466:	str	r1, [sp, #96]	; 0x60
    f468:	str	r3, [sp, #16]
    f46a:	b.n	ef76 <_svfprintf_r+0x1016>
    f46c:	ldr	r2, [sp, #72]	; 0x48
    f46e:	ldr	r3, [sp, #56]	; 0x38
    f470:	add	r3, r2
    f472:	ldr	r2, [sp, #60]	; 0x3c
    f474:	str	r3, [sp, #36]	; 0x24
    f476:	cmp	r2, #0
    f478:	ble.w	f58e <_svfprintf_r+0x162e>
    f47c:	movs	r2, #103	; 0x67
    f47e:	bic.w	r3, r3, r3, asr #31
    f482:	str	r2, [sp, #52]	; 0x34
    f484:	b.n	f01a <_svfprintf_r+0x10ba>
    f486:	ldr	r3, [sp, #52]	; 0x34
    f488:	cmp	r3, #71	; 0x47
    f48a:	bne.w	efb8 <_svfprintf_r+0x1058>
    f48e:	ldr	r3, [sp, #12]
    f490:	lsls	r3, r3, #31
    f492:	bmi.w	f22a <_svfprintf_r+0x12ca>
    f496:	ldr	r3, [sp, #132]	; 0x84
    f498:	cmp	r7, #71	; 0x47
    f49a:	sub.w	r3, r3, r6
    f49e:	str	r3, [sp, #56]	; 0x38
    f4a0:	beq.w	f2d8 <_svfprintf_r+0x1378>
    f4a4:	ldr	r3, [sp, #116]	; 0x74
    f4a6:	b.n	f322 <_svfprintf_r+0x13c2>
    f4a8:	bic.w	r3, r5, r5, asr #31
    f4ac:	str	r7, [sp, #40]	; 0x28
    f4ae:	str	r3, [sp, #16]
    f4b0:	str	r5, [sp, #36]	; 0x24
    f4b2:	mov	fp, r0
    f4b4:	str	r0, [sp, #60]	; 0x3c
    f4b6:	ldrb.w	r7, [sp, #111]	; 0x6f
    f4ba:	b.w	e304 <_svfprintf_r+0x3a4>
    f4be:	cmp	r3, #0
    f4c0:	ble.n	f59e <_svfprintf_r+0x163e>
    f4c2:	cmp.w	fp, #0
    f4c6:	bne.n	f568 <_svfprintf_r+0x1608>
    f4c8:	ldr	r2, [sp, #12]
    f4ca:	lsls	r4, r2, #31
    f4cc:	bmi.n	f568 <_svfprintf_r+0x1608>
    f4ce:	mov	r2, r3
    f4d0:	str	r2, [sp, #36]	; 0x24
    f4d2:	bic.w	r3, r3, r3, asr #31
    f4d6:	b.n	f01a <_svfprintf_r+0x10ba>
    f4d8:	ldr	r3, [sp, #12]
    f4da:	lsls	r3, r3, #31
    f4dc:	mov	r7, fp
    f4de:	bpl.n	f4ec <_svfprintf_r+0x158c>
    f4e0:	add	r6, sp, #256	; 0x100
    f4e2:	movs	r3, #48	; 0x30
    f4e4:	strb.w	r3, [r6, #-65]!
    f4e8:	b.w	e2f0 <_svfprintf_r+0x390>
    f4ec:	str.w	fp, [sp, #36]	; 0x24
    f4f0:	add	r6, sp, #192	; 0xc0
    f4f2:	b.w	e2f6 <_svfprintf_r+0x396>
    f4f6:	add	r2, sp, #140	; 0x8c
    f4f8:	ldr	r1, [sp, #20]
    f4fa:	ldr	r0, [sp, #24]
    f4fc:	bl	f644 <__ssprint_r>
    f500:	cmp	r0, #0
    f502:	bne.w	e154 <_svfprintf_r+0x1f4>
    f506:	ldr	r5, [sp, #116]	; 0x74
    f508:	ldr	r4, [sp, #148]	; 0x94
    f50a:	ldr	r3, [sp, #144]	; 0x90
    f50c:	add.w	r9, sp, #192	; 0xc0
    f510:	b.n	f160 <_svfprintf_r+0x1200>
    f512:	mov	r8, r4
    f514:	movs	r5, #0
    f516:	b.w	e018 <_svfprintf_r+0xb8>
    f51a:	adds	r3, #48	; 0x30
    f51c:	movs	r2, #48	; 0x30
    f51e:	strb.w	r3, [sp, #127]	; 0x7f
    f522:	strb.w	r2, [sp, #126]	; 0x7e
    f526:	add	r3, sp, #128	; 0x80
    f528:	b.n	f39a <_svfprintf_r+0x143a>
    f52a:	ldr	r3, [sp, #132]	; 0x84
    f52c:	b.n	efe0 <_svfprintf_r+0x1080>
    f52e:	ldr	r2, [sp, #72]	; 0x48
    f530:	ldr	r3, [sp, #60]	; 0x3c
    f532:	add	r3, r2
    f534:	movs	r2, #103	; 0x67
    f536:	str	r3, [sp, #36]	; 0x24
    f538:	str	r2, [sp, #52]	; 0x34
    f53a:	bic.w	r3, r3, r3, asr #31
    f53e:	b.n	f01a <_svfprintf_r+0x10ba>
    f540:	ldr	r6, [pc, #248]	; (f63c <_svfprintf_r+0x16dc>)
    f542:	ldr	r3, [pc, #252]	; (f640 <_svfprintf_r+0x16e0>)
    f544:	ldrb.w	r7, [sp, #111]	; 0x6f
    f548:	b.w	e5ae <_svfprintf_r+0x64e>
    f54c:	movs	r2, #0
    f54e:	movs	r3, #0
    f550:	ldrd	r0, r1, [sp, #96]	; 0x60
    f554:	bl	b17c <__aeabi_dcmpeq>
    f558:	cmp	r0, #0
    f55a:	bne.w	f23e <_svfprintf_r+0x12de>
    f55e:	rsb	r5, r5, #1
    f562:	str	r5, [sp, #116]	; 0x74
    f564:	add	r4, r5
    f566:	b.n	efba <_svfprintf_r+0x105a>
    f568:	ldr	r3, [sp, #60]	; 0x3c
    f56a:	ldr	r2, [sp, #72]	; 0x48
    f56c:	adds	r5, r3, r2
    f56e:	add.w	r3, r5, fp
    f572:	str	r3, [sp, #36]	; 0x24
    f574:	bic.w	r3, r3, r3, asr #31
    f578:	b.n	f01a <_svfprintf_r+0x10ba>
    f57a:	ldr	r3, [sp, #12]
    f57c:	ands.w	r3, r3, #1
    f580:	bne.w	f3ac <_svfprintf_r+0x144c>
    f584:	str	r3, [sp, #60]	; 0x3c
    f586:	ldr	r3, [sp, #36]	; 0x24
    f588:	bic.w	r3, r3, r3, asr #31
    f58c:	b.n	f01a <_svfprintf_r+0x10ba>
    f58e:	ldr	r3, [sp, #60]	; 0x3c
    f590:	ldr	r2, [sp, #36]	; 0x24
    f592:	rsb	r3, r3, #1
    f596:	add	r2, r3
    f598:	mov	r3, r2
    f59a:	str	r2, [sp, #36]	; 0x24
    f59c:	b.n	f47c <_svfprintf_r+0x151c>
    f59e:	cmp.w	fp, #0
    f5a2:	bne.n	f5aa <_svfprintf_r+0x164a>
    f5a4:	ldr	r3, [sp, #12]
    f5a6:	lsls	r0, r3, #31
    f5a8:	bpl.n	f5ba <_svfprintf_r+0x165a>
    f5aa:	ldr	r3, [sp, #72]	; 0x48
    f5ac:	adds	r5, r3, #1
    f5ae:	add.w	r3, r5, fp
    f5b2:	str	r3, [sp, #36]	; 0x24
    f5b4:	bic.w	r3, r3, r3, asr #31
    f5b8:	b.n	f01a <_svfprintf_r+0x10ba>
    f5ba:	movs	r3, #1
    f5bc:	str	r3, [sp, #36]	; 0x24
    f5be:	b.n	f01a <_svfprintf_r+0x10ba>
    f5c0:	ldr	r0, [sp, #40]	; 0x28
    f5c2:	ldrb.w	r3, [r8, #1]
    f5c6:	ldr	r5, [r0, #0]
    f5c8:	adds	r0, #4
    f5ca:	cmp	r5, #0
    f5cc:	str	r0, [sp, #40]	; 0x28
    f5ce:	mov	r8, r4
    f5d0:	bge.w	e014 <_svfprintf_r+0xb4>
    f5d4:	mov.w	r5, #4294967295
    f5d8:	b.w	e014 <_svfprintf_r+0xb4>
    f5dc:	strb.w	r1, [sp, #111]	; 0x6f
    f5e0:	b.w	e176 <_svfprintf_r+0x216>
    f5e4:	add.w	r3, sp, #126	; 0x7e
    f5e8:	b.n	f39a <_svfprintf_r+0x143a>
    f5ea:	ldr	r2, [sp, #24]
    f5ec:	movs	r3, #12
    f5ee:	str	r3, [r2, #0]
    f5f0:	mov.w	r0, #4294967295
    f5f4:	b.w	e166 <_svfprintf_r+0x206>
    f5f8:	strb.w	r1, [sp, #111]	; 0x6f
    f5fc:	b.w	e270 <_svfprintf_r+0x310>
    f600:	strb.w	r1, [sp, #111]	; 0x6f
    f604:	b.w	e53c <_svfprintf_r+0x5dc>
    f608:	strb.w	r1, [sp, #111]	; 0x6f
    f60c:	b.w	e6aa <_svfprintf_r+0x74a>
    f610:	strb.w	r1, [sp, #111]	; 0x6f
    f614:	b.w	e64e <_svfprintf_r+0x6ee>
    f618:	strb.w	r1, [sp, #111]	; 0x6f
    f61c:	b.w	e5fa <_svfprintf_r+0x69a>
    f620:	strb.w	r1, [sp, #111]	; 0x6f
    f624:	b.w	e892 <_svfprintf_r+0x932>
    f628:	strb.w	r1, [sp, #111]	; 0x6f
    f62c:	b.w	e850 <_svfprintf_r+0x8f0>
    f630:	strb.w	r1, [sp, #111]	; 0x6f
    f634:	b.w	e814 <_svfprintf_r+0x8b4>
    f638:	.word	0x00010178
    f63c:	.word	0x0001014c
    f640:	.word	0x00010148

0000f644 <__ssprint_r>:
    f644:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f648:	ldr	r3, [r2, #8]
    f64a:	sub	sp, #12
    f64c:	mov	r8, r2
    f64e:	cmp	r3, #0
    f650:	beq.n	f738 <__ssprint_r+0xf4>
    f652:	mov	fp, r0
    f654:	mov.w	r9, #0
    f658:	ldr	r6, [r2, #0]
    f65a:	ldr	r0, [r1, #0]
    f65c:	ldr	r3, [r1, #8]
    f65e:	mov	r5, r1
    f660:	mov	r4, r9
    f662:	cmp	r4, #0
    f664:	beq.n	f6f2 <__ssprint_r+0xae>
    f666:	cmp	r4, r3
    f668:	mov	r7, r3
    f66a:	mov	sl, r3
    f66c:	bcc.n	f6fc <__ssprint_r+0xb8>
    f66e:	ldrh	r3, [r5, #12]
    f670:	tst.w	r3, #1152	; 0x480
    f674:	beq.n	f6d2 <__ssprint_r+0x8e>
    f676:	ldr	r7, [r5, #20]
    f678:	ldr	r1, [r5, #16]
    f67a:	add.w	r7, r7, r7, lsl #1
    f67e:	rsb	sl, r1, r0
    f682:	add.w	r7, r7, r7, lsr #31
    f686:	adds	r0, r4, #1
    f688:	asrs	r7, r7, #1
    f68a:	add	r0, sl
    f68c:	cmp	r0, r7
    f68e:	mov	r2, r7
    f690:	itt	hi
    f692:	movhi	r7, r0
    f694:	movhi	r2, r7
    f696:	lsls	r3, r3, #21
    f698:	bpl.n	f702 <__ssprint_r+0xbe>
    f69a:	mov	r1, r2
    f69c:	mov	r0, fp
    f69e:	bl	b5fc <_malloc_r>
    f6a2:	cmp	r0, #0
    f6a4:	beq.n	f716 <__ssprint_r+0xd2>
    f6a6:	mov	r2, sl
    f6a8:	ldr	r1, [r5, #16]
    f6aa:	str	r0, [sp, #4]
    f6ac:	bl	8f84 <memcpy>
    f6b0:	ldrh	r2, [r5, #12]
    f6b2:	ldr	r3, [sp, #4]
    f6b4:	bic.w	r2, r2, #1152	; 0x480
    f6b8:	orr.w	r2, r2, #128	; 0x80
    f6bc:	strh	r2, [r5, #12]
    f6be:	rsb	r2, sl, r7
    f6c2:	add.w	r0, r3, sl
    f6c6:	str	r7, [r5, #20]
    f6c8:	str	r3, [r5, #16]
    f6ca:	str	r0, [r5, #0]
    f6cc:	str	r2, [r5, #8]
    f6ce:	mov	r7, r4
    f6d0:	mov	sl, r4
    f6d2:	mov	r2, sl
    f6d4:	mov	r1, r9
    f6d6:	bl	bca4 <memmove>
    f6da:	ldr.w	r2, [r8, #8]
    f6de:	ldr	r3, [r5, #8]
    f6e0:	ldr	r0, [r5, #0]
    f6e2:	subs	r3, r3, r7
    f6e4:	add	r0, sl
    f6e6:	subs	r4, r2, r4
    f6e8:	str	r3, [r5, #8]
    f6ea:	str	r0, [r5, #0]
    f6ec:	str.w	r4, [r8, #8]
    f6f0:	cbz	r4, f738 <__ssprint_r+0xf4>
    f6f2:	ldr.w	r9, [r6]
    f6f6:	ldr	r4, [r6, #4]
    f6f8:	adds	r6, #8
    f6fa:	b.n	f662 <__ssprint_r+0x1e>
    f6fc:	mov	r7, r4
    f6fe:	mov	sl, r4
    f700:	b.n	f6d2 <__ssprint_r+0x8e>
    f702:	mov	r0, fp
    f704:	bl	be10 <_realloc_r>
    f708:	mov	r3, r0
    f70a:	cmp	r0, #0
    f70c:	bne.n	f6be <__ssprint_r+0x7a>
    f70e:	ldr	r1, [r5, #16]
    f710:	mov	r0, fp
    f712:	bl	c730 <_free_r>
    f716:	movs	r3, #12
    f718:	str.w	r3, [fp]
    f71c:	ldrh	r3, [r5, #12]
    f71e:	movs	r2, #0
    f720:	orr.w	r3, r3, #64	; 0x40
    f724:	mov.w	r0, #4294967295
    f728:	strh	r3, [r5, #12]
    f72a:	str.w	r2, [r8, #8]
    f72e:	str.w	r2, [r8, #4]
    f732:	add	sp, #12
    f734:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f738:	movs	r0, #0
    f73a:	str.w	r0, [r8, #4]
    f73e:	add	sp, #12
    f740:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f744 <vtable for Stream>:
	...
    f74c:	........m...q...
    f75c:	............

0000f768 <vtable for StreamFile<FsBaseFile, unsigned long long>>:
	...
    f770:	....i...m...A...
    f780:	}...A...)...

0000f78c <vtable for FsFile>:
	...
    f794:	....i...m...A...
    f7a4:	}...A...)...

0000f7b0 <vtable for File>:
	...
    f7b8:	........m.......
    f7c8:	....].......i...
    f7d8:	........}.......
    f7e8:	................
    f7f8:	................
    f808:	Q...

0000f80c <vtable for SDFile>:
	...
    f814:	........m...y...
    f824:	....]...I.......
    f834:	........1...U...
    f844:	........!.......
    f854:	........a.......
    f864:	....

0000f868 <vtable for SDClass>:
	...
    f870:	........1.......
    f880:	....

0000f884 <cs>:
    f884:	....  File    th
    f894:	is=%x, f=%x.....
    f8a4:	   SDFile this=%
    f8b4:	x, refcount=%u..
    f8c4:	Storage %d %d %d
    f8d4:	 %d %d..No stora
    f8e4:	ge..MTP_test....
    f8f4:	Setup done..sdio
    f904:	....

0000f908 <vtable for MTPStorage_SD>:
	...
    f910:	....a...e...i...
    f920:	................
    f930:	)...}...........
    f940:	....].......!...
    f950:	............]...
    f960:	..../mtpindex.da
    f970:	t.../...%d: %d %
    f980:	d %d %d %s..%d: 
    f990:	%d %d %d %d.....

0000f9a0 <supported_op>:
    f9a0:	................
    f9b0:	................
    f9c0:	....

0000f9c4 <propertyList>:
    f9c4:	............A.D.
    f9d4:	Teensy..microsof
    f9e4:	t.com: 1.0;.PJRC
    f9f4:	....1.0.1234....

0000fa04 <SPIClass::spi1_hardware>:
    fa04:	<..@. ..........
    fa14:	.....9....=;....
    fa24:	..............=;
    fa34:	................
    fa44:	 .<.............
    fa54:	..:>?...........
    fa64:	................
	...
    fa8c:	............

0000fa98 <SPISettings::ctar_div_table>:
    fa98:	................
    faa8:	...... .(.8.@.`.
    fab8:	................

0000fac8 <SPIClass::spi0_hardware>:
    fac8:	<..@............
    fad8:	.....:....'.....
    fae8:	................
    faf8:	................
    fb08:	................
    fb18:	..........-.....
    fb28:	................
    fb38:	................
    fb48:	................
    fb58:	.. .

0000fb5c <SPISettings::ctar_clock_table>:
    fb5c:	................
    fb6c:	................
    fb7c:	. ....... ...0..
    fb8c:	. ... ...@...@..
    fb9c:	.P...P...`...`..
    fbac:	.p...`...p..EXFA
    fbbc:	T...

0000fbc0 <vtable for SdSpiCard>:
	...
    fbc8:	au..eu..=u..A{..
    fbd8:	Yz..=}..Qu..uu..
    fbe8:	A|..5u..9u..)v..
    fbf8:	Qz..Iz...y..u...
    fc08:	Mu...}...{...|..

0000fc18 <vtable for SdioCard>:
	...
    fc20:	....9.......a...
    fc30:	e...%...q.......
    fc40:	....a...m...u...
    fc50:	y...............
    fc60:	I...!...........

0000fc70 <digital_pin_to_info_PGM>:
    fc70:	@..C@..@D..CD..@
    fc80:	...C...@0..C0..@
    fc90:	4..C4..@...C...@
    fca0:	...C...@...C...@
    fcb0:	...C...@...C...@
    fcc0:	...C...@...C...@
    fcd0:	...C...@...C...@
    fce0:	...C...@...C...@
    fcf0:	...C...@...C...@
    fd00:	...C...@...C...@
    fd10:	...C...@...C...@
    fd20:	...C...@...C...@
    fd30:	h .Ch..@...C...@
    fd40:	8..C8..@<..C<..@
    fd50:	@..C@..@H..CH..@
    fd60:	L..CL..@(..C(..@
    fd70:	,..C,..@` .C`..@
    fd80:	d .Cd..@ ..C ..@
    fd90:	$..C$..@(..C(..@
    fda0:	,..C,..@D..CD..@
    fdb0:	p..Cp..@t..Ct..@
    fdc0:	h..Ch..@P..CP..@
    fdd0:	X..CX..@\..C\..@
    fde0:	T..CT..@ ..C ..@
    fdf0:	$..C$..@...C...@
    fe00:	...C...@8..C8..@
    fe10:	4..C4..@0..C0..@
    fe20:	<..C<..@,..C,..@
    fe30:	( .C(..@, .C,..@
    fe40:	. .C...@. .C...@
    fe50:	. .C...@. .C...@
    fe60:	. .C...@. .C...@

0000fe70 <vtable for usb_serial_class>:
	...
    fe78:	................
    fe88:	................
    fe98:	....

0000fe9c <usb_endpoint_config_table>:
    fe9c:	........

0000fea4 <usb_descriptor_list>:
    fea4:	.... ...........
    feb4:	L...i...........
    fec4:	................
    fed4:	....4...........
    fee4:	................
	...

0000ff04 <_global_impure_ptr>:
    ff04:	....C...POSIX...
    ff14:	....

0000ff18 <_ctype_>:
    ff18:	.         ((((( 
    ff28:	                
    ff38:	 ...............
    ff48:	................
    ff58:	..AAAAAA........
    ff68:	................
    ff78:	..BBBBBB........
    ff88:	................
    ff98:	 ...............
	...
   10018:	........

00010020 <__mprec_tens>:
   10020:	.......?......$@
   10030:	......Y@.....@.@
   10040:	.......@.....j.@
   10050:	.......A......cA
   10060:	.......A....e..A
   10070:	... _..B....vH7B
   10080:	......mB..@..0.B
   10090:	.......B..4&.k.C
   100a0:	...7y.AC....W4vC
   100b0:	..Ngm..C.=.`.X.C
   100c0:	@..x...DP.....KD
   100d0:	..M....D.J...-.D
   100e0:	...yCx.D

000100e8 <__mprec_bigtens>:
   100e8:	...7y.AC.n.....F
   100f8:	..?..O8M2.0.Hw.Z
   10108:	<.s..O.u

00010110 <p05.6087>:
   10110:	........}...Infi
   10120:	nity....NaN.0...

00010130 <zeroes.7258>:
   10130:	0000000000000000
   10140:	INF.inf.NAN.nan.
   10150:	0123456789ABCDEF
   10160:	....0123456789ab
   10170:	cdef....(null)..

00010180 <blanks.7257>:
   10180:	                

00010190 <_init>:
   10190:	push	{r3, r4, r5, r6, r7, lr}
   10192:	nop
   10194:	pop	{r3, r4, r5, r6, r7}
   10196:	pop	{r3}
   10198:	mov	lr, r3
   1019a:	bx	lr

0001019c <__init_array_start>:
   1019c:	.word	0x0000c64d

000101a0 <__frame_dummy_init_array_entry>:
   101a0:	5.......u>..

Disassembly of section .fini:

000101ac <_fini>:
   101ac:	push	{r3, r4, r5, r6, r7, lr}
   101ae:	nop
