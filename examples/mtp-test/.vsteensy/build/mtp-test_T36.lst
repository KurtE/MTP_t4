
.vsteensy/build/mtp-test_T36.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00012314 l    d  .fini	00000000 .fini
00012318 l    d  .ARM.exidx	00000000 .ARM.exidx
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0970 l    d  .data	00000000 .data
1fff1478 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
0000b538 l     F .text	0000000c startup_default_early_hook
0000b544 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff1478 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff147c l       .bss	00000000 object.8610
00012308 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mtp-test.ino
000005d4 l     F .text	00000002 __tcf_0
0000137c l     F .text	000000f0 _GLOBAL__sub_I_sd_str
00000000 l    df *ABS*	00000000 Storage.cpp
00001b0c l     F .text	00000070 MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.8] [clone .constprop.13]
000028e0 l     F .text	000000f4 MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.15]
00003848 l     F .text	00000036 MTPStorage_SD::ScanAll(unsigned long) [clone .part.9] [clone .constprop.12]
00000000 l    df *ABS*	00000000 MTP.cpp
00003930 l     F .text	00000064 MTPD::write(char const*, int) [clone .part.3]
00003a3c l     F .text	000000bc MTPD::GetDevicePropDesc(unsigned long) [clone .part.5]
00004bbc l     F .text	0000002c MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.8]
00011c1c l     O .text	00000024 supported_op
00011c40 l     O .text	00000010 propertyList
00000000 l    df *ABS*	00000000 SPI.cpp
000052fc l     F .text	000001f8 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]
00000000 l    df *ABS*	00000000 Time.cpp
000059d4 l     F .text	00000018 refreshCache(long) [clone .part.0]
1fff1a5c l     O .bss	00000004 cacheTime
1fff1a60 l     O .bss	00000007 tm
1fff1a68 l     O .bss	00000004 sysTime
1fff1a6c l     O .bss	00000001 Status
1fff1a74 l     O .bss	00000004 prevMillis
1fff09bc l     O .data	00000004 syncInterval
00011d14 l     O .text	0000000c monthDays
1fff1a78 l     O .bss	00000004 nextSyncTime
00000000 l    df *ABS*	00000000 SD.cpp
00005b54 l     F .text	0000005c _GLOBAL__sub_I_SD
00000000 l    df *ABS*	00000000 FmtNumber.cpp
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatFilePrint.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
0000691c l     F .text	0000001e FsCache::sync() [clone .part.2]
000069a8 l     F .text	00000034 ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]
000069dc l     F .text	0000002a ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]
00000000 l    df *ABS*	00000000 upcase.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
000078a4 l     F .text	00000032 FatFile::openRoot(FatVolume*) [clone .part.36]
000079c0 l     F .text	00000094 FatFile::sync() [clone .part.40]
00000000 l    df *ABS*	00000000 FatFilePrint.cpp
00000000 l    df *ABS*	00000000 FatPartition.cpp
000087ac l     F .text	0000004a FatCache::sync() [clone .part.8]
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
00008bd0 l     F .text	00000028 lfnGetChar(DirLfn_t*, unsigned char)
00000000 l    df *ABS*	00000000 FatFileSFN.cpp
000095bc l     F .text	00000058 FatFile::getSFN(char*) [clone .part.2]
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
000099a8 l     F .text	00000018 SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]
000099c0 l     F .text	00000022 SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
00009fa4 l     F .text	00000030 sdIrs()
00009fd4 l     F .text	00000018 isBusyCommandComplete()
00009fec l     F .text	00000010 isBusyCommandInhibit()
00009ffc l     F .text	0000000c isBusyDMA()
0000a008 l     F .text	00000014 isBusyFifoRead()
0000a01c l     F .text	00000014 isBusyFifoWrite()
0000a030 l     F .text	00000018 isBusyTransferComplete()
0000a048 l     F .text	000000cc setSdclk(unsigned long)
0000a178 l     F .text	00000028 waitTimeout(bool (*)())
0000a1a0 l     F .text	0000004c yieldTimeout(bool (*)())
0000a21c l     F .text	0000005c cardCommand(unsigned long, unsigned long)
0000a298 l     F .text	00000064 readReg16(unsigned long, void*)
0000a2fc l     F .text	0000002c isBusyCMD13()
0000a344 l     F .text	00000020 waitDmaStatus() [clone .part.6]
0000a364 l     F .text	000000b4 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
0000a558 l     F .text	00000078 transferStop()
0000a908 l     F .text	000000ac cardCMD6(unsigned long, unsigned char*)
1fff1f34 l     O .bss	00000001 m_version2
1fff1f38 l     O .bss	00000010 m_cid
1fff1f48 l     O .bss	00000004 m_busyFcn
1fff1f4c l     O .bss	00000001 m_highCapacity
1fff1f50 l     O .bss	00000004 m_ocr
1fff1f54 l     O .bss	00000004 m_rca
1fff1f58 l     O .bss	00000004 m_irqstat
1fff09c0 l     O .data	00000001 m_errorCode
1fff1f5c l     O .bss	00000001 m_initDone
1fff1f60 l     O .bss	00000010 m_csd
1fff1f70 l     O .bss	00000001 m_dmaBusy
1fff1f74 l     O .bss	00000004 m_sdClkKhz
1fff1f78 l     O .bss	00000004 m_errorLine
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 usb1_mtp.c
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
1fff1f7d l     O .bss	00000001 tx_noautoflush
1fff1f80 l     O .bss	00000004 tx_packet
1fff1f84 l     O .bss	00000001 transmit_previous_timeout
1fff1f88 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 pins_teensy.c
0000b578 l     F .text	0000004c digitalWrite.part.1
00000000 l    df *ABS*	00000000 usb_mem.c
1fff09c8 l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff1f94 l     O .bss	00000004 ep0_tx_ptr
1fff1f98 l     O .bss	00000018 rx_last
1fff1fb0 l     O .bss	00000002 ep0_tx_len
1fff1fb4 l     O .bss	00000040 ep0_rx0_buf
1fff1ff4 l     O .bss	00000018 rx_first
1fff200c l     O .bss	00000001 ep0_tx_data_toggle
1fff2010 l     O .bss	00000040 ep0_rx1_buf
1fff2050 l     O .bss	00000018 tx_first
1fff0000 l     O .usbdescriptortable	000000e0 table
1fff2068 l     O .bss	00000018 tx_last
1fff2080 l     O .bss	00000008 setup
1fff2088 l     O .bss	00000001 ep0_tx_bdt_bank
1fff208c l     O .bss	00000008 reply_buffer
1fff2098 l     O .bss	00000006 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff209e l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 serialEvent.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 analog.c
1fff20cd l     O .bss	00000001 calibrating
1fff09e1 l     O .data	00000001 analog_config_bits
1fff20ce l     O .bss	00000001 analog_reference_internal
1fff09e2 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 usb_desc.c
1fff09e4 l     O .data	00000012 device_descriptor
1fff0a10 l     O .data	00000069 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stpcpy.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000e84c l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 mprec.c
00012278 l     O .text	0000000c p05.6087
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 dtoa.c
0000f200 l     F .text	00000128 quorem
00000000 l    df *ABS*	00000000 vfprintf.c
00012298 l     O .text	00000010 zeroes.7258
000122e8 l     O .text	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 impure.c
1fff0ad0 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.12/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.12/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 avr_emulation.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff1478 l       .bss	00000000 __bss_start__
1fff2120 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
0000b530  w    F .text	00000006 adc0_isr
0000e434 g     F .text	0000004a stpcpy
000019b4 g     F .text	00000158 MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)
0000d404 g     F .text	0000002c .hidden __aeabi_dcmpun
0000b28c g     F .text	0000001c usb_serial_available
0000d3c8 g     F .text	00000012 .hidden __aeabi_dcmple
0000e4c0 g     F .text	000000ba strcpy
0000d304 g     F .text	0000007a .hidden __cmpdf2
0000a714 g     F .text	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000c5e0  w    F .text	000000ec yield
00008450 g     F .text	000001e8 FatFile::write(void const*, unsigned int)
0000d304 g     F .text	0000007a .hidden __eqdf2
0000991c  w    F .text	00000002 SdSpiCard::~SdSpiCard()
0000c8d4 g     F .text	000000ba Print::printNumber64(unsigned long long, unsigned char, unsigned char)
00006254 g     F .text	000003d4 ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)
1fff1948 g     O .bss	00000104 storage
1fff09f8 g     O .data	00000018 usb_string_manufacturer_name_default
000083d8 g     F .text	00000076 FatFile::truncate()
00001de4 g     F .text	0000003c MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)
0000ce74 g     F .text	0000005a .hidden __floatdidf
0000b4e8  w    F .text	00000048 hard_fault_isr
0000b530  w    F .text	00000006 dma_ch6_isr
1fff1f2c g     O .bss	00000004 FsDateTime::callback
0000c7f8 g     F .text	00000020 Print::println()
0000b530  w    F .text	00000006 uart0_lon_isr
00006154 g     F .text	000000fe ExFatFile::seekSet(unsigned long long)
0000b944 g     F .text	00000108 usb_rx_memory
000098f0  w    F .text	00000004 SdSpiCard::errorCode() const
000004b0  w    F .text	0000000c File::flush()
0000b530  w    F .text	00000006 dma_ch8_isr
0000e02c g     F .text	00000002 __malloc_unlock
000006c8  w    F .text	000000c0 SDFile::openNextFile(unsigned char)
1fff1f30 g     O .bss	00000004 FsVolume::m_cwv
00007ccc g     F .text	000000be FatFile::open(FatFile*, char const*, int)
0000c9ac g     F .text	000000e0 analog_init
0000ba4c g     F .text	00000084 usb_tx
0000b530  w    F .text	00000006 portcd_isr
00008638 g     F .text	00000020 FatFile::printModifyDateTime(Print*)
0000e6fc g     F .text	0000004a _vdprintf_r
0000576c g     F .text	000000b0 SPIClass::setSCK(unsigned char)
00011a10  w    O .text	00000060 vtable for SDFile
0000dec4 g     F .text	000000c6 memmove
00003880 g     F .text	0000006e MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)
0000eb1c g     F .text	0000004c _Balloc
0000b530  w    F .text	00000006 can1_rx_warn_isr
00001488  w    F .text	00000004 MTPStorage_SD::get_FSCount()
00012320 g       .ARM.exidx	00000000 __exidx_end
0000b530  w    F .text	00000006 dma_error_isr
000089d0 g     F .text	0000003c FatPartition::freeChain(unsigned long)
1fff20b0 g     O .bss	00000001 EventResponder::runningFromYield
0000b030 g     F .text	0000001a SdSpiArduinoDriver::receive()
00009ae0 g     F .text	0000007c SdSpiCard::cardCommand(unsigned char, unsigned long)
0000b530  w    F .text	00000006 i2c0_isr
0000c7cc g     F .text	0000002c Print::write(unsigned char const*, unsigned int)
0000d2f4 g     F .text	0000008a .hidden __gtdf2
00008bf8 g     F .text	00000024 FatFile::lfnChecksum(unsigned char*)
0000d7a4 g     F .text	0000000c __errno
00000b64  w    F .text	00000026 SDFile::isDirectory()
0000b530  w    F .text	00000006 portd_isr
0000b530  w    F .text	00000006 enet_error_isr
00005ed4 g     F .text	000000ae ExFatFile::printName(Print*)
00000e24  w    F .text	00000028 File::~File()
1fff20a0 g     O .bss	00000004 EventResponder::firstInterrupt
00003d74 g     F .text	0000006c MTPD::GetObjectHandles(unsigned long, unsigned long)
00009920  w    F .text	0000000e SdSpiCard::~SdSpiCard()
00009680 g     F .text	00000078 FsBaseFile::FsBaseFile(FsBaseFile const&)
0000b530  w    F .text	00000006 tpm1_isr
00006e48 g     F .text	00000018 ExFatPartition::rootLength()
000098f4  w    F .text	00000004 SdSpiCard::errorData() const
0000c7bc  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00011dd8 g     O .text	00000200 digital_pin_to_info_PGM
1fff211c g     O .bss	00000004 errno
00009b5c g     F .text	00000054 SdSpiCard::readOCR(unsigned long*)
0000b04c g     F .text	00000020 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
00009234 g     F .text	00000388 FatFile::open(FatFile*, fname_t*, int)
00006d1c g     F .text	00000012 ExFatPartition::fatGet(unsigned long, unsigned long*)
00012320 g       .ARM.exidx	00000000 _etext
000054f4 g     F .text	00000134 _spi_dma_rxISR0()
1fff1478 g       .bss	00000000 _sbss
0000d390 g     F .text	00000010 .hidden __aeabi_cdcmple
0000a120 g     F .text	0000000c SdioCard::errorData() const
0000149c g     F .text	0000000c MTPStorage_SD::totalSize(unsigned long)
0000a824 g     F .text	000000b4 SdioCard::writeSector(unsigned long, unsigned char const*)
0000b530  w    F .text	00000006 porte_isr
00001370 g     F .text	0000000c loop
0000b530  w    F .text	00000006 portb_isr
0000b530  w    F .text	00000006 spi1_isr
00004244 g     F .text	00000144 MTPD::GetStorageInfo(unsigned long)
0000b530  w    F .text	00000006 uart3_status_isr
00005e10 g     F .text	000000c4 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
0000b530  w    F .text	00000006 mcm_isr
0000ad48 g     F .text	000000cc SdioCard::readData(unsigned char*)
00009a24 g     F .text	00000080 SdSpiCard::readData(unsigned char*, unsigned int)
1fff20a4 g     O .bss	00000004 EventResponder::lastInterrupt
0000b530  w    F .text	00000006 uart1_status_isr
000096f8 g     F .text	00000028 FsBaseFile::close()
0000b0e0 g     F .text	00000134 memcpy
0000b530  w    F .text	00000006 randnum_isr
0000d380 g     F .text	00000020 .hidden __aeabi_cdrcmple
00000494  w    F .text	0000000c File::available()
00003058 g     F .text	000007ee MTPStorage_SD::ScanDir(unsigned long, unsigned long)
00006d54 g     F .text	00000080 ExFatPartition::freeChain(unsigned long)
000029e0 g     F .text	0000046c MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)
00007f40 g     F .text	0000002a FatFile::peek()
00010160 g     F .text	000016e4 _svfprintf_r
0000ce04 g     F .text	00000022 .hidden __floatsidf
00000600  w    F .text	00000014 SDFile::whoami()
1fff1494  w    O .bss	00000001 SDFile::name()::zeroterm
1fff1f90 g     O .bss	00000004 systick_millis_count
0000d2fc g     F .text	00000082 .hidden __ltdf2
0000748c g     F .text	000000aa ExFatFile::rename(ExFatFile*, char const*)
0000b4e8  w    F .text	00000048 bus_fault_isr
0000099c  w    F .text	00000044 SDFile::truncate(unsigned long long)
00004d8c g     F .text	00000554 MTPD::loop()
0000b530  w    F .text	00000006 watchdog_isr
0000d480 g     F .text	00000000 .hidden __aeabi_uldivmod
0000b530  w    F .text	00000006 i2c1_isr
1fff2094 g     O .bss	00000001 usb_configuration
0000b530  w    F .text	00000006 dma_ch11_isr
00000474  w    F .text	00000006 SdCardInterface::status()
0000a8d8 g     F .text	00000030 SdioCard::syncDevice()
0000a5d4 g     F .text	000000cc SdioCard::writeData(unsigned char const*)
00000000  w      *UND*	00000000 __fini_array_end
1fff20b1 g     O .bss	00000001 SPCRemulation::pinout
00000788  w    F .text	00000058 StreamFile<FsBaseFile, unsigned long long>::available()
00007f6c g     F .text	00000040 FatFile::readDirCache(bool)
0000b530  w    F .text	00000006 i2c2_isr
1fff09f8  w    O .data	00000018 usb_string_manufacturer_name
1fff2110 g     O .bss	0000000c usb_rx_byte_count_data
0000b530  w    F .text	00000006 pit1_isr
1fff0a7c g     O .data	00000008 usb_string_mtp
0000d800 g     F .text	00000010 malloc
0000b530  w    F .text	00000006 dma_ch4_isr
0000b530  w    F .text	00000006 software_isr
0001198c  w    O .text	00000024 vtable for FsFile
0000b530  w    F .text	00000006 dma_ch7_isr
000052e0  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00012188 g     O .text	000000c8 __mprec_tens
0000c518 g     F .text	000000c8 usb_init
00009908  w    F .text	00000004 SdSpiCard::type() const
0000b530  w    F .text	00000006 lptmr_isr
00000da0  w    F .text	00000084 SDFile::seek(unsigned long long, int)
1fff20d8 g     O .bss	00000004 __malloc_top_pad
0000b5d4 g     F .text	00000024 rtc_set
00009930 g     F .text	00000076 SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00007538 g     F .text	000000e2 ExFatFile::truncate()
1fff0970 g     O .data	00000000 .hidden __dso_handle
0000cde4 g     F .text	0000001e .hidden __aeabi_ui2d
0000eb00 g     F .text	0000001c _localeconv_r
1fff0974 g     O .data	00000004 sd_str
0000b5c4 g     F .text	00000010 attachInterruptVector
0000afe8 g     F .text	00000048 SdSpiArduinoDriver::deactivate()
0000ec98 g     F .text	00000012 __i2b
1fff0970 g       .data	00000000 _sdata
0000b0dc g     F .text	00000002 usb_mtp_configure
0000050c  w    F .text	0000000c File::operator bool()
00008858 g     F .text	0000000e FatCache::sync()
0000d4b0 g     F .text	000002e2 .hidden __udivmoddi4
0000409c g     F .text	000001a8 MTPD::getObjectPropValue(unsigned long, unsigned long)
0000cb60 g     F .text	00000000 .hidden __aeabi_drsub
000078d8 g     F .text	00000034 FatFile::addCluster()
0000e410 g     F .text	00000024 _sbrk_r
00009bb0 g     F .text	0000004a SdSpiCard::readRegister(unsigned char, void*)
0000a1fc g     F .text	00000020 SdioCard::type() const
00000488  w    F .text	0000000c File::write(void const*, unsigned int)
000001d0 g     F .text	000001f0 ResetHandler
0000b214 g     F .text	00000048 usb_serial_getchar
0000b530  w    F .text	00000006 can1_bus_off_isr
0000b530  w    F .text	00000006 ftm2_isr
00000950  w    F .text	0000004c SDFile::name()
1fff2104 g     O .bss	00000008 usb_cdc_line_coding
0000b5f8 g     F .text	0000000a digitalWrite
1fff20a8 g     O .bss	00000004 EventResponder::lastYield
0000b530  w    F .text	00000006 uart5_status_isr
0000b530  w    F .text	00000006 lpuart0_status_isr
00005de8 g     F .text	00000028 ExFatFile::openRoot(ExFatVolume*)
00012004 g     O .text	00000006 usb_endpoint_config_table
0000b530  w    F .text	00000006 dma_ch9_isr
000007f8  w    F .text	00000038 StreamFile<FsBaseFile, unsigned long long>::read()
0000b530  w    F .text	00000006 pit2_isr
0000d3b4 g     F .text	00000012 .hidden __aeabi_dcmplt
1fff20d4 g     O .bss	00000004 __malloc_max_sbrked_mem
00000ae4  w    F .text	0000001a SDFile::position()
00009eac g     F .text	00000042 SdSpiCard::writeStop()
00002e4c g     F .text	00000160 MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)
0000b890 g     F .text	0000004c usb_free
0000b530  w    F .text	00000006 i2c3_isr
0000ce28 g     F .text	0000003a .hidden __extendsfdf2
0000d124 g     F .text	000001d0 .hidden __aeabi_ddiv
0000cb6c g     F .text	00000276 .hidden __adddf3
00004030 g     F .text	0000006c MTPD::getObjectPropsSupported(unsigned long)
00003994 g     F .text	000000a8 MTPD::writestring(char const*)
00009f70 g     F .text	00000032 SdSpiCard::writeData(unsigned char const*)
000004a0  w    F .text	00000010 File::peek()
00008a0c g     F .text	000000b0 FatPartition::freeClusterCount()
00000bf0  w    F .text	000000d0 SDClass::open(char const*, unsigned char)
00012318 g       .ARM.exidx	00000000 __exidx_start
0000ced0 g     F .text	00000254 .hidden __aeabi_dmul
00009da4 g     F .text	00000050 SdSpiCard::writeStart(unsigned long)
0000b530  w    F .text	00000006 pit0_isr
1fff20ac g     O .bss	00000004 EventResponder::firstYield
0001206c g     O .text	00000004 _global_impure_ptr
000014b4 g     F .text	0000007c MTPStorage_SD::write(char const*, unsigned long)
0000b530  w    F .text	00000006 can1_error_isr
00000844  w    F .text	00000034 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
0000e030 g     F .text	000003de _realloc_r
00000b00  w    F .text	00000018 SDFile::read(void*, unsigned int)
0000d7b0 g     F .text	00000050 __libc_init_array
1fff2120 g       .bss	00000000 __bss_end
00000a30  w    F .text	00000044 SDFile::rewindDirectory()
0000b530  w    F .text	00000006 can0_wakeup_isr
00006728 g     F .text	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
0000a12c g     F .text	0000001c SdioCard::readCID(CID*)
0000726c g     F .text	000000ea ExFatFile::addDirCluster()
0000b530  w    F .text	00000006 flash_cmd_isr
00009f1c g     F .text	00000052 SdSpiCard::writeData(unsigned char, unsigned char const*)
00012250 g     O .text	00000028 __mprec_bigtens
0000c7a4  w    F .text	00000004 usb_serial_class::clear()
0000cde4 g     F .text	0000001e .hidden __floatunsidf
0000b530  w    F .text	00000006 uart2_status_isr
0000b548 g     F .text	0000002c _sbrk
0000ef2c g     F .text	00000042 __mcmp
00011a70  w    O .text	00000028 vtable for SDClass
000005c0  w    F .text	00000012 SDFile::operator bool()
1fff09c4 g     O .data	00000004 __brkval
00005ce0 g     F .text	00000042 fsPrintDateTime(Print*, unsigned short, unsigned short)
1fff1f8c g     O .bss	00000001 usb_cdc_line_rtsdtr
0000b4a0 g     F .text	00000048 usb_serial_flush_callback
000122f8 g     F .text	00000000 _init
000079a0 g     F .text	0000001e FatFile::cacheDirEntry(unsigned char)
0000b530  w    F .text	00000006 svcall_isr
00000b8c  w    F .text	00000062 SDClass::remove(char const*)
000006ac  w    F .text	0000001c SDFile::close()
0000b530  w    F .text	00000006 dma_ch15_isr
00000f58  w    F .text	0000005c SDFile::~SDFile()
00005aec g     F .text	00000020 day()
0000b530  w    F .text	00000006 uart1_error_isr
0000e86c g     F .text	00000028 __libc_fini_array
0000b530  w    F .text	00000006 usbhs_phy_isr
1fff2120 g       .bss	00000000 _ebss
0000a79c g     F .text	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00003af8 g     F .text	00000214 MTPD::WriteDescriptor()
1fff0978 g     O .data	00000004 propertyListNum
00000cc0  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
000087f8 g     F .text	0000005e FatCache::read(unsigned long, unsigned char)
0000ebfc g     F .text	00000040 __hi0bits
0000d430 g     F .text	0000004e .hidden __fixdfsi
00007358 g     F .text	0000005a ExFatFile::mkdir(ExFatFile*, ExName_t*)
0000b530 g     F .text	00000006 unused_isr
00003d0c g     F .text	00000068 MTPD::WriteStorageIDs()
0000b530  w    F .text	00000006 spi0_isr
0000b530  w    F .text	00000006 dma_ch3_isr
00005b50  w    F .text	00000002 SDClass::~SDClass()
000020fc g     F .text	000007e4 MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)
1fff1498 g     O .bss	000004b0 sdx
00000e24  w    F .text	00000028 File::~File()
00000fb4 g     F .text	00000154 storage_configure()
00005b2c g     F .text	00000024 year()
0000c9a8 g     F .text	00000004 operator delete(void*, unsigned int)
0000b530  w    F .text	00000006 flash_error_isr
0000cb6c g     F .text	00000276 .hidden __aeabi_dadd
0000d2fc g     F .text	00000082 .hidden __ledf2
0000e480 g     F .text	0000003e strcat
0000b530  w    F .text	00000006 uart5_error_isr
0000b530  w    F .text	00000006 rtc_seconds_isr
00011c80 g     O .text	00000094 SPIClass::spi0_hardware
0000b530  w    F .text	00000006 pdb_isr
0000eddc g     F .text	000000a0 __pow5mult
00008184 g     F .text	0000005c FatFile::rmdir()
0000ce64 g     F .text	0000006a .hidden __aeabi_ul2d
0000b4e8  w    F .text	00000048 usage_fault_isr
0000b530  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
0000894c g     F .text	00000082 FatPartition::allocateCluster(unsigned long, unsigned long*)
0000b530  w    F .text	00000006 dma_ch14_isr
00000d54  w    F .text	0000004c SDClass::exists(char const*)
00000000  w      *UND*	00000000 __deregister_frame_info
1fff210c g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000c794 g     F .text	00000010 systick_isr
0000b530  w    F .text	00000006 rtc_alarm_isr
0000052c  w    F .text	0000000c File::isDirectory()
00009614 g     F .text	00000020 FatFile::getSFN(char*)
00009cf4 g     F .text	00000076 SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000b530  w    F .text	00000006 dma_ch2_isr
1fff09d0 g     O .data	00000010 Serial
00005bb0 g     F .text	00000054 fmtBase10(char*, unsigned short)
0000b530  w    F .text	00000006 ftm1_isr
000004c8  w    F .text	00000016 File::seek(unsigned long long, int)
00006778 g     F .text	00000060 ExFatFile::printFileSize(Print*)
0000c7c4  w    F .text	00000006 usb_serial_class::write(unsigned char)
000097a0 g     F .text	0000005e FsBaseFile::openNext(FsBaseFile*, int)
0000b538  w    F .text	0000000c startup_early_hook
0000b530  w    F .text	00000006 dma_ch13_isr
00006ef4 g     F .text	0000008c ExFatFile::addCluster()
000119b0  w    O .text	00000060 vtable for File
0000b530  w    F .text	00000006 uart2_error_isr
00000a74  w    F .text	00000054 SDClass::usedSize()
0000b25c g     F .text	00000030 usb_serial_peekchar
0000d3f0 g     F .text	00000012 .hidden __aeabi_dcmpgt
00001648 g     F .text	00000002 mtp_yield()
0000ddc0 g     F .text	00000000 memchr
000088e4 g     F .text	00000066 FatPartition::fatPut(unsigned long, unsigned long)
1fff0ab8 g     O .data	00000016 usb_string_serial_number_default
0000b4e8 g     F .text	00000048 fault_isr
0000e930 g     F .text	000001d0 _free_r
0000a5d0 g     F .text	00000004 SdioCard::readStop()
00006948 g     F .text	00000060 FsCache::get(unsigned long, unsigned char)
0000d3dc g     F .text	00000012 .hidden __aeabi_dcmpge
0000b530  w    F .text	00000006 usb_charge_isr
0000c7b4  w    F .text	00000004 usb_serial_class::flush()
0000b530  w    F .text	00000006 cmt_isr
0000cb68 g     F .text	0000027a .hidden __aeabi_dsub
00008abc g     F .text	00000114 FatPartition::init(BlockDeviceInterface*, unsigned char)
0000b530  w    F .text	00000006 usbhs_isr
00007ab8 g     F .text	0000014e FatFile::mkdir(FatFile*, fname_t*)
1fff1474 g     O .data	00000004 __malloc_sbrk_base
0000c7ac  w    F .text	00000004 usb_serial_class::read()
0000b530  w    F .text	00000006 ftm3_isr
00000570  w    F .text	0000000c File::rewindDirectory()
0000b530  w    F .text	00000006 tsi0_isr
00009054 g     F .text	00000128 FatFile::remove()
0000ce64 g     F .text	0000006a .hidden __floatundidf
0000b574  w    F .text	00000002 __cxa_pure_virtual
0000ee7c g     F .text	000000ae __lshift
00007c08 g     F .text	000000c2 FatFile::mkdir(FatFile*, char const*, bool)
0000b530  w    F .text	00000006 spi2_isr
00006e9c g     F .text	00000058 exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)
00011844 g     F .text	00000100 __ssprint_r
0000f140 g     F .text	0000005e _vasnprintf_r
0000c9a0  w    F .text	00000002 serialEvent()
1fff200d g     O .bss	00000001 usb_reboot_timer
0000e7a8 g     F .text	000000a4 __register_exitproc
00006628 g     F .text	000000fe ExFatFile::open(ExFatFile*, char const*, int)
00005c58 g     F .text	00000050 fsFmtDate(char*, unsigned short)
0000e65c g     F .text	000000a0 strncmp
000073b4 g     F .text	000000d6 ExFatFile::mkdir(ExFatFile*, char const*, bool)
0000b2a8 g     F .text	00000038 usb_serial_flush_input
00006dd4 g     F .text	00000072 ExFatPartition::freeClusterCount()
00001fd4 g     F .text	00000074 MTPStorage_SD::ConstructFilename(int, char*, int)
00005ca8 g     F .text	00000038 fsFmtTime(char*, unsigned short)
0000ecac g     F .text	00000130 __multiply
0000b3e8 g     F .text	00000018 usb_serial_putchar
00000022 g       *ABS*	00000000 _teensy_model_identifier
1fff20dc g     O .bss	00000028 __malloc_current_mallinfo
0000f084 g     F .text	000000ba __d2b
1fff20b4 g     O .bss	00000018 HardwareSerial::s_serials_with_serial_events
0000b530  w    F .text	00000006 can0_bus_off_isr
0000a1ec  w    F .text	0000000e SdioCard::~SdioCard()
0000148c  w    F .text	00000008 MTPStorage_SD::get_FSName(unsigned long)
00005d40 g     F .text	000000a6 ExFatFile::getName(char*, unsigned int)
1fff2089 g     O .bss	00000001 usb_rx_memory_needed
0000a6a0 g     F .text	00000074 SdioCard::writeStart(unsigned long)
0000bad0 g     F .text	00000a48 usb_isr
0000d798 g     F .text	0000000c __cxa_atexit
00005f84 g     F .text	0000019e ExFatFile::read(void*, unsigned int)
0000ce04 g     F .text	00000022 .hidden __aeabi_i2d
00000b18  w    F .text	00000018 SDFile::peek()
00006a08 g     F .text	0000000e FsCache::sync()
1fff097c g     O .data	00000040 SPI
0000de60 g     F .text	00000062 memcmp
00011fd8  w    O .text	00000028 vtable for usb_serial_class
0000b06c g     F .text	00000016 SdSpiArduinoDriver::send(unsigned char)
0000b530  w    F .text	00000006 uart3_error_isr
00004a8c g     F .text	0000007c MTPD::GetObject(unsigned long)
0000b0d8 g     F .text	00000004 sdCsWrite(unsigned char, bool)
0000d794  w    F .text	00000002 .hidden __aeabi_ldiv0
00007058 g     F .text	0000005a ExFatFile::rmdir()
0000b530  w    F .text	00000006 porta_isr
00004388 g     F .text	000006e6 MTPD::getObjectPropDesc(unsigned long, unsigned long)
0000d124 g     F .text	000001d0 .hidden __divdf3
1fff03d0 g     O .usbbuffers	000005a0 usb_buffer_memory
00009c0c g     F .text	00000098 SdSpiCard::sectorCount()
0000b530  w    F .text	00000006 low_voltage_isr
00001498 g     F .text	00000004 MTPStorage_SD::has_directories(unsigned long)
1fff1068 g     O .data	00000408 __malloc_av_
0000b530  w    F .text	00000006 can0_error_isr
0000b6e4 g     F .text	0000016c _init_Teensyduino_internal_
00000830  w    F .text	00000014 SDFile::flush()
0000ced0 g     F .text	00000254 .hidden __muldf3
0000b448 g     F .text	00000058 usb_serial_flush_output
0000b530  w    F .text	00000006 dma_ch12_isr
0000e028 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
00008d4c g     F .text	0000024c FatFile::parsePathName(char const*, fname_t*, char const**)
0000b530  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
0000b084 g     F .text	00000052 SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
0000f1a0 g     F .text	0000005e _calloc_r
0000b530  w    F .text	00000006 pit3_isr
00004b08 g     F .text	0000006e MTPD::read(char*, unsigned long)
1fff1a70 g     O .bss	00000004 getTimePtr
1fff09cc g     O .data	00000001 yield_active_check_flags
0000b530  w    F .text	00000006 enet_rx_isr
0000720c g     F .text	0000005e ExFatFile::sync()
00007fac g     F .text	000001d6 FatFile::rename(FatFile*, char const*)
0000a328 g     F .text	0000001c SdioCard::isBusy()
0000b530  w    F .text	00000006 portc_isr
00009d6c g     F .text	00000038 SdSpiCard::readStop()
0000df8c g     F .text	0000009a memset
0000c990 g     F .text	00000010 main
1fff20d0 g     O .bss	00000004 __malloc_max_total_mem
00006a18 g     F .text	000000b4 ExFatPartition::bitmapFind(unsigned long, unsigned long)
000059ec g     F .text	000000a0 now()
0000761c g     F .text	00000288 ExFatFile::write(void const*, unsigned int)
00011b4c g     O .text	00000058 vtable for MTPStorage_SD
00004be8 g     F .text	00000130 MTPD::SendObjectInfo(unsigned long, unsigned long)
0000b4e8  w    F .text	00000048 memmanage_fault_isr
00007a74 g     F .text	00000044 FatFile::dirEntry(DirFat_t*)
00000cfc  w    F .text	00000058 SDFile::available()
00000500  w    F .text	0000000c File::close()
0000ca8c g     F .text	0000007c usb_init_serialnumber
00012314 g       .text	00000000 __init_array_end
0000f328 g     F .text	00000e34 _dtoa_r
0000d820 g     F .text	00000570 _malloc_r
1fff20cc g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
0000b530  w    F .text	00000006 debugmonitor_isr
0000e760 g     F .text	0000001a __ascii_wctomb
00009680 g     F .text	00000078 FsBaseFile::FsBaseFile(FsBaseFile const&)
0000ce74 g     F .text	0000005a .hidden __aeabi_l2d
0000c6cc g     F .text	00000080 EventResponder::triggerEventNotImmediate()
0000581c g     F .text	00000008 SPIClass::transfer(void const*, void*, unsigned int)
00000031 g       *ABS*	00000000 __rtc_localtime
00005d24 g     F .text	00000008 fsPrintDateTime(Print*, unsigned long)
0000b604 g     F .text	00000044 micros
00000000  w      *UND*	00000000 __libc_fini
00000538  w    F .text	00000038 File::openNextFile(unsigned char)
0000b530  w    F .text	00000006 cmp1_isr
00008f98 g     F .text	000000ba FatFile::printName(Print*)
0000b530  w    F .text	00000006 ftm0_isr
000070b4 g     F .text	00000158 ExFatFile::syncDir()
0000e894 g     F .text	0000009c _malloc_trim_r
1fff0ab4 g     O .data	00000004 string0
0000b2e0 g     F .text	00000108 usb_serial_write
0000146c  w    F .text	0000001a MTPStorage_SD::addFilesystem(FS&, char const*)
0000b544  w    F .text	00000002 startup_late_hook
0000c7b0  w    F .text	00000004 usb_serial_class::available()
1fff09e0 g     O .data	00000001 _serialEvent_default
00004b78 g     F .text	00000044 MTPD::readstring(char*)
000083cc g     F .text	0000000c FatFile::sync()
000009e0  w    F .text	00000050 SDClass::mkdir(char const*)
1fff0a84  w    O .data	0000002e usb_string_product_name
000038f0 g     F .text	00000026 MTPD::GetNumObjects(unsigned long, unsigned long)
0000b648 g     F .text	0000009c delay
0000d304 g     F .text	0000007a .hidden __nedf2
0000b530  w    F .text	00000006 tpm0_isr
00001530 g     F .text	00000118 MTPStorage_SD::CloseIndex()
00012314 g     F .fini	00000000 _fini
00003918 g     F .text	00000018 MTPD::get_buffer()
00000518  w    F .text	00000014 File::name()
00005b0c g     F .text	00000020 month()
00009ca4 g     F .text	00000050 SdSpiCard::readStart(unsigned long)
00006738 g     F .text	00000040 ExFatFile::openNext(ExFatFile*, int)
0000c828 g     F .text	0000001c Print::printf(char const*, ...)
0000b530  w    F .text	00000006 i2s0_rx_isr
0000b530  w    F .text	00000006 uart4_error_isr
0000c8c4 g     F .text	00000010 Print::print(long)
00007a54 g     F .text	0000001e FatFile::close()
00005c04 g     F .text	00000052 fmtBase10(char*, unsigned long)
000004e0  w    F .text	00000010 File::position()
00000e4c  w    F .text	00000064 SDFile::~SDFile()
00008868 g     F .text	0000000c FatPartition::clusterStartSector(unsigned long) const
0000e860 g     F .text	0000000c atexit
0000a174  w    F .text	00000002 SdioCard::~SdioCard()
000007e0  w    F .text	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
000005a8  w    F .text	00000018 File::write(unsigned char)
0000e77c g     F .text	0000002c _write_r
1fff1a7c g     O .bss	000004b0 SD
0000a484 g     F .text	000000d4 SdioCard::erase(unsigned long, unsigned long)
0000b530  w    F .text	00000006 can0_message_isr
00005628 g     F .text	000000a4 SPIClass::setMOSI(unsigned char)
1fff0ef8 g     O .data	00000004 _impure_ptr
00011944  w    O .text	00000024 vtable for Stream
0000b530  w    F .text	00000006 can1_message_isr
00006124 g     F .text	0000002e ExFatFile::peek()
00011968  w    O .text	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
0000b530  w    F .text	00000006 nmi_isr
0000917c g     F .text	000000b6 FatFile::lfnUniqueSfn(fname_t*)
00000cd4  w    F .text	00000014 SDFile::write(void const*, unsigned int)
000098c4 g     F .text	00000028 FsVolume::open(char const*, int)
0000a114 g     F .text	0000000c SdioCard::errorCode() const
00007d8c g     F .text	0000000e FatFile::open(FatVolume*, char const*, int)
00000ce8  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
00012304 g       .text	00000000 __preinit_array_end
00000614 g     F .text	00000098 dateTime(unsigned short*, unsigned short*, unsigned char*)
0000991c  w    F .text	00000002 SdSpiCard::~SdSpiCard()
0000b530  w    F .text	00000006 sdhc_isr
00005aac g     F .text	00000020 minute()
00006acc g     F .text	000000e0 ExFatPartition::init(BlockDeviceInterface*, unsigned char)
00006c90 g     F .text	00000034 ExFatPartition::dirCache(DirPos_t*, unsigned char)
00009df4 g     F .text	000000b8 SdSpiCard::erase(unsigned long, unsigned long)
000029d4 g     F .text	0000000c MTPStorage_SD::DeleteObject(unsigned long)
0000dd90 g     F .text	0000002a __ascii_mbtowc
000099e4 g     F .text	0000003e SdSpiCard::isBusy()
00011d28 g     O .text	00000058 vtable for SdSpiCard
00009c04  w    F .text	00000008 SdSpiCard::readCID(CID*)
00001108 g     F .text	00000268 setup
0001200c g     O .text	00000060 usb_descriptor_list
0000b8dc g     F .text	0000003c usb_rx
0000a278 g     F .text	00000020 SdioCard::status()
00001934 g     F .text	00000080 MTPStorage_SD::ResetIndex()
0000b530  w    F .text	00000006 dma_ch10_isr
00000470  w    F .text	00000002 Print::flush()
0000b530  w    F .text	00000006 uart0_error_isr
000004f0  w    F .text	00000010 File::size()
000008ec  w    F .text	00000062 SDClass::rmdir(char const*)
0000b850 g     F .text	00000040 usb_malloc
00007da8 g     F .text	00000198 FatFile::read(void*, unsigned int)
0000b530  w    F .text	00000006 i2s0_isr
00007d9c g     F .text	0000000c FatFile::openRoot(FatVolume*)
20030000 g       .bss	00000000 _estack
000098ec g     F .text	00000004 operator new(unsigned int, unsigned long*)
00009bfc  w    F .text	00000008 SdSpiCard::readCSD(csd_t*)
0000057c  w    F .text	0000002c File::read()
0000b400 g     F .text	00000048 usb_serial_write_buffer_free
00009aa4 g     F .text	0000003c SdSpiCard::waitNotBusy(unsigned short)
0000b530  w    F .text	00000006 enet_timer_isr
0000d3a0 g     F .text	00000012 .hidden __aeabi_dcmpeq
00000eb0  w    F .text	00000030 File::~File()
0000c818  w    F .text	0000000e _write
1fff1478 g       .data	00000000 _edata
00006d30 g     F .text	00000024 ExFatPartition::fatPut(unsigned long, unsigned long)
00003de0 g     F .text	00000250 MTPD::GetObjectInfo(unsigned long)
0000a174  w    F .text	00000002 SdioCard::~SdioCard()
0000b530  w    F .text	00000006 i2s0_tx_isr
0000b530  w    F .text	00000006 adc1_isr
00009ef0 g     F .text	0000002c SdSpiCard::syncDevice()
0000790c g     F .text	00000094 FatFile::addDirCluster()
0000047c  w    F .text	0000000c File::read(void*, unsigned int)
0000c7b8  w    F .text	00000004 usb_serial_class::availableForWrite()
0000b530  w    F .text	00000006 cmp0_isr
000004bc  w    F .text	0000000c File::truncate(unsigned long long)
0000cb08 g     F .text	0000004c ultoa
00005b50  w    F .text	00000002 SDClass::~SDClass()
00005acc g     F .text	00000020 second()
00009720 g     F .text	00000080 FsBaseFile::open(FsVolume*, char const*, int)
00001b7c g     F .text	00000208 MTPStorage_SD::ReadIndexRecord(unsigned long)
0000c9a4 g     F .text	00000004 operator new(unsigned int)
0000c74c g     F .text	00000044 EventResponder::runFromInterrupt()
1fff1470 g     O .data	00000004 __malloc_trim_threshold
0000c7a8  w    F .text	00000004 usb_serial_class::peek()
00001d84 g     F .text	0000005e MTPStorage_SD::GetNextObjectHandle(unsigned long)
00000ee0  w    F .text	00000078 MTPStorage_SD::~MTPStorage_SD()
1fff1a4c g     O .bss	00000010 mtpd
0000ef70 g     F .text	00000114 __mdiff
0000a164 g     F .text	00000010 SdioCard::readOCR(unsigned long*)
0000d430 g     F .text	0000004e .hidden __aeabi_d2iz
00002fac g     F .text	000000aa MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)
00006cc4 g     F .text	00000058 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
1fff1f7c g     O .bss	00000001 usb_cdc_transmit_flush_timer
0000b530  w    F .text	00000006 pit_isr
00005a8c g     F .text	00000020 hour()
0000a5d0 g     F .text	00000004 SdioCard::writeStop()
0000990c  w    F .text	00000010 SdSpiCard::writeSector(unsigned long, unsigned char const*)
00009634 g     F .text	0000004a FatFile::printSFN(Print*)
00005d2c g     F .text	00000014 ExFatFile::close()
00012080 g     O .text	00000101 _ctype_
0000b530  w    F .text	00000006 dac0_isr
000098f8  w    F .text	00000010 SdSpiCard::readSector(unsigned long, unsigned char*)
00012304 g       .text	00000000 __init_array_start
0000d794  w    F .text	00000002 .hidden __aeabi_idiv0
0000b530  w    F .text	00000006 can1_tx_warn_isr
0000164c g     F .text	000002e8 MTPStorage_SD::OpenIndex()
0000d404 g     F .text	0000002c .hidden __unorddf2
00000878  w    F .text	00000074 SDClass::rename(char const*, char const*)
0000b530  w    F .text	00000006 uart0_status_isr
0000b530  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
00008658 g     F .text	0000003e FatFile::printFileSize(Print*)
0000e580 g     F .text	000000dc strlen
00008c1c g     F .text	0000002e FatFile::openCluster(FatFile*)
0000d390 g     F .text	00000010 .hidden __aeabi_cdcmpeq
000067fc g     F .text	00000120 ExFatFile::ls(Print*, unsigned char, unsigned char)
0000d2f4 g     F .text	0000008a .hidden __gedf2
000081e0 g     F .text	00000094 FatFile::seekSet(unsigned long)
1fff0a84 g     O .data	0000002e usb_string_product_name_default
0000e748 g     F .text	00000018 vdprintf
0000b530  w    F .text	00000006 dma_ch1_isr
0000a418 g     F .text	0000006c SdioCard::sectorCount()
00009800 g     F .text	000000c4 FsVolume::begin(BlockDeviceInterface*)
0000b918 g     F .text	0000002c usb_tx_packet_count
0000834c g     F .text	00000080 FatFile::openNext(FatFile*, int)
00011d80 g     O .text	00000058 vtable for SdioCard
0000ce28 g     F .text	0000003a .hidden __aeabi_f2d
0000b530  w    F .text	00000006 dma_ch5_isr
00001e38 g     F .text	0000019c MTPStorage_SD::close()
00008c4c g     F .text	00000100 FatFile::getName(char*, unsigned int)
0000b530  w    F .text	00000006 can0_rx_warn_isr
00000ee0  w    F .text	00000078 MTPStorage_SD::~MTPStorage_SD()
00002048 g     F .text	000000b4 MTPStorage_SD::rename(unsigned long, char const*)
0000b530  w    F .text	00000006 can0_tx_warn_isr
0000b530  w    F .text	00000006 uart4_status_isr
0000ae14 g     F .text	00000074 SdioCard::readStart(unsigned long)
00000000  w      *UND*	00000000 _Jv_RegisterClasses
0000af58 g     F .text	00000090 SdSpiArduinoDriver::activate()
000067d8 g     F .text	00000022 ExFatFile::printModifyDateTime(Print*)
00008698 g     F .text	00000114 FatFile::ls(Print*, unsigned char, unsigned char)
00001494 g     F .text	00000004 MTPStorage_SD::readonly(unsigned long)
0000cb68 g     F .text	0000027a .hidden __subdf3
00012304 g       .text	00000000 __preinit_array_start
00006bac g     F .text	000000a6 ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
00001e20 g     F .text	00000016 MTPStorage_SD::GetSize(unsigned long)
000005d8  w    F .text	00000028 File::whoami()
0000ec3c g     F .text	0000005a __lo0bits
00006c54 g     F .text	0000003a ExFatPartition::chainSize(unsigned long)
00008274 g     F .text	000000d6 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
0000cb54 g     F .text	0000000a __aeabi_atexit
00004a70 g     F .text	0000001a MTPD::receive_buffer()
00000000  w      *UND*	00000000 __register_frame_info
00006f80 g     F .text	000000d6 ExFatFile::remove()
0000b530  w    F .text	00000006 cmp2_isr
0000c790 g     F .text	00000004 pendablesrvreq_isr
00000b30  w    F .text	00000034 SDClass::totalSize()
00004d18 g     F .text	00000072 MTPD::SendObject()
000014a8 g     F .text	0000000c MTPStorage_SD::usedSize(unsigned long)
0000046c  w    F .text	00000004 Print::availableForWrite()
1fff0efc g     O .data	0000016c __global_locale
0000b530  w    F .text	00000006 wakeup_isr
000056cc g     F .text	000000a0 SPIClass::setMISO(unsigned char)
0000a9b4 g     F .text	00000394 SdioCard::begin(SdioConfig)
0000693c g     F .text	0000000c FsCache::invalidate()
0000b530  w    F .text	00000006 cmp3_isr
00005824 g     F .text	000001b0 breakTime(long, tmElements_t&)
0000c844 g     F .text	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
00008874 g     F .text	0000006e FatPartition::fatGet(unsigned long, unsigned long*)
0000d810 g     F .text	00000010 free
0000b530  w    F .text	00000006 tpm2_isr
0000eb7c g     F .text	00000080 __multadd
0000eb68 g     F .text	00000012 _Bfree
00000ac8  w    F .text	0000001a SDFile::size()
0000b530  w    F .text	00000006 dma_ch0_isr
00000f58  w    F .text	0000005c SDFile::~SDFile()
1fff0ab8  w    O .data	00000016 usb_string_serial_number
0000b530  w    F .text	00000006 enet_tx_isr
00006e60 g     F .text	0000003a exFatHashName(char const*, unsigned int, unsigned short)
0000ae88 g     F .text	000000d0 SdioCard::readSector(unsigned long, unsigned char*)
0000a148 g     F .text	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text:

00000000 <_VectorsFlash>:
HardwareSerial 	*HardwareSerial::s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
uint8_t 		HardwareSerial::s_count_serials_with_serial_events = 0;

// simple helper function that add us to the list of Serial ports that have
// their own serialEvent code defined that needs to be called at yield.
void HardwareSerial::addToSerialEventsList() {
       0:	... ....1.......
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
      10:	................
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
}
      20:	............1...
      30:	1...............
      40:	1...1...1...1...
      50:	1...1...1...1...
      60:	1...1...1...1...
      70:	1...1...1...1...
      80:	1...1...1...1...
      90:	1...1...1...1...
      a0:	1...1...1...1...
      b0:	1...1...1...1...
      c0:	1...1...1...1...
      d0:	1...1...1...1...
      e0:	1...1...1...1...
      f0:	1...1...1...1...
     100:	1...1...1...1...
     110:	1.......1...1...
     120:	1...1...1...1...
     130:	1...1...1...1...
     140:	1...1...1...1...
     150:	1...1...1...1...
     160:	1...1...1...1...
     170:	1...1...1...1...
     180:	1...1...1...1...
     190:	1...1...1...1...
     1a0:	1...1...1...1...
     1b0:	1...1...1...1...
     1c0:	1...1...1...1...

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #356]	; (338 <ResetHandler+0x168>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	b538 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #336]	; (33c <ResetHandler+0x16c>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #332]	; (340 <ResetHandler+0x170>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #332]	; (344 <ResetHandler+0x174>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #332]	; (348 <ResetHandler+0x178>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #328]	; (34c <ResetHandler+0x17c>)
     202:	ldr	r2, [pc, #332]	; (350 <ResetHandler+0x180>)
     204:	str	r2, [r3, #0]
		RTC_SR = 0;
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     206:	ldr	r3, [pc, #332]	; (354 <ResetHandler+0x184>)
     208:	ldrb	r2, [r3, #0]
     20a:	lsls	r1, r2, #28
     20c:	bpl.n	216 <ResetHandler+0x46>
     20e:	ldrb	r2, [r3, #0]
     210:	orr.w	r2, r2, #8
     214:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     216:	ldr	r3, [pc, #320]	; (358 <ResetHandler+0x188>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     218:	ldr	r1, [pc, #320]	; (35c <ResetHandler+0x18c>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     21a:	movs	r2, #170	; 0xaa
     21c:	strb	r2, [r3, #0]
     21e:	ldr	r2, [pc, #320]	; (360 <ResetHandler+0x190>)
     220:	ldr	r3, [pc, #320]	; (364 <ResetHandler+0x194>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     222:	cmp	r3, r1
     224:	bcs.n	230 <ResetHandler+0x60>
     226:	ldr.w	r0, [r2, #4]!
     22a:	str.w	r0, [r3], #4
     22e:	b.n	222 <ResetHandler+0x52>
     230:	ldr	r3, [pc, #308]	; (368 <ResetHandler+0x198>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     232:	ldr	r1, [pc, #312]	; (36c <ResetHandler+0x19c>)
     234:	movs	r2, #0
     236:	cmp	r3, r1
     238:	bcs.n	240 <ResetHandler+0x70>
     23a:	str.w	r2, [r3], #4
     23e:	b.n	236 <ResetHandler+0x66>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     240:	ldr	r1, [pc, #300]	; (370 <ResetHandler+0x1a0>)
     242:	ldr	r2, [pc, #304]	; (374 <ResetHandler+0x1a4>)
     244:	movs	r3, #0
     246:	ldr.w	r0, [r2, r3, lsl #2]
     24a:	str.w	r0, [r1, r3, lsl #2]
     24e:	adds	r3, #1
     250:	cmp	r3, #116	; 0x74
     252:	bne.n	246 <ResetHandler+0x76>
     254:	ldr	r3, [pc, #288]	; (378 <ResetHandler+0x1a8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     256:	ldr	r2, [pc, #292]	; (37c <ResetHandler+0x1ac>)
     258:	movs	r1, #128	; 0x80
     25a:	strb.w	r1, [r3], #1
     25e:	cmp	r3, r2
     260:	bne.n	25a <ResetHandler+0x8a>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     262:	ldr	r3, [pc, #284]	; (380 <ResetHandler+0x1b0>)
     264:	ldr	r2, [pc, #264]	; (370 <ResetHandler+0x1a0>)
     266:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     268:	ldr	r3, [pc, #280]	; (384 <ResetHandler+0x1b4>)
     26a:	movs	r2, #138	; 0x8a
     26c:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     26e:	sub.w	r3, r3, #4096	; 0x1000
     272:	movs	r2, #36	; 0x24
     274:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     276:	movs	r2, #160	; 0xa0
     278:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     27a:	ldrb	r2, [r3, #6]
     27c:	lsls	r2, r2, #30
     27e:	bpl.n	27a <ResetHandler+0xaa>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     280:	ldrb	r2, [r3, #6]
     282:	lsls	r4, r2, #27
     284:	bmi.n	280 <ResetHandler+0xb0>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     286:	ldr	r2, [pc, #256]	; (388 <ResetHandler+0x1b8>)
     288:	ldrb	r3, [r2, #6]
     28a:	and.w	r3, r3, #12
     28e:	cmp	r3, #8
     290:	ldr	r3, [pc, #244]	; (388 <ResetHandler+0x1b8>)
     292:	bne.n	288 <ResetHandler+0xb8>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(2);
    #elif F_CPU == 120000000
	MCG_C5 = MCG_C5_PRDIV0(1);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(14);
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     294:	movs	r2, #1
     296:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
     298:	movs	r2, #72	; 0x48
     29a:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     29c:	ldrb	r2, [r3, #6]
     29e:	lsls	r0, r2, #26
     2a0:	bpl.n	29c <ResetHandler+0xcc>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2a2:	ldr	r2, [pc, #228]	; (388 <ResetHandler+0x1b8>)
     2a4:	ldrb	r1, [r2, #6]
     2a6:	ldr	r3, [pc, #224]	; (388 <ResetHandler+0x1b8>)
     2a8:	lsls	r1, r1, #25
     2aa:	bpl.n	2a4 <ResetHandler+0xd4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     2ac:	ldr	r2, [pc, #220]	; (38c <ResetHandler+0x1bc>)
     2ae:	ldr	r1, [pc, #224]	; (390 <ResetHandler+0x1c0>)
     2b0:	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2b2:	movs	r1, #2
     2b4:	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2b6:	movs	r2, #32
     2b8:	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ba:	ldrb	r2, [r3, #6]
     2bc:	and.w	r2, r2, #12
     2c0:	cmp	r2, #12
     2c2:	bne.n	2ba <ResetHandler+0xea>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2c4:	ldr	r3, [pc, #204]	; (394 <ResetHandler+0x1c4>)
     2c6:	ldr	r2, [pc, #208]	; (398 <ResetHandler+0x1c8>)
     2c8:	str	r2, [r3, #0]
#endif

#if defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started.  For Teensy 3.6
	// we don't do this early.  See comment above about slow rising power.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     2ca:	ldr	r2, [pc, #208]	; (39c <ResetHandler+0x1cc>)
     2cc:	ldr	r4, [pc, #208]	; (3a0 <ResetHandler+0x1d0>)
     2ce:	ldr	r3, [r2, #0]
     2d0:	ands.w	r3, r3, #256	; 0x100
     2d4:	bne.n	2de <ResetHandler+0x10e>
		RTC_SR = 0;
     2d6:	str	r3, [r4, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     2d8:	mov.w	r3, #5376	; 0x1500
     2dc:	str	r3, [r2, #0]
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2de:	ldr	r3, [pc, #196]	; (3a4 <ResetHandler+0x1d4>)
     2e0:	ldr	r2, [pc, #196]	; (3a8 <ResetHandler+0x1d8>)
     2e2:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2e4:	movs	r2, #0
     2e6:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2e8:	movs	r2, #7
     2ea:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2ee:	ldr	r2, [pc, #188]	; (3ac <ResetHandler+0x1dc>)
     2f0:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2f4:	cpsie	i

	_init_Teensyduino_internal_();
     2f6:	bl	b6e4 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2fa:	ldr	r3, [r4, #0]
     2fc:	lsls	r2, r3, #31
     2fe:	bpl.n	30c <ResetHandler+0x13c>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     300:	ldr	r0, [pc, #172]	; (3b0 <ResetHandler+0x1e0>)
     302:	bl	b5d4 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     306:	ldr	r3, [pc, #172]	; (3b4 <ResetHandler+0x1e4>)
     308:	ldr	r2, [pc, #172]	; (3b8 <ResetHandler+0x1e8>)
     30a:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     30c:	ldr	r3, [pc, #172]	; (3bc <ResetHandler+0x1ec>)
     30e:	ldrb	r3, [r3, #0]
     310:	lsls	r3, r3, #25
     312:	bpl.n	328 <ResetHandler+0x158>
     314:	ldr	r4, [pc, #156]	; (3b4 <ResetHandler+0x1e4>)
     316:	ldr	r3, [pc, #160]	; (3b8 <ResetHandler+0x1e8>)
     318:	ldr	r2, [r4, #0]
     31a:	cmp	r2, r3
     31c:	bne.n	328 <ResetHandler+0x158>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     31e:	ldr	r0, [pc, #144]	; (3b0 <ResetHandler+0x1e0>)
     320:	bl	b5d4 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     324:	movs	r3, #0
     326:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     328:	bl	d7b0 <__libc_init_array>

	startup_late_hook();
     32c:	bl	b544 <startup_late_hook>
	main();
     330:	bl	c990 <main>
     334:	b.n	334 <ResetHandler+0x164>
     336:	nop
     338:	.word	0x4005200e
     33c:	.word	0x40048030
     340:	.word	0x00043f82
     344:	.word	0x2b000001
     348:	.word	0xe000ed88
     34c:	.word	0xe0082000
     350:	.word	0x85000003
     354:	.word	0x4007d002
     358:	.word	0x4007e000
     35c:	.word	0x1fff1478
     360:	.word	0x0001231c
     364:	.word	0x1fff0970
     368:	.word	0x1fff1478
     36c:	.word	0x1fff2120
     370:	.word	0x1fff0200
     374:	.word	0x00000000
     378:	.word	0xe000e400
     37c:	.word	0xe000e464
     380:	.word	0xe000ed08
     384:	.word	0x40065000
     388:	.word	0x40064000
     38c:	.word	0x40048044
     390:	.word	0x01030000
     394:	.word	0x40048004
     398:	.word	0x000510c0
     39c:	.word	0x4003d010
     3a0:	.word	0x4003d014
     3a4:	.word	0xe000e014
     3a8:	.word	0x000176ff
     3ac:	.word	0x20200000
     3b0:	.word	0x00000031
     3b4:	.word	0x4003e01c
     3b8:	.word	0x5a94c3a5
     3bc:	.word	0x4007f000
     3c0:	.word	0xffffffff
     3c4:	.word	0xffffffff
     3c8:	.word	0xffffffff
     3cc:	.word	0xffffffff
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff1478
     42c:	.word	0x00000000
     430:	.word	0x00012318

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff147c
     460:	.word	0x00012318
     464:	.word	0x1fff1478
     468:	.word	0x00000000

0000046c <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     46c:	movs	r0, #0
     46e:	bx	lr

00000470 <Print::flush()>:
	virtual void flush()				{ }
     470:	bx	lr
     472:	nop

00000474 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
     474:	mov.w	r0, #4294967295
     478:	bx	lr
     47a:	nop

0000047c <File::read(void*, unsigned int)>:
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
     47c:	ldr	r0, [r0, #16]
     47e:	cbz	r0, 486 <File::read(void*, unsigned int)+0xa>
     480:	ldr	r3, [r0, #0]
     482:	ldr	r3, [r3, #40]	; 0x28
     484:	bx	r3
	}
     486:	bx	lr

00000488 <File::write(void const*, unsigned int)>:
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
     488:	ldr	r0, [r0, #16]
     48a:	cbz	r0, 492 <File::write(void const*, unsigned int)+0xa>
     48c:	ldr	r3, [r0, #0]
     48e:	ldr	r3, [r3, #44]	; 0x2c
     490:	bx	r3
	}
     492:	bx	lr

00000494 <File::available()>:
	virtual int available() {
		return (f) ? f->available() : 0;
     494:	ldr	r0, [r0, #16]
     496:	cbz	r0, 49e <File::available()+0xa>
     498:	ldr	r3, [r0, #0]
     49a:	ldr	r3, [r3, #16]
     49c:	bx	r3
	}
     49e:	bx	lr

000004a0 <File::peek()>:
	virtual int peek() {
		return (f) ? f->peek() : -1;
     4a0:	ldr	r0, [r0, #16]
     4a2:	cbz	r0, 4aa <File::peek()+0xa>
     4a4:	ldr	r3, [r0, #0]
     4a6:	ldr	r3, [r3, #24]
     4a8:	bx	r3
	}
     4aa:	mov.w	r0, #4294967295
     4ae:	bx	lr

000004b0 <File::flush()>:
	virtual void flush() {
		if (f) f->flush();
     4b0:	ldr	r0, [r0, #16]
     4b2:	cbz	r0, 4ba <File::flush()+0xa>
     4b4:	ldr	r3, [r0, #0]
     4b6:	ldr	r3, [r3, #12]
     4b8:	bx	r3
     4ba:	bx	lr

000004bc <File::truncate(unsigned long long)>:
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
     4bc:	ldr	r0, [r0, #16]
     4be:	cbz	r0, 4c6 <File::truncate(unsigned long long)+0xa>
     4c0:	ldr	r1, [r0, #0]
     4c2:	ldr	r1, [r1, #48]	; 0x30
     4c4:	bx	r1
	}
     4c6:	bx	lr

000004c8 <File::seek(unsigned long long, int)>:
	virtual bool seek(uint64_t pos, int mode) {
     4c8:	push	{r4}
		return (f) ? f->seek(pos, mode) : false;
     4ca:	ldr	r0, [r0, #16]
     4cc:	cbz	r0, 4d8 <File::seek(unsigned long long, int)+0x10>
     4ce:	ldr	r4, [r0, #0]
     4d0:	ldr	r1, [r4, #52]	; 0x34
	}
     4d2:	ldr.w	r4, [sp], #4
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
     4d6:	bx	r1
	}
     4d8:	ldr.w	r4, [sp], #4
     4dc:	bx	lr
     4de:	nop

000004e0 <File::position()>:
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
     4e0:	ldr	r0, [r0, #16]
     4e2:	cbz	r0, 4ea <File::position()+0xa>
     4e4:	ldr	r3, [r0, #0]
     4e6:	ldr	r3, [r3, #56]	; 0x38
     4e8:	bx	r3
	}
     4ea:	movs	r0, #0
     4ec:	movs	r1, #0
     4ee:	bx	lr

000004f0 <File::size()>:
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
     4f0:	ldr	r0, [r0, #16]
     4f2:	cbz	r0, 4fa <File::size()+0xa>
     4f4:	ldr	r3, [r0, #0]
     4f6:	ldr	r3, [r3, #60]	; 0x3c
     4f8:	bx	r3
	}
     4fa:	movs	r0, #0
     4fc:	movs	r1, #0
     4fe:	bx	lr

00000500 <File::close()>:
	virtual void close() {
		if (f) f->close();
     500:	ldr	r0, [r0, #16]
     502:	cbz	r0, 50a <File::close()+0xa>
     504:	ldr	r3, [r0, #0]
     506:	ldr	r3, [r3, #64]	; 0x40
     508:	bx	r3
     50a:	bx	lr

0000050c <File::operator bool()>:
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
     50c:	ldr	r0, [r0, #16]
     50e:	cbz	r0, 516 <File::operator bool()+0xa>
     510:	ldr	r3, [r0, #0]
     512:	ldr	r3, [r3, #68]	; 0x44
     514:	bx	r3
	}
     516:	bx	lr

00000518 <File::name()>:
	virtual const char* name() {
		return (f) ? f->name() : "";
     518:	ldr	r0, [r0, #16]
     51a:	cbz	r0, 522 <File::name()+0xa>
     51c:	ldr	r3, [r0, #0]
     51e:	ldr	r3, [r3, #72]	; 0x48
     520:	bx	r3
	}
     522:	ldr	r0, [pc, #4]	; (528 <File::name()+0x10>)
     524:	bx	lr
     526:	nop
     528:	.word	0x00011ab0

0000052c <File::isDirectory()>:
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
     52c:	ldr	r0, [r0, #16]
     52e:	cbz	r0, 536 <File::isDirectory()+0xa>
     530:	ldr	r3, [r0, #0]
     532:	ldr	r3, [r3, #76]	; 0x4c
     534:	bx	r3
	}
     536:	bx	lr

00000538 <File::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
     538:	push	{r3, r4, r5, lr}
		return (f) ? f->openNextFile(mode) : *this;
     53a:	ldr	r3, [r1, #16]
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
     53c:	mov	r4, r0
		return (f) ? f->openNextFile(mode) : *this;
     53e:	cbz	r3, 54c <File::openNextFile(unsigned char)+0x14>
     540:	ldr	r5, [r3, #0]
     542:	mov	r1, r3
     544:	ldr	r3, [r5, #80]	; 0x50
     546:	blx	r3
	}
     548:	mov	r0, r4
     54a:	pop	{r3, r4, r5, pc}
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     54c:	mov.w	r0, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
     550:	ldr	r2, [pc, #24]	; (56c <File::openNextFile(unsigned char)+0x34>)
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
     552:	strb	r3, [r4, #4]
     554:	strb	r3, [r4, #12]
     556:	str	r0, [r4, #8]
     558:	str	r2, [r4, #0]
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
     55a:	ldr	r3, [r1, #16]
     55c:	str	r3, [r4, #16]
		if (f) f->refcount++;
     55e:	cmp	r3, #0
     560:	beq.n	548 <File::openNextFile(unsigned char)+0x10>
     562:	ldr	r2, [r3, #16]
     564:	adds	r2, #1
     566:	str	r2, [r3, #16]
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
	}
     568:	mov	r0, r4
     56a:	pop	{r3, r4, r5, pc}
     56c:	.word	0x000119b8

00000570 <File::rewindDirectory()>:
	virtual void rewindDirectory(void) {
		if (f) f->rewindDirectory();
     570:	ldr	r0, [r0, #16]
     572:	cbz	r0, 57a <File::rewindDirectory()+0xa>
     574:	ldr	r3, [r0, #0]
     576:	ldr	r3, [r3, #84]	; 0x54
     578:	bx	r3
     57a:	bx	lr

0000057c <File::read()>:
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     57c:	ldr	r0, [r0, #16]
     57e:	cbz	r0, 5a2 <File::read()+0x26>
		if (f) f->rewindDirectory();
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
     580:	push	{lr}
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     582:	ldr	r3, [r0, #0]
		if (f) f->rewindDirectory();
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
     584:	sub	sp, #12
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     586:	ldr	r3, [r3, #40]	; 0x28
     588:	movs	r2, #1
     58a:	add.w	r1, sp, #7
     58e:	blx	r3
     590:	cbz	r0, 59c <File::read()+0x20>
		return b;
     592:	ldrb.w	r0, [sp, #7]
	}
     596:	add	sp, #12
     598:	ldr.w	pc, [sp], #4
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     59c:	mov.w	r0, #4294967295
     5a0:	b.n	596 <File::read()+0x1a>
     5a2:	mov.w	r0, #4294967295
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
     5a6:	bx	lr

000005a8 <File::write(unsigned char)>:
	size_t write(uint8_t b) {
     5a8:	push	{r4, lr}
     5aa:	sub	sp, #8
     5ac:	add	r3, sp, #8
		return write(&b, 1);
     5ae:	ldr	r2, [r0, #0]
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
	size_t write(uint8_t b) {
     5b0:	strb.w	r1, [r3, #-1]!
		return write(&b, 1);
     5b4:	ldr	r4, [r2, #44]	; 0x2c
     5b6:	mov	r1, r3
     5b8:	movs	r2, #1
     5ba:	blx	r4
	}
     5bc:	add	sp, #8
     5be:	pop	{r4, pc}

000005c0 <SDFile::operator bool()>:
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     5c0:	ldr	r3, [r0, #92]	; 0x5c
     5c2:	cbz	r3, 5c8 <SDFile::operator bool()+0x8>
     5c4:	movs	r0, #1
		}
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
     5c6:	bx	lr
     5c8:	ldr	r0, [r0, #96]	; 0x60
     5ca:	adds	r0, #0
     5cc:	it	ne
     5ce:	movne	r0, #1
     5d0:	bx	lr
     5d2:	nop

000005d4 <__tcf_0>:
//  const int cs[] = {BUILTIN_SDCARD,38}; // edit to reflect your configuration
  const char *sd_str[]={"sdio"}; // edit to reflect your configuration
  const int cs[] = {BUILTIN_SDCARD}; // edit to reflect your configuration
  const int nsd = sizeof(cs)/sizeof(int);

SDClass sdx[nsd];
     5d4:	bx	lr
     5d6:	nop

000005d8 <File::whoami()>:
	}
	virtual ~File() {
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
     5d8:	push	{r4, lr}
     5da:	mov	r4, r0
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
     5dc:	mov	r2, r0
     5de:	ldr	r3, [r0, #16]
     5e0:	ldr	r1, [pc, #20]	; (5f8 <File::whoami()+0x20>)
     5e2:	ldr	r0, [pc, #24]	; (5fc <File::whoami()+0x24>)
     5e4:	bl	c828 <Print::printf(char const*, ...)>
		if (f) f->whoami();
     5e8:	ldr	r0, [r4, #16]
     5ea:	cbz	r0, 5f6 <File::whoami()+0x1e>
     5ec:	ldr	r3, [r0, #0]
	}
     5ee:	ldmia.w	sp!, {r4, lr}
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
		if (f) f->whoami();
     5f2:	ldr	r3, [r3, #36]	; 0x24
     5f4:	bx	r3
     5f6:	pop	{r4, pc}
     5f8:	.word	0x00011a98
     5fc:	.word	0x1fff09d0

00000600 <SDFile::whoami()>:
		if (filename) free(filename);
	}
#ifdef FILE_WHOAMI
	virtual void whoami() {
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
     600:	mov	r2, r0
     602:	ldr	r3, [r0, #16]
     604:	ldr	r1, [pc, #4]	; (60c <SDFile::whoami()+0xc>)
     606:	ldr	r0, [pc, #8]	; (610 <SDFile::whoami()+0x10>)
     608:	b.w	c828 <Print::printf(char const*, ...)>
     60c:	.word	0x00011ab4
     610:	.word	0x1fff09d0

00000614 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:
/****  End of device specific change area  ****/

  // Call back for file timestamps.  Only called for file create and sync(). needed by SDFat-beta
   #include "TimeLib.h"
  void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
  { *date = FS_DATE(year(), month(), day());
     614:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     618:	mov	r7, r1
     61a:	mov	r6, r2
     61c:	mov	r8, r0
     61e:	bl	5b2c <year()>
     622:	mov	r4, r0
     624:	bl	5b0c <month()>
     628:	mov	r5, r0
     62a:	bl	5aec <day()>
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
     62e:	subw	r3, r4, #1980	; 0x7bc
     632:	uxth	r3, r3
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
     634:	cmp	r3, #127	; 0x7f
     636:	bhi.n	63e <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
     638:	uxtb	r2, r5
     63a:	cmp	r2, #12
     63c:	bls.n	696 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x82>
         year << 9 | month << 5 | day;
     63e:	movs	r3, #0
     640:	strh.w	r3, [r8]
    *time = FS_TIME(hour(), minute(), second());
     644:	bl	5a8c <hour()>
     648:	mov	r4, r0
     64a:	bl	5aac <minute()>
     64e:	mov	r5, r0
     650:	bl	5acc <second()>
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
     654:	uxtb	r3, r4
     656:	cmp	r3, #23
     658:	bhi.n	660 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
     65a:	uxtb	r3, r5
     65c:	cmp	r3, #59	; 0x3b
     65e:	bls.n	678 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x64>
         hour << 11 | minute << 5 | second >> 1;
     660:	movs	r3, #0
     662:	strh	r3, [r7, #0]
    *ms10 = second() & 1 ? 100 : 0;
     664:	bl	5acc <second()>
     668:	tst.w	r0, #1
     66c:	ite	ne
     66e:	movne	r3, #100	; 0x64
     670:	moveq	r3, #0
     672:	strb	r3, [r6, #0]
     674:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
     678:	uxtb	r3, r0
     67a:	cmp	r3, #59	; 0x3b
     67c:	bhi.n	660 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
         hour << 11 | minute << 5 | second >> 1;
     67e:	lsls	r4, r4, #11
     680:	lsls	r3, r5, #5
     682:	and.w	r4, r4, #522240	; 0x7f800
     686:	and.w	r3, r3, #8160	; 0x1fe0
     68a:	orrs	r3, r4
     68c:	ubfx	r0, r0, #1, #7
     690:	orrs	r3, r0
     692:	uxth	r3, r3
     694:	b.n	662 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4e>
/****  End of device specific change area  ****/

  // Call back for file timestamps.  Only called for file create and sync(). needed by SDFat-beta
   #include "TimeLib.h"
  void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
  { *date = FS_DATE(year(), month(), day());
     696:	uxtb	r0, r0
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
     698:	cmp	r0, #31
     69a:	bhi.n	63e <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
         year << 9 | month << 5 | day;
     69c:	lsls	r5, r5, #5
     69e:	and.w	r5, r5, #8160	; 0x1fe0
     6a2:	orrs	r0, r5
     6a4:	orr.w	r3, r0, r3, lsl #9
     6a8:	uxth	r3, r3
     6aa:	b.n	640 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2c>

000006ac <SDFile::close()>:
		return sdfatfile.curPosition();
	}
	virtual uint64_t size() {
		return sdfatfile.size();
	}
	virtual void close() {
     6ac:	push	{r4, lr}
     6ae:	mov	r4, r0
		if (filename) {
     6b0:	ldr	r0, [r0, #100]	; 0x64
     6b2:	cbz	r0, 6bc <SDFile::close()+0x10>
			free(filename);
     6b4:	bl	d810 <free>
			filename = nullptr;
     6b8:	movs	r3, #0
     6ba:	str	r3, [r4, #100]	; 0x64
		}
		sdfatfile.close();
     6bc:	add.w	r0, r4, #36	; 0x24
	}
     6c0:	ldmia.w	sp!, {r4, lr}
	virtual void close() {
		if (filename) {
			free(filename);
			filename = nullptr;
		}
		sdfatfile.close();
     6c4:	b.w	96f8 <FsBaseFile::close()>

000006c8 <SDFile::openNextFile(unsigned char)>:
		return filename;
	}
	virtual boolean isDirectory(void) {
		return sdfatfile.isDirectory();
	}
	virtual File openNextFile(uint8_t mode=0) {
     6c8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     6cc:	movs	r3, #0
     6ce:	sub	sp, #80	; 0x50
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     6d0:	mov	r2, r3
     6d2:	mov	r5, r0
     6d4:	adds	r1, #36	; 0x24
     6d6:	add	r0, sp, #16
     6d8:	mov.w	r4, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     6dc:	ldr	r7, [pc, #148]	; (774 <SDFile::openNextFile(unsigned char)+0xac>)
     6de:	strb.w	r3, [sp, #4]
     6e2:	strb.w	r3, [sp, #12]
 * \class FsBaseFile
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}
     6e6:	str	r3, [sp, #72]	; 0x48
     6e8:	str	r3, [sp, #76]	; 0x4c
     6ea:	str	r4, [sp, #8]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     6ec:	str	r7, [sp, #0]
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     6ee:	bl	97a0 <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     6f2:	ldr	r3, [sp, #72]	; 0x48
     6f4:	cmp	r3, #0
     6f6:	beq.n	75e <SDFile::openNextFile(unsigned char)+0x96>
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
     6f8:	movs	r0, #104	; 0x68
     6fa:	bl	c9a4 <operator new(unsigned int)>
     6fe:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     700:	ldrb.w	r6, [sp, #4]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     704:	ldr	r2, [sp, #8]
     706:	ldrb.w	r3, [sp, #12]
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     70a:	ldr	r0, [pc, #108]	; (778 <SDFile::openNextFile(unsigned char)+0xb0>)
     70c:	ldr	r1, [pc, #108]	; (77c <SDFile::openNextFile(unsigned char)+0xb4>)
     70e:	strb	r6, [r4, #24]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     710:	mov.w	r8, #1000	; 0x3e8
{
  public:
	constexpr Print() : write_error(0) {}
     714:	movs	r6, #0
     716:	str	r0, [r4, #0]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     718:	str	r1, [r4, #20]
     71a:	str	r2, [r4, #28]
     71c:	strb.w	r3, [r4, #32]
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     720:	add.w	r0, r4, #36	; 0x24
     724:	add	r1, sp, #16
     726:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     728:	strb	r6, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     72a:	str	r6, [r4, #16]
     72c:	str.w	r8, [r4, #8]
     730:	bl	9680 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     734:	ldr	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     736:	ldr	r2, [pc, #72]	; (780 <SDFile::openNextFile(unsigned char)+0xb8>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     738:	str	r7, [r4, #20]
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     73a:	adds	r3, #1
     73c:	str	r6, [r4, #100]	; 0x64
     73e:	strb	r6, [r5, #4]
     740:	str.w	r8, [r5, #8]
     744:	strb	r6, [r5, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
     746:	str	r4, [r5, #16]
		if (f) f->refcount++;
     748:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     74a:	str	r2, [r5, #0]
     74c:	ldr	r3, [pc, #52]	; (784 <SDFile::openNextFile(unsigned char)+0xbc>)
     74e:	str	r3, [sp, #0]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     750:	add	r0, sp, #16
     752:	bl	96f8 <FsBaseFile::close()>
	}
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
     756:	mov	r0, r5
     758:	add	sp, #80	; 0x50
     75a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     75e:	ldr	r3, [sp, #76]	; 0x4c
     760:	cmp	r3, #0
     762:	bne.n	6f8 <SDFile::openNextFile(unsigned char)+0x30>

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     764:	ldr	r2, [pc, #24]	; (780 <SDFile::openNextFile(unsigned char)+0xb8>)
     766:	strb	r3, [r5, #4]
     768:	str	r4, [r5, #8]
     76a:	strb	r3, [r5, #12]
     76c:	str	r3, [r5, #16]
     76e:	str	r2, [r5, #0]
     770:	b.n	74c <SDFile::openNextFile(unsigned char)+0x84>
     772:	nop
     774:	.word	0x00011994
     778:	.word	0x00011a18
     77c:	.word	0x0001194c
     780:	.word	0x000119b8
     784:	.word	0x00011970

00000788 <StreamFile<FsBaseFile, unsigned long long>::available()>:
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
     788:	ldr	r2, [r0, #72]	; 0x48
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     78a:	cbz	r2, 7a6 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  void fsetpos(const fspos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() {
    return isFile() ? fileSize() - curPosition() : 0;
     78c:	ldrb	r3, [r2, #0]
     78e:	and.w	r3, r3, #8
     792:	and.w	r0, r3, #255	; 0xff
     796:	cbz	r3, 7da <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     798:	ldr	r3, [r2, #28]
     79a:	ldr	r0, [r2, #20]
     79c:	subs	r0, r3, r0
     79e:	it	mi
     7a0:	mvnmi.w	r0, #2147483648	; 0x80000000
     7a4:	bx	lr
     7a6:	ldr	r1, [r0, #76]	; 0x4c
     7a8:	cbz	r1, 7dc <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     7aa:	ldrb.w	r3, [r1, #49]	; 0x31
     7ae:	and.w	r3, r3, #8
     7b2:	and.w	r0, r3, #255	; 0xff
     7b6:	cbz	r3, 7da <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
     7b8:	ldrd	r2, r3, [r1, #16]
     7bc:	ldrd	r0, r1, [r1]
     7c0:	subs	r0, r2, r0
     7c2:	push	{r4, r5}
     7c4:	sbc.w	r1, r3, r1
     7c8:	movs	r5, #0
     7ca:	mvn.w	r4, #2147483648	; 0x80000000
     7ce:	cmp	r5, r1
     7d0:	it	eq
     7d2:	cmpeq	r4, r0
     7d4:	bcs.n	7d8 <StreamFile<FsBaseFile, unsigned long long>::available()+0x50>
     7d6:	mov	r0, r4
    return BaseFile::available();
  }
     7d8:	pop	{r4, r5}
     7da:	bx	lr
     7dc:	mov	r0, r1
     7de:	bx	lr

000007e0 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  }
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
     7e0:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     7e2:	cbz	r3, 7ea <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     7e4:	mov	r0, r3
     7e6:	b.w	7f40 <FatFile::peek()>
     7ea:	ldr	r0, [r0, #76]	; 0x4c
     7ec:	cbz	r0, 7f2 <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     7ee:	b.w	6124 <ExFatFile::peek()>
    return BaseFile::peek();
  }
     7f2:	mov.w	r0, #4294967295
     7f6:	bx	lr

000007f8 <StreamFile<FsBaseFile, unsigned long long>::read()>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
     7f8:	push	{lr}
     7fa:	ldr	r3, [r0, #72]	; 0x48
     7fc:	sub	sp, #12
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     7fe:	cbz	r3, 81a <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     800:	mov	r0, r3
     802:	movs	r2, #1
     804:	add.w	r1, sp, #7
     808:	bl	7da8 <FatFile::read(void*, unsigned int)>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     80c:	cmp	r0, #1
     80e:	bne.n	82a <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     810:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
  }
     814:	add	sp, #12
     816:	ldr.w	pc, [sp], #4
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     81a:	ldr	r0, [r0, #76]	; 0x4c
     81c:	cbz	r0, 82a <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     81e:	movs	r2, #1
     820:	add.w	r1, sp, #7
     824:	bl	5f84 <ExFatFile::read(void*, unsigned int)>
     828:	b.n	80c <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     82a:	mov.w	r0, #4294967295
     82e:	b.n	814 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000830 <SDFile::flush()>:
		return sdfatfile.peek();
	}
	virtual int available() {
		return sdfatfile.available();
	}
	virtual void flush() {
     830:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     832:	cbz	r3, 83a <SDFile::flush()+0xa>
     834:	mov	r0, r3
     836:	b.w	83cc <FatFile::sync()>
     83a:	ldr	r0, [r0, #96]	; 0x60
     83c:	cbz	r0, 842 <SDFile::flush()+0x12>
     83e:	b.w	720c <ExFatFile::sync()>
     842:	bx	lr

00000844 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     844:	push	{lr}
     846:	ldr	r3, [r0, #72]	; 0x48
     848:	sub	sp, #12
     84a:	strb.w	r1, [sp, #7]
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     84e:	cbz	r3, 862 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     850:	mov	r0, r3
     852:	movs	r2, #1
     854:	add.w	r1, sp, #7
     858:	bl	8450 <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     85c:	add	sp, #12
     85e:	ldr.w	pc, [sp], #4
     862:	ldr	r0, [r0, #76]	; 0x4c
     864:	cmp	r0, #0
     866:	beq.n	85c <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     868:	movs	r2, #1
     86a:	add.w	r1, sp, #7
     86e:	bl	761c <ExFatFile::write(void const*, unsigned int)>
     872:	add	sp, #12
     874:	ldr.w	pc, [sp], #4

00000878 <SDClass::rename(char const*, char const*)>:
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
		return sdfs.mkdir(filepath);
	}
	bool rename(const char *oldfilepath, const char *newfilepath) {
     878:	push	{r4, r5, r6, lr}
     87a:	ldr.w	r4, [r0, #1148]	; 0x47c
     87e:	sub	sp, #56	; 0x38
     880:	mov	r6, r2
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
     882:	cbz	r4, 8b6 <SDClass::rename(char const*, char const*)+0x3e>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     884:	movs	r5, #0
    return truncate(path.c_str(), length);
  }
#endif  // ENABLE_ARDUINO_STRING

 private:
  FatFile* vwd() {return &m_vwd;}
     886:	addw	r4, r4, #1084	; 0x43c
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    FatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     88a:	mov	r2, r1
     88c:	mov	r3, r5
     88e:	mov	r1, r4
     890:	mov	r0, sp
     892:	strb.w	r5, [sp]
     896:	strb.w	r5, [sp, #1]
     89a:	strb.w	r5, [sp, #2]
     89e:	bl	7ccc <FatFile::open(FatFile*, char const*, int)>
     8a2:	cbnz	r0, 8a8 <SDClass::rename(char const*, char const*)+0x30>
		return sdfs.rename(oldfilepath, newfilepath);
	}
     8a4:	add	sp, #56	; 0x38
     8a6:	pop	{r4, r5, r6, pc}
     8a8:	mov	r2, r6
     8aa:	mov	r1, r4
     8ac:	mov	r0, sp
     8ae:	bl	7fac <FatFile::rename(FatFile*, char const*)>
     8b2:	add	sp, #56	; 0x38
     8b4:	pop	{r4, r5, r6, pc}
     8b6:	ldr.w	r0, [r0, #1152]	; 0x480
     8ba:	cmp	r0, #0
     8bc:	beq.n	8a4 <SDClass::rename(char const*, char const*)+0x2c>
  bool rmdir(const char* path);
#endif  //  USE_EXFAT_UNICODE_NAMES

 private:
  friend ExFatFile;
  ExFatFile* vwd() {return &m_vwd;}
     8be:	add.w	r5, r0, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const ExChar_t* oldPath, const ExChar_t* newPath) {
    ExFatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     8c2:	mov	r2, r1
     8c4:	mov	r3, r4
     8c6:	mov	r1, r5
     8c8:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     8ca:	strb.w	r4, [sp, #49]	; 0x31
     8ce:	strb.w	r4, [sp, #50]	; 0x32
     8d2:	strb.w	r4, [sp, #51]	; 0x33
     8d6:	bl	6628 <ExFatFile::open(ExFatFile*, char const*, int)>
     8da:	cmp	r0, #0
     8dc:	beq.n	8a4 <SDClass::rename(char const*, char const*)+0x2c>
     8de:	mov	r2, r6
     8e0:	mov	r1, r5
     8e2:	mov	r0, sp
     8e4:	bl	748c <ExFatFile::rename(ExFatFile*, char const*)>
     8e8:	add	sp, #56	; 0x38
     8ea:	pop	{r4, r5, r6, pc}

000008ec <SDClass::rmdir(char const*)>:
	bool remove(const char *filepath) {
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
     8ec:	push	{r4, r5, lr}
     8ee:	ldr.w	r4, [r0, #1148]	; 0x47c
     8f2:	sub	sp, #60	; 0x3c
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
           m_xVol ? m_xVol->rmdir(path) : false;
     8f4:	cbz	r4, 920 <SDClass::rmdir(char const*)+0x34>
     8f6:	movs	r5, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     8f8:	mov	r2, r1
     8fa:	mov	r3, r5
     8fc:	mov	r1, r4
     8fe:	mov	r0, sp
     900:	strb.w	r5, [sp]
     904:	strb.w	r5, [sp, #1]
     908:	strb.w	r5, [sp, #2]
     90c:	bl	7d8c <FatFile::open(FatVolume*, char const*, int)>
     910:	cbnz	r0, 916 <SDClass::rmdir(char const*)+0x2a>
		return sdfs.rmdir(filepath);
	}
     912:	add	sp, #60	; 0x3c
     914:	pop	{r4, r5, pc}
     916:	mov	r0, sp
     918:	bl	8184 <FatFile::rmdir()>
     91c:	add	sp, #60	; 0x3c
     91e:	pop	{r4, r5, pc}
     920:	ldr.w	r0, [r0, #1152]	; 0x480
     924:	cmp	r0, #0
     926:	beq.n	912 <SDClass::rmdir(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     928:	mov	r2, r1
     92a:	mov	r3, r4
     92c:	mov	r1, r0
     92e:	mov	r0, sp
     930:	strb.w	r4, [sp, #49]	; 0x31
     934:	strb.w	r4, [sp, #50]	; 0x32
     938:	strb.w	r4, [sp, #51]	; 0x33
     93c:	bl	6728 <ExFatFile::open(ExFatVolume*, char const*, int)>
     940:	cmp	r0, #0
     942:	beq.n	912 <SDClass::rmdir(char const*)+0x26>
     944:	mov	r0, sp
     946:	bl	7058 <ExFatFile::rmdir()>
     94a:	add	sp, #60	; 0x3c
     94c:	pop	{r4, r5, pc}
     94e:	nop

00000950 <SDFile::name()>:
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
     950:	push	{r3, r4, r5, lr}
		if (!filename) {
     952:	ldr	r4, [r0, #100]	; 0x64
     954:	cbz	r4, 95a <SDFile::name()+0xa>
				static char zeroterm = 0;
				filename = &zeroterm;
			}
		}
		return filename;
	}
     956:	mov	r0, r4
     958:	pop	{r3, r4, r5, pc}
     95a:	mov	r5, r0
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
		if (!filename) {
			filename = (char *)malloc(MAX_FILENAME_LEN);
     95c:	mov.w	r0, #256	; 0x100
     960:	bl	d800 <malloc>
     964:	mov	r1, r0
     966:	str	r0, [r5, #100]	; 0x64
			if (filename) {
     968:	cbz	r0, 98c <SDFile::name()+0x3c>
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    return m_fFile ? m_fFile->getName(name, len) :
     96a:	ldr	r0, [r5, #92]	; 0x5c
   *             must be at least 13 bytes long.  The file's name will be
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
     96c:	strb	r4, [r1, #0]
    return m_fFile ? m_fFile->getName(name, len) :
           m_xFile ? m_xFile->getName(name, len) : 0;
     96e:	cbz	r0, 97c <SDFile::name()+0x2c>
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    return m_fFile ? m_fFile->getName(name, len) :
     970:	mov.w	r2, #256	; 0x100
     974:	bl	8c4c <FatFile::getName(char*, unsigned int)>
     978:	ldr	r4, [r5, #100]	; 0x64
     97a:	b.n	956 <SDFile::name()+0x6>
           m_xFile ? m_xFile->getName(name, len) : 0;
     97c:	ldr	r0, [r5, #96]	; 0x60
     97e:	cbz	r0, 992 <SDFile::name()+0x42>
     980:	mov.w	r2, #256	; 0x100
     984:	bl	5d40 <ExFatFile::getName(char*, unsigned int)>
     988:	ldr	r4, [r5, #100]	; 0x64
     98a:	b.n	956 <SDFile::name()+0x6>
				sdfatfile.getName(filename, MAX_FILENAME_LEN);
			} else {
				static char zeroterm = 0;
				filename = &zeroterm;
     98c:	ldr	r4, [pc, #8]	; (998 <SDFile::name()+0x48>)
     98e:	str	r4, [r5, #100]	; 0x64
     990:	b.n	956 <SDFile::name()+0x6>
     992:	mov	r4, r1
     994:	b.n	956 <SDFile::name()+0x6>
     996:	nop
     998:	.word	0x1fff1494

0000099c <SDFile::truncate(unsigned long long)>:
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
		return sdfatfile.read(buf, nbyte);
	}
	virtual bool truncate(uint64_t size=0) {
     99c:	push	{r4, r6, r7, lr}
     99e:	ldr	r4, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
           m_xFile ? m_xFile->truncate(length) : false;
     9a0:	cbz	r4, 9c6 <SDFile::truncate(unsigned long long)+0x2a>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
     9a2:	cmp	r3, #1
     9a4:	it	eq
     9a6:	cmpeq	r2, #0
     9a8:	bcc.n	9ae <SDFile::truncate(unsigned long long)+0x12>
     9aa:	movs	r0, #0
		return sdfatfile.truncate(size);
	}
     9ac:	pop	{r4, r6, r7, pc}
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint32_t length) {
    return seekSet(length) && truncate();
     9ae:	mov	r1, r2
     9b0:	mov	r0, r4
     9b2:	bl	81e0 <FatFile::seekSet(unsigned long)>
     9b6:	cmp	r0, #0
     9b8:	beq.n	9aa <SDFile::truncate(unsigned long long)+0xe>
     9ba:	mov	r0, r4
     9bc:	bl	83d8 <FatFile::truncate()>
     9c0:	cmp	r0, #0
     9c2:	beq.n	9aa <SDFile::truncate(unsigned long long)+0xe>
     9c4:	pop	{r4, r6, r7, pc}
           m_xFile ? m_xFile->truncate(length) : false;
     9c6:	ldr	r4, [r0, #96]	; 0x60
     9c8:	cmp	r4, #0
     9ca:	beq.n	9aa <SDFile::truncate(unsigned long long)+0xe>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
     9cc:	mov	r0, r4
     9ce:	bl	6154 <ExFatFile::seekSet(unsigned long long)>
     9d2:	cmp	r0, #0
     9d4:	beq.n	9aa <SDFile::truncate(unsigned long long)+0xe>
     9d6:	mov	r0, r4
     9d8:	ldmia.w	sp!, {r4, r6, r7, lr}
     9dc:	b.w	7538 <ExFatFile::truncate()>

000009e0 <SDClass::mkdir(char const*)>:
		return File();
	}
	bool exists(const char *filepath) {
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
     9e0:	push	{r4, lr}
     9e2:	ldr.w	r4, [r0, #1148]	; 0x47c
     9e6:	sub	sp, #56	; 0x38
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
     9e8:	cbz	r4, a0a <SDClass::mkdir(char const*)+0x2a>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
     9ea:	mov	r2, r1
     9ec:	movs	r3, #1
     9ee:	addw	r1, r4, #1084	; 0x43c
     9f2:	mov	r0, sp
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     9f4:	movs	r4, #0
     9f6:	strb.w	r4, [sp]
     9fa:	strb.w	r4, [sp, #1]
     9fe:	strb.w	r4, [sp, #2]
     a02:	bl	7c08 <FatFile::mkdir(FatFile*, char const*, bool)>
		return sdfs.mkdir(filepath);
	}
     a06:	add	sp, #56	; 0x38
     a08:	pop	{r4, pc}
     a0a:	ldr.w	r0, [r0, #1152]	; 0x480
     a0e:	cmp	r0, #0
     a10:	beq.n	a06 <SDClass::mkdir(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const ExChar_t* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
     a12:	mov	r2, r1
     a14:	movs	r3, #1
     a16:	add.w	r1, r0, #1088	; 0x440
     a1a:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     a1c:	strb.w	r4, [sp, #49]	; 0x31
     a20:	strb.w	r4, [sp, #50]	; 0x32
     a24:	strb.w	r4, [sp, #51]	; 0x33
     a28:	bl	73b4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
     a2c:	add	sp, #56	; 0x38
     a2e:	pop	{r4, pc}

00000a30 <SDFile::rewindDirectory()>:
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
	virtual void rewindDirectory(void) {
     a30:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     a32:	cbz	r3, a5c <SDFile::rewindDirectory()+0x2c>
  int read() {
    return BaseFile::read();
  }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
     a34:	ldrb	r2, [r3, #0]
     a36:	tst.w	r2, #112	; 0x70
     a3a:	bne.n	a3e <SDFile::rewindDirectory()+0xe>
     a3c:	bx	lr
     a3e:	push	{r4, lr}
     a40:	mov	r4, r0
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     a42:	movs	r1, #0
     a44:	mov	r0, r3
     a46:	bl	81e0 <FatFile::seekSet(unsigned long)>
     a4a:	ldr	r0, [r4, #96]	; 0x60
           m_xFile ? m_xFile->rename(dirFile->m_xFile, newPath) : false;
  }
  /** Set the file's current position to zero. */
  void rewind() {
    if (m_fFile) m_fFile->rewind();
    if (m_xFile) m_xFile->rewind();
     a4c:	cbz	r0, a5a <SDFile::rewindDirectory()+0x2a>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     a4e:	movs	r2, #0
     a50:	movs	r3, #0
		sdfatfile.rewindDirectory();
	}
     a52:	ldmia.w	sp!, {r4, lr}
     a56:	b.w	6154 <ExFatFile::seekSet(unsigned long long)>
     a5a:	pop	{r4, pc}
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     a5c:	ldr	r0, [r0, #96]	; 0x60
     a5e:	cmp	r0, #0
     a60:	beq.n	a3c <SDFile::rewindDirectory()+0xc>
     a62:	ldrb.w	r3, [r0, #49]	; 0x31
     a66:	tst.w	r3, #80	; 0x50
     a6a:	beq.n	a3c <SDFile::rewindDirectory()+0xc>
     a6c:	movs	r2, #0
     a6e:	movs	r3, #0
     a70:	b.w	6154 <ExFatFile::seekSet(unsigned long long)>

00000a74 <SDClass::usedSize()>:
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
		return sdfs.rmdir(filepath);
	}
	uint64_t usedSize() {
     a74:	push	{r3, r4, r5, lr}
     a76:	mov	r5, r0
     a78:	ldr.w	r0, [r0, #1148]	; 0x47c
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     a7c:	cbz	r0, ab0 <SDClass::usedSize()+0x3c>
    m_cache.invalidate();
    return m_cache.buffer();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
     a7e:	ldr	r4, [r0, #28]
     a80:	subs	r4, #1
    return m_fVol ? m_fVol->fatStartSector() :
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
     a82:	bl	8a0c <FatPartition::freeClusterCount()>
     a86:	ldr.w	r3, [r5, #1148]	; 0x47c
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
     a8a:	subs	r4, r4, r0
   */
  bool begin(BlockDevice* blockDev);
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() {
    return m_fVol ? m_fVol->bytesPerCluster() :
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     a8c:	cbz	r3, aa0 <SDClass::usedSize()+0x2c>
     a8e:	ldrb	r0, [r3, #6]
     a90:	mov.w	r3, #512	; 0x200
     a94:	lsl.w	r0, r3, r0
     a98:	uxth	r0, r0
     a9a:	umull	r0, r1, r0, r4
     a9e:	pop	{r3, r4, r5, pc}
     aa0:	ldr.w	r3, [r5, #1152]	; 0x480
     aa4:	cbz	r3, ac2 <SDClass::usedSize()+0x4e>
     aa6:	ldr.w	r0, [r3, #1076]	; 0x434
     aaa:	umull	r0, r1, r0, r4
     aae:	pop	{r3, r4, r5, pc}
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     ab0:	ldr.w	r3, [r5, #1152]	; 0x480
     ab4:	cbz	r3, ac2 <SDClass::usedSize()+0x4e>
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
     ab6:	mov	r0, r3
     ab8:	ldr.w	r4, [r3, #1064]	; 0x428
     abc:	bl	6dd4 <ExFatPartition::freeClusterCount()>
     ac0:	b.n	a86 <SDClass::usedSize()+0x12>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     ac2:	movs	r0, #0
     ac4:	movs	r1, #0
		  * (uint64_t)sdfs.bytesPerCluster();
	}
     ac6:	pop	{r3, r4, r5, pc}

00000ac8 <SDFile::size()>:
		return false;
	}
	virtual uint64_t position() {
		return sdfatfile.curPosition();
	}
	virtual uint64_t size() {
     ac8:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     aca:	cbz	r3, ad2 <SDFile::size()+0xa>
     acc:	ldr	r0, [r3, #28]
     ace:	movs	r1, #0
     ad0:	bx	lr
     ad2:	ldr	r3, [r0, #96]	; 0x60
     ad4:	cbz	r3, adc <SDFile::size()+0x14>
     ad6:	ldr	r0, [r3, #16]
     ad8:	ldr	r1, [r3, #20]
     ada:	bx	lr
     adc:	mov	r0, r3
     ade:	mov	r1, r3
		return sdfatfile.size();
	}
     ae0:	bx	lr
     ae2:	nop

00000ae4 <SDFile::position()>:
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
		return false;
	}
	virtual uint64_t position() {
     ae4:	ldr	r3, [r0, #92]	; 0x5c
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     ae6:	cbz	r3, aee <SDFile::position()+0xa>
     ae8:	ldr	r0, [r3, #20]
     aea:	movs	r1, #0
     aec:	bx	lr
     aee:	ldr	r3, [r0, #96]	; 0x60
     af0:	cbz	r3, af8 <SDFile::position()+0x14>
     af2:	ldmia.w	r3, {r0, r1}
     af6:	bx	lr
     af8:	mov	r0, r3
     afa:	mov	r1, r3
		return sdfatfile.curPosition();
	}
     afc:	bx	lr
     afe:	nop

00000b00 <SDFile::read(void*, unsigned int)>:
		return sdfatfile.available();
	}
	virtual void flush() {
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
     b00:	ldr	r3, [r0, #92]	; 0x5c
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     b02:	cbz	r3, b0a <SDFile::read(void*, unsigned int)+0xa>
     b04:	mov	r0, r3
     b06:	b.w	7da8 <FatFile::read(void*, unsigned int)>
     b0a:	ldr	r0, [r0, #96]	; 0x60
     b0c:	cbz	r0, b12 <SDFile::read(void*, unsigned int)+0x12>
     b0e:	b.w	5f84 <ExFatFile::read(void*, unsigned int)>
		return sdfatfile.read(buf, nbyte);
	}
     b12:	mov.w	r0, #4294967295
     b16:	bx	lr

00000b18 <SDFile::peek()>:
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
		return sdfatfile.write(buf, size);
	}
	virtual int peek() {
     b18:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     b1a:	cbz	r3, b22 <SDFile::peek()+0xa>
     b1c:	mov	r0, r3
     b1e:	b.w	7f40 <FatFile::peek()>
     b22:	ldr	r0, [r0, #96]	; 0x60
     b24:	cbz	r0, b2a <SDFile::peek()+0x12>
     b26:	b.w	6124 <ExFatFile::peek()>
		return sdfatfile.peek();
	}
     b2a:	mov.w	r0, #4294967295
     b2e:	bx	lr

00000b30 <SDClass::totalSize()>:
	}
	uint64_t usedSize() {
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
     b30:	ldr.w	r2, [r0, #1148]	; 0x47c
     b34:	cbz	r2, b4a <SDClass::totalSize()+0x1a>
     b36:	ldrb	r1, [r2, #6]
     b38:	ldr	r0, [r2, #28]
     b3a:	mov.w	r3, #512	; 0x200
     b3e:	lsls	r3, r1
     b40:	uxth	r3, r3
     b42:	subs	r0, #1
     b44:	umull	r0, r1, r3, r0
     b48:	bx	lr
     b4a:	ldr.w	r2, [r0, #1152]	; 0x480
     b4e:	cbz	r2, b5e <SDClass::totalSize()+0x2e>
     b50:	ldr.w	r3, [r2, #1064]	; 0x428
     b54:	ldr.w	r0, [r2, #1076]	; 0x434
     b58:	umull	r0, r1, r3, r0
     b5c:	bx	lr
     b5e:	movs	r0, #0
     b60:	movs	r1, #0
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
	}
     b62:	bx	lr

00000b64 <SDFile::isDirectory()>:
				filename = &zeroterm;
			}
		}
		return filename;
	}
	virtual boolean isDirectory(void) {
     b64:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     b66:	cbz	r3, b76 <SDFile::isDirectory()+0x12>
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {
    return m_attributes & FILE_ATTR_DIR;
     b68:	ldrb	r3, [r3, #0]
     b6a:	tst.w	r3, #112	; 0x70
     b6e:	ite	ne
     b70:	movne	r0, #1
     b72:	moveq	r0, #0
     b74:	bx	lr
     b76:	ldr	r0, [r0, #96]	; 0x60
     b78:	cbz	r0, b88 <SDFile::isDirectory()+0x24>
    return isOpen() ? m_error & WRITE_ERROR : true;
  }
  /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
  /** \return True if this is a directory. */
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
     b7a:	ldrb.w	r3, [r0, #49]	; 0x31
     b7e:	tst.w	r3, #80	; 0x50
     b82:	ite	ne
     b84:	movne	r0, #1
     b86:	moveq	r0, #0
		return sdfatfile.isDirectory();
	}
     b88:	bx	lr
     b8a:	nop

00000b8c <SDClass::remove(char const*)>:
		return sdfs.mkdir(filepath);
	}
	bool rename(const char *oldfilepath, const char *newfilepath) {
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
     b8c:	push	{r4, lr}
     b8e:	ldr.w	r4, [r0, #1148]	; 0x47c
     b92:	sub	sp, #56	; 0x38
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
     b94:	cbz	r4, bc0 <SDClass::remove(char const*)+0x34>
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     b96:	mov	r2, r1
     b98:	mov	r0, sp
     b9a:	mov	r1, r4
     b9c:	movs	r3, #1
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     b9e:	movs	r4, #0
     ba0:	strb.w	r4, [sp]
     ba4:	strb.w	r4, [sp, #1]
     ba8:	strb.w	r4, [sp, #2]
     bac:	bl	7d8c <FatFile::open(FatVolume*, char const*, int)>
     bb0:	cbnz	r0, bb6 <SDClass::remove(char const*)+0x2a>
		return sdfs.remove(filepath);
	}
     bb2:	add	sp, #56	; 0x38
     bb4:	pop	{r4, pc}
     bb6:	mov	r0, sp
     bb8:	bl	9054 <FatFile::remove()>
     bbc:	add	sp, #56	; 0x38
     bbe:	pop	{r4, pc}
     bc0:	ldr.w	r0, [r0, #1152]	; 0x480
     bc4:	cmp	r0, #0
     bc6:	beq.n	bb2 <SDClass::remove(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     bc8:	mov	r2, r1
     bca:	movs	r3, #1
     bcc:	mov	r1, r0
     bce:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     bd0:	strb.w	r4, [sp, #49]	; 0x31
     bd4:	strb.w	r4, [sp, #50]	; 0x32
     bd8:	strb.w	r4, [sp, #51]	; 0x33
     bdc:	bl	6728 <ExFatFile::open(ExFatVolume*, char const*, int)>
     be0:	cmp	r0, #0
     be2:	beq.n	bb2 <SDClass::remove(char const*)+0x26>
     be4:	mov	r0, sp
     be6:	bl	6f80 <ExFatFile::remove()>
     bea:	add	sp, #56	; 0x38
     bec:	pop	{r4, pc}
     bee:	nop

00000bf0 <SDClass::open(char const*, unsigned char)>:
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
     bf0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     bf4:	cmp	r3, #1
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
     bf6:	sub	sp, #80	; 0x50
     bf8:	mov	r5, r0
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     bfa:	beq.n	c80 <SDClass::open(char const*, unsigned char)+0x90>
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
     bfc:	cmp	r3, #2
		SDFAT_FILE file = sdfs.open(filepath, flags);
     bfe:	add.w	r1, r1, #4
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
     c02:	movw	r3, #514	; 0x202
		SDFAT_FILE file = sdfs.open(filepath, flags);
     c06:	mov	r0, sp
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
     c08:	it	ne
     c0a:	movne	r3, #0
		SDFAT_FILE file = sdfs.open(filepath, flags);
     c0c:	bl	98c4 <FsVolume::open(char const*, int)>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     c10:	ldr	r3, [sp, #72]	; 0x48
     c12:	cmp	r3, #0
     c14:	beq.n	c92 <SDClass::open(char const*, unsigned char)+0xa2>
		if (file) return File(new SDFile(file));
     c16:	movs	r0, #104	; 0x68
     c18:	bl	c9a4 <operator new(unsigned int)>
     c1c:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     c1e:	ldrb.w	r6, [sp, #4]
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     c22:	ldr	r0, [pc, #136]	; (cac <SDClass::open(char const*, unsigned char)+0xbc>)
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     c24:	ldr	r1, [pc, #136]	; (cb0 <SDClass::open(char const*, unsigned char)+0xc0>)
     c26:	ldr	r2, [sp, #8]
     c28:	ldrb.w	r3, [sp, #12]
     c2c:	str	r0, [r4, #0]
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     c2e:	add	r7, sp, #16
     c30:	strb	r6, [r4, #24]
     c32:	str	r1, [r4, #20]
{
  public:
	constexpr Print() : write_error(0) {}
     c34:	movs	r6, #0
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     c36:	mov.w	r8, #1000	; 0x3e8
     c3a:	mov	r1, r7
     c3c:	add.w	r0, r4, #36	; 0x24
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     c40:	str	r2, [r4, #28]
     c42:	strb.w	r3, [r4, #32]
     c46:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     c48:	strb	r6, [r4, #12]
     c4a:	str	r6, [r4, #16]
     c4c:	str.w	r8, [r4, #8]
     c50:	bl	9680 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     c54:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     c56:	ldr	r1, [pc, #92]	; (cb4 <SDClass::open(char const*, unsigned char)+0xc4>)
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     c58:	ldr	r2, [pc, #92]	; (cb8 <SDClass::open(char const*, unsigned char)+0xc8>)
     c5a:	str	r6, [r4, #100]	; 0x64
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     c5c:	adds	r3, #1
     c5e:	strb	r6, [r5, #4]
     c60:	str.w	r8, [r5, #8]
     c64:	strb	r6, [r5, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
     c66:	str	r4, [r5, #16]
     c68:	str	r1, [r4, #20]
		if (f) f->refcount++;
     c6a:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     c6c:	str	r2, [r5, #0]
     c6e:	ldr	r3, [pc, #76]	; (cbc <SDClass::open(char const*, unsigned char)+0xcc>)
     c70:	str	r3, [sp, #0]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     c72:	mov	r0, r7
     c74:	bl	96f8 <FsBaseFile::close()>
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
     c78:	mov	r0, r5
     c7a:	add	sp, #80	; 0x50
     c7c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     c80:	movw	r3, #16898	; 0x4202
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
     c84:	adds	r1, #4
     c86:	mov	r0, sp
     c88:	bl	98c4 <FsVolume::open(char const*, int)>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     c8c:	ldr	r3, [sp, #72]	; 0x48
     c8e:	cmp	r3, #0
     c90:	bne.n	c16 <SDClass::open(char const*, unsigned char)+0x26>
     c92:	ldr	r3, [sp, #76]	; 0x4c
     c94:	cmp	r3, #0
     c96:	bne.n	c16 <SDClass::open(char const*, unsigned char)+0x26>
     c98:	mov.w	r1, #1000	; 0x3e8

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     c9c:	ldr	r2, [pc, #24]	; (cb8 <SDClass::open(char const*, unsigned char)+0xc8>)
     c9e:	strb	r3, [r5, #4]
     ca0:	strb	r3, [r5, #12]
     ca2:	str	r3, [r5, #16]
     ca4:	str	r1, [r5, #8]
     ca6:	str	r2, [r5, #0]
     ca8:	add	r7, sp, #16
     caa:	b.n	c6e <SDClass::open(char const*, unsigned char)+0x7e>
     cac:	.word	0x00011a18
     cb0:	.word	0x0001194c
     cb4:	.word	0x00011994
     cb8:	.word	0x000119b8
     cbc:	.word	0x00011970

00000cc0 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   */
  int available() {
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
     cc0:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     cc2:	cbz	r3, cca <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     cc4:	mov	r0, r3
     cc6:	b.w	83cc <FatFile::sync()>
     cca:	ldr	r0, [r0, #76]	; 0x4c
     ccc:	cbz	r0, cd2 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     cce:	b.w	720c <ExFatFile::sync()>
     cd2:	bx	lr

00000cd4 <SDFile::write(void const*, unsigned int)>:
	virtual void whoami() {
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
     cd4:	ldr	r3, [r0, #92]	; 0x5c
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     cd6:	cbz	r3, cde <SDFile::write(void const*, unsigned int)+0xa>
     cd8:	mov	r0, r3
     cda:	b.w	8450 <FatFile::write(void const*, unsigned int)>
     cde:	ldr	r0, [r0, #96]	; 0x60
     ce0:	cbz	r0, ce6 <SDFile::write(void const*, unsigned int)+0x12>
     ce2:	b.w	761c <ExFatFile::write(void const*, unsigned int)>
		return sdfatfile.write(buf, size);
	}
     ce6:	bx	lr

00000ce8 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     ce8:	ldr	r3, [r0, #72]	; 0x48
     cea:	cbz	r3, cf2 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     cec:	mov	r0, r3
     cee:	b.w	8450 <FatFile::write(void const*, unsigned int)>
     cf2:	ldr	r0, [r0, #76]	; 0x4c
     cf4:	cbz	r0, cfa <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     cf6:	b.w	761c <ExFatFile::write(void const*, unsigned int)>
    return BaseFile::write(buffer, size);
  }
     cfa:	bx	lr

00000cfc <SDFile::available()>:
	virtual int peek() {
		return sdfatfile.peek();
	}
	virtual int available() {
     cfc:	ldr	r2, [r0, #92]	; 0x5c
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     cfe:	cbz	r2, d1a <SDFile::available()+0x1e>
  void fsetpos(const fspos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() {
    return isFile() ? fileSize() - curPosition() : 0;
     d00:	ldrb	r3, [r2, #0]
     d02:	and.w	r3, r3, #8
     d06:	and.w	r0, r3, #255	; 0xff
     d0a:	cbz	r3, d4e <SDFile::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     d0c:	ldr	r3, [r2, #28]
     d0e:	ldr	r0, [r2, #20]
     d10:	subs	r0, r3, r0
     d12:	it	mi
     d14:	mvnmi.w	r0, #2147483648	; 0x80000000
     d18:	bx	lr
     d1a:	ldr	r1, [r0, #96]	; 0x60
     d1c:	cbz	r1, d50 <SDFile::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     d1e:	ldrb.w	r3, [r1, #49]	; 0x31
     d22:	and.w	r3, r3, #8
     d26:	and.w	r0, r3, #255	; 0xff
     d2a:	cbz	r3, d4e <SDFile::available()+0x52>
     d2c:	ldrd	r2, r3, [r1, #16]
     d30:	ldrd	r0, r1, [r1]
     d34:	subs	r0, r2, r0
     d36:	push	{r4, r5}
     d38:	sbc.w	r1, r3, r1
     d3c:	movs	r5, #0
     d3e:	mvn.w	r4, #2147483648	; 0x80000000
     d42:	cmp	r5, r1
     d44:	it	eq
     d46:	cmpeq	r4, r0
     d48:	bcs.n	d4c <SDFile::available()+0x50>
     d4a:	mov	r0, r4
		return sdfatfile.available();
	}
     d4c:	pop	{r4, r5}
     d4e:	bx	lr
     d50:	mov	r0, r1
     d52:	bx	lr

00000d54 <SDClass::exists(char const*)>:
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
	bool exists(const char *filepath) {
     d54:	push	{r4, r5, lr}
     d56:	ldr.w	r4, [r0, #1148]	; 0x47c
     d5a:	sub	sp, #60	; 0x3c
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
           m_xVol ? m_xVol->exists(path) : false;
     d5c:	cbz	r4, d7c <SDClass::exists(char const*)+0x28>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     d5e:	movs	r5, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
     d60:	mov	r2, r1
     d62:	mov	r3, r5
     d64:	mov	r1, r4
     d66:	mov	r0, sp
     d68:	strb.w	r5, [sp]
     d6c:	strb.w	r5, [sp, #1]
     d70:	strb.w	r5, [sp, #2]
     d74:	bl	7d8c <FatFile::open(FatVolume*, char const*, int)>
		return sdfs.exists(filepath);
	}
     d78:	add	sp, #60	; 0x3c
     d7a:	pop	{r4, r5, pc}
     d7c:	ldr.w	r0, [r0, #1152]	; 0x480
     d80:	cmp	r0, #0
     d82:	beq.n	d78 <SDClass::exists(char const*)+0x24>
   *
   * \return true if the file exists else false.
   */
  bool exists(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
     d84:	mov	r2, r1
     d86:	mov	r3, r4
     d88:	mov	r1, r0
     d8a:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     d8c:	strb.w	r4, [sp, #49]	; 0x31
     d90:	strb.w	r4, [sp, #50]	; 0x32
     d94:	strb.w	r4, [sp, #51]	; 0x33
     d98:	bl	6728 <ExFatFile::open(ExFatVolume*, char const*, int)>
     d9c:	add	sp, #60	; 0x3c
     d9e:	pop	{r4, r5, pc}

00000da0 <SDFile::seek(unsigned long long, int)>:
		return sdfatfile.read(buf, nbyte);
	}
	virtual bool truncate(uint64_t size=0) {
		return sdfatfile.truncate(size);
	}
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
     da0:	push	{r4, r6, r7}
     da2:	ldr	r4, [sp, #12]
     da4:	mov	r6, r2
     da6:	mov	r7, r3
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
     da8:	cbz	r4, db8 <SDFile::seek(unsigned long long, int)+0x18>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
     daa:	cmp	r4, #1
     dac:	beq.n	dec <SDFile::seek(unsigned long long, int)+0x4c>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
     dae:	cmp	r4, #2
     db0:	beq.n	dce <SDFile::seek(unsigned long long, int)+0x2e>
		return false;
	}
     db2:	movs	r0, #0
     db4:	pop	{r4, r6, r7}
     db6:	bx	lr
     db8:	ldr	r4, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     dba:	cbz	r4, df4 <SDFile::seek(unsigned long long, int)+0x54>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     dbc:	cmp	r3, #1
     dbe:	it	eq
     dc0:	cmpeq	r2, #0
     dc2:	bcs.n	db2 <SDFile::seek(unsigned long long, int)+0x12>
     dc4:	mov	r0, r4
     dc6:	mov	r1, r2
     dc8:	pop	{r4, r6, r7}
     dca:	b.w	81e0 <FatFile::seekSet(unsigned long)>
     dce:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     dd0:	cbz	r3, e00 <SDFile::seek(unsigned long long, int)+0x60>
   * Can't be used for directory files since file size is not defined.
   * \param[in] offset The new position in bytes from end-of-file.
   * \return true for success or false for failure.
   */
  bool seekEnd(int64_t offset = 0) {
    return seekSet(fileSize() + offset);
     dd2:	ldr	r2, [r3, #28]
     dd4:	adds	r6, r6, r2
     dd6:	adc.w	r7, r7, #0
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     dda:	cmp	r7, #1
     ddc:	it	eq
     dde:	cmpeq	r6, #0
     de0:	bcs.n	db2 <SDFile::seek(unsigned long long, int)+0x12>
     de2:	mov	r1, r6
     de4:	mov	r0, r3
     de6:	pop	{r4, r6, r7}
     de8:	b.w	81e0 <FatFile::seekSet(unsigned long)>
     dec:	ldr	r3, [r0, #92]	; 0x5c
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     dee:	cbz	r3, e14 <SDFile::seek(unsigned long long, int)+0x74>
  /** Set the files position to current position + \a pos. See seekSet().
   * \param[in] offset The new position in bytes from the current position.
   * \return true for success or false for failure.
   */
  bool seekCur(int64_t offset) {
    return seekSet(curPosition() + offset);
     df0:	ldr	r2, [r3, #20]
     df2:	b.n	dd4 <SDFile::seek(unsigned long long, int)+0x34>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     df4:	ldr	r0, [r0, #96]	; 0x60
     df6:	cmp	r0, #0
     df8:	beq.n	db2 <SDFile::seek(unsigned long long, int)+0x12>
     dfa:	pop	{r4, r6, r7}
     dfc:	b.w	6154 <ExFatFile::seekSet(unsigned long long)>
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     e00:	ldr	r0, [r0, #96]	; 0x60
     e02:	cmp	r0, #0
     e04:	beq.n	db2 <SDFile::seek(unsigned long long, int)+0x12>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     e06:	ldrd	r2, r3, [r0, #16]
     e0a:	adds	r2, r2, r6
     e0c:	adcs	r3, r7
     e0e:	pop	{r4, r6, r7}
     e10:	b.w	6154 <ExFatFile::seekSet(unsigned long long)>
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     e14:	ldr	r0, [r0, #96]	; 0x60
     e16:	cmp	r0, #0
     e18:	beq.n	db2 <SDFile::seek(unsigned long long, int)+0x12>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     e1a:	ldrd	r2, r3, [r0]
     e1e:	adds	r2, r2, r6
     e20:	adcs	r3, r7
     e22:	b.n	dfa <SDFile::seek(unsigned long long, int)+0x5a>

00000e24 <File::~File()>:
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     e24:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     e26:	ldr	r3, [pc, #32]	; (e48 <File::~File()+0x24>)
     e28:	push	{r4, lr}
     e2a:	mov	r4, r0
     e2c:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     e2e:	cbz	r2, e42 <File::~File()+0x1e>
     e30:	ldr	r3, [r2, #16]
     e32:	subs	r3, #1
     e34:	str	r3, [r2, #16]
     e36:	cbnz	r3, e42 <File::~File()+0x1e>
     e38:	ldr	r0, [r0, #16]
     e3a:	cbz	r0, e42 <File::~File()+0x1e>
     e3c:	ldr	r3, [r0, #0]
     e3e:	ldr	r3, [r3, #32]
     e40:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
     e42:	mov	r0, r4
     e44:	pop	{r4, pc}
     e46:	nop
     e48:	.word	0x000119b8

00000e4c <SDFile::~SDFile()>:
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
     e4c:	push	{r3, r4, r5, lr}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     e4e:	ldr	r3, [r0, #92]	; 0x5c
     e50:	ldr	r2, [pc, #80]	; (ea4 <SDFile::~SDFile()+0x58>)
     e52:	str	r2, [r0, #0]
     e54:	mov	r4, r0
		if (sdfatfile) sdfatfile.close();
     e56:	add.w	r5, r0, #36	; 0x24
     e5a:	cbz	r3, e9a <SDFile::~SDFile()+0x4e>
     e5c:	mov	r0, r5
     e5e:	bl	96f8 <FsBaseFile::close()>
		if (filename) free(filename);
     e62:	ldr	r0, [r4, #100]	; 0x64
     e64:	cbz	r0, e6a <SDFile::~SDFile()+0x1e>
     e66:	bl	d810 <free>
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     e6a:	ldr	r3, [pc, #60]	; (ea8 <SDFile::~SDFile()+0x5c>)
     e6c:	str	r3, [r4, #20]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     e6e:	mov	r0, r5
     e70:	bl	96f8 <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     e74:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     e76:	ldr	r3, [pc, #52]	; (eac <SDFile::~SDFile()+0x60>)
     e78:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     e7a:	cbz	r2, e8e <SDFile::~SDFile()+0x42>
     e7c:	ldr	r3, [r2, #16]
     e7e:	subs	r3, #1
     e80:	str	r3, [r2, #16]
     e82:	cbnz	r3, e8e <SDFile::~SDFile()+0x42>
     e84:	ldr	r0, [r4, #16]
     e86:	cbz	r0, e8e <SDFile::~SDFile()+0x42>
     e88:	ldr	r3, [r0, #0]
     e8a:	ldr	r3, [r3, #32]
     e8c:	blx	r3
	}
     e8e:	mov	r0, r4
     e90:	movs	r1, #104	; 0x68
     e92:	bl	c9a8 <operator delete(void*, unsigned int)>
     e96:	mov	r0, r4
     e98:	pop	{r3, r4, r5, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     e9a:	ldr	r3, [r0, #96]	; 0x60
     e9c:	cmp	r3, #0
     e9e:	bne.n	e5c <SDFile::~SDFile()+0x10>
     ea0:	b.n	e62 <SDFile::~SDFile()+0x16>
     ea2:	nop
     ea4:	.word	0x00011a18
     ea8:	.word	0x00011970
     eac:	.word	0x000119b8

00000eb0 <File::~File()>:
     eb0:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     eb2:	ldr	r3, [pc, #40]	; (edc <File::~File()+0x2c>)
     eb4:	push	{r4, lr}
     eb6:	mov	r4, r0
     eb8:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     eba:	cbz	r2, ece <File::~File()+0x1e>
     ebc:	ldr	r3, [r2, #16]
     ebe:	subs	r3, #1
     ec0:	str	r3, [r2, #16]
     ec2:	cbnz	r3, ece <File::~File()+0x1e>
     ec4:	ldr	r0, [r0, #16]
     ec6:	cbz	r0, ece <File::~File()+0x1e>
     ec8:	ldr	r3, [r0, #0]
     eca:	ldr	r3, [r3, #32]
     ecc:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
     ece:	mov	r0, r4
     ed0:	movs	r1, #20
     ed2:	bl	c9a8 <operator delete(void*, unsigned int)>
     ed6:	mov	r0, r4
     ed8:	pop	{r4, pc}
     eda:	nop
     edc:	.word	0x000119b8

00000ee0 <MTPStorage_SD::~MTPStorage_SD()>:
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     ee0:	ldr.w	r2, [r0, #224]	; 0xe0

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     ee4:	push	{r3, r4, r5, lr}
     ee6:	ldr	r3, [pc, #104]	; (f50 <MTPStorage_SD::~MTPStorage_SD()+0x70>)
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     ee8:	ldr	r5, [pc, #104]	; (f54 <MTPStorage_SD::~MTPStorage_SD()+0x74>)
     eea:	str	r3, [r0, #0]
     eec:	mov	r4, r0
     eee:	str.w	r5, [r0, #208]	; 0xd0
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     ef2:	cbz	r2, efc <MTPStorage_SD::~MTPStorage_SD()+0x1c>
     ef4:	ldr	r3, [r2, #16]
     ef6:	subs	r3, #1
     ef8:	str	r3, [r2, #16]
     efa:	cbz	r3, f30 <MTPStorage_SD::~MTPStorage_SD()+0x50>
     efc:	ldr.w	r2, [r4, #204]	; 0xcc
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     f00:	str.w	r5, [r4, #188]	; 0xbc
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     f04:	cbz	r2, f0e <MTPStorage_SD::~MTPStorage_SD()+0x2e>
     f06:	ldr	r3, [r2, #16]
     f08:	subs	r3, #1
     f0a:	str	r3, [r2, #16]
     f0c:	cbz	r3, f40 <MTPStorage_SD::~MTPStorage_SD()+0x60>
     f0e:	ldr.w	r2, [r4, #184]	; 0xb8
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     f12:	str.w	r5, [r4, #168]	; 0xa8
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     f16:	cbz	r2, f2c <MTPStorage_SD::~MTPStorage_SD()+0x4c>
     f18:	ldr	r3, [r2, #16]
     f1a:	subs	r3, #1
     f1c:	str	r3, [r2, #16]
     f1e:	cbnz	r3, f2c <MTPStorage_SD::~MTPStorage_SD()+0x4c>
     f20:	ldr.w	r0, [r4, #184]	; 0xb8
     f24:	cbz	r0, f2c <MTPStorage_SD::~MTPStorage_SD()+0x4c>
     f26:	ldr	r3, [r0, #0]
     f28:	ldr	r3, [r3, #32]
     f2a:	blx	r3
     f2c:	mov	r0, r4
     f2e:	pop	{r3, r4, r5, pc}
     f30:	ldr.w	r0, [r0, #224]	; 0xe0
     f34:	cmp	r0, #0
     f36:	beq.n	efc <MTPStorage_SD::~MTPStorage_SD()+0x1c>
     f38:	ldr	r3, [r0, #0]
     f3a:	ldr	r3, [r3, #32]
     f3c:	blx	r3
     f3e:	b.n	efc <MTPStorage_SD::~MTPStorage_SD()+0x1c>
     f40:	ldr.w	r0, [r4, #204]	; 0xcc
     f44:	cmp	r0, #0
     f46:	beq.n	f0e <MTPStorage_SD::~MTPStorage_SD()+0x2e>
     f48:	ldr	r3, [r0, #0]
     f4a:	ldr	r3, [r3, #32]
     f4c:	blx	r3
     f4e:	b.n	f0e <MTPStorage_SD::~MTPStorage_SD()+0x2e>
     f50:	.word	0x00011b54
     f54:	.word	0x000119b8

00000f58 <SDFile::~SDFile()>:
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
     f58:	push	{r3, r4, r5, lr}
     f5a:	ldr	r3, [r0, #92]	; 0x5c
     f5c:	ldr	r2, [pc, #72]	; (fa8 <SDFile::~SDFile()+0x50>)
     f5e:	str	r2, [r0, #0]
     f60:	mov	r4, r0
		if (sdfatfile) sdfatfile.close();
     f62:	add.w	r5, r0, #36	; 0x24
     f66:	cbz	r3, f9e <SDFile::~SDFile()+0x46>
     f68:	mov	r0, r5
     f6a:	bl	96f8 <FsBaseFile::close()>
		if (filename) free(filename);
     f6e:	ldr	r0, [r4, #100]	; 0x64
     f70:	cbz	r0, f76 <SDFile::~SDFile()+0x1e>
     f72:	bl	d810 <free>
     f76:	ldr	r3, [pc, #52]	; (fac <SDFile::~SDFile()+0x54>)
     f78:	str	r3, [r4, #20]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     f7a:	mov	r0, r5
     f7c:	bl	96f8 <FsBaseFile::close()>
     f80:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     f82:	ldr	r3, [pc, #44]	; (fb0 <SDFile::~SDFile()+0x58>)
     f84:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     f86:	cbz	r2, f9a <SDFile::~SDFile()+0x42>
     f88:	ldr	r3, [r2, #16]
     f8a:	subs	r3, #1
     f8c:	str	r3, [r2, #16]
     f8e:	cbnz	r3, f9a <SDFile::~SDFile()+0x42>
     f90:	ldr	r0, [r4, #16]
     f92:	cbz	r0, f9a <SDFile::~SDFile()+0x42>
     f94:	ldr	r3, [r0, #0]
     f96:	ldr	r3, [r3, #32]
     f98:	blx	r3
	}
     f9a:	mov	r0, r4
     f9c:	pop	{r3, r4, r5, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     f9e:	ldr	r3, [r0, #96]	; 0x60
     fa0:	cmp	r3, #0
     fa2:	bne.n	f68 <SDFile::~SDFile()+0x10>
     fa4:	b.n	f6e <SDFile::~SDFile()+0x16>
     fa6:	nop
     fa8:	.word	0x00011a18
     fac:	.word	0x00011970
     fb0:	.word	0x000119b8

00000fb4 <storage_configure()>:
MTPStorage_SD storage;
MTPD       mtpd(&storage);


void storage_configure()
{
     fb4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    #if defined SD_SCK
      SPI.setMOSI(SD_MOSI);
     fb8:	movs	r1, #11
MTPStorage_SD storage;
MTPD       mtpd(&storage);


void storage_configure()
{
     fba:	sub	sp, #12
    #if defined SD_SCK
      SPI.setMOSI(SD_MOSI);
     fbc:	ldr	r0, [pc, #296]	; (10e8 <storage_configure()+0x134>)
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     fbe:	ldr	r5, [pc, #300]	; (10ec <storage_configure()+0x138>)
     fc0:	bl	5628 <SPIClass::setMOSI(unsigned char)>
      SPI.setMISO(SD_MISO);
     fc4:	movs	r1, #12
     fc6:	ldr	r0, [pc, #288]	; (10e8 <storage_configure()+0x134>)
     fc8:	bl	56cc <SPIClass::setMISO(unsigned char)>
     fcc:	addw	r4, r5, #1164	; 0x48c
      SPI.setSCK(SD_SCK);
     fd0:	movs	r1, #13
     fd2:	ldr	r0, [pc, #276]	; (10e8 <storage_configure()+0x134>)
     fd4:	bl	576c <SPIClass::setSCK(unsigned char)>
     fd8:	mov	r0, r4
     fda:	mov.w	r1, #0
     fde:	bl	a9b4 <SdioCard::begin(SdioConfig)>
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    return m_card && !m_card->errorCode();
     fe2:	mov	r0, r4
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
     fe4:	str.w	r4, [r5, #1160]	; 0x488
    return m_card && !m_card->errorCode();
     fe8:	bl	a114 <SdioCard::errorCode() const>
     fec:	cbz	r0, ffe <storage_configure()+0x4a>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     fee:	movs	r1, #10
     ff0:	ldr	r0, [pc, #252]	; (10f0 <storage_configure()+0x13c>)
     ff2:	bl	b2e0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     ff6:	ldr	r0, [pc, #252]	; (10f4 <storage_configure()+0x140>)
     ff8:	bl	c7f8 <Print::println()>
     ffc:	b.n	ffc <storage_configure()+0x48>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     ffe:	ldr.w	r1, [r5, #1160]	; 0x488
    1002:	adds	r0, r5, #4
    1004:	bl	9800 <FsVolume::begin(BlockDeviceInterface*)>
    1008:	cmp	r0, #0
    100a:	beq.n	fee <storage_configure()+0x3a>
    mSD_Base() {
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSEMS) {
    100c:	ldr	r1, [pc, #232]	; (10f8 <storage_configure()+0x144>)

    for(int ii=0; ii<nsd; ii++)
    { if(cs[ii] == BUILTIN_SDCARD)
      {
        if(!sdx[ii].sdfs.begin(SdioConfig(FIFO_SDIO))) {Serial.println("No storage"); while(1);};
        storage.addFilesystem(sdx[ii], sd_str[ii]);
    100e:	ldr.w	r8, [pc, #244]	; 1104 <storage_configure()+0x150>
    1012:	ldr	r3, [r1, #4]
    1014:	ldr.w	r2, [r8]
    1018:	cmp	r3, #19
    101a:	bgt.n	1028 <storage_configure()+0x74>
        sd_name[fsCount] = name;
    101c:	add.w	r4, r1, r3, lsl #2
        sdx[fsCount++] = &fs;
    1020:	adds	r3, #1
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSEMS) {
        sd_name[fsCount] = name;
    1022:	str	r2, [r4, #8]
        sdx[fsCount++] = &fs;
    1024:	str	r5, [r4, #88]	; 0x58
    1026:	str	r3, [r1, #4]
    1028:	ldr.w	r0, [r5, #1148]	; 0x47c
    102c:	ldr	r3, [pc, #188]	; (10ec <storage_configure()+0x138>)
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    102e:	cmp	r0, #0
    1030:	beq.n	10be <storage_configure()+0x10a>
	uint64_t usedSize() {
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    1032:	ldrb	r6, [r0, #6]
    1034:	ldr	r4, [r0, #28]
    1036:	mov.w	r3, #512	; 0x200
    103a:	lsl.w	r6, r3, r6
    103e:	uxth	r6, r6
    1040:	subs	r4, #1
    1042:	umull	r6, r7, r6, r4
    return m_fVol ? m_fVol->fatStartSector() :
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
    1046:	bl	8a0c <FatPartition::freeClusterCount()>
    104a:	ldr.w	r3, [r5, #1148]	; 0x47c
    104e:	ldr	r2, [pc, #156]	; (10ec <storage_configure()+0x138>)
	}
	bool rmdir(const char *filepath) {
		return sdfs.rmdir(filepath);
	}
	uint64_t usedSize() {
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
    1050:	subs	r4, r4, r0
   */
  bool begin(BlockDevice* blockDev);
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() {
    return m_fVol ? m_fVol->bytesPerCluster() :
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    1052:	cbz	r3, 10aa <storage_configure()+0xf6>
    1054:	ldrb	r1, [r3, #6]
    1056:	ldr.w	r2, [r8]
    105a:	mov.w	r3, #512	; 0x200
    105e:	lsls	r3, r1
    1060:	uxth	r3, r3
    1062:	umull	r4, r5, r3, r4
        if(!sdx[ii].sdfs.begin(SdSpiConfig(cs[ii], SHARED_SPI, SPI_SPEED))) {Serial.println("No storage"); while(1);}
        storage.addFilesystem(sdx[ii], sd_str[ii]);
      }
        uint64_t totalSize = sdx[ii].totalSize();
        uint64_t usedSize  = sdx[ii].usedSize();
        Serial.printf("Storage %d %d %s ",ii,cs[ii],sd_str[ii]); Serial.print(totalSize); Serial.print(" "); Serial.println(usedSize);
    1066:	str	r2, [sp, #0]
    1068:	movs	r2, #0
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	size_t print(int64_t n);
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    106a:	mov	r9, r2
    106c:	ldr	r1, [pc, #140]	; (10fc <storage_configure()+0x148>)
    106e:	ldr	r0, [pc, #132]	; (10f4 <storage_configure()+0x140>)
    1070:	mov.w	r8, #10
    1074:	movs	r3, #254	; 0xfe
    1076:	bl	c828 <Print::printf(char const*, ...)>
    107a:	mov	r2, r6
    107c:	mov	r3, r7
    107e:	stmia.w	sp, {r8, r9}
    1082:	ldr	r0, [pc, #112]	; (10f4 <storage_configure()+0x140>)
    1084:	bl	c8d4 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
    1088:	movs	r1, #1
    108a:	ldr	r0, [pc, #116]	; (1100 <storage_configure()+0x14c>)
    108c:	bl	b2e0 <usb_serial_write>
    1090:	stmia.w	sp, {r8, r9}
    1094:	mov	r2, r4
    1096:	mov	r3, r5
    1098:	ldr	r0, [pc, #88]	; (10f4 <storage_configure()+0x140>)
    109a:	bl	c8d4 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
	size_t println(int64_t n)			{ return print(n) + println(); }
	size_t println(uint64_t n)			{ return print(n) + println(); }
    109e:	ldr	r0, [pc, #84]	; (10f4 <storage_configure()+0x140>)
      uint64_t usedSize  = ramfs[ii].usedSize();
      Serial.printf("Storage %d %s ",ii,lfs_str[ii]); Serial.print(totalSize); Serial.print(" "); Serial.println(usedSize);

    }
    #endif
}
    10a0:	add	sp, #12
    10a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    10a6:	b.w	c7f8 <Print::println()>
    10aa:	ldr.w	r3, [r2, #1152]	; 0x480
    10ae:	ldr.w	r2, [r8]
    10b2:	cbz	r3, 10e0 <storage_configure()+0x12c>
    10b4:	ldr.w	r3, [r3, #1076]	; 0x434
    10b8:	umull	r4, r5, r3, r4
    10bc:	b.n	1066 <storage_configure()+0xb2>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    10be:	ldr.w	r0, [r3, #1152]	; 0x480
    10c2:	cbz	r0, 10d6 <storage_configure()+0x122>
    10c4:	ldr.w	r4, [r0, #1064]	; 0x428
    10c8:	ldr.w	r6, [r0, #1076]	; 0x434
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    10cc:	umull	r6, r7, r6, r4
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
    10d0:	bl	6dd4 <ExFatPartition::freeClusterCount()>
    10d4:	b.n	104a <storage_configure()+0x96>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    10d6:	movs	r4, #0
    10d8:	movs	r5, #0
    10da:	mov	r6, r4
    10dc:	mov	r7, r5
    10de:	b.n	1066 <storage_configure()+0xb2>
   */
  bool begin(BlockDevice* blockDev);
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() {
    return m_fVol ? m_fVol->bytesPerCluster() :
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    10e0:	movs	r4, #0
    10e2:	movs	r5, #0
    10e4:	b.n	1066 <storage_configure()+0xb2>
    10e6:	nop
    10e8:	.word	0x1fff097c
    10ec:	.word	0x1fff1498
    10f0:	.word	0x00011ae8
    10f4:	.word	0x1fff09d0
    10f8:	.word	0x1fff1948
    10fc:	.word	0x00011ad4
    1100:	.word	0x00011ae4
    1104:	.word	0x1fff0974

00001108 <setup>:
    to=millis();
  }
}

void setup()
{ 
    1108:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    110c:	ldr	r2, [pc, #532]	; (1324 <setup+0x21c>)
    110e:	ldr	r1, [pc, #536]	; (1328 <setup+0x220>)
    1110:	ldr	r5, [pc, #536]	; (132c <setup+0x224>)
    1112:	ldr	r4, [pc, #540]	; (1330 <setup+0x228>)
    1114:	sub	sp, #108	; 0x6c
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1116:	ldrb	r3, [r2, #0]
    1118:	cmp	r3, #0
    111a:	beq.n	1116 <setup+0xe>
    111c:	ldrb	r3, [r1, #0]
    111e:	lsls	r3, r3, #31
    1120:	bpl.n	1116 <setup+0xe>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1122:	ldr	r3, [r5, #0]
    1124:	ldr	r0, [r4, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1126:	subs	r3, r3, r0
    1128:	cmp	r3, #14
    112a:	bls.n	1116 <setup+0xe>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    112c:	movs	r1, #8
    112e:	ldr	r0, [pc, #516]	; (1334 <setup+0x22c>)
    1130:	ldr.w	r8, [pc, #564]	; 1368 <setup+0x260>
    1134:	bl	b2e0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1138:	ldr	r0, [pc, #508]	; (1338 <setup+0x230>)
    113a:	bl	c7f8 <Print::println()>
  while(!Serial); 
  Serial.println("MTP_test");
  
  // Set Time callback // needed for SDFat-beta
  FsDateTime::callback = dateTime;
    113e:	ldr	r3, [pc, #508]	; (133c <setup+0x234>)
    1140:	ldr	r2, [pc, #508]	; (1340 <setup+0x238>)
    1142:	str	r2, [r3, #0]

  usb_mtp_configure();
    1144:	bl	b0dc <usb_mtp_configure>
  storage_configure();
    1148:	bl	fb4 <storage_configure()>
    114c:	ldr.w	r6, [r8, #1148]	; 0x47c
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
           m_xVol ? m_xVol->exists(path) : false;
    1150:	cmp	r6, #0
    1152:	beq.w	126a <setup+0x162>
    1156:	movs	r5, #0
    1158:	add	r4, sp, #24
    115a:	mov	r1, r6
    115c:	mov	r3, r5
    115e:	mov	r0, r4
    1160:	ldr	r2, [pc, #480]	; (1344 <setup+0x23c>)
    1162:	strb.w	r5, [sp, #24]
    1166:	strb.w	r5, [sp, #25]
    116a:	strb.w	r5, [sp, #26]
    116e:	bl	7d8c <FatFile::open(FatVolume*, char const*, int)>
    }
  }
  #endif
  
  const char *str = "test1.txt";
  if(sdx[0].exists(str)) sdx[0].remove(str);
    1172:	cmp	r0, #0
    1174:	bne.w	1290 <setup+0x188>
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    1178:	movw	r3, #514	; 0x202
    117c:	mov	r0, r4
    117e:	ldr	r2, [pc, #452]	; (1344 <setup+0x23c>)
    1180:	ldr	r1, [pc, #452]	; (1348 <setup+0x240>)
    1182:	bl	98c4 <FsVolume::open(char const*, int)>
    1186:	ldr	r3, [sp, #96]	; 0x60
    1188:	cmp	r3, #0
    118a:	beq.w	1304 <setup+0x1fc>
		if (file) return File(new SDFile(file));
    118e:	movs	r0, #104	; 0x68
    1190:	bl	c9a4 <operator new(unsigned int)>
    1194:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    1196:	ldrb.w	r5, [sp, #28]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    119a:	ldr	r2, [sp, #32]
    119c:	ldrb.w	r3, [sp, #36]	; 0x24
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    11a0:	ldr	r0, [pc, #424]	; (134c <setup+0x244>)
    11a2:	ldr	r1, [pc, #428]	; (1350 <setup+0x248>)
    11a4:	strb	r5, [r4, #24]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    11a6:	mov.w	r9, #1000	; 0x3e8
{
  public:
	constexpr Print() : write_error(0) {}
    11aa:	movs	r5, #0
    11ac:	add	r7, sp, #40	; 0x28
    11ae:	str	r0, [r4, #0]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    11b0:	str	r1, [r4, #20]
    11b2:	str	r2, [r4, #28]
    11b4:	strb.w	r3, [r4, #32]
    11b8:	add.w	r0, r4, #36	; 0x24
    11bc:	mov	r1, r7
    11be:	strb	r5, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    11c0:	strb	r5, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    11c2:	str	r5, [r4, #16]
    11c4:	str.w	r9, [r4, #8]
    11c8:	bl	9680 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    11cc:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    11ce:	ldr	r2, [pc, #388]	; (1354 <setup+0x24c>)
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    11d0:	ldr	r6, [pc, #388]	; (1358 <setup+0x250>)
    11d2:	str	r5, [r4, #100]	; 0x64
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    11d4:	adds	r3, #1
    11d6:	strb.w	r5, [sp, #8]
    11da:	str.w	r9, [sp, #12]
    11de:	strb.w	r5, [sp, #16]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
    11e2:	str	r4, [sp, #20]
    11e4:	str	r2, [r4, #20]
		if (f) f->refcount++;
    11e6:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    11e8:	str	r6, [sp, #4]
    11ea:	ldr	r3, [pc, #368]	; (135c <setup+0x254>)
    11ec:	str	r3, [sp, #24]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
    11ee:	mov	r0, r7
    11f0:	bl	96f8 <FsBaseFile::close()>
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    11f4:	movs	r2, #19
    11f6:	ldr	r1, [pc, #360]	; (1360 <setup+0x258>)
    11f8:	add	r0, sp, #4
    11fa:	bl	c7cc <Print::write(unsigned char const*, unsigned int)>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    11fe:	add	r0, sp, #4
    1200:	bl	c7f8 <Print::println()>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    1204:	ldr	r0, [sp, #20]
    1206:	cbz	r0, 120e <setup+0x106>
    1208:	ldr	r3, [r0, #0]
    120a:	ldr	r3, [r3, #64]	; 0x40
    120c:	blx	r3
    120e:	movs	r1, #23
    1210:	ldr	r0, [pc, #336]	; (1364 <setup+0x25c>)
    1212:	bl	b2e0 <usb_serial_write>
    1216:	ldr	r0, [pc, #288]	; (1338 <setup+0x230>)
    1218:	bl	c7f8 <Print::println()>
    121c:	ldr.w	r2, [r8, #1148]	; 0x47c
    1220:	ldr	r3, [pc, #324]	; (1368 <setup+0x260>)
   *
   * \return true for success or false for failure.
   */
  bool ls(print_t* pr) {
    return m_fVol ? m_fVol->ls(pr) :
           m_xVol ? m_xVol->ls(pr) : false;
    1222:	cmp	r2, #0
    1224:	beq.n	12c0 <setup+0x1b8>
   * LS_R - Recursive list of subdirectories.
   *
   * \return true for success or false for failure.
   */
  bool ls(print_t* pr, uint8_t flags = 0) {
    return m_vwd.ls(pr, flags);
    1226:	movs	r3, #0
    1228:	addw	r0, r2, #1084	; 0x43c
    122c:	ldr	r1, [pc, #264]	; (1338 <setup+0x230>)
    122e:	mov	r2, r3
    1230:	bl	8698 <FatFile::ls(Print*, unsigned char, unsigned char)>
      file.println("This is a test line");
  file.close();

  Serial.println("\n**** dir of sd[0] ****");
  sdx[0].sdfs.ls();
  Serial.println();
    1234:	ldr	r0, [pc, #256]	; (1338 <setup+0x230>)
    1236:	bl	c7f8 <Print::println()>
    123a:	movs	r1, #10
    123c:	ldr	r0, [pc, #300]	; (136c <setup+0x264>)
    123e:	bl	b2e0 <usb_serial_write>
    1242:	ldr	r0, [pc, #244]	; (1338 <setup+0x230>)
    1244:	bl	c7f8 <Print::println()>
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    1248:	bl	b448 <usb_serial_flush_output>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    124c:	ldr	r2, [sp, #20]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    124e:	str	r6, [sp, #4]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1250:	cbz	r2, 1264 <setup+0x15c>
    1252:	ldr	r3, [r2, #16]
    1254:	subs	r3, #1
    1256:	str	r3, [r2, #16]
    1258:	cbnz	r3, 1264 <setup+0x15c>
    125a:	ldr	r0, [sp, #20]
    125c:	cbz	r0, 1264 <setup+0x15c>
    125e:	ldr	r3, [r0, #0]
    1260:	ldr	r3, [r3, #32]
    1262:	blx	r3

  Serial.println("Setup done");
  Serial.flush();
}
    1264:	add	sp, #108	; 0x6c
    1266:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
           m_xVol ? m_xVol->exists(path) : false;
    126a:	ldr.w	r1, [r8, #1152]	; 0x480
    126e:	add	r4, sp, #24
    1270:	cmp	r1, #0
    1272:	beq.n	1178 <setup+0x70>
    1274:	mov	r3, r6
    1276:	mov	r0, r4
    1278:	ldr	r2, [pc, #200]	; (1344 <setup+0x23c>)
    127a:	strb.w	r6, [sp, #73]	; 0x49
    127e:	strb.w	r6, [sp, #74]	; 0x4a
    1282:	strb.w	r6, [sp, #75]	; 0x4b
    1286:	bl	6728 <ExFatFile::open(ExFatVolume*, char const*, int)>
    }
  }
  #endif
  
  const char *str = "test1.txt";
  if(sdx[0].exists(str)) sdx[0].remove(str);
    128a:	cmp	r0, #0
    128c:	beq.w	1178 <setup+0x70>
    1290:	ldr.w	r5, [r8, #1148]	; 0x47c
    1294:	ldr	r3, [pc, #208]	; (1368 <setup+0x260>)
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
    1296:	cbz	r5, 12d6 <setup+0x1ce>
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    1298:	mov	r1, r5
    129a:	movs	r3, #1
    129c:	movs	r5, #0
    129e:	ldr	r2, [pc, #164]	; (1344 <setup+0x23c>)
    12a0:	strb.w	r5, [sp, #24]
    12a4:	mov	r0, r4
    12a6:	strb.w	r5, [sp, #25]
    12aa:	strb.w	r5, [sp, #26]
    12ae:	bl	7d8c <FatFile::open(FatVolume*, char const*, int)>
    12b2:	cmp	r0, #0
    12b4:	beq.w	1178 <setup+0x70>
    12b8:	mov	r0, r4
    12ba:	bl	9054 <FatFile::remove()>
    12be:	b.n	1178 <setup+0x70>
   *
   * \return true for success or false for failure.
   */
  bool ls(print_t* pr) {
    return m_fVol ? m_fVol->ls(pr) :
           m_xVol ? m_xVol->ls(pr) : false;
    12c0:	ldr.w	r0, [r3, #1152]	; 0x480
    12c4:	cmp	r0, #0
    12c6:	beq.n	1234 <setup+0x12c>
   * LS_R - Recursive list of subdirectories.
   *
   * \return true for success or false for failure.
   */
  bool ls(print_t* pr, uint8_t flags = 0) {
    return m_vwd.ls(pr, flags);
    12c8:	mov	r3, r2
    12ca:	ldr	r1, [pc, #108]	; (1338 <setup+0x230>)
    12cc:	add.w	r0, r0, #1088	; 0x440
    12d0:	bl	67fc <ExFatFile::ls(Print*, unsigned char, unsigned char)>
    12d4:	b.n	1234 <setup+0x12c>
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
    12d6:	ldr.w	r1, [r3, #1152]	; 0x480
    12da:	cmp	r1, #0
    12dc:	beq.w	1178 <setup+0x70>
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    12e0:	movs	r3, #1
    12e2:	ldr	r2, [pc, #96]	; (1344 <setup+0x23c>)
    12e4:	strb.w	r5, [sp, #73]	; 0x49
    12e8:	mov	r0, r4
    12ea:	strb.w	r5, [sp, #74]	; 0x4a
    12ee:	strb.w	r5, [sp, #75]	; 0x4b
    12f2:	bl	6728 <ExFatFile::open(ExFatVolume*, char const*, int)>
    12f6:	cmp	r0, #0
    12f8:	beq.w	1178 <setup+0x70>
    12fc:	mov	r0, r4
    12fe:	bl	6f80 <ExFatFile::remove()>
    1302:	b.n	1178 <setup+0x70>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    1304:	ldr	r3, [sp, #100]	; 0x64
    1306:	cmp	r3, #0
    1308:	bne.w	118e <setup+0x86>
    130c:	mov.w	r2, #1000	; 0x3e8

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    1310:	ldr	r6, [pc, #68]	; (1358 <setup+0x250>)
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    1312:	strb.w	r3, [sp, #8]
    1316:	strb.w	r3, [sp, #16]
    131a:	str	r3, [sp, #20]
    131c:	str	r2, [sp, #12]
    131e:	str	r6, [sp, #4]
    1320:	add	r7, sp, #40	; 0x28
    1322:	b.n	11ea <setup+0xe2>
    1324:	.word	0x1fff2094
    1328:	.word	0x1fff1f8c
    132c:	.word	0x1fff1f90
    1330:	.word	0x1fff210c
    1334:	.word	0x00011b38
    1338:	.word	0x1fff09d0
    133c:	.word	0x1fff1f2c
    1340:	.word	0x00000615
    1344:	.word	0x00011af4
    1348:	.word	0x1fff149c
    134c:	.word	0x00011a18
    1350:	.word	0x0001194c
    1354:	.word	0x00011994
    1358:	.word	0x000119b8
    135c:	.word	0x00011970
    1360:	.word	0x00011b00
    1364:	.word	0x00011b14
    1368:	.word	0x1fff1498
    136c:	.word	0x00011b2c

00001370 <loop>:
  Serial.flush();
}

void loop()
{ 
  mtpd.loop();
    1370:	ldr	r0, [pc, #4]	; (1378 <loop+0x8>)
    1372:	b.w	4d8c <MTPD::loop()>
    1376:	nop
    1378:	.word	0x1fff1a4c

0000137c <_GLOBAL__sub_I_sd_str>:

  //logg(1000,"loop");
  //asm("wfi"); // may wait forever on T4.x
}
    137c:	push	{r3, r4, r5, r6, r7, lr}


class SDClass : public FS
{
public:
	SDClass() { }
    137e:	ldr	r3, [pc, #188]	; (143c <_GLOBAL__sub_I_sd_str+0xc0>)
//  const int cs[] = {BUILTIN_SDCARD,38}; // edit to reflect your configuration
  const char *sd_str[]={"sdio"}; // edit to reflect your configuration
  const int cs[] = {BUILTIN_SDCARD}; // edit to reflect your configuration
  const int nsd = sizeof(cs)/sizeof(int);

SDClass sdx[nsd];
    1380:	ldr	r6, [pc, #188]	; (1440 <_GLOBAL__sub_I_sd_str+0xc4>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    1382:	ldr	r7, [pc, #192]	; (1444 <_GLOBAL__sub_I_sd_str+0xc8>)
    1384:	str.w	r7, [r3, #1164]	; 0x48c
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() : m_fVol(nullptr), m_xVol(nullptr) {}
    1388:	movs	r5, #0
    138a:	ldr	r2, [pc, #188]	; (1448 <_GLOBAL__sub_I_sd_str+0xcc>)
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
    138c:	ldr	r0, [pc, #188]	; (144c <_GLOBAL__sub_I_sd_str+0xd0>)
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    138e:	ldr	r1, [pc, #192]	; (1450 <_GLOBAL__sub_I_sd_str+0xd4>)

class mSD_Base
{
  public:
    mSD_Base() {
      fsCount = 0;
    1390:	ldr	r4, [pc, #192]	; (1454 <_GLOBAL__sub_I_sd_str+0xd8>)
    1392:	str	r2, [r3, #0]
    1394:	movs	r7, #40	; 0x28
    1396:	mov	r2, r6
    1398:	str.w	r0, [r3, #1176]	; 0x498
    139c:	str.w	r1, [r3, #1184]	; 0x4a0
    13a0:	strb.w	r7, [r3, #1195]	; 0x4ab
    13a4:	ldr	r1, [pc, #176]	; (1458 <_GLOBAL__sub_I_sd_str+0xdc>)
    13a6:	str.w	r5, [r3, #1148]	; 0x47c
    13aa:	str.w	r5, [r3, #1152]	; 0x480
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() : m_options(FIFO_SDIO) {}
    13ae:	strb.w	r5, [r3, #1172]	; 0x494
    13b2:	strb.w	r5, [r3, #1198]	; 0x4ae
    13b6:	mov	r0, r5
    13b8:	bl	cb54 <__aeabi_atexit>
  const int nfs = sizeof(lfs_size)/sizeof(int);

  LittleFS_RAM ramfs[nfs]; // needs to be declared if LittleFS is used in storage.h
#endif

MTPStorage_SD storage;
    13bc:	mov	r2, r6

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
    13be:	ldr	r6, [pc, #156]	; (145c <_GLOBAL__sub_I_sd_str+0xe0>)
    13c0:	ldr	r3, [pc, #156]	; (1460 <_GLOBAL__sub_I_sd_str+0xe4>)
    13c2:	str	r6, [r4, #0]
    13c4:	mov.w	r6, #1000	; 0x3e8
    13c8:	str.w	r3, [r4, #168]	; 0xa8
    13cc:	str.w	r3, [r4, #188]	; 0xbc
    13d0:	str.w	r3, [r4, #208]	; 0xd0
    13d4:	ldr	r1, [pc, #140]	; (1464 <_GLOBAL__sub_I_sd_str+0xe8>)

class mSD_Base
{
  public:
    mSD_Base() {
      fsCount = 0;
    13d6:	str	r5, [r4, #4]

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
    13d8:	mvn.w	r7, #1
    13dc:	mov	r0, r4
    13de:	strb.w	r5, [r4, #172]	; 0xac
    13e2:	strb.w	r5, [r4, #180]	; 0xb4
    13e6:	str.w	r5, [r4, #184]	; 0xb8
    13ea:	strb.w	r5, [r4, #192]	; 0xc0
    13ee:	strb.w	r5, [r4, #200]	; 0xc8
    13f2:	str.w	r5, [r4, #204]	; 0xcc
    13f6:	strb.w	r5, [r4, #212]	; 0xd4
    13fa:	strb.w	r5, [r4, #220]	; 0xdc
    13fe:	str.w	r5, [r4, #224]	; 0xe0
    1402:	str.w	r6, [r4, #176]	; 0xb0
    1406:	str.w	r6, [r4, #196]	; 0xc4
    140a:	str.w	r6, [r4, #216]	; 0xd8
    140e:	str.w	r5, [r4, #228]	; 0xe4
    1412:	str.w	r5, [r4, #232]	; 0xe8
    1416:	str.w	r5, [r4, #236]	; 0xec
    141a:	str.w	r5, [r4, #244]	; 0xf4
    141e:	strb.w	r5, [r4, #248]	; 0xf8
    1422:	strb.w	r5, [r4, #249]	; 0xf9
    1426:	str.w	r7, [r4, #240]	; 0xf0
    142a:	bl	cb54 <__aeabi_atexit>

// MTP Responder.
class MTPD {
public:

  explicit MTPD(MTPStorageInterface* storage): storage_(storage) {}
    142e:	ldr	r3, [pc, #56]	; (1468 <_GLOBAL__sub_I_sd_str+0xec>)
    1430:	stmia.w	r3, {r4, r5}
    1434:	strb	r5, [r3, #8]
    1436:	str	r5, [r3, #12]
    1438:	pop	{r3, r4, r5, r6, r7, pc}
    143a:	nop
    143c:	.word	0x1fff1498
    1440:	.word	0x1fff0970
    1444:	.word	0x00011d88
    1448:	.word	0x00011a78
    144c:	.word	0x00011d30
    1450:	.word	0x38011001
    1454:	.word	0x1fff1948
    1458:	.word	0x000005d5
    145c:	.word	0x00011b54
    1460:	.word	0x000119b8
    1464:	.word	0x00000ee1
    1468:	.word	0x1fff1a4c

0000146c <MTPStorage_SD::addFilesystem(FS&, char const*)>:
    mSD_Base() {
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSEMS) {
    146c:	ldr	r3, [r0, #4]
    146e:	cmp	r3, #19
    1470:	bgt.n	1484 <MTPStorage_SD::addFilesystem(FS&, char const*)+0x18>

// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
{ 
public:
  void addFilesystem(FS &fs, const char *name) { sd_addFilesystem(fs, name);}
    1472:	push	{r4}
    1474:	add.w	r4, r0, r3, lsl #2
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSEMS) {
        sd_name[fsCount] = name;
        sdx[fsCount++] = &fs;
    1478:	adds	r3, #1
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSEMS) {
        sd_name[fsCount] = name;
    147a:	str	r2, [r4, #8]
        sdx[fsCount++] = &fs;
    147c:	str	r3, [r0, #4]
    147e:	str	r1, [r4, #88]	; 0x58

// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
{ 
public:
  void addFilesystem(FS &fs, const char *name) { sd_addFilesystem(fs, name);}
    1480:	ldr.w	r4, [sp], #4
    1484:	bx	lr
    1486:	nop

00001488 <MTPStorage_SD::get_FSCount()>:
  uint16_t ConstructFilename(int i, char* out, int len) ;
  void OpenFileByIndex(uint32_t i, uint32_t mode = FILE_READ) ;
  void dumpIndexList(void);
  void printRecord(int h, Record *p);

  uint32_t get_FSCount(void) {return sd_getFSCount();}
    1488:	ldr	r0, [r0, #4]
    148a:	bx	lr

0000148c <MTPStorage_SD::get_FSName(unsigned long)>:
        sdx[fsCount++] = &fs;
      }
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t storage) { return sd_name[storage-1];}
    148c:	add.w	r1, r0, r1, lsl #2
  void OpenFileByIndex(uint32_t i, uint32_t mode = FILE_READ) ;
  void dumpIndexList(void);
  void printRecord(int h, Record *p);

  uint32_t get_FSCount(void) {return sd_getFSCount();}
  const char *get_FSName(uint32_t storage) { return sd_getFSName(storage);}
    1490:	ldr	r0, [r1, #4]
    1492:	bx	lr

00001494 <MTPStorage_SD::readonly(unsigned long)>:

// These should probably be weak.
void mtp_yield() {}
void mtp_lock_storage(bool lock) {}

  bool MTPStorage_SD::readonly(uint32_t storage) { return false; }
    1494:	movs	r0, #0
    1496:	bx	lr

00001498 <MTPStorage_SD::has_directories(unsigned long)>:
  bool MTPStorage_SD::has_directories(uint32_t storage) { return true; }
    1498:	movs	r0, #1
    149a:	bx	lr

0000149c <MTPStorage_SD::totalSize(unsigned long)>:
    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) { return sdx[store]->remove(filename);  }
    bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
    uint64_t sd_totalSize(uint32_t store) { return sdx[store]->totalSize();  }
    149c:	add.w	r1, r0, r1, lsl #2
    14a0:	ldr	r0, [r1, #84]	; 0x54
    14a2:	ldr	r3, [r0, #0]
    14a4:	ldr	r3, [r3, #28]
    14a6:	bx	r3

000014a8 <MTPStorage_SD::usedSize(unsigned long)>:
    uint64_t sd_usedSize(uint32_t store)  { return sdx[store]->usedSize();  }
    14a8:	add.w	r1, r0, r1, lsl #2
    14ac:	ldr	r0, [r1, #84]	; 0x54
    14ae:	ldr	r3, [r0, #0]
    14b0:	ldr	r3, [r3, #24]
    14b2:	bx	r3

000014b4 <MTPStorage_SD::write(char const*, unsigned long)>:
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    14b4:	ldr.w	r0, [r0, #204]	; 0xcc
    14b8:	cmp	r0, #0
    14ba:	beq.n	1518 <MTPStorage_SD::write(char const*, unsigned long)+0x64>
    }
    return ret;
  }

  void MTPStorage_SD::write(const char* data, uint32_t bytes)
  {
    14bc:	push	{r4, r5, r6}
    14be:	ldr	r4, [r0, #0]
    14c0:	ldr	r3, [pc, #104]	; (152c <MTPStorage_SD::write(char const*, unsigned long)+0x78>)
    14c2:	ldr	r4, [r4, #44]	; 0x2c
    14c4:	cmp	r4, r3
    14c6:	bne.n	151a <MTPStorage_SD::write(char const*, unsigned long)+0x66>
    14c8:	ldr	r0, [r0, #16]
    14ca:	cbz	r0, 1516 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    14cc:	ldr	r4, [r0, #0]
    14ce:	ldr	r4, [r4, #44]	; 0x2c
    14d0:	cmp	r4, r3
    14d2:	bne.n	151a <MTPStorage_SD::write(char const*, unsigned long)+0x66>
    14d4:	ldr	r0, [r0, #16]
    14d6:	cbz	r0, 1516 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    14d8:	ldr	r4, [r0, #0]
    14da:	ldr	r4, [r4, #44]	; 0x2c
    14dc:	cmp	r4, r3
    14de:	bne.n	151a <MTPStorage_SD::write(char const*, unsigned long)+0x66>
    14e0:	ldr	r0, [r0, #16]
    14e2:	cbz	r0, 1516 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    14e4:	ldr	r4, [r0, #0]
    14e6:	ldr	r4, [r4, #44]	; 0x2c
    14e8:	cmp	r4, r3
    14ea:	bne.n	151a <MTPStorage_SD::write(char const*, unsigned long)+0x66>
    14ec:	ldr	r0, [r0, #16]
    14ee:	cbz	r0, 1516 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    14f0:	mov	r6, r2
    14f2:	ldr	r2, [r0, #0]
    14f4:	ldr	r4, [r2, #44]	; 0x2c
    14f6:	cmp	r4, r3
    14f8:	mov	r5, r1
    14fa:	bne.n	1520 <MTPStorage_SD::write(char const*, unsigned long)+0x6c>
    14fc:	ldr	r0, [r0, #16]
    14fe:	cbz	r0, 1516 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1500:	ldr	r2, [r0, #0]
    1502:	ldr	r4, [r2, #44]	; 0x2c
    1504:	cmp	r4, r3
    1506:	bne.n	1520 <MTPStorage_SD::write(char const*, unsigned long)+0x6c>
    1508:	ldr	r0, [r0, #16]
    150a:	cbz	r0, 1516 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    150c:	ldr	r3, [r0, #0]
    150e:	mov	r2, r6
    1510:	ldr	r3, [r3, #44]	; 0x2c
      mtp_lock_storage(true);
      file_.write(data,bytes);
      mtp_lock_storage(false);
  }
    1512:	pop	{r4, r5, r6}
    1514:	bx	r3
    1516:	pop	{r4, r5, r6}
    1518:	bx	lr
    151a:	mov	r3, r4
    151c:	pop	{r4, r5, r6}
    151e:	bx	r3
    1520:	mov	r2, r6
    1522:	mov	r1, r5
    1524:	mov	r3, r4
    1526:	pop	{r4, r5, r6}
    1528:	bx	r3
    152a:	nop
    152c:	.word	0x00000489

00001530 <MTPStorage_SD::CloseIndex()>:

  uint64_t MTPStorage_SD::totalSize(uint32_t storage) { return sd_totalSize(storage-1); }
  uint64_t MTPStorage_SD::usedSize(uint32_t storage) { return sd_usedSize(storage-1); }

  void MTPStorage_SD::CloseIndex()
  {
    1530:	push	{r4, lr}
    1532:	mov	r4, r0
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1534:	ldr.w	r0, [r0, #184]	; 0xb8
    1538:	cmp	r0, #0
    153a:	beq.n	161c <MTPStorage_SD::CloseIndex()+0xec>
    153c:	ldr	r3, [r0, #0]
    153e:	ldr	r2, [pc, #256]	; (1640 <MTPStorage_SD::CloseIndex()+0x110>)
    1540:	ldr	r3, [r3, #68]	; 0x44
    1542:	cmp	r3, r2
    1544:	bne.n	1628 <MTPStorage_SD::CloseIndex()+0xf8>
    1546:	ldr	r0, [r0, #16]
    1548:	cmp	r0, #0
    154a:	beq.n	161c <MTPStorage_SD::CloseIndex()+0xec>
    154c:	ldr	r2, [r0, #0]
    154e:	ldr	r2, [r2, #68]	; 0x44
    1550:	cmp	r2, r3
    1552:	bne.n	163a <MTPStorage_SD::CloseIndex()+0x10a>
    1554:	ldr	r0, [r0, #16]
    1556:	cmp	r0, #0
    1558:	beq.n	161c <MTPStorage_SD::CloseIndex()+0xec>
    155a:	ldr	r3, [r0, #0]
    155c:	ldr	r3, [r3, #68]	; 0x44
    155e:	cmp	r3, r2
    1560:	bne.n	1628 <MTPStorage_SD::CloseIndex()+0xf8>
    1562:	ldr	r0, [r0, #16]
    1564:	cmp	r0, #0
    1566:	beq.n	161c <MTPStorage_SD::CloseIndex()+0xec>
    1568:	ldr	r2, [r0, #0]
    156a:	ldr	r2, [r2, #68]	; 0x44
    156c:	cmp	r2, r3
    156e:	bne.n	163a <MTPStorage_SD::CloseIndex()+0x10a>
    1570:	ldr	r0, [r0, #16]
    1572:	cmp	r0, #0
    1574:	beq.n	161c <MTPStorage_SD::CloseIndex()+0xec>
    1576:	ldr	r3, [r0, #0]
    1578:	ldr	r3, [r3, #68]	; 0x44
    157a:	cmp	r3, r2
    157c:	bne.n	1628 <MTPStorage_SD::CloseIndex()+0xf8>
    157e:	ldr	r0, [r0, #16]
    1580:	cmp	r0, #0
    1582:	beq.n	161c <MTPStorage_SD::CloseIndex()+0xec>
    1584:	ldr	r3, [r0, #0]
    1586:	ldr	r3, [r3, #68]	; 0x44
    1588:	blx	r3
    mtp_lock_storage(true);
    if(sd_isOpen(index_)) index_.close();
    158a:	cmp	r0, #0
    158c:	beq.n	161c <MTPStorage_SD::CloseIndex()+0xec>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    158e:	ldr.w	r0, [r4, #184]	; 0xb8
    1592:	cmp	r0, #0
    1594:	beq.n	161c <MTPStorage_SD::CloseIndex()+0xec>
    1596:	ldr	r2, [r0, #0]
    1598:	ldr	r3, [pc, #168]	; (1644 <MTPStorage_SD::CloseIndex()+0x114>)
    159a:	ldr	r2, [r2, #64]	; 0x40
    159c:	cmp	r2, r3
    159e:	bne.n	162c <MTPStorage_SD::CloseIndex()+0xfc>
    15a0:	ldr	r0, [r0, #16]
    15a2:	cmp	r0, #0
    15a4:	beq.n	161c <MTPStorage_SD::CloseIndex()+0xec>
    15a6:	ldr	r2, [r0, #0]
    15a8:	ldr	r2, [r2, #64]	; 0x40
    15aa:	cmp	r2, r3
    15ac:	bne.n	162c <MTPStorage_SD::CloseIndex()+0xfc>
    15ae:	ldr	r0, [r0, #16]
    15b0:	cmp	r0, #0
    15b2:	beq.n	161c <MTPStorage_SD::CloseIndex()+0xec>
    15b4:	ldr	r2, [r0, #0]
    15b6:	ldr	r2, [r2, #64]	; 0x40
    15b8:	cmp	r2, r3
    15ba:	bne.n	162c <MTPStorage_SD::CloseIndex()+0xfc>
    15bc:	ldr	r0, [r0, #16]
    15be:	cmp	r0, #0
    15c0:	beq.n	161c <MTPStorage_SD::CloseIndex()+0xec>
    15c2:	ldr	r2, [r0, #0]
    15c4:	ldr	r2, [r2, #64]	; 0x40
    15c6:	cmp	r2, r3
    15c8:	bne.n	162c <MTPStorage_SD::CloseIndex()+0xfc>
    15ca:	ldr	r0, [r0, #16]
    15cc:	cbz	r0, 161c <MTPStorage_SD::CloseIndex()+0xec>
    15ce:	ldr	r2, [r0, #0]
    15d0:	ldr	r2, [r2, #64]	; 0x40
    15d2:	cmp	r2, r3
    15d4:	bne.n	162c <MTPStorage_SD::CloseIndex()+0xfc>
    15d6:	ldr	r0, [r0, #16]
    15d8:	cbz	r0, 161c <MTPStorage_SD::CloseIndex()+0xec>
    15da:	ldr	r2, [r0, #0]
    15dc:	ldr	r2, [r2, #64]	; 0x40
    15de:	cmp	r2, r3
    15e0:	bne.n	162c <MTPStorage_SD::CloseIndex()+0xfc>
    15e2:	ldr	r0, [r0, #16]
    15e4:	cbz	r0, 161c <MTPStorage_SD::CloseIndex()+0xec>
    15e6:	ldr	r2, [r0, #0]
    15e8:	ldr	r2, [r2, #64]	; 0x40
    15ea:	cmp	r2, r3
    15ec:	bne.n	162c <MTPStorage_SD::CloseIndex()+0xfc>
    15ee:	ldr	r0, [r0, #16]
    15f0:	cbz	r0, 161c <MTPStorage_SD::CloseIndex()+0xec>
    15f2:	ldr	r2, [r0, #0]
    15f4:	ldr	r2, [r2, #64]	; 0x40
    15f6:	cmp	r2, r3
    15f8:	bne.n	162c <MTPStorage_SD::CloseIndex()+0xfc>
    15fa:	ldr	r0, [r0, #16]
    15fc:	cbz	r0, 161c <MTPStorage_SD::CloseIndex()+0xec>
    15fe:	ldr	r2, [r0, #0]
    1600:	ldr	r2, [r2, #64]	; 0x40
    1602:	cmp	r2, r3
    1604:	bne.n	162c <MTPStorage_SD::CloseIndex()+0xfc>
    1606:	ldr	r0, [r0, #16]
    1608:	cbz	r0, 161c <MTPStorage_SD::CloseIndex()+0xec>
    160a:	ldr	r2, [r0, #0]
    160c:	ldr	r2, [r2, #64]	; 0x40
    160e:	cmp	r2, r3
    1610:	bne.n	162c <MTPStorage_SD::CloseIndex()+0xfc>
    1612:	ldr	r0, [r0, #16]
    1614:	cbz	r0, 161c <MTPStorage_SD::CloseIndex()+0xec>
    1616:	ldr	r3, [r0, #0]
    1618:	ldr	r3, [r3, #64]	; 0x40
    161a:	blx	r3
    mtp_lock_storage(false);
    index_generated = false;
    161c:	movs	r3, #0
    161e:	strb.w	r3, [r4, #248]	; 0xf8
    index_entries_ = 0;
    1622:	str.w	r3, [r4, #244]	; 0xf4
    1626:	pop	{r4, pc}
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1628:	blx	r3
    162a:	b.n	158a <MTPStorage_SD::CloseIndex()+0x5a>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    162c:	blx	r2
  void MTPStorage_SD::CloseIndex()
  {
    mtp_lock_storage(true);
    if(sd_isOpen(index_)) index_.close();
    mtp_lock_storage(false);
    index_generated = false;
    162e:	movs	r3, #0
    1630:	strb.w	r3, [r4, #248]	; 0xf8
    index_entries_ = 0;
    1634:	str.w	r3, [r4, #244]	; 0xf4
    1638:	pop	{r4, pc}
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    163a:	blx	r2
    163c:	b.n	158a <MTPStorage_SD::CloseIndex()+0x5a>
    163e:	nop
    1640:	.word	0x0000050d
    1644:	.word	0x00000501

00001648 <mtp_yield()>:
//   support serialflash
//   partial object fetch/receive
//   events (notify usb host when local storage changes) (But, this seems too difficult)

// These should probably be weak.
void mtp_yield() {}
    1648:	bx	lr
    164a:	nop

0000164c <MTPStorage_SD::OpenIndex()>:
    index_generated = false;
    index_entries_ = 0;
  }

  void MTPStorage_SD::OpenIndex() 
  { if(sd_isOpen(index_)) return; // only once
    164c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1650:	mov	r4, r0
    1652:	ldr.w	r0, [r0, #184]	; 0xb8
    1656:	sub	sp, #28
    1658:	cbz	r0, 16b0 <MTPStorage_SD::OpenIndex()+0x64>
    165a:	ldr	r3, [r0, #0]
    165c:	ldr	r2, [pc, #384]	; (17e0 <MTPStorage_SD::OpenIndex()+0x194>)
    165e:	ldr	r3, [r3, #68]	; 0x44
    1660:	cmp	r3, r2
    1662:	bne.w	18dc <MTPStorage_SD::OpenIndex()+0x290>
    1666:	ldr	r0, [r0, #16]
    1668:	cbz	r0, 16b0 <MTPStorage_SD::OpenIndex()+0x64>
    166a:	ldr	r2, [r0, #0]
    166c:	ldr	r2, [r2, #68]	; 0x44
    166e:	cmp	r2, r3
    1670:	bne.w	18e6 <MTPStorage_SD::OpenIndex()+0x29a>
    1674:	ldr	r0, [r0, #16]
    1676:	cbz	r0, 16b0 <MTPStorage_SD::OpenIndex()+0x64>
    1678:	ldr	r3, [r0, #0]
    167a:	ldr	r3, [r3, #68]	; 0x44
    167c:	cmp	r3, r2
    167e:	bne.w	18dc <MTPStorage_SD::OpenIndex()+0x290>
    1682:	ldr	r0, [r0, #16]
    1684:	cbz	r0, 16b0 <MTPStorage_SD::OpenIndex()+0x64>
    1686:	ldr	r2, [r0, #0]
    1688:	ldr	r2, [r2, #68]	; 0x44
    168a:	cmp	r2, r3
    168c:	bne.w	18e6 <MTPStorage_SD::OpenIndex()+0x29a>
    1690:	ldr	r0, [r0, #16]
    1692:	cbz	r0, 16b0 <MTPStorage_SD::OpenIndex()+0x64>
    1694:	ldr	r3, [r0, #0]
    1696:	ldr	r3, [r3, #68]	; 0x44
    1698:	cmp	r3, r2
    169a:	bne.w	18dc <MTPStorage_SD::OpenIndex()+0x290>
    169e:	ldr	r0, [r0, #16]
    16a0:	cbz	r0, 16b0 <MTPStorage_SD::OpenIndex()+0x64>
    16a2:	ldr	r3, [r0, #0]
    16a4:	ldr	r3, [r3, #68]	; 0x44
    16a6:	blx	r3
    16a8:	cbz	r0, 16b0 <MTPStorage_SD::OpenIndex()+0x64>
    mtp_lock_storage(true);
    index_=sd_open(0,indexFile, FILE_WRITE_BEGIN);
    mtp_lock_storage(false);
  }
    16aa:	add	sp, #28
    16ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t storage) { return sd_name[storage-1];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    16b0:	ldr	r1, [r4, #88]	; 0x58
    16b2:	ldr	r2, [pc, #304]	; (17e4 <MTPStorage_SD::OpenIndex()+0x198>)
    16b4:	ldr	r3, [r1, #0]
    16b6:	add	r0, sp, #4
    16b8:	ldr	r5, [r3, #0]
    16ba:	movs	r3, #2
    16bc:	blx	r5
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    16be:	ldr.w	r3, [r4, #184]	; 0xb8
    16c2:	cbz	r3, 16d0 <MTPStorage_SD::OpenIndex()+0x84>
    16c4:	ldr	r2, [r3, #16]
    16c6:	subs	r2, #1
    16c8:	str	r2, [r3, #16]
    16ca:	cmp	r2, #0
    16cc:	beq.w	17f0 <MTPStorage_SD::OpenIndex()+0x1a4>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    16d0:	ldr	r3, [sp, #20]
    16d2:	str.w	r3, [r4, #184]	; 0xb8
		if (f) f->refcount++;
    16d6:	cmp	r3, #0
    16d8:	beq.n	16aa <MTPStorage_SD::OpenIndex()+0x5e>
    16da:	ldr	r2, [r3, #16]
		return *this;
	}
	virtual ~File() {
    16dc:	ldr	r1, [pc, #264]	; (17e8 <MTPStorage_SD::OpenIndex()+0x19c>)
    16de:	str	r1, [sp, #4]
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    16e0:	adds	r2, #1
    16e2:	str	r2, [r3, #16]
    16e4:	ldr	r2, [sp, #20]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    16e6:	cmp	r2, #0
    16e8:	beq.n	16aa <MTPStorage_SD::OpenIndex()+0x5e>
    16ea:	ldr	r3, [r2, #16]
    16ec:	subs	r3, #1
    16ee:	str	r3, [r2, #16]
    16f0:	cmp	r3, #0
    16f2:	bne.n	16aa <MTPStorage_SD::OpenIndex()+0x5e>
    16f4:	ldr	r4, [sp, #20]
    16f6:	cmp	r4, #0
    16f8:	beq.n	16aa <MTPStorage_SD::OpenIndex()+0x5e>
    16fa:	ldr	r2, [r4, #0]
    16fc:	ldr	r3, [pc, #236]	; (17ec <MTPStorage_SD::OpenIndex()+0x1a0>)
    16fe:	ldr	r2, [r2, #32]
    1700:	cmp	r2, r3
    1702:	bne.w	18f0 <MTPStorage_SD::OpenIndex()+0x2a4>
    1706:	ldr	r0, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1708:	str	r1, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    170a:	cmp	r0, #0
    170c:	beq.n	17d0 <MTPStorage_SD::OpenIndex()+0x184>
    170e:	ldr	r2, [r0, #16]
    1710:	subs	r2, #1
    1712:	str	r2, [r0, #16]
    1714:	cmp	r2, #0
    1716:	bne.n	17d0 <MTPStorage_SD::OpenIndex()+0x184>
    1718:	ldr	r5, [r4, #16]
    171a:	cmp	r5, #0
    171c:	beq.n	17d0 <MTPStorage_SD::OpenIndex()+0x184>
    171e:	ldr	r2, [r5, #0]
    1720:	ldr	r2, [r2, #32]
    1722:	cmp	r2, r3
    1724:	bne.w	1902 <MTPStorage_SD::OpenIndex()+0x2b6>
    1728:	ldr	r0, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    172a:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    172c:	cmp	r0, #0
    172e:	beq.n	17c8 <MTPStorage_SD::OpenIndex()+0x17c>
    1730:	ldr	r2, [r0, #16]
    1732:	subs	r2, #1
    1734:	str	r2, [r0, #16]
    1736:	cmp	r2, #0
    1738:	bne.n	17c8 <MTPStorage_SD::OpenIndex()+0x17c>
    173a:	ldr	r6, [r5, #16]
    173c:	cmp	r6, #0
    173e:	beq.n	17c8 <MTPStorage_SD::OpenIndex()+0x17c>
    1740:	ldr	r2, [r6, #0]
    1742:	ldr	r2, [r2, #32]
    1744:	cmp	r2, r3
    1746:	bne.w	190e <MTPStorage_SD::OpenIndex()+0x2c2>
    174a:	ldr	r0, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    174c:	str	r1, [r6, #0]
    174e:	ldr.w	lr, [pc, #152]	; 17e8 <MTPStorage_SD::OpenIndex()+0x19c>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1752:	cmp	r0, #0
    1754:	beq.n	17c0 <MTPStorage_SD::OpenIndex()+0x174>
    1756:	ldr	r2, [r0, #16]
    1758:	subs	r2, #1
    175a:	str	r2, [r0, #16]
    175c:	cbnz	r2, 17c0 <MTPStorage_SD::OpenIndex()+0x174>
    175e:	ldr	r7, [r6, #16]
    1760:	cbz	r7, 17c0 <MTPStorage_SD::OpenIndex()+0x174>
    1762:	ldr	r2, [r7, #0]
    1764:	ldr	r2, [r2, #32]
    1766:	cmp	r2, r3
    1768:	bne.w	191a <MTPStorage_SD::OpenIndex()+0x2ce>
    176c:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    176e:	str.w	lr, [r7]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1772:	cbz	r0, 17b8 <MTPStorage_SD::OpenIndex()+0x16c>
    1774:	ldr	r2, [r0, #16]
    1776:	subs	r2, #1
    1778:	str	r2, [r0, #16]
    177a:	cbnz	r2, 17b8 <MTPStorage_SD::OpenIndex()+0x16c>
    177c:	ldr.w	r8, [r7, #16]
    1780:	cmp.w	r8, #0
    1784:	beq.n	17b8 <MTPStorage_SD::OpenIndex()+0x16c>
    1786:	ldr.w	r2, [r8]
    178a:	ldr	r2, [r2, #32]
    178c:	cmp	r2, r3
    178e:	bne.w	1926 <MTPStorage_SD::OpenIndex()+0x2da>
    1792:	ldr.w	r2, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1796:	str.w	r1, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    179a:	cbz	r2, 17b0 <MTPStorage_SD::OpenIndex()+0x164>
    179c:	ldr	r3, [r2, #16]
    179e:	subs	r3, #1
    17a0:	str	r3, [r2, #16]
    17a2:	cbnz	r3, 17b0 <MTPStorage_SD::OpenIndex()+0x164>
    17a4:	ldr.w	r0, [r8, #16]
    17a8:	cbz	r0, 17b0 <MTPStorage_SD::OpenIndex()+0x164>
    17aa:	ldr	r3, [r0, #0]
    17ac:	ldr	r3, [r3, #32]
    17ae:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    17b0:	mov	r0, r8
    17b2:	movs	r1, #20
    17b4:	bl	c9a8 <operator delete(void*, unsigned int)>
    17b8:	mov	r0, r7
    17ba:	movs	r1, #20
    17bc:	bl	c9a8 <operator delete(void*, unsigned int)>
    17c0:	mov	r0, r6
    17c2:	movs	r1, #20
    17c4:	bl	c9a8 <operator delete(void*, unsigned int)>
    17c8:	mov	r0, r5
    17ca:	movs	r1, #20
    17cc:	bl	c9a8 <operator delete(void*, unsigned int)>
    17d0:	mov	r0, r4
    17d2:	movs	r1, #20
    17d4:	bl	c9a8 <operator delete(void*, unsigned int)>
    17d8:	add	sp, #28
    17da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    17de:	nop
    17e0:	.word	0x0000050d
    17e4:	.word	0x00011ba4
    17e8:	.word	0x000119b8
    17ec:	.word	0x00000eb1
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    17f0:	ldr.w	r5, [r4, #184]	; 0xb8
    17f4:	cmp	r5, #0
    17f6:	beq.w	16d0 <MTPStorage_SD::OpenIndex()+0x84>
    17fa:	ldr	r2, [r5, #0]
    17fc:	ldr	r3, [pc, #300]	; (192c <MTPStorage_SD::OpenIndex()+0x2e0>)
    17fe:	ldr	r2, [r2, #32]
    1800:	cmp	r2, r3
    1802:	bne.n	18f6 <MTPStorage_SD::OpenIndex()+0x2aa>
    1804:	ldr	r0, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1806:	ldr	r1, [pc, #296]	; (1930 <MTPStorage_SD::OpenIndex()+0x2e4>)
    1808:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    180a:	cmp	r0, #0
    180c:	beq.n	18d2 <MTPStorage_SD::OpenIndex()+0x286>
    180e:	ldr	r2, [r0, #16]
    1810:	subs	r2, #1
    1812:	str	r2, [r0, #16]
    1814:	cmp	r2, #0
    1816:	bne.n	18d2 <MTPStorage_SD::OpenIndex()+0x286>
    1818:	ldr	r6, [r5, #16]
    181a:	cmp	r6, #0
    181c:	beq.n	18d2 <MTPStorage_SD::OpenIndex()+0x286>
    181e:	ldr	r2, [r6, #0]
    1820:	ldr	r2, [r2, #32]
    1822:	cmp	r2, r3
    1824:	bne.n	18fc <MTPStorage_SD::OpenIndex()+0x2b0>
    1826:	ldr	r0, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1828:	str	r1, [r6, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    182a:	cmp	r0, #0
    182c:	beq.n	18ca <MTPStorage_SD::OpenIndex()+0x27e>
    182e:	ldr	r2, [r0, #16]
    1830:	subs	r2, #1
    1832:	str	r2, [r0, #16]
    1834:	cmp	r2, #0
    1836:	bne.n	18ca <MTPStorage_SD::OpenIndex()+0x27e>
    1838:	ldr	r7, [r6, #16]
    183a:	cmp	r7, #0
    183c:	beq.n	18ca <MTPStorage_SD::OpenIndex()+0x27e>
    183e:	ldr	r2, [r7, #0]
    1840:	ldr	r2, [r2, #32]
    1842:	cmp	r2, r3
    1844:	bne.n	1908 <MTPStorage_SD::OpenIndex()+0x2bc>
    1846:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1848:	str	r1, [r7, #0]
    184a:	ldr.w	lr, [pc, #228]	; 1930 <MTPStorage_SD::OpenIndex()+0x2e4>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    184e:	cmp	r0, #0
    1850:	beq.n	18c2 <MTPStorage_SD::OpenIndex()+0x276>
    1852:	ldr	r2, [r0, #16]
    1854:	subs	r2, #1
    1856:	str	r2, [r0, #16]
    1858:	cbnz	r2, 18c2 <MTPStorage_SD::OpenIndex()+0x276>
    185a:	ldr.w	r8, [r7, #16]
    185e:	cmp.w	r8, #0
    1862:	beq.n	18c2 <MTPStorage_SD::OpenIndex()+0x276>
    1864:	ldr.w	r2, [r8]
    1868:	ldr	r2, [r2, #32]
    186a:	cmp	r2, r3
    186c:	bne.n	1914 <MTPStorage_SD::OpenIndex()+0x2c8>
    186e:	ldr.w	r0, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1872:	str.w	lr, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1876:	cbz	r0, 18ba <MTPStorage_SD::OpenIndex()+0x26e>
    1878:	ldr	r2, [r0, #16]
    187a:	subs	r2, #1
    187c:	str	r2, [r0, #16]
    187e:	cbnz	r2, 18ba <MTPStorage_SD::OpenIndex()+0x26e>
    1880:	ldr.w	r9, [r8, #16]
    1884:	cmp.w	r9, #0
    1888:	beq.n	18ba <MTPStorage_SD::OpenIndex()+0x26e>
    188a:	ldr.w	r2, [r9]
    188e:	ldr	r2, [r2, #32]
    1890:	cmp	r2, r3
    1892:	bne.n	1920 <MTPStorage_SD::OpenIndex()+0x2d4>
    1894:	ldr.w	r2, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1898:	str.w	r1, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    189c:	cbz	r2, 18b2 <MTPStorage_SD::OpenIndex()+0x266>
    189e:	ldr	r3, [r2, #16]
    18a0:	subs	r3, #1
    18a2:	str	r3, [r2, #16]
    18a4:	cbnz	r3, 18b2 <MTPStorage_SD::OpenIndex()+0x266>
    18a6:	ldr.w	r0, [r9, #16]
    18aa:	cbz	r0, 18b2 <MTPStorage_SD::OpenIndex()+0x266>
    18ac:	ldr	r3, [r0, #0]
    18ae:	ldr	r3, [r3, #32]
    18b0:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    18b2:	mov	r0, r9
    18b4:	movs	r1, #20
    18b6:	bl	c9a8 <operator delete(void*, unsigned int)>
    18ba:	mov	r0, r8
    18bc:	movs	r1, #20
    18be:	bl	c9a8 <operator delete(void*, unsigned int)>
    18c2:	mov	r0, r7
    18c4:	movs	r1, #20
    18c6:	bl	c9a8 <operator delete(void*, unsigned int)>
    18ca:	mov	r0, r6
    18cc:	movs	r1, #20
    18ce:	bl	c9a8 <operator delete(void*, unsigned int)>
    18d2:	mov	r0, r5
    18d4:	movs	r1, #20
    18d6:	bl	c9a8 <operator delete(void*, unsigned int)>
    18da:	b.n	16d0 <MTPStorage_SD::OpenIndex()+0x84>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    18dc:	blx	r3
    index_generated = false;
    index_entries_ = 0;
  }

  void MTPStorage_SD::OpenIndex() 
  { if(sd_isOpen(index_)) return; // only once
    18de:	cmp	r0, #0
    18e0:	bne.w	16aa <MTPStorage_SD::OpenIndex()+0x5e>
    18e4:	b.n	16b0 <MTPStorage_SD::OpenIndex()+0x64>
    18e6:	blx	r2
    18e8:	cmp	r0, #0
    18ea:	bne.w	16aa <MTPStorage_SD::OpenIndex()+0x5e>
    18ee:	b.n	16b0 <MTPStorage_SD::OpenIndex()+0x64>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    18f0:	mov	r0, r4
    18f2:	blx	r2
    18f4:	b.n	16aa <MTPStorage_SD::OpenIndex()+0x5e>
    18f6:	mov	r0, r5
    18f8:	blx	r2
    18fa:	b.n	16d0 <MTPStorage_SD::OpenIndex()+0x84>
    18fc:	mov	r0, r6
    18fe:	blx	r2
    1900:	b.n	18d2 <MTPStorage_SD::OpenIndex()+0x286>
    1902:	mov	r0, r5
    1904:	blx	r2
    1906:	b.n	17d0 <MTPStorage_SD::OpenIndex()+0x184>
    1908:	mov	r0, r7
    190a:	blx	r2
    190c:	b.n	18ca <MTPStorage_SD::OpenIndex()+0x27e>
    190e:	mov	r0, r6
    1910:	blx	r2
    1912:	b.n	17c8 <MTPStorage_SD::OpenIndex()+0x17c>
    1914:	mov	r0, r8
    1916:	blx	r2
    1918:	b.n	18c2 <MTPStorage_SD::OpenIndex()+0x276>
    191a:	mov	r0, r7
    191c:	blx	r2
    191e:	b.n	17c0 <MTPStorage_SD::OpenIndex()+0x174>
    1920:	mov	r0, r9
    1922:	blx	r2
    1924:	b.n	18ba <MTPStorage_SD::OpenIndex()+0x26e>
    1926:	mov	r0, r8
    1928:	blx	r2
    192a:	b.n	17b8 <MTPStorage_SD::OpenIndex()+0x16c>
    192c:	.word	0x00000eb1
    1930:	.word	0x000119b8

00001934 <MTPStorage_SD::ResetIndex()>:
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1934:	ldr.w	r3, [r0, #184]	; 0xb8
    1938:	cmp	r3, #0
    193a:	beq.n	19aa <MTPStorage_SD::ResetIndex()+0x76>
    193c:	ldr	r2, [r3, #0]
    193e:	ldr	r1, [pc, #112]	; (19b0 <MTPStorage_SD::ResetIndex()+0x7c>)
    1940:	ldr	r2, [r2, #68]	; 0x44
    1942:	cmp	r2, r1
    mtp_lock_storage(true);
    index_=sd_open(0,indexFile, FILE_WRITE_BEGIN);
    mtp_lock_storage(false);
  }

  void MTPStorage_SD::ResetIndex() {
    1944:	push	{r4, lr}
    1946:	mov	r4, r0
    1948:	bne.n	19a4 <MTPStorage_SD::ResetIndex()+0x70>
    194a:	ldr	r0, [r3, #16]
    194c:	cbz	r0, 19a2 <MTPStorage_SD::ResetIndex()+0x6e>
    194e:	ldr	r3, [r0, #0]
    1950:	ldr	r3, [r3, #68]	; 0x44
    1952:	cmp	r3, r2
    1954:	bne.n	19ac <MTPStorage_SD::ResetIndex()+0x78>
    1956:	ldr	r0, [r0, #16]
    1958:	cbz	r0, 19a2 <MTPStorage_SD::ResetIndex()+0x6e>
    195a:	ldr	r2, [r0, #0]
    195c:	ldr	r2, [r2, #68]	; 0x44
    195e:	cmp	r2, r3
    1960:	bne.n	19a6 <MTPStorage_SD::ResetIndex()+0x72>
    1962:	ldr	r0, [r0, #16]
    1964:	cbz	r0, 19a2 <MTPStorage_SD::ResetIndex()+0x6e>
    1966:	ldr	r3, [r0, #0]
    1968:	ldr	r3, [r3, #68]	; 0x44
    196a:	cmp	r3, r2
    196c:	bne.n	19ac <MTPStorage_SD::ResetIndex()+0x78>
    196e:	ldr	r0, [r0, #16]
    1970:	cbz	r0, 19a2 <MTPStorage_SD::ResetIndex()+0x6e>
    1972:	ldr	r2, [r0, #0]
    1974:	ldr	r2, [r2, #68]	; 0x44
    1976:	cmp	r2, r3
    1978:	bne.n	19a6 <MTPStorage_SD::ResetIndex()+0x72>
    197a:	ldr	r0, [r0, #16]
    197c:	cbz	r0, 19a2 <MTPStorage_SD::ResetIndex()+0x6e>
    197e:	ldr	r3, [r0, #0]
    1980:	ldr	r3, [r3, #68]	; 0x44
    1982:	blx	r3
    if(!sd_isOpen(index_)) return;
    1984:	cbz	r0, 19a2 <MTPStorage_SD::ResetIndex()+0x6e>
    
    CloseIndex();
    1986:	ldr	r3, [r4, #0]
    1988:	mov	r0, r4
    198a:	ldr	r3, [r3, #64]	; 0x40
    198c:	blx	r3
    OpenIndex();
    198e:	mov	r0, r4
    1990:	bl	164c <MTPStorage_SD::OpenIndex()>

    all_scanned_ = false;
    1994:	movs	r2, #0
    open_file_ = 0xFFFFFFFEUL;
    1996:	mvn.w	r3, #1
    if(!sd_isOpen(index_)) return;
    
    CloseIndex();
    OpenIndex();

    all_scanned_ = false;
    199a:	strb.w	r2, [r4, #249]	; 0xf9
    open_file_ = 0xFFFFFFFEUL;
    199e:	str.w	r3, [r4, #240]	; 0xf0
    19a2:	pop	{r4, pc}
    19a4:	mov	r0, r3
    19a6:	blx	r2
    19a8:	b.n	1984 <MTPStorage_SD::ResetIndex()+0x50>
    19aa:	bx	lr
    19ac:	blx	r3
    19ae:	b.n	1984 <MTPStorage_SD::ResetIndex()+0x50>
    19b0:	.word	0x0000050d

000019b4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:
  }

  void MTPStorage_SD::WriteIndexRecord(uint32_t i, const Record& r) 
  { OpenIndex();
    19b4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    19b8:	mov	r6, r0
    19ba:	sub	sp, #12
    19bc:	mov	r4, r1
    19be:	mov	r7, r2
    19c0:	bl	164c <MTPStorage_SD::OpenIndex()>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    19c4:	ldr.w	r5, [r6, #184]	; 0xb8
    mtp_lock_storage(true);
    index_.seek((sizeof(r) * i));
    19c8:	add.w	r4, r4, r4, lsl #2
    19cc:	cmp	r5, #0
    19ce:	beq.n	1aa4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf0>
    19d0:	ldr	r0, [r5, #0]
    19d2:	ldr	r1, [pc, #304]	; (1b04 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x150>)
    19d4:	lsls	r2, r4, #4
    19d6:	ldr	r4, [r0, #52]	; 0x34
    19d8:	cmp	r4, r1
    19da:	mov.w	ip, #0
    19de:	bne.n	1aca <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x116>
    19e0:	ldr	r1, [r5, #16]
    19e2:	cmp	r1, #0
    19e4:	beq.n	1a9c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xe8>
    19e6:	ldr	r3, [r1, #0]
    19e8:	ldr.w	r8, [r3, #52]	; 0x34
    19ec:	cmp	r8, r4
    19ee:	bne.n	1ad6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x122>
    19f0:	ldr.w	lr, [r1, #16]
    19f4:	cmp.w	lr, #0
    19f8:	beq.n	1aaa <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf6>
    19fa:	ldr.w	r4, [lr]
    19fe:	ldr	r4, [r4, #52]	; 0x34
    1a00:	cmp	r4, r8
    1a02:	bne.n	1ae2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x12e>
    1a04:	ldr.w	lr, [lr, #16]
    1a08:	cmp.w	lr, #0
    1a0c:	beq.n	1aaa <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf6>
    1a0e:	ldr.w	r3, [lr]
    1a12:	ldr.w	r8, [r3, #52]	; 0x34
    1a16:	cmp	r8, r4
    1a18:	bne.n	1aee <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x13a>
    1a1a:	ldr.w	r4, [lr, #16]
    1a1e:	cmp	r4, #0
    1a20:	beq.n	1aaa <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf6>
    1a22:	ldr	r3, [r4, #0]
    1a24:	ldr.w	r9, [r3, #52]	; 0x34
    1a28:	cmp	r9, r8
    1a2a:	bne.n	1afa <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x146>
    1a2c:	ldr	r4, [r4, #16]
    1a2e:	cmp	r4, #0
    1a30:	beq.n	1aaa <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf6>
    1a32:	ldr	r1, [r4, #0]
    1a34:	str.w	ip, [sp]
    1a38:	mov	r3, ip
    1a3a:	mov	r0, r4
    1a3c:	ldr	r1, [r1, #52]	; 0x34
    1a3e:	blx	r1
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    1a40:	ldr.w	r5, [r6, #184]	; 0xb8
    1a44:	cmp	r5, #0
    1a46:	beq.n	1aa4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf0>
    1a48:	ldr	r2, [r5, #0]
    1a4a:	ldr	r3, [pc, #188]	; (1b08 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x154>)
    1a4c:	ldr	r4, [r2, #44]	; 0x2c
    1a4e:	cmp	r4, r3
    1a50:	bne.n	1ab6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x102>
    1a52:	ldr	r0, [r5, #16]
    1a54:	cbz	r0, 1aa4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf0>
    1a56:	ldr	r2, [r0, #0]
    1a58:	ldr	r4, [r2, #44]	; 0x2c
    1a5a:	cmp	r4, r3
    1a5c:	bne.n	1ac6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x112>
    1a5e:	ldr	r0, [r0, #16]
    1a60:	cbz	r0, 1aa4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf0>
    1a62:	ldr	r2, [r0, #0]
    1a64:	ldr	r4, [r2, #44]	; 0x2c
    1a66:	cmp	r4, r3
    1a68:	bne.n	1ac6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x112>
    1a6a:	ldr	r0, [r0, #16]
    1a6c:	cbz	r0, 1aa4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf0>
    1a6e:	ldr	r2, [r0, #0]
    1a70:	ldr	r4, [r2, #44]	; 0x2c
    1a72:	cmp	r4, r3
    1a74:	bne.n	1ac6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x112>
    1a76:	ldr	r0, [r0, #16]
    1a78:	cbz	r0, 1aa4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf0>
    1a7a:	ldr	r2, [r0, #0]
    1a7c:	ldr	r4, [r2, #44]	; 0x2c
    1a7e:	cmp	r4, r3
    1a80:	bne.n	1ac6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x112>
    1a82:	ldr	r0, [r0, #16]
    1a84:	cbz	r0, 1aa4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf0>
    1a86:	ldr	r2, [r0, #0]
    1a88:	ldr	r4, [r2, #44]	; 0x2c
    1a8a:	cmp	r4, r3
    1a8c:	bne.n	1ac6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x112>
    1a8e:	ldr	r0, [r0, #16]
    1a90:	cbz	r0, 1aa4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf0>
    1a92:	ldr	r3, [r0, #0]
    1a94:	mov	r1, r7
    1a96:	ldr	r3, [r3, #44]	; 0x2c
    1a98:	movs	r2, #80	; 0x50
    1a9a:	b.n	1abe <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x10a>
    1a9c:	ldr	r4, [r0, #44]	; 0x2c
    1a9e:	ldr	r3, [pc, #104]	; (1b08 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x154>)
    1aa0:	cmp	r4, r3
    1aa2:	bne.n	1ab6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x102>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }
    1aa4:	add	sp, #12
    1aa6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1aaa:	ldr	r4, [r0, #44]	; 0x2c
    1aac:	ldr	r3, [pc, #88]	; (1b08 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x154>)
    1aae:	cmp	r4, r3
    1ab0:	bne.n	1ab6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x102>
    1ab2:	mov	r0, r1
    1ab4:	b.n	1a56 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xa2>
    1ab6:	mov	r1, r7
    1ab8:	mov	r0, r5
    1aba:	movs	r2, #80	; 0x50
    1abc:	mov	r3, r4
    1abe:	add	sp, #12
    1ac0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1ac4:	bx	r3
    1ac6:	mov	r1, r7
    1ac8:	b.n	1aba <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x106>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    1aca:	str.w	ip, [sp]
    1ace:	mov	r3, ip
    1ad0:	mov	r0, r5
    1ad2:	blx	r4
    1ad4:	b.n	1a40 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    1ad6:	str.w	ip, [sp]
    1ada:	mov	r3, ip
    1adc:	mov	r0, r1
    1ade:	blx	r8
    1ae0:	b.n	1a40 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    1ae2:	str.w	ip, [sp]
    1ae6:	mov	r3, ip
    1ae8:	mov	r0, lr
    1aea:	blx	r4
    1aec:	b.n	1a40 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    1aee:	str.w	ip, [sp]
    1af2:	mov	r3, ip
    1af4:	mov	r0, lr
    1af6:	blx	r8
    1af8:	b.n	1a40 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    1afa:	movs	r3, #0
    1afc:	mov	r0, r4
    1afe:	str	r3, [sp, #0]
    1b00:	blx	r9
    1b02:	b.n	1a40 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    1b04:	.word	0x000004c9
    1b08:	.word	0x00000489

00001b0c <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.8] [clone .constprop.13]>:
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t storage)
    1b0c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1b10:	mov	r5, r0
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) { return sdx[store]->remove(filename);  }
    1b12:	ldr	r0, [r0, #88]	; 0x58
    1b14:	ldr	r1, [pc, #96]	; (1b78 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.8] [clone .constprop.13]+0x6c>)
    1b16:	ldr	r3, [r0, #0]
  { if (index_generated) return; 
    index_generated = true;
    1b18:	movs	r7, #1
    1b1a:	ldr	r3, [r3, #16]
    1b1c:	strb.w	r7, [r5, #248]	; 0xf8
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t storage)
    1b20:	sub	sp, #80	; 0x50
    1b22:	blx	r3
    1b24:	ldr	r3, [r5, #4]
    // first remove old index file
    mtp_lock_storage(true);
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    num_storage = sd_getFSCount();
    1b26:	str.w	r3, [r5, #228]	; 0xe4

    index_entries_ = 0;
    1b2a:	movs	r1, #0
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    1b2c:	cmp	r3, r1
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    num_storage = sd_getFSCount();

    index_entries_ = 0;
    1b2e:	str.w	r1, [r5, #244]	; 0xf4
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    1b32:	ble.n	1b70 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.8] [clone .constprop.13]+0x64>
    1b34:	mov	r4, r1
    {
      r.store = ii; // store is typically (storage-1) //store 0...6; storage 1...7
      r.parent = ii;
      r.sibling = 0;
    1b36:	mov	r6, r1
      r.child = 0;
      r.isdir = true;
      r.scanned = false;
      strcpy(r.name, "/");
    1b38:	mov.w	r8, #47	; 0x2f
    1b3c:	b.n	1b42 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.8] [clone .constprop.13]+0x36>
    1b3e:	ldr.w	r1, [r5, #244]	; 0xf4

    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    {
      r.store = ii; // store is typically (storage-1) //store 0...6; storage 1...7
    1b42:	strh.w	r4, [sp, #14]
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    1b46:	adds	r3, r1, #1
    1b48:	str.w	r3, [r5, #244]	; 0xf4
    WriteIndexRecord(new_record, r);
    1b4c:	mov	r2, sp
    1b4e:	mov	r0, r5
    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    {
      r.store = ii; // store is typically (storage-1) //store 0...6; storage 1...7
      r.parent = ii;
    1b50:	str	r4, [sp, #0]
      r.sibling = 0;
    1b52:	str	r6, [sp, #8]
      r.child = 0;
    1b54:	str	r6, [sp, #4]
      r.isdir = true;
    1b56:	strb.w	r7, [sp, #12]
      r.scanned = false;
    1b5a:	strb.w	r6, [sp, #13]
      strcpy(r.name, "/");
    1b5e:	strh.w	r8, [sp, #16]
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    1b62:	bl	19b4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

    num_storage = sd_getFSCount();

    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    1b66:	ldr.w	r3, [r5, #228]	; 0xe4
    1b6a:	adds	r4, #1
    1b6c:	cmp	r3, r4
    1b6e:	bgt.n	1b3e <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.8] [clone .constprop.13]+0x32>
      r.isdir = true;
      r.scanned = false;
      strcpy(r.name, "/");
      AppendIndexRecord(r);
    }
  }
    1b70:	add	sp, #80	; 0x50
    1b72:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1b76:	nop
    1b78:	.word	0x00011ba4

00001b7c <MTPStorage_SD::ReadIndexRecord(unsigned long)>:
    return new_record;
  }

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    1b7c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1b80:	mov	r5, r1
    1b82:	mov	r4, r2
    1b84:	sub	sp, #8
    Record ret;
    memset(&ret, 0, sizeof(ret));
    1b86:	movs	r1, #0
    1b88:	movs	r2, #80	; 0x50
    return new_record;
  }

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    1b8a:	mov	r6, r0
    Record ret;
    memset(&ret, 0, sizeof(ret));
    1b8c:	bl	df8c <memset>
    if (i > index_entries_) 
    1b90:	ldr.w	r3, [r5, #244]	; 0xf4
    1b94:	cmp	r3, r4
    1b96:	bcc.w	1d0e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x192>
    { memset(&ret, 0, sizeof(ret));
      return ret;
    }
    OpenIndex();
    1b9a:	mov	r0, r5
    1b9c:	bl	164c <MTPStorage_SD::OpenIndex()>
    1ba0:	ldr.w	r0, [r5, #184]	; 0xb8
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
    1ba4:	add.w	r4, r4, r4, lsl #2
    1ba8:	lsls	r2, r4, #4
    1baa:	mov.w	ip, #0
    1bae:	cmp	r0, #0
    1bb0:	beq.w	1d06 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18a>
    1bb4:	ldr	r7, [r0, #0]
    1bb6:	ldr	r4, [pc, #452]	; (1d7c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x200>)
    1bb8:	ldr	r1, [r7, #52]	; 0x34
    1bba:	cmp	r1, r4
    1bbc:	bne.w	1d36 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ba>
    1bc0:	ldr	r1, [r0, #16]
    1bc2:	cmp	r1, #0
    1bc4:	beq.w	1d20 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1a4>
    1bc8:	ldr	r3, [r1, #0]
    1bca:	ldr.w	r8, [r3, #52]	; 0x34
    1bce:	cmp	r8, r4
    1bd0:	bne.w	1d64 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1e8>
    1bd4:	ldr.w	lr, [r1, #16]
    1bd8:	cmp.w	lr, #0
    1bdc:	beq.n	1c90 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x114>
    1bde:	ldr.w	r3, [lr]
    1be2:	ldr.w	r8, [r3, #52]	; 0x34
    1be6:	cmp	r8, r4
    1be8:	bne.w	1d58 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1dc>
    1bec:	ldr.w	lr, [lr, #16]
    1bf0:	cmp.w	lr, #0
    1bf4:	beq.n	1c90 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x114>
    1bf6:	ldr.w	r3, [lr]
    1bfa:	ldr.w	r8, [r3, #52]	; 0x34
    1bfe:	cmp	r8, r4
    1c00:	bne.w	1d58 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1dc>
    1c04:	ldr.w	lr, [lr, #16]
    1c08:	cmp.w	lr, #0
    1c0c:	beq.n	1c90 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x114>
    1c0e:	ldr.w	r3, [lr]
    1c12:	ldr.w	r8, [r3, #52]	; 0x34
    1c16:	cmp	r8, r4
    1c18:	bne.w	1d70 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1f4>
    1c1c:	ldr.w	lr, [lr, #16]
    1c20:	cmp.w	lr, #0
    1c24:	beq.n	1c90 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x114>
    1c26:	ldr.w	r3, [lr]
    1c2a:	ldr.w	r8, [r3, #52]	; 0x34
    1c2e:	cmp	r8, r4
    1c30:	bne.w	1d70 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1f4>
    1c34:	ldr.w	lr, [lr, #16]
    1c38:	cmp.w	lr, #0
    1c3c:	beq.n	1c90 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x114>
    1c3e:	ldr.w	r3, [lr]
    1c42:	ldr.w	r8, [r3, #52]	; 0x34
    1c46:	cmp	r8, r4
    1c48:	bne.w	1d70 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1f4>
    1c4c:	ldr.w	lr, [lr, #16]
    1c50:	cmp.w	lr, #0
    1c54:	beq.n	1c90 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x114>
    1c56:	ldr.w	r3, [lr]
    1c5a:	ldr.w	r8, [r3, #52]	; 0x34
    1c5e:	cmp	r8, r4
    1c60:	bne.w	1d70 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1f4>
    1c64:	ldr.w	lr, [lr, #16]
    1c68:	cmp.w	lr, #0
    1c6c:	beq.n	1c90 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x114>
    1c6e:	ldr.w	r3, [lr]
    1c72:	ldr.w	r8, [r3, #52]	; 0x34
    1c76:	cmp	r8, r4
    1c78:	bne.n	1d70 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1f4>
    1c7a:	ldr.w	r4, [lr, #16]
    1c7e:	cbz	r4, 1c90 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x114>
    1c80:	ldr	r1, [r4, #0]
    1c82:	str.w	ip, [sp]
    1c86:	mov	r3, ip
    1c88:	mov	r0, r4
    1c8a:	ldr	r1, [r1, #52]	; 0x34
    1c8c:	blx	r1
    1c8e:	b.n	1d3e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1c2>
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    1c90:	ldr	r4, [r7, #40]	; 0x28
    1c92:	ldr	r3, [pc, #236]	; (1d80 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x204>)
    1c94:	cmp	r4, r3
    1c96:	bne.n	1d28 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ac>
    1c98:	mov	r0, r1
    1c9a:	ldr	r2, [r0, #0]
    1c9c:	ldr	r4, [r2, #40]	; 0x28
    1c9e:	cmp	r4, r3
    1ca0:	bne.n	1d28 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ac>
    1ca2:	ldr	r0, [r0, #16]
    1ca4:	cmp	r0, #0
    1ca6:	beq.n	1d06 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18a>
    1ca8:	ldr	r2, [r0, #0]
    1caa:	ldr	r4, [r2, #40]	; 0x28
    1cac:	cmp	r4, r3
    1cae:	bne.n	1d28 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ac>
    1cb0:	ldr	r0, [r0, #16]
    1cb2:	cbz	r0, 1d06 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18a>
    1cb4:	ldr	r2, [r0, #0]
    1cb6:	ldr	r4, [r2, #40]	; 0x28
    1cb8:	cmp	r4, r3
    1cba:	bne.n	1d28 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ac>
    1cbc:	ldr	r0, [r0, #16]
    1cbe:	cbz	r0, 1d06 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18a>
    1cc0:	ldr	r2, [r0, #0]
    1cc2:	ldr	r4, [r2, #40]	; 0x28
    1cc4:	cmp	r4, r3
    1cc6:	bne.n	1d28 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ac>
    1cc8:	ldr	r0, [r0, #16]
    1cca:	cbz	r0, 1d06 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18a>
    1ccc:	ldr	r2, [r0, #0]
    1cce:	ldr	r4, [r2, #40]	; 0x28
    1cd0:	cmp	r4, r3
    1cd2:	bne.n	1d28 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ac>
    1cd4:	ldr	r0, [r0, #16]
    1cd6:	cbz	r0, 1d06 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18a>
    1cd8:	ldr	r2, [r0, #0]
    1cda:	ldr	r4, [r2, #40]	; 0x28
    1cdc:	cmp	r4, r3
    1cde:	bne.n	1d28 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ac>
    1ce0:	ldr	r0, [r0, #16]
    1ce2:	cbz	r0, 1d06 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18a>
    1ce4:	ldr	r2, [r0, #0]
    1ce6:	ldr	r4, [r2, #40]	; 0x28
    1ce8:	cmp	r4, r3
    1cea:	bne.n	1d28 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ac>
    1cec:	ldr	r0, [r0, #16]
    1cee:	cbz	r0, 1d06 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18a>
    1cf0:	ldr	r2, [r0, #0]
    1cf2:	ldr	r4, [r2, #40]	; 0x28
    1cf4:	cmp	r4, r3
    1cf6:	bne.n	1d28 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ac>
    1cf8:	ldr	r0, [r0, #16]
    1cfa:	cbz	r0, 1d06 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18a>
    1cfc:	ldr	r3, [r0, #0]
    1cfe:	movs	r2, #80	; 0x50
    1d00:	ldr	r3, [r3, #40]	; 0x28
    1d02:	mov	r1, r6
    1d04:	blx	r3
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);

    return ret;
  }
    1d06:	mov	r0, r6
    1d08:	add	sp, #8
    1d0a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    Record ret;
    memset(&ret, 0, sizeof(ret));
    if (i > index_entries_) 
    { memset(&ret, 0, sizeof(ret));
    1d0e:	movs	r2, #80	; 0x50
    1d10:	movs	r1, #0
    1d12:	mov	r0, r6
    1d14:	bl	df8c <memset>
    index_.seek(sizeof(ret) * i);
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);

    return ret;
  }
    1d18:	mov	r0, r6
    1d1a:	add	sp, #8
    1d1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1d20:	ldr	r4, [r7, #40]	; 0x28
    1d22:	ldr	r3, [pc, #92]	; (1d80 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x204>)
    1d24:	cmp	r4, r3
    1d26:	beq.n	1d06 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18a>
    1d28:	movs	r2, #80	; 0x50
    1d2a:	mov	r1, r6
    1d2c:	blx	r4
    1d2e:	mov	r0, r6
    1d30:	add	sp, #8
    1d32:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    1d36:	str.w	ip, [sp]
    1d3a:	mov	r3, ip
    1d3c:	blx	r1
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    1d3e:	ldr.w	r0, [r5, #184]	; 0xb8
    1d42:	cmp	r0, #0
    1d44:	beq.n	1d06 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18a>
    1d46:	ldr	r2, [r0, #0]
    1d48:	ldr	r3, [pc, #52]	; (1d80 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x204>)
    1d4a:	ldr	r4, [r2, #40]	; 0x28
    1d4c:	cmp	r4, r3
    1d4e:	bne.n	1d28 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ac>
    1d50:	ldr	r0, [r0, #16]
    1d52:	cmp	r0, #0
    1d54:	bne.n	1c9a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x11e>
    1d56:	b.n	1d06 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18a>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    1d58:	str.w	ip, [sp]
    1d5c:	mov	r3, ip
    1d5e:	mov	r0, lr
    1d60:	blx	r8
    1d62:	b.n	1d3e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1c2>
    1d64:	str.w	ip, [sp]
    1d68:	mov	r3, ip
    1d6a:	mov	r0, r1
    1d6c:	blx	r8
    1d6e:	b.n	1d3e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1c2>
    1d70:	movs	r3, #0
    1d72:	mov	r0, lr
    1d74:	str	r3, [sp, #0]
    1d76:	blx	r8
    1d78:	b.n	1d3e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1c2>
    1d7a:	nop
    1d7c:	.word	0x000004c9
    1d80:	.word	0x0000047d

00001d84 <MTPStorage_SD::GetNextObjectHandle(unsigned long)>:
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  storage)
  {
    1d84:	push	{r4, r5, lr}
    while (true) 
    { if (next_ == 0) return 0;
    1d86:	ldr.w	r5, [r0, #252]	; 0xfc
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  storage)
  {
    1d8a:	sub	sp, #84	; 0x54
    1d8c:	mov	r4, r0
    while (true) 
    { if (next_ == 0) return 0;
    1d8e:	cbnz	r5, 1da4 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x20>
    1d90:	b.n	1dda <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x56>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
    1d92:	ldr	r3, [sp, #8]
    1d94:	str.w	r3, [r4, #252]	; 0xfc
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    1d98:	ldrb.w	r3, [sp, #16]
    1d9c:	cbnz	r3, 1dd4 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x50>
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  storage)
  {
    while (true) 
    { if (next_ == 0) return 0;
    1d9e:	ldr.w	r5, [r4, #252]	; 0xfc
    1da2:	cbz	r5, 1dda <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x56>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
    1da4:	mov	r2, r5
    1da6:	mov	r1, r4
    1da8:	mov	r0, sp
    1daa:	bl	1b7c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    1dae:	ldrb.w	r2, [r4, #256]	; 0x100
    1db2:	cmp	r2, #0
    1db4:	bne.n	1d92 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0xe>
      { next_ = r.sibling;
      } 
      else 
      { next_++;
    1db6:	ldr.w	r3, [r4, #252]	; 0xfc
        if (next_ >= index_entries_) next_ = 0;
    1dba:	ldr.w	r1, [r4, #244]	; 0xf4
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
      } 
      else 
      { next_++;
    1dbe:	adds	r3, #1
    1dc0:	str.w	r3, [r4, #252]	; 0xfc
        if (next_ >= index_entries_) next_ = 0;
    1dc4:	cmp	r3, r1
      }
      if (r.name[0]) return ret;
    1dc6:	ldrb.w	r3, [sp, #16]
      if (follow_sibling_) 
      { next_ = r.sibling;
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
    1dca:	it	cs
    1dcc:	strcs.w	r2, [r4, #252]	; 0xfc
      }
      if (r.name[0]) return ret;
    1dd0:	cmp	r3, #0
    1dd2:	beq.n	1d9e <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x1a>
    }
  }
    1dd4:	mov	r0, r5
    1dd6:	add	sp, #84	; 0x54
    1dd8:	pop	{r4, r5, pc}
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  storage)
  {
    while (true) 
    { if (next_ == 0) return 0;
    1dda:	movs	r5, #0
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    }
  }
    1ddc:	mov	r0, r5
    1dde:	add	sp, #84	; 0x54
    1de0:	pop	{r4, r5, pc}
    1de2:	nop

00001de4 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)>:

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    1de4:	push	{r4, r5, r6, r7, lr}
    1de6:	sub	sp, #84	; 0x54
    1de8:	mov	r7, r2
    Record r = ReadIndexRecord(handle);
    1dea:	mov	r2, r1
    1dec:	mov	r1, r0
    1dee:	mov	r0, sp
      if (r.name[0]) return ret;
    }
  }

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    1df0:	mov	r5, r3
    1df2:	ldr	r6, [sp, #104]	; 0x68
    1df4:	ldr	r4, [sp, #108]	; 0x6c
    Record r = ReadIndexRecord(handle);
    1df6:	bl	1b7c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    1dfa:	mov	r0, r7
    1dfc:	add	r1, sp, #16
    1dfe:	bl	e4c0 <strcpy>
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    1e02:	ldrb.w	r3, [sp, #12]

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    1e06:	ldr	r2, [sp, #0]
    1e08:	str	r2, [r6, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    1e0a:	cbnz	r3, 1e1a <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x36>
    1e0c:	ldr	r3, [sp, #4]
    *store = r.store;
    1e0e:	ldrh.w	r2, [sp, #14]
  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    1e12:	str	r3, [r5, #0]
    *store = r.store;
    1e14:	strh	r2, [r4, #0]
  }
    1e16:	add	sp, #84	; 0x54
    1e18:	pop	{r4, r5, r6, r7, pc}
  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    1e1a:	mov.w	r3, #4294967295
    1e1e:	b.n	1e0e <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x2a>

00001e20 <MTPStorage_SD::GetSize(unsigned long)>:
    *store = r.store;
  }

  uint32_t MTPStorage_SD::GetSize(uint32_t handle) 
  {
    1e20:	push	{lr}
    1e22:	sub	sp, #84	; 0x54
    return ReadIndexRecord(handle).child;
    1e24:	mov	r2, r1
    1e26:	mov	r1, r0
    1e28:	mov	r0, sp
    1e2a:	bl	1b7c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    1e2e:	ldr	r0, [sp, #4]
    1e30:	add	sp, #84	; 0x54
    1e32:	ldr.w	pc, [sp], #4
    1e36:	nop

00001e38 <MTPStorage_SD::close()>:
      file_.write(data,bytes);
      mtp_lock_storage(false);
  }

  void MTPStorage_SD::close() 
  {
    1e38:	push	{r4, r5, r6, lr}
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    1e3a:	ldr.w	r3, [r0, #204]	; 0xcc
    1e3e:	sub	sp, #80	; 0x50
    1e40:	mov	r4, r0
    1e42:	cmp	r3, #0
    1e44:	beq.n	1ee0 <MTPStorage_SD::close()+0xa8>
    1e46:	ldr	r5, [r3, #0]
    1e48:	ldr	r1, [pc, #384]	; (1fcc <MTPStorage_SD::close()+0x194>)
    1e4a:	ldr	r2, [r5, #60]	; 0x3c
    1e4c:	cmp	r2, r1
    1e4e:	bne.w	1fc0 <MTPStorage_SD::close()+0x188>
    1e52:	ldr	r2, [r3, #16]
    1e54:	cmp	r2, #0
    1e56:	beq.w	1fb0 <MTPStorage_SD::close()+0x178>
    1e5a:	ldr	r0, [r2, #0]
    1e5c:	ldr	r6, [r0, #60]	; 0x3c
    1e5e:	cmp	r6, r1
    1e60:	bne.n	1f08 <MTPStorage_SD::close()+0xd0>
    1e62:	ldr	r0, [r2, #16]
    1e64:	cmp	r0, #0
    1e66:	beq.n	1ed2 <MTPStorage_SD::close()+0x9a>
    1e68:	ldr	r6, [r0, #0]
    1e6a:	ldr	r6, [r6, #60]	; 0x3c
    1e6c:	cmp	r6, r1
    1e6e:	bne.n	1f0a <MTPStorage_SD::close()+0xd2>
    1e70:	ldr	r0, [r0, #16]
    1e72:	cmp	r0, #0
    1e74:	beq.n	1ed2 <MTPStorage_SD::close()+0x9a>
    1e76:	ldr	r6, [r0, #0]
    1e78:	ldr	r6, [r6, #60]	; 0x3c
    1e7a:	cmp	r6, r1
    1e7c:	bne.n	1f0a <MTPStorage_SD::close()+0xd2>
    1e7e:	ldr	r0, [r0, #16]
    1e80:	cbz	r0, 1ed2 <MTPStorage_SD::close()+0x9a>
    1e82:	ldr	r6, [r0, #0]
    1e84:	ldr	r6, [r6, #60]	; 0x3c
    1e86:	cmp	r6, r1
    1e88:	bne.n	1f0a <MTPStorage_SD::close()+0xd2>
    1e8a:	ldr	r0, [r0, #16]
    1e8c:	cbz	r0, 1ed2 <MTPStorage_SD::close()+0x9a>
    1e8e:	ldr	r6, [r0, #0]
    1e90:	ldr	r6, [r6, #60]	; 0x3c
    1e92:	cmp	r6, r1
    1e94:	bne.n	1f0a <MTPStorage_SD::close()+0xd2>
    1e96:	ldr	r0, [r0, #16]
    1e98:	cbz	r0, 1ed2 <MTPStorage_SD::close()+0x9a>
    1e9a:	ldr	r6, [r0, #0]
    1e9c:	ldr	r6, [r6, #60]	; 0x3c
    1e9e:	cmp	r6, r1
    1ea0:	bne.n	1f0a <MTPStorage_SD::close()+0xd2>
    1ea2:	ldr	r0, [r0, #16]
    1ea4:	cbz	r0, 1ed2 <MTPStorage_SD::close()+0x9a>
    1ea6:	ldr	r6, [r0, #0]
    1ea8:	ldr	r6, [r6, #60]	; 0x3c
    1eaa:	cmp	r6, r1
    1eac:	bne.n	1f0a <MTPStorage_SD::close()+0xd2>
    1eae:	ldr	r0, [r0, #16]
    1eb0:	cbz	r0, 1ed2 <MTPStorage_SD::close()+0x9a>
    1eb2:	ldr	r6, [r0, #0]
    1eb4:	ldr	r6, [r6, #60]	; 0x3c
    1eb6:	cmp	r6, r1
    1eb8:	bne.n	1f0a <MTPStorage_SD::close()+0xd2>
    1eba:	ldr	r0, [r0, #16]
    1ebc:	cbz	r0, 1ed2 <MTPStorage_SD::close()+0x9a>
    1ebe:	ldr	r6, [r0, #0]
    1ec0:	ldr	r6, [r6, #60]	; 0x3c
    1ec2:	cmp	r6, r1
    1ec4:	bne.n	1f0a <MTPStorage_SD::close()+0xd2>
    1ec6:	ldr	r0, [r0, #16]
    1ec8:	cbz	r0, 1ed2 <MTPStorage_SD::close()+0x9a>
    1eca:	ldr	r3, [r0, #0]
    1ecc:	ldr	r3, [r3, #60]	; 0x3c
    1ece:	blx	r3
    1ed0:	b.n	1f0c <MTPStorage_SD::close()+0xd4>
	}
	virtual void close() {
		if (f) f->close();
    1ed2:	ldr	r6, [r5, #64]	; 0x40
    1ed4:	ldr	r1, [pc, #248]	; (1fd0 <MTPStorage_SD::close()+0x198>)
    1ed6:	cmp	r6, r1
    1ed8:	bne.n	1fc6 <MTPStorage_SD::close()+0x18e>
    1eda:	mov	r0, r2
    1edc:	movs	r5, #0
    1ede:	b.n	1f26 <MTPStorage_SD::close()+0xee>
    mtp_lock_storage(true);
    uint32_t size = (uint32_t) file_.size();
    1ee0:	mov	r5, r3
    file_.close();
    mtp_lock_storage(false);
    Record r = ReadIndexRecord(open_file_);
    1ee2:	mov	r0, sp
    1ee4:	ldr.w	r2, [r4, #240]	; 0xf0
    1ee8:	mov	r1, r4
    1eea:	bl	1b7c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    r.child = size;
    WriteIndexRecord(open_file_, r);
    1eee:	mov	r2, sp
    1ef0:	ldr.w	r1, [r4, #240]	; 0xf0
    mtp_lock_storage(true);
    uint32_t size = (uint32_t) file_.size();
    file_.close();
    mtp_lock_storage(false);
    Record r = ReadIndexRecord(open_file_);
    r.child = size;
    1ef4:	str	r5, [sp, #4]
    WriteIndexRecord(open_file_, r);
    1ef6:	mov	r0, r4
    1ef8:	bl	19b4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    1efc:	mvn.w	r3, #1
    1f00:	str.w	r3, [r4, #240]	; 0xf0
  }
    1f04:	add	sp, #80	; 0x50
    1f06:	pop	{r4, r5, r6, pc}
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    1f08:	mov	r0, r2
    1f0a:	blx	r6
	}
	virtual void close() {
		if (f) f->close();
    1f0c:	ldr.w	r3, [r4, #204]	; 0xcc
  }

  void MTPStorage_SD::close() 
  {
    mtp_lock_storage(true);
    uint32_t size = (uint32_t) file_.size();
    1f10:	mov	r5, r0
    1f12:	cmp	r3, #0
    1f14:	beq.n	1ee2 <MTPStorage_SD::close()+0xaa>
    1f16:	ldr	r2, [r3, #0]
    1f18:	ldr	r1, [pc, #180]	; (1fd0 <MTPStorage_SD::close()+0x198>)
    1f1a:	ldr	r6, [r2, #64]	; 0x40
    1f1c:	cmp	r6, r1
    1f1e:	bne.n	1fba <MTPStorage_SD::close()+0x182>
    1f20:	ldr	r0, [r3, #16]
    1f22:	cmp	r0, #0
    1f24:	beq.n	1ee2 <MTPStorage_SD::close()+0xaa>
    1f26:	ldr	r3, [r0, #0]
    1f28:	ldr	r3, [r3, #64]	; 0x40
    1f2a:	cmp	r3, r1
    1f2c:	bne.n	1fac <MTPStorage_SD::close()+0x174>
    1f2e:	ldr	r0, [r0, #16]
    1f30:	cmp	r0, #0
    1f32:	beq.n	1ee2 <MTPStorage_SD::close()+0xaa>
    1f34:	ldr	r3, [r0, #0]
    1f36:	ldr	r3, [r3, #64]	; 0x40
    1f38:	cmp	r3, r1
    1f3a:	bne.n	1fac <MTPStorage_SD::close()+0x174>
    1f3c:	ldr	r0, [r0, #16]
    1f3e:	cmp	r0, #0
    1f40:	beq.n	1ee2 <MTPStorage_SD::close()+0xaa>
    1f42:	ldr	r3, [r0, #0]
    1f44:	ldr	r3, [r3, #64]	; 0x40
    1f46:	cmp	r3, r1
    1f48:	bne.n	1fac <MTPStorage_SD::close()+0x174>
    1f4a:	ldr	r0, [r0, #16]
    1f4c:	cmp	r0, #0
    1f4e:	beq.n	1ee2 <MTPStorage_SD::close()+0xaa>
    1f50:	ldr	r3, [r0, #0]
    1f52:	ldr	r3, [r3, #64]	; 0x40
    1f54:	cmp	r3, r1
    1f56:	bne.n	1fac <MTPStorage_SD::close()+0x174>
    1f58:	ldr	r0, [r0, #16]
    1f5a:	cmp	r0, #0
    1f5c:	beq.n	1ee2 <MTPStorage_SD::close()+0xaa>
    1f5e:	ldr	r3, [r0, #0]
    1f60:	ldr	r3, [r3, #64]	; 0x40
    1f62:	cmp	r3, r1
    1f64:	bne.n	1fac <MTPStorage_SD::close()+0x174>
    1f66:	ldr	r0, [r0, #16]
    1f68:	cmp	r0, #0
    1f6a:	beq.n	1ee2 <MTPStorage_SD::close()+0xaa>
    1f6c:	ldr	r3, [r0, #0]
    1f6e:	ldr	r3, [r3, #64]	; 0x40
    1f70:	cmp	r3, r1
    1f72:	bne.n	1fac <MTPStorage_SD::close()+0x174>
    1f74:	ldr	r0, [r0, #16]
    1f76:	cmp	r0, #0
    1f78:	beq.n	1ee2 <MTPStorage_SD::close()+0xaa>
    1f7a:	ldr	r3, [r0, #0]
    1f7c:	ldr	r3, [r3, #64]	; 0x40
    1f7e:	cmp	r3, r1
    1f80:	bne.n	1fac <MTPStorage_SD::close()+0x174>
    1f82:	ldr	r0, [r0, #16]
    1f84:	cmp	r0, #0
    1f86:	beq.n	1ee2 <MTPStorage_SD::close()+0xaa>
    1f88:	ldr	r3, [r0, #0]
    1f8a:	ldr	r3, [r3, #64]	; 0x40
    1f8c:	cmp	r3, r1
    1f8e:	bne.n	1fac <MTPStorage_SD::close()+0x174>
    1f90:	ldr	r0, [r0, #16]
    1f92:	cmp	r0, #0
    1f94:	beq.n	1ee2 <MTPStorage_SD::close()+0xaa>
    1f96:	ldr	r3, [r0, #0]
    1f98:	ldr	r3, [r3, #64]	; 0x40
    1f9a:	cmp	r3, r1
    1f9c:	bne.n	1fac <MTPStorage_SD::close()+0x174>
    1f9e:	ldr	r0, [r0, #16]
    1fa0:	cmp	r0, #0
    1fa2:	beq.n	1ee2 <MTPStorage_SD::close()+0xaa>
    1fa4:	ldr	r3, [r0, #0]
    1fa6:	ldr	r3, [r3, #64]	; 0x40
    1fa8:	blx	r3
    1faa:	b.n	1ee2 <MTPStorage_SD::close()+0xaa>
    1fac:	blx	r3
    1fae:	b.n	1ee2 <MTPStorage_SD::close()+0xaa>
    1fb0:	ldr	r6, [r5, #64]	; 0x40
    1fb2:	ldr	r1, [pc, #28]	; (1fd0 <MTPStorage_SD::close()+0x198>)
    1fb4:	cmp	r6, r1
    1fb6:	mov	r5, r2
    1fb8:	beq.n	1ee2 <MTPStorage_SD::close()+0xaa>
    1fba:	mov	r0, r3
    1fbc:	blx	r6
    1fbe:	b.n	1ee2 <MTPStorage_SD::close()+0xaa>
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    1fc0:	mov	r0, r3
    1fc2:	blx	r2
    1fc4:	b.n	1f0c <MTPStorage_SD::close()+0xd4>
	}
	virtual void close() {
		if (f) f->close();
    1fc6:	movs	r5, #0
    1fc8:	b.n	1fba <MTPStorage_SD::close()+0x182>
    1fca:	nop
    1fcc:	.word	0x000004f1
    1fd0:	.word	0x00000501

00001fd4 <MTPStorage_SD::ConstructFilename(int, char*, int)>:

    return ret;
  }

  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    1fd4:	push	{r4, r5, r6, r7, lr}
    1fd6:	mov	r4, r1
    1fd8:	sub	sp, #84	; 0x54
    Record tmp = ReadIndexRecord(i);
    1fda:	mov	r1, r0

    return ret;
  }

  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    1fdc:	mov	r6, r0
    1fde:	mov	r5, r2
    Record tmp = ReadIndexRecord(i);
    1fe0:	mov	r0, sp
    1fe2:	mov	r2, r4

    return ret;
  }

  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    1fe4:	mov	r7, r3
    Record tmp = ReadIndexRecord(i);
    1fe6:	bl	1b7c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      
    if (tmp.parent==(unsigned)i) 
    1fea:	ldr	r1, [sp, #0]
    1fec:	cmp	r4, r1
    1fee:	beq.n	2034 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x60>
    { strcpy(out, "/");
      return tmp.store;
    }
    else 
    { ConstructFilename(tmp.parent, out, len);
    1ff0:	mov	r3, r7
    1ff2:	mov	r2, r5
    1ff4:	mov	r0, r6
    1ff6:	bl	1fd4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strcat(out, "/");
    1ffa:	mov	r0, r5
    1ffc:	bl	e580 <strlen>
    2000:	adds	r3, r5, r0
    2002:	mov	r4, r0
    2004:	ldrb.w	r3, [r3, #-1]
    2008:	cmp	r3, #47	; 0x2f
    200a:	beq.n	2014 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x40>
    200c:	ldr	r3, [pc, #52]	; (2044 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x70>)
    200e:	ldrh	r3, [r3, #0]
    2010:	strh	r3, [r5, r0]
    2012:	adds	r4, #1
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
    2014:	add	r0, sp, #16
    2016:	bl	e580 <strlen>
    201a:	add	r0, r4
    201c:	adds	r0, #1
    201e:	cmp	r0, r7
    2020:	bcc.n	202a <MTPStorage_SD::ConstructFilename(int, char*, int)+0x56>
      return tmp.store;
    2022:	ldrh.w	r0, [sp, #14]
    }
  }
    2026:	add	sp, #84	; 0x54
    2028:	pop	{r4, r5, r6, r7, pc}
      return tmp.store;
    }
    else 
    { ConstructFilename(tmp.parent, out, len);
      if (out[strlen(out)-1] != '/') strcat(out, "/");
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
    202a:	add	r1, sp, #16
    202c:	mov	r0, r5
    202e:	bl	e480 <strcat>
    2032:	b.n	2022 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x4e>
  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    Record tmp = ReadIndexRecord(i);
      
    if (tmp.parent==(unsigned)i) 
    { strcpy(out, "/");
    2034:	ldr	r3, [pc, #12]	; (2044 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x70>)
      return tmp.store;
    2036:	ldrh.w	r0, [sp, #14]
  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    Record tmp = ReadIndexRecord(i);
      
    if (tmp.parent==(unsigned)i) 
    { strcpy(out, "/");
    203a:	ldrh	r3, [r3, #0]
    203c:	strh	r3, [r5, #0]
    { ConstructFilename(tmp.parent, out, len);
      if (out[strlen(out)-1] != '/') strcat(out, "/");
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
      return tmp.store;
    }
  }
    203e:	add	sp, #84	; 0x54
    2040:	pop	{r4, r5, r6, r7, pc}
    2042:	nop
    2044:	.word	0x00011bb4

00002048 <MTPStorage_SD::rename(unsigned long, char const*)>:
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  bool MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[256];
    2048:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    204c:	sub.w	sp, sp, #660	; 0x294
    char newName[256];
    char temp[64];

    uint16_t store = ConstructFilename(handle, oldName, 256);
    2050:	mov.w	r3, #256	; 0x100
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  bool MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[256];
    2054:	mov	r9, r2
    char newName[256];
    char temp[64];

    uint16_t store = ConstructFilename(handle, oldName, 256);
    2056:	add	r2, sp, #144	; 0x90
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  bool MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[256];
    2058:	mov	r5, r1
    205a:	mov	r4, r0
    char newName[256];
    char temp[64];

    uint16_t store = ConstructFilename(handle, oldName, 256);
    205c:	bl	1fd4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    2060:	mov	r6, r0
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2062:	add	r0, sp, #144	; 0x90
    2064:	bl	e580 <strlen>
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2068:	mov	r1, r0
    206a:	add	r0, sp, #144	; 0x90
    206c:	bl	b2e0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2070:	ldr	r0, [pc, #132]	; (20f8 <MTPStorage_SD::rename(unsigned long, char const*)+0xb0>)
    2072:	bl	c7f8 <Print::println()>
    Serial.println(oldName);

    Record p1 = ReadIndexRecord(handle);
    2076:	mov	r2, r5
    2078:	mov	r1, r4
    207a:	add	r0, sp, #64	; 0x40
    207c:	bl	1b7c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(temp,p1.name);
    2080:	add	r1, sp, #80	; 0x50
    2082:	mov	r0, sp
    2084:	bl	e434 <stpcpy>
    strcpy(p1.name,name);
    2088:	mov	r1, r9

    uint16_t store = ConstructFilename(handle, oldName, 256);
    Serial.println(oldName);

    Record p1 = ReadIndexRecord(handle);
    strcpy(temp,p1.name);
    208a:	mov	r8, r0
    strcpy(p1.name,name);
    208c:	add	r0, sp, #80	; 0x50
    208e:	bl	e4c0 <strcpy>

    WriteIndexRecord(handle, p1);
    2092:	add	r2, sp, #64	; 0x40
    2094:	mov	r1, r5
    2096:	mov	r0, r4
    2098:	bl	19b4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, 256);
    209c:	add	r2, sp, #400	; 0x190
    209e:	mov.w	r3, #256	; 0x100
    20a2:	mov	r1, r5
    20a4:	mov	r0, r4
    20a6:	bl	1fd4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    20aa:	add	r0, sp, #400	; 0x190
    20ac:	bl	e580 <strlen>
    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t storage) { return sd_name[storage-1];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    20b0:	add.w	r6, r4, r6, lsl #2
    20b4:	mov	r1, r0
    20b6:	add	r0, sp, #400	; 0x190
    20b8:	bl	b2e0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    20bc:	ldr	r0, [pc, #56]	; (20f8 <MTPStorage_SD::rename(unsigned long, char const*)+0xb0>)
    20be:	bl	c7f8 <Print::println()>
    20c2:	ldr	r0, [r6, #88]	; 0x58
    20c4:	ldr	r3, [r0, #0]
    20c6:	add	r2, sp, #400	; 0x190
    20c8:	add	r1, sp, #144	; 0x90
    20ca:	ldr	r3, [r3, #12]
    20cc:	blx	r3
    Serial.println(newName);

    if (sd_rename(store,oldName,newName)) return true;
    20ce:	mov	r6, r0
    20d0:	cbnz	r0, 20ec <MTPStorage_SD::rename(unsigned long, char const*)+0xa4>
    20d2:	mov	r7, sp

    // rename failed; undo index update
    strcpy(p1.name,temp);
    20d4:	rsb	r2, r7, r8
    20d8:	adds	r2, #1
    20da:	mov	r1, sp
    20dc:	add	r0, sp, #80	; 0x50
    20de:	bl	b0e0 <memcpy>
    WriteIndexRecord(handle, p1);
    20e2:	add	r2, sp, #64	; 0x40
    20e4:	mov	r1, r5
    20e6:	mov	r0, r4
    20e8:	bl	19b4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
  }
    20ec:	mov	r0, r6
    20ee:	add.w	sp, sp, #660	; 0x294
    20f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    20f6:	nop
    20f8:	.word	0x1fff09d0

000020fc <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)>:
 * save p2
 * 
 */

  bool MTPStorage_SD::move(uint32_t handle,uint32_t storage, uint32_t newParent ) 
  { 
    20fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2100:	subw	sp, sp, #3252	; 0xcb4
    2104:	mov	r4, r0
    2106:	mov	r5, r1
    2108:	mov	r8, r2
    210a:	mov	r7, r3
    #if DEBUG==1
      Serial.printf("%d -> %d %d\n",handle,storage,newParent);
    #endif
    Record p1 = ReadIndexRecord(handle); 
    210c:	mov	r2, r1
    210e:	mov	r1, r0
    2110:	add	r0, sp, #128	; 0x80
    2112:	bl	1b7c <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    uint32_t oldParent = p1.parent;
    2116:	ldr	r6, [sp, #128]	; 0x80
    if(newParent<=0) newParent=(storage-1); //storage runs from 1, while record.store runs from 0
    2118:	cbnz	r7, 211e <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x22>
    211a:	add.w	r7, r8, #4294967295
    //Serial.printf("%d -> %d %d\n",handle,storage,newParent);

    Record p2 = ReadIndexRecord(newParent);
    211e:	add	r0, sp, #208	; 0xd0
    2120:	mov	r2, r7
    2122:	mov	r1, r4
    2124:	bl	1b7c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p3 = ReadIndexRecord(oldParent); 
    2128:	add	r0, sp, #288	; 0x120
    212a:	mov	r2, r6
    212c:	mov	r1, r4
    212e:	bl	1b7c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    // keep original storages
    Record p1o = p1;
    2132:	movs	r2, #80	; 0x50
    2134:	add	r1, sp, #128	; 0x80
    2136:	add	r0, sp, #368	; 0x170
    2138:	bl	b0e0 <memcpy>
    Record p2o = p2;
    213c:	movs	r2, #80	; 0x50
    213e:	add	r1, sp, #208	; 0xd0
    2140:	add	r0, sp, #448	; 0x1c0
    2142:	bl	b0e0 <memcpy>
    Record p3o = p3;

    #define DISK2DISK_MOVE 0 //set to 1 after disk to disk move is proven to work
    #if DISK_2DISK_MOVE==0
      if(p1.store != p2.store) 
    2146:	ldrh.w	r3, [sp, #222]	; 0xde
    214a:	ldrh.w	r2, [sp, #142]	; 0x8e
    214e:	cmp	r2, r3
    2150:	beq.n	216e <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x72>
    2152:	movs	r1, #35	; 0x23
    2154:	ldr	r0, [pc, #88]	; (21b0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xb4>)
    2156:	bl	b2e0 <usb_serial_write>
    215a:	ldr	r0, [pc, #88]	; (21b4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xb8>)
    215c:	bl	c7f8 <Print::println()>
      { Serial.println(" Disk to Disk move is not supported"); return false; }
    2160:	mov.w	r8, #0
        WriteIndexRecord(newParent,p2o);      
        return false;
      }
    }
    return false;
  }
    2164:	mov	r0, r8
    2166:	addw	sp, sp, #3252	; 0xcb4
    216a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(p1.store != p2.store) 
      { Serial.println(" Disk to Disk move is not supported"); return false; }
    #endif

    char oldName[256];
    uint16_t store0 = ConstructFilename(handle, oldName, 256);
    216e:	add	r2, sp, #688	; 0x2b0
    2170:	mov.w	r3, #256	; 0x100
    2174:	mov	r1, r5
    2176:	mov	r0, r4
    2178:	bl	1fd4 <MTPStorage_SD::ConstructFilename(int, char*, int)>

    // remove from old direcory
    uint32_t jx=-1;
    Record px;
    Record pxo;
    if(p3.child==handle)
    217c:	ldr.w	r8, [sp, #292]	; 0x124
    2180:	cmp	r5, r8
      if(p1.store != p2.store) 
      { Serial.println(" Disk to Disk move is not supported"); return false; }
    #endif

    char oldName[256];
    uint16_t store0 = ConstructFilename(handle, oldName, 256);
    2182:	mov	sl, r0

    // remove from old direcory
    uint32_t jx=-1;
    Record px;
    Record pxo;
    if(p3.child==handle)
    2184:	beq.w	26e0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5e4>
      p3.child = p1.sibling;
      WriteIndexRecord(oldParent, p3);    
    }
    else
    { jx = p3.child;
      px = ReadIndexRecord(jx); 
    2188:	add	r0, sp, #8
    218a:	mov	r2, r8
    218c:	mov	r1, r4
    218e:	bl	1b7c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    2192:	add	r1, sp, #8
    2194:	movs	r2, #80	; 0x50
    2196:	add	r0, sp, #528	; 0x210
    2198:	bl	b0e0 <memcpy>
      pxo = px;
    219c:	add	r1, sp, #528	; 0x210
    219e:	add	r0, sp, #608	; 0x260
    21a0:	movs	r2, #80	; 0x50
    21a2:	bl	b0e0 <memcpy>
      while(handle != px.sibling)
    21a6:	ldr	r6, [sp, #536]	; 0x218
    21a8:	cmp	r5, r6
    21aa:	bne.n	21ba <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xbe>
    21ac:	b.n	282c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x730>
    21ae:	nop
    21b0:	.word	0x00011bb8
    21b4:	.word	0x1fff09d0
    21b8:	mov	r6, r3
      {
        jx = px.sibling;
        px = ReadIndexRecord(jx); 
    21ba:	mov	r2, r6
    21bc:	mov	r1, r4
    21be:	add	r0, sp, #8
    21c0:	bl	1b7c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    21c4:	movs	r2, #80	; 0x50
    21c6:	add	r1, sp, #8
    21c8:	add	r0, sp, #528	; 0x210
    21ca:	bl	b0e0 <memcpy>
        pxo = px;
    21ce:	movs	r2, #80	; 0x50
    21d0:	add	r1, sp, #528	; 0x210
    21d2:	add	r0, sp, #608	; 0x260
    21d4:	bl	b0e0 <memcpy>
    }
    else
    { jx = p3.child;
      px = ReadIndexRecord(jx); 
      pxo = px;
      while(handle != px.sibling)
    21d8:	ldr	r3, [sp, #536]	; 0x218
    21da:	cmp	r5, r3
    21dc:	bne.n	21b8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xbc>
      {
        jx = px.sibling;
        px = ReadIndexRecord(jx); 
        pxo = px;
      }
      px.sibling = p1.sibling;
    21de:	ldr	r3, [sp, #136]	; 0x88
    21e0:	str	r3, [sp, #536]	; 0x218
      WriteIndexRecord(jx, px);
    21e2:	add	r2, sp, #528	; 0x210
    21e4:	mov	r1, r6
    21e6:	mov	r0, r4
    21e8:	bl	19b4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    }
  
    // add to new directory
    p1.parent = newParent;
    p1.store = p2.store;
    p1.sibling = p2.child;
    21ec:	ldr	r3, [sp, #212]	; 0xd4
      WriteIndexRecord(jx, px);
    }
  
    // add to new directory
    p1.parent = newParent;
    p1.store = p2.store;
    21ee:	ldrh.w	lr, [sp, #222]	; 0xde
    21f2:	strh.w	lr, [sp, #142]	; 0x8e
    p1.sibling = p2.child;
    p2.child = handle;
    WriteIndexRecord(handle, p1);
    21f6:	add	r2, sp, #128	; 0x80
    21f8:	mov	r1, r5
    21fa:	mov	r0, r4
    }
  
    // add to new directory
    p1.parent = newParent;
    p1.store = p2.store;
    p1.sibling = p2.child;
    21fc:	str	r3, [sp, #136]	; 0x88
      px.sibling = p1.sibling;
      WriteIndexRecord(jx, px);
    }
  
    // add to new directory
    p1.parent = newParent;
    21fe:	str	r7, [sp, #128]	; 0x80
    p1.store = p2.store;
    p1.sibling = p2.child;
    p2.child = handle;
    2200:	str	r5, [sp, #212]	; 0xd4
    WriteIndexRecord(handle, p1);
    2202:	bl	19b4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent,p2);
    2206:	add	r2, sp, #208	; 0xd0
    2208:	mov	r1, r7
    220a:	mov	r0, r4
    220c:	bl	19b4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

    char newName[256];
    uint32_t store1 = ConstructFilename(handle, newName, 256);
    2210:	add	r2, sp, #944	; 0x3b0
    2212:	mov.w	r3, #256	; 0x100
    2216:	mov	r1, r5
    2218:	mov	r0, r4
    221a:	bl	1fd4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    #if DEBUG==1
      Serial.print(store1); Serial.print(": ");Serial.println(newName);
      printIndexList();
    #endif

    if(p2.store == p3.store)
    221e:	ldrh.w	r2, [sp, #222]	; 0xde
    2222:	ldrh.w	r3, [sp, #302]	; 0x12e
    2226:	cmp	r2, r3
    2228:	beq.w	27cc <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x6d0>
    }
    //
    // copy from one store to another (not completely tested yet)
    // store0:oldName -> store1:newName
    // do not move directories cross storages
    if(p1.isdir) 
    222c:	ldrb.w	r3, [sp, #140]	; 0x8c
    2230:	cmp	r3, #0
    2232:	bne.w	2456 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x35a>
    2236:	add.w	r9, r4, r0, lsl #2
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t storage) { return sd_name[storage-1];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    223a:	add	r2, sp, #944	; 0x3b0
    223c:	ldr.w	r1, [r9, #88]	; 0x58
    2240:	ldr	r3, [r1, #0]
    2242:	add	r0, sp, #88	; 0x58
    2244:	ldr.w	r8, [r3]
    2248:	movs	r3, #2
    224a:	blx	r8
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    224c:	ldr	r3, [sp, #104]	; 0x68
    224e:	cmp	r3, #0
    2250:	beq.n	2160 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x64>
    2252:	ldr	r1, [r3, #0]
    2254:	ldr	r2, [pc, #564]	; (248c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x390>)
    2256:	ldr	r1, [r1, #68]	; 0x44
    2258:	cmp	r1, r2
    225a:	bne.w	2482 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x386>
    225e:	ldr	r0, [r3, #16]
    2260:	cmp	r0, #0
    2262:	beq.w	2700 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x604>
    2266:	ldr	r1, [r0, #0]
    2268:	ldr	r1, [r1, #68]	; 0x44
    226a:	cmp	r1, r2
    226c:	bne.w	2484 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x388>
    2270:	ldr	r0, [r0, #16]
    2272:	cmp	r0, #0
    2274:	beq.w	2700 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x604>
    2278:	ldr	r1, [r0, #0]
    227a:	ldr	r1, [r1, #68]	; 0x44
    227c:	cmp	r1, r2
    227e:	bne.w	2484 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x388>
    2282:	ldr	r0, [r0, #16]
    2284:	cmp	r0, #0
    2286:	beq.w	2700 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x604>
    228a:	ldr	r1, [r0, #0]
    228c:	ldr	r1, [r1, #68]	; 0x44
    228e:	cmp	r1, r2
    2290:	bne.w	2484 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x388>
    2294:	ldr	r0, [r0, #16]
    2296:	cmp	r0, #0
    2298:	beq.w	2700 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x604>
    229c:	ldr	r1, [r0, #0]
    229e:	ldr	r1, [r1, #68]	; 0x44
    22a0:	cmp	r1, r2
    22a2:	bne.w	2484 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x388>
    22a6:	ldr	r0, [r0, #16]
    22a8:	cmp	r0, #0
    22aa:	beq.w	2700 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x604>
    22ae:	ldr	r1, [r0, #0]
    22b0:	ldr	r1, [r1, #68]	; 0x44
    22b2:	cmp	r1, r2
    22b4:	bne.w	2484 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x388>
    22b8:	ldr	r0, [r0, #16]
    22ba:	cmp	r0, #0
    22bc:	beq.w	2700 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x604>
    22c0:	ldr	r1, [r0, #0]
    22c2:	ldr	r1, [r1, #68]	; 0x44
    22c4:	cmp	r1, r2
    22c6:	bne.w	2484 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x388>
    22ca:	ldr	r0, [r0, #16]
    22cc:	cmp	r0, #0
    22ce:	beq.w	2700 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x604>
    22d2:	ldr	r1, [r0, #0]
    22d4:	ldr	r1, [r1, #68]	; 0x44
    22d6:	cmp	r1, r2
    22d8:	bne.w	2484 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x388>
    22dc:	ldr	r0, [r0, #16]
    22de:	cmp	r0, #0
    22e0:	beq.w	2700 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x604>
    22e4:	ldr	r1, [r0, #0]
    22e6:	ldr	r1, [r1, #68]	; 0x44
    22e8:	cmp	r1, r2
    22ea:	bne.w	2484 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x388>
    22ee:	ldr	r0, [r0, #16]
    22f0:	cmp	r0, #0
    22f2:	beq.w	2700 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x604>
    22f6:	ldr	r3, [r0, #0]
    22f8:	ldr	r3, [r3, #68]	; 0x44
    22fa:	blx	r3
    22fc:	mov	r8, r0
    #endif

    const int nbuf = 2048;
    char buffer[nbuf];
    File f2 = sd_open(store1,newName,FILE_WRITE_BEGIN);
    if(sd_isOpen(f2))
    22fe:	cmp.w	r8, #0
    2302:	beq.w	2842 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x746>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    2306:	ldr	r0, [sp, #104]	; 0x68
    2308:	cmp	r0, #0
    230a:	beq.n	2370 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x274>
    230c:	ldr	r2, [r0, #0]
    230e:	ldr	r3, [pc, #384]	; (2490 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x394>)
    2310:	ldr	r1, [r2, #52]	; 0x34
    2312:	cmp	r1, r3
    2314:	bne.w	2830 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x734>
    2318:	ldr	r0, [r0, #16]
    231a:	cbz	r0, 2370 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x274>
    231c:	ldr	r2, [r0, #0]
    231e:	ldr	r1, [r2, #52]	; 0x34
    2320:	cmp	r1, r3
    2322:	bne.w	2830 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x734>
    2326:	ldr	r0, [r0, #16]
    2328:	cbz	r0, 2370 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x274>
    232a:	ldr	r2, [r0, #0]
    232c:	ldr	r1, [r2, #52]	; 0x34
    232e:	cmp	r1, r3
    2330:	bne.w	2830 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x734>
    2334:	ldr	r0, [r0, #16]
    2336:	cbz	r0, 2370 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x274>
    2338:	ldr	r2, [r0, #0]
    233a:	ldr	r1, [r2, #52]	; 0x34
    233c:	cmp	r1, r3
    233e:	bne.w	2830 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x734>
    2342:	ldr	r0, [r0, #16]
    2344:	cbz	r0, 2370 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x274>
    2346:	ldr	r2, [r0, #0]
    2348:	ldr	r1, [r2, #52]	; 0x34
    234a:	cmp	r1, r3
    234c:	bne.w	2830 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x734>
    2350:	ldr	r0, [r0, #16]
    2352:	cbz	r0, 2370 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x274>
    2354:	ldr	r2, [r0, #0]
    2356:	ldr	r1, [r2, #52]	; 0x34
    2358:	cmp	r1, r3
    235a:	bne.w	2830 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x734>
    235e:	ldr	r0, [r0, #16]
    2360:	cbz	r0, 2370 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x274>
    2362:	ldr	r3, [r0, #0]
    2364:	movs	r2, #0
    2366:	str	r2, [sp, #0]
    2368:	ldr	r1, [r3, #52]	; 0x34
    236a:	movs	r2, #0
    236c:	movs	r3, #0
    236e:	blx	r1
    2370:	add.w	sl, r4, sl, lsl #2
    2374:	add	r0, sp, #108	; 0x6c
    2376:	ldr.w	r1, [sl, #88]	; 0x58
    237a:	ldr.w	r8, [pc, #284]	; 2498 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x39c>
    237e:	ldr	r3, [r1, #0]
    2380:	add	r2, sp, #688	; 0x2b0
    2382:	ldr.w	fp, [r3]
    2386:	movs	r3, #0
    2388:	blx	fp
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    238a:	ldr	r3, [sp, #124]	; 0x7c
    238c:	cmp	r3, #0
    238e:	beq.w	249c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x3a0>
    2392:	ldr	r1, [r3, #0]
    2394:	ldr	r2, [pc, #252]	; (2494 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x398>)
    2396:	ldr.w	fp, [r1, #40]	; 0x28
    239a:	cmp	fp, r2
    239c:	bne.w	26a8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5ac>
    23a0:	ldr	r0, [r3, #16]
    23a2:	cmp	r0, #0
    23a4:	beq.n	249c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x3a0>
    23a6:	ldr	r1, [r0, #0]
    23a8:	ldr.w	fp, [r1, #40]	; 0x28
    23ac:	cmp	fp, r2
    23ae:	bne.w	26aa <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5ae>
    23b2:	ldr	r0, [r0, #16]
    23b4:	cmp	r0, #0
    23b6:	beq.n	249c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x3a0>
    23b8:	ldr	r1, [r0, #0]
    23ba:	ldr.w	fp, [r1, #40]	; 0x28
    23be:	cmp	fp, r2
    23c0:	bne.w	26aa <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5ae>
    23c4:	ldr	r0, [r0, #16]
    23c6:	cmp	r0, #0
    23c8:	beq.n	249c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x3a0>
    23ca:	ldr	r1, [r0, #0]
    23cc:	ldr.w	fp, [r1, #40]	; 0x28
    23d0:	cmp	fp, r2
    23d2:	bne.w	26aa <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5ae>
    23d6:	ldr	r0, [r0, #16]
    23d8:	cmp	r0, #0
    23da:	beq.n	249c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x3a0>
    23dc:	ldr	r1, [r0, #0]
    23de:	ldr.w	fp, [r1, #40]	; 0x28
    23e2:	cmp	fp, r2
    23e4:	bne.w	26aa <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5ae>
    23e8:	ldr	r0, [r0, #16]
    23ea:	cmp	r0, #0
    23ec:	beq.n	249c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x3a0>
    23ee:	ldr	r1, [r0, #0]
    23f0:	ldr.w	fp, [r1, #40]	; 0x28
    23f4:	cmp	fp, r2
    23f6:	bne.w	26aa <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5ae>
    23fa:	ldr	r0, [r0, #16]
    23fc:	cmp	r0, #0
    23fe:	beq.n	249c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x3a0>
    2400:	ldr	r1, [r0, #0]
    2402:	ldr.w	fp, [r1, #40]	; 0x28
    2406:	cmp	fp, r2
    2408:	bne.w	26aa <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5ae>
    240c:	ldr	r0, [r0, #16]
    240e:	cmp	r0, #0
    2410:	beq.n	249c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x3a0>
    2412:	ldr	r1, [r0, #0]
    2414:	ldr.w	fp, [r1, #40]	; 0x28
    2418:	cmp	fp, r2
    241a:	bne.w	26aa <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5ae>
    241e:	ldr	r0, [r0, #16]
    2420:	cmp	r0, #0
    2422:	beq.n	249c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x3a0>
    2424:	ldr	r1, [r0, #0]
    2426:	ldr.w	fp, [r1, #40]	; 0x28
    242a:	cmp	fp, r2
    242c:	bne.w	26aa <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5ae>
    2430:	ldr	r0, [r0, #16]
    2432:	cbz	r0, 249c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x3a0>
    2434:	ldr	r1, [r0, #0]
    2436:	ldr.w	fp, [r1, #40]	; 0x28
    243a:	cmp	fp, r2
    243c:	bne.w	26aa <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5ae>
    2440:	ldr	r0, [r0, #16]
    2442:	cbz	r0, 249c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x3a0>
    2444:	ldr	r3, [r0, #0]
    2446:	mov.w	r2, #2048	; 0x800
    244a:	ldr	r3, [r3, #40]	; 0x28
    244c:	add.w	r1, sp, #1200	; 0x4b0
    2450:	blx	r3
    2452:	mov	r2, r0
    2454:	b.n	26b6 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5ba>
    // store0:oldName -> store1:newName
    // do not move directories cross storages
    if(p1.isdir) 
    {
      // undo changes in index list
      if(jx<0) WriteIndexRecord(oldParent, p3o); else WriteIndexRecord(jx, pxo);
    2456:	mov	r1, r6
    2458:	add	r2, sp, #608	; 0x260
    245a:	mov	r0, r4
    245c:	bl	19b4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      WriteIndexRecord(handle, p1o);
    2460:	add	r2, sp, #368	; 0x170
    2462:	mov	r1, r5
    2464:	mov	r0, r4
    2466:	bl	19b4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      WriteIndexRecord(newParent,p2o);      
    246a:	mov	r0, r4
    246c:	add	r2, sp, #448	; 0x1c0
    246e:	mov	r1, r7
    2470:	bl	19b4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      return false;
    2474:	mov.w	r8, #0
        WriteIndexRecord(newParent,p2o);      
        return false;
      }
    }
    return false;
  }
    2478:	mov	r0, r8
    247a:	addw	sp, sp, #3252	; 0xcb4
    247e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    2482:	mov	r0, r3
    2484:	blx	r1
    2486:	mov	r8, r0
    2488:	b.n	22fe <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x202>
    248a:	nop
    248c:	.word	0x0000050d
    2490:	.word	0x000004c9
    2494:	.word	0x0000047d
    2498:	.word	0x00000489
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    249c:	ldr	r0, [sp, #104]	; 0x68
    249e:	cmp	r0, #0
    24a0:	beq.w	2822 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x726>
    if(sd_isOpen(f2))
    { f2.seek(0); // position file to beginning (ARDUINO opens at end of file)
      File f1 = sd_open(store0,oldName,FILE_READ);
      int nd;
      while(1)
      { nd=f1.read(buffer,nbuf);
    24a4:	mov.w	fp, #0
    24a8:	mov	r2, fp
    24aa:	ldr	r3, [r0, #0]
    24ac:	ldr	r3, [r3, #44]	; 0x2c
    24ae:	cmp	r3, r8
    24b0:	bne.w	26d0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5d4>
    24b4:	ldr	r0, [r0, #16]
    24b6:	cmp	r0, #0
    24b8:	beq.n	2548 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x44c>
    24ba:	ldr	r3, [r0, #0]
    24bc:	ldr	r3, [r3, #44]	; 0x2c
    24be:	cmp	r3, r8
    24c0:	bne.w	26d0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5d4>
    24c4:	ldr	r0, [r0, #16]
    24c6:	cmp	r0, #0
    24c8:	beq.n	2548 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x44c>
    24ca:	ldr	r3, [r0, #0]
    24cc:	ldr	r3, [r3, #44]	; 0x2c
    24ce:	cmp	r3, r8
    24d0:	bne.w	26d0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5d4>
    24d4:	ldr	r0, [r0, #16]
    24d6:	cmp	r0, #0
    24d8:	beq.n	2548 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x44c>
    24da:	ldr	r3, [r0, #0]
    24dc:	ldr	r3, [r3, #44]	; 0x2c
    24de:	cmp	r3, r8
    24e0:	bne.w	26d0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5d4>
    24e4:	ldr	r0, [r0, #16]
    24e6:	cmp	r0, #0
    24e8:	beq.n	2548 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x44c>
    24ea:	ldr	r3, [r0, #0]
    24ec:	ldr	r3, [r3, #44]	; 0x2c
    24ee:	cmp	r3, r8
    24f0:	bne.w	26d0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5d4>
    24f4:	ldr	r0, [r0, #16]
    24f6:	cbz	r0, 2548 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x44c>
    24f8:	ldr	r3, [r0, #0]
    24fa:	ldr	r3, [r3, #44]	; 0x2c
    24fc:	cmp	r3, r8
    24fe:	bne.w	26d0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5d4>
    2502:	ldr	r0, [r0, #16]
    2504:	cbz	r0, 2548 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x44c>
    2506:	ldr	r3, [r0, #0]
    2508:	ldr	r3, [r3, #44]	; 0x2c
    250a:	cmp	r3, r8
    250c:	bne.w	26d0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5d4>
    2510:	ldr	r0, [r0, #16]
    2512:	cbz	r0, 2548 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x44c>
    2514:	ldr	r3, [r0, #0]
    2516:	ldr	r3, [r3, #44]	; 0x2c
    2518:	cmp	r3, r8
    251a:	bne.w	26d0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5d4>
    251e:	ldr	r0, [r0, #16]
    2520:	cbz	r0, 2548 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x44c>
    2522:	ldr	r3, [r0, #0]
    2524:	ldr	r3, [r3, #44]	; 0x2c
    2526:	cmp	r3, r8
    2528:	bne.w	26d0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5d4>
    252c:	ldr	r0, [r0, #16]
    252e:	cbz	r0, 2548 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x44c>
    2530:	ldr	r3, [r0, #0]
    2532:	ldr	r3, [r3, #44]	; 0x2c
    2534:	cmp	r3, r8
    2536:	bne.w	26d0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5d4>
    253a:	ldr	r0, [r0, #16]
    253c:	cbz	r0, 2548 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x44c>
    253e:	ldr	r3, [r0, #0]
    2540:	add.w	r1, sp, #1200	; 0x4b0
    2544:	ldr	r3, [r3, #44]	; 0x2c
    2546:	blx	r3
        if(nd<0) break;
        f2.write(buffer,nd);
        if(nd<nbuf) break;
    2548:	cmp.w	fp, #2048	; 0x800
    254c:	bge.w	238a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x28e>
    2550:	ldr	r3, [sp, #124]	; 0x7c
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    2552:	cbz	r3, 25a2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x4a6>
    2554:	ldr	r2, [r3, #0]
    2556:	ldr	r1, [pc, #412]	; (26f4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5f8>)
    2558:	ldr	r2, [r2, #64]	; 0x40
    255a:	cmp	r2, r1
    255c:	bne.w	2878 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x77c>
    2560:	ldr	r0, [r3, #16]
    2562:	cbz	r0, 25a2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x4a6>
    2564:	ldr	r3, [r0, #0]
    2566:	ldr	r3, [r3, #64]	; 0x40
    2568:	cmp	r3, r2
    256a:	bne.w	28a8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x7ac>
    256e:	ldr	r0, [r0, #16]
    2570:	cbz	r0, 25a2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x4a6>
    2572:	ldr	r2, [r0, #0]
    2574:	ldr	r2, [r2, #64]	; 0x40
    2576:	cmp	r2, r3
    2578:	bne.w	287a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x77e>
    257c:	ldr	r0, [r0, #16]
    257e:	cbz	r0, 25a2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x4a6>
    2580:	ldr	r3, [r0, #0]
    2582:	ldr	r3, [r3, #64]	; 0x40
    2584:	cmp	r3, r2
    2586:	bne.w	28a8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x7ac>
    258a:	ldr	r0, [r0, #16]
    258c:	cbz	r0, 25a2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x4a6>
    258e:	ldr	r2, [r0, #0]
    2590:	ldr	r2, [r2, #64]	; 0x40
    2592:	cmp	r2, r3
    2594:	bne.w	287a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x77e>
    2598:	ldr	r0, [r0, #16]
    259a:	cbz	r0, 25a2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x4a6>
    259c:	ldr	r3, [r0, #0]
    259e:	ldr	r3, [r3, #64]	; 0x40
    25a0:	blx	r3
    25a2:	ldr	r0, [sp, #104]	; 0x68
    25a4:	cbz	r0, 25f4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x4f8>
    25a6:	ldr	r3, [r0, #0]
    25a8:	ldr	r2, [pc, #328]	; (26f4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5f8>)
    25aa:	ldr	r3, [r3, #64]	; 0x40
    25ac:	cmp	r3, r2
    25ae:	bne.w	287e <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x782>
    25b2:	ldr	r0, [r0, #16]
    25b4:	cbz	r0, 25f4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x4f8>
    25b6:	ldr	r2, [r0, #0]
    25b8:	ldr	r2, [r2, #64]	; 0x40
    25ba:	cmp	r2, r3
    25bc:	bne.w	28ac <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x7b0>
    25c0:	ldr	r0, [r0, #16]
    25c2:	cbz	r0, 25f4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x4f8>
    25c4:	ldr	r3, [r0, #0]
    25c6:	ldr	r3, [r3, #64]	; 0x40
    25c8:	cmp	r3, r2
    25ca:	bne.w	287e <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x782>
    25ce:	ldr	r0, [r0, #16]
    25d0:	cbz	r0, 25f4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x4f8>
    25d2:	ldr	r2, [r0, #0]
    25d4:	ldr	r2, [r2, #64]	; 0x40
    25d6:	cmp	r2, r3
    25d8:	bne.w	28ac <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x7b0>
    25dc:	ldr	r0, [r0, #16]
    25de:	cbz	r0, 25f4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x4f8>
    25e0:	ldr	r3, [r0, #0]
    25e2:	ldr	r3, [r3, #64]	; 0x40
    25e4:	cmp	r3, r2
    25e6:	bne.w	287e <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x782>
    25ea:	ldr	r0, [r0, #16]
    25ec:	cbz	r0, 25f4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x4f8>
    25ee:	ldr	r3, [r0, #0]
    25f0:	ldr	r3, [r3, #64]	; 0x40
    25f2:	blx	r3
      if(nd<0) { Serial.print("File Read Error :"); Serial.println(f1.getReadError());}

      // close all files
      f1.close();
      f2.close();
      if(nd<0) //  something went wrong
    25f4:	cmp.w	fp, #0
    25f8:	blt.w	2848 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x74c>
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) { return sdx[store]->remove(filename);  }
    25fc:	ldr.w	r0, [sl, #88]	; 0x58
    2600:	ldr	r3, [r0, #0]
    2602:	add	r1, sp, #688	; 0x2b0
    2604:	ldr	r3, [r3, #16]
    2606:	blx	r3
        WriteIndexRecord(newParent,p2o);      
        return false;
      }

      // remove old files
      if(sd_remove(store0,oldName)) 
    2608:	mov	r8, r0
    260a:	cmp	r0, #0
    260c:	beq.w	2882 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x786>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2610:	ldr	r2, [sp, #124]	; 0x7c
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2612:	ldr	r5, [pc, #228]	; (26f8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5fc>)
    2614:	str	r5, [sp, #108]	; 0x6c
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2616:	cmp	r2, #0
    2618:	beq.n	26a0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5a4>
    261a:	ldr	r3, [r2, #16]
    261c:	subs	r3, #1
    261e:	str	r3, [r2, #16]
    2620:	cmp	r3, #0
    2622:	bne.n	26a0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5a4>
    2624:	ldr	r4, [sp, #124]	; 0x7c
    2626:	cmp	r4, #0
    2628:	beq.n	26a0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5a4>
    262a:	ldr	r3, [r4, #0]
    262c:	ldr	r2, [pc, #204]	; (26fc <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x600>)
    262e:	ldr	r3, [r3, #32]
    2630:	cmp	r3, r2
    2632:	bne.w	28b0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x7b4>
    2636:	ldr	r1, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2638:	str	r5, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    263a:	cmp	r1, #0
    263c:	beq.n	2698 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x59c>
    263e:	ldr	r3, [r1, #16]
    2640:	subs	r3, #1
    2642:	str	r3, [r1, #16]
    2644:	cbnz	r3, 2698 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x59c>
    2646:	ldr	r6, [r4, #16]
    2648:	cbz	r6, 2698 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x59c>
    264a:	ldr	r3, [r6, #0]
    264c:	ldr	r3, [r3, #32]
    264e:	cmp	r3, r2
    2650:	bne.w	28bc <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x7c0>
    2654:	ldr	r1, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2656:	str	r5, [r6, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2658:	cbz	r1, 2690 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x594>
    265a:	ldr	r3, [r1, #16]
    265c:	subs	r3, #1
    265e:	str	r3, [r1, #16]
    2660:	cbnz	r3, 2690 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x594>
    2662:	ldr	r7, [r6, #16]
    2664:	cbz	r7, 2690 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x594>
    2666:	ldr	r3, [r7, #0]
    2668:	ldr	r3, [r3, #32]
    266a:	cmp	r3, r2
    266c:	bne.w	28c2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x7c6>
    2670:	ldr	r2, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2672:	str	r5, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2674:	cbz	r2, 2688 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x58c>
    2676:	ldr	r3, [r2, #16]
    2678:	subs	r3, #1
    267a:	str	r3, [r2, #16]
    267c:	cbnz	r3, 2688 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x58c>
    267e:	ldr	r0, [r7, #16]
    2680:	cbz	r0, 2688 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x58c>
    2682:	ldr	r3, [r0, #0]
    2684:	ldr	r3, [r3, #32]
    2686:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    2688:	mov	r0, r7
    268a:	movs	r1, #20
    268c:	bl	c9a8 <operator delete(void*, unsigned int)>
    2690:	mov	r0, r6
    2692:	movs	r1, #20
    2694:	bl	c9a8 <operator delete(void*, unsigned int)>
    2698:	mov	r0, r4
    269a:	movs	r1, #20
    269c:	bl	c9a8 <operator delete(void*, unsigned int)>
    26a0:	ldr	r3, [sp, #104]	; 0x68
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    26a2:	str	r5, [sp, #88]	; 0x58
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    26a4:	cbnz	r3, 2708 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x60c>
    26a6:	b.n	2164 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x68>
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    26a8:	mov	r0, r3
    26aa:	mov.w	r2, #2048	; 0x800
    26ae:	add.w	r1, sp, #1200	; 0x4b0
    26b2:	blx	fp
    26b4:	mov	r2, r0
    { f2.seek(0); // position file to beginning (ARDUINO opens at end of file)
      File f1 = sd_open(store0,oldName,FILE_READ);
      int nd;
      while(1)
      { nd=f1.read(buffer,nbuf);
        if(nd<0) break;
    26b6:	cmp	r2, #0
    if(sd_isOpen(f2))
    { f2.seek(0); // position file to beginning (ARDUINO opens at end of file)
      File f1 = sd_open(store0,oldName,FILE_READ);
      int nd;
      while(1)
      { nd=f1.read(buffer,nbuf);
    26b8:	mov	fp, r2
        if(nd<0) break;
    26ba:	blt.w	2806 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x70a>
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    26be:	ldr	r0, [sp, #104]	; 0x68
    26c0:	cmp	r0, #0
    26c2:	bne.w	24aa <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x3ae>
        f2.write(buffer,nd);
        if(nd<nbuf) break;
    26c6:	cmp.w	fp, #2048	; 0x800
    26ca:	bge.w	238a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x28e>
    26ce:	b.n	2550 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x454>
    26d0:	add.w	r1, sp, #1200	; 0x4b0
    26d4:	blx	r3
    26d6:	cmp.w	fp, #2048	; 0x800
    26da:	bge.w	238a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x28e>
    26de:	b.n	2550 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x454>
    Record px;
    Record pxo;
    if(p3.child==handle)
    {
      p3.child = p1.sibling;
      WriteIndexRecord(oldParent, p3);    
    26e0:	mov	r1, r6
    uint32_t jx=-1;
    Record px;
    Record pxo;
    if(p3.child==handle)
    {
      p3.child = p1.sibling;
    26e2:	ldr	r3, [sp, #136]	; 0x88
    26e4:	str	r3, [sp, #292]	; 0x124
      WriteIndexRecord(oldParent, p3);    
    26e6:	add	r2, sp, #288	; 0x120
    26e8:	mov	r0, r4
    26ea:	bl	19b4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      Serial.print(store0); Serial.print(": ");Serial.println(oldName);
      printIndexList();
    #endif

    // remove from old direcory
    uint32_t jx=-1;
    26ee:	mov.w	r6, #4294967295
    26f2:	b.n	21ec <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xf0>
    26f4:	.word	0x00000501
    26f8:	.word	0x000119b8
    26fc:	.word	0x00000eb1
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2700:	ldr	r5, [pc, #460]	; (28d0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x7d4>)
    2702:	str	r5, [sp, #88]	; 0x58
    2704:	mov.w	r8, #0
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2708:	ldr	r2, [r3, #16]
    270a:	subs	r2, #1
    270c:	str	r2, [r3, #16]
    270e:	cmp	r2, #0
    2710:	bne.w	2164 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x68>
    2714:	ldr	r4, [sp, #104]	; 0x68
    2716:	cmp	r4, #0
    2718:	beq.w	2164 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x68>
    271c:	ldr	r3, [r4, #0]
    271e:	ldr	r2, [pc, #436]	; (28d4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x7d8>)
    2720:	ldr	r3, [r3, #32]
    2722:	cmp	r3, r2
    2724:	bne.w	283c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x740>
    2728:	ldr	r1, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    272a:	str	r5, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    272c:	cmp	r1, #0
    272e:	beq.n	27c2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x6c6>
    2730:	ldr	r3, [r1, #16]
    2732:	subs	r3, #1
    2734:	str	r3, [r1, #16]
    2736:	cmp	r3, #0
    2738:	bne.n	27c2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x6c6>
    273a:	ldr	r6, [r4, #16]
    273c:	cmp	r6, #0
    273e:	beq.n	27c2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x6c6>
    2740:	ldr	r3, [r6, #0]
    2742:	ldr	r3, [r3, #32]
    2744:	cmp	r3, r2
    2746:	bne.w	28a2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x7a6>
    274a:	ldr	r1, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    274c:	str	r5, [r6, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    274e:	cmp	r1, #0
    2750:	beq.n	27ba <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x6be>
    2752:	ldr	r3, [r1, #16]
    2754:	subs	r3, #1
    2756:	str	r3, [r1, #16]
    2758:	cbnz	r3, 27ba <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x6be>
    275a:	ldr	r7, [r6, #16]
    275c:	cbz	r7, 27ba <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x6be>
    275e:	ldr	r3, [r7, #0]
    2760:	ldr	r3, [r3, #32]
    2762:	cmp	r3, r2
    2764:	bne.w	28b6 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x7ba>
    2768:	ldr	r1, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    276a:	str	r5, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    276c:	cbz	r1, 27b2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x6b6>
    276e:	ldr	r3, [r1, #16]
    2770:	subs	r3, #1
    2772:	str	r3, [r1, #16]
    2774:	cbnz	r3, 27b2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x6b6>
    2776:	ldr.w	r9, [r7, #16]
    277a:	cmp.w	r9, #0
    277e:	beq.n	27b2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x6b6>
    2780:	ldr.w	r3, [r9]
    2784:	ldr	r3, [r3, #32]
    2786:	cmp	r3, r2
    2788:	bne.w	28c8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x7cc>
    278c:	ldr.w	r2, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2790:	str.w	r5, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2794:	cbz	r2, 27aa <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x6ae>
    2796:	ldr	r3, [r2, #16]
    2798:	subs	r3, #1
    279a:	str	r3, [r2, #16]
    279c:	cbnz	r3, 27aa <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x6ae>
    279e:	ldr.w	r0, [r9, #16]
    27a2:	cbz	r0, 27aa <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x6ae>
    27a4:	ldr	r3, [r0, #0]
    27a6:	ldr	r3, [r3, #32]
    27a8:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    27aa:	mov	r0, r9
    27ac:	movs	r1, #20
    27ae:	bl	c9a8 <operator delete(void*, unsigned int)>
    27b2:	mov	r0, r7
    27b4:	movs	r1, #20
    27b6:	bl	c9a8 <operator delete(void*, unsigned int)>
    27ba:	mov	r0, r6
    27bc:	movs	r1, #20
    27be:	bl	c9a8 <operator delete(void*, unsigned int)>
    27c2:	mov	r0, r4
    27c4:	movs	r1, #20
    27c6:	bl	c9a8 <operator delete(void*, unsigned int)>
    27ca:	b.n	2164 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x68>
    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t storage) { return sd_name[storage-1];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    27cc:	add.w	sl, r4, sl, lsl #2
    27d0:	add	r2, sp, #944	; 0x3b0
    27d2:	ldr.w	r0, [sl, #88]	; 0x58
    27d6:	ldr	r3, [r0, #0]
    27d8:	add	r1, sp, #688	; 0x2b0
    27da:	ldr	r3, [r3, #12]
    27dc:	blx	r3
      printIndexList();
    #endif

    if(p2.store == p3.store)
    {
      if(sd_rename(store0,oldName,newName)) 
    27de:	mov	r8, r0
    27e0:	cmp	r0, #0
    27e2:	bne.w	2164 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x68>
        return true; 
      else 
      {
        // undo changes in index list
        if(jx<0) WriteIndexRecord(oldParent, p3o); else WriteIndexRecord(jx, pxo);
    27e6:	mov	r1, r6
    27e8:	add	r2, sp, #608	; 0x260
    27ea:	mov	r0, r4
    27ec:	bl	19b4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        WriteIndexRecord(handle, p1o);
    27f0:	add	r2, sp, #368	; 0x170
    27f2:	mov	r1, r5
    27f4:	mov	r0, r4
    27f6:	bl	19b4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        WriteIndexRecord(newParent,p2o);      
    27fa:	add	r2, sp, #448	; 0x1c0
    27fc:	mov	r1, r7
    27fe:	mov	r0, r4
    2800:	bl	19b4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        return false;
    2804:	b.n	2164 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x68>
    2806:	movs	r1, #17
    2808:	ldr	r0, [pc, #204]	; (28d8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x7dc>)
    280a:	bl	b2e0 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    280e:	ldrb.w	r1, [sp, #120]	; 0x78
    2812:	ldr	r0, [pc, #200]	; (28dc <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x7e0>)
    2814:	bl	c8c4 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    2818:	ldr	r0, [pc, #192]	; (28dc <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x7e0>)
    281a:	bl	c7f8 <Print::println()>
    281e:	ldr	r3, [sp, #124]	; 0x7c
    2820:	b.n	2552 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x456>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    2822:	cmp	r3, #0
    2824:	beq.w	25fc <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x500>
    if(sd_isOpen(f2))
    { f2.seek(0); // position file to beginning (ARDUINO opens at end of file)
      File f1 = sd_open(store0,oldName,FILE_READ);
      int nd;
      while(1)
      { nd=f1.read(buffer,nbuf);
    2828:	mov	fp, r0
    282a:	b.n	2554 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x458>
    }
    else
    { jx = p3.child;
      px = ReadIndexRecord(jx); 
      pxo = px;
      while(handle != px.sibling)
    282c:	mov	r6, r8
    282e:	b.n	21de <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xe2>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    2830:	movs	r3, #0
    2832:	str	r3, [sp, #0]
    2834:	movs	r2, #0
    2836:	movs	r3, #0
    2838:	blx	r1
    283a:	b.n	2370 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x274>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    283c:	mov	r0, r4
    283e:	blx	r3
    2840:	b.n	2164 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x68>
    2842:	ldr	r3, [sp, #104]	; 0x68
    2844:	ldr	r5, [pc, #136]	; (28d0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x7d4>)
    2846:	b.n	26a2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5a6>
    bool sd_remove(uint32_t store, const char *filename) { return sdx[store]->remove(filename);  }
    2848:	ldr.w	r0, [r9, #88]	; 0x58
    284c:	ldr	r3, [r0, #0]
    284e:	add	r1, sp, #944	; 0x3b0
    2850:	ldr	r3, [r3, #16]
    2852:	blx	r3
      f1.close();
      f2.close();
      if(nd<0) //  something went wrong
      { sd_remove(store1,newName); 
        // undo changes in index list
        if(jx<0) WriteIndexRecord(oldParent, p3o); else WriteIndexRecord(jx, pxo);
    2854:	mov	r1, r6
    2856:	add	r2, sp, #608	; 0x260
    2858:	mov	r0, r4
    285a:	bl	19b4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        WriteIndexRecord(handle, p1o);
    285e:	add	r2, sp, #368	; 0x170
    2860:	mov	r1, r5
    2862:	mov	r0, r4
    2864:	bl	19b4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        WriteIndexRecord(newParent,p2o);      
    2868:	add	r2, sp, #448	; 0x1c0
    286a:	mov	r1, r7
    286c:	mov	r0, r4
    286e:	bl	19b4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        return false;
    2872:	mov.w	r8, #0
    2876:	b.n	2610 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x514>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    2878:	mov	r0, r3
    287a:	blx	r2
    287c:	b.n	25a2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x4a6>
    287e:	blx	r3
    2880:	b.n	25f4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x4f8>
      // remove old files
      if(sd_remove(store0,oldName)) 
        return true; 
      else 
      { // undo changes in index list
        if(jx<0) WriteIndexRecord(oldParent, p3o); else WriteIndexRecord(jx, pxo);
    2882:	mov	r1, r6
    2884:	add	r2, sp, #608	; 0x260
    2886:	mov	r0, r4
    2888:	bl	19b4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        WriteIndexRecord(handle, p1o);
    288c:	add	r2, sp, #368	; 0x170
    288e:	mov	r1, r5
    2890:	mov	r0, r4
    2892:	bl	19b4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        WriteIndexRecord(newParent,p2o);      
    2896:	add	r2, sp, #448	; 0x1c0
    2898:	mov	r1, r7
    289a:	mov	r0, r4
    289c:	bl	19b4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        return false;
    28a0:	b.n	2610 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x514>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    28a2:	mov	r0, r6
    28a4:	blx	r3
    28a6:	b.n	27c2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x6c6>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    28a8:	blx	r3
    28aa:	b.n	25a2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x4a6>
    28ac:	blx	r2
    28ae:	b.n	25f4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x4f8>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    28b0:	mov	r0, r4
    28b2:	blx	r3
    28b4:	b.n	26a0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5a4>
    28b6:	mov	r0, r7
    28b8:	blx	r3
    28ba:	b.n	27ba <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x6be>
    28bc:	mov	r0, r6
    28be:	blx	r3
    28c0:	b.n	2698 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x59c>
    28c2:	mov	r0, r7
    28c4:	blx	r3
    28c6:	b.n	2690 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x594>
    28c8:	mov	r0, r9
    28ca:	blx	r3
    28cc:	b.n	27b2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x6b6>
    28ce:	nop
    28d0:	.word	0x000119b8
    28d4:	.word	0x00000eb1
    28d8:	.word	0x00011bdc
    28dc:	.word	0x1fff09d0

000028e0 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.15]>:
    file_.seek(pos);
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }

  bool MTPStorage_SD::DeleteObject(uint32_t object)
    28e0:	push	{r4, r5, r6, r7, lr}
    28e2:	adds	r2, r1, #1
    28e4:	sub	sp, #500	; 0x1f4
    28e6:	mov	r6, r1
    28e8:	mov	r4, r0
    28ea:	ite	ne
    28ec:	movne	r5, r1
    28ee:	moveq	r5, #0
    28f0:	b.n	2900 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.15]+0x20>
    if(object==0xFFFFFFFFUL) return false; // don't do anything if trying to delete a root directory
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object); //
      if (!r.isdir) break;
      if (!r.child) break;
    28f2:	ldr	r3, [sp, #84]	; 0x54
      if (!DeleteObject(r.child))  return false;
    28f4:	mov	r1, r3
    if(object==0xFFFFFFFFUL) return false; // don't do anything if trying to delete a root directory
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object); //
      if (!r.isdir) break;
      if (!r.child) break;
    28f6:	cbz	r3, 2920 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.15]+0x40>
      if (!DeleteObject(r.child))  return false;
    28f8:	ldr	r3, [r4, #0]
    28fa:	ldr	r3, [r3, #60]	; 0x3c
    28fc:	blx	r3
    28fe:	cbz	r0, 294c <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.15]+0x6c>
  {
    char filename[256];
    if(object==0xFFFFFFFFUL) return false; // don't do anything if trying to delete a root directory
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object); //
    2900:	mov	r2, r5
    2902:	mov	r1, r4
    2904:	mov	r0, sp
    2906:	bl	1b7c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    290a:	movs	r2, #80	; 0x50
    290c:	mov	r1, sp
    290e:	add.w	r0, sp, r2
    2912:	bl	b0e0 <memcpy>
      if (!r.isdir) break;
    2916:	ldrb.w	r3, [sp, #92]	; 0x5c
      if (!r.child) break;
      if (!DeleteObject(r.child))  return false;
    291a:	mov	r0, r4
    char filename[256];
    if(object==0xFFFFFFFFUL) return false; // don't do anything if trying to delete a root directory
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object); //
      if (!r.isdir) break;
    291c:	cmp	r3, #0
    291e:	bne.n	28f2 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.15]+0x12>
      if (!DeleteObject(r.child))  return false;
    }

    // We can't actually delete the root folder,
    // but if we deleted everything else, return true.
    if (object == 0xFFFFFFFFUL) return true;
    2920:	adds	r3, r6, #1
    2922:	beq.n	2982 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.15]+0xa2>

    ConstructFilename(object, filename, 256);
    2924:	mov.w	r3, #256	; 0x100
    2928:	add	r2, sp, #240	; 0xf0
    292a:	mov	r1, r6
    292c:	mov	r0, r4
    292e:	bl	1fd4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    bool success;
    mtp_lock_storage(true);
    if (r.isdir) success = sd_rmdir(r.store,filename); else  success = sd_remove(r.store,filename);
    2932:	ldrb.w	r3, [sp, #92]	; 0x5c
    2936:	cbz	r3, 2988 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.15]+0xa8>
    bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
    2938:	ldrh.w	r3, [sp, #94]	; 0x5e
    293c:	add.w	r3, r4, r3, lsl #2
    2940:	add	r1, sp, #240	; 0xf0
    2942:	ldr	r0, [r3, #88]	; 0x58
    2944:	ldr	r3, [r0, #0]
    2946:	ldr	r3, [r3, #20]
    2948:	blx	r3
    mtp_lock_storage(false);
    if (!success) return false;
    294a:	cbnz	r0, 2952 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.15]+0x72>
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object); //
      if (!r.isdir) break;
      if (!r.child) break;
      if (!DeleteObject(r.child))  return false;
    294c:	movs	r0, #0
        { c = tmp.sibling;
        }
      }
    }
    return true;
  }
    294e:	add	sp, #500	; 0x1f4
    2950:	pop	{r4, r5, r6, r7, pc}
    if (r.isdir) success = sd_rmdir(r.store,filename); else  success = sd_remove(r.store,filename);
    mtp_lock_storage(false);
    if (!success) return false;
    
    r.name[0] = 0;
    int p = r.parent;
    2952:	ldr	r7, [sp, #80]	; 0x50
    mtp_lock_storage(true);
    if (r.isdir) success = sd_rmdir(r.store,filename); else  success = sd_remove(r.store,filename);
    mtp_lock_storage(false);
    if (!success) return false;
    
    r.name[0] = 0;
    2954:	movs	r3, #0
    int p = r.parent;
    WriteIndexRecord(object, r);
    2956:	add	r2, sp, #80	; 0x50
    2958:	mov	r1, r6
    295a:	mov	r0, r4
    mtp_lock_storage(true);
    if (r.isdir) success = sd_rmdir(r.store,filename); else  success = sd_remove(r.store,filename);
    mtp_lock_storage(false);
    if (!success) return false;
    
    r.name[0] = 0;
    295c:	strb.w	r3, [sp, #96]	; 0x60
    int p = r.parent;
    WriteIndexRecord(object, r);
    2960:	bl	19b4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record tmp = ReadIndexRecord(p);
    2964:	mov	r2, r7
    2966:	add	r0, sp, #160	; 0xa0
    2968:	mov	r1, r4
    296a:	bl	1b7c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (tmp.child == object) 
    296e:	ldr	r5, [sp, #164]	; 0xa4
    2970:	cmp	r6, r5
    2972:	bne.n	29a0 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.15]+0xc0>
    { tmp.child = r.sibling;
    2974:	ldr	r3, [sp, #88]	; 0x58
    2976:	str	r3, [sp, #164]	; 0xa4
      WriteIndexRecord(p, tmp);
    2978:	add	r2, sp, #160	; 0xa0
    297a:	mov	r1, r7
    297c:	mov	r0, r4
    297e:	bl	19b4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        else 
        { c = tmp.sibling;
        }
      }
    }
    return true;
    2982:	movs	r0, #1
  }
    2984:	add	sp, #500	; 0x1f4
    2986:	pop	{r4, r5, r6, r7, pc}
    const char *sd_getFSName(uint32_t storage) { return sd_name[storage-1];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) { return sdx[store]->remove(filename);  }
    2988:	ldrh.w	r3, [sp, #94]	; 0x5e
    298c:	add.w	r3, r4, r3, lsl #2
    2990:	add	r1, sp, #240	; 0xf0
    2992:	ldr	r0, [r3, #88]	; 0x58
    2994:	ldr	r3, [r0, #0]
    2996:	ldr	r3, [r3, #16]
    2998:	blx	r3
    ConstructFilename(object, filename, 256);
    bool success;
    mtp_lock_storage(true);
    if (r.isdir) success = sd_rmdir(r.store,filename); else  success = sd_remove(r.store,filename);
    mtp_lock_storage(false);
    if (!success) return false;
    299a:	cmp	r0, #0
    299c:	beq.n	294c <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.15]+0x6c>
    299e:	b.n	2952 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.15]+0x72>
    { tmp.child = r.sibling;
      WriteIndexRecord(p, tmp);
    } 
    else 
    { int c = tmp.child;
      while (c) 
    29a0:	cmp	r5, #0
    29a2:	beq.n	2982 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.15]+0xa2>
      { tmp = ReadIndexRecord(c);
    29a4:	mov	r2, r5
    29a6:	mov	r1, r4
    29a8:	mov	r0, sp
    29aa:	bl	1b7c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    29ae:	movs	r2, #80	; 0x50
    29b0:	mov	r1, sp
    29b2:	add	r0, sp, #160	; 0xa0
    29b4:	bl	b0e0 <memcpy>
        if (tmp.sibling == object) 
    29b8:	ldr	r3, [sp, #168]	; 0xa8
    29ba:	cmp	r6, r3
    29bc:	beq.n	29c2 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.15]+0xe2>
    { tmp.child = r.sibling;
      WriteIndexRecord(p, tmp);
    } 
    else 
    { int c = tmp.child;
      while (c) 
    29be:	mov	r5, r3
    29c0:	b.n	29a0 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.15]+0xc0>
      { tmp = ReadIndexRecord(c);
        if (tmp.sibling == object) 
        { tmp.sibling = r.sibling;
    29c2:	ldr	r3, [sp, #88]	; 0x58
    29c4:	str	r3, [sp, #168]	; 0xa8
          WriteIndexRecord(c, tmp);
    29c6:	mov	r0, r4
    29c8:	add	r2, sp, #160	; 0xa0
    29ca:	mov	r1, r5
    29cc:	bl	19b4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        else 
        { c = tmp.sibling;
        }
      }
    }
    return true;
    29d0:	movs	r0, #1
    29d2:	b.n	294e <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.15]+0x6e>

000029d4 <MTPStorage_SD::DeleteObject(unsigned long)>:
  }

  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    char filename[256];
    if(object==0xFFFFFFFFUL) return false; // don't do anything if trying to delete a root directory
    29d4:	adds	r3, r1, #1
    29d6:	beq.n	29dc <MTPStorage_SD::DeleteObject(unsigned long)+0x8>
    29d8:	b.w	28e0 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.15]>
        { c = tmp.sibling;
        }
      }
    }
    return true;
  }
    29dc:	movs	r0, #0
    29de:	bx	lr

000029e0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
      return tmp.store;
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    29e0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (open_file_ == i && mode_ == mode) return;
    29e4:	ldr.w	r3, [r0, #240]	; 0xf0
    29e8:	cmp	r3, r1
      return tmp.store;
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    29ea:	sub	sp, #292	; 0x124
    if (open_file_ == i && mode_ == mode) return;
    29ec:	beq.w	2de4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x404>
    29f0:	mov	r6, r2
    char filename[256];
    uint16_t store = ConstructFilename(i, filename, 256);
    29f2:	mov.w	r3, #256	; 0x100
    29f6:	add	r2, sp, #32
    29f8:	mov	r4, r0
    29fa:	mov	r5, r1
    29fc:	bl	1fd4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    2a00:	mov	r7, r0
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    2a02:	ldr.w	r0, [r4, #204]	; 0xcc
    2a06:	cmp	r0, #0
    2a08:	beq.w	2b1c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2a0c:	ldr	r2, [r0, #0]
    2a0e:	ldr	r3, [pc, #348]	; (2b6c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x18c>)
    2a10:	ldr	r2, [r2, #68]	; 0x44
    2a12:	cmp	r2, r3
    2a14:	bne.w	2df4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2a18:	ldr	r0, [r0, #16]
    2a1a:	cmp	r0, #0
    2a1c:	beq.n	2b1c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2a1e:	ldr	r2, [r0, #0]
    2a20:	ldr	r2, [r2, #68]	; 0x44
    2a22:	cmp	r2, r3
    2a24:	bne.w	2df4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2a28:	ldr	r0, [r0, #16]
    2a2a:	cmp	r0, #0
    2a2c:	beq.n	2b1c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2a2e:	ldr	r2, [r0, #0]
    2a30:	ldr	r2, [r2, #68]	; 0x44
    2a32:	cmp	r2, r3
    2a34:	bne.w	2df4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2a38:	ldr	r0, [r0, #16]
    2a3a:	cmp	r0, #0
    2a3c:	beq.n	2b1c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2a3e:	ldr	r2, [r0, #0]
    2a40:	ldr	r2, [r2, #68]	; 0x44
    2a42:	cmp	r2, r3
    2a44:	bne.w	2df4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2a48:	ldr	r0, [r0, #16]
    2a4a:	cmp	r0, #0
    2a4c:	beq.n	2b1c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2a4e:	ldr	r2, [r0, #0]
    2a50:	ldr	r2, [r2, #68]	; 0x44
    2a52:	cmp	r2, r3
    2a54:	bne.w	2df4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2a58:	ldr	r0, [r0, #16]
    2a5a:	cmp	r0, #0
    2a5c:	beq.n	2b1c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2a5e:	ldr	r2, [r0, #0]
    2a60:	ldr	r2, [r2, #68]	; 0x44
    2a62:	cmp	r2, r3
    2a64:	bne.w	2df4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2a68:	ldr	r0, [r0, #16]
    2a6a:	cmp	r0, #0
    2a6c:	beq.n	2b1c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2a6e:	ldr	r2, [r0, #0]
    2a70:	ldr	r2, [r2, #68]	; 0x44
    2a72:	cmp	r2, r3
    2a74:	bne.w	2df4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2a78:	ldr	r0, [r0, #16]
    2a7a:	cmp	r0, #0
    2a7c:	beq.n	2b1c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2a7e:	ldr	r2, [r0, #0]
    2a80:	ldr	r2, [r2, #68]	; 0x44
    2a82:	cmp	r2, r3
    2a84:	bne.w	2df4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2a88:	ldr	r0, [r0, #16]
    2a8a:	cmp	r0, #0
    2a8c:	beq.n	2b1c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2a8e:	ldr	r2, [r0, #0]
    2a90:	ldr	r2, [r2, #68]	; 0x44
    2a92:	cmp	r2, r3
    2a94:	bne.w	2df4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2a98:	ldr	r0, [r0, #16]
    2a9a:	cmp	r0, #0
    2a9c:	beq.n	2b1c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2a9e:	ldr	r3, [r0, #0]
    2aa0:	ldr	r3, [r3, #68]	; 0x44
    2aa2:	blx	r3
    mtp_lock_storage(true);
    if(sd_isOpen(file_)) file_.close();
    2aa4:	cmp	r0, #0
    2aa6:	beq.n	2b1c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    2aa8:	ldr.w	r0, [r4, #204]	; 0xcc
    2aac:	cmp	r0, #0
    2aae:	beq.n	2b1c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2ab0:	ldr	r2, [r0, #0]
    2ab2:	ldr	r3, [pc, #188]	; (2b70 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x190>)
    2ab4:	ldr	r2, [r2, #64]	; 0x40
    2ab6:	cmp	r2, r3
    2ab8:	bne.w	2df8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2abc:	ldr	r0, [r0, #16]
    2abe:	cmp	r0, #0
    2ac0:	beq.n	2b1c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2ac2:	ldr	r2, [r0, #0]
    2ac4:	ldr	r2, [r2, #64]	; 0x40
    2ac6:	cmp	r2, r3
    2ac8:	bne.w	2df8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2acc:	ldr	r0, [r0, #16]
    2ace:	cbz	r0, 2b1c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2ad0:	ldr	r2, [r0, #0]
    2ad2:	ldr	r2, [r2, #64]	; 0x40
    2ad4:	cmp	r2, r3
    2ad6:	bne.w	2df8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2ada:	ldr	r0, [r0, #16]
    2adc:	cbz	r0, 2b1c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2ade:	ldr	r2, [r0, #0]
    2ae0:	ldr	r2, [r2, #64]	; 0x40
    2ae2:	cmp	r2, r3
    2ae4:	bne.w	2df8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2ae8:	ldr	r0, [r0, #16]
    2aea:	cbz	r0, 2b1c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2aec:	ldr	r2, [r0, #0]
    2aee:	ldr	r2, [r2, #64]	; 0x40
    2af0:	cmp	r2, r3
    2af2:	bne.w	2df8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2af6:	ldr	r0, [r0, #16]
    2af8:	cbz	r0, 2b1c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2afa:	ldr	r2, [r0, #0]
    2afc:	ldr	r2, [r2, #64]	; 0x40
    2afe:	cmp	r2, r3
    2b00:	bne.w	2df8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2b04:	ldr	r0, [r0, #16]
    2b06:	cbz	r0, 2b1c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2b08:	ldr	r2, [r0, #0]
    2b0a:	ldr	r2, [r2, #64]	; 0x40
    2b0c:	cmp	r2, r3
    2b0e:	bne.w	2df8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2b12:	ldr	r0, [r0, #16]
    2b14:	cbz	r0, 2b1c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2b16:	ldr	r3, [r0, #0]
    2b18:	ldr	r3, [r3, #64]	; 0x40
    2b1a:	blx	r3
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t storage) { return sd_name[storage-1];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    2b1c:	add.w	r7, r4, r7, lsl #2
    2b20:	add	r2, sp, #32
    2b22:	ldr	r1, [r7, #88]	; 0x58
    2b24:	ldr	r3, [r1, #0]
    2b26:	add	r0, sp, #12
    2b28:	ldr	r7, [r3, #0]
    2b2a:	uxtb	r3, r6
    2b2c:	blx	r7
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2b2e:	ldr.w	r2, [r4, #204]	; 0xcc
    2b32:	cbz	r2, 2b3c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
    2b34:	ldr	r3, [r2, #16]
    2b36:	subs	r3, #1
    2b38:	str	r3, [r2, #16]
    2b3a:	cbz	r3, 2b78 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x198>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    2b3c:	ldr	r2, [sp, #28]
    2b3e:	str.w	r2, [r4, #204]	; 0xcc
		if (f) f->refcount++;
    2b42:	cbz	r2, 2b5e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    2b44:	ldr	r1, [r2, #16]
		return *this;
	}
	virtual ~File() {
    2b46:	ldr	r3, [pc, #44]	; (2b74 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x194>)
    2b48:	str	r3, [sp, #12]
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    2b4a:	adds	r1, #1
    2b4c:	str	r1, [r2, #16]
    2b4e:	ldr	r1, [sp, #28]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2b50:	cbz	r1, 2b5e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    2b52:	ldr	r2, [r1, #16]
    2b54:	subs	r2, #1
    2b56:	str	r2, [r1, #16]
    2b58:	cmp	r2, #0
    2b5a:	beq.w	2cb4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2d4>
    file_=sd_open(store,filename,mode);
    open_file_ = i;
    2b5e:	str.w	r5, [r4, #240]	; 0xf0
    mode_ = mode;
    2b62:	str.w	r6, [r4, #236]	; 0xec
    mtp_lock_storage(false);
  }
    2b66:	add	sp, #292	; 0x124
    2b68:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b6c:	.word	0x0000050d
    2b70:	.word	0x00000501
    2b74:	.word	0x000119b8
    2b78:	ldr.w	r7, [r4, #204]	; 0xcc
    2b7c:	cmp	r7, #0
    2b7e:	beq.n	2b3c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
    2b80:	ldr	r3, [r7, #0]
    2b82:	ldr	r1, [pc, #680]	; (2e2c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x44c>)
    2b84:	ldr	r3, [r3, #32]
    2b86:	cmp	r3, r1
    2b88:	bne.w	2dfc <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x41c>
    2b8c:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2b8e:	ldr	r3, [pc, #672]	; (2e30 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>)
    2b90:	str	r3, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2b92:	cmp	r0, #0
    2b94:	beq.w	2caa <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    2b98:	ldr	r2, [r0, #16]
    2b9a:	subs	r2, #1
    2b9c:	str	r2, [r0, #16]
    2b9e:	cmp	r2, #0
    2ba0:	bne.w	2caa <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    2ba4:	ldr.w	r8, [r7, #16]
    2ba8:	cmp.w	r8, #0
    2bac:	beq.n	2caa <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    2bae:	ldr.w	r2, [r8]
    2bb2:	ldr	r2, [r2, #32]
    2bb4:	cmp	r2, r1
    2bb6:	bne.w	2e1a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x43a>
    2bba:	ldr.w	r0, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2bbe:	str.w	r3, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2bc2:	cmp	r0, #0
    2bc4:	beq.n	2ca2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    2bc6:	ldr	r2, [r0, #16]
    2bc8:	subs	r2, #1
    2bca:	str	r2, [r0, #16]
    2bcc:	cmp	r2, #0
    2bce:	bne.n	2ca2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    2bd0:	ldr.w	r9, [r8, #16]
    2bd4:	cmp.w	r9, #0
    2bd8:	beq.n	2ca2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    2bda:	ldr.w	r2, [r9]
    2bde:	ldr	r2, [r2, #32]
    2be0:	cmp	r2, r1
    2be2:	bne.w	2e0e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x42e>
    2be6:	ldr.w	r0, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2bea:	str.w	r3, [r9]
    2bee:	ldr.w	lr, [pc, #576]	; 2e30 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2bf2:	cmp	r0, #0
    2bf4:	beq.n	2c9a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    2bf6:	ldr	r2, [r0, #16]
    2bf8:	subs	r2, #1
    2bfa:	str	r2, [r0, #16]
    2bfc:	cmp	r2, #0
    2bfe:	bne.n	2c9a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    2c00:	ldr.w	sl, [r9, #16]
    2c04:	cmp.w	sl, #0
    2c08:	beq.n	2c9a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    2c0a:	ldr.w	r2, [sl]
    2c0e:	ldr	r2, [r2, #32]
    2c10:	cmp	r2, r1
    2c12:	bne.w	2e26 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x446>
    2c16:	ldr.w	r0, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2c1a:	str.w	lr, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2c1e:	cmp	r0, #0
    2c20:	beq.n	2c92 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    2c22:	ldr	r2, [r0, #16]
    2c24:	subs	r2, #1
    2c26:	str	r2, [r0, #16]
    2c28:	cmp	r2, #0
    2c2a:	bne.n	2c92 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    2c2c:	ldr.w	fp, [sl, #16]
    2c30:	cmp.w	fp, #0
    2c34:	beq.n	2c92 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    2c36:	ldr.w	r2, [fp]
    2c3a:	ldr	r2, [r2, #32]
    2c3c:	cmp	r2, r1
    2c3e:	bne.w	2e3a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x45a>
    2c42:	ldr.w	r2, [fp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2c46:	str.w	r3, [fp]
    2c4a:	ldr	r0, [pc, #484]	; (2e30 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2c4c:	cbz	r2, 2c8a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>
    2c4e:	ldr	r3, [r2, #16]
    2c50:	subs	r3, #1
    2c52:	str	r3, [r2, #16]
    2c54:	cbnz	r3, 2c8a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>
    2c56:	ldr.w	r2, [fp, #16]
    2c5a:	cbz	r2, 2c8a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>
    2c5c:	ldr	r3, [r2, #0]
    2c5e:	ldr	r3, [r3, #32]
    2c60:	cmp	r3, r1
    2c62:	bne.w	2e46 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x466>
    2c66:	ldr	r1, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2c68:	str	r0, [r2, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2c6a:	cbz	r1, 2c82 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2a2>
    2c6c:	ldr	r3, [r1, #16]
    2c6e:	subs	r3, #1
    2c70:	str	r3, [r1, #16]
    2c72:	cbnz	r3, 2c82 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2a2>
    2c74:	ldr	r0, [r2, #16]
    2c76:	cbz	r0, 2c82 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2a2>
    2c78:	ldr	r3, [r0, #0]
    2c7a:	str	r2, [sp, #4]
    2c7c:	ldr	r3, [r3, #32]
    2c7e:	blx	r3
    2c80:	ldr	r2, [sp, #4]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    2c82:	mov	r0, r2
    2c84:	movs	r1, #20
    2c86:	bl	c9a8 <operator delete(void*, unsigned int)>
    2c8a:	mov	r0, fp
    2c8c:	movs	r1, #20
    2c8e:	bl	c9a8 <operator delete(void*, unsigned int)>
    2c92:	mov	r0, sl
    2c94:	movs	r1, #20
    2c96:	bl	c9a8 <operator delete(void*, unsigned int)>
    2c9a:	mov	r0, r9
    2c9c:	movs	r1, #20
    2c9e:	bl	c9a8 <operator delete(void*, unsigned int)>
    2ca2:	mov	r0, r8
    2ca4:	movs	r1, #20
    2ca6:	bl	c9a8 <operator delete(void*, unsigned int)>
    2caa:	mov	r0, r7
    2cac:	movs	r1, #20
    2cae:	bl	c9a8 <operator delete(void*, unsigned int)>
    2cb2:	b.n	2b3c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2cb4:	ldr	r7, [sp, #28]
    2cb6:	cmp	r7, #0
    2cb8:	beq.w	2b5e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    2cbc:	ldr	r2, [r7, #0]
    2cbe:	ldr	r1, [pc, #364]	; (2e2c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x44c>)
    2cc0:	ldr	r2, [r2, #32]
    2cc2:	cmp	r2, r1
    2cc4:	bne.w	2e02 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x422>
    2cc8:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2cca:	str	r3, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2ccc:	cmp	r0, #0
    2cce:	beq.w	2dda <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    2cd2:	ldr	r2, [r0, #16]
    2cd4:	subs	r2, #1
    2cd6:	str	r2, [r0, #16]
    2cd8:	cmp	r2, #0
    2cda:	bne.n	2dda <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    2cdc:	ldr.w	r8, [r7, #16]
    2ce0:	cmp.w	r8, #0
    2ce4:	beq.n	2dda <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    2ce6:	ldr.w	r2, [r8]
    2cea:	ldr	r2, [r2, #32]
    2cec:	cmp	r2, r1
    2cee:	bne.w	2e14 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x434>
    2cf2:	ldr.w	r0, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2cf6:	str.w	r3, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2cfa:	cmp	r0, #0
    2cfc:	beq.n	2dd2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    2cfe:	ldr	r2, [r0, #16]
    2d00:	subs	r2, #1
    2d02:	str	r2, [r0, #16]
    2d04:	cmp	r2, #0
    2d06:	bne.n	2dd2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    2d08:	ldr.w	r9, [r8, #16]
    2d0c:	cmp.w	r9, #0
    2d10:	beq.n	2dd2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    2d12:	ldr.w	r2, [r9]
    2d16:	ldr	r2, [r2, #32]
    2d18:	cmp	r2, r1
    2d1a:	bne.n	2e08 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x428>
    2d1c:	ldr.w	r0, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2d20:	str.w	r3, [r9]
    2d24:	ldr.w	lr, [pc, #264]	; 2e30 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2d28:	cmp	r0, #0
    2d2a:	beq.n	2dca <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    2d2c:	ldr	r2, [r0, #16]
    2d2e:	subs	r2, #1
    2d30:	str	r2, [r0, #16]
    2d32:	cmp	r2, #0
    2d34:	bne.n	2dca <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    2d36:	ldr.w	sl, [r9, #16]
    2d3a:	cmp.w	sl, #0
    2d3e:	beq.n	2dca <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    2d40:	ldr.w	r2, [sl]
    2d44:	ldr	r2, [r2, #32]
    2d46:	cmp	r2, r1
    2d48:	bne.n	2e20 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x440>
    2d4a:	ldr.w	r0, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2d4e:	str.w	lr, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2d52:	cmp	r0, #0
    2d54:	beq.n	2dc2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    2d56:	ldr	r2, [r0, #16]
    2d58:	subs	r2, #1
    2d5a:	str	r2, [r0, #16]
    2d5c:	cmp	r2, #0
    2d5e:	bne.n	2dc2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    2d60:	ldr.w	fp, [sl, #16]
    2d64:	cmp.w	fp, #0
    2d68:	beq.n	2dc2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    2d6a:	ldr.w	r2, [fp]
    2d6e:	ldr	r2, [r2, #32]
    2d70:	cmp	r2, r1
    2d72:	bne.n	2e34 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x454>
    2d74:	ldr.w	r2, [fp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2d78:	str.w	r3, [fp]
    2d7c:	ldr	r0, [pc, #176]	; (2e30 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2d7e:	cbz	r2, 2dba <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    2d80:	ldr	r3, [r2, #16]
    2d82:	subs	r3, #1
    2d84:	str	r3, [r2, #16]
    2d86:	cbnz	r3, 2dba <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    2d88:	ldr.w	r2, [fp, #16]
    2d8c:	cbz	r2, 2dba <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    2d8e:	ldr	r3, [r2, #0]
    2d90:	ldr	r3, [r3, #32]
    2d92:	cmp	r3, r1
    2d94:	bne.n	2e40 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x460>
    2d96:	ldr	r1, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2d98:	str	r0, [r2, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2d9a:	cbz	r1, 2db2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3d2>
    2d9c:	ldr	r3, [r1, #16]
    2d9e:	subs	r3, #1
    2da0:	str	r3, [r1, #16]
    2da2:	cbnz	r3, 2db2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3d2>
    2da4:	ldr	r0, [r2, #16]
    2da6:	cbz	r0, 2db2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3d2>
    2da8:	ldr	r3, [r0, #0]
    2daa:	str	r2, [sp, #4]
    2dac:	ldr	r3, [r3, #32]
    2dae:	blx	r3
    2db0:	ldr	r2, [sp, #4]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    2db2:	mov	r0, r2
    2db4:	movs	r1, #20
    2db6:	bl	c9a8 <operator delete(void*, unsigned int)>
    2dba:	mov	r0, fp
    2dbc:	movs	r1, #20
    2dbe:	bl	c9a8 <operator delete(void*, unsigned int)>
    2dc2:	mov	r0, sl
    2dc4:	movs	r1, #20
    2dc6:	bl	c9a8 <operator delete(void*, unsigned int)>
    2dca:	mov	r0, r9
    2dcc:	movs	r1, #20
    2dce:	bl	c9a8 <operator delete(void*, unsigned int)>
    2dd2:	mov	r0, r8
    2dd4:	movs	r1, #20
    2dd6:	bl	c9a8 <operator delete(void*, unsigned int)>
    2dda:	mov	r0, r7
    2ddc:	movs	r1, #20
    2dde:	bl	c9a8 <operator delete(void*, unsigned int)>
    2de2:	b.n	2b5e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    if (open_file_ == i && mode_ == mode) return;
    2de4:	ldr.w	r3, [r0, #236]	; 0xec
    2de8:	cmp	r3, r2
    2dea:	bne.w	29f0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x10>
    if(sd_isOpen(file_)) file_.close();
    file_=sd_open(store,filename,mode);
    open_file_ = i;
    mode_ = mode;
    mtp_lock_storage(false);
  }
    2dee:	add	sp, #292	; 0x124
    2df0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    2df4:	blx	r2
    2df6:	b.n	2aa4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xc4>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    2df8:	blx	r2
    2dfa:	b.n	2b1c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2dfc:	mov	r0, r7
    2dfe:	blx	r3
    2e00:	b.n	2b3c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
    2e02:	mov	r0, r7
    2e04:	blx	r2
    2e06:	b.n	2b5e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    2e08:	mov	r0, r9
    2e0a:	blx	r2
    2e0c:	b.n	2dd2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    2e0e:	mov	r0, r9
    2e10:	blx	r2
    2e12:	b.n	2ca2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    2e14:	mov	r0, r8
    2e16:	blx	r2
    2e18:	b.n	2dda <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    2e1a:	mov	r0, r8
    2e1c:	blx	r2
    2e1e:	b.n	2caa <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    2e20:	mov	r0, sl
    2e22:	blx	r2
    2e24:	b.n	2dca <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    2e26:	mov	r0, sl
    2e28:	blx	r2
    2e2a:	b.n	2c9a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    2e2c:	.word	0x00000eb1
    2e30:	.word	0x000119b8
    2e34:	mov	r0, fp
    2e36:	blx	r2
    2e38:	b.n	2dc2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    2e3a:	mov	r0, fp
    2e3c:	blx	r2
    2e3e:	b.n	2c92 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    2e40:	mov	r0, r2
    2e42:	blx	r3
    2e44:	b.n	2dba <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    2e46:	mov	r0, r2
    2e48:	blx	r3
    2e4a:	b.n	2c8a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>

00002e4c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    2e4c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2e50:	mov	r5, r0
    2e52:	sub	sp, #8
    2e54:	mov	r7, r2
    OpenFileByIndex(handle);
    2e56:	movs	r2, #0
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    2e58:	mov	r8, r3
    2e5a:	ldr.w	r9, [sp, #40]	; 0x28
    OpenFileByIndex(handle);
    2e5e:	bl	29e0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    2e62:	ldr.w	r4, [r5, #204]	; 0xcc
    2e66:	cmp	r4, #0
    2e68:	beq.n	2f40 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    2e6a:	ldr	r0, [r4, #0]
    2e6c:	ldr	r2, [pc, #308]	; (2fa4 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x158>)
    2e6e:	ldr	r6, [r0, #52]	; 0x34
    2e70:	cmp	r6, r2
    2e72:	mov.w	r3, #0
    2e76:	bne.n	2f70 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x124>
    2e78:	ldr	r1, [r4, #16]
    2e7a:	cmp	r1, #0
    2e7c:	beq.n	2f38 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xec>
    2e7e:	ldr	r2, [r1, #0]
    2e80:	ldr.w	sl, [r2, #52]	; 0x34
    2e84:	cmp	sl, r6
    2e86:	bne.n	2f7a <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x12e>
    2e88:	ldr.w	lr, [r1, #16]
    2e8c:	cmp.w	lr, #0
    2e90:	beq.n	2f46 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xfa>
    2e92:	ldr.w	r2, [lr]
    2e96:	ldr	r6, [r2, #52]	; 0x34
    2e98:	cmp	r6, sl
    2e9a:	bne.n	2f84 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x138>
    2e9c:	ldr.w	lr, [lr, #16]
    2ea0:	cmp.w	lr, #0
    2ea4:	beq.n	2f46 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xfa>
    2ea6:	ldr.w	r2, [lr]
    2eaa:	ldr.w	sl, [r2, #52]	; 0x34
    2eae:	cmp	sl, r6
    2eb0:	bne.n	2f8e <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x142>
    2eb2:	ldr.w	lr, [lr, #16]
    2eb6:	cmp.w	lr, #0
    2eba:	beq.n	2f46 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xfa>
    2ebc:	ldr.w	r3, [lr]
    2ec0:	ldr	r6, [r3, #52]	; 0x34
    2ec2:	cmp	r6, sl
    2ec4:	bne.n	2f98 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x14c>
    2ec6:	ldr.w	r6, [lr, #16]
    2eca:	cmp	r6, #0
    2ecc:	beq.n	2f46 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xfa>
    2ece:	ldr	r1, [r6, #0]
    2ed0:	movs	r3, #0
    2ed2:	str	r3, [sp, #0]
    2ed4:	mov	r2, r7
    2ed6:	mov	r0, r6
    2ed8:	ldr	r1, [r1, #52]	; 0x34
    2eda:	blx	r1
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    2edc:	ldr.w	r4, [r5, #204]	; 0xcc
    2ee0:	cmp	r4, #0
    2ee2:	beq.n	2f40 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    2ee4:	ldr	r2, [r4, #0]
    2ee6:	ldr	r3, [pc, #192]	; (2fa8 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x15c>)
    2ee8:	ldr	r5, [r2, #40]	; 0x28
    2eea:	cmp	r5, r3
    2eec:	bne.n	2f52 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x106>
    2eee:	ldr	r0, [r4, #16]
    2ef0:	cbz	r0, 2f40 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    2ef2:	ldr	r2, [r0, #0]
    2ef4:	ldr	r4, [r2, #40]	; 0x28
    2ef6:	cmp	r4, r3
    2ef8:	bne.n	2f62 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    2efa:	ldr	r0, [r0, #16]
    2efc:	cbz	r0, 2f40 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    2efe:	ldr	r2, [r0, #0]
    2f00:	ldr	r4, [r2, #40]	; 0x28
    2f02:	cmp	r4, r3
    2f04:	bne.n	2f62 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    2f06:	ldr	r0, [r0, #16]
    2f08:	cbz	r0, 2f40 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    2f0a:	ldr	r2, [r0, #0]
    2f0c:	ldr	r4, [r2, #40]	; 0x28
    2f0e:	cmp	r4, r3
    2f10:	bne.n	2f62 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    2f12:	ldr	r0, [r0, #16]
    2f14:	cbz	r0, 2f40 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    2f16:	ldr	r2, [r0, #0]
    2f18:	ldr	r4, [r2, #40]	; 0x28
    2f1a:	cmp	r4, r3
    2f1c:	bne.n	2f62 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    2f1e:	ldr	r0, [r0, #16]
    2f20:	cbz	r0, 2f40 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    2f22:	ldr	r2, [r0, #0]
    2f24:	ldr	r4, [r2, #40]	; 0x28
    2f26:	cmp	r4, r3
    2f28:	bne.n	2f62 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    2f2a:	ldr	r0, [r0, #16]
    2f2c:	cbz	r0, 2f40 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    2f2e:	ldr	r3, [r0, #0]
    2f30:	mov	r2, r9
    2f32:	mov	r1, r8
    2f34:	ldr	r3, [r3, #40]	; 0x28
    2f36:	b.n	2f5a <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x10e>
    2f38:	ldr	r5, [r0, #40]	; 0x28
    2f3a:	ldr	r3, [pc, #108]	; (2fa8 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x15c>)
    2f3c:	cmp	r5, r3
    2f3e:	bne.n	2f52 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x106>
    mtp_lock_storage(true);
    file_.seek(pos);
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }
    2f40:	add	sp, #8
    2f42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2f46:	ldr	r5, [r0, #40]	; 0x28
    2f48:	ldr	r3, [pc, #92]	; (2fa8 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x15c>)
    2f4a:	cmp	r5, r3
    2f4c:	bne.n	2f52 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x106>
    2f4e:	mov	r0, r1
    2f50:	b.n	2ef2 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xa6>
    2f52:	mov	r2, r9
    2f54:	mov	r1, r8
    2f56:	mov	r0, r4
    2f58:	mov	r3, r5
    2f5a:	add	sp, #8
    2f5c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2f60:	bx	r3
    2f62:	mov	r2, r9
    2f64:	mov	r1, r8
    2f66:	mov	r3, r4
    2f68:	add	sp, #8
    2f6a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2f6e:	bx	r3
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    2f70:	str	r3, [sp, #0]
    2f72:	mov	r2, r7
    2f74:	mov	r0, r4
    2f76:	blx	r6
    2f78:	b.n	2edc <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    2f7a:	str	r3, [sp, #0]
    2f7c:	mov	r2, r7
    2f7e:	mov	r0, r1
    2f80:	blx	sl
    2f82:	b.n	2edc <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    2f84:	str	r3, [sp, #0]
    2f86:	mov	r2, r7
    2f88:	mov	r0, lr
    2f8a:	blx	r6
    2f8c:	b.n	2edc <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    2f8e:	str	r3, [sp, #0]
    2f90:	mov	r2, r7
    2f92:	mov	r0, lr
    2f94:	blx	sl
    2f96:	b.n	2edc <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    2f98:	movs	r3, #0
    2f9a:	mov	r2, r7
    2f9c:	mov	r0, lr
    2f9e:	str	r3, [sp, #0]
    2fa0:	blx	r6
    2fa2:	b.n	2edc <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    2fa4:	.word	0x000004c9
    2fa8:	.word	0x0000047d

00002fac <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>:
    }
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t storage, uint32_t parent,  bool folder, const char* filename)
  {
    2fac:	push	{r4, r5, r6, r7, lr}
    2fae:	mov	r7, r3
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = storage-1;
    2fb0:	adds	r3, r2, #1
    2fb2:	it	eq
    2fb4:	addeq.w	r5, r1, #4294967295
    }
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t storage, uint32_t parent,  bool folder, const char* filename)
  {
    2fb8:	sub	sp, #420	; 0x1a4
    2fba:	it	ne
    2fbc:	movne	r5, r2
    2fbe:	mov	r4, r0
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = storage-1;
    Record p = ReadIndexRecord(parent);
    2fc0:	mov	r2, r5
    2fc2:	mov	r0, sp
    2fc4:	mov	r1, r4
    2fc6:	bl	1b7c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record r;
    if (strlen(filename) > 62) return 0;
    2fca:	ldr	r0, [sp, #440]	; 0x1b8
    2fcc:	bl	e580 <strlen>
    2fd0:	cmp	r0, #62	; 0x3e
    2fd2:	bls.n	2fdc <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x30>
    2fd4:	movs	r6, #0
    else 
    {
      OpenFileByIndex(ret, FILE_WRITE_BEGIN);
    }
    return ret;
  }
    2fd6:	mov	r0, r6
    2fd8:	add	sp, #420	; 0x1a4
    2fda:	pop	{r4, r5, r6, r7, pc}
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = storage-1;
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    2fdc:	adds	r2, r0, #1
    2fde:	ldr	r1, [sp, #440]	; 0x1b8
    2fe0:	add	r0, sp, #96	; 0x60
    2fe2:	bl	b0e0 <memcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    2fe6:	ldr.w	r6, [r4, #244]	; 0xf4
    if (parent == 0xFFFFFFFFUL) parent = storage-1;
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.store = p.store;
    2fea:	ldrh.w	r3, [sp, #14]
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    2fee:	ldr	r2, [sp, #4]
    if (parent == 0xFFFFFFFFUL) parent = storage-1;
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.store = p.store;
    2ff0:	strh.w	r3, [sp, #94]	; 0x5e
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    2ff4:	adds	r1, r6, #1
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    2ff6:	movs	r3, #0
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    2ff8:	str.w	r1, [r4, #244]	; 0xf4
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    2ffc:	str	r3, [sp, #84]	; 0x54
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    2ffe:	mov	r1, r6
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    3000:	movs	r3, #1
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    3002:	str	r2, [sp, #88]	; 0x58
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    3004:	mov	r0, r4
    3006:	add	r2, sp, #80	; 0x50
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.store = p.store;
    r.parent = parent;
    3008:	str	r5, [sp, #80]	; 0x50
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    300a:	strb.w	r7, [sp, #92]	; 0x5c
    // New folder is empty, scanned = true.
    r.scanned = 1;
    300e:	strb.w	r3, [sp, #93]	; 0x5d
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    3012:	bl	19b4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    3016:	mov	r2, sp
    3018:	mov	r1, r5
    301a:	mov	r0, r4
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    301c:	str	r6, [sp, #4]
    WriteIndexRecord(parent, p);
    301e:	bl	19b4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    3022:	cbnz	r7, 3034 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x88>
      sd_mkdir(store,filename);
      mtp_lock_storage(false);
    } 
    else 
    {
      OpenFileByIndex(ret, FILE_WRITE_BEGIN);
    3024:	mov	r0, r4
    3026:	movs	r2, #2
    3028:	mov	r1, r6
    302a:	bl	29e0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    }
    return ret;
  }
    302e:	mov	r0, r6
    3030:	add	sp, #420	; 0x1a4
    3032:	pop	{r4, r5, r6, r7, pc}
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    if (folder) 
    {
      char filename[256];
      uint16_t store =ConstructFilename(ret, filename, 256);
    3034:	add	r2, sp, #160	; 0xa0
    3036:	mov	r1, r6
    3038:	mov.w	r3, #256	; 0x100
    303c:	mov	r0, r4
    303e:	bl	1fd4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    3042:	add.w	r0, r4, r0, lsl #2
    3046:	add	r1, sp, #160	; 0xa0
    3048:	ldr	r0, [r0, #88]	; 0x58
    304a:	ldr	r3, [r0, #0]
    304c:	ldr	r3, [r3, #8]
    304e:	blx	r3
    else 
    {
      OpenFileByIndex(ret, FILE_WRITE_BEGIN);
    }
    return ret;
  }
    3050:	mov	r0, r6
    3052:	add	sp, #420	; 0x1a4
    3054:	pop	{r4, r5, r6, r7, pc}
    3056:	nop

00003058 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>:
      AppendIndexRecord(r);
    }
  }

  void MTPStorage_SD::ScanDir(uint32_t storage, uint32_t i) 
  { Record record = ReadIndexRecord(i);
    3058:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    305c:	sub	sp, #180	; 0xb4
    305e:	mov	r1, r0
    3060:	mov	r4, r0
    3062:	add	r0, sp, #16
    3064:	mov	r8, r2
    3066:	bl	1b7c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    306a:	ldrb.w	r3, [sp, #28]
    306e:	cbz	r3, 3076 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1e>
    3070:	ldrb.w	r2, [sp, #29]
    3074:	cbz	r2, 307c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x24>
      }
      record.scanned = true;
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }
    3076:	add	sp, #180	; 0xb4
    3078:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  }

  void MTPStorage_SD::ScanDir(uint32_t storage, uint32_t i) 
  { Record record = ReadIndexRecord(i);
    if (record.isdir && !record.scanned) {
      OpenFileByIndex(i);
    307c:	mov	r0, r4
    307e:	mov	r1, r8
    3080:	bl	29e0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    3084:	ldr.w	r0, [r4, #204]	; 0xcc
    3088:	cmp	r0, #0
    308a:	beq.n	3076 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1e>
    308c:	ldr	r3, [r0, #0]
    308e:	ldr	r7, [pc, #204]	; (315c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x104>)
    3090:	ldr	r3, [r3, #68]	; 0x44
    3092:	cmp	r3, r7
    3094:	bne.n	3156 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xfe>
    3096:	ldr	r0, [r0, #16]
    3098:	cmp	r0, #0
    309a:	beq.n	3076 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1e>
    309c:	ldr	r3, [r0, #0]
    309e:	ldr	r3, [r3, #68]	; 0x44
    30a0:	cmp	r3, r7
    30a2:	bne.n	3156 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xfe>
    30a4:	ldr	r0, [r0, #16]
    30a6:	cmp	r0, #0
    30a8:	beq.n	3076 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1e>
    30aa:	ldr	r3, [r0, #0]
    30ac:	ldr	r3, [r3, #68]	; 0x44
    30ae:	cmp	r3, r7
    30b0:	bne.n	3156 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xfe>
    30b2:	ldr	r0, [r0, #16]
    30b4:	cmp	r0, #0
    30b6:	beq.n	3076 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1e>
    30b8:	ldr	r3, [r0, #0]
    30ba:	ldr	r3, [r3, #68]	; 0x44
    30bc:	cmp	r3, r7
    30be:	bne.n	3156 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xfe>
    30c0:	ldr	r0, [r0, #16]
    30c2:	cmp	r0, #0
    30c4:	beq.n	3076 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1e>
    30c6:	ldr	r3, [r0, #0]
    30c8:	ldr	r3, [r3, #68]	; 0x44
    30ca:	cmp	r3, r7
    30cc:	bne.n	3156 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xfe>
    30ce:	ldr	r0, [r0, #16]
    30d0:	cmp	r0, #0
    30d2:	beq.n	3076 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1e>
    30d4:	ldr	r3, [r0, #0]
    30d6:	ldr	r3, [r3, #68]	; 0x44
    30d8:	blx	r3
      if (!sd_isOpen(file_)) return;
    30da:	cmp	r0, #0
    30dc:	beq.n	3076 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1e>
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    30de:	ldr.w	r9, [pc, #132]	; 3164 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    30e2:	ldr.w	fp, [pc, #132]	; 3168 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x110>
    30e6:	movs	r5, #0
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    30e8:	ldr.w	r1, [r4, #204]	; 0xcc
    30ec:	cmp	r1, #0
    30ee:	beq.n	316c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x114>
    30f0:	ldr	r3, [r1, #0]
    30f2:	ldr	r2, [pc, #108]	; (3160 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x108>)
    30f4:	ldr	r3, [r3, #80]	; 0x50
    30f6:	cmp	r3, r2
    30f8:	bne.w	360e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5b6>
    30fc:	ldr	r1, [r1, #16]
    30fe:	cmp	r1, #0
    3100:	beq.n	316c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x114>
    3102:	ldr	r3, [r1, #0]
    3104:	ldr	r3, [r3, #80]	; 0x50
    3106:	cmp	r3, r2
    3108:	bne.w	360e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5b6>
    310c:	ldr	r1, [r1, #16]
    310e:	cmp	r1, #0
    3110:	beq.n	316c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x114>
    3112:	ldr	r3, [r1, #0]
    3114:	ldr	r3, [r3, #80]	; 0x50
    3116:	cmp	r3, r2
    3118:	bne.w	360e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5b6>
    311c:	ldr	r1, [r1, #16]
    311e:	cbz	r1, 316c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x114>
    3120:	ldr	r3, [r1, #0]
    3122:	ldr	r3, [r3, #80]	; 0x50
    3124:	cmp	r3, r2
    3126:	bne.w	360e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5b6>
    312a:	ldr	r1, [r1, #16]
    312c:	cbz	r1, 316c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x114>
    312e:	ldr	r3, [r1, #0]
    3130:	ldr	r3, [r3, #80]	; 0x50
    3132:	cmp	r3, r2
    3134:	bne.w	360e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5b6>
    3138:	ldr	r1, [r1, #16]
    313a:	cbz	r1, 316c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x114>
    313c:	ldr	r3, [r1, #0]
    313e:	ldr	r3, [r3, #80]	; 0x50
    3140:	cmp	r3, r2
    3142:	bne.w	360e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5b6>
    3146:	ldr	r1, [r1, #16]
    3148:	cbz	r1, 316c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x114>
    314a:	ldr	r3, [r1, #0]
    314c:	movs	r2, #0
    314e:	ldr	r3, [r3, #80]	; 0x50
    3150:	add	r0, sp, #96	; 0x60
    3152:	blx	r3
    3154:	b.n	3182 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x12a>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    3156:	blx	r3
    3158:	b.n	30da <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x82>
    315a:	nop
    315c:	.word	0x0000050d
    3160:	.word	0x00000539
    3164:	.word	0x000119b8
    3168:	.word	0x00000eb1
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    316c:	movs	r3, #0
    316e:	mov.w	r2, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    3172:	str.w	r9, [sp, #96]	; 0x60
    3176:	strb.w	r3, [sp, #100]	; 0x64
    317a:	strb.w	r3, [sp, #108]	; 0x6c
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
    317e:	str	r3, [sp, #112]	; 0x70
    3180:	str	r2, [sp, #104]	; 0x68
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3182:	ldr.w	r2, [r4, #224]	; 0xe0
    3186:	cmp	r2, #0
    3188:	beq.n	321c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1c4>
    318a:	ldr	r3, [r2, #16]
    318c:	subs	r3, #1
    318e:	str	r3, [r2, #16]
    3190:	cmp	r3, #0
    3192:	bne.n	321c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1c4>
    3194:	ldr.w	r6, [r4, #224]	; 0xe0
    3198:	cmp	r6, #0
    319a:	beq.n	321c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1c4>
    319c:	ldr	r3, [r6, #0]
    319e:	ldr	r3, [r3, #32]
    31a0:	cmp	r3, fp
    31a2:	bne.w	3630 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5d8>
    31a6:	ldr	r2, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    31a8:	str.w	r9, [r6]
    31ac:	ldr	r1, [pc, #612]	; (3414 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3bc>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    31ae:	cbz	r2, 3214 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1bc>
    31b0:	ldr	r3, [r2, #16]
    31b2:	subs	r3, #1
    31b4:	str	r3, [r2, #16]
    31b6:	cbnz	r3, 3214 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1bc>
    31b8:	ldr.w	sl, [r6, #16]
    31bc:	cmp.w	sl, #0
    31c0:	beq.n	3214 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1bc>
    31c2:	ldr.w	r3, [sl]
    31c6:	ldr	r3, [r3, #32]
    31c8:	cmp	r3, fp
    31ca:	bne.w	37e2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x78a>
    31ce:	ldr.w	r2, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    31d2:	str.w	r1, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    31d6:	cbz	r2, 320c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b4>
    31d8:	ldr	r3, [r2, #16]
    31da:	subs	r3, #1
    31dc:	str	r3, [r2, #16]
    31de:	cbnz	r3, 320c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b4>
    31e0:	ldr.w	r3, [sl, #16]
    31e4:	cbz	r3, 320c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b4>
    31e6:	ldr	r2, [r3, #0]
    31e8:	ldr	r2, [r2, #32]
    31ea:	cmp	r2, fp
    31ec:	bne.w	37f4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x79c>
    31f0:	ldr	r1, [r3, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    31f2:	str.w	r9, [r3]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    31f6:	cbz	r1, 3204 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ac>
    31f8:	ldr	r2, [r1, #16]
    31fa:	subs	r2, #1
    31fc:	str	r2, [r1, #16]
    31fe:	cmp	r2, #0
    3200:	beq.w	3648 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5f0>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    3204:	mov	r0, r3
    3206:	movs	r1, #20
    3208:	bl	c9a8 <operator delete(void*, unsigned int)>
    320c:	mov	r0, sl
    320e:	movs	r1, #20
    3210:	bl	c9a8 <operator delete(void*, unsigned int)>
    3214:	mov	r0, r6
    3216:	movs	r1, #20
    3218:	bl	c9a8 <operator delete(void*, unsigned int)>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    321c:	ldr	r3, [sp, #112]	; 0x70
    321e:	str.w	r3, [r4, #224]	; 0xe0
		if (f) f->refcount++;
    3222:	cmp	r3, #0
    3224:	beq.n	32c4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26c>
    3226:	ldr	r2, [r3, #16]
		return *this;
	}
	virtual ~File() {
    3228:	ldr	r1, [pc, #488]	; (3414 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3bc>)
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    322a:	adds	r2, #1
    322c:	str	r2, [r3, #16]
    322e:	ldr	r2, [sp, #112]	; 0x70
		return *this;
	}
	virtual ~File() {
    3230:	str.w	r9, [sp, #96]	; 0x60
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3234:	cmp	r2, #0
    3236:	beq.n	32c4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26c>
    3238:	ldr	r3, [r2, #16]
    323a:	subs	r3, #1
    323c:	str	r3, [r2, #16]
    323e:	cmp	r3, #0
    3240:	bne.n	32c4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26c>
    3242:	ldr	r6, [sp, #112]	; 0x70
    3244:	cmp	r6, #0
    3246:	beq.n	32c4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26c>
    3248:	ldr	r3, [r6, #0]
    324a:	ldr	r3, [r3, #32]
    324c:	cmp	r3, fp
    324e:	bne.w	362a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5d2>
    3252:	ldr	r2, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3254:	str	r1, [r6, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3256:	cbz	r2, 32bc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x264>
    3258:	ldr	r3, [r2, #16]
    325a:	subs	r3, #1
    325c:	str	r3, [r2, #16]
    325e:	cbnz	r3, 32bc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x264>
    3260:	ldr.w	sl, [r6, #16]
    3264:	cmp.w	sl, #0
    3268:	beq.n	32bc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x264>
    326a:	ldr.w	r3, [sl]
    326e:	ldr	r3, [r3, #32]
    3270:	cmp	r3, fp
    3272:	bne.w	37e8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x790>
    3276:	ldr.w	r2, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    327a:	str.w	r1, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    327e:	cbz	r2, 32b4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x25c>
    3280:	ldr	r3, [r2, #16]
    3282:	subs	r3, #1
    3284:	str	r3, [r2, #16]
    3286:	cbnz	r3, 32b4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x25c>
    3288:	ldr.w	r3, [sl, #16]
    328c:	cbz	r3, 32b4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x25c>
    328e:	ldr	r2, [r3, #0]
    3290:	ldr	r2, [r2, #32]
    3292:	cmp	r2, fp
    3294:	bne.w	37ee <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x796>
    3298:	ldr	r1, [r3, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    329a:	str.w	r9, [r3]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    329e:	cbz	r1, 32ac <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x254>
    32a0:	ldr	r2, [r1, #16]
    32a2:	subs	r2, #1
    32a4:	str	r2, [r1, #16]
    32a6:	cmp	r2, #0
    32a8:	beq.w	3718 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6c0>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    32ac:	mov	r0, r3
    32ae:	movs	r1, #20
    32b0:	bl	c9a8 <operator delete(void*, unsigned int)>
    32b4:	mov	r0, sl
    32b6:	movs	r1, #20
    32b8:	bl	c9a8 <operator delete(void*, unsigned int)>
    32bc:	mov	r0, r6
    32be:	movs	r1, #20
    32c0:	bl	c9a8 <operator delete(void*, unsigned int)>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    32c4:	ldr.w	r0, [r4, #224]	; 0xe0
    32c8:	cmp	r0, #0
    32ca:	beq.w	33f6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39e>
    32ce:	ldr	r3, [r0, #0]
    32d0:	ldr	r3, [r3, #68]	; 0x44
    32d2:	cmp	r3, r7
    32d4:	bne.w	340e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b6>
    32d8:	ldr	r0, [r0, #16]
    32da:	cmp	r0, #0
    32dc:	beq.w	33f6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39e>
    32e0:	ldr	r3, [r0, #0]
    32e2:	ldr	r3, [r3, #68]	; 0x44
    32e4:	cmp	r3, r7
    32e6:	bne.w	340e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b6>
    32ea:	ldr	r0, [r0, #16]
    32ec:	cmp	r0, #0
    32ee:	beq.w	33f6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39e>
    32f2:	ldr	r3, [r0, #0]
    32f4:	ldr	r3, [r3, #68]	; 0x44
    32f6:	cmp	r3, r7
    32f8:	bne.w	340e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b6>
    32fc:	ldr	r0, [r0, #16]
    32fe:	cmp	r0, #0
    3300:	beq.n	33f6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39e>
    3302:	ldr	r3, [r0, #0]
    3304:	ldr	r3, [r3, #68]	; 0x44
    3306:	cmp	r3, r7
    3308:	bne.w	340e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b6>
    330c:	ldr	r0, [r0, #16]
    330e:	cmp	r0, #0
    3310:	beq.n	33f6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39e>
    3312:	ldr	r3, [r0, #0]
    3314:	ldr	r3, [r3, #68]	; 0x44
    3316:	cmp	r3, r7
    3318:	bne.n	340e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b6>
    331a:	ldr	r0, [r0, #16]
    331c:	cmp	r0, #0
    331e:	beq.n	33f6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39e>
    3320:	ldr	r3, [r0, #0]
    3322:	ldr	r3, [r3, #68]	; 0x44
    3324:	cmp	r3, r7
    3326:	bne.n	340e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b6>
    3328:	ldr	r0, [r0, #16]
    332a:	cmp	r0, #0
    332c:	beq.n	33f6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39e>
    332e:	ldr	r3, [r0, #0]
    3330:	ldr	r3, [r3, #68]	; 0x44
    3332:	cmp	r3, r7
    3334:	bne.n	340e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b6>
    3336:	ldr	r0, [r0, #16]
    3338:	cmp	r0, #0
    333a:	beq.n	33f6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39e>
    333c:	ldr	r3, [r0, #0]
    333e:	ldr	r3, [r3, #68]	; 0x44
    3340:	cmp	r3, r7
    3342:	bne.n	340e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b6>
    3344:	ldr	r0, [r0, #16]
    3346:	cmp	r0, #0
    3348:	beq.n	33f6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39e>
    334a:	ldr	r3, [r0, #0]
    334c:	ldr	r3, [r3, #68]	; 0x44
    334e:	blx	r3
      int sibling = 0;
      while (true) 
      { mtp_lock_storage(true);
        child_=file_.openNextFile();
        mtp_lock_storage(false);
        if(!sd_isOpen(child_)) break;
    3350:	cmp	r0, #0
    3352:	beq.n	33f6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39e>
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    3354:	ldr.w	r3, [r4, #224]	; 0xe0

        Record r;
        r.store = record.store;
    3358:	ldrh.w	r2, [sp, #30]
        r.parent = i;
    335c:	str.w	r8, [sp, #96]	; 0x60
        r.sibling = sibling;
    3360:	str	r5, [sp, #104]	; 0x68
        child_=file_.openNextFile();
        mtp_lock_storage(false);
        if(!sd_isOpen(child_)) break;

        Record r;
        r.store = record.store;
    3362:	strh.w	r2, [sp, #110]	; 0x6e
    3366:	cmp	r3, #0
    3368:	beq.w	3582 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x52a>
    336c:	ldr	r1, [r3, #0]
    336e:	ldr	r2, [pc, #168]	; (3418 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c0>)
    3370:	ldr	r1, [r1, #76]	; 0x4c
    3372:	cmp	r1, r2
    3374:	bne.n	341c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c4>
    3376:	ldr	r0, [r3, #16]
    3378:	cmp	r0, #0
    337a:	beq.w	3582 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x52a>
    337e:	ldr	r1, [r0, #0]
    3380:	ldr	r1, [r1, #76]	; 0x4c
    3382:	cmp	r1, r2
    3384:	bne.n	341e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c6>
    3386:	ldr	r0, [r0, #16]
    3388:	cmp	r0, #0
    338a:	beq.w	3582 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x52a>
    338e:	ldr	r1, [r0, #0]
    3390:	ldr	r1, [r1, #76]	; 0x4c
    3392:	cmp	r1, r2
    3394:	bne.n	341e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c6>
    3396:	ldr	r0, [r0, #16]
    3398:	cmp	r0, #0
    339a:	beq.w	3582 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x52a>
    339e:	ldr	r1, [r0, #0]
    33a0:	ldr	r1, [r1, #76]	; 0x4c
    33a2:	cmp	r1, r2
    33a4:	bne.n	341e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c6>
    33a6:	ldr	r0, [r0, #16]
    33a8:	cmp	r0, #0
    33aa:	beq.w	3582 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x52a>
    33ae:	ldr	r1, [r0, #0]
    33b0:	ldr	r1, [r1, #76]	; 0x4c
    33b2:	cmp	r1, r2
    33b4:	bne.n	341e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c6>
    33b6:	ldr	r0, [r0, #16]
    33b8:	cmp	r0, #0
    33ba:	beq.w	3582 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x52a>
    33be:	ldr	r1, [r0, #0]
    33c0:	ldr	r1, [r1, #76]	; 0x4c
    33c2:	cmp	r1, r2
    33c4:	bne.n	341e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c6>
    33c6:	ldr	r0, [r0, #16]
    33c8:	cmp	r0, #0
    33ca:	beq.w	3582 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x52a>
    33ce:	ldr	r1, [r0, #0]
    33d0:	ldr	r1, [r1, #76]	; 0x4c
    33d2:	cmp	r1, r2
    33d4:	bne.n	341e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c6>
    33d6:	ldr	r0, [r0, #16]
    33d8:	cmp	r0, #0
    33da:	beq.w	3582 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x52a>
    33de:	ldr	r1, [r0, #0]
    33e0:	ldr	r1, [r1, #76]	; 0x4c
    33e2:	cmp	r1, r2
    33e4:	bne.n	341e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c6>
    33e6:	ldr	r0, [r0, #16]
    33e8:	cmp	r0, #0
    33ea:	beq.w	3582 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x52a>
    33ee:	ldr	r3, [r0, #0]
    33f0:	ldr	r3, [r3, #76]	; 0x4c
    33f2:	blx	r3
    33f4:	b.n	3420 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c8>
        r.scanned = false;
        sd_getName(child_,r.name,64);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    33f6:	movs	r3, #1
      record.child = sibling;
      WriteIndexRecord(i, record);
    33f8:	add	r2, sp, #16
    33fa:	mov	r1, r8
    33fc:	mov	r0, r4
        sd_getName(child_,r.name,64);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
      record.child = sibling;
    33fe:	str	r5, [sp, #20]
        r.scanned = false;
        sd_getName(child_,r.name,64);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    3400:	strb.w	r3, [sp, #29]
      record.child = sibling;
      WriteIndexRecord(i, record);
    3404:	bl	19b4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    }
  }
    3408:	add	sp, #180	; 0xb4
    340a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    340e:	blx	r3
    3410:	b.n	3350 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2f8>
    3412:	nop
    3414:	.word	0x000119b8
    3418:	.word	0x0000052d
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    341c:	mov	r0, r3
    341e:	blx	r1

        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
    3420:	strb.w	r0, [sp, #108]	; 0x6c
    3424:	ldr.w	r3, [r4, #224]	; 0xe0
        r.child = r.isdir ? 0 : child_.size();
    3428:	cmp	r0, #0
    342a:	beq.w	3588 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x530>
    342e:	movs	r0, #0
        r.scanned = false;
    3430:	movs	r2, #0
        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : child_.size();
    3432:	str	r0, [sp, #100]	; 0x64
        r.scanned = false;
    3434:	strb.w	r2, [sp, #109]	; 0x6d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    3438:	cmp	r3, #0
    343a:	beq.w	360a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5b2>
    343e:	ldr	r1, [r3, #0]
    3440:	ldr	r2, [pc, #500]	; (3638 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5e0>)
    3442:	ldr	r1, [r1, #72]	; 0x48
    3444:	cmp	r1, r2
    3446:	bne.w	3602 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5aa>
    344a:	ldr	r0, [r3, #16]
    344c:	cmp	r0, #0
    344e:	beq.w	360a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5b2>
    3452:	ldr	r3, [r0, #0]
    3454:	ldr	r3, [r3, #72]	; 0x48
    3456:	cmp	r3, r2
    3458:	bne.n	34cc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x474>
    345a:	ldr	r0, [r0, #16]
    345c:	cmp	r0, #0
    345e:	beq.w	360a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5b2>
    3462:	ldr	r3, [r0, #0]
    3464:	ldr	r3, [r3, #72]	; 0x48
    3466:	cmp	r3, r2
    3468:	bne.n	34cc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x474>
    346a:	ldr	r0, [r0, #16]
    346c:	cmp	r0, #0
    346e:	beq.w	360a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5b2>
    3472:	ldr	r3, [r0, #0]
    3474:	ldr	r3, [r3, #72]	; 0x48
    3476:	cmp	r3, r2
    3478:	bne.n	34cc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x474>
    347a:	ldr	r0, [r0, #16]
    347c:	cmp	r0, #0
    347e:	beq.w	360a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5b2>
    3482:	ldr	r3, [r0, #0]
    3484:	ldr	r3, [r3, #72]	; 0x48
    3486:	cmp	r3, r2
    3488:	bne.n	34cc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x474>
    348a:	ldr	r0, [r0, #16]
    348c:	cmp	r0, #0
    348e:	beq.w	360a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5b2>
    3492:	ldr	r3, [r0, #0]
    3494:	ldr	r3, [r3, #72]	; 0x48
    3496:	cmp	r3, r2
    3498:	bne.n	34cc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x474>
    349a:	ldr	r0, [r0, #16]
    349c:	cmp	r0, #0
    349e:	beq.w	360a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5b2>
    34a2:	ldr	r3, [r0, #0]
    34a4:	ldr	r3, [r3, #72]	; 0x48
    34a6:	cmp	r3, r2
    34a8:	bne.n	34cc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x474>
    34aa:	ldr	r0, [r0, #16]
    34ac:	cmp	r0, #0
    34ae:	beq.w	360a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5b2>
    34b2:	ldr	r3, [r0, #0]
    34b4:	ldr	r3, [r3, #72]	; 0x48
    34b6:	cmp	r3, r2
    34b8:	bne.n	34cc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x474>
    34ba:	ldr	r0, [r0, #16]
    34bc:	cmp	r0, #0
    34be:	beq.w	360a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5b2>
    34c2:	ldr	r3, [r0, #0]
    34c4:	ldr	r3, [r3, #72]	; 0x48
    34c6:	blx	r3
    34c8:	mov	r1, r0
    34ca:	b.n	34d0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x478>
    34cc:	blx	r3
    34ce:	mov	r1, r0
        sd_getName(child_,r.name,64);
    34d0:	add	r0, sp, #112	; 0x70
    34d2:	bl	e4c0 <strcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    34d6:	ldr.w	r5, [r4, #244]	; 0xf4
    34da:	adds	r3, r5, #1
    WriteIndexRecord(new_record, r);
    34dc:	mov	r0, r4
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    34de:	str.w	r3, [r4, #244]	; 0xf4
    WriteIndexRecord(new_record, r);
    34e2:	mov	r1, r5
    34e4:	add	r2, sp, #96	; 0x60
    34e6:	bl	19b4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    34ea:	ldr.w	r0, [r4, #224]	; 0xe0
    34ee:	cmp	r0, #0
    34f0:	beq.w	30e8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x90>
    34f4:	ldr	r2, [r0, #0]
    34f6:	ldr	r3, [pc, #324]	; (363c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5e4>)
    34f8:	ldr	r2, [r2, #64]	; 0x40
    34fa:	cmp	r2, r3
    34fc:	bne.n	357e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x526>
    34fe:	ldr	r0, [r0, #16]
    3500:	cmp	r0, #0
    3502:	beq.w	30e8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x90>
    3506:	ldr	r2, [r0, #0]
    3508:	ldr	r2, [r2, #64]	; 0x40
    350a:	cmp	r2, r3
    350c:	bne.n	357e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x526>
    350e:	ldr	r0, [r0, #16]
    3510:	cmp	r0, #0
    3512:	beq.w	30e8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x90>
    3516:	ldr	r2, [r0, #0]
    3518:	ldr	r2, [r2, #64]	; 0x40
    351a:	cmp	r2, r3
    351c:	bne.n	357e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x526>
    351e:	ldr	r0, [r0, #16]
    3520:	cmp	r0, #0
    3522:	beq.w	30e8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x90>
    3526:	ldr	r2, [r0, #0]
    3528:	ldr	r2, [r2, #64]	; 0x40
    352a:	cmp	r2, r3
    352c:	bne.n	357e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x526>
    352e:	ldr	r0, [r0, #16]
    3530:	cmp	r0, #0
    3532:	beq.w	30e8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x90>
    3536:	ldr	r2, [r0, #0]
    3538:	ldr	r2, [r2, #64]	; 0x40
    353a:	cmp	r2, r3
    353c:	bne.n	357e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x526>
    353e:	ldr	r0, [r0, #16]
    3540:	cmp	r0, #0
    3542:	beq.w	30e8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x90>
    3546:	ldr	r2, [r0, #0]
    3548:	ldr	r2, [r2, #64]	; 0x40
    354a:	cmp	r2, r3
    354c:	bne.n	357e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x526>
    354e:	ldr	r0, [r0, #16]
    3550:	cmp	r0, #0
    3552:	beq.w	30e8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x90>
    3556:	ldr	r2, [r0, #0]
    3558:	ldr	r2, [r2, #64]	; 0x40
    355a:	cmp	r2, r3
    355c:	bne.n	357e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x526>
    355e:	ldr	r0, [r0, #16]
    3560:	cmp	r0, #0
    3562:	beq.w	30e8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x90>
    3566:	ldr	r2, [r0, #0]
    3568:	ldr	r2, [r2, #64]	; 0x40
    356a:	cmp	r2, r3
    356c:	bne.n	357e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x526>
    356e:	ldr	r0, [r0, #16]
    3570:	cmp	r0, #0
    3572:	beq.w	30e8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x90>
    3576:	ldr	r3, [r0, #0]
    3578:	ldr	r3, [r3, #64]	; 0x40
    357a:	blx	r3
    357c:	b.n	30e8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x90>
    357e:	blx	r2
    if (record.isdir && !record.scanned) {
      OpenFileByIndex(i);
      if (!sd_isOpen(file_)) return;
    
      int sibling = 0;
      while (true) 
    3580:	b.n	30e8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x90>

        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
    3582:	movs	r2, #0
    3584:	strb.w	r2, [sp, #108]	; 0x6c
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    3588:	cmp	r3, #0
    358a:	beq.n	3620 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c8>
    358c:	ldr	r1, [r3, #0]
    358e:	ldr	r2, [pc, #176]	; (3640 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5e8>)
    3590:	ldr	r1, [r1, #60]	; 0x3c
    3592:	cmp	r1, r2
    3594:	bne.n	3616 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    3596:	ldr	r0, [r3, #16]
    3598:	cbz	r0, 35ee <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x596>
    359a:	ldr	r1, [r0, #0]
    359c:	ldr	r1, [r1, #60]	; 0x3c
    359e:	cmp	r1, r2
    35a0:	bne.n	3618 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c0>
    35a2:	ldr	r0, [r0, #16]
    35a4:	cbz	r0, 35ee <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x596>
    35a6:	ldr	r1, [r0, #0]
    35a8:	ldr	r1, [r1, #60]	; 0x3c
    35aa:	cmp	r1, r2
    35ac:	bne.n	3618 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c0>
    35ae:	ldr	r0, [r0, #16]
    35b0:	cbz	r0, 35ee <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x596>
    35b2:	ldr	r1, [r0, #0]
    35b4:	ldr	r1, [r1, #60]	; 0x3c
    35b6:	cmp	r1, r2
    35b8:	bne.n	3618 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c0>
    35ba:	ldr	r0, [r0, #16]
    35bc:	cbz	r0, 35ee <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x596>
    35be:	ldr	r1, [r0, #0]
    35c0:	ldr	r1, [r1, #60]	; 0x3c
    35c2:	cmp	r1, r2
    35c4:	bne.n	3618 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c0>
    35c6:	ldr	r0, [r0, #16]
    35c8:	cbz	r0, 35ee <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x596>
    35ca:	ldr	r1, [r0, #0]
    35cc:	ldr	r1, [r1, #60]	; 0x3c
    35ce:	cmp	r1, r2
    35d0:	bne.n	3618 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c0>
    35d2:	ldr	r0, [r0, #16]
    35d4:	cbz	r0, 35ee <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x596>
    35d6:	ldr	r1, [r0, #0]
    35d8:	ldr	r1, [r1, #60]	; 0x3c
    35da:	cmp	r1, r2
    35dc:	bne.n	3618 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c0>
    35de:	ldr	r0, [r0, #16]
    35e0:	cbz	r0, 35ee <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x596>
    35e2:	ldr	r3, [r0, #0]
    35e4:	ldr	r3, [r3, #60]	; 0x3c
    35e6:	blx	r3
    35e8:	ldr.w	r3, [r4, #224]	; 0xe0
    35ec:	b.n	3430 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3d8>
        r.child = r.isdir ? 0 : child_.size();
    35ee:	movs	r2, #0
        r.scanned = false;
    35f0:	strb.w	r2, [sp, #109]	; 0x6d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    35f4:	ldr	r1, [r3, #0]
        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : child_.size();
    35f6:	str	r2, [sp, #100]	; 0x64
    35f8:	ldr	r1, [r1, #72]	; 0x48
    35fa:	ldr	r2, [pc, #60]	; (3638 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5e0>)
    35fc:	cmp	r1, r2
    35fe:	beq.w	344a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3f2>
    3602:	mov	r0, r3
    3604:	blx	r1
    3606:	mov	r1, r0
    3608:	b.n	34d0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x478>
    360a:	ldr	r1, [pc, #56]	; (3644 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ec>)
    360c:	b.n	34d0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x478>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    360e:	movs	r2, #0
    3610:	add	r0, sp, #96	; 0x60
    3612:	blx	r3
    3614:	b.n	3182 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x12a>
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    3616:	mov	r0, r3
    3618:	blx	r1
    361a:	ldr.w	r3, [r4, #224]	; 0xe0
    361e:	b.n	3430 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3d8>
    3620:	str	r3, [sp, #100]	; 0x64
        r.scanned = false;
    3622:	strb.w	r3, [sp, #109]	; 0x6d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    3626:	ldr	r1, [pc, #28]	; (3644 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ec>)
    3628:	b.n	34d0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x478>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    362a:	mov	r0, r6
    362c:	blx	r3
    362e:	b.n	32c4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26c>
    3630:	mov	r0, r6
    3632:	blx	r3
    3634:	b.n	321c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1c4>
    3636:	nop
    3638:	.word	0x00000519
    363c:	.word	0x00000501
    3640:	.word	0x000004f1
    3644:	.word	0x00011ab0
    3648:	ldr	r2, [r3, #16]
    364a:	cmp	r2, #0
    364c:	beq.w	3204 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ac>
    3650:	ldr	r1, [r2, #0]
    3652:	ldr	r1, [r1, #32]
    3654:	cmp	r1, fp
    3656:	bne.w	3804 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7ac>
    365a:	ldr	r0, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    365c:	str.w	r9, [r2]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3660:	cmp	r0, #0
    3662:	beq.n	370a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6b2>
    3664:	ldr	r1, [r0, #16]
    3666:	subs	r1, #1
    3668:	str	r1, [r0, #16]
    366a:	cmp	r1, #0
    366c:	bne.n	370a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6b2>
    366e:	ldr	r1, [r2, #16]
    3670:	str	r1, [sp, #0]
    3672:	cmp	r1, #0
    3674:	beq.n	370a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6b2>
    3676:	ldr	r0, [sp, #0]
    3678:	ldr	r1, [r0, #0]
    367a:	ldr	r1, [r1, #32]
    367c:	cmp	r1, fp
    367e:	bne.w	381c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7c4>
    3682:	mov	r1, r0
    3684:	ldr	r0, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3686:	str.w	r9, [r1]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    368a:	cmp	r0, #0
    368c:	beq.n	36fa <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6a2>
    368e:	ldr	r1, [r0, #16]
    3690:	subs	r1, #1
    3692:	str	r1, [r0, #16]
    3694:	cbnz	r1, 36fa <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6a2>
    3696:	ldr	r1, [sp, #0]
    3698:	ldr.w	ip, [r1, #16]
    369c:	cmp.w	ip, #0
    36a0:	beq.n	36fa <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6a2>
    36a2:	ldr.w	r0, [ip]
    36a6:	ldr	r0, [r0, #32]
    36a8:	cmp	r0, fp
    36aa:	mov	r1, r0
    36ac:	bne.w	3838 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7e0>
    36b0:	ldr.w	r0, [ip, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    36b4:	str.w	r9, [ip]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    36b8:	cbz	r0, 36ea <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x692>
    36ba:	ldr	r1, [r0, #16]
    36bc:	add.w	lr, r1, #4294967295
    36c0:	str.w	lr, [r0, #16]
    36c4:	cmp.w	lr, #0
    36c8:	bne.n	36ea <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x692>
    36ca:	ldr.w	r0, [ip, #16]
    36ce:	cbz	r0, 36ea <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x692>
    36d0:	ldr.w	lr, [r0]
    36d4:	str.w	ip, [sp, #12]
    36d8:	str	r2, [sp, #8]
    36da:	str	r3, [sp, #4]
    36dc:	ldr.w	r3, [lr, #32]
    36e0:	blx	r3
    36e2:	ldr.w	ip, [sp, #12]
    36e6:	ldr	r2, [sp, #8]
    36e8:	ldr	r3, [sp, #4]
    36ea:	str	r2, [sp, #8]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    36ec:	mov	r0, ip
    36ee:	movs	r1, #20
    36f0:	str	r3, [sp, #4]
    36f2:	bl	c9a8 <operator delete(void*, unsigned int)>
    36f6:	ldr	r3, [sp, #4]
    36f8:	ldr	r2, [sp, #8]
    36fa:	ldr	r0, [sp, #0]
    36fc:	str	r2, [sp, #8]
    36fe:	movs	r1, #20
    3700:	str	r3, [sp, #4]
    3702:	bl	c9a8 <operator delete(void*, unsigned int)>
    3706:	ldr	r3, [sp, #4]
    3708:	ldr	r2, [sp, #8]
    370a:	str	r3, [sp, #0]
    370c:	mov	r0, r2
    370e:	movs	r1, #20
    3710:	bl	c9a8 <operator delete(void*, unsigned int)>
    3714:	ldr	r3, [sp, #0]
    3716:	b.n	3204 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ac>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3718:	ldr	r2, [r3, #16]
    371a:	cmp	r2, #0
    371c:	beq.w	32ac <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x254>
    3720:	ldr	r1, [r2, #0]
    3722:	ldr	r1, [r1, #32]
    3724:	cmp	r1, fp
    3726:	bne.n	37fa <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7a2>
    3728:	ldr	r0, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    372a:	str.w	r9, [r2]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    372e:	cmp	r0, #0
    3730:	beq.n	37d4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x77c>
    3732:	ldr	r1, [r0, #16]
    3734:	subs	r1, #1
    3736:	str	r1, [r0, #16]
    3738:	cmp	r1, #0
    373a:	bne.n	37d4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x77c>
    373c:	ldr	r1, [r2, #16]
    373e:	str	r1, [sp, #0]
    3740:	cmp	r1, #0
    3742:	beq.n	37d4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x77c>
    3744:	ldr	r0, [sp, #0]
    3746:	ldr	r1, [r0, #0]
    3748:	ldr	r1, [r1, #32]
    374a:	cmp	r1, fp
    374c:	bne.n	380e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7b6>
    374e:	mov	r1, r0
    3750:	ldr	r0, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3752:	str.w	r9, [r1]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3756:	cmp	r0, #0
    3758:	beq.n	37c4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x76c>
    375a:	ldr	r1, [r0, #16]
    375c:	subs	r1, #1
    375e:	str	r1, [r0, #16]
    3760:	cbnz	r1, 37c4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x76c>
    3762:	ldr	r1, [sp, #0]
    3764:	ldr.w	ip, [r1, #16]
    3768:	cmp.w	ip, #0
    376c:	beq.n	37c4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x76c>
    376e:	ldr.w	r0, [ip]
    3772:	ldr	r0, [r0, #32]
    3774:	cmp	r0, fp
    3776:	mov	r1, r0
    3778:	bne.n	382a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7d2>
    377a:	ldr.w	r0, [ip, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    377e:	str.w	r9, [ip]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3782:	cbz	r0, 37b4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x75c>
    3784:	ldr	r1, [r0, #16]
    3786:	add.w	lr, r1, #4294967295
    378a:	str.w	lr, [r0, #16]
    378e:	cmp.w	lr, #0
    3792:	bne.n	37b4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x75c>
    3794:	ldr.w	r0, [ip, #16]
    3798:	cbz	r0, 37b4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x75c>
    379a:	ldr.w	lr, [r0]
    379e:	str.w	ip, [sp, #12]
    37a2:	str	r2, [sp, #8]
    37a4:	str	r3, [sp, #4]
    37a6:	ldr.w	r3, [lr, #32]
    37aa:	blx	r3
    37ac:	ldr.w	ip, [sp, #12]
    37b0:	ldr	r2, [sp, #8]
    37b2:	ldr	r3, [sp, #4]
    37b4:	str	r2, [sp, #8]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    37b6:	mov	r0, ip
    37b8:	movs	r1, #20
    37ba:	str	r3, [sp, #4]
    37bc:	bl	c9a8 <operator delete(void*, unsigned int)>
    37c0:	ldr	r3, [sp, #4]
    37c2:	ldr	r2, [sp, #8]
    37c4:	ldr	r0, [sp, #0]
    37c6:	str	r2, [sp, #8]
    37c8:	movs	r1, #20
    37ca:	str	r3, [sp, #4]
    37cc:	bl	c9a8 <operator delete(void*, unsigned int)>
    37d0:	ldr	r3, [sp, #4]
    37d2:	ldr	r2, [sp, #8]
    37d4:	str	r3, [sp, #0]
    37d6:	mov	r0, r2
    37d8:	movs	r1, #20
    37da:	bl	c9a8 <operator delete(void*, unsigned int)>
    37de:	ldr	r3, [sp, #0]
    37e0:	b.n	32ac <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x254>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    37e2:	mov	r0, sl
    37e4:	blx	r3
    37e6:	b.n	3214 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1bc>
    37e8:	mov	r0, sl
    37ea:	blx	r3
    37ec:	b.n	32bc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x264>
    37ee:	mov	r0, r3
    37f0:	blx	r2
    37f2:	b.n	32b4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x25c>
    37f4:	mov	r0, r3
    37f6:	blx	r2
    37f8:	b.n	320c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b4>
    37fa:	str	r3, [sp, #0]
    37fc:	mov	r0, r2
    37fe:	blx	r1
    3800:	ldr	r3, [sp, #0]
    3802:	b.n	32ac <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x254>
    3804:	str	r3, [sp, #0]
    3806:	mov	r0, r2
    3808:	blx	r1
    380a:	ldr	r3, [sp, #0]
    380c:	b.n	3204 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ac>
    380e:	str	r2, [sp, #8]
    3810:	str	r3, [sp, #4]
    3812:	ldr	r0, [sp, #0]
    3814:	blx	r1
    3816:	ldr	r2, [sp, #8]
    3818:	ldr	r3, [sp, #4]
    381a:	b.n	37d4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x77c>
    381c:	str	r2, [sp, #8]
    381e:	str	r3, [sp, #4]
    3820:	ldr	r0, [sp, #0]
    3822:	blx	r1
    3824:	ldr	r2, [sp, #8]
    3826:	ldr	r3, [sp, #4]
    3828:	b.n	370a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6b2>
    382a:	str	r2, [sp, #8]
    382c:	str	r3, [sp, #4]
    382e:	mov	r0, ip
    3830:	blx	r1
    3832:	ldr	r2, [sp, #8]
    3834:	ldr	r3, [sp, #4]
    3836:	b.n	37c4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x76c>
    3838:	str	r2, [sp, #8]
    383a:	str	r3, [sp, #4]
    383c:	mov	r0, ip
    383e:	blx	r1
    3840:	ldr	r2, [sp, #8]
    3842:	ldr	r3, [sp, #4]
    3844:	b.n	36fa <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6a2>
    3846:	nop

00003848 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.9] [clone .constprop.12]>:

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t storage)
  { if (index_generated) return; 
    3848:	ldrb.w	r3, [r0, #248]	; 0xf8
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t storage) 
  { if (all_scanned_) return;
    all_scanned_ = true;
    384c:	movs	r2, #1
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t storage) 
    384e:	push	{r4, r5, r6, lr}
    3850:	mov	r5, r0
  { if (all_scanned_) return;
    all_scanned_ = true;
    3852:	strb.w	r2, [r0, #249]	; 0xf9
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t storage) 
    3856:	mov	r6, r1

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t storage)
  { if (index_generated) return; 
    3858:	cbz	r3, 3878 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.9] [clone .constprop.12]+0x30>
  void MTPStorage_SD::ScanAll(uint32_t storage) 
  { if (all_scanned_) return;
    all_scanned_ = true;

    GenerateIndex(storage);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(storage,i);
    385a:	ldr.w	r3, [r5, #244]	; 0xf4
    385e:	cbz	r3, 3876 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.9] [clone .constprop.12]+0x2e>
    3860:	movs	r4, #0
    3862:	mov	r2, r4
    3864:	mov	r1, r6
    3866:	mov	r0, r5
    3868:	bl	3058 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
    386c:	ldr.w	r3, [r5, #244]	; 0xf4
    3870:	adds	r4, #1
    3872:	cmp	r3, r4
    3874:	bhi.n	3862 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.9] [clone .constprop.12]+0x1a>
    3876:	pop	{r4, r5, r6, pc}
    3878:	bl	1b0c <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.8] [clone .constprop.13]>
    387c:	b.n	385a <MTPStorage_SD::ScanAll(unsigned long) [clone .part.9] [clone .constprop.12]+0x12>
    387e:	nop

00003880 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>:
//  const char * MTPStorage_SD::getStorageName(uint32_t storage) 
//  { if(sd_str) return sd_str[storage-1]; else return "SD_DISK";
//  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t storage, uint32_t parent) 
  { 
    3880:	push	{r4, r5, lr}

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t storage)
  { if (index_generated) return; 
    3882:	ldrb.w	r3, [r0, #248]	; 0xf8
//  const char * MTPStorage_SD::getStorageName(uint32_t storage) 
//  { if(sd_str) return sd_str[storage-1]; else return "SD_DISK";
//  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t storage, uint32_t parent) 
  { 
    3886:	sub	sp, #92	; 0x5c
    3888:	mov	r4, r0
    388a:	mov	r5, r2

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t storage)
  { if (index_generated) return; 
    388c:	cbz	r3, 38d0 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x50>
//  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t storage, uint32_t parent) 
  { 
    GenerateIndex(storage);
    if (parent) 
    388e:	cbz	r5, 38ba <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x3a>
    { if (parent == 0xFFFFFFFF) parent = storage-1; // As per initizalization
    3890:	adds	r3, r5, #1
    3892:	it	eq
    3894:	addeq.w	r5, r1, #4294967295

      ScanDir(storage, parent);
    3898:	mov	r2, r5
    389a:	mov	r0, r4
    389c:	bl	3058 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      follow_sibling_ = true;
    38a0:	movs	r3, #1
    38a2:	strb.w	r3, [r4, #256]	; 0x100
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    38a6:	mov	r2, r5
    38a8:	mov	r1, r4
    38aa:	add	r0, sp, #8
    38ac:	bl	1b7c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    38b0:	ldr	r3, [sp, #12]
    38b2:	str.w	r3, [r4, #252]	; 0xfc
    { 
      ScanAll(storage);
      follow_sibling_ = false;
      next_ = 1;
    }
  }
    38b6:	add	sp, #92	; 0x5c
    38b8:	pop	{r4, r5, pc}
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t storage) 
  { if (all_scanned_) return;
    38ba:	ldrb.w	r3, [r4, #249]	; 0xf9
    38be:	cbz	r3, 38da <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x5a>
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { 
      ScanAll(storage);
      follow_sibling_ = false;
    38c0:	movs	r2, #0
      next_ = 1;
    38c2:	movs	r3, #1
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { 
      ScanAll(storage);
      follow_sibling_ = false;
    38c4:	strb.w	r2, [r4, #256]	; 0x100
      next_ = 1;
    38c8:	str.w	r3, [r4, #252]	; 0xfc
    }
  }
    38cc:	add	sp, #92	; 0x5c
    38ce:	pop	{r4, r5, pc}
    38d0:	str	r1, [sp, #4]
    38d2:	bl	1b0c <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.8] [clone .constprop.13]>
    38d6:	ldr	r1, [sp, #4]
    38d8:	b.n	388e <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0xe>
    38da:	mov	r0, r4
    38dc:	bl	3848 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.9] [clone .constprop.12]>
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { 
      ScanAll(storage);
      follow_sibling_ = false;
    38e0:	movs	r2, #0
      next_ = 1;
    38e2:	movs	r3, #1
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { 
      ScanAll(storage);
      follow_sibling_ = false;
    38e4:	strb.w	r2, [r4, #256]	; 0x100
      next_ = 1;
    38e8:	str.w	r3, [r4, #252]	; 0xfc
    38ec:	b.n	38cc <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x4c>
    38ee:	nop

000038f0 <MTPD::GetNumObjects(unsigned long, unsigned long)>:
    writestring(name);  // storage descriptor
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  { storage_->StartGetObjectHandles(storage, parent);
    38f0:	push	{r4, r5, r6, lr}
    38f2:	mov	r5, r0
    38f4:	ldr	r0, [r0, #0]
    38f6:	ldr	r3, [r0, #0]
    38f8:	ldr	r3, [r3, #28]
    38fa:	mov	r6, r1
    int num = 0;
    38fc:	movs	r4, #0
    writestring(name);  // storage descriptor
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  { storage_->StartGetObjectHandles(storage, parent);
    38fe:	blx	r3
    3900:	b.n	3904 <MTPD::GetNumObjects(unsigned long, unsigned long)+0x14>
    int num = 0;
    while (storage_->GetNextObjectHandle(storage)) num++;
    3902:	adds	r4, #1
    3904:	ldr	r0, [r5, #0]
    3906:	ldr	r3, [r0, #0]
    3908:	mov	r1, r6
    390a:	ldr	r3, [r3, #32]
    390c:	blx	r3
    390e:	cmp	r0, #0
    3910:	bne.n	3902 <MTPD::GetNumObjects(unsigned long, unsigned long)+0x12>
    return num;
  }
    3912:	mov	r0, r4
    3914:	pop	{r4, r5, r6, pc}
    3916:	nop

00003918 <MTPD::get_buffer()>:
    }

#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)

//  usb_packet_t *data_buffer_ = NULL;
  void MTPD::get_buffer() {
    3918:	push	{r4, lr}
    391a:	mov	r4, r0
    391c:	ldr	r0, [r4, #4]
    while (!data_buffer_) {
    391e:	cbnz	r0, 3928 <MTPD::get_buffer()+0x10>
      data_buffer_ = usb_malloc();
    3920:	bl	b850 <usb_malloc>
    3924:	str	r0, [r4, #4]
      if (!data_buffer_) mtp_yield();
    3926:	cbz	r0, 392a <MTPD::get_buffer()+0x12>
    3928:	pop	{r4, pc}
    392a:	bl	1648 <mtp_yield()>
    392e:	b.n	391c <MTPD::get_buffer()+0x4>

00003930 <MTPD::write(char const*, int) [clone .part.3]>:
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    3930:	cmp	r2, #0
    3932:	ble.n	3992 <MTPD::write(char const*, int) [clone .part.3]+0x62>
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    3934:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    3938:	mov.w	r9, #0
    393c:	mov	r6, r2
    393e:	mov	r7, r1
    3940:	mov	r5, r0
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    3942:	mov	r8, r9
    3944:	b.n	394a <MTPD::write(char const*, int) [clone .part.3]+0x1a>
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    3946:	cmp	r6, r9
    3948:	ble.n	398e <MTPD::write(char const*, int) [clone .part.3]+0x5e>
        get_buffer();
    394a:	mov	r0, r5
    394c:	bl	3918 <MTPD::get_buffer()>
        int avail = sizeof(data_buffer_->buf) - data_buffer_->len;
    3950:	ldr	r3, [r5, #4]
    3952:	ldrh.w	r0, [r3], #8
    3956:	rsb	r2, r9, r6
    395a:	rsb	r4, r0, #64	; 0x40
    395e:	cmp	r4, r2
    3960:	it	ge
    3962:	movge	r4, r2
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
    3964:	add.w	r1, r7, r9
    3968:	add	r0, r3
    396a:	mov	r2, r4
    396c:	bl	b0e0 <memcpy>
        data_buffer_->len += to_copy;
    3970:	ldr	r1, [r5, #4]
    3972:	ldrh	r3, [r1, #0]
    3974:	add	r3, r4
    3976:	uxth	r3, r3
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    3978:	cmp	r3, #64	; 0x40
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
    397a:	add	r9, r4
        int avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
        data_buffer_->len += to_copy;
    397c:	strh	r3, [r1, #0]
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    397e:	bne.n	3946 <MTPD::write(char const*, int) [clone .part.3]+0x16>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
    3980:	movs	r0, #4
    3982:	bl	ba4c <usb_tx>
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    3986:	cmp	r6, r9
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    3988:	str.w	r8, [r5, #4]
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    398c:	bgt.n	394a <MTPD::write(char const*, int) [clone .part.3]+0x1a>
    398e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3992:	bx	lr

00003994 <MTPD::writestring(char const*)>:
  void MTPD::write8 (uint8_t  x) { write((char*)&x, sizeof(x)); }
  void MTPD::write16(uint16_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    3994:	push	{r4, r5, lr}
    if (*str) 
    3996:	ldrb	r3, [r1, #0]
  void MTPD::write8 (uint8_t  x) { write((char*)&x, sizeof(x)); }
  void MTPD::write16(uint16_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    3998:	sub	sp, #12
    399a:	mov	r4, r0
    if (*str) 
    399c:	cbz	r3, 39f8 <MTPD::writestring(char const*)+0x64>
    { write8(strlen(str) + 1);
    399e:	mov	r0, r1
    39a0:	mov	r5, r1
    39a2:	bl	e580 <strlen>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    39a6:	ldrb	r1, [r4, #8]
    39a8:	adds	r0, #1
    39aa:	strb.w	r0, [sp, #3]
    39ae:	cbz	r1, 3a0a <MTPD::writestring(char const*)+0x76>
      write_length_ += len;
    39b0:	ldr	r3, [r4, #12]
    39b2:	adds	r3, #1
    39b4:	str	r3, [r4, #12]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    39b6:	ldrb	r2, [r5, #0]
    39b8:	cbnz	r2, 39c8 <MTPD::writestring(char const*)+0x34>
    39ba:	b.n	39f0 <MTPD::writestring(char const*)+0x5c>
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    39bc:	ldr	r3, [r4, #12]
    39be:	adds	r3, #2
    39c0:	str	r3, [r4, #12]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    39c2:	ldrb.w	r2, [r5, #1]!
    39c6:	cbz	r2, 39e6 <MTPD::writestring(char const*)+0x52>
    39c8:	strh.w	r2, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    39cc:	cmp	r1, #0
    39ce:	bne.n	39bc <MTPD::writestring(char const*)+0x28>
    39d0:	movs	r2, #2
    39d2:	add.w	r1, sp, #6
    39d6:	mov	r0, r4
    39d8:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    39dc:	ldrb.w	r2, [r5, #1]!
    39e0:	ldrb	r1, [r4, #8]
    39e2:	cmp	r2, #0
    39e4:	bne.n	39c8 <MTPD::writestring(char const*)+0x34>
    39e6:	movs	r3, #0
    39e8:	strh.w	r3, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    39ec:	cbz	r1, 3a2e <MTPD::writestring(char const*)+0x9a>
    39ee:	ldr	r3, [r4, #12]
      write_length_ += len;
    39f0:	adds	r3, #2
    39f2:	str	r3, [r4, #12]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    39f4:	add	sp, #12
    39f6:	pop	{r4, r5, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    39f8:	ldrb	r2, [r0, #8]
    39fa:	strb.w	r3, [sp, #2]
    39fe:	cbz	r2, 3a20 <MTPD::writestring(char const*)+0x8c>
      write_length_ += len;
    3a00:	ldr	r3, [r0, #12]
    3a02:	adds	r3, #1
    3a04:	str	r3, [r0, #12]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    3a06:	add	sp, #12
    3a08:	pop	{r4, r5, pc}
    3a0a:	movs	r2, #1
    3a0c:	add.w	r1, sp, #3
    3a10:	mov	r0, r4
    3a12:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    3a16:	ldrb	r2, [r5, #0]
    3a18:	ldrb	r1, [r4, #8]
    3a1a:	cmp	r2, #0
    3a1c:	bne.n	39c8 <MTPD::writestring(char const*)+0x34>
    3a1e:	b.n	39e6 <MTPD::writestring(char const*)+0x52>
    3a20:	movs	r2, #1
    3a22:	add.w	r1, sp, #2
    3a26:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    } else 
    { write8(0);
    }
  }
    3a2a:	add	sp, #12
    3a2c:	pop	{r4, r5, pc}
    3a2e:	mov	r0, r4
    3a30:	movs	r2, #2
    3a32:	add	r1, sp, #4
    3a34:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    3a38:	add	sp, #12
    3a3a:	pop	{r4, r5, pc}

00003a3c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.5]>:
        writestring(MTP_NAME);
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    3a3c:	push	{r4, r5, r6, lr}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    3a3e:	ldrb	r3, [r0, #8]
        writestring(MTP_NAME);
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    3a40:	sub	sp, #8
    3a42:	mov	r4, r0
    3a44:	mov	r5, r1
    3a46:	strh.w	r1, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    3a4a:	cbz	r3, 3a84 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.5]+0x48>
      write_length_ += len;
    3a4c:	ldr	r3, [r0, #12]
    3a4e:	movw	r2, #65535	; 0xffff
    3a52:	adds	r3, #2
    3a54:	str	r3, [r0, #12]
    3a56:	strh.w	r2, [sp, #6]
    3a5a:	adds	r3, #2
    3a5c:	movs	r2, #0
    3a5e:	str	r3, [r4, #12]
    3a60:	strb.w	r2, [sp, #2]
    3a64:	adds	r3, #1
    3a66:	str	r3, [r4, #12]
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    3a68:	movw	r3, #54274	; 0xd402
    3a6c:	cmp	r5, r3
    3a6e:	beq.n	3ac0 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.5]+0x84>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    3a70:	ldrb	r3, [r4, #8]
    3a72:	movs	r2, #0
    3a74:	strb.w	r2, [sp, #3]
    3a78:	cbz	r3, 3adc <MTPD::GetDevicePropDesc(unsigned long) [clone .part.5]+0xa0>
      write_length_ += len;
    3a7a:	ldr	r3, [r4, #12]
    3a7c:	adds	r3, #1
    3a7e:	str	r3, [r4, #12]
        write8(0);       // read-only
        GetDevicePropValue(prop);
        GetDevicePropValue(prop);
        write8(0);       // no form
    }
  }
    3a80:	add	sp, #8
    3a82:	pop	{r4, r5, r6, pc}
    3a84:	movs	r2, #2
    3a86:	add	r1, sp, #4
    3a88:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    3a8c:	ldrb	r6, [r4, #8]
    3a8e:	movw	r3, #65535	; 0xffff
    3a92:	strh.w	r3, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    3a96:	cbnz	r6, 3aec <MTPD::GetDevicePropDesc(unsigned long) [clone .part.5]+0xb0>
    3a98:	movs	r2, #2
    3a9a:	add.w	r1, sp, #6
    3a9e:	mov	r0, r4
    3aa0:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    3aa4:	ldrb	r3, [r4, #8]
    3aa6:	strb.w	r6, [sp, #2]
    3aaa:	cbnz	r3, 3af0 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.5]+0xb4>
    3aac:	movs	r2, #1
    3aae:	add.w	r1, sp, #2
    3ab2:	mov	r0, r4
    3ab4:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    3ab8:	movw	r3, #54274	; 0xd402
    3abc:	cmp	r5, r3
    3abe:	bne.n	3a70 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.5]+0x34>
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    3ac0:	ldr	r1, [pc, #48]	; (3af4 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.5]+0xb8>)
    3ac2:	mov	r0, r4
    3ac4:	bl	3994 <MTPD::writestring(char const*)>
    3ac8:	ldr	r1, [pc, #40]	; (3af4 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.5]+0xb8>)
    3aca:	mov	r0, r4
    3acc:	bl	3994 <MTPD::writestring(char const*)>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    3ad0:	ldrb	r3, [r4, #8]
    3ad2:	movs	r2, #0
    3ad4:	strb.w	r2, [sp, #3]
    3ad8:	cmp	r3, #0
    3ada:	bne.n	3a7a <MTPD::GetDevicePropDesc(unsigned long) [clone .part.5]+0x3e>
    3adc:	mov	r0, r4
    3ade:	movs	r2, #1
    3ae0:	add.w	r1, sp, #3
    3ae4:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
        write8(0);       // read-only
        GetDevicePropValue(prop);
        GetDevicePropValue(prop);
        write8(0);       // no form
    }
  }
    3ae8:	add	sp, #8
    3aea:	pop	{r4, r5, r6, pc}
    3aec:	ldr	r3, [r4, #12]
    3aee:	b.n	3a5a <MTPD::GetDevicePropDesc(unsigned long) [clone .part.5]+0x1e>
    3af0:	ldr	r3, [r4, #12]
    3af2:	b.n	3a64 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.5]+0x28>
    3af4:	.word	0x00011c50

00003af8 <MTPD::WriteDescriptor()>:
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    3af8:	push	{r4, r5, r6, r7, lr}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    3afa:	ldrb	r3, [r0, #8]
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    3afc:	sub	sp, #44	; 0x2c
    3afe:	movs	r5, #100	; 0x64
    3b00:	mov	r4, r0
    3b02:	strh.w	r5, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    3b06:	cmp	r3, #0
    3b08:	beq.n	3bea <MTPD::WriteDescriptor()+0xf2>
      write_length_ += len;
    3b0a:	ldr	r3, [r0, #12]
    3b0c:	movs	r2, #6
    3b0e:	adds	r3, #2
    3b10:	str	r3, [r0, #12]
    3b12:	str	r2, [sp, #20]
    3b14:	adds	r3, #4
    3b16:	movs	r2, #100	; 0x64
    3b18:	str	r3, [r4, #12]
    3b1a:	strh.w	r2, [sp, #4]
    3b1e:	adds	r3, #2
    3b20:	str	r3, [r4, #12]
  void MTPD::WriteDescriptor() {
    write16(100);  // MTP version
    write32(6);    // MTP extension
//    write32(0xFFFFFFFFUL);    // MTP extension
    write16(100);  // MTP version
    writestring("microsoft.com: 1.0;");
    3b22:	ldr	r1, [pc, #464]	; (3cf4 <MTPD::WriteDescriptor()+0x1fc>)
    3b24:	mov	r0, r4
    3b26:	bl	3994 <MTPD::writestring(char const*)>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    3b2a:	ldrb	r3, [r4, #8]
    3b2c:	movs	r2, #0
    3b2e:	strh.w	r2, [sp, #2]
    3b32:	cmp	r3, #0
    3b34:	beq.w	3cac <MTPD::WriteDescriptor()+0x1b4>
      write_length_ += len;
    3b38:	ldr	r3, [r4, #12]
    3b3a:	movs	r2, #18
    3b3c:	adds	r3, #2
    3b3e:	str	r3, [r4, #12]
    3b40:	str	r2, [sp, #16]
    3b42:	adds	r3, #4
    3b44:	str	r3, [r4, #12]
    3b46:	movs	r6, #1
    3b48:	ldr	r5, [pc, #428]	; (3cf8 <MTPD::WriteDescriptor()+0x200>)
    3b4a:	movw	r3, #4097	; 0x1001
    3b4e:	add.w	r7, r5, #34	; 0x22
    3b52:	b.n	3b64 <MTPD::WriteDescriptor()+0x6c>
    3b54:	ldr	r3, [r4, #12]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
      write32(supported_op_num);
      for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    3b56:	cmp	r7, r5
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    3b58:	add.w	r3, r3, #2
    3b5c:	str	r3, [r4, #12]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
      write32(supported_op_num);
      for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    3b5e:	beq.n	3b7c <MTPD::WriteDescriptor()+0x84>
    3b60:	ldrh.w	r3, [r5, #2]!
    3b64:	strh.w	r3, [sp, #8]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    3b68:	cmp	r6, #0
    3b6a:	bne.n	3b54 <MTPD::WriteDescriptor()+0x5c>
    3b6c:	movs	r2, #2
    3b6e:	add	r1, sp, #8
    3b70:	mov	r0, r4
    3b72:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
      write32(supported_op_num);
      for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    3b76:	cmp	r7, r5
    3b78:	ldrb	r6, [r4, #8]
    3b7a:	bne.n	3b60 <MTPD::WriteDescriptor()+0x68>
    3b7c:	movs	r3, #0
    3b7e:	str	r3, [sp, #36]	; 0x24
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    3b80:	cmp	r6, #0
    3b82:	beq.n	3c1e <MTPD::WriteDescriptor()+0x126>
      write_length_ += len;
    3b84:	ldr	r3, [r4, #12]
    3b86:	movs	r2, #1
    3b88:	adds	r3, #4
    3b8a:	str	r3, [r4, #12]
    3b8c:	str	r2, [sp, #32]
    3b8e:	adds	r3, #4
    3b90:	movw	r2, #54274	; 0xd402
    3b94:	str	r3, [r4, #12]
    3b96:	strh.w	r2, [sp, #14]
    3b9a:	adds	r3, #2
    3b9c:	movs	r2, #0
    3b9e:	str	r3, [r4, #12]
    3ba0:	str	r2, [sp, #28]
    3ba2:	adds	r3, #4
    3ba4:	movs	r2, #2
    3ba6:	str	r3, [r4, #12]
    3ba8:	str	r2, [sp, #24]
    3baa:	adds	r3, #4
    3bac:	mov.w	r2, #12288	; 0x3000
    3bb0:	str	r3, [r4, #12]
    3bb2:	strh.w	r2, [sp, #12]
    3bb6:	adds	r3, #2
    3bb8:	movw	r2, #12289	; 0x3001
    3bbc:	str	r3, [r4, #12]
    3bbe:	strh.w	r2, [sp, #10]
    3bc2:	adds	r3, #2
    3bc4:	str	r3, [r4, #12]

    write32(2);       // Playback formats (array of uint16)
    write16(0x3000);  // Undefined format
    write16(0x3001);  // Folders (associations)

    writestring(MTP_MANUF);     // Manufacturer
    3bc6:	mov	r0, r4
    3bc8:	ldr	r1, [pc, #304]	; (3cfc <MTPD::WriteDescriptor()+0x204>)
    3bca:	bl	3994 <MTPD::writestring(char const*)>
    writestring(MTP_MODEL);     // Model
    3bce:	mov	r0, r4
    3bd0:	ldr	r1, [pc, #300]	; (3d00 <MTPD::WriteDescriptor()+0x208>)
    3bd2:	bl	3994 <MTPD::writestring(char const*)>
    writestring(MTP_VERS);      // version
    3bd6:	mov	r0, r4
    3bd8:	ldr	r1, [pc, #296]	; (3d04 <MTPD::WriteDescriptor()+0x20c>)
    3bda:	bl	3994 <MTPD::writestring(char const*)>
    writestring(MTP_SERNR);     // serial
    3bde:	mov	r0, r4
    3be0:	ldr	r1, [pc, #292]	; (3d08 <MTPD::WriteDescriptor()+0x210>)
    3be2:	bl	3994 <MTPD::writestring(char const*)>
  }
    3be6:	add	sp, #44	; 0x2c
    3be8:	pop	{r4, r5, r6, r7, pc}
    3bea:	movs	r2, #2
    3bec:	add.w	r1, sp, #6
    3bf0:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    3bf4:	ldrb	r3, [r4, #8]
    3bf6:	movs	r2, #6
    3bf8:	str	r2, [sp, #20]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    3bfa:	cmp	r3, #0
    3bfc:	bne.n	3cda <MTPD::WriteDescriptor()+0x1e2>
    3bfe:	movs	r2, #4
    3c00:	add	r1, sp, #20
    3c02:	mov	r0, r4
    3c04:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    3c08:	ldrb	r3, [r4, #8]
    3c0a:	strh.w	r5, [sp, #4]
    3c0e:	cmp	r3, #0
    3c10:	bne.n	3cde <MTPD::WriteDescriptor()+0x1e6>
    3c12:	movs	r2, #2
    3c14:	add	r1, sp, #4
    3c16:	mov	r0, r4
    3c18:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    3c1c:	b.n	3b22 <MTPD::WriteDescriptor()+0x2a>
    3c1e:	movs	r2, #4
    3c20:	add	r1, sp, #36	; 0x24
    3c22:	mov	r0, r4
    3c24:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    3c28:	ldrb	r3, [r4, #8]
    3c2a:	movs	r2, #1
    3c2c:	str	r2, [sp, #32]
    3c2e:	cmp	r3, #0
    3c30:	bne.n	3ce2 <MTPD::WriteDescriptor()+0x1ea>
    3c32:	movs	r2, #4
    3c34:	add	r1, sp, #32
    3c36:	mov	r0, r4
    3c38:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    3c3c:	ldrb	r3, [r4, #8]
    3c3e:	movw	r2, #54274	; 0xd402
    3c42:	strh.w	r2, [sp, #14]
    3c46:	cmp	r3, #0
    3c48:	bne.n	3ce6 <MTPD::WriteDescriptor()+0x1ee>
    3c4a:	movs	r2, #2
    3c4c:	add.w	r1, sp, #14
    3c50:	mov	r0, r4
    3c52:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    3c56:	ldrb	r3, [r4, #8]
    3c58:	str	r6, [sp, #28]
    3c5a:	cmp	r3, #0
    3c5c:	bne.n	3cea <MTPD::WriteDescriptor()+0x1f2>
    3c5e:	movs	r2, #4
    3c60:	add	r1, sp, #28
    3c62:	mov	r0, r4
    3c64:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    3c68:	ldrb	r3, [r4, #8]
    3c6a:	movs	r5, #2
    3c6c:	str	r5, [sp, #24]
    3c6e:	cmp	r3, #0
    3c70:	bne.n	3cee <MTPD::WriteDescriptor()+0x1f6>
    3c72:	movs	r2, #4
    3c74:	add	r1, sp, #24
    3c76:	mov	r0, r4
    3c78:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    3c7c:	ldrb	r3, [r4, #8]
    3c7e:	mov.w	r2, #12288	; 0x3000
    3c82:	strh.w	r2, [sp, #12]
    3c86:	cbnz	r3, 3cd2 <MTPD::WriteDescriptor()+0x1da>
    3c88:	mov	r2, r5
    3c8a:	add	r1, sp, #12
    3c8c:	mov	r0, r4
    3c8e:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    3c92:	ldrb	r3, [r4, #8]
    3c94:	movw	r2, #12289	; 0x3001
    3c98:	strh.w	r2, [sp, #10]
    3c9c:	cbnz	r3, 3cce <MTPD::WriteDescriptor()+0x1d6>
    3c9e:	mov	r2, r5
    3ca0:	add.w	r1, sp, #10
    3ca4:	mov	r0, r4
    3ca6:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    3caa:	b.n	3bc6 <MTPD::WriteDescriptor()+0xce>
    3cac:	movs	r2, #2
    3cae:	add.w	r1, sp, r2
    3cb2:	mov	r0, r4
    3cb4:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    3cb8:	ldrb	r3, [r4, #8]
    3cba:	movs	r2, #18
    3cbc:	str	r2, [sp, #16]
    3cbe:	cbnz	r3, 3cd6 <MTPD::WriteDescriptor()+0x1de>
    3cc0:	movs	r2, #4
    3cc2:	add	r1, sp, #16
    3cc4:	mov	r0, r4
    3cc6:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    3cca:	ldrb	r6, [r4, #8]
    3ccc:	b.n	3b48 <MTPD::WriteDescriptor()+0x50>
    3cce:	ldr	r3, [r4, #12]
    3cd0:	b.n	3bc2 <MTPD::WriteDescriptor()+0xca>
    3cd2:	ldr	r3, [r4, #12]
    3cd4:	b.n	3bb6 <MTPD::WriteDescriptor()+0xbe>
    3cd6:	ldr	r3, [r4, #12]
    3cd8:	b.n	3b42 <MTPD::WriteDescriptor()+0x4a>
    3cda:	ldr	r3, [r4, #12]
    3cdc:	b.n	3b14 <MTPD::WriteDescriptor()+0x1c>
    3cde:	ldr	r3, [r4, #12]
    3ce0:	b.n	3b1e <MTPD::WriteDescriptor()+0x26>
    3ce2:	ldr	r3, [r4, #12]
    3ce4:	b.n	3b8e <MTPD::WriteDescriptor()+0x96>
    3ce6:	ldr	r3, [r4, #12]
    3ce8:	b.n	3b9a <MTPD::WriteDescriptor()+0xa2>
    3cea:	ldr	r3, [r4, #12]
    3cec:	b.n	3ba2 <MTPD::WriteDescriptor()+0xaa>
    3cee:	ldr	r3, [r4, #12]
    3cf0:	b.n	3baa <MTPD::WriteDescriptor()+0xb2>
    3cf2:	nop
    3cf4:	.word	0x00011c58
    3cf8:	.word	0x00011c1c
    3cfc:	.word	0x00011c6c
    3d00:	.word	0x00011c50
    3d04:	.word	0x00011c74
    3d08:	.word	0x00011c78

00003d0c <MTPD::WriteStorageIDs()>:
    writestring(MTP_MODEL);     // Model
    writestring(MTP_VERS);      // version
    writestring(MTP_SERNR);     // serial
  }

  void MTPD::WriteStorageIDs() {
    3d0c:	push	{r4, r5, r6, lr}
    3d0e:	mov	r5, r0
//    uint32_t num=storage_->getNumStorage();
    uint32_t num=storage_->get_FSCount();
    3d10:	ldr	r0, [r0, #0]
    3d12:	ldr	r2, [pc, #92]	; (3d70 <MTPD::WriteStorageIDs()+0x64>)
    3d14:	ldr	r3, [r0, #0]
    3d16:	ldr	r3, [r3, #4]
    3d18:	cmp	r3, r2
    writestring(MTP_MODEL);     // Model
    writestring(MTP_VERS);      // version
    writestring(MTP_SERNR);     // serial
  }

  void MTPD::WriteStorageIDs() {
    3d1a:	sub	sp, #8
    3d1c:	bne.n	3d68 <MTPD::WriteStorageIDs()+0x5c>
        sd_name[fsCount] = name;
        sdx[fsCount++] = &fs;
      }
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    3d1e:	ldr	r6, [r0, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    3d20:	ldrb	r3, [r5, #8]
    3d22:	str	r6, [sp, #0]
    3d24:	cbz	r3, 3d5c <MTPD::WriteStorageIDs()+0x50>
      write_length_ += len;
    3d26:	ldr	r3, [r5, #12]
    3d28:	adds	r3, #4
    3d2a:	str	r3, [r5, #12]

  void MTPD::WriteStorageIDs() {
//    uint32_t num=storage_->getNumStorage();
    uint32_t num=storage_->get_FSCount();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
    3d2c:	movs	r4, #1
    3d2e:	cbnz	r6, 3d3e <MTPD::WriteStorageIDs()+0x32>
    3d30:	b.n	3d58 <MTPD::WriteStorageIDs()+0x4c>
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    3d32:	ldr	r3, [r5, #12]

  void MTPD::WriteStorageIDs() {
//    uint32_t num=storage_->getNumStorage();
    uint32_t num=storage_->get_FSCount();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
    3d34:	adds	r4, #1
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    3d36:	adds	r3, #4

  void MTPD::WriteStorageIDs() {
//    uint32_t num=storage_->getNumStorage();
    uint32_t num=storage_->get_FSCount();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
    3d38:	cmp	r6, r4
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    3d3a:	str	r3, [r5, #12]

  void MTPD::WriteStorageIDs() {
//    uint32_t num=storage_->getNumStorage();
    uint32_t num=storage_->get_FSCount();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
    3d3c:	bcc.n	3d58 <MTPD::WriteStorageIDs()+0x4c>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    3d3e:	ldrb	r3, [r5, #8]
    3d40:	str	r4, [sp, #4]
    3d42:	cmp	r3, #0
    3d44:	bne.n	3d32 <MTPD::WriteStorageIDs()+0x26>
    3d46:	movs	r2, #4
    3d48:	add.w	r1, sp, r2
    3d4c:	mov	r0, r5

  void MTPD::WriteStorageIDs() {
//    uint32_t num=storage_->getNumStorage();
    uint32_t num=storage_->get_FSCount();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
    3d4e:	adds	r4, #1
    3d50:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    3d54:	cmp	r6, r4
    3d56:	bcs.n	3d3e <MTPD::WriteStorageIDs()+0x32>
  }
    3d58:	add	sp, #8
    3d5a:	pop	{r4, r5, r6, pc}
    3d5c:	movs	r2, #4
    3d5e:	mov	r1, sp
    3d60:	mov	r0, r5
    3d62:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    3d66:	b.n	3d2c <MTPD::WriteStorageIDs()+0x20>
    writestring(MTP_SERNR);     // serial
  }

  void MTPD::WriteStorageIDs() {
//    uint32_t num=storage_->getNumStorage();
    uint32_t num=storage_->get_FSCount();
    3d68:	blx	r3
    3d6a:	mov	r6, r0
    3d6c:	b.n	3d20 <MTPD::WriteStorageIDs()+0x14>
    3d6e:	nop
    3d70:	.word	0x00001489

00003d74 <MTPD::GetObjectHandles(unsigned long, unsigned long)>:
    while (storage_->GetNextObjectHandle(storage)) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    3d74:	push	{r4, r5, r6, lr}
    if (write_get_length_) {
    3d76:	ldrb	r3, [r0, #8]
    while (storage_->GetNextObjectHandle(storage)) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    3d78:	sub	sp, #8
    3d7a:	mov	r4, r0
    if (write_get_length_) {
    3d7c:	cbnz	r3, 3dc4 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x50>
    3d7e:	mov	r5, r1
    3d80:	mov	r6, r2
      write_length_ = GetNumObjects(storage, parent);
      write_length_++;
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
    3d82:	bl	38f0 <MTPD::GetNumObjects(unsigned long, unsigned long)>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    3d86:	ldrb	r3, [r4, #8]
    3d88:	str	r0, [sp, #4]
    3d8a:	cbz	r3, 3dd2 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x5e>
      write_length_ += len;
    3d8c:	ldr	r3, [r4, #12]
    3d8e:	adds	r3, #4
    3d90:	str	r3, [r4, #12]
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(storage, parent);
    3d92:	ldr	r0, [r4, #0]
    3d94:	ldr	r3, [r0, #0]
    3d96:	mov	r2, r6
    3d98:	ldr	r3, [r3, #28]
    3d9a:	mov	r1, r5
    3d9c:	blx	r3
      while ((handle = storage_->GetNextObjectHandle(storage))) write32(handle);
    3d9e:	ldr	r0, [r4, #0]
    3da0:	ldr	r3, [r0, #0]
    3da2:	mov	r1, r5
    3da4:	ldr	r3, [r3, #32]
    3da6:	blx	r3
    3da8:	cbz	r0, 3dce <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x5a>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    3daa:	ldrb	r3, [r4, #8]
    3dac:	str	r0, [sp, #0]
    3dae:	cbz	r3, 3db8 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x44>
      write_length_ += len;
    3db0:	ldr	r3, [r4, #12]
    3db2:	adds	r3, #4
    3db4:	str	r3, [r4, #12]
    3db6:	b.n	3d9e <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x2a>
    3db8:	movs	r2, #4
    3dba:	mov	r1, sp
    3dbc:	mov	r0, r4
    3dbe:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    3dc2:	b.n	3d9e <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x2a>
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    if (write_get_length_) {
      write_length_ = GetNumObjects(storage, parent);
    3dc4:	bl	38f0 <MTPD::GetNumObjects(unsigned long, unsigned long)>
      write_length_++;
      write_length_ *= 4;
    3dc8:	adds	r0, #1
    3dca:	lsls	r0, r0, #2
    3dcc:	str	r0, [r4, #12]
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(storage, parent);
      while ((handle = storage_->GetNextObjectHandle(storage))) write32(handle);
    }
  }
    3dce:	add	sp, #8
    3dd0:	pop	{r4, r5, r6, pc}
    3dd2:	movs	r2, #4
    3dd4:	add.w	r1, sp, r2
    3dd8:	mov	r0, r4
    3dda:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    3dde:	b.n	3d92 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1e>

00003de0 <MTPD::GetObjectInfo(unsigned long)>:
  
  void MTPD::GetObjectInfo(uint32_t handle) 
  {
    3de0:	push	{r4, r5, r6, r7, lr}
    3de2:	mov	r4, r0
    3de4:	sub	sp, #332	; 0x14c
    char filename[256];
    uint32_t size, parent;
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);
    3de6:	ldr	r0, [r0, #0]
    3de8:	add.w	r6, sp, #10
    3dec:	add	r5, sp, #24
    3dee:	ldr	r3, [r0, #0]
    3df0:	stmia.w	sp, {r5, r6}
    3df4:	add	r2, sp, #72	; 0x48
    3df6:	ldr	r7, [r3, #36]	; 0x24
    3df8:	add	r3, sp, #20
    3dfa:	blx	r7
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    3dfc:	ldrb	r3, [r4, #8]
    3dfe:	ldrh	r2, [r6, #0]
    3e00:	str	r2, [sp, #28]
    3e02:	cmp	r3, #0
    3e04:	beq.n	3eba <MTPD::GetObjectInfo(unsigned long)+0xda>
      write_length_ += len;
    3e06:	ldr	r3, [r4, #12]
    uint32_t size, parent;
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    write32(store); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    3e08:	ldr	r2, [sp, #20]
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    3e0a:	adds	r3, #4
    uint32_t size, parent;
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    write32(store); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    3e0c:	adds	r2, #1
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    3e0e:	str	r3, [r4, #12]
    uint32_t size, parent;
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    write32(store); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    3e10:	beq.w	3fea <MTPD::GetObjectInfo(unsigned long)+0x20a>
    3e14:	movs	r2, #0
    3e16:	strh.w	r2, [sp, #16]
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    3e1a:	adds	r3, #2
    3e1c:	movs	r2, #0
    3e1e:	str	r3, [r4, #12]
    3e20:	strh.w	r2, [sp, #14]
    3e24:	adds	r3, #2
    3e26:	ldr	r2, [sp, #20]
    3e28:	str	r3, [r4, #12]
    3e2a:	str	r2, [sp, #60]	; 0x3c
    3e2c:	adds	r3, #4
    3e2e:	movs	r2, #0
    3e30:	str	r3, [r4, #12]
    3e32:	strh.w	r2, [sp, #12]
    3e36:	adds	r3, #2
    3e38:	movs	r2, #0
    3e3a:	str	r3, [r4, #12]
    3e3c:	str	r2, [sp, #56]	; 0x38
    3e3e:	adds	r3, #4
    3e40:	movs	r2, #0
    3e42:	str	r3, [r4, #12]
    3e44:	str	r2, [sp, #52]	; 0x34
    3e46:	adds	r3, #4
    3e48:	movs	r2, #0
    3e4a:	str	r3, [r4, #12]
    3e4c:	str	r2, [sp, #48]	; 0x30
    3e4e:	adds	r3, #4
    3e50:	movs	r2, #0
    3e52:	str	r3, [r4, #12]
    3e54:	str	r2, [sp, #44]	; 0x2c
    3e56:	adds	r3, #4
    3e58:	movs	r2, #0
    3e5a:	str	r3, [r4, #12]
    3e5c:	str	r2, [sp, #40]	; 0x28
    3e5e:	adds	r3, #4
    3e60:	movs	r2, #0
    3e62:	str	r3, [r4, #12]
    3e64:	str	r2, [sp, #36]	; 0x24
    3e66:	adds	r3, #4
    3e68:	ldr	r2, [r5, #0]
    3e6a:	str	r3, [r4, #12]
    3e6c:	str	r2, [sp, #32]
    3e6e:	ldr	r2, [sp, #20]
    3e70:	sub.w	r2, r2, #4294967295
    3e74:	clz	r2, r2
    3e78:	lsrs	r2, r2, #5
    3e7a:	adds	r3, #4
    3e7c:	str	r3, [r4, #12]
    3e7e:	strh.w	r2, [sp, #18]
    3e82:	adds	r3, #2
    3e84:	movs	r2, #0
    3e86:	str	r3, [r4, #12]
    3e88:	str	r2, [sp, #68]	; 0x44
    3e8a:	adds	r3, #4
    3e8c:	movs	r2, #0
    3e8e:	str	r3, [r4, #12]
    3e90:	str	r2, [sp, #64]	; 0x40
    3e92:	adds	r3, #4
    3e94:	str	r3, [r4, #12]
    write32(0); // bit depth
    write32(parent); // parent
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    write32(0); // association description
    write32(0);  // sequence number
    writestring(filename);
    3e96:	add	r1, sp, #72	; 0x48
    3e98:	mov	r0, r4
    3e9a:	bl	3994 <MTPD::writestring(char const*)>
    writestring("");  // date created
    3e9e:	mov	r0, r4
    3ea0:	ldr	r1, [pc, #392]	; (402c <MTPD::GetObjectInfo(unsigned long)+0x24c>)
    3ea2:	bl	3994 <MTPD::writestring(char const*)>
    writestring("");  // date modified
    3ea6:	mov	r0, r4
    3ea8:	ldr	r1, [pc, #384]	; (402c <MTPD::GetObjectInfo(unsigned long)+0x24c>)
    3eaa:	bl	3994 <MTPD::writestring(char const*)>
    writestring("");  // keywords
    3eae:	mov	r0, r4
    3eb0:	ldr	r1, [pc, #376]	; (402c <MTPD::GetObjectInfo(unsigned long)+0x24c>)
    3eb2:	bl	3994 <MTPD::writestring(char const*)>
  }
    3eb6:	add	sp, #332	; 0x14c
    3eb8:	pop	{r4, r5, r6, r7, pc}
    3eba:	add	r1, sp, #28
    3ebc:	movs	r2, #4
    3ebe:	mov	r0, r4
    3ec0:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    uint32_t size, parent;
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    write32(store); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    3ec4:	ldr	r3, [sp, #20]
    3ec6:	ldrb	r6, [r4, #8]
    3ec8:	adds	r3, #1
    3eca:	movw	r3, #12289	; 0x3001
    3ece:	it	ne
    3ed0:	movne	r3, #0
    3ed2:	strh.w	r3, [sp, #16]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    3ed6:	cmp	r6, #0
    3ed8:	bne.w	3ffc <MTPD::GetObjectInfo(unsigned long)+0x21c>
    3edc:	add	r1, sp, #16
    3ede:	movs	r2, #2
    3ee0:	mov	r0, r4
    3ee2:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    3ee6:	ldrb	r3, [r4, #8]
    3ee8:	strh.w	r6, [sp, #14]
    3eec:	cmp	r3, #0
    3eee:	bne.w	4000 <MTPD::GetObjectInfo(unsigned long)+0x220>
    3ef2:	movs	r2, #2
    3ef4:	add.w	r1, sp, #14
    3ef8:	mov	r0, r4
    3efa:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    3efe:	ldrb	r3, [r4, #8]
    3f00:	ldr	r2, [sp, #20]
    3f02:	str	r2, [sp, #60]	; 0x3c
    3f04:	cmp	r3, #0
    3f06:	bne.n	4004 <MTPD::GetObjectInfo(unsigned long)+0x224>
    3f08:	add	r1, sp, #60	; 0x3c
    3f0a:	movs	r2, #4
    3f0c:	mov	r0, r4
    3f0e:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    3f12:	ldrb	r3, [r4, #8]
    3f14:	strh.w	r6, [sp, #12]
    3f18:	cmp	r3, #0
    3f1a:	bne.n	4008 <MTPD::GetObjectInfo(unsigned long)+0x228>
    3f1c:	add	r1, sp, #12
    3f1e:	movs	r2, #2
    3f20:	mov	r0, r4
    3f22:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    3f26:	ldrb	r3, [r4, #8]
    3f28:	str	r6, [sp, #56]	; 0x38
    3f2a:	cmp	r3, #0
    3f2c:	bne.n	400c <MTPD::GetObjectInfo(unsigned long)+0x22c>
    3f2e:	add	r1, sp, #56	; 0x38
    3f30:	movs	r2, #4
    3f32:	mov	r0, r4
    3f34:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    3f38:	ldrb	r3, [r4, #8]
    3f3a:	str	r6, [sp, #52]	; 0x34
    3f3c:	cmp	r3, #0
    3f3e:	bne.n	4010 <MTPD::GetObjectInfo(unsigned long)+0x230>
    3f40:	add	r1, sp, #52	; 0x34
    3f42:	movs	r2, #4
    3f44:	mov	r0, r4
    3f46:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    3f4a:	ldrb	r3, [r4, #8]
    3f4c:	str	r6, [sp, #48]	; 0x30
    3f4e:	cmp	r3, #0
    3f50:	bne.n	4014 <MTPD::GetObjectInfo(unsigned long)+0x234>
    3f52:	add	r1, sp, #48	; 0x30
    3f54:	movs	r2, #4
    3f56:	mov	r0, r4
    3f58:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    3f5c:	ldrb	r3, [r4, #8]
    3f5e:	str	r6, [sp, #44]	; 0x2c
    3f60:	cmp	r3, #0
    3f62:	bne.n	4018 <MTPD::GetObjectInfo(unsigned long)+0x238>
    3f64:	add	r1, sp, #44	; 0x2c
    3f66:	movs	r2, #4
    3f68:	mov	r0, r4
    3f6a:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    3f6e:	ldrb	r3, [r4, #8]
    3f70:	str	r6, [sp, #40]	; 0x28
    3f72:	cmp	r3, #0
    3f74:	bne.n	401c <MTPD::GetObjectInfo(unsigned long)+0x23c>
    3f76:	add	r1, sp, #40	; 0x28
    3f78:	movs	r2, #4
    3f7a:	mov	r0, r4
    3f7c:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    3f80:	ldrb	r3, [r4, #8]
    3f82:	str	r6, [sp, #36]	; 0x24
    3f84:	cmp	r3, #0
    3f86:	bne.n	4020 <MTPD::GetObjectInfo(unsigned long)+0x240>
    3f88:	movs	r2, #4
    3f8a:	add	r1, sp, #36	; 0x24
    3f8c:	mov	r0, r4
    3f8e:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    3f92:	ldrb	r3, [r4, #8]
    3f94:	ldr	r2, [r5, #0]
    3f96:	str	r2, [sp, #32]
    3f98:	cmp	r3, #0
    3f9a:	bne.n	4024 <MTPD::GetObjectInfo(unsigned long)+0x244>
    3f9c:	add	r1, sp, #32
    3f9e:	movs	r2, #4
    3fa0:	mov	r0, r4
    3fa2:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    3fa6:	ldr	r3, [sp, #20]
    3fa8:	ldrb	r6, [r4, #8]
    3faa:	sub.w	r3, r3, #4294967295
    3fae:	clz	r3, r3
    3fb2:	lsrs	r3, r3, #5
    3fb4:	strh.w	r3, [sp, #18]
    3fb8:	cmp	r6, #0
    3fba:	bne.n	4028 <MTPD::GetObjectInfo(unsigned long)+0x248>
    3fbc:	add.w	r1, sp, #18
    3fc0:	movs	r2, #2
    3fc2:	mov	r0, r4
    3fc4:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    3fc8:	ldrb	r5, [r4, #8]
    3fca:	str	r6, [sp, #68]	; 0x44
    3fcc:	cbnz	r5, 3ff8 <MTPD::GetObjectInfo(unsigned long)+0x218>
    3fce:	add	r1, sp, #68	; 0x44
    3fd0:	movs	r2, #4
    3fd2:	mov	r0, r4
    3fd4:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    3fd8:	ldrb	r3, [r4, #8]
    3fda:	str	r5, [sp, #64]	; 0x40
    3fdc:	cbnz	r3, 3ff4 <MTPD::GetObjectInfo(unsigned long)+0x214>
    3fde:	add	r1, sp, #64	; 0x40
    3fe0:	movs	r2, #4
    3fe2:	mov	r0, r4
    3fe4:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    3fe8:	b.n	3e96 <MTPD::GetObjectInfo(unsigned long)+0xb6>
    3fea:	movw	r2, #12289	; 0x3001
    3fee:	strh.w	r2, [sp, #16]
    3ff2:	b.n	3e1a <MTPD::GetObjectInfo(unsigned long)+0x3a>
    3ff4:	ldr	r3, [r4, #12]
    3ff6:	b.n	3e92 <MTPD::GetObjectInfo(unsigned long)+0xb2>
    3ff8:	ldr	r3, [r4, #12]
    3ffa:	b.n	3e8a <MTPD::GetObjectInfo(unsigned long)+0xaa>
    3ffc:	ldr	r3, [r4, #12]
    3ffe:	b.n	3e1a <MTPD::GetObjectInfo(unsigned long)+0x3a>
    4000:	ldr	r3, [r4, #12]
    4002:	b.n	3e24 <MTPD::GetObjectInfo(unsigned long)+0x44>
    4004:	ldr	r3, [r4, #12]
    4006:	b.n	3e2c <MTPD::GetObjectInfo(unsigned long)+0x4c>
    4008:	ldr	r3, [r4, #12]
    400a:	b.n	3e36 <MTPD::GetObjectInfo(unsigned long)+0x56>
    400c:	ldr	r3, [r4, #12]
    400e:	b.n	3e3e <MTPD::GetObjectInfo(unsigned long)+0x5e>
    4010:	ldr	r3, [r4, #12]
    4012:	b.n	3e46 <MTPD::GetObjectInfo(unsigned long)+0x66>
    4014:	ldr	r3, [r4, #12]
    4016:	b.n	3e4e <MTPD::GetObjectInfo(unsigned long)+0x6e>
    4018:	ldr	r3, [r4, #12]
    401a:	b.n	3e56 <MTPD::GetObjectInfo(unsigned long)+0x76>
    401c:	ldr	r3, [r4, #12]
    401e:	b.n	3e5e <MTPD::GetObjectInfo(unsigned long)+0x7e>
    4020:	ldr	r3, [r4, #12]
    4022:	b.n	3e66 <MTPD::GetObjectInfo(unsigned long)+0x86>
    4024:	ldr	r3, [r4, #12]
    4026:	b.n	3e6e <MTPD::GetObjectInfo(unsigned long)+0x8e>
    4028:	ldr	r3, [r4, #12]
    402a:	b.n	3e82 <MTPD::GetObjectInfo(unsigned long)+0xa2>
    402c:	.word	0x00011ab0

00004030 <MTPD::getObjectPropsSupported(unsigned long)>:
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    4030:	push	{r4, r5, r6, r7, lr}
      write32(propertyListNum);
    4032:	ldr	r7, [pc, #96]	; (4094 <MTPD::getObjectPropsSupported(unsigned long)+0x64>)
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4034:	ldrb	r2, [r0, #8]
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
    4036:	ldr	r3, [r7, #0]
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    4038:	sub	sp, #12
    403a:	mov	r4, r0
    403c:	str	r3, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    403e:	cbz	r2, 4086 <MTPD::getObjectPropsSupported(unsigned long)+0x56>
      write_length_ += len;
    4040:	ldr	r2, [r0, #12]
    4042:	adds	r2, #4
    4044:	str	r2, [r0, #12]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    4046:	cbz	r3, 4082 <MTPD::getObjectPropsSupported(unsigned long)+0x52>
    4048:	ldr	r6, [pc, #76]	; (4098 <MTPD::getObjectPropsSupported(unsigned long)+0x68>)
    404a:	movw	r3, #56321	; 0xdc01
    404e:	movs	r5, #0
    4050:	b.n	4064 <MTPD::getObjectPropsSupported(unsigned long)+0x34>
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    4052:	ldr	r3, [r4, #12]
    4054:	adds	r3, #2
    4056:	str	r3, [r4, #12]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    4058:	ldr	r3, [r7, #0]
    405a:	adds	r5, #1
    405c:	cmp	r3, r5
    405e:	bls.n	4082 <MTPD::getObjectPropsSupported(unsigned long)+0x52>
    4060:	ldrh.w	r3, [r6, #2]!
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4064:	ldrb	r2, [r4, #8]
    4066:	strh.w	r3, [sp, #2]
    406a:	cmp	r2, #0
    406c:	bne.n	4052 <MTPD::getObjectPropsSupported(unsigned long)+0x22>
    406e:	movs	r2, #2
    4070:	add.w	r1, sp, r2
    4074:	mov	r0, r4
    4076:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    407a:	ldr	r3, [r7, #0]
    407c:	adds	r5, #1
    407e:	cmp	r3, r5
    4080:	bhi.n	4060 <MTPD::getObjectPropsSupported(unsigned long)+0x30>
    }
    4082:	add	sp, #12
    4084:	pop	{r4, r5, r6, r7, pc}
    4086:	movs	r2, #4
    4088:	add.w	r1, sp, r2
    408c:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    4090:	ldr	r3, [r7, #0]
    4092:	b.n	4046 <MTPD::getObjectPropsSupported(unsigned long)+0x16>
    4094:	.word	0x1fff0978
    4098:	.word	0x00011c40

0000409c <MTPD::getObjectPropValue(unsigned long, unsigned long)>:
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    409c:	push	{r4, r5, r6, r7, lr}
    409e:	mov	r5, r0
    40a0:	sub	sp, #188	; 0xbc
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    40a2:	ldr	r0, [r0, #0]
    40a4:	add.w	r6, sp, #10
    40a8:	add	r4, sp, #20
    40aa:	ldr	r3, [r0, #0]
    40ac:	stmia.w	sp, {r4, r6}
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    40b0:	mov	r4, r2
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    40b2:	ldr	r6, [r3, #36]	; 0x24
    40b4:	add	r2, sp, #56	; 0x38
    40b6:	add	r3, sp, #16
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    40b8:	mov	r7, r1
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    40ba:	blx	r6
      dir = size == 0xFFFFFFFFUL;
      switch(p2)
    40bc:	sub.w	r2, r4, #56320	; 0xdc00
    40c0:	subs	r2, #1
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
      dir = size == 0xFFFFFFFFUL;
    40c2:	ldr	r3, [sp, #16]
      switch(p2)
    40c4:	cmp	r2, #67	; 0x43
    40c6:	bhi.n	412a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8e>
    40c8:	tbb	[pc, r2]
    40cc:	.word	0x7063483d
    40d0:	.word	0x31372f2f
    40d4:	.word	0x2f582f31
    40d8:	.word	0x2f2f2f2f
    40dc:	.word	0x2f2f2f2f
    40e0:	.word	0x2f2f2f2f
    40e4:	.word	0x2f2f2f2f
    40e8:	.word	0x2f2f2f2f
    40ec:	.word	0x2f2f2f2f
    40f0:	.word	0x2f2f2f2f
    40f4:	.word	0x2f2f2f2f
    40f8:	.word	0x2f2f2f2f
    40fc:	.word	0x2f2f2f2f
    4100:	.word	0x2f2f2f2f
    4104:	.word	0x2f2f2f2f
    4108:	.word	0x2f2f2f2f
    410c:	.word	0x372f2f22
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4110:	ldrb	r3, [r5, #8]
    4112:	str	r7, [sp, #52]	; 0x34
    4114:	cmp	r3, #0
    4116:	beq.n	41bc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x120>
      write_length_ += len;
    4118:	ldr	r3, [r5, #12]
    411a:	adds	r3, #4
    411c:	str	r3, [r5, #12]
    411e:	adds	r3, #4
    4120:	str	r3, [r5, #12]
    4122:	adds	r3, #4
    4124:	str	r3, [r5, #12]
    4126:	adds	r3, #4
    4128:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    412a:	add	sp, #188	; 0xbc
    412c:	pop	{r4, r5, r6, r7, pc}
          break;
        case MTP_PROPERTY_DATE_CREATED:       //0xDC08:
          writestring("");
          break;
        case MTP_PROPERTY_DATE_MODIFIED:      //0xDC09:
          writestring("");
    412e:	mov	r0, r5
    4130:	ldr	r1, [pc, #268]	; (4240 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1a4>)
    4132:	bl	3994 <MTPD::writestring(char const*)>
          writestring(name);
          break;
        default:
          break;
      }
    }
    4136:	add	sp, #188	; 0xbc
    4138:	pop	{r4, r5, r6, r7, pc}
          write32(parent);
          write32(store);
          write32(0);
          break;
        case MTP_PROPERTY_NAME:               //0xDC44:
          writestring(name);
    413a:	add	r1, sp, #56	; 0x38
    413c:	mov	r0, r5
    413e:	bl	3994 <MTPD::writestring(char const*)>
          break;
        default:
          break;
      }
    }
    4142:	add	sp, #188	; 0xbc
    4144:	pop	{r4, r5, r6, r7, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4146:	ldrb	r3, [r5, #8]
    4148:	ldrh.w	r2, [sp, #10]
    414c:	str	r2, [sp, #24]
    414e:	cmp	r3, #0
    4150:	beq.n	420c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x170>
      write_length_ += len;
    4152:	ldr	r3, [r5, #12]
    4154:	adds	r3, #4
    4156:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    4158:	add	sp, #188	; 0xbc
    415a:	pop	{r4, r5, r6, r7, pc}
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(store);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    415c:	adds	r3, #1
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    415e:	ldrb	r2, [r5, #8]
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(store);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    4160:	movw	r3, #12289	; 0x3001
    4164:	it	ne
    4166:	movne.w	r3, #12288	; 0x3000
    416a:	strh.w	r3, [sp, #12]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    416e:	cmp	r2, #0
    4170:	beq.n	4200 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x164>
      write_length_ += len;
    4172:	ldr	r3, [r5, #12]
    4174:	adds	r3, #2
    4176:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    4178:	add	sp, #188	; 0xbc
    417a:	pop	{r4, r5, r6, r7, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    417c:	ldrb	r3, [r5, #8]
    417e:	ldr	r2, [sp, #20]
    4180:	str	r2, [sp, #36]	; 0x24
    4182:	cmp	r3, #0
    4184:	bne.n	4152 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xb6>
    4186:	mov	r0, r5
    4188:	movs	r2, #4
    418a:	add	r1, sp, #36	; 0x24
    418c:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    4190:	b.n	412a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8e>
    4192:	ldrb	r3, [r5, #8]
    4194:	movs	r2, #0
    4196:	strh.w	r2, [sp, #14]
    419a:	cmp	r3, #0
    419c:	bne.n	4172 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xd6>
    419e:	mov	r0, r5
    41a0:	movs	r2, #2
    41a2:	add.w	r1, sp, #14
    41a6:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    41aa:	b.n	412a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8e>
    41ac:	ldrb	r4, [r5, #8]
    41ae:	str	r3, [sp, #32]
    41b0:	cmp	r4, #0
    41b2:	beq.n	4218 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x17c>
      write_length_ += len;
    41b4:	ldr	r3, [r5, #12]
    41b6:	adds	r3, #4
    41b8:	str	r3, [r5, #12]
    41ba:	b.n	4126 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8a>
    41bc:	movs	r2, #4
    41be:	add	r1, sp, #52	; 0x34
    41c0:	mov	r0, r5
    41c2:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    41c6:	ldrb	r3, [r5, #8]
    41c8:	ldr	r2, [sp, #20]
    41ca:	str	r2, [sp, #48]	; 0x30
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    41cc:	cmp	r3, #0
    41ce:	bne.n	423c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1a0>
    41d0:	movs	r2, #4
    41d2:	add	r1, sp, #48	; 0x30
    41d4:	mov	r0, r5
    41d6:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    41da:	ldrb	r4, [r5, #8]
    41dc:	ldrh.w	r3, [sp, #10]
    41e0:	str	r3, [sp, #44]	; 0x2c
    41e2:	cbnz	r4, 4238 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x19c>
    41e4:	movs	r2, #4
    41e6:	add	r1, sp, #44	; 0x2c
    41e8:	mov	r0, r5
    41ea:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    41ee:	ldrb	r3, [r5, #8]
    41f0:	str	r4, [sp, #40]	; 0x28
    41f2:	cbnz	r3, 4234 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x198>
    41f4:	mov	r0, r5
    41f6:	movs	r2, #4
    41f8:	add	r1, sp, #40	; 0x28
    41fa:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    41fe:	b.n	412a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8e>
    4200:	mov	r0, r5
    4202:	movs	r2, #2
    4204:	add	r1, sp, #12
    4206:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    420a:	b.n	412a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8e>
    420c:	mov	r0, r5
    420e:	movs	r2, #4
    4210:	add	r1, sp, #24
    4212:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    4216:	b.n	412a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8e>
    4218:	movs	r2, #4
    421a:	add	r1, sp, #32
    421c:	mov	r0, r5
    421e:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    4222:	ldrb	r3, [r5, #8]
    4224:	str	r4, [sp, #28]
    4226:	cbnz	r3, 4234 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x198>
    4228:	mov	r0, r5
    422a:	movs	r2, #4
    422c:	add	r1, sp, #28
    422e:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    4232:	b.n	412a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8e>
    4234:	ldr	r3, [r5, #12]
    4236:	b.n	4126 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8a>
    4238:	ldr	r3, [r5, #12]
    423a:	b.n	4122 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x86>
    423c:	ldr	r3, [r5, #12]
    423e:	b.n	411e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x82>
    4240:	.word	0x00011ab0

00004244 <MTPD::GetStorageInfo(unsigned long)>:
    uint32_t num=storage_->get_FSCount();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    4244:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4248:	mov	r4, r0
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    424a:	ldr	r0, [r0, #0]
    424c:	ldr	r3, [r0, #0]
    uint32_t num=storage_->get_FSCount();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    424e:	sub	sp, #36	; 0x24
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    4250:	ldr	r3, [r3, #20]
    uint32_t num=storage_->get_FSCount();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    4252:	mov	r5, r1
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    4254:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4256:	ldrb	r3, [r4, #8]
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    4258:	cmp	r0, #0
    425a:	ite	eq
    425c:	moveq	r2, #4
    425e:	movne	r2, #1
    4260:	strh.w	r2, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4264:	cmp	r3, #0
    4266:	beq.n	4302 <MTPD::GetStorageInfo(unsigned long)+0xbe>
      write_length_ += len;
    4268:	ldr	r3, [r4, #12]
    426a:	adds	r3, #2
    426c:	str	r3, [r4, #12]
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories( storage) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    426e:	ldr	r0, [r4, #0]
    4270:	ldr	r3, [r0, #0]
    4272:	mov	r1, r5
    4274:	ldr	r3, [r3, #24]
    4276:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4278:	ldrb	r6, [r4, #8]
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories( storage) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    427a:	cmp	r0, #0
    427c:	ite	eq
    427e:	moveq	r3, #1
    4280:	movne	r3, #2
    4282:	strh.w	r3, [sp, #10]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4286:	cmp	r6, #0
    4288:	beq.n	434a <MTPD::GetStorageInfo(unsigned long)+0x106>
      write_length_ += len;
    428a:	ldr	r3, [r4, #12]
    428c:	movs	r2, #0
    428e:	adds	r3, #2
    4290:	str	r3, [r4, #12]
    4292:	strh.w	r2, [sp, #8]
    4296:	adds	r3, #2
    4298:	str	r3, [r4, #12]
  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories( storage) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)
    
    uint64_t ntotal = storage_->totalSize(storage) ; 
    429a:	ldr	r0, [r4, #0]
    429c:	ldr	r3, [r0, #0]
    429e:	mov	r1, r5
    42a0:	ldr	r3, [r3, #12]
    42a2:	blx	r3
    42a4:	mov	r6, r0
    uint64_t nused = storage_->usedSize(storage) ; 
    42a6:	ldr	r0, [r4, #0]
    42a8:	ldr	r3, [r0, #0]
  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories( storage) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)
    
    uint64_t ntotal = storage_->totalSize(storage) ; 
    42aa:	mov	r7, r1
    uint64_t nused = storage_->usedSize(storage) ; 
    42ac:	ldr	r3, [r3, #16]
    42ae:	mov	r1, r5
    42b0:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    42b2:	ldrb	r3, [r4, #8]
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories( storage) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)
    
    uint64_t ntotal = storage_->totalSize(storage) ; 
    uint64_t nused = storage_->usedSize(storage) ; 
    42b4:	mov	r8, r0
    42b6:	mov	r9, r1
    42b8:	strd	r6, r7, [sp, #24]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    42bc:	cbz	r3, 4310 <MTPD::GetStorageInfo(unsigned long)+0xcc>
    42be:	subs	r6, r6, r0
      write_length_ += len;
    42c0:	ldr	r3, [r4, #12]
    42c2:	sbc.w	r7, r7, r1
    42c6:	strd	r6, r7, [sp, #16]
    42ca:	adds	r3, #8
    42cc:	str	r3, [r4, #12]
    42ce:	adds	r3, #8
    42d0:	mov.w	r2, #4294967295
    42d4:	str	r3, [r4, #12]
    42d6:	str	r2, [sp, #12]
    42d8:	adds	r3, #4
    42da:	str	r3, [r4, #12]
    write64(ntotal);  // max capacity
    write64((ntotal-nused));  // free space (100M)
    //
    write32(0xFFFFFFFFUL);  // free space (objects)
//    const char *name = storage_->getStorageName(storage);
    const char *name = storage_->get_FSName(storage);
    42dc:	ldr	r0, [r4, #0]
    42de:	ldr	r2, [pc, #160]	; (4380 <MTPD::GetStorageInfo(unsigned long)+0x13c>)
    42e0:	ldr	r3, [r0, #0]
    42e2:	ldr	r3, [r3, #8]
    42e4:	cmp	r3, r2
    42e6:	bne.n	436a <MTPD::GetStorageInfo(unsigned long)+0x126>
    const char *sd_getFSName(uint32_t storage) { return sd_name[storage-1];}
    42e8:	add.w	r0, r0, r5, lsl #2
    42ec:	ldr	r1, [r0, #4]
    writestring(name);  // storage descriptor
    42ee:	mov	r0, r4
    42f0:	bl	3994 <MTPD::writestring(char const*)>
    writestring("");  // volume identifier
    42f4:	mov	r0, r4
    42f6:	ldr	r1, [pc, #140]	; (4384 <MTPD::GetStorageInfo(unsigned long)+0x140>)
    42f8:	bl	3994 <MTPD::writestring(char const*)>
  }
    42fc:	add	sp, #36	; 0x24
    42fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4302:	movs	r2, #2
    4304:	add.w	r1, sp, #6
    4308:	mov	r0, r4
    430a:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    430e:	b.n	426e <MTPD::GetStorageInfo(unsigned long)+0x2a>
    4310:	movs	r2, #8
    4312:	add	r1, sp, #24
    4314:	mov	r0, r4
    4316:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    431a:	subs.w	r6, r6, r8
    431e:	ldrb	r3, [r4, #8]
    4320:	sbc.w	r7, r7, r9
    4324:	strd	r6, r7, [sp, #16]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4328:	cbnz	r3, 4376 <MTPD::GetStorageInfo(unsigned long)+0x132>
    432a:	movs	r2, #8
    432c:	add	r1, sp, #16
    432e:	mov	r0, r4
    4330:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    4334:	ldrb	r3, [r4, #8]
    4336:	mov.w	r2, #4294967295
    433a:	str	r2, [sp, #12]
    433c:	cbnz	r3, 4372 <MTPD::GetStorageInfo(unsigned long)+0x12e>
    433e:	movs	r2, #4
    4340:	add	r1, sp, #12
    4342:	mov	r0, r4
    4344:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    4348:	b.n	42dc <MTPD::GetStorageInfo(unsigned long)+0x98>
    434a:	movs	r2, #2
    434c:	add.w	r1, sp, #10
    4350:	mov	r0, r4
    4352:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    4356:	ldrb	r3, [r4, #8]
    4358:	strh.w	r6, [sp, #8]
    435c:	cbnz	r3, 437a <MTPD::GetStorageInfo(unsigned long)+0x136>
    435e:	movs	r2, #2
    4360:	add	r1, sp, #8
    4362:	mov	r0, r4
    4364:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    4368:	b.n	429a <MTPD::GetStorageInfo(unsigned long)+0x56>
    write64(ntotal);  // max capacity
    write64((ntotal-nused));  // free space (100M)
    //
    write32(0xFFFFFFFFUL);  // free space (objects)
//    const char *name = storage_->getStorageName(storage);
    const char *name = storage_->get_FSName(storage);
    436a:	mov	r1, r5
    436c:	blx	r3
    436e:	mov	r1, r0
    4370:	b.n	42ee <MTPD::GetStorageInfo(unsigned long)+0xaa>
    4372:	ldr	r3, [r4, #12]
    4374:	b.n	42d8 <MTPD::GetStorageInfo(unsigned long)+0x94>
    4376:	ldr	r3, [r4, #12]
    4378:	b.n	42ce <MTPD::GetStorageInfo(unsigned long)+0x8a>
    437a:	ldr	r3, [r4, #12]
    437c:	b.n	4296 <MTPD::GetStorageInfo(unsigned long)+0x52>
    437e:	nop
    4380:	.word	0x0000148d
    4384:	.word	0x00011ab0

00004388 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
    4388:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      switch(p1)
    438c:	sub.w	r1, r1, #56320	; 0xdc00
    4390:	subs	r1, #1
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
    4392:	sub	sp, #148	; 0x94
    4394:	mov	r4, r0
      switch(p1)
    4396:	cmp	r1, #67	; 0x43
    4398:	bhi.n	4450 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    439a:	tbh	[pc, r1, lsl #1]
    439e:	.short	0x005c
    43a0:	.word	0x0080006e
    43a4:	.word	0x005900c6
    43a8:	.word	0x00d80059
    43ac:	.word	0x01690121
    43b0:	.word	0x01b10059
    43b4:	.word	0x00590059
    43b8:	.word	0x00590059
    43bc:	.word	0x00590059
    43c0:	.word	0x00590059
    43c4:	.word	0x00590059
    43c8:	.word	0x00590059
    43cc:	.word	0x00590059
    43d0:	.word	0x00590059
    43d4:	.word	0x00590059
    43d8:	.word	0x00590059
    43dc:	.word	0x00590059
    43e0:	.word	0x00590059
    43e4:	.word	0x00590059
    43e8:	.word	0x00590059
    43ec:	.word	0x00590059
    43f0:	.word	0x00590059
    43f4:	.word	0x00590059
    43f8:	.word	0x00590059
    43fc:	.word	0x00590059
    4400:	.word	0x00590059
    4404:	.word	0x00590059
    4408:	.word	0x00590059
    440c:	.word	0x00590059
    4410:	.word	0x00590059
    4414:	.word	0x00590059
    4418:	.word	0x00590059
    441c:	.word	0x01f70059
    4420:	.word	0x00590059
    4424:	.short	0x0044
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4426:	ldrb	r3, [r0, #8]
    4428:	movw	r2, #56388	; 0xdc44
    442c:	strh.w	r2, [sp, #70]	; 0x46
    4430:	cmp	r3, #0
    4432:	beq.w	48b0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x528>
      write_length_ += len;
    4436:	ldr	r3, [r4, #12]
    4438:	adds	r3, #2
    443a:	str	r3, [r4, #12]
    443c:	adds	r3, #2
    443e:	str	r3, [r4, #12]
    4440:	adds	r3, #1
    4442:	str	r3, [r4, #12]
    4444:	adds	r3, #1
    4446:	str	r3, [r4, #12]
    4448:	adds	r3, #4
    444a:	str	r3, [r4, #12]
    444c:	adds	r3, #1
    444e:	str	r3, [r4, #12]
          write8(0);
          break;
        default:
          break;
      }
    }
    4450:	add	sp, #148	; 0x94
    4452:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4456:	ldrb	r3, [r0, #8]
    4458:	movw	r2, #56321	; 0xdc01
    445c:	strh.w	r2, [sp, #30]
    4460:	cmp	r3, #0
    4462:	beq.w	49c4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x63c>
      write_length_ += len;
    4466:	ldr	r3, [r4, #12]
    4468:	adds	r3, #2
    446a:	str	r3, [r4, #12]
    446c:	adds	r3, #2
    446e:	str	r3, [r4, #12]
    4470:	adds	r3, #1
    4472:	str	r3, [r4, #12]
    4474:	adds	r3, #4
    4476:	str	r3, [r4, #12]
    4478:	b.n	4448 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    447a:	ldrb	r3, [r0, #8]
    447c:	movw	r2, #56322	; 0xdc02
    4480:	strh.w	r2, [sp, #36]	; 0x24
    4484:	cmp	r3, #0
    4486:	beq.w	4832 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4aa>
      write_length_ += len;
    448a:	ldr	r3, [r4, #12]
    448c:	adds	r3, #2
    448e:	str	r3, [r4, #12]
    4490:	adds	r3, #2
    4492:	str	r3, [r4, #12]
    4494:	adds	r3, #1
    4496:	str	r3, [r4, #12]
    4498:	adds	r3, #2
    449a:	str	r3, [r4, #12]
    449c:	b.n	4448 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    449e:	ldrb	r3, [r0, #8]
    44a0:	movw	r2, #56323	; 0xdc03
    44a4:	strh.w	r2, [sp, #42]	; 0x2a
    44a8:	cmp	r3, #0
    44aa:	bne.n	448a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x102>
    44ac:	movs	r2, #2
    44ae:	add.w	r1, sp, #42	; 0x2a
    44b2:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    44b6:	ldrb	r7, [r4, #8]
    44b8:	movs	r6, #4
    44ba:	strh.w	r6, [sp, #40]	; 0x28
    44be:	cmp	r7, #0
    44c0:	bne.w	4a5a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d2>
    44c4:	movs	r2, #2
    44c6:	add	r1, sp, #40	; 0x28
    44c8:	mov	r0, r4
    44ca:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    44ce:	ldrb	r5, [r4, #8]
    44d0:	strb.w	r7, [sp, #9]
    44d4:	cmp	r5, #0
    44d6:	bne.w	4a56 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ce>
    44da:	movs	r2, #1
    44dc:	add.w	r1, sp, #9
    44e0:	mov	r0, r4
    44e2:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    44e6:	ldrb	r7, [r4, #8]
    44e8:	strh.w	r5, [sp, #38]	; 0x26
    44ec:	cmp	r7, #0
    44ee:	bne.w	4a52 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ca>
    44f2:	movs	r2, #2
    44f4:	add.w	r1, sp, #38	; 0x26
    44f8:	mov	r0, r4
    44fa:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    44fe:	ldrb	r5, [r4, #8]
    4500:	str	r7, [sp, #84]	; 0x54
    4502:	cmp	r5, #0
    4504:	bne.w	4a2e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    4508:	mov	r2, r6
    450a:	add	r1, sp, #84	; 0x54
    450c:	mov	r0, r4
    450e:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    4512:	ldrb	r3, [r4, #8]
    4514:	strb.w	r5, [sp, #8]
    4518:	cmp	r3, #0
    451a:	bne.w	4a2a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    451e:	mov	r0, r4
    4520:	movs	r2, #1
    4522:	add	r1, sp, #8
    4524:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    4528:	b.n	4450 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    452a:	ldrb	r3, [r0, #8]
    452c:	movw	r2, #56324	; 0xdc04
    4530:	strh.w	r2, [sp, #46]	; 0x2e
    4534:	cmp	r3, #0
    4536:	beq.w	47b0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x428>
      write_length_ += len;
    453a:	ldr	r3, [r0, #12]
    453c:	adds	r3, #2
    453e:	str	r3, [r0, #12]
    4540:	adds	r3, #2
    4542:	str	r3, [r4, #12]
    4544:	adds	r3, #1
    4546:	str	r3, [r4, #12]
    4548:	adds	r3, #8
    454a:	str	r3, [r4, #12]
    454c:	b.n	4448 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    454e:	ldrb	r3, [r0, #8]
    4550:	movw	r2, #56327	; 0xdc07
    4554:	strh.w	r2, [sp, #50]	; 0x32
    4558:	cmp	r3, #0
    455a:	bne.w	4436 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    455e:	movs	r2, #2
    4560:	add.w	r1, sp, #50	; 0x32
    4564:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    4568:	ldrb	r3, [r4, #8]
    456a:	movw	r2, #65535	; 0xffff
    456e:	strh.w	r2, [sp, #48]	; 0x30
    4572:	cmp	r3, #0
    4574:	bne.w	4a42 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    4578:	movs	r2, #2
    457a:	add	r1, sp, #48	; 0x30
    457c:	mov	r0, r4
    457e:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    4582:	ldrb	r6, [r4, #8]
    4584:	movs	r5, #1
    4586:	strb.w	r5, [sp, #14]
    458a:	cmp	r6, #0
    458c:	bne.w	4a3e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    4590:	mov	r2, r5
    4592:	add.w	r1, sp, #14
    4596:	mov	r0, r4
    4598:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    459c:	ldrb	r7, [r4, #8]
    459e:	strb.w	r6, [sp, #13]
    45a2:	cmp	r7, #0
    45a4:	bne.w	4a4e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    45a8:	mov	r2, r5
    45aa:	add.w	r1, sp, #13
    45ae:	mov	r0, r4
    45b0:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    45b4:	ldrb	r6, [r4, #8]
    45b6:	str	r7, [sp, #92]	; 0x5c
    45b8:	cmp	r6, #0
    45ba:	bne.w	4a2e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    45be:	movs	r2, #4
    45c0:	add	r1, sp, #92	; 0x5c
    45c2:	mov	r0, r4
    45c4:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    45c8:	ldrb	r3, [r4, #8]
    45ca:	strb.w	r6, [sp, #12]
    45ce:	cmp	r3, #0
    45d0:	bne.w	4a2a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    45d4:	mov	r2, r5
    45d6:	mov	r0, r4
    45d8:	add	r1, sp, #12
    45da:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    45de:	b.n	4450 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    45e0:	ldrb	r3, [r0, #8]
    45e2:	movw	r2, #56328	; 0xdc08
    45e6:	strh.w	r2, [sp, #54]	; 0x36
    45ea:	cmp	r3, #0
    45ec:	bne.w	4436 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    45f0:	movs	r2, #2
    45f2:	add.w	r1, sp, #54	; 0x36
    45f6:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    45fa:	ldrb	r6, [r4, #8]
    45fc:	movw	r3, #65535	; 0xffff
    4600:	strh.w	r3, [sp, #52]	; 0x34
    4604:	cmp	r6, #0
    4606:	bne.w	4a42 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    460a:	movs	r2, #2
    460c:	add	r1, sp, #52	; 0x34
    460e:	mov	r0, r4
    4610:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    4614:	ldrb	r5, [r4, #8]
    4616:	strb.w	r6, [sp, #17]
    461a:	cmp	r5, #0
    461c:	bne.w	4a3e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    4620:	movs	r2, #1
    4622:	add.w	r1, sp, #17
    4626:	mov	r0, r4
    4628:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    462c:	ldrb	r6, [r4, #8]
    462e:	strb.w	r5, [sp, #16]
    4632:	cmp	r6, #0
    4634:	bne.w	4a4e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    4638:	movs	r2, #1
    463a:	add	r1, sp, #16
    463c:	mov	r0, r4
    463e:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    4642:	ldrb	r5, [r4, #8]
    4644:	str	r6, [sp, #96]	; 0x60
    4646:	cmp	r5, #0
    4648:	bne.w	4a2e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    464c:	movs	r2, #4
    464e:	add	r1, sp, #96	; 0x60
    4650:	mov	r0, r4
    4652:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    4656:	ldrb	r3, [r4, #8]
    4658:	strb.w	r5, [sp, #15]
    465c:	cmp	r3, #0
    465e:	bne.w	4a2a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    4662:	mov	r0, r4
    4664:	movs	r2, #1
    4666:	add.w	r1, sp, #15
    466a:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    466e:	b.n	4450 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    4670:	ldrb	r3, [r0, #8]
    4672:	movw	r2, #56329	; 0xdc09
    4676:	strh.w	r2, [sp, #58]	; 0x3a
    467a:	cmp	r3, #0
    467c:	bne.w	4436 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    4680:	movs	r2, #2
    4682:	add.w	r1, sp, #58	; 0x3a
    4686:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    468a:	ldrb	r6, [r4, #8]
    468c:	movw	r3, #65535	; 0xffff
    4690:	strh.w	r3, [sp, #56]	; 0x38
    4694:	cmp	r6, #0
    4696:	bne.w	4a42 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    469a:	movs	r2, #2
    469c:	add	r1, sp, #56	; 0x38
    469e:	mov	r0, r4
    46a0:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    46a4:	ldrb	r5, [r4, #8]
    46a6:	strb.w	r6, [sp, #20]
    46aa:	cmp	r5, #0
    46ac:	bne.w	4a3e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    46b0:	movs	r2, #1
    46b2:	add	r1, sp, #20
    46b4:	mov	r0, r4
    46b6:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    46ba:	ldrb	r6, [r4, #8]
    46bc:	strb.w	r5, [sp, #19]
    46c0:	cmp	r6, #0
    46c2:	bne.w	4a4e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    46c6:	movs	r2, #1
    46c8:	add.w	r1, sp, #19
    46cc:	mov	r0, r4
    46ce:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    46d2:	ldrb	r5, [r4, #8]
    46d4:	str	r6, [sp, #100]	; 0x64
    46d6:	cmp	r5, #0
    46d8:	bne.w	4a2e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    46dc:	movs	r2, #4
    46de:	add	r1, sp, #100	; 0x64
    46e0:	mov	r0, r4
    46e2:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    46e6:	ldrb	r3, [r4, #8]
    46e8:	strb.w	r5, [sp, #18]
    46ec:	cmp	r3, #0
    46ee:	bne.w	4a2a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    46f2:	mov	r0, r4
    46f4:	movs	r2, #1
    46f6:	add.w	r1, sp, #18
    46fa:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    46fe:	b.n	4450 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    4700:	ldrb	r3, [r0, #8]
    4702:	movw	r2, #56331	; 0xdc0b
    4706:	strh.w	r2, [sp, #62]	; 0x3e
    470a:	cmp	r3, #0
    470c:	bne.w	4466 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xde>
    4710:	movs	r2, #2
    4712:	add.w	r1, sp, #62	; 0x3e
    4716:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    471a:	ldrb	r6, [r4, #8]
    471c:	movs	r3, #6
    471e:	strh.w	r3, [sp, #60]	; 0x3c
    4722:	cmp	r6, #0
    4724:	bne.w	4a3a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b2>
    4728:	movs	r2, #2
    472a:	add	r1, sp, #60	; 0x3c
    472c:	mov	r0, r4
    472e:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    4732:	ldrb	r5, [r4, #8]
    4734:	strb.w	r6, [sp, #22]
    4738:	cmp	r5, #0
    473a:	bne.w	4a36 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ae>
    473e:	movs	r2, #1
    4740:	add.w	r1, sp, #22
    4744:	mov	r0, r4
    4746:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    474a:	ldrb	r6, [r4, #8]
    474c:	str	r5, [sp, #108]	; 0x6c
    474e:	cmp	r6, #0
    4750:	bne.w	4a32 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6aa>
    4754:	movs	r2, #4
    4756:	add	r1, sp, #108	; 0x6c
    4758:	mov	r0, r4
    475a:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    475e:	ldrb	r5, [r4, #8]
    4760:	str	r6, [sp, #104]	; 0x68
    4762:	cmp	r5, #0
    4764:	bne.w	4a2e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    4768:	movs	r2, #4
    476a:	add	r1, sp, #104	; 0x68
    476c:	mov	r0, r4
    476e:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    4772:	ldrb	r3, [r4, #8]
    4774:	strb.w	r5, [sp, #21]
    4778:	cmp	r3, #0
    477a:	bne.w	4a2a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    477e:	mov	r0, r4
    4780:	movs	r2, #1
    4782:	add.w	r1, sp, #21
    4786:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    478a:	b.n	4450 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    478c:	ldrb	r3, [r0, #8]
    478e:	movw	r2, #56385	; 0xdc41
    4792:	strh.w	r2, [sp, #66]	; 0x42
    4796:	cmp	r3, #0
    4798:	beq.w	4932 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5aa>
      write_length_ += len;
    479c:	ldr	r3, [r0, #12]
    479e:	adds	r3, #2
    47a0:	str	r3, [r0, #12]
    47a2:	adds	r3, #2
    47a4:	str	r3, [r4, #12]
    47a6:	adds	r3, #1
    47a8:	str	r3, [r4, #12]
    47aa:	adds	r3, #8
    47ac:	str	r3, [r4, #12]
    47ae:	b.n	4548 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c0>
    47b0:	movs	r2, #2
    47b2:	add.w	r1, sp, #46	; 0x2e
    47b6:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    47ba:	ldrb	r6, [r4, #8]
    47bc:	movs	r5, #8
    47be:	strh.w	r5, [sp, #44]	; 0x2c
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    47c2:	cmp	r6, #0
    47c4:	bne.w	4a4a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c2>
    47c8:	movs	r2, #2
    47ca:	add	r1, sp, #44	; 0x2c
    47cc:	mov	r0, r4
    47ce:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    47d2:	ldrb	r3, [r4, #8]
    47d4:	strb.w	r6, [sp, #11]
    47d8:	cmp	r3, #0
    47da:	bne.w	4a46 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6be>
    47de:	movs	r2, #1
    47e0:	add.w	r1, sp, #11
    47e4:	mov	r0, r4
    47e6:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    47ea:	ldrb	r6, [r4, #8]
    47ec:	movs	r2, #0
    47ee:	movs	r3, #0
    47f0:	strd	r2, r3, [sp, #120]	; 0x78
    47f4:	cmp	r6, #0
    47f6:	bne.w	4a5e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d6>
    47fa:	mov	r2, r5
    47fc:	add	r1, sp, #120	; 0x78
    47fe:	mov	r0, r4
    4800:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    4804:	ldrb	r5, [r4, #8]
    4806:	str	r6, [sp, #88]	; 0x58
    4808:	cmp	r5, #0
    480a:	bne.w	4a2e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    480e:	movs	r2, #4
    4810:	add	r1, sp, #88	; 0x58
    4812:	mov	r0, r4
    4814:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    4818:	ldrb	r3, [r4, #8]
    481a:	strb.w	r5, [sp, #10]
    481e:	cmp	r3, #0
    4820:	bne.w	4a2a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    4824:	mov	r0, r4
    4826:	movs	r2, #1
    4828:	add.w	r1, sp, #10
    482c:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    4830:	b.n	4450 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    4832:	movs	r2, #2
    4834:	add	r1, sp, #36	; 0x24
    4836:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    483a:	ldrb	r7, [r4, #8]
    483c:	movs	r6, #4
    483e:	strh.w	r6, [sp, #34]	; 0x22
    4842:	cmp	r7, #0
    4844:	bne.w	4a5a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d2>
    4848:	movs	r2, #2
    484a:	add.w	r1, sp, #34	; 0x22
    484e:	mov	r0, r4
    4850:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    4854:	ldrb	r5, [r4, #8]
    4856:	strb.w	r7, [sp, #7]
    485a:	cmp	r5, #0
    485c:	bne.w	4a56 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ce>
    4860:	movs	r2, #1
    4862:	add.w	r1, sp, #7
    4866:	mov	r0, r4
    4868:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    486c:	ldrb	r7, [r4, #8]
    486e:	strh.w	r5, [sp, #32]
    4872:	cmp	r7, #0
    4874:	bne.w	4a52 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ca>
    4878:	movs	r2, #2
    487a:	add	r1, sp, #32
    487c:	mov	r0, r4
    487e:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    4882:	ldrb	r5, [r4, #8]
    4884:	str	r7, [sp, #80]	; 0x50
    4886:	cmp	r5, #0
    4888:	bne.w	4a2e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    488c:	mov	r2, r6
    488e:	add	r1, sp, #80	; 0x50
    4890:	mov	r0, r4
    4892:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    4896:	ldrb	r3, [r4, #8]
    4898:	strb.w	r5, [sp, #6]
    489c:	cmp	r3, #0
    489e:	bne.w	4a2a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    48a2:	mov	r0, r4
    48a4:	movs	r2, #1
    48a6:	add.w	r1, sp, #6
    48aa:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    48ae:	b.n	4450 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    48b0:	movs	r2, #2
    48b2:	add.w	r1, sp, #70	; 0x46
    48b6:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    48ba:	ldrb	r6, [r4, #8]
    48bc:	movw	r3, #65535	; 0xffff
    48c0:	strh.w	r3, [sp, #68]	; 0x44
    48c4:	cmp	r6, #0
    48c6:	bne.w	4a42 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    48ca:	movs	r2, #2
    48cc:	add	r1, sp, #68	; 0x44
    48ce:	mov	r0, r4
    48d0:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    48d4:	ldrb	r5, [r4, #8]
    48d6:	strb.w	r6, [sp, #27]
    48da:	cmp	r5, #0
    48dc:	bne.w	4a3e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    48e0:	movs	r2, #1
    48e2:	add.w	r1, sp, #27
    48e6:	mov	r0, r4
    48e8:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    48ec:	ldrb	r6, [r4, #8]
    48ee:	strb.w	r5, [sp, #26]
    48f2:	cmp	r6, #0
    48f4:	bne.w	4a4e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    48f8:	movs	r2, #1
    48fa:	add.w	r1, sp, #26
    48fe:	mov	r0, r4
    4900:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    4904:	ldrb	r5, [r4, #8]
    4906:	str	r6, [sp, #116]	; 0x74
    4908:	cmp	r5, #0
    490a:	bne.w	4a2e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    490e:	movs	r2, #4
    4910:	add	r1, sp, #116	; 0x74
    4912:	mov	r0, r4
    4914:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    4918:	ldrb	r3, [r4, #8]
    491a:	strb.w	r5, [sp, #25]
    491e:	cmp	r3, #0
    4920:	bne.w	4a2a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    4924:	mov	r0, r4
    4926:	movs	r2, #1
    4928:	add.w	r1, sp, #25
    492c:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    4930:	b.n	4450 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    4932:	movs	r2, #2
    4934:	add.w	r1, sp, #66	; 0x42
    4938:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    493c:	ldrb	r5, [r4, #8]
    493e:	movs	r3, #10
    4940:	strh.w	r3, [sp, #64]	; 0x40
    4944:	cmp	r5, #0
    4946:	bne.w	4a6a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6e2>
    494a:	movs	r2, #2
    494c:	add	r1, sp, #64	; 0x40
    494e:	mov	r0, r4
    4950:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    4954:	ldrb	r3, [r4, #8]
    4956:	strb.w	r5, [sp, #24]
    495a:	cmp	r3, #0
    495c:	bne.w	4a66 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6de>
    4960:	movs	r2, #1
    4962:	add	r1, sp, #24
    4964:	mov	r0, r4
    4966:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    496a:	ldrb	r3, [r4, #8]
    496c:	mov.w	r8, #0
    4970:	mov.w	r9, #0
    4974:	strd	r8, r9, [sp, #136]	; 0x88
    4978:	cmp	r3, #0
    497a:	bne.n	4a62 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6da>
    497c:	movs	r2, #8
    497e:	add	r1, sp, #136	; 0x88
    4980:	mov	r0, r4
    4982:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    4986:	ldrb	r6, [r4, #8]
    4988:	strd	r8, r9, [sp, #128]	; 0x80
    498c:	cmp	r6, #0
    498e:	bne.n	4a5e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d6>
    4990:	movs	r2, #8
    4992:	add	r1, sp, #128	; 0x80
    4994:	mov	r0, r4
    4996:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    499a:	ldrb	r5, [r4, #8]
    499c:	str	r6, [sp, #112]	; 0x70
    499e:	cmp	r5, #0
    49a0:	bne.n	4a2e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    49a2:	movs	r2, #4
    49a4:	add	r1, sp, #112	; 0x70
    49a6:	mov	r0, r4
    49a8:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    49ac:	ldrb	r3, [r4, #8]
    49ae:	strb.w	r5, [sp, #23]
    49b2:	cmp	r3, #0
    49b4:	bne.n	4a2a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    49b6:	mov	r0, r4
    49b8:	movs	r2, #1
    49ba:	add.w	r1, sp, #23
    49be:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    49c2:	b.n	4450 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    49c4:	movs	r2, #2
    49c6:	add.w	r1, sp, #30
    49ca:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    49ce:	ldrb	r6, [r4, #8]
    49d0:	movs	r3, #6
    49d2:	strh.w	r3, [sp, #28]
    49d6:	cbnz	r6, 4a3a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b2>
    49d8:	movs	r2, #2
    49da:	add	r1, sp, #28
    49dc:	mov	r0, r4
    49de:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    49e2:	ldrb	r5, [r4, #8]
    49e4:	strb.w	r6, [sp, #5]
    49e8:	cbnz	r5, 4a36 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ae>
    49ea:	movs	r2, #1
    49ec:	add.w	r1, sp, #5
    49f0:	mov	r0, r4
    49f2:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    49f6:	ldrb	r6, [r4, #8]
    49f8:	str	r5, [sp, #76]	; 0x4c
    49fa:	cbnz	r6, 4a32 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6aa>
    49fc:	movs	r2, #4
    49fe:	add	r1, sp, #76	; 0x4c
    4a00:	mov	r0, r4
    4a02:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    4a06:	ldrb	r5, [r4, #8]
    4a08:	str	r6, [sp, #72]	; 0x48
    4a0a:	cbnz	r5, 4a2e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    4a0c:	movs	r2, #4
    4a0e:	add	r1, sp, #72	; 0x48
    4a10:	mov	r0, r4
    4a12:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    4a16:	ldrb	r3, [r4, #8]
    4a18:	strb.w	r5, [sp, #4]
    4a1c:	cbnz	r3, 4a2a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    4a1e:	mov	r0, r4
    4a20:	movs	r2, #1
    4a22:	add	r1, sp, #4
    4a24:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    4a28:	b.n	4450 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    4a2a:	ldr	r3, [r4, #12]
    4a2c:	b.n	444c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc4>
    4a2e:	ldr	r3, [r4, #12]
    4a30:	b.n	4448 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
    4a32:	ldr	r3, [r4, #12]
    4a34:	b.n	4474 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xec>
    4a36:	ldr	r3, [r4, #12]
    4a38:	b.n	4470 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe8>
    4a3a:	ldr	r3, [r4, #12]
    4a3c:	b.n	446c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe4>
    4a3e:	ldr	r3, [r4, #12]
    4a40:	b.n	4440 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
    4a42:	ldr	r3, [r4, #12]
    4a44:	b.n	443c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb4>
    4a46:	ldr	r3, [r4, #12]
    4a48:	b.n	4544 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1bc>
    4a4a:	ldr	r3, [r4, #12]
    4a4c:	b.n	4540 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b8>
    4a4e:	ldr	r3, [r4, #12]
    4a50:	b.n	4444 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbc>
    4a52:	ldr	r3, [r4, #12]
    4a54:	b.n	4498 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x110>
    4a56:	ldr	r3, [r4, #12]
    4a58:	b.n	4494 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10c>
    4a5a:	ldr	r3, [r4, #12]
    4a5c:	b.n	4490 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x108>
    4a5e:	ldr	r3, [r4, #12]
    4a60:	b.n	4548 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c0>
    4a62:	ldr	r3, [r4, #12]
    4a64:	b.n	47aa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x422>
    4a66:	ldr	r3, [r4, #12]
    4a68:	b.n	47a6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x41e>
    4a6a:	ldr	r3, [r4, #12]
    4a6c:	b.n	47a2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x41a>
    4a6e:	nop

00004a70 <MTPD::receive_buffer()>:
      data_buffer_ = usb_malloc();
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::receive_buffer() {
    4a70:	push	{r4, lr}
    4a72:	mov	r4, r0
    4a74:	ldr	r3, [r4, #4]
    while (!data_buffer_) {
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
    4a76:	movs	r0, #5
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::receive_buffer() {
    while (!data_buffer_) {
    4a78:	cbnz	r3, 4a82 <MTPD::receive_buffer()+0x12>
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
    4a7a:	bl	b8dc <usb_rx>
    4a7e:	str	r0, [r4, #4]
      if (!data_buffer_) mtp_yield();
    4a80:	cbz	r0, 4a84 <MTPD::receive_buffer()+0x14>
    4a82:	pop	{r4, pc}
    4a84:	bl	1648 <mtp_yield()>
    4a88:	b.n	4a74 <MTPD::receive_buffer()+0x4>
    4a8a:	nop

00004a8c <MTPD::GetObject(unsigned long)>:
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    4a8c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4a90:	mov	r6, r0
    uint32_t size = storage_->GetSize(object_id);
    4a92:	ldr	r0, [r0, #0]
    4a94:	ldr	r3, [r0, #0]
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    4a96:	sub	sp, #8
    uint32_t size = storage_->GetSize(object_id);
    4a98:	ldr	r3, [r3, #40]	; 0x28
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    4a9a:	mov	r8, r1
    uint32_t size = storage_->GetSize(object_id);
    4a9c:	blx	r3
    if (write_get_length_) {
    4a9e:	ldrb	r5, [r6, #8]
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    uint32_t size = storage_->GetSize(object_id);
    4aa0:	mov	r7, r0
    if (write_get_length_) {
    4aa2:	cbnz	r5, 4afc <MTPD::GetObject(unsigned long)+0x70>
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    4aa4:	cbz	r0, 4af6 <MTPD::GetObject(unsigned long)+0x6a>
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
        data_buffer_->len += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    4aa6:	mov	r9, r5
    4aa8:	b.n	4aae <MTPD::GetObject(unsigned long)+0x22>
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    4aaa:	cmp	r7, r5
    4aac:	bls.n	4af6 <MTPD::GetObject(unsigned long)+0x6a>
        get_buffer();
    4aae:	mov	r0, r6
    4ab0:	bl	3918 <MTPD::get_buffer()>
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
    4ab4:	ldmia.w	r6, {r0, r3}
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
        get_buffer();
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
    4ab8:	ldrh.w	r2, [r3], #8
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
    4abc:	ldr	r1, [r0, #0]
    4abe:	subs	r4, r7, r5
    4ac0:	rsb	lr, r2, #64	; 0x40
    4ac4:	cmp	r4, lr
    4ac6:	it	cs
    4ac8:	movcs	r4, lr
    4aca:	str	r4, [sp, #0]
    4acc:	add	r3, r2
    4ace:	ldr.w	sl, [r1, #48]	; 0x30
    4ad2:	mov	r2, r5
    4ad4:	mov	r1, r8
    4ad6:	blx	sl
        pos += to_copy;
        data_buffer_->len += to_copy;
    4ad8:	ldr	r1, [r6, #4]
    4ada:	ldrh	r3, [r1, #0]
    4adc:	add	r3, r4
    4ade:	uxth	r3, r3
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    4ae0:	cmp	r3, #64	; 0x40
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
    4ae2:	add	r5, r4
        data_buffer_->len += to_copy;
    4ae4:	strh	r3, [r1, #0]
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    4ae6:	bne.n	4aaa <MTPD::GetObject(unsigned long)+0x1e>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
    4ae8:	movs	r0, #4
    4aea:	bl	ba4c <usb_tx>
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    4aee:	cmp	r7, r5
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
        data_buffer_->len += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    4af0:	str.w	r9, [r6, #4]
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    4af4:	bhi.n	4aae <MTPD::GetObject(unsigned long)+0x22>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
        }
      }
    }
  }
    4af6:	add	sp, #8
    4af8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    4afc:	ldr	r3, [r6, #12]
    4afe:	add	r7, r3
    4b00:	str	r7, [r6, #12]
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
        }
      }
    }
  }
    4b02:	add	sp, #8
    4b04:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00004b08 <MTPD::read(char*, unsigned long)>:
                CONTAINER->params[0], CONTAINER->params[1], CONTAINER->params[2]);  }


  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    4b08:	cbz	r2, 4b74 <MTPD::read(char*, unsigned long)+0x6c>
                CONTAINER->op, CONTAINER->len, CONTAINER->type, CONTAINER->transaction_id, \
                CONTAINER->params[0], CONTAINER->params[1], CONTAINER->params[2]);  }


  void MTPD::read(char* data, uint32_t size) 
  {
    4b0a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b0e:	mov	r6, r0
    4b10:	mov	r5, r1
    while (size) {
    4b12:	mov	r8, r2
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
      if (data_buffer_->index == data_buffer_->len) {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
    4b14:	movs	r7, #0


  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
      receive_buffer();
    4b16:	mov	r0, r6
    4b18:	bl	4a70 <MTPD::receive_buffer()>
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    4b1c:	ldr	r3, [r6, #4]
    4b1e:	ldrh.w	lr, [r3, #2]
    4b22:	ldrh.w	ip, [r3]
    4b26:	rsb	r4, lr, ip
    4b2a:	cmp	r4, r8
    4b2c:	it	cs
    4b2e:	movcs	r4, r8
      to_copy = min(to_copy, size);
      if (data) {
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
    4b30:	add.w	r1, r3, #8
    4b34:	add	r1, lr
    4b36:	mov	r0, r5
    4b38:	mov	r2, r4
        data += to_copy;
      }
      size -= to_copy;
    4b3a:	rsb	r8, r4, r8
  {
    while (size) {
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, size);
      if (data) {
    4b3e:	cbz	r5, 4b50 <MTPD::read(char*, unsigned long)+0x48>
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
    4b40:	bl	b0e0 <memcpy>
    4b44:	ldr	r3, [r6, #4]
    4b46:	ldrh.w	lr, [r3, #2]
    4b4a:	ldrh.w	ip, [r3]
        data += to_copy;
    4b4e:	add	r5, r4
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
    4b50:	add	r4, lr
    4b52:	uxth	r4, r4
      if (data_buffer_->index == data_buffer_->len) {
    4b54:	cmp	ip, r4
      if (data) {
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
        data += to_copy;
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
    4b56:	strh	r4, [r3, #2]
      if (data_buffer_->index == data_buffer_->len) {
    4b58:	beq.n	4b64 <MTPD::read(char*, unsigned long)+0x5c>
                CONTAINER->params[0], CONTAINER->params[1], CONTAINER->params[2]);  }


  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    4b5a:	cmp.w	r8, #0
    4b5e:	bne.n	4b16 <MTPD::read(char*, unsigned long)+0xe>
    4b60:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        data += to_copy;
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
      if (data_buffer_->index == data_buffer_->len) {
        usb_free(data_buffer_);
    4b64:	mov	r0, r3
    4b66:	bl	b890 <usb_free>
        data_buffer_ = NULL;
    4b6a:	str	r7, [r6, #4]
                CONTAINER->params[0], CONTAINER->params[1], CONTAINER->params[2]);  }


  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    4b6c:	cmp.w	r8, #0
    4b70:	bne.n	4b16 <MTPD::read(char*, unsigned long)+0xe>
    4b72:	b.n	4b60 <MTPD::read(char*, unsigned long)+0x58>
    4b74:	bx	lr
    4b76:	nop

00004b78 <MTPD::readstring(char*)>:

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    4b78:	push	{r4, r5, r6, lr}
    4b7a:	sub	sp, #8
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    4b7c:	movs	r2, #1
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    4b7e:	mov	r4, r1
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    4b80:	add.w	r1, sp, #6
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    4b84:	mov	r6, r0
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    4b86:	bl	4b08 <MTPD::read(char*, unsigned long)>
    4b8a:	ldrb.w	r2, [sp, #6]
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
    4b8e:	cbz	r4, 4bb0 <MTPD::readstring(char*)+0x38>
    4b90:	adds	r5, r4, r2
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    4b92:	cbz	r2, 4bac <MTPD::readstring(char*)+0x34>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    4b94:	movs	r2, #2
    4b96:	add.w	r1, sp, #6
    4b9a:	mov	r0, r6
    4b9c:	bl	4b08 <MTPD::read(char*, unsigned long)>
    4ba0:	ldrh.w	r3, [sp, #6]
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
        int16_t c2;
        *(buffer++) = c2 = read16();
    4ba4:	strb.w	r3, [r4], #1
  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    4ba8:	cmp	r5, r4
    4baa:	bne.n	4b94 <MTPD::readstring(char*)+0x1c>
        int16_t c2;
        *(buffer++) = c2 = read16();
      }
    }
  }
    4bac:	add	sp, #8
    4bae:	pop	{r4, r5, r6, pc}
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    4bb0:	lsls	r2, r2, #1
    4bb2:	mov	r1, r4
    4bb4:	mov	r0, r6
    4bb6:	bl	4b08 <MTPD::read(char*, unsigned long)>
    4bba:	b.n	4bac <MTPD::readstring(char*)+0x34>

00004bbc <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.8]>:
      }
    }
    storage_->close();
  }
  
    uint32_t MTPD::setObjectPropValue(uint32_t p1, uint32_t p2)
    4bbc:	push	{r4, r5, lr}
    4bbe:	sub	sp, #132	; 0x84
    4bc0:	mov	r4, r0
    4bc2:	mov	r5, r1
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    4bc4:	movs	r2, #12
    4bc6:	mov	r1, sp
    4bc8:	bl	4b08 <MTPD::read(char*, unsigned long)>
      receive_buffer();
      if(p2==0xDC07)
      {
        char filename[128];
        ReadMTPHeader();
        readstring(filename);
    4bcc:	mov	r1, sp
    4bce:	mov	r0, r4
    4bd0:	bl	4b78 <MTPD::readstring(char*)>

        storage_->rename(p1,filename);
    4bd4:	ldr	r0, [r4, #0]
    4bd6:	ldr	r3, [r0, #0]
    4bd8:	mov	r2, sp
    4bda:	mov	r1, r5
    4bdc:	ldr	r3, [r3, #72]	; 0x48
    4bde:	blx	r3

        return 0x2001;
      }
      else
        return 0x2005;
    }
    4be0:	movw	r0, #8193	; 0x2001
    4be4:	add	sp, #132	; 0x84
    4be6:	pop	{r4, r5, pc}

00004be8 <MTPD::SendObjectInfo(unsigned long, unsigned long)>:
        data_buffer_ = NULL;
      }
    }
  }

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    4be8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4bec:	sub	sp, #276	; 0x114
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    4bee:	add	r7, sp, #16
    4bf0:	mov	r1, r7
        data_buffer_ = NULL;
      }
    }
  }

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    4bf2:	mov	sl, r2
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    4bf4:	movs	r2, #12
        data_buffer_ = NULL;
      }
    }
  }

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    4bf6:	mov	r5, r0
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    4bf8:	bl	4b08 <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    4bfc:	ldrh	r3, [r7, #4]
    4bfe:	cmp	r3, #2
    4c00:	it	eq
    4c02:	ldreq	r4, [r7, #0]
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    4c04:	mov.w	r2, #4
    4c08:	mov	r1, r7
    4c0a:	mov	r0, r5
    4c0c:	ite	eq
    4c0e:	subeq	r4, #65	; 0x41
  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
    4c10:	mvnne.w	r4, #52	; 0x34
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    4c14:	bl	4b08 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    4c18:	movs	r2, #2
    4c1a:	mov	r1, r7
    4c1c:	mov	r0, r5
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    4c1e:	ldr.w	r9, [r7]
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    4c22:	bl	4b08 <MTPD::read(char*, unsigned long)>
    4c26:	ldrh.w	r8, [r7]
  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    uint32_t len = ReadMTPHeader();
    char filename[256];

    uint32_t store = read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    4c2a:	movw	r3, #12289	; 0x3001
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    4c2e:	movs	r2, #2
    4c30:	mov	r1, r7
    4c32:	mov	r0, r5
  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    uint32_t len = ReadMTPHeader();
    char filename[256];

    uint32_t store = read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    4c34:	rsb	r8, r3, r8
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    4c38:	bl	4b08 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    4c3c:	movs	r2, #4
    4c3e:	mov	r1, r7
    4c40:	mov	r0, r5
    4c42:	bl	4b08 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    4c46:	movs	r2, #2
    4c48:	mov	r1, r7
    4c4a:	mov	r0, r5
    4c4c:	bl	4b08 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    4c50:	movs	r2, #4
    4c52:	mov	r1, r7
    4c54:	mov	r0, r5
    4c56:	bl	4b08 <MTPD::read(char*, unsigned long)>
    4c5a:	movs	r2, #4
    4c5c:	mov	r1, r7
    4c5e:	mov	r0, r5
    4c60:	bl	4b08 <MTPD::read(char*, unsigned long)>
    4c64:	movs	r2, #4
    4c66:	mov	r1, r7
    4c68:	mov	r0, r5
    4c6a:	bl	4b08 <MTPD::read(char*, unsigned long)>
    4c6e:	movs	r2, #4
    4c70:	mov	r1, r7
    4c72:	mov	r0, r5
    4c74:	bl	4b08 <MTPD::read(char*, unsigned long)>
    4c78:	movs	r2, #4
    4c7a:	mov	r1, r7
    4c7c:	mov	r0, r5
    4c7e:	bl	4b08 <MTPD::read(char*, unsigned long)>
    4c82:	movs	r2, #4
    4c84:	mov	r1, r7
    4c86:	mov	r0, r5
    4c88:	bl	4b08 <MTPD::read(char*, unsigned long)>
    4c8c:	movs	r2, #4
    4c8e:	mov	r1, r7
    4c90:	mov	r0, r5
    4c92:	bl	4b08 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    4c96:	movs	r2, #2
    4c98:	mov	r1, r7
    4c9a:	mov	r0, r5
    4c9c:	bl	4b08 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    4ca0:	movs	r2, #4
    4ca2:	mov	r1, r7
    4ca4:	mov	r0, r5
    4ca6:	bl	4b08 <MTPD::read(char*, unsigned long)>
    4caa:	movs	r2, #4
    4cac:	mov	r1, r7
    4cae:	mov	r0, r5
    4cb0:	bl	4b08 <MTPD::read(char*, unsigned long)>
    read32(); len-=4; // parent
    read16(); len-=2; // association type
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    4cb4:	mov	r1, r7
    4cb6:	mov	r0, r5
    4cb8:	bl	4b78 <MTPD::readstring(char*)>
    4cbc:	mov	r0, r7
    4cbe:	bl	e580 <strlen>
    4cc2:	adds	r0, #1
    4cc4:	sub.w	r4, r4, r0, lsl #1
  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    uint32_t len = ReadMTPHeader();
    char filename[256];

    uint32_t store = read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    4cc8:	clz	r8, r8
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    4ccc:	cmp	r4, #3
  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    uint32_t len = ReadMTPHeader();
    char filename[256];

    uint32_t store = read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    4cce:	mov.w	r8, r8, lsr #5
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    4cd2:	bls.n	4cee <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x106>
    4cd4:	mov	r6, r4
    4cd6:	add.w	fp, sp, #12
    4cda:	subs	r6, #4
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    4cdc:	movs	r2, #4
    4cde:	mov	r1, fp
    4ce0:	mov	r0, r5
    4ce2:	bl	4b08 <MTPD::read(char*, unsigned long)>
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    4ce6:	cmp	r6, #3
    4ce8:	bhi.n	4cda <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xf2>
    4cea:	and.w	r4, r4, #3
    4cee:	add.w	fp, sp, #12
    while(len) {read8(); len--;}
    4cf2:	cbz	r4, 4d02 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x11a>
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    4cf4:	movs	r2, #1
    4cf6:	mov	r1, fp
    4cf8:	mov	r0, r5
    4cfa:	bl	4b08 <MTPD::read(char*, unsigned long)>
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    while(len) {read8(); len--;}
    4cfe:	subs	r4, #1
    4d00:	bne.n	4cf4 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x10c>
    
    return storage_->Create(store, parent, dir, filename);
    4d02:	ldr	r0, [r5, #0]
    4d04:	ldr	r4, [r0, #0]
    4d06:	str	r7, [sp, #0]
    4d08:	mov	r3, r8
    4d0a:	mov	r2, sl
    4d0c:	mov	r1, r9
    4d0e:	ldr	r4, [r4, #44]	; 0x2c
    4d10:	blx	r4
  }
    4d12:	add	sp, #276	; 0x114
    4d14:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00004d18 <MTPD::SendObject()>:

  void MTPD::SendObject() {
    4d18:	push	{r4, r5, r6, r7, lr}
    4d1a:	sub	sp, #20
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    4d1c:	movs	r2, #12
    4d1e:	add	r1, sp, #4
    while(len) {read8(); len--;}
    
    return storage_->Create(store, parent, dir, filename);
  }

  void MTPD::SendObject() {
    4d20:	mov	r7, r0
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    4d22:	bl	4b08 <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    4d26:	ldrh.w	r3, [sp, #8]
    4d2a:	cmp	r3, #2
    4d2c:	beq.n	4d3a <MTPD::SendObject()+0x22>
      {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
      }
    }
    storage_->close();
    4d2e:	ldr	r0, [r7, #0]
    4d30:	ldr	r3, [r0, #0]
    4d32:	ldr	r3, [r3, #56]	; 0x38
    4d34:	blx	r3
  }
    4d36:	add	sp, #20
    4d38:	pop	{r4, r5, r6, r7, pc}
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
      return header.len - 12;
    4d3a:	ldr	r5, [sp, #4]
    return storage_->Create(store, parent, dir, filename);
  }

  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    4d3c:	subs	r5, #12
    4d3e:	beq.n	4d2e <MTPD::SendObject()+0x16>
      data_buffer_->index += to_copy;
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
      {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
    4d40:	movs	r6, #0

  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
    4d42:	mov	r0, r7
    4d44:	bl	4a70 <MTPD::receive_buffer()>
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
    4d48:	ldmia.w	r7, {r0, r1}
  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    4d4c:	ldrh	r2, [r1, #2]
    4d4e:	ldrh.w	r4, [r1], #8
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
    4d52:	ldr	r3, [r0, #0]
  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    4d54:	subs	r4, r4, r2
    4d56:	cmp	r4, r5
    4d58:	it	cs
    4d5a:	movcs	r4, r5
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
    4d5c:	ldr	r3, [r3, #52]	; 0x34
    4d5e:	add	r1, r2
    4d60:	mov	r2, r4
    4d62:	blx	r3
      data_buffer_->index += to_copy;
    4d64:	ldr	r0, [r7, #4]
    4d66:	ldrh	r3, [r0, #2]
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    4d68:	ldrh	r2, [r0, #0]
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
      data_buffer_->index += to_copy;
    4d6a:	add	r3, r4
    4d6c:	uxth	r3, r3
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    4d6e:	cmp	r2, r3
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
      data_buffer_->index += to_copy;
      len -= to_copy;
    4d70:	sub.w	r5, r5, r4
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
      data_buffer_->index += to_copy;
    4d74:	strh	r3, [r0, #2]
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    4d76:	beq.n	4d7e <MTPD::SendObject()+0x66>
    return storage_->Create(store, parent, dir, filename);
  }

  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    4d78:	cmp	r5, #0
    4d7a:	bne.n	4d42 <MTPD::SendObject()+0x2a>
    4d7c:	b.n	4d2e <MTPD::SendObject()+0x16>
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
      data_buffer_->index += to_copy;
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
      {
        usb_free(data_buffer_);
    4d7e:	bl	b890 <usb_free>
        data_buffer_ = NULL;
    4d82:	str	r6, [r7, #4]
    return storage_->Create(store, parent, dir, filename);
  }

  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    4d84:	cmp	r5, #0
    4d86:	bne.n	4d42 <MTPD::SendObject()+0x2a>
    4d88:	b.n	4d2e <MTPD::SendObject()+0x16>
    4d8a:	nop

00004d8c <MTPD::loop()>:
      else
        return 0x2005;
    }

  void MTPD::loop(void) 
  {
    4d8c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4d90:	mov	r5, r0
    4d92:	sub	sp, #20
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
    4d94:	movs	r0, #5
    4d96:	bl	b8dc <usb_rx>
    4d9a:	cbz	r0, 4dc4 <MTPD::loop()+0x38>
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
      if (receive_buffer->len >= 12) {
    4d9c:	ldrh	r3, [r0, #0]
    4d9e:	cmp	r3, #11
    4da0:	mov	r4, r0
    4da2:	bls.n	4dd6 <MTPD::loop()+0x4a>
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
    4da4:	ldrh	r3, [r0, #12]
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
    4da6:	movs	r7, #12
        
        if (CONTAINER->type == 1) { // command
    4da8:	cmp	r3, #1
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
    4daa:	strh	r7, [r0, #0]
        
        if (CONTAINER->type == 1) { // command
    4dac:	beq.n	4dde <MTPD::loop()+0x52>
    4dae:	mov.w	r0, #8192	; 0x2000
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    4db2:	movs	r6, #0
        } else {
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
        CONTAINER->type = 3;
    4db4:	movs	r3, #3
        CONTAINER->op = return_code;
    4db6:	strh	r0, [r4, #14]
        CONTAINER->params[0] = p1;
    4db8:	str	r6, [r4, #20]
        } else {
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
        CONTAINER->type = 3;
    4dba:	strh	r3, [r4, #12]
        CONTAINER->op = return_code;
        CONTAINER->params[0] = p1;
        printContainer();

        usb_tx(MTP_TX_ENDPOINT, receive_buffer);
    4dbc:	mov	r1, r4
    4dbe:	movs	r0, #4
    4dc0:	bl	ba4c <usb_tx>
      } else {
          usb_free(receive_buffer);
      }
    }
    // Maybe put event handling inside mtp_yield()?
    if ((receive_buffer = usb_rx(MTP_EVENT_ENDPOINT))) {
    4dc4:	movs	r0, #6
    4dc6:	bl	b8dc <usb_rx>
    4dca:	cbz	r0, 4dd0 <MTPD::loop()+0x44>
      usb_free(receive_buffer);
    4dcc:	bl	b890 <usb_free>
    }
  }
    4dd0:	add	sp, #20
    4dd2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        printContainer();

        usb_tx(MTP_TX_ENDPOINT, receive_buffer);
        receive_buffer = 0;
      } else {
          usb_free(receive_buffer);
    4dd6:	mov	r0, r4
    4dd8:	bl	b890 <usb_free>
    4ddc:	b.n	4dc4 <MTPD::loop()+0x38>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    4dde:	ldrh	r2, [r0, #14]
    4de0:	movw	r1, #4107	; 0x100b
    4de4:	cmp	r2, r1
    4de6:	beq.w	5270 <MTPD::loop()+0x4e4>
    4dea:	bhi.n	4e6a <MTPD::loop()+0xde>
    4dec:	movw	r1, #4101	; 0x1005
    4df0:	cmp	r2, r1
    4df2:	beq.w	5230 <MTPD::loop()+0x4a4>
    4df6:	bhi.w	4f28 <MTPD::loop()+0x19c>
    4dfa:	movw	r3, #4098	; 0x1002
    4dfe:	cmp	r2, r3
    4e00:	beq.w	5026 <MTPD::loop()+0x29a>
    4e04:	bls.w	4f8c <MTPD::loop()+0x200>
    4e08:	movw	r3, #4099	; 0x1003
    4e0c:	cmp	r2, r3
    4e0e:	beq.w	5228 <MTPD::loop()+0x49c>
    4e12:	movw	r3, #4100	; 0x1004
    4e16:	cmp	r2, r3
    4e18:	bne.w	4f84 <MTPD::loop()+0x1f8>
              openSession();
              break;
            case 0x1003:  // CloseSession
              break;
            case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    4e1c:	movs	r3, #1
    4e1e:	movs	r7, #0
    4e20:	strb	r3, [r5, #8]
    4e22:	mov	r0, r5
    4e24:	str	r7, [r5, #12]
    4e26:	bl	3d0c <MTPD::WriteStorageIDs()>
    4e2a:	ldr	r3, [r5, #12]
    4e2c:	strb	r7, [r5, #8]
    4e2e:	adds	r3, #12
    4e30:	movs	r2, #2
    4e32:	strh.w	r2, [sp, #8]
    4e36:	str	r3, [sp, #4]
    4e38:	ldrh	r3, [r4, #14]
    4e3a:	strh.w	r3, [sp, #10]
    4e3e:	ldr	r3, [r4, #16]
    4e40:	str	r3, [sp, #12]
    4e42:	mov	r0, r5
    4e44:	movs	r2, #12
    4e46:	add	r1, sp, #4
    4e48:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    4e4c:	mov	r0, r5
    4e4e:	bl	3d0c <MTPD::WriteStorageIDs()>
              break;
            case 0x1008:  // GetObjectInfo
              TRANSMIT(GetObjectInfo(CONTAINER->params[0]));
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(CONTAINER->params[0]));
    4e52:	mov	r0, r5
    4e54:	bl	3918 <MTPD::get_buffer()>
    4e58:	movs	r0, #4
    4e5a:	ldr	r1, [r5, #4]
    4e5c:	bl	ba4c <usb_tx>
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    4e60:	mov	r6, r7
              break;
            case 0x1008:  // GetObjectInfo
              TRANSMIT(GetObjectInfo(CONTAINER->params[0]));
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(CONTAINER->params[0]));
    4e62:	str	r7, [r5, #4]
              break;
    4e64:	movw	r0, #8193	; 0x2001
    4e68:	b.n	4db4 <MTPD::loop()+0x28>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    4e6a:	movw	r1, #4121	; 0x1019
    4e6e:	cmp	r2, r1
    4e70:	beq.w	5202 <MTPD::loop()+0x476>
    4e74:	bhi.n	4ef0 <MTPD::loop()+0x164>
    4e76:	movw	r3, #4109	; 0x100d
    4e7a:	cmp	r2, r3
    4e7c:	beq.w	51f4 <MTPD::loop()+0x468>
    4e80:	bcc.w	51d4 <MTPD::loop()+0x448>
    4e84:	movw	r3, #4116	; 0x1014
    4e88:	cmp	r2, r3
    4e8a:	beq.w	50dc <MTPD::loop()+0x350>
    4e8e:	movw	r3, #4117	; 0x1015
    4e92:	cmp	r2, r3
    4e94:	bne.n	4f84 <MTPD::loop()+0x1f8>
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(CONTAINER->params[0]));
    4e96:	movs	r2, #0
    4e98:	movs	r3, #1
    4e9a:	strb	r3, [r5, #8]
    4e9c:	str	r2, [r5, #12]
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    4e9e:	ldr	r2, [r0, #20]
    4ea0:	movw	r3, #54274	; 0xd402
    4ea4:	cmp	r2, r3
    4ea6:	beq.w	52bc <MTPD::loop()+0x530>
    4eaa:	movs	r3, #12
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(CONTAINER->params[0]));
    4eac:	movs	r1, #0
    4eae:	movs	r2, #2
    4eb0:	strb	r1, [r5, #8]
    4eb2:	strh.w	r2, [sp, #8]
    4eb6:	str	r3, [sp, #4]
    4eb8:	ldrh	r3, [r4, #14]
    4eba:	strh.w	r3, [sp, #10]
    4ebe:	ldr	r3, [r4, #16]
    4ec0:	str	r3, [sp, #12]
    4ec2:	movs	r2, #12
    4ec4:	add	r1, sp, #4
    4ec6:	mov	r0, r5
    4ec8:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    4ecc:	ldr	r2, [r4, #20]
    4ece:	movw	r3, #54274	; 0xd402
    4ed2:	cmp	r2, r3
    4ed4:	beq.w	52b2 <MTPD::loop()+0x526>
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(CONTAINER->params[0]));
    4ed8:	mov	r0, r5
    4eda:	bl	3918 <MTPD::get_buffer()>
    4ede:	movs	r6, #0
    4ee0:	movs	r0, #4
    4ee2:	ldr	r1, [r5, #4]
    4ee4:	bl	ba4c <usb_tx>
    4ee8:	str	r6, [r5, #4]
              break;
    4eea:	movw	r0, #8193	; 0x2001
    4eee:	b.n	4db4 <MTPD::loop()+0x28>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    4ef0:	movw	r1, #38914	; 0x9802
    4ef4:	cmp	r2, r1
    4ef6:	beq.w	5036 <MTPD::loop()+0x2aa>
    4efa:	bls.n	4fcc <MTPD::loop()+0x240>
    4efc:	movw	r3, #38915	; 0x9803
    4f00:	cmp	r2, r3
    4f02:	beq.w	5096 <MTPD::loop()+0x30a>
    4f06:	movw	r3, #38916	; 0x9804
    4f0a:	cmp	r2, r3
    4f0c:	bne.n	4f84 <MTPD::loop()+0x1f8>
              break;

          case 0x9804:  // setObjectPropertyValue

            p1=CONTAINER->params[0];
            p2=CONTAINER->params[1];
    4f0e:	ldr	r7, [r0, #24]
            TRANSMIT(getObjectPropValue(p1,p2));
              break;

          case 0x9804:  // setObjectPropertyValue

            p1=CONTAINER->params[0];
    4f10:	ldr	r6, [r0, #20]
    storage_->close();
  }
  
    uint32_t MTPD::setObjectPropValue(uint32_t p1, uint32_t p2)
    {
      receive_buffer();
    4f12:	mov	r0, r5
    4f14:	bl	4a70 <MTPD::receive_buffer()>
      if(p2==0xDC07)
    4f18:	movw	r3, #56327	; 0xdc07
    4f1c:	cmp	r7, r3
    4f1e:	beq.w	52ca <MTPD::loop()+0x53e>
    4f22:	movw	r0, #8197	; 0x2005
    4f26:	b.n	4db4 <MTPD::loop()+0x28>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    4f28:	movw	r1, #4103	; 0x1007
    4f2c:	cmp	r2, r1
    4f2e:	beq.w	5172 <MTPD::loop()+0x3e6>
    4f32:	bcc.w	5162 <MTPD::loop()+0x3d6>
    4f36:	movw	r3, #4104	; 0x1008
    4f3a:	cmp	r2, r3
    4f3c:	beq.w	5126 <MTPD::loop()+0x39a>
    4f40:	movw	r3, #4105	; 0x1009
    4f44:	cmp	r2, r3
    4f46:	bne.n	4f84 <MTPD::loop()+0x1f8>
              break;
            case 0x1008:  // GetObjectInfo
              TRANSMIT(GetObjectInfo(CONTAINER->params[0]));
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(CONTAINER->params[0]));
    4f48:	movs	r7, #0
    4f4a:	movs	r3, #1
    4f4c:	strb	r3, [r5, #8]
    4f4e:	str	r7, [r5, #12]
    4f50:	ldr	r1, [r0, #20]
    4f52:	mov	r0, r5
    4f54:	bl	4a8c <MTPD::GetObject(unsigned long)>
    4f58:	ldr	r3, [r5, #12]
    4f5a:	strb	r7, [r5, #8]
    4f5c:	adds	r3, #12
    4f5e:	movs	r2, #2
    4f60:	strh.w	r2, [sp, #8]
    4f64:	str	r3, [sp, #4]
    4f66:	ldrh	r3, [r4, #14]
    4f68:	strh.w	r3, [sp, #10]
    4f6c:	ldr	r3, [r4, #16]
    4f6e:	str	r3, [sp, #12]
    4f70:	add	r1, sp, #4
    4f72:	mov	r0, r5
    4f74:	movs	r2, #12
    4f76:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    4f7a:	ldr	r1, [r4, #20]
    4f7c:	mov	r0, r5
    4f7e:	bl	4a8c <MTPD::GetObject(unsigned long)>
    4f82:	b.n	4e52 <MTPD::loop()+0xc6>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    4f84:	movw	r0, #8197	; 0x2005
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    4f88:	movs	r6, #0
    4f8a:	b.n	4db4 <MTPD::loop()+0x28>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    4f8c:	movw	r3, #4097	; 0x1001
    4f90:	cmp	r2, r3
    4f92:	bne.n	4f84 <MTPD::loop()+0x1f8>
            case 0x1001: // GetDescription
              TRANSMIT(WriteDescriptor());
    4f94:	movs	r7, #0
    4f96:	movs	r3, #1
    4f98:	strb	r3, [r5, #8]
    4f9a:	mov	r0, r5
    4f9c:	str	r7, [r5, #12]
    4f9e:	bl	3af8 <MTPD::WriteDescriptor()>
    4fa2:	ldr	r3, [r5, #12]
    4fa4:	strb	r7, [r5, #8]
    4fa6:	adds	r3, #12
    4fa8:	movs	r2, #2
    4faa:	strh.w	r2, [sp, #8]
    4fae:	str	r3, [sp, #4]
    4fb0:	ldrh	r3, [r4, #14]
    4fb2:	strh.w	r3, [sp, #10]
    4fb6:	ldr	r3, [r4, #16]
    4fb8:	str	r3, [sp, #12]
    4fba:	mov	r0, r5
    4fbc:	movs	r2, #12
    4fbe:	add	r1, sp, #4
    4fc0:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    4fc4:	mov	r0, r5
    4fc6:	bl	3af8 <MTPD::WriteDescriptor()>
    4fca:	b.n	4e52 <MTPD::loop()+0xc6>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    4fcc:	movw	r3, #38913	; 0x9801
    4fd0:	cmp	r2, r3
    4fd2:	bne.n	4f84 <MTPD::loop()+0x1f8>
          case 0x101A:  // CopyObject
              return_code = 0x2005;
              break;

          case 0x9801:  // getObjectPropsSupported
            p1=CONTAINER->params[0];
    4fd4:	ldr	r6, [r0, #20]

              TRANSMIT(getObjectPropsSupported(p1));
    4fd6:	movs	r3, #1
    4fd8:	movs	r7, #0
    4fda:	mov	r1, r6
    4fdc:	strb	r3, [r5, #8]
    4fde:	mov	r0, r5
    4fe0:	str	r7, [r5, #12]
    4fe2:	bl	4030 <MTPD::getObjectPropsSupported(unsigned long)>
    4fe6:	ldr	r3, [r5, #12]
    4fe8:	strb	r7, [r5, #8]
    4fea:	adds	r3, #12
    4fec:	movs	r2, #2
    4fee:	strh.w	r2, [sp, #8]
    4ff2:	str	r3, [sp, #4]
    4ff4:	ldrh	r3, [r4, #14]
    4ff6:	strh.w	r3, [sp, #10]
    4ffa:	ldr	r3, [r4, #16]
    4ffc:	str	r3, [sp, #12]
    4ffe:	add	r1, sp, #4
    5000:	mov	r0, r5
    5002:	movs	r2, #12
    5004:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    5008:	mov	r1, r6
    500a:	mov	r0, r5
    500c:	bl	4030 <MTPD::getObjectPropsSupported(unsigned long)>

          case 0x9803:  // getObjectPropertyValue
            p1=CONTAINER->params[0];
            p2=CONTAINER->params[1];

            TRANSMIT(getObjectPropValue(p1,p2));
    5010:	mov	r0, r5
    5012:	bl	3918 <MTPD::get_buffer()>
    5016:	movs	r0, #4
    5018:	ldr	r1, [r5, #4]
    501a:	bl	ba4c <usb_tx>
    501e:	str	r7, [r5, #4]
              break;
    5020:	movw	r0, #8193	; 0x2001
    5024:	b.n	4db4 <MTPD::loop()+0x28>
      if(storage_->move(p1,p2,p3)) return 0x2001; else return  0x2005;
    }
    
    void MTPD::openSession(void)
    {
      storage_->ResetIndex();
    5026:	ldr	r0, [r5, #0]
    5028:	ldr	r3, [r0, #0]
    502a:	ldr	r3, [r3, #68]	; 0x44
    502c:	blx	r3
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    502e:	movs	r6, #0
      if(storage_->move(p1,p2,p3)) return 0x2001; else return  0x2005;
    }
    
    void MTPD::openSession(void)
    {
      storage_->ResetIndex();
    5030:	movw	r0, #8193	; 0x2001
    5034:	b.n	4db4 <MTPD::loop()+0x28>

              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
            p1=CONTAINER->params[0];
    5036:	ldr	r6, [r0, #20]
            p2=CONTAINER->params[1];
    5038:	ldr.w	r9, [r0, #24]

            TRANSMIT(getObjectPropDesc(p1,p2));
    503c:	strb	r3, [r5, #8]
    503e:	mov.w	r8, #0
    5042:	mov	r1, r6
    5044:	mov	r2, r9
    5046:	mov	r0, r5
    5048:	str.w	r8, [r5, #12]
    504c:	bl	4388 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    5050:	ldr	r3, [r5, #12]
    5052:	strb.w	r8, [r5, #8]
    5056:	adds	r3, #12
    5058:	movs	r2, #2
    505a:	strh.w	r2, [sp, #8]
    505e:	str	r3, [sp, #4]
    5060:	ldrh	r3, [r4, #14]
    5062:	strh.w	r3, [sp, #10]
    5066:	ldr	r3, [r4, #16]
    5068:	str	r3, [sp, #12]
    506a:	mov	r2, r7
    506c:	add	r1, sp, #4
    506e:	mov	r0, r5
    5070:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    5074:	mov	r2, r9
    5076:	mov	r1, r6
    5078:	mov	r0, r5
    507a:	bl	4388 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    507e:	mov	r0, r5
    5080:	bl	3918 <MTPD::get_buffer()>
    5084:	movs	r0, #4
    5086:	ldr	r1, [r5, #4]
    5088:	bl	ba4c <usb_tx>
    508c:	str.w	r8, [r5, #4]
              break;
    5090:	movw	r0, #8193	; 0x2001
    5094:	b.n	4db4 <MTPD::loop()+0x28>

          case 0x9803:  // getObjectPropertyValue
            p1=CONTAINER->params[0];
    5096:	ldr	r6, [r0, #20]
            p2=CONTAINER->params[1];
    5098:	ldr.w	r8, [r0, #24]

            TRANSMIT(getObjectPropValue(p1,p2));
    509c:	movs	r7, #0
    509e:	movs	r3, #1
    50a0:	mov	r1, r6
    50a2:	mov	r2, r8
    50a4:	strb	r3, [r5, #8]
    50a6:	mov	r0, r5
    50a8:	str	r7, [r5, #12]
    50aa:	bl	409c <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    50ae:	ldr	r3, [r5, #12]
    50b0:	strb	r7, [r5, #8]
    50b2:	adds	r3, #12
    50b4:	movs	r2, #2
    50b6:	strh.w	r2, [sp, #8]
    50ba:	str	r3, [sp, #4]
    50bc:	ldrh	r3, [r4, #14]
    50be:	strh.w	r3, [sp, #10]
    50c2:	ldr	r3, [r4, #16]
    50c4:	str	r3, [sp, #12]
    50c6:	add	r1, sp, #4
    50c8:	mov	r0, r5
    50ca:	movs	r2, #12
    50cc:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    50d0:	mov	r2, r8
    50d2:	mov	r1, r6
    50d4:	mov	r0, r5
    50d6:	bl	409c <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    50da:	b.n	5010 <MTPD::loop()+0x284>
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
    50dc:	movs	r3, #1
    50de:	movs	r2, #0
    50e0:	strb	r3, [r5, #8]
    50e2:	str	r2, [r5, #12]
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    50e4:	ldr	r1, [r0, #20]
    50e6:	movw	r3, #54274	; 0xd402
    50ea:	cmp	r1, r3
    50ec:	beq.w	52a6 <MTPD::loop()+0x51a>
    50f0:	movs	r3, #12
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
    50f2:	movs	r1, #0
    50f4:	movs	r2, #2
    50f6:	strb	r1, [r5, #8]
    50f8:	strh.w	r2, [sp, #8]
    50fc:	str	r3, [sp, #4]
    50fe:	ldrh	r3, [r4, #14]
    5100:	strh.w	r3, [sp, #10]
    5104:	ldr	r3, [r4, #16]
    5106:	str	r3, [sp, #12]
    5108:	add	r1, sp, #4
    510a:	movs	r2, #12
    510c:	mov	r0, r5
    510e:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    5112:	ldr	r1, [r4, #20]
    5114:	movw	r3, #54274	; 0xd402
    5118:	cmp	r1, r3
    511a:	bne.w	4ed8 <MTPD::loop()+0x14c>
    511e:	mov	r0, r5
    5120:	bl	3a3c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.5]>
    5124:	b.n	4ed8 <MTPD::loop()+0x14c>
              } else {
                TRANSMIT(GetObjectHandles(CONTAINER->params[0], CONTAINER->params[2]));
              }
              break;
            case 0x1008:  // GetObjectInfo
              TRANSMIT(GetObjectInfo(CONTAINER->params[0]));
    5126:	movs	r7, #0
    5128:	movs	r3, #1
    512a:	strb	r3, [r5, #8]
    512c:	str	r7, [r5, #12]
    512e:	ldr	r1, [r0, #20]
    5130:	mov	r0, r5
    5132:	bl	3de0 <MTPD::GetObjectInfo(unsigned long)>
    5136:	ldr	r3, [r5, #12]
    5138:	strb	r7, [r5, #8]
    513a:	adds	r3, #12
    513c:	movs	r2, #2
    513e:	strh.w	r2, [sp, #8]
    5142:	str	r3, [sp, #4]
    5144:	ldrh	r3, [r4, #14]
    5146:	strh.w	r3, [sp, #10]
    514a:	ldr	r3, [r4, #16]
    514c:	str	r3, [sp, #12]
    514e:	add	r1, sp, #4
    5150:	mov	r0, r5
    5152:	movs	r2, #12
    5154:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    5158:	ldr	r1, [r4, #20]
    515a:	mov	r0, r5
    515c:	bl	3de0 <MTPD::GetObjectInfo(unsigned long)>
    5160:	b.n	4e52 <MTPD::loop()+0xc6>
              break;
            case 0x1005:  // GetStorageInfo
              TRANSMIT(GetStorageInfo(CONTAINER->params[0]));
              break;
            case 0x1006:  // GetNumObjects
              if (CONTAINER->params[1]) {
    5162:	ldr	r3, [r0, #24]
    5164:	cmp	r3, #0
    5166:	beq.w	5294 <MTPD::loop()+0x508>
    516a:	movw	r0, #8212	; 0x2014
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    516e:	movs	r6, #0
    5170:	b.n	4db4 <MTPD::loop()+0x28>
              } else {
                p1 = GetNumObjects(CONTAINER->params[0], CONTAINER->params[2]);
              }
              break;
            case 0x1007:  // GetObjectHandles
              if (CONTAINER->params[1]) {
    5172:	ldr.w	r8, [r0, #24]
    5176:	cmp.w	r8, #0
    517a:	bne.n	516a <MTPD::loop()+0x3de>
                return_code = 0x2014; // spec by format unsupported
              } else {
                TRANSMIT(GetObjectHandles(CONTAINER->params[0], CONTAINER->params[2]));
    517c:	strb	r3, [r5, #8]
    517e:	str.w	r8, [r5, #12]
    5182:	ldr	r2, [r0, #28]
    5184:	ldr	r1, [r0, #20]
    5186:	mov	r0, r5
    5188:	bl	3d74 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    518c:	ldr	r3, [r5, #12]
    518e:	strb.w	r8, [r5, #8]
    5192:	adds	r3, #12
    5194:	movs	r2, #2
    5196:	strh.w	r2, [sp, #8]
    519a:	str	r3, [sp, #4]
    519c:	ldrh	r3, [r4, #14]
    519e:	strh.w	r3, [sp, #10]
    51a2:	mov	r2, r7
    51a4:	ldr	r3, [r4, #16]
    51a6:	str	r3, [sp, #12]
    51a8:	add	r1, sp, #4
    51aa:	mov	r0, r5
    51ac:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    51b0:	ldr	r2, [r4, #28]
    51b2:	ldr	r1, [r4, #20]
    51b4:	mov	r0, r5
    51b6:	bl	3d74 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    51ba:	mov	r0, r5
    51bc:	bl	3918 <MTPD::get_buffer()>
    51c0:	movs	r0, #4
    51c2:	ldr	r1, [r5, #4]
    51c4:	bl	ba4c <usb_tx>
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    51c8:	mov	r6, r8
              break;
            case 0x1007:  // GetObjectHandles
              if (CONTAINER->params[1]) {
                return_code = 0x2014; // spec by format unsupported
              } else {
                TRANSMIT(GetObjectHandles(CONTAINER->params[0], CONTAINER->params[2]));
    51ca:	str.w	r8, [r5, #4]
    51ce:	movw	r0, #8193	; 0x2001
    51d2:	b.n	4db4 <MTPD::loop()+0x28>
                }
              }
              break;
            case 0x100C:  // SendObjectInfo
              CONTAINER->params[2] =
                  SendObjectInfo(CONTAINER->params[0], // storage
    51d4:	mov	r0, r5
    51d6:	ldr	r2, [r4, #24]
    51d8:	ldr	r1, [r4, #20]
    51da:	bl	4be8 <MTPD::SendObjectInfo(unsigned long, unsigned long)>
                                 CONTAINER->params[1]); // parent
                  p1 = CONTAINER->params[0];
    51de:	ldr	r6, [r4, #20]
              }
              break;
            case 0x100C:  // SendObjectInfo
              CONTAINER->params[2] =
                  SendObjectInfo(CONTAINER->params[0], // storage
                                 CONTAINER->params[1]); // parent
    51e0:	str	r0, [r4, #28]
                  p1 = CONTAINER->params[0];
              if (!p1) p1 = 1;
              CONTAINER->len = receive_buffer->len = 12 + 3 * 4;
    51e2:	movs	r3, #24
            case 0x100C:  // SendObjectInfo
              CONTAINER->params[2] =
                  SendObjectInfo(CONTAINER->params[0], // storage
                                 CONTAINER->params[1]); // parent
                  p1 = CONTAINER->params[0];
              if (!p1) p1 = 1;
    51e4:	cmp	r6, #0
    51e6:	it	eq
    51e8:	moveq	r6, #1
              CONTAINER->len = receive_buffer->len = 12 + 3 * 4;
    51ea:	strh	r3, [r4, #0]
    51ec:	str	r3, [r4, #8]
              break;
    51ee:	movw	r0, #8193	; 0x2001
    51f2:	b.n	4db4 <MTPD::loop()+0x28>
            case 0x100D:  // SendObject
              SendObject();
    51f4:	mov	r0, r5
    51f6:	bl	4d18 <MTPD::SendObject()>
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    51fa:	movs	r6, #0
              if (!p1) p1 = 1;
              CONTAINER->len = receive_buffer->len = 12 + 3 * 4;
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
    51fc:	movw	r0, #8193	; 0x2001
    5200:	b.n	4db4 <MTPD::loop()+0x28>

    uint32_t MTPD::moveObject(uint32_t p1, uint32_t p2, uint32_t p3)
    { // p1 object
      // p2 new storage
      // p3 new directory
      if(storage_->move(p1,p2,p3)) return 0x2001; else return  0x2005;
    5202:	ldr	r0, [r5, #0]
    5204:	ldr	r3, [r4, #28]
    5206:	ldr	r1, [r0, #0]
    5208:	ldr	r2, [r4, #24]
    520a:	ldr	r5, [r1, #76]	; 0x4c
    520c:	ldr	r1, [r4, #20]
    520e:	blx	r5
    5210:	movw	r3, #8197	; 0x2005
    5214:	movw	r2, #8193	; 0x2001
              return_code = 0x2005;
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(CONTAINER->params[0],CONTAINER->params[1],CONTAINER->params[2]);
              CONTAINER->len  = receive_buffer->len = 12;
    5218:	strh	r7, [r4, #0]
    521a:	str	r7, [r4, #8]

    uint32_t MTPD::moveObject(uint32_t p1, uint32_t p2, uint32_t p3)
    { // p1 object
      // p2 new storage
      // p3 new directory
      if(storage_->move(p1,p2,p3)) return 0x2001; else return  0x2005;
    521c:	cmp	r0, #0
    521e:	ite	eq
    5220:	moveq	r0, r3
    5222:	movne	r0, r2
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    5224:	movs	r6, #0
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(CONTAINER->params[0],CONTAINER->params[1],CONTAINER->params[2]);
              CONTAINER->len  = receive_buffer->len = 12;
              break;
    5226:	b.n	4db4 <MTPD::loop()+0x28>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    5228:	movw	r0, #8193	; 0x2001
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    522c:	movs	r6, #0
    522e:	b.n	4db4 <MTPD::loop()+0x28>
              break;
            case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
              break;
            case 0x1005:  // GetStorageInfo
              TRANSMIT(GetStorageInfo(CONTAINER->params[0]));
    5230:	mov.w	r8, #0
    5234:	strb	r3, [r5, #8]
    5236:	str.w	r8, [r5, #12]
    523a:	ldr	r1, [r0, #20]
    523c:	mov	r0, r5
    523e:	bl	4244 <MTPD::GetStorageInfo(unsigned long)>
    5242:	ldr	r3, [r5, #12]
    5244:	strb.w	r8, [r5, #8]
    5248:	adds	r3, #12
    524a:	movs	r2, #2
    524c:	strh.w	r2, [sp, #8]
    5250:	str	r3, [sp, #4]
    5252:	ldrh	r3, [r4, #14]
    5254:	strh.w	r3, [sp, #10]
    5258:	ldr	r3, [r4, #16]
    525a:	str	r3, [sp, #12]
    525c:	add	r1, sp, #4
    525e:	mov	r0, r5
    5260:	mov	r2, r7
    5262:	bl	3930 <MTPD::write(char const*, int) [clone .part.3]>
    5266:	ldr	r1, [r4, #20]
    5268:	mov	r0, r5
    526a:	bl	4244 <MTPD::GetStorageInfo(unsigned long)>
    526e:	b.n	51ba <MTPD::loop()+0x42e>
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(CONTAINER->params[0]));
              break;
            case 0x100B:  // DeleteObject
              if (CONTAINER->params[1]) {
    5270:	ldr	r6, [r0, #24]
    5272:	cmp	r6, #0
    5274:	bne.w	516a <MTPD::loop()+0x3de>
                return_code = 0x2014; // spec by format unsupported
              } else {
                if (!storage_->DeleteObject(CONTAINER->params[0])) {
    5278:	ldr	r0, [r5, #0]
    527a:	ldr	r1, [r4, #20]
    527c:	ldr	r3, [r0, #0]
    527e:	ldr	r3, [r3, #60]	; 0x3c
    5280:	blx	r3
    5282:	movw	r3, #8210	; 0x2012
    5286:	movw	r2, #8193	; 0x2001
    528a:	cmp	r0, #0
    528c:	ite	eq
    528e:	moveq	r0, r3
    5290:	movne	r0, r2
    5292:	b.n	4db4 <MTPD::loop()+0x28>
              break;
            case 0x1006:  // GetNumObjects
              if (CONTAINER->params[1]) {
                return_code = 0x2014; // spec by format unsupported
              } else {
                p1 = GetNumObjects(CONTAINER->params[0], CONTAINER->params[2]);
    5294:	mov	r0, r5
    5296:	ldr	r2, [r4, #28]
    5298:	ldr	r1, [r4, #20]
    529a:	bl	38f0 <MTPD::GetNumObjects(unsigned long, unsigned long)>
    529e:	mov	r6, r0
    52a0:	movw	r0, #8193	; 0x2001
    52a4:	b.n	4db4 <MTPD::loop()+0x28>
    52a6:	mov	r0, r5
    52a8:	bl	3a3c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.5]>
    52ac:	ldr	r3, [r5, #12]
    52ae:	adds	r3, #12
    52b0:	b.n	50f2 <MTPD::loop()+0x366>
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    52b2:	ldr	r1, [pc, #40]	; (52dc <MTPD::loop()+0x550>)
    52b4:	mov	r0, r5
    52b6:	bl	3994 <MTPD::writestring(char const*)>
    52ba:	b.n	4ed8 <MTPD::loop()+0x14c>
    52bc:	ldr	r1, [pc, #28]	; (52dc <MTPD::loop()+0x550>)
    52be:	mov	r0, r5
    52c0:	bl	3994 <MTPD::writestring(char const*)>
    52c4:	ldr	r3, [r5, #12]
    52c6:	adds	r3, #12
    52c8:	b.n	4eac <MTPD::loop()+0x120>
    52ca:	mov	r0, r5
    52cc:	mov	r1, r6
    52ce:	bl	4bbc <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.8]>
          }
        } else {
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
    52d2:	cmp	r0, #0
    52d4:	beq.w	4dd6 <MTPD::loop()+0x4a>
    52d8:	uxth	r0, r0
    52da:	b.n	4db4 <MTPD::loop()+0x28>
    52dc:	.word	0x00011c50

000052e0 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    52e0:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    52e2:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    52e4:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    52e6:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    52e8:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    52ea:	beq.n	52f4 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    52ec:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    52f0:	b.w	c6cc <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    52f4:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    52f6:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    52fa:	bx	r3

000052fc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>:
			}
		}
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    52fc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5300:	ldr	r4, [r0, #0]
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    5302:	ldr	r5, [r4, #12]
    5304:	tst.w	r5, #16777216	; 0x1000000
		const uint8_t *p_write = (const uint8_t *)buf;
		uint8_t *p_read = (uint8_t *)retbuf;
		size_t count_read = count;

		// Lets clear the reader queue
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    5308:	ldr	r5, [pc, #484]	; (54f0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1f4>)
    530a:	str	r5, [r4, #0]

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    530c:	bne.n	53b4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xb8>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    530e:	lsls	r7, r3, #31
    5310:	bpl.w	547a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17e>
		    if (p_write) {
    5314:	cmp	r1, #0
    5316:	beq.w	54e0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1e4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    531a:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    531c:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    531e:	it	ne
    5320:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    5324:	str	r5, [r4, #52]	; 0x34
    5326:	adds	r1, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    5328:	ldrb.w	r8, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    532c:	add.w	ip, r3, #4294967295
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    5330:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    5334:	cmp.w	ip, #0
    5338:	beq.w	548c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
			// Push out the next byte; 
		    if (p_write) {
    533c:	cbz	r1, 5348 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x4c>
		    	w = (*p_write++) << 8;
				w |= *p_write++;
    533e:	ldrb	r5, [r1, #1]
	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
    5340:	ldrb.w	r8, [r1], #2
				w |= *p_write++;
    5344:	orr.w	r8, r5, r8, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    5348:	ldr	r5, [r0, #4]
    534a:	ldrb	r6, [r5, #8]
			if (count == 2)
    534c:	cmp.w	ip, #2
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    5350:	add.w	r6, r6, #4294967295
    5354:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    5358:	ite	eq
    535a:	orreq.w	r5, r8, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    535e:	orrne.w	r5, r8, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    5362:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    5364:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    5366:	sub.w	ip, ip, #2
    536a:	b.n	537e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x82>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    536c:	cbz	r2, 5372 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x76>
							*p_read++ = w;  // Read any pending RX bytes in
    536e:	strb	r4, [r2, #0]
    5370:	adds	r2, #1
						} 
						count_read--;
    5372:	subs	r3, #1
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    5374:	and.w	r5, r5, #61440	; 0xf000
    5378:	cmp	r5, r6
    537a:	bls.n	53aa <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xae>
    537c:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    537e:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    5380:	tst.w	r5, #240	; 0xf0
    5384:	beq.n	5374 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x78>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    5386:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    5388:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
    538c:	mov	r7, r2
    538e:	mov.w	lr, r4, asr #8
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    5392:	bne.n	536c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x70>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    5394:	cbz	r2, 539e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xa2>
							*p_read++ = w >> 8;
    5396:	strb.w	lr, [r7], #2
							*p_read++ = (w & 0xff);
    539a:	strb	r4, [r2, #1]
    539c:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    539e:	and.w	r5, r5, #61440	; 0xf000
    53a2:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
    53a4:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    53a8:	bhi.n	537c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x80>
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
    53aa:	cmp.w	ip, #0
    53ae:	beq.n	548c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    53b0:	ldr	r4, [r0, #0]
    53b2:	b.n	533c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    53b4:	lsls	r5, r3, #31
    53b6:	bpl.n	5452 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x156>
		    if (p_write) {
    53b8:	cmp	r1, #0
    53ba:	beq.w	54d0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    53be:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    53c0:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    53c2:	it	ne
    53c4:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    53c8:	str	r5, [r4, #52]	; 0x34
    53ca:	adds	r1, #1
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    53cc:	add.w	lr, r3, #4294967295
		}

	    uint16_t w = _transferWriteFill;
    53d0:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    53d4:	cmp.w	lr, #0
    53d8:	beq.n	545e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
			// Push out the next byte; 
		    if (p_write) {
    53da:	cbz	r1, 53e8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xec>
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
    53dc:	ldrb.w	ip, [r1, #1]
    53e0:	ldrb	r5, [r1, #0]
    53e2:	adds	r1, #2
    53e4:	orr.w	ip, r5, ip, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    53e8:	ldr	r5, [r0, #4]
    53ea:	ldrb	r6, [r5, #8]
			if (count == 2)
    53ec:	cmp.w	lr, #2
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    53f0:	add.w	r6, r6, #4294967295
    53f4:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    53f8:	ite	eq
    53fa:	orreq.w	r5, ip, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    53fe:	orrne.w	r5, ip, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    5402:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    5404:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    5406:	sub.w	lr, lr, #2
    540a:	b.n	541e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x122>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    540c:	cbz	r2, 5412 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x116>
							*p_read++ = w;  // Read any pending RX bytes in
    540e:	strb	r4, [r2, #0]
    5410:	adds	r2, #1
						} 
						count_read--;
    5412:	subs	r3, #1
							*p_read++ = w >> 8;
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    5414:	and.w	r5, r5, #61440	; 0xf000
    5418:	cmp	r5, r6
    541a:	bls.n	5448 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x14c>
    541c:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    541e:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    5420:	tst.w	r5, #240	; 0xf0
    5424:	beq.n	5414 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x118>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    5426:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
    542a:	mov	r7, r2
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    542c:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    542e:	bne.n	540c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x110>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    5430:	cbz	r2, 543c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x140>
							*p_read++ = (w & 0xff);
    5432:	strb.w	r4, [r7], #2
							*p_read++ = w >> 8;
    5436:	asrs	r4, r4, #8
    5438:	strb	r4, [r2, #1]
    543a:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    543c:	and.w	r5, r5, #61440	; 0xf000
    5440:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
							*p_read++ = w >> 8;
						}
						count_read -= 2;
    5442:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    5446:	bhi.n	541c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x120>
			count--;
		}

	    uint16_t w = _transferWriteFill;

		while (count > 0) {
    5448:	cmp.w	lr, #0
    544c:	beq.n	545e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
    544e:	ldr	r4, [r0, #0]
    5450:	b.n	53da <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    5452:	mov	lr, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w = _transferWriteFill;
    5454:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    5458:	cmp.w	lr, #0
    545c:	bne.n	53da <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    545e:	cbz	r3, 54a8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    5460:	ldr	r4, [r0, #0]
			sr = port().SR;
    5462:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    5464:	tst.w	r1, #240	; 0xf0
    5468:	beq.n	5462 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x166>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    546a:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    546c:	lsls	r4, r3, #31
    546e:	bpl.n	54ac <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1b0>
					if (p_read)
    5470:	cbz	r2, 5476 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17a>
						*p_read++ = w;  // Read any pending RX bytes in
    5472:	strb	r1, [r2, #0]
    5474:	adds	r2, #1
					count_read--;
    5476:	subs	r3, #1
    5478:	b.n	545e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    547a:	ldrb.w	r8, [r0, #44]	; 0x2c
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    547e:	mov	ip, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    5480:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    5484:	cmp.w	ip, #0
    5488:	bne.w	533c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    548c:	cbz	r3, 54a8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
    548e:	ldr	r4, [r0, #0]
			sr = port().SR;
    5490:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    5492:	tst.w	r1, #240	; 0xf0
    5496:	beq.n	5490 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x194>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
				if (count_read & 1) {
    5498:	lsls	r6, r3, #31

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
			sr = port().SR;
			if (sr & 0xF0)  {
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    549a:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    549c:	bpl.n	54be <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1c2>
					if (p_read)
    549e:	cbz	r2, 54a4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1a8>
						*p_read++ = w;  // Read any pending RX bytes in
    54a0:	strb	r1, [r2, #0]
    54a2:	adds	r2, #1
					count_read--;
    54a4:	subs	r3, #1
    54a6:	b.n	548c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    54a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    54ac:	cbz	r2, 54ba <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1be>
						*p_read++ = (w & 0xff);
    54ae:	mov	r4, r2
						*p_read++ = w >> 8;
    54b0:	asrs	r5, r1, #8
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
						*p_read++ = (w & 0xff);
    54b2:	strb.w	r1, [r4], #2
						*p_read++ = w >> 8;
    54b6:	strb	r5, [r2, #1]
    54b8:	mov	r2, r4
					}
					count_read -= 2;
    54ba:	subs	r3, #2
    54bc:	b.n	545e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    54be:	cbz	r2, 54cc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d0>
						*p_read++ = w >> 8;
    54c0:	mov	r4, r2
    54c2:	asrs	r5, r1, #8
    54c4:	strb.w	r5, [r4], #2
						*p_read++ = (w & 0xff);
    54c8:	strb	r1, [r2, #1]
    54ca:	mov	r2, r4
					}
					count_read -= 2;
    54cc:	subs	r3, #2
    54ce:	b.n	548c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    54d0:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    54d4:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    54d6:	it	ne
    54d8:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    54dc:	str	r5, [r4, #52]	; 0x34
    54de:	b.n	53cc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xd0>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    54e0:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    54e4:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    54e6:	it	ne
    54e8:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    54ec:	str	r5, [r4, #52]	; 0x34
    54ee:	b.n	5328 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x2c>
    54f0:	.word	0x801f0400

000054f4 <_spi_dma_rxISR0()>:
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    54f4:	push	{r4, r5, r6, r7}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    54f6:	ldr	r3, [pc, #280]	; (5610 <_spi_dma_rxISR0()+0x11c>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    54f8:	ldr	r2, [pc, #280]	; (5614 <_spi_dma_rxISR0()+0x120>)
    54fa:	ldr	r0, [r3, #56]	; 0x38
    54fc:	ldr	r4, [r3, #52]	; 0x34
    54fe:	ldrb	r1, [r0, #4]
    5500:	strb	r1, [r2, #0]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    5502:	ldr	r1, [pc, #276]	; (5618 <_spi_dma_rxISR0()+0x124>)
    5504:	ldrb	r2, [r4, #4]
    5506:	strb	r2, [r1, #0]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    5508:	ldr	r2, [r3, #48]	; 0x30
    550a:	ldrb	r0, [r0, #4]
    550c:	strb	r0, [r1, #0]
    550e:	cmp	r2, #0
    5510:	beq.n	55a0 <_spi_dma_rxISR0()+0xac>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    5512:	ldr	r1, [r3, #4]
    5514:	ldr	r1, [r1, #12]
    5516:	cmp	r2, r1
    5518:	bhi.n	5598 <_spi_dma_rxISR0()+0xa4>
    551a:	ldr	r1, [r4, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    551c:	ldrh	r4, [r1, #30]
    551e:	lsls	r4, r4, #16
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    5520:	add.w	r0, r2, #4294967295

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    5524:	bmi.n	55f2 <_spi_dma_rxISR0()+0xfe>
		tcd->BITER = len & 0x7fff;
    5526:	ubfx	r0, r0, #0, #15
    552a:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    552c:	ldrh	r0, [r1, #30]
    552e:	uxth	r0, r0
    5530:	strh	r0, [r1, #22]
    5532:	ldr	r1, [r3, #56]	; 0x38
    5534:	ldr	r1, [r1, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    5536:	ldrh	r0, [r1, #30]
    5538:	lsls	r0, r0, #16
    553a:	bmi.n	55e2 <_spi_dma_rxISR0()+0xee>
		tcd->BITER = len & 0x7fff;
    553c:	ubfx	r0, r2, #0, #15
    5540:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    5542:	ldrh	r0, [r1, #30]
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    5544:	movs	r4, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    5546:	uxth	r0, r0
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    5548:	adds.w	r2, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    554c:	strh	r0, [r1, #22]
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    554e:	it	ne
    5550:	movne	r2, #1
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    5552:	str	r4, [r3, #48]	; 0x30
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    5554:	ldr	r1, [r3, #52]	; 0x34
    5556:	ldr	r0, [pc, #184]	; (5610 <_spi_dma_rxISR0()+0x11c>)
    5558:	ldr	r1, [r1, #0]
    555a:	ldr	r5, [r1, #0]
    555c:	add.w	r4, r0, #44	; 0x2c
    5560:	cmp	r5, r4
    5562:	beq.n	55d2 <_spi_dma_rxISR0()+0xde>
    5564:	ldr	r0, [r0, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    5566:	ldr	r4, [r0, #12]
    5568:	tst.w	r4, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    556c:	ldr	r4, [r1, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    556e:	ldr	r5, [r1, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    5570:	itete	ne
    5572:	ldrhne	r4, [r4, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    5574:	ldrbeq	r4, [r4, #0]
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    5576:	addne	r5, #2
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    5578:	addeq	r5, #1
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    557a:	orr.w	r4, r4, #2147483648	; 0x80000000
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    557e:	str	r5, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    5580:	str	r4, [r0, #52]	; 0x34
    5582:	ldr	r1, [r3, #56]	; 0x38
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    5584:	ldr	r3, [pc, #148]	; (561c <_spi_dma_rxISR0()+0x128>)
    5586:	ldrb	r1, [r1, #4]
    5588:	strb	r1, [r3, #0]
			}
		}
		_dmaRX->enable();
    558a:	ldr	r1, [pc, #132]	; (5610 <_spi_dma_rxISR0()+0x11c>)
		if (should_reenable_tx)
    558c:	cbz	r2, 5594 <_spi_dma_rxISR0()+0xa0>
    558e:	ldr	r2, [r1, #52]	; 0x34
    5590:	ldrb	r2, [r2, #4]
    5592:	strb	r2, [r3, #0]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    5594:	pop	{r4, r5, r6, r7}
    5596:	bx	lr
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
    5598:	subs	r2, r2, r1
    559a:	str	r2, [r3, #48]	; 0x30
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    559c:	movs	r2, #1
    559e:	b.n	5554 <_spi_dma_rxISR0()+0x60>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    55a0:	ldr	r0, [r3, #60]	; 0x3c
    55a2:	ldr	r1, [r3, #0]
    55a4:	ldr	r5, [r0, #0]
			_dmaTX->enable();
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    55a6:	ldr	r4, [pc, #120]	; (5620 <_spi_dma_rxISR0()+0x12c>)
		_dmaRX->enable();
		if (should_reenable_tx)
			_dmaTX->enable();
	} else {

		port().RSER = 0;
    55a8:	str	r2, [r1, #48]	; 0x30
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    55aa:	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    55ac:	ldr	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    55ae:	ldr	r5, [r5, #0]
    55b0:	ldr	r6, [pc, #112]	; (5624 <_spi_dma_rxISR0()+0x130>)
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    55b2:	bic.w	r4, r4, #1073741824	; 0x40000000

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    55b6:	movs	r7, #3
    55b8:	cmp	r5, r6
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    55ba:	str	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    55bc:	strb.w	r7, [r3, #45]	; 0x2d
    55c0:	bne.n	5602 <_spi_dma_rxISR0()+0x10e>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    55c2:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    55c4:	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    55c6:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    55c8:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    55ca:	beq.n	560a <_spi_dma_rxISR0()+0x116>
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    55cc:	pop	{r4, r5, r6, r7}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    55ce:	b.w	c6cc <EventResponder::triggerEventNotImmediate()>
    55d2:	ldr	r1, [r0, #0]
			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    55d4:	ldrb.w	r0, [r0, #44]	; 0x2c

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    55d8:	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    55da:	orr.w	r0, r0, #2147483648	; 0x80000000
    55de:	str	r0, [r1, #52]	; 0x34
    55e0:	b.n	5582 <_spi_dma_rxISR0()+0x8e>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    55e2:	ldrh	r4, [r1, #30]
    55e4:	ubfx	r0, r2, #0, #9
    55e8:	and.w	r4, r4, #65024	; 0xfe00
    55ec:	orrs	r0, r4
    55ee:	strh	r0, [r1, #30]
    55f0:	b.n	5542 <_spi_dma_rxISR0()+0x4e>
    55f2:	ldrh	r4, [r1, #30]
    55f4:	ubfx	r0, r0, #0, #9
    55f8:	and.w	r4, r4, #65024	; 0xfe00
    55fc:	orrs	r0, r4
    55fe:	strh	r0, [r1, #30]
    5600:	b.n	552c <_spi_dma_rxISR0()+0x38>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    5602:	mov	r3, r5
    5604:	mov	r1, r2
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    5606:	pop	{r4, r5, r6, r7}
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    5608:	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    560a:	ldr	r3, [r0, #8]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    560c:	pop	{r4, r5, r6, r7}
    560e:	bx	r3
    5610:	.word	0x1fff097c
    5614:	.word	0x4000801f
    5618:	.word	0x4000801c
    561c:	.word	0x4000801b
    5620:	.word	0xff0f0000
    5624:	.word	0x000052e1

00005628 <SPIClass::setMOSI(unsigned char)>:
	}
	return 0;
}

void SPIClass::setMOSI(uint8_t pin)
{
    5628:	push	{r4, r5, r6, r7}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    562a:	ldr	r3, [pc, #148]	; (56c0 <SPIClass::setMOSI(unsigned char)+0x98>)
    562c:	ldr	r5, [r0, #4]
    562e:	cmp	r3, r5
    5630:	beq.n	5656 <SPIClass::setMOSI(unsigned char)+0x2e>
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
    5632:	ldrb	r3, [r0, #9]
    5634:	add	r3, r5
    5636:	ldrb.w	r6, [r3, #44]	; 0x2c
    563a:	cmp	r1, r6
    563c:	beq.n	5652 <SPIClass::setMOSI(unsigned char)+0x2a>
    563e:	add.w	r2, r5, #43	; 0x2b
    5642:	movs	r3, #0
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
    5644:	ldrb.w	r4, [r2, #1]!
    5648:	cmp	r4, r1
    564a:	beq.n	5682 <SPIClass::setMOSI(unsigned char)+0x5a>
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
    564c:	adds	r3, #1
    564e:	cmp	r3, #4
    5650:	bne.n	5644 <SPIClass::setMOSI(unsigned char)+0x1c>
				mosi_pin_index = i;
				return;
			}
		}
	}
}
    5652:	pop	{r4, r5, r6, r7}
    5654:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMOSI_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 11) pinout &= ~3;
    5656:	cmp	r1, #11
    5658:	beq.n	56b4 <SPIClass::setMOSI(unsigned char)+0x8c>
		if (pin == 7)  pinout = (pinout & ~0x3) | 1;
    565a:	cmp	r1, #7
    565c:	beq.n	5672 <SPIClass::setMOSI(unsigned char)+0x4a>
		if (pin == 28) pinout = (pinout & ~0x3) | 2;
    565e:	cmp	r1, #28
    5660:	bne.n	5632 <SPIClass::setMOSI(unsigned char)+0xa>
    5662:	ldr	r2, [pc, #96]	; (56c4 <SPIClass::setMOSI(unsigned char)+0x9c>)
    5664:	ldrb	r3, [r2, #0]
    5666:	bic.w	r3, r3, #3
    566a:	orr.w	r3, r3, #2
    566e:	strb	r3, [r2, #0]
    5670:	b.n	5632 <SPIClass::setMOSI(unsigned char)+0xa>
#endif
	}
	inline void setMOSI_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 11) pinout &= ~3;
		if (pin == 7)  pinout = (pinout & ~0x3) | 1;
    5672:	ldr	r2, [pc, #80]	; (56c4 <SPIClass::setMOSI(unsigned char)+0x9c>)
    5674:	ldrb	r3, [r2, #0]
    5676:	bic.w	r3, r3, #3
    567a:	orr.w	r3, r3, #1
    567e:	strb	r3, [r2, #0]
    5680:	b.n	5632 <SPIClass::setMOSI(unsigned char)+0xa>
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    5682:	ldmia.w	r5, {r1, r2}
    5686:	ldr	r1, [r1, #0]
    5688:	tst	r1, r2
    568a:	beq.n	56ae <SPIClass::setMOSI(unsigned char)+0x86>
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    568c:	ldr	r2, [pc, #56]	; (56c8 <SPIClass::setMOSI(unsigned char)+0xa0>)
    568e:	add.w	r6, r2, r6, lsl #3
					*reg = 0;
    5692:	movs	r7, #0
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    5694:	ldr	r4, [r6, #4]
					*reg = 0;
					reg = portConfigRegister(hardware().mosi_pin[i]);
    5696:	adds	r1, r5, r3
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
					*reg = 0;
    5698:	str	r7, [r4, #0]
					reg = portConfigRegister(hardware().mosi_pin[i]);
    569a:	ldrb.w	r1, [r1, #44]	; 0x2c
    569e:	add.w	r2, r2, r1, lsl #3
					*reg = hardware().mosi_mux[i];
    56a2:	add.w	r1, r3, #12
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().mosi_pin[i]);
    56a6:	ldr	r4, [r2, #4]
					*reg = hardware().mosi_mux[i];
    56a8:	ldr.w	r2, [r5, r1, lsl #2]
    56ac:	str	r2, [r4, #0]
				}	
				mosi_pin_index = i;
    56ae:	strb	r3, [r0, #9]
				return;
			}
		}
	}
}
    56b0:	pop	{r4, r5, r6, r7}
    56b2:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMOSI_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 11) pinout &= ~3;
    56b4:	ldr	r2, [pc, #12]	; (56c4 <SPIClass::setMOSI(unsigned char)+0x9c>)
    56b6:	ldrb	r3, [r2, #0]
    56b8:	bic.w	r3, r3, #3
    56bc:	strb	r3, [r2, #0]
    56be:	b.n	5632 <SPIClass::setMOSI(unsigned char)+0xa>
    56c0:	.word	0x00011c80
    56c4:	.word	0x1fff20b1
    56c8:	.word	0x00011dd8

000056cc <SPIClass::setMISO(unsigned char)>:

void SPIClass::setMISO(uint8_t pin)
{
    56cc:	push	{r4, r5, r6, r7}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    56ce:	ldr	r3, [pc, #144]	; (5760 <SPIClass::setMISO(unsigned char)+0x94>)
    56d0:	ldr	r5, [r0, #4]
    56d2:	cmp	r3, r5
    56d4:	beq.n	56f8 <SPIClass::setMISO(unsigned char)+0x2c>
		SPCR.setMISO_soft(pin);
	}
	if (pin != hardware().miso_pin[miso_pin_index]) {
    56d6:	ldrb	r3, [r0, #8]
    56d8:	add	r3, r5
    56da:	ldrb	r6, [r3, #24]
    56dc:	cmp	r1, r6
    56de:	beq.n	56f4 <SPIClass::setMISO(unsigned char)+0x28>
    56e0:	add.w	r2, r5, #23
    56e4:	movs	r3, #0
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if  (pin == hardware().miso_pin[i]) {
    56e6:	ldrb.w	r4, [r2, #1]!
    56ea:	cmp	r4, r1
    56ec:	beq.n	5724 <SPIClass::setMISO(unsigned char)+0x58>
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setMISO_soft(pin);
	}
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
    56ee:	adds	r3, #1
    56f0:	cmp	r3, #4
    56f2:	bne.n	56e6 <SPIClass::setMISO(unsigned char)+0x1a>
				miso_pin_index = i;
				return;
			}
		}
	}
}
    56f4:	pop	{r4, r5, r6, r7}
    56f6:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMISO_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 12) pinout &= ~0xc;
    56f8:	cmp	r1, #12
    56fa:	beq.n	5752 <SPIClass::setMISO(unsigned char)+0x86>
		if (pin == 8)  pinout = (pinout & ~0xc) | 4;
    56fc:	cmp	r1, #8
    56fe:	beq.n	5714 <SPIClass::setMISO(unsigned char)+0x48>
		if (pin == 39) pinout = (pinout & ~0xc) | 8;
    5700:	cmp	r1, #39	; 0x27
    5702:	bne.n	56d6 <SPIClass::setMISO(unsigned char)+0xa>
    5704:	ldr	r2, [pc, #92]	; (5764 <SPIClass::setMISO(unsigned char)+0x98>)
    5706:	ldrb	r3, [r2, #0]
    5708:	bic.w	r3, r3, #12
    570c:	orr.w	r3, r3, #8
    5710:	strb	r3, [r2, #0]
    5712:	b.n	56d6 <SPIClass::setMISO(unsigned char)+0xa>
#endif
	}
	inline void setMISO_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 12) pinout &= ~0xc;
		if (pin == 8)  pinout = (pinout & ~0xc) | 4;
    5714:	ldr	r2, [pc, #76]	; (5764 <SPIClass::setMISO(unsigned char)+0x98>)
    5716:	ldrb	r3, [r2, #0]
    5718:	bic.w	r3, r3, #12
    571c:	orr.w	r3, r3, #4
    5720:	strb	r3, [r2, #0]
    5722:	b.n	56d6 <SPIClass::setMISO(unsigned char)+0xa>
		SPCR.setMISO_soft(pin);
	}
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if  (pin == hardware().miso_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    5724:	ldmia.w	r5, {r1, r2}
    5728:	ldr	r1, [r1, #0]
    572a:	tst	r1, r2
    572c:	beq.n	574c <SPIClass::setMISO(unsigned char)+0x80>
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    572e:	ldr	r2, [pc, #56]	; (5768 <SPIClass::setMISO(unsigned char)+0x9c>)
    5730:	add.w	r6, r2, r6, lsl #3
					*reg = 0;
					reg = portConfigRegister(hardware().miso_pin[i]);
    5734:	adds	r1, r5, r3
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if  (pin == hardware().miso_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    5736:	ldr	r4, [r6, #4]
					*reg = 0;
    5738:	movs	r7, #0
    573a:	str	r7, [r4, #0]
					reg = portConfigRegister(hardware().miso_pin[i]);
    573c:	ldrb	r1, [r1, #24]
    573e:	add.w	r2, r2, r1, lsl #3
					*reg = hardware().miso_mux[i];
    5742:	add.w	r5, r5, r3, lsl #2
			if  (pin == hardware().miso_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().miso_pin[i]);
    5746:	ldr	r2, [r2, #4]
					*reg = hardware().miso_mux[i];
    5748:	ldr	r1, [r5, #28]
    574a:	str	r1, [r2, #0]
				}	
				miso_pin_index = i;
    574c:	strb	r3, [r0, #8]
				return;
			}
		}
	}
}
    574e:	pop	{r4, r5, r6, r7}
    5750:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMISO_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 12) pinout &= ~0xc;
    5752:	ldr	r2, [pc, #16]	; (5764 <SPIClass::setMISO(unsigned char)+0x98>)
    5754:	ldrb	r3, [r2, #0]
    5756:	bic.w	r3, r3, #12
    575a:	strb	r3, [r2, #0]
    575c:	b.n	56d6 <SPIClass::setMISO(unsigned char)+0xa>
    575e:	nop
    5760:	.word	0x00011c80
    5764:	.word	0x1fff20b1
    5768:	.word	0x00011dd8

0000576c <SPIClass::setSCK(unsigned char)>:

void SPIClass::setSCK(uint8_t pin)
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    576c:	ldr	r2, [pc, #160]	; (5810 <SPIClass::setSCK(unsigned char)+0xa4>)
    576e:	ldr	r3, [r0, #4]
    5770:	cmp	r2, r3
		}
	}
}

void SPIClass::setSCK(uint8_t pin)
{
    5772:	push	{r4, r5, r6}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    5774:	beq.n	57a2 <SPIClass::setSCK(unsigned char)+0x36>
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
    5776:	ldrb	r2, [r0, #10]
    5778:	add	r2, r3
    577a:	ldrb.w	r2, [r2, #64]	; 0x40
    577e:	cmp	r1, r2
    5780:	beq.n	579e <SPIClass::setSCK(unsigned char)+0x32>
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
    5782:	ldrb.w	r4, [r3, #64]	; 0x40
    5786:	cmp	r4, r1
    5788:	beq.n	580a <SPIClass::setSCK(unsigned char)+0x9e>
    578a:	ldrb.w	r4, [r3, #65]	; 0x41
    578e:	cmp	r4, r1
    5790:	beq.n	57ce <SPIClass::setSCK(unsigned char)+0x62>
    5792:	ldrb.w	r4, [r3, #66]	; 0x42
    5796:	cmp	r4, r1
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
    5798:	it	eq
    579a:	moveq	r1, #2
			if  (pin == hardware().sck_pin[i]) {
    579c:	beq.n	57d0 <SPIClass::setSCK(unsigned char)+0x64>
				sck_pin_index = i;
				return;
			}
		}
	}
}
    579e:	pop	{r4, r5, r6}
    57a0:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setSCK_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 13) pinout &= ~0x30;
    57a2:	cmp	r1, #13
    57a4:	beq.n	57fe <SPIClass::setSCK(unsigned char)+0x92>
		if (pin == 14) pinout = (pinout & ~0x30) | 0x10;
    57a6:	cmp	r1, #14
    57a8:	beq.n	57be <SPIClass::setSCK(unsigned char)+0x52>
		if (pin == 27) pinout = (pinout & ~0x30) | 0x20;
    57aa:	cmp	r1, #27
    57ac:	bne.n	5776 <SPIClass::setSCK(unsigned char)+0xa>
    57ae:	ldr	r4, [pc, #100]	; (5814 <SPIClass::setSCK(unsigned char)+0xa8>)
    57b0:	ldrb	r2, [r4, #0]
    57b2:	bic.w	r2, r2, #48	; 0x30
    57b6:	orr.w	r2, r2, #32
    57ba:	strb	r2, [r4, #0]
    57bc:	b.n	5776 <SPIClass::setSCK(unsigned char)+0xa>
#endif
	}
	inline void setSCK_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 13) pinout &= ~0x30;
		if (pin == 14) pinout = (pinout & ~0x30) | 0x10;
    57be:	ldr	r4, [pc, #84]	; (5814 <SPIClass::setSCK(unsigned char)+0xa8>)
    57c0:	ldrb	r2, [r4, #0]
    57c2:	bic.w	r2, r2, #48	; 0x30
    57c6:	orr.w	r2, r2, #16
    57ca:	strb	r2, [r4, #0]
    57cc:	b.n	5776 <SPIClass::setSCK(unsigned char)+0xa>
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
    57ce:	movs	r1, #1
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    57d0:	ldr	r5, [r3, #0]
    57d2:	ldr	r4, [r3, #4]
    57d4:	ldr	r5, [r5, #0]
    57d6:	tst	r5, r4
    57d8:	beq.n	57fa <SPIClass::setSCK(unsigned char)+0x8e>
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    57da:	ldr	r4, [pc, #60]	; (5818 <SPIClass::setSCK(unsigned char)+0xac>)
    57dc:	add.w	r2, r4, r2, lsl #3
					*reg = 0;
    57e0:	movs	r6, #0
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    57e2:	ldr	r5, [r2, #4]
					*reg = 0;
					reg = portConfigRegister(hardware().sck_pin[i]);
    57e4:	adds	r2, r3, r1
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
					*reg = 0;
    57e6:	str	r6, [r5, #0]
					reg = portConfigRegister(hardware().sck_pin[i]);
    57e8:	ldrb.w	r2, [r2, #64]	; 0x40
    57ec:	add.w	r4, r4, r2, lsl #3
					*reg = hardware().sck_mux[i];
    57f0:	add.w	r3, r3, r1, lsl #2
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().sck_pin[i]);
    57f4:	ldr	r2, [r4, #4]
					*reg = hardware().sck_mux[i];
    57f6:	ldr	r3, [r3, #68]	; 0x44
    57f8:	str	r3, [r2, #0]
				}	
				sck_pin_index = i;
    57fa:	strb	r1, [r0, #10]
				return;
    57fc:	b.n	579e <SPIClass::setSCK(unsigned char)+0x32>
		pinout = newpinout;
#endif
	}
	inline void setSCK_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 13) pinout &= ~0x30;
    57fe:	ldr	r4, [pc, #20]	; (5814 <SPIClass::setSCK(unsigned char)+0xa8>)
    5800:	ldrb	r2, [r4, #0]
    5802:	bic.w	r2, r2, #48	; 0x30
    5806:	strb	r2, [r4, #0]
    5808:	b.n	5776 <SPIClass::setSCK(unsigned char)+0xa>
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
    580a:	movs	r1, #0
    580c:	b.n	57d0 <SPIClass::setSCK(unsigned char)+0x64>
    580e:	nop
    5810:	.word	0x00011c80
    5814:	.word	0x1fff20b1
    5818:	.word	0x00011dd8

0000581c <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    581c:	cbz	r3, 5822 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    581e:	b.w	52fc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>
    5822:	bx	lr

00005824 <breakTime(long, tmElements_t&)>:
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    5824:	ldr	r2, [pc, #400]	; (59b8 <breakTime(long, tmElements_t&)+0x194>)
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    5826:	ldr	r3, [pc, #404]	; (59bc <breakTime(long, tmElements_t&)+0x198>)
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
    5828:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    582c:	ldr	r6, [pc, #400]	; (59c0 <breakTime(long, tmElements_t&)+0x19c>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    582e:	ldr.w	sl, [pc, #416]	; 59d0 <breakTime(long, tmElements_t&)+0x1ac>
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    5832:	ldr	r4, [pc, #400]	; (59c4 <breakTime(long, tmElements_t&)+0x1a0>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    5834:	ldr.w	r9, [pc, #400]	; 59c8 <breakTime(long, tmElements_t&)+0x1a4>
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    5838:	umull	r5, r2, r2, r0
    583c:	mov.w	ip, r2, lsr #16
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    5840:	add.w	r7, ip, #4
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    5844:	umull	r2, r5, r3, r0
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    5848:	umull	r6, r2, r6, r0
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    584c:	umull	sl, fp, r7, sl
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    5850:	lsrs	r5, r5, #5
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    5852:	lsrs	r2, r2, #11
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    5854:	umull	r6, r3, r3, r5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    5858:	umull	r6, r4, r4, r2
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    585c:	rsb	r6, fp, r7
    5860:	add.w	r6, fp, r6, lsr #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    5864:	lsrs	r3, r3, #5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    5866:	lsrs	r6, r6, #2
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    5868:	lsrs	r4, r4, #4
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    586a:	rsb	r6, r6, r6, lsl #3
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    586e:	rsb	r3, r3, r3, lsl #4
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    5872:	add.w	r4, r4, r4, lsl #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    5876:	sub.w	r3, r5, r3, lsl #2
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    587a:	subs	r6, r7, r6
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    587c:	rsb	r5, r5, r5, lsl #4
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    5880:	sub.w	r2, r2, r4, lsl #3
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    5884:	sub.w	r0, r0, r5, lsl #2
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    5888:	adds	r6, #1
    588a:	movs	r4, #0
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    588c:	strb	r2, [r1, #2]
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    588e:	strb	r0, [r1, #0]
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    5890:	strb	r3, [r1, #1]
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    5892:	strb	r6, [r1, #3]
  
  year = 0;  
  days = 0;
    5894:	mov	r2, r4
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    5896:	movw	fp, #365	; 0x16d
    589a:	mov.w	r8, #100	; 0x64
    589e:	mov.w	sl, #400	; 0x190
    58a2:	b.n	58c2 <breakTime(long, tmElements_t&)+0x9e>
    58a4:	rsb	r5, r6, r5, asr #7
    58a8:	mls	r5, sl, r5, r3
    58ac:	cbnz	r0, 590c <breakTime(long, tmElements_t&)+0xe8>
    58ae:	cmp	r5, #0
    58b0:	ite	ne
    58b2:	movne	r0, fp
    58b4:	moveq.w	r0, #366	; 0x16e
    58b8:	add	r2, r0
    58ba:	cmp	ip, r2
    58bc:	add.w	r4, r4, #1
    58c0:	bcc.n	58ea <breakTime(long, tmElements_t&)+0xc6>
    58c2:	uxtb	r7, r4
    58c4:	addw	r3, r7, #1970	; 0x7b2
    58c8:	smull	r0, r5, r9, r3
    58cc:	asrs	r6, r3, #31
    58ce:	rsb	r0, r6, r5, asr #5
    58d2:	ands.w	lr, r3, #3
    58d6:	mls	r0, r8, r0, r3
    58da:	beq.n	58a4 <breakTime(long, tmElements_t&)+0x80>
    58dc:	movw	r0, #365	; 0x16d
    58e0:	add	r2, r0
    58e2:	cmp	ip, r2
    58e4:	add.w	r4, r4, #1
    58e8:	bcs.n	58c2 <breakTime(long, tmElements_t&)+0x9e>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
    58ea:	strb	r7, [r1, #6]
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    58ec:	cmp.w	lr, #0
    58f0:	bne.n	5912 <breakTime(long, tmElements_t&)+0xee>
    58f2:	ldr	r0, [pc, #212]	; (59c8 <breakTime(long, tmElements_t&)+0x1a4>)
    58f4:	asrs	r6, r3, #31
    58f6:	smull	r4, r0, r0, r3
    58fa:	rsb	r4, r6, r0, asr #5
    58fe:	movs	r5, #100	; 0x64
    5900:	mls	r4, r5, r4, r3
    5904:	cbz	r4, 5976 <breakTime(long, tmElements_t&)+0x152>
    5906:	mov.w	r4, #366	; 0x16e
    590a:	b.n	5918 <breakTime(long, tmElements_t&)+0xf4>
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    590c:	mov.w	r0, #366	; 0x16e
    5910:	b.n	58b8 <breakTime(long, tmElements_t&)+0x94>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    5912:	movw	r4, #365	; 0x16d
    5916:	asrs	r6, r3, #31
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    5918:	ldr	r0, [pc, #172]	; (59c8 <breakTime(long, tmElements_t&)+0x1a4>)
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    591a:	ldr	r5, [pc, #176]	; (59cc <breakTime(long, tmElements_t&)+0x1a8>)
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    591c:	smull	r7, r0, r0, r3
    5920:	rsb	r8, r6, r0, asr #5
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    5924:	subs	r2, r2, r4
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    5926:	rsb	r6, r6, r0, asr #7
    592a:	movs	r4, #100	; 0x64
    592c:	mov.w	r0, #400	; 0x190
    5930:	mls	r6, r0, r6, r3
    5934:	mls	r8, r4, r8, r3
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    5938:	rsb	r2, r2, ip
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    593c:	movs	r0, #1
    593e:	movs	r3, #0
    5940:	b.n	5948 <breakTime(long, tmElements_t&)+0x124>
    5942:	adds	r0, #1
    5944:	uxtb	r0, r0
    5946:	adds	r3, #1
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    5948:	cmp	r3, #1
    594a:	uxtb	r7, r3
    594c:	beq.n	5990 <breakTime(long, tmElements_t&)+0x16c>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    594e:	ldrb	r4, [r3, r5]
    5950:	cmp	r4, r2
    5952:	bhi.n	5968 <breakTime(long, tmElements_t&)+0x144>
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    5954:	cmp	r0, #12
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
      time -= monthLength;
    5956:	sub.w	r2, r2, r4
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    595a:	bne.n	5942 <breakTime(long, tmElements_t&)+0x11e>
    595c:	movs	r7, #13
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    595e:	adds	r2, #1
    5960:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    5962:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    5964:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5968:	adds	r7, #1
    596a:	uxtb	r7, r7
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    596c:	adds	r2, #1
    596e:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    5970:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    5972:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    5976:	mov.w	r4, #400	; 0x190
    597a:	rsb	r0, r6, r0, asr #7
    597e:	mls	r0, r4, r0, r3
    5982:	cmp	r0, #0
    5984:	movw	r4, #365	; 0x16d
    5988:	it	eq
    598a:	moveq.w	r4, #366	; 0x16e
    598e:	b.n	5918 <breakTime(long, tmElements_t&)+0xf4>
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    5990:	cmp.w	lr, #0
    5994:	bne.n	59ac <breakTime(long, tmElements_t&)+0x188>
    5996:	cmp.w	r8, #0
    599a:	bne.n	59b4 <breakTime(long, tmElements_t&)+0x190>
    599c:	cmp	r6, #0
    599e:	ite	ne
    59a0:	movne	r4, #28
    59a2:	moveq	r4, #29
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    59a4:	cmp	r2, r4
    59a6:	bcc.n	59b0 <breakTime(long, tmElements_t&)+0x18c>
      time -= monthLength;
    59a8:	subs	r2, r2, r4
    59aa:	b.n	5942 <breakTime(long, tmElements_t&)+0x11e>
    59ac:	movs	r4, #28
    59ae:	b.n	59a4 <breakTime(long, tmElements_t&)+0x180>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    59b0:	movs	r7, #2
    59b2:	b.n	595e <breakTime(long, tmElements_t&)+0x13a>
    59b4:	movs	r4, #29
    59b6:	b.n	59a4 <breakTime(long, tmElements_t&)+0x180>
    59b8:	.word	0xc22e4507
    59bc:	.word	0x88888889
    59c0:	.word	0x91a2b3c5
    59c4:	.word	0xaaaaaaab
    59c8:	.word	0x51eb851f
    59cc:	.word	0x00011d14
    59d0:	.word	0x24924925

000059d4 <refreshCache(long) [clone .part.0]>:

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    59d4:	push	{r4, lr}
  if (t != cacheTime) {
    breakTime(t, tm); 
    59d6:	ldr	r1, [pc, #12]	; (59e4 <refreshCache(long) [clone .part.0]+0x10>)

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    59d8:	mov	r4, r0
  if (t != cacheTime) {
    breakTime(t, tm); 
    59da:	bl	5824 <breakTime(long, tmElements_t&)>
    cacheTime = t; 
    59de:	ldr	r3, [pc, #8]	; (59e8 <refreshCache(long) [clone .part.0]+0x14>)
    59e0:	str	r4, [r3, #0]
    59e2:	pop	{r4, pc}
    59e4:	.word	0x1fff1a60
    59e8:	.word	0x1fff1a5c

000059ec <now()>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    59ec:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    59ee:	ldr	r4, [pc, #128]	; (5a70 <now()+0x84>)
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    59f0:	ldr	r6, [pc, #128]	; (5a74 <now()+0x88>)
    59f2:	ldr	r3, [r4, #0]
    59f4:	ldr	r2, [r6, #0]
    59f6:	ldr	r5, [pc, #128]	; (5a78 <now()+0x8c>)
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    59f8:	sub	sp, #12
    59fa:	ldr	r0, [r5, #0]
    59fc:	str	r3, [sp, #0]
	return ret;
    59fe:	ldr	r3, [sp, #0]
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    5a00:	subs	r3, r3, r2
    5a02:	cmp.w	r3, #1000	; 0x3e8
    5a06:	bcc.n	5a28 <now()+0x3c>
    5a08:	adds	r0, #1
    5a0a:	b.n	5a0e <now()+0x22>
    5a0c:	mov	r0, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5a0e:	ldr	r3, [r4, #0]
    5a10:	str	r3, [sp, #0]
	return ret;
    5a12:	ldr	r3, [sp, #0]
		// millis() and prevMillis are both unsigned ints thus the subtraction will always be the absolute value of the difference
    sysTime++;
    prevMillis += 1000;	
    5a14:	add.w	r2, r2, #1000	; 0x3e8
#endif


time_t now() {
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    5a18:	subs	r3, r3, r2
    5a1a:	cmp.w	r3, #1000	; 0x3e8
    5a1e:	add.w	r1, r0, #1
    5a22:	bcs.n	5a0c <now()+0x20>
    5a24:	str	r0, [r5, #0]
    5a26:	str	r2, [r6, #0]
    prevMillis += 1000;	
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
    5a28:	ldr	r7, [pc, #80]	; (5a7c <now()+0x90>)
    5a2a:	ldr	r3, [r7, #0]
    5a2c:	cmp	r0, r3
    5a2e:	bcc.n	5a50 <now()+0x64>
    if (getTimePtr != 0) {
    5a30:	ldr	r3, [pc, #76]	; (5a80 <now()+0x94>)
    5a32:	ldr	r3, [r3, #0]
    5a34:	cbz	r3, 5a50 <now()+0x64>
      time_t t = getTimePtr();
    5a36:	blx	r3
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    5a38:	ldr	r3, [pc, #72]	; (5a84 <now()+0x98>)
#endif
  }
  if (nextSyncTime <= sysTime) {
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
    5a3a:	cbnz	r0, 5a54 <now()+0x68>
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    5a3c:	ldr	r1, [pc, #72]	; (5a88 <now()+0x9c>)
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    5a3e:	ldr	r2, [r3, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    5a40:	ldrb	r3, [r1, #0]
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    5a42:	ldr	r0, [r5, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    5a44:	adds	r3, #0
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    5a46:	add	r2, r0
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    5a48:	it	ne
    5a4a:	movne	r3, #1
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    5a4c:	str	r2, [r7, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    5a4e:	strb	r3, [r1, #0]
      }
    }
  }  
  return (time_t)sysTime;
}
    5a50:	add	sp, #12
    5a52:	pop	{r4, r5, r6, r7, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5a54:	ldr	r2, [r4, #0]
    5a56:	str	r2, [sp, #4]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    5a58:	ldr	r3, [r3, #0]
  Status = timeSet;
    5a5a:	ldr	r2, [pc, #44]	; (5a88 <now()+0x9c>)
	return ret;
    5a5c:	ldr	r4, [sp, #4]
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    5a5e:	str	r0, [r5, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
    5a60:	add	r3, r0
  Status = timeSet;
    5a62:	movs	r1, #2
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    5a64:	str	r4, [r6, #0]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    5a66:	str	r3, [r7, #0]
  Status = timeSet;
    5a68:	strb	r1, [r2, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
      }
    }
  }  
  return (time_t)sysTime;
}
    5a6a:	add	sp, #12
    5a6c:	pop	{r4, r5, r6, r7, pc}
    5a6e:	nop
    5a70:	.word	0x1fff1f90
    5a74:	.word	0x1fff1a74
    5a78:	.word	0x1fff1a68
    5a7c:	.word	0x1fff1a78
    5a80:	.word	0x1fff1a70
    5a84:	.word	0x1fff09bc
    5a88:	.word	0x1fff1a6c

00005a8c <hour()>:
    breakTime(t, tm); 
    cacheTime = t; 
  }
}

int hour() { // the hour now 
    5a8c:	push	{r3, lr}
  return hour(now()); 
    5a8e:	bl	59ec <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    5a92:	ldr	r3, [pc, #16]	; (5aa4 <hour()+0x18>)
    5a94:	ldr	r3, [r3, #0]
    5a96:	cmp	r0, r3
    5a98:	beq.n	5a9e <hour()+0x12>
    5a9a:	bl	59d4 <refreshCache(long) [clone .part.0]>
  return hour(now()); 
}

int hour(time_t t) { // the hour for the given time
  refreshCache(t);
  return tm.Hour;  
    5a9e:	ldr	r3, [pc, #8]	; (5aa8 <hour()+0x1c>)
  }
}

int hour() { // the hour now 
  return hour(now()); 
}
    5aa0:	ldrb	r0, [r3, #2]
    5aa2:	pop	{r3, pc}
    5aa4:	.word	0x1fff1a5c
    5aa8:	.word	0x1fff1a60

00005aac <minute()>:

uint8_t isPM(time_t t) { // returns true if PM
  return (hour(t) >= 12); 
}

int minute() {
    5aac:	push	{r3, lr}
  return minute(now()); 
    5aae:	bl	59ec <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    5ab2:	ldr	r3, [pc, #16]	; (5ac4 <minute()+0x18>)
    5ab4:	ldr	r3, [r3, #0]
    5ab6:	cmp	r0, r3
    5ab8:	beq.n	5abe <minute()+0x12>
    5aba:	bl	59d4 <refreshCache(long) [clone .part.0]>
  return minute(now()); 
}

int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
    5abe:	ldr	r3, [pc, #8]	; (5ac8 <minute()+0x1c>)
  return (hour(t) >= 12); 
}

int minute() {
  return minute(now()); 
}
    5ac0:	ldrb	r0, [r3, #1]
    5ac2:	pop	{r3, pc}
    5ac4:	.word	0x1fff1a5c
    5ac8:	.word	0x1fff1a60

00005acc <second()>:
int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
}

int second() {
    5acc:	push	{r3, lr}
  return second(now()); 
    5ace:	bl	59ec <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    5ad2:	ldr	r3, [pc, #16]	; (5ae4 <second()+0x18>)
    5ad4:	ldr	r3, [r3, #0]
    5ad6:	cmp	r0, r3
    5ad8:	beq.n	5ade <second()+0x12>
    5ada:	bl	59d4 <refreshCache(long) [clone .part.0]>
  return second(now()); 
}

int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
    5ade:	ldr	r3, [pc, #8]	; (5ae8 <second()+0x1c>)
  return tm.Minute;  
}

int second() {
  return second(now()); 
}
    5ae0:	ldrb	r0, [r3, #0]
    5ae2:	pop	{r3, pc}
    5ae4:	.word	0x1fff1a5c
    5ae8:	.word	0x1fff1a60

00005aec <day()>:
int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
}

int day(){
    5aec:	push	{r3, lr}
  return(day(now())); 
    5aee:	bl	59ec <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    5af2:	ldr	r3, [pc, #16]	; (5b04 <day()+0x18>)
    5af4:	ldr	r3, [r3, #0]
    5af6:	cmp	r0, r3
    5af8:	beq.n	5afe <day()+0x12>
    5afa:	bl	59d4 <refreshCache(long) [clone .part.0]>
  return(day(now())); 
}

int day(time_t t) { // the day for the given time (0-6)
  refreshCache(t);
  return tm.Day;
    5afe:	ldr	r3, [pc, #8]	; (5b08 <day()+0x1c>)
  return tm.Second;
}

int day(){
  return(day(now())); 
}
    5b00:	ldrb	r0, [r3, #4]
    5b02:	pop	{r3, pc}
    5b04:	.word	0x1fff1a5c
    5b08:	.word	0x1fff1a60

00005b0c <month()>:
int weekday(time_t t) {
  refreshCache(t);
  return tm.Wday;
}
   
int month(){
    5b0c:	push	{r3, lr}
  return month(now()); 
    5b0e:	bl	59ec <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    5b12:	ldr	r3, [pc, #16]	; (5b24 <month()+0x18>)
    5b14:	ldr	r3, [r3, #0]
    5b16:	cmp	r0, r3
    5b18:	beq.n	5b1e <month()+0x12>
    5b1a:	bl	59d4 <refreshCache(long) [clone .part.0]>
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
    5b1e:	ldr	r3, [pc, #8]	; (5b28 <month()+0x1c>)
  return tm.Wday;
}
   
int month(){
  return month(now()); 
}
    5b20:	ldrb	r0, [r3, #5]
    5b22:	pop	{r3, pc}
    5b24:	.word	0x1fff1a5c
    5b28:	.word	0x1fff1a60

00005b2c <year()>:
int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
    5b2c:	push	{r3, lr}
  return year(now()); 
    5b2e:	bl	59ec <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    5b32:	ldr	r3, [pc, #20]	; (5b48 <year()+0x1c>)
    5b34:	ldr	r3, [r3, #0]
    5b36:	cmp	r0, r3
    5b38:	beq.n	5b3e <year()+0x12>
    5b3a:	bl	59d4 <refreshCache(long) [clone .part.0]>
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
  return tmYearToCalendar(tm.Year);
    5b3e:	ldr	r3, [pc, #12]	; (5b4c <year()+0x20>)
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
    5b40:	ldrb	r0, [r3, #6]
}
    5b42:	addw	r0, r0, #1970	; 0x7b2
    5b46:	pop	{r3, pc}
    5b48:	.word	0x1fff1a5c
    5b4c:	.word	0x1fff1a60

00005b50 <SDClass::~SDClass()>:
	char *filename;
};



class SDClass : public FS
    5b50:	bx	lr
    5b52:	nop

00005b54 <_GLOBAL__sub_I_SD>:
 */

#include <Arduino.h>
#include <SD.h>

SDClass SD;
    5b54:	push	{r4, r5, r6, r7}
{
public:
	SDClass() { }
    5b56:	ldr	r3, [pc, #60]	; (5b94 <_GLOBAL__sub_I_SD+0x40>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    5b58:	ldr	r4, [pc, #60]	; (5b98 <_GLOBAL__sub_I_SD+0x44>)
    5b5a:	str.w	r4, [r3, #1164]	; 0x48c
    5b5e:	movs	r5, #40	; 0x28
    5b60:	movs	r4, #0
    5b62:	ldr	r0, [pc, #56]	; (5b9c <_GLOBAL__sub_I_SD+0x48>)
    5b64:	ldr	r7, [pc, #56]	; (5ba0 <_GLOBAL__sub_I_SD+0x4c>)
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    5b66:	ldr	r6, [pc, #60]	; (5ba4 <_GLOBAL__sub_I_SD+0x50>)
    5b68:	strb.w	r5, [r3, #1195]	; 0x4ab
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() : m_options(FIFO_SDIO) {}
    5b6c:	strb.w	r4, [r3, #1172]	; 0x494
    5b70:	strb.w	r4, [r3, #1198]	; 0x4ae
    5b74:	str	r0, [r3, #0]
    5b76:	str.w	r7, [r3, #1176]	; 0x498
    5b7a:	str.w	r6, [r3, #1184]	; 0x4a0
    5b7e:	str.w	r4, [r3, #1148]	; 0x47c
    5b82:	str.w	r4, [r3, #1152]	; 0x480
    5b86:	ldr	r2, [pc, #32]	; (5ba8 <_GLOBAL__sub_I_SD+0x54>)
    5b88:	ldr	r1, [pc, #32]	; (5bac <_GLOBAL__sub_I_SD+0x58>)
    5b8a:	mov	r0, r3
    5b8c:	pop	{r4, r5, r6, r7}
    5b8e:	b.w	cb54 <__aeabi_atexit>
    5b92:	nop
    5b94:	.word	0x1fff1a7c
    5b98:	.word	0x00011d88
    5b9c:	.word	0x00011a78
    5ba0:	.word	0x00011d30
    5ba4:	.word	0x38011001
    5ba8:	.word	0x1fff0970
    5bac:	.word	0x00005b51

00005bb0 <fmtBase10(char*, unsigned short)>:
}
*/
//------------------------------------------------------------------------------
// Format 16-bit unsigned
char* fmtBase10(char* str, uint16_t n) {
  while (n > 9) {
    5bb0:	cmp	r1, #9
    5bb2:	bls.n	5bfc <fmtBase10(char*, unsigned short)+0x4c>
// return q + (r > 9);
}
*/
//------------------------------------------------------------------------------
// Format 16-bit unsigned
char* fmtBase10(char* str, uint16_t n) {
    5bb4:	push	{r4}
#ifdef USE_STIMMER
    uint8_t tmp8, r;
    divmod10_asm16(n, r, tmp8);
#else  // USE_STIMMER
    uint16_t t = n;
    n = (n >> 1) + (n >> 2);
    5bb6:	asrs	r2, r1, #2
    5bb8:	add.w	r2, r2, r1, lsr #1
    n = n + (n >> 4);
    5bbc:	ubfx	r4, r2, #4, #16
    5bc0:	add	r2, r4
    5bc2:	uxth	r2, r2
    n = n + (n >> 8);
    // n = n + (n >> 16);  // no code for 16-bit n
    n = n >> 3;
    5bc4:	add.w	r2, r2, r2, lsr #8
    5bc8:	ubfx	r3, r2, #3, #13
    uint8_t r = t - (((n << 2) + n) << 1);
    5bcc:	uxtb	r4, r3
    5bce:	add.w	r4, r4, r4, lsl #2
    5bd2:	sub.w	r2, r1, r4, lsl #1
    5bd6:	uxtb	r2, r2
    if (r > 9) {
    5bd8:	cmp	r2, #9
    uint16_t t = n;
    n = (n >> 1) + (n >> 2);
    n = n + (n >> 4);
    n = n + (n >> 8);
    // n = n + (n >> 16);  // no code for 16-bit n
    n = n >> 3;
    5bda:	uxth	r1, r3
    uint8_t r = t - (((n << 2) + n) << 1);
    if (r > 9) {
      n++;
      r -= 10;
    5bdc:	sub.w	r3, r2, #10
    5be0:	itt	hi
    5be2:	uxtbhi	r2, r3
    n = n + (n >> 8);
    // n = n + (n >> 16);  // no code for 16-bit n
    n = n >> 3;
    uint8_t r = t - (((n << 2) + n) << 1);
    if (r > 9) {
      n++;
    5be4:	addhi	r1, #1
      r -= 10;
    }
#endif  // USE_STIMMER
    *--str = r + '0';
    5be6:	adds	r2, #48	; 0x30
}
*/
//------------------------------------------------------------------------------
// Format 16-bit unsigned
char* fmtBase10(char* str, uint16_t n) {
  while (n > 9) {
    5be8:	cmp	r1, #9
    if (r > 9) {
      n++;
      r -= 10;
    }
#endif  // USE_STIMMER
    *--str = r + '0';
    5bea:	strb.w	r2, [r0, #-1]!
}
*/
//------------------------------------------------------------------------------
// Format 16-bit unsigned
char* fmtBase10(char* str, uint16_t n) {
  while (n > 9) {
    5bee:	bhi.n	5bb6 <fmtBase10(char*, unsigned short)+0x6>
      r -= 10;
    }
#endif  // USE_STIMMER
    *--str = r + '0';
  }
  *--str = n + '0';
    5bf0:	adds	r1, #48	; 0x30
    5bf2:	strb.w	r1, [r0, #-1]!
  return str;
}
    5bf6:	ldr.w	r4, [sp], #4
    5bfa:	bx	lr
      r -= 10;
    }
#endif  // USE_STIMMER
    *--str = r + '0';
  }
  *--str = n + '0';
    5bfc:	adds	r1, #48	; 0x30
    5bfe:	strb.w	r1, [r0, #-1]!
  return str;
}
    5c02:	bx	lr

00005c04 <fmtBase10(char*, unsigned long)>:
//------------------------------------------------------------------------------
// format 32-bit unsigned
char* fmtBase10(char* str, uint32_t n) {
  while (n > 0XFFFF) {
    5c04:	cmp.w	r1, #65536	; 0x10000
    5c08:	bcc.n	5c50 <fmtBase10(char*, unsigned long)+0x4c>
  *--str = n + '0';
  return str;
}
//------------------------------------------------------------------------------
// format 32-bit unsigned
char* fmtBase10(char* str, uint32_t n) {
    5c0a:	push	{r4}
#ifdef USE_STIMMER
    uint8_t tmp8, r;
    divmod10_asm32(n, r, tmp8);
#else  //  USE_STIMMER
    uint32_t t = n;
    n = (n >> 1) + (n >> 2);
    5c0c:	lsrs	r3, r1, #2
    5c0e:	add.w	r3, r3, r1, lsr #1
    n = n + (n >> 4);
    5c12:	add.w	r3, r3, r3, lsr #4
    n = n + (n >> 8);
    5c16:	add.w	r3, r3, r3, lsr #8
    n = n + (n >> 16);
    5c1a:	add.w	r3, r3, r3, lsr #16
    n = n >> 3;
    5c1e:	lsrs	r3, r3, #3
    uint8_t r = t - (((n << 2) + n) << 1);
    5c20:	uxtb	r2, r3
    5c22:	add.w	r2, r2, r2, lsl #2
    5c26:	sub.w	r1, r1, r2, lsl #1
    5c2a:	uxtb	r2, r1
    if (r > 9) {
    5c2c:	cmp	r2, #9
      n++;
      r -= 10;
    5c2e:	sub.w	r4, r2, #10
    5c32:	itte	hi
    5c34:	uxtbhi	r2, r4
    n = n + (n >> 8);
    n = n + (n >> 16);
    n = n >> 3;
    uint8_t r = t - (((n << 2) + n) << 1);
    if (r > 9) {
      n++;
    5c36:	addhi	r1, r3, #1
    uint32_t t = n;
    n = (n >> 1) + (n >> 2);
    n = n + (n >> 4);
    n = n + (n >> 8);
    n = n + (n >> 16);
    n = n >> 3;
    5c38:	movls	r1, r3
    if (r > 9) {
      n++;
      r -= 10;
    }
#endif  // USE_STIMMER
    *--str = r + '0';
    5c3a:	adds	r2, #48	; 0x30
  return str;
}
//------------------------------------------------------------------------------
// format 32-bit unsigned
char* fmtBase10(char* str, uint32_t n) {
  while (n > 0XFFFF) {
    5c3c:	cmp.w	r1, #65536	; 0x10000
    if (r > 9) {
      n++;
      r -= 10;
    }
#endif  // USE_STIMMER
    *--str = r + '0';
    5c40:	strb.w	r2, [r0, #-1]!
  return str;
}
//------------------------------------------------------------------------------
// format 32-bit unsigned
char* fmtBase10(char* str, uint32_t n) {
  while (n > 0XFFFF) {
    5c44:	bcs.n	5c0c <fmtBase10(char*, unsigned long)+0x8>
      r -= 10;
    }
#endif  // USE_STIMMER
    *--str = r + '0';
  }
  return fmtBase10(str, (uint16_t)n);
    5c46:	uxth	r1, r1
}
    5c48:	ldr.w	r4, [sp], #4
      r -= 10;
    }
#endif  // USE_STIMMER
    *--str = r + '0';
  }
  return fmtBase10(str, (uint16_t)n);
    5c4c:	b.w	5bb0 <fmtBase10(char*, unsigned short)>
    5c50:	uxth	r1, r1
    5c52:	b.w	5bb0 <fmtBase10(char*, unsigned short)>
    5c56:	nop

00005c58 <fsFmtDate(char*, unsigned short)>:
    *--str = '0';
  }
  return str;
}
//------------------------------------------------------------------------------
char* fsFmtDate(char* str, uint16_t date) {
    5c58:	push	{r3, r4, r5, lr}
  str = fsFmtField(str, date & 31, 0);
    5c5a:	and.w	r5, r1, #31
    *--str = '0';
  }
  return str;
}
//------------------------------------------------------------------------------
char* fsFmtDate(char* str, uint16_t date) {
    5c5e:	mov	r4, r1
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
    5c60:	mov	r1, r5
    5c62:	bl	5bb0 <fmtBase10(char*, unsigned short)>
  if (n < 10) {
    5c66:	cmp	r5, #9
    5c68:	bhi.n	5c72 <fsFmtDate(char*, unsigned short)+0x1a>
    *--str = '0';
    5c6a:	movs	r3, #48	; 0x30
    5c6c:	strb.w	r3, [r0, #-1]
    5c70:	subs	r0, #1
  return str;
}
//------------------------------------------------------------------------------
char* fsFmtDate(char* str, uint16_t date) {
  str = fsFmtField(str, date & 31, 0);
  date >>= 5;
    5c72:	asrs	r4, r4, #5
  str = fsFmtField(str, date & 15, '-');
    5c74:	and.w	r5, r4, #15
  }
}  // namespace FsDateTime
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
    5c78:	movs	r3, #45	; 0x2d
    5c7a:	strb.w	r3, [r0, #-1]
  }
  str = fmtBase10(str, n);
    5c7e:	mov	r1, r5
    5c80:	subs	r0, #1
    5c82:	bl	5bb0 <fmtBase10(char*, unsigned short)>
  if (n < 10) {
    5c86:	cmp	r5, #9
    5c88:	bhi.n	5c92 <fsFmtDate(char*, unsigned short)+0x3a>
    *--str = '0';
    5c8a:	movs	r3, #48	; 0x30
    5c8c:	strb.w	r3, [r0, #-1]
    5c90:	subs	r0, #1
  }
}  // namespace FsDateTime
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
    5c92:	movs	r3, #45	; 0x2d
  }
  str = fmtBase10(str, n);
    5c94:	asrs	r1, r4, #4
  }
}  // namespace FsDateTime
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
    5c96:	strb.w	r3, [r0, #-1]
  }
  str = fmtBase10(str, n);
    5c9a:	addw	r1, r1, #1980	; 0x7bc
    5c9e:	subs	r0, #1
  str = fsFmtField(str, date & 31, 0);
  date >>= 5;
  str = fsFmtField(str, date & 15, '-');
  date >>= 4;
  return fsFmtField(str, 1980 + date, '-');
}
    5ca0:	ldmia.w	sp!, {r3, r4, r5, lr}
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
    5ca4:	b.w	5bb0 <fmtBase10(char*, unsigned short)>

00005ca8 <fsFmtTime(char*, unsigned short)>:
  str = fsFmtField(str, date & 15, '-');
  date >>= 4;
  return fsFmtField(str, 1980 + date, '-');
}
//------------------------------------------------------------------------------
char* fsFmtTime(char* str, uint16_t time) {
    5ca8:	push	{r3, r4, r5, lr}
  time >>= 5;
    5caa:	lsrs	r4, r1, #5
  str = fsFmtField(str, time & 63, 0);
    5cac:	and.w	r5, r4, #63	; 0x3f
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
    5cb0:	mov	r1, r5
    5cb2:	bl	5bb0 <fmtBase10(char*, unsigned short)>
  if (n < 10) {
    5cb6:	cmp	r5, #9
    5cb8:	bhi.n	5cc2 <fsFmtTime(char*, unsigned short)+0x1a>
    *--str = '0';
    5cba:	movs	r3, #48	; 0x30
    5cbc:	strb.w	r3, [r0, #-1]
    5cc0:	subs	r0, #1
    5cc2:	asrs	r4, r4, #6
  }
}  // namespace FsDateTime
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
    5cc4:	movs	r3, #58	; 0x3a
    5cc6:	strb.w	r3, [r0, #-1]
  }
  str = fmtBase10(str, n);
    5cca:	mov	r1, r4
    5ccc:	subs	r0, #1
    5cce:	bl	5bb0 <fmtBase10(char*, unsigned short)>
  if (n < 10) {
    5cd2:	cmp	r4, #9
    5cd4:	bgt.n	5cde <fsFmtTime(char*, unsigned short)+0x36>
    *--str = '0';
    5cd6:	movs	r3, #48	; 0x30
    5cd8:	strb.w	r3, [r0, #-1]
    5cdc:	subs	r0, #1
//------------------------------------------------------------------------------
char* fsFmtTime(char* str, uint16_t time) {
  time >>= 5;
  str = fsFmtField(str, time & 63, 0);
  return fsFmtField(str, time >> 6, ':');
}
    5cde:	pop	{r3, r4, r5, pc}

00005ce0 <fsPrintDateTime(Print*, unsigned short, unsigned short)>:
    } while (str > buf);
  }
  return pr->write(reinterpret_cast<uint8_t*>(str), buf + sizeof(buf) - str);
}
//------------------------------------------------------------------------------
size_t fsPrintDateTime(print_t* pr, uint16_t date, uint16_t time) {
    5ce0:	push	{r4, r5, lr}
    5ce2:	mov	r4, r0
    5ce4:	sub	sp, #20
  // Allow YYYY-MM-DD hh:mm
  char buf[sizeof("YYYY-MM-DD hh:mm") -1];
  char* str = buf + sizeof(buf);
  if (date) {
    5ce6:	cbnz	r1, 5d06 <fsPrintDateTime(Print*, unsigned short, unsigned short)+0x26>
    5ce8:	add	r1, sp, #16
    5cea:	mov	r2, sp
    str = fsFmtTime(str, time);
    *--str = ' ';
    str = fsFmtDate(str, date);
  } else {
    do {
      *--str = ' ';
    5cec:	movs	r3, #32
    5cee:	strb.w	r3, [r1, #-1]!
    } while (str > buf);
    5cf2:	cmp	r1, r2
    5cf4:	bne.n	5cee <fsPrintDateTime(Print*, unsigned short, unsigned short)+0xe>
  }
  return pr->write(reinterpret_cast<uint8_t*>(str), buf + sizeof(buf) - str);
    5cf6:	ldr	r3, [r4, #0]
    5cf8:	add	r2, sp, #16
    5cfa:	mov	r0, r4
    5cfc:	ldr	r3, [r3, #4]
    5cfe:	subs	r2, r2, r1
    5d00:	blx	r3
}
    5d02:	add	sp, #20
    5d04:	pop	{r4, r5, pc}
    5d06:	mov	r5, r1
size_t fsPrintDateTime(print_t* pr, uint16_t date, uint16_t time) {
  // Allow YYYY-MM-DD hh:mm
  char buf[sizeof("YYYY-MM-DD hh:mm") -1];
  char* str = buf + sizeof(buf);
  if (date) {
    str = fsFmtTime(str, time);
    5d08:	add	r0, sp, #16
    5d0a:	mov	r1, r2
    5d0c:	bl	5ca8 <fsFmtTime(char*, unsigned short)>
    *--str = ' ';
    5d10:	movs	r3, #32
    str = fsFmtDate(str, date);
    5d12:	mov	r1, r5
  // Allow YYYY-MM-DD hh:mm
  char buf[sizeof("YYYY-MM-DD hh:mm") -1];
  char* str = buf + sizeof(buf);
  if (date) {
    str = fsFmtTime(str, time);
    *--str = ' ';
    5d14:	strb.w	r3, [r0, #-1]
    str = fsFmtDate(str, date);
    5d18:	subs	r0, #1
    5d1a:	bl	5c58 <fsFmtDate(char*, unsigned short)>
    5d1e:	mov	r1, r0
    5d20:	b.n	5cf6 <fsPrintDateTime(Print*, unsigned short, unsigned short)+0x16>
    5d22:	nop

00005d24 <fsPrintDateTime(Print*, unsigned long)>:
  }
  return pr->write(reinterpret_cast<uint8_t*>(str), buf + sizeof(buf) - str);
}
//------------------------------------------------------------------------------
size_t fsPrintDateTime(print_t* pr, uint32_t dateTime) {
  return fsPrintDateTime(pr, dateTime >> 16, dateTime & 0XFFFF);
    5d24:	uxth	r2, r1
    5d26:	lsrs	r1, r1, #16
    5d28:	b.w	5ce0 <fsPrintDateTime(Print*, unsigned short, unsigned short)>

00005d2c <ExFatFile::close()>:
#include "../common/DebugMacros.h"
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
    5d2c:	push	{r4, lr}
    5d2e:	mov	r4, r0
  bool rtn = sync();
    5d30:	bl	720c <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    5d34:	movs	r3, #0
    5d36:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    5d3a:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    5d3e:	pop	{r4, pc}

00005d40 <ExFatFile::getName(char*, unsigned int)>:
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
    5d40:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    5d44:	add.w	r3, r0, #36	; 0x24
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
    5d48:	mov	r6, r0
    5d4a:	mov	r8, r1
    5d4c:	mov	r5, r2
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    5d4e:	ldmia.w	r3, {r0, r1, r2}
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
    5d52:	sub	sp, #20
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
  size_t n = 0;
  if (!isOpen()) {
    5d54:	ldrb.w	r3, [r6, #49]	; 0x31
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    5d58:	add.w	r9, sp, #4
    5d5c:	stmia.w	r9, {r0, r1, r2}
  size_t n = 0;
  if (!isOpen()) {
    5d60:	cmp	r3, #0
    5d62:	beq.n	5dd6 <ExFatFile::getName(char*, unsigned int)+0x96>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    5d64:	ldrb.w	r3, [r6, #48]	; 0x30
    5d68:	cmp	r3, #1
    5d6a:	bls.n	5de2 <ExFatFile::getName(char*, unsigned int)+0xa2>
    5d6c:	movs	r7, #1
    5d6e:	movs	r4, #0
    if (m_vol->dirSeek(&pos, is == 1 ? 64: 32) != 1) {
    5d70:	cmp	r7, #1
    5d72:	ite	eq
    5d74:	moveq	r2, #64	; 0x40
    5d76:	movne	r2, #32
    5d78:	mov	r1, r9
    5d7a:	ldr	r0, [r6, #32]
    5d7c:	bl	6cc4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    5d80:	cmp	r0, #1
    5d82:	bne.n	5dd6 <ExFatFile::getName(char*, unsigned int)+0x96>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dn = reinterpret_cast<DirName_t*>
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    5d84:	movs	r2, #0
    5d86:	mov	r1, r9
    5d88:	ldr	r0, [r6, #32]
    5d8a:	bl	6c90 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    5d8e:	cbz	r0, 5dd6 <ExFatFile::getName(char*, unsigned int)+0x96>
    5d90:	ldrb	r3, [r0, #0]
    5d92:	cmp	r3, #193	; 0xc1
    5d94:	bne.n	5dd6 <ExFatFile::getName(char*, unsigned int)+0x96>
    5d96:	add.w	r1, r0, #30
    5d9a:	add.w	r2, r8, r4
    5d9e:	mov	r3, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
      if ((n + 1) >= length) {
    5da0:	adds	r4, #1
    5da2:	cmp	r4, r5
    5da4:	bcs.n	5dc8 <ExFatFile::getName(char*, unsigned int)+0x88>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    5da6:	ldrh.w	r3, [r0, #2]!
        goto done;
      }
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    5daa:	cmp	r3, #126	; 0x7e
    5dac:	ite	ls
    5dae:	uxtbls	r3, r3
    5db0:	movhi	r3, #63	; 0x3f
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    5db2:	cmp	r0, r1
      if ((n + 1) >= length) {
        goto done;
      }
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    5db4:	strb.w	r3, [r2], #1
    5db8:	mov	r3, r4
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    5dba:	bne.n	5da0 <ExFatFile::getName(char*, unsigned int)+0x60>
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    5dbc:	adds	r7, #1
    5dbe:	ldrb.w	r2, [r6, #48]	; 0x30
    5dc2:	uxtb	r7, r7
    5dc4:	cmp	r2, r7
    5dc6:	bhi.n	5d70 <ExFatFile::getName(char*, unsigned int)+0x30>
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    5dc8:	movs	r2, #0
  return n;
    5dca:	mov	r0, r3
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    5dcc:	strb.w	r2, [r8, r3]
  return n;

 fail:
  *name = 0;
  return 0;
}
    5dd0:	add	sp, #20
    5dd2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
    5dd6:	movs	r0, #0
    5dd8:	strb.w	r0, [r8]
  return 0;
}
    5ddc:	add	sp, #20
    5dde:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    5de2:	movs	r3, #0
    5de4:	b.n	5dc8 <ExFatFile::getName(char*, unsigned int)+0x88>
    5de6:	nop

00005de8 <ExFatFile::openRoot(ExFatVolume*)>:
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    5de8:	ldrb.w	r2, [r0, #49]	; 0x31
    5dec:	cbz	r2, 5df2 <ExFatFile::openRoot(ExFatVolume*)+0xa>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    5dee:	movs	r0, #0
    5df0:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    5df2:	push	{r3, r4, r5, lr}
    5df4:	mov	r4, r0
    5df6:	mov	r5, r1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    5df8:	mov	r1, r2
    5dfa:	movs	r2, #56	; 0x38
    5dfc:	bl	df8c <memset>
  m_attributes = FILE_ATTR_ROOT;
    5e00:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    5e02:	movs	r0, #1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    5e04:	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    5e08:	strb.w	r0, [r4, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    5e0c:	str	r5, [r4, #32]
    5e0e:	pop	{r3, r4, r5, pc}

00005e10 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const ExChar_t* path,
                            ExName_t* fname, const ExChar_t** ptr) {
    5e10:	push	{r4, r5, r6, r7, lr}
  ExChar_t c;
  int end;
  int len = 0;

  // Skip leading spaces.
  while (*path == ' ') {
    5e12:	ldrb	r0, [r1, #0]
    5e14:	cmp	r0, #32
    5e16:	bne.n	5e20 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x10>
    5e18:	ldrb.w	r0, [r1, #1]!
    5e1c:	cmp	r0, #32
    5e1e:	beq.n	5e18 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8>
    path++;
  }
  fname->lfn = path;
    5e20:	str	r1, [r2, #4]

  for (len = 0; ; len++) {
    c = path[len];
    5e22:	ldrb	r0, [r1, #0]
    if (c == 0 || isDirSeparator(c)) {
    5e24:	cmp	r0, #0
    5e26:	beq.n	5ecc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xbc>
    5e28:	cmp	r0, #47	; 0x2f
    5e2a:	beq.n	5e84 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    5e2c:	cmp	r0, #92	; 0x5c
    5e2e:	beq.n	5e72 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    5e30:	sub.w	r4, r0, #34	; 0x22
    5e34:	uxtb	r4, r4
    5e36:	cmp	r4, #29
    5e38:	bls.n	5e76 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x66>
    5e3a:	ldr.w	lr, [pc, #148]	; 5ed0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>
    5e3e:	adds	r6, r1, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    5e40:	movs	r4, #0
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    5e42:	cmp	r0, #124	; 0x7c
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    5e44:	sub.w	r5, r0, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    5e48:	mov	r7, r6
    5e4a:	beq.n	5e72 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    5e4c:	cmp	r5, #94	; 0x5e
    5e4e:	bhi.n	5e72 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    5e50:	ldrb.w	r0, [r6], #1
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    5e54:	sub.w	r5, r0, #34	; 0x22
    5e58:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    5e5a:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    5e5c:	cbz	r0, 5ebe <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xae>
    5e5e:	cmp	r0, #47	; 0x2f
    5e60:	beq.n	5e86 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
    5e62:	cmp	r0, #92	; 0x5c
    5e64:	lsr.w	r7, lr, r5
    5e68:	beq.n	5e72 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    5e6a:	cmp	r5, #29
    5e6c:	bhi.n	5e42 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
    5e6e:	lsls	r5, r7, #31
    5e70:	bpl.n	5e42 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    5e72:	movs	r0, #0
    5e74:	pop	{r4, r5, r6, r7, pc}
    5e76:	ldr	r5, [pc, #88]	; (5ed0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>)
    5e78:	lsr.w	r4, r5, r4
    5e7c:	lsls	r6, r4, #31
    5e7e:	bpl.n	5e3a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2a>
    5e80:	movs	r0, #0
    5e82:	pop	{r4, r5, r6, r7, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    5e84:	movs	r4, #0
    5e86:	adds	r7, r1, r4
    5e88:	mov	r6, r7
    5e8a:	mov	r5, r4
    5e8c:	movs	r0, #47	; 0x2f
    5e8e:	b.n	5e96 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x86>
    5e90:	ldrb.w	r0, [r6, #1]!
    if (!lfnLegalChar(c)) {
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    5e94:	adds	r5, #1
    5e96:	cmp	r0, #32
    5e98:	beq.n	5e90 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
    5e9a:	cmp	r0, #47	; 0x2f
    5e9c:	beq.n	5e90 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
  *ptr = &path[end];
    5e9e:	add	r1, r5
    5ea0:	str	r1, [r3, #0]

  // Back over spaces and dots.
  while (len) {
    5ea2:	cbz	r4, 5eb6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    5ea4:	mov	r1, r7
    c = path[len - 1];
    5ea6:	ldrb.w	r3, [r1, #-1]!
    if (c != '.' && c != ' ') {
    5eaa:	cmp	r3, #46	; 0x2e
    5eac:	beq.n	5eb2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa2>
    5eae:	cmp	r3, #32
    5eb0:	bne.n	5ec4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xb4>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    5eb2:	subs	r4, #1
    5eb4:	bne.n	5ea6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x96>
    5eb6:	mov	r0, r4
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    return false;
  }
  fname->len = len;
    5eb8:	str	r0, [r2, #0]
  return true;
    5eba:	movs	r0, #1
    5ebc:	pop	{r4, r5, r6, r7, pc}
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    5ebe:	str	r7, [r3, #0]
    5ec0:	adds	r7, r1, r4
    5ec2:	b.n	5ea4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x94>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    5ec4:	cmp	r4, #255	; 0xff
    5ec6:	ble.n	5eb6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    5ec8:	movs	r0, #0
    5eca:	pop	{r4, r5, r6, r7, pc}
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    5ecc:	str	r1, [r3, #0]
    5ece:	b.n	5eb8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa8>
    5ed0:	.word	0x35000101

00005ed4 <ExFatFile::printName(Print*)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::printName(print_t* pr) {
    5ed4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    5ed8:	add.w	r3, r0, #36	; 0x24
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::printName(print_t* pr) {
    5edc:	mov	r6, r0
    5ede:	mov	r8, r1
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    5ee0:	ldmia.w	r3, {r0, r1, r2}
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::printName(print_t* pr) {
    5ee4:	sub	sp, #36	; 0x24
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
  size_t n = 0;
  uint8_t in;
  uint8_t buf[15];
  if (!isOpen()) {
    5ee6:	ldrb.w	r3, [r6, #49]	; 0x31
  return c;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::printName(print_t* pr) {
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    5eea:	add	r7, sp, #4
    5eec:	stmia.w	r7, {r0, r1, r2}
  size_t n = 0;
  uint8_t in;
  uint8_t buf[15];
  if (!isOpen()) {
    5ef0:	cmp	r3, #0
    5ef2:	beq.n	5f7a <ExFatFile::printName(Print*)+0xa6>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    5ef4:	ldrb.w	r3, [r6, #48]	; 0x30
    5ef8:	cmp	r3, #1
    5efa:	bls.n	5f7a <ExFatFile::printName(Print*)+0xa6>
    5efc:	movs	r5, #1
    5efe:	mov.w	r9, #0
    if (m_vol->dirSeek(&pos, is == 1 ? 64: 32) != 1) {
    5f02:	cmp	r5, #1
    5f04:	ite	ne
    5f06:	movne	r2, #32
    5f08:	moveq	r2, #64	; 0x40
    5f0a:	mov	r1, r7
    5f0c:	ldr	r0, [r6, #32]
    5f0e:	bl	6cc4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    5f12:	cmp	r0, #1
    5f14:	bne.n	5f7a <ExFatFile::printName(Print*)+0xa6>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dn = reinterpret_cast<DirName_t*>
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    5f16:	movs	r2, #0
    5f18:	mov	r1, r7
    5f1a:	ldr	r0, [r6, #32]
    5f1c:	bl	6c90 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    5f20:	cbz	r0, 5f7a <ExFatFile::printName(Print*)+0xa6>
    5f22:	ldrb	r3, [r0, #0]
    5f24:	cmp	r3, #193	; 0xc1
    5f26:	bne.n	5f7a <ExFatFile::printName(Print*)+0xa6>
    5f28:	add.w	r1, sp, #15
    5f2c:	add.w	lr, r9, #15
    5f30:	mov	r4, r9
    5f32:	ldrh.w	r3, [r0, #2]!
    5f36:	rsb	r2, r9, r4
    5f3a:	uxtb	r2, r2
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (in = 0; in < 15; in++) {
      uint16_t c = getLe16(dn->unicode + 2*in);
      if (!c) {
    5f3c:	cbz	r3, 5f76 <ExFatFile::printName(Print*)+0xa2>
        break;;
      }
      buf[in] = c < 0X7f ? c : '?';
    5f3e:	cmp	r3, #126	; 0x7e
      n++;
    5f40:	add.w	r4, r4, #1
    for (in = 0; in < 15; in++) {
      uint16_t c = getLe16(dn->unicode + 2*in);
      if (!c) {
        break;;
      }
      buf[in] = c < 0X7f ? c : '?';
    5f44:	ite	ls
    5f46:	uxtbls	r3, r3
    5f48:	movhi	r3, #63	; 0x3f
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (in = 0; in < 15; in++) {
    5f4a:	cmp	r4, lr
      uint16_t c = getLe16(dn->unicode + 2*in);
      if (!c) {
        break;;
      }
      buf[in] = c < 0X7f ? c : '?';
    5f4c:	strb.w	r3, [r1, #1]!
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (in = 0; in < 15; in++) {
    5f50:	bne.n	5f32 <ExFatFile::printName(Print*)+0x5e>
    5f52:	mov	r9, r4
    5f54:	movs	r2, #15
        break;;
      }
      buf[in] = c < 0X7f ? c : '?';
      n++;
    }
    pr->write(buf, in);
    5f56:	ldr.w	r3, [r8]
    5f5a:	add	r1, sp, #16
    5f5c:	ldr	r3, [r3, #4]
    5f5e:	mov	r0, r8
    5f60:	blx	r3
  uint8_t buf[15];
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    5f62:	adds	r5, #1
    5f64:	ldrb.w	r3, [r6, #48]	; 0x30
    5f68:	uxtb	r5, r5
    5f6a:	cmp	r3, r5
    5f6c:	bhi.n	5f02 <ExFatFile::printName(Print*)+0x2e>
    5f6e:	mov	r0, r4
  }
  return n;

 fail:
  return 0;
}
    5f70:	add	sp, #36	; 0x24
    5f72:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (in = 0; in < 15; in++) {
      uint16_t c = getLe16(dn->unicode + 2*in);
      if (!c) {
    5f76:	mov	r9, r4
    5f78:	b.n	5f56 <ExFatFile::printName(Print*)+0x82>
    pr->write(buf, in);
  }
  return n;

 fail:
  return 0;
    5f7a:	movs	r0, #0
}
    5f7c:	add	sp, #36	; 0x24
    5f7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5f82:	nop

00005f84 <ExFatFile::read(void*, unsigned int)>:
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    5f84:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5f88:	ldrb.w	r3, [r0, #51]	; 0x33
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    5f8c:	lsls	r5, r3, #31

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    5f8e:	sub	sp, #12
    5f90:	mov	r4, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    5f92:	bpl.w	60ee <ExFatFile::read(void*, unsigned int)+0x16a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    5f96:	lsls	r0, r3, #25
    5f98:	mov	r5, r1
    5f9a:	mov	r6, r2
    5f9c:	bpl.w	6104 <ExFatFile::read(void*, unsigned int)+0x180>
    if ((m_curPosition + count) > m_validLength) {
    5fa0:	ldrd	r0, r1, [r4]
    5fa4:	ldrd	r2, r3, [r4, #16]
    5fa8:	adds.w	r8, r0, r6
    5fac:	adc.w	r9, r1, #0
    5fb0:	cmp	r3, r9
    5fb2:	it	eq
    5fb4:	cmpeq	r2, r8
    5fb6:	bcc.w	6110 <ExFatFile::read(void*, unsigned int)+0x18c>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    5fba:	cmp	r6, #0
    5fbc:	beq.w	6114 <ExFatFile::read(void*, unsigned int)+0x190>
    5fc0:	mov	r9, r4
    5fc2:	ldrd	r2, r3, [r9], #24
    5fc6:	mov	r8, r6
    5fc8:	b.n	606a <ExFatFile::read(void*, unsigned int)+0xe6>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
    5fca:	orrs	r3, r2
    5fcc:	bne.n	60a6 <ExFatFile::read(void*, unsigned int)+0x122>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    5fce:	ldrb.w	r3, [r4, #49]	; 0x31
    5fd2:	lsls	r2, r3, #25
    5fd4:	ite	mi
    5fd6:	ldrmi.w	r1, [r0, #1068]	; 0x42c
    5fda:	ldrpl	r1, [r4, #28]
      } else if (isContiguous()) {
        m_curCluster++;
    5fdc:	str	r1, [r4, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    5fde:	ldrb.w	ip, [r0, #1085]	; 0x43d
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    5fe2:	ldr.w	r2, [r0, #1060]	; 0x424
    5fe6:	subs	r1, #2
    5fe8:	lsrs	r7, r7, #9
    5fea:	lsl.w	lr, r1, ip
    5fee:	adds	r1, r7, r2
    5ff0:	add	r1, lr
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
    5ff2:	cmp.w	sl, #0
    5ff6:	bne.n	607e <ExFatFile::read(void*, unsigned int)+0xfa>
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    5ff8:	cmp.w	r8, #512	; 0x200
    5ffc:	bcc.n	607e <ExFatFile::read(void*, unsigned int)+0xfa>
    5ffe:	ldr.w	r2, [r0, #532]	; 0x214
                          || sector == m_vol->dataCacheSector()) {
    6002:	cmp	r1, r2
    6004:	beq.n	607e <ExFatFile::read(void*, unsigned int)+0xfa>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    6006:	cmp.w	r8, #1024	; 0x400
    600a:	bcc.n	60b4 <ExFatFile::read(void*, unsigned int)+0x130>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    600c:	movs	r3, #1
    600e:	lsl.w	ip, r3, ip
    6012:	rsb	r7, r7, ip
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    6016:	mov.w	r3, r8, lsr #9
    601a:	cmp	r7, r3
    601c:	it	cs
    601e:	movcs	r7, r3
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    6020:	cmp	r1, r2
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    6022:	mov.w	fp, r7, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    6026:	bhi.n	6040 <ExFatFile::read(void*, unsigned int)+0xbc>
    6028:	adds	r3, r7, r1
    602a:	cmp	r3, r2
    602c:	bls.n	6040 <ExFatFile::read(void*, unsigned int)+0xbc>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    602e:	add.w	r0, r0, #524	; 0x20c
    6032:	str	r1, [sp, #4]
    6034:	bl	6a08 <FsCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->dataCacheSync()) {
    6038:	cmp	r0, #0
    603a:	beq.n	60ee <ExFatFile::read(void*, unsigned int)+0x16a>
    603c:	ldr	r0, [r4, #32]
    603e:	ldr	r1, [sp, #4]
    6040:	ldr.w	r0, [r0, #1080]	; 0x438
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
    6044:	ldr	r2, [r0, #0]
    6046:	mov	r3, r7
    6048:	ldr	r7, [r2, #12]
    604a:	mov	r2, r5
    604c:	blx	r7
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    604e:	cmp	r0, #0
    6050:	beq.n	60ee <ExFatFile::read(void*, unsigned int)+0x16a>
    6052:	mov	r0, fp
    6054:	movs	r1, #0
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    6056:	ldrd	r2, r3, [r4]
    605a:	adds	r2, r2, r0
    605c:	adcs	r3, r1
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    605e:	subs.w	r8, r8, fp
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    6062:	add	r5, fp
    m_curPosition += n;
    6064:	strd	r2, r3, [r4]
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    6068:	beq.n	6114 <ExFatFile::read(void*, unsigned int)+0x190>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    606a:	ldr	r0, [r4, #32]
    606c:	ldr.w	r7, [r0, #1072]	; 0x430
    6070:	ands	r7, r2
    sectorOffset = clusterOffset & m_vol->sectorMask();
    6072:	ubfx	sl, r7, #0, #9
    if (clusterOffset == 0) {
    6076:	cmp	r7, #0
    6078:	beq.n	5fca <ExFatFile::read(void*, unsigned int)+0x46>
    607a:	ldr	r1, [r4, #24]
    607c:	b.n	5fde <ExFatFile::read(void*, unsigned int)+0x5a>
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    607e:	add.w	r0, r0, #524	; 0x20c
    6082:	movs	r2, #0
    6084:	bl	6948 <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
    6088:	cbz	r0, 60ee <ExFatFile::read(void*, unsigned int)+0x16a>
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
      n = m_vol->bytesPerSector() - sectorOffset;
    608a:	rsb	fp, sl, #512	; 0x200
    608e:	cmp	fp, r8
    6090:	it	cs
    6092:	movcs	fp, r8
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
    6094:	add.w	r1, r0, sl
    6098:	mov	r2, fp
    609a:	mov	r0, r5
    609c:	bl	b0e0 <memcpy>
    60a0:	mov	r0, fp
    60a2:	movs	r1, #0
    60a4:	b.n	6056 <ExFatFile::read(void*, unsigned int)+0xd2>
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
    60a6:	ldrb.w	r3, [r4, #51]	; 0x33
    60aa:	lsls	r3, r3, #25
    60ac:	bpl.n	60ce <ExFatFile::read(void*, unsigned int)+0x14a>
        m_curCluster++;
    60ae:	ldr	r1, [r4, #24]
    60b0:	adds	r1, #1
    60b2:	b.n	5fdc <ExFatFile::read(void*, unsigned int)+0x58>
    60b4:	ldr.w	r0, [r0, #1080]	; 0x438
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    60b8:	ldr	r3, [r0, #0]
    60ba:	mov	r2, r5
    60bc:	ldr	r3, [r3, #8]
    60be:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    60c0:	cbz	r0, 60ee <ExFatFile::read(void*, unsigned int)+0x16a>
    60c2:	mov.w	r0, #512	; 0x200
    60c6:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    60c8:	mov.w	fp, #512	; 0x200
    60cc:	b.n	6056 <ExFatFile::read(void*, unsigned int)+0xd2>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    60ce:	mov	r2, r9
    60d0:	ldr	r1, [r4, #24]
    60d2:	bl	6d1c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    60d6:	sxtb	r0, r0
        if (fg < 0) {
    60d8:	cmp	r0, #0
    60da:	blt.n	60ee <ExFatFile::read(void*, unsigned int)+0x16a>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
    60dc:	beq.n	60e4 <ExFatFile::read(void*, unsigned int)+0x160>
    60de:	ldr	r0, [r4, #32]
    60e0:	ldr	r1, [r4, #24]
    60e2:	b.n	5fde <ExFatFile::read(void*, unsigned int)+0x5a>
          // EOF if directory.
          if (isDir()) {
    60e4:	ldrb.w	r3, [r4, #49]	; 0x31
    60e8:	tst.w	r3, #80	; 0x50
    60ec:	bne.n	6118 <ExFatFile::read(void*, unsigned int)+0x194>
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    60ee:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    60f2:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    60f6:	orr.w	r3, r3, #2
    60fa:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
}
    60fe:	add	sp, #12
    6100:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    6104:	ldrb.w	r3, [r4, #49]	; 0x31
    6108:	lsls	r1, r3, #28
    610a:	bmi.w	5fa0 <ExFatFile::read(void*, unsigned int)+0x1c>
    610e:	b.n	5fba <ExFatFile::read(void*, unsigned int)+0x36>
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    6110:	subs	r6, r2, r0
    6112:	b.n	5fba <ExFatFile::read(void*, unsigned int)+0x36>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    6114:	mov.w	r8, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    6118:	rsb	r0, r8, r6

fail:
  m_error |= READ_ERROR;
  return -1;
}
    611c:	add	sp, #12
    611e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6122:	nop

00006124 <ExFatFile::peek()>:
  }
  fname->len = len;
  return true;
}
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
    6124:	push	{r4, r5, r6, r7, lr}
    6126:	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    6128:	movs	r2, #1
    612a:	add.w	r1, sp, #7
    612e:	mov	r4, r0
  uint64_t curPosition = m_curPosition;
    6130:	ldrd	r6, r7, [r0]
  uint32_t curCluster = m_curCluster;
    6134:	ldr	r5, [r0, #24]
    6136:	bl	5f84 <ExFatFile::read(void*, unsigned int)>
    613a:	cmp	r0, #1
    613c:	it	eq
    613e:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
  m_curCluster = curCluster;
    6142:	str	r5, [r4, #24]
    6144:	it	ne
    6146:	movne.w	r0, #4294967295
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
    614a:	strd	r6, r7, [r4]
  m_curCluster = curCluster;
  return c;
}
    614e:	add	sp, #12
    6150:	pop	{r4, r5, r6, r7, pc}
    6152:	nop

00006154 <ExFatFile::seekSet(unsigned long long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    6154:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6158:	ldrb.w	lr, [r0, #49]	; 0x31
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    615c:	ldr	r5, [r0, #24]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    615e:	sub	sp, #12
    6160:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    6162:	cmp.w	lr, #0
    6166:	beq.n	61a0 <ExFatFile::seekSet(unsigned long long)+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    6168:	ldrd	r0, r1, [r0]
    616c:	cmp	r1, r3
    616e:	it	eq
    6170:	cmpeq	r0, r2
    6172:	mov	r6, r2
    6174:	mov	r7, r3
    6176:	beq.n	61f0 <ExFatFile::seekSet(unsigned long long)+0x9c>
    return true;
  }
  if (pos == 0) {
    6178:	orrs.w	r3, r6, r7
    617c:	bne.n	618e <ExFatFile::seekSet(unsigned long long)+0x3a>
    // set position to start of file
    m_curCluster = 0;
    617e:	movs	r3, #0
    6180:	str	r3, [r4, #24]
    }
  }

done:
  m_curPosition = pos;
  return true;
    6182:	movs	r0, #1
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    6184:	strd	r6, r7, [r4]
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    6188:	add	sp, #12
    618a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    618e:	tst.w	lr, #8
    6192:	beq.n	61aa <ExFatFile::seekSet(unsigned long long)+0x56>
    if (pos > m_validLength) {
    6194:	ldrd	r2, r3, [r4, #16]
    6198:	cmp	r3, r7
    619a:	it	eq
    619c:	cmpeq	r2, r6
    619e:	bcs.n	61aa <ExFatFile::seekSet(unsigned long long)+0x56>
done:
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
    61a0:	str	r5, [r4, #24]
  return false;
    61a2:	movs	r0, #0
}
    61a4:	add	sp, #12
    61a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    61aa:	ldr	r3, [r4, #32]
    61ac:	str	r3, [sp, #4]
    61ae:	ldrb.w	ip, [r3, #1085]	; 0x43d
  if (isContiguous()) {
    61b2:	ldrb.w	sl, [r4, #51]	; 0x33
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    61b6:	add.w	ip, ip, #9
    61ba:	uxtb.w	ip, ip
    61be:	adds.w	r2, r6, #4294967295
    61c2:	adc.w	r3, r7, #4294967295
    61c6:	rsb	r8, ip, #32
    61ca:	lsl.w	fp, r3, r8
    61ce:	lsr.w	r2, r2, ip
    61d2:	orr.w	r2, r2, fp
    61d6:	sub.w	fp, ip, #32
    61da:	lsr.w	r3, r3, fp
  if (isContiguous()) {
    61de:	tst.w	sl, #64	; 0x40
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    61e2:	orr.w	r2, r2, r3
  if (isContiguous()) {
    61e6:	beq.n	61f4 <ExFatFile::seekSet(unsigned long long)+0xa0>
    m_curCluster = m_firstCluster + nNew;
    61e8:	ldr	r3, [r4, #28]
    61ea:	add	r2, r3
    61ec:	str	r2, [r4, #24]
    goto done;
    61ee:	b.n	6182 <ExFatFile::seekSet(unsigned long long)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    61f0:	movs	r0, #1
    61f2:	b.n	61a4 <ExFatFile::seekSet(unsigned long long)+0x50>
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    61f4:	adds.w	r9, r0, #4294967295
    61f8:	adc.w	sl, r1, #4294967295
    61fc:	lsr.w	ip, r9, ip
    6200:	lsl.w	r8, sl, r8
    6204:	orr.w	ip, ip, r8
    6208:	lsr.w	fp, sl, fp
    620c:	orr.w	ip, ip, fp
  if (nNew < nCur || m_curPosition == 0) {
    6210:	cmp	r2, ip
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    6212:	mov	r3, sl
  if (nNew < nCur || m_curPosition == 0) {
    6214:	bcs.n	6246 <ExFatFile::seekSet(unsigned long long)+0xf2>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    6216:	tst.w	lr, #64	; 0x40
    621a:	itet	ne
    621c:	ldrne	r3, [sp, #4]
    621e:	ldreq	r3, [r4, #28]
    6220:	ldrne.w	r3, [r3, #1068]	; 0x42c
    6224:	str	r3, [r4, #24]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    6226:	mov	r8, r2
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    6228:	add.w	r9, r4, #24
    622c:	mov	r2, r9
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    622e:	cmp.w	r8, #0
    6232:	beq.n	6182 <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    6234:	ldr	r1, [r4, #24]
    6236:	ldr	r0, [r4, #32]
    6238:	bl	6d1c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    623c:	add.w	r8, r8, #4294967295
    6240:	cmp	r0, #0
    6242:	bne.n	622c <ExFatFile::seekSet(unsigned long long)+0xd8>
    6244:	b.n	61a0 <ExFatFile::seekSet(unsigned long long)+0x4c>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
  if (nNew < nCur || m_curPosition == 0) {
    6246:	orrs.w	r3, r0, r1
    624a:	beq.n	6216 <ExFatFile::seekSet(unsigned long long)+0xc2>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    624c:	rsb	r2, ip, r2
    6250:	b.n	6226 <ExFatFile::seekSet(unsigned long long)+0xd2>
    6252:	nop

00006254 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    6254:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6258:	mov	r6, r1
    625a:	sub	sp, #76	; 0x4c
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    625c:	ldrb.w	r1, [r0, #49]	; 0x31
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    6260:	str	r2, [sp, #0]
    6262:	mov	r5, r0
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    6264:	cbnz	r1, 6272 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    6266:	mov	sl, r3
    6268:	ldrb.w	r3, [r6, #49]	; 0x31
    626c:	tst.w	r3, #80	; 0x50
    6270:	bne.n	6282 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2e>
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
    6272:	movs	r0, #0
    6274:	strb.w	r0, [r5, #49]	; 0x31
  m_flags = 0;
    6278:	strb.w	r0, [r5, #51]	; 0x33
  return false;
}
    627c:	add	sp, #76	; 0x4c
    627e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    6282:	ldr	r3, [sp, #112]	; 0x70
    6284:	and.w	r3, r3, #3
    6288:	cmp	r3, #1
    628a:	beq.n	629a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x46>
    628c:	cmp	r3, #2
    628e:	beq.w	64a4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x250>
    6292:	cmp	r3, #0
    6294:	bne.n	6272 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    6296:	movs	r3, #1
    6298:	b.n	629c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x48>
    629a:	movs	r3, #2
      break;
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    629c:	ldr	r2, [sp, #112]	; 0x70
    629e:	and.w	r2, r2, #8
    62a2:	orrs	r3, r2
    62a4:	str	r3, [sp, #4]
  if (name) {
    62a6:	ldr	r3, [sp, #0]
    62a8:	cmp	r3, #0
    62aa:	beq.w	64a8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x254>
    nameHash = exFatHashName(name, nameLength, 0);
    62ae:	mov	r0, r3
    62b0:	movs	r2, #0
    62b2:	mov	r1, sl
    62b4:	bl	6e60 <exFatHashName(char const*, unsigned int, unsigned short)>
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    62b8:	ldrb.w	r3, [r6, #49]	; 0x31
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    62bc:	str	r0, [sp, #8]
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    62be:	cbz	r3, 62d4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    62c0:	ldrd	r2, r3, [r6]
    62c4:	orrs	r3, r2
    62c6:	beq.n	62d4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    62c8:	movs	r2, #0
    62ca:	movs	r3, #0
    62cc:	strd	r2, r3, [r6]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    62d0:	movs	r1, #0
    62d2:	str	r1, [r6, #24]
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    62d4:	ldr	r2, [pc, #736]	; (65b8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x364>)
    62d6:	add.w	r3, sl, #14
    62da:	smull	r1, r2, r2, r3
    62de:	add	r2, r3
    62e0:	asrs	r3, r3, #31
    62e2:	rsb	r3, r3, r2, asr #3
    62e6:	uxtb	r3, r3
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;
    62e8:	mov.w	r9, #0
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    62ec:	str	r3, [sp, #12]
    62ee:	adds	r3, #2
    62f0:	uxtb.w	fp, r3

  DirFile_t*   dirFile;
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
    62f4:	mov	r4, r9
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
    62f6:	mov	r7, r9
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    62f8:	movs	r2, #32
    62fa:	add	r1, sp, #40	; 0x28
    62fc:	mov	r0, r6
    62fe:	bl	5f84 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    6302:	cmp	r0, #0
    6304:	beq.n	6382 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      goto create;
    }
    if (n != 32) {
    6306:	cmp	r0, #32
    6308:	bne.n	6272 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
    630a:	ldrb.w	r3, [sp, #40]	; 0x28
    630e:	lsls	r2, r3, #24
    6310:	bmi.n	63e0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x18c>
      if (freeCount == 0) {
    6312:	cmp	r4, #0
    6314:	bne.n	63da <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x186>
        freePos.position = dir->curPosition() - 32;
    6316:	ldr	r2, [r6, #0]
        freePos.cluster = dir->curCluster();
    6318:	ldr	r1, [r6, #24]
    631a:	str	r1, [sp, #28]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
    631c:	subs	r2, #32
    631e:	str	r2, [sp, #32]
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
        freeCount++;
    6320:	adds	r4, #1
    6322:	uxtb	r4, r4
      }
      if (!buf[0]) {
    6324:	cbz	r3, 6382 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      if (buf[0] != EXFAT_TYPE_FILE) {
        continue;
      }
      inSet = true;
    }
    switch (buf[0]) {
    6326:	cmp	r3, #192	; 0xc0
    6328:	beq.w	6452 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fe>
    632c:	cmp	r3, #193	; 0xc1
    632e:	beq.n	63f6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1a2>
    6330:	cmp	r3, #133	; 0x85
    6332:	bne.n	62f8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
    6334:	movs	r2, #56	; 0x38
    6336:	movs	r1, #0
    6338:	mov	r0, r5
    633a:	bl	df8c <memset>
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    633e:	ldrb.w	r3, [sp, #44]	; 0x2c
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
    6342:	ldrb.w	r2, [sp, #41]	; 0x29
    6346:	strb.w	r2, [r5, #48]	; 0x30
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    634a:	lsls	r0, r3, #27
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    634c:	and.w	r2, r3, #55	; 0x37
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
    6350:	it	pl
    6352:	orrpl.w	r2, r2, #8
    6356:	strb.w	r2, [r5, #49]	; 0x31
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    635a:	ldr	r3, [r6, #0]
    635c:	ldr	r1, [r6, #32]
    635e:	ldr	r2, [r6, #24]
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
    6360:	str	r2, [r5, #36]	; 0x24
        m_dirPos.position = dir->curPosition() - 32;
    6362:	subs	r3, #32
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();
    6364:	str	r1, [r5, #32]

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    6366:	str	r3, [r5, #40]	; 0x28
        m_dirPos.isContiguous = dir->isContiguous();
    6368:	ldrb.w	r3, [r6, #51]	; 0x33
    636c:	ubfx	r3, r3, #6, #1
    6370:	strb.w	r3, [r5, #44]	; 0x2c
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    6374:	movs	r2, #32
    6376:	add	r1, sp, #40	; 0x28
    6378:	mov	r0, r6
    637a:	bl	5f84 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    637e:	cmp	r0, #0
    6380:	bne.n	6306 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xb2>
#if READ_ONLY
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    6382:	ldr	r3, [sp, #112]	; 0x70
    6384:	lsls	r1, r3, #22
    6386:	bpl.w	6272 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    638a:	ldr	r3, [sp, #4]
    638c:	lsls	r2, r3, #30
    638e:	bpl.w	6272 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    6392:	ldr	r3, [sp, #0]
    6394:	cmp	r3, #0
    6396:	beq.w	6272 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    639a:	cmp	r4, fp
    639c:	bcc.n	63b8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x164>
    639e:	b.n	64ae <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25a>
        goto fail;
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
    63a0:	cmp	r0, #32
    63a2:	bne.w	6272 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
    63a6:	cbnz	r4, 63b2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x15e>
      freePos.position = dir->curPosition() - 32;
    63a8:	ldr	r2, [r6, #0]
      freePos.cluster = dir->curCluster();
    63aa:	ldr	r1, [r6, #24]
    63ac:	str	r1, [sp, #28]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
    63ae:	subs	r2, #32
    63b0:	str	r2, [sp, #32]
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    63b2:	uxtb	r4, r3
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    63b4:	cmp	fp, r4
    63b6:	bls.n	64ae <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25a>
    n = dir->read(buf, 32);
    63b8:	movs	r2, #32
    63ba:	add	r1, sp, #40	; 0x28
    63bc:	mov	r0, r6
    63be:	bl	5f84 <ExFatFile::read(void*, unsigned int)>
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    63c2:	adds	r3, r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
    63c4:	cmp	r0, #0
    63c6:	bne.n	63a0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x14c>
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
    63c8:	mov	r0, r6
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
    63ca:	ldr	r7, [r6, #24]
      if (!dir->addDirCluster()) {
    63cc:	bl	726c <ExFatFile::addDirCluster()>
    63d0:	cmp	r0, #0
    63d2:	beq.w	6272 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
        DBG_FAIL_MACRO;
        goto fail;
      }
      dir->m_curCluster = curCluster;
    63d6:	str	r7, [r6, #24]
      continue;
    63d8:	b.n	63b4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x160>
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
    63da:	cmp	r4, fp
    63dc:	bcs.n	6324 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd0>
    63de:	b.n	6320 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xcc>
        freeCount++;
      }
      if (!buf[0]) {
        goto create;
      }
    } else if (!inSet) {
    63e0:	cmp.w	r9, #0
    63e4:	bne.n	6326 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd2>
      if (freeCount < freeNeed) {
        freeCount = 0;
    63e6:	cmp	r4, fp
    63e8:	it	cc
    63ea:	movcc	r4, #0
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
    63ec:	cmp	r3, #133	; 0x85
    63ee:	bne.n	62f8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        continue;
      }
      inSet = true;
    63f0:	mov.w	r9, #1
    63f4:	b.n	6334 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xe0>
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
    63f6:	rsb	r8, r7, sl
    63fa:	uxtb.w	r8, r8
    63fe:	cmp.w	r8, #15
    6402:	it	cs
    6404:	movcs.w	r8, #15
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
    6408:	mov	r3, r8
    640a:	mov	r2, r7
    640c:	ldr	r1, [sp, #0]
    640e:	add	r0, sp, #40	; 0x28
    6410:	bl	6e9c <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>
    6414:	cmp	r0, #0
    6416:	beq.n	6492 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x23e>
          inSet = false;
          break;
        }
        nameOffset += nCmp;
    6418:	add	r7, r8
    641a:	uxtb	r7, r7

        if (nameOffset == nameLength) {
    641c:	cmp	sl, r7
    641e:	bne.w	62f8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    6422:	ldr	r3, [sp, #112]	; 0x70
    6424:	lsls	r3, r3, #20
    6426:	bmi.w	6272 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    642a:	ldr	r3, [sp, #112]	; 0x70
    642c:	tst.w	r3, #17408	; 0x4400
    6430:	bne.w	6574 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x320>
    6434:	ldrb.w	r3, [r5, #51]	; 0x33
    6438:	lsls	r7, r3, #30
    643a:	bmi.w	6574 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x320>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    643e:	ldr	r3, [sp, #112]	; 0x70
    6440:	lsls	r3, r3, #21
    6442:	bmi.w	6272 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    6446:	ldr	r3, [sp, #112]	; 0x70
    6448:	lsls	r0, r3, #17
    644a:	bmi.w	65bc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x368>
    DBG_FAIL_MACRO;
    goto fail;
  }
#endif  // READ_ONLY
  return true;
    644e:	movs	r0, #1
    6450:	b.n	627c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x28>
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    6452:	ldrb.w	r3, [sp, #41]	; 0x29
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
    6456:	ldr	r2, [sp, #4]
    6458:	strb.w	r2, [r5, #51]	; 0x33
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    645c:	lsls	r1, r3, #30
    645e:	bpl.n	6468 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x214>
          m_flags |= FILE_FLAG_CONTIGUOUS;
    6460:	orr.w	r3, r2, #64	; 0x40
    6464:	strb.w	r3, [r5, #51]	; 0x33
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    6468:	ldrd	r2, r3, [sp, #48]	; 0x30
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    646c:	ldrd	r0, r1, [sp, #64]	; 0x40
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    6470:	strd	r2, r3, [r5, #16]
        m_firstCluster = getLe32(dirStream->firstCluster);
    6474:	ldr	r3, [sp, #60]	; 0x3c
    6476:	str	r3, [r5, #28]
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
    6478:	ldr	r3, [sp, #0]
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    647a:	strd	r0, r1, [r5, #8]
        if (!name) {
    647e:	cmp	r3, #0
    6480:	beq.n	6422 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1ce>
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    6482:	ldrb.w	r3, [sp, #43]	; 0x2b
    6486:	cmp	r3, sl
    6488:	beq.n	6496 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x242>
            nameHash != getLe16(dirStream->nameHash)) {
          inSet = false;
    648a:	mov.w	r9, #0
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    648e:	mov	r7, r9
    6490:	b.n	62f8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        nCmp = nameLength - nameOffset;
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
          inSet = false;
    6492:	mov	r9, r0
    6494:	b.n	62f8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    6496:	ldrh.w	r3, [sp, #44]	; 0x2c
    649a:	ldr	r2, [sp, #8]
    649c:	cmp	r3, r2
    649e:	bne.n	648a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x236>
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    64a0:	movs	r7, #0
    64a2:	b.n	62f8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    64a4:	movs	r3, #3
    64a6:	b.n	629c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x48>
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
  uint8_t nCmp;
  uint8_t modeFlags;
  uint16_t nameHash = 0;
    64a8:	ldr	r3, [sp, #0]
    64aa:	str	r3, [sp, #8]
    64ac:	b.n	62d4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    64ae:	ldrb.w	r3, [r6, #51]	; 0x33
  memset(this, 0, sizeof(ExFatFile));
    64b2:	movs	r2, #56	; 0x38
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    64b4:	ubfx	r3, r3, #6, #1
  memset(this, 0, sizeof(ExFatFile));
    64b8:	movs	r1, #0
    64ba:	mov	r0, r5
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    64bc:	add.w	r8, sp, #28
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    64c0:	strb.w	r3, [sp, #36]	; 0x24
  memset(this, 0, sizeof(ExFatFile));
    64c4:	bl	df8c <memset>
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    64c8:	ldr	r4, [sp, #12]
    64ca:	ldr	r3, [r6, #32]
    64cc:	str.w	sl, [sp, #12]

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    64d0:	ldmia.w	r8, {r0, r1, r2}
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    64d4:	add.w	r9, r4, #1
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
    64d8:	movs	r4, #8
    64da:	strb.w	r4, [r5, #49]	; 0x31
    64de:	add.w	r7, sl, #30
  m_dirPos = freePos;
    64e2:	add.w	r4, r5, #36	; 0x24
    64e6:	ldr.w	sl, [sp]
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
    64ea:	str	r3, [r5, #32]
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    64ec:	uxtb.w	r9, r9

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    64f0:	stmia.w	r4, {r0, r1, r2}
    64f4:	uxtb	r7, r7
  for (uint8_t i = 0; i < freeNeed; i++) {
    64f6:	movs	r6, #0
    64f8:	mov	r0, r3
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
    64fa:	movs	r2, #1
    64fc:	mov	r1, r8
    64fe:	bl	6c90 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    6502:	mov	r4, r0
    6504:	cmp	r0, #0
    6506:	beq.w	6272 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    650a:	ldrsb.w	r3, [r0]
    650e:	cmp	r3, #0
    6510:	blt.w	6272 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0 , 32);
    6514:	movs	r2, #32
    6516:	movs	r1, #0
    6518:	bl	df8c <memset>
    if (i == 0) {
    651c:	cmp	r6, #0
    651e:	beq.n	65ee <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x39a>
        FsDateTime::callback(&date, &time, &ms10);
        dirFile->createTimeMs = ms10;
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
    6520:	cmp	r6, #1
    6522:	beq.n	65ce <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x37a>
    6524:	rsb	r3, r6, r6, lsl #4
    6528:	cmp	r7, #15
    652a:	sub.w	r3, r3, #30

      dirStream->nameLength = nameLength;
      setLe16(dirStream->nameHash, nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
    652e:	mov.w	r2, #193	; 0xc1
    6532:	mov	r1, r7
    6534:	it	cs
    6536:	movcs	r1, #15
    6538:	uxtb	r3, r3
    653a:	strb	r2, [r4, #0]
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    653c:	cbz	r1, 6554 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
    653e:	adds	r4, #2
    6540:	sxth	r1, r1
    6542:	add.w	r1, r4, r1, lsl #1
    6546:	add	r3, sl
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
    6548:	ldrb.w	r2, [r3], #1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    654c:	strh.w	r2, [r4], #2
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    6550:	cmp	r1, r4
    6552:	bne.n	6548 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2f4>
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    6554:	adds	r6, #1
    6556:	uxtb	r6, r6
    6558:	cmp	fp, r6
    655a:	bls.n	65b0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x35c>
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
    655c:	movs	r2, #32
    655e:	mov	r1, r8
    6560:	ldr	r0, [r5, #32]
    6562:	bl	6cc4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    6566:	cmp	r0, #1
    6568:	bne.w	6272 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    656c:	subs	r7, #15
    656e:	uxtb	r7, r7
    6570:	ldr	r0, [r5, #32]
    6572:	b.n	64fa <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2a6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || READ_ONLY) {
    6574:	ldrb.w	r3, [r5, #49]	; 0x31
    6578:	tst.w	r3, #17
    657c:	bne.w	6272 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    6580:	ldr	r3, [sp, #112]	; 0x70
    6582:	lsls	r6, r3, #21
    6584:	bpl.w	6446 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1f2>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    6588:	ldrb.w	r3, [r5, #51]	; 0x33
    658c:	lsls	r4, r3, #30
    658e:	bpl.w	6272 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    6592:	movs	r2, #0
    6594:	movs	r3, #0
    6596:	mov	r0, r5
    6598:	bl	6154 <ExFatFile::seekSet(unsigned long long)>
    659c:	cmp	r0, #0
    659e:	beq.w	6272 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    65a2:	mov	r0, r5
    65a4:	bl	7538 <ExFatFile::truncate()>
    65a8:	cmp	r0, #0
    65aa:	beq.w	6272 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    65ae:	b.n	644e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fa>
      for (size_t k = 0; k < nCmp; k++) {
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
      }
    }
  }
  return sync();
    65b0:	mov	r0, r5
    65b2:	bl	720c <ExFatFile::sync()>
    65b6:	b.n	627c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x28>
    65b8:	.word	0x88888889
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    65bc:	ldrd	r2, r3, [r5, #16]
    65c0:	mov	r0, r5
    65c2:	bl	6154 <ExFatFile::seekSet(unsigned long long)>
    65c6:	cmp	r0, #0
    65c8:	bne.w	644e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fa>
    65cc:	b.n	6272 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    65ce:	movs	r3, #192	; 0xc0
    65d0:	strb	r3, [r4, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    65d2:	ldr	r3, [sp, #4]
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    65d4:	movs	r2, #3
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    65d6:	orn	r3, r3, #63	; 0x3f
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    65da:	strb	r2, [r4, #1]
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    65dc:	strb.w	r3, [r5, #51]	; 0x33

      dirStream->nameLength = nameLength;
    65e0:	ldrb.w	r3, [sp, #12]
    65e4:	strb	r3, [r4, #3]
    65e6:	ldrh.w	r3, [sp, #8]
    65ea:	strh	r3, [r4, #4]
    65ec:	b.n	6554 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
      goto fail;
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
    65ee:	movs	r3, #133	; 0x85
    65f0:	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
      dirFile->setCount = m_setCount;
      if (FsDateTime::callback) {
    65f2:	ldr	r3, [pc, #48]	; (6624 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3d0>)
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    65f4:	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    65f8:	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
    65fc:	ldr	r3, [r3, #0]
    65fe:	cmp	r3, #0
    6600:	beq.n	6554 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
        uint16_t date, time;
        uint8_t ms10;
        FsDateTime::callback(&date, &time, &ms10);
    6602:	add.w	r2, sp, #23
    6606:	add.w	r1, sp, #26
    660a:	add	r0, sp, #24
    660c:	blx	r3
        dirFile->createTimeMs = ms10;
    660e:	ldrb.w	r1, [sp, #23]
    6612:	ldrh.w	r2, [sp, #26]
    6616:	ldrh.w	r3, [sp, #24]
    661a:	strb	r1, [r4, #20]
    661c:	strh	r2, [r4, #8]
    661e:	strh	r3, [r4, #10]
    6620:	b.n	6554 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
    6622:	nop
    6624:	.word	0x1fff1f2c

00006628 <ExFatFile::open(ExFatFile*, char const*, int)>:
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    6628:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    662c:	mov	r6, r0
    662e:	sub	sp, #84	; 0x54
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    6630:	ldrb.w	r4, [r6, #49]	; 0x31
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    6634:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    6636:	movs	r0, #0
    6638:	strb.w	r0, [sp, #73]	; 0x49
    663c:	strb.w	r0, [sp, #74]	; 0x4a
    6640:	strb.w	r0, [sp, #75]	; 0x4b
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    6644:	cbnz	r4, 6654 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
    6646:	mov	r9, r3
    6648:	ldrb.w	r3, [r1, #49]	; 0x31
    664c:	tst.w	r3, #80	; 0x50
    6650:	mov	r5, r1
    6652:	bne.n	665c <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    6654:	movs	r0, #0
}
    6656:	add	sp, #84	; 0x54
    6658:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    665c:	ldrb	r3, [r2, #0]
    665e:	cmp	r3, #47	; 0x2f
    6660:	mov	r4, r2
    6662:	beq.n	66ca <ExFatFile::open(ExFatFile*, char const*, int)+0xa2>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    6664:	mov.w	r8, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    6668:	mov	r1, r4
    666a:	add	r3, sp, #12
    666c:	add	r2, sp, #16
    666e:	mov	r0, r6
    6670:	bl	5e10 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    6674:	cmp	r0, #0
    6676:	beq.n	6654 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    6678:	ldr	r3, [sp, #12]
    667a:	ldrb	r3, [r3, #0]
    667c:	cmp	r3, #0
    667e:	beq.n	66f4 <ExFatFile::open(ExFatFile*, char const*, int)+0xcc>
    6680:	ldrb.w	r3, [sp, #16]
    6684:	ldr	r2, [sp, #20]
    6686:	str.w	r8, [sp]
    668a:	mov	r1, r5
    668c:	mov	r0, r6
    668e:	bl	6254 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    6692:	cmp	r0, #0
    6694:	beq.n	6654 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    6696:	mov	r4, r6
    6698:	add	r7, sp, #24
    669a:	add.w	lr, r6, #48	; 0x30
    669e:	ldr	r0, [r4, #0]
    66a0:	ldr	r1, [r4, #4]
    66a2:	ldr	r2, [r4, #8]
    66a4:	ldr	r3, [r4, #12]
    66a6:	mov	r5, r7
    66a8:	stmia	r5!, {r0, r1, r2, r3}
    66aa:	adds	r4, #16
    66ac:	cmp	r4, lr
    66ae:	mov	r7, r5
    66b0:	bne.n	669e <ExFatFile::open(ExFatFile*, char const*, int)+0x76>
    66b2:	ldr	r0, [r4, #0]
    66b4:	str	r0, [r5, #0]
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
    66b6:	mov	r0, r6
    66b8:	bl	720c <ExFatFile::sync()>
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    66bc:	add	r5, sp, #24
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    66be:	strb.w	r8, [r6, #49]	; 0x31
  m_flags = 0;
    66c2:	strb.w	r8, [r6, #51]	; 0x33
    66c6:	ldr	r4, [sp, #12]
    66c8:	b.n	6668 <ExFatFile::open(ExFatFile*, char const*, int)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    66ca:	adds	r4, #1
    66cc:	str	r4, [sp, #12]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    66ce:	ldrb	r1, [r4, #0]
    66d0:	cmp	r1, #47	; 0x2f
    66d2:	beq.n	66ca <ExFatFile::open(ExFatFile*, char const*, int)+0xa2>
      path++;
    }
    if (*path == 0) {
    66d4:	cbz	r1, 670c <ExFatFile::open(ExFatFile*, char const*, int)+0xe4>
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    66d6:	movs	r2, #56	; 0x38
    66d8:	add	r0, sp, #24
    66da:	movs	r1, #0
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    66dc:	ldr	r7, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    66de:	bl	df8c <memset>
  m_attributes = FILE_ATTR_ROOT;
    66e2:	movs	r2, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    66e4:	movs	r3, #1
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    66e6:	add	r5, sp, #24
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    66e8:	str	r7, [sp, #56]	; 0x38
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    66ea:	strb.w	r2, [sp, #73]	; 0x49
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    66ee:	strb.w	r3, [sp, #75]	; 0x4b
    66f2:	b.n	6664 <ExFatFile::open(ExFatFile*, char const*, int)+0x3c>
    66f4:	ldrb.w	r3, [sp, #16]
    66f8:	ldr	r2, [sp, #20]
    66fa:	str.w	r9, [sp]
    66fe:	mov	r1, r5
    6700:	mov	r0, r6
    6702:	bl	6254 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    6706:	add	sp, #84	; 0x54
    6708:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    670c:	movs	r2, #56	; 0x38
    670e:	mov	r0, r6
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    6710:	ldr	r4, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    6712:	bl	df8c <memset>
  m_attributes = FILE_ATTR_ROOT;
    6716:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    6718:	movs	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    671a:	str	r4, [r6, #32]
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    671c:	strb.w	r3, [r6, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    6720:	strb.w	r0, [r6, #51]	; 0x33
    6724:	b.n	6656 <ExFatFile::open(ExFatFile*, char const*, int)+0x2e>
    6726:	nop

00006728 <ExFatFile::open(ExFatVolume*, char const*, int)>:
bool ExFatFile::open(const ExChar_t* path, int oflag) {
  return open(ExFatVolume::cwv(), path, oflag);
}
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
    6728:	cbz	r1, 6732 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    672a:	add.w	r1, r1, #1088	; 0x440
    672e:	b.w	6628 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    6732:	mov	r0, r1
    6734:	bx	lr
    6736:	nop

00006738 <ExFatFile::openNext(ExFatFile*, int)>:
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    6738:	ldrb.w	r3, [r0, #49]	; 0x31
    673c:	cbnz	r3, 6754 <ExFatFile::openNext(ExFatFile*, int)+0x1c>
    DBG_FAIL_MACRO;
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    673e:	push	{r4, r5, lr}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    6740:	ldrb.w	r4, [r1, #49]	; 0x31
    6744:	ands.w	r4, r4, #80	; 0x50
    DBG_FAIL_MACRO;
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    6748:	sub	sp, #12
    674a:	mov	r5, r1
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    674c:	bne.n	6758 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    674e:	mov	r0, r4
}
    6750:	add	sp, #12
    6752:	pop	{r4, r5, pc}
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    6754:	movs	r0, #0
}
    6756:	bx	lr
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    6758:	ldrd	r4, r5, [r5]
    675c:	movs	r5, #0
    675e:	and.w	r4, r4, #31
    6762:	orrs	r4, r5
    6764:	beq.n	676c <ExFatFile::openNext(ExFatFile*, int)+0x34>
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    6766:	mov	r0, r3
}
    6768:	add	sp, #12
    676a:	pop	{r4, r5, pc}
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);
    676c:	str	r2, [sp, #0]
    676e:	mov	r2, r3
    6770:	bl	6254 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>

 fail:
  return false;
}
    6774:	add	sp, #12
    6776:	pop	{r4, r5, pc}

00006778 <ExFatFile::printFileSize(Print*)>:
#include "../common/DebugMacros.h"
#include "ExFatFile.h"
#include "upcase.h"
#include "ExFatVolume.h"
//-----------------------------------------------------------------------------
size_t ExFatFile::printFileSize(print_t* pr) {
    6778:	push	{r4, r5, r6, lr}
    677a:	sub	sp, #24
  uint64_t n = m_validLength;
  char buf[21];
  char *str = &buf[sizeof(buf) - 1];
  char *bgn = str - 12;
  *str = '\0';
    677c:	add	r5, sp, #24
    677e:	movs	r2, #0
#include "ExFatFile.h"
#include "upcase.h"
#include "ExFatVolume.h"
//-----------------------------------------------------------------------------
size_t ExFatFile::printFileSize(print_t* pr) {
  uint64_t n = m_validLength;
    6780:	ldr	r4, [r0, #16]
    6782:	ldr	r3, [r0, #20]
  char buf[21];
  char *str = &buf[sizeof(buf) - 1];
  char *bgn = str - 12;
  *str = '\0';
    6784:	strb.w	r2, [r5, #-4]!
#include "../common/DebugMacros.h"
#include "ExFatFile.h"
#include "upcase.h"
#include "ExFatVolume.h"
//-----------------------------------------------------------------------------
size_t ExFatFile::printFileSize(print_t* pr) {
    6788:	mov	r6, r1
  char *str = &buf[sizeof(buf) - 1];
  char *bgn = str - 12;
  *str = '\0';
  do {
    uint64_t m = n;
    n /= 10;
    678a:	mov	r1, r3
    678c:	movs	r2, #10
    678e:	movs	r3, #0
    6790:	mov	r0, r4
    6792:	bl	d480 <__aeabi_uldivmod>
    *--str = m - 10*n + '0';
    6796:	adds	r4, #48	; 0x30
    6798:	add.w	r3, r0, r0, lsl #2
    679c:	sub.w	r4, r4, r3, lsl #1
  uint64_t n = m_validLength;
  char buf[21];
  char *str = &buf[sizeof(buf) - 1];
  char *bgn = str - 12;
  *str = '\0';
  do {
    67a0:	orrs.w	r2, r0, r1
    uint64_t m = n;
    n /= 10;
    *--str = m - 10*n + '0';
    67a4:	strb.w	r4, [r5, #-1]!
    67a8:	mov	r3, r1
    67aa:	mov	r4, r0
  uint64_t n = m_validLength;
  char buf[21];
  char *str = &buf[sizeof(buf) - 1];
  char *bgn = str - 12;
  *str = '\0';
  do {
    67ac:	bne.n	678a <ExFatFile::printFileSize(Print*)+0x12>
    uint64_t m = n;
    n /= 10;
    *--str = m - 10*n + '0';
  } while (n);
  while (str > bgn) {
    67ae:	add	r3, sp, #8
    67b0:	cmp	r5, r3
    67b2:	bls.n	67c2 <ExFatFile::printFileSize(Print*)+0x4a>
    67b4:	mov	r1, r5
    *--str = ' ';
    67b6:	movs	r2, #32
    67b8:	strb.w	r2, [r1, #-1]!
  do {
    uint64_t m = n;
    n /= 10;
    *--str = m - 10*n + '0';
  } while (n);
  while (str > bgn) {
    67bc:	cmp	r1, r3
    67be:	bne.n	67b8 <ExFatFile::printFileSize(Print*)+0x40>
    67c0:	add	r5, sp, #8
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    67c2:	mov	r0, r5
    67c4:	bl	e580 <strlen>
    67c8:	ldr	r3, [r6, #0]
    67ca:	mov	r2, r0
    67cc:	mov	r1, r5
    67ce:	ldr	r3, [r3, #4]
    67d0:	mov	r0, r6
    67d2:	blx	r3
    *--str = ' ';
  }
  return pr->write(str);
}
    67d4:	add	sp, #24
    67d6:	pop	{r4, r5, r6, pc}

000067d8 <ExFatFile::printModifyDateTime(Print*)>:
  return fsPrintDateTime(pr, getLe32(df->createTime));
fail:
  return 0;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::printModifyDateTime(print_t* pr) {
    67d8:	mov	r3, r0
    67da:	push	{r4, lr}
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    67dc:	ldr	r0, [r0, #32]
  return fsPrintDateTime(pr, getLe32(df->createTime));
fail:
  return 0;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::printModifyDateTime(print_t* pr) {
    67de:	mov	r4, r1
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    67e0:	movs	r2, #0
    67e2:	add.w	r1, r3, #36	; 0x24
    67e6:	bl	6c90 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    67ea:	cbz	r0, 67f8 <ExFatFile::printModifyDateTime(Print*)+0x20>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return fsPrintDateTime(pr, getLe32(df->modifyTime));
    67ec:	ldr	r1, [r0, #12]
    67ee:	mov	r0, r4
fail:
  return 0;
}
    67f0:	ldmia.w	sp!, {r4, lr}
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
  if (!df) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return fsPrintDateTime(pr, getLe32(df->modifyTime));
    67f4:	b.w	5d24 <fsPrintDateTime(Print*, unsigned long)>
fail:
  return 0;
}
    67f8:	pop	{r4, pc}
    67fa:	nop

000067fc <ExFatFile::ls(Print*, unsigned char, unsigned char)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::ls(print_t* pr, uint8_t flags, uint8_t indent) {
    67fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ExFatFile file;
  if (!isDir()) {
    6800:	ldrb.w	r6, [r0, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::ls(print_t* pr, uint8_t flags, uint8_t indent) {
    6804:	sub	sp, #56	; 0x38
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    6806:	movs	r4, #0
  ExFatFile file;
  if (!isDir()) {
    6808:	tst.w	r6, #80	; 0x50
    680c:	strb.w	r4, [sp, #49]	; 0x31
    6810:	strb.w	r4, [sp, #50]	; 0x32
    6814:	strb.w	r4, [sp, #51]	; 0x33
    6818:	bne.n	6822 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x26>
    goto fail;
  }
  return true;

 fail:
  return false;
    681a:	movs	r0, #0
}
    681c:	add	sp, #56	; 0x38
    681e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6822:	mov	r9, r0
    6824:	mov	r8, r2
    6826:	mov	r7, r3
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    6828:	movs	r2, #0
    682a:	movs	r3, #0
    682c:	mov	r5, r1
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
        pr->write(' ');
      }
      if (flags & LS_DATE) {
    682e:	and.w	sl, r8, #2
    6832:	bl	6154 <ExFatFile::seekSet(unsigned long long)>
  if (!isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    6836:	movs	r2, #0
    6838:	mov	r1, r9
    683a:	mov	r0, sp
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
        pr->write(' ');
      }
      if (flags & LS_DATE) {
    683c:	uxtb.w	sl, sl
  if (!isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    6840:	bl	6738 <ExFatFile::openNext(ExFatFile*, int)>
    6844:	cmp	r0, #0
    6846:	beq.n	68d0 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0xd4>
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
    6848:	ldrb.w	r3, [sp, #49]	; 0x31
    684c:	lsls	r3, r3, #30
    684e:	bpl.n	6856 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x5a>
    6850:	tst.w	r8, #1
    6854:	beq.n	68bc <ExFatFile::ls(Print*, unsigned char, unsigned char)+0xc0>
      for (uint8_t i = 0; i < indent; i++) {
    6856:	movs	r4, #0
    6858:	cbz	r7, 686c <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x70>
        pr->write(' ');
    685a:	ldr	r3, [r5, #0]
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
    685c:	adds	r4, #1
        pr->write(' ');
    685e:	movs	r1, #32
    6860:	ldr	r6, [r3, #0]
    6862:	mov	r0, r5
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
    6864:	uxtb	r4, r4
        pr->write(' ');
    6866:	blx	r6
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
    6868:	cmp	r7, r4
    686a:	bne.n	685a <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x5e>
        pr->write(' ');
      }
      if (flags & LS_DATE) {
    686c:	cmp.w	sl, #0
    6870:	bne.n	6908 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x10c>
        file.printModifyDateTime(pr);
        pr->write(' ');
      }
      if (flags & LS_SIZE) {
    6872:	tst.w	r8, #4
    6876:	bne.n	68f4 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0xf8>
        file.printFileSize(pr);
        pr->write(' ');
      }
      file.printName(pr);
    6878:	mov	r1, r5
    687a:	mov	r0, sp
    687c:	bl	5ed4 <ExFatFile::printName(Print*)>
      if (file.isDir()) {
    6880:	ldrb.w	r3, [sp, #49]	; 0x31
    6884:	tst.w	r3, #80	; 0x50
    6888:	bne.n	68e8 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0xec>
        pr->write('/');
      }
      pr->write('\r');
    688a:	ldr	r3, [r5, #0]
    688c:	movs	r1, #13
    688e:	ldr	r3, [r3, #0]
    6890:	mov	r0, r5
    6892:	blx	r3
      pr->write('\n');
    6894:	ldr	r3, [r5, #0]
    6896:	movs	r1, #10
    6898:	ldr	r3, [r3, #0]
    689a:	mov	r0, r5
    689c:	blx	r3
      if ((flags & LS_R) && file.isDir()) {
    689e:	tst.w	r8, #8
    68a2:	beq.n	68bc <ExFatFile::ls(Print*, unsigned char, unsigned char)+0xc0>
    68a4:	ldrb.w	r3, [sp, #49]	; 0x31
    68a8:	tst.w	r3, #80	; 0x50
    68ac:	beq.n	68bc <ExFatFile::ls(Print*, unsigned char, unsigned char)+0xc0>
        file.ls(pr, flags, indent + 2);
    68ae:	adds	r3, r7, #2
    68b0:	uxtb	r3, r3
    68b2:	mov	r2, r8
    68b4:	mov	r1, r5
    68b6:	mov	r0, sp
    68b8:	bl	67fc <ExFatFile::ls(Print*, unsigned char, unsigned char)>
      }
    }
    file.close();
    68bc:	mov	r0, sp
    68be:	bl	5d2c <ExFatFile::close()>
  if (!isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    68c2:	movs	r2, #0
    68c4:	mov	r1, r9
    68c6:	mov	r0, sp
    68c8:	bl	6738 <ExFatFile::openNext(ExFatFile*, int)>
    68cc:	cmp	r0, #0
    68ce:	bne.n	6848 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x4c>
  void clearWriteError() {
    m_error &= ~WRITE_ERROR;
  }
  /** \return All error bits. */
  uint8_t getError() {
    return isOpen() ? m_error : 0XFF;
    68d0:	ldrb.w	r3, [r9, #49]	; 0x31
    68d4:	cmp	r3, #0
    68d6:	beq.n	681a <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x1e>
        file.ls(pr, flags, indent + 2);
      }
    }
    file.close();
  }
  if (getError()) {
    68d8:	ldrb.w	r0, [r9, #50]	; 0x32
    68dc:	clz	r0, r0
    68e0:	lsrs	r0, r0, #5
  }
  return true;

 fail:
  return false;
}
    68e2:	add	sp, #56	; 0x38
    68e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        file.printFileSize(pr);
        pr->write(' ');
      }
      file.printName(pr);
      if (file.isDir()) {
        pr->write('/');
    68e8:	ldr	r3, [r5, #0]
    68ea:	movs	r1, #47	; 0x2f
    68ec:	ldr	r3, [r3, #0]
    68ee:	mov	r0, r5
    68f0:	blx	r3
    68f2:	b.n	688a <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x8e>
      if (flags & LS_DATE) {
        file.printModifyDateTime(pr);
        pr->write(' ');
      }
      if (flags & LS_SIZE) {
        file.printFileSize(pr);
    68f4:	mov	r1, r5
    68f6:	mov	r0, sp
    68f8:	bl	6778 <ExFatFile::printFileSize(Print*)>
        pr->write(' ');
    68fc:	ldr	r3, [r5, #0]
    68fe:	movs	r1, #32
    6900:	ldr	r3, [r3, #0]
    6902:	mov	r0, r5
    6904:	blx	r3
    6906:	b.n	6878 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x7c>
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
        pr->write(' ');
      }
      if (flags & LS_DATE) {
        file.printModifyDateTime(pr);
    6908:	mov	r1, r5
    690a:	mov	r0, sp
    690c:	bl	67d8 <ExFatFile::printModifyDateTime(Print*)>
        pr->write(' ');
    6910:	ldr	r3, [r5, #0]
    6912:	movs	r1, #32
    6914:	ldr	r3, [r3, #0]
    6916:	mov	r0, r5
    6918:	blx	r3
    691a:	b.n	6872 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x76>

0000691c <FsCache::sync() [clone .part.2]>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    691c:	push	{r4, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    691e:	add.w	r2, r0, #12

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    6922:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    6924:	ldr	r0, [r0, #4]
    6926:	ldr	r1, [r4, #8]
    6928:	ldr	r3, [r0, #0]
    692a:	ldr	r3, [r3, #24]
    692c:	blx	r3
    692e:	cbz	r0, 6938 <FsCache::sync() [clone .part.2]+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    6930:	ldrb	r3, [r4, #0]
    6932:	bic.w	r3, r3, #1
    6936:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    6938:	pop	{r4, pc}
    693a:	nop

0000693c <FsCache::invalidate()>:
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    693c:	movs	r2, #0
  m_sector = 0XFFFFFFFF;
    693e:	mov.w	r3, #4294967295
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    6942:	strb	r2, [r0, #0]
  m_sector = 0XFFFFFFFF;
    6944:	str	r3, [r0, #8]
    6946:	bx	lr

00006948 <FsCache::get(unsigned long, unsigned char)>:
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
    6948:	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    694a:	ldr	r5, [r0, #4]
    694c:	cbz	r5, 698e <FsCache::get(unsigned long, unsigned char)+0x46>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    694e:	ldr	r3, [r0, #8]
    6950:	cmp	r3, r1
    6952:	mov	r4, r0
    6954:	mov	r7, r2
    6956:	mov	r6, r1
    6958:	beq.n	6978 <FsCache::get(unsigned long, unsigned char)+0x30>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    695a:	ldrb	r3, [r0, #0]
    695c:	lsls	r2, r3, #31
    695e:	bmi.n	6986 <FsCache::get(unsigned long, unsigned char)+0x3e>
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    6960:	lsls	r3, r7, #30
    6962:	bpl.n	6992 <FsCache::get(unsigned long, unsigned char)+0x4a>
    6964:	add.w	r5, r4, #12
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    6968:	and.w	r2, r7, #1
    696c:	movs	r3, #0
    696e:	orrs	r3, r2
    6970:	strb	r3, [r4, #0]
    6972:	mov	r0, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    6974:	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
}
    6976:	pop	{r3, r4, r5, r6, r7, pc}
    6978:	ldrsb.w	r3, [r0], #12
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    697c:	and.w	r2, r7, #1
    6980:	orrs	r3, r2
    6982:	strb	r3, [r4, #0]
  return m_cacheBuffer;

fail:
  return nullptr;
}
    6984:	pop	{r3, r4, r5, r6, r7, pc}
    6986:	bl	691c <FsCache::sync() [clone .part.2]>
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
    698a:	cmp	r0, #0
    698c:	bne.n	6960 <FsCache::get(unsigned long, unsigned char)+0x18>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
    698e:	movs	r0, #0
    6990:	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    6992:	ldr	r0, [r4, #4]
    6994:	ldr	r3, [r0, #0]
    6996:	add.w	r5, r4, #12
    699a:	ldr	r3, [r3, #8]
    699c:	mov	r2, r5
    699e:	mov	r1, r6
    69a0:	blx	r3
    69a2:	cmp	r0, #0
    69a4:	bne.n	6968 <FsCache::get(unsigned long, unsigned char)+0x20>
    69a6:	b.n	698e <FsCache::get(unsigned long, unsigned char)+0x46>

000069a8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>:
    }
  }
  return 1;
}
//-----------------------------------------------------------------------------
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    69a8:	push	{r3, r4, r5, lr}
    69aa:	mov	r4, r1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    69ac:	ldr.w	r1, [r0, #1052]	; 0x41c
    69b0:	mov	r5, r2
    69b2:	add.w	r1, r1, r4, lsr #7
    69b6:	add.w	r0, r0, #524	; 0x20c
    69ba:	movs	r2, #0
    69bc:	bl	6948 <FsCache::get(unsigned long, unsigned char)>
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    69c0:	cbz	r0, 69d4 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x2c>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    69c2:	lsls	r4, r4, #2
    69c4:	ubfx	r4, r4, #0, #9
    69c8:	ldr	r3, [r0, r4]
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    69ca:	adds	r2, r3, #1
    69cc:	beq.n	69d8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x30>
    return 0;
  }
  *value = next;
    69ce:	str	r3, [r5, #0]
  return 1;
    69d0:	movs	r0, #1
    69d2:	pop	{r3, r4, r5, pc}
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
    69d4:	movs	r0, #255	; 0xff
    69d6:	pop	{r3, r4, r5, pc}
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    return 0;
    69d8:	movs	r0, #0
  }
  *value = next;
  return 1;
}
    69da:	pop	{r3, r4, r5, pc}

000069dc <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>:
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    69dc:	push	{r3, r4, r5, lr}
    69de:	mov	r4, r1
    69e0:	ldr.w	r1, [r0, #1052]	; 0x41c
    69e4:	mov	r5, r2
    69e6:	add.w	r1, r1, r4, lsr #7
    69ea:	add.w	r0, r0, #524	; 0x20c
    69ee:	movs	r2, #1
    69f0:	bl	6948 <FsCache::get(unsigned long, unsigned char)>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCacheGet(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    69f4:	mov	r3, r0
    69f6:	cbz	r0, 6a04 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]+0x28>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    69f8:	lsls	r4, r4, #2
    69fa:	ubfx	r4, r4, #0, #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;
    69fe:	movs	r0, #1
    6a00:	str	r5, [r3, r4]
    6a02:	pop	{r3, r4, r5, pc}

 fail:
  return false;
}
    6a04:	pop	{r3, r4, r5, pc}
    6a06:	nop

00006a08 <FsCache::sync()>:
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    6a08:	ldrb	r3, [r0, #0]
    6a0a:	lsls	r3, r3, #31
    6a0c:	bmi.n	6a12 <FsCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    6a0e:	movs	r0, #1
    6a10:	bx	lr
    6a12:	b.w	691c <FsCache::sync() [clone .part.2]>
    6a16:	nop

00006a18 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
 fail:
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    6a18:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6a1c:	mov	r8, r0
    6a1e:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    6a20:	mov	fp, r1
    6a22:	cmp	r1, #0
    6a24:	beq.n	6ab0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x98>
    6a26:	subs	r7, r1, #2
  if (start >= m_clusterCount) {
    6a28:	ldr.w	r3, [r8, #1064]	; 0x428
    6a2c:	cmp	r7, r3
    6a2e:	bcs.n	6aa8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x90>
    6a30:	and.w	r5, r7, #7
    6a34:	movs	r3, #1
    6a36:	lsl.w	r5, r3, r5
    6a3a:	uxtb	r5, r5
    6a3c:	ubfx	sl, r7, #3, #9
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
    6a40:	mov	r6, r7
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    6a42:	mov	r4, r7
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    6a44:	ldr.w	r1, [r8, #1060]	; 0x424
    6a48:	movs	r2, #0
    6a4a:	add.w	r1, r1, r4, lsr #12
    6a4e:	mov	r0, r8
    6a50:	bl	6948 <FsCache::get(unsigned long, unsigned char)>
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    6a54:	cbz	r0, 6a88 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x70>
    6a56:	ldrb.w	r1, [r0, sl]
    6a5a:	b.n	6a72 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5a>
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    6a5c:	cmp	r2, r9
    6a5e:	beq.n	6ab6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9e>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    6a60:	cmp	r7, r4
    6a62:	beq.n	6a86 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    6a64:	ldr.w	r2, [r8, #1064]	; 0x428
    6a68:	cmp	r4, r2
    6a6a:	bcs.n	6a9c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x84>
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    6a6c:	ands.w	r5, r3, #255	; 0xff
    6a70:	beq.n	6a8c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x74>
        endAlloc++;
    6a72:	adds	r4, #1
        if (!(mask & cache[i])) {
    6a74:	tst	r5, r1
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    6a76:	mov.w	r3, r5, lsl #1
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    6a7a:	sub.w	r2, r4, r6
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    6a7e:	beq.n	6a5c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x44>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    6a80:	cmp	r7, r4
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    6a82:	mov	r6, r4
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    6a84:	bne.n	6a64 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4c>
          return 1;
    6a86:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    6a88:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6a8c:	add.w	sl, sl, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    6a90:	cmp.w	sl, #512	; 0x200
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    6a94:	mov.w	r5, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    6a98:	bne.n	6a56 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3e>
    6a9a:	b.n	6aa0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
    6a9c:	movs	r6, #0
    6a9e:	mov	r4, r6
          break;
        }
      }
      mask = 1;
    }
    i = 0;
    6aa0:	mov.w	sl, #0
    6aa4:	movs	r5, #1
    6aa6:	b.n	6a44 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
    6aa8:	movs	r7, #0
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
    6aaa:	mov	sl, r7
    6aac:	movs	r5, #1
    6aae:	b.n	6a40 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    6ab0:	ldr.w	r7, [r0, #1048]	; 0x418
    6ab4:	b.n	6a28 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
            if (cluster == 0 && count == 1) {
    6ab6:	cmp.w	fp, #0
    6aba:	bne.n	6ac6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xae>
    6abc:	cmp.w	r9, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    6ac0:	it	eq
    6ac2:	streq.w	r6, [r8, #1048]	; 0x418
            }
            return bgnAlloc + 2;
    6ac6:	adds	r0, r6, #2
    6ac8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00006acc <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    6acc:	push	{r3, r4, r5, r6, r7, lr}
    6ace:	mov	r4, r0
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    6ad0:	movs	r3, #0
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
  m_sector = 0XFFFFFFFF;
    6ad2:	mov.w	r6, #4294967295
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    6ad6:	add.w	r7, r0, #524	; 0x20c
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
  m_blockDev = dev;
    6ada:	str.w	r1, [r0, #1080]	; 0x438
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this partition.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    6ade:	str	r1, [r0, #4]
    6ae0:	str.w	r1, [r0, #528]	; 0x210

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    6ae4:	mov	r5, r2
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    6ae6:	mov	r0, r7
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    6ae8:	strb.w	r3, [r4, #1084]	; 0x43c
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    6aec:	strb	r3, [r4, #0]
    6aee:	strb.w	r3, [r4, #524]	; 0x20c
  m_sector = 0XFFFFFFFF;
    6af2:	str	r6, [r4, #8]
    6af4:	str.w	r6, [r4, #532]	; 0x214
    6af8:	mov	r2, r3
    6afa:	mov	r1, r3
    6afc:	bl	6948 <FsCache::get(unsigned long, unsigned char)>

  m_fatType = 0;
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    6b00:	cmp	r5, #4
    6b02:	bhi.n	6b1e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    6b04:	mov	r6, r0
    6b06:	cbz	r0, 6b1e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    6b08:	cbnz	r5, 6b22 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    6b0a:	movs	r2, #5
    6b0c:	ldr	r1, [pc, #152]	; (6ba8 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xdc>)
    6b0e:	adds	r0, r6, #3
    6b10:	bl	e65c <strncmp>
    6b14:	cbnz	r0, 6b1e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    6b16:	ldrb.w	r3, [r6, #108]	; 0x6c
    6b1a:	cmp	r3, #9
    6b1c:	beq.n	6b52 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x86>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    6b1e:	movs	r0, #0
    6b20:	pop	{r3, r4, r5, r6, r7, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    6b22:	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    6b24:	add.w	r3, r0, r3, lsl #4
    6b28:	ldrb.w	r2, [r3, #446]	; 0x1be
    6b2c:	ands.w	r2, r2, #127	; 0x7f
    6b30:	bne.n	6b1e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    6b32:	ldrb.w	r3, [r3, #450]	; 0x1c2
    6b36:	cmp	r3, #0
    6b38:	beq.n	6b1e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    6b3a:	add.w	r5, r0, r5, lsl #4
    6b3e:	mov	r0, r7
    6b40:	ldr.w	r5, [r5, #438]	; 0x1b6
    6b44:	mov	r1, r5
    6b46:	bl	6948 <FsCache::get(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCacheGet(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
    6b4a:	mov	r6, r0
    6b4c:	cmp	r0, #0
    6b4e:	bne.n	6b0a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x3e>
    6b50:	b.n	6b1e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    6b52:	ldr	r3, [r6, #80]	; 0x50
    6b54:	add	r3, r5
    6b56:	str.w	r3, [r4, #1052]	; 0x41c
    6b5a:	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    6b5c:	str.w	r3, [r4, #1056]	; 0x420
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    6b60:	ldr	r3, [r6, #88]	; 0x58
    6b62:	add	r5, r3
    6b64:	str.w	r5, [r4, #1060]	; 0x424
    6b68:	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    6b6a:	str.w	r3, [r4, #1064]	; 0x428
    6b6e:	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    6b70:	str.w	r3, [r4, #1068]	; 0x42c
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    6b74:	ldrb.w	r3, [r6, #109]	; 0x6d
    6b78:	strb.w	r3, [r4, #1085]	; 0x43d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    6b7c:	movs	r5, #1
    6b7e:	adds	r3, #9
    6b80:	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    6b84:	subs	r2, r3, #1
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    6b86:	str.w	r0, [r4, #1048]	; 0x418
  bitmapFind(0, 1);
    6b8a:	mov	r1, r0
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    6b8c:	str.w	r3, [r4, #1076]	; 0x434
  m_clusterMask = m_bytesPerCluster - 1;
    6b90:	str.w	r2, [r4, #1072]	; 0x430
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    6b94:	mov	r0, r4
    6b96:	mov	r2, r5
    6b98:	bl	6a18 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    6b9c:	movs	r3, #64	; 0x40
    6b9e:	strb.w	r3, [r4, #1084]	; 0x43c
  return true;
    6ba2:	mov	r0, r5

 fail:
  return false;
}
    6ba4:	pop	{r3, r4, r5, r6, r7, pc}
    6ba6:	nop
    6ba8:	.word	0x00011d20

00006bac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    6bac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
    6bb0:	subs	r1, #2
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    6bb2:	mov	r8, r0
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    6bb4:	ldr.w	r0, [r0, #1064]	; 0x428
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    6bb8:	mov	r5, r2
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    6bba:	adds	r2, r1, r2
    6bbc:	cmp	r2, r0
    6bbe:	bhi.n	6c32 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    6bc0:	mov	sl, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    6bc2:	ldr.w	r3, [r8, #1048]	; 0x418
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    6bc6:	cmp.w	sl, #0
    6bca:	bne.n	6c38 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    6bcc:	cmp	r1, r3
      m_bitmapStart = start;
    6bce:	it	cc
    6bd0:	strcc.w	r1, [r8, #1048]	; 0x418
    }
  }
  mask = 1 << (start & 7);
    6bd4:	and.w	r4, r1, #7
    6bd8:	movs	r2, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    6bda:	ldr.w	r3, [r8, #1060]	; 0x424
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    6bde:	lsl.w	r4, r2, r4
    6be2:	uxtb	r4, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    6be4:	add.w	r9, r3, r1, lsr #12
  i = (start >> 3) & m_sectorMask;
    6be8:	ubfx	r6, r1, #3, #9
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    6bec:	movs	r2, #1
    6bee:	mov	r1, r9
    6bf0:	mov	r0, r8
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    6bf2:	add	r9, r2
    6bf4:	bl	6948 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    6bf8:	cbz	r0, 6c32 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    6bfa:	adds	r7, r0, r6
    6bfc:	add.w	r0, r0, #512	; 0x200
    6c00:	ldrb.w	r2, [r7], #1
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    6c04:	tst	r2, r4
    6c06:	ite	ne
    6c08:	movne	r6, #1
    6c0a:	moveq	r6, #0
    6c0c:	cmp	r6, sl
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    6c0e:	eor.w	r2, r2, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    6c12:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    6c16:	beq.n	6c32 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
    6c18:	subs	r5, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    6c1a:	strb.w	r2, [r7, #-1]
        if (--count == 0) {
    6c1e:	beq.n	6c4c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa0>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    6c20:	ands.w	r4, r4, #255	; 0xff
    6c24:	bne.n	6c04 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x58>
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    6c26:	cmp	r0, r7
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    6c28:	mov	r6, r4
    6c2a:	mov.w	r4, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    6c2e:	bne.n	6c00 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    6c30:	b.n	6bec <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x40>
    }
    i = 0;
  }

 fail:
  return false;
    6c32:	movs	r0, #0
    6c34:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    6c38:	cmp	r1, r3
    6c3a:	bhi.n	6bd4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
    6c3c:	cmp	r2, r3
    6c3e:	bls.n	6bd4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    6c40:	cmp	r2, r0
    6c42:	it	cs
    6c44:	movcs	r2, #0
    6c46:	str.w	r2, [r8, #1048]	; 0x418
    6c4a:	b.n	6bd4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
    6c4c:	movs	r0, #1
    i = 0;
  }

 fail:
  return false;
}
    6c4e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6c52:	nop

00006c54 <ExFatPartition::chainSize(unsigned long)>:
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    6c54:	push	{r4, r5, r6, lr}
    6c56:	sub	sp, #8
    6c58:	add	r6, sp, #8
    6c5a:	mov	r5, r0
    6c5c:	str.w	r1, [r6, #-4]!
  uint32_t n = 0;
    6c60:	movs	r4, #0
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    6c62:	ldr.w	r3, [r5, #1064]	; 0x428
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    6c66:	ldr	r1, [sp, #4]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    6c68:	adds	r3, #1
    6c6a:	cmp	r1, r3
    6c6c:	bls.n	6c74 <ExFatPartition::chainSize(unsigned long)+0x20>
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    6c6e:	movs	r0, #0
    n++;
  } while (status);
  return n;
}
    6c70:	add	sp, #8
    6c72:	pop	{r4, r5, r6, pc}
    6c74:	mov	r2, r6
    6c76:	mov	r0, r5
    6c78:	bl	69a8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    6c7c:	sxtb	r0, r0
    if (status < 0) return 0;
    6c7e:	cmp	r0, #0
    6c80:	blt.n	6c6e <ExFatPartition::chainSize(unsigned long)+0x1a>
    n++;
    6c82:	add.w	r4, r4, #1
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    6c86:	bne.n	6c62 <ExFatPartition::chainSize(unsigned long)+0xe>
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    6c88:	mov	r0, r4
  } while (status);
  return n;
}
    6c8a:	add	sp, #8
    6c8c:	pop	{r4, r5, r6, pc}
    6c8e:	nop

00006c90 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
//-----------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    6c90:	push	{r3, r4, r5, r6, r7, lr}
    6c92:	mov	r6, r1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    6c94:	ldmia.w	r6, {r3, r5}
    6c98:	ldr.w	r1, [r0, #1072]	; 0x430
    6c9c:	ldr.w	r4, [r0, #1060]	; 0x424
    6ca0:	ldrb.w	r7, [r0, #1085]	; 0x43d
    6ca4:	ands	r1, r5
    6ca6:	subs	r3, #2
    6ca8:	add.w	r1, r4, r1, lsr #9
    6cac:	lsls	r3, r7
    6cae:	add	r1, r3
    6cb0:	add.w	r0, r0, #524	; 0x20c
    6cb4:	bl	6948 <FsCache::get(unsigned long, unsigned char)>
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    6cb8:	cbz	r0, 6cc2 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x32>
    6cba:	ldr	r3, [r6, #4]
    6cbc:	ubfx	r3, r3, #0, #9
    6cc0:	add	r0, r3
}
    6cc2:	pop	{r3, r4, r5, r6, r7, pc}

00006cc4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    6cc4:	push	{r4, r5, r6, lr}
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    6cc6:	ldr	r4, [r1, #4]
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    6cc8:	mov	r5, r1
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
    6cca:	adds	r3, r4, r2
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    6ccc:	ldr.w	r1, [r0, #1072]	; 0x430
  pos->position += offset;
    6cd0:	str	r3, [r5, #4]
  tmp >>= bytesPerClusterShift();
    6cd2:	ldrb.w	r3, [r0, #1085]	; 0x43d
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    6cd6:	ands	r4, r1
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    6cd8:	adds	r3, #9
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    6cda:	add	r2, r4
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    6cdc:	uxtb	r3, r3
    6cde:	lsr.w	r4, r2, r3
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    6ce2:	mov	r6, r0
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    6ce4:	cbz	r4, 6cf6 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
    if (pos->isContiguous) {
    6ce6:	ldrb	r3, [r5, #8]
    6ce8:	cbz	r3, 6cfa <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x36>
      pos->cluster++;
    6cea:	ldr	r3, [r5, #0]
    6cec:	adds	r3, #1
    6cee:	str	r3, [r5, #0]
    6cf0:	subs	r4, #1
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    6cf2:	cmp	r4, #0
    6cf4:	bne.n	6ce6 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x22>
      if (status != 1) {
        return status;
      }
    }
  }
  return 1;
    6cf6:	movs	r0, #1
    6cf8:	pop	{r4, r5, r6, pc}
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    6cfa:	ldr.w	r3, [r6, #1064]	; 0x428
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    6cfe:	ldr	r1, [r5, #0]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    6d00:	adds	r3, #1
    6d02:	cmp	r1, r3
    6d04:	bls.n	6d0c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x48>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    6d06:	mov.w	r0, #4294967295
        return status;
      }
    }
  }
  return 1;
}
    6d0a:	pop	{r4, r5, r6, pc}
    6d0c:	mov	r2, r5
    6d0e:	mov	r0, r6
    6d10:	bl	69a8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    6d14:	sxtb	r0, r0
      if (status != 1) {
    6d16:	cmp	r0, #1
    6d18:	beq.n	6cf0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
    6d1a:	pop	{r4, r5, r6, pc}

00006d1c <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    6d1c:	ldr.w	r3, [r0, #1064]	; 0x428
    6d20:	adds	r3, #1
    6d22:	cmp	r3, r1
    6d24:	bcs.n	6d2a <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xe>
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    6d26:	movs	r0, #255	; 0xff
    6d28:	bx	lr
    6d2a:	b.w	69a8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
    6d2e:	nop

00006d30 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    6d30:	cmp	r1, #1
    6d32:	bls.n	6d50 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x20>
    6d34:	ldr.w	r3, [r0, #1064]	; 0x428
    6d38:	adds	r3, #1
    6d3a:	cmp	r1, r3
  }
  *value = next;
  return 1;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    6d3c:	push	{r4}
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    6d3e:	bls.n	6d48 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x18>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
}
    6d40:	movs	r0, #0
    6d42:	ldr.w	r4, [sp], #4
    6d46:	bx	lr
    6d48:	ldr.w	r4, [sp], #4
    6d4c:	b.w	69dc <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    6d50:	movs	r0, #0
    6d52:	bx	lr

00006d54 <ExFatPartition::freeChain(unsigned long)>:
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    6d54:	push	{r4, r5, r6, r7, lr}
    6d56:	mov	r4, r1
    6d58:	sub	sp, #12
    6d5a:	mov	r5, r0
  uint32_t next;
  uint32_t start = cluster;
    6d5c:	mov	r6, r1
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    6d5e:	ldr.w	r3, [r5, #1064]	; 0x428
    6d62:	adds	r3, #1
    6d64:	cmp	r4, r3
    6d66:	bls.n	6d6e <ExFatPartition::freeChain(unsigned long)+0x1a>
  } while (status);

  return true;

 fail:
  return false;
    6d68:	movs	r0, #0
}
    6d6a:	add	sp, #12
    6d6c:	pop	{r4, r5, r6, r7, pc}
    6d6e:	add	r2, sp, #4
    6d70:	mov	r1, r4
    6d72:	mov	r0, r5
    6d74:	bl	69a8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    6d78:	sxtb	r7, r0
    if (status < 0) {
    6d7a:	cmp	r7, #0
    6d7c:	blt.n	6d68 <ExFatPartition::freeChain(unsigned long)+0x14>
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    6d7e:	cmp	r4, #1
    6d80:	bls.n	6d68 <ExFatPartition::freeChain(unsigned long)+0x14>
    6d82:	ldr.w	r3, [r5, #1064]	; 0x428
    6d86:	adds	r3, #1
    6d88:	cmp	r4, r3
    6d8a:	bhi.n	6d68 <ExFatPartition::freeChain(unsigned long)+0x14>
    6d8c:	movs	r2, #0
    6d8e:	mov	r1, r4
    6d90:	mov	r0, r5
    6d92:	bl	69dc <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    6d96:	cmp	r0, #0
    6d98:	beq.n	6d68 <ExFatPartition::freeChain(unsigned long)+0x14>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    6d9a:	ldr	r3, [sp, #4]
    6d9c:	adds	r4, #1
    6d9e:	cmp	r4, r3
    6da0:	bne.n	6dba <ExFatPartition::freeChain(unsigned long)+0x66>
    6da2:	cmp	r7, #0
    6da4:	bne.n	6d5e <ExFatPartition::freeChain(unsigned long)+0xa>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    6da6:	mov	r3, r7
    6da8:	subs	r2, r4, r6
    6daa:	mov	r1, r6
    6dac:	mov	r0, r5
    6dae:	bl	6bac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    6db2:	cmp	r0, #0
    6db4:	beq.n	6d68 <ExFatPartition::freeChain(unsigned long)+0x14>

  return true;

 fail:
  return false;
}
    6db6:	add	sp, #12
    6db8:	pop	{r4, r5, r6, r7, pc}
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    6dba:	subs	r2, r4, r6
    6dbc:	mov	r1, r6
    6dbe:	movs	r3, #0
    6dc0:	mov	r0, r5
    6dc2:	bl	6bac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    6dc6:	cmp	r0, #0
    6dc8:	beq.n	6d68 <ExFatPartition::freeChain(unsigned long)+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    6dca:	ldr	r4, [sp, #4]
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    6dcc:	cmp	r7, #0
    6dce:	beq.n	6d6a <ExFatPartition::freeChain(unsigned long)+0x16>
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    6dd0:	mov	r6, r4
    6dd2:	b.n	6d5e <ExFatPartition::freeChain(unsigned long)+0xa>

00006dd4 <ExFatPartition::freeClusterCount()>:

 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    6dd4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    6dd8:	movs	r4, #0
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
    6dda:	ldr.w	r6, [r0, #1060]	; 0x424

 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    6dde:	mov	r8, r0
    6de0:	add.w	r7, r0, #524	; 0x20c
  uint32_t nc = 0;
    6de4:	mov	r5, r4
    6de6:	mov	r1, r6
    6de8:	movs	r2, #0
    6dea:	mov	r0, r7
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
  uint8_t* cache;

  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    6dec:	adds	r6, #1
    6dee:	bl	6948 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    6df2:	cbz	r0, 6e42 <ExFatPartition::freeClusterCount()+0x6e>
    6df4:	add.w	lr, r0, #4294967295
    6df8:	ldr.w	ip, [r8, #1064]	; 0x428
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    6dfc:	ldrb.w	r0, [lr, #1]!
    6e00:	cmp	r0, #255	; 0xff
    6e02:	add.w	r9, r5, #4096	; 0x1000
    6e06:	beq.n	6e30 <ExFatPartition::freeClusterCount()+0x5c>
        usedCount+= 8;
      } else if (cache[i]) {
    6e08:	cbz	r0, 6e1e <ExFatPartition::freeClusterCount()+0x4a>
    6e0a:	movs	r2, #8
    6e0c:	movs	r3, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
          if ((mask & cache[i])) {
    6e0e:	tst	r0, r3
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    6e10:	mov.w	r1, r3, lsl #1
          if ((mask & cache[i])) {
            usedCount++;
    6e14:	it	ne
    6e16:	addne	r4, #1
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    6e18:	subs	r2, #1
    6e1a:	uxtb	r3, r1
    6e1c:	bne.n	6e0e <ExFatPartition::freeClusterCount()+0x3a>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    6e1e:	adds	r5, #8
      if (nc >= m_clusterCount) {
    6e20:	cmp	ip, r5
    6e22:	bls.n	6e3a <ExFatPartition::freeClusterCount()+0x66>
  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    6e24:	cmp	r5, r9
    6e26:	beq.n	6de6 <ExFatPartition::freeClusterCount()+0x12>
      if (cache[i] == 0XFF) {
    6e28:	ldrb.w	r0, [lr, #1]!
    6e2c:	cmp	r0, #255	; 0xff
    6e2e:	bne.n	6e08 <ExFatPartition::freeClusterCount()+0x34>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    6e30:	adds	r5, #8
      if (nc >= m_clusterCount) {
    6e32:	cmp	ip, r5
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
    6e34:	add.w	r4, r4, #8
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    6e38:	bhi.n	6e24 <ExFatPartition::freeClusterCount()+0x50>
        return m_clusterCount - usedCount;
    6e3a:	rsb	r0, r4, ip
    6e3e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      }
    }
  }
}
    6e42:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6e46:	nop

00006e48 <ExFatPartition::rootLength()>:
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    6e48:	push	{r4, lr}
    6e4a:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    6e4c:	ldr.w	r1, [r0, #1068]	; 0x42c
    6e50:	bl	6c54 <ExFatPartition::chainSize(unsigned long)>
  return nc << bytesPerClusterShift();
    6e54:	ldrb.w	r3, [r4, #1085]	; 0x43d
    6e58:	adds	r3, #9
    6e5a:	uxtb	r3, r3
}
    6e5c:	lsls	r0, r3
    6e5e:	pop	{r4, pc}

00006e60 <exFatHashName(char const*, unsigned int, unsigned short)>:
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    6e60:	cbz	r1, 6e96 <exFatHashName(char const*, unsigned int, unsigned short)+0x36>
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
    6e62:	push	{r4}
    6e64:	add	r1, r0
    6e66:	lsls	r3, r2, #15
    6e68:	orr.w	r3, r3, r2, lsr #1
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    6e6c:	ldrb.w	r2, [r0], #1
    if ('a' <= c && c <= 'z') {
    6e70:	sub.w	r4, r2, #97	; 0x61
    6e74:	cmp	r4, #25
      c -= 'a' - 'A';
    6e76:	itt	ls
    6e78:	subls	r2, #32
    6e7a:	uxtbls	r2, r2
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    6e7c:	uxtah	r2, r2, r3
    6e80:	uxth	r2, r2
    6e82:	lsls	r3, r2, #15
    6e84:	orr.w	r2, r3, r2, lsr #1
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    6e88:	cmp	r1, r0
    6e8a:	uxth	r2, r2
    6e8c:	bne.n	6e66 <exFatHashName(char const*, unsigned int, unsigned short)+0x6>
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    hash = ((hash << 15) | (hash >> 1));
  }
  return hash;
}
    6e8e:	mov	r0, r2
    6e90:	ldr.w	r4, [sp], #4
    6e94:	bx	lr
    6e96:	mov	r0, r2
    6e98:	bx	lr
    6e9a:	nop

00006e9c <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>:
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    6e9c:	cbz	r3, 6ef0 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x54>
  }
  return hash;
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
    6e9e:	push	{r4, r5, r6}
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    6ea0:	ldrh	r4, [r0, #2]
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    6ea2:	cmp	r4, #126	; 0x7e
    6ea4:	bhi.n	6ee4 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
    6ea6:	add	r3, r2
    6ea8:	adds	r5, r1, r3
    6eaa:	add	r2, r1
    6eac:	adds	r0, #2
    6eae:	ldrb.w	r3, [r2], #1
    6eb2:	uxtb	r4, r4
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    6eb4:	sub.w	r1, r3, #97	; 0x61
    6eb8:	cmp	r1, #25
    6eba:	sub.w	r1, r4, #97	; 0x61
    6ebe:	ite	ls
    6ec0:	movls	r6, #32
    6ec2:	movhi	r6, #0
    6ec4:	cmp	r1, #25
    6ec6:	ite	ls
    6ec8:	movls	r1, #32
    6eca:	movhi	r1, #0
    6ecc:	subs	r3, r3, r6
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    6ece:	subs	r4, r4, r1
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    6ed0:	uxtb	r3, r3
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    6ed2:	uxtb	r4, r4
    6ed4:	cmp	r4, r3
    6ed6:	bne.n	6ee4 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    6ed8:	cmp	r2, r5
    6eda:	beq.n	6eea <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4e>
    6edc:	ldrh.w	r4, [r0, #2]!
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    6ee0:	cmp	r4, #126	; 0x7e
    6ee2:	bls.n	6eae <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x12>
      return false;
    6ee4:	movs	r0, #0
    }
  }
  return true;
}
    6ee6:	pop	{r4, r5, r6}
    6ee8:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    6eea:	movs	r0, #1
}
    6eec:	pop	{r4, r5, r6}
    6eee:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    6ef0:	movs	r0, #1
}
    6ef2:	bx	lr

00006ef4 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    6ef4:	ldr	r1, [r0, #24]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    6ef6:	push	{r3, r4, r5, r6, r7, lr}
    6ef8:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    6efa:	ldr	r0, [r0, #32]
    6efc:	cbz	r1, 6f00 <ExFatFile::addCluster()+0xc>
    6efe:	adds	r1, #1
    6f00:	movs	r2, #1
    6f02:	bl	6a18 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    6f06:	cmp	r0, #1
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    6f08:	mov	r6, r0
  if (find < 2) {
    6f0a:	bls.n	6f6c <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    6f0c:	movs	r3, #1
    6f0e:	mov	r1, r0
    6f10:	mov	r2, r3
    6f12:	ldr	r0, [r4, #32]
    6f14:	bl	6bac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    6f18:	mov	r7, r0
    6f1a:	cbz	r0, 6f6c <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    6f1c:	ldr	r0, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    6f1e:	ldrb.w	r3, [r4, #51]	; 0x33
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    6f22:	cbz	r0, 6f72 <ExFatFile::addCluster()+0x7e>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    6f24:	lsls	r2, r3, #25
    6f26:	bpl.n	6f50 <ExFatFile::addCluster()+0x5c>
    if (find == (m_curCluster + 1)) {
    6f28:	adds	r2, r0, #1
    6f2a:	cmp	r6, r2
    6f2c:	beq.n	6f7a <ExFatFile::addCluster()+0x86>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    6f2e:	bic.w	r2, r3, #64	; 0x40
    6f32:	strb.w	r2, [r4, #51]	; 0x33

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6f36:	ldr	r3, [r4, #28]
    6f38:	b.n	6f46 <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    6f3a:	ldr	r0, [r4, #32]
    6f3c:	bl	6d30 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6f40:	cbz	r0, 6f6c <ExFatFile::addCluster()+0x78>
    6f42:	ldr	r0, [r4, #24]
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6f44:	mov	r3, r5
      if (!m_vol->fatPut(c, c + 1)) {
    6f46:	adds	r5, r3, #1
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6f48:	cmp	r3, r0
      if (!m_vol->fatPut(c, c + 1)) {
    6f4a:	mov	r1, r3
    6f4c:	mov	r2, r5
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6f4e:	bcc.n	6f3a <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    6f50:	mov.w	r2, #4294967295
    6f54:	mov	r1, r6
    6f56:	ldr	r0, [r4, #32]
    6f58:	bl	6d30 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6f5c:	cbz	r0, 6f6c <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    6f5e:	ldr	r1, [r4, #24]
    6f60:	cbz	r1, 6f7a <ExFatFile::addCluster()+0x86>
    if (!m_vol->fatPut(m_curCluster, find)) {
    6f62:	mov	r2, r6
    6f64:	ldr	r0, [r4, #32]
    6f66:	bl	6d30 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6f6a:	cbnz	r0, 6f7a <ExFatFile::addCluster()+0x86>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    6f6c:	movs	r7, #0
}
    6f6e:	mov	r0, r7
    6f70:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    6f72:	orr.w	r3, r3, #64	; 0x40
    6f76:	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    6f7a:	str	r6, [r4, #24]
  return true;

 fail:
  return false;
}
    6f7c:	mov	r0, r7
    6f7e:	pop	{r3, r4, r5, r6, r7, pc}

00006f80 <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    6f80:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirPos_t pos = m_dirPos;
    6f84:	add.w	r3, r0, #36	; 0x24

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    6f88:	mov	r5, r0
  DirPos_t pos = m_dirPos;
    6f8a:	ldmia.w	r3, {r0, r1, r2}

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    6f8e:	sub	sp, #20
    6f90:	ldrb.w	r3, [r5, #51]	; 0x33
  DirPos_t pos = m_dirPos;
    6f94:	add	r6, sp, #4
    6f96:	stmia.w	r6, {r0, r1, r2}
  uint8_t* cache;
  if (!isWritable()) {
    6f9a:	lsls	r2, r3, #30
    6f9c:	bpl.n	6fd6 <ExFatFile::remove()+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    6f9e:	ldr	r1, [r5, #28]
    6fa0:	cbnz	r1, 6fde <ExFatFile::remove()+0x5e>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    6fa2:	movs	r4, #0
  for (uint8_t i = 0; i <= m_setCount; i++) {
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    6fa4:	movs	r2, #1
    6fa6:	mov	r1, r6
    6fa8:	ldr	r0, [r5, #32]
    6faa:	bl	6c90 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    6fae:	adds	r4, #1
    6fb0:	uxtb	r4, r4
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
    6fb2:	cbz	r0, 6fd6 <ExFatFile::remove()+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    6fb4:	ldrb	r3, [r0, #0]
    6fb6:	and.w	r3, r3, #127	; 0x7f
    6fba:	strb	r3, [r0, #0]
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    6fbc:	ldrb.w	r3, [r5, #48]	; 0x30
    6fc0:	cmp	r3, r4
    6fc2:	bcc.n	7028 <ExFatFile::remove()+0xa8>
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
    6fc4:	cmp	r4, #0
    6fc6:	beq.n	6fa4 <ExFatFile::remove()+0x24>
    6fc8:	movs	r2, #32
    6fca:	mov	r1, r6
    6fcc:	ldr	r0, [r5, #32]
    6fce:	bl	6cc4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    6fd2:	cmp	r0, #1
    6fd4:	beq.n	6fa4 <ExFatFile::remove()+0x24>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    6fd6:	movs	r0, #0
}
    6fd8:	add	sp, #20
    6fda:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    6fde:	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    6fe0:	ldr	r0, [r5, #32]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    6fe2:	bpl.n	701e <ExFatFile::remove()+0x9e>
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    6fe4:	ldrd	r2, r3, [r5, #8]
    6fe8:	ldrb.w	r4, [r0, #1085]	; 0x43d
    6fec:	adds	r4, #9
    6fee:	uxtb	r4, r4
    6ff0:	adds.w	r8, r2, #4294967295
    6ff4:	adc.w	r9, r3, #4294967295
    6ff8:	rsb	r7, r4, #32
    6ffc:	lsl.w	r7, r9, r7
    7000:	lsr.w	r2, r8, r4
    7004:	sub.w	r3, r4, #32
    7008:	lsr.w	r3, r9, r3
    700c:	orrs	r2, r7
    700e:	orrs	r2, r3
    7010:	adds	r2, #1
    7012:	movs	r3, #0
    7014:	bl	6bac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    7018:	cmp	r0, #0
    701a:	bne.n	6fa2 <ExFatFile::remove()+0x22>
    701c:	b.n	6fd6 <ExFatFile::remove()+0x56>
        DBG_FAIL_MACRO;
        goto fail;
      }
    } else {
      if (!m_vol->freeChain(m_firstCluster)) {
    701e:	bl	6d54 <ExFatPartition::freeChain(unsigned long)>
    7022:	cmp	r0, #0
    7024:	bne.n	6fa2 <ExFatFile::remove()+0x22>
    7026:	b.n	6fd6 <ExFatFile::remove()+0x56>
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  return m_vol->cacheSync();
    7028:	ldr	r4, [r5, #32]
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    702a:	movs	r3, #0
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    702c:	mov	r0, r4
    702e:	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    7032:	strb.w	r3, [r5, #51]	; 0x33
    7036:	bl	6a08 <FsCache::sync()>
    703a:	cmp	r0, #0
    703c:	beq.n	6fd6 <ExFatFile::remove()+0x56>
    703e:	add.w	r0, r4, #524	; 0x20c
    7042:	bl	6a08 <FsCache::sync()>
    7046:	cmp	r0, #0
    7048:	beq.n	6fd6 <ExFatFile::remove()+0x56>
    704a:	ldr.w	r0, [r4, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    704e:	ldr	r3, [r0, #0]
    7050:	ldr	r3, [r3, #20]
    7052:	blx	r3
    7054:	b.n	6fd8 <ExFatFile::remove()+0x58>
    7056:	nop

00007058 <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    7058:	ldrb.w	r3, [r0, #49]	; 0x31
    705c:	lsls	r1, r3, #27
    705e:	bmi.n	7064 <ExFatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    7060:	movs	r0, #0
}
    7062:	bx	lr

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    7064:	push	{r4, lr}
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    7066:	movs	r2, #0
    7068:	sub	sp, #32
    706a:	movs	r3, #0
    706c:	mov	r4, r0
    706e:	bl	6154 <ExFatFile::seekSet(unsigned long long)>
    7072:	b.n	7082 <ExFatFile::rmdir()+0x2a>
  while (1) {
    n = read(dir, 32);
    if (n == 0) {
      break;
    }
    if (n != 32 || dir[0] & 0X80) {
    7074:	cmp	r0, #32
    7076:	bne.n	70ac <ExFatFile::rmdir()+0x54>
    7078:	ldrb.w	r3, [sp]
    707c:	lsls	r2, r3, #24
    707e:	bmi.n	70ac <ExFatFile::rmdir()+0x54>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (dir[0] == 0) {
    7080:	cbz	r3, 7090 <ExFatFile::rmdir()+0x38>
  }
  rewind();

  // make sure directory is empty
  while (1) {
    n = read(dir, 32);
    7082:	movs	r2, #32
    7084:	mov	r1, sp
    7086:	mov	r0, r4
    7088:	bl	5f84 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    708c:	cmp	r0, #0
    708e:	bne.n	7074 <ExFatFile::rmdir()+0x1c>
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    7090:	ldrb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    7094:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
    7096:	orr.w	r3, r3, #2
    709a:	strb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    709e:	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    70a2:	mov	r0, r4
    70a4:	bl	6f80 <ExFatFile::remove()>

fail:
  return false;
}
    70a8:	add	sp, #32
    70aa:	pop	{r4, pc}
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    70ac:	movs	r0, #0
}
    70ae:	add	sp, #32
    70b0:	pop	{r4, pc}
    70b2:	nop

000070b4 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    70b4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    70b8:	add.w	fp, r0, #36	; 0x24
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    70bc:	mov	r6, r0
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    70be:	ldmia.w	fp, {r0, r1, r2}
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    70c2:	sub	sp, #28
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    70c4:	add.w	r8, sp, #12
    70c8:	stmia.w	r8, {r0, r1, r2}
    70cc:	movs	r7, #0
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;
    70ce:	mov	sl, r7
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    70d0:	mov	r4, r7
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    70d2:	movs	r2, #0
    70d4:	mov	r1, r8
    70d6:	ldr	r0, [r6, #32]
    70d8:	bl	6c90 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    70dc:	uxtb.w	r9, r7
    if (!cache) {
    70e0:	mov	r5, r0
    70e2:	cbz	r0, 70f2 <ExFatFile::syncDir()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    70e4:	ldrb	r2, [r0, #0]
    70e6:	cmp	r2, #192	; 0xc0
    70e8:	beq.n	7190 <ExFatFile::syncDir()+0xdc>
    70ea:	cmp	r2, #193	; 0xc1
    70ec:	beq.n	7106 <ExFatFile::syncDir()+0x52>
    70ee:	cmp	r2, #133	; 0x85
    70f0:	beq.n	7146 <ExFatFile::syncDir()+0x92>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    70f2:	ldrb.w	r3, [r6, #50]	; 0x32
    70f6:	orr.w	r3, r3, #1
    70fa:	strb.w	r3, [r6, #50]	; 0x32
  return false;
    70fe:	movs	r0, #0
}
    7100:	add	sp, #28
    7102:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7106:	mov	r0, r2
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    7108:	movs	r1, #0
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    710a:	ldrb	r2, [r5, r1]
    710c:	lsls	r3, r4, #15
    710e:	orr.w	r4, r3, r4, lsr #1
    7112:	uxtah	r4, r2, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    7116:	cmp	r1, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    7118:	uxth	r4, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    711a:	add.w	r1, r1, #1
    711e:	beq.n	713c <ExFatFile::syncDir()+0x88>
    7120:	cmp	r1, #31
    7122:	bls.n	710a <ExFatFile::syncDir()+0x56>
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    if (i == setCount) break;
    7124:	cmp	sl, r9
    7126:	beq.n	71cc <ExFatFile::syncDir()+0x118>
    if (m_vol->dirSeek(&pos, 32) != 1) {
    7128:	movs	r2, #32
    712a:	mov	r1, r8
    712c:	ldr	r0, [r6, #32]
    712e:	bl	6cc4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    7132:	cmp	r0, #1
    7134:	add.w	r7, r7, #1
    7138:	beq.n	70d2 <ExFatFile::syncDir()+0x1e>
    713a:	b.n	70f2 <ExFatFile::syncDir()+0x3e>
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    713c:	cmp	r0, #133	; 0x85
    713e:	ite	eq
    7140:	moveq	r1, #4
    7142:	movne	r1, #2
    7144:	b.n	710a <ExFatFile::syncDir()+0x56>
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    7146:	ldr	r3, [pc, #192]	; (7208 <ExFatFile::syncDir()+0x154>)
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    7148:	ldrb.w	r1, [r6, #49]	; 0x31
    714c:	ldr	r3, [r3, #0]
      goto fail;
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
    714e:	ldrb.w	sl, [r0, #1]
    7152:	and.w	r1, r1, #55	; 0x37
    7156:	strh	r1, [r0, #4]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    7158:	cmp	r3, #0
    715a:	beq.n	7106 <ExFatFile::syncDir()+0x52>
          m_vol->dataCacheDirty();
    715c:	ldr	r1, [r6, #32]
    invalidate();
    return m_cacheBuffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    715e:	ldrb.w	r2, [r1, #524]	; 0x20c
    7162:	orr.w	r2, r2, #1
    7166:	strb.w	r2, [r1, #524]	; 0x20c
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    716a:	add	r0, sp, #8
    716c:	add.w	r2, sp, #7
    7170:	add.w	r1, sp, #10
    7174:	blx	r3
          df->modifyTimeMs = ms10;
          setLe16(df->modifyTime, time);
    7176:	ldrh.w	r2, [sp, #10]
          setLe16(df->modifyDate, date);
    717a:	ldrh.w	r3, [sp, #8]
        if (FsDateTime::callback) {
          m_vol->dataCacheDirty();
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
    717e:	ldrb.w	r1, [sp, #7]
    7182:	strb	r1, [r5, #21]
    7184:	strh	r2, [r5, #12]
    7186:	strh	r2, [r5, #16]
    7188:	strh	r3, [r5, #14]
    718a:	strh	r3, [r5, #18]
    718c:	ldrb	r0, [r5, #0]
    718e:	b.n	7108 <ExFatFile::syncDir()+0x54>
        }
        break;

      case EXFAT_TYPE_STREAM:
        ds = reinterpret_cast<DirStream_t*>(cache);
        if (isContiguous()) {
    7190:	ldrb.w	r3, [r6, #51]	; 0x33
    7194:	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    7198:	ldrb	r3, [r0, #1]
    719a:	ite	ne
    719c:	orrne.w	r3, r3, #2
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    71a0:	biceq.w	r3, r3, #2
    71a4:	strb	r3, [r0, #1]
        }
        setLe64(ds->validLength, m_validLength);
    71a6:	ldrd	r2, r3, [r6, #16]

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    71aa:	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
    71ae:	ldrd	r2, r3, [r6, #8]
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
    71b2:	ldr	r1, [r6, #28]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    71b4:	str	r1, [r0, #20]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    71b6:	strd	r2, r3, [r0, #24]
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    71ba:	ldr	r2, [r6, #32]
    71bc:	ldrb.w	r3, [r2, #524]	; 0x20c
    71c0:	orr.w	r3, r3, #1
    71c4:	strb.w	r3, [r2, #524]	; 0x20c
    71c8:	ldrb	r0, [r0, #0]
    71ca:	b.n	7108 <ExFatFile::syncDir()+0x54>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  df = reinterpret_cast<DirFile_t *>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    71cc:	mov	r1, fp
    71ce:	movs	r2, #1
    71d0:	ldr	r0, [r6, #32]
    71d2:	bl	6c90 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    71d6:	cmp	r0, #0
    71d8:	beq.n	70f2 <ExFatFile::syncDir()+0x3e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    71da:	ldr	r5, [r6, #32]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    71dc:	strh	r4, [r0, #2]
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    71de:	mov	r0, r5
    71e0:	bl	6a08 <FsCache::sync()>
    71e4:	cmp	r0, #0
    71e6:	beq.n	70f2 <ExFatFile::syncDir()+0x3e>
    71e8:	add.w	r0, r5, #524	; 0x20c
    71ec:	bl	6a08 <FsCache::sync()>
    71f0:	cmp	r0, #0
    71f2:	beq.w	70f2 <ExFatFile::syncDir()+0x3e>
    71f6:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    71fa:	ldr	r3, [r0, #0]
    71fc:	ldr	r3, [r3, #20]
    71fe:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    7200:	cmp	r0, #0
    7202:	beq.w	70f2 <ExFatFile::syncDir()+0x3e>
    7206:	b.n	7100 <ExFatFile::syncDir()+0x4c>
    7208:	.word	0x1fff1f2c

0000720c <ExFatFile::sync()>:
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    720c:	ldrb.w	r2, [r0, #49]	; 0x31
    7210:	cbz	r2, 7238 <ExFatFile::sync()+0x2c>

fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
    7212:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    7214:	ldrb.w	r2, [r0, #51]	; 0x33
    7218:	lsls	r1, r2, #24
    721a:	bmi.n	723c <ExFatFile::sync()+0x30>
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
  }
  if (!m_vol->cacheSync()) {
    721c:	ldr	r5, [r0, #32]
    721e:	mov	r4, r0
    7220:	mov	r0, r5
    7222:	bl	6a08 <FsCache::sync()>
    7226:	cbnz	r0, 724c <ExFatFile::sync()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    7228:	ldrb.w	r3, [r4, #50]	; 0x32
    722c:	orr.w	r3, r3, #1
    7230:	strb.w	r3, [r4, #50]	; 0x32
  return false;
    7234:	movs	r0, #0
}
    7236:	pop	{r3, r4, r5, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    7238:	movs	r0, #1
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    723a:	bx	lr
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    723c:	and.w	r2, r2, #127	; 0x7f
    7240:	strb.w	r2, [r0, #51]	; 0x33
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    7244:	ldmia.w	sp!, {r3, r4, r5, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    7248:	b.w	70b4 <ExFatFile::syncDir()>
    724c:	add.w	r0, r5, #524	; 0x20c
    7250:	bl	6a08 <FsCache::sync()>
    7254:	cmp	r0, #0
    7256:	beq.n	7228 <ExFatFile::sync()+0x1c>
    7258:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    725c:	ldr	r3, [r0, #0]
    725e:	ldr	r3, [r3, #20]
    7260:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    7262:	cmp	r0, #0
    7264:	beq.n	7228 <ExFatFile::sync()+0x1c>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    7266:	movs	r0, #1
    7268:	pop	{r3, r4, r5, pc}
    726a:	nop

0000726c <ExFatFile::addDirCluster()>:

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    726c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    7270:	ldrb.w	r3, [r0, #49]	; 0x31
    7274:	lsls	r1, r3, #25

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    7276:	mov	r4, r0
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    7278:	bmi.n	7342 <ExFatFile::addDirCluster()+0xd6>
    727a:	ldr	r0, [r0, #8]
    727c:	ldr	r3, [r4, #32]
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    727e:	ldr.w	r3, [r3, #1076]	; 0x434
    7282:	add	r0, r3
    7284:	cmp.w	r0, #67108864	; 0x4000000
    7288:	bcc.n	7290 <ExFatFile::addDirCluster()+0x24>
  }
  return sync();

 fail:
  return false;
}
    728a:	movs	r0, #0
    728c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    7290:	mov	r0, r4
    7292:	bl	6ef4 <ExFatFile::addCluster()>
    7296:	cmp	r0, #0
    7298:	beq.n	728a <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
    729a:	ldr	r6, [r4, #32]
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    729c:	ldrb.w	r3, [r6, #524]	; 0x20c
    72a0:	lsls	r2, r3, #31

  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
    72a2:	add.w	r5, r6, #524	; 0x20c
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    72a6:	bmi.n	734a <ExFatFile::addDirCluster()+0xde>
      return nullptr;
    }
    invalidate();
    72a8:	mov	r0, r5
    return m_cacheBuffer;
    72aa:	add.w	r6, r6, #536	; 0x218
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    72ae:	bl	693c <FsCache::invalidate()>
  if (!cache) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
    72b2:	mov.w	r2, #512	; 0x200
    72b6:	movs	r1, #0
    72b8:	mov	r0, r6
    72ba:	bl	df8c <memset>
  sector = m_vol->clusterStartSector(m_curCluster);
    72be:	ldr	r2, [r4, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    72c0:	ldr	r3, [r4, #24]
    72c2:	ldrb.w	r0, [r2, #1085]	; 0x43d
    72c6:	ldr.w	r1, [r2, #1060]	; 0x424
    72ca:	sub.w	r8, r3, #2
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    72ce:	movs	r7, #1
    72d0:	lsl.w	r8, r8, r0
    72d4:	lsls.w	r3, r7, r0
    72d8:	add	r8, r1
    72da:	it	ne
    72dc:	movne	r5, #0
    72de:	beq.n	7304 <ExFatFile::addDirCluster()+0x98>
    72e0:	ldr.w	r0, [r2, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    72e4:	ldr	r3, [r0, #0]
    72e6:	add.w	r1, r8, r5
    72ea:	ldr	r3, [r3, #24]
    72ec:	mov	r2, r6
    72ee:	blx	r3
    72f0:	adds	r5, #1
    if (!m_vol->writeSector(sector + i, cache)) {
    72f2:	cmp	r0, #0
    72f4:	beq.n	728a <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
  sector = m_vol->clusterStartSector(m_curCluster);
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    72f6:	ldr	r2, [r4, #32]
    72f8:	ldrb.w	r3, [r2, #1085]	; 0x43d
    72fc:	lsl.w	r3, r7, r3
    7300:	cmp	r3, r5
    7302:	bhi.n	72e0 <ExFatFile::addDirCluster()+0x74>
    if (!m_vol->writeSector(sector + i, cache)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    7304:	ldrb.w	r3, [r4, #49]	; 0x31
    7308:	lsls	r3, r3, #25
    730a:	bmi.n	7338 <ExFatFile::addDirCluster()+0xcc>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    730c:	ldrb.w	r3, [r4, #51]	; 0x33
    7310:	orn	r3, r3, #127	; 0x7f
    7314:	strb.w	r3, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    7318:	ldr.w	r6, [r2, #1076]	; 0x434
    731c:	ldrd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    7320:	ldrd	r0, r1, [r4, #16]
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    7324:	adds	r2, r2, r6
    7326:	mov.w	r7, #0
    732a:	adcs	r3, r7
    m_validLength += m_vol->bytesPerCluster();
    732c:	adds	r0, r0, r6
    732e:	adcs	r1, r7
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    7330:	strd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    7334:	strd	r0, r1, [r4, #16]
  }
  return sync();
    7338:	mov	r0, r4

 fail:
  return false;
}
    733a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    m_validLength += m_vol->bytesPerCluster();
  }
  return sync();
    733e:	b.w	720c <ExFatFile::sync()>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    7342:	ldr	r0, [r0, #32]
    7344:	bl	6e48 <ExFatPartition::rootLength()>
    7348:	b.n	727c <ExFatFile::addDirCluster()+0x10>
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    734a:	mov	r0, r5
    734c:	bl	6a08 <FsCache::sync()>
    7350:	cmp	r0, #0
    7352:	bne.n	72a8 <ExFatFile::addDirCluster()+0x3c>
    7354:	b.n	728a <ExFatFile::addDirCluster()+0x1e>
    7356:	nop

00007358 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
  if (!parent->isDir()) {
    7358:	ldrb.w	r3, [r1, #49]	; 0x31
    735c:	tst.w	r3, #80	; 0x50
    7360:	bne.n	7366 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    7362:	movs	r0, #0
    7364:	bx	lr

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    7366:	push	{r4, r5, lr}
    7368:	sub	sp, #12
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    736a:	movw	r5, #2562	; 0xa02
    736e:	ldrb	r3, [r2, #0]
    7370:	ldr	r2, [r2, #4]
    7372:	str	r5, [sp, #0]
    7374:	mov	r4, r0
    7376:	bl	6254 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    737a:	cbnz	r0, 7382 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x2a>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    737c:	movs	r0, #0
    737e:	add	sp, #12
    7380:	pop	{r4, r5, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory

  m_attributes = FILE_ATTR_SUBDIR;
    7382:	movs	r3, #16
    7384:	strb.w	r3, [r4, #49]	; 0x31

  // allocate and zero first cluster
  if (!addDirCluster()) {
    7388:	mov	r0, r4
    738a:	bl	726c <ExFatFile::addDirCluster()>
    738e:	cmp	r0, #0
    7390:	beq.n	737c <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x24>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    7392:	ldr	r3, [r4, #24]
    7394:	str	r3, [r4, #28]
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    7396:	movs	r2, #0
    7398:	movs	r3, #0
    739a:	mov	r0, r4
    739c:	bl	6154 <ExFatFile::seekSet(unsigned long long)>

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    73a0:	movs	r3, #193	; 0xc1
  return sync();
    73a2:	mov	r0, r4
  }
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    73a4:	strb.w	r3, [r4, #51]	; 0x33
  return sync();

fail:
  return false;
}
    73a8:	add	sp, #12
    73aa:	ldmia.w	sp!, {r4, r5, lr}
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();
    73ae:	b.w	720c <ExFatFile::sync()>
    73b2:	nop

000073b4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    73b4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    73b8:	mov	r6, r0
    73ba:	sub	sp, #84	; 0x54
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    73bc:	ldrb.w	r5, [r6, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    73c0:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    73c2:	movs	r0, #0
    73c4:	strb.w	r0, [sp, #73]	; 0x49
    73c8:	strb.w	r0, [sp, #74]	; 0x4a
    73cc:	strb.w	r0, [sp, #75]	; 0x4b
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    73d0:	cbnz	r5, 73e0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    73d2:	mov	r9, r3
    73d4:	ldrb.w	r3, [r1, #49]	; 0x31
    73d8:	tst.w	r3, #80	; 0x50
    73dc:	mov	r4, r1
    73de:	bne.n	73e8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x34>
    close();
  }
  return mkdir(parent, &fname);

fail:
  return false;
    73e0:	movs	r0, #0
}
    73e2:	add	sp, #84	; 0x54
    73e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    73e8:	ldrb	r3, [r2, #0]
    73ea:	cmp	r3, #47	; 0x2f
    73ec:	mov	r1, r2
    73ee:	beq.n	745e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xaa>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    73f0:	mov.w	r8, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    73f4:	add	r3, sp, #12
    73f6:	add	r2, sp, #16
    73f8:	mov	r0, r6
    73fa:	bl	5e10 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    73fe:	cmp	r0, #0
    7400:	beq.n	73e0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    7402:	ldr	r3, [sp, #12]
    7404:	ldrb	r3, [r3, #0]
    7406:	cmp	r3, #0
    7408:	beq.n	747a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc6>
    740a:	ldrb.w	r3, [sp, #16]
    740e:	ldr	r2, [sp, #20]
    7410:	str.w	r8, [sp]
    7414:	mov	r1, r4
    7416:	mov	r0, r6
    7418:	bl	6254 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    741c:	cbnz	r0, 7432 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x7e>
      if (!pFlag || !mkdir(parent, &fname)) {
    741e:	cmp.w	r9, #0
    7422:	beq.n	73e0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    7424:	mov	r1, r4
    7426:	add	r2, sp, #16
    7428:	mov	r0, r6
    742a:	bl	7358 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    742e:	cmp	r0, #0
    7430:	beq.n	73e0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    7432:	mov	r4, r6
    7434:	add	r7, sp, #24
    7436:	add.w	lr, r6, #48	; 0x30
    743a:	ldr	r0, [r4, #0]
    743c:	ldr	r1, [r4, #4]
    743e:	ldr	r2, [r4, #8]
    7440:	ldr	r3, [r4, #12]
    7442:	mov	r5, r7
    7444:	stmia	r5!, {r0, r1, r2, r3}
    7446:	adds	r4, #16
    7448:	cmp	r4, lr
    744a:	mov	r7, r5
    744c:	bne.n	743a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x86>
    744e:	ldr	r0, [r4, #0]
    7450:	str	r0, [r5, #0]
    parent = &tmpDir;
    close();
    7452:	mov	r0, r6
    7454:	bl	5d2c <ExFatFile::close()>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    7458:	add	r4, sp, #24
    745a:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    745c:	b.n	73f4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    745e:	adds	r1, #1
    7460:	str	r1, [sp, #12]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    7462:	ldrb	r3, [r1, #0]
    7464:	cmp	r3, #47	; 0x2f
    7466:	beq.n	745e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xaa>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    7468:	ldr	r1, [r4, #32]
    746a:	add	r0, sp, #24
    746c:	bl	5de8 <ExFatFile::openRoot(ExFatVolume*)>
    7470:	cmp	r0, #0
    7472:	beq.n	73e0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    7474:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    7476:	add	r4, sp, #24
    7478:	b.n	73f0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3c>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    747a:	add	r2, sp, #16
    747c:	mov	r1, r4
    747e:	mov	r0, r6
    7480:	bl	7358 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>

fail:
  return false;
}
    7484:	add	sp, #84	; 0x54
    7486:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    748a:	nop

0000748c <ExFatFile::rename(ExFatFile*, char const*)>:
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    748c:	push	{r4, r5, r6, r7, lr}
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    748e:	ldrb.w	r4, [r0, #49]	; 0x31
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    7492:	sub	sp, #116	; 0x74
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    7494:	movs	r3, #0
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    7496:	tst.w	r4, #24
    749a:	strb.w	r3, [sp, #49]	; 0x31
    749e:	strb.w	r3, [sp, #50]	; 0x32
    74a2:	strb.w	r3, [sp, #51]	; 0x33
    74a6:	strb.w	r3, [sp, #105]	; 0x69
    74aa:	strb.w	r3, [sp, #106]	; 0x6a
    74ae:	strb.w	r3, [sp, #107]	; 0x6b
    74b2:	beq.n	74bc <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    74b4:	ldr	r3, [r1, #32]
    74b6:	ldr	r4, [r0, #32]
    74b8:	cmp	r4, r3
    74ba:	beq.n	74c2 <ExFatFile::rename(ExFatFile*, char const*)+0x36>
  oldFile.m_flags = FILE_FLAG_WRITE;
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

fail:
  return false;
    74bc:	movs	r0, #0
}
    74be:	add	sp, #116	; 0x74
    74c0:	pop	{r4, r5, r6, r7, pc}
    74c2:	mov	r4, r0
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    74c4:	movw	r3, #2561	; 0xa01
    74c8:	mov	r0, sp
    74ca:	bl	6628 <ExFatFile::open(ExFatFile*, char const*, int)>
    74ce:	cmp	r0, #0
    74d0:	beq.n	74bc <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
    74d2:	add	r7, sp, #56	; 0x38
    74d4:	mov	r5, r4
    74d6:	add.w	lr, r4, #48	; 0x30
    74da:	ldr	r0, [r5, #0]
    74dc:	ldr	r1, [r5, #4]
    74de:	ldr	r2, [r5, #8]
    74e0:	ldr	r3, [r5, #12]
    74e2:	mov	r6, r7
    74e4:	stmia	r6!, {r0, r1, r2, r3}
    74e6:	adds	r5, #16
    74e8:	cmp	r5, lr
    74ea:	mov	r7, r6
    74ec:	bne.n	74da <ExFatFile::rename(ExFatFile*, char const*)+0x4e>
    74ee:	ldr	r0, [r5, #0]
    74f0:	str	r0, [r6, #0]
  m_dirPos = file.m_dirPos;
    74f2:	add	r3, sp, #36	; 0x24
    74f4:	ldmia.w	r3, {r0, r1, r2}
    74f8:	add.w	r3, r4, #36	; 0x24
    74fc:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7500:	ldrb.w	r3, [r4, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
    7504:	ldrb.w	r2, [sp, #48]	; 0x30
    7508:	strb.w	r2, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    750c:	orn	r3, r3, #127	; 0x7f
    7510:	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    7514:	mov	r0, r4
    7516:	bl	720c <ExFatFile::sync()>
    751a:	cmp	r0, #0
    751c:	beq.n	74bc <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    751e:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    7520:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    7522:	movs	r3, #8
  return oldFile.remove();
    7524:	add	r0, sp, #56	; 0x38
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    7526:	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    7528:	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    752c:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    7530:	bl	6f80 <ExFatFile::remove()>
    7534:	b.n	74be <ExFatFile::rename(ExFatFile*, char const*)+0x32>
    7536:	nop

00007538 <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    7538:	ldrb.w	r3, [r0, #51]	; 0x33
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    753c:	lsls	r2, r3, #30
    753e:	bpl.n	7572 <ExFatFile::truncate()+0x3a>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    7540:	push	{r4, r5, r6, r7, lr}
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    7542:	ldr	r5, [r0, #28]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    7544:	sub	sp, #12
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    7546:	cbz	r5, 756c <ExFatFile::truncate()+0x34>
      return true;
  }
  if (isContiguous()) {
    7548:	and.w	r3, r3, #64	; 0x40
    754c:	mov	r4, r0
    754e:	and.w	r0, r3, #255	; 0xff
    7552:	cbnz	r3, 7576 <ExFatFile::truncate()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
    7554:	ldr	r1, [r4, #24]
    7556:	cmp	r1, #0
    7558:	bne.n	75de <ExFatFile::truncate()+0xa6>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else {
      toFree = m_firstCluster;
    755a:	str	r5, [sp, #4]
      m_firstCluster = 0;
    755c:	str	r1, [r4, #28]
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
    755e:	mov	r1, r5
    7560:	ldr	r0, [r4, #32]
    7562:	bl	6d54 <ExFatPartition::freeChain(unsigned long)>
    7566:	cbnz	r0, 75b6 <ExFatFile::truncate()+0x7e>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    7568:	movs	r0, #0
    756a:	b.n	756e <ExFatFile::truncate()+0x36>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    756c:	movs	r0, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    756e:	add	sp, #12
    7570:	pop	{r4, r5, r6, r7, pc}
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    7572:	movs	r0, #0
}
    7574:	bx	lr
    7576:	ldr	r0, [r4, #32]
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
    7578:	ldr	r1, [r4, #24]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    757a:	ldrb.w	r3, [r0, #1085]	; 0x43d
    757e:	ldrd	r6, r7, [r4, #8]
    7582:	adds	r3, #9
    7584:	uxtb	r3, r3
    7586:	adds.w	r6, r6, #4294967295
    758a:	rsb	lr, r3, #32
    758e:	adc.w	r7, r7, #4294967295
    7592:	lsr.w	r2, r6, r3
    7596:	lsl.w	lr, r7, lr
    759a:	subs	r3, #32
    759c:	orr.w	r2, r2, lr
    75a0:	lsr.w	r3, r7, r3
    75a4:	orrs	r2, r3
    75a6:	adds	r2, #1
    if (m_curCluster) {
    75a8:	cbz	r1, 75d8 <ExFatFile::truncate()+0xa0>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    75aa:	subs	r5, #1
    75ac:	subs	r5, r5, r1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    75ae:	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    75b0:	add	r2, r5
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    75b2:	str	r1, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    75b4:	cbnz	r2, 75fa <ExFatFile::truncate()+0xc2>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    75b6:	ldrd	r0, r1, [r4]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    75ba:	ldrb.w	r3, [r4, #51]	; 0x33
    75be:	orn	r3, r3, #127	; 0x7f
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    75c2:	strd	r0, r1, [r4, #8]
  m_validLength = m_curPosition;
    75c6:	strd	r0, r1, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    75ca:	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    75ce:	mov	r0, r4
    75d0:	bl	720c <ExFatFile::sync()>

 fail:
  return false;
}
    75d4:	add	sp, #12
    75d6:	pop	{r4, r5, r6, r7, pc}
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
    75d8:	str	r5, [sp, #4]
      m_firstCluster = 0;
    75da:	str	r1, [r4, #28]
    75dc:	b.n	75b4 <ExFatFile::truncate()+0x7c>
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    75de:	add	r2, sp, #8
    75e0:	str.w	r0, [r2, #-4]!
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    75e4:	ldr	r0, [r4, #32]
    75e6:	bl	6d1c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    75ea:	sxtb	r0, r0
      if (fg < 0) {
    75ec:	cmp	r0, #0
    75ee:	blt.n	7568 <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
    75f0:	bne.n	7608 <ExFatFile::truncate()+0xd0>
      }
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
    75f2:	ldr	r5, [sp, #4]
    75f4:	cmp	r5, #0
    75f6:	beq.n	75b6 <ExFatFile::truncate()+0x7e>
    75f8:	b.n	755e <ExFatFile::truncate()+0x26>
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    75fa:	movs	r3, #0
    75fc:	ldr	r1, [sp, #4]
    75fe:	bl	6bac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    7602:	cmp	r0, #0
    7604:	bne.n	75b6 <ExFatFile::truncate()+0x7e>
    7606:	b.n	7568 <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
        // current cluster is end of chain
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    7608:	mov.w	r2, #4294967295
    760c:	ldr	r1, [r4, #24]
    760e:	ldr	r0, [r4, #32]
    7610:	bl	6d30 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    7614:	cmp	r0, #0
    7616:	bne.n	75f2 <ExFatFile::truncate()+0xba>
    7618:	b.n	7568 <ExFatFile::truncate()+0x30>
    761a:	nop

0000761c <ExFatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    761c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7620:	ldrb.w	r3, [r0, #51]	; 0x33
    7624:	sub	sp, #20

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    7626:	lsls	r4, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    7628:	mov	r6, r0
    762a:	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    762c:	bmi.n	7644 <ExFatFile::write(void const*, unsigned int)+0x28>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    762e:	ldrb.w	r3, [r6, #50]	; 0x32
    7632:	orr.w	r3, r3, #1
    7636:	strb.w	r3, [r6, #50]	; 0x32
  return -1;
    763a:	mov.w	r0, #4294967295
}
    763e:	add	sp, #20
    7640:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    7644:	lsls	r2, r3, #28
    7646:	mov	sl, r1
    7648:	bmi.w	7870 <ExFatFile::write(void const*, unsigned int)+0x254>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    764c:	ldr	r3, [sp, #4]
    764e:	cmp	r3, #0
    7650:	beq.w	7898 <ExFatFile::write(void const*, unsigned int)+0x27c>
    7654:	mov	r1, r6
    7656:	ldrd	r2, r3, [r1], #24
    765a:	ldr.w	r8, [sp, #4]
    765e:	str	r1, [sp, #12]
    7660:	mov	fp, r2
    clusterOffset = m_curPosition & m_vol->clusterMask();
    7662:	ldr	r0, [r6, #32]
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    7664:	ldr	r5, [r6, #24]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    7666:	ldr.w	r4, [r0, #1072]	; 0x430
    766a:	mov	r3, fp
    766c:	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    766e:	ubfx	r9, r4, #0, #9
    if (clusterOffset == 0) {
    7672:	cbnz	r4, 76c8 <ExFatFile::write(void const*, unsigned int)+0xac>
      // start of new cluster
      if (m_curCluster != 0) {
    7674:	cmp	r5, #0
    7676:	beq.w	77f6 <ExFatFile::write(void const*, unsigned int)+0x1da>
        int fg;

        if (isContiguous()) {
    767a:	ldrb.w	r3, [r6, #51]	; 0x33
    767e:	lsls	r3, r3, #25
    7680:	bpl.w	783e <ExFatFile::write(void const*, unsigned int)+0x222>
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    7684:	ldrd	r2, r3, [r6, #8]
    7688:	ldrb.w	r7, [r0, #1085]	; 0x43d
    768c:	adds	r7, #9
    768e:	uxtb	r7, r7
    7690:	adds.w	r2, r2, #4294967295
    7694:	adc.w	r3, r3, #4294967295
    7698:	rsb	lr, r7, #32
    769c:	lsl.w	lr, r3, lr
    76a0:	lsr.w	r1, r2, r7
    76a4:	subs	r7, #32
    76a6:	lsr.w	r7, r3, r7
    76aa:	orr.w	r1, r1, lr
    76ae:	ldr	r3, [r6, #28]
    76b0:	orrs	r1, r7
    76b2:	add	r3, r1
    76b4:	cmp	r5, r3
    76b6:	bcc.w	7824 <ExFatFile::write(void const*, unsigned int)+0x208>
            goto fail;
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
    76ba:	mov	r0, r6
    76bc:	bl	6ef4 <ExFatFile::addCluster()>
    76c0:	cmp	r0, #0
    76c2:	beq.n	762e <ExFatFile::write(void const*, unsigned int)+0x12>
    76c4:	ldr	r0, [r6, #32]
    76c6:	ldr	r5, [r6, #24]
        }
      }
    }
    // sector for data write
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    76c8:	ldr.w	r7, [r0, #1060]	; 0x424
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    76cc:	ldrb.w	lr, [r0, #1085]	; 0x43d
    76d0:	lsrs	r4, r4, #9
    76d2:	subs	r5, #2
    76d4:	adds	r1, r4, r7
    76d6:	lsl.w	r5, r5, lr
    76da:	add	r1, r5

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    76dc:	cmp.w	r9, #0
    76e0:	bne.w	77e8 <ExFatFile::write(void const*, unsigned int)+0x1cc>
    76e4:	cmp.w	r8, #512	; 0x200
    76e8:	bcs.n	779a <ExFatFile::write(void const*, unsigned int)+0x17e>
      // lesser of space and amount to write
      if (n > toWrite) {
        n = toWrite;
      }

      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    76ea:	ldrd	r2, r3, [r6, #16]
    76ee:	ldrd	r4, r5, [r6]
    76f2:	cmp.w	r8, #512	; 0x200
    76f6:	mov	r7, r8
    76f8:	it	cs
    76fa:	movcs.w	r7, #512	; 0x200
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    76fe:	cmp	r5, r3
    7700:	it	eq
    7702:	cmpeq	r4, r2
    7704:	ite	cc
    7706:	movcc	r2, #1
    7708:	movcs	r2, #3
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    770a:	add.w	r0, r0, #524	; 0x20c
    770e:	bl	6948 <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    7712:	cmp	r0, #0
    7714:	beq.n	762e <ExFatFile::write(void const*, unsigned int)+0x12>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    7716:	add	r0, r9
    7718:	mov	r2, r7
    771a:	mov	r1, sl
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    771c:	add	r9, r7
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    771e:	bl	b0e0 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    7722:	cmp.w	r9, #512	; 0x200
    7726:	beq.w	784e <ExFatFile::write(void const*, unsigned int)+0x232>
    772a:	mov	r0, r7
    772c:	movs	r1, #0
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    772e:	ldrd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    7732:	ldrd	r4, r5, [r6, #16]
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    7736:	adds.w	fp, r2, r0
    773a:	adc.w	ip, r3, r1
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    773e:	cmp	r5, ip
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    7740:	mov	r2, fp
    7742:	mov	r3, ip
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    7744:	it	eq
    7746:	cmpeq	r4, fp
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    7748:	add	sl, r7
    toWrite -= n;
    774a:	rsb	r8, r7, r8
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    774e:	strd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    7752:	bcs.n	7768 <ExFatFile::write(void const*, unsigned int)+0x14c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    7754:	ldrb.w	r1, [r6, #51]	; 0x33
      m_validLength = m_curPosition;
    7758:	mov	r4, ip
    775a:	mov	r3, fp
    775c:	strd	r3, r4, [r6, #16]
    }
    m_curPosition += n;
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
    7760:	orn	r1, r1, #127	; 0x7f
    7764:	strb.w	r1, [r6, #51]	; 0x33
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    7768:	cmp.w	r8, #0
    776c:	bne.w	7662 <ExFatFile::write(void const*, unsigned int)+0x46>
    7770:	mov	r2, fp
    7772:	mov	r3, ip
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    7774:	ldrd	r0, r1, [r6, #8]
    7778:	cmp	r1, r3
    777a:	it	eq
    777c:	cmpeq	r0, r2
    777e:	bcc.n	7880 <ExFatFile::write(void const*, unsigned int)+0x264>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    7780:	ldr	r3, [pc, #284]	; (78a0 <ExFatFile::write(void const*, unsigned int)+0x284>)
    7782:	ldr	r3, [r3, #0]
    7784:	cmp	r3, #0
    7786:	beq.w	7894 <ExFatFile::write(void const*, unsigned int)+0x278>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    778a:	ldrb.w	r3, [r6, #51]	; 0x33
    778e:	ldr	r0, [sp, #4]
    7790:	orn	r3, r3, #127	; 0x7f
    7794:	strb.w	r3, [r6, #51]	; 0x33
    7798:	b.n	763e <ExFatFile::write(void const*, unsigned int)+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    779a:	cmp.w	r8, #1024	; 0x400
    779e:	bcc.n	77fe <ExFatFile::write(void const*, unsigned int)+0x1e2>
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    77a0:	movs	r3, #1
    77a2:	lsl.w	lr, r3, lr
    77a6:	rsb	lr, r4, lr
    77aa:	ldr.w	r3, [r0, #532]	; 0x214
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    77ae:	mov.w	r4, r8, lsr #9
    77b2:	cmp	r4, lr
    77b4:	it	cs
    77b6:	movcs	r4, lr
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    77b8:	cmp	r1, r3
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    77ba:	mov.w	r7, r4, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    77be:	bhi.n	77d4 <ExFatFile::write(void const*, unsigned int)+0x1b8>
    77c0:	adds	r2, r4, r1
    77c2:	cmp	r2, r3
    77c4:	bls.n	77d4 <ExFatFile::write(void const*, unsigned int)+0x1b8>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    77c6:	add.w	r0, r0, #524	; 0x20c
    77ca:	str	r1, [sp, #8]
    77cc:	bl	693c <FsCache::invalidate()>
    77d0:	ldr	r0, [r6, #32]
    77d2:	ldr	r1, [sp, #8]
    77d4:	ldr.w	r0, [r0, #1080]	; 0x438
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t count) {
    return m_blockDev->writeSectors(sector, src, count);
    77d8:	ldr	r5, [r0, #0]
    77da:	mov	r3, r4
    77dc:	mov	r2, sl
    77de:	ldr	r4, [r5, #28]
    77e0:	blx	r4
        // Invalidate cache if cache sector is in the range.
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, ns)) {
    77e2:	cmp	r0, #0
    77e4:	bne.n	772a <ExFatFile::write(void const*, unsigned int)+0x10e>
    77e6:	b.n	762e <ExFatFile::write(void const*, unsigned int)+0x12>
             (clusterOffset >> m_vol->bytesPerSectorShift());

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    77e8:	rsb	r7, r9, #512	; 0x200
    77ec:	cmp	r7, r8
    77ee:	it	cs
    77f0:	movcs	r7, r8
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    77f2:	movs	r2, #1
    77f4:	b.n	770a <ExFatFile::write(void const*, unsigned int)+0xee>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    77f6:	ldr	r5, [r6, #28]
    77f8:	cbz	r5, 782a <ExFatFile::write(void const*, unsigned int)+0x20e>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    77fa:	str	r5, [r6, #24]
    77fc:	b.n	76c8 <ExFatFile::write(void const*, unsigned int)+0xac>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->dataCacheSector() == sector) {
    77fe:	ldr.w	r3, [r0, #532]	; 0x214
    7802:	cmp	r1, r3
    7804:	beq.n	7860 <ExFatFile::write(void const*, unsigned int)+0x244>
    7806:	ldr.w	r0, [r0, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    780a:	ldr	r3, [r0, #0]
    780c:	mov	r2, sl
    780e:	ldr	r3, [r3, #24]
    7810:	blx	r3
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    7812:	cmp	r0, #0
    7814:	beq.w	762e <ExFatFile::write(void const*, unsigned int)+0x12>
    7818:	mov.w	r0, #512	; 0x200
    781c:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    781e:	mov.w	r7, #512	; 0x200
    7822:	b.n	772e <ExFatFile::write(void const*, unsigned int)+0x112>

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
            m_curCluster++;
    7824:	adds	r5, #1
    7826:	str	r5, [r6, #24]
    7828:	b.n	76c8 <ExFatFile::write(void const*, unsigned int)+0xac>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    782a:	mov	r0, r6
    782c:	bl	6ef4 <ExFatFile::addCluster()>
    7830:	cmp	r0, #0
    7832:	beq.w	762e <ExFatFile::write(void const*, unsigned int)+0x12>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    7836:	ldr	r5, [r6, #24]
    7838:	str	r5, [r6, #28]
    783a:	ldr	r0, [r6, #32]
    783c:	b.n	76c8 <ExFatFile::write(void const*, unsigned int)+0xac>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    783e:	mov	r1, r5
    7840:	ldr	r2, [sp, #12]
    7842:	bl	6d1c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
        if (fg == 0) {
    7846:	cmp	r0, #0
    7848:	bne.w	76c4 <ExFatFile::write(void const*, unsigned int)+0xa8>
    784c:	b.n	76ba <ExFatFile::write(void const*, unsigned int)+0x9e>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    784e:	ldr	r0, [r6, #32]
    7850:	add.w	r0, r0, #524	; 0x20c
    7854:	bl	6a08 <FsCache::sync()>
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->dataCacheSync()) {
    7858:	cmp	r0, #0
    785a:	bne.w	772a <ExFatFile::write(void const*, unsigned int)+0x10e>
    785e:	b.n	762e <ExFatFile::write(void const*, unsigned int)+0x12>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    7860:	add.w	r0, r0, #524	; 0x20c
    7864:	str	r1, [sp, #8]
    7866:	bl	693c <FsCache::invalidate()>
    786a:	ldr	r0, [r6, #32]
    786c:	ldr	r1, [sp, #8]
    786e:	b.n	7806 <ExFatFile::write(void const*, unsigned int)+0x1ea>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_validLength)) {
    7870:	ldrd	r2, r3, [r0, #16]
    7874:	bl	6154 <ExFatFile::seekSet(unsigned long long)>
    7878:	cmp	r0, #0
    787a:	beq.w	762e <ExFatFile::write(void const*, unsigned int)+0x12>
    787e:	b.n	764c <ExFatFile::write(void const*, unsigned int)+0x30>
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    7880:	ldrb.w	r1, [r6, #51]	; 0x33
    7884:	ldr	r0, [sp, #4]
    7886:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    788a:	strd	r2, r3, [r6, #8]
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    788e:	strb.w	r1, [r6, #51]	; 0x33
    7892:	b.n	763e <ExFatFile::write(void const*, unsigned int)+0x22>
    7894:	ldr	r0, [sp, #4]
    7896:	b.n	763e <ExFatFile::write(void const*, unsigned int)+0x22>
    7898:	ldrd	r2, r3, [r6]
    789c:	b.n	7774 <ExFatFile::write(void const*, unsigned int)+0x158>
    789e:	nop
    78a0:	.word	0x1fff1f2c

000078a4 <FatFile::openRoot(FatVolume*) [clone .part.36]>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    78a4:	push	{r3, r4, r5, lr}
    78a6:	mov	r4, r0
    78a8:	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    78aa:	movs	r2, #36	; 0x24
    78ac:	movs	r1, #0
    78ae:	bl	df8c <memset>

  m_vol = vol;
    78b2:	str	r5, [r4, #8]
  switch (vol->fatType()) {
    78b4:	ldrb	r3, [r5, #7]
    78b6:	cmp	r3, #16
    78b8:	beq.n	78cc <FatFile::openRoot(FatVolume*) [clone .part.36]+0x28>
    78ba:	cmp	r3, #32
    78bc:	bne.n	78c8 <FatFile::openRoot(FatVolume*) [clone .part.36]+0x24>
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    78be:	movs	r3, #64	; 0x40
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    78c0:	movs	r0, #1
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    78c2:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    78c4:	strb	r0, [r4, #2]
    78c6:	pop	{r3, r4, r5, pc}
  return true;

fail:
  return false;
    78c8:	movs	r0, #0
}
    78ca:	pop	{r3, r4, r5, pc}
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    78cc:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    78ce:	movs	r0, #1
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    78d0:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    78d2:	strb	r0, [r4, #2]
    78d4:	pop	{r3, r4, r5, pc}
    78d6:	nop

000078d8 <FatFile::addCluster()>:
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    78d8:	mov	r2, r0
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    78da:	push	{r3, r4, r5, lr}
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    78dc:	ldr.w	r5, [r2, #16]!
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    78e0:	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    78e2:	mov	r1, r5
    78e4:	ldr	r0, [r0, #8]
    78e6:	bl	894c <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    78ea:	cbz	r0, 7902 <FatFile::addCluster()+0x2a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    78ec:	cbz	r5, 7904 <FatFile::addCluster()+0x2c>
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    78ee:	ldr	r3, [r4, #16]
    78f0:	adds	r5, #1
    78f2:	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    78f4:	ldrb	r3, [r4, #2]
    78f6:	it	ne
    78f8:	andne.w	r3, r3, #191	; 0xbf
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    78fc:	orn	r3, r3, #127	; 0x7f
    7900:	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    7902:	pop	{r3, r4, r5, pc}
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    7904:	ldrb	r3, [r4, #2]
    7906:	orr.w	r3, r3, #64	; 0x40
    790a:	b.n	78fc <FatFile::addCluster()+0x24>

0000790c <FatFile::addDirCluster()>:
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    790c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    7910:	ldrb	r3, [r0, #0]
    7912:	and.w	r3, r3, #32
    7916:	cbnz	r3, 7924 <FatFile::addDirCluster()+0x18>
    7918:	and.w	r4, r3, #255	; 0xff
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    791c:	ldr	r1, [r0, #20]
    791e:	ldr	r3, [pc, #124]	; (799c <FatFile::addDirCluster()+0x90>)
    7920:	cmp	r1, r3
    7922:	bls.n	792c <FatFile::addDirCluster()+0x20>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    7924:	movs	r6, #0
}
    7926:	mov	r0, r6
    7928:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    792c:	mov	r5, r0
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    792e:	bl	78d8 <FatFile::addCluster()>
    7932:	mov	r6, r0
    7934:	cmp	r0, #0
    7936:	beq.n	7924 <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    7938:	ldr	r1, [r5, #16]
    793a:	ldr	r0, [r5, #8]
    793c:	bl	8868 <FatPartition::clusterStartSector(unsigned long) const>
    7940:	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    7942:	ldr	r0, [r5, #8]
    7944:	mov	r1, r7
    7946:	adds	r0, #36	; 0x24
    7948:	movs	r2, #5
    794a:	bl	87f8 <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    794e:	mov	r8, r0
    7950:	cmp	r0, #0
    7952:	beq.n	7924 <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
    7954:	mov.w	r2, #512	; 0x200
    7958:	mov	r1, r4
    795a:	bl	df8c <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    795e:	ldr	r3, [r5, #8]
    7960:	ldrb	r2, [r3, #4]
    7962:	cmp	r2, #1
    7964:	bls.n	7988 <FatFile::addDirCluster()+0x7c>
    7966:	movs	r4, #1
    7968:	b.n	7972 <FatFile::addDirCluster()+0x66>
    796a:	ldr	r3, [r5, #8]
    796c:	ldrb	r2, [r3, #4]
    796e:	cmp	r2, r4
    7970:	bls.n	7988 <FatFile::addDirCluster()+0x7c>
    7972:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    7974:	ldr	r3, [r0, #0]
    7976:	adds	r1, r4, r7
    7978:	ldr	r3, [r3, #24]
    797a:	mov	r2, r8
    797c:	blx	r3
    797e:	adds	r4, #1
    7980:	uxtb	r4, r4
    if (!m_vol->writeSector(sector + i, pc->data)) {
    7982:	cmp	r0, #0
    7984:	bne.n	796a <FatFile::addDirCluster()+0x5e>
    7986:	b.n	7924 <FatFile::addDirCluster()+0x18>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    7988:	ldrb	r3, [r3, #6]
    798a:	ldr	r1, [r5, #20]
    798c:	mov.w	r2, #512	; 0x200
    7990:	lsl.w	r3, r2, r3
    7994:	uxtah	r3, r1, r3
    7998:	str	r3, [r5, #20]
    799a:	b.n	7926 <FatFile::addDirCluster()+0x1a>
    799c:	.word	0x001ffdff

000079a0 <FatFile::cacheDirEntry(unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    79a0:	push	{r4, lr}
    79a2:	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    79a4:	ldr	r0, [r0, #8]
    79a6:	mov	r2, r1
    79a8:	adds	r0, #36	; 0x24
    79aa:	ldr	r1, [r4, #24]
    79ac:	bl	87f8 <FatCache::read(unsigned long, unsigned char)>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    79b0:	cbz	r0, 79bc <FatFile::cacheDirEntry(unsigned char)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    79b2:	ldrh	r3, [r4, #4]
    79b4:	and.w	r3, r3, #15
    79b8:	add.w	r0, r0, r3, lsl #5

fail:
  return nullptr;
}
    79bc:	pop	{r4, pc}
    79be:	nop

000079c0 <FatFile::sync() [clone .part.40]>:
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    79c0:	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    79c2:	ldrsb.w	r3, [r0, #2]
    79c6:	cmp	r3, #0
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    79c8:	sub	sp, #8
    79ca:	mov	r4, r0
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    79cc:	blt.n	7a02 <FatFile::sync() [clone .part.40]+0x42>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    79ce:	ldr	r5, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    79d0:	add.w	r0, r5, #36	; 0x24
    79d4:	bl	8858 <FatCache::sync()>
    79d8:	cbnz	r0, 79e8 <FatFile::sync() [clone .part.40]+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    79da:	ldrb	r3, [r4, #1]
    79dc:	orr.w	r3, r3, #1
    79e0:	strb	r3, [r4, #1]
  return false;
    79e2:	movs	r0, #0
}
    79e4:	add	sp, #8
    79e6:	pop	{r4, r5, r6, pc}
    79e8:	add.w	r0, r5, #560	; 0x230
    79ec:	bl	8858 <FatCache::sync()>
    79f0:	cmp	r0, #0
    79f2:	beq.n	79da <FatFile::sync() [clone .part.40]+0x1a>
    79f4:	ldr	r0, [r5, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    79f6:	ldr	r3, [r0, #0]
    79f8:	ldr	r3, [r3, #20]
    79fa:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    79fc:	cmp	r0, #0
    79fe:	beq.n	79da <FatFile::sync() [clone .part.40]+0x1a>
    7a00:	b.n	79e4 <FatFile::sync() [clone .part.40]+0x24>
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    7a02:	movs	r1, #1
    7a04:	bl	79a0 <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    7a08:	mov	r5, r0
    7a0a:	cmp	r0, #0
    7a0c:	beq.n	79da <FatFile::sync() [clone .part.40]+0x1a>
    7a0e:	ldrb	r3, [r0, #0]
    7a10:	cmp	r3, #229	; 0xe5
    7a12:	beq.n	79da <FatFile::sync() [clone .part.40]+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    7a14:	ldrb	r3, [r4, #0]
    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    7a16:	ldr	r2, [pc, #56]	; (7a50 <FatFile::sync() [clone .part.40]+0x90>)
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    7a18:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    7a1a:	itt	mi
    7a1c:	ldrmi	r3, [r4, #28]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    7a1e:	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    7a20:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    7a22:	ldr	r6, [r2, #0]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    7a24:	strh	r3, [r0, #26]
    7a26:	lsrs	r3, r3, #16
    7a28:	strh	r3, [r0, #20]
    7a2a:	cbz	r6, 7a46 <FatFile::sync() [clone .part.40]+0x86>
      FsDateTime::callback(&date, &time, &ms10);
    7a2c:	add.w	r2, sp, #3
    7a30:	add.w	r1, sp, #6
    7a34:	add	r0, sp, #4
    7a36:	blx	r6
      setLe16(dir->modifyDate, date);
    7a38:	ldrh.w	r3, [sp, #4]
    7a3c:	ldrh.w	r2, [sp, #6]
    7a40:	strh	r3, [r5, #24]
    7a42:	strh	r3, [r5, #18]
    7a44:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    7a46:	ldrb	r3, [r4, #2]
    7a48:	and.w	r3, r3, #127	; 0x7f
    7a4c:	strb	r3, [r4, #2]
    7a4e:	b.n	79ce <FatFile::sync() [clone .part.40]+0xe>
    7a50:	.word	0x1fff1f2c

00007a54 <FatFile::close()>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    7a54:	push	{r4, lr}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    7a56:	ldrb	r3, [r0, #0]

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    7a58:	mov	r4, r0
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    7a5a:	cbnz	r3, 7a66 <FatFile::close()+0x12>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    7a5c:	movs	r3, #0
    7a5e:	strb	r3, [r4, #0]
  m_flags = 0;
    7a60:	strb	r3, [r4, #2]
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
    7a62:	movs	r0, #1
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return rtn;
}
    7a64:	pop	{r4, pc}
    7a66:	bl	79c0 <FatFile::sync() [clone .part.40]>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    7a6a:	movs	r3, #0
    7a6c:	strb	r3, [r4, #0]
  m_flags = 0;
    7a6e:	strb	r3, [r4, #2]
  return rtn;
}
    7a70:	pop	{r4, pc}
    7a72:	nop

00007a74 <FatFile::dirEntry(DirFat_t*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::dirEntry(DirFat_t* dst) {
    7a74:	push	{r3, r4, r5, lr}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    7a76:	ldrb	r3, [r0, #0]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::dirEntry(DirFat_t* dst) {
    7a78:	mov	r5, r0
    7a7a:	mov	r4, r1
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    7a7c:	cbnz	r3, 7aac <FatFile::dirEntry(DirFat_t*)+0x38>
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
    7a7e:	mov	r0, r5
    7a80:	movs	r1, #0
    7a82:	bl	79a0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7a86:	cbz	r0, 7ab4 <FatFile::dirEntry(DirFat_t*)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy to caller's struct
  memcpy(dst, dir, sizeof(DirFat_t));
    7a88:	ldr	r1, [r0, #0]
    7a8a:	ldr	r2, [r0, #4]
    7a8c:	ldr	r3, [r0, #8]
    7a8e:	ldr	r5, [r0, #12]
    7a90:	str	r5, [r4, #12]
    7a92:	str	r1, [r4, #0]
    7a94:	str	r2, [r4, #4]
    7a96:	str	r3, [r4, #8]
    7a98:	ldr	r1, [r0, #16]
    7a9a:	ldr	r2, [r0, #20]
    7a9c:	ldr	r3, [r0, #24]
    7a9e:	ldr	r5, [r0, #28]
    7aa0:	str	r5, [r4, #28]
    7aa2:	str	r1, [r4, #16]
    7aa4:	str	r2, [r4, #20]
    7aa6:	str	r3, [r4, #24]
  return true;
    7aa8:	movs	r0, #1

fail:
  return false;
}
    7aaa:	pop	{r3, r4, r5, pc}
    7aac:	bl	79c0 <FatFile::sync() [clone .part.40]>
}
//------------------------------------------------------------------------------
bool FatFile::dirEntry(DirFat_t* dst) {
  DirFat_t* dir;
  // Make sure fields on device are correct.
  if (!sync()) {
    7ab0:	cmp	r0, #0
    7ab2:	bne.n	7a7e <FatFile::dirEntry(DirFat_t*)+0xa>
  // copy to caller's struct
  memcpy(dst, dir, sizeof(DirFat_t));
  return true;

fail:
  return false;
    7ab4:	movs	r0, #0
    7ab6:	pop	{r3, r4, r5, pc}

00007ab8 <FatFile::mkdir(FatFile*, fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    7ab8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    7abc:	ldrb	r5, [r1, #0]
    7abe:	tst.w	r5, #112	; 0x70

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    7ac2:	sub	sp, #36	; 0x24
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    7ac4:	bne.n	7ace <FatFile::mkdir(FatFile*, fname_t*)+0x16>
  // write first sector
  return m_vol->cacheSync();

fail:
  return false;
}
    7ac6:	movs	r0, #0
    7ac8:	add	sp, #36	; 0x24
    7aca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    7ace:	movw	r3, #2562	; 0xa02
    7ad2:	mov	r4, r0
    7ad4:	mov	r5, r1
    7ad6:	bl	9234 <FatFile::open(FatFile*, fname_t*, int)>
    7ada:	cmp	r0, #0
    7adc:	beq.n	7ac6 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    7ade:	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    7ae0:	movs	r3, #16
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    7ae2:	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    7ae4:	strb	r3, [r4, #0]

  // allocate and zero first cluster
  if (!addDirCluster()) {
    7ae6:	mov	r0, r4
    7ae8:	bl	790c <FatFile::addDirCluster()>
    7aec:	cmp	r0, #0
    7aee:	beq.n	7ac6 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
bool FatFile::seekSet(uint32_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    7af0:	ldrb	r3, [r4, #0]
  // allocate and zero first cluster
  if (!addDirCluster()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    7af2:	ldr	r2, [r4, #16]
    7af4:	str	r2, [r4, #32]
bool FatFile::seekSet(uint32_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    7af6:	cmp	r3, #0
    7af8:	bne.n	7be6 <FatFile::mkdir(FatFile*, fname_t*)+0x12e>
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    7afa:	movs	r1, #1
    7afc:	mov	r0, r4
    7afe:	bl	79a0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7b02:	mov	r6, r0
    7b04:	cmp	r0, #0
    7b06:	beq.n	7ac6 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    7b08:	movs	r3, #16
    7b0a:	strb	r3, [r0, #11]

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    7b0c:	ldr	r2, [r0, #8]
    7b0e:	ldr	r1, [r6, #4]
    7b10:	ldr	r3, [r6, #12]
    7b12:	ldr	r0, [r0, #0]
    7b14:	ldrh.w	r8, [r6, #20]
    7b18:	ldrh.w	r9, [r6, #26]
    7b1c:	mov	r7, sp
    7b1e:	stmia	r7!, {r0, r1, r2, r3}
    7b20:	ldr	r1, [r6, #20]
    7b22:	ldr	r2, [r6, #24]
    7b24:	ldr	r3, [r6, #28]
    7b26:	ldr	r0, [r6, #16]
  dot.name[0] = '.';
    7b28:	add	r6, sp, #32
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    7b2a:	stmia	r7!, {r0, r1, r2, r3}
  dot.name[0] = '.';
    7b2c:	movs	r3, #46	; 0x2e
    7b2e:	strb.w	r3, [r6, #-32]!
    7b32:	add.w	r1, sp, #10
    7b36:	mov	r3, r6
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
    7b38:	movs	r2, #32
    7b3a:	strb.w	r2, [r3, #1]!
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    7b3e:	cmp	r1, r3
    7b40:	bne.n	7b3a <FatFile::mkdir(FatFile*, fname_t*)+0x82>
    dot.name[i] = ' ';
  }

  // cache sector for '.'  and '..'
  sector = m_vol->clusterStartSector(m_firstCluster);
    7b42:	ldr	r1, [r4, #32]
    7b44:	ldr	r0, [r4, #8]
    7b46:	bl	8868 <FatPartition::clusterStartSector(unsigned long) const>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    7b4a:	ldr	r3, [r4, #8]
    7b4c:	mov	r1, r0
    7b4e:	movs	r2, #1
    7b50:	add.w	r0, r3, #36	; 0x24
    7b54:	bl	87f8 <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
  if (!pc) {
    7b58:	mov	lr, r0
    7b5a:	cmp	r0, #0
    7b5c:	beq.n	7ac6 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    7b5e:	mov	r7, r6
    7b60:	strh.w	r8, [sp, #20]
    7b64:	strh.w	r9, [sp, #26]
    7b68:	ldmia	r7!, {r0, r1, r2, r3}
    7b6a:	str.w	r0, [lr]
    7b6e:	str.w	r1, [lr, #4]
    7b72:	str.w	r2, [lr, #8]
    7b76:	str.w	r3, [lr, #12]
    7b7a:	ldmia	r7!, {r0, r1, r2, r3}
    7b7c:	str.w	r0, [lr, #16]
    7b80:	str.w	r1, [lr, #20]
    7b84:	str.w	r2, [lr, #24]
    7b88:	str.w	r3, [lr, #28]
  // make entry for '..'
  dot.name[1] = '.';
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    7b8c:	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    7b8e:	strh.w	r3, [sp, #26]
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
  // make entry for '..'
  dot.name[1] = '.';
    7b92:	movs	r2, #46	; 0x2e
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    7b94:	lsrs	r3, r3, #16
    7b96:	mov	r5, r6
    7b98:	strh.w	r3, [sp, #20]
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
  // make entry for '..'
  dot.name[1] = '.';
    7b9c:	strb.w	r2, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    7ba0:	ldmia	r5!, {r0, r1, r2, r3}
    7ba2:	add.w	r6, lr, #32
    7ba6:	str.w	r0, [lr, #32]
    7baa:	str	r1, [r6, #4]
    7bac:	str	r2, [r6, #8]
    7bae:	str	r3, [r6, #12]
    7bb0:	ldmia	r5!, {r0, r1, r2, r3}
    7bb2:	str	r0, [r6, #16]
    7bb4:	str	r1, [r6, #20]
    7bb6:	str	r2, [r6, #24]
    7bb8:	str	r3, [r6, #28]
  // write first sector
  return m_vol->cacheSync();
    7bba:	ldr	r4, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7bbc:	add.w	r0, r4, #36	; 0x24
    7bc0:	bl	8858 <FatCache::sync()>
    7bc4:	cmp	r0, #0
    7bc6:	beq.w	7ac6 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    7bca:	add.w	r0, r4, #560	; 0x230
    7bce:	bl	8858 <FatCache::sync()>
    7bd2:	cmp	r0, #0
    7bd4:	beq.w	7ac6 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    7bd8:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    7bda:	ldr	r3, [r0, #0]
    7bdc:	ldr	r3, [r3, #20]

fail:
  return false;
}
    7bde:	add	sp, #36	; 0x24
    7be0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7be4:	bx	r3
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    7be6:	ldr	r3, [r4, #20]
    7be8:	cbz	r3, 7bf8 <FatFile::mkdir(FatFile*, fname_t*)+0x140>
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    7bea:	ldrb	r3, [r4, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    7bec:	movs	r2, #0
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    7bee:	bic.w	r3, r3, #32
    7bf2:	strb	r3, [r4, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    7bf4:	str	r2, [r4, #16]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    7bf6:	str	r2, [r4, #20]
    7bf8:	mov	r0, r4
    7bfa:	bl	79c0 <FatFile::sync() [clone .part.40]>
  }
  m_firstCluster = m_curCluster;
  // Set to start of dir
  rewind();
  // force entry to device
  if (!sync()) {
    7bfe:	cmp	r0, #0
    7c00:	beq.w	7ac6 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    7c04:	b.n	7afa <FatFile::mkdir(FatFile*, fname_t*)+0x42>
    7c06:	nop

00007c08 <FatFile::mkdir(FatFile*, char const*, bool)>:
void FatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    7c08:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7c0c:	mov	r6, r0
    7c0e:	sub	sp, #72	; 0x48
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    7c10:	ldrb	r5, [r6, #0]
void FatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    7c12:	str	r2, [sp, #4]
    7c14:	movs	r0, #0
    7c16:	strb.w	r0, [sp, #36]	; 0x24
    7c1a:	strb.w	r0, [sp, #37]	; 0x25
    7c1e:	strb.w	r0, [sp, #38]	; 0x26
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    7c22:	cbnz	r5, 7c30 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    7c24:	mov	r8, r3
    7c26:	ldrb	r3, [r1, #0]
    7c28:	tst.w	r3, #112	; 0x70
    7c2c:	mov	r4, r1
    7c2e:	bne.n	7c38 <FatFile::mkdir(FatFile*, char const*, bool)+0x30>
    close();
  }
  return mkdir(parent, &fname);

fail:
  return false;
    7c30:	movs	r0, #0
}
    7c32:	add	sp, #72	; 0x48
    7c34:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    7c38:	ldrb	r3, [r2, #0]
    7c3a:	cmp	r3, #47	; 0x2f
    7c3c:	mov	r0, r2
    7c3e:	beq.n	7c96 <FatFile::mkdir(FatFile*, char const*, bool)+0x8e>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    7c40:	movs	r7, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    7c42:	add	r2, sp, #4
    7c44:	add	r1, sp, #12
    7c46:	bl	8d4c <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    7c4a:	add	r2, sp, #12
    7c4c:	mov	r1, r4
    7c4e:	movs	r3, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    7c50:	cmp	r0, #0
    7c52:	beq.n	7c30 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    7c54:	ldr	r5, [sp, #4]
    7c56:	ldrb	r5, [r5, #0]
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    7c58:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    7c5a:	cmp	r5, #0
    7c5c:	beq.n	7cba <FatFile::mkdir(FatFile*, char const*, bool)+0xb2>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    7c5e:	bl	9234 <FatFile::open(FatFile*, fname_t*, int)>
    7c62:	cbnz	r0, 7c78 <FatFile::mkdir(FatFile*, char const*, bool)+0x70>
      if (!pFlag || !mkdir(parent, &fname)) {
    7c64:	cmp.w	r8, #0
    7c68:	beq.n	7c30 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    7c6a:	mov	r1, r4
    7c6c:	add	r2, sp, #12
    7c6e:	mov	r0, r6
    7c70:	bl	7ab8 <FatFile::mkdir(FatFile*, fname_t*)>
    7c74:	cmp	r0, #0
    7c76:	beq.n	7c30 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    7c78:	mov	r5, r6
    7c7a:	ldmia	r5!, {r0, r1, r2, r3}
    7c7c:	add	r4, sp, #36	; 0x24
    7c7e:	stmia	r4!, {r0, r1, r2, r3}
    7c80:	ldmia	r5!, {r0, r1, r2, r3}
    7c82:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    7c84:	ldrb	r3, [r6, #0]
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    7c86:	ldr	r2, [r5, #0]
    7c88:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    7c8a:	cbnz	r3, 7cb2 <FatFile::mkdir(FatFile*, char const*, bool)+0xaa>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    7c8c:	strb	r7, [r6, #0]
  m_flags = 0;
    7c8e:	strb	r7, [r6, #2]
    7c90:	ldr	r0, [sp, #4]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    7c92:	add	r4, sp, #36	; 0x24
    7c94:	b.n	7c42 <FatFile::mkdir(FatFile*, char const*, bool)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    7c96:	adds	r0, #1
    7c98:	str	r0, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    7c9a:	ldrb	r3, [r0, #0]
    7c9c:	cmp	r3, #47	; 0x2f
    7c9e:	beq.n	7c96 <FatFile::mkdir(FatFile*, char const*, bool)+0x8e>
    7ca0:	ldr	r1, [r4, #8]
    7ca2:	add	r0, sp, #36	; 0x24
    7ca4:	bl	78a4 <FatFile::openRoot(FatVolume*) [clone .part.36]>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    7ca8:	cmp	r0, #0
    7caa:	beq.n	7c30 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    7cac:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    7cae:	add	r4, sp, #36	; 0x24
    7cb0:	b.n	7c40 <FatFile::mkdir(FatFile*, char const*, bool)+0x38>
    7cb2:	mov	r0, r6
    7cb4:	bl	79c0 <FatFile::sync() [clone .part.40]>
    7cb8:	b.n	7c8c <FatFile::mkdir(FatFile*, char const*, bool)+0x84>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    7cba:	add	r2, sp, #12
    7cbc:	mov	r1, r4
    7cbe:	mov	r0, r6
    7cc0:	bl	7ab8 <FatFile::mkdir(FatFile*, fname_t*)>

fail:
  return false;
}
    7cc4:	add	sp, #72	; 0x48
    7cc6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7cca:	nop

00007ccc <FatFile::open(FatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    7ccc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7cd0:	mov	r6, r0
    7cd2:	sub	sp, #72	; 0x48
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    7cd4:	ldrb	r5, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    7cd6:	str	r2, [sp, #4]
    7cd8:	movs	r0, #0
    7cda:	strb.w	r0, [sp, #36]	; 0x24
    7cde:	strb.w	r0, [sp, #37]	; 0x25
    7ce2:	strb.w	r0, [sp, #38]	; 0x26
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    7ce6:	cbnz	r5, 7cf4 <FatFile::open(FatFile*, char const*, int)+0x28>
    7ce8:	mov	r8, r3
    7cea:	ldrb	r3, [r1, #0]
    7cec:	tst.w	r3, #112	; 0x70
    7cf0:	mov	r4, r1
    7cf2:	bne.n	7cfc <FatFile::open(FatFile*, char const*, int)+0x30>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    7cf4:	movs	r0, #0
}
    7cf6:	add	sp, #72	; 0x48
    7cf8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    7cfc:	ldrb	r3, [r2, #0]
    7cfe:	cmp	r3, #47	; 0x2f
    7d00:	mov	r0, r2
    7d02:	beq.n	7d50 <FatFile::open(FatFile*, char const*, int)+0x84>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    7d04:	movs	r7, #0
    7d06:	b.n	7d10 <FatFile::open(FatFile*, char const*, int)+0x44>
    7d08:	ldr	r0, [sp, #4]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    7d0a:	strb	r7, [r6, #0]
  m_flags = 0;
    7d0c:	strb	r7, [r6, #2]
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    7d0e:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    7d10:	add	r2, sp, #4
    7d12:	add	r1, sp, #12
    7d14:	bl	8d4c <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    7d18:	add	r2, sp, #12
    7d1a:	mov	r1, r4
    7d1c:	movs	r3, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    7d1e:	cmp	r0, #0
    7d20:	beq.n	7cf4 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    7d22:	ldr	r5, [sp, #4]
    7d24:	ldrb	r5, [r5, #0]
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    7d26:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    7d28:	cbz	r5, 7d6e <FatFile::open(FatFile*, char const*, int)+0xa2>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    7d2a:	bl	9234 <FatFile::open(FatFile*, fname_t*, int)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    7d2e:	mov	r5, r6
    7d30:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    7d32:	cmp	r0, #0
    7d34:	beq.n	7cf4 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    7d36:	ldmia	r5!, {r0, r1, r2, r3}
    7d38:	stmia	r4!, {r0, r1, r2, r3}
    7d3a:	ldmia	r5!, {r0, r1, r2, r3}
    7d3c:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    7d3e:	ldrb	r3, [r6, #0]
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    7d40:	ldr	r2, [r5, #0]
    7d42:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    7d44:	cmp	r3, #0
    7d46:	beq.n	7d08 <FatFile::open(FatFile*, char const*, int)+0x3c>
    7d48:	mov	r0, r6
    7d4a:	bl	79c0 <FatFile::sync() [clone .part.40]>
    7d4e:	b.n	7d08 <FatFile::open(FatFile*, char const*, int)+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    7d50:	adds	r0, #1
    7d52:	str	r0, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    7d54:	ldrb	r3, [r0, #0]
    7d56:	cmp	r3, #47	; 0x2f
    7d58:	beq.n	7d50 <FatFile::open(FatFile*, char const*, int)+0x84>
      path++;
    }
    if (*path == 0) {
    7d5a:	cbz	r3, 7d80 <FatFile::open(FatFile*, char const*, int)+0xb4>
    7d5c:	ldr	r1, [r4, #8]
    7d5e:	add	r0, sp, #36	; 0x24
    7d60:	bl	78a4 <FatFile::openRoot(FatVolume*) [clone .part.36]>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    7d64:	cmp	r0, #0
    7d66:	beq.n	7cf4 <FatFile::open(FatFile*, char const*, int)+0x28>
    7d68:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    7d6a:	add	r4, sp, #36	; 0x24
    7d6c:	b.n	7d04 <FatFile::open(FatFile*, char const*, int)+0x38>
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return open(dirFile, &fname, oflag);
    7d6e:	mov	r3, r8
    7d70:	add	r2, sp, #12
    7d72:	mov	r1, r4
    7d74:	mov	r0, r6
    7d76:	bl	9234 <FatFile::open(FatFile*, fname_t*, int)>

fail:
  return false;
}
    7d7a:	add	sp, #72	; 0x48
    7d7c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7d80:	ldr	r1, [r4, #8]
    7d82:	mov	r0, r6
    7d84:	bl	78a4 <FatFile::openRoot(FatVolume*) [clone .part.36]>
    7d88:	b.n	7cf6 <FatFile::open(FatFile*, char const*, int)+0x2a>
    7d8a:	nop

00007d8c <FatFile::open(FatVolume*, char const*, int)>:
bool FatFile::open(const char* path, oflag_t oflag) {
  return open(FatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    7d8c:	cbz	r1, 7d96 <FatFile::open(FatVolume*, char const*, int)+0xa>
    7d8e:	addw	r1, r1, #1084	; 0x43c
    7d92:	b.w	7ccc <FatFile::open(FatFile*, char const*, int)>
}
    7d96:	mov	r0, r1
    7d98:	bx	lr
    7d9a:	nop

00007d9c <FatFile::openRoot(FatVolume*)>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    7d9c:	ldrb	r3, [r0, #0]
    7d9e:	cbz	r3, 7da4 <FatFile::openRoot(FatVolume*)+0x8>
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
}
    7da0:	movs	r0, #0
    7da2:	bx	lr
    7da4:	b.w	78a4 <FatFile::openRoot(FatVolume*) [clone .part.36]>

00007da8 <FatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    7da8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    7dac:	ldrb	r3, [r0, #2]
    7dae:	lsls	r7, r3, #31
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    7db0:	sub	sp, #12
    7db2:	mov	r5, r0
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    7db4:	bpl.w	7ed6 <FatFile::read(void*, unsigned int)+0x12e>
    7db8:	mov	r7, r1
    7dba:	ldrb	r1, [r0, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    7dbc:	lsls	r6, r1, #28
    7dbe:	mov	r9, r2
    7dc0:	bmi.w	7ee8 <FatFile::read(void*, unsigned int)+0x140>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
    7dc4:	lsls	r4, r1, #26
    7dc6:	bpl.n	7dda <FatFile::read(void*, unsigned int)+0x32>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    7dc8:	ldr	r2, [r0, #8]
    if (nbyte > tmp16) {
    7dca:	ldr	r3, [r0, #20]
    7dcc:	ldrh	r2, [r2, #8]
    7dce:	rsb	r3, r3, r2, lsl #5
    7dd2:	uxth	r3, r3
    7dd4:	cmp	r9, r3
    7dd6:	it	cs
    7dd8:	movcs	r9, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    7dda:	cmp.w	r9, #0
    7dde:	beq.w	7f34 <FatFile::read(void*, unsigned int)+0x18c>
    7de2:	ldr	r3, [r5, #20]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    7de4:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    7de6:	lsls	r0, r1, #26
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    7de8:	mov	r6, r9
    7dea:	mov.w	r8, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7dee:	add.w	sl, r5, #16
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    7df2:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    7df6:	bpl.n	7e76 <FatFile::read(void*, unsigned int)+0xce>
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    7df8:	ldr	r1, [r2, #32]
    7dfa:	add.w	r1, r1, r3, lsr #9
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    7dfe:	cmp.w	fp, #0
    7e02:	bne.n	7eaa <FatFile::read(void*, unsigned int)+0x102>
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    7e04:	cmp.w	r6, #512	; 0x200
    7e08:	bcc.n	7eaa <FatFile::read(void*, unsigned int)+0x102>
    7e0a:	ldr	r3, [r2, #44]	; 0x2c
        || sector == m_vol->cacheSectorNumber()) {
    7e0c:	cmp	r1, r3
    7e0e:	beq.n	7eaa <FatFile::read(void*, unsigned int)+0x102>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    7e10:	cmp.w	r6, #1024	; 0x400
    7e14:	bcc.n	7efa <FatFile::read(void*, unsigned int)+0x152>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isRootFixed()) {
    7e16:	ldrb	r0, [r5, #0]
    7e18:	lsls	r0, r0, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    7e1a:	mov.w	fp, r6, lsr #9
      if (!isRootFixed()) {
    7e1e:	bmi.n	7e2c <FatFile::read(void*, unsigned int)+0x84>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    7e20:	ldrb	r0, [r2, #4]
    7e22:	rsb	r0, r8, r0
    7e26:	cmp	fp, r0
    7e28:	it	cs
    7e2a:	movcs	fp, r0
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    7e2c:	cmp	r1, r3
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    7e2e:	mov.w	r4, fp, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    7e32:	bhi.n	7e4c <FatFile::read(void*, unsigned int)+0xa4>
    7e34:	add	r3, fp
    7e36:	cmp	r1, r3
    7e38:	bcs.n	7e4c <FatFile::read(void*, unsigned int)+0xa4>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    7e3a:	add.w	r0, r2, #36	; 0x24
    7e3e:	str	r1, [sp, #4]
    7e40:	bl	8858 <FatCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->cacheSyncData()) {
    7e44:	cmp	r0, #0
    7e46:	beq.n	7ed6 <FatFile::read(void*, unsigned int)+0x12e>
    7e48:	ldr	r2, [r5, #8]
    7e4a:	ldr	r1, [sp, #4]
    7e4c:	ldr	r0, [r2, #0]
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
    7e4e:	ldr	r2, [r0, #0]
    7e50:	mov	r3, fp
    7e52:	ldr.w	fp, [r2, #12]
    7e56:	mov	r2, r7
    7e58:	blx	fp
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    7e5a:	cmp	r0, #0
    7e5c:	beq.n	7ed6 <FatFile::read(void*, unsigned int)+0x12e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    7e5e:	ldr	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    7e60:	subs	r6, r6, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    7e62:	add	r3, r4
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    7e64:	add	r7, r4
    m_curPosition += n;
    7e66:	str	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    7e68:	beq.n	7f34 <FatFile::read(void*, unsigned int)+0x18c>
    7e6a:	ldrb	r1, [r5, #0]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    7e6c:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    7e6e:	lsls	r0, r1, #26
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    7e70:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    7e74:	bmi.n	7df8 <FatFile::read(void*, unsigned int)+0x50>
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    7e76:	ldrb.w	r8, [r2, #5]
    7e7a:	and.w	r8, r8, r3, lsr #9
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    } else {
      sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
      if (offset == 0 && sectorOfCluster == 0) {
    7e7e:	cmp.w	fp, #0
    7e82:	bne.n	7ef6 <FatFile::read(void*, unsigned int)+0x14e>
    7e84:	cmp.w	r8, #0
    7e88:	bne.n	7ef6 <FatFile::read(void*, unsigned int)+0x14e>
        // start of new cluster
        if (m_curPosition == 0) {
    7e8a:	cmp	r3, #0
    7e8c:	bne.n	7f0e <FatFile::read(void*, unsigned int)+0x166>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    7e8e:	lsls	r1, r1, #25
    7e90:	ite	mi
    7e92:	ldrmi	r1, [r2, #32]
    7e94:	ldrpl	r1, [r5, #32]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
    7e96:	str	r1, [r5, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    7e98:	mov	r0, r2
    7e9a:	bl	8868 <FatPartition::clusterStartSector(unsigned long) const>
    7e9e:	ldr	r2, [r5, #8]
    7ea0:	add.w	r1, r8, r0
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    7ea4:	cmp.w	fp, #0
    7ea8:	beq.n	7e04 <FatFile::read(void*, unsigned int)+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    7eaa:	add.w	r0, r2, #36	; 0x24
    7eae:	movs	r2, #0
    7eb0:	bl	87f8 <FatCache::read(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
      if (!pc) {
    7eb4:	cbz	r0, 7ed6 <FatFile::read(void*, unsigned int)+0x12e>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
      // amount to be read from current sector
      n = m_vol->bytesPerSector() - offset;
    7eb6:	rsb	r4, fp, #512	; 0x200
    7eba:	cmp	r4, r6
    7ebc:	it	cs
    7ebe:	movcs	r4, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    7ec0:	add.w	r1, r0, fp
    7ec4:	mov	r2, r4
    7ec6:	mov	r0, r7
    7ec8:	bl	b0e0 <memcpy>
    7ecc:	b.n	7e5e <FatFile::read(void*, unsigned int)+0xb6>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
            if (isDir()) {
    7ece:	ldrb	r3, [r5, #0]
    7ed0:	tst.w	r3, #112	; 0x70
    7ed4:	bne.n	7f36 <FatFile::read(void*, unsigned int)+0x18e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    7ed6:	ldrb	r3, [r5, #1]
  return -1;
    7ed8:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    7edc:	orr.w	r3, r3, #2
    7ee0:	strb	r3, [r5, #1]
  return -1;
}
    7ee2:	add	sp, #12
    7ee4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    uint32_t tmp32 = m_fileSize - m_curPosition;
    7ee8:	ldr	r3, [r0, #28]
    7eea:	ldr	r2, [r0, #20]
    7eec:	subs	r3, r3, r2
    7eee:	cmp	r9, r3
    7ef0:	it	cs
    7ef2:	movcs	r9, r3
    7ef4:	b.n	7dda <FatFile::read(void*, unsigned int)+0x32>
    7ef6:	ldr	r1, [r5, #16]
    7ef8:	b.n	7e98 <FatFile::read(void*, unsigned int)+0xf0>
    7efa:	ldr	r0, [r2, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    7efc:	ldr	r3, [r0, #0]
    7efe:	mov	r2, r7
    7f00:	ldr	r3, [r3, #8]
    7f02:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    7f04:	cmp	r0, #0
    7f06:	beq.n	7ed6 <FatFile::read(void*, unsigned int)+0x12e>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    7f08:	mov.w	r4, #512	; 0x200
    7f0c:	b.n	7e5e <FatFile::read(void*, unsigned int)+0xb6>
        // start of new cluster
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
    7f0e:	lsls	r3, r1, #28
    7f10:	bpl.n	7f1e <FatFile::read(void*, unsigned int)+0x176>
    7f12:	ldrb	r3, [r5, #2]
    7f14:	lsls	r4, r3, #25
    7f16:	bpl.n	7f1e <FatFile::read(void*, unsigned int)+0x176>
          m_curCluster++;
    7f18:	ldr	r1, [r5, #16]
    7f1a:	adds	r1, #1
    7f1c:	b.n	7e96 <FatFile::read(void*, unsigned int)+0xee>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7f1e:	mov	r0, r2
    7f20:	ldr	r1, [r5, #16]
    7f22:	mov	r2, sl
    7f24:	bl	8874 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    7f28:	cmp	r0, #0
    7f2a:	blt.n	7ed6 <FatFile::read(void*, unsigned int)+0x12e>
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
    7f2c:	beq.n	7ece <FatFile::read(void*, unsigned int)+0x126>
    7f2e:	ldr	r2, [r5, #8]
    7f30:	ldr	r1, [r5, #16]
    7f32:	b.n	7e98 <FatFile::read(void*, unsigned int)+0xf0>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    7f34:	movs	r6, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    7f36:	rsb	r0, r6, r9

fail:
  m_error |= READ_ERROR;
  return -1;
}
    7f3a:	add	sp, #12
    7f3c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00007f40 <FatFile::peek()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
    7f40:	push	{r4, r5, r6, lr}
    7f42:	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    7f44:	movs	r2, #1
    7f46:	add.w	r1, sp, #7
    7f4a:	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    7f4c:	ldr	r6, [r0, #20]
  uint32_t curCluster = m_curCluster;
    7f4e:	ldr	r5, [r0, #16]
    7f50:	bl	7da8 <FatFile::read(void*, unsigned int)>
    7f54:	cmp	r0, #1
    7f56:	it	eq
    7f58:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
    7f5c:	str	r6, [r4, #20]
    7f5e:	it	ne
    7f60:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    7f64:	str	r5, [r4, #16]
  return c;
}
    7f66:	add	sp, #8
    7f68:	pop	{r4, r5, r6, pc}
    7f6a:	nop

00007f6c <FatFile::readDirCache(bool)>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    7f6c:	push	{r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
    7f6e:	ldr	r3, [r0, #20]
    7f70:	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    7f74:	sub	sp, #12
    7f76:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    7f78:	cbz	r5, 7f7c <FatFile::readDirCache(bool)+0x10>
    7f7a:	cbnz	r1, 7fa0 <FatFile::readDirCache(bool)+0x34>
    int8_t n = read(&n, 1);
    7f7c:	movs	r2, #1
    7f7e:	add.w	r1, sp, #7
    7f82:	mov	r0, r4
    7f84:	bl	7da8 <FatFile::read(void*, unsigned int)>
    7f88:	sxtb	r0, r0
    if  (n != 1) {
    7f8a:	cmp	r0, #1
    7f8c:	bne.n	7fa6 <FatFile::readDirCache(bool)+0x3a>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
    7f8e:	ldr	r3, [r4, #20]
    7f90:	adds	r3, #31
    7f92:	str	r3, [r4, #20]
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  /** \return Cache sector address. */
  cache_t* buffer() {
    return &m_buffer;
    7f94:	ldr	r0, [r4, #8]
    7f96:	adds	r0, #48	; 0x30
  } else {
    m_curPosition += 32;
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    7f98:	add.w	r0, r0, r5, lsl #5

fail:
  return nullptr;
}
    7f9c:	add	sp, #12
    7f9e:	pop	{r4, r5, pc}
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
    7fa0:	adds	r3, #32
    7fa2:	str	r3, [r0, #20]
    7fa4:	b.n	7f94 <FatFile::readDirCache(bool)+0x28>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

fail:
  return nullptr;
    7fa6:	movs	r0, #0
}
    7fa8:	add	sp, #12
    7faa:	pop	{r4, r5, pc}

00007fac <FatFile::rename(FatFile*, char const*)>:
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    7fac:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    7fb0:	ldrb	r5, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    7fb2:	sub	sp, #104	; 0x68
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    7fb4:	movs	r4, #0
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    7fb6:	tst.w	r5, #24
    7fba:	strb.w	r4, [sp, #32]
    7fbe:	strb.w	r4, [sp, #33]	; 0x21
    7fc2:	strb.w	r4, [sp, #34]	; 0x22
    7fc6:	strb.w	r4, [sp, #68]	; 0x44
    7fca:	strb.w	r4, [sp, #69]	; 0x45
    7fce:	strb.w	r4, [sp, #70]	; 0x46
    7fd2:	beq.n	7fde <FatFile::rename(FatFile*, char const*)+0x32>
  if (!USE_LONG_FILE_NAMES && isLFN()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    7fd4:	ldr	r6, [r0, #8]
    7fd6:	ldr	r5, [r1, #8]
    7fd8:	cmp	r6, r5
    7fda:	mov	r3, r0
    7fdc:	beq.n	7fe6 <FatFile::rename(FatFile*, char const*)+0x3a>
    goto fail;
  }
  return m_vol->cacheSync();

fail:
  return false;
    7fde:	movs	r0, #0
}
    7fe0:	add	sp, #104	; 0x68
    7fe2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7fe6:	mov	r5, r3
    7fe8:	mov	r8, r2
    7fea:	mov	r6, r1
    7fec:	bl	79c0 <FatFile::sync() [clone .part.40]>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // sync() and cache directory entry
  sync();
  oldFile = *this;
    7ff0:	mov	lr, r5
    7ff2:	ldmia.w	lr!, {r0, r1, r2, r3}
    7ff6:	add	r7, sp, #68	; 0x44
    7ff8:	stmia	r7!, {r0, r1, r2, r3}
    7ffa:	ldmia.w	lr!, {r0, r1, r2, r3}
    7ffe:	stmia	r7!, {r0, r1, r2, r3}
    8000:	ldr.w	r3, [lr]
    8004:	str	r3, [r7, #0]
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
    8006:	mov	r1, r4
    8008:	mov	r0, r5
    800a:	bl	79a0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    800e:	mov	lr, r0
    8010:	cmp	r0, #0
    8012:	beq.n	7fde <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    8014:	ldr.w	r1, [lr, #4]
    8018:	ldr.w	r2, [lr, #8]
    801c:	ldr.w	r3, [lr, #12]
    8020:	ldr	r0, [r0, #0]
  // make directory entry for new path
  if (isFile()) {
    8022:	ldrb.w	ip, [r5]
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    8026:	mov	r7, sp
    8028:	stmia	r7!, {r0, r1, r2, r3}
    802a:	ldr.w	r1, [lr, #20]
    802e:	ldr.w	r2, [lr, #24]
    8032:	ldr.w	r3, [lr, #28]
    8036:	ldr.w	r0, [lr, #16]
  // make directory entry for new path
  if (isFile()) {
    803a:	and.w	lr, ip, #8
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    803e:	stmia	r7!, {r0, r1, r2, r3}
  // make directory entry for new path
  if (isFile()) {
    8040:	and.w	r3, lr, #255	; 0xff
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    8044:	mov	r2, r8
    8046:	mov	r1, r6
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
  // make directory entry for new path
  if (isFile()) {
    8048:	cmp.w	lr, #0
    804c:	beq.w	8172 <FatFile::rename(FatFile*, char const*)+0x1c6>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    8050:	movw	r3, #2561	; 0xa01
    8054:	add	r0, sp, #32
    8056:	bl	7ccc <FatFile::open(FatFile*, char const*, int)>
    805a:	cmp	r0, #0
    805c:	beq.n	7fde <FatFile::rename(FatFile*, char const*)+0x32>
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    805e:	ldr	r0, [sp, #56]	; 0x38
  m_dirIndex = file.m_dirIndex;
    8060:	ldrh.w	r1, [sp, #36]	; 0x24
  m_lfnOrd = file.m_lfnOrd;
    8064:	ldrb.w	r2, [sp, #35]	; 0x23
  m_dirCluster = file.m_dirCluster;
    8068:	ldr	r3, [sp, #44]	; 0x2c
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    806a:	str	r0, [r5, #24]
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    806c:	movs	r6, #0
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
    806e:	strh	r1, [r5, #4]
  m_lfnOrd = file.m_lfnOrd;
    8070:	strb	r2, [r5, #3]
  m_dirCluster = file.m_dirCluster;
    8072:	str	r3, [r5, #12]
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    8074:	movs	r1, #1
    8076:	mov	r0, r5
  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    8078:	strb.w	r6, [sp, #32]
  file.m_flags = 0;
    807c:	strb.w	r6, [sp, #34]	; 0x22

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    8080:	bl	79a0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    8084:	cmp	r0, #0
    8086:	beq.n	7fde <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    8088:	add	r3, sp, #104	; 0x68
  dir->attributes = entry.attributes;
    808a:	ldrb.w	r2, [sp, #11]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    808e:	ldr.w	r7, [r3, #-91]!
    8092:	str.w	r7, [r0, #13]
    8096:	ldr	r7, [r3, #4]
    8098:	str.w	r7, [r0, #17]
    809c:	ldr	r7, [r3, #8]
    809e:	str.w	r7, [r0, #21]
    80a2:	ldr	r7, [r3, #12]
    80a4:	str.w	r7, [r0, #25]
    80a8:	ldrh	r7, [r3, #16]
    80aa:	ldrb	r3, [r3, #18]
    80ac:	strh.w	r7, [r0, #29]
    80b0:	strb	r3, [r0, #31]
  dir->attributes = entry.attributes;
    80b2:	strb	r2, [r0, #11]

  // update dot dot if directory
  if (dirCluster) {
    80b4:	cmp	r4, #0
    80b6:	beq.n	812e <FatFile::rename(FatFile*, char const*)+0x182>
    // get new dot dot
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    80b8:	mov	r1, r4
    80ba:	ldr	r0, [r5, #8]
    80bc:	bl	8868 <FatPartition::clusterStartSector(unsigned long) const>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    80c0:	ldr	r3, [r5, #8]
    80c2:	mov	r1, r0
    80c4:	mov	r2, r6
    80c6:	add.w	r0, r3, #36	; 0x24
    80ca:	bl	87f8 <FatCache::read(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    80ce:	cmp	r0, #0
    80d0:	beq.n	7fde <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&entry, &pc->dir[1], sizeof(entry));
    80d2:	mov	r6, r0
    80d4:	mov	r7, sp
    80d6:	ldr.w	r0, [r6, #32]!
    80da:	ldr	r1, [r6, #4]
    80dc:	ldr	r2, [r6, #8]
    80de:	ldr	r3, [r6, #12]
    80e0:	stmia	r7!, {r0, r1, r2, r3}
    80e2:	ldr	r0, [r6, #16]
    80e4:	ldr	r1, [r6, #20]
    80e6:	ldr	r2, [r6, #24]
    80e8:	ldr	r3, [r6, #28]
    80ea:	stmia	r7!, {r0, r1, r2, r3}

    // free unused cluster
    if (!m_vol->freeChain(dirCluster)) {
    80ec:	mov	r1, r4
    80ee:	ldr	r0, [r5, #8]
    80f0:	bl	89d0 <FatPartition::freeChain(unsigned long)>
    80f4:	cmp	r0, #0
    80f6:	beq.w	7fde <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // store new dot dot
    sector = m_vol->clusterStartSector(m_firstCluster);
    80fa:	ldr	r1, [r5, #32]
    80fc:	ldr	r0, [r5, #8]
    80fe:	bl	8868 <FatPartition::clusterStartSector(unsigned long) const>
    8102:	ldr	r3, [r5, #8]
    8104:	mov	r1, r0
    8106:	movs	r2, #1
    8108:	add.w	r0, r3, #36	; 0x24
    810c:	bl	87f8 <FatCache::read(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    8110:	mov	r7, r0
    8112:	cmp	r0, #0
    8114:	beq.w	7fde <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
    8118:	mov	r4, sp
    811a:	ldmia	r4!, {r0, r1, r2, r3}
    811c:	str	r0, [r7, #32]
    811e:	str	r1, [r7, #36]	; 0x24
    8120:	str	r2, [r7, #40]	; 0x28
    8122:	str	r3, [r7, #44]	; 0x2c
    8124:	ldmia	r4!, {r0, r1, r2, r3}
    8126:	str	r0, [r7, #48]	; 0x30
    8128:	str	r1, [r7, #52]	; 0x34
    812a:	str	r2, [r7, #56]	; 0x38
    812c:	str	r3, [r7, #60]	; 0x3c
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    812e:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    8130:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    8132:	movs	r3, #8
  if (!oldFile.remove()) {
    8134:	add	r0, sp, #68	; 0x44
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    8136:	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    8138:	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    813c:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    8140:	bl	9054 <FatFile::remove()>
    8144:	cmp	r0, #0
    8146:	beq.w	7fde <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return m_vol->cacheSync();
    814a:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    814c:	add.w	r0, r4, #36	; 0x24
    8150:	bl	8858 <FatCache::sync()>
    8154:	cmp	r0, #0
    8156:	beq.w	7fde <FatFile::rename(FatFile*, char const*)+0x32>
    815a:	add.w	r0, r4, #560	; 0x230
    815e:	bl	8858 <FatCache::sync()>
    8162:	cmp	r0, #0
    8164:	beq.w	7fde <FatFile::rename(FatFile*, char const*)+0x32>
    8168:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    816a:	ldr	r3, [r0, #0]
    816c:	ldr	r3, [r3, #20]
    816e:	blx	r3
    8170:	b.n	7fe0 <FatFile::rename(FatFile*, char const*)+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // don't create missing path prefix components
    if (!file.mkdir(dirFile, newPath, false)) {
    8172:	add	r0, sp, #32
    8174:	bl	7c08 <FatFile::mkdir(FatFile*, char const*, bool)>
    8178:	cmp	r0, #0
    817a:	beq.w	7fde <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
    817e:	ldr	r4, [sp, #64]	; 0x40
    8180:	b.n	805e <FatFile::rename(FatFile*, char const*)+0xb2>
    8182:	nop

00008184 <FatFile::rmdir()>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
  // must be open subdirectory
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    8184:	ldrb	r3, [r0, #0]
    8186:	lsls	r2, r3, #27
    8188:	bpl.n	81c0 <FatFile::rmdir()+0x3c>
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    818a:	ldr	r3, [r0, #20]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
    818c:	push	{r4, lr}
    818e:	mov	r4, r0
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    8190:	cbz	r3, 81a0 <FatFile::rmdir()+0x1c>
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    8192:	ldrb	r3, [r0, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    8194:	movs	r2, #0
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    8196:	bic.w	r3, r3, #32
    819a:	strb	r3, [r0, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    819c:	str	r2, [r0, #16]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    819e:	str	r2, [r0, #20]
  }
  rewind();

  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    81a0:	movs	r1, #1
    81a2:	mov	r0, r4
    81a4:	bl	7f6c <FatFile::readDirCache(bool)>
    if (!dir) {
    81a8:	cbz	r0, 81c4 <FatFile::rmdir()+0x40>
      }
      DBG_FAIL_MACRO;
      goto fail;
    }
    // done if past last used entry
    if (dir->name[0] == FAT_NAME_FREE) {
    81aa:	ldrb	r3, [r0, #0]
    81ac:	cbz	r3, 81ca <FatFile::rmdir()+0x46>
      break;
    }
    // skip empty slot, '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    81ae:	cmp	r3, #229	; 0xe5
    81b0:	beq.n	81a0 <FatFile::rmdir()+0x1c>
    81b2:	cmp	r3, #46	; 0x2e
    81b4:	beq.n	81a0 <FatFile::rmdir()+0x1c>
      continue;
    }
    // error not empty
    if (isFileOrSubdir(dir)) {
    81b6:	ldrb	r3, [r0, #11]
    81b8:	lsls	r3, r3, #28
    81ba:	bmi.n	81a0 <FatFile::rmdir()+0x1c>
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
}
    81bc:	movs	r0, #0
    81be:	pop	{r4, pc}
    81c0:	movs	r0, #0
    81c2:	bx	lr
  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    if (!dir) {
      // EOF if no error.
      if (!getError()) {
    81c4:	ldrb	r3, [r4, #1]
    81c6:	cmp	r3, #0
    81c8:	bne.n	81bc <FatFile::rmdir()+0x38>
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    81ca:	ldrb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    81cc:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
    81ce:	orr.w	r3, r3, #2
    81d2:	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    81d4:	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    81d6:	mov	r0, r4

fail:
  return false;
}
    81d8:	ldmia.w	sp!, {r4, lr}
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    81dc:	b.w	9054 <FatFile::remove()>

000081e0 <FatFile::seekSet(unsigned long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    81e0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    81e4:	ldrb	r3, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    81e6:	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    81e8:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    81ea:	cbz	r3, 821a <FatFile::seekSet(unsigned long)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    81ec:	ldr	r2, [r0, #20]
    81ee:	cmp	r2, r1
    81f0:	mov	r6, r1
    81f2:	beq.n	826a <FatFile::seekSet(unsigned long)+0x8a>
    return true;
  }
  if (pos == 0) {
    81f4:	cbnz	r1, 8208 <FatFile::seekSet(unsigned long)+0x28>
    // set position to start of file
    m_curCluster = 0;
    81f6:	str	r1, [r4, #16]
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    81f8:	ldrb	r3, [r4, #2]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    81fa:	str	r6, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    81fc:	bic.w	r3, r3, #32
    8200:	strb	r3, [r4, #2]
  return true;
    8202:	movs	r0, #1
    8204:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    8208:	lsls	r0, r3, #28
    820a:	bmi.n	8222 <FatFile::seekSet(unsigned long)+0x42>
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
    820c:	lsls	r1, r3, #26
    820e:	bpl.n	8228 <FatFile::seekSet(unsigned long)+0x48>
    8210:	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
    8212:	ldrh	r3, [r3, #8]
    8214:	cmp.w	r6, r3, lsl #5
    8218:	bls.n	81f8 <FatFile::seekSet(unsigned long)+0x18>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

fail:
  m_curCluster = tmp;
    821a:	str	r7, [r4, #16]
  return false;
    821c:	movs	r0, #0
    821e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_fileSize) {
    8222:	ldr	r1, [r4, #28]
    8224:	cmp	r6, r1
    8226:	bhi.n	821a <FatFile::seekSet(unsigned long)+0x3a>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    8228:	ldr.w	lr, [r4, #8]
    822c:	ldrb.w	r5, [lr, #6]
    8230:	adds	r5, #9
    8232:	uxtb	r1, r5
    8234:	subs	r0, r2, #1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    8236:	subs	r5, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    8238:	lsrs	r0, r1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    823a:	lsrs	r5, r1

  if (nNew < nCur || m_curPosition == 0) {
    823c:	cmp	r0, r5
    823e:	bhi.n	8242 <FatFile::seekSet(unsigned long)+0x62>
    8240:	cbnz	r2, 8270 <FatFile::seekSet(unsigned long)+0x90>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    8242:	lsls	r3, r3, #25
    8244:	ite	mi
    8246:	ldrmi.w	r3, [lr, #32]
    824a:	ldrpl	r3, [r4, #32]
    824c:	str	r3, [r4, #16]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    824e:	add.w	r8, r4, #16
    8252:	mov	r2, r8
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    8254:	cmp	r5, #0
    8256:	beq.n	81f8 <FatFile::seekSet(unsigned long)+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    8258:	ldr	r1, [r4, #16]
    825a:	ldr	r0, [r4, #8]
    825c:	bl	8874 <FatPartition::fatGet(unsigned long, unsigned long*)>
    8260:	cmp	r0, #0
    8262:	add.w	r5, r5, #4294967295
    8266:	bgt.n	8252 <FatFile::seekSet(unsigned long)+0x72>
    8268:	b.n	821a <FatFile::seekSet(unsigned long)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    826a:	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    826c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    8270:	subs	r5, r5, r0
    8272:	b.n	824e <FatFile::seekSet(unsigned long)+0x6e>

00008274 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    8274:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8278:	mov	r5, r1
    827a:	mov	r8, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    827c:	movs	r1, #0
    827e:	movs	r2, #36	; 0x24
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    8280:	mov	r4, r0
    8282:	mov	r7, r3
    8284:	ldrb.w	r6, [sp, #24]
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    8288:	bl	df8c <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
    828c:	ldr	r0, [r5, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    828e:	ldr	r3, [r5, #32]
    8290:	str	r3, [r4, #12]
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  /** \return Cache sector address. */
  cache_t* buffer() {
    return &m_buffer;
    8292:	add.w	r2, r0, #48	; 0x30
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    8296:	and.w	r3, r8, #15
    829a:	add.w	r2, r2, r3, lsl #5
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
    829e:	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
    82a0:	strh.w	r8, [r4, #4]
    82a4:	ldrb	r1, [r2, #11]
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    82a6:	lsls	r5, r1, #28
    82a8:	bmi.n	82d0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    82aa:	and.w	r1, r1, #23
    82ae:	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    82b0:	ldrb	r3, [r2, #11]
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
    82b2:	strb	r6, [r4, #3]
  if (!isFileOrSubdir(dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    82b4:	tst.w	r3, #24
    m_attributes |= FILE_ATTR_FILE;
    82b8:	it	eq
    82ba:	orreq.w	r1, r1, #8
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    82be:	and.w	r3, r7, #3
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
    82c2:	it	eq
    82c4:	strbeq	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    82c6:	cmp	r3, #1
    82c8:	beq.n	82da <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
    82ca:	cmp	r3, #2
    82cc:	beq.n	8322 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xae>
    82ce:	cbz	r3, 8318 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    82d0:	movs	r0, #0
    82d2:	strb	r0, [r4, #0]
  m_flags = 0;
    82d4:	strb	r0, [r4, #2]
  return false;
    82d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    82da:	movs	r3, #2
    82dc:	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    82de:	ldrb	r1, [r4, #0]
    82e0:	tst.w	r1, #17
    82e4:	bne.n	82d0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    82e6:	sxtb	r1, r3
    82e8:	and.w	r5, r7, #1024	; 0x400
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    82ec:	and.w	r3, r7, #8
    82f0:	orrs	r3, r1
    82f2:	uxtb	r3, r3
    82f4:	strb	r3, [r4, #2]

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    82f6:	ldrh.w	lr, [r2, #20]
    82fa:	ldrh	r1, [r2, #26]
    82fc:	ldr	r6, [r0, #44]	; 0x2c
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);

  m_dirSector = m_vol->cacheSectorNumber();
    82fe:	str	r6, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    8300:	orr.w	r1, r1, lr, lsl #16

  if (oflag & O_TRUNC) {
    8304:	cbz	r5, 8328 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    8306:	cbnz	r1, 833e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xca>
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    8308:	orn	r3, r3, #127	; 0x7f
    830c:	strb	r3, [r4, #2]
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    830e:	lsls	r3, r7, #17
    8310:	bmi.n	8330 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    8312:	movs	r0, #1
    8314:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
    8318:	ands.w	r5, r7, #1024	; 0x400
    831c:	bne.n	82d0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    831e:	movs	r1, #1
    8320:	b.n	82ec <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x78>
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    8322:	movs	r3, #3
    8324:	strb	r3, [r4, #2]
      break;
    8326:	b.n	82de <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
    8328:	str	r1, [r4, #32]
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    832a:	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    832c:	str	r3, [r4, #28]
    832e:	b.n	830e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9a>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    8330:	ldr	r1, [r4, #28]
    8332:	mov	r0, r4
    8334:	bl	81e0 <FatFile::seekSet(unsigned long)>
    8338:	cmp	r0, #0
    833a:	bne.n	8312 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9e>
    833c:	b.n	82d0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    833e:	bl	89d0 <FatPartition::freeChain(unsigned long)>
    8342:	cmp	r0, #0
    8344:	beq.n	82d0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    8346:	ldrb	r3, [r4, #2]
    8348:	b.n	8308 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
    834a:	nop

0000834c <FatFile::openNext(FatFile*, int)>:
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    834c:	ldrb	r3, [r0, #0]
    834e:	cbnz	r3, 8358 <FatFile::openNext(FatFile*, int)+0xc>
    8350:	ldrb	r3, [r1, #0]
    8352:	tst.w	r3, #112	; 0x70
    8356:	bne.n	835c <FatFile::openNext(FatFile*, int)+0x10>
      lfnOrd = 0;
    }
  }

fail:
  return false;
    8358:	movs	r0, #0
}
    835a:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    835c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8360:	ldr	r6, [r1, #20]
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    8362:	ands.w	r7, r6, #31
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    8366:	sub	sp, #8
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    8368:	bne.n	83ae <FatFile::openNext(FatFile*, int)+0x62>
    836a:	mov	r9, r2
    836c:	mov	r5, r1
    836e:	mov	r8, r0
    8370:	mov	sl, r7
    8372:	b.n	8378 <FatFile::openNext(FatFile*, int)+0x2c>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
        lfnOrd = ldir->order & 0X1F;
        checksum = ldir->checksum;
      }
    } else {
      lfnOrd = 0;
    8374:	movs	r7, #0
    8376:	ldr	r6, [r5, #20]
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    DirFat_t* dir = dirFile->readDirCache();
    8378:	movs	r1, #0
    837a:	mov	r0, r5
    837c:	bl	7f6c <FatFile::readDirCache(bool)>
    if (!dir) {
    8380:	cbz	r0, 83ae <FatFile::openNext(FatFile*, int)+0x62>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == FAT_NAME_FREE) {
    8382:	ldrb	r3, [r0, #0]
    8384:	cbz	r3, 83ae <FatFile::openNext(FatFile*, int)+0x62>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    8386:	cmp	r3, #46	; 0x2e
    8388:	beq.n	8374 <FatFile::openNext(FatFile*, int)+0x28>
    838a:	cmp	r3, #229	; 0xe5
    838c:	beq.n	8374 <FatFile::openNext(FatFile*, int)+0x28>
    838e:	ldrb	r2, [r0, #11]
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
    8390:	lsls	r1, r2, #28
    8392:	bpl.n	83b6 <FatFile::openNext(FatFile*, int)+0x6a>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (isLongName(dir)) {
    8394:	cmp	r2, #15
    8396:	bne.n	8374 <FatFile::openNext(FatFile*, int)+0x28>
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    8398:	lsls	r2, r3, #25
    839a:	bpl.n	8376 <FatFile::openNext(FatFile*, int)+0x2a>
        lfnOrd = ldir->order & 0X1F;
    839c:	and.w	r7, r3, #31
        checksum = ldir->checksum;
    83a0:	ldrb.w	sl, [r0, #13]
    83a4:	b.n	8376 <FatFile::openNext(FatFile*, int)+0x2a>
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    83a6:	bl	8bf8 <FatFile::lfnChecksum(unsigned char*)>
    83aa:	cmp	r0, sl
    83ac:	beq.n	83ba <FatFile::openNext(FatFile*, int)+0x6e>
      lfnOrd = 0;
    }
  }

fail:
  return false;
    83ae:	movs	r0, #0
}
    83b0:	add	sp, #8
    83b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    83b6:	cmp	r7, #0
    83b8:	bne.n	83a6 <FatFile::openNext(FatFile*, int)+0x5a>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    83ba:	str	r7, [sp, #0]
    83bc:	mov	r3, r9
    83be:	ubfx	r2, r6, #5, #16
    83c2:	mov	r1, r5
    83c4:	mov	r0, r8
    83c6:	bl	8274 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    83ca:	b.n	83b0 <FatFile::openNext(FatFile*, int)+0x64>

000083cc <FatFile::sync()>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    83cc:	ldrb	r3, [r0, #0]
    83ce:	cbz	r3, 83d4 <FatFile::sync()+0x8>
    83d0:	b.w	79c0 <FatFile::sync() [clone .part.40]>
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
    83d4:	movs	r0, #1
    83d6:	bx	lr

000083d8 <FatFile::truncate()>:
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    83d8:	ldrb	r3, [r0, #2]
    83da:	lsls	r3, r3, #30
    83dc:	bpl.n	8414 <FatFile::truncate()+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    83de:	ldr	r3, [r0, #32]
    83e0:	cbz	r3, 8410 <FatFile::truncate()+0x38>

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    83e2:	push	{r4, lr}
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    83e4:	ldr	r1, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    83e6:	sub	sp, #8
    83e8:	mov	r4, r0
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    83ea:	cbnz	r1, 842a <FatFile::truncate()+0x52>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    83ec:	str	r3, [sp, #4]
    m_firstCluster = 0;
    83ee:	str	r1, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    83f0:	mov	r1, r3
    83f2:	ldr	r0, [r4, #8]
    83f4:	bl	89d0 <FatPartition::freeChain(unsigned long)>
    83f8:	cbz	r0, 8426 <FatFile::truncate()+0x4e>
    }
  }
  m_fileSize = m_curPosition;

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    83fa:	ldrb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    83fc:	ldrb	r2, [r4, #0]
    if (!m_vol->freeChain(toFree)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_fileSize = m_curPosition;
    83fe:	ldr	r1, [r4, #20]
    8400:	str	r1, [r4, #28]

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    8402:	orn	r3, r3, #127	; 0x7f
    8406:	strb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    8408:	cbnz	r2, 8446 <FatFile::truncate()+0x6e>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    840a:	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    840c:	add	sp, #8
    840e:	pop	{r4, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    8410:	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    8412:	bx	lr
    goto fail;
  }
  return true;

 fail:
  return false;
    8414:	movs	r0, #0
}
    8416:	bx	lr
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    8418:	mvn.w	r2, #4026531840	; 0xf0000000
    841c:	ldr	r1, [r4, #16]
    841e:	ldr	r0, [r4, #8]
    8420:	bl	88e4 <FatPartition::fatPut(unsigned long, unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
      // current cluster is end of chain
      if (!m_vol->fatPutEOC(m_curCluster)) {
    8424:	cbnz	r0, 843e <FatFile::truncate()+0x66>
    goto fail;
  }
  return true;

 fail:
  return false;
    8426:	movs	r0, #0
    8428:	b.n	840c <FatFile::truncate()+0x34>
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    toFree = 0;
    842a:	add	r2, sp, #8
    842c:	movs	r3, #0
    842e:	str.w	r3, [r2, #-4]!
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    8432:	ldr	r0, [r0, #8]
    8434:	bl	8874 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    8438:	cmp	r0, #0
    843a:	blt.n	8426 <FatFile::truncate()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
    843c:	bne.n	8418 <FatFile::truncate()+0x40>
    }
  } else {
    toFree = m_firstCluster;
    m_firstCluster = 0;
  }
  if (toFree) {
    843e:	ldr	r3, [sp, #4]
    8440:	cmp	r3, #0
    8442:	beq.n	83fa <FatFile::truncate()+0x22>
    8444:	b.n	83f0 <FatFile::truncate()+0x18>
    8446:	mov	r0, r4
    8448:	bl	79c0 <FatFile::sync() [clone .part.40]>
    844c:	b.n	840c <FatFile::truncate()+0x34>
    844e:	nop

00008450 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    8450:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8454:	ldrb	r3, [r0, #2]
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    8456:	lsls	r5, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    8458:	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    845a:	bmi.n	846c <FatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    845c:	ldrb	r3, [r4, #1]
    845e:	orr.w	r3, r3, #1
    8462:	strb	r3, [r4, #1]
  return -1;
    8464:	mov.w	r0, #4294967295
    8468:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    846c:	mov	r9, r2
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    846e:	lsls	r2, r3, #28
    8470:	mov	r8, r1
    8472:	bmi.w	85f4 <FatFile::write(void const*, unsigned int)+0x1a4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    8476:	ldr	r2, [r4, #20]
    8478:	mvns	r3, r2
    847a:	cmp	r9, r3
    847c:	bhi.n	845c <FatFile::write(void const*, unsigned int)+0xc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    847e:	cmp.w	r9, #0
    8482:	beq.w	8602 <FatFile::write(void const*, unsigned int)+0x1b2>
    8486:	mov	r6, r9
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    8488:	mov.w	sl, #0
    848c:	b.n	84f0 <FatFile::write(void const*, unsigned int)+0xa0>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    848e:	cmp	r1, #0
    8490:	beq.n	8586 <FatFile::write(void const*, unsigned int)+0x136>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    8492:	ldrb	r3, [r4, #2]
    8494:	lsls	r3, r3, #25
    8496:	bpl.n	8594 <FatFile::write(void const*, unsigned int)+0x144>
    8498:	ldr	r3, [r4, #28]
    849a:	cmp	r3, r2
    849c:	bls.n	8594 <FatFile::write(void const*, unsigned int)+0x144>
          m_curCluster++;
    849e:	adds	r1, #1
    84a0:	str	r1, [r4, #16]
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    84a2:	bl	8868 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    84a6:	cmp.w	r6, #512	; 0x200
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    84aa:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    84ac:	bcs.n	852a <FatFile::write(void const*, unsigned int)+0xda>
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    84ae:	ldr	r2, [r4, #20]
    84b0:	ldr	r3, [r4, #28]
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    84b2:	ldr	r0, [r4, #8]
    84b4:	cmp.w	r6, #512	; 0x200
    84b8:	mov	r5, r6
    84ba:	it	cs
    84bc:	movcs.w	r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    84c0:	cmp	r2, r3
    84c2:	bcc.n	85b6 <FatFile::write(void const*, unsigned int)+0x166>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    84c4:	movs	r2, #5
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    84c6:	adds	r0, #36	; 0x24
    84c8:	bl	87f8 <FatCache::read(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
    84cc:	cmp	r0, #0
    84ce:	beq.n	845c <FatFile::write(void const*, unsigned int)+0xc>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    84d0:	add	r0, r7
    84d2:	mov	r2, r5
    84d4:	mov	r1, r8
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    84d6:	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    84d8:	bl	b0e0 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    84dc:	cmp.w	r7, #512	; 0x200
    84e0:	beq.n	85d2 <FatFile::write(void const*, unsigned int)+0x182>
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    84e2:	ldr	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    84e4:	subs	r6, r6, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    84e6:	add	r2, r5
    src += n;
    84e8:	add	r8, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    84ea:	str	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    84ec:	beq.w	8602 <FatFile::write(void const*, unsigned int)+0x1b2>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    84f0:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    84f2:	ldr	r1, [r4, #16]
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    84f4:	ldrb	r3, [r0, #5]
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    84f6:	ands.w	r5, r3, r2, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    84fa:	ubfx	r7, r2, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    84fe:	bne.n	851a <FatFile::write(void const*, unsigned int)+0xca>
    8500:	cmp	r7, #0
    8502:	beq.n	848e <FatFile::write(void const*, unsigned int)+0x3e>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    8504:	bl	8868 <FatPartition::clusterStartSector(unsigned long) const>
    8508:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    850a:	rsb	r5, r7, #512	; 0x200
    850e:	cmp	r5, r6
    8510:	it	cs
    8512:	movcs	r5, r6
    8514:	ldr	r0, [r4, #8]
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
    8516:	movs	r2, #1
    8518:	b.n	84c6 <FatFile::write(void const*, unsigned int)+0x76>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    851a:	bl	8868 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;
    851e:	adds	r1, r5, r0

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    8520:	cmp	r7, #0
    8522:	bne.n	850a <FatFile::write(void const*, unsigned int)+0xba>
    8524:	cmp.w	r6, #512	; 0x200
    8528:	bcc.n	84ae <FatFile::write(void const*, unsigned int)+0x5e>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    852a:	cmp.w	r6, #1024	; 0x400
    852e:	ldr	r2, [r4, #8]
    8530:	bcc.n	856a <FatFile::write(void const*, unsigned int)+0x11a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    8532:	ldrb	r3, [r2, #4]
    8534:	ldr	r7, [r2, #44]	; 0x2c
    8536:	subs	r3, r3, r5
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    8538:	lsrs	r0, r6, #9
    853a:	cmp	r3, r0
    853c:	it	cs
    853e:	movcs	r3, r0
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    8540:	cmp	r7, r1
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    8542:	mov.w	r5, r3, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    8546:	bcc.n	855a <FatFile::write(void const*, unsigned int)+0x10a>
    8548:	add	r7, r3
    854a:	cmp	r7, r1
    854c:	bls.n	855a <FatFile::write(void const*, unsigned int)+0x10a>
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    854e:	strb.w	sl, [r2, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
    8552:	mov.w	r0, #4294967295
    8556:	str	r0, [r2, #44]	; 0x2c
    8558:	ldr	r2, [r4, #8]
    855a:	ldr	r0, [r2, #0]
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    return m_blockDev->writeSectors(sector, src, ns);
    855c:	ldr	r2, [r0, #0]
    855e:	ldr	r7, [r2, #28]
    8560:	mov	r2, r8
    8562:	blx	r7
        // Invalidate cache if cache sector is in the range.
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, nSector)) {
    8564:	cmp	r0, #0
    8566:	bne.n	84e2 <FatFile::write(void const*, unsigned int)+0x92>
    8568:	b.n	845c <FatFile::write(void const*, unsigned int)+0xc>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->cacheSectorNumber() == sector) {
    856a:	ldr	r3, [r2, #44]	; 0x2c
    856c:	cmp	r3, r1
    856e:	beq.n	85c4 <FatFile::write(void const*, unsigned int)+0x174>
    8570:	ldr	r0, [r2, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    8572:	ldr	r3, [r0, #0]
    8574:	mov	r2, r8
    8576:	ldr	r3, [r3, #24]
    8578:	blx	r3
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    857a:	cmp	r0, #0
    857c:	beq.w	845c <FatFile::write(void const*, unsigned int)+0xc>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    8580:	mov.w	r5, #512	; 0x200
    8584:	b.n	84e2 <FatFile::write(void const*, unsigned int)+0x92>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    8586:	ldr	r1, [r4, #32]
    8588:	cbz	r1, 85e0 <FatFile::write(void const*, unsigned int)+0x190>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    858a:	str	r1, [r4, #16]
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    858c:	bl	8868 <FatPartition::clusterStartSector(unsigned long) const>
    8590:	mov	r1, r0
    8592:	b.n	8524 <FatFile::write(void const*, unsigned int)+0xd4>
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    8594:	add.w	r2, r4, #16
    8598:	bl	8874 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    859c:	cmp	r0, #0
    859e:	blt.w	845c <FatFile::write(void const*, unsigned int)+0xc>
        if (fg < 0) {
          DBG_FAIL_MACRO;
          goto fail;
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
    85a2:	bne.n	85b0 <FatFile::write(void const*, unsigned int)+0x160>
          // add cluster if at end of chain
          if (!addCluster()) {
    85a4:	mov	r0, r4
    85a6:	bl	78d8 <FatFile::addCluster()>
    85aa:	cmp	r0, #0
    85ac:	beq.w	845c <FatFile::write(void const*, unsigned int)+0xc>
    85b0:	ldr	r0, [r4, #8]
    85b2:	ldr	r1, [r4, #16]
    85b4:	b.n	858c <FatFile::write(void const*, unsigned int)+0x13c>
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    85b6:	ldrb	r3, [r4, #2]
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    85b8:	tst.w	r3, #32
    85bc:	ite	eq
    85be:	moveq	r2, #1
    85c0:	movne	r2, #5
    85c2:	b.n	84c6 <FatFile::write(void const*, unsigned int)+0x76>
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    85c4:	strb.w	sl, [r2, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
    85c8:	mov.w	r3, #4294967295
    85cc:	str	r3, [r2, #44]	; 0x2c
    85ce:	ldr	r2, [r4, #8]
    85d0:	b.n	8570 <FatFile::write(void const*, unsigned int)+0x120>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    85d2:	ldr	r0, [r4, #8]
    85d4:	adds	r0, #36	; 0x24
    85d6:	bl	8858 <FatCache::sync()>
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->cacheSyncData()) {
    85da:	cmp	r0, #0
    85dc:	bne.n	84e2 <FatFile::write(void const*, unsigned int)+0x92>
    85de:	b.n	845c <FatFile::write(void const*, unsigned int)+0xc>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    85e0:	mov	r0, r4
    85e2:	bl	78d8 <FatFile::addCluster()>
    85e6:	cmp	r0, #0
    85e8:	beq.w	845c <FatFile::write(void const*, unsigned int)+0xc>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    85ec:	ldr	r1, [r4, #16]
    85ee:	str	r1, [r4, #32]
    85f0:	ldr	r0, [r4, #8]
    85f2:	b.n	858c <FatFile::write(void const*, unsigned int)+0x13c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_fileSize)) {
    85f4:	ldr	r1, [r0, #28]
    85f6:	bl	81e0 <FatFile::seekSet(unsigned long)>
    85fa:	cmp	r0, #0
    85fc:	beq.w	845c <FatFile::write(void const*, unsigned int)+0xc>
    8600:	b.n	8476 <FatFile::write(void const*, unsigned int)+0x26>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    8602:	ldr	r3, [r4, #28]
    8604:	cmp	r3, r2
    8606:	bcc.n	861c <FatFile::write(void const*, unsigned int)+0x1cc>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    8608:	ldr	r3, [pc, #40]	; (8634 <FatFile::write(void const*, unsigned int)+0x1e4>)
    860a:	ldr	r3, [r3, #0]
    860c:	cbz	r3, 862c <FatFile::write(void const*, unsigned int)+0x1dc>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    860e:	ldrb	r3, [r4, #2]
    8610:	orn	r3, r3, #127	; 0x7f
    8614:	strb	r3, [r4, #2]
    8616:	mov	r0, r9
    8618:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    861c:	ldrb	r3, [r4, #2]
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    861e:	str	r2, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    8620:	orn	r3, r3, #127	; 0x7f
    8624:	strb	r3, [r4, #2]
    8626:	mov	r0, r9
    8628:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    862c:	mov	r0, r9
    862e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8632:	nop
    8634:	.word	0x1fff1f2c

00008638 <FatFile::printModifyDateTime(Print*)>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::printModifyDateTime(print_t* pr) {
    8638:	push	{r4, lr}
    863a:	sub	sp, #32
    863c:	mov	r4, r1
  DirFat_t dir;
  if (!dirEntry(&dir)) {
    863e:	mov	r1, sp
    8640:	bl	7a74 <FatFile::dirEntry(DirFat_t*)>
    8644:	cbz	r0, 8654 <FatFile::printModifyDateTime(Print*)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return fsPrintDateTime(pr, getLe16(dir.modifyDate), getLe16(dir.modifyTime));
    8646:	mov	r0, r4
    8648:	ldrh.w	r2, [sp, #22]
    864c:	ldrh.w	r1, [sp, #24]
    8650:	bl	5ce0 <fsPrintDateTime(Print*, unsigned short, unsigned short)>

fail:
  return 0;
}
    8654:	add	sp, #32
    8656:	pop	{r4, pc}

00008658 <FatFile::printFileSize(Print*)>:
//------------------------------------------------------------------------------
size_t FatFile::printFileSize(print_t* pr) {
    8658:	push	{r4, r5, lr}
    865a:	sub	sp, #20
  char buf[11];
  char *ptr = buf + sizeof(buf);
  *--ptr = 0;
    865c:	movs	r3, #0

fail:
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::printFileSize(print_t* pr) {
    865e:	mov	r5, r1
  char buf[11];
  char *ptr = buf + sizeof(buf);
  *--ptr = 0;
  ptr = fmtBase10(ptr, fileSize());
    8660:	ldr	r1, [r0, #28]
}
//------------------------------------------------------------------------------
size_t FatFile::printFileSize(print_t* pr) {
  char buf[11];
  char *ptr = buf + sizeof(buf);
  *--ptr = 0;
    8662:	strb.w	r3, [sp, #14]
  ptr = fmtBase10(ptr, fileSize());
    8666:	add.w	r0, sp, #14
    866a:	bl	5c04 <fmtBase10(char*, unsigned long)>
    866e:	add	r4, sp, #4
  while (ptr > buf) {
    8670:	cmp	r0, r4
    *--ptr = ' ';
    8672:	it	hi
    8674:	movhi	r3, #32
size_t FatFile::printFileSize(print_t* pr) {
  char buf[11];
  char *ptr = buf + sizeof(buf);
  *--ptr = 0;
  ptr = fmtBase10(ptr, fileSize());
  while (ptr > buf) {
    8676:	bls.n	8680 <FatFile::printFileSize(Print*)+0x28>
    *--ptr = ' ';
    8678:	strb.w	r3, [r0, #-1]!
size_t FatFile::printFileSize(print_t* pr) {
  char buf[11];
  char *ptr = buf + sizeof(buf);
  *--ptr = 0;
  ptr = fmtBase10(ptr, fileSize());
  while (ptr > buf) {
    867c:	cmp	r0, r4
    867e:	bne.n	8678 <FatFile::printFileSize(Print*)+0x20>
    8680:	mov	r0, r4
    8682:	bl	e580 <strlen>
    8686:	ldr	r3, [r5, #0]
    8688:	mov	r2, r0
    868a:	mov	r1, r4
    868c:	ldr	r3, [r3, #4]
    868e:	mov	r0, r5
    8690:	blx	r3
    *--ptr = ' ';
  }
  return pr->write(buf);
}
    8692:	add	sp, #20
    8694:	pop	{r4, r5, pc}
    8696:	nop

00008698 <FatFile::ls(Print*, unsigned char, unsigned char)>:
  }
  pr->write('\r');
  pr->write('\n');
}
//------------------------------------------------------------------------------
bool FatFile::ls(print_t* pr, uint8_t flags, uint8_t indent) {
    8698:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  FatFile file;
  if (!isDir()) {
    869c:	ldrb	r4, [r0, #0]
  }
  pr->write('\r');
  pr->write('\n');
}
//------------------------------------------------------------------------------
bool FatFile::ls(print_t* pr, uint8_t flags, uint8_t indent) {
    869e:	sub	sp, #40	; 0x28
    86a0:	movs	r6, #0
  FatFile file;
  if (!isDir()) {
    86a2:	ands.w	r4, r4, #112	; 0x70
    86a6:	strb.w	r6, [sp, #4]
    86aa:	strb.w	r6, [sp, #5]
    86ae:	strb.w	r6, [sp, #6]
    86b2:	bne.n	86bc <FatFile::ls(Print*, unsigned char, unsigned char)+0x24>
    goto fail;
  }
  return true;

 fail:
  return false;
    86b4:	mov	r0, r4
}
    86b6:	add	sp, #40	; 0x28
    86b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    86bc:	mov	r8, r2
    86be:	mov	r9, r0
    86c0:	mov	r5, r1
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    86c2:	mov	r1, r6
    86c4:	mov	r7, r3
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
        pr->write(' ');
      }
      if (flags & LS_DATE) {
    86c6:	and.w	sl, r8, #2
    86ca:	bl	81e0 <FatFile::seekSet(unsigned long)>
  if (!isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    86ce:	movs	r2, #0
    86d0:	mov	r1, r9
    86d2:	add	r0, sp, #4
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
        pr->write(' ');
      }
      if (flags & LS_DATE) {
    86d4:	uxtb.w	sl, sl
  if (!isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    86d8:	bl	834c <FatFile::openNext(FatFile*, int)>
    86dc:	cmp	r0, #0
    86de:	beq.n	8768 <FatFile::ls(Print*, unsigned char, unsigned char)+0xd0>
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
    86e0:	ldrb.w	r3, [sp, #4]
    86e4:	lsls	r3, r3, #30
    86e6:	bpl.n	86ee <FatFile::ls(Print*, unsigned char, unsigned char)+0x56>
    86e8:	tst.w	r8, #1
    86ec:	beq.n	8754 <FatFile::ls(Print*, unsigned char, unsigned char)+0xbc>
      for (uint8_t i = 0; i < indent; i++) {
    86ee:	movs	r4, #0
    86f0:	cbz	r7, 8704 <FatFile::ls(Print*, unsigned char, unsigned char)+0x6c>
        pr->write(' ');
    86f2:	ldr	r3, [r5, #0]
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
    86f4:	adds	r4, #1
        pr->write(' ');
    86f6:	movs	r1, #32
    86f8:	ldr	r6, [r3, #0]
    86fa:	mov	r0, r5
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
    86fc:	uxtb	r4, r4
        pr->write(' ');
    86fe:	blx	r6
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
    8700:	cmp	r7, r4
    8702:	bne.n	86f2 <FatFile::ls(Print*, unsigned char, unsigned char)+0x5a>
        pr->write(' ');
      }
      if (flags & LS_DATE) {
    8704:	cmp.w	sl, #0
    8708:	bne.n	8798 <FatFile::ls(Print*, unsigned char, unsigned char)+0x100>
        file.printModifyDateTime(pr);
        pr->write(' ');
      }
      if (flags & LS_SIZE) {
    870a:	tst.w	r8, #4
    870e:	bne.n	8784 <FatFile::ls(Print*, unsigned char, unsigned char)+0xec>
        file.printFileSize(pr);
        pr->write(' ');
      }
      file.printName(pr);
    8710:	mov	r1, r5
    8712:	add	r0, sp, #4
    8714:	bl	8f98 <FatFile::printName(Print*)>
      if (file.isDir()) {
    8718:	ldrb.w	r3, [sp, #4]
    871c:	tst.w	r3, #112	; 0x70
    8720:	bne.n	8778 <FatFile::ls(Print*, unsigned char, unsigned char)+0xe0>
        pr->write('/');
      }
      pr->write('\r');
    8722:	ldr	r3, [r5, #0]
    8724:	movs	r1, #13
    8726:	ldr	r3, [r3, #0]
    8728:	mov	r0, r5
    872a:	blx	r3
      pr->write('\n');
    872c:	ldr	r3, [r5, #0]
    872e:	movs	r1, #10
    8730:	ldr	r3, [r3, #0]
    8732:	mov	r0, r5
    8734:	blx	r3
      if ((flags & LS_R) && file.isDir()) {
    8736:	tst.w	r8, #8
    873a:	beq.n	8754 <FatFile::ls(Print*, unsigned char, unsigned char)+0xbc>
    873c:	ldrb.w	r3, [sp, #4]
    8740:	tst.w	r3, #112	; 0x70
    8744:	beq.n	8754 <FatFile::ls(Print*, unsigned char, unsigned char)+0xbc>
        file.ls(pr, flags, indent + 2);
    8746:	adds	r3, r7, #2
    8748:	uxtb	r3, r3
    874a:	mov	r2, r8
    874c:	mov	r1, r5
    874e:	add	r0, sp, #4
    8750:	bl	8698 <FatFile::ls(Print*, unsigned char, unsigned char)>
      }
    }
    file.close();
    8754:	add	r0, sp, #4
    8756:	bl	7a54 <FatFile::close()>
  if (!isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    875a:	movs	r2, #0
    875c:	mov	r1, r9
    875e:	add	r0, sp, #4
    8760:	bl	834c <FatFile::openNext(FatFile*, int)>
    8764:	cmp	r0, #0
    8766:	bne.n	86e0 <FatFile::ls(Print*, unsigned char, unsigned char)+0x48>
        file.ls(pr, flags, indent + 2);
      }
    }
    file.close();
  }
  if (getError()) {
    8768:	ldrb.w	r0, [r9, #1]
    876c:	clz	r0, r0
    8770:	lsrs	r0, r0, #5
  }
  return true;

 fail:
  return false;
}
    8772:	add	sp, #40	; 0x28
    8774:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        file.printFileSize(pr);
        pr->write(' ');
      }
      file.printName(pr);
      if (file.isDir()) {
        pr->write('/');
    8778:	ldr	r3, [r5, #0]
    877a:	movs	r1, #47	; 0x2f
    877c:	ldr	r3, [r3, #0]
    877e:	mov	r0, r5
    8780:	blx	r3
    8782:	b.n	8722 <FatFile::ls(Print*, unsigned char, unsigned char)+0x8a>
      if (flags & LS_DATE) {
        file.printModifyDateTime(pr);
        pr->write(' ');
      }
      if (flags & LS_SIZE) {
        file.printFileSize(pr);
    8784:	mov	r1, r5
    8786:	add	r0, sp, #4
    8788:	bl	8658 <FatFile::printFileSize(Print*)>
        pr->write(' ');
    878c:	ldr	r3, [r5, #0]
    878e:	movs	r1, #32
    8790:	ldr	r3, [r3, #0]
    8792:	mov	r0, r5
    8794:	blx	r3
    8796:	b.n	8710 <FatFile::ls(Print*, unsigned char, unsigned char)+0x78>
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
        pr->write(' ');
      }
      if (flags & LS_DATE) {
        file.printModifyDateTime(pr);
    8798:	mov	r1, r5
    879a:	add	r0, sp, #4
    879c:	bl	8638 <FatFile::printModifyDateTime(Print*)>
        pr->write(' ');
    87a0:	ldr	r3, [r5, #0]
    87a2:	movs	r1, #32
    87a4:	ldr	r3, [r3, #0]
    87a6:	mov	r0, r5
    87a8:	blx	r3
    87aa:	b.n	870a <FatFile::ls(Print*, unsigned char, unsigned char)+0x72>

000087ac <FatCache::sync() [clone .part.8]>:
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    87ac:	push	{r3, r4, r5, r6, r7, lr}
    87ae:	ldr	r3, [r0, #4]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    87b0:	ldr	r1, [r0, #8]
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    87b2:	add.w	r6, r0, #12
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    87b6:	mov	r4, r0
    87b8:	ldr	r0, [r3, #0]
    87ba:	ldr	r3, [r0, #0]
    87bc:	mov	r2, r6
    87be:	ldr	r3, [r3, #24]
    87c0:	blx	r3
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    87c2:	cbz	r0, 87d6 <FatCache::sync() [clone .part.8]+0x2a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    87c4:	ldrb	r3, [r4, #0]
    87c6:	lsls	r2, r3, #30
    87c8:	mov	r5, r0
    87ca:	bmi.n	87dc <FatCache::sync() [clone .part.8]+0x30>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    87cc:	bic.w	r3, r3, #1
    87d0:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    87d2:	mov	r0, r5
    87d4:	pop	{r3, r4, r5, r6, r7, pc}
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
    87d6:	movs	r5, #0
}
    87d8:	mov	r0, r5
    87da:	pop	{r3, r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    87dc:	ldr	r3, [r4, #4]
    87de:	ldr	r1, [r4, #8]
    87e0:	ldr	r0, [r3, #0]
    87e2:	ldr	r7, [r3, #16]
    87e4:	ldr	r3, [r0, #0]
    87e6:	mov	r2, r6
    87e8:	add	r1, r7
    87ea:	ldr	r3, [r3, #24]
    87ec:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    87ee:	cmp	r0, #0
    87f0:	beq.n	87d6 <FatCache::sync() [clone .part.8]+0x2a>
    87f2:	ldrb	r3, [r4, #0]
    87f4:	b.n	87cc <FatCache::sync() [clone .part.8]+0x20>
    87f6:	nop

000087f8 <FatCache::read(unsigned long, unsigned char)>:
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    87f8:	push	{r3, r4, r5, r6, r7, lr}
  if (m_lbn != sector) {
    87fa:	ldr	r3, [r0, #8]
    87fc:	cmp	r3, r1
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    87fe:	mov	r6, r0
    8800:	mov	r4, r2
  if (m_lbn != sector) {
    8802:	beq.n	8824 <FatCache::read(unsigned long, unsigned char)+0x2c>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    8804:	ldrb	r3, [r0, #0]
    8806:	lsls	r2, r3, #31
    8808:	mov	r7, r1
    880a:	bmi.n	8832 <FatCache::read(unsigned long, unsigned char)+0x3a>
  if (m_lbn != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    880c:	lsls	r3, r4, #29
    880e:	bpl.n	883e <FatCache::read(unsigned long, unsigned char)+0x46>
    8810:	add.w	r5, r6, #12
    8814:	movs	r3, #0
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    8816:	and.w	r4, r4, #3
    881a:	orrs	r4, r3
    881c:	strb	r4, [r6, #0]
    881e:	mov	r0, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    8820:	str	r7, [r6, #8]
  return &m_buffer;

fail:

  return nullptr;
}
    8822:	pop	{r3, r4, r5, r6, r7, pc}
    8824:	ldrsb.w	r3, [r0], #12
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    8828:	and.w	r4, r4, #3
    882c:	orrs	r4, r3
    882e:	strb	r4, [r6, #0]
  return &m_buffer;

fail:

  return nullptr;
}
    8830:	pop	{r3, r4, r5, r6, r7, pc}
    8832:	bl	87ac <FatCache::sync() [clone .part.8]>
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    if (!sync()) {
    8836:	cmp	r0, #0
    8838:	bne.n	880c <FatCache::read(unsigned long, unsigned char)+0x14>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_buffer;

fail:

  return nullptr;
    883a:	movs	r0, #0
    883c:	pop	{r3, r4, r5, r6, r7, pc}
    883e:	ldr	r3, [r6, #4]
    8840:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    8842:	ldr	r3, [r0, #0]
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    8844:	add.w	r5, r6, #12
    8848:	ldr	r3, [r3, #8]
    884a:	mov	r2, r5
    884c:	mov	r1, r7
    884e:	blx	r3
    8850:	cmp	r0, #0
    8852:	bne.n	8814 <FatCache::read(unsigned long, unsigned char)+0x1c>
    8854:	b.n	883a <FatCache::read(unsigned long, unsigned char)+0x42>
    8856:	nop

00008858 <FatCache::sync()>:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    8858:	ldrb	r3, [r0, #0]
    885a:	lsls	r3, r3, #31
    885c:	bmi.n	8862 <FatCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    885e:	movs	r0, #1
    8860:	bx	lr
    8862:	b.w	87ac <FatCache::sync() [clone .part.8]>
    8866:	nop

00008868 <FatPartition::clusterStartSector(unsigned long) const>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    8868:	ldrb	r3, [r0, #6]
    886a:	ldr	r0, [r0, #20]
    886c:	subs	r1, #2
    886e:	lsls	r1, r3
}
    8870:	add	r0, r1
    8872:	bx	lr

00008874 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    8874:	cmp	r1, #1
    8876:	bls.n	88dc <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
    8878:	ldr	r3, [r0, #28]
    887a:	cmp	r1, r3
    887c:	bhi.n	88dc <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    887e:	push	{r4, r5, r6, lr}
    8880:	ldrb	r3, [r0, #7]
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    8882:	cmp	r3, #32
    8884:	mov	r6, r2
    8886:	mov	r5, r0
    8888:	mov	r4, r1
    888a:	beq.n	88be <FatPartition::fatGet(unsigned long, unsigned long*)+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    888c:	cmp	r3, #16
    888e:	bne.n	88b8 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
    8890:	ldr	r3, [r0, #24]
    8892:	ubfx	r1, r1, #8, #8
    8896:	add	r1, r3
    8898:	movs	r2, #2
    889a:	add.w	r0, r0, #560	; 0x230
    889e:	bl	87f8 <FatCache::read(unsigned long, unsigned char)>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    88a2:	cbz	r0, 88b8 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    88a4:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    88a6:	ldrh.w	r3, [r0, r1, lsl #1]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    88aa:	ldr	r2, [r5, #28]
    88ac:	cmp	r3, r2
    return 0;
  }
  *value = next;
  return 1;
    88ae:	itte	ls
    88b0:	movls	r0, #1
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
  }
  *value = next;
    88b2:	strls	r3, [r6, #0]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
    88b4:	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
    88b6:	pop	{r4, r5, r6, pc}
  }
  *value = next;
  return 1;

fail:
  return -1;
    88b8:	mov.w	r0, #4294967295
    88bc:	pop	{r4, r5, r6, pc}
    88be:	ldr	r1, [r0, #24]
    88c0:	movs	r2, #2
    88c2:	add.w	r1, r1, r4, lsr #7
    88c6:	add.w	r0, r0, #560	; 0x230
    88ca:	bl	87f8 <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    88ce:	cmp	r0, #0
    88d0:	beq.n	88b8 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    88d2:	and.w	r1, r4, #127	; 0x7f
    88d6:	ldr.w	r3, [r0, r1, lsl #2]
    88da:	b.n	88aa <FatPartition::fatGet(unsigned long, unsigned long*)+0x36>
  }
  *value = next;
  return 1;

fail:
  return -1;
    88dc:	mov.w	r0, #4294967295
}
    88e0:	bx	lr
    88e2:	nop

000088e4 <FatPartition::fatPut(unsigned long, unsigned long)>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    88e4:	cmp	r1, #1
    88e6:	bls.n	8924 <FatPartition::fatPut(unsigned long, unsigned long)+0x40>
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    88e8:	push	{r3, r4, r5, lr}
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    88ea:	ldr	r3, [r0, #28]
    88ec:	cmp	r1, r3
    88ee:	bhi.n	88fe <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    88f0:	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    88f2:	cmp	r3, #32
    88f4:	mov	r5, r2
    88f6:	mov	r4, r1
    88f8:	beq.n	8928 <FatPartition::fatPut(unsigned long, unsigned long)+0x44>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    88fa:	cmp	r3, #16
    88fc:	beq.n	8902 <FatPartition::fatPut(unsigned long, unsigned long)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    88fe:	movs	r0, #0
    8900:	pop	{r3, r4, r5, pc}
    8902:	ldr	r3, [r0, #24]
    8904:	ubfx	r1, r1, #8, #8
    8908:	add	r1, r3
    890a:	add.w	r0, r0, #560	; 0x230
    890e:	movs	r2, #3
    8910:	bl	87f8 <FatCache::read(unsigned long, unsigned char)>

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    8914:	mov	r3, r0
    8916:	cmp	r0, #0
    8918:	beq.n	88fe <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    891a:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe16(reinterpret_cast<uint8_t*>
           (&pc->fat16[cluster & (m_sectorMask >> 1)]), value);
    return true;
    891c:	movs	r0, #1
    891e:	strh.w	r5, [r3, r1, lsl #1]
    goto fail;
  }

fail:
  return false;
}
    8922:	pop	{r3, r4, r5, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    8924:	movs	r0, #0
}
    8926:	bx	lr
    8928:	ldr	r1, [r0, #24]
    892a:	movs	r2, #3
    892c:	add.w	r0, r0, #560	; 0x230
    8930:	add.w	r1, r1, r4, lsr #7
    8934:	bl	87f8 <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    8938:	mov	r3, r0
    893a:	cmp	r0, #0
    893c:	beq.n	88fe <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    893e:	and.w	r1, r4, #127	; 0x7f
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
    8942:	movs	r0, #1
    8944:	str.w	r5, [r3, r1, lsl #2]
    8948:	pop	{r3, r4, r5, pc}
    894a:	nop

0000894c <FatPartition::allocateCluster(unsigned long, unsigned long*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    894c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    8950:	ldr	r4, [r0, #12]
    8952:	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    8954:	sub	sp, #8
    8956:	mov	r5, r0
    8958:	mov	r7, r1
    895a:	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    895c:	itte	cc
    895e:	movcc	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
    8960:	movcc	r6, #0
  } else {
    find = m_allocSearchStart;
    setStart = true;
    8962:	movcs	r6, #1
    8964:	ldr	r3, [r5, #28]
  }
  while (1) {
    find++;
    8966:	adds	r4, #1
    if (find > m_lastCluster) {
    8968:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    896a:	add	r2, sp, #4
    896c:	mov	r0, r5
    896e:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    8970:	bls.n	8986 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x3a>
      if (setStart) {
    8972:	cbnz	r6, 89c4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
    8974:	ldr	r4, [r5, #12]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    8976:	adds	r4, #1
    if (find > m_lastCluster) {
    8978:	cmp	r4, r3
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
      setStart = true;
    897a:	mov.w	r6, #1
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    897e:	add	r2, sp, #4
    8980:	mov	r0, r5
    8982:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    8984:	bhi.n	8972 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x26>
      }
      find = m_allocSearchStart;
      setStart = true;
      continue;
    }
    if (find == current) {
    8986:	cmp	r7, r4
    8988:	beq.n	89c4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    898a:	bl	8874 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    898e:	cmp	r0, #0
    8990:	blt.n	89c4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
    8992:	beq.n	8964 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    8994:	ldr	r3, [sp, #4]
    8996:	cmp	r3, #0
    8998:	bne.n	8964 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
      break;
    }
  }
  if (setStart) {
    899a:	cbz	r6, 899e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x52>
    m_allocSearchStart = find;
    899c:	str	r4, [r5, #12]
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    899e:	mvn.w	r2, #4026531840	; 0xf0000000
    89a2:	mov	r1, r4
    89a4:	mov	r0, r5
    89a6:	bl	88e4 <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    89aa:	mov	r6, r0
    89ac:	cbz	r0, 89c4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    89ae:	cbnz	r7, 89b6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6a>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
    89b0:	str.w	r4, [r8]
  return true;
    89b4:	b.n	89c6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
    89b6:	mov	r1, r7
    89b8:	mov	r0, r5
    89ba:	mov	r2, r4
    89bc:	bl	88e4 <FatPartition::fatPut(unsigned long, unsigned long)>
    89c0:	cmp	r0, #0
    89c2:	bne.n	89b0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x64>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
    89c4:	movs	r6, #0
}
    89c6:	mov	r0, r6
    89c8:	add	sp, #8
    89ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    89ce:	nop

000089d0 <FatPartition::freeChain(unsigned long)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    89d0:	push	{r4, r5, r6, lr}
    89d2:	mov	r5, r0
    89d4:	sub	sp, #8
    89d6:	mov	r4, r1
    89d8:	b.n	89f0 <FatPartition::freeChain(unsigned long)+0x20>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    89da:	bl	88e4 <FatPartition::fatPut(unsigned long, unsigned long)>
    89de:	cbz	r0, 8a06 <FatPartition::freeChain(unsigned long)+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
    89e0:	ldr	r3, [r5, #12]
    89e2:	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
    89e4:	itt	cc
    89e6:	addcc.w	r4, r4, #4294967295
    89ea:	strcc	r4, [r5, #12]
    }
    cluster = next;
    89ec:	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    89ee:	cbz	r6, 8a08 <FatPartition::freeChain(unsigned long)+0x38>
    fg = fatGet(cluster, &next);
    89f0:	add	r2, sp, #4
    89f2:	mov	r1, r4
    89f4:	mov	r0, r5
    89f6:	bl	8874 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    89fa:	subs	r6, r0, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    89fc:	mov	r1, r4
    89fe:	mov.w	r2, #0
    8a02:	mov	r0, r5
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    8a04:	bge.n	89da <FatPartition::freeChain(unsigned long)+0xa>
  } while (fg);

  return true;

fail:
  return false;
    8a06:	movs	r0, #0
}
    8a08:	add	sp, #8
    8a0a:	pop	{r4, r5, r6, pc}

00008a0c <FatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    8a0c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8a10:	ldrb	r3, [r0, #7]
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    8a12:	ldr	r2, [r0, #28]
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    8a14:	cmp	r3, #16
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    8a16:	add.w	r8, r2, #1
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    8a1a:	beq.n	8a28 <FatPartition::freeClusterCount()+0x1c>
    8a1c:	cmp	r3, #32
    8a1e:	beq.n	8a28 <FatPartition::freeClusterCount()+0x1c>
  }
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
    8a20:	mov.w	r0, #4294967295
    8a24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    8a28:	ldr	r5, [r0, #24]
    while (todo) {
    8a2a:	cmp.w	r8, #0
    8a2e:	beq.n	8aae <FatPartition::freeClusterCount()+0xa2>
    8a30:	mov	r6, r0
    8a32:	add.w	r7, r0, #560	; 0x230
    8a36:	movs	r4, #0
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
    8a38:	mov	r1, r5
    8a3a:	movs	r2, #2
    8a3c:	mov	r0, r7
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
    8a3e:	adds	r5, #1
    8a40:	bl	87f8 <FatCache::read(unsigned long, unsigned char)>
      if (!pc) {
    8a44:	cmp	r0, #0
    8a46:	beq.n	8a20 <FatPartition::freeClusterCount()+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    8a48:	ldrb	r3, [r6, #7]
    8a4a:	cmp	r3, #16
    8a4c:	beq.n	8a7c <FatPartition::freeClusterCount()+0x70>
      if (todo < n) {
    8a4e:	cmp.w	r8, #127	; 0x7f
    8a52:	bhi.n	8aa6 <FatPartition::freeClusterCount()+0x9a>
        n = todo;
    8a54:	uxth.w	r1, r8
    8a58:	mov	lr, r8
    8a5a:	subs	r1, #1
    8a5c:	uxth	r1, r1
    8a5e:	add.w	r1, r0, r1, lsl #2
    8a62:	subs	r3, r0, #4
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat32[i] == 0) {
    8a64:	ldr.w	r2, [r3, #4]!
    8a68:	cbnz	r2, 8a6c <FatPartition::freeClusterCount()+0x60>
            free++;
    8a6a:	adds	r4, #1
          if (pc->fat16[i] == 0) {
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
    8a6c:	cmp	r3, r1
    8a6e:	bne.n	8a64 <FatPartition::freeClusterCount()+0x58>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    8a70:	subs.w	r8, r8, lr
    8a74:	bne.n	8a38 <FatPartition::freeClusterCount()+0x2c>
    8a76:	mov	r0, r4
    8a78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    8a7c:	cmp.w	r8, #255	; 0xff
    8a80:	bls.n	8ab4 <FatPartition::freeClusterCount()+0xa8>
    8a82:	mov.w	lr, #256	; 0x100
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    8a86:	mov	r3, lr
    8a88:	subs	r1, r3, #1
    8a8a:	uxth	r1, r1
    8a8c:	add.w	r1, r0, r1, lsl #1
    8a90:	subs	r3, r0, #2
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat16[i] == 0) {
    8a92:	ldrh.w	r2, [r3, #2]!
    8a96:	cbnz	r2, 8a9a <FatPartition::freeClusterCount()+0x8e>
            free++;
    8a98:	adds	r4, #1
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
    8a9a:	cmp	r1, r3
    8a9c:	bne.n	8a92 <FatPartition::freeClusterCount()+0x86>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    8a9e:	subs.w	r8, r8, lr
    8aa2:	bne.n	8a38 <FatPartition::freeClusterCount()+0x2c>
    8aa4:	b.n	8a76 <FatPartition::freeClusterCount()+0x6a>
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    8aa6:	mov.w	lr, #128	; 0x80
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    8aaa:	mov	r1, lr
    8aac:	b.n	8a5a <FatPartition::freeClusterCount()+0x4e>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    8aae:	mov	r0, r8
    // invalid FAT type
    DBG_FAIL_MACRO;
    goto fail;
  }
  setFreeClusterCount(free);
  return free;
    8ab0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
    8ab4:	uxth.w	r3, r8
    8ab8:	mov	lr, r8
    8aba:	b.n	8a88 <FatPartition::freeClusterCount()+0x7c>

00008abc <FatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
    8abc:	push	{r3, r4, r5, r6, r7, lr}
    8abe:	mov	r4, r0
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    8ac0:	movs	r3, #0
  m_allocSearchStart = 1;
    8ac2:	movs	r5, #1
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
    8ac4:	mov.w	r0, #4294967295
    8ac8:	str	r5, [r4, #12]
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    8aca:	str	r1, [r4, #0]
  }
  /** Initialize the cache.
   * \param[in] vol FatPartition that owns this FatCache.
   */
  void init(FatPartition *vol) {
    m_part = vol;
    8acc:	str	r4, [r4, #40]	; 0x28
    8ace:	str.w	r4, [r4, #564]	; 0x234
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    8ad2:	strb	r3, [r4, #7]
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    8ad4:	strb.w	r3, [r4, #36]	; 0x24
    8ad8:	strb.w	r3, [r4, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
    8adc:	str	r0, [r4, #44]	; 0x2c
    8ade:	str.w	r0, [r4, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    8ae2:	mov	r5, r2
    8ae4:	cbz	r2, 8b1e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    8ae6:	cmp	r2, #4
    8ae8:	bls.n	8aee <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x32>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    8aea:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    8aec:	pop	{r3, r4, r5, r6, r7, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    8aee:	add.w	r6, r4, #36	; 0x24
    8af2:	mov	r2, r3
    8af4:	mov	r1, r3
    8af6:	mov	r0, r6
    8af8:	bl	87f8 <FatCache::read(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    mbr = reinterpret_cast<MbrSector_t*>
          (cacheFetchData(0, FatCache::CACHE_FOR_READ));
    MbrPart_t *mp = mbr->part + part - 1;
    8afc:	add.w	r5, r5, #268435456	; 0x10000000
    8b00:	subs	r5, #1
    8b02:	lsls	r5, r5, #4
    8b04:	add.w	r3, r0, #446	; 0x1be
    8b08:	adds	r2, r3, r5

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    8b0a:	cmp	r0, #0
    8b0c:	beq.n	8aea <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    8b0e:	ldrb	r1, [r2, #4]
    8b10:	cmp	r1, #0
    8b12:	beq.n	8aea <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    8b14:	ldrb	r3, [r3, r5]
    8b16:	lsls	r3, r3, #25
    8b18:	bne.n	8aea <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    8b1a:	ldr	r5, [r2, #8]
    8b1c:	b.n	8b22 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x66>
    8b1e:	add.w	r6, r4, #36	; 0x24
    8b22:	mov	r0, r6
    8b24:	movs	r2, #0
    8b26:	mov	r1, r5
    8b28:	bl	87f8 <FatCache::read(unsigned long, unsigned char)>
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FatCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    8b2c:	cmp	r0, #0
    8b2e:	beq.n	8aea <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    8b30:	ldrb	r3, [r0, #16]
    8b32:	cmp	r3, #2
    8b34:	bne.n	8aea <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    8b36:	ldrh.w	r3, [r0, #11]
    8b3a:	cmp.w	r3, #512	; 0x200
    8b3e:	bne.n	8aea <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    8b40:	ldrb	r6, [r0, #13]
    8b42:	strb	r6, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    8b44:	subs	r3, r6, #1
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    8b46:	movs	r2, #0
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    8b48:	cmp	r6, #1
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    8b4a:	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    8b4c:	strb	r2, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    8b4e:	beq.n	8b70 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb4>
    8b50:	movs	r2, #1
    8b52:	mov	r1, r2
    8b54:	b.n	8b58 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9c>
    8b56:	mov	r2, r3
    8b58:	lsls	r1, r1, #1
    8b5a:	uxtb	r1, r1
    8b5c:	adds	r3, r2, #1
    8b5e:	cmp	r6, r1
    8b60:	uxtb	r3, r3
    8b62:	beq.n	8b6e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb2>
    if (tmp == 0) {
    8b64:	cmp	r3, #9
    8b66:	bne.n	8b56 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9a>
    8b68:	strb	r2, [r4, #6]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    8b6a:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    8b6c:	pop	{r3, r4, r5, r6, r7, pc}
    8b6e:	strb	r2, [r4, #6]
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    8b70:	ldrh	r1, [r0, #22]
    8b72:	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    8b74:	cbnz	r1, 8b7a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xbe>
    8b76:	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    8b78:	str	r1, [r4, #16]
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    8b7a:	ldrh	r7, [r0, #14]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    8b7c:	ldrh.w	r3, [r0, #17]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    8b80:	strh	r3, [r4, #8]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    8b82:	add	r7, r5
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    8b84:	lsls	r3, r3, #5

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    8b86:	add.w	r6, r7, r1, lsl #1
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    8b8a:	addw	r3, r3, #511	; 0x1ff
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
    8b8e:	ldrh.w	r1, [r0, #19]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    8b92:	str	r7, [r4, #24]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    8b94:	add.w	r3, r6, r3, asr #9

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    8b98:	str	r6, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    8b9a:	str	r3, [r4, #20]

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    8b9c:	cbnz	r1, 8ba0 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xe4>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    8b9e:	ldr	r1, [r0, #32]
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    8ba0:	subs	r5, r5, r3
    8ba2:	add	r5, r1

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
    8ba4:	lsr.w	r2, r5, r2
  m_lastCluster = clusterCount + 1;

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    8ba8:	movw	r3, #4084	; 0xff4
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    8bac:	adds	r1, r2, #1

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    8bae:	cmp	r2, r3
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    8bb0:	str	r1, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    8bb2:	bls.n	8bca <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x10e>
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    8bb4:	movw	r3, #65524	; 0xfff4
    8bb8:	cmp	r2, r3
    8bba:	ittet	hi
    8bbc:	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    8bbe:	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
    8bc0:	movls	r3, #16
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
    8bc2:	movhi	r3, #32
    8bc4:	strb	r3, [r4, #7]
  }
  return true;
    8bc6:	movs	r0, #1
    8bc8:	pop	{r3, r4, r5, r6, r7, pc}

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    8bca:	movs	r3, #12
    8bcc:	strb	r3, [r4, #7]
    8bce:	b.n	8aea <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>

00008bd0 <lfnGetChar(DirLfn_t*, unsigned char)>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    8bd0:	cmp	r1, #4
    8bd2:	bls.n	8bee <lfnGetChar(DirLfn_t*, unsigned char)+0x1e>
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    8bd4:	cmp	r1, #10
    8bd6:	bls.n	8be6 <lfnGetChar(DirLfn_t*, unsigned char)+0x16>
    return getLe16(ldir->unicode2 + 2*i - 10);
  } else if (i < 13) {
    8bd8:	cmp	r1, #12
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    8bda:	itte	ls
    8bdc:	addls.w	r1, r0, r1, lsl #1
    8be0:	ldrhls	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2*i - 22);
  }
  return 0;
    8be2:	movhi	r0, #0
}
    8be4:	bx	lr
    8be6:	add.w	r1, r0, r1, lsl #1
    8bea:	ldrh	r0, [r1, #4]
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2*i - 10);
    8bec:	bx	lr
    8bee:	add.w	r1, r0, r1, lsl #1
    8bf2:	ldrh.w	r0, [r1, #1]
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
    8bf6:	bx	lr

00008bf8 <FatFile::lfnChecksum(unsigned char*)>:
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
    8bf8:	push	{r4}
    8bfa:	subs	r2, r0, #1
    8bfc:	add.w	r4, r0, #10
  uint8_t sum = 0;
    8c00:	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    8c02:	ldrb.w	r1, [r2, #1]!
    8c06:	lsrs	r3, r0, #1
    8c08:	orr.w	r0, r3, r0, lsl #7
    8c0c:	uxtab	r0, r1, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    8c10:	cmp	r4, r2
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    8c12:	uxtb	r0, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    8c14:	bne.n	8c02 <FatFile::lfnChecksum(unsigned char*)+0xa>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
    8c16:	ldr.w	r4, [sp], #4
    8c1a:	bx	lr

00008c1c <FatFile::openCluster(FatFile*)>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
    8c1c:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    8c1e:	ldr	r3, [r1, #12]
    8c20:	cbz	r3, 8c40 <FatFile::openCluster(FatFile*)+0x24>
    8c22:	mov	r5, r0
    8c24:	mov	r4, r1
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
    8c26:	movs	r2, #36	; 0x24
    8c28:	movs	r1, #0
    8c2a:	bl	df8c <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    8c2e:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    8c30:	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
    8c32:	strb	r3, [r5, #0]
  m_flags = FILE_FLAG_READ;
    8c34:	strb	r0, [r5, #2]
  m_vol = file->m_vol;
    8c36:	ldr	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    8c38:	ldr	r3, [r4, #12]
    8c3a:	str	r3, [r5, #32]
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
    8c3c:	str	r2, [r5, #8]
  m_firstCluster = file->m_dirCluster;
  return true;
}
    8c3e:	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    8c40:	ldr	r1, [r1, #8]
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
    8c42:	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    8c46:	b.w	7d9c <FatFile::openRoot(FatVolume*)>
    8c4a:	nop

00008c4c <FatFile::getName(char*, unsigned int)>:
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
    8c4c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8c50:	sub	sp, #52	; 0x34
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    8c52:	ldrb	r3, [r0, #0]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    8c54:	movs	r4, #0
    8c56:	strb.w	r4, [sp, #12]
    8c5a:	strb.w	r4, [sp, #13]
    8c5e:	strb.w	r4, [sp, #14]
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
    8c62:	mov	r9, r1
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    8c64:	cbz	r3, 8c6c <FatFile::getName(char*, unsigned int)+0x20>
    8c66:	cmp	r2, #12
    8c68:	mov	r5, r2
    8c6a:	bhi.n	8c7a <FatFile::getName(char*, unsigned int)+0x2e>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
    8c6c:	movs	r7, #0
    8c6e:	strb.w	r7, [r9]
  return false;
}
    8c72:	mov	r0, r7
    8c74:	add	sp, #52	; 0x34
    8c76:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    8c7a:	ldrb	r3, [r0, #3]
    8c7c:	mov	r8, r0
    8c7e:	cmp	r3, #0
    8c80:	beq.n	8d3a <FatFile::getName(char*, unsigned int)+0xee>
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
    8c82:	add	r0, sp, #12
    8c84:	mov	r1, r8
    8c86:	bl	8c1c <FatFile::openCluster(FatFile*)>
    8c8a:	cmp	r0, #0
    8c8c:	beq.n	8c6c <FatFile::getName(char*, unsigned int)+0x20>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    8c8e:	ldrb.w	r3, [r8, #3]
    8c92:	cmp	r3, #0
    8c94:	beq.n	8c6c <FatFile::getName(char*, unsigned int)+0x20>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    8c96:	str	r4, [sp, #4]
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    8c98:	movs	r6, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    8c9a:	ldrh.w	r1, [r8, #4]
    8c9e:	subs	r1, r1, r6
    8ca0:	lsls	r1, r1, #5
    8ca2:	add	r0, sp, #12
    8ca4:	bl	81e0 <FatFile::seekSet(unsigned long)>
    8ca8:	mov	r7, r0
    8caa:	cmp	r0, #0
    8cac:	beq.n	8c6c <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    8cae:	movs	r1, #0
    8cb0:	add	r0, sp, #12
    8cb2:	bl	7f6c <FatFile::readDirCache(bool)>
    if (!ldir) {
    8cb6:	mov	sl, r0
    8cb8:	cmp	r0, #0
    8cba:	beq.n	8c6c <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME) {
    8cbc:	ldrb	r3, [r0, #11]
    8cbe:	cmp	r3, #15
    8cc0:	bne.n	8c6c <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (order != (ldir->order & 0X1F)) {
    8cc2:	ldrb	r3, [r0, #0]
    8cc4:	and.w	r3, r3, #31
    8cc8:	cmp	r6, r3
    8cca:	bne.n	8c6c <FatFile::getName(char*, unsigned int)+0x20>
  return 0;
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
    8ccc:	subs	r3, r6, #1
    8cce:	add.w	r2, r3, r3, lsl #1
    8cd2:	add.w	r2, r3, r2, lsl #2
    8cd6:	mov	r3, r2
    8cd8:	add.w	r4, r9, r2
    8cdc:	add.w	fp, r2, #13
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    8ce0:	subs	r1, r3, r2
    8ce2:	uxtb	r1, r1
    8ce4:	mov	r0, sl
    8ce6:	bl	8bd0 <lfnGetChar(DirLfn_t*, unsigned char)>
    if (c == 0 || k >= n) {
    8cea:	cbz	r0, 8d48 <FatFile::getName(char*, unsigned int)+0xfc>
    8cec:	cmp	r5, r3
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    8cee:	add.w	r3, r3, #1
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
    8cf2:	bls.n	8d18 <FatFile::getName(char*, unsigned int)+0xcc>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    8cf4:	cmp	r0, #126	; 0x7e
    8cf6:	ite	ls
    8cf8:	uxtbls	r0, r0
    8cfa:	movhi	r0, #63	; 0x3f
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    8cfc:	cmp	fp, r3
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    8cfe:	strb.w	r0, [r4], #1
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    8d02:	bne.n	8ce0 <FatFile::getName(char*, unsigned int)+0x94>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
  }
  // Terminate with zero byte if name fits.
  if (k < n && (ldir->order & FAT_ORDER_LAST_LONG_ENTRY)) {
    8d04:	cmp	r5, fp
    8d06:	bls.n	8d18 <FatFile::getName(char*, unsigned int)+0xcc>
    8d08:	ldrb.w	r3, [sl]
    8d0c:	lsls	r2, r3, #25
    name[k] = 0;
    8d0e:	itt	mi
    8d10:	ldrbmi.w	r3, [sp, #4]
    8d14:	strbmi.w	r3, [r9, fp]
  }
  // Truncate if name is too long.
  name[n - 1] = 0;
    8d18:	add.w	r3, r9, r5
    8d1c:	ldrb.w	r2, [sp, #4]
    8d20:	strb.w	r2, [r3, #-1]
    }
    if (!lfnGetName(ldir, name, size)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    8d24:	ldrb.w	r3, [sl]
    8d28:	lsls	r3, r3, #25
    8d2a:	bmi.n	8c72 <FatFile::getName(char*, unsigned int)+0x26>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    8d2c:	adds	r6, #1
    8d2e:	ldrb.w	r3, [r8, #3]
    8d32:	uxtb	r6, r6
    8d34:	cmp	r3, r6
    8d36:	bcs.n	8c9a <FatFile::getName(char*, unsigned int)+0x4e>
    8d38:	b.n	8c6c <FatFile::getName(char*, unsigned int)+0x20>
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    return getSFN(name);
    8d3a:	bl	9614 <FatFile::getSFN(char*)>
    8d3e:	mov	r7, r0
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
  return false;
}
    8d40:	mov	r0, r7
    8d42:	add	sp, #52	; 0x34
    8d44:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
    8d48:	mov	fp, r3
    8d4a:	b.n	8d04 <FatFile::getName(char*, unsigned int)+0xb8>

00008d4c <FatFile::parsePathName(char const*, fname_t*, char const**)>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    8d4c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
    8d50:	ldrb	r3, [r0, #0]
    8d52:	cmp	r3, #32
    8d54:	bne.n	8d5e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12>
    8d56:	ldrb.w	r3, [r0, #1]!
    8d5a:	cmp	r3, #32
    8d5c:	beq.n	8d56 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
    8d5e:	str	r0, [r1, #8]

  for (len = 0; ; len++) {
    c = path[len];
    8d60:	ldrb	r3, [r0, #0]
    if (c == 0 || isDirSeparator(c)) {
    8d62:	cmp	r3, #0
    8d64:	beq.w	8f76 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x22a>
    8d68:	cmp	r3, #47	; 0x2f
    8d6a:	beq.n	8dcc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x80>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    8d6c:	cmp	r3, #92	; 0x5c
    8d6e:	beq.n	8db6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    8d70:	sub.w	r4, r3, #34	; 0x22
    8d74:	uxtb	r4, r4
    8d76:	cmp	r4, #29
    8d78:	bls.n	8dbc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x70>
    8d7a:	ldr.w	lr, [pc, #536]	; 8f94 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x248>
    8d7e:	adds	r6, r0, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    8d80:	movs	r4, #0
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    8d82:	cmp	r3, #124	; 0x7c
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    8d84:	sub.w	r5, r3, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    8d88:	mov	r7, r6
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    8d8a:	beq.n	8db6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    8d8c:	cmp	r5, #94	; 0x5e
    8d8e:	bhi.n	8db6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    8d90:	ldrb.w	r3, [r6], #1
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    8d94:	sub.w	r5, r3, #34	; 0x22
    8d98:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    8d9a:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    8d9c:	cmp	r3, #0
    8d9e:	beq.w	8f48 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1fc>
    8da2:	cmp	r3, #47	; 0x2f
    8da4:	beq.n	8dce <FatFile::parsePathName(char const*, fname_t*, char const**)+0x82>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    8da6:	cmp	r3, #92	; 0x5c
    8da8:	lsr.w	r7, lr, r5
    8dac:	beq.n	8db6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    8dae:	cmp	r5, #29
    8db0:	bhi.n	8d82 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    8db2:	lsls	r7, r7, #31
    8db4:	bpl.n	8d82 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    8db6:	movs	r0, #0
    8db8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    8dbc:	ldr	r5, [pc, #468]	; (8f94 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x248>)
    8dbe:	lsr.w	r4, r5, r4
    8dc2:	lsls	r4, r4, #31
    8dc4:	bpl.n	8d7a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x2e>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    8dc6:	movs	r0, #0
    8dc8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    8dcc:	movs	r4, #0
    8dce:	adds	r7, r0, r4
    8dd0:	mov	r6, r7
    8dd2:	mov	r5, r4
    8dd4:	movs	r3, #47	; 0x2f
    8dd6:	b.n	8dde <FatFile::parsePathName(char const*, fname_t*, char const**)+0x92>
    8dd8:	ldrb.w	r3, [r6, #1]!
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    8ddc:	adds	r5, #1
    8dde:	cmp	r3, #32
    8de0:	beq.n	8dd8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8c>
    8de2:	cmp	r3, #47	; 0x2f
    8de4:	beq.n	8dd8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8c>
  *ptr = &path[end];
    8de6:	add	r5, r0
    8de8:	str	r5, [r2, #0]

  // Back over spaces and dots.
  while (len) {
    8dea:	cbz	r4, 8e00 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb4>
    8dec:	mov	r2, r7
    c = path[len - 1];
    8dee:	ldrb.w	r3, [r2, #-1]!
    if (c != '.' && c != ' ') {
    8df2:	cmp	r3, #46	; 0x2e
    8df4:	beq.n	8dfc <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb0>
    8df6:	cmp	r3, #32
    8df8:	bne.w	8f4e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x202>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    8dfc:	subs	r4, #1
    8dfe:	bne.n	8dee <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa2>
    8e00:	mov.w	r5, #4294967295
    8e04:	mov	r3, r4
  // Max length of LFN is 255.
  if (len > 255) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
    8e06:	str	r3, [r1, #4]
    8e08:	add.w	r6, r1, #23
    8e0c:	add.w	r3, r1, #12
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    8e10:	movs	r2, #32
    8e12:	strb.w	r2, [r3, #1]!
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    8e16:	cmp	r3, r6
    8e18:	bne.n	8e12 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc6>
    8e1a:	subs	r6, r0, #1
    8e1c:	movs	r2, #0
    8e1e:	b.n	8e22 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd6>
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    8e20:	adds	r2, #1
    8e22:	ldrb.w	r3, [r6, #1]!
    8e26:	cmp	r3, #46	; 0x2e
    8e28:	beq.n	8e20 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd4>
    8e2a:	cmp	r3, #32
    8e2c:	beq.n	8e20 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd4>
  // Not 8.3 if leading dot or space.
  is83 = !si;
    8e2e:	clz	ip, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    8e32:	adds	r6, r5, #1
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
    8e34:	mov.w	ip, ip, lsr #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    8e38:	beq.n	8e54 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    8e3a:	ldrb	r7, [r0, r5]
    8e3c:	cmp	r7, #46	; 0x2e
    8e3e:	add.w	r6, r0, r5
    8e42:	bne.n	8e4e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x102>
    8e44:	b.n	8e54 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    8e46:	ldrb.w	r7, [r6, #-1]!
    8e4a:	cmp	r7, #46	; 0x2e
    8e4c:	beq.n	8e54 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    8e4e:	adds.w	r5, r5, #4294967295
    8e52:	bcs.n	8e46 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xfa>
  for (; si < len; si++) {
    8e54:	cmp	r2, r4
    8e56:	mov.w	r9, #0
    8e5a:	bge.w	8f80 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x234>
    8e5e:	mov	r6, r9
    8e60:	mov	sl, r9
    8e62:	movs	r7, #7
    8e64:	mov.w	r8, #8
    8e68:	b.n	8eb6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16a>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    8e6a:	cmp	r3, #46	; 0x2e
    8e6c:	beq.n	8efe <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b2>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
    8e6e:	cmp	r3, #34	; 0x22
    8e70:	beq.n	8e8a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    8e72:	cmp	r3, #124	; 0x7c
    8e74:	beq.n	8e8a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    8e76:	sub.w	lr, r3, #42	; 0x2a
    8e7a:	cmp.w	lr, #5
    8e7e:	bls.n	8f12 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1c6>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
    8e80:	sub.w	lr, r3, #58	; 0x3a
    8e84:	cmp.w	lr, #5
    8e88:	bhi.n	8f3c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1f0>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    8e8a:	cmp	r5, r2
    8e8c:	beq.n	8f02 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b6>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    8e8e:	cmp	r7, r6
    8e90:	bcc.n	8ee6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19a>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
    8e92:	mov.w	ip, #0
      c = '_';
    8e96:	movs	r3, #95	; 0x5f
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    8e98:	add.w	lr, r6, #1
    8e9c:	add.w	fp, r1, r6
    8ea0:	uxtb.w	r6, lr
      if (i < 7) {
    8ea4:	cmp	r6, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    8ea6:	strb.w	r3, [fp, #13]
      if (i < 7) {
    8eaa:	bhi.n	8eae <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>
        fname->seqPos = i;
    8eac:	strb	r6, [r1, #12]
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    8eae:	adds	r2, #1
    8eb0:	cmp	r2, r4
    8eb2:	bge.n	8ec4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x178>
    8eb4:	ldrb	r3, [r0, r2]
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    8eb6:	cmp	r3, #32
    8eb8:	bne.n	8e6a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x11e>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    8eba:	adds	r2, #1
    8ebc:	cmp	r2, r4
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
    8ebe:	mov.w	ip, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    8ec2:	blt.n	8eb4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x168>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    8ec4:	ldrb	r3, [r1, #13]
    8ec6:	cmp	r3, #32
    8ec8:	beq.w	8db6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (is83) {
    8ecc:	cmp.w	ip, #0
    8ed0:	beq.n	8f62 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x216>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    8ed2:	tst.w	sl, r9
    8ed6:	it	ne
    8ed8:	movne.w	r9, #2
    8edc:	strb.w	r9, [r1]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    8ee0:	movs	r0, #1
    8ee2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    8ee6:	cmp	r7, #10
    8ee8:	beq.n	8f5a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
    8eea:	cmp	r5, r2
    8eec:	blt.n	8f5a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
    8eee:	mov	r2, r5
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    8ef0:	movs	r7, #10
      i = 8;    // Place for extension.
    8ef2:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    8ef4:	mov.w	r8, #16
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
    8ef8:	mov.w	ip, #0
    8efc:	b.n	8eae <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    8efe:	cmp	r5, r2
    8f00:	bne.n	8eba <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16e>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    8f02:	cmp	r7, #10
    8f04:	beq.n	8f5a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
    8f06:	mov	r2, r5
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    8f08:	movs	r7, #10
      i = 8;    // Place for extension.
    8f0a:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    8f0c:	mov.w	r8, #16
    8f10:	b.n	8eae <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    8f12:	cmp	r3, #45	; 0x2d
    8f14:	bne.n	8e8a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    8f16:	sub.w	lr, r3, #33	; 0x21
    8f1a:	cmp.w	lr, #93	; 0x5d
    8f1e:	bhi.n	8e8a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    8f20:	cmp	r5, r2
    8f22:	beq.n	8f02 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b6>
    8f24:	cmp	r7, r6
    8f26:	bcc.n	8ee6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19a>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
    8f28:	sub.w	lr, r3, #97	; 0x61
    8f2c:	cmp.w	lr, #25
    8f30:	bhi.n	8f84 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x238>
        c += 'A' - 'a';
    8f32:	subs	r3, #32
    8f34:	uxtb	r3, r3
        lc |= bit;
    8f36:	orr.w	r9, r8, r9
    8f3a:	b.n	8e98 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14c>
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
    8f3c:	sub.w	lr, r3, #91	; 0x5b
    8f40:	cmp.w	lr, #2
    8f44:	bls.n	8e8a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    8f46:	b.n	8f16 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1ca>
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    8f48:	str	r7, [r2, #0]
    8f4a:	adds	r7, r0, r4
    8f4c:	b.n	8dec <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa0>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
    8f4e:	cmp	r4, #255	; 0xff
    8f50:	bgt.w	8db6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    8f54:	subs	r5, r4, #1
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    c = path[len - 1];
    8f56:	mov	r3, r4
    8f58:	b.n	8e06 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xba>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    8f5a:	ldrb	r3, [r1, #13]
    8f5c:	cmp	r3, #32
    8f5e:	beq.w	8db6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    8f62:	ldrb	r3, [r1, #12]
    8f64:	add	r3, r1
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    8f66:	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    8f68:	movs	r4, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    8f6a:	movs	r2, #49	; 0x31
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    8f6c:	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
    8f6e:	strb	r4, [r3, #13]
    fname->sfn[fname->seqPos + 1] = '1';
    8f70:	strb	r2, [r3, #14]
    8f72:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    8f76:	str	r0, [r2, #0]
    8f78:	mov	r4, r3
    8f7a:	mov.w	r5, #4294967295
    8f7e:	b.n	8e06 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xba>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    8f80:	mov	sl, r9
    8f82:	b.n	8ec4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x178>
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
    8f84:	sub.w	lr, r3, #65	; 0x41
    8f88:	cmp.w	lr, #25
        uc |= bit;
    8f8c:	it	ls
    8f8e:	orrls.w	sl, r8, sl
    8f92:	b.n	8e98 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14c>
    8f94:	.word	0x35000101

00008f98 <FatFile::printName(Print*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::printName(print_t* pr) {
    8f98:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8f9c:	sub	sp, #56	; 0x38
  size_t n = 0;
  uint16_t u;
  uint8_t buf[13];
  uint8_t i;

  if (!isLFN()) {
    8f9e:	ldrb	r3, [r0, #3]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    8fa0:	movs	r5, #0
    8fa2:	strb.w	r5, [sp, #20]
    8fa6:	strb.w	r5, [sp, #21]
    8faa:	strb.w	r5, [sp, #22]
    8fae:	cmp	r3, #0
    8fb0:	beq.n	9048 <FatFile::printName(Print*)+0xb0>
    8fb2:	mov	r7, r0
    8fb4:	mov	r8, r1
    return printSFN(pr);
  }
  if (!dirFile.openCluster(this)) {
    8fb6:	add	r0, sp, #20
    8fb8:	mov	r1, r7
    8fba:	bl	8c1c <FatFile::openCluster(FatFile*)>
    8fbe:	cmp	r0, #0
    8fc0:	beq.n	903c <FatFile::printName(Print*)+0xa4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    8fc2:	ldrb	r3, [r7, #3]
    8fc4:	cmp	r3, #0
    8fc6:	beq.n	903c <FatFile::printName(Print*)+0xa4>
    8fc8:	movs	r6, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    8fca:	ldrh	r1, [r7, #4]
    8fcc:	subs	r1, r1, r6
    8fce:	lsls	r1, r1, #5
    8fd0:	add	r0, sp, #20
    8fd2:	bl	81e0 <FatFile::seekSet(unsigned long)>
    8fd6:	cbz	r0, 903c <FatFile::printName(Print*)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    8fd8:	movs	r1, #0
    8fda:	add	r0, sp, #20
    8fdc:	bl	7f6c <FatFile::readDirCache(bool)>
    if (!ldir) {
    8fe0:	mov	r9, r0
    8fe2:	cbz	r0, 903c <FatFile::printName(Print*)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    8fe4:	ldrb	r3, [r0, #11]
    8fe6:	cmp	r3, #15
    8fe8:	bne.n	903c <FatFile::printName(Print*)+0xa4>
    8fea:	ldrb	r3, [r0, #0]
    8fec:	and.w	r3, r3, #31
    8ff0:	cmp	r6, r3
    8ff2:	bne.n	903c <FatFile::printName(Print*)+0xa4>
    8ff4:	add	r3, sp, #4
    8ff6:	add.w	sl, r5, #13
    8ffa:	mov	r4, r5
    8ffc:	subs	r2, r4, r5
    8ffe:	uxtb	r2, r2
        order != (ldir->order & 0X1F)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (i = 0; i < 13; i++) {
      u = lfnGetChar(ldir, i);
    9000:	mov	r1, r2
    9002:	mov	r0, r9
    9004:	bl	8bd0 <lfnGetChar(DirLfn_t*, unsigned char)>
      if (u == 0) {
    9008:	cbz	r0, 9044 <FatFile::printName(Print*)+0xac>
        // End of name.
        break;
      }
      buf[i] = u < 0X7F ? u : '?';
    900a:	cmp	r0, #126	; 0x7e
      n++;
    900c:	add.w	r4, r4, #1
      u = lfnGetChar(ldir, i);
      if (u == 0) {
        // End of name.
        break;
      }
      buf[i] = u < 0X7F ? u : '?';
    9010:	ite	ls
    9012:	uxtbls	r0, r0
    9014:	movhi	r0, #63	; 0x3f
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
        order != (ldir->order & 0X1F)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (i = 0; i < 13; i++) {
    9016:	cmp	r4, sl
      u = lfnGetChar(ldir, i);
      if (u == 0) {
        // End of name.
        break;
      }
      buf[i] = u < 0X7F ? u : '?';
    9018:	strb.w	r0, [r3], #1
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
        order != (ldir->order & 0X1F)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (i = 0; i < 13; i++) {
    901c:	bne.n	8ffc <FatFile::printName(Print*)+0x64>
    901e:	mov	r5, r4
    9020:	movs	r2, #13
        break;
      }
      buf[i] = u < 0X7F ? u : '?';
      n++;
    }
    pr->write(buf, i);
    9022:	ldr.w	r3, [r8]
    9026:	add	r1, sp, #4
    9028:	ldr	r3, [r3, #4]
    902a:	mov	r0, r8
    902c:	blx	r3
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    902e:	adds	r6, #1
    9030:	ldrb	r3, [r7, #3]
    9032:	uxtb	r6, r6
    9034:	cmp	r3, r6
    9036:	bcs.n	8fca <FatFile::printName(Print*)+0x32>
    9038:	mov	r0, r4
    903a:	b.n	903e <FatFile::printName(Print*)+0xa6>
    pr->write(buf, i);
  }
  return n;

fail:
  return 0;
    903c:	movs	r0, #0
}
    903e:	add	sp, #56	; 0x38
    9040:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (i = 0; i < 13; i++) {
      u = lfnGetChar(ldir, i);
      if (u == 0) {
    9044:	mov	r5, r4
    9046:	b.n	9022 <FatFile::printName(Print*)+0x8a>
  uint16_t u;
  uint8_t buf[13];
  uint8_t i;

  if (!isLFN()) {
    return printSFN(pr);
    9048:	bl	9634 <FatFile::printSFN(Print*)>
  }
  return n;

fail:
  return 0;
}
    904c:	add	sp, #56	; 0x38
    904e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9052:	nop

00009054 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    9054:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    9058:	ldrb	r2, [r0, #2]

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    905a:	sub	sp, #40	; 0x28
    905c:	movs	r3, #0
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    905e:	lsls	r2, r2, #30
    9060:	strb.w	r3, [sp, #4]
    9064:	strb.w	r3, [sp, #5]
    9068:	strb.w	r3, [sp, #6]
    906c:	bpl.n	90b4 <FatFile::remove()+0x60>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    906e:	ldr	r1, [r0, #32]
    9070:	mov	r5, r0
    9072:	cbnz	r1, 90be <FatFile::remove()+0x6a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    9074:	movs	r1, #1
    9076:	mov	r0, r5
    9078:	bl	79a0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    907c:	cbz	r0, 90b4 <FatFile::remove()+0x60>
    907e:	subs	r1, r0, #1
    9080:	add.w	r7, r0, #10
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    9084:	movs	r4, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    9086:	lsrs	r2, r4, #1
    9088:	ldrb.w	r6, [r1, #1]!
    908c:	orr.w	r3, r2, r4, lsl #7
    9090:	uxtab	r3, r6, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    9094:	cmp	r7, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    9096:	uxtb	r4, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    9098:	bne.n	9086 <FatFile::remove()+0x32>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    909a:	mov.w	r8, #229	; 0xe5
    909e:	strb.w	r8, [r0]
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    90a2:	ldr	r6, [r5, #8]

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    90a4:	movs	r3, #0
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    90a6:	add.w	r0, r6, #36	; 0x24
    90aa:	strb	r3, [r5, #0]
  m_flags = 0;
    90ac:	strb	r3, [r5, #2]
    90ae:	bl	8858 <FatCache::sync()>
    90b2:	cbnz	r0, 90ca <FatFile::remove()+0x76>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    90b4:	movs	r6, #0
}
    90b6:	mov	r0, r6
    90b8:	add	sp, #40	; 0x28
    90ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    90be:	ldr	r0, [r0, #8]
    90c0:	bl	89d0 <FatPartition::freeChain(unsigned long)>
    90c4:	cmp	r0, #0
    90c6:	bne.n	9074 <FatFile::remove()+0x20>
    90c8:	b.n	90b4 <FatFile::remove()+0x60>
    90ca:	add.w	r0, r6, #560	; 0x230
    90ce:	bl	8858 <FatCache::sync()>
    90d2:	cmp	r0, #0
    90d4:	beq.n	90b4 <FatFile::remove()+0x60>
    90d6:	ldr	r0, [r6, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    90d8:	ldr	r3, [r0, #0]
    90da:	ldr	r3, [r3, #20]
    90dc:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    90de:	mov	r6, r0
    90e0:	cmp	r0, #0
    90e2:	beq.n	90b4 <FatFile::remove()+0x60>
  // Write entry to device.
  if (!m_vol->cacheSync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    90e4:	ldrb	r3, [r5, #3]
    90e6:	cmp	r3, #0
    90e8:	beq.n	90b6 <FatFile::remove()+0x62>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    90ea:	add	r0, sp, #4
    90ec:	mov	r1, r5
    90ee:	bl	8c1c <FatFile::openCluster(FatFile*)>
    90f2:	cmp	r0, #0
    90f4:	beq.n	90b4 <FatFile::remove()+0x60>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    90f6:	ldrb	r3, [r5, #3]
    90f8:	cmp	r3, #0
    90fa:	beq.n	90b4 <FatFile::remove()+0x60>
    90fc:	movs	r7, #1
    90fe:	b.n	9140 <FatFile::remove()+0xec>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    9100:	add	r0, sp, #4
    9102:	bl	7f6c <FatFile::readDirCache(bool)>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    9106:	adds	r3, r7, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
    9108:	cmp	r0, #0
    910a:	beq.n	90b4 <FatFile::remove()+0x60>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    910c:	ldrb	r2, [r0, #11]
    910e:	cmp	r2, #15
    9110:	bne.n	90b4 <FatFile::remove()+0x60>
        order != (ldir->order & 0X1F) ||
    9112:	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    9114:	and.w	r1, r2, #31
    9118:	cmp	r7, r1
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    911a:	uxtb	r7, r3
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    911c:	bne.n	90b4 <FatFile::remove()+0x60>
        order != (ldir->order & 0X1F) ||
    911e:	ldrb	r3, [r0, #13]
    9120:	cmp	r3, r4
    9122:	bne.n	90b4 <FatFile::remove()+0x60>
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    9124:	strb.w	r8, [r0]
    m_vol->cacheDirty();
    9128:	ldr	r1, [r5, #8]
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    912a:	ldrb.w	r3, [r1, #36]	; 0x24
    912e:	orr.w	r3, r3, #1
    9132:	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
    9136:	lsls	r3, r2, #25
    9138:	bmi.n	9154 <FatFile::remove()+0x100>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    913a:	ldrb	r3, [r5, #3]
    913c:	cmp	r3, r7
    913e:	bcc.n	90b4 <FatFile::remove()+0x60>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    9140:	ldrh	r1, [r5, #4]
    9142:	subs	r1, r1, r7
    9144:	lsls	r1, r1, #5
    9146:	add	r0, sp, #4
    9148:	bl	81e0 <FatFile::seekSet(unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    914c:	movs	r1, #0
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    914e:	cmp	r0, #0
    9150:	bne.n	9100 <FatFile::remove()+0xac>
    9152:	b.n	90b4 <FatFile::remove()+0x60>
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    m_vol->cacheDirty();
    if (last) {
      if (!m_vol->cacheSync()) {
    9154:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    9156:	add.w	r0, r4, #36	; 0x24
    915a:	bl	8858 <FatCache::sync()>
    915e:	cmp	r0, #0
    9160:	beq.n	90b4 <FatFile::remove()+0x60>
    9162:	add.w	r0, r4, #560	; 0x230
    9166:	bl	8858 <FatCache::sync()>
    916a:	cmp	r0, #0
    916c:	beq.n	90b4 <FatFile::remove()+0x60>
    916e:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    9170:	ldr	r3, [r0, #0]
    9172:	ldr	r3, [r3, #20]
    9174:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    9176:	cmp	r0, #0
    9178:	beq.n	90b4 <FatFile::remove()+0x60>
    917a:	b.n	90b6 <FatFile::remove()+0x62>

0000917c <FatFile::lfnUniqueSfn(fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    917c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    9180:	ldrb	r7, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    9182:	mov	r6, r1
    9184:	mov	r4, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    9186:	add.w	r5, r1, #13
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    918a:	mov.w	r8, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    918e:	mov.w	r9, #126	; 0x7e
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
    9192:	ldr	r0, [r6, #4]
    9194:	ldr	r1, [r6, #8]
    9196:	add.w	r3, r8, r0
    919a:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    919c:	cbz	r0, 91b0 <FatFile::lfnUniqueSfn(fname_t*)+0x34>
    919e:	add	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    91a0:	ldrb.w	r2, [r1], #1
    91a4:	add.w	r3, r3, r3, lsl #5
    91a8:	eors	r3, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    91aa:	cmp	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    91ac:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    91ae:	bne.n	91a0 <FatFile::lfnUniqueSfn(fname_t*)+0x24>
    91b0:	cmp	r7, #3
    91b2:	it	cs
    91b4:	movcs	r7, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    91b6:	adds	r2, r7, #4
    91b8:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
    91ba:	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    91be:	adds	r0, r6, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    91c0:	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    91c2:	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    91c4:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    91c6:	ite	ls
    91c8:	addls	r1, #48	; 0x30
    91ca:	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    91cc:	cmp	r7, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
    91ce:	mov.w	r3, r3, lsr #4
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    91d2:	strb	r1, [r0, #13]
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    91d4:	bcc.n	91ba <FatFile::lfnUniqueSfn(fname_t*)+0x3e>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    91d6:	adds	r3, r6, r7
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    91d8:	movs	r1, #0
    91da:	strb.w	r9, [r3, #13]
    91de:	mov	r0, r4
    91e0:	bl	81e0 <FatFile::seekSet(unsigned long)>
    rewind();
    while (1) {
      dir = readDirCache(true);
    91e4:	movs	r1, #1
    91e6:	mov	r0, r4
    91e8:	bl	7f6c <FatFile::readDirCache(bool)>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    91ec:	movs	r2, #11
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    91ee:	mov	r3, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    91f0:	mov	r1, r0
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    91f2:	cbz	r0, 9220 <FatFile::lfnUniqueSfn(fname_t*)+0xa4>
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    91f4:	ldrb.w	lr, [r3]
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    91f8:	mov	r0, r5
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    91fa:	cmp.w	lr, #0
    91fe:	beq.n	922c <FatFile::lfnUniqueSfn(fname_t*)+0xb0>
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    9200:	ldrb	r3, [r3, #11]
    9202:	lsls	r3, r3, #28
    9204:	bmi.n	91e4 <FatFile::lfnUniqueSfn(fname_t*)+0x68>
    9206:	bl	de60 <memcmp>
    920a:	cmp	r0, #0
    920c:	bne.n	91e4 <FatFile::lfnUniqueSfn(fname_t*)+0x68>
    920e:	add.w	r8, r8, #1
    9212:	uxth.w	r8, r8
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
    9216:	cmp.w	r8, #100	; 0x64
    921a:	bne.n	9192 <FatFile::lfnUniqueSfn(fname_t*)+0x16>
fail:
  return false;

done:
  return true;
}
    921c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
        if (!getError()) {
    9220:	ldrb	r0, [r4, #1]
    9222:	clz	r0, r0
    9226:	lsrs	r0, r0, #5
    9228:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

fail:
  return false;

done:
  return true;
    922c:	movs	r0, #1
    922e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9232:	nop

00009234 <FatFile::open(FatFile*, fname_t*, int)>:
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    9234:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    9238:	ldrb	r4, [r1, #0]
    923a:	tst.w	r4, #112	; 0x70
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    923e:	sub	sp, #52	; 0x34
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    9240:	beq.n	9246 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    9242:	ldrb	r4, [r0, #0]
    9244:	cbz	r4, 924e <FatFile::open(FatFile*, fname_t*, int)+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
    9246:	movs	r0, #0
}
    9248:	add	sp, #52	; 0x34
    924a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    924e:	ldrb	r4, [r2, #0]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;
    9250:	ldr.w	sl, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    9254:	lsls	r4, r4, #30
    9256:	bne.n	92de <FatFile::open(FatFile*, fname_t*, int)+0xaa>
    9258:	mov.w	r8, #1
    925c:	mov	r6, r1
    925e:	mov	fp, r2
    9260:	str	r0, [sp, #36]	; 0x24
    9262:	movs	r1, #0
    9264:	mov	r0, r6
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
  uint8_t ms10;
  uint16_t freeIndex = 0;
    9266:	mov	r7, r1
    9268:	str	r3, [sp, #28]
    926a:	bl	81e0 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    926e:	add.w	r3, fp, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
    9272:	str	r7, [sp, #24]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
    9274:	str	r7, [sp, #12]
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
    9276:	mov	r4, r7
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
    9278:	mov	r9, r7
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
    927a:	str	r7, [sp, #20]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    927c:	str	r3, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    927e:	movs	r1, #1
    9280:	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    9282:	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache(true);
    9284:	bl	7f6c <FatFile::readDirCache(bool)>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    9288:	ubfx	r5, r5, #5, #16
    dir = dirFile->readDirCache(true);
    if (!dir) {
    928c:	mov	r3, r0
    928e:	cmp	r0, #0
    9290:	beq.w	93ac <FatFile::open(FatFile*, fname_t*, int)+0x178>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    9294:	ldrb	r2, [r0, #0]
    9296:	cmp	r2, #229	; 0xe5
    9298:	beq.n	9310 <FatFile::open(FatFile*, fname_t*, int)+0xdc>
    929a:	cmp	r2, #0
    929c:	beq.n	9310 <FatFile::open(FatFile*, fname_t*, int)+0xdc>
      if (dir->name[0] == FAT_NAME_FREE) {
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
    929e:	cmp	r4, r8
    92a0:	it	cc
    92a2:	movcc	r4, #0
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    92a4:	cmp	r2, #46	; 0x2e
    92a6:	beq.n	930a <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    92a8:	ldrb	r1, [r3, #11]
      lfnOrd = 0;
    } else if (isLongName(dir)) {
    92aa:	cmp	r1, #15
    92ac:	beq.n	932c <FatFile::open(FatFile*, fname_t*, int)+0xf8>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
    92ae:	and.w	r1, r1, #8
    92b2:	and.w	r2, r1, #255	; 0xff
    92b6:	cbnz	r1, 930a <FatFile::open(FatFile*, fname_t*, int)+0xd6>
      if (lfnOrd) {
    92b8:	cmp.w	r9, #0
    92bc:	bne.w	9584 <FatFile::open(FatFile*, fname_t*, int)+0x350>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    92c0:	mov	r0, r3
    92c2:	movs	r2, #11
    92c4:	ldr	r1, [sp, #16]
    92c6:	bl	de60 <memcmp>
    92ca:	cmp	r0, #0
    92cc:	bne.n	927e <FatFile::open(FatFile*, fname_t*, int)+0x4a>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    92ce:	ldrb.w	r3, [fp]
    92d2:	lsls	r0, r3, #31
    92d4:	bpl.w	95ac <FatFile::open(FatFile*, fname_t*, int)+0x378>
          goto found;
        }
        fnameFound = true;
    92d8:	movs	r3, #1
    92da:	str	r3, [sp, #20]
    92dc:	b.n	927e <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    92de:	ldr	r5, [pc, #724]	; (95b4 <FatFile::open(FatFile*, fname_t*, int)+0x380>)
    92e0:	add.w	r4, sl, #12
    92e4:	umull	r4, r8, r5, r4
    92e8:	mov.w	r8, r8, lsr #2
    92ec:	add.w	r8, r8, #1
    92f0:	uxtb.w	r8, r8
    92f4:	b.n	925c <FatFile::open(FatFile*, fname_t*, int)+0x28>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    92f6:	ldr	r1, [sp, #12]
    92f8:	subs	r1, #1
    92fa:	uxtb	r1, r1
    92fc:	cmp	r2, r1
    92fe:	str	r1, [sp, #12]
    9300:	bne.n	930a <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    9302:	ldrb	r2, [r3, #13]
    9304:	ldr	r1, [sp, #24]
    9306:	cmp	r1, r2
    9308:	beq.n	9342 <FatFile::open(FatFile*, fname_t*, int)+0x10e>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    930a:	mov.w	r9, #0
    930e:	b.n	927e <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    9310:	cmp	r4, #0
    9312:	it	eq
    9314:	moveq	r7, r5
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
    9316:	cmp	r4, r8
        freeFound++;
    9318:	itt	cc
    931a:	addcc	r4, #1
    931c:	uxtbcc	r4, r4
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    931e:	cmp	r2, #0
    9320:	beq.n	93b4 <FatFile::open(FatFile*, fname_t*, int)+0x180>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    9322:	cmp	r2, #229	; 0xe5
    9324:	bne.n	92a4 <FatFile::open(FatFile*, fname_t*, int)+0x70>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    9326:	mov.w	r9, #0
    932a:	b.n	927e <FatFile::open(FatFile*, fname_t*, int)+0x4a>
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
      lfnOrd = 0;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
    932c:	cmp.w	r9, #0
    9330:	bne.n	92f6 <FatFile::open(FatFile*, fname_t*, int)+0xc2>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
    9332:	lsls	r5, r2, #25
    9334:	bpl.n	927e <FatFile::open(FatFile*, fname_t*, int)+0x4a>
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    9336:	and.w	r9, r2, #31
        checksum = ldir->checksum;
    933a:	ldrb	r2, [r3, #13]
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    933c:	str.w	r9, [sp, #12]
        checksum = ldir->checksum;
    9340:	str	r2, [sp, #24]
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    9342:	ldr	r2, [sp, #12]
    9344:	subs	r2, #1
    9346:	add.w	r5, r2, r2, lsl #1
    934a:	add.w	r5, r2, r5, lsl #2
      if (k >= len) {
    934e:	cmp	sl, r5
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    9350:	mov	r2, r5
      if (k >= len) {
    9352:	bls.n	930a <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    9354:	add.w	r1, r5, #13
    9358:	str.w	r9, [sp, #32]
    935c:	mov	r9, r1
    935e:	b.n	9388 <FatFile::open(FatFile*, fname_t*, int)+0x154>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    9360:	ldr.w	r0, [fp, #8]
    9364:	ldrb	r2, [r0, r2]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    9366:	cmp.w	ip, #25
    936a:	it	ls
    936c:	addls	r1, #32
    936e:	sub.w	r0, r2, #65	; 0x41
    9372:	it	ls
    9374:	uxtbls	r1, r1
    9376:	cmp	r0, #25
    9378:	itt	ls
    937a:	addls	r2, #32
    937c:	uxtbls	r2, r2
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    937e:	cmp	r2, r1
    9380:	bne.n	930a <FatFile::open(FatFile*, fname_t*, int)+0xd6>
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
    9382:	cmp	lr, r9
    9384:	beq.n	940c <FatFile::open(FatFile*, fname_t*, int)+0x1d8>
    9386:	mov	r2, lr
        uint16_t u = lfnGetChar(ldir, i);
    9388:	subs	r1, r2, r5
    938a:	uxtb	r1, r1
    938c:	mov	r0, r3
    938e:	bl	8bd0 <lfnGetChar(DirLfn_t*, unsigned char)>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    9392:	uxtb	r1, r0
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    9394:	cmp	sl, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    9396:	sub.w	ip, r1, #65	; 0x41
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    939a:	add.w	lr, r2, #1
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    939e:	beq.w	9576 <FatFile::open(FatFile*, fname_t*, int)+0x342>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    93a2:	cmp	r0, #255	; 0xff
    93a4:	bls.n	9360 <FatFile::open(FatFile*, fname_t*, int)+0x12c>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    93a6:	mov.w	r9, #0
    93aa:	b.n	927e <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
    93ac:	ldrb	r3, [r6, #1]
    93ae:	cmp	r3, #0
    93b0:	bne.w	9246 <FatFile::open(FatFile*, fname_t*, int)+0x12>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    93b4:	ldr	r2, [sp, #28]
    93b6:	mov	r3, r2
    93b8:	lsls	r2, r3, #22
    93ba:	bpl.w	9246 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    93be:	and.w	r3, r3, #3
    93c2:	subs	r3, #1
    93c4:	cmp	r3, #1
    93c6:	bhi.w	9246 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    93ca:	cmp	r4, #0
    93cc:	it	eq
    93ce:	moveq	r7, r5
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    93d0:	cmp	r4, r8
    93d2:	bcc.n	93dc <FatFile::open(FatFile*, fname_t*, int)+0x1a8>
    93d4:	b.n	9412 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    93d6:	uxtb	r4, r3
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    93d8:	cmp	r8, r4
    93da:	bls.n	9412 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
    dir = dirFile->readDirCache();
    93dc:	movs	r1, #0
    93de:	mov	r0, r6
    93e0:	bl	7f6c <FatFile::readDirCache(bool)>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    93e4:	adds	r3, r4, #1
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
    93e6:	cmp	r0, #0
    93e8:	bne.n	93d6 <FatFile::open(FatFile*, fname_t*, int)+0x1a2>
      if (dirFile->getError()) {
    93ea:	ldrb	r3, [r6, #1]
    93ec:	cbz	r3, 93f8 <FatFile::open(FatFile*, fname_t*, int)+0x1c4>
    93ee:	b.n	9246 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    93f0:	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
    93f2:	ldrb	r3, [r3, #4]
    93f4:	cmp	r3, #1
    93f6:	bhi.n	9412 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    93f8:	cmp	r8, r4
    93fa:	bls.n	9412 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    93fc:	mov	r0, r6
    93fe:	bl	790c <FatFile::addDirCluster()>
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    9402:	adds	r4, #16
    9404:	uxtb	r4, r4
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    9406:	cmp	r0, #0
    9408:	bne.n	93f0 <FatFile::open(FatFile*, fname_t*, int)+0x1bc>
    940a:	b.n	9246 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    940c:	ldr.w	r9, [sp, #32]
    9410:	b.n	927e <FatFile::open(FatFile*, fname_t*, int)+0x4a>
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    9412:	ldr	r3, [sp, #20]
    9414:	cbz	r3, 9424 <FatFile::open(FatFile*, fname_t*, int)+0x1f0>
    if (!dirFile->lfnUniqueSfn(fname)) {
    9416:	mov	r1, fp
    9418:	mov	r0, r6
    941a:	bl	917c <FatFile::lfnUniqueSfn(fname_t*)>
    941e:	cmp	r0, #0
    9420:	beq.w	9246 <FatFile::open(FatFile*, fname_t*, int)+0x12>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    9424:	lsls	r1, r7, #5
    9426:	mov	r0, r6
    9428:	bl	81e0 <FatFile::seekSet(unsigned long)>
    942c:	cmp	r0, #0
    942e:	beq.w	9246 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
    9432:	add.w	r8, r8, #4294967295
  for (order = lfnOrd ; order ; order--) {
    9436:	ands.w	r9, r8, #255	; 0xff
    943a:	beq.n	94f0 <FatFile::open(FatFile*, fname_t*, int)+0x2bc>
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    943c:	orr.w	r4, r9, #64	; 0x40
    9440:	uxtb	r4, r4
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    9442:	mov	r5, r9
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    9444:	movs	r7, #0
    9446:	movs	r1, #0
    9448:	mov	r0, r6
    944a:	bl	7f6c <FatFile::readDirCache(bool)>
    if (!ldir) {
    944e:	cmp	r0, #0
    9450:	beq.w	9246 <FatFile::open(FatFile*, fname_t*, int)+0x12>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    9454:	ldr	r2, [r6, #8]
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    9456:	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    945a:	cmp	r9, r5
    945c:	orr.w	r3, r3, #1
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    9460:	mov.w	ip, #15
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    9464:	ite	ne
    9466:	movne	r1, r5
    9468:	moveq	r1, r4
    946a:	strb.w	r3, [r2, #36]	; 0x24
    946e:	add.w	lr, fp, #12
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    9472:	strb.w	ip, [r0, #11]
    ldir->mustBeZero1 = 0;
    9476:	strb	r7, [r0, #12]
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    9478:	strb	r1, [r0, #0]
    947a:	add.w	ip, fp, #23
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    947e:	movs	r3, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    9480:	ldrb.w	r8, [lr, #1]!
    9484:	lsrs	r2, r3, #1
    9486:	orr.w	r3, r2, r3, lsl #7
    948a:	uxtab	r3, r8, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    948e:	cmp	lr, ip
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    9490:	uxtb	r3, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    9492:	bne.n	9480 <FatFile::open(FatFile*, fname_t*, int)+0x24c>
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    9494:	and.w	r1, r1, #31
    9498:	subs	r1, #1
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    949a:	strb	r3, [r0, #13]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    949c:	add.w	r2, r1, r1, lsl #1
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
    94a0:	ldr.w	lr, [fp, #8]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    94a4:	strh	r7, [r0, #26]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    94a6:	add.w	r2, r1, r2, lsl #2
    94aa:	adds	r0, #4
  for (uint8_t i = 0; i < 13; i++, k++) {
    94ac:	movs	r3, #0
    94ae:	b.n	94d0 <FatFile::open(FatFile*, fname_t*, int)+0x29c>
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    94b0:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    94b2:	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    94b6:	bls.n	94e2 <FatFile::open(FatFile*, fname_t*, int)+0x2ae>
    setLe16(ldir->unicode1 + 2*i, c);
  } else if (i < 11) {
    94b8:	cmp	r3, #10
    94ba:	ite	ls
    94bc:	strhls	r1, [r0, #0]
    94be:	strhhi	r1, [r0, #2]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    94c0:	adds	r3, #1
    94c2:	uxtb	r3, r3
    94c4:	cmp	r3, #13
    94c6:	add.w	r2, r2, #1
    94ca:	add.w	r0, r0, #2
    94ce:	beq.n	94e8 <FatFile::open(FatFile*, fname_t*, int)+0x2b4>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    94d0:	cmp	sl, r2
    94d2:	bhi.n	94b0 <FatFile::open(FatFile*, fname_t*, int)+0x27c>
    94d4:	ite	ne
    94d6:	movne.w	r1, #4294967295
    94da:	moveq	r1, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    94dc:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    94de:	uxth	r1, r1
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    94e0:	bhi.n	94b8 <FatFile::open(FatFile*, fname_t*, int)+0x284>
    94e2:	strh.w	r1, [r0, #-3]
    94e6:	b.n	94c0 <FatFile::open(FatFile*, fname_t*, int)+0x28c>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    94e8:	subs	r5, #1
    94ea:	ands.w	r5, r5, #255	; 0xff
    94ee:	bne.n	9446 <FatFile::open(FatFile*, fname_t*, int)+0x212>
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
  dir = dirFile->readDirCache();
    94f0:	movs	r1, #0
    94f2:	mov	r0, r6
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    94f4:	ldr	r5, [r6, #20]
  dir = dirFile->readDirCache();
    94f6:	bl	7f6c <FatFile::readDirCache(bool)>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    94fa:	ubfx	r5, r5, #5, #16
  dir = dirFile->readDirCache();
  if (!dir) {
    94fe:	mov	r4, r0
    9500:	cmp	r0, #0
    9502:	beq.w	9246 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    9506:	movs	r2, #32
    9508:	movs	r1, #0
    950a:	bl	df8c <memset>
  memcpy(dir->name, fname->sfn, 11);
    950e:	mov	r3, fp

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;

  // set timestamps
  if (FsDateTime::callback) {
    9510:	ldr	r2, [pc, #164]	; (95b8 <FatFile::open(FatFile*, fname_t*, int)+0x384>)
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);
    9512:	ldr.w	r1, [r3, #13]!
    9516:	ldr	r0, [r3, #4]
    9518:	str	r0, [r4, #4]
    951a:	str	r1, [r4, #0]
    951c:	ldrh	r1, [r3, #8]
    951e:	ldrb	r3, [r3, #10]
    9520:	strb	r3, [r4, #10]
    9522:	strh	r1, [r4, #8]

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    9524:	ldrb.w	r3, [fp]

  // set timestamps
  if (FsDateTime::callback) {
    9528:	ldr	r7, [r2, #0]
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    952a:	and.w	r3, r3, #24
    952e:	strb	r3, [r4, #12]

  // set timestamps
  if (FsDateTime::callback) {
    9530:	cbz	r7, 9556 <FatFile::open(FatFile*, fname_t*, int)+0x322>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    9532:	add.w	r2, sp, #43	; 0x2b
    9536:	add.w	r1, sp, #46	; 0x2e
    953a:	add	r0, sp, #44	; 0x2c
    953c:	blx	r7
    dir->createTimeMs = ms10;
    setLe16(dir->createDate, date);
    953e:	ldrh.w	r3, [sp, #44]	; 0x2c
    setLe16(dir->createTime, time);
    9542:	ldrh.w	r2, [sp, #46]	; 0x2e

  // set timestamps
  if (FsDateTime::callback) {
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    dir->createTimeMs = ms10;
    9546:	ldrb.w	r1, [sp, #43]	; 0x2b
    954a:	strb	r1, [r4, #13]
    954c:	strh	r3, [r4, #16]
    954e:	strh	r3, [r4, #18]
    9550:	strh	r3, [r4, #24]
    9552:	strh	r2, [r4, #14]
    9554:	strh	r2, [r4, #22]
    setLe16(dir->accessDate, date);
    setLe16(dir->modifyDate, date);
    setLe16(dir->modifyTime, time);;
  }
  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
    9556:	ldr	r2, [r6, #8]
    9558:	ldrb.w	r3, [r2, #36]	; 0x24
    955c:	orr.w	r3, r3, #1
    9560:	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    9564:	str.w	r9, [sp]
    9568:	ldr	r3, [sp, #28]
    956a:	ldr	r0, [sp, #36]	; 0x24
    956c:	mov	r2, r5
    956e:	mov	r1, r6
    9570:	bl	8274 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    9574:	b.n	9248 <FatFile::open(FatFile*, fname_t*, int)+0x14>
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
    9576:	cmp	r0, #0
    9578:	ldr.w	r9, [sp, #32]
    957c:	it	ne
    957e:	movne.w	r9, #0
    9582:	b.n	927e <FatFile::open(FatFile*, fname_t*, int)+0x4a>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    9584:	ldr	r1, [sp, #12]
    9586:	cmp	r1, #1
    9588:	bne.w	9246 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    958c:	subs	r4, r3, #1
    958e:	adds	r3, #10
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    9590:	ldrb.w	r0, [r4, #1]!
    9594:	lsrs	r1, r2, #1
    9596:	orr.w	r2, r1, r2, lsl #7
    959a:	uxtab	r2, r0, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    959e:	cmp	r4, r3
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    95a0:	uxtb	r2, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    95a2:	bne.n	9590 <FatFile::open(FatFile*, fname_t*, int)+0x35c>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    95a4:	ldr	r3, [sp, #24]
    95a6:	cmp	r3, r2
    95a8:	bne.w	9246 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    95ac:	ldr	r3, [sp, #28]
    95ae:	lsls	r1, r3, #20
    95b0:	bpl.n	9564 <FatFile::open(FatFile*, fname_t*, int)+0x330>
    95b2:	b.n	9246 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    95b4:	.word	0x4ec4ec4f
    95b8:	.word	0x1fff1f2c

000095bc <FatFile::getSFN(char*) [clone .part.2]>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
    95bc:	push	{r3, r4, r5, r6, r7, lr}
    95be:	mov	r6, r1
    name[0] = '/';
    name[1] = '\0';
    return true;
  }
  // cache entry
  dir = reinterpret_cast<DirFat_t*>(cacheDirEntry(FatCache::CACHE_FOR_READ));
    95c0:	movs	r1, #0
    95c2:	bl	79a0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    95c6:	cbz	r0, 9604 <FatFile::getSFN(char*) [clone .part.2]+0x48>
    95c8:	movs	r2, #0
    95ca:	mov	r1, r2
    95cc:	subs	r4, r0, #1
    95ce:	movs	r7, #8
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    95d0:	mov.w	lr, #46	; 0x2e
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
    95d4:	ldrb.w	r3, [r4, #1]!
    95d8:	cmp	r3, #32
    95da:	beq.n	95f8 <FatFile::getSFN(char*) [clone .part.2]+0x3c>
      continue;
    }
    if (i == 8) {
    95dc:	cmp	r2, #8
    95de:	beq.n	9606 <FatFile::getSFN(char*) [clone .part.2]+0x4a>
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    95e0:	sub.w	r5, r3, #65	; 0x41
    95e4:	cmp	r5, #25
    95e6:	bhi.n	95f2 <FatFile::getSFN(char*) [clone .part.2]+0x36>
    95e8:	ldrb	r5, [r0, #12]
    95ea:	tst	r7, r5
      c += 'a' - 'A';
    95ec:	itt	ne
    95ee:	addne	r3, #32
    95f0:	uxtbne	r3, r3
    }
    name[j++] = c;
    95f2:	strb	r3, [r6, r1]
    95f4:	adds	r1, #1
    95f6:	uxtb	r1, r1
    95f8:	adds	r2, #1
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    95fa:	cmp	r2, #11
    95fc:	bne.n	95d4 <FatFile::getSFN(char*) [clone .part.2]+0x18>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
    95fe:	movs	r3, #0
    9600:	strb	r3, [r6, r1]
  return true;
    9602:	movs	r0, #1

fail:
  return false;
}
    9604:	pop	{r3, r4, r5, r6, r7, pc}
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    9606:	strb.w	lr, [r6, r1]
    960a:	adds	r1, #1
    960c:	uxtb	r1, r1
    960e:	ldrb	r3, [r4, #0]
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
    9610:	movs	r7, #16
    9612:	b.n	95e0 <FatFile::getSFN(char*) [clone .part.2]+0x24>

00009614 <FatFile::getSFN(char*)>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
    9614:	ldrb	r3, [r0, #0]
    9616:	mov	r2, r1
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t *dir;

  if (!isOpen()) {
    9618:	cbz	r3, 9630 <FatFile::getSFN(char*)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    961a:	tst.w	r3, #96	; 0x60
    961e:	beq.n	962c <FatFile::getSFN(char*)+0x18>
    name[0] = '/';
    9620:	movs	r1, #47	; 0x2f
    name[1] = '\0';
    9622:	movs	r3, #0
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    name[0] = '/';
    9624:	strb	r1, [r2, #0]
    name[1] = '\0';
    9626:	strb	r3, [r2, #1]
    return true;
    9628:	movs	r0, #1
    962a:	bx	lr
    962c:	b.w	95bc <FatFile::getSFN(char*) [clone .part.2]>
  }
  name[j] = 0;
  return true;

fail:
  return false;
    9630:	mov	r0, r3
}
    9632:	bx	lr

00009634 <FatFile::printSFN(Print*)>:
//------------------------------------------------------------------------------
size_t FatFile::printSFN(print_t* pr) {
    9634:	ldrb	r3, [r0, #0]
bool FatFile::getSFN(char* name) {
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t *dir;

  if (!isOpen()) {
    9636:	cbnz	r3, 963c <FatFile::printSFN(Print*)+0x8>
    goto fail;
  }
  return pr->write(name);

fail:
  return 0;
    9638:	movs	r0, #0
}
    963a:	bx	lr

fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::printSFN(print_t* pr) {
    963c:	push	{r4, r5, lr}

  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    963e:	tst.w	r3, #96	; 0x60

fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::printSFN(print_t* pr) {
    9642:	sub	sp, #20
    9644:	mov	r4, r1

  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    9646:	beq.n	966c <FatFile::printSFN(Print*)+0x38>
    name[0] = '/';
    9648:	movs	r2, #47	; 0x2f
    name[1] = '\0';
    964a:	movs	r3, #0
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    name[0] = '/';
    964c:	strb.w	r2, [sp]
    name[1] = '\0';
    9650:	strb.w	r3, [sp, #1]
    9654:	mov	r5, sp
    9656:	mov	r0, r5
    9658:	bl	e580 <strlen>
    965c:	ldr	r3, [r4, #0]
    965e:	mov	r2, r0
    9660:	mov	r1, r5
    9662:	ldr	r3, [r3, #4]
    9664:	mov	r0, r4
    9666:	blx	r3
  }
  return pr->write(name);

fail:
  return 0;
}
    9668:	add	sp, #20
    966a:	pop	{r4, r5, pc}
    966c:	mov	r1, sp
    966e:	mov	r5, sp
    9670:	bl	95bc <FatFile::getSFN(char*) [clone .part.2]>
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::printSFN(print_t* pr) {
  char name[13];
  if (!getSFN(name)) {
    9674:	cmp	r0, #0
    9676:	bne.n	9656 <FatFile::printSFN(Print*)+0x22>
    goto fail;
  }
  return pr->write(name);

fail:
  return 0;
    9678:	movs	r0, #0
}
    967a:	add	sp, #20
    967c:	pop	{r4, r5, pc}
    967e:	nop

00009680 <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    9680:	push	{r3, r4, r5, r6, r7, lr}
  m_fFile = nullptr;
    9682:	movs	r5, #0
    9684:	str	r5, [r0, #56]	; 0x38
  m_xFile = nullptr;
  if (from.m_fFile) {
    9686:	ldr	r4, [r1, #56]	; 0x38
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
  m_fFile = nullptr;
  m_xFile = nullptr;
    9688:	str	r5, [r0, #60]	; 0x3c
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    968a:	mov	r6, r0
    968c:	mov	r7, r1
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    968e:	cbz	r4, 96b4 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    9690:	mov	r1, r0
    9692:	movs	r0, #36	; 0x24
    9694:	bl	98ec <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    9698:	strb	r5, [r0, #0]
    969a:	strb	r5, [r0, #1]
    969c:	strb	r5, [r0, #2]
    969e:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    96a0:	ldr	r5, [r7, #56]	; 0x38
    96a2:	mov	r4, r0
    96a4:	ldmia	r5!, {r0, r1, r2, r3}
    96a6:	stmia	r4!, {r0, r1, r2, r3}
    96a8:	ldmia	r5!, {r0, r1, r2, r3}
    96aa:	stmia	r4!, {r0, r1, r2, r3}
    96ac:	ldr	r3, [r5, #0]
    96ae:	str	r3, [r4, #0]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
    96b0:	mov	r0, r6
    96b2:	pop	{r3, r4, r5, r6, r7, pc}
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    96b4:	ldr	r3, [r1, #60]	; 0x3c
    96b6:	cmp	r3, #0
    96b8:	beq.n	96b0 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>
    m_xFile = new (m_fileMem) ExFatFile;
    96ba:	mov	r1, r0
    96bc:	movs	r0, #56	; 0x38
    96be:	bl	98ec <operator new(unsigned int, unsigned long*)>
    96c2:	strb.w	r4, [r0, #49]	; 0x31
    96c6:	strb.w	r4, [r0, #50]	; 0x32
    96ca:	strb.w	r4, [r0, #51]	; 0x33
    96ce:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    96d0:	ldr	r3, [r7, #60]	; 0x3c
    96d2:	mov	r2, r0
    96d4:	add.w	r1, r3, #48	; 0x30
    96d8:	ldr	r5, [r3, #0]
    96da:	ldr	r4, [r3, #4]
    96dc:	ldr	r0, [r3, #8]
    96de:	ldr	r7, [r3, #12]
    96e0:	str	r7, [r2, #12]
    96e2:	adds	r3, #16
    96e4:	cmp	r3, r1
    96e6:	str	r5, [r2, #0]
    96e8:	str	r4, [r2, #4]
    96ea:	str	r0, [r2, #8]
    96ec:	add.w	r2, r2, #16
    96f0:	bne.n	96d8 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x58>
    96f2:	ldr	r3, [r3, #0]
    96f4:	str	r3, [r2, #0]
    96f6:	b.n	96b0 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>

000096f8 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    96f8:	push	{r4, lr}
    96fa:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    96fc:	ldr	r0, [r0, #56]	; 0x38
    96fe:	cbz	r0, 970c <FsBaseFile::close()+0x14>
    9700:	bl	7a54 <FatFile::close()>
    9704:	cbz	r0, 970c <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    9706:	movs	r3, #0
    9708:	str	r3, [r4, #56]	; 0x38
    return true;
    970a:	pop	{r4, pc}
  }
  if (m_xFile && m_xFile->close()) {
    970c:	ldr	r0, [r4, #60]	; 0x3c
    970e:	cbz	r0, 971c <FsBaseFile::close()+0x24>
    9710:	bl	5d2c <ExFatFile::close()>
    9714:	cbz	r0, 971c <FsBaseFile::close()+0x24>
    m_xFile = nullptr;
    9716:	movs	r3, #0
    9718:	str	r3, [r4, #60]	; 0x3c
    971a:	pop	{r4, pc}
    return true;
  }
  return false;
    971c:	movs	r0, #0
}
    971e:	pop	{r4, pc}

00009720 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    9720:	cbz	r1, 9796 <FsBaseFile::open(FsVolume*, char const*, int)+0x76>
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    9722:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9726:	mov	r4, r1
    9728:	mov	r5, r0
    972a:	mov	r8, r3
    972c:	mov	r7, r2
  if (!vol) {
    return false;
  }
  close();
    972e:	bl	96f8 <FsBaseFile::close()>
  if (vol->m_fVol) {
    9732:	ldr.w	r6, [r4, #1144]	; 0x478
    9736:	cbz	r6, 9764 <FsBaseFile::open(FsVolume*, char const*, int)+0x44>
    m_fFile = new (m_fileMem) FatFile;
    9738:	mov	r1, r5
    973a:	movs	r0, #36	; 0x24
    973c:	bl	98ec <operator new(unsigned int, unsigned long*)>
    9740:	movs	r1, #0
    9742:	strb	r1, [r0, #0]
    9744:	strb	r1, [r0, #1]
    9746:	strb	r1, [r0, #2]
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    9748:	ldr.w	r1, [r4, #1144]	; 0x478
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    974c:	str	r0, [r5, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    974e:	mov	r3, r8
    9750:	mov	r2, r7
    9752:	bl	7d8c <FatFile::open(FatVolume*, char const*, int)>
    9756:	cbz	r0, 975e <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
      return true;
    9758:	movs	r0, #1
    975a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    m_fFile = nullptr;
    975e:	str	r0, [r5, #56]	; 0x38
    return false;
    9760:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    9764:	ldr.w	r3, [r4, #1148]	; 0x47c
    9768:	cbz	r3, 979a <FsBaseFile::open(FsVolume*, char const*, int)+0x7a>
    m_xFile = new (m_fileMem) ExFatFile;
    976a:	mov	r1, r5
    976c:	movs	r0, #56	; 0x38
    976e:	bl	98ec <operator new(unsigned int, unsigned long*)>
    9772:	strb.w	r6, [r0, #49]	; 0x31
    9776:	strb.w	r6, [r0, #50]	; 0x32
    977a:	strb.w	r6, [r0, #51]	; 0x33
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    977e:	ldr.w	r1, [r4, #1148]	; 0x47c
      return true;
    }
    m_fFile = nullptr;
    return false;
  } else if (vol->m_xVol) {
    m_xFile = new (m_fileMem) ExFatFile;
    9782:	str	r0, [r5, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    9784:	mov	r3, r8
    9786:	mov	r2, r7
    9788:	bl	6728 <ExFatFile::open(ExFatVolume*, char const*, int)>
    978c:	cmp	r0, #0
    978e:	bne.n	9758 <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_xFile = nullptr;
    9790:	str	r0, [r5, #60]	; 0x3c
  }
  return false;
}
    9792:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    9796:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    9798:	bx	lr
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    979a:	movs	r0, #0
    979c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000097a0 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    97a0:	push	{r3, r4, r5, r6, r7, lr}
    97a2:	mov	r5, r1
    97a4:	mov	r7, r2
    97a6:	mov	r4, r0
  close();
    97a8:	bl	96f8 <FsBaseFile::close()>
  if (dir->m_fFile) {
    97ac:	ldr	r6, [r5, #56]	; 0x38
    97ae:	cbz	r6, 97d4 <FsBaseFile::openNext(FsBaseFile*, int)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    97b0:	mov	r1, r4
    97b2:	movs	r0, #36	; 0x24
    97b4:	bl	98ec <operator new(unsigned int, unsigned long*)>
    97b8:	movs	r2, #0
    97ba:	strb	r2, [r0, #0]
    97bc:	strb	r2, [r0, #1]
    97be:	strb	r2, [r0, #2]
    97c0:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    97c2:	mov	r2, r7
    97c4:	ldr	r1, [r5, #56]	; 0x38
    97c6:	bl	834c <FatFile::openNext(FatFile*, int)>
    97ca:	cbz	r0, 97d0 <FsBaseFile::openNext(FsBaseFile*, int)+0x30>
      return true;
    97cc:	movs	r0, #1
    97ce:	pop	{r3, r4, r5, r6, r7, pc}
    }
    m_fFile = nullptr;
    97d0:	str	r0, [r4, #56]	; 0x38
    97d2:	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
    97d4:	ldr	r0, [r5, #60]	; 0x3c
    97d6:	cbz	r0, 97fc <FsBaseFile::openNext(FsBaseFile*, int)+0x5c>
    m_xFile = new (m_fileMem) ExFatFile;
    97d8:	mov	r1, r4
    97da:	movs	r0, #56	; 0x38
    97dc:	bl	98ec <operator new(unsigned int, unsigned long*)>
    97e0:	strb.w	r6, [r0, #49]	; 0x31
    97e4:	strb.w	r6, [r0, #50]	; 0x32
    97e8:	strb.w	r6, [r0, #51]	; 0x33
    97ec:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    97ee:	mov	r2, r7
    97f0:	ldr	r1, [r5, #60]	; 0x3c
    97f2:	bl	6738 <ExFatFile::openNext(ExFatFile*, int)>
    97f6:	cmp	r0, #0
    97f8:	bne.n	97cc <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
      return true;
    }
    m_xFile = nullptr;
    97fa:	str	r0, [r4, #60]	; 0x3c
  }
  return false;
}
    97fc:	pop	{r3, r4, r5, r6, r7, pc}
    97fe:	nop

00009800 <FsVolume::begin(BlockDeviceInterface*)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    9800:	push	{r4, r5, r6, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    9802:	movs	r6, #0
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    9804:	mov	r5, r0
  m_blockDev = blockDev;
    9806:	str.w	r1, [r0, #1152]	; 0x480
  m_fVol = nullptr;
    980a:	str.w	r6, [r0, #1144]	; 0x478
  m_xVol = new (m_volMem) ExFatVolume;
    980e:	mov	r1, r0
    9810:	mov.w	r0, #1144	; 0x478
    9814:	bl	98ec <operator new(unsigned int, unsigned long*)>
    9818:	mov	r4, r0
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    981a:	str	r6, [r0, #4]
    invalidate();
    981c:	bl	693c <FsCache::invalidate()>
    9820:	add.w	r0, r4, #524	; 0x20c
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    9824:	str.w	r6, [r4, #528]	; 0x210
    invalidate();
    9828:	bl	693c <FsCache::invalidate()>
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() : m_fatType(0) {}
    982c:	strb.w	r6, [r4, #1084]	; 0x43c
    9830:	strb.w	r6, [r4, #1137]	; 0x471
    9834:	strb.w	r6, [r4, #1138]	; 0x472
    9838:	strb.w	r6, [r4, #1139]	; 0x473
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    983c:	ldr.w	r1, [r5, #1152]	; 0x480
    9840:	str.w	r4, [r5, #1148]	; 0x47c
    9844:	mov	r0, r4
    9846:	movs	r2, #1
    9848:	bl	6acc <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>
    984c:	cbnz	r0, 988a <FsVolume::begin(BlockDeviceInterface*)+0x8a>
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    984e:	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    9850:	mov	r1, r5
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    9852:	str.w	r6, [r5, #1148]	; 0x47c
  m_fVol = new (m_volMem) FatVolume;
    9856:	mov.w	r0, #1120	; 0x460
    985a:	bl	98ec <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() : m_fatType(0) {}
    985e:	strb	r6, [r0, #7]
    9860:	strb.w	r6, [r0, #1084]	; 0x43c
    9864:	strb.w	r6, [r0, #1085]	; 0x43d
    9868:	strb.w	r6, [r0, #1086]	; 0x43e
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    986c:	movs	r2, #1
    986e:	ldr.w	r1, [r5, #1152]	; 0x480
    9872:	str.w	r0, [r5, #1144]	; 0x478
    9876:	mov	r4, r0
    9878:	bl	8abc <FatPartition::init(BlockDeviceInterface*, unsigned char)>
    987c:	cbnz	r0, 98a8 <FsVolume::begin(BlockDeviceInterface*)+0xa8>
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    987e:	ldr	r3, [pc, #64]	; (98c0 <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
    9880:	movs	r0, #0
    9882:	str	r0, [r3, #0]
  m_fVol = nullptr;
    9884:	str.w	r0, [r5, #1144]	; 0x478
  return false;
    9888:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    988a:	add.w	r6, r4, #1088	; 0x440
    988e:	mov	r0, r6
    9890:	bl	5d2c <ExFatFile::close()>
    return m_vwd.openRoot(this);
    9894:	mov	r1, r4
    9896:	mov	r0, r6
    9898:	bl	5de8 <ExFatFile::openRoot(ExFatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    989c:	cmp	r0, #0
    989e:	beq.n	984e <FsVolume::begin(BlockDeviceInterface*)+0x4e>

 done:
  m_cwv = this;
    98a0:	ldr	r3, [pc, #28]	; (98c0 <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
  return true;
    98a2:	movs	r0, #1
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    98a4:	str	r5, [r3, #0]
  return true;
    98a6:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    98a8:	addw	r6, r4, #1084	; 0x43c
    98ac:	mov	r0, r6
    98ae:	bl	7a54 <FatFile::close()>
    return m_vwd.openRoot(this);
    98b2:	mov	r1, r4
    98b4:	mov	r0, r6
    98b6:	bl	7d9c <FatFile::openRoot(FatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    98ba:	cmp	r0, #0
    98bc:	bne.n	98a0 <FsVolume::begin(BlockDeviceInterface*)+0xa0>
    98be:	b.n	987e <FsVolume::begin(BlockDeviceInterface*)+0x7e>
    98c0:	.word	0x1fff1f30

000098c4 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    98c4:	push	{r3, r4, r5, r6, r7, lr}
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    98c6:	movs	r5, #0
    98c8:	mov.w	r7, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    98cc:	ldr	r6, [pc, #24]	; (98e8 <FsVolume::open(char const*, int)+0x24>)
    98ce:	str	r7, [r0, #8]
    98d0:	mov	r4, r0
    98d2:	strb	r5, [r0, #4]
    98d4:	strb	r5, [r0, #12]
 * \class FsBaseFile
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}
    98d6:	str	r5, [r0, #72]	; 0x48
    98d8:	str	r5, [r0, #76]	; 0x4c
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    98da:	str.w	r6, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    98de:	bl	9720 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    98e2:	mov	r0, r4
    98e4:	pop	{r3, r4, r5, r6, r7, pc}
    98e6:	nop
    98e8:	.word	0x00011994

000098ec <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    98ec:	mov	r0, r1
    98ee:	bx	lr

000098f0 <SdSpiCard::errorCode() const>:
  /**
   * \return code for the last error. See SdCardInfo.h for a list of error codes.
   */
  uint8_t errorCode() const {
    return m_errorCode;
  }
    98f0:	ldrb	r0, [r0, #19]
    98f2:	bx	lr

000098f4 <SdSpiCard::errorData() const>:
  /** \return error data for last error. */
  uint32_t errorData() const {
    return m_status;
  }
    98f4:	ldrb	r0, [r0, #21]
    98f6:	bx	lr

000098f8 <SdSpiCard::readSector(unsigned long, unsigned char*)>:
   *
   * \param[in] sector Logical sector to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
    98f8:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    98fa:	ldr	r4, [r0, #0]
    98fc:	ldr	r4, [r4, #12]
    98fe:	movs	r3, #1
    9900:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return readSingle(sector, dst);
#endif  // ENABLE_DEDICATED_SPI
  }
    9902:	ldr.w	r4, [sp], #4
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    9906:	bx	ip

00009908 <SdSpiCard::type() const>:
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
  }
    9908:	ldrb	r0, [r0, #22]
    990a:	bx	lr

0000990c <SdSpiCard::writeSector(unsigned long, unsigned char const*)>:
   *
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    990c:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    990e:	ldr	r4, [r0, #0]
    9910:	ldr	r4, [r4, #28]
    9912:	movs	r3, #1
    9914:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return writeSingle(sector, src);
#endif  // ENABLE_DEDICATED_SPI
  }
    9916:	ldr.w	r4, [sp], #4
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    991a:	bx	ip

0000991c <SdSpiCard::~SdSpiCard()>:
/**
 * \class SdSpiCard
 * \brief Raw access to SD and SDHC flash memory cards via SPI protocol.
 */
#if HAS_SDIO_CLASS
class SdSpiCard : public SdCardInterface {
    991c:	bx	lr
    991e:	nop

00009920 <SdSpiCard::~SdSpiCard()>:
    9920:	push	{r4, lr}
    9922:	movs	r1, #24
    9924:	mov	r4, r0
    9926:	bl	c9a8 <operator delete(void*, unsigned int)>
    992a:	mov	r0, r4
    992c:	pop	{r4, pc}
    992e:	nop

00009930 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    9930:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9934:	mov	r6, r1
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    9936:	ldrb	r1, [r0, #16]
    9938:	cmp	r1, #2
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    993a:	mov	r4, r0
    993c:	mov	r5, r2
    993e:	mov	r7, r3
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    9940:	beq.n	9952 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x22>
    if (!syncDevice()) {
    9942:	ldr	r3, [r4, #0]
    9944:	mov	r0, r4
    9946:	ldr	r3, [r3, #20]
    9948:	blx	r3
    994a:	cbnz	r0, 9984 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x54>
      return false;
    994c:	movs	r0, #0
    994e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    9952:	ldr	r3, [r0, #12]
    9954:	cmp	r3, r6
    9956:	bne.n	9942 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    9958:	movs	r6, #0
    995a:	cbz	r7, 9974 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeData(src)) {
    995c:	ldr	r3, [r4, #0]
    995e:	mov	r1, r5
    9960:	ldr	r3, [r3, #68]	; 0x44
    9962:	mov	r0, r4
    9964:	blx	r3
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    9966:	adds	r6, #1
    9968:	add.w	r5, r5, #512	; 0x200
    if (!writeData(src)) {
    996c:	cmp	r0, #0
    996e:	beq.n	994c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    9970:	cmp	r7, r6
    9972:	bne.n	995c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2c>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    9974:	ldr	r3, [r4, #12]
  return m_sharedSpi ? syncDevice() : true;
    9976:	ldrb	r2, [r4, #17]
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    9978:	add	r7, r3
    997a:	str	r7, [r4, #12]
  return m_sharedSpi ? syncDevice() : true;
    997c:	cbnz	r2, 999a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x6a>
    997e:	movs	r0, #1
    9980:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!syncDevice()) {
      return false;
    }
    if (!writeStart(sector)) {
    9984:	ldr	r3, [r4, #0]
    9986:	mov	r1, r6
    9988:	ldr	r3, [r3, #72]	; 0x48
    998a:	mov	r0, r4
    998c:	blx	r3
    998e:	cmp	r0, #0
    9990:	beq.n	994c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    9992:	movs	r3, #2
      return false;
    }
    if (!writeStart(sector)) {
      return false;
    }
    m_curSector = sector;
    9994:	str	r6, [r4, #12]
    m_curState = WRITE_STATE;
    9996:	strb	r3, [r4, #16]
    9998:	b.n	9958 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x28>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    999a:	ldr	r3, [r4, #0]
    999c:	mov	r0, r4
    999e:	ldr	r3, [r3, #20]

 fail:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
    99a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    99a4:	bx	r3
    99a6:	nop

000099a8 <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
    99a8:	push	{r4, lr}
    99aa:	mov	r4, r0
  bool waitNotBusy(SdMillis_t timeoutMS);
  bool writeData(uint8_t token, const uint8_t* src);

#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
    99ac:	adds	r0, #4
    99ae:	bl	af58 <SdSpiArduinoDriver::activate()>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    99b2:	ldrb	r0, [r4, #18]
    99b4:	movs	r1, #0
    99b6:	bl	b0d8 <sdCsWrite(unsigned char, bool)>
  if (!m_spiActive) {
    spiActivate();
    spiSelect();
    m_spiActive = true;
    99ba:	movs	r3, #1
    99bc:	strb	r3, [r4, #20]
    99be:	pop	{r4, pc}

000099c0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>:
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
    99c0:	push	{r3, r4, r5, lr}
    99c2:	mov	r4, r0
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    99c4:	movs	r1, #1
    99c6:	ldrb	r0, [r0, #18]
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    99c8:	adds	r5, r4, #4
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    99ca:	bl	b0d8 <sdCsWrite(unsigned char, bool)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    99ce:	mov	r0, r5
    99d0:	movs	r1, #255	; 0xff
    99d2:	bl	b06c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
    99d6:	mov	r0, r5
    99d8:	bl	afe8 <SdSpiArduinoDriver::deactivate()>
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    99dc:	movs	r3, #0
    99de:	strb	r3, [r4, #20]
    99e0:	pop	{r3, r4, r5, pc}
    99e2:	nop

000099e4 <SdSpiCard::isBusy()>:
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    99e4:	push	{r3, r4, r5, r6, r7, lr}
  bool rtn = true;
  bool spiActive = m_spiActive;
    99e6:	ldrb	r7, [r0, #20]
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    99e8:	mov	r6, r0
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    99ea:	cbnz	r7, 99f0 <SdSpiCard::isBusy()+0xc>
    99ec:	bl	99a8 <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>
    99f0:	adds	r5, r6, #4
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    99f2:	movs	r4, #8
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    99f4:	mov	r0, r5
    99f6:	bl	b030 <SdSpiArduinoDriver::receive()>
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
    99fa:	cmp	r0, #255	; 0xff
    99fc:	add.w	r3, r4, #4294967295
    9a00:	beq.n	9a1e <SdSpiCard::isBusy()+0x3a>
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    9a02:	ands.w	r4, r3, #255	; 0xff
    9a06:	bne.n	99f4 <SdSpiCard::isBusy()+0x10>
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
  bool rtn = true;
    9a08:	movs	r4, #1
    if (0XFF == spiReceive()) {
      rtn = false;
      break;
    }
  }
  if (!spiActive) {
    9a0a:	cbnz	r7, 9a10 <SdSpiCard::isBusy()+0x2c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    9a0c:	ldrb	r3, [r6, #20]
    9a0e:	cbnz	r3, 9a14 <SdSpiCard::isBusy()+0x30>
  }
  if (!spiActive) {
    spiStop();
  }
  return rtn;
}
    9a10:	mov	r0, r4
    9a12:	pop	{r3, r4, r5, r6, r7, pc}
    9a14:	mov	r0, r6
    9a16:	bl	99c0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    9a1a:	mov	r0, r4
    9a1c:	pop	{r3, r4, r5, r6, r7, pc}
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
      rtn = false;
    9a1e:	movs	r4, #0
    9a20:	b.n	9a0a <SdSpiCard::isBusy()+0x26>
    9a22:	nop

00009a24 <SdSpiCard::readData(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
    9a24:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9a28:	ldr	r6, [pc, #116]	; (9aa0 <SdSpiCard::readData(unsigned char*, unsigned int)+0x7c>)
    9a2a:	sub	sp, #12
    9a2c:	ldr	r3, [r6, #0]
    9a2e:	str	r3, [sp, #0]
	return ret;
    9a30:	ldr	r5, [sp, #0]
    9a32:	mov	r4, r0
    9a34:	mov	r8, r1
    9a36:	mov	r9, r2

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    9a38:	uxth	r5, r5
    9a3a:	adds	r7, r0, #4
    9a3c:	b.n	9a4e <SdSpiCard::readData(unsigned char*, unsigned int)+0x2a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9a3e:	ldr	r3, [r6, #0]
    9a40:	str	r3, [sp, #4]
	return ret;
    9a42:	ldr	r3, [sp, #4]
    9a44:	uxth	r3, r3
    9a46:	subs	r3, r3, r5
    9a48:	cmp.w	r3, #300	; 0x12c
    9a4c:	bgt.n	9a74 <SdSpiCard::readData(unsigned char*, unsigned int)+0x50>
    9a4e:	mov	r0, r7
    9a50:	bl	b030 <SdSpiArduinoDriver::receive()>
#endif  // USE_SD_CRC

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    9a54:	cmp	r0, #255	; 0xff
    9a56:	strb	r0, [r4, #21]
    9a58:	beq.n	9a3e <SdSpiCard::readData(unsigned char*, unsigned int)+0x1a>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_SECTOR) {
    9a5a:	cmp	r0, #254	; 0xfe
    9a5c:	beq.n	9a7a <SdSpiCard::readData(unsigned char*, unsigned int)+0x56>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    9a5e:	movs	r3, #24
    9a60:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    9a62:	ldrb	r0, [r4, #20]
    9a64:	cbz	r0, 9a6e <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    9a66:	mov	r0, r4
    9a68:	bl	99c0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
  return false;
    9a6c:	movs	r0, #0
}
    9a6e:	add	sp, #12
    9a70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9a74:	movs	r3, #29
    9a76:	strb	r3, [r4, #19]
    9a78:	b.n	9a62 <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
    9a7a:	mov	r2, r9
    9a7c:	mov	r1, r8
    9a7e:	mov	r0, r7
    9a80:	bl	b04c <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    9a84:	strb	r0, [r4, #21]
    9a86:	cbz	r0, 9a8e <SdSpiCard::readData(unsigned char*, unsigned int)+0x6a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    9a88:	movs	r3, #36	; 0x24
    9a8a:	strb	r3, [r4, #19]
    9a8c:	b.n	9a62 <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    9a8e:	mov	r0, r7
    9a90:	bl	b030 <SdSpiArduinoDriver::receive()>
    9a94:	mov	r0, r7
    9a96:	bl	b030 <SdSpiArduinoDriver::receive()>
#else  // USE_SD_CRC
  // discard crc
  spiReceive();
  spiReceive();
#endif  // USE_SD_CRC
  return true;
    9a9a:	movs	r0, #1
    9a9c:	b.n	9a6e <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    9a9e:	nop
    9aa0:	.word	0x1fff1f90

00009aa4 <SdSpiCard::waitNotBusy(unsigned short)>:
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(SdMillis_t timeoutMS) {
    9aa4:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9aa6:	ldr	r5, [pc, #52]	; (9adc <SdSpiCard::waitNotBusy(unsigned short)+0x38>)
    9aa8:	sub	sp, #12
    9aaa:	ldr	r3, [r5, #0]
    9aac:	str	r3, [sp, #0]
	return ret;
    9aae:	ldr	r4, [sp, #0]
    9ab0:	mov	r7, r1
    9ab2:	adds	r6, r0, #4
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    9ab4:	uxth	r4, r4
    9ab6:	b.n	9ac6 <SdSpiCard::waitNotBusy(unsigned short)+0x22>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9ab8:	ldr	r3, [r5, #0]
    9aba:	str	r3, [sp, #4]
	return ret;
    9abc:	ldr	r3, [sp, #4]
    9abe:	uxth	r3, r3
    9ac0:	subs	r3, r3, r4
    9ac2:	cmp	r3, r7
    9ac4:	bgt.n	9ad6 <SdSpiCard::waitNotBusy(unsigned short)+0x32>
    9ac6:	mov	r0, r6
    9ac8:	bl	b030 <SdSpiArduinoDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    9acc:	cmp	r0, #255	; 0xff
    9ace:	bne.n	9ab8 <SdSpiCard::waitNotBusy(unsigned short)+0x14>
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    }
  }
  return true;
    9ad0:	movs	r0, #1
#endif  // WDT_YIELD_TIME_MILLIS
}
    9ad2:	add	sp, #12
    9ad4:	pop	{r4, r5, r6, r7, pc}
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    9ad6:	movs	r0, #0
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
    9ad8:	add	sp, #12
    9ada:	pop	{r4, r5, r6, r7, pc}
    9adc:	.word	0x1fff1f90

00009ae0 <SdSpiCard::cardCommand(unsigned char, unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    9ae0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // select card
  if (!m_spiActive) {
    9ae4:	ldrb	r3, [r0, #20]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    9ae6:	sub	sp, #8
    9ae8:	mov	r6, r0
    9aea:	mov	r8, r1
    9aec:	str	r2, [sp, #4]
  // select card
  if (!m_spiActive) {
    9aee:	cbnz	r3, 9af4 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x14>
    9af0:	bl	99a8 <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    9af4:	cmp.w	r8, #0
    9af8:	bne.n	9b50 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x70>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    9afa:	adds	r4, r6, #4
    9afc:	mov	r0, r4
    9afe:	orr.w	r1, r8, #64	; 0x40
    9b02:	bl	b06c <SdSpiArduinoDriver::send(unsigned char)>
    9b06:	add	r7, sp, #4
    9b08:	add	r5, sp, #8
    9b0a:	ldrb.w	r1, [r5, #-1]!
    9b0e:	mov	r0, r4
    9b10:	bl	b06c <SdSpiArduinoDriver::send(unsigned char)>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    9b14:	cmp	r5, r7
    9b16:	bne.n	9b0a <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x2a>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    9b18:	cmp.w	r8, #0
    9b1c:	ite	eq
    9b1e:	moveq	r1, #149	; 0x95
    9b20:	movne	r1, #135	; 0x87
    9b22:	mov	r0, r4
    9b24:	bl	b06c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    9b28:	mov	r0, r4
    9b2a:	bl	b030 <SdSpiArduinoDriver::receive()>
    9b2e:	movs	r5, #11
    9b30:	mov	r0, r4
    9b32:	bl	b030 <SdSpiArduinoDriver::receive()>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    9b36:	lsls	r3, r0, #24
    9b38:	strb	r0, [r6, #21]
    9b3a:	bmi.n	9b42 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x62>
  }
  return m_status;
}
    9b3c:	add	sp, #8
    9b3e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9b42:	subs	r3, r5, #1

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    9b44:	ands.w	r5, r3, #255	; 0xff
    9b48:	bne.n	9b30 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
  }
  return m_status;
}
    9b4a:	add	sp, #8
    9b4c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
    9b50:	mov.w	r1, #300	; 0x12c
    9b54:	mov	r0, r6
    9b56:	bl	9aa4 <SdSpiCard::waitNotBusy(unsigned short)>
    9b5a:	b.n	9afa <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x1a>

00009b5c <SdSpiCard::readOCR(unsigned long*)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    9b5c:	push	{r3, r4, r5, r6, r7, lr}
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    9b5e:	ldr	r3, [r0, #0]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    9b60:	mov	r5, r0
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    9b62:	ldr	r3, [r3, #20]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    9b64:	mov	r6, r1
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    9b66:	blx	r3
  if (cardCommand(CMD58, 0)) {
    9b68:	mov	r0, r5
    9b6a:	movs	r2, #0
    9b6c:	movs	r1, #58	; 0x3a
    9b6e:	bl	9ae0 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    9b72:	cbnz	r0, 9b90 <SdSpiCard::readOCR(unsigned long*)+0x34>
    9b74:	adds	r7, r5, #4
    9b76:	adds	r4, r6, #4
    9b78:	mov	r0, r7
    9b7a:	bl	b030 <SdSpiArduinoDriver::receive()>
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    p[3 - i] = spiReceive();
    9b7e:	strb.w	r0, [r4, #-1]!
  syncDevice();
  if (cardCommand(CMD58, 0)) {
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    9b82:	cmp	r6, r4
    9b84:	bne.n	9b78 <SdSpiCard::readOCR(unsigned long*)+0x1c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    9b86:	ldrb	r4, [r5, #20]
    9b88:	cbnz	r4, 9ba6 <SdSpiCard::readOCR(unsigned long*)+0x4a>
    9b8a:	movs	r4, #1
  return true;

fail:
  spiStop();
  return false;
}
    9b8c:	mov	r0, r4
    9b8e:	pop	{r3, r4, r5, r6, r7, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    9b90:	ldrb	r4, [r5, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    9b92:	movs	r3, #18
    9b94:	strb	r3, [r5, #19]
    9b96:	cmp	r4, #0
    9b98:	beq.n	9b8c <SdSpiCard::readOCR(unsigned long*)+0x30>
    9b9a:	mov	r0, r5
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    9b9c:	movs	r4, #0
    9b9e:	bl	99c0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
}
    9ba2:	mov	r0, r4
    9ba4:	pop	{r3, r4, r5, r6, r7, pc}
    9ba6:	mov	r0, r5
    9ba8:	bl	99c0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    9bac:	mov	r0, r4
    9bae:	pop	{r3, r4, r5, r6, r7, pc}

00009bb0 <SdSpiCard::readRegister(unsigned char, void*)>:
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    9bb0:	ldr	r3, [r0, #0]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    9bb2:	push	{r4, r5, r6, lr}
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    9bb4:	ldr	r3, [r3, #20]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    9bb6:	mov	r4, r0
    9bb8:	mov	r5, r1
    9bba:	mov	r6, r2
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    9bbc:	blx	r3
  if (cardCommand(cmd, 0)) {
    9bbe:	mov	r1, r5
    9bc0:	mov	r0, r4
    9bc2:	movs	r2, #0
    9bc4:	bl	9ae0 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    9bc8:	cbz	r0, 9bdc <SdSpiCard::readRegister(unsigned char, void*)+0x2c>
    9bca:	movs	r3, #27
    9bcc:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    9bce:	ldrb	r0, [r4, #20]
    9bd0:	cbz	r0, 9bda <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    9bd2:	mov	r0, r4
    9bd4:	bl	99c0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    9bd8:	movs	r0, #0
}
    9bda:	pop	{r4, r5, r6, pc}
  syncDevice();
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    9bdc:	mov	r1, r6
    9bde:	movs	r2, #16
    9be0:	mov	r0, r4
    9be2:	bl	9a24 <SdSpiCard::readData(unsigned char*, unsigned int)>
    9be6:	cmp	r0, #0
    9be8:	beq.n	9bce <SdSpiCard::readRegister(unsigned char, void*)+0x1e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    9bea:	ldrb	r5, [r4, #20]
    9bec:	cmp	r5, #0
    9bee:	beq.n	9bda <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    9bf0:	mov	r0, r4
    9bf2:	bl	99c0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    9bf6:	mov	r0, r5
    9bf8:	pop	{r4, r5, r6, pc}
    9bfa:	nop

00009bfc <SdSpiCard::readCSD(csd_t*)>:
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    9bfc:	mov	r2, r1
    9bfe:	movs	r1, #9
    9c00:	b.w	9bb0 <SdSpiCard::readRegister(unsigned char, void*)>

00009c04 <SdSpiCard::readCID(CID*)>:
   * \param[out] cid pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) {
    return readRegister(CMD10, cid);
    9c04:	mov	r2, r1
    9c06:	movs	r1, #10
    9c08:	b.w	9bb0 <SdSpiCard::readRegister(unsigned char, void*)>

00009c0c <SdSpiCard::sectorCount()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    9c0c:	push	{r4, r5, lr}
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    9c0e:	ldr	r3, [r0, #0]
    9c10:	ldr	r2, [pc, #140]	; (9ca0 <SdSpiCard::sectorCount()+0x94>)
    9c12:	ldr	r3, [r3, #52]	; 0x34
    9c14:	cmp	r3, r2
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    9c16:	sub	sp, #20
    9c18:	bne.n	9c7a <SdSpiCard::sectorCount()+0x6e>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    9c1a:	mov	r2, sp
    9c1c:	movs	r1, #9
    9c1e:	bl	9bb0 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    9c22:	cbz	r0, 9c34 <SdSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    9c24:	ldrb.w	r3, [sp]
    9c28:	ands.w	r3, r3, #192	; 0xc0
    9c2c:	beq.n	9c38 <SdSpiCard::sectorCount()+0x2c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    9c2e:	cmp	r3, #64	; 0x40
    9c30:	beq.n	9c80 <SdSpiCard::sectorCount()+0x74>
    9c32:	movs	r0, #0
}
    9c34:	add	sp, #20
    9c36:	pop	{r4, r5, pc}
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    9c38:	ldrb.w	r4, [sp, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    9c3c:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    9c40:	ldrb.w	r2, [sp, #7]
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    9c44:	ldrb.w	r0, [sp, #10]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    9c48:	ldrb.w	r1, [sp, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    9c4c:	ldrb.w	r5, [sp, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    9c50:	and.w	r4, r4, #3
    9c54:	lsls	r4, r4, #1
    9c56:	lsls	r2, r2, #2
    9c58:	and.w	r3, r3, #3
    9c5c:	orr.w	r0, r4, r0, lsr #7
    9c60:	and.w	r1, r1, #15
    9c64:	orr.w	r3, r2, r3, lsl #10
    9c68:	add	r0, r1
    9c6a:	orr.w	r3, r3, r5, lsr #6
    9c6e:	adds	r3, #1
    9c70:	subs	r0, #7
    9c72:	lsl.w	r0, r3, r0
    9c76:	add	sp, #20
    9c78:	pop	{r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    9c7a:	mov	r1, sp
    9c7c:	blx	r3
    9c7e:	b.n	9c22 <SdSpiCard::sectorCount()+0x16>
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    9c80:	ldrb.w	r3, [sp, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    9c84:	ldrb.w	r1, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    9c88:	ldrb.w	r0, [sp, #8]
    9c8c:	adds	r2, r3, #1
    9c8e:	and.w	r3, r1, #63	; 0x3f
    9c92:	add.w	r3, r2, r3, lsl #16
    9c96:	add.w	r0, r3, r0, lsl #8
    9c9a:	lsls	r0, r0, #10
}
    9c9c:	add	sp, #20
    9c9e:	pop	{r4, r5, pc}
    9ca0:	.word	0x00009bfd

00009ca4 <SdSpiCard::readStart(unsigned long)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    9ca4:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    9ca6:	ldr	r3, [r0, #0]
    9ca8:	ldr	r5, [pc, #68]	; (9cf0 <SdSpiCard::readStart(unsigned long)+0x4c>)
    9caa:	ldr	r3, [r3, #64]	; 0x40
    9cac:	cmp	r3, r5
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    9cae:	sub	sp, #12
    9cb0:	mov	r4, r0
    9cb2:	mov	r2, r1
    9cb4:	bne.n	9ce6 <SdSpiCard::readStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    9cb6:	ldrb	r0, [r0, #22]
  if (type() != SD_CARD_TYPE_SDHC) {
    9cb8:	cmp	r0, #3
    sector <<= 9;
    9cba:	it	ne
    9cbc:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD18, sector)) {
    9cbe:	movs	r1, #18
    9cc0:	mov	r0, r4
    9cc2:	bl	9ae0 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    9cc6:	cbz	r0, 9ce0 <SdSpiCard::readStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    9cc8:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    9cca:	movs	r3, #12
    9ccc:	strb	r3, [r4, #19]
    9cce:	cbnz	r0, 9cd4 <SdSpiCard::readStart(unsigned long)+0x30>
  return true;

fail:
  spiStop();
  return false;
}
    9cd0:	add	sp, #12
    9cd2:	pop	{r4, r5, pc}
    9cd4:	mov	r0, r4
    9cd6:	bl	99c0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    9cda:	movs	r0, #0
    9cdc:	add	sp, #12
    9cde:	pop	{r4, r5, pc}
  if (cardCommand(CMD18, sector)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
    9ce0:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    9ce2:	add	sp, #12
    9ce4:	pop	{r4, r5, pc}
    9ce6:	str	r1, [sp, #4]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    9ce8:	blx	r3
    9cea:	ldr	r2, [sp, #4]
    9cec:	b.n	9cb8 <SdSpiCard::readStart(unsigned long)+0x14>
    9cee:	nop
    9cf0:	.word	0x00009909

00009cf4 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    9cf4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9cf8:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    9cfa:	ldrb	r1, [r0, #16]
    9cfc:	cmp	r1, #1
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    9cfe:	mov	r6, r0
    9d00:	mov	r4, r2
    9d02:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    9d04:	beq.n	9d16 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!syncDevice()) {
    9d06:	ldr	r3, [r6, #0]
    9d08:	mov	r0, r6
    9d0a:	ldr	r3, [r3, #20]
    9d0c:	blx	r3
    9d0e:	cbnz	r0, 9d4a <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x56>
      return false;
    9d10:	movs	r0, #0
    9d12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    9d16:	ldr	r3, [r0, #12]
    9d18:	cmp	r3, r5
    9d1a:	bne.n	9d06 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    9d1c:	movs	r5, #0
    9d1e:	cbz	r7, 9d3a <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    if (!readData(dst, 512)) {
    9d20:	mov	r1, r4
    9d22:	mov.w	r2, #512	; 0x200
    9d26:	mov	r0, r6
    9d28:	bl	9a24 <SdSpiCard::readData(unsigned char*, unsigned int)>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    9d2c:	adds	r5, #1
    9d2e:	add.w	r4, r4, #512	; 0x200
    if (!readData(dst, 512)) {
    9d32:	cmp	r0, #0
    9d34:	beq.n	9d10 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    9d36:	cmp	r7, r5
    9d38:	bne.n	9d20 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    9d3a:	ldr	r3, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    9d3c:	ldrb	r2, [r6, #17]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    9d3e:	add	r7, r3
    9d40:	str	r7, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    9d42:	cbnz	r2, 9d5e <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x6a>
    9d44:	movs	r0, #1
    9d46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    if (!syncDevice()) {
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
    9d4a:	mov	r1, r5
    9d4c:	mov	r0, r6
    9d4e:	bl	9ca4 <SdSpiCard::readStart(unsigned long)>
    9d52:	cmp	r0, #0
    9d54:	beq.n	9d10 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    9d56:	movs	r3, #1
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    }
    m_curSector = sector;
    9d58:	str	r5, [r6, #12]
    m_curState = READ_STATE;
    9d5a:	strb	r3, [r6, #16]
    9d5c:	b.n	9d1c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    9d5e:	ldr	r3, [r6, #0]
    9d60:	mov	r0, r6
    9d62:	ldr	r3, [r3, #20]
      return false;
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
    9d64:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    9d68:	bx	r3
    9d6a:	nop

00009d6c <SdSpiCard::readStop()>:
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    9d6c:	push	{r3, r4, r5, lr}
  if (cardCommand(CMD12, 0)) {
    9d6e:	movs	r2, #0
    9d70:	movs	r1, #12
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    9d72:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    9d74:	bl	9ae0 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    9d78:	ldrb	r4, [r5, #20]
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    9d7a:	cbz	r0, 9d86 <SdSpiCard::readStop()+0x1a>
    9d7c:	movs	r3, #9
    9d7e:	strb	r3, [r5, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    9d80:	cbnz	r4, 9d98 <SdSpiCard::readStop()+0x2c>
  return true;

fail:
  spiStop();
  return false;
}
    9d82:	mov	r0, r4
    9d84:	pop	{r3, r4, r5, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    9d86:	cbnz	r4, 9d8e <SdSpiCard::readStop()+0x22>
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
  return true;
    9d88:	movs	r4, #1

fail:
  spiStop();
  return false;
}
    9d8a:	mov	r0, r4
    9d8c:	pop	{r3, r4, r5, pc}
    9d8e:	mov	r0, r5
    9d90:	bl	99c0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    9d94:	mov	r0, r4
    9d96:	pop	{r3, r4, r5, pc}
    9d98:	mov	r0, r5
    9d9a:	movs	r4, #0
    9d9c:	bl	99c0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    9da0:	mov	r0, r4
    9da2:	pop	{r3, r4, r5, pc}

00009da4 <SdSpiCard::writeStart(unsigned long)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    9da4:	push	{r4, r5, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    9da6:	ldr	r3, [r0, #0]
    9da8:	ldr	r5, [pc, #68]	; (9df0 <SdSpiCard::writeStart(unsigned long)+0x4c>)
    9daa:	ldr	r3, [r3, #64]	; 0x40
    9dac:	cmp	r3, r5
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    9dae:	sub	sp, #12
    9db0:	mov	r4, r0
    9db2:	mov	r2, r1
    9db4:	bne.n	9de6 <SdSpiCard::writeStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    9db6:	ldrb	r0, [r0, #22]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    9db8:	cmp	r0, #3
    sector <<= 9;
    9dba:	it	ne
    9dbc:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD25, sector)) {
    9dbe:	movs	r1, #25
    9dc0:	mov	r0, r4
    9dc2:	bl	9ae0 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    9dc6:	cbz	r0, 9de0 <SdSpiCard::writeStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    9dc8:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    9dca:	movs	r3, #14
    9dcc:	strb	r3, [r4, #19]
    9dce:	cbnz	r0, 9dd4 <SdSpiCard::writeStart(unsigned long)+0x30>
  return true;

fail:
  spiStop();
  return false;
}
    9dd0:	add	sp, #12
    9dd2:	pop	{r4, r5, pc}
    9dd4:	mov	r0, r4
    9dd6:	bl	99c0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    9dda:	movs	r0, #0
    9ddc:	add	sp, #12
    9dde:	pop	{r4, r5, pc}
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
    9de0:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    9de2:	add	sp, #12
    9de4:	pop	{r4, r5, pc}
    9de6:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    9de8:	blx	r3
    9dea:	ldr	r2, [sp, #4]
    9dec:	b.n	9db8 <SdSpiCard::writeStart(unsigned long)+0x14>
    9dee:	nop
    9df0:	.word	0x00009909

00009df4 <SdSpiCard::erase(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    9df4:	push	{r4, r5, r6, r7, lr}
  csd_t csd;
  if (!readCSD(&csd)) {
    9df6:	ldr	r3, [r0, #0]
    9df8:	ldr	r7, [pc, #172]	; (9ea8 <SdSpiCard::erase(unsigned long, unsigned long)+0xb4>)
    9dfa:	ldr	r3, [r3, #52]	; 0x34
    9dfc:	cmp	r3, r7
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    9dfe:	sub	sp, #20
    9e00:	mov	r4, r0
    9e02:	mov	r5, r1
    9e04:	mov	r6, r2
    9e06:	bne.n	9e64 <SdSpiCard::erase(unsigned long, unsigned long)+0x70>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    9e08:	mov	r2, sp
    9e0a:	movs	r1, #9
    9e0c:	bl	9bb0 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  if (!readCSD(&csd)) {
    9e10:	cbz	r0, 9e38 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    9e12:	ldrb.w	r3, [sp, #10]
    9e16:	lsls	r2, r3, #25
    9e18:	bpl.n	9e48 <SdSpiCard::erase(unsigned long, unsigned long)+0x54>
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    9e1a:	ldrb	r3, [r4, #22]
    9e1c:	cmp	r3, #3
    firstSector <<= 9;
    9e1e:	it	ne
    9e20:	lslne	r5, r5, #9
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
    9e22:	mov	r2, r5
    9e24:	mov.w	r1, #32
    9e28:	mov	r0, r4
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
    9e2a:	it	ne
    9e2c:	lslne	r6, r6, #9
  }
  if (cardCommand(CMD32, firstSector)
    9e2e:	bl	9ae0 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD33, lastSector)
      || cardCommand(CMD38, 0)) {
    9e32:	cbz	r0, 9e6a <SdSpiCard::erase(unsigned long, unsigned long)+0x76>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    9e34:	movs	r3, #37	; 0x25
    9e36:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    9e38:	ldrb	r0, [r4, #20]
    9e3a:	cbz	r0, 9e44 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    9e3c:	mov	r0, r4
    9e3e:	bl	99c0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    9e42:	movs	r0, #0
}
    9e44:	add	sp, #20
    9e46:	pop	{r4, r5, r6, r7, pc}
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    9e48:	and.w	r3, r3, #63	; 0x3f
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    9e4c:	ldrb.w	r1, [sp, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    9e50:	lsls	r3, r3, #1
    9e52:	adds	r2, r6, #1
    9e54:	orr.w	r3, r3, r1, lsr #7
    9e58:	orrs	r2, r5
    9e5a:	tst	r3, r2
    9e5c:	beq.n	9e1a <SdSpiCard::erase(unsigned long, unsigned long)+0x26>
    9e5e:	movs	r3, #38	; 0x26
    9e60:	strb	r3, [r4, #19]
    9e62:	b.n	9e38 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    9e64:	mov	r1, sp
    9e66:	blx	r3
    9e68:	b.n	9e10 <SdSpiCard::erase(unsigned long, unsigned long)+0x1c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
      || cardCommand(CMD33, lastSector)
    9e6a:	mov	r2, r6
    9e6c:	movs	r1, #33	; 0x21
    9e6e:	mov	r0, r4
    9e70:	bl	9ae0 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    9e74:	cmp	r0, #0
    9e76:	bne.n	9e34 <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
      || cardCommand(CMD38, 0)) {
    9e78:	mov	r2, r0
    9e7a:	movs	r1, #38	; 0x26
    9e7c:	mov	r0, r4
    9e7e:	bl	9ae0 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    9e82:	cmp	r0, #0
    9e84:	bne.n	9e34 <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
    error(SD_CARD_ERROR_ERASE);
    goto fail;
  }
  DBG_BEGIN_TIME(DBG_ERASE_BUSY);
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    9e86:	movw	r1, #10000	; 0x2710
    9e8a:	mov	r0, r4
    9e8c:	bl	9aa4 <SdSpiCard::waitNotBusy(unsigned short)>
    9e90:	cbnz	r0, 9e98 <SdSpiCard::erase(unsigned long, unsigned long)+0xa4>
    9e92:	movs	r3, #39	; 0x27
    9e94:	strb	r3, [r4, #19]
    9e96:	b.n	9e38 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    9e98:	ldrb	r5, [r4, #20]
    9e9a:	cmp	r5, #0
    9e9c:	beq.n	9e44 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    9e9e:	mov	r0, r4
    9ea0:	bl	99c0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_ERASE_BUSY);
  spiStop();
  return true;
    9ea4:	mov	r0, r5
    9ea6:	b.n	9e44 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    9ea8:	.word	0x00009bfd

00009eac <SdSpiCard::writeStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    9eac:	push	{r4, r5, r6, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    9eae:	mov.w	r1, #600	; 0x258
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    9eb2:	mov	r5, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    9eb4:	bl	9aa4 <SdSpiCard::waitNotBusy(unsigned short)>
    9eb8:	mov	r6, r0
    9eba:	cbnz	r0, 9ed4 <SdSpiCard::writeStop()+0x28>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    9ebc:	ldrb	r4, [r5, #20]
    9ebe:	movs	r3, #30
    9ec0:	strb	r3, [r5, #19]
    9ec2:	cbnz	r4, 9ec8 <SdSpiCard::writeStop()+0x1c>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    9ec4:	mov	r0, r4
    9ec6:	pop	{r4, r5, r6, pc}
    9ec8:	mov	r0, r5
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
    9eca:	mov	r4, r6
    9ecc:	bl	99c0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
}
    9ed0:	mov	r0, r4
    9ed2:	pop	{r4, r5, r6, pc}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    9ed4:	movs	r1, #253	; 0xfd
    9ed6:	adds	r0, r5, #4
    9ed8:	bl	b06c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    9edc:	ldrb	r4, [r5, #20]
    9ede:	cbnz	r4, 9ee6 <SdSpiCard::writeStop()+0x3a>
    9ee0:	mov	r4, r6

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    9ee2:	mov	r0, r4
    9ee4:	pop	{r4, r5, r6, pc}
    9ee6:	mov	r0, r5
    9ee8:	bl	99c0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    9eec:	b.n	9ec4 <SdSpiCard::writeStop()+0x18>
    9eee:	nop

00009ef0 <SdSpiCard::syncDevice()>:
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    9ef0:	push	{r4, lr}
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    9ef2:	ldrb	r3, [r0, #16]
    9ef4:	cmp	r3, #1
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    9ef6:	mov	r4, r0
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    9ef8:	beq.n	9f06 <SdSpiCard::syncDevice()+0x16>
    if (!SdSpiCard::readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    9efa:	cmp	r3, #2
    9efc:	beq.n	9f12 <SdSpiCard::syncDevice()+0x22>
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    9efe:	movs	r3, #0
    9f00:	strb	r3, [r4, #16]
#endif  // ENABLE_DEDICATED_SPI
  return true;
    9f02:	movs	r0, #1
    9f04:	pop	{r4, pc}
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    if (!SdSpiCard::readStop()) {
    9f06:	bl	9d6c <SdSpiCard::readStop()>
    9f0a:	cmp	r0, #0
    9f0c:	bne.n	9efe <SdSpiCard::syncDevice()+0xe>
      return false;
    9f0e:	movs	r0, #0
    9f10:	pop	{r4, pc}
    }
  } else if (m_curState == WRITE_STATE) {
    if (!SdSpiCard::writeStop()) {
    9f12:	bl	9eac <SdSpiCard::writeStop()>
    9f16:	cmp	r0, #0
    9f18:	bne.n	9efe <SdSpiCard::syncDevice()+0xe>
    9f1a:	b.n	9f0e <SdSpiCard::syncDevice()+0x1e>

00009f1c <SdSpiCard::writeData(unsigned char, unsigned char const*)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
    9f1c:	push	{r4, r5, r6, lr}
    9f1e:	adds	r4, r0, #4
    9f20:	mov	r6, r2
    9f22:	mov	r5, r0
    9f24:	mov	r0, r4
    9f26:	bl	b06c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver.send(buf, n);
    9f2a:	mov.w	r2, #512	; 0x200
    9f2e:	mov	r1, r6
    9f30:	mov	r0, r4
    9f32:	bl	b084 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    9f36:	mov	r0, r4
    9f38:	movs	r1, #255	; 0xff
    9f3a:	bl	b06c <SdSpiArduinoDriver::send(unsigned char)>
    9f3e:	mov	r0, r4
    9f40:	movs	r1, #255	; 0xff
    9f42:	bl	b06c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    9f46:	mov	r0, r4
    9f48:	bl	b030 <SdSpiArduinoDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    9f4c:	and.w	r3, r0, #31
    9f50:	cmp	r3, #5
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    9f52:	strb	r0, [r5, #21]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    9f54:	beq.n	9f6a <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x4e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    9f56:	ldrb	r0, [r5, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    9f58:	movs	r3, #31
    9f5a:	strb	r3, [r5, #19]
    9f5c:	cbnz	r0, 9f60 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
  return true;

fail:
  spiStop();
  return false;
}
    9f5e:	pop	{r4, r5, r6, pc}
    9f60:	mov	r0, r5
    9f62:	bl	99c0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  }
  return true;

fail:
  spiStop();
  return false;
    9f66:	movs	r0, #0
    9f68:	pop	{r4, r5, r6, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE_DATA);
    goto fail;
  }
  return true;
    9f6a:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    9f6c:	pop	{r4, r5, r6, pc}
    9f6e:	nop

00009f70 <SdSpiCard::writeData(unsigned char const*)>:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    9f70:	push	{r3, r4, r5, lr}
    9f72:	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    9f74:	mov.w	r1, #600	; 0x258
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    9f78:	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    9f7a:	bl	9aa4 <SdSpiCard::waitNotBusy(unsigned short)>
    9f7e:	cbnz	r0, 9f92 <SdSpiCard::writeData(unsigned char const*)+0x22>
    9f80:	movs	r3, #35	; 0x23
    9f82:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    9f84:	ldrb	r0, [r4, #20]
    9f86:	cbz	r0, 9f90 <SdSpiCard::writeData(unsigned char const*)+0x20>
    9f88:	mov	r0, r4
    9f8a:	bl	99c0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  }
  return true;

fail:
  spiStop();
  return false;
    9f8e:	movs	r0, #0
}
    9f90:	pop	{r3, r4, r5, pc}
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    9f92:	mov	r2, r5
    9f94:	movs	r1, #252	; 0xfc
    9f96:	mov	r0, r4
    9f98:	bl	9f1c <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    9f9c:	cmp	r0, #0
    9f9e:	beq.n	9f84 <SdSpiCard::writeData(unsigned char const*)+0x14>
  return true;

fail:
  spiStop();
  return false;
}
    9fa0:	pop	{r3, r4, r5, pc}
    9fa2:	nop

00009fa4 <sdIrs()>:
#endif  // USE_DEBUG_MODE
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
    9fa4:	push	{r4}
  SDHC_IRQSIGEN = 0;
    9fa6:	ldr	r4, [pc, #28]	; (9fc4 <sdIrs()+0x20>)
  m_irqstat = SDHC_IRQSTAT;
    9fa8:	ldr	r2, [pc, #28]	; (9fc8 <sdIrs()+0x24>)
    9faa:	ldr	r1, [pc, #32]	; (9fcc <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    9fac:	ldr	r0, [pc, #32]	; (9fd0 <sdIrs()+0x2c>)
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    9fae:	movs	r3, #0
    9fb0:	str	r3, [r4, #0]
  m_irqstat = SDHC_IRQSTAT;
    9fb2:	ldr	r4, [r2, #0]
    9fb4:	str	r4, [r1, #0]
  SDHC_IRQSTAT = m_irqstat;
    9fb6:	ldr	r1, [r1, #0]
    9fb8:	str	r1, [r2, #0]
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
}
    9fba:	ldr.w	r4, [sp], #4
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    9fbe:	strb	r3, [r0, #0]
}
    9fc0:	bx	lr
    9fc2:	nop
    9fc4:	.word	0x400b1038
    9fc8:	.word	0x400b1030
    9fcc:	.word	0x1fff1f58
    9fd0:	.word	0x1fff1f70

00009fd4 <isBusyCommandComplete()>:
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    9fd4:	ldr	r3, [pc, #12]	; (9fe4 <isBusyCommandComplete()+0x10>)
    9fd6:	ldr	r0, [pc, #16]	; (9fe8 <isBusyCommandComplete()+0x14>)
    9fd8:	ldr	r3, [r3, #0]
    9fda:	ands	r0, r3
}
    9fdc:	clz	r0, r0
    9fe0:	lsrs	r0, r0, #5
    9fe2:	bx	lr
    9fe4:	.word	0x400b1030
    9fe8:	.word	0x000f0001

00009fec <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    9fec:	ldr	r3, [pc, #8]	; (9ff8 <isBusyCommandInhibit()+0xc>)
    9fee:	ldr	r0, [r3, #0]
}
    9ff0:	and.w	r0, r0, #1
    9ff4:	bx	lr
    9ff6:	nop
    9ff8:	.word	0x400b1024

00009ffc <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    9ffc:	ldr	r3, [pc, #4]	; (a004 <isBusyDMA()+0x8>)
    9ffe:	ldrb	r0, [r3, #0]
}
    a000:	bx	lr
    a002:	nop
    a004:	.word	0x1fff1f70

0000a008 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    a008:	ldr	r3, [pc, #12]	; (a018 <isBusyFifoRead()+0x10>)
    a00a:	ldr	r0, [r3, #0]
    a00c:	eor.w	r0, r0, #2048	; 0x800
}
    a010:	ubfx	r0, r0, #11, #1
    a014:	bx	lr
    a016:	nop
    a018:	.word	0x400b1024

0000a01c <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    a01c:	ldr	r3, [pc, #12]	; (a02c <isBusyFifoWrite()+0x10>)
    a01e:	ldr	r0, [r3, #0]
    a020:	eor.w	r0, r0, #1024	; 0x400
}
    a024:	ubfx	r0, r0, #10, #1
    a028:	bx	lr
    a02a:	nop
    a02c:	.word	0x400b1024

0000a030 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    a030:	ldr	r3, [pc, #12]	; (a040 <isBusyTransferComplete()+0x10>)
    a032:	ldr	r0, [pc, #16]	; (a044 <isBusyTransferComplete()+0x14>)
    a034:	ldr	r3, [r3, #0]
    a036:	ands	r0, r3
}
    a038:	clz	r0, r0
    a03c:	lsrs	r0, r0, #5
    a03e:	bx	lr
    a040:	.word	0x400b1030
    a044:	.word	0x117f0002

0000a048 <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    a048:	mov.w	r2, #1000	; 0x3e8
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    a04c:	ldr	r3, [pc, #176]	; (a100 <setSdclk(unsigned long)+0xb8>)
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    a04e:	mul.w	r0, r2, r0
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    a052:	cmp	r0, r3
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    a054:	push	{r4, r5, r6, r7}
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    a056:	bhi.n	a0f0 <setSdclk(unsigned long)+0xa8>
    a058:	ldr	r5, [pc, #168]	; (a104 <setSdclk(unsigned long)+0xbc>)
    a05a:	movs	r2, #8
    a05c:	movs	r1, #1
    sdclkfs <<= 1;
    a05e:	lsls	r1, r1, #1
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    a060:	lsls	r3, r1, #4
    a062:	udiv	r3, r5, r3
    a066:	cmp	r0, r3
    a068:	ldr	r4, [pc, #152]	; (a104 <setSdclk(unsigned long)+0xbc>)
    a06a:	bcs.n	a0e8 <setSdclk(unsigned long)+0xa0>
    a06c:	subs	r2, #1
    a06e:	bne.n	a05e <setSdclk(unsigned long)+0x16>
    a070:	udiv	r4, r4, r1
    a074:	lsrs	r3, r1, #1
    a076:	lsls	r7, r3, #8
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    a078:	cmp	r0, r4
    a07a:	bcs.n	a0f8 <setSdclk(unsigned long)+0xb0>
    a07c:	ldr	r6, [pc, #132]	; (a104 <setSdclk(unsigned long)+0xbc>)
    a07e:	lsls	r3, r1, #1
    a080:	movs	r2, #1
    a082:	b.n	a086 <setSdclk(unsigned long)+0x3e>
    a084:	mov	r3, r4
    a086:	udiv	r4, r6, r3
    a08a:	cmp	r0, r4
    dvs++;
    a08c:	add.w	r5, r2, #1
    a090:	add.w	r4, r3, r1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    a094:	bcs.n	a0e4 <setSdclk(unsigned long)+0x9c>
    a096:	cmp	r5, #16
    a098:	mov	r2, r5
    a09a:	bne.n	a084 <setSdclk(unsigned long)+0x3c>
    a09c:	movs	r2, #240	; 0xf0
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    a09e:	ldr	r6, [pc, #104]	; (a108 <setSdclk(unsigned long)+0xc0>)
  sdclkfs >>= 1;
  dvs--;
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    a0a0:	ldr	r4, [pc, #104]	; (a10c <setSdclk(unsigned long)+0xc4>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    a0a2:	ldr	r0, [pc, #96]	; (a104 <setSdclk(unsigned long)+0xbc>)

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    a0a4:	ldr	r1, [pc, #104]	; (a110 <setSdclk(unsigned long)+0xc8>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    a0a6:	mov.w	r5, #1000	; 0x3e8
    a0aa:	mul.w	r3, r5, r3
    a0ae:	udiv	r3, r0, r3
    a0b2:	str	r3, [r6, #0]
  sdclkfs >>= 1;
  dvs--;
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    a0b4:	ldr	r3, [r4, #0]
    a0b6:	bic.w	r3, r3, #8
    a0ba:	str	r3, [r4, #0]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    a0bc:	ldr	r0, [r4, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    a0be:	bic.w	r3, r0, #1044480	; 0xff000
    a0c2:	bic.w	r3, r3, #4080	; 0xff0
    a0c6:	orr.w	r3, r3, #917504	; 0xe0000
    a0ca:	orrs	r3, r7
    a0cc:	orrs	r2, r3
    a0ce:	str	r2, [r4, #0]

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    a0d0:	ldr	r3, [r1, #0]
    a0d2:	lsls	r3, r3, #28
    a0d4:	bpl.n	a0d0 <setSdclk(unsigned long)+0x88>
  }

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
    a0d6:	ldr	r2, [pc, #52]	; (a10c <setSdclk(unsigned long)+0xc4>)
    a0d8:	ldr	r3, [r2, #0]
    a0da:	orr.w	r3, r3, #8
    a0de:	str	r3, [r2, #0]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    a0e0:	pop	{r4, r5, r6, r7}
    a0e2:	bx	lr
    a0e4:	lsls	r2, r2, #4
    a0e6:	b.n	a09e <setSdclk(unsigned long)+0x56>
    a0e8:	udiv	r4, r4, r1
    a0ec:	lsls	r7, r1, #7
    a0ee:	b.n	a078 <setSdclk(unsigned long)+0x30>
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    a0f0:	ldr	r4, [pc, #16]	; (a104 <setSdclk(unsigned long)+0xbc>)
    a0f2:	movs	r7, #0
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
    a0f4:	movs	r1, #1
    a0f6:	b.n	a078 <setSdclk(unsigned long)+0x30>
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    a0f8:	mov	r3, r1
    a0fa:	movs	r2, #0
    a0fc:	b.n	a09e <setSdclk(unsigned long)+0x56>
    a0fe:	nop
    a100:	.word	0x005b8d7f
    a104:	.word	0x05b8d800
    a108:	.word	0x1fff1f74
    a10c:	.word	0x400b102c
    a110:	.word	0x400b1024

0000a114 <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    a114:	ldr	r3, [pc, #4]	; (a11c <SdioCard::errorCode() const+0x8>)
}
    a116:	ldrb	r0, [r3, #0]
    a118:	bx	lr
    a11a:	nop
    a11c:	.word	0x1fff09c0

0000a120 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    a120:	ldr	r3, [pc, #4]	; (a128 <SdioCard::errorData() const+0x8>)
    a122:	ldr	r0, [r3, #0]
}
    a124:	bx	lr
    a126:	nop
    a128:	.word	0x1fff1f58

0000a12c <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    a12c:	push	{r4, r5}
  memcpy(cid, &m_cid, 16);
    a12e:	ldr	r4, [pc, #20]	; (a144 <SdioCard::readCID(CID*)+0x18>)
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    a130:	mov	r5, r1
  memcpy(cid, &m_cid, 16);
    a132:	ldmia	r4!, {r0, r1, r2, r3}
    a134:	str	r0, [r5, #0]
    a136:	str	r1, [r5, #4]
    a138:	str	r2, [r5, #8]
    a13a:	str	r3, [r5, #12]
  return true;
}
    a13c:	movs	r0, #1
    a13e:	pop	{r4, r5}
    a140:	bx	lr
    a142:	nop
    a144:	.word	0x1fff1f38

0000a148 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    a148:	push	{r4, r5}
  memcpy(csd, &m_csd, 16);
    a14a:	ldr	r4, [pc, #20]	; (a160 <SdioCard::readCSD(csd_t*)+0x18>)
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    a14c:	mov	r5, r1
  memcpy(csd, &m_csd, 16);
    a14e:	ldmia	r4!, {r0, r1, r2, r3}
    a150:	str	r0, [r5, #0]
    a152:	str	r1, [r5, #4]
    a154:	str	r2, [r5, #8]
    a156:	str	r3, [r5, #12]
  return true;
}
    a158:	movs	r0, #1
    a15a:	pop	{r4, r5}
    a15c:	bx	lr
    a15e:	nop
    a160:	.word	0x1fff1f60

0000a164 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    a164:	ldr	r3, [pc, #8]	; (a170 <SdioCard::readOCR(unsigned long*)+0xc>)
    a166:	ldr	r3, [r3, #0]
    a168:	str	r3, [r1, #0]
  return true;
}
    a16a:	movs	r0, #1
    a16c:	bx	lr
    a16e:	nop
    a170:	.word	0x1fff1f50

0000a174 <SdioCard::~SdioCard()>:
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    a174:	bx	lr
    a176:	nop

0000a178 <waitTimeout(bool (*)())>:
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
    a178:	push	{r3, r4, r5, r6, r7, lr}
    a17a:	mov	r5, r0
  uint32_t m = micros();
    a17c:	bl	b604 <micros>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    a180:	ldr	r7, [pc, #24]	; (a19c <waitTimeout(bool (*)())+0x24>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    a182:	mov	r6, r0
    a184:	b.n	a190 <waitTimeout(bool (*)())+0x18>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    a186:	bl	b604 <micros>
    a18a:	subs	r0, r0, r6
    a18c:	cmp	r0, r7
    a18e:	bhi.n	a198 <waitTimeout(bool (*)())+0x20>
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    a190:	blx	r5
    a192:	mov	r4, r0
    a194:	cmp	r0, #0
    a196:	bne.n	a186 <waitTimeout(bool (*)())+0xe>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      return true;
    }
  }
  return false;  // Caller will set errorCode.
}
    a198:	mov	r0, r4
    a19a:	pop	{r3, r4, r5, r6, r7, pc}
    a19c:	.word	0x000f4240

0000a1a0 <yieldTimeout(bool (*)())>:
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    a1a0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    a1a4:	ldr.w	r8, [pc, #64]	; a1e8 <yieldTimeout(bool (*)())+0x48>
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    a1a8:	ldr	r7, [pc, #56]	; (a1e4 <yieldTimeout(bool (*)())+0x44>)
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    a1aa:	str.w	r0, [r8]
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    a1ae:	mov	r5, r0
  m_busyFcn = fcn;
  uint32_t m = micros();
    a1b0:	bl	b604 <micros>
    a1b4:	mov	r6, r0
    a1b6:	b.n	a1c6 <yieldTimeout(bool (*)())+0x26>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    a1b8:	bl	b604 <micros>
    a1bc:	subs	r0, r0, r6
    a1be:	cmp	r0, r7
    a1c0:	bhi.n	a1d8 <yieldTimeout(bool (*)())+0x38>
  Particle.process();
}
#elif defined(ARDUINO)
inline void SysCall::yield() {
  // Use the external Arduino yield() function.
  ::yield();
    a1c2:	bl	c5e0 <yield>
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    a1c6:	blx	r5
    a1c8:	mov	r4, r0
    a1ca:	cmp	r0, #0
    a1cc:	bne.n	a1b8 <yieldTimeout(bool (*)())+0x18>
      m_busyFcn = 0;
      return true;
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
    a1ce:	str.w	r0, [r8]
  return false;  // Caller will set errorCode.
}
    a1d2:	mov	r0, r4
    a1d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    a1d8:	movs	r3, #0
    a1da:	str.w	r3, [r8]
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    a1de:	mov	r0, r4
    a1e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a1e4:	.word	0x000f4240
    a1e8:	.word	0x1fff1f48

0000a1ec <SdioCard::~SdioCard()>:
    a1ec:	push	{r4, lr}
    a1ee:	movs	r1, #12
    a1f0:	mov	r4, r0
    a1f2:	bl	c9a8 <operator delete(void*, unsigned int)>
    a1f6:	mov	r0, r4
    a1f8:	pop	{r4, pc}
    a1fa:	nop

0000a1fc <SdioCard::type() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
    a1fc:	ldr	r3, [pc, #20]	; (a214 <SdioCard::type() const+0x18>)
    a1fe:	ldrb	r3, [r3, #0]
    a200:	cbz	r3, a210 <SdioCard::type() const+0x14>
    a202:	ldr	r3, [pc, #20]	; (a218 <SdioCard::type() const+0x1c>)
    a204:	ldrb	r3, [r3, #0]
    a206:	cmp	r3, #0
    a208:	ite	ne
    a20a:	movne	r0, #3
    a20c:	moveq	r0, #2
    a20e:	bx	lr
    a210:	movs	r0, #1
}
    a212:	bx	lr
    a214:	.word	0x1fff1f34
    a218:	.word	0x1fff1f4c

0000a21c <cardCommand(unsigned long, unsigned long)>:
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    a21c:	push	{r3, r4, r5, lr}
    a21e:	mov	r4, r0
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    a220:	ldr	r0, [pc, #60]	; (a260 <cardCommand(unsigned long, unsigned long)+0x44>)
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    a222:	mov	r5, r1
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    a224:	bl	a178 <waitTimeout(bool (*)())>
    a228:	cbz	r0, a22e <cardCommand(unsigned long, unsigned long)+0x12>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    a22a:	movs	r0, #0
    a22c:	pop	{r3, r4, r5, pc}
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    a22e:	ldr	r2, [pc, #52]	; (a264 <cardCommand(unsigned long, unsigned long)+0x48>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    a230:	ldr	r3, [pc, #52]	; (a268 <cardCommand(unsigned long, unsigned long)+0x4c>)
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    a232:	str	r5, [r2, #0]
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
  if (waitTimeout(isBusyCommandComplete)) {
    a234:	ldr	r0, [pc, #52]	; (a26c <cardCommand(unsigned long, unsigned long)+0x50>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    a236:	str	r4, [r3, #0]
  if (waitTimeout(isBusyCommandComplete)) {
    a238:	bl	a178 <waitTimeout(bool (*)())>
    a23c:	cmp	r0, #0
    a23e:	bne.n	a22a <cardCommand(unsigned long, unsigned long)+0xe>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
    a240:	ldr	r2, [pc, #44]	; (a270 <cardCommand(unsigned long, unsigned long)+0x54>)
    a242:	ldr	r3, [pc, #48]	; (a274 <cardCommand(unsigned long, unsigned long)+0x58>)
    a244:	ldr	r1, [r2, #0]
    a246:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    a248:	ldr	r1, [r3, #0]
    a24a:	str	r1, [r2, #0]

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    a24c:	ldr	r2, [r3, #0]
    a24e:	lsls	r2, r2, #31
    a250:	bpl.n	a22a <cardCommand(unsigned long, unsigned long)+0xe>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    a252:	ldr	r3, [r3, #0]
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    a254:	tst.w	r3, #983040	; 0xf0000
    a258:	bne.n	a22a <cardCommand(unsigned long, unsigned long)+0xe>
    a25a:	movs	r0, #1
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
    a25c:	pop	{r3, r4, r5, pc}
    a25e:	nop
    a260:	.word	0x00009fed
    a264:	.word	0x400b1008
    a268:	.word	0x400b100c
    a26c:	.word	0x00009fd5
    a270:	.word	0x400b1030
    a274:	.word	0x1fff1f58

0000a278 <SdioCard::status()>:
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
    a278:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    a27a:	ldr	r3, [pc, #16]	; (a28c <SdioCard::status()+0x14>)
    a27c:	ldr	r0, [pc, #16]	; (a290 <SdioCard::status()+0x18>)
    a27e:	ldr	r1, [r3, #0]
    a280:	bl	a21c <cardCommand(unsigned long, unsigned long)>
    a284:	cbz	r0, a28a <SdioCard::status()+0x12>
    a286:	ldr	r3, [pc, #12]	; (a294 <SdioCard::status()+0x1c>)
    a288:	ldr	r0, [r3, #0]
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
    a28a:	pop	{r3, pc}
    a28c:	.word	0x1fff1f54
    a290:	.word	0x0d1a0000
    a294:	.word	0x400b1010

0000a298 <readReg16(unsigned long, void*)>:
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    a298:	push	{r4, r5, lr}
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    a29a:	ldr	r3, [pc, #84]	; (a2f0 <readReg16(unsigned long, void*)+0x58>)
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    a29c:	sub	sp, #20
    a29e:	mov	r5, r1
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    a2a0:	ldr	r1, [r3, #0]
    a2a2:	bl	a21c <cardCommand(unsigned long, unsigned long)>
    a2a6:	cbz	r0, a2ea <readReg16(unsigned long, void*)+0x52>
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    a2a8:	ldr	r2, [pc, #72]	; (a2f4 <readReg16(unsigned long, void*)+0x5c>)
    a2aa:	ldr	r3, [pc, #76]	; (a2f8 <readReg16(unsigned long, void*)+0x60>)
    a2ac:	ldr	r2, [r2, #0]
    a2ae:	str	r2, [sp, #0]
    a2b0:	ldr	r1, [r3, #0]
    a2b2:	str	r1, [sp, #4]
    a2b4:	ldr	r1, [r3, #4]
    a2b6:	str	r1, [sp, #8]
    a2b8:	adds	r3, #8
    a2ba:	add.w	r4, r5, #15
    a2be:	ldr	r3, [r3, #0]
    a2c0:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    a2c2:	movs	r3, #0
    a2c4:	b.n	a2ca <readReg16(unsigned long, void*)+0x32>
    a2c6:	ldr.w	r2, [r1, #-16]
    d[14 - i] = sr[i/4] >> 8*(i%4);
    a2ca:	and.w	r1, r3, #3
    a2ce:	lsls	r1, r1, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    a2d0:	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    a2d2:	lsrs	r2, r1
    a2d4:	add.w	lr, sp, #16
    a2d8:	bic.w	r1, r3, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    a2dc:	cmp	r3, #15
    a2de:	add	r1, lr
    d[14 - i] = sr[i/4] >> 8*(i%4);
    a2e0:	strb.w	r2, [r4, #-1]!
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    a2e4:	bne.n	a2c6 <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i/4] >> 8*(i%4);
  }
  d[15] = 0;
    a2e6:	movs	r3, #0
    a2e8:	strb	r3, [r5, #15]
  return true;
}
    a2ea:	add	sp, #20
    a2ec:	pop	{r4, r5, pc}
    a2ee:	nop
    a2f0:	.word	0x1fff1f54
    a2f4:	.word	0x400b1010
    a2f8:	.word	0x400b1014

0000a2fc <isBusyCMD13()>:
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
    a2fc:	push	{r3, lr}
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    a2fe:	ldr	r3, [pc, #28]	; (a31c <isBusyCMD13()+0x20>)
    a300:	ldr	r0, [pc, #28]	; (a320 <isBusyCMD13()+0x24>)
    a302:	ldr	r1, [r3, #0]
    a304:	bl	a21c <cardCommand(unsigned long, unsigned long)>
    a308:	cbz	r0, a318 <isBusyCMD13()+0x1c>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    a30a:	ldr	r3, [pc, #24]	; (a324 <isBusyCMD13()+0x28>)
    a30c:	ldr	r0, [r3, #0]
    a30e:	eor.w	r0, r0, #256	; 0x100
    a312:	ubfx	r0, r0, #8, #1
    a316:	pop	{r3, pc}
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
    a318:	movs	r0, #1
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
    a31a:	pop	{r3, pc}
    a31c:	.word	0x1fff1f54
    a320:	.word	0x0d1a0000
    a324:	.word	0x400b1010

0000a328 <SdioCard::isBusy()>:
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    a328:	ldr	r3, [pc, #16]	; (a33c <SdioCard::isBusy()+0x14>)
    a32a:	ldr	r3, [r3, #0]
    a32c:	cbz	r3, a330 <SdioCard::isBusy()+0x8>
    a32e:	bx	r3
    a330:	ldr	r3, [pc, #12]	; (a340 <SdioCard::isBusy()+0x18>)
    a332:	ldrb	r0, [r3, #0]
    a334:	cbnz	r0, a338 <SdioCard::isBusy()+0x10>
}
    a336:	bx	lr
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    a338:	b.w	a2fc <isBusyCMD13()>
    a33c:	.word	0x1fff1f48
    a340:	.word	0x1fff1f5c

0000a344 <waitDmaStatus() [clone .part.6]>:
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    a344:	ldr	r3, [pc, #20]	; (a35c <waitDmaStatus() [clone .part.6]+0x18>)
    a346:	ldr	r0, [r3, #0]
    a348:	ands.w	r0, r0, #2
    a34c:	beq.n	a35a <waitDmaStatus() [clone .part.6]+0x16>
    a34e:	ldr	r3, [r3, #0]
    a350:	ldr	r0, [pc, #12]	; (a360 <waitDmaStatus() [clone .part.6]+0x1c>)
    a352:	ands	r0, r3
    a354:	clz	r0, r0
    a358:	lsrs	r0, r0, #5
}
    a35a:	bx	lr
    a35c:	.word	0x1fff1f58
    a360:	.word	0x117f0000

0000a364 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//------------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    a364:	push	{r3, r4, r5, r6, r7, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
    a366:	lsls	r4, r2, #30
    a368:	bne.n	a36c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8>
    a36a:	cbnz	r3, a37e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a36c:	ldr	r1, [pc, #124]	; (a3ec <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    a36e:	ldr	r3, [pc, #128]	; (a3f0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a370:	movs	r0, #36	; 0x24
  m_errorLine = line;
    a372:	mov.w	r2, #470	; 0x1d6
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a376:	strb	r0, [r1, #0]
  m_errorLine = line;
    a378:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    a37a:	movs	r0, #0
    a37c:	pop	{r3, r4, r5, r6, r7, pc}
    a37e:	mov	r6, r0
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    a380:	ldr	r0, [pc, #112]	; (a3f4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    a382:	mov	r4, r3
    a384:	mov	r7, r1
    a386:	mov	r5, r2
    a388:	bl	a1a0 <yieldTimeout(bool (*)())>
    a38c:	cbnz	r0, a3d6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x72>
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    a38e:	ldr	r1, [pc, #104]	; (a3f8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    a390:	ldr	r2, [pc, #104]	; (a3fc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    a392:	ldr.w	lr, [pc, #128]	; a414 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb0>
    a396:	mov.w	ip, #1
    a39a:	strb.w	ip, [lr]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    a39e:	lsls	r3, r4, #16
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    a3a0:	str	r0, [r1, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    a3a2:	ldr	r4, [pc, #92]	; (a400 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    a3a4:	str	r5, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    a3a6:	ldr	r2, [pc, #92]	; (a404 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    a3a8:	ldr	r1, [pc, #92]	; (a408 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa4>)
    a3aa:	ldr	r0, [pc, #96]	; (a40c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>)
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    a3ac:	orr.w	r3, r3, #512	; 0x200
    a3b0:	str	r3, [r4, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    a3b2:	ldrb	r3, [r2, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    a3b4:	str	r0, [r1, #0]
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    a3b6:	cbnz	r3, a3e6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x82>
    a3b8:	lsls	r1, r7, #9
    a3ba:	mov	r0, r6
    a3bc:	bl	a21c <cardCommand(unsigned long, unsigned long)>
    a3c0:	cmp	r0, #0
    a3c2:	beq.n	a37a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    a3c4:	ldr	r0, [pc, #72]	; (a410 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xac>)
    a3c6:	bl	a1a0 <yieldTimeout(bool (*)())>
    a3ca:	cmp	r0, #0
    a3cc:	bne.n	a37a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    a3ce:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a3d2:	b.w	a344 <waitDmaStatus() [clone .part.6]>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a3d6:	ldr	r1, [pc, #20]	; (a3ec <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    a3d8:	ldr	r3, [pc, #20]	; (a3f0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a3da:	movs	r0, #10
  m_errorLine = line;
    a3dc:	movw	r2, #473	; 0x1d9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a3e0:	strb	r0, [r1, #0]
  m_errorLine = line;
    a3e2:	str	r2, [r3, #0]
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    a3e4:	b.n	a37a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    a3e6:	mov	r1, r7
    a3e8:	b.n	a3ba <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
    a3ea:	nop
    a3ec:	.word	0x1fff09c0
    a3f0:	.word	0x1fff1f78
    a3f4:	.word	0x0000a2fd
    a3f8:	.word	0x1fff1f58
    a3fc:	.word	0x400b1000
    a400:	.word	0x400b1004
    a404:	.word	0x1fff1f4c
    a408:	.word	0x400b1038
    a40c:	.word	0x117f0002
    a410:	.word	0x00009ffd
    a414:	.word	0x1fff1f70

0000a418 <SdioCard::sectorCount()>:
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
}
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
    a418:	push	{r4, r5, r6}
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    a41a:	ldr	r1, [pc, #100]	; (a480 <SdioCard::sectorCount()+0x68>)
    a41c:	ldrb	r3, [r1, #0]
    a41e:	ands.w	r3, r3, #192	; 0xc0
    a422:	beq.n	a448 <SdioCard::sectorCount()+0x30>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    a424:	cmp	r3, #64	; 0x40
    a426:	beq.n	a42e <SdioCard::sectorCount()+0x16>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
    a428:	movs	r0, #0
  return sdCardCapacity(&m_csd);
}
    a42a:	pop	{r4, r5, r6}
    a42c:	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    a42e:	ldrb	r3, [r1, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    a430:	ldrb	r4, [r1, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    a432:	ldrb	r0, [r1, #8]
    a434:	adds	r2, r3, #1
    a436:	and.w	r3, r4, #63	; 0x3f
    a43a:	add.w	r3, r2, r3, lsl #16
    a43e:	add.w	r0, r3, r0, lsl #8
    a442:	lsls	r0, r0, #10
    a444:	pop	{r4, r5, r6}
    a446:	bx	lr
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    a448:	ldrb	r5, [r1, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    a44a:	ldrb	r3, [r1, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    a44c:	ldrb	r2, [r1, #7]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    a44e:	ldrb	r4, [r1, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a450:	ldrb	r6, [r1, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    a452:	ldrb	r0, [r1, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    a454:	and.w	r1, r5, #3
    a458:	lsls	r1, r1, #1
    a45a:	and.w	r3, r3, #3
    a45e:	lsls	r2, r2, #2
    a460:	orr.w	r0, r1, r0, lsr #7
    a464:	orr.w	r3, r2, r3, lsl #10
    a468:	and.w	r1, r4, #15
    a46c:	orr.w	r3, r3, r6, lsr #6
    a470:	add	r0, r1
    a472:	subs	r0, #7
    a474:	adds	r3, #1
    a476:	lsl.w	r0, r3, r0
    a47a:	pop	{r4, r5, r6}
    a47c:	bx	lr
    a47e:	nop
    a480:	.word	0x1fff1f60

0000a484 <SdioCard::erase(unsigned long, unsigned long)>:
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    a484:	push	{r4, r5, r6, lr}
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    a486:	ldr	r6, [pc, #176]	; (a538 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    a488:	ldrb	r3, [r6, #10]
    a48a:	and.w	r0, r3, #64	; 0x40
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    a48e:	mov	r5, r2
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    a490:	cbnz	r0, a4aa <SdioCard::erase(unsigned long, unsigned long)+0x26>
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    a492:	and.w	r3, r3, #63	; 0x3f
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    a496:	ldrb	r2, [r6, #11]
    a498:	and.w	r4, r0, #255	; 0xff
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    a49c:	lsls	r3, r3, #1
    a49e:	adds	r0, r5, #1
    a4a0:	orr.w	r3, r3, r2, lsr #7
    a4a4:	orrs	r0, r1
    a4a6:	tst	r3, r0
    a4a8:	bne.n	a4ee <SdioCard::erase(unsigned long, unsigned long)+0x6a>
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    }
  }
  if (!m_highCapacity) {
    a4aa:	ldr	r3, [pc, #144]	; (a53c <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    a4ac:	ldrb	r3, [r3, #0]
    a4ae:	cbnz	r3, a4b4 <SdioCard::erase(unsigned long, unsigned long)+0x30>
    firstSector <<= 9;
    a4b0:	lsls	r1, r1, #9
    lastSector <<= 9;
    a4b2:	lsls	r5, r5, #9
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    a4b4:	ldr	r0, [pc, #136]	; (a540 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    a4b6:	bl	a21c <cardCommand(unsigned long, unsigned long)>
    a4ba:	mov	r4, r0
    a4bc:	cbnz	r0, a4d0 <SdioCard::erase(unsigned long, unsigned long)+0x4c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a4be:	ldr	r1, [pc, #132]	; (a544 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    a4c0:	ldr	r3, [pc, #132]	; (a548 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a4c2:	movs	r0, #15
  m_errorLine = line;
    a4c4:	mov.w	r2, #692	; 0x2b4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a4c8:	strb	r0, [r1, #0]
  m_errorLine = line;
    a4ca:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    a4cc:	mov	r0, r4
    a4ce:	pop	{r4, r5, r6, pc}
    lastSector <<= 9;
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    a4d0:	mov	r1, r5
    a4d2:	ldr	r0, [pc, #120]	; (a54c <SdioCard::erase(unsigned long, unsigned long)+0xc8>)
    a4d4:	bl	a21c <cardCommand(unsigned long, unsigned long)>
    a4d8:	mov	r4, r0
    a4da:	cbnz	r0, a500 <SdioCard::erase(unsigned long, unsigned long)+0x7c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a4dc:	ldr	r1, [pc, #100]	; (a544 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    a4de:	ldr	r3, [pc, #104]	; (a548 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a4e0:	movs	r0, #16
  m_errorLine = line;
    a4e2:	movw	r2, #695	; 0x2b7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a4e6:	strb	r0, [r1, #0]
  m_errorLine = line;
    a4e8:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    a4ea:	mov	r0, r4
    a4ec:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a4ee:	ldr	r1, [pc, #84]	; (a544 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    a4f0:	ldr	r3, [pc, #84]	; (a548 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a4f2:	movs	r0, #38	; 0x26
  m_errorLine = line;
    a4f4:	mov.w	r2, #684	; 0x2ac
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a4f8:	strb	r0, [r1, #0]
  m_errorLine = line;
    a4fa:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    a4fc:	mov	r0, r4
    a4fe:	pop	{r4, r5, r6, pc}
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    a500:	movs	r1, #0
    a502:	ldr	r0, [pc, #76]	; (a550 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    a504:	bl	a21c <cardCommand(unsigned long, unsigned long)>
    a508:	mov	r4, r0
    a50a:	cbnz	r0, a51c <SdioCard::erase(unsigned long, unsigned long)+0x98>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a50c:	ldr	r1, [pc, #52]	; (a544 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    a50e:	ldr	r3, [pc, #56]	; (a548 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a510:	movs	r0, #17
  m_errorLine = line;
    a512:	movw	r2, #698	; 0x2ba
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a516:	strb	r0, [r1, #0]
  m_errorLine = line;
    a518:	str	r2, [r3, #0]
    a51a:	b.n	a4cc <SdioCard::erase(unsigned long, unsigned long)+0x48>
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    a51c:	ldr	r0, [pc, #52]	; (a554 <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    a51e:	bl	a178 <waitTimeout(bool (*)())>
    a522:	cmp	r0, #0
    a524:	beq.n	a4cc <SdioCard::erase(unsigned long, unsigned long)+0x48>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a526:	ldr	r1, [pc, #28]	; (a544 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    a528:	ldr	r3, [pc, #28]	; (a548 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a52a:	movs	r0, #39	; 0x27
  m_errorLine = line;
    a52c:	movw	r2, #701	; 0x2bd
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a530:	strb	r0, [r1, #0]
  m_errorLine = line;
    a532:	str	r2, [r3, #0]
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    a534:	movs	r4, #0
    a536:	b.n	a4cc <SdioCard::erase(unsigned long, unsigned long)+0x48>
    a538:	.word	0x1fff1f60
    a53c:	.word	0x1fff1f4c
    a540:	.word	0x201a0000
    a544:	.word	0x1fff09c0
    a548:	.word	0x1fff1f78
    a54c:	.word	0x211a0000
    a550:	.word	0x261b0000
    a554:	.word	0x0000a2fd

0000a558 <transferStop()>:
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
    a558:	push	{r4, r5, r6, lr}
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    a55a:	movs	r1, #0
    a55c:	ldr	r0, [pc, #84]	; (a5b4 <transferStop()+0x5c>)
    a55e:	bl	a21c <cardCommand(unsigned long, unsigned long)>
    a562:	mov	r4, r0
    a564:	cbnz	r0, a578 <transferStop()+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a566:	ldr	r1, [pc, #80]	; (a5b8 <transferStop()+0x60>)
  m_errorLine = line;
    a568:	ldr	r3, [pc, #80]	; (a5bc <transferStop()+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a56a:	movs	r0, #9
  m_errorLine = line;
    a56c:	mov.w	r2, #540	; 0x21c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a570:	strb	r0, [r1, #0]
  m_errorLine = line;
    a572:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    a574:	mov	r0, r4
    a576:	pop	{r4, r5, r6, pc}
//------------------------------------------------------------------------------
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    a578:	ldr	r0, [pc, #68]	; (a5c0 <transferStop()+0x68>)
    a57a:	bl	a1a0 <yieldTimeout(bool (*)())>
    a57e:	cbnz	r0, a59e <transferStop()+0x46>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    a580:	ldr	r0, [pc, #64]	; (a5c4 <transferStop()+0x6c>)
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    a582:	ldr	r1, [pc, #68]	; (a5c8 <transferStop()+0x70>)
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    a584:	ldr	r5, [pc, #68]	; (a5cc <transferStop()+0x74>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    a586:	ldr	r6, [r0, #0]
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    a588:	ldr	r3, [r1, #0]
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    a58a:	ldr	r2, [r5, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    a58c:	bic.w	r3, r3, #65536	; 0x10000
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    a590:	orr.w	r2, r2, #67108864	; 0x4000000
    a594:	str	r2, [r5, #0]
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
    a596:	str	r6, [r0, #0]
  SDHC_PROCTL = proctl;
    a598:	str	r3, [r1, #0]
  return true;
}
    a59a:	mov	r0, r4
    a59c:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a59e:	ldr	r1, [pc, #24]	; (a5b8 <transferStop()+0x60>)
  m_errorLine = line;
    a5a0:	ldr	r3, [pc, #24]	; (a5bc <transferStop()+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a5a2:	movs	r0, #10
  m_errorLine = line;
    a5a4:	movw	r2, #543	; 0x21f
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a5a8:	strb	r0, [r1, #0]
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    a5aa:	movs	r4, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    a5ac:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    a5ae:	mov	r0, r4
    a5b0:	pop	{r4, r5, r6, pc}
    a5b2:	nop
    a5b4:	.word	0x0cdb0000
    a5b8:	.word	0x1fff09c0
    a5bc:	.word	0x1fff1f78
    a5c0:	.word	0x0000a2fd
    a5c4:	.word	0x400b1034
    a5c8:	.word	0x400b1028
    a5cc:	.word	0x400b102c

0000a5d0 <SdioCard::readStop()>:
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    a5d0:	b.w	a558 <transferStop()>

0000a5d4 <SdioCard::writeData(unsigned char const*)>:
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    a5d4:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    a5d6:	ldr	r3, [pc, #160]	; (a678 <SdioCard::writeData(unsigned char const*)+0xa4>)
    a5d8:	ldr	r3, [r3, #0]
    a5da:	lsls	r0, r3, #23
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    a5dc:	mov	r5, r1
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    a5de:	bmi.n	a5f2 <SdioCard::writeData(unsigned char const*)+0x1e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    a5e0:	ldr	r3, [pc, #152]	; (a67c <SdioCard::writeData(unsigned char const*)+0xa8>)
    a5e2:	ldr	r2, [r3, #0]
    a5e4:	bic.w	r2, r2, #65536	; 0x10000
    a5e8:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    a5ea:	ldr	r2, [r3, #0]
    a5ec:	orr.w	r2, r2, #131072	; 0x20000
    a5f0:	str	r2, [r3, #0]
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    a5f2:	ldr	r2, [pc, #136]	; (a67c <SdioCard::writeData(unsigned char const*)+0xa8>)
  if (waitTimeout(isBusyFifoWrite)) {
    a5f4:	ldr	r0, [pc, #136]	; (a680 <SdioCard::writeData(unsigned char const*)+0xac>)
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    a5f6:	ldr	r3, [r2, #0]
    a5f8:	orr.w	r3, r3, #65536	; 0x10000
    a5fc:	str	r3, [r2, #0]
  if (waitTimeout(isBusyFifoWrite)) {
    a5fe:	bl	a178 <waitTimeout(bool (*)())>
    a602:	cmp	r0, #0
    a604:	bne.n	a664 <SdioCard::writeData(unsigned char const*)+0x90>
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    a606:	ldr	r4, [pc, #112]	; (a678 <SdioCard::writeData(unsigned char const*)+0xa4>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    a608:	ldr	r0, [pc, #120]	; (a684 <SdioCard::writeData(unsigned char const*)+0xb0>)
    a60a:	subs	r3, r5, #4
    a60c:	add.w	r5, r5, #508	; 0x1fc
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    a610:	ldr	r2, [r4, #0]
    a612:	lsls	r1, r2, #21
    a614:	bpl.n	a610 <SdioCard::writeData(unsigned char const*)+0x3c>
    a616:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    a61a:	ldr.w	r2, [r3, #4]!
    a61e:	str	r2, [r0, #0]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    a620:	cmp	r1, r3
    a622:	bne.n	a61a <SdioCard::writeData(unsigned char const*)+0x46>
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    a624:	cmp	r5, r1
    a626:	mov	r3, r1
    a628:	bne.n	a610 <SdioCard::writeData(unsigned char const*)+0x3c>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    a62a:	ldr	r0, [pc, #92]	; (a688 <SdioCard::writeData(unsigned char const*)+0xb4>)
    a62c:	bl	a178 <waitTimeout(bool (*)())>
    a630:	cbnz	r0, a652 <SdioCard::writeData(unsigned char const*)+0x7e>
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    a632:	ldr	r2, [pc, #88]	; (a68c <SdioCard::writeData(unsigned char const*)+0xb8>)
    a634:	ldr	r3, [pc, #88]	; (a690 <SdioCard::writeData(unsigned char const*)+0xbc>)
    a636:	ldr	r1, [r2, #0]
    a638:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    a63a:	ldr	r1, [r3, #0]
    a63c:	str	r1, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    a63e:	ldr	r2, [r3, #0]
    a640:	lsls	r2, r2, #30
    a642:	bpl.n	a674 <SdioCard::writeData(unsigned char const*)+0xa0>
    a644:	ldr	r3, [r3, #0]
    a646:	ldr	r0, [pc, #76]	; (a694 <SdioCard::writeData(unsigned char const*)+0xc0>)
    a648:	ands	r0, r3
    a64a:	clz	r0, r0
    a64e:	lsrs	r0, r0, #5
    a650:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a652:	ldr	r1, [pc, #68]	; (a698 <SdioCard::writeData(unsigned char const*)+0xc4>)
  m_errorLine = line;
    a654:	ldr	r3, [pc, #68]	; (a69c <SdioCard::writeData(unsigned char const*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a656:	movs	r0, #35	; 0x23
  m_errorLine = line;
    a658:	movw	r2, #905	; 0x389
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a65c:	strb	r0, [r1, #0]
  m_errorLine = line;
    a65e:	str	r2, [r3, #0]
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
    a660:	movs	r0, #0
    a662:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a664:	ldr	r1, [pc, #48]	; (a698 <SdioCard::writeData(unsigned char const*)+0xc4>)
  m_errorLine = line;
    a666:	ldr	r3, [pc, #52]	; (a69c <SdioCard::writeData(unsigned char const*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a668:	movs	r0, #32
  m_errorLine = line;
    a66a:	movw	r2, #894	; 0x37e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a66e:	strb	r0, [r1, #0]
  m_errorLine = line;
    a670:	str	r2, [r3, #0]
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    a672:	movs	r0, #0
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    a674:	pop	{r3, r4, r5, pc}
    a676:	nop
    a678:	.word	0x400b1024
    a67c:	.word	0x400b1028
    a680:	.word	0x0000a01d
    a684:	.word	0x400b1020
    a688:	.word	0x0000a031
    a68c:	.word	0x400b1030
    a690:	.word	0x1fff1f58
    a694:	.word	0x117f0000
    a698:	.word	0x1fff09c0
    a69c:	.word	0x1fff1f78

0000a6a0 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    a6a0:	push	{r3, r4, r5, lr}
  if (yieldTimeout(isBusyCMD13)) {
    a6a2:	ldr	r0, [pc, #80]	; (a6f4 <SdioCard::writeStart(unsigned long)+0x54>)
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    a6a4:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    a6a6:	bl	a1a0 <yieldTimeout(bool (*)())>
    a6aa:	cbnz	r0, a6e0 <SdioCard::writeStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    a6ac:	ldr	r2, [pc, #72]	; (a6f8 <SdioCard::writeStart(unsigned long)+0x58>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    a6ae:	ldr	r1, [pc, #76]	; (a6fc <SdioCard::writeStart(unsigned long)+0x5c>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    a6b0:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    a6b2:	ldr	r0, [pc, #76]	; (a700 <SdioCard::writeStart(unsigned long)+0x60>)
    a6b4:	ldr	r5, [pc, #76]	; (a704 <SdioCard::writeStart(unsigned long)+0x64>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    a6b6:	bic.w	r3, r3, #65536	; 0x10000
    a6ba:	str	r3, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    a6bc:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    a6be:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    a6c0:	cbnz	r3, a6dc <SdioCard::writeStart(unsigned long)+0x3c>
    a6c2:	lsls	r1, r4, #9
    a6c4:	ldr	r0, [pc, #64]	; (a708 <SdioCard::writeStart(unsigned long)+0x68>)
    a6c6:	bl	a21c <cardCommand(unsigned long, unsigned long)>
    a6ca:	cbnz	r0, a6da <SdioCard::writeStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a6cc:	ldr	r1, [pc, #60]	; (a70c <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    a6ce:	ldr	r3, [pc, #64]	; (a710 <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a6d0:	movs	r4, #14
  m_errorLine = line;
    a6d2:	movw	r2, #990	; 0x3de
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a6d6:	strb	r4, [r1, #0]
  m_errorLine = line;
    a6d8:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    a6da:	pop	{r3, r4, r5, pc}
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    a6dc:	mov	r1, r4
    a6de:	b.n	a6c4 <SdioCard::writeStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a6e0:	ldr	r1, [pc, #40]	; (a70c <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    a6e2:	ldr	r3, [pc, #44]	; (a710 <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a6e4:	movs	r0, #10
  m_errorLine = line;
    a6e6:	movw	r2, #978	; 0x3d2
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a6ea:	strb	r0, [r1, #0]
  m_errorLine = line;
    a6ec:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    a6ee:	movs	r0, #0
    a6f0:	pop	{r3, r4, r5, pc}
    a6f2:	nop
    a6f4:	.word	0x0000a2fd
    a6f8:	.word	0x400b1028
    a6fc:	.word	0x1fff1f4c
    a700:	.word	0x400b1004
    a704:	.word	0xffff0200
    a708:	.word	0x193a0022
    a70c:	.word	0x1fff09c0
    a710:	.word	0x1fff1f78

0000a714 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    a714:	push	{r3, r4, r5, r6, r7, lr}
    a716:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    a718:	ldrb	r0, [r0, #8]
    a71a:	lsls	r0, r0, #31
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    a71c:	mov	r4, r1
    a71e:	mov	r5, r2
    a720:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    a722:	bmi.n	a74c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
      return sdError(SD_CARD_ERROR_CMD18);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    a724:	cbz	r3, a748 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    a726:	add	r7, r1
    a728:	b.n	a72e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    a72a:	cmp	r4, r7
    a72c:	beq.n	a748 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    a72e:	ldr	r3, [r6, #0]
    a730:	mov	r2, r5
    a732:	mov	r1, r4
    a734:	ldr	r3, [r3, #8]
    a736:	mov	r0, r6
    a738:	blx	r3
    a73a:	adds	r4, #1
    a73c:	add.w	r5, r5, #512	; 0x200
    a740:	cmp	r0, #0
    a742:	bne.n	a72a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
        if (!readSector(sector, dst)) {
          return false;  // readSector will set errorCode.
    a744:	movs	r0, #0
    a746:	pop	{r3, r4, r5, r6, r7, pc}
      if (!readSector(sector + i, dst + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    a748:	movs	r0, #1
    a74a:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
    a74c:	lsls	r0, r2, #30
    a74e:	beq.n	a776 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    a750:	cmp	r3, #0
    a752:	beq.n	a748 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    a754:	add	r7, r1
    a756:	b.n	a75c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    a758:	cmp	r7, r4
    a75a:	beq.n	a748 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    a75c:	ldr	r3, [r6, #0]
    a75e:	mov	r2, r5
    a760:	mov	r1, r4
    a762:	ldr	r3, [r3, #8]
    a764:	mov	r0, r6
    a766:	blx	r3
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    a768:	adds	r4, #1
    a76a:	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    a76e:	cmp	r0, #0
    a770:	bne.n	a758 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    a772:	movs	r0, #0
    a774:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    a776:	ldr	r0, [pc, #24]	; (a790 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    a778:	bl	a364 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    a77c:	cmp	r0, #0
    a77e:	bne.n	a748 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a780:	ldr	r1, [pc, #16]	; (a794 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
  m_errorLine = line;
    a782:	ldr	r3, [pc, #20]	; (a798 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a784:	movs	r4, #12
  m_errorLine = line;
    a786:	mov.w	r2, #820	; 0x334
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a78a:	strb	r4, [r1, #0]
  m_errorLine = line;
    a78c:	str	r2, [r3, #0]
    a78e:	pop	{r3, r4, r5, r6, r7, pc}
    a790:	.word	0x123a0037
    a794:	.word	0x1fff09c0
    a798:	.word	0x1fff1f78

0000a79c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    a79c:	push	{r3, r4, r5, r6, r7, lr}
    a79e:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    a7a0:	ldrb	r0, [r0, #8]
    a7a2:	lsls	r0, r0, #31
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    a7a4:	mov	r4, r1
    a7a6:	mov	r5, r2
    a7a8:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    a7aa:	bmi.n	a7d4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    a7ac:	cbz	r3, a7d0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    a7ae:	add	r7, r1
    a7b0:	b.n	a7b6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    a7b2:	cmp	r4, r7
    a7b4:	beq.n	a7d0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    a7b6:	ldr	r3, [r6, #0]
    a7b8:	mov	r2, r5
    a7ba:	mov	r1, r4
    a7bc:	ldr	r3, [r3, #24]
    a7be:	mov	r0, r6
    a7c0:	blx	r3
    a7c2:	adds	r4, #1
    a7c4:	add.w	r5, r5, #512	; 0x200
    a7c8:	cmp	r0, #0
    a7ca:	bne.n	a7b2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
        if (!writeSector(sector, ptr)) {
          return false;  // writeSector will set errorCode.
    a7cc:	movs	r0, #0
    a7ce:	pop	{r3, r4, r5, r6, r7, pc}
      if (!writeSector(sector + i, src + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    a7d0:	movs	r0, #1
    a7d2:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
    a7d4:	lsls	r0, r2, #30
    a7d6:	beq.n	a7fe <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    a7d8:	cmp	r3, #0
    a7da:	beq.n	a7d0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    a7dc:	add	r7, r1
    a7de:	b.n	a7e4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    a7e0:	cmp	r7, r4
    a7e2:	beq.n	a7d0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    a7e4:	ldr	r3, [r6, #0]
    a7e6:	mov	r2, r5
    a7e8:	mov	r1, r4
    a7ea:	ldr	r3, [r3, #24]
    a7ec:	mov	r0, r6
    a7ee:	blx	r3
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    a7f0:	adds	r4, #1
    a7f2:	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    a7f6:	cmp	r0, #0
    a7f8:	bne.n	a7e0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    a7fa:	movs	r0, #0
    a7fc:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    a7fe:	ldr	r0, [pc, #24]	; (a818 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    a800:	bl	a364 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    a804:	cmp	r0, #0
    a806:	bne.n	a7d0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a808:	ldr	r1, [pc, #16]	; (a81c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
  m_errorLine = line;
    a80a:	ldr	r3, [pc, #20]	; (a820 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a80c:	movs	r4, #14
  m_errorLine = line;
    a80e:	mov.w	r2, #964	; 0x3c4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a812:	strb	r4, [r1, #0]
  m_errorLine = line;
    a814:	str	r2, [r3, #0]
    a816:	pop	{r3, r4, r5, r6, r7, pc}
    a818:	.word	0x193a0027
    a81c:	.word	0x1fff09c0
    a820:	.word	0x1fff1f78

0000a824 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    a824:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    a826:	ldrb	r3, [r0, #8]
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    a828:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    a82a:	lsls	r2, r3, #31
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    a82c:	sub.w	sp, sp, #512	; 0x200
    a830:	mov	r6, r1
  if (m_sdioConfig.useDma()) {
    a832:	bpl.n	a868 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
    a834:	lsls	r3, r5, #30
    a836:	beq.n	a846 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x22>
      ptr = aligned;
      memcpy(aligned, src, 512);
    a838:	mov	r1, r5
    a83a:	mov	r0, sp
    a83c:	mov.w	r2, #512	; 0x200
    a840:	bl	b0e0 <memcpy>
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_sdioConfig.useDma()) {
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
      ptr = aligned;
    a844:	mov	r5, sp
      memcpy(aligned, src, 512);
    } else {
      ptr = const_cast<uint8_t*>(src);
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    a846:	mov	r2, r5
    a848:	mov	r1, r6
    a84a:	movs	r3, #1
    a84c:	ldr	r0, [pc, #120]	; (a8c8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>)
    a84e:	bl	a364 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    a852:	cbnz	r0, a862 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a854:	ldr	r1, [pc, #116]	; (a8cc <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa8>)
  m_errorLine = line;
    a856:	ldr	r3, [pc, #120]	; (a8d0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xac>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a858:	movs	r4, #13
  m_errorLine = line;
    a85a:	movw	r2, #923	; 0x39b
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a85e:	strb	r4, [r1, #0]
  m_errorLine = line;
    a860:	str	r2, [r3, #0]
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    a862:	add.w	sp, sp, #512	; 0x200
    a866:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    a868:	ldrb	r3, [r0, #9]
    a86a:	cmp	r3, #2
    a86c:	mov	r4, r0
    a86e:	beq.n	a882 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
      if (!syncDevice()) {
    a870:	ldr	r3, [r4, #0]
    a872:	mov	r0, r4
    a874:	ldr	r3, [r3, #20]
    a876:	blx	r3
    a878:	cbnz	r0, a8b2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x8e>
        return false;
    a87a:	movs	r0, #0
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    a87c:	add.w	sp, sp, #512	; 0x200
    a880:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    a882:	ldr	r3, [r0, #4]
    a884:	cmp	r1, r3
    a886:	bne.n	a870 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    }
    if (!writeData(src)) {
    a888:	ldr	r3, [r4, #0]
    a88a:	mov	r1, r5
    a88c:	ldr	r3, [r3, #68]	; 0x44
    a88e:	mov	r0, r4
    a890:	blx	r3
    a892:	cmp	r0, #0
    a894:	beq.n	a87a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
      return false;
    }
    m_curSector++;
    a896:	ldr	r3, [r4, #4]
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    a898:	ldr	r2, [pc, #56]	; (a8d4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb0>)
      m_curState = WRITE_STATE;
    }
    if (!writeData(src)) {
      return false;
    }
    m_curSector++;
    a89a:	adds	r3, #1
    a89c:	str	r3, [r4, #4]
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    a89e:	ldr	r3, [r2, #0]
    a8a0:	lsrs	r3, r3, #16
    a8a2:	lsls	r3, r3, #16
    a8a4:	cmp	r3, #0
    a8a6:	bne.n	a862 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
      if (!syncDevice()) {
    a8a8:	ldr	r3, [r4, #0]
    a8aa:	mov	r0, r4
    a8ac:	ldr	r3, [r3, #20]
    a8ae:	blx	r3
    a8b0:	b.n	a862 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
      if (!syncDevice()) {
        return false;
      }
      if (!writeStart(sector )) {
    a8b2:	ldr	r3, [r4, #0]
    a8b4:	mov	r1, r6
    a8b6:	ldr	r3, [r3, #72]	; 0x48
    a8b8:	mov	r0, r4
    a8ba:	blx	r3
    a8bc:	cmp	r0, #0
    a8be:	beq.n	a87a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    a8c0:	movs	r3, #2
        return false;
      }
      if (!writeStart(sector )) {
        return false;
      }
      m_curSector = sector;
    a8c2:	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    a8c4:	strb	r3, [r4, #9]
    a8c6:	b.n	a888 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x64>
    a8c8:	.word	0x183a0001
    a8cc:	.word	0x1fff09c0
    a8d0:	.word	0x1fff1f78
    a8d4:	.word	0x400b1004

0000a8d8 <SdioCard::syncDevice()>:
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    a8d8:	ldrb	r3, [r0, #9]
    a8da:	cmp	r3, #1
    a8dc:	beq.n	a8f8 <SdioCard::syncDevice()+0x20>
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    a8de:	cmp	r3, #2
    a8e0:	beq.n	a8e6 <SdioCard::syncDevice()+0xe>
    if (!writeStop()) {
      return false;
    }
  }
  return true;
}
    a8e2:	movs	r0, #1
    a8e4:	bx	lr
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    a8e6:	movs	r1, #0
    if (!writeStop()) {
    a8e8:	ldr	r3, [r0, #0]
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    a8ea:	strb	r1, [r0, #9]
    if (!writeStop()) {
    a8ec:	ldr	r3, [r3, #76]	; 0x4c
    a8ee:	ldr	r2, [pc, #20]	; (a904 <SdioCard::syncDevice()+0x2c>)
    a8f0:	cmp	r3, r2
    a8f2:	bne.n	a900 <SdioCard::syncDevice()+0x28>
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    a8f4:	b.w	a558 <transferStop()>
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    a8f8:	movs	r3, #0
    a8fa:	strb	r3, [r0, #9]
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
    a8fc:	b.w	a558 <transferStop()>
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    if (!writeStop()) {
    a900:	bx	r3
    a902:	nop
    a904:	.word	0x0000a5d1

0000a908 <cardCMD6(unsigned long, unsigned char*)>:

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    a908:	push	{r3, r4, r5, r6, r7, lr}
    a90a:	mov	r5, r0
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    a90c:	ldr	r0, [pc, #116]	; (a984 <cardCMD6(unsigned long, unsigned char*)+0x7c>)

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    a90e:	mov	r4, r1
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    a910:	bl	a178 <waitTimeout(bool (*)())>
    a914:	cbz	r0, a928 <cardCMD6(unsigned long, unsigned char*)+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a916:	ldr	r1, [pc, #112]	; (a988 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    a918:	ldr	r3, [pc, #112]	; (a98c <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a91a:	movs	r0, #10
  m_errorLine = line;
    a91c:	movw	r2, #377	; 0x179
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a920:	strb	r0, [r1, #0]
  m_errorLine = line;
    a922:	str	r2, [r3, #0]
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    a924:	movs	r0, #0
    a926:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    a928:	ldr	r2, [pc, #100]	; (a990 <cardCMD6(unsigned long, unsigned char*)+0x88>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    a92a:	ldr.w	lr, [pc, #132]	; a9b0 <cardCMD6(unsigned long, unsigned char*)+0xa8>
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    a92e:	ldr	r7, [pc, #100]	; (a994 <cardCMD6(unsigned long, unsigned char*)+0x8c>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    a930:	ldr	r6, [pc, #100]	; (a998 <cardCMD6(unsigned long, unsigned char*)+0x90>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    a932:	ldr	r3, [pc, #104]	; (a99c <cardCMD6(unsigned long, unsigned char*)+0x94>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    a934:	mov.w	ip, #1
    a938:	strb.w	ip, [lr]
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    a93c:	mov	r1, r5
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    a93e:	str	r0, [r2, #0]
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    a940:	ldr	r5, [pc, #92]	; (a9a0 <cardCMD6(unsigned long, unsigned char*)+0x98>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    a942:	ldr	r2, [pc, #96]	; (a9a4 <cardCMD6(unsigned long, unsigned char*)+0x9c>)
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    a944:	str	r4, [r7, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    a946:	ldr	r0, [pc, #96]	; (a9a8 <cardCMD6(unsigned long, unsigned char*)+0xa0>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    a948:	str	r5, [r6, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    a94a:	str	r2, [r3, #0]
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    a94c:	bl	a21c <cardCommand(unsigned long, unsigned long)>
    a950:	cbnz	r0, a962 <cardCMD6(unsigned long, unsigned char*)+0x5a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a952:	ldr	r1, [pc, #52]	; (a988 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    a954:	ldr	r3, [pc, #52]	; (a98c <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a956:	movs	r4, #4
  m_errorLine = line;
    a958:	mov.w	r2, #384	; 0x180
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a95c:	strb	r4, [r1, #0]
  m_errorLine = line;
    a95e:	str	r2, [r3, #0]
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
    a960:	pop	{r3, r4, r5, r6, r7, pc}
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    a962:	ldr	r0, [pc, #72]	; (a9ac <cardCMD6(unsigned long, unsigned char*)+0xa4>)
    a964:	bl	a1a0 <yieldTimeout(bool (*)())>
    a968:	cbnz	r0, a972 <cardCMD6(unsigned long, unsigned char*)+0x6a>
    a96a:	bl	a344 <waitDmaStatus() [clone .part.6]>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    a96e:	cbz	r0, a972 <cardCMD6(unsigned long, unsigned char*)+0x6a>
    return sdError(SD_CARD_ERROR_DMA);
  }
  return true;
}
    a970:	pop	{r3, r4, r5, r6, r7, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a972:	ldr	r1, [pc, #20]	; (a988 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    a974:	ldr	r3, [pc, #20]	; (a98c <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a976:	movs	r0, #36	; 0x24
  m_errorLine = line;
    a978:	movw	r2, #387	; 0x183
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a97c:	strb	r0, [r1, #0]
  m_errorLine = line;
    a97e:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    return sdError(SD_CARD_ERROR_DMA);
    a980:	movs	r0, #0
    a982:	pop	{r3, r4, r5, r6, r7, pc}
    a984:	.word	0x0000a2fd
    a988:	.word	0x1fff09c0
    a98c:	.word	0x1fff1f78
    a990:	.word	0x1fff1f58
    a994:	.word	0x400b1000
    a998:	.word	0x400b1004
    a99c:	.word	0x400b1038
    a9a0:	.word	0x00010040
    a9a4:	.word	0x117f0002
    a9a8:	.word	0x063a0011
    a9ac:	.word	0x00009ffd
    a9b0:	.word	0x1fff1f70

0000a9b4 <SdioCard::begin(SdioConfig)>:
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    a9b4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    a9b8:	ldr	r5, [pc, #568]	; (abf4 <SdioCard::begin(SdioConfig)+0x240>)
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    a9ba:	ldr	r4, [pc, #572]	; (abf8 <SdioCard::begin(SdioConfig)+0x244>)
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    a9bc:	ldr.w	r8, [pc, #684]	; ac6c <SdioCard::begin(SdioConfig)+0x2b8>
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    a9c0:	ldr	r7, [pc, #568]	; (abfc <SdioCard::begin(SdioConfig)+0x248>)
  m_version2 = false;
    a9c2:	ldr	r6, [pc, #572]	; (ac00 <SdioCard::begin(SdioConfig)+0x24c>)
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
    a9c4:	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    a9c6:	movs	r3, #0
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    a9c8:	strb	r3, [r5, #0]
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    a9ca:	strb	r3, [r0, #9]
  m_initDone = false;
    a9cc:	strb.w	r3, [r8]
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    a9d0:	strb	r3, [r7, #0]
  m_version2 = false;
    a9d2:	strb	r3, [r6, #0]
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    a9d4:	ldr	r3, [r4, #0]
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    a9d6:	ldr	r2, [pc, #556]	; (ac04 <SdioCard::begin(SdioConfig)+0x250>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    a9d8:	ldr	r0, [pc, #556]	; (ac08 <SdioCard::begin(SdioConfig)+0x254>)
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    a9da:	ldr	r1, [pc, #560]	; (ac0c <SdioCard::begin(SdioConfig)+0x258>)
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    a9dc:	ldr.w	lr, [pc, #656]	; ac70 <SdioCard::begin(SdioConfig)+0x2bc>
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    a9e0:	orr.w	r3, r3, #201326592	; 0xc000000
    a9e4:	str	r3, [r4, #0]
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    a9e6:	ldr	r3, [r2, #0]
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    a9e8:	add.w	r4, r4, #260096	; 0x3f800
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    a9ec:	orr.w	r3, r3, #131072	; 0x20000
    a9f0:	str	r3, [r2, #0]
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    a9f2:	adds	r4, #12
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    a9f4:	add.w	r2, r2, #428032	; 0x68800
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    a9f8:	movw	r3, #259	; 0x103
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    a9fc:	addw	r2, r2, #2044	; 0x7fc
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    aa00:	str	r3, [r0, #0]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    aa02:	str.w	r3, [lr]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    aa06:	str	r3, [r1, #0]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    aa08:	str	r3, [r4, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    aa0a:	str	r3, [r0, #16]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    aa0c:	str	r3, [r1, #12]
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    aa0e:	ldr	r3, [r2, #0]
    aa10:	orr.w	r3, r3, #16777216	; 0x1000000
    aa14:	orr.w	r3, r3, #32768	; 0x8000
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    aa18:	sub	sp, #68	; 0x44
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    aa1a:	str	r3, [r2, #0]

  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    aa1c:	ldr	r3, [r2, #0]
    aa1e:	ldr	r4, [pc, #496]	; (ac10 <SdioCard::begin(SdioConfig)+0x25c>)
    aa20:	lsls	r1, r3, #7
    aa22:	bmi.n	aa1c <SdioCard::begin(SdioConfig)+0x68>
  }

  // Set initial SCK rate.
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    aa24:	mov.w	r0, #400	; 0x190
    aa28:	bl	a048 <setSdclk(unsigned long)>
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    aa2c:	ldr.w	ip, [pc, #472]	; ac08 <SdioCard::begin(SdioConfig)+0x254>
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    aa30:	ldr.w	lr, [pc, #572]	; ac70 <SdioCard::begin(SdioConfig)+0x2bc>
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    aa34:	ldr	r1, [pc, #468]	; (ac0c <SdioCard::begin(SdioConfig)+0x258>)
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    aa36:	ldr	r2, [pc, #476]	; (ac14 <SdioCard::begin(SdioConfig)+0x260>)
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    aa38:	ldr	r0, [pc, #476]	; (ac18 <SdioCard::begin(SdioConfig)+0x264>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    aa3a:	movw	r3, #1091	; 0x443
    aa3e:	str.w	r3, [ip]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    aa42:	str.w	r3, [lr]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    aa46:	mov.w	lr, #1088	; 0x440
    aa4a:	str.w	lr, [r1]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    aa4e:	str	r3, [r2, #0]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    aa50:	add.w	r2, r2, #409600	; 0x64000
    aa54:	adds	r2, #40	; 0x28

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    aa56:	str	r3, [r0, #0]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    aa58:	ldr	r0, [pc, #448]	; (ac1c <SdioCard::begin(SdioConfig)+0x268>)
  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    aa5a:	str	r3, [r1, #12]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    aa5c:	str	r0, [r2, #0]

  attachInterruptVector(IRQ_SDHC, sdIrs);
    aa5e:	ldr	r1, [pc, #448]	; (ac20 <SdioCard::begin(SdioConfig)+0x26c>)
    aa60:	movs	r0, #81	; 0x51
    aa62:	bl	b5c4 <attachInterruptVector>
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    aa66:	ldr	r3, [pc, #444]	; (ac24 <SdioCard::begin(SdioConfig)+0x270>)

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    aa68:	ldr	r1, [pc, #444]	; (ac28 <SdioCard::begin(SdioConfig)+0x274>)
    aa6a:	movs	r0, #96	; 0x60
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    aa6c:	mov.w	r2, #131072	; 0x20000

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    aa70:	strb	r0, [r1, #0]
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    aa72:	str	r2, [r3, #0]

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    aa74:	ldr	r3, [r4, #0]
    aa76:	orr.w	r3, r3, #134217728	; 0x8000000
    aa7a:	str	r3, [r4, #0]
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    aa7c:	ldr	r1, [r4, #0]
    aa7e:	ands.w	r1, r1, #134217728	; 0x8000000
    aa82:	bne.n	aa7c <SdioCard::begin(SdioConfig)+0xc8>
  m_highCapacity = false;
  m_version2 = false;

  // initialize controller.
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    aa84:	mov	r0, r1
    aa86:	bl	a21c <cardCommand(unsigned long, unsigned long)>
    aa8a:	mov	r4, r0
    aa8c:	cmp	r0, #0
    aa8e:	beq.n	ab2e <SdioCard::begin(SdioConfig)+0x17a>
    aa90:	movs	r4, #3
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    aa92:	mov.w	r1, #426	; 0x1aa
    aa96:	ldr	r0, [pc, #404]	; (ac2c <SdioCard::begin(SdioConfig)+0x278>)
    aa98:	bl	a21c <cardCommand(unsigned long, unsigned long)>
    aa9c:	cmp	r0, #0
    aa9e:	bne.n	ab5c <SdioCard::begin(SdioConfig)+0x1a8>
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    aaa0:	subs	r4, #1
    aaa2:	bne.n	aa92 <SdioCard::begin(SdioConfig)+0xde>
      }
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    aaa4:	ldrb	r3, [r6, #0]
    aaa6:	ldr	r6, [pc, #392]	; (ac30 <SdioCard::begin(SdioConfig)+0x27c>)
    aaa8:	cmp	r3, #0
    aaaa:	it	eq
    aaac:	moveq.w	r6, #3145728	; 0x300000
  int m = micros();
    aab0:	bl	b604 <micros>
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    aab4:	ldr	r4, [pc, #380]	; (ac34 <SdioCard::begin(SdioConfig)+0x280>)
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
    aab6:	mov	r9, r0
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    aab8:	movs	r1, #0
    aaba:	ldr	r0, [pc, #380]	; (ac38 <SdioCard::begin(SdioConfig)+0x284>)
    aabc:	bl	a21c <cardCommand(unsigned long, unsigned long)>
    aac0:	cbnz	r0, aad8 <SdioCard::begin(SdioConfig)+0x124>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    aac2:	ldr	r2, [pc, #376]	; (ac3c <SdioCard::begin(SdioConfig)+0x288>)
    aac4:	movw	r1, #621	; 0x26d
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    aac8:	movs	r3, #23
  m_errorLine = line;
    aaca:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    aacc:	strb	r3, [r5, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    aace:	movs	r4, #0

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    aad0:	mov	r0, r4
    aad2:	add	sp, #68	; 0x44
    aad4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    aad8:	mov	r1, r6
    aada:	ldr	r0, [pc, #356]	; (ac40 <SdioCard::begin(SdioConfig)+0x28c>)
    aadc:	bl	a21c <cardCommand(unsigned long, unsigned long)>
    aae0:	cmp	r0, #0
    aae2:	beq.n	aac2 <SdioCard::begin(SdioConfig)+0x10e>
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    aae4:	bl	b604 <micros>
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    aae8:	ldr	r3, [pc, #344]	; (ac44 <SdioCard::begin(SdioConfig)+0x290>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    aaea:	ldr	r2, [pc, #328]	; (ac34 <SdioCard::begin(SdioConfig)+0x280>)
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    aaec:	rsb	r0, r9, r0
    aaf0:	cmp	r0, r3
    aaf2:	bhi.n	aac2 <SdioCard::begin(SdioConfig)+0x10e>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    aaf4:	ldr	r3, [r4, #0]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    aaf6:	cmp	r3, #0
    aaf8:	bge.n	aab8 <SdioCard::begin(SdioConfig)+0x104>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
    aafa:	ldr	r3, [pc, #332]	; (ac48 <SdioCard::begin(SdioConfig)+0x294>)
    aafc:	ldr	r1, [r2, #0]
    aafe:	str	r1, [r3, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    ab00:	ldr	r3, [r2, #0]
    // Is high capacity.
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    ab02:	ldr	r0, [pc, #328]	; (ac4c <SdioCard::begin(SdioConfig)+0x298>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    ab04:	lsls	r2, r3, #1
    // Is high capacity.
    m_highCapacity = true;
    ab06:	it	mi
    ab08:	movmi	r3, #1
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    ab0a:	mov.w	r1, #0
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    // Is high capacity.
    m_highCapacity = true;
    ab0e:	it	mi
    ab10:	strbmi	r3, [r7, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    ab12:	bl	a21c <cardCommand(unsigned long, unsigned long)>
    ab16:	mov	r4, r0
    ab18:	cbnz	r0, ab42 <SdioCard::begin(SdioConfig)+0x18e>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    ab1a:	ldr	r2, [pc, #288]	; (ac3c <SdioCard::begin(SdioConfig)+0x288>)
    ab1c:	movw	r1, #630	; 0x276
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ab20:	movs	r3, #2

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    ab22:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    ab24:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ab26:	strb	r3, [r5, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    ab28:	add	sp, #68	; 0x44
    ab2a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    ab2e:	ldr	r2, [pc, #268]	; (ac3c <SdioCard::begin(SdioConfig)+0x288>)
    ab30:	mov.w	r1, #604	; 0x25c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ab34:	movs	r3, #1

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    ab36:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    ab38:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ab3a:	strb	r3, [r5, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    ab3c:	add	sp, #68	; 0x44
    ab3e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    ab42:	movs	r1, #0
    ab44:	ldr	r0, [pc, #264]	; (ac50 <SdioCard::begin(SdioConfig)+0x29c>)
    ab46:	bl	a21c <cardCommand(unsigned long, unsigned long)>
    ab4a:	mov	r4, r0
    ab4c:	cbnz	r0, ab7e <SdioCard::begin(SdioConfig)+0x1ca>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    ab4e:	ldr	r2, [pc, #236]	; (ac3c <SdioCard::begin(SdioConfig)+0x288>)
    ab50:	movw	r1, #633	; 0x279
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ab54:	movs	r3, #3
  m_errorLine = line;
    ab56:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ab58:	strb	r3, [r5, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
    ab5a:	b.n	aad0 <SdioCard::begin(SdioConfig)+0x11c>
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
    ab5c:	ldr	r3, [pc, #212]	; (ac34 <SdioCard::begin(SdioConfig)+0x280>)
    ab5e:	ldr	r3, [r3, #0]
    ab60:	cmp.w	r3, #426	; 0x1aa
    ab64:	beq.n	ab76 <SdioCard::begin(SdioConfig)+0x1c2>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    ab66:	ldr	r2, [pc, #212]	; (ac3c <SdioCard::begin(SdioConfig)+0x288>)
    ab68:	movw	r1, #610	; 0x262
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ab6c:	movs	r3, #6
  m_errorLine = line;
    ab6e:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ab70:	strb	r3, [r5, #0]
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
    ab72:	movs	r4, #0
    ab74:	b.n	aad0 <SdioCard::begin(SdioConfig)+0x11c>
      }
      m_version2 = true;
    ab76:	movs	r3, #1
    ab78:	strb	r3, [r6, #0]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    ab7a:	ldr	r6, [pc, #180]	; (ac30 <SdioCard::begin(SdioConfig)+0x27c>)
    ab7c:	b.n	aab0 <SdioCard::begin(SdioConfig)+0xfc>
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    ab7e:	ldr	r3, [pc, #180]	; (ac34 <SdioCard::begin(SdioConfig)+0x280>)
    ab80:	ldr	r6, [pc, #208]	; (ac54 <SdioCard::begin(SdioConfig)+0x2a0>)
    ab82:	ldr	r3, [r3, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    ab84:	ldr	r1, [pc, #208]	; (ac58 <SdioCard::begin(SdioConfig)+0x2a4>)
    ab86:	ldr	r0, [pc, #212]	; (ac5c <SdioCard::begin(SdioConfig)+0x2a8>)
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    ab88:	lsrs	r3, r3, #16
    ab8a:	lsls	r3, r3, #16
    ab8c:	str	r3, [r6, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    ab8e:	bl	a298 <readReg16(unsigned long, void*)>
    ab92:	mov	r4, r0
    ab94:	cbnz	r0, aba4 <SdioCard::begin(SdioConfig)+0x1f0>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    ab96:	ldr	r2, [pc, #164]	; (ac3c <SdioCard::begin(SdioConfig)+0x288>)
    ab98:	movw	r1, #638	; 0x27e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ab9c:	movs	r3, #7
  m_errorLine = line;
    ab9e:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    aba0:	strb	r3, [r5, #0]
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
    aba2:	b.n	aad0 <SdioCard::begin(SdioConfig)+0x11c>
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    aba4:	ldr	r1, [pc, #184]	; (ac60 <SdioCard::begin(SdioConfig)+0x2ac>)
    aba6:	ldr	r0, [pc, #188]	; (ac64 <SdioCard::begin(SdioConfig)+0x2b0>)
    aba8:	bl	a298 <readReg16(unsigned long, void*)>
    abac:	mov	r4, r0
    abae:	cbnz	r0, abbe <SdioCard::begin(SdioConfig)+0x20a>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    abb0:	ldr	r2, [pc, #136]	; (ac3c <SdioCard::begin(SdioConfig)+0x288>)
    abb2:	movw	r1, #641	; 0x281
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    abb6:	movs	r3, #8
  m_errorLine = line;
    abb8:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    abba:	strb	r3, [r5, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
    abbc:	b.n	aad0 <SdioCard::begin(SdioConfig)+0x11c>
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    abbe:	ldr	r1, [r6, #0]
    abc0:	ldr	r0, [pc, #164]	; (ac68 <SdioCard::begin(SdioConfig)+0x2b4>)
    abc2:	bl	a21c <cardCommand(unsigned long, unsigned long)>
    abc6:	mov	r4, r0
    abc8:	cbnz	r0, abd8 <SdioCard::begin(SdioConfig)+0x224>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    abca:	ldr	r2, [pc, #112]	; (ac3c <SdioCard::begin(SdioConfig)+0x288>)
    abcc:	mov.w	r1, #644	; 0x284
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    abd0:	movs	r3, #5
  m_errorLine = line;
    abd2:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    abd4:	strb	r3, [r5, #0]
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
    abd6:	b.n	aad0 <SdioCard::begin(SdioConfig)+0x11c>
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    abd8:	ldr	r1, [r6, #0]
    abda:	ldr	r0, [pc, #92]	; (ac38 <SdioCard::begin(SdioConfig)+0x284>)
    abdc:	bl	a21c <cardCommand(unsigned long, unsigned long)>
    abe0:	cmp	r0, #0
    abe2:	bne.n	ac74 <SdioCard::begin(SdioConfig)+0x2c0>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    abe4:	ldr	r2, [pc, #84]	; (ac3c <SdioCard::begin(SdioConfig)+0x288>)
    abe6:	mov.w	r1, #648	; 0x288
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    abea:	movs	r3, #20
  m_errorLine = line;
    abec:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    abee:	strb	r3, [r5, #0]
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    abf0:	movs	r4, #0
    abf2:	b.n	aad0 <SdioCard::begin(SdioConfig)+0x11c>
    abf4:	.word	0x1fff09c0
    abf8:	.word	0x4000d800
    abfc:	.word	0x1fff1f4c
    ac00:	.word	0x1fff1f34
    ac04:	.word	0x40048030
    ac08:	.word	0x4004d000
    ac0c:	.word	0x4004d008
    ac10:	.word	0x400b102c
    ac14:	.word	0x4004d00c
    ac18:	.word	0x4004d010
    ac1c:	.word	0x117f000b
    ac20:	.word	0x00009fa5
    ac24:	.word	0xe000e108
    ac28:	.word	0xe000e451
    ac2c:	.word	0x081a0000
    ac30:	.word	0x40300000
    ac34:	.word	0x400b1010
    ac38:	.word	0x371a0000
    ac3c:	.word	0x1fff1f78
    ac40:	.word	0x29020000
    ac44:	.word	0x000f4240
    ac48:	.word	0x1fff1f50
    ac4c:	.word	0x02090000
    ac50:	.word	0x031a0000
    ac54:	.word	0x1fff1f54
    ac58:	.word	0x1fff1f60
    ac5c:	.word	0x09090000
    ac60:	.word	0x1fff1f38
    ac64:	.word	0x0a090000
    ac68:	.word	0x071b0000
    ac6c:	.word	0x1fff1f5c
    ac70:	.word	0x4004d004
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    ac74:	movs	r1, #2
    ac76:	ldr	r0, [pc, #168]	; (ad20 <SdioCard::begin(SdioConfig)+0x36c>)
    ac78:	bl	a21c <cardCommand(unsigned long, unsigned long)>
    ac7c:	mov	r4, r0
    ac7e:	cmp	r0, #0
    ac80:	beq.n	abe4 <SdioCard::begin(SdioConfig)+0x230>
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    ac82:	ldr	r3, [pc, #160]	; (ad24 <SdioCard::begin(SdioConfig)+0x370>)
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    ac84:	ldr	r0, [pc, #160]	; (ad28 <SdioCard::begin(SdioConfig)+0x374>)
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    ac86:	ldr	r2, [r3, #0]
    ac88:	bic.w	r2, r2, #6
    ac8c:	str	r2, [r3, #0]
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    ac8e:	ldr	r2, [r3, #0]

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    ac90:	mov.w	r5, #1048592	; 0x100010
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    ac94:	orr.w	r2, r2, #2
    ac98:	str	r2, [r3, #0]
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    ac9a:	mov	r1, sp
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    ac9c:	str	r5, [r0, #0]

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    ac9e:	mvn.w	r0, #4278190080	; 0xff000000
    aca2:	bl	a908 <cardCMD6(unsigned long, unsigned char*)>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    aca6:	cbz	r0, acb0 <SdioCard::begin(SdioConfig)+0x2fc>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    aca8:	ldrb.w	r3, [sp, #13]
    acac:	lsls	r3, r3, #30
    acae:	bmi.n	ad02 <SdioCard::begin(SdioConfig)+0x34e>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    kHzSdClk = 50000;
  } else {
    kHzSdClk = 25000;
    acb0:	movw	r0, #25000	; 0x61a8
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    acb4:	ldr.w	fp, [pc, #132]	; ad3c <SdioCard::begin(SdioConfig)+0x388>
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    acb8:	ldr.w	sl, [pc, #132]	; ad40 <SdioCard::begin(SdioConfig)+0x38c>
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    acbc:	ldr.w	r9, [pc, #132]	; ad44 <SdioCard::begin(SdioConfig)+0x390>
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    acc0:	ldr	r7, [pc, #104]	; (ad2c <SdioCard::begin(SdioConfig)+0x378>)
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    acc2:	ldr	r6, [pc, #108]	; (ad30 <SdioCard::begin(SdioConfig)+0x37c>)
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    acc4:	ldr	r5, [pc, #108]	; (ad34 <SdioCard::begin(SdioConfig)+0x380>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    acc6:	movw	r3, #259	; 0x103
    acca:	str.w	r3, [fp]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    acce:	str.w	r3, [sl]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    acd2:	str.w	r3, [r9]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    acd6:	str	r3, [r7, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    acd8:	str	r3, [r6, #0]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    acda:	str	r3, [r5, #0]
  }
  // Disable GPIO.
  enableGPIO(false);

  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);
    acdc:	bl	a048 <setSdclk(unsigned long)>
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    ace0:	movw	r3, #1091	; 0x443
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    ace4:	mov.w	r1, #1088	; 0x440
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    ace8:	movs	r2, #1
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    acea:	str.w	r3, [fp]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    acee:	str.w	r3, [sl]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    acf2:	str.w	r1, [r9]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    acf6:	str	r3, [r7, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    acf8:	str	r3, [r6, #0]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    acfa:	str	r3, [r5, #0]
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    acfc:	strb.w	r2, [r8]
  return true;
    ad00:	b.n	aad0 <SdioCard::begin(SdioConfig)+0x11c>

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    ad02:	mov	r1, sp
    ad04:	ldr	r0, [pc, #48]	; (ad38 <SdioCard::begin(SdioConfig)+0x384>)
    ad06:	bl	a908 <cardCMD6(unsigned long, unsigned char*)>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    ad0a:	cmp	r0, #0
    ad0c:	beq.n	acb0 <SdioCard::begin(SdioConfig)+0x2fc>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    ad0e:	ldrb.w	r3, [sp, #16]
    ad12:	and.w	r3, r3, #15
    ad16:	cmp	r3, #1
    ad18:	bne.n	acb0 <SdioCard::begin(SdioConfig)+0x2fc>
    kHzSdClk = 50000;
    ad1a:	movw	r0, #50000	; 0xc350
    ad1e:	b.n	acb4 <SdioCard::begin(SdioConfig)+0x300>
    ad20:	.word	0x061a0000
    ad24:	.word	0x400b1028
    ad28:	.word	0x400b1044
    ad2c:	.word	0x4004d00c
    ad30:	.word	0x4004d010
    ad34:	.word	0x4004d014
    ad38:	.word	0x80fffff1
    ad3c:	.word	0x4004d000
    ad40:	.word	0x4004d004
    ad44:	.word	0x4004d008

0000ad48 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    ad48:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    ad4a:	ldr	r3, [pc, #160]	; (adec <SdioCard::readData(unsigned char*)+0xa4>)
    ad4c:	ldr	r3, [r3, #0]
    ad4e:	lsls	r0, r3, #22
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    ad50:	mov	r5, r1
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    ad52:	bmi.n	ad72 <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    ad54:	ldr	r3, [pc, #152]	; (adf0 <SdioCard::readData(unsigned char*)+0xa8>)
    ad56:	ldr	r2, [r3, #0]
    ad58:	bic.w	r2, r2, #65536	; 0x10000
    ad5c:	str	r2, [r3, #0]
    noInterrupts();
    ad5e:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    ad60:	ldr	r2, [r3, #0]
    ad62:	orr.w	r2, r2, #131072	; 0x20000
    ad66:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    ad68:	ldr	r2, [r3, #0]
    ad6a:	orr.w	r2, r2, #65536	; 0x10000
    ad6e:	str	r2, [r3, #0]
    interrupts();
    ad70:	cpsie	i
  }
  if (waitTimeout(isBusyFifoRead)) {
    ad72:	ldr	r0, [pc, #128]	; (adf4 <SdioCard::readData(unsigned char*)+0xac>)
    ad74:	bl	a178 <waitTimeout(bool (*)())>
    ad78:	cmp	r0, #0
    ad7a:	bne.n	adda <SdioCard::readData(unsigned char*)+0x92>
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    ad7c:	ldr	r4, [pc, #108]	; (adec <SdioCard::readData(unsigned char*)+0xa4>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    ad7e:	ldr	r0, [pc, #120]	; (adf8 <SdioCard::readData(unsigned char*)+0xb0>)
    ad80:	subs	r3, r5, #4
    ad82:	add.w	r5, r5, #508	; 0x1fc
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    ad86:	ldr	r2, [r4, #0]
    ad88:	lsls	r1, r2, #20
    ad8a:	bpl.n	ad86 <SdioCard::readData(unsigned char*)+0x3e>
    ad8c:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    ad90:	ldr	r2, [r0, #0]
    ad92:	str.w	r2, [r3, #4]!
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    ad96:	cmp	r1, r3
    ad98:	bne.n	ad90 <SdioCard::readData(unsigned char*)+0x48>
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    ad9a:	cmp	r5, r1
    ad9c:	mov	r3, r1
    ad9e:	bne.n	ad86 <SdioCard::readData(unsigned char*)+0x3e>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    ada0:	ldr	r0, [pc, #88]	; (adfc <SdioCard::readData(unsigned char*)+0xb4>)
    ada2:	bl	a178 <waitTimeout(bool (*)())>
    ada6:	cbnz	r0, adc8 <SdioCard::readData(unsigned char*)+0x80>
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    ada8:	ldr	r2, [pc, #84]	; (ae00 <SdioCard::readData(unsigned char*)+0xb8>)
    adaa:	ldr	r3, [pc, #88]	; (ae04 <SdioCard::readData(unsigned char*)+0xbc>)
    adac:	ldr	r1, [r2, #0]
    adae:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    adb0:	ldr	r1, [r3, #0]
    adb2:	str	r1, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    adb4:	ldr	r2, [r3, #0]
    adb6:	lsls	r2, r2, #30
    adb8:	bpl.n	adea <SdioCard::readData(unsigned char*)+0xa2>
    adba:	ldr	r3, [r3, #0]
    adbc:	ldr	r0, [pc, #72]	; (ae08 <SdioCard::readData(unsigned char*)+0xc0>)
    adbe:	ands	r0, r3
    adc0:	clz	r0, r0
    adc4:	lsrs	r0, r0, #5
    adc6:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    adc8:	ldr	r1, [pc, #64]	; (ae0c <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    adca:	ldr	r3, [pc, #68]	; (ae10 <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    adcc:	movs	r0, #29
  m_errorLine = line;
    adce:	movw	r2, #759	; 0x2f7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    add2:	strb	r0, [r1, #0]
  m_errorLine = line;
    add4:	str	r2, [r3, #0]
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    add6:	movs	r0, #0
    add8:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    adda:	ldr	r1, [pc, #48]	; (ae0c <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    addc:	ldr	r3, [pc, #48]	; (ae10 <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    adde:	movs	r0, #26
  m_errorLine = line;
    ade0:	mov.w	r2, #748	; 0x2ec
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ade4:	strb	r0, [r1, #0]
  m_errorLine = line;
    ade6:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    ade8:	movs	r0, #0
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    adea:	pop	{r3, r4, r5, pc}
    adec:	.word	0x400b1024
    adf0:	.word	0x400b1028
    adf4:	.word	0x0000a009
    adf8:	.word	0x400b1020
    adfc:	.word	0x0000a031
    ae00:	.word	0x400b1030
    ae04:	.word	0x1fff1f58
    ae08:	.word	0x117f0000
    ae0c:	.word	0x1fff09c0
    ae10:	.word	0x1fff1f78

0000ae14 <SdioCard::readStart(unsigned long)>:
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    ae14:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    ae16:	ldr	r0, [pc, #80]	; (ae68 <SdioCard::readStart(unsigned long)+0x54>)
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    ae18:	mov	r4, r1
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    ae1a:	bl	a1a0 <yieldTimeout(bool (*)())>
    ae1e:	cbnz	r0, ae54 <SdioCard::readStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    ae20:	ldr	r2, [pc, #72]	; (ae6c <SdioCard::readStart(unsigned long)+0x58>)
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    ae22:	ldr	r1, [pc, #76]	; (ae70 <SdioCard::readStart(unsigned long)+0x5c>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    ae24:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    ae26:	ldr	r0, [pc, #76]	; (ae74 <SdioCard::readStart(unsigned long)+0x60>)
    ae28:	ldr	r5, [pc, #76]	; (ae78 <SdioCard::readStart(unsigned long)+0x64>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    ae2a:	orr.w	r3, r3, #65536	; 0x10000
    ae2e:	str	r3, [r2, #0]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    ae30:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    ae32:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    ae34:	cbnz	r3, ae50 <SdioCard::readStart(unsigned long)+0x3c>
    ae36:	lsls	r1, r4, #9
    ae38:	ldr	r0, [pc, #64]	; (ae7c <SdioCard::readStart(unsigned long)+0x68>)
    ae3a:	bl	a21c <cardCommand(unsigned long, unsigned long)>
    ae3e:	cbnz	r0, ae4e <SdioCard::readStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ae40:	ldr	r1, [pc, #60]	; (ae80 <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    ae42:	ldr	r3, [pc, #64]	; (ae84 <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ae44:	movs	r4, #12
  m_errorLine = line;
    ae46:	mov.w	r2, #848	; 0x350
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ae4a:	strb	r4, [r1, #0]
  m_errorLine = line;
    ae4c:	str	r2, [r3, #0]

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD18);
  }
  return true;
}
    ae4e:	pop	{r3, r4, r5, pc}
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    ae50:	mov	r1, r4
    ae52:	b.n	ae38 <SdioCard::readStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ae54:	ldr	r1, [pc, #40]	; (ae80 <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    ae56:	ldr	r3, [pc, #44]	; (ae84 <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ae58:	movs	r0, #10
  m_errorLine = line;
    ae5a:	mov.w	r2, #836	; 0x344
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ae5e:	strb	r0, [r1, #0]
  m_errorLine = line;
    ae60:	str	r2, [r3, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    ae62:	movs	r0, #0
    ae64:	pop	{r3, r4, r5, pc}
    ae66:	nop
    ae68:	.word	0x0000a2fd
    ae6c:	.word	0x400b1028
    ae70:	.word	0x1fff1f4c
    ae74:	.word	0x400b1004
    ae78:	.word	0xffff0200
    ae7c:	.word	0x123a0032
    ae80:	.word	0x1fff09c0
    ae84:	.word	0x1fff1f78

0000ae88 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    ae88:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    ae8a:	ldrb	r3, [r0, #8]
    ae8c:	lsls	r4, r3, #31
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    ae8e:	sub.w	sp, sp, #512	; 0x200
    ae92:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    ae94:	bpl.n	aebc <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    ae96:	lsls	r3, r2, #30
    ae98:	beq.n	aeda <SdioCard::readSector(unsigned long, unsigned char*)+0x52>

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    ae9a:	mov	r2, sp
    ae9c:	movs	r3, #1
    ae9e:	ldr	r0, [pc, #168]	; (af48 <SdioCard::readSector(unsigned long, unsigned char*)+0xc0>)
    aea0:	bl	a364 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    aea4:	cbz	r0, aee6 <SdioCard::readSector(unsigned long, unsigned char*)+0x5e>
      return sdError(SD_CARD_ERROR_CMD17);
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    aea6:	mov	r1, sp
    aea8:	mov	r0, r5
    aeaa:	mov.w	r2, #512	; 0x200
    aeae:	bl	b0e0 <memcpy>
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
    aeb2:	movs	r5, #1
}
    aeb4:	mov	r0, r5
    aeb6:	add.w	sp, sp, #512	; 0x200
    aeba:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    aebc:	ldrb	r3, [r0, #9]
    aebe:	cmp	r3, #1
    aec0:	mov	r4, r0
    aec2:	mov	r6, r1
    aec4:	beq.n	aefe <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
      if (!syncDevice()) {
    aec6:	ldr	r3, [r4, #0]
    aec8:	mov	r0, r4
    aeca:	ldr	r3, [r3, #20]
    aecc:	blx	r3
    aece:	cbnz	r0, af24 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
        return false;
    aed0:	movs	r5, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    aed2:	mov	r0, r5
    aed4:	add.w	sp, sp, #512	; 0x200
    aed8:	pop	{r4, r5, r6, pc}
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    aeda:	movs	r3, #1
    aedc:	ldr	r0, [pc, #104]	; (af48 <SdioCard::readSector(unsigned long, unsigned char*)+0xc0>)
    aede:	bl	a364 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    aee2:	cmp	r0, #0
    aee4:	bne.n	aeb2 <SdioCard::readSector(unsigned long, unsigned char*)+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    aee6:	ldr	r1, [pc, #100]	; (af4c <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>)
  m_errorLine = line;
    aee8:	ldr	r3, [pc, #100]	; (af50 <SdioCard::readSector(unsigned long, unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    aeea:	movs	r0, #11
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD17);
    aeec:	movs	r5, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    aeee:	movw	r2, #778	; 0x30a
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    aef2:	strb	r0, [r1, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    aef4:	mov	r0, r5
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    aef6:	str	r2, [r3, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    aef8:	add.w	sp, sp, #512	; 0x200
    aefc:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    aefe:	ldr	r3, [r0, #4]
    af00:	cmp	r1, r3
    af02:	bne.n	aec6 <SdioCard::readSector(unsigned long, unsigned char*)+0x3e>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    }
    if (!readData(dst)) {
    af04:	mov	r1, r5
    af06:	mov	r0, r4
    af08:	bl	ad48 <SdioCard::readData(unsigned char*)>
    af0c:	mov	r5, r0
    af0e:	cmp	r0, #0
    af10:	beq.n	aed0 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    af12:	ldr	r3, [pc, #64]	; (af54 <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>)
    af14:	ldr	r3, [r3, #0]
    af16:	lsrs	r3, r3, #16
    af18:	lsls	r3, r3, #16
    af1a:	cbz	r3, af38 <SdioCard::readSector(unsigned long, unsigned char*)+0xb0>
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
    af1c:	ldr	r3, [r4, #4]
    af1e:	adds	r3, #1
    af20:	str	r3, [r4, #4]
    af22:	b.n	aed2 <SdioCard::readSector(unsigned long, unsigned char*)+0x4a>
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
      if (!syncDevice()) {
        return false;
      }
      if (!readStart(sector)) {
    af24:	mov	r1, r6
    af26:	mov	r0, r4
    af28:	bl	ae14 <SdioCard::readStart(unsigned long)>
    af2c:	cmp	r0, #0
    af2e:	beq.n	aed0 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    af30:	movs	r3, #1
        return false;
      }
      if (!readStart(sector)) {
        return false;
      }
      m_curSector = sector;
    af32:	str	r6, [r4, #4]
      m_curState = READ_STATE;
    af34:	strb	r3, [r4, #9]
    af36:	b.n	af04 <SdioCard::readSector(unsigned long, unsigned char*)+0x7c>
    if (!readData(dst)) {
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
      if (!syncDevice()) {
    af38:	ldr	r3, [r4, #0]
    af3a:	mov	r0, r4
    af3c:	ldr	r3, [r3, #20]
    af3e:	blx	r3
    af40:	cmp	r0, #0
    af42:	bne.n	af1c <SdioCard::readSector(unsigned long, unsigned char*)+0x94>
    af44:	b.n	aed0 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
    af46:	nop
    af48:	.word	0x113a0011
    af4c:	.word	0x1fff09c0
    af50:	.word	0x1fff1f78
    af54:	.word	0x400b1004

0000af58 <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    af58:	push	{r4}
  m_spi->beginTransaction(m_spiSettings);
    af5a:	ldr	r3, [r0, #0]
    af5c:	ldr	r2, [r0, #4]

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    af5e:	ldrb	r1, [r3, #11]
    af60:	cbz	r1, afa2 <SdSpiArduinoDriver::activate()+0x4a>
			__disable_irq();
    af62:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    af64:	ldrb	r1, [r3, #11]
    af66:	lsls	r0, r1, #31
    af68:	bpl.n	af78 <SdSpiArduinoDriver::activate()+0x20>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    af6a:	ldr	r0, [pc, #100]	; (afd0 <SdSpiArduinoDriver::activate()+0x78>)
    af6c:	ldr	r1, [r3, #12]
    af6e:	ldr	r4, [r0, #0]
    af70:	ands	r1, r4
    af72:	str	r1, [r3, #28]
				NVIC_ICER0 = interruptSave[0];
    af74:	str	r1, [r0, #0]
    af76:	ldrb	r1, [r3, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    af78:	lsls	r4, r1, #30
    af7a:	bpl.n	af8a <SdSpiArduinoDriver::activate()+0x32>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    af7c:	ldr	r0, [pc, #84]	; (afd4 <SdSpiArduinoDriver::activate()+0x7c>)
    af7e:	ldr	r1, [r3, #16]
    af80:	ldr	r4, [r0, #0]
    af82:	ands	r1, r4
    af84:	str	r1, [r3, #32]
				NVIC_ICER1 = interruptSave[1];
    af86:	str	r1, [r0, #0]
    af88:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    af8a:	lsls	r0, r1, #29
    af8c:	bpl.n	af9c <SdSpiArduinoDriver::activate()+0x44>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    af8e:	ldr	r0, [pc, #72]	; (afd8 <SdSpiArduinoDriver::activate()+0x80>)
    af90:	ldr	r1, [r3, #20]
    af92:	ldr	r4, [r0, #0]
    af94:	ands	r1, r4
    af96:	str	r1, [r3, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    af98:	str	r1, [r0, #0]
    af9a:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    af9c:	lsls	r1, r1, #28
    af9e:	bmi.n	afc0 <SdSpiArduinoDriver::activate()+0x68>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    afa0:	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    afa2:	ldr	r3, [r3, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    afa4:	ldr	r1, [r3, #12]
    afa6:	cmp	r1, r2
    afa8:	beq.n	afba <SdSpiArduinoDriver::activate()+0x62>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    afaa:	ldr	r0, [pc, #48]	; (afdc <SdSpiArduinoDriver::activate()+0x84>)
    afac:	str	r0, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    afae:	ldr	r1, [pc, #48]	; (afe0 <SdSpiArduinoDriver::activate()+0x88>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    afb0:	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    afb2:	orr.w	r0, r2, #1073741824	; 0x40000000
    afb6:	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    afb8:	str	r1, [r3, #0]
}
    afba:	ldr.w	r4, [sp], #4
    afbe:	bx	lr
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    afc0:	ldr	r0, [pc, #32]	; (afe4 <SdSpiArduinoDriver::activate()+0x8c>)
    afc2:	ldr	r1, [r3, #24]
    afc4:	ldr	r4, [r0, #0]
    afc6:	ands	r1, r4
    afc8:	str	r1, [r3, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    afca:	str	r1, [r0, #0]
    afcc:	b.n	afa0 <SdSpiArduinoDriver::activate()+0x48>
    afce:	nop
    afd0:	.word	0xe000e180
    afd4:	.word	0xe000e184
    afd8:	.word	0xe000e188
    afdc:	.word	0x003f4001
    afe0:	.word	0x803f0000
    afe4:	.word	0xe000e18c

0000afe8 <SdSpiArduinoDriver::deactivate()>:
  }
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    afe8:	ldr	r2, [r0, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    afea:	ldrb	r3, [r2, #11]
    afec:	cbz	r3, b01c <SdSpiArduinoDriver::deactivate()+0x34>
			if (interruptMasksUsed & 0x01) {
    afee:	lsls	r1, r3, #31
    aff0:	bpl.n	affa <SdSpiArduinoDriver::deactivate()+0x12>
				NVIC_ISER0 = interruptSave[0];
    aff2:	ldr	r3, [pc, #44]	; (b020 <SdSpiArduinoDriver::deactivate()+0x38>)
    aff4:	ldr	r1, [r2, #28]
    aff6:	str	r1, [r3, #0]
    aff8:	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    affa:	lsls	r0, r3, #30
    affc:	bpl.n	b006 <SdSpiArduinoDriver::deactivate()+0x1e>
				NVIC_ISER1 = interruptSave[1];
    affe:	ldr	r3, [pc, #36]	; (b024 <SdSpiArduinoDriver::deactivate()+0x3c>)
    b000:	ldr	r1, [r2, #32]
    b002:	str	r1, [r3, #0]
    b004:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    b006:	lsls	r1, r3, #29
    b008:	bpl.n	b012 <SdSpiArduinoDriver::deactivate()+0x2a>
				NVIC_ISER2 = interruptSave[2];
    b00a:	ldr	r3, [pc, #28]	; (b028 <SdSpiArduinoDriver::deactivate()+0x40>)
    b00c:	ldr	r1, [r2, #36]	; 0x24
    b00e:	str	r1, [r3, #0]
    b010:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    b012:	lsls	r3, r3, #28
    b014:	bpl.n	b01c <SdSpiArduinoDriver::deactivate()+0x34>
				NVIC_ISER3 = interruptSave[3];
    b016:	ldr	r3, [pc, #20]	; (b02c <SdSpiArduinoDriver::deactivate()+0x44>)
    b018:	ldr	r2, [r2, #40]	; 0x28
    b01a:	str	r2, [r3, #0]
    b01c:	bx	lr
    b01e:	nop
    b020:	.word	0xe000e100
    b024:	.word	0xe000e104
    b028:	.word	0xe000e108
    b02c:	.word	0xe000e10c

0000b030 <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
    b030:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    b032:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    b034:	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    b038:	movs	r3, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    b03a:	str	r1, [r2, #44]	; 0x2c
		port().PUSHR = data;
    b03c:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    b03e:	ldr	r3, [r2, #44]	; 0x2c
    b040:	cmp	r3, #0
    b042:	bge.n	b03e <SdSpiArduinoDriver::receive()+0xe>
		return port().POPR;
    b044:	ldr	r0, [r2, #56]	; 0x38
  return m_spi->transfer(0XFF);
}
    b046:	uxtb	r0, r0
    b048:	bx	lr
    b04a:	nop

0000b04c <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    b04c:	push	{r4, r5, r6, lr}
    b04e:	mov	r5, r0
    b050:	mov	r4, r1
    b052:	mov	r6, r2
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    b054:	mov	r0, r1
    b056:	movs	r1, #255	; 0xff
    b058:	bl	df8c <memset>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    b05c:	ldr	r0, [r5, #0]
    b05e:	mov	r3, r6
    b060:	mov	r2, r4
    b062:	mov	r1, r4
    b064:	bl	581c <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    b068:	movs	r0, #0
    b06a:	pop	{r4, r5, r6, pc}

0000b06c <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
    b06c:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    b06e:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    b070:	mov.w	r3, #2147483648	; 0x80000000
    b074:	str	r3, [r2, #44]	; 0x2c
		port().PUSHR = data;
    b076:	str	r1, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    b078:	ldr	r3, [r2, #44]	; 0x2c
    b07a:	cmp	r3, #0
    b07c:	bge.n	b078 <SdSpiArduinoDriver::send(unsigned char)+0xc>
		return port().POPR;
    b07e:	ldr	r3, [r2, #56]	; 0x38
    b080:	bx	lr
    b082:	nop

0000b084 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    b084:	push	{r4, r5, lr}
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    b086:	subs	r5, r2, #1
    b088:	cmp.w	r5, #512	; 0x200
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    b08c:	sub.w	sp, sp, #516	; 0x204
    b090:	mov	r3, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    b092:	bcc.n	b0ba <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    b094:	cbz	r2, b0b4 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
    b096:	ldr	r2, [r0, #0]
    b098:	ldr	r2, [r2, #0]
    b09a:	adds	r0, r1, r3
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    b09c:	mov.w	r4, #2147483648	; 0x80000000
    m_spi->transfer(buf[i]);
    b0a0:	ldrb.w	r3, [r1], #1
    b0a4:	str	r4, [r2, #44]	; 0x2c
		port().PUSHR = data;
    b0a6:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    b0a8:	ldr	r3, [r2, #44]	; 0x2c
    b0aa:	cmp	r3, #0
    b0ac:	bge.n	b0a8 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x24>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    b0ae:	cmp	r1, r0
		return port().POPR;
    b0b0:	ldr	r3, [r2, #56]	; 0x38
    b0b2:	bne.n	b0a0 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    b0b4:	add.w	sp, sp, #516	; 0x204
    b0b8:	pop	{r4, r5, pc}
    b0ba:	mov	r5, r0
    b0bc:	mov	r4, r2
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    memcpy(tmp, buf, count);
    b0be:	mov	r0, sp
    b0c0:	bl	b0e0 <memcpy>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    b0c4:	mov	r3, r4
    b0c6:	mov	r2, sp
    b0c8:	mov	r1, sp
    b0ca:	ldr	r0, [r5, #0]
    b0cc:	bl	581c <SPIClass::transfer(void const*, void*, unsigned int)>
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    m_spi->transfer(buf[i]);
  }
}
    b0d0:	add.w	sp, sp, #516	; 0x204
    b0d4:	pop	{r4, r5, pc}
    b0d6:	nop

0000b0d8 <sdCsWrite(unsigned char, bool)>:
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    b0d8:	b.w	b5f8 <digitalWrite>

0000b0dc <usb_mtp_configure>:
		if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
		return 0;
	}

#else
	void usb_mtp_configure(void) {}
    b0dc:	bx	lr
    b0de:	nop

0000b0e0 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    b0e0:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    b0e2:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    b0e6:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    b0ea:	bne.n	b1c8 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    b0ec:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    b0ee:	bcc.n	b174 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    b0f0:	ldr.w	r3, [r1], #4
    b0f4:	str.w	r3, [r0], #4
    b0f8:	ldr.w	r3, [r1], #4
    b0fc:	str.w	r3, [r0], #4
    b100:	ldr.w	r3, [r1], #4
    b104:	str.w	r3, [r0], #4
    b108:	ldr.w	r3, [r1], #4
    b10c:	str.w	r3, [r0], #4
    b110:	ldr.w	r3, [r1], #4
    b114:	str.w	r3, [r0], #4
    b118:	ldr.w	r3, [r1], #4
    b11c:	str.w	r3, [r0], #4
    b120:	ldr.w	r3, [r1], #4
    b124:	str.w	r3, [r0], #4
    b128:	ldr.w	r3, [r1], #4
    b12c:	str.w	r3, [r0], #4
    b130:	ldr.w	r3, [r1], #4
    b134:	str.w	r3, [r0], #4
    b138:	ldr.w	r3, [r1], #4
    b13c:	str.w	r3, [r0], #4
    b140:	ldr.w	r3, [r1], #4
    b144:	str.w	r3, [r0], #4
    b148:	ldr.w	r3, [r1], #4
    b14c:	str.w	r3, [r0], #4
    b150:	ldr.w	r3, [r1], #4
    b154:	str.w	r3, [r0], #4
    b158:	ldr.w	r3, [r1], #4
    b15c:	str.w	r3, [r0], #4
    b160:	ldr.w	r3, [r1], #4
    b164:	str.w	r3, [r0], #4
    b168:	ldr.w	r3, [r1], #4
    b16c:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    b170:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    b172:	bcs.n	b0f0 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    b174:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    b176:	bcc.n	b19c <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    b178:	ldr.w	r3, [r1], #4
    b17c:	str.w	r3, [r0], #4
    b180:	ldr.w	r3, [r1], #4
    b184:	str.w	r3, [r0], #4
    b188:	ldr.w	r3, [r1], #4
    b18c:	str.w	r3, [r0], #4
    b190:	ldr.w	r3, [r1], #4
    b194:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    b198:	subs	r2, #16
	bhs	.Lmid_block_loop
    b19a:	bcs.n	b178 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    b19c:	adds	r2, #12
	blo	.Lcopy_less_than_4
    b19e:	bcc.n	b1ac <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    b1a0:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    b1a4:	str.w	r3, [r0], #4
	subs	r2, #4
    b1a8:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    b1aa:	bcs.n	b1a0 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    b1ac:	adds	r2, #4
	beq	.Ldone
    b1ae:	beq.n	b1c2 <memcpy+0xe2>

	lsls	r2, r2, #31
    b1b0:	lsls	r2, r2, #31
	itt ne
    b1b2:	itt	ne
	ldrbne  r3, [r1], #1
    b1b4:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    b1b8:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    b1bc:	bcc.n	b1c2 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    b1be:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    b1c0:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    b1c2:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    b1c4:	bx	lr
    b1c6:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    b1c8:	cmp	r2, #8
	blo	.Lbyte_copy
    b1ca:	bcc.n	b1f4 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    b1cc:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    b1ce:	beq.n	b0ec <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    b1d0:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    b1d4:	beq.n	b0ec <memcpy+0xc>

	rsb	r3, #4
    b1d6:	rsb	r3, r3, #4
	subs	r2, r3
    b1da:	subs	r2, r2, r3

	lsls    r3, r3, #31
    b1dc:	lsls	r3, r3, #31
	itt ne
    b1de:	itt	ne
	ldrbne  r3, [r1], #1
    b1e0:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    b1e4:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    b1e8:	bcc.n	b0ec <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    b1ea:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    b1ee:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    b1f2:	b.n	b0ec <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    b1f4:	subs	r2, #4
	blo	.Lcopy_less_than_4
    b1f6:	bcc.n	b1ac <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    b1f8:	subs	r2, #1
	ldrb    r3, [r1], #1
    b1fa:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    b1fe:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    b202:	bcs.n	b1f8 <memcpy+0x118>

	ldrb	r3, [r1]
    b204:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    b206:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    b208:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    b20a:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    b20c:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    b20e:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    b210:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    b212:	bx	lr

0000b214 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    b214:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    b216:	ldr	r5, [pc, #60]	; (b254 <usb_serial_getchar+0x40>)
    b218:	ldr	r0, [r5, #0]
    b21a:	cbz	r0, b23c <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    b21c:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    b21e:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    b220:	adds	r1, r0, r3
    b222:	adds	r3, #1
	if (i >= rx_packet->len) {
    b224:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    b226:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    b228:	bcs.n	b230 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    b22a:	strh	r3, [r0, #2]
	}
	return c;
    b22c:	mov	r0, r4
}
    b22e:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    b230:	bl	b890 <usb_free>
		rx_packet = NULL;
    b234:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    b236:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    b238:	str	r3, [r5, #0]
    b23a:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    b23c:	ldr	r3, [pc, #24]	; (b258 <usb_serial_getchar+0x44>)
    b23e:	ldrb	r3, [r3, #0]
    b240:	cbz	r3, b24e <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    b242:	movs	r0, #2
    b244:	bl	b8dc <usb_rx>
    b248:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    b24a:	cmp	r0, #0
    b24c:	bne.n	b21c <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    b24e:	mov.w	r0, #4294967295
    b252:	pop	{r3, r4, r5, pc}
    b254:	.word	0x1fff1f88
    b258:	.word	0x1fff2094

0000b25c <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    b25c:	push	{r4, lr}
	if (!rx_packet) {
    b25e:	ldr	r4, [pc, #36]	; (b284 <usb_serial_peekchar+0x28>)
    b260:	ldr	r0, [r4, #0]
    b262:	cbz	r0, b26c <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    b264:	ldrh	r3, [r0, #2]
    b266:	add	r0, r3
    b268:	ldrb	r0, [r0, #8]
}
    b26a:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    b26c:	ldr	r3, [pc, #24]	; (b288 <usb_serial_peekchar+0x2c>)
    b26e:	ldrb	r3, [r3, #0]
    b270:	cbz	r3, b27e <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    b272:	movs	r0, #2
    b274:	bl	b8dc <usb_rx>
    b278:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    b27a:	cmp	r0, #0
    b27c:	bne.n	b264 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    b27e:	mov.w	r0, #4294967295
    b282:	pop	{r4, pc}
    b284:	.word	0x1fff1f88
    b288:	.word	0x1fff2094

0000b28c <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    b28c:	ldr	r3, [pc, #16]	; (b2a0 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    b28e:	ldr	r2, [pc, #20]	; (b2a4 <usb_serial_available+0x18>)
    b290:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    b292:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    b294:	cbz	r3, b29e <usb_serial_available+0x12>
    b296:	ldrh	r2, [r3, #0]
    b298:	ldrh	r3, [r3, #2]
    b29a:	subs	r3, r2, r3
    b29c:	add	r0, r3
	return count;
}
    b29e:	bx	lr
    b2a0:	.word	0x1fff1f88
    b2a4:	.word	0x1fff2110

0000b2a8 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    b2a8:	ldr	r3, [pc, #44]	; (b2d8 <usb_serial_flush_input+0x30>)
    b2aa:	ldrb	r3, [r3, #0]
    b2ac:	cbz	r3, b2d6 <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    b2ae:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    b2b0:	ldr	r4, [pc, #40]	; (b2dc <usb_serial_flush_input+0x34>)
    b2b2:	ldr	r0, [r4, #0]
    b2b4:	cbz	r0, b2ca <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    b2b6:	bl	b890 <usb_free>
		rx_packet = NULL;
    b2ba:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    b2bc:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    b2be:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    b2c0:	bl	b8dc <usb_rx>
		if (!rx) break;
    b2c4:	cbz	r0, b2d4 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    b2c6:	bl	b890 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    b2ca:	movs	r0, #2
    b2cc:	bl	b8dc <usb_rx>
		if (!rx) break;
    b2d0:	cmp	r0, #0
    b2d2:	bne.n	b2c6 <usb_serial_flush_input+0x1e>
    b2d4:	pop	{r4, pc}
    b2d6:	bx	lr
    b2d8:	.word	0x1fff2094
    b2dc:	.word	0x1fff1f88

0000b2e0 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    b2e0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    b2e4:	ldr.w	r9, [pc, #248]	; b3e0 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    b2e8:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    b2ea:	movs	r2, #1
    b2ec:	strb.w	r2, [r9]
	while (size > 0) {
    b2f0:	str	r1, [sp, #4]
    b2f2:	cbz	r1, b350 <usb_serial_write+0x70>
    b2f4:	ldr.w	r8, [pc, #236]	; b3e4 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    b2f8:	ldr	r7, [pc, #216]	; (b3d4 <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    b2fa:	ldr	r6, [sp, #4]
    b2fc:	mov	fp, r0
		if (!tx_packet) {
    b2fe:	ldr.w	r0, [r8]
    b302:	cbz	r0, b372 <usb_serial_write+0x92>
    b304:	ldr	r5, [pc, #208]	; (b3d8 <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    b306:	ldrh	r4, [r0, #2]
    b308:	rsb	r1, r4, #64	; 0x40
    b30c:	cmp	r1, r6
    b30e:	it	cs
    b310:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    b312:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    b316:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    b318:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    b31c:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    b31e:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    b320:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    b324:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    b328:	cbz	r1, b340 <usb_serial_write+0x60>
    b32a:	subs	r4, #1
    b32c:	add	r2, r4
    b32e:	add	r1, fp
    b330:	ldrb.w	r4, [fp], #1
    b334:	strb.w	r4, [r2, #1]!
    b338:	cmp	fp, r1
    b33a:	bne.n	b330 <usb_serial_write+0x50>
    b33c:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    b340:	cmp.w	lr, #63	; 0x3f
    b344:	bhi.n	b35e <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    b346:	ldr	r2, [pc, #148]	; (b3dc <usb_serial_write+0xfc>)
    b348:	movs	r1, #5
    b34a:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    b34c:	cmp	r6, #0
    b34e:	bne.n	b2fe <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    b350:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    b352:	movs	r3, #0
    b354:	strb.w	r3, [r9]
	return ret;
}
    b358:	add	sp, #12
    b35a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    b35e:	movs	r2, #64	; 0x40
    b360:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    b362:	mov	r1, r0
    b364:	movs	r0, #3
    b366:	bl	ba4c <usb_tx>
			tx_packet = NULL;
    b36a:	movs	r2, #0
    b36c:	str.w	r2, [r8]
    b370:	b.n	b346 <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    b372:	ldrb	r2, [r7, #0]
    b374:	cbz	r2, b3c2 <usb_serial_write+0xe2>
    b376:	ldr	r5, [pc, #96]	; (b3d8 <usb_serial_write+0xf8>)
    b378:	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    b37c:	mov.w	sl, #1
    b380:	b.n	b392 <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    b382:	subs	r4, #1
    b384:	beq.n	b3b4 <usb_serial_write+0xd4>
    b386:	ldrb	r2, [r5, #0]
    b388:	cbnz	r2, b3b4 <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    b38a:	bl	c5e0 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    b38e:	ldrb	r2, [r7, #0]
    b390:	cbz	r2, b3c2 <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    b392:	movs	r0, #3
    b394:	bl	b918 <usb_tx_packet_count>
    b398:	cmp	r0, #7
    b39a:	bhi.n	b382 <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    b39c:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    b3a0:	bl	b850 <usb_malloc>
    b3a4:	str.w	r0, [r8]
					if (tx_packet) break;
    b3a8:	cmp	r0, #0
    b3aa:	bne.n	b306 <usb_serial_write+0x26>
					tx_noautoflush = 0;
    b3ac:	ldr	r3, [pc, #48]	; (b3e0 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    b3ae:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    b3b0:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    b3b2:	bne.n	b386 <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    b3b4:	movs	r3, #1
					return -1;
    b3b6:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    b3ba:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    b3bc:	add	sp, #12
    b3be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    b3c2:	movs	r3, #0
					return -1;
    b3c4:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    b3c8:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    b3cc:	add	sp, #12
    b3ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b3d2:	nop
    b3d4:	.word	0x1fff2094
    b3d8:	.word	0x1fff1f84
    b3dc:	.word	0x1fff1f7c
    b3e0:	.word	0x1fff1f7d
    b3e4:	.word	0x1fff1f80

0000b3e8 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    b3e8:	push	{lr}
    b3ea:	sub	sp, #12
    b3ec:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    b3ee:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    b3f0:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    b3f4:	mov	r0, r3
    b3f6:	bl	b2e0 <usb_serial_write>
}
    b3fa:	add	sp, #12
    b3fc:	ldr.w	pc, [sp], #4

0000b400 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    b400:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    b402:	ldr	r5, [pc, #56]	; (b43c <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    b404:	ldr	r4, [pc, #56]	; (b440 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    b406:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    b408:	movs	r3, #1
    b40a:	strb	r3, [r4, #0]
	if (!tx_packet) {
    b40c:	cbz	r0, b41a <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    b40e:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    b410:	movs	r3, #0
    b412:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    b414:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    b418:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    b41a:	ldr	r3, [pc, #40]	; (b444 <usb_serial_write_buffer_free+0x44>)
    b41c:	ldrb	r3, [r3, #0]
    b41e:	cbnz	r3, b426 <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    b420:	movs	r0, #0
    b422:	strb	r0, [r4, #0]
			return 0;
    b424:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    b426:	movs	r0, #3
    b428:	bl	b918 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    b42c:	cmp	r0, #7
    b42e:	bhi.n	b420 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    b430:	bl	b850 <usb_malloc>
    b434:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    b436:	cmp	r0, #0
    b438:	bne.n	b40e <usb_serial_write_buffer_free+0xe>
    b43a:	b.n	b420 <usb_serial_write_buffer_free+0x20>
    b43c:	.word	0x1fff1f80
    b440:	.word	0x1fff1f7d
    b444:	.word	0x1fff2094

0000b448 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    b448:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    b44a:	ldr	r3, [pc, #68]	; (b490 <usb_serial_flush_output+0x48>)
    b44c:	ldrb	r3, [r3, #0]
    b44e:	cbz	r3, b474 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    b450:	ldr	r6, [pc, #64]	; (b494 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    b452:	ldr	r5, [pc, #68]	; (b498 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    b454:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    b456:	movs	r7, #1
    b458:	strb	r7, [r5, #0]
	if (tx_packet) {
    b45a:	cbz	r4, b476 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    b45c:	ldr	r2, [pc, #60]	; (b49c <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    b45e:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    b460:	movs	r7, #0
    b462:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    b464:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    b466:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    b468:	movs	r0, #3
    b46a:	bl	ba4c <usb_tx>
		tx_packet = NULL;
    b46e:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    b470:	movs	r3, #0
    b472:	strb	r3, [r5, #0]
    b474:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    b476:	bl	b850 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    b47a:	ldr	r3, [pc, #32]	; (b49c <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    b47c:	cbz	r0, b48a <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    b47e:	mov	r1, r0
    b480:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    b482:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    b484:	bl	ba4c <usb_tx>
    b488:	b.n	b470 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    b48a:	strb	r7, [r3, #0]
    b48c:	b.n	b470 <usb_serial_flush_output+0x28>
    b48e:	nop
    b490:	.word	0x1fff2094
    b494:	.word	0x1fff1f80
    b498:	.word	0x1fff1f7d
    b49c:	.word	0x1fff1f7c

0000b4a0 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    b4a0:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    b4a2:	ldr	r3, [pc, #56]	; (b4dc <usb_serial_flush_callback+0x3c>)
    b4a4:	ldrb	r3, [r3, #0]
    b4a6:	cbnz	r3, b4c6 <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    b4a8:	ldr	r4, [pc, #52]	; (b4e0 <usb_serial_flush_callback+0x40>)
    b4aa:	ldr	r1, [r4, #0]
    b4ac:	cbz	r1, b4c8 <usb_serial_flush_callback+0x28>
    b4ae:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    b4b2:	ldrh	r3, [r1, #2]
    b4b4:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    b4b6:	movs	r0, #3
    b4b8:	bl	ba4c <usb_tx>
		tx_packet = NULL;
    b4bc:	str	r5, [r4, #0]
    b4be:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    b4c0:	ldr	r3, [pc, #32]	; (b4e4 <usb_serial_flush_callback+0x44>)
    b4c2:	movs	r2, #1
    b4c4:	strb	r2, [r3, #0]
    b4c6:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    b4c8:	bl	b850 <usb_malloc>
		if (tx) {
    b4cc:	cmp	r0, #0
    b4ce:	beq.n	b4c0 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    b4d0:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    b4d2:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    b4d6:	movs	r0, #3
    b4d8:	b.w	ba4c <usb_tx>
    b4dc:	.word	0x1fff1f7d
    b4e0:	.word	0x1fff1f80
    b4e4:	.word	0x1fff1f7c

0000b4e8 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    b4e8:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    b4ea:	ldr	r4, [pc, #64]	; (b52c <fault_isr+0x44>)
    b4ec:	b.n	b500 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    b4ee:	ldr	r3, [r4, #0]
    b4f0:	lsls	r1, r3, #21
    b4f2:	bmi.n	b510 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    b4f4:	ldr	r3, [r4, #0]
    b4f6:	lsls	r2, r3, #20
    b4f8:	bmi.n	b51a <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    b4fa:	ldr	r3, [r4, #0]
    b4fc:	lsls	r3, r3, #19
    b4fe:	bmi.n	b524 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    b500:	ldr	r3, [r4, #0]
    b502:	lsls	r0, r3, #13
    b504:	bpl.n	b4ee <fault_isr+0x6>
    b506:	bl	bad0 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    b50a:	ldr	r3, [r4, #0]
    b50c:	lsls	r1, r3, #21
    b50e:	bpl.n	b4f4 <fault_isr+0xc>
    b510:	bl	b530 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    b514:	ldr	r3, [r4, #0]
    b516:	lsls	r2, r3, #20
    b518:	bpl.n	b4fa <fault_isr+0x12>
    b51a:	bl	b530 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    b51e:	ldr	r3, [r4, #0]
    b520:	lsls	r3, r3, #19
    b522:	bpl.n	b500 <fault_isr+0x18>
    b524:	bl	b530 <unused_isr>
    b528:	b.n	b500 <fault_isr+0x18>
    b52a:	nop
    b52c:	.word	0x40048034

0000b530 <unused_isr>:
	}
}

void unused_isr(void)
{
    b530:	push	{r3, lr}
	fault_isr();
    b532:	bl	b4e8 <fault_isr>
    b536:	nop

0000b538 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    b538:	ldr	r3, [pc, #4]	; (b540 <startup_early_hook+0x8>)
    b53a:	movs	r2, #16
    b53c:	strh	r2, [r3, #0]
    b53e:	bx	lr
    b540:	.word	0x40052000

0000b544 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    b544:	bx	lr
    b546:	nop

0000b548 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    b548:	ldr	r1, [pc, #36]	; (b570 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    b54a:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    b54c:	ldr	r3, [r1, #0]
	if (incr != 0) {
    b54e:	cbz	r0, b55e <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    b550:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    b552:	add	r0, r3
    b554:	sub.w	r2, r2, #8192	; 0x2000
    b558:	cmp	r0, r2
    b55a:	bcs.n	b562 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    b55c:	str	r0, [r1, #0]
	}
	return prev;
    b55e:	mov	r0, r3
}
    b560:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    b562:	bl	d7a4 <__errno>
    b566:	movs	r3, #12
    b568:	str	r3, [r0, #0]
			return (void *)-1;
    b56a:	mov.w	r0, #4294967295
    b56e:	pop	{r3, pc}
    b570:	.word	0x1fff09c4

0000b574 <__cxa_pure_virtual>:
	while (1);
}

__attribute__((weak)) 
void __cxa_pure_virtual()
{
    b574:	b.n	b574 <__cxa_pure_virtual>
    b576:	nop

0000b578 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    b578:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    b57a:	ldr	r3, [pc, #68]	; (b5c0 <digitalWrite.part.1+0x48>)
    b57c:	ldr.w	r2, [r3, r0, lsl #3]
    b580:	ldrb.w	r4, [r2, #640]	; 0x280
    b584:	cbz	r4, b594 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    b586:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    b588:	cbz	r1, b5aa <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    b58a:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    b58e:	ldr.w	r4, [sp], #4
    b592:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    b594:	add.w	r3, r3, r0, lsl #3
    b598:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    b59a:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    b59c:	cbnz	r1, b5b4 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    b59e:	bic.w	r2, r2, #2
    b5a2:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    b5a4:	ldr.w	r4, [sp], #4
    b5a8:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    b5aa:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    b5ae:	ldr.w	r4, [sp], #4
    b5b2:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    b5b4:	orr.w	r2, r2, #3
    b5b8:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    b5ba:	ldr.w	r4, [sp], #4
    b5be:	bx	lr
    b5c0:	.word	0x00011dd8

0000b5c4 <attachInterruptVector>:
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    b5c4:	adds	r0, #16
    b5c6:	ldr	r3, [pc, #8]	; (b5d0 <attachInterruptVector+0xc>)
    b5c8:	str.w	r1, [r3, r0, lsl #2]
    b5cc:	bx	lr
    b5ce:	nop
    b5d0:	.word	0x1fff0200

0000b5d4 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    b5d4:	push	{r4, r5}
	RTC_SR = 0;
    b5d6:	ldr	r3, [pc, #20]	; (b5ec <rtc_set+0x18>)
	RTC_TPR = 0;
    b5d8:	ldr	r5, [pc, #20]	; (b5f0 <rtc_set+0x1c>)
	RTC_TSR = t;
    b5da:	ldr	r4, [pc, #24]	; (b5f4 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    b5dc:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    b5de:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    b5e0:	str	r2, [r3, #0]
	RTC_TPR = 0;
    b5e2:	str	r2, [r5, #0]
	RTC_TSR = t;
    b5e4:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    b5e6:	str	r1, [r3, #0]
}
    b5e8:	pop	{r4, r5}
    b5ea:	bx	lr
    b5ec:	.word	0x4003d014
    b5f0:	.word	0x4003d004
    b5f4:	.word	0x4003d000

0000b5f8 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    b5f8:	cmp	r0, #63	; 0x3f
    b5fa:	bhi.n	b600 <digitalWrite+0x8>
    b5fc:	b.w	b578 <digitalWrite.part.1>
    b600:	bx	lr
    b602:	nop

0000b604 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    b604:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    b606:	ldr	r1, [pc, #48]	; (b638 <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    b608:	ldr	r3, [pc, #48]	; (b63c <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    b60a:	ldr	r2, [pc, #52]	; (b640 <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    b60c:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    b60e:	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    b610:	ldr	r2, [r2, #0]
	__enable_irq();
    b612:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    b614:	lsls	r2, r2, #5
    b616:	bpl.n	b61e <micros+0x1a>
    b618:	cmp	r3, #50	; 0x32
    b61a:	it	hi
    b61c:	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    b61e:	ldr	r1, [pc, #36]	; (b644 <micros+0x40>)
    b620:	rsb	r3, r3, #95744	; 0x17600
    b624:	mov.w	r2, #1000	; 0x3e8
    b628:	adds	r3, #255	; 0xff
    b62a:	umull	r1, r3, r1, r3
    b62e:	mul.w	r0, r2, r0
}
    b632:	add.w	r0, r0, r3, lsr #6
    b636:	bx	lr
    b638:	.word	0x1fff1f90
    b63c:	.word	0xe000e018
    b640:	.word	0xe000ed04
    b644:	.word	0xaaaaaaab

0000b648 <delay>:

void delay(uint32_t ms)
{
    b648:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b64c:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    b64e:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    b650:	ldr	r7, [pc, #128]	; (b6d4 <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    b652:	ldr	r3, [pc, #132]	; (b6d8 <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    b654:	ldr	r2, [pc, #132]	; (b6dc <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    b656:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    b658:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    b65a:	ldr	r2, [r2, #0]
	__enable_irq();
    b65c:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    b65e:	lsls	r2, r2, #5
    b660:	bpl.n	b668 <delay+0x20>
    b662:	cmp	r3, #50	; 0x32
    b664:	it	hi
    b666:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    b668:	cbz	r5, b6d0 <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    b66a:	rsb	r3, r3, #95744	; 0x17600
    b66e:	ldr	r6, [pc, #112]	; (b6e0 <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    b670:	ldr.w	r9, [pc, #100]	; b6d8 <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    b674:	ldr.w	r8, [pc, #100]	; b6dc <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    b678:	adds	r3, #255	; 0xff
    b67a:	mov.w	r2, #1000	; 0x3e8
    b67e:	umull	r1, r3, r6, r3
    b682:	mul.w	r4, r2, r4
    b686:	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    b68a:	cpsid	i
	current = SYST_CVR;
    b68c:	ldr.w	r1, [r9]
	count = systick_millis_count;
    b690:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    b692:	ldr.w	lr, [r8]
	__enable_irq();
    b696:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    b698:	rsb	r3, r1, #95744	; 0x17600
    b69c:	adds	r3, #255	; 0xff
    b69e:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    b6a2:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    b6a6:	rsb	r3, r4, r3, lsr #6
    b6aa:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    b6ae:	beq.n	b6b6 <delay+0x6e>
    b6b0:	cmp	r1, #50	; 0x32
    b6b2:	it	hi
    b6b4:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    b6b6:	mla	r3, r0, r2, r3
    b6ba:	cmp.w	r3, #1000	; 0x3e8
    b6be:	bcc.n	b6ca <delay+0x82>
				ms--;
				if (ms == 0) return;
    b6c0:	subs	r5, #1
    b6c2:	beq.n	b6d0 <delay+0x88>
				start += 1000;
    b6c4:	add.w	r4, r4, #1000	; 0x3e8
    b6c8:	b.n	b68a <delay+0x42>
			}
			yield();
    b6ca:	bl	c5e0 <yield>
		}
    b6ce:	b.n	b68a <delay+0x42>
    b6d0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b6d4:	.word	0x1fff1f90
    b6d8:	.word	0xe000e018
    b6dc:	.word	0xe000ed04
    b6e0:	.word	0xaaaaaaab

0000b6e4 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    b6e4:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    b6e6:	ldr	r3, [pc, #312]	; (b820 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    b6e8:	ldr	r0, [pc, #312]	; (b824 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    b6ea:	ldr.w	ip, [pc, #348]	; b848 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    b6ee:	ldr	r4, [pc, #312]	; (b828 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    b6f0:	ldr	r1, [pc, #312]	; (b82c <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    b6f2:	ldr.w	lr, [pc, #344]	; b84c <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    b6f6:	ldr	r6, [pc, #312]	; (b830 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    b6f8:	ldr	r5, [pc, #312]	; (b834 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    b6fa:	ldr	r7, [pc, #316]	; (b838 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    b6fc:	mov.w	r2, #134217728	; 0x8000000
    b700:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    b702:	mov.w	r2, #268435456	; 0x10000000
    b706:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    b708:	mov.w	r2, #536870912	; 0x20000000
    b70c:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    b70e:	mov.w	r2, #1073741824	; 0x40000000
    b712:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    b714:	mov.w	r2, #2147483648	; 0x80000000
    b718:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    b71a:	movs	r2, #0
    b71c:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    b71e:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    b720:	movw	r0, #49151	; 0xbfff
    b724:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    b728:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    b72c:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    b72e:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    b732:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    b734:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    b736:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    b738:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    b73c:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    b73e:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    b742:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    b744:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    b748:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    b74a:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    b74e:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    b752:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    b756:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    b75a:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    b75e:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    b760:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    b764:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    b766:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    b768:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    b76a:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    b76e:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    b770:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    b772:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    b774:	ldr	r4, [pc, #196]	; (b83c <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    b776:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    b778:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    b77a:	movs	r1, #9
    b77c:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    b77e:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    b782:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    b786:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    b788:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    b78a:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    b78c:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    b78e:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    b790:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    b792:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    b796:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    b79a:	add.w	r7, r7, #520192	; 0x7f000
    b79e:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    b7a0:	addw	r4, r4, #2044	; 0x7fc
    b7a4:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    b7a6:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    b7a8:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    b7aa:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    b7ac:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    b7b0:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    b7b2:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    b7b6:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    b7ba:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    b7bc:	sub.w	r4, r4, #460800	; 0x70800
    b7c0:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    b7c4:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    b7c6:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    b7c8:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    b7cc:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    b7ce:	ldr	r0, [pc, #112]	; (b840 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    b7d0:	orr.w	r1, r1, #512	; 0x200
    b7d4:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    b7d6:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    b7d8:	ldr	r4, [pc, #104]	; (b844 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    b7da:	add.w	lr, lr, #65280	; 0xff00
    b7de:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    b7e2:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    b7e6:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    b7ea:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    b7ee:	orr.w	r1, r1, #33554432	; 0x2000000
    b7f2:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    b7f4:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    b7f8:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    b7fc:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    b7fe:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    b800:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    b802:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    b804:	str	r2, [r4, #0]
#endif
	analog_init();
    b806:	bl	c9ac <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    b80a:	movs	r0, #25
    b80c:	bl	b648 <delay>
	usb_init();
    b810:	bl	c518 <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    b814:	movw	r0, #275	; 0x113
}
    b818:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    b81c:	b.w	b648 <delay>
    b820:	.word	0xe000e104
    b824:	.word	0x40038004
    b828:	.word	0x40038014
    b82c:	.word	0x4003801c
    b830:	.word	0x40038024
    b834:	.word	0x4003802c
    b838:	.word	0x40038034
    b83c:	.word	0x40038000
    b840:	.word	0x40048004
    b844:	.word	0x400c9000
    b848:	.word	0x40038008
    b84c:	.word	0x4003800c

0000b850 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    b850:	cpsid	i
	avail = usb_buffer_available;
    b852:	ldr	r0, [pc, #52]	; (b888 <usb_malloc+0x38>)
    b854:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    b856:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    b85a:	cmp	r3, #19
    b85c:	bgt.n	b880 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    b85e:	mov.w	r1, #2147483648	; 0x80000000
    b862:	lsrs	r1, r3
    b864:	bic.w	r2, r2, r1
    b868:	str	r2, [r0, #0]
	__enable_irq();
    b86a:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    b86c:	ldr	r0, [pc, #28]	; (b88c <usb_malloc+0x3c>)
    b86e:	add.w	r3, r3, r3, lsl #3
    b872:	lsls	r3, r3, #3
    b874:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    b876:	movs	r1, #0
    b878:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    b87a:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    b87c:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    b87e:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    b880:	cpsie	i
		return NULL;
    b882:	movs	r0, #0
    b884:	bx	lr
    b886:	nop
    b888:	.word	0x1fff09c8
    b88c:	.word	0x1fff03d0

0000b890 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    b890:	ldr	r3, [pc, #52]	; (b8c8 <usb_free+0x38>)
    b892:	ldr	r2, [pc, #56]	; (b8cc <usb_free+0x3c>)
    b894:	subs	r3, r0, r3
    b896:	umull	r2, r3, r2, r3
    b89a:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    b89c:	cmp	r3, #19
    b89e:	bhi.n	b8ba <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    b8a0:	ldr	r2, [pc, #44]	; (b8d0 <usb_free+0x40>)
    b8a2:	ldrb	r2, [r2, #0]
    b8a4:	cbnz	r2, b8bc <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    b8a6:	cpsid	i
	usb_buffer_available |= mask;
    b8a8:	ldr	r0, [pc, #40]	; (b8d4 <usb_free+0x44>)
    b8aa:	mov.w	r1, #2147483648	; 0x80000000
    b8ae:	ldr	r2, [r0, #0]
    b8b0:	lsr.w	r3, r1, r3
    b8b4:	orrs	r2, r3
    b8b6:	str	r2, [r0, #0]
	__enable_irq();
    b8b8:	cpsie	i
    b8ba:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    b8bc:	ldr	r2, [pc, #24]	; (b8d8 <usb_free+0x48>)
    b8be:	ldrb	r2, [r2, #0]
    b8c0:	cmp	r2, #0
    b8c2:	beq.n	b8a6 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    b8c4:	b.w	b944 <usb_rx_memory>
    b8c8:	.word	0x1fff03d0
    b8cc:	.word	0x38e38e39
    b8d0:	.word	0x1fff2089
    b8d4:	.word	0x1fff09c8
    b8d8:	.word	0x1fff2094

0000b8dc <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    b8dc:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    b8de:	cmp	r3, #5
    b8e0:	bhi.n	b90c <usb_rx+0x30>
	__disable_irq();
    b8e2:	cpsid	i
	ret = rx_first[endpoint];
    b8e4:	ldr	r1, [pc, #40]	; (b910 <usb_rx+0x34>)
    b8e6:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    b8ea:	cbz	r0, b908 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    b8ec:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    b8ee:	ldr	r4, [pc, #36]	; (b914 <usb_rx+0x38>)
    b8f0:	ldrh	r5, [r0, #0]
    b8f2:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    b8f6:	ldr	r6, [r0, #4]
    b8f8:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    b8fc:	subs	r2, r2, r5
    b8fe:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    b902:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    b904:	pop	{r4, r5, r6}
    b906:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    b908:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    b90a:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    b90c:	movs	r0, #0
    b90e:	bx	lr
    b910:	.word	0x1fff1ff4
    b914:	.word	0x1fff2110

0000b918 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    b918:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    b91a:	cmp	r0, #5
    b91c:	bhi.n	b936 <usb_tx_packet_count+0x1e>
	__disable_irq();
    b91e:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    b920:	ldr	r3, [pc, #28]	; (b940 <usb_tx_packet_count+0x28>)
    b922:	ldr.w	r3, [r3, r0, lsl #2]
    b926:	cbz	r3, b93a <usb_tx_packet_count+0x22>
    b928:	movs	r0, #0
    b92a:	ldr	r3, [r3, #4]
    b92c:	adds	r0, #1
    b92e:	cmp	r3, #0
    b930:	bne.n	b92a <usb_tx_packet_count+0x12>
	__enable_irq();
    b932:	cpsie	i
	return count;
    b934:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    b936:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    b938:	bx	lr
// https://forum.pjrc.com/threads/58663?p=223513&viewfull=1#post223513
//
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    b93a:	mov	r0, r3
    b93c:	b.n	b932 <usb_tx_packet_count+0x1a>
    b93e:	nop
    b940:	.word	0x1fff2050

0000b944 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    b944:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    b946:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    b948:	ldr	r2, [pc, #236]	; (ba38 <usb_rx_memory+0xf4>)
    b94a:	ldrb	r3, [r2, #0]
    b94c:	lsls	r1, r3, #28
    b94e:	bpl.n	b95e <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    b950:	ldr	r3, [pc, #232]	; (ba3c <usb_rx_memory+0xf8>)
    b952:	ldr	r1, [r3, #32]
    b954:	cmp	r1, #0
    b956:	beq.n	b9f8 <usb_rx_memory+0xb4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    b958:	ldr	r1, [r3, #40]	; 0x28
    b95a:	cmp	r1, #0
    b95c:	beq.n	ba14 <usb_rx_memory+0xd0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    b95e:	ldrb	r3, [r2, #1]
    b960:	lsls	r3, r3, #28
    b962:	bpl.n	b972 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    b964:	ldr	r3, [pc, #212]	; (ba3c <usb_rx_memory+0xf8>)
    b966:	ldr	r1, [r3, #64]	; 0x40
    b968:	cmp	r1, #0
    b96a:	beq.n	ba28 <usb_rx_memory+0xe4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    b96c:	ldr	r1, [r3, #72]	; 0x48
    b96e:	cmp	r1, #0
    b970:	beq.n	ba18 <usb_rx_memory+0xd4>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    b972:	ldrb	r3, [r2, #2]
    b974:	lsls	r5, r3, #28
    b976:	bpl.n	b986 <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    b978:	ldr	r3, [pc, #192]	; (ba3c <usb_rx_memory+0xf8>)
    b97a:	ldr	r1, [r3, #96]	; 0x60
    b97c:	cmp	r1, #0
    b97e:	beq.n	ba24 <usb_rx_memory+0xe0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    b980:	ldr	r1, [r3, #104]	; 0x68
    b982:	cmp	r1, #0
    b984:	beq.n	ba1c <usb_rx_memory+0xd8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    b986:	ldrb	r3, [r2, #3]
    b988:	lsls	r4, r3, #28
    b98a:	bpl.n	b99e <usb_rx_memory+0x5a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    b98c:	ldr	r3, [pc, #172]	; (ba3c <usb_rx_memory+0xf8>)
    b98e:	ldr.w	r1, [r3, #128]	; 0x80
    b992:	cmp	r1, #0
    b994:	beq.n	ba2c <usb_rx_memory+0xe8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    b996:	ldr.w	r1, [r3, #136]	; 0x88
    b99a:	cmp	r1, #0
    b99c:	beq.n	ba20 <usb_rx_memory+0xdc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    b99e:	ldrb	r3, [r2, #4]
    b9a0:	lsls	r1, r3, #28
    b9a2:	bpl.n	b9b4 <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    b9a4:	ldr	r3, [pc, #148]	; (ba3c <usb_rx_memory+0xf8>)
    b9a6:	ldr.w	r1, [r3, #160]	; 0xa0
    b9aa:	cmp	r1, #0
    b9ac:	beq.n	ba34 <usb_rx_memory+0xf0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    b9ae:	ldr.w	r1, [r3, #168]	; 0xa8
    b9b2:	cbz	r1, b9da <usb_rx_memory+0x96>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    b9b4:	ldrb	r3, [r2, #5]
    b9b6:	lsls	r3, r3, #28
    b9b8:	bpl.n	b9cc <usb_rx_memory+0x88>
			if (table[index(i, RX, EVEN)].desc == 0) {
    b9ba:	ldr	r3, [pc, #128]	; (ba3c <usb_rx_memory+0xf8>)
    b9bc:	ldr.w	r2, [r3, #192]	; 0xc0
    b9c0:	cmp	r2, #0
    b9c2:	beq.n	ba30 <usb_rx_memory+0xec>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    b9c4:	ldr.w	r2, [r3, #200]	; 0xc8
    b9c8:	movs	r4, #25
    b9ca:	cbz	r2, b9dc <usb_rx_memory+0x98>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    b9cc:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    b9ce:	ldr	r3, [pc, #112]	; (ba40 <usb_rx_memory+0xfc>)
    b9d0:	movs	r2, #0
    b9d2:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    b9d4:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    b9d6:	b.w	b890 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    b9da:	movs	r4, #21
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    b9dc:	ldr	r1, [pc, #96]	; (ba40 <usb_rx_memory+0xfc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    b9de:	ldr	r5, [pc, #100]	; (ba44 <usb_rx_memory+0x100>)
				usb_rx_memory_needed--;
    b9e0:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    b9e2:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    b9e6:	add.w	r3, r3, r4, lsl #3
    b9ea:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    b9ec:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    b9ee:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    b9f0:	strb	r2, [r1, #0]
				__enable_irq();
    b9f2:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    b9f4:	pop	{r4, r5}
    b9f6:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    b9f8:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    b9fa:	ldr	r4, [pc, #68]	; (ba40 <usb_rx_memory+0xfc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    b9fc:	ldr	r5, [pc, #72]	; (ba48 <usb_rx_memory+0x104>)
				usb_rx_memory_needed--;
    b9fe:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    ba00:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    ba04:	add.w	r3, r3, r2, lsl #3
    ba08:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    ba0a:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    ba0c:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    ba0e:	strb	r2, [r4, #0]
				__enable_irq();
    ba10:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    ba12:	b.n	b9f4 <usb_rx_memory+0xb0>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    ba14:	movs	r4, #5
    ba16:	b.n	b9dc <usb_rx_memory+0x98>
    ba18:	movs	r4, #9
    ba1a:	b.n	b9dc <usb_rx_memory+0x98>
    ba1c:	movs	r4, #13
    ba1e:	b.n	b9dc <usb_rx_memory+0x98>
    ba20:	movs	r4, #17
    ba22:	b.n	b9dc <usb_rx_memory+0x98>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    ba24:	movs	r2, #12
    ba26:	b.n	b9fa <usb_rx_memory+0xb6>
    ba28:	movs	r2, #8
    ba2a:	b.n	b9fa <usb_rx_memory+0xb6>
    ba2c:	movs	r2, #16
    ba2e:	b.n	b9fa <usb_rx_memory+0xb6>
    ba30:	movs	r2, #24
    ba32:	b.n	b9fa <usb_rx_memory+0xb6>
    ba34:	movs	r2, #20
    ba36:	b.n	b9fa <usb_rx_memory+0xb6>
    ba38:	.word	0x00012004
    ba3c:	.word	0x1fff0000
    ba40:	.word	0x1fff2089
    ba44:	.word	0x004000c8
    ba48:	.word	0x00400088

0000ba4c <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    ba4c:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    ba4e:	cmp	r3, #5
    ba50:	bhi.n	ba8e <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    ba52:	ldr	r2, [pc, #108]	; (bac0 <usb_tx+0x74>)
    ba54:	lsls	r0, r0, #5
    ba56:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    ba5a:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    ba5c:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    ba5e:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    ba60:	ldr	r4, [pc, #96]	; (bac4 <usb_tx+0x78>)
    ba62:	ldrb	r2, [r4, r3]
    ba64:	cmp	r2, #3
    ba66:	bhi.n	baa0 <usb_tx+0x54>
    ba68:	tbb	[pc, r2]
    ba6c:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    ba70:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    ba72:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    ba74:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    ba76:	tst.w	r0, #8
    ba7a:	ite	ne
    ba7c:	movne	r3, #200	; 0xc8
    ba7e:	moveq	r3, #136	; 0x88
    ba80:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    ba84:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    ba86:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    ba88:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    ba8a:	cpsie	i
}
    ba8c:	pop	{r4, r5}
    ba8e:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    ba90:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    ba92:	movs	r2, #2
		break;
    ba94:	b.n	ba72 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    ba96:	movs	r2, #5
    ba98:	b.n	ba72 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    ba9a:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    ba9c:	movs	r2, #4
		break;
    ba9e:	b.n	ba72 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    baa0:	ldr	r2, [pc, #36]	; (bac8 <usb_tx+0x7c>)
    baa2:	ldr.w	r0, [r2, r3, lsl #2]
    baa6:	cbz	r0, bab8 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    baa8:	ldr	r2, [pc, #32]	; (bacc <usb_tx+0x80>)
    baaa:	ldr.w	r0, [r2, r3, lsl #2]
    baae:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    bab0:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    bab4:	cpsie	i
		return;
    bab6:	b.n	ba8c <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    bab8:	str.w	r1, [r2, r3, lsl #2]
    babc:	ldr	r2, [pc, #12]	; (bacc <usb_tx+0x80>)
    babe:	b.n	bab0 <usb_tx+0x64>
    bac0:	.word	0x1fff0000
    bac4:	.word	0x1fff2098
    bac8:	.word	0x1fff2050
    bacc:	.word	0x1fff2068

0000bad0 <usb_isr>:
}



void usb_isr(void)
{
    bad0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    bad4:	ldr.w	fp, [pc, #780]	; bde4 <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    bad8:	ldr.w	sl, [pc, #780]	; bde8 <usb_isr+0x318>
}



void usb_isr(void)
{
    badc:	sub	sp, #28
    bade:	b.n	bb6a <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    bae0:	ldr	r7, [pc, #692]	; (bd98 <usb_isr+0x2c8>)
    bae2:	mov.w	r8, r3, lsr #2
    bae6:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    baea:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    baec:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    baf0:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    baf4:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    baf6:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    bafa:	and.w	r4, r3, #255	; 0xff
    bafe:	cmp	r3, #0
    bb00:	bne.w	bdec <usb_isr+0x31c>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    bb04:	ldr.w	r3, [r7, r8, lsl #3]
    bb08:	lsrs	r3, r3, #16
    bb0a:	uxth	r1, r3
    bb0c:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    bb10:	cmp	r3, #0
    bb12:	beq.w	bd84 <usb_isr+0x2b4>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    bb16:	ldr	r3, [pc, #644]	; (bd9c <usb_isr+0x2cc>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    bb18:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    bb1c:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    bb20:	ldr.w	r2, [r3, r6, lsl #2]
    bb24:	cmp	r2, #0
    bb26:	beq.w	be88 <usb_isr+0x3b8>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    bb2a:	ldr	r5, [pc, #628]	; (bda0 <usb_isr+0x2d0>)
    bb2c:	ldr.w	r3, [r5, r6, lsl #2]
    bb30:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    bb32:	ldr	r4, [pc, #624]	; (bda4 <usb_isr+0x2d4>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    bb34:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    bb38:	ldrh.w	r3, [r4, r6, lsl #1]
    bb3c:	add	r1, r3
    bb3e:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    bb42:	bl	b850 <usb_malloc>
					if (packet) {
    bb46:	cmp	r0, #0
    bb48:	beq.w	be7a <usb_isr+0x3aa>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    bb4c:	ldr	r2, [pc, #600]	; (bda8 <usb_isr+0x2d8>)
    bb4e:	ldr	r3, [pc, #604]	; (bdac <usb_isr+0x2dc>)
    bb50:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    bb54:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    bb58:	it	ne
    bb5a:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    bb5c:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    bb60:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    bb64:	movs	r3, #8
    bb66:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    bb6a:	ldrb.w	r4, [fp]
    bb6e:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    bb70:	lsls	r5, r4, #29
    bb72:	bpl.n	bbac <usb_isr+0xdc>
		if (usb_configuration) {
    bb74:	ldr	r3, [pc, #568]	; (bdb0 <usb_isr+0x2e0>)
    bb76:	ldrb	r3, [r3, #0]
    bb78:	cbz	r3, bba6 <usb_isr+0xd6>
			t = usb_reboot_timer;
    bb7a:	ldr	r1, [pc, #568]	; (bdb4 <usb_isr+0x2e4>)
    bb7c:	ldrb	r2, [r1, #0]
			if (t) {
    bb7e:	and.w	r3, r2, #255	; 0xff
    bb82:	cbz	r2, bb90 <usb_isr+0xc0>
				usb_reboot_timer = --t;
    bb84:	subs	r3, #1
    bb86:	uxtb	r3, r3
    bb88:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    bb8a:	cmp	r3, #0
    bb8c:	beq.w	c50e <usb_isr+0xa3e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    bb90:	ldr	r1, [pc, #548]	; (bdb8 <usb_isr+0x2e8>)
    bb92:	ldrb	r2, [r1, #0]
			if (t) {
    bb94:	and.w	r3, r2, #255	; 0xff
    bb98:	cbz	r2, bba6 <usb_isr+0xd6>
				usb_cdc_transmit_flush_timer = --t;
    bb9a:	subs	r3, #1
    bb9c:	uxtb	r3, r3
    bb9e:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    bba0:	cmp	r3, #0
    bba2:	beq.w	be74 <usb_isr+0x3a4>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    bba6:	movs	r3, #4
    bba8:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    bbac:	and.w	r3, r4, #8
    bbb0:	and.w	r2, r3, #255	; 0xff
    bbb4:	cmp	r3, #0
    bbb6:	beq.w	be46 <usb_isr+0x376>
		uint8_t endpoint;
		stat = USB0_STAT;
    bbba:	ldrb.w	r3, [sl]
    bbbe:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    bbc0:	lsrs	r6, r3, #4
    bbc2:	bne.n	bae0 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    bbc4:	lsrs	r0, r3, #2
    bbc6:	ldr.w	r9, [pc, #464]	; bd98 <usb_isr+0x2c8>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    bbca:	ldr.w	r2, [r9, r0, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    bbce:	add.w	r1, r9, r0, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    bbd2:	ubfx	r2, r2, #2, #4
    bbd6:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    bbd8:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    bbda:	cmp	r2, #12
    bbdc:	bhi.w	bd66 <usb_isr+0x296>
    bbe0:	tbh	[pc, r2, lsl #1]
    bbe4:	.word	0x00c500c5
    bbe8:	.word	0x00c100c1
    bbec:	.word	0x00c100c1
    bbf0:	.word	0x00c100c1
    bbf4:	.word	0x00c1008b
    bbf8:	.word	0x00c100c1
    bbfc:	.short	0x000d
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    bbfe:	ldr	r2, [r1, #0]
    bc00:	ldr	r5, [pc, #440]	; (bdbc <usb_isr+0x2ec>)
		setup.word2 = *(uint32_t *)(buf + 4);
    bc02:	ldr	r1, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    bc04:	ldr	r7, [pc, #440]	; (bdc0 <usb_isr+0x2f0>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    bc06:	ldr	r6, [pc, #444]	; (bdc4 <usb_isr+0x2f4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    bc08:	ldr	r4, [pc, #412]	; (bda8 <usb_isr+0x2d8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    bc0a:	str	r1, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    bc0c:	uxth	r1, r2
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    bc0e:	str.w	r4, [r9, r0, lsl #3]
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    bc12:	str	r2, [r5, #0]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    bc14:	movs	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    bc16:	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    bc18:	cmp.w	r1, #2176	; 0x880
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    bc1c:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    bc1e:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    bc22:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    bc26:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    bc28:	beq.w	c2ca <usb_isr+0x7fa>
    bc2c:	bls.w	be90 <usb_isr+0x3c0>
    bc30:	movw	r4, #8993	; 0x2321
    bc34:	cmp	r1, r4
    bc36:	beq.w	c2d4 <usb_isr+0x804>
    bc3a:	bhi.w	bfc6 <usb_isr+0x4f6>
    bc3e:	movw	r4, #8225	; 0x2021
    bc42:	cmp	r1, r4
    bc44:	beq.w	bfdc <usb_isr+0x50c>
    bc48:	movw	r4, #8737	; 0x2221
    bc4c:	cmp	r1, r4
    bc4e:	beq.w	c126 <usb_isr+0x656>
    bc52:	cmp.w	r1, #2304	; 0x900
    bc56:	bne.w	bfd6 <usb_isr+0x506>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    bc5a:	ldr	r2, [pc, #340]	; (bdb0 <usb_isr+0x2e0>)
    bc5c:	ldr	r4, [pc, #312]	; (bd98 <usb_isr+0x2c8>)
    bc5e:	ldrb	r1, [r5, #2]
    bc60:	strb	r1, [r2, #0]
    bc62:	add.w	r5, r4, #192	; 0xc0
    bc66:	b.n	bc6e <usb_isr+0x19e>
    bc68:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    bc6a:	cmp	r5, r4
    bc6c:	beq.n	bc82 <usb_isr+0x1b2>
			if (table[i].desc & BDT_OWN) {
    bc6e:	ldr	r3, [r4, #32]
    bc70:	lsls	r0, r3, #24
    bc72:	bpl.n	bc68 <usb_isr+0x198>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    bc74:	ldr	r0, [r4, #36]	; 0x24
    bc76:	adds	r4, #8
    bc78:	subs	r0, #8
    bc7a:	bl	b890 <usb_free>
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    bc7e:	cmp	r5, r4
    bc80:	bne.n	bc6e <usb_isr+0x19e>
    bc82:	ldr	r4, [pc, #324]	; (bdc8 <usb_isr+0x2f8>)
    bc84:	ldr	r2, [pc, #276]	; (bd9c <usb_isr+0x2cc>)
    bc86:	ldr	r1, [pc, #324]	; (bdcc <usb_isr+0x2fc>)
    bc88:	ldr	r0, [pc, #324]	; (bdd0 <usb_isr+0x300>)
    bc8a:	ldr	r5, [pc, #276]	; (bda0 <usb_isr+0x2d0>)
    bc8c:	str	r4, [sp, #4]
    bc8e:	movs	r3, #0
    bc90:	ldr	r4, [pc, #272]	; (bda4 <usb_isr+0x2d4>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    bc92:	str	r6, [sp, #20]
    bc94:	str	r5, [sp, #8]
    bc96:	str	r4, [sp, #12]
    bc98:	mov	r8, r0
    bc9a:	str	r7, [sp, #16]
    bc9c:	mov	r6, r2
    bc9e:	mov	r5, r1
    bca0:	mov	r4, r3
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    bca2:	ldr	r0, [r6, #0]
			while (p) {
    bca4:	cbz	r0, bcb2 <usb_isr+0x1e2>
				n = p->next;
    bca6:	ldr	r7, [r0, #4]
				usb_free(p);
    bca8:	bl	b890 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    bcac:	mov	r0, r7
    bcae:	cmp	r7, #0
    bcb0:	bne.n	bca6 <usb_isr+0x1d6>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    bcb2:	movs	r3, #0
    bcb4:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    bcb6:	ldr	r3, [sp, #8]
			p = tx_first[i];
    bcb8:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    bcba:	mov	r2, r3
    bcbc:	movs	r3, #0
    bcbe:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    bcc2:	cbz	r0, bcd0 <usb_isr+0x200>
				n = p->next;
    bcc4:	ldr	r7, [r0, #4]
				usb_free(p);
    bcc6:	bl	b890 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    bcca:	mov	r0, r7
    bccc:	cmp	r7, #0
    bcce:	bne.n	bcc4 <usb_isr+0x1f4>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    bcd0:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    bcd2:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    bcd4:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    bcd6:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    bcd8:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    bcdc:	ldr	r2, [sp, #12]
    bcde:	mov.w	r1, #0
			switch (tx_state[i]) {
    bce2:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    bce4:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    bce8:	cmp	r3, #3
    bcea:	bhi.w	c200 <usb_isr+0x730>
    bcee:	tbh	[pc, r3, lsl #1]
    bcf2:	.short	0x02e7
    bcf4:	.word	0x02e70283
    bcf8:	.short	0x0283
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    bcfa:	ldr	r7, [pc, #196]	; (bdc0 <usb_isr+0x2f0>)
    bcfc:	ldr	r2, [r7, #0]
		if (data) {
    bcfe:	cbz	r2, bd52 <usb_isr+0x282>
			size = ep0_tx_len;
    bd00:	ldr	r3, [pc, #208]	; (bdd4 <usb_isr+0x304>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bd02:	ldr	r6, [pc, #192]	; (bdc4 <usb_isr+0x2f4>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bd04:	ldr	r1, [pc, #208]	; (bdd8 <usb_isr+0x308>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    bd06:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bd08:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bd0a:	ldrb	r5, [r1, #0]
    bd0c:	cmp	r0, #64	; 0x40
    bd0e:	mov	lr, r0
    bd10:	orr.w	r8, r5, #2
    bd14:	it	cs
    bd16:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bd1a:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    bd1c:	eor.w	r4, r4, #1
    bd20:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    bd22:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bd26:	ite	eq
    bd28:	moveq	r4, #136	; 0x88
    bd2a:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bd2c:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    bd30:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    bd32:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bd36:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bd3a:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    bd3c:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bd3e:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    bd42:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    bd44:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    bd46:	cbnz	r0, bd50 <usb_isr+0x280>
    bd48:	cmp.w	lr, #64	; 0x40
    bd4c:	it	ne
    bd4e:	movne	r2, #0
    bd50:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    bd52:	ldr	r3, [pc, #104]	; (bdbc <usb_isr+0x2ec>)
    bd54:	ldrh	r2, [r3, #0]
    bd56:	cmp.w	r2, #1280	; 0x500
    bd5a:	bne.n	bd66 <usb_isr+0x296>
			setup.bRequest = 0;
    bd5c:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    bd5e:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    bd60:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    bd62:	ldr	r3, [pc, #120]	; (bddc <usb_isr+0x30c>)
    bd64:	strb	r2, [r3, #0]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    bd66:	ldr	r2, [pc, #120]	; (bde0 <usb_isr+0x310>)
    bd68:	movs	r3, #1
    bd6a:	strb	r3, [r2, #0]
    bd6c:	b.n	bb64 <usb_isr+0x94>
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    bd6e:	ldr	r2, [pc, #76]	; (bdbc <usb_isr+0x2ec>)
    bd70:	ldrh	r5, [r2, #0]
    bd72:	movw	r4, #8225	; 0x2021
    bd76:	cmp	r5, r4
    bd78:	beq.w	bf70 <usb_isr+0x4a0>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    bd7c:	ldr	r2, [pc, #40]	; (bda8 <usb_isr+0x2d8>)
    bd7e:	str.w	r2, [r9, r0, lsl #3]
    bd82:	b.n	bd66 <usb_isr+0x296>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    bd84:	ldr	r2, [pc, #32]	; (bda8 <usb_isr+0x2d8>)
    bd86:	ldr	r3, [pc, #36]	; (bdac <usb_isr+0x2dc>)
    bd88:	tst.w	r9, #8
    bd8c:	it	ne
    bd8e:	movne	r3, r2
    bd90:	str.w	r3, [r7, r8, lsl #3]
    bd94:	b.n	bb64 <usb_isr+0x94>
    bd96:	nop
    bd98:	.word	0x1fff0000
    bd9c:	.word	0x1fff1ff4
    bda0:	.word	0x1fff1f98
    bda4:	.word	0x1fff2110
    bda8:	.word	0x004000c8
    bdac:	.word	0x00400088
    bdb0:	.word	0x1fff2094
    bdb4:	.word	0x1fff200d
    bdb8:	.word	0x1fff1f7c
    bdbc:	.word	0x1fff2080
    bdc0:	.word	0x1fff1f94
    bdc4:	.word	0x1fff200c
    bdc8:	.word	0x1fff2098
    bdcc:	.word	0x1fff2050
    bdd0:	.word	0x1fff2068
    bdd4:	.word	0x1fff1fb0
    bdd8:	.word	0x1fff2088
    bddc:	.word	0x40072098
    bde0:	.word	0x40072094
    bde4:	.word	0x40072080
    bde8:	.word	0x40072090
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    bdec:	bl	b890 <usb_free>
				packet = tx_first[endpoint];
    bdf0:	ldr	r2, [pc, #692]	; (c0a8 <usb_isr+0x5d8>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    bdf2:	ldr	r1, [pc, #696]	; (c0ac <usb_isr+0x5dc>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    bdf4:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    bdf8:	cmp	r3, #0
    bdfa:	beq.w	bf50 <usb_isr+0x480>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    bdfe:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    be00:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    be02:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    be06:	add.w	r2, r3, #8
    be0a:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    be0e:	cmp	r4, #3
    be10:	bhi.n	be1e <usb_isr+0x34e>
    be12:	tbb	[pc, r4]
    be16:	.short	0x0f12
    be18:	.short	0x0215
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    be1a:	movs	r2, #4
    be1c:	strb	r2, [r1, r6]
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    be1e:	ldrh	r2, [r3, #0]
    be20:	tst.w	r9, #8
    be24:	ite	eq
    be26:	moveq	r3, #136	; 0x88
    be28:	movne	r3, #200	; 0xc8
    be2a:	orr.w	r3, r3, r2, lsl #16
    be2e:	str.w	r3, [r7, r8, lsl #3]
    be32:	b.n	bb64 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    be34:	movs	r2, #2
    be36:	strb	r2, [r1, r6]
						break;
    be38:	b.n	be1e <usb_isr+0x34e>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    be3a:	movs	r2, #3
    be3c:	strb	r2, [r1, r6]
						break;
    be3e:	b.n	be1e <usb_isr+0x34e>
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    be40:	movs	r2, #5
    be42:	strb	r2, [r1, r6]
						break;
    be44:	b.n	be1e <usb_isr+0x34e>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    be46:	lsls	r0, r4, #31
    be48:	bmi.w	bfe4 <usb_isr+0x514>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    be4c:	lsls	r1, r4, #24
    be4e:	bmi.w	c080 <usb_isr+0x5b0>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    be52:	lsls	r2, r4, #30
    be54:	bpl.n	be64 <usb_isr+0x394>
		uint8_t err = USB0_ERRSTAT;
    be56:	ldr	r2, [pc, #600]	; (c0b0 <usb_isr+0x5e0>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    be58:	ldr	r1, [pc, #600]	; (c0b4 <usb_isr+0x5e4>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    be5a:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    be5c:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    be5e:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    be60:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    be62:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    be64:	lsls	r3, r4, #27
    be66:	bpl.n	be6e <usb_isr+0x39e>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    be68:	ldr	r3, [pc, #584]	; (c0b4 <usb_isr+0x5e4>)
    be6a:	movs	r2, #16
    be6c:	strb	r2, [r3, #0]
	}

}
    be6e:	add	sp, #28
    be70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    be74:	bl	b4a0 <usb_serial_flush_callback>
    be78:	b.n	bba6 <usb_isr+0xd6>
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    be7a:	ldr	r2, [pc, #572]	; (c0b8 <usb_isr+0x5e8>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    be7c:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    be80:	ldrb	r3, [r2, #0]
    be82:	adds	r3, #1
    be84:	strb	r3, [r2, #0]
    be86:	b.n	bb64 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    be88:	str.w	r0, [r3, r6, lsl #2]
    be8c:	ldr	r5, [pc, #556]	; (c0bc <usb_isr+0x5ec>)
    be8e:	b.n	bb32 <usb_isr+0x62>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    be90:	movw	r4, #770	; 0x302
    be94:	cmp	r1, r4
    be96:	beq.w	c2dc <usb_isr+0x80c>
    be9a:	bhi.w	c03e <usb_isr+0x56e>
    be9e:	cmp	r1, #130	; 0x82
    bea0:	beq.w	c1d2 <usb_isr+0x702>
    bea4:	cmp.w	r1, #258	; 0x102
    bea8:	beq.w	c100 <usb_isr+0x630>
    beac:	cmp	r1, #128	; 0x80
    beae:	bne.w	bfd6 <usb_isr+0x506>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    beb2:	ldr	r4, [pc, #524]	; (c0c0 <usb_isr+0x5f0>)
		reply_buffer[1] = 0;
		datalen = 2;
    beb4:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    beb6:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    beb8:	strb	r2, [r4, #1]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    beba:	ldrh	r2, [r5, #6]
    bebc:	cmp	r2, r0
    bebe:	bcs.w	c45e <usb_isr+0x98e>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bec2:	ldr	r1, [pc, #512]	; (c0c4 <usb_isr+0x5f4>)
    bec4:	ldrb	r5, [r1, #0]
    bec6:	cmp	r2, #64	; 0x40
    bec8:	mov	lr, r2
    beca:	orr.w	ip, r5, #2
    bece:	it	cs
    bed0:	movcs.w	lr, #64	; 0x40
    bed4:	add.w	r3, r4, lr
    bed8:	add.w	r0, r9, ip, lsl #3
    bedc:	str	r3, [sp, #4]
    bede:	movs	r3, #1
    bee0:	str	r4, [r0, #4]
    bee2:	mov.w	r8, lr, lsl #16
    bee6:	rsb	r0, lr, r2
    beea:	str	r3, [sp, #8]
    beec:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    beee:	movs	r4, #200	; 0xc8
    bef0:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    bef4:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bef8:	str.w	r3, [r9, ip, lsl #3]
	ep0_tx_data_toggle ^= 1;
    befc:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    befe:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bf00:	ldr.w	ip, [pc, #472]	; c0dc <usb_isr+0x60c>
	ep0_tx_data_toggle ^= 1;
    bf04:	ldr	r3, [pc, #448]	; (c0c8 <usb_isr+0x5f8>)
	ep0_tx_bdt_bank ^= 1;
    bf06:	ldr.w	r8, [pc, #444]	; c0c4 <usb_isr+0x5f4>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    bf0a:	cmp	r0, #0
    bf0c:	bne.w	c168 <usb_isr+0x698>
    bf10:	cmp.w	lr, #64	; 0x40
    bf14:	bne.n	bfdc <usb_isr+0x50c>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bf16:	orr.w	ip, r4, #2
    bf1a:	add.w	r3, r9, ip, lsl #3
    bf1e:	ldr	r4, [sp, #4]
    bf20:	ldr.w	lr, [pc, #440]	; c0dc <usb_isr+0x60c>
    bf24:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bf26:	cmp	r2, #0
    bf28:	bne.w	c194 <usb_isr+0x6c4>
    bf2c:	lsls	r2, r0, #16
    bf2e:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    bf32:	ldrb.w	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bf36:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    bf3a:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    bf3c:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    bf3e:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    bf40:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    bf42:	cmp	r0, #64	; 0x40
    bf44:	bne.n	bfdc <usb_isr+0x50c>
    bf46:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    bf48:	ldr	r2, [pc, #384]	; (c0cc <usb_isr+0x5fc>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    bf4a:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    bf4c:	strh	r0, [r2, #0]
    bf4e:	b.n	bfdc <usb_isr+0x50c>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    bf50:	ldrb	r3, [r1, r6]
    bf52:	cmp	r3, #3
    bf54:	bhi.w	c1c4 <usb_isr+0x6f4>
    bf58:	add	r2, pc, #4	; (adr r2, bf60 <usb_isr+0x490>)
    bf5a:	ldr.w	pc, [r2, r3, lsl #2]
    bf5e:	nop
    bf60:	.word	0x0000bb65
    bf64:	.word	0x0000bb65
    bf68:	.word	0x0000c039
    bf6c:	.word	0x0000c033
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
			int i;
			uint32_t *line_coding = NULL;
			switch (setup.wIndex) {
    bf70:	ldrh	r2, [r2, #4]
    bf72:	cbnz	r2, bf98 <usb_isr+0x4c8>
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    bf74:	ldr	r2, [pc, #344]	; (c0d0 <usb_isr+0x600>)
    bf76:	ldrb	r5, [r1, #0]
    bf78:	ldrb	r4, [r1, #1]
    bf7a:	strb	r5, [r2, #0]
    bf7c:	strb	r4, [r2, #1]
    bf7e:	ldrb	r5, [r1, #2]
    bf80:	ldrb	r4, [r1, #3]
    bf82:	strb	r5, [r2, #2]
    bf84:	strb	r4, [r2, #3]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    bf86:	ldr	r4, [r2, #0]
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    bf88:	ldrb	r5, [r1, #4]
    bf8a:	strb	r5, [r2, #4]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    bf8c:	cmp	r4, #134	; 0x86
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    bf8e:	ldrb	r5, [r1, #5]
    bf90:	ldrb	r1, [r1, #6]
    bf92:	strb	r5, [r2, #5]
    bf94:	strb	r1, [r2, #6]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    bf96:	beq.n	c094 <usb_isr+0x5c4>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bf98:	ldr	r1, [pc, #296]	; (c0c4 <usb_isr+0x5f4>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bf9a:	ldr	r6, [pc, #300]	; (c0c8 <usb_isr+0x5f8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bf9c:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bf9e:	ldrb	r4, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    bfa0:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bfa4:	cmp	r4, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bfa6:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    bfaa:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bfac:	ite	eq
    bfae:	moveq	r1, #136	; 0x88
    bfb0:	movne	r1, #200	; 0xc8
    bfb2:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bfb6:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    bfba:	eor.w	r4, r4, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bfbe:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    bfc0:	strb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bfc2:	str	r1, [r2, #4]
    bfc4:	b.n	bd7c <usb_isr+0x2ac>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    bfc6:	movw	r2, #26273	; 0x66a1
    bfca:	cmp	r1, r2
    bfcc:	beq.n	bfd6 <usb_isr+0x506>
    bfce:	movw	r2, #26529	; 0x67a1
    bfd2:	cmp	r1, r2
    bfd4:	beq.n	c09c <usb_isr+0x5cc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    bfd6:	ldr	r2, [pc, #252]	; (c0d4 <usb_isr+0x604>)
    bfd8:	movs	r3, #15
    bfda:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    bfdc:	ldr	r2, [pc, #248]	; (c0d8 <usb_isr+0x608>)
    bfde:	movs	r3, #1
    bfe0:	strb	r3, [r2, #0]
    bfe2:	b.n	bd66 <usb_isr+0x296>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    bfe4:	ldr	r3, [pc, #244]	; (c0dc <usb_isr+0x60c>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    bfe6:	ldr	r0, [pc, #240]	; (c0d8 <usb_isr+0x608>)
		ep0_tx_bdt_bank = 0;
    bfe8:	ldr	r1, [pc, #216]	; (c0c4 <usb_isr+0x5f4>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    bfea:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    bfec:	mov.w	lr, #2
    bff0:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    bff4:	ldr	r7, [pc, #220]	; (c0d4 <usb_isr+0x604>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    bff6:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    bff8:	ldr	r1, [pc, #228]	; (c0e0 <usb_isr+0x610>)
    bffa:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    bffc:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    bffe:	ldr	r6, [pc, #176]	; (c0b0 <usb_isr+0x5e0>)
		USB0_ISTAT = 0xFF;
    c000:	ldr	r5, [pc, #176]	; (c0b4 <usb_isr+0x5e4>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    c002:	ldr	r4, [pc, #224]	; (c0e4 <usb_isr+0x614>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    c004:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    c006:	movs	r1, #13
    c008:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    c00a:	movs	r1, #255	; 0xff
    c00c:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    c00e:	ldr.w	lr, [pc, #236]	; c0fc <usb_isr+0x62c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    c012:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    c014:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    c016:	ldr	r5, [pc, #208]	; (c0e8 <usb_isr+0x618>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    c018:	ldr	r2, [pc, #208]	; (c0ec <usb_isr+0x61c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    c01a:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    c01e:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    c020:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    c022:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    c026:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    c028:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    c02a:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    c02c:	add	sp, #28
    c02e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    c032:	movs	r3, #1
    c034:	strb	r3, [r1, r6]
						break;
    c036:	b.n	bb64 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    c038:	movs	r3, #0
    c03a:	strb	r3, [r1, r6]
						break;
    c03c:	b.n	bb64 <usb_isr+0x94>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    c03e:	cmp.w	r1, #1280	; 0x500
    c042:	beq.w	c2d4 <usb_isr+0x804>
    c046:	bcc.n	bfd6 <usb_isr+0x506>
    c048:	sub.w	r1, r1, #1664	; 0x680
    c04c:	cmp	r1, #1
    c04e:	bhi.n	bfd6 <usb_isr+0x506>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    c050:	ldr	r2, [pc, #156]	; (c0f0 <usb_isr+0x620>)
    c052:	ldr	r4, [r2, #4]
    c054:	cmp	r4, #0
    c056:	beq.n	bfd6 <usb_isr+0x506>
    c058:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    c05a:	ldrh.w	lr, [r5, #4]
    c05e:	b.n	c068 <usb_isr+0x598>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    c060:	adds	r2, #12
			if (list->addr == NULL) break;
    c062:	ldr	r4, [r2, #4]
    c064:	cmp	r4, #0
    c066:	beq.n	bfd6 <usb_isr+0x506>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    c068:	ldrh	r3, [r2, #0]
    c06a:	cmp	r3, r0
    c06c:	bne.n	c060 <usb_isr+0x590>
    c06e:	ldrh	r3, [r2, #2]
    c070:	cmp	r3, lr
    c072:	bne.n	c060 <usb_isr+0x590>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    c074:	lsrs	r0, r0, #8
    c076:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    c078:	ite	eq
    c07a:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    c07c:	ldrhne	r0, [r2, #8]
    c07e:	b.n	beba <usb_isr+0x3ea>
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    c080:	ldr	r1, [pc, #80]	; (c0d4 <usb_isr+0x604>)
		USB0_ISTAT = USB_ISTAT_STALL;
    c082:	ldr	r3, [pc, #48]	; (c0b4 <usb_isr+0x5e4>)
    c084:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    c086:	movs	r0, #13
    c088:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    c08a:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    c08c:	lsls	r2, r4, #30
    c08e:	bpl.w	be64 <usb_isr+0x394>
    c092:	b.n	be56 <usb_isr+0x386>
					//serial_phex(*buf);
					*dst++ = *buf++;
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    c094:	ldr	r2, [pc, #92]	; (c0f4 <usb_isr+0x624>)
    c096:	movs	r1, #15
    c098:	strb	r1, [r2, #0]
    c09a:	b.n	bf98 <usb_isr+0x4c8>
		// TODO: required by PTP spec
		endpoint0_stall();
		return;
	case 0x67A1: // Get Device Statis (PTP spec, 5.2.4, page 10)
		// For now, always respond with status ok.
		reply_buffer[0] = 0x4;
    c09c:	ldr	r4, [pc, #32]	; (c0c0 <usb_isr+0x5f0>)
    c09e:	ldr	r3, [pc, #88]	; (c0f8 <usb_isr+0x628>)
    c0a0:	str	r3, [r4, #0]
		reply_buffer[1] = 0;
		reply_buffer[2] = 0x01;
		reply_buffer[3] = 0x20;
		data = reply_buffer;
		datalen = 4;
    c0a2:	movs	r0, #4
    c0a4:	b.n	beba <usb_isr+0x3ea>
    c0a6:	nop
    c0a8:	.word	0x1fff2050
    c0ac:	.word	0x1fff2098
    c0b0:	.word	0x40072088
    c0b4:	.word	0x40072080
    c0b8:	.word	0x1fff2089
    c0bc:	.word	0x1fff1f98
    c0c0:	.word	0x1fff208c
    c0c4:	.word	0x1fff2088
    c0c8:	.word	0x1fff200c
    c0cc:	.word	0x1fff1fb0
    c0d0:	.word	0x1fff2104
    c0d4:	.word	0x400720c0
    c0d8:	.word	0x40072094
    c0dc:	.word	0x1fff0000
    c0e0:	.word	0x00400088
    c0e4:	.word	0x40072098
    c0e8:	.word	0x1fff1fb4
    c0ec:	.word	0x1fff2010
    c0f0:	.word	0x0001200c
    c0f4:	.word	0x1fff200d
    c0f8:	.word	0x20010004
    c0fc:	.word	0x4007208c
    c100:	ldrh	r1, [r5, #4]
    c102:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    c106:	cmp	r1, #6
    c108:	bhi.w	bfd6 <usb_isr+0x506>
    c10c:	ldrh	r2, [r5, #2]
    c10e:	cmp	r2, #0
    c110:	bne.w	bfd6 <usb_isr+0x506>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    c114:	ldr	r4, [pc, #724]	; (c3ec <usb_isr+0x91c>)
    c116:	str	r0, [sp, #8]
    c118:	lsls	r1, r1, #2
    c11a:	add	r4, r1
    c11c:	ldrb	r1, [r4, #0]
    c11e:	bic.w	r1, r1, #2
    c122:	strb	r1, [r4, #0]
    c124:	b.n	c140 <usb_isr+0x670>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    c126:	ldrh	r1, [r5, #4]
    c128:	cmp	r1, #0
    c12a:	bne.w	c302 <usb_isr+0x832>
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    c12e:	ldr	r3, [pc, #704]	; (c3f0 <usb_isr+0x920>)
    c130:	ldr	r2, [pc, #704]	; (c3f4 <usb_isr+0x924>)
			usb_cdc_line_rtsdtr = setup.wValue;
    c132:	ldr	r4, [pc, #708]	; (c3f8 <usb_isr+0x928>)
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    c134:	ldr	r3, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    c136:	ldrb	r5, [r5, #2]
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    c138:	str	r3, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    c13a:	str	r0, [sp, #8]
    c13c:	mov	r2, r1
    c13e:	strb	r5, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    c140:	movs	r0, #0
    c142:	str	r0, [sp, #4]
    c144:	mov	r8, r0
    c146:	mov	lr, r0
    c148:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c14a:	ldr	r1, [pc, #688]	; (c3fc <usb_isr+0x92c>)
    c14c:	ldrb	r5, [r1, #0]
    c14e:	orr.w	ip, r5, #2
    c152:	add.w	r3, r9, ip, lsl #3
    c156:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c158:	ldr	r3, [sp, #8]
    c15a:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c15c:	ldr	r3, [sp, #12]
    c15e:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c160:	ite	eq
    c162:	moveq	r4, #136	; 0x88
    c164:	movne	r4, #200	; 0xc8
    c166:	b.n	bef0 <usb_isr+0x420>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    c168:	cmp	r0, #64	; 0x40
    c16a:	bls.w	bf16 <usb_isr+0x446>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c16e:	orr.w	r4, r4, #2
    c172:	add.w	r1, ip, r4, lsl #3
    c176:	ldr	r6, [sp, #4]
    c178:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c17a:	cbz	r2, c1ac <usb_isr+0x6dc>
	ep0_tx_data_toggle ^= 1;
    c17c:	ldrb.w	r1, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c180:	ldr	r2, [pc, #636]	; (c400 <usb_isr+0x930>)
	ep0_tx_data_toggle ^= 1;
    c182:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    c184:	mov	r3, r6
    c186:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    c188:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    c18c:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c18e:	str.w	r2, [ip, r4, lsl #3]
    c192:	b.n	bf48 <usb_isr+0x478>
	ep0_tx_data_toggle ^= 1;
    c194:	ldrb.w	r3, [sp, #8]
    c198:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c19a:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    c19c:	ldr	r3, [sp, #4]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    c19e:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c1a0:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    c1a4:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c1a6:	str.w	r2, [lr, ip, lsl #3]
    c1aa:	b.n	bf42 <usb_isr+0x472>
	ep0_tx_data_toggle ^= 1;
    c1ac:	ldrb.w	r1, [sp, #8]
    c1b0:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    c1b2:	ldr	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c1b4:	ldr	r2, [pc, #588]	; (c404 <usb_isr+0x934>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    c1b6:	strb.w	r5, [r8]
    c1ba:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    c1bc:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c1be:	str.w	r2, [ip, r4, lsl #3]
    c1c2:	b.n	bf48 <usb_isr+0x478>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    c1c4:	tst.w	r9, #8
    c1c8:	ite	eq
    c1ca:	moveq	r3, #2
    c1cc:	movne	r3, #3
    c1ce:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    c1d0:	b.n	bb64 <usb_isr+0x94>
    c1d2:	ldrh	r1, [r5, #4]
    c1d4:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    c1d8:	cmp	r1, #6
    c1da:	bhi.w	bfd6 <usb_isr+0x506>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    c1de:	ldr	r3, [pc, #524]	; (c3ec <usb_isr+0x91c>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    c1e0:	ldr	r4, [pc, #548]	; (c408 <usb_isr+0x938>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    c1e2:	lsls	r1, r1, #2
    c1e4:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    c1e6:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    c1e8:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    c1ea:	ldrb	r2, [r3, #0]
    c1ec:	lsls	r3, r2, #30
    c1ee:	bpl.w	c306 <usb_isr+0x836>
    c1f2:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    c1f4:	movs	r0, #2
    c1f6:	b.n	beba <usb_isr+0x3ea>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    c1f8:	ldr	r3, [sp, #4]
    c1fa:	mov.w	r2, #1
    c1fe:	strb	r2, [r3, #0]
    c200:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    c202:	adds	r4, #1
    c204:	adds	r3, #1
    c206:	cmp	r4, #6
    c208:	add.w	r6, r6, #4
    c20c:	add.w	r5, r5, #4
    c210:	str	r3, [sp, #4]
    c212:	bne.w	bca2 <usb_isr+0x1d2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    c216:	ldr	r5, [pc, #500]	; (c40c <usb_isr+0x93c>)
			*reg = epconf;
    c218:	ldr	r1, [pc, #500]	; (c410 <usb_isr+0x940>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    c21a:	ldrb	r2, [r5, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    c21c:	ldr	r4, [pc, #500]	; (c414 <usb_isr+0x944>)
    c21e:	ldr	r7, [sp, #16]
    c220:	ldr	r6, [sp, #20]
    c222:	movs	r0, #0
    c224:	strb	r0, [r4, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    c226:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    c228:	lsls	r1, r2, #28
    c22a:	bmi.w	c338 <usb_isr+0x868>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    c22e:	ldrb	r2, [r5, #1]
			*reg = epconf;
    c230:	ldr	r1, [pc, #484]	; (c418 <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    c232:	ldr.w	r8, [pc, #504]	; c42c <usb_isr+0x95c>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    c236:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    c238:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    c23a:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    c23c:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    c240:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    c244:	bmi.n	c30a <usb_isr+0x83a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    c246:	ldrb	r2, [r5, #2]
			*reg = epconf;
    c248:	ldr	r1, [pc, #464]	; (c41c <usb_isr+0x94c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    c24a:	ldr.w	r8, [pc, #480]	; c42c <usb_isr+0x95c>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    c24e:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    c250:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    c252:	mov.w	r1, #0
    c256:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    c25a:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    c25e:	bmi.w	c434 <usb_isr+0x964>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    c262:	ldrb	r2, [r5, #3]
			*reg = epconf;
    c264:	ldr	r1, [pc, #440]	; (c420 <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    c266:	ldr.w	r8, [pc, #452]	; c42c <usb_isr+0x95c>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    c26a:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    c26c:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    c26e:	mov.w	r1, #0
    c272:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    c276:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    c27a:	bmi.w	c3c2 <usb_isr+0x8f2>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    c27e:	ldr	r1, [pc, #420]	; (c424 <usb_isr+0x954>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    c280:	ldrb	r2, [r5, #4]
			*reg = epconf;
    c282:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    c284:	movs	r1, #0
    c286:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    c28a:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    c28e:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    c290:	ldr.w	r8, [pc, #408]	; c42c <usb_isr+0x95c>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    c294:	bmi.n	c394 <usb_isr+0x8c4>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    c296:	ldrb	r2, [r5, #5]
			*reg = epconf;
    c298:	ldr	r1, [pc, #396]	; (c428 <usb_isr+0x958>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    c29a:	ldr	r5, [pc, #400]	; (c42c <usb_isr+0x95c>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    c29c:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    c29e:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    c2a0:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    c2a2:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    c2a6:	str.w	r1, [r9, #184]	; 0xb8
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    c2aa:	bmi.n	c366 <usb_isr+0x896>
    c2ac:	ldrb	r3, [r6, #0]
    c2ae:	str	r3, [sp, #8]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    c2b0:	movs	r1, #0
    c2b2:	eor.w	r2, r3, #1
    c2b6:	str.w	r1, [r9, #208]	; 0xd0
			table[index(i, TX, ODD)].desc = 0;
    c2ba:	str.w	r1, [r9, #216]	; 0xd8
    c2be:	b.n	c140 <usb_isr+0x670>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    c2c0:	ldr	r3, [sp, #4]
    c2c2:	mov.w	r2, #0
    c2c6:	strb	r2, [r3, #0]
    c2c8:	b.n	c200 <usb_isr+0x730>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    c2ca:	ldr	r2, [pc, #356]	; (c430 <usb_isr+0x960>)
    c2cc:	ldr	r4, [pc, #312]	; (c408 <usb_isr+0x938>)
    c2ce:	ldrb	r2, [r2, #0]
    c2d0:	strb	r2, [r4, #0]
    c2d2:	b.n	beba <usb_isr+0x3ea>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    c2d4:	movs	r3, #1
    c2d6:	movs	r2, #0
    c2d8:	str	r3, [sp, #8]
    c2da:	b.n	c140 <usb_isr+0x670>
    c2dc:	ldrh	r1, [r5, #4]
    c2de:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    c2e2:	cmp	r1, #6
    c2e4:	bhi.w	bfd6 <usb_isr+0x506>
    c2e8:	ldrh	r2, [r5, #2]
    c2ea:	cmp	r2, #0
    c2ec:	bne.w	bfd6 <usb_isr+0x506>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    c2f0:	ldr	r4, [pc, #248]	; (c3ec <usb_isr+0x91c>)
    c2f2:	str	r0, [sp, #8]
    c2f4:	lsls	r1, r1, #2
    c2f6:	add	r4, r1
    c2f8:	ldrb	r1, [r4, #0]
    c2fa:	orr.w	r1, r1, #2
    c2fe:	strb	r1, [r4, #0]
    c300:	b.n	c140 <usb_isr+0x670>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    c302:	str	r0, [sp, #8]
    c304:	b.n	c140 <usb_isr+0x670>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    c306:	movs	r0, #2
    c308:	b.n	beba <usb_isr+0x3ea>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    c30a:	bl	b850 <usb_malloc>
				if (p) {
    c30e:	cmp	r0, #0
    c310:	beq.w	c4ea <usb_isr+0xa1a>
					table[index(i, RX, EVEN)].addr = p->buf;
    c314:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    c316:	ldr	r2, [pc, #236]	; (c404 <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    c318:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    c31c:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    c320:	bl	b850 <usb_malloc>
				if (p) {
    c324:	cmp	r0, #0
    c326:	beq.w	c4de <usb_isr+0xa0e>
					table[index(i, RX, ODD)].addr = p->buf;
    c32a:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    c32c:	ldr	r2, [pc, #208]	; (c400 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    c32e:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    c332:	str.w	r2, [r9, #72]	; 0x48
    c336:	b.n	c246 <usb_isr+0x776>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    c338:	bl	b850 <usb_malloc>
				if (p) {
    c33c:	cmp	r0, #0
    c33e:	beq.w	c4ba <usb_isr+0x9ea>
					table[index(i, RX, EVEN)].addr = p->buf;
    c342:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    c344:	ldr	r2, [pc, #188]	; (c404 <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    c346:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    c34a:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    c34e:	bl	b850 <usb_malloc>
				if (p) {
    c352:	cmp	r0, #0
    c354:	beq.w	c4ae <usb_isr+0x9de>
					table[index(i, RX, ODD)].addr = p->buf;
    c358:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    c35a:	ldr	r2, [pc, #164]	; (c400 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    c35c:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    c360:	str.w	r2, [r9, #40]	; 0x28
    c364:	b.n	c22e <usb_isr+0x75e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    c366:	bl	b850 <usb_malloc>
				if (p) {
    c36a:	cmp	r0, #0
    c36c:	beq.w	c4a2 <usb_isr+0x9d2>
					table[index(i, RX, EVEN)].addr = p->buf;
    c370:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    c372:	ldr	r2, [pc, #144]	; (c404 <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    c374:	str.w	r0, [r5, #196]	; 0xc4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    c378:	str.w	r2, [r5, #192]	; 0xc0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    c37c:	bl	b850 <usb_malloc>
				if (p) {
    c380:	cmp	r0, #0
    c382:	beq.w	c496 <usb_isr+0x9c6>
					table[index(i, RX, ODD)].addr = p->buf;
    c386:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    c388:	ldr	r2, [pc, #116]	; (c400 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    c38a:	str.w	r0, [r9, #204]	; 0xcc
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    c38e:	str.w	r2, [r9, #200]	; 0xc8
    c392:	b.n	c2ac <usb_isr+0x7dc>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    c394:	bl	b850 <usb_malloc>
				if (p) {
    c398:	cmp	r0, #0
    c39a:	beq.w	c4d2 <usb_isr+0xa02>
					table[index(i, RX, EVEN)].addr = p->buf;
    c39e:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    c3a0:	ldr	r2, [pc, #96]	; (c404 <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    c3a2:	str.w	r0, [r8, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    c3a6:	str.w	r2, [r8, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    c3aa:	bl	b850 <usb_malloc>
				if (p) {
    c3ae:	cmp	r0, #0
    c3b0:	beq.w	c4c6 <usb_isr+0x9f6>
					table[index(i, RX, ODD)].addr = p->buf;
    c3b4:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    c3b6:	ldr	r2, [pc, #72]	; (c400 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    c3b8:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    c3bc:	str.w	r2, [r9, #168]	; 0xa8
    c3c0:	b.n	c296 <usb_isr+0x7c6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    c3c2:	bl	b850 <usb_malloc>
				if (p) {
    c3c6:	cmp	r0, #0
    c3c8:	beq.n	c48a <usb_isr+0x9ba>
					table[index(i, RX, EVEN)].addr = p->buf;
    c3ca:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    c3cc:	ldr	r2, [pc, #52]	; (c404 <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    c3ce:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    c3d2:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    c3d6:	bl	b850 <usb_malloc>
				if (p) {
    c3da:	cmp	r0, #0
    c3dc:	beq.n	c47e <usb_isr+0x9ae>
					table[index(i, RX, ODD)].addr = p->buf;
    c3de:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    c3e0:	ldr	r2, [pc, #28]	; (c400 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    c3e2:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    c3e6:	str.w	r2, [r9, #136]	; 0x88
    c3ea:	b.n	c27e <usb_isr+0x7ae>
    c3ec:	.word	0x400720c0
    c3f0:	.word	0x1fff1f90
    c3f4:	.word	0x1fff210c
    c3f8:	.word	0x1fff1f8c
    c3fc:	.word	0x1fff2088
    c400:	.word	0x004000c8
    c404:	.word	0x00400088
    c408:	.word	0x1fff208c
    c40c:	.word	0x00012004
    c410:	.word	0x400720c4
    c414:	.word	0x1fff2089
    c418:	.word	0x400720c8
    c41c:	.word	0x400720cc
    c420:	.word	0x400720d0
    c424:	.word	0x400720d4
    c428:	.word	0x400720d8
    c42c:	.word	0x1fff0000
    c430:	.word	0x1fff2094
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    c434:	bl	b850 <usb_malloc>
				if (p) {
    c438:	cmp	r0, #0
    c43a:	beq.n	c502 <usb_isr+0xa32>
					table[index(i, RX, EVEN)].addr = p->buf;
    c43c:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    c43e:	ldr	r2, [pc, #208]	; (c510 <usb_isr+0xa40>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    c440:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    c444:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    c448:	bl	b850 <usb_malloc>
				if (p) {
    c44c:	cmp	r0, #0
    c44e:	beq.n	c4f6 <usb_isr+0xa26>
					table[index(i, RX, ODD)].addr = p->buf;
    c450:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    c452:	ldr	r2, [pc, #192]	; (c514 <usb_isr+0xa44>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    c454:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    c458:	str.w	r2, [r9, #104]	; 0x68
    c45c:	b.n	c262 <usb_isr+0x792>
    c45e:	cmp	r0, #64	; 0x40
    c460:	mov	lr, r0
    c462:	it	cs
    c464:	movcs.w	lr, #64	; 0x40
    c468:	add.w	r3, r4, lr
    c46c:	str	r3, [sp, #4]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    c46e:	movs	r3, #1
    c470:	rsb	r0, lr, r0
    c474:	mov.w	r8, lr, lsl #16
    c478:	movs	r2, #0
    c47a:	str	r3, [sp, #8]
    c47c:	b.n	c14a <usb_isr+0x67a>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    c47e:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    c480:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    c484:	adds	r2, #1
    c486:	strb	r2, [r4, #0]
    c488:	b.n	c27e <usb_isr+0x7ae>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    c48a:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    c48c:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    c490:	adds	r2, #1
    c492:	strb	r2, [r4, #0]
    c494:	b.n	c3d6 <usb_isr+0x906>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    c496:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    c498:	str.w	r0, [r9, #200]	; 0xc8
					usb_rx_memory_needed++;
    c49c:	adds	r2, #1
    c49e:	strb	r2, [r4, #0]
    c4a0:	b.n	c2ac <usb_isr+0x7dc>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    c4a2:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    c4a4:	str.w	r0, [r5, #192]	; 0xc0
					usb_rx_memory_needed++;
    c4a8:	adds	r2, #1
    c4aa:	strb	r2, [r4, #0]
    c4ac:	b.n	c37c <usb_isr+0x8ac>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    c4ae:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    c4b0:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    c4b4:	adds	r2, #1
    c4b6:	strb	r2, [r4, #0]
    c4b8:	b.n	c22e <usb_isr+0x75e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    c4ba:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    c4bc:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    c4c0:	adds	r2, #1
    c4c2:	strb	r2, [r4, #0]
    c4c4:	b.n	c34e <usb_isr+0x87e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    c4c6:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    c4c8:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    c4cc:	adds	r2, #1
    c4ce:	strb	r2, [r4, #0]
    c4d0:	b.n	c296 <usb_isr+0x7c6>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    c4d2:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    c4d4:	str.w	r0, [r8, #160]	; 0xa0
					usb_rx_memory_needed++;
    c4d8:	adds	r2, #1
    c4da:	strb	r2, [r4, #0]
    c4dc:	b.n	c3aa <usb_isr+0x8da>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    c4de:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    c4e0:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    c4e4:	adds	r2, #1
    c4e6:	strb	r2, [r4, #0]
    c4e8:	b.n	c246 <usb_isr+0x776>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    c4ea:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    c4ec:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    c4f0:	adds	r2, #1
    c4f2:	strb	r2, [r4, #0]
    c4f4:	b.n	c320 <usb_isr+0x850>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    c4f6:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    c4f8:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    c4fc:	adds	r2, #1
    c4fe:	strb	r2, [r4, #0]
    c500:	b.n	c262 <usb_isr+0x792>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    c502:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    c504:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    c508:	adds	r2, #1
    c50a:	strb	r2, [r4, #0]
    c50c:	b.n	c448 <usb_isr+0x978>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    c50e:	bkpt	0x0000
    c510:	.word	0x00400088
    c514:	.word	0x004000c8

0000c518 <usb_init>:
}



void usb_init(void)
{
    c518:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c51c:	ldr	r4, [pc, #144]	; (c5b0 <usb_init+0x98>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    c51e:	bl	ca8c <usb_init_serialnumber>

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
    c522:	movs	r2, #0
    c524:	add.w	r0, r4, #224	; 0xe0
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    c528:	mov	r3, r4

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
    c52a:	str	r2, [r3, #0]
		table[i].addr = 0;
    c52c:	str	r2, [r3, #4]
    c52e:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    c530:	cmp	r3, r0
		table[i].desc = 0;
    c532:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    c536:	bne.n	c52a <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    c538:	ldr	r0, [pc, #120]	; (c5b4 <usb_init+0x9c>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    c53a:	ldr	r2, [pc, #124]	; (c5b8 <usb_init+0xa0>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    c53c:	ldr	r3, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    c53e:	ldr.w	lr, [pc, #144]	; c5d0 <usb_init+0xb8>
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    c542:	ldr	r7, [pc, #120]	; (c5bc <usb_init+0xa4>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    c544:	ldr	r5, [pc, #120]	; (c5c0 <usb_init+0xa8>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    c546:	ldr	r6, [pc, #124]	; (c5c4 <usb_init+0xac>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    c548:	ldr.w	r8, [pc, #136]	; c5d4 <usb_init+0xbc>
	USB0_ERRSTAT = 0xFF;
    c54c:	ldr.w	ip, [pc, #136]	; c5d8 <usb_init+0xc0>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    c550:	ldr.w	r9, [pc, #136]	; c5dc <usb_init+0xc4>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    c554:	orr.w	r3, r3, #262144	; 0x40000
    c558:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    c55a:	ldr	r3, [r2, #0]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    c55c:	ldr	r0, [pc, #104]	; (c5c8 <usb_init+0xb0>)

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    c55e:	orr.w	r3, r3, #50331648	; 0x3000000
    c562:	str	r3, [r2, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    c564:	ubfx	r3, r4, #8, #8
    c568:	strb.w	r3, [lr]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    c56c:	ubfx	r3, r4, #16, #8
    c570:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    c572:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    c574:	movs	r3, #255	; 0xff
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    c576:	add.w	r2, r2, #411648	; 0x64800
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    c57a:	strb	r4, [r5, #0]
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    c57c:	add.w	r2, r2, #264	; 0x108
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    c580:	strb.w	r3, [r8]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    c584:	ldr	r5, [pc, #68]	; (c5cc <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    c586:	strb.w	r3, [ip]
	USB0_OTGISTAT = 0xFF;
    c58a:	strb	r3, [r6, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    c58c:	movs	r3, #1
    c58e:	strb.w	r3, [r9]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    c592:	movs	r6, #112	; 0x70

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    c594:	strb.w	r1, [lr, #100]	; 0x64
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    c598:	mov.w	r4, #2097152	; 0x200000

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    c59c:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    c59e:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    c5a2:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    c5a4:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    c5a6:	strb	r1, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    c5a8:	add.w	lr, lr, #100	; 0x64
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    c5ac:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c5b0:	.word	0x1fff0000
    c5b4:	.word	0x40048034
    c5b8:	.word	0x4000d800
    c5bc:	.word	0x400720b0
    c5c0:	.word	0x400720b4
    c5c4:	.word	0x40072010
    c5c8:	.word	0xe000e104
    c5cc:	.word	0xe000e435
    c5d0:	.word	0x4007209c
    c5d4:	.word	0x40072080
    c5d8:	.word	0x40072088
    c5dc:	.word	0x40072094

0000c5e0 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    c5e0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    c5e4:	ldr	r6, [pc, #196]	; (c6ac <yield+0xcc>)
    c5e6:	ldrb	r3, [r6, #0]
    c5e8:	cbz	r3, c610 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    c5ea:	ldr	r7, [pc, #196]	; (c6b0 <yield+0xd0>)
    c5ec:	ldrb	r2, [r7, #0]
    c5ee:	cbnz	r2, c610 <yield+0x30>
	running = 1;
    c5f0:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    c5f2:	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    c5f4:	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    c5f6:	bmi.n	c666 <yield+0x86>
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIALUSB2) {
		if (SerialUSB2.available()) serialEventUSB2();
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    c5f8:	lsls	r2, r3, #30
    c5fa:	bmi.n	c630 <yield+0x50>
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    c5fc:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    c5fe:	lsls	r3, r3, #29
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    c600:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    c602:	bpl.n	c610 <yield+0x30>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;  
    c604:	ldr	r3, [pc, #172]	; (c6b4 <yield+0xd4>)
    c606:	ldr	r2, [r3, #0]
    c608:	cbz	r2, c610 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    c60a:	mrs	r2, IPSR
		if (ipsr != 0) return;
    c60e:	cbz	r2, c614 <yield+0x34>
    c610:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c614:	mrs	r1, PRIMASK
		__disable_irq();
    c618:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    c61a:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    c61c:	cbz	r0, c626 <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    c61e:	ldr	r4, [pc, #152]	; (c6b8 <yield+0xd8>)
    c620:	ldrb	r2, [r4, #0]
    c622:	cmp	r2, #0
    c624:	beq.n	c684 <yield+0xa4>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    c626:	cmp	r1, #0
    c628:	bne.n	c610 <yield+0x30>
    c62a:	cpsie	i
    c62c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial_putchar(c); return 1; }
	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c630:	ldr.w	r8, [pc, #144]	; c6c4 <yield+0xe4>
    c634:	ldrb.w	r2, [r8]
    c638:	cmp	r2, #0
    c63a:	beq.n	c5fc <yield+0x1c>
    c63c:	ldr.w	r9, [pc, #136]	; c6c8 <yield+0xe8>
    c640:	movs	r4, #0
    c642:	b.n	c650 <yield+0x70>
    c644:	adds	r4, #1
    c646:	ldrb.w	r3, [r8]
    c64a:	uxtb	r4, r4
    c64c:	cmp	r3, r4
    c64e:	bls.n	c676 <yield+0x96>
			s_serials_with_serial_events[i]->doYieldCode();
    c650:	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
	static uint8_t 			s_count_serials_with_serial_events;
	void 		(* const _serialEvent)(); 
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*_serialEvent)();
    c654:	ldr	r3, [r5, #0]
    c656:	mov	r0, r5
    c658:	ldr	r3, [r3, #16]
    c65a:	blx	r3
    c65c:	cmp	r0, #0
    c65e:	beq.n	c644 <yield+0x64>
    c660:	ldr	r3, [r5, #16]
    c662:	blx	r3
    c664:	b.n	c644 <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    c666:	bl	b28c <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    c66a:	cbnz	r0, c6a0 <yield+0xc0>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    c66c:	ldr	r3, [pc, #76]	; (c6bc <yield+0xdc>)
    c66e:	ldrb	r3, [r3, #0]
    c670:	cbnz	r3, c67a <yield+0x9a>
    c672:	ldrb	r3, [r6, #0]
    c674:	b.n	c5f8 <yield+0x18>
    c676:	ldrb	r3, [r6, #0]
    c678:	b.n	c5fc <yield+0x1c>
    c67a:	ldrb	r3, [r6, #0]
    c67c:	and.w	r3, r3, #254	; 0xfe
    c680:	strb	r3, [r6, #0]
    c682:	b.n	c5f8 <yield+0x18>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    c684:	ldr	r5, [r0, #20]
    c686:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    c688:	movs	r3, #1
    c68a:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    c68c:	cbz	r5, c6a6 <yield+0xc6>
			firstYield->_prev = nullptr;
    c68e:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    c690:	cbnz	r1, c694 <yield+0xb4>
    c692:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    c694:	movs	r5, #0
    c696:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    c698:	ldr	r3, [r0, #8]
    c69a:	blx	r3
		runningFromYield = false;
    c69c:	strb	r5, [r4, #0]
    c69e:	b.n	c610 <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    c6a0:	bl	c9a0 <serialEvent()>
    c6a4:	b.n	c66c <yield+0x8c>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    c6a6:	ldr	r3, [pc, #24]	; (c6c0 <yield+0xe0>)
    c6a8:	str	r5, [r3, #0]
    c6aa:	b.n	c690 <yield+0xb0>
    c6ac:	.word	0x1fff09cc
    c6b0:	.word	0x1fff209e
    c6b4:	.word	0x1fff20ac
    c6b8:	.word	0x1fff20b0
    c6bc:	.word	0x1fff09e0
    c6c0:	.word	0x1fff20a8
    c6c4:	.word	0x1fff20cc
    c6c8:	.word	0x1fff20b4

0000c6cc <EventResponder::triggerEventNotImmediate()>:
uint8_t _serialEvent_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB1_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;	

void EventResponder::triggerEventNotImmediate()
{
    c6cc:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c6ce:	mrs	r2, PRIMASK
		__disable_irq();
    c6d2:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    c6d4:	ldrb	r3, [r0, #29]
    c6d6:	cbnz	r3, c6e6 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    c6d8:	ldrb	r1, [r0, #28]
    c6da:	cmp	r1, #1
    c6dc:	beq.n	c6f0 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    c6de:	cmp	r1, #3
    c6e0:	beq.n	c704 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    c6e2:	movs	r3, #1
    c6e4:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    c6e6:	cbnz	r2, c6ea <EventResponder::triggerEventNotImmediate()+0x1e>
    c6e8:	cpsie	i
	}
	enableInterrupts(irq);
}
    c6ea:	ldr.w	r4, [sp], #4
    c6ee:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    c6f0:	ldr	r4, [pc, #68]	; (c738 <EventResponder::triggerEventNotImmediate()+0x6c>)
    c6f2:	ldr	r1, [r4, #0]
    c6f4:	cbz	r1, c720 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    c6f6:	ldr	r1, [pc, #68]	; (c73c <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    c6f8:	str	r3, [r0, #20]
				_prev = lastYield;
    c6fa:	ldr	r3, [r1, #0]
    c6fc:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    c6fe:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    c700:	str	r0, [r3, #20]
    c702:	b.n	c6e2 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    c704:	ldr	r4, [pc, #56]	; (c740 <EventResponder::triggerEventNotImmediate()+0x74>)
    c706:	ldr	r1, [r4, #0]
    c708:	cbz	r1, c72c <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    c70a:	ldr	r1, [pc, #56]	; (c744 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    c70c:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    c70e:	ldr	r3, [r1, #0]
    c710:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    c712:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    c714:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    c716:	ldr	r3, [pc, #48]	; (c748 <EventResponder::triggerEventNotImmediate()+0x7c>)
    c718:	mov.w	r1, #268435456	; 0x10000000
    c71c:	str	r1, [r3, #0]
    c71e:	b.n	c6e2 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    c720:	ldr	r3, [pc, #24]	; (c73c <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    c722:	str	r1, [r0, #20]
				_prev = nullptr;
    c724:	str	r1, [r0, #24]
				firstYield = this;
    c726:	str	r0, [r4, #0]
				lastYield = this;
    c728:	str	r0, [r3, #0]
    c72a:	b.n	c6e2 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    c72c:	ldr	r3, [pc, #20]	; (c744 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    c72e:	str	r1, [r0, #20]
				_prev = nullptr;
    c730:	str	r1, [r0, #24]
				firstInterrupt = this;
    c732:	str	r0, [r4, #0]
				lastInterrupt = this;
    c734:	str	r0, [r3, #0]
    c736:	b.n	c716 <EventResponder::triggerEventNotImmediate()+0x4a>
    c738:	.word	0x1fff20ac
    c73c:	.word	0x1fff20a8
    c740:	.word	0x1fff20a0
    c744:	.word	0x1fff20a4
    c748:	.word	0xe000ed04

0000c74c <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    c74c:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c74e:	mrs	r2, PRIMASK
		__disable_irq();
    c752:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    c754:	ldr	r4, [pc, #48]	; (c788 <EventResponder::runFromInterrupt()+0x3c>)
    c756:	ldr	r0, [r4, #0]
		if (first) {
    c758:	cbz	r0, c77c <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    c75a:	ldr	r6, [pc, #48]	; (c78c <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    c75c:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    c75e:	ldr	r3, [r0, #20]
    c760:	str	r3, [r4, #0]
			if (firstInterrupt) {
    c762:	cbz	r3, c782 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    c764:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    c766:	cbnz	r2, c76a <EventResponder::runFromInterrupt()+0x1e>
    c768:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    c76a:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    c76c:	ldr	r3, [r0, #8]
    c76e:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c770:	mrs	r2, PRIMASK
		__disable_irq();
    c774:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    c776:	ldr	r0, [r4, #0]
		if (first) {
    c778:	cmp	r0, #0
    c77a:	bne.n	c75e <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    c77c:	cbnz	r2, c780 <EventResponder::runFromInterrupt()+0x34>
    c77e:	cpsie	i
    c780:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    c782:	str	r3, [r6, #0]
    c784:	b.n	c766 <EventResponder::runFromInterrupt()+0x1a>
    c786:	nop
    c788:	.word	0x1fff20a0
    c78c:	.word	0x1fff20a4

0000c790 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    c790:	b.w	c74c <EventResponder::runFromInterrupt()>

0000c794 <systick_isr>:

extern "C" volatile uint32_t systick_millis_count;

void systick_isr(void)
{
	systick_millis_count++;
    c794:	ldr	r2, [pc, #8]	; (c7a0 <systick_isr+0xc>)
    c796:	ldr	r3, [r2, #0]
    c798:	adds	r3, #1
    c79a:	str	r3, [r2, #0]
    c79c:	bx	lr
    c79e:	nop
    c7a0:	.word	0x1fff1f90

0000c7a4 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    c7a4:	b.w	b2a8 <usb_serial_flush_input>

0000c7a8 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    c7a8:	b.w	b25c <usb_serial_peekchar>

0000c7ac <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    c7ac:	b.w	b214 <usb_serial_getchar>

0000c7b0 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    c7b0:	b.w	b28c <usb_serial_available>

0000c7b4 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    c7b4:	b.w	b448 <usb_serial_flush_output>

0000c7b8 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    c7b8:	b.w	b400 <usb_serial_write_buffer_free>

0000c7bc <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c7bc:	mov	r0, r1
    c7be:	mov	r1, r2
    c7c0:	b.w	b2e0 <usb_serial_write>

0000c7c4 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c7c4:	mov	r0, r1
    c7c6:	b.w	b3e8 <usb_serial_putchar>
    c7ca:	nop

0000c7cc <Print::write(unsigned char const*, unsigned int)>:

#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
    c7cc:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    c7ce:	mov	r6, r1
    c7d0:	cbz	r1, c7f0 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    c7d2:	cbz	r2, c7f4 <Print::write(unsigned char const*, unsigned int)+0x28>
    c7d4:	mov	r7, r0
    c7d6:	mov	r4, r2
    c7d8:	movs	r5, #0
    c7da:	ldr	r3, [r7, #0]
    c7dc:	ldrb.w	r1, [r6], #1
    c7e0:	ldr	r3, [r3, #0]
    c7e2:	mov	r0, r7
    c7e4:	blx	r3
    c7e6:	subs	r4, #1
    c7e8:	add	r5, r0
    c7ea:	bne.n	c7da <Print::write(unsigned char const*, unsigned int)+0xe>
    c7ec:	mov	r0, r5
    c7ee:	pop	{r3, r4, r5, r6, r7, pc}
#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    c7f0:	mov	r0, r1
    c7f2:	pop	{r3, r4, r5, r6, r7, pc}
    c7f4:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    c7f6:	pop	{r3, r4, r5, r6, r7, pc}

0000c7f8 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    c7f8:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    c7fa:	ldr	r2, [pc, #24]	; (c814 <Print::println()+0x1c>)
	return write(buf, 2);
    c7fc:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    c7fe:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    c800:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    c802:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    c804:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    c806:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    c80a:	movs	r2, #2
    c80c:	blx	r3
}
    c80e:	add	sp, #12
    c810:	ldr.w	pc, [sp], #4
    c814:	.word	0x00012000

0000c818 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    c818:	push	{r4, lr}
	((class Print *)file)->write((uint8_t *)ptr, len);
    c81a:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    c81c:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    c81e:	ldr	r3, [r3, #4]
    c820:	blx	r3
	return len;
}
    c822:	mov	r0, r4
    c824:	pop	{r4, pc}
    c826:	nop

0000c828 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    c828:	push	{r1, r2, r3}
    c82a:	push	{lr}
    c82c:	sub	sp, #8
    c82e:	add	r2, sp, #12
    c830:	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    c834:	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    c836:	bl	e748 <vdprintf>
#endif
}
    c83a:	add	sp, #8
    c83c:	ldr.w	lr, [sp], #4
    c840:	add	sp, #12
    c842:	bx	lr

0000c844 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    c844:	push	{r4, r5, r6, r7, lr}
    c846:	mov	r7, r0
    c848:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    c84a:	cmp	r2, #0
    c84c:	beq.n	c8b6 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    c84e:	cmp	r2, #1
    c850:	it	eq
    c852:	moveq	r2, #10
	}


	if (n == 0) {
    c854:	cbz	r1, c8ac <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    c856:	movs	r4, #33	; 0x21
    c858:	b.n	c85c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    c85a:	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    c85c:	udiv	r5, r1, r2
    c860:	mls	r1, r2, r5, r1
    c864:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c866:	cmp	r1, #9
    c868:	add.w	r1, r0, #48	; 0x30
    c86c:	it	ls
    c86e:	uxtbls	r0, r1
    c870:	add	r1, sp, #40	; 0x28
    c872:	it	hi
    c874:	addhi	r0, #55	; 0x37
    c876:	add	r1, r4
    c878:	it	hi
    c87a:	uxtbhi	r0, r0
    c87c:	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    c880:	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    c882:	mov	r1, r5
    c884:	cmp	r5, #0
    c886:	bne.n	c85a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    c888:	cbz	r3, c898 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    c88a:	subs	r4, #1
    c88c:	uxtb	r4, r4
		buf[i] = '-';
    c88e:	add	r3, sp, #40	; 0x28
    c890:	add	r3, r4
    c892:	movs	r2, #45	; 0x2d
    c894:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    c898:	ldr	r3, [r7, #0]
    c89a:	add	r2, sp, #4
    c89c:	adds	r1, r2, r4
    c89e:	ldr	r3, [r3, #4]
    c8a0:	mov	r0, r7
    c8a2:	rsb	r2, r4, #34	; 0x22
    c8a6:	blx	r3
}
    c8a8:	add	sp, #44	; 0x2c
    c8aa:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    c8ac:	movs	r2, #48	; 0x30
    c8ae:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    c8b2:	movs	r4, #33	; 0x21
    c8b4:	b.n	c888 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    c8b6:	ldr	r3, [r0, #0]
    c8b8:	uxtb	r1, r1
    c8ba:	ldr	r3, [r3, #0]
    c8bc:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    c8be:	add	sp, #44	; 0x2c
    c8c0:	pop	{r4, r5, r6, r7, pc}
    c8c2:	nop

0000c8c4 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    c8c4:	cmp	r1, #0
		sign = '-';
		n = -n;
    c8c6:	itte	lt
    c8c8:	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    c8ca:	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    c8cc:	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    c8ce:	movs	r2, #10
    c8d0:	b.w	c844 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

0000c8d4 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
    c8d4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c8d8:	sub	sp, #72	; 0x48
    c8da:	ldrb.w	r6, [sp, #104]	; 0x68
    c8de:	ldrb.w	sl, [sp, #108]	; 0x6c
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
    c8e2:	cmp	r6, #1
    c8e4:	bls.n	c986 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0xb2>
    c8e6:	mov	r4, r2
    c8e8:	mov	r5, r3
	if (n == 0) {
    c8ea:	orrs.w	r3, r4, r5
    c8ee:	mov	r9, r0
    c8f0:	beq.n	c97a <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0xa6>
    c8f2:	uxtb	r6, r6
    c8f4:	movs	r7, #0
    c8f6:	mov.w	r8, #65	; 0x41
    c8fa:	b.n	c900 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x2c>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    c8fc:	uxtb.w	r8, r3
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    c900:	mov	r0, r4
    c902:	mov	r1, r5
    c904:	mov	r2, r6
    c906:	mov	r3, r7
    c908:	bl	d480 <__aeabi_uldivmod>
    c90c:	mov	r1, r3
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c90e:	cmp	r1, #0
    c910:	it	eq
    c912:	cmpeq	r2, #10
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    c914:	uxtb	r3, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
    c916:	mov	r0, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c918:	add	r4, sp, #72	; 0x48
    c91a:	add.w	lr, r3, #48	; 0x30
    c91e:	add	r4, r8
    c920:	itte	cs
    c922:	addcs	r3, #55	; 0x37
    c924:	uxtbcs.w	lr, r3
    c928:	uxtbcc.w	lr, lr
			n /= base;
    c92c:	mov	r3, r7
    c92e:	mov	r1, r5
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c930:	strb.w	lr, [r4, #-68]
			n /= base;
    c934:	mov	r2, r6
    c936:	bl	d480 <__aeabi_uldivmod>
    c93a:	mov	r4, r0
    c93c:	mov	r5, r1
			if (n == 0) break;
    c93e:	orrs.w	r3, r4, r5
			i--;
    c942:	add.w	r3, r8, #4294967295
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    c946:	bne.n	c8fc <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x28>
			i--;
		}
	}
	if (sign) {
    c948:	cmp.w	sl, #0
    c94c:	beq.n	c960 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x8c>
		i--;
    c94e:	add.w	r8, r8, #4294967295
    c952:	uxtb.w	r8, r8
		buf[i] = '-';
    c956:	add	r3, sp, #72	; 0x48
    c958:	add	r3, r8
    c95a:	movs	r2, #45	; 0x2d
    c95c:	strb.w	r2, [r3, #-68]
	}
	return write(buf + i, sizeof(buf) - i);
    c960:	ldr.w	r3, [r9]
    c964:	add	r2, sp, #4
    c966:	add.w	r1, r2, r8
    c96a:	ldr	r3, [r3, #4]
    c96c:	mov	r0, r9
    c96e:	rsb	r2, r8, #66	; 0x42
    c972:	blx	r3
}
    c974:	add	sp, #72	; 0x48
    c976:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    c97a:	movs	r3, #48	; 0x30
    c97c:	strb.w	r3, [sp, #69]	; 0x45
		i = sizeof(buf) - 1;
    c980:	mov.w	r8, #65	; 0x41
    c984:	b.n	c948 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x74>
size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
    c986:	movs	r0, #0
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    c988:	add	sp, #72	; 0x48
    c98a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c98e:	nop

0000c990 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    c990:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    c992:	bl	1108 <setup>
	while (1) {
		loop();
    c996:	bl	1370 <loop>
		yield();
    c99a:	bl	c5e0 <yield>
    c99e:	b.n	c996 <main+0x6>

0000c9a0 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    c9a0:	bx	lr
    c9a2:	nop

0000c9a4 <operator new(unsigned int)>:
    c9a4:	b.w	d800 <malloc>

0000c9a8 <operator delete(void*, unsigned int)>:
    c9a8:	b.w	d810 <free>

0000c9ac <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    c9ac:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    c9ae:	ldr	r0, [pc, #164]	; (ca54 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    c9b0:	ldr	r2, [pc, #164]	; (ca58 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    c9b2:	ldr	r3, [pc, #168]	; (ca5c <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    c9b4:	ldr	r5, [pc, #168]	; (ca60 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    c9b6:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    c9b8:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    c9ba:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    c9bc:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    c9be:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    c9c0:	ldr	r4, [pc, #160]	; (ca64 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    c9c2:	cmp	r3, #8
    c9c4:	beq.n	ca28 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    c9c6:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    c9c8:	ldr	r0, [pc, #156]	; (ca68 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    c9ca:	ldr	r1, [pc, #160]	; (ca6c <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    c9cc:	beq.n	ca3e <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    c9ce:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    c9d0:	ite	eq
    c9d2:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    c9d4:	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    c9d6:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    c9d8:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    c9da:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    c9dc:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    c9de:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    c9e0:	ldr	r3, [pc, #140]	; (ca70 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    c9e2:	ldr	r1, [pc, #144]	; (ca74 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    c9e4:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    c9e6:	ldr	r2, [pc, #144]	; (ca78 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    c9e8:	cbz	r3, ca1a <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    c9ea:	movs	r3, #1
    c9ec:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    c9ee:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    c9f0:	ldr	r3, [pc, #136]	; (ca7c <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    c9f2:	ldr	r1, [pc, #140]	; (ca80 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    c9f4:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    c9f6:	ldr	r2, [pc, #140]	; (ca84 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    c9f8:	cmp	r3, #1
    c9fa:	bls.n	ca4a <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    c9fc:	cmp	r3, #4
    c9fe:	bls.n	ca20 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    ca00:	cmp	r3, #8
    ca02:	bls.n	ca42 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    ca04:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    ca06:	ite	ls
    ca08:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    ca0a:	movhi	r3, #135	; 0x87
    ca0c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    ca0e:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    ca10:	ldr	r3, [pc, #116]	; (ca88 <analog_init+0xdc>)
    ca12:	movs	r2, #1
    ca14:	strb	r2, [r3, #0]
}
    ca16:	pop	{r4, r5}
    ca18:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    ca1a:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    ca1c:	str	r3, [r2, #0]
    ca1e:	b.n	c9f0 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    ca20:	movs	r3, #132	; 0x84
    ca22:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    ca24:	str	r3, [r2, #0]
    ca26:	b.n	ca10 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    ca28:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    ca2c:	ldr	r1, [pc, #60]	; (ca6c <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    ca2e:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    ca30:	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    ca32:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    ca34:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    ca36:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    ca38:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    ca3a:	str	r3, [r1, #0]
    ca3c:	b.n	c9e0 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    ca3e:	movs	r2, #57	; 0x39
    ca40:	b.n	ca32 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    ca42:	movs	r3, #133	; 0x85
    ca44:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    ca46:	str	r3, [r2, #0]
    ca48:	b.n	ca10 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    ca4a:	movs	r3, #128	; 0x80
    ca4c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    ca4e:	str	r3, [r2, #0]
    ca50:	b.n	ca10 <analog_init+0x64>
    ca52:	nop
    ca54:	.word	0x40074000
    ca58:	.word	0x40074001
    ca5c:	.word	0x1fff09e1
    ca60:	.word	0x4003b008
    ca64:	.word	0x4003b00c
    ca68:	.word	0x400bb008
    ca6c:	.word	0x400bb00c
    ca70:	.word	0x1fff20ce
    ca74:	.word	0x4003b020
    ca78:	.word	0x400bb020
    ca7c:	.word	0x1fff09e2
    ca80:	.word	0x4003b024
    ca84:	.word	0x400bb024
    ca88:	.word	0x1fff20cd

0000ca8c <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    ca8c:	cpsid	i
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    ca8e:	ldr	r2, [pc, #96]	; (caf0 <usb_init_serialnumber+0x64>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    ca90:	ldr	r3, [pc, #96]	; (caf4 <usb_init_serialnumber+0x68>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    ca92:	ldr	r1, [pc, #100]	; (caf8 <usb_init_serialnumber+0x6c>)
    ca94:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    ca96:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    ca98:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    ca9a:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    ca9c:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    ca9e:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    caa0:	ldrb	r3, [r2, #0]
    caa2:	lsls	r3, r3, #24
    caa4:	bpl.n	caa0 <usb_init_serialnumber+0x14>
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    caa6:	push	{r4, lr}
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    caa8:	ldr	r3, [pc, #80]	; (cafc <usb_init_serialnumber+0x70>)
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    caaa:	sub	sp, #16
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    caac:	ldr	r0, [r3, #0]
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    caae:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    cab0:	ldr	r3, [pc, #76]	; (cb00 <usb_init_serialnumber+0x74>)
    cab2:	ldr	r4, [pc, #80]	; (cb04 <usb_init_serialnumber+0x78>)
    cab4:	cmp	r0, r3
    cab6:	it	ls
    cab8:	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    cabc:	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    cabe:	it	ls
    cac0:	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    cac2:	movs	r2, #10
    cac4:	bl	cb08 <ultoa>
    cac8:	add	r1, sp, #4
    caca:	mov	r0, r4
	for (i=0; i<10; i++) {
    cacc:	movs	r3, #0
		char c = buf[i];
    cace:	ldrb.w	r2, [r1], #1
    cad2:	adds	r3, #1
		if (!c) break;
    cad4:	cbz	r2, cae6 <usb_init_serialnumber+0x5a>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    cad6:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    cad8:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    cadc:	bne.n	cace <usb_init_serialnumber+0x42>
    cade:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    cae0:	strb	r3, [r4, #0]
}
    cae2:	add	sp, #16
    cae4:	pop	{r4, pc}
    cae6:	lsls	r3, r3, #1
    cae8:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    caea:	strb	r3, [r4, #0]
}
    caec:	add	sp, #16
    caee:	pop	{r4, pc}
    caf0:	.word	0x40020004
    caf4:	.word	0x40020000
    caf8:	.word	0x41070000
    cafc:	.word	0x4002000c
    cb00:	.word	0x0098967f
    cb04:	.word	0x1fff0ab8

0000cb08 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    cb08:	push	{r4, r5, r6, r7}
    cb0a:	subs	r5, r1, #1
    cb0c:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    cb0e:	movs	r4, #0
    cb10:	b.n	cb14 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    cb12:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    cb14:	udiv	r3, r0, r2
    cb18:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    cb1c:	cmp	r0, #9
    cb1e:	add.w	r7, r0, #48	; 0x30
    cb22:	itet	hi
    cb24:	addhi	r0, #55	; 0x37
    cb26:	uxtbls	r0, r7
    cb28:	uxtbhi	r0, r0
    cb2a:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    cb2e:	mov	r0, r3
    cb30:	cmp	r3, #0
    cb32:	bne.n	cb12 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    cb34:	adds	r2, r1, r4
    cb36:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    cb38:	cbz	r4, cb4e <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    cb3a:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    cb3c:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    cb40:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    cb42:	adds	r3, #1
    cb44:	subs	r0, r4, r3
    cb46:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    cb48:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    cb4c:	blt.n	cb3a <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    cb4e:	mov	r0, r1
    cb50:	pop	{r4, r5, r6, r7}
    cb52:	bx	lr

0000cb54 <__aeabi_atexit>:
    cb54:	mov	r3, r1
    cb56:	mov	r1, r0
    cb58:	mov	r0, r3
    cb5a:	b.w	d798 <__cxa_atexit>
    cb5e:	nop

0000cb60 <__aeabi_drsub>:
    cb60:	eor.w	r1, r1, #2147483648	; 0x80000000
    cb64:	b.n	cb6c <__adddf3>
    cb66:	nop

0000cb68 <__aeabi_dsub>:
    cb68:	eor.w	r3, r3, #2147483648	; 0x80000000

0000cb6c <__adddf3>:
    cb6c:	push	{r4, r5, lr}
    cb6e:	mov.w	r4, r1, lsl #1
    cb72:	mov.w	r5, r3, lsl #1
    cb76:	teq	r4, r5
    cb7a:	it	eq
    cb7c:	teqeq	r0, r2
    cb80:	itttt	ne
    cb82:	orrsne.w	ip, r4, r0
    cb86:	orrsne.w	ip, r5, r2
    cb8a:	mvnsne.w	ip, r4, asr #21
    cb8e:	mvnsne.w	ip, r5, asr #21
    cb92:	beq.w	cd5a <__adddf3+0x1ee>
    cb96:	mov.w	r4, r4, lsr #21
    cb9a:	rsbs	r5, r4, r5, lsr #21
    cb9e:	it	lt
    cba0:	neglt	r5, r5
    cba2:	ble.n	cbbe <__adddf3+0x52>
    cba4:	add	r4, r5
    cba6:	eor.w	r2, r0, r2
    cbaa:	eor.w	r3, r1, r3
    cbae:	eor.w	r0, r2, r0
    cbb2:	eor.w	r1, r3, r1
    cbb6:	eor.w	r2, r0, r2
    cbba:	eor.w	r3, r1, r3
    cbbe:	cmp	r5, #54	; 0x36
    cbc0:	it	hi
    cbc2:	pophi	{r4, r5, pc}
    cbc4:	tst.w	r1, #2147483648	; 0x80000000
    cbc8:	mov.w	r1, r1, lsl #12
    cbcc:	mov.w	ip, #1048576	; 0x100000
    cbd0:	orr.w	r1, ip, r1, lsr #12
    cbd4:	beq.n	cbdc <__adddf3+0x70>
    cbd6:	negs	r0, r0
    cbd8:	sbc.w	r1, r1, r1, lsl #1
    cbdc:	tst.w	r3, #2147483648	; 0x80000000
    cbe0:	mov.w	r3, r3, lsl #12
    cbe4:	orr.w	r3, ip, r3, lsr #12
    cbe8:	beq.n	cbf0 <__adddf3+0x84>
    cbea:	negs	r2, r2
    cbec:	sbc.w	r3, r3, r3, lsl #1
    cbf0:	teq	r4, r5
    cbf4:	beq.w	cd46 <__adddf3+0x1da>
    cbf8:	sub.w	r4, r4, #1
    cbfc:	rsbs	lr, r5, #32
    cc00:	blt.n	cc1e <__adddf3+0xb2>
    cc02:	lsl.w	ip, r2, lr
    cc06:	lsr.w	r2, r2, r5
    cc0a:	adds	r0, r0, r2
    cc0c:	adc.w	r1, r1, #0
    cc10:	lsl.w	r2, r3, lr
    cc14:	adds	r0, r0, r2
    cc16:	asr.w	r3, r3, r5
    cc1a:	adcs	r1, r3
    cc1c:	b.n	cc3c <__adddf3+0xd0>
    cc1e:	sub.w	r5, r5, #32
    cc22:	add.w	lr, lr, #32
    cc26:	cmp	r2, #1
    cc28:	lsl.w	ip, r3, lr
    cc2c:	it	cs
    cc2e:	orrcs.w	ip, ip, #2
    cc32:	asr.w	r3, r3, r5
    cc36:	adds	r0, r0, r3
    cc38:	adcs.w	r1, r1, r3, asr #31
    cc3c:	and.w	r5, r1, #2147483648	; 0x80000000
    cc40:	bpl.n	cc52 <__adddf3+0xe6>
    cc42:	mov.w	lr, #0
    cc46:	rsbs	ip, ip, #0
    cc4a:	sbcs.w	r0, lr, r0
    cc4e:	sbc.w	r1, lr, r1
    cc52:	cmp.w	r1, #1048576	; 0x100000
    cc56:	bcc.n	cc90 <__adddf3+0x124>
    cc58:	cmp.w	r1, #2097152	; 0x200000
    cc5c:	bcc.n	cc78 <__adddf3+0x10c>
    cc5e:	lsrs	r1, r1, #1
    cc60:	movs.w	r0, r0, rrx
    cc64:	mov.w	ip, ip, rrx
    cc68:	add.w	r4, r4, #1
    cc6c:	mov.w	r2, r4, lsl #21
    cc70:	cmn.w	r2, #4194304	; 0x400000
    cc74:	bcs.w	cdac <__adddf3+0x240>
    cc78:	cmp.w	ip, #2147483648	; 0x80000000
    cc7c:	it	eq
    cc7e:	movseq.w	ip, r0, lsr #1
    cc82:	adcs.w	r0, r0, #0
    cc86:	adc.w	r1, r1, r4, lsl #20
    cc8a:	orr.w	r1, r1, r5
    cc8e:	pop	{r4, r5, pc}
    cc90:	movs.w	ip, ip, lsl #1
    cc94:	adcs	r0, r0
    cc96:	adc.w	r1, r1, r1
    cc9a:	tst.w	r1, #1048576	; 0x100000
    cc9e:	sub.w	r4, r4, #1
    cca2:	bne.n	cc78 <__adddf3+0x10c>
    cca4:	teq	r1, #0
    cca8:	itt	eq
    ccaa:	moveq	r1, r0
    ccac:	moveq	r0, #0
    ccae:	clz	r3, r1
    ccb2:	it	eq
    ccb4:	addeq	r3, #32
    ccb6:	sub.w	r3, r3, #11
    ccba:	subs.w	r2, r3, #32
    ccbe:	bge.n	ccda <__adddf3+0x16e>
    ccc0:	adds	r2, #12
    ccc2:	ble.n	ccd6 <__adddf3+0x16a>
    ccc4:	add.w	ip, r2, #20
    ccc8:	rsb	r2, r2, #12
    cccc:	lsl.w	r0, r1, ip
    ccd0:	lsr.w	r1, r1, r2
    ccd4:	b.n	ccf0 <__adddf3+0x184>
    ccd6:	add.w	r2, r2, #20
    ccda:	it	le
    ccdc:	rsble	ip, r2, #32
    cce0:	lsl.w	r1, r1, r2
    cce4:	lsr.w	ip, r0, ip
    cce8:	itt	le
    ccea:	orrle.w	r1, r1, ip
    ccee:	lslle	r0, r2
    ccf0:	subs	r4, r4, r3
    ccf2:	ittt	ge
    ccf4:	addge.w	r1, r1, r4, lsl #20
    ccf8:	orrge	r1, r5
    ccfa:	popge	{r4, r5, pc}
    ccfc:	mvn.w	r4, r4
    cd00:	subs	r4, #31
    cd02:	bge.n	cd3e <__adddf3+0x1d2>
    cd04:	adds	r4, #12
    cd06:	bgt.n	cd26 <__adddf3+0x1ba>
    cd08:	add.w	r4, r4, #20
    cd0c:	rsb	r2, r4, #32
    cd10:	lsr.w	r0, r0, r4
    cd14:	lsl.w	r3, r1, r2
    cd18:	orr.w	r0, r0, r3
    cd1c:	lsr.w	r3, r1, r4
    cd20:	orr.w	r1, r5, r3
    cd24:	pop	{r4, r5, pc}
    cd26:	rsb	r4, r4, #12
    cd2a:	rsb	r2, r4, #32
    cd2e:	lsr.w	r0, r0, r2
    cd32:	lsl.w	r3, r1, r4
    cd36:	orr.w	r0, r0, r3
    cd3a:	mov	r1, r5
    cd3c:	pop	{r4, r5, pc}
    cd3e:	lsr.w	r0, r1, r4
    cd42:	mov	r1, r5
    cd44:	pop	{r4, r5, pc}
    cd46:	teq	r4, #0
    cd4a:	eor.w	r3, r3, #1048576	; 0x100000
    cd4e:	itte	eq
    cd50:	eoreq.w	r1, r1, #1048576	; 0x100000
    cd54:	addeq	r4, #1
    cd56:	subne	r5, #1
    cd58:	b.n	cbf8 <__adddf3+0x8c>
    cd5a:	mvns.w	ip, r4, asr #21
    cd5e:	it	ne
    cd60:	mvnsne.w	ip, r5, asr #21
    cd64:	beq.n	cdba <__adddf3+0x24e>
    cd66:	teq	r4, r5
    cd6a:	it	eq
    cd6c:	teqeq	r0, r2
    cd70:	beq.n	cd7e <__adddf3+0x212>
    cd72:	orrs.w	ip, r4, r0
    cd76:	itt	eq
    cd78:	moveq	r1, r3
    cd7a:	moveq	r0, r2
    cd7c:	pop	{r4, r5, pc}
    cd7e:	teq	r1, r3
    cd82:	ittt	ne
    cd84:	movne	r1, #0
    cd86:	movne	r0, #0
    cd88:	popne	{r4, r5, pc}
    cd8a:	movs.w	ip, r4, lsr #21
    cd8e:	bne.n	cd9c <__adddf3+0x230>
    cd90:	lsls	r0, r0, #1
    cd92:	adcs	r1, r1
    cd94:	it	cs
    cd96:	orrcs.w	r1, r1, #2147483648	; 0x80000000
    cd9a:	pop	{r4, r5, pc}
    cd9c:	adds.w	r4, r4, #4194304	; 0x400000
    cda0:	itt	cc
    cda2:	addcc.w	r1, r1, #1048576	; 0x100000
    cda6:	popcc	{r4, r5, pc}
    cda8:	and.w	r5, r1, #2147483648	; 0x80000000
    cdac:	orr.w	r1, r5, #2130706432	; 0x7f000000
    cdb0:	orr.w	r1, r1, #15728640	; 0xf00000
    cdb4:	mov.w	r0, #0
    cdb8:	pop	{r4, r5, pc}
    cdba:	mvns.w	ip, r4, asr #21
    cdbe:	itte	ne
    cdc0:	movne	r1, r3
    cdc2:	movne	r0, r2
    cdc4:	mvnseq.w	ip, r5, asr #21
    cdc8:	itt	ne
    cdca:	movne	r3, r1
    cdcc:	movne	r2, r0
    cdce:	orrs.w	r4, r0, r1, lsl #12
    cdd2:	itte	eq
    cdd4:	orrseq.w	r5, r2, r3, lsl #12
    cdd8:	teqeq	r1, r3
    cddc:	orrne.w	r1, r1, #524288	; 0x80000
    cde0:	pop	{r4, r5, pc}
    cde2:	nop

0000cde4 <__aeabi_ui2d>:
    cde4:	teq	r0, #0
    cde8:	itt	eq
    cdea:	moveq	r1, #0
    cdec:	bxeq	lr
    cdee:	push	{r4, r5, lr}
    cdf0:	mov.w	r4, #1024	; 0x400
    cdf4:	add.w	r4, r4, #50	; 0x32
    cdf8:	mov.w	r5, #0
    cdfc:	mov.w	r1, #0
    ce00:	b.n	cca4 <__adddf3+0x138>
    ce02:	nop

0000ce04 <__aeabi_i2d>:
    ce04:	teq	r0, #0
    ce08:	itt	eq
    ce0a:	moveq	r1, #0
    ce0c:	bxeq	lr
    ce0e:	push	{r4, r5, lr}
    ce10:	mov.w	r4, #1024	; 0x400
    ce14:	add.w	r4, r4, #50	; 0x32
    ce18:	ands.w	r5, r0, #2147483648	; 0x80000000
    ce1c:	it	mi
    ce1e:	negmi	r0, r0
    ce20:	mov.w	r1, #0
    ce24:	b.n	cca4 <__adddf3+0x138>
    ce26:	nop

0000ce28 <__aeabi_f2d>:
    ce28:	lsls	r2, r0, #1
    ce2a:	mov.w	r1, r2, asr #3
    ce2e:	mov.w	r1, r1, rrx
    ce32:	mov.w	r0, r2, lsl #28
    ce36:	itttt	ne
    ce38:	andsne.w	r3, r2, #4278190080	; 0xff000000
    ce3c:	teqne	r3, #4278190080	; 0xff000000
    ce40:	eorne.w	r1, r1, #939524096	; 0x38000000
    ce44:	bxne	lr
    ce46:	teq	r2, #0
    ce4a:	ite	ne
    ce4c:	teqne	r3, #4278190080	; 0xff000000
    ce50:	bxeq	lr
    ce52:	push	{r4, r5, lr}
    ce54:	mov.w	r4, #896	; 0x380
    ce58:	and.w	r5, r1, #2147483648	; 0x80000000
    ce5c:	bic.w	r1, r1, #2147483648	; 0x80000000
    ce60:	b.n	cca4 <__adddf3+0x138>
    ce62:	nop

0000ce64 <__aeabi_ul2d>:
    ce64:	orrs.w	r2, r0, r1
    ce68:	it	eq
    ce6a:	bxeq	lr
    ce6c:	push	{r4, r5, lr}
    ce6e:	mov.w	r5, #0
    ce72:	b.n	ce8a <__aeabi_l2d+0x16>

0000ce74 <__aeabi_l2d>:
    ce74:	orrs.w	r2, r0, r1
    ce78:	it	eq
    ce7a:	bxeq	lr
    ce7c:	push	{r4, r5, lr}
    ce7e:	ands.w	r5, r1, #2147483648	; 0x80000000
    ce82:	bpl.n	ce8a <__aeabi_l2d+0x16>
    ce84:	negs	r0, r0
    ce86:	sbc.w	r1, r1, r1, lsl #1
    ce8a:	mov.w	r4, #1024	; 0x400
    ce8e:	add.w	r4, r4, #50	; 0x32
    ce92:	movs.w	ip, r1, lsr #22
    ce96:	beq.w	cc52 <__adddf3+0xe6>
    ce9a:	mov.w	r2, #3
    ce9e:	movs.w	ip, ip, lsr #3
    cea2:	it	ne
    cea4:	addne	r2, #3
    cea6:	movs.w	ip, ip, lsr #3
    ceaa:	it	ne
    ceac:	addne	r2, #3
    ceae:	add.w	r2, r2, ip, lsr #3
    ceb2:	rsb	r3, r2, #32
    ceb6:	lsl.w	ip, r0, r3
    ceba:	lsr.w	r0, r0, r2
    cebe:	lsl.w	lr, r1, r3
    cec2:	orr.w	r0, r0, lr
    cec6:	lsr.w	r1, r1, r2
    ceca:	add	r4, r2
    cecc:	b.n	cc52 <__adddf3+0xe6>
    cece:	nop

0000ced0 <__aeabi_dmul>:
    ced0:	push	{r4, r5, r6, lr}
    ced2:	mov.w	ip, #255	; 0xff
    ced6:	orr.w	ip, ip, #1792	; 0x700
    ceda:	ands.w	r4, ip, r1, lsr #20
    cede:	ittte	ne
    cee0:	andsne.w	r5, ip, r3, lsr #20
    cee4:	teqne	r4, ip
    cee8:	teqne	r5, ip
    ceec:	bleq	d0ac <__aeabi_dmul+0x1dc>
    cef0:	add	r4, r5
    cef2:	eor.w	r6, r1, r3
    cef6:	bic.w	r1, r1, ip, lsl #21
    cefa:	bic.w	r3, r3, ip, lsl #21
    cefe:	orrs.w	r5, r0, r1, lsl #12
    cf02:	it	ne
    cf04:	orrsne.w	r5, r2, r3, lsl #12
    cf08:	orr.w	r1, r1, #1048576	; 0x100000
    cf0c:	orr.w	r3, r3, #1048576	; 0x100000
    cf10:	beq.n	cf84 <__aeabi_dmul+0xb4>
    cf12:	umull	ip, lr, r0, r2
    cf16:	mov.w	r5, #0
    cf1a:	umlal	lr, r5, r1, r2
    cf1e:	and.w	r2, r6, #2147483648	; 0x80000000
    cf22:	umlal	lr, r5, r0, r3
    cf26:	mov.w	r6, #0
    cf2a:	umlal	r5, r6, r1, r3
    cf2e:	teq	ip, #0
    cf32:	it	ne
    cf34:	orrne.w	lr, lr, #1
    cf38:	sub.w	r4, r4, #255	; 0xff
    cf3c:	cmp.w	r6, #512	; 0x200
    cf40:	sbc.w	r4, r4, #768	; 0x300
    cf44:	bcs.n	cf50 <__aeabi_dmul+0x80>
    cf46:	movs.w	lr, lr, lsl #1
    cf4a:	adcs	r5, r5
    cf4c:	adc.w	r6, r6, r6
    cf50:	orr.w	r1, r2, r6, lsl #11
    cf54:	orr.w	r1, r1, r5, lsr #21
    cf58:	mov.w	r0, r5, lsl #11
    cf5c:	orr.w	r0, r0, lr, lsr #21
    cf60:	mov.w	lr, lr, lsl #11
    cf64:	subs.w	ip, r4, #253	; 0xfd
    cf68:	it	hi
    cf6a:	cmphi.w	ip, #1792	; 0x700
    cf6e:	bhi.n	cfae <__aeabi_dmul+0xde>
    cf70:	cmp.w	lr, #2147483648	; 0x80000000
    cf74:	it	eq
    cf76:	movseq.w	lr, r0, lsr #1
    cf7a:	adcs.w	r0, r0, #0
    cf7e:	adc.w	r1, r1, r4, lsl #20
    cf82:	pop	{r4, r5, r6, pc}
    cf84:	and.w	r6, r6, #2147483648	; 0x80000000
    cf88:	orr.w	r1, r6, r1
    cf8c:	orr.w	r0, r0, r2
    cf90:	eor.w	r1, r1, r3
    cf94:	subs.w	r4, r4, ip, lsr #1
    cf98:	ittt	gt
    cf9a:	rsbsgt	r5, r4, ip
    cf9e:	orrgt.w	r1, r1, r4, lsl #20
    cfa2:	popgt	{r4, r5, r6, pc}
    cfa4:	orr.w	r1, r1, #1048576	; 0x100000
    cfa8:	mov.w	lr, #0
    cfac:	subs	r4, #1
    cfae:	bgt.w	d108 <__aeabi_dmul+0x238>
    cfb2:	cmn.w	r4, #54	; 0x36
    cfb6:	ittt	le
    cfb8:	movle	r0, #0
    cfba:	andle.w	r1, r1, #2147483648	; 0x80000000
    cfbe:	pople	{r4, r5, r6, pc}
    cfc0:	rsb	r4, r4, #0
    cfc4:	subs	r4, #32
    cfc6:	bge.n	d034 <__aeabi_dmul+0x164>
    cfc8:	adds	r4, #12
    cfca:	bgt.n	d004 <__aeabi_dmul+0x134>
    cfcc:	add.w	r4, r4, #20
    cfd0:	rsb	r5, r4, #32
    cfd4:	lsl.w	r3, r0, r5
    cfd8:	lsr.w	r0, r0, r4
    cfdc:	lsl.w	r2, r1, r5
    cfe0:	orr.w	r0, r0, r2
    cfe4:	and.w	r2, r1, #2147483648	; 0x80000000
    cfe8:	bic.w	r1, r1, #2147483648	; 0x80000000
    cfec:	adds.w	r0, r0, r3, lsr #31
    cff0:	lsr.w	r6, r1, r4
    cff4:	adc.w	r1, r2, r6
    cff8:	orrs.w	lr, lr, r3, lsl #1
    cffc:	it	eq
    cffe:	biceq.w	r0, r0, r3, lsr #31
    d002:	pop	{r4, r5, r6, pc}
    d004:	rsb	r4, r4, #12
    d008:	rsb	r5, r4, #32
    d00c:	lsl.w	r3, r0, r4
    d010:	lsr.w	r0, r0, r5
    d014:	lsl.w	r2, r1, r4
    d018:	orr.w	r0, r0, r2
    d01c:	and.w	r1, r1, #2147483648	; 0x80000000
    d020:	adds.w	r0, r0, r3, lsr #31
    d024:	adc.w	r1, r1, #0
    d028:	orrs.w	lr, lr, r3, lsl #1
    d02c:	it	eq
    d02e:	biceq.w	r0, r0, r3, lsr #31
    d032:	pop	{r4, r5, r6, pc}
    d034:	rsb	r5, r4, #32
    d038:	lsl.w	r2, r0, r5
    d03c:	orr.w	lr, lr, r2
    d040:	lsr.w	r3, r0, r4
    d044:	lsl.w	r2, r1, r5
    d048:	orr.w	r3, r3, r2
    d04c:	lsr.w	r0, r1, r4
    d050:	and.w	r1, r1, #2147483648	; 0x80000000
    d054:	lsr.w	r2, r1, r4
    d058:	bic.w	r0, r0, r2
    d05c:	add.w	r0, r0, r3, lsr #31
    d060:	orrs.w	lr, lr, r3, lsl #1
    d064:	it	eq
    d066:	biceq.w	r0, r0, r3, lsr #31
    d06a:	pop	{r4, r5, r6, pc}
    d06c:	teq	r4, #0
    d070:	bne.n	d092 <__aeabi_dmul+0x1c2>
    d072:	and.w	r6, r1, #2147483648	; 0x80000000
    d076:	lsls	r0, r0, #1
    d078:	adc.w	r1, r1, r1
    d07c:	tst.w	r1, #1048576	; 0x100000
    d080:	it	eq
    d082:	subeq	r4, #1
    d084:	beq.n	d076 <__aeabi_dmul+0x1a6>
    d086:	orr.w	r1, r1, r6
    d08a:	teq	r5, #0
    d08e:	it	ne
    d090:	bxne	lr
    d092:	and.w	r6, r3, #2147483648	; 0x80000000
    d096:	lsls	r2, r2, #1
    d098:	adc.w	r3, r3, r3
    d09c:	tst.w	r3, #1048576	; 0x100000
    d0a0:	it	eq
    d0a2:	subeq	r5, #1
    d0a4:	beq.n	d096 <__aeabi_dmul+0x1c6>
    d0a6:	orr.w	r3, r3, r6
    d0aa:	bx	lr
    d0ac:	teq	r4, ip
    d0b0:	and.w	r5, ip, r3, lsr #20
    d0b4:	it	ne
    d0b6:	teqne	r5, ip
    d0ba:	beq.n	d0d6 <__aeabi_dmul+0x206>
    d0bc:	orrs.w	r6, r0, r1, lsl #1
    d0c0:	it	ne
    d0c2:	orrsne.w	r6, r2, r3, lsl #1
    d0c6:	bne.n	d06c <__aeabi_dmul+0x19c>
    d0c8:	eor.w	r1, r1, r3
    d0cc:	and.w	r1, r1, #2147483648	; 0x80000000
    d0d0:	mov.w	r0, #0
    d0d4:	pop	{r4, r5, r6, pc}
    d0d6:	orrs.w	r6, r0, r1, lsl #1
    d0da:	itte	eq
    d0dc:	moveq	r0, r2
    d0de:	moveq	r1, r3
    d0e0:	orrsne.w	r6, r2, r3, lsl #1
    d0e4:	beq.n	d11a <__aeabi_dmul+0x24a>
    d0e6:	teq	r4, ip
    d0ea:	bne.n	d0f2 <__aeabi_dmul+0x222>
    d0ec:	orrs.w	r6, r0, r1, lsl #12
    d0f0:	bne.n	d11a <__aeabi_dmul+0x24a>
    d0f2:	teq	r5, ip
    d0f6:	bne.n	d104 <__aeabi_dmul+0x234>
    d0f8:	orrs.w	r6, r2, r3, lsl #12
    d0fc:	itt	ne
    d0fe:	movne	r0, r2
    d100:	movne	r1, r3
    d102:	bne.n	d11a <__aeabi_dmul+0x24a>
    d104:	eor.w	r1, r1, r3
    d108:	and.w	r1, r1, #2147483648	; 0x80000000
    d10c:	orr.w	r1, r1, #2130706432	; 0x7f000000
    d110:	orr.w	r1, r1, #15728640	; 0xf00000
    d114:	mov.w	r0, #0
    d118:	pop	{r4, r5, r6, pc}
    d11a:	orr.w	r1, r1, #2130706432	; 0x7f000000
    d11e:	orr.w	r1, r1, #16252928	; 0xf80000
    d122:	pop	{r4, r5, r6, pc}

0000d124 <__aeabi_ddiv>:
    d124:	push	{r4, r5, r6, lr}
    d126:	mov.w	ip, #255	; 0xff
    d12a:	orr.w	ip, ip, #1792	; 0x700
    d12e:	ands.w	r4, ip, r1, lsr #20
    d132:	ittte	ne
    d134:	andsne.w	r5, ip, r3, lsr #20
    d138:	teqne	r4, ip
    d13c:	teqne	r5, ip
    d140:	bleq	d292 <__aeabi_ddiv+0x16e>
    d144:	sub.w	r4, r4, r5
    d148:	eor.w	lr, r1, r3
    d14c:	orrs.w	r5, r2, r3, lsl #12
    d150:	mov.w	r1, r1, lsl #12
    d154:	beq.w	d268 <__aeabi_ddiv+0x144>
    d158:	mov.w	r3, r3, lsl #12
    d15c:	mov.w	r5, #268435456	; 0x10000000
    d160:	orr.w	r3, r5, r3, lsr #4
    d164:	orr.w	r3, r3, r2, lsr #24
    d168:	mov.w	r2, r2, lsl #8
    d16c:	orr.w	r5, r5, r1, lsr #4
    d170:	orr.w	r5, r5, r0, lsr #24
    d174:	mov.w	r6, r0, lsl #8
    d178:	and.w	r1, lr, #2147483648	; 0x80000000
    d17c:	cmp	r5, r3
    d17e:	it	eq
    d180:	cmpeq	r6, r2
    d182:	adc.w	r4, r4, #253	; 0xfd
    d186:	add.w	r4, r4, #768	; 0x300
    d18a:	bcs.n	d192 <__aeabi_ddiv+0x6e>
    d18c:	lsrs	r3, r3, #1
    d18e:	mov.w	r2, r2, rrx
    d192:	subs	r6, r6, r2
    d194:	sbc.w	r5, r5, r3
    d198:	lsrs	r3, r3, #1
    d19a:	mov.w	r2, r2, rrx
    d19e:	mov.w	r0, #1048576	; 0x100000
    d1a2:	mov.w	ip, #524288	; 0x80000
    d1a6:	subs.w	lr, r6, r2
    d1aa:	sbcs.w	lr, r5, r3
    d1ae:	ittt	cs
    d1b0:	subcs	r6, r6, r2
    d1b2:	movcs	r5, lr
    d1b4:	orrcs.w	r0, r0, ip
    d1b8:	lsrs	r3, r3, #1
    d1ba:	mov.w	r2, r2, rrx
    d1be:	subs.w	lr, r6, r2
    d1c2:	sbcs.w	lr, r5, r3
    d1c6:	ittt	cs
    d1c8:	subcs	r6, r6, r2
    d1ca:	movcs	r5, lr
    d1cc:	orrcs.w	r0, r0, ip, lsr #1
    d1d0:	lsrs	r3, r3, #1
    d1d2:	mov.w	r2, r2, rrx
    d1d6:	subs.w	lr, r6, r2
    d1da:	sbcs.w	lr, r5, r3
    d1de:	ittt	cs
    d1e0:	subcs	r6, r6, r2
    d1e2:	movcs	r5, lr
    d1e4:	orrcs.w	r0, r0, ip, lsr #2
    d1e8:	lsrs	r3, r3, #1
    d1ea:	mov.w	r2, r2, rrx
    d1ee:	subs.w	lr, r6, r2
    d1f2:	sbcs.w	lr, r5, r3
    d1f6:	ittt	cs
    d1f8:	subcs	r6, r6, r2
    d1fa:	movcs	r5, lr
    d1fc:	orrcs.w	r0, r0, ip, lsr #3
    d200:	orrs.w	lr, r5, r6
    d204:	beq.n	d238 <__aeabi_ddiv+0x114>
    d206:	mov.w	r5, r5, lsl #4
    d20a:	orr.w	r5, r5, r6, lsr #28
    d20e:	mov.w	r6, r6, lsl #4
    d212:	mov.w	r3, r3, lsl #3
    d216:	orr.w	r3, r3, r2, lsr #29
    d21a:	mov.w	r2, r2, lsl #3
    d21e:	movs.w	ip, ip, lsr #4
    d222:	bne.n	d1a6 <__aeabi_ddiv+0x82>
    d224:	tst.w	r1, #1048576	; 0x100000
    d228:	bne.n	d242 <__aeabi_ddiv+0x11e>
    d22a:	orr.w	r1, r1, r0
    d22e:	mov.w	r0, #0
    d232:	mov.w	ip, #2147483648	; 0x80000000
    d236:	b.n	d1a6 <__aeabi_ddiv+0x82>
    d238:	tst.w	r1, #1048576	; 0x100000
    d23c:	itt	eq
    d23e:	orreq	r1, r0
    d240:	moveq	r0, #0
    d242:	subs.w	ip, r4, #253	; 0xfd
    d246:	it	hi
    d248:	cmphi.w	ip, #1792	; 0x700
    d24c:	bhi.w	cfae <__aeabi_dmul+0xde>
    d250:	subs.w	ip, r5, r3
    d254:	itt	eq
    d256:	subseq.w	ip, r6, r2
    d25a:	movseq.w	ip, r0, lsr #1
    d25e:	adcs.w	r0, r0, #0
    d262:	adc.w	r1, r1, r4, lsl #20
    d266:	pop	{r4, r5, r6, pc}
    d268:	and.w	lr, lr, #2147483648	; 0x80000000
    d26c:	orr.w	r1, lr, r1, lsr #12
    d270:	adds.w	r4, r4, ip, lsr #1
    d274:	ittt	gt
    d276:	rsbsgt	r5, r4, ip
    d27a:	orrgt.w	r1, r1, r4, lsl #20
    d27e:	popgt	{r4, r5, r6, pc}
    d280:	orr.w	r1, r1, #1048576	; 0x100000
    d284:	mov.w	lr, #0
    d288:	subs	r4, #1
    d28a:	b.n	cfae <__aeabi_dmul+0xde>
    d28c:	orr.w	lr, r5, r6
    d290:	b.n	cfae <__aeabi_dmul+0xde>
    d292:	and.w	r5, ip, r3, lsr #20
    d296:	teq	r4, ip
    d29a:	it	eq
    d29c:	teqeq	r5, ip
    d2a0:	beq.w	d11a <__aeabi_dmul+0x24a>
    d2a4:	teq	r4, ip
    d2a8:	bne.n	d2c0 <__aeabi_ddiv+0x19c>
    d2aa:	orrs.w	r4, r0, r1, lsl #12
    d2ae:	bne.w	d11a <__aeabi_dmul+0x24a>
    d2b2:	teq	r5, ip
    d2b6:	bne.w	d104 <__aeabi_dmul+0x234>
    d2ba:	mov	r0, r2
    d2bc:	mov	r1, r3
    d2be:	b.n	d11a <__aeabi_dmul+0x24a>
    d2c0:	teq	r5, ip
    d2c4:	bne.n	d2d4 <__aeabi_ddiv+0x1b0>
    d2c6:	orrs.w	r5, r2, r3, lsl #12
    d2ca:	beq.w	d0c8 <__aeabi_dmul+0x1f8>
    d2ce:	mov	r0, r2
    d2d0:	mov	r1, r3
    d2d2:	b.n	d11a <__aeabi_dmul+0x24a>
    d2d4:	orrs.w	r6, r0, r1, lsl #1
    d2d8:	it	ne
    d2da:	orrsne.w	r6, r2, r3, lsl #1
    d2de:	bne.w	d06c <__aeabi_dmul+0x19c>
    d2e2:	orrs.w	r4, r0, r1, lsl #1
    d2e6:	bne.w	d104 <__aeabi_dmul+0x234>
    d2ea:	orrs.w	r5, r2, r3, lsl #1
    d2ee:	bne.w	d0c8 <__aeabi_dmul+0x1f8>
    d2f2:	b.n	d11a <__aeabi_dmul+0x24a>

0000d2f4 <__gedf2>:
    d2f4:	mov.w	ip, #4294967295
    d2f8:	b.n	d308 <__cmpdf2+0x4>
    d2fa:	nop

0000d2fc <__ledf2>:
    d2fc:	mov.w	ip, #1
    d300:	b.n	d308 <__cmpdf2+0x4>
    d302:	nop

0000d304 <__cmpdf2>:
    d304:	mov.w	ip, #1
    d308:	str.w	ip, [sp, #-4]!
    d30c:	mov.w	ip, r1, lsl #1
    d310:	mvns.w	ip, ip, asr #21
    d314:	mov.w	ip, r3, lsl #1
    d318:	it	ne
    d31a:	mvnsne.w	ip, ip, asr #21
    d31e:	beq.n	d358 <__cmpdf2+0x54>
    d320:	add	sp, #4
    d322:	orrs.w	ip, r0, r1, lsl #1
    d326:	ite	eq
    d328:	orrseq.w	ip, r2, r3, lsl #1
    d32c:	teqne	r1, r3
    d330:	ittt	eq
    d332:	teqeq	r0, r2
    d336:	moveq	r0, #0
    d338:	bxeq	lr
    d33a:	cmn.w	r0, #0
    d33e:	teq	r1, r3
    d342:	it	pl
    d344:	cmppl	r1, r3
    d346:	it	eq
    d348:	cmpeq	r0, r2
    d34a:	ite	cs
    d34c:	asrcs	r0, r3, #31
    d34e:	mvncc.w	r0, r3, asr #31
    d352:	orr.w	r0, r0, #1
    d356:	bx	lr
    d358:	mov.w	ip, r1, lsl #1
    d35c:	mvns.w	ip, ip, asr #21
    d360:	bne.n	d368 <__cmpdf2+0x64>
    d362:	orrs.w	ip, r0, r1, lsl #12
    d366:	bne.n	d378 <__cmpdf2+0x74>
    d368:	mov.w	ip, r3, lsl #1
    d36c:	mvns.w	ip, ip, asr #21
    d370:	bne.n	d320 <__cmpdf2+0x1c>
    d372:	orrs.w	ip, r2, r3, lsl #12
    d376:	beq.n	d320 <__cmpdf2+0x1c>
    d378:	ldr.w	r0, [sp], #4
    d37c:	bx	lr
    d37e:	nop

0000d380 <__aeabi_cdrcmple>:
    d380:	mov	ip, r0
    d382:	mov	r0, r2
    d384:	mov	r2, ip
    d386:	mov	ip, r1
    d388:	mov	r1, r3
    d38a:	mov	r3, ip
    d38c:	b.n	d390 <__aeabi_cdcmpeq>
    d38e:	nop

0000d390 <__aeabi_cdcmpeq>:
    d390:	push	{r0, lr}
    d392:	bl	d304 <__cmpdf2>
    d396:	cmp	r0, #0
    d398:	it	mi
    d39a:	cmnmi.w	r0, #0
    d39e:	pop	{r0, pc}

0000d3a0 <__aeabi_dcmpeq>:
    d3a0:	str.w	lr, [sp, #-8]!
    d3a4:	bl	d390 <__aeabi_cdcmpeq>
    d3a8:	ite	eq
    d3aa:	moveq	r0, #1
    d3ac:	movne	r0, #0
    d3ae:	ldr.w	pc, [sp], #8
    d3b2:	nop

0000d3b4 <__aeabi_dcmplt>:
    d3b4:	str.w	lr, [sp, #-8]!
    d3b8:	bl	d390 <__aeabi_cdcmpeq>
    d3bc:	ite	cc
    d3be:	movcc	r0, #1
    d3c0:	movcs	r0, #0
    d3c2:	ldr.w	pc, [sp], #8
    d3c6:	nop

0000d3c8 <__aeabi_dcmple>:
    d3c8:	str.w	lr, [sp, #-8]!
    d3cc:	bl	d390 <__aeabi_cdcmpeq>
    d3d0:	ite	ls
    d3d2:	movls	r0, #1
    d3d4:	movhi	r0, #0
    d3d6:	ldr.w	pc, [sp], #8
    d3da:	nop

0000d3dc <__aeabi_dcmpge>:
    d3dc:	str.w	lr, [sp, #-8]!
    d3e0:	bl	d380 <__aeabi_cdrcmple>
    d3e4:	ite	ls
    d3e6:	movls	r0, #1
    d3e8:	movhi	r0, #0
    d3ea:	ldr.w	pc, [sp], #8
    d3ee:	nop

0000d3f0 <__aeabi_dcmpgt>:
    d3f0:	str.w	lr, [sp, #-8]!
    d3f4:	bl	d380 <__aeabi_cdrcmple>
    d3f8:	ite	cc
    d3fa:	movcc	r0, #1
    d3fc:	movcs	r0, #0
    d3fe:	ldr.w	pc, [sp], #8
    d402:	nop

0000d404 <__aeabi_dcmpun>:
    d404:	mov.w	ip, r1, lsl #1
    d408:	mvns.w	ip, ip, asr #21
    d40c:	bne.n	d414 <__aeabi_dcmpun+0x10>
    d40e:	orrs.w	ip, r0, r1, lsl #12
    d412:	bne.n	d42a <__aeabi_dcmpun+0x26>
    d414:	mov.w	ip, r3, lsl #1
    d418:	mvns.w	ip, ip, asr #21
    d41c:	bne.n	d424 <__aeabi_dcmpun+0x20>
    d41e:	orrs.w	ip, r2, r3, lsl #12
    d422:	bne.n	d42a <__aeabi_dcmpun+0x26>
    d424:	mov.w	r0, #0
    d428:	bx	lr
    d42a:	mov.w	r0, #1
    d42e:	bx	lr

0000d430 <__aeabi_d2iz>:
    d430:	mov.w	r2, r1, lsl #1
    d434:	adds.w	r2, r2, #2097152	; 0x200000
    d438:	bcs.n	d466 <__aeabi_d2iz+0x36>
    d43a:	bpl.n	d460 <__aeabi_d2iz+0x30>
    d43c:	mvn.w	r3, #992	; 0x3e0
    d440:	subs.w	r2, r3, r2, asr #21
    d444:	bls.n	d46c <__aeabi_d2iz+0x3c>
    d446:	mov.w	r3, r1, lsl #11
    d44a:	orr.w	r3, r3, #2147483648	; 0x80000000
    d44e:	orr.w	r3, r3, r0, lsr #21
    d452:	tst.w	r1, #2147483648	; 0x80000000
    d456:	lsr.w	r0, r3, r2
    d45a:	it	ne
    d45c:	negne	r0, r0
    d45e:	bx	lr
    d460:	mov.w	r0, #0
    d464:	bx	lr
    d466:	orrs.w	r0, r0, r1, lsl #12
    d46a:	bne.n	d478 <__aeabi_d2iz+0x48>
    d46c:	ands.w	r0, r1, #2147483648	; 0x80000000
    d470:	it	eq
    d472:	mvneq.w	r0, #2147483648	; 0x80000000
    d476:	bx	lr
    d478:	mov.w	r0, #0
    d47c:	bx	lr
    d47e:	nop

0000d480 <__aeabi_uldivmod>:
    d480:	cbnz	r3, d498 <__aeabi_uldivmod+0x18>
    d482:	cbnz	r2, d498 <__aeabi_uldivmod+0x18>
    d484:	cmp	r1, #0
    d486:	it	eq
    d488:	cmpeq	r0, #0
    d48a:	itt	ne
    d48c:	movne.w	r1, #4294967295
    d490:	movne.w	r0, #4294967295
    d494:	b.w	d794 <__aeabi_idiv0>
    d498:	sub.w	ip, sp, #8
    d49c:	strd	ip, lr, [sp, #-16]!
    d4a0:	bl	d4b0 <__udivmoddi4>
    d4a4:	ldr.w	lr, [sp, #4]
    d4a8:	ldrd	r2, r3, [sp, #8]
    d4ac:	add	sp, #16
    d4ae:	bx	lr

0000d4b0 <__udivmoddi4>:
    d4b0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d4b4:	mov	ip, r1
    d4b6:	mov	r6, r1
    d4b8:	mov	r4, r0
    d4ba:	ldr	r5, [sp, #32]
    d4bc:	cmp	r3, #0
    d4be:	bne.n	d562 <__udivmoddi4+0xb2>
    d4c0:	cmp	r2, r1
    d4c2:	mov	r7, r2
    d4c4:	bls.n	d5a0 <__udivmoddi4+0xf0>
    d4c6:	clz	lr, r2
    d4ca:	cmp.w	lr, #0
    d4ce:	beq.n	d4e8 <__udivmoddi4+0x38>
    d4d0:	rsb	r4, lr, #32
    d4d4:	lsr.w	r4, r0, r4
    d4d8:	lsl.w	r6, r1, lr
    d4dc:	orr.w	ip, r4, r6
    d4e0:	lsl.w	r7, r2, lr
    d4e4:	lsl.w	r4, r0, lr
    d4e8:	mov.w	r9, r7, lsr #16
    d4ec:	lsrs	r2, r4, #16
    d4ee:	udiv	r0, ip, r9
    d4f2:	uxth.w	r8, r7
    d4f6:	mls	r6, r9, r0, ip
    d4fa:	orr.w	r6, r2, r6, lsl #16
    d4fe:	mul.w	r3, r0, r8
    d502:	cmp	r3, r6
    d504:	bls.n	d51a <__udivmoddi4+0x6a>
    d506:	adds	r6, r6, r7
    d508:	add.w	r2, r0, #4294967295
    d50c:	bcs.w	d754 <__udivmoddi4+0x2a4>
    d510:	cmp	r3, r6
    d512:	bls.w	d754 <__udivmoddi4+0x2a4>
    d516:	subs	r0, #2
    d518:	add	r6, r7
    d51a:	subs	r6, r6, r3
    d51c:	uxth	r2, r4
    d51e:	udiv	r3, r6, r9
    d522:	mls	r6, r9, r3, r6
    d526:	orr.w	r4, r2, r6, lsl #16
    d52a:	mul.w	r8, r3, r8
    d52e:	cmp	r8, r4
    d530:	bls.n	d546 <__udivmoddi4+0x96>
    d532:	adds	r4, r4, r7
    d534:	add.w	r2, r3, #4294967295
    d538:	bcs.w	d750 <__udivmoddi4+0x2a0>
    d53c:	cmp	r8, r4
    d53e:	bls.w	d750 <__udivmoddi4+0x2a0>
    d542:	subs	r3, #2
    d544:	add	r4, r7
    d546:	rsb	r4, r8, r4
    d54a:	orr.w	r0, r3, r0, lsl #16
    d54e:	movs	r1, #0
    d550:	cmp	r5, #0
    d552:	beq.n	d61a <__udivmoddi4+0x16a>
    d554:	lsr.w	r4, r4, lr
    d558:	movs	r3, #0
    d55a:	str	r4, [r5, #0]
    d55c:	str	r3, [r5, #4]
    d55e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d562:	cmp	r3, r1
    d564:	bls.n	d576 <__udivmoddi4+0xc6>
    d566:	cmp	r5, #0
    d568:	beq.n	d616 <__udivmoddi4+0x166>
    d56a:	movs	r1, #0
    d56c:	stmia.w	r5, {r0, r6}
    d570:	mov	r0, r1
    d572:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d576:	clz	r1, r3
    d57a:	cmp	r1, #0
    d57c:	bne.w	d6a0 <__udivmoddi4+0x1f0>
    d580:	cmp	r3, r6
    d582:	bcc.n	d58a <__udivmoddi4+0xda>
    d584:	cmp	r2, r0
    d586:	bhi.w	d77a <__udivmoddi4+0x2ca>
    d58a:	subs	r4, r0, r2
    d58c:	sbc.w	r6, r6, r3
    d590:	movs	r0, #1
    d592:	mov	ip, r6
    d594:	cmp	r5, #0
    d596:	beq.n	d61a <__udivmoddi4+0x16a>
    d598:	stmia.w	r5, {r4, ip}
    d59c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d5a0:	cbnz	r2, d5a8 <__udivmoddi4+0xf8>
    d5a2:	movs	r7, #1
    d5a4:	udiv	r7, r7, r2
    d5a8:	clz	lr, r7
    d5ac:	cmp.w	lr, #0
    d5b0:	bne.n	d61e <__udivmoddi4+0x16e>
    d5b2:	subs	r3, r6, r7
    d5b4:	mov.w	r8, r7, lsr #16
    d5b8:	uxth.w	ip, r7
    d5bc:	movs	r1, #1
    d5be:	udiv	r0, r3, r8
    d5c2:	lsrs	r2, r4, #16
    d5c4:	mls	r6, r8, r0, r3
    d5c8:	orr.w	r6, r2, r6, lsl #16
    d5cc:	mul.w	r3, ip, r0
    d5d0:	cmp	r3, r6
    d5d2:	bls.n	d5e4 <__udivmoddi4+0x134>
    d5d4:	adds	r6, r6, r7
    d5d6:	add.w	r2, r0, #4294967295
    d5da:	bcs.n	d5e2 <__udivmoddi4+0x132>
    d5dc:	cmp	r3, r6
    d5de:	bhi.w	d77e <__udivmoddi4+0x2ce>
    d5e2:	mov	r0, r2
    d5e4:	subs	r6, r6, r3
    d5e6:	uxth	r2, r4
    d5e8:	udiv	r3, r6, r8
    d5ec:	mls	r6, r8, r3, r6
    d5f0:	orr.w	r4, r2, r6, lsl #16
    d5f4:	mul.w	ip, ip, r3
    d5f8:	cmp	ip, r4
    d5fa:	bls.n	d60c <__udivmoddi4+0x15c>
    d5fc:	adds	r4, r4, r7
    d5fe:	add.w	r2, r3, #4294967295
    d602:	bcs.n	d60a <__udivmoddi4+0x15a>
    d604:	cmp	ip, r4
    d606:	bhi.w	d774 <__udivmoddi4+0x2c4>
    d60a:	mov	r3, r2
    d60c:	rsb	r4, ip, r4
    d610:	orr.w	r0, r3, r0, lsl #16
    d614:	b.n	d550 <__udivmoddi4+0xa0>
    d616:	mov	r1, r5
    d618:	mov	r0, r5
    d61a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d61e:	rsb	r1, lr, #32
    d622:	lsl.w	r3, r6, lr
    d626:	lsl.w	r7, r7, lr
    d62a:	lsr.w	r9, r0, r1
    d62e:	mov.w	r8, r7, lsr #16
    d632:	lsrs	r6, r1
    d634:	orr.w	r9, r9, r3
    d638:	udiv	sl, r6, r8
    d63c:	mov.w	r4, r9, lsr #16
    d640:	mls	r6, r8, sl, r6
    d644:	uxth.w	ip, r7
    d648:	orr.w	r3, r4, r6, lsl #16
    d64c:	mul.w	r2, sl, ip
    d650:	cmp	r2, r3
    d652:	lsl.w	r4, r0, lr
    d656:	bls.n	d66e <__udivmoddi4+0x1be>
    d658:	adds	r3, r3, r7
    d65a:	add.w	r1, sl, #4294967295
    d65e:	bcs.w	d770 <__udivmoddi4+0x2c0>
    d662:	cmp	r2, r3
    d664:	bls.w	d770 <__udivmoddi4+0x2c0>
    d668:	sub.w	sl, sl, #2
    d66c:	add	r3, r7
    d66e:	subs	r3, r3, r2
    d670:	uxth.w	r9, r9
    d674:	udiv	r1, r3, r8
    d678:	mls	r3, r8, r1, r3
    d67c:	orr.w	r3, r9, r3, lsl #16
    d680:	mul.w	r6, r1, ip
    d684:	cmp	r6, r3
    d686:	bls.n	d698 <__udivmoddi4+0x1e8>
    d688:	adds	r3, r3, r7
    d68a:	add.w	r2, r1, #4294967295
    d68e:	bcs.n	d768 <__udivmoddi4+0x2b8>
    d690:	cmp	r6, r3
    d692:	bls.n	d768 <__udivmoddi4+0x2b8>
    d694:	subs	r1, #2
    d696:	add	r3, r7
    d698:	subs	r3, r3, r6
    d69a:	orr.w	r1, r1, sl, lsl #16
    d69e:	b.n	d5be <__udivmoddi4+0x10e>
    d6a0:	rsb	lr, r1, #32
    d6a4:	lsr.w	r4, r2, lr
    d6a8:	lsls	r3, r1
    d6aa:	orrs	r3, r4
    d6ac:	lsr.w	r7, r0, lr
    d6b0:	lsl.w	r4, r6, r1
    d6b4:	mov.w	ip, r3, lsr #16
    d6b8:	lsr.w	r6, r6, lr
    d6bc:	orrs	r4, r7
    d6be:	udiv	r9, r6, ip
    d6c2:	lsrs	r7, r4, #16
    d6c4:	mls	r6, ip, r9, r6
    d6c8:	uxth.w	r8, r3
    d6cc:	orr.w	r6, r7, r6, lsl #16
    d6d0:	mul.w	r7, r9, r8
    d6d4:	cmp	r7, r6
    d6d6:	lsl.w	r2, r2, r1
    d6da:	lsl.w	sl, r0, r1
    d6de:	bls.n	d6f2 <__udivmoddi4+0x242>
    d6e0:	adds	r6, r6, r3
    d6e2:	add.w	r0, r9, #4294967295
    d6e6:	bcs.n	d76c <__udivmoddi4+0x2bc>
    d6e8:	cmp	r7, r6
    d6ea:	bls.n	d76c <__udivmoddi4+0x2bc>
    d6ec:	sub.w	r9, r9, #2
    d6f0:	add	r6, r3
    d6f2:	subs	r6, r6, r7
    d6f4:	uxth	r0, r4
    d6f6:	udiv	r4, r6, ip
    d6fa:	mls	r6, ip, r4, r6
    d6fe:	orr.w	r7, r0, r6, lsl #16
    d702:	mul.w	r8, r4, r8
    d706:	cmp	r8, r7
    d708:	bls.n	d71a <__udivmoddi4+0x26a>
    d70a:	adds	r7, r7, r3
    d70c:	add.w	r0, r4, #4294967295
    d710:	bcs.n	d764 <__udivmoddi4+0x2b4>
    d712:	cmp	r8, r7
    d714:	bls.n	d764 <__udivmoddi4+0x2b4>
    d716:	subs	r4, #2
    d718:	add	r7, r3
    d71a:	orr.w	r0, r4, r9, lsl #16
    d71e:	rsb	r7, r8, r7
    d722:	umull	r8, r9, r0, r2
    d726:	cmp	r7, r9
    d728:	mov	r4, r8
    d72a:	mov	r6, r9
    d72c:	bcc.n	d758 <__udivmoddi4+0x2a8>
    d72e:	beq.n	d784 <__udivmoddi4+0x2d4>
    d730:	cbz	r5, d78c <__udivmoddi4+0x2dc>
    d732:	subs.w	r3, sl, r4
    d736:	sbc.w	r7, r7, r6
    d73a:	lsl.w	lr, r7, lr
    d73e:	lsrs	r3, r1
    d740:	lsrs	r7, r1
    d742:	orr.w	r3, lr, r3
    d746:	stmia.w	r5, {r3, r7}
    d74a:	movs	r1, #0
    d74c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d750:	mov	r3, r2
    d752:	b.n	d546 <__udivmoddi4+0x96>
    d754:	mov	r0, r2
    d756:	b.n	d51a <__udivmoddi4+0x6a>
    d758:	subs.w	r4, r8, r2
    d75c:	sbc.w	r6, r9, r3
    d760:	subs	r0, #1
    d762:	b.n	d730 <__udivmoddi4+0x280>
    d764:	mov	r4, r0
    d766:	b.n	d71a <__udivmoddi4+0x26a>
    d768:	mov	r1, r2
    d76a:	b.n	d698 <__udivmoddi4+0x1e8>
    d76c:	mov	r9, r0
    d76e:	b.n	d6f2 <__udivmoddi4+0x242>
    d770:	mov	sl, r1
    d772:	b.n	d66e <__udivmoddi4+0x1be>
    d774:	subs	r3, #2
    d776:	add	r4, r7
    d778:	b.n	d60c <__udivmoddi4+0x15c>
    d77a:	mov	r0, r1
    d77c:	b.n	d594 <__udivmoddi4+0xe4>
    d77e:	subs	r0, #2
    d780:	add	r6, r7
    d782:	b.n	d5e4 <__udivmoddi4+0x134>
    d784:	cmp	sl, r8
    d786:	bcc.n	d758 <__udivmoddi4+0x2a8>
    d788:	mov	r6, r7
    d78a:	b.n	d730 <__udivmoddi4+0x280>
    d78c:	mov	r1, r5
    d78e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d792:	nop

0000d794 <__aeabi_idiv0>:
    d794:	bx	lr
    d796:	nop

0000d798 <__cxa_atexit>:
    d798:	mov	r3, r2
    d79a:	mov	r2, r1
    d79c:	mov	r1, r0
    d79e:	movs	r0, #2
    d7a0:	b.w	e7a8 <__register_exitproc>

0000d7a4 <__errno>:
    d7a4:	ldr	r3, [pc, #4]	; (d7ac <__errno+0x8>)
    d7a6:	ldr	r0, [r3, #0]
    d7a8:	bx	lr
    d7aa:	nop
    d7ac:	.word	0x1fff0ef8

0000d7b0 <__libc_init_array>:
    d7b0:	push	{r4, r5, r6, lr}
    d7b2:	ldr	r6, [pc, #60]	; (d7f0 <__libc_init_array+0x40>)
    d7b4:	ldr	r5, [pc, #60]	; (d7f4 <__libc_init_array+0x44>)
    d7b6:	subs	r6, r6, r5
    d7b8:	asrs	r6, r6, #2
    d7ba:	it	ne
    d7bc:	movne	r4, #0
    d7be:	beq.n	d7cc <__libc_init_array+0x1c>
    d7c0:	adds	r4, #1
    d7c2:	ldr.w	r3, [r5], #4
    d7c6:	blx	r3
    d7c8:	cmp	r6, r4
    d7ca:	bne.n	d7c0 <__libc_init_array+0x10>
    d7cc:	ldr	r6, [pc, #40]	; (d7f8 <__libc_init_array+0x48>)
    d7ce:	ldr	r5, [pc, #44]	; (d7fc <__libc_init_array+0x4c>)
    d7d0:	subs	r6, r6, r5
    d7d2:	bl	122f8 <_init>
    d7d6:	asrs	r6, r6, #2
    d7d8:	it	ne
    d7da:	movne	r4, #0
    d7dc:	beq.n	d7ec <__libc_init_array+0x3c>
    d7de:	adds	r4, #1
    d7e0:	ldr.w	r3, [r5], #4
    d7e4:	blx	r3
    d7e6:	cmp	r6, r4
    d7e8:	bne.n	d7de <__libc_init_array+0x2e>
    d7ea:	pop	{r4, r5, r6, pc}
    d7ec:	pop	{r4, r5, r6, pc}
    d7ee:	nop
    d7f0:	.word	0x00012304
    d7f4:	.word	0x00012304
    d7f8:	.word	0x00012314
    d7fc:	.word	0x00012304

0000d800 <malloc>:
    d800:	ldr	r3, [pc, #8]	; (d80c <malloc+0xc>)
    d802:	mov	r1, r0
    d804:	ldr	r0, [r3, #0]
    d806:	b.w	d820 <_malloc_r>
    d80a:	nop
    d80c:	.word	0x1fff0ef8

0000d810 <free>:
    d810:	ldr	r3, [pc, #8]	; (d81c <free+0xc>)
    d812:	mov	r1, r0
    d814:	ldr	r0, [r3, #0]
    d816:	b.w	e930 <_free_r>
    d81a:	nop
    d81c:	.word	0x1fff0ef8

0000d820 <_malloc_r>:
    d820:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d824:	add.w	r5, r1, #11
    d828:	cmp	r5, #22
    d82a:	sub	sp, #12
    d82c:	mov	r6, r0
    d82e:	bls.w	d970 <_malloc_r+0x150>
    d832:	bics.w	r5, r5, #7
    d836:	bmi.w	d9b8 <_malloc_r+0x198>
    d83a:	cmp	r1, r5
    d83c:	bhi.w	d9b8 <_malloc_r+0x198>
    d840:	bl	e028 <__malloc_lock>
    d844:	cmp.w	r5, #504	; 0x1f8
    d848:	bcc.w	dd84 <_malloc_r+0x564>
    d84c:	lsrs	r3, r5, #9
    d84e:	beq.w	d9c6 <_malloc_r+0x1a6>
    d852:	cmp	r3, #4
    d854:	bhi.w	db5e <_malloc_r+0x33e>
    d858:	lsrs	r0, r5, #6
    d85a:	add.w	lr, r0, #57	; 0x39
    d85e:	mov.w	r3, lr, lsl #1
    d862:	adds	r0, #56	; 0x38
    d864:	ldr	r7, [pc, #784]	; (db78 <_malloc_r+0x358>)
    d866:	add.w	r3, r7, r3, lsl #2
    d86a:	sub.w	r1, r3, #8
    d86e:	ldr	r4, [r3, #4]
    d870:	cmp	r1, r4
    d872:	bne.n	d884 <_malloc_r+0x64>
    d874:	b.n	d9d0 <_malloc_r+0x1b0>
    d876:	cmp	r2, #0
    d878:	bge.w	d9d4 <_malloc_r+0x1b4>
    d87c:	ldr	r4, [r4, #12]
    d87e:	cmp	r1, r4
    d880:	beq.w	d9d0 <_malloc_r+0x1b0>
    d884:	ldr	r3, [r4, #4]
    d886:	bic.w	r3, r3, #3
    d88a:	subs	r2, r3, r5
    d88c:	cmp	r2, #15
    d88e:	ble.n	d876 <_malloc_r+0x56>
    d890:	ldr	r1, [pc, #740]	; (db78 <_malloc_r+0x358>)
    d892:	ldr	r4, [r7, #16]
    d894:	add.w	lr, r1, #8
    d898:	cmp	r4, lr
    d89a:	beq.w	dc04 <_malloc_r+0x3e4>
    d89e:	ldr	r3, [r4, #4]
    d8a0:	bic.w	r3, r3, #3
    d8a4:	subs	r2, r3, r5
    d8a6:	cmp	r2, #15
    d8a8:	bgt.w	dbde <_malloc_r+0x3be>
    d8ac:	cmp	r2, #0
    d8ae:	str.w	lr, [r1, #20]
    d8b2:	str.w	lr, [r1, #16]
    d8b6:	bge.w	d9f6 <_malloc_r+0x1d6>
    d8ba:	cmp.w	r3, #512	; 0x200
    d8be:	bcs.w	db90 <_malloc_r+0x370>
    d8c2:	lsrs	r3, r3, #3
    d8c4:	add.w	ip, r3, #1
    d8c8:	movs	r2, #1
    d8ca:	asrs	r3, r3, #2
    d8cc:	lsl.w	r3, r2, r3
    d8d0:	ldr	r2, [r1, #4]
    d8d2:	ldr.w	r8, [r1, ip, lsl #3]
    d8d6:	str.w	r8, [r4, #8]
    d8da:	add.w	r9, r1, ip, lsl #3
    d8de:	orrs	r2, r3
    d8e0:	sub.w	r3, r9, #8
    d8e4:	str	r3, [r4, #12]
    d8e6:	str	r2, [r1, #4]
    d8e8:	str.w	r4, [r1, ip, lsl #3]
    d8ec:	str.w	r4, [r8, #12]
    d8f0:	asrs	r3, r0, #2
    d8f2:	movs	r4, #1
    d8f4:	lsls	r4, r3
    d8f6:	cmp	r4, r2
    d8f8:	bhi.w	da10 <_malloc_r+0x1f0>
    d8fc:	tst	r4, r2
    d8fe:	bne.n	d90e <_malloc_r+0xee>
    d900:	bic.w	r0, r0, #3
    d904:	lsls	r4, r4, #1
    d906:	tst	r4, r2
    d908:	add.w	r0, r0, #4
    d90c:	beq.n	d904 <_malloc_r+0xe4>
    d90e:	add.w	r9, r7, r0, lsl #3
    d912:	mov	ip, r9
    d914:	mov	r8, r0
    d916:	ldr.w	r1, [ip, #12]
    d91a:	cmp	ip, r1
    d91c:	bne.n	d92e <_malloc_r+0x10e>
    d91e:	b.n	dc08 <_malloc_r+0x3e8>
    d920:	cmp	r2, #0
    d922:	bge.w	dc28 <_malloc_r+0x408>
    d926:	ldr	r1, [r1, #12]
    d928:	cmp	ip, r1
    d92a:	beq.w	dc08 <_malloc_r+0x3e8>
    d92e:	ldr	r3, [r1, #4]
    d930:	bic.w	r3, r3, #3
    d934:	subs	r2, r3, r5
    d936:	cmp	r2, #15
    d938:	ble.n	d920 <_malloc_r+0x100>
    d93a:	mov	r4, r1
    d93c:	ldr.w	ip, [r1, #12]
    d940:	ldr.w	r8, [r4, #8]!
    d944:	adds	r3, r1, r5
    d946:	orr.w	r5, r5, #1
    d94a:	str	r5, [r1, #4]
    d94c:	orr.w	r1, r2, #1
    d950:	str.w	ip, [r8, #12]
    d954:	mov	r0, r6
    d956:	str.w	r8, [ip, #8]
    d95a:	str	r3, [r7, #20]
    d95c:	str	r3, [r7, #16]
    d95e:	str.w	lr, [r3, #12]
    d962:	str.w	lr, [r3, #8]
    d966:	str	r1, [r3, #4]
    d968:	str	r2, [r3, r2]
    d96a:	bl	e02c <__malloc_unlock>
    d96e:	b.n	d9b0 <_malloc_r+0x190>
    d970:	cmp	r1, #16
    d972:	bhi.n	d9b8 <_malloc_r+0x198>
    d974:	bl	e028 <__malloc_lock>
    d978:	movs	r5, #16
    d97a:	movs	r3, #6
    d97c:	movs	r0, #2
    d97e:	ldr	r7, [pc, #504]	; (db78 <_malloc_r+0x358>)
    d980:	add.w	r3, r7, r3, lsl #2
    d984:	sub.w	r2, r3, #8
    d988:	ldr	r4, [r3, #4]
    d98a:	cmp	r4, r2
    d98c:	beq.w	dc1a <_malloc_r+0x3fa>
    d990:	ldr	r3, [r4, #4]
    d992:	ldr	r1, [r4, #12]
    d994:	ldr	r5, [r4, #8]
    d996:	bic.w	r3, r3, #3
    d99a:	add	r3, r4
    d99c:	mov	r0, r6
    d99e:	ldr	r2, [r3, #4]
    d9a0:	str	r1, [r5, #12]
    d9a2:	orr.w	r2, r2, #1
    d9a6:	str	r5, [r1, #8]
    d9a8:	str	r2, [r3, #4]
    d9aa:	bl	e02c <__malloc_unlock>
    d9ae:	adds	r4, #8
    d9b0:	mov	r0, r4
    d9b2:	add	sp, #12
    d9b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d9b8:	movs	r4, #0
    d9ba:	movs	r3, #12
    d9bc:	mov	r0, r4
    d9be:	str	r3, [r6, #0]
    d9c0:	add	sp, #12
    d9c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d9c6:	movs	r3, #128	; 0x80
    d9c8:	mov.w	lr, #64	; 0x40
    d9cc:	movs	r0, #63	; 0x3f
    d9ce:	b.n	d864 <_malloc_r+0x44>
    d9d0:	mov	r0, lr
    d9d2:	b.n	d890 <_malloc_r+0x70>
    d9d4:	add	r3, r4
    d9d6:	ldr	r1, [r4, #12]
    d9d8:	ldr	r2, [r3, #4]
    d9da:	ldr	r5, [r4, #8]
    d9dc:	orr.w	r2, r2, #1
    d9e0:	str	r1, [r5, #12]
    d9e2:	mov	r0, r6
    d9e4:	str	r5, [r1, #8]
    d9e6:	str	r2, [r3, #4]
    d9e8:	bl	e02c <__malloc_unlock>
    d9ec:	adds	r4, #8
    d9ee:	mov	r0, r4
    d9f0:	add	sp, #12
    d9f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d9f6:	add	r3, r4
    d9f8:	mov	r0, r6
    d9fa:	ldr	r2, [r3, #4]
    d9fc:	orr.w	r2, r2, #1
    da00:	str	r2, [r3, #4]
    da02:	bl	e02c <__malloc_unlock>
    da06:	adds	r4, #8
    da08:	mov	r0, r4
    da0a:	add	sp, #12
    da0c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da10:	ldr	r4, [r7, #8]
    da12:	ldr	r3, [r4, #4]
    da14:	bic.w	r8, r3, #3
    da18:	cmp	r8, r5
    da1a:	bcc.n	da26 <_malloc_r+0x206>
    da1c:	rsb	r3, r5, r8
    da20:	cmp	r3, #15
    da22:	bgt.w	db3e <_malloc_r+0x31e>
    da26:	ldr	r3, [pc, #340]	; (db7c <_malloc_r+0x35c>)
    da28:	ldr.w	r9, [pc, #352]	; db8c <_malloc_r+0x36c>
    da2c:	ldr	r2, [r3, #0]
    da2e:	ldr.w	r3, [r9]
    da32:	adds	r3, #1
    da34:	add	r2, r5
    da36:	add.w	sl, r4, r8
    da3a:	beq.w	dcfe <_malloc_r+0x4de>
    da3e:	add.w	r2, r2, #4096	; 0x1000
    da42:	adds	r2, #15
    da44:	bic.w	r2, r2, #4080	; 0xff0
    da48:	bic.w	r2, r2, #15
    da4c:	mov	r1, r2
    da4e:	mov	r0, r6
    da50:	str	r2, [sp, #4]
    da52:	bl	e410 <_sbrk_r>
    da56:	cmp.w	r0, #4294967295
    da5a:	mov	fp, r0
    da5c:	ldr	r2, [sp, #4]
    da5e:	beq.w	dd12 <_malloc_r+0x4f2>
    da62:	cmp	sl, r0
    da64:	bhi.w	dc60 <_malloc_r+0x440>
    da68:	ldr	r3, [pc, #276]	; (db80 <_malloc_r+0x360>)
    da6a:	ldr	r1, [r3, #0]
    da6c:	cmp	sl, fp
    da6e:	add	r1, r2
    da70:	str	r1, [r3, #0]
    da72:	beq.w	dd1c <_malloc_r+0x4fc>
    da76:	ldr.w	r0, [r9]
    da7a:	ldr.w	lr, [pc, #272]	; db8c <_malloc_r+0x36c>
    da7e:	adds	r0, #1
    da80:	ittet	ne
    da82:	rsbne	sl, sl, fp
    da86:	addne	r1, sl
    da88:	streq.w	fp, [lr]
    da8c:	strne	r1, [r3, #0]
    da8e:	ands.w	r1, fp, #7
    da92:	beq.w	dcc4 <_malloc_r+0x4a4>
    da96:	rsb	r0, r1, #8
    da9a:	rsb	r1, r1, #4096	; 0x1000
    da9e:	add	fp, r0
    daa0:	adds	r1, #8
    daa2:	add	r2, fp
    daa4:	ubfx	r2, r2, #0, #12
    daa8:	rsb	r9, r2, r1
    daac:	mov	r1, r9
    daae:	mov	r0, r6
    dab0:	str	r3, [sp, #4]
    dab2:	bl	e410 <_sbrk_r>
    dab6:	adds	r3, r0, #1
    dab8:	ldr	r3, [sp, #4]
    daba:	beq.w	dd3c <_malloc_r+0x51c>
    dabe:	rsb	r2, fp, r0
    dac2:	add	r2, r9
    dac4:	orr.w	r2, r2, #1
    dac8:	ldr	r1, [r3, #0]
    daca:	str.w	fp, [r7, #8]
    dace:	add	r1, r9
    dad0:	cmp	r4, r7
    dad2:	str.w	r2, [fp, #4]
    dad6:	str	r1, [r3, #0]
    dad8:	ldr.w	r9, [pc, #164]	; db80 <_malloc_r+0x360>
    dadc:	beq.n	db0c <_malloc_r+0x2ec>
    dade:	cmp.w	r8, #15
    dae2:	bls.w	dce0 <_malloc_r+0x4c0>
    dae6:	ldr	r2, [r4, #4]
    dae8:	sub.w	r3, r8, #12
    daec:	bic.w	r3, r3, #7
    daf0:	adds	r0, r4, r3
    daf2:	and.w	r2, r2, #1
    daf6:	mov.w	lr, #5
    dafa:	orrs	r2, r3
    dafc:	cmp	r3, #15
    dafe:	str	r2, [r4, #4]
    db00:	str.w	lr, [r0, #4]
    db04:	str.w	lr, [r0, #8]
    db08:	bhi.w	dd44 <_malloc_r+0x524>
    db0c:	ldr	r3, [pc, #116]	; (db84 <_malloc_r+0x364>)
    db0e:	ldr	r4, [r7, #8]
    db10:	ldr	r2, [r3, #0]
    db12:	cmp	r1, r2
    db14:	it	hi
    db16:	strhi	r1, [r3, #0]
    db18:	ldr	r3, [pc, #108]	; (db88 <_malloc_r+0x368>)
    db1a:	ldr	r2, [r3, #0]
    db1c:	cmp	r1, r2
    db1e:	ldr	r2, [r4, #4]
    db20:	it	hi
    db22:	strhi	r1, [r3, #0]
    db24:	bic.w	r2, r2, #3
    db28:	cmp	r5, r2
    db2a:	sub.w	r3, r2, r5
    db2e:	bhi.n	db34 <_malloc_r+0x314>
    db30:	cmp	r3, #15
    db32:	bgt.n	db3e <_malloc_r+0x31e>
    db34:	mov	r0, r6
    db36:	bl	e02c <__malloc_unlock>
    db3a:	movs	r4, #0
    db3c:	b.n	d9b0 <_malloc_r+0x190>
    db3e:	adds	r2, r4, r5
    db40:	orr.w	r3, r3, #1
    db44:	orr.w	r5, r5, #1
    db48:	str	r5, [r4, #4]
    db4a:	mov	r0, r6
    db4c:	str	r2, [r7, #8]
    db4e:	str	r3, [r2, #4]
    db50:	bl	e02c <__malloc_unlock>
    db54:	adds	r4, #8
    db56:	mov	r0, r4
    db58:	add	sp, #12
    db5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    db5e:	cmp	r3, #20
    db60:	bls.n	dc46 <_malloc_r+0x426>
    db62:	cmp	r3, #84	; 0x54
    db64:	bhi.w	dcb0 <_malloc_r+0x490>
    db68:	lsrs	r0, r5, #12
    db6a:	add.w	lr, r0, #111	; 0x6f
    db6e:	mov.w	r3, lr, lsl #1
    db72:	adds	r0, #110	; 0x6e
    db74:	b.n	d864 <_malloc_r+0x44>
    db76:	nop
    db78:	.word	0x1fff1068
    db7c:	.word	0x1fff20d8
    db80:	.word	0x1fff20dc
    db84:	.word	0x1fff20d4
    db88:	.word	0x1fff20d0
    db8c:	.word	0x1fff1474
    db90:	lsrs	r2, r3, #9
    db92:	cmp	r2, #4
    db94:	bls.n	dc54 <_malloc_r+0x434>
    db96:	cmp	r2, #20
    db98:	bhi.w	dd02 <_malloc_r+0x4e2>
    db9c:	add.w	r1, r2, #92	; 0x5c
    dba0:	lsls	r1, r1, #1
    dba2:	adds	r2, #91	; 0x5b
    dba4:	add.w	ip, r7, r1, lsl #2
    dba8:	ldr.w	r1, [r7, r1, lsl #2]
    dbac:	ldr.w	r8, [pc, #476]	; dd8c <_malloc_r+0x56c>
    dbb0:	sub.w	ip, ip, #8
    dbb4:	cmp	ip, r1
    dbb6:	beq.w	dcca <_malloc_r+0x4aa>
    dbba:	ldr	r2, [r1, #4]
    dbbc:	bic.w	r2, r2, #3
    dbc0:	cmp	r3, r2
    dbc2:	bcs.n	dbca <_malloc_r+0x3aa>
    dbc4:	ldr	r1, [r1, #8]
    dbc6:	cmp	ip, r1
    dbc8:	bne.n	dbba <_malloc_r+0x39a>
    dbca:	ldr.w	ip, [r1, #12]
    dbce:	ldr	r2, [r7, #4]
    dbd0:	str.w	ip, [r4, #12]
    dbd4:	str	r1, [r4, #8]
    dbd6:	str.w	r4, [ip, #8]
    dbda:	str	r4, [r1, #12]
    dbdc:	b.n	d8f0 <_malloc_r+0xd0>
    dbde:	adds	r3, r4, r5
    dbe0:	orr.w	r7, r2, #1
    dbe4:	orr.w	r5, r5, #1
    dbe8:	str	r5, [r4, #4]
    dbea:	mov	r0, r6
    dbec:	str	r3, [r1, #20]
    dbee:	str	r3, [r1, #16]
    dbf0:	str.w	lr, [r3, #12]
    dbf4:	str.w	lr, [r3, #8]
    dbf8:	str	r7, [r3, #4]
    dbfa:	str	r2, [r3, r2]
    dbfc:	adds	r4, #8
    dbfe:	bl	e02c <__malloc_unlock>
    dc02:	b.n	d9b0 <_malloc_r+0x190>
    dc04:	ldr	r2, [r1, #4]
    dc06:	b.n	d8f0 <_malloc_r+0xd0>
    dc08:	add.w	r8, r8, #1
    dc0c:	tst.w	r8, #3
    dc10:	add.w	ip, ip, #8
    dc14:	bne.w	d916 <_malloc_r+0xf6>
    dc18:	b.n	dc7c <_malloc_r+0x45c>
    dc1a:	ldr	r4, [r3, #12]
    dc1c:	cmp	r3, r4
    dc1e:	it	eq
    dc20:	addeq	r0, #2
    dc22:	beq.w	d890 <_malloc_r+0x70>
    dc26:	b.n	d990 <_malloc_r+0x170>
    dc28:	add	r3, r1
    dc2a:	mov	r4, r1
    dc2c:	ldr	r2, [r3, #4]
    dc2e:	ldr	r1, [r1, #12]
    dc30:	ldr.w	r5, [r4, #8]!
    dc34:	orr.w	r2, r2, #1
    dc38:	str	r2, [r3, #4]
    dc3a:	mov	r0, r6
    dc3c:	str	r1, [r5, #12]
    dc3e:	str	r5, [r1, #8]
    dc40:	bl	e02c <__malloc_unlock>
    dc44:	b.n	d9b0 <_malloc_r+0x190>
    dc46:	add.w	lr, r3, #92	; 0x5c
    dc4a:	add.w	r0, r3, #91	; 0x5b
    dc4e:	mov.w	r3, lr, lsl #1
    dc52:	b.n	d864 <_malloc_r+0x44>
    dc54:	lsrs	r2, r3, #6
    dc56:	add.w	r1, r2, #57	; 0x39
    dc5a:	lsls	r1, r1, #1
    dc5c:	adds	r2, #56	; 0x38
    dc5e:	b.n	dba4 <_malloc_r+0x384>
    dc60:	cmp	r4, r7
    dc62:	ldr	r3, [pc, #296]	; (dd8c <_malloc_r+0x56c>)
    dc64:	beq.w	da68 <_malloc_r+0x248>
    dc68:	ldr	r4, [r3, #8]
    dc6a:	ldr	r2, [r4, #4]
    dc6c:	bic.w	r2, r2, #3
    dc70:	b.n	db28 <_malloc_r+0x308>
    dc72:	ldr.w	r3, [r9], #-8
    dc76:	cmp	r9, r3
    dc78:	bne.w	dd80 <_malloc_r+0x560>
    dc7c:	tst.w	r0, #3
    dc80:	add.w	r0, r0, #4294967295
    dc84:	bne.n	dc72 <_malloc_r+0x452>
    dc86:	ldr	r3, [r7, #4]
    dc88:	bic.w	r3, r3, r4
    dc8c:	str	r3, [r7, #4]
    dc8e:	lsls	r4, r4, #1
    dc90:	cmp	r4, r3
    dc92:	bhi.w	da10 <_malloc_r+0x1f0>
    dc96:	cmp	r4, #0
    dc98:	beq.w	da10 <_malloc_r+0x1f0>
    dc9c:	tst	r4, r3
    dc9e:	mov	r0, r8
    dca0:	bne.w	d90e <_malloc_r+0xee>
    dca4:	lsls	r4, r4, #1
    dca6:	tst	r4, r3
    dca8:	add.w	r0, r0, #4
    dcac:	beq.n	dca4 <_malloc_r+0x484>
    dcae:	b.n	d90e <_malloc_r+0xee>
    dcb0:	cmp.w	r3, #340	; 0x154
    dcb4:	bhi.n	dce8 <_malloc_r+0x4c8>
    dcb6:	lsrs	r0, r5, #15
    dcb8:	add.w	lr, r0, #120	; 0x78
    dcbc:	mov.w	r3, lr, lsl #1
    dcc0:	adds	r0, #119	; 0x77
    dcc2:	b.n	d864 <_malloc_r+0x44>
    dcc4:	mov.w	r1, #4096	; 0x1000
    dcc8:	b.n	daa2 <_malloc_r+0x282>
    dcca:	movs	r1, #1
    dccc:	ldr.w	r3, [r8, #4]
    dcd0:	asrs	r2, r2, #2
    dcd2:	lsl.w	r2, r1, r2
    dcd6:	orrs	r2, r3
    dcd8:	str.w	r2, [r8, #4]
    dcdc:	mov	r1, ip
    dcde:	b.n	dbd0 <_malloc_r+0x3b0>
    dce0:	movs	r3, #1
    dce2:	str.w	r3, [fp, #4]
    dce6:	b.n	db34 <_malloc_r+0x314>
    dce8:	movw	r2, #1364	; 0x554
    dcec:	cmp	r3, r2
    dcee:	bhi.n	dd32 <_malloc_r+0x512>
    dcf0:	lsrs	r0, r5, #18
    dcf2:	add.w	lr, r0, #125	; 0x7d
    dcf6:	mov.w	r3, lr, lsl #1
    dcfa:	adds	r0, #124	; 0x7c
    dcfc:	b.n	d864 <_malloc_r+0x44>
    dcfe:	adds	r2, #16
    dd00:	b.n	da4c <_malloc_r+0x22c>
    dd02:	cmp	r2, #84	; 0x54
    dd04:	bhi.n	dd54 <_malloc_r+0x534>
    dd06:	lsrs	r2, r3, #12
    dd08:	add.w	r1, r2, #111	; 0x6f
    dd0c:	lsls	r1, r1, #1
    dd0e:	adds	r2, #110	; 0x6e
    dd10:	b.n	dba4 <_malloc_r+0x384>
    dd12:	ldr	r4, [r7, #8]
    dd14:	ldr	r2, [r4, #4]
    dd16:	bic.w	r2, r2, #3
    dd1a:	b.n	db28 <_malloc_r+0x308>
    dd1c:	ubfx	r0, sl, #0, #12
    dd20:	cmp	r0, #0
    dd22:	bne.w	da76 <_malloc_r+0x256>
    dd26:	add	r2, r8
    dd28:	ldr	r3, [r7, #8]
    dd2a:	orr.w	r2, r2, #1
    dd2e:	str	r2, [r3, #4]
    dd30:	b.n	db0c <_malloc_r+0x2ec>
    dd32:	movs	r3, #254	; 0xfe
    dd34:	mov.w	lr, #127	; 0x7f
    dd38:	movs	r0, #126	; 0x7e
    dd3a:	b.n	d864 <_malloc_r+0x44>
    dd3c:	movs	r2, #1
    dd3e:	mov.w	r9, #0
    dd42:	b.n	dac8 <_malloc_r+0x2a8>
    dd44:	add.w	r1, r4, #8
    dd48:	mov	r0, r6
    dd4a:	bl	e930 <_free_r>
    dd4e:	ldr.w	r1, [r9]
    dd52:	b.n	db0c <_malloc_r+0x2ec>
    dd54:	cmp.w	r2, #340	; 0x154
    dd58:	bhi.n	dd66 <_malloc_r+0x546>
    dd5a:	lsrs	r2, r3, #15
    dd5c:	add.w	r1, r2, #120	; 0x78
    dd60:	lsls	r1, r1, #1
    dd62:	adds	r2, #119	; 0x77
    dd64:	b.n	dba4 <_malloc_r+0x384>
    dd66:	movw	r1, #1364	; 0x554
    dd6a:	cmp	r2, r1
    dd6c:	bhi.n	dd7a <_malloc_r+0x55a>
    dd6e:	lsrs	r2, r3, #18
    dd70:	add.w	r1, r2, #125	; 0x7d
    dd74:	lsls	r1, r1, #1
    dd76:	adds	r2, #124	; 0x7c
    dd78:	b.n	dba4 <_malloc_r+0x384>
    dd7a:	movs	r1, #254	; 0xfe
    dd7c:	movs	r2, #126	; 0x7e
    dd7e:	b.n	dba4 <_malloc_r+0x384>
    dd80:	ldr	r3, [r7, #4]
    dd82:	b.n	dc8e <_malloc_r+0x46e>
    dd84:	lsrs	r0, r5, #3
    dd86:	adds	r3, r0, #1
    dd88:	lsls	r3, r3, #1
    dd8a:	b.n	d97e <_malloc_r+0x15e>
    dd8c:	.word	0x1fff1068

0000dd90 <__ascii_mbtowc>:
    dd90:	sub	sp, #8
    dd92:	cbz	r1, dda8 <__ascii_mbtowc+0x18>
    dd94:	cbz	r2, ddae <__ascii_mbtowc+0x1e>
    dd96:	cbz	r3, ddb4 <__ascii_mbtowc+0x24>
    dd98:	ldrb	r3, [r2, #0]
    dd9a:	str	r3, [r1, #0]
    dd9c:	ldrb	r2, [r2, #0]
    dd9e:	adds	r0, r2, #0
    dda0:	it	ne
    dda2:	movne	r0, #1
    dda4:	add	sp, #8
    dda6:	bx	lr
    dda8:	add	r1, sp, #4
    ddaa:	cmp	r2, #0
    ddac:	bne.n	dd96 <__ascii_mbtowc+0x6>
    ddae:	mov	r0, r2
    ddb0:	add	sp, #8
    ddb2:	bx	lr
    ddb4:	mvn.w	r0, #1
    ddb8:	b.n	dda4 <__ascii_mbtowc+0x14>
    ddba:	nop
    ddbc:			; <UNDEFINED> instruction: 0xffffffff

0000ddc0 <memchr>:
    ddc0:	and.w	r1, r1, #255	; 0xff
    ddc4:	cmp	r2, #16
    ddc6:	blt.n	de20 <memchr+0x60>
    ddc8:	tst.w	r0, #7
    ddcc:	beq.n	dde0 <memchr+0x20>
    ddce:	ldrb.w	r3, [r0], #1
    ddd2:	subs	r2, #1
    ddd4:	cmp	r3, r1
    ddd6:	beq.n	de34 <memchr+0x74>
    ddd8:	tst.w	r0, #7
    dddc:	cbz	r2, de30 <memchr+0x70>
    ddde:	bne.n	ddce <memchr+0xe>
    dde0:	push	{r4, r5, r6, r7}
    dde2:	orr.w	r1, r1, r1, lsl #8
    dde6:	orr.w	r1, r1, r1, lsl #16
    ddea:	bic.w	r4, r2, #7
    ddee:	mvns.w	r7, #0
    ddf2:	movs	r3, #0
    ddf4:	ldrd	r5, r6, [r0], #8
    ddf8:	subs	r4, #8
    ddfa:	eor.w	r5, r5, r1
    ddfe:	eor.w	r6, r6, r1
    de02:	uadd8	r5, r5, r7
    de06:	sel	r5, r3, r7
    de0a:	uadd8	r6, r6, r7
    de0e:	sel	r6, r5, r7
    de12:	cbnz	r6, de38 <memchr+0x78>
    de14:	bne.n	ddf4 <memchr+0x34>
    de16:	pop	{r4, r5, r6, r7}
    de18:	and.w	r1, r1, #255	; 0xff
    de1c:	and.w	r2, r2, #7
    de20:	cbz	r2, de30 <memchr+0x70>
    de22:	ldrb.w	r3, [r0], #1
    de26:	subs	r2, #1
    de28:	eor.w	r3, r3, r1
    de2c:	cbz	r3, de34 <memchr+0x74>
    de2e:	bne.n	de22 <memchr+0x62>
    de30:	movs	r0, #0
    de32:	bx	lr
    de34:	subs	r0, #1
    de36:	bx	lr
    de38:	cmp	r5, #0
    de3a:	itte	eq
    de3c:	moveq	r5, r6
    de3e:	subeq	r0, #3
    de40:	subne	r0, #7
    de42:	tst.w	r5, #1
    de46:	bne.n	de58 <memchr+0x98>
    de48:	adds	r0, #1
    de4a:	tst.w	r5, #256	; 0x100
    de4e:	ittt	eq
    de50:	addeq	r0, #1
    de52:	tsteq.w	r5, #98304	; 0x18000
    de56:	addeq	r0, #1
    de58:	pop	{r4, r5, r6, r7}
    de5a:	subs	r0, #1
    de5c:	bx	lr
    de5e:	nop

0000de60 <memcmp>:
    de60:	cmp	r2, #3
    de62:	push	{r4, r5, r6}
    de64:	bls.n	deb4 <memcmp+0x54>
    de66:	orr.w	r3, r0, r1
    de6a:	lsls	r3, r3, #30
    de6c:	beq.n	de92 <memcmp+0x32>
    de6e:	ldrb	r4, [r0, #0]
    de70:	ldrb	r5, [r1, #0]
    de72:	cmp	r4, r5
    de74:	bne.n	debc <memcmp+0x5c>
    de76:	add	r2, r0
    de78:	adds	r3, r0, #1
    de7a:	b.n	de88 <memcmp+0x28>
    de7c:	ldrb.w	r4, [r3], #1
    de80:	ldrb.w	r5, [r1, #1]!
    de84:	cmp	r4, r5
    de86:	bne.n	debc <memcmp+0x5c>
    de88:	cmp	r3, r2
    de8a:	bne.n	de7c <memcmp+0x1c>
    de8c:	movs	r0, #0
    de8e:	pop	{r4, r5, r6}
    de90:	bx	lr
    de92:	mov	r4, r1
    de94:	mov	r3, r0
    de96:	ldr	r6, [r3, #0]
    de98:	ldr	r5, [r4, #0]
    de9a:	cmp	r6, r5
    de9c:	mov	r0, r3
    de9e:	mov	r1, r4
    dea0:	add.w	r3, r3, #4
    dea4:	add.w	r4, r4, #4
    dea8:	bne.n	de6e <memcmp+0xe>
    deaa:	subs	r2, #4
    deac:	cmp	r2, #3
    deae:	mov	r0, r3
    deb0:	mov	r1, r4
    deb2:	bhi.n	de96 <memcmp+0x36>
    deb4:	cmp	r2, #0
    deb6:	bne.n	de6e <memcmp+0xe>
    deb8:	mov	r0, r2
    deba:	b.n	de8e <memcmp+0x2e>
    debc:	subs	r0, r4, r5
    debe:	pop	{r4, r5, r6}
    dec0:	bx	lr
    dec2:	nop

0000dec4 <memmove>:
    dec4:	cmp	r0, r1
    dec6:	push	{r4, r5, r6, r7, lr}
    dec8:	bls.n	dee6 <memmove+0x22>
    deca:	adds	r3, r1, r2
    decc:	cmp	r0, r3
    dece:	bcs.n	dee6 <memmove+0x22>
    ded0:	adds	r1, r0, r2
    ded2:	cmp	r2, #0
    ded4:	beq.n	df7a <memmove+0xb6>
    ded6:	subs	r2, r3, r2
    ded8:	ldrb.w	r4, [r3, #-1]!
    dedc:	strb.w	r4, [r1, #-1]!
    dee0:	cmp	r3, r2
    dee2:	bne.n	ded8 <memmove+0x14>
    dee4:	pop	{r4, r5, r6, r7, pc}
    dee6:	cmp	r2, #15
    dee8:	bls.n	df7c <memmove+0xb8>
    deea:	orr.w	r3, r1, r0
    deee:	lsls	r3, r3, #30
    def0:	bne.n	df80 <memmove+0xbc>
    def2:	add.w	r4, r0, #16
    def6:	add.w	r3, r1, #16
    defa:	mov	r5, r2
    defc:	ldr.w	r6, [r3, #-16]
    df00:	str.w	r6, [r4, #-16]
    df04:	ldr.w	r6, [r3, #-12]
    df08:	str.w	r6, [r4, #-12]
    df0c:	ldr.w	r6, [r3, #-8]
    df10:	str.w	r6, [r4, #-8]
    df14:	subs	r5, #16
    df16:	ldr.w	r6, [r3, #-4]
    df1a:	str.w	r6, [r4, #-4]
    df1e:	cmp	r5, #15
    df20:	add.w	r3, r3, #16
    df24:	add.w	r4, r4, #16
    df28:	bhi.n	defc <memmove+0x38>
    df2a:	sub.w	r3, r2, #16
    df2e:	bic.w	r3, r3, #15
    df32:	and.w	lr, r2, #15
    df36:	adds	r3, #16
    df38:	cmp.w	lr, #3
    df3c:	add	r1, r3
    df3e:	add	r3, r0
    df40:	bls.n	df86 <memmove+0xc2>
    df42:	subs	r6, r3, #4
    df44:	mov	r5, r1
    df46:	mov	r4, lr
    df48:	subs	r4, #4
    df4a:	ldr.w	r7, [r5], #4
    df4e:	str.w	r7, [r6, #4]!
    df52:	cmp	r4, #3
    df54:	bhi.n	df48 <memmove+0x84>
    df56:	sub.w	r4, lr, #4
    df5a:	bic.w	r4, r4, #3
    df5e:	adds	r4, #4
    df60:	add	r3, r4
    df62:	add	r1, r4
    df64:	and.w	r2, r2, #3
    df68:	cbz	r2, df84 <memmove+0xc0>
    df6a:	subs	r3, #1
    df6c:	add	r2, r1
    df6e:	ldrb.w	r4, [r1], #1
    df72:	strb.w	r4, [r3, #1]!
    df76:	cmp	r2, r1
    df78:	bne.n	df6e <memmove+0xaa>
    df7a:	pop	{r4, r5, r6, r7, pc}
    df7c:	mov	r3, r0
    df7e:	b.n	df68 <memmove+0xa4>
    df80:	mov	r3, r0
    df82:	b.n	df6a <memmove+0xa6>
    df84:	pop	{r4, r5, r6, r7, pc}
    df86:	mov	r2, lr
    df88:	b.n	df68 <memmove+0xa4>
    df8a:	nop

0000df8c <memset>:
    df8c:	push	{r4, r5, r6}
    df8e:	lsls	r4, r0, #30
    df90:	beq.n	e020 <memset+0x94>
    df92:	subs	r4, r2, #1
    df94:	cmp	r2, #0
    df96:	beq.n	e01c <memset+0x90>
    df98:	uxtb	r5, r1
    df9a:	mov	r3, r0
    df9c:	b.n	dfa4 <memset+0x18>
    df9e:	subs	r2, r4, #1
    dfa0:	cbz	r4, e01c <memset+0x90>
    dfa2:	mov	r4, r2
    dfa4:	strb.w	r5, [r3], #1
    dfa8:	lsls	r2, r3, #30
    dfaa:	bne.n	df9e <memset+0x12>
    dfac:	cmp	r4, #3
    dfae:	bls.n	e00e <memset+0x82>
    dfb0:	uxtb	r5, r1
    dfb2:	orr.w	r5, r5, r5, lsl #8
    dfb6:	cmp	r4, #15
    dfb8:	orr.w	r5, r5, r5, lsl #16
    dfbc:	bls.n	dff2 <memset+0x66>
    dfbe:	add.w	r2, r3, #16
    dfc2:	mov	r6, r4
    dfc4:	subs	r6, #16
    dfc6:	cmp	r6, #15
    dfc8:	str.w	r5, [r2, #-16]
    dfcc:	str.w	r5, [r2, #-12]
    dfd0:	str.w	r5, [r2, #-8]
    dfd4:	str.w	r5, [r2, #-4]
    dfd8:	add.w	r2, r2, #16
    dfdc:	bhi.n	dfc4 <memset+0x38>
    dfde:	sub.w	r2, r4, #16
    dfe2:	bic.w	r2, r2, #15
    dfe6:	and.w	r4, r4, #15
    dfea:	adds	r2, #16
    dfec:	cmp	r4, #3
    dfee:	add	r3, r2
    dff0:	bls.n	e00e <memset+0x82>
    dff2:	mov	r6, r3
    dff4:	mov	r2, r4
    dff6:	subs	r2, #4
    dff8:	cmp	r2, #3
    dffa:	str.w	r5, [r6], #4
    dffe:	bhi.n	dff6 <memset+0x6a>
    e000:	subs	r2, r4, #4
    e002:	bic.w	r2, r2, #3
    e006:	adds	r2, #4
    e008:	add	r3, r2
    e00a:	and.w	r4, r4, #3
    e00e:	cbz	r4, e01c <memset+0x90>
    e010:	uxtb	r1, r1
    e012:	add	r4, r3
    e014:	strb.w	r1, [r3], #1
    e018:	cmp	r3, r4
    e01a:	bne.n	e014 <memset+0x88>
    e01c:	pop	{r4, r5, r6}
    e01e:	bx	lr
    e020:	mov	r4, r2
    e022:	mov	r3, r0
    e024:	b.n	dfac <memset+0x20>
    e026:	nop

0000e028 <__malloc_lock>:
    e028:	bx	lr
    e02a:	nop

0000e02c <__malloc_unlock>:
    e02c:	bx	lr
    e02e:	nop

0000e030 <_realloc_r>:
    e030:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e034:	mov	r7, r2
    e036:	sub	sp, #12
    e038:	cmp	r1, #0
    e03a:	beq.w	e1c0 <_realloc_r+0x190>
    e03e:	mov	r6, r1
    e040:	mov	r9, r0
    e042:	add.w	r5, r7, #11
    e046:	bl	e028 <__malloc_lock>
    e04a:	ldr.w	lr, [r6, #-4]
    e04e:	cmp	r5, #22
    e050:	bic.w	r4, lr, #3
    e054:	sub.w	r8, r6, #8
    e058:	bhi.n	e0dc <_realloc_r+0xac>
    e05a:	movs	r2, #16
    e05c:	mov	r5, r2
    e05e:	cmp	r7, r5
    e060:	bhi.n	e0e6 <_realloc_r+0xb6>
    e062:	cmp	r4, r2
    e064:	bge.n	e152 <_realloc_r+0x122>
    e066:	ldr	r3, [pc, #804]	; (e38c <_realloc_r+0x35c>)
    e068:	ldr	r1, [r3, #8]
    e06a:	add.w	r0, r8, r4
    e06e:	cmp	r0, r1
    e070:	ldr	r1, [r0, #4]
    e072:	beq.w	e228 <_realloc_r+0x1f8>
    e076:	bic.w	r3, r1, #1
    e07a:	add	r3, r0
    e07c:	ldr	r3, [r3, #4]
    e07e:	lsls	r3, r3, #31
    e080:	bpl.n	e17e <_realloc_r+0x14e>
    e082:	tst.w	lr, #1
    e086:	beq.n	e0f4 <_realloc_r+0xc4>
    e088:	mov	r1, r7
    e08a:	mov	r0, r9
    e08c:	bl	d820 <_malloc_r>
    e090:	mov	r7, r0
    e092:	cbz	r0, e0ce <_realloc_r+0x9e>
    e094:	ldr.w	r3, [r6, #-4]
    e098:	bic.w	r3, r3, #1
    e09c:	add	r3, r8
    e09e:	sub.w	r2, r0, #8
    e0a2:	cmp	r2, r3
    e0a4:	beq.w	e330 <_realloc_r+0x300>
    e0a8:	subs	r2, r4, #4
    e0aa:	cmp	r2, #36	; 0x24
    e0ac:	bhi.w	e312 <_realloc_r+0x2e2>
    e0b0:	cmp	r2, #19
    e0b2:	bhi.w	e2be <_realloc_r+0x28e>
    e0b6:	mov	r3, r0
    e0b8:	mov	r2, r6
    e0ba:	ldr	r1, [r2, #0]
    e0bc:	str	r1, [r3, #0]
    e0be:	ldr	r1, [r2, #4]
    e0c0:	str	r1, [r3, #4]
    e0c2:	ldr	r2, [r2, #8]
    e0c4:	str	r2, [r3, #8]
    e0c6:	mov	r1, r6
    e0c8:	mov	r0, r9
    e0ca:	bl	e930 <_free_r>
    e0ce:	mov	r0, r9
    e0d0:	bl	e02c <__malloc_unlock>
    e0d4:	mov	r0, r7
    e0d6:	add	sp, #12
    e0d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e0dc:	bic.w	r5, r5, #7
    e0e0:	cmp	r5, #0
    e0e2:	mov	r2, r5
    e0e4:	bge.n	e05e <_realloc_r+0x2e>
    e0e6:	movs	r3, #12
    e0e8:	movs	r0, #0
    e0ea:	str.w	r3, [r9]
    e0ee:	add	sp, #12
    e0f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e0f4:	ldr.w	r3, [r6, #-8]
    e0f8:	rsb	sl, r3, r8
    e0fc:	ldr.w	r3, [sl, #4]
    e100:	bic.w	ip, r3, #3
    e104:	add.w	r3, r4, ip
    e108:	cmp	r3, r2
    e10a:	blt.n	e088 <_realloc_r+0x58>
    e10c:	mov	r7, sl
    e10e:	ldr.w	r1, [sl, #12]
    e112:	ldr.w	r0, [r7, #8]!
    e116:	subs	r2, r4, #4
    e118:	cmp	r2, #36	; 0x24
    e11a:	str	r1, [r0, #12]
    e11c:	str	r0, [r1, #8]
    e11e:	bhi.w	e350 <_realloc_r+0x320>
    e122:	cmp	r2, #19
    e124:	bls.w	e34c <_realloc_r+0x31c>
    e128:	ldr	r1, [r6, #0]
    e12a:	str.w	r1, [sl, #8]
    e12e:	ldr	r1, [r6, #4]
    e130:	str.w	r1, [sl, #12]
    e134:	cmp	r2, #27
    e136:	bhi.w	e390 <_realloc_r+0x360>
    e13a:	adds	r6, #8
    e13c:	add.w	r2, sl, #16
    e140:	ldr	r1, [r6, #0]
    e142:	str	r1, [r2, #0]
    e144:	ldr	r1, [r6, #4]
    e146:	str	r1, [r2, #4]
    e148:	ldr	r1, [r6, #8]
    e14a:	str	r1, [r2, #8]
    e14c:	mov	r6, r7
    e14e:	mov	r4, r3
    e150:	mov	r8, sl
    e152:	subs	r3, r4, r5
    e154:	cmp	r3, #15
    e156:	bhi.n	e194 <_realloc_r+0x164>
    e158:	ldr.w	r3, [r8, #4]
    e15c:	and.w	r3, r3, #1
    e160:	orrs	r3, r4
    e162:	add	r4, r8
    e164:	str.w	r3, [r8, #4]
    e168:	ldr	r3, [r4, #4]
    e16a:	orr.w	r3, r3, #1
    e16e:	str	r3, [r4, #4]
    e170:	mov	r0, r9
    e172:	bl	e02c <__malloc_unlock>
    e176:	mov	r0, r6
    e178:	add	sp, #12
    e17a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e17e:	bic.w	r1, r1, #3
    e182:	add	r1, r4
    e184:	cmp	r1, r2
    e186:	blt.n	e1cc <_realloc_r+0x19c>
    e188:	ldr	r3, [r0, #12]
    e18a:	ldr	r2, [r0, #8]
    e18c:	mov	r4, r1
    e18e:	str	r3, [r2, #12]
    e190:	str	r2, [r3, #8]
    e192:	b.n	e152 <_realloc_r+0x122>
    e194:	ldr.w	r2, [r8, #4]
    e198:	add.w	r1, r8, r5
    e19c:	and.w	r2, r2, #1
    e1a0:	orrs	r5, r2
    e1a2:	orr.w	r2, r3, #1
    e1a6:	add	r3, r1
    e1a8:	str.w	r5, [r8, #4]
    e1ac:	str	r2, [r1, #4]
    e1ae:	ldr	r2, [r3, #4]
    e1b0:	orr.w	r2, r2, #1
    e1b4:	adds	r1, #8
    e1b6:	str	r2, [r3, #4]
    e1b8:	mov	r0, r9
    e1ba:	bl	e930 <_free_r>
    e1be:	b.n	e170 <_realloc_r+0x140>
    e1c0:	mov	r1, r2
    e1c2:	add	sp, #12
    e1c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e1c8:	b.w	d820 <_malloc_r>
    e1cc:	tst.w	lr, #1
    e1d0:	bne.w	e088 <_realloc_r+0x58>
    e1d4:	ldr.w	r3, [r6, #-8]
    e1d8:	rsb	sl, r3, r8
    e1dc:	ldr.w	r3, [sl, #4]
    e1e0:	bic.w	ip, r3, #3
    e1e4:	add.w	lr, r1, ip
    e1e8:	cmp	lr, r2
    e1ea:	blt.n	e104 <_realloc_r+0xd4>
    e1ec:	ldr	r3, [r0, #12]
    e1ee:	ldr	r2, [r0, #8]
    e1f0:	mov	r7, sl
    e1f2:	str	r3, [r2, #12]
    e1f4:	str	r2, [r3, #8]
    e1f6:	ldr.w	r1, [r7, #8]!
    e1fa:	ldr.w	r3, [sl, #12]
    e1fe:	str	r3, [r1, #12]
    e200:	subs	r2, r4, #4
    e202:	cmp	r2, #36	; 0x24
    e204:	str	r1, [r3, #8]
    e206:	bhi.w	e33c <_realloc_r+0x30c>
    e20a:	cmp	r2, #19
    e20c:	bls.n	e2d4 <_realloc_r+0x2a4>
    e20e:	ldr	r3, [r6, #0]
    e210:	str.w	r3, [sl, #8]
    e214:	ldr	r3, [r6, #4]
    e216:	str.w	r3, [sl, #12]
    e21a:	cmp	r2, #27
    e21c:	bhi.w	e360 <_realloc_r+0x330>
    e220:	adds	r6, #8
    e222:	add.w	r3, sl, #16
    e226:	b.n	e2d6 <_realloc_r+0x2a6>
    e228:	bic.w	fp, r1, #3
    e22c:	add	fp, r4
    e22e:	add.w	r0, r5, #16
    e232:	cmp	fp, r0
    e234:	bge.n	e2ea <_realloc_r+0x2ba>
    e236:	tst.w	lr, #1
    e23a:	bne.w	e088 <_realloc_r+0x58>
    e23e:	ldr.w	r1, [r6, #-8]
    e242:	rsb	sl, r1, r8
    e246:	ldr.w	r1, [sl, #4]
    e24a:	bic.w	ip, r1, #3
    e24e:	add	fp, ip
    e250:	cmp	r0, fp
    e252:	bgt.w	e104 <_realloc_r+0xd4>
    e256:	mov	r7, sl
    e258:	ldr.w	r1, [sl, #12]
    e25c:	ldr.w	r0, [r7, #8]!
    e260:	subs	r2, r4, #4
    e262:	cmp	r2, #36	; 0x24
    e264:	str	r1, [r0, #12]
    e266:	str	r0, [r1, #8]
    e268:	bhi.w	e3d4 <_realloc_r+0x3a4>
    e26c:	cmp	r2, #19
    e26e:	bls.w	e3bc <_realloc_r+0x38c>
    e272:	ldr	r1, [r6, #0]
    e274:	str.w	r1, [sl, #8]
    e278:	ldr	r1, [r6, #4]
    e27a:	str.w	r1, [sl, #12]
    e27e:	cmp	r2, #27
    e280:	bhi.w	e3e2 <_realloc_r+0x3b2>
    e284:	adds	r6, #8
    e286:	add.w	r2, sl, #16
    e28a:	ldr	r1, [r6, #0]
    e28c:	str	r1, [r2, #0]
    e28e:	ldr	r1, [r6, #4]
    e290:	str	r1, [r2, #4]
    e292:	ldr	r1, [r6, #8]
    e294:	str	r1, [r2, #8]
    e296:	add.w	r1, sl, r5
    e29a:	rsb	r2, r5, fp
    e29e:	orr.w	r2, r2, #1
    e2a2:	str	r1, [r3, #8]
    e2a4:	str	r2, [r1, #4]
    e2a6:	ldr.w	r3, [sl, #4]
    e2aa:	and.w	r3, r3, #1
    e2ae:	orrs	r5, r3
    e2b0:	mov	r0, r9
    e2b2:	str.w	r5, [sl, #4]
    e2b6:	bl	e02c <__malloc_unlock>
    e2ba:	mov	r0, r7
    e2bc:	b.n	e178 <_realloc_r+0x148>
    e2be:	ldr	r3, [r6, #0]
    e2c0:	str	r3, [r0, #0]
    e2c2:	ldr	r3, [r6, #4]
    e2c4:	str	r3, [r0, #4]
    e2c6:	cmp	r2, #27
    e2c8:	bhi.n	e31a <_realloc_r+0x2ea>
    e2ca:	add.w	r3, r0, #8
    e2ce:	add.w	r2, r6, #8
    e2d2:	b.n	e0ba <_realloc_r+0x8a>
    e2d4:	mov	r3, r7
    e2d6:	ldr	r2, [r6, #0]
    e2d8:	str	r2, [r3, #0]
    e2da:	ldr	r2, [r6, #4]
    e2dc:	str	r2, [r3, #4]
    e2de:	ldr	r2, [r6, #8]
    e2e0:	str	r2, [r3, #8]
    e2e2:	mov	r6, r7
    e2e4:	mov	r4, lr
    e2e6:	mov	r8, sl
    e2e8:	b.n	e152 <_realloc_r+0x122>
    e2ea:	add.w	r1, r8, r5
    e2ee:	rsb	fp, r5, fp
    e2f2:	orr.w	r2, fp, #1
    e2f6:	str	r1, [r3, #8]
    e2f8:	str	r2, [r1, #4]
    e2fa:	ldr.w	r3, [r6, #-4]
    e2fe:	and.w	r3, r3, #1
    e302:	orrs	r5, r3
    e304:	mov	r0, r9
    e306:	str.w	r5, [r6, #-4]
    e30a:	bl	e02c <__malloc_unlock>
    e30e:	mov	r0, r6
    e310:	b.n	e178 <_realloc_r+0x148>
    e312:	mov	r1, r6
    e314:	bl	dec4 <memmove>
    e318:	b.n	e0c6 <_realloc_r+0x96>
    e31a:	ldr	r3, [r6, #8]
    e31c:	str	r3, [r0, #8]
    e31e:	ldr	r3, [r6, #12]
    e320:	str	r3, [r0, #12]
    e322:	cmp	r2, #36	; 0x24
    e324:	beq.n	e378 <_realloc_r+0x348>
    e326:	add.w	r3, r0, #16
    e32a:	add.w	r2, r6, #16
    e32e:	b.n	e0ba <_realloc_r+0x8a>
    e330:	ldr.w	r3, [r0, #-4]
    e334:	bic.w	r3, r3, #3
    e338:	add	r4, r3
    e33a:	b.n	e152 <_realloc_r+0x122>
    e33c:	mov	r1, r6
    e33e:	mov	r0, r7
    e340:	mov	r4, lr
    e342:	mov	r8, sl
    e344:	bl	dec4 <memmove>
    e348:	mov	r6, r7
    e34a:	b.n	e152 <_realloc_r+0x122>
    e34c:	mov	r2, r7
    e34e:	b.n	e140 <_realloc_r+0x110>
    e350:	mov	r1, r6
    e352:	mov	r0, r7
    e354:	mov	r4, r3
    e356:	mov	r8, sl
    e358:	bl	dec4 <memmove>
    e35c:	mov	r6, r7
    e35e:	b.n	e152 <_realloc_r+0x122>
    e360:	ldr	r3, [r6, #8]
    e362:	str.w	r3, [sl, #16]
    e366:	ldr	r3, [r6, #12]
    e368:	str.w	r3, [sl, #20]
    e36c:	cmp	r2, #36	; 0x24
    e36e:	beq.n	e3a8 <_realloc_r+0x378>
    e370:	adds	r6, #16
    e372:	add.w	r3, sl, #24
    e376:	b.n	e2d6 <_realloc_r+0x2a6>
    e378:	ldr	r3, [r6, #16]
    e37a:	str	r3, [r0, #16]
    e37c:	ldr	r3, [r6, #20]
    e37e:	str	r3, [r0, #20]
    e380:	add.w	r2, r6, #24
    e384:	add.w	r3, r0, #24
    e388:	b.n	e0ba <_realloc_r+0x8a>
    e38a:	nop
    e38c:	.word	0x1fff1068
    e390:	ldr	r1, [r6, #8]
    e392:	str.w	r1, [sl, #16]
    e396:	ldr	r1, [r6, #12]
    e398:	str.w	r1, [sl, #20]
    e39c:	cmp	r2, #36	; 0x24
    e39e:	beq.n	e3c0 <_realloc_r+0x390>
    e3a0:	adds	r6, #16
    e3a2:	add.w	r2, sl, #24
    e3a6:	b.n	e140 <_realloc_r+0x110>
    e3a8:	ldr	r3, [r6, #16]
    e3aa:	str.w	r3, [sl, #24]
    e3ae:	ldr	r3, [r6, #20]
    e3b0:	str.w	r3, [sl, #28]
    e3b4:	adds	r6, #24
    e3b6:	add.w	r3, sl, #32
    e3ba:	b.n	e2d6 <_realloc_r+0x2a6>
    e3bc:	mov	r2, r7
    e3be:	b.n	e28a <_realloc_r+0x25a>
    e3c0:	ldr	r2, [r6, #16]
    e3c2:	str.w	r2, [sl, #24]
    e3c6:	ldr	r2, [r6, #20]
    e3c8:	str.w	r2, [sl, #28]
    e3cc:	adds	r6, #24
    e3ce:	add.w	r2, sl, #32
    e3d2:	b.n	e140 <_realloc_r+0x110>
    e3d4:	mov	r1, r6
    e3d6:	mov	r0, r7
    e3d8:	str	r3, [sp, #4]
    e3da:	bl	dec4 <memmove>
    e3de:	ldr	r3, [sp, #4]
    e3e0:	b.n	e296 <_realloc_r+0x266>
    e3e2:	ldr	r1, [r6, #8]
    e3e4:	str.w	r1, [sl, #16]
    e3e8:	ldr	r1, [r6, #12]
    e3ea:	str.w	r1, [sl, #20]
    e3ee:	cmp	r2, #36	; 0x24
    e3f0:	beq.n	e3fa <_realloc_r+0x3ca>
    e3f2:	adds	r6, #16
    e3f4:	add.w	r2, sl, #24
    e3f8:	b.n	e28a <_realloc_r+0x25a>
    e3fa:	ldr	r2, [r6, #16]
    e3fc:	str.w	r2, [sl, #24]
    e400:	ldr	r2, [r6, #20]
    e402:	str.w	r2, [sl, #28]
    e406:	adds	r6, #24
    e408:	add.w	r2, sl, #32
    e40c:	b.n	e28a <_realloc_r+0x25a>
    e40e:	nop

0000e410 <_sbrk_r>:
    e410:	push	{r3, r4, r5, lr}
    e412:	ldr	r4, [pc, #28]	; (e430 <_sbrk_r+0x20>)
    e414:	movs	r3, #0
    e416:	mov	r5, r0
    e418:	mov	r0, r1
    e41a:	str	r3, [r4, #0]
    e41c:	bl	b548 <_sbrk>
    e420:	adds	r3, r0, #1
    e422:	beq.n	e426 <_sbrk_r+0x16>
    e424:	pop	{r3, r4, r5, pc}
    e426:	ldr	r3, [r4, #0]
    e428:	cmp	r3, #0
    e42a:	beq.n	e424 <_sbrk_r+0x14>
    e42c:	str	r3, [r5, #0]
    e42e:	pop	{r3, r4, r5, pc}
    e430:	.word	0x1fff211c

0000e434 <stpcpy>:
    e434:	orr.w	r3, r1, r0
    e438:	lsls	r3, r3, #30
    e43a:	push	{r4}
    e43c:	bne.n	e468 <stpcpy+0x34>
    e43e:	ldr	r3, [r1, #0]
    e440:	sub.w	r2, r3, #16843009	; 0x1010101
    e444:	bic.w	r2, r2, r3
    e448:	tst.w	r2, #2155905152	; 0x80808080
    e44c:	bne.n	e468 <stpcpy+0x34>
    e44e:	adds	r4, r1, #4
    e450:	str.w	r3, [r0], #4
    e454:	mov	r1, r4
    e456:	ldr.w	r3, [r4], #4
    e45a:	sub.w	r2, r3, #16843009	; 0x1010101
    e45e:	bic.w	r2, r2, r3
    e462:	tst.w	r2, #2155905152	; 0x80808080
    e466:	beq.n	e450 <stpcpy+0x1c>
    e468:	mov	r3, r0
    e46a:	ldrb.w	r2, [r1], #1
    e46e:	mov	r0, r3
    e470:	strb.w	r2, [r3], #1
    e474:	cmp	r2, #0
    e476:	bne.n	e46a <stpcpy+0x36>
    e478:	ldr.w	r4, [sp], #4
    e47c:	bx	lr
    e47e:	nop

0000e480 <strcat>:
    e480:	lsls	r3, r0, #30
    e482:	push	{r4, lr}
    e484:	mov	r4, r0
    e486:	bne.n	e4aa <strcat+0x2a>
    e488:	ldr	r2, [r0, #0]
    e48a:	sub.w	r3, r2, #16843009	; 0x1010101
    e48e:	bic.w	r3, r3, r2
    e492:	tst.w	r3, #2155905152	; 0x80808080
    e496:	bne.n	e4aa <strcat+0x2a>
    e498:	ldr.w	r2, [r0, #4]!
    e49c:	sub.w	r3, r2, #16843009	; 0x1010101
    e4a0:	bic.w	r3, r3, r2
    e4a4:	tst.w	r3, #2155905152	; 0x80808080
    e4a8:	beq.n	e498 <strcat+0x18>
    e4aa:	ldrb	r3, [r0, #0]
    e4ac:	cbz	r3, e4b6 <strcat+0x36>
    e4ae:	ldrb.w	r3, [r0, #1]!
    e4b2:	cmp	r3, #0
    e4b4:	bne.n	e4ae <strcat+0x2e>
    e4b6:	bl	e4c0 <strcpy>
    e4ba:	mov	r0, r4
    e4bc:	pop	{r4, pc}
    e4be:	nop

0000e4c0 <strcpy>:
    e4c0:	eor.w	r2, r0, r1
    e4c4:	mov	ip, r0
    e4c6:	tst.w	r2, #3
    e4ca:	bne.n	e56c <strcpy+0xac>
    e4cc:	tst.w	r1, #3
    e4d0:	bne.n	e538 <strcpy+0x78>
    e4d2:	str.w	r4, [sp, #-4]!
    e4d6:	tst.w	r1, #4
    e4da:	ldr.w	r3, [r1], #4
    e4de:	beq.n	e4f8 <strcpy+0x38>
    e4e0:	sub.w	r2, r3, #16843009	; 0x1010101
    e4e4:	bics	r2, r3
    e4e6:	tst.w	r2, #2155905152	; 0x80808080
    e4ea:	itt	eq
    e4ec:	streq.w	r3, [ip], #4
    e4f0:	ldreq.w	r3, [r1], #4
    e4f4:	bne.n	e524 <strcpy+0x64>
    e4f6:	nop
    e4f8:	ldr.w	r4, [r1], #4
    e4fc:	sub.w	r2, r3, #16843009	; 0x1010101
    e500:	bics	r2, r3
    e502:	tst.w	r2, #2155905152	; 0x80808080
    e506:	sub.w	r2, r4, #16843009	; 0x1010101
    e50a:	bne.n	e524 <strcpy+0x64>
    e50c:	str.w	r3, [ip], #4
    e510:	bics	r2, r4
    e512:	tst.w	r2, #2155905152	; 0x80808080
    e516:	itt	eq
    e518:	ldreq.w	r3, [r1], #4
    e51c:	streq.w	r4, [ip], #4
    e520:	beq.n	e4f8 <strcpy+0x38>
    e522:	mov	r3, r4
    e524:	strb.w	r3, [ip], #1
    e528:	tst.w	r3, #255	; 0xff
    e52c:	mov.w	r3, r3, ror #8
    e530:	bne.n	e524 <strcpy+0x64>
    e532:	ldr.w	r4, [sp], #4
    e536:	bx	lr
    e538:	tst.w	r1, #1
    e53c:	beq.n	e54c <strcpy+0x8c>
    e53e:	ldrb.w	r2, [r1], #1
    e542:	strb.w	r2, [ip], #1
    e546:	cmp	r2, #0
    e548:	it	eq
    e54a:	bxeq	lr
    e54c:	tst.w	r1, #2
    e550:	beq.n	e4d2 <strcpy+0x12>
    e552:	ldrh.w	r2, [r1], #2
    e556:	tst.w	r2, #255	; 0xff
    e55a:	itet	ne
    e55c:	strhne.w	r2, [ip], #2
    e560:	strbeq.w	r2, [ip]
    e564:	tstne.w	r2, #65280	; 0xff00
    e568:	bne.n	e4d2 <strcpy+0x12>
    e56a:	bx	lr
    e56c:	ldrb.w	r2, [r1], #1
    e570:	strb.w	r2, [ip], #1
    e574:	cmp	r2, #0
    e576:	bne.n	e56c <strcpy+0xac>
    e578:	bx	lr
    e57a:	nop
    e57c:			; <UNDEFINED> instruction: 0xffffffff

0000e580 <strlen>:
    e580:	pld	[r0]
    e584:	strd	r4, r5, [sp, #-8]!
    e588:	bic.w	r1, r0, #7
    e58c:	mvn.w	ip, #0
    e590:	ands.w	r4, r0, #7
    e594:	pld	[r1, #32]
    e598:	bne.w	e62e <strlen+0xae>
    e59c:	mov.w	r4, #0
    e5a0:	mvn.w	r0, #7
    e5a4:	ldrd	r2, r3, [r1]
    e5a8:	pld	[r1, #64]	; 0x40
    e5ac:	add.w	r0, r0, #8
    e5b0:	uadd8	r2, r2, ip
    e5b4:	sel	r2, r4, ip
    e5b8:	uadd8	r3, r3, ip
    e5bc:	sel	r3, r2, ip
    e5c0:	cbnz	r3, e616 <strlen+0x96>
    e5c2:	ldrd	r2, r3, [r1, #8]
    e5c6:	uadd8	r2, r2, ip
    e5ca:	add.w	r0, r0, #8
    e5ce:	sel	r2, r4, ip
    e5d2:	uadd8	r3, r3, ip
    e5d6:	sel	r3, r2, ip
    e5da:	cbnz	r3, e616 <strlen+0x96>
    e5dc:	ldrd	r2, r3, [r1, #16]
    e5e0:	uadd8	r2, r2, ip
    e5e4:	add.w	r0, r0, #8
    e5e8:	sel	r2, r4, ip
    e5ec:	uadd8	r3, r3, ip
    e5f0:	sel	r3, r2, ip
    e5f4:	cbnz	r3, e616 <strlen+0x96>
    e5f6:	ldrd	r2, r3, [r1, #24]
    e5fa:	add.w	r1, r1, #32
    e5fe:	uadd8	r2, r2, ip
    e602:	add.w	r0, r0, #8
    e606:	sel	r2, r4, ip
    e60a:	uadd8	r3, r3, ip
    e60e:	sel	r3, r2, ip
    e612:	cmp	r3, #0
    e614:	beq.n	e5a4 <strlen+0x24>
    e616:	cmp	r2, #0
    e618:	itt	eq
    e61a:	addeq	r0, #4
    e61c:	moveq	r2, r3
    e61e:	rev	r2, r2
    e620:	clz	r2, r2
    e624:	ldrd	r4, r5, [sp], #8
    e628:	add.w	r0, r0, r2, lsr #3
    e62c:	bx	lr
    e62e:	ldrd	r2, r3, [r1]
    e632:	and.w	r5, r4, #3
    e636:	rsb	r0, r4, #0
    e63a:	mov.w	r5, r5, lsl #3
    e63e:	tst.w	r4, #4
    e642:	pld	[r1, #64]	; 0x40
    e646:	lsl.w	r5, ip, r5
    e64a:	orn	r2, r2, r5
    e64e:	itt	ne
    e650:	ornne	r3, r3, r5
    e654:	movne	r2, ip
    e656:	mov.w	r4, #0
    e65a:	b.n	e5b0 <strlen+0x30>

0000e65c <strncmp>:
    e65c:	cmp	r2, #0
    e65e:	beq.n	e6e4 <strncmp+0x88>
    e660:	orr.w	r3, r0, r1
    e664:	ands.w	r3, r3, #3
    e668:	push	{r4, r5, r6, r7}
    e66a:	bne.n	e6b8 <strncmp+0x5c>
    e66c:	cmp	r2, #3
    e66e:	bls.n	e6b8 <strncmp+0x5c>
    e670:	ldr	r4, [r0, #0]
    e672:	ldr	r5, [r1, #0]
    e674:	cmp	r4, r5
    e676:	bne.n	e6b8 <strncmp+0x5c>
    e678:	subs	r2, #4
    e67a:	beq.n	e6e8 <strncmp+0x8c>
    e67c:	sub.w	r5, r4, #16843009	; 0x1010101
    e680:	bic.w	r4, r5, r4
    e684:	tst.w	r4, #2155905152	; 0x80808080
    e688:	bne.n	e6ee <strncmp+0x92>
    e68a:	adds	r7, r0, #4
    e68c:	adds	r5, r1, #4
    e68e:	b.n	e6ac <strncmp+0x50>
    e690:	ldr.w	r3, [r7], #4
    e694:	ldr	r6, [r1, #0]
    e696:	sub.w	r4, r3, #16843009	; 0x1010101
    e69a:	cmp	r3, r6
    e69c:	bic.w	r4, r4, r3
    e6a0:	bne.n	e6b8 <strncmp+0x5c>
    e6a2:	subs	r2, #4
    e6a4:	beq.n	e6e8 <strncmp+0x8c>
    e6a6:	tst.w	r4, #2155905152	; 0x80808080
    e6aa:	bne.n	e6f4 <strncmp+0x98>
    e6ac:	cmp	r2, #3
    e6ae:	mov	r1, r5
    e6b0:	mov	r0, r7
    e6b2:	add.w	r5, r5, #4
    e6b6:	bhi.n	e690 <strncmp+0x34>
    e6b8:	ldrb	r3, [r0, #0]
    e6ba:	ldrb	r4, [r1, #0]
    e6bc:	cmp	r4, r3
    e6be:	add.w	r2, r2, #4294967295
    e6c2:	bne.n	e6de <strncmp+0x82>
    e6c4:	cbz	r2, e6e8 <strncmp+0x8c>
    e6c6:	cbnz	r4, e6ce <strncmp+0x72>
    e6c8:	b.n	e6f8 <strncmp+0x9c>
    e6ca:	cbz	r2, e6e8 <strncmp+0x8c>
    e6cc:	cbz	r3, e6ee <strncmp+0x92>
    e6ce:	ldrb.w	r3, [r0, #1]!
    e6d2:	ldrb.w	r4, [r1, #1]!
    e6d6:	cmp	r3, r4
    e6d8:	add.w	r2, r2, #4294967295
    e6dc:	beq.n	e6ca <strncmp+0x6e>
    e6de:	subs	r0, r3, r4
    e6e0:	pop	{r4, r5, r6, r7}
    e6e2:	bx	lr
    e6e4:	mov	r0, r2
    e6e6:	bx	lr
    e6e8:	mov	r0, r2
    e6ea:	pop	{r4, r5, r6, r7}
    e6ec:	bx	lr
    e6ee:	mov	r0, r3
    e6f0:	pop	{r4, r5, r6, r7}
    e6f2:	bx	lr
    e6f4:	movs	r0, #0
    e6f6:	b.n	e6e0 <strncmp+0x84>
    e6f8:	mov	r0, r4
    e6fa:	b.n	e6e0 <strncmp+0x84>

0000e6fc <_vdprintf_r>:
    e6fc:	push	{r4, r5, r6, r7, lr}
    e6fe:	sub.w	sp, sp, #532	; 0x214
    e702:	add	r5, sp, #16
    e704:	str	r3, [sp, #0]
    e706:	mov	r7, r1
    e708:	mov	r3, r2
    e70a:	mov.w	r4, #512	; 0x200
    e70e:	add	r2, sp, #12
    e710:	mov	r1, r5
    e712:	str	r4, [sp, #12]
    e714:	mov	r6, r0
    e716:	bl	f140 <_vasnprintf_r>
    e71a:	cbz	r0, e740 <_vdprintf_r+0x44>
    e71c:	mov	r4, r0
    e71e:	mov	r2, r0
    e720:	mov	r1, r7
    e722:	ldr	r3, [sp, #12]
    e724:	mov	r0, r6
    e726:	bl	e77c <_write_r>
    e72a:	cmp	r4, r5
    e72c:	str	r0, [sp, #12]
    e72e:	beq.n	e73a <_vdprintf_r+0x3e>
    e730:	mov	r0, r6
    e732:	mov	r1, r4
    e734:	bl	e930 <_free_r>
    e738:	ldr	r0, [sp, #12]
    e73a:	add.w	sp, sp, #532	; 0x214
    e73e:	pop	{r4, r5, r6, r7, pc}
    e740:	mov.w	r0, #4294967295
    e744:	b.n	e73a <_vdprintf_r+0x3e>
    e746:	nop

0000e748 <vdprintf>:
    e748:	push	{r4}
    e74a:	ldr	r4, [pc, #16]	; (e75c <vdprintf+0x14>)
    e74c:	mov	r3, r2
    e74e:	mov	r2, r1
    e750:	mov	r1, r0
    e752:	ldr	r0, [r4, #0]
    e754:	ldr.w	r4, [sp], #4
    e758:	b.w	e6fc <_vdprintf_r>
    e75c:	.word	0x1fff0ef8

0000e760 <__ascii_wctomb>:
    e760:	cbz	r1, e76c <__ascii_wctomb+0xc>
    e762:	cmp	r2, #255	; 0xff
    e764:	bhi.n	e770 <__ascii_wctomb+0x10>
    e766:	strb	r2, [r1, #0]
    e768:	movs	r0, #1
    e76a:	bx	lr
    e76c:	mov	r0, r1
    e76e:	bx	lr
    e770:	movs	r3, #138	; 0x8a
    e772:	str	r3, [r0, #0]
    e774:	mov.w	r0, #4294967295
    e778:	bx	lr
    e77a:	nop

0000e77c <_write_r>:
    e77c:	push	{r4, r5, r6, lr}
    e77e:	mov	r5, r1
    e780:	ldr	r4, [pc, #32]	; (e7a4 <_write_r+0x28>)
    e782:	mov	r1, r2
    e784:	mov	r6, r0
    e786:	mov	r2, r3
    e788:	mov	r0, r5
    e78a:	movs	r3, #0
    e78c:	str	r3, [r4, #0]
    e78e:	bl	c818 <_write>
    e792:	adds	r3, r0, #1
    e794:	beq.n	e798 <_write_r+0x1c>
    e796:	pop	{r4, r5, r6, pc}
    e798:	ldr	r3, [r4, #0]
    e79a:	cmp	r3, #0
    e79c:	beq.n	e796 <_write_r+0x1a>
    e79e:	str	r3, [r6, #0]
    e7a0:	pop	{r4, r5, r6, pc}
    e7a2:	nop
    e7a4:	.word	0x1fff211c

0000e7a8 <__register_exitproc>:
    e7a8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e7ac:	ldr	r4, [pc, #148]	; (e844 <__register_exitproc+0x9c>)
    e7ae:	ldr	r5, [r4, #0]
    e7b0:	ldr.w	r4, [r5, #328]	; 0x148
    e7b4:	mov	r6, r0
    e7b6:	mov	r8, r1
    e7b8:	mov	sl, r2
    e7ba:	mov	r9, r3
    e7bc:	cbz	r4, e830 <__register_exitproc+0x88>
    e7be:	ldr	r0, [r4, #4]
    e7c0:	cmp	r0, #31
    e7c2:	bgt.n	e7f4 <__register_exitproc+0x4c>
    e7c4:	adds	r3, r0, #1
    e7c6:	cbz	r6, e7e6 <__register_exitproc+0x3e>
    e7c8:	add.w	r5, r4, r0, lsl #2
    e7cc:	movs	r2, #1
    e7ce:	str.w	sl, [r5, #136]	; 0x88
    e7d2:	ldr.w	r1, [r4, #392]	; 0x188
    e7d6:	lsls	r2, r0
    e7d8:	orrs	r1, r2
    e7da:	cmp	r6, #2
    e7dc:	str.w	r1, [r4, #392]	; 0x188
    e7e0:	str.w	r9, [r5, #264]	; 0x108
    e7e4:	beq.n	e824 <__register_exitproc+0x7c>
    e7e6:	adds	r0, #2
    e7e8:	str	r3, [r4, #4]
    e7ea:	str.w	r8, [r4, r0, lsl #2]
    e7ee:	movs	r0, #0
    e7f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e7f4:	ldr	r3, [pc, #80]	; (e848 <__register_exitproc+0xa0>)
    e7f6:	cbz	r3, e83a <__register_exitproc+0x92>
    e7f8:	mov.w	r0, #400	; 0x190
    e7fc:	bl	d800 <malloc>
    e800:	mov	r4, r0
    e802:	cbz	r0, e83a <__register_exitproc+0x92>
    e804:	ldr.w	r3, [r5, #328]	; 0x148
    e808:	movs	r7, #0
    e80a:	stmia.w	r0, {r3, r7}
    e80e:	str.w	r4, [r5, #328]	; 0x148
    e812:	mov	r0, r7
    e814:	movs	r3, #1
    e816:	str.w	r7, [r4, #392]	; 0x188
    e81a:	str.w	r7, [r4, #396]	; 0x18c
    e81e:	cmp	r6, #0
    e820:	beq.n	e7e6 <__register_exitproc+0x3e>
    e822:	b.n	e7c8 <__register_exitproc+0x20>
    e824:	ldr.w	r1, [r4, #396]	; 0x18c
    e828:	orrs	r2, r1
    e82a:	str.w	r2, [r4, #396]	; 0x18c
    e82e:	b.n	e7e6 <__register_exitproc+0x3e>
    e830:	add.w	r4, r5, #332	; 0x14c
    e834:	str.w	r4, [r5, #328]	; 0x148
    e838:	b.n	e7be <__register_exitproc+0x16>
    e83a:	mov.w	r0, #4294967295
    e83e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e842:	nop
    e844:	.word	0x0001206c
    e848:	.word	0x0000d801

0000e84c <register_fini>:
    e84c:	ldr	r3, [pc, #8]	; (e858 <register_fini+0xc>)
    e84e:	cbz	r3, e856 <register_fini+0xa>
    e850:	ldr	r0, [pc, #8]	; (e85c <register_fini+0x10>)
    e852:	b.w	e860 <atexit>
    e856:	bx	lr
    e858:	.word	0x00000000
    e85c:	.word	0x0000e86d

0000e860 <atexit>:
    e860:	movs	r3, #0
    e862:	mov	r1, r0
    e864:	mov	r2, r3
    e866:	mov	r0, r3
    e868:	b.w	e7a8 <__register_exitproc>

0000e86c <__libc_fini_array>:
    e86c:	push	{r3, r4, r5, lr}
    e86e:	ldr	r5, [pc, #28]	; (e88c <__libc_fini_array+0x20>)
    e870:	ldr	r4, [pc, #28]	; (e890 <__libc_fini_array+0x24>)
    e872:	subs	r4, r5, r4
    e874:	asrs	r4, r4, #2
    e876:	beq.n	e884 <__libc_fini_array+0x18>
    e878:	subs	r4, #1
    e87a:	ldr.w	r3, [r5, #-4]!
    e87e:	blx	r3
    e880:	cmp	r4, #0
    e882:	bne.n	e878 <__libc_fini_array+0xc>
    e884:	ldmia.w	sp!, {r3, r4, r5, lr}
    e888:	b.w	12314 <__init_array_end>
	...

0000e894 <_malloc_trim_r>:
    e894:	push	{r3, r4, r5, r6, r7, lr}
    e896:	ldr	r7, [pc, #140]	; (e924 <_malloc_trim_r+0x90>)
    e898:	mov	r4, r1
    e89a:	mov	r6, r0
    e89c:	bl	e028 <__malloc_lock>
    e8a0:	ldr	r3, [r7, #8]
    e8a2:	ldr	r5, [r3, #4]
    e8a4:	bic.w	r5, r5, #3
    e8a8:	subs	r1, r5, r4
    e8aa:	addw	r1, r1, #4079	; 0xfef
    e8ae:	bic.w	r1, r1, #4080	; 0xff0
    e8b2:	bic.w	r1, r1, #15
    e8b6:	sub.w	r4, r1, #4096	; 0x1000
    e8ba:	cmp.w	r4, #4096	; 0x1000
    e8be:	blt.n	e8d0 <_malloc_trim_r+0x3c>
    e8c0:	movs	r1, #0
    e8c2:	mov	r0, r6
    e8c4:	bl	e410 <_sbrk_r>
    e8c8:	ldr	r3, [r7, #8]
    e8ca:	add	r3, r5
    e8cc:	cmp	r0, r3
    e8ce:	beq.n	e8da <_malloc_trim_r+0x46>
    e8d0:	mov	r0, r6
    e8d2:	bl	e02c <__malloc_unlock>
    e8d6:	movs	r0, #0
    e8d8:	pop	{r3, r4, r5, r6, r7, pc}
    e8da:	negs	r1, r4
    e8dc:	mov	r0, r6
    e8de:	bl	e410 <_sbrk_r>
    e8e2:	adds	r0, #1
    e8e4:	beq.n	e902 <_malloc_trim_r+0x6e>
    e8e6:	ldr	r3, [pc, #64]	; (e928 <_malloc_trim_r+0x94>)
    e8e8:	ldr	r2, [r7, #8]
    e8ea:	ldr	r1, [r3, #0]
    e8ec:	subs	r5, r5, r4
    e8ee:	orr.w	r5, r5, #1
    e8f2:	mov	r0, r6
    e8f4:	subs	r1, r1, r4
    e8f6:	str	r5, [r2, #4]
    e8f8:	str	r1, [r3, #0]
    e8fa:	bl	e02c <__malloc_unlock>
    e8fe:	movs	r0, #1
    e900:	pop	{r3, r4, r5, r6, r7, pc}
    e902:	movs	r1, #0
    e904:	mov	r0, r6
    e906:	bl	e410 <_sbrk_r>
    e90a:	ldr	r2, [r7, #8]
    e90c:	subs	r3, r0, r2
    e90e:	cmp	r3, #15
    e910:	ble.n	e8d0 <_malloc_trim_r+0x3c>
    e912:	ldr	r4, [pc, #24]	; (e92c <_malloc_trim_r+0x98>)
    e914:	ldr	r1, [pc, #16]	; (e928 <_malloc_trim_r+0x94>)
    e916:	ldr	r4, [r4, #0]
    e918:	orr.w	r3, r3, #1
    e91c:	subs	r0, r0, r4
    e91e:	str	r3, [r2, #4]
    e920:	str	r0, [r1, #0]
    e922:	b.n	e8d0 <_malloc_trim_r+0x3c>
    e924:	.word	0x1fff1068
    e928:	.word	0x1fff20dc
    e92c:	.word	0x1fff1474

0000e930 <_free_r>:
    e930:	cmp	r1, #0
    e932:	beq.n	e9c0 <_free_r+0x90>
    e934:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e938:	mov	r5, r1
    e93a:	mov	r8, r0
    e93c:	bl	e028 <__malloc_lock>
    e940:	ldr.w	r7, [r5, #-4]
    e944:	ldr	r1, [pc, #424]	; (eaf0 <_free_r+0x1c0>)
    e946:	bic.w	r3, r7, #1
    e94a:	sub.w	r4, r5, #8
    e94e:	adds	r2, r4, r3
    e950:	ldr	r6, [r1, #8]
    e952:	ldr	r0, [r2, #4]
    e954:	cmp	r2, r6
    e956:	bic.w	r0, r0, #3
    e95a:	beq.n	ea22 <_free_r+0xf2>
    e95c:	lsls	r6, r7, #31
    e95e:	str	r0, [r2, #4]
    e960:	bmi.n	e97a <_free_r+0x4a>
    e962:	ldr.w	r7, [r5, #-8]
    e966:	subs	r4, r4, r7
    e968:	add.w	lr, r1, #8
    e96c:	ldr	r5, [r4, #8]
    e96e:	cmp	r5, lr
    e970:	add	r3, r7
    e972:	beq.n	ea54 <_free_r+0x124>
    e974:	ldr	r7, [r4, #12]
    e976:	str	r7, [r5, #12]
    e978:	str	r5, [r7, #8]
    e97a:	adds	r5, r2, r0
    e97c:	ldr	r5, [r5, #4]
    e97e:	lsls	r5, r5, #31
    e980:	bpl.n	ea08 <_free_r+0xd8>
    e982:	orr.w	r2, r3, #1
    e986:	str	r2, [r4, #4]
    e988:	str	r3, [r4, r3]
    e98a:	cmp.w	r3, #512	; 0x200
    e98e:	bcs.n	e9c2 <_free_r+0x92>
    e990:	lsrs	r3, r3, #3
    e992:	adds	r2, r3, #1
    e994:	ldr	r5, [r1, #4]
    e996:	ldr.w	r7, [r1, r2, lsl #3]
    e99a:	str	r7, [r4, #8]
    e99c:	movs	r0, #1
    e99e:	asrs	r3, r3, #2
    e9a0:	lsl.w	r3, r0, r3
    e9a4:	add.w	r0, r1, r2, lsl #3
    e9a8:	orrs	r5, r3
    e9aa:	subs	r0, #8
    e9ac:	str	r0, [r4, #12]
    e9ae:	str	r5, [r1, #4]
    e9b0:	str.w	r4, [r1, r2, lsl #3]
    e9b4:	str	r4, [r7, #12]
    e9b6:	mov	r0, r8
    e9b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e9bc:	b.w	e02c <__malloc_unlock>
    e9c0:	bx	lr
    e9c2:	lsrs	r2, r3, #9
    e9c4:	cmp	r2, #4
    e9c6:	bhi.n	ea70 <_free_r+0x140>
    e9c8:	lsrs	r2, r3, #6
    e9ca:	add.w	r7, r2, #57	; 0x39
    e9ce:	lsls	r7, r7, #1
    e9d0:	add.w	r5, r2, #56	; 0x38
    e9d4:	add.w	r0, r1, r7, lsl #2
    e9d8:	ldr.w	r2, [r1, r7, lsl #2]
    e9dc:	ldr	r1, [pc, #272]	; (eaf0 <_free_r+0x1c0>)
    e9de:	subs	r0, #8
    e9e0:	cmp	r0, r2
    e9e2:	beq.n	ea80 <_free_r+0x150>
    e9e4:	ldr	r1, [r2, #4]
    e9e6:	bic.w	r1, r1, #3
    e9ea:	cmp	r3, r1
    e9ec:	bcs.n	e9f4 <_free_r+0xc4>
    e9ee:	ldr	r2, [r2, #8]
    e9f0:	cmp	r0, r2
    e9f2:	bne.n	e9e4 <_free_r+0xb4>
    e9f4:	ldr	r0, [r2, #12]
    e9f6:	str	r0, [r4, #12]
    e9f8:	str	r2, [r4, #8]
    e9fa:	str	r4, [r0, #8]
    e9fc:	str	r4, [r2, #12]
    e9fe:	mov	r0, r8
    ea00:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ea04:	b.w	e02c <__malloc_unlock>
    ea08:	ldr	r5, [r2, #8]
    ea0a:	ldr	r7, [pc, #232]	; (eaf4 <_free_r+0x1c4>)
    ea0c:	cmp	r5, r7
    ea0e:	add	r3, r0
    ea10:	beq.n	ea92 <_free_r+0x162>
    ea12:	ldr	r0, [r2, #12]
    ea14:	str	r0, [r5, #12]
    ea16:	orr.w	r2, r3, #1
    ea1a:	str	r5, [r0, #8]
    ea1c:	str	r2, [r4, #4]
    ea1e:	str	r3, [r4, r3]
    ea20:	b.n	e98a <_free_r+0x5a>
    ea22:	lsls	r7, r7, #31
    ea24:	add	r3, r0
    ea26:	bmi.n	ea38 <_free_r+0x108>
    ea28:	ldr.w	r2, [r5, #-8]
    ea2c:	subs	r4, r4, r2
    ea2e:	add	r3, r2
    ea30:	ldr	r0, [r4, #8]
    ea32:	ldr	r2, [r4, #12]
    ea34:	str	r2, [r0, #12]
    ea36:	str	r0, [r2, #8]
    ea38:	ldr	r2, [pc, #188]	; (eaf8 <_free_r+0x1c8>)
    ea3a:	ldr	r2, [r2, #0]
    ea3c:	orr.w	r0, r3, #1
    ea40:	cmp	r3, r2
    ea42:	str	r0, [r4, #4]
    ea44:	str	r4, [r1, #8]
    ea46:	bcc.n	e9b6 <_free_r+0x86>
    ea48:	ldr	r3, [pc, #176]	; (eafc <_free_r+0x1cc>)
    ea4a:	mov	r0, r8
    ea4c:	ldr	r1, [r3, #0]
    ea4e:	bl	e894 <_malloc_trim_r>
    ea52:	b.n	e9b6 <_free_r+0x86>
    ea54:	adds	r1, r2, r0
    ea56:	ldr	r1, [r1, #4]
    ea58:	lsls	r1, r1, #31
    ea5a:	bmi.n	eae6 <_free_r+0x1b6>
    ea5c:	ldr	r1, [r2, #8]
    ea5e:	ldr	r2, [r2, #12]
    ea60:	str	r2, [r1, #12]
    ea62:	add	r3, r0
    ea64:	orr.w	r0, r3, #1
    ea68:	str	r1, [r2, #8]
    ea6a:	str	r0, [r4, #4]
    ea6c:	str	r3, [r4, r3]
    ea6e:	b.n	e9b6 <_free_r+0x86>
    ea70:	cmp	r2, #20
    ea72:	bhi.n	eaa4 <_free_r+0x174>
    ea74:	add.w	r7, r2, #92	; 0x5c
    ea78:	lsls	r7, r7, #1
    ea7a:	add.w	r5, r2, #91	; 0x5b
    ea7e:	b.n	e9d4 <_free_r+0xa4>
    ea80:	asrs	r2, r5, #2
    ea82:	ldr	r3, [r1, #4]
    ea84:	movs	r5, #1
    ea86:	lsl.w	r2, r5, r2
    ea8a:	orrs	r3, r2
    ea8c:	str	r3, [r1, #4]
    ea8e:	mov	r2, r0
    ea90:	b.n	e9f6 <_free_r+0xc6>
    ea92:	orr.w	r2, r3, #1
    ea96:	str	r4, [r1, #20]
    ea98:	str	r4, [r1, #16]
    ea9a:	str	r5, [r4, #12]
    ea9c:	str	r5, [r4, #8]
    ea9e:	str	r2, [r4, #4]
    eaa0:	str	r3, [r4, r3]
    eaa2:	b.n	e9b6 <_free_r+0x86>
    eaa4:	cmp	r2, #84	; 0x54
    eaa6:	bhi.n	eab6 <_free_r+0x186>
    eaa8:	lsrs	r2, r3, #12
    eaaa:	add.w	r7, r2, #111	; 0x6f
    eaae:	lsls	r7, r7, #1
    eab0:	add.w	r5, r2, #110	; 0x6e
    eab4:	b.n	e9d4 <_free_r+0xa4>
    eab6:	cmp.w	r2, #340	; 0x154
    eaba:	bhi.n	eaca <_free_r+0x19a>
    eabc:	lsrs	r2, r3, #15
    eabe:	add.w	r7, r2, #120	; 0x78
    eac2:	lsls	r7, r7, #1
    eac4:	add.w	r5, r2, #119	; 0x77
    eac8:	b.n	e9d4 <_free_r+0xa4>
    eaca:	movw	r0, #1364	; 0x554
    eace:	cmp	r2, r0
    ead0:	bhi.n	eae0 <_free_r+0x1b0>
    ead2:	lsrs	r2, r3, #18
    ead4:	add.w	r7, r2, #125	; 0x7d
    ead8:	lsls	r7, r7, #1
    eada:	add.w	r5, r2, #124	; 0x7c
    eade:	b.n	e9d4 <_free_r+0xa4>
    eae0:	movs	r7, #254	; 0xfe
    eae2:	movs	r5, #126	; 0x7e
    eae4:	b.n	e9d4 <_free_r+0xa4>
    eae6:	orr.w	r2, r3, #1
    eaea:	str	r2, [r4, #4]
    eaec:	str	r3, [r4, r3]
    eaee:	b.n	e9b6 <_free_r+0x86>
    eaf0:	.word	0x1fff1068
    eaf4:	.word	0x1fff1070
    eaf8:	.word	0x1fff1470
    eafc:	.word	0x1fff20d8

0000eb00 <_localeconv_r>:
    eb00:	ldr	r2, [pc, #16]	; (eb14 <_localeconv_r+0x14>)
    eb02:	ldr	r3, [pc, #20]	; (eb18 <_localeconv_r+0x18>)
    eb04:	ldr	r2, [r2, #0]
    eb06:	ldr	r0, [r2, #52]	; 0x34
    eb08:	cmp	r0, #0
    eb0a:	it	eq
    eb0c:	moveq	r0, r3
    eb0e:	adds	r0, #240	; 0xf0
    eb10:	bx	lr
    eb12:	nop
    eb14:	.word	0x1fff0ef8
    eb18:	.word	0x1fff0efc

0000eb1c <_Balloc>:
    eb1c:	ldr	r3, [r0, #76]	; 0x4c
    eb1e:	push	{r4, r5, r6, lr}
    eb20:	mov	r5, r0
    eb22:	mov	r4, r1
    eb24:	cbz	r3, eb3a <_Balloc+0x1e>
    eb26:	ldr.w	r0, [r3, r4, lsl #2]
    eb2a:	cbz	r0, eb4e <_Balloc+0x32>
    eb2c:	ldr	r2, [r0, #0]
    eb2e:	str.w	r2, [r3, r4, lsl #2]
    eb32:	movs	r3, #0
    eb34:	str	r3, [r0, #16]
    eb36:	str	r3, [r0, #12]
    eb38:	pop	{r4, r5, r6, pc}
    eb3a:	movs	r2, #33	; 0x21
    eb3c:	movs	r1, #4
    eb3e:	bl	f1a0 <_calloc_r>
    eb42:	str	r0, [r5, #76]	; 0x4c
    eb44:	mov	r3, r0
    eb46:	cmp	r0, #0
    eb48:	bne.n	eb26 <_Balloc+0xa>
    eb4a:	movs	r0, #0
    eb4c:	pop	{r4, r5, r6, pc}
    eb4e:	movs	r1, #1
    eb50:	lsl.w	r6, r1, r4
    eb54:	adds	r2, r6, #5
    eb56:	mov	r0, r5
    eb58:	lsls	r2, r2, #2
    eb5a:	bl	f1a0 <_calloc_r>
    eb5e:	cmp	r0, #0
    eb60:	beq.n	eb4a <_Balloc+0x2e>
    eb62:	str	r4, [r0, #4]
    eb64:	str	r6, [r0, #8]
    eb66:	b.n	eb32 <_Balloc+0x16>

0000eb68 <_Bfree>:
    eb68:	cbz	r1, eb78 <_Bfree+0x10>
    eb6a:	ldr	r3, [r0, #76]	; 0x4c
    eb6c:	ldr	r2, [r1, #4]
    eb6e:	ldr.w	r0, [r3, r2, lsl #2]
    eb72:	str	r0, [r1, #0]
    eb74:	str.w	r1, [r3, r2, lsl #2]
    eb78:	bx	lr
    eb7a:	nop

0000eb7c <__multadd>:
    eb7c:	push	{r4, r5, r6, r7, lr}
    eb7e:	ldr	r4, [r1, #16]
    eb80:	sub	sp, #12
    eb82:	mov	r5, r1
    eb84:	mov	r6, r0
    eb86:	add.w	lr, r1, #20
    eb8a:	movs	r7, #0
    eb8c:	ldr.w	r0, [lr]
    eb90:	uxth	r1, r0
    eb92:	mla	r1, r2, r1, r3
    eb96:	lsrs	r3, r1, #16
    eb98:	lsrs	r0, r0, #16
    eb9a:	mla	r3, r2, r0, r3
    eb9e:	uxth	r1, r1
    eba0:	adds	r7, #1
    eba2:	add.w	r1, r1, r3, lsl #16
    eba6:	cmp	r4, r7
    eba8:	str.w	r1, [lr], #4
    ebac:	mov.w	r3, r3, lsr #16
    ebb0:	bgt.n	eb8c <__multadd+0x10>
    ebb2:	cbz	r3, ebc4 <__multadd+0x48>
    ebb4:	ldr	r2, [r5, #8]
    ebb6:	cmp	r4, r2
    ebb8:	bge.n	ebca <__multadd+0x4e>
    ebba:	add.w	r2, r5, r4, lsl #2
    ebbe:	adds	r4, #1
    ebc0:	str	r3, [r2, #20]
    ebc2:	str	r4, [r5, #16]
    ebc4:	mov	r0, r5
    ebc6:	add	sp, #12
    ebc8:	pop	{r4, r5, r6, r7, pc}
    ebca:	ldr	r1, [r5, #4]
    ebcc:	str	r3, [sp, #4]
    ebce:	adds	r1, #1
    ebd0:	mov	r0, r6
    ebd2:	bl	eb1c <_Balloc>
    ebd6:	ldr	r2, [r5, #16]
    ebd8:	adds	r2, #2
    ebda:	add.w	r1, r5, #12
    ebde:	mov	r7, r0
    ebe0:	lsls	r2, r2, #2
    ebe2:	adds	r0, #12
    ebe4:	bl	b0e0 <memcpy>
    ebe8:	ldr	r2, [r6, #76]	; 0x4c
    ebea:	ldr	r1, [r5, #4]
    ebec:	ldr	r3, [sp, #4]
    ebee:	ldr.w	r0, [r2, r1, lsl #2]
    ebf2:	str	r0, [r5, #0]
    ebf4:	str.w	r5, [r2, r1, lsl #2]
    ebf8:	mov	r5, r7
    ebfa:	b.n	ebba <__multadd+0x3e>

0000ebfc <__hi0bits>:
    ebfc:	lsrs	r3, r0, #16
    ebfe:	lsls	r3, r3, #16
    ec00:	cbnz	r3, ec30 <__hi0bits+0x34>
    ec02:	lsls	r0, r0, #16
    ec04:	movs	r3, #16
    ec06:	tst.w	r0, #4278190080	; 0xff000000
    ec0a:	itt	eq
    ec0c:	lsleq	r0, r0, #8
    ec0e:	addeq	r3, #8
    ec10:	tst.w	r0, #4026531840	; 0xf0000000
    ec14:	itt	eq
    ec16:	lsleq	r0, r0, #4
    ec18:	addeq	r3, #4
    ec1a:	tst.w	r0, #3221225472	; 0xc0000000
    ec1e:	itt	eq
    ec20:	lsleq	r0, r0, #2
    ec22:	addeq	r3, #2
    ec24:	cmp	r0, #0
    ec26:	blt.n	ec38 <__hi0bits+0x3c>
    ec28:	lsls	r2, r0, #1
    ec2a:	bmi.n	ec34 <__hi0bits+0x38>
    ec2c:	movs	r0, #32
    ec2e:	bx	lr
    ec30:	movs	r3, #0
    ec32:	b.n	ec06 <__hi0bits+0xa>
    ec34:	adds	r0, r3, #1
    ec36:	bx	lr
    ec38:	mov	r0, r3
    ec3a:	bx	lr

0000ec3c <__lo0bits>:
    ec3c:	ldr	r3, [r0, #0]
    ec3e:	ands.w	r2, r3, #7
    ec42:	beq.n	ec54 <__lo0bits+0x18>
    ec44:	lsls	r1, r3, #31
    ec46:	bmi.n	ec8a <__lo0bits+0x4e>
    ec48:	lsls	r2, r3, #30
    ec4a:	bmi.n	ec8e <__lo0bits+0x52>
    ec4c:	lsrs	r3, r3, #2
    ec4e:	str	r3, [r0, #0]
    ec50:	movs	r0, #2
    ec52:	bx	lr
    ec54:	uxth	r1, r3
    ec56:	cbnz	r1, ec5c <__lo0bits+0x20>
    ec58:	lsrs	r3, r3, #16
    ec5a:	movs	r2, #16
    ec5c:	tst.w	r3, #255	; 0xff
    ec60:	itt	eq
    ec62:	lsreq	r3, r3, #8
    ec64:	addeq	r2, #8
    ec66:	lsls	r1, r3, #28
    ec68:	itt	eq
    ec6a:	lsreq	r3, r3, #4
    ec6c:	addeq	r2, #4
    ec6e:	lsls	r1, r3, #30
    ec70:	itt	eq
    ec72:	lsreq	r3, r3, #2
    ec74:	addeq	r2, #2
    ec76:	lsls	r1, r3, #31
    ec78:	bmi.n	ec84 <__lo0bits+0x48>
    ec7a:	lsrs	r3, r3, #1
    ec7c:	bne.n	ec82 <__lo0bits+0x46>
    ec7e:	movs	r0, #32
    ec80:	bx	lr
    ec82:	adds	r2, #1
    ec84:	str	r3, [r0, #0]
    ec86:	mov	r0, r2
    ec88:	bx	lr
    ec8a:	movs	r0, #0
    ec8c:	bx	lr
    ec8e:	lsrs	r3, r3, #1
    ec90:	str	r3, [r0, #0]
    ec92:	movs	r0, #1
    ec94:	bx	lr
    ec96:	nop

0000ec98 <__i2b>:
    ec98:	push	{r4, lr}
    ec9a:	mov	r4, r1
    ec9c:	movs	r1, #1
    ec9e:	bl	eb1c <_Balloc>
    eca2:	movs	r2, #1
    eca4:	str	r4, [r0, #20]
    eca6:	str	r2, [r0, #16]
    eca8:	pop	{r4, pc}
    ecaa:	nop

0000ecac <__multiply>:
    ecac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ecb0:	ldr	r5, [r1, #16]
    ecb2:	ldr	r7, [r2, #16]
    ecb4:	cmp	r5, r7
    ecb6:	sub	sp, #12
    ecb8:	mov	r4, r1
    ecba:	mov	r6, r2
    ecbc:	bge.n	ecc8 <__multiply+0x1c>
    ecbe:	mov	r2, r5
    ecc0:	mov	r4, r6
    ecc2:	mov	r5, r7
    ecc4:	mov	r6, r1
    ecc6:	mov	r7, r2
    ecc8:	ldr	r3, [r4, #8]
    ecca:	ldr	r1, [r4, #4]
    eccc:	add.w	r8, r5, r7
    ecd0:	cmp	r8, r3
    ecd2:	it	gt
    ecd4:	addgt	r1, #1
    ecd6:	bl	eb1c <_Balloc>
    ecda:	add.w	ip, r0, #20
    ecde:	add.w	r9, ip, r8, lsl #2
    ece2:	cmp	ip, r9
    ece4:	str	r0, [sp, #0]
    ece6:	bcs.n	ecf4 <__multiply+0x48>
    ece8:	mov	r3, ip
    ecea:	movs	r1, #0
    ecec:	str.w	r1, [r3], #4
    ecf0:	cmp	r9, r3
    ecf2:	bhi.n	ecec <__multiply+0x40>
    ecf4:	add.w	r2, r6, #20
    ecf8:	add.w	sl, r2, r7, lsl #2
    ecfc:	add.w	r3, r4, #20
    ed00:	cmp	r2, sl
    ed02:	add.w	lr, r3, r5, lsl #2
    ed06:	bcs.n	edb2 <__multiply+0x106>
    ed08:	str.w	r9, [sp, #4]
    ed0c:	mov	r9, r3
    ed0e:	ldr.w	r3, [r2], #4
    ed12:	uxth.w	fp, r3
    ed16:	cmp.w	fp, #0
    ed1a:	beq.n	ed5e <__multiply+0xb2>
    ed1c:	movs	r0, #0
    ed1e:	mov	r7, r9
    ed20:	mov	r6, ip
    ed22:	mov	r5, r0
    ed24:	b.n	ed28 <__multiply+0x7c>
    ed26:	mov	r6, r3
    ed28:	ldr.w	r4, [r7], #4
    ed2c:	ldr	r0, [r6, #0]
    ed2e:	uxth	r1, r4
    ed30:	uxth	r3, r0
    ed32:	mla	r1, fp, r1, r3
    ed36:	lsrs	r4, r4, #16
    ed38:	lsrs	r0, r0, #16
    ed3a:	adds	r3, r1, r5
    ed3c:	mla	r0, fp, r4, r0
    ed40:	add.w	r0, r0, r3, lsr #16
    ed44:	uxth	r1, r3
    ed46:	mov	r3, r6
    ed48:	orr.w	r1, r1, r0, lsl #16
    ed4c:	cmp	lr, r7
    ed4e:	mov.w	r5, r0, lsr #16
    ed52:	str.w	r1, [r3], #4
    ed56:	bhi.n	ed26 <__multiply+0x7a>
    ed58:	str	r5, [r6, #4]
    ed5a:	ldr.w	r3, [r2, #-4]
    ed5e:	movs.w	fp, r3, lsr #16
    ed62:	beq.n	eda6 <__multiply+0xfa>
    ed64:	ldr.w	r3, [ip]
    ed68:	mov	r7, ip
    ed6a:	mov	r0, r3
    ed6c:	mov	r5, r9
    ed6e:	movs	r1, #0
    ed70:	b.n	ed74 <__multiply+0xc8>
    ed72:	mov	r7, r6
    ed74:	ldrh	r4, [r5, #0]
    ed76:	lsrs	r0, r0, #16
    ed78:	mla	r0, fp, r4, r0
    ed7c:	add	r1, r0
    ed7e:	uxth	r4, r3
    ed80:	mov	r6, r7
    ed82:	orr.w	r3, r4, r1, lsl #16
    ed86:	str.w	r3, [r6], #4
    ed8a:	ldr	r0, [r7, #4]
    ed8c:	ldr.w	r4, [r5], #4
    ed90:	uxth	r3, r0
    ed92:	lsrs	r4, r4, #16
    ed94:	mla	r4, fp, r4, r3
    ed98:	add.w	r3, r4, r1, lsr #16
    ed9c:	cmp	lr, r5
    ed9e:	mov.w	r1, r3, lsr #16
    eda2:	bhi.n	ed72 <__multiply+0xc6>
    eda4:	str	r3, [r7, #4]
    eda6:	cmp	sl, r2
    eda8:	add.w	ip, ip, #4
    edac:	bhi.n	ed0e <__multiply+0x62>
    edae:	ldr.w	r9, [sp, #4]
    edb2:	cmp.w	r8, #0
    edb6:	ble.n	edd0 <__multiply+0x124>
    edb8:	ldr.w	r3, [r9, #-4]
    edbc:	sub.w	r9, r9, #4
    edc0:	cbz	r3, edca <__multiply+0x11e>
    edc2:	b.n	edd0 <__multiply+0x124>
    edc4:	ldr.w	r3, [r9, #-4]!
    edc8:	cbnz	r3, edd0 <__multiply+0x124>
    edca:	subs.w	r8, r8, #1
    edce:	bne.n	edc4 <__multiply+0x118>
    edd0:	ldr	r0, [sp, #0]
    edd2:	str.w	r8, [r0, #16]
    edd6:	add	sp, #12
    edd8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000eddc <__pow5mult>:
    eddc:	ands.w	r3, r2, #3
    ede0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ede4:	mov	r4, r2
    ede6:	mov	r7, r0
    ede8:	bne.n	ee48 <__pow5mult+0x6c>
    edea:	mov	r6, r1
    edec:	asrs	r4, r4, #2
    edee:	beq.n	ee2a <__pow5mult+0x4e>
    edf0:	ldr	r5, [r7, #72]	; 0x48
    edf2:	cbz	r5, ee5a <__pow5mult+0x7e>
    edf4:	lsls	r3, r4, #31
    edf6:	mov.w	r8, #0
    edfa:	bmi.n	ee0a <__pow5mult+0x2e>
    edfc:	asrs	r4, r4, #1
    edfe:	beq.n	ee2a <__pow5mult+0x4e>
    ee00:	ldr	r0, [r5, #0]
    ee02:	cbz	r0, ee30 <__pow5mult+0x54>
    ee04:	mov	r5, r0
    ee06:	lsls	r3, r4, #31
    ee08:	bpl.n	edfc <__pow5mult+0x20>
    ee0a:	mov	r2, r5
    ee0c:	mov	r1, r6
    ee0e:	mov	r0, r7
    ee10:	bl	ecac <__multiply>
    ee14:	cbz	r6, ee44 <__pow5mult+0x68>
    ee16:	ldr	r2, [r6, #4]
    ee18:	ldr	r3, [r7, #76]	; 0x4c
    ee1a:	asrs	r4, r4, #1
    ee1c:	ldr.w	r1, [r3, r2, lsl #2]
    ee20:	str	r1, [r6, #0]
    ee22:	str.w	r6, [r3, r2, lsl #2]
    ee26:	mov	r6, r0
    ee28:	bne.n	ee00 <__pow5mult+0x24>
    ee2a:	mov	r0, r6
    ee2c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ee30:	mov	r2, r5
    ee32:	mov	r1, r5
    ee34:	mov	r0, r7
    ee36:	bl	ecac <__multiply>
    ee3a:	str	r0, [r5, #0]
    ee3c:	str.w	r8, [r0]
    ee40:	mov	r5, r0
    ee42:	b.n	ee06 <__pow5mult+0x2a>
    ee44:	mov	r6, r0
    ee46:	b.n	edfc <__pow5mult+0x20>
    ee48:	subs	r2, r3, #1
    ee4a:	ldr	r5, [pc, #44]	; (ee78 <__pow5mult+0x9c>)
    ee4c:	movs	r3, #0
    ee4e:	ldr.w	r2, [r5, r2, lsl #2]
    ee52:	bl	eb7c <__multadd>
    ee56:	mov	r6, r0
    ee58:	b.n	edec <__pow5mult+0x10>
    ee5a:	movs	r1, #1
    ee5c:	mov	r0, r7
    ee5e:	bl	eb1c <_Balloc>
    ee62:	movw	r1, #625	; 0x271
    ee66:	movs	r2, #1
    ee68:	movs	r3, #0
    ee6a:	str	r1, [r0, #20]
    ee6c:	str	r2, [r0, #16]
    ee6e:	mov	r5, r0
    ee70:	str	r0, [r7, #72]	; 0x48
    ee72:	str	r3, [r0, #0]
    ee74:	b.n	edf4 <__pow5mult+0x18>
    ee76:	nop
    ee78:	.word	0x00012278

0000ee7c <__lshift>:
    ee7c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ee80:	mov	r9, r2
    ee82:	ldr	r2, [r1, #16]
    ee84:	ldr	r3, [r1, #8]
    ee86:	mov.w	r4, r9, asr #5
    ee8a:	add.w	r8, r4, r2
    ee8e:	add.w	r5, r8, #1
    ee92:	cmp	r5, r3
    ee94:	mov	r6, r1
    ee96:	mov	sl, r0
    ee98:	ldr	r1, [r1, #4]
    ee9a:	ble.n	eea6 <__lshift+0x2a>
    ee9c:	lsls	r3, r3, #1
    ee9e:	cmp	r5, r3
    eea0:	add.w	r1, r1, #1
    eea4:	bgt.n	ee9c <__lshift+0x20>
    eea6:	mov	r0, sl
    eea8:	bl	eb1c <_Balloc>
    eeac:	cmp	r4, #0
    eeae:	add.w	r2, r0, #20
    eeb2:	ble.n	ef26 <__lshift+0xaa>
    eeb4:	add.w	r3, r2, r4, lsl #2
    eeb8:	movs	r1, #0
    eeba:	str.w	r1, [r2], #4
    eebe:	cmp	r3, r2
    eec0:	bne.n	eeba <__lshift+0x3e>
    eec2:	ldr	r4, [r6, #16]
    eec4:	add.w	r1, r6, #20
    eec8:	ands.w	r9, r9, #31
    eecc:	add.w	lr, r1, r4, lsl #2
    eed0:	beq.n	ef16 <__lshift+0x9a>
    eed2:	rsb	r2, r9, #32
    eed6:	movs	r4, #0
    eed8:	ldr	r7, [r1, #0]
    eeda:	lsl.w	ip, r7, r9
    eede:	orr.w	r4, ip, r4
    eee2:	mov	ip, r3
    eee4:	str.w	r4, [r3], #4
    eee8:	ldr.w	r4, [r1], #4
    eeec:	cmp	lr, r1
    eeee:	lsr.w	r4, r4, r2
    eef2:	bhi.n	eed8 <__lshift+0x5c>
    eef4:	str.w	r4, [ip, #4]
    eef8:	cbz	r4, eefe <__lshift+0x82>
    eefa:	add.w	r5, r8, #2
    eefe:	ldr.w	r3, [sl, #76]	; 0x4c
    ef02:	ldr	r2, [r6, #4]
    ef04:	subs	r5, #1
    ef06:	ldr.w	r1, [r3, r2, lsl #2]
    ef0a:	str	r5, [r0, #16]
    ef0c:	str	r1, [r6, #0]
    ef0e:	str.w	r6, [r3, r2, lsl #2]
    ef12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ef16:	subs	r3, #4
    ef18:	ldr.w	r2, [r1], #4
    ef1c:	str.w	r2, [r3, #4]!
    ef20:	cmp	lr, r1
    ef22:	bhi.n	ef18 <__lshift+0x9c>
    ef24:	b.n	eefe <__lshift+0x82>
    ef26:	mov	r3, r2
    ef28:	b.n	eec2 <__lshift+0x46>
    ef2a:	nop

0000ef2c <__mcmp>:
    ef2c:	ldr	r2, [r0, #16]
    ef2e:	ldr	r3, [r1, #16]
    ef30:	subs	r2, r2, r3
    ef32:	bne.n	ef5c <__mcmp+0x30>
    ef34:	lsls	r3, r3, #2
    ef36:	adds	r0, #20
    ef38:	adds	r1, #20
    ef3a:	add	r1, r3
    ef3c:	push	{r4}
    ef3e:	add	r3, r0
    ef40:	b.n	ef46 <__mcmp+0x1a>
    ef42:	cmp	r0, r3
    ef44:	bcs.n	ef60 <__mcmp+0x34>
    ef46:	ldr.w	r4, [r3, #-4]!
    ef4a:	ldr.w	r2, [r1, #-4]!
    ef4e:	cmp	r4, r2
    ef50:	beq.n	ef42 <__mcmp+0x16>
    ef52:	bcc.n	ef68 <__mcmp+0x3c>
    ef54:	movs	r0, #1
    ef56:	ldr.w	r4, [sp], #4
    ef5a:	bx	lr
    ef5c:	mov	r0, r2
    ef5e:	bx	lr
    ef60:	movs	r0, #0
    ef62:	ldr.w	r4, [sp], #4
    ef66:	bx	lr
    ef68:	mov.w	r0, #4294967295
    ef6c:	b.n	ef56 <__mcmp+0x2a>
    ef6e:	nop

0000ef70 <__mdiff>:
    ef70:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ef74:	ldr	r3, [r1, #16]
    ef76:	mov	r7, r1
    ef78:	ldr	r1, [r2, #16]
    ef7a:	subs	r3, r3, r1
    ef7c:	cmp	r3, #0
    ef7e:	mov	r8, r2
    ef80:	bne.n	efb2 <__mdiff+0x42>
    ef82:	lsls	r1, r1, #2
    ef84:	add.w	r2, r7, #20
    ef88:	add.w	r5, r8, #20
    ef8c:	adds	r3, r2, r1
    ef8e:	add	r1, r5
    ef90:	b.n	ef96 <__mdiff+0x26>
    ef92:	cmp	r2, r3
    ef94:	bcs.n	f054 <__mdiff+0xe4>
    ef96:	ldr.w	r6, [r3, #-4]!
    ef9a:	ldr.w	r4, [r1, #-4]!
    ef9e:	cmp	r6, r4
    efa0:	beq.n	ef92 <__mdiff+0x22>
    efa2:	bcs.n	f066 <__mdiff+0xf6>
    efa4:	mov	r3, r7
    efa6:	mov	r4, r2
    efa8:	mov	r7, r8
    efaa:	mov.w	r9, #1
    efae:	mov	r8, r3
    efb0:	b.n	efc0 <__mdiff+0x50>
    efb2:	blt.n	f070 <__mdiff+0x100>
    efb4:	add.w	r5, r7, #20
    efb8:	add.w	r4, r2, #20
    efbc:	mov.w	r9, #0
    efc0:	ldr	r1, [r7, #4]
    efc2:	bl	eb1c <_Balloc>
    efc6:	ldr.w	r3, [r8, #16]
    efca:	ldr	r6, [r7, #16]
    efcc:	str.w	r9, [r0, #12]
    efd0:	add.w	ip, r4, r3, lsl #2
    efd4:	mov	lr, r4
    efd6:	add.w	r7, r5, r6, lsl #2
    efda:	add.w	r4, r0, #20
    efde:	movs	r3, #0
    efe0:	ldr.w	r1, [lr], #4
    efe4:	ldr.w	r8, [r5], #4
    efe8:	uxth	r2, r1
    efea:	uxtah	r3, r3, r8
    efee:	lsrs	r1, r1, #16
    eff0:	subs	r2, r3, r2
    eff2:	rsb	r3, r1, r8, lsr #16
    eff6:	add.w	r3, r3, r2, asr #16
    effa:	uxth	r2, r2
    effc:	orr.w	r2, r2, r3, lsl #16
    f000:	cmp	ip, lr
    f002:	str.w	r2, [r4], #4
    f006:	mov.w	r3, r3, asr #16
    f00a:	bhi.n	efe0 <__mdiff+0x70>
    f00c:	cmp	r7, r5
    f00e:	bls.n	f040 <__mdiff+0xd0>
    f010:	mov	ip, r4
    f012:	mov	r1, r5
    f014:	ldr.w	lr, [r1], #4
    f018:	uxtah	r2, r3, lr
    f01c:	asrs	r3, r2, #16
    f01e:	add.w	r3, r3, lr, lsr #16
    f022:	uxth	r2, r2
    f024:	orr.w	r2, r2, r3, lsl #16
    f028:	cmp	r7, r1
    f02a:	str.w	r2, [ip], #4
    f02e:	mov.w	r3, r3, asr #16
    f032:	bhi.n	f014 <__mdiff+0xa4>
    f034:	mvns	r5, r5
    f036:	add	r5, r7
    f038:	bic.w	r5, r5, #3
    f03c:	adds	r5, #4
    f03e:	add	r4, r5
    f040:	subs	r4, #4
    f042:	cbnz	r2, f04e <__mdiff+0xde>
    f044:	ldr.w	r3, [r4, #-4]!
    f048:	subs	r6, #1
    f04a:	cmp	r3, #0
    f04c:	beq.n	f044 <__mdiff+0xd4>
    f04e:	str	r6, [r0, #16]
    f050:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f054:	movs	r1, #0
    f056:	bl	eb1c <_Balloc>
    f05a:	movs	r2, #1
    f05c:	movs	r3, #0
    f05e:	str	r2, [r0, #16]
    f060:	str	r3, [r0, #20]
    f062:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f066:	mov	r4, r5
    f068:	mov.w	r9, #0
    f06c:	mov	r5, r2
    f06e:	b.n	efc0 <__mdiff+0x50>
    f070:	mov	r3, r7
    f072:	add.w	r4, r7, #20
    f076:	add.w	r5, r8, #20
    f07a:	mov	r7, r8
    f07c:	mov.w	r9, #1
    f080:	mov	r8, r3
    f082:	b.n	efc0 <__mdiff+0x50>

0000f084 <__d2b>:
    f084:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f088:	vmov	r6, r7, d0
    f08c:	sub	sp, #12
    f08e:	mov	r8, r1
    f090:	movs	r1, #1
    f092:	mov	r4, r7
    f094:	ubfx	r5, r7, #20, #11
    f098:	mov	r7, r2
    f09a:	bl	eb1c <_Balloc>
    f09e:	ubfx	r4, r4, #0, #20
    f0a2:	mov	r9, r0
    f0a4:	cbz	r5, f0aa <__d2b+0x26>
    f0a6:	orr.w	r4, r4, #1048576	; 0x100000
    f0aa:	str	r4, [sp, #4]
    f0ac:	cbz	r6, f0f6 <__d2b+0x72>
    f0ae:	add	r0, sp, #8
    f0b0:	str.w	r6, [r0, #-8]!
    f0b4:	bl	ec3c <__lo0bits>
    f0b8:	cmp	r0, #0
    f0ba:	bne.n	f126 <__d2b+0xa2>
    f0bc:	ldmia.w	sp, {r2, r3}
    f0c0:	str.w	r2, [r9, #20]
    f0c4:	cmp	r3, #0
    f0c6:	ite	eq
    f0c8:	moveq	r1, #1
    f0ca:	movne	r1, #2
    f0cc:	str.w	r3, [r9, #24]
    f0d0:	str.w	r1, [r9, #16]
    f0d4:	cbnz	r5, f10e <__d2b+0x8a>
    f0d6:	add.w	r3, r9, r1, lsl #2
    f0da:	subw	r0, r0, #1074	; 0x432
    f0de:	str.w	r0, [r8]
    f0e2:	ldr	r0, [r3, #16]
    f0e4:	bl	ebfc <__hi0bits>
    f0e8:	rsb	r0, r0, r1, lsl #5
    f0ec:	str	r0, [r7, #0]
    f0ee:	mov	r0, r9
    f0f0:	add	sp, #12
    f0f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f0f6:	add	r0, sp, #4
    f0f8:	bl	ec3c <__lo0bits>
    f0fc:	ldr	r3, [sp, #4]
    f0fe:	str.w	r3, [r9, #20]
    f102:	movs	r1, #1
    f104:	adds	r0, #32
    f106:	str.w	r1, [r9, #16]
    f10a:	cmp	r5, #0
    f10c:	beq.n	f0d6 <__d2b+0x52>
    f10e:	subw	r5, r5, #1075	; 0x433
    f112:	add	r5, r0
    f114:	rsb	r0, r0, #53	; 0x35
    f118:	str.w	r5, [r8]
    f11c:	str	r0, [r7, #0]
    f11e:	mov	r0, r9
    f120:	add	sp, #12
    f122:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f126:	ldmia.w	sp, {r2, r3}
    f12a:	rsb	r1, r0, #32
    f12e:	lsl.w	r1, r3, r1
    f132:	orrs	r2, r1
    f134:	lsrs	r3, r0
    f136:	str	r3, [sp, #4]
    f138:	str.w	r2, [r9, #20]
    f13c:	b.n	f0c4 <__d2b+0x40>
    f13e:	nop

0000f140 <_vasnprintf_r>:
    f140:	push	{r4, r5, r6, lr}
    f142:	mov	r5, r2
    f144:	sub	sp, #104	; 0x68
    f146:	ldr	r4, [r2, #0]
    f148:	cbz	r1, f14e <_vasnprintf_r+0xe>
    f14a:	cmp	r4, #0
    f14c:	bne.n	f184 <_vasnprintf_r+0x44>
    f14e:	movs	r4, #0
    f150:	mov.w	r2, #648	; 0x288
    f154:	strh.w	r2, [sp, #12]
    f158:	str	r4, [sp, #0]
    f15a:	str	r4, [sp, #16]
    f15c:	mov	r2, r3
    f15e:	movw	r6, #65535	; 0xffff
    f162:	ldr	r3, [sp, #120]	; 0x78
    f164:	str	r4, [sp, #8]
    f166:	mov	r1, sp
    f168:	str	r4, [sp, #20]
    f16a:	strh.w	r6, [sp, #14]
    f16e:	bl	10160 <_svfprintf_r>
    f172:	cmp	r0, #0
    f174:	blt.n	f19a <_vasnprintf_r+0x5a>
    f176:	ldr	r3, [sp, #0]
    f178:	str	r0, [r5, #0]
    f17a:	movs	r2, #0
    f17c:	strb	r2, [r3, #0]
    f17e:	ldr	r0, [sp, #16]
    f180:	add	sp, #104	; 0x68
    f182:	pop	{r4, r5, r6, pc}
    f184:	mov.w	r2, #1544	; 0x608
    f188:	str	r1, [sp, #0]
    f18a:	str	r1, [sp, #16]
    f18c:	strh.w	r2, [sp, #12]
    f190:	bge.n	f15c <_vasnprintf_r+0x1c>
    f192:	movs	r3, #139	; 0x8b
    f194:	str	r3, [r0, #0]
    f196:	movs	r0, #0
    f198:	b.n	f180 <_vasnprintf_r+0x40>
    f19a:	movs	r0, #0
    f19c:	b.n	f180 <_vasnprintf_r+0x40>
    f19e:	nop

0000f1a0 <_calloc_r>:
    f1a0:	push	{r4, lr}
    f1a2:	mul.w	r1, r2, r1
    f1a6:	bl	d820 <_malloc_r>
    f1aa:	mov	r4, r0
    f1ac:	cbz	r0, f1e6 <_calloc_r+0x46>
    f1ae:	ldr.w	r2, [r0, #-4]
    f1b2:	bic.w	r2, r2, #3
    f1b6:	subs	r2, #4
    f1b8:	cmp	r2, #36	; 0x24
    f1ba:	bhi.n	f1ee <_calloc_r+0x4e>
    f1bc:	cmp	r2, #19
    f1be:	bls.n	f1ea <_calloc_r+0x4a>
    f1c0:	movs	r3, #0
    f1c2:	cmp	r2, #27
    f1c4:	str	r3, [r0, #0]
    f1c6:	str	r3, [r0, #4]
    f1c8:	bls.n	f1f8 <_calloc_r+0x58>
    f1ca:	cmp	r2, #36	; 0x24
    f1cc:	str	r3, [r0, #8]
    f1ce:	str	r3, [r0, #12]
    f1d0:	iteee	ne
    f1d2:	addne.w	r2, r0, #16
    f1d6:	streq	r3, [r0, #16]
    f1d8:	streq	r3, [r0, #20]
    f1da:	addeq.w	r2, r0, #24
    f1de:	movs	r3, #0
    f1e0:	str	r3, [r2, #0]
    f1e2:	str	r3, [r2, #4]
    f1e4:	str	r3, [r2, #8]
    f1e6:	mov	r0, r4
    f1e8:	pop	{r4, pc}
    f1ea:	mov	r2, r0
    f1ec:	b.n	f1de <_calloc_r+0x3e>
    f1ee:	movs	r1, #0
    f1f0:	bl	df8c <memset>
    f1f4:	mov	r0, r4
    f1f6:	pop	{r4, pc}
    f1f8:	add.w	r2, r0, #8
    f1fc:	b.n	f1de <_calloc_r+0x3e>
    f1fe:	nop

0000f200 <quorem>:
    f200:	ldr	r2, [r0, #16]
    f202:	ldr	r3, [r1, #16]
    f204:	cmp	r3, r2
    f206:	bgt.w	f324 <quorem+0x124>
    f20a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f20e:	add.w	r8, r3, #4294967295
    f212:	add.w	r7, r1, #20
    f216:	add.w	fp, r0, #20
    f21a:	ldr.w	r2, [r7, r8, lsl #2]
    f21e:	ldr.w	r3, [fp, r8, lsl #2]
    f222:	mov.w	r4, r8, lsl #2
    f226:	sub	sp, #12
    f228:	adds	r2, #1
    f22a:	udiv	r9, r3, r2
    f22e:	add.w	r3, fp, r4
    f232:	str	r4, [sp, #0]
    f234:	add.w	sl, r7, r4
    f238:	str	r3, [sp, #4]
    f23a:	cmp.w	r9, #0
    f23e:	beq.n	f2b4 <quorem+0xb4>
    f240:	movs	r5, #0
    f242:	mov	ip, r7
    f244:	mov	lr, fp
    f246:	mov	r3, r5
    f248:	ldr.w	r6, [ip], #4
    f24c:	ldr.w	r2, [lr]
    f250:	uxth	r4, r6
    f252:	mla	r5, r9, r4, r5
    f256:	lsrs	r6, r6, #16
    f258:	lsrs	r4, r5, #16
    f25a:	mla	r4, r9, r6, r4
    f25e:	uxth	r5, r5
    f260:	subs	r3, r3, r5
    f262:	uxth	r6, r4
    f264:	uxtah	r3, r3, r2
    f268:	rsb	r6, r6, r2, lsr #16
    f26c:	add.w	r6, r6, r3, asr #16
    f270:	uxth	r3, r3
    f272:	orr.w	r3, r3, r6, lsl #16
    f276:	cmp	sl, ip
    f278:	str.w	r3, [lr], #4
    f27c:	mov.w	r5, r4, lsr #16
    f280:	mov.w	r3, r6, asr #16
    f284:	bcs.n	f248 <quorem+0x48>
    f286:	ldr	r3, [sp, #0]
    f288:	ldr.w	r3, [fp, r3]
    f28c:	cbnz	r3, f2b4 <quorem+0xb4>
    f28e:	ldr	r4, [sp, #4]
    f290:	subs	r3, r4, #4
    f292:	cmp	fp, r3
    f294:	bcs.n	f2b0 <quorem+0xb0>
    f296:	ldr.w	r3, [r4, #-4]
    f29a:	cbnz	r3, f2b0 <quorem+0xb0>
    f29c:	sub.w	r3, r4, #8
    f2a0:	b.n	f2a8 <quorem+0xa8>
    f2a2:	ldr	r2, [r3, #0]
    f2a4:	subs	r3, #4
    f2a6:	cbnz	r2, f2b0 <quorem+0xb0>
    f2a8:	cmp	fp, r3
    f2aa:	add.w	r8, r8, #4294967295
    f2ae:	bcc.n	f2a2 <quorem+0xa2>
    f2b0:	str.w	r8, [r0, #16]
    f2b4:	mov	r4, r0
    f2b6:	bl	ef2c <__mcmp>
    f2ba:	cmp	r0, #0
    f2bc:	blt.n	f31c <quorem+0x11c>
    f2be:	add.w	r9, r9, #1
    f2c2:	mov	r5, fp
    f2c4:	movs	r3, #0
    f2c6:	ldr.w	r1, [r7], #4
    f2ca:	ldr	r0, [r5, #0]
    f2cc:	uxth	r2, r1
    f2ce:	subs	r2, r3, r2
    f2d0:	lsrs	r1, r1, #16
    f2d2:	uxtah	r2, r2, r0
    f2d6:	rsb	r3, r1, r0, lsr #16
    f2da:	add.w	r3, r3, r2, asr #16
    f2de:	uxth	r1, r2
    f2e0:	orr.w	r1, r1, r3, lsl #16
    f2e4:	cmp	sl, r7
    f2e6:	str.w	r1, [r5], #4
    f2ea:	mov.w	r3, r3, asr #16
    f2ee:	bcs.n	f2c6 <quorem+0xc6>
    f2f0:	ldr.w	r2, [fp, r8, lsl #2]
    f2f4:	add.w	r3, fp, r8, lsl #2
    f2f8:	cbnz	r2, f31c <quorem+0x11c>
    f2fa:	subs	r2, r3, #4
    f2fc:	cmp	fp, r2
    f2fe:	bcs.n	f318 <quorem+0x118>
    f300:	ldr.w	r2, [r3, #-4]
    f304:	cbnz	r2, f318 <quorem+0x118>
    f306:	subs	r3, #8
    f308:	b.n	f310 <quorem+0x110>
    f30a:	ldr	r2, [r3, #0]
    f30c:	subs	r3, #4
    f30e:	cbnz	r2, f318 <quorem+0x118>
    f310:	cmp	fp, r3
    f312:	add.w	r8, r8, #4294967295
    f316:	bcc.n	f30a <quorem+0x10a>
    f318:	str.w	r8, [r4, #16]
    f31c:	mov	r0, r9
    f31e:	add	sp, #12
    f320:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f324:	movs	r0, #0
    f326:	bx	lr

0000f328 <_dtoa_r>:
    f328:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f32c:	vmov	r6, r7, d0
    f330:	sub	sp, #108	; 0x6c
    f332:	ldr	r4, [r0, #64]	; 0x40
    f334:	ldr	r5, [sp, #144]	; 0x90
    f336:	str	r1, [sp, #0]
    f338:	mov	r9, r0
    f33a:	str	r2, [sp, #20]
    f33c:	str	r3, [sp, #12]
    f33e:	vmov	sl, s0
    f342:	mov	fp, r7
    f344:	cbz	r4, f35c <_dtoa_r+0x34>
    f346:	ldr	r2, [r0, #68]	; 0x44
    f348:	str	r2, [r4, #4]
    f34a:	movs	r3, #1
    f34c:	lsls	r3, r2
    f34e:	str	r3, [r4, #8]
    f350:	mov	r1, r4
    f352:	bl	eb68 <_Bfree>
    f356:	movs	r3, #0
    f358:	str.w	r3, [r9, #64]	; 0x40
    f35c:	cmp.w	fp, #0
    f360:	mov	r4, fp
    f362:	blt.n	f3ce <_dtoa_r+0xa6>
    f364:	movs	r3, #0
    f366:	str	r3, [r5, #0]
    f368:	ldr	r3, [pc, #644]	; (f5f0 <_dtoa_r+0x2c8>)
    f36a:	mov	r2, r3
    f36c:	ands	r3, r4
    f36e:	cmp	r3, r2
    f370:	beq.n	f3a0 <_dtoa_r+0x78>
    f372:	movs	r2, #0
    f374:	movs	r3, #0
    f376:	mov	r0, sl
    f378:	mov	r1, fp
    f37a:	bl	d3a0 <__aeabi_dcmpeq>
    f37e:	mov	r6, sl
    f380:	mov	r7, fp
    f382:	mov	r8, r0
    f384:	cbz	r0, f3da <_dtoa_r+0xb2>
    f386:	ldr	r2, [sp, #12]
    f388:	movs	r3, #1
    f38a:	str	r3, [r2, #0]
    f38c:	ldr	r3, [sp, #148]	; 0x94
    f38e:	cmp	r3, #0
    f390:	beq.w	f510 <_dtoa_r+0x1e8>
    f394:	ldr	r0, [pc, #604]	; (f5f4 <_dtoa_r+0x2cc>)
    f396:	str	r0, [r3, #0]
    f398:	subs	r0, #1
    f39a:	add	sp, #108	; 0x6c
    f39c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f3a0:	ldr	r2, [sp, #12]
    f3a2:	movw	r3, #9999	; 0x270f
    f3a6:	str	r3, [r2, #0]
    f3a8:	cmp.w	sl, #0
    f3ac:	beq.w	f4e4 <_dtoa_r+0x1bc>
    f3b0:	ldr	r0, [pc, #580]	; (f5f8 <_dtoa_r+0x2d0>)
    f3b2:	ldr	r3, [sp, #148]	; 0x94
    f3b4:	cmp	r3, #0
    f3b6:	beq.n	f39a <_dtoa_r+0x72>
    f3b8:	ldrb	r3, [r0, #3]
    f3ba:	cmp	r3, #0
    f3bc:	beq.w	f514 <_dtoa_r+0x1ec>
    f3c0:	add.w	r3, r0, #8
    f3c4:	ldr	r2, [sp, #148]	; 0x94
    f3c6:	str	r3, [r2, #0]
    f3c8:	add	sp, #108	; 0x6c
    f3ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f3ce:	movs	r3, #1
    f3d0:	bic.w	r4, fp, #2147483648	; 0x80000000
    f3d4:	str	r3, [r5, #0]
    f3d6:	mov	fp, r4
    f3d8:	b.n	f368 <_dtoa_r+0x40>
    f3da:	add	r2, sp, #96	; 0x60
    f3dc:	add	r1, sp, #100	; 0x64
    f3de:	vmov	d0, r6, r7
    f3e2:	mov	r0, r9
    f3e4:	bl	f084 <__d2b>
    f3e8:	lsrs	r5, r4, #20
    f3ea:	str	r0, [sp, #40]	; 0x28
    f3ec:	bne.w	f4f6 <_dtoa_r+0x1ce>
    f3f0:	ldr	r5, [sp, #96]	; 0x60
    f3f2:	ldr	r6, [sp, #100]	; 0x64
    f3f4:	add	r6, r5
    f3f6:	addw	r3, r6, #1074	; 0x432
    f3fa:	cmp	r3, #32
    f3fc:	ble.w	f910 <_dtoa_r+0x5e8>
    f400:	rsb	r3, r3, #64	; 0x40
    f404:	addw	r0, r6, #1042	; 0x412
    f408:	lsls	r4, r3
    f40a:	lsr.w	r0, sl, r0
    f40e:	orrs	r0, r4
    f410:	bl	cde4 <__aeabi_ui2d>
    f414:	movs	r3, #1
    f416:	subs	r4, r6, #1
    f418:	sub.w	r1, r1, #32505856	; 0x1f00000
    f41c:	str	r3, [sp, #60]	; 0x3c
    f41e:	movs	r2, #0
    f420:	ldr	r3, [pc, #472]	; (f5fc <_dtoa_r+0x2d4>)
    f422:	bl	cb68 <__aeabi_dsub>
    f426:	add	r3, pc, #432	; (adr r3, f5d8 <_dtoa_r+0x2b0>)
    f428:	ldrd	r2, r3, [r3]
    f42c:	bl	ced0 <__aeabi_dmul>
    f430:	add	r3, pc, #428	; (adr r3, f5e0 <_dtoa_r+0x2b8>)
    f432:	ldrd	r2, r3, [r3]
    f436:	bl	cb6c <__adddf3>
    f43a:	mov	r6, r0
    f43c:	mov	r0, r4
    f43e:	mov	r7, r1
    f440:	bl	ce04 <__aeabi_i2d>
    f444:	add	r3, pc, #416	; (adr r3, f5e8 <_dtoa_r+0x2c0>)
    f446:	ldrd	r2, r3, [r3]
    f44a:	bl	ced0 <__aeabi_dmul>
    f44e:	mov	r2, r0
    f450:	mov	r3, r1
    f452:	mov	r0, r6
    f454:	mov	r1, r7
    f456:	bl	cb6c <__adddf3>
    f45a:	mov	r6, r0
    f45c:	mov	r7, r1
    f45e:	bl	d430 <__aeabi_d2iz>
    f462:	movs	r2, #0
    f464:	str	r0, [sp, #16]
    f466:	movs	r3, #0
    f468:	mov	r0, r6
    f46a:	mov	r1, r7
    f46c:	bl	d3b4 <__aeabi_dcmplt>
    f470:	cmp	r0, #0
    f472:	bne.w	f8c6 <_dtoa_r+0x59e>
    f476:	ldr	r6, [sp, #16]
    f478:	cmp	r6, #22
    f47a:	bhi.w	f8c0 <_dtoa_r+0x598>
    f47e:	ldr	r3, [pc, #384]	; (f600 <_dtoa_r+0x2d8>)
    f480:	add.w	r3, r3, r6, lsl #3
    f484:	ldrd	r0, r1, [r3]
    f488:	mov	r2, sl
    f48a:	mov	r3, fp
    f48c:	bl	d3f0 <__aeabi_dcmpgt>
    f490:	cmp	r0, #0
    f492:	beq.w	f91a <_dtoa_r+0x5f2>
    f496:	subs	r3, r6, #1
    f498:	str	r3, [sp, #16]
    f49a:	movs	r3, #0
    f49c:	str	r3, [sp, #52]	; 0x34
    f49e:	subs	r5, r5, r4
    f4a0:	subs.w	r8, r5, #1
    f4a4:	bmi.w	f8fc <_dtoa_r+0x5d4>
    f4a8:	movs	r3, #0
    f4aa:	str	r3, [sp, #28]
    f4ac:	ldr	r3, [sp, #16]
    f4ae:	cmp	r3, #0
    f4b0:	blt.w	f8ea <_dtoa_r+0x5c2>
    f4b4:	add	r8, r3
    f4b6:	str	r3, [sp, #48]	; 0x30
    f4b8:	movs	r3, #0
    f4ba:	str	r3, [sp, #24]
    f4bc:	ldr	r3, [sp, #0]
    f4be:	cmp	r3, #9
    f4c0:	bhi.n	f518 <_dtoa_r+0x1f0>
    f4c2:	cmp	r3, #5
    f4c4:	ble.w	10150 <_dtoa_r+0xe28>
    f4c8:	subs	r3, #4
    f4ca:	str	r3, [sp, #0]
    f4cc:	movs	r6, #0
    f4ce:	ldr	r3, [sp, #0]
    f4d0:	subs	r3, #2
    f4d2:	cmp	r3, #3
    f4d4:	bhi.w	1011e <_dtoa_r+0xdf6>
    f4d8:	tbh	[pc, r3, lsl #1]
    f4dc:	.word	0x0224032b
    f4e0:	.word	0x04500336
    f4e4:	ldr	r3, [pc, #272]	; (f5f8 <_dtoa_r+0x2d0>)
    f4e6:	ldr	r2, [pc, #284]	; (f604 <_dtoa_r+0x2dc>)
    f4e8:	ubfx	r0, r4, #0, #20
    f4ec:	cmp	r0, #0
    f4ee:	ite	ne
    f4f0:	movne	r0, r3
    f4f2:	moveq	r0, r2
    f4f4:	b.n	f3b2 <_dtoa_r+0x8a>
    f4f6:	ubfx	r3, fp, #0, #20
    f4fa:	orr.w	r1, r3, #1069547520	; 0x3fc00000
    f4fe:	subw	r4, r5, #1023	; 0x3ff
    f502:	mov	r0, sl
    f504:	str.w	r8, [sp, #60]	; 0x3c
    f508:	orr.w	r1, r1, #3145728	; 0x300000
    f50c:	ldr	r5, [sp, #96]	; 0x60
    f50e:	b.n	f41e <_dtoa_r+0xf6>
    f510:	ldr	r0, [pc, #244]	; (f608 <_dtoa_r+0x2e0>)
    f512:	b.n	f39a <_dtoa_r+0x72>
    f514:	adds	r3, r0, #3
    f516:	b.n	f3c4 <_dtoa_r+0x9c>
    f518:	movs	r1, #0
    f51a:	str.w	r1, [r9, #68]	; 0x44
    f51e:	mov	r0, r9
    f520:	mov	r4, r1
    f522:	str	r1, [sp, #0]
    f524:	bl	eb1c <_Balloc>
    f528:	mov.w	r3, #4294967295
    f52c:	str	r3, [sp, #32]
    f52e:	str	r3, [sp, #56]	; 0x38
    f530:	movs	r3, #1
    f532:	str	r0, [sp, #36]	; 0x24
    f534:	str.w	r0, [r9, #64]	; 0x40
    f538:	str	r4, [sp, #20]
    f53a:	str	r3, [sp, #44]	; 0x2c
    f53c:	ldr	r3, [sp, #100]	; 0x64
    f53e:	cmp	r3, #0
    f540:	blt.w	f6e4 <_dtoa_r+0x3bc>
    f544:	ldr	r2, [sp, #16]
    f546:	cmp	r2, #14
    f548:	bgt.w	f6e4 <_dtoa_r+0x3bc>
    f54c:	ldr	r3, [pc, #176]	; (f600 <_dtoa_r+0x2d8>)
    f54e:	add.w	r3, r3, r2, lsl #3
    f552:	vldr	d7, [r3]
    f556:	ldr	r3, [sp, #20]
    f558:	cmp	r3, #0
    f55a:	vstr	d7, [sp]
    f55e:	blt.w	fb5e <_dtoa_r+0x836>
    f562:	mov	r6, sl
    f564:	mov	r7, fp
    f566:	ldrd	sl, fp, [sp]
    f56a:	mov	r0, r6
    f56c:	mov	r2, sl
    f56e:	mov	r3, fp
    f570:	mov	r1, r7
    f572:	bl	d124 <__aeabi_ddiv>
    f576:	bl	d430 <__aeabi_d2iz>
    f57a:	mov	r4, r0
    f57c:	bl	ce04 <__aeabi_i2d>
    f580:	mov	r2, sl
    f582:	mov	r3, fp
    f584:	bl	ced0 <__aeabi_dmul>
    f588:	mov	r3, r1
    f58a:	mov	r2, r0
    f58c:	mov	r1, r7
    f58e:	mov	r0, r6
    f590:	bl	cb68 <__aeabi_dsub>
    f594:	ldr	r5, [sp, #36]	; 0x24
    f596:	add.w	r3, r4, #48	; 0x30
    f59a:	strb	r3, [r5, #0]
    f59c:	ldr	r3, [sp, #32]
    f59e:	cmp	r3, #1
    f5a0:	mov	r6, r0
    f5a2:	mov	r7, r1
    f5a4:	add.w	r5, r5, #1
    f5a8:	beq.n	f66e <_dtoa_r+0x346>
    f5aa:	movs	r2, #0
    f5ac:	ldr	r3, [pc, #92]	; (f60c <_dtoa_r+0x2e4>)
    f5ae:	bl	ced0 <__aeabi_dmul>
    f5b2:	movs	r2, #0
    f5b4:	movs	r3, #0
    f5b6:	mov	r6, r0
    f5b8:	mov	r7, r1
    f5ba:	bl	d3a0 <__aeabi_dcmpeq>
    f5be:	cmp	r0, #0
    f5c0:	bne.n	f6be <_dtoa_r+0x396>
    f5c2:	str.w	r9, [sp, #20]
    f5c6:	ldr.w	sl, [sp, #32]
    f5ca:	ldr.w	fp, [sp, #36]	; 0x24
    f5ce:	ldrd	r8, r9, [sp]
    f5d2:	b.n	f626 <_dtoa_r+0x2fe>
    f5d4:	nop.w
    f5d8:	.word	0x636f4361
    f5dc:	.word	0x3fd287a7
    f5e0:	.word	0x8b60c8b3
    f5e4:	.word	0x3fc68a28
    f5e8:	.word	0x509f79fb
    f5ec:	.word	0x3fd34413
    f5f0:	.word	0x7ff00000
    f5f4:	.word	0x00012295
    f5f8:	.word	0x00012290
    f5fc:	.word	0x3ff80000
    f600:	.word	0x00012188
    f604:	.word	0x00012284
    f608:	.word	0x00012294
    f60c:	.word	0x40240000
    f610:	bl	ced0 <__aeabi_dmul>
    f614:	movs	r2, #0
    f616:	movs	r3, #0
    f618:	mov	r6, r0
    f61a:	mov	r7, r1
    f61c:	bl	d3a0 <__aeabi_dcmpeq>
    f620:	cmp	r0, #0
    f622:	bne.w	fd82 <_dtoa_r+0xa5a>
    f626:	mov	r2, r8
    f628:	mov	r3, r9
    f62a:	mov	r0, r6
    f62c:	mov	r1, r7
    f62e:	bl	d124 <__aeabi_ddiv>
    f632:	bl	d430 <__aeabi_d2iz>
    f636:	mov	r4, r0
    f638:	bl	ce04 <__aeabi_i2d>
    f63c:	mov	r2, r8
    f63e:	mov	r3, r9
    f640:	bl	ced0 <__aeabi_dmul>
    f644:	mov	r2, r0
    f646:	mov	r3, r1
    f648:	mov	r0, r6
    f64a:	mov	r1, r7
    f64c:	bl	cb68 <__aeabi_dsub>
    f650:	add.w	lr, r4, #48	; 0x30
    f654:	strb.w	lr, [r5], #1
    f658:	rsb	lr, fp, r5
    f65c:	cmp	lr, sl
    f65e:	mov	r6, r0
    f660:	mov	r7, r1
    f662:	mov.w	r2, #0
    f666:	ldr	r3, [pc, #696]	; (f920 <_dtoa_r+0x5f8>)
    f668:	bne.n	f610 <_dtoa_r+0x2e8>
    f66a:	ldr.w	r9, [sp, #20]
    f66e:	mov	r2, r6
    f670:	mov	r3, r7
    f672:	mov	r0, r6
    f674:	mov	r1, r7
    f676:	bl	cb6c <__adddf3>
    f67a:	mov	r6, r0
    f67c:	mov	r7, r1
    f67e:	mov	r2, r0
    f680:	mov	r3, r1
    f682:	ldrd	r0, r1, [sp]
    f686:	bl	d3b4 <__aeabi_dcmplt>
    f68a:	cbnz	r0, f69e <_dtoa_r+0x376>
    f68c:	mov	r2, r6
    f68e:	mov	r3, r7
    f690:	ldrd	r0, r1, [sp]
    f694:	bl	d3a0 <__aeabi_dcmpeq>
    f698:	cbz	r0, f6be <_dtoa_r+0x396>
    f69a:	lsls	r3, r4, #31
    f69c:	bpl.n	f6be <_dtoa_r+0x396>
    f69e:	ldrb.w	r4, [r5, #-1]
    f6a2:	ldr	r2, [sp, #36]	; 0x24
    f6a4:	subs	r3, r5, #1
    f6a6:	b.n	f6b2 <_dtoa_r+0x38a>
    f6a8:	cmp	r2, r3
    f6aa:	beq.w	fea6 <_dtoa_r+0xb7e>
    f6ae:	ldrb.w	r4, [r3, #-1]!
    f6b2:	cmp	r4, #57	; 0x39
    f6b4:	add.w	r5, r3, #1
    f6b8:	beq.n	f6a8 <_dtoa_r+0x380>
    f6ba:	adds	r4, #1
    f6bc:	strb	r4, [r3, #0]
    f6be:	ldr	r1, [sp, #40]	; 0x28
    f6c0:	mov	r0, r9
    f6c2:	bl	eb68 <_Bfree>
    f6c6:	movs	r2, #0
    f6c8:	ldr	r3, [sp, #16]
    f6ca:	strb	r2, [r5, #0]
    f6cc:	ldr	r2, [sp, #12]
    f6ce:	adds	r3, #1
    f6d0:	str	r3, [r2, #0]
    f6d2:	ldr	r3, [sp, #148]	; 0x94
    f6d4:	cmp	r3, #0
    f6d6:	beq.w	fe10 <_dtoa_r+0xae8>
    f6da:	ldr	r0, [sp, #36]	; 0x24
    f6dc:	str	r5, [r3, #0]
    f6de:	add	sp, #108	; 0x6c
    f6e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f6e4:	ldr	r2, [sp, #44]	; 0x2c
    f6e6:	cmp	r2, #0
    f6e8:	beq.w	f908 <_dtoa_r+0x5e0>
    f6ec:	ldr	r2, [sp, #0]
    f6ee:	cmp	r2, #1
    f6f0:	ble.w	fba2 <_dtoa_r+0x87a>
    f6f4:	ldr	r3, [sp, #32]
    f6f6:	ldr	r2, [sp, #24]
    f6f8:	subs	r7, r3, #1
    f6fa:	cmp	r2, r7
    f6fc:	blt.w	fe16 <_dtoa_r+0xaee>
    f700:	subs	r7, r2, r7
    f702:	ldr	r3, [sp, #32]
    f704:	cmp	r3, #0
    f706:	blt.w	1000a <_dtoa_r+0xce2>
    f70a:	ldr	r5, [sp, #28]
    f70c:	ldr	r3, [sp, #32]
    f70e:	ldr	r2, [sp, #28]
    f710:	movs	r1, #1
    f712:	add	r2, r3
    f714:	mov	r0, r9
    f716:	str	r2, [sp, #28]
    f718:	add	r8, r3
    f71a:	bl	ec98 <__i2b>
    f71e:	mov	r6, r0
    f720:	cbz	r5, f73c <_dtoa_r+0x414>
    f722:	cmp.w	r8, #0
    f726:	ble.n	f73c <_dtoa_r+0x414>
    f728:	cmp	r5, r8
    f72a:	ldr	r2, [sp, #28]
    f72c:	mov	r3, r5
    f72e:	it	ge
    f730:	movge	r3, r8
    f732:	subs	r2, r2, r3
    f734:	str	r2, [sp, #28]
    f736:	subs	r5, r5, r3
    f738:	rsb	r8, r3, r8
    f73c:	ldr	r3, [sp, #24]
    f73e:	cmp	r3, #0
    f740:	ble.w	fd2e <_dtoa_r+0xa06>
    f744:	ldr	r2, [sp, #44]	; 0x2c
    f746:	cmp	r2, #0
    f748:	beq.w	fb50 <_dtoa_r+0x828>
    f74c:	cmp	r7, #0
    f74e:	beq.w	fb50 <_dtoa_r+0x828>
    f752:	mov	r1, r6
    f754:	mov	r2, r7
    f756:	mov	r0, r9
    f758:	bl	eddc <__pow5mult>
    f75c:	ldr	r2, [sp, #40]	; 0x28
    f75e:	mov	r1, r0
    f760:	mov	r6, r0
    f762:	mov	r0, r9
    f764:	bl	ecac <__multiply>
    f768:	ldr	r1, [sp, #40]	; 0x28
    f76a:	mov	r4, r0
    f76c:	mov	r0, r9
    f76e:	bl	eb68 <_Bfree>
    f772:	ldr	r3, [sp, #24]
    f774:	subs	r3, r3, r7
    f776:	str	r3, [sp, #24]
    f778:	bne.w	fb4e <_dtoa_r+0x826>
    f77c:	movs	r1, #1
    f77e:	mov	r0, r9
    f780:	bl	ec98 <__i2b>
    f784:	ldr	r3, [sp, #48]	; 0x30
    f786:	str	r0, [sp, #24]
    f788:	cmp	r3, #0
    f78a:	beq.w	fbb8 <_dtoa_r+0x890>
    f78e:	mov	r1, r0
    f790:	mov	r2, r3
    f792:	mov	r0, r9
    f794:	bl	eddc <__pow5mult>
    f798:	ldr	r3, [sp, #0]
    f79a:	str	r0, [sp, #24]
    f79c:	cmp	r3, #1
    f79e:	ble.w	fd88 <_dtoa_r+0xa60>
    f7a2:	movs	r7, #0
    f7a4:	ldr	r2, [sp, #24]
    f7a6:	ldr	r3, [r2, #16]
    f7a8:	add.w	r3, r2, r3, lsl #2
    f7ac:	ldr	r0, [r3, #16]
    f7ae:	bl	ebfc <__hi0bits>
    f7b2:	rsb	r0, r0, #32
    f7b6:	add	r0, r8
    f7b8:	ands.w	r0, r0, #31
    f7bc:	beq.w	fbb4 <_dtoa_r+0x88c>
    f7c0:	rsb	r3, r0, #32
    f7c4:	cmp	r3, #4
    f7c6:	ble.w	10144 <_dtoa_r+0xe1c>
    f7ca:	rsb	r0, r0, #28
    f7ce:	ldr	r3, [sp, #28]
    f7d0:	add	r3, r0
    f7d2:	str	r3, [sp, #28]
    f7d4:	add	r5, r0
    f7d6:	add	r8, r0
    f7d8:	ldr	r3, [sp, #28]
    f7da:	cmp	r3, #0
    f7dc:	ble.n	f7ea <_dtoa_r+0x4c2>
    f7de:	mov	r1, r4
    f7e0:	mov	r2, r3
    f7e2:	mov	r0, r9
    f7e4:	bl	ee7c <__lshift>
    f7e8:	mov	r4, r0
    f7ea:	cmp.w	r8, #0
    f7ee:	ble.n	f7fc <_dtoa_r+0x4d4>
    f7f0:	mov	r2, r8
    f7f2:	ldr	r1, [sp, #24]
    f7f4:	mov	r0, r9
    f7f6:	bl	ee7c <__lshift>
    f7fa:	str	r0, [sp, #24]
    f7fc:	ldr	r3, [sp, #52]	; 0x34
    f7fe:	cmp	r3, #0
    f800:	bne.w	fcf8 <_dtoa_r+0x9d0>
    f804:	ldr	r3, [sp, #32]
    f806:	cmp	r3, #0
    f808:	ble.w	fd32 <_dtoa_r+0xa0a>
    f80c:	ldr	r3, [sp, #44]	; 0x2c
    f80e:	cmp	r3, #0
    f810:	bne.w	fbfc <_dtoa_r+0x8d4>
    f814:	ldr.w	fp, [sp, #36]	; 0x24
    f818:	ldr	r7, [sp, #32]
    f81a:	ldr.w	r8, [sp, #24]
    f81e:	mov	r5, fp
    f820:	b.n	f828 <_dtoa_r+0x500>
    f822:	bl	eb7c <__multadd>
    f826:	mov	r4, r0
    f828:	mov	r1, r8
    f82a:	mov	r0, r4
    f82c:	bl	f200 <quorem>
    f830:	add.w	sl, r0, #48	; 0x30
    f834:	strb.w	sl, [r5], #1
    f838:	rsb	r3, fp, r5
    f83c:	cmp	r3, r7
    f83e:	mov.w	r2, #10
    f842:	mov.w	r3, #0
    f846:	mov	r1, r4
    f848:	mov	r0, r9
    f84a:	blt.n	f822 <_dtoa_r+0x4fa>
    f84c:	ldr	r3, [sp, #36]	; 0x24
    f84e:	ldr	r2, [sp, #32]
    f850:	cmp	r2, #1
    f852:	ite	ge
    f854:	addge	r3, r3, r2
    f856:	addlt	r3, #1
    f858:	mov	r5, r3
    f85a:	mov.w	fp, #0
    f85e:	mov	r1, r4
    f860:	movs	r2, #1
    f862:	mov	r0, r9
    f864:	bl	ee7c <__lshift>
    f868:	ldr	r1, [sp, #24]
    f86a:	str	r0, [sp, #40]	; 0x28
    f86c:	bl	ef2c <__mcmp>
    f870:	cmp	r0, #0
    f872:	ble.w	fe80 <_dtoa_r+0xb58>
    f876:	ldrb.w	r2, [r5, #-1]
    f87a:	ldr	r1, [sp, #36]	; 0x24
    f87c:	subs	r3, r5, #1
    f87e:	b.n	f88a <_dtoa_r+0x562>
    f880:	cmp	r3, r1
    f882:	beq.w	fd6e <_dtoa_r+0xa46>
    f886:	ldrb.w	r2, [r3, #-1]!
    f88a:	cmp	r2, #57	; 0x39
    f88c:	add.w	r5, r3, #1
    f890:	beq.n	f880 <_dtoa_r+0x558>
    f892:	adds	r2, #1
    f894:	strb	r2, [r3, #0]
    f896:	ldr	r1, [sp, #24]
    f898:	mov	r0, r9
    f89a:	bl	eb68 <_Bfree>
    f89e:	cmp	r6, #0
    f8a0:	beq.w	f6be <_dtoa_r+0x396>
    f8a4:	cmp.w	fp, #0
    f8a8:	beq.n	f8b6 <_dtoa_r+0x58e>
    f8aa:	cmp	fp, r6
    f8ac:	beq.n	f8b6 <_dtoa_r+0x58e>
    f8ae:	mov	r1, fp
    f8b0:	mov	r0, r9
    f8b2:	bl	eb68 <_Bfree>
    f8b6:	mov	r1, r6
    f8b8:	mov	r0, r9
    f8ba:	bl	eb68 <_Bfree>
    f8be:	b.n	f6be <_dtoa_r+0x396>
    f8c0:	movs	r3, #1
    f8c2:	str	r3, [sp, #52]	; 0x34
    f8c4:	b.n	f49e <_dtoa_r+0x176>
    f8c6:	ldr.w	r8, [sp, #16]
    f8ca:	mov	r0, r8
    f8cc:	bl	ce04 <__aeabi_i2d>
    f8d0:	mov	r2, r0
    f8d2:	mov	r3, r1
    f8d4:	mov	r0, r6
    f8d6:	mov	r1, r7
    f8d8:	bl	d3a0 <__aeabi_dcmpeq>
    f8dc:	cmp	r0, #0
    f8de:	bne.w	f476 <_dtoa_r+0x14e>
    f8e2:	add.w	r3, r8, #4294967295
    f8e6:	str	r3, [sp, #16]
    f8e8:	b.n	f476 <_dtoa_r+0x14e>
    f8ea:	ldr	r2, [sp, #28]
    f8ec:	ldr	r3, [sp, #16]
    f8ee:	subs	r2, r2, r3
    f8f0:	negs	r3, r3
    f8f2:	str	r3, [sp, #24]
    f8f4:	movs	r3, #0
    f8f6:	str	r2, [sp, #28]
    f8f8:	str	r3, [sp, #48]	; 0x30
    f8fa:	b.n	f4bc <_dtoa_r+0x194>
    f8fc:	rsb	r3, r8, #0
    f900:	str	r3, [sp, #28]
    f902:	mov.w	r8, #0
    f906:	b.n	f4ac <_dtoa_r+0x184>
    f908:	ldr	r7, [sp, #24]
    f90a:	ldr	r5, [sp, #28]
    f90c:	ldr	r6, [sp, #44]	; 0x2c
    f90e:	b.n	f720 <_dtoa_r+0x3f8>
    f910:	rsb	r4, r3, #32
    f914:	lsl.w	r0, sl, r4
    f918:	b.n	f410 <_dtoa_r+0xe8>
    f91a:	str	r0, [sp, #52]	; 0x34
    f91c:	b.n	f49e <_dtoa_r+0x176>
    f91e:	nop
    f920:	.word	0x40240000
    f924:	movs	r3, #0
    f926:	str	r3, [sp, #44]	; 0x2c
    f928:	ldr	r3, [sp, #16]
    f92a:	ldr	r2, [sp, #20]
    f92c:	add	r3, r2
    f92e:	str	r3, [sp, #56]	; 0x38
    f930:	adds	r3, #1
    f932:	cmp	r3, #0
    f934:	str	r3, [sp, #32]
    f936:	ble.w	fe34 <_dtoa_r+0xb0c>
    f93a:	ldr	r4, [sp, #32]
    f93c:	mov	r5, r4
    f93e:	movs	r1, #0
    f940:	cmp	r5, #23
    f942:	str.w	r1, [r9, #68]	; 0x44
    f946:	bls.n	f960 <_dtoa_r+0x638>
    f948:	movs	r2, #1
    f94a:	movs	r3, #4
    f94c:	lsls	r3, r3, #1
    f94e:	add.w	r0, r3, #20
    f952:	cmp	r0, r5
    f954:	mov	r1, r2
    f956:	add.w	r2, r2, #1
    f95a:	bls.n	f94c <_dtoa_r+0x624>
    f95c:	str.w	r1, [r9, #68]	; 0x44
    f960:	mov	r0, r9
    f962:	bl	eb1c <_Balloc>
    f966:	cmp	r4, #14
    f968:	str	r0, [sp, #36]	; 0x24
    f96a:	str.w	r0, [r9, #64]	; 0x40
    f96e:	bhi.w	f53c <_dtoa_r+0x214>
    f972:	cmp	r6, #0
    f974:	beq.w	f53c <_dtoa_r+0x214>
    f978:	ldr	r1, [sp, #16]
    f97a:	cmp	r1, #0
    f97c:	strd	sl, fp, [sp, #64]	; 0x40
    f980:	ble.w	feb8 <_dtoa_r+0xb90>
    f984:	ldr	r3, [pc, #576]	; (fbc8 <_dtoa_r+0x8a0>)
    f986:	and.w	r2, r1, #15
    f98a:	asrs	r6, r1, #4
    f98c:	add.w	r3, r3, r2, lsl #3
    f990:	lsls	r0, r6, #27
    f992:	ldrd	r4, r5, [r3]
    f996:	bpl.w	fe26 <_dtoa_r+0xafe>
    f99a:	ldr	r3, [pc, #560]	; (fbcc <_dtoa_r+0x8a4>)
    f99c:	mov	r0, sl
    f99e:	mov	r1, fp
    f9a0:	ldrd	r2, r3, [r3, #32]
    f9a4:	bl	d124 <__aeabi_ddiv>
    f9a8:	strd	r0, r1, [sp, #72]	; 0x48
    f9ac:	and.w	r6, r6, #15
    f9b0:	mov.w	sl, #3
    f9b4:	cbz	r6, f9d8 <_dtoa_r+0x6b0>
    f9b6:	ldr	r7, [pc, #532]	; (fbcc <_dtoa_r+0x8a4>)
    f9b8:	lsls	r1, r6, #31
    f9ba:	bpl.n	f9d0 <_dtoa_r+0x6a8>
    f9bc:	mov	r0, r4
    f9be:	mov	r1, r5
    f9c0:	ldrd	r2, r3, [r7]
    f9c4:	bl	ced0 <__aeabi_dmul>
    f9c8:	add.w	sl, sl, #1
    f9cc:	mov	r4, r0
    f9ce:	mov	r5, r1
    f9d0:	asrs	r6, r6, #1
    f9d2:	add.w	r7, r7, #8
    f9d6:	bne.n	f9b8 <_dtoa_r+0x690>
    f9d8:	mov	r2, r4
    f9da:	mov	r3, r5
    f9dc:	ldrd	r0, r1, [sp, #72]	; 0x48
    f9e0:	bl	d124 <__aeabi_ddiv>
    f9e4:	mov	r6, r0
    f9e6:	mov	r7, r1
    f9e8:	ldr	r3, [sp, #52]	; 0x34
    f9ea:	cbz	r3, f9fe <_dtoa_r+0x6d6>
    f9ec:	movs	r2, #0
    f9ee:	ldr	r3, [pc, #480]	; (fbd0 <_dtoa_r+0x8a8>)
    f9f0:	mov	r0, r6
    f9f2:	mov	r1, r7
    f9f4:	bl	d3b4 <__aeabi_dcmplt>
    f9f8:	cmp	r0, #0
    f9fa:	bne.w	10032 <_dtoa_r+0xd0a>
    f9fe:	mov	r0, sl
    fa00:	bl	ce04 <__aeabi_i2d>
    fa04:	mov	r2, r6
    fa06:	mov	r3, r7
    fa08:	bl	ced0 <__aeabi_dmul>
    fa0c:	ldr	r3, [pc, #452]	; (fbd4 <_dtoa_r+0x8ac>)
    fa0e:	movs	r2, #0
    fa10:	bl	cb6c <__adddf3>
    fa14:	ldr	r3, [sp, #32]
    fa16:	mov	r4, r0
    fa18:	sub.w	r5, r1, #54525952	; 0x3400000
    fa1c:	cmp	r3, #0
    fa1e:	beq.w	fdd8 <_dtoa_r+0xab0>
    fa22:	ldr	r3, [sp, #16]
    fa24:	str	r3, [sp, #88]	; 0x58
    fa26:	ldr	r3, [sp, #32]
    fa28:	str	r3, [sp, #72]	; 0x48
    fa2a:	ldr	r3, [sp, #44]	; 0x2c
    fa2c:	cmp	r3, #0
    fa2e:	beq.w	ff5a <_dtoa_r+0xc32>
    fa32:	ldr	r2, [sp, #72]	; 0x48
    fa34:	ldr	r3, [pc, #400]	; (fbc8 <_dtoa_r+0x8a0>)
    fa36:	ldr	r1, [pc, #416]	; (fbd8 <_dtoa_r+0x8b0>)
    fa38:	add.w	r3, r3, r2, lsl #3
    fa3c:	ldrd	r2, r3, [r3, #-8]
    fa40:	movs	r0, #0
    fa42:	bl	d124 <__aeabi_ddiv>
    fa46:	mov	r2, r4
    fa48:	mov	r3, r5
    fa4a:	bl	cb68 <__aeabi_dsub>
    fa4e:	mov	sl, r0
    fa50:	mov	fp, r1
    fa52:	mov	r0, r6
    fa54:	mov	r1, r7
    fa56:	bl	d430 <__aeabi_d2iz>
    fa5a:	mov	r4, r0
    fa5c:	bl	ce04 <__aeabi_i2d>
    fa60:	mov	r2, r0
    fa62:	mov	r3, r1
    fa64:	mov	r0, r6
    fa66:	mov	r1, r7
    fa68:	bl	cb68 <__aeabi_dsub>
    fa6c:	adds	r4, #48	; 0x30
    fa6e:	ldr	r5, [sp, #36]	; 0x24
    fa70:	uxtb	r4, r4
    fa72:	mov	r6, r0
    fa74:	mov	r7, r1
    fa76:	strb	r4, [r5, #0]
    fa78:	mov	r2, r0
    fa7a:	mov	r3, r1
    fa7c:	mov	r0, sl
    fa7e:	mov	r1, fp
    fa80:	adds	r5, #1
    fa82:	bl	d3f0 <__aeabi_dcmpgt>
    fa86:	cmp	r0, #0
    fa88:	bne.n	fb2c <_dtoa_r+0x804>
    fa8a:	mov	r2, r6
    fa8c:	mov	r3, r7
    fa8e:	movs	r0, #0
    fa90:	ldr	r1, [pc, #316]	; (fbd0 <_dtoa_r+0x8a8>)
    fa92:	bl	cb68 <__aeabi_dsub>
    fa96:	mov	r2, r0
    fa98:	mov	r3, r1
    fa9a:	mov	r0, sl
    fa9c:	mov	r1, fp
    fa9e:	bl	d3f0 <__aeabi_dcmpgt>
    faa2:	cmp	r0, #0
    faa4:	bne.w	100b8 <_dtoa_r+0xd90>
    faa8:	ldr	r2, [sp, #72]	; 0x48
    faaa:	cmp	r2, #1
    faac:	ble.w	fe9e <_dtoa_r+0xb76>
    fab0:	ldr	r3, [sp, #72]	; 0x48
    fab2:	ldr	r2, [sp, #36]	; 0x24
    fab4:	str.w	r8, [sp, #72]	; 0x48
    fab8:	add	r3, r2
    faba:	mov	r8, r3
    fabc:	b.n	fada <_dtoa_r+0x7b2>
    fabe:	movs	r0, #0
    fac0:	ldr	r1, [pc, #268]	; (fbd0 <_dtoa_r+0x8a8>)
    fac2:	bl	cb68 <__aeabi_dsub>
    fac6:	mov	r2, sl
    fac8:	mov	r3, fp
    faca:	bl	d3b4 <__aeabi_dcmplt>
    face:	cmp	r0, #0
    fad0:	bne.w	100b8 <_dtoa_r+0xd90>
    fad4:	cmp	r5, r8
    fad6:	beq.w	fe9a <_dtoa_r+0xb72>
    fada:	mov	r0, sl
    fadc:	mov	r1, fp
    fade:	movs	r2, #0
    fae0:	ldr	r3, [pc, #248]	; (fbdc <_dtoa_r+0x8b4>)
    fae2:	bl	ced0 <__aeabi_dmul>
    fae6:	movs	r2, #0
    fae8:	ldr	r3, [pc, #240]	; (fbdc <_dtoa_r+0x8b4>)
    faea:	mov	sl, r0
    faec:	mov	fp, r1
    faee:	mov	r0, r6
    faf0:	mov	r1, r7
    faf2:	bl	ced0 <__aeabi_dmul>
    faf6:	mov	r7, r1
    faf8:	mov	r6, r0
    fafa:	bl	d430 <__aeabi_d2iz>
    fafe:	mov	r4, r0
    fb00:	bl	ce04 <__aeabi_i2d>
    fb04:	mov	r2, r0
    fb06:	mov	r3, r1
    fb08:	mov	r0, r6
    fb0a:	mov	r1, r7
    fb0c:	bl	cb68 <__aeabi_dsub>
    fb10:	adds	r4, #48	; 0x30
    fb12:	uxtb	r4, r4
    fb14:	mov	r2, sl
    fb16:	mov	r3, fp
    fb18:	strb.w	r4, [r5], #1
    fb1c:	mov	r6, r0
    fb1e:	mov	r7, r1
    fb20:	bl	d3b4 <__aeabi_dcmplt>
    fb24:	mov	r2, r6
    fb26:	mov	r3, r7
    fb28:	cmp	r0, #0
    fb2a:	beq.n	fabe <_dtoa_r+0x796>
    fb2c:	ldr	r3, [sp, #88]	; 0x58
    fb2e:	str	r3, [sp, #16]
    fb30:	b.n	f6be <_dtoa_r+0x396>
    fb32:	movs	r3, #0
    fb34:	str	r3, [sp, #44]	; 0x2c
    fb36:	ldr	r3, [sp, #20]
    fb38:	cmp	r3, #0
    fb3a:	ble.w	fe3e <_dtoa_r+0xb16>
    fb3e:	mov	r5, r3
    fb40:	mov	r4, r3
    fb42:	str	r3, [sp, #56]	; 0x38
    fb44:	str	r3, [sp, #32]
    fb46:	b.n	f93e <_dtoa_r+0x616>
    fb48:	movs	r3, #1
    fb4a:	str	r3, [sp, #44]	; 0x2c
    fb4c:	b.n	fb36 <_dtoa_r+0x80e>
    fb4e:	str	r4, [sp, #40]	; 0x28
    fb50:	ldr	r2, [sp, #24]
    fb52:	ldr	r1, [sp, #40]	; 0x28
    fb54:	mov	r0, r9
    fb56:	bl	eddc <__pow5mult>
    fb5a:	mov	r4, r0
    fb5c:	b.n	f77c <_dtoa_r+0x454>
    fb5e:	ldr	r3, [sp, #32]
    fb60:	cmp	r3, #0
    fb62:	bgt.w	f562 <_dtoa_r+0x23a>
    fb66:	bne.w	fe08 <_dtoa_r+0xae0>
    fb6a:	movs	r2, #0
    fb6c:	ldr	r3, [pc, #112]	; (fbe0 <_dtoa_r+0x8b8>)
    fb6e:	ldrd	r0, r1, [sp]
    fb72:	bl	ced0 <__aeabi_dmul>
    fb76:	mov	r3, fp
    fb78:	mov	r2, sl
    fb7a:	bl	d3dc <__aeabi_dcmpge>
    fb7e:	ldr	r3, [sp, #32]
    fb80:	str	r3, [sp, #24]
    fb82:	mov	r6, r3
    fb84:	cmp	r0, #0
    fb86:	beq.w	fd5e <_dtoa_r+0xa36>
    fb8a:	ldr	r3, [sp, #20]
    fb8c:	ldr	r5, [sp, #36]	; 0x24
    fb8e:	mvns	r3, r3
    fb90:	str	r3, [sp, #16]
    fb92:	ldr	r1, [sp, #24]
    fb94:	mov	r0, r9
    fb96:	bl	eb68 <_Bfree>
    fb9a:	cmp	r6, #0
    fb9c:	beq.w	f6be <_dtoa_r+0x396>
    fba0:	b.n	f8b6 <_dtoa_r+0x58e>
    fba2:	ldr	r2, [sp, #60]	; 0x3c
    fba4:	cmp	r2, #0
    fba6:	beq.w	1001a <_dtoa_r+0xcf2>
    fbaa:	addw	r3, r3, #1075	; 0x433
    fbae:	ldr	r7, [sp, #24]
    fbb0:	ldr	r5, [sp, #28]
    fbb2:	b.n	f70e <_dtoa_r+0x3e6>
    fbb4:	movs	r0, #28
    fbb6:	b.n	f7ce <_dtoa_r+0x4a6>
    fbb8:	ldr	r3, [sp, #0]
    fbba:	cmp	r3, #1
    fbbc:	ble.w	100c0 <_dtoa_r+0xd98>
    fbc0:	ldr	r7, [sp, #48]	; 0x30
    fbc2:	movs	r0, #1
    fbc4:	b.n	f7b6 <_dtoa_r+0x48e>
    fbc6:	nop
    fbc8:	.word	0x00012188
    fbcc:	.word	0x00012250
    fbd0:	.word	0x3ff00000
    fbd4:	.word	0x401c0000
    fbd8:	.word	0x3fe00000
    fbdc:	.word	0x40240000
    fbe0:	.word	0x40140000
    fbe4:	mov	r1, r6
    fbe6:	movs	r3, #0
    fbe8:	movs	r2, #10
    fbea:	mov	r0, r9
    fbec:	bl	eb7c <__multadd>
    fbf0:	ldr	r3, [sp, #56]	; 0x38
    fbf2:	cmp	r3, #0
    fbf4:	mov	r6, r0
    fbf6:	ble.w	10114 <_dtoa_r+0xdec>
    fbfa:	str	r3, [sp, #32]
    fbfc:	cmp	r5, #0
    fbfe:	ble.n	fc0c <_dtoa_r+0x8e4>
    fc00:	mov	r1, r6
    fc02:	mov	r2, r5
    fc04:	mov	r0, r9
    fc06:	bl	ee7c <__lshift>
    fc0a:	mov	r6, r0
    fc0c:	cmp	r7, #0
    fc0e:	bne.w	ff0a <_dtoa_r+0xbe2>
    fc12:	mov	r8, r6
    fc14:	ldr	r3, [sp, #32]
    fc16:	ldr	r2, [sp, #36]	; 0x24
    fc18:	subs	r3, #1
    fc1a:	adds	r3, r2, r3
    fc1c:	str	r3, [sp, #32]
    fc1e:	and.w	r3, sl, #1
    fc22:	str	r3, [sp, #40]	; 0x28
    fc24:	mov	r7, r2
    fc26:	ldr.w	fp, [sp, #24]
    fc2a:	mov	r0, r4
    fc2c:	mov	r1, fp
    fc2e:	bl	f200 <quorem>
    fc32:	mov	r1, r6
    fc34:	mov	r5, r0
    fc36:	mov	r0, r4
    fc38:	bl	ef2c <__mcmp>
    fc3c:	mov	r2, r8
    fc3e:	mov	r1, fp
    fc40:	mov	sl, r0
    fc42:	mov	r0, r9
    fc44:	bl	ef70 <__mdiff>
    fc48:	ldr	r2, [r0, #12]
    fc4a:	mov	fp, r0
    fc4c:	add.w	r3, r5, #48	; 0x30
    fc50:	cmp	r2, #0
    fc52:	bne.n	fce8 <_dtoa_r+0x9c0>
    fc54:	mov	r1, r0
    fc56:	mov	r0, r4
    fc58:	str	r3, [sp, #28]
    fc5a:	bl	ef2c <__mcmp>
    fc5e:	mov	r1, fp
    fc60:	str	r0, [sp, #20]
    fc62:	mov	r0, r9
    fc64:	bl	eb68 <_Bfree>
    fc68:	ldr	r2, [sp, #20]
    fc6a:	ldr	r3, [sp, #28]
    fc6c:	cbnz	r2, fc7a <_dtoa_r+0x952>
    fc6e:	ldr	r1, [sp, #0]
    fc70:	cbnz	r1, fc7a <_dtoa_r+0x952>
    fc72:	ldr	r1, [sp, #40]	; 0x28
    fc74:	cmp	r1, #0
    fc76:	beq.w	100e4 <_dtoa_r+0xdbc>
    fc7a:	cmp.w	sl, #0
    fc7e:	blt.w	fe48 <_dtoa_r+0xb20>
    fc82:	bne.n	fc90 <_dtoa_r+0x968>
    fc84:	ldr	r1, [sp, #0]
    fc86:	cbnz	r1, fc90 <_dtoa_r+0x968>
    fc88:	ldr	r1, [sp, #40]	; 0x28
    fc8a:	cmp	r1, #0
    fc8c:	beq.w	fe48 <_dtoa_r+0xb20>
    fc90:	cmp	r2, #0
    fc92:	bgt.w	ff32 <_dtoa_r+0xc0a>
    fc96:	ldr	r2, [sp, #32]
    fc98:	strb	r3, [r7, #0]
    fc9a:	add.w	sl, r7, #1
    fc9e:	cmp	r7, r2
    fca0:	mov	r5, sl
    fca2:	beq.w	ff4a <_dtoa_r+0xc22>
    fca6:	mov	r1, r4
    fca8:	movs	r3, #0
    fcaa:	movs	r2, #10
    fcac:	mov	r0, r9
    fcae:	bl	eb7c <__multadd>
    fcb2:	cmp	r6, r8
    fcb4:	mov	r4, r0
    fcb6:	mov	r1, r6
    fcb8:	mov.w	r3, #0
    fcbc:	mov.w	r2, #10
    fcc0:	mov	r0, r9
    fcc2:	beq.n	fcdc <_dtoa_r+0x9b4>
    fcc4:	bl	eb7c <__multadd>
    fcc8:	mov	r1, r8
    fcca:	mov	r6, r0
    fccc:	movs	r3, #0
    fcce:	movs	r2, #10
    fcd0:	mov	r0, r9
    fcd2:	bl	eb7c <__multadd>
    fcd6:	mov	r7, sl
    fcd8:	mov	r8, r0
    fcda:	b.n	fc26 <_dtoa_r+0x8fe>
    fcdc:	bl	eb7c <__multadd>
    fce0:	mov	r7, sl
    fce2:	mov	r6, r0
    fce4:	mov	r8, r0
    fce6:	b.n	fc26 <_dtoa_r+0x8fe>
    fce8:	mov	r1, r0
    fcea:	mov	r0, r9
    fcec:	str	r3, [sp, #20]
    fcee:	bl	eb68 <_Bfree>
    fcf2:	movs	r2, #1
    fcf4:	ldr	r3, [sp, #20]
    fcf6:	b.n	fc7a <_dtoa_r+0x952>
    fcf8:	ldr	r1, [sp, #24]
    fcfa:	mov	r0, r4
    fcfc:	bl	ef2c <__mcmp>
    fd00:	cmp	r0, #0
    fd02:	bge.w	f804 <_dtoa_r+0x4dc>
    fd06:	mov	r1, r4
    fd08:	ldr	r4, [sp, #16]
    fd0a:	movs	r3, #0
    fd0c:	subs	r4, #1
    fd0e:	movs	r2, #10
    fd10:	mov	r0, r9
    fd12:	str	r4, [sp, #16]
    fd14:	bl	eb7c <__multadd>
    fd18:	ldr	r3, [sp, #44]	; 0x2c
    fd1a:	mov	r4, r0
    fd1c:	cmp	r3, #0
    fd1e:	bne.w	fbe4 <_dtoa_r+0x8bc>
    fd22:	ldr	r3, [sp, #56]	; 0x38
    fd24:	cmp	r3, #0
    fd26:	ble.w	10104 <_dtoa_r+0xddc>
    fd2a:	str	r3, [sp, #32]
    fd2c:	b.n	f814 <_dtoa_r+0x4ec>
    fd2e:	ldr	r4, [sp, #40]	; 0x28
    fd30:	b.n	f77c <_dtoa_r+0x454>
    fd32:	ldr	r3, [sp, #0]
    fd34:	cmp	r3, #2
    fd36:	ble.w	f80c <_dtoa_r+0x4e4>
    fd3a:	ldr	r3, [sp, #32]
    fd3c:	cmp	r3, #0
    fd3e:	bne.w	1007c <_dtoa_r+0xd54>
    fd42:	ldr	r1, [sp, #24]
    fd44:	movs	r2, #5
    fd46:	mov	r0, r9
    fd48:	bl	eb7c <__multadd>
    fd4c:	mov	r1, r0
    fd4e:	str	r0, [sp, #24]
    fd50:	mov	r0, r4
    fd52:	bl	ef2c <__mcmp>
    fd56:	cmp	r0, #0
    fd58:	str	r4, [sp, #40]	; 0x28
    fd5a:	ble.w	fb8a <_dtoa_r+0x862>
    fd5e:	ldr	r2, [sp, #16]
    fd60:	ldr	r1, [sp, #36]	; 0x24
    fd62:	movs	r3, #49	; 0x31
    fd64:	adds	r2, #1
    fd66:	str	r2, [sp, #16]
    fd68:	strb	r3, [r1, #0]
    fd6a:	adds	r5, r1, #1
    fd6c:	b.n	fb92 <_dtoa_r+0x86a>
    fd6e:	ldr	r2, [sp, #16]
    fd70:	adds	r2, #1
    fd72:	str	r2, [sp, #16]
    fd74:	ldr	r2, [sp, #36]	; 0x24
    fd76:	movs	r3, #49	; 0x31
    fd78:	strb	r3, [r2, #0]
    fd7a:	b.n	f896 <_dtoa_r+0x56e>
    fd7c:	movs	r3, #1
    fd7e:	str	r3, [sp, #44]	; 0x2c
    fd80:	b.n	f928 <_dtoa_r+0x600>
    fd82:	ldr.w	r9, [sp, #20]
    fd86:	b.n	f6be <_dtoa_r+0x396>
    fd88:	cmp.w	sl, #0
    fd8c:	bne.w	f7a2 <_dtoa_r+0x47a>
    fd90:	ubfx	r3, fp, #0, #20
    fd94:	cmp	r3, #0
    fd96:	bne.w	10016 <_dtoa_r+0xcee>
    fd9a:	bic.w	r7, fp, #2147483648	; 0x80000000
    fd9e:	lsrs	r7, r7, #20
    fda0:	lsls	r7, r7, #20
    fda2:	cbz	r7, fdb0 <_dtoa_r+0xa88>
    fda4:	ldr	r3, [sp, #28]
    fda6:	adds	r3, #1
    fda8:	str	r3, [sp, #28]
    fdaa:	add.w	r8, r8, #1
    fdae:	movs	r7, #1
    fdb0:	ldr	r3, [sp, #48]	; 0x30
    fdb2:	movs	r0, #1
    fdb4:	cmp	r3, #0
    fdb6:	beq.w	f7b6 <_dtoa_r+0x48e>
    fdba:	b.n	f7a4 <_dtoa_r+0x47c>
    fdbc:	mov	r0, sl
    fdbe:	bl	ce04 <__aeabi_i2d>
    fdc2:	mov	r2, r6
    fdc4:	mov	r3, r7
    fdc6:	bl	ced0 <__aeabi_dmul>
    fdca:	movs	r2, #0
    fdcc:	ldr	r3, [pc, #764]	; (100cc <_dtoa_r+0xda4>)
    fdce:	bl	cb6c <__adddf3>
    fdd2:	mov	r4, r0
    fdd4:	sub.w	r5, r1, #54525952	; 0x3400000
    fdd8:	mov	r0, r6
    fdda:	mov	r1, r7
    fddc:	movs	r2, #0
    fdde:	ldr	r3, [pc, #752]	; (100d0 <_dtoa_r+0xda8>)
    fde0:	bl	cb68 <__aeabi_dsub>
    fde4:	mov	r2, r4
    fde6:	mov	r3, r5
    fde8:	mov	r6, r0
    fdea:	mov	r7, r1
    fdec:	bl	d3f0 <__aeabi_dcmpgt>
    fdf0:	cmp	r0, #0
    fdf2:	bne.w	ff52 <_dtoa_r+0xc2a>
    fdf6:	mov	r2, r4
    fdf8:	add.w	r3, r5, #2147483648	; 0x80000000
    fdfc:	mov	r0, r6
    fdfe:	mov	r1, r7
    fe00:	bl	d3b4 <__aeabi_dcmplt>
    fe04:	cmp	r0, #0
    fe06:	beq.n	fe9e <_dtoa_r+0xb76>
    fe08:	movs	r3, #0
    fe0a:	str	r3, [sp, #24]
    fe0c:	mov	r6, r3
    fe0e:	b.n	fb8a <_dtoa_r+0x862>
    fe10:	ldr	r0, [sp, #36]	; 0x24
    fe12:	b.w	f39a <_dtoa_r+0x72>
    fe16:	ldr	r3, [sp, #24]
    fe18:	ldr	r2, [sp, #48]	; 0x30
    fe1a:	str	r7, [sp, #24]
    fe1c:	subs	r3, r7, r3
    fe1e:	add	r2, r3
    fe20:	str	r2, [sp, #48]	; 0x30
    fe22:	movs	r7, #0
    fe24:	b.n	f702 <_dtoa_r+0x3da>
    fe26:	vldr	d7, [sp, #64]	; 0x40
    fe2a:	mov.w	sl, #2
    fe2e:	vstr	d7, [sp, #72]	; 0x48
    fe32:	b.n	f9b4 <_dtoa_r+0x68c>
    fe34:	mov	r4, r3
    fe36:	movs	r1, #0
    fe38:	str.w	r1, [r9, #68]	; 0x44
    fe3c:	b.n	f960 <_dtoa_r+0x638>
    fe3e:	movs	r4, #1
    fe40:	str	r4, [sp, #56]	; 0x38
    fe42:	str	r4, [sp, #32]
    fe44:	str	r4, [sp, #20]
    fe46:	b.n	fe36 <_dtoa_r+0xb0e>
    fe48:	cmp	r2, #0
    fe4a:	mov	sl, r3
    fe4c:	ble.n	fe72 <_dtoa_r+0xb4a>
    fe4e:	mov	r1, r4
    fe50:	movs	r2, #1
    fe52:	mov	r0, r9
    fe54:	bl	ee7c <__lshift>
    fe58:	ldr	r1, [sp, #24]
    fe5a:	mov	r4, r0
    fe5c:	bl	ef2c <__mcmp>
    fe60:	cmp	r0, #0
    fe62:	ble.w	100f6 <_dtoa_r+0xdce>
    fe66:	cmp.w	sl, #57	; 0x39
    fe6a:	beq.w	10080 <_dtoa_r+0xd58>
    fe6e:	add.w	sl, r5, #49	; 0x31
    fe72:	mov	fp, r6
    fe74:	strb.w	sl, [r7]
    fe78:	adds	r5, r7, #1
    fe7a:	mov	r6, r8
    fe7c:	str	r4, [sp, #40]	; 0x28
    fe7e:	b.n	f896 <_dtoa_r+0x56e>
    fe80:	bne.n	fe8c <_dtoa_r+0xb64>
    fe82:	tst.w	sl, #1
    fe86:	beq.n	fe8c <_dtoa_r+0xb64>
    fe88:	b.n	f876 <_dtoa_r+0x54e>
    fe8a:	mov	r5, r2
    fe8c:	ldrb.w	r3, [r5, #-1]
    fe90:	cmp	r3, #48	; 0x30
    fe92:	add.w	r2, r5, #4294967295
    fe96:	beq.n	fe8a <_dtoa_r+0xb62>
    fe98:	b.n	f896 <_dtoa_r+0x56e>
    fe9a:	ldr.w	r8, [sp, #72]	; 0x48
    fe9e:	ldrd	sl, fp, [sp, #64]	; 0x40
    fea2:	b.w	f53c <_dtoa_r+0x214>
    fea6:	ldr	r1, [sp, #36]	; 0x24
    fea8:	movs	r2, #48	; 0x30
    feaa:	strb	r2, [r1, #0]
    feac:	ldr	r2, [sp, #16]
    feae:	ldrb.w	r4, [r5, #-1]
    feb2:	adds	r2, #1
    feb4:	str	r2, [sp, #16]
    feb6:	b.n	f6ba <_dtoa_r+0x392>
    feb8:	ldr	r3, [sp, #16]
    feba:	negs	r4, r3
    febc:	cmp	r4, #0
    febe:	beq.w	10028 <_dtoa_r+0xd00>
    fec2:	ldr	r3, [pc, #528]	; (100d4 <_dtoa_r+0xdac>)
    fec4:	and.w	r2, r4, #15
    fec8:	add.w	r3, r3, r2, lsl #3
    fecc:	ldrd	r2, r3, [r3]
    fed0:	ldrd	r0, r1, [sp, #64]	; 0x40
    fed4:	bl	ced0 <__aeabi_dmul>
    fed8:	asrs	r4, r4, #4
    feda:	mov	r6, r0
    fedc:	mov	r7, r1
    fede:	beq.w	1010e <_dtoa_r+0xde6>
    fee2:	ldr	r5, [pc, #500]	; (100d8 <_dtoa_r+0xdb0>)
    fee4:	mov.w	sl, #2
    fee8:	lsls	r2, r4, #31
    feea:	bpl.n	ff00 <_dtoa_r+0xbd8>
    feec:	mov	r0, r6
    feee:	mov	r1, r7
    fef0:	ldrd	r2, r3, [r5]
    fef4:	bl	ced0 <__aeabi_dmul>
    fef8:	add.w	sl, sl, #1
    fefc:	mov	r6, r0
    fefe:	mov	r7, r1
    ff00:	asrs	r4, r4, #1
    ff02:	add.w	r5, r5, #8
    ff06:	bne.n	fee8 <_dtoa_r+0xbc0>
    ff08:	b.n	f9e8 <_dtoa_r+0x6c0>
    ff0a:	ldr	r1, [r6, #4]
    ff0c:	mov	r0, r9
    ff0e:	bl	eb1c <_Balloc>
    ff12:	ldr	r3, [r6, #16]
    ff14:	adds	r2, r3, #2
    ff16:	mov	r5, r0
    ff18:	lsls	r2, r2, #2
    ff1a:	add.w	r1, r6, #12
    ff1e:	adds	r0, #12
    ff20:	bl	b0e0 <memcpy>
    ff24:	mov	r1, r5
    ff26:	movs	r2, #1
    ff28:	mov	r0, r9
    ff2a:	bl	ee7c <__lshift>
    ff2e:	mov	r8, r0
    ff30:	b.n	fc14 <_dtoa_r+0x8ec>
    ff32:	cmp	r3, #57	; 0x39
    ff34:	beq.w	10080 <_dtoa_r+0xd58>
    ff38:	add.w	sl, r3, #1
    ff3c:	mov	fp, r6
    ff3e:	strb.w	sl, [r7]
    ff42:	adds	r5, r7, #1
    ff44:	mov	r6, r8
    ff46:	str	r4, [sp, #40]	; 0x28
    ff48:	b.n	f896 <_dtoa_r+0x56e>
    ff4a:	mov	fp, r6
    ff4c:	mov	sl, r3
    ff4e:	mov	r6, r8
    ff50:	b.n	f85e <_dtoa_r+0x536>
    ff52:	movs	r3, #0
    ff54:	str	r3, [sp, #24]
    ff56:	mov	r6, r3
    ff58:	b.n	fd5e <_dtoa_r+0xa36>
    ff5a:	ldr	r3, [sp, #72]	; 0x48
    ff5c:	ldr	r1, [pc, #372]	; (100d4 <_dtoa_r+0xdac>)
    ff5e:	subs	r2, r3, #1
    ff60:	add.w	r1, r1, r2, lsl #3
    ff64:	mov	r3, r5
    ff66:	str	r2, [sp, #92]	; 0x5c
    ff68:	ldrd	r0, r1, [r1]
    ff6c:	mov	r2, r4
    ff6e:	bl	ced0 <__aeabi_dmul>
    ff72:	strd	r0, r1, [sp, #80]	; 0x50
    ff76:	mov	r1, r7
    ff78:	mov	r0, r6
    ff7a:	bl	d430 <__aeabi_d2iz>
    ff7e:	mov	r4, r0
    ff80:	bl	ce04 <__aeabi_i2d>
    ff84:	mov	r3, r1
    ff86:	mov	r2, r0
    ff88:	mov	r1, r7
    ff8a:	mov	r0, r6
    ff8c:	bl	cb68 <__aeabi_dsub>
    ff90:	ldr	r3, [sp, #72]	; 0x48
    ff92:	mov	r7, r1
    ff94:	ldr	r1, [sp, #36]	; 0x24
    ff96:	adds	r4, #48	; 0x30
    ff98:	cmp	r3, #1
    ff9a:	mov	r6, r0
    ff9c:	strb	r4, [r1, #0]
    ff9e:	add.w	r5, r1, #1
    ffa2:	beq.n	ffe6 <_dtoa_r+0xcbe>
    ffa4:	ldr	r3, [sp, #72]	; 0x48
    ffa6:	ldr	r2, [sp, #36]	; 0x24
    ffa8:	add	r3, r2
    ffaa:	mov	sl, r3
    ffac:	mov	fp, r5
    ffae:	movs	r2, #0
    ffb0:	ldr	r3, [pc, #296]	; (100dc <_dtoa_r+0xdb4>)
    ffb2:	mov	r0, r6
    ffb4:	mov	r1, r7
    ffb6:	bl	ced0 <__aeabi_dmul>
    ffba:	mov	r7, r1
    ffbc:	mov	r6, r0
    ffbe:	bl	d430 <__aeabi_d2iz>
    ffc2:	mov	r4, r0
    ffc4:	bl	ce04 <__aeabi_i2d>
    ffc8:	adds	r4, #48	; 0x30
    ffca:	mov	r2, r0
    ffcc:	mov	r3, r1
    ffce:	mov	r0, r6
    ffd0:	mov	r1, r7
    ffd2:	bl	cb68 <__aeabi_dsub>
    ffd6:	strb.w	r4, [fp], #1
    ffda:	cmp	sl, fp
    ffdc:	mov	r6, r0
    ffde:	mov	r7, r1
    ffe0:	bne.n	ffae <_dtoa_r+0xc86>
    ffe2:	ldr	r3, [sp, #92]	; 0x5c
    ffe4:	add	r5, r3
    ffe6:	movs	r2, #0
    ffe8:	ldr	r3, [pc, #244]	; (100e0 <_dtoa_r+0xdb8>)
    ffea:	ldrd	r0, r1, [sp, #80]	; 0x50
    ffee:	bl	cb6c <__adddf3>
    fff2:	mov	r2, r6
    fff4:	mov	r3, r7
    fff6:	bl	d3b4 <__aeabi_dcmplt>
    fffa:	cmp	r0, #0
    fffc:	beq.n	10090 <_dtoa_r+0xd68>
    fffe:	ldr	r3, [sp, #88]	; 0x58
   10000:	str	r3, [sp, #16]
   10002:	ldrb.w	r4, [r5, #-1]
   10006:	b.w	f6a2 <_dtoa_r+0x37a>
   1000a:	ldr	r3, [sp, #28]
   1000c:	ldr	r2, [sp, #32]
   1000e:	subs	r5, r3, r2
   10010:	movs	r3, #0
   10012:	b.w	f70e <_dtoa_r+0x3e6>
   10016:	movs	r7, #0
   10018:	b.n	fdb0 <_dtoa_r+0xa88>
   1001a:	ldr	r3, [sp, #96]	; 0x60
   1001c:	ldr	r7, [sp, #24]
   1001e:	ldr	r5, [sp, #28]
   10020:	rsb	r3, r3, #54	; 0x36
   10024:	b.w	f70e <_dtoa_r+0x3e6>
   10028:	ldrd	r6, r7, [sp, #64]	; 0x40
   1002c:	mov.w	sl, #2
   10030:	b.n	f9e8 <_dtoa_r+0x6c0>
   10032:	ldr	r3, [sp, #32]
   10034:	cmp	r3, #0
   10036:	beq.w	fdbc <_dtoa_r+0xa94>
   1003a:	ldr	r3, [sp, #56]	; 0x38
   1003c:	cmp	r3, #0
   1003e:	ble.w	fe9e <_dtoa_r+0xb76>
   10042:	movs	r2, #0
   10044:	ldr	r3, [pc, #148]	; (100dc <_dtoa_r+0xdb4>)
   10046:	mov	r0, r6
   10048:	mov	r1, r7
   1004a:	bl	ced0 <__aeabi_dmul>
   1004e:	mov	r6, r0
   10050:	mov	r7, r1
   10052:	add.w	r0, sl, #1
   10056:	bl	ce04 <__aeabi_i2d>
   1005a:	mov	r2, r6
   1005c:	mov	r3, r7
   1005e:	bl	ced0 <__aeabi_dmul>
   10062:	movs	r2, #0
   10064:	ldr	r3, [pc, #100]	; (100cc <_dtoa_r+0xda4>)
   10066:	bl	cb6c <__adddf3>
   1006a:	ldr	r2, [sp, #16]
   1006c:	ldr	r3, [sp, #56]	; 0x38
   1006e:	str	r3, [sp, #72]	; 0x48
   10070:	subs	r2, #1
   10072:	mov	r4, r0
   10074:	sub.w	r5, r1, #54525952	; 0x3400000
   10078:	str	r2, [sp, #88]	; 0x58
   1007a:	b.n	fa2a <_dtoa_r+0x702>
   1007c:	str	r4, [sp, #40]	; 0x28
   1007e:	b.n	fb8a <_dtoa_r+0x862>
   10080:	movs	r2, #57	; 0x39
   10082:	mov	fp, r6
   10084:	str	r4, [sp, #40]	; 0x28
   10086:	mov	r6, r8
   10088:	strb	r2, [r7, #0]
   1008a:	adds	r5, r7, #1
   1008c:	b.w	f87a <_dtoa_r+0x552>
   10090:	ldrd	r2, r3, [sp, #80]	; 0x50
   10094:	movs	r0, #0
   10096:	ldr	r1, [pc, #72]	; (100e0 <_dtoa_r+0xdb8>)
   10098:	bl	cb68 <__aeabi_dsub>
   1009c:	mov	r2, r6
   1009e:	mov	r3, r7
   100a0:	bl	d3f0 <__aeabi_dcmpgt>
   100a4:	cbnz	r0, 100aa <_dtoa_r+0xd82>
   100a6:	b.n	fe9e <_dtoa_r+0xb76>
   100a8:	mov	r5, r2
   100aa:	ldrb.w	r3, [r5, #-1]
   100ae:	cmp	r3, #48	; 0x30
   100b0:	add.w	r2, r5, #4294967295
   100b4:	beq.n	100a8 <_dtoa_r+0xd80>
   100b6:	b.n	fb2c <_dtoa_r+0x804>
   100b8:	ldr	r3, [sp, #88]	; 0x58
   100ba:	str	r3, [sp, #16]
   100bc:	b.w	f6a2 <_dtoa_r+0x37a>
   100c0:	cmp.w	sl, #0
   100c4:	bne.w	fbc0 <_dtoa_r+0x898>
   100c8:	b.n	fd90 <_dtoa_r+0xa68>
   100ca:	nop
   100cc:	.word	0x401c0000
   100d0:	.word	0x40140000
   100d4:	.word	0x00012188
   100d8:	.word	0x00012250
   100dc:	.word	0x40240000
   100e0:	.word	0x3fe00000
   100e4:	cmp	r3, #57	; 0x39
   100e6:	mov	fp, sl
   100e8:	mov	sl, r3
   100ea:	beq.n	10080 <_dtoa_r+0xd58>
   100ec:	cmp.w	fp, #0
   100f0:	bgt.w	fe6e <_dtoa_r+0xb46>
   100f4:	b.n	fe72 <_dtoa_r+0xb4a>
   100f6:	bne.w	fe72 <_dtoa_r+0xb4a>
   100fa:	tst.w	sl, #1
   100fe:	beq.w	fe72 <_dtoa_r+0xb4a>
   10102:	b.n	fe66 <_dtoa_r+0xb3e>
   10104:	ldr	r3, [sp, #0]
   10106:	cmp	r3, #2
   10108:	bgt.n	10156 <_dtoa_r+0xe2e>
   1010a:	ldr	r3, [sp, #56]	; 0x38
   1010c:	b.n	fd2a <_dtoa_r+0xa02>
   1010e:	mov.w	sl, #2
   10112:	b.n	f9e8 <_dtoa_r+0x6c0>
   10114:	ldr	r3, [sp, #0]
   10116:	cmp	r3, #2
   10118:	bgt.n	10156 <_dtoa_r+0xe2e>
   1011a:	ldr	r3, [sp, #56]	; 0x38
   1011c:	b.n	fbfa <_dtoa_r+0x8d2>
   1011e:	movs	r4, #0
   10120:	str.w	r4, [r9, #68]	; 0x44
   10124:	mov	r1, r4
   10126:	mov	r0, r9
   10128:	bl	eb1c <_Balloc>
   1012c:	mov.w	r3, #4294967295
   10130:	str	r3, [sp, #32]
   10132:	str	r3, [sp, #56]	; 0x38
   10134:	movs	r3, #1
   10136:	str	r0, [sp, #36]	; 0x24
   10138:	str	r4, [sp, #20]
   1013a:	str.w	r0, [r9, #64]	; 0x40
   1013e:	str	r3, [sp, #44]	; 0x2c
   10140:	b.w	f53c <_dtoa_r+0x214>
   10144:	beq.w	f7d8 <_dtoa_r+0x4b0>
   10148:	rsb	r0, r0, #60	; 0x3c
   1014c:	b.w	f7ce <_dtoa_r+0x4a6>
   10150:	movs	r6, #1
   10152:	b.w	f4ce <_dtoa_r+0x1a6>
   10156:	ldr	r3, [sp, #56]	; 0x38
   10158:	str	r3, [sp, #32]
   1015a:	b.n	fd3a <_dtoa_r+0xa12>
   1015c:			; <UNDEFINED> instruction: 0xffffffff

00010160 <_svfprintf_r>:
   10160:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10164:	sub	sp, #260	; 0x104
   10166:	mov	r4, r1
   10168:	str	r1, [sp, #20]
   1016a:	mov	r5, r2
   1016c:	str	r3, [sp, #40]	; 0x28
   1016e:	str	r0, [sp, #24]
   10170:	bl	eb00 <_localeconv_r>
   10174:	ldr	r3, [r0, #0]
   10176:	str	r3, [sp, #76]	; 0x4c
   10178:	mov	r0, r3
   1017a:	bl	e580 <strlen>
   1017e:	ldrh	r3, [r4, #12]
   10180:	str	r0, [sp, #72]	; 0x48
   10182:	lsls	r6, r3, #24
   10184:	bpl.n	1018e <_svfprintf_r+0x2e>
   10186:	ldr	r3, [r4, #16]
   10188:	cmp	r3, #0
   1018a:	beq.w	113f0 <_svfprintf_r+0x1290>
   1018e:	vldr	d7, [pc, #664]	; 10428 <_svfprintf_r+0x2c8>
   10192:	movs	r3, #0
   10194:	vstr	d7, [sp, #64]	; 0x40
   10198:	str	r3, [sp, #56]	; 0x38
   1019a:	str	r3, [sp, #148]	; 0x94
   1019c:	str	r3, [sp, #144]	; 0x90
   1019e:	str	r3, [sp, #84]	; 0x54
   101a0:	str	r3, [sp, #28]
   101a2:	ldr.w	sl, [pc, #656]	; 10434 <_svfprintf_r+0x2d4>
   101a6:	add	r3, sp, #192	; 0xc0
   101a8:	str	r3, [sp, #140]	; 0x8c
   101aa:	mov	r9, r3
   101ac:	mov	r8, r5
   101ae:	ldrb.w	r3, [r8]
   101b2:	mov	r4, r8
   101b4:	cbz	r3, 101f2 <_svfprintf_r+0x92>
   101b6:	cmp	r3, #37	; 0x25
   101b8:	bne.n	101c0 <_svfprintf_r+0x60>
   101ba:	b.n	101f2 <_svfprintf_r+0x92>
   101bc:	cmp	r3, #37	; 0x25
   101be:	beq.n	101c8 <_svfprintf_r+0x68>
   101c0:	ldrb.w	r3, [r4, #1]!
   101c4:	cmp	r3, #0
   101c6:	bne.n	101bc <_svfprintf_r+0x5c>
   101c8:	rsb	r5, r8, r4
   101cc:	cbz	r5, 101f2 <_svfprintf_r+0x92>
   101ce:	ldr	r3, [sp, #144]	; 0x90
   101d0:	ldr	r2, [sp, #148]	; 0x94
   101d2:	str.w	r8, [r9]
   101d6:	adds	r3, #1
   101d8:	add	r2, r5
   101da:	cmp	r3, #7
   101dc:	str.w	r5, [r9, #4]
   101e0:	str	r2, [sp, #148]	; 0x94
   101e2:	str	r3, [sp, #144]	; 0x90
   101e4:	bgt.w	10334 <_svfprintf_r+0x1d4>
   101e8:	add.w	r9, r9, #8
   101ec:	ldr	r3, [sp, #28]
   101ee:	add	r3, r5
   101f0:	str	r3, [sp, #28]
   101f2:	ldrb	r3, [r4, #0]
   101f4:	cmp	r3, #0
   101f6:	beq.w	10346 <_svfprintf_r+0x1e6>
   101fa:	movs	r3, #0
   101fc:	mov	r2, r3
   101fe:	strb.w	r3, [sp, #111]	; 0x6f
   10202:	mov	r1, r3
   10204:	str	r3, [sp, #32]
   10206:	str	r3, [sp, #12]
   10208:	mov.w	fp, #4294967295
   1020c:	ldrb	r3, [r4, #1]
   1020e:	add.w	r8, r4, #1
   10212:	mov	r5, fp
   10214:	add.w	r8, r8, #1
   10218:	sub.w	r0, r3, #32
   1021c:	cmp	r0, #88	; 0x58
   1021e:	bhi.w	10a8a <_svfprintf_r+0x92a>
   10222:	tbh	[pc, r0, lsl #1]
   10226:	.short	0x03a0
   10228:	.word	0x04320432
   1022c:	.word	0x043203a8
   10230:	.word	0x04320432
   10234:	.word	0x04320432
   10238:	.word	0x03af0432
   1023c:	.word	0x043203bd
   10240:	.word	0x00e2005d
   10244:	.word	0x01090432
   10248:	.word	0x01100110
   1024c:	.word	0x01100110
   10250:	.word	0x01100110
   10254:	.word	0x01100110
   10258:	.word	0x04320110
   1025c:	.word	0x04320432
   10260:	.word	0x04320432
   10264:	.word	0x04320432
   10268:	.word	0x04320432
   1026c:	.word	0x01200432
   10270:	.word	0x04320286
   10274:	.word	0x04320286
   10278:	.word	0x04320432
   1027c:	.word	0x02d40432
   10280:	.word	0x04320432
   10284:	.word	0x043202e5
   10288:	.word	0x04320432
   1028c:	.word	0x04320432
   10290:	.word	0x0432030f
   10294:	.word	0x033d0432
   10298:	.word	0x04320432
   1029c:	.word	0x04320432
   102a0:	.word	0x04320432
   102a4:	.word	0x04320432
   102a8:	.word	0x04320432
   102ac:	.word	0x0391037e
   102b0:	.word	0x02860286
   102b4:	.word	0x03990286
   102b8:	.word	0x04320391
   102bc:	.word	0x04070432
   102c0:	.word	0x04120432
   102c4:	.word	0x006400a3
   102c8:	.word	0x043203c2
   102cc:	.word	0x043203c9
   102d0:	.word	0x043203ea
   102d4:	.word	0x03f20432
   102d8:	ldr	r0, [sp, #32]
   102da:	str	r3, [sp, #40]	; 0x28
   102dc:	negs	r0, r0
   102de:	str	r0, [sp, #32]
   102e0:	ldr	r3, [sp, #12]
   102e2:	orr.w	r3, r3, #4
   102e6:	str	r3, [sp, #12]
   102e8:	ldrb.w	r3, [r8]
   102ec:	b.n	10214 <_svfprintf_r+0xb4>
   102ee:	ldr	r0, [sp, #40]	; 0x28
   102f0:	mov	fp, r5
   102f2:	movs	r1, #0
   102f4:	ldr	r4, [r0, #0]
   102f6:	strb.w	r1, [sp, #111]	; 0x6f
   102fa:	adds	r7, r0, #4
   102fc:	ldr	r0, [sp, #12]
   102fe:	movs	r3, #48	; 0x30
   10300:	movs	r2, #120	; 0x78
   10302:	cmp	fp, r1
   10304:	strb.w	r3, [sp, #112]	; 0x70
   10308:	mov.w	r5, #0
   1030c:	strb.w	r2, [sp, #113]	; 0x71
   10310:	orr.w	r3, r0, #2
   10314:	blt.w	10ac4 <_svfprintf_r+0x964>
   10318:	bic.w	r3, r0, #128	; 0x80
   1031c:	orr.w	r3, r3, #2
   10320:	str	r3, [sp, #12]
   10322:	orrs.w	r3, r4, r5
   10326:	str	r7, [sp, #40]	; 0x28
   10328:	beq.w	10a70 <_svfprintf_r+0x910>
   1032c:	mov	r7, r1
   1032e:	str	r2, [sp, #52]	; 0x34
   10330:	ldr	r0, [pc, #252]	; (10430 <_svfprintf_r+0x2d0>)
   10332:	b.n	10902 <_svfprintf_r+0x7a2>
   10334:	add	r2, sp, #140	; 0x8c
   10336:	ldr	r1, [sp, #20]
   10338:	ldr	r0, [sp, #24]
   1033a:	bl	11844 <__ssprint_r>
   1033e:	cbnz	r0, 10354 <_svfprintf_r+0x1f4>
   10340:	add.w	r9, sp, #192	; 0xc0
   10344:	b.n	101ec <_svfprintf_r+0x8c>
   10346:	ldr	r3, [sp, #148]	; 0x94
   10348:	cbz	r3, 10354 <_svfprintf_r+0x1f4>
   1034a:	ldr	r0, [sp, #24]
   1034c:	ldr	r1, [sp, #20]
   1034e:	add	r2, sp, #140	; 0x8c
   10350:	bl	11844 <__ssprint_r>
   10354:	ldr	r3, [sp, #20]
   10356:	ldrh	r3, [r3, #12]
   10358:	tst.w	r3, #64	; 0x40
   1035c:	ldr	r3, [sp, #28]
   1035e:	it	ne
   10360:	movne.w	r3, #4294967295
   10364:	mov	r0, r3
   10366:	add	sp, #260	; 0x104
   10368:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1036c:	str	r3, [sp, #52]	; 0x34
   1036e:	mov	fp, r5
   10370:	cmp	r2, #0
   10372:	bne.w	117dc <_svfprintf_r+0x167c>
   10376:	ldr	r2, [sp, #12]
   10378:	ands.w	r3, r2, #32
   1037c:	beq.w	1080c <_svfprintf_r+0x6ac>
   10380:	ldr	r7, [sp, #40]	; 0x28
   10382:	adds	r7, #7
   10384:	bic.w	r3, r7, #7
   10388:	movs	r7, #0
   1038a:	add.w	r1, r3, #8
   1038e:	cmp	fp, r7
   10390:	str	r1, [sp, #40]	; 0x28
   10392:	ldrd	r4, r5, [r3]
   10396:	strb.w	r7, [sp, #111]	; 0x6f
   1039a:	blt.w	11262 <_svfprintf_r+0x1102>
   1039e:	bic.w	r3, r2, #128	; 0x80
   103a2:	str	r3, [sp, #12]
   103a4:	orrs.w	r3, r4, r5
   103a8:	beq.w	10ab4 <_svfprintf_r+0x954>
   103ac:	add	r6, sp, #192	; 0xc0
   103ae:	lsrs	r2, r4, #3
   103b0:	orr.w	r2, r2, r5, lsl #29
   103b4:	lsrs	r1, r5, #3
   103b6:	and.w	r3, r4, #7
   103ba:	mov	r5, r1
   103bc:	mov	r4, r2
   103be:	adds	r3, #48	; 0x30
   103c0:	orrs.w	r2, r4, r5
   103c4:	strb.w	r3, [r6, #-1]!
   103c8:	bne.n	103ae <_svfprintf_r+0x24e>
   103ca:	ldr	r2, [sp, #12]
   103cc:	lsls	r1, r2, #31
   103ce:	bpl.w	104f0 <_svfprintf_r+0x390>
   103d2:	cmp	r3, #48	; 0x30
   103d4:	beq.w	104f0 <_svfprintf_r+0x390>
   103d8:	movs	r2, #48	; 0x30
   103da:	subs	r3, r6, #1
   103dc:	strb.w	r2, [r6, #-1]
   103e0:	add	r2, sp, #192	; 0xc0
   103e2:	subs	r2, r2, r3
   103e4:	str	r2, [sp, #36]	; 0x24
   103e6:	mov	r6, r3
   103e8:	b.n	104f6 <_svfprintf_r+0x396>
   103ea:	ldrb.w	r3, [r8]
   103ee:	cmp	r3, #42	; 0x2a
   103f0:	add.w	r4, r8, #1
   103f4:	beq.w	117c0 <_svfprintf_r+0x1660>
   103f8:	sub.w	r0, r3, #48	; 0x30
   103fc:	cmp	r0, #9
   103fe:	it	ls
   10400:	movls	r5, #0
   10402:	bhi.w	11712 <_svfprintf_r+0x15b2>
   10406:	ldrb.w	r3, [r4], #1
   1040a:	add.w	r5, r5, r5, lsl #2
   1040e:	add.w	r5, r0, r5, lsl #1
   10412:	sub.w	r0, r3, #48	; 0x30
   10416:	cmp	r0, #9
   10418:	bls.n	10406 <_svfprintf_r+0x2a6>
   1041a:	orr.w	r5, r5, r5, asr #31
   1041e:	mov	r8, r4
   10420:	b.n	10218 <_svfprintf_r+0xb8>
   10422:	nop
   10424:	nop.w
	...
   10430:	.word	0x000122cc
   10434:	.word	0x00012298
   10438:	ldr	r3, [sp, #12]
   1043a:	orr.w	r3, r3, #128	; 0x80
   1043e:	str	r3, [sp, #12]
   10440:	ldrb.w	r3, [r8]
   10444:	b.n	10214 <_svfprintf_r+0xb4>
   10446:	sub.w	r0, r3, #48	; 0x30
   1044a:	movs	r3, #0
   1044c:	mov	r4, r3
   1044e:	ldrb.w	r3, [r8], #1
   10452:	add.w	r4, r4, r4, lsl #2
   10456:	add.w	r4, r0, r4, lsl #1
   1045a:	sub.w	r0, r3, #48	; 0x30
   1045e:	cmp	r0, #9
   10460:	bls.n	1044e <_svfprintf_r+0x2ee>
   10462:	str	r4, [sp, #32]
   10464:	b.n	10218 <_svfprintf_r+0xb8>
   10466:	str	r3, [sp, #52]	; 0x34
   10468:	mov	fp, r5
   1046a:	cmp	r2, #0
   1046c:	bne.w	117f8 <_svfprintf_r+0x1698>
   10470:	ldr	r3, [sp, #12]
   10472:	orr.w	r3, r3, #16
   10476:	str	r3, [sp, #12]
   10478:	ldr	r3, [sp, #12]
   1047a:	lsls	r4, r3, #26
   1047c:	bpl.w	10eee <_svfprintf_r+0xd8e>
   10480:	ldr	r7, [sp, #40]	; 0x28
   10482:	adds	r7, #7
   10484:	bic.w	r7, r7, #7
   10488:	ldrd	r2, r3, [r7]
   1048c:	add.w	r1, r7, #8
   10490:	str	r1, [sp, #40]	; 0x28
   10492:	mov	r4, r2
   10494:	mov	r5, r3
   10496:	cmp	r2, #0
   10498:	sbcs.w	r3, r3, #0
   1049c:	blt.w	10f64 <_svfprintf_r+0xe04>
   104a0:	cmp.w	fp, #0
   104a4:	ldrb.w	r7, [sp, #111]	; 0x6f
   104a8:	blt.w	10f2a <_svfprintf_r+0xdca>
   104ac:	ldr	r3, [sp, #12]
   104ae:	bic.w	r3, r3, #128	; 0x80
   104b2:	str	r3, [sp, #12]
   104b4:	orrs.w	r3, r4, r5
   104b8:	beq.w	1088c <_svfprintf_r+0x72c>
   104bc:	cmp	r5, #0
   104be:	it	eq
   104c0:	cmpeq	r4, #10
   104c2:	bcc.w	10896 <_svfprintf_r+0x736>
   104c6:	add	r6, sp, #192	; 0xc0
   104c8:	mov	r0, r4
   104ca:	mov	r1, r5
   104cc:	movs	r2, #10
   104ce:	movs	r3, #0
   104d0:	bl	d480 <__aeabi_uldivmod>
   104d4:	adds	r2, #48	; 0x30
   104d6:	strb.w	r2, [r6, #-1]!
   104da:	mov	r0, r4
   104dc:	mov	r1, r5
   104de:	movs	r3, #0
   104e0:	movs	r2, #10
   104e2:	bl	d480 <__aeabi_uldivmod>
   104e6:	mov	r4, r0
   104e8:	mov	r5, r1
   104ea:	orrs.w	r3, r4, r5
   104ee:	bne.n	104c8 <_svfprintf_r+0x368>
   104f0:	add	r3, sp, #192	; 0xc0
   104f2:	subs	r3, r3, r6
   104f4:	str	r3, [sp, #36]	; 0x24
   104f6:	ldr	r3, [sp, #36]	; 0x24
   104f8:	cmp	r3, fp
   104fa:	it	lt
   104fc:	movlt	r3, fp
   104fe:	str	r3, [sp, #16]
   10500:	movs	r3, #0
   10502:	str	r3, [sp, #60]	; 0x3c
   10504:	cbz	r7, 1050c <_svfprintf_r+0x3ac>
   10506:	ldr	r3, [sp, #16]
   10508:	adds	r3, #1
   1050a:	str	r3, [sp, #16]
   1050c:	ldr	r3, [sp, #12]
   1050e:	ands.w	r3, r3, #2
   10512:	str	r3, [sp, #44]	; 0x2c
   10514:	beq.n	1051c <_svfprintf_r+0x3bc>
   10516:	ldr	r3, [sp, #16]
   10518:	adds	r3, #2
   1051a:	str	r3, [sp, #16]
   1051c:	ldr	r3, [sp, #12]
   1051e:	ands.w	r3, r3, #132	; 0x84
   10522:	str	r3, [sp, #48]	; 0x30
   10524:	bne.w	10ade <_svfprintf_r+0x97e>
   10528:	ldr	r3, [sp, #32]
   1052a:	ldr	r2, [sp, #16]
   1052c:	subs	r5, r3, r2
   1052e:	cmp	r5, #0
   10530:	ble.w	10ade <_svfprintf_r+0x97e>
   10534:	cmp	r5, #16
   10536:	ldr	r1, [sp, #148]	; 0x94
   10538:	ldr	r2, [sp, #144]	; 0x90
   1053a:	ldr	r7, [pc, #672]	; (107dc <_svfprintf_r+0x67c>)
   1053c:	ble.n	1058e <_svfprintf_r+0x42e>
   1053e:	str	r6, [sp, #80]	; 0x50
   10540:	mov	r0, r9
   10542:	movs	r4, #16
   10544:	mov	r9, r7
   10546:	ldr	r6, [sp, #20]
   10548:	mov	r7, r5
   1054a:	ldr	r5, [sp, #24]
   1054c:	b.n	10558 <_svfprintf_r+0x3f8>
   1054e:	subs	r7, #16
   10550:	cmp	r7, #16
   10552:	add.w	r0, r0, #8
   10556:	ble.n	10586 <_svfprintf_r+0x426>
   10558:	adds	r2, #1
   1055a:	ldr	r3, [pc, #640]	; (107dc <_svfprintf_r+0x67c>)
   1055c:	str	r2, [sp, #144]	; 0x90
   1055e:	adds	r1, #16
   10560:	cmp	r2, #7
   10562:	str	r1, [sp, #148]	; 0x94
   10564:	stmia.w	r0, {r3, r4}
   10568:	ble.n	1054e <_svfprintf_r+0x3ee>
   1056a:	add	r2, sp, #140	; 0x8c
   1056c:	mov	r1, r6
   1056e:	mov	r0, r5
   10570:	bl	11844 <__ssprint_r>
   10574:	cmp	r0, #0
   10576:	bne.w	10354 <_svfprintf_r+0x1f4>
   1057a:	subs	r7, #16
   1057c:	cmp	r7, #16
   1057e:	ldr	r1, [sp, #148]	; 0x94
   10580:	ldr	r2, [sp, #144]	; 0x90
   10582:	add	r0, sp, #192	; 0xc0
   10584:	bgt.n	10558 <_svfprintf_r+0x3f8>
   10586:	ldr	r6, [sp, #80]	; 0x50
   10588:	mov	r5, r7
   1058a:	mov	r7, r9
   1058c:	mov	r9, r0
   1058e:	adds	r2, #1
   10590:	adds	r4, r5, r1
   10592:	cmp	r2, #7
   10594:	str	r4, [sp, #148]	; 0x94
   10596:	str	r2, [sp, #144]	; 0x90
   10598:	str.w	r7, [r9]
   1059c:	str.w	r5, [r9, #4]
   105a0:	bgt.w	10dfe <_svfprintf_r+0xc9e>
   105a4:	ldrb.w	r7, [sp, #111]	; 0x6f
   105a8:	add.w	r9, r9, #8
   105ac:	cbz	r7, 105cc <_svfprintf_r+0x46c>
   105ae:	ldr	r3, [sp, #144]	; 0x90
   105b0:	adds	r3, #1
   105b2:	adds	r4, #1
   105b4:	add.w	r1, sp, #111	; 0x6f
   105b8:	movs	r2, #1
   105ba:	cmp	r3, #7
   105bc:	str	r4, [sp, #148]	; 0x94
   105be:	str	r3, [sp, #144]	; 0x90
   105c0:	stmia.w	r9, {r1, r2}
   105c4:	bgt.w	10d12 <_svfprintf_r+0xbb2>
   105c8:	add.w	r9, r9, #8
   105cc:	ldr	r3, [sp, #44]	; 0x2c
   105ce:	cbz	r3, 105ec <_svfprintf_r+0x48c>
   105d0:	ldr	r3, [sp, #144]	; 0x90
   105d2:	adds	r3, #1
   105d4:	adds	r4, #2
   105d6:	add	r1, sp, #112	; 0x70
   105d8:	movs	r2, #2
   105da:	cmp	r3, #7
   105dc:	str	r4, [sp, #148]	; 0x94
   105de:	str	r3, [sp, #144]	; 0x90
   105e0:	stmia.w	r9, {r1, r2}
   105e4:	bgt.w	10d2a <_svfprintf_r+0xbca>
   105e8:	add.w	r9, r9, #8
   105ec:	ldr	r3, [sp, #48]	; 0x30
   105ee:	cmp	r3, #128	; 0x80
   105f0:	beq.w	10bb6 <_svfprintf_r+0xa56>
   105f4:	ldr	r3, [sp, #36]	; 0x24
   105f6:	rsb	r7, r3, fp
   105fa:	cmp	r7, #0
   105fc:	ble.n	10666 <_svfprintf_r+0x506>
   105fe:	ldr	r2, [pc, #480]	; (107e0 <_svfprintf_r+0x680>)
   10600:	ldr	r3, [sp, #144]	; 0x90
   10602:	str	r2, [sp, #44]	; 0x2c
   10604:	cmp	r7, #16
   10606:	ble.n	1064e <_svfprintf_r+0x4ee>
   10608:	mov	r2, r4
   1060a:	mov.w	fp, #16
   1060e:	ldr	r5, [sp, #24]
   10610:	ldr	r4, [sp, #20]
   10612:	b.n	1061e <_svfprintf_r+0x4be>
   10614:	subs	r7, #16
   10616:	cmp	r7, #16
   10618:	add.w	r9, r9, #8
   1061c:	ble.n	1064c <_svfprintf_r+0x4ec>
   1061e:	adds	r3, #1
   10620:	adds	r2, #16
   10622:	cmp	r3, #7
   10624:	str	r2, [sp, #148]	; 0x94
   10626:	str	r3, [sp, #144]	; 0x90
   10628:	stmia.w	r9, {sl, fp}
   1062c:	ble.n	10614 <_svfprintf_r+0x4b4>
   1062e:	add	r2, sp, #140	; 0x8c
   10630:	mov	r1, r4
   10632:	mov	r0, r5
   10634:	bl	11844 <__ssprint_r>
   10638:	cmp	r0, #0
   1063a:	bne.w	10354 <_svfprintf_r+0x1f4>
   1063e:	subs	r7, #16
   10640:	cmp	r7, #16
   10642:	ldr	r2, [sp, #148]	; 0x94
   10644:	ldr	r3, [sp, #144]	; 0x90
   10646:	add.w	r9, sp, #192	; 0xc0
   1064a:	bgt.n	1061e <_svfprintf_r+0x4be>
   1064c:	mov	r4, r2
   1064e:	adds	r3, #1
   10650:	ldr	r2, [sp, #44]	; 0x2c
   10652:	str	r3, [sp, #144]	; 0x90
   10654:	add	r4, r7
   10656:	cmp	r3, #7
   10658:	str	r4, [sp, #148]	; 0x94
   1065a:	stmia.w	r9, {r2, r7}
   1065e:	bgt.w	10cfa <_svfprintf_r+0xb9a>
   10662:	add.w	r9, r9, #8
   10666:	ldr	r3, [sp, #12]
   10668:	lsls	r2, r3, #23
   1066a:	bmi.w	10ae2 <_svfprintf_r+0x982>
   1066e:	ldr	r3, [sp, #144]	; 0x90
   10670:	ldr	r1, [sp, #36]	; 0x24
   10672:	str.w	r6, [r9]
   10676:	adds	r3, #1
   10678:	add	r4, r1
   1067a:	cmp	r3, #7
   1067c:	str	r4, [sp, #148]	; 0x94
   1067e:	str.w	r1, [r9, #4]
   10682:	str	r3, [sp, #144]	; 0x90
   10684:	bgt.w	10cce <_svfprintf_r+0xb6e>
   10688:	add.w	r9, r9, #8
   1068c:	ldr	r3, [sp, #12]
   1068e:	lsls	r1, r3, #29
   10690:	bpl.n	10712 <_svfprintf_r+0x5b2>
   10692:	ldr	r3, [sp, #32]
   10694:	ldr	r2, [sp, #16]
   10696:	subs	r5, r3, r2
   10698:	cmp	r5, #0
   1069a:	ble.n	10712 <_svfprintf_r+0x5b2>
   1069c:	cmp	r5, #16
   1069e:	ldr	r3, [sp, #144]	; 0x90
   106a0:	ldr	r7, [pc, #312]	; (107dc <_svfprintf_r+0x67c>)
   106a2:	ble.n	106ec <_svfprintf_r+0x58c>
   106a4:	mov	r2, r4
   106a6:	movs	r6, #16
   106a8:	ldr.w	fp, [sp, #24]
   106ac:	ldr	r4, [sp, #20]
   106ae:	b.n	106ba <_svfprintf_r+0x55a>
   106b0:	subs	r5, #16
   106b2:	cmp	r5, #16
   106b4:	add.w	r9, r9, #8
   106b8:	ble.n	106ea <_svfprintf_r+0x58a>
   106ba:	adds	r3, #1
   106bc:	ldr	r1, [pc, #284]	; (107dc <_svfprintf_r+0x67c>)
   106be:	str	r3, [sp, #144]	; 0x90
   106c0:	adds	r2, #16
   106c2:	cmp	r3, #7
   106c4:	str	r2, [sp, #148]	; 0x94
   106c6:	stmia.w	r9, {r1, r6}
   106ca:	ble.n	106b0 <_svfprintf_r+0x550>
   106cc:	add	r2, sp, #140	; 0x8c
   106ce:	mov	r1, r4
   106d0:	mov	r0, fp
   106d2:	bl	11844 <__ssprint_r>
   106d6:	cmp	r0, #0
   106d8:	bne.w	10354 <_svfprintf_r+0x1f4>
   106dc:	subs	r5, #16
   106de:	cmp	r5, #16
   106e0:	ldr	r2, [sp, #148]	; 0x94
   106e2:	ldr	r3, [sp, #144]	; 0x90
   106e4:	add.w	r9, sp, #192	; 0xc0
   106e8:	bgt.n	106ba <_svfprintf_r+0x55a>
   106ea:	mov	r4, r2
   106ec:	adds	r3, #1
   106ee:	add	r4, r5
   106f0:	cmp	r3, #7
   106f2:	str	r4, [sp, #148]	; 0x94
   106f4:	str	r3, [sp, #144]	; 0x90
   106f6:	str.w	r7, [r9]
   106fa:	str.w	r5, [r9, #4]
   106fe:	ble.n	10712 <_svfprintf_r+0x5b2>
   10700:	add	r2, sp, #140	; 0x8c
   10702:	ldr	r1, [sp, #20]
   10704:	ldr	r0, [sp, #24]
   10706:	bl	11844 <__ssprint_r>
   1070a:	cmp	r0, #0
   1070c:	bne.w	10354 <_svfprintf_r+0x1f4>
   10710:	ldr	r4, [sp, #148]	; 0x94
   10712:	ldr	r3, [sp, #28]
   10714:	ldr	r2, [sp, #32]
   10716:	ldr	r1, [sp, #16]
   10718:	cmp	r2, r1
   1071a:	ite	ge
   1071c:	addge	r3, r3, r2
   1071e:	addlt	r3, r3, r1
   10720:	str	r3, [sp, #28]
   10722:	cmp	r4, #0
   10724:	bne.w	10ce6 <_svfprintf_r+0xb86>
   10728:	movs	r3, #0
   1072a:	str	r3, [sp, #144]	; 0x90
   1072c:	add.w	r9, sp, #192	; 0xc0
   10730:	b.n	101ae <_svfprintf_r+0x4e>
   10732:	str	r3, [sp, #52]	; 0x34
   10734:	mov	fp, r5
   10736:	cmp	r2, #0
   10738:	bne.w	11800 <_svfprintf_r+0x16a0>
   1073c:	ldr	r3, [sp, #12]
   1073e:	ldr	r7, [sp, #40]	; 0x28
   10740:	lsls	r2, r3, #28
   10742:	add.w	r7, r7, #7
   10746:	bpl.w	11232 <_svfprintf_r+0x10d2>
   1074a:	bic.w	r3, r7, #7
   1074e:	vldr	d7, [r3]
   10752:	vstr	d7, [sp, #64]	; 0x40
   10756:	add.w	r2, r3, #8
   1075a:	str	r2, [sp, #40]	; 0x28
   1075c:	ldrd	r1, r2, [sp, #64]	; 0x40
   10760:	bic.w	r3, r2, #2147483648	; 0x80000000
   10764:	str	r1, [sp, #88]	; 0x58
   10766:	str	r3, [sp, #92]	; 0x5c
   10768:	ldrd	r4, r5, [sp, #88]	; 0x58
   1076c:	mov.w	r2, #4294967295
   10770:	mov	r0, r4
   10772:	mov	r1, r5
   10774:	ldr	r3, [pc, #108]	; (107e4 <_svfprintf_r+0x684>)
   10776:	bl	d404 <__aeabi_dcmpun>
   1077a:	cmp	r0, #0
   1077c:	bne.w	11134 <_svfprintf_r+0xfd4>
   10780:	mov.w	r2, #4294967295
   10784:	ldr	r3, [pc, #92]	; (107e4 <_svfprintf_r+0x684>)
   10786:	mov	r0, r4
   10788:	mov	r1, r5
   1078a:	bl	d3c8 <__aeabi_dcmple>
   1078e:	cmp	r0, #0
   10790:	bne.w	11134 <_svfprintf_r+0xfd4>
   10794:	movs	r2, #0
   10796:	movs	r3, #0
   10798:	ldrd	r0, r1, [sp, #64]	; 0x40
   1079c:	bl	d3b4 <__aeabi_dcmplt>
   107a0:	cmp	r0, #0
   107a2:	bne.w	1164a <_svfprintf_r+0x14ea>
   107a6:	ldrb.w	r7, [sp, #111]	; 0x6f
   107aa:	ldr	r6, [pc, #60]	; (107e8 <_svfprintf_r+0x688>)
   107ac:	ldr	r3, [pc, #60]	; (107ec <_svfprintf_r+0x68c>)
   107ae:	ldr	r1, [sp, #12]
   107b0:	bic.w	r1, r1, #128	; 0x80
   107b4:	str	r1, [sp, #12]
   107b6:	ldr	r1, [sp, #52]	; 0x34
   107b8:	movs	r2, #3
   107ba:	mov.w	fp, #0
   107be:	str	r2, [sp, #16]
   107c0:	cmp	r1, #71	; 0x47
   107c2:	it	le
   107c4:	movle	r6, r3
   107c6:	str	r2, [sp, #36]	; 0x24
   107c8:	str.w	fp, [sp, #60]	; 0x3c
   107cc:	b.n	10504 <_svfprintf_r+0x3a4>
   107ce:	ldr	r3, [sp, #12]
   107d0:	orr.w	r3, r3, #8
   107d4:	str	r3, [sp, #12]
   107d6:	ldrb.w	r3, [r8]
   107da:	b.n	10214 <_svfprintf_r+0xb4>
   107dc:	.word	0x000122e8
   107e0:	.word	0x00012298
   107e4:	.word	0x7fefffff
   107e8:	.word	0x000122ac
   107ec:	.word	0x000122a8
   107f0:	str	r3, [sp, #52]	; 0x34
   107f2:	mov	fp, r5
   107f4:	cmp	r2, #0
   107f6:	bne.w	11818 <_svfprintf_r+0x16b8>
   107fa:	ldr	r3, [sp, #12]
   107fc:	orr.w	r3, r3, #16
   10800:	str	r3, [sp, #12]
   10802:	ldr	r2, [sp, #12]
   10804:	ands.w	r3, r2, #32
   10808:	bne.w	10380 <_svfprintf_r+0x220>
   1080c:	ldr	r1, [sp, #12]
   1080e:	ands.w	r2, r1, #16
   10812:	beq.w	110cc <_svfprintf_r+0xf6c>
   10816:	ldr	r0, [sp, #40]	; 0x28
   10818:	strb.w	r3, [sp, #111]	; 0x6f
   1081c:	cmp.w	fp, #0
   10820:	ldr	r4, [r0, #0]
   10822:	add.w	r7, r0, #4
   10826:	mov.w	r5, #0
   1082a:	blt.w	11260 <_svfprintf_r+0x1100>
   1082e:	mov	r2, r1
   10830:	bic.w	r2, r2, #128	; 0x80
   10834:	str	r2, [sp, #12]
   10836:	orrs.w	r2, r4, r5
   1083a:	str	r7, [sp, #40]	; 0x28
   1083c:	beq.w	10ab4 <_svfprintf_r+0x954>
   10840:	mov	r7, r3
   10842:	b.n	103ac <_svfprintf_r+0x24c>
   10844:	str	r3, [sp, #52]	; 0x34
   10846:	mov	fp, r5
   10848:	cmp	r2, #0
   1084a:	bne.w	11810 <_svfprintf_r+0x16b0>
   1084e:	ldr	r3, [sp, #12]
   10850:	orr.w	r3, r3, #16
   10854:	str	r3, [sp, #12]
   10856:	ldr	r2, [sp, #12]
   10858:	ands.w	r3, r2, #32
   1085c:	beq.w	10eb8 <_svfprintf_r+0xd58>
   10860:	ldr	r7, [sp, #40]	; 0x28
   10862:	adds	r7, #7
   10864:	bic.w	r3, r7, #7
   10868:	movs	r7, #0
   1086a:	add.w	r1, r3, #8
   1086e:	cmp	fp, r7
   10870:	str	r1, [sp, #40]	; 0x28
   10872:	ldrd	r4, r5, [r3]
   10876:	strb.w	r7, [sp, #111]	; 0x6f
   1087a:	blt.w	10f2a <_svfprintf_r+0xdca>
   1087e:	bic.w	r3, r2, #128	; 0x80
   10882:	str	r3, [sp, #12]
   10884:	orrs.w	r3, r4, r5
   10888:	bne.w	104bc <_svfprintf_r+0x35c>
   1088c:	cmp.w	fp, #0
   10890:	beq.w	10a7e <_svfprintf_r+0x91e>
   10894:	movs	r4, #0
   10896:	add	r6, sp, #256	; 0x100
   10898:	adds	r4, #48	; 0x30
   1089a:	strb.w	r4, [r6, #-65]!
   1089e:	b.n	104f0 <_svfprintf_r+0x390>
   108a0:	str	r3, [sp, #52]	; 0x34
   108a2:	mov	fp, r5
   108a4:	cmp	r2, #0
   108a6:	bne.w	11808 <_svfprintf_r+0x16a8>
   108aa:	ldr	r3, [sp, #12]
   108ac:	ldr	r0, [pc, #700]	; (10b6c <_svfprintf_r+0xa0c>)
   108ae:	lsls	r5, r3, #26
   108b0:	bpl.w	10a1e <_svfprintf_r+0x8be>
   108b4:	ldr	r7, [sp, #40]	; 0x28
   108b6:	adds	r7, #7
   108b8:	bic.w	r3, r7, #7
   108bc:	ldrd	r4, r5, [r3]
   108c0:	add.w	r2, r3, #8
   108c4:	str	r2, [sp, #40]	; 0x28
   108c6:	ldr	r2, [sp, #12]
   108c8:	ands.w	r7, r2, #1
   108cc:	beq.w	10d42 <_svfprintf_r+0xbe2>
   108d0:	orrs.w	r3, r4, r5
   108d4:	beq.w	112dc <_svfprintf_r+0x117c>
   108d8:	ldrb.w	r2, [sp, #52]	; 0x34
   108dc:	strb.w	r2, [sp, #113]	; 0x71
   108e0:	movs	r7, #0
   108e2:	ldr	r2, [sp, #12]
   108e4:	strb.w	r7, [sp, #111]	; 0x6f
   108e8:	movs	r3, #48	; 0x30
   108ea:	cmp	fp, r7
   108ec:	strb.w	r3, [sp, #112]	; 0x70
   108f0:	orr.w	r3, r2, #2
   108f4:	blt.w	11654 <_svfprintf_r+0x14f4>
   108f8:	bic.w	r3, r2, #128	; 0x80
   108fc:	orr.w	r3, r3, #2
   10900:	str	r3, [sp, #12]
   10902:	add	r6, sp, #192	; 0xc0
   10904:	lsrs	r3, r4, #4
   10906:	and.w	r1, r4, #15
   1090a:	orr.w	r3, r3, r5, lsl #28
   1090e:	lsrs	r2, r5, #4
   10910:	mov	r4, r3
   10912:	mov	r5, r2
   10914:	ldrb	r3, [r0, r1]
   10916:	strb.w	r3, [r6, #-1]!
   1091a:	orrs.w	r3, r4, r5
   1091e:	bne.n	10904 <_svfprintf_r+0x7a4>
   10920:	b.n	104f0 <_svfprintf_r+0x390>
   10922:	ldr	r1, [sp, #40]	; 0x28
   10924:	str	r3, [sp, #52]	; 0x34
   10926:	ldr	r2, [r1, #0]
   10928:	strb.w	r2, [sp, #152]	; 0x98
   1092c:	movs	r3, #0
   1092e:	mov	r2, r1
   10930:	mov	r7, r3
   10932:	strb.w	r3, [sp, #111]	; 0x6f
   10936:	adds	r2, #4
   10938:	movs	r3, #1
   1093a:	str	r3, [sp, #16]
   1093c:	mov	fp, r7
   1093e:	str	r7, [sp, #60]	; 0x3c
   10940:	str	r2, [sp, #40]	; 0x28
   10942:	str	r3, [sp, #36]	; 0x24
   10944:	add	r6, sp, #152	; 0x98
   10946:	b.n	1050c <_svfprintf_r+0x3ac>
   10948:	str	r3, [sp, #52]	; 0x34
   1094a:	mov	fp, r5
   1094c:	cmp	r2, #0
   1094e:	beq.w	10478 <_svfprintf_r+0x318>
   10952:	strb.w	r1, [sp, #111]	; 0x6f
   10956:	b.n	10478 <_svfprintf_r+0x318>
   10958:	ldr	r3, [sp, #12]
   1095a:	orr.w	r3, r3, #64	; 0x40
   1095e:	str	r3, [sp, #12]
   10960:	ldrb.w	r3, [r8]
   10964:	b.n	10214 <_svfprintf_r+0xb4>
   10966:	ldrb.w	r3, [r8]
   1096a:	cmp	r1, #0
   1096c:	bne.w	10214 <_svfprintf_r+0xb4>
   10970:	movs	r2, #1
   10972:	movs	r1, #32
   10974:	b.n	10214 <_svfprintf_r+0xb4>
   10976:	ldr	r3, [sp, #12]
   10978:	orr.w	r3, r3, #1
   1097c:	str	r3, [sp, #12]
   1097e:	ldrb.w	r3, [r8]
   10982:	b.n	10214 <_svfprintf_r+0xb4>
   10984:	ldr	r4, [sp, #40]	; 0x28
   10986:	ldr	r3, [r4, #0]
   10988:	str	r3, [sp, #32]
   1098a:	mov	r0, r3
   1098c:	cmp	r0, #0
   1098e:	mov	r3, r4
   10990:	add.w	r3, r3, #4
   10994:	blt.w	102d8 <_svfprintf_r+0x178>
   10998:	str	r3, [sp, #40]	; 0x28
   1099a:	ldrb.w	r3, [r8]
   1099e:	b.n	10214 <_svfprintf_r+0xb4>
   109a0:	ldrb.w	r3, [r8]
   109a4:	movs	r2, #1
   109a6:	movs	r1, #43	; 0x2b
   109a8:	b.n	10214 <_svfprintf_r+0xb4>
   109aa:	ldr	r3, [sp, #12]
   109ac:	orr.w	r3, r3, #32
   109b0:	str	r3, [sp, #12]
   109b2:	ldrb.w	r3, [r8]
   109b6:	b.n	10214 <_svfprintf_r+0xb4>
   109b8:	ldr	r2, [sp, #40]	; 0x28
   109ba:	str	r3, [sp, #52]	; 0x34
   109bc:	ldr	r6, [r2, #0]
   109be:	movs	r4, #0
   109c0:	strb.w	r4, [sp, #111]	; 0x6f
   109c4:	adds	r7, r2, #4
   109c6:	cmp	r6, #0
   109c8:	beq.w	11604 <_svfprintf_r+0x14a4>
   109cc:	cmp	r5, #0
   109ce:	blt.w	11494 <_svfprintf_r+0x1334>
   109d2:	mov	r2, r5
   109d4:	mov	r1, r4
   109d6:	mov	r0, r6
   109d8:	bl	ddc0 <memchr>
   109dc:	cmp	r0, #0
   109de:	beq.w	116a8 <_svfprintf_r+0x1548>
   109e2:	subs	r3, r0, r6
   109e4:	str	r3, [sp, #36]	; 0x24
   109e6:	mov	fp, r4
   109e8:	bic.w	r3, r3, r3, asr #31
   109ec:	str	r7, [sp, #40]	; 0x28
   109ee:	str	r3, [sp, #16]
   109f0:	str.w	fp, [sp, #60]	; 0x3c
   109f4:	ldrb.w	r7, [sp, #111]	; 0x6f
   109f8:	b.n	10504 <_svfprintf_r+0x3a4>
   109fa:	str	r3, [sp, #52]	; 0x34
   109fc:	mov	fp, r5
   109fe:	cmp	r2, #0
   10a00:	beq.w	10856 <_svfprintf_r+0x6f6>
   10a04:	strb.w	r1, [sp, #111]	; 0x6f
   10a08:	b.n	10856 <_svfprintf_r+0x6f6>
   10a0a:	str	r3, [sp, #52]	; 0x34
   10a0c:	mov	fp, r5
   10a0e:	cmp	r2, #0
   10a10:	bne.w	11830 <_svfprintf_r+0x16d0>
   10a14:	ldr	r3, [sp, #12]
   10a16:	ldr	r0, [pc, #344]	; (10b70 <_svfprintf_r+0xa10>)
   10a18:	lsls	r5, r3, #26
   10a1a:	bmi.w	108b4 <_svfprintf_r+0x754>
   10a1e:	ldr	r3, [sp, #12]
   10a20:	lsls	r4, r3, #27
   10a22:	bpl.w	112a2 <_svfprintf_r+0x1142>
   10a26:	ldr	r2, [sp, #40]	; 0x28
   10a28:	mov	r3, r2
   10a2a:	adds	r3, #4
   10a2c:	ldr	r4, [r2, #0]
   10a2e:	str	r3, [sp, #40]	; 0x28
   10a30:	movs	r5, #0
   10a32:	b.n	108c6 <_svfprintf_r+0x766>
   10a34:	ldrb.w	r3, [r8]
   10a38:	cmp	r3, #108	; 0x6c
   10a3a:	beq.w	113c2 <_svfprintf_r+0x1262>
   10a3e:	ldr	r0, [sp, #12]
   10a40:	orr.w	r0, r0, #16
   10a44:	str	r0, [sp, #12]
   10a46:	b.w	10214 <_svfprintf_r+0xb4>
   10a4a:	cmp	r2, #0
   10a4c:	bne.w	11828 <_svfprintf_r+0x16c8>
   10a50:	ldr	r3, [sp, #12]
   10a52:	lsls	r3, r3, #26
   10a54:	bpl.w	11106 <_svfprintf_r+0xfa6>
   10a58:	ldr	r2, [sp, #40]	; 0x28
   10a5a:	ldr	r1, [sp, #28]
   10a5c:	ldr	r3, [r2, #0]
   10a5e:	asrs	r5, r1, #31
   10a60:	mov	r0, r1
   10a62:	adds	r2, #4
   10a64:	mov	r1, r5
   10a66:	str	r2, [sp, #40]	; 0x28
   10a68:	strd	r0, r1, [r3]
   10a6c:	b.w	101ae <_svfprintf_r+0x4e>
   10a70:	ldr	r0, [pc, #252]	; (10b70 <_svfprintf_r+0xa10>)
   10a72:	str	r2, [sp, #52]	; 0x34
   10a74:	cmp.w	fp, #0
   10a78:	bne.w	10d64 <_svfprintf_r+0xc04>
   10a7c:	mov	r7, fp
   10a7e:	mov.w	fp, #0
   10a82:	str.w	fp, [sp, #36]	; 0x24
   10a86:	add	r6, sp, #192	; 0xc0
   10a88:	b.n	104f6 <_svfprintf_r+0x396>
   10a8a:	str	r3, [sp, #52]	; 0x34
   10a8c:	cmp	r2, #0
   10a8e:	bne.w	11820 <_svfprintf_r+0x16c0>
   10a92:	ldr	r2, [sp, #52]	; 0x34
   10a94:	cmp	r2, #0
   10a96:	beq.w	10346 <_svfprintf_r+0x1e6>
   10a9a:	movs	r3, #0
   10a9c:	movs	r1, #1
   10a9e:	mov	r7, r3
   10aa0:	str	r1, [sp, #16]
   10aa2:	strb.w	r2, [sp, #152]	; 0x98
   10aa6:	strb.w	r3, [sp, #111]	; 0x6f
   10aaa:	mov	fp, r3
   10aac:	str	r3, [sp, #60]	; 0x3c
   10aae:	str	r1, [sp, #36]	; 0x24
   10ab0:	add	r6, sp, #152	; 0x98
   10ab2:	b.n	1050c <_svfprintf_r+0x3ac>
   10ab4:	cmp.w	fp, #0
   10ab8:	beq.w	116d8 <_svfprintf_r+0x1578>
   10abc:	movs	r7, #0
   10abe:	movs	r4, #0
   10ac0:	movs	r5, #0
   10ac2:	b.n	103ac <_svfprintf_r+0x24c>
   10ac4:	ldr	r0, [pc, #168]	; (10b70 <_svfprintf_r+0xa10>)
   10ac6:	str	r3, [sp, #12]
   10ac8:	str	r2, [sp, #52]	; 0x34
   10aca:	orrs.w	r3, r4, r5
   10ace:	str	r7, [sp, #40]	; 0x28
   10ad0:	mov.w	r7, #0
   10ad4:	bne.w	10902 <_svfprintf_r+0x7a2>
   10ad8:	movs	r4, #0
   10ada:	movs	r5, #0
   10adc:	b.n	10902 <_svfprintf_r+0x7a2>
   10ade:	ldr	r4, [sp, #148]	; 0x94
   10ae0:	b.n	105ac <_svfprintf_r+0x44c>
   10ae2:	ldr	r3, [sp, #52]	; 0x34
   10ae4:	cmp	r3, #101	; 0x65
   10ae6:	ble.w	10c3e <_svfprintf_r+0xade>
   10aea:	movs	r2, #0
   10aec:	movs	r3, #0
   10aee:	ldrd	r0, r1, [sp, #64]	; 0x40
   10af2:	bl	d3a0 <__aeabi_dcmpeq>
   10af6:	cmp	r0, #0
   10af8:	beq.w	10d68 <_svfprintf_r+0xc08>
   10afc:	ldr	r3, [sp, #144]	; 0x90
   10afe:	ldr	r2, [pc, #116]	; (10b74 <_svfprintf_r+0xa14>)
   10b00:	str.w	r2, [r9]
   10b04:	adds	r3, #1
   10b06:	adds	r4, #1
   10b08:	movs	r2, #1
   10b0a:	cmp	r3, #7
   10b0c:	str	r4, [sp, #148]	; 0x94
   10b0e:	str	r3, [sp, #144]	; 0x90
   10b10:	str.w	r2, [r9, #4]
   10b14:	bgt.w	112f4 <_svfprintf_r+0x1194>
   10b18:	add.w	r9, r9, #8
   10b1c:	ldr	r3, [sp, #116]	; 0x74
   10b1e:	ldr	r2, [sp, #56]	; 0x38
   10b20:	cmp	r3, r2
   10b22:	blt.n	10b2c <_svfprintf_r+0x9cc>
   10b24:	ldr	r3, [sp, #12]
   10b26:	lsls	r3, r3, #31
   10b28:	bpl.w	1068c <_svfprintf_r+0x52c>
   10b2c:	ldr	r3, [sp, #144]	; 0x90
   10b2e:	ldr	r1, [sp, #72]	; 0x48
   10b30:	ldr	r2, [sp, #76]	; 0x4c
   10b32:	str.w	r2, [r9]
   10b36:	adds	r3, #1
   10b38:	add	r4, r1
   10b3a:	cmp	r3, #7
   10b3c:	str	r4, [sp, #148]	; 0x94
   10b3e:	str.w	r1, [r9, #4]
   10b42:	str	r3, [sp, #144]	; 0x90
   10b44:	bgt.w	113d6 <_svfprintf_r+0x1276>
   10b48:	add.w	r9, r9, #8
   10b4c:	ldr	r3, [sp, #56]	; 0x38
   10b4e:	subs	r5, r3, #1
   10b50:	cmp	r5, #0
   10b52:	ble.w	1068c <_svfprintf_r+0x52c>
   10b56:	ldr	r2, [pc, #32]	; (10b78 <_svfprintf_r+0xa18>)
   10b58:	ldr	r3, [sp, #144]	; 0x90
   10b5a:	str	r2, [sp, #44]	; 0x2c
   10b5c:	cmp	r5, #16
   10b5e:	ble.w	10f34 <_svfprintf_r+0xdd4>
   10b62:	movs	r6, #16
   10b64:	ldr	r7, [sp, #24]
   10b66:	ldr.w	fp, [sp, #20]
   10b6a:	b.n	10b88 <_svfprintf_r+0xa28>
   10b6c:	.word	0x000122b8
   10b70:	.word	0x000122cc
   10b74:	.word	0x00012294
   10b78:	.word	0x00012298
   10b7c:	add.w	r9, r9, #8
   10b80:	subs	r5, #16
   10b82:	cmp	r5, #16
   10b84:	ble.w	10f34 <_svfprintf_r+0xdd4>
   10b88:	adds	r3, #1
   10b8a:	adds	r4, #16
   10b8c:	cmp	r3, #7
   10b8e:	str	r4, [sp, #148]	; 0x94
   10b90:	str	r3, [sp, #144]	; 0x90
   10b92:	str.w	sl, [r9]
   10b96:	str.w	r6, [r9, #4]
   10b9a:	ble.n	10b7c <_svfprintf_r+0xa1c>
   10b9c:	add	r2, sp, #140	; 0x8c
   10b9e:	mov	r1, fp
   10ba0:	mov	r0, r7
   10ba2:	bl	11844 <__ssprint_r>
   10ba6:	cmp	r0, #0
   10ba8:	bne.w	10354 <_svfprintf_r+0x1f4>
   10bac:	ldr	r4, [sp, #148]	; 0x94
   10bae:	ldr	r3, [sp, #144]	; 0x90
   10bb0:	add.w	r9, sp, #192	; 0xc0
   10bb4:	b.n	10b80 <_svfprintf_r+0xa20>
   10bb6:	ldr	r3, [sp, #32]
   10bb8:	ldr	r2, [sp, #16]
   10bba:	subs	r7, r3, r2
   10bbc:	cmp	r7, #0
   10bbe:	ble.w	105f4 <_svfprintf_r+0x494>
   10bc2:	ldr	r2, [pc, #752]	; (10eb4 <_svfprintf_r+0xd54>)
   10bc4:	ldr	r3, [sp, #144]	; 0x90
   10bc6:	str	r2, [sp, #44]	; 0x2c
   10bc8:	cmp	r7, #16
   10bca:	ble.n	10c24 <_svfprintf_r+0xac4>
   10bcc:	mov	r2, r9
   10bce:	mov	r1, r4
   10bd0:	mov	r9, r7
   10bd2:	movs	r5, #16
   10bd4:	mov	r7, r6
   10bd6:	ldr	r4, [sp, #24]
   10bd8:	ldr	r6, [sp, #20]
   10bda:	b.n	10bea <_svfprintf_r+0xa8a>
   10bdc:	sub.w	r9, r9, #16
   10be0:	cmp.w	r9, #16
   10be4:	add.w	r2, r2, #8
   10be8:	ble.n	10c1c <_svfprintf_r+0xabc>
   10bea:	adds	r3, #1
   10bec:	adds	r1, #16
   10bee:	cmp	r3, #7
   10bf0:	str	r1, [sp, #148]	; 0x94
   10bf2:	str	r3, [sp, #144]	; 0x90
   10bf4:	str.w	sl, [r2]
   10bf8:	str	r5, [r2, #4]
   10bfa:	ble.n	10bdc <_svfprintf_r+0xa7c>
   10bfc:	add	r2, sp, #140	; 0x8c
   10bfe:	mov	r1, r6
   10c00:	mov	r0, r4
   10c02:	bl	11844 <__ssprint_r>
   10c06:	cmp	r0, #0
   10c08:	bne.w	10354 <_svfprintf_r+0x1f4>
   10c0c:	sub.w	r9, r9, #16
   10c10:	cmp.w	r9, #16
   10c14:	ldr	r1, [sp, #148]	; 0x94
   10c16:	ldr	r3, [sp, #144]	; 0x90
   10c18:	add	r2, sp, #192	; 0xc0
   10c1a:	bgt.n	10bea <_svfprintf_r+0xa8a>
   10c1c:	mov	r6, r7
   10c1e:	mov	r4, r1
   10c20:	mov	r7, r9
   10c22:	mov	r9, r2
   10c24:	adds	r3, #1
   10c26:	ldr	r2, [sp, #44]	; 0x2c
   10c28:	str	r3, [sp, #144]	; 0x90
   10c2a:	add	r4, r7
   10c2c:	cmp	r3, #7
   10c2e:	str	r4, [sp, #148]	; 0x94
   10c30:	stmia.w	r9, {r2, r7}
   10c34:	bgt.w	110b2 <_svfprintf_r+0xf52>
   10c38:	add.w	r9, r9, #8
   10c3c:	b.n	105f4 <_svfprintf_r+0x494>
   10c3e:	ldr	r3, [sp, #56]	; 0x38
   10c40:	ldr	r5, [sp, #144]	; 0x90
   10c42:	cmp	r3, #1
   10c44:	ble.w	1105c <_svfprintf_r+0xefc>
   10c48:	adds	r5, #1
   10c4a:	adds	r4, #1
   10c4c:	movs	r3, #1
   10c4e:	cmp	r5, #7
   10c50:	str	r4, [sp, #148]	; 0x94
   10c52:	str	r5, [sp, #144]	; 0x90
   10c54:	str.w	r6, [r9]
   10c58:	str.w	r3, [r9, #4]
   10c5c:	bgt.w	1107e <_svfprintf_r+0xf1e>
   10c60:	add.w	r9, r9, #8
   10c64:	ldr	r2, [sp, #72]	; 0x48
   10c66:	ldr	r3, [sp, #76]	; 0x4c
   10c68:	str.w	r3, [r9]
   10c6c:	adds	r5, #1
   10c6e:	add	r4, r2
   10c70:	cmp	r5, #7
   10c72:	str	r4, [sp, #148]	; 0x94
   10c74:	str	r5, [sp, #144]	; 0x90
   10c76:	str.w	r2, [r9, #4]
   10c7a:	bgt.w	11098 <_svfprintf_r+0xf38>
   10c7e:	add.w	r9, r9, #8
   10c82:	movs	r3, #0
   10c84:	movs	r2, #0
   10c86:	ldrd	r0, r1, [sp, #64]	; 0x40
   10c8a:	bl	d3a0 <__aeabi_dcmpeq>
   10c8e:	ldr	r3, [sp, #56]	; 0x38
   10c90:	cmp	r0, #0
   10c92:	bne.w	10e1c <_svfprintf_r+0xcbc>
   10c96:	subs	r3, #1
   10c98:	adds	r5, #1
   10c9a:	adds	r6, #1
   10c9c:	add	r4, r3
   10c9e:	cmp	r5, #7
   10ca0:	str	r5, [sp, #144]	; 0x90
   10ca2:	str	r4, [sp, #148]	; 0x94
   10ca4:	str.w	r6, [r9]
   10ca8:	str.w	r3, [r9, #4]
   10cac:	bgt.w	10e9a <_svfprintf_r+0xd3a>
   10cb0:	add.w	r9, r9, #8
   10cb4:	ldr	r2, [sp, #84]	; 0x54
   10cb6:	str.w	r2, [r9, #4]
   10cba:	adds	r5, #1
   10cbc:	add	r4, r2
   10cbe:	add	r3, sp, #124	; 0x7c
   10cc0:	cmp	r5, #7
   10cc2:	str	r4, [sp, #148]	; 0x94
   10cc4:	str	r5, [sp, #144]	; 0x90
   10cc6:	str.w	r3, [r9]
   10cca:	ble.w	10688 <_svfprintf_r+0x528>
   10cce:	add	r2, sp, #140	; 0x8c
   10cd0:	ldr	r1, [sp, #20]
   10cd2:	ldr	r0, [sp, #24]
   10cd4:	bl	11844 <__ssprint_r>
   10cd8:	cmp	r0, #0
   10cda:	bne.w	10354 <_svfprintf_r+0x1f4>
   10cde:	ldr	r4, [sp, #148]	; 0x94
   10ce0:	add.w	r9, sp, #192	; 0xc0
   10ce4:	b.n	1068c <_svfprintf_r+0x52c>
   10ce6:	add	r2, sp, #140	; 0x8c
   10ce8:	ldr	r1, [sp, #20]
   10cea:	ldr	r0, [sp, #24]
   10cec:	bl	11844 <__ssprint_r>
   10cf0:	cmp	r0, #0
   10cf2:	beq.w	10728 <_svfprintf_r+0x5c8>
   10cf6:	b.w	10354 <_svfprintf_r+0x1f4>
   10cfa:	add	r2, sp, #140	; 0x8c
   10cfc:	ldr	r1, [sp, #20]
   10cfe:	ldr	r0, [sp, #24]
   10d00:	bl	11844 <__ssprint_r>
   10d04:	cmp	r0, #0
   10d06:	bne.w	10354 <_svfprintf_r+0x1f4>
   10d0a:	ldr	r4, [sp, #148]	; 0x94
   10d0c:	add.w	r9, sp, #192	; 0xc0
   10d10:	b.n	10666 <_svfprintf_r+0x506>
   10d12:	add	r2, sp, #140	; 0x8c
   10d14:	ldr	r1, [sp, #20]
   10d16:	ldr	r0, [sp, #24]
   10d18:	bl	11844 <__ssprint_r>
   10d1c:	cmp	r0, #0
   10d1e:	bne.w	10354 <_svfprintf_r+0x1f4>
   10d22:	ldr	r4, [sp, #148]	; 0x94
   10d24:	add.w	r9, sp, #192	; 0xc0
   10d28:	b.n	105cc <_svfprintf_r+0x46c>
   10d2a:	add	r2, sp, #140	; 0x8c
   10d2c:	ldr	r1, [sp, #20]
   10d2e:	ldr	r0, [sp, #24]
   10d30:	bl	11844 <__ssprint_r>
   10d34:	cmp	r0, #0
   10d36:	bne.w	10354 <_svfprintf_r+0x1f4>
   10d3a:	ldr	r4, [sp, #148]	; 0x94
   10d3c:	add.w	r9, sp, #192	; 0xc0
   10d40:	b.n	105ec <_svfprintf_r+0x48c>
   10d42:	cmp.w	fp, #0
   10d46:	strb.w	r7, [sp, #111]	; 0x6f
   10d4a:	blt.w	1130c <_svfprintf_r+0x11ac>
   10d4e:	bic.w	r3, r2, #128	; 0x80
   10d52:	str	r3, [sp, #12]
   10d54:	orrs.w	r3, r4, r5
   10d58:	bne.w	10902 <_svfprintf_r+0x7a2>
   10d5c:	cmp.w	fp, #0
   10d60:	beq.w	10a7c <_svfprintf_r+0x91c>
   10d64:	movs	r7, #0
   10d66:	b.n	10ad8 <_svfprintf_r+0x978>
   10d68:	ldr	r5, [sp, #116]	; 0x74
   10d6a:	cmp	r5, #0
   10d6c:	ble.w	11312 <_svfprintf_r+0x11b2>
   10d70:	ldr	r3, [sp, #60]	; 0x3c
   10d72:	ldr	r2, [sp, #56]	; 0x38
   10d74:	cmp	r3, r2
   10d76:	it	ge
   10d78:	movge	r3, r2
   10d7a:	cmp	r3, #0
   10d7c:	mov	r5, r3
   10d7e:	ble.n	10d9c <_svfprintf_r+0xc3c>
   10d80:	ldr	r3, [sp, #144]	; 0x90
   10d82:	str.w	r6, [r9]
   10d86:	adds	r3, #1
   10d88:	add	r4, r5
   10d8a:	cmp	r3, #7
   10d8c:	str	r4, [sp, #148]	; 0x94
   10d8e:	str.w	r5, [r9, #4]
   10d92:	str	r3, [sp, #144]	; 0x90
   10d94:	bgt.w	114ea <_svfprintf_r+0x138a>
   10d98:	add.w	r9, r9, #8
   10d9c:	ldr	r3, [sp, #60]	; 0x3c
   10d9e:	cmp	r5, #0
   10da0:	it	ge
   10da2:	subge	r3, r3, r5
   10da4:	cmp	r3, #0
   10da6:	mov	r5, r3
   10da8:	ble.w	10f9c <_svfprintf_r+0xe3c>
   10dac:	ldr	r2, [pc, #260]	; (10eb4 <_svfprintf_r+0xd54>)
   10dae:	ldr	r3, [sp, #144]	; 0x90
   10db0:	str	r2, [sp, #44]	; 0x2c
   10db2:	cmp	r5, #16
   10db4:	ble.w	112be <_svfprintf_r+0x115e>
   10db8:	mov	r2, r4
   10dba:	movs	r7, #16
   10dbc:	ldr.w	fp, [sp, #24]
   10dc0:	ldr	r4, [sp, #20]
   10dc2:	b.n	10dd0 <_svfprintf_r+0xc70>
   10dc4:	add.w	r9, r9, #8
   10dc8:	subs	r5, #16
   10dca:	cmp	r5, #16
   10dcc:	ble.w	112bc <_svfprintf_r+0x115c>
   10dd0:	adds	r3, #1
   10dd2:	adds	r2, #16
   10dd4:	cmp	r3, #7
   10dd6:	str	r2, [sp, #148]	; 0x94
   10dd8:	str	r3, [sp, #144]	; 0x90
   10dda:	str.w	sl, [r9]
   10dde:	str.w	r7, [r9, #4]
   10de2:	ble.n	10dc4 <_svfprintf_r+0xc64>
   10de4:	add	r2, sp, #140	; 0x8c
   10de6:	mov	r1, r4
   10de8:	mov	r0, fp
   10dea:	bl	11844 <__ssprint_r>
   10dee:	cmp	r0, #0
   10df0:	bne.w	10354 <_svfprintf_r+0x1f4>
   10df4:	ldr	r2, [sp, #148]	; 0x94
   10df6:	ldr	r3, [sp, #144]	; 0x90
   10df8:	add.w	r9, sp, #192	; 0xc0
   10dfc:	b.n	10dc8 <_svfprintf_r+0xc68>
   10dfe:	add	r2, sp, #140	; 0x8c
   10e00:	ldr	r1, [sp, #20]
   10e02:	ldr	r0, [sp, #24]
   10e04:	bl	11844 <__ssprint_r>
   10e08:	cmp	r0, #0
   10e0a:	bne.w	10354 <_svfprintf_r+0x1f4>
   10e0e:	ldrb.w	r7, [sp, #111]	; 0x6f
   10e12:	ldr	r4, [sp, #148]	; 0x94
   10e14:	add.w	r9, sp, #192	; 0xc0
   10e18:	b.w	105ac <_svfprintf_r+0x44c>
   10e1c:	subs	r6, r3, #1
   10e1e:	cmp	r6, #0
   10e20:	ble.w	10cb4 <_svfprintf_r+0xb54>
   10e24:	ldr	r3, [pc, #140]	; (10eb4 <_svfprintf_r+0xd54>)
   10e26:	str	r3, [sp, #44]	; 0x2c
   10e28:	cmp	r6, #16
   10e2a:	ble.n	10e86 <_svfprintf_r+0xd26>
   10e2c:	str.w	r8, [sp, #36]	; 0x24
   10e30:	movs	r7, #16
   10e32:	mov	r8, r6
   10e34:	ldr.w	fp, [sp, #24]
   10e38:	ldr	r6, [sp, #20]
   10e3a:	b.n	10e4a <_svfprintf_r+0xcea>
   10e3c:	sub.w	r8, r8, #16
   10e40:	cmp.w	r8, #16
   10e44:	add.w	r9, r9, #8
   10e48:	ble.n	10e80 <_svfprintf_r+0xd20>
   10e4a:	adds	r5, #1
   10e4c:	adds	r4, #16
   10e4e:	cmp	r5, #7
   10e50:	str	r4, [sp, #148]	; 0x94
   10e52:	str	r5, [sp, #144]	; 0x90
   10e54:	str.w	sl, [r9]
   10e58:	str.w	r7, [r9, #4]
   10e5c:	ble.n	10e3c <_svfprintf_r+0xcdc>
   10e5e:	add	r2, sp, #140	; 0x8c
   10e60:	mov	r1, r6
   10e62:	mov	r0, fp
   10e64:	bl	11844 <__ssprint_r>
   10e68:	cmp	r0, #0
   10e6a:	bne.w	10354 <_svfprintf_r+0x1f4>
   10e6e:	sub.w	r8, r8, #16
   10e72:	cmp.w	r8, #16
   10e76:	ldr	r4, [sp, #148]	; 0x94
   10e78:	ldr	r5, [sp, #144]	; 0x90
   10e7a:	add.w	r9, sp, #192	; 0xc0
   10e7e:	bgt.n	10e4a <_svfprintf_r+0xcea>
   10e80:	mov	r6, r8
   10e82:	ldr.w	r8, [sp, #36]	; 0x24
   10e86:	ldr	r3, [sp, #44]	; 0x2c
   10e88:	adds	r5, #1
   10e8a:	add	r4, r6
   10e8c:	cmp	r5, #7
   10e8e:	str	r4, [sp, #148]	; 0x94
   10e90:	str	r5, [sp, #144]	; 0x90
   10e92:	stmia.w	r9, {r3, r6}
   10e96:	ble.w	10cb0 <_svfprintf_r+0xb50>
   10e9a:	add	r2, sp, #140	; 0x8c
   10e9c:	ldr	r1, [sp, #20]
   10e9e:	ldr	r0, [sp, #24]
   10ea0:	bl	11844 <__ssprint_r>
   10ea4:	cmp	r0, #0
   10ea6:	bne.w	10354 <_svfprintf_r+0x1f4>
   10eaa:	ldr	r4, [sp, #148]	; 0x94
   10eac:	ldr	r5, [sp, #144]	; 0x90
   10eae:	add.w	r9, sp, #192	; 0xc0
   10eb2:	b.n	10cb4 <_svfprintf_r+0xb54>
   10eb4:	.word	0x00012298
   10eb8:	ldr	r1, [sp, #12]
   10eba:	ands.w	r2, r1, #16
   10ebe:	beq.w	11268 <_svfprintf_r+0x1108>
   10ec2:	ldr	r0, [sp, #40]	; 0x28
   10ec4:	strb.w	r3, [sp, #111]	; 0x6f
   10ec8:	cmp.w	fp, #0
   10ecc:	ldr	r4, [r0, #0]
   10ece:	add.w	r7, r0, #4
   10ed2:	mov.w	r5, #0
   10ed6:	blt.n	10f26 <_svfprintf_r+0xdc6>
   10ed8:	mov	r2, r1
   10eda:	bic.w	r2, r2, #128	; 0x80
   10ede:	str	r2, [sp, #12]
   10ee0:	orrs.w	r2, r4, r5
   10ee4:	str	r7, [sp, #40]	; 0x28
   10ee6:	mov	r7, r3
   10ee8:	bne.w	104bc <_svfprintf_r+0x35c>
   10eec:	b.n	1088c <_svfprintf_r+0x72c>
   10eee:	ldr	r3, [sp, #12]
   10ef0:	lsls	r0, r3, #27
   10ef2:	bmi.n	10f4a <_svfprintf_r+0xdea>
   10ef4:	ldr	r3, [sp, #12]
   10ef6:	lsls	r1, r3, #25
   10ef8:	bpl.n	10f4a <_svfprintf_r+0xdea>
   10efa:	ldr	r1, [sp, #40]	; 0x28
   10efc:	ldrsh.w	r4, [r1]
   10f00:	adds	r1, #4
   10f02:	asrs	r5, r4, #31
   10f04:	mov	r2, r4
   10f06:	mov	r3, r5
   10f08:	str	r1, [sp, #40]	; 0x28
   10f0a:	b.w	10496 <_svfprintf_r+0x336>
   10f0e:	ldr	r1, [sp, #40]	; 0x28
   10f10:	strb.w	r3, [sp, #111]	; 0x6f
   10f14:	cmp.w	fp, #0
   10f18:	ldr	r4, [r1, #0]
   10f1a:	add.w	r7, r1, #4
   10f1e:	mov.w	r5, #0
   10f22:	bge.w	113be <_svfprintf_r+0x125e>
   10f26:	str	r7, [sp, #40]	; 0x28
   10f28:	mov	r7, r3
   10f2a:	orrs.w	r3, r4, r5
   10f2e:	bne.w	104bc <_svfprintf_r+0x35c>
   10f32:	b.n	10896 <_svfprintf_r+0x736>
   10f34:	adds	r3, #1
   10f36:	ldr	r2, [sp, #44]	; 0x2c
   10f38:	str	r3, [sp, #144]	; 0x90
   10f3a:	add	r4, r5
   10f3c:	cmp	r3, #7
   10f3e:	str	r4, [sp, #148]	; 0x94
   10f40:	stmia.w	r9, {r2, r5}
   10f44:	ble.w	10688 <_svfprintf_r+0x528>
   10f48:	b.n	10cce <_svfprintf_r+0xb6e>
   10f4a:	ldr	r2, [sp, #40]	; 0x28
   10f4c:	ldr	r4, [r2, #0]
   10f4e:	mov	r3, r2
   10f50:	adds	r3, #4
   10f52:	asrs	r5, r4, #31
   10f54:	mov	r2, r4
   10f56:	str	r3, [sp, #40]	; 0x28
   10f58:	cmp	r2, #0
   10f5a:	mov	r3, r5
   10f5c:	sbcs.w	r3, r3, #0
   10f60:	bge.w	104a0 <_svfprintf_r+0x340>
   10f64:	negs	r4, r4
   10f66:	mov.w	r7, #45	; 0x2d
   10f6a:	sbc.w	r5, r5, r5, lsl #1
   10f6e:	cmp.w	fp, #0
   10f72:	strb.w	r7, [sp, #111]	; 0x6f
   10f76:	blt.w	104bc <_svfprintf_r+0x35c>
   10f7a:	ldr	r3, [sp, #12]
   10f7c:	bic.w	r3, r3, #128	; 0x80
   10f80:	str	r3, [sp, #12]
   10f82:	b.w	104bc <_svfprintf_r+0x35c>
   10f86:	add	r2, sp, #140	; 0x8c
   10f88:	ldr	r1, [sp, #20]
   10f8a:	ldr	r0, [sp, #24]
   10f8c:	bl	11844 <__ssprint_r>
   10f90:	cmp	r0, #0
   10f92:	bne.w	10354 <_svfprintf_r+0x1f4>
   10f96:	ldr	r4, [sp, #148]	; 0x94
   10f98:	add.w	r9, sp, #192	; 0xc0
   10f9c:	ldr	r2, [sp, #60]	; 0x3c
   10f9e:	ldr	r3, [sp, #116]	; 0x74
   10fa0:	add	r2, r6
   10fa2:	mov	r7, r2
   10fa4:	ldr	r2, [sp, #56]	; 0x38
   10fa6:	cmp	r3, r2
   10fa8:	blt.n	1103a <_svfprintf_r+0xeda>
   10faa:	ldr	r2, [sp, #12]
   10fac:	lsls	r5, r2, #31
   10fae:	bmi.n	1103a <_svfprintf_r+0xeda>
   10fb0:	ldr	r1, [sp, #56]	; 0x38
   10fb2:	add	r6, r1
   10fb4:	subs	r5, r6, r7
   10fb6:	subs	r3, r1, r3
   10fb8:	cmp	r5, r3
   10fba:	it	ge
   10fbc:	movge	r5, r3
   10fbe:	cmp	r5, #0
   10fc0:	mov	r6, r5
   10fc2:	ble.n	10fe0 <_svfprintf_r+0xe80>
   10fc4:	ldr	r2, [sp, #144]	; 0x90
   10fc6:	str.w	r7, [r9]
   10fca:	adds	r2, #1
   10fcc:	add	r4, r5
   10fce:	cmp	r2, #7
   10fd0:	str	r4, [sp, #148]	; 0x94
   10fd2:	str.w	r5, [r9, #4]
   10fd6:	str	r2, [sp, #144]	; 0x90
   10fd8:	bgt.w	115d8 <_svfprintf_r+0x1478>
   10fdc:	add.w	r9, r9, #8
   10fe0:	cmp	r6, #0
   10fe2:	ite	ge
   10fe4:	subge	r5, r3, r6
   10fe6:	movlt	r5, r3
   10fe8:	cmp	r5, #0
   10fea:	ble.w	1068c <_svfprintf_r+0x52c>
   10fee:	ldr	r2, [pc, #744]	; (112d8 <_svfprintf_r+0x1178>)
   10ff0:	ldr	r3, [sp, #144]	; 0x90
   10ff2:	str	r2, [sp, #44]	; 0x2c
   10ff4:	cmp	r5, #16
   10ff6:	ble.n	10f34 <_svfprintf_r+0xdd4>
   10ff8:	movs	r6, #16
   10ffa:	ldr	r7, [sp, #24]
   10ffc:	ldr.w	fp, [sp, #20]
   11000:	b.n	1100c <_svfprintf_r+0xeac>
   11002:	add.w	r9, r9, #8
   11006:	subs	r5, #16
   11008:	cmp	r5, #16
   1100a:	ble.n	10f34 <_svfprintf_r+0xdd4>
   1100c:	adds	r3, #1
   1100e:	adds	r4, #16
   11010:	cmp	r3, #7
   11012:	str	r4, [sp, #148]	; 0x94
   11014:	str	r3, [sp, #144]	; 0x90
   11016:	str.w	sl, [r9]
   1101a:	str.w	r6, [r9, #4]
   1101e:	ble.n	11002 <_svfprintf_r+0xea2>
   11020:	add	r2, sp, #140	; 0x8c
   11022:	mov	r1, fp
   11024:	mov	r0, r7
   11026:	bl	11844 <__ssprint_r>
   1102a:	cmp	r0, #0
   1102c:	bne.w	10354 <_svfprintf_r+0x1f4>
   11030:	ldr	r4, [sp, #148]	; 0x94
   11032:	ldr	r3, [sp, #144]	; 0x90
   11034:	add.w	r9, sp, #192	; 0xc0
   11038:	b.n	11006 <_svfprintf_r+0xea6>
   1103a:	ldr	r2, [sp, #144]	; 0x90
   1103c:	ldr	r0, [sp, #72]	; 0x48
   1103e:	ldr	r1, [sp, #76]	; 0x4c
   11040:	str.w	r1, [r9]
   11044:	adds	r2, #1
   11046:	add	r4, r0
   11048:	cmp	r2, #7
   1104a:	str	r4, [sp, #148]	; 0x94
   1104c:	str.w	r0, [r9, #4]
   11050:	str	r2, [sp, #144]	; 0x90
   11052:	bgt.w	115be <_svfprintf_r+0x145e>
   11056:	add.w	r9, r9, #8
   1105a:	b.n	10fb0 <_svfprintf_r+0xe50>
   1105c:	ldr	r3, [sp, #12]
   1105e:	lsls	r0, r3, #31
   11060:	bmi.w	10c48 <_svfprintf_r+0xae8>
   11064:	adds	r5, #1
   11066:	adds	r4, #1
   11068:	movs	r3, #1
   1106a:	cmp	r5, #7
   1106c:	str	r4, [sp, #148]	; 0x94
   1106e:	str	r5, [sp, #144]	; 0x90
   11070:	str.w	r6, [r9]
   11074:	str.w	r3, [r9, #4]
   11078:	ble.w	10cb0 <_svfprintf_r+0xb50>
   1107c:	b.n	10e9a <_svfprintf_r+0xd3a>
   1107e:	add	r2, sp, #140	; 0x8c
   11080:	ldr	r1, [sp, #20]
   11082:	ldr	r0, [sp, #24]
   11084:	bl	11844 <__ssprint_r>
   11088:	cmp	r0, #0
   1108a:	bne.w	10354 <_svfprintf_r+0x1f4>
   1108e:	ldr	r4, [sp, #148]	; 0x94
   11090:	ldr	r5, [sp, #144]	; 0x90
   11092:	add.w	r9, sp, #192	; 0xc0
   11096:	b.n	10c64 <_svfprintf_r+0xb04>
   11098:	add	r2, sp, #140	; 0x8c
   1109a:	ldr	r1, [sp, #20]
   1109c:	ldr	r0, [sp, #24]
   1109e:	bl	11844 <__ssprint_r>
   110a2:	cmp	r0, #0
   110a4:	bne.w	10354 <_svfprintf_r+0x1f4>
   110a8:	ldr	r4, [sp, #148]	; 0x94
   110aa:	ldr	r5, [sp, #144]	; 0x90
   110ac:	add.w	r9, sp, #192	; 0xc0
   110b0:	b.n	10c82 <_svfprintf_r+0xb22>
   110b2:	add	r2, sp, #140	; 0x8c
   110b4:	ldr	r1, [sp, #20]
   110b6:	ldr	r0, [sp, #24]
   110b8:	bl	11844 <__ssprint_r>
   110bc:	cmp	r0, #0
   110be:	bne.w	10354 <_svfprintf_r+0x1f4>
   110c2:	ldr	r4, [sp, #148]	; 0x94
   110c4:	add.w	r9, sp, #192	; 0xc0
   110c8:	b.w	105f4 <_svfprintf_r+0x494>
   110cc:	ldr	r1, [sp, #12]
   110ce:	ands.w	r3, r1, #64	; 0x40
   110d2:	beq.w	11248 <_svfprintf_r+0x10e8>
   110d6:	ldr	r0, [sp, #40]	; 0x28
   110d8:	strb.w	r2, [sp, #111]	; 0x6f
   110dc:	mov	r3, r0
   110de:	cmp.w	fp, #0
   110e2:	add.w	r3, r3, #4
   110e6:	ldrh	r4, [r0, #0]
   110e8:	mov.w	r5, #0
   110ec:	blt.w	11470 <_svfprintf_r+0x1310>
   110f0:	bic.w	r1, r1, #128	; 0x80
   110f4:	str	r1, [sp, #12]
   110f6:	orrs.w	r1, r4, r5
   110fa:	str	r3, [sp, #40]	; 0x28
   110fc:	beq.w	10ab4 <_svfprintf_r+0x954>
   11100:	mov	r7, r2
   11102:	b.w	103ac <_svfprintf_r+0x24c>
   11106:	ldr	r3, [sp, #12]
   11108:	lsls	r7, r3, #27
   1110a:	bmi.n	11124 <_svfprintf_r+0xfc4>
   1110c:	ldr	r3, [sp, #12]
   1110e:	lsls	r6, r3, #25
   11110:	bpl.n	11124 <_svfprintf_r+0xfc4>
   11112:	ldr	r2, [sp, #40]	; 0x28
   11114:	ldr	r3, [r2, #0]
   11116:	adds	r2, #4
   11118:	str	r2, [sp, #40]	; 0x28
   1111a:	ldrh.w	r2, [sp, #28]
   1111e:	strh	r2, [r3, #0]
   11120:	b.w	101ae <_svfprintf_r+0x4e>
   11124:	ldr	r2, [sp, #40]	; 0x28
   11126:	ldr	r3, [r2, #0]
   11128:	adds	r2, #4
   1112a:	str	r2, [sp, #40]	; 0x28
   1112c:	ldr	r2, [sp, #28]
   1112e:	str	r2, [r3, #0]
   11130:	b.w	101ae <_svfprintf_r+0x4e>
   11134:	ldrd	r0, r1, [sp, #64]	; 0x40
   11138:	mov	r2, r0
   1113a:	mov	r3, r1
   1113c:	bl	d404 <__aeabi_dcmpun>
   11140:	cmp	r0, #0
   11142:	bne.w	11740 <_svfprintf_r+0x15e0>
   11146:	ldr	r3, [sp, #52]	; 0x34
   11148:	cmp.w	fp, #4294967295
   1114c:	bic.w	r7, r3, #32
   11150:	beq.w	11622 <_svfprintf_r+0x14c2>
   11154:	cmp	r7, #71	; 0x47
   11156:	beq.w	1145e <_svfprintf_r+0x12fe>
   1115a:	ldr	r3, [sp, #68]	; 0x44
   1115c:	ldr	r2, [sp, #12]
   1115e:	cmp	r3, #0
   11160:	orr.w	r2, r2, #256	; 0x100
   11164:	str	r2, [sp, #44]	; 0x2c
   11166:	blt.w	1165a <_svfprintf_r+0x14fa>
   1116a:	vldr	d7, [sp, #64]	; 0x40
   1116e:	vstr	d7, [sp, #96]	; 0x60
   11172:	movs	r3, #0
   11174:	str	r3, [sp, #16]
   11176:	ldr	r3, [sp, #52]	; 0x34
   11178:	cmp	r3, #102	; 0x66
   1117a:	beq.w	11628 <_svfprintf_r+0x14c8>
   1117e:	cmp	r3, #70	; 0x46
   11180:	beq.w	1140e <_svfprintf_r+0x12ae>
   11184:	cmp	r7, #69	; 0x45
   11186:	ite	eq
   11188:	addeq.w	r5, fp, #1
   1118c:	movne	r5, fp
   1118e:	add	r2, sp, #132	; 0x84
   11190:	add	r3, sp, #120	; 0x78
   11192:	str	r2, [sp, #4]
   11194:	str	r3, [sp, #0]
   11196:	mov	r2, r5
   11198:	add	r3, sp, #116	; 0x74
   1119a:	movs	r1, #2
   1119c:	vldr	d0, [sp, #96]	; 0x60
   111a0:	ldr	r0, [sp, #24]
   111a2:	bl	f328 <_dtoa_r>
   111a6:	ldr	r3, [sp, #52]	; 0x34
   111a8:	cmp	r3, #103	; 0x67
   111aa:	mov	r6, r0
   111ac:	bne.w	11686 <_svfprintf_r+0x1526>
   111b0:	ldr	r3, [sp, #12]
   111b2:	lsls	r2, r3, #31
   111b4:	bpl.w	1172a <_svfprintf_r+0x15ca>
   111b8:	adds	r4, r6, r5
   111ba:	movs	r2, #0
   111bc:	movs	r3, #0
   111be:	ldrd	r0, r1, [sp, #96]	; 0x60
   111c2:	bl	d3a0 <__aeabi_dcmpeq>
   111c6:	cmp	r0, #0
   111c8:	bne.w	114e6 <_svfprintf_r+0x1386>
   111cc:	ldr	r3, [sp, #132]	; 0x84
   111ce:	cmp	r4, r3
   111d0:	bls.n	111e0 <_svfprintf_r+0x1080>
   111d2:	movs	r1, #48	; 0x30
   111d4:	adds	r2, r3, #1
   111d6:	str	r2, [sp, #132]	; 0x84
   111d8:	strb	r1, [r3, #0]
   111da:	ldr	r3, [sp, #132]	; 0x84
   111dc:	cmp	r4, r3
   111de:	bhi.n	111d4 <_svfprintf_r+0x1074>
   111e0:	subs	r3, r3, r6
   111e2:	cmp	r7, #71	; 0x47
   111e4:	str	r3, [sp, #56]	; 0x38
   111e6:	beq.w	114d8 <_svfprintf_r+0x1378>
   111ea:	ldr	r3, [sp, #52]	; 0x34
   111ec:	cmp	r3, #101	; 0x65
   111ee:	ble.w	116a4 <_svfprintf_r+0x1544>
   111f2:	ldr	r3, [sp, #52]	; 0x34
   111f4:	cmp	r3, #102	; 0x66
   111f6:	ldr	r3, [sp, #116]	; 0x74
   111f8:	str	r3, [sp, #60]	; 0x3c
   111fa:	beq.w	116be <_svfprintf_r+0x155e>
   111fe:	ldr	r2, [sp, #60]	; 0x3c
   11200:	ldr	r1, [sp, #56]	; 0x38
   11202:	cmp	r2, r1
   11204:	blt.w	1166c <_svfprintf_r+0x150c>
   11208:	ldr	r3, [sp, #12]
   1120a:	lsls	r1, r3, #31
   1120c:	bmi.w	1172e <_svfprintf_r+0x15ce>
   11210:	bic.w	r3, r2, r2, asr #31
   11214:	str	r2, [sp, #36]	; 0x24
   11216:	movs	r2, #103	; 0x67
   11218:	str	r2, [sp, #52]	; 0x34
   1121a:	ldr	r2, [sp, #16]
   1121c:	cmp	r2, #0
   1121e:	bne.w	11480 <_svfprintf_r+0x1320>
   11222:	str	r3, [sp, #16]
   11224:	ldr	r3, [sp, #44]	; 0x2c
   11226:	str	r3, [sp, #12]
   11228:	mov	fp, r2
   1122a:	ldrb.w	r7, [sp, #111]	; 0x6f
   1122e:	b.w	10504 <_svfprintf_r+0x3a4>
   11232:	bic.w	r7, r7, #7
   11236:	vldr	d7, [r7]
   1123a:	add.w	r3, r7, #8
   1123e:	vstr	d7, [sp, #64]	; 0x40
   11242:	str	r3, [sp, #40]	; 0x28
   11244:	b.w	1075c <_svfprintf_r+0x5fc>
   11248:	ldr	r1, [sp, #40]	; 0x28
   1124a:	strb.w	r3, [sp, #111]	; 0x6f
   1124e:	cmp.w	fp, #0
   11252:	ldr	r4, [r1, #0]
   11254:	add.w	r7, r1, #4
   11258:	mov.w	r5, #0
   1125c:	bge.w	113b8 <_svfprintf_r+0x1258>
   11260:	str	r7, [sp, #40]	; 0x28
   11262:	movs	r7, #0
   11264:	b.w	103ac <_svfprintf_r+0x24c>
   11268:	ldr	r1, [sp, #12]
   1126a:	ands.w	r3, r1, #64	; 0x40
   1126e:	beq.w	10f0e <_svfprintf_r+0xdae>
   11272:	ldr	r0, [sp, #40]	; 0x28
   11274:	strb.w	r2, [sp, #111]	; 0x6f
   11278:	mov	r3, r0
   1127a:	cmp.w	fp, #0
   1127e:	add.w	r3, r3, #4
   11282:	ldrh	r4, [r0, #0]
   11284:	mov.w	r5, #0
   11288:	blt.w	1146a <_svfprintf_r+0x130a>
   1128c:	bic.w	r1, r1, #128	; 0x80
   11290:	str	r1, [sp, #12]
   11292:	orrs.w	r1, r4, r5
   11296:	str	r3, [sp, #40]	; 0x28
   11298:	mov	r7, r2
   1129a:	bne.w	104bc <_svfprintf_r+0x35c>
   1129e:	b.w	1088c <_svfprintf_r+0x72c>
   112a2:	ldr	r3, [sp, #12]
   112a4:	ldr	r2, [sp, #40]	; 0x28
   112a6:	tst.w	r3, #64	; 0x40
   112aa:	mov	r3, r2
   112ac:	beq.w	11474 <_svfprintf_r+0x1314>
   112b0:	adds	r3, #4
   112b2:	ldrh	r4, [r2, #0]
   112b4:	str	r3, [sp, #40]	; 0x28
   112b6:	movs	r5, #0
   112b8:	b.w	108c6 <_svfprintf_r+0x766>
   112bc:	mov	r4, r2
   112be:	adds	r3, #1
   112c0:	ldr	r2, [sp, #44]	; 0x2c
   112c2:	str	r3, [sp, #144]	; 0x90
   112c4:	add	r4, r5
   112c6:	cmp	r3, #7
   112c8:	str	r4, [sp, #148]	; 0x94
   112ca:	stmia.w	r9, {r2, r5}
   112ce:	bgt.w	10f86 <_svfprintf_r+0xe26>
   112d2:	add.w	r9, r9, #8
   112d6:	b.n	10f9c <_svfprintf_r+0xe3c>
   112d8:	.word	0x00012298
   112dc:	movs	r7, #0
   112de:	cmp	fp, r7
   112e0:	strb.w	r7, [sp, #111]	; 0x6f
   112e4:	blt.w	10ad8 <_svfprintf_r+0x978>
   112e8:	ldr	r3, [sp, #12]
   112ea:	bic.w	r3, r3, #128	; 0x80
   112ee:	str	r3, [sp, #12]
   112f0:	b.w	10a74 <_svfprintf_r+0x914>
   112f4:	add	r2, sp, #140	; 0x8c
   112f6:	ldr	r1, [sp, #20]
   112f8:	ldr	r0, [sp, #24]
   112fa:	bl	11844 <__ssprint_r>
   112fe:	cmp	r0, #0
   11300:	bne.w	10354 <_svfprintf_r+0x1f4>
   11304:	ldr	r4, [sp, #148]	; 0x94
   11306:	add.w	r9, sp, #192	; 0xc0
   1130a:	b.n	10b1c <_svfprintf_r+0x9bc>
   1130c:	ldr	r7, [sp, #40]	; 0x28
   1130e:	b.w	10aca <_svfprintf_r+0x96a>
   11312:	ldr	r3, [sp, #144]	; 0x90
   11314:	ldr	r2, [pc, #736]	; (115f8 <_svfprintf_r+0x1498>)
   11316:	str.w	r2, [r9]
   1131a:	adds	r3, #1
   1131c:	adds	r4, #1
   1131e:	movs	r2, #1
   11320:	cmp	r3, #7
   11322:	str	r4, [sp, #148]	; 0x94
   11324:	str	r3, [sp, #144]	; 0x90
   11326:	str.w	r2, [r9, #4]
   1132a:	bgt.w	11444 <_svfprintf_r+0x12e4>
   1132e:	add.w	r9, r9, #8
   11332:	cbnz	r5, 11340 <_svfprintf_r+0x11e0>
   11334:	ldr	r3, [sp, #56]	; 0x38
   11336:	cbnz	r3, 11340 <_svfprintf_r+0x11e0>
   11338:	ldr	r3, [sp, #12]
   1133a:	lsls	r7, r3, #31
   1133c:	bpl.w	1068c <_svfprintf_r+0x52c>
   11340:	ldr	r3, [sp, #144]	; 0x90
   11342:	ldr	r1, [sp, #72]	; 0x48
   11344:	ldr	r2, [sp, #76]	; 0x4c
   11346:	str.w	r2, [r9]
   1134a:	adds	r3, #1
   1134c:	add	r4, r1
   1134e:	cmp	r3, #7
   11350:	str	r4, [sp, #148]	; 0x94
   11352:	str.w	r1, [r9, #4]
   11356:	str	r3, [sp, #144]	; 0x90
   11358:	bgt.w	116f6 <_svfprintf_r+0x1596>
   1135c:	add.w	r9, r9, #8
   11360:	negs	r5, r5
   11362:	cmp	r5, #0
   11364:	ble.w	114bc <_svfprintf_r+0x135c>
   11368:	ldr	r2, [pc, #656]	; (115fc <_svfprintf_r+0x149c>)
   1136a:	str	r2, [sp, #44]	; 0x2c
   1136c:	cmp	r5, #16
   1136e:	ble.w	11504 <_svfprintf_r+0x13a4>
   11372:	mov	r2, r4
   11374:	movs	r7, #16
   11376:	ldr.w	fp, [sp, #24]
   1137a:	ldr	r4, [sp, #20]
   1137c:	b.n	1138a <_svfprintf_r+0x122a>
   1137e:	add.w	r9, r9, #8
   11382:	subs	r5, #16
   11384:	cmp	r5, #16
   11386:	ble.w	11502 <_svfprintf_r+0x13a2>
   1138a:	adds	r3, #1
   1138c:	adds	r2, #16
   1138e:	cmp	r3, #7
   11390:	str	r2, [sp, #148]	; 0x94
   11392:	str	r3, [sp, #144]	; 0x90
   11394:	str.w	sl, [r9]
   11398:	str.w	r7, [r9, #4]
   1139c:	ble.n	1137e <_svfprintf_r+0x121e>
   1139e:	add	r2, sp, #140	; 0x8c
   113a0:	mov	r1, r4
   113a2:	mov	r0, fp
   113a4:	bl	11844 <__ssprint_r>
   113a8:	cmp	r0, #0
   113aa:	bne.w	10354 <_svfprintf_r+0x1f4>
   113ae:	ldr	r2, [sp, #148]	; 0x94
   113b0:	ldr	r3, [sp, #144]	; 0x90
   113b2:	add.w	r9, sp, #192	; 0xc0
   113b6:	b.n	11382 <_svfprintf_r+0x1222>
   113b8:	ldr	r2, [sp, #12]
   113ba:	b.w	10830 <_svfprintf_r+0x6d0>
   113be:	ldr	r2, [sp, #12]
   113c0:	b.n	10eda <_svfprintf_r+0xd7a>
   113c2:	ldr	r3, [sp, #12]
   113c4:	orr.w	r3, r3, #32
   113c8:	str	r3, [sp, #12]
   113ca:	add.w	r8, r8, #1
   113ce:	ldrb.w	r3, [r8]
   113d2:	b.w	10214 <_svfprintf_r+0xb4>
   113d6:	add	r2, sp, #140	; 0x8c
   113d8:	ldr	r1, [sp, #20]
   113da:	ldr	r0, [sp, #24]
   113dc:	bl	11844 <__ssprint_r>
   113e0:	cmp	r0, #0
   113e2:	bne.w	10354 <_svfprintf_r+0x1f4>
   113e6:	ldr	r4, [sp, #148]	; 0x94
   113e8:	add.w	r9, sp, #192	; 0xc0
   113ec:	b.w	10b4c <_svfprintf_r+0x9ec>
   113f0:	movs	r1, #64	; 0x40
   113f2:	ldr	r0, [sp, #24]
   113f4:	bl	d820 <_malloc_r>
   113f8:	ldr	r2, [sp, #20]
   113fa:	str	r0, [r2, #0]
   113fc:	str	r0, [r2, #16]
   113fe:	cmp	r0, #0
   11400:	beq.w	117ea <_svfprintf_r+0x168a>
   11404:	ldr	r2, [sp, #20]
   11406:	movs	r3, #64	; 0x40
   11408:	str	r3, [r2, #20]
   1140a:	b.w	1018e <_svfprintf_r+0x2e>
   1140e:	add	r2, sp, #132	; 0x84
   11410:	add	r3, sp, #120	; 0x78
   11412:	str	r2, [sp, #4]
   11414:	str	r3, [sp, #0]
   11416:	mov	r2, fp
   11418:	add	r3, sp, #116	; 0x74
   1141a:	movs	r1, #3
   1141c:	vldr	d0, [sp, #96]	; 0x60
   11420:	ldr	r0, [sp, #24]
   11422:	bl	f328 <_dtoa_r>
   11426:	mov	r5, fp
   11428:	mov	r6, r0
   1142a:	ldr	r3, [sp, #52]	; 0x34
   1142c:	cmp	r3, #70	; 0x46
   1142e:	add.w	r4, r6, r5
   11432:	bne.w	111ba <_svfprintf_r+0x105a>
   11436:	ldrb	r3, [r6, #0]
   11438:	cmp	r3, #48	; 0x30
   1143a:	beq.w	1174c <_svfprintf_r+0x15ec>
   1143e:	ldr	r5, [sp, #116]	; 0x74
   11440:	add	r4, r5
   11442:	b.n	111ba <_svfprintf_r+0x105a>
   11444:	add	r2, sp, #140	; 0x8c
   11446:	ldr	r1, [sp, #20]
   11448:	ldr	r0, [sp, #24]
   1144a:	bl	11844 <__ssprint_r>
   1144e:	cmp	r0, #0
   11450:	bne.w	10354 <_svfprintf_r+0x1f4>
   11454:	ldr	r5, [sp, #116]	; 0x74
   11456:	ldr	r4, [sp, #148]	; 0x94
   11458:	add.w	r9, sp, #192	; 0xc0
   1145c:	b.n	11332 <_svfprintf_r+0x11d2>
   1145e:	cmp.w	fp, #0
   11462:	it	eq
   11464:	moveq.w	fp, #1
   11468:	b.n	1115a <_svfprintf_r+0xffa>
   1146a:	str	r3, [sp, #40]	; 0x28
   1146c:	mov	r7, r2
   1146e:	b.n	10f2a <_svfprintf_r+0xdca>
   11470:	str	r3, [sp, #40]	; 0x28
   11472:	b.n	11262 <_svfprintf_r+0x1102>
   11474:	adds	r3, #4
   11476:	ldr	r4, [r2, #0]
   11478:	str	r3, [sp, #40]	; 0x28
   1147a:	movs	r5, #0
   1147c:	b.w	108c6 <_svfprintf_r+0x766>
   11480:	movs	r7, #45	; 0x2d
   11482:	str	r3, [sp, #16]
   11484:	ldr	r3, [sp, #44]	; 0x2c
   11486:	str	r3, [sp, #12]
   11488:	strb.w	r7, [sp, #111]	; 0x6f
   1148c:	mov.w	fp, #0
   11490:	b.w	10506 <_svfprintf_r+0x3a6>
   11494:	mov	r0, r6
   11496:	bl	e580 <strlen>
   1149a:	mov	fp, r4
   1149c:	mov	r3, r0
   1149e:	str	r0, [sp, #36]	; 0x24
   114a0:	b.w	109e8 <_svfprintf_r+0x888>
   114a4:	add	r2, sp, #140	; 0x8c
   114a6:	ldr	r1, [sp, #20]
   114a8:	ldr	r0, [sp, #24]
   114aa:	bl	11844 <__ssprint_r>
   114ae:	cmp	r0, #0
   114b0:	bne.w	10354 <_svfprintf_r+0x1f4>
   114b4:	ldr	r4, [sp, #148]	; 0x94
   114b6:	ldr	r3, [sp, #144]	; 0x90
   114b8:	add.w	r9, sp, #192	; 0xc0
   114bc:	ldr	r1, [sp, #56]	; 0x38
   114be:	str.w	r6, [r9]
   114c2:	adds	r3, #1
   114c4:	add	r4, r1
   114c6:	cmp	r3, #7
   114c8:	str	r4, [sp, #148]	; 0x94
   114ca:	str	r3, [sp, #144]	; 0x90
   114cc:	str.w	r1, [r9, #4]
   114d0:	ble.w	10688 <_svfprintf_r+0x528>
   114d4:	b.w	10cce <_svfprintf_r+0xb6e>
   114d8:	ldr	r3, [sp, #116]	; 0x74
   114da:	adds	r5, r3, #3
   114dc:	blt.n	1151c <_svfprintf_r+0x13bc>
   114de:	cmp	fp, r3
   114e0:	blt.n	1151c <_svfprintf_r+0x13bc>
   114e2:	str	r3, [sp, #60]	; 0x3c
   114e4:	b.n	111fe <_svfprintf_r+0x109e>
   114e6:	mov	r3, r4
   114e8:	b.n	111e0 <_svfprintf_r+0x1080>
   114ea:	add	r2, sp, #140	; 0x8c
   114ec:	ldr	r1, [sp, #20]
   114ee:	ldr	r0, [sp, #24]
   114f0:	bl	11844 <__ssprint_r>
   114f4:	cmp	r0, #0
   114f6:	bne.w	10354 <_svfprintf_r+0x1f4>
   114fa:	ldr	r4, [sp, #148]	; 0x94
   114fc:	add.w	r9, sp, #192	; 0xc0
   11500:	b.n	10d9c <_svfprintf_r+0xc3c>
   11502:	mov	r4, r2
   11504:	adds	r3, #1
   11506:	ldr	r2, [sp, #44]	; 0x2c
   11508:	str	r3, [sp, #144]	; 0x90
   1150a:	add	r4, r5
   1150c:	cmp	r3, #7
   1150e:	str	r4, [sp, #148]	; 0x94
   11510:	stmia.w	r9, {r2, r5}
   11514:	bgt.n	114a4 <_svfprintf_r+0x1344>
   11516:	add.w	r9, r9, #8
   1151a:	b.n	114bc <_svfprintf_r+0x135c>
   1151c:	ldr	r2, [sp, #52]	; 0x34
   1151e:	subs	r2, #2
   11520:	str	r2, [sp, #52]	; 0x34
   11522:	subs	r3, #1
   11524:	cmp	r3, #0
   11526:	ldrb.w	r2, [sp, #52]	; 0x34
   1152a:	str	r3, [sp, #116]	; 0x74
   1152c:	it	lt
   1152e:	neglt	r3, r3
   11530:	strb.w	r2, [sp, #124]	; 0x7c
   11534:	ite	lt
   11536:	movlt	r2, #45	; 0x2d
   11538:	movge	r2, #43	; 0x2b
   1153a:	cmp	r3, #9
   1153c:	strb.w	r2, [sp, #125]	; 0x7d
   11540:	ble.w	1171a <_svfprintf_r+0x15ba>
   11544:	add.w	r0, sp, #139	; 0x8b
   11548:	mov	r4, r0
   1154a:	ldr	r2, [pc, #180]	; (11600 <_svfprintf_r+0x14a0>)
   1154c:	smull	r2, r1, r2, r3
   11550:	asrs	r2, r3, #31
   11552:	rsb	r2, r2, r1, asr #2
   11556:	add.w	r1, r2, r2, lsl #2
   1155a:	sub.w	r3, r3, r1, lsl #1
   1155e:	add.w	r1, r3, #48	; 0x30
   11562:	cmp	r2, #9
   11564:	mov	r3, r2
   11566:	strb.w	r1, [r4, #-1]!
   1156a:	bgt.n	1154a <_svfprintf_r+0x13ea>
   1156c:	mov	r1, r4
   1156e:	adds	r3, #48	; 0x30
   11570:	uxtb	r2, r3
   11572:	strb.w	r2, [r1, #-1]!
   11576:	cmp	r0, r1
   11578:	bls.w	117e4 <_svfprintf_r+0x1684>
   1157c:	add.w	r1, sp, #126	; 0x7e
   11580:	mov	r3, r4
   11582:	b.n	11588 <_svfprintf_r+0x1428>
   11584:	ldrb.w	r2, [r3], #1
   11588:	strb.w	r2, [r1], #1
   1158c:	cmp	r0, r3
   1158e:	bne.n	11584 <_svfprintf_r+0x1424>
   11590:	adds	r3, r0, #1
   11592:	subs	r3, r3, r4
   11594:	add.w	r2, sp, #126	; 0x7e
   11598:	add	r3, r2
   1159a:	add	r2, sp, #124	; 0x7c
   1159c:	subs	r3, r3, r2
   1159e:	ldr	r2, [sp, #56]	; 0x38
   115a0:	str	r3, [sp, #84]	; 0x54
   115a2:	cmp	r2, #1
   115a4:	add	r3, r2
   115a6:	str	r3, [sp, #36]	; 0x24
   115a8:	ble.w	1177a <_svfprintf_r+0x161a>
   115ac:	ldr	r3, [sp, #36]	; 0x24
   115ae:	ldr	r2, [sp, #72]	; 0x48
   115b0:	add	r3, r2
   115b2:	movs	r2, #0
   115b4:	str	r3, [sp, #36]	; 0x24
   115b6:	str	r2, [sp, #60]	; 0x3c
   115b8:	bic.w	r3, r3, r3, asr #31
   115bc:	b.n	1121a <_svfprintf_r+0x10ba>
   115be:	add	r2, sp, #140	; 0x8c
   115c0:	ldr	r1, [sp, #20]
   115c2:	ldr	r0, [sp, #24]
   115c4:	bl	11844 <__ssprint_r>
   115c8:	cmp	r0, #0
   115ca:	bne.w	10354 <_svfprintf_r+0x1f4>
   115ce:	ldr	r3, [sp, #116]	; 0x74
   115d0:	ldr	r4, [sp, #148]	; 0x94
   115d2:	add.w	r9, sp, #192	; 0xc0
   115d6:	b.n	10fb0 <_svfprintf_r+0xe50>
   115d8:	add	r2, sp, #140	; 0x8c
   115da:	ldr	r1, [sp, #20]
   115dc:	ldr	r0, [sp, #24]
   115de:	bl	11844 <__ssprint_r>
   115e2:	cmp	r0, #0
   115e4:	bne.w	10354 <_svfprintf_r+0x1f4>
   115e8:	ldr	r3, [sp, #116]	; 0x74
   115ea:	ldr	r2, [sp, #56]	; 0x38
   115ec:	ldr	r4, [sp, #148]	; 0x94
   115ee:	subs	r3, r2, r3
   115f0:	add.w	r9, sp, #192	; 0xc0
   115f4:	b.n	10fe0 <_svfprintf_r+0xe80>
   115f6:	nop
   115f8:	.word	0x00012294
   115fc:	.word	0x00012298
   11600:	.word	0x66666667
   11604:	cmp	r5, #6
   11606:	mov	r3, r5
   11608:	it	cs
   1160a:	movcs	r3, #6
   1160c:	str	r3, [sp, #36]	; 0x24
   1160e:	bic.w	r3, r3, r3, asr #31
   11612:	mov	fp, r6
   11614:	str	r7, [sp, #40]	; 0x28
   11616:	str	r6, [sp, #60]	; 0x3c
   11618:	mov	r7, r6
   1161a:	str	r3, [sp, #16]
   1161c:	ldr	r6, [pc, #536]	; (11838 <_svfprintf_r+0x16d8>)
   1161e:	b.w	10504 <_svfprintf_r+0x3a4>
   11622:	mov.w	fp, #6
   11626:	b.n	1115a <_svfprintf_r+0xffa>
   11628:	add	r2, sp, #132	; 0x84
   1162a:	add	r3, sp, #120	; 0x78
   1162c:	str	r2, [sp, #4]
   1162e:	str	r3, [sp, #0]
   11630:	mov	r2, fp
   11632:	add	r3, sp, #116	; 0x74
   11634:	movs	r1, #3
   11636:	vldr	d0, [sp, #96]	; 0x60
   1163a:	ldr	r0, [sp, #24]
   1163c:	bl	f328 <_dtoa_r>
   11640:	mov	r5, fp
   11642:	mov	r6, r0
   11644:	add.w	r4, r0, fp
   11648:	b.n	11436 <_svfprintf_r+0x12d6>
   1164a:	movs	r7, #45	; 0x2d
   1164c:	strb.w	r7, [sp, #111]	; 0x6f
   11650:	b.w	107aa <_svfprintf_r+0x64a>
   11654:	str	r3, [sp, #12]
   11656:	b.w	10902 <_svfprintf_r+0x7a2>
   1165a:	ldrd	r1, r2, [sp, #64]	; 0x40
   1165e:	add.w	r3, r2, #2147483648	; 0x80000000
   11662:	str	r3, [sp, #100]	; 0x64
   11664:	movs	r3, #45	; 0x2d
   11666:	str	r1, [sp, #96]	; 0x60
   11668:	str	r3, [sp, #16]
   1166a:	b.n	11176 <_svfprintf_r+0x1016>
   1166c:	ldr	r2, [sp, #72]	; 0x48
   1166e:	ldr	r3, [sp, #56]	; 0x38
   11670:	add	r3, r2
   11672:	ldr	r2, [sp, #60]	; 0x3c
   11674:	str	r3, [sp, #36]	; 0x24
   11676:	cmp	r2, #0
   11678:	ble.w	1178e <_svfprintf_r+0x162e>
   1167c:	movs	r2, #103	; 0x67
   1167e:	bic.w	r3, r3, r3, asr #31
   11682:	str	r2, [sp, #52]	; 0x34
   11684:	b.n	1121a <_svfprintf_r+0x10ba>
   11686:	ldr	r3, [sp, #52]	; 0x34
   11688:	cmp	r3, #71	; 0x47
   1168a:	bne.w	111b8 <_svfprintf_r+0x1058>
   1168e:	ldr	r3, [sp, #12]
   11690:	lsls	r3, r3, #31
   11692:	bmi.w	1142a <_svfprintf_r+0x12ca>
   11696:	ldr	r3, [sp, #132]	; 0x84
   11698:	cmp	r7, #71	; 0x47
   1169a:	sub.w	r3, r3, r6
   1169e:	str	r3, [sp, #56]	; 0x38
   116a0:	beq.w	114d8 <_svfprintf_r+0x1378>
   116a4:	ldr	r3, [sp, #116]	; 0x74
   116a6:	b.n	11522 <_svfprintf_r+0x13c2>
   116a8:	bic.w	r3, r5, r5, asr #31
   116ac:	str	r7, [sp, #40]	; 0x28
   116ae:	str	r3, [sp, #16]
   116b0:	str	r5, [sp, #36]	; 0x24
   116b2:	mov	fp, r0
   116b4:	str	r0, [sp, #60]	; 0x3c
   116b6:	ldrb.w	r7, [sp, #111]	; 0x6f
   116ba:	b.w	10504 <_svfprintf_r+0x3a4>
   116be:	cmp	r3, #0
   116c0:	ble.n	1179e <_svfprintf_r+0x163e>
   116c2:	cmp.w	fp, #0
   116c6:	bne.n	11768 <_svfprintf_r+0x1608>
   116c8:	ldr	r2, [sp, #12]
   116ca:	lsls	r4, r2, #31
   116cc:	bmi.n	11768 <_svfprintf_r+0x1608>
   116ce:	mov	r2, r3
   116d0:	str	r2, [sp, #36]	; 0x24
   116d2:	bic.w	r3, r3, r3, asr #31
   116d6:	b.n	1121a <_svfprintf_r+0x10ba>
   116d8:	ldr	r3, [sp, #12]
   116da:	lsls	r3, r3, #31
   116dc:	mov	r7, fp
   116de:	bpl.n	116ec <_svfprintf_r+0x158c>
   116e0:	add	r6, sp, #256	; 0x100
   116e2:	movs	r3, #48	; 0x30
   116e4:	strb.w	r3, [r6, #-65]!
   116e8:	b.w	104f0 <_svfprintf_r+0x390>
   116ec:	str.w	fp, [sp, #36]	; 0x24
   116f0:	add	r6, sp, #192	; 0xc0
   116f2:	b.w	104f6 <_svfprintf_r+0x396>
   116f6:	add	r2, sp, #140	; 0x8c
   116f8:	ldr	r1, [sp, #20]
   116fa:	ldr	r0, [sp, #24]
   116fc:	bl	11844 <__ssprint_r>
   11700:	cmp	r0, #0
   11702:	bne.w	10354 <_svfprintf_r+0x1f4>
   11706:	ldr	r5, [sp, #116]	; 0x74
   11708:	ldr	r4, [sp, #148]	; 0x94
   1170a:	ldr	r3, [sp, #144]	; 0x90
   1170c:	add.w	r9, sp, #192	; 0xc0
   11710:	b.n	11360 <_svfprintf_r+0x1200>
   11712:	mov	r8, r4
   11714:	movs	r5, #0
   11716:	b.w	10218 <_svfprintf_r+0xb8>
   1171a:	adds	r3, #48	; 0x30
   1171c:	movs	r2, #48	; 0x30
   1171e:	strb.w	r3, [sp, #127]	; 0x7f
   11722:	strb.w	r2, [sp, #126]	; 0x7e
   11726:	add	r3, sp, #128	; 0x80
   11728:	b.n	1159a <_svfprintf_r+0x143a>
   1172a:	ldr	r3, [sp, #132]	; 0x84
   1172c:	b.n	111e0 <_svfprintf_r+0x1080>
   1172e:	ldr	r2, [sp, #72]	; 0x48
   11730:	ldr	r3, [sp, #60]	; 0x3c
   11732:	add	r3, r2
   11734:	movs	r2, #103	; 0x67
   11736:	str	r3, [sp, #36]	; 0x24
   11738:	str	r2, [sp, #52]	; 0x34
   1173a:	bic.w	r3, r3, r3, asr #31
   1173e:	b.n	1121a <_svfprintf_r+0x10ba>
   11740:	ldr	r6, [pc, #248]	; (1183c <_svfprintf_r+0x16dc>)
   11742:	ldr	r3, [pc, #252]	; (11840 <_svfprintf_r+0x16e0>)
   11744:	ldrb.w	r7, [sp, #111]	; 0x6f
   11748:	b.w	107ae <_svfprintf_r+0x64e>
   1174c:	movs	r2, #0
   1174e:	movs	r3, #0
   11750:	ldrd	r0, r1, [sp, #96]	; 0x60
   11754:	bl	d3a0 <__aeabi_dcmpeq>
   11758:	cmp	r0, #0
   1175a:	bne.w	1143e <_svfprintf_r+0x12de>
   1175e:	rsb	r5, r5, #1
   11762:	str	r5, [sp, #116]	; 0x74
   11764:	add	r4, r5
   11766:	b.n	111ba <_svfprintf_r+0x105a>
   11768:	ldr	r3, [sp, #60]	; 0x3c
   1176a:	ldr	r2, [sp, #72]	; 0x48
   1176c:	adds	r5, r3, r2
   1176e:	add.w	r3, r5, fp
   11772:	str	r3, [sp, #36]	; 0x24
   11774:	bic.w	r3, r3, r3, asr #31
   11778:	b.n	1121a <_svfprintf_r+0x10ba>
   1177a:	ldr	r3, [sp, #12]
   1177c:	ands.w	r3, r3, #1
   11780:	bne.w	115ac <_svfprintf_r+0x144c>
   11784:	str	r3, [sp, #60]	; 0x3c
   11786:	ldr	r3, [sp, #36]	; 0x24
   11788:	bic.w	r3, r3, r3, asr #31
   1178c:	b.n	1121a <_svfprintf_r+0x10ba>
   1178e:	ldr	r3, [sp, #60]	; 0x3c
   11790:	ldr	r2, [sp, #36]	; 0x24
   11792:	rsb	r3, r3, #1
   11796:	add	r2, r3
   11798:	mov	r3, r2
   1179a:	str	r2, [sp, #36]	; 0x24
   1179c:	b.n	1167c <_svfprintf_r+0x151c>
   1179e:	cmp.w	fp, #0
   117a2:	bne.n	117aa <_svfprintf_r+0x164a>
   117a4:	ldr	r3, [sp, #12]
   117a6:	lsls	r0, r3, #31
   117a8:	bpl.n	117ba <_svfprintf_r+0x165a>
   117aa:	ldr	r3, [sp, #72]	; 0x48
   117ac:	adds	r5, r3, #1
   117ae:	add.w	r3, r5, fp
   117b2:	str	r3, [sp, #36]	; 0x24
   117b4:	bic.w	r3, r3, r3, asr #31
   117b8:	b.n	1121a <_svfprintf_r+0x10ba>
   117ba:	movs	r3, #1
   117bc:	str	r3, [sp, #36]	; 0x24
   117be:	b.n	1121a <_svfprintf_r+0x10ba>
   117c0:	ldr	r0, [sp, #40]	; 0x28
   117c2:	ldrb.w	r3, [r8, #1]
   117c6:	ldr	r5, [r0, #0]
   117c8:	adds	r0, #4
   117ca:	cmp	r5, #0
   117cc:	str	r0, [sp, #40]	; 0x28
   117ce:	mov	r8, r4
   117d0:	bge.w	10214 <_svfprintf_r+0xb4>
   117d4:	mov.w	r5, #4294967295
   117d8:	b.w	10214 <_svfprintf_r+0xb4>
   117dc:	strb.w	r1, [sp, #111]	; 0x6f
   117e0:	b.w	10376 <_svfprintf_r+0x216>
   117e4:	add.w	r3, sp, #126	; 0x7e
   117e8:	b.n	1159a <_svfprintf_r+0x143a>
   117ea:	ldr	r2, [sp, #24]
   117ec:	movs	r3, #12
   117ee:	str	r3, [r2, #0]
   117f0:	mov.w	r0, #4294967295
   117f4:	b.w	10366 <_svfprintf_r+0x206>
   117f8:	strb.w	r1, [sp, #111]	; 0x6f
   117fc:	b.w	10470 <_svfprintf_r+0x310>
   11800:	strb.w	r1, [sp, #111]	; 0x6f
   11804:	b.w	1073c <_svfprintf_r+0x5dc>
   11808:	strb.w	r1, [sp, #111]	; 0x6f
   1180c:	b.w	108aa <_svfprintf_r+0x74a>
   11810:	strb.w	r1, [sp, #111]	; 0x6f
   11814:	b.w	1084e <_svfprintf_r+0x6ee>
   11818:	strb.w	r1, [sp, #111]	; 0x6f
   1181c:	b.w	107fa <_svfprintf_r+0x69a>
   11820:	strb.w	r1, [sp, #111]	; 0x6f
   11824:	b.w	10a92 <_svfprintf_r+0x932>
   11828:	strb.w	r1, [sp, #111]	; 0x6f
   1182c:	b.w	10a50 <_svfprintf_r+0x8f0>
   11830:	strb.w	r1, [sp, #111]	; 0x6f
   11834:	b.w	10a14 <_svfprintf_r+0x8b4>
   11838:	.word	0x000122e0
   1183c:	.word	0x000122b4
   11840:	.word	0x000122b0

00011844 <__ssprint_r>:
   11844:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11848:	ldr	r3, [r2, #8]
   1184a:	sub	sp, #12
   1184c:	mov	r8, r2
   1184e:	cmp	r3, #0
   11850:	beq.n	11938 <__ssprint_r+0xf4>
   11852:	mov	fp, r0
   11854:	mov.w	r9, #0
   11858:	ldr	r6, [r2, #0]
   1185a:	ldr	r0, [r1, #0]
   1185c:	ldr	r3, [r1, #8]
   1185e:	mov	r5, r1
   11860:	mov	r4, r9
   11862:	cmp	r4, #0
   11864:	beq.n	118f2 <__ssprint_r+0xae>
   11866:	cmp	r4, r3
   11868:	mov	r7, r3
   1186a:	mov	sl, r3
   1186c:	bcc.n	118fc <__ssprint_r+0xb8>
   1186e:	ldrh	r3, [r5, #12]
   11870:	tst.w	r3, #1152	; 0x480
   11874:	beq.n	118d2 <__ssprint_r+0x8e>
   11876:	ldr	r7, [r5, #20]
   11878:	ldr	r1, [r5, #16]
   1187a:	add.w	r7, r7, r7, lsl #1
   1187e:	rsb	sl, r1, r0
   11882:	add.w	r7, r7, r7, lsr #31
   11886:	adds	r0, r4, #1
   11888:	asrs	r7, r7, #1
   1188a:	add	r0, sl
   1188c:	cmp	r0, r7
   1188e:	mov	r2, r7
   11890:	itt	hi
   11892:	movhi	r7, r0
   11894:	movhi	r2, r7
   11896:	lsls	r3, r3, #21
   11898:	bpl.n	11902 <__ssprint_r+0xbe>
   1189a:	mov	r1, r2
   1189c:	mov	r0, fp
   1189e:	bl	d820 <_malloc_r>
   118a2:	cmp	r0, #0
   118a4:	beq.n	11916 <__ssprint_r+0xd2>
   118a6:	mov	r2, sl
   118a8:	ldr	r1, [r5, #16]
   118aa:	str	r0, [sp, #4]
   118ac:	bl	b0e0 <memcpy>
   118b0:	ldrh	r2, [r5, #12]
   118b2:	ldr	r3, [sp, #4]
   118b4:	bic.w	r2, r2, #1152	; 0x480
   118b8:	orr.w	r2, r2, #128	; 0x80
   118bc:	strh	r2, [r5, #12]
   118be:	rsb	r2, sl, r7
   118c2:	add.w	r0, r3, sl
   118c6:	str	r7, [r5, #20]
   118c8:	str	r3, [r5, #16]
   118ca:	str	r0, [r5, #0]
   118cc:	str	r2, [r5, #8]
   118ce:	mov	r7, r4
   118d0:	mov	sl, r4
   118d2:	mov	r2, sl
   118d4:	mov	r1, r9
   118d6:	bl	dec4 <memmove>
   118da:	ldr.w	r2, [r8, #8]
   118de:	ldr	r3, [r5, #8]
   118e0:	ldr	r0, [r5, #0]
   118e2:	subs	r3, r3, r7
   118e4:	add	r0, sl
   118e6:	subs	r4, r2, r4
   118e8:	str	r3, [r5, #8]
   118ea:	str	r0, [r5, #0]
   118ec:	str.w	r4, [r8, #8]
   118f0:	cbz	r4, 11938 <__ssprint_r+0xf4>
   118f2:	ldr.w	r9, [r6]
   118f6:	ldr	r4, [r6, #4]
   118f8:	adds	r6, #8
   118fa:	b.n	11862 <__ssprint_r+0x1e>
   118fc:	mov	r7, r4
   118fe:	mov	sl, r4
   11900:	b.n	118d2 <__ssprint_r+0x8e>
   11902:	mov	r0, fp
   11904:	bl	e030 <_realloc_r>
   11908:	mov	r3, r0
   1190a:	cmp	r0, #0
   1190c:	bne.n	118be <__ssprint_r+0x7a>
   1190e:	ldr	r1, [r5, #16]
   11910:	mov	r0, fp
   11912:	bl	e930 <_free_r>
   11916:	movs	r3, #12
   11918:	str.w	r3, [fp]
   1191c:	ldrh	r3, [r5, #12]
   1191e:	movs	r2, #0
   11920:	orr.w	r3, r3, #64	; 0x40
   11924:	mov.w	r0, #4294967295
   11928:	strh	r3, [r5, #12]
   1192a:	str.w	r2, [r8, #8]
   1192e:	str.w	r2, [r8, #4]
   11932:	add	sp, #12
   11934:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11938:	movs	r0, #0
   1193a:	str.w	r0, [r8, #4]
   1193e:	add	sp, #12
   11940:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011944 <vtable for Stream>:
	...
   1194c:	u.......m...q...
   1195c:	u...u...u...

00011968 <vtable for StreamFile<FsBaseFile, unsigned long long>>:
	...
   11970:	E.......m.......
   11980:	............

0001198c <vtable for FsFile>:
	...
   11994:	E.......m.......
   119a4:	............

000119b0 <vtable for File>:
	...
   119b8:	........m.......
   119c8:	....}.......%...
   119d8:	........}.......
   119e8:	................
   119f8:	............-...
   11a08:	9...q...

00011a10 <vtable for SDFile>:
	...
   11a18:	........m...1...
   11a28:	....}.......Y...
   11a38:	M...............
   11a48:	................
   11a58:	........Q...e...
   11a68:	....1...

00011a70 <vtable for SDClass>:
	...
   11a78:	....U.......y...
   11a88:	........u...1...
   11a98:	  File    this=%
   11aa8:	x, f=%x.....   S
   11ab8:	DFile this=%x, r
   11ac8:	efcount=%u..Stor
   11ad8:	age %d %d %s ...
   11ae8:	No storage..test
   11af8:	1.txt...This is 
   11b08:	a test line..***
   11b18:	* dir of sd[0] *
   11b28:	***.Setup done..
   11b38:	MTP_test....sdio
   11b48:	....

00011b4c <vtable for MTPStorage_SD>:
	...
   11b54:	m...............
   11b64:	.............8..
   11b74:	........!..../..
   11b84:	M.......9....)..
   11b94:	1...5...I ... ..
   11ba4:	/mtpindex.dat...
   11bb4:	/... Disk to Dis
   11bc4:	k move is not su
   11bd4:	pported.File Rea
   11be4:	d Error :...%d: 
   11bf4:	%d %d %d %d %d %
   11c04:	s...%d: %d %d %d
   11c14:	 %d %d..

00011c1c <supported_op>:
   11c1c:	................
   11c2c:	................
   11c3c:	....

00011c40 <propertyList>:
   11c40:	............A.D.
   11c50:	Teensy..microsof
   11c60:	t.com: 1.0;.PJRC
   11c70:	....1.0.1234....

00011c80 <SPIClass::spi0_hardware>:
   11c80:	<..@............
   11c90:	.....T....'.....
   11ca0:	................
   11cb0:	................
   11cc0:	................
   11cd0:	..........-.....
   11ce0:	................
   11cf0:	................
   11d00:	................
   11d10:	.. .

00011d14 <monthDays>:
   11d14:	............EXFA
   11d24:	T...

00011d28 <vtable for SdSpiCard>:
	...
   11d30:	....!...........
   11d40:	............1...
   11d50:	................
   11d60:	........]...u...
   11d70:	....q...........

00011d80 <vtable for SdioCard>:
	...
   11d88:	u...............
   11d98:	........%.......
   11da8:	........!...)...
   11db8:	-...I...e...y...
   11dc8:	................

00011dd8 <digital_pin_to_info_PGM>:
   11dd8:	@..C@..@D..CD..@
   11de8:	...C...@0..C0..@
   11df8:	4..C4..@...C...@
   11e08:	...C...@...C...@
   11e18:	...C...@...C...@
   11e28:	...C...@...C...@
   11e38:	...C...@...C...@
   11e48:	...C...@...C...@
   11e58:	...C...@...C...@
   11e68:	...C...@...C...@
   11e78:	...C...@...C...@
   11e88:	...C...@...C...@
   11e98:	h .Ch..@...C...@
   11ea8:	8..C8..@<..C<..@
   11eb8:	@..C@..@H..CH..@
   11ec8:	L..CL..@(..C(..@
   11ed8:	,..C,..@` .C`..@
   11ee8:	d .Cd..@ ..C ..@
   11ef8:	$..C$..@(..C(..@
   11f08:	,..C,..@D..CD..@
   11f18:	p..Cp..@t..Ct..@
   11f28:	h..Ch..@P..CP..@
   11f38:	X..CX..@\..C\..@
   11f48:	T..CT..@ ..C ..@
   11f58:	$..C$..@...C...@
   11f68:	...C...@8..C8..@
   11f78:	4..C4..@0..C0..@
   11f88:	<..C<..@,..C,..@
   11f98:	( .C(..@, .C,..@
   11fa8:	. .C...@. .C...@
   11fb8:	. .C...@. .C...@
   11fc8:	. .C...@. .C...@

00011fd8 <vtable for usb_serial_class>:
	...
   11fe0:	................
   11ff0:	................
   12000:	....

00012004 <usb_endpoint_config_table>:
   12004:	........

0001200c <usb_descriptor_list>:
   1200c:	................
   1201c:	....i.......|...
   1202c:	................
   1203c:	................
   1204c:	................
	...

0001206c <_global_impure_ptr>:
   1206c:	....C...POSIX...
   1207c:	....

00012080 <_ctype_>:
   12080:	.         ((((( 
   12090:	                
   120a0:	 ...............
   120b0:	................
   120c0:	..AAAAAA........
   120d0:	................
   120e0:	..BBBBBB........
   120f0:	................
   12100:	 ...............
	...
   12180:	........

00012188 <__mprec_tens>:
   12188:	.......?......$@
   12198:	......Y@.....@.@
   121a8:	.......@.....j.@
   121b8:	.......A......cA
   121c8:	.......A....e..A
   121d8:	... _..B....vH7B
   121e8:	......mB..@..0.B
   121f8:	.......B..4&.k.C
   12208:	...7y.AC....W4vC
   12218:	..Ngm..C.=.`.X.C
   12228:	@..x...DP.....KD
   12238:	..M....D.J...-.D
   12248:	...yCx.D

00012250 <__mprec_bigtens>:
   12250:	...7y.AC.n.....F
   12260:	..?..O8M2.0.Hw.Z
   12270:	<.s..O.u

00012278 <p05.6087>:
   12278:	........}...Infi
   12288:	nity....NaN.0...

00012298 <zeroes.7258>:
   12298:	0000000000000000
   122a8:	INF.inf.NAN.nan.
   122b8:	0123456789ABCDEF
   122c8:	....0123456789ab
   122d8:	cdef....(null)..

000122e8 <blanks.7257>:
   122e8:	                

000122f8 <_init>:
   122f8:	push	{r3, r4, r5, r6, r7, lr}
   122fa:	nop
   122fc:	pop	{r3, r4, r5, r6, r7}
   122fe:	pop	{r3}
   12300:	mov	lr, r3
   12302:	bx	lr

00012304 <__init_array_start>:
   12304:	.word	0x0000e84d

00012308 <__frame_dummy_init_array_entry>:
   12308:	5...}...U[..

Disassembly of section .fini:

00012314 <_fini>:
   12314:	push	{r3, r4, r5, r6, r7, lr}
   12316:	nop
