
.vsteensy/build/mtp-test_T36.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00016128 l    d  .fini	00000000 .fini
0001612c l    d  .ARM.exidx	00000000 .ARM.exidx
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0970 l    d  .data	00000000 .data
1fff1478 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
0000ed40 l     F .text	0000000c startup_default_early_hook
0000ed4c l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff1478 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff147c l       .bss	00000000 object.8610
0001611c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mtp-test.ino
0000061c l     F .text	00000002 __tcf_0
00001a4c l     F .text	0000012c _GLOBAL__sub_I_sd_str
00000000 l    df *ABS*	00000000 Storage.cpp
00002218 l     F .text	00000070 MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.8] [clone .constprop.13]
00002ff0 l     F .text	000000f4 MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.15]
00003f58 l     F .text	00000036 MTPStorage_SD::ScanAll(unsigned long) [clone .part.9] [clone .constprop.12]
00000000 l    df *ABS*	00000000 MTP.cpp
00004040 l     F .text	00000064 MTPD::write(char const*, int) [clone .part.3]
0000414c l     F .text	000000bc MTPD::GetDevicePropDesc(unsigned long) [clone .part.5]
000052cc l     F .text	0000002c MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.8]
000159e0 l     O .text	00000024 supported_op
00015a04 l     O .text	00000010 propertyList
00000000 l    df *ABS*	00000000 SPI.cpp
00005a0c l     F .text	000001f8 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]
00000000 l    df *ABS*	00000000 SD.cpp
00005f38 l     F .text	0000005c _GLOBAL__sub_I_SD
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
00006930 l     F .text	0000001e FsCache::sync() [clone .part.2]
000069bc l     F .text	00000034 ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]
000069f0 l     F .text	0000002a ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]
00000000 l    df *ABS*	00000000 upcase.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
000078b8 l     F .text	00000032 FatFile::openRoot(FatVolume*) [clone .part.36]
000079d4 l     F .text	00000094 FatFile::sync() [clone .part.40]
00000000 l    df *ABS*	00000000 FatPartition.cpp
00008590 l     F .text	0000004a FatCache::sync() [clone .part.8]
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
000089e0 l     F .text	00000028 lfnGetChar(DirLfn_t*, unsigned char)
00000000 l    df *ABS*	00000000 FatFileSFN.cpp
00009310 l     F .text	00000058 FatFile::getSFN(char*) [clone .part.2]
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
000096b0 l     F .text	00000018 SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]
000096c8 l     F .text	00000022 SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
00009cac l     F .text	00000030 sdIrs()
00009cdc l     F .text	00000018 isBusyCommandComplete()
00009cf4 l     F .text	00000010 isBusyCommandInhibit()
00009d04 l     F .text	0000000c isBusyDMA()
00009d10 l     F .text	00000014 isBusyFifoRead()
00009d24 l     F .text	00000014 isBusyFifoWrite()
00009d38 l     F .text	00000018 isBusyTransferComplete()
00009d50 l     F .text	000000cc setSdclk(unsigned long)
00009e80 l     F .text	00000028 waitTimeout(bool (*)())
00009ea8 l     F .text	0000004c yieldTimeout(bool (*)())
00009f24 l     F .text	0000005c cardCommand(unsigned long, unsigned long)
00009fa0 l     F .text	00000064 readReg16(unsigned long, void*)
0000a004 l     F .text	0000002c isBusyCMD13()
0000a04c l     F .text	00000020 waitDmaStatus() [clone .part.6]
0000a06c l     F .text	000000b4 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
0000a260 l     F .text	00000078 transferStop()
0000a610 l     F .text	000000ac cardCMD6(unsigned long, unsigned char*)
1fff24dc l     O .bss	00000001 m_version2
1fff24e0 l     O .bss	00000010 m_cid
1fff24f0 l     O .bss	00000004 m_busyFcn
1fff24f4 l     O .bss	00000001 m_highCapacity
1fff24f8 l     O .bss	00000004 m_ocr
1fff24fc l     O .bss	00000004 m_rca
1fff2500 l     O .bss	00000004 m_irqstat
1fff09c0 l     O .data	00000001 m_errorCode
1fff2504 l     O .bss	00000001 m_initDone
1fff2508 l     O .bss	00000010 m_csd
1fff2518 l     O .bss	00000001 m_dmaBusy
1fff251c l     O .bss	00000004 m_sdClkKhz
1fff2520 l     O .bss	00000004 m_errorLine
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 usb1_mtp.c
00000000 l    df *ABS*	00000000 lfs.c
0000ade8 l     F .text	0000003a lfs_alloc_lookahead
0000ae24 l     F .text	00000074 lfs_dir_traverse_filter
0000ae98 l     F .text	0000001c lfs_dir_commit_size
0000aeb4 l     F .text	0000000c lfs_fs_size_count
0000aec0 l     F .text	00000034 lfs_deinit
0000aef4 l     F .text	000000c4 lfs_init
0000afb8 l     F .text	0000015e lfs_bd_read.isra.15
0000b118 l     F .text	0000004a lfs_fs_parent_match
0000b164 l     F .text	000004ac lfs_dir_fetchmatch
0000b610 l     F .text	00000088 lfs_fs_parent
0000b698 l     F .text	00000090 lfs_fs_pred
0000b728 l     F .text	000001f4 lfs_dir_traverse
0000b91c l     F .text	00000174 lfs_dir_getslice
0000ba90 l     F .text	00000048 lfs_dir_getgstate
0000bad8 l     F .text	00000180 lfs_dir_find
0000c3fc l     F .text	0000003c lfs_dir_find_match
0000bc58 l     F .text	000000a4 lfs_dir_getinfo
0000bcfc l     F .text	00000098 lfs_ctz_traverse.part.19
0000bd94 l     F .text	000000f0 lfs_ctz_find.constprop.24
0000be84 l     F .text	000000d0 lfs_dir_getread.constprop.25
0000bf54 l     F .text	0000007e lfs_bd_cmp.constprop.27
0000bfd4 l     F .text	0000008a lfs_bd_flush
0000c060 l     F .text	000000ac lfs_bd_prog
0000c10c l     F .text	0000003e lfs_dir_commitprog
0000c14c l     F .text	000000b6 lfs_dir_commitattr
0000c204 l     F .text	00000014 lfs_dir_commit_commit
0000c218 l     F .text	000001e2 lfs_dir_commitcrc
0000c910 l     F .text	00000104 lfs_alloc
0000ca14 l     F .text	00000068 lfs_dir_alloc
0000ca7c l     F .text	00000106 lfs_file_relocate
0000cf58 l     F .text	0000010c lfs_file_flush
0000d27c l     F .text	00000568 lfs_dir_compact
0000e804 l     F .text	0000008a lfs_dir_split
0000d7e4 l     F .text	000003e0 lfs_dir_commit
0000dbc4 l     F .text	0000003c lfs_dir_drop
0000dc00 l     F .text	0000016c lfs_fs_forceconsistency
00015ba4 l     O .text	0000000c defaults.6828
00000000 l    df *ABS*	00000000 lfs_util.c
00015bb0 l     O .text	00000040 rtable.5067
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
1fff2525 l     O .bss	00000001 tx_noautoflush
1fff2528 l     O .bss	00000004 tx_packet
1fff252c l     O .bss	00000001 transmit_previous_timeout
1fff2530 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 pins_teensy.c
0000ed80 l     F .text	0000004c digitalWrite.part.1
00000000 l    df *ABS*	00000000 usb_mem.c
1fff09c8 l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff253c l     O .bss	00000004 ep0_tx_ptr
1fff2540 l     O .bss	00000018 rx_last
1fff2558 l     O .bss	00000002 ep0_tx_len
1fff255c l     O .bss	00000040 ep0_rx0_buf
1fff259c l     O .bss	00000018 rx_first
1fff25b4 l     O .bss	00000001 ep0_tx_data_toggle
1fff25b8 l     O .bss	00000040 ep0_rx1_buf
1fff25f8 l     O .bss	00000018 tx_first
1fff0000 l     O .usbdescriptortable	000000e0 table
1fff2610 l     O .bss	00000018 tx_last
1fff2628 l     O .bss	00000008 setup
1fff2630 l     O .bss	00000001 ep0_tx_bdt_bank
1fff2634 l     O .bss	00000008 reply_buffer
1fff2640 l     O .bss	00000006 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff2646 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 serialEvent.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 analog.c
1fff2675 l     O .bss	00000001 calibrating
1fff09e1 l     O .data	00000001 analog_config_bits
1fff2676 l     O .bss	00000001 analog_reference_internal
1fff09e2 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 usb_desc.c
1fff09e4 l     O .data	00000012 device_descriptor
1fff0a10 l     O .data	00000069 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stpcpy.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strcspn.c
00000000 l    df *ABS*	00000000 strlcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strrchr.c
00000000 l    df *ABS*	00000000 strspn.c
00000000 l    df *ABS*	00000000 vfprintf.c
00015e94 l     O .text	00000010 zeroes.7258
00015ee8 l     O .text	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00013c4c l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
00013c6c l     F .text	00000128 quorem
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 mprec.c
00016100 l     O .text	0000000c p05.6087
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
1fff0ad0 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.12/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.12/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 avr_emulation.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff1478 l       .bss	00000000 __bss_start__
1fff26c8 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
0000ed38  w    F .text	00000006 adc0_isr
00011cb0 g     F .text	0000004a stpcpy
000020c0 g     F .text	00000158 MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)
00010c0c g     F .text	0000002c .hidden __aeabi_dcmpun
0000ea94 g     F .text	0000001c usb_serial_available
00010bd0 g     F .text	00000012 .hidden __aeabi_dcmple
0000c438 g     F .text	000000a0 lfs_dir_open
000120fc g     F .text	000000ba strcpy
00010b0c g     F .text	0000007a .hidden __cmpdf2
0000a41c g     F .text	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000fde8  w    F .text	000000ec yield
0000c604 g     F .text	00000004 lfs_file_tell
000083a8 g     F .text	000001e8 FatFile::write(void const*, unsigned int)
00010b0c g     F .text	0000007a .hidden __eqdf2
00000ab0  w    F .text	00000016 LittleFSFile::truncate(unsigned long long)
00009624  w    F .text	00000002 SdSpiCard::~SdSpiCard()
0000e72c g     F .text	000000d8 lfs_format
000100dc g     F .text	000000ba Print::printNumber64(unsigned long long, unsigned char, unsigned char)
0000640c g     F .text	000003d4 ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)
0000c5dc g     F .text	00000028 lfs_dir_rewind
00001b78  w    F .text	0000001c MTPStorage_SD::addFilesystem(FS&, int, char const*)
1fff1ec0 g     O .bss	00000154 storage
1fff09f8 g     O .data	00000018 usb_string_manufacturer_name_default
000024f0 g     F .text	0000003c MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)
0001067c g     F .text	0000005a .hidden __floatdidf
0000ecf0  w    F .text	00000048 hard_fault_isr
0000ed38  w    F .text	00000006 dma_ch6_isr
1fff24d4 g     O .bss	00000004 FsDateTime::callback
0000e890 g     F .text	00000020 lfs_fs_size
00010000 g     F .text	00000020 Print::println()
0000ed38  w    F .text	00000006 uart0_lon_isr
0000630c g     F .text	000000fe ExFatFile::seekSet(unsigned long long)
0000f14c g     F .text	00000108 usb_rx_memory
000095f8  w    F .text	00000004 SdSpiCard::errorCode() const
000004b0  w    F .text	0000000c File::flush()
0000ed38  w    F .text	00000006 dma_ch8_isr
0001185c g     F .text	00000002 __malloc_unlock
00000b20  w    F .text	000000c0 SDFile::openNextFile(unsigned char)
1fff24d8 g     O .bss	00000004 FsVolume::m_cwv
00007c9c g     F .text	000000be FatFile::open(FatFile*, char const*, int)
000101b4 g     F .text	000000e0 analog_init
0000f254 g     F .text	00000084 usb_tx
0000ed38  w    F .text	00000006 portcd_isr
000005d4  w    F .text	00000006 LittleFSFile::peek()
00013afc g     F .text	0000004a _vdprintf_r
00005e7c g     F .text	000000b0 SPIClass::setSCK(unsigned char)
0000d184 g     F .text	00000034 lfs_file_seek
0001572c  w    O .text	00000064 vtable for SDFile
000116f4 g     F .text	000000c6 memmove
00003f90 g     F .text	0000006e MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)
00000888  w    F .text	0000000c LittleFSFile::rewindDirectory()
00014e7c g     F .text	0000004c _Balloc
0000ed38  w    F .text	00000006 can1_rx_warn_isr
00001b94  w    F .text	00000004 MTPStorage_SD::get_FSCount()
00016134 g       .ARM.exidx	00000000 __exidx_end
0000ed38  w    F .text	00000006 dma_error_isr
000087bc g     F .text	00000046 FatPartition::freeChain(unsigned long)
00000c00  w    F .text	00000014 LittleFS::rename(char const*, char const*)
1fff2658 g     O .bss	00000001 EventResponder::runningFromYield
0000ad38 g     F .text	0000001a SdSpiArduinoDriver::receive()
000097e8 g     F .text	0000007c SdSpiCard::cardCommand(unsigned char, unsigned long)
0000ed38  w    F .text	00000006 i2c0_isr
0000ffd4 g     F .text	0000002c Print::write(unsigned char const*, unsigned int)
00010afc g     F .text	0000008a .hidden __gtdf2
00008a08 g     F .text	00000024 FatFile::lfnChecksum(unsigned char*)
00010fd4 g     F .text	0000000c __errno
00001124  w    F .text	00000026 SDFile::isDirectory()
0000ed38  w    F .text	00000006 portd_isr
0000ed38  w    F .text	00000006 enet_error_isr
00001370  w    F .text	00000028 File::~File()
1fff2648 g     O .bss	00000004 EventResponder::firstInterrupt
00004484 g     F .text	0000006c MTPD::GetObjectHandles(unsigned long, unsigned long)
00009628  w    F .text	0000000e SdSpiCard::~SdSpiCard()
00009388 g     F .text	00000078 FsBaseFile::FsBaseFile(FsBaseFile const&)
0000ed38  w    F .text	00000006 tpm1_isr
00006e5c g     F .text	00000018 ExFatPartition::rootLength()
0000e384 g     F .text	000003a8 lfs_rename
000095fc  w    F .text	00000004 SdSpiCard::errorData() const
0000ffc4  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00015bf0 g     O .text	00000200 digital_pin_to_info_PGM
1fff1df8 g     O .bss	000000c8 ramfs
1fff26c4 g     O .bss	00000004 errno
00009864 g     F .text	00000054 SdSpiCard::readOCR(unsigned long*)
0000ad54 g     F .text	00000020 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
00008f88 g     F .text	00000388 FatFile::open(FatFile*, fname_t*, int)
00006d30 g     F .text	00000012 ExFatPartition::fatGet(unsigned long, unsigned long*)
00016134 g       .ARM.exidx	00000000 _etext
00005c04 g     F .text	00000134 _spi_dma_rxISR0()
1fff1478 g       .bss	00000000 _sbss
00010b98 g     F .text	00000010 .hidden __aeabi_cdcmple
00009e28 g     F .text	0000000c SdioCard::errorData() const
00001ba8 g     F .text	0000000c MTPStorage_SD::totalSize(unsigned long)
0000a52c g     F .text	000000b4 SdioCard::writeSector(unsigned long, unsigned char const*)
00000c14  w    F .text	00000014 LittleFS::mkdir(char const*)
0000ed38  w    F .text	00000006 porte_isr
00001a40 g     F .text	0000000c loop
0000ed38  w    F .text	00000006 portb_isr
0000ed38  w    F .text	00000006 spi1_isr
00004954 g     F .text	00000144 MTPD::GetStorageInfo(unsigned long)
0000ed38  w    F .text	00000006 uart3_status_isr
00006078 g     F .text	000000c4 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
0000ed38  w    F .text	00000006 mcm_isr
0000aa50 g     F .text	000000cc SdioCard::readData(unsigned char*)
0000972c g     F .text	00000080 SdSpiCard::readData(unsigned char*, unsigned int)
00001484  w    F .text	00000060 LittleFSFile::~LittleFSFile()
1fff264c g     O .bss	00000004 EventResponder::lastInterrupt
0000ed38  w    F .text	00000006 uart1_status_isr
000012dc  w    F .text	00000092 SDFile::seek(unsigned long, int)
00009400 g     F .text	00000028 FsBaseFile::close()
0000e8e8 g     F .text	00000134 memcpy
0000ed38  w    F .text	00000006 randnum_isr
00010b88 g     F .text	00000020 .hidden __aeabi_cdrcmple
00000494  w    F .text	0000000c File::available()
00003768 g     F .text	000007ee MTPStorage_SD::ScanDir(unsigned long, unsigned long)
00006d68 g     F .text	00000080 ExFatPartition::freeChain(unsigned long)
000030f0 g     F .text	0000046c MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)
00007f10 g     F .text	0000002a FatFile::peek()
00012418 g     F .text	000016e4 _svfprintf_r
0001060c g     F .text	00000022 .hidden __floatsidf
0000065c  w    F .text	00000014 SDFile::whoami()
0000c79c g     F .text	00000174 lfs_fs_traverseraw
1fff1494  w    O .bss	00000001 SDFile::name()::zeroterm
00000688  w    F .text	00000016 LittleFS_RAM::static_prog(lfs_config const*, unsigned long, unsigned long, void const*, unsigned long)
1fff2538 g     O .bss	00000004 systick_millis_count
00010b04 g     F .text	00000082 .hidden __ltdf2
000074a0 g     F .text	000000aa ExFatFile::rename(ExFatFile*, char const*)
0000ecf0  w    F .text	00000048 bus_fault_isr
00015818  w    O .text	00000028 vtable for LittleFS_RAM
0000cb84 g     F .text	000003d2 lfs_file_write
0000549c g     F .text	00000554 MTPD::loop()
000006d8  w    F .text	00000026 LittleFSFile::seek(unsigned long long, int)
0000ed38  w    F .text	00000006 watchdog_isr
00010c88 g     F .text	00000000 .hidden __aeabi_uldivmod
0000ed38  w    F .text	00000006 i2c1_isr
1fff263c g     O .bss	00000001 usb_configuration
0000ed38  w    F .text	00000006 dma_ch11_isr
00000474  w    F .text	00000006 SdCardInterface::status()
0000a5e0 g     F .text	00000030 SdioCard::syncDevice()
0000a2dc g     F .text	000000cc SdioCard::writeData(unsigned char const*)
00000000  w      *UND*	00000000 __fini_array_end
1fff2659 g     O .bss	00000001 SPCRemulation::pinout
00001284  w    F .text	00000058 StreamFile<FsBaseFile, unsigned long long>::available()
00007f3c g     F .text	00000040 FatFile::readDirCache(bool)
0000ed38  w    F .text	00000006 i2c2_isr
1fff09f8  w    O .data	00000018 usb_string_manufacturer_name
1fff26b8 g     O .bss	0000000c usb_rx_byte_count_data
0000ed38  w    F .text	00000006 pit1_isr
1fff0a7c g     O .data	00000008 usb_string_mtp
00011030 g     F .text	00000010 malloc
0000ed38  w    F .text	00000006 dma_ch4_isr
0000ed38  w    F .text	00000006 software_isr
000156a8  w    O .text	00000024 vtable for FsFile
0000ed38  w    F .text	00000006 dma_ch7_isr
000059f0  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00016010 g     O .text	000000c8 __mprec_tens
0000fd20 g     F .text	000000c8 usb_init
00009610  w    F .text	00000004 SdSpiCard::type() const
0000ed38  w    F .text	00000006 lptmr_isr
1fff2680 g     O .bss	00000004 __malloc_top_pad
0000eddc g     F .text	00000024 rtc_set
00009638 g     F .text	00000076 SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
0000754c g     F .text	000000e2 ExFatFile::truncate()
1fff0970 g     O .data	00000000 .hidden __dso_handle
000105ec g     F .text	0000001e .hidden __aeabi_ui2d
00014e60 g     F .text	0000001c _localeconv_r
1fff0974 g     O .data	00000008 sd_str
0000edcc g     F .text	00000010 attachInterruptVector
0000acf0 g     F .text	00000048 SdSpiArduinoDriver::deactivate()
00014ff8 g     F .text	00000012 __i2b
1fff0970 g       .data	00000000 _sdata
0000ade4 g     F .text	00000002 usb_mtp_configure
0000050c  w    F .text	0000000c File::operator bool()
0000863c g     F .text	0000000e FatCache::sync()
00010ce0 g     F .text	000002e2 .hidden __udivmoddi4
000047ac g     F .text	000001a8 MTPD::getObjectPropValue(unsigned long, unsigned long)
00010368 g     F .text	00000000 .hidden __aeabi_drsub
000078ec g     F .text	00000034 FatFile::addCluster()
00011c40 g     F .text	00000024 _sbrk_r
000098b8 g     F .text	0000004a SdSpiCard::readRegister(unsigned char, void*)
00009f04 g     F .text	00000020 SdioCard::type() const
00000488  w    F .text	0000000c File::write(void const*, unsigned int)
000001d0 g     F .text	000001f0 ResetHandler
0000ea1c g     F .text	00000048 usb_serial_getchar
0000ed38  w    F .text	00000006 can1_bus_off_isr
0000ed38  w    F .text	00000006 ftm2_isr
00000e4c  w    F .text	0000004c SDFile::name()
1fff26ac g     O .bss	00000008 usb_cdc_line_coding
0000ee00 g     F .text	0000000a digitalWrite
1fff2650 g     O .bss	00000004 EventResponder::lastYield
0000ed38  w    F .text	00000006 uart5_status_isr
0000ed38  w    F .text	00000006 lpuart0_status_isr
00006050 g     F .text	00000028 ExFatFile::openRoot(ExFatVolume*)
00015e1c g     O .text	00000006 usb_endpoint_config_table
00000a84  w    F .text	0000002a LittleFSFile::available()
0000ed38  w    F .text	00000006 dma_ch9_isr
00000c98  w    F .text	00000038 StreamFile<FsBaseFile, unsigned long long>::read()
0000ed38  w    F .text	00000006 pit2_isr
000013fc  w    F .text	00000058 LittleFSFile::~LittleFSFile()
00010bbc g     F .text	00000012 .hidden __aeabi_dcmplt
1fff267c g     O .bss	00000004 __malloc_max_sbrked_mem
000005fc  w    F .text	0000001a LittleFS::totalSize()
00001030  w    F .text	0000001a SDFile::position()
00009bb4 g     F .text	00000042 SdSpiCard::writeStop()
0000355c g     F .text	00000160 MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)
0000f098 g     F .text	0000004c usb_free
0000ed38  w    F .text	00000006 i2c3_isr
00010630 g     F .text	0000003a .hidden __extendsfdf2
0001092c g     F .text	000001d0 .hidden __aeabi_ddiv
00010374 g     F .text	00000276 .hidden __adddf3
00000a4c  w    F .text	0000001a LittleFSFile::size()
00004740 g     F .text	0000006c MTPD::getObjectPropsSupported(unsigned long)
000040a4 g     F .text	000000a8 MTPD::writestring(char const*)
00009c78 g     F .text	00000032 SdSpiCard::writeData(unsigned char const*)
000004a0  w    F .text	00000010 File::peek()
00008804 g     F .text	000000be FatPartition::freeClusterCount()
0000114c  w    F .text	000000d0 SDClass::open(char const*, unsigned char)
0001612c g       .ARM.exidx	00000000 __exidx_start
000106d8 g     F .text	00000254 .hidden __aeabi_dmul
00009aac g     F .text	00000050 SdSpiCard::writeStart(unsigned long)
0000ed38  w    F .text	00000006 pit0_isr
1fff2654 g     O .bss	00000004 EventResponder::firstYield
00015e84 g     O .text	00000004 _global_impure_ptr
00001bc0 g     F .text	0000007c MTPStorage_SD::write(char const*, unsigned long)
0000ed38  w    F .text	00000006 can1_error_isr
00000ce4  w    F .text	00000034 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
00011860 g     F .text	000003de _realloc_r
000010c0  w    F .text	00000018 SDFile::read(void*, unsigned int)
00010fe0 g     F .text	00000050 __libc_init_array
1fff26c8 g       .bss	00000000 __bss_end
00000f34  w    F .text	00000044 SDFile::rewindDirectory()
0000ed38  w    F .text	00000006 can0_wakeup_isr
000068e0 g     F .text	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
00009e34 g     F .text	0000001c SdioCard::readCID(CID*)
000006b8  w    F .text	00000020 LittleFS::exists(char const*)
00007280 g     F .text	000000ea ExFatFile::addDirCluster()
0000ed38  w    F .text	00000006 flash_cmd_isr
00009c24 g     F .text	00000052 SdSpiCard::writeData(unsigned char, unsigned char const*)
000160d8 g     O .text	00000028 __mprec_bigtens
0000ffac  w    F .text	00000004 usb_serial_class::clear()
000105ec g     F .text	0000001e .hidden __floatunsidf
0000ed38  w    F .text	00000006 uart2_status_isr
0000ed50 g     F .text	0000002c _sbrk
0001528c g     F .text	00000042 __mcmp
0000dfd0 g     F .text	00000270 lfs_file_opencfg
00015790  w    O .text	00000028 vtable for SDClass
000005c0  w    F .text	00000012 SDFile::operator bool()
1fff09c4 g     O .data	00000004 __brkval
1fff2534 g     O .bss	00000001 usb_cdc_line_rtsdtr
0000eca8 g     F .text	00000048 usb_serial_flush_callback
0001610c g     F .text	00000000 _init
000079b4 g     F .text	0000001e FatFile::cacheDirEntry(unsigned char)
00000bec  w    F .text	00000014 LittleFS::remove(char const*)
0000ed38  w    F .text	00000006 svcall_isr
00000d74  w    F .text	00000062 SDClass::remove(char const*)
00000b04  w    F .text	0000001c SDFile::close()
0000ed38  w    F .text	00000006 dma_ch15_isr
0000d1b8 g     F .text	000000c4 lfs_file_truncate
000005f0  w    F .text	0000000a LittleFSFile::isDirectory()
00000d18  w    F .text	0000005c SDFile::~SDFile()
0000ed38  w    F .text	00000006 uart1_error_isr
00014bcc g     F .text	00000028 __libc_fini_array
0000ed38  w    F .text	00000006 usbhs_phy_isr
1fff26c8 g       .bss	00000000 _ebss
0000a4a4 g     F .text	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00004208 g     F .text	00000214 MTPD::WriteDescriptor()
1fff097c g     O .data	00000004 propertyListNum
0000121c  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
000085dc g     F .text	0000005e FatCache::read(unsigned long, unsigned char)
000123bc g     F .text	00000024 strrchr
00014f5c g     F .text	00000040 __hi0bits
00010c38 g     F .text	0000004e .hidden __fixdfsi
0000736c g     F .text	0000005a ExFatFile::mkdir(ExFatFile*, ExName_t*)
0000ed38 g     F .text	00000006 unused_isr
0000441c g     F .text	00000068 MTPD::WriteStorageIDs()
0000ed38  w    F .text	00000006 spi0_isr
0000ed38  w    F .text	00000006 dma_ch3_isr
00005f34  w    F .text	00000002 SDClass::~SDClass()
0000280c g     F .text	000007e4 MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)
00000618  w    F .text	00000004 LittleFS_RAM::static_sync(lfs_config const*)
1fff1498 g     O .bss	00000960 sdx
00001370  w    F .text	00000028 File::~File()
0000155c g     F .text	0000034c storage_configure()
000101b0 g     F .text	00000004 operator delete(void*, unsigned int)
0000ed38  w    F .text	00000006 flash_error_isr
00010374 g     F .text	00000276 .hidden __aeabi_dadd
00010b04 g     F .text	00000082 .hidden __ledf2
00011cfc g     F .text	0000003e strcat
0000ed38  w    F .text	00000006 uart5_error_isr
0000ed38  w    F .text	00000006 rtc_seconds_isr
00015a44 g     O .text	00000094 SPIClass::spi0_hardware
0000ed38  w    F .text	00000006 pdb_isr
0001513c g     F .text	000000a0 __pow5mult
00008154 g     F .text	0000005c FatFile::rmdir()
0001066c g     F .text	0000006a .hidden __aeabi_ul2d
0000ecf0  w    F .text	00000048 usage_fault_isr
000005dc  w    F .text	00000012 LittleFSFile::operator bool()
0000ed38  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00008730 g     F .text	0000008c FatPartition::allocateCluster(unsigned long, unsigned long*)
00000ac8  w    F .text	0000001e LittleFSFile::write(void const*, unsigned int)
00010cb8 g     F .text	00000028 .hidden __popcountsi2
0000ed38  w    F .text	00000006 dma_ch14_isr
00000ee8  w    F .text	0000004c SDClass::exists(char const*)
00000000  w      *UND*	00000000 __deregister_frame_info
1fff26b4 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
00001068  w    F .text	00000058 LittleFS::usedSize()
0000c608 g     F .text	00000016 lfs_file_size
0000ff9c g     F .text	00000010 systick_isr
0000ed38  w    F .text	00000006 rtc_alarm_isr
00000648  w    F .text	00000014 LittleFSFile::whoami()
0000052c  w    F .text	0000000c File::isDirectory()
00009368 g     F .text	00000020 FatFile::getSFN(char*)
000099fc g     F .text	00000076 SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000ed38  w    F .text	00000006 dma_ch2_isr
1fff09d0 g     O .data	00000010 Serial
0000ed38  w    F .text	00000006 ftm1_isr
000004c8  w    F .text	00000016 File::seek(unsigned long long, int)
0000ffcc  w    F .text	00000006 usb_serial_class::write(unsigned char)
000094a8 g     F .text	0000005e FsBaseFile::openNext(FsBaseFile*, int)
0000ed40  w    F .text	0000000c startup_early_hook
0000ed38  w    F .text	00000006 dma_ch13_isr
00006f08 g     F .text	0000008c ExFatFile::addCluster()
000156cc  w    O .text	00000060 vtable for File
0000ed38  w    F .text	00000006 uart2_error_isr
00000f78  w    F .text	00000054 SDClass::usedSize()
0000ea64 g     F .text	00000030 usb_serial_peekchar
00010bf8 g     F .text	00000012 .hidden __aeabi_dcmpgt
00001d54 g     F .text	00000002 mtp_yield()
000115f0 g     F .text	00000000 memchr
000086c8 g     F .text	00000066 FatPartition::fatPut(unsigned long, unsigned long)
1fff0ab8 g     O .data	00000016 usb_string_serial_number_default
0000ecf0 g     F .text	00000048 fault_isr
00014c90 g     F .text	000001d0 _free_r
0000a2d8 g     F .text	00000004 SdioCard::readStop()
0000695c g     F .text	00000060 FsCache::get(unsigned long, unsigned char)
00010be4 g     F .text	00000012 .hidden __aeabi_dcmpge
00000a1c  w    F .text	0000002e LittleFSFile::close()
0000ed38  w    F .text	00000006 usb_charge_isr
0000ffbc  w    F .text	00000004 usb_serial_class::flush()
00000a68  w    F .text	0000001a LittleFSFile::position()
0000ed38  w    F .text	00000006 cmt_isr
00010370 g     F .text	0000027a .hidden __aeabi_dsub
000088c4 g     F .text	0000011a FatPartition::init(BlockDeviceInterface*, unsigned char)
0000ed38  w    F .text	00000006 usbhs_isr
00007a88 g     F .text	0000014e FatFile::mkdir(FatFile*, fname_t*)
1fff1474 g     O .data	00000004 __malloc_sbrk_base
0000ffb4  w    F .text	00000004 usb_serial_class::read()
0000ed38  w    F .text	00000006 ftm3_isr
00000570  w    F .text	0000000c File::rewindDirectory()
0000ed38  w    F .text	00000006 tsi0_isr
00008da8 g     F .text	00000128 FatFile::remove()
0001066c g     F .text	0000006a .hidden __floatundidf
0000ed7c  w    F .text	00000002 __cxa_pure_virtual
000151dc g     F .text	000000ae __lshift
00007bd8 g     F .text	000000c2 FatFile::mkdir(FatFile*, char const*, bool)
0000ed38  w    F .text	00000006 spi2_isr
00006eb0 g     F .text	00000058 exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)
00000ae8  w    F .text	0000001c LittleFSFile::read(void*, unsigned int)
000154a0 g     F .text	00000100 __ssprint_r
000155a0 g     F .text	0000005e _vasnprintf_r
000101a8  w    F .text	00000002 serialEvent()
1fff25b5 g     O .bss	00000001 usb_reboot_timer
00013ba8 g     F .text	000000a4 __register_exitproc
000067e0 g     F .text	000000fe ExFatFile::open(ExFatFile*, char const*, int)
000121ec g     F .text	0000002c strlcpy
0001231c g     F .text	000000a0 strncmp
000073c8 g     F .text	000000d6 ExFatFile::mkdir(ExFatFile*, char const*, bool)
0000eab0 g     F .text	00000038 usb_serial_flush_input
0000c500 g     F .text	000000dc lfs_dir_read
00006de8 g     F .text	00000072 ExFatPartition::freeClusterCount()
000026e4 g     F .text	00000074 MTPStorage_SD::ConstructFilename(int, char*, int)
0001500c g     F .text	00000130 __multiply
0000ebf0 g     F .text	00000018 usb_serial_putchar
00000022 g       *ABS*	00000000 _teensy_model_identifier
1fff2684 g     O .bss	00000028 __malloc_current_mallinfo
000153e4 g     F .text	000000ba __d2b
1fff265c g     O .bss	00000018 HardwareSerial::s_serials_with_serial_events
0000ed38  w    F .text	00000006 can0_bus_off_isr
0000dee4 g     F .text	0000009c lfs_file_sync
00009ef4  w    F .text	0000000e SdioCard::~SdioCard()
00001b98  w    F .text	00000008 MTPStorage_SD::get_FSName(unsigned long)
00005fa8 g     F .text	000000a6 ExFatFile::getName(char*, unsigned int)
1fff2631 g     O .bss	00000001 usb_rx_memory_needed
0000a3a8 g     F .text	00000074 SdioCard::writeStart(unsigned long)
0000f2d8 g     F .text	00000a48 usb_isr
00010fc8 g     F .text	0000000c __cxa_atexit
0000613c g     F .text	0000019e ExFatFile::read(void*, unsigned int)
00000670  w    F .text	00000016 LittleFS_RAM::static_erase(lfs_config const*, unsigned long)
0001060c g     F .text	00000022 .hidden __aeabi_i2d
00000c80  w    F .text	00000018 SDFile::peek()
00006a1c g     F .text	0000000e FsCache::sync()
1fff0980 g     O .data	00000040 SPI
00011690 g     F .text	00000062 memcmp
00015df0  w    O .text	00000028 vtable for usb_serial_class
0000ad74 g     F .text	00000016 SdSpiArduinoDriver::send(unsigned char)
0000ed38  w    F .text	00000006 uart3_error_isr
0000519c g     F .text	0000007c MTPD::GetObject(unsigned long)
0000ade0 g     F .text	00000004 sdCsWrite(unsigned char, bool)
00010fc4  w    F .text	00000002 .hidden __aeabi_ldiv0
0000706c g     F .text	0000005a ExFatFile::rmdir()
0000dd6c g     F .text	00000178 lfs_mkdir
0000ed38  w    F .text	00000006 porta_isr
00004a98 g     F .text	000006e6 MTPD::getObjectPropDesc(unsigned long, unsigned long)
0001092c g     F .text	000001d0 .hidden __divdf3
1fff03d0 g     O .usbbuffers	000005a0 usb_buffer_memory
00009914 g     F .text	00000098 SdSpiCard::sectorCount()
0000ed38  w    F .text	00000006 low_voltage_isr
00001ba4 g     F .text	00000004 MTPStorage_SD::has_directories(unsigned long)
1fff1068 g     O .data	00000408 __malloc_av_
0000ed38  w    F .text	00000006 can0_error_isr
0000eeec g     F .text	0000016c _init_Teensyduino_internal_
00000cd0  w    F .text	00000014 SDFile::flush()
000106d8 g     F .text	00000254 .hidden __muldf3
0000df80 g     F .text	0000004e lfs_file_close
0000ec50 g     F .text	00000058 usb_serial_flush_output
000157b8  w    O .text	00000060 vtable for LittleFSFile
0000ed38  w    F .text	00000006 dma_ch12_isr
00011858 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
00008b5c g     F .text	0000024c FatFile::parsePathName(char const*, fname_t*, char const**)
000006a0  w    F .text	00000016 LittleFS_RAM::static_read(lfs_config const*, unsigned long, unsigned long, void*, unsigned long)
0000ed38  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
0000ad8c g     F .text	00000052 SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
00015600 g     F .text	0000005e _calloc_r
0000ed38  w    F .text	00000006 pit3_isr
00005218 g     F .text	0000006e MTPD::read(char*, unsigned long)
1fff09cc g     O .data	00000001 yield_active_check_flags
0000ed38  w    F .text	00000006 enet_rx_isr
00007220 g     F .text	0000005e ExFatFile::sync()
00007f7c g     F .text	000001d6 FatFile::rename(FatFile*, char const*)
0000a030 g     F .text	0000001c SdioCard::isBusy()
0000ed38  w    F .text	00000006 portc_isr
00009a74 g     F .text	00000038 SdSpiCard::readStop()
000117bc g     F .text	0000009a memset
00010198 g     F .text	00000010 main
1fff2678 g     O .bss	00000004 __malloc_max_total_mem
00006a2c g     F .text	000000b4 ExFatPartition::bitmapFind(unsigned long, unsigned long)
00007630 g     F .text	00000288 ExFatFile::write(void const*, unsigned int)
00015910 g     O .text	00000058 vtable for MTPStorage_SD
000052f8 g     F .text	00000130 MTPD::SendObjectInfo(unsigned long, unsigned long)
0000ecf0  w    F .text	00000048 memmanage_fault_isr
00000c28  w    F .text	00000058 SDFile::available()
00000500  w    F .text	0000000c File::close()
00010294 g     F .text	0000007c usb_init_serialnumber
00000700  w    F .text	00000188 LittleFS::open(char const*, unsigned char)
00016128 g       .text	00000000 __init_array_end
00013d98 g     F .text	00000e34 _dtoa_r
00011050 g     F .text	00000570 _malloc_r
1fff2674 g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
0000ed38  w    F .text	00000006 debugmonitor_isr
00013b60 g     F .text	0000001a __ascii_wctomb
00009388 g     F .text	00000078 FsBaseFile::FsBaseFile(FsBaseFile const&)
0001067c g     F .text	0000005a .hidden __aeabi_l2d
0000fed4 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
00005f2c g     F .text	00000008 SPIClass::transfer(void const*, void*, unsigned int)
00000031 g       *ABS*	00000000 __rtc_localtime
0000ee0c g     F .text	00000044 micros
00000000  w      *UND*	00000000 __libc_fini
00000538  w    F .text	00000038 File::openNextFile(unsigned char)
0000ed38  w    F .text	00000006 cmp1_isr
0000ed38  w    F .text	00000006 ftm0_isr
000070c8 g     F .text	00000158 ExFatFile::syncDir()
00014bf4 g     F .text	0000009c _malloc_trim_r
1fff0ab4 g     O .data	00000004 string0
0000eae8 g     F .text	00000108 usb_serial_write
0000ed4c  w    F .text	00000002 startup_late_hook
0000ffb8  w    F .text	00000004 usb_serial_class::available()
00011e28 g     F .text	000002dc strcmp
1fff09e0 g     O .data	00000001 _serialEvent_default
00005288 g     F .text	00000044 MTPD::readstring(char*)
0000839c g     F .text	0000000c FatFile::sync()
00000e98  w    F .text	00000050 SDClass::mkdir(char const*)
1fff0a84  w    O .data	0000002e usb_string_product_name
00004000 g     F .text	00000026 MTPD::GetNumObjects(unsigned long, unsigned long)
0000ee50 g     F .text	0000009c delay
00010b0c g     F .text	0000007a .hidden __nedf2
0000ed38  w    F .text	00000006 tpm0_isr
00001c3c g     F .text	00000118 MTPStorage_SD::CloseIndex()
00016128 g     F .fini	00000000 _fini
00004028 g     F .text	00000018 MTPD::get_buffer()
00000518  w    F .text	00000014 File::name()
000099ac g     F .text	00000050 SdSpiCard::readStart(unsigned long)
000068f0 g     F .text	00000040 ExFatFile::openNext(ExFatFile*, int)
00011c64 g     F .text	0000004c sprintf
00010030 g     F .text	0000001c Print::printf(char const*, ...)
0000ed38  w    F .text	00000006 i2s0_rx_isr
0000ed38  w    F .text	00000006 uart4_error_isr
000100cc g     F .text	00000010 Print::print(long)
00007a68 g     F .text	0000001e FatFile::close()
000004e0  w    F .text	00000010 File::position()
00001398  w    F .text	00000064 SDFile::~SDFile()
0000c620 g     F .text	0000002e lfs_stat
0000864c g     F .text	0000000c FatPartition::clusterStartSector(unsigned long) const
00013c60 g     F .text	0000000c atexit
000121b8 g     F .text	00000032 strcspn
00009e7c  w    F .text	00000002 SdioCard::~SdioCard()
000010d8  w    F .text	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
000005a8  w    F .text	00000018 File::write(unsigned char)
00013b7c g     F .text	0000002c _write_r
1fff2024 g     O .bss	000004b0 SD
0000a18c g     F .text	000000d4 SdioCard::erase(unsigned long, unsigned long)
0000ed38  w    F .text	00000006 can0_message_isr
00005d38 g     F .text	000000a4 SPIClass::setMOSI(unsigned char)
1fff0ef8 g     O .data	00000004 _impure_ptr
00015660  w    O .text	00000024 vtable for Stream
0000ed38  w    F .text	00000006 can1_message_isr
000062dc g     F .text	0000002e ExFatFile::peek()
00015684  w    O .text	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
0000ed38  w    F .text	00000006 nmi_isr
00008ed0 g     F .text	000000b6 FatFile::lfnUniqueSfn(fname_t*)
00001230  w    F .text	00000014 SDFile::write(void const*, unsigned int)
000095cc g     F .text	00000028 FsVolume::open(char const*, int)
00009e1c g     F .text	0000000c SdioCard::errorCode() const
00007d5c g     F .text	0000000e FatFile::open(FatVolume*, char const*, int)
00001244  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
00016118 g       .text	00000000 __preinit_array_end
00009624  w    F .text	00000002 SdSpiCard::~SdSpiCard()
0000ed38  w    F .text	00000006 sdhc_isr
00006ae0 g     F .text	000000e0 ExFatPartition::init(BlockDeviceInterface*, unsigned char)
00006ca4 g     F .text	00000034 ExFatPartition::dirCache(DirPos_t*, unsigned char)
00009afc g     F .text	000000b8 SdSpiCard::erase(unsigned long, unsigned long)
000030e4 g     F .text	0000000c MTPStorage_SD::DeleteObject(unsigned long)
000115c0 g     F .text	0000002a __ascii_mbtowc
000096ec g     F .text	0000003e SdSpiCard::isBusy()
00015ae0 g     O .text	00000058 vtable for SdSpiCard
0000990c  w    F .text	00000008 SdSpiCard::readCID(CID*)
000018a8 g     F .text	00000198 setup
00015e24 g     O .text	00000060 usb_descriptor_list
0000f0e4 g     F .text	0000003c usb_rx
00009f80 g     F .text	00000020 SdioCard::status()
00002040 g     F .text	00000080 MTPStorage_SD::ResetIndex()
0000ed38  w    F .text	00000006 dma_ch10_isr
00000470  w    F .text	00000002 Print::flush()
0000ed38  w    F .text	00000006 uart0_error_isr
000004f0  w    F .text	00000010 File::size()
00000fcc  w    F .text	00000062 SDClass::rmdir(char const*)
0000f058 g     F .text	00000040 usb_malloc
00007d78 g     F .text	00000198 FatFile::read(void*, unsigned int)
0000ed38  w    F .text	00000006 i2s0_isr
0000e8b0 g     F .text	00000038 lfs_crc
00007d6c g     F .text	0000000c FatFile::openRoot(FatVolume*)
20030000 g       .bss	00000000 _estack
000095f4 g     F .text	00000004 operator new(unsigned int, unsigned long*)
00009904  w    F .text	00000008 SdSpiCard::readCSD(csd_t*)
0000057c  w    F .text	0000002c File::read()
0000ec08 g     F .text	00000048 usb_serial_write_buffer_free
000097ac g     F .text	0000003c SdSpiCard::waitNotBusy(unsigned short)
0000ed38  w    F .text	00000006 enet_timer_isr
00010ba8 g     F .text	00000012 .hidden __aeabi_dcmpeq
00001454  w    F .text	00000030 File::~File()
00010020  w    F .text	0000000e _write
00000a04  w    F .text	00000018 LittleFSFile::name()
1fff1478 g       .data	00000000 _edata
000013fc  w    F .text	00000058 LittleFSFile::~LittleFSFile()
00006d44 g     F .text	00000024 ExFatPartition::fatPut(unsigned long, unsigned long)
000044f0 g     F .text	00000250 MTPD::GetObjectInfo(unsigned long)
00009e7c  w    F .text	00000002 SdioCard::~SdioCard()
0000ed38  w    F .text	00000006 i2s0_tx_isr
0000ed38  w    F .text	00000006 adc1_isr
0000e254 g     F .text	00000130 lfs_remove
00000be0  w    F .text	0000000c LittleFSFile::flush()
00009bf8 g     F .text	0000002c SdSpiCard::syncDevice()
00007920 g     F .text	00000094 FatFile::addDirCluster()
0000047c  w    F .text	0000000c File::read(void*, unsigned int)
0000ffc0  w    F .text	00000004 usb_serial_class::availableForWrite()
0000ed38  w    F .text	00000006 cmp0_isr
000004bc  w    F .text	0000000c File::truncate(unsigned long long)
0000e240 g     F .text	00000014 lfs_file_open
00010310 g     F .text	0000004c ultoa
00005f34  w    F .text	00000002 SDClass::~SDClass()
00009428 g     F .text	00000080 FsBaseFile::open(FsVolume*, char const*, int)
00002288 g     F .text	00000208 MTPStorage_SD::ReadIndexRecord(unsigned long)
000101ac g     F .text	00000004 operator new(unsigned int)
0000ff54 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff1470 g     O .data	00000004 __malloc_trim_threshold
0000ffb0  w    F .text	00000004 usb_serial_class::peek()
00002490 g     F .text	0000005e MTPStorage_SD::GetNextObjectHandle(unsigned long)
000014e4  w    F .text	00000078 MTPStorage_SD::~MTPStorage_SD()
1fff2014 g     O .bss	00000010 mtpd
000152d0 g     F .text	00000114 __mdiff
00009e6c g     F .text	00000010 SdioCard::readOCR(unsigned long*)
00010c38 g     F .text	0000004e .hidden __aeabi_d2iz
000036bc g     F .text	000000aa MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)
00006cd8 g     F .text	00000058 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
1fff2524 g     O .bss	00000001 usb_cdc_transmit_flush_timer
0000ed38  w    F .text	00000006 pit_isr
0000a2d8 g     F .text	00000004 SdioCard::writeStop()
00009614  w    F .text	00000010 SdSpiCard::writeSector(unsigned long, unsigned char const*)
00005f94 g     F .text	00000014 ExFatFile::close()
00015ef8 g     O .text	00000101 _ctype_
0000ed38  w    F .text	00000006 dac0_isr
00009600  w    F .text	00000010 SdSpiCard::readSector(unsigned long, unsigned char*)
00016118 g       .text	00000000 __init_array_start
00010fc4  w    F .text	00000002 .hidden __aeabi_idiv0
0000ed38  w    F .text	00000006 can1_tx_warn_isr
00001d58 g     F .text	000002e8 MTPStorage_SD::OpenIndex()
00010c0c g     F .text	0000002c .hidden __unorddf2
00000dd8  w    F .text	00000074 SDClass::rename(char const*, char const*)
0000ed38  w    F .text	00000006 uart0_status_isr
0000ed38  w    F .text	00000006 mcg_isr
00001258  w    F .text	0000002c LittleFS::rmdir(char const*)
0000c650 g     F .text	0000014c lfs_mount
000123e0 g     F .text	00000034 strspn
00000400 g     O .text	00000010 flashconfigbytes
00012240 g     F .text	000000dc strlen
00008a2c g     F .text	0000002e FatFile::openCluster(FatFile*)
00010b98 g     F .text	00000010 .hidden __aeabi_cdcmpeq
00010afc g     F .text	0000008a .hidden __gedf2
000081b0 g     F .text	00000094 FatFile::seekSet(unsigned long)
1fff0a84 g     O .data	0000002e usb_string_product_name_default
00013b48 g     F .text	00000018 vdprintf
0000ed38  w    F .text	00000006 dma_ch1_isr
0000a120 g     F .text	0000006c SdioCard::sectorCount()
00009508 g     F .text	000000c4 FsVolume::begin(BlockDeviceInterface*)
0000f120 g     F .text	0000002c usb_tx_packet_count
0000831c g     F .text	00000080 FatFile::openNext(FatFile*, int)
00011d3c g     F .text	000000ce strchr
00015b38 g     O .text	00000058 vtable for SdioCard
00010630 g     F .text	0000003a .hidden __aeabi_f2d
0000ed38  w    F .text	00000006 dma_ch5_isr
00002544 g     F .text	000001a0 MTPStorage_SD::close()
0000d064 g     F .text	00000120 lfs_file_read
00008a5c g     F .text	00000100 FatFile::getName(char*, unsigned int)
0000ed38  w    F .text	00000006 can0_rx_warn_isr
0000c4d8 g     F .text	00000028 lfs_dir_close
000014e4  w    F .text	00000078 MTPStorage_SD::~MTPStorage_SD()
00002758 g     F .text	000000b4 MTPStorage_SD::rename(unsigned long, char const*)
0000ed38  w    F .text	00000006 can0_tx_warn_isr
00000894  w    F .text	00000170 LittleFSFile::openNextFile(unsigned char)
0000ed38  w    F .text	00000006 uart4_status_isr
0000ab1c g     F .text	00000074 SdioCard::readStart(unsigned long)
00000000  w      *UND*	00000000 _Jv_RegisterClasses
0000ac60 g     F .text	00000090 SdSpiArduinoDriver::activate()
00001ba0 g     F .text	00000004 MTPStorage_SD::readonly(unsigned long)
00010370 g     F .text	0000027a .hidden __subdf3
00016118 g       .text	00000000 __preinit_array_start
00006bc0 g     F .text	000000a6 ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
0000252c g     F .text	00000016 MTPStorage_SD::GetSize(unsigned long)
00000620  w    F .text	00000028 File::whoami()
00014f9c g     F .text	0000005a __lo0bits
00006c68 g     F .text	0000003a ExFatPartition::chainSize(unsigned long)
00008244 g     F .text	000000d6 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
0001035c g     F .text	0000000a __aeabi_atexit
00005180 g     F .text	0000001a MTPD::receive_buffer()
00000000  w      *UND*	00000000 __register_frame_info
00006f94 g     F .text	000000d6 ExFatFile::remove()
0000ed38  w    F .text	00000006 cmp2_isr
0000ff98 g     F .text	00000004 pendablesrvreq_isr
000010f0  w    F .text	00000034 SDClass::totalSize()
00005428 g     F .text	00000072 MTPD::SendObject()
00001bb4 g     F .text	0000000c MTPStorage_SD::usedSize(unsigned long)
0000046c  w    F .text	00000004 Print::availableForWrite()
1fff0efc g     O .data	0000016c __global_locale
0000ed38  w    F .text	00000006 wakeup_isr
00005ddc g     F .text	000000a0 SPIClass::setMISO(unsigned char)
0000a6bc g     F .text	00000394 SdioCard::begin(SdioConfig)
00006950 g     F .text	0000000c FsCache::invalidate()
0000ed38  w    F .text	00000006 cmp3_isr
0001004c g     F .text	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
00008658 g     F .text	0000006e FatPartition::fatGet(unsigned long, unsigned long*)
00011040 g     F .text	00000010 free
0000ed38  w    F .text	00000006 tpm2_isr
00014edc g     F .text	00000080 __multadd
00014ec8 g     F .text	00000012 _Bfree
0000104c  w    F .text	0000001a SDFile::size()
0000ed38  w    F .text	00000006 dma_ch0_isr
00000d18  w    F .text	0000005c SDFile::~SDFile()
1fff0ab8  w    O .data	00000016 usb_string_serial_number
0000ed38  w    F .text	00000006 enet_tx_isr
00006e74 g     F .text	0000003a exFatHashName(char const*, unsigned int, unsigned short)
0000ab90 g     F .text	000000d0 SdioCard::readSector(unsigned long, unsigned char*)
00009e50 g     F .text	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text:

00000000 <_VectorsFlash>:
  str = fsFmtField(str, 2*(time & 31) + sec100/100, '.');
  *--str = ':';
  return fsFmtTime(str, time);
}
//------------------------------------------------------------------------------
char* fsFmtTimeZone(char* str, int8_t tz) {
       0:	... ....9.......
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      10:	................
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
      20:	............9...
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      30:	9...............
  }
}  // namespace FsDateTime
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
      40:	9...9...9...9...
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
      50:	9...9...9...9...
      tz = -tz;
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      60:	9...9...9...9...
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      *--str = sign;
    }
    *--str = 'C';
    *--str = 'T';
      70:	9...9...9...9...
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      80:	9...9...9...9...
      90:	9...9...9...9...
      a0:	9...9...9...9...
      b0:	9...9...9...9...
      c0:	9...9...9...9...
      d0:	9...9...9...9...
      e0:	9...9...9...9...
      f0:	9...9...9...9...
     100:	9...9...9...9...
     110:	9.......9...9...
     120:	9...9...9...9...
     130:	9...9...9...9...
     140:	9...9...9...9...
     150:	9...9...9...9...
     160:	9...9...9...9...
     170:	9...9...9...9...
     180:	9...9...9...9...
     190:	9...9...9...9...
     1a0:	9...9...9...9...
     1b0:	9...9...9...9...
     1c0:	9...9...9...9...

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #356]	; (338 <ResetHandler+0x168>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	ed40 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #336]	; (33c <ResetHandler+0x16c>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #332]	; (340 <ResetHandler+0x170>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #332]	; (344 <ResetHandler+0x174>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #332]	; (348 <ResetHandler+0x178>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #328]	; (34c <ResetHandler+0x17c>)
     202:	ldr	r2, [pc, #332]	; (350 <ResetHandler+0x180>)
     204:	str	r2, [r3, #0]
		RTC_SR = 0;
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     206:	ldr	r3, [pc, #332]	; (354 <ResetHandler+0x184>)
     208:	ldrb	r2, [r3, #0]
     20a:	lsls	r1, r2, #28
     20c:	bpl.n	216 <ResetHandler+0x46>
     20e:	ldrb	r2, [r3, #0]
     210:	orr.w	r2, r2, #8
     214:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     216:	ldr	r3, [pc, #320]	; (358 <ResetHandler+0x188>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     218:	ldr	r1, [pc, #320]	; (35c <ResetHandler+0x18c>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     21a:	movs	r2, #170	; 0xaa
     21c:	strb	r2, [r3, #0]
     21e:	ldr	r2, [pc, #320]	; (360 <ResetHandler+0x190>)
     220:	ldr	r3, [pc, #320]	; (364 <ResetHandler+0x194>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     222:	cmp	r3, r1
     224:	bcs.n	230 <ResetHandler+0x60>
     226:	ldr.w	r0, [r2, #4]!
     22a:	str.w	r0, [r3], #4
     22e:	b.n	222 <ResetHandler+0x52>
     230:	ldr	r3, [pc, #308]	; (368 <ResetHandler+0x198>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     232:	ldr	r1, [pc, #312]	; (36c <ResetHandler+0x19c>)
     234:	movs	r2, #0
     236:	cmp	r3, r1
     238:	bcs.n	240 <ResetHandler+0x70>
     23a:	str.w	r2, [r3], #4
     23e:	b.n	236 <ResetHandler+0x66>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     240:	ldr	r1, [pc, #300]	; (370 <ResetHandler+0x1a0>)
     242:	ldr	r2, [pc, #304]	; (374 <ResetHandler+0x1a4>)
     244:	movs	r3, #0
     246:	ldr.w	r0, [r2, r3, lsl #2]
     24a:	str.w	r0, [r1, r3, lsl #2]
     24e:	adds	r3, #1
     250:	cmp	r3, #116	; 0x74
     252:	bne.n	246 <ResetHandler+0x76>
     254:	ldr	r3, [pc, #288]	; (378 <ResetHandler+0x1a8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     256:	ldr	r2, [pc, #292]	; (37c <ResetHandler+0x1ac>)
     258:	movs	r1, #128	; 0x80
     25a:	strb.w	r1, [r3], #1
     25e:	cmp	r3, r2
     260:	bne.n	25a <ResetHandler+0x8a>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     262:	ldr	r3, [pc, #284]	; (380 <ResetHandler+0x1b0>)
     264:	ldr	r2, [pc, #264]	; (370 <ResetHandler+0x1a0>)
     266:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     268:	ldr	r3, [pc, #280]	; (384 <ResetHandler+0x1b4>)
     26a:	movs	r2, #138	; 0x8a
     26c:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     26e:	sub.w	r3, r3, #4096	; 0x1000
     272:	movs	r2, #36	; 0x24
     274:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     276:	movs	r2, #160	; 0xa0
     278:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     27a:	ldrb	r2, [r3, #6]
     27c:	lsls	r2, r2, #30
     27e:	bpl.n	27a <ResetHandler+0xaa>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     280:	ldrb	r2, [r3, #6]
     282:	lsls	r4, r2, #27
     284:	bmi.n	280 <ResetHandler+0xb0>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     286:	ldr	r2, [pc, #256]	; (388 <ResetHandler+0x1b8>)
     288:	ldrb	r3, [r2, #6]
     28a:	and.w	r3, r3, #12
     28e:	cmp	r3, #8
     290:	ldr	r3, [pc, #244]	; (388 <ResetHandler+0x1b8>)
     292:	bne.n	288 <ResetHandler+0xb8>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(2);
    #elif F_CPU == 120000000
	MCG_C5 = MCG_C5_PRDIV0(1);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(14);
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     294:	movs	r2, #1
     296:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
     298:	movs	r2, #72	; 0x48
     29a:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     29c:	ldrb	r2, [r3, #6]
     29e:	lsls	r0, r2, #26
     2a0:	bpl.n	29c <ResetHandler+0xcc>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2a2:	ldr	r2, [pc, #228]	; (388 <ResetHandler+0x1b8>)
     2a4:	ldrb	r1, [r2, #6]
     2a6:	ldr	r3, [pc, #224]	; (388 <ResetHandler+0x1b8>)
     2a8:	lsls	r1, r1, #25
     2aa:	bpl.n	2a4 <ResetHandler+0xd4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     2ac:	ldr	r2, [pc, #220]	; (38c <ResetHandler+0x1bc>)
     2ae:	ldr	r1, [pc, #224]	; (390 <ResetHandler+0x1c0>)
     2b0:	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2b2:	movs	r1, #2
     2b4:	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2b6:	movs	r2, #32
     2b8:	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ba:	ldrb	r2, [r3, #6]
     2bc:	and.w	r2, r2, #12
     2c0:	cmp	r2, #12
     2c2:	bne.n	2ba <ResetHandler+0xea>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2c4:	ldr	r3, [pc, #204]	; (394 <ResetHandler+0x1c4>)
     2c6:	ldr	r2, [pc, #208]	; (398 <ResetHandler+0x1c8>)
     2c8:	str	r2, [r3, #0]
#endif

#if defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started.  For Teensy 3.6
	// we don't do this early.  See comment above about slow rising power.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     2ca:	ldr	r2, [pc, #208]	; (39c <ResetHandler+0x1cc>)
     2cc:	ldr	r4, [pc, #208]	; (3a0 <ResetHandler+0x1d0>)
     2ce:	ldr	r3, [r2, #0]
     2d0:	ands.w	r3, r3, #256	; 0x100
     2d4:	bne.n	2de <ResetHandler+0x10e>
		RTC_SR = 0;
     2d6:	str	r3, [r4, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     2d8:	mov.w	r3, #5376	; 0x1500
     2dc:	str	r3, [r2, #0]
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2de:	ldr	r3, [pc, #196]	; (3a4 <ResetHandler+0x1d4>)
     2e0:	ldr	r2, [pc, #196]	; (3a8 <ResetHandler+0x1d8>)
     2e2:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2e4:	movs	r2, #0
     2e6:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2e8:	movs	r2, #7
     2ea:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2ee:	ldr	r2, [pc, #188]	; (3ac <ResetHandler+0x1dc>)
     2f0:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2f4:	cpsie	i

	_init_Teensyduino_internal_();
     2f6:	bl	eeec <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2fa:	ldr	r3, [r4, #0]
     2fc:	lsls	r2, r3, #31
     2fe:	bpl.n	30c <ResetHandler+0x13c>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     300:	ldr	r0, [pc, #172]	; (3b0 <ResetHandler+0x1e0>)
     302:	bl	eddc <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     306:	ldr	r3, [pc, #172]	; (3b4 <ResetHandler+0x1e4>)
     308:	ldr	r2, [pc, #172]	; (3b8 <ResetHandler+0x1e8>)
     30a:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     30c:	ldr	r3, [pc, #172]	; (3bc <ResetHandler+0x1ec>)
     30e:	ldrb	r3, [r3, #0]
     310:	lsls	r3, r3, #25
     312:	bpl.n	328 <ResetHandler+0x158>
     314:	ldr	r4, [pc, #156]	; (3b4 <ResetHandler+0x1e4>)
     316:	ldr	r3, [pc, #160]	; (3b8 <ResetHandler+0x1e8>)
     318:	ldr	r2, [r4, #0]
     31a:	cmp	r2, r3
     31c:	bne.n	328 <ResetHandler+0x158>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     31e:	ldr	r0, [pc, #144]	; (3b0 <ResetHandler+0x1e0>)
     320:	bl	eddc <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     324:	movs	r3, #0
     326:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     328:	bl	10fe0 <__libc_init_array>

	startup_late_hook();
     32c:	bl	ed4c <startup_late_hook>
	main();
     330:	bl	10198 <main>
     334:	b.n	334 <ResetHandler+0x164>
     336:	nop
     338:	.word	0x4005200e
     33c:	.word	0x40048030
     340:	.word	0x00043f82
     344:	.word	0x2b000001
     348:	.word	0xe000ed88
     34c:	.word	0xe0082000
     350:	.word	0x85000003
     354:	.word	0x4007d002
     358:	.word	0x4007e000
     35c:	.word	0x1fff1478
     360:	.word	0x00016130
     364:	.word	0x1fff0970
     368:	.word	0x1fff1478
     36c:	.word	0x1fff26c8
     370:	.word	0x1fff0200
     374:	.word	0x00000000
     378:	.word	0xe000e400
     37c:	.word	0xe000e464
     380:	.word	0xe000ed08
     384:	.word	0x40065000
     388:	.word	0x40064000
     38c:	.word	0x40048044
     390:	.word	0x01030000
     394:	.word	0x40048004
     398:	.word	0x000510c0
     39c:	.word	0x4003d010
     3a0:	.word	0x4003d014
     3a4:	.word	0xe000e014
     3a8:	.word	0x000176ff
     3ac:	.word	0x20200000
     3b0:	.word	0x00000031
     3b4:	.word	0x4003e01c
     3b8:	.word	0x5a94c3a5
     3bc:	.word	0x4007f000
     3c0:	.word	0xffffffff
     3c4:	.word	0xffffffff
     3c8:	.word	0xffffffff
     3cc:	.word	0xffffffff
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff1478
     42c:	.word	0x00000000
     430:	.word	0x0001612c

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff147c
     460:	.word	0x0001612c
     464:	.word	0x1fff1478
     468:	.word	0x00000000

0000046c <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     46c:	movs	r0, #0
     46e:	bx	lr

00000470 <Print::flush()>:
	virtual void flush()				{ }
     470:	bx	lr
     472:	nop

00000474 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
     474:	mov.w	r0, #4294967295
     478:	bx	lr
     47a:	nop

0000047c <File::read(void*, unsigned int)>:
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
     47c:	ldr	r0, [r0, #16]
     47e:	cbz	r0, 486 <File::read(void*, unsigned int)+0xa>
     480:	ldr	r3, [r0, #0]
     482:	ldr	r3, [r3, #40]	; 0x28
     484:	bx	r3
	}
     486:	bx	lr

00000488 <File::write(void const*, unsigned int)>:
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
     488:	ldr	r0, [r0, #16]
     48a:	cbz	r0, 492 <File::write(void const*, unsigned int)+0xa>
     48c:	ldr	r3, [r0, #0]
     48e:	ldr	r3, [r3, #44]	; 0x2c
     490:	bx	r3
	}
     492:	bx	lr

00000494 <File::available()>:
	virtual int available() {
		return (f) ? f->available() : 0;
     494:	ldr	r0, [r0, #16]
     496:	cbz	r0, 49e <File::available()+0xa>
     498:	ldr	r3, [r0, #0]
     49a:	ldr	r3, [r3, #16]
     49c:	bx	r3
	}
     49e:	bx	lr

000004a0 <File::peek()>:
	virtual int peek() {
		return (f) ? f->peek() : -1;
     4a0:	ldr	r0, [r0, #16]
     4a2:	cbz	r0, 4aa <File::peek()+0xa>
     4a4:	ldr	r3, [r0, #0]
     4a6:	ldr	r3, [r3, #24]
     4a8:	bx	r3
	}
     4aa:	mov.w	r0, #4294967295
     4ae:	bx	lr

000004b0 <File::flush()>:
	virtual void flush() {
		if (f) f->flush();
     4b0:	ldr	r0, [r0, #16]
     4b2:	cbz	r0, 4ba <File::flush()+0xa>
     4b4:	ldr	r3, [r0, #0]
     4b6:	ldr	r3, [r3, #12]
     4b8:	bx	r3
     4ba:	bx	lr

000004bc <File::truncate(unsigned long long)>:
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
     4bc:	ldr	r0, [r0, #16]
     4be:	cbz	r0, 4c6 <File::truncate(unsigned long long)+0xa>
     4c0:	ldr	r1, [r0, #0]
     4c2:	ldr	r1, [r1, #48]	; 0x30
     4c4:	bx	r1
	}
     4c6:	bx	lr

000004c8 <File::seek(unsigned long long, int)>:
	virtual bool seek(uint64_t pos, int mode) {
     4c8:	push	{r4}
		return (f) ? f->seek(pos, mode) : false;
     4ca:	ldr	r0, [r0, #16]
     4cc:	cbz	r0, 4d8 <File::seek(unsigned long long, int)+0x10>
     4ce:	ldr	r4, [r0, #0]
     4d0:	ldr	r1, [r4, #52]	; 0x34
	}
     4d2:	ldr.w	r4, [sp], #4
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
     4d6:	bx	r1
	}
     4d8:	ldr.w	r4, [sp], #4
     4dc:	bx	lr
     4de:	nop

000004e0 <File::position()>:
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
     4e0:	ldr	r0, [r0, #16]
     4e2:	cbz	r0, 4ea <File::position()+0xa>
     4e4:	ldr	r3, [r0, #0]
     4e6:	ldr	r3, [r3, #56]	; 0x38
     4e8:	bx	r3
	}
     4ea:	movs	r0, #0
     4ec:	movs	r1, #0
     4ee:	bx	lr

000004f0 <File::size()>:
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
     4f0:	ldr	r0, [r0, #16]
     4f2:	cbz	r0, 4fa <File::size()+0xa>
     4f4:	ldr	r3, [r0, #0]
     4f6:	ldr	r3, [r3, #60]	; 0x3c
     4f8:	bx	r3
	}
     4fa:	movs	r0, #0
     4fc:	movs	r1, #0
     4fe:	bx	lr

00000500 <File::close()>:
	virtual void close() {
		if (f) f->close();
     500:	ldr	r0, [r0, #16]
     502:	cbz	r0, 50a <File::close()+0xa>
     504:	ldr	r3, [r0, #0]
     506:	ldr	r3, [r3, #64]	; 0x40
     508:	bx	r3
     50a:	bx	lr

0000050c <File::operator bool()>:
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
     50c:	ldr	r0, [r0, #16]
     50e:	cbz	r0, 516 <File::operator bool()+0xa>
     510:	ldr	r3, [r0, #0]
     512:	ldr	r3, [r3, #68]	; 0x44
     514:	bx	r3
	}
     516:	bx	lr

00000518 <File::name()>:
	virtual const char* name() {
		return (f) ? f->name() : "";
     518:	ldr	r0, [r0, #16]
     51a:	cbz	r0, 522 <File::name()+0xa>
     51c:	ldr	r3, [r0, #0]
     51e:	ldr	r3, [r3, #72]	; 0x48
     520:	bx	r3
	}
     522:	ldr	r0, [pc, #4]	; (528 <File::name()+0x10>)
     524:	bx	lr
     526:	nop
     528:	.word	0x00015880

0000052c <File::isDirectory()>:
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
     52c:	ldr	r0, [r0, #16]
     52e:	cbz	r0, 536 <File::isDirectory()+0xa>
     530:	ldr	r3, [r0, #0]
     532:	ldr	r3, [r3, #76]	; 0x4c
     534:	bx	r3
	}
     536:	bx	lr

00000538 <File::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
     538:	push	{r3, r4, r5, lr}
		return (f) ? f->openNextFile(mode) : *this;
     53a:	ldr	r3, [r1, #16]
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
     53c:	mov	r4, r0
		return (f) ? f->openNextFile(mode) : *this;
     53e:	cbz	r3, 54c <File::openNextFile(unsigned char)+0x14>
     540:	ldr	r5, [r3, #0]
     542:	mov	r1, r3
     544:	ldr	r3, [r5, #80]	; 0x50
     546:	blx	r3
	}
     548:	mov	r0, r4
     54a:	pop	{r3, r4, r5, pc}
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     54c:	mov.w	r0, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
     550:	ldr	r2, [pc, #24]	; (56c <File::openNextFile(unsigned char)+0x34>)
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
     552:	strb	r3, [r4, #4]
     554:	strb	r3, [r4, #12]
     556:	str	r0, [r4, #8]
     558:	str	r2, [r4, #0]
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
     55a:	ldr	r3, [r1, #16]
     55c:	str	r3, [r4, #16]
		if (f) f->refcount++;
     55e:	cmp	r3, #0
     560:	beq.n	548 <File::openNextFile(unsigned char)+0x10>
     562:	ldr	r2, [r3, #16]
     564:	adds	r2, #1
     566:	str	r2, [r3, #16]
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
	}
     568:	mov	r0, r4
     56a:	pop	{r3, r4, r5, pc}
     56c:	.word	0x000156d4

00000570 <File::rewindDirectory()>:
	virtual void rewindDirectory(void) {
		if (f) f->rewindDirectory();
     570:	ldr	r0, [r0, #16]
     572:	cbz	r0, 57a <File::rewindDirectory()+0xa>
     574:	ldr	r3, [r0, #0]
     576:	ldr	r3, [r3, #84]	; 0x54
     578:	bx	r3
     57a:	bx	lr

0000057c <File::read()>:
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     57c:	ldr	r0, [r0, #16]
     57e:	cbz	r0, 5a2 <File::read()+0x26>
		if (f) f->rewindDirectory();
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
     580:	push	{lr}
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     582:	ldr	r3, [r0, #0]
		if (f) f->rewindDirectory();
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
     584:	sub	sp, #12
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     586:	ldr	r3, [r3, #40]	; 0x28
     588:	movs	r2, #1
     58a:	add.w	r1, sp, #7
     58e:	blx	r3
     590:	cbz	r0, 59c <File::read()+0x20>
		return b;
     592:	ldrb.w	r0, [sp, #7]
	}
     596:	add	sp, #12
     598:	ldr.w	pc, [sp], #4
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     59c:	mov.w	r0, #4294967295
     5a0:	b.n	596 <File::read()+0x1a>
     5a2:	mov.w	r0, #4294967295
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
     5a6:	bx	lr

000005a8 <File::write(unsigned char)>:
	size_t write(uint8_t b) {
     5a8:	push	{r4, lr}
     5aa:	sub	sp, #8
     5ac:	add	r3, sp, #8
		return write(&b, 1);
     5ae:	ldr	r2, [r0, #0]
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
	size_t write(uint8_t b) {
     5b0:	strb.w	r1, [r3, #-1]!
		return write(&b, 1);
     5b4:	ldr	r4, [r2, #44]	; 0x2c
     5b6:	mov	r1, r3
     5b8:	movs	r2, #1
     5ba:	blx	r4
	}
     5bc:	add	sp, #8
     5be:	pop	{r4, pc}

000005c0 <SDFile::operator bool()>:
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     5c0:	ldr	r3, [r0, #92]	; 0x5c
     5c2:	cbz	r3, 5c8 <SDFile::operator bool()+0x8>
     5c4:	movs	r0, #1
		}
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
     5c6:	bx	lr
     5c8:	ldr	r0, [r0, #96]	; 0x60
     5ca:	adds	r0, #0
     5cc:	it	ne
     5ce:	movne	r0, #1
     5d0:	bx	lr
     5d2:	nop

000005d4 <LittleFSFile::peek()>:
		//Serial.println(" is regular file");
		return lfs_file_write(lfs, file, buf, size);
	}
	virtual int peek() {
		return -1; // TODO...
	}
     5d4:	mov.w	r0, #4294967295
     5d8:	bx	lr
     5da:	nop

000005dc <LittleFSFile::operator bool()>:
			dir = nullptr;
		}
		//Serial.println("  end of close");
	}
	virtual operator bool() {
		return file || dir;
     5dc:	ldr	r3, [r0, #24]
     5de:	cbz	r3, 5e4 <LittleFSFile::operator bool()+0x8>
     5e0:	movs	r0, #1
	}
     5e2:	bx	lr
			dir = nullptr;
		}
		//Serial.println("  end of close");
	}
	virtual operator bool() {
		return file || dir;
     5e4:	ldr	r0, [r0, #28]
     5e6:	adds	r0, #0
     5e8:	it	ne
     5ea:	movne	r0, #1
     5ec:	bx	lr
     5ee:	nop

000005f0 <LittleFSFile::isDirectory()>:
		const char *p = strrchr(fullpath, '/');
		if (p) return p + 1;
		return fullpath;
	}
	virtual boolean isDirectory(void) {
		return dir != nullptr;
     5f0:	ldr	r0, [r0, #28]
	}
     5f2:	adds	r0, #0
     5f4:	it	ne
     5f6:	movne	r0, #1
     5f8:	bx	lr
     5fa:	nop

000005fc <LittleFS::totalSize()>:
		int blocks = lfs_fs_size(&lfs);
		if (blocks < 0 || (lfs_size_t)blocks > config.block_count) return totalSize();
		return blocks * config.block_size;
	}
	uint64_t totalSize() {
		if (!mounted) return 0;
     5fc:	ldrb	r3, [r0, #5]
     5fe:	cbz	r3, 610 <LittleFS::totalSize()+0x14>
		return config.block_count * config.block_size;
     600:	ldr.w	r2, [r0, #160]	; 0xa0
     604:	ldr.w	r3, [r0, #156]	; 0x9c
	}
     608:	movs	r1, #0
		if (blocks < 0 || (lfs_size_t)blocks > config.block_count) return totalSize();
		return blocks * config.block_size;
	}
	uint64_t totalSize() {
		if (!mounted) return 0;
		return config.block_count * config.block_size;
     60a:	mul.w	r0, r3, r2
	}
     60e:	bx	lr
		int blocks = lfs_fs_size(&lfs);
		if (blocks < 0 || (lfs_size_t)blocks > config.block_count) return totalSize();
		return blocks * config.block_size;
	}
	uint64_t totalSize() {
		if (!mounted) return 0;
     610:	mov	r0, r3
		return config.block_count * config.block_size;
	}
     612:	movs	r1, #0
     614:	bx	lr
     616:	nop

00000618 <LittleFS_RAM::static_sync(lfs_config const*)>:
		memset((uint8_t *)(c->context) + index, 0xFF, 256);
		return 0;
	}
	static int static_sync(const struct lfs_config *c) {
		return 0;
	}
     618:	movs	r0, #0
     61a:	bx	lr

0000061c <__tcf_0>:
  const int cs[] = {BUILTIN_SDCARD,38}; // edit to reflect your configuration
#endif
  const int nsd = sizeof(cs)/sizeof(int);

// classes need to be declared here (in storage.h there are declared external)
SDClass sdx[nsd];
     61c:	bx	lr
     61e:	nop

00000620 <File::whoami()>:
	}
	virtual ~File() {
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
     620:	push	{r4, lr}
     622:	mov	r4, r0
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
     624:	mov	r2, r0
     626:	ldr	r3, [r0, #16]
     628:	ldr	r1, [pc, #20]	; (640 <File::whoami()+0x20>)
     62a:	ldr	r0, [pc, #24]	; (644 <File::whoami()+0x24>)
     62c:	bl	10030 <Print::printf(char const*, ...)>
		if (f) f->whoami();
     630:	ldr	r0, [r4, #16]
     632:	cbz	r0, 63e <File::whoami()+0x1e>
     634:	ldr	r3, [r0, #0]
	}
     636:	ldmia.w	sp!, {r4, lr}
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
		if (f) f->whoami();
     63a:	ldr	r3, [r3, #36]	; 0x24
     63c:	bx	r3
     63e:	pop	{r4, pc}
     640:	.word	0x00015840
     644:	.word	0x1fff09d0

00000648 <LittleFSFile::whoami()>:
		close();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() {
		Serial.printf("  LittleFSFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
     648:	mov	r2, r0
     64a:	ldr	r3, [r0, #16]
     64c:	ldr	r1, [pc, #4]	; (654 <LittleFSFile::whoami()+0xc>)
     64e:	ldr	r0, [pc, #8]	; (658 <LittleFSFile::whoami()+0x10>)
     650:	b.w	10030 <Print::printf(char const*, ...)>
     654:	.word	0x0001585c
     658:	.word	0x1fff09d0

0000065c <SDFile::whoami()>:
		if (filename) free(filename);
	}
#ifdef FILE_WHOAMI
	virtual void whoami() {
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
     65c:	mov	r2, r0
     65e:	ldr	r3, [r0, #16]
     660:	ldr	r1, [pc, #4]	; (668 <SDFile::whoami()+0xc>)
     662:	ldr	r0, [pc, #8]	; (66c <SDFile::whoami()+0x10>)
     664:	b.w	10030 <Print::printf(char const*, ...)>
     668:	.word	0x00015884
     66c:	.word	0x1fff09d0

00000670 <LittleFS_RAM::static_erase(lfs_config const*, unsigned long)>:
		//Serial.printf("    ram wr: block=%d, offset=%d, size=%d\n", block, offset, size);
		uint32_t index = block * 256 + offset;
		memcpy((uint8_t *)(c->context) + index, buffer, size);
		return 0;
	}
	static int static_erase(const struct lfs_config *c, lfs_block_t block) {
     670:	push	{r3, lr}
		uint32_t index = block * 256;
		memset((uint8_t *)(c->context) + index, 0xFF, 256);
     672:	ldr	r0, [r0, #0]
     674:	mov.w	r2, #256	; 0x100
     678:	add.w	r0, r0, r1, lsl #8
     67c:	movs	r1, #255	; 0xff
     67e:	bl	117bc <memset>
		return 0;
	}
     682:	movs	r0, #0
     684:	pop	{r3, pc}
     686:	nop

00000688 <LittleFS_RAM::static_prog(lfs_config const*, unsigned long, unsigned long, void const*, unsigned long)>:
		//Serial.printf("    ram rd: block=%d, offset=%d, size=%d\n", block, offset, size);
		uint32_t index = block * 256 + offset;
		memcpy(buffer, (uint8_t *)(c->context) + index, size);
		return 0;
	}
	static int static_prog(const struct lfs_config *c, lfs_block_t block,
     688:	push	{r3, lr}
	  lfs_off_t offset, const void *buffer, lfs_size_t size) {
		//Serial.printf("    ram wr: block=%d, offset=%d, size=%d\n", block, offset, size);
		uint32_t index = block * 256 + offset;
		memcpy((uint8_t *)(c->context) + index, buffer, size);
     68a:	ldr	r0, [r0, #0]
     68c:	add.w	r2, r2, r1, lsl #8
     690:	add	r0, r2
     692:	mov	r1, r3
     694:	ldr	r2, [sp, #8]
     696:	bl	e8e8 <memcpy>
		return 0;
	}
     69a:	movs	r0, #0
     69c:	pop	{r3, pc}
     69e:	nop

000006a0 <LittleFS_RAM::static_read(lfs_config const*, unsigned long, unsigned long, void*, unsigned long)>:
		//Serial.println("mounted atfer format");
		mounted = true;
		return true;
	}
private:
	static int static_read(const struct lfs_config *c, lfs_block_t block,
     6a0:	push	{r3, lr}
	  lfs_off_t offset, void *buffer, lfs_size_t size) {
		//Serial.printf("    ram rd: block=%d, offset=%d, size=%d\n", block, offset, size);
		uint32_t index = block * 256 + offset;
		memcpy(buffer, (uint8_t *)(c->context) + index, size);
     6a2:	ldr	r0, [r0, #0]
     6a4:	add.w	r1, r2, r1, lsl #8
     6a8:	add	r1, r0
     6aa:	ldr	r2, [sp, #8]
     6ac:	mov	r0, r3
     6ae:	bl	e8e8 <memcpy>
		return 0;
	}
     6b2:	movs	r0, #0
     6b4:	pop	{r3, pc}
     6b6:	nop

000006b8 <LittleFS::exists(char const*)>:
			}
		}
		return File();
	}
	bool exists(const char *filepath) {
		if (!mounted) return false;
     6b8:	ldrb	r3, [r0, #5]
     6ba:	cbnz	r3, 6c0 <LittleFS::exists(char const*)+0x8>
		struct lfs_info info;
		if (lfs_stat(&lfs, filepath, &info) < 0) return false;
		return true;
	}
     6bc:	mov	r0, r3
     6be:	bx	lr
				return File(new LittleFSFile(&lfs, file, filepath));
			}
		}
		return File();
	}
	bool exists(const char *filepath) {
     6c0:	push	{lr}
     6c2:	sub	sp, #52	; 0x34
		if (!mounted) return false;
		struct lfs_info info;
		if (lfs_stat(&lfs, filepath, &info) < 0) return false;
     6c4:	mov	r2, sp
     6c6:	adds	r0, #8
     6c8:	bl	c620 <lfs_stat>
     6cc:	mvns	r3, r0
     6ce:	lsrs	r3, r3, #31
		return true;
	}
     6d0:	mov	r0, r3
     6d2:	add	sp, #52	; 0x34
     6d4:	ldr.w	pc, [sp], #4

000006d8 <LittleFSFile::seek(unsigned long long, int)>:
		if (!file) return false;
		if (lfs_file_truncate(lfs, file, size) >= 0) return true;
		return false;
	}
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
		if (!file) return false;
     6d8:	ldr	r1, [r0, #24]
	virtual bool truncate(uint64_t size=0) {
		if (!file) return false;
		if (lfs_file_truncate(lfs, file, size) >= 0) return true;
		return false;
	}
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
     6da:	push	{r3, lr}
     6dc:	ldr	r3, [sp, #8]
		if (!file) return false;
     6de:	cbz	r1, 6fa <LittleFSFile::seek(unsigned long long, int)+0x22>
		int whence;
		if (mode == SeekSet) whence = LFS_SEEK_SET;
     6e0:	cbz	r3, 6ee <LittleFSFile::seek(unsigned long long, int)+0x16>
		else if (mode == SeekCur) whence = LFS_SEEK_CUR;
     6e2:	cmp	r3, #1
     6e4:	beq.n	6ee <LittleFSFile::seek(unsigned long long, int)+0x16>
		else if (mode == SeekEnd) whence = LFS_SEEK_END;
     6e6:	cmp	r3, #2
     6e8:	beq.n	6ee <LittleFSFile::seek(unsigned long long, int)+0x16>
		if (!file) return false;
		if (lfs_file_truncate(lfs, file, size) >= 0) return true;
		return false;
	}
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
		if (!file) return false;
     6ea:	movs	r0, #0
		else if (mode == SeekCur) whence = LFS_SEEK_CUR;
		else if (mode == SeekEnd) whence = LFS_SEEK_END;
		else return false;
		if (lfs_file_seek(lfs, file, pos, whence) >= 0) return true;
		return false;
	}
     6ec:	pop	{r3, pc}
		int whence;
		if (mode == SeekSet) whence = LFS_SEEK_SET;
		else if (mode == SeekCur) whence = LFS_SEEK_CUR;
		else if (mode == SeekEnd) whence = LFS_SEEK_END;
		else return false;
		if (lfs_file_seek(lfs, file, pos, whence) >= 0) return true;
     6ee:	ldr	r0, [r0, #20]
     6f0:	bl	d184 <lfs_file_seek>
     6f4:	mvns	r0, r0
     6f6:	lsrs	r0, r0, #31
     6f8:	pop	{r3, pc}
		if (!file) return false;
		if (lfs_file_truncate(lfs, file, size) >= 0) return true;
		return false;
	}
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
		if (!file) return false;
     6fa:	mov	r0, r1
     6fc:	pop	{r3, pc}
     6fe:	nop

00000700 <LittleFS::open(char const*, unsigned char)>:
		mounted = false;
		config.context = nullptr;
	}
	bool quickFormat();
	bool lowLevelFormat(char progressChar=0);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
     700:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     704:	mov	r5, r1
		//Serial.println("LittleFS open");
		if (!mounted) return File();
     706:	ldrb	r1, [r1, #5]
		mounted = false;
		config.context = nullptr;
	}
	bool quickFormat();
	bool lowLevelFormat(char progressChar=0);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
     708:	sub	sp, #52	; 0x34
     70a:	mov	r4, r0
		//Serial.println("LittleFS open");
		if (!mounted) return File();
     70c:	cmp	r1, #0
     70e:	beq.n	7a6 <LittleFS::open(char const*, unsigned char)+0xa6>
     710:	mov	r7, r2
     712:	mov	r6, r3
		if (mode == FILE_READ) {
     714:	cmp	r3, #0
     716:	bne.n	7c0 <LittleFS::open(char const*, unsigned char)+0xc0>
			struct lfs_info info;
			if (lfs_stat(&lfs, filepath, &info) < 0) return File();
     718:	adds	r5, #8
     71a:	mov	r0, r5
     71c:	mov	r2, sp
     71e:	mov	r1, r7
     720:	bl	c620 <lfs_stat>
     724:	cmp	r0, #0
     726:	blt.n	7a6 <LittleFS::open(char const*, unsigned char)+0xa6>
			//Serial.printf("LittleFS open got info, name=%s\n", info.name);
			if (info.type == LFS_TYPE_REG) {
     728:	ldrb.w	r8, [sp]
     72c:	cmp.w	r8, #1
     730:	beq.n	82a <LittleFS::open(char const*, unsigned char)+0x12a>
					return File(new LittleFSFile(&lfs, file, filepath));
				}
				free(file);
			} else { // LFS_TYPE_DIR
				//Serial.println("  directory");
				lfs_dir_t *dir = (lfs_dir_t *)malloc(sizeof(lfs_dir_t));
     732:	movs	r0, #52	; 0x34
     734:	bl	11030 <malloc>
				if (!dir) return File();
     738:	mov	r9, r0
     73a:	cbz	r0, 7a6 <LittleFS::open(char const*, unsigned char)+0xa6>
				if (lfs_dir_open(&lfs, dir, filepath) >= 0) {
     73c:	mov	r1, r0
     73e:	mov	r2, r7
     740:	mov	r0, r5
     742:	bl	c438 <lfs_dir_open>
     746:	cmp	r0, #0
     748:	blt.n	7a0 <LittleFS::open(char const*, unsigned char)+0xa0>
					return File(new LittleFSFile(&lfs, dir, filepath));
     74a:	movs	r0, #164	; 0xa4
     74c:	bl	101ac <operator new(unsigned int)>
     750:	mov	r8, r0
		file = filein;
		dir = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
		//Serial.printf("  LittleFSFile ctor (file), this=%x\n", (int)this);
	}
	LittleFSFile(lfs_t *lfsin, lfs_dir_t *dirin, const char *name) {
     752:	ldr	r3, [pc, #300]	; (880 <LittleFS::open(char const*, unsigned char)+0x180>)
     754:	strb	r6, [r0, #4]
		lfs = lfsin;
		dir = dirin;
		file = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
     756:	mov	r1, r7
		dir = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
		//Serial.printf("  LittleFSFile ctor (file), this=%x\n", (int)this);
	}
	LittleFSFile(lfs_t *lfsin, lfs_dir_t *dirin, const char *name) {
		lfs = lfsin;
     758:	str.w	r5, [r8, #20]
		dir = dirin;
		file = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
     75c:	adds	r0, #36	; 0x24
     75e:	strb.w	r6, [r8, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     762:	str.w	r6, [r8, #16]
     766:	mov.w	r5, #1000	; 0x3e8
		strlcpy(fullpath, name, sizeof(fullpath));
		//Serial.printf("  LittleFSFile ctor (file), this=%x\n", (int)this);
	}
	LittleFSFile(lfs_t *lfsin, lfs_dir_t *dirin, const char *name) {
		lfs = lfsin;
		dir = dirin;
     76a:	str.w	r9, [r8, #28]
		file = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
     76e:	movs	r2, #128	; 0x80
		//Serial.printf("  LittleFSFile ctor (file), this=%x\n", (int)this);
	}
	LittleFSFile(lfs_t *lfsin, lfs_dir_t *dirin, const char *name) {
		lfs = lfsin;
		dir = dirin;
		file = nullptr;
     770:	str.w	r6, [r8, #24]
		file = filein;
		dir = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
		//Serial.printf("  LittleFSFile ctor (file), this=%x\n", (int)this);
	}
	LittleFSFile(lfs_t *lfsin, lfs_dir_t *dirin, const char *name) {
     774:	str.w	r3, [r8]
     778:	str.w	r5, [r8, #8]
		lfs = lfsin;
		dir = dirin;
		file = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
     77c:	bl	121ec <strlcpy>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     780:	ldr.w	r3, [r8, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     784:	ldr	r2, [pc, #252]	; (884 <LittleFS::open(char const*, unsigned char)+0x184>)
     786:	str	r5, [r4, #8]
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     788:	adds	r3, #1
				} // else FILE_WRITE_BEGIN
				return File(new LittleFSFile(&lfs, file, filepath));
			}
		}
		return File();
	}
     78a:	mov	r0, r4
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
     78c:	str.w	r8, [r4, #16]
     790:	strb	r6, [r4, #4]
     792:	strb	r6, [r4, #12]
		if (f) f->refcount++;
     794:	str.w	r3, [r8, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     798:	str	r2, [r4, #0]
     79a:	add	sp, #52	; 0x34
     79c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				lfs_dir_t *dir = (lfs_dir_t *)malloc(sizeof(lfs_dir_t));
				if (!dir) return File();
				if (lfs_dir_open(&lfs, dir, filepath) >= 0) {
					return File(new LittleFSFile(&lfs, dir, filepath));
				}
				free(dir);
     7a0:	mov	r0, r9
     7a2:	bl	11040 <free>

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     7a6:	ldr	r2, [pc, #220]	; (884 <LittleFS::open(char const*, unsigned char)+0x184>)
     7a8:	str	r2, [r4, #0]
     7aa:	movs	r3, #0
     7ac:	mov.w	r1, #1000	; 0x3e8
				} // else FILE_WRITE_BEGIN
				return File(new LittleFSFile(&lfs, file, filepath));
			}
		}
		return File();
	}
     7b0:	mov	r0, r4
     7b2:	strb	r3, [r4, #4]
     7b4:	strb	r3, [r4, #12]
     7b6:	str	r3, [r4, #16]
     7b8:	str	r1, [r4, #8]
     7ba:	add	sp, #52	; 0x34
     7bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					return File(new LittleFSFile(&lfs, dir, filepath));
				}
				free(dir);
			}
		} else {
			lfs_file_t *file = (lfs_file_t *)malloc(sizeof(lfs_file_t));
     7c0:	movs	r0, #84	; 0x54
     7c2:	bl	11030 <malloc>
			if (!file) return File();
     7c6:	mov	r8, r0
     7c8:	cmp	r0, #0
     7ca:	beq.n	7a6 <LittleFS::open(char const*, unsigned char)+0xa6>
			if (lfs_file_open(&lfs, file, filepath, LFS_O_RDWR | LFS_O_CREAT) >= 0) {
     7cc:	adds	r5, #8
     7ce:	mov	r0, r5
     7d0:	movw	r3, #259	; 0x103
     7d4:	mov	r2, r7
     7d6:	mov	r1, r8
     7d8:	bl	e240 <lfs_file_open>
     7dc:	cmp	r0, #0
     7de:	blt.n	7a6 <LittleFS::open(char const*, unsigned char)+0xa6>
				if (mode == FILE_WRITE) {
     7e0:	cmp	r6, #1
     7e2:	beq.n	872 <LittleFS::open(char const*, unsigned char)+0x172>
					// FILE_WRITE opens at end of file
					lfs_file_seek(&lfs, file, 0, LFS_SEEK_END);
				} // else FILE_WRITE_BEGIN
				return File(new LittleFSFile(&lfs, file, filepath));
     7e4:	movs	r0, #164	; 0xa4
     7e6:	bl	101ac <operator new(unsigned int)>
     7ea:	mov	r6, r0
	// Classes derived from File are never meant to be constructed from
	// anywhere other than openNextFile() and open() in their parent FS
	// class.  Only the abstract File class which references these
	// derived classes is meant to have a public constructor!
	LittleFSFile(lfs_t *lfsin, lfs_file_t *filein, const char *name) {
		lfs = lfsin;
     7ec:	str	r5, [r0, #20]
		file = filein;
		dir = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
     7ee:	mov	r1, r7
     7f0:	movs	r5, #0
private:
	// Classes derived from File are never meant to be constructed from
	// anywhere other than openNextFile() and open() in their parent FS
	// class.  Only the abstract File class which references these
	// derived classes is meant to have a public constructor!
	LittleFSFile(lfs_t *lfsin, lfs_file_t *filein, const char *name) {
     7f2:	ldr	r3, [pc, #140]	; (880 <LittleFS::open(char const*, unsigned char)+0x180>)
     7f4:	str	r3, [r6, #0]
     7f6:	mov.w	r7, #1000	; 0x3e8
		lfs = lfsin;
		file = filein;
     7fa:	str.w	r8, [r6, #24]
		dir = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
     7fe:	movs	r2, #128	; 0x80
     800:	strb	r5, [r6, #4]
     802:	strb	r5, [r6, #12]
     804:	str	r5, [r6, #16]
	// class.  Only the abstract File class which references these
	// derived classes is meant to have a public constructor!
	LittleFSFile(lfs_t *lfsin, lfs_file_t *filein, const char *name) {
		lfs = lfsin;
		file = filein;
		dir = nullptr;
     806:	str	r5, [r6, #28]
     808:	str	r7, [r6, #8]
		strlcpy(fullpath, name, sizeof(fullpath));
     80a:	adds	r0, #36	; 0x24
     80c:	bl	121ec <strlcpy>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     810:	ldr	r3, [r6, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     812:	ldr	r2, [pc, #112]	; (884 <LittleFS::open(char const*, unsigned char)+0x184>)
     814:	strb	r5, [r4, #4]
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     816:	adds	r3, #1
				} // else FILE_WRITE_BEGIN
				return File(new LittleFSFile(&lfs, file, filepath));
			}
		}
		return File();
	}
     818:	mov	r0, r4
     81a:	str	r7, [r4, #8]
     81c:	strb	r5, [r4, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
     81e:	str	r6, [r4, #16]
		if (f) f->refcount++;
     820:	str	r3, [r6, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     822:	str	r2, [r4, #0]
     824:	add	sp, #52	; 0x34
     826:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			struct lfs_info info;
			if (lfs_stat(&lfs, filepath, &info) < 0) return File();
			//Serial.printf("LittleFS open got info, name=%s\n", info.name);
			if (info.type == LFS_TYPE_REG) {
				//Serial.println("  regular file");
				lfs_file_t *file = (lfs_file_t *)malloc(sizeof(lfs_file_t));
     82a:	movs	r0, #84	; 0x54
     82c:	bl	11030 <malloc>
				if (!file) return File();
     830:	mov	r9, r0
     832:	cmp	r0, #0
     834:	beq.n	7a6 <LittleFS::open(char const*, unsigned char)+0xa6>
				if (lfs_file_open(&lfs, file, filepath, LFS_O_RDONLY) >= 0) {
     836:	mov	r1, r0
     838:	mov	r3, r8
     83a:	mov	r2, r7
     83c:	mov	r0, r5
     83e:	bl	e240 <lfs_file_open>
     842:	cmp	r0, #0
     844:	blt.n	7a0 <LittleFS::open(char const*, unsigned char)+0xa0>
					return File(new LittleFSFile(&lfs, file, filepath));
     846:	movs	r0, #164	; 0xa4
     848:	bl	101ac <operator new(unsigned int)>
     84c:	mov	r8, r0
     84e:	strb	r6, [r0, #4]
	// derived classes is meant to have a public constructor!
	LittleFSFile(lfs_t *lfsin, lfs_file_t *filein, const char *name) {
		lfs = lfsin;
		file = filein;
		dir = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
     850:	mov	r1, r7
	// Classes derived from File are never meant to be constructed from
	// anywhere other than openNextFile() and open() in their parent FS
	// class.  Only the abstract File class which references these
	// derived classes is meant to have a public constructor!
	LittleFSFile(lfs_t *lfsin, lfs_file_t *filein, const char *name) {
		lfs = lfsin;
     852:	str.w	r5, [r8, #20]
private:
	// Classes derived from File are never meant to be constructed from
	// anywhere other than openNextFile() and open() in their parent FS
	// class.  Only the abstract File class which references these
	// derived classes is meant to have a public constructor!
	LittleFSFile(lfs_t *lfsin, lfs_file_t *filein, const char *name) {
     856:	ldr	r3, [pc, #40]	; (880 <LittleFS::open(char const*, unsigned char)+0x180>)
     858:	strb.w	r6, [r8, #12]
		lfs = lfsin;
		file = filein;
		dir = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
     85c:	adds	r0, #36	; 0x24

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     85e:	str.w	r6, [r8, #16]
     862:	mov.w	r5, #1000	; 0x3e8
	// anywhere other than openNextFile() and open() in their parent FS
	// class.  Only the abstract File class which references these
	// derived classes is meant to have a public constructor!
	LittleFSFile(lfs_t *lfsin, lfs_file_t *filein, const char *name) {
		lfs = lfsin;
		file = filein;
     866:	str.w	r9, [r8, #24]
		dir = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
     86a:	movs	r2, #128	; 0x80
	// class.  Only the abstract File class which references these
	// derived classes is meant to have a public constructor!
	LittleFSFile(lfs_t *lfsin, lfs_file_t *filein, const char *name) {
		lfs = lfsin;
		file = filein;
		dir = nullptr;
     86c:	str.w	r6, [r8, #28]
     870:	b.n	774 <LittleFS::open(char const*, unsigned char)+0x74>
			lfs_file_t *file = (lfs_file_t *)malloc(sizeof(lfs_file_t));
			if (!file) return File();
			if (lfs_file_open(&lfs, file, filepath, LFS_O_RDWR | LFS_O_CREAT) >= 0) {
				if (mode == FILE_WRITE) {
					// FILE_WRITE opens at end of file
					lfs_file_seek(&lfs, file, 0, LFS_SEEK_END);
     872:	movs	r3, #2
     874:	movs	r2, #0
     876:	mov	r1, r8
     878:	mov	r0, r5
     87a:	bl	d184 <lfs_file_seek>
     87e:	b.n	7e4 <LittleFS::open(char const*, unsigned char)+0xe4>
     880:	.word	0x000157c0
     884:	.word	0x000156d4

00000888 <LittleFSFile::rewindDirectory()>:
			free(d);
		}
		return File();
	}
	virtual void rewindDirectory(void) {
		if (dir) lfs_dir_rewind(lfs, dir);
     888:	ldr	r1, [r0, #28]
     88a:	cbz	r1, 892 <LittleFSFile::rewindDirectory()+0xa>
     88c:	ldr	r0, [r0, #20]
     88e:	b.w	c5dc <lfs_dir_rewind>
     892:	bx	lr

00000894 <LittleFSFile::openNextFile(unsigned char)>:
		return fullpath;
	}
	virtual boolean isDirectory(void) {
		return dir != nullptr;
	}
	virtual File openNextFile(uint8_t mode=0) {
     894:	push	{r4, r5, r6, r7, lr}
		if (!dir) return File();
     896:	ldr	r5, [r1, #28]
		return fullpath;
	}
	virtual boolean isDirectory(void) {
		return dir != nullptr;
	}
	virtual File openNextFile(uint8_t mode=0) {
     898:	sub	sp, #180	; 0xb4
     89a:	mov	r6, r0
     89c:	mov	r4, r1
		if (!dir) return File();
     89e:	cbnz	r5, 8b4 <LittleFSFile::openNextFile(unsigned char)+0x20>
     8a0:	b.n	8d0 <LittleFSFile::openNextFile(unsigned char)+0x3c>
		struct lfs_info info;
		do {
			memset(&info, 0, sizeof(info)); // is this necessary?
			if (lfs_dir_read(lfs, dir, &info) <= 0) return File();
		} while (strcmp(info.name, ".") == 0 || strcmp(info.name, "..") == 0);
     8a2:	bl	11e28 <strcmp>
     8a6:	ldr	r1, [pc, #332]	; (9f4 <LittleFSFile::openNextFile(unsigned char)+0x160>)
     8a8:	cbz	r0, 8b2 <LittleFSFile::openNextFile(unsigned char)+0x1e>
     8aa:	add	r0, sp, #8
     8ac:	bl	11e28 <strcmp>
     8b0:	cbnz	r0, 8e8 <LittleFSFile::openNextFile(unsigned char)+0x54>
     8b2:	ldr	r5, [r4, #28]
	}
	virtual File openNextFile(uint8_t mode=0) {
		if (!dir) return File();
		struct lfs_info info;
		do {
			memset(&info, 0, sizeof(info)); // is this necessary?
     8b4:	movs	r2, #48	; 0x30
     8b6:	movs	r1, #0
     8b8:	mov	r0, sp
     8ba:	bl	117bc <memset>
			if (lfs_dir_read(lfs, dir, &info) <= 0) return File();
     8be:	mov	r1, r5
     8c0:	mov	r2, sp
     8c2:	ldr	r0, [r4, #20]
     8c4:	bl	c500 <lfs_dir_read>
     8c8:	cmp	r0, #0
		} while (strcmp(info.name, ".") == 0 || strcmp(info.name, "..") == 0);
     8ca:	ldr	r1, [pc, #300]	; (9f8 <LittleFSFile::openNextFile(unsigned char)+0x164>)
     8cc:	add	r0, sp, #8
	virtual File openNextFile(uint8_t mode=0) {
		if (!dir) return File();
		struct lfs_info info;
		do {
			memset(&info, 0, sizeof(info)); // is this necessary?
			if (lfs_dir_read(lfs, dir, &info) <= 0) return File();
     8ce:	bgt.n	8a2 <LittleFSFile::openNextFile(unsigned char)+0xe>
     8d0:	ldr	r2, [pc, #296]	; (9fc <LittleFSFile::openNextFile(unsigned char)+0x168>)
     8d2:	str	r2, [r6, #0]
     8d4:	movs	r3, #0
     8d6:	mov.w	r1, #1000	; 0x3e8
				return File(new LittleFSFile(lfs, d, pathname));
			}
			free(d);
		}
		return File();
	}
     8da:	mov	r0, r6
     8dc:	strb	r3, [r6, #4]
     8de:	strb	r3, [r6, #12]
     8e0:	str	r3, [r6, #16]
     8e2:	str	r1, [r6, #8]
     8e4:	add	sp, #180	; 0xb4
     8e6:	pop	{r4, r5, r6, r7, pc}
			memset(&info, 0, sizeof(info)); // is this necessary?
			if (lfs_dir_read(lfs, dir, &info) <= 0) return File();
		} while (strcmp(info.name, ".") == 0 || strcmp(info.name, "..") == 0);
		//Serial.printf("  next name = \"%s\"\n", info.name);
		char pathname[128];
		strlcpy(pathname, fullpath, sizeof(pathname));
     8e8:	movs	r2, #128	; 0x80
     8ea:	add.w	r1, r4, #36	; 0x24
     8ee:	add	r0, sp, #48	; 0x30
     8f0:	bl	121ec <strlcpy>
		size_t len = strlen(pathname);
     8f4:	add	r0, sp, #48	; 0x30
     8f6:	bl	12240 <strlen>
		if (len > 0 && pathname[len-1] != '/' && len < sizeof(pathname)-2) {
     8fa:	mov	r2, r0
     8fc:	cmp	r0, #0
     8fe:	bne.n	970 <LittleFSFile::openNextFile(unsigned char)+0xdc>
     900:	movs	r2, #128	; 0x80
     902:	add	r0, sp, #48	; 0x30
			// add trailing '/', if not already present
			pathname[len++] = '/';
			pathname[len] = 0;
		}
		strlcpy(pathname + len, info.name, sizeof(pathname) - len);
     904:	add	r1, sp, #8
     906:	bl	121ec <strlcpy>
		if (info.type == LFS_TYPE_REG) {
     90a:	ldrb.w	r5, [sp]
     90e:	cmp	r5, #1
     910:	beq.n	9a6 <LittleFSFile::openNextFile(unsigned char)+0x112>
			if (lfs_file_open(lfs, f, pathname, LFS_O_RDONLY) >= 0) {
				return File(new LittleFSFile(lfs, f, pathname));
			}
			free(f);
		} else { // LFS_TYPE_DIR
			lfs_dir_t *d = (lfs_dir_t *)malloc(sizeof(lfs_dir_t));
     912:	movs	r0, #52	; 0x34
     914:	bl	11030 <malloc>
			if (!d) return File();
     918:	mov	r7, r0
     91a:	cmp	r0, #0
     91c:	beq.n	8d0 <LittleFSFile::openNextFile(unsigned char)+0x3c>
			if (lfs_dir_open(lfs, d, pathname) >= 0) {
     91e:	mov	r1, r0
     920:	add	r2, sp, #48	; 0x30
     922:	ldr	r0, [r4, #20]
     924:	bl	c438 <lfs_dir_open>
     928:	cmp	r0, #0
     92a:	blt.n	9ea <LittleFSFile::openNextFile(unsigned char)+0x156>
				return File(new LittleFSFile(lfs, d, pathname));
     92c:	movs	r0, #164	; 0xa4
     92e:	bl	101ac <operator new(unsigned int)>
     932:	mov	r5, r0
     934:	ldr	r2, [r4, #20]
		file = filein;
		dir = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
		//Serial.printf("  LittleFSFile ctor (file), this=%x\n", (int)this);
	}
	LittleFSFile(lfs_t *lfsin, lfs_dir_t *dirin, const char *name) {
     936:	ldr	r3, [pc, #200]	; (a00 <LittleFSFile::openNextFile(unsigned char)+0x16c>)
		lfs = lfsin;
		dir = dirin;
     938:	str	r7, [r0, #28]
     93a:	movs	r4, #0
		dir = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
		//Serial.printf("  LittleFSFile ctor (file), this=%x\n", (int)this);
	}
	LittleFSFile(lfs_t *lfsin, lfs_dir_t *dirin, const char *name) {
		lfs = lfsin;
     93c:	str	r2, [r5, #20]
		dir = dirin;
		file = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
     93e:	add	r1, sp, #48	; 0x30
     940:	adds	r0, #36	; 0x24
     942:	mov.w	r7, #1000	; 0x3e8
     946:	movs	r2, #128	; 0x80
		file = filein;
		dir = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
		//Serial.printf("  LittleFSFile ctor (file), this=%x\n", (int)this);
	}
	LittleFSFile(lfs_t *lfsin, lfs_dir_t *dirin, const char *name) {
     948:	str	r3, [r5, #0]
     94a:	strb	r4, [r5, #4]
     94c:	strb	r4, [r5, #12]
     94e:	str	r4, [r5, #16]
		lfs = lfsin;
		dir = dirin;
		file = nullptr;
     950:	str	r4, [r5, #24]
     952:	str	r7, [r5, #8]
		strlcpy(fullpath, name, sizeof(fullpath));
     954:	bl	121ec <strlcpy>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     958:	ldr	r3, [r5, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     95a:	ldr	r2, [pc, #160]	; (9fc <LittleFSFile::openNextFile(unsigned char)+0x168>)
     95c:	strb	r4, [r6, #4]
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     95e:	adds	r3, #1
				return File(new LittleFSFile(lfs, d, pathname));
			}
			free(d);
		}
		return File();
	}
     960:	mov	r0, r6
     962:	str	r7, [r6, #8]
     964:	strb	r4, [r6, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
     966:	str	r5, [r6, #16]
		if (f) f->refcount++;
     968:	str	r3, [r5, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     96a:	str	r2, [r6, #0]
     96c:	add	sp, #180	; 0xb4
     96e:	pop	{r4, r5, r6, r7, pc}
		} while (strcmp(info.name, ".") == 0 || strcmp(info.name, "..") == 0);
		//Serial.printf("  next name = \"%s\"\n", info.name);
		char pathname[128];
		strlcpy(pathname, fullpath, sizeof(pathname));
		size_t len = strlen(pathname);
		if (len > 0 && pathname[len-1] != '/' && len < sizeof(pathname)-2) {
     970:	add	r3, sp, #176	; 0xb0
     972:	add	r3, r0
     974:	ldrb.w	r1, [r3, #-129]
     978:	cmp	r1, #47	; 0x2f
     97a:	beq.n	99c <LittleFSFile::openNextFile(unsigned char)+0x108>
     97c:	cmp	r0, #125	; 0x7d
     97e:	bhi.n	99c <LittleFSFile::openNextFile(unsigned char)+0x108>
			// add trailing '/', if not already present
			pathname[len++] = '/';
     980:	adds	r2, #1
			pathname[len] = 0;
     982:	add	r1, sp, #176	; 0xb0
     984:	add	r1, r2
		char pathname[128];
		strlcpy(pathname, fullpath, sizeof(pathname));
		size_t len = strlen(pathname);
		if (len > 0 && pathname[len-1] != '/' && len < sizeof(pathname)-2) {
			// add trailing '/', if not already present
			pathname[len++] = '/';
     986:	movs	r0, #47	; 0x2f
     988:	strb.w	r0, [r3, #-128]
			pathname[len] = 0;
     98c:	movs	r5, #0
     98e:	add	r3, sp, #48	; 0x30
     990:	adds	r0, r3, r2
     992:	strb.w	r5, [r1, #-128]
     996:	rsb	r2, r2, #128	; 0x80
     99a:	b.n	904 <LittleFSFile::openNextFile(unsigned char)+0x70>
     99c:	add	r3, sp, #48	; 0x30
     99e:	adds	r0, r3, r2
     9a0:	rsb	r2, r2, #128	; 0x80
     9a4:	b.n	904 <LittleFSFile::openNextFile(unsigned char)+0x70>
		}
		strlcpy(pathname + len, info.name, sizeof(pathname) - len);
		if (info.type == LFS_TYPE_REG) {
			lfs_file_t *f = (lfs_file_t *)malloc(sizeof(lfs_file_t));
     9a6:	movs	r0, #84	; 0x54
     9a8:	bl	11030 <malloc>
			if (!f) return File();
     9ac:	mov	r7, r0
     9ae:	cmp	r0, #0
     9b0:	beq.n	8d0 <LittleFSFile::openNextFile(unsigned char)+0x3c>
			if (lfs_file_open(lfs, f, pathname, LFS_O_RDONLY) >= 0) {
     9b2:	mov	r1, r0
     9b4:	mov	r3, r5
     9b6:	add	r2, sp, #48	; 0x30
     9b8:	ldr	r0, [r4, #20]
     9ba:	bl	e240 <lfs_file_open>
     9be:	cmp	r0, #0
     9c0:	blt.n	9ea <LittleFSFile::openNextFile(unsigned char)+0x156>
				return File(new LittleFSFile(lfs, f, pathname));
     9c2:	movs	r0, #164	; 0xa4
     9c4:	bl	101ac <operator new(unsigned int)>
     9c8:	mov	r5, r0
     9ca:	ldr	r2, [r4, #20]
private:
	// Classes derived from File are never meant to be constructed from
	// anywhere other than openNextFile() and open() in their parent FS
	// class.  Only the abstract File class which references these
	// derived classes is meant to have a public constructor!
	LittleFSFile(lfs_t *lfsin, lfs_file_t *filein, const char *name) {
     9cc:	ldr	r3, [pc, #48]	; (a00 <LittleFSFile::openNextFile(unsigned char)+0x16c>)
		lfs = lfsin;
		file = filein;
     9ce:	str	r7, [r0, #24]
     9d0:	movs	r4, #0
	// Classes derived from File are never meant to be constructed from
	// anywhere other than openNextFile() and open() in their parent FS
	// class.  Only the abstract File class which references these
	// derived classes is meant to have a public constructor!
	LittleFSFile(lfs_t *lfsin, lfs_file_t *filein, const char *name) {
		lfs = lfsin;
     9d2:	str	r2, [r5, #20]
		file = filein;
		dir = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
     9d4:	add	r1, sp, #48	; 0x30
     9d6:	adds	r0, #36	; 0x24
     9d8:	mov.w	r7, #1000	; 0x3e8
     9dc:	movs	r2, #128	; 0x80
private:
	// Classes derived from File are never meant to be constructed from
	// anywhere other than openNextFile() and open() in their parent FS
	// class.  Only the abstract File class which references these
	// derived classes is meant to have a public constructor!
	LittleFSFile(lfs_t *lfsin, lfs_file_t *filein, const char *name) {
     9de:	str	r3, [r5, #0]
     9e0:	strb	r4, [r5, #4]
     9e2:	strb	r4, [r5, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     9e4:	str	r4, [r5, #16]
		lfs = lfsin;
		file = filein;
		dir = nullptr;
     9e6:	str	r4, [r5, #28]
     9e8:	b.n	952 <LittleFSFile::openNextFile(unsigned char)+0xbe>
			lfs_dir_t *d = (lfs_dir_t *)malloc(sizeof(lfs_dir_t));
			if (!d) return File();
			if (lfs_dir_open(lfs, d, pathname) >= 0) {
				return File(new LittleFSFile(lfs, d, pathname));
			}
			free(d);
     9ea:	mov	r0, r7
     9ec:	bl	11040 <free>
     9f0:	b.n	8d0 <LittleFSFile::openNextFile(unsigned char)+0x3c>
     9f2:	nop
     9f4:	.word	0x000158a8
     9f8:	.word	0x000158a4
     9fc:	.word	0x000156d4
     a00:	.word	0x000157c0

00000a04 <LittleFSFile::name()>:
		//Serial.println("  end of close");
	}
	virtual operator bool() {
		return file || dir;
	}
	virtual const char * name() {
     a04:	push	{r4, lr}
		const char *p = strrchr(fullpath, '/');
     a06:	add.w	r4, r0, #36	; 0x24
     a0a:	mov	r0, r4
     a0c:	movs	r1, #47	; 0x2f
     a0e:	bl	123bc <strrchr>
		if (p) return p + 1;
     a12:	cbz	r0, a18 <LittleFSFile::name()+0x14>
     a14:	adds	r0, #1
     a16:	pop	{r4, pc}
     a18:	mov	r0, r4
		return fullpath;
	}
     a1a:	pop	{r4, pc}

00000a1c <LittleFSFile::close()>:
		lfs_soff_t size = lfs_file_size(lfs, file);
		if (size < 0) size = 0;
		return size;
	}
	virtual void close() {
		if (file) {
     a1c:	ldr	r1, [r0, #24]
		if (!file) return 0;
		lfs_soff_t size = lfs_file_size(lfs, file);
		if (size < 0) size = 0;
		return size;
	}
	virtual void close() {
     a1e:	push	{r4, lr}
     a20:	mov	r4, r0
		if (file) {
     a22:	cbz	r1, a34 <LittleFSFile::close()+0x18>
			//Serial.printf("  close file, this=%x, lfs=%x", (int)this, (int)lfs);
			lfs_file_close(lfs, file); // we get stuck here, but why?
     a24:	ldr	r0, [r0, #20]
     a26:	bl	df80 <lfs_file_close>
			free(file);
     a2a:	ldr	r0, [r4, #24]
     a2c:	bl	11040 <free>
			file = nullptr;
     a30:	movs	r3, #0
     a32:	str	r3, [r4, #24]
		}
		if (dir) {
     a34:	ldr	r1, [r4, #28]
     a36:	cbz	r1, a48 <LittleFSFile::close()+0x2c>
			//Serial.printf("  close dir, this=%x, lfs=%x", (int)this, (int)lfs);
			lfs_dir_close(lfs, dir);
     a38:	ldr	r0, [r4, #20]
     a3a:	bl	c4d8 <lfs_dir_close>
			free(dir);
     a3e:	ldr	r0, [r4, #28]
     a40:	bl	11040 <free>
			dir = nullptr;
     a44:	movs	r3, #0
     a46:	str	r3, [r4, #28]
     a48:	pop	{r4, pc}
     a4a:	nop

00000a4c <LittleFSFile::size()>:
		lfs_soff_t pos = lfs_file_tell(lfs, file);
		if (pos < 0) pos = 0;
		return pos;
	}
	virtual uint64_t size() {
		if (!file) return 0;
     a4c:	ldr	r1, [r0, #24]
     a4e:	cbz	r1, a60 <LittleFSFile::size()+0x14>
		if (!file) return 0;
		lfs_soff_t pos = lfs_file_tell(lfs, file);
		if (pos < 0) pos = 0;
		return pos;
	}
	virtual uint64_t size() {
     a50:	push	{r3, lr}
		if (!file) return 0;
		lfs_soff_t size = lfs_file_size(lfs, file);
     a52:	ldr	r0, [r0, #20]
     a54:	bl	c608 <lfs_file_size>
		if (size < 0) size = 0;
		return size;
     a58:	bic.w	r0, r0, r0, asr #31
     a5c:	asrs	r1, r0, #31
     a5e:	pop	{r3, pc}
		lfs_soff_t pos = lfs_file_tell(lfs, file);
		if (pos < 0) pos = 0;
		return pos;
	}
	virtual uint64_t size() {
		if (!file) return 0;
     a60:	movs	r0, #0
     a62:	movs	r1, #0
     a64:	bx	lr
     a66:	nop

00000a68 <LittleFSFile::position()>:
		else return false;
		if (lfs_file_seek(lfs, file, pos, whence) >= 0) return true;
		return false;
	}
	virtual uint64_t position() {
		if (!file) return 0;
     a68:	ldr	r1, [r0, #24]
     a6a:	cbz	r1, a7c <LittleFSFile::position()+0x14>
		else if (mode == SeekEnd) whence = LFS_SEEK_END;
		else return false;
		if (lfs_file_seek(lfs, file, pos, whence) >= 0) return true;
		return false;
	}
	virtual uint64_t position() {
     a6c:	push	{r3, lr}
		if (!file) return 0;
		lfs_soff_t pos = lfs_file_tell(lfs, file);
     a6e:	ldr	r0, [r0, #20]
     a70:	bl	c604 <lfs_file_tell>
		if (pos < 0) pos = 0;
		return pos;
     a74:	bic.w	r0, r0, r0, asr #31
     a78:	asrs	r1, r0, #31
     a7a:	pop	{r3, pc}
		else return false;
		if (lfs_file_seek(lfs, file, pos, whence) >= 0) return true;
		return false;
	}
	virtual uint64_t position() {
		if (!file) return 0;
     a7c:	movs	r0, #0
     a7e:	movs	r1, #0
     a80:	bx	lr
     a82:	nop

00000a84 <LittleFSFile::available()>:
	}
	virtual int peek() {
		return -1; // TODO...
	}
	virtual int available() {
		if (!file) return 0;
     a84:	ldr	r1, [r0, #24]
     a86:	cbz	r1, aaa <LittleFSFile::available()+0x26>
		return lfs_file_write(lfs, file, buf, size);
	}
	virtual int peek() {
		return -1; // TODO...
	}
	virtual int available() {
     a88:	push	{r3, r4, r5, lr}
     a8a:	mov	r4, r0
		if (!file) return 0;
		lfs_soff_t pos = lfs_file_tell(lfs, file);
     a8c:	ldr	r0, [r0, #20]
     a8e:	bl	c604 <lfs_file_tell>
		if (pos < 0) return 0;
     a92:	subs	r5, r0, #0
     a94:	blt.n	aa6 <LittleFSFile::available()+0x22>
		lfs_soff_t size = lfs_file_size(lfs, file);
     a96:	ldr	r1, [r4, #24]
     a98:	ldr	r0, [r4, #20]
     a9a:	bl	c608 <lfs_file_size>
		if (size < 0) return 0;
     a9e:	cmp	r0, #0
     aa0:	blt.n	aa6 <LittleFSFile::available()+0x22>
		return size - pos;
     aa2:	subs	r0, r0, r5
	}
     aa4:	pop	{r3, r4, r5, pc}
	}
	virtual int peek() {
		return -1; // TODO...
	}
	virtual int available() {
		if (!file) return 0;
     aa6:	movs	r0, #0
     aa8:	pop	{r3, r4, r5, pc}
     aaa:	movs	r0, #0
		lfs_soff_t pos = lfs_file_tell(lfs, file);
		if (pos < 0) return 0;
		lfs_soff_t size = lfs_file_size(lfs, file);
		if (size < 0) return 0;
		return size - pos;
	}
     aac:	bx	lr
     aae:	nop

00000ab0 <LittleFSFile::truncate(unsigned long long)>:
			return r;
		}
		return 0;
	}
	virtual bool truncate(uint64_t size=0) {
		if (!file) return false;
     ab0:	ldr	r1, [r0, #24]
     ab2:	cbz	r1, ac2 <LittleFSFile::truncate(unsigned long long)+0x12>
			if (r < 0) r = 0;
			return r;
		}
		return 0;
	}
	virtual bool truncate(uint64_t size=0) {
     ab4:	push	{r3, lr}
		if (!file) return false;
		if (lfs_file_truncate(lfs, file, size) >= 0) return true;
     ab6:	ldr	r0, [r0, #20]
     ab8:	bl	d1b8 <lfs_file_truncate>
     abc:	mvns	r0, r0
     abe:	lsrs	r0, r0, #31
     ac0:	pop	{r3, pc}
			return r;
		}
		return 0;
	}
	virtual bool truncate(uint64_t size=0) {
		if (!file) return false;
     ac2:	mov	r0, r1
     ac4:	bx	lr
     ac6:	nop

00000ac8 <LittleFSFile::write(void const*, unsigned int)>:
	virtual void whoami() {
		Serial.printf("  LittleFSFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
     ac8:	push	{r4}
		//Serial.println("write");
		if (!file) return 0;
     aca:	ldr	r4, [r0, #24]
     acc:	cbz	r4, ade <LittleFSFile::write(void const*, unsigned int)+0x16>
		//Serial.println(" is regular file");
		return lfs_file_write(lfs, file, buf, size);
     ace:	mov	r3, r2
     ad0:	ldr	r0, [r0, #20]
     ad2:	mov	r2, r1
     ad4:	mov	r1, r4
	}
     ad6:	ldr.w	r4, [sp], #4
#endif
	virtual size_t write(const void *buf, size_t size) {
		//Serial.println("write");
		if (!file) return 0;
		//Serial.println(" is regular file");
		return lfs_file_write(lfs, file, buf, size);
     ada:	b.w	cb84 <lfs_file_write>
	}
     ade:	mov	r0, r4
     ae0:	ldr.w	r4, [sp], #4
     ae4:	bx	lr
     ae6:	nop

00000ae8 <LittleFSFile::read(void*, unsigned int)>:
		return size - pos;
	}
	virtual void flush() {
		if (file) lfs_file_sync(lfs, file);
	}
	virtual size_t read(void *buf, size_t nbyte) {
     ae8:	push	{r4, lr}
		if (file) {
     aea:	ldr	r4, [r0, #24]
     aec:	cbz	r4, b00 <LittleFSFile::read(void*, unsigned int)+0x18>
     aee:	mov	r3, r2
			lfs_ssize_t r = lfs_file_read(lfs, file, buf, nbyte);
     af0:	ldr	r0, [r0, #20]
     af2:	mov	r2, r1
     af4:	mov	r1, r4
     af6:	bl	d064 <lfs_file_read>
			if (r < 0) r = 0;
			return r;
     afa:	bic.w	r0, r0, r0, asr #31
     afe:	pop	{r4, pc}
		}
		return 0;
     b00:	mov	r0, r4
	}
     b02:	pop	{r4, pc}

00000b04 <SDFile::close()>:
		return sdfatfile.curPosition();
	}
	virtual uint64_t size() {
		return sdfatfile.size();
	}
	virtual void close() {
     b04:	push	{r4, lr}
     b06:	mov	r4, r0
		if (filename) {
     b08:	ldr	r0, [r0, #100]	; 0x64
     b0a:	cbz	r0, b14 <SDFile::close()+0x10>
			free(filename);
     b0c:	bl	11040 <free>
			filename = nullptr;
     b10:	movs	r3, #0
     b12:	str	r3, [r4, #100]	; 0x64
		}
		sdfatfile.close();
     b14:	add.w	r0, r4, #36	; 0x24
	}
     b18:	ldmia.w	sp!, {r4, lr}
	virtual void close() {
		if (filename) {
			free(filename);
			filename = nullptr;
		}
		sdfatfile.close();
     b1c:	b.w	9400 <FsBaseFile::close()>

00000b20 <SDFile::openNextFile(unsigned char)>:
		return filename;
	}
	virtual boolean isDirectory(void) {
		return sdfatfile.isDirectory();
	}
	virtual File openNextFile(uint8_t mode=0) {
     b20:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     b24:	movs	r3, #0
     b26:	sub	sp, #80	; 0x50
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     b28:	mov	r2, r3
     b2a:	mov	r5, r0
     b2c:	adds	r1, #36	; 0x24
     b2e:	add	r0, sp, #16
     b30:	mov.w	r4, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     b34:	ldr	r7, [pc, #148]	; (bcc <SDFile::openNextFile(unsigned char)+0xac>)
     b36:	strb.w	r3, [sp, #4]
     b3a:	strb.w	r3, [sp, #12]
 * \class FsBaseFile
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}
     b3e:	str	r3, [sp, #72]	; 0x48
     b40:	str	r3, [sp, #76]	; 0x4c
     b42:	str	r4, [sp, #8]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     b44:	str	r7, [sp, #0]
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     b46:	bl	94a8 <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     b4a:	ldr	r3, [sp, #72]	; 0x48
     b4c:	cmp	r3, #0
     b4e:	beq.n	bb6 <SDFile::openNextFile(unsigned char)+0x96>
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
     b50:	movs	r0, #104	; 0x68
     b52:	bl	101ac <operator new(unsigned int)>
     b56:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     b58:	ldrb.w	r6, [sp, #4]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     b5c:	ldr	r2, [sp, #8]
     b5e:	ldrb.w	r3, [sp, #12]
#endif

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     b62:	ldr	r0, [pc, #108]	; (bd0 <SDFile::openNextFile(unsigned char)+0xb0>)
     b64:	ldr	r1, [pc, #108]	; (bd4 <SDFile::openNextFile(unsigned char)+0xb4>)
     b66:	strb	r6, [r4, #24]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     b68:	mov.w	r8, #1000	; 0x3e8
{
  public:
	constexpr Print() : write_error(0) {}
     b6c:	movs	r6, #0
     b6e:	str	r0, [r4, #0]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     b70:	str	r1, [r4, #20]
     b72:	str	r2, [r4, #28]
     b74:	strb.w	r3, [r4, #32]
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     b78:	add.w	r0, r4, #36	; 0x24
     b7c:	add	r1, sp, #16
     b7e:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     b80:	strb	r6, [r4, #12]
     b82:	str	r6, [r4, #16]
     b84:	str.w	r8, [r4, #8]
     b88:	bl	9388 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     b8c:	ldr	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     b8e:	ldr	r2, [pc, #72]	; (bd8 <SDFile::openNextFile(unsigned char)+0xb8>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     b90:	str	r7, [r4, #20]
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     b92:	adds	r3, #1
     b94:	str	r6, [r4, #100]	; 0x64
     b96:	strb	r6, [r5, #4]
     b98:	str.w	r8, [r5, #8]
     b9c:	strb	r6, [r5, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
     b9e:	str	r4, [r5, #16]
		if (f) f->refcount++;
     ba0:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     ba2:	str	r2, [r5, #0]
     ba4:	ldr	r3, [pc, #52]	; (bdc <SDFile::openNextFile(unsigned char)+0xbc>)
     ba6:	str	r3, [sp, #0]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     ba8:	add	r0, sp, #16
     baa:	bl	9400 <FsBaseFile::close()>
	}
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
     bae:	mov	r0, r5
     bb0:	add	sp, #80	; 0x50
     bb2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     bb6:	ldr	r3, [sp, #76]	; 0x4c
     bb8:	cmp	r3, #0
     bba:	bne.n	b50 <SDFile::openNextFile(unsigned char)+0x30>

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     bbc:	ldr	r2, [pc, #24]	; (bd8 <SDFile::openNextFile(unsigned char)+0xb8>)
     bbe:	strb	r3, [r5, #4]
     bc0:	str	r4, [r5, #8]
     bc2:	strb	r3, [r5, #12]
     bc4:	str	r3, [r5, #16]
     bc6:	str	r2, [r5, #0]
     bc8:	b.n	ba4 <SDFile::openNextFile(unsigned char)+0x84>
     bca:	nop
     bcc:	.word	0x000156b0
     bd0:	.word	0x00015734
     bd4:	.word	0x00015668
     bd8:	.word	0x000156d4
     bdc:	.word	0x0001568c

00000be0 <LittleFSFile::flush()>:
		lfs_soff_t size = lfs_file_size(lfs, file);
		if (size < 0) return 0;
		return size - pos;
	}
	virtual void flush() {
		if (file) lfs_file_sync(lfs, file);
     be0:	ldr	r1, [r0, #24]
     be2:	cbz	r1, bea <LittleFSFile::flush()+0xa>
     be4:	ldr	r0, [r0, #20]
     be6:	b.w	dee4 <lfs_file_sync>
     bea:	bx	lr

00000bec <LittleFS::remove(char const*)>:
	bool rename(const char *oldfilepath, const char *newfilepath) {
		if (!mounted) return false;
		if (lfs_rename(&lfs, oldfilepath, newfilepath) < 0) return false;
		return true;
	}
	bool remove(const char *filepath) {
     bec:	push	{r3, lr}
		if (!mounted) return false;
     bee:	ldrb	r3, [r0, #5]
     bf0:	cbz	r3, bfc <LittleFS::remove(char const*)+0x10>
		if (lfs_remove(&lfs, filepath) < 0) return false;
     bf2:	adds	r0, #8
     bf4:	bl	e254 <lfs_remove>
     bf8:	mvns	r3, r0
     bfa:	lsrs	r3, r3, #31
		return true;
	}
     bfc:	mov	r0, r3
     bfe:	pop	{r3, pc}

00000c00 <LittleFS::rename(char const*, char const*)>:
	bool mkdir(const char *filepath) {
		if (!mounted) return false;
		if (lfs_mkdir(&lfs, filepath) < 0) return false;
		return true;
	}
	bool rename(const char *oldfilepath, const char *newfilepath) {
     c00:	push	{r3, lr}
		if (!mounted) return false;
     c02:	ldrb	r3, [r0, #5]
     c04:	cbz	r3, c10 <LittleFS::rename(char const*, char const*)+0x10>
		if (lfs_rename(&lfs, oldfilepath, newfilepath) < 0) return false;
     c06:	adds	r0, #8
     c08:	bl	e384 <lfs_rename>
     c0c:	mvns	r3, r0
     c0e:	lsrs	r3, r3, #31
		return true;
	}
     c10:	mov	r0, r3
     c12:	pop	{r3, pc}

00000c14 <LittleFS::mkdir(char const*)>:
		if (!mounted) return false;
		struct lfs_info info;
		if (lfs_stat(&lfs, filepath, &info) < 0) return false;
		return true;
	}
	bool mkdir(const char *filepath) {
     c14:	push	{r3, lr}
		if (!mounted) return false;
     c16:	ldrb	r3, [r0, #5]
     c18:	cbz	r3, c24 <LittleFS::mkdir(char const*)+0x10>
		if (lfs_mkdir(&lfs, filepath) < 0) return false;
     c1a:	adds	r0, #8
     c1c:	bl	dd6c <lfs_mkdir>
     c20:	mvns	r3, r0
     c22:	lsrs	r3, r3, #31
		return true;
	}
     c24:	mov	r0, r3
     c26:	pop	{r3, pc}

00000c28 <SDFile::available()>:
		return sdfatfile.write(buf, size);
	}
	virtual int peek() {
		return sdfatfile.peek();
	}
	virtual int available() {
     c28:	ldr	r2, [r0, #92]	; 0x5c
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     c2a:	cbz	r2, c46 <SDFile::available()+0x1e>
  void fsetpos(const fspos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() {
    return isFile() ? fileSize() - curPosition() : 0;
     c2c:	ldrb	r3, [r2, #0]
     c2e:	and.w	r3, r3, #8
     c32:	and.w	r0, r3, #255	; 0xff
     c36:	cbz	r3, c7a <SDFile::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     c38:	ldr	r3, [r2, #28]
     c3a:	ldr	r0, [r2, #20]
     c3c:	subs	r0, r3, r0
     c3e:	it	mi
     c40:	mvnmi.w	r0, #2147483648	; 0x80000000
     c44:	bx	lr
     c46:	ldr	r1, [r0, #96]	; 0x60
     c48:	cbz	r1, c7c <SDFile::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     c4a:	ldrb.w	r3, [r1, #49]	; 0x31
     c4e:	and.w	r3, r3, #8
     c52:	and.w	r0, r3, #255	; 0xff
     c56:	cbz	r3, c7a <SDFile::available()+0x52>
     c58:	ldrd	r2, r3, [r1, #16]
     c5c:	ldrd	r0, r1, [r1]
     c60:	subs	r0, r2, r0
     c62:	push	{r4, r5}
     c64:	sbc.w	r1, r3, r1
     c68:	movs	r5, #0
     c6a:	mvn.w	r4, #2147483648	; 0x80000000
     c6e:	cmp	r5, r1
     c70:	it	eq
     c72:	cmpeq	r4, r0
     c74:	bcs.n	c78 <SDFile::available()+0x50>
     c76:	mov	r0, r4
		return sdfatfile.available();
	}
     c78:	pop	{r4, r5}
     c7a:	bx	lr
     c7c:	mov	r0, r1
     c7e:	bx	lr

00000c80 <SDFile::peek()>:
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
		return sdfatfile.write(buf, size);
	}
	virtual int peek() {
     c80:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     c82:	cbz	r3, c8a <SDFile::peek()+0xa>
     c84:	mov	r0, r3
     c86:	b.w	7f10 <FatFile::peek()>
     c8a:	ldr	r0, [r0, #96]	; 0x60
     c8c:	cbz	r0, c92 <SDFile::peek()+0x12>
     c8e:	b.w	62dc <ExFatFile::peek()>
		return sdfatfile.peek();
	}
     c92:	mov.w	r0, #4294967295
     c96:	bx	lr

00000c98 <StreamFile<FsBaseFile, unsigned long long>::read()>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
     c98:	push	{lr}
     c9a:	ldr	r3, [r0, #72]	; 0x48
     c9c:	sub	sp, #12
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     c9e:	cbz	r3, cba <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     ca0:	mov	r0, r3
     ca2:	movs	r2, #1
     ca4:	add.w	r1, sp, #7
     ca8:	bl	7d78 <FatFile::read(void*, unsigned int)>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     cac:	cmp	r0, #1
     cae:	bne.n	cca <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     cb0:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
  }
     cb4:	add	sp, #12
     cb6:	ldr.w	pc, [sp], #4
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     cba:	ldr	r0, [r0, #76]	; 0x4c
     cbc:	cbz	r0, cca <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     cbe:	movs	r2, #1
     cc0:	add.w	r1, sp, #7
     cc4:	bl	613c <ExFatFile::read(void*, unsigned int)>
     cc8:	b.n	cac <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     cca:	mov.w	r0, #4294967295
     cce:	b.n	cb4 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000cd0 <SDFile::flush()>:
	virtual int available() {
		return sdfatfile.available();
	}
	virtual void flush() {
     cd0:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     cd2:	cbz	r3, cda <SDFile::flush()+0xa>
     cd4:	mov	r0, r3
     cd6:	b.w	839c <FatFile::sync()>
     cda:	ldr	r0, [r0, #96]	; 0x60
     cdc:	cbz	r0, ce2 <SDFile::flush()+0x12>
     cde:	b.w	7220 <ExFatFile::sync()>
     ce2:	bx	lr

00000ce4 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     ce4:	push	{lr}
     ce6:	ldr	r3, [r0, #72]	; 0x48
     ce8:	sub	sp, #12
     cea:	strb.w	r1, [sp, #7]
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     cee:	cbz	r3, d02 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     cf0:	mov	r0, r3
     cf2:	movs	r2, #1
     cf4:	add.w	r1, sp, #7
     cf8:	bl	83a8 <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     cfc:	add	sp, #12
     cfe:	ldr.w	pc, [sp], #4
     d02:	ldr	r0, [r0, #76]	; 0x4c
     d04:	cmp	r0, #0
     d06:	beq.n	cfc <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     d08:	movs	r2, #1
     d0a:	add.w	r1, sp, #7
     d0e:	bl	7630 <ExFatFile::write(void const*, unsigned int)>
     d12:	add	sp, #12
     d14:	ldr.w	pc, [sp], #4

00000d18 <SDFile::~SDFile()>:

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	virtual ~SDFile(void) {
     d18:	push	{r3, r4, r5, lr}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     d1a:	ldr	r3, [r0, #92]	; 0x5c
     d1c:	ldr	r2, [pc, #72]	; (d68 <SDFile::~SDFile()+0x50>)
     d1e:	str	r2, [r0, #0]
     d20:	mov	r4, r0
		if (sdfatfile) sdfatfile.close();
     d22:	add.w	r5, r0, #36	; 0x24
     d26:	cbz	r3, d5e <SDFile::~SDFile()+0x46>
     d28:	mov	r0, r5
     d2a:	bl	9400 <FsBaseFile::close()>
		if (filename) free(filename);
     d2e:	ldr	r0, [r4, #100]	; 0x64
     d30:	cbz	r0, d36 <SDFile::~SDFile()+0x1e>
     d32:	bl	11040 <free>
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     d36:	ldr	r3, [pc, #52]	; (d6c <SDFile::~SDFile()+0x54>)
     d38:	str	r3, [r4, #20]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     d3a:	mov	r0, r5
     d3c:	bl	9400 <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     d40:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     d42:	ldr	r3, [pc, #44]	; (d70 <SDFile::~SDFile()+0x58>)
     d44:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     d46:	cbz	r2, d5a <SDFile::~SDFile()+0x42>
     d48:	ldr	r3, [r2, #16]
     d4a:	subs	r3, #1
     d4c:	str	r3, [r2, #16]
     d4e:	cbnz	r3, d5a <SDFile::~SDFile()+0x42>
     d50:	ldr	r0, [r4, #16]
     d52:	cbz	r0, d5a <SDFile::~SDFile()+0x42>
     d54:	ldr	r3, [r0, #0]
     d56:	ldr	r3, [r3, #32]
     d58:	blx	r3
	}
     d5a:	mov	r0, r4
     d5c:	pop	{r3, r4, r5, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     d5e:	ldr	r3, [r0, #96]	; 0x60
     d60:	cmp	r3, #0
     d62:	bne.n	d28 <SDFile::~SDFile()+0x10>
     d64:	b.n	d2e <SDFile::~SDFile()+0x16>
     d66:	nop
     d68:	.word	0x00015734
     d6c:	.word	0x0001568c
     d70:	.word	0x000156d4

00000d74 <SDClass::remove(char const*)>:
		return sdfs.mkdir(filepath);
	}
	bool rename(const char *oldfilepath, const char *newfilepath) {
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
     d74:	push	{r4, lr}
     d76:	ldr.w	r4, [r0, #1148]	; 0x47c
     d7a:	sub	sp, #56	; 0x38
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
     d7c:	cbz	r4, da8 <SDClass::remove(char const*)+0x34>
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     d7e:	mov	r2, r1
     d80:	mov	r0, sp
     d82:	mov	r1, r4
     d84:	movs	r3, #1
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     d86:	movs	r4, #0
     d88:	strb.w	r4, [sp]
     d8c:	strb.w	r4, [sp, #1]
     d90:	strb.w	r4, [sp, #2]
     d94:	bl	7d5c <FatFile::open(FatVolume*, char const*, int)>
     d98:	cbnz	r0, d9e <SDClass::remove(char const*)+0x2a>
		return sdfs.remove(filepath);
	}
     d9a:	add	sp, #56	; 0x38
     d9c:	pop	{r4, pc}
     d9e:	mov	r0, sp
     da0:	bl	8da8 <FatFile::remove()>
     da4:	add	sp, #56	; 0x38
     da6:	pop	{r4, pc}
     da8:	ldr.w	r0, [r0, #1152]	; 0x480
     dac:	cmp	r0, #0
     dae:	beq.n	d9a <SDClass::remove(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     db0:	mov	r2, r1
     db2:	movs	r3, #1
     db4:	mov	r1, r0
     db6:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     db8:	strb.w	r4, [sp, #49]	; 0x31
     dbc:	strb.w	r4, [sp, #50]	; 0x32
     dc0:	strb.w	r4, [sp, #51]	; 0x33
     dc4:	bl	68e0 <ExFatFile::open(ExFatVolume*, char const*, int)>
     dc8:	cmp	r0, #0
     dca:	beq.n	d9a <SDClass::remove(char const*)+0x26>
     dcc:	mov	r0, sp
     dce:	bl	6f94 <ExFatFile::remove()>
     dd2:	add	sp, #56	; 0x38
     dd4:	pop	{r4, pc}
     dd6:	nop

00000dd8 <SDClass::rename(char const*, char const*)>:
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
		return sdfs.mkdir(filepath);
	}
	bool rename(const char *oldfilepath, const char *newfilepath) {
     dd8:	push	{r4, r5, r6, lr}
     dda:	ldr.w	r4, [r0, #1148]	; 0x47c
     dde:	sub	sp, #56	; 0x38
     de0:	mov	r6, r2
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
      return m_fVol ? m_fVol->rename(oldPath, newPath) :
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
     de2:	cbz	r4, e16 <SDClass::rename(char const*, char const*)+0x3e>
     de4:	movs	r5, #0
    return truncate(path.c_str(), length);
  }
#endif  // ENABLE_ARDUINO_STRING

 private:
  FatFile* vwd() {return &m_vwd;}
     de6:	add.w	r4, r4, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    FatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     dea:	mov	r2, r1
     dec:	mov	r3, r5
     dee:	mov	r1, r4
     df0:	mov	r0, sp
     df2:	strb.w	r5, [sp]
     df6:	strb.w	r5, [sp, #1]
     dfa:	strb.w	r5, [sp, #2]
     dfe:	bl	7c9c <FatFile::open(FatFile*, char const*, int)>
     e02:	cbnz	r0, e08 <SDClass::rename(char const*, char const*)+0x30>
		return sdfs.rename(oldfilepath, newfilepath);
	}
     e04:	add	sp, #56	; 0x38
     e06:	pop	{r4, r5, r6, pc}
     e08:	mov	r2, r6
     e0a:	mov	r1, r4
     e0c:	mov	r0, sp
     e0e:	bl	7f7c <FatFile::rename(FatFile*, char const*)>
     e12:	add	sp, #56	; 0x38
     e14:	pop	{r4, r5, r6, pc}
     e16:	ldr.w	r0, [r0, #1152]	; 0x480
     e1a:	cmp	r0, #0
     e1c:	beq.n	e04 <SDClass::rename(char const*, char const*)+0x2c>
  bool rmdir(const char* path);
#endif  //  USE_EXFAT_UNICODE_NAMES

 private:
  friend ExFatFile;
  ExFatFile* vwd() {return &m_vwd;}
     e1e:	add.w	r5, r0, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const ExChar_t* oldPath, const ExChar_t* newPath) {
    ExFatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     e22:	mov	r2, r1
     e24:	mov	r3, r4
     e26:	mov	r1, r5
     e28:	mov	r0, sp
     e2a:	strb.w	r4, [sp, #49]	; 0x31
     e2e:	strb.w	r4, [sp, #50]	; 0x32
     e32:	strb.w	r4, [sp, #51]	; 0x33
     e36:	bl	67e0 <ExFatFile::open(ExFatFile*, char const*, int)>
     e3a:	cmp	r0, #0
     e3c:	beq.n	e04 <SDClass::rename(char const*, char const*)+0x2c>
     e3e:	mov	r2, r6
     e40:	mov	r1, r5
     e42:	mov	r0, sp
     e44:	bl	74a0 <ExFatFile::rename(ExFatFile*, char const*)>
     e48:	add	sp, #56	; 0x38
     e4a:	pop	{r4, r5, r6, pc}

00000e4c <SDFile::name()>:
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
     e4c:	push	{r3, r4, r5, lr}
		if (!filename) {
     e4e:	ldr	r4, [r0, #100]	; 0x64
     e50:	cbz	r4, e56 <SDFile::name()+0xa>
				static char zeroterm = 0;
				filename = &zeroterm;
			}
		}
		return filename;
	}
     e52:	mov	r0, r4
     e54:	pop	{r3, r4, r5, pc}
     e56:	mov	r5, r0
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
		if (!filename) {
			filename = (char *)malloc(MAX_FILENAME_LEN);
     e58:	mov.w	r0, #256	; 0x100
     e5c:	bl	11030 <malloc>
     e60:	mov	r1, r0
     e62:	str	r0, [r5, #100]	; 0x64
			if (filename) {
     e64:	cbz	r0, e88 <SDFile::name()+0x3c>
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    return m_fFile ? m_fFile->getName(name, len) :
     e66:	ldr	r0, [r5, #92]	; 0x5c
   *             must be at least 13 bytes long.  The file's name will be
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
     e68:	strb	r4, [r1, #0]
    return m_fFile ? m_fFile->getName(name, len) :
           m_xFile ? m_xFile->getName(name, len) : 0;
     e6a:	cbz	r0, e78 <SDFile::name()+0x2c>
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    return m_fFile ? m_fFile->getName(name, len) :
     e6c:	mov.w	r2, #256	; 0x100
     e70:	bl	8a5c <FatFile::getName(char*, unsigned int)>
     e74:	ldr	r4, [r5, #100]	; 0x64
     e76:	b.n	e52 <SDFile::name()+0x6>
           m_xFile ? m_xFile->getName(name, len) : 0;
     e78:	ldr	r0, [r5, #96]	; 0x60
     e7a:	cbz	r0, e8e <SDFile::name()+0x42>
     e7c:	mov.w	r2, #256	; 0x100
     e80:	bl	5fa8 <ExFatFile::getName(char*, unsigned int)>
     e84:	ldr	r4, [r5, #100]	; 0x64
     e86:	b.n	e52 <SDFile::name()+0x6>
				sdfatfile.getName(filename, MAX_FILENAME_LEN);
			} else {
				static char zeroterm = 0;
				filename = &zeroterm;
     e88:	ldr	r4, [pc, #8]	; (e94 <SDFile::name()+0x48>)
     e8a:	str	r4, [r5, #100]	; 0x64
     e8c:	b.n	e52 <SDFile::name()+0x6>
     e8e:	mov	r4, r1
     e90:	b.n	e52 <SDFile::name()+0x6>
     e92:	nop
     e94:	.word	0x1fff1494

00000e98 <SDClass::mkdir(char const*)>:
		return File();
	}
	bool exists(const char *filepath) {
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
     e98:	push	{r4, lr}
     e9a:	ldr.w	r4, [r0, #1148]	; 0x47c
     e9e:	sub	sp, #56	; 0x38
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
     ea0:	cbz	r4, ec2 <SDClass::mkdir(char const*)+0x2a>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
     ea2:	mov	r2, r1
     ea4:	movs	r3, #1
     ea6:	add.w	r1, r4, #1088	; 0x440
     eaa:	mov	r0, sp
     eac:	movs	r4, #0
     eae:	strb.w	r4, [sp]
     eb2:	strb.w	r4, [sp, #1]
     eb6:	strb.w	r4, [sp, #2]
     eba:	bl	7bd8 <FatFile::mkdir(FatFile*, char const*, bool)>
		return sdfs.mkdir(filepath);
	}
     ebe:	add	sp, #56	; 0x38
     ec0:	pop	{r4, pc}
     ec2:	ldr.w	r0, [r0, #1152]	; 0x480
     ec6:	cmp	r0, #0
     ec8:	beq.n	ebe <SDClass::mkdir(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const ExChar_t* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
     eca:	mov	r2, r1
     ecc:	movs	r3, #1
     ece:	add.w	r1, r0, #1088	; 0x440
     ed2:	mov	r0, sp
     ed4:	strb.w	r4, [sp, #49]	; 0x31
     ed8:	strb.w	r4, [sp, #50]	; 0x32
     edc:	strb.w	r4, [sp, #51]	; 0x33
     ee0:	bl	73c8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
     ee4:	add	sp, #56	; 0x38
     ee6:	pop	{r4, pc}

00000ee8 <SDClass::exists(char const*)>:
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
	bool exists(const char *filepath) {
     ee8:	push	{r4, r5, lr}
     eea:	ldr.w	r4, [r0, #1148]	; 0x47c
     eee:	sub	sp, #60	; 0x3c
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
           m_xVol ? m_xVol->exists(path) : false;
     ef0:	cbz	r4, f10 <SDClass::exists(char const*)+0x28>
     ef2:	movs	r5, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
     ef4:	mov	r2, r1
     ef6:	mov	r3, r5
     ef8:	mov	r1, r4
     efa:	mov	r0, sp
     efc:	strb.w	r5, [sp]
     f00:	strb.w	r5, [sp, #1]
     f04:	strb.w	r5, [sp, #2]
     f08:	bl	7d5c <FatFile::open(FatVolume*, char const*, int)>
		return sdfs.exists(filepath);
	}
     f0c:	add	sp, #60	; 0x3c
     f0e:	pop	{r4, r5, pc}
     f10:	ldr.w	r0, [r0, #1152]	; 0x480
     f14:	cmp	r0, #0
     f16:	beq.n	f0c <SDClass::exists(char const*)+0x24>
   *
   * \return true if the file exists else false.
   */
  bool exists(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
     f18:	mov	r2, r1
     f1a:	mov	r3, r4
     f1c:	mov	r1, r0
     f1e:	mov	r0, sp
     f20:	strb.w	r4, [sp, #49]	; 0x31
     f24:	strb.w	r4, [sp, #50]	; 0x32
     f28:	strb.w	r4, [sp, #51]	; 0x33
     f2c:	bl	68e0 <ExFatFile::open(ExFatVolume*, char const*, int)>
     f30:	add	sp, #60	; 0x3c
     f32:	pop	{r4, r5, pc}

00000f34 <SDFile::rewindDirectory()>:
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
	virtual void rewindDirectory(void) {
     f34:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     f36:	cbz	r3, f60 <SDFile::rewindDirectory()+0x2c>
  int read() {
    return BaseFile::read();
  }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
     f38:	ldrb	r2, [r3, #0]
     f3a:	tst.w	r2, #112	; 0x70
     f3e:	bne.n	f42 <SDFile::rewindDirectory()+0xe>
     f40:	bx	lr
     f42:	push	{r4, lr}
     f44:	mov	r4, r0
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     f46:	movs	r1, #0
     f48:	mov	r0, r3
     f4a:	bl	81b0 <FatFile::seekSet(unsigned long)>
     f4e:	ldr	r0, [r4, #96]	; 0x60
           m_xFile ? m_xFile->rename(dirFile->m_xFile, newPath) : false;
  }
  /** Set the file's current position to zero. */
  void rewind() {
    if (m_fFile) m_fFile->rewind();
    if (m_xFile) m_xFile->rewind();
     f50:	cbz	r0, f5e <SDFile::rewindDirectory()+0x2a>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     f52:	movs	r2, #0
     f54:	movs	r3, #0
		sdfatfile.rewindDirectory();
	}
     f56:	ldmia.w	sp!, {r4, lr}
     f5a:	b.w	630c <ExFatFile::seekSet(unsigned long long)>
     f5e:	pop	{r4, pc}
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     f60:	ldr	r0, [r0, #96]	; 0x60
     f62:	cmp	r0, #0
     f64:	beq.n	f40 <SDFile::rewindDirectory()+0xc>
     f66:	ldrb.w	r3, [r0, #49]	; 0x31
     f6a:	tst.w	r3, #80	; 0x50
     f6e:	beq.n	f40 <SDFile::rewindDirectory()+0xc>
     f70:	movs	r2, #0
     f72:	movs	r3, #0
     f74:	b.w	630c <ExFatFile::seekSet(unsigned long long)>

00000f78 <SDClass::usedSize()>:
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
		return sdfs.rmdir(filepath);
	}
	uint64_t usedSize() {
     f78:	push	{r3, r4, r5, lr}
     f7a:	mov	r5, r0
     f7c:	ldr.w	r0, [r0, #1148]	; 0x47c
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     f80:	cbz	r0, fb4 <SDClass::usedSize()+0x3c>
    m_cache.invalidate();
    return m_cache.buffer();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
     f82:	ldr	r4, [r0, #28]
     f84:	subs	r4, #1
    return m_fVol ? m_fVol->fatStartSector() :
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
     f86:	bl	8804 <FatPartition::freeClusterCount()>
     f8a:	ldr.w	r3, [r5, #1148]	; 0x47c
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
     f8e:	subs	r4, r4, r0
   */
  bool begin(BlockDevice* blockDev);
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() {
    return m_fVol ? m_fVol->bytesPerCluster() :
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     f90:	cbz	r3, fa4 <SDClass::usedSize()+0x2c>
     f92:	ldrb	r0, [r3, #6]
     f94:	mov.w	r3, #512	; 0x200
     f98:	lsl.w	r0, r3, r0
     f9c:	uxth	r0, r0
     f9e:	umull	r0, r1, r0, r4
     fa2:	pop	{r3, r4, r5, pc}
     fa4:	ldr.w	r3, [r5, #1152]	; 0x480
     fa8:	cbz	r3, fc6 <SDClass::usedSize()+0x4e>
     faa:	ldr.w	r0, [r3, #1076]	; 0x434
     fae:	umull	r0, r1, r0, r4
     fb2:	pop	{r3, r4, r5, pc}
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     fb4:	ldr.w	r3, [r5, #1152]	; 0x480
     fb8:	cbz	r3, fc6 <SDClass::usedSize()+0x4e>
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
     fba:	mov	r0, r3
     fbc:	ldr.w	r4, [r3, #1064]	; 0x428
     fc0:	bl	6de8 <ExFatPartition::freeClusterCount()>
     fc4:	b.n	f8a <SDClass::usedSize()+0x12>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     fc6:	movs	r0, #0
     fc8:	movs	r1, #0
		  * (uint64_t)sdfs.bytesPerCluster();
	}
     fca:	pop	{r3, r4, r5, pc}

00000fcc <SDClass::rmdir(char const*)>:
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
     fcc:	push	{r4, r5, lr}
     fce:	ldr.w	r4, [r0, #1148]	; 0x47c
     fd2:	sub	sp, #60	; 0x3c
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
           m_xVol ? m_xVol->rmdir(path) : false;
     fd4:	cbz	r4, 1000 <SDClass::rmdir(char const*)+0x34>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     fd6:	movs	r5, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     fd8:	mov	r2, r1
     fda:	mov	r3, r5
     fdc:	mov	r1, r4
     fde:	mov	r0, sp
     fe0:	strb.w	r5, [sp]
     fe4:	strb.w	r5, [sp, #1]
     fe8:	strb.w	r5, [sp, #2]
     fec:	bl	7d5c <FatFile::open(FatVolume*, char const*, int)>
     ff0:	cbnz	r0, ff6 <SDClass::rmdir(char const*)+0x2a>
		return sdfs.rmdir(filepath);
	}
     ff2:	add	sp, #60	; 0x3c
     ff4:	pop	{r4, r5, pc}
     ff6:	mov	r0, sp
     ff8:	bl	8154 <FatFile::rmdir()>
     ffc:	add	sp, #60	; 0x3c
     ffe:	pop	{r4, r5, pc}
    1000:	ldr.w	r0, [r0, #1152]	; 0x480
    1004:	cmp	r0, #0
    1006:	beq.n	ff2 <SDClass::rmdir(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    1008:	mov	r2, r1
    100a:	mov	r3, r4
    100c:	mov	r1, r0
    100e:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    1010:	strb.w	r4, [sp, #49]	; 0x31
    1014:	strb.w	r4, [sp, #50]	; 0x32
    1018:	strb.w	r4, [sp, #51]	; 0x33
    101c:	bl	68e0 <ExFatFile::open(ExFatVolume*, char const*, int)>
    1020:	cmp	r0, #0
    1022:	beq.n	ff2 <SDClass::rmdir(char const*)+0x26>
    1024:	mov	r0, sp
    1026:	bl	706c <ExFatFile::rmdir()>
    102a:	add	sp, #60	; 0x3c
    102c:	pop	{r4, r5, pc}
    102e:	nop

00001030 <SDFile::position()>:
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
		return false;
	}
	virtual uint64_t position() {
    1030:	ldr	r3, [r0, #92]	; 0x5c
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
    1032:	cbz	r3, 103a <SDFile::position()+0xa>
    1034:	ldr	r0, [r3, #20]
    1036:	movs	r1, #0
    1038:	bx	lr
    103a:	ldr	r3, [r0, #96]	; 0x60
    103c:	cbz	r3, 1044 <SDFile::position()+0x14>
    103e:	ldmia.w	r3, {r0, r1}
    1042:	bx	lr
    1044:	mov	r0, r3
    1046:	mov	r1, r3
		return sdfatfile.curPosition();
	}
    1048:	bx	lr
    104a:	nop

0000104c <SDFile::size()>:
	virtual uint64_t size() {
    104c:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
    104e:	cbz	r3, 1056 <SDFile::size()+0xa>
    1050:	ldr	r0, [r3, #28]
    1052:	movs	r1, #0
    1054:	bx	lr
    1056:	ldr	r3, [r0, #96]	; 0x60
    1058:	cbz	r3, 1060 <SDFile::size()+0x14>
    105a:	ldr	r0, [r3, #16]
    105c:	ldr	r1, [r3, #20]
    105e:	bx	lr
    1060:	mov	r0, r3
    1062:	mov	r1, r3
		return sdfatfile.size();
	}
    1064:	bx	lr
    1066:	nop

00001068 <LittleFS::usedSize()>:
	}
	bool rmdir(const char *filepath) {
		return remove(filepath);
	}
	uint64_t usedSize() {
		if (!mounted) return 0;
    1068:	ldrb	r3, [r0, #5]
    106a:	cbnz	r3, 1072 <LittleFS::usedSize()+0xa>
    106c:	movs	r0, #0
		int blocks = lfs_fs_size(&lfs);
		if (blocks < 0 || (lfs_size_t)blocks > config.block_count) return totalSize();
		return blocks * config.block_size;
	}
    106e:	movs	r1, #0
    1070:	bx	lr
		return true;
	}
	bool rmdir(const char *filepath) {
		return remove(filepath);
	}
	uint64_t usedSize() {
    1072:	push	{r4, lr}
    1074:	mov	r4, r0
		if (!mounted) return 0;
		int blocks = lfs_fs_size(&lfs);
    1076:	adds	r0, #8
    1078:	bl	e890 <lfs_fs_size>
		if (blocks < 0 || (lfs_size_t)blocks > config.block_count) return totalSize();
    107c:	cmp	r0, #0
    107e:	blt.n	1094 <LittleFS::usedSize()+0x2c>
    1080:	ldr.w	r3, [r4, #160]	; 0xa0
    1084:	cmp	r3, r0
    1086:	bcc.n	1094 <LittleFS::usedSize()+0x2c>
		return blocks * config.block_size;
    1088:	ldr.w	r3, [r4, #156]	; 0x9c
    108c:	mul.w	r0, r3, r0
	}
    1090:	movs	r1, #0
    1092:	pop	{r4, pc}
		return remove(filepath);
	}
	uint64_t usedSize() {
		if (!mounted) return 0;
		int blocks = lfs_fs_size(&lfs);
		if (blocks < 0 || (lfs_size_t)blocks > config.block_count) return totalSize();
    1094:	ldr	r3, [r4, #0]
    1096:	ldr	r2, [pc, #36]	; (10bc <LittleFS::usedSize()+0x54>)
    1098:	ldr	r3, [r3, #28]
    109a:	cmp	r3, r2
    109c:	bne.n	10b4 <LittleFS::usedSize()+0x4c>
		return blocks * config.block_size;
	}
	uint64_t totalSize() {
		if (!mounted) return 0;
    109e:	ldrb	r3, [r4, #5]
    10a0:	cbz	r3, 10b0 <LittleFS::usedSize()+0x48>
		return config.block_count * config.block_size;
    10a2:	ldr.w	r0, [r4, #160]	; 0xa0
    10a6:	ldr.w	r3, [r4, #156]	; 0x9c
    10aa:	mul.w	r0, r3, r0
    10ae:	b.n	1090 <LittleFS::usedSize()+0x28>
	}
	bool rmdir(const char *filepath) {
		return remove(filepath);
	}
	uint64_t usedSize() {
		if (!mounted) return 0;
    10b0:	movs	r0, #0
    10b2:	b.n	1090 <LittleFS::usedSize()+0x28>
		int blocks = lfs_fs_size(&lfs);
		if (blocks < 0 || (lfs_size_t)blocks > config.block_count) return totalSize();
    10b4:	mov	r0, r4
		return blocks * config.block_size;
	}
    10b6:	ldmia.w	sp!, {r4, lr}
		return remove(filepath);
	}
	uint64_t usedSize() {
		if (!mounted) return 0;
		int blocks = lfs_fs_size(&lfs);
		if (blocks < 0 || (lfs_size_t)blocks > config.block_count) return totalSize();
    10ba:	bx	r3
    10bc:	.word	0x000005fd

000010c0 <SDFile::read(void*, unsigned int)>:
		return sdfatfile.available();
	}
	virtual void flush() {
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
    10c0:	ldr	r3, [r0, #92]	; 0x5c
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
    10c2:	cbz	r3, 10ca <SDFile::read(void*, unsigned int)+0xa>
    10c4:	mov	r0, r3
    10c6:	b.w	7d78 <FatFile::read(void*, unsigned int)>
    10ca:	ldr	r0, [r0, #96]	; 0x60
    10cc:	cbz	r0, 10d2 <SDFile::read(void*, unsigned int)+0x12>
    10ce:	b.w	613c <ExFatFile::read(void*, unsigned int)>
		return sdfatfile.read(buf, nbyte);
	}
    10d2:	mov.w	r0, #4294967295
    10d6:	bx	lr

000010d8 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  }
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    10d8:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
    10da:	cbz	r3, 10e2 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
    10dc:	mov	r0, r3
    10de:	b.w	7f10 <FatFile::peek()>
    10e2:	ldr	r0, [r0, #76]	; 0x4c
    10e4:	cbz	r0, 10ea <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
    10e6:	b.w	62dc <ExFatFile::peek()>
    return BaseFile::peek();
  }
    10ea:	mov.w	r0, #4294967295
    10ee:	bx	lr

000010f0 <SDClass::totalSize()>:
	}
	uint64_t usedSize() {
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
    10f0:	ldr.w	r2, [r0, #1148]	; 0x47c
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    10f4:	cbz	r2, 110a <SDClass::totalSize()+0x1a>
    10f6:	ldrb	r1, [r2, #6]
    10f8:	ldr	r0, [r2, #28]
    10fa:	mov.w	r3, #512	; 0x200
    10fe:	lsls	r3, r1
    1100:	uxth	r3, r3
    1102:	subs	r0, #1
    1104:	umull	r0, r1, r3, r0
    1108:	bx	lr
    110a:	ldr.w	r2, [r0, #1152]	; 0x480
    110e:	cbz	r2, 111e <SDClass::totalSize()+0x2e>
    1110:	ldr.w	r3, [r2, #1064]	; 0x428
    1114:	ldr.w	r0, [r2, #1076]	; 0x434
    1118:	umull	r0, r1, r3, r0
    111c:	bx	lr
    111e:	movs	r0, #0
    1120:	movs	r1, #0
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
	}
    1122:	bx	lr

00001124 <SDFile::isDirectory()>:
				filename = &zeroterm;
			}
		}
		return filename;
	}
	virtual boolean isDirectory(void) {
    1124:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
    1126:	cbz	r3, 1136 <SDFile::isDirectory()+0x12>
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {
    return m_attributes & FILE_ATTR_DIR;
    1128:	ldrb	r3, [r3, #0]
    112a:	tst.w	r3, #112	; 0x70
    112e:	ite	ne
    1130:	movne	r0, #1
    1132:	moveq	r0, #0
    1134:	bx	lr
    1136:	ldr	r0, [r0, #96]	; 0x60
    1138:	cbz	r0, 1148 <SDFile::isDirectory()+0x24>
    return isOpen() ? m_error & WRITE_ERROR : true;
  }
  /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
  /** \return True if this is a directory. */
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
    113a:	ldrb.w	r3, [r0, #49]	; 0x31
    113e:	tst.w	r3, #80	; 0x50
    1142:	ite	ne
    1144:	movne	r0, #1
    1146:	moveq	r0, #0
		return sdfatfile.isDirectory();
	}
    1148:	bx	lr
    114a:	nop

0000114c <SDClass::open(char const*, unsigned char)>:
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
    114c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    1150:	cmp	r3, #1
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
    1152:	sub	sp, #80	; 0x50
    1154:	mov	r5, r0
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    1156:	beq.n	11dc <SDClass::open(char const*, unsigned char)+0x90>
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    1158:	cmp	r3, #2
		SDFAT_FILE file = sdfs.open(filepath, flags);
    115a:	add.w	r1, r1, #4
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    115e:	movw	r3, #514	; 0x202
		SDFAT_FILE file = sdfs.open(filepath, flags);
    1162:	mov	r0, sp
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    1164:	it	ne
    1166:	movne	r3, #0
		SDFAT_FILE file = sdfs.open(filepath, flags);
    1168:	bl	95cc <FsVolume::open(char const*, int)>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    116c:	ldr	r3, [sp, #72]	; 0x48
    116e:	cmp	r3, #0
    1170:	beq.n	11ee <SDClass::open(char const*, unsigned char)+0xa2>
		if (file) return File(new SDFile(file));
    1172:	movs	r0, #104	; 0x68
    1174:	bl	101ac <operator new(unsigned int)>
    1178:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    117a:	ldrb.w	r6, [sp, #4]
#endif

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    117e:	ldr	r0, [pc, #136]	; (1208 <SDClass::open(char const*, unsigned char)+0xbc>)
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    1180:	ldr	r1, [pc, #136]	; (120c <SDClass::open(char const*, unsigned char)+0xc0>)
    1182:	ldr	r2, [sp, #8]
    1184:	ldrb.w	r3, [sp, #12]
    1188:	str	r0, [r4, #0]
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
    118a:	add	r7, sp, #16
    118c:	strb	r6, [r4, #24]
    118e:	str	r1, [r4, #20]
{
  public:
	constexpr Print() : write_error(0) {}
    1190:	movs	r6, #0
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1192:	mov.w	r8, #1000	; 0x3e8
    1196:	mov	r1, r7
    1198:	add.w	r0, r4, #36	; 0x24
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    119c:	str	r2, [r4, #28]
    119e:	strb.w	r3, [r4, #32]
    11a2:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    11a4:	strb	r6, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    11a6:	str	r6, [r4, #16]
    11a8:	str.w	r8, [r4, #8]
    11ac:	bl	9388 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    11b0:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    11b2:	ldr	r1, [pc, #92]	; (1210 <SDClass::open(char const*, unsigned char)+0xc4>)
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    11b4:	ldr	r2, [pc, #92]	; (1214 <SDClass::open(char const*, unsigned char)+0xc8>)
    11b6:	str	r6, [r4, #100]	; 0x64
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    11b8:	adds	r3, #1
    11ba:	strb	r6, [r5, #4]
    11bc:	str.w	r8, [r5, #8]
    11c0:	strb	r6, [r5, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
    11c2:	str	r4, [r5, #16]
    11c4:	str	r1, [r4, #20]
		if (f) f->refcount++;
    11c6:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    11c8:	str	r2, [r5, #0]
    11ca:	ldr	r3, [pc, #76]	; (1218 <SDClass::open(char const*, unsigned char)+0xcc>)
    11cc:	str	r3, [sp, #0]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
    11ce:	mov	r0, r7
    11d0:	bl	9400 <FsBaseFile::close()>
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
    11d4:	mov	r0, r5
    11d6:	add	sp, #80	; 0x50
    11d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    11dc:	movw	r3, #16898	; 0x4202
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    11e0:	adds	r1, #4
    11e2:	mov	r0, sp
    11e4:	bl	95cc <FsVolume::open(char const*, int)>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    11e8:	ldr	r3, [sp, #72]	; 0x48
    11ea:	cmp	r3, #0
    11ec:	bne.n	1172 <SDClass::open(char const*, unsigned char)+0x26>
    11ee:	ldr	r3, [sp, #76]	; 0x4c
    11f0:	cmp	r3, #0
    11f2:	bne.n	1172 <SDClass::open(char const*, unsigned char)+0x26>
    11f4:	mov.w	r1, #1000	; 0x3e8

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    11f8:	ldr	r2, [pc, #24]	; (1214 <SDClass::open(char const*, unsigned char)+0xc8>)
    11fa:	strb	r3, [r5, #4]
    11fc:	strb	r3, [r5, #12]
    11fe:	str	r3, [r5, #16]
    1200:	str	r1, [r5, #8]
    1202:	str	r2, [r5, #0]
    1204:	add	r7, sp, #16
    1206:	b.n	11ca <SDClass::open(char const*, unsigned char)+0x7e>
    1208:	.word	0x00015734
    120c:	.word	0x00015668
    1210:	.word	0x000156b0
    1214:	.word	0x000156d4
    1218:	.word	0x0001568c

0000121c <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   */
  int available() {
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    121c:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
    121e:	cbz	r3, 1226 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
    1220:	mov	r0, r3
    1222:	b.w	839c <FatFile::sync()>
    1226:	ldr	r0, [r0, #76]	; 0x4c
    1228:	cbz	r0, 122e <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
    122a:	b.w	7220 <ExFatFile::sync()>
    122e:	bx	lr

00001230 <SDFile::write(void const*, unsigned int)>:
	virtual void whoami() {
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
    1230:	ldr	r3, [r0, #92]	; 0x5c
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    1232:	cbz	r3, 123a <SDFile::write(void const*, unsigned int)+0xa>
    1234:	mov	r0, r3
    1236:	b.w	83a8 <FatFile::write(void const*, unsigned int)>
    123a:	ldr	r0, [r0, #96]	; 0x60
    123c:	cbz	r0, 1242 <SDFile::write(void const*, unsigned int)+0x12>
    123e:	b.w	7630 <ExFatFile::write(void const*, unsigned int)>
		return sdfatfile.write(buf, size);
	}
    1242:	bx	lr

00001244 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
    1244:	ldr	r3, [r0, #72]	; 0x48
    1246:	cbz	r3, 124e <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
    1248:	mov	r0, r3
    124a:	b.w	83a8 <FatFile::write(void const*, unsigned int)>
    124e:	ldr	r0, [r0, #76]	; 0x4c
    1250:	cbz	r0, 1256 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
    1252:	b.w	7630 <ExFatFile::write(void const*, unsigned int)>
    return BaseFile::write(buffer, size);
  }
    1256:	bx	lr

00001258 <LittleFS::rmdir(char const*)>:
		if (!mounted) return false;
		if (lfs_remove(&lfs, filepath) < 0) return false;
		return true;
	}
	bool rmdir(const char *filepath) {
		return remove(filepath);
    1258:	ldr	r2, [r0, #0]
	bool remove(const char *filepath) {
		if (!mounted) return false;
		if (lfs_remove(&lfs, filepath) < 0) return false;
		return true;
	}
	bool rmdir(const char *filepath) {
    125a:	push	{r4, lr}
		return remove(filepath);
    125c:	ldr	r2, [r2, #16]
    125e:	ldr	r4, [pc, #32]	; (1280 <LittleFS::rmdir(char const*)+0x28>)
    1260:	cmp	r2, r4
    1262:	bne.n	127a <LittleFS::rmdir(char const*)+0x22>
    1264:	mov	r3, r0
		if (!mounted) return false;
		if (lfs_rename(&lfs, oldfilepath, newfilepath) < 0) return false;
		return true;
	}
	bool remove(const char *filepath) {
		if (!mounted) return false;
    1266:	ldrb	r0, [r0, #5]
    1268:	cbnz	r0, 126c <LittleFS::rmdir(char const*)+0x14>
		if (lfs_remove(&lfs, filepath) < 0) return false;
		return true;
	}
	bool rmdir(const char *filepath) {
		return remove(filepath);
	}
    126a:	pop	{r4, pc}
    126c:	mov	r0, r3
		if (lfs_rename(&lfs, oldfilepath, newfilepath) < 0) return false;
		return true;
	}
	bool remove(const char *filepath) {
		if (!mounted) return false;
		if (lfs_remove(&lfs, filepath) < 0) return false;
    126e:	adds	r0, #8
    1270:	bl	e254 <lfs_remove>
    1274:	mvns	r0, r0
    1276:	lsrs	r0, r0, #31
    1278:	pop	{r4, pc}
		return true;
	}
	bool rmdir(const char *filepath) {
		return remove(filepath);
	}
    127a:	ldmia.w	sp!, {r4, lr}
		if (!mounted) return false;
		if (lfs_remove(&lfs, filepath) < 0) return false;
		return true;
	}
	bool rmdir(const char *filepath) {
		return remove(filepath);
    127e:	bx	r2
    1280:	.word	0x00000bed

00001284 <StreamFile<FsBaseFile, unsigned long long>::available()>:
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    1284:	ldr	r2, [r0, #72]	; 0x48
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
    1286:	cbz	r2, 12a2 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  void fsetpos(const fspos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() {
    return isFile() ? fileSize() - curPosition() : 0;
    1288:	ldrb	r3, [r2, #0]
    128a:	and.w	r3, r3, #8
    128e:	and.w	r0, r3, #255	; 0xff
    1292:	cbz	r3, 12d6 <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
    1294:	ldr	r3, [r2, #28]
    1296:	ldr	r0, [r2, #20]
    1298:	subs	r0, r3, r0
    129a:	it	mi
    129c:	mvnmi.w	r0, #2147483648	; 0x80000000
    12a0:	bx	lr
    12a2:	ldr	r1, [r0, #76]	; 0x4c
    12a4:	cbz	r1, 12d8 <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
    12a6:	ldrb.w	r3, [r1, #49]	; 0x31
    12aa:	and.w	r3, r3, #8
    12ae:	and.w	r0, r3, #255	; 0xff
    12b2:	cbz	r3, 12d6 <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
    12b4:	ldrd	r2, r3, [r1, #16]
    12b8:	ldrd	r0, r1, [r1]
    12bc:	subs	r0, r2, r0
    12be:	push	{r4, r5}
    12c0:	sbc.w	r1, r3, r1
    12c4:	movs	r5, #0
    12c6:	mvn.w	r4, #2147483648	; 0x80000000
    12ca:	cmp	r5, r1
    12cc:	it	eq
    12ce:	cmpeq	r4, r0
    12d0:	bcs.n	12d4 <StreamFile<FsBaseFile, unsigned long long>::available()+0x50>
    12d2:	mov	r0, r4
    return BaseFile::available();
  }
    12d4:	pop	{r4, r5}
    12d6:	bx	lr
    12d8:	mov	r0, r1
    12da:	bx	lr

000012dc <SDFile::seek(unsigned long, int)>:
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
		return sdfatfile.read(buf, nbyte);
	}
	virtual bool seek(uint32_t pos, int mode = SeekSet) {
    12dc:	push	{r4, r5}
    12de:	mov	r4, r1
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
    12e0:	cbz	r2, 12f0 <SDFile::seek(unsigned long, int)+0x14>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
    12e2:	cmp	r2, #1
    12e4:	beq.n	131c <SDFile::seek(unsigned long, int)+0x40>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
    12e6:	cmp	r2, #2
    12e8:	beq.n	12fc <SDFile::seek(unsigned long, int)+0x20>
		return false;
	}
    12ea:	movs	r0, #0
    12ec:	pop	{r4, r5}
    12ee:	bx	lr
    12f0:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    12f2:	cbz	r3, 1334 <SDFile::seek(unsigned long, int)+0x58>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    12f4:	mov	r0, r3
    12f6:	pop	{r4, r5}
    12f8:	b.w	81b0 <FatFile::seekSet(unsigned long)>
    12fc:	ldr	r5, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
    12fe:	cbz	r5, 1342 <SDFile::seek(unsigned long, int)+0x66>
    1300:	ldr	r1, [r5, #28]
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    1302:	movs	r3, #0
    1304:	adds	r2, r4, r1
    1306:	adc.w	r3, r3, #0
    130a:	cmp	r3, #1
    130c:	it	eq
    130e:	cmpeq	r2, #0
    1310:	bcs.n	12ea <SDFile::seek(unsigned long, int)+0xe>
    1312:	add	r1, r4
    1314:	mov	r0, r5
    1316:	pop	{r4, r5}
    1318:	b.w	81b0 <FatFile::seekSet(unsigned long)>
    131c:	ldr	r5, [r0, #92]	; 0x5c
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
    131e:	cbz	r5, 1358 <SDFile::seek(unsigned long, int)+0x7c>
    1320:	ldr	r1, [r5, #20]
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    1322:	movs	r3, #0
    1324:	adds	r2, r1, r4
    1326:	adc.w	r3, r3, #0
    132a:	cmp	r3, #1
    132c:	it	eq
    132e:	cmpeq	r2, #0
    1330:	bcs.n	12ea <SDFile::seek(unsigned long, int)+0xe>
    1332:	b.n	1312 <SDFile::seek(unsigned long, int)+0x36>
           m_xFile ? m_xFile->seekSet(pos) : false;
    1334:	ldr	r0, [r0, #96]	; 0x60
    1336:	cmp	r0, #0
    1338:	beq.n	12ea <SDFile::seek(unsigned long, int)+0xe>
    133a:	mov	r2, r1
    133c:	pop	{r4, r5}
    133e:	b.w	630c <ExFatFile::seekSet(unsigned long long)>
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
    1342:	ldr	r0, [r0, #96]	; 0x60
    1344:	cmp	r0, #0
    1346:	beq.n	12ea <SDFile::seek(unsigned long, int)+0xe>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    1348:	ldrd	r2, r3, [r0, #16]
    134c:	adds	r2, r2, r1
    134e:	adc.w	r3, r3, #0
    1352:	pop	{r4, r5}
    1354:	b.w	630c <ExFatFile::seekSet(unsigned long long)>
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
    1358:	ldr	r0, [r0, #96]	; 0x60
    135a:	cmp	r0, #0
    135c:	beq.n	12ea <SDFile::seek(unsigned long, int)+0xe>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    135e:	ldrd	r2, r3, [r0]
    1362:	adds	r2, r2, r1
    1364:	adc.w	r3, r3, #0
    1368:	pop	{r4, r5}
    136a:	b.w	630c <ExFatFile::seekSet(unsigned long long)>
    136e:	nop

00001370 <File::~File()>:
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1370:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1372:	ldr	r3, [pc, #32]	; (1394 <File::~File()+0x24>)
    1374:	push	{r4, lr}
    1376:	mov	r4, r0
    1378:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    137a:	cbz	r2, 138e <File::~File()+0x1e>
    137c:	ldr	r3, [r2, #16]
    137e:	subs	r3, #1
    1380:	str	r3, [r2, #16]
    1382:	cbnz	r3, 138e <File::~File()+0x1e>
    1384:	ldr	r0, [r0, #16]
    1386:	cbz	r0, 138e <File::~File()+0x1e>
    1388:	ldr	r3, [r0, #0]
    138a:	ldr	r3, [r3, #32]
    138c:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    138e:	mov	r0, r4
    1390:	pop	{r4, pc}
    1392:	nop
    1394:	.word	0x000156d4

00001398 <SDFile::~SDFile()>:

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	virtual ~SDFile(void) {
    1398:	push	{r3, r4, r5, lr}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    139a:	ldr	r3, [r0, #92]	; 0x5c
    139c:	ldr	r2, [pc, #80]	; (13f0 <SDFile::~SDFile()+0x58>)
    139e:	str	r2, [r0, #0]
    13a0:	mov	r4, r0
		if (sdfatfile) sdfatfile.close();
    13a2:	add.w	r5, r0, #36	; 0x24
    13a6:	cbz	r3, 13e6 <SDFile::~SDFile()+0x4e>
    13a8:	mov	r0, r5
    13aa:	bl	9400 <FsBaseFile::close()>
		if (filename) free(filename);
    13ae:	ldr	r0, [r4, #100]	; 0x64
    13b0:	cbz	r0, 13b6 <SDFile::~SDFile()+0x1e>
    13b2:	bl	11040 <free>
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
    13b6:	ldr	r3, [pc, #60]	; (13f4 <SDFile::~SDFile()+0x5c>)
    13b8:	str	r3, [r4, #20]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
    13ba:	mov	r0, r5
    13bc:	bl	9400 <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    13c0:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    13c2:	ldr	r3, [pc, #52]	; (13f8 <SDFile::~SDFile()+0x60>)
    13c4:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    13c6:	cbz	r2, 13da <SDFile::~SDFile()+0x42>
    13c8:	ldr	r3, [r2, #16]
    13ca:	subs	r3, #1
    13cc:	str	r3, [r2, #16]
    13ce:	cbnz	r3, 13da <SDFile::~SDFile()+0x42>
    13d0:	ldr	r0, [r4, #16]
    13d2:	cbz	r0, 13da <SDFile::~SDFile()+0x42>
    13d4:	ldr	r3, [r0, #0]
    13d6:	ldr	r3, [r3, #32]
    13d8:	blx	r3
	}
    13da:	mov	r0, r4
    13dc:	movs	r1, #104	; 0x68
    13de:	bl	101b0 <operator delete(void*, unsigned int)>
    13e2:	mov	r0, r4
    13e4:	pop	{r3, r4, r5, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    13e6:	ldr	r3, [r0, #96]	; 0x60
    13e8:	cmp	r3, #0
    13ea:	bne.n	13a8 <SDFile::~SDFile()+0x10>
    13ec:	b.n	13ae <SDFile::~SDFile()+0x16>
    13ee:	nop
    13f0:	.word	0x00015734
    13f4:	.word	0x0001568c
    13f8:	.word	0x000156d4

000013fc <LittleFSFile::~LittleFSFile()>:
		lfs_soff_t size = lfs_file_size(lfs, file);
		if (size < 0) size = 0;
		return size;
	}
	virtual void close() {
		if (file) {
    13fc:	ldr	r1, [r0, #24]
		strlcpy(fullpath, name, sizeof(fullpath));
		//Serial.printf("  LittleFSFile ctor (dir), this=%x\n", (int)this);
	}
	friend class LittleFS;
public:
	virtual ~LittleFSFile() {
    13fe:	ldr	r3, [pc, #76]	; (144c <LittleFSFile::~LittleFSFile()+0x50>)
    1400:	push	{r4, lr}
    1402:	mov	r4, r0
    1404:	str	r3, [r0, #0]
		lfs_soff_t size = lfs_file_size(lfs, file);
		if (size < 0) size = 0;
		return size;
	}
	virtual void close() {
		if (file) {
    1406:	cbz	r1, 1418 <LittleFSFile::~LittleFSFile()+0x1c>
			//Serial.printf("  close file, this=%x, lfs=%x", (int)this, (int)lfs);
			lfs_file_close(lfs, file); // we get stuck here, but why?
    1408:	ldr	r0, [r0, #20]
    140a:	bl	df80 <lfs_file_close>
			free(file);
    140e:	ldr	r0, [r4, #24]
    1410:	bl	11040 <free>
			file = nullptr;
    1414:	movs	r3, #0
    1416:	str	r3, [r4, #24]
		}
		if (dir) {
    1418:	ldr	r1, [r4, #28]
    141a:	cbz	r1, 142c <LittleFSFile::~LittleFSFile()+0x30>
			//Serial.printf("  close dir, this=%x, lfs=%x", (int)this, (int)lfs);
			lfs_dir_close(lfs, dir);
    141c:	ldr	r0, [r4, #20]
    141e:	bl	c4d8 <lfs_dir_close>
			free(dir);
    1422:	ldr	r0, [r4, #28]
    1424:	bl	11040 <free>
			dir = nullptr;
    1428:	movs	r3, #0
    142a:	str	r3, [r4, #28]
    142c:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    142e:	ldr	r3, [pc, #32]	; (1450 <LittleFSFile::~LittleFSFile()+0x54>)
    1430:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1432:	cbz	r2, 1446 <LittleFSFile::~LittleFSFile()+0x4a>
    1434:	ldr	r3, [r2, #16]
    1436:	subs	r3, #1
    1438:	str	r3, [r2, #16]
    143a:	cbnz	r3, 1446 <LittleFSFile::~LittleFSFile()+0x4a>
    143c:	ldr	r0, [r4, #16]
    143e:	cbz	r0, 1446 <LittleFSFile::~LittleFSFile()+0x4a>
    1440:	ldr	r3, [r0, #0]
    1442:	ldr	r3, [r3, #32]
    1444:	blx	r3
	friend class LittleFS;
public:
	virtual ~LittleFSFile() {
		//Serial.printf("  LittleFSFile dtor, this=%x\n", (int)this);
		close();
	}
    1446:	mov	r0, r4
    1448:	pop	{r4, pc}
    144a:	nop
    144c:	.word	0x000157c0
    1450:	.word	0x000156d4

00001454 <File::~File()>:
    1454:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1456:	ldr	r3, [pc, #40]	; (1480 <File::~File()+0x2c>)
    1458:	push	{r4, lr}
    145a:	mov	r4, r0
    145c:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    145e:	cbz	r2, 1472 <File::~File()+0x1e>
    1460:	ldr	r3, [r2, #16]
    1462:	subs	r3, #1
    1464:	str	r3, [r2, #16]
    1466:	cbnz	r3, 1472 <File::~File()+0x1e>
    1468:	ldr	r0, [r0, #16]
    146a:	cbz	r0, 1472 <File::~File()+0x1e>
    146c:	ldr	r3, [r0, #0]
    146e:	ldr	r3, [r3, #32]
    1470:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    1472:	mov	r0, r4
    1474:	movs	r1, #20
    1476:	bl	101b0 <operator delete(void*, unsigned int)>
    147a:	mov	r0, r4
    147c:	pop	{r4, pc}
    147e:	nop
    1480:	.word	0x000156d4

00001484 <LittleFSFile::~LittleFSFile()>:
		lfs_soff_t size = lfs_file_size(lfs, file);
		if (size < 0) size = 0;
		return size;
	}
	virtual void close() {
		if (file) {
    1484:	ldr	r1, [r0, #24]
		strlcpy(fullpath, name, sizeof(fullpath));
		//Serial.printf("  LittleFSFile ctor (dir), this=%x\n", (int)this);
	}
	friend class LittleFS;
public:
	virtual ~LittleFSFile() {
    1486:	ldr	r3, [pc, #84]	; (14dc <LittleFSFile::~LittleFSFile()+0x58>)
    1488:	push	{r4, lr}
    148a:	mov	r4, r0
    148c:	str	r3, [r0, #0]
		lfs_soff_t size = lfs_file_size(lfs, file);
		if (size < 0) size = 0;
		return size;
	}
	virtual void close() {
		if (file) {
    148e:	cbz	r1, 14a0 <LittleFSFile::~LittleFSFile()+0x1c>
			//Serial.printf("  close file, this=%x, lfs=%x", (int)this, (int)lfs);
			lfs_file_close(lfs, file); // we get stuck here, but why?
    1490:	ldr	r0, [r0, #20]
    1492:	bl	df80 <lfs_file_close>
			free(file);
    1496:	ldr	r0, [r4, #24]
    1498:	bl	11040 <free>
			file = nullptr;
    149c:	movs	r3, #0
    149e:	str	r3, [r4, #24]
		}
		if (dir) {
    14a0:	ldr	r1, [r4, #28]
    14a2:	cbz	r1, 14b4 <LittleFSFile::~LittleFSFile()+0x30>
			//Serial.printf("  close dir, this=%x, lfs=%x", (int)this, (int)lfs);
			lfs_dir_close(lfs, dir);
    14a4:	ldr	r0, [r4, #20]
    14a6:	bl	c4d8 <lfs_dir_close>
			free(dir);
    14aa:	ldr	r0, [r4, #28]
    14ac:	bl	11040 <free>
			dir = nullptr;
    14b0:	movs	r3, #0
    14b2:	str	r3, [r4, #28]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    14b4:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    14b6:	ldr	r3, [pc, #40]	; (14e0 <LittleFSFile::~LittleFSFile()+0x5c>)
    14b8:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    14ba:	cbz	r2, 14ce <LittleFSFile::~LittleFSFile()+0x4a>
    14bc:	ldr	r3, [r2, #16]
    14be:	subs	r3, #1
    14c0:	str	r3, [r2, #16]
    14c2:	cbnz	r3, 14ce <LittleFSFile::~LittleFSFile()+0x4a>
    14c4:	ldr	r0, [r4, #16]
    14c6:	cbz	r0, 14ce <LittleFSFile::~LittleFSFile()+0x4a>
    14c8:	ldr	r3, [r0, #0]
    14ca:	ldr	r3, [r3, #32]
    14cc:	blx	r3
	friend class LittleFS;
public:
	virtual ~LittleFSFile() {
		//Serial.printf("  LittleFSFile dtor, this=%x\n", (int)this);
		close();
	}
    14ce:	mov	r0, r4
    14d0:	movs	r1, #164	; 0xa4
    14d2:	bl	101b0 <operator delete(void*, unsigned int)>
    14d6:	mov	r0, r4
    14d8:	pop	{r4, pc}
    14da:	nop
    14dc:	.word	0x000157c0
    14e0:	.word	0x000156d4

000014e4 <MTPStorage_SD::~MTPStorage_SD()>:
    14e4:	ldr.w	r2, [r0, #304]	; 0x130

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
    14e8:	push	{r3, r4, r5, lr}
    14ea:	ldr	r3, [pc, #104]	; (1554 <MTPStorage_SD::~MTPStorage_SD()+0x70>)
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    14ec:	ldr	r5, [pc, #104]	; (1558 <MTPStorage_SD::~MTPStorage_SD()+0x74>)
    14ee:	str	r3, [r0, #0]
    14f0:	mov	r4, r0
    14f2:	str.w	r5, [r0, #288]	; 0x120
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    14f6:	cbz	r2, 1500 <MTPStorage_SD::~MTPStorage_SD()+0x1c>
    14f8:	ldr	r3, [r2, #16]
    14fa:	subs	r3, #1
    14fc:	str	r3, [r2, #16]
    14fe:	cbz	r3, 1534 <MTPStorage_SD::~MTPStorage_SD()+0x50>
    1500:	ldr.w	r2, [r4, #284]	; 0x11c
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1504:	str.w	r5, [r4, #268]	; 0x10c
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1508:	cbz	r2, 1512 <MTPStorage_SD::~MTPStorage_SD()+0x2e>
    150a:	ldr	r3, [r2, #16]
    150c:	subs	r3, #1
    150e:	str	r3, [r2, #16]
    1510:	cbz	r3, 1544 <MTPStorage_SD::~MTPStorage_SD()+0x60>
    1512:	ldr.w	r2, [r4, #264]	; 0x108
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1516:	str.w	r5, [r4, #248]	; 0xf8
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    151a:	cbz	r2, 1530 <MTPStorage_SD::~MTPStorage_SD()+0x4c>
    151c:	ldr	r3, [r2, #16]
    151e:	subs	r3, #1
    1520:	str	r3, [r2, #16]
    1522:	cbnz	r3, 1530 <MTPStorage_SD::~MTPStorage_SD()+0x4c>
    1524:	ldr.w	r0, [r4, #264]	; 0x108
    1528:	cbz	r0, 1530 <MTPStorage_SD::~MTPStorage_SD()+0x4c>
    152a:	ldr	r3, [r0, #0]
    152c:	ldr	r3, [r3, #32]
    152e:	blx	r3
    1530:	mov	r0, r4
    1532:	pop	{r3, r4, r5, pc}
    1534:	ldr.w	r0, [r0, #304]	; 0x130
    1538:	cmp	r0, #0
    153a:	beq.n	1500 <MTPStorage_SD::~MTPStorage_SD()+0x1c>
    153c:	ldr	r3, [r0, #0]
    153e:	ldr	r3, [r3, #32]
    1540:	blx	r3
    1542:	b.n	1500 <MTPStorage_SD::~MTPStorage_SD()+0x1c>
    1544:	ldr.w	r0, [r4, #284]	; 0x11c
    1548:	cmp	r0, #0
    154a:	beq.n	1512 <MTPStorage_SD::~MTPStorage_SD()+0x2e>
    154c:	ldr	r3, [r0, #0]
    154e:	ldr	r3, [r3, #32]
    1550:	blx	r3
    1552:	b.n	1512 <MTPStorage_SD::~MTPStorage_SD()+0x2e>
    1554:	.word	0x00015918
    1558:	.word	0x000156d4

0000155c <storage_configure()>:

MTPStorage_SD storage;
MTPD       mtpd(&storage);

void storage_configure()
{
    155c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    #if defined SD_SCK
      SPI.setMOSI(SD_MOSI);
    1560:	movs	r1, #11

MTPStorage_SD storage;
MTPD       mtpd(&storage);

void storage_configure()
{
    1562:	sub	sp, #60	; 0x3c
    1564:	ldr	r7, [pc, #760]	; (1860 <storage_configure()+0x304>)
    #if defined SD_SCK
      SPI.setMOSI(SD_MOSI);
    1566:	ldr	r0, [pc, #764]	; (1864 <storage_configure()+0x308>)
    1568:	bl	5d38 <SPIClass::setMOSI(unsigned char)>
      SPI.setMISO(SD_MISO);
    156c:	movs	r1, #12
    156e:	ldr	r0, [pc, #756]	; (1864 <storage_configure()+0x308>)
    1570:	bl	5ddc <SPIClass::setMISO(unsigned char)>
    1574:	addw	r6, r7, #1164	; 0x48c
      SPI.setSCK(SD_SCK);
    1578:	movs	r1, #13
    157a:	ldr	r0, [pc, #744]	; (1864 <storage_configure()+0x308>)
    157c:	bl	5e7c <SPIClass::setSCK(unsigned char)>
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    1580:	mov	r0, r6
    1582:	mov.w	r1, #0
    1586:	bl	a6bc <SdioCard::begin(SdioConfig)>
    158a:	adds	r3, r7, #4
    158c:	str	r3, [sp, #8]
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    158e:	str.w	r6, [r7, #1160]	; 0x488
    return m_card && !m_card->errorCode();
    1592:	cbz	r6, 159e <storage_configure()+0x42>
    1594:	mov	r0, r6
    1596:	bl	9e1c <SdioCard::errorCode() const>
    159a:	ldr	r3, [sp, #8]
    159c:	cbz	r0, 15ae <storage_configure()+0x52>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    159e:	movs	r1, #10
    15a0:	ldr	r0, [pc, #708]	; (1868 <storage_configure()+0x30c>)
    15a2:	bl	eae8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    15a6:	ldr	r0, [pc, #708]	; (186c <storage_configure()+0x310>)
    15a8:	bl	10000 <Print::println()>
    15ac:	b.n	15ac <storage_configure()+0x50>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    15ae:	mov	r0, r3
    15b0:	ldr.w	r1, [r7, #1160]	; 0x488
    15b4:	bl	9508 <FsVolume::begin(BlockDeviceInterface*)>
    15b8:	cmp	r0, #0
    15ba:	beq.n	159e <storage_configure()+0x42>
    mSD_Base() {
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, int ics, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSEMS) {
    15bc:	ldr	r1, [pc, #688]	; (1870 <storage_configure()+0x314>)
    15be:	ldr.w	r8, [pc, #732]	; 189c <storage_configure()+0x340>
    15c2:	ldr	r3, [r1, #4]
    15c4:	ldr	r5, [pc, #684]	; (1874 <storage_configure()+0x318>)
    15c6:	ldr.w	fp, [pc, #728]	; 18a0 <storage_configure()+0x344>
    15ca:	cmp	r3, #19
    15cc:	mov	r9, r8
    15ce:	mov.w	sl, #254	; 0xfe
    15d2:	mov.w	r4, #0
    15d6:	bgt.n	15ec <storage_configure()+0x90>
        cs[fsCount] = ics;
    15d8:	add.w	r2, r1, r3, lsl #2
        sd_name[fsCount] = name;
    15dc:	mov	r6, r2
        sdx[fsCount++] = &fs;
    15de:	adds	r3, #1
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, int ics, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSEMS) {
        cs[fsCount] = ics;
    15e0:	str.w	sl, [r2, #168]	; 0xa8

    for(int ii=0; ii<nsd; ii++)
    { if(cs[ii] == BUILTIN_SDCARD)
      {
        if(!sdx[ii].sdfs.begin(SdioConfig(FIFO_SDIO))) {Serial.println("No storage"); while(1);};
        storage.addFilesystem(sdx[ii],cs[ii],sd_str[ii]);
    15e4:	ldr	r2, [r5, #0]
        sd_name[fsCount] = name;
    15e6:	str	r2, [r6, #8]
        sdx[fsCount++] = &fs;
    15e8:	str	r7, [r6, #88]	; 0x58
    15ea:	str	r3, [r1, #4]
          storage.addFilesystem(ramfs,cs[ii],sd_str[ii]);
        }
      #endif
      if(cs[ii]<256)
      {
        uint64_t totalSize = sdx[ii].totalSize();
    15ec:	ldr	r1, [r7, #0]
    15ee:	ldr	r3, [r1, #28]
    15f0:	cmp	r3, fp
    15f2:	bne.w	17e2 <storage_configure()+0x286>
    15f6:	ldr.w	r2, [r7, #1148]	; 0x47c
    15fa:	cmp	r2, #0
    15fc:	beq.w	1820 <storage_configure()+0x2c4>
    1600:	ldrb	r0, [r2, #6]
    1602:	ldr	r2, [r2, #28]
    1604:	mov.w	r3, #512	; 0x200
    1608:	lsls	r3, r0
    160a:	subs	r2, #1
    160c:	uxth	r3, r3
    160e:	umull	r2, r3, r3, r2
  uint8_t bytesPerClusterShift() {
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
  }
  /** \return Number of bytes in a cluster. */
  uint16_t bytesPerCluster() {
    return m_bytesPerSector << m_sectorsPerClusterShift;
    1612:	strd	r2, r3, [sp, #8]
        uint64_t usedSize  = sdx[ii].usedSize();
    1616:	ldr	r3, [r1, #24]
    1618:	ldr	r2, [pc, #604]	; (1878 <storage_configure()+0x31c>)
    161a:	cmp	r3, r2
    161c:	bne.w	17d8 <storage_configure()+0x27c>
    1620:	ldr.w	r0, [r7, #1148]	; 0x47c
    1624:	cmp	r0, #0
    1626:	beq.w	180e <storage_configure()+0x2b2>
    m_cache.invalidate();
    return m_cache.buffer();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
    162a:	ldr	r6, [r0, #28]
    162c:	subs	r6, #1
    return m_fVol ? m_fVol->fatStartSector() :
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
    162e:	bl	8804 <FatPartition::freeClusterCount()>
    1632:	ldr.w	r3, [r7, #1148]	; 0x47c
	}
	bool rmdir(const char *filepath) {
		return sdfs.rmdir(filepath);
	}
	uint64_t usedSize() {
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
    1636:	subs	r6, r6, r0
   */
  bool begin(BlockDevice* blockDev);
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() {
    return m_fVol ? m_fVol->bytesPerCluster() :
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    1638:	cmp	r3, #0
    163a:	beq.w	17ee <storage_configure()+0x292>
    163e:	ldrb	r2, [r3, #6]
    1640:	mov.w	r3, #512	; 0x200
    1644:	lsls	r3, r2
    1646:	uxth	r3, r3
    1648:	umull	r6, r7, r3, r6
        Serial.printf("Storage %d %d %s ",ii,cs[ii],sd_str[ii]); Serial.print(totalSize); Serial.print(" "); Serial.println(usedSize);
    164c:	ldr	r3, [r5, #0]
    164e:	ldr	r1, [pc, #556]	; (187c <storage_configure()+0x320>)
    1650:	str	r3, [sp, #0]
    1652:	mov	r2, r4
    1654:	mov	r3, sl
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	size_t print(int64_t n);
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    1656:	mov.w	fp, #0
    165a:	mov.w	sl, #10
    165e:	ldr	r0, [pc, #524]	; (186c <storage_configure()+0x310>)
    1660:	bl	10030 <Print::printf(char const*, ...)>
    1664:	ldrd	r2, r3, [sp, #8]
    1668:	stmia.w	sp, {sl, fp}
    166c:	ldr	r0, [pc, #508]	; (186c <storage_configure()+0x310>)
    166e:	bl	100dc <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
    1672:	movs	r1, #1
    1674:	ldr	r0, [pc, #520]	; (1880 <storage_configure()+0x324>)
    1676:	bl	eae8 <usb_serial_write>
    167a:	mov	r2, r6
    167c:	mov	r3, r7
    167e:	stmia.w	sp, {sl, fp}
    1682:	ldr	r0, [pc, #488]	; (186c <storage_configure()+0x310>)
    1684:	bl	100dc <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
      SPI.setMOSI(SD_MOSI);
      SPI.setMISO(SD_MISO);
      SPI.setSCK(SD_SCK);
    #endif

    for(int ii=0; ii<nsd; ii++)
    1688:	adds	r4, #1
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
	size_t println(int64_t n)			{ return print(n) + println(); }
	size_t println(uint64_t n)			{ return print(n) + println(); }
    168a:	ldr	r0, [pc, #480]	; (186c <storage_configure()+0x310>)
    168c:	bl	10000 <Print::println()>
    1690:	cmp	r4, #2
    1692:	add.w	r5, r5, #4
    1696:	beq.w	17d2 <storage_configure()+0x276>
	LittleFS_RAM() { }
	bool begin(uint32_t size) {
#if defined(__IMXRT1062__)
		return begin(extmem_malloc(size), size);
#else
		return begin(malloc(size), size);
    169a:	ldr	r0, [pc, #488]	; (1884 <storage_configure()+0x328>)
    169c:	bl	11030 <malloc>
#endif
	}
	bool begin(void *ptr, uint32_t size) {
		//Serial.println("configure "); delay(5);
		configured = false;
    16a0:	movs	r6, #0
		if (!ptr) return false;
    16a2:	mov	sl, r0
		return begin(malloc(size), size);
#endif
	}
	bool begin(void *ptr, uint32_t size) {
		//Serial.println("configure "); delay(5);
		configured = false;
    16a4:	strb.w	r6, [r8, #4]
    16a8:	mov.w	r7, #256	; 0x100
		if (!ptr) return false;
    16ac:	cmp	r0, #0
    16ae:	beq.w	17fe <storage_configure()+0x2a2>
		memset(ptr, 0xFF, size); // always start with blank slate
    16b2:	ldr	r2, [pc, #464]	; (1884 <storage_configure()+0x328>)
    16b4:	movs	r1, #255	; 0xff
    16b6:	bl	117bc <memset>
		size = size & 0xFFFFFF00;
		memset(&lfs, 0, sizeof(lfs));
    16ba:	mov	r1, r6
    16bc:	movs	r2, #120	; 0x78
    16be:	ldr	r0, [pc, #456]	; (1888 <storage_configure()+0x32c>)
    16c0:	bl	117bc <memset>
		memset(&config, 0, sizeof(config));
    16c4:	mov	r1, r6
    16c6:	movs	r2, #72	; 0x48
    16c8:	ldr	r0, [pc, #448]	; (188c <storage_configure()+0x330>)
		config.context = ptr;
		config.read = &static_read;
		config.prog = &static_prog;
		config.erase = &static_erase;
    16ca:	ldr	r6, [pc, #452]	; (1890 <storage_configure()+0x334>)
		configured = false;
		if (!ptr) return false;
		memset(ptr, 0xFF, size); // always start with blank slate
		size = size & 0xFFFFFF00;
		memset(&lfs, 0, sizeof(lfs));
		memset(&config, 0, sizeof(config));
    16cc:	bl	117bc <memset>
		config.lookahead_size = 64;
		config.name_max = LFS_NAME_MAX;
		config.file_max = 0;
		config.attr_max = 0;
		configured = true;
		if (lfs_format(&lfs, &config) < 0) return false;
    16d0:	ldr	r1, [pc, #440]	; (188c <storage_configure()+0x330>)
		memset(ptr, 0xFF, size); // always start with blank slate
		size = size & 0xFFFFFF00;
		memset(&lfs, 0, sizeof(lfs));
		memset(&config, 0, sizeof(config));
		config.context = ptr;
		config.read = &static_read;
    16d2:	ldr	r3, [pc, #448]	; (1894 <storage_configure()+0x338>)
		config.prog = &static_prog;
    16d4:	ldr.w	lr, [pc, #460]	; 18a4 <storage_configure()+0x348>
		config.erase = &static_erase;
		config.sync = &static_sync;
    16d8:	ldr	r2, [pc, #444]	; (1898 <storage_configure()+0x33c>)
		memset(ptr, 0xFF, size); // always start with blank slate
		size = size & 0xFFFFFF00;
		memset(&lfs, 0, sizeof(lfs));
		memset(&config, 0, sizeof(config));
		config.context = ptr;
		config.read = &static_read;
    16da:	str.w	r3, [r9, #132]	; 0x84
		config.prog = &static_prog;
    16de:	str.w	lr, [r9, #136]	; 0x88
		config.erase = &static_erase;
		config.sync = &static_sync;
		config.read_size = 64;
    16e2:	movs	r3, #64	; 0x40
		config.prog_size = 64;
		config.block_size = 256;
		config.block_count = size / 256;
    16e4:	movw	ip, #31250	; 0x7a12
		memset(&lfs, 0, sizeof(lfs));
		memset(&config, 0, sizeof(config));
		config.context = ptr;
		config.read = &static_read;
		config.prog = &static_prog;
		config.erase = &static_erase;
    16e8:	str.w	r6, [r9, #140]	; 0x8c
		config.sync = &static_sync;
		config.read_size = 64;
		config.prog_size = 64;
		config.block_size = 256;
		config.block_count = size / 256;
		config.block_cycles = 50;
    16ec:	mov.w	lr, #50	; 0x32
		memset(&config, 0, sizeof(config));
		config.context = ptr;
		config.read = &static_read;
		config.prog = &static_prog;
		config.erase = &static_erase;
		config.sync = &static_sync;
    16f0:	str.w	r2, [r9, #144]	; 0x90
		config.lookahead_size = 64;
		config.name_max = LFS_NAME_MAX;
		config.file_max = 0;
		config.attr_max = 0;
		configured = true;
		if (lfs_format(&lfs, &config) < 0) return false;
    16f4:	sub.w	r0, r1, #120	; 0x78
		config.block_size = 256;
		config.block_count = size / 256;
		config.block_cycles = 50;
		config.cache_size = 64;
		config.lookahead_size = 64;
		config.name_max = LFS_NAME_MAX;
    16f8:	movs	r2, #39	; 0x27
		config.file_max = 0;
		config.attr_max = 0;
		configured = true;
    16fa:	movs	r6, #1
		if (!ptr) return false;
		memset(ptr, 0xFF, size); // always start with blank slate
		size = size & 0xFFFFFF00;
		memset(&lfs, 0, sizeof(lfs));
		memset(&config, 0, sizeof(config));
		config.context = ptr;
    16fc:	str.w	sl, [r9, #128]	; 0x80
		config.prog = &static_prog;
		config.erase = &static_erase;
		config.sync = &static_sync;
		config.read_size = 64;
		config.prog_size = 64;
		config.block_size = 256;
    1700:	str.w	r7, [r9, #156]	; 0x9c
		config.context = ptr;
		config.read = &static_read;
		config.prog = &static_prog;
		config.erase = &static_erase;
		config.sync = &static_sync;
		config.read_size = 64;
    1704:	str.w	r3, [r9, #148]	; 0x94
		config.prog_size = 64;
    1708:	str.w	r3, [r9, #152]	; 0x98
		config.block_size = 256;
		config.block_count = size / 256;
		config.block_cycles = 50;
		config.cache_size = 64;
    170c:	str.w	r3, [r9, #168]	; 0xa8
		config.lookahead_size = 64;
    1710:	str.w	r3, [r9, #172]	; 0xac
		config.erase = &static_erase;
		config.sync = &static_sync;
		config.read_size = 64;
		config.prog_size = 64;
		config.block_size = 256;
		config.block_count = size / 256;
    1714:	str.w	ip, [r9, #160]	; 0xa0
		config.block_cycles = 50;
    1718:	str.w	lr, [r9, #164]	; 0xa4
		config.cache_size = 64;
		config.lookahead_size = 64;
		config.name_max = LFS_NAME_MAX;
    171c:	str.w	r2, [r9, #188]	; 0xbc
		config.file_max = 0;
		config.attr_max = 0;
		configured = true;
    1720:	strb.w	r6, [r9, #4]
		if (lfs_format(&lfs, &config) < 0) return false;
    1724:	bl	e72c <lfs_format>
    1728:	cmp	r0, #0
    172a:	blt.n	17fe <storage_configure()+0x2a2>
		//Serial.println("formatted");
		if (lfs_mount(&lfs, &config) < 0) return false;
    172c:	ldr	r1, [pc, #348]	; (188c <storage_configure()+0x330>)
    172e:	sub.w	r0, r1, #120	; 0x78
    1732:	bl	c650 <lfs_mount>
    1736:	cmp	r0, #0
    1738:	blt.n	17fe <storage_configure()+0x2a2>
    mSD_Base() {
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, int ics, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSEMS) {
    173a:	ldr	r2, [pc, #308]	; (1870 <storage_configure()+0x314>)
		//Serial.println("mounted atfer format");
		mounted = true;
    173c:	strb.w	r6, [r9, #5]
    1740:	ldr	r3, [r2, #4]
    1742:	cmp	r3, #19
    1744:	bgt.n	175a <storage_configure()+0x1fe>
        cs[fsCount] = ics;
    1746:	add.w	r1, r2, r3, lsl #2
        storage.addFilesystem(sdx[ii],cs[ii],sd_str[ii]);
      }
      #if DO_LITTLEFS==1
        else if(cs[ii]==256) // LittleFS_RAM
        { if(!ramfs.begin(RAM_DISK_STORAGE)) { Serial.println("No storage"); while(1);}
          storage.addFilesystem(ramfs,cs[ii],sd_str[ii]);
    174a:	ldr	r6, [r5, #0]
    174c:	str.w	r7, [r1, #168]	; 0xa8
        sd_name[fsCount] = name;
        sdx[fsCount++] = &fs;
    1750:	adds	r3, #1
    }

    void sd_addFilesystem(FS &fs, int ics, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSEMS) {
        cs[fsCount] = ics;
        sd_name[fsCount] = name;
    1752:	str	r6, [r1, #8]
        sdx[fsCount++] = &fs;
    1754:	str.w	r9, [r1, #88]	; 0x58
    1758:	str	r3, [r2, #4]
		if (blocks < 0 || (lfs_size_t)blocks > config.block_count) return totalSize();
		return blocks * config.block_size;
	}
	uint64_t totalSize() {
		if (!mounted) return 0;
		return config.block_count * config.block_size;
    175a:	ldr.w	r3, [r8, #160]	; 0xa0
    175e:	ldr.w	r2, [r8, #156]	; 0x9c
	bool rmdir(const char *filepath) {
		return remove(filepath);
	}
	uint64_t usedSize() {
		if (!mounted) return 0;
		int blocks = lfs_fs_size(&lfs);
    1762:	ldr	r0, [pc, #292]	; (1888 <storage_configure()+0x32c>)
		if (blocks < 0 || (lfs_size_t)blocks > config.block_count) return totalSize();
		return blocks * config.block_size;
	}
	uint64_t totalSize() {
		if (!mounted) return 0;
		return config.block_count * config.block_size;
    1764:	mul.w	sl, r2, r3
	bool rmdir(const char *filepath) {
		return remove(filepath);
	}
	uint64_t usedSize() {
		if (!mounted) return 0;
		int blocks = lfs_fs_size(&lfs);
    1768:	bl	e890 <lfs_fs_size>
		if (blocks < 0 || (lfs_size_t)blocks > config.block_count) return totalSize();
    176c:	cmp	r0, #0
    176e:	blt.n	1838 <storage_configure()+0x2dc>
    1770:	ldr.w	r3, [r8, #160]	; 0xa0
    1774:	cmp	r3, r0
    1776:	bcc.n	1838 <storage_configure()+0x2dc>
		return blocks * config.block_size;
    1778:	ldr.w	r7, [r8, #156]	; 0x9c
    177c:	mul.w	r7, r7, r0
      #if DO_LITTLEFS==1
        else if(cs[ii]==256) // LittleFS_RAM
        {
        uint64_t totalSize = ramfs.totalSize();
        uint64_t usedSize  = ramfs.usedSize();
        Serial.printf("Storage %d %d %s ",ii,cs[ii],sd_str[ii]); Serial.print(totalSize); Serial.print(" "); Serial.println(usedSize);
    1780:	ldr	r3, [r5, #0]
    1782:	ldr	r1, [pc, #248]	; (187c <storage_configure()+0x320>)
    1784:	str	r3, [sp, #0]
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	size_t print(int64_t n);
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    1786:	movs	r6, #0
    1788:	mov	r2, r4
    178a:	mov.w	r3, #256	; 0x100
    178e:	mov.w	fp, #10
    1792:	ldr	r0, [pc, #216]	; (186c <storage_configure()+0x310>)
    1794:	bl	10030 <Print::printf(char const*, ...)>
    1798:	mov	r2, sl
    179a:	mov	r3, r6
    179c:	str	r6, [sp, #4]
    179e:	str.w	fp, [sp]
    17a2:	ldr	r0, [pc, #200]	; (186c <storage_configure()+0x310>)
    17a4:	bl	100dc <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
    17a8:	movs	r1, #1
    17aa:	ldr	r0, [pc, #212]	; (1880 <storage_configure()+0x324>)
    17ac:	bl	eae8 <usb_serial_write>
    17b0:	mov	r3, r6
    17b2:	mov	r2, r7
    17b4:	str.w	fp, [sp]
    17b8:	str	r6, [sp, #4]
    17ba:	ldr	r0, [pc, #176]	; (186c <storage_configure()+0x310>)
    17bc:	bl	100dc <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
      SPI.setMOSI(SD_MOSI);
      SPI.setMISO(SD_MISO);
      SPI.setSCK(SD_SCK);
    #endif

    for(int ii=0; ii<nsd; ii++)
    17c0:	adds	r4, #1
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
	size_t println(int64_t n)			{ return print(n) + println(); }
	size_t println(uint64_t n)			{ return print(n) + println(); }
    17c2:	ldr	r0, [pc, #168]	; (186c <storage_configure()+0x310>)
    17c4:	bl	10000 <Print::println()>
    17c8:	cmp	r4, #2
    17ca:	add.w	r5, r5, #4
    17ce:	bne.w	169a <storage_configure()+0x13e>
        uint64_t usedSize  = ramfs.usedSize();
        Serial.printf("Storage %d %d %s ",ii,cs[ii],sd_str[ii]); Serial.print(totalSize); Serial.print(" "); Serial.println(usedSize);
        }
      #endif
    }
}
    17d2:	add	sp, #60	; 0x3c
    17d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        }
      #endif
      if(cs[ii]<256)
      {
        uint64_t totalSize = sdx[ii].totalSize();
        uint64_t usedSize  = sdx[ii].usedSize();
    17d8:	mov	r0, r7
    17da:	blx	r3
    17dc:	mov	r6, r0
    17de:	mov	r7, r1
    17e0:	b.n	164c <storage_configure()+0xf0>
          storage.addFilesystem(ramfs,cs[ii],sd_str[ii]);
        }
      #endif
      if(cs[ii]<256)
      {
        uint64_t totalSize = sdx[ii].totalSize();
    17e2:	mov	r0, r7
    17e4:	blx	r3
    17e6:	strd	r0, r1, [sp, #8]
    17ea:	ldr	r1, [r7, #0]
    17ec:	b.n	1616 <storage_configure()+0xba>
    17ee:	ldr.w	r3, [r7, #1152]	; 0x480
    17f2:	cbz	r3, 184e <storage_configure()+0x2f2>
    17f4:	ldr.w	r3, [r3, #1076]	; 0x434
    17f8:	umull	r6, r7, r3, r6
    17fc:	b.n	164c <storage_configure()+0xf0>
    17fe:	movs	r1, #10
    1800:	ldr	r0, [pc, #100]	; (1868 <storage_configure()+0x30c>)
    1802:	bl	eae8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1806:	ldr	r0, [pc, #100]	; (186c <storage_configure()+0x310>)
    1808:	bl	10000 <Print::println()>
    180c:	b.n	180c <storage_configure()+0x2b0>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    180e:	ldr.w	r3, [r7, #1152]	; 0x480
    1812:	cbz	r3, 184e <storage_configure()+0x2f2>
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
    1814:	mov	r0, r3
    1816:	ldr.w	r6, [r3, #1064]	; 0x428
    181a:	bl	6de8 <ExFatPartition::freeClusterCount()>
    181e:	b.n	1632 <storage_configure()+0xd6>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    1820:	ldr.w	r3, [r7, #1152]	; 0x480
    1824:	cbz	r3, 1854 <storage_configure()+0x2f8>
    1826:	ldr.w	r2, [r3, #1064]	; 0x428
    182a:	ldr.w	r3, [r3, #1076]	; 0x434
    182e:	umull	r2, r3, r2, r3
    1832:	strd	r2, r3, [sp, #8]
    1836:	b.n	1616 <storage_configure()+0xba>
	}
	uint64_t totalSize() {
		if (!mounted) return 0;
    1838:	ldrb.w	r7, [r8, #5]
    183c:	cmp	r7, #0
    183e:	beq.n	1780 <storage_configure()+0x224>
		return config.block_count * config.block_size;
    1840:	ldr.w	r3, [r8, #160]	; 0xa0
    1844:	ldr.w	r7, [r8, #156]	; 0x9c
    1848:	mul.w	r7, r7, r3
    184c:	b.n	1780 <storage_configure()+0x224>
    184e:	movs	r6, #0
    1850:	movs	r7, #0
    1852:	b.n	164c <storage_configure()+0xf0>
    1854:	movs	r2, #0
    1856:	movs	r3, #0
    1858:	strd	r2, r3, [sp, #8]
    185c:	b.n	1616 <storage_configure()+0xba>
    185e:	nop
    1860:	.word	0x1fff1498
    1864:	.word	0x1fff0980
    1868:	.word	0x000158ac
    186c:	.word	0x1fff09d0
    1870:	.word	0x1fff1ec0
    1874:	.word	0x1fff0974
    1878:	.word	0x00000f79
    187c:	.word	0x000158b8
    1880:	.word	0x000158c8
    1884:	.word	0x007a1200
    1888:	.word	0x1fff1e00
    188c:	.word	0x1fff1e78
    1890:	.word	0x00000671
    1894:	.word	0x000006a1
    1898:	.word	0x00000619
    189c:	.word	0x1fff1df8
    18a0:	.word	0x000010f1
    18a4:	.word	0x00000689

000018a8 <setup>:
    to=millis();
  }
}

void setup()
{ 
    18a8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18ac:	ldr	r1, [pc, #348]	; (1a0c <setup+0x164>)
    18ae:	ldr	r2, [pc, #352]	; (1a10 <setup+0x168>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    18b0:	ldr	r4, [pc, #352]	; (1a14 <setup+0x16c>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    18b2:	ldr	r6, [pc, #356]	; (1a18 <setup+0x170>)
    18b4:	sub	sp, #140	; 0x8c
  while(!Serial && millis()<3000); 
    18b6:	movw	r0, #2999	; 0xbb7
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    18ba:	ldrb	r3, [r1, #0]
    18bc:	cmp	r3, #0
    18be:	beq.w	19e6 <setup+0x13e>
    18c2:	ldrb	r3, [r4, #0]
    18c4:	lsls	r3, r3, #31
    18c6:	bpl.w	19e6 <setup+0x13e>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    18ca:	ldr	r3, [r2, #0]
    18cc:	ldr	r5, [r6, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    18ce:	subs	r3, r3, r5
    18d0:	cmp	r3, #14
    18d2:	bls.w	19e6 <setup+0x13e>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    18d6:	movs	r1, #8
    18d8:	ldr	r0, [pc, #320]	; (1a1c <setup+0x174>)
    18da:	ldr	r5, [pc, #324]	; (1a20 <setup+0x178>)
    18dc:	bl	eae8 <usb_serial_write>
    18e0:	ldr	r0, [pc, #320]	; (1a24 <setup+0x17c>)
    18e2:	bl	10000 <Print::println()>
			}
		}
		return File();
	}
	bool exists(const char *filepath) {
		if (!mounted) return false;
    18e6:	mov	r7, r5
  Serial.println("MTP_test");
  
  usb_mtp_configure();
    18e8:	bl	ade4 <usb_mtp_configure>
  storage_configure();

  #if DO_LITTLEFS==1
  // store some files into disks (but only once)
  for(int ii=0; ii<10;ii++)
    18ec:	movs	r4, #0
{ 
  while(!Serial && millis()<3000); 
  Serial.println("MTP_test");
  
  usb_mtp_configure();
  storage_configure();
    18ee:	bl	155c <storage_configure()>
    18f2:	b.n	1948 <setup+0xa0>
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    18f4:	movs	r3, #0
    18f6:	mov.w	r2, #1000	; 0x3e8

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    18fa:	ldr.w	r8, [pc, #316]	; 1a38 <setup+0x190>
    18fe:	strb.w	r3, [sp, #12]
    1902:	strb.w	r3, [sp, #20]
    1906:	str	r3, [sp, #24]
    1908:	str	r2, [sp, #16]
    190a:	str.w	r8, [sp, #8]
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    190e:	movs	r2, #19
    1910:	ldr	r1, [pc, #276]	; (1a28 <setup+0x180>)
    1912:	add	r0, sp, #8
    1914:	bl	ffd4 <Print::write(unsigned char const*, unsigned int)>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1918:	add	r0, sp, #8
    191a:	bl	10000 <Print::println()>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    191e:	ldr	r0, [sp, #24]
    1920:	cbz	r0, 1942 <setup+0x9a>
    1922:	ldr	r3, [r0, #0]
    1924:	ldr	r3, [r3, #64]	; 0x40
    1926:	blx	r3
    1928:	ldr	r2, [sp, #24]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    192a:	str.w	r8, [sp, #8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    192e:	cbz	r2, 1942 <setup+0x9a>
    1930:	ldr	r3, [r2, #16]
    1932:	subs	r3, #1
    1934:	str	r3, [r2, #16]
    1936:	cbnz	r3, 1942 <setup+0x9a>
    1938:	ldr	r0, [sp, #24]
    193a:	cbz	r0, 1942 <setup+0x9a>
    193c:	ldr	r3, [r0, #0]
    193e:	ldr	r3, [r3, #32]
    1940:	blx	r3

  #if DO_LITTLEFS==1
  // store some files into disks (but only once)
  for(int ii=0; ii<10;ii++)
    1942:	adds	r4, #1
    1944:	cmp	r4, #10
    1946:	beq.n	19f4 <setup+0x14c>
  { char filename[80];
    sprintf(filename,"test_%d.txt",ii);
    1948:	mov	r2, r4
    194a:	ldr	r1, [pc, #224]	; (1a2c <setup+0x184>)
    194c:	add	r0, sp, #56	; 0x38
    194e:	bl	11c64 <sprintf>
    1952:	ldrb	r3, [r5, #5]
    1954:	cmp	r3, #0
    1956:	beq.n	18f4 <setup+0x4c>
		struct lfs_info info;
		if (lfs_stat(&lfs, filepath, &info) < 0) return false;
    1958:	ldr.w	r8, [pc, #224]	; 1a3c <setup+0x194>
    195c:	add	r2, sp, #8
    195e:	mov	r0, r8
    1960:	add	r1, sp, #56	; 0x38
    1962:	bl	c620 <lfs_stat>
    1966:	cmp	r0, #0
    1968:	bge.n	1942 <setup+0x9a>
    196a:	ldrb	r3, [r7, #5]
	}
	bool quickFormat();
	bool lowLevelFormat(char progressChar=0);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		//Serial.println("LittleFS open");
		if (!mounted) return File();
    196c:	cmp	r3, #0
    196e:	beq.n	18f4 <setup+0x4c>
					return File(new LittleFSFile(&lfs, dir, filepath));
				}
				free(dir);
			}
		} else {
			lfs_file_t *file = (lfs_file_t *)malloc(sizeof(lfs_file_t));
    1970:	movs	r0, #84	; 0x54
    1972:	bl	11030 <malloc>
			if (!file) return File();
    1976:	mov	sl, r0
    1978:	cmp	r0, #0
    197a:	beq.n	18f4 <setup+0x4c>
			if (lfs_file_open(&lfs, file, filepath, LFS_O_RDWR | LFS_O_CREAT) >= 0) {
    197c:	mov	r1, r0
    197e:	movw	r3, #259	; 0x103
    1982:	add	r2, sp, #56	; 0x38
    1984:	mov	r0, r8
    1986:	bl	e240 <lfs_file_open>
    198a:	cmp	r0, #0
    198c:	blt.n	18f4 <setup+0x4c>
				if (mode == FILE_WRITE) {
					// FILE_WRITE opens at end of file
					lfs_file_seek(&lfs, file, 0, LFS_SEEK_END);
				} // else FILE_WRITE_BEGIN
				return File(new LittleFSFile(&lfs, file, filepath));
    198e:	movs	r0, #164	; 0xa4
    1990:	bl	101ac <operator new(unsigned int)>
    1994:	mov	r6, r0
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    1996:	mov.w	r9, #0
private:
	// Classes derived from File are never meant to be constructed from
	// anywhere other than openNextFile() and open() in their parent FS
	// class.  Only the abstract File class which references these
	// derived classes is meant to have a public constructor!
	LittleFSFile(lfs_t *lfsin, lfs_file_t *filein, const char *name) {
    199a:	ldr	r3, [pc, #148]	; (1a30 <setup+0x188>)
		lfs = lfsin;
    199c:	str.w	r8, [r0, #20]
    19a0:	mov.w	fp, #1000	; 0x3e8
private:
	// Classes derived from File are never meant to be constructed from
	// anywhere other than openNextFile() and open() in their parent FS
	// class.  Only the abstract File class which references these
	// derived classes is meant to have a public constructor!
	LittleFSFile(lfs_t *lfsin, lfs_file_t *filein, const char *name) {
    19a4:	str	r3, [r6, #0]
		lfs = lfsin;
		file = filein;
		dir = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
    19a6:	adds	r0, #36	; 0x24
    19a8:	movs	r2, #128	; 0x80
	// anywhere other than openNextFile() and open() in their parent FS
	// class.  Only the abstract File class which references these
	// derived classes is meant to have a public constructor!
	LittleFSFile(lfs_t *lfsin, lfs_file_t *filein, const char *name) {
		lfs = lfsin;
		file = filein;
    19aa:	str.w	sl, [r6, #24]
		dir = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
    19ae:	add	r1, sp, #56	; 0x38
    19b0:	strb.w	r9, [r6, #4]
    19b4:	strb.w	r9, [r6, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    19b8:	str.w	r9, [r6, #16]
	// class.  Only the abstract File class which references these
	// derived classes is meant to have a public constructor!
	LittleFSFile(lfs_t *lfsin, lfs_file_t *filein, const char *name) {
		lfs = lfsin;
		file = filein;
		dir = nullptr;
    19bc:	str.w	r9, [r6, #28]
    19c0:	str.w	fp, [r6, #8]
		strlcpy(fullpath, name, sizeof(fullpath));
    19c4:	bl	121ec <strlcpy>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    19c8:	ldr	r3, [r6, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    19ca:	ldr.w	r8, [pc, #108]	; 1a38 <setup+0x190>
    19ce:	strb.w	r9, [sp, #12]
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    19d2:	adds	r3, #1
    19d4:	str.w	fp, [sp, #16]
    19d8:	strb.w	r9, [sp, #20]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
    19dc:	str	r6, [sp, #24]
		if (f) f->refcount++;
    19de:	str	r3, [r6, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    19e0:	str.w	r8, [sp, #8]
    19e4:	b.n	190e <setup+0x66>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    19e6:	ldr	r3, [r2, #0]
    19e8:	str	r3, [sp, #4]
	return ret;
    19ea:	ldr	r3, [sp, #4]
  }
}

void setup()
{ 
  while(!Serial && millis()<3000); 
    19ec:	cmp	r3, r0
    19ee:	bls.w	18ba <setup+0x12>
    19f2:	b.n	18d6 <setup+0x2e>
    19f4:	mov	r1, r4
    19f6:	ldr	r0, [pc, #60]	; (1a34 <setup+0x18c>)
    19f8:	bl	eae8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    19fc:	ldr	r0, [pc, #36]	; (1a24 <setup+0x17c>)
    19fe:	bl	10000 <Print::println()>
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    1a02:	bl	ec50 <usb_serial_flush_output>
  }
  #endif

  Serial.println("Setup done");
  Serial.flush();
}
    1a06:	add	sp, #140	; 0x8c
    1a08:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a0c:	.word	0x1fff263c
    1a10:	.word	0x1fff2538
    1a14:	.word	0x1fff2534
    1a18:	.word	0x1fff26b4
    1a1c:	.word	0x000158cc
    1a20:	.word	0x1fff1df8
    1a24:	.word	0x1fff09d0
    1a28:	.word	0x000158e4
    1a2c:	.word	0x000158d8
    1a30:	.word	0x000157c0
    1a34:	.word	0x000158f8
    1a38:	.word	0x000156d4
    1a3c:	.word	0x1fff1e00

00001a40 <loop>:

void loop()
{ 
  mtpd.loop();
    1a40:	ldr	r0, [pc, #4]	; (1a48 <loop+0x8>)
    1a42:	b.w	549c <MTPD::loop()>
    1a46:	nop
    1a48:	.word	0x1fff2014

00001a4c <_GLOBAL__sub_I_sd_str>:

  //logg(1000,"loop");
  //asm("wfi"); // may wait forever on T4.x
}
    1a4c:	push	{r3, r4, r5, r6, r7, lr}


class SDClass : public FS
{
public:
	SDClass() { }
    1a4e:	ldr	r3, [pc, #240]	; (1b40 <_GLOBAL__sub_I_sd_str+0xf4>)
  const int cs[] = {BUILTIN_SDCARD,38}; // edit to reflect your configuration
#endif
  const int nsd = sizeof(cs)/sizeof(int);

// classes need to be declared here (in storage.h there are declared external)
SDClass sdx[nsd];
    1a50:	ldr	r7, [pc, #240]	; (1b44 <_GLOBAL__sub_I_sd_str+0xf8>)
    1a52:	ldr	r5, [pc, #244]	; (1b48 <_GLOBAL__sub_I_sd_str+0xfc>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    1a54:	ldr	r6, [pc, #244]	; (1b4c <_GLOBAL__sub_I_sd_str+0x100>)
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
    1a56:	ldr	r1, [pc, #248]	; (1b50 <_GLOBAL__sub_I_sd_str+0x104>)
    1a58:	str	r5, [r3, #0]
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() : m_fVol(nullptr), m_xVol(nullptr) {}
    1a5a:	movs	r4, #0
    1a5c:	str.w	r5, [r3, #1200]	; 0x4b0
    1a60:	str.w	r6, [r3, #1164]	; 0x48c
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    1a64:	ldr	r5, [pc, #236]	; (1b54 <_GLOBAL__sub_I_sd_str+0x108>)
    1a66:	str.w	r6, [r3, #2364]	; 0x93c
    1a6a:	movs	r6, #40	; 0x28
    1a6c:	mov	r2, r7
    1a6e:	str.w	r1, [r3, #1176]	; 0x498
    1a72:	str.w	r1, [r3, #2376]	; 0x948
    1a76:	str.w	r5, [r3, #1184]	; 0x4a0
    1a7a:	str.w	r5, [r3, #2384]	; 0x950
    1a7e:	strb.w	r6, [r3, #1195]	; 0x4ab
    1a82:	strb.w	r6, [r3, #2395]	; 0x95b
    1a86:	str.w	r4, [r3, #1148]	; 0x47c
    1a8a:	str.w	r4, [r3, #1152]	; 0x480
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() : m_options(FIFO_SDIO) {}
    1a8e:	strb.w	r4, [r3, #1172]	; 0x494
    1a92:	strb.w	r4, [r3, #1198]	; 0x4ae
    1a96:	str.w	r4, [r3, #2348]	; 0x92c
    1a9a:	str.w	r4, [r3, #2352]	; 0x930
    1a9e:	strb.w	r4, [r3, #2372]	; 0x944
    1aa2:	strb.w	r4, [r3, #2398]	; 0x95e
    1aa6:	ldr	r1, [pc, #176]	; (1b58 <_GLOBAL__sub_I_sd_str+0x10c>)

class mSD_Base
{
  public:
    mSD_Base() {
      fsCount = 0;
    1aa8:	ldr	r5, [pc, #176]	; (1b5c <_GLOBAL__sub_I_sd_str+0x110>)

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    1aaa:	ldr	r6, [pc, #180]	; (1b60 <_GLOBAL__sub_I_sd_str+0x114>)
    1aac:	mov	r0, r4
    1aae:	bl	1035c <__aeabi_atexit>

class LittleFS : public FS
{
public:
	LittleFS() {
		configured = false;
    1ab2:	ldr	r3, [pc, #176]	; (1b64 <_GLOBAL__sub_I_sd_str+0x118>)


class LittleFS_RAM : public LittleFS
{
public:
	LittleFS_RAM() { }
    1ab4:	ldr	r0, [pc, #176]	; (1b68 <_GLOBAL__sub_I_sd_str+0x11c>)
    1ab6:	str	r0, [r3, #0]

class LittleFS : public FS
{
public:
	LittleFS() {
		configured = false;
    1ab8:	strb	r4, [r3, #4]
		mounted = false;
    1aba:	strb	r4, [r3, #5]
		config.context = nullptr;
    1abc:	str.w	r4, [r3, #128]	; 0x80
    1ac0:	mov.w	r3, #1000	; 0x3e8

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
    1ac4:	ldr.w	lr, [pc, #172]	; 1b74 <_GLOBAL__sub_I_sd_str+0x128>
    1ac8:	str.w	r3, [r5, #256]	; 0x100
#if HAVE_LITTLEFS==1
  LittleFS_RAM ramfs; // needs to be declared if LittleFS is used in storage.h
#endif

MTPStorage_SD storage;
    1acc:	mov	r2, r7
    1ace:	str.w	r3, [r5, #276]	; 0x114
    1ad2:	str.w	r3, [r5, #296]	; 0x128
    1ad6:	ldr	r1, [pc, #148]	; (1b6c <_GLOBAL__sub_I_sd_str+0x120>)

class mSD_Base
{
  public:
    mSD_Base() {
      fsCount = 0;
    1ad8:	str	r4, [r5, #4]

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
    1ada:	mvn.w	r7, #1
    1ade:	mov	r0, r5
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    1ae0:	strb.w	r4, [r5, #252]	; 0xfc
    1ae4:	strb.w	r4, [r5, #260]	; 0x104
    1ae8:	str.w	r4, [r5, #264]	; 0x108
    1aec:	strb.w	r4, [r5, #272]	; 0x110
    1af0:	strb.w	r4, [r5, #280]	; 0x118
    1af4:	str.w	r4, [r5, #284]	; 0x11c
    1af8:	strb.w	r4, [r5, #292]	; 0x124
    1afc:	strb.w	r4, [r5, #300]	; 0x12c
    1b00:	str.w	r4, [r5, #304]	; 0x130
    1b04:	str.w	r6, [r5, #248]	; 0xf8
    1b08:	str.w	r6, [r5, #268]	; 0x10c
    1b0c:	str.w	r6, [r5, #288]	; 0x120
    1b10:	str.w	r4, [r5, #308]	; 0x134
    1b14:	str.w	r4, [r5, #312]	; 0x138
    1b18:	str.w	r4, [r5, #316]	; 0x13c
    1b1c:	str.w	r4, [r5, #324]	; 0x144
    1b20:	strb.w	r4, [r5, #328]	; 0x148
    1b24:	strb.w	r4, [r5, #329]	; 0x149
    1b28:	str.w	lr, [r5]
    1b2c:	str.w	r7, [r5, #320]	; 0x140
    1b30:	bl	1035c <__aeabi_atexit>

// MTP Responder.
class MTPD {
public:

  explicit MTPD(MTPStorageInterface* storage): storage_(storage) {}
    1b34:	ldr	r3, [pc, #56]	; (1b70 <_GLOBAL__sub_I_sd_str+0x124>)
    1b36:	str	r5, [r3, #0]
    1b38:	str	r4, [r3, #4]
    1b3a:	strb	r4, [r3, #8]
    1b3c:	str	r4, [r3, #12]
    1b3e:	pop	{r3, r4, r5, r6, r7, pc}
    1b40:	.word	0x1fff1498
    1b44:	.word	0x1fff0970
    1b48:	.word	0x00015798
    1b4c:	.word	0x00015b40
    1b50:	.word	0x00015ae8
    1b54:	.word	0x38011001
    1b58:	.word	0x0000061d
    1b5c:	.word	0x1fff1ec0
    1b60:	.word	0x000156d4
    1b64:	.word	0x1fff1df8
    1b68:	.word	0x00015820
    1b6c:	.word	0x000014e5
    1b70:	.word	0x1fff2014
    1b74:	.word	0x00015918

00001b78 <MTPStorage_SD::addFilesystem(FS&, int, char const*)>:
{ 
public:
  void addFilesystem(FS &fs, int ics, const char *name) { sd_addFilesystem(fs,ics,name);}
    1b78:	push	{r4, r5}
    mSD_Base() {
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, int ics, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSEMS) {
    1b7a:	ldr	r4, [r0, #4]
    1b7c:	cmp	r4, #19
    1b7e:	bgt.n	1b90 <MTPStorage_SD::addFilesystem(FS&, int, char const*)+0x18>
    1b80:	add.w	r5, r0, r4, lsl #2
        cs[fsCount] = ics;
        sd_name[fsCount] = name;
        sdx[fsCount++] = &fs;
    1b84:	adds	r4, #1
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, int ics, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSEMS) {
        cs[fsCount] = ics;
    1b86:	str.w	r2, [r5, #168]	; 0xa8
        sd_name[fsCount] = name;
    1b8a:	str	r3, [r5, #8]
        sdx[fsCount++] = &fs;
    1b8c:	str	r4, [r0, #4]
    1b8e:	str	r1, [r5, #88]	; 0x58

// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
{ 
public:
  void addFilesystem(FS &fs, int ics, const char *name) { sd_addFilesystem(fs,ics,name);}
    1b90:	pop	{r4, r5}
    1b92:	bx	lr

00001b94 <MTPStorage_SD::get_FSCount()>:
  uint16_t ConstructFilename(int i, char* out, int len) ;
  void OpenFileByIndex(uint32_t i, uint32_t mode = FILE_READ) ;
  void dumpIndexList(void);
  void printRecord(int h, Record *p);

  uint32_t get_FSCount(void) {return sd_getFSCount();}
    1b94:	ldr	r0, [r0, #4]
    1b96:	bx	lr

00001b98 <MTPStorage_SD::get_FSName(unsigned long)>:
        sdx[fsCount++] = &fs;
      }
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t storage) { return sd_name[storage-1];}
    1b98:	add.w	r1, r0, r1, lsl #2
  void OpenFileByIndex(uint32_t i, uint32_t mode = FILE_READ) ;
  void dumpIndexList(void);
  void printRecord(int h, Record *p);

  uint32_t get_FSCount(void) {return sd_getFSCount();}
  const char *get_FSName(uint32_t storage) { return sd_getFSName(storage);}
    1b9c:	ldr	r0, [r1, #4]
    1b9e:	bx	lr

00001ba0 <MTPStorage_SD::readonly(unsigned long)>:

// These should probably be weak.
void mtp_yield() {}
void mtp_lock_storage(bool lock) {}

  bool MTPStorage_SD::readonly(uint32_t storage) { return false; }
    1ba0:	movs	r0, #0
    1ba2:	bx	lr

00001ba4 <MTPStorage_SD::has_directories(unsigned long)>:
  bool MTPStorage_SD::has_directories(uint32_t storage) { return true; }
    1ba4:	movs	r0, #1
    1ba6:	bx	lr

00001ba8 <MTPStorage_SD::totalSize(unsigned long)>:
    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) { return sdx[store]->remove(filename);  }
    bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
    uint64_t sd_totalSize(uint32_t store) { return sdx[store]->totalSize();  }
    1ba8:	add.w	r1, r0, r1, lsl #2
    1bac:	ldr	r0, [r1, #84]	; 0x54
    1bae:	ldr	r3, [r0, #0]
    1bb0:	ldr	r3, [r3, #28]
    1bb2:	bx	r3

00001bb4 <MTPStorage_SD::usedSize(unsigned long)>:
    uint64_t sd_usedSize(uint32_t store)  { return sdx[store]->usedSize();  }
    1bb4:	add.w	r1, r0, r1, lsl #2
    1bb8:	ldr	r0, [r1, #84]	; 0x54
    1bba:	ldr	r3, [r0, #0]
    1bbc:	ldr	r3, [r3, #24]
    1bbe:	bx	r3

00001bc0 <MTPStorage_SD::write(char const*, unsigned long)>:
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    1bc0:	ldr.w	r0, [r0, #284]	; 0x11c
    1bc4:	cmp	r0, #0
    1bc6:	beq.n	1c24 <MTPStorage_SD::write(char const*, unsigned long)+0x64>
    }
    return ret;
  }

  void MTPStorage_SD::write(const char* data, uint32_t bytes)
  {
    1bc8:	push	{r4, r5, r6}
    1bca:	ldr	r4, [r0, #0]
    1bcc:	ldr	r3, [pc, #104]	; (1c38 <MTPStorage_SD::write(char const*, unsigned long)+0x78>)
    1bce:	ldr	r4, [r4, #44]	; 0x2c
    1bd0:	cmp	r4, r3
    1bd2:	bne.n	1c26 <MTPStorage_SD::write(char const*, unsigned long)+0x66>
    1bd4:	ldr	r0, [r0, #16]
    1bd6:	cbz	r0, 1c22 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1bd8:	ldr	r4, [r0, #0]
    1bda:	ldr	r4, [r4, #44]	; 0x2c
    1bdc:	cmp	r4, r3
    1bde:	bne.n	1c26 <MTPStorage_SD::write(char const*, unsigned long)+0x66>
    1be0:	ldr	r0, [r0, #16]
    1be2:	cbz	r0, 1c22 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1be4:	ldr	r4, [r0, #0]
    1be6:	ldr	r4, [r4, #44]	; 0x2c
    1be8:	cmp	r4, r3
    1bea:	bne.n	1c26 <MTPStorage_SD::write(char const*, unsigned long)+0x66>
    1bec:	ldr	r0, [r0, #16]
    1bee:	cbz	r0, 1c22 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1bf0:	ldr	r4, [r0, #0]
    1bf2:	ldr	r4, [r4, #44]	; 0x2c
    1bf4:	cmp	r4, r3
    1bf6:	bne.n	1c26 <MTPStorage_SD::write(char const*, unsigned long)+0x66>
    1bf8:	ldr	r0, [r0, #16]
    1bfa:	cbz	r0, 1c22 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1bfc:	mov	r6, r2
    1bfe:	ldr	r2, [r0, #0]
    1c00:	ldr	r4, [r2, #44]	; 0x2c
    1c02:	cmp	r4, r3
    1c04:	mov	r5, r1
    1c06:	bne.n	1c2c <MTPStorage_SD::write(char const*, unsigned long)+0x6c>
    1c08:	ldr	r0, [r0, #16]
    1c0a:	cbz	r0, 1c22 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1c0c:	ldr	r2, [r0, #0]
    1c0e:	ldr	r4, [r2, #44]	; 0x2c
    1c10:	cmp	r4, r3
    1c12:	bne.n	1c2c <MTPStorage_SD::write(char const*, unsigned long)+0x6c>
    1c14:	ldr	r0, [r0, #16]
    1c16:	cbz	r0, 1c22 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1c18:	ldr	r3, [r0, #0]
    1c1a:	mov	r2, r6
    1c1c:	ldr	r3, [r3, #44]	; 0x2c
      mtp_lock_storage(true);
      file_.write(data,bytes);
      mtp_lock_storage(false);
  }
    1c1e:	pop	{r4, r5, r6}
    1c20:	bx	r3
    1c22:	pop	{r4, r5, r6}
    1c24:	bx	lr
    1c26:	mov	r3, r4
    1c28:	pop	{r4, r5, r6}
    1c2a:	bx	r3
    1c2c:	mov	r2, r6
    1c2e:	mov	r1, r5
    1c30:	mov	r3, r4
    1c32:	pop	{r4, r5, r6}
    1c34:	bx	r3
    1c36:	nop
    1c38:	.word	0x00000489

00001c3c <MTPStorage_SD::CloseIndex()>:

  uint64_t MTPStorage_SD::totalSize(uint32_t storage) { return sd_totalSize(storage-1); }
  uint64_t MTPStorage_SD::usedSize(uint32_t storage) { return sd_usedSize(storage-1); }

  void MTPStorage_SD::CloseIndex()
  {
    1c3c:	push	{r4, lr}
    1c3e:	mov	r4, r0
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1c40:	ldr.w	r0, [r0, #264]	; 0x108
    1c44:	cmp	r0, #0
    1c46:	beq.n	1d28 <MTPStorage_SD::CloseIndex()+0xec>
    1c48:	ldr	r3, [r0, #0]
    1c4a:	ldr	r2, [pc, #256]	; (1d4c <MTPStorage_SD::CloseIndex()+0x110>)
    1c4c:	ldr	r3, [r3, #68]	; 0x44
    1c4e:	cmp	r3, r2
    1c50:	bne.n	1d34 <MTPStorage_SD::CloseIndex()+0xf8>
    1c52:	ldr	r0, [r0, #16]
    1c54:	cmp	r0, #0
    1c56:	beq.n	1d28 <MTPStorage_SD::CloseIndex()+0xec>
    1c58:	ldr	r2, [r0, #0]
    1c5a:	ldr	r2, [r2, #68]	; 0x44
    1c5c:	cmp	r2, r3
    1c5e:	bne.n	1d46 <MTPStorage_SD::CloseIndex()+0x10a>
    1c60:	ldr	r0, [r0, #16]
    1c62:	cmp	r0, #0
    1c64:	beq.n	1d28 <MTPStorage_SD::CloseIndex()+0xec>
    1c66:	ldr	r3, [r0, #0]
    1c68:	ldr	r3, [r3, #68]	; 0x44
    1c6a:	cmp	r3, r2
    1c6c:	bne.n	1d34 <MTPStorage_SD::CloseIndex()+0xf8>
    1c6e:	ldr	r0, [r0, #16]
    1c70:	cmp	r0, #0
    1c72:	beq.n	1d28 <MTPStorage_SD::CloseIndex()+0xec>
    1c74:	ldr	r2, [r0, #0]
    1c76:	ldr	r2, [r2, #68]	; 0x44
    1c78:	cmp	r2, r3
    1c7a:	bne.n	1d46 <MTPStorage_SD::CloseIndex()+0x10a>
    1c7c:	ldr	r0, [r0, #16]
    1c7e:	cmp	r0, #0
    1c80:	beq.n	1d28 <MTPStorage_SD::CloseIndex()+0xec>
    1c82:	ldr	r3, [r0, #0]
    1c84:	ldr	r3, [r3, #68]	; 0x44
    1c86:	cmp	r3, r2
    1c88:	bne.n	1d34 <MTPStorage_SD::CloseIndex()+0xf8>
    1c8a:	ldr	r0, [r0, #16]
    1c8c:	cmp	r0, #0
    1c8e:	beq.n	1d28 <MTPStorage_SD::CloseIndex()+0xec>
    1c90:	ldr	r3, [r0, #0]
    1c92:	ldr	r3, [r3, #68]	; 0x44
    1c94:	blx	r3
    mtp_lock_storage(true);
    if(sd_isOpen(index_)) index_.close();
    1c96:	cmp	r0, #0
    1c98:	beq.n	1d28 <MTPStorage_SD::CloseIndex()+0xec>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    1c9a:	ldr.w	r0, [r4, #264]	; 0x108
    1c9e:	cmp	r0, #0
    1ca0:	beq.n	1d28 <MTPStorage_SD::CloseIndex()+0xec>
    1ca2:	ldr	r2, [r0, #0]
    1ca4:	ldr	r3, [pc, #168]	; (1d50 <MTPStorage_SD::CloseIndex()+0x114>)
    1ca6:	ldr	r2, [r2, #64]	; 0x40
    1ca8:	cmp	r2, r3
    1caa:	bne.n	1d38 <MTPStorage_SD::CloseIndex()+0xfc>
    1cac:	ldr	r0, [r0, #16]
    1cae:	cmp	r0, #0
    1cb0:	beq.n	1d28 <MTPStorage_SD::CloseIndex()+0xec>
    1cb2:	ldr	r2, [r0, #0]
    1cb4:	ldr	r2, [r2, #64]	; 0x40
    1cb6:	cmp	r2, r3
    1cb8:	bne.n	1d38 <MTPStorage_SD::CloseIndex()+0xfc>
    1cba:	ldr	r0, [r0, #16]
    1cbc:	cmp	r0, #0
    1cbe:	beq.n	1d28 <MTPStorage_SD::CloseIndex()+0xec>
    1cc0:	ldr	r2, [r0, #0]
    1cc2:	ldr	r2, [r2, #64]	; 0x40
    1cc4:	cmp	r2, r3
    1cc6:	bne.n	1d38 <MTPStorage_SD::CloseIndex()+0xfc>
    1cc8:	ldr	r0, [r0, #16]
    1cca:	cmp	r0, #0
    1ccc:	beq.n	1d28 <MTPStorage_SD::CloseIndex()+0xec>
    1cce:	ldr	r2, [r0, #0]
    1cd0:	ldr	r2, [r2, #64]	; 0x40
    1cd2:	cmp	r2, r3
    1cd4:	bne.n	1d38 <MTPStorage_SD::CloseIndex()+0xfc>
    1cd6:	ldr	r0, [r0, #16]
    1cd8:	cbz	r0, 1d28 <MTPStorage_SD::CloseIndex()+0xec>
    1cda:	ldr	r2, [r0, #0]
    1cdc:	ldr	r2, [r2, #64]	; 0x40
    1cde:	cmp	r2, r3
    1ce0:	bne.n	1d38 <MTPStorage_SD::CloseIndex()+0xfc>
    1ce2:	ldr	r0, [r0, #16]
    1ce4:	cbz	r0, 1d28 <MTPStorage_SD::CloseIndex()+0xec>
    1ce6:	ldr	r2, [r0, #0]
    1ce8:	ldr	r2, [r2, #64]	; 0x40
    1cea:	cmp	r2, r3
    1cec:	bne.n	1d38 <MTPStorage_SD::CloseIndex()+0xfc>
    1cee:	ldr	r0, [r0, #16]
    1cf0:	cbz	r0, 1d28 <MTPStorage_SD::CloseIndex()+0xec>
    1cf2:	ldr	r2, [r0, #0]
    1cf4:	ldr	r2, [r2, #64]	; 0x40
    1cf6:	cmp	r2, r3
    1cf8:	bne.n	1d38 <MTPStorage_SD::CloseIndex()+0xfc>
    1cfa:	ldr	r0, [r0, #16]
    1cfc:	cbz	r0, 1d28 <MTPStorage_SD::CloseIndex()+0xec>
    1cfe:	ldr	r2, [r0, #0]
    1d00:	ldr	r2, [r2, #64]	; 0x40
    1d02:	cmp	r2, r3
    1d04:	bne.n	1d38 <MTPStorage_SD::CloseIndex()+0xfc>
    1d06:	ldr	r0, [r0, #16]
    1d08:	cbz	r0, 1d28 <MTPStorage_SD::CloseIndex()+0xec>
    1d0a:	ldr	r2, [r0, #0]
    1d0c:	ldr	r2, [r2, #64]	; 0x40
    1d0e:	cmp	r2, r3
    1d10:	bne.n	1d38 <MTPStorage_SD::CloseIndex()+0xfc>
    1d12:	ldr	r0, [r0, #16]
    1d14:	cbz	r0, 1d28 <MTPStorage_SD::CloseIndex()+0xec>
    1d16:	ldr	r2, [r0, #0]
    1d18:	ldr	r2, [r2, #64]	; 0x40
    1d1a:	cmp	r2, r3
    1d1c:	bne.n	1d38 <MTPStorage_SD::CloseIndex()+0xfc>
    1d1e:	ldr	r0, [r0, #16]
    1d20:	cbz	r0, 1d28 <MTPStorage_SD::CloseIndex()+0xec>
    1d22:	ldr	r3, [r0, #0]
    1d24:	ldr	r3, [r3, #64]	; 0x40
    1d26:	blx	r3
    mtp_lock_storage(false);
    index_generated = false;
    1d28:	movs	r3, #0
    1d2a:	strb.w	r3, [r4, #328]	; 0x148
    index_entries_ = 0;
    1d2e:	str.w	r3, [r4, #324]	; 0x144
    1d32:	pop	{r4, pc}
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1d34:	blx	r3
    1d36:	b.n	1c96 <MTPStorage_SD::CloseIndex()+0x5a>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    1d38:	blx	r2
  void MTPStorage_SD::CloseIndex()
  {
    mtp_lock_storage(true);
    if(sd_isOpen(index_)) index_.close();
    mtp_lock_storage(false);
    index_generated = false;
    1d3a:	movs	r3, #0
    1d3c:	strb.w	r3, [r4, #328]	; 0x148
    index_entries_ = 0;
    1d40:	str.w	r3, [r4, #324]	; 0x144
    1d44:	pop	{r4, pc}
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1d46:	blx	r2
    1d48:	b.n	1c96 <MTPStorage_SD::CloseIndex()+0x5a>
    1d4a:	nop
    1d4c:	.word	0x0000050d
    1d50:	.word	0x00000501

00001d54 <mtp_yield()>:
//   support serialflash
//   partial object fetch/receive
//   events (notify usb host when local storage changes) (But, this seems too difficult)

// These should probably be weak.
void mtp_yield() {}
    1d54:	bx	lr
    1d56:	nop

00001d58 <MTPStorage_SD::OpenIndex()>:
    index_generated = false;
    index_entries_ = 0;
  }

  void MTPStorage_SD::OpenIndex() 
  { if(sd_isOpen(index_)) return; // only once
    1d58:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1d5c:	mov	r4, r0
    1d5e:	ldr.w	r0, [r0, #264]	; 0x108
    1d62:	sub	sp, #28
    1d64:	cbz	r0, 1dbc <MTPStorage_SD::OpenIndex()+0x64>
    1d66:	ldr	r3, [r0, #0]
    1d68:	ldr	r2, [pc, #384]	; (1eec <MTPStorage_SD::OpenIndex()+0x194>)
    1d6a:	ldr	r3, [r3, #68]	; 0x44
    1d6c:	cmp	r3, r2
    1d6e:	bne.w	1fe8 <MTPStorage_SD::OpenIndex()+0x290>
    1d72:	ldr	r0, [r0, #16]
    1d74:	cbz	r0, 1dbc <MTPStorage_SD::OpenIndex()+0x64>
    1d76:	ldr	r2, [r0, #0]
    1d78:	ldr	r2, [r2, #68]	; 0x44
    1d7a:	cmp	r2, r3
    1d7c:	bne.w	1ff2 <MTPStorage_SD::OpenIndex()+0x29a>
    1d80:	ldr	r0, [r0, #16]
    1d82:	cbz	r0, 1dbc <MTPStorage_SD::OpenIndex()+0x64>
    1d84:	ldr	r3, [r0, #0]
    1d86:	ldr	r3, [r3, #68]	; 0x44
    1d88:	cmp	r3, r2
    1d8a:	bne.w	1fe8 <MTPStorage_SD::OpenIndex()+0x290>
    1d8e:	ldr	r0, [r0, #16]
    1d90:	cbz	r0, 1dbc <MTPStorage_SD::OpenIndex()+0x64>
    1d92:	ldr	r2, [r0, #0]
    1d94:	ldr	r2, [r2, #68]	; 0x44
    1d96:	cmp	r2, r3
    1d98:	bne.w	1ff2 <MTPStorage_SD::OpenIndex()+0x29a>
    1d9c:	ldr	r0, [r0, #16]
    1d9e:	cbz	r0, 1dbc <MTPStorage_SD::OpenIndex()+0x64>
    1da0:	ldr	r3, [r0, #0]
    1da2:	ldr	r3, [r3, #68]	; 0x44
    1da4:	cmp	r3, r2
    1da6:	bne.w	1fe8 <MTPStorage_SD::OpenIndex()+0x290>
    1daa:	ldr	r0, [r0, #16]
    1dac:	cbz	r0, 1dbc <MTPStorage_SD::OpenIndex()+0x64>
    1dae:	ldr	r3, [r0, #0]
    1db0:	ldr	r3, [r3, #68]	; 0x44
    1db2:	blx	r3
    1db4:	cbz	r0, 1dbc <MTPStorage_SD::OpenIndex()+0x64>
    mtp_lock_storage(true);
    index_=sd_open(0,indexFile, FILE_WRITE_BEGIN);
    mtp_lock_storage(false);
  }
    1db6:	add	sp, #28
    1db8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t storage) { return sd_name[storage-1];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    1dbc:	ldr	r1, [r4, #88]	; 0x58
    1dbe:	ldr	r2, [pc, #304]	; (1ef0 <MTPStorage_SD::OpenIndex()+0x198>)
    1dc0:	ldr	r3, [r1, #0]
    1dc2:	add	r0, sp, #4
    1dc4:	ldr	r5, [r3, #0]
    1dc6:	movs	r3, #2
    1dc8:	blx	r5
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1dca:	ldr.w	r3, [r4, #264]	; 0x108
    1dce:	cbz	r3, 1ddc <MTPStorage_SD::OpenIndex()+0x84>
    1dd0:	ldr	r2, [r3, #16]
    1dd2:	subs	r2, #1
    1dd4:	str	r2, [r3, #16]
    1dd6:	cmp	r2, #0
    1dd8:	beq.w	1efc <MTPStorage_SD::OpenIndex()+0x1a4>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    1ddc:	ldr	r3, [sp, #20]
    1dde:	str.w	r3, [r4, #264]	; 0x108
		if (f) f->refcount++;
    1de2:	cmp	r3, #0
    1de4:	beq.n	1db6 <MTPStorage_SD::OpenIndex()+0x5e>
    1de6:	ldr	r2, [r3, #16]
		return *this;
	}
	virtual ~File() {
    1de8:	ldr	r1, [pc, #264]	; (1ef4 <MTPStorage_SD::OpenIndex()+0x19c>)
    1dea:	str	r1, [sp, #4]
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    1dec:	adds	r2, #1
    1dee:	str	r2, [r3, #16]
    1df0:	ldr	r2, [sp, #20]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1df2:	cmp	r2, #0
    1df4:	beq.n	1db6 <MTPStorage_SD::OpenIndex()+0x5e>
    1df6:	ldr	r3, [r2, #16]
    1df8:	subs	r3, #1
    1dfa:	str	r3, [r2, #16]
    1dfc:	cmp	r3, #0
    1dfe:	bne.n	1db6 <MTPStorage_SD::OpenIndex()+0x5e>
    1e00:	ldr	r4, [sp, #20]
    1e02:	cmp	r4, #0
    1e04:	beq.n	1db6 <MTPStorage_SD::OpenIndex()+0x5e>
    1e06:	ldr	r2, [r4, #0]
    1e08:	ldr	r3, [pc, #236]	; (1ef8 <MTPStorage_SD::OpenIndex()+0x1a0>)
    1e0a:	ldr	r2, [r2, #32]
    1e0c:	cmp	r2, r3
    1e0e:	bne.w	1ffc <MTPStorage_SD::OpenIndex()+0x2a4>
    1e12:	ldr	r0, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1e14:	str	r1, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1e16:	cmp	r0, #0
    1e18:	beq.n	1edc <MTPStorage_SD::OpenIndex()+0x184>
    1e1a:	ldr	r2, [r0, #16]
    1e1c:	subs	r2, #1
    1e1e:	str	r2, [r0, #16]
    1e20:	cmp	r2, #0
    1e22:	bne.n	1edc <MTPStorage_SD::OpenIndex()+0x184>
    1e24:	ldr	r5, [r4, #16]
    1e26:	cmp	r5, #0
    1e28:	beq.n	1edc <MTPStorage_SD::OpenIndex()+0x184>
    1e2a:	ldr	r2, [r5, #0]
    1e2c:	ldr	r2, [r2, #32]
    1e2e:	cmp	r2, r3
    1e30:	bne.w	200e <MTPStorage_SD::OpenIndex()+0x2b6>
    1e34:	ldr	r0, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1e36:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1e38:	cmp	r0, #0
    1e3a:	beq.n	1ed4 <MTPStorage_SD::OpenIndex()+0x17c>
    1e3c:	ldr	r2, [r0, #16]
    1e3e:	subs	r2, #1
    1e40:	str	r2, [r0, #16]
    1e42:	cmp	r2, #0
    1e44:	bne.n	1ed4 <MTPStorage_SD::OpenIndex()+0x17c>
    1e46:	ldr	r6, [r5, #16]
    1e48:	cmp	r6, #0
    1e4a:	beq.n	1ed4 <MTPStorage_SD::OpenIndex()+0x17c>
    1e4c:	ldr	r2, [r6, #0]
    1e4e:	ldr	r2, [r2, #32]
    1e50:	cmp	r2, r3
    1e52:	bne.w	201a <MTPStorage_SD::OpenIndex()+0x2c2>
    1e56:	ldr	r0, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1e58:	str	r1, [r6, #0]
    1e5a:	ldr.w	lr, [pc, #152]	; 1ef4 <MTPStorage_SD::OpenIndex()+0x19c>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1e5e:	cmp	r0, #0
    1e60:	beq.n	1ecc <MTPStorage_SD::OpenIndex()+0x174>
    1e62:	ldr	r2, [r0, #16]
    1e64:	subs	r2, #1
    1e66:	str	r2, [r0, #16]
    1e68:	cbnz	r2, 1ecc <MTPStorage_SD::OpenIndex()+0x174>
    1e6a:	ldr	r7, [r6, #16]
    1e6c:	cbz	r7, 1ecc <MTPStorage_SD::OpenIndex()+0x174>
    1e6e:	ldr	r2, [r7, #0]
    1e70:	ldr	r2, [r2, #32]
    1e72:	cmp	r2, r3
    1e74:	bne.w	2026 <MTPStorage_SD::OpenIndex()+0x2ce>
    1e78:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1e7a:	str.w	lr, [r7]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1e7e:	cbz	r0, 1ec4 <MTPStorage_SD::OpenIndex()+0x16c>
    1e80:	ldr	r2, [r0, #16]
    1e82:	subs	r2, #1
    1e84:	str	r2, [r0, #16]
    1e86:	cbnz	r2, 1ec4 <MTPStorage_SD::OpenIndex()+0x16c>
    1e88:	ldr.w	r8, [r7, #16]
    1e8c:	cmp.w	r8, #0
    1e90:	beq.n	1ec4 <MTPStorage_SD::OpenIndex()+0x16c>
    1e92:	ldr.w	r2, [r8]
    1e96:	ldr	r2, [r2, #32]
    1e98:	cmp	r2, r3
    1e9a:	bne.w	2032 <MTPStorage_SD::OpenIndex()+0x2da>
    1e9e:	ldr.w	r2, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1ea2:	str.w	r1, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1ea6:	cbz	r2, 1ebc <MTPStorage_SD::OpenIndex()+0x164>
    1ea8:	ldr	r3, [r2, #16]
    1eaa:	subs	r3, #1
    1eac:	str	r3, [r2, #16]
    1eae:	cbnz	r3, 1ebc <MTPStorage_SD::OpenIndex()+0x164>
    1eb0:	ldr.w	r0, [r8, #16]
    1eb4:	cbz	r0, 1ebc <MTPStorage_SD::OpenIndex()+0x164>
    1eb6:	ldr	r3, [r0, #0]
    1eb8:	ldr	r3, [r3, #32]
    1eba:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    1ebc:	mov	r0, r8
    1ebe:	movs	r1, #20
    1ec0:	bl	101b0 <operator delete(void*, unsigned int)>
    1ec4:	mov	r0, r7
    1ec6:	movs	r1, #20
    1ec8:	bl	101b0 <operator delete(void*, unsigned int)>
    1ecc:	mov	r0, r6
    1ece:	movs	r1, #20
    1ed0:	bl	101b0 <operator delete(void*, unsigned int)>
    1ed4:	mov	r0, r5
    1ed6:	movs	r1, #20
    1ed8:	bl	101b0 <operator delete(void*, unsigned int)>
    1edc:	mov	r0, r4
    1ede:	movs	r1, #20
    1ee0:	bl	101b0 <operator delete(void*, unsigned int)>
    1ee4:	add	sp, #28
    1ee6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1eea:	nop
    1eec:	.word	0x0000050d
    1ef0:	.word	0x00015968
    1ef4:	.word	0x000156d4
    1ef8:	.word	0x00001455
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1efc:	ldr.w	r5, [r4, #264]	; 0x108
    1f00:	cmp	r5, #0
    1f02:	beq.w	1ddc <MTPStorage_SD::OpenIndex()+0x84>
    1f06:	ldr	r2, [r5, #0]
    1f08:	ldr	r3, [pc, #300]	; (2038 <MTPStorage_SD::OpenIndex()+0x2e0>)
    1f0a:	ldr	r2, [r2, #32]
    1f0c:	cmp	r2, r3
    1f0e:	bne.n	2002 <MTPStorage_SD::OpenIndex()+0x2aa>
    1f10:	ldr	r0, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1f12:	ldr	r1, [pc, #296]	; (203c <MTPStorage_SD::OpenIndex()+0x2e4>)
    1f14:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1f16:	cmp	r0, #0
    1f18:	beq.n	1fde <MTPStorage_SD::OpenIndex()+0x286>
    1f1a:	ldr	r2, [r0, #16]
    1f1c:	subs	r2, #1
    1f1e:	str	r2, [r0, #16]
    1f20:	cmp	r2, #0
    1f22:	bne.n	1fde <MTPStorage_SD::OpenIndex()+0x286>
    1f24:	ldr	r6, [r5, #16]
    1f26:	cmp	r6, #0
    1f28:	beq.n	1fde <MTPStorage_SD::OpenIndex()+0x286>
    1f2a:	ldr	r2, [r6, #0]
    1f2c:	ldr	r2, [r2, #32]
    1f2e:	cmp	r2, r3
    1f30:	bne.n	2008 <MTPStorage_SD::OpenIndex()+0x2b0>
    1f32:	ldr	r0, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1f34:	str	r1, [r6, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1f36:	cmp	r0, #0
    1f38:	beq.n	1fd6 <MTPStorage_SD::OpenIndex()+0x27e>
    1f3a:	ldr	r2, [r0, #16]
    1f3c:	subs	r2, #1
    1f3e:	str	r2, [r0, #16]
    1f40:	cmp	r2, #0
    1f42:	bne.n	1fd6 <MTPStorage_SD::OpenIndex()+0x27e>
    1f44:	ldr	r7, [r6, #16]
    1f46:	cmp	r7, #0
    1f48:	beq.n	1fd6 <MTPStorage_SD::OpenIndex()+0x27e>
    1f4a:	ldr	r2, [r7, #0]
    1f4c:	ldr	r2, [r2, #32]
    1f4e:	cmp	r2, r3
    1f50:	bne.n	2014 <MTPStorage_SD::OpenIndex()+0x2bc>
    1f52:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1f54:	str	r1, [r7, #0]
    1f56:	ldr.w	lr, [pc, #228]	; 203c <MTPStorage_SD::OpenIndex()+0x2e4>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1f5a:	cmp	r0, #0
    1f5c:	beq.n	1fce <MTPStorage_SD::OpenIndex()+0x276>
    1f5e:	ldr	r2, [r0, #16]
    1f60:	subs	r2, #1
    1f62:	str	r2, [r0, #16]
    1f64:	cbnz	r2, 1fce <MTPStorage_SD::OpenIndex()+0x276>
    1f66:	ldr.w	r8, [r7, #16]
    1f6a:	cmp.w	r8, #0
    1f6e:	beq.n	1fce <MTPStorage_SD::OpenIndex()+0x276>
    1f70:	ldr.w	r2, [r8]
    1f74:	ldr	r2, [r2, #32]
    1f76:	cmp	r2, r3
    1f78:	bne.n	2020 <MTPStorage_SD::OpenIndex()+0x2c8>
    1f7a:	ldr.w	r0, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1f7e:	str.w	lr, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1f82:	cbz	r0, 1fc6 <MTPStorage_SD::OpenIndex()+0x26e>
    1f84:	ldr	r2, [r0, #16]
    1f86:	subs	r2, #1
    1f88:	str	r2, [r0, #16]
    1f8a:	cbnz	r2, 1fc6 <MTPStorage_SD::OpenIndex()+0x26e>
    1f8c:	ldr.w	r9, [r8, #16]
    1f90:	cmp.w	r9, #0
    1f94:	beq.n	1fc6 <MTPStorage_SD::OpenIndex()+0x26e>
    1f96:	ldr.w	r2, [r9]
    1f9a:	ldr	r2, [r2, #32]
    1f9c:	cmp	r2, r3
    1f9e:	bne.n	202c <MTPStorage_SD::OpenIndex()+0x2d4>
    1fa0:	ldr.w	r2, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1fa4:	str.w	r1, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1fa8:	cbz	r2, 1fbe <MTPStorage_SD::OpenIndex()+0x266>
    1faa:	ldr	r3, [r2, #16]
    1fac:	subs	r3, #1
    1fae:	str	r3, [r2, #16]
    1fb0:	cbnz	r3, 1fbe <MTPStorage_SD::OpenIndex()+0x266>
    1fb2:	ldr.w	r0, [r9, #16]
    1fb6:	cbz	r0, 1fbe <MTPStorage_SD::OpenIndex()+0x266>
    1fb8:	ldr	r3, [r0, #0]
    1fba:	ldr	r3, [r3, #32]
    1fbc:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    1fbe:	mov	r0, r9
    1fc0:	movs	r1, #20
    1fc2:	bl	101b0 <operator delete(void*, unsigned int)>
    1fc6:	mov	r0, r8
    1fc8:	movs	r1, #20
    1fca:	bl	101b0 <operator delete(void*, unsigned int)>
    1fce:	mov	r0, r7
    1fd0:	movs	r1, #20
    1fd2:	bl	101b0 <operator delete(void*, unsigned int)>
    1fd6:	mov	r0, r6
    1fd8:	movs	r1, #20
    1fda:	bl	101b0 <operator delete(void*, unsigned int)>
    1fde:	mov	r0, r5
    1fe0:	movs	r1, #20
    1fe2:	bl	101b0 <operator delete(void*, unsigned int)>
    1fe6:	b.n	1ddc <MTPStorage_SD::OpenIndex()+0x84>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1fe8:	blx	r3
    index_generated = false;
    index_entries_ = 0;
  }

  void MTPStorage_SD::OpenIndex() 
  { if(sd_isOpen(index_)) return; // only once
    1fea:	cmp	r0, #0
    1fec:	bne.w	1db6 <MTPStorage_SD::OpenIndex()+0x5e>
    1ff0:	b.n	1dbc <MTPStorage_SD::OpenIndex()+0x64>
    1ff2:	blx	r2
    1ff4:	cmp	r0, #0
    1ff6:	bne.w	1db6 <MTPStorage_SD::OpenIndex()+0x5e>
    1ffa:	b.n	1dbc <MTPStorage_SD::OpenIndex()+0x64>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1ffc:	mov	r0, r4
    1ffe:	blx	r2
    2000:	b.n	1db6 <MTPStorage_SD::OpenIndex()+0x5e>
    2002:	mov	r0, r5
    2004:	blx	r2
    2006:	b.n	1ddc <MTPStorage_SD::OpenIndex()+0x84>
    2008:	mov	r0, r6
    200a:	blx	r2
    200c:	b.n	1fde <MTPStorage_SD::OpenIndex()+0x286>
    200e:	mov	r0, r5
    2010:	blx	r2
    2012:	b.n	1edc <MTPStorage_SD::OpenIndex()+0x184>
    2014:	mov	r0, r7
    2016:	blx	r2
    2018:	b.n	1fd6 <MTPStorage_SD::OpenIndex()+0x27e>
    201a:	mov	r0, r6
    201c:	blx	r2
    201e:	b.n	1ed4 <MTPStorage_SD::OpenIndex()+0x17c>
    2020:	mov	r0, r8
    2022:	blx	r2
    2024:	b.n	1fce <MTPStorage_SD::OpenIndex()+0x276>
    2026:	mov	r0, r7
    2028:	blx	r2
    202a:	b.n	1ecc <MTPStorage_SD::OpenIndex()+0x174>
    202c:	mov	r0, r9
    202e:	blx	r2
    2030:	b.n	1fc6 <MTPStorage_SD::OpenIndex()+0x26e>
    2032:	mov	r0, r8
    2034:	blx	r2
    2036:	b.n	1ec4 <MTPStorage_SD::OpenIndex()+0x16c>
    2038:	.word	0x00001455
    203c:	.word	0x000156d4

00002040 <MTPStorage_SD::ResetIndex()>:
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    2040:	ldr.w	r3, [r0, #264]	; 0x108
    2044:	cmp	r3, #0
    2046:	beq.n	20b6 <MTPStorage_SD::ResetIndex()+0x76>
    2048:	ldr	r2, [r3, #0]
    204a:	ldr	r1, [pc, #112]	; (20bc <MTPStorage_SD::ResetIndex()+0x7c>)
    204c:	ldr	r2, [r2, #68]	; 0x44
    204e:	cmp	r2, r1
    mtp_lock_storage(true);
    index_=sd_open(0,indexFile, FILE_WRITE_BEGIN);
    mtp_lock_storage(false);
  }

  void MTPStorage_SD::ResetIndex() {
    2050:	push	{r4, lr}
    2052:	mov	r4, r0
    2054:	bne.n	20b0 <MTPStorage_SD::ResetIndex()+0x70>
    2056:	ldr	r0, [r3, #16]
    2058:	cbz	r0, 20ae <MTPStorage_SD::ResetIndex()+0x6e>
    205a:	ldr	r3, [r0, #0]
    205c:	ldr	r3, [r3, #68]	; 0x44
    205e:	cmp	r3, r2
    2060:	bne.n	20b8 <MTPStorage_SD::ResetIndex()+0x78>
    2062:	ldr	r0, [r0, #16]
    2064:	cbz	r0, 20ae <MTPStorage_SD::ResetIndex()+0x6e>
    2066:	ldr	r2, [r0, #0]
    2068:	ldr	r2, [r2, #68]	; 0x44
    206a:	cmp	r2, r3
    206c:	bne.n	20b2 <MTPStorage_SD::ResetIndex()+0x72>
    206e:	ldr	r0, [r0, #16]
    2070:	cbz	r0, 20ae <MTPStorage_SD::ResetIndex()+0x6e>
    2072:	ldr	r3, [r0, #0]
    2074:	ldr	r3, [r3, #68]	; 0x44
    2076:	cmp	r3, r2
    2078:	bne.n	20b8 <MTPStorage_SD::ResetIndex()+0x78>
    207a:	ldr	r0, [r0, #16]
    207c:	cbz	r0, 20ae <MTPStorage_SD::ResetIndex()+0x6e>
    207e:	ldr	r2, [r0, #0]
    2080:	ldr	r2, [r2, #68]	; 0x44
    2082:	cmp	r2, r3
    2084:	bne.n	20b2 <MTPStorage_SD::ResetIndex()+0x72>
    2086:	ldr	r0, [r0, #16]
    2088:	cbz	r0, 20ae <MTPStorage_SD::ResetIndex()+0x6e>
    208a:	ldr	r3, [r0, #0]
    208c:	ldr	r3, [r3, #68]	; 0x44
    208e:	blx	r3
    if(!sd_isOpen(index_)) return;
    2090:	cbz	r0, 20ae <MTPStorage_SD::ResetIndex()+0x6e>
    
    CloseIndex();
    2092:	ldr	r3, [r4, #0]
    2094:	mov	r0, r4
    2096:	ldr	r3, [r3, #64]	; 0x40
    2098:	blx	r3
    OpenIndex();
    209a:	mov	r0, r4
    209c:	bl	1d58 <MTPStorage_SD::OpenIndex()>

    all_scanned_ = false;
    20a0:	movs	r2, #0
    open_file_ = 0xFFFFFFFEUL;
    20a2:	mvn.w	r3, #1
    if(!sd_isOpen(index_)) return;
    
    CloseIndex();
    OpenIndex();

    all_scanned_ = false;
    20a6:	strb.w	r2, [r4, #329]	; 0x149
    open_file_ = 0xFFFFFFFEUL;
    20aa:	str.w	r3, [r4, #320]	; 0x140
    20ae:	pop	{r4, pc}
    20b0:	mov	r0, r3
    20b2:	blx	r2
    20b4:	b.n	2090 <MTPStorage_SD::ResetIndex()+0x50>
    20b6:	bx	lr
    20b8:	blx	r3
    20ba:	b.n	2090 <MTPStorage_SD::ResetIndex()+0x50>
    20bc:	.word	0x0000050d

000020c0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:
  }

  void MTPStorage_SD::WriteIndexRecord(uint32_t i, const Record& r) 
  { OpenIndex();
    20c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    20c4:	mov	r6, r0
    20c6:	sub	sp, #12
    20c8:	mov	r4, r1
    20ca:	mov	r7, r2
    20cc:	bl	1d58 <MTPStorage_SD::OpenIndex()>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    20d0:	ldr.w	r5, [r6, #264]	; 0x108
    mtp_lock_storage(true);
    index_.seek(sizeof(r) * i);
    20d4:	add.w	r4, r4, r4, lsl #2
    20d8:	cmp	r5, #0
    20da:	beq.n	21b0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf0>
    20dc:	ldr	r0, [r5, #0]
    20de:	ldr	r1, [pc, #304]	; (2210 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x150>)
    20e0:	lsls	r2, r4, #4
    20e2:	ldr	r4, [r0, #52]	; 0x34
    20e4:	cmp	r4, r1
    20e6:	mov.w	ip, #0
    20ea:	bne.n	21d6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x116>
    20ec:	ldr	r1, [r5, #16]
    20ee:	cmp	r1, #0
    20f0:	beq.n	21a8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xe8>
    20f2:	ldr	r3, [r1, #0]
    20f4:	ldr.w	r8, [r3, #52]	; 0x34
    20f8:	cmp	r8, r4
    20fa:	bne.n	21e2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x122>
    20fc:	ldr.w	lr, [r1, #16]
    2100:	cmp.w	lr, #0
    2104:	beq.n	21b6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf6>
    2106:	ldr.w	r4, [lr]
    210a:	ldr	r4, [r4, #52]	; 0x34
    210c:	cmp	r4, r8
    210e:	bne.n	21ee <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x12e>
    2110:	ldr.w	lr, [lr, #16]
    2114:	cmp.w	lr, #0
    2118:	beq.n	21b6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf6>
    211a:	ldr.w	r3, [lr]
    211e:	ldr.w	r8, [r3, #52]	; 0x34
    2122:	cmp	r8, r4
    2124:	bne.n	21fa <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x13a>
    2126:	ldr.w	r4, [lr, #16]
    212a:	cmp	r4, #0
    212c:	beq.n	21b6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf6>
    212e:	ldr	r3, [r4, #0]
    2130:	ldr.w	r9, [r3, #52]	; 0x34
    2134:	cmp	r9, r8
    2136:	bne.n	2206 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x146>
    2138:	ldr	r4, [r4, #16]
    213a:	cmp	r4, #0
    213c:	beq.n	21b6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf6>
    213e:	ldr	r1, [r4, #0]
    2140:	str.w	ip, [sp]
    2144:	mov	r3, ip
    2146:	mov	r0, r4
    2148:	ldr	r1, [r1, #52]	; 0x34
    214a:	blx	r1
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    214c:	ldr.w	r5, [r6, #264]	; 0x108
    2150:	cmp	r5, #0
    2152:	beq.n	21b0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf0>
    2154:	ldr	r2, [r5, #0]
    2156:	ldr	r3, [pc, #188]	; (2214 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x154>)
    2158:	ldr	r4, [r2, #44]	; 0x2c
    215a:	cmp	r4, r3
    215c:	bne.n	21c2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x102>
    215e:	ldr	r0, [r5, #16]
    2160:	cbz	r0, 21b0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf0>
    2162:	ldr	r2, [r0, #0]
    2164:	ldr	r4, [r2, #44]	; 0x2c
    2166:	cmp	r4, r3
    2168:	bne.n	21d2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x112>
    216a:	ldr	r0, [r0, #16]
    216c:	cbz	r0, 21b0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf0>
    216e:	ldr	r2, [r0, #0]
    2170:	ldr	r4, [r2, #44]	; 0x2c
    2172:	cmp	r4, r3
    2174:	bne.n	21d2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x112>
    2176:	ldr	r0, [r0, #16]
    2178:	cbz	r0, 21b0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf0>
    217a:	ldr	r2, [r0, #0]
    217c:	ldr	r4, [r2, #44]	; 0x2c
    217e:	cmp	r4, r3
    2180:	bne.n	21d2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x112>
    2182:	ldr	r0, [r0, #16]
    2184:	cbz	r0, 21b0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf0>
    2186:	ldr	r2, [r0, #0]
    2188:	ldr	r4, [r2, #44]	; 0x2c
    218a:	cmp	r4, r3
    218c:	bne.n	21d2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x112>
    218e:	ldr	r0, [r0, #16]
    2190:	cbz	r0, 21b0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf0>
    2192:	ldr	r2, [r0, #0]
    2194:	ldr	r4, [r2, #44]	; 0x2c
    2196:	cmp	r4, r3
    2198:	bne.n	21d2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x112>
    219a:	ldr	r0, [r0, #16]
    219c:	cbz	r0, 21b0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf0>
    219e:	ldr	r3, [r0, #0]
    21a0:	mov	r1, r7
    21a2:	ldr	r3, [r3, #44]	; 0x2c
    21a4:	movs	r2, #80	; 0x50
    21a6:	b.n	21ca <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x10a>
    21a8:	ldr	r4, [r0, #44]	; 0x2c
    21aa:	ldr	r3, [pc, #104]	; (2214 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x154>)
    21ac:	cmp	r4, r3
    21ae:	bne.n	21c2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x102>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }
    21b0:	add	sp, #12
    21b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    21b6:	ldr	r4, [r0, #44]	; 0x2c
    21b8:	ldr	r3, [pc, #88]	; (2214 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x154>)
    21ba:	cmp	r4, r3
    21bc:	bne.n	21c2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x102>
    21be:	mov	r0, r1
    21c0:	b.n	2162 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xa2>
    21c2:	mov	r1, r7
    21c4:	mov	r0, r5
    21c6:	movs	r2, #80	; 0x50
    21c8:	mov	r3, r4
    21ca:	add	sp, #12
    21cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    21d0:	bx	r3
    21d2:	mov	r1, r7
    21d4:	b.n	21c6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x106>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    21d6:	str.w	ip, [sp]
    21da:	mov	r3, ip
    21dc:	mov	r0, r5
    21de:	blx	r4
    21e0:	b.n	214c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    21e2:	str.w	ip, [sp]
    21e6:	mov	r3, ip
    21e8:	mov	r0, r1
    21ea:	blx	r8
    21ec:	b.n	214c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    21ee:	str.w	ip, [sp]
    21f2:	mov	r3, ip
    21f4:	mov	r0, lr
    21f6:	blx	r4
    21f8:	b.n	214c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    21fa:	str.w	ip, [sp]
    21fe:	mov	r3, ip
    2200:	mov	r0, lr
    2202:	blx	r8
    2204:	b.n	214c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    2206:	movs	r3, #0
    2208:	mov	r0, r4
    220a:	str	r3, [sp, #0]
    220c:	blx	r9
    220e:	b.n	214c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    2210:	.word	0x000004c9
    2214:	.word	0x00000489

00002218 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.8] [clone .constprop.13]>:
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t storage)
    2218:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    221c:	mov	r5, r0
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) { return sdx[store]->remove(filename);  }
    221e:	ldr	r0, [r0, #88]	; 0x58
    2220:	ldr	r1, [pc, #96]	; (2284 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.8] [clone .constprop.13]+0x6c>)
    2222:	ldr	r3, [r0, #0]
  { if (index_generated) return; 
    index_generated = true;
    2224:	movs	r7, #1
    2226:	ldr	r3, [r3, #16]
    2228:	strb.w	r7, [r5, #328]	; 0x148
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t storage)
    222c:	sub	sp, #80	; 0x50
    222e:	blx	r3
    2230:	ldr	r3, [r5, #4]
    // first remove old index file
    mtp_lock_storage(true);
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    num_storage = sd_getFSCount();
    2232:	str.w	r3, [r5, #308]	; 0x134

    index_entries_ = 0;
    2236:	movs	r1, #0
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    2238:	cmp	r3, r1
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    num_storage = sd_getFSCount();

    index_entries_ = 0;
    223a:	str.w	r1, [r5, #324]	; 0x144
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    223e:	ble.n	227c <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.8] [clone .constprop.13]+0x64>
    2240:	mov	r4, r1
    {
      r.store = ii; // store is typically (storage-1) //store 0...6; storage 1...7
      r.parent = ii;
      r.sibling = 0;
    2242:	mov	r6, r1
      r.child = 0;
      r.isdir = true;
      r.scanned = false;
      strcpy(r.name, "/");
    2244:	mov.w	r8, #47	; 0x2f
    2248:	b.n	224e <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.8] [clone .constprop.13]+0x36>
    224a:	ldr.w	r1, [r5, #324]	; 0x144

    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    {
      r.store = ii; // store is typically (storage-1) //store 0...6; storage 1...7
    224e:	strh.w	r4, [sp, #14]
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    2252:	adds	r3, r1, #1
    2254:	str.w	r3, [r5, #324]	; 0x144
    WriteIndexRecord(new_record, r);
    2258:	mov	r2, sp
    225a:	mov	r0, r5
    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    {
      r.store = ii; // store is typically (storage-1) //store 0...6; storage 1...7
      r.parent = ii;
    225c:	str	r4, [sp, #0]
      r.sibling = 0;
    225e:	str	r6, [sp, #8]
      r.child = 0;
    2260:	str	r6, [sp, #4]
      r.isdir = true;
    2262:	strb.w	r7, [sp, #12]
      r.scanned = false;
    2266:	strb.w	r6, [sp, #13]
      strcpy(r.name, "/");
    226a:	strh.w	r8, [sp, #16]
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    226e:	bl	20c0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

    num_storage = sd_getFSCount();

    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    2272:	ldr.w	r3, [r5, #308]	; 0x134
    2276:	adds	r4, #1
    2278:	cmp	r3, r4
    227a:	bgt.n	224a <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.8] [clone .constprop.13]+0x32>
      r.isdir = true;
      r.scanned = false;
      strcpy(r.name, "/");
      AppendIndexRecord(r);
    }
  }
    227c:	add	sp, #80	; 0x50
    227e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2282:	nop
    2284:	.word	0x00015968

00002288 <MTPStorage_SD::ReadIndexRecord(unsigned long)>:
    return new_record;
  }

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    2288:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    228c:	mov	r5, r1
    228e:	mov	r4, r2
    2290:	sub	sp, #8
    Record ret;
    memset(&ret, 0, sizeof(ret));
    2292:	movs	r1, #0
    2294:	movs	r2, #80	; 0x50
    return new_record;
  }

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    2296:	mov	r6, r0
    Record ret;
    memset(&ret, 0, sizeof(ret));
    2298:	bl	117bc <memset>
    if (i > index_entries_) 
    229c:	ldr.w	r3, [r5, #324]	; 0x144
    22a0:	cmp	r3, r4
    22a2:	bcc.w	241a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x192>
    { memset(&ret, 0, sizeof(ret));
      return ret;
    }
    OpenIndex();
    22a6:	mov	r0, r5
    22a8:	bl	1d58 <MTPStorage_SD::OpenIndex()>
    22ac:	ldr.w	r0, [r5, #264]	; 0x108
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
    22b0:	add.w	r4, r4, r4, lsl #2
    22b4:	lsls	r2, r4, #4
    22b6:	mov.w	ip, #0
    22ba:	cmp	r0, #0
    22bc:	beq.w	2412 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18a>
    22c0:	ldr	r7, [r0, #0]
    22c2:	ldr	r4, [pc, #452]	; (2488 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x200>)
    22c4:	ldr	r1, [r7, #52]	; 0x34
    22c6:	cmp	r1, r4
    22c8:	bne.w	2442 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ba>
    22cc:	ldr	r1, [r0, #16]
    22ce:	cmp	r1, #0
    22d0:	beq.w	242c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1a4>
    22d4:	ldr	r3, [r1, #0]
    22d6:	ldr.w	r8, [r3, #52]	; 0x34
    22da:	cmp	r8, r4
    22dc:	bne.w	2470 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1e8>
    22e0:	ldr.w	lr, [r1, #16]
    22e4:	cmp.w	lr, #0
    22e8:	beq.n	239c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x114>
    22ea:	ldr.w	r3, [lr]
    22ee:	ldr.w	r8, [r3, #52]	; 0x34
    22f2:	cmp	r8, r4
    22f4:	bne.w	2464 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1dc>
    22f8:	ldr.w	lr, [lr, #16]
    22fc:	cmp.w	lr, #0
    2300:	beq.n	239c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x114>
    2302:	ldr.w	r3, [lr]
    2306:	ldr.w	r8, [r3, #52]	; 0x34
    230a:	cmp	r8, r4
    230c:	bne.w	2464 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1dc>
    2310:	ldr.w	lr, [lr, #16]
    2314:	cmp.w	lr, #0
    2318:	beq.n	239c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x114>
    231a:	ldr.w	r3, [lr]
    231e:	ldr.w	r8, [r3, #52]	; 0x34
    2322:	cmp	r8, r4
    2324:	bne.w	247c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1f4>
    2328:	ldr.w	lr, [lr, #16]
    232c:	cmp.w	lr, #0
    2330:	beq.n	239c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x114>
    2332:	ldr.w	r3, [lr]
    2336:	ldr.w	r8, [r3, #52]	; 0x34
    233a:	cmp	r8, r4
    233c:	bne.w	247c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1f4>
    2340:	ldr.w	lr, [lr, #16]
    2344:	cmp.w	lr, #0
    2348:	beq.n	239c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x114>
    234a:	ldr.w	r3, [lr]
    234e:	ldr.w	r8, [r3, #52]	; 0x34
    2352:	cmp	r8, r4
    2354:	bne.w	247c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1f4>
    2358:	ldr.w	lr, [lr, #16]
    235c:	cmp.w	lr, #0
    2360:	beq.n	239c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x114>
    2362:	ldr.w	r3, [lr]
    2366:	ldr.w	r8, [r3, #52]	; 0x34
    236a:	cmp	r8, r4
    236c:	bne.w	247c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1f4>
    2370:	ldr.w	lr, [lr, #16]
    2374:	cmp.w	lr, #0
    2378:	beq.n	239c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x114>
    237a:	ldr.w	r3, [lr]
    237e:	ldr.w	r8, [r3, #52]	; 0x34
    2382:	cmp	r8, r4
    2384:	bne.n	247c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1f4>
    2386:	ldr.w	r4, [lr, #16]
    238a:	cbz	r4, 239c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x114>
    238c:	ldr	r1, [r4, #0]
    238e:	str.w	ip, [sp]
    2392:	mov	r3, ip
    2394:	mov	r0, r4
    2396:	ldr	r1, [r1, #52]	; 0x34
    2398:	blx	r1
    239a:	b.n	244a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1c2>
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    239c:	ldr	r4, [r7, #40]	; 0x28
    239e:	ldr	r3, [pc, #236]	; (248c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x204>)
    23a0:	cmp	r4, r3
    23a2:	bne.n	2434 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ac>
    23a4:	mov	r0, r1
    23a6:	ldr	r2, [r0, #0]
    23a8:	ldr	r4, [r2, #40]	; 0x28
    23aa:	cmp	r4, r3
    23ac:	bne.n	2434 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ac>
    23ae:	ldr	r0, [r0, #16]
    23b0:	cmp	r0, #0
    23b2:	beq.n	2412 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18a>
    23b4:	ldr	r2, [r0, #0]
    23b6:	ldr	r4, [r2, #40]	; 0x28
    23b8:	cmp	r4, r3
    23ba:	bne.n	2434 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ac>
    23bc:	ldr	r0, [r0, #16]
    23be:	cbz	r0, 2412 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18a>
    23c0:	ldr	r2, [r0, #0]
    23c2:	ldr	r4, [r2, #40]	; 0x28
    23c4:	cmp	r4, r3
    23c6:	bne.n	2434 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ac>
    23c8:	ldr	r0, [r0, #16]
    23ca:	cbz	r0, 2412 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18a>
    23cc:	ldr	r2, [r0, #0]
    23ce:	ldr	r4, [r2, #40]	; 0x28
    23d0:	cmp	r4, r3
    23d2:	bne.n	2434 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ac>
    23d4:	ldr	r0, [r0, #16]
    23d6:	cbz	r0, 2412 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18a>
    23d8:	ldr	r2, [r0, #0]
    23da:	ldr	r4, [r2, #40]	; 0x28
    23dc:	cmp	r4, r3
    23de:	bne.n	2434 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ac>
    23e0:	ldr	r0, [r0, #16]
    23e2:	cbz	r0, 2412 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18a>
    23e4:	ldr	r2, [r0, #0]
    23e6:	ldr	r4, [r2, #40]	; 0x28
    23e8:	cmp	r4, r3
    23ea:	bne.n	2434 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ac>
    23ec:	ldr	r0, [r0, #16]
    23ee:	cbz	r0, 2412 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18a>
    23f0:	ldr	r2, [r0, #0]
    23f2:	ldr	r4, [r2, #40]	; 0x28
    23f4:	cmp	r4, r3
    23f6:	bne.n	2434 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ac>
    23f8:	ldr	r0, [r0, #16]
    23fa:	cbz	r0, 2412 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18a>
    23fc:	ldr	r2, [r0, #0]
    23fe:	ldr	r4, [r2, #40]	; 0x28
    2400:	cmp	r4, r3
    2402:	bne.n	2434 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ac>
    2404:	ldr	r0, [r0, #16]
    2406:	cbz	r0, 2412 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18a>
    2408:	ldr	r3, [r0, #0]
    240a:	movs	r2, #80	; 0x50
    240c:	ldr	r3, [r3, #40]	; 0x28
    240e:	mov	r1, r6
    2410:	blx	r3
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);
    return ret;
  }
    2412:	mov	r0, r6
    2414:	add	sp, #8
    2416:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    Record ret;
    memset(&ret, 0, sizeof(ret));
    if (i > index_entries_) 
    { memset(&ret, 0, sizeof(ret));
    241a:	movs	r2, #80	; 0x50
    241c:	movs	r1, #0
    241e:	mov	r0, r6
    2420:	bl	117bc <memset>
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);
    return ret;
  }
    2424:	mov	r0, r6
    2426:	add	sp, #8
    2428:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    242c:	ldr	r4, [r7, #40]	; 0x28
    242e:	ldr	r3, [pc, #92]	; (248c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x204>)
    2430:	cmp	r4, r3
    2432:	beq.n	2412 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18a>
    2434:	movs	r2, #80	; 0x50
    2436:	mov	r1, r6
    2438:	blx	r4
    243a:	mov	r0, r6
    243c:	add	sp, #8
    243e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    2442:	str.w	ip, [sp]
    2446:	mov	r3, ip
    2448:	blx	r1
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    244a:	ldr.w	r0, [r5, #264]	; 0x108
    244e:	cmp	r0, #0
    2450:	beq.n	2412 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18a>
    2452:	ldr	r2, [r0, #0]
    2454:	ldr	r3, [pc, #52]	; (248c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x204>)
    2456:	ldr	r4, [r2, #40]	; 0x28
    2458:	cmp	r4, r3
    245a:	bne.n	2434 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ac>
    245c:	ldr	r0, [r0, #16]
    245e:	cmp	r0, #0
    2460:	bne.n	23a6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x11e>
    2462:	b.n	2412 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18a>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    2464:	str.w	ip, [sp]
    2468:	mov	r3, ip
    246a:	mov	r0, lr
    246c:	blx	r8
    246e:	b.n	244a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1c2>
    2470:	str.w	ip, [sp]
    2474:	mov	r3, ip
    2476:	mov	r0, r1
    2478:	blx	r8
    247a:	b.n	244a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1c2>
    247c:	movs	r3, #0
    247e:	mov	r0, lr
    2480:	str	r3, [sp, #0]
    2482:	blx	r8
    2484:	b.n	244a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1c2>
    2486:	nop
    2488:	.word	0x000004c9
    248c:	.word	0x0000047d

00002490 <MTPStorage_SD::GetNextObjectHandle(unsigned long)>:
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  storage)
  {
    2490:	push	{r4, r5, lr}
    while (true) 
    { if (next_ == 0) return 0;
    2492:	ldr.w	r5, [r0, #332]	; 0x14c
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  storage)
  {
    2496:	sub	sp, #84	; 0x54
    2498:	mov	r4, r0
    while (true) 
    { if (next_ == 0) return 0;
    249a:	cbnz	r5, 24b0 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x20>
    249c:	b.n	24e6 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x56>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
    249e:	ldr	r3, [sp, #8]
    24a0:	str.w	r3, [r4, #332]	; 0x14c
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    24a4:	ldrb.w	r3, [sp, #16]
    24a8:	cbnz	r3, 24e0 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x50>
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  storage)
  {
    while (true) 
    { if (next_ == 0) return 0;
    24aa:	ldr.w	r5, [r4, #332]	; 0x14c
    24ae:	cbz	r5, 24e6 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x56>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
    24b0:	mov	r2, r5
    24b2:	mov	r1, r4
    24b4:	mov	r0, sp
    24b6:	bl	2288 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    24ba:	ldrb.w	r2, [r4, #336]	; 0x150
    24be:	cmp	r2, #0
    24c0:	bne.n	249e <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0xe>
      { next_ = r.sibling;
      } 
      else 
      { next_++;
    24c2:	ldr.w	r3, [r4, #332]	; 0x14c
        if (next_ >= index_entries_) next_ = 0;
    24c6:	ldr.w	r1, [r4, #324]	; 0x144
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
      } 
      else 
      { next_++;
    24ca:	adds	r3, #1
    24cc:	str.w	r3, [r4, #332]	; 0x14c
        if (next_ >= index_entries_) next_ = 0;
    24d0:	cmp	r3, r1
      }
      if (r.name[0]) return ret;
    24d2:	ldrb.w	r3, [sp, #16]
      if (follow_sibling_) 
      { next_ = r.sibling;
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
    24d6:	it	cs
    24d8:	strcs.w	r2, [r4, #332]	; 0x14c
      }
      if (r.name[0]) return ret;
    24dc:	cmp	r3, #0
    24de:	beq.n	24aa <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x1a>
    }
  }
    24e0:	mov	r0, r5
    24e2:	add	sp, #84	; 0x54
    24e4:	pop	{r4, r5, pc}
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  storage)
  {
    while (true) 
    { if (next_ == 0) return 0;
    24e6:	movs	r5, #0
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    }
  }
    24e8:	mov	r0, r5
    24ea:	add	sp, #84	; 0x54
    24ec:	pop	{r4, r5, pc}
    24ee:	nop

000024f0 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)>:

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    24f0:	push	{r4, r5, r6, r7, lr}
    24f2:	sub	sp, #84	; 0x54
    24f4:	mov	r7, r2
    Record r = ReadIndexRecord(handle);
    24f6:	mov	r2, r1
    24f8:	mov	r1, r0
    24fa:	mov	r0, sp
      if (r.name[0]) return ret;
    }
  }

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    24fc:	mov	r5, r3
    24fe:	ldr	r6, [sp, #104]	; 0x68
    2500:	ldr	r4, [sp, #108]	; 0x6c
    Record r = ReadIndexRecord(handle);
    2502:	bl	2288 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    2506:	mov	r0, r7
    2508:	add	r1, sp, #16
    250a:	bl	120fc <strcpy>
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    250e:	ldrb.w	r3, [sp, #12]

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    2512:	ldr	r2, [sp, #0]
    2514:	str	r2, [r6, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    2516:	cbnz	r3, 2526 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x36>
    2518:	ldr	r3, [sp, #4]
    *store = r.store;
    251a:	ldrh.w	r2, [sp, #14]
  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    251e:	str	r3, [r5, #0]
    *store = r.store;
    2520:	strh	r2, [r4, #0]
  }
    2522:	add	sp, #84	; 0x54
    2524:	pop	{r4, r5, r6, r7, pc}
  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    2526:	mov.w	r3, #4294967295
    252a:	b.n	251a <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x2a>

0000252c <MTPStorage_SD::GetSize(unsigned long)>:
    *store = r.store;
  }

  uint32_t MTPStorage_SD::GetSize(uint32_t handle) 
  {
    252c:	push	{lr}
    252e:	sub	sp, #84	; 0x54
    return ReadIndexRecord(handle).child;
    2530:	mov	r2, r1
    2532:	mov	r1, r0
    2534:	mov	r0, sp
    2536:	bl	2288 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    253a:	ldr	r0, [sp, #4]
    253c:	add	sp, #84	; 0x54
    253e:	ldr.w	pc, [sp], #4
    2542:	nop

00002544 <MTPStorage_SD::close()>:
      file_.write(data,bytes);
      mtp_lock_storage(false);
  }

  void MTPStorage_SD::close() 
  {
    2544:	push	{r4, r5, r6, lr}
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    2546:	ldr.w	r3, [r0, #284]	; 0x11c
    254a:	sub	sp, #80	; 0x50
    254c:	mov	r4, r0
    254e:	cmp	r3, #0
    2550:	beq.n	25ec <MTPStorage_SD::close()+0xa8>
    2552:	ldr	r5, [r3, #0]
    2554:	ldr	r1, [pc, #388]	; (26dc <MTPStorage_SD::close()+0x198>)
    2556:	ldr	r2, [r5, #60]	; 0x3c
    2558:	cmp	r2, r1
    255a:	bne.w	26cc <MTPStorage_SD::close()+0x188>
    255e:	ldr	r2, [r3, #16]
    2560:	cmp	r2, #0
    2562:	beq.w	26bc <MTPStorage_SD::close()+0x178>
    2566:	ldr	r0, [r2, #0]
    2568:	ldr	r6, [r0, #60]	; 0x3c
    256a:	cmp	r6, r1
    256c:	bne.n	2614 <MTPStorage_SD::close()+0xd0>
    256e:	ldr	r0, [r2, #16]
    2570:	cmp	r0, #0
    2572:	beq.n	25de <MTPStorage_SD::close()+0x9a>
    2574:	ldr	r6, [r0, #0]
    2576:	ldr	r6, [r6, #60]	; 0x3c
    2578:	cmp	r6, r1
    257a:	bne.n	2616 <MTPStorage_SD::close()+0xd2>
    257c:	ldr	r0, [r0, #16]
    257e:	cmp	r0, #0
    2580:	beq.n	25de <MTPStorage_SD::close()+0x9a>
    2582:	ldr	r6, [r0, #0]
    2584:	ldr	r6, [r6, #60]	; 0x3c
    2586:	cmp	r6, r1
    2588:	bne.n	2616 <MTPStorage_SD::close()+0xd2>
    258a:	ldr	r0, [r0, #16]
    258c:	cbz	r0, 25de <MTPStorage_SD::close()+0x9a>
    258e:	ldr	r6, [r0, #0]
    2590:	ldr	r6, [r6, #60]	; 0x3c
    2592:	cmp	r6, r1
    2594:	bne.n	2616 <MTPStorage_SD::close()+0xd2>
    2596:	ldr	r0, [r0, #16]
    2598:	cbz	r0, 25de <MTPStorage_SD::close()+0x9a>
    259a:	ldr	r6, [r0, #0]
    259c:	ldr	r6, [r6, #60]	; 0x3c
    259e:	cmp	r6, r1
    25a0:	bne.n	2616 <MTPStorage_SD::close()+0xd2>
    25a2:	ldr	r0, [r0, #16]
    25a4:	cbz	r0, 25de <MTPStorage_SD::close()+0x9a>
    25a6:	ldr	r6, [r0, #0]
    25a8:	ldr	r6, [r6, #60]	; 0x3c
    25aa:	cmp	r6, r1
    25ac:	bne.n	2616 <MTPStorage_SD::close()+0xd2>
    25ae:	ldr	r0, [r0, #16]
    25b0:	cbz	r0, 25de <MTPStorage_SD::close()+0x9a>
    25b2:	ldr	r6, [r0, #0]
    25b4:	ldr	r6, [r6, #60]	; 0x3c
    25b6:	cmp	r6, r1
    25b8:	bne.n	2616 <MTPStorage_SD::close()+0xd2>
    25ba:	ldr	r0, [r0, #16]
    25bc:	cbz	r0, 25de <MTPStorage_SD::close()+0x9a>
    25be:	ldr	r6, [r0, #0]
    25c0:	ldr	r6, [r6, #60]	; 0x3c
    25c2:	cmp	r6, r1
    25c4:	bne.n	2616 <MTPStorage_SD::close()+0xd2>
    25c6:	ldr	r0, [r0, #16]
    25c8:	cbz	r0, 25de <MTPStorage_SD::close()+0x9a>
    25ca:	ldr	r6, [r0, #0]
    25cc:	ldr	r6, [r6, #60]	; 0x3c
    25ce:	cmp	r6, r1
    25d0:	bne.n	2616 <MTPStorage_SD::close()+0xd2>
    25d2:	ldr	r0, [r0, #16]
    25d4:	cbz	r0, 25de <MTPStorage_SD::close()+0x9a>
    25d6:	ldr	r3, [r0, #0]
    25d8:	ldr	r3, [r3, #60]	; 0x3c
    25da:	blx	r3
    25dc:	b.n	2618 <MTPStorage_SD::close()+0xd4>
	}
	virtual void close() {
		if (f) f->close();
    25de:	ldr	r6, [r5, #64]	; 0x40
    25e0:	ldr	r1, [pc, #252]	; (26e0 <MTPStorage_SD::close()+0x19c>)
    25e2:	cmp	r6, r1
    25e4:	bne.n	26d2 <MTPStorage_SD::close()+0x18e>
    25e6:	mov	r0, r2
    25e8:	movs	r5, #0
    25ea:	b.n	2632 <MTPStorage_SD::close()+0xee>
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    25ec:	mov	r5, r3
    mtp_lock_storage(true);
    uint64_t size = file_.size();
    file_.close();
    mtp_lock_storage(false);
    Record r = ReadIndexRecord(open_file_);
    25ee:	mov	r0, sp
    25f0:	ldr.w	r2, [r4, #320]	; 0x140
    25f4:	mov	r1, r4
    25f6:	bl	2288 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    r.child = size;
    WriteIndexRecord(open_file_, r);
    25fa:	mov	r2, sp
    25fc:	ldr.w	r1, [r4, #320]	; 0x140
    mtp_lock_storage(true);
    uint64_t size = file_.size();
    file_.close();
    mtp_lock_storage(false);
    Record r = ReadIndexRecord(open_file_);
    r.child = size;
    2600:	str	r5, [sp, #4]
    WriteIndexRecord(open_file_, r);
    2602:	mov	r0, r4
    2604:	bl	20c0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    2608:	mvn.w	r3, #1
    260c:	str.w	r3, [r4, #320]	; 0x140
  }
    2610:	add	sp, #80	; 0x50
    2612:	pop	{r4, r5, r6, pc}
    2614:	mov	r0, r2
    2616:	blx	r6
	}
	virtual void close() {
		if (f) f->close();
    2618:	ldr.w	r3, [r4, #284]	; 0x11c
    261c:	cmp	r3, #0
    261e:	beq.n	26d6 <MTPStorage_SD::close()+0x192>
    2620:	ldr	r6, [r3, #0]
    2622:	ldr	r1, [pc, #188]	; (26e0 <MTPStorage_SD::close()+0x19c>)
    2624:	ldr	r6, [r6, #64]	; 0x40
    2626:	cmp	r6, r1
    2628:	mov	r5, r0
    262a:	bne.n	26c6 <MTPStorage_SD::close()+0x182>
    262c:	ldr	r0, [r3, #16]
    262e:	cmp	r0, #0
    2630:	beq.n	25ee <MTPStorage_SD::close()+0xaa>
    2632:	ldr	r3, [r0, #0]
    2634:	ldr	r3, [r3, #64]	; 0x40
    2636:	cmp	r3, r1
    2638:	bne.n	26b8 <MTPStorage_SD::close()+0x174>
    263a:	ldr	r0, [r0, #16]
    263c:	cmp	r0, #0
    263e:	beq.n	25ee <MTPStorage_SD::close()+0xaa>
    2640:	ldr	r3, [r0, #0]
    2642:	ldr	r3, [r3, #64]	; 0x40
    2644:	cmp	r3, r1
    2646:	bne.n	26b8 <MTPStorage_SD::close()+0x174>
    2648:	ldr	r0, [r0, #16]
    264a:	cmp	r0, #0
    264c:	beq.n	25ee <MTPStorage_SD::close()+0xaa>
    264e:	ldr	r3, [r0, #0]
    2650:	ldr	r3, [r3, #64]	; 0x40
    2652:	cmp	r3, r1
    2654:	bne.n	26b8 <MTPStorage_SD::close()+0x174>
    2656:	ldr	r0, [r0, #16]
    2658:	cmp	r0, #0
    265a:	beq.n	25ee <MTPStorage_SD::close()+0xaa>
    265c:	ldr	r3, [r0, #0]
    265e:	ldr	r3, [r3, #64]	; 0x40
    2660:	cmp	r3, r1
    2662:	bne.n	26b8 <MTPStorage_SD::close()+0x174>
    2664:	ldr	r0, [r0, #16]
    2666:	cmp	r0, #0
    2668:	beq.n	25ee <MTPStorage_SD::close()+0xaa>
    266a:	ldr	r3, [r0, #0]
    266c:	ldr	r3, [r3, #64]	; 0x40
    266e:	cmp	r3, r1
    2670:	bne.n	26b8 <MTPStorage_SD::close()+0x174>
    2672:	ldr	r0, [r0, #16]
    2674:	cmp	r0, #0
    2676:	beq.n	25ee <MTPStorage_SD::close()+0xaa>
    2678:	ldr	r3, [r0, #0]
    267a:	ldr	r3, [r3, #64]	; 0x40
    267c:	cmp	r3, r1
    267e:	bne.n	26b8 <MTPStorage_SD::close()+0x174>
    2680:	ldr	r0, [r0, #16]
    2682:	cmp	r0, #0
    2684:	beq.n	25ee <MTPStorage_SD::close()+0xaa>
    2686:	ldr	r3, [r0, #0]
    2688:	ldr	r3, [r3, #64]	; 0x40
    268a:	cmp	r3, r1
    268c:	bne.n	26b8 <MTPStorage_SD::close()+0x174>
    268e:	ldr	r0, [r0, #16]
    2690:	cmp	r0, #0
    2692:	beq.n	25ee <MTPStorage_SD::close()+0xaa>
    2694:	ldr	r3, [r0, #0]
    2696:	ldr	r3, [r3, #64]	; 0x40
    2698:	cmp	r3, r1
    269a:	bne.n	26b8 <MTPStorage_SD::close()+0x174>
    269c:	ldr	r0, [r0, #16]
    269e:	cmp	r0, #0
    26a0:	beq.n	25ee <MTPStorage_SD::close()+0xaa>
    26a2:	ldr	r3, [r0, #0]
    26a4:	ldr	r3, [r3, #64]	; 0x40
    26a6:	cmp	r3, r1
    26a8:	bne.n	26b8 <MTPStorage_SD::close()+0x174>
    26aa:	ldr	r0, [r0, #16]
    26ac:	cmp	r0, #0
    26ae:	beq.n	25ee <MTPStorage_SD::close()+0xaa>
    26b0:	ldr	r3, [r0, #0]
    26b2:	ldr	r3, [r3, #64]	; 0x40
    26b4:	blx	r3
    26b6:	b.n	25ee <MTPStorage_SD::close()+0xaa>
    26b8:	blx	r3
    26ba:	b.n	25ee <MTPStorage_SD::close()+0xaa>
    26bc:	ldr	r6, [r5, #64]	; 0x40
    26be:	ldr	r1, [pc, #32]	; (26e0 <MTPStorage_SD::close()+0x19c>)
    26c0:	cmp	r6, r1
    26c2:	mov	r5, r2
    26c4:	beq.n	25ee <MTPStorage_SD::close()+0xaa>
    26c6:	mov	r0, r3
    26c8:	blx	r6
    26ca:	b.n	25ee <MTPStorage_SD::close()+0xaa>
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    26cc:	mov	r0, r3
    26ce:	blx	r2
    26d0:	b.n	2618 <MTPStorage_SD::close()+0xd4>
	}
	virtual void close() {
		if (f) f->close();
    26d2:	movs	r5, #0
    26d4:	b.n	26c6 <MTPStorage_SD::close()+0x182>
    26d6:	mov	r5, r0
    26d8:	b.n	25ee <MTPStorage_SD::close()+0xaa>
    26da:	nop
    26dc:	.word	0x000004f1
    26e0:	.word	0x00000501

000026e4 <MTPStorage_SD::ConstructFilename(int, char*, int)>:
    mtp_lock_storage(false);
    return ret;
  }

  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    26e4:	push	{r4, r5, r6, r7, lr}
    26e6:	mov	r4, r1
    26e8:	sub	sp, #84	; 0x54
    Record tmp = ReadIndexRecord(i);
    26ea:	mov	r1, r0
    mtp_lock_storage(false);
    return ret;
  }

  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    26ec:	mov	r6, r0
    26ee:	mov	r5, r2
    Record tmp = ReadIndexRecord(i);
    26f0:	mov	r0, sp
    26f2:	mov	r2, r4
    mtp_lock_storage(false);
    return ret;
  }

  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    26f4:	mov	r7, r3
    Record tmp = ReadIndexRecord(i);
    26f6:	bl	2288 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      
    if (tmp.parent==(unsigned)i) 
    26fa:	ldr	r1, [sp, #0]
    26fc:	cmp	r4, r1
    26fe:	beq.n	2744 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x60>
    { strcpy(out, "/");
      return tmp.store;
    }
    else 
    { ConstructFilename(tmp.parent, out, len);
    2700:	mov	r3, r7
    2702:	mov	r2, r5
    2704:	mov	r0, r6
    2706:	bl	26e4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strcat(out, "/");
    270a:	mov	r0, r5
    270c:	bl	12240 <strlen>
    2710:	adds	r3, r5, r0
    2712:	mov	r4, r0
    2714:	ldrb.w	r3, [r3, #-1]
    2718:	cmp	r3, #47	; 0x2f
    271a:	beq.n	2724 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x40>
    271c:	ldr	r3, [pc, #52]	; (2754 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x70>)
    271e:	ldrh	r3, [r3, #0]
    2720:	strh	r3, [r5, r0]
    2722:	adds	r4, #1
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
    2724:	add	r0, sp, #16
    2726:	bl	12240 <strlen>
    272a:	add	r0, r4
    272c:	adds	r0, #1
    272e:	cmp	r0, r7
    2730:	bcc.n	273a <MTPStorage_SD::ConstructFilename(int, char*, int)+0x56>
      return tmp.store;
    2732:	ldrh.w	r0, [sp, #14]
    }
  }
    2736:	add	sp, #84	; 0x54
    2738:	pop	{r4, r5, r6, r7, pc}
      return tmp.store;
    }
    else 
    { ConstructFilename(tmp.parent, out, len);
      if (out[strlen(out)-1] != '/') strcat(out, "/");
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
    273a:	add	r1, sp, #16
    273c:	mov	r0, r5
    273e:	bl	11cfc <strcat>
    2742:	b.n	2732 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x4e>
  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    Record tmp = ReadIndexRecord(i);
      
    if (tmp.parent==(unsigned)i) 
    { strcpy(out, "/");
    2744:	ldr	r3, [pc, #12]	; (2754 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x70>)
      return tmp.store;
    2746:	ldrh.w	r0, [sp, #14]
  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    Record tmp = ReadIndexRecord(i);
      
    if (tmp.parent==(unsigned)i) 
    { strcpy(out, "/");
    274a:	ldrh	r3, [r3, #0]
    274c:	strh	r3, [r5, #0]
    { ConstructFilename(tmp.parent, out, len);
      if (out[strlen(out)-1] != '/') strcat(out, "/");
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
      return tmp.store;
    }
  }
    274e:	add	sp, #84	; 0x54
    2750:	pop	{r4, r5, r6, r7, pc}
    2752:	nop
    2754:	.word	0x00015978

00002758 <MTPStorage_SD::rename(unsigned long, char const*)>:
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  bool MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[256];
    2758:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    275c:	sub.w	sp, sp, #660	; 0x294
    char newName[256];
    char temp[64];

    uint16_t store = ConstructFilename(handle, oldName, 256);
    2760:	mov.w	r3, #256	; 0x100
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  bool MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[256];
    2764:	mov	r9, r2
    char newName[256];
    char temp[64];

    uint16_t store = ConstructFilename(handle, oldName, 256);
    2766:	add	r2, sp, #144	; 0x90
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  bool MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[256];
    2768:	mov	r5, r1
    276a:	mov	r4, r0
    char newName[256];
    char temp[64];

    uint16_t store = ConstructFilename(handle, oldName, 256);
    276c:	bl	26e4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    2770:	mov	r6, r0
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2772:	add	r0, sp, #144	; 0x90
    2774:	bl	12240 <strlen>
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2778:	mov	r1, r0
    277a:	add	r0, sp, #144	; 0x90
    277c:	bl	eae8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2780:	ldr	r0, [pc, #132]	; (2808 <MTPStorage_SD::rename(unsigned long, char const*)+0xb0>)
    2782:	bl	10000 <Print::println()>
    Serial.println(oldName);

    Record p1 = ReadIndexRecord(handle);
    2786:	mov	r2, r5
    2788:	mov	r1, r4
    278a:	add	r0, sp, #64	; 0x40
    278c:	bl	2288 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(temp,p1.name);
    2790:	add	r1, sp, #80	; 0x50
    2792:	mov	r0, sp
    2794:	bl	11cb0 <stpcpy>
    strcpy(p1.name,name);
    2798:	mov	r1, r9

    uint16_t store = ConstructFilename(handle, oldName, 256);
    Serial.println(oldName);

    Record p1 = ReadIndexRecord(handle);
    strcpy(temp,p1.name);
    279a:	mov	r8, r0
    strcpy(p1.name,name);
    279c:	add	r0, sp, #80	; 0x50
    279e:	bl	120fc <strcpy>

    WriteIndexRecord(handle, p1);
    27a2:	add	r2, sp, #64	; 0x40
    27a4:	mov	r1, r5
    27a6:	mov	r0, r4
    27a8:	bl	20c0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, 256);
    27ac:	add	r2, sp, #400	; 0x190
    27ae:	mov.w	r3, #256	; 0x100
    27b2:	mov	r1, r5
    27b4:	mov	r0, r4
    27b6:	bl	26e4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    27ba:	add	r0, sp, #400	; 0x190
    27bc:	bl	12240 <strlen>
    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t storage) { return sd_name[storage-1];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    27c0:	add.w	r6, r4, r6, lsl #2
    27c4:	mov	r1, r0
    27c6:	add	r0, sp, #400	; 0x190
    27c8:	bl	eae8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    27cc:	ldr	r0, [pc, #56]	; (2808 <MTPStorage_SD::rename(unsigned long, char const*)+0xb0>)
    27ce:	bl	10000 <Print::println()>
    27d2:	ldr	r0, [r6, #88]	; 0x58
    27d4:	ldr	r3, [r0, #0]
    27d6:	add	r2, sp, #400	; 0x190
    27d8:	add	r1, sp, #144	; 0x90
    27da:	ldr	r3, [r3, #12]
    27dc:	blx	r3
    Serial.println(newName);

    if (sd_rename(store,oldName,newName)) return true;
    27de:	mov	r6, r0
    27e0:	cbnz	r0, 27fc <MTPStorage_SD::rename(unsigned long, char const*)+0xa4>
    27e2:	mov	r7, sp

    // rename failed; undo index update
    strcpy(p1.name,temp);
    27e4:	rsb	r2, r7, r8
    27e8:	adds	r2, #1
    27ea:	mov	r1, sp
    27ec:	add	r0, sp, #80	; 0x50
    27ee:	bl	e8e8 <memcpy>
    WriteIndexRecord(handle, p1);
    27f2:	add	r2, sp, #64	; 0x40
    27f4:	mov	r1, r5
    27f6:	mov	r0, r4
    27f8:	bl	20c0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
  }
    27fc:	mov	r0, r6
    27fe:	add.w	sp, sp, #660	; 0x294
    2802:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2806:	nop
    2808:	.word	0x1fff09d0

0000280c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)>:
 * save p2
 * 
 */

  bool MTPStorage_SD::move(uint32_t handle,uint32_t storage, uint32_t newParent ) 
  { 
    280c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2810:	subw	sp, sp, #3252	; 0xcb4
    2814:	mov	r4, r0
    2816:	mov	r5, r1
    2818:	mov	r8, r2
    281a:	mov	r7, r3
    #if DEBUG==1
      Serial.printf("%d -> %d %d\n",handle,storage,newParent);
    #endif
    Record p1 = ReadIndexRecord(handle); 
    281c:	mov	r2, r1
    281e:	mov	r1, r0
    2820:	add	r0, sp, #128	; 0x80
    2822:	bl	2288 <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    uint32_t oldParent = p1.parent;
    2826:	ldr	r6, [sp, #128]	; 0x80
    if(newParent<=0) newParent=(storage-1); //storage runs from 1, while record.store runs from 0
    2828:	cbnz	r7, 282e <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x22>
    282a:	add.w	r7, r8, #4294967295
    //Serial.printf("%d -> %d %d\n",handle,storage,newParent);

    Record p2 = ReadIndexRecord(newParent);
    282e:	add	r0, sp, #208	; 0xd0
    2830:	mov	r2, r7
    2832:	mov	r1, r4
    2834:	bl	2288 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p3 = ReadIndexRecord(oldParent); 
    2838:	add	r0, sp, #288	; 0x120
    283a:	mov	r2, r6
    283c:	mov	r1, r4
    283e:	bl	2288 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    // keep original storages
    Record p1o = p1;
    2842:	movs	r2, #80	; 0x50
    2844:	add	r1, sp, #128	; 0x80
    2846:	add	r0, sp, #368	; 0x170
    2848:	bl	e8e8 <memcpy>
    Record p2o = p2;
    284c:	movs	r2, #80	; 0x50
    284e:	add	r1, sp, #208	; 0xd0
    2850:	add	r0, sp, #448	; 0x1c0
    2852:	bl	e8e8 <memcpy>
    Record p3o = p3;

    #define DISK2DISK_MOVE 0 //set to 1 after disk to disk move is proven to work
    #if DISK_2DISK_MOVE==0
      if(p1.store != p2.store) 
    2856:	ldrh.w	r3, [sp, #222]	; 0xde
    285a:	ldrh.w	r2, [sp, #142]	; 0x8e
    285e:	cmp	r2, r3
    2860:	beq.n	287e <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x72>
    2862:	movs	r1, #35	; 0x23
    2864:	ldr	r0, [pc, #88]	; (28c0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xb4>)
    2866:	bl	eae8 <usb_serial_write>
    286a:	ldr	r0, [pc, #88]	; (28c4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xb8>)
    286c:	bl	10000 <Print::println()>
      { Serial.println(" Disk to Disk move is not supported"); return false; }
    2870:	mov.w	r8, #0
        WriteIndexRecord(newParent,p2o);      
        return false;
      }
    }
    return false;
  }
    2874:	mov	r0, r8
    2876:	addw	sp, sp, #3252	; 0xcb4
    287a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(p1.store != p2.store) 
      { Serial.println(" Disk to Disk move is not supported"); return false; }
    #endif

    char oldName[256];
    uint16_t store0 = ConstructFilename(handle, oldName, 256);
    287e:	add	r2, sp, #688	; 0x2b0
    2880:	mov.w	r3, #256	; 0x100
    2884:	mov	r1, r5
    2886:	mov	r0, r4
    2888:	bl	26e4 <MTPStorage_SD::ConstructFilename(int, char*, int)>

    // remove from old direcory
    uint32_t jx=-1;
    Record px;
    Record pxo;
    if(p3.child==handle)
    288c:	ldr.w	r8, [sp, #292]	; 0x124
    2890:	cmp	r5, r8
      if(p1.store != p2.store) 
      { Serial.println(" Disk to Disk move is not supported"); return false; }
    #endif

    char oldName[256];
    uint16_t store0 = ConstructFilename(handle, oldName, 256);
    2892:	mov	sl, r0

    // remove from old direcory
    uint32_t jx=-1;
    Record px;
    Record pxo;
    if(p3.child==handle)
    2894:	beq.w	2df0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5e4>
      p3.child = p1.sibling;
      WriteIndexRecord(oldParent, p3);    
    }
    else
    { jx = p3.child;
      px = ReadIndexRecord(jx); 
    2898:	add	r0, sp, #8
    289a:	mov	r2, r8
    289c:	mov	r1, r4
    289e:	bl	2288 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    28a2:	add	r1, sp, #8
    28a4:	movs	r2, #80	; 0x50
    28a6:	add	r0, sp, #528	; 0x210
    28a8:	bl	e8e8 <memcpy>
      pxo = px;
    28ac:	add	r1, sp, #528	; 0x210
    28ae:	add	r0, sp, #608	; 0x260
    28b0:	movs	r2, #80	; 0x50
    28b2:	bl	e8e8 <memcpy>
      while(handle != px.sibling)
    28b6:	ldr	r6, [sp, #536]	; 0x218
    28b8:	cmp	r5, r6
    28ba:	bne.n	28ca <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xbe>
    28bc:	b.n	2f3c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x730>
    28be:	nop
    28c0:	.word	0x0001597c
    28c4:	.word	0x1fff09d0
    28c8:	mov	r6, r3
      {
        jx = px.sibling;
        px = ReadIndexRecord(jx); 
    28ca:	mov	r2, r6
    28cc:	mov	r1, r4
    28ce:	add	r0, sp, #8
    28d0:	bl	2288 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    28d4:	movs	r2, #80	; 0x50
    28d6:	add	r1, sp, #8
    28d8:	add	r0, sp, #528	; 0x210
    28da:	bl	e8e8 <memcpy>
        pxo = px;
    28de:	movs	r2, #80	; 0x50
    28e0:	add	r1, sp, #528	; 0x210
    28e2:	add	r0, sp, #608	; 0x260
    28e4:	bl	e8e8 <memcpy>
    }
    else
    { jx = p3.child;
      px = ReadIndexRecord(jx); 
      pxo = px;
      while(handle != px.sibling)
    28e8:	ldr	r3, [sp, #536]	; 0x218
    28ea:	cmp	r5, r3
    28ec:	bne.n	28c8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xbc>
      {
        jx = px.sibling;
        px = ReadIndexRecord(jx); 
        pxo = px;
      }
      px.sibling = p1.sibling;
    28ee:	ldr	r3, [sp, #136]	; 0x88
    28f0:	str	r3, [sp, #536]	; 0x218
      WriteIndexRecord(jx, px);
    28f2:	add	r2, sp, #528	; 0x210
    28f4:	mov	r1, r6
    28f6:	mov	r0, r4
    28f8:	bl	20c0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    }
  
    // add to new directory
    p1.parent = newParent;
    p1.store = p2.store;
    p1.sibling = p2.child;
    28fc:	ldr	r3, [sp, #212]	; 0xd4
      WriteIndexRecord(jx, px);
    }
  
    // add to new directory
    p1.parent = newParent;
    p1.store = p2.store;
    28fe:	ldrh.w	lr, [sp, #222]	; 0xde
    2902:	strh.w	lr, [sp, #142]	; 0x8e
    p1.sibling = p2.child;
    p2.child = handle;
    WriteIndexRecord(handle, p1);
    2906:	add	r2, sp, #128	; 0x80
    2908:	mov	r1, r5
    290a:	mov	r0, r4
    }
  
    // add to new directory
    p1.parent = newParent;
    p1.store = p2.store;
    p1.sibling = p2.child;
    290c:	str	r3, [sp, #136]	; 0x88
      px.sibling = p1.sibling;
      WriteIndexRecord(jx, px);
    }
  
    // add to new directory
    p1.parent = newParent;
    290e:	str	r7, [sp, #128]	; 0x80
    p1.store = p2.store;
    p1.sibling = p2.child;
    p2.child = handle;
    2910:	str	r5, [sp, #212]	; 0xd4
    WriteIndexRecord(handle, p1);
    2912:	bl	20c0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent,p2);
    2916:	add	r2, sp, #208	; 0xd0
    2918:	mov	r1, r7
    291a:	mov	r0, r4
    291c:	bl	20c0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

    char newName[256];
    uint32_t store1 = ConstructFilename(handle, newName, 256);
    2920:	add	r2, sp, #944	; 0x3b0
    2922:	mov.w	r3, #256	; 0x100
    2926:	mov	r1, r5
    2928:	mov	r0, r4
    292a:	bl	26e4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    #if DEBUG==1
      Serial.print(store1); Serial.print(": ");Serial.println(newName);
      printIndexList();
    #endif

    if(p2.store == p3.store)
    292e:	ldrh.w	r2, [sp, #222]	; 0xde
    2932:	ldrh.w	r3, [sp, #302]	; 0x12e
    2936:	cmp	r2, r3
    2938:	beq.w	2edc <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x6d0>
    }
    //
    // copy from one store to another (not completely tested yet)
    // store0:oldName -> store1:newName
    // do not move directories cross storages
    if(p1.isdir) 
    293c:	ldrb.w	r3, [sp, #140]	; 0x8c
    2940:	cmp	r3, #0
    2942:	bne.w	2b66 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x35a>
    2946:	add.w	r9, r4, r0, lsl #2
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t storage) { return sd_name[storage-1];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    294a:	add	r2, sp, #944	; 0x3b0
    294c:	ldr.w	r1, [r9, #88]	; 0x58
    2950:	ldr	r3, [r1, #0]
    2952:	add	r0, sp, #88	; 0x58
    2954:	ldr.w	r8, [r3]
    2958:	movs	r3, #2
    295a:	blx	r8
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    295c:	ldr	r3, [sp, #104]	; 0x68
    295e:	cmp	r3, #0
    2960:	beq.n	2870 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x64>
    2962:	ldr	r1, [r3, #0]
    2964:	ldr	r2, [pc, #564]	; (2b9c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x390>)
    2966:	ldr	r1, [r1, #68]	; 0x44
    2968:	cmp	r1, r2
    296a:	bne.w	2b92 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x386>
    296e:	ldr	r0, [r3, #16]
    2970:	cmp	r0, #0
    2972:	beq.w	2e10 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x604>
    2976:	ldr	r1, [r0, #0]
    2978:	ldr	r1, [r1, #68]	; 0x44
    297a:	cmp	r1, r2
    297c:	bne.w	2b94 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x388>
    2980:	ldr	r0, [r0, #16]
    2982:	cmp	r0, #0
    2984:	beq.w	2e10 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x604>
    2988:	ldr	r1, [r0, #0]
    298a:	ldr	r1, [r1, #68]	; 0x44
    298c:	cmp	r1, r2
    298e:	bne.w	2b94 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x388>
    2992:	ldr	r0, [r0, #16]
    2994:	cmp	r0, #0
    2996:	beq.w	2e10 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x604>
    299a:	ldr	r1, [r0, #0]
    299c:	ldr	r1, [r1, #68]	; 0x44
    299e:	cmp	r1, r2
    29a0:	bne.w	2b94 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x388>
    29a4:	ldr	r0, [r0, #16]
    29a6:	cmp	r0, #0
    29a8:	beq.w	2e10 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x604>
    29ac:	ldr	r1, [r0, #0]
    29ae:	ldr	r1, [r1, #68]	; 0x44
    29b0:	cmp	r1, r2
    29b2:	bne.w	2b94 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x388>
    29b6:	ldr	r0, [r0, #16]
    29b8:	cmp	r0, #0
    29ba:	beq.w	2e10 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x604>
    29be:	ldr	r1, [r0, #0]
    29c0:	ldr	r1, [r1, #68]	; 0x44
    29c2:	cmp	r1, r2
    29c4:	bne.w	2b94 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x388>
    29c8:	ldr	r0, [r0, #16]
    29ca:	cmp	r0, #0
    29cc:	beq.w	2e10 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x604>
    29d0:	ldr	r1, [r0, #0]
    29d2:	ldr	r1, [r1, #68]	; 0x44
    29d4:	cmp	r1, r2
    29d6:	bne.w	2b94 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x388>
    29da:	ldr	r0, [r0, #16]
    29dc:	cmp	r0, #0
    29de:	beq.w	2e10 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x604>
    29e2:	ldr	r1, [r0, #0]
    29e4:	ldr	r1, [r1, #68]	; 0x44
    29e6:	cmp	r1, r2
    29e8:	bne.w	2b94 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x388>
    29ec:	ldr	r0, [r0, #16]
    29ee:	cmp	r0, #0
    29f0:	beq.w	2e10 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x604>
    29f4:	ldr	r1, [r0, #0]
    29f6:	ldr	r1, [r1, #68]	; 0x44
    29f8:	cmp	r1, r2
    29fa:	bne.w	2b94 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x388>
    29fe:	ldr	r0, [r0, #16]
    2a00:	cmp	r0, #0
    2a02:	beq.w	2e10 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x604>
    2a06:	ldr	r3, [r0, #0]
    2a08:	ldr	r3, [r3, #68]	; 0x44
    2a0a:	blx	r3
    2a0c:	mov	r8, r0
    #endif

    const int nbuf = 2048;
    char buffer[nbuf];
    File f2 = sd_open(store1,newName,FILE_WRITE_BEGIN);
    if(sd_isOpen(f2))
    2a0e:	cmp.w	r8, #0
    2a12:	beq.w	2f52 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x746>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    2a16:	ldr	r0, [sp, #104]	; 0x68
    2a18:	cmp	r0, #0
    2a1a:	beq.n	2a80 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x274>
    2a1c:	ldr	r2, [r0, #0]
    2a1e:	ldr	r3, [pc, #384]	; (2ba0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x394>)
    2a20:	ldr	r1, [r2, #52]	; 0x34
    2a22:	cmp	r1, r3
    2a24:	bne.w	2f40 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x734>
    2a28:	ldr	r0, [r0, #16]
    2a2a:	cbz	r0, 2a80 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x274>
    2a2c:	ldr	r2, [r0, #0]
    2a2e:	ldr	r1, [r2, #52]	; 0x34
    2a30:	cmp	r1, r3
    2a32:	bne.w	2f40 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x734>
    2a36:	ldr	r0, [r0, #16]
    2a38:	cbz	r0, 2a80 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x274>
    2a3a:	ldr	r2, [r0, #0]
    2a3c:	ldr	r1, [r2, #52]	; 0x34
    2a3e:	cmp	r1, r3
    2a40:	bne.w	2f40 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x734>
    2a44:	ldr	r0, [r0, #16]
    2a46:	cbz	r0, 2a80 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x274>
    2a48:	ldr	r2, [r0, #0]
    2a4a:	ldr	r1, [r2, #52]	; 0x34
    2a4c:	cmp	r1, r3
    2a4e:	bne.w	2f40 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x734>
    2a52:	ldr	r0, [r0, #16]
    2a54:	cbz	r0, 2a80 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x274>
    2a56:	ldr	r2, [r0, #0]
    2a58:	ldr	r1, [r2, #52]	; 0x34
    2a5a:	cmp	r1, r3
    2a5c:	bne.w	2f40 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x734>
    2a60:	ldr	r0, [r0, #16]
    2a62:	cbz	r0, 2a80 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x274>
    2a64:	ldr	r2, [r0, #0]
    2a66:	ldr	r1, [r2, #52]	; 0x34
    2a68:	cmp	r1, r3
    2a6a:	bne.w	2f40 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x734>
    2a6e:	ldr	r0, [r0, #16]
    2a70:	cbz	r0, 2a80 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x274>
    2a72:	ldr	r3, [r0, #0]
    2a74:	movs	r2, #0
    2a76:	str	r2, [sp, #0]
    2a78:	ldr	r1, [r3, #52]	; 0x34
    2a7a:	movs	r2, #0
    2a7c:	movs	r3, #0
    2a7e:	blx	r1
    2a80:	add.w	sl, r4, sl, lsl #2
    2a84:	add	r0, sp, #108	; 0x6c
    2a86:	ldr.w	r1, [sl, #88]	; 0x58
    2a8a:	ldr.w	r8, [pc, #284]	; 2ba8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x39c>
    2a8e:	ldr	r3, [r1, #0]
    2a90:	add	r2, sp, #688	; 0x2b0
    2a92:	ldr.w	fp, [r3]
    2a96:	movs	r3, #0
    2a98:	blx	fp
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    2a9a:	ldr	r3, [sp, #124]	; 0x7c
    2a9c:	cmp	r3, #0
    2a9e:	beq.w	2bac <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x3a0>
    2aa2:	ldr	r1, [r3, #0]
    2aa4:	ldr	r2, [pc, #252]	; (2ba4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x398>)
    2aa6:	ldr.w	fp, [r1, #40]	; 0x28
    2aaa:	cmp	fp, r2
    2aac:	bne.w	2db8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5ac>
    2ab0:	ldr	r0, [r3, #16]
    2ab2:	cmp	r0, #0
    2ab4:	beq.n	2bac <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x3a0>
    2ab6:	ldr	r1, [r0, #0]
    2ab8:	ldr.w	fp, [r1, #40]	; 0x28
    2abc:	cmp	fp, r2
    2abe:	bne.w	2dba <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5ae>
    2ac2:	ldr	r0, [r0, #16]
    2ac4:	cmp	r0, #0
    2ac6:	beq.n	2bac <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x3a0>
    2ac8:	ldr	r1, [r0, #0]
    2aca:	ldr.w	fp, [r1, #40]	; 0x28
    2ace:	cmp	fp, r2
    2ad0:	bne.w	2dba <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5ae>
    2ad4:	ldr	r0, [r0, #16]
    2ad6:	cmp	r0, #0
    2ad8:	beq.n	2bac <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x3a0>
    2ada:	ldr	r1, [r0, #0]
    2adc:	ldr.w	fp, [r1, #40]	; 0x28
    2ae0:	cmp	fp, r2
    2ae2:	bne.w	2dba <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5ae>
    2ae6:	ldr	r0, [r0, #16]
    2ae8:	cmp	r0, #0
    2aea:	beq.n	2bac <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x3a0>
    2aec:	ldr	r1, [r0, #0]
    2aee:	ldr.w	fp, [r1, #40]	; 0x28
    2af2:	cmp	fp, r2
    2af4:	bne.w	2dba <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5ae>
    2af8:	ldr	r0, [r0, #16]
    2afa:	cmp	r0, #0
    2afc:	beq.n	2bac <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x3a0>
    2afe:	ldr	r1, [r0, #0]
    2b00:	ldr.w	fp, [r1, #40]	; 0x28
    2b04:	cmp	fp, r2
    2b06:	bne.w	2dba <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5ae>
    2b0a:	ldr	r0, [r0, #16]
    2b0c:	cmp	r0, #0
    2b0e:	beq.n	2bac <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x3a0>
    2b10:	ldr	r1, [r0, #0]
    2b12:	ldr.w	fp, [r1, #40]	; 0x28
    2b16:	cmp	fp, r2
    2b18:	bne.w	2dba <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5ae>
    2b1c:	ldr	r0, [r0, #16]
    2b1e:	cmp	r0, #0
    2b20:	beq.n	2bac <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x3a0>
    2b22:	ldr	r1, [r0, #0]
    2b24:	ldr.w	fp, [r1, #40]	; 0x28
    2b28:	cmp	fp, r2
    2b2a:	bne.w	2dba <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5ae>
    2b2e:	ldr	r0, [r0, #16]
    2b30:	cmp	r0, #0
    2b32:	beq.n	2bac <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x3a0>
    2b34:	ldr	r1, [r0, #0]
    2b36:	ldr.w	fp, [r1, #40]	; 0x28
    2b3a:	cmp	fp, r2
    2b3c:	bne.w	2dba <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5ae>
    2b40:	ldr	r0, [r0, #16]
    2b42:	cbz	r0, 2bac <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x3a0>
    2b44:	ldr	r1, [r0, #0]
    2b46:	ldr.w	fp, [r1, #40]	; 0x28
    2b4a:	cmp	fp, r2
    2b4c:	bne.w	2dba <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5ae>
    2b50:	ldr	r0, [r0, #16]
    2b52:	cbz	r0, 2bac <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x3a0>
    2b54:	ldr	r3, [r0, #0]
    2b56:	mov.w	r2, #2048	; 0x800
    2b5a:	ldr	r3, [r3, #40]	; 0x28
    2b5c:	add.w	r1, sp, #1200	; 0x4b0
    2b60:	blx	r3
    2b62:	mov	r2, r0
    2b64:	b.n	2dc6 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5ba>
    // store0:oldName -> store1:newName
    // do not move directories cross storages
    if(p1.isdir) 
    {
      // undo changes in index list
      if(jx<0) WriteIndexRecord(oldParent, p3o); else WriteIndexRecord(jx, pxo);
    2b66:	mov	r1, r6
    2b68:	add	r2, sp, #608	; 0x260
    2b6a:	mov	r0, r4
    2b6c:	bl	20c0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      WriteIndexRecord(handle, p1o);
    2b70:	add	r2, sp, #368	; 0x170
    2b72:	mov	r1, r5
    2b74:	mov	r0, r4
    2b76:	bl	20c0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      WriteIndexRecord(newParent,p2o);      
    2b7a:	mov	r0, r4
    2b7c:	add	r2, sp, #448	; 0x1c0
    2b7e:	mov	r1, r7
    2b80:	bl	20c0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      return false;
    2b84:	mov.w	r8, #0
        WriteIndexRecord(newParent,p2o);      
        return false;
      }
    }
    return false;
  }
    2b88:	mov	r0, r8
    2b8a:	addw	sp, sp, #3252	; 0xcb4
    2b8e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    2b92:	mov	r0, r3
    2b94:	blx	r1
    2b96:	mov	r8, r0
    2b98:	b.n	2a0e <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x202>
    2b9a:	nop
    2b9c:	.word	0x0000050d
    2ba0:	.word	0x000004c9
    2ba4:	.word	0x0000047d
    2ba8:	.word	0x00000489
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    2bac:	ldr	r0, [sp, #104]	; 0x68
    2bae:	cmp	r0, #0
    2bb0:	beq.w	2f32 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x726>
    if(sd_isOpen(f2))
    { f2.seek(0); // position file to beginning (ARDUINO opens at end of file)
      File f1 = sd_open(store0,oldName,FILE_READ);
      int nd;
      while(1)
      { nd=f1.read(buffer,nbuf);
    2bb4:	mov.w	fp, #0
    2bb8:	mov	r2, fp
    2bba:	ldr	r3, [r0, #0]
    2bbc:	ldr	r3, [r3, #44]	; 0x2c
    2bbe:	cmp	r3, r8
    2bc0:	bne.w	2de0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5d4>
    2bc4:	ldr	r0, [r0, #16]
    2bc6:	cmp	r0, #0
    2bc8:	beq.n	2c58 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x44c>
    2bca:	ldr	r3, [r0, #0]
    2bcc:	ldr	r3, [r3, #44]	; 0x2c
    2bce:	cmp	r3, r8
    2bd0:	bne.w	2de0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5d4>
    2bd4:	ldr	r0, [r0, #16]
    2bd6:	cmp	r0, #0
    2bd8:	beq.n	2c58 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x44c>
    2bda:	ldr	r3, [r0, #0]
    2bdc:	ldr	r3, [r3, #44]	; 0x2c
    2bde:	cmp	r3, r8
    2be0:	bne.w	2de0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5d4>
    2be4:	ldr	r0, [r0, #16]
    2be6:	cmp	r0, #0
    2be8:	beq.n	2c58 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x44c>
    2bea:	ldr	r3, [r0, #0]
    2bec:	ldr	r3, [r3, #44]	; 0x2c
    2bee:	cmp	r3, r8
    2bf0:	bne.w	2de0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5d4>
    2bf4:	ldr	r0, [r0, #16]
    2bf6:	cmp	r0, #0
    2bf8:	beq.n	2c58 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x44c>
    2bfa:	ldr	r3, [r0, #0]
    2bfc:	ldr	r3, [r3, #44]	; 0x2c
    2bfe:	cmp	r3, r8
    2c00:	bne.w	2de0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5d4>
    2c04:	ldr	r0, [r0, #16]
    2c06:	cbz	r0, 2c58 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x44c>
    2c08:	ldr	r3, [r0, #0]
    2c0a:	ldr	r3, [r3, #44]	; 0x2c
    2c0c:	cmp	r3, r8
    2c0e:	bne.w	2de0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5d4>
    2c12:	ldr	r0, [r0, #16]
    2c14:	cbz	r0, 2c58 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x44c>
    2c16:	ldr	r3, [r0, #0]
    2c18:	ldr	r3, [r3, #44]	; 0x2c
    2c1a:	cmp	r3, r8
    2c1c:	bne.w	2de0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5d4>
    2c20:	ldr	r0, [r0, #16]
    2c22:	cbz	r0, 2c58 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x44c>
    2c24:	ldr	r3, [r0, #0]
    2c26:	ldr	r3, [r3, #44]	; 0x2c
    2c28:	cmp	r3, r8
    2c2a:	bne.w	2de0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5d4>
    2c2e:	ldr	r0, [r0, #16]
    2c30:	cbz	r0, 2c58 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x44c>
    2c32:	ldr	r3, [r0, #0]
    2c34:	ldr	r3, [r3, #44]	; 0x2c
    2c36:	cmp	r3, r8
    2c38:	bne.w	2de0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5d4>
    2c3c:	ldr	r0, [r0, #16]
    2c3e:	cbz	r0, 2c58 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x44c>
    2c40:	ldr	r3, [r0, #0]
    2c42:	ldr	r3, [r3, #44]	; 0x2c
    2c44:	cmp	r3, r8
    2c46:	bne.w	2de0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5d4>
    2c4a:	ldr	r0, [r0, #16]
    2c4c:	cbz	r0, 2c58 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x44c>
    2c4e:	ldr	r3, [r0, #0]
    2c50:	add.w	r1, sp, #1200	; 0x4b0
    2c54:	ldr	r3, [r3, #44]	; 0x2c
    2c56:	blx	r3
        if(nd<0) break;
        f2.write(buffer,nd);
        if(nd<nbuf) break;
    2c58:	cmp.w	fp, #2048	; 0x800
    2c5c:	bge.w	2a9a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x28e>
    2c60:	ldr	r3, [sp, #124]	; 0x7c
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    2c62:	cbz	r3, 2cb2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x4a6>
    2c64:	ldr	r2, [r3, #0]
    2c66:	ldr	r1, [pc, #412]	; (2e04 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5f8>)
    2c68:	ldr	r2, [r2, #64]	; 0x40
    2c6a:	cmp	r2, r1
    2c6c:	bne.w	2f88 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x77c>
    2c70:	ldr	r0, [r3, #16]
    2c72:	cbz	r0, 2cb2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x4a6>
    2c74:	ldr	r3, [r0, #0]
    2c76:	ldr	r3, [r3, #64]	; 0x40
    2c78:	cmp	r3, r2
    2c7a:	bne.w	2fb8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x7ac>
    2c7e:	ldr	r0, [r0, #16]
    2c80:	cbz	r0, 2cb2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x4a6>
    2c82:	ldr	r2, [r0, #0]
    2c84:	ldr	r2, [r2, #64]	; 0x40
    2c86:	cmp	r2, r3
    2c88:	bne.w	2f8a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x77e>
    2c8c:	ldr	r0, [r0, #16]
    2c8e:	cbz	r0, 2cb2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x4a6>
    2c90:	ldr	r3, [r0, #0]
    2c92:	ldr	r3, [r3, #64]	; 0x40
    2c94:	cmp	r3, r2
    2c96:	bne.w	2fb8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x7ac>
    2c9a:	ldr	r0, [r0, #16]
    2c9c:	cbz	r0, 2cb2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x4a6>
    2c9e:	ldr	r2, [r0, #0]
    2ca0:	ldr	r2, [r2, #64]	; 0x40
    2ca2:	cmp	r2, r3
    2ca4:	bne.w	2f8a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x77e>
    2ca8:	ldr	r0, [r0, #16]
    2caa:	cbz	r0, 2cb2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x4a6>
    2cac:	ldr	r3, [r0, #0]
    2cae:	ldr	r3, [r3, #64]	; 0x40
    2cb0:	blx	r3
    2cb2:	ldr	r0, [sp, #104]	; 0x68
    2cb4:	cbz	r0, 2d04 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x4f8>
    2cb6:	ldr	r3, [r0, #0]
    2cb8:	ldr	r2, [pc, #328]	; (2e04 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5f8>)
    2cba:	ldr	r3, [r3, #64]	; 0x40
    2cbc:	cmp	r3, r2
    2cbe:	bne.w	2f8e <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x782>
    2cc2:	ldr	r0, [r0, #16]
    2cc4:	cbz	r0, 2d04 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x4f8>
    2cc6:	ldr	r2, [r0, #0]
    2cc8:	ldr	r2, [r2, #64]	; 0x40
    2cca:	cmp	r2, r3
    2ccc:	bne.w	2fbc <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x7b0>
    2cd0:	ldr	r0, [r0, #16]
    2cd2:	cbz	r0, 2d04 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x4f8>
    2cd4:	ldr	r3, [r0, #0]
    2cd6:	ldr	r3, [r3, #64]	; 0x40
    2cd8:	cmp	r3, r2
    2cda:	bne.w	2f8e <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x782>
    2cde:	ldr	r0, [r0, #16]
    2ce0:	cbz	r0, 2d04 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x4f8>
    2ce2:	ldr	r2, [r0, #0]
    2ce4:	ldr	r2, [r2, #64]	; 0x40
    2ce6:	cmp	r2, r3
    2ce8:	bne.w	2fbc <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x7b0>
    2cec:	ldr	r0, [r0, #16]
    2cee:	cbz	r0, 2d04 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x4f8>
    2cf0:	ldr	r3, [r0, #0]
    2cf2:	ldr	r3, [r3, #64]	; 0x40
    2cf4:	cmp	r3, r2
    2cf6:	bne.w	2f8e <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x782>
    2cfa:	ldr	r0, [r0, #16]
    2cfc:	cbz	r0, 2d04 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x4f8>
    2cfe:	ldr	r3, [r0, #0]
    2d00:	ldr	r3, [r3, #64]	; 0x40
    2d02:	blx	r3
      if(nd<0) { Serial.print("File Read Error :"); Serial.println(f1.getReadError());}

      // close all files
      f1.close();
      f2.close();
      if(nd<0) //  something went wrong
    2d04:	cmp.w	fp, #0
    2d08:	blt.w	2f58 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x74c>
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) { return sdx[store]->remove(filename);  }
    2d0c:	ldr.w	r0, [sl, #88]	; 0x58
    2d10:	ldr	r3, [r0, #0]
    2d12:	add	r1, sp, #688	; 0x2b0
    2d14:	ldr	r3, [r3, #16]
    2d16:	blx	r3
        WriteIndexRecord(newParent,p2o);      
        return false;
      }

      // remove old files
      if(sd_remove(store0,oldName)) 
    2d18:	mov	r8, r0
    2d1a:	cmp	r0, #0
    2d1c:	beq.w	2f92 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x786>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2d20:	ldr	r2, [sp, #124]	; 0x7c
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2d22:	ldr	r5, [pc, #228]	; (2e08 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5fc>)
    2d24:	str	r5, [sp, #108]	; 0x6c
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2d26:	cmp	r2, #0
    2d28:	beq.n	2db0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5a4>
    2d2a:	ldr	r3, [r2, #16]
    2d2c:	subs	r3, #1
    2d2e:	str	r3, [r2, #16]
    2d30:	cmp	r3, #0
    2d32:	bne.n	2db0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5a4>
    2d34:	ldr	r4, [sp, #124]	; 0x7c
    2d36:	cmp	r4, #0
    2d38:	beq.n	2db0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5a4>
    2d3a:	ldr	r3, [r4, #0]
    2d3c:	ldr	r2, [pc, #204]	; (2e0c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x600>)
    2d3e:	ldr	r3, [r3, #32]
    2d40:	cmp	r3, r2
    2d42:	bne.w	2fc0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x7b4>
    2d46:	ldr	r1, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2d48:	str	r5, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2d4a:	cmp	r1, #0
    2d4c:	beq.n	2da8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x59c>
    2d4e:	ldr	r3, [r1, #16]
    2d50:	subs	r3, #1
    2d52:	str	r3, [r1, #16]
    2d54:	cbnz	r3, 2da8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x59c>
    2d56:	ldr	r6, [r4, #16]
    2d58:	cbz	r6, 2da8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x59c>
    2d5a:	ldr	r3, [r6, #0]
    2d5c:	ldr	r3, [r3, #32]
    2d5e:	cmp	r3, r2
    2d60:	bne.w	2fcc <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x7c0>
    2d64:	ldr	r1, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2d66:	str	r5, [r6, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2d68:	cbz	r1, 2da0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x594>
    2d6a:	ldr	r3, [r1, #16]
    2d6c:	subs	r3, #1
    2d6e:	str	r3, [r1, #16]
    2d70:	cbnz	r3, 2da0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x594>
    2d72:	ldr	r7, [r6, #16]
    2d74:	cbz	r7, 2da0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x594>
    2d76:	ldr	r3, [r7, #0]
    2d78:	ldr	r3, [r3, #32]
    2d7a:	cmp	r3, r2
    2d7c:	bne.w	2fd2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x7c6>
    2d80:	ldr	r2, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2d82:	str	r5, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2d84:	cbz	r2, 2d98 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x58c>
    2d86:	ldr	r3, [r2, #16]
    2d88:	subs	r3, #1
    2d8a:	str	r3, [r2, #16]
    2d8c:	cbnz	r3, 2d98 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x58c>
    2d8e:	ldr	r0, [r7, #16]
    2d90:	cbz	r0, 2d98 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x58c>
    2d92:	ldr	r3, [r0, #0]
    2d94:	ldr	r3, [r3, #32]
    2d96:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    2d98:	mov	r0, r7
    2d9a:	movs	r1, #20
    2d9c:	bl	101b0 <operator delete(void*, unsigned int)>
    2da0:	mov	r0, r6
    2da2:	movs	r1, #20
    2da4:	bl	101b0 <operator delete(void*, unsigned int)>
    2da8:	mov	r0, r4
    2daa:	movs	r1, #20
    2dac:	bl	101b0 <operator delete(void*, unsigned int)>
    2db0:	ldr	r3, [sp, #104]	; 0x68
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2db2:	str	r5, [sp, #88]	; 0x58
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2db4:	cbnz	r3, 2e18 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x60c>
    2db6:	b.n	2874 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x68>
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    2db8:	mov	r0, r3
    2dba:	mov.w	r2, #2048	; 0x800
    2dbe:	add.w	r1, sp, #1200	; 0x4b0
    2dc2:	blx	fp
    2dc4:	mov	r2, r0
    { f2.seek(0); // position file to beginning (ARDUINO opens at end of file)
      File f1 = sd_open(store0,oldName,FILE_READ);
      int nd;
      while(1)
      { nd=f1.read(buffer,nbuf);
        if(nd<0) break;
    2dc6:	cmp	r2, #0
    if(sd_isOpen(f2))
    { f2.seek(0); // position file to beginning (ARDUINO opens at end of file)
      File f1 = sd_open(store0,oldName,FILE_READ);
      int nd;
      while(1)
      { nd=f1.read(buffer,nbuf);
    2dc8:	mov	fp, r2
        if(nd<0) break;
    2dca:	blt.w	2f16 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x70a>
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    2dce:	ldr	r0, [sp, #104]	; 0x68
    2dd0:	cmp	r0, #0
    2dd2:	bne.w	2bba <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x3ae>
        f2.write(buffer,nd);
        if(nd<nbuf) break;
    2dd6:	cmp.w	fp, #2048	; 0x800
    2dda:	bge.w	2a9a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x28e>
    2dde:	b.n	2c60 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x454>
    2de0:	add.w	r1, sp, #1200	; 0x4b0
    2de4:	blx	r3
    2de6:	cmp.w	fp, #2048	; 0x800
    2dea:	bge.w	2a9a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x28e>
    2dee:	b.n	2c60 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x454>
    Record px;
    Record pxo;
    if(p3.child==handle)
    {
      p3.child = p1.sibling;
      WriteIndexRecord(oldParent, p3);    
    2df0:	mov	r1, r6
    uint32_t jx=-1;
    Record px;
    Record pxo;
    if(p3.child==handle)
    {
      p3.child = p1.sibling;
    2df2:	ldr	r3, [sp, #136]	; 0x88
    2df4:	str	r3, [sp, #292]	; 0x124
      WriteIndexRecord(oldParent, p3);    
    2df6:	add	r2, sp, #288	; 0x120
    2df8:	mov	r0, r4
    2dfa:	bl	20c0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      Serial.print(store0); Serial.print(": ");Serial.println(oldName);
      printIndexList();
    #endif

    // remove from old direcory
    uint32_t jx=-1;
    2dfe:	mov.w	r6, #4294967295
    2e02:	b.n	28fc <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xf0>
    2e04:	.word	0x00000501
    2e08:	.word	0x000156d4
    2e0c:	.word	0x00001455
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2e10:	ldr	r5, [pc, #460]	; (2fe0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x7d4>)
    2e12:	str	r5, [sp, #88]	; 0x58
    2e14:	mov.w	r8, #0
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2e18:	ldr	r2, [r3, #16]
    2e1a:	subs	r2, #1
    2e1c:	str	r2, [r3, #16]
    2e1e:	cmp	r2, #0
    2e20:	bne.w	2874 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x68>
    2e24:	ldr	r4, [sp, #104]	; 0x68
    2e26:	cmp	r4, #0
    2e28:	beq.w	2874 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x68>
    2e2c:	ldr	r3, [r4, #0]
    2e2e:	ldr	r2, [pc, #436]	; (2fe4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x7d8>)
    2e30:	ldr	r3, [r3, #32]
    2e32:	cmp	r3, r2
    2e34:	bne.w	2f4c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x740>
    2e38:	ldr	r1, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2e3a:	str	r5, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2e3c:	cmp	r1, #0
    2e3e:	beq.n	2ed2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x6c6>
    2e40:	ldr	r3, [r1, #16]
    2e42:	subs	r3, #1
    2e44:	str	r3, [r1, #16]
    2e46:	cmp	r3, #0
    2e48:	bne.n	2ed2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x6c6>
    2e4a:	ldr	r6, [r4, #16]
    2e4c:	cmp	r6, #0
    2e4e:	beq.n	2ed2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x6c6>
    2e50:	ldr	r3, [r6, #0]
    2e52:	ldr	r3, [r3, #32]
    2e54:	cmp	r3, r2
    2e56:	bne.w	2fb2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x7a6>
    2e5a:	ldr	r1, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2e5c:	str	r5, [r6, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2e5e:	cmp	r1, #0
    2e60:	beq.n	2eca <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x6be>
    2e62:	ldr	r3, [r1, #16]
    2e64:	subs	r3, #1
    2e66:	str	r3, [r1, #16]
    2e68:	cbnz	r3, 2eca <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x6be>
    2e6a:	ldr	r7, [r6, #16]
    2e6c:	cbz	r7, 2eca <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x6be>
    2e6e:	ldr	r3, [r7, #0]
    2e70:	ldr	r3, [r3, #32]
    2e72:	cmp	r3, r2
    2e74:	bne.w	2fc6 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x7ba>
    2e78:	ldr	r1, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2e7a:	str	r5, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2e7c:	cbz	r1, 2ec2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x6b6>
    2e7e:	ldr	r3, [r1, #16]
    2e80:	subs	r3, #1
    2e82:	str	r3, [r1, #16]
    2e84:	cbnz	r3, 2ec2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x6b6>
    2e86:	ldr.w	r9, [r7, #16]
    2e8a:	cmp.w	r9, #0
    2e8e:	beq.n	2ec2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x6b6>
    2e90:	ldr.w	r3, [r9]
    2e94:	ldr	r3, [r3, #32]
    2e96:	cmp	r3, r2
    2e98:	bne.w	2fd8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x7cc>
    2e9c:	ldr.w	r2, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2ea0:	str.w	r5, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2ea4:	cbz	r2, 2eba <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x6ae>
    2ea6:	ldr	r3, [r2, #16]
    2ea8:	subs	r3, #1
    2eaa:	str	r3, [r2, #16]
    2eac:	cbnz	r3, 2eba <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x6ae>
    2eae:	ldr.w	r0, [r9, #16]
    2eb2:	cbz	r0, 2eba <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x6ae>
    2eb4:	ldr	r3, [r0, #0]
    2eb6:	ldr	r3, [r3, #32]
    2eb8:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    2eba:	mov	r0, r9
    2ebc:	movs	r1, #20
    2ebe:	bl	101b0 <operator delete(void*, unsigned int)>
    2ec2:	mov	r0, r7
    2ec4:	movs	r1, #20
    2ec6:	bl	101b0 <operator delete(void*, unsigned int)>
    2eca:	mov	r0, r6
    2ecc:	movs	r1, #20
    2ece:	bl	101b0 <operator delete(void*, unsigned int)>
    2ed2:	mov	r0, r4
    2ed4:	movs	r1, #20
    2ed6:	bl	101b0 <operator delete(void*, unsigned int)>
    2eda:	b.n	2874 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x68>
    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t storage) { return sd_name[storage-1];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    2edc:	add.w	sl, r4, sl, lsl #2
    2ee0:	add	r2, sp, #944	; 0x3b0
    2ee2:	ldr.w	r0, [sl, #88]	; 0x58
    2ee6:	ldr	r3, [r0, #0]
    2ee8:	add	r1, sp, #688	; 0x2b0
    2eea:	ldr	r3, [r3, #12]
    2eec:	blx	r3
      printIndexList();
    #endif

    if(p2.store == p3.store)
    {
      if(sd_rename(store0,oldName,newName)) 
    2eee:	mov	r8, r0
    2ef0:	cmp	r0, #0
    2ef2:	bne.w	2874 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x68>
        return true; 
      else 
      {
        // undo changes in index list
        if(jx<0) WriteIndexRecord(oldParent, p3o); else WriteIndexRecord(jx, pxo);
    2ef6:	mov	r1, r6
    2ef8:	add	r2, sp, #608	; 0x260
    2efa:	mov	r0, r4
    2efc:	bl	20c0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        WriteIndexRecord(handle, p1o);
    2f00:	add	r2, sp, #368	; 0x170
    2f02:	mov	r1, r5
    2f04:	mov	r0, r4
    2f06:	bl	20c0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        WriteIndexRecord(newParent,p2o);      
    2f0a:	add	r2, sp, #448	; 0x1c0
    2f0c:	mov	r1, r7
    2f0e:	mov	r0, r4
    2f10:	bl	20c0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        return false;
    2f14:	b.n	2874 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x68>
    2f16:	movs	r1, #17
    2f18:	ldr	r0, [pc, #204]	; (2fe8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x7dc>)
    2f1a:	bl	eae8 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2f1e:	ldrb.w	r1, [sp, #120]	; 0x78
    2f22:	ldr	r0, [pc, #200]	; (2fec <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x7e0>)
    2f24:	bl	100cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    2f28:	ldr	r0, [pc, #192]	; (2fec <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x7e0>)
    2f2a:	bl	10000 <Print::println()>
    2f2e:	ldr	r3, [sp, #124]	; 0x7c
    2f30:	b.n	2c62 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x456>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    2f32:	cmp	r3, #0
    2f34:	beq.w	2d0c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x500>
    if(sd_isOpen(f2))
    { f2.seek(0); // position file to beginning (ARDUINO opens at end of file)
      File f1 = sd_open(store0,oldName,FILE_READ);
      int nd;
      while(1)
      { nd=f1.read(buffer,nbuf);
    2f38:	mov	fp, r0
    2f3a:	b.n	2c64 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x458>
    }
    else
    { jx = p3.child;
      px = ReadIndexRecord(jx); 
      pxo = px;
      while(handle != px.sibling)
    2f3c:	mov	r6, r8
    2f3e:	b.n	28ee <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xe2>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    2f40:	movs	r3, #0
    2f42:	str	r3, [sp, #0]
    2f44:	movs	r2, #0
    2f46:	movs	r3, #0
    2f48:	blx	r1
    2f4a:	b.n	2a80 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x274>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2f4c:	mov	r0, r4
    2f4e:	blx	r3
    2f50:	b.n	2874 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x68>
    2f52:	ldr	r3, [sp, #104]	; 0x68
    2f54:	ldr	r5, [pc, #136]	; (2fe0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x7d4>)
    2f56:	b.n	2db2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5a6>
    bool sd_remove(uint32_t store, const char *filename) { return sdx[store]->remove(filename);  }
    2f58:	ldr.w	r0, [r9, #88]	; 0x58
    2f5c:	ldr	r3, [r0, #0]
    2f5e:	add	r1, sp, #944	; 0x3b0
    2f60:	ldr	r3, [r3, #16]
    2f62:	blx	r3
      f1.close();
      f2.close();
      if(nd<0) //  something went wrong
      { sd_remove(store1,newName); 
        // undo changes in index list
        if(jx<0) WriteIndexRecord(oldParent, p3o); else WriteIndexRecord(jx, pxo);
    2f64:	mov	r1, r6
    2f66:	add	r2, sp, #608	; 0x260
    2f68:	mov	r0, r4
    2f6a:	bl	20c0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        WriteIndexRecord(handle, p1o);
    2f6e:	add	r2, sp, #368	; 0x170
    2f70:	mov	r1, r5
    2f72:	mov	r0, r4
    2f74:	bl	20c0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        WriteIndexRecord(newParent,p2o);      
    2f78:	add	r2, sp, #448	; 0x1c0
    2f7a:	mov	r1, r7
    2f7c:	mov	r0, r4
    2f7e:	bl	20c0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        return false;
    2f82:	mov.w	r8, #0
    2f86:	b.n	2d20 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x514>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    2f88:	mov	r0, r3
    2f8a:	blx	r2
    2f8c:	b.n	2cb2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x4a6>
    2f8e:	blx	r3
    2f90:	b.n	2d04 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x4f8>
      // remove old files
      if(sd_remove(store0,oldName)) 
        return true; 
      else 
      { // undo changes in index list
        if(jx<0) WriteIndexRecord(oldParent, p3o); else WriteIndexRecord(jx, pxo);
    2f92:	mov	r1, r6
    2f94:	add	r2, sp, #608	; 0x260
    2f96:	mov	r0, r4
    2f98:	bl	20c0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        WriteIndexRecord(handle, p1o);
    2f9c:	add	r2, sp, #368	; 0x170
    2f9e:	mov	r1, r5
    2fa0:	mov	r0, r4
    2fa2:	bl	20c0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        WriteIndexRecord(newParent,p2o);      
    2fa6:	add	r2, sp, #448	; 0x1c0
    2fa8:	mov	r1, r7
    2faa:	mov	r0, r4
    2fac:	bl	20c0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        return false;
    2fb0:	b.n	2d20 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x514>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2fb2:	mov	r0, r6
    2fb4:	blx	r3
    2fb6:	b.n	2ed2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x6c6>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    2fb8:	blx	r3
    2fba:	b.n	2cb2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x4a6>
    2fbc:	blx	r2
    2fbe:	b.n	2d04 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x4f8>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2fc0:	mov	r0, r4
    2fc2:	blx	r3
    2fc4:	b.n	2db0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5a4>
    2fc6:	mov	r0, r7
    2fc8:	blx	r3
    2fca:	b.n	2eca <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x6be>
    2fcc:	mov	r0, r6
    2fce:	blx	r3
    2fd0:	b.n	2da8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x59c>
    2fd2:	mov	r0, r7
    2fd4:	blx	r3
    2fd6:	b.n	2da0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x594>
    2fd8:	mov	r0, r9
    2fda:	blx	r3
    2fdc:	b.n	2ec2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x6b6>
    2fde:	nop
    2fe0:	.word	0x000156d4
    2fe4:	.word	0x00001455
    2fe8:	.word	0x000159a0
    2fec:	.word	0x1fff09d0

00002ff0 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.15]>:
    file_.seek(pos);
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }

  bool MTPStorage_SD::DeleteObject(uint32_t object)
    2ff0:	push	{r4, r5, r6, r7, lr}
    2ff2:	adds	r2, r1, #1
    2ff4:	sub	sp, #500	; 0x1f4
    2ff6:	mov	r6, r1
    2ff8:	mov	r4, r0
    2ffa:	ite	ne
    2ffc:	movne	r5, r1
    2ffe:	moveq	r5, #0
    3000:	b.n	3010 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.15]+0x20>
    if(object==0xFFFFFFFFUL) return false; // don't do anything if trying to delete a root directory
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object); //
      if (!r.isdir) break;
      if (!r.child) break;
    3002:	ldr	r3, [sp, #84]	; 0x54
      if (!DeleteObject(r.child))  return false;
    3004:	mov	r1, r3
    if(object==0xFFFFFFFFUL) return false; // don't do anything if trying to delete a root directory
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object); //
      if (!r.isdir) break;
      if (!r.child) break;
    3006:	cbz	r3, 3030 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.15]+0x40>
      if (!DeleteObject(r.child))  return false;
    3008:	ldr	r3, [r4, #0]
    300a:	ldr	r3, [r3, #60]	; 0x3c
    300c:	blx	r3
    300e:	cbz	r0, 305c <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.15]+0x6c>
  {
    char filename[256];
    if(object==0xFFFFFFFFUL) return false; // don't do anything if trying to delete a root directory
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object); //
    3010:	mov	r2, r5
    3012:	mov	r1, r4
    3014:	mov	r0, sp
    3016:	bl	2288 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    301a:	movs	r2, #80	; 0x50
    301c:	mov	r1, sp
    301e:	add.w	r0, sp, r2
    3022:	bl	e8e8 <memcpy>
      if (!r.isdir) break;
    3026:	ldrb.w	r3, [sp, #92]	; 0x5c
      if (!r.child) break;
      if (!DeleteObject(r.child))  return false;
    302a:	mov	r0, r4
    char filename[256];
    if(object==0xFFFFFFFFUL) return false; // don't do anything if trying to delete a root directory
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object); //
      if (!r.isdir) break;
    302c:	cmp	r3, #0
    302e:	bne.n	3002 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.15]+0x12>
      if (!DeleteObject(r.child))  return false;
    }

    // We can't actually delete the root folder,
    // but if we deleted everything else, return true.
    if (object == 0xFFFFFFFFUL) return true;
    3030:	adds	r3, r6, #1
    3032:	beq.n	3092 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.15]+0xa2>

    ConstructFilename(object, filename, 256);
    3034:	mov.w	r3, #256	; 0x100
    3038:	add	r2, sp, #240	; 0xf0
    303a:	mov	r1, r6
    303c:	mov	r0, r4
    303e:	bl	26e4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    bool success;
    mtp_lock_storage(true);
    if (r.isdir) success = sd_rmdir(r.store,filename); else  success = sd_remove(r.store,filename);
    3042:	ldrb.w	r3, [sp, #92]	; 0x5c
    3046:	cbz	r3, 3098 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.15]+0xa8>
    bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
    3048:	ldrh.w	r3, [sp, #94]	; 0x5e
    304c:	add.w	r3, r4, r3, lsl #2
    3050:	add	r1, sp, #240	; 0xf0
    3052:	ldr	r0, [r3, #88]	; 0x58
    3054:	ldr	r3, [r0, #0]
    3056:	ldr	r3, [r3, #20]
    3058:	blx	r3
    mtp_lock_storage(false);
    if (!success) return false;
    305a:	cbnz	r0, 3062 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.15]+0x72>
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object); //
      if (!r.isdir) break;
      if (!r.child) break;
      if (!DeleteObject(r.child))  return false;
    305c:	movs	r0, #0
        { c = tmp.sibling;
        }
      }
    }
    return true;
  }
    305e:	add	sp, #500	; 0x1f4
    3060:	pop	{r4, r5, r6, r7, pc}
    if (r.isdir) success = sd_rmdir(r.store,filename); else  success = sd_remove(r.store,filename);
    mtp_lock_storage(false);
    if (!success) return false;
    
    r.name[0] = 0;
    int p = r.parent;
    3062:	ldr	r7, [sp, #80]	; 0x50
    mtp_lock_storage(true);
    if (r.isdir) success = sd_rmdir(r.store,filename); else  success = sd_remove(r.store,filename);
    mtp_lock_storage(false);
    if (!success) return false;
    
    r.name[0] = 0;
    3064:	movs	r3, #0
    int p = r.parent;
    WriteIndexRecord(object, r);
    3066:	add	r2, sp, #80	; 0x50
    3068:	mov	r1, r6
    306a:	mov	r0, r4
    mtp_lock_storage(true);
    if (r.isdir) success = sd_rmdir(r.store,filename); else  success = sd_remove(r.store,filename);
    mtp_lock_storage(false);
    if (!success) return false;
    
    r.name[0] = 0;
    306c:	strb.w	r3, [sp, #96]	; 0x60
    int p = r.parent;
    WriteIndexRecord(object, r);
    3070:	bl	20c0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record tmp = ReadIndexRecord(p);
    3074:	mov	r2, r7
    3076:	add	r0, sp, #160	; 0xa0
    3078:	mov	r1, r4
    307a:	bl	2288 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (tmp.child == object) 
    307e:	ldr	r5, [sp, #164]	; 0xa4
    3080:	cmp	r6, r5
    3082:	bne.n	30b0 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.15]+0xc0>
    { tmp.child = r.sibling;
    3084:	ldr	r3, [sp, #88]	; 0x58
    3086:	str	r3, [sp, #164]	; 0xa4
      WriteIndexRecord(p, tmp);
    3088:	add	r2, sp, #160	; 0xa0
    308a:	mov	r1, r7
    308c:	mov	r0, r4
    308e:	bl	20c0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        else 
        { c = tmp.sibling;
        }
      }
    }
    return true;
    3092:	movs	r0, #1
  }
    3094:	add	sp, #500	; 0x1f4
    3096:	pop	{r4, r5, r6, r7, pc}
    const char *sd_getFSName(uint32_t storage) { return sd_name[storage-1];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) { return sdx[store]->remove(filename);  }
    3098:	ldrh.w	r3, [sp, #94]	; 0x5e
    309c:	add.w	r3, r4, r3, lsl #2
    30a0:	add	r1, sp, #240	; 0xf0
    30a2:	ldr	r0, [r3, #88]	; 0x58
    30a4:	ldr	r3, [r0, #0]
    30a6:	ldr	r3, [r3, #16]
    30a8:	blx	r3
    ConstructFilename(object, filename, 256);
    bool success;
    mtp_lock_storage(true);
    if (r.isdir) success = sd_rmdir(r.store,filename); else  success = sd_remove(r.store,filename);
    mtp_lock_storage(false);
    if (!success) return false;
    30aa:	cmp	r0, #0
    30ac:	beq.n	305c <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.15]+0x6c>
    30ae:	b.n	3062 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.15]+0x72>
    { tmp.child = r.sibling;
      WriteIndexRecord(p, tmp);
    } 
    else 
    { int c = tmp.child;
      while (c) 
    30b0:	cmp	r5, #0
    30b2:	beq.n	3092 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.15]+0xa2>
      { tmp = ReadIndexRecord(c);
    30b4:	mov	r2, r5
    30b6:	mov	r1, r4
    30b8:	mov	r0, sp
    30ba:	bl	2288 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    30be:	movs	r2, #80	; 0x50
    30c0:	mov	r1, sp
    30c2:	add	r0, sp, #160	; 0xa0
    30c4:	bl	e8e8 <memcpy>
        if (tmp.sibling == object) 
    30c8:	ldr	r3, [sp, #168]	; 0xa8
    30ca:	cmp	r6, r3
    30cc:	beq.n	30d2 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.15]+0xe2>
    { tmp.child = r.sibling;
      WriteIndexRecord(p, tmp);
    } 
    else 
    { int c = tmp.child;
      while (c) 
    30ce:	mov	r5, r3
    30d0:	b.n	30b0 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.15]+0xc0>
      { tmp = ReadIndexRecord(c);
        if (tmp.sibling == object) 
        { tmp.sibling = r.sibling;
    30d2:	ldr	r3, [sp, #88]	; 0x58
    30d4:	str	r3, [sp, #168]	; 0xa8
          WriteIndexRecord(c, tmp);
    30d6:	mov	r0, r4
    30d8:	add	r2, sp, #160	; 0xa0
    30da:	mov	r1, r5
    30dc:	bl	20c0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        else 
        { c = tmp.sibling;
        }
      }
    }
    return true;
    30e0:	movs	r0, #1
    30e2:	b.n	305e <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.15]+0x6e>

000030e4 <MTPStorage_SD::DeleteObject(unsigned long)>:
  }

  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    char filename[256];
    if(object==0xFFFFFFFFUL) return false; // don't do anything if trying to delete a root directory
    30e4:	adds	r3, r1, #1
    30e6:	beq.n	30ec <MTPStorage_SD::DeleteObject(unsigned long)+0x8>
    30e8:	b.w	2ff0 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.15]>
        { c = tmp.sibling;
        }
      }
    }
    return true;
  }
    30ec:	movs	r0, #0
    30ee:	bx	lr

000030f0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
      return tmp.store;
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    30f0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (open_file_ == i && mode_ == mode) return;
    30f4:	ldr.w	r3, [r0, #320]	; 0x140
    30f8:	cmp	r3, r1
      return tmp.store;
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    30fa:	sub	sp, #292	; 0x124
    if (open_file_ == i && mode_ == mode) return;
    30fc:	beq.w	34f4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x404>
    3100:	mov	r6, r2
    char filename[256];
    uint16_t store = ConstructFilename(i, filename, 256);
    3102:	mov.w	r3, #256	; 0x100
    3106:	add	r2, sp, #32
    3108:	mov	r4, r0
    310a:	mov	r5, r1
    310c:	bl	26e4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    3110:	mov	r7, r0
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    3112:	ldr.w	r0, [r4, #284]	; 0x11c
    3116:	cmp	r0, #0
    3118:	beq.w	322c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    311c:	ldr	r2, [r0, #0]
    311e:	ldr	r3, [pc, #348]	; (327c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x18c>)
    3120:	ldr	r2, [r2, #68]	; 0x44
    3122:	cmp	r2, r3
    3124:	bne.w	3504 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    3128:	ldr	r0, [r0, #16]
    312a:	cmp	r0, #0
    312c:	beq.n	322c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    312e:	ldr	r2, [r0, #0]
    3130:	ldr	r2, [r2, #68]	; 0x44
    3132:	cmp	r2, r3
    3134:	bne.w	3504 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    3138:	ldr	r0, [r0, #16]
    313a:	cmp	r0, #0
    313c:	beq.n	322c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    313e:	ldr	r2, [r0, #0]
    3140:	ldr	r2, [r2, #68]	; 0x44
    3142:	cmp	r2, r3
    3144:	bne.w	3504 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    3148:	ldr	r0, [r0, #16]
    314a:	cmp	r0, #0
    314c:	beq.n	322c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    314e:	ldr	r2, [r0, #0]
    3150:	ldr	r2, [r2, #68]	; 0x44
    3152:	cmp	r2, r3
    3154:	bne.w	3504 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    3158:	ldr	r0, [r0, #16]
    315a:	cmp	r0, #0
    315c:	beq.n	322c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    315e:	ldr	r2, [r0, #0]
    3160:	ldr	r2, [r2, #68]	; 0x44
    3162:	cmp	r2, r3
    3164:	bne.w	3504 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    3168:	ldr	r0, [r0, #16]
    316a:	cmp	r0, #0
    316c:	beq.n	322c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    316e:	ldr	r2, [r0, #0]
    3170:	ldr	r2, [r2, #68]	; 0x44
    3172:	cmp	r2, r3
    3174:	bne.w	3504 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    3178:	ldr	r0, [r0, #16]
    317a:	cmp	r0, #0
    317c:	beq.n	322c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    317e:	ldr	r2, [r0, #0]
    3180:	ldr	r2, [r2, #68]	; 0x44
    3182:	cmp	r2, r3
    3184:	bne.w	3504 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    3188:	ldr	r0, [r0, #16]
    318a:	cmp	r0, #0
    318c:	beq.n	322c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    318e:	ldr	r2, [r0, #0]
    3190:	ldr	r2, [r2, #68]	; 0x44
    3192:	cmp	r2, r3
    3194:	bne.w	3504 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    3198:	ldr	r0, [r0, #16]
    319a:	cmp	r0, #0
    319c:	beq.n	322c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    319e:	ldr	r2, [r0, #0]
    31a0:	ldr	r2, [r2, #68]	; 0x44
    31a2:	cmp	r2, r3
    31a4:	bne.w	3504 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    31a8:	ldr	r0, [r0, #16]
    31aa:	cmp	r0, #0
    31ac:	beq.n	322c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    31ae:	ldr	r3, [r0, #0]
    31b0:	ldr	r3, [r3, #68]	; 0x44
    31b2:	blx	r3
    mtp_lock_storage(true);
    if(sd_isOpen(file_)) file_.close();
    31b4:	cmp	r0, #0
    31b6:	beq.n	322c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    31b8:	ldr.w	r0, [r4, #284]	; 0x11c
    31bc:	cmp	r0, #0
    31be:	beq.n	322c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    31c0:	ldr	r2, [r0, #0]
    31c2:	ldr	r3, [pc, #188]	; (3280 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x190>)
    31c4:	ldr	r2, [r2, #64]	; 0x40
    31c6:	cmp	r2, r3
    31c8:	bne.w	3508 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    31cc:	ldr	r0, [r0, #16]
    31ce:	cmp	r0, #0
    31d0:	beq.n	322c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    31d2:	ldr	r2, [r0, #0]
    31d4:	ldr	r2, [r2, #64]	; 0x40
    31d6:	cmp	r2, r3
    31d8:	bne.w	3508 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    31dc:	ldr	r0, [r0, #16]
    31de:	cbz	r0, 322c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    31e0:	ldr	r2, [r0, #0]
    31e2:	ldr	r2, [r2, #64]	; 0x40
    31e4:	cmp	r2, r3
    31e6:	bne.w	3508 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    31ea:	ldr	r0, [r0, #16]
    31ec:	cbz	r0, 322c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    31ee:	ldr	r2, [r0, #0]
    31f0:	ldr	r2, [r2, #64]	; 0x40
    31f2:	cmp	r2, r3
    31f4:	bne.w	3508 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    31f8:	ldr	r0, [r0, #16]
    31fa:	cbz	r0, 322c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    31fc:	ldr	r2, [r0, #0]
    31fe:	ldr	r2, [r2, #64]	; 0x40
    3200:	cmp	r2, r3
    3202:	bne.w	3508 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    3206:	ldr	r0, [r0, #16]
    3208:	cbz	r0, 322c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    320a:	ldr	r2, [r0, #0]
    320c:	ldr	r2, [r2, #64]	; 0x40
    320e:	cmp	r2, r3
    3210:	bne.w	3508 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    3214:	ldr	r0, [r0, #16]
    3216:	cbz	r0, 322c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    3218:	ldr	r2, [r0, #0]
    321a:	ldr	r2, [r2, #64]	; 0x40
    321c:	cmp	r2, r3
    321e:	bne.w	3508 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    3222:	ldr	r0, [r0, #16]
    3224:	cbz	r0, 322c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    3226:	ldr	r3, [r0, #0]
    3228:	ldr	r3, [r3, #64]	; 0x40
    322a:	blx	r3
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t storage) { return sd_name[storage-1];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    322c:	add.w	r7, r4, r7, lsl #2
    3230:	add	r2, sp, #32
    3232:	ldr	r1, [r7, #88]	; 0x58
    3234:	ldr	r3, [r1, #0]
    3236:	add	r0, sp, #12
    3238:	ldr	r7, [r3, #0]
    323a:	uxtb	r3, r6
    323c:	blx	r7
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    323e:	ldr.w	r2, [r4, #284]	; 0x11c
    3242:	cbz	r2, 324c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
    3244:	ldr	r3, [r2, #16]
    3246:	subs	r3, #1
    3248:	str	r3, [r2, #16]
    324a:	cbz	r3, 3288 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x198>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    324c:	ldr	r2, [sp, #28]
    324e:	str.w	r2, [r4, #284]	; 0x11c
		if (f) f->refcount++;
    3252:	cbz	r2, 326e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    3254:	ldr	r1, [r2, #16]
		return *this;
	}
	virtual ~File() {
    3256:	ldr	r3, [pc, #44]	; (3284 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x194>)
    3258:	str	r3, [sp, #12]
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    325a:	adds	r1, #1
    325c:	str	r1, [r2, #16]
    325e:	ldr	r1, [sp, #28]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3260:	cbz	r1, 326e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    3262:	ldr	r2, [r1, #16]
    3264:	subs	r2, #1
    3266:	str	r2, [r1, #16]
    3268:	cmp	r2, #0
    326a:	beq.w	33c4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2d4>
    file_=sd_open(store,filename,mode);
    open_file_ = i;
    326e:	str.w	r5, [r4, #320]	; 0x140
    mode_ = mode;
    3272:	str.w	r6, [r4, #316]	; 0x13c
    mtp_lock_storage(false);
  }
    3276:	add	sp, #292	; 0x124
    3278:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    327c:	.word	0x0000050d
    3280:	.word	0x00000501
    3284:	.word	0x000156d4
    3288:	ldr.w	r7, [r4, #284]	; 0x11c
    328c:	cmp	r7, #0
    328e:	beq.n	324c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
    3290:	ldr	r3, [r7, #0]
    3292:	ldr	r1, [pc, #680]	; (353c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x44c>)
    3294:	ldr	r3, [r3, #32]
    3296:	cmp	r3, r1
    3298:	bne.w	350c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x41c>
    329c:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    329e:	ldr	r3, [pc, #672]	; (3540 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>)
    32a0:	str	r3, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    32a2:	cmp	r0, #0
    32a4:	beq.w	33ba <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    32a8:	ldr	r2, [r0, #16]
    32aa:	subs	r2, #1
    32ac:	str	r2, [r0, #16]
    32ae:	cmp	r2, #0
    32b0:	bne.w	33ba <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    32b4:	ldr.w	r8, [r7, #16]
    32b8:	cmp.w	r8, #0
    32bc:	beq.n	33ba <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    32be:	ldr.w	r2, [r8]
    32c2:	ldr	r2, [r2, #32]
    32c4:	cmp	r2, r1
    32c6:	bne.w	352a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x43a>
    32ca:	ldr.w	r0, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    32ce:	str.w	r3, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    32d2:	cmp	r0, #0
    32d4:	beq.n	33b2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    32d6:	ldr	r2, [r0, #16]
    32d8:	subs	r2, #1
    32da:	str	r2, [r0, #16]
    32dc:	cmp	r2, #0
    32de:	bne.n	33b2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    32e0:	ldr.w	r9, [r8, #16]
    32e4:	cmp.w	r9, #0
    32e8:	beq.n	33b2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    32ea:	ldr.w	r2, [r9]
    32ee:	ldr	r2, [r2, #32]
    32f0:	cmp	r2, r1
    32f2:	bne.w	351e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x42e>
    32f6:	ldr.w	r0, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    32fa:	str.w	r3, [r9]
    32fe:	ldr.w	lr, [pc, #576]	; 3540 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3302:	cmp	r0, #0
    3304:	beq.n	33aa <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    3306:	ldr	r2, [r0, #16]
    3308:	subs	r2, #1
    330a:	str	r2, [r0, #16]
    330c:	cmp	r2, #0
    330e:	bne.n	33aa <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    3310:	ldr.w	sl, [r9, #16]
    3314:	cmp.w	sl, #0
    3318:	beq.n	33aa <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    331a:	ldr.w	r2, [sl]
    331e:	ldr	r2, [r2, #32]
    3320:	cmp	r2, r1
    3322:	bne.w	3536 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x446>
    3326:	ldr.w	r0, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    332a:	str.w	lr, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    332e:	cmp	r0, #0
    3330:	beq.n	33a2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    3332:	ldr	r2, [r0, #16]
    3334:	subs	r2, #1
    3336:	str	r2, [r0, #16]
    3338:	cmp	r2, #0
    333a:	bne.n	33a2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    333c:	ldr.w	fp, [sl, #16]
    3340:	cmp.w	fp, #0
    3344:	beq.n	33a2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    3346:	ldr.w	r2, [fp]
    334a:	ldr	r2, [r2, #32]
    334c:	cmp	r2, r1
    334e:	bne.w	354a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x45a>
    3352:	ldr.w	r2, [fp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3356:	str.w	r3, [fp]
    335a:	ldr	r0, [pc, #484]	; (3540 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    335c:	cbz	r2, 339a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>
    335e:	ldr	r3, [r2, #16]
    3360:	subs	r3, #1
    3362:	str	r3, [r2, #16]
    3364:	cbnz	r3, 339a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>
    3366:	ldr.w	r2, [fp, #16]
    336a:	cbz	r2, 339a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>
    336c:	ldr	r3, [r2, #0]
    336e:	ldr	r3, [r3, #32]
    3370:	cmp	r3, r1
    3372:	bne.w	3556 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x466>
    3376:	ldr	r1, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3378:	str	r0, [r2, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    337a:	cbz	r1, 3392 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2a2>
    337c:	ldr	r3, [r1, #16]
    337e:	subs	r3, #1
    3380:	str	r3, [r1, #16]
    3382:	cbnz	r3, 3392 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2a2>
    3384:	ldr	r0, [r2, #16]
    3386:	cbz	r0, 3392 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2a2>
    3388:	ldr	r3, [r0, #0]
    338a:	str	r2, [sp, #4]
    338c:	ldr	r3, [r3, #32]
    338e:	blx	r3
    3390:	ldr	r2, [sp, #4]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    3392:	mov	r0, r2
    3394:	movs	r1, #20
    3396:	bl	101b0 <operator delete(void*, unsigned int)>
    339a:	mov	r0, fp
    339c:	movs	r1, #20
    339e:	bl	101b0 <operator delete(void*, unsigned int)>
    33a2:	mov	r0, sl
    33a4:	movs	r1, #20
    33a6:	bl	101b0 <operator delete(void*, unsigned int)>
    33aa:	mov	r0, r9
    33ac:	movs	r1, #20
    33ae:	bl	101b0 <operator delete(void*, unsigned int)>
    33b2:	mov	r0, r8
    33b4:	movs	r1, #20
    33b6:	bl	101b0 <operator delete(void*, unsigned int)>
    33ba:	mov	r0, r7
    33bc:	movs	r1, #20
    33be:	bl	101b0 <operator delete(void*, unsigned int)>
    33c2:	b.n	324c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    33c4:	ldr	r7, [sp, #28]
    33c6:	cmp	r7, #0
    33c8:	beq.w	326e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    33cc:	ldr	r2, [r7, #0]
    33ce:	ldr	r1, [pc, #364]	; (353c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x44c>)
    33d0:	ldr	r2, [r2, #32]
    33d2:	cmp	r2, r1
    33d4:	bne.w	3512 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x422>
    33d8:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    33da:	str	r3, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    33dc:	cmp	r0, #0
    33de:	beq.w	34ea <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    33e2:	ldr	r2, [r0, #16]
    33e4:	subs	r2, #1
    33e6:	str	r2, [r0, #16]
    33e8:	cmp	r2, #0
    33ea:	bne.n	34ea <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    33ec:	ldr.w	r8, [r7, #16]
    33f0:	cmp.w	r8, #0
    33f4:	beq.n	34ea <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    33f6:	ldr.w	r2, [r8]
    33fa:	ldr	r2, [r2, #32]
    33fc:	cmp	r2, r1
    33fe:	bne.w	3524 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x434>
    3402:	ldr.w	r0, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3406:	str.w	r3, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    340a:	cmp	r0, #0
    340c:	beq.n	34e2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    340e:	ldr	r2, [r0, #16]
    3410:	subs	r2, #1
    3412:	str	r2, [r0, #16]
    3414:	cmp	r2, #0
    3416:	bne.n	34e2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    3418:	ldr.w	r9, [r8, #16]
    341c:	cmp.w	r9, #0
    3420:	beq.n	34e2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    3422:	ldr.w	r2, [r9]
    3426:	ldr	r2, [r2, #32]
    3428:	cmp	r2, r1
    342a:	bne.n	3518 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x428>
    342c:	ldr.w	r0, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3430:	str.w	r3, [r9]
    3434:	ldr.w	lr, [pc, #264]	; 3540 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3438:	cmp	r0, #0
    343a:	beq.n	34da <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    343c:	ldr	r2, [r0, #16]
    343e:	subs	r2, #1
    3440:	str	r2, [r0, #16]
    3442:	cmp	r2, #0
    3444:	bne.n	34da <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    3446:	ldr.w	sl, [r9, #16]
    344a:	cmp.w	sl, #0
    344e:	beq.n	34da <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    3450:	ldr.w	r2, [sl]
    3454:	ldr	r2, [r2, #32]
    3456:	cmp	r2, r1
    3458:	bne.n	3530 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x440>
    345a:	ldr.w	r0, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    345e:	str.w	lr, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3462:	cmp	r0, #0
    3464:	beq.n	34d2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    3466:	ldr	r2, [r0, #16]
    3468:	subs	r2, #1
    346a:	str	r2, [r0, #16]
    346c:	cmp	r2, #0
    346e:	bne.n	34d2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    3470:	ldr.w	fp, [sl, #16]
    3474:	cmp.w	fp, #0
    3478:	beq.n	34d2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    347a:	ldr.w	r2, [fp]
    347e:	ldr	r2, [r2, #32]
    3480:	cmp	r2, r1
    3482:	bne.n	3544 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x454>
    3484:	ldr.w	r2, [fp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3488:	str.w	r3, [fp]
    348c:	ldr	r0, [pc, #176]	; (3540 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    348e:	cbz	r2, 34ca <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    3490:	ldr	r3, [r2, #16]
    3492:	subs	r3, #1
    3494:	str	r3, [r2, #16]
    3496:	cbnz	r3, 34ca <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    3498:	ldr.w	r2, [fp, #16]
    349c:	cbz	r2, 34ca <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    349e:	ldr	r3, [r2, #0]
    34a0:	ldr	r3, [r3, #32]
    34a2:	cmp	r3, r1
    34a4:	bne.n	3550 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x460>
    34a6:	ldr	r1, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    34a8:	str	r0, [r2, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    34aa:	cbz	r1, 34c2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3d2>
    34ac:	ldr	r3, [r1, #16]
    34ae:	subs	r3, #1
    34b0:	str	r3, [r1, #16]
    34b2:	cbnz	r3, 34c2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3d2>
    34b4:	ldr	r0, [r2, #16]
    34b6:	cbz	r0, 34c2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3d2>
    34b8:	ldr	r3, [r0, #0]
    34ba:	str	r2, [sp, #4]
    34bc:	ldr	r3, [r3, #32]
    34be:	blx	r3
    34c0:	ldr	r2, [sp, #4]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    34c2:	mov	r0, r2
    34c4:	movs	r1, #20
    34c6:	bl	101b0 <operator delete(void*, unsigned int)>
    34ca:	mov	r0, fp
    34cc:	movs	r1, #20
    34ce:	bl	101b0 <operator delete(void*, unsigned int)>
    34d2:	mov	r0, sl
    34d4:	movs	r1, #20
    34d6:	bl	101b0 <operator delete(void*, unsigned int)>
    34da:	mov	r0, r9
    34dc:	movs	r1, #20
    34de:	bl	101b0 <operator delete(void*, unsigned int)>
    34e2:	mov	r0, r8
    34e4:	movs	r1, #20
    34e6:	bl	101b0 <operator delete(void*, unsigned int)>
    34ea:	mov	r0, r7
    34ec:	movs	r1, #20
    34ee:	bl	101b0 <operator delete(void*, unsigned int)>
    34f2:	b.n	326e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    if (open_file_ == i && mode_ == mode) return;
    34f4:	ldr.w	r3, [r0, #316]	; 0x13c
    34f8:	cmp	r3, r2
    34fa:	bne.w	3100 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x10>
    if(sd_isOpen(file_)) file_.close();
    file_=sd_open(store,filename,mode);
    open_file_ = i;
    mode_ = mode;
    mtp_lock_storage(false);
  }
    34fe:	add	sp, #292	; 0x124
    3500:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    3504:	blx	r2
    3506:	b.n	31b4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xc4>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    3508:	blx	r2
    350a:	b.n	322c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    350c:	mov	r0, r7
    350e:	blx	r3
    3510:	b.n	324c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
    3512:	mov	r0, r7
    3514:	blx	r2
    3516:	b.n	326e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    3518:	mov	r0, r9
    351a:	blx	r2
    351c:	b.n	34e2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    351e:	mov	r0, r9
    3520:	blx	r2
    3522:	b.n	33b2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    3524:	mov	r0, r8
    3526:	blx	r2
    3528:	b.n	34ea <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    352a:	mov	r0, r8
    352c:	blx	r2
    352e:	b.n	33ba <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    3530:	mov	r0, sl
    3532:	blx	r2
    3534:	b.n	34da <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    3536:	mov	r0, sl
    3538:	blx	r2
    353a:	b.n	33aa <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    353c:	.word	0x00001455
    3540:	.word	0x000156d4
    3544:	mov	r0, fp
    3546:	blx	r2
    3548:	b.n	34d2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    354a:	mov	r0, fp
    354c:	blx	r2
    354e:	b.n	33a2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    3550:	mov	r0, r2
    3552:	blx	r3
    3554:	b.n	34ca <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    3556:	mov	r0, r2
    3558:	blx	r3
    355a:	b.n	339a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>

0000355c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    355c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3560:	mov	r5, r0
    3562:	sub	sp, #8
    3564:	mov	r7, r2
    OpenFileByIndex(handle);
    3566:	movs	r2, #0
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    3568:	mov	r8, r3
    356a:	ldr.w	r9, [sp, #40]	; 0x28
    OpenFileByIndex(handle);
    356e:	bl	30f0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    3572:	ldr.w	r4, [r5, #284]	; 0x11c
    3576:	cmp	r4, #0
    3578:	beq.n	3650 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    357a:	ldr	r0, [r4, #0]
    357c:	ldr	r2, [pc, #308]	; (36b4 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x158>)
    357e:	ldr	r6, [r0, #52]	; 0x34
    3580:	cmp	r6, r2
    3582:	mov.w	r3, #0
    3586:	bne.n	3680 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x124>
    3588:	ldr	r1, [r4, #16]
    358a:	cmp	r1, #0
    358c:	beq.n	3648 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xec>
    358e:	ldr	r2, [r1, #0]
    3590:	ldr.w	sl, [r2, #52]	; 0x34
    3594:	cmp	sl, r6
    3596:	bne.n	368a <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x12e>
    3598:	ldr.w	lr, [r1, #16]
    359c:	cmp.w	lr, #0
    35a0:	beq.n	3656 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xfa>
    35a2:	ldr.w	r2, [lr]
    35a6:	ldr	r6, [r2, #52]	; 0x34
    35a8:	cmp	r6, sl
    35aa:	bne.n	3694 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x138>
    35ac:	ldr.w	lr, [lr, #16]
    35b0:	cmp.w	lr, #0
    35b4:	beq.n	3656 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xfa>
    35b6:	ldr.w	r2, [lr]
    35ba:	ldr.w	sl, [r2, #52]	; 0x34
    35be:	cmp	sl, r6
    35c0:	bne.n	369e <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x142>
    35c2:	ldr.w	lr, [lr, #16]
    35c6:	cmp.w	lr, #0
    35ca:	beq.n	3656 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xfa>
    35cc:	ldr.w	r3, [lr]
    35d0:	ldr	r6, [r3, #52]	; 0x34
    35d2:	cmp	r6, sl
    35d4:	bne.n	36a8 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x14c>
    35d6:	ldr.w	r6, [lr, #16]
    35da:	cmp	r6, #0
    35dc:	beq.n	3656 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xfa>
    35de:	ldr	r1, [r6, #0]
    35e0:	movs	r3, #0
    35e2:	str	r3, [sp, #0]
    35e4:	mov	r2, r7
    35e6:	mov	r0, r6
    35e8:	ldr	r1, [r1, #52]	; 0x34
    35ea:	blx	r1
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    35ec:	ldr.w	r4, [r5, #284]	; 0x11c
    35f0:	cmp	r4, #0
    35f2:	beq.n	3650 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    35f4:	ldr	r2, [r4, #0]
    35f6:	ldr	r3, [pc, #192]	; (36b8 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x15c>)
    35f8:	ldr	r5, [r2, #40]	; 0x28
    35fa:	cmp	r5, r3
    35fc:	bne.n	3662 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x106>
    35fe:	ldr	r0, [r4, #16]
    3600:	cbz	r0, 3650 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    3602:	ldr	r2, [r0, #0]
    3604:	ldr	r4, [r2, #40]	; 0x28
    3606:	cmp	r4, r3
    3608:	bne.n	3672 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    360a:	ldr	r0, [r0, #16]
    360c:	cbz	r0, 3650 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    360e:	ldr	r2, [r0, #0]
    3610:	ldr	r4, [r2, #40]	; 0x28
    3612:	cmp	r4, r3
    3614:	bne.n	3672 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    3616:	ldr	r0, [r0, #16]
    3618:	cbz	r0, 3650 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    361a:	ldr	r2, [r0, #0]
    361c:	ldr	r4, [r2, #40]	; 0x28
    361e:	cmp	r4, r3
    3620:	bne.n	3672 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    3622:	ldr	r0, [r0, #16]
    3624:	cbz	r0, 3650 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    3626:	ldr	r2, [r0, #0]
    3628:	ldr	r4, [r2, #40]	; 0x28
    362a:	cmp	r4, r3
    362c:	bne.n	3672 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    362e:	ldr	r0, [r0, #16]
    3630:	cbz	r0, 3650 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    3632:	ldr	r2, [r0, #0]
    3634:	ldr	r4, [r2, #40]	; 0x28
    3636:	cmp	r4, r3
    3638:	bne.n	3672 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    363a:	ldr	r0, [r0, #16]
    363c:	cbz	r0, 3650 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    363e:	ldr	r3, [r0, #0]
    3640:	mov	r2, r9
    3642:	mov	r1, r8
    3644:	ldr	r3, [r3, #40]	; 0x28
    3646:	b.n	366a <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x10e>
    3648:	ldr	r5, [r0, #40]	; 0x28
    364a:	ldr	r3, [pc, #108]	; (36b8 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x15c>)
    364c:	cmp	r5, r3
    364e:	bne.n	3662 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x106>
    mtp_lock_storage(true);
    file_.seek(pos);
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }
    3650:	add	sp, #8
    3652:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3656:	ldr	r5, [r0, #40]	; 0x28
    3658:	ldr	r3, [pc, #92]	; (36b8 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x15c>)
    365a:	cmp	r5, r3
    365c:	bne.n	3662 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x106>
    365e:	mov	r0, r1
    3660:	b.n	3602 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xa6>
    3662:	mov	r2, r9
    3664:	mov	r1, r8
    3666:	mov	r0, r4
    3668:	mov	r3, r5
    366a:	add	sp, #8
    366c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3670:	bx	r3
    3672:	mov	r2, r9
    3674:	mov	r1, r8
    3676:	mov	r3, r4
    3678:	add	sp, #8
    367a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    367e:	bx	r3
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    3680:	str	r3, [sp, #0]
    3682:	mov	r2, r7
    3684:	mov	r0, r4
    3686:	blx	r6
    3688:	b.n	35ec <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    368a:	str	r3, [sp, #0]
    368c:	mov	r2, r7
    368e:	mov	r0, r1
    3690:	blx	sl
    3692:	b.n	35ec <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    3694:	str	r3, [sp, #0]
    3696:	mov	r2, r7
    3698:	mov	r0, lr
    369a:	blx	r6
    369c:	b.n	35ec <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    369e:	str	r3, [sp, #0]
    36a0:	mov	r2, r7
    36a2:	mov	r0, lr
    36a4:	blx	sl
    36a6:	b.n	35ec <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    36a8:	movs	r3, #0
    36aa:	mov	r2, r7
    36ac:	mov	r0, lr
    36ae:	str	r3, [sp, #0]
    36b0:	blx	r6
    36b2:	b.n	35ec <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    36b4:	.word	0x000004c9
    36b8:	.word	0x0000047d

000036bc <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>:
    }
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t storage, uint32_t parent,  bool folder, const char* filename)
  {
    36bc:	push	{r4, r5, r6, r7, lr}
    36be:	mov	r7, r3
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = storage-1;
    36c0:	adds	r3, r2, #1
    36c2:	it	eq
    36c4:	addeq.w	r5, r1, #4294967295
    }
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t storage, uint32_t parent,  bool folder, const char* filename)
  {
    36c8:	sub	sp, #420	; 0x1a4
    36ca:	it	ne
    36cc:	movne	r5, r2
    36ce:	mov	r4, r0
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = storage-1;
    Record p = ReadIndexRecord(parent);
    36d0:	mov	r2, r5
    36d2:	mov	r0, sp
    36d4:	mov	r1, r4
    36d6:	bl	2288 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record r;
    if (strlen(filename) > 62) return 0;
    36da:	ldr	r0, [sp, #440]	; 0x1b8
    36dc:	bl	12240 <strlen>
    36e0:	cmp	r0, #62	; 0x3e
    36e2:	bls.n	36ec <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x30>
    36e4:	movs	r6, #0
    else 
    {
      OpenFileByIndex(ret, FILE_WRITE_BEGIN);
    }
    return ret;
  }
    36e6:	mov	r0, r6
    36e8:	add	sp, #420	; 0x1a4
    36ea:	pop	{r4, r5, r6, r7, pc}
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = storage-1;
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    36ec:	adds	r2, r0, #1
    36ee:	ldr	r1, [sp, #440]	; 0x1b8
    36f0:	add	r0, sp, #96	; 0x60
    36f2:	bl	e8e8 <memcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    36f6:	ldr.w	r6, [r4, #324]	; 0x144
    if (parent == 0xFFFFFFFFUL) parent = storage-1;
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.store = p.store;
    36fa:	ldrh.w	r3, [sp, #14]
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    36fe:	ldr	r2, [sp, #4]
    if (parent == 0xFFFFFFFFUL) parent = storage-1;
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.store = p.store;
    3700:	strh.w	r3, [sp, #94]	; 0x5e
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    3704:	adds	r1, r6, #1
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    3706:	movs	r3, #0
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    3708:	str.w	r1, [r4, #324]	; 0x144
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    370c:	str	r3, [sp, #84]	; 0x54
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    370e:	mov	r1, r6
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    3710:	movs	r3, #1
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    3712:	str	r2, [sp, #88]	; 0x58
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    3714:	mov	r0, r4
    3716:	add	r2, sp, #80	; 0x50
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.store = p.store;
    r.parent = parent;
    3718:	str	r5, [sp, #80]	; 0x50
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    371a:	strb.w	r7, [sp, #92]	; 0x5c
    // New folder is empty, scanned = true.
    r.scanned = 1;
    371e:	strb.w	r3, [sp, #93]	; 0x5d
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    3722:	bl	20c0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    3726:	mov	r2, sp
    3728:	mov	r1, r5
    372a:	mov	r0, r4
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    372c:	str	r6, [sp, #4]
    WriteIndexRecord(parent, p);
    372e:	bl	20c0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    3732:	cbnz	r7, 3744 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x88>
      sd_mkdir(store,filename);
      mtp_lock_storage(false);
    } 
    else 
    {
      OpenFileByIndex(ret, FILE_WRITE_BEGIN);
    3734:	mov	r0, r4
    3736:	movs	r2, #2
    3738:	mov	r1, r6
    373a:	bl	30f0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    }
    return ret;
  }
    373e:	mov	r0, r6
    3740:	add	sp, #420	; 0x1a4
    3742:	pop	{r4, r5, r6, r7, pc}
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    if (folder) 
    {
      char filename[256];
      uint16_t store =ConstructFilename(ret, filename, 256);
    3744:	add	r2, sp, #160	; 0xa0
    3746:	mov	r1, r6
    3748:	mov.w	r3, #256	; 0x100
    374c:	mov	r0, r4
    374e:	bl	26e4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    3752:	add.w	r0, r4, r0, lsl #2
    3756:	add	r1, sp, #160	; 0xa0
    3758:	ldr	r0, [r0, #88]	; 0x58
    375a:	ldr	r3, [r0, #0]
    375c:	ldr	r3, [r3, #8]
    375e:	blx	r3
    else 
    {
      OpenFileByIndex(ret, FILE_WRITE_BEGIN);
    }
    return ret;
  }
    3760:	mov	r0, r6
    3762:	add	sp, #420	; 0x1a4
    3764:	pop	{r4, r5, r6, r7, pc}
    3766:	nop

00003768 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>:
      AppendIndexRecord(r);
    }
  }

  void MTPStorage_SD::ScanDir(uint32_t storage, uint32_t i) 
  { Record record = ReadIndexRecord(i);
    3768:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    376c:	sub	sp, #180	; 0xb4
    376e:	mov	r1, r0
    3770:	mov	r4, r0
    3772:	add	r0, sp, #16
    3774:	mov	r8, r2
    3776:	bl	2288 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    377a:	ldrb.w	r3, [sp, #28]
    377e:	cbz	r3, 3786 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1e>
    3780:	ldrb.w	r2, [sp, #29]
    3784:	cbz	r2, 378c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x24>
      }
      record.scanned = true;
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }
    3786:	add	sp, #180	; 0xb4
    3788:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  }

  void MTPStorage_SD::ScanDir(uint32_t storage, uint32_t i) 
  { Record record = ReadIndexRecord(i);
    if (record.isdir && !record.scanned) {
      OpenFileByIndex(i);
    378c:	mov	r0, r4
    378e:	mov	r1, r8
    3790:	bl	30f0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    3794:	ldr.w	r0, [r4, #284]	; 0x11c
    3798:	cmp	r0, #0
    379a:	beq.n	3786 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1e>
    379c:	ldr	r3, [r0, #0]
    379e:	ldr	r7, [pc, #204]	; (386c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x104>)
    37a0:	ldr	r3, [r3, #68]	; 0x44
    37a2:	cmp	r3, r7
    37a4:	bne.n	3866 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xfe>
    37a6:	ldr	r0, [r0, #16]
    37a8:	cmp	r0, #0
    37aa:	beq.n	3786 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1e>
    37ac:	ldr	r3, [r0, #0]
    37ae:	ldr	r3, [r3, #68]	; 0x44
    37b0:	cmp	r3, r7
    37b2:	bne.n	3866 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xfe>
    37b4:	ldr	r0, [r0, #16]
    37b6:	cmp	r0, #0
    37b8:	beq.n	3786 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1e>
    37ba:	ldr	r3, [r0, #0]
    37bc:	ldr	r3, [r3, #68]	; 0x44
    37be:	cmp	r3, r7
    37c0:	bne.n	3866 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xfe>
    37c2:	ldr	r0, [r0, #16]
    37c4:	cmp	r0, #0
    37c6:	beq.n	3786 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1e>
    37c8:	ldr	r3, [r0, #0]
    37ca:	ldr	r3, [r3, #68]	; 0x44
    37cc:	cmp	r3, r7
    37ce:	bne.n	3866 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xfe>
    37d0:	ldr	r0, [r0, #16]
    37d2:	cmp	r0, #0
    37d4:	beq.n	3786 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1e>
    37d6:	ldr	r3, [r0, #0]
    37d8:	ldr	r3, [r3, #68]	; 0x44
    37da:	cmp	r3, r7
    37dc:	bne.n	3866 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xfe>
    37de:	ldr	r0, [r0, #16]
    37e0:	cmp	r0, #0
    37e2:	beq.n	3786 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1e>
    37e4:	ldr	r3, [r0, #0]
    37e6:	ldr	r3, [r3, #68]	; 0x44
    37e8:	blx	r3
      if (!sd_isOpen(file_)) return;
    37ea:	cmp	r0, #0
    37ec:	beq.n	3786 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1e>
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    37ee:	ldr.w	r9, [pc, #132]	; 3874 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    37f2:	ldr.w	fp, [pc, #132]	; 3878 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x110>
    37f6:	movs	r5, #0
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    37f8:	ldr.w	r1, [r4, #284]	; 0x11c
    37fc:	cmp	r1, #0
    37fe:	beq.n	387c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x114>
    3800:	ldr	r3, [r1, #0]
    3802:	ldr	r2, [pc, #108]	; (3870 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x108>)
    3804:	ldr	r3, [r3, #80]	; 0x50
    3806:	cmp	r3, r2
    3808:	bne.w	3d1e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5b6>
    380c:	ldr	r1, [r1, #16]
    380e:	cmp	r1, #0
    3810:	beq.n	387c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x114>
    3812:	ldr	r3, [r1, #0]
    3814:	ldr	r3, [r3, #80]	; 0x50
    3816:	cmp	r3, r2
    3818:	bne.w	3d1e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5b6>
    381c:	ldr	r1, [r1, #16]
    381e:	cmp	r1, #0
    3820:	beq.n	387c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x114>
    3822:	ldr	r3, [r1, #0]
    3824:	ldr	r3, [r3, #80]	; 0x50
    3826:	cmp	r3, r2
    3828:	bne.w	3d1e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5b6>
    382c:	ldr	r1, [r1, #16]
    382e:	cbz	r1, 387c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x114>
    3830:	ldr	r3, [r1, #0]
    3832:	ldr	r3, [r3, #80]	; 0x50
    3834:	cmp	r3, r2
    3836:	bne.w	3d1e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5b6>
    383a:	ldr	r1, [r1, #16]
    383c:	cbz	r1, 387c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x114>
    383e:	ldr	r3, [r1, #0]
    3840:	ldr	r3, [r3, #80]	; 0x50
    3842:	cmp	r3, r2
    3844:	bne.w	3d1e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5b6>
    3848:	ldr	r1, [r1, #16]
    384a:	cbz	r1, 387c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x114>
    384c:	ldr	r3, [r1, #0]
    384e:	ldr	r3, [r3, #80]	; 0x50
    3850:	cmp	r3, r2
    3852:	bne.w	3d1e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5b6>
    3856:	ldr	r1, [r1, #16]
    3858:	cbz	r1, 387c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x114>
    385a:	ldr	r3, [r1, #0]
    385c:	movs	r2, #0
    385e:	ldr	r3, [r3, #80]	; 0x50
    3860:	add	r0, sp, #96	; 0x60
    3862:	blx	r3
    3864:	b.n	3892 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x12a>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    3866:	blx	r3
    3868:	b.n	37ea <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x82>
    386a:	nop
    386c:	.word	0x0000050d
    3870:	.word	0x00000539
    3874:	.word	0x000156d4
    3878:	.word	0x00001455
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    387c:	movs	r3, #0
    387e:	mov.w	r2, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    3882:	str.w	r9, [sp, #96]	; 0x60
    3886:	strb.w	r3, [sp, #100]	; 0x64
    388a:	strb.w	r3, [sp, #108]	; 0x6c
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
    388e:	str	r3, [sp, #112]	; 0x70
    3890:	str	r2, [sp, #104]	; 0x68
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3892:	ldr.w	r2, [r4, #304]	; 0x130
    3896:	cmp	r2, #0
    3898:	beq.n	392c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1c4>
    389a:	ldr	r3, [r2, #16]
    389c:	subs	r3, #1
    389e:	str	r3, [r2, #16]
    38a0:	cmp	r3, #0
    38a2:	bne.n	392c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1c4>
    38a4:	ldr.w	r6, [r4, #304]	; 0x130
    38a8:	cmp	r6, #0
    38aa:	beq.n	392c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1c4>
    38ac:	ldr	r3, [r6, #0]
    38ae:	ldr	r3, [r3, #32]
    38b0:	cmp	r3, fp
    38b2:	bne.w	3d40 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5d8>
    38b6:	ldr	r2, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    38b8:	str.w	r9, [r6]
    38bc:	ldr	r1, [pc, #612]	; (3b24 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3bc>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    38be:	cbz	r2, 3924 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1bc>
    38c0:	ldr	r3, [r2, #16]
    38c2:	subs	r3, #1
    38c4:	str	r3, [r2, #16]
    38c6:	cbnz	r3, 3924 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1bc>
    38c8:	ldr.w	sl, [r6, #16]
    38cc:	cmp.w	sl, #0
    38d0:	beq.n	3924 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1bc>
    38d2:	ldr.w	r3, [sl]
    38d6:	ldr	r3, [r3, #32]
    38d8:	cmp	r3, fp
    38da:	bne.w	3ef2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x78a>
    38de:	ldr.w	r2, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    38e2:	str.w	r1, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    38e6:	cbz	r2, 391c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b4>
    38e8:	ldr	r3, [r2, #16]
    38ea:	subs	r3, #1
    38ec:	str	r3, [r2, #16]
    38ee:	cbnz	r3, 391c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b4>
    38f0:	ldr.w	r3, [sl, #16]
    38f4:	cbz	r3, 391c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b4>
    38f6:	ldr	r2, [r3, #0]
    38f8:	ldr	r2, [r2, #32]
    38fa:	cmp	r2, fp
    38fc:	bne.w	3f04 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x79c>
    3900:	ldr	r1, [r3, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3902:	str.w	r9, [r3]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3906:	cbz	r1, 3914 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ac>
    3908:	ldr	r2, [r1, #16]
    390a:	subs	r2, #1
    390c:	str	r2, [r1, #16]
    390e:	cmp	r2, #0
    3910:	beq.w	3d58 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5f0>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    3914:	mov	r0, r3
    3916:	movs	r1, #20
    3918:	bl	101b0 <operator delete(void*, unsigned int)>
    391c:	mov	r0, sl
    391e:	movs	r1, #20
    3920:	bl	101b0 <operator delete(void*, unsigned int)>
    3924:	mov	r0, r6
    3926:	movs	r1, #20
    3928:	bl	101b0 <operator delete(void*, unsigned int)>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    392c:	ldr	r3, [sp, #112]	; 0x70
    392e:	str.w	r3, [r4, #304]	; 0x130
		if (f) f->refcount++;
    3932:	cmp	r3, #0
    3934:	beq.n	39d4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26c>
    3936:	ldr	r2, [r3, #16]
		return *this;
	}
	virtual ~File() {
    3938:	ldr	r1, [pc, #488]	; (3b24 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3bc>)
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    393a:	adds	r2, #1
    393c:	str	r2, [r3, #16]
    393e:	ldr	r2, [sp, #112]	; 0x70
		return *this;
	}
	virtual ~File() {
    3940:	str.w	r9, [sp, #96]	; 0x60
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3944:	cmp	r2, #0
    3946:	beq.n	39d4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26c>
    3948:	ldr	r3, [r2, #16]
    394a:	subs	r3, #1
    394c:	str	r3, [r2, #16]
    394e:	cmp	r3, #0
    3950:	bne.n	39d4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26c>
    3952:	ldr	r6, [sp, #112]	; 0x70
    3954:	cmp	r6, #0
    3956:	beq.n	39d4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26c>
    3958:	ldr	r3, [r6, #0]
    395a:	ldr	r3, [r3, #32]
    395c:	cmp	r3, fp
    395e:	bne.w	3d3a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5d2>
    3962:	ldr	r2, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3964:	str	r1, [r6, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3966:	cbz	r2, 39cc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x264>
    3968:	ldr	r3, [r2, #16]
    396a:	subs	r3, #1
    396c:	str	r3, [r2, #16]
    396e:	cbnz	r3, 39cc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x264>
    3970:	ldr.w	sl, [r6, #16]
    3974:	cmp.w	sl, #0
    3978:	beq.n	39cc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x264>
    397a:	ldr.w	r3, [sl]
    397e:	ldr	r3, [r3, #32]
    3980:	cmp	r3, fp
    3982:	bne.w	3ef8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x790>
    3986:	ldr.w	r2, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    398a:	str.w	r1, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    398e:	cbz	r2, 39c4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x25c>
    3990:	ldr	r3, [r2, #16]
    3992:	subs	r3, #1
    3994:	str	r3, [r2, #16]
    3996:	cbnz	r3, 39c4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x25c>
    3998:	ldr.w	r3, [sl, #16]
    399c:	cbz	r3, 39c4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x25c>
    399e:	ldr	r2, [r3, #0]
    39a0:	ldr	r2, [r2, #32]
    39a2:	cmp	r2, fp
    39a4:	bne.w	3efe <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x796>
    39a8:	ldr	r1, [r3, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    39aa:	str.w	r9, [r3]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    39ae:	cbz	r1, 39bc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x254>
    39b0:	ldr	r2, [r1, #16]
    39b2:	subs	r2, #1
    39b4:	str	r2, [r1, #16]
    39b6:	cmp	r2, #0
    39b8:	beq.w	3e28 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6c0>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    39bc:	mov	r0, r3
    39be:	movs	r1, #20
    39c0:	bl	101b0 <operator delete(void*, unsigned int)>
    39c4:	mov	r0, sl
    39c6:	movs	r1, #20
    39c8:	bl	101b0 <operator delete(void*, unsigned int)>
    39cc:	mov	r0, r6
    39ce:	movs	r1, #20
    39d0:	bl	101b0 <operator delete(void*, unsigned int)>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    39d4:	ldr.w	r0, [r4, #304]	; 0x130
    39d8:	cmp	r0, #0
    39da:	beq.w	3b06 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39e>
    39de:	ldr	r3, [r0, #0]
    39e0:	ldr	r3, [r3, #68]	; 0x44
    39e2:	cmp	r3, r7
    39e4:	bne.w	3b1e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b6>
    39e8:	ldr	r0, [r0, #16]
    39ea:	cmp	r0, #0
    39ec:	beq.w	3b06 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39e>
    39f0:	ldr	r3, [r0, #0]
    39f2:	ldr	r3, [r3, #68]	; 0x44
    39f4:	cmp	r3, r7
    39f6:	bne.w	3b1e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b6>
    39fa:	ldr	r0, [r0, #16]
    39fc:	cmp	r0, #0
    39fe:	beq.w	3b06 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39e>
    3a02:	ldr	r3, [r0, #0]
    3a04:	ldr	r3, [r3, #68]	; 0x44
    3a06:	cmp	r3, r7
    3a08:	bne.w	3b1e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b6>
    3a0c:	ldr	r0, [r0, #16]
    3a0e:	cmp	r0, #0
    3a10:	beq.n	3b06 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39e>
    3a12:	ldr	r3, [r0, #0]
    3a14:	ldr	r3, [r3, #68]	; 0x44
    3a16:	cmp	r3, r7
    3a18:	bne.w	3b1e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b6>
    3a1c:	ldr	r0, [r0, #16]
    3a1e:	cmp	r0, #0
    3a20:	beq.n	3b06 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39e>
    3a22:	ldr	r3, [r0, #0]
    3a24:	ldr	r3, [r3, #68]	; 0x44
    3a26:	cmp	r3, r7
    3a28:	bne.n	3b1e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b6>
    3a2a:	ldr	r0, [r0, #16]
    3a2c:	cmp	r0, #0
    3a2e:	beq.n	3b06 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39e>
    3a30:	ldr	r3, [r0, #0]
    3a32:	ldr	r3, [r3, #68]	; 0x44
    3a34:	cmp	r3, r7
    3a36:	bne.n	3b1e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b6>
    3a38:	ldr	r0, [r0, #16]
    3a3a:	cmp	r0, #0
    3a3c:	beq.n	3b06 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39e>
    3a3e:	ldr	r3, [r0, #0]
    3a40:	ldr	r3, [r3, #68]	; 0x44
    3a42:	cmp	r3, r7
    3a44:	bne.n	3b1e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b6>
    3a46:	ldr	r0, [r0, #16]
    3a48:	cmp	r0, #0
    3a4a:	beq.n	3b06 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39e>
    3a4c:	ldr	r3, [r0, #0]
    3a4e:	ldr	r3, [r3, #68]	; 0x44
    3a50:	cmp	r3, r7
    3a52:	bne.n	3b1e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b6>
    3a54:	ldr	r0, [r0, #16]
    3a56:	cmp	r0, #0
    3a58:	beq.n	3b06 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39e>
    3a5a:	ldr	r3, [r0, #0]
    3a5c:	ldr	r3, [r3, #68]	; 0x44
    3a5e:	blx	r3
      int sibling = 0;
      while (true) 
      { mtp_lock_storage(true);
        child_=file_.openNextFile();
        mtp_lock_storage(false);
        if(!sd_isOpen(child_)) break;
    3a60:	cmp	r0, #0
    3a62:	beq.n	3b06 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39e>
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    3a64:	ldr.w	r3, [r4, #304]	; 0x130

        Record r;
        r.store = record.store;
    3a68:	ldrh.w	r2, [sp, #30]
        r.parent = i;
    3a6c:	str.w	r8, [sp, #96]	; 0x60
        r.sibling = sibling;
    3a70:	str	r5, [sp, #104]	; 0x68
        child_=file_.openNextFile();
        mtp_lock_storage(false);
        if(!sd_isOpen(child_)) break;

        Record r;
        r.store = record.store;
    3a72:	strh.w	r2, [sp, #110]	; 0x6e
    3a76:	cmp	r3, #0
    3a78:	beq.w	3c92 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x52a>
    3a7c:	ldr	r1, [r3, #0]
    3a7e:	ldr	r2, [pc, #168]	; (3b28 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c0>)
    3a80:	ldr	r1, [r1, #76]	; 0x4c
    3a82:	cmp	r1, r2
    3a84:	bne.n	3b2c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c4>
    3a86:	ldr	r0, [r3, #16]
    3a88:	cmp	r0, #0
    3a8a:	beq.w	3c92 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x52a>
    3a8e:	ldr	r1, [r0, #0]
    3a90:	ldr	r1, [r1, #76]	; 0x4c
    3a92:	cmp	r1, r2
    3a94:	bne.n	3b2e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c6>
    3a96:	ldr	r0, [r0, #16]
    3a98:	cmp	r0, #0
    3a9a:	beq.w	3c92 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x52a>
    3a9e:	ldr	r1, [r0, #0]
    3aa0:	ldr	r1, [r1, #76]	; 0x4c
    3aa2:	cmp	r1, r2
    3aa4:	bne.n	3b2e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c6>
    3aa6:	ldr	r0, [r0, #16]
    3aa8:	cmp	r0, #0
    3aaa:	beq.w	3c92 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x52a>
    3aae:	ldr	r1, [r0, #0]
    3ab0:	ldr	r1, [r1, #76]	; 0x4c
    3ab2:	cmp	r1, r2
    3ab4:	bne.n	3b2e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c6>
    3ab6:	ldr	r0, [r0, #16]
    3ab8:	cmp	r0, #0
    3aba:	beq.w	3c92 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x52a>
    3abe:	ldr	r1, [r0, #0]
    3ac0:	ldr	r1, [r1, #76]	; 0x4c
    3ac2:	cmp	r1, r2
    3ac4:	bne.n	3b2e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c6>
    3ac6:	ldr	r0, [r0, #16]
    3ac8:	cmp	r0, #0
    3aca:	beq.w	3c92 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x52a>
    3ace:	ldr	r1, [r0, #0]
    3ad0:	ldr	r1, [r1, #76]	; 0x4c
    3ad2:	cmp	r1, r2
    3ad4:	bne.n	3b2e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c6>
    3ad6:	ldr	r0, [r0, #16]
    3ad8:	cmp	r0, #0
    3ada:	beq.w	3c92 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x52a>
    3ade:	ldr	r1, [r0, #0]
    3ae0:	ldr	r1, [r1, #76]	; 0x4c
    3ae2:	cmp	r1, r2
    3ae4:	bne.n	3b2e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c6>
    3ae6:	ldr	r0, [r0, #16]
    3ae8:	cmp	r0, #0
    3aea:	beq.w	3c92 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x52a>
    3aee:	ldr	r1, [r0, #0]
    3af0:	ldr	r1, [r1, #76]	; 0x4c
    3af2:	cmp	r1, r2
    3af4:	bne.n	3b2e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c6>
    3af6:	ldr	r0, [r0, #16]
    3af8:	cmp	r0, #0
    3afa:	beq.w	3c92 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x52a>
    3afe:	ldr	r3, [r0, #0]
    3b00:	ldr	r3, [r3, #76]	; 0x4c
    3b02:	blx	r3
    3b04:	b.n	3b30 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c8>
        r.scanned = false;
        sd_getName(child_,r.name,64);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    3b06:	movs	r3, #1
      record.child = sibling;
      WriteIndexRecord(i, record);
    3b08:	add	r2, sp, #16
    3b0a:	mov	r1, r8
    3b0c:	mov	r0, r4
        sd_getName(child_,r.name,64);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
      record.child = sibling;
    3b0e:	str	r5, [sp, #20]
        r.scanned = false;
        sd_getName(child_,r.name,64);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    3b10:	strb.w	r3, [sp, #29]
      record.child = sibling;
      WriteIndexRecord(i, record);
    3b14:	bl	20c0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    }
  }
    3b18:	add	sp, #180	; 0xb4
    3b1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    3b1e:	blx	r3
    3b20:	b.n	3a60 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2f8>
    3b22:	nop
    3b24:	.word	0x000156d4
    3b28:	.word	0x0000052d
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    3b2c:	mov	r0, r3
    3b2e:	blx	r1

        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
    3b30:	strb.w	r0, [sp, #108]	; 0x6c
    3b34:	ldr.w	r3, [r4, #304]	; 0x130
        r.child = r.isdir ? 0 : child_.size();
    3b38:	cmp	r0, #0
    3b3a:	beq.w	3c98 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x530>
    3b3e:	movs	r0, #0
        r.scanned = false;
    3b40:	movs	r2, #0
        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : child_.size();
    3b42:	str	r0, [sp, #100]	; 0x64
        r.scanned = false;
    3b44:	strb.w	r2, [sp, #109]	; 0x6d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    3b48:	cmp	r3, #0
    3b4a:	beq.w	3d1a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5b2>
    3b4e:	ldr	r1, [r3, #0]
    3b50:	ldr	r2, [pc, #500]	; (3d48 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5e0>)
    3b52:	ldr	r1, [r1, #72]	; 0x48
    3b54:	cmp	r1, r2
    3b56:	bne.w	3d12 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5aa>
    3b5a:	ldr	r0, [r3, #16]
    3b5c:	cmp	r0, #0
    3b5e:	beq.w	3d1a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5b2>
    3b62:	ldr	r3, [r0, #0]
    3b64:	ldr	r3, [r3, #72]	; 0x48
    3b66:	cmp	r3, r2
    3b68:	bne.n	3bdc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x474>
    3b6a:	ldr	r0, [r0, #16]
    3b6c:	cmp	r0, #0
    3b6e:	beq.w	3d1a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5b2>
    3b72:	ldr	r3, [r0, #0]
    3b74:	ldr	r3, [r3, #72]	; 0x48
    3b76:	cmp	r3, r2
    3b78:	bne.n	3bdc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x474>
    3b7a:	ldr	r0, [r0, #16]
    3b7c:	cmp	r0, #0
    3b7e:	beq.w	3d1a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5b2>
    3b82:	ldr	r3, [r0, #0]
    3b84:	ldr	r3, [r3, #72]	; 0x48
    3b86:	cmp	r3, r2
    3b88:	bne.n	3bdc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x474>
    3b8a:	ldr	r0, [r0, #16]
    3b8c:	cmp	r0, #0
    3b8e:	beq.w	3d1a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5b2>
    3b92:	ldr	r3, [r0, #0]
    3b94:	ldr	r3, [r3, #72]	; 0x48
    3b96:	cmp	r3, r2
    3b98:	bne.n	3bdc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x474>
    3b9a:	ldr	r0, [r0, #16]
    3b9c:	cmp	r0, #0
    3b9e:	beq.w	3d1a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5b2>
    3ba2:	ldr	r3, [r0, #0]
    3ba4:	ldr	r3, [r3, #72]	; 0x48
    3ba6:	cmp	r3, r2
    3ba8:	bne.n	3bdc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x474>
    3baa:	ldr	r0, [r0, #16]
    3bac:	cmp	r0, #0
    3bae:	beq.w	3d1a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5b2>
    3bb2:	ldr	r3, [r0, #0]
    3bb4:	ldr	r3, [r3, #72]	; 0x48
    3bb6:	cmp	r3, r2
    3bb8:	bne.n	3bdc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x474>
    3bba:	ldr	r0, [r0, #16]
    3bbc:	cmp	r0, #0
    3bbe:	beq.w	3d1a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5b2>
    3bc2:	ldr	r3, [r0, #0]
    3bc4:	ldr	r3, [r3, #72]	; 0x48
    3bc6:	cmp	r3, r2
    3bc8:	bne.n	3bdc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x474>
    3bca:	ldr	r0, [r0, #16]
    3bcc:	cmp	r0, #0
    3bce:	beq.w	3d1a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5b2>
    3bd2:	ldr	r3, [r0, #0]
    3bd4:	ldr	r3, [r3, #72]	; 0x48
    3bd6:	blx	r3
    3bd8:	mov	r1, r0
    3bda:	b.n	3be0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x478>
    3bdc:	blx	r3
    3bde:	mov	r1, r0
        sd_getName(child_,r.name,64);
    3be0:	add	r0, sp, #112	; 0x70
    3be2:	bl	120fc <strcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    3be6:	ldr.w	r5, [r4, #324]	; 0x144
    3bea:	adds	r3, r5, #1
    WriteIndexRecord(new_record, r);
    3bec:	mov	r0, r4
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    3bee:	str.w	r3, [r4, #324]	; 0x144
    WriteIndexRecord(new_record, r);
    3bf2:	mov	r1, r5
    3bf4:	add	r2, sp, #96	; 0x60
    3bf6:	bl	20c0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    3bfa:	ldr.w	r0, [r4, #304]	; 0x130
    3bfe:	cmp	r0, #0
    3c00:	beq.w	37f8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x90>
    3c04:	ldr	r2, [r0, #0]
    3c06:	ldr	r3, [pc, #324]	; (3d4c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5e4>)
    3c08:	ldr	r2, [r2, #64]	; 0x40
    3c0a:	cmp	r2, r3
    3c0c:	bne.n	3c8e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x526>
    3c0e:	ldr	r0, [r0, #16]
    3c10:	cmp	r0, #0
    3c12:	beq.w	37f8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x90>
    3c16:	ldr	r2, [r0, #0]
    3c18:	ldr	r2, [r2, #64]	; 0x40
    3c1a:	cmp	r2, r3
    3c1c:	bne.n	3c8e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x526>
    3c1e:	ldr	r0, [r0, #16]
    3c20:	cmp	r0, #0
    3c22:	beq.w	37f8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x90>
    3c26:	ldr	r2, [r0, #0]
    3c28:	ldr	r2, [r2, #64]	; 0x40
    3c2a:	cmp	r2, r3
    3c2c:	bne.n	3c8e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x526>
    3c2e:	ldr	r0, [r0, #16]
    3c30:	cmp	r0, #0
    3c32:	beq.w	37f8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x90>
    3c36:	ldr	r2, [r0, #0]
    3c38:	ldr	r2, [r2, #64]	; 0x40
    3c3a:	cmp	r2, r3
    3c3c:	bne.n	3c8e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x526>
    3c3e:	ldr	r0, [r0, #16]
    3c40:	cmp	r0, #0
    3c42:	beq.w	37f8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x90>
    3c46:	ldr	r2, [r0, #0]
    3c48:	ldr	r2, [r2, #64]	; 0x40
    3c4a:	cmp	r2, r3
    3c4c:	bne.n	3c8e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x526>
    3c4e:	ldr	r0, [r0, #16]
    3c50:	cmp	r0, #0
    3c52:	beq.w	37f8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x90>
    3c56:	ldr	r2, [r0, #0]
    3c58:	ldr	r2, [r2, #64]	; 0x40
    3c5a:	cmp	r2, r3
    3c5c:	bne.n	3c8e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x526>
    3c5e:	ldr	r0, [r0, #16]
    3c60:	cmp	r0, #0
    3c62:	beq.w	37f8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x90>
    3c66:	ldr	r2, [r0, #0]
    3c68:	ldr	r2, [r2, #64]	; 0x40
    3c6a:	cmp	r2, r3
    3c6c:	bne.n	3c8e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x526>
    3c6e:	ldr	r0, [r0, #16]
    3c70:	cmp	r0, #0
    3c72:	beq.w	37f8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x90>
    3c76:	ldr	r2, [r0, #0]
    3c78:	ldr	r2, [r2, #64]	; 0x40
    3c7a:	cmp	r2, r3
    3c7c:	bne.n	3c8e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x526>
    3c7e:	ldr	r0, [r0, #16]
    3c80:	cmp	r0, #0
    3c82:	beq.w	37f8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x90>
    3c86:	ldr	r3, [r0, #0]
    3c88:	ldr	r3, [r3, #64]	; 0x40
    3c8a:	blx	r3
    3c8c:	b.n	37f8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x90>
    3c8e:	blx	r2
    if (record.isdir && !record.scanned) {
      OpenFileByIndex(i);
      if (!sd_isOpen(file_)) return;
    
      int sibling = 0;
      while (true) 
    3c90:	b.n	37f8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x90>

        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
    3c92:	movs	r2, #0
    3c94:	strb.w	r2, [sp, #108]	; 0x6c
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    3c98:	cmp	r3, #0
    3c9a:	beq.n	3d30 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c8>
    3c9c:	ldr	r1, [r3, #0]
    3c9e:	ldr	r2, [pc, #176]	; (3d50 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5e8>)
    3ca0:	ldr	r1, [r1, #60]	; 0x3c
    3ca2:	cmp	r1, r2
    3ca4:	bne.n	3d26 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    3ca6:	ldr	r0, [r3, #16]
    3ca8:	cbz	r0, 3cfe <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x596>
    3caa:	ldr	r1, [r0, #0]
    3cac:	ldr	r1, [r1, #60]	; 0x3c
    3cae:	cmp	r1, r2
    3cb0:	bne.n	3d28 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c0>
    3cb2:	ldr	r0, [r0, #16]
    3cb4:	cbz	r0, 3cfe <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x596>
    3cb6:	ldr	r1, [r0, #0]
    3cb8:	ldr	r1, [r1, #60]	; 0x3c
    3cba:	cmp	r1, r2
    3cbc:	bne.n	3d28 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c0>
    3cbe:	ldr	r0, [r0, #16]
    3cc0:	cbz	r0, 3cfe <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x596>
    3cc2:	ldr	r1, [r0, #0]
    3cc4:	ldr	r1, [r1, #60]	; 0x3c
    3cc6:	cmp	r1, r2
    3cc8:	bne.n	3d28 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c0>
    3cca:	ldr	r0, [r0, #16]
    3ccc:	cbz	r0, 3cfe <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x596>
    3cce:	ldr	r1, [r0, #0]
    3cd0:	ldr	r1, [r1, #60]	; 0x3c
    3cd2:	cmp	r1, r2
    3cd4:	bne.n	3d28 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c0>
    3cd6:	ldr	r0, [r0, #16]
    3cd8:	cbz	r0, 3cfe <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x596>
    3cda:	ldr	r1, [r0, #0]
    3cdc:	ldr	r1, [r1, #60]	; 0x3c
    3cde:	cmp	r1, r2
    3ce0:	bne.n	3d28 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c0>
    3ce2:	ldr	r0, [r0, #16]
    3ce4:	cbz	r0, 3cfe <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x596>
    3ce6:	ldr	r1, [r0, #0]
    3ce8:	ldr	r1, [r1, #60]	; 0x3c
    3cea:	cmp	r1, r2
    3cec:	bne.n	3d28 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c0>
    3cee:	ldr	r0, [r0, #16]
    3cf0:	cbz	r0, 3cfe <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x596>
    3cf2:	ldr	r3, [r0, #0]
    3cf4:	ldr	r3, [r3, #60]	; 0x3c
    3cf6:	blx	r3
    3cf8:	ldr.w	r3, [r4, #304]	; 0x130
    3cfc:	b.n	3b40 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3d8>
        r.child = r.isdir ? 0 : child_.size();
    3cfe:	movs	r2, #0
        r.scanned = false;
    3d00:	strb.w	r2, [sp, #109]	; 0x6d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    3d04:	ldr	r1, [r3, #0]
        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : child_.size();
    3d06:	str	r2, [sp, #100]	; 0x64
    3d08:	ldr	r1, [r1, #72]	; 0x48
    3d0a:	ldr	r2, [pc, #60]	; (3d48 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5e0>)
    3d0c:	cmp	r1, r2
    3d0e:	beq.w	3b5a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3f2>
    3d12:	mov	r0, r3
    3d14:	blx	r1
    3d16:	mov	r1, r0
    3d18:	b.n	3be0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x478>
    3d1a:	ldr	r1, [pc, #56]	; (3d54 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ec>)
    3d1c:	b.n	3be0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x478>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    3d1e:	movs	r2, #0
    3d20:	add	r0, sp, #96	; 0x60
    3d22:	blx	r3
    3d24:	b.n	3892 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x12a>
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    3d26:	mov	r0, r3
    3d28:	blx	r1
    3d2a:	ldr.w	r3, [r4, #304]	; 0x130
    3d2e:	b.n	3b40 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3d8>
    3d30:	str	r3, [sp, #100]	; 0x64
        r.scanned = false;
    3d32:	strb.w	r3, [sp, #109]	; 0x6d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    3d36:	ldr	r1, [pc, #28]	; (3d54 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ec>)
    3d38:	b.n	3be0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x478>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3d3a:	mov	r0, r6
    3d3c:	blx	r3
    3d3e:	b.n	39d4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26c>
    3d40:	mov	r0, r6
    3d42:	blx	r3
    3d44:	b.n	392c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1c4>
    3d46:	nop
    3d48:	.word	0x00000519
    3d4c:	.word	0x00000501
    3d50:	.word	0x000004f1
    3d54:	.word	0x00015880
    3d58:	ldr	r2, [r3, #16]
    3d5a:	cmp	r2, #0
    3d5c:	beq.w	3914 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ac>
    3d60:	ldr	r1, [r2, #0]
    3d62:	ldr	r1, [r1, #32]
    3d64:	cmp	r1, fp
    3d66:	bne.w	3f14 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7ac>
    3d6a:	ldr	r0, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3d6c:	str.w	r9, [r2]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3d70:	cmp	r0, #0
    3d72:	beq.n	3e1a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6b2>
    3d74:	ldr	r1, [r0, #16]
    3d76:	subs	r1, #1
    3d78:	str	r1, [r0, #16]
    3d7a:	cmp	r1, #0
    3d7c:	bne.n	3e1a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6b2>
    3d7e:	ldr	r1, [r2, #16]
    3d80:	str	r1, [sp, #0]
    3d82:	cmp	r1, #0
    3d84:	beq.n	3e1a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6b2>
    3d86:	ldr	r0, [sp, #0]
    3d88:	ldr	r1, [r0, #0]
    3d8a:	ldr	r1, [r1, #32]
    3d8c:	cmp	r1, fp
    3d8e:	bne.w	3f2c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7c4>
    3d92:	mov	r1, r0
    3d94:	ldr	r0, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3d96:	str.w	r9, [r1]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3d9a:	cmp	r0, #0
    3d9c:	beq.n	3e0a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6a2>
    3d9e:	ldr	r1, [r0, #16]
    3da0:	subs	r1, #1
    3da2:	str	r1, [r0, #16]
    3da4:	cbnz	r1, 3e0a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6a2>
    3da6:	ldr	r1, [sp, #0]
    3da8:	ldr.w	ip, [r1, #16]
    3dac:	cmp.w	ip, #0
    3db0:	beq.n	3e0a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6a2>
    3db2:	ldr.w	r0, [ip]
    3db6:	ldr	r0, [r0, #32]
    3db8:	cmp	r0, fp
    3dba:	mov	r1, r0
    3dbc:	bne.w	3f48 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7e0>
    3dc0:	ldr.w	r0, [ip, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3dc4:	str.w	r9, [ip]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3dc8:	cbz	r0, 3dfa <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x692>
    3dca:	ldr	r1, [r0, #16]
    3dcc:	add.w	lr, r1, #4294967295
    3dd0:	str.w	lr, [r0, #16]
    3dd4:	cmp.w	lr, #0
    3dd8:	bne.n	3dfa <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x692>
    3dda:	ldr.w	r0, [ip, #16]
    3dde:	cbz	r0, 3dfa <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x692>
    3de0:	ldr.w	lr, [r0]
    3de4:	str.w	ip, [sp, #12]
    3de8:	str	r2, [sp, #8]
    3dea:	str	r3, [sp, #4]
    3dec:	ldr.w	r3, [lr, #32]
    3df0:	blx	r3
    3df2:	ldr.w	ip, [sp, #12]
    3df6:	ldr	r2, [sp, #8]
    3df8:	ldr	r3, [sp, #4]
    3dfa:	str	r2, [sp, #8]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    3dfc:	mov	r0, ip
    3dfe:	movs	r1, #20
    3e00:	str	r3, [sp, #4]
    3e02:	bl	101b0 <operator delete(void*, unsigned int)>
    3e06:	ldr	r3, [sp, #4]
    3e08:	ldr	r2, [sp, #8]
    3e0a:	ldr	r0, [sp, #0]
    3e0c:	str	r2, [sp, #8]
    3e0e:	movs	r1, #20
    3e10:	str	r3, [sp, #4]
    3e12:	bl	101b0 <operator delete(void*, unsigned int)>
    3e16:	ldr	r3, [sp, #4]
    3e18:	ldr	r2, [sp, #8]
    3e1a:	str	r3, [sp, #0]
    3e1c:	mov	r0, r2
    3e1e:	movs	r1, #20
    3e20:	bl	101b0 <operator delete(void*, unsigned int)>
    3e24:	ldr	r3, [sp, #0]
    3e26:	b.n	3914 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ac>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3e28:	ldr	r2, [r3, #16]
    3e2a:	cmp	r2, #0
    3e2c:	beq.w	39bc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x254>
    3e30:	ldr	r1, [r2, #0]
    3e32:	ldr	r1, [r1, #32]
    3e34:	cmp	r1, fp
    3e36:	bne.n	3f0a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7a2>
    3e38:	ldr	r0, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3e3a:	str.w	r9, [r2]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3e3e:	cmp	r0, #0
    3e40:	beq.n	3ee4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x77c>
    3e42:	ldr	r1, [r0, #16]
    3e44:	subs	r1, #1
    3e46:	str	r1, [r0, #16]
    3e48:	cmp	r1, #0
    3e4a:	bne.n	3ee4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x77c>
    3e4c:	ldr	r1, [r2, #16]
    3e4e:	str	r1, [sp, #0]
    3e50:	cmp	r1, #0
    3e52:	beq.n	3ee4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x77c>
    3e54:	ldr	r0, [sp, #0]
    3e56:	ldr	r1, [r0, #0]
    3e58:	ldr	r1, [r1, #32]
    3e5a:	cmp	r1, fp
    3e5c:	bne.n	3f1e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7b6>
    3e5e:	mov	r1, r0
    3e60:	ldr	r0, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3e62:	str.w	r9, [r1]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3e66:	cmp	r0, #0
    3e68:	beq.n	3ed4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x76c>
    3e6a:	ldr	r1, [r0, #16]
    3e6c:	subs	r1, #1
    3e6e:	str	r1, [r0, #16]
    3e70:	cbnz	r1, 3ed4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x76c>
    3e72:	ldr	r1, [sp, #0]
    3e74:	ldr.w	ip, [r1, #16]
    3e78:	cmp.w	ip, #0
    3e7c:	beq.n	3ed4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x76c>
    3e7e:	ldr.w	r0, [ip]
    3e82:	ldr	r0, [r0, #32]
    3e84:	cmp	r0, fp
    3e86:	mov	r1, r0
    3e88:	bne.n	3f3a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7d2>
    3e8a:	ldr.w	r0, [ip, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3e8e:	str.w	r9, [ip]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3e92:	cbz	r0, 3ec4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x75c>
    3e94:	ldr	r1, [r0, #16]
    3e96:	add.w	lr, r1, #4294967295
    3e9a:	str.w	lr, [r0, #16]
    3e9e:	cmp.w	lr, #0
    3ea2:	bne.n	3ec4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x75c>
    3ea4:	ldr.w	r0, [ip, #16]
    3ea8:	cbz	r0, 3ec4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x75c>
    3eaa:	ldr.w	lr, [r0]
    3eae:	str.w	ip, [sp, #12]
    3eb2:	str	r2, [sp, #8]
    3eb4:	str	r3, [sp, #4]
    3eb6:	ldr.w	r3, [lr, #32]
    3eba:	blx	r3
    3ebc:	ldr.w	ip, [sp, #12]
    3ec0:	ldr	r2, [sp, #8]
    3ec2:	ldr	r3, [sp, #4]
    3ec4:	str	r2, [sp, #8]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    3ec6:	mov	r0, ip
    3ec8:	movs	r1, #20
    3eca:	str	r3, [sp, #4]
    3ecc:	bl	101b0 <operator delete(void*, unsigned int)>
    3ed0:	ldr	r3, [sp, #4]
    3ed2:	ldr	r2, [sp, #8]
    3ed4:	ldr	r0, [sp, #0]
    3ed6:	str	r2, [sp, #8]
    3ed8:	movs	r1, #20
    3eda:	str	r3, [sp, #4]
    3edc:	bl	101b0 <operator delete(void*, unsigned int)>
    3ee0:	ldr	r3, [sp, #4]
    3ee2:	ldr	r2, [sp, #8]
    3ee4:	str	r3, [sp, #0]
    3ee6:	mov	r0, r2
    3ee8:	movs	r1, #20
    3eea:	bl	101b0 <operator delete(void*, unsigned int)>
    3eee:	ldr	r3, [sp, #0]
    3ef0:	b.n	39bc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x254>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3ef2:	mov	r0, sl
    3ef4:	blx	r3
    3ef6:	b.n	3924 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1bc>
    3ef8:	mov	r0, sl
    3efa:	blx	r3
    3efc:	b.n	39cc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x264>
    3efe:	mov	r0, r3
    3f00:	blx	r2
    3f02:	b.n	39c4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x25c>
    3f04:	mov	r0, r3
    3f06:	blx	r2
    3f08:	b.n	391c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b4>
    3f0a:	str	r3, [sp, #0]
    3f0c:	mov	r0, r2
    3f0e:	blx	r1
    3f10:	ldr	r3, [sp, #0]
    3f12:	b.n	39bc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x254>
    3f14:	str	r3, [sp, #0]
    3f16:	mov	r0, r2
    3f18:	blx	r1
    3f1a:	ldr	r3, [sp, #0]
    3f1c:	b.n	3914 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ac>
    3f1e:	str	r2, [sp, #8]
    3f20:	str	r3, [sp, #4]
    3f22:	ldr	r0, [sp, #0]
    3f24:	blx	r1
    3f26:	ldr	r2, [sp, #8]
    3f28:	ldr	r3, [sp, #4]
    3f2a:	b.n	3ee4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x77c>
    3f2c:	str	r2, [sp, #8]
    3f2e:	str	r3, [sp, #4]
    3f30:	ldr	r0, [sp, #0]
    3f32:	blx	r1
    3f34:	ldr	r2, [sp, #8]
    3f36:	ldr	r3, [sp, #4]
    3f38:	b.n	3e1a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6b2>
    3f3a:	str	r2, [sp, #8]
    3f3c:	str	r3, [sp, #4]
    3f3e:	mov	r0, ip
    3f40:	blx	r1
    3f42:	ldr	r2, [sp, #8]
    3f44:	ldr	r3, [sp, #4]
    3f46:	b.n	3ed4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x76c>
    3f48:	str	r2, [sp, #8]
    3f4a:	str	r3, [sp, #4]
    3f4c:	mov	r0, ip
    3f4e:	blx	r1
    3f50:	ldr	r2, [sp, #8]
    3f52:	ldr	r3, [sp, #4]
    3f54:	b.n	3e0a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6a2>
    3f56:	nop

00003f58 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.9] [clone .constprop.12]>:

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t storage)
  { if (index_generated) return; 
    3f58:	ldrb.w	r3, [r0, #328]	; 0x148
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t storage) 
  { if (all_scanned_) return;
    all_scanned_ = true;
    3f5c:	movs	r2, #1
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t storage) 
    3f5e:	push	{r4, r5, r6, lr}
    3f60:	mov	r5, r0
  { if (all_scanned_) return;
    all_scanned_ = true;
    3f62:	strb.w	r2, [r0, #329]	; 0x149
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t storage) 
    3f66:	mov	r6, r1

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t storage)
  { if (index_generated) return; 
    3f68:	cbz	r3, 3f88 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.9] [clone .constprop.12]+0x30>
  void MTPStorage_SD::ScanAll(uint32_t storage) 
  { if (all_scanned_) return;
    all_scanned_ = true;

    GenerateIndex(storage);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(storage,i);
    3f6a:	ldr.w	r3, [r5, #324]	; 0x144
    3f6e:	cbz	r3, 3f86 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.9] [clone .constprop.12]+0x2e>
    3f70:	movs	r4, #0
    3f72:	mov	r2, r4
    3f74:	mov	r1, r6
    3f76:	mov	r0, r5
    3f78:	bl	3768 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
    3f7c:	ldr.w	r3, [r5, #324]	; 0x144
    3f80:	adds	r4, #1
    3f82:	cmp	r3, r4
    3f84:	bhi.n	3f72 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.9] [clone .constprop.12]+0x1a>
    3f86:	pop	{r4, r5, r6, pc}
    3f88:	bl	2218 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.8] [clone .constprop.13]>
    3f8c:	b.n	3f6a <MTPStorage_SD::ScanAll(unsigned long) [clone .part.9] [clone .constprop.12]+0x12>
    3f8e:	nop

00003f90 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>:
//  const char * MTPStorage_SD::getStorageName(uint32_t storage) 
//  { if(sd_str) return sd_str[storage-1]; else return "SD_DISK";
//  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t storage, uint32_t parent) 
  { 
    3f90:	push	{r4, r5, lr}

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t storage)
  { if (index_generated) return; 
    3f92:	ldrb.w	r3, [r0, #328]	; 0x148
//  const char * MTPStorage_SD::getStorageName(uint32_t storage) 
//  { if(sd_str) return sd_str[storage-1]; else return "SD_DISK";
//  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t storage, uint32_t parent) 
  { 
    3f96:	sub	sp, #92	; 0x5c
    3f98:	mov	r4, r0
    3f9a:	mov	r5, r2

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t storage)
  { if (index_generated) return; 
    3f9c:	cbz	r3, 3fe0 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x50>
//  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t storage, uint32_t parent) 
  { 
    GenerateIndex(storage);
    if (parent) 
    3f9e:	cbz	r5, 3fca <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x3a>
    { if (parent == 0xFFFFFFFF) parent = storage-1; // As per initizalization
    3fa0:	adds	r3, r5, #1
    3fa2:	it	eq
    3fa4:	addeq.w	r5, r1, #4294967295

      ScanDir(storage, parent);
    3fa8:	mov	r2, r5
    3faa:	mov	r0, r4
    3fac:	bl	3768 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      follow_sibling_ = true;
    3fb0:	movs	r3, #1
    3fb2:	strb.w	r3, [r4, #336]	; 0x150
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    3fb6:	mov	r2, r5
    3fb8:	mov	r1, r4
    3fba:	add	r0, sp, #8
    3fbc:	bl	2288 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    3fc0:	ldr	r3, [sp, #12]
    3fc2:	str.w	r3, [r4, #332]	; 0x14c
    { 
      ScanAll(storage);
      follow_sibling_ = false;
      next_ = 1;
    }
  }
    3fc6:	add	sp, #92	; 0x5c
    3fc8:	pop	{r4, r5, pc}
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t storage) 
  { if (all_scanned_) return;
    3fca:	ldrb.w	r3, [r4, #329]	; 0x149
    3fce:	cbz	r3, 3fea <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x5a>
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { 
      ScanAll(storage);
      follow_sibling_ = false;
    3fd0:	movs	r2, #0
      next_ = 1;
    3fd2:	movs	r3, #1
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { 
      ScanAll(storage);
      follow_sibling_ = false;
    3fd4:	strb.w	r2, [r4, #336]	; 0x150
      next_ = 1;
    3fd8:	str.w	r3, [r4, #332]	; 0x14c
    }
  }
    3fdc:	add	sp, #92	; 0x5c
    3fde:	pop	{r4, r5, pc}
    3fe0:	str	r1, [sp, #4]
    3fe2:	bl	2218 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.8] [clone .constprop.13]>
    3fe6:	ldr	r1, [sp, #4]
    3fe8:	b.n	3f9e <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0xe>
    3fea:	mov	r0, r4
    3fec:	bl	3f58 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.9] [clone .constprop.12]>
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { 
      ScanAll(storage);
      follow_sibling_ = false;
    3ff0:	movs	r2, #0
      next_ = 1;
    3ff2:	movs	r3, #1
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { 
      ScanAll(storage);
      follow_sibling_ = false;
    3ff4:	strb.w	r2, [r4, #336]	; 0x150
      next_ = 1;
    3ff8:	str.w	r3, [r4, #332]	; 0x14c
    3ffc:	b.n	3fdc <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x4c>
    3ffe:	nop

00004000 <MTPD::GetNumObjects(unsigned long, unsigned long)>:
    writestring(name);  // storage descriptor
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  { printf("%d %d\n",storage,parent);
    4000:	push	{r4, r5, r6, lr}
    4002:	mov	r5, r0
    storage_->StartGetObjectHandles(storage, parent);
    4004:	ldr	r0, [r0, #0]
    4006:	ldr	r3, [r0, #0]
    4008:	ldr	r3, [r3, #28]
    writestring(name);  // storage descriptor
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  { printf("%d %d\n",storage,parent);
    400a:	mov	r6, r1
    storage_->StartGetObjectHandles(storage, parent);
    int num = 0;
    400c:	movs	r4, #0
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  { printf("%d %d\n",storage,parent);
    storage_->StartGetObjectHandles(storage, parent);
    400e:	blx	r3
    4010:	b.n	4014 <MTPD::GetNumObjects(unsigned long, unsigned long)+0x14>
    int num = 0;
    while (storage_->GetNextObjectHandle(storage)) num++;
    4012:	adds	r4, #1
    4014:	ldr	r0, [r5, #0]
    4016:	ldr	r3, [r0, #0]
    4018:	mov	r1, r6
    401a:	ldr	r3, [r3, #32]
    401c:	blx	r3
    401e:	cmp	r0, #0
    4020:	bne.n	4012 <MTPD::GetNumObjects(unsigned long, unsigned long)+0x12>
    printf("%d\n",num);
    return num;
  }
    4022:	mov	r0, r4
    4024:	pop	{r4, r5, r6, pc}
    4026:	nop

00004028 <MTPD::get_buffer()>:
    }

#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)

//  usb_packet_t *data_buffer_ = NULL;
  void MTPD::get_buffer() {
    4028:	push	{r4, lr}
    402a:	mov	r4, r0
    402c:	ldr	r0, [r4, #4]
    while (!data_buffer_) {
    402e:	cbnz	r0, 4038 <MTPD::get_buffer()+0x10>
      data_buffer_ = usb_malloc();
    4030:	bl	f058 <usb_malloc>
    4034:	str	r0, [r4, #4]
      if (!data_buffer_) mtp_yield();
    4036:	cbz	r0, 403a <MTPD::get_buffer()+0x12>
    4038:	pop	{r4, pc}
    403a:	bl	1d54 <mtp_yield()>
    403e:	b.n	402c <MTPD::get_buffer()+0x4>

00004040 <MTPD::write(char const*, int) [clone .part.3]>:
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    4040:	cmp	r2, #0
    4042:	ble.n	40a2 <MTPD::write(char const*, int) [clone .part.3]+0x62>
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    4044:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    4048:	mov.w	r9, #0
    404c:	mov	r6, r2
    404e:	mov	r7, r1
    4050:	mov	r5, r0
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    4052:	mov	r8, r9
    4054:	b.n	405a <MTPD::write(char const*, int) [clone .part.3]+0x1a>
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    4056:	cmp	r6, r9
    4058:	ble.n	409e <MTPD::write(char const*, int) [clone .part.3]+0x5e>
        get_buffer();
    405a:	mov	r0, r5
    405c:	bl	4028 <MTPD::get_buffer()>
        int avail = sizeof(data_buffer_->buf) - data_buffer_->len;
    4060:	ldr	r3, [r5, #4]
    4062:	ldrh.w	r0, [r3], #8
    4066:	rsb	r2, r9, r6
    406a:	rsb	r4, r0, #64	; 0x40
    406e:	cmp	r4, r2
    4070:	it	ge
    4072:	movge	r4, r2
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
    4074:	add.w	r1, r7, r9
    4078:	add	r0, r3
    407a:	mov	r2, r4
    407c:	bl	e8e8 <memcpy>
        data_buffer_->len += to_copy;
    4080:	ldr	r1, [r5, #4]
    4082:	ldrh	r3, [r1, #0]
    4084:	add	r3, r4
    4086:	uxth	r3, r3
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    4088:	cmp	r3, #64	; 0x40
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
    408a:	add	r9, r4
        int avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
        data_buffer_->len += to_copy;
    408c:	strh	r3, [r1, #0]
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    408e:	bne.n	4056 <MTPD::write(char const*, int) [clone .part.3]+0x16>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
    4090:	movs	r0, #4
    4092:	bl	f254 <usb_tx>
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    4096:	cmp	r6, r9
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    4098:	str.w	r8, [r5, #4]
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    409c:	bgt.n	405a <MTPD::write(char const*, int) [clone .part.3]+0x1a>
    409e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    40a2:	bx	lr

000040a4 <MTPD::writestring(char const*)>:
  void MTPD::write8 (uint8_t  x) { write((char*)&x, sizeof(x)); }
  void MTPD::write16(uint16_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    40a4:	push	{r4, r5, lr}
    if (*str) 
    40a6:	ldrb	r3, [r1, #0]
  void MTPD::write8 (uint8_t  x) { write((char*)&x, sizeof(x)); }
  void MTPD::write16(uint16_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    40a8:	sub	sp, #12
    40aa:	mov	r4, r0
    if (*str) 
    40ac:	cbz	r3, 4108 <MTPD::writestring(char const*)+0x64>
    { write8(strlen(str) + 1);
    40ae:	mov	r0, r1
    40b0:	mov	r5, r1
    40b2:	bl	12240 <strlen>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    40b6:	ldrb	r1, [r4, #8]
    40b8:	adds	r0, #1
    40ba:	strb.w	r0, [sp, #3]
    40be:	cbz	r1, 411a <MTPD::writestring(char const*)+0x76>
      write_length_ += len;
    40c0:	ldr	r3, [r4, #12]
    40c2:	adds	r3, #1
    40c4:	str	r3, [r4, #12]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    40c6:	ldrb	r2, [r5, #0]
    40c8:	cbnz	r2, 40d8 <MTPD::writestring(char const*)+0x34>
    40ca:	b.n	4100 <MTPD::writestring(char const*)+0x5c>
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    40cc:	ldr	r3, [r4, #12]
    40ce:	adds	r3, #2
    40d0:	str	r3, [r4, #12]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    40d2:	ldrb.w	r2, [r5, #1]!
    40d6:	cbz	r2, 40f6 <MTPD::writestring(char const*)+0x52>
    40d8:	strh.w	r2, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    40dc:	cmp	r1, #0
    40de:	bne.n	40cc <MTPD::writestring(char const*)+0x28>
    40e0:	movs	r2, #2
    40e2:	add.w	r1, sp, #6
    40e6:	mov	r0, r4
    40e8:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    40ec:	ldrb.w	r2, [r5, #1]!
    40f0:	ldrb	r1, [r4, #8]
    40f2:	cmp	r2, #0
    40f4:	bne.n	40d8 <MTPD::writestring(char const*)+0x34>
    40f6:	movs	r3, #0
    40f8:	strh.w	r3, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    40fc:	cbz	r1, 413e <MTPD::writestring(char const*)+0x9a>
    40fe:	ldr	r3, [r4, #12]
      write_length_ += len;
    4100:	adds	r3, #2
    4102:	str	r3, [r4, #12]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    4104:	add	sp, #12
    4106:	pop	{r4, r5, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4108:	ldrb	r2, [r0, #8]
    410a:	strb.w	r3, [sp, #2]
    410e:	cbz	r2, 4130 <MTPD::writestring(char const*)+0x8c>
      write_length_ += len;
    4110:	ldr	r3, [r0, #12]
    4112:	adds	r3, #1
    4114:	str	r3, [r0, #12]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    4116:	add	sp, #12
    4118:	pop	{r4, r5, pc}
    411a:	movs	r2, #1
    411c:	add.w	r1, sp, #3
    4120:	mov	r0, r4
    4122:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    4126:	ldrb	r2, [r5, #0]
    4128:	ldrb	r1, [r4, #8]
    412a:	cmp	r2, #0
    412c:	bne.n	40d8 <MTPD::writestring(char const*)+0x34>
    412e:	b.n	40f6 <MTPD::writestring(char const*)+0x52>
    4130:	movs	r2, #1
    4132:	add.w	r1, sp, #2
    4136:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    } else 
    { write8(0);
    }
  }
    413a:	add	sp, #12
    413c:	pop	{r4, r5, pc}
    413e:	mov	r0, r4
    4140:	movs	r2, #2
    4142:	add	r1, sp, #4
    4144:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4148:	add	sp, #12
    414a:	pop	{r4, r5, pc}

0000414c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.5]>:
        writestring(MTP_NAME);
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    414c:	push	{r4, r5, r6, lr}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    414e:	ldrb	r3, [r0, #8]
        writestring(MTP_NAME);
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    4150:	sub	sp, #8
    4152:	mov	r4, r0
    4154:	mov	r5, r1
    4156:	strh.w	r1, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    415a:	cbz	r3, 4194 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.5]+0x48>
      write_length_ += len;
    415c:	ldr	r3, [r0, #12]
    415e:	movw	r2, #65535	; 0xffff
    4162:	adds	r3, #2
    4164:	str	r3, [r0, #12]
    4166:	strh.w	r2, [sp, #6]
    416a:	adds	r3, #2
    416c:	movs	r2, #0
    416e:	str	r3, [r4, #12]
    4170:	strb.w	r2, [sp, #2]
    4174:	adds	r3, #1
    4176:	str	r3, [r4, #12]
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    4178:	movw	r3, #54274	; 0xd402
    417c:	cmp	r5, r3
    417e:	beq.n	41d0 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.5]+0x84>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4180:	ldrb	r3, [r4, #8]
    4182:	movs	r2, #0
    4184:	strb.w	r2, [sp, #3]
    4188:	cbz	r3, 41ec <MTPD::GetDevicePropDesc(unsigned long) [clone .part.5]+0xa0>
      write_length_ += len;
    418a:	ldr	r3, [r4, #12]
    418c:	adds	r3, #1
    418e:	str	r3, [r4, #12]
        write8(0);       // read-only
        GetDevicePropValue(prop);
        GetDevicePropValue(prop);
        write8(0);       // no form
    }
  }
    4190:	add	sp, #8
    4192:	pop	{r4, r5, r6, pc}
    4194:	movs	r2, #2
    4196:	add	r1, sp, #4
    4198:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    419c:	ldrb	r6, [r4, #8]
    419e:	movw	r3, #65535	; 0xffff
    41a2:	strh.w	r3, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    41a6:	cbnz	r6, 41fc <MTPD::GetDevicePropDesc(unsigned long) [clone .part.5]+0xb0>
    41a8:	movs	r2, #2
    41aa:	add.w	r1, sp, #6
    41ae:	mov	r0, r4
    41b0:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    41b4:	ldrb	r3, [r4, #8]
    41b6:	strb.w	r6, [sp, #2]
    41ba:	cbnz	r3, 4200 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.5]+0xb4>
    41bc:	movs	r2, #1
    41be:	add.w	r1, sp, #2
    41c2:	mov	r0, r4
    41c4:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    41c8:	movw	r3, #54274	; 0xd402
    41cc:	cmp	r5, r3
    41ce:	bne.n	4180 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.5]+0x34>
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    41d0:	ldr	r1, [pc, #48]	; (4204 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.5]+0xb8>)
    41d2:	mov	r0, r4
    41d4:	bl	40a4 <MTPD::writestring(char const*)>
    41d8:	ldr	r1, [pc, #40]	; (4204 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.5]+0xb8>)
    41da:	mov	r0, r4
    41dc:	bl	40a4 <MTPD::writestring(char const*)>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    41e0:	ldrb	r3, [r4, #8]
    41e2:	movs	r2, #0
    41e4:	strb.w	r2, [sp, #3]
    41e8:	cmp	r3, #0
    41ea:	bne.n	418a <MTPD::GetDevicePropDesc(unsigned long) [clone .part.5]+0x3e>
    41ec:	mov	r0, r4
    41ee:	movs	r2, #1
    41f0:	add.w	r1, sp, #3
    41f4:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
        write8(0);       // read-only
        GetDevicePropValue(prop);
        GetDevicePropValue(prop);
        write8(0);       // no form
    }
  }
    41f8:	add	sp, #8
    41fa:	pop	{r4, r5, r6, pc}
    41fc:	ldr	r3, [r4, #12]
    41fe:	b.n	416a <MTPD::GetDevicePropDesc(unsigned long) [clone .part.5]+0x1e>
    4200:	ldr	r3, [r4, #12]
    4202:	b.n	4174 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.5]+0x28>
    4204:	.word	0x00015a14

00004208 <MTPD::WriteDescriptor()>:
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    4208:	push	{r4, r5, r6, r7, lr}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    420a:	ldrb	r3, [r0, #8]
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    420c:	sub	sp, #44	; 0x2c
    420e:	movs	r5, #100	; 0x64
    4210:	mov	r4, r0
    4212:	strh.w	r5, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4216:	cmp	r3, #0
    4218:	beq.n	42fa <MTPD::WriteDescriptor()+0xf2>
      write_length_ += len;
    421a:	ldr	r3, [r0, #12]
    421c:	movs	r2, #6
    421e:	adds	r3, #2
    4220:	str	r3, [r0, #12]
    4222:	str	r2, [sp, #20]
    4224:	adds	r3, #4
    4226:	movs	r2, #100	; 0x64
    4228:	str	r3, [r4, #12]
    422a:	strh.w	r2, [sp, #4]
    422e:	adds	r3, #2
    4230:	str	r3, [r4, #12]
  void MTPD::WriteDescriptor() {
    write16(100);  // MTP version
    write32(6);    // MTP extension
//    write32(0xFFFFFFFFUL);    // MTP extension
    write16(100);  // MTP version
    writestring("microsoft.com: 1.0;");
    4232:	ldr	r1, [pc, #464]	; (4404 <MTPD::WriteDescriptor()+0x1fc>)
    4234:	mov	r0, r4
    4236:	bl	40a4 <MTPD::writestring(char const*)>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    423a:	ldrb	r3, [r4, #8]
    423c:	movs	r2, #0
    423e:	strh.w	r2, [sp, #2]
    4242:	cmp	r3, #0
    4244:	beq.w	43bc <MTPD::WriteDescriptor()+0x1b4>
      write_length_ += len;
    4248:	ldr	r3, [r4, #12]
    424a:	movs	r2, #18
    424c:	adds	r3, #2
    424e:	str	r3, [r4, #12]
    4250:	str	r2, [sp, #16]
    4252:	adds	r3, #4
    4254:	str	r3, [r4, #12]
    4256:	movs	r6, #1
    4258:	ldr	r5, [pc, #428]	; (4408 <MTPD::WriteDescriptor()+0x200>)
    425a:	movw	r3, #4097	; 0x1001
    425e:	add.w	r7, r5, #34	; 0x22
    4262:	b.n	4274 <MTPD::WriteDescriptor()+0x6c>
    4264:	ldr	r3, [r4, #12]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
      write32(supported_op_num);
      for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    4266:	cmp	r7, r5
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    4268:	add.w	r3, r3, #2
    426c:	str	r3, [r4, #12]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
      write32(supported_op_num);
      for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    426e:	beq.n	428c <MTPD::WriteDescriptor()+0x84>
    4270:	ldrh.w	r3, [r5, #2]!
    4274:	strh.w	r3, [sp, #8]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4278:	cmp	r6, #0
    427a:	bne.n	4264 <MTPD::WriteDescriptor()+0x5c>
    427c:	movs	r2, #2
    427e:	add	r1, sp, #8
    4280:	mov	r0, r4
    4282:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
      write32(supported_op_num);
      for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    4286:	cmp	r7, r5
    4288:	ldrb	r6, [r4, #8]
    428a:	bne.n	4270 <MTPD::WriteDescriptor()+0x68>
    428c:	movs	r3, #0
    428e:	str	r3, [sp, #36]	; 0x24
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4290:	cmp	r6, #0
    4292:	beq.n	432e <MTPD::WriteDescriptor()+0x126>
      write_length_ += len;
    4294:	ldr	r3, [r4, #12]
    4296:	movs	r2, #1
    4298:	adds	r3, #4
    429a:	str	r3, [r4, #12]
    429c:	str	r2, [sp, #32]
    429e:	adds	r3, #4
    42a0:	movw	r2, #54274	; 0xd402
    42a4:	str	r3, [r4, #12]
    42a6:	strh.w	r2, [sp, #14]
    42aa:	adds	r3, #2
    42ac:	movs	r2, #0
    42ae:	str	r3, [r4, #12]
    42b0:	str	r2, [sp, #28]
    42b2:	adds	r3, #4
    42b4:	movs	r2, #2
    42b6:	str	r3, [r4, #12]
    42b8:	str	r2, [sp, #24]
    42ba:	adds	r3, #4
    42bc:	mov.w	r2, #12288	; 0x3000
    42c0:	str	r3, [r4, #12]
    42c2:	strh.w	r2, [sp, #12]
    42c6:	adds	r3, #2
    42c8:	movw	r2, #12289	; 0x3001
    42cc:	str	r3, [r4, #12]
    42ce:	strh.w	r2, [sp, #10]
    42d2:	adds	r3, #2
    42d4:	str	r3, [r4, #12]

    write32(2);       // Playback formats (array of uint16)
    write16(0x3000);  // Undefined format
    write16(0x3001);  // Folders (associations)

    writestring(MTP_MANUF);     // Manufacturer
    42d6:	mov	r0, r4
    42d8:	ldr	r1, [pc, #304]	; (440c <MTPD::WriteDescriptor()+0x204>)
    42da:	bl	40a4 <MTPD::writestring(char const*)>
    writestring(MTP_MODEL);     // Model
    42de:	mov	r0, r4
    42e0:	ldr	r1, [pc, #300]	; (4410 <MTPD::WriteDescriptor()+0x208>)
    42e2:	bl	40a4 <MTPD::writestring(char const*)>
    writestring(MTP_VERS);      // version
    42e6:	mov	r0, r4
    42e8:	ldr	r1, [pc, #296]	; (4414 <MTPD::WriteDescriptor()+0x20c>)
    42ea:	bl	40a4 <MTPD::writestring(char const*)>
    writestring(MTP_SERNR);     // serial
    42ee:	mov	r0, r4
    42f0:	ldr	r1, [pc, #292]	; (4418 <MTPD::WriteDescriptor()+0x210>)
    42f2:	bl	40a4 <MTPD::writestring(char const*)>
  }
    42f6:	add	sp, #44	; 0x2c
    42f8:	pop	{r4, r5, r6, r7, pc}
    42fa:	movs	r2, #2
    42fc:	add.w	r1, sp, #6
    4300:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4304:	ldrb	r3, [r4, #8]
    4306:	movs	r2, #6
    4308:	str	r2, [sp, #20]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    430a:	cmp	r3, #0
    430c:	bne.n	43ea <MTPD::WriteDescriptor()+0x1e2>
    430e:	movs	r2, #4
    4310:	add	r1, sp, #20
    4312:	mov	r0, r4
    4314:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4318:	ldrb	r3, [r4, #8]
    431a:	strh.w	r5, [sp, #4]
    431e:	cmp	r3, #0
    4320:	bne.n	43ee <MTPD::WriteDescriptor()+0x1e6>
    4322:	movs	r2, #2
    4324:	add	r1, sp, #4
    4326:	mov	r0, r4
    4328:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    432c:	b.n	4232 <MTPD::WriteDescriptor()+0x2a>
    432e:	movs	r2, #4
    4330:	add	r1, sp, #36	; 0x24
    4332:	mov	r0, r4
    4334:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4338:	ldrb	r3, [r4, #8]
    433a:	movs	r2, #1
    433c:	str	r2, [sp, #32]
    433e:	cmp	r3, #0
    4340:	bne.n	43f2 <MTPD::WriteDescriptor()+0x1ea>
    4342:	movs	r2, #4
    4344:	add	r1, sp, #32
    4346:	mov	r0, r4
    4348:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    434c:	ldrb	r3, [r4, #8]
    434e:	movw	r2, #54274	; 0xd402
    4352:	strh.w	r2, [sp, #14]
    4356:	cmp	r3, #0
    4358:	bne.n	43f6 <MTPD::WriteDescriptor()+0x1ee>
    435a:	movs	r2, #2
    435c:	add.w	r1, sp, #14
    4360:	mov	r0, r4
    4362:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4366:	ldrb	r3, [r4, #8]
    4368:	str	r6, [sp, #28]
    436a:	cmp	r3, #0
    436c:	bne.n	43fa <MTPD::WriteDescriptor()+0x1f2>
    436e:	movs	r2, #4
    4370:	add	r1, sp, #28
    4372:	mov	r0, r4
    4374:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4378:	ldrb	r3, [r4, #8]
    437a:	movs	r5, #2
    437c:	str	r5, [sp, #24]
    437e:	cmp	r3, #0
    4380:	bne.n	43fe <MTPD::WriteDescriptor()+0x1f6>
    4382:	movs	r2, #4
    4384:	add	r1, sp, #24
    4386:	mov	r0, r4
    4388:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    438c:	ldrb	r3, [r4, #8]
    438e:	mov.w	r2, #12288	; 0x3000
    4392:	strh.w	r2, [sp, #12]
    4396:	cbnz	r3, 43e2 <MTPD::WriteDescriptor()+0x1da>
    4398:	mov	r2, r5
    439a:	add	r1, sp, #12
    439c:	mov	r0, r4
    439e:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    43a2:	ldrb	r3, [r4, #8]
    43a4:	movw	r2, #12289	; 0x3001
    43a8:	strh.w	r2, [sp, #10]
    43ac:	cbnz	r3, 43de <MTPD::WriteDescriptor()+0x1d6>
    43ae:	mov	r2, r5
    43b0:	add.w	r1, sp, #10
    43b4:	mov	r0, r4
    43b6:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    43ba:	b.n	42d6 <MTPD::WriteDescriptor()+0xce>
    43bc:	movs	r2, #2
    43be:	add.w	r1, sp, r2
    43c2:	mov	r0, r4
    43c4:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    43c8:	ldrb	r3, [r4, #8]
    43ca:	movs	r2, #18
    43cc:	str	r2, [sp, #16]
    43ce:	cbnz	r3, 43e6 <MTPD::WriteDescriptor()+0x1de>
    43d0:	movs	r2, #4
    43d2:	add	r1, sp, #16
    43d4:	mov	r0, r4
    43d6:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    43da:	ldrb	r6, [r4, #8]
    43dc:	b.n	4258 <MTPD::WriteDescriptor()+0x50>
    43de:	ldr	r3, [r4, #12]
    43e0:	b.n	42d2 <MTPD::WriteDescriptor()+0xca>
    43e2:	ldr	r3, [r4, #12]
    43e4:	b.n	42c6 <MTPD::WriteDescriptor()+0xbe>
    43e6:	ldr	r3, [r4, #12]
    43e8:	b.n	4252 <MTPD::WriteDescriptor()+0x4a>
    43ea:	ldr	r3, [r4, #12]
    43ec:	b.n	4224 <MTPD::WriteDescriptor()+0x1c>
    43ee:	ldr	r3, [r4, #12]
    43f0:	b.n	422e <MTPD::WriteDescriptor()+0x26>
    43f2:	ldr	r3, [r4, #12]
    43f4:	b.n	429e <MTPD::WriteDescriptor()+0x96>
    43f6:	ldr	r3, [r4, #12]
    43f8:	b.n	42aa <MTPD::WriteDescriptor()+0xa2>
    43fa:	ldr	r3, [r4, #12]
    43fc:	b.n	42b2 <MTPD::WriteDescriptor()+0xaa>
    43fe:	ldr	r3, [r4, #12]
    4400:	b.n	42ba <MTPD::WriteDescriptor()+0xb2>
    4402:	nop
    4404:	.word	0x00015a1c
    4408:	.word	0x000159e0
    440c:	.word	0x00015a30
    4410:	.word	0x00015a14
    4414:	.word	0x00015a38
    4418:	.word	0x00015a3c

0000441c <MTPD::WriteStorageIDs()>:
    writestring(MTP_MODEL);     // Model
    writestring(MTP_VERS);      // version
    writestring(MTP_SERNR);     // serial
  }

  void MTPD::WriteStorageIDs() {
    441c:	push	{r4, r5, r6, lr}
    441e:	mov	r5, r0
//    uint32_t num=storage_->getNumStorage();
    uint32_t num=storage_->get_FSCount();
    4420:	ldr	r0, [r0, #0]
    4422:	ldr	r2, [pc, #92]	; (4480 <MTPD::WriteStorageIDs()+0x64>)
    4424:	ldr	r3, [r0, #0]
    4426:	ldr	r3, [r3, #4]
    4428:	cmp	r3, r2
    writestring(MTP_MODEL);     // Model
    writestring(MTP_VERS);      // version
    writestring(MTP_SERNR);     // serial
  }

  void MTPD::WriteStorageIDs() {
    442a:	sub	sp, #8
    442c:	bne.n	4478 <MTPD::WriteStorageIDs()+0x5c>
        sd_name[fsCount] = name;
        sdx[fsCount++] = &fs;
      }
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    442e:	ldr	r6, [r0, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4430:	ldrb	r3, [r5, #8]
    4432:	str	r6, [sp, #0]
    4434:	cbz	r3, 446c <MTPD::WriteStorageIDs()+0x50>
      write_length_ += len;
    4436:	ldr	r3, [r5, #12]
    4438:	adds	r3, #4
    443a:	str	r3, [r5, #12]

  void MTPD::WriteStorageIDs() {
//    uint32_t num=storage_->getNumStorage();
    uint32_t num=storage_->get_FSCount();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
    443c:	movs	r4, #1
    443e:	cbnz	r6, 444e <MTPD::WriteStorageIDs()+0x32>
    4440:	b.n	4468 <MTPD::WriteStorageIDs()+0x4c>
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    4442:	ldr	r3, [r5, #12]

  void MTPD::WriteStorageIDs() {
//    uint32_t num=storage_->getNumStorage();
    uint32_t num=storage_->get_FSCount();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
    4444:	adds	r4, #1
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    4446:	adds	r3, #4

  void MTPD::WriteStorageIDs() {
//    uint32_t num=storage_->getNumStorage();
    uint32_t num=storage_->get_FSCount();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
    4448:	cmp	r6, r4
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    444a:	str	r3, [r5, #12]

  void MTPD::WriteStorageIDs() {
//    uint32_t num=storage_->getNumStorage();
    uint32_t num=storage_->get_FSCount();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
    444c:	bcc.n	4468 <MTPD::WriteStorageIDs()+0x4c>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    444e:	ldrb	r3, [r5, #8]
    4450:	str	r4, [sp, #4]
    4452:	cmp	r3, #0
    4454:	bne.n	4442 <MTPD::WriteStorageIDs()+0x26>
    4456:	movs	r2, #4
    4458:	add.w	r1, sp, r2
    445c:	mov	r0, r5

  void MTPD::WriteStorageIDs() {
//    uint32_t num=storage_->getNumStorage();
    uint32_t num=storage_->get_FSCount();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
    445e:	adds	r4, #1
    4460:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4464:	cmp	r6, r4
    4466:	bcs.n	444e <MTPD::WriteStorageIDs()+0x32>
  }
    4468:	add	sp, #8
    446a:	pop	{r4, r5, r6, pc}
    446c:	movs	r2, #4
    446e:	mov	r1, sp
    4470:	mov	r0, r5
    4472:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4476:	b.n	443c <MTPD::WriteStorageIDs()+0x20>
    writestring(MTP_SERNR);     // serial
  }

  void MTPD::WriteStorageIDs() {
//    uint32_t num=storage_->getNumStorage();
    uint32_t num=storage_->get_FSCount();
    4478:	blx	r3
    447a:	mov	r6, r0
    447c:	b.n	4430 <MTPD::WriteStorageIDs()+0x14>
    447e:	nop
    4480:	.word	0x00001b95

00004484 <MTPD::GetObjectHandles(unsigned long, unsigned long)>:
    printf("%d\n",num);
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    4484:	push	{r4, r5, r6, lr}
    if (write_get_length_) {
    4486:	ldrb	r3, [r0, #8]
    printf("%d\n",num);
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    4488:	sub	sp, #8
    448a:	mov	r4, r0
    if (write_get_length_) {
    448c:	cbnz	r3, 44d4 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x50>
    448e:	mov	r5, r1
    4490:	mov	r6, r2
      write_length_ = GetNumObjects(storage, parent);
      write_length_++;
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
    4492:	bl	4000 <MTPD::GetNumObjects(unsigned long, unsigned long)>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4496:	ldrb	r3, [r4, #8]
    4498:	str	r0, [sp, #4]
    449a:	cbz	r3, 44e2 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x5e>
      write_length_ += len;
    449c:	ldr	r3, [r4, #12]
    449e:	adds	r3, #4
    44a0:	str	r3, [r4, #12]
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(storage, parent);
    44a2:	ldr	r0, [r4, #0]
    44a4:	ldr	r3, [r0, #0]
    44a6:	mov	r2, r6
    44a8:	ldr	r3, [r3, #28]
    44aa:	mov	r1, r5
    44ac:	blx	r3
      while ((handle = storage_->GetNextObjectHandle(storage))) write32(handle);
    44ae:	ldr	r0, [r4, #0]
    44b0:	ldr	r3, [r0, #0]
    44b2:	mov	r1, r5
    44b4:	ldr	r3, [r3, #32]
    44b6:	blx	r3
    44b8:	cbz	r0, 44de <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x5a>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    44ba:	ldrb	r3, [r4, #8]
    44bc:	str	r0, [sp, #0]
    44be:	cbz	r3, 44c8 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x44>
      write_length_ += len;
    44c0:	ldr	r3, [r4, #12]
    44c2:	adds	r3, #4
    44c4:	str	r3, [r4, #12]
    44c6:	b.n	44ae <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x2a>
    44c8:	movs	r2, #4
    44ca:	mov	r1, sp
    44cc:	mov	r0, r4
    44ce:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    44d2:	b.n	44ae <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x2a>
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    if (write_get_length_) {
      write_length_ = GetNumObjects(storage, parent);
    44d4:	bl	4000 <MTPD::GetNumObjects(unsigned long, unsigned long)>
      write_length_++;
      write_length_ *= 4;
    44d8:	adds	r0, #1
    44da:	lsls	r0, r0, #2
    44dc:	str	r0, [r4, #12]
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(storage, parent);
      while ((handle = storage_->GetNextObjectHandle(storage))) write32(handle);
    }
  }
    44de:	add	sp, #8
    44e0:	pop	{r4, r5, r6, pc}
    44e2:	movs	r2, #4
    44e4:	add.w	r1, sp, r2
    44e8:	mov	r0, r4
    44ea:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    44ee:	b.n	44a2 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1e>

000044f0 <MTPD::GetObjectInfo(unsigned long)>:
  
  void MTPD::GetObjectInfo(uint32_t handle) 
  {
    44f0:	push	{r4, r5, r6, r7, lr}
    44f2:	mov	r4, r0
    44f4:	sub	sp, #332	; 0x14c
    char filename[256];
    uint32_t size, parent;
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);
    44f6:	ldr	r0, [r0, #0]
    44f8:	add.w	r6, sp, #10
    44fc:	add	r5, sp, #24
    44fe:	ldr	r3, [r0, #0]
    4500:	stmia.w	sp, {r5, r6}
    4504:	add	r2, sp, #72	; 0x48
    4506:	ldr	r7, [r3, #36]	; 0x24
    4508:	add	r3, sp, #20
    450a:	blx	r7
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    450c:	ldrb	r3, [r4, #8]
    450e:	ldrh	r2, [r6, #0]
    4510:	str	r2, [sp, #28]
    4512:	cmp	r3, #0
    4514:	beq.n	45ca <MTPD::GetObjectInfo(unsigned long)+0xda>
      write_length_ += len;
    4516:	ldr	r3, [r4, #12]
    uint32_t size, parent;
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    write32(store); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    4518:	ldr	r2, [sp, #20]
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    451a:	adds	r3, #4
    uint32_t size, parent;
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    write32(store); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    451c:	adds	r2, #1
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    451e:	str	r3, [r4, #12]
    uint32_t size, parent;
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    write32(store); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    4520:	beq.w	46fa <MTPD::GetObjectInfo(unsigned long)+0x20a>
    4524:	movs	r2, #0
    4526:	strh.w	r2, [sp, #16]
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    452a:	adds	r3, #2
    452c:	movs	r2, #0
    452e:	str	r3, [r4, #12]
    4530:	strh.w	r2, [sp, #14]
    4534:	adds	r3, #2
    4536:	ldr	r2, [sp, #20]
    4538:	str	r3, [r4, #12]
    453a:	str	r2, [sp, #60]	; 0x3c
    453c:	adds	r3, #4
    453e:	movs	r2, #0
    4540:	str	r3, [r4, #12]
    4542:	strh.w	r2, [sp, #12]
    4546:	adds	r3, #2
    4548:	movs	r2, #0
    454a:	str	r3, [r4, #12]
    454c:	str	r2, [sp, #56]	; 0x38
    454e:	adds	r3, #4
    4550:	movs	r2, #0
    4552:	str	r3, [r4, #12]
    4554:	str	r2, [sp, #52]	; 0x34
    4556:	adds	r3, #4
    4558:	movs	r2, #0
    455a:	str	r3, [r4, #12]
    455c:	str	r2, [sp, #48]	; 0x30
    455e:	adds	r3, #4
    4560:	movs	r2, #0
    4562:	str	r3, [r4, #12]
    4564:	str	r2, [sp, #44]	; 0x2c
    4566:	adds	r3, #4
    4568:	movs	r2, #0
    456a:	str	r3, [r4, #12]
    456c:	str	r2, [sp, #40]	; 0x28
    456e:	adds	r3, #4
    4570:	movs	r2, #0
    4572:	str	r3, [r4, #12]
    4574:	str	r2, [sp, #36]	; 0x24
    4576:	adds	r3, #4
    4578:	ldr	r2, [r5, #0]
    457a:	str	r3, [r4, #12]
    457c:	str	r2, [sp, #32]
    457e:	ldr	r2, [sp, #20]
    4580:	sub.w	r2, r2, #4294967295
    4584:	clz	r2, r2
    4588:	lsrs	r2, r2, #5
    458a:	adds	r3, #4
    458c:	str	r3, [r4, #12]
    458e:	strh.w	r2, [sp, #18]
    4592:	adds	r3, #2
    4594:	movs	r2, #0
    4596:	str	r3, [r4, #12]
    4598:	str	r2, [sp, #68]	; 0x44
    459a:	adds	r3, #4
    459c:	movs	r2, #0
    459e:	str	r3, [r4, #12]
    45a0:	str	r2, [sp, #64]	; 0x40
    45a2:	adds	r3, #4
    45a4:	str	r3, [r4, #12]
    write32(0); // bit depth
    write32(parent); // parent
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    write32(0); // association description
    write32(0);  // sequence number
    writestring(filename);
    45a6:	add	r1, sp, #72	; 0x48
    45a8:	mov	r0, r4
    45aa:	bl	40a4 <MTPD::writestring(char const*)>
    writestring("");  // date created
    45ae:	mov	r0, r4
    45b0:	ldr	r1, [pc, #392]	; (473c <MTPD::GetObjectInfo(unsigned long)+0x24c>)
    45b2:	bl	40a4 <MTPD::writestring(char const*)>
    writestring("");  // date modified
    45b6:	mov	r0, r4
    45b8:	ldr	r1, [pc, #384]	; (473c <MTPD::GetObjectInfo(unsigned long)+0x24c>)
    45ba:	bl	40a4 <MTPD::writestring(char const*)>
    writestring("");  // keywords
    45be:	mov	r0, r4
    45c0:	ldr	r1, [pc, #376]	; (473c <MTPD::GetObjectInfo(unsigned long)+0x24c>)
    45c2:	bl	40a4 <MTPD::writestring(char const*)>
  }
    45c6:	add	sp, #332	; 0x14c
    45c8:	pop	{r4, r5, r6, r7, pc}
    45ca:	add	r1, sp, #28
    45cc:	movs	r2, #4
    45ce:	mov	r0, r4
    45d0:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    uint32_t size, parent;
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    write32(store); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    45d4:	ldr	r3, [sp, #20]
    45d6:	ldrb	r6, [r4, #8]
    45d8:	adds	r3, #1
    45da:	movw	r3, #12289	; 0x3001
    45de:	it	ne
    45e0:	movne	r3, #0
    45e2:	strh.w	r3, [sp, #16]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    45e6:	cmp	r6, #0
    45e8:	bne.w	470c <MTPD::GetObjectInfo(unsigned long)+0x21c>
    45ec:	add	r1, sp, #16
    45ee:	movs	r2, #2
    45f0:	mov	r0, r4
    45f2:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    45f6:	ldrb	r3, [r4, #8]
    45f8:	strh.w	r6, [sp, #14]
    45fc:	cmp	r3, #0
    45fe:	bne.w	4710 <MTPD::GetObjectInfo(unsigned long)+0x220>
    4602:	movs	r2, #2
    4604:	add.w	r1, sp, #14
    4608:	mov	r0, r4
    460a:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    460e:	ldrb	r3, [r4, #8]
    4610:	ldr	r2, [sp, #20]
    4612:	str	r2, [sp, #60]	; 0x3c
    4614:	cmp	r3, #0
    4616:	bne.n	4714 <MTPD::GetObjectInfo(unsigned long)+0x224>
    4618:	add	r1, sp, #60	; 0x3c
    461a:	movs	r2, #4
    461c:	mov	r0, r4
    461e:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4622:	ldrb	r3, [r4, #8]
    4624:	strh.w	r6, [sp, #12]
    4628:	cmp	r3, #0
    462a:	bne.n	4718 <MTPD::GetObjectInfo(unsigned long)+0x228>
    462c:	add	r1, sp, #12
    462e:	movs	r2, #2
    4630:	mov	r0, r4
    4632:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4636:	ldrb	r3, [r4, #8]
    4638:	str	r6, [sp, #56]	; 0x38
    463a:	cmp	r3, #0
    463c:	bne.n	471c <MTPD::GetObjectInfo(unsigned long)+0x22c>
    463e:	add	r1, sp, #56	; 0x38
    4640:	movs	r2, #4
    4642:	mov	r0, r4
    4644:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4648:	ldrb	r3, [r4, #8]
    464a:	str	r6, [sp, #52]	; 0x34
    464c:	cmp	r3, #0
    464e:	bne.n	4720 <MTPD::GetObjectInfo(unsigned long)+0x230>
    4650:	add	r1, sp, #52	; 0x34
    4652:	movs	r2, #4
    4654:	mov	r0, r4
    4656:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    465a:	ldrb	r3, [r4, #8]
    465c:	str	r6, [sp, #48]	; 0x30
    465e:	cmp	r3, #0
    4660:	bne.n	4724 <MTPD::GetObjectInfo(unsigned long)+0x234>
    4662:	add	r1, sp, #48	; 0x30
    4664:	movs	r2, #4
    4666:	mov	r0, r4
    4668:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    466c:	ldrb	r3, [r4, #8]
    466e:	str	r6, [sp, #44]	; 0x2c
    4670:	cmp	r3, #0
    4672:	bne.n	4728 <MTPD::GetObjectInfo(unsigned long)+0x238>
    4674:	add	r1, sp, #44	; 0x2c
    4676:	movs	r2, #4
    4678:	mov	r0, r4
    467a:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    467e:	ldrb	r3, [r4, #8]
    4680:	str	r6, [sp, #40]	; 0x28
    4682:	cmp	r3, #0
    4684:	bne.n	472c <MTPD::GetObjectInfo(unsigned long)+0x23c>
    4686:	add	r1, sp, #40	; 0x28
    4688:	movs	r2, #4
    468a:	mov	r0, r4
    468c:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4690:	ldrb	r3, [r4, #8]
    4692:	str	r6, [sp, #36]	; 0x24
    4694:	cmp	r3, #0
    4696:	bne.n	4730 <MTPD::GetObjectInfo(unsigned long)+0x240>
    4698:	movs	r2, #4
    469a:	add	r1, sp, #36	; 0x24
    469c:	mov	r0, r4
    469e:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    46a2:	ldrb	r3, [r4, #8]
    46a4:	ldr	r2, [r5, #0]
    46a6:	str	r2, [sp, #32]
    46a8:	cmp	r3, #0
    46aa:	bne.n	4734 <MTPD::GetObjectInfo(unsigned long)+0x244>
    46ac:	add	r1, sp, #32
    46ae:	movs	r2, #4
    46b0:	mov	r0, r4
    46b2:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    46b6:	ldr	r3, [sp, #20]
    46b8:	ldrb	r6, [r4, #8]
    46ba:	sub.w	r3, r3, #4294967295
    46be:	clz	r3, r3
    46c2:	lsrs	r3, r3, #5
    46c4:	strh.w	r3, [sp, #18]
    46c8:	cmp	r6, #0
    46ca:	bne.n	4738 <MTPD::GetObjectInfo(unsigned long)+0x248>
    46cc:	add.w	r1, sp, #18
    46d0:	movs	r2, #2
    46d2:	mov	r0, r4
    46d4:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    46d8:	ldrb	r5, [r4, #8]
    46da:	str	r6, [sp, #68]	; 0x44
    46dc:	cbnz	r5, 4708 <MTPD::GetObjectInfo(unsigned long)+0x218>
    46de:	add	r1, sp, #68	; 0x44
    46e0:	movs	r2, #4
    46e2:	mov	r0, r4
    46e4:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    46e8:	ldrb	r3, [r4, #8]
    46ea:	str	r5, [sp, #64]	; 0x40
    46ec:	cbnz	r3, 4704 <MTPD::GetObjectInfo(unsigned long)+0x214>
    46ee:	add	r1, sp, #64	; 0x40
    46f0:	movs	r2, #4
    46f2:	mov	r0, r4
    46f4:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    46f8:	b.n	45a6 <MTPD::GetObjectInfo(unsigned long)+0xb6>
    46fa:	movw	r2, #12289	; 0x3001
    46fe:	strh.w	r2, [sp, #16]
    4702:	b.n	452a <MTPD::GetObjectInfo(unsigned long)+0x3a>
    4704:	ldr	r3, [r4, #12]
    4706:	b.n	45a2 <MTPD::GetObjectInfo(unsigned long)+0xb2>
    4708:	ldr	r3, [r4, #12]
    470a:	b.n	459a <MTPD::GetObjectInfo(unsigned long)+0xaa>
    470c:	ldr	r3, [r4, #12]
    470e:	b.n	452a <MTPD::GetObjectInfo(unsigned long)+0x3a>
    4710:	ldr	r3, [r4, #12]
    4712:	b.n	4534 <MTPD::GetObjectInfo(unsigned long)+0x44>
    4714:	ldr	r3, [r4, #12]
    4716:	b.n	453c <MTPD::GetObjectInfo(unsigned long)+0x4c>
    4718:	ldr	r3, [r4, #12]
    471a:	b.n	4546 <MTPD::GetObjectInfo(unsigned long)+0x56>
    471c:	ldr	r3, [r4, #12]
    471e:	b.n	454e <MTPD::GetObjectInfo(unsigned long)+0x5e>
    4720:	ldr	r3, [r4, #12]
    4722:	b.n	4556 <MTPD::GetObjectInfo(unsigned long)+0x66>
    4724:	ldr	r3, [r4, #12]
    4726:	b.n	455e <MTPD::GetObjectInfo(unsigned long)+0x6e>
    4728:	ldr	r3, [r4, #12]
    472a:	b.n	4566 <MTPD::GetObjectInfo(unsigned long)+0x76>
    472c:	ldr	r3, [r4, #12]
    472e:	b.n	456e <MTPD::GetObjectInfo(unsigned long)+0x7e>
    4730:	ldr	r3, [r4, #12]
    4732:	b.n	4576 <MTPD::GetObjectInfo(unsigned long)+0x86>
    4734:	ldr	r3, [r4, #12]
    4736:	b.n	457e <MTPD::GetObjectInfo(unsigned long)+0x8e>
    4738:	ldr	r3, [r4, #12]
    473a:	b.n	4592 <MTPD::GetObjectInfo(unsigned long)+0xa2>
    473c:	.word	0x00015880

00004740 <MTPD::getObjectPropsSupported(unsigned long)>:
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    4740:	push	{r4, r5, r6, r7, lr}
      write32(propertyListNum);
    4742:	ldr	r7, [pc, #96]	; (47a4 <MTPD::getObjectPropsSupported(unsigned long)+0x64>)
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4744:	ldrb	r2, [r0, #8]
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
    4746:	ldr	r3, [r7, #0]
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    4748:	sub	sp, #12
    474a:	mov	r4, r0
    474c:	str	r3, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    474e:	cbz	r2, 4796 <MTPD::getObjectPropsSupported(unsigned long)+0x56>
      write_length_ += len;
    4750:	ldr	r2, [r0, #12]
    4752:	adds	r2, #4
    4754:	str	r2, [r0, #12]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    4756:	cbz	r3, 4792 <MTPD::getObjectPropsSupported(unsigned long)+0x52>
    4758:	ldr	r6, [pc, #76]	; (47a8 <MTPD::getObjectPropsSupported(unsigned long)+0x68>)
    475a:	movw	r3, #56321	; 0xdc01
    475e:	movs	r5, #0
    4760:	b.n	4774 <MTPD::getObjectPropsSupported(unsigned long)+0x34>
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    4762:	ldr	r3, [r4, #12]
    4764:	adds	r3, #2
    4766:	str	r3, [r4, #12]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    4768:	ldr	r3, [r7, #0]
    476a:	adds	r5, #1
    476c:	cmp	r3, r5
    476e:	bls.n	4792 <MTPD::getObjectPropsSupported(unsigned long)+0x52>
    4770:	ldrh.w	r3, [r6, #2]!
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4774:	ldrb	r2, [r4, #8]
    4776:	strh.w	r3, [sp, #2]
    477a:	cmp	r2, #0
    477c:	bne.n	4762 <MTPD::getObjectPropsSupported(unsigned long)+0x22>
    477e:	movs	r2, #2
    4780:	add.w	r1, sp, r2
    4784:	mov	r0, r4
    4786:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    478a:	ldr	r3, [r7, #0]
    478c:	adds	r5, #1
    478e:	cmp	r3, r5
    4790:	bhi.n	4770 <MTPD::getObjectPropsSupported(unsigned long)+0x30>
    }
    4792:	add	sp, #12
    4794:	pop	{r4, r5, r6, r7, pc}
    4796:	movs	r2, #4
    4798:	add.w	r1, sp, r2
    479c:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    47a0:	ldr	r3, [r7, #0]
    47a2:	b.n	4756 <MTPD::getObjectPropsSupported(unsigned long)+0x16>
    47a4:	.word	0x1fff097c
    47a8:	.word	0x00015a04

000047ac <MTPD::getObjectPropValue(unsigned long, unsigned long)>:
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    47ac:	push	{r4, r5, r6, r7, lr}
    47ae:	mov	r5, r0
    47b0:	sub	sp, #188	; 0xbc
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    47b2:	ldr	r0, [r0, #0]
    47b4:	add.w	r6, sp, #10
    47b8:	add	r4, sp, #20
    47ba:	ldr	r3, [r0, #0]
    47bc:	stmia.w	sp, {r4, r6}
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    47c0:	mov	r4, r2
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    47c2:	ldr	r6, [r3, #36]	; 0x24
    47c4:	add	r2, sp, #56	; 0x38
    47c6:	add	r3, sp, #16
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    47c8:	mov	r7, r1
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    47ca:	blx	r6
      dir = size == 0xFFFFFFFFUL;
      switch(p2)
    47cc:	sub.w	r2, r4, #56320	; 0xdc00
    47d0:	subs	r2, #1
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
      dir = size == 0xFFFFFFFFUL;
    47d2:	ldr	r3, [sp, #16]
      switch(p2)
    47d4:	cmp	r2, #67	; 0x43
    47d6:	bhi.n	483a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8e>
    47d8:	tbb	[pc, r2]
    47dc:	.word	0x7063483d
    47e0:	.word	0x31372f2f
    47e4:	.word	0x2f582f31
    47e8:	.word	0x2f2f2f2f
    47ec:	.word	0x2f2f2f2f
    47f0:	.word	0x2f2f2f2f
    47f4:	.word	0x2f2f2f2f
    47f8:	.word	0x2f2f2f2f
    47fc:	.word	0x2f2f2f2f
    4800:	.word	0x2f2f2f2f
    4804:	.word	0x2f2f2f2f
    4808:	.word	0x2f2f2f2f
    480c:	.word	0x2f2f2f2f
    4810:	.word	0x2f2f2f2f
    4814:	.word	0x2f2f2f2f
    4818:	.word	0x2f2f2f2f
    481c:	.word	0x372f2f22
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4820:	ldrb	r3, [r5, #8]
    4822:	str	r7, [sp, #52]	; 0x34
    4824:	cmp	r3, #0
    4826:	beq.n	48cc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x120>
      write_length_ += len;
    4828:	ldr	r3, [r5, #12]
    482a:	adds	r3, #4
    482c:	str	r3, [r5, #12]
    482e:	adds	r3, #4
    4830:	str	r3, [r5, #12]
    4832:	adds	r3, #4
    4834:	str	r3, [r5, #12]
    4836:	adds	r3, #4
    4838:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    483a:	add	sp, #188	; 0xbc
    483c:	pop	{r4, r5, r6, r7, pc}
          break;
        case MTP_PROPERTY_DATE_CREATED:       //0xDC08:
          writestring("");
          break;
        case MTP_PROPERTY_DATE_MODIFIED:      //0xDC09:
          writestring("");
    483e:	mov	r0, r5
    4840:	ldr	r1, [pc, #268]	; (4950 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1a4>)
    4842:	bl	40a4 <MTPD::writestring(char const*)>
          writestring(name);
          break;
        default:
          break;
      }
    }
    4846:	add	sp, #188	; 0xbc
    4848:	pop	{r4, r5, r6, r7, pc}
          write32(parent);
          write32(store);
          write32(0);
          break;
        case MTP_PROPERTY_NAME:               //0xDC44:
          writestring(name);
    484a:	add	r1, sp, #56	; 0x38
    484c:	mov	r0, r5
    484e:	bl	40a4 <MTPD::writestring(char const*)>
          break;
        default:
          break;
      }
    }
    4852:	add	sp, #188	; 0xbc
    4854:	pop	{r4, r5, r6, r7, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4856:	ldrb	r3, [r5, #8]
    4858:	ldrh.w	r2, [sp, #10]
    485c:	str	r2, [sp, #24]
    485e:	cmp	r3, #0
    4860:	beq.n	491c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x170>
      write_length_ += len;
    4862:	ldr	r3, [r5, #12]
    4864:	adds	r3, #4
    4866:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    4868:	add	sp, #188	; 0xbc
    486a:	pop	{r4, r5, r6, r7, pc}
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(store);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    486c:	adds	r3, #1
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    486e:	ldrb	r2, [r5, #8]
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(store);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    4870:	movw	r3, #12289	; 0x3001
    4874:	it	ne
    4876:	movne.w	r3, #12288	; 0x3000
    487a:	strh.w	r3, [sp, #12]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    487e:	cmp	r2, #0
    4880:	beq.n	4910 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x164>
      write_length_ += len;
    4882:	ldr	r3, [r5, #12]
    4884:	adds	r3, #2
    4886:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    4888:	add	sp, #188	; 0xbc
    488a:	pop	{r4, r5, r6, r7, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    488c:	ldrb	r3, [r5, #8]
    488e:	ldr	r2, [sp, #20]
    4890:	str	r2, [sp, #36]	; 0x24
    4892:	cmp	r3, #0
    4894:	bne.n	4862 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xb6>
    4896:	mov	r0, r5
    4898:	movs	r2, #4
    489a:	add	r1, sp, #36	; 0x24
    489c:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    48a0:	b.n	483a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8e>
    48a2:	ldrb	r3, [r5, #8]
    48a4:	movs	r2, #0
    48a6:	strh.w	r2, [sp, #14]
    48aa:	cmp	r3, #0
    48ac:	bne.n	4882 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xd6>
    48ae:	mov	r0, r5
    48b0:	movs	r2, #2
    48b2:	add.w	r1, sp, #14
    48b6:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    48ba:	b.n	483a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8e>
    48bc:	ldrb	r4, [r5, #8]
    48be:	str	r3, [sp, #32]
    48c0:	cmp	r4, #0
    48c2:	beq.n	4928 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x17c>
      write_length_ += len;
    48c4:	ldr	r3, [r5, #12]
    48c6:	adds	r3, #4
    48c8:	str	r3, [r5, #12]
    48ca:	b.n	4836 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8a>
    48cc:	movs	r2, #4
    48ce:	add	r1, sp, #52	; 0x34
    48d0:	mov	r0, r5
    48d2:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    48d6:	ldrb	r3, [r5, #8]
    48d8:	ldr	r2, [sp, #20]
    48da:	str	r2, [sp, #48]	; 0x30
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    48dc:	cmp	r3, #0
    48de:	bne.n	494c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1a0>
    48e0:	movs	r2, #4
    48e2:	add	r1, sp, #48	; 0x30
    48e4:	mov	r0, r5
    48e6:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    48ea:	ldrb	r4, [r5, #8]
    48ec:	ldrh.w	r3, [sp, #10]
    48f0:	str	r3, [sp, #44]	; 0x2c
    48f2:	cbnz	r4, 4948 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x19c>
    48f4:	movs	r2, #4
    48f6:	add	r1, sp, #44	; 0x2c
    48f8:	mov	r0, r5
    48fa:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    48fe:	ldrb	r3, [r5, #8]
    4900:	str	r4, [sp, #40]	; 0x28
    4902:	cbnz	r3, 4944 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x198>
    4904:	mov	r0, r5
    4906:	movs	r2, #4
    4908:	add	r1, sp, #40	; 0x28
    490a:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    490e:	b.n	483a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8e>
    4910:	mov	r0, r5
    4912:	movs	r2, #2
    4914:	add	r1, sp, #12
    4916:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    491a:	b.n	483a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8e>
    491c:	mov	r0, r5
    491e:	movs	r2, #4
    4920:	add	r1, sp, #24
    4922:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4926:	b.n	483a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8e>
    4928:	movs	r2, #4
    492a:	add	r1, sp, #32
    492c:	mov	r0, r5
    492e:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4932:	ldrb	r3, [r5, #8]
    4934:	str	r4, [sp, #28]
    4936:	cbnz	r3, 4944 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x198>
    4938:	mov	r0, r5
    493a:	movs	r2, #4
    493c:	add	r1, sp, #28
    493e:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4942:	b.n	483a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8e>
    4944:	ldr	r3, [r5, #12]
    4946:	b.n	4836 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8a>
    4948:	ldr	r3, [r5, #12]
    494a:	b.n	4832 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x86>
    494c:	ldr	r3, [r5, #12]
    494e:	b.n	482e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x82>
    4950:	.word	0x00015880

00004954 <MTPD::GetStorageInfo(unsigned long)>:
    uint32_t num=storage_->get_FSCount();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    4954:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4958:	mov	r4, r0
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    495a:	ldr	r0, [r0, #0]
    495c:	ldr	r3, [r0, #0]
    uint32_t num=storage_->get_FSCount();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    495e:	sub	sp, #36	; 0x24
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    4960:	ldr	r3, [r3, #20]
    uint32_t num=storage_->get_FSCount();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    4962:	mov	r5, r1
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    4964:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4966:	ldrb	r3, [r4, #8]
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    4968:	cmp	r0, #0
    496a:	ite	eq
    496c:	moveq	r2, #4
    496e:	movne	r2, #1
    4970:	strh.w	r2, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4974:	cmp	r3, #0
    4976:	beq.n	4a12 <MTPD::GetStorageInfo(unsigned long)+0xbe>
      write_length_ += len;
    4978:	ldr	r3, [r4, #12]
    497a:	adds	r3, #2
    497c:	str	r3, [r4, #12]
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories( storage) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    497e:	ldr	r0, [r4, #0]
    4980:	ldr	r3, [r0, #0]
    4982:	mov	r1, r5
    4984:	ldr	r3, [r3, #24]
    4986:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4988:	ldrb	r6, [r4, #8]
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories( storage) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    498a:	cmp	r0, #0
    498c:	ite	eq
    498e:	moveq	r3, #1
    4990:	movne	r3, #2
    4992:	strh.w	r3, [sp, #10]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4996:	cmp	r6, #0
    4998:	beq.n	4a5a <MTPD::GetStorageInfo(unsigned long)+0x106>
      write_length_ += len;
    499a:	ldr	r3, [r4, #12]
    499c:	movs	r2, #0
    499e:	adds	r3, #2
    49a0:	str	r3, [r4, #12]
    49a2:	strh.w	r2, [sp, #8]
    49a6:	adds	r3, #2
    49a8:	str	r3, [r4, #12]
  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories( storage) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)
    
    uint64_t ntotal = storage_->totalSize(storage) ; 
    49aa:	ldr	r0, [r4, #0]
    49ac:	ldr	r3, [r0, #0]
    49ae:	mov	r1, r5
    49b0:	ldr	r3, [r3, #12]
    49b2:	blx	r3
    49b4:	mov	r6, r0
    uint64_t nused = storage_->usedSize(storage) ; 
    49b6:	ldr	r0, [r4, #0]
    49b8:	ldr	r3, [r0, #0]
  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories( storage) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)
    
    uint64_t ntotal = storage_->totalSize(storage) ; 
    49ba:	mov	r7, r1
    uint64_t nused = storage_->usedSize(storage) ; 
    49bc:	ldr	r3, [r3, #16]
    49be:	mov	r1, r5
    49c0:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    49c2:	ldrb	r3, [r4, #8]
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories( storage) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)
    
    uint64_t ntotal = storage_->totalSize(storage) ; 
    uint64_t nused = storage_->usedSize(storage) ; 
    49c4:	mov	r8, r0
    49c6:	mov	r9, r1
    49c8:	strd	r6, r7, [sp, #24]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    49cc:	cbz	r3, 4a20 <MTPD::GetStorageInfo(unsigned long)+0xcc>
    49ce:	subs	r6, r6, r0
      write_length_ += len;
    49d0:	ldr	r3, [r4, #12]
    49d2:	sbc.w	r7, r7, r1
    49d6:	strd	r6, r7, [sp, #16]
    49da:	adds	r3, #8
    49dc:	str	r3, [r4, #12]
    49de:	adds	r3, #8
    49e0:	mov.w	r2, #4294967295
    49e4:	str	r3, [r4, #12]
    49e6:	str	r2, [sp, #12]
    49e8:	adds	r3, #4
    49ea:	str	r3, [r4, #12]
    write64(ntotal);  // max capacity
    write64((ntotal-nused));  // free space (100M)
    //
    write32(0xFFFFFFFFUL);  // free space (objects)
//    const char *name = storage_->getStorageName(storage);
    const char *name = storage_->get_FSName(storage);
    49ec:	ldr	r0, [r4, #0]
    49ee:	ldr	r2, [pc, #160]	; (4a90 <MTPD::GetStorageInfo(unsigned long)+0x13c>)
    49f0:	ldr	r3, [r0, #0]
    49f2:	ldr	r3, [r3, #8]
    49f4:	cmp	r3, r2
    49f6:	bne.n	4a7a <MTPD::GetStorageInfo(unsigned long)+0x126>
    const char *sd_getFSName(uint32_t storage) { return sd_name[storage-1];}
    49f8:	add.w	r0, r0, r5, lsl #2
    49fc:	ldr	r1, [r0, #4]
    writestring(name);  // storage descriptor
    49fe:	mov	r0, r4
    4a00:	bl	40a4 <MTPD::writestring(char const*)>
    writestring("");  // volume identifier
    4a04:	mov	r0, r4
    4a06:	ldr	r1, [pc, #140]	; (4a94 <MTPD::GetStorageInfo(unsigned long)+0x140>)
    4a08:	bl	40a4 <MTPD::writestring(char const*)>
  }
    4a0c:	add	sp, #36	; 0x24
    4a0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4a12:	movs	r2, #2
    4a14:	add.w	r1, sp, #6
    4a18:	mov	r0, r4
    4a1a:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4a1e:	b.n	497e <MTPD::GetStorageInfo(unsigned long)+0x2a>
    4a20:	movs	r2, #8
    4a22:	add	r1, sp, #24
    4a24:	mov	r0, r4
    4a26:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4a2a:	subs.w	r6, r6, r8
    4a2e:	ldrb	r3, [r4, #8]
    4a30:	sbc.w	r7, r7, r9
    4a34:	strd	r6, r7, [sp, #16]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4a38:	cbnz	r3, 4a86 <MTPD::GetStorageInfo(unsigned long)+0x132>
    4a3a:	movs	r2, #8
    4a3c:	add	r1, sp, #16
    4a3e:	mov	r0, r4
    4a40:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4a44:	ldrb	r3, [r4, #8]
    4a46:	mov.w	r2, #4294967295
    4a4a:	str	r2, [sp, #12]
    4a4c:	cbnz	r3, 4a82 <MTPD::GetStorageInfo(unsigned long)+0x12e>
    4a4e:	movs	r2, #4
    4a50:	add	r1, sp, #12
    4a52:	mov	r0, r4
    4a54:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4a58:	b.n	49ec <MTPD::GetStorageInfo(unsigned long)+0x98>
    4a5a:	movs	r2, #2
    4a5c:	add.w	r1, sp, #10
    4a60:	mov	r0, r4
    4a62:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4a66:	ldrb	r3, [r4, #8]
    4a68:	strh.w	r6, [sp, #8]
    4a6c:	cbnz	r3, 4a8a <MTPD::GetStorageInfo(unsigned long)+0x136>
    4a6e:	movs	r2, #2
    4a70:	add	r1, sp, #8
    4a72:	mov	r0, r4
    4a74:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4a78:	b.n	49aa <MTPD::GetStorageInfo(unsigned long)+0x56>
    write64(ntotal);  // max capacity
    write64((ntotal-nused));  // free space (100M)
    //
    write32(0xFFFFFFFFUL);  // free space (objects)
//    const char *name = storage_->getStorageName(storage);
    const char *name = storage_->get_FSName(storage);
    4a7a:	mov	r1, r5
    4a7c:	blx	r3
    4a7e:	mov	r1, r0
    4a80:	b.n	49fe <MTPD::GetStorageInfo(unsigned long)+0xaa>
    4a82:	ldr	r3, [r4, #12]
    4a84:	b.n	49e8 <MTPD::GetStorageInfo(unsigned long)+0x94>
    4a86:	ldr	r3, [r4, #12]
    4a88:	b.n	49de <MTPD::GetStorageInfo(unsigned long)+0x8a>
    4a8a:	ldr	r3, [r4, #12]
    4a8c:	b.n	49a6 <MTPD::GetStorageInfo(unsigned long)+0x52>
    4a8e:	nop
    4a90:	.word	0x00001b99
    4a94:	.word	0x00015880

00004a98 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
    4a98:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      switch(p1)
    4a9c:	sub.w	r1, r1, #56320	; 0xdc00
    4aa0:	subs	r1, #1
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
    4aa2:	sub	sp, #148	; 0x94
    4aa4:	mov	r4, r0
      switch(p1)
    4aa6:	cmp	r1, #67	; 0x43
    4aa8:	bhi.n	4b60 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    4aaa:	tbh	[pc, r1, lsl #1]
    4aae:	.short	0x005c
    4ab0:	.word	0x0080006e
    4ab4:	.word	0x005900c6
    4ab8:	.word	0x00d80059
    4abc:	.word	0x01690121
    4ac0:	.word	0x01b10059
    4ac4:	.word	0x00590059
    4ac8:	.word	0x00590059
    4acc:	.word	0x00590059
    4ad0:	.word	0x00590059
    4ad4:	.word	0x00590059
    4ad8:	.word	0x00590059
    4adc:	.word	0x00590059
    4ae0:	.word	0x00590059
    4ae4:	.word	0x00590059
    4ae8:	.word	0x00590059
    4aec:	.word	0x00590059
    4af0:	.word	0x00590059
    4af4:	.word	0x00590059
    4af8:	.word	0x00590059
    4afc:	.word	0x00590059
    4b00:	.word	0x00590059
    4b04:	.word	0x00590059
    4b08:	.word	0x00590059
    4b0c:	.word	0x00590059
    4b10:	.word	0x00590059
    4b14:	.word	0x00590059
    4b18:	.word	0x00590059
    4b1c:	.word	0x00590059
    4b20:	.word	0x00590059
    4b24:	.word	0x00590059
    4b28:	.word	0x00590059
    4b2c:	.word	0x01f70059
    4b30:	.word	0x00590059
    4b34:	.short	0x0044
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4b36:	ldrb	r3, [r0, #8]
    4b38:	movw	r2, #56388	; 0xdc44
    4b3c:	strh.w	r2, [sp, #70]	; 0x46
    4b40:	cmp	r3, #0
    4b42:	beq.w	4fc0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x528>
      write_length_ += len;
    4b46:	ldr	r3, [r4, #12]
    4b48:	adds	r3, #2
    4b4a:	str	r3, [r4, #12]
    4b4c:	adds	r3, #2
    4b4e:	str	r3, [r4, #12]
    4b50:	adds	r3, #1
    4b52:	str	r3, [r4, #12]
    4b54:	adds	r3, #1
    4b56:	str	r3, [r4, #12]
    4b58:	adds	r3, #4
    4b5a:	str	r3, [r4, #12]
    4b5c:	adds	r3, #1
    4b5e:	str	r3, [r4, #12]
          write8(0);
          break;
        default:
          break;
      }
    }
    4b60:	add	sp, #148	; 0x94
    4b62:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4b66:	ldrb	r3, [r0, #8]
    4b68:	movw	r2, #56321	; 0xdc01
    4b6c:	strh.w	r2, [sp, #30]
    4b70:	cmp	r3, #0
    4b72:	beq.w	50d4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x63c>
      write_length_ += len;
    4b76:	ldr	r3, [r4, #12]
    4b78:	adds	r3, #2
    4b7a:	str	r3, [r4, #12]
    4b7c:	adds	r3, #2
    4b7e:	str	r3, [r4, #12]
    4b80:	adds	r3, #1
    4b82:	str	r3, [r4, #12]
    4b84:	adds	r3, #4
    4b86:	str	r3, [r4, #12]
    4b88:	b.n	4b58 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4b8a:	ldrb	r3, [r0, #8]
    4b8c:	movw	r2, #56322	; 0xdc02
    4b90:	strh.w	r2, [sp, #36]	; 0x24
    4b94:	cmp	r3, #0
    4b96:	beq.w	4f42 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4aa>
      write_length_ += len;
    4b9a:	ldr	r3, [r4, #12]
    4b9c:	adds	r3, #2
    4b9e:	str	r3, [r4, #12]
    4ba0:	adds	r3, #2
    4ba2:	str	r3, [r4, #12]
    4ba4:	adds	r3, #1
    4ba6:	str	r3, [r4, #12]
    4ba8:	adds	r3, #2
    4baa:	str	r3, [r4, #12]
    4bac:	b.n	4b58 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4bae:	ldrb	r3, [r0, #8]
    4bb0:	movw	r2, #56323	; 0xdc03
    4bb4:	strh.w	r2, [sp, #42]	; 0x2a
    4bb8:	cmp	r3, #0
    4bba:	bne.n	4b9a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x102>
    4bbc:	movs	r2, #2
    4bbe:	add.w	r1, sp, #42	; 0x2a
    4bc2:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4bc6:	ldrb	r7, [r4, #8]
    4bc8:	movs	r6, #4
    4bca:	strh.w	r6, [sp, #40]	; 0x28
    4bce:	cmp	r7, #0
    4bd0:	bne.w	516a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d2>
    4bd4:	movs	r2, #2
    4bd6:	add	r1, sp, #40	; 0x28
    4bd8:	mov	r0, r4
    4bda:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4bde:	ldrb	r5, [r4, #8]
    4be0:	strb.w	r7, [sp, #9]
    4be4:	cmp	r5, #0
    4be6:	bne.w	5166 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ce>
    4bea:	movs	r2, #1
    4bec:	add.w	r1, sp, #9
    4bf0:	mov	r0, r4
    4bf2:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4bf6:	ldrb	r7, [r4, #8]
    4bf8:	strh.w	r5, [sp, #38]	; 0x26
    4bfc:	cmp	r7, #0
    4bfe:	bne.w	5162 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ca>
    4c02:	movs	r2, #2
    4c04:	add.w	r1, sp, #38	; 0x26
    4c08:	mov	r0, r4
    4c0a:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4c0e:	ldrb	r5, [r4, #8]
    4c10:	str	r7, [sp, #84]	; 0x54
    4c12:	cmp	r5, #0
    4c14:	bne.w	513e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    4c18:	mov	r2, r6
    4c1a:	add	r1, sp, #84	; 0x54
    4c1c:	mov	r0, r4
    4c1e:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4c22:	ldrb	r3, [r4, #8]
    4c24:	strb.w	r5, [sp, #8]
    4c28:	cmp	r3, #0
    4c2a:	bne.w	513a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    4c2e:	mov	r0, r4
    4c30:	movs	r2, #1
    4c32:	add	r1, sp, #8
    4c34:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4c38:	b.n	4b60 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    4c3a:	ldrb	r3, [r0, #8]
    4c3c:	movw	r2, #56324	; 0xdc04
    4c40:	strh.w	r2, [sp, #46]	; 0x2e
    4c44:	cmp	r3, #0
    4c46:	beq.w	4ec0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x428>
      write_length_ += len;
    4c4a:	ldr	r3, [r0, #12]
    4c4c:	adds	r3, #2
    4c4e:	str	r3, [r0, #12]
    4c50:	adds	r3, #2
    4c52:	str	r3, [r4, #12]
    4c54:	adds	r3, #1
    4c56:	str	r3, [r4, #12]
    4c58:	adds	r3, #8
    4c5a:	str	r3, [r4, #12]
    4c5c:	b.n	4b58 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4c5e:	ldrb	r3, [r0, #8]
    4c60:	movw	r2, #56327	; 0xdc07
    4c64:	strh.w	r2, [sp, #50]	; 0x32
    4c68:	cmp	r3, #0
    4c6a:	bne.w	4b46 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    4c6e:	movs	r2, #2
    4c70:	add.w	r1, sp, #50	; 0x32
    4c74:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4c78:	ldrb	r3, [r4, #8]
    4c7a:	movw	r2, #65535	; 0xffff
    4c7e:	strh.w	r2, [sp, #48]	; 0x30
    4c82:	cmp	r3, #0
    4c84:	bne.w	5152 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    4c88:	movs	r2, #2
    4c8a:	add	r1, sp, #48	; 0x30
    4c8c:	mov	r0, r4
    4c8e:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4c92:	ldrb	r6, [r4, #8]
    4c94:	movs	r5, #1
    4c96:	strb.w	r5, [sp, #14]
    4c9a:	cmp	r6, #0
    4c9c:	bne.w	514e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    4ca0:	mov	r2, r5
    4ca2:	add.w	r1, sp, #14
    4ca6:	mov	r0, r4
    4ca8:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4cac:	ldrb	r7, [r4, #8]
    4cae:	strb.w	r6, [sp, #13]
    4cb2:	cmp	r7, #0
    4cb4:	bne.w	515e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    4cb8:	mov	r2, r5
    4cba:	add.w	r1, sp, #13
    4cbe:	mov	r0, r4
    4cc0:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4cc4:	ldrb	r6, [r4, #8]
    4cc6:	str	r7, [sp, #92]	; 0x5c
    4cc8:	cmp	r6, #0
    4cca:	bne.w	513e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    4cce:	movs	r2, #4
    4cd0:	add	r1, sp, #92	; 0x5c
    4cd2:	mov	r0, r4
    4cd4:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4cd8:	ldrb	r3, [r4, #8]
    4cda:	strb.w	r6, [sp, #12]
    4cde:	cmp	r3, #0
    4ce0:	bne.w	513a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    4ce4:	mov	r2, r5
    4ce6:	mov	r0, r4
    4ce8:	add	r1, sp, #12
    4cea:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4cee:	b.n	4b60 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    4cf0:	ldrb	r3, [r0, #8]
    4cf2:	movw	r2, #56328	; 0xdc08
    4cf6:	strh.w	r2, [sp, #54]	; 0x36
    4cfa:	cmp	r3, #0
    4cfc:	bne.w	4b46 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    4d00:	movs	r2, #2
    4d02:	add.w	r1, sp, #54	; 0x36
    4d06:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4d0a:	ldrb	r6, [r4, #8]
    4d0c:	movw	r3, #65535	; 0xffff
    4d10:	strh.w	r3, [sp, #52]	; 0x34
    4d14:	cmp	r6, #0
    4d16:	bne.w	5152 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    4d1a:	movs	r2, #2
    4d1c:	add	r1, sp, #52	; 0x34
    4d1e:	mov	r0, r4
    4d20:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4d24:	ldrb	r5, [r4, #8]
    4d26:	strb.w	r6, [sp, #17]
    4d2a:	cmp	r5, #0
    4d2c:	bne.w	514e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    4d30:	movs	r2, #1
    4d32:	add.w	r1, sp, #17
    4d36:	mov	r0, r4
    4d38:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4d3c:	ldrb	r6, [r4, #8]
    4d3e:	strb.w	r5, [sp, #16]
    4d42:	cmp	r6, #0
    4d44:	bne.w	515e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    4d48:	movs	r2, #1
    4d4a:	add	r1, sp, #16
    4d4c:	mov	r0, r4
    4d4e:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4d52:	ldrb	r5, [r4, #8]
    4d54:	str	r6, [sp, #96]	; 0x60
    4d56:	cmp	r5, #0
    4d58:	bne.w	513e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    4d5c:	movs	r2, #4
    4d5e:	add	r1, sp, #96	; 0x60
    4d60:	mov	r0, r4
    4d62:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4d66:	ldrb	r3, [r4, #8]
    4d68:	strb.w	r5, [sp, #15]
    4d6c:	cmp	r3, #0
    4d6e:	bne.w	513a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    4d72:	mov	r0, r4
    4d74:	movs	r2, #1
    4d76:	add.w	r1, sp, #15
    4d7a:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4d7e:	b.n	4b60 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    4d80:	ldrb	r3, [r0, #8]
    4d82:	movw	r2, #56329	; 0xdc09
    4d86:	strh.w	r2, [sp, #58]	; 0x3a
    4d8a:	cmp	r3, #0
    4d8c:	bne.w	4b46 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    4d90:	movs	r2, #2
    4d92:	add.w	r1, sp, #58	; 0x3a
    4d96:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4d9a:	ldrb	r6, [r4, #8]
    4d9c:	movw	r3, #65535	; 0xffff
    4da0:	strh.w	r3, [sp, #56]	; 0x38
    4da4:	cmp	r6, #0
    4da6:	bne.w	5152 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    4daa:	movs	r2, #2
    4dac:	add	r1, sp, #56	; 0x38
    4dae:	mov	r0, r4
    4db0:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4db4:	ldrb	r5, [r4, #8]
    4db6:	strb.w	r6, [sp, #20]
    4dba:	cmp	r5, #0
    4dbc:	bne.w	514e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    4dc0:	movs	r2, #1
    4dc2:	add	r1, sp, #20
    4dc4:	mov	r0, r4
    4dc6:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4dca:	ldrb	r6, [r4, #8]
    4dcc:	strb.w	r5, [sp, #19]
    4dd0:	cmp	r6, #0
    4dd2:	bne.w	515e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    4dd6:	movs	r2, #1
    4dd8:	add.w	r1, sp, #19
    4ddc:	mov	r0, r4
    4dde:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4de2:	ldrb	r5, [r4, #8]
    4de4:	str	r6, [sp, #100]	; 0x64
    4de6:	cmp	r5, #0
    4de8:	bne.w	513e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    4dec:	movs	r2, #4
    4dee:	add	r1, sp, #100	; 0x64
    4df0:	mov	r0, r4
    4df2:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4df6:	ldrb	r3, [r4, #8]
    4df8:	strb.w	r5, [sp, #18]
    4dfc:	cmp	r3, #0
    4dfe:	bne.w	513a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    4e02:	mov	r0, r4
    4e04:	movs	r2, #1
    4e06:	add.w	r1, sp, #18
    4e0a:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4e0e:	b.n	4b60 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    4e10:	ldrb	r3, [r0, #8]
    4e12:	movw	r2, #56331	; 0xdc0b
    4e16:	strh.w	r2, [sp, #62]	; 0x3e
    4e1a:	cmp	r3, #0
    4e1c:	bne.w	4b76 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xde>
    4e20:	movs	r2, #2
    4e22:	add.w	r1, sp, #62	; 0x3e
    4e26:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4e2a:	ldrb	r6, [r4, #8]
    4e2c:	movs	r3, #6
    4e2e:	strh.w	r3, [sp, #60]	; 0x3c
    4e32:	cmp	r6, #0
    4e34:	bne.w	514a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b2>
    4e38:	movs	r2, #2
    4e3a:	add	r1, sp, #60	; 0x3c
    4e3c:	mov	r0, r4
    4e3e:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4e42:	ldrb	r5, [r4, #8]
    4e44:	strb.w	r6, [sp, #22]
    4e48:	cmp	r5, #0
    4e4a:	bne.w	5146 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ae>
    4e4e:	movs	r2, #1
    4e50:	add.w	r1, sp, #22
    4e54:	mov	r0, r4
    4e56:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4e5a:	ldrb	r6, [r4, #8]
    4e5c:	str	r5, [sp, #108]	; 0x6c
    4e5e:	cmp	r6, #0
    4e60:	bne.w	5142 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6aa>
    4e64:	movs	r2, #4
    4e66:	add	r1, sp, #108	; 0x6c
    4e68:	mov	r0, r4
    4e6a:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4e6e:	ldrb	r5, [r4, #8]
    4e70:	str	r6, [sp, #104]	; 0x68
    4e72:	cmp	r5, #0
    4e74:	bne.w	513e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    4e78:	movs	r2, #4
    4e7a:	add	r1, sp, #104	; 0x68
    4e7c:	mov	r0, r4
    4e7e:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4e82:	ldrb	r3, [r4, #8]
    4e84:	strb.w	r5, [sp, #21]
    4e88:	cmp	r3, #0
    4e8a:	bne.w	513a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    4e8e:	mov	r0, r4
    4e90:	movs	r2, #1
    4e92:	add.w	r1, sp, #21
    4e96:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4e9a:	b.n	4b60 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    4e9c:	ldrb	r3, [r0, #8]
    4e9e:	movw	r2, #56385	; 0xdc41
    4ea2:	strh.w	r2, [sp, #66]	; 0x42
    4ea6:	cmp	r3, #0
    4ea8:	beq.w	5042 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5aa>
      write_length_ += len;
    4eac:	ldr	r3, [r0, #12]
    4eae:	adds	r3, #2
    4eb0:	str	r3, [r0, #12]
    4eb2:	adds	r3, #2
    4eb4:	str	r3, [r4, #12]
    4eb6:	adds	r3, #1
    4eb8:	str	r3, [r4, #12]
    4eba:	adds	r3, #8
    4ebc:	str	r3, [r4, #12]
    4ebe:	b.n	4c58 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c0>
    4ec0:	movs	r2, #2
    4ec2:	add.w	r1, sp, #46	; 0x2e
    4ec6:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4eca:	ldrb	r6, [r4, #8]
    4ecc:	movs	r5, #8
    4ece:	strh.w	r5, [sp, #44]	; 0x2c
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    4ed2:	cmp	r6, #0
    4ed4:	bne.w	515a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c2>
    4ed8:	movs	r2, #2
    4eda:	add	r1, sp, #44	; 0x2c
    4edc:	mov	r0, r4
    4ede:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4ee2:	ldrb	r3, [r4, #8]
    4ee4:	strb.w	r6, [sp, #11]
    4ee8:	cmp	r3, #0
    4eea:	bne.w	5156 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6be>
    4eee:	movs	r2, #1
    4ef0:	add.w	r1, sp, #11
    4ef4:	mov	r0, r4
    4ef6:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4efa:	ldrb	r6, [r4, #8]
    4efc:	movs	r2, #0
    4efe:	movs	r3, #0
    4f00:	strd	r2, r3, [sp, #120]	; 0x78
    4f04:	cmp	r6, #0
    4f06:	bne.w	516e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d6>
    4f0a:	mov	r2, r5
    4f0c:	add	r1, sp, #120	; 0x78
    4f0e:	mov	r0, r4
    4f10:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4f14:	ldrb	r5, [r4, #8]
    4f16:	str	r6, [sp, #88]	; 0x58
    4f18:	cmp	r5, #0
    4f1a:	bne.w	513e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    4f1e:	movs	r2, #4
    4f20:	add	r1, sp, #88	; 0x58
    4f22:	mov	r0, r4
    4f24:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4f28:	ldrb	r3, [r4, #8]
    4f2a:	strb.w	r5, [sp, #10]
    4f2e:	cmp	r3, #0
    4f30:	bne.w	513a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    4f34:	mov	r0, r4
    4f36:	movs	r2, #1
    4f38:	add.w	r1, sp, #10
    4f3c:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4f40:	b.n	4b60 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    4f42:	movs	r2, #2
    4f44:	add	r1, sp, #36	; 0x24
    4f46:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4f4a:	ldrb	r7, [r4, #8]
    4f4c:	movs	r6, #4
    4f4e:	strh.w	r6, [sp, #34]	; 0x22
    4f52:	cmp	r7, #0
    4f54:	bne.w	516a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d2>
    4f58:	movs	r2, #2
    4f5a:	add.w	r1, sp, #34	; 0x22
    4f5e:	mov	r0, r4
    4f60:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4f64:	ldrb	r5, [r4, #8]
    4f66:	strb.w	r7, [sp, #7]
    4f6a:	cmp	r5, #0
    4f6c:	bne.w	5166 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ce>
    4f70:	movs	r2, #1
    4f72:	add.w	r1, sp, #7
    4f76:	mov	r0, r4
    4f78:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4f7c:	ldrb	r7, [r4, #8]
    4f7e:	strh.w	r5, [sp, #32]
    4f82:	cmp	r7, #0
    4f84:	bne.w	5162 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ca>
    4f88:	movs	r2, #2
    4f8a:	add	r1, sp, #32
    4f8c:	mov	r0, r4
    4f8e:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4f92:	ldrb	r5, [r4, #8]
    4f94:	str	r7, [sp, #80]	; 0x50
    4f96:	cmp	r5, #0
    4f98:	bne.w	513e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    4f9c:	mov	r2, r6
    4f9e:	add	r1, sp, #80	; 0x50
    4fa0:	mov	r0, r4
    4fa2:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4fa6:	ldrb	r3, [r4, #8]
    4fa8:	strb.w	r5, [sp, #6]
    4fac:	cmp	r3, #0
    4fae:	bne.w	513a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    4fb2:	mov	r0, r4
    4fb4:	movs	r2, #1
    4fb6:	add.w	r1, sp, #6
    4fba:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4fbe:	b.n	4b60 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    4fc0:	movs	r2, #2
    4fc2:	add.w	r1, sp, #70	; 0x46
    4fc6:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4fca:	ldrb	r6, [r4, #8]
    4fcc:	movw	r3, #65535	; 0xffff
    4fd0:	strh.w	r3, [sp, #68]	; 0x44
    4fd4:	cmp	r6, #0
    4fd6:	bne.w	5152 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    4fda:	movs	r2, #2
    4fdc:	add	r1, sp, #68	; 0x44
    4fde:	mov	r0, r4
    4fe0:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4fe4:	ldrb	r5, [r4, #8]
    4fe6:	strb.w	r6, [sp, #27]
    4fea:	cmp	r5, #0
    4fec:	bne.w	514e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    4ff0:	movs	r2, #1
    4ff2:	add.w	r1, sp, #27
    4ff6:	mov	r0, r4
    4ff8:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    4ffc:	ldrb	r6, [r4, #8]
    4ffe:	strb.w	r5, [sp, #26]
    5002:	cmp	r6, #0
    5004:	bne.w	515e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    5008:	movs	r2, #1
    500a:	add.w	r1, sp, #26
    500e:	mov	r0, r4
    5010:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    5014:	ldrb	r5, [r4, #8]
    5016:	str	r6, [sp, #116]	; 0x74
    5018:	cmp	r5, #0
    501a:	bne.w	513e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    501e:	movs	r2, #4
    5020:	add	r1, sp, #116	; 0x74
    5022:	mov	r0, r4
    5024:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    5028:	ldrb	r3, [r4, #8]
    502a:	strb.w	r5, [sp, #25]
    502e:	cmp	r3, #0
    5030:	bne.w	513a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    5034:	mov	r0, r4
    5036:	movs	r2, #1
    5038:	add.w	r1, sp, #25
    503c:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    5040:	b.n	4b60 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    5042:	movs	r2, #2
    5044:	add.w	r1, sp, #66	; 0x42
    5048:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    504c:	ldrb	r5, [r4, #8]
    504e:	movs	r3, #10
    5050:	strh.w	r3, [sp, #64]	; 0x40
    5054:	cmp	r5, #0
    5056:	bne.w	517a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6e2>
    505a:	movs	r2, #2
    505c:	add	r1, sp, #64	; 0x40
    505e:	mov	r0, r4
    5060:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    5064:	ldrb	r3, [r4, #8]
    5066:	strb.w	r5, [sp, #24]
    506a:	cmp	r3, #0
    506c:	bne.w	5176 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6de>
    5070:	movs	r2, #1
    5072:	add	r1, sp, #24
    5074:	mov	r0, r4
    5076:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    507a:	ldrb	r3, [r4, #8]
    507c:	mov.w	r8, #0
    5080:	mov.w	r9, #0
    5084:	strd	r8, r9, [sp, #136]	; 0x88
    5088:	cmp	r3, #0
    508a:	bne.n	5172 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6da>
    508c:	movs	r2, #8
    508e:	add	r1, sp, #136	; 0x88
    5090:	mov	r0, r4
    5092:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    5096:	ldrb	r6, [r4, #8]
    5098:	strd	r8, r9, [sp, #128]	; 0x80
    509c:	cmp	r6, #0
    509e:	bne.n	516e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d6>
    50a0:	movs	r2, #8
    50a2:	add	r1, sp, #128	; 0x80
    50a4:	mov	r0, r4
    50a6:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    50aa:	ldrb	r5, [r4, #8]
    50ac:	str	r6, [sp, #112]	; 0x70
    50ae:	cmp	r5, #0
    50b0:	bne.n	513e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    50b2:	movs	r2, #4
    50b4:	add	r1, sp, #112	; 0x70
    50b6:	mov	r0, r4
    50b8:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    50bc:	ldrb	r3, [r4, #8]
    50be:	strb.w	r5, [sp, #23]
    50c2:	cmp	r3, #0
    50c4:	bne.n	513a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    50c6:	mov	r0, r4
    50c8:	movs	r2, #1
    50ca:	add.w	r1, sp, #23
    50ce:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    50d2:	b.n	4b60 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    50d4:	movs	r2, #2
    50d6:	add.w	r1, sp, #30
    50da:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    50de:	ldrb	r6, [r4, #8]
    50e0:	movs	r3, #6
    50e2:	strh.w	r3, [sp, #28]
    50e6:	cbnz	r6, 514a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b2>
    50e8:	movs	r2, #2
    50ea:	add	r1, sp, #28
    50ec:	mov	r0, r4
    50ee:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    50f2:	ldrb	r5, [r4, #8]
    50f4:	strb.w	r6, [sp, #5]
    50f8:	cbnz	r5, 5146 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ae>
    50fa:	movs	r2, #1
    50fc:	add.w	r1, sp, #5
    5100:	mov	r0, r4
    5102:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    5106:	ldrb	r6, [r4, #8]
    5108:	str	r5, [sp, #76]	; 0x4c
    510a:	cbnz	r6, 5142 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6aa>
    510c:	movs	r2, #4
    510e:	add	r1, sp, #76	; 0x4c
    5110:	mov	r0, r4
    5112:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    5116:	ldrb	r5, [r4, #8]
    5118:	str	r6, [sp, #72]	; 0x48
    511a:	cbnz	r5, 513e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    511c:	movs	r2, #4
    511e:	add	r1, sp, #72	; 0x48
    5120:	mov	r0, r4
    5122:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    5126:	ldrb	r3, [r4, #8]
    5128:	strb.w	r5, [sp, #4]
    512c:	cbnz	r3, 513a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    512e:	mov	r0, r4
    5130:	movs	r2, #1
    5132:	add	r1, sp, #4
    5134:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    5138:	b.n	4b60 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    513a:	ldr	r3, [r4, #12]
    513c:	b.n	4b5c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc4>
    513e:	ldr	r3, [r4, #12]
    5140:	b.n	4b58 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
    5142:	ldr	r3, [r4, #12]
    5144:	b.n	4b84 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xec>
    5146:	ldr	r3, [r4, #12]
    5148:	b.n	4b80 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe8>
    514a:	ldr	r3, [r4, #12]
    514c:	b.n	4b7c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe4>
    514e:	ldr	r3, [r4, #12]
    5150:	b.n	4b50 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
    5152:	ldr	r3, [r4, #12]
    5154:	b.n	4b4c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb4>
    5156:	ldr	r3, [r4, #12]
    5158:	b.n	4c54 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1bc>
    515a:	ldr	r3, [r4, #12]
    515c:	b.n	4c50 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b8>
    515e:	ldr	r3, [r4, #12]
    5160:	b.n	4b54 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbc>
    5162:	ldr	r3, [r4, #12]
    5164:	b.n	4ba8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x110>
    5166:	ldr	r3, [r4, #12]
    5168:	b.n	4ba4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10c>
    516a:	ldr	r3, [r4, #12]
    516c:	b.n	4ba0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x108>
    516e:	ldr	r3, [r4, #12]
    5170:	b.n	4c58 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c0>
    5172:	ldr	r3, [r4, #12]
    5174:	b.n	4eba <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x422>
    5176:	ldr	r3, [r4, #12]
    5178:	b.n	4eb6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x41e>
    517a:	ldr	r3, [r4, #12]
    517c:	b.n	4eb2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x41a>
    517e:	nop

00005180 <MTPD::receive_buffer()>:
      data_buffer_ = usb_malloc();
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::receive_buffer() {
    5180:	push	{r4, lr}
    5182:	mov	r4, r0
    5184:	ldr	r3, [r4, #4]
    while (!data_buffer_) {
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
    5186:	movs	r0, #5
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::receive_buffer() {
    while (!data_buffer_) {
    5188:	cbnz	r3, 5192 <MTPD::receive_buffer()+0x12>
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
    518a:	bl	f0e4 <usb_rx>
    518e:	str	r0, [r4, #4]
      if (!data_buffer_) mtp_yield();
    5190:	cbz	r0, 5194 <MTPD::receive_buffer()+0x14>
    5192:	pop	{r4, pc}
    5194:	bl	1d54 <mtp_yield()>
    5198:	b.n	5184 <MTPD::receive_buffer()+0x4>
    519a:	nop

0000519c <MTPD::GetObject(unsigned long)>:
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    519c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    51a0:	mov	r6, r0
    uint32_t size = storage_->GetSize(object_id);
    51a2:	ldr	r0, [r0, #0]
    51a4:	ldr	r3, [r0, #0]
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    51a6:	sub	sp, #8
    uint32_t size = storage_->GetSize(object_id);
    51a8:	ldr	r3, [r3, #40]	; 0x28
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    51aa:	mov	r8, r1
    uint32_t size = storage_->GetSize(object_id);
    51ac:	blx	r3
    if (write_get_length_) {
    51ae:	ldrb	r5, [r6, #8]
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    uint32_t size = storage_->GetSize(object_id);
    51b0:	mov	r7, r0
    if (write_get_length_) {
    51b2:	cbnz	r5, 520c <MTPD::GetObject(unsigned long)+0x70>
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    51b4:	cbz	r0, 5206 <MTPD::GetObject(unsigned long)+0x6a>
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
        data_buffer_->len += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    51b6:	mov	r9, r5
    51b8:	b.n	51be <MTPD::GetObject(unsigned long)+0x22>
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    51ba:	cmp	r7, r5
    51bc:	bls.n	5206 <MTPD::GetObject(unsigned long)+0x6a>
        get_buffer();
    51be:	mov	r0, r6
    51c0:	bl	4028 <MTPD::get_buffer()>
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
    51c4:	ldmia.w	r6, {r0, r3}
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
        get_buffer();
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
    51c8:	ldrh.w	r2, [r3], #8
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
    51cc:	ldr	r1, [r0, #0]
    51ce:	subs	r4, r7, r5
    51d0:	rsb	lr, r2, #64	; 0x40
    51d4:	cmp	r4, lr
    51d6:	it	cs
    51d8:	movcs	r4, lr
    51da:	str	r4, [sp, #0]
    51dc:	add	r3, r2
    51de:	ldr.w	sl, [r1, #48]	; 0x30
    51e2:	mov	r2, r5
    51e4:	mov	r1, r8
    51e6:	blx	sl
        pos += to_copy;
        data_buffer_->len += to_copy;
    51e8:	ldr	r1, [r6, #4]
    51ea:	ldrh	r3, [r1, #0]
    51ec:	add	r3, r4
    51ee:	uxth	r3, r3
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    51f0:	cmp	r3, #64	; 0x40
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
    51f2:	add	r5, r4
        data_buffer_->len += to_copy;
    51f4:	strh	r3, [r1, #0]
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    51f6:	bne.n	51ba <MTPD::GetObject(unsigned long)+0x1e>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
    51f8:	movs	r0, #4
    51fa:	bl	f254 <usb_tx>
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    51fe:	cmp	r7, r5
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
        data_buffer_->len += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    5200:	str.w	r9, [r6, #4]
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    5204:	bhi.n	51be <MTPD::GetObject(unsigned long)+0x22>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
        }
      }
    }
  }
    5206:	add	sp, #8
    5208:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    520c:	ldr	r3, [r6, #12]
    520e:	add	r7, r3
    5210:	str	r7, [r6, #12]
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
        }
      }
    }
  }
    5212:	add	sp, #8
    5214:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00005218 <MTPD::read(char*, unsigned long)>:
                CONTAINER->params[0], CONTAINER->params[1], CONTAINER->params[2]);  }


  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    5218:	cbz	r2, 5284 <MTPD::read(char*, unsigned long)+0x6c>
                CONTAINER->op, CONTAINER->len, CONTAINER->type, CONTAINER->transaction_id, \
                CONTAINER->params[0], CONTAINER->params[1], CONTAINER->params[2]);  }


  void MTPD::read(char* data, uint32_t size) 
  {
    521a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    521e:	mov	r6, r0
    5220:	mov	r5, r1
    while (size) {
    5222:	mov	r8, r2
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
      if (data_buffer_->index == data_buffer_->len) {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
    5224:	movs	r7, #0


  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
      receive_buffer();
    5226:	mov	r0, r6
    5228:	bl	5180 <MTPD::receive_buffer()>
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    522c:	ldr	r3, [r6, #4]
    522e:	ldrh.w	lr, [r3, #2]
    5232:	ldrh.w	ip, [r3]
    5236:	rsb	r4, lr, ip
    523a:	cmp	r4, r8
    523c:	it	cs
    523e:	movcs	r4, r8
      to_copy = min(to_copy, size);
      if (data) {
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
    5240:	add.w	r1, r3, #8
    5244:	add	r1, lr
    5246:	mov	r0, r5
    5248:	mov	r2, r4
        data += to_copy;
      }
      size -= to_copy;
    524a:	rsb	r8, r4, r8
  {
    while (size) {
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, size);
      if (data) {
    524e:	cbz	r5, 5260 <MTPD::read(char*, unsigned long)+0x48>
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
    5250:	bl	e8e8 <memcpy>
    5254:	ldr	r3, [r6, #4]
    5256:	ldrh.w	lr, [r3, #2]
    525a:	ldrh.w	ip, [r3]
        data += to_copy;
    525e:	add	r5, r4
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
    5260:	add	r4, lr
    5262:	uxth	r4, r4
      if (data_buffer_->index == data_buffer_->len) {
    5264:	cmp	ip, r4
      if (data) {
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
        data += to_copy;
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
    5266:	strh	r4, [r3, #2]
      if (data_buffer_->index == data_buffer_->len) {
    5268:	beq.n	5274 <MTPD::read(char*, unsigned long)+0x5c>
                CONTAINER->params[0], CONTAINER->params[1], CONTAINER->params[2]);  }


  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    526a:	cmp.w	r8, #0
    526e:	bne.n	5226 <MTPD::read(char*, unsigned long)+0xe>
    5270:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        data += to_copy;
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
      if (data_buffer_->index == data_buffer_->len) {
        usb_free(data_buffer_);
    5274:	mov	r0, r3
    5276:	bl	f098 <usb_free>
        data_buffer_ = NULL;
    527a:	str	r7, [r6, #4]
                CONTAINER->params[0], CONTAINER->params[1], CONTAINER->params[2]);  }


  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    527c:	cmp.w	r8, #0
    5280:	bne.n	5226 <MTPD::read(char*, unsigned long)+0xe>
    5282:	b.n	5270 <MTPD::read(char*, unsigned long)+0x58>
    5284:	bx	lr
    5286:	nop

00005288 <MTPD::readstring(char*)>:

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    5288:	push	{r4, r5, r6, lr}
    528a:	sub	sp, #8
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    528c:	movs	r2, #1
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    528e:	mov	r4, r1
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    5290:	add.w	r1, sp, #6
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    5294:	mov	r6, r0
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    5296:	bl	5218 <MTPD::read(char*, unsigned long)>
    529a:	ldrb.w	r2, [sp, #6]
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
    529e:	cbz	r4, 52c0 <MTPD::readstring(char*)+0x38>
    52a0:	adds	r5, r4, r2
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    52a2:	cbz	r2, 52bc <MTPD::readstring(char*)+0x34>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    52a4:	movs	r2, #2
    52a6:	add.w	r1, sp, #6
    52aa:	mov	r0, r6
    52ac:	bl	5218 <MTPD::read(char*, unsigned long)>
    52b0:	ldrh.w	r3, [sp, #6]
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
        int16_t c2;
        *(buffer++) = c2 = read16();
    52b4:	strb.w	r3, [r4], #1
  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    52b8:	cmp	r5, r4
    52ba:	bne.n	52a4 <MTPD::readstring(char*)+0x1c>
        int16_t c2;
        *(buffer++) = c2 = read16();
      }
    }
  }
    52bc:	add	sp, #8
    52be:	pop	{r4, r5, r6, pc}
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    52c0:	lsls	r2, r2, #1
    52c2:	mov	r1, r4
    52c4:	mov	r0, r6
    52c6:	bl	5218 <MTPD::read(char*, unsigned long)>
    52ca:	b.n	52bc <MTPD::readstring(char*)+0x34>

000052cc <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.8]>:
      }
    }
    storage_->close();
  }
  
    uint32_t MTPD::setObjectPropValue(uint32_t p1, uint32_t p2)
    52cc:	push	{r4, r5, lr}
    52ce:	sub	sp, #132	; 0x84
    52d0:	mov	r4, r0
    52d2:	mov	r5, r1
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    52d4:	movs	r2, #12
    52d6:	mov	r1, sp
    52d8:	bl	5218 <MTPD::read(char*, unsigned long)>
      receive_buffer();
      if(p2==0xDC07)
      {
        char filename[128];
        ReadMTPHeader();
        readstring(filename);
    52dc:	mov	r1, sp
    52de:	mov	r0, r4
    52e0:	bl	5288 <MTPD::readstring(char*)>

        storage_->rename(p1,filename);
    52e4:	ldr	r0, [r4, #0]
    52e6:	ldr	r3, [r0, #0]
    52e8:	mov	r2, sp
    52ea:	mov	r1, r5
    52ec:	ldr	r3, [r3, #72]	; 0x48
    52ee:	blx	r3

        return 0x2001;
      }
      else
        return 0x2005;
    }
    52f0:	movw	r0, #8193	; 0x2001
    52f4:	add	sp, #132	; 0x84
    52f6:	pop	{r4, r5, pc}

000052f8 <MTPD::SendObjectInfo(unsigned long, unsigned long)>:
        data_buffer_ = NULL;
      }
    }
  }

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    52f8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    52fc:	sub	sp, #276	; 0x114
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    52fe:	add	r7, sp, #16
    5300:	mov	r1, r7
        data_buffer_ = NULL;
      }
    }
  }

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    5302:	mov	sl, r2
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    5304:	movs	r2, #12
        data_buffer_ = NULL;
      }
    }
  }

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    5306:	mov	r5, r0
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    5308:	bl	5218 <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    530c:	ldrh	r3, [r7, #4]
    530e:	cmp	r3, #2
    5310:	it	eq
    5312:	ldreq	r4, [r7, #0]
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    5314:	mov.w	r2, #4
    5318:	mov	r1, r7
    531a:	mov	r0, r5
    531c:	ite	eq
    531e:	subeq	r4, #65	; 0x41
  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
    5320:	mvnne.w	r4, #52	; 0x34
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    5324:	bl	5218 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    5328:	movs	r2, #2
    532a:	mov	r1, r7
    532c:	mov	r0, r5
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    532e:	ldr.w	r9, [r7]
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    5332:	bl	5218 <MTPD::read(char*, unsigned long)>
    5336:	ldrh.w	r8, [r7]
  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    uint32_t len = ReadMTPHeader();
    char filename[256];

    uint32_t store = read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    533a:	movw	r3, #12289	; 0x3001
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    533e:	movs	r2, #2
    5340:	mov	r1, r7
    5342:	mov	r0, r5
  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    uint32_t len = ReadMTPHeader();
    char filename[256];

    uint32_t store = read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    5344:	rsb	r8, r3, r8
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    5348:	bl	5218 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    534c:	movs	r2, #4
    534e:	mov	r1, r7
    5350:	mov	r0, r5
    5352:	bl	5218 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    5356:	movs	r2, #2
    5358:	mov	r1, r7
    535a:	mov	r0, r5
    535c:	bl	5218 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    5360:	movs	r2, #4
    5362:	mov	r1, r7
    5364:	mov	r0, r5
    5366:	bl	5218 <MTPD::read(char*, unsigned long)>
    536a:	movs	r2, #4
    536c:	mov	r1, r7
    536e:	mov	r0, r5
    5370:	bl	5218 <MTPD::read(char*, unsigned long)>
    5374:	movs	r2, #4
    5376:	mov	r1, r7
    5378:	mov	r0, r5
    537a:	bl	5218 <MTPD::read(char*, unsigned long)>
    537e:	movs	r2, #4
    5380:	mov	r1, r7
    5382:	mov	r0, r5
    5384:	bl	5218 <MTPD::read(char*, unsigned long)>
    5388:	movs	r2, #4
    538a:	mov	r1, r7
    538c:	mov	r0, r5
    538e:	bl	5218 <MTPD::read(char*, unsigned long)>
    5392:	movs	r2, #4
    5394:	mov	r1, r7
    5396:	mov	r0, r5
    5398:	bl	5218 <MTPD::read(char*, unsigned long)>
    539c:	movs	r2, #4
    539e:	mov	r1, r7
    53a0:	mov	r0, r5
    53a2:	bl	5218 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    53a6:	movs	r2, #2
    53a8:	mov	r1, r7
    53aa:	mov	r0, r5
    53ac:	bl	5218 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    53b0:	movs	r2, #4
    53b2:	mov	r1, r7
    53b4:	mov	r0, r5
    53b6:	bl	5218 <MTPD::read(char*, unsigned long)>
    53ba:	movs	r2, #4
    53bc:	mov	r1, r7
    53be:	mov	r0, r5
    53c0:	bl	5218 <MTPD::read(char*, unsigned long)>
    read32(); len-=4; // parent
    read16(); len-=2; // association type
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    53c4:	mov	r1, r7
    53c6:	mov	r0, r5
    53c8:	bl	5288 <MTPD::readstring(char*)>
    53cc:	mov	r0, r7
    53ce:	bl	12240 <strlen>
    53d2:	adds	r0, #1
    53d4:	sub.w	r4, r4, r0, lsl #1
  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    uint32_t len = ReadMTPHeader();
    char filename[256];

    uint32_t store = read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    53d8:	clz	r8, r8
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    53dc:	cmp	r4, #3
  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    uint32_t len = ReadMTPHeader();
    char filename[256];

    uint32_t store = read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    53de:	mov.w	r8, r8, lsr #5
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    53e2:	bls.n	53fe <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x106>
    53e4:	mov	r6, r4
    53e6:	add.w	fp, sp, #12
    53ea:	subs	r6, #4
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    53ec:	movs	r2, #4
    53ee:	mov	r1, fp
    53f0:	mov	r0, r5
    53f2:	bl	5218 <MTPD::read(char*, unsigned long)>
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    53f6:	cmp	r6, #3
    53f8:	bhi.n	53ea <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xf2>
    53fa:	and.w	r4, r4, #3
    53fe:	add.w	fp, sp, #12
    while(len) {read8(); len--;}
    5402:	cbz	r4, 5412 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x11a>
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    5404:	movs	r2, #1
    5406:	mov	r1, fp
    5408:	mov	r0, r5
    540a:	bl	5218 <MTPD::read(char*, unsigned long)>
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    while(len) {read8(); len--;}
    540e:	subs	r4, #1
    5410:	bne.n	5404 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x10c>
    
    return storage_->Create(store, parent, dir, filename);
    5412:	ldr	r0, [r5, #0]
    5414:	ldr	r4, [r0, #0]
    5416:	str	r7, [sp, #0]
    5418:	mov	r3, r8
    541a:	mov	r2, sl
    541c:	mov	r1, r9
    541e:	ldr	r4, [r4, #44]	; 0x2c
    5420:	blx	r4
  }
    5422:	add	sp, #276	; 0x114
    5424:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00005428 <MTPD::SendObject()>:

  void MTPD::SendObject() {
    5428:	push	{r4, r5, r6, r7, lr}
    542a:	sub	sp, #20
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    542c:	movs	r2, #12
    542e:	add	r1, sp, #4
    while(len) {read8(); len--;}
    
    return storage_->Create(store, parent, dir, filename);
  }

  void MTPD::SendObject() {
    5430:	mov	r7, r0
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    5432:	bl	5218 <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    5436:	ldrh.w	r3, [sp, #8]
    543a:	cmp	r3, #2
    543c:	beq.n	544a <MTPD::SendObject()+0x22>
      {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
      }
    }
    storage_->close();
    543e:	ldr	r0, [r7, #0]
    5440:	ldr	r3, [r0, #0]
    5442:	ldr	r3, [r3, #56]	; 0x38
    5444:	blx	r3
  }
    5446:	add	sp, #20
    5448:	pop	{r4, r5, r6, r7, pc}
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
      return header.len - 12;
    544a:	ldr	r5, [sp, #4]
    return storage_->Create(store, parent, dir, filename);
  }

  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    544c:	subs	r5, #12
    544e:	beq.n	543e <MTPD::SendObject()+0x16>
      data_buffer_->index += to_copy;
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
      {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
    5450:	movs	r6, #0

  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
    5452:	mov	r0, r7
    5454:	bl	5180 <MTPD::receive_buffer()>
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
    5458:	ldmia.w	r7, {r0, r1}
  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    545c:	ldrh	r2, [r1, #2]
    545e:	ldrh.w	r4, [r1], #8
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
    5462:	ldr	r3, [r0, #0]
  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    5464:	subs	r4, r4, r2
    5466:	cmp	r4, r5
    5468:	it	cs
    546a:	movcs	r4, r5
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
    546c:	ldr	r3, [r3, #52]	; 0x34
    546e:	add	r1, r2
    5470:	mov	r2, r4
    5472:	blx	r3
      data_buffer_->index += to_copy;
    5474:	ldr	r0, [r7, #4]
    5476:	ldrh	r3, [r0, #2]
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    5478:	ldrh	r2, [r0, #0]
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
      data_buffer_->index += to_copy;
    547a:	add	r3, r4
    547c:	uxth	r3, r3
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    547e:	cmp	r2, r3
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
      data_buffer_->index += to_copy;
      len -= to_copy;
    5480:	sub.w	r5, r5, r4
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
      data_buffer_->index += to_copy;
    5484:	strh	r3, [r0, #2]
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    5486:	beq.n	548e <MTPD::SendObject()+0x66>
    return storage_->Create(store, parent, dir, filename);
  }

  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    5488:	cmp	r5, #0
    548a:	bne.n	5452 <MTPD::SendObject()+0x2a>
    548c:	b.n	543e <MTPD::SendObject()+0x16>
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
      data_buffer_->index += to_copy;
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
      {
        usb_free(data_buffer_);
    548e:	bl	f098 <usb_free>
        data_buffer_ = NULL;
    5492:	str	r6, [r7, #4]
    return storage_->Create(store, parent, dir, filename);
  }

  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    5494:	cmp	r5, #0
    5496:	bne.n	5452 <MTPD::SendObject()+0x2a>
    5498:	b.n	543e <MTPD::SendObject()+0x16>
    549a:	nop

0000549c <MTPD::loop()>:
      else
        return 0x2005;
    }

  void MTPD::loop(void) 
  {
    549c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    54a0:	mov	r5, r0
    54a2:	sub	sp, #20
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
    54a4:	movs	r0, #5
    54a6:	bl	f0e4 <usb_rx>
    54aa:	cbz	r0, 54d4 <MTPD::loop()+0x38>
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
      if (receive_buffer->len >= 12) {
    54ac:	ldrh	r3, [r0, #0]
    54ae:	cmp	r3, #11
    54b0:	mov	r4, r0
    54b2:	bls.n	54e6 <MTPD::loop()+0x4a>
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
    54b4:	ldrh	r3, [r0, #12]
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
    54b6:	movs	r7, #12
        
        if (CONTAINER->type == 1) { // command
    54b8:	cmp	r3, #1
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
    54ba:	strh	r7, [r0, #0]
        
        if (CONTAINER->type == 1) { // command
    54bc:	beq.n	54ee <MTPD::loop()+0x52>
    54be:	mov.w	r0, #8192	; 0x2000
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    54c2:	movs	r6, #0
        } else {
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
        CONTAINER->type = 3;
    54c4:	movs	r3, #3
        CONTAINER->op = return_code;
    54c6:	strh	r0, [r4, #14]
        CONTAINER->params[0] = p1;
    54c8:	str	r6, [r4, #20]
        } else {
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
        CONTAINER->type = 3;
    54ca:	strh	r3, [r4, #12]
        CONTAINER->op = return_code;
        CONTAINER->params[0] = p1;
        printContainer();

        usb_tx(MTP_TX_ENDPOINT, receive_buffer);
    54cc:	mov	r1, r4
    54ce:	movs	r0, #4
    54d0:	bl	f254 <usb_tx>
      } else {
          usb_free(receive_buffer);
      }
    }
    // Maybe put event handling inside mtp_yield()?
    if ((receive_buffer = usb_rx(MTP_EVENT_ENDPOINT))) {
    54d4:	movs	r0, #6
    54d6:	bl	f0e4 <usb_rx>
    54da:	cbz	r0, 54e0 <MTPD::loop()+0x44>
      usb_free(receive_buffer);
    54dc:	bl	f098 <usb_free>
    }
  }
    54e0:	add	sp, #20
    54e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        printContainer();

        usb_tx(MTP_TX_ENDPOINT, receive_buffer);
        receive_buffer = 0;
      } else {
          usb_free(receive_buffer);
    54e6:	mov	r0, r4
    54e8:	bl	f098 <usb_free>
    54ec:	b.n	54d4 <MTPD::loop()+0x38>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    54ee:	ldrh	r2, [r0, #14]
    54f0:	movw	r1, #4107	; 0x100b
    54f4:	cmp	r2, r1
    54f6:	beq.w	5980 <MTPD::loop()+0x4e4>
    54fa:	bhi.n	557a <MTPD::loop()+0xde>
    54fc:	movw	r1, #4101	; 0x1005
    5500:	cmp	r2, r1
    5502:	beq.w	5940 <MTPD::loop()+0x4a4>
    5506:	bhi.w	5638 <MTPD::loop()+0x19c>
    550a:	movw	r3, #4098	; 0x1002
    550e:	cmp	r2, r3
    5510:	beq.w	5736 <MTPD::loop()+0x29a>
    5514:	bls.w	569c <MTPD::loop()+0x200>
    5518:	movw	r3, #4099	; 0x1003
    551c:	cmp	r2, r3
    551e:	beq.w	5938 <MTPD::loop()+0x49c>
    5522:	movw	r3, #4100	; 0x1004
    5526:	cmp	r2, r3
    5528:	bne.w	5694 <MTPD::loop()+0x1f8>
              openSession();
              break;
            case 0x1003:  // CloseSession
              break;
            case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    552c:	movs	r3, #1
    552e:	movs	r7, #0
    5530:	strb	r3, [r5, #8]
    5532:	mov	r0, r5
    5534:	str	r7, [r5, #12]
    5536:	bl	441c <MTPD::WriteStorageIDs()>
    553a:	ldr	r3, [r5, #12]
    553c:	strb	r7, [r5, #8]
    553e:	adds	r3, #12
    5540:	movs	r2, #2
    5542:	strh.w	r2, [sp, #8]
    5546:	str	r3, [sp, #4]
    5548:	ldrh	r3, [r4, #14]
    554a:	strh.w	r3, [sp, #10]
    554e:	ldr	r3, [r4, #16]
    5550:	str	r3, [sp, #12]
    5552:	mov	r0, r5
    5554:	movs	r2, #12
    5556:	add	r1, sp, #4
    5558:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    555c:	mov	r0, r5
    555e:	bl	441c <MTPD::WriteStorageIDs()>
              break;
            case 0x1008:  // GetObjectInfo
              TRANSMIT(GetObjectInfo(CONTAINER->params[0]));
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(CONTAINER->params[0]));
    5562:	mov	r0, r5
    5564:	bl	4028 <MTPD::get_buffer()>
    5568:	movs	r0, #4
    556a:	ldr	r1, [r5, #4]
    556c:	bl	f254 <usb_tx>
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    5570:	mov	r6, r7
              break;
            case 0x1008:  // GetObjectInfo
              TRANSMIT(GetObjectInfo(CONTAINER->params[0]));
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(CONTAINER->params[0]));
    5572:	str	r7, [r5, #4]
              break;
    5574:	movw	r0, #8193	; 0x2001
    5578:	b.n	54c4 <MTPD::loop()+0x28>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    557a:	movw	r1, #4121	; 0x1019
    557e:	cmp	r2, r1
    5580:	beq.w	5912 <MTPD::loop()+0x476>
    5584:	bhi.n	5600 <MTPD::loop()+0x164>
    5586:	movw	r3, #4109	; 0x100d
    558a:	cmp	r2, r3
    558c:	beq.w	5904 <MTPD::loop()+0x468>
    5590:	bcc.w	58e4 <MTPD::loop()+0x448>
    5594:	movw	r3, #4116	; 0x1014
    5598:	cmp	r2, r3
    559a:	beq.w	57ec <MTPD::loop()+0x350>
    559e:	movw	r3, #4117	; 0x1015
    55a2:	cmp	r2, r3
    55a4:	bne.n	5694 <MTPD::loop()+0x1f8>
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(CONTAINER->params[0]));
    55a6:	movs	r2, #0
    55a8:	movs	r3, #1
    55aa:	strb	r3, [r5, #8]
    55ac:	str	r2, [r5, #12]
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    55ae:	ldr	r2, [r0, #20]
    55b0:	movw	r3, #54274	; 0xd402
    55b4:	cmp	r2, r3
    55b6:	beq.w	59cc <MTPD::loop()+0x530>
    55ba:	movs	r3, #12
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(CONTAINER->params[0]));
    55bc:	movs	r1, #0
    55be:	movs	r2, #2
    55c0:	strb	r1, [r5, #8]
    55c2:	strh.w	r2, [sp, #8]
    55c6:	str	r3, [sp, #4]
    55c8:	ldrh	r3, [r4, #14]
    55ca:	strh.w	r3, [sp, #10]
    55ce:	ldr	r3, [r4, #16]
    55d0:	str	r3, [sp, #12]
    55d2:	movs	r2, #12
    55d4:	add	r1, sp, #4
    55d6:	mov	r0, r5
    55d8:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    55dc:	ldr	r2, [r4, #20]
    55de:	movw	r3, #54274	; 0xd402
    55e2:	cmp	r2, r3
    55e4:	beq.w	59c2 <MTPD::loop()+0x526>
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(CONTAINER->params[0]));
    55e8:	mov	r0, r5
    55ea:	bl	4028 <MTPD::get_buffer()>
    55ee:	movs	r6, #0
    55f0:	movs	r0, #4
    55f2:	ldr	r1, [r5, #4]
    55f4:	bl	f254 <usb_tx>
    55f8:	str	r6, [r5, #4]
              break;
    55fa:	movw	r0, #8193	; 0x2001
    55fe:	b.n	54c4 <MTPD::loop()+0x28>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    5600:	movw	r1, #38914	; 0x9802
    5604:	cmp	r2, r1
    5606:	beq.w	5746 <MTPD::loop()+0x2aa>
    560a:	bls.n	56dc <MTPD::loop()+0x240>
    560c:	movw	r3, #38915	; 0x9803
    5610:	cmp	r2, r3
    5612:	beq.w	57a6 <MTPD::loop()+0x30a>
    5616:	movw	r3, #38916	; 0x9804
    561a:	cmp	r2, r3
    561c:	bne.n	5694 <MTPD::loop()+0x1f8>
              break;

          case 0x9804:  // setObjectPropertyValue

            p1=CONTAINER->params[0];
            p2=CONTAINER->params[1];
    561e:	ldr	r7, [r0, #24]
            TRANSMIT(getObjectPropValue(p1,p2));
              break;

          case 0x9804:  // setObjectPropertyValue

            p1=CONTAINER->params[0];
    5620:	ldr	r6, [r0, #20]
    storage_->close();
  }
  
    uint32_t MTPD::setObjectPropValue(uint32_t p1, uint32_t p2)
    {
      receive_buffer();
    5622:	mov	r0, r5
    5624:	bl	5180 <MTPD::receive_buffer()>
      if(p2==0xDC07)
    5628:	movw	r3, #56327	; 0xdc07
    562c:	cmp	r7, r3
    562e:	beq.w	59da <MTPD::loop()+0x53e>
    5632:	movw	r0, #8197	; 0x2005
    5636:	b.n	54c4 <MTPD::loop()+0x28>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    5638:	movw	r1, #4103	; 0x1007
    563c:	cmp	r2, r1
    563e:	beq.w	5882 <MTPD::loop()+0x3e6>
    5642:	bcc.w	5872 <MTPD::loop()+0x3d6>
    5646:	movw	r3, #4104	; 0x1008
    564a:	cmp	r2, r3
    564c:	beq.w	5836 <MTPD::loop()+0x39a>
    5650:	movw	r3, #4105	; 0x1009
    5654:	cmp	r2, r3
    5656:	bne.n	5694 <MTPD::loop()+0x1f8>
              break;
            case 0x1008:  // GetObjectInfo
              TRANSMIT(GetObjectInfo(CONTAINER->params[0]));
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(CONTAINER->params[0]));
    5658:	movs	r7, #0
    565a:	movs	r3, #1
    565c:	strb	r3, [r5, #8]
    565e:	str	r7, [r5, #12]
    5660:	ldr	r1, [r0, #20]
    5662:	mov	r0, r5
    5664:	bl	519c <MTPD::GetObject(unsigned long)>
    5668:	ldr	r3, [r5, #12]
    566a:	strb	r7, [r5, #8]
    566c:	adds	r3, #12
    566e:	movs	r2, #2
    5670:	strh.w	r2, [sp, #8]
    5674:	str	r3, [sp, #4]
    5676:	ldrh	r3, [r4, #14]
    5678:	strh.w	r3, [sp, #10]
    567c:	ldr	r3, [r4, #16]
    567e:	str	r3, [sp, #12]
    5680:	add	r1, sp, #4
    5682:	mov	r0, r5
    5684:	movs	r2, #12
    5686:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    568a:	ldr	r1, [r4, #20]
    568c:	mov	r0, r5
    568e:	bl	519c <MTPD::GetObject(unsigned long)>
    5692:	b.n	5562 <MTPD::loop()+0xc6>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    5694:	movw	r0, #8197	; 0x2005
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    5698:	movs	r6, #0
    569a:	b.n	54c4 <MTPD::loop()+0x28>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    569c:	movw	r3, #4097	; 0x1001
    56a0:	cmp	r2, r3
    56a2:	bne.n	5694 <MTPD::loop()+0x1f8>
            case 0x1001: // GetDescription
              TRANSMIT(WriteDescriptor());
    56a4:	movs	r7, #0
    56a6:	movs	r3, #1
    56a8:	strb	r3, [r5, #8]
    56aa:	mov	r0, r5
    56ac:	str	r7, [r5, #12]
    56ae:	bl	4208 <MTPD::WriteDescriptor()>
    56b2:	ldr	r3, [r5, #12]
    56b4:	strb	r7, [r5, #8]
    56b6:	adds	r3, #12
    56b8:	movs	r2, #2
    56ba:	strh.w	r2, [sp, #8]
    56be:	str	r3, [sp, #4]
    56c0:	ldrh	r3, [r4, #14]
    56c2:	strh.w	r3, [sp, #10]
    56c6:	ldr	r3, [r4, #16]
    56c8:	str	r3, [sp, #12]
    56ca:	mov	r0, r5
    56cc:	movs	r2, #12
    56ce:	add	r1, sp, #4
    56d0:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    56d4:	mov	r0, r5
    56d6:	bl	4208 <MTPD::WriteDescriptor()>
    56da:	b.n	5562 <MTPD::loop()+0xc6>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    56dc:	movw	r3, #38913	; 0x9801
    56e0:	cmp	r2, r3
    56e2:	bne.n	5694 <MTPD::loop()+0x1f8>
          case 0x101A:  // CopyObject
              return_code = 0x2005;
              break;

          case 0x9801:  // getObjectPropsSupported
            p1=CONTAINER->params[0];
    56e4:	ldr	r6, [r0, #20]

              TRANSMIT(getObjectPropsSupported(p1));
    56e6:	movs	r3, #1
    56e8:	movs	r7, #0
    56ea:	mov	r1, r6
    56ec:	strb	r3, [r5, #8]
    56ee:	mov	r0, r5
    56f0:	str	r7, [r5, #12]
    56f2:	bl	4740 <MTPD::getObjectPropsSupported(unsigned long)>
    56f6:	ldr	r3, [r5, #12]
    56f8:	strb	r7, [r5, #8]
    56fa:	adds	r3, #12
    56fc:	movs	r2, #2
    56fe:	strh.w	r2, [sp, #8]
    5702:	str	r3, [sp, #4]
    5704:	ldrh	r3, [r4, #14]
    5706:	strh.w	r3, [sp, #10]
    570a:	ldr	r3, [r4, #16]
    570c:	str	r3, [sp, #12]
    570e:	add	r1, sp, #4
    5710:	mov	r0, r5
    5712:	movs	r2, #12
    5714:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    5718:	mov	r1, r6
    571a:	mov	r0, r5
    571c:	bl	4740 <MTPD::getObjectPropsSupported(unsigned long)>

          case 0x9803:  // getObjectPropertyValue
            p1=CONTAINER->params[0];
            p2=CONTAINER->params[1];

            TRANSMIT(getObjectPropValue(p1,p2));
    5720:	mov	r0, r5
    5722:	bl	4028 <MTPD::get_buffer()>
    5726:	movs	r0, #4
    5728:	ldr	r1, [r5, #4]
    572a:	bl	f254 <usb_tx>
    572e:	str	r7, [r5, #4]
              break;
    5730:	movw	r0, #8193	; 0x2001
    5734:	b.n	54c4 <MTPD::loop()+0x28>
      if(storage_->move(p1,p2,p3)) return 0x2001; else return  0x2005;
    }
    
    void MTPD::openSession(void)
    {
      storage_->ResetIndex();
    5736:	ldr	r0, [r5, #0]
    5738:	ldr	r3, [r0, #0]
    573a:	ldr	r3, [r3, #68]	; 0x44
    573c:	blx	r3
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    573e:	movs	r6, #0
      if(storage_->move(p1,p2,p3)) return 0x2001; else return  0x2005;
    }
    
    void MTPD::openSession(void)
    {
      storage_->ResetIndex();
    5740:	movw	r0, #8193	; 0x2001
    5744:	b.n	54c4 <MTPD::loop()+0x28>

              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
            p1=CONTAINER->params[0];
    5746:	ldr	r6, [r0, #20]
            p2=CONTAINER->params[1];
    5748:	ldr.w	r9, [r0, #24]

            TRANSMIT(getObjectPropDesc(p1,p2));
    574c:	strb	r3, [r5, #8]
    574e:	mov.w	r8, #0
    5752:	mov	r1, r6
    5754:	mov	r2, r9
    5756:	mov	r0, r5
    5758:	str.w	r8, [r5, #12]
    575c:	bl	4a98 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    5760:	ldr	r3, [r5, #12]
    5762:	strb.w	r8, [r5, #8]
    5766:	adds	r3, #12
    5768:	movs	r2, #2
    576a:	strh.w	r2, [sp, #8]
    576e:	str	r3, [sp, #4]
    5770:	ldrh	r3, [r4, #14]
    5772:	strh.w	r3, [sp, #10]
    5776:	ldr	r3, [r4, #16]
    5778:	str	r3, [sp, #12]
    577a:	mov	r2, r7
    577c:	add	r1, sp, #4
    577e:	mov	r0, r5
    5780:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    5784:	mov	r2, r9
    5786:	mov	r1, r6
    5788:	mov	r0, r5
    578a:	bl	4a98 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    578e:	mov	r0, r5
    5790:	bl	4028 <MTPD::get_buffer()>
    5794:	movs	r0, #4
    5796:	ldr	r1, [r5, #4]
    5798:	bl	f254 <usb_tx>
    579c:	str.w	r8, [r5, #4]
              break;
    57a0:	movw	r0, #8193	; 0x2001
    57a4:	b.n	54c4 <MTPD::loop()+0x28>

          case 0x9803:  // getObjectPropertyValue
            p1=CONTAINER->params[0];
    57a6:	ldr	r6, [r0, #20]
            p2=CONTAINER->params[1];
    57a8:	ldr.w	r8, [r0, #24]

            TRANSMIT(getObjectPropValue(p1,p2));
    57ac:	movs	r7, #0
    57ae:	movs	r3, #1
    57b0:	mov	r1, r6
    57b2:	mov	r2, r8
    57b4:	strb	r3, [r5, #8]
    57b6:	mov	r0, r5
    57b8:	str	r7, [r5, #12]
    57ba:	bl	47ac <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    57be:	ldr	r3, [r5, #12]
    57c0:	strb	r7, [r5, #8]
    57c2:	adds	r3, #12
    57c4:	movs	r2, #2
    57c6:	strh.w	r2, [sp, #8]
    57ca:	str	r3, [sp, #4]
    57cc:	ldrh	r3, [r4, #14]
    57ce:	strh.w	r3, [sp, #10]
    57d2:	ldr	r3, [r4, #16]
    57d4:	str	r3, [sp, #12]
    57d6:	add	r1, sp, #4
    57d8:	mov	r0, r5
    57da:	movs	r2, #12
    57dc:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    57e0:	mov	r2, r8
    57e2:	mov	r1, r6
    57e4:	mov	r0, r5
    57e6:	bl	47ac <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    57ea:	b.n	5720 <MTPD::loop()+0x284>
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
    57ec:	movs	r3, #1
    57ee:	movs	r2, #0
    57f0:	strb	r3, [r5, #8]
    57f2:	str	r2, [r5, #12]
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    57f4:	ldr	r1, [r0, #20]
    57f6:	movw	r3, #54274	; 0xd402
    57fa:	cmp	r1, r3
    57fc:	beq.w	59b6 <MTPD::loop()+0x51a>
    5800:	movs	r3, #12
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
    5802:	movs	r1, #0
    5804:	movs	r2, #2
    5806:	strb	r1, [r5, #8]
    5808:	strh.w	r2, [sp, #8]
    580c:	str	r3, [sp, #4]
    580e:	ldrh	r3, [r4, #14]
    5810:	strh.w	r3, [sp, #10]
    5814:	ldr	r3, [r4, #16]
    5816:	str	r3, [sp, #12]
    5818:	add	r1, sp, #4
    581a:	movs	r2, #12
    581c:	mov	r0, r5
    581e:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    5822:	ldr	r1, [r4, #20]
    5824:	movw	r3, #54274	; 0xd402
    5828:	cmp	r1, r3
    582a:	bne.w	55e8 <MTPD::loop()+0x14c>
    582e:	mov	r0, r5
    5830:	bl	414c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.5]>
    5834:	b.n	55e8 <MTPD::loop()+0x14c>
              } else {
                TRANSMIT(GetObjectHandles(CONTAINER->params[0], CONTAINER->params[2]));
              }
              break;
            case 0x1008:  // GetObjectInfo
              TRANSMIT(GetObjectInfo(CONTAINER->params[0]));
    5836:	movs	r7, #0
    5838:	movs	r3, #1
    583a:	strb	r3, [r5, #8]
    583c:	str	r7, [r5, #12]
    583e:	ldr	r1, [r0, #20]
    5840:	mov	r0, r5
    5842:	bl	44f0 <MTPD::GetObjectInfo(unsigned long)>
    5846:	ldr	r3, [r5, #12]
    5848:	strb	r7, [r5, #8]
    584a:	adds	r3, #12
    584c:	movs	r2, #2
    584e:	strh.w	r2, [sp, #8]
    5852:	str	r3, [sp, #4]
    5854:	ldrh	r3, [r4, #14]
    5856:	strh.w	r3, [sp, #10]
    585a:	ldr	r3, [r4, #16]
    585c:	str	r3, [sp, #12]
    585e:	add	r1, sp, #4
    5860:	mov	r0, r5
    5862:	movs	r2, #12
    5864:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    5868:	ldr	r1, [r4, #20]
    586a:	mov	r0, r5
    586c:	bl	44f0 <MTPD::GetObjectInfo(unsigned long)>
    5870:	b.n	5562 <MTPD::loop()+0xc6>
              break;
            case 0x1005:  // GetStorageInfo
              TRANSMIT(GetStorageInfo(CONTAINER->params[0]));
              break;
            case 0x1006:  // GetNumObjects
              if (CONTAINER->params[1]) {
    5872:	ldr	r3, [r0, #24]
    5874:	cmp	r3, #0
    5876:	beq.w	59a4 <MTPD::loop()+0x508>
    587a:	movw	r0, #8212	; 0x2014
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    587e:	movs	r6, #0
    5880:	b.n	54c4 <MTPD::loop()+0x28>
              } else {
                p1 = GetNumObjects(CONTAINER->params[0], CONTAINER->params[2]);
              }
              break;
            case 0x1007:  // GetObjectHandles
              if (CONTAINER->params[1]) {
    5882:	ldr.w	r8, [r0, #24]
    5886:	cmp.w	r8, #0
    588a:	bne.n	587a <MTPD::loop()+0x3de>
                return_code = 0x2014; // spec by format unsupported
              } else {
                TRANSMIT(GetObjectHandles(CONTAINER->params[0], CONTAINER->params[2]));
    588c:	strb	r3, [r5, #8]
    588e:	str.w	r8, [r5, #12]
    5892:	ldr	r2, [r0, #28]
    5894:	ldr	r1, [r0, #20]
    5896:	mov	r0, r5
    5898:	bl	4484 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    589c:	ldr	r3, [r5, #12]
    589e:	strb.w	r8, [r5, #8]
    58a2:	adds	r3, #12
    58a4:	movs	r2, #2
    58a6:	strh.w	r2, [sp, #8]
    58aa:	str	r3, [sp, #4]
    58ac:	ldrh	r3, [r4, #14]
    58ae:	strh.w	r3, [sp, #10]
    58b2:	mov	r2, r7
    58b4:	ldr	r3, [r4, #16]
    58b6:	str	r3, [sp, #12]
    58b8:	add	r1, sp, #4
    58ba:	mov	r0, r5
    58bc:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    58c0:	ldr	r2, [r4, #28]
    58c2:	ldr	r1, [r4, #20]
    58c4:	mov	r0, r5
    58c6:	bl	4484 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    58ca:	mov	r0, r5
    58cc:	bl	4028 <MTPD::get_buffer()>
    58d0:	movs	r0, #4
    58d2:	ldr	r1, [r5, #4]
    58d4:	bl	f254 <usb_tx>
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    58d8:	mov	r6, r8
              break;
            case 0x1007:  // GetObjectHandles
              if (CONTAINER->params[1]) {
                return_code = 0x2014; // spec by format unsupported
              } else {
                TRANSMIT(GetObjectHandles(CONTAINER->params[0], CONTAINER->params[2]));
    58da:	str.w	r8, [r5, #4]
    58de:	movw	r0, #8193	; 0x2001
    58e2:	b.n	54c4 <MTPD::loop()+0x28>
                }
              }
              break;
            case 0x100C:  // SendObjectInfo
              CONTAINER->params[2] =
                  SendObjectInfo(CONTAINER->params[0], // storage
    58e4:	mov	r0, r5
    58e6:	ldr	r2, [r4, #24]
    58e8:	ldr	r1, [r4, #20]
    58ea:	bl	52f8 <MTPD::SendObjectInfo(unsigned long, unsigned long)>
                                 CONTAINER->params[1]); // parent
                  p1 = CONTAINER->params[0];
    58ee:	ldr	r6, [r4, #20]
              }
              break;
            case 0x100C:  // SendObjectInfo
              CONTAINER->params[2] =
                  SendObjectInfo(CONTAINER->params[0], // storage
                                 CONTAINER->params[1]); // parent
    58f0:	str	r0, [r4, #28]
                  p1 = CONTAINER->params[0];
              if (!p1) p1 = 1;
              CONTAINER->len = receive_buffer->len = 12 + 3 * 4;
    58f2:	movs	r3, #24
            case 0x100C:  // SendObjectInfo
              CONTAINER->params[2] =
                  SendObjectInfo(CONTAINER->params[0], // storage
                                 CONTAINER->params[1]); // parent
                  p1 = CONTAINER->params[0];
              if (!p1) p1 = 1;
    58f4:	cmp	r6, #0
    58f6:	it	eq
    58f8:	moveq	r6, #1
              CONTAINER->len = receive_buffer->len = 12 + 3 * 4;
    58fa:	strh	r3, [r4, #0]
    58fc:	str	r3, [r4, #8]
              break;
    58fe:	movw	r0, #8193	; 0x2001
    5902:	b.n	54c4 <MTPD::loop()+0x28>
            case 0x100D:  // SendObject
              SendObject();
    5904:	mov	r0, r5
    5906:	bl	5428 <MTPD::SendObject()>
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    590a:	movs	r6, #0
              if (!p1) p1 = 1;
              CONTAINER->len = receive_buffer->len = 12 + 3 * 4;
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
    590c:	movw	r0, #8193	; 0x2001
    5910:	b.n	54c4 <MTPD::loop()+0x28>

    uint32_t MTPD::moveObject(uint32_t p1, uint32_t p2, uint32_t p3)
    { // p1 object
      // p2 new storage
      // p3 new directory
      if(storage_->move(p1,p2,p3)) return 0x2001; else return  0x2005;
    5912:	ldr	r0, [r5, #0]
    5914:	ldr	r3, [r4, #28]
    5916:	ldr	r1, [r0, #0]
    5918:	ldr	r2, [r4, #24]
    591a:	ldr	r5, [r1, #76]	; 0x4c
    591c:	ldr	r1, [r4, #20]
    591e:	blx	r5
    5920:	movw	r3, #8197	; 0x2005
    5924:	movw	r2, #8193	; 0x2001
              return_code = 0x2005;
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(CONTAINER->params[0],CONTAINER->params[1],CONTAINER->params[2]);
              CONTAINER->len  = receive_buffer->len = 12;
    5928:	strh	r7, [r4, #0]
    592a:	str	r7, [r4, #8]

    uint32_t MTPD::moveObject(uint32_t p1, uint32_t p2, uint32_t p3)
    { // p1 object
      // p2 new storage
      // p3 new directory
      if(storage_->move(p1,p2,p3)) return 0x2001; else return  0x2005;
    592c:	cmp	r0, #0
    592e:	ite	eq
    5930:	moveq	r0, r3
    5932:	movne	r0, r2
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    5934:	movs	r6, #0
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(CONTAINER->params[0],CONTAINER->params[1],CONTAINER->params[2]);
              CONTAINER->len  = receive_buffer->len = 12;
              break;
    5936:	b.n	54c4 <MTPD::loop()+0x28>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    5938:	movw	r0, #8193	; 0x2001
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    593c:	movs	r6, #0
    593e:	b.n	54c4 <MTPD::loop()+0x28>
              break;
            case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
              break;
            case 0x1005:  // GetStorageInfo
              TRANSMIT(GetStorageInfo(CONTAINER->params[0]));
    5940:	mov.w	r8, #0
    5944:	strb	r3, [r5, #8]
    5946:	str.w	r8, [r5, #12]
    594a:	ldr	r1, [r0, #20]
    594c:	mov	r0, r5
    594e:	bl	4954 <MTPD::GetStorageInfo(unsigned long)>
    5952:	ldr	r3, [r5, #12]
    5954:	strb.w	r8, [r5, #8]
    5958:	adds	r3, #12
    595a:	movs	r2, #2
    595c:	strh.w	r2, [sp, #8]
    5960:	str	r3, [sp, #4]
    5962:	ldrh	r3, [r4, #14]
    5964:	strh.w	r3, [sp, #10]
    5968:	ldr	r3, [r4, #16]
    596a:	str	r3, [sp, #12]
    596c:	add	r1, sp, #4
    596e:	mov	r0, r5
    5970:	mov	r2, r7
    5972:	bl	4040 <MTPD::write(char const*, int) [clone .part.3]>
    5976:	ldr	r1, [r4, #20]
    5978:	mov	r0, r5
    597a:	bl	4954 <MTPD::GetStorageInfo(unsigned long)>
    597e:	b.n	58ca <MTPD::loop()+0x42e>
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(CONTAINER->params[0]));
              break;
            case 0x100B:  // DeleteObject
              if (CONTAINER->params[1]) {
    5980:	ldr	r6, [r0, #24]
    5982:	cmp	r6, #0
    5984:	bne.w	587a <MTPD::loop()+0x3de>
                return_code = 0x2014; // spec by format unsupported
              } else {
                if (!storage_->DeleteObject(CONTAINER->params[0])) {
    5988:	ldr	r0, [r5, #0]
    598a:	ldr	r1, [r4, #20]
    598c:	ldr	r3, [r0, #0]
    598e:	ldr	r3, [r3, #60]	; 0x3c
    5990:	blx	r3
    5992:	movw	r3, #8210	; 0x2012
    5996:	movw	r2, #8193	; 0x2001
    599a:	cmp	r0, #0
    599c:	ite	eq
    599e:	moveq	r0, r3
    59a0:	movne	r0, r2
    59a2:	b.n	54c4 <MTPD::loop()+0x28>
              break;
            case 0x1006:  // GetNumObjects
              if (CONTAINER->params[1]) {
                return_code = 0x2014; // spec by format unsupported
              } else {
                p1 = GetNumObjects(CONTAINER->params[0], CONTAINER->params[2]);
    59a4:	mov	r0, r5
    59a6:	ldr	r2, [r4, #28]
    59a8:	ldr	r1, [r4, #20]
    59aa:	bl	4000 <MTPD::GetNumObjects(unsigned long, unsigned long)>
    59ae:	mov	r6, r0
    59b0:	movw	r0, #8193	; 0x2001
    59b4:	b.n	54c4 <MTPD::loop()+0x28>
    59b6:	mov	r0, r5
    59b8:	bl	414c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.5]>
    59bc:	ldr	r3, [r5, #12]
    59be:	adds	r3, #12
    59c0:	b.n	5802 <MTPD::loop()+0x366>
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    59c2:	ldr	r1, [pc, #40]	; (59ec <MTPD::loop()+0x550>)
    59c4:	mov	r0, r5
    59c6:	bl	40a4 <MTPD::writestring(char const*)>
    59ca:	b.n	55e8 <MTPD::loop()+0x14c>
    59cc:	ldr	r1, [pc, #28]	; (59ec <MTPD::loop()+0x550>)
    59ce:	mov	r0, r5
    59d0:	bl	40a4 <MTPD::writestring(char const*)>
    59d4:	ldr	r3, [r5, #12]
    59d6:	adds	r3, #12
    59d8:	b.n	55bc <MTPD::loop()+0x120>
    59da:	mov	r0, r5
    59dc:	mov	r1, r6
    59de:	bl	52cc <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.8]>
          }
        } else {
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
    59e2:	cmp	r0, #0
    59e4:	beq.w	54e6 <MTPD::loop()+0x4a>
    59e8:	uxth	r0, r0
    59ea:	b.n	54c4 <MTPD::loop()+0x28>
    59ec:	.word	0x00015a14

000059f0 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    59f0:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    59f2:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    59f4:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    59f6:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    59f8:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    59fa:	beq.n	5a04 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    59fc:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    5a00:	b.w	fed4 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    5a04:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    5a06:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    5a0a:	bx	r3

00005a0c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>:
			}
		}
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    5a0c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a10:	ldr	r4, [r0, #0]
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    5a12:	ldr	r5, [r4, #12]
    5a14:	tst.w	r5, #16777216	; 0x1000000
		const uint8_t *p_write = (const uint8_t *)buf;
		uint8_t *p_read = (uint8_t *)retbuf;
		size_t count_read = count;

		// Lets clear the reader queue
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    5a18:	ldr	r5, [pc, #484]	; (5c00 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1f4>)
    5a1a:	str	r5, [r4, #0]

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    5a1c:	bne.n	5ac4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xb8>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    5a1e:	lsls	r7, r3, #31
    5a20:	bpl.w	5b8a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17e>
		    if (p_write) {
    5a24:	cmp	r1, #0
    5a26:	beq.w	5bf0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1e4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    5a2a:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    5a2c:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    5a2e:	it	ne
    5a30:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    5a34:	str	r5, [r4, #52]	; 0x34
    5a36:	adds	r1, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    5a38:	ldrb.w	r8, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    5a3c:	add.w	ip, r3, #4294967295
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    5a40:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    5a44:	cmp.w	ip, #0
    5a48:	beq.w	5b9c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
			// Push out the next byte; 
		    if (p_write) {
    5a4c:	cbz	r1, 5a58 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x4c>
		    	w = (*p_write++) << 8;
				w |= *p_write++;
    5a4e:	ldrb	r5, [r1, #1]
	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
    5a50:	ldrb.w	r8, [r1], #2
				w |= *p_write++;
    5a54:	orr.w	r8, r5, r8, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    5a58:	ldr	r5, [r0, #4]
    5a5a:	ldrb	r6, [r5, #8]
			if (count == 2)
    5a5c:	cmp.w	ip, #2
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    5a60:	add.w	r6, r6, #4294967295
    5a64:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    5a68:	ite	eq
    5a6a:	orreq.w	r5, r8, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    5a6e:	orrne.w	r5, r8, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    5a72:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    5a74:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    5a76:	sub.w	ip, ip, #2
    5a7a:	b.n	5a8e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x82>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    5a7c:	cbz	r2, 5a82 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x76>
							*p_read++ = w;  // Read any pending RX bytes in
    5a7e:	strb	r4, [r2, #0]
    5a80:	adds	r2, #1
						} 
						count_read--;
    5a82:	subs	r3, #1
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    5a84:	and.w	r5, r5, #61440	; 0xf000
    5a88:	cmp	r5, r6
    5a8a:	bls.n	5aba <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xae>
    5a8c:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    5a8e:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    5a90:	tst.w	r5, #240	; 0xf0
    5a94:	beq.n	5a84 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x78>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    5a96:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    5a98:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
    5a9c:	mov	r7, r2
    5a9e:	mov.w	lr, r4, asr #8
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    5aa2:	bne.n	5a7c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x70>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    5aa4:	cbz	r2, 5aae <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xa2>
							*p_read++ = w >> 8;
    5aa6:	strb.w	lr, [r7], #2
							*p_read++ = (w & 0xff);
    5aaa:	strb	r4, [r2, #1]
    5aac:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    5aae:	and.w	r5, r5, #61440	; 0xf000
    5ab2:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
    5ab4:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    5ab8:	bhi.n	5a8c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x80>
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
    5aba:	cmp.w	ip, #0
    5abe:	beq.n	5b9c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    5ac0:	ldr	r4, [r0, #0]
    5ac2:	b.n	5a4c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    5ac4:	lsls	r5, r3, #31
    5ac6:	bpl.n	5b62 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x156>
		    if (p_write) {
    5ac8:	cmp	r1, #0
    5aca:	beq.w	5be0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    5ace:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    5ad0:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    5ad2:	it	ne
    5ad4:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    5ad8:	str	r5, [r4, #52]	; 0x34
    5ada:	adds	r1, #1
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    5adc:	add.w	lr, r3, #4294967295
		}

	    uint16_t w = _transferWriteFill;
    5ae0:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    5ae4:	cmp.w	lr, #0
    5ae8:	beq.n	5b6e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
			// Push out the next byte; 
		    if (p_write) {
    5aea:	cbz	r1, 5af8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xec>
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
    5aec:	ldrb.w	ip, [r1, #1]
    5af0:	ldrb	r5, [r1, #0]
    5af2:	adds	r1, #2
    5af4:	orr.w	ip, r5, ip, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    5af8:	ldr	r5, [r0, #4]
    5afa:	ldrb	r6, [r5, #8]
			if (count == 2)
    5afc:	cmp.w	lr, #2
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    5b00:	add.w	r6, r6, #4294967295
    5b04:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    5b08:	ite	eq
    5b0a:	orreq.w	r5, ip, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    5b0e:	orrne.w	r5, ip, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    5b12:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    5b14:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    5b16:	sub.w	lr, lr, #2
    5b1a:	b.n	5b2e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x122>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    5b1c:	cbz	r2, 5b22 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x116>
							*p_read++ = w;  // Read any pending RX bytes in
    5b1e:	strb	r4, [r2, #0]
    5b20:	adds	r2, #1
						} 
						count_read--;
    5b22:	subs	r3, #1
							*p_read++ = w >> 8;
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    5b24:	and.w	r5, r5, #61440	; 0xf000
    5b28:	cmp	r5, r6
    5b2a:	bls.n	5b58 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x14c>
    5b2c:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    5b2e:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    5b30:	tst.w	r5, #240	; 0xf0
    5b34:	beq.n	5b24 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x118>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    5b36:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
    5b3a:	mov	r7, r2
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    5b3c:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    5b3e:	bne.n	5b1c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x110>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    5b40:	cbz	r2, 5b4c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x140>
							*p_read++ = (w & 0xff);
    5b42:	strb.w	r4, [r7], #2
							*p_read++ = w >> 8;
    5b46:	asrs	r4, r4, #8
    5b48:	strb	r4, [r2, #1]
    5b4a:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    5b4c:	and.w	r5, r5, #61440	; 0xf000
    5b50:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
							*p_read++ = w >> 8;
						}
						count_read -= 2;
    5b52:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    5b56:	bhi.n	5b2c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x120>
			count--;
		}

	    uint16_t w = _transferWriteFill;

		while (count > 0) {
    5b58:	cmp.w	lr, #0
    5b5c:	beq.n	5b6e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
    5b5e:	ldr	r4, [r0, #0]
    5b60:	b.n	5aea <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    5b62:	mov	lr, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w = _transferWriteFill;
    5b64:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    5b68:	cmp.w	lr, #0
    5b6c:	bne.n	5aea <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    5b6e:	cbz	r3, 5bb8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    5b70:	ldr	r4, [r0, #0]
			sr = port().SR;
    5b72:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    5b74:	tst.w	r1, #240	; 0xf0
    5b78:	beq.n	5b72 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x166>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    5b7a:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    5b7c:	lsls	r4, r3, #31
    5b7e:	bpl.n	5bbc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1b0>
					if (p_read)
    5b80:	cbz	r2, 5b86 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17a>
						*p_read++ = w;  // Read any pending RX bytes in
    5b82:	strb	r1, [r2, #0]
    5b84:	adds	r2, #1
					count_read--;
    5b86:	subs	r3, #1
    5b88:	b.n	5b6e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    5b8a:	ldrb.w	r8, [r0, #44]	; 0x2c
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    5b8e:	mov	ip, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    5b90:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    5b94:	cmp.w	ip, #0
    5b98:	bne.w	5a4c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    5b9c:	cbz	r3, 5bb8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
    5b9e:	ldr	r4, [r0, #0]
			sr = port().SR;
    5ba0:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    5ba2:	tst.w	r1, #240	; 0xf0
    5ba6:	beq.n	5ba0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x194>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
				if (count_read & 1) {
    5ba8:	lsls	r6, r3, #31

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
			sr = port().SR;
			if (sr & 0xF0)  {
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    5baa:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    5bac:	bpl.n	5bce <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1c2>
					if (p_read)
    5bae:	cbz	r2, 5bb4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1a8>
						*p_read++ = w;  // Read any pending RX bytes in
    5bb0:	strb	r1, [r2, #0]
    5bb2:	adds	r2, #1
					count_read--;
    5bb4:	subs	r3, #1
    5bb6:	b.n	5b9c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    5bb8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    5bbc:	cbz	r2, 5bca <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1be>
						*p_read++ = (w & 0xff);
    5bbe:	mov	r4, r2
						*p_read++ = w >> 8;
    5bc0:	asrs	r5, r1, #8
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
						*p_read++ = (w & 0xff);
    5bc2:	strb.w	r1, [r4], #2
						*p_read++ = w >> 8;
    5bc6:	strb	r5, [r2, #1]
    5bc8:	mov	r2, r4
					}
					count_read -= 2;
    5bca:	subs	r3, #2
    5bcc:	b.n	5b6e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    5bce:	cbz	r2, 5bdc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d0>
						*p_read++ = w >> 8;
    5bd0:	mov	r4, r2
    5bd2:	asrs	r5, r1, #8
    5bd4:	strb.w	r5, [r4], #2
						*p_read++ = (w & 0xff);
    5bd8:	strb	r1, [r2, #1]
    5bda:	mov	r2, r4
					}
					count_read -= 2;
    5bdc:	subs	r3, #2
    5bde:	b.n	5b9c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    5be0:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    5be4:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    5be6:	it	ne
    5be8:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    5bec:	str	r5, [r4, #52]	; 0x34
    5bee:	b.n	5adc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xd0>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    5bf0:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    5bf4:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    5bf6:	it	ne
    5bf8:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    5bfc:	str	r5, [r4, #52]	; 0x34
    5bfe:	b.n	5a38 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x2c>
    5c00:	.word	0x801f0400

00005c04 <_spi_dma_rxISR0()>:
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    5c04:	push	{r4, r5, r6, r7}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    5c06:	ldr	r3, [pc, #280]	; (5d20 <_spi_dma_rxISR0()+0x11c>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    5c08:	ldr	r2, [pc, #280]	; (5d24 <_spi_dma_rxISR0()+0x120>)
    5c0a:	ldr	r0, [r3, #56]	; 0x38
    5c0c:	ldr	r4, [r3, #52]	; 0x34
    5c0e:	ldrb	r1, [r0, #4]
    5c10:	strb	r1, [r2, #0]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    5c12:	ldr	r1, [pc, #276]	; (5d28 <_spi_dma_rxISR0()+0x124>)
    5c14:	ldrb	r2, [r4, #4]
    5c16:	strb	r2, [r1, #0]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    5c18:	ldr	r2, [r3, #48]	; 0x30
    5c1a:	ldrb	r0, [r0, #4]
    5c1c:	strb	r0, [r1, #0]
    5c1e:	cmp	r2, #0
    5c20:	beq.n	5cb0 <_spi_dma_rxISR0()+0xac>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    5c22:	ldr	r1, [r3, #4]
    5c24:	ldr	r1, [r1, #12]
    5c26:	cmp	r2, r1
    5c28:	bhi.n	5ca8 <_spi_dma_rxISR0()+0xa4>
    5c2a:	ldr	r1, [r4, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    5c2c:	ldrh	r4, [r1, #30]
    5c2e:	lsls	r4, r4, #16
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    5c30:	add.w	r0, r2, #4294967295

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    5c34:	bmi.n	5d02 <_spi_dma_rxISR0()+0xfe>
		tcd->BITER = len & 0x7fff;
    5c36:	ubfx	r0, r0, #0, #15
    5c3a:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    5c3c:	ldrh	r0, [r1, #30]
    5c3e:	uxth	r0, r0
    5c40:	strh	r0, [r1, #22]
    5c42:	ldr	r1, [r3, #56]	; 0x38
    5c44:	ldr	r1, [r1, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    5c46:	ldrh	r0, [r1, #30]
    5c48:	lsls	r0, r0, #16
    5c4a:	bmi.n	5cf2 <_spi_dma_rxISR0()+0xee>
		tcd->BITER = len & 0x7fff;
    5c4c:	ubfx	r0, r2, #0, #15
    5c50:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    5c52:	ldrh	r0, [r1, #30]
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    5c54:	movs	r4, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    5c56:	uxth	r0, r0
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    5c58:	adds.w	r2, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    5c5c:	strh	r0, [r1, #22]
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    5c5e:	it	ne
    5c60:	movne	r2, #1
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    5c62:	str	r4, [r3, #48]	; 0x30
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    5c64:	ldr	r1, [r3, #52]	; 0x34
    5c66:	ldr	r0, [pc, #184]	; (5d20 <_spi_dma_rxISR0()+0x11c>)
    5c68:	ldr	r1, [r1, #0]
    5c6a:	ldr	r5, [r1, #0]
    5c6c:	add.w	r4, r0, #44	; 0x2c
    5c70:	cmp	r5, r4
    5c72:	beq.n	5ce2 <_spi_dma_rxISR0()+0xde>
    5c74:	ldr	r0, [r0, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    5c76:	ldr	r4, [r0, #12]
    5c78:	tst.w	r4, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    5c7c:	ldr	r4, [r1, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    5c7e:	ldr	r5, [r1, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    5c80:	itete	ne
    5c82:	ldrhne	r4, [r4, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    5c84:	ldrbeq	r4, [r4, #0]
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    5c86:	addne	r5, #2
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    5c88:	addeq	r5, #1
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    5c8a:	orr.w	r4, r4, #2147483648	; 0x80000000
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    5c8e:	str	r5, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    5c90:	str	r4, [r0, #52]	; 0x34
    5c92:	ldr	r1, [r3, #56]	; 0x38
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    5c94:	ldr	r3, [pc, #148]	; (5d2c <_spi_dma_rxISR0()+0x128>)
    5c96:	ldrb	r1, [r1, #4]
    5c98:	strb	r1, [r3, #0]
			}
		}
		_dmaRX->enable();
    5c9a:	ldr	r1, [pc, #132]	; (5d20 <_spi_dma_rxISR0()+0x11c>)
		if (should_reenable_tx)
    5c9c:	cbz	r2, 5ca4 <_spi_dma_rxISR0()+0xa0>
    5c9e:	ldr	r2, [r1, #52]	; 0x34
    5ca0:	ldrb	r2, [r2, #4]
    5ca2:	strb	r2, [r3, #0]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    5ca4:	pop	{r4, r5, r6, r7}
    5ca6:	bx	lr
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
    5ca8:	subs	r2, r2, r1
    5caa:	str	r2, [r3, #48]	; 0x30
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    5cac:	movs	r2, #1
    5cae:	b.n	5c64 <_spi_dma_rxISR0()+0x60>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    5cb0:	ldr	r0, [r3, #60]	; 0x3c
    5cb2:	ldr	r1, [r3, #0]
    5cb4:	ldr	r5, [r0, #0]
			_dmaTX->enable();
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    5cb6:	ldr	r4, [pc, #120]	; (5d30 <_spi_dma_rxISR0()+0x12c>)
		_dmaRX->enable();
		if (should_reenable_tx)
			_dmaTX->enable();
	} else {

		port().RSER = 0;
    5cb8:	str	r2, [r1, #48]	; 0x30
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    5cba:	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    5cbc:	ldr	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    5cbe:	ldr	r5, [r5, #0]
    5cc0:	ldr	r6, [pc, #112]	; (5d34 <_spi_dma_rxISR0()+0x130>)
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    5cc2:	bic.w	r4, r4, #1073741824	; 0x40000000

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    5cc6:	movs	r7, #3
    5cc8:	cmp	r5, r6
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    5cca:	str	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    5ccc:	strb.w	r7, [r3, #45]	; 0x2d
    5cd0:	bne.n	5d12 <_spi_dma_rxISR0()+0x10e>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    5cd2:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    5cd4:	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    5cd6:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    5cd8:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    5cda:	beq.n	5d1a <_spi_dma_rxISR0()+0x116>
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    5cdc:	pop	{r4, r5, r6, r7}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    5cde:	b.w	fed4 <EventResponder::triggerEventNotImmediate()>
    5ce2:	ldr	r1, [r0, #0]
			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    5ce4:	ldrb.w	r0, [r0, #44]	; 0x2c

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    5ce8:	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    5cea:	orr.w	r0, r0, #2147483648	; 0x80000000
    5cee:	str	r0, [r1, #52]	; 0x34
    5cf0:	b.n	5c92 <_spi_dma_rxISR0()+0x8e>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    5cf2:	ldrh	r4, [r1, #30]
    5cf4:	ubfx	r0, r2, #0, #9
    5cf8:	and.w	r4, r4, #65024	; 0xfe00
    5cfc:	orrs	r0, r4
    5cfe:	strh	r0, [r1, #30]
    5d00:	b.n	5c52 <_spi_dma_rxISR0()+0x4e>
    5d02:	ldrh	r4, [r1, #30]
    5d04:	ubfx	r0, r0, #0, #9
    5d08:	and.w	r4, r4, #65024	; 0xfe00
    5d0c:	orrs	r0, r4
    5d0e:	strh	r0, [r1, #30]
    5d10:	b.n	5c3c <_spi_dma_rxISR0()+0x38>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    5d12:	mov	r3, r5
    5d14:	mov	r1, r2
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    5d16:	pop	{r4, r5, r6, r7}
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    5d18:	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    5d1a:	ldr	r3, [r0, #8]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    5d1c:	pop	{r4, r5, r6, r7}
    5d1e:	bx	r3
    5d20:	.word	0x1fff0980
    5d24:	.word	0x4000801f
    5d28:	.word	0x4000801c
    5d2c:	.word	0x4000801b
    5d30:	.word	0xff0f0000
    5d34:	.word	0x000059f1

00005d38 <SPIClass::setMOSI(unsigned char)>:
	}
	return 0;
}

void SPIClass::setMOSI(uint8_t pin)
{
    5d38:	push	{r4, r5, r6, r7}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    5d3a:	ldr	r3, [pc, #148]	; (5dd0 <SPIClass::setMOSI(unsigned char)+0x98>)
    5d3c:	ldr	r5, [r0, #4]
    5d3e:	cmp	r3, r5
    5d40:	beq.n	5d66 <SPIClass::setMOSI(unsigned char)+0x2e>
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
    5d42:	ldrb	r3, [r0, #9]
    5d44:	add	r3, r5
    5d46:	ldrb.w	r6, [r3, #44]	; 0x2c
    5d4a:	cmp	r1, r6
    5d4c:	beq.n	5d62 <SPIClass::setMOSI(unsigned char)+0x2a>
    5d4e:	add.w	r2, r5, #43	; 0x2b
    5d52:	movs	r3, #0
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
    5d54:	ldrb.w	r4, [r2, #1]!
    5d58:	cmp	r4, r1
    5d5a:	beq.n	5d92 <SPIClass::setMOSI(unsigned char)+0x5a>
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
    5d5c:	adds	r3, #1
    5d5e:	cmp	r3, #4
    5d60:	bne.n	5d54 <SPIClass::setMOSI(unsigned char)+0x1c>
				mosi_pin_index = i;
				return;
			}
		}
	}
}
    5d62:	pop	{r4, r5, r6, r7}
    5d64:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMOSI_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 11) pinout &= ~3;
    5d66:	cmp	r1, #11
    5d68:	beq.n	5dc4 <SPIClass::setMOSI(unsigned char)+0x8c>
		if (pin == 7)  pinout = (pinout & ~0x3) | 1;
    5d6a:	cmp	r1, #7
    5d6c:	beq.n	5d82 <SPIClass::setMOSI(unsigned char)+0x4a>
		if (pin == 28) pinout = (pinout & ~0x3) | 2;
    5d6e:	cmp	r1, #28
    5d70:	bne.n	5d42 <SPIClass::setMOSI(unsigned char)+0xa>
    5d72:	ldr	r2, [pc, #96]	; (5dd4 <SPIClass::setMOSI(unsigned char)+0x9c>)
    5d74:	ldrb	r3, [r2, #0]
    5d76:	bic.w	r3, r3, #3
    5d7a:	orr.w	r3, r3, #2
    5d7e:	strb	r3, [r2, #0]
    5d80:	b.n	5d42 <SPIClass::setMOSI(unsigned char)+0xa>
#endif
	}
	inline void setMOSI_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 11) pinout &= ~3;
		if (pin == 7)  pinout = (pinout & ~0x3) | 1;
    5d82:	ldr	r2, [pc, #80]	; (5dd4 <SPIClass::setMOSI(unsigned char)+0x9c>)
    5d84:	ldrb	r3, [r2, #0]
    5d86:	bic.w	r3, r3, #3
    5d8a:	orr.w	r3, r3, #1
    5d8e:	strb	r3, [r2, #0]
    5d90:	b.n	5d42 <SPIClass::setMOSI(unsigned char)+0xa>
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    5d92:	ldmia.w	r5, {r1, r2}
    5d96:	ldr	r1, [r1, #0]
    5d98:	tst	r1, r2
    5d9a:	beq.n	5dbe <SPIClass::setMOSI(unsigned char)+0x86>
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    5d9c:	ldr	r2, [pc, #56]	; (5dd8 <SPIClass::setMOSI(unsigned char)+0xa0>)
    5d9e:	add.w	r6, r2, r6, lsl #3
					*reg = 0;
    5da2:	movs	r7, #0
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    5da4:	ldr	r4, [r6, #4]
					*reg = 0;
					reg = portConfigRegister(hardware().mosi_pin[i]);
    5da6:	adds	r1, r5, r3
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
					*reg = 0;
    5da8:	str	r7, [r4, #0]
					reg = portConfigRegister(hardware().mosi_pin[i]);
    5daa:	ldrb.w	r1, [r1, #44]	; 0x2c
    5dae:	add.w	r2, r2, r1, lsl #3
					*reg = hardware().mosi_mux[i];
    5db2:	add.w	r1, r3, #12
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().mosi_pin[i]);
    5db6:	ldr	r4, [r2, #4]
					*reg = hardware().mosi_mux[i];
    5db8:	ldr.w	r2, [r5, r1, lsl #2]
    5dbc:	str	r2, [r4, #0]
				}	
				mosi_pin_index = i;
    5dbe:	strb	r3, [r0, #9]
				return;
			}
		}
	}
}
    5dc0:	pop	{r4, r5, r6, r7}
    5dc2:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMOSI_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 11) pinout &= ~3;
    5dc4:	ldr	r2, [pc, #12]	; (5dd4 <SPIClass::setMOSI(unsigned char)+0x9c>)
    5dc6:	ldrb	r3, [r2, #0]
    5dc8:	bic.w	r3, r3, #3
    5dcc:	strb	r3, [r2, #0]
    5dce:	b.n	5d42 <SPIClass::setMOSI(unsigned char)+0xa>
    5dd0:	.word	0x00015a44
    5dd4:	.word	0x1fff2659
    5dd8:	.word	0x00015bf0

00005ddc <SPIClass::setMISO(unsigned char)>:

void SPIClass::setMISO(uint8_t pin)
{
    5ddc:	push	{r4, r5, r6, r7}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    5dde:	ldr	r3, [pc, #144]	; (5e70 <SPIClass::setMISO(unsigned char)+0x94>)
    5de0:	ldr	r5, [r0, #4]
    5de2:	cmp	r3, r5
    5de4:	beq.n	5e08 <SPIClass::setMISO(unsigned char)+0x2c>
		SPCR.setMISO_soft(pin);
	}
	if (pin != hardware().miso_pin[miso_pin_index]) {
    5de6:	ldrb	r3, [r0, #8]
    5de8:	add	r3, r5
    5dea:	ldrb	r6, [r3, #24]
    5dec:	cmp	r1, r6
    5dee:	beq.n	5e04 <SPIClass::setMISO(unsigned char)+0x28>
    5df0:	add.w	r2, r5, #23
    5df4:	movs	r3, #0
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if  (pin == hardware().miso_pin[i]) {
    5df6:	ldrb.w	r4, [r2, #1]!
    5dfa:	cmp	r4, r1
    5dfc:	beq.n	5e34 <SPIClass::setMISO(unsigned char)+0x58>
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setMISO_soft(pin);
	}
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
    5dfe:	adds	r3, #1
    5e00:	cmp	r3, #4
    5e02:	bne.n	5df6 <SPIClass::setMISO(unsigned char)+0x1a>
				miso_pin_index = i;
				return;
			}
		}
	}
}
    5e04:	pop	{r4, r5, r6, r7}
    5e06:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMISO_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 12) pinout &= ~0xc;
    5e08:	cmp	r1, #12
    5e0a:	beq.n	5e62 <SPIClass::setMISO(unsigned char)+0x86>
		if (pin == 8)  pinout = (pinout & ~0xc) | 4;
    5e0c:	cmp	r1, #8
    5e0e:	beq.n	5e24 <SPIClass::setMISO(unsigned char)+0x48>
		if (pin == 39) pinout = (pinout & ~0xc) | 8;
    5e10:	cmp	r1, #39	; 0x27
    5e12:	bne.n	5de6 <SPIClass::setMISO(unsigned char)+0xa>
    5e14:	ldr	r2, [pc, #92]	; (5e74 <SPIClass::setMISO(unsigned char)+0x98>)
    5e16:	ldrb	r3, [r2, #0]
    5e18:	bic.w	r3, r3, #12
    5e1c:	orr.w	r3, r3, #8
    5e20:	strb	r3, [r2, #0]
    5e22:	b.n	5de6 <SPIClass::setMISO(unsigned char)+0xa>
#endif
	}
	inline void setMISO_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 12) pinout &= ~0xc;
		if (pin == 8)  pinout = (pinout & ~0xc) | 4;
    5e24:	ldr	r2, [pc, #76]	; (5e74 <SPIClass::setMISO(unsigned char)+0x98>)
    5e26:	ldrb	r3, [r2, #0]
    5e28:	bic.w	r3, r3, #12
    5e2c:	orr.w	r3, r3, #4
    5e30:	strb	r3, [r2, #0]
    5e32:	b.n	5de6 <SPIClass::setMISO(unsigned char)+0xa>
		SPCR.setMISO_soft(pin);
	}
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if  (pin == hardware().miso_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    5e34:	ldmia.w	r5, {r1, r2}
    5e38:	ldr	r1, [r1, #0]
    5e3a:	tst	r1, r2
    5e3c:	beq.n	5e5c <SPIClass::setMISO(unsigned char)+0x80>
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    5e3e:	ldr	r2, [pc, #56]	; (5e78 <SPIClass::setMISO(unsigned char)+0x9c>)
    5e40:	add.w	r6, r2, r6, lsl #3
					*reg = 0;
					reg = portConfigRegister(hardware().miso_pin[i]);
    5e44:	adds	r1, r5, r3
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if  (pin == hardware().miso_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    5e46:	ldr	r4, [r6, #4]
					*reg = 0;
    5e48:	movs	r7, #0
    5e4a:	str	r7, [r4, #0]
					reg = portConfigRegister(hardware().miso_pin[i]);
    5e4c:	ldrb	r1, [r1, #24]
    5e4e:	add.w	r2, r2, r1, lsl #3
					*reg = hardware().miso_mux[i];
    5e52:	add.w	r5, r5, r3, lsl #2
			if  (pin == hardware().miso_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().miso_pin[i]);
    5e56:	ldr	r2, [r2, #4]
					*reg = hardware().miso_mux[i];
    5e58:	ldr	r1, [r5, #28]
    5e5a:	str	r1, [r2, #0]
				}	
				miso_pin_index = i;
    5e5c:	strb	r3, [r0, #8]
				return;
			}
		}
	}
}
    5e5e:	pop	{r4, r5, r6, r7}
    5e60:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMISO_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 12) pinout &= ~0xc;
    5e62:	ldr	r2, [pc, #16]	; (5e74 <SPIClass::setMISO(unsigned char)+0x98>)
    5e64:	ldrb	r3, [r2, #0]
    5e66:	bic.w	r3, r3, #12
    5e6a:	strb	r3, [r2, #0]
    5e6c:	b.n	5de6 <SPIClass::setMISO(unsigned char)+0xa>
    5e6e:	nop
    5e70:	.word	0x00015a44
    5e74:	.word	0x1fff2659
    5e78:	.word	0x00015bf0

00005e7c <SPIClass::setSCK(unsigned char)>:

void SPIClass::setSCK(uint8_t pin)
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    5e7c:	ldr	r2, [pc, #160]	; (5f20 <SPIClass::setSCK(unsigned char)+0xa4>)
    5e7e:	ldr	r3, [r0, #4]
    5e80:	cmp	r2, r3
		}
	}
}

void SPIClass::setSCK(uint8_t pin)
{
    5e82:	push	{r4, r5, r6}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    5e84:	beq.n	5eb2 <SPIClass::setSCK(unsigned char)+0x36>
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
    5e86:	ldrb	r2, [r0, #10]
    5e88:	add	r2, r3
    5e8a:	ldrb.w	r2, [r2, #64]	; 0x40
    5e8e:	cmp	r1, r2
    5e90:	beq.n	5eae <SPIClass::setSCK(unsigned char)+0x32>
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
    5e92:	ldrb.w	r4, [r3, #64]	; 0x40
    5e96:	cmp	r4, r1
    5e98:	beq.n	5f1a <SPIClass::setSCK(unsigned char)+0x9e>
    5e9a:	ldrb.w	r4, [r3, #65]	; 0x41
    5e9e:	cmp	r4, r1
    5ea0:	beq.n	5ede <SPIClass::setSCK(unsigned char)+0x62>
    5ea2:	ldrb.w	r4, [r3, #66]	; 0x42
    5ea6:	cmp	r4, r1
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
    5ea8:	it	eq
    5eaa:	moveq	r1, #2
			if  (pin == hardware().sck_pin[i]) {
    5eac:	beq.n	5ee0 <SPIClass::setSCK(unsigned char)+0x64>
				sck_pin_index = i;
				return;
			}
		}
	}
}
    5eae:	pop	{r4, r5, r6}
    5eb0:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setSCK_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 13) pinout &= ~0x30;
    5eb2:	cmp	r1, #13
    5eb4:	beq.n	5f0e <SPIClass::setSCK(unsigned char)+0x92>
		if (pin == 14) pinout = (pinout & ~0x30) | 0x10;
    5eb6:	cmp	r1, #14
    5eb8:	beq.n	5ece <SPIClass::setSCK(unsigned char)+0x52>
		if (pin == 27) pinout = (pinout & ~0x30) | 0x20;
    5eba:	cmp	r1, #27
    5ebc:	bne.n	5e86 <SPIClass::setSCK(unsigned char)+0xa>
    5ebe:	ldr	r4, [pc, #100]	; (5f24 <SPIClass::setSCK(unsigned char)+0xa8>)
    5ec0:	ldrb	r2, [r4, #0]
    5ec2:	bic.w	r2, r2, #48	; 0x30
    5ec6:	orr.w	r2, r2, #32
    5eca:	strb	r2, [r4, #0]
    5ecc:	b.n	5e86 <SPIClass::setSCK(unsigned char)+0xa>
#endif
	}
	inline void setSCK_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 13) pinout &= ~0x30;
		if (pin == 14) pinout = (pinout & ~0x30) | 0x10;
    5ece:	ldr	r4, [pc, #84]	; (5f24 <SPIClass::setSCK(unsigned char)+0xa8>)
    5ed0:	ldrb	r2, [r4, #0]
    5ed2:	bic.w	r2, r2, #48	; 0x30
    5ed6:	orr.w	r2, r2, #16
    5eda:	strb	r2, [r4, #0]
    5edc:	b.n	5e86 <SPIClass::setSCK(unsigned char)+0xa>
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
    5ede:	movs	r1, #1
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    5ee0:	ldr	r5, [r3, #0]
    5ee2:	ldr	r4, [r3, #4]
    5ee4:	ldr	r5, [r5, #0]
    5ee6:	tst	r5, r4
    5ee8:	beq.n	5f0a <SPIClass::setSCK(unsigned char)+0x8e>
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    5eea:	ldr	r4, [pc, #60]	; (5f28 <SPIClass::setSCK(unsigned char)+0xac>)
    5eec:	add.w	r2, r4, r2, lsl #3
					*reg = 0;
    5ef0:	movs	r6, #0
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    5ef2:	ldr	r5, [r2, #4]
					*reg = 0;
					reg = portConfigRegister(hardware().sck_pin[i]);
    5ef4:	adds	r2, r3, r1
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
					*reg = 0;
    5ef6:	str	r6, [r5, #0]
					reg = portConfigRegister(hardware().sck_pin[i]);
    5ef8:	ldrb.w	r2, [r2, #64]	; 0x40
    5efc:	add.w	r4, r4, r2, lsl #3
					*reg = hardware().sck_mux[i];
    5f00:	add.w	r3, r3, r1, lsl #2
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().sck_pin[i]);
    5f04:	ldr	r2, [r4, #4]
					*reg = hardware().sck_mux[i];
    5f06:	ldr	r3, [r3, #68]	; 0x44
    5f08:	str	r3, [r2, #0]
				}	
				sck_pin_index = i;
    5f0a:	strb	r1, [r0, #10]
				return;
    5f0c:	b.n	5eae <SPIClass::setSCK(unsigned char)+0x32>
		pinout = newpinout;
#endif
	}
	inline void setSCK_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 13) pinout &= ~0x30;
    5f0e:	ldr	r4, [pc, #20]	; (5f24 <SPIClass::setSCK(unsigned char)+0xa8>)
    5f10:	ldrb	r2, [r4, #0]
    5f12:	bic.w	r2, r2, #48	; 0x30
    5f16:	strb	r2, [r4, #0]
    5f18:	b.n	5e86 <SPIClass::setSCK(unsigned char)+0xa>
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
    5f1a:	movs	r1, #0
    5f1c:	b.n	5ee0 <SPIClass::setSCK(unsigned char)+0x64>
    5f1e:	nop
    5f20:	.word	0x00015a44
    5f24:	.word	0x1fff2659
    5f28:	.word	0x00015bf0

00005f2c <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    5f2c:	cbz	r3, 5f32 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    5f2e:	b.w	5a0c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>
    5f32:	bx	lr

00005f34 <SDClass::~SDClass()>:
	char *filename;
};



class SDClass : public FS
    5f34:	bx	lr
    5f36:	nop

00005f38 <_GLOBAL__sub_I_SD>:
 */

#include <Arduino.h>
#include <SD.h>

SDClass SD;
    5f38:	push	{r4, r5, r6, r7}
{
public:
	SDClass() { }
    5f3a:	ldr	r3, [pc, #60]	; (5f78 <_GLOBAL__sub_I_SD+0x40>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    5f3c:	ldr	r4, [pc, #60]	; (5f7c <_GLOBAL__sub_I_SD+0x44>)
    5f3e:	str.w	r4, [r3, #1164]	; 0x48c
    5f42:	movs	r5, #40	; 0x28
    5f44:	movs	r4, #0
    5f46:	ldr	r0, [pc, #56]	; (5f80 <_GLOBAL__sub_I_SD+0x48>)
    5f48:	ldr	r7, [pc, #56]	; (5f84 <_GLOBAL__sub_I_SD+0x4c>)
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    5f4a:	ldr	r6, [pc, #60]	; (5f88 <_GLOBAL__sub_I_SD+0x50>)
    5f4c:	strb.w	r5, [r3, #1195]	; 0x4ab
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() : m_options(FIFO_SDIO) {}
    5f50:	strb.w	r4, [r3, #1172]	; 0x494
    5f54:	strb.w	r4, [r3, #1198]	; 0x4ae
    5f58:	str	r0, [r3, #0]
    5f5a:	str.w	r7, [r3, #1176]	; 0x498
    5f5e:	str.w	r6, [r3, #1184]	; 0x4a0
    5f62:	str.w	r4, [r3, #1148]	; 0x47c
    5f66:	str.w	r4, [r3, #1152]	; 0x480
    5f6a:	ldr	r2, [pc, #32]	; (5f8c <_GLOBAL__sub_I_SD+0x54>)
    5f6c:	ldr	r1, [pc, #32]	; (5f90 <_GLOBAL__sub_I_SD+0x58>)
    5f6e:	mov	r0, r3
    5f70:	pop	{r4, r5, r6, r7}
    5f72:	b.w	1035c <__aeabi_atexit>
    5f76:	nop
    5f78:	.word	0x1fff2024
    5f7c:	.word	0x00015b40
    5f80:	.word	0x00015798
    5f84:	.word	0x00015ae8
    5f88:	.word	0x38011001
    5f8c:	.word	0x1fff0970
    5f90:	.word	0x00005f35

00005f94 <ExFatFile::close()>:
#include "../common/DebugMacros.h"
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
    5f94:	push	{r4, lr}
    5f96:	mov	r4, r0
  bool rtn = sync();
    5f98:	bl	7220 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    5f9c:	movs	r3, #0
    5f9e:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    5fa2:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    5fa6:	pop	{r4, pc}

00005fa8 <ExFatFile::getName(char*, unsigned int)>:
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
    5fa8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    5fac:	add.w	r3, r0, #36	; 0x24
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
    5fb0:	mov	r6, r0
    5fb2:	mov	r8, r1
    5fb4:	mov	r5, r2
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    5fb6:	ldmia.w	r3, {r0, r1, r2}
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
    5fba:	sub	sp, #20
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
  size_t n = 0;
  if (!isOpen()) {
    5fbc:	ldrb.w	r3, [r6, #49]	; 0x31
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    5fc0:	add.w	r9, sp, #4
    5fc4:	stmia.w	r9, {r0, r1, r2}
  size_t n = 0;
  if (!isOpen()) {
    5fc8:	cmp	r3, #0
    5fca:	beq.n	603e <ExFatFile::getName(char*, unsigned int)+0x96>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    5fcc:	ldrb.w	r3, [r6, #48]	; 0x30
    5fd0:	cmp	r3, #1
    5fd2:	bls.n	604a <ExFatFile::getName(char*, unsigned int)+0xa2>
    5fd4:	movs	r7, #1
    5fd6:	movs	r4, #0
    if (m_vol->dirSeek(&pos, is == 1 ? 64: 32) != 1) {
    5fd8:	cmp	r7, #1
    5fda:	ite	eq
    5fdc:	moveq	r2, #64	; 0x40
    5fde:	movne	r2, #32
    5fe0:	mov	r1, r9
    5fe2:	ldr	r0, [r6, #32]
    5fe4:	bl	6cd8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    5fe8:	cmp	r0, #1
    5fea:	bne.n	603e <ExFatFile::getName(char*, unsigned int)+0x96>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dn = reinterpret_cast<DirName_t*>
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    5fec:	movs	r2, #0
    5fee:	mov	r1, r9
    5ff0:	ldr	r0, [r6, #32]
    5ff2:	bl	6ca4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    5ff6:	cbz	r0, 603e <ExFatFile::getName(char*, unsigned int)+0x96>
    5ff8:	ldrb	r3, [r0, #0]
    5ffa:	cmp	r3, #193	; 0xc1
    5ffc:	bne.n	603e <ExFatFile::getName(char*, unsigned int)+0x96>
    5ffe:	add.w	r1, r0, #30
    6002:	add.w	r2, r8, r4
    6006:	mov	r3, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
      if ((n + 1) >= length) {
    6008:	adds	r4, #1
    600a:	cmp	r4, r5
    600c:	bcs.n	6030 <ExFatFile::getName(char*, unsigned int)+0x88>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    600e:	ldrh.w	r3, [r0, #2]!
        goto done;
      }
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    6012:	cmp	r3, #126	; 0x7e
    6014:	ite	ls
    6016:	uxtbls	r3, r3
    6018:	movhi	r3, #63	; 0x3f
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    601a:	cmp	r0, r1
      if ((n + 1) >= length) {
        goto done;
      }
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    601c:	strb.w	r3, [r2], #1
    6020:	mov	r3, r4
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    6022:	bne.n	6008 <ExFatFile::getName(char*, unsigned int)+0x60>
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    6024:	adds	r7, #1
    6026:	ldrb.w	r2, [r6, #48]	; 0x30
    602a:	uxtb	r7, r7
    602c:	cmp	r2, r7
    602e:	bhi.n	5fd8 <ExFatFile::getName(char*, unsigned int)+0x30>
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    6030:	movs	r2, #0
  return n;
    6032:	mov	r0, r3
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    6034:	strb.w	r2, [r8, r3]
  return n;

 fail:
  *name = 0;
  return 0;
}
    6038:	add	sp, #20
    603a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
    603e:	movs	r0, #0
    6040:	strb.w	r0, [r8]
  return 0;
}
    6044:	add	sp, #20
    6046:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    604a:	movs	r3, #0
    604c:	b.n	6030 <ExFatFile::getName(char*, unsigned int)+0x88>
    604e:	nop

00006050 <ExFatFile::openRoot(ExFatVolume*)>:
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    6050:	ldrb.w	r2, [r0, #49]	; 0x31
    6054:	cbz	r2, 605a <ExFatFile::openRoot(ExFatVolume*)+0xa>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    6056:	movs	r0, #0
    6058:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    605a:	push	{r3, r4, r5, lr}
    605c:	mov	r4, r0
    605e:	mov	r5, r1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    6060:	mov	r1, r2
    6062:	movs	r2, #56	; 0x38
    6064:	bl	117bc <memset>
  m_attributes = FILE_ATTR_ROOT;
    6068:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    606a:	movs	r0, #1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    606c:	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    6070:	strb.w	r0, [r4, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    6074:	str	r5, [r4, #32]
    6076:	pop	{r3, r4, r5, pc}

00006078 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const ExChar_t* path,
                            ExName_t* fname, const ExChar_t** ptr) {
    6078:	push	{r4, r5, r6, r7, lr}
  ExChar_t c;
  int end;
  int len = 0;

  // Skip leading spaces.
  while (*path == ' ') {
    607a:	ldrb	r0, [r1, #0]
    607c:	cmp	r0, #32
    607e:	bne.n	6088 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x10>
    6080:	ldrb.w	r0, [r1, #1]!
    6084:	cmp	r0, #32
    6086:	beq.n	6080 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8>
    path++;
  }
  fname->lfn = path;
    6088:	str	r1, [r2, #4]

  for (len = 0; ; len++) {
    c = path[len];
    608a:	ldrb	r0, [r1, #0]
    if (c == 0 || isDirSeparator(c)) {
    608c:	cmp	r0, #0
    608e:	beq.n	6134 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xbc>
    6090:	cmp	r0, #47	; 0x2f
    6092:	beq.n	60ec <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    6094:	cmp	r0, #92	; 0x5c
    6096:	beq.n	60da <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    6098:	sub.w	r4, r0, #34	; 0x22
    609c:	uxtb	r4, r4
    609e:	cmp	r4, #29
    60a0:	bls.n	60de <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x66>
    60a2:	ldr.w	lr, [pc, #148]	; 6138 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>
    60a6:	adds	r6, r1, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    60a8:	movs	r4, #0
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    60aa:	cmp	r0, #124	; 0x7c
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    60ac:	sub.w	r5, r0, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    60b0:	mov	r7, r6
    60b2:	beq.n	60da <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    60b4:	cmp	r5, #94	; 0x5e
    60b6:	bhi.n	60da <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    60b8:	ldrb.w	r0, [r6], #1
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    60bc:	sub.w	r5, r0, #34	; 0x22
    60c0:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    60c2:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    60c4:	cbz	r0, 6126 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xae>
    60c6:	cmp	r0, #47	; 0x2f
    60c8:	beq.n	60ee <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
    60ca:	cmp	r0, #92	; 0x5c
    60cc:	lsr.w	r7, lr, r5
    60d0:	beq.n	60da <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    60d2:	cmp	r5, #29
    60d4:	bhi.n	60aa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
    60d6:	lsls	r5, r7, #31
    60d8:	bpl.n	60aa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    60da:	movs	r0, #0
    60dc:	pop	{r4, r5, r6, r7, pc}
    60de:	ldr	r5, [pc, #88]	; (6138 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>)
    60e0:	lsr.w	r4, r5, r4
    60e4:	lsls	r6, r4, #31
    60e6:	bpl.n	60a2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2a>
    60e8:	movs	r0, #0
    60ea:	pop	{r4, r5, r6, r7, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    60ec:	movs	r4, #0
    60ee:	adds	r7, r1, r4
    60f0:	mov	r6, r7
    60f2:	mov	r5, r4
    60f4:	movs	r0, #47	; 0x2f
    60f6:	b.n	60fe <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x86>
    60f8:	ldrb.w	r0, [r6, #1]!
    if (!lfnLegalChar(c)) {
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    60fc:	adds	r5, #1
    60fe:	cmp	r0, #32
    6100:	beq.n	60f8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
    6102:	cmp	r0, #47	; 0x2f
    6104:	beq.n	60f8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
  *ptr = &path[end];
    6106:	add	r1, r5
    6108:	str	r1, [r3, #0]

  // Back over spaces and dots.
  while (len) {
    610a:	cbz	r4, 611e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    610c:	mov	r1, r7
    c = path[len - 1];
    610e:	ldrb.w	r3, [r1, #-1]!
    if (c != '.' && c != ' ') {
    6112:	cmp	r3, #46	; 0x2e
    6114:	beq.n	611a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa2>
    6116:	cmp	r3, #32
    6118:	bne.n	612c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xb4>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    611a:	subs	r4, #1
    611c:	bne.n	610e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x96>
    611e:	mov	r0, r4
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    return false;
  }
  fname->len = len;
    6120:	str	r0, [r2, #0]
  return true;
    6122:	movs	r0, #1
    6124:	pop	{r4, r5, r6, r7, pc}
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    6126:	str	r7, [r3, #0]
    6128:	adds	r7, r1, r4
    612a:	b.n	610c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x94>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    612c:	cmp	r4, #255	; 0xff
    612e:	ble.n	611e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    6130:	movs	r0, #0
    6132:	pop	{r4, r5, r6, r7, pc}
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    6134:	str	r1, [r3, #0]
    6136:	b.n	6120 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa8>
    6138:	.word	0x35000101

0000613c <ExFatFile::read(void*, unsigned int)>:

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    613c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6140:	ldrb.w	r3, [r0, #51]	; 0x33
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    6144:	lsls	r5, r3, #31

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    6146:	sub	sp, #12
    6148:	mov	r4, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    614a:	bpl.w	62a6 <ExFatFile::read(void*, unsigned int)+0x16a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    614e:	lsls	r0, r3, #25
    6150:	mov	r5, r1
    6152:	mov	r6, r2
    6154:	bpl.w	62bc <ExFatFile::read(void*, unsigned int)+0x180>
    if ((m_curPosition + count) > m_validLength) {
    6158:	ldrd	r0, r1, [r4]
    615c:	ldrd	r2, r3, [r4, #16]
    6160:	adds.w	r8, r0, r6
    6164:	adc.w	r9, r1, #0
    6168:	cmp	r3, r9
    616a:	it	eq
    616c:	cmpeq	r2, r8
    616e:	bcc.w	62c8 <ExFatFile::read(void*, unsigned int)+0x18c>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    6172:	cmp	r6, #0
    6174:	beq.w	62cc <ExFatFile::read(void*, unsigned int)+0x190>
    6178:	mov	r9, r4
    617a:	ldrd	r2, r3, [r9], #24
    617e:	mov	r8, r6
    6180:	b.n	6222 <ExFatFile::read(void*, unsigned int)+0xe6>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
    6182:	orrs	r3, r2
    6184:	bne.n	625e <ExFatFile::read(void*, unsigned int)+0x122>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    6186:	ldrb.w	r3, [r4, #49]	; 0x31
    618a:	lsls	r2, r3, #25
    618c:	ite	mi
    618e:	ldrmi.w	r1, [r0, #1068]	; 0x42c
    6192:	ldrpl	r1, [r4, #28]
      } else if (isContiguous()) {
        m_curCluster++;
    6194:	str	r1, [r4, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    6196:	ldrb.w	ip, [r0, #1085]	; 0x43d
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    619a:	ldr.w	r2, [r0, #1060]	; 0x424
    619e:	subs	r1, #2
    61a0:	lsrs	r7, r7, #9
    61a2:	lsl.w	lr, r1, ip
    61a6:	adds	r1, r7, r2
    61a8:	add	r1, lr
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
    61aa:	cmp.w	sl, #0
    61ae:	bne.n	6236 <ExFatFile::read(void*, unsigned int)+0xfa>
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    61b0:	cmp.w	r8, #512	; 0x200
    61b4:	bcc.n	6236 <ExFatFile::read(void*, unsigned int)+0xfa>
    61b6:	ldr.w	r2, [r0, #532]	; 0x214
                          || sector == m_vol->dataCacheSector()) {
    61ba:	cmp	r1, r2
    61bc:	beq.n	6236 <ExFatFile::read(void*, unsigned int)+0xfa>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    61be:	cmp.w	r8, #1024	; 0x400
    61c2:	bcc.n	626c <ExFatFile::read(void*, unsigned int)+0x130>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    61c4:	movs	r3, #1
    61c6:	lsl.w	ip, r3, ip
    61ca:	rsb	r7, r7, ip
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    61ce:	mov.w	r3, r8, lsr #9
    61d2:	cmp	r7, r3
    61d4:	it	cs
    61d6:	movcs	r7, r3
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    61d8:	cmp	r1, r2
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    61da:	mov.w	fp, r7, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    61de:	bhi.n	61f8 <ExFatFile::read(void*, unsigned int)+0xbc>
    61e0:	adds	r3, r7, r1
    61e2:	cmp	r3, r2
    61e4:	bls.n	61f8 <ExFatFile::read(void*, unsigned int)+0xbc>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    61e6:	add.w	r0, r0, #524	; 0x20c
    61ea:	str	r1, [sp, #4]
    61ec:	bl	6a1c <FsCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->dataCacheSync()) {
    61f0:	cmp	r0, #0
    61f2:	beq.n	62a6 <ExFatFile::read(void*, unsigned int)+0x16a>
    61f4:	ldr	r0, [r4, #32]
    61f6:	ldr	r1, [sp, #4]
    61f8:	ldr.w	r0, [r0, #1080]	; 0x438
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
    61fc:	ldr	r2, [r0, #0]
    61fe:	mov	r3, r7
    6200:	ldr	r7, [r2, #12]
    6202:	mov	r2, r5
    6204:	blx	r7
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    6206:	cmp	r0, #0
    6208:	beq.n	62a6 <ExFatFile::read(void*, unsigned int)+0x16a>
    620a:	mov	r0, fp
    620c:	movs	r1, #0
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    620e:	ldrd	r2, r3, [r4]
    6212:	adds	r2, r2, r0
    6214:	adcs	r3, r1
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    6216:	subs.w	r8, r8, fp
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    621a:	add	r5, fp
    m_curPosition += n;
    621c:	strd	r2, r3, [r4]
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    6220:	beq.n	62cc <ExFatFile::read(void*, unsigned int)+0x190>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    6222:	ldr	r0, [r4, #32]
    6224:	ldr.w	r7, [r0, #1072]	; 0x430
    6228:	ands	r7, r2
    sectorOffset = clusterOffset & m_vol->sectorMask();
    622a:	ubfx	sl, r7, #0, #9
    if (clusterOffset == 0) {
    622e:	cmp	r7, #0
    6230:	beq.n	6182 <ExFatFile::read(void*, unsigned int)+0x46>
    6232:	ldr	r1, [r4, #24]
    6234:	b.n	6196 <ExFatFile::read(void*, unsigned int)+0x5a>
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    6236:	add.w	r0, r0, #524	; 0x20c
    623a:	movs	r2, #0
    623c:	bl	695c <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
    6240:	cbz	r0, 62a6 <ExFatFile::read(void*, unsigned int)+0x16a>
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
      n = m_vol->bytesPerSector() - sectorOffset;
    6242:	rsb	fp, sl, #512	; 0x200
    6246:	cmp	fp, r8
    6248:	it	cs
    624a:	movcs	fp, r8
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
    624c:	add.w	r1, r0, sl
    6250:	mov	r2, fp
    6252:	mov	r0, r5
    6254:	bl	e8e8 <memcpy>
    6258:	mov	r0, fp
    625a:	movs	r1, #0
    625c:	b.n	620e <ExFatFile::read(void*, unsigned int)+0xd2>
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
    625e:	ldrb.w	r3, [r4, #51]	; 0x33
    6262:	lsls	r3, r3, #25
    6264:	bpl.n	6286 <ExFatFile::read(void*, unsigned int)+0x14a>
        m_curCluster++;
    6266:	ldr	r1, [r4, #24]
    6268:	adds	r1, #1
    626a:	b.n	6194 <ExFatFile::read(void*, unsigned int)+0x58>
    626c:	ldr.w	r0, [r0, #1080]	; 0x438
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    6270:	ldr	r3, [r0, #0]
    6272:	mov	r2, r5
    6274:	ldr	r3, [r3, #8]
    6276:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    6278:	cbz	r0, 62a6 <ExFatFile::read(void*, unsigned int)+0x16a>
    627a:	mov.w	r0, #512	; 0x200
    627e:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    6280:	mov.w	fp, #512	; 0x200
    6284:	b.n	620e <ExFatFile::read(void*, unsigned int)+0xd2>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6286:	mov	r2, r9
    6288:	ldr	r1, [r4, #24]
    628a:	bl	6d30 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    628e:	sxtb	r0, r0
        if (fg < 0) {
    6290:	cmp	r0, #0
    6292:	blt.n	62a6 <ExFatFile::read(void*, unsigned int)+0x16a>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
    6294:	beq.n	629c <ExFatFile::read(void*, unsigned int)+0x160>
    6296:	ldr	r0, [r4, #32]
    6298:	ldr	r1, [r4, #24]
    629a:	b.n	6196 <ExFatFile::read(void*, unsigned int)+0x5a>
          // EOF if directory.
          if (isDir()) {
    629c:	ldrb.w	r3, [r4, #49]	; 0x31
    62a0:	tst.w	r3, #80	; 0x50
    62a4:	bne.n	62d0 <ExFatFile::read(void*, unsigned int)+0x194>
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    62a6:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    62aa:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    62ae:	orr.w	r3, r3, #2
    62b2:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
}
    62b6:	add	sp, #12
    62b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    62bc:	ldrb.w	r3, [r4, #49]	; 0x31
    62c0:	lsls	r1, r3, #28
    62c2:	bmi.w	6158 <ExFatFile::read(void*, unsigned int)+0x1c>
    62c6:	b.n	6172 <ExFatFile::read(void*, unsigned int)+0x36>
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    62c8:	subs	r6, r2, r0
    62ca:	b.n	6172 <ExFatFile::read(void*, unsigned int)+0x36>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    62cc:	mov.w	r8, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    62d0:	rsb	r0, r8, r6

fail:
  m_error |= READ_ERROR;
  return -1;
}
    62d4:	add	sp, #12
    62d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    62da:	nop

000062dc <ExFatFile::peek()>:
  }
  fname->len = len;
  return true;
}
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
    62dc:	push	{r4, r5, r6, r7, lr}
    62de:	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    62e0:	movs	r2, #1
    62e2:	add.w	r1, sp, #7
    62e6:	mov	r4, r0
  uint64_t curPosition = m_curPosition;
    62e8:	ldrd	r6, r7, [r0]
  uint32_t curCluster = m_curCluster;
    62ec:	ldr	r5, [r0, #24]
    62ee:	bl	613c <ExFatFile::read(void*, unsigned int)>
    62f2:	cmp	r0, #1
    62f4:	it	eq
    62f6:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
  m_curCluster = curCluster;
    62fa:	str	r5, [r4, #24]
    62fc:	it	ne
    62fe:	movne.w	r0, #4294967295
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
    6302:	strd	r6, r7, [r4]
  m_curCluster = curCluster;
  return c;
}
    6306:	add	sp, #12
    6308:	pop	{r4, r5, r6, r7, pc}
    630a:	nop

0000630c <ExFatFile::seekSet(unsigned long long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    630c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6310:	ldrb.w	lr, [r0, #49]	; 0x31
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    6314:	ldr	r5, [r0, #24]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    6316:	sub	sp, #12
    6318:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    631a:	cmp.w	lr, #0
    631e:	beq.n	6358 <ExFatFile::seekSet(unsigned long long)+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    6320:	ldrd	r0, r1, [r0]
    6324:	cmp	r1, r3
    6326:	it	eq
    6328:	cmpeq	r0, r2
    632a:	mov	r6, r2
    632c:	mov	r7, r3
    632e:	beq.n	63a8 <ExFatFile::seekSet(unsigned long long)+0x9c>
    return true;
  }
  if (pos == 0) {
    6330:	orrs.w	r3, r6, r7
    6334:	bne.n	6346 <ExFatFile::seekSet(unsigned long long)+0x3a>
    // set position to start of file
    m_curCluster = 0;
    6336:	movs	r3, #0
    6338:	str	r3, [r4, #24]
    }
  }

done:
  m_curPosition = pos;
  return true;
    633a:	movs	r0, #1
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    633c:	strd	r6, r7, [r4]
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    6340:	add	sp, #12
    6342:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    6346:	tst.w	lr, #8
    634a:	beq.n	6362 <ExFatFile::seekSet(unsigned long long)+0x56>
    if (pos > m_validLength) {
    634c:	ldrd	r2, r3, [r4, #16]
    6350:	cmp	r3, r7
    6352:	it	eq
    6354:	cmpeq	r2, r6
    6356:	bcs.n	6362 <ExFatFile::seekSet(unsigned long long)+0x56>
done:
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
    6358:	str	r5, [r4, #24]
  return false;
    635a:	movs	r0, #0
}
    635c:	add	sp, #12
    635e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    6362:	ldr	r3, [r4, #32]
    6364:	str	r3, [sp, #4]
    6366:	ldrb.w	ip, [r3, #1085]	; 0x43d
  if (isContiguous()) {
    636a:	ldrb.w	sl, [r4, #51]	; 0x33
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    636e:	add.w	ip, ip, #9
    6372:	uxtb.w	ip, ip
    6376:	adds.w	r2, r6, #4294967295
    637a:	adc.w	r3, r7, #4294967295
    637e:	rsb	r8, ip, #32
    6382:	lsl.w	fp, r3, r8
    6386:	lsr.w	r2, r2, ip
    638a:	orr.w	r2, r2, fp
    638e:	sub.w	fp, ip, #32
    6392:	lsr.w	r3, r3, fp
  if (isContiguous()) {
    6396:	tst.w	sl, #64	; 0x40
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    639a:	orr.w	r2, r2, r3
  if (isContiguous()) {
    639e:	beq.n	63ac <ExFatFile::seekSet(unsigned long long)+0xa0>
    m_curCluster = m_firstCluster + nNew;
    63a0:	ldr	r3, [r4, #28]
    63a2:	add	r2, r3
    63a4:	str	r2, [r4, #24]
    goto done;
    63a6:	b.n	633a <ExFatFile::seekSet(unsigned long long)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    63a8:	movs	r0, #1
    63aa:	b.n	635c <ExFatFile::seekSet(unsigned long long)+0x50>
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    63ac:	adds.w	r9, r0, #4294967295
    63b0:	adc.w	sl, r1, #4294967295
    63b4:	lsr.w	ip, r9, ip
    63b8:	lsl.w	r8, sl, r8
    63bc:	orr.w	ip, ip, r8
    63c0:	lsr.w	fp, sl, fp
    63c4:	orr.w	ip, ip, fp
  if (nNew < nCur || m_curPosition == 0) {
    63c8:	cmp	r2, ip
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    63ca:	mov	r3, sl
  if (nNew < nCur || m_curPosition == 0) {
    63cc:	bcs.n	63fe <ExFatFile::seekSet(unsigned long long)+0xf2>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    63ce:	tst.w	lr, #64	; 0x40
    63d2:	itet	ne
    63d4:	ldrne	r3, [sp, #4]
    63d6:	ldreq	r3, [r4, #28]
    63d8:	ldrne.w	r3, [r3, #1068]	; 0x42c
    63dc:	str	r3, [r4, #24]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    63de:	mov	r8, r2
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    63e0:	add.w	r9, r4, #24
    63e4:	mov	r2, r9
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    63e6:	cmp.w	r8, #0
    63ea:	beq.n	633a <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    63ec:	ldr	r1, [r4, #24]
    63ee:	ldr	r0, [r4, #32]
    63f0:	bl	6d30 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    63f4:	add.w	r8, r8, #4294967295
    63f8:	cmp	r0, #0
    63fa:	bne.n	63e4 <ExFatFile::seekSet(unsigned long long)+0xd8>
    63fc:	b.n	6358 <ExFatFile::seekSet(unsigned long long)+0x4c>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
  if (nNew < nCur || m_curPosition == 0) {
    63fe:	orrs.w	r3, r0, r1
    6402:	beq.n	63ce <ExFatFile::seekSet(unsigned long long)+0xc2>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    6404:	rsb	r2, ip, r2
    6408:	b.n	63de <ExFatFile::seekSet(unsigned long long)+0xd2>
    640a:	nop

0000640c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    640c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6410:	mov	r6, r1
    6412:	sub	sp, #76	; 0x4c
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    6414:	ldrb.w	r1, [r0, #49]	; 0x31
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    6418:	str	r2, [sp, #0]
    641a:	mov	r5, r0
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    641c:	cbnz	r1, 642a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    641e:	mov	sl, r3
    6420:	ldrb.w	r3, [r6, #49]	; 0x31
    6424:	tst.w	r3, #80	; 0x50
    6428:	bne.n	643a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2e>
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
    642a:	movs	r0, #0
    642c:	strb.w	r0, [r5, #49]	; 0x31
  m_flags = 0;
    6430:	strb.w	r0, [r5, #51]	; 0x33
  return false;
}
    6434:	add	sp, #76	; 0x4c
    6436:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    643a:	ldr	r3, [sp, #112]	; 0x70
    643c:	and.w	r3, r3, #3
    6440:	cmp	r3, #1
    6442:	beq.n	6452 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x46>
    6444:	cmp	r3, #2
    6446:	beq.w	665c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x250>
    644a:	cmp	r3, #0
    644c:	bne.n	642a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    644e:	movs	r3, #1
    6450:	b.n	6454 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x48>
    6452:	movs	r3, #2
      break;
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    6454:	ldr	r2, [sp, #112]	; 0x70
    6456:	and.w	r2, r2, #8
    645a:	orrs	r3, r2
    645c:	str	r3, [sp, #4]
  if (name) {
    645e:	ldr	r3, [sp, #0]
    6460:	cmp	r3, #0
    6462:	beq.w	6660 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x254>
    nameHash = exFatHashName(name, nameLength, 0);
    6466:	mov	r0, r3
    6468:	movs	r2, #0
    646a:	mov	r1, sl
    646c:	bl	6e74 <exFatHashName(char const*, unsigned int, unsigned short)>
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    6470:	ldrb.w	r3, [r6, #49]	; 0x31
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    6474:	str	r0, [sp, #8]
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    6476:	cbz	r3, 648c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    6478:	ldrd	r2, r3, [r6]
    647c:	orrs	r3, r2
    647e:	beq.n	648c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    6480:	movs	r2, #0
    6482:	movs	r3, #0
    6484:	strd	r2, r3, [r6]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    6488:	movs	r1, #0
    648a:	str	r1, [r6, #24]
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    648c:	ldr	r2, [pc, #736]	; (6770 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x364>)
    648e:	add.w	r3, sl, #14
    6492:	smull	r1, r2, r2, r3
    6496:	add	r2, r3
    6498:	asrs	r3, r3, #31
    649a:	rsb	r3, r3, r2, asr #3
    649e:	uxtb	r3, r3
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;
    64a0:	mov.w	r9, #0
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    64a4:	str	r3, [sp, #12]
    64a6:	adds	r3, #2
    64a8:	uxtb.w	fp, r3

  DirFile_t*   dirFile;
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
    64ac:	mov	r4, r9
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
    64ae:	mov	r7, r9
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    64b0:	movs	r2, #32
    64b2:	add	r1, sp, #40	; 0x28
    64b4:	mov	r0, r6
    64b6:	bl	613c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    64ba:	cmp	r0, #0
    64bc:	beq.n	653a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      goto create;
    }
    if (n != 32) {
    64be:	cmp	r0, #32
    64c0:	bne.n	642a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
    64c2:	ldrb.w	r3, [sp, #40]	; 0x28
    64c6:	lsls	r2, r3, #24
    64c8:	bmi.n	6598 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x18c>
      if (freeCount == 0) {
    64ca:	cmp	r4, #0
    64cc:	bne.n	6592 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x186>
        freePos.position = dir->curPosition() - 32;
    64ce:	ldr	r2, [r6, #0]
        freePos.cluster = dir->curCluster();
    64d0:	ldr	r1, [r6, #24]
    64d2:	str	r1, [sp, #28]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
    64d4:	subs	r2, #32
    64d6:	str	r2, [sp, #32]
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
        freeCount++;
    64d8:	adds	r4, #1
    64da:	uxtb	r4, r4
      }
      if (!buf[0]) {
    64dc:	cbz	r3, 653a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      if (buf[0] != EXFAT_TYPE_FILE) {
        continue;
      }
      inSet = true;
    }
    switch (buf[0]) {
    64de:	cmp	r3, #192	; 0xc0
    64e0:	beq.w	660a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fe>
    64e4:	cmp	r3, #193	; 0xc1
    64e6:	beq.n	65ae <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1a2>
    64e8:	cmp	r3, #133	; 0x85
    64ea:	bne.n	64b0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
    64ec:	movs	r2, #56	; 0x38
    64ee:	movs	r1, #0
    64f0:	mov	r0, r5
    64f2:	bl	117bc <memset>
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    64f6:	ldrb.w	r3, [sp, #44]	; 0x2c
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
    64fa:	ldrb.w	r2, [sp, #41]	; 0x29
    64fe:	strb.w	r2, [r5, #48]	; 0x30
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    6502:	lsls	r0, r3, #27
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    6504:	and.w	r2, r3, #55	; 0x37
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
    6508:	it	pl
    650a:	orrpl.w	r2, r2, #8
    650e:	strb.w	r2, [r5, #49]	; 0x31
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    6512:	ldr	r3, [r6, #0]
    6514:	ldr	r1, [r6, #32]
    6516:	ldr	r2, [r6, #24]
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
    6518:	str	r2, [r5, #36]	; 0x24
        m_dirPos.position = dir->curPosition() - 32;
    651a:	subs	r3, #32
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();
    651c:	str	r1, [r5, #32]

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    651e:	str	r3, [r5, #40]	; 0x28
        m_dirPos.isContiguous = dir->isContiguous();
    6520:	ldrb.w	r3, [r6, #51]	; 0x33
    6524:	ubfx	r3, r3, #6, #1
    6528:	strb.w	r3, [r5, #44]	; 0x2c
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    652c:	movs	r2, #32
    652e:	add	r1, sp, #40	; 0x28
    6530:	mov	r0, r6
    6532:	bl	613c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    6536:	cmp	r0, #0
    6538:	bne.n	64be <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xb2>
#if READ_ONLY
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    653a:	ldr	r3, [sp, #112]	; 0x70
    653c:	lsls	r1, r3, #22
    653e:	bpl.w	642a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    6542:	ldr	r3, [sp, #4]
    6544:	lsls	r2, r3, #30
    6546:	bpl.w	642a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    654a:	ldr	r3, [sp, #0]
    654c:	cmp	r3, #0
    654e:	beq.w	642a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    6552:	cmp	r4, fp
    6554:	bcc.n	6570 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x164>
    6556:	b.n	6666 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25a>
        goto fail;
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
    6558:	cmp	r0, #32
    655a:	bne.w	642a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
    655e:	cbnz	r4, 656a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x15e>
      freePos.position = dir->curPosition() - 32;
    6560:	ldr	r2, [r6, #0]
      freePos.cluster = dir->curCluster();
    6562:	ldr	r1, [r6, #24]
    6564:	str	r1, [sp, #28]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
    6566:	subs	r2, #32
    6568:	str	r2, [sp, #32]
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    656a:	uxtb	r4, r3
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    656c:	cmp	fp, r4
    656e:	bls.n	6666 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25a>
    n = dir->read(buf, 32);
    6570:	movs	r2, #32
    6572:	add	r1, sp, #40	; 0x28
    6574:	mov	r0, r6
    6576:	bl	613c <ExFatFile::read(void*, unsigned int)>
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    657a:	adds	r3, r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
    657c:	cmp	r0, #0
    657e:	bne.n	6558 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x14c>
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
    6580:	mov	r0, r6
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
    6582:	ldr	r7, [r6, #24]
      if (!dir->addDirCluster()) {
    6584:	bl	7280 <ExFatFile::addDirCluster()>
    6588:	cmp	r0, #0
    658a:	beq.w	642a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
        DBG_FAIL_MACRO;
        goto fail;
      }
      dir->m_curCluster = curCluster;
    658e:	str	r7, [r6, #24]
      continue;
    6590:	b.n	656c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x160>
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
    6592:	cmp	r4, fp
    6594:	bcs.n	64dc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd0>
    6596:	b.n	64d8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xcc>
        freeCount++;
      }
      if (!buf[0]) {
        goto create;
      }
    } else if (!inSet) {
    6598:	cmp.w	r9, #0
    659c:	bne.n	64de <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd2>
      if (freeCount < freeNeed) {
        freeCount = 0;
    659e:	cmp	r4, fp
    65a0:	it	cc
    65a2:	movcc	r4, #0
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
    65a4:	cmp	r3, #133	; 0x85
    65a6:	bne.n	64b0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        continue;
      }
      inSet = true;
    65a8:	mov.w	r9, #1
    65ac:	b.n	64ec <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xe0>
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
    65ae:	rsb	r8, r7, sl
    65b2:	uxtb.w	r8, r8
    65b6:	cmp.w	r8, #15
    65ba:	it	cs
    65bc:	movcs.w	r8, #15
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
    65c0:	mov	r3, r8
    65c2:	mov	r2, r7
    65c4:	ldr	r1, [sp, #0]
    65c6:	add	r0, sp, #40	; 0x28
    65c8:	bl	6eb0 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>
    65cc:	cmp	r0, #0
    65ce:	beq.n	664a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x23e>
          inSet = false;
          break;
        }
        nameOffset += nCmp;
    65d0:	add	r7, r8
    65d2:	uxtb	r7, r7

        if (nameOffset == nameLength) {
    65d4:	cmp	sl, r7
    65d6:	bne.w	64b0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    65da:	ldr	r3, [sp, #112]	; 0x70
    65dc:	lsls	r3, r3, #20
    65de:	bmi.w	642a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    65e2:	ldr	r3, [sp, #112]	; 0x70
    65e4:	tst.w	r3, #17408	; 0x4400
    65e8:	bne.w	672c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x320>
    65ec:	ldrb.w	r3, [r5, #51]	; 0x33
    65f0:	lsls	r7, r3, #30
    65f2:	bmi.w	672c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x320>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    65f6:	ldr	r3, [sp, #112]	; 0x70
    65f8:	lsls	r3, r3, #21
    65fa:	bmi.w	642a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    65fe:	ldr	r3, [sp, #112]	; 0x70
    6600:	lsls	r0, r3, #17
    6602:	bmi.w	6774 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x368>
    DBG_FAIL_MACRO;
    goto fail;
  }
#endif  // READ_ONLY
  return true;
    6606:	movs	r0, #1
    6608:	b.n	6434 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x28>
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    660a:	ldrb.w	r3, [sp, #41]	; 0x29
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
    660e:	ldr	r2, [sp, #4]
    6610:	strb.w	r2, [r5, #51]	; 0x33
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    6614:	lsls	r1, r3, #30
    6616:	bpl.n	6620 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x214>
          m_flags |= FILE_FLAG_CONTIGUOUS;
    6618:	orr.w	r3, r2, #64	; 0x40
    661c:	strb.w	r3, [r5, #51]	; 0x33
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    6620:	ldrd	r2, r3, [sp, #48]	; 0x30
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    6624:	ldrd	r0, r1, [sp, #64]	; 0x40
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    6628:	strd	r2, r3, [r5, #16]
        m_firstCluster = getLe32(dirStream->firstCluster);
    662c:	ldr	r3, [sp, #60]	; 0x3c
    662e:	str	r3, [r5, #28]
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
    6630:	ldr	r3, [sp, #0]
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    6632:	strd	r0, r1, [r5, #8]
        if (!name) {
    6636:	cmp	r3, #0
    6638:	beq.n	65da <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1ce>
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    663a:	ldrb.w	r3, [sp, #43]	; 0x2b
    663e:	cmp	r3, sl
    6640:	beq.n	664e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x242>
            nameHash != getLe16(dirStream->nameHash)) {
          inSet = false;
    6642:	mov.w	r9, #0
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    6646:	mov	r7, r9
    6648:	b.n	64b0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        nCmp = nameLength - nameOffset;
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
          inSet = false;
    664a:	mov	r9, r0
    664c:	b.n	64b0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    664e:	ldrh.w	r3, [sp, #44]	; 0x2c
    6652:	ldr	r2, [sp, #8]
    6654:	cmp	r3, r2
    6656:	bne.n	6642 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x236>
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    6658:	movs	r7, #0
    665a:	b.n	64b0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    665c:	movs	r3, #3
    665e:	b.n	6454 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x48>
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
  uint8_t nCmp;
  uint8_t modeFlags;
  uint16_t nameHash = 0;
    6660:	ldr	r3, [sp, #0]
    6662:	str	r3, [sp, #8]
    6664:	b.n	648c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    6666:	ldrb.w	r3, [r6, #51]	; 0x33
  memset(this, 0, sizeof(ExFatFile));
    666a:	movs	r2, #56	; 0x38
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    666c:	ubfx	r3, r3, #6, #1
  memset(this, 0, sizeof(ExFatFile));
    6670:	movs	r1, #0
    6672:	mov	r0, r5
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    6674:	add.w	r8, sp, #28
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    6678:	strb.w	r3, [sp, #36]	; 0x24
  memset(this, 0, sizeof(ExFatFile));
    667c:	bl	117bc <memset>
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    6680:	ldr	r4, [sp, #12]
    6682:	ldr	r3, [r6, #32]
    6684:	str.w	sl, [sp, #12]

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    6688:	ldmia.w	r8, {r0, r1, r2}
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    668c:	add.w	r9, r4, #1
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
    6690:	movs	r4, #8
    6692:	strb.w	r4, [r5, #49]	; 0x31
    6696:	add.w	r7, sl, #30
  m_dirPos = freePos;
    669a:	add.w	r4, r5, #36	; 0x24
    669e:	ldr.w	sl, [sp]
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
    66a2:	str	r3, [r5, #32]
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    66a4:	uxtb.w	r9, r9

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    66a8:	stmia.w	r4, {r0, r1, r2}
    66ac:	uxtb	r7, r7
  for (uint8_t i = 0; i < freeNeed; i++) {
    66ae:	movs	r6, #0
    66b0:	mov	r0, r3
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
    66b2:	movs	r2, #1
    66b4:	mov	r1, r8
    66b6:	bl	6ca4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    66ba:	mov	r4, r0
    66bc:	cmp	r0, #0
    66be:	beq.w	642a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    66c2:	ldrsb.w	r3, [r0]
    66c6:	cmp	r3, #0
    66c8:	blt.w	642a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0 , 32);
    66cc:	movs	r2, #32
    66ce:	movs	r1, #0
    66d0:	bl	117bc <memset>
    if (i == 0) {
    66d4:	cmp	r6, #0
    66d6:	beq.n	67a6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x39a>
        FsDateTime::callback(&date, &time, &ms10);
        dirFile->createTimeMs = ms10;
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
    66d8:	cmp	r6, #1
    66da:	beq.n	6786 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x37a>
    66dc:	rsb	r3, r6, r6, lsl #4
    66e0:	cmp	r7, #15
    66e2:	sub.w	r3, r3, #30

      dirStream->nameLength = nameLength;
      setLe16(dirStream->nameHash, nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
    66e6:	mov.w	r2, #193	; 0xc1
    66ea:	mov	r1, r7
    66ec:	it	cs
    66ee:	movcs	r1, #15
    66f0:	uxtb	r3, r3
    66f2:	strb	r2, [r4, #0]
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    66f4:	cbz	r1, 670c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
    66f6:	adds	r4, #2
    66f8:	sxth	r1, r1
    66fa:	add.w	r1, r4, r1, lsl #1
    66fe:	add	r3, sl
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
    6700:	ldrb.w	r2, [r3], #1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    6704:	strh.w	r2, [r4], #2
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    6708:	cmp	r1, r4
    670a:	bne.n	6700 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2f4>
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    670c:	adds	r6, #1
    670e:	uxtb	r6, r6
    6710:	cmp	fp, r6
    6712:	bls.n	6768 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x35c>
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
    6714:	movs	r2, #32
    6716:	mov	r1, r8
    6718:	ldr	r0, [r5, #32]
    671a:	bl	6cd8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    671e:	cmp	r0, #1
    6720:	bne.w	642a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    6724:	subs	r7, #15
    6726:	uxtb	r7, r7
    6728:	ldr	r0, [r5, #32]
    672a:	b.n	66b2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2a6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || READ_ONLY) {
    672c:	ldrb.w	r3, [r5, #49]	; 0x31
    6730:	tst.w	r3, #17
    6734:	bne.w	642a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    6738:	ldr	r3, [sp, #112]	; 0x70
    673a:	lsls	r6, r3, #21
    673c:	bpl.w	65fe <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1f2>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    6740:	ldrb.w	r3, [r5, #51]	; 0x33
    6744:	lsls	r4, r3, #30
    6746:	bpl.w	642a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    674a:	movs	r2, #0
    674c:	movs	r3, #0
    674e:	mov	r0, r5
    6750:	bl	630c <ExFatFile::seekSet(unsigned long long)>
    6754:	cmp	r0, #0
    6756:	beq.w	642a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    675a:	mov	r0, r5
    675c:	bl	754c <ExFatFile::truncate()>
    6760:	cmp	r0, #0
    6762:	beq.w	642a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    6766:	b.n	6606 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fa>
      for (size_t k = 0; k < nCmp; k++) {
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
      }
    }
  }
  return sync();
    6768:	mov	r0, r5
    676a:	bl	7220 <ExFatFile::sync()>
    676e:	b.n	6434 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x28>
    6770:	.word	0x88888889
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    6774:	ldrd	r2, r3, [r5, #16]
    6778:	mov	r0, r5
    677a:	bl	630c <ExFatFile::seekSet(unsigned long long)>
    677e:	cmp	r0, #0
    6780:	bne.w	6606 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fa>
    6784:	b.n	642a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    6786:	movs	r3, #192	; 0xc0
    6788:	strb	r3, [r4, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    678a:	ldr	r3, [sp, #4]
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    678c:	movs	r2, #3
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    678e:	orn	r3, r3, #63	; 0x3f
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    6792:	strb	r2, [r4, #1]
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    6794:	strb.w	r3, [r5, #51]	; 0x33

      dirStream->nameLength = nameLength;
    6798:	ldrb.w	r3, [sp, #12]
    679c:	strb	r3, [r4, #3]
    679e:	ldrh.w	r3, [sp, #8]
    67a2:	strh	r3, [r4, #4]
    67a4:	b.n	670c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
      goto fail;
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
    67a6:	movs	r3, #133	; 0x85
    67a8:	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
      dirFile->setCount = m_setCount;
      if (FsDateTime::callback) {
    67aa:	ldr	r3, [pc, #48]	; (67dc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3d0>)
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    67ac:	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    67b0:	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
    67b4:	ldr	r3, [r3, #0]
    67b6:	cmp	r3, #0
    67b8:	beq.n	670c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
        uint16_t date, time;
        uint8_t ms10;
        FsDateTime::callback(&date, &time, &ms10);
    67ba:	add.w	r2, sp, #23
    67be:	add.w	r1, sp, #26
    67c2:	add	r0, sp, #24
    67c4:	blx	r3
        dirFile->createTimeMs = ms10;
    67c6:	ldrb.w	r1, [sp, #23]
    67ca:	ldrh.w	r2, [sp, #26]
    67ce:	ldrh.w	r3, [sp, #24]
    67d2:	strb	r1, [r4, #20]
    67d4:	strh	r2, [r4, #8]
    67d6:	strh	r3, [r4, #10]
    67d8:	b.n	670c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
    67da:	nop
    67dc:	.word	0x1fff24d4

000067e0 <ExFatFile::open(ExFatFile*, char const*, int)>:
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    67e0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    67e4:	mov	r6, r0
    67e6:	sub	sp, #84	; 0x54
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    67e8:	ldrb.w	r4, [r6, #49]	; 0x31
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    67ec:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    67ee:	movs	r0, #0
    67f0:	strb.w	r0, [sp, #73]	; 0x49
    67f4:	strb.w	r0, [sp, #74]	; 0x4a
    67f8:	strb.w	r0, [sp, #75]	; 0x4b
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    67fc:	cbnz	r4, 680c <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
    67fe:	mov	r9, r3
    6800:	ldrb.w	r3, [r1, #49]	; 0x31
    6804:	tst.w	r3, #80	; 0x50
    6808:	mov	r5, r1
    680a:	bne.n	6814 <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    680c:	movs	r0, #0
}
    680e:	add	sp, #84	; 0x54
    6810:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    6814:	ldrb	r3, [r2, #0]
    6816:	cmp	r3, #47	; 0x2f
    6818:	mov	r4, r2
    681a:	beq.n	6882 <ExFatFile::open(ExFatFile*, char const*, int)+0xa2>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    681c:	mov.w	r8, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    6820:	mov	r1, r4
    6822:	add	r3, sp, #12
    6824:	add	r2, sp, #16
    6826:	mov	r0, r6
    6828:	bl	6078 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    682c:	cmp	r0, #0
    682e:	beq.n	680c <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    6830:	ldr	r3, [sp, #12]
    6832:	ldrb	r3, [r3, #0]
    6834:	cmp	r3, #0
    6836:	beq.n	68ac <ExFatFile::open(ExFatFile*, char const*, int)+0xcc>
    6838:	ldrb.w	r3, [sp, #16]
    683c:	ldr	r2, [sp, #20]
    683e:	str.w	r8, [sp]
    6842:	mov	r1, r5
    6844:	mov	r0, r6
    6846:	bl	640c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    684a:	cmp	r0, #0
    684c:	beq.n	680c <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    684e:	mov	r4, r6
    6850:	add	r7, sp, #24
    6852:	add.w	lr, r6, #48	; 0x30
    6856:	ldr	r0, [r4, #0]
    6858:	ldr	r1, [r4, #4]
    685a:	ldr	r2, [r4, #8]
    685c:	ldr	r3, [r4, #12]
    685e:	mov	r5, r7
    6860:	stmia	r5!, {r0, r1, r2, r3}
    6862:	adds	r4, #16
    6864:	cmp	r4, lr
    6866:	mov	r7, r5
    6868:	bne.n	6856 <ExFatFile::open(ExFatFile*, char const*, int)+0x76>
    686a:	ldr	r0, [r4, #0]
    686c:	str	r0, [r5, #0]
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
    686e:	mov	r0, r6
    6870:	bl	7220 <ExFatFile::sync()>
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    6874:	add	r5, sp, #24
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    6876:	strb.w	r8, [r6, #49]	; 0x31
  m_flags = 0;
    687a:	strb.w	r8, [r6, #51]	; 0x33
    687e:	ldr	r4, [sp, #12]
    6880:	b.n	6820 <ExFatFile::open(ExFatFile*, char const*, int)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    6882:	adds	r4, #1
    6884:	str	r4, [sp, #12]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    6886:	ldrb	r1, [r4, #0]
    6888:	cmp	r1, #47	; 0x2f
    688a:	beq.n	6882 <ExFatFile::open(ExFatFile*, char const*, int)+0xa2>
      path++;
    }
    if (*path == 0) {
    688c:	cbz	r1, 68c4 <ExFatFile::open(ExFatFile*, char const*, int)+0xe4>
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    688e:	movs	r2, #56	; 0x38
    6890:	add	r0, sp, #24
    6892:	movs	r1, #0
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    6894:	ldr	r7, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    6896:	bl	117bc <memset>
  m_attributes = FILE_ATTR_ROOT;
    689a:	movs	r2, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    689c:	movs	r3, #1
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    689e:	add	r5, sp, #24
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    68a0:	str	r7, [sp, #56]	; 0x38
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    68a2:	strb.w	r2, [sp, #73]	; 0x49
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    68a6:	strb.w	r3, [sp, #75]	; 0x4b
    68aa:	b.n	681c <ExFatFile::open(ExFatFile*, char const*, int)+0x3c>
    68ac:	ldrb.w	r3, [sp, #16]
    68b0:	ldr	r2, [sp, #20]
    68b2:	str.w	r9, [sp]
    68b6:	mov	r1, r5
    68b8:	mov	r0, r6
    68ba:	bl	640c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    68be:	add	sp, #84	; 0x54
    68c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    68c4:	movs	r2, #56	; 0x38
    68c6:	mov	r0, r6
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    68c8:	ldr	r4, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    68ca:	bl	117bc <memset>
  m_attributes = FILE_ATTR_ROOT;
    68ce:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    68d0:	movs	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    68d2:	str	r4, [r6, #32]
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    68d4:	strb.w	r3, [r6, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    68d8:	strb.w	r0, [r6, #51]	; 0x33
    68dc:	b.n	680e <ExFatFile::open(ExFatFile*, char const*, int)+0x2e>
    68de:	nop

000068e0 <ExFatFile::open(ExFatVolume*, char const*, int)>:
bool ExFatFile::open(const ExChar_t* path, int oflag) {
  return open(ExFatVolume::cwv(), path, oflag);
}
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
    68e0:	cbz	r1, 68ea <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    68e2:	add.w	r1, r1, #1088	; 0x440
    68e6:	b.w	67e0 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    68ea:	mov	r0, r1
    68ec:	bx	lr
    68ee:	nop

000068f0 <ExFatFile::openNext(ExFatFile*, int)>:
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    68f0:	ldrb.w	r3, [r0, #49]	; 0x31
    68f4:	cbnz	r3, 690c <ExFatFile::openNext(ExFatFile*, int)+0x1c>
    DBG_FAIL_MACRO;
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    68f6:	push	{r4, r5, lr}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    68f8:	ldrb.w	r4, [r1, #49]	; 0x31
    68fc:	ands.w	r4, r4, #80	; 0x50
    DBG_FAIL_MACRO;
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    6900:	sub	sp, #12
    6902:	mov	r5, r1
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    6904:	bne.n	6910 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    6906:	mov	r0, r4
}
    6908:	add	sp, #12
    690a:	pop	{r4, r5, pc}
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    690c:	movs	r0, #0
}
    690e:	bx	lr
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    6910:	ldrd	r4, r5, [r5]
    6914:	movs	r5, #0
    6916:	and.w	r4, r4, #31
    691a:	orrs	r4, r5
    691c:	beq.n	6924 <ExFatFile::openNext(ExFatFile*, int)+0x34>
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    691e:	mov	r0, r3
}
    6920:	add	sp, #12
    6922:	pop	{r4, r5, pc}
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);
    6924:	str	r2, [sp, #0]
    6926:	mov	r2, r3
    6928:	bl	640c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>

 fail:
  return false;
}
    692c:	add	sp, #12
    692e:	pop	{r4, r5, pc}

00006930 <FsCache::sync() [clone .part.2]>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    6930:	push	{r4, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    6932:	add.w	r2, r0, #12

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    6936:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    6938:	ldr	r0, [r0, #4]
    693a:	ldr	r1, [r4, #8]
    693c:	ldr	r3, [r0, #0]
    693e:	ldr	r3, [r3, #24]
    6940:	blx	r3
    6942:	cbz	r0, 694c <FsCache::sync() [clone .part.2]+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    6944:	ldrb	r3, [r4, #0]
    6946:	bic.w	r3, r3, #1
    694a:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    694c:	pop	{r4, pc}
    694e:	nop

00006950 <FsCache::invalidate()>:
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    6950:	movs	r2, #0
  m_sector = 0XFFFFFFFF;
    6952:	mov.w	r3, #4294967295
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    6956:	strb	r2, [r0, #0]
  m_sector = 0XFFFFFFFF;
    6958:	str	r3, [r0, #8]
    695a:	bx	lr

0000695c <FsCache::get(unsigned long, unsigned char)>:
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
    695c:	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    695e:	ldr	r5, [r0, #4]
    6960:	cbz	r5, 69a2 <FsCache::get(unsigned long, unsigned char)+0x46>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    6962:	ldr	r3, [r0, #8]
    6964:	cmp	r3, r1
    6966:	mov	r4, r0
    6968:	mov	r7, r2
    696a:	mov	r6, r1
    696c:	beq.n	698c <FsCache::get(unsigned long, unsigned char)+0x30>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    696e:	ldrb	r3, [r0, #0]
    6970:	lsls	r2, r3, #31
    6972:	bmi.n	699a <FsCache::get(unsigned long, unsigned char)+0x3e>
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    6974:	lsls	r3, r7, #30
    6976:	bpl.n	69a6 <FsCache::get(unsigned long, unsigned char)+0x4a>
    6978:	add.w	r5, r4, #12
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    697c:	and.w	r2, r7, #1
    6980:	movs	r3, #0
    6982:	orrs	r3, r2
    6984:	strb	r3, [r4, #0]
    6986:	mov	r0, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    6988:	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
}
    698a:	pop	{r3, r4, r5, r6, r7, pc}
    698c:	ldrsb.w	r3, [r0], #12
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    6990:	and.w	r2, r7, #1
    6994:	orrs	r3, r2
    6996:	strb	r3, [r4, #0]
  return m_cacheBuffer;

fail:
  return nullptr;
}
    6998:	pop	{r3, r4, r5, r6, r7, pc}
    699a:	bl	6930 <FsCache::sync() [clone .part.2]>
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
    699e:	cmp	r0, #0
    69a0:	bne.n	6974 <FsCache::get(unsigned long, unsigned char)+0x18>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
    69a2:	movs	r0, #0
    69a4:	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    69a6:	ldr	r0, [r4, #4]
    69a8:	ldr	r3, [r0, #0]
    69aa:	add.w	r5, r4, #12
    69ae:	ldr	r3, [r3, #8]
    69b0:	mov	r2, r5
    69b2:	mov	r1, r6
    69b4:	blx	r3
    69b6:	cmp	r0, #0
    69b8:	bne.n	697c <FsCache::get(unsigned long, unsigned char)+0x20>
    69ba:	b.n	69a2 <FsCache::get(unsigned long, unsigned char)+0x46>

000069bc <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>:
    }
  }
  return 1;
}
//-----------------------------------------------------------------------------
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    69bc:	push	{r3, r4, r5, lr}
    69be:	mov	r4, r1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    69c0:	ldr.w	r1, [r0, #1052]	; 0x41c
    69c4:	mov	r5, r2
    69c6:	add.w	r1, r1, r4, lsr #7
    69ca:	add.w	r0, r0, #524	; 0x20c
    69ce:	movs	r2, #0
    69d0:	bl	695c <FsCache::get(unsigned long, unsigned char)>
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    69d4:	cbz	r0, 69e8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x2c>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    69d6:	lsls	r4, r4, #2
    69d8:	ubfx	r4, r4, #0, #9
    69dc:	ldr	r3, [r0, r4]
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    69de:	adds	r2, r3, #1
    69e0:	beq.n	69ec <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x30>
    return 0;
  }
  *value = next;
    69e2:	str	r3, [r5, #0]
  return 1;
    69e4:	movs	r0, #1
    69e6:	pop	{r3, r4, r5, pc}
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
    69e8:	movs	r0, #255	; 0xff
    69ea:	pop	{r3, r4, r5, pc}
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    return 0;
    69ec:	movs	r0, #0
  }
  *value = next;
  return 1;
}
    69ee:	pop	{r3, r4, r5, pc}

000069f0 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>:
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    69f0:	push	{r3, r4, r5, lr}
    69f2:	mov	r4, r1
    69f4:	ldr.w	r1, [r0, #1052]	; 0x41c
    69f8:	mov	r5, r2
    69fa:	add.w	r1, r1, r4, lsr #7
    69fe:	add.w	r0, r0, #524	; 0x20c
    6a02:	movs	r2, #1
    6a04:	bl	695c <FsCache::get(unsigned long, unsigned char)>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCacheGet(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    6a08:	mov	r3, r0
    6a0a:	cbz	r0, 6a18 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]+0x28>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    6a0c:	lsls	r4, r4, #2
    6a0e:	ubfx	r4, r4, #0, #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;
    6a12:	movs	r0, #1
    6a14:	str	r5, [r3, r4]
    6a16:	pop	{r3, r4, r5, pc}

 fail:
  return false;
}
    6a18:	pop	{r3, r4, r5, pc}
    6a1a:	nop

00006a1c <FsCache::sync()>:
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    6a1c:	ldrb	r3, [r0, #0]
    6a1e:	lsls	r3, r3, #31
    6a20:	bmi.n	6a26 <FsCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    6a22:	movs	r0, #1
    6a24:	bx	lr
    6a26:	b.w	6930 <FsCache::sync() [clone .part.2]>
    6a2a:	nop

00006a2c <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
 fail:
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    6a2c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6a30:	mov	r8, r0
    6a32:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    6a34:	mov	fp, r1
    6a36:	cmp	r1, #0
    6a38:	beq.n	6ac4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x98>
    6a3a:	subs	r7, r1, #2
  if (start >= m_clusterCount) {
    6a3c:	ldr.w	r3, [r8, #1064]	; 0x428
    6a40:	cmp	r7, r3
    6a42:	bcs.n	6abc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x90>
    6a44:	and.w	r5, r7, #7
    6a48:	movs	r3, #1
    6a4a:	lsl.w	r5, r3, r5
    6a4e:	uxtb	r5, r5
    6a50:	ubfx	sl, r7, #3, #9
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
    6a54:	mov	r6, r7
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    6a56:	mov	r4, r7
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    6a58:	ldr.w	r1, [r8, #1060]	; 0x424
    6a5c:	movs	r2, #0
    6a5e:	add.w	r1, r1, r4, lsr #12
    6a62:	mov	r0, r8
    6a64:	bl	695c <FsCache::get(unsigned long, unsigned char)>
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    6a68:	cbz	r0, 6a9c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x70>
    6a6a:	ldrb.w	r1, [r0, sl]
    6a6e:	b.n	6a86 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5a>
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    6a70:	cmp	r2, r9
    6a72:	beq.n	6aca <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9e>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    6a74:	cmp	r7, r4
    6a76:	beq.n	6a9a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    6a78:	ldr.w	r2, [r8, #1064]	; 0x428
    6a7c:	cmp	r4, r2
    6a7e:	bcs.n	6ab0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x84>
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    6a80:	ands.w	r5, r3, #255	; 0xff
    6a84:	beq.n	6aa0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x74>
        endAlloc++;
    6a86:	adds	r4, #1
        if (!(mask & cache[i])) {
    6a88:	tst	r5, r1
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    6a8a:	mov.w	r3, r5, lsl #1
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    6a8e:	sub.w	r2, r4, r6
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    6a92:	beq.n	6a70 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x44>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    6a94:	cmp	r7, r4
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    6a96:	mov	r6, r4
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    6a98:	bne.n	6a78 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4c>
          return 1;
    6a9a:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    6a9c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6aa0:	add.w	sl, sl, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    6aa4:	cmp.w	sl, #512	; 0x200
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    6aa8:	mov.w	r5, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    6aac:	bne.n	6a6a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3e>
    6aae:	b.n	6ab4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
    6ab0:	movs	r6, #0
    6ab2:	mov	r4, r6
          break;
        }
      }
      mask = 1;
    }
    i = 0;
    6ab4:	mov.w	sl, #0
    6ab8:	movs	r5, #1
    6aba:	b.n	6a58 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
    6abc:	movs	r7, #0
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
    6abe:	mov	sl, r7
    6ac0:	movs	r5, #1
    6ac2:	b.n	6a54 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    6ac4:	ldr.w	r7, [r0, #1048]	; 0x418
    6ac8:	b.n	6a3c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
            if (cluster == 0 && count == 1) {
    6aca:	cmp.w	fp, #0
    6ace:	bne.n	6ada <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xae>
    6ad0:	cmp.w	r9, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    6ad4:	it	eq
    6ad6:	streq.w	r6, [r8, #1048]	; 0x418
            }
            return bgnAlloc + 2;
    6ada:	adds	r0, r6, #2
    6adc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00006ae0 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    6ae0:	push	{r3, r4, r5, r6, r7, lr}
    6ae2:	mov	r4, r0
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    6ae4:	movs	r3, #0
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
  m_sector = 0XFFFFFFFF;
    6ae6:	mov.w	r6, #4294967295
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    6aea:	add.w	r7, r0, #524	; 0x20c
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
  m_blockDev = dev;
    6aee:	str.w	r1, [r0, #1080]	; 0x438
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this partition.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    6af2:	str	r1, [r0, #4]
    6af4:	str.w	r1, [r0, #528]	; 0x210

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    6af8:	mov	r5, r2
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    6afa:	mov	r0, r7
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    6afc:	strb.w	r3, [r4, #1084]	; 0x43c
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    6b00:	strb	r3, [r4, #0]
    6b02:	strb.w	r3, [r4, #524]	; 0x20c
  m_sector = 0XFFFFFFFF;
    6b06:	str	r6, [r4, #8]
    6b08:	str.w	r6, [r4, #532]	; 0x214
    6b0c:	mov	r2, r3
    6b0e:	mov	r1, r3
    6b10:	bl	695c <FsCache::get(unsigned long, unsigned char)>

  m_fatType = 0;
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    6b14:	cmp	r5, #4
    6b16:	bhi.n	6b32 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    6b18:	mov	r6, r0
    6b1a:	cbz	r0, 6b32 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    6b1c:	cbnz	r5, 6b36 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    6b1e:	movs	r2, #5
    6b20:	ldr	r1, [pc, #152]	; (6bbc <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xdc>)
    6b22:	adds	r0, r6, #3
    6b24:	bl	1231c <strncmp>
    6b28:	cbnz	r0, 6b32 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    6b2a:	ldrb.w	r3, [r6, #108]	; 0x6c
    6b2e:	cmp	r3, #9
    6b30:	beq.n	6b66 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x86>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    6b32:	movs	r0, #0
    6b34:	pop	{r3, r4, r5, r6, r7, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    6b36:	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    6b38:	add.w	r3, r0, r3, lsl #4
    6b3c:	ldrb.w	r2, [r3, #446]	; 0x1be
    6b40:	ands.w	r2, r2, #127	; 0x7f
    6b44:	bne.n	6b32 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    6b46:	ldrb.w	r3, [r3, #450]	; 0x1c2
    6b4a:	cmp	r3, #0
    6b4c:	beq.n	6b32 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    6b4e:	add.w	r5, r0, r5, lsl #4
    6b52:	mov	r0, r7
    6b54:	ldr.w	r5, [r5, #438]	; 0x1b6
    6b58:	mov	r1, r5
    6b5a:	bl	695c <FsCache::get(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCacheGet(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
    6b5e:	mov	r6, r0
    6b60:	cmp	r0, #0
    6b62:	bne.n	6b1e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x3e>
    6b64:	b.n	6b32 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    6b66:	ldr	r3, [r6, #80]	; 0x50
    6b68:	add	r3, r5
    6b6a:	str.w	r3, [r4, #1052]	; 0x41c
    6b6e:	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    6b70:	str.w	r3, [r4, #1056]	; 0x420
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    6b74:	ldr	r3, [r6, #88]	; 0x58
    6b76:	add	r5, r3
    6b78:	str.w	r5, [r4, #1060]	; 0x424
    6b7c:	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    6b7e:	str.w	r3, [r4, #1064]	; 0x428
    6b82:	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    6b84:	str.w	r3, [r4, #1068]	; 0x42c
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    6b88:	ldrb.w	r3, [r6, #109]	; 0x6d
    6b8c:	strb.w	r3, [r4, #1085]	; 0x43d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    6b90:	movs	r5, #1
    6b92:	adds	r3, #9
    6b94:	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    6b98:	subs	r2, r3, #1
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    6b9a:	str.w	r0, [r4, #1048]	; 0x418
  bitmapFind(0, 1);
    6b9e:	mov	r1, r0
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    6ba0:	str.w	r3, [r4, #1076]	; 0x434
  m_clusterMask = m_bytesPerCluster - 1;
    6ba4:	str.w	r2, [r4, #1072]	; 0x430
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    6ba8:	mov	r0, r4
    6baa:	mov	r2, r5
    6bac:	bl	6a2c <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    6bb0:	movs	r3, #64	; 0x40
    6bb2:	strb.w	r3, [r4, #1084]	; 0x43c
  return true;
    6bb6:	mov	r0, r5

 fail:
  return false;
}
    6bb8:	pop	{r3, r4, r5, r6, r7, pc}
    6bba:	nop
    6bbc:	.word	0x00015ad8

00006bc0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    6bc0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
    6bc4:	subs	r1, #2
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    6bc6:	mov	r8, r0
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    6bc8:	ldr.w	r0, [r0, #1064]	; 0x428
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    6bcc:	mov	r5, r2
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    6bce:	adds	r2, r1, r2
    6bd0:	cmp	r2, r0
    6bd2:	bhi.n	6c46 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    6bd4:	mov	sl, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    6bd6:	ldr.w	r3, [r8, #1048]	; 0x418
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    6bda:	cmp.w	sl, #0
    6bde:	bne.n	6c4c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    6be0:	cmp	r1, r3
      m_bitmapStart = start;
    6be2:	it	cc
    6be4:	strcc.w	r1, [r8, #1048]	; 0x418
    }
  }
  mask = 1 << (start & 7);
    6be8:	and.w	r4, r1, #7
    6bec:	movs	r2, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    6bee:	ldr.w	r3, [r8, #1060]	; 0x424
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    6bf2:	lsl.w	r4, r2, r4
    6bf6:	uxtb	r4, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    6bf8:	add.w	r9, r3, r1, lsr #12
  i = (start >> 3) & m_sectorMask;
    6bfc:	ubfx	r6, r1, #3, #9
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    6c00:	movs	r2, #1
    6c02:	mov	r1, r9
    6c04:	mov	r0, r8
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    6c06:	add	r9, r2
    6c08:	bl	695c <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    6c0c:	cbz	r0, 6c46 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    6c0e:	adds	r7, r0, r6
    6c10:	add.w	r0, r0, #512	; 0x200
    6c14:	ldrb.w	r2, [r7], #1
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    6c18:	tst	r2, r4
    6c1a:	ite	ne
    6c1c:	movne	r6, #1
    6c1e:	moveq	r6, #0
    6c20:	cmp	r6, sl
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    6c22:	eor.w	r2, r2, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    6c26:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    6c2a:	beq.n	6c46 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
    6c2c:	subs	r5, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    6c2e:	strb.w	r2, [r7, #-1]
        if (--count == 0) {
    6c32:	beq.n	6c60 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa0>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    6c34:	ands.w	r4, r4, #255	; 0xff
    6c38:	bne.n	6c18 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x58>
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    6c3a:	cmp	r0, r7
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    6c3c:	mov	r6, r4
    6c3e:	mov.w	r4, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    6c42:	bne.n	6c14 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    6c44:	b.n	6c00 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x40>
    }
    i = 0;
  }

 fail:
  return false;
    6c46:	movs	r0, #0
    6c48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    6c4c:	cmp	r1, r3
    6c4e:	bhi.n	6be8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
    6c50:	cmp	r2, r3
    6c52:	bls.n	6be8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    6c54:	cmp	r2, r0
    6c56:	it	cs
    6c58:	movcs	r2, #0
    6c5a:	str.w	r2, [r8, #1048]	; 0x418
    6c5e:	b.n	6be8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
    6c60:	movs	r0, #1
    i = 0;
  }

 fail:
  return false;
}
    6c62:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6c66:	nop

00006c68 <ExFatPartition::chainSize(unsigned long)>:
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    6c68:	push	{r4, r5, r6, lr}
    6c6a:	sub	sp, #8
    6c6c:	add	r6, sp, #8
    6c6e:	mov	r5, r0
    6c70:	str.w	r1, [r6, #-4]!
  uint32_t n = 0;
    6c74:	movs	r4, #0
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    6c76:	ldr.w	r3, [r5, #1064]	; 0x428
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    6c7a:	ldr	r1, [sp, #4]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    6c7c:	adds	r3, #1
    6c7e:	cmp	r1, r3
    6c80:	bls.n	6c88 <ExFatPartition::chainSize(unsigned long)+0x20>
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    6c82:	movs	r0, #0
    n++;
  } while (status);
  return n;
}
    6c84:	add	sp, #8
    6c86:	pop	{r4, r5, r6, pc}
    6c88:	mov	r2, r6
    6c8a:	mov	r0, r5
    6c8c:	bl	69bc <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    6c90:	sxtb	r0, r0
    if (status < 0) return 0;
    6c92:	cmp	r0, #0
    6c94:	blt.n	6c82 <ExFatPartition::chainSize(unsigned long)+0x1a>
    n++;
    6c96:	add.w	r4, r4, #1
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    6c9a:	bne.n	6c76 <ExFatPartition::chainSize(unsigned long)+0xe>
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    6c9c:	mov	r0, r4
  } while (status);
  return n;
}
    6c9e:	add	sp, #8
    6ca0:	pop	{r4, r5, r6, pc}
    6ca2:	nop

00006ca4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
//-----------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    6ca4:	push	{r3, r4, r5, r6, r7, lr}
    6ca6:	mov	r6, r1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    6ca8:	ldmia.w	r6, {r3, r5}
    6cac:	ldr.w	r1, [r0, #1072]	; 0x430
    6cb0:	ldr.w	r4, [r0, #1060]	; 0x424
    6cb4:	ldrb.w	r7, [r0, #1085]	; 0x43d
    6cb8:	ands	r1, r5
    6cba:	subs	r3, #2
    6cbc:	add.w	r1, r4, r1, lsr #9
    6cc0:	lsls	r3, r7
    6cc2:	add	r1, r3
    6cc4:	add.w	r0, r0, #524	; 0x20c
    6cc8:	bl	695c <FsCache::get(unsigned long, unsigned char)>
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    6ccc:	cbz	r0, 6cd6 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x32>
    6cce:	ldr	r3, [r6, #4]
    6cd0:	ubfx	r3, r3, #0, #9
    6cd4:	add	r0, r3
}
    6cd6:	pop	{r3, r4, r5, r6, r7, pc}

00006cd8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    6cd8:	push	{r4, r5, r6, lr}
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    6cda:	ldr	r4, [r1, #4]
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    6cdc:	mov	r5, r1
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
    6cde:	adds	r3, r4, r2
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    6ce0:	ldr.w	r1, [r0, #1072]	; 0x430
  pos->position += offset;
    6ce4:	str	r3, [r5, #4]
  tmp >>= bytesPerClusterShift();
    6ce6:	ldrb.w	r3, [r0, #1085]	; 0x43d
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    6cea:	ands	r4, r1
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    6cec:	adds	r3, #9
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    6cee:	add	r2, r4
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    6cf0:	uxtb	r3, r3
    6cf2:	lsr.w	r4, r2, r3
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    6cf6:	mov	r6, r0
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    6cf8:	cbz	r4, 6d0a <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
    if (pos->isContiguous) {
    6cfa:	ldrb	r3, [r5, #8]
    6cfc:	cbz	r3, 6d0e <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x36>
      pos->cluster++;
    6cfe:	ldr	r3, [r5, #0]
    6d00:	adds	r3, #1
    6d02:	str	r3, [r5, #0]
    6d04:	subs	r4, #1
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    6d06:	cmp	r4, #0
    6d08:	bne.n	6cfa <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x22>
      if (status != 1) {
        return status;
      }
    }
  }
  return 1;
    6d0a:	movs	r0, #1
    6d0c:	pop	{r4, r5, r6, pc}
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    6d0e:	ldr.w	r3, [r6, #1064]	; 0x428
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    6d12:	ldr	r1, [r5, #0]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    6d14:	adds	r3, #1
    6d16:	cmp	r1, r3
    6d18:	bls.n	6d20 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x48>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    6d1a:	mov.w	r0, #4294967295
        return status;
      }
    }
  }
  return 1;
}
    6d1e:	pop	{r4, r5, r6, pc}
    6d20:	mov	r2, r5
    6d22:	mov	r0, r6
    6d24:	bl	69bc <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    6d28:	sxtb	r0, r0
      if (status != 1) {
    6d2a:	cmp	r0, #1
    6d2c:	beq.n	6d04 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
    6d2e:	pop	{r4, r5, r6, pc}

00006d30 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    6d30:	ldr.w	r3, [r0, #1064]	; 0x428
    6d34:	adds	r3, #1
    6d36:	cmp	r3, r1
    6d38:	bcs.n	6d3e <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xe>
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    6d3a:	movs	r0, #255	; 0xff
    6d3c:	bx	lr
    6d3e:	b.w	69bc <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
    6d42:	nop

00006d44 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    6d44:	cmp	r1, #1
    6d46:	bls.n	6d64 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x20>
    6d48:	ldr.w	r3, [r0, #1064]	; 0x428
    6d4c:	adds	r3, #1
    6d4e:	cmp	r1, r3
  }
  *value = next;
  return 1;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    6d50:	push	{r4}
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    6d52:	bls.n	6d5c <ExFatPartition::fatPut(unsigned long, unsigned long)+0x18>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
}
    6d54:	movs	r0, #0
    6d56:	ldr.w	r4, [sp], #4
    6d5a:	bx	lr
    6d5c:	ldr.w	r4, [sp], #4
    6d60:	b.w	69f0 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    6d64:	movs	r0, #0
    6d66:	bx	lr

00006d68 <ExFatPartition::freeChain(unsigned long)>:
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    6d68:	push	{r4, r5, r6, r7, lr}
    6d6a:	mov	r4, r1
    6d6c:	sub	sp, #12
    6d6e:	mov	r5, r0
  uint32_t next;
  uint32_t start = cluster;
    6d70:	mov	r6, r1
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    6d72:	ldr.w	r3, [r5, #1064]	; 0x428
    6d76:	adds	r3, #1
    6d78:	cmp	r4, r3
    6d7a:	bls.n	6d82 <ExFatPartition::freeChain(unsigned long)+0x1a>
  } while (status);

  return true;

 fail:
  return false;
    6d7c:	movs	r0, #0
}
    6d7e:	add	sp, #12
    6d80:	pop	{r4, r5, r6, r7, pc}
    6d82:	add	r2, sp, #4
    6d84:	mov	r1, r4
    6d86:	mov	r0, r5
    6d88:	bl	69bc <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    6d8c:	sxtb	r7, r0
    if (status < 0) {
    6d8e:	cmp	r7, #0
    6d90:	blt.n	6d7c <ExFatPartition::freeChain(unsigned long)+0x14>
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    6d92:	cmp	r4, #1
    6d94:	bls.n	6d7c <ExFatPartition::freeChain(unsigned long)+0x14>
    6d96:	ldr.w	r3, [r5, #1064]	; 0x428
    6d9a:	adds	r3, #1
    6d9c:	cmp	r4, r3
    6d9e:	bhi.n	6d7c <ExFatPartition::freeChain(unsigned long)+0x14>
    6da0:	movs	r2, #0
    6da2:	mov	r1, r4
    6da4:	mov	r0, r5
    6da6:	bl	69f0 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    6daa:	cmp	r0, #0
    6dac:	beq.n	6d7c <ExFatPartition::freeChain(unsigned long)+0x14>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    6dae:	ldr	r3, [sp, #4]
    6db0:	adds	r4, #1
    6db2:	cmp	r4, r3
    6db4:	bne.n	6dce <ExFatPartition::freeChain(unsigned long)+0x66>
    6db6:	cmp	r7, #0
    6db8:	bne.n	6d72 <ExFatPartition::freeChain(unsigned long)+0xa>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    6dba:	mov	r3, r7
    6dbc:	subs	r2, r4, r6
    6dbe:	mov	r1, r6
    6dc0:	mov	r0, r5
    6dc2:	bl	6bc0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    6dc6:	cmp	r0, #0
    6dc8:	beq.n	6d7c <ExFatPartition::freeChain(unsigned long)+0x14>

  return true;

 fail:
  return false;
}
    6dca:	add	sp, #12
    6dcc:	pop	{r4, r5, r6, r7, pc}
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    6dce:	subs	r2, r4, r6
    6dd0:	mov	r1, r6
    6dd2:	movs	r3, #0
    6dd4:	mov	r0, r5
    6dd6:	bl	6bc0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    6dda:	cmp	r0, #0
    6ddc:	beq.n	6d7c <ExFatPartition::freeChain(unsigned long)+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    6dde:	ldr	r4, [sp, #4]
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    6de0:	cmp	r7, #0
    6de2:	beq.n	6d7e <ExFatPartition::freeChain(unsigned long)+0x16>
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    6de4:	mov	r6, r4
    6de6:	b.n	6d72 <ExFatPartition::freeChain(unsigned long)+0xa>

00006de8 <ExFatPartition::freeClusterCount()>:

 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    6de8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    6dec:	movs	r4, #0
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
    6dee:	ldr.w	r6, [r0, #1060]	; 0x424

 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    6df2:	mov	r8, r0
    6df4:	add.w	r7, r0, #524	; 0x20c
  uint32_t nc = 0;
    6df8:	mov	r5, r4
    6dfa:	mov	r1, r6
    6dfc:	movs	r2, #0
    6dfe:	mov	r0, r7
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
  uint8_t* cache;

  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    6e00:	adds	r6, #1
    6e02:	bl	695c <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    6e06:	cbz	r0, 6e56 <ExFatPartition::freeClusterCount()+0x6e>
    6e08:	add.w	lr, r0, #4294967295
    6e0c:	ldr.w	ip, [r8, #1064]	; 0x428
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    6e10:	ldrb.w	r0, [lr, #1]!
    6e14:	cmp	r0, #255	; 0xff
    6e16:	add.w	r9, r5, #4096	; 0x1000
    6e1a:	beq.n	6e44 <ExFatPartition::freeClusterCount()+0x5c>
        usedCount+= 8;
      } else if (cache[i]) {
    6e1c:	cbz	r0, 6e32 <ExFatPartition::freeClusterCount()+0x4a>
    6e1e:	movs	r2, #8
    6e20:	movs	r3, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
          if ((mask & cache[i])) {
    6e22:	tst	r0, r3
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    6e24:	mov.w	r1, r3, lsl #1
          if ((mask & cache[i])) {
            usedCount++;
    6e28:	it	ne
    6e2a:	addne	r4, #1
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    6e2c:	subs	r2, #1
    6e2e:	uxtb	r3, r1
    6e30:	bne.n	6e22 <ExFatPartition::freeClusterCount()+0x3a>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    6e32:	adds	r5, #8
      if (nc >= m_clusterCount) {
    6e34:	cmp	ip, r5
    6e36:	bls.n	6e4e <ExFatPartition::freeClusterCount()+0x66>
  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    6e38:	cmp	r5, r9
    6e3a:	beq.n	6dfa <ExFatPartition::freeClusterCount()+0x12>
      if (cache[i] == 0XFF) {
    6e3c:	ldrb.w	r0, [lr, #1]!
    6e40:	cmp	r0, #255	; 0xff
    6e42:	bne.n	6e1c <ExFatPartition::freeClusterCount()+0x34>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    6e44:	adds	r5, #8
      if (nc >= m_clusterCount) {
    6e46:	cmp	ip, r5
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
    6e48:	add.w	r4, r4, #8
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    6e4c:	bhi.n	6e38 <ExFatPartition::freeClusterCount()+0x50>
        return m_clusterCount - usedCount;
    6e4e:	rsb	r0, r4, ip
    6e52:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      }
    }
  }
}
    6e56:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6e5a:	nop

00006e5c <ExFatPartition::rootLength()>:
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    6e5c:	push	{r4, lr}
    6e5e:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    6e60:	ldr.w	r1, [r0, #1068]	; 0x42c
    6e64:	bl	6c68 <ExFatPartition::chainSize(unsigned long)>
  return nc << bytesPerClusterShift();
    6e68:	ldrb.w	r3, [r4, #1085]	; 0x43d
    6e6c:	adds	r3, #9
    6e6e:	uxtb	r3, r3
}
    6e70:	lsls	r0, r3
    6e72:	pop	{r4, pc}

00006e74 <exFatHashName(char const*, unsigned int, unsigned short)>:
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    6e74:	cbz	r1, 6eaa <exFatHashName(char const*, unsigned int, unsigned short)+0x36>
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
    6e76:	push	{r4}
    6e78:	add	r1, r0
    6e7a:	lsls	r3, r2, #15
    6e7c:	orr.w	r3, r3, r2, lsr #1
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    6e80:	ldrb.w	r2, [r0], #1
    if ('a' <= c && c <= 'z') {
    6e84:	sub.w	r4, r2, #97	; 0x61
    6e88:	cmp	r4, #25
      c -= 'a' - 'A';
    6e8a:	itt	ls
    6e8c:	subls	r2, #32
    6e8e:	uxtbls	r2, r2
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    6e90:	uxtah	r2, r2, r3
    6e94:	uxth	r2, r2
    6e96:	lsls	r3, r2, #15
    6e98:	orr.w	r2, r3, r2, lsr #1
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    6e9c:	cmp	r1, r0
    6e9e:	uxth	r2, r2
    6ea0:	bne.n	6e7a <exFatHashName(char const*, unsigned int, unsigned short)+0x6>
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    hash = ((hash << 15) | (hash >> 1));
  }
  return hash;
}
    6ea2:	mov	r0, r2
    6ea4:	ldr.w	r4, [sp], #4
    6ea8:	bx	lr
    6eaa:	mov	r0, r2
    6eac:	bx	lr
    6eae:	nop

00006eb0 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>:
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    6eb0:	cbz	r3, 6f04 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x54>
  }
  return hash;
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
    6eb2:	push	{r4, r5, r6}
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    6eb4:	ldrh	r4, [r0, #2]
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    6eb6:	cmp	r4, #126	; 0x7e
    6eb8:	bhi.n	6ef8 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
    6eba:	add	r3, r2
    6ebc:	adds	r5, r1, r3
    6ebe:	add	r2, r1
    6ec0:	adds	r0, #2
    6ec2:	ldrb.w	r3, [r2], #1
    6ec6:	uxtb	r4, r4
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    6ec8:	sub.w	r1, r3, #97	; 0x61
    6ecc:	cmp	r1, #25
    6ece:	sub.w	r1, r4, #97	; 0x61
    6ed2:	ite	ls
    6ed4:	movls	r6, #32
    6ed6:	movhi	r6, #0
    6ed8:	cmp	r1, #25
    6eda:	ite	ls
    6edc:	movls	r1, #32
    6ede:	movhi	r1, #0
    6ee0:	subs	r3, r3, r6
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    6ee2:	subs	r4, r4, r1
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    6ee4:	uxtb	r3, r3
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    6ee6:	uxtb	r4, r4
    6ee8:	cmp	r4, r3
    6eea:	bne.n	6ef8 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    6eec:	cmp	r2, r5
    6eee:	beq.n	6efe <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4e>
    6ef0:	ldrh.w	r4, [r0, #2]!
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    6ef4:	cmp	r4, #126	; 0x7e
    6ef6:	bls.n	6ec2 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x12>
      return false;
    6ef8:	movs	r0, #0
    }
  }
  return true;
}
    6efa:	pop	{r4, r5, r6}
    6efc:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    6efe:	movs	r0, #1
}
    6f00:	pop	{r4, r5, r6}
    6f02:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    6f04:	movs	r0, #1
}
    6f06:	bx	lr

00006f08 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    6f08:	ldr	r1, [r0, #24]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    6f0a:	push	{r3, r4, r5, r6, r7, lr}
    6f0c:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    6f0e:	ldr	r0, [r0, #32]
    6f10:	cbz	r1, 6f14 <ExFatFile::addCluster()+0xc>
    6f12:	adds	r1, #1
    6f14:	movs	r2, #1
    6f16:	bl	6a2c <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    6f1a:	cmp	r0, #1
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    6f1c:	mov	r6, r0
  if (find < 2) {
    6f1e:	bls.n	6f80 <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    6f20:	movs	r3, #1
    6f22:	mov	r1, r0
    6f24:	mov	r2, r3
    6f26:	ldr	r0, [r4, #32]
    6f28:	bl	6bc0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    6f2c:	mov	r7, r0
    6f2e:	cbz	r0, 6f80 <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    6f30:	ldr	r0, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    6f32:	ldrb.w	r3, [r4, #51]	; 0x33
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    6f36:	cbz	r0, 6f86 <ExFatFile::addCluster()+0x7e>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    6f38:	lsls	r2, r3, #25
    6f3a:	bpl.n	6f64 <ExFatFile::addCluster()+0x5c>
    if (find == (m_curCluster + 1)) {
    6f3c:	adds	r2, r0, #1
    6f3e:	cmp	r6, r2
    6f40:	beq.n	6f8e <ExFatFile::addCluster()+0x86>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    6f42:	bic.w	r2, r3, #64	; 0x40
    6f46:	strb.w	r2, [r4, #51]	; 0x33

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6f4a:	ldr	r3, [r4, #28]
    6f4c:	b.n	6f5a <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    6f4e:	ldr	r0, [r4, #32]
    6f50:	bl	6d44 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6f54:	cbz	r0, 6f80 <ExFatFile::addCluster()+0x78>
    6f56:	ldr	r0, [r4, #24]
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6f58:	mov	r3, r5
      if (!m_vol->fatPut(c, c + 1)) {
    6f5a:	adds	r5, r3, #1
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6f5c:	cmp	r3, r0
      if (!m_vol->fatPut(c, c + 1)) {
    6f5e:	mov	r1, r3
    6f60:	mov	r2, r5
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6f62:	bcc.n	6f4e <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    6f64:	mov.w	r2, #4294967295
    6f68:	mov	r1, r6
    6f6a:	ldr	r0, [r4, #32]
    6f6c:	bl	6d44 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6f70:	cbz	r0, 6f80 <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    6f72:	ldr	r1, [r4, #24]
    6f74:	cbz	r1, 6f8e <ExFatFile::addCluster()+0x86>
    if (!m_vol->fatPut(m_curCluster, find)) {
    6f76:	mov	r2, r6
    6f78:	ldr	r0, [r4, #32]
    6f7a:	bl	6d44 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6f7e:	cbnz	r0, 6f8e <ExFatFile::addCluster()+0x86>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    6f80:	movs	r7, #0
}
    6f82:	mov	r0, r7
    6f84:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    6f86:	orr.w	r3, r3, #64	; 0x40
    6f8a:	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    6f8e:	str	r6, [r4, #24]
  return true;

 fail:
  return false;
}
    6f90:	mov	r0, r7
    6f92:	pop	{r3, r4, r5, r6, r7, pc}

00006f94 <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    6f94:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirPos_t pos = m_dirPos;
    6f98:	add.w	r3, r0, #36	; 0x24

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    6f9c:	mov	r5, r0
  DirPos_t pos = m_dirPos;
    6f9e:	ldmia.w	r3, {r0, r1, r2}

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    6fa2:	sub	sp, #20
    6fa4:	ldrb.w	r3, [r5, #51]	; 0x33
  DirPos_t pos = m_dirPos;
    6fa8:	add	r6, sp, #4
    6faa:	stmia.w	r6, {r0, r1, r2}
  uint8_t* cache;
  if (!isWritable()) {
    6fae:	lsls	r2, r3, #30
    6fb0:	bpl.n	6fea <ExFatFile::remove()+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    6fb2:	ldr	r1, [r5, #28]
    6fb4:	cbnz	r1, 6ff2 <ExFatFile::remove()+0x5e>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    6fb6:	movs	r4, #0
  for (uint8_t i = 0; i <= m_setCount; i++) {
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    6fb8:	movs	r2, #1
    6fba:	mov	r1, r6
    6fbc:	ldr	r0, [r5, #32]
    6fbe:	bl	6ca4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    6fc2:	adds	r4, #1
    6fc4:	uxtb	r4, r4
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
    6fc6:	cbz	r0, 6fea <ExFatFile::remove()+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    6fc8:	ldrb	r3, [r0, #0]
    6fca:	and.w	r3, r3, #127	; 0x7f
    6fce:	strb	r3, [r0, #0]
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    6fd0:	ldrb.w	r3, [r5, #48]	; 0x30
    6fd4:	cmp	r3, r4
    6fd6:	bcc.n	703c <ExFatFile::remove()+0xa8>
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
    6fd8:	cmp	r4, #0
    6fda:	beq.n	6fb8 <ExFatFile::remove()+0x24>
    6fdc:	movs	r2, #32
    6fde:	mov	r1, r6
    6fe0:	ldr	r0, [r5, #32]
    6fe2:	bl	6cd8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    6fe6:	cmp	r0, #1
    6fe8:	beq.n	6fb8 <ExFatFile::remove()+0x24>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    6fea:	movs	r0, #0
}
    6fec:	add	sp, #20
    6fee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    6ff2:	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    6ff4:	ldr	r0, [r5, #32]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    6ff6:	bpl.n	7032 <ExFatFile::remove()+0x9e>
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    6ff8:	ldrd	r2, r3, [r5, #8]
    6ffc:	ldrb.w	r4, [r0, #1085]	; 0x43d
    7000:	adds	r4, #9
    7002:	uxtb	r4, r4
    7004:	adds.w	r8, r2, #4294967295
    7008:	adc.w	r9, r3, #4294967295
    700c:	rsb	r7, r4, #32
    7010:	lsl.w	r7, r9, r7
    7014:	lsr.w	r2, r8, r4
    7018:	sub.w	r3, r4, #32
    701c:	lsr.w	r3, r9, r3
    7020:	orrs	r2, r7
    7022:	orrs	r2, r3
    7024:	adds	r2, #1
    7026:	movs	r3, #0
    7028:	bl	6bc0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    702c:	cmp	r0, #0
    702e:	bne.n	6fb6 <ExFatFile::remove()+0x22>
    7030:	b.n	6fea <ExFatFile::remove()+0x56>
        DBG_FAIL_MACRO;
        goto fail;
      }
    } else {
      if (!m_vol->freeChain(m_firstCluster)) {
    7032:	bl	6d68 <ExFatPartition::freeChain(unsigned long)>
    7036:	cmp	r0, #0
    7038:	bne.n	6fb6 <ExFatFile::remove()+0x22>
    703a:	b.n	6fea <ExFatFile::remove()+0x56>
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  return m_vol->cacheSync();
    703c:	ldr	r4, [r5, #32]
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    703e:	movs	r3, #0
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    7040:	mov	r0, r4
    7042:	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    7046:	strb.w	r3, [r5, #51]	; 0x33
    704a:	bl	6a1c <FsCache::sync()>
    704e:	cmp	r0, #0
    7050:	beq.n	6fea <ExFatFile::remove()+0x56>
    7052:	add.w	r0, r4, #524	; 0x20c
    7056:	bl	6a1c <FsCache::sync()>
    705a:	cmp	r0, #0
    705c:	beq.n	6fea <ExFatFile::remove()+0x56>
    705e:	ldr.w	r0, [r4, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    7062:	ldr	r3, [r0, #0]
    7064:	ldr	r3, [r3, #20]
    7066:	blx	r3
    7068:	b.n	6fec <ExFatFile::remove()+0x58>
    706a:	nop

0000706c <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    706c:	ldrb.w	r3, [r0, #49]	; 0x31
    7070:	lsls	r1, r3, #27
    7072:	bmi.n	7078 <ExFatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    7074:	movs	r0, #0
}
    7076:	bx	lr

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    7078:	push	{r4, lr}
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    707a:	movs	r2, #0
    707c:	sub	sp, #32
    707e:	movs	r3, #0
    7080:	mov	r4, r0
    7082:	bl	630c <ExFatFile::seekSet(unsigned long long)>
    7086:	b.n	7096 <ExFatFile::rmdir()+0x2a>
  while (1) {
    n = read(dir, 32);
    if (n == 0) {
      break;
    }
    if (n != 32 || dir[0] & 0X80) {
    7088:	cmp	r0, #32
    708a:	bne.n	70c0 <ExFatFile::rmdir()+0x54>
    708c:	ldrb.w	r3, [sp]
    7090:	lsls	r2, r3, #24
    7092:	bmi.n	70c0 <ExFatFile::rmdir()+0x54>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (dir[0] == 0) {
    7094:	cbz	r3, 70a4 <ExFatFile::rmdir()+0x38>
  }
  rewind();

  // make sure directory is empty
  while (1) {
    n = read(dir, 32);
    7096:	movs	r2, #32
    7098:	mov	r1, sp
    709a:	mov	r0, r4
    709c:	bl	613c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    70a0:	cmp	r0, #0
    70a2:	bne.n	7088 <ExFatFile::rmdir()+0x1c>
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    70a4:	ldrb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    70a8:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
    70aa:	orr.w	r3, r3, #2
    70ae:	strb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    70b2:	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    70b6:	mov	r0, r4
    70b8:	bl	6f94 <ExFatFile::remove()>

fail:
  return false;
}
    70bc:	add	sp, #32
    70be:	pop	{r4, pc}
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    70c0:	movs	r0, #0
}
    70c2:	add	sp, #32
    70c4:	pop	{r4, pc}
    70c6:	nop

000070c8 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    70c8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    70cc:	add.w	fp, r0, #36	; 0x24
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    70d0:	mov	r6, r0
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    70d2:	ldmia.w	fp, {r0, r1, r2}
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    70d6:	sub	sp, #28
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    70d8:	add.w	r8, sp, #12
    70dc:	stmia.w	r8, {r0, r1, r2}
    70e0:	movs	r7, #0
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;
    70e2:	mov	sl, r7
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    70e4:	mov	r4, r7
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    70e6:	movs	r2, #0
    70e8:	mov	r1, r8
    70ea:	ldr	r0, [r6, #32]
    70ec:	bl	6ca4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    70f0:	uxtb.w	r9, r7
    if (!cache) {
    70f4:	mov	r5, r0
    70f6:	cbz	r0, 7106 <ExFatFile::syncDir()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    70f8:	ldrb	r2, [r0, #0]
    70fa:	cmp	r2, #192	; 0xc0
    70fc:	beq.n	71a4 <ExFatFile::syncDir()+0xdc>
    70fe:	cmp	r2, #193	; 0xc1
    7100:	beq.n	711a <ExFatFile::syncDir()+0x52>
    7102:	cmp	r2, #133	; 0x85
    7104:	beq.n	715a <ExFatFile::syncDir()+0x92>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    7106:	ldrb.w	r3, [r6, #50]	; 0x32
    710a:	orr.w	r3, r3, #1
    710e:	strb.w	r3, [r6, #50]	; 0x32
  return false;
    7112:	movs	r0, #0
}
    7114:	add	sp, #28
    7116:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    711a:	mov	r0, r2
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    711c:	movs	r1, #0
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    711e:	ldrb	r2, [r5, r1]
    7120:	lsls	r3, r4, #15
    7122:	orr.w	r4, r3, r4, lsr #1
    7126:	uxtah	r4, r2, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    712a:	cmp	r1, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    712c:	uxth	r4, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    712e:	add.w	r1, r1, #1
    7132:	beq.n	7150 <ExFatFile::syncDir()+0x88>
    7134:	cmp	r1, #31
    7136:	bls.n	711e <ExFatFile::syncDir()+0x56>
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    if (i == setCount) break;
    7138:	cmp	sl, r9
    713a:	beq.n	71e0 <ExFatFile::syncDir()+0x118>
    if (m_vol->dirSeek(&pos, 32) != 1) {
    713c:	movs	r2, #32
    713e:	mov	r1, r8
    7140:	ldr	r0, [r6, #32]
    7142:	bl	6cd8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    7146:	cmp	r0, #1
    7148:	add.w	r7, r7, #1
    714c:	beq.n	70e6 <ExFatFile::syncDir()+0x1e>
    714e:	b.n	7106 <ExFatFile::syncDir()+0x3e>
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    7150:	cmp	r0, #133	; 0x85
    7152:	ite	eq
    7154:	moveq	r1, #4
    7156:	movne	r1, #2
    7158:	b.n	711e <ExFatFile::syncDir()+0x56>
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    715a:	ldr	r3, [pc, #192]	; (721c <ExFatFile::syncDir()+0x154>)
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    715c:	ldrb.w	r1, [r6, #49]	; 0x31
    7160:	ldr	r3, [r3, #0]
      goto fail;
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
    7162:	ldrb.w	sl, [r0, #1]
    7166:	and.w	r1, r1, #55	; 0x37
    716a:	strh	r1, [r0, #4]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    716c:	cmp	r3, #0
    716e:	beq.n	711a <ExFatFile::syncDir()+0x52>
          m_vol->dataCacheDirty();
    7170:	ldr	r1, [r6, #32]
    invalidate();
    return m_cacheBuffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    7172:	ldrb.w	r2, [r1, #524]	; 0x20c
    7176:	orr.w	r2, r2, #1
    717a:	strb.w	r2, [r1, #524]	; 0x20c
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    717e:	add	r0, sp, #8
    7180:	add.w	r2, sp, #7
    7184:	add.w	r1, sp, #10
    7188:	blx	r3
          df->modifyTimeMs = ms10;
          setLe16(df->modifyTime, time);
    718a:	ldrh.w	r2, [sp, #10]
          setLe16(df->modifyDate, date);
    718e:	ldrh.w	r3, [sp, #8]
        if (FsDateTime::callback) {
          m_vol->dataCacheDirty();
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
    7192:	ldrb.w	r1, [sp, #7]
    7196:	strb	r1, [r5, #21]
    7198:	strh	r2, [r5, #12]
    719a:	strh	r2, [r5, #16]
    719c:	strh	r3, [r5, #14]
    719e:	strh	r3, [r5, #18]
    71a0:	ldrb	r0, [r5, #0]
    71a2:	b.n	711c <ExFatFile::syncDir()+0x54>
        }
        break;

      case EXFAT_TYPE_STREAM:
        ds = reinterpret_cast<DirStream_t*>(cache);
        if (isContiguous()) {
    71a4:	ldrb.w	r3, [r6, #51]	; 0x33
    71a8:	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    71ac:	ldrb	r3, [r0, #1]
    71ae:	ite	ne
    71b0:	orrne.w	r3, r3, #2
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    71b4:	biceq.w	r3, r3, #2
    71b8:	strb	r3, [r0, #1]
        }
        setLe64(ds->validLength, m_validLength);
    71ba:	ldrd	r2, r3, [r6, #16]

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    71be:	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
    71c2:	ldrd	r2, r3, [r6, #8]
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
    71c6:	ldr	r1, [r6, #28]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    71c8:	str	r1, [r0, #20]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    71ca:	strd	r2, r3, [r0, #24]
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    71ce:	ldr	r2, [r6, #32]
    71d0:	ldrb.w	r3, [r2, #524]	; 0x20c
    71d4:	orr.w	r3, r3, #1
    71d8:	strb.w	r3, [r2, #524]	; 0x20c
    71dc:	ldrb	r0, [r0, #0]
    71de:	b.n	711c <ExFatFile::syncDir()+0x54>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  df = reinterpret_cast<DirFile_t *>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    71e0:	mov	r1, fp
    71e2:	movs	r2, #1
    71e4:	ldr	r0, [r6, #32]
    71e6:	bl	6ca4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    71ea:	cmp	r0, #0
    71ec:	beq.n	7106 <ExFatFile::syncDir()+0x3e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    71ee:	ldr	r5, [r6, #32]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    71f0:	strh	r4, [r0, #2]
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    71f2:	mov	r0, r5
    71f4:	bl	6a1c <FsCache::sync()>
    71f8:	cmp	r0, #0
    71fa:	beq.n	7106 <ExFatFile::syncDir()+0x3e>
    71fc:	add.w	r0, r5, #524	; 0x20c
    7200:	bl	6a1c <FsCache::sync()>
    7204:	cmp	r0, #0
    7206:	beq.w	7106 <ExFatFile::syncDir()+0x3e>
    720a:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    720e:	ldr	r3, [r0, #0]
    7210:	ldr	r3, [r3, #20]
    7212:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    7214:	cmp	r0, #0
    7216:	beq.w	7106 <ExFatFile::syncDir()+0x3e>
    721a:	b.n	7114 <ExFatFile::syncDir()+0x4c>
    721c:	.word	0x1fff24d4

00007220 <ExFatFile::sync()>:
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    7220:	ldrb.w	r2, [r0, #49]	; 0x31
    7224:	cbz	r2, 724c <ExFatFile::sync()+0x2c>

fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
    7226:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    7228:	ldrb.w	r2, [r0, #51]	; 0x33
    722c:	lsls	r1, r2, #24
    722e:	bmi.n	7250 <ExFatFile::sync()+0x30>
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
  }
  if (!m_vol->cacheSync()) {
    7230:	ldr	r5, [r0, #32]
    7232:	mov	r4, r0
    7234:	mov	r0, r5
    7236:	bl	6a1c <FsCache::sync()>
    723a:	cbnz	r0, 7260 <ExFatFile::sync()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    723c:	ldrb.w	r3, [r4, #50]	; 0x32
    7240:	orr.w	r3, r3, #1
    7244:	strb.w	r3, [r4, #50]	; 0x32
  return false;
    7248:	movs	r0, #0
}
    724a:	pop	{r3, r4, r5, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    724c:	movs	r0, #1
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    724e:	bx	lr
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    7250:	and.w	r2, r2, #127	; 0x7f
    7254:	strb.w	r2, [r0, #51]	; 0x33
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    7258:	ldmia.w	sp!, {r3, r4, r5, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    725c:	b.w	70c8 <ExFatFile::syncDir()>
    7260:	add.w	r0, r5, #524	; 0x20c
    7264:	bl	6a1c <FsCache::sync()>
    7268:	cmp	r0, #0
    726a:	beq.n	723c <ExFatFile::sync()+0x1c>
    726c:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    7270:	ldr	r3, [r0, #0]
    7272:	ldr	r3, [r3, #20]
    7274:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    7276:	cmp	r0, #0
    7278:	beq.n	723c <ExFatFile::sync()+0x1c>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    727a:	movs	r0, #1
    727c:	pop	{r3, r4, r5, pc}
    727e:	nop

00007280 <ExFatFile::addDirCluster()>:

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    7280:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    7284:	ldrb.w	r3, [r0, #49]	; 0x31
    7288:	lsls	r1, r3, #25

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    728a:	mov	r4, r0
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    728c:	bmi.n	7356 <ExFatFile::addDirCluster()+0xd6>
    728e:	ldr	r0, [r0, #8]
    7290:	ldr	r3, [r4, #32]
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    7292:	ldr.w	r3, [r3, #1076]	; 0x434
    7296:	add	r0, r3
    7298:	cmp.w	r0, #67108864	; 0x4000000
    729c:	bcc.n	72a4 <ExFatFile::addDirCluster()+0x24>
  }
  return sync();

 fail:
  return false;
}
    729e:	movs	r0, #0
    72a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    72a4:	mov	r0, r4
    72a6:	bl	6f08 <ExFatFile::addCluster()>
    72aa:	cmp	r0, #0
    72ac:	beq.n	729e <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
    72ae:	ldr	r6, [r4, #32]
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    72b0:	ldrb.w	r3, [r6, #524]	; 0x20c
    72b4:	lsls	r2, r3, #31

  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
    72b6:	add.w	r5, r6, #524	; 0x20c
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    72ba:	bmi.n	735e <ExFatFile::addDirCluster()+0xde>
      return nullptr;
    }
    invalidate();
    72bc:	mov	r0, r5
    return m_cacheBuffer;
    72be:	add.w	r6, r6, #536	; 0x218
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    72c2:	bl	6950 <FsCache::invalidate()>
  if (!cache) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
    72c6:	mov.w	r2, #512	; 0x200
    72ca:	movs	r1, #0
    72cc:	mov	r0, r6
    72ce:	bl	117bc <memset>
  sector = m_vol->clusterStartSector(m_curCluster);
    72d2:	ldr	r2, [r4, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    72d4:	ldr	r3, [r4, #24]
    72d6:	ldrb.w	r0, [r2, #1085]	; 0x43d
    72da:	ldr.w	r1, [r2, #1060]	; 0x424
    72de:	sub.w	r8, r3, #2
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    72e2:	movs	r7, #1
    72e4:	lsl.w	r8, r8, r0
    72e8:	lsls.w	r3, r7, r0
    72ec:	add	r8, r1
    72ee:	it	ne
    72f0:	movne	r5, #0
    72f2:	beq.n	7318 <ExFatFile::addDirCluster()+0x98>
    72f4:	ldr.w	r0, [r2, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    72f8:	ldr	r3, [r0, #0]
    72fa:	add.w	r1, r8, r5
    72fe:	ldr	r3, [r3, #24]
    7300:	mov	r2, r6
    7302:	blx	r3
    7304:	adds	r5, #1
    if (!m_vol->writeSector(sector + i, cache)) {
    7306:	cmp	r0, #0
    7308:	beq.n	729e <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
  sector = m_vol->clusterStartSector(m_curCluster);
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    730a:	ldr	r2, [r4, #32]
    730c:	ldrb.w	r3, [r2, #1085]	; 0x43d
    7310:	lsl.w	r3, r7, r3
    7314:	cmp	r3, r5
    7316:	bhi.n	72f4 <ExFatFile::addDirCluster()+0x74>
    if (!m_vol->writeSector(sector + i, cache)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    7318:	ldrb.w	r3, [r4, #49]	; 0x31
    731c:	lsls	r3, r3, #25
    731e:	bmi.n	734c <ExFatFile::addDirCluster()+0xcc>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    7320:	ldrb.w	r3, [r4, #51]	; 0x33
    7324:	orn	r3, r3, #127	; 0x7f
    7328:	strb.w	r3, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    732c:	ldr.w	r6, [r2, #1076]	; 0x434
    7330:	ldrd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    7334:	ldrd	r0, r1, [r4, #16]
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    7338:	adds	r2, r2, r6
    733a:	mov.w	r7, #0
    733e:	adcs	r3, r7
    m_validLength += m_vol->bytesPerCluster();
    7340:	adds	r0, r0, r6
    7342:	adcs	r1, r7
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    7344:	strd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    7348:	strd	r0, r1, [r4, #16]
  }
  return sync();
    734c:	mov	r0, r4

 fail:
  return false;
}
    734e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    m_validLength += m_vol->bytesPerCluster();
  }
  return sync();
    7352:	b.w	7220 <ExFatFile::sync()>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    7356:	ldr	r0, [r0, #32]
    7358:	bl	6e5c <ExFatPartition::rootLength()>
    735c:	b.n	7290 <ExFatFile::addDirCluster()+0x10>
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    735e:	mov	r0, r5
    7360:	bl	6a1c <FsCache::sync()>
    7364:	cmp	r0, #0
    7366:	bne.n	72bc <ExFatFile::addDirCluster()+0x3c>
    7368:	b.n	729e <ExFatFile::addDirCluster()+0x1e>
    736a:	nop

0000736c <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
  if (!parent->isDir()) {
    736c:	ldrb.w	r3, [r1, #49]	; 0x31
    7370:	tst.w	r3, #80	; 0x50
    7374:	bne.n	737a <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    7376:	movs	r0, #0
    7378:	bx	lr

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    737a:	push	{r4, r5, lr}
    737c:	sub	sp, #12
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    737e:	movw	r5, #2562	; 0xa02
    7382:	ldrb	r3, [r2, #0]
    7384:	ldr	r2, [r2, #4]
    7386:	str	r5, [sp, #0]
    7388:	mov	r4, r0
    738a:	bl	640c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    738e:	cbnz	r0, 7396 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x2a>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    7390:	movs	r0, #0
    7392:	add	sp, #12
    7394:	pop	{r4, r5, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory

  m_attributes = FILE_ATTR_SUBDIR;
    7396:	movs	r3, #16
    7398:	strb.w	r3, [r4, #49]	; 0x31

  // allocate and zero first cluster
  if (!addDirCluster()) {
    739c:	mov	r0, r4
    739e:	bl	7280 <ExFatFile::addDirCluster()>
    73a2:	cmp	r0, #0
    73a4:	beq.n	7390 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x24>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    73a6:	ldr	r3, [r4, #24]
    73a8:	str	r3, [r4, #28]
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    73aa:	movs	r2, #0
    73ac:	movs	r3, #0
    73ae:	mov	r0, r4
    73b0:	bl	630c <ExFatFile::seekSet(unsigned long long)>

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    73b4:	movs	r3, #193	; 0xc1
  return sync();
    73b6:	mov	r0, r4
  }
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    73b8:	strb.w	r3, [r4, #51]	; 0x33
  return sync();

fail:
  return false;
}
    73bc:	add	sp, #12
    73be:	ldmia.w	sp!, {r4, r5, lr}
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();
    73c2:	b.w	7220 <ExFatFile::sync()>
    73c6:	nop

000073c8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    73c8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    73cc:	mov	r6, r0
    73ce:	sub	sp, #84	; 0x54
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    73d0:	ldrb.w	r5, [r6, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    73d4:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    73d6:	movs	r0, #0
    73d8:	strb.w	r0, [sp, #73]	; 0x49
    73dc:	strb.w	r0, [sp, #74]	; 0x4a
    73e0:	strb.w	r0, [sp, #75]	; 0x4b
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    73e4:	cbnz	r5, 73f4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    73e6:	mov	r9, r3
    73e8:	ldrb.w	r3, [r1, #49]	; 0x31
    73ec:	tst.w	r3, #80	; 0x50
    73f0:	mov	r4, r1
    73f2:	bne.n	73fc <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x34>
    close();
  }
  return mkdir(parent, &fname);

fail:
  return false;
    73f4:	movs	r0, #0
}
    73f6:	add	sp, #84	; 0x54
    73f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    73fc:	ldrb	r3, [r2, #0]
    73fe:	cmp	r3, #47	; 0x2f
    7400:	mov	r1, r2
    7402:	beq.n	7472 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xaa>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    7404:	mov.w	r8, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    7408:	add	r3, sp, #12
    740a:	add	r2, sp, #16
    740c:	mov	r0, r6
    740e:	bl	6078 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    7412:	cmp	r0, #0
    7414:	beq.n	73f4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    7416:	ldr	r3, [sp, #12]
    7418:	ldrb	r3, [r3, #0]
    741a:	cmp	r3, #0
    741c:	beq.n	748e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc6>
    741e:	ldrb.w	r3, [sp, #16]
    7422:	ldr	r2, [sp, #20]
    7424:	str.w	r8, [sp]
    7428:	mov	r1, r4
    742a:	mov	r0, r6
    742c:	bl	640c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    7430:	cbnz	r0, 7446 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x7e>
      if (!pFlag || !mkdir(parent, &fname)) {
    7432:	cmp.w	r9, #0
    7436:	beq.n	73f4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    7438:	mov	r1, r4
    743a:	add	r2, sp, #16
    743c:	mov	r0, r6
    743e:	bl	736c <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    7442:	cmp	r0, #0
    7444:	beq.n	73f4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    7446:	mov	r4, r6
    7448:	add	r7, sp, #24
    744a:	add.w	lr, r6, #48	; 0x30
    744e:	ldr	r0, [r4, #0]
    7450:	ldr	r1, [r4, #4]
    7452:	ldr	r2, [r4, #8]
    7454:	ldr	r3, [r4, #12]
    7456:	mov	r5, r7
    7458:	stmia	r5!, {r0, r1, r2, r3}
    745a:	adds	r4, #16
    745c:	cmp	r4, lr
    745e:	mov	r7, r5
    7460:	bne.n	744e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x86>
    7462:	ldr	r0, [r4, #0]
    7464:	str	r0, [r5, #0]
    parent = &tmpDir;
    close();
    7466:	mov	r0, r6
    7468:	bl	5f94 <ExFatFile::close()>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    746c:	add	r4, sp, #24
    746e:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    7470:	b.n	7408 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    7472:	adds	r1, #1
    7474:	str	r1, [sp, #12]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    7476:	ldrb	r3, [r1, #0]
    7478:	cmp	r3, #47	; 0x2f
    747a:	beq.n	7472 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xaa>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    747c:	ldr	r1, [r4, #32]
    747e:	add	r0, sp, #24
    7480:	bl	6050 <ExFatFile::openRoot(ExFatVolume*)>
    7484:	cmp	r0, #0
    7486:	beq.n	73f4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    7488:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    748a:	add	r4, sp, #24
    748c:	b.n	7404 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3c>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    748e:	add	r2, sp, #16
    7490:	mov	r1, r4
    7492:	mov	r0, r6
    7494:	bl	736c <ExFatFile::mkdir(ExFatFile*, ExName_t*)>

fail:
  return false;
}
    7498:	add	sp, #84	; 0x54
    749a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    749e:	nop

000074a0 <ExFatFile::rename(ExFatFile*, char const*)>:
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    74a0:	push	{r4, r5, r6, r7, lr}
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    74a2:	ldrb.w	r4, [r0, #49]	; 0x31
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    74a6:	sub	sp, #116	; 0x74
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    74a8:	movs	r3, #0
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    74aa:	tst.w	r4, #24
    74ae:	strb.w	r3, [sp, #49]	; 0x31
    74b2:	strb.w	r3, [sp, #50]	; 0x32
    74b6:	strb.w	r3, [sp, #51]	; 0x33
    74ba:	strb.w	r3, [sp, #105]	; 0x69
    74be:	strb.w	r3, [sp, #106]	; 0x6a
    74c2:	strb.w	r3, [sp, #107]	; 0x6b
    74c6:	beq.n	74d0 <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    74c8:	ldr	r3, [r1, #32]
    74ca:	ldr	r4, [r0, #32]
    74cc:	cmp	r4, r3
    74ce:	beq.n	74d6 <ExFatFile::rename(ExFatFile*, char const*)+0x36>
  oldFile.m_flags = FILE_FLAG_WRITE;
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

fail:
  return false;
    74d0:	movs	r0, #0
}
    74d2:	add	sp, #116	; 0x74
    74d4:	pop	{r4, r5, r6, r7, pc}
    74d6:	mov	r4, r0
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    74d8:	movw	r3, #2561	; 0xa01
    74dc:	mov	r0, sp
    74de:	bl	67e0 <ExFatFile::open(ExFatFile*, char const*, int)>
    74e2:	cmp	r0, #0
    74e4:	beq.n	74d0 <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
    74e6:	add	r7, sp, #56	; 0x38
    74e8:	mov	r5, r4
    74ea:	add.w	lr, r4, #48	; 0x30
    74ee:	ldr	r0, [r5, #0]
    74f0:	ldr	r1, [r5, #4]
    74f2:	ldr	r2, [r5, #8]
    74f4:	ldr	r3, [r5, #12]
    74f6:	mov	r6, r7
    74f8:	stmia	r6!, {r0, r1, r2, r3}
    74fa:	adds	r5, #16
    74fc:	cmp	r5, lr
    74fe:	mov	r7, r6
    7500:	bne.n	74ee <ExFatFile::rename(ExFatFile*, char const*)+0x4e>
    7502:	ldr	r0, [r5, #0]
    7504:	str	r0, [r6, #0]
  m_dirPos = file.m_dirPos;
    7506:	add	r3, sp, #36	; 0x24
    7508:	ldmia.w	r3, {r0, r1, r2}
    750c:	add.w	r3, r4, #36	; 0x24
    7510:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7514:	ldrb.w	r3, [r4, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
    7518:	ldrb.w	r2, [sp, #48]	; 0x30
    751c:	strb.w	r2, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7520:	orn	r3, r3, #127	; 0x7f
    7524:	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    7528:	mov	r0, r4
    752a:	bl	7220 <ExFatFile::sync()>
    752e:	cmp	r0, #0
    7530:	beq.n	74d0 <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    7532:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    7534:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    7536:	movs	r3, #8
  return oldFile.remove();
    7538:	add	r0, sp, #56	; 0x38
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    753a:	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    753c:	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    7540:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    7544:	bl	6f94 <ExFatFile::remove()>
    7548:	b.n	74d2 <ExFatFile::rename(ExFatFile*, char const*)+0x32>
    754a:	nop

0000754c <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    754c:	ldrb.w	r3, [r0, #51]	; 0x33
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    7550:	lsls	r2, r3, #30
    7552:	bpl.n	7586 <ExFatFile::truncate()+0x3a>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    7554:	push	{r4, r5, r6, r7, lr}
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    7556:	ldr	r5, [r0, #28]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    7558:	sub	sp, #12
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    755a:	cbz	r5, 7580 <ExFatFile::truncate()+0x34>
      return true;
  }
  if (isContiguous()) {
    755c:	and.w	r3, r3, #64	; 0x40
    7560:	mov	r4, r0
    7562:	and.w	r0, r3, #255	; 0xff
    7566:	cbnz	r3, 758a <ExFatFile::truncate()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
    7568:	ldr	r1, [r4, #24]
    756a:	cmp	r1, #0
    756c:	bne.n	75f2 <ExFatFile::truncate()+0xa6>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else {
      toFree = m_firstCluster;
    756e:	str	r5, [sp, #4]
      m_firstCluster = 0;
    7570:	str	r1, [r4, #28]
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
    7572:	mov	r1, r5
    7574:	ldr	r0, [r4, #32]
    7576:	bl	6d68 <ExFatPartition::freeChain(unsigned long)>
    757a:	cbnz	r0, 75ca <ExFatFile::truncate()+0x7e>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    757c:	movs	r0, #0
    757e:	b.n	7582 <ExFatFile::truncate()+0x36>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    7580:	movs	r0, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    7582:	add	sp, #12
    7584:	pop	{r4, r5, r6, r7, pc}
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    7586:	movs	r0, #0
}
    7588:	bx	lr
    758a:	ldr	r0, [r4, #32]
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
    758c:	ldr	r1, [r4, #24]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    758e:	ldrb.w	r3, [r0, #1085]	; 0x43d
    7592:	ldrd	r6, r7, [r4, #8]
    7596:	adds	r3, #9
    7598:	uxtb	r3, r3
    759a:	adds.w	r6, r6, #4294967295
    759e:	rsb	lr, r3, #32
    75a2:	adc.w	r7, r7, #4294967295
    75a6:	lsr.w	r2, r6, r3
    75aa:	lsl.w	lr, r7, lr
    75ae:	subs	r3, #32
    75b0:	orr.w	r2, r2, lr
    75b4:	lsr.w	r3, r7, r3
    75b8:	orrs	r2, r3
    75ba:	adds	r2, #1
    if (m_curCluster) {
    75bc:	cbz	r1, 75ec <ExFatFile::truncate()+0xa0>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    75be:	subs	r5, #1
    75c0:	subs	r5, r5, r1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    75c2:	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    75c4:	add	r2, r5
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    75c6:	str	r1, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    75c8:	cbnz	r2, 760e <ExFatFile::truncate()+0xc2>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    75ca:	ldrd	r0, r1, [r4]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    75ce:	ldrb.w	r3, [r4, #51]	; 0x33
    75d2:	orn	r3, r3, #127	; 0x7f
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    75d6:	strd	r0, r1, [r4, #8]
  m_validLength = m_curPosition;
    75da:	strd	r0, r1, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    75de:	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    75e2:	mov	r0, r4
    75e4:	bl	7220 <ExFatFile::sync()>

 fail:
  return false;
}
    75e8:	add	sp, #12
    75ea:	pop	{r4, r5, r6, r7, pc}
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
    75ec:	str	r5, [sp, #4]
      m_firstCluster = 0;
    75ee:	str	r1, [r4, #28]
    75f0:	b.n	75c8 <ExFatFile::truncate()+0x7c>
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    75f2:	add	r2, sp, #8
    75f4:	str.w	r0, [r2, #-4]!
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    75f8:	ldr	r0, [r4, #32]
    75fa:	bl	6d30 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    75fe:	sxtb	r0, r0
      if (fg < 0) {
    7600:	cmp	r0, #0
    7602:	blt.n	757c <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
    7604:	bne.n	761c <ExFatFile::truncate()+0xd0>
      }
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
    7606:	ldr	r5, [sp, #4]
    7608:	cmp	r5, #0
    760a:	beq.n	75ca <ExFatFile::truncate()+0x7e>
    760c:	b.n	7572 <ExFatFile::truncate()+0x26>
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    760e:	movs	r3, #0
    7610:	ldr	r1, [sp, #4]
    7612:	bl	6bc0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    7616:	cmp	r0, #0
    7618:	bne.n	75ca <ExFatFile::truncate()+0x7e>
    761a:	b.n	757c <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
        // current cluster is end of chain
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    761c:	mov.w	r2, #4294967295
    7620:	ldr	r1, [r4, #24]
    7622:	ldr	r0, [r4, #32]
    7624:	bl	6d44 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    7628:	cmp	r0, #0
    762a:	bne.n	7606 <ExFatFile::truncate()+0xba>
    762c:	b.n	757c <ExFatFile::truncate()+0x30>
    762e:	nop

00007630 <ExFatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    7630:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7634:	ldrb.w	r3, [r0, #51]	; 0x33
    7638:	sub	sp, #20

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    763a:	lsls	r4, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    763c:	mov	r6, r0
    763e:	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    7640:	bmi.n	7658 <ExFatFile::write(void const*, unsigned int)+0x28>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    7642:	ldrb.w	r3, [r6, #50]	; 0x32
    7646:	orr.w	r3, r3, #1
    764a:	strb.w	r3, [r6, #50]	; 0x32
  return -1;
    764e:	mov.w	r0, #4294967295
}
    7652:	add	sp, #20
    7654:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    7658:	lsls	r2, r3, #28
    765a:	mov	sl, r1
    765c:	bmi.w	7884 <ExFatFile::write(void const*, unsigned int)+0x254>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    7660:	ldr	r3, [sp, #4]
    7662:	cmp	r3, #0
    7664:	beq.w	78ac <ExFatFile::write(void const*, unsigned int)+0x27c>
    7668:	mov	r1, r6
    766a:	ldrd	r2, r3, [r1], #24
    766e:	ldr.w	r8, [sp, #4]
    7672:	str	r1, [sp, #12]
    7674:	mov	fp, r2
    clusterOffset = m_curPosition & m_vol->clusterMask();
    7676:	ldr	r0, [r6, #32]
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    7678:	ldr	r5, [r6, #24]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    767a:	ldr.w	r4, [r0, #1072]	; 0x430
    767e:	mov	r3, fp
    7680:	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    7682:	ubfx	r9, r4, #0, #9
    if (clusterOffset == 0) {
    7686:	cbnz	r4, 76dc <ExFatFile::write(void const*, unsigned int)+0xac>
      // start of new cluster
      if (m_curCluster != 0) {
    7688:	cmp	r5, #0
    768a:	beq.w	780a <ExFatFile::write(void const*, unsigned int)+0x1da>
        int fg;

        if (isContiguous()) {
    768e:	ldrb.w	r3, [r6, #51]	; 0x33
    7692:	lsls	r3, r3, #25
    7694:	bpl.w	7852 <ExFatFile::write(void const*, unsigned int)+0x222>
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    7698:	ldrd	r2, r3, [r6, #8]
    769c:	ldrb.w	r7, [r0, #1085]	; 0x43d
    76a0:	adds	r7, #9
    76a2:	uxtb	r7, r7
    76a4:	adds.w	r2, r2, #4294967295
    76a8:	adc.w	r3, r3, #4294967295
    76ac:	rsb	lr, r7, #32
    76b0:	lsl.w	lr, r3, lr
    76b4:	lsr.w	r1, r2, r7
    76b8:	subs	r7, #32
    76ba:	lsr.w	r7, r3, r7
    76be:	orr.w	r1, r1, lr
    76c2:	ldr	r3, [r6, #28]
    76c4:	orrs	r1, r7
    76c6:	add	r3, r1
    76c8:	cmp	r5, r3
    76ca:	bcc.w	7838 <ExFatFile::write(void const*, unsigned int)+0x208>
            goto fail;
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
    76ce:	mov	r0, r6
    76d0:	bl	6f08 <ExFatFile::addCluster()>
    76d4:	cmp	r0, #0
    76d6:	beq.n	7642 <ExFatFile::write(void const*, unsigned int)+0x12>
    76d8:	ldr	r0, [r6, #32]
    76da:	ldr	r5, [r6, #24]
        }
      }
    }
    // sector for data write
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    76dc:	ldr.w	r7, [r0, #1060]	; 0x424
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    76e0:	ldrb.w	lr, [r0, #1085]	; 0x43d
    76e4:	lsrs	r4, r4, #9
    76e6:	subs	r5, #2
    76e8:	adds	r1, r4, r7
    76ea:	lsl.w	r5, r5, lr
    76ee:	add	r1, r5

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    76f0:	cmp.w	r9, #0
    76f4:	bne.w	77fc <ExFatFile::write(void const*, unsigned int)+0x1cc>
    76f8:	cmp.w	r8, #512	; 0x200
    76fc:	bcs.n	77ae <ExFatFile::write(void const*, unsigned int)+0x17e>
      // lesser of space and amount to write
      if (n > toWrite) {
        n = toWrite;
      }

      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    76fe:	ldrd	r2, r3, [r6, #16]
    7702:	ldrd	r4, r5, [r6]
    7706:	cmp.w	r8, #512	; 0x200
    770a:	mov	r7, r8
    770c:	it	cs
    770e:	movcs.w	r7, #512	; 0x200
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    7712:	cmp	r5, r3
    7714:	it	eq
    7716:	cmpeq	r4, r2
    7718:	ite	cc
    771a:	movcc	r2, #1
    771c:	movcs	r2, #3
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    771e:	add.w	r0, r0, #524	; 0x20c
    7722:	bl	695c <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    7726:	cmp	r0, #0
    7728:	beq.n	7642 <ExFatFile::write(void const*, unsigned int)+0x12>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    772a:	add	r0, r9
    772c:	mov	r2, r7
    772e:	mov	r1, sl
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    7730:	add	r9, r7
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    7732:	bl	e8e8 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    7736:	cmp.w	r9, #512	; 0x200
    773a:	beq.w	7862 <ExFatFile::write(void const*, unsigned int)+0x232>
    773e:	mov	r0, r7
    7740:	movs	r1, #0
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    7742:	ldrd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    7746:	ldrd	r4, r5, [r6, #16]
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    774a:	adds.w	fp, r2, r0
    774e:	adc.w	ip, r3, r1
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    7752:	cmp	r5, ip
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    7754:	mov	r2, fp
    7756:	mov	r3, ip
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    7758:	it	eq
    775a:	cmpeq	r4, fp
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    775c:	add	sl, r7
    toWrite -= n;
    775e:	rsb	r8, r7, r8
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    7762:	strd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    7766:	bcs.n	777c <ExFatFile::write(void const*, unsigned int)+0x14c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    7768:	ldrb.w	r1, [r6, #51]	; 0x33
      m_validLength = m_curPosition;
    776c:	mov	r4, ip
    776e:	mov	r3, fp
    7770:	strd	r3, r4, [r6, #16]
    }
    m_curPosition += n;
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
    7774:	orn	r1, r1, #127	; 0x7f
    7778:	strb.w	r1, [r6, #51]	; 0x33
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    777c:	cmp.w	r8, #0
    7780:	bne.w	7676 <ExFatFile::write(void const*, unsigned int)+0x46>
    7784:	mov	r2, fp
    7786:	mov	r3, ip
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    7788:	ldrd	r0, r1, [r6, #8]
    778c:	cmp	r1, r3
    778e:	it	eq
    7790:	cmpeq	r0, r2
    7792:	bcc.n	7894 <ExFatFile::write(void const*, unsigned int)+0x264>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    7794:	ldr	r3, [pc, #284]	; (78b4 <ExFatFile::write(void const*, unsigned int)+0x284>)
    7796:	ldr	r3, [r3, #0]
    7798:	cmp	r3, #0
    779a:	beq.w	78a8 <ExFatFile::write(void const*, unsigned int)+0x278>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    779e:	ldrb.w	r3, [r6, #51]	; 0x33
    77a2:	ldr	r0, [sp, #4]
    77a4:	orn	r3, r3, #127	; 0x7f
    77a8:	strb.w	r3, [r6, #51]	; 0x33
    77ac:	b.n	7652 <ExFatFile::write(void const*, unsigned int)+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    77ae:	cmp.w	r8, #1024	; 0x400
    77b2:	bcc.n	7812 <ExFatFile::write(void const*, unsigned int)+0x1e2>
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    77b4:	movs	r3, #1
    77b6:	lsl.w	lr, r3, lr
    77ba:	rsb	lr, r4, lr
    77be:	ldr.w	r3, [r0, #532]	; 0x214
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    77c2:	mov.w	r4, r8, lsr #9
    77c6:	cmp	r4, lr
    77c8:	it	cs
    77ca:	movcs	r4, lr
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    77cc:	cmp	r1, r3
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    77ce:	mov.w	r7, r4, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    77d2:	bhi.n	77e8 <ExFatFile::write(void const*, unsigned int)+0x1b8>
    77d4:	adds	r2, r4, r1
    77d6:	cmp	r2, r3
    77d8:	bls.n	77e8 <ExFatFile::write(void const*, unsigned int)+0x1b8>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    77da:	add.w	r0, r0, #524	; 0x20c
    77de:	str	r1, [sp, #8]
    77e0:	bl	6950 <FsCache::invalidate()>
    77e4:	ldr	r0, [r6, #32]
    77e6:	ldr	r1, [sp, #8]
    77e8:	ldr.w	r0, [r0, #1080]	; 0x438
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t count) {
    return m_blockDev->writeSectors(sector, src, count);
    77ec:	ldr	r5, [r0, #0]
    77ee:	mov	r3, r4
    77f0:	mov	r2, sl
    77f2:	ldr	r4, [r5, #28]
    77f4:	blx	r4
        // Invalidate cache if cache sector is in the range.
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, ns)) {
    77f6:	cmp	r0, #0
    77f8:	bne.n	773e <ExFatFile::write(void const*, unsigned int)+0x10e>
    77fa:	b.n	7642 <ExFatFile::write(void const*, unsigned int)+0x12>
             (clusterOffset >> m_vol->bytesPerSectorShift());

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    77fc:	rsb	r7, r9, #512	; 0x200
    7800:	cmp	r7, r8
    7802:	it	cs
    7804:	movcs	r7, r8
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    7806:	movs	r2, #1
    7808:	b.n	771e <ExFatFile::write(void const*, unsigned int)+0xee>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    780a:	ldr	r5, [r6, #28]
    780c:	cbz	r5, 783e <ExFatFile::write(void const*, unsigned int)+0x20e>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    780e:	str	r5, [r6, #24]
    7810:	b.n	76dc <ExFatFile::write(void const*, unsigned int)+0xac>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->dataCacheSector() == sector) {
    7812:	ldr.w	r3, [r0, #532]	; 0x214
    7816:	cmp	r1, r3
    7818:	beq.n	7874 <ExFatFile::write(void const*, unsigned int)+0x244>
    781a:	ldr.w	r0, [r0, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    781e:	ldr	r3, [r0, #0]
    7820:	mov	r2, sl
    7822:	ldr	r3, [r3, #24]
    7824:	blx	r3
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    7826:	cmp	r0, #0
    7828:	beq.w	7642 <ExFatFile::write(void const*, unsigned int)+0x12>
    782c:	mov.w	r0, #512	; 0x200
    7830:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    7832:	mov.w	r7, #512	; 0x200
    7836:	b.n	7742 <ExFatFile::write(void const*, unsigned int)+0x112>

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
            m_curCluster++;
    7838:	adds	r5, #1
    783a:	str	r5, [r6, #24]
    783c:	b.n	76dc <ExFatFile::write(void const*, unsigned int)+0xac>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    783e:	mov	r0, r6
    7840:	bl	6f08 <ExFatFile::addCluster()>
    7844:	cmp	r0, #0
    7846:	beq.w	7642 <ExFatFile::write(void const*, unsigned int)+0x12>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    784a:	ldr	r5, [r6, #24]
    784c:	str	r5, [r6, #28]
    784e:	ldr	r0, [r6, #32]
    7850:	b.n	76dc <ExFatFile::write(void const*, unsigned int)+0xac>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7852:	mov	r1, r5
    7854:	ldr	r2, [sp, #12]
    7856:	bl	6d30 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
        if (fg == 0) {
    785a:	cmp	r0, #0
    785c:	bne.w	76d8 <ExFatFile::write(void const*, unsigned int)+0xa8>
    7860:	b.n	76ce <ExFatFile::write(void const*, unsigned int)+0x9e>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    7862:	ldr	r0, [r6, #32]
    7864:	add.w	r0, r0, #524	; 0x20c
    7868:	bl	6a1c <FsCache::sync()>
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->dataCacheSync()) {
    786c:	cmp	r0, #0
    786e:	bne.w	773e <ExFatFile::write(void const*, unsigned int)+0x10e>
    7872:	b.n	7642 <ExFatFile::write(void const*, unsigned int)+0x12>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    7874:	add.w	r0, r0, #524	; 0x20c
    7878:	str	r1, [sp, #8]
    787a:	bl	6950 <FsCache::invalidate()>
    787e:	ldr	r0, [r6, #32]
    7880:	ldr	r1, [sp, #8]
    7882:	b.n	781a <ExFatFile::write(void const*, unsigned int)+0x1ea>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_validLength)) {
    7884:	ldrd	r2, r3, [r0, #16]
    7888:	bl	630c <ExFatFile::seekSet(unsigned long long)>
    788c:	cmp	r0, #0
    788e:	beq.w	7642 <ExFatFile::write(void const*, unsigned int)+0x12>
    7892:	b.n	7660 <ExFatFile::write(void const*, unsigned int)+0x30>
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    7894:	ldrb.w	r1, [r6, #51]	; 0x33
    7898:	ldr	r0, [sp, #4]
    789a:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    789e:	strd	r2, r3, [r6, #8]
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    78a2:	strb.w	r1, [r6, #51]	; 0x33
    78a6:	b.n	7652 <ExFatFile::write(void const*, unsigned int)+0x22>
    78a8:	ldr	r0, [sp, #4]
    78aa:	b.n	7652 <ExFatFile::write(void const*, unsigned int)+0x22>
    78ac:	ldrd	r2, r3, [r6]
    78b0:	b.n	7788 <ExFatFile::write(void const*, unsigned int)+0x158>
    78b2:	nop
    78b4:	.word	0x1fff24d4

000078b8 <FatFile::openRoot(FatVolume*) [clone .part.36]>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    78b8:	push	{r3, r4, r5, lr}
    78ba:	mov	r4, r0
    78bc:	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    78be:	movs	r2, #36	; 0x24
    78c0:	movs	r1, #0
    78c2:	bl	117bc <memset>

  m_vol = vol;
    78c6:	str	r5, [r4, #8]
  switch (vol->fatType()) {
    78c8:	ldrb	r3, [r5, #7]
    78ca:	cmp	r3, #16
    78cc:	beq.n	78e0 <FatFile::openRoot(FatVolume*) [clone .part.36]+0x28>
    78ce:	cmp	r3, #32
    78d0:	bne.n	78dc <FatFile::openRoot(FatVolume*) [clone .part.36]+0x24>
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    78d2:	movs	r3, #64	; 0x40
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    78d4:	movs	r0, #1
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    78d6:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    78d8:	strb	r0, [r4, #2]
    78da:	pop	{r3, r4, r5, pc}
  return true;

fail:
  return false;
    78dc:	movs	r0, #0
}
    78de:	pop	{r3, r4, r5, pc}
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    78e0:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    78e2:	movs	r0, #1
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    78e4:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    78e6:	strb	r0, [r4, #2]
    78e8:	pop	{r3, r4, r5, pc}
    78ea:	nop

000078ec <FatFile::addCluster()>:
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    78ec:	mov	r2, r0
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    78ee:	push	{r3, r4, r5, lr}
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    78f0:	ldr.w	r5, [r2, #16]!
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    78f4:	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    78f6:	mov	r1, r5
    78f8:	ldr	r0, [r0, #8]
    78fa:	bl	8730 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    78fe:	cbz	r0, 7916 <FatFile::addCluster()+0x2a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    7900:	cbz	r5, 7918 <FatFile::addCluster()+0x2c>
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    7902:	ldr	r3, [r4, #16]
    7904:	adds	r5, #1
    7906:	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    7908:	ldrb	r3, [r4, #2]
    790a:	it	ne
    790c:	andne.w	r3, r3, #191	; 0xbf
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7910:	orn	r3, r3, #127	; 0x7f
    7914:	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    7916:	pop	{r3, r4, r5, pc}
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    7918:	ldrb	r3, [r4, #2]
    791a:	orr.w	r3, r3, #64	; 0x40
    791e:	b.n	7910 <FatFile::addCluster()+0x24>

00007920 <FatFile::addDirCluster()>:
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    7920:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    7924:	ldrb	r3, [r0, #0]
    7926:	and.w	r3, r3, #32
    792a:	cbnz	r3, 7938 <FatFile::addDirCluster()+0x18>
    792c:	and.w	r4, r3, #255	; 0xff
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    7930:	ldr	r1, [r0, #20]
    7932:	ldr	r3, [pc, #124]	; (79b0 <FatFile::addDirCluster()+0x90>)
    7934:	cmp	r1, r3
    7936:	bls.n	7940 <FatFile::addDirCluster()+0x20>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    7938:	movs	r6, #0
}
    793a:	mov	r0, r6
    793c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7940:	mov	r5, r0
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    7942:	bl	78ec <FatFile::addCluster()>
    7946:	mov	r6, r0
    7948:	cmp	r0, #0
    794a:	beq.n	7938 <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    794c:	ldr	r1, [r5, #16]
    794e:	ldr	r0, [r5, #8]
    7950:	bl	864c <FatPartition::clusterStartSector(unsigned long) const>
    7954:	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    7956:	ldr	r0, [r5, #8]
    7958:	mov	r1, r7
    795a:	adds	r0, #40	; 0x28
    795c:	movs	r2, #5
    795e:	bl	85dc <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    7962:	mov	r8, r0
    7964:	cmp	r0, #0
    7966:	beq.n	7938 <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
    7968:	mov.w	r2, #512	; 0x200
    796c:	mov	r1, r4
    796e:	bl	117bc <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    7972:	ldr	r3, [r5, #8]
    7974:	ldrb	r2, [r3, #4]
    7976:	cmp	r2, #1
    7978:	bls.n	799c <FatFile::addDirCluster()+0x7c>
    797a:	movs	r4, #1
    797c:	b.n	7986 <FatFile::addDirCluster()+0x66>
    797e:	ldr	r3, [r5, #8]
    7980:	ldrb	r2, [r3, #4]
    7982:	cmp	r2, r4
    7984:	bls.n	799c <FatFile::addDirCluster()+0x7c>
    7986:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    7988:	ldr	r3, [r0, #0]
    798a:	adds	r1, r4, r7
    798c:	ldr	r3, [r3, #24]
    798e:	mov	r2, r8
    7990:	blx	r3
    7992:	adds	r4, #1
    7994:	uxtb	r4, r4
    if (!m_vol->writeSector(sector + i, pc->data)) {
    7996:	cmp	r0, #0
    7998:	bne.n	797e <FatFile::addDirCluster()+0x5e>
    799a:	b.n	7938 <FatFile::addDirCluster()+0x18>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    799c:	ldrb	r3, [r3, #6]
    799e:	ldr	r1, [r5, #20]
    79a0:	mov.w	r2, #512	; 0x200
    79a4:	lsl.w	r3, r2, r3
    79a8:	uxtah	r3, r1, r3
    79ac:	str	r3, [r5, #20]
    79ae:	b.n	793a <FatFile::addDirCluster()+0x1a>
    79b0:	.word	0x001ffdff

000079b4 <FatFile::cacheDirEntry(unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    79b4:	push	{r4, lr}
    79b6:	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    79b8:	ldr	r0, [r0, #8]
    79ba:	mov	r2, r1
    79bc:	adds	r0, #40	; 0x28
    79be:	ldr	r1, [r4, #24]
    79c0:	bl	85dc <FatCache::read(unsigned long, unsigned char)>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    79c4:	cbz	r0, 79d0 <FatFile::cacheDirEntry(unsigned char)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    79c6:	ldrh	r3, [r4, #4]
    79c8:	and.w	r3, r3, #15
    79cc:	add.w	r0, r0, r3, lsl #5

fail:
  return nullptr;
}
    79d0:	pop	{r4, pc}
    79d2:	nop

000079d4 <FatFile::sync() [clone .part.40]>:
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    79d4:	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    79d6:	ldrsb.w	r3, [r0, #2]
    79da:	cmp	r3, #0
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    79dc:	sub	sp, #8
    79de:	mov	r4, r0
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    79e0:	blt.n	7a16 <FatFile::sync() [clone .part.40]+0x42>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    79e2:	ldr	r5, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    79e4:	add.w	r0, r5, #40	; 0x28
    79e8:	bl	863c <FatCache::sync()>
    79ec:	cbnz	r0, 79fc <FatFile::sync() [clone .part.40]+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    79ee:	ldrb	r3, [r4, #1]
    79f0:	orr.w	r3, r3, #1
    79f4:	strb	r3, [r4, #1]
  return false;
    79f6:	movs	r0, #0
}
    79f8:	add	sp, #8
    79fa:	pop	{r4, r5, r6, pc}
    79fc:	add.w	r0, r5, #564	; 0x234
    7a00:	bl	863c <FatCache::sync()>
    7a04:	cmp	r0, #0
    7a06:	beq.n	79ee <FatFile::sync() [clone .part.40]+0x1a>
    7a08:	ldr	r0, [r5, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    7a0a:	ldr	r3, [r0, #0]
    7a0c:	ldr	r3, [r3, #20]
    7a0e:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7a10:	cmp	r0, #0
    7a12:	beq.n	79ee <FatFile::sync() [clone .part.40]+0x1a>
    7a14:	b.n	79f8 <FatFile::sync() [clone .part.40]+0x24>
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    7a16:	movs	r1, #1
    7a18:	bl	79b4 <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    7a1c:	mov	r5, r0
    7a1e:	cmp	r0, #0
    7a20:	beq.n	79ee <FatFile::sync() [clone .part.40]+0x1a>
    7a22:	ldrb	r3, [r0, #0]
    7a24:	cmp	r3, #229	; 0xe5
    7a26:	beq.n	79ee <FatFile::sync() [clone .part.40]+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    7a28:	ldrb	r3, [r4, #0]
    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    7a2a:	ldr	r2, [pc, #56]	; (7a64 <FatFile::sync() [clone .part.40]+0x90>)
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    7a2c:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    7a2e:	itt	mi
    7a30:	ldrmi	r3, [r4, #28]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    7a32:	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    7a34:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    7a36:	ldr	r6, [r2, #0]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    7a38:	strh	r3, [r0, #26]
    7a3a:	lsrs	r3, r3, #16
    7a3c:	strh	r3, [r0, #20]
    7a3e:	cbz	r6, 7a5a <FatFile::sync() [clone .part.40]+0x86>
      FsDateTime::callback(&date, &time, &ms10);
    7a40:	add.w	r2, sp, #3
    7a44:	add.w	r1, sp, #6
    7a48:	add	r0, sp, #4
    7a4a:	blx	r6
      setLe16(dir->modifyDate, date);
    7a4c:	ldrh.w	r3, [sp, #4]
    7a50:	ldrh.w	r2, [sp, #6]
    7a54:	strh	r3, [r5, #24]
    7a56:	strh	r3, [r5, #18]
    7a58:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    7a5a:	ldrb	r3, [r4, #2]
    7a5c:	and.w	r3, r3, #127	; 0x7f
    7a60:	strb	r3, [r4, #2]
    7a62:	b.n	79e2 <FatFile::sync() [clone .part.40]+0xe>
    7a64:	.word	0x1fff24d4

00007a68 <FatFile::close()>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    7a68:	push	{r4, lr}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    7a6a:	ldrb	r3, [r0, #0]

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    7a6c:	mov	r4, r0
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    7a6e:	cbnz	r3, 7a7a <FatFile::close()+0x12>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    7a70:	movs	r3, #0
    7a72:	strb	r3, [r4, #0]
  m_flags = 0;
    7a74:	strb	r3, [r4, #2]
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
    7a76:	movs	r0, #1
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return rtn;
}
    7a78:	pop	{r4, pc}
    7a7a:	bl	79d4 <FatFile::sync() [clone .part.40]>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    7a7e:	movs	r3, #0
    7a80:	strb	r3, [r4, #0]
  m_flags = 0;
    7a82:	strb	r3, [r4, #2]
  return rtn;
}
    7a84:	pop	{r4, pc}
    7a86:	nop

00007a88 <FatFile::mkdir(FatFile*, fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    7a88:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    7a8c:	ldrb	r5, [r1, #0]
    7a8e:	tst.w	r5, #112	; 0x70

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    7a92:	sub	sp, #36	; 0x24
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    7a94:	bne.n	7a9e <FatFile::mkdir(FatFile*, fname_t*)+0x16>
  // write first sector
  return m_vol->cacheSync();

fail:
  return false;
}
    7a96:	movs	r0, #0
    7a98:	add	sp, #36	; 0x24
    7a9a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    7a9e:	movw	r3, #2562	; 0xa02
    7aa2:	mov	r4, r0
    7aa4:	mov	r5, r1
    7aa6:	bl	8f88 <FatFile::open(FatFile*, fname_t*, int)>
    7aaa:	cmp	r0, #0
    7aac:	beq.n	7a96 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    7aae:	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    7ab0:	movs	r3, #16
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    7ab2:	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    7ab4:	strb	r3, [r4, #0]

  // allocate and zero first cluster
  if (!addDirCluster()) {
    7ab6:	mov	r0, r4
    7ab8:	bl	7920 <FatFile::addDirCluster()>
    7abc:	cmp	r0, #0
    7abe:	beq.n	7a96 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
bool FatFile::seekSet(uint32_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    7ac0:	ldrb	r3, [r4, #0]
  // allocate and zero first cluster
  if (!addDirCluster()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    7ac2:	ldr	r2, [r4, #16]
    7ac4:	str	r2, [r4, #32]
bool FatFile::seekSet(uint32_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    7ac6:	cmp	r3, #0
    7ac8:	bne.n	7bb6 <FatFile::mkdir(FatFile*, fname_t*)+0x12e>
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    7aca:	movs	r1, #1
    7acc:	mov	r0, r4
    7ace:	bl	79b4 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7ad2:	mov	r6, r0
    7ad4:	cmp	r0, #0
    7ad6:	beq.n	7a96 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    7ad8:	movs	r3, #16
    7ada:	strb	r3, [r0, #11]

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    7adc:	ldr	r2, [r0, #8]
    7ade:	ldr	r1, [r6, #4]
    7ae0:	ldr	r3, [r6, #12]
    7ae2:	ldr	r0, [r0, #0]
    7ae4:	ldrh.w	r8, [r6, #20]
    7ae8:	ldrh.w	r9, [r6, #26]
    7aec:	mov	r7, sp
    7aee:	stmia	r7!, {r0, r1, r2, r3}
    7af0:	ldr	r1, [r6, #20]
    7af2:	ldr	r2, [r6, #24]
    7af4:	ldr	r3, [r6, #28]
    7af6:	ldr	r0, [r6, #16]
  dot.name[0] = '.';
    7af8:	add	r6, sp, #32
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    7afa:	stmia	r7!, {r0, r1, r2, r3}
  dot.name[0] = '.';
    7afc:	movs	r3, #46	; 0x2e
    7afe:	strb.w	r3, [r6, #-32]!
    7b02:	add.w	r1, sp, #10
    7b06:	mov	r3, r6
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
    7b08:	movs	r2, #32
    7b0a:	strb.w	r2, [r3, #1]!
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    7b0e:	cmp	r1, r3
    7b10:	bne.n	7b0a <FatFile::mkdir(FatFile*, fname_t*)+0x82>
    dot.name[i] = ' ';
  }

  // cache sector for '.'  and '..'
  sector = m_vol->clusterStartSector(m_firstCluster);
    7b12:	ldr	r1, [r4, #32]
    7b14:	ldr	r0, [r4, #8]
    7b16:	bl	864c <FatPartition::clusterStartSector(unsigned long) const>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    7b1a:	ldr	r3, [r4, #8]
    7b1c:	mov	r1, r0
    7b1e:	movs	r2, #1
    7b20:	add.w	r0, r3, #40	; 0x28
    7b24:	bl	85dc <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
  if (!pc) {
    7b28:	mov	lr, r0
    7b2a:	cmp	r0, #0
    7b2c:	beq.n	7a96 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    7b2e:	mov	r7, r6
    7b30:	strh.w	r8, [sp, #20]
    7b34:	strh.w	r9, [sp, #26]
    7b38:	ldmia	r7!, {r0, r1, r2, r3}
    7b3a:	str.w	r0, [lr]
    7b3e:	str.w	r1, [lr, #4]
    7b42:	str.w	r2, [lr, #8]
    7b46:	str.w	r3, [lr, #12]
    7b4a:	ldmia	r7!, {r0, r1, r2, r3}
    7b4c:	str.w	r0, [lr, #16]
    7b50:	str.w	r1, [lr, #20]
    7b54:	str.w	r2, [lr, #24]
    7b58:	str.w	r3, [lr, #28]
  // make entry for '..'
  dot.name[1] = '.';
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    7b5c:	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    7b5e:	strh.w	r3, [sp, #26]
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
  // make entry for '..'
  dot.name[1] = '.';
    7b62:	movs	r2, #46	; 0x2e
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    7b64:	lsrs	r3, r3, #16
    7b66:	mov	r5, r6
    7b68:	strh.w	r3, [sp, #20]
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
  // make entry for '..'
  dot.name[1] = '.';
    7b6c:	strb.w	r2, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    7b70:	ldmia	r5!, {r0, r1, r2, r3}
    7b72:	add.w	r6, lr, #32
    7b76:	str.w	r0, [lr, #32]
    7b7a:	str	r1, [r6, #4]
    7b7c:	str	r2, [r6, #8]
    7b7e:	str	r3, [r6, #12]
    7b80:	ldmia	r5!, {r0, r1, r2, r3}
    7b82:	str	r0, [r6, #16]
    7b84:	str	r1, [r6, #20]
    7b86:	str	r2, [r6, #24]
    7b88:	str	r3, [r6, #28]
  // write first sector
  return m_vol->cacheSync();
    7b8a:	ldr	r4, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7b8c:	add.w	r0, r4, #40	; 0x28
    7b90:	bl	863c <FatCache::sync()>
    7b94:	cmp	r0, #0
    7b96:	beq.w	7a96 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    7b9a:	add.w	r0, r4, #564	; 0x234
    7b9e:	bl	863c <FatCache::sync()>
    7ba2:	cmp	r0, #0
    7ba4:	beq.w	7a96 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    7ba8:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    7baa:	ldr	r3, [r0, #0]
    7bac:	ldr	r3, [r3, #20]

fail:
  return false;
}
    7bae:	add	sp, #36	; 0x24
    7bb0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7bb4:	bx	r3
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    7bb6:	ldr	r3, [r4, #20]
    7bb8:	cbz	r3, 7bc8 <FatFile::mkdir(FatFile*, fname_t*)+0x140>
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    7bba:	ldrb	r3, [r4, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    7bbc:	movs	r2, #0
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    7bbe:	bic.w	r3, r3, #32
    7bc2:	strb	r3, [r4, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    7bc4:	str	r2, [r4, #16]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    7bc6:	str	r2, [r4, #20]
    7bc8:	mov	r0, r4
    7bca:	bl	79d4 <FatFile::sync() [clone .part.40]>
  }
  m_firstCluster = m_curCluster;
  // Set to start of dir
  rewind();
  // force entry to device
  if (!sync()) {
    7bce:	cmp	r0, #0
    7bd0:	beq.w	7a96 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    7bd4:	b.n	7aca <FatFile::mkdir(FatFile*, fname_t*)+0x42>
    7bd6:	nop

00007bd8 <FatFile::mkdir(FatFile*, char const*, bool)>:
void FatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    7bd8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7bdc:	mov	r6, r0
    7bde:	sub	sp, #72	; 0x48
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    7be0:	ldrb	r5, [r6, #0]
void FatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    7be2:	str	r2, [sp, #4]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    7be4:	movs	r0, #0
    7be6:	strb.w	r0, [sp, #36]	; 0x24
    7bea:	strb.w	r0, [sp, #37]	; 0x25
    7bee:	strb.w	r0, [sp, #38]	; 0x26
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    7bf2:	cbnz	r5, 7c00 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    7bf4:	mov	r8, r3
    7bf6:	ldrb	r3, [r1, #0]
    7bf8:	tst.w	r3, #112	; 0x70
    7bfc:	mov	r4, r1
    7bfe:	bne.n	7c08 <FatFile::mkdir(FatFile*, char const*, bool)+0x30>
    close();
  }
  return mkdir(parent, &fname);

fail:
  return false;
    7c00:	movs	r0, #0
}
    7c02:	add	sp, #72	; 0x48
    7c04:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    7c08:	ldrb	r3, [r2, #0]
    7c0a:	cmp	r3, #47	; 0x2f
    7c0c:	mov	r0, r2
    7c0e:	beq.n	7c66 <FatFile::mkdir(FatFile*, char const*, bool)+0x8e>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    7c10:	movs	r7, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    7c12:	add	r2, sp, #4
    7c14:	add	r1, sp, #12
    7c16:	bl	8b5c <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    7c1a:	add	r2, sp, #12
    7c1c:	mov	r1, r4
    7c1e:	movs	r3, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    7c20:	cmp	r0, #0
    7c22:	beq.n	7c00 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    7c24:	ldr	r5, [sp, #4]
    7c26:	ldrb	r5, [r5, #0]
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    7c28:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    7c2a:	cmp	r5, #0
    7c2c:	beq.n	7c8a <FatFile::mkdir(FatFile*, char const*, bool)+0xb2>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    7c2e:	bl	8f88 <FatFile::open(FatFile*, fname_t*, int)>
    7c32:	cbnz	r0, 7c48 <FatFile::mkdir(FatFile*, char const*, bool)+0x70>
      if (!pFlag || !mkdir(parent, &fname)) {
    7c34:	cmp.w	r8, #0
    7c38:	beq.n	7c00 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    7c3a:	mov	r1, r4
    7c3c:	add	r2, sp, #12
    7c3e:	mov	r0, r6
    7c40:	bl	7a88 <FatFile::mkdir(FatFile*, fname_t*)>
    7c44:	cmp	r0, #0
    7c46:	beq.n	7c00 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    7c48:	mov	r5, r6
    7c4a:	ldmia	r5!, {r0, r1, r2, r3}
    7c4c:	add	r4, sp, #36	; 0x24
    7c4e:	stmia	r4!, {r0, r1, r2, r3}
    7c50:	ldmia	r5!, {r0, r1, r2, r3}
    7c52:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    7c54:	ldrb	r3, [r6, #0]
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    7c56:	ldr	r2, [r5, #0]
    7c58:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    7c5a:	cbnz	r3, 7c82 <FatFile::mkdir(FatFile*, char const*, bool)+0xaa>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    7c5c:	strb	r7, [r6, #0]
  m_flags = 0;
    7c5e:	strb	r7, [r6, #2]
    7c60:	ldr	r0, [sp, #4]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    7c62:	add	r4, sp, #36	; 0x24
    7c64:	b.n	7c12 <FatFile::mkdir(FatFile*, char const*, bool)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    7c66:	adds	r0, #1
    7c68:	str	r0, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    7c6a:	ldrb	r3, [r0, #0]
    7c6c:	cmp	r3, #47	; 0x2f
    7c6e:	beq.n	7c66 <FatFile::mkdir(FatFile*, char const*, bool)+0x8e>
    7c70:	ldr	r1, [r4, #8]
    7c72:	add	r0, sp, #36	; 0x24
    7c74:	bl	78b8 <FatFile::openRoot(FatVolume*) [clone .part.36]>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    7c78:	cmp	r0, #0
    7c7a:	beq.n	7c00 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    7c7c:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    7c7e:	add	r4, sp, #36	; 0x24
    7c80:	b.n	7c10 <FatFile::mkdir(FatFile*, char const*, bool)+0x38>
    7c82:	mov	r0, r6
    7c84:	bl	79d4 <FatFile::sync() [clone .part.40]>
    7c88:	b.n	7c5c <FatFile::mkdir(FatFile*, char const*, bool)+0x84>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    7c8a:	add	r2, sp, #12
    7c8c:	mov	r1, r4
    7c8e:	mov	r0, r6
    7c90:	bl	7a88 <FatFile::mkdir(FatFile*, fname_t*)>

fail:
  return false;
}
    7c94:	add	sp, #72	; 0x48
    7c96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c9a:	nop

00007c9c <FatFile::open(FatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    7c9c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ca0:	mov	r6, r0
    7ca2:	sub	sp, #72	; 0x48
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    7ca4:	ldrb	r5, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    7ca6:	str	r2, [sp, #4]
    7ca8:	movs	r0, #0
    7caa:	strb.w	r0, [sp, #36]	; 0x24
    7cae:	strb.w	r0, [sp, #37]	; 0x25
    7cb2:	strb.w	r0, [sp, #38]	; 0x26
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    7cb6:	cbnz	r5, 7cc4 <FatFile::open(FatFile*, char const*, int)+0x28>
    7cb8:	mov	r8, r3
    7cba:	ldrb	r3, [r1, #0]
    7cbc:	tst.w	r3, #112	; 0x70
    7cc0:	mov	r4, r1
    7cc2:	bne.n	7ccc <FatFile::open(FatFile*, char const*, int)+0x30>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    7cc4:	movs	r0, #0
}
    7cc6:	add	sp, #72	; 0x48
    7cc8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    7ccc:	ldrb	r3, [r2, #0]
    7cce:	cmp	r3, #47	; 0x2f
    7cd0:	mov	r0, r2
    7cd2:	beq.n	7d20 <FatFile::open(FatFile*, char const*, int)+0x84>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    7cd4:	movs	r7, #0
    7cd6:	b.n	7ce0 <FatFile::open(FatFile*, char const*, int)+0x44>
    7cd8:	ldr	r0, [sp, #4]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    7cda:	strb	r7, [r6, #0]
  m_flags = 0;
    7cdc:	strb	r7, [r6, #2]
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    7cde:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    7ce0:	add	r2, sp, #4
    7ce2:	add	r1, sp, #12
    7ce4:	bl	8b5c <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    7ce8:	add	r2, sp, #12
    7cea:	mov	r1, r4
    7cec:	movs	r3, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    7cee:	cmp	r0, #0
    7cf0:	beq.n	7cc4 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    7cf2:	ldr	r5, [sp, #4]
    7cf4:	ldrb	r5, [r5, #0]
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    7cf6:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    7cf8:	cbz	r5, 7d3e <FatFile::open(FatFile*, char const*, int)+0xa2>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    7cfa:	bl	8f88 <FatFile::open(FatFile*, fname_t*, int)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    7cfe:	mov	r5, r6
    7d00:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    7d02:	cmp	r0, #0
    7d04:	beq.n	7cc4 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    7d06:	ldmia	r5!, {r0, r1, r2, r3}
    7d08:	stmia	r4!, {r0, r1, r2, r3}
    7d0a:	ldmia	r5!, {r0, r1, r2, r3}
    7d0c:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    7d0e:	ldrb	r3, [r6, #0]
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    7d10:	ldr	r2, [r5, #0]
    7d12:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    7d14:	cmp	r3, #0
    7d16:	beq.n	7cd8 <FatFile::open(FatFile*, char const*, int)+0x3c>
    7d18:	mov	r0, r6
    7d1a:	bl	79d4 <FatFile::sync() [clone .part.40]>
    7d1e:	b.n	7cd8 <FatFile::open(FatFile*, char const*, int)+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    7d20:	adds	r0, #1
    7d22:	str	r0, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    7d24:	ldrb	r3, [r0, #0]
    7d26:	cmp	r3, #47	; 0x2f
    7d28:	beq.n	7d20 <FatFile::open(FatFile*, char const*, int)+0x84>
      path++;
    }
    if (*path == 0) {
    7d2a:	cbz	r3, 7d50 <FatFile::open(FatFile*, char const*, int)+0xb4>
    7d2c:	ldr	r1, [r4, #8]
    7d2e:	add	r0, sp, #36	; 0x24
    7d30:	bl	78b8 <FatFile::openRoot(FatVolume*) [clone .part.36]>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    7d34:	cmp	r0, #0
    7d36:	beq.n	7cc4 <FatFile::open(FatFile*, char const*, int)+0x28>
    7d38:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    7d3a:	add	r4, sp, #36	; 0x24
    7d3c:	b.n	7cd4 <FatFile::open(FatFile*, char const*, int)+0x38>
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return open(dirFile, &fname, oflag);
    7d3e:	mov	r3, r8
    7d40:	add	r2, sp, #12
    7d42:	mov	r1, r4
    7d44:	mov	r0, r6
    7d46:	bl	8f88 <FatFile::open(FatFile*, fname_t*, int)>

fail:
  return false;
}
    7d4a:	add	sp, #72	; 0x48
    7d4c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7d50:	ldr	r1, [r4, #8]
    7d52:	mov	r0, r6
    7d54:	bl	78b8 <FatFile::openRoot(FatVolume*) [clone .part.36]>
    7d58:	b.n	7cc6 <FatFile::open(FatFile*, char const*, int)+0x2a>
    7d5a:	nop

00007d5c <FatFile::open(FatVolume*, char const*, int)>:
bool FatFile::open(const char* path, oflag_t oflag) {
  return open(FatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    7d5c:	cbz	r1, 7d66 <FatFile::open(FatVolume*, char const*, int)+0xa>
    7d5e:	add.w	r1, r1, #1088	; 0x440
    7d62:	b.w	7c9c <FatFile::open(FatFile*, char const*, int)>
}
    7d66:	mov	r0, r1
    7d68:	bx	lr
    7d6a:	nop

00007d6c <FatFile::openRoot(FatVolume*)>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    7d6c:	ldrb	r3, [r0, #0]
    7d6e:	cbz	r3, 7d74 <FatFile::openRoot(FatVolume*)+0x8>
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
}
    7d70:	movs	r0, #0
    7d72:	bx	lr
    7d74:	b.w	78b8 <FatFile::openRoot(FatVolume*) [clone .part.36]>

00007d78 <FatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    7d78:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    7d7c:	ldrb	r3, [r0, #2]
    7d7e:	lsls	r7, r3, #31
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    7d80:	sub	sp, #12
    7d82:	mov	r5, r0
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    7d84:	bpl.w	7ea6 <FatFile::read(void*, unsigned int)+0x12e>
    7d88:	mov	r7, r1
    7d8a:	ldrb	r1, [r0, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    7d8c:	lsls	r6, r1, #28
    7d8e:	mov	r9, r2
    7d90:	bmi.w	7eb8 <FatFile::read(void*, unsigned int)+0x140>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
    7d94:	lsls	r4, r1, #26
    7d96:	bpl.n	7daa <FatFile::read(void*, unsigned int)+0x32>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    7d98:	ldr	r2, [r0, #8]
    if (nbyte > tmp16) {
    7d9a:	ldr	r3, [r0, #20]
    7d9c:	ldrh	r2, [r2, #8]
    7d9e:	rsb	r3, r3, r2, lsl #5
    7da2:	uxth	r3, r3
    7da4:	cmp	r9, r3
    7da6:	it	cs
    7da8:	movcs	r9, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    7daa:	cmp.w	r9, #0
    7dae:	beq.w	7f04 <FatFile::read(void*, unsigned int)+0x18c>
    7db2:	ldr	r3, [r5, #20]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    7db4:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    7db6:	lsls	r0, r1, #26
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    7db8:	mov	r6, r9
    7dba:	mov.w	r8, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7dbe:	add.w	sl, r5, #16
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    7dc2:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    7dc6:	bpl.n	7e46 <FatFile::read(void*, unsigned int)+0xce>
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    7dc8:	ldr	r1, [r2, #32]
    7dca:	add.w	r1, r1, r3, lsr #9
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    7dce:	cmp.w	fp, #0
    7dd2:	bne.n	7e7a <FatFile::read(void*, unsigned int)+0x102>
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    7dd4:	cmp.w	r6, #512	; 0x200
    7dd8:	bcc.n	7e7a <FatFile::read(void*, unsigned int)+0x102>
    7dda:	ldr	r3, [r2, #48]	; 0x30
        || sector == m_vol->cacheSectorNumber()) {
    7ddc:	cmp	r1, r3
    7dde:	beq.n	7e7a <FatFile::read(void*, unsigned int)+0x102>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    7de0:	cmp.w	r6, #1024	; 0x400
    7de4:	bcc.n	7eca <FatFile::read(void*, unsigned int)+0x152>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isRootFixed()) {
    7de6:	ldrb	r0, [r5, #0]
    7de8:	lsls	r0, r0, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    7dea:	mov.w	fp, r6, lsr #9
      if (!isRootFixed()) {
    7dee:	bmi.n	7dfc <FatFile::read(void*, unsigned int)+0x84>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    7df0:	ldrb	r0, [r2, #4]
    7df2:	rsb	r0, r8, r0
    7df6:	cmp	fp, r0
    7df8:	it	cs
    7dfa:	movcs	fp, r0
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    7dfc:	cmp	r1, r3
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    7dfe:	mov.w	r4, fp, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    7e02:	bhi.n	7e1c <FatFile::read(void*, unsigned int)+0xa4>
    7e04:	add	r3, fp
    7e06:	cmp	r1, r3
    7e08:	bcs.n	7e1c <FatFile::read(void*, unsigned int)+0xa4>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    7e0a:	add.w	r0, r2, #40	; 0x28
    7e0e:	str	r1, [sp, #4]
    7e10:	bl	863c <FatCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->cacheSyncData()) {
    7e14:	cmp	r0, #0
    7e16:	beq.n	7ea6 <FatFile::read(void*, unsigned int)+0x12e>
    7e18:	ldr	r2, [r5, #8]
    7e1a:	ldr	r1, [sp, #4]
    7e1c:	ldr	r0, [r2, #0]
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
    7e1e:	ldr	r2, [r0, #0]
    7e20:	mov	r3, fp
    7e22:	ldr.w	fp, [r2, #12]
    7e26:	mov	r2, r7
    7e28:	blx	fp
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    7e2a:	cmp	r0, #0
    7e2c:	beq.n	7ea6 <FatFile::read(void*, unsigned int)+0x12e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    7e2e:	ldr	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    7e30:	subs	r6, r6, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    7e32:	add	r3, r4
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    7e34:	add	r7, r4
    m_curPosition += n;
    7e36:	str	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    7e38:	beq.n	7f04 <FatFile::read(void*, unsigned int)+0x18c>
    7e3a:	ldrb	r1, [r5, #0]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    7e3c:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    7e3e:	lsls	r0, r1, #26
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    7e40:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    7e44:	bmi.n	7dc8 <FatFile::read(void*, unsigned int)+0x50>
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    7e46:	ldrb.w	r8, [r2, #5]
    7e4a:	and.w	r8, r8, r3, lsr #9
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    } else {
      sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
      if (offset == 0 && sectorOfCluster == 0) {
    7e4e:	cmp.w	fp, #0
    7e52:	bne.n	7ec6 <FatFile::read(void*, unsigned int)+0x14e>
    7e54:	cmp.w	r8, #0
    7e58:	bne.n	7ec6 <FatFile::read(void*, unsigned int)+0x14e>
        // start of new cluster
        if (m_curPosition == 0) {
    7e5a:	cmp	r3, #0
    7e5c:	bne.n	7ede <FatFile::read(void*, unsigned int)+0x166>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    7e5e:	lsls	r1, r1, #25
    7e60:	ite	mi
    7e62:	ldrmi	r1, [r2, #32]
    7e64:	ldrpl	r1, [r5, #32]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
    7e66:	str	r1, [r5, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    7e68:	mov	r0, r2
    7e6a:	bl	864c <FatPartition::clusterStartSector(unsigned long) const>
    7e6e:	ldr	r2, [r5, #8]
    7e70:	add.w	r1, r8, r0
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    7e74:	cmp.w	fp, #0
    7e78:	beq.n	7dd4 <FatFile::read(void*, unsigned int)+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    7e7a:	add.w	r0, r2, #40	; 0x28
    7e7e:	movs	r2, #0
    7e80:	bl	85dc <FatCache::read(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
      if (!pc) {
    7e84:	cbz	r0, 7ea6 <FatFile::read(void*, unsigned int)+0x12e>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
      // amount to be read from current sector
      n = m_vol->bytesPerSector() - offset;
    7e86:	rsb	r4, fp, #512	; 0x200
    7e8a:	cmp	r4, r6
    7e8c:	it	cs
    7e8e:	movcs	r4, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    7e90:	add.w	r1, r0, fp
    7e94:	mov	r2, r4
    7e96:	mov	r0, r7
    7e98:	bl	e8e8 <memcpy>
    7e9c:	b.n	7e2e <FatFile::read(void*, unsigned int)+0xb6>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
            if (isDir()) {
    7e9e:	ldrb	r3, [r5, #0]
    7ea0:	tst.w	r3, #112	; 0x70
    7ea4:	bne.n	7f06 <FatFile::read(void*, unsigned int)+0x18e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    7ea6:	ldrb	r3, [r5, #1]
  return -1;
    7ea8:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    7eac:	orr.w	r3, r3, #2
    7eb0:	strb	r3, [r5, #1]
  return -1;
}
    7eb2:	add	sp, #12
    7eb4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    uint32_t tmp32 = m_fileSize - m_curPosition;
    7eb8:	ldr	r3, [r0, #28]
    7eba:	ldr	r2, [r0, #20]
    7ebc:	subs	r3, r3, r2
    7ebe:	cmp	r9, r3
    7ec0:	it	cs
    7ec2:	movcs	r9, r3
    7ec4:	b.n	7daa <FatFile::read(void*, unsigned int)+0x32>
    7ec6:	ldr	r1, [r5, #16]
    7ec8:	b.n	7e68 <FatFile::read(void*, unsigned int)+0xf0>
    7eca:	ldr	r0, [r2, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    7ecc:	ldr	r3, [r0, #0]
    7ece:	mov	r2, r7
    7ed0:	ldr	r3, [r3, #8]
    7ed2:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    7ed4:	cmp	r0, #0
    7ed6:	beq.n	7ea6 <FatFile::read(void*, unsigned int)+0x12e>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    7ed8:	mov.w	r4, #512	; 0x200
    7edc:	b.n	7e2e <FatFile::read(void*, unsigned int)+0xb6>
        // start of new cluster
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
    7ede:	lsls	r3, r1, #28
    7ee0:	bpl.n	7eee <FatFile::read(void*, unsigned int)+0x176>
    7ee2:	ldrb	r3, [r5, #2]
    7ee4:	lsls	r4, r3, #25
    7ee6:	bpl.n	7eee <FatFile::read(void*, unsigned int)+0x176>
          m_curCluster++;
    7ee8:	ldr	r1, [r5, #16]
    7eea:	adds	r1, #1
    7eec:	b.n	7e66 <FatFile::read(void*, unsigned int)+0xee>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7eee:	mov	r0, r2
    7ef0:	ldr	r1, [r5, #16]
    7ef2:	mov	r2, sl
    7ef4:	bl	8658 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    7ef8:	cmp	r0, #0
    7efa:	blt.n	7ea6 <FatFile::read(void*, unsigned int)+0x12e>
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
    7efc:	beq.n	7e9e <FatFile::read(void*, unsigned int)+0x126>
    7efe:	ldr	r2, [r5, #8]
    7f00:	ldr	r1, [r5, #16]
    7f02:	b.n	7e68 <FatFile::read(void*, unsigned int)+0xf0>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    7f04:	movs	r6, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    7f06:	rsb	r0, r6, r9

fail:
  m_error |= READ_ERROR;
  return -1;
}
    7f0a:	add	sp, #12
    7f0c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00007f10 <FatFile::peek()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
    7f10:	push	{r4, r5, r6, lr}
    7f12:	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    7f14:	movs	r2, #1
    7f16:	add.w	r1, sp, #7
    7f1a:	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    7f1c:	ldr	r6, [r0, #20]
  uint32_t curCluster = m_curCluster;
    7f1e:	ldr	r5, [r0, #16]
    7f20:	bl	7d78 <FatFile::read(void*, unsigned int)>
    7f24:	cmp	r0, #1
    7f26:	it	eq
    7f28:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
    7f2c:	str	r6, [r4, #20]
    7f2e:	it	ne
    7f30:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    7f34:	str	r5, [r4, #16]
  return c;
}
    7f36:	add	sp, #8
    7f38:	pop	{r4, r5, r6, pc}
    7f3a:	nop

00007f3c <FatFile::readDirCache(bool)>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    7f3c:	push	{r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
    7f3e:	ldr	r3, [r0, #20]
    7f40:	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    7f44:	sub	sp, #12
    7f46:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    7f48:	cbz	r5, 7f4c <FatFile::readDirCache(bool)+0x10>
    7f4a:	cbnz	r1, 7f70 <FatFile::readDirCache(bool)+0x34>
    int8_t n = read(&n, 1);
    7f4c:	movs	r2, #1
    7f4e:	add.w	r1, sp, #7
    7f52:	mov	r0, r4
    7f54:	bl	7d78 <FatFile::read(void*, unsigned int)>
    7f58:	sxtb	r0, r0
    if  (n != 1) {
    7f5a:	cmp	r0, #1
    7f5c:	bne.n	7f76 <FatFile::readDirCache(bool)+0x3a>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
    7f5e:	ldr	r3, [r4, #20]
    7f60:	adds	r3, #31
    7f62:	str	r3, [r4, #20]
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  /** \return Cache sector address. */
  cache_t* buffer() {
    return &m_buffer;
    7f64:	ldr	r0, [r4, #8]
    7f66:	adds	r0, #52	; 0x34
  } else {
    m_curPosition += 32;
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    7f68:	add.w	r0, r0, r5, lsl #5

fail:
  return nullptr;
}
    7f6c:	add	sp, #12
    7f6e:	pop	{r4, r5, pc}
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
    7f70:	adds	r3, #32
    7f72:	str	r3, [r0, #20]
    7f74:	b.n	7f64 <FatFile::readDirCache(bool)+0x28>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

fail:
  return nullptr;
    7f76:	movs	r0, #0
}
    7f78:	add	sp, #12
    7f7a:	pop	{r4, r5, pc}

00007f7c <FatFile::rename(FatFile*, char const*)>:
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    7f7c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    7f80:	ldrb	r5, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    7f82:	sub	sp, #104	; 0x68
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    7f84:	movs	r4, #0
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    7f86:	tst.w	r5, #24
    7f8a:	strb.w	r4, [sp, #32]
    7f8e:	strb.w	r4, [sp, #33]	; 0x21
    7f92:	strb.w	r4, [sp, #34]	; 0x22
    7f96:	strb.w	r4, [sp, #68]	; 0x44
    7f9a:	strb.w	r4, [sp, #69]	; 0x45
    7f9e:	strb.w	r4, [sp, #70]	; 0x46
    7fa2:	beq.n	7fae <FatFile::rename(FatFile*, char const*)+0x32>
  if (!USE_LONG_FILE_NAMES && isLFN()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    7fa4:	ldr	r6, [r0, #8]
    7fa6:	ldr	r5, [r1, #8]
    7fa8:	cmp	r6, r5
    7faa:	mov	r3, r0
    7fac:	beq.n	7fb6 <FatFile::rename(FatFile*, char const*)+0x3a>
    goto fail;
  }
  return m_vol->cacheSync();

fail:
  return false;
    7fae:	movs	r0, #0
}
    7fb0:	add	sp, #104	; 0x68
    7fb2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7fb6:	mov	r5, r3
    7fb8:	mov	r8, r2
    7fba:	mov	r6, r1
    7fbc:	bl	79d4 <FatFile::sync() [clone .part.40]>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // sync() and cache directory entry
  sync();
  oldFile = *this;
    7fc0:	mov	lr, r5
    7fc2:	ldmia.w	lr!, {r0, r1, r2, r3}
    7fc6:	add	r7, sp, #68	; 0x44
    7fc8:	stmia	r7!, {r0, r1, r2, r3}
    7fca:	ldmia.w	lr!, {r0, r1, r2, r3}
    7fce:	stmia	r7!, {r0, r1, r2, r3}
    7fd0:	ldr.w	r3, [lr]
    7fd4:	str	r3, [r7, #0]
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
    7fd6:	mov	r1, r4
    7fd8:	mov	r0, r5
    7fda:	bl	79b4 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7fde:	mov	lr, r0
    7fe0:	cmp	r0, #0
    7fe2:	beq.n	7fae <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    7fe4:	ldr.w	r1, [lr, #4]
    7fe8:	ldr.w	r2, [lr, #8]
    7fec:	ldr.w	r3, [lr, #12]
    7ff0:	ldr	r0, [r0, #0]
  // make directory entry for new path
  if (isFile()) {
    7ff2:	ldrb.w	ip, [r5]
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    7ff6:	mov	r7, sp
    7ff8:	stmia	r7!, {r0, r1, r2, r3}
    7ffa:	ldr.w	r1, [lr, #20]
    7ffe:	ldr.w	r2, [lr, #24]
    8002:	ldr.w	r3, [lr, #28]
    8006:	ldr.w	r0, [lr, #16]
  // make directory entry for new path
  if (isFile()) {
    800a:	and.w	lr, ip, #8
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    800e:	stmia	r7!, {r0, r1, r2, r3}
  // make directory entry for new path
  if (isFile()) {
    8010:	and.w	r3, lr, #255	; 0xff
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    8014:	mov	r2, r8
    8016:	mov	r1, r6
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
  // make directory entry for new path
  if (isFile()) {
    8018:	cmp.w	lr, #0
    801c:	beq.w	8142 <FatFile::rename(FatFile*, char const*)+0x1c6>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    8020:	movw	r3, #2561	; 0xa01
    8024:	add	r0, sp, #32
    8026:	bl	7c9c <FatFile::open(FatFile*, char const*, int)>
    802a:	cmp	r0, #0
    802c:	beq.n	7fae <FatFile::rename(FatFile*, char const*)+0x32>
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    802e:	ldr	r0, [sp, #56]	; 0x38
  m_dirIndex = file.m_dirIndex;
    8030:	ldrh.w	r1, [sp, #36]	; 0x24
  m_lfnOrd = file.m_lfnOrd;
    8034:	ldrb.w	r2, [sp, #35]	; 0x23
  m_dirCluster = file.m_dirCluster;
    8038:	ldr	r3, [sp, #44]	; 0x2c
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    803a:	str	r0, [r5, #24]
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    803c:	movs	r6, #0
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
    803e:	strh	r1, [r5, #4]
  m_lfnOrd = file.m_lfnOrd;
    8040:	strb	r2, [r5, #3]
  m_dirCluster = file.m_dirCluster;
    8042:	str	r3, [r5, #12]
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    8044:	movs	r1, #1
    8046:	mov	r0, r5
  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    8048:	strb.w	r6, [sp, #32]
  file.m_flags = 0;
    804c:	strb.w	r6, [sp, #34]	; 0x22

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    8050:	bl	79b4 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    8054:	cmp	r0, #0
    8056:	beq.n	7fae <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    8058:	add	r3, sp, #104	; 0x68
  dir->attributes = entry.attributes;
    805a:	ldrb.w	r2, [sp, #11]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    805e:	ldr.w	r7, [r3, #-91]!
    8062:	str.w	r7, [r0, #13]
    8066:	ldr	r7, [r3, #4]
    8068:	str.w	r7, [r0, #17]
    806c:	ldr	r7, [r3, #8]
    806e:	str.w	r7, [r0, #21]
    8072:	ldr	r7, [r3, #12]
    8074:	str.w	r7, [r0, #25]
    8078:	ldrh	r7, [r3, #16]
    807a:	ldrb	r3, [r3, #18]
    807c:	strh.w	r7, [r0, #29]
    8080:	strb	r3, [r0, #31]
  dir->attributes = entry.attributes;
    8082:	strb	r2, [r0, #11]

  // update dot dot if directory
  if (dirCluster) {
    8084:	cmp	r4, #0
    8086:	beq.n	80fe <FatFile::rename(FatFile*, char const*)+0x182>
    // get new dot dot
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    8088:	mov	r1, r4
    808a:	ldr	r0, [r5, #8]
    808c:	bl	864c <FatPartition::clusterStartSector(unsigned long) const>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    8090:	ldr	r3, [r5, #8]
    8092:	mov	r1, r0
    8094:	mov	r2, r6
    8096:	add.w	r0, r3, #40	; 0x28
    809a:	bl	85dc <FatCache::read(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    809e:	cmp	r0, #0
    80a0:	beq.n	7fae <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&entry, &pc->dir[1], sizeof(entry));
    80a2:	mov	r6, r0
    80a4:	mov	r7, sp
    80a6:	ldr.w	r0, [r6, #32]!
    80aa:	ldr	r1, [r6, #4]
    80ac:	ldr	r2, [r6, #8]
    80ae:	ldr	r3, [r6, #12]
    80b0:	stmia	r7!, {r0, r1, r2, r3}
    80b2:	ldr	r0, [r6, #16]
    80b4:	ldr	r1, [r6, #20]
    80b6:	ldr	r2, [r6, #24]
    80b8:	ldr	r3, [r6, #28]
    80ba:	stmia	r7!, {r0, r1, r2, r3}

    // free unused cluster
    if (!m_vol->freeChain(dirCluster)) {
    80bc:	mov	r1, r4
    80be:	ldr	r0, [r5, #8]
    80c0:	bl	87bc <FatPartition::freeChain(unsigned long)>
    80c4:	cmp	r0, #0
    80c6:	beq.w	7fae <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // store new dot dot
    sector = m_vol->clusterStartSector(m_firstCluster);
    80ca:	ldr	r1, [r5, #32]
    80cc:	ldr	r0, [r5, #8]
    80ce:	bl	864c <FatPartition::clusterStartSector(unsigned long) const>
    80d2:	ldr	r3, [r5, #8]
    80d4:	mov	r1, r0
    80d6:	movs	r2, #1
    80d8:	add.w	r0, r3, #40	; 0x28
    80dc:	bl	85dc <FatCache::read(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    80e0:	mov	r7, r0
    80e2:	cmp	r0, #0
    80e4:	beq.w	7fae <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
    80e8:	mov	r4, sp
    80ea:	ldmia	r4!, {r0, r1, r2, r3}
    80ec:	str	r0, [r7, #32]
    80ee:	str	r1, [r7, #36]	; 0x24
    80f0:	str	r2, [r7, #40]	; 0x28
    80f2:	str	r3, [r7, #44]	; 0x2c
    80f4:	ldmia	r4!, {r0, r1, r2, r3}
    80f6:	str	r0, [r7, #48]	; 0x30
    80f8:	str	r1, [r7, #52]	; 0x34
    80fa:	str	r2, [r7, #56]	; 0x38
    80fc:	str	r3, [r7, #60]	; 0x3c
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    80fe:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    8100:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    8102:	movs	r3, #8
  if (!oldFile.remove()) {
    8104:	add	r0, sp, #68	; 0x44
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    8106:	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    8108:	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    810c:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    8110:	bl	8da8 <FatFile::remove()>
    8114:	cmp	r0, #0
    8116:	beq.w	7fae <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return m_vol->cacheSync();
    811a:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    811c:	add.w	r0, r4, #40	; 0x28
    8120:	bl	863c <FatCache::sync()>
    8124:	cmp	r0, #0
    8126:	beq.w	7fae <FatFile::rename(FatFile*, char const*)+0x32>
    812a:	add.w	r0, r4, #564	; 0x234
    812e:	bl	863c <FatCache::sync()>
    8132:	cmp	r0, #0
    8134:	beq.w	7fae <FatFile::rename(FatFile*, char const*)+0x32>
    8138:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    813a:	ldr	r3, [r0, #0]
    813c:	ldr	r3, [r3, #20]
    813e:	blx	r3
    8140:	b.n	7fb0 <FatFile::rename(FatFile*, char const*)+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // don't create missing path prefix components
    if (!file.mkdir(dirFile, newPath, false)) {
    8142:	add	r0, sp, #32
    8144:	bl	7bd8 <FatFile::mkdir(FatFile*, char const*, bool)>
    8148:	cmp	r0, #0
    814a:	beq.w	7fae <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
    814e:	ldr	r4, [sp, #64]	; 0x40
    8150:	b.n	802e <FatFile::rename(FatFile*, char const*)+0xb2>
    8152:	nop

00008154 <FatFile::rmdir()>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
  // must be open subdirectory
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    8154:	ldrb	r3, [r0, #0]
    8156:	lsls	r2, r3, #27
    8158:	bpl.n	8190 <FatFile::rmdir()+0x3c>
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    815a:	ldr	r3, [r0, #20]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
    815c:	push	{r4, lr}
    815e:	mov	r4, r0
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    8160:	cbz	r3, 8170 <FatFile::rmdir()+0x1c>
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    8162:	ldrb	r3, [r0, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    8164:	movs	r2, #0
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    8166:	bic.w	r3, r3, #32
    816a:	strb	r3, [r0, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    816c:	str	r2, [r0, #16]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    816e:	str	r2, [r0, #20]
  }
  rewind();

  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    8170:	movs	r1, #1
    8172:	mov	r0, r4
    8174:	bl	7f3c <FatFile::readDirCache(bool)>
    if (!dir) {
    8178:	cbz	r0, 8194 <FatFile::rmdir()+0x40>
      }
      DBG_FAIL_MACRO;
      goto fail;
    }
    // done if past last used entry
    if (dir->name[0] == FAT_NAME_FREE) {
    817a:	ldrb	r3, [r0, #0]
    817c:	cbz	r3, 819a <FatFile::rmdir()+0x46>
      break;
    }
    // skip empty slot, '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    817e:	cmp	r3, #229	; 0xe5
    8180:	beq.n	8170 <FatFile::rmdir()+0x1c>
    8182:	cmp	r3, #46	; 0x2e
    8184:	beq.n	8170 <FatFile::rmdir()+0x1c>
      continue;
    }
    // error not empty
    if (isFileOrSubdir(dir)) {
    8186:	ldrb	r3, [r0, #11]
    8188:	lsls	r3, r3, #28
    818a:	bmi.n	8170 <FatFile::rmdir()+0x1c>
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
}
    818c:	movs	r0, #0
    818e:	pop	{r4, pc}
    8190:	movs	r0, #0
    8192:	bx	lr
  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    if (!dir) {
      // EOF if no error.
      if (!getError()) {
    8194:	ldrb	r3, [r4, #1]
    8196:	cmp	r3, #0
    8198:	bne.n	818c <FatFile::rmdir()+0x38>
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    819a:	ldrb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    819c:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
    819e:	orr.w	r3, r3, #2
    81a2:	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    81a4:	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    81a6:	mov	r0, r4

fail:
  return false;
}
    81a8:	ldmia.w	sp!, {r4, lr}
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    81ac:	b.w	8da8 <FatFile::remove()>

000081b0 <FatFile::seekSet(unsigned long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    81b0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    81b4:	ldrb	r3, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    81b6:	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    81b8:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    81ba:	cbz	r3, 81ea <FatFile::seekSet(unsigned long)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    81bc:	ldr	r2, [r0, #20]
    81be:	cmp	r2, r1
    81c0:	mov	r6, r1
    81c2:	beq.n	823a <FatFile::seekSet(unsigned long)+0x8a>
    return true;
  }
  if (pos == 0) {
    81c4:	cbnz	r1, 81d8 <FatFile::seekSet(unsigned long)+0x28>
    // set position to start of file
    m_curCluster = 0;
    81c6:	str	r1, [r4, #16]
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    81c8:	ldrb	r3, [r4, #2]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    81ca:	str	r6, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    81cc:	bic.w	r3, r3, #32
    81d0:	strb	r3, [r4, #2]
  return true;
    81d2:	movs	r0, #1
    81d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    81d8:	lsls	r0, r3, #28
    81da:	bmi.n	81f2 <FatFile::seekSet(unsigned long)+0x42>
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
    81dc:	lsls	r1, r3, #26
    81de:	bpl.n	81f8 <FatFile::seekSet(unsigned long)+0x48>
    81e0:	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
    81e2:	ldrh	r3, [r3, #8]
    81e4:	cmp.w	r6, r3, lsl #5
    81e8:	bls.n	81c8 <FatFile::seekSet(unsigned long)+0x18>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

fail:
  m_curCluster = tmp;
    81ea:	str	r7, [r4, #16]
  return false;
    81ec:	movs	r0, #0
    81ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_fileSize) {
    81f2:	ldr	r1, [r4, #28]
    81f4:	cmp	r6, r1
    81f6:	bhi.n	81ea <FatFile::seekSet(unsigned long)+0x3a>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    81f8:	ldr.w	lr, [r4, #8]
    81fc:	ldrb.w	r5, [lr, #6]
    8200:	adds	r5, #9
    8202:	uxtb	r1, r5
    8204:	subs	r0, r2, #1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    8206:	subs	r5, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    8208:	lsrs	r0, r1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    820a:	lsrs	r5, r1

  if (nNew < nCur || m_curPosition == 0) {
    820c:	cmp	r0, r5
    820e:	bhi.n	8212 <FatFile::seekSet(unsigned long)+0x62>
    8210:	cbnz	r2, 8240 <FatFile::seekSet(unsigned long)+0x90>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    8212:	lsls	r3, r3, #25
    8214:	ite	mi
    8216:	ldrmi.w	r3, [lr, #32]
    821a:	ldrpl	r3, [r4, #32]
    821c:	str	r3, [r4, #16]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    821e:	add.w	r8, r4, #16
    8222:	mov	r2, r8
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    8224:	cmp	r5, #0
    8226:	beq.n	81c8 <FatFile::seekSet(unsigned long)+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    8228:	ldr	r1, [r4, #16]
    822a:	ldr	r0, [r4, #8]
    822c:	bl	8658 <FatPartition::fatGet(unsigned long, unsigned long*)>
    8230:	cmp	r0, #0
    8232:	add.w	r5, r5, #4294967295
    8236:	bgt.n	8222 <FatFile::seekSet(unsigned long)+0x72>
    8238:	b.n	81ea <FatFile::seekSet(unsigned long)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    823a:	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    823c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    8240:	subs	r5, r5, r0
    8242:	b.n	821e <FatFile::seekSet(unsigned long)+0x6e>

00008244 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    8244:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8248:	mov	r5, r1
    824a:	mov	r8, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    824c:	movs	r1, #0
    824e:	movs	r2, #36	; 0x24
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    8250:	mov	r4, r0
    8252:	mov	r7, r3
    8254:	ldrb.w	r6, [sp, #24]
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    8258:	bl	117bc <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
    825c:	ldr	r0, [r5, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    825e:	ldr	r3, [r5, #32]
    8260:	str	r3, [r4, #12]
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  /** \return Cache sector address. */
  cache_t* buffer() {
    return &m_buffer;
    8262:	add.w	r2, r0, #52	; 0x34
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    8266:	and.w	r3, r8, #15
    826a:	add.w	r2, r2, r3, lsl #5
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
    826e:	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
    8270:	strh.w	r8, [r4, #4]
    8274:	ldrb	r1, [r2, #11]
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    8276:	lsls	r5, r1, #28
    8278:	bmi.n	82a0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    827a:	and.w	r1, r1, #23
    827e:	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    8280:	ldrb	r3, [r2, #11]
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
    8282:	strb	r6, [r4, #3]
  if (!isFileOrSubdir(dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    8284:	tst.w	r3, #24
    m_attributes |= FILE_ATTR_FILE;
    8288:	it	eq
    828a:	orreq.w	r1, r1, #8
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    828e:	and.w	r3, r7, #3
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
    8292:	it	eq
    8294:	strbeq	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    8296:	cmp	r3, #1
    8298:	beq.n	82aa <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
    829a:	cmp	r3, #2
    829c:	beq.n	82f2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xae>
    829e:	cbz	r3, 82e8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    82a0:	movs	r0, #0
    82a2:	strb	r0, [r4, #0]
  m_flags = 0;
    82a4:	strb	r0, [r4, #2]
  return false;
    82a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    82aa:	movs	r3, #2
    82ac:	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    82ae:	ldrb	r1, [r4, #0]
    82b0:	tst.w	r1, #17
    82b4:	bne.n	82a0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    82b6:	sxtb	r1, r3
    82b8:	and.w	r5, r7, #1024	; 0x400
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    82bc:	and.w	r3, r7, #8
    82c0:	orrs	r3, r1
    82c2:	uxtb	r3, r3
    82c4:	strb	r3, [r4, #2]

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    82c6:	ldrh.w	lr, [r2, #20]
    82ca:	ldrh	r1, [r2, #26]
    82cc:	ldr	r6, [r0, #48]	; 0x30
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);

  m_dirSector = m_vol->cacheSectorNumber();
    82ce:	str	r6, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    82d0:	orr.w	r1, r1, lr, lsl #16

  if (oflag & O_TRUNC) {
    82d4:	cbz	r5, 82f8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    82d6:	cbnz	r1, 830e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xca>
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    82d8:	orn	r3, r3, #127	; 0x7f
    82dc:	strb	r3, [r4, #2]
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    82de:	lsls	r3, r7, #17
    82e0:	bmi.n	8300 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    82e2:	movs	r0, #1
    82e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
    82e8:	ands.w	r5, r7, #1024	; 0x400
    82ec:	bne.n	82a0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    82ee:	movs	r1, #1
    82f0:	b.n	82bc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x78>
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    82f2:	movs	r3, #3
    82f4:	strb	r3, [r4, #2]
      break;
    82f6:	b.n	82ae <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
    82f8:	str	r1, [r4, #32]
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    82fa:	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    82fc:	str	r3, [r4, #28]
    82fe:	b.n	82de <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9a>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    8300:	ldr	r1, [r4, #28]
    8302:	mov	r0, r4
    8304:	bl	81b0 <FatFile::seekSet(unsigned long)>
    8308:	cmp	r0, #0
    830a:	bne.n	82e2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9e>
    830c:	b.n	82a0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    830e:	bl	87bc <FatPartition::freeChain(unsigned long)>
    8312:	cmp	r0, #0
    8314:	beq.n	82a0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    8316:	ldrb	r3, [r4, #2]
    8318:	b.n	82d8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
    831a:	nop

0000831c <FatFile::openNext(FatFile*, int)>:
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    831c:	ldrb	r3, [r0, #0]
    831e:	cbnz	r3, 8328 <FatFile::openNext(FatFile*, int)+0xc>
    8320:	ldrb	r3, [r1, #0]
    8322:	tst.w	r3, #112	; 0x70
    8326:	bne.n	832c <FatFile::openNext(FatFile*, int)+0x10>
      lfnOrd = 0;
    }
  }

fail:
  return false;
    8328:	movs	r0, #0
}
    832a:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    832c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8330:	ldr	r6, [r1, #20]
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    8332:	ands.w	r7, r6, #31
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    8336:	sub	sp, #8
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    8338:	bne.n	837e <FatFile::openNext(FatFile*, int)+0x62>
    833a:	mov	r9, r2
    833c:	mov	r5, r1
    833e:	mov	r8, r0
    8340:	mov	sl, r7
    8342:	b.n	8348 <FatFile::openNext(FatFile*, int)+0x2c>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
        lfnOrd = ldir->order & 0X1F;
        checksum = ldir->checksum;
      }
    } else {
      lfnOrd = 0;
    8344:	movs	r7, #0
    8346:	ldr	r6, [r5, #20]
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    DirFat_t* dir = dirFile->readDirCache();
    8348:	movs	r1, #0
    834a:	mov	r0, r5
    834c:	bl	7f3c <FatFile::readDirCache(bool)>
    if (!dir) {
    8350:	cbz	r0, 837e <FatFile::openNext(FatFile*, int)+0x62>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == FAT_NAME_FREE) {
    8352:	ldrb	r3, [r0, #0]
    8354:	cbz	r3, 837e <FatFile::openNext(FatFile*, int)+0x62>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    8356:	cmp	r3, #46	; 0x2e
    8358:	beq.n	8344 <FatFile::openNext(FatFile*, int)+0x28>
    835a:	cmp	r3, #229	; 0xe5
    835c:	beq.n	8344 <FatFile::openNext(FatFile*, int)+0x28>
    835e:	ldrb	r2, [r0, #11]
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
    8360:	lsls	r1, r2, #28
    8362:	bpl.n	8386 <FatFile::openNext(FatFile*, int)+0x6a>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (isLongName(dir)) {
    8364:	cmp	r2, #15
    8366:	bne.n	8344 <FatFile::openNext(FatFile*, int)+0x28>
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    8368:	lsls	r2, r3, #25
    836a:	bpl.n	8346 <FatFile::openNext(FatFile*, int)+0x2a>
        lfnOrd = ldir->order & 0X1F;
    836c:	and.w	r7, r3, #31
        checksum = ldir->checksum;
    8370:	ldrb.w	sl, [r0, #13]
    8374:	b.n	8346 <FatFile::openNext(FatFile*, int)+0x2a>
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    8376:	bl	8a08 <FatFile::lfnChecksum(unsigned char*)>
    837a:	cmp	r0, sl
    837c:	beq.n	838a <FatFile::openNext(FatFile*, int)+0x6e>
      lfnOrd = 0;
    }
  }

fail:
  return false;
    837e:	movs	r0, #0
}
    8380:	add	sp, #8
    8382:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    8386:	cmp	r7, #0
    8388:	bne.n	8376 <FatFile::openNext(FatFile*, int)+0x5a>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    838a:	str	r7, [sp, #0]
    838c:	mov	r3, r9
    838e:	ubfx	r2, r6, #5, #16
    8392:	mov	r1, r5
    8394:	mov	r0, r8
    8396:	bl	8244 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    839a:	b.n	8380 <FatFile::openNext(FatFile*, int)+0x64>

0000839c <FatFile::sync()>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    839c:	ldrb	r3, [r0, #0]
    839e:	cbz	r3, 83a4 <FatFile::sync()+0x8>
    83a0:	b.w	79d4 <FatFile::sync() [clone .part.40]>
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
    83a4:	movs	r0, #1
    83a6:	bx	lr

000083a8 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    83a8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    83ac:	ldrb	r3, [r0, #2]
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    83ae:	lsls	r5, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    83b0:	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    83b2:	bmi.n	83c4 <FatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    83b4:	ldrb	r3, [r4, #1]
    83b6:	orr.w	r3, r3, #1
    83ba:	strb	r3, [r4, #1]
  return -1;
    83bc:	mov.w	r0, #4294967295
    83c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    83c4:	mov	r9, r2
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    83c6:	lsls	r2, r3, #28
    83c8:	mov	r8, r1
    83ca:	bmi.w	854c <FatFile::write(void const*, unsigned int)+0x1a4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    83ce:	ldr	r2, [r4, #20]
    83d0:	mvns	r3, r2
    83d2:	cmp	r9, r3
    83d4:	bhi.n	83b4 <FatFile::write(void const*, unsigned int)+0xc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    83d6:	cmp.w	r9, #0
    83da:	beq.w	855a <FatFile::write(void const*, unsigned int)+0x1b2>
    83de:	mov	r6, r9
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    83e0:	mov.w	sl, #0
    83e4:	b.n	8448 <FatFile::write(void const*, unsigned int)+0xa0>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    83e6:	cmp	r1, #0
    83e8:	beq.n	84de <FatFile::write(void const*, unsigned int)+0x136>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    83ea:	ldrb	r3, [r4, #2]
    83ec:	lsls	r3, r3, #25
    83ee:	bpl.n	84ec <FatFile::write(void const*, unsigned int)+0x144>
    83f0:	ldr	r3, [r4, #28]
    83f2:	cmp	r3, r2
    83f4:	bls.n	84ec <FatFile::write(void const*, unsigned int)+0x144>
          m_curCluster++;
    83f6:	adds	r1, #1
    83f8:	str	r1, [r4, #16]
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    83fa:	bl	864c <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    83fe:	cmp.w	r6, #512	; 0x200
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    8402:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    8404:	bcs.n	8482 <FatFile::write(void const*, unsigned int)+0xda>
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    8406:	ldr	r2, [r4, #20]
    8408:	ldr	r3, [r4, #28]
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    840a:	ldr	r0, [r4, #8]
    840c:	cmp.w	r6, #512	; 0x200
    8410:	mov	r5, r6
    8412:	it	cs
    8414:	movcs.w	r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    8418:	cmp	r2, r3
    841a:	bcc.n	850e <FatFile::write(void const*, unsigned int)+0x166>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    841c:	movs	r2, #5
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    841e:	adds	r0, #40	; 0x28
    8420:	bl	85dc <FatCache::read(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
    8424:	cmp	r0, #0
    8426:	beq.n	83b4 <FatFile::write(void const*, unsigned int)+0xc>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    8428:	add	r0, r7
    842a:	mov	r2, r5
    842c:	mov	r1, r8
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    842e:	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    8430:	bl	e8e8 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    8434:	cmp.w	r7, #512	; 0x200
    8438:	beq.n	852a <FatFile::write(void const*, unsigned int)+0x182>
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    843a:	ldr	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    843c:	subs	r6, r6, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    843e:	add	r2, r5
    src += n;
    8440:	add	r8, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    8442:	str	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    8444:	beq.w	855a <FatFile::write(void const*, unsigned int)+0x1b2>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    8448:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    844a:	ldr	r1, [r4, #16]
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    844c:	ldrb	r3, [r0, #5]
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    844e:	ands.w	r5, r3, r2, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    8452:	ubfx	r7, r2, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    8456:	bne.n	8472 <FatFile::write(void const*, unsigned int)+0xca>
    8458:	cmp	r7, #0
    845a:	beq.n	83e6 <FatFile::write(void const*, unsigned int)+0x3e>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    845c:	bl	864c <FatPartition::clusterStartSector(unsigned long) const>
    8460:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    8462:	rsb	r5, r7, #512	; 0x200
    8466:	cmp	r5, r6
    8468:	it	cs
    846a:	movcs	r5, r6
    846c:	ldr	r0, [r4, #8]
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
    846e:	movs	r2, #1
    8470:	b.n	841e <FatFile::write(void const*, unsigned int)+0x76>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    8472:	bl	864c <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;
    8476:	adds	r1, r5, r0

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    8478:	cmp	r7, #0
    847a:	bne.n	8462 <FatFile::write(void const*, unsigned int)+0xba>
    847c:	cmp.w	r6, #512	; 0x200
    8480:	bcc.n	8406 <FatFile::write(void const*, unsigned int)+0x5e>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    8482:	cmp.w	r6, #1024	; 0x400
    8486:	ldr	r2, [r4, #8]
    8488:	bcc.n	84c2 <FatFile::write(void const*, unsigned int)+0x11a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    848a:	ldrb	r3, [r2, #4]
    848c:	ldr	r7, [r2, #48]	; 0x30
    848e:	subs	r3, r3, r5
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    8490:	lsrs	r0, r6, #9
    8492:	cmp	r3, r0
    8494:	it	cs
    8496:	movcs	r3, r0
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    8498:	cmp	r7, r1
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    849a:	mov.w	r5, r3, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    849e:	bcc.n	84b2 <FatFile::write(void const*, unsigned int)+0x10a>
    84a0:	add	r7, r3
    84a2:	cmp	r7, r1
    84a4:	bls.n	84b2 <FatFile::write(void const*, unsigned int)+0x10a>
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    84a6:	strb.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
    84aa:	mov.w	r0, #4294967295
    84ae:	str	r0, [r2, #48]	; 0x30
    84b0:	ldr	r2, [r4, #8]
    84b2:	ldr	r0, [r2, #0]
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    return m_blockDev->writeSectors(sector, src, ns);
    84b4:	ldr	r2, [r0, #0]
    84b6:	ldr	r7, [r2, #28]
    84b8:	mov	r2, r8
    84ba:	blx	r7
        // Invalidate cache if cache sector is in the range.
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, nSector)) {
    84bc:	cmp	r0, #0
    84be:	bne.n	843a <FatFile::write(void const*, unsigned int)+0x92>
    84c0:	b.n	83b4 <FatFile::write(void const*, unsigned int)+0xc>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->cacheSectorNumber() == sector) {
    84c2:	ldr	r3, [r2, #48]	; 0x30
    84c4:	cmp	r3, r1
    84c6:	beq.n	851c <FatFile::write(void const*, unsigned int)+0x174>
    84c8:	ldr	r0, [r2, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    84ca:	ldr	r3, [r0, #0]
    84cc:	mov	r2, r8
    84ce:	ldr	r3, [r3, #24]
    84d0:	blx	r3
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    84d2:	cmp	r0, #0
    84d4:	beq.w	83b4 <FatFile::write(void const*, unsigned int)+0xc>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    84d8:	mov.w	r5, #512	; 0x200
    84dc:	b.n	843a <FatFile::write(void const*, unsigned int)+0x92>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    84de:	ldr	r1, [r4, #32]
    84e0:	cbz	r1, 8538 <FatFile::write(void const*, unsigned int)+0x190>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    84e2:	str	r1, [r4, #16]
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    84e4:	bl	864c <FatPartition::clusterStartSector(unsigned long) const>
    84e8:	mov	r1, r0
    84ea:	b.n	847c <FatFile::write(void const*, unsigned int)+0xd4>
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    84ec:	add.w	r2, r4, #16
    84f0:	bl	8658 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    84f4:	cmp	r0, #0
    84f6:	blt.w	83b4 <FatFile::write(void const*, unsigned int)+0xc>
        if (fg < 0) {
          DBG_FAIL_MACRO;
          goto fail;
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
    84fa:	bne.n	8508 <FatFile::write(void const*, unsigned int)+0x160>
          // add cluster if at end of chain
          if (!addCluster()) {
    84fc:	mov	r0, r4
    84fe:	bl	78ec <FatFile::addCluster()>
    8502:	cmp	r0, #0
    8504:	beq.w	83b4 <FatFile::write(void const*, unsigned int)+0xc>
    8508:	ldr	r0, [r4, #8]
    850a:	ldr	r1, [r4, #16]
    850c:	b.n	84e4 <FatFile::write(void const*, unsigned int)+0x13c>
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    850e:	ldrb	r3, [r4, #2]
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    8510:	tst.w	r3, #32
    8514:	ite	eq
    8516:	moveq	r2, #1
    8518:	movne	r2, #5
    851a:	b.n	841e <FatFile::write(void const*, unsigned int)+0x76>
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    851c:	strb.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
    8520:	mov.w	r3, #4294967295
    8524:	str	r3, [r2, #48]	; 0x30
    8526:	ldr	r2, [r4, #8]
    8528:	b.n	84c8 <FatFile::write(void const*, unsigned int)+0x120>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    852a:	ldr	r0, [r4, #8]
    852c:	adds	r0, #40	; 0x28
    852e:	bl	863c <FatCache::sync()>
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->cacheSyncData()) {
    8532:	cmp	r0, #0
    8534:	bne.n	843a <FatFile::write(void const*, unsigned int)+0x92>
    8536:	b.n	83b4 <FatFile::write(void const*, unsigned int)+0xc>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    8538:	mov	r0, r4
    853a:	bl	78ec <FatFile::addCluster()>
    853e:	cmp	r0, #0
    8540:	beq.w	83b4 <FatFile::write(void const*, unsigned int)+0xc>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    8544:	ldr	r1, [r4, #16]
    8546:	str	r1, [r4, #32]
    8548:	ldr	r0, [r4, #8]
    854a:	b.n	84e4 <FatFile::write(void const*, unsigned int)+0x13c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_fileSize)) {
    854c:	ldr	r1, [r0, #28]
    854e:	bl	81b0 <FatFile::seekSet(unsigned long)>
    8552:	cmp	r0, #0
    8554:	beq.w	83b4 <FatFile::write(void const*, unsigned int)+0xc>
    8558:	b.n	83ce <FatFile::write(void const*, unsigned int)+0x26>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    855a:	ldr	r3, [r4, #28]
    855c:	cmp	r3, r2
    855e:	bcc.n	8574 <FatFile::write(void const*, unsigned int)+0x1cc>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    8560:	ldr	r3, [pc, #40]	; (858c <FatFile::write(void const*, unsigned int)+0x1e4>)
    8562:	ldr	r3, [r3, #0]
    8564:	cbz	r3, 8584 <FatFile::write(void const*, unsigned int)+0x1dc>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    8566:	ldrb	r3, [r4, #2]
    8568:	orn	r3, r3, #127	; 0x7f
    856c:	strb	r3, [r4, #2]
    856e:	mov	r0, r9
    8570:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    8574:	ldrb	r3, [r4, #2]
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    8576:	str	r2, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    8578:	orn	r3, r3, #127	; 0x7f
    857c:	strb	r3, [r4, #2]
    857e:	mov	r0, r9
    8580:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8584:	mov	r0, r9
    8586:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    858a:	nop
    858c:	.word	0x1fff24d4

00008590 <FatCache::sync() [clone .part.8]>:
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    8590:	push	{r3, r4, r5, r6, r7, lr}
    8592:	ldr	r3, [r0, #4]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    8594:	ldr	r1, [r0, #8]
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    8596:	add.w	r6, r0, #12
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    859a:	mov	r4, r0
    859c:	ldr	r0, [r3, #0]
    859e:	ldr	r3, [r0, #0]
    85a0:	mov	r2, r6
    85a2:	ldr	r3, [r3, #24]
    85a4:	blx	r3
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    85a6:	cbz	r0, 85ba <FatCache::sync() [clone .part.8]+0x2a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    85a8:	ldrb	r3, [r4, #0]
    85aa:	lsls	r2, r3, #30
    85ac:	mov	r5, r0
    85ae:	bmi.n	85c0 <FatCache::sync() [clone .part.8]+0x30>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    85b0:	bic.w	r3, r3, #1
    85b4:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    85b6:	mov	r0, r5
    85b8:	pop	{r3, r4, r5, r6, r7, pc}
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
    85ba:	movs	r5, #0
}
    85bc:	mov	r0, r5
    85be:	pop	{r3, r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    85c0:	ldr	r3, [r4, #4]
    85c2:	ldr	r1, [r4, #8]
    85c4:	ldr	r0, [r3, #0]
    85c6:	ldr	r7, [r3, #16]
    85c8:	ldr	r3, [r0, #0]
    85ca:	mov	r2, r6
    85cc:	add	r1, r7
    85ce:	ldr	r3, [r3, #24]
    85d0:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    85d2:	cmp	r0, #0
    85d4:	beq.n	85ba <FatCache::sync() [clone .part.8]+0x2a>
    85d6:	ldrb	r3, [r4, #0]
    85d8:	b.n	85b0 <FatCache::sync() [clone .part.8]+0x20>
    85da:	nop

000085dc <FatCache::read(unsigned long, unsigned char)>:
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    85dc:	push	{r3, r4, r5, r6, r7, lr}
  if (m_lbn != sector) {
    85de:	ldr	r3, [r0, #8]
    85e0:	cmp	r3, r1
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    85e2:	mov	r6, r0
    85e4:	mov	r4, r2
  if (m_lbn != sector) {
    85e6:	beq.n	8608 <FatCache::read(unsigned long, unsigned char)+0x2c>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    85e8:	ldrb	r3, [r0, #0]
    85ea:	lsls	r2, r3, #31
    85ec:	mov	r7, r1
    85ee:	bmi.n	8616 <FatCache::read(unsigned long, unsigned char)+0x3a>
  if (m_lbn != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    85f0:	lsls	r3, r4, #29
    85f2:	bpl.n	8622 <FatCache::read(unsigned long, unsigned char)+0x46>
    85f4:	add.w	r5, r6, #12
    85f8:	movs	r3, #0
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    85fa:	and.w	r4, r4, #3
    85fe:	orrs	r4, r3
    8600:	strb	r4, [r6, #0]
    8602:	mov	r0, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    8604:	str	r7, [r6, #8]
  return &m_buffer;

fail:

  return nullptr;
}
    8606:	pop	{r3, r4, r5, r6, r7, pc}
    8608:	ldrsb.w	r3, [r0], #12
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    860c:	and.w	r4, r4, #3
    8610:	orrs	r4, r3
    8612:	strb	r4, [r6, #0]
  return &m_buffer;

fail:

  return nullptr;
}
    8614:	pop	{r3, r4, r5, r6, r7, pc}
    8616:	bl	8590 <FatCache::sync() [clone .part.8]>
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    if (!sync()) {
    861a:	cmp	r0, #0
    861c:	bne.n	85f0 <FatCache::read(unsigned long, unsigned char)+0x14>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_buffer;

fail:

  return nullptr;
    861e:	movs	r0, #0
    8620:	pop	{r3, r4, r5, r6, r7, pc}
    8622:	ldr	r3, [r6, #4]
    8624:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    8626:	ldr	r3, [r0, #0]
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    8628:	add.w	r5, r6, #12
    862c:	ldr	r3, [r3, #8]
    862e:	mov	r2, r5
    8630:	mov	r1, r7
    8632:	blx	r3
    8634:	cmp	r0, #0
    8636:	bne.n	85f8 <FatCache::read(unsigned long, unsigned char)+0x1c>
    8638:	b.n	861e <FatCache::read(unsigned long, unsigned char)+0x42>
    863a:	nop

0000863c <FatCache::sync()>:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    863c:	ldrb	r3, [r0, #0]
    863e:	lsls	r3, r3, #31
    8640:	bmi.n	8646 <FatCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    8642:	movs	r0, #1
    8644:	bx	lr
    8646:	b.w	8590 <FatCache::sync() [clone .part.8]>
    864a:	nop

0000864c <FatPartition::clusterStartSector(unsigned long) const>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    864c:	ldrb	r3, [r0, #6]
    864e:	ldr	r0, [r0, #20]
    8650:	subs	r1, #2
    8652:	lsls	r1, r3
}
    8654:	add	r0, r1
    8656:	bx	lr

00008658 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    8658:	cmp	r1, #1
    865a:	bls.n	86c0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
    865c:	ldr	r3, [r0, #28]
    865e:	cmp	r1, r3
    8660:	bhi.n	86c0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    8662:	push	{r4, r5, r6, lr}
    8664:	ldrb	r3, [r0, #7]
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    8666:	cmp	r3, #32
    8668:	mov	r6, r2
    866a:	mov	r5, r0
    866c:	mov	r4, r1
    866e:	beq.n	86a2 <FatPartition::fatGet(unsigned long, unsigned long*)+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    8670:	cmp	r3, #16
    8672:	bne.n	869c <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
    8674:	ldr	r3, [r0, #24]
    8676:	ubfx	r1, r1, #8, #8
    867a:	add	r1, r3
    867c:	movs	r2, #2
    867e:	add.w	r0, r0, #564	; 0x234
    8682:	bl	85dc <FatCache::read(unsigned long, unsigned char)>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    8686:	cbz	r0, 869c <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    8688:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    868a:	ldrh.w	r3, [r0, r1, lsl #1]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    868e:	ldr	r2, [r5, #28]
    8690:	cmp	r3, r2
    return 0;
  }
  *value = next;
  return 1;
    8692:	itte	ls
    8694:	movls	r0, #1
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
  }
  *value = next;
    8696:	strls	r3, [r6, #0]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
    8698:	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
    869a:	pop	{r4, r5, r6, pc}
  }
  *value = next;
  return 1;

fail:
  return -1;
    869c:	mov.w	r0, #4294967295
    86a0:	pop	{r4, r5, r6, pc}
    86a2:	ldr	r1, [r0, #24]
    86a4:	movs	r2, #2
    86a6:	add.w	r1, r1, r4, lsr #7
    86aa:	add.w	r0, r0, #564	; 0x234
    86ae:	bl	85dc <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    86b2:	cmp	r0, #0
    86b4:	beq.n	869c <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    86b6:	and.w	r1, r4, #127	; 0x7f
    86ba:	ldr.w	r3, [r0, r1, lsl #2]
    86be:	b.n	868e <FatPartition::fatGet(unsigned long, unsigned long*)+0x36>
  }
  *value = next;
  return 1;

fail:
  return -1;
    86c0:	mov.w	r0, #4294967295
}
    86c4:	bx	lr
    86c6:	nop

000086c8 <FatPartition::fatPut(unsigned long, unsigned long)>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    86c8:	cmp	r1, #1
    86ca:	bls.n	8708 <FatPartition::fatPut(unsigned long, unsigned long)+0x40>
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    86cc:	push	{r3, r4, r5, lr}
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    86ce:	ldr	r3, [r0, #28]
    86d0:	cmp	r1, r3
    86d2:	bhi.n	86e2 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    86d4:	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    86d6:	cmp	r3, #32
    86d8:	mov	r5, r2
    86da:	mov	r4, r1
    86dc:	beq.n	870c <FatPartition::fatPut(unsigned long, unsigned long)+0x44>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    86de:	cmp	r3, #16
    86e0:	beq.n	86e6 <FatPartition::fatPut(unsigned long, unsigned long)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    86e2:	movs	r0, #0
    86e4:	pop	{r3, r4, r5, pc}
    86e6:	ldr	r3, [r0, #24]
    86e8:	ubfx	r1, r1, #8, #8
    86ec:	add	r1, r3
    86ee:	add.w	r0, r0, #564	; 0x234
    86f2:	movs	r2, #3
    86f4:	bl	85dc <FatCache::read(unsigned long, unsigned char)>

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    86f8:	mov	r3, r0
    86fa:	cmp	r0, #0
    86fc:	beq.n	86e2 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    86fe:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe16(reinterpret_cast<uint8_t*>
           (&pc->fat16[cluster & (m_sectorMask >> 1)]), value);
    return true;
    8700:	movs	r0, #1
    8702:	strh.w	r5, [r3, r1, lsl #1]
    goto fail;
  }

fail:
  return false;
}
    8706:	pop	{r3, r4, r5, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    8708:	movs	r0, #0
}
    870a:	bx	lr
    870c:	ldr	r1, [r0, #24]
    870e:	movs	r2, #3
    8710:	add.w	r0, r0, #564	; 0x234
    8714:	add.w	r1, r1, r4, lsr #7
    8718:	bl	85dc <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    871c:	mov	r3, r0
    871e:	cmp	r0, #0
    8720:	beq.n	86e2 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    8722:	and.w	r1, r4, #127	; 0x7f
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
    8726:	movs	r0, #1
    8728:	str.w	r5, [r3, r1, lsl #2]
    872c:	pop	{r3, r4, r5, pc}
    872e:	nop

00008730 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    8730:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    8734:	ldr	r4, [r0, #12]
    8736:	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    8738:	sub	sp, #8
    873a:	mov	r5, r0
    873c:	mov	r7, r1
    873e:	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    8740:	itte	cc
    8742:	movcc	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
    8744:	movcc	r6, #0
  } else {
    find = m_allocSearchStart;
    setStart = true;
    8746:	movcs	r6, #1
    8748:	ldr	r3, [r5, #28]
  }
  while (1) {
    find++;
    874a:	adds	r4, #1
    if (find > m_lastCluster) {
    874c:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    874e:	add	r2, sp, #4
    8750:	mov	r0, r5
    8752:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    8754:	bls.n	876a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x3a>
      if (setStart) {
    8756:	cbnz	r6, 87b2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x82>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
    8758:	ldr	r4, [r5, #12]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    875a:	adds	r4, #1
    if (find > m_lastCluster) {
    875c:	cmp	r4, r3
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
      setStart = true;
    875e:	mov.w	r6, #1
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    8762:	add	r2, sp, #4
    8764:	mov	r0, r5
    8766:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    8768:	bhi.n	8756 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x26>
      }
      find = m_allocSearchStart;
      setStart = true;
      continue;
    }
    if (find == current) {
    876a:	cmp	r7, r4
    876c:	beq.n	87b2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x82>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    876e:	bl	8658 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    8772:	cmp	r0, #0
    8774:	blt.n	87b2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x82>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
    8776:	beq.n	8748 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    8778:	ldr	r3, [sp, #4]
    877a:	cmp	r3, #0
    877c:	bne.n	8748 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
      break;
    }
  }
  if (setStart) {
    877e:	cbz	r6, 8782 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x52>
    m_allocSearchStart = find;
    8780:	str	r4, [r5, #12]
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    8782:	mvn.w	r2, #4026531840	; 0xf0000000
    8786:	mov	r1, r4
    8788:	mov	r0, r5
    878a:	bl	86c8 <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    878e:	mov	r6, r0
    8790:	cbz	r0, 87b2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x82>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    8792:	cbnz	r7, 87a4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x74>
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
    8794:	ldr	r3, [r5, #36]	; 0x24
    8796:	cmp	r3, #0
    8798:	blt.n	879e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6e>
      m_freeClusterCount += change;
    879a:	subs	r3, #1
    879c:	str	r3, [r5, #36]	; 0x24
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
    879e:	str.w	r4, [r8]
  return true;
    87a2:	b.n	87b4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
    87a4:	mov	r1, r7
    87a6:	mov	r2, r4
    87a8:	mov	r0, r5
    87aa:	bl	86c8 <FatPartition::fatPut(unsigned long, unsigned long)>
    87ae:	cmp	r0, #0
    87b0:	bne.n	8794 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x64>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
    87b2:	movs	r6, #0
}
    87b4:	mov	r0, r6
    87b6:	add	sp, #8
    87b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000087bc <FatPartition::freeChain(unsigned long)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    87bc:	push	{r4, r5, r6, lr}
    87be:	mov	r5, r0
    87c0:	sub	sp, #8
    87c2:	mov	r4, r1
    87c4:	b.n	87e6 <FatPartition::freeChain(unsigned long)+0x2a>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    87c6:	bl	86c8 <FatPartition::fatPut(unsigned long, unsigned long)>
    87ca:	cbz	r0, 87fc <FatPartition::freeChain(unsigned long)+0x40>
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
    87cc:	ldr	r3, [r5, #36]	; 0x24
    87ce:	cmp	r3, #0
      m_freeClusterCount += change;
    87d0:	itt	ge
    87d2:	addge	r3, #1
    87d4:	strge	r3, [r5, #36]	; 0x24
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
    87d6:	ldr	r3, [r5, #12]
    87d8:	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
    87da:	itt	cc
    87dc:	addcc.w	r4, r4, #4294967295
    87e0:	strcc	r4, [r5, #12]
    }
    cluster = next;
    87e2:	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    87e4:	cbz	r6, 87fe <FatPartition::freeChain(unsigned long)+0x42>
    fg = fatGet(cluster, &next);
    87e6:	add	r2, sp, #4
    87e8:	mov	r1, r4
    87ea:	mov	r0, r5
    87ec:	bl	8658 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    87f0:	subs	r6, r0, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    87f2:	mov	r1, r4
    87f4:	mov.w	r2, #0
    87f8:	mov	r0, r5
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    87fa:	bge.n	87c6 <FatPartition::freeChain(unsigned long)+0xa>
  } while (fg);

  return true;

fail:
  return false;
    87fc:	movs	r0, #0
}
    87fe:	add	sp, #8
    8800:	pop	{r4, r5, r6, pc}
    8802:	nop

00008804 <FatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    8804:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    8808:	ldr	r4, [r0, #36]	; 0x24
    880a:	cmp	r4, #0
    880c:	blt.n	8814 <FatPartition::freeClusterCount()+0x10>
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
}
    880e:	mov	r0, r4
    8810:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8814:	ldrb	r3, [r0, #7]
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    8816:	ldr	r2, [r0, #28]
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    8818:	cmp	r3, #16
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    881a:	add.w	r8, r2, #1
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    881e:	beq.n	882e <FatPartition::freeClusterCount()+0x2a>
    8820:	cmp	r3, #32
    8822:	beq.n	882e <FatPartition::freeClusterCount()+0x2a>
  }
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
    8824:	mov.w	r4, #4294967295
}
    8828:	mov	r0, r4
    882a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    882e:	mov	r6, r0
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    8830:	ldr	r5, [r0, #24]
    while (todo) {
    8832:	cmp.w	r8, #0
    8836:	beq.n	88b6 <FatPartition::freeClusterCount()+0xb2>
    8838:	add.w	r7, r0, #564	; 0x234
    883c:	movs	r4, #0
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
    883e:	mov	r1, r5
    8840:	movs	r2, #2
    8842:	mov	r0, r7
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
    8844:	adds	r5, #1
    8846:	bl	85dc <FatCache::read(unsigned long, unsigned char)>
      if (!pc) {
    884a:	cmp	r0, #0
    884c:	beq.n	8824 <FatPartition::freeClusterCount()+0x20>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    884e:	ldrb	r3, [r6, #7]
    8850:	cmp	r3, #16
    8852:	beq.n	8884 <FatPartition::freeClusterCount()+0x80>
      if (todo < n) {
    8854:	cmp.w	r8, #127	; 0x7f
    8858:	bhi.n	88ae <FatPartition::freeClusterCount()+0xaa>
        n = todo;
    885a:	uxth.w	r1, r8
    885e:	mov	lr, r8
    8860:	subs	r1, #1
    8862:	uxth	r1, r1
    8864:	add.w	r1, r0, r1, lsl #2
    8868:	subs	r3, r0, #4
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat32[i] == 0) {
    886a:	ldr.w	r2, [r3, #4]!
    886e:	cbnz	r2, 8872 <FatPartition::freeClusterCount()+0x6e>
            free++;
    8870:	adds	r4, #1
          if (pc->fat16[i] == 0) {
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
    8872:	cmp	r3, r1
    8874:	bne.n	886a <FatPartition::freeClusterCount()+0x66>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    8876:	subs.w	r8, r8, lr
    887a:	bne.n	883e <FatPartition::freeClusterCount()+0x3a>
  }
#endif  // USE_MULTI_SECTOR_IO
#if MAINTAIN_FREE_CLUSTER_COUNT
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
    887c:	str	r4, [r6, #36]	; 0x24
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
}
    887e:	mov	r0, r4
    8880:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    8884:	cmp.w	r8, #255	; 0xff
    8888:	bls.n	88ba <FatPartition::freeClusterCount()+0xb6>
    888a:	mov.w	lr, #256	; 0x100
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    888e:	mov	r3, lr
    8890:	subs	r1, r3, #1
    8892:	uxth	r1, r1
    8894:	add.w	r1, r0, r1, lsl #1
    8898:	subs	r3, r0, #2
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat16[i] == 0) {
    889a:	ldrh.w	r2, [r3, #2]!
    889e:	cbnz	r2, 88a2 <FatPartition::freeClusterCount()+0x9e>
            free++;
    88a0:	adds	r4, #1
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
    88a2:	cmp	r1, r3
    88a4:	bne.n	889a <FatPartition::freeClusterCount()+0x96>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    88a6:	subs.w	r8, r8, lr
    88aa:	bne.n	883e <FatPartition::freeClusterCount()+0x3a>
    88ac:	b.n	887c <FatPartition::freeClusterCount()+0x78>
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    88ae:	mov.w	lr, #128	; 0x80
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    88b2:	mov	r1, lr
    88b4:	b.n	8860 <FatPartition::freeClusterCount()+0x5c>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    88b6:	mov	r4, r8
    88b8:	b.n	887c <FatPartition::freeClusterCount()+0x78>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
    88ba:	uxth.w	r3, r8
    88be:	mov	lr, r8
    88c0:	b.n	8890 <FatPartition::freeClusterCount()+0x8c>
    88c2:	nop

000088c4 <FatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
    88c4:	push	{r3, r4, r5, r6, r7, lr}
    88c6:	mov	r4, r0
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    88c8:	movs	r3, #0
  m_allocSearchStart = 1;
    88ca:	movs	r5, #1
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
    88cc:	mov.w	r0, #4294967295
    88d0:	str	r5, [r4, #12]
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    88d2:	str	r1, [r4, #0]
  }
  /** Initialize the cache.
   * \param[in] vol FatPartition that owns this FatCache.
   */
  void init(FatPartition *vol) {
    m_part = vol;
    88d4:	str	r4, [r4, #44]	; 0x2c
    88d6:	str.w	r4, [r4, #568]	; 0x238
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    88da:	strb	r3, [r4, #7]
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    88dc:	strb.w	r3, [r4, #40]	; 0x28
    88e0:	strb.w	r3, [r4, #564]	; 0x234
    m_lbn = 0XFFFFFFFF;
    88e4:	str	r0, [r4, #48]	; 0x30
    88e6:	str.w	r0, [r4, #572]	; 0x23c
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    88ea:	mov	r5, r2
    88ec:	cbz	r2, 8926 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    88ee:	cmp	r2, #4
    88f0:	bls.n	88f6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x32>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    88f2:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    88f4:	pop	{r3, r4, r5, r6, r7, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    88f6:	add.w	r6, r4, #40	; 0x28
    88fa:	mov	r2, r3
    88fc:	mov	r1, r3
    88fe:	mov	r0, r6
    8900:	bl	85dc <FatCache::read(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    mbr = reinterpret_cast<MbrSector_t*>
          (cacheFetchData(0, FatCache::CACHE_FOR_READ));
    MbrPart_t *mp = mbr->part + part - 1;
    8904:	add.w	r5, r5, #268435456	; 0x10000000
    8908:	subs	r5, #1
    890a:	lsls	r5, r5, #4
    890c:	add.w	r3, r0, #446	; 0x1be
    8910:	adds	r2, r3, r5

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    8912:	cmp	r0, #0
    8914:	beq.n	88f2 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    8916:	ldrb	r1, [r2, #4]
    8918:	cmp	r1, #0
    891a:	beq.n	88f2 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    891c:	ldrb	r3, [r3, r5]
    891e:	lsls	r3, r3, #25
    8920:	bne.n	88f2 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    8922:	ldr	r5, [r2, #8]
    8924:	b.n	892a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x66>
    8926:	add.w	r6, r4, #40	; 0x28
    892a:	mov	r0, r6
    892c:	movs	r2, #0
    892e:	mov	r1, r5
    8930:	bl	85dc <FatCache::read(unsigned long, unsigned char)>
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FatCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    8934:	cmp	r0, #0
    8936:	beq.n	88f2 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    8938:	ldrb	r3, [r0, #16]
    893a:	cmp	r3, #2
    893c:	bne.n	88f2 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    893e:	ldrh.w	r3, [r0, #11]
    8942:	cmp.w	r3, #512	; 0x200
    8946:	bne.n	88f2 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    8948:	ldrb	r6, [r0, #13]
    894a:	strb	r6, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    894c:	subs	r3, r6, #1
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    894e:	movs	r2, #0
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    8950:	cmp	r6, #1
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    8952:	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    8954:	strb	r2, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    8956:	beq.n	8978 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb4>
    8958:	movs	r2, #1
    895a:	mov	r1, r2
    895c:	b.n	8960 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9c>
    895e:	mov	r2, r3
    8960:	lsls	r1, r1, #1
    8962:	uxtb	r1, r1
    8964:	adds	r3, r2, #1
    8966:	cmp	r6, r1
    8968:	uxtb	r3, r3
    896a:	beq.n	8976 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb2>
    if (tmp == 0) {
    896c:	cmp	r3, #9
    896e:	bne.n	895e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9a>
    8970:	strb	r2, [r4, #6]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    8972:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    8974:	pop	{r3, r4, r5, r6, r7, pc}
    8976:	strb	r2, [r4, #6]
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    8978:	ldrh	r1, [r0, #22]
    897a:	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    897c:	cbnz	r1, 8982 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xbe>
    897e:	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    8980:	str	r1, [r4, #16]
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    8982:	ldrh	r7, [r0, #14]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    8984:	ldrh.w	r3, [r0, #17]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    8988:	strh	r3, [r4, #8]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    898a:	add	r7, r5
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    898c:	lsls	r3, r3, #5

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    898e:	add.w	r6, r7, r1, lsl #1
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    8992:	addw	r3, r3, #511	; 0x1ff
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
    8996:	ldrh.w	r1, [r0, #19]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    899a:	str	r7, [r4, #24]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    899c:	add.w	r3, r6, r3, asr #9

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    89a0:	str	r6, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    89a2:	str	r3, [r4, #20]

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    89a4:	cbnz	r1, 89a8 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xe4>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    89a6:	ldr	r1, [r0, #32]
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    89a8:	subs	r5, r5, r3
    89aa:	add	r5, r1

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
    89ac:	lsr.w	r2, r5, r2
  m_lastCluster = clusterCount + 1;

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    89b0:	movw	r3, #4084	; 0xff4
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    89b4:	adds	r5, r2, #1
  }
#endif  // USE_MULTI_SECTOR_IO
#if MAINTAIN_FREE_CLUSTER_COUNT
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
    89b6:	mov.w	r1, #4294967295

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    89ba:	cmp	r2, r3
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    89bc:	str	r5, [r4, #28]
    89be:	str	r1, [r4, #36]	; 0x24

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    89c0:	bls.n	89d8 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x114>
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    89c2:	movw	r3, #65524	; 0xfff4
    89c6:	cmp	r2, r3
    89c8:	ittet	hi
    89ca:	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    89cc:	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
    89ce:	movls	r3, #16
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
    89d0:	movhi	r3, #32
    89d2:	strb	r3, [r4, #7]
  }
  return true;
    89d4:	movs	r0, #1
    89d6:	pop	{r3, r4, r5, r6, r7, pc}

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    89d8:	movs	r3, #12
    89da:	strb	r3, [r4, #7]
    89dc:	b.n	88f2 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    89de:	nop

000089e0 <lfnGetChar(DirLfn_t*, unsigned char)>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    89e0:	cmp	r1, #4
    89e2:	bls.n	89fe <lfnGetChar(DirLfn_t*, unsigned char)+0x1e>
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    89e4:	cmp	r1, #10
    89e6:	bls.n	89f6 <lfnGetChar(DirLfn_t*, unsigned char)+0x16>
    return getLe16(ldir->unicode2 + 2*i - 10);
  } else if (i < 13) {
    89e8:	cmp	r1, #12
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    89ea:	itte	ls
    89ec:	addls.w	r1, r0, r1, lsl #1
    89f0:	ldrhls	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2*i - 22);
  }
  return 0;
    89f2:	movhi	r0, #0
}
    89f4:	bx	lr
    89f6:	add.w	r1, r0, r1, lsl #1
    89fa:	ldrh	r0, [r1, #4]
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2*i - 10);
    89fc:	bx	lr
    89fe:	add.w	r1, r0, r1, lsl #1
    8a02:	ldrh.w	r0, [r1, #1]
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
    8a06:	bx	lr

00008a08 <FatFile::lfnChecksum(unsigned char*)>:
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
    8a08:	push	{r4}
    8a0a:	subs	r2, r0, #1
    8a0c:	add.w	r4, r0, #10
  uint8_t sum = 0;
    8a10:	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    8a12:	ldrb.w	r1, [r2, #1]!
    8a16:	lsrs	r3, r0, #1
    8a18:	orr.w	r0, r3, r0, lsl #7
    8a1c:	uxtab	r0, r1, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    8a20:	cmp	r4, r2
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    8a22:	uxtb	r0, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    8a24:	bne.n	8a12 <FatFile::lfnChecksum(unsigned char*)+0xa>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
    8a26:	ldr.w	r4, [sp], #4
    8a2a:	bx	lr

00008a2c <FatFile::openCluster(FatFile*)>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
    8a2c:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    8a2e:	ldr	r3, [r1, #12]
    8a30:	cbz	r3, 8a50 <FatFile::openCluster(FatFile*)+0x24>
    8a32:	mov	r5, r0
    8a34:	mov	r4, r1
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
    8a36:	movs	r2, #36	; 0x24
    8a38:	movs	r1, #0
    8a3a:	bl	117bc <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    8a3e:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    8a40:	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
    8a42:	strb	r3, [r5, #0]
  m_flags = FILE_FLAG_READ;
    8a44:	strb	r0, [r5, #2]
  m_vol = file->m_vol;
    8a46:	ldr	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    8a48:	ldr	r3, [r4, #12]
    8a4a:	str	r3, [r5, #32]
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
    8a4c:	str	r2, [r5, #8]
  m_firstCluster = file->m_dirCluster;
  return true;
}
    8a4e:	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    8a50:	ldr	r1, [r1, #8]
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
    8a52:	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    8a56:	b.w	7d6c <FatFile::openRoot(FatVolume*)>
    8a5a:	nop

00008a5c <FatFile::getName(char*, unsigned int)>:
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
    8a5c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8a60:	sub	sp, #52	; 0x34
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    8a62:	ldrb	r3, [r0, #0]
    8a64:	movs	r4, #0
    8a66:	strb.w	r4, [sp, #12]
    8a6a:	strb.w	r4, [sp, #13]
    8a6e:	strb.w	r4, [sp, #14]
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
    8a72:	mov	r9, r1
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    8a74:	cbz	r3, 8a7c <FatFile::getName(char*, unsigned int)+0x20>
    8a76:	cmp	r2, #12
    8a78:	mov	r5, r2
    8a7a:	bhi.n	8a8a <FatFile::getName(char*, unsigned int)+0x2e>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
    8a7c:	movs	r7, #0
    8a7e:	strb.w	r7, [r9]
  return false;
}
    8a82:	mov	r0, r7
    8a84:	add	sp, #52	; 0x34
    8a86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    8a8a:	ldrb	r3, [r0, #3]
    8a8c:	mov	r8, r0
    8a8e:	cmp	r3, #0
    8a90:	beq.n	8b4a <FatFile::getName(char*, unsigned int)+0xee>
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
    8a92:	add	r0, sp, #12
    8a94:	mov	r1, r8
    8a96:	bl	8a2c <FatFile::openCluster(FatFile*)>
    8a9a:	cmp	r0, #0
    8a9c:	beq.n	8a7c <FatFile::getName(char*, unsigned int)+0x20>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    8a9e:	ldrb.w	r3, [r8, #3]
    8aa2:	cmp	r3, #0
    8aa4:	beq.n	8a7c <FatFile::getName(char*, unsigned int)+0x20>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    8aa6:	str	r4, [sp, #4]
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    8aa8:	movs	r6, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    8aaa:	ldrh.w	r1, [r8, #4]
    8aae:	subs	r1, r1, r6
    8ab0:	lsls	r1, r1, #5
    8ab2:	add	r0, sp, #12
    8ab4:	bl	81b0 <FatFile::seekSet(unsigned long)>
    8ab8:	mov	r7, r0
    8aba:	cmp	r0, #0
    8abc:	beq.n	8a7c <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    8abe:	movs	r1, #0
    8ac0:	add	r0, sp, #12
    8ac2:	bl	7f3c <FatFile::readDirCache(bool)>
    if (!ldir) {
    8ac6:	mov	sl, r0
    8ac8:	cmp	r0, #0
    8aca:	beq.n	8a7c <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME) {
    8acc:	ldrb	r3, [r0, #11]
    8ace:	cmp	r3, #15
    8ad0:	bne.n	8a7c <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (order != (ldir->order & 0X1F)) {
    8ad2:	ldrb	r3, [r0, #0]
    8ad4:	and.w	r3, r3, #31
    8ad8:	cmp	r6, r3
    8ada:	bne.n	8a7c <FatFile::getName(char*, unsigned int)+0x20>
  return 0;
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
    8adc:	subs	r3, r6, #1
    8ade:	add.w	r2, r3, r3, lsl #1
    8ae2:	add.w	r2, r3, r2, lsl #2
    8ae6:	mov	r3, r2
    8ae8:	add.w	r4, r9, r2
    8aec:	add.w	fp, r2, #13
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    8af0:	subs	r1, r3, r2
    8af2:	uxtb	r1, r1
    8af4:	mov	r0, sl
    8af6:	bl	89e0 <lfnGetChar(DirLfn_t*, unsigned char)>
    if (c == 0 || k >= n) {
    8afa:	cbz	r0, 8b58 <FatFile::getName(char*, unsigned int)+0xfc>
    8afc:	cmp	r5, r3
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    8afe:	add.w	r3, r3, #1
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
    8b02:	bls.n	8b28 <FatFile::getName(char*, unsigned int)+0xcc>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    8b04:	cmp	r0, #126	; 0x7e
    8b06:	ite	ls
    8b08:	uxtbls	r0, r0
    8b0a:	movhi	r0, #63	; 0x3f
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    8b0c:	cmp	fp, r3
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    8b0e:	strb.w	r0, [r4], #1
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    8b12:	bne.n	8af0 <FatFile::getName(char*, unsigned int)+0x94>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
  }
  // Terminate with zero byte if name fits.
  if (k < n && (ldir->order & FAT_ORDER_LAST_LONG_ENTRY)) {
    8b14:	cmp	r5, fp
    8b16:	bls.n	8b28 <FatFile::getName(char*, unsigned int)+0xcc>
    8b18:	ldrb.w	r3, [sl]
    8b1c:	lsls	r2, r3, #25
    name[k] = 0;
    8b1e:	itt	mi
    8b20:	ldrbmi.w	r3, [sp, #4]
    8b24:	strbmi.w	r3, [r9, fp]
  }
  // Truncate if name is too long.
  name[n - 1] = 0;
    8b28:	add.w	r3, r9, r5
    8b2c:	ldrb.w	r2, [sp, #4]
    8b30:	strb.w	r2, [r3, #-1]
    }
    if (!lfnGetName(ldir, name, size)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    8b34:	ldrb.w	r3, [sl]
    8b38:	lsls	r3, r3, #25
    8b3a:	bmi.n	8a82 <FatFile::getName(char*, unsigned int)+0x26>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    8b3c:	adds	r6, #1
    8b3e:	ldrb.w	r3, [r8, #3]
    8b42:	uxtb	r6, r6
    8b44:	cmp	r3, r6
    8b46:	bcs.n	8aaa <FatFile::getName(char*, unsigned int)+0x4e>
    8b48:	b.n	8a7c <FatFile::getName(char*, unsigned int)+0x20>
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    return getSFN(name);
    8b4a:	bl	9368 <FatFile::getSFN(char*)>
    8b4e:	mov	r7, r0
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
  return false;
}
    8b50:	mov	r0, r7
    8b52:	add	sp, #52	; 0x34
    8b54:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
    8b58:	mov	fp, r3
    8b5a:	b.n	8b14 <FatFile::getName(char*, unsigned int)+0xb8>

00008b5c <FatFile::parsePathName(char const*, fname_t*, char const**)>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    8b5c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
    8b60:	ldrb	r3, [r0, #0]
    8b62:	cmp	r3, #32
    8b64:	bne.n	8b6e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12>
    8b66:	ldrb.w	r3, [r0, #1]!
    8b6a:	cmp	r3, #32
    8b6c:	beq.n	8b66 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
    8b6e:	str	r0, [r1, #8]

  for (len = 0; ; len++) {
    c = path[len];
    8b70:	ldrb	r3, [r0, #0]
    if (c == 0 || isDirSeparator(c)) {
    8b72:	cmp	r3, #0
    8b74:	beq.w	8d86 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x22a>
    8b78:	cmp	r3, #47	; 0x2f
    8b7a:	beq.n	8bdc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x80>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    8b7c:	cmp	r3, #92	; 0x5c
    8b7e:	beq.n	8bc6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    8b80:	sub.w	r4, r3, #34	; 0x22
    8b84:	uxtb	r4, r4
    8b86:	cmp	r4, #29
    8b88:	bls.n	8bcc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x70>
    8b8a:	ldr.w	lr, [pc, #536]	; 8da4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x248>
    8b8e:	adds	r6, r0, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    8b90:	movs	r4, #0
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    8b92:	cmp	r3, #124	; 0x7c
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    8b94:	sub.w	r5, r3, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    8b98:	mov	r7, r6
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    8b9a:	beq.n	8bc6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    8b9c:	cmp	r5, #94	; 0x5e
    8b9e:	bhi.n	8bc6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    8ba0:	ldrb.w	r3, [r6], #1
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    8ba4:	sub.w	r5, r3, #34	; 0x22
    8ba8:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    8baa:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    8bac:	cmp	r3, #0
    8bae:	beq.w	8d58 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1fc>
    8bb2:	cmp	r3, #47	; 0x2f
    8bb4:	beq.n	8bde <FatFile::parsePathName(char const*, fname_t*, char const**)+0x82>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    8bb6:	cmp	r3, #92	; 0x5c
    8bb8:	lsr.w	r7, lr, r5
    8bbc:	beq.n	8bc6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    8bbe:	cmp	r5, #29
    8bc0:	bhi.n	8b92 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    8bc2:	lsls	r7, r7, #31
    8bc4:	bpl.n	8b92 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    8bc6:	movs	r0, #0
    8bc8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    8bcc:	ldr	r5, [pc, #468]	; (8da4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x248>)
    8bce:	lsr.w	r4, r5, r4
    8bd2:	lsls	r4, r4, #31
    8bd4:	bpl.n	8b8a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x2e>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    8bd6:	movs	r0, #0
    8bd8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    8bdc:	movs	r4, #0
    8bde:	adds	r7, r0, r4
    8be0:	mov	r6, r7
    8be2:	mov	r5, r4
    8be4:	movs	r3, #47	; 0x2f
    8be6:	b.n	8bee <FatFile::parsePathName(char const*, fname_t*, char const**)+0x92>
    8be8:	ldrb.w	r3, [r6, #1]!
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    8bec:	adds	r5, #1
    8bee:	cmp	r3, #32
    8bf0:	beq.n	8be8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8c>
    8bf2:	cmp	r3, #47	; 0x2f
    8bf4:	beq.n	8be8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8c>
  *ptr = &path[end];
    8bf6:	add	r5, r0
    8bf8:	str	r5, [r2, #0]

  // Back over spaces and dots.
  while (len) {
    8bfa:	cbz	r4, 8c10 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb4>
    8bfc:	mov	r2, r7
    c = path[len - 1];
    8bfe:	ldrb.w	r3, [r2, #-1]!
    if (c != '.' && c != ' ') {
    8c02:	cmp	r3, #46	; 0x2e
    8c04:	beq.n	8c0c <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb0>
    8c06:	cmp	r3, #32
    8c08:	bne.w	8d5e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x202>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    8c0c:	subs	r4, #1
    8c0e:	bne.n	8bfe <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa2>
    8c10:	mov.w	r5, #4294967295
    8c14:	mov	r3, r4
  // Max length of LFN is 255.
  if (len > 255) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
    8c16:	str	r3, [r1, #4]
    8c18:	add.w	r6, r1, #23
    8c1c:	add.w	r3, r1, #12
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    8c20:	movs	r2, #32
    8c22:	strb.w	r2, [r3, #1]!
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    8c26:	cmp	r3, r6
    8c28:	bne.n	8c22 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc6>
    8c2a:	subs	r6, r0, #1
    8c2c:	movs	r2, #0
    8c2e:	b.n	8c32 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd6>
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    8c30:	adds	r2, #1
    8c32:	ldrb.w	r3, [r6, #1]!
    8c36:	cmp	r3, #46	; 0x2e
    8c38:	beq.n	8c30 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd4>
    8c3a:	cmp	r3, #32
    8c3c:	beq.n	8c30 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd4>
  // Not 8.3 if leading dot or space.
  is83 = !si;
    8c3e:	clz	ip, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    8c42:	adds	r6, r5, #1
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
    8c44:	mov.w	ip, ip, lsr #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    8c48:	beq.n	8c64 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    8c4a:	ldrb	r7, [r0, r5]
    8c4c:	cmp	r7, #46	; 0x2e
    8c4e:	add.w	r6, r0, r5
    8c52:	bne.n	8c5e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x102>
    8c54:	b.n	8c64 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    8c56:	ldrb.w	r7, [r6, #-1]!
    8c5a:	cmp	r7, #46	; 0x2e
    8c5c:	beq.n	8c64 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    8c5e:	adds.w	r5, r5, #4294967295
    8c62:	bcs.n	8c56 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xfa>
  for (; si < len; si++) {
    8c64:	cmp	r2, r4
    8c66:	mov.w	r9, #0
    8c6a:	bge.w	8d90 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x234>
    8c6e:	mov	r6, r9
    8c70:	mov	sl, r9
    8c72:	movs	r7, #7
    8c74:	mov.w	r8, #8
    8c78:	b.n	8cc6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16a>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    8c7a:	cmp	r3, #46	; 0x2e
    8c7c:	beq.n	8d0e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b2>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
    8c7e:	cmp	r3, #34	; 0x22
    8c80:	beq.n	8c9a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    8c82:	cmp	r3, #124	; 0x7c
    8c84:	beq.n	8c9a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    8c86:	sub.w	lr, r3, #42	; 0x2a
    8c8a:	cmp.w	lr, #5
    8c8e:	bls.n	8d22 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1c6>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
    8c90:	sub.w	lr, r3, #58	; 0x3a
    8c94:	cmp.w	lr, #5
    8c98:	bhi.n	8d4c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1f0>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    8c9a:	cmp	r5, r2
    8c9c:	beq.n	8d12 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b6>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    8c9e:	cmp	r7, r6
    8ca0:	bcc.n	8cf6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19a>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
    8ca2:	mov.w	ip, #0
      c = '_';
    8ca6:	movs	r3, #95	; 0x5f
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    8ca8:	add.w	lr, r6, #1
    8cac:	add.w	fp, r1, r6
    8cb0:	uxtb.w	r6, lr
      if (i < 7) {
    8cb4:	cmp	r6, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    8cb6:	strb.w	r3, [fp, #13]
      if (i < 7) {
    8cba:	bhi.n	8cbe <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>
        fname->seqPos = i;
    8cbc:	strb	r6, [r1, #12]
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    8cbe:	adds	r2, #1
    8cc0:	cmp	r2, r4
    8cc2:	bge.n	8cd4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x178>
    8cc4:	ldrb	r3, [r0, r2]
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    8cc6:	cmp	r3, #32
    8cc8:	bne.n	8c7a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x11e>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    8cca:	adds	r2, #1
    8ccc:	cmp	r2, r4
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
    8cce:	mov.w	ip, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    8cd2:	blt.n	8cc4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x168>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    8cd4:	ldrb	r3, [r1, #13]
    8cd6:	cmp	r3, #32
    8cd8:	beq.w	8bc6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (is83) {
    8cdc:	cmp.w	ip, #0
    8ce0:	beq.n	8d72 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x216>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    8ce2:	tst.w	sl, r9
    8ce6:	it	ne
    8ce8:	movne.w	r9, #2
    8cec:	strb.w	r9, [r1]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    8cf0:	movs	r0, #1
    8cf2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    8cf6:	cmp	r7, #10
    8cf8:	beq.n	8d6a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
    8cfa:	cmp	r5, r2
    8cfc:	blt.n	8d6a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
    8cfe:	mov	r2, r5
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    8d00:	movs	r7, #10
      i = 8;    // Place for extension.
    8d02:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    8d04:	mov.w	r8, #16
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
    8d08:	mov.w	ip, #0
    8d0c:	b.n	8cbe <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    8d0e:	cmp	r5, r2
    8d10:	bne.n	8cca <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16e>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    8d12:	cmp	r7, #10
    8d14:	beq.n	8d6a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
    8d16:	mov	r2, r5
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    8d18:	movs	r7, #10
      i = 8;    // Place for extension.
    8d1a:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    8d1c:	mov.w	r8, #16
    8d20:	b.n	8cbe <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    8d22:	cmp	r3, #45	; 0x2d
    8d24:	bne.n	8c9a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    8d26:	sub.w	lr, r3, #33	; 0x21
    8d2a:	cmp.w	lr, #93	; 0x5d
    8d2e:	bhi.n	8c9a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    8d30:	cmp	r5, r2
    8d32:	beq.n	8d12 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b6>
    8d34:	cmp	r7, r6
    8d36:	bcc.n	8cf6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19a>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
    8d38:	sub.w	lr, r3, #97	; 0x61
    8d3c:	cmp.w	lr, #25
    8d40:	bhi.n	8d94 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x238>
        c += 'A' - 'a';
    8d42:	subs	r3, #32
    8d44:	uxtb	r3, r3
        lc |= bit;
    8d46:	orr.w	r9, r8, r9
    8d4a:	b.n	8ca8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14c>
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
    8d4c:	sub.w	lr, r3, #91	; 0x5b
    8d50:	cmp.w	lr, #2
    8d54:	bls.n	8c9a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    8d56:	b.n	8d26 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1ca>
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    8d58:	str	r7, [r2, #0]
    8d5a:	adds	r7, r0, r4
    8d5c:	b.n	8bfc <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa0>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
    8d5e:	cmp	r4, #255	; 0xff
    8d60:	bgt.w	8bc6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    8d64:	subs	r5, r4, #1
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    c = path[len - 1];
    8d66:	mov	r3, r4
    8d68:	b.n	8c16 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xba>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    8d6a:	ldrb	r3, [r1, #13]
    8d6c:	cmp	r3, #32
    8d6e:	beq.w	8bc6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    8d72:	ldrb	r3, [r1, #12]
    8d74:	add	r3, r1
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    8d76:	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    8d78:	movs	r4, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    8d7a:	movs	r2, #49	; 0x31
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    8d7c:	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
    8d7e:	strb	r4, [r3, #13]
    fname->sfn[fname->seqPos + 1] = '1';
    8d80:	strb	r2, [r3, #14]
    8d82:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    8d86:	str	r0, [r2, #0]
    8d88:	mov	r4, r3
    8d8a:	mov.w	r5, #4294967295
    8d8e:	b.n	8c16 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xba>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    8d90:	mov	sl, r9
    8d92:	b.n	8cd4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x178>
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
    8d94:	sub.w	lr, r3, #65	; 0x41
    8d98:	cmp.w	lr, #25
        uc |= bit;
    8d9c:	it	ls
    8d9e:	orrls.w	sl, r8, sl
    8da2:	b.n	8ca8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14c>
    8da4:	.word	0x35000101

00008da8 <FatFile::remove()>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    8da8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    8dac:	ldrb	r2, [r0, #2]

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    8dae:	sub	sp, #40	; 0x28
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    8db0:	movs	r3, #0
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    8db2:	lsls	r2, r2, #30
    8db4:	strb.w	r3, [sp, #4]
    8db8:	strb.w	r3, [sp, #5]
    8dbc:	strb.w	r3, [sp, #6]
    8dc0:	bpl.n	8e08 <FatFile::remove()+0x60>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    8dc2:	ldr	r1, [r0, #32]
    8dc4:	mov	r5, r0
    8dc6:	cbnz	r1, 8e12 <FatFile::remove()+0x6a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    8dc8:	movs	r1, #1
    8dca:	mov	r0, r5
    8dcc:	bl	79b4 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    8dd0:	cbz	r0, 8e08 <FatFile::remove()+0x60>
    8dd2:	subs	r1, r0, #1
    8dd4:	add.w	r7, r0, #10
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    8dd8:	movs	r4, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    8dda:	lsrs	r2, r4, #1
    8ddc:	ldrb.w	r6, [r1, #1]!
    8de0:	orr.w	r3, r2, r4, lsl #7
    8de4:	uxtab	r3, r6, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    8de8:	cmp	r7, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    8dea:	uxtb	r4, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    8dec:	bne.n	8dda <FatFile::remove()+0x32>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    8dee:	mov.w	r8, #229	; 0xe5
    8df2:	strb.w	r8, [r0]
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    8df6:	ldr	r6, [r5, #8]

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    8df8:	movs	r3, #0
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8dfa:	add.w	r0, r6, #40	; 0x28
    8dfe:	strb	r3, [r5, #0]
  m_flags = 0;
    8e00:	strb	r3, [r5, #2]
    8e02:	bl	863c <FatCache::sync()>
    8e06:	cbnz	r0, 8e1e <FatFile::remove()+0x76>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    8e08:	movs	r6, #0
}
    8e0a:	mov	r0, r6
    8e0c:	add	sp, #40	; 0x28
    8e0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    8e12:	ldr	r0, [r0, #8]
    8e14:	bl	87bc <FatPartition::freeChain(unsigned long)>
    8e18:	cmp	r0, #0
    8e1a:	bne.n	8dc8 <FatFile::remove()+0x20>
    8e1c:	b.n	8e08 <FatFile::remove()+0x60>
    8e1e:	add.w	r0, r6, #564	; 0x234
    8e22:	bl	863c <FatCache::sync()>
    8e26:	cmp	r0, #0
    8e28:	beq.n	8e08 <FatFile::remove()+0x60>
    8e2a:	ldr	r0, [r6, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    8e2c:	ldr	r3, [r0, #0]
    8e2e:	ldr	r3, [r3, #20]
    8e30:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8e32:	mov	r6, r0
    8e34:	cmp	r0, #0
    8e36:	beq.n	8e08 <FatFile::remove()+0x60>
  // Write entry to device.
  if (!m_vol->cacheSync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    8e38:	ldrb	r3, [r5, #3]
    8e3a:	cmp	r3, #0
    8e3c:	beq.n	8e0a <FatFile::remove()+0x62>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    8e3e:	add	r0, sp, #4
    8e40:	mov	r1, r5
    8e42:	bl	8a2c <FatFile::openCluster(FatFile*)>
    8e46:	cmp	r0, #0
    8e48:	beq.n	8e08 <FatFile::remove()+0x60>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    8e4a:	ldrb	r3, [r5, #3]
    8e4c:	cmp	r3, #0
    8e4e:	beq.n	8e08 <FatFile::remove()+0x60>
    8e50:	movs	r7, #1
    8e52:	b.n	8e94 <FatFile::remove()+0xec>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    8e54:	add	r0, sp, #4
    8e56:	bl	7f3c <FatFile::readDirCache(bool)>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    8e5a:	adds	r3, r7, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
    8e5c:	cmp	r0, #0
    8e5e:	beq.n	8e08 <FatFile::remove()+0x60>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    8e60:	ldrb	r2, [r0, #11]
    8e62:	cmp	r2, #15
    8e64:	bne.n	8e08 <FatFile::remove()+0x60>
        order != (ldir->order & 0X1F) ||
    8e66:	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    8e68:	and.w	r1, r2, #31
    8e6c:	cmp	r7, r1
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    8e6e:	uxtb	r7, r3
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    8e70:	bne.n	8e08 <FatFile::remove()+0x60>
        order != (ldir->order & 0X1F) ||
    8e72:	ldrb	r3, [r0, #13]
    8e74:	cmp	r3, r4
    8e76:	bne.n	8e08 <FatFile::remove()+0x60>
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    8e78:	strb.w	r8, [r0]
    m_vol->cacheDirty();
    8e7c:	ldr	r1, [r5, #8]
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    8e7e:	ldrb.w	r3, [r1, #40]	; 0x28
    8e82:	orr.w	r3, r3, #1
    8e86:	strb.w	r3, [r1, #40]	; 0x28
    if (last) {
    8e8a:	lsls	r3, r2, #25
    8e8c:	bmi.n	8ea8 <FatFile::remove()+0x100>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    8e8e:	ldrb	r3, [r5, #3]
    8e90:	cmp	r3, r7
    8e92:	bcc.n	8e08 <FatFile::remove()+0x60>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    8e94:	ldrh	r1, [r5, #4]
    8e96:	subs	r1, r1, r7
    8e98:	lsls	r1, r1, #5
    8e9a:	add	r0, sp, #4
    8e9c:	bl	81b0 <FatFile::seekSet(unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    8ea0:	movs	r1, #0
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    8ea2:	cmp	r0, #0
    8ea4:	bne.n	8e54 <FatFile::remove()+0xac>
    8ea6:	b.n	8e08 <FatFile::remove()+0x60>
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    m_vol->cacheDirty();
    if (last) {
      if (!m_vol->cacheSync()) {
    8ea8:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8eaa:	add.w	r0, r4, #40	; 0x28
    8eae:	bl	863c <FatCache::sync()>
    8eb2:	cmp	r0, #0
    8eb4:	beq.n	8e08 <FatFile::remove()+0x60>
    8eb6:	add.w	r0, r4, #564	; 0x234
    8eba:	bl	863c <FatCache::sync()>
    8ebe:	cmp	r0, #0
    8ec0:	beq.n	8e08 <FatFile::remove()+0x60>
    8ec2:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    8ec4:	ldr	r3, [r0, #0]
    8ec6:	ldr	r3, [r3, #20]
    8ec8:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8eca:	cmp	r0, #0
    8ecc:	beq.n	8e08 <FatFile::remove()+0x60>
    8ece:	b.n	8e0a <FatFile::remove()+0x62>

00008ed0 <FatFile::lfnUniqueSfn(fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    8ed0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    8ed4:	ldrb	r7, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    8ed6:	mov	r6, r1
    8ed8:	mov	r4, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    8eda:	add.w	r5, r1, #13
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    8ede:	mov.w	r8, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    8ee2:	mov.w	r9, #126	; 0x7e
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
    8ee6:	ldr	r0, [r6, #4]
    8ee8:	ldr	r1, [r6, #8]
    8eea:	add.w	r3, r8, r0
    8eee:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    8ef0:	cbz	r0, 8f04 <FatFile::lfnUniqueSfn(fname_t*)+0x34>
    8ef2:	add	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    8ef4:	ldrb.w	r2, [r1], #1
    8ef8:	add.w	r3, r3, r3, lsl #5
    8efc:	eors	r3, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    8efe:	cmp	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    8f00:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    8f02:	bne.n	8ef4 <FatFile::lfnUniqueSfn(fname_t*)+0x24>
    8f04:	cmp	r7, #3
    8f06:	it	cs
    8f08:	movcs	r7, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    8f0a:	adds	r2, r7, #4
    8f0c:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
    8f0e:	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    8f12:	adds	r0, r6, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    8f14:	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    8f16:	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    8f18:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    8f1a:	ite	ls
    8f1c:	addls	r1, #48	; 0x30
    8f1e:	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    8f20:	cmp	r7, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
    8f22:	mov.w	r3, r3, lsr #4
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    8f26:	strb	r1, [r0, #13]
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    8f28:	bcc.n	8f0e <FatFile::lfnUniqueSfn(fname_t*)+0x3e>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    8f2a:	adds	r3, r6, r7
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    8f2c:	movs	r1, #0
    8f2e:	strb.w	r9, [r3, #13]
    8f32:	mov	r0, r4
    8f34:	bl	81b0 <FatFile::seekSet(unsigned long)>
    rewind();
    while (1) {
      dir = readDirCache(true);
    8f38:	movs	r1, #1
    8f3a:	mov	r0, r4
    8f3c:	bl	7f3c <FatFile::readDirCache(bool)>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    8f40:	movs	r2, #11
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    8f42:	mov	r3, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    8f44:	mov	r1, r0
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    8f46:	cbz	r0, 8f74 <FatFile::lfnUniqueSfn(fname_t*)+0xa4>
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    8f48:	ldrb.w	lr, [r3]
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    8f4c:	mov	r0, r5
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    8f4e:	cmp.w	lr, #0
    8f52:	beq.n	8f80 <FatFile::lfnUniqueSfn(fname_t*)+0xb0>
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    8f54:	ldrb	r3, [r3, #11]
    8f56:	lsls	r3, r3, #28
    8f58:	bmi.n	8f38 <FatFile::lfnUniqueSfn(fname_t*)+0x68>
    8f5a:	bl	11690 <memcmp>
    8f5e:	cmp	r0, #0
    8f60:	bne.n	8f38 <FatFile::lfnUniqueSfn(fname_t*)+0x68>
    8f62:	add.w	r8, r8, #1
    8f66:	uxth.w	r8, r8
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
    8f6a:	cmp.w	r8, #100	; 0x64
    8f6e:	bne.n	8ee6 <FatFile::lfnUniqueSfn(fname_t*)+0x16>
fail:
  return false;

done:
  return true;
}
    8f70:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
        if (!getError()) {
    8f74:	ldrb	r0, [r4, #1]
    8f76:	clz	r0, r0
    8f7a:	lsrs	r0, r0, #5
    8f7c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

fail:
  return false;

done:
  return true;
    8f80:	movs	r0, #1
    8f82:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8f86:	nop

00008f88 <FatFile::open(FatFile*, fname_t*, int)>:
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    8f88:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    8f8c:	ldrb	r4, [r1, #0]
    8f8e:	tst.w	r4, #112	; 0x70
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    8f92:	sub	sp, #52	; 0x34
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    8f94:	beq.n	8f9a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    8f96:	ldrb	r4, [r0, #0]
    8f98:	cbz	r4, 8fa2 <FatFile::open(FatFile*, fname_t*, int)+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
    8f9a:	movs	r0, #0
}
    8f9c:	add	sp, #52	; 0x34
    8f9e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    8fa2:	ldrb	r4, [r2, #0]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;
    8fa4:	ldr.w	sl, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    8fa8:	lsls	r4, r4, #30
    8faa:	bne.n	9032 <FatFile::open(FatFile*, fname_t*, int)+0xaa>
    8fac:	mov.w	r8, #1
    8fb0:	mov	r6, r1
    8fb2:	mov	fp, r2
    8fb4:	str	r0, [sp, #36]	; 0x24
    8fb6:	movs	r1, #0
    8fb8:	mov	r0, r6
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
  uint8_t ms10;
  uint16_t freeIndex = 0;
    8fba:	mov	r7, r1
    8fbc:	str	r3, [sp, #28]
    8fbe:	bl	81b0 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    8fc2:	add.w	r3, fp, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
    8fc6:	str	r7, [sp, #24]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
    8fc8:	str	r7, [sp, #12]
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
    8fca:	mov	r4, r7
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
    8fcc:	mov	r9, r7
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
    8fce:	str	r7, [sp, #20]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    8fd0:	str	r3, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    8fd2:	movs	r1, #1
    8fd4:	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    8fd6:	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache(true);
    8fd8:	bl	7f3c <FatFile::readDirCache(bool)>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    8fdc:	ubfx	r5, r5, #5, #16
    dir = dirFile->readDirCache(true);
    if (!dir) {
    8fe0:	mov	r3, r0
    8fe2:	cmp	r0, #0
    8fe4:	beq.w	9100 <FatFile::open(FatFile*, fname_t*, int)+0x178>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    8fe8:	ldrb	r2, [r0, #0]
    8fea:	cmp	r2, #229	; 0xe5
    8fec:	beq.n	9064 <FatFile::open(FatFile*, fname_t*, int)+0xdc>
    8fee:	cmp	r2, #0
    8ff0:	beq.n	9064 <FatFile::open(FatFile*, fname_t*, int)+0xdc>
      if (dir->name[0] == FAT_NAME_FREE) {
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
    8ff2:	cmp	r4, r8
    8ff4:	it	cc
    8ff6:	movcc	r4, #0
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    8ff8:	cmp	r2, #46	; 0x2e
    8ffa:	beq.n	905e <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    8ffc:	ldrb	r1, [r3, #11]
      lfnOrd = 0;
    } else if (isLongName(dir)) {
    8ffe:	cmp	r1, #15
    9000:	beq.n	9080 <FatFile::open(FatFile*, fname_t*, int)+0xf8>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
    9002:	and.w	r1, r1, #8
    9006:	and.w	r2, r1, #255	; 0xff
    900a:	cbnz	r1, 905e <FatFile::open(FatFile*, fname_t*, int)+0xd6>
      if (lfnOrd) {
    900c:	cmp.w	r9, #0
    9010:	bne.w	92d8 <FatFile::open(FatFile*, fname_t*, int)+0x350>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    9014:	mov	r0, r3
    9016:	movs	r2, #11
    9018:	ldr	r1, [sp, #16]
    901a:	bl	11690 <memcmp>
    901e:	cmp	r0, #0
    9020:	bne.n	8fd2 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    9022:	ldrb.w	r3, [fp]
    9026:	lsls	r0, r3, #31
    9028:	bpl.w	9300 <FatFile::open(FatFile*, fname_t*, int)+0x378>
          goto found;
        }
        fnameFound = true;
    902c:	movs	r3, #1
    902e:	str	r3, [sp, #20]
    9030:	b.n	8fd2 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    9032:	ldr	r5, [pc, #724]	; (9308 <FatFile::open(FatFile*, fname_t*, int)+0x380>)
    9034:	add.w	r4, sl, #12
    9038:	umull	r4, r8, r5, r4
    903c:	mov.w	r8, r8, lsr #2
    9040:	add.w	r8, r8, #1
    9044:	uxtb.w	r8, r8
    9048:	b.n	8fb0 <FatFile::open(FatFile*, fname_t*, int)+0x28>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    904a:	ldr	r1, [sp, #12]
    904c:	subs	r1, #1
    904e:	uxtb	r1, r1
    9050:	cmp	r2, r1
    9052:	str	r1, [sp, #12]
    9054:	bne.n	905e <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    9056:	ldrb	r2, [r3, #13]
    9058:	ldr	r1, [sp, #24]
    905a:	cmp	r1, r2
    905c:	beq.n	9096 <FatFile::open(FatFile*, fname_t*, int)+0x10e>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    905e:	mov.w	r9, #0
    9062:	b.n	8fd2 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    9064:	cmp	r4, #0
    9066:	it	eq
    9068:	moveq	r7, r5
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
    906a:	cmp	r4, r8
        freeFound++;
    906c:	itt	cc
    906e:	addcc	r4, #1
    9070:	uxtbcc	r4, r4
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    9072:	cmp	r2, #0
    9074:	beq.n	9108 <FatFile::open(FatFile*, fname_t*, int)+0x180>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    9076:	cmp	r2, #229	; 0xe5
    9078:	bne.n	8ff8 <FatFile::open(FatFile*, fname_t*, int)+0x70>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    907a:	mov.w	r9, #0
    907e:	b.n	8fd2 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
      lfnOrd = 0;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
    9080:	cmp.w	r9, #0
    9084:	bne.n	904a <FatFile::open(FatFile*, fname_t*, int)+0xc2>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
    9086:	lsls	r5, r2, #25
    9088:	bpl.n	8fd2 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    908a:	and.w	r9, r2, #31
        checksum = ldir->checksum;
    908e:	ldrb	r2, [r3, #13]
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    9090:	str.w	r9, [sp, #12]
        checksum = ldir->checksum;
    9094:	str	r2, [sp, #24]
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    9096:	ldr	r2, [sp, #12]
    9098:	subs	r2, #1
    909a:	add.w	r5, r2, r2, lsl #1
    909e:	add.w	r5, r2, r5, lsl #2
      if (k >= len) {
    90a2:	cmp	sl, r5
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    90a4:	mov	r2, r5
      if (k >= len) {
    90a6:	bls.n	905e <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    90a8:	add.w	r1, r5, #13
    90ac:	str.w	r9, [sp, #32]
    90b0:	mov	r9, r1
    90b2:	b.n	90dc <FatFile::open(FatFile*, fname_t*, int)+0x154>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    90b4:	ldr.w	r0, [fp, #8]
    90b8:	ldrb	r2, [r0, r2]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    90ba:	cmp.w	ip, #25
    90be:	it	ls
    90c0:	addls	r1, #32
    90c2:	sub.w	r0, r2, #65	; 0x41
    90c6:	it	ls
    90c8:	uxtbls	r1, r1
    90ca:	cmp	r0, #25
    90cc:	itt	ls
    90ce:	addls	r2, #32
    90d0:	uxtbls	r2, r2
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    90d2:	cmp	r2, r1
    90d4:	bne.n	905e <FatFile::open(FatFile*, fname_t*, int)+0xd6>
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
    90d6:	cmp	lr, r9
    90d8:	beq.n	9160 <FatFile::open(FatFile*, fname_t*, int)+0x1d8>
    90da:	mov	r2, lr
        uint16_t u = lfnGetChar(ldir, i);
    90dc:	subs	r1, r2, r5
    90de:	uxtb	r1, r1
    90e0:	mov	r0, r3
    90e2:	bl	89e0 <lfnGetChar(DirLfn_t*, unsigned char)>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    90e6:	uxtb	r1, r0
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    90e8:	cmp	sl, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    90ea:	sub.w	ip, r1, #65	; 0x41
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    90ee:	add.w	lr, r2, #1
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    90f2:	beq.w	92ca <FatFile::open(FatFile*, fname_t*, int)+0x342>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    90f6:	cmp	r0, #255	; 0xff
    90f8:	bls.n	90b4 <FatFile::open(FatFile*, fname_t*, int)+0x12c>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    90fa:	mov.w	r9, #0
    90fe:	b.n	8fd2 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
    9100:	ldrb	r3, [r6, #1]
    9102:	cmp	r3, #0
    9104:	bne.w	8f9a <FatFile::open(FatFile*, fname_t*, int)+0x12>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    9108:	ldr	r2, [sp, #28]
    910a:	mov	r3, r2
    910c:	lsls	r2, r3, #22
    910e:	bpl.w	8f9a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    9112:	and.w	r3, r3, #3
    9116:	subs	r3, #1
    9118:	cmp	r3, #1
    911a:	bhi.w	8f9a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    911e:	cmp	r4, #0
    9120:	it	eq
    9122:	moveq	r7, r5
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    9124:	cmp	r4, r8
    9126:	bcc.n	9130 <FatFile::open(FatFile*, fname_t*, int)+0x1a8>
    9128:	b.n	9166 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    912a:	uxtb	r4, r3
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    912c:	cmp	r8, r4
    912e:	bls.n	9166 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
    dir = dirFile->readDirCache();
    9130:	movs	r1, #0
    9132:	mov	r0, r6
    9134:	bl	7f3c <FatFile::readDirCache(bool)>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    9138:	adds	r3, r4, #1
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
    913a:	cmp	r0, #0
    913c:	bne.n	912a <FatFile::open(FatFile*, fname_t*, int)+0x1a2>
      if (dirFile->getError()) {
    913e:	ldrb	r3, [r6, #1]
    9140:	cbz	r3, 914c <FatFile::open(FatFile*, fname_t*, int)+0x1c4>
    9142:	b.n	8f9a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    9144:	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
    9146:	ldrb	r3, [r3, #4]
    9148:	cmp	r3, #1
    914a:	bhi.n	9166 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    914c:	cmp	r8, r4
    914e:	bls.n	9166 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    9150:	mov	r0, r6
    9152:	bl	7920 <FatFile::addDirCluster()>
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    9156:	adds	r4, #16
    9158:	uxtb	r4, r4
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    915a:	cmp	r0, #0
    915c:	bne.n	9144 <FatFile::open(FatFile*, fname_t*, int)+0x1bc>
    915e:	b.n	8f9a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    9160:	ldr.w	r9, [sp, #32]
    9164:	b.n	8fd2 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    9166:	ldr	r3, [sp, #20]
    9168:	cbz	r3, 9178 <FatFile::open(FatFile*, fname_t*, int)+0x1f0>
    if (!dirFile->lfnUniqueSfn(fname)) {
    916a:	mov	r1, fp
    916c:	mov	r0, r6
    916e:	bl	8ed0 <FatFile::lfnUniqueSfn(fname_t*)>
    9172:	cmp	r0, #0
    9174:	beq.w	8f9a <FatFile::open(FatFile*, fname_t*, int)+0x12>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    9178:	lsls	r1, r7, #5
    917a:	mov	r0, r6
    917c:	bl	81b0 <FatFile::seekSet(unsigned long)>
    9180:	cmp	r0, #0
    9182:	beq.w	8f9a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
    9186:	add.w	r8, r8, #4294967295
  for (order = lfnOrd ; order ; order--) {
    918a:	ands.w	r9, r8, #255	; 0xff
    918e:	beq.n	9244 <FatFile::open(FatFile*, fname_t*, int)+0x2bc>
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    9190:	orr.w	r4, r9, #64	; 0x40
    9194:	uxtb	r4, r4
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    9196:	mov	r5, r9
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    9198:	movs	r7, #0
    919a:	movs	r1, #0
    919c:	mov	r0, r6
    919e:	bl	7f3c <FatFile::readDirCache(bool)>
    if (!ldir) {
    91a2:	cmp	r0, #0
    91a4:	beq.w	8f9a <FatFile::open(FatFile*, fname_t*, int)+0x12>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    91a8:	ldr	r2, [r6, #8]
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    91aa:	ldrb.w	r3, [r2, #40]	; 0x28
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    91ae:	cmp	r9, r5
    91b0:	orr.w	r3, r3, #1
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    91b4:	mov.w	ip, #15
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    91b8:	ite	ne
    91ba:	movne	r1, r5
    91bc:	moveq	r1, r4
    91be:	strb.w	r3, [r2, #40]	; 0x28
    91c2:	add.w	lr, fp, #12
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    91c6:	strb.w	ip, [r0, #11]
    ldir->mustBeZero1 = 0;
    91ca:	strb	r7, [r0, #12]
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    91cc:	strb	r1, [r0, #0]
    91ce:	add.w	ip, fp, #23
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    91d2:	movs	r3, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    91d4:	ldrb.w	r8, [lr, #1]!
    91d8:	lsrs	r2, r3, #1
    91da:	orr.w	r3, r2, r3, lsl #7
    91de:	uxtab	r3, r8, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    91e2:	cmp	lr, ip
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    91e4:	uxtb	r3, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    91e6:	bne.n	91d4 <FatFile::open(FatFile*, fname_t*, int)+0x24c>
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    91e8:	and.w	r1, r1, #31
    91ec:	subs	r1, #1
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    91ee:	strb	r3, [r0, #13]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    91f0:	add.w	r2, r1, r1, lsl #1
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
    91f4:	ldr.w	lr, [fp, #8]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    91f8:	strh	r7, [r0, #26]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    91fa:	add.w	r2, r1, r2, lsl #2
    91fe:	adds	r0, #4
  for (uint8_t i = 0; i < 13; i++, k++) {
    9200:	movs	r3, #0
    9202:	b.n	9224 <FatFile::open(FatFile*, fname_t*, int)+0x29c>
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    9204:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    9206:	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    920a:	bls.n	9236 <FatFile::open(FatFile*, fname_t*, int)+0x2ae>
    setLe16(ldir->unicode1 + 2*i, c);
  } else if (i < 11) {
    920c:	cmp	r3, #10
    920e:	ite	ls
    9210:	strhls	r1, [r0, #0]
    9212:	strhhi	r1, [r0, #2]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    9214:	adds	r3, #1
    9216:	uxtb	r3, r3
    9218:	cmp	r3, #13
    921a:	add.w	r2, r2, #1
    921e:	add.w	r0, r0, #2
    9222:	beq.n	923c <FatFile::open(FatFile*, fname_t*, int)+0x2b4>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    9224:	cmp	sl, r2
    9226:	bhi.n	9204 <FatFile::open(FatFile*, fname_t*, int)+0x27c>
    9228:	ite	ne
    922a:	movne.w	r1, #4294967295
    922e:	moveq	r1, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    9230:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    9232:	uxth	r1, r1
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    9234:	bhi.n	920c <FatFile::open(FatFile*, fname_t*, int)+0x284>
    9236:	strh.w	r1, [r0, #-3]
    923a:	b.n	9214 <FatFile::open(FatFile*, fname_t*, int)+0x28c>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    923c:	subs	r5, #1
    923e:	ands.w	r5, r5, #255	; 0xff
    9242:	bne.n	919a <FatFile::open(FatFile*, fname_t*, int)+0x212>
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
  dir = dirFile->readDirCache();
    9244:	movs	r1, #0
    9246:	mov	r0, r6
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    9248:	ldr	r5, [r6, #20]
  dir = dirFile->readDirCache();
    924a:	bl	7f3c <FatFile::readDirCache(bool)>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    924e:	ubfx	r5, r5, #5, #16
  dir = dirFile->readDirCache();
  if (!dir) {
    9252:	mov	r4, r0
    9254:	cmp	r0, #0
    9256:	beq.w	8f9a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    925a:	movs	r2, #32
    925c:	movs	r1, #0
    925e:	bl	117bc <memset>
  memcpy(dir->name, fname->sfn, 11);
    9262:	mov	r3, fp

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;

  // set timestamps
  if (FsDateTime::callback) {
    9264:	ldr	r2, [pc, #164]	; (930c <FatFile::open(FatFile*, fname_t*, int)+0x384>)
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);
    9266:	ldr.w	r1, [r3, #13]!
    926a:	ldr	r0, [r3, #4]
    926c:	str	r0, [r4, #4]
    926e:	str	r1, [r4, #0]
    9270:	ldrh	r1, [r3, #8]
    9272:	ldrb	r3, [r3, #10]
    9274:	strb	r3, [r4, #10]
    9276:	strh	r1, [r4, #8]

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    9278:	ldrb.w	r3, [fp]

  // set timestamps
  if (FsDateTime::callback) {
    927c:	ldr	r7, [r2, #0]
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    927e:	and.w	r3, r3, #24
    9282:	strb	r3, [r4, #12]

  // set timestamps
  if (FsDateTime::callback) {
    9284:	cbz	r7, 92aa <FatFile::open(FatFile*, fname_t*, int)+0x322>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    9286:	add.w	r2, sp, #43	; 0x2b
    928a:	add.w	r1, sp, #46	; 0x2e
    928e:	add	r0, sp, #44	; 0x2c
    9290:	blx	r7
    dir->createTimeMs = ms10;
    setLe16(dir->createDate, date);
    9292:	ldrh.w	r3, [sp, #44]	; 0x2c
    setLe16(dir->createTime, time);
    9296:	ldrh.w	r2, [sp, #46]	; 0x2e

  // set timestamps
  if (FsDateTime::callback) {
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    dir->createTimeMs = ms10;
    929a:	ldrb.w	r1, [sp, #43]	; 0x2b
    929e:	strb	r1, [r4, #13]
    92a0:	strh	r3, [r4, #16]
    92a2:	strh	r3, [r4, #18]
    92a4:	strh	r3, [r4, #24]
    92a6:	strh	r2, [r4, #14]
    92a8:	strh	r2, [r4, #22]
    setLe16(dir->accessDate, date);
    setLe16(dir->modifyDate, date);
    setLe16(dir->modifyTime, time);;
  }
  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
    92aa:	ldr	r2, [r6, #8]
    92ac:	ldrb.w	r3, [r2, #40]	; 0x28
    92b0:	orr.w	r3, r3, #1
    92b4:	strb.w	r3, [r2, #40]	; 0x28

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    92b8:	str.w	r9, [sp]
    92bc:	ldr	r3, [sp, #28]
    92be:	ldr	r0, [sp, #36]	; 0x24
    92c0:	mov	r2, r5
    92c2:	mov	r1, r6
    92c4:	bl	8244 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    92c8:	b.n	8f9c <FatFile::open(FatFile*, fname_t*, int)+0x14>
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
    92ca:	cmp	r0, #0
    92cc:	ldr.w	r9, [sp, #32]
    92d0:	it	ne
    92d2:	movne.w	r9, #0
    92d6:	b.n	8fd2 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    92d8:	ldr	r1, [sp, #12]
    92da:	cmp	r1, #1
    92dc:	bne.w	8f9a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    92e0:	subs	r4, r3, #1
    92e2:	adds	r3, #10
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    92e4:	ldrb.w	r0, [r4, #1]!
    92e8:	lsrs	r1, r2, #1
    92ea:	orr.w	r2, r1, r2, lsl #7
    92ee:	uxtab	r2, r0, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    92f2:	cmp	r4, r3
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    92f4:	uxtb	r2, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    92f6:	bne.n	92e4 <FatFile::open(FatFile*, fname_t*, int)+0x35c>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    92f8:	ldr	r3, [sp, #24]
    92fa:	cmp	r3, r2
    92fc:	bne.w	8f9a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    9300:	ldr	r3, [sp, #28]
    9302:	lsls	r1, r3, #20
    9304:	bpl.n	92b8 <FatFile::open(FatFile*, fname_t*, int)+0x330>
    9306:	b.n	8f9a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    9308:	.word	0x4ec4ec4f
    930c:	.word	0x1fff24d4

00009310 <FatFile::getSFN(char*) [clone .part.2]>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
    9310:	push	{r3, r4, r5, r6, r7, lr}
    9312:	mov	r6, r1
    name[0] = '/';
    name[1] = '\0';
    return true;
  }
  // cache entry
  dir = reinterpret_cast<DirFat_t*>(cacheDirEntry(FatCache::CACHE_FOR_READ));
    9314:	movs	r1, #0
    9316:	bl	79b4 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    931a:	cbz	r0, 9358 <FatFile::getSFN(char*) [clone .part.2]+0x48>
    931c:	movs	r2, #0
    931e:	mov	r1, r2
    9320:	subs	r4, r0, #1
    9322:	movs	r7, #8
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    9324:	mov.w	lr, #46	; 0x2e
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
    9328:	ldrb.w	r3, [r4, #1]!
    932c:	cmp	r3, #32
    932e:	beq.n	934c <FatFile::getSFN(char*) [clone .part.2]+0x3c>
      continue;
    }
    if (i == 8) {
    9330:	cmp	r2, #8
    9332:	beq.n	935a <FatFile::getSFN(char*) [clone .part.2]+0x4a>
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    9334:	sub.w	r5, r3, #65	; 0x41
    9338:	cmp	r5, #25
    933a:	bhi.n	9346 <FatFile::getSFN(char*) [clone .part.2]+0x36>
    933c:	ldrb	r5, [r0, #12]
    933e:	tst	r7, r5
      c += 'a' - 'A';
    9340:	itt	ne
    9342:	addne	r3, #32
    9344:	uxtbne	r3, r3
    }
    name[j++] = c;
    9346:	strb	r3, [r6, r1]
    9348:	adds	r1, #1
    934a:	uxtb	r1, r1
    934c:	adds	r2, #1
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    934e:	cmp	r2, #11
    9350:	bne.n	9328 <FatFile::getSFN(char*) [clone .part.2]+0x18>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
    9352:	movs	r3, #0
    9354:	strb	r3, [r6, r1]
  return true;
    9356:	movs	r0, #1

fail:
  return false;
}
    9358:	pop	{r3, r4, r5, r6, r7, pc}
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    935a:	strb.w	lr, [r6, r1]
    935e:	adds	r1, #1
    9360:	uxtb	r1, r1
    9362:	ldrb	r3, [r4, #0]
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
    9364:	movs	r7, #16
    9366:	b.n	9334 <FatFile::getSFN(char*) [clone .part.2]+0x24>

00009368 <FatFile::getSFN(char*)>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
    9368:	ldrb	r3, [r0, #0]
    936a:	mov	r2, r1
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t *dir;

  if (!isOpen()) {
    936c:	cbz	r3, 9384 <FatFile::getSFN(char*)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    936e:	tst.w	r3, #96	; 0x60
    9372:	beq.n	9380 <FatFile::getSFN(char*)+0x18>
    name[0] = '/';
    9374:	movs	r1, #47	; 0x2f
    name[1] = '\0';
    9376:	movs	r3, #0
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    name[0] = '/';
    9378:	strb	r1, [r2, #0]
    name[1] = '\0';
    937a:	strb	r3, [r2, #1]
    return true;
    937c:	movs	r0, #1
    937e:	bx	lr
    9380:	b.w	9310 <FatFile::getSFN(char*) [clone .part.2]>
  }
  name[j] = 0;
  return true;

fail:
  return false;
    9384:	mov	r0, r3
}
    9386:	bx	lr

00009388 <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    9388:	push	{r3, r4, r5, r6, r7, lr}
  m_fFile = nullptr;
    938a:	movs	r5, #0
    938c:	str	r5, [r0, #56]	; 0x38
  m_xFile = nullptr;
  if (from.m_fFile) {
    938e:	ldr	r4, [r1, #56]	; 0x38
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
  m_fFile = nullptr;
  m_xFile = nullptr;
    9390:	str	r5, [r0, #60]	; 0x3c
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    9392:	mov	r6, r0
    9394:	mov	r7, r1
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    9396:	cbz	r4, 93bc <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    9398:	mov	r1, r0
    939a:	movs	r0, #36	; 0x24
    939c:	bl	95f4 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    93a0:	strb	r5, [r0, #0]
    93a2:	strb	r5, [r0, #1]
    93a4:	strb	r5, [r0, #2]
    93a6:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    93a8:	ldr	r5, [r7, #56]	; 0x38
    93aa:	mov	r4, r0
    93ac:	ldmia	r5!, {r0, r1, r2, r3}
    93ae:	stmia	r4!, {r0, r1, r2, r3}
    93b0:	ldmia	r5!, {r0, r1, r2, r3}
    93b2:	stmia	r4!, {r0, r1, r2, r3}
    93b4:	ldr	r3, [r5, #0]
    93b6:	str	r3, [r4, #0]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
    93b8:	mov	r0, r6
    93ba:	pop	{r3, r4, r5, r6, r7, pc}
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    93bc:	ldr	r3, [r1, #60]	; 0x3c
    93be:	cmp	r3, #0
    93c0:	beq.n	93b8 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>
    m_xFile = new (m_fileMem) ExFatFile;
    93c2:	mov	r1, r0
    93c4:	movs	r0, #56	; 0x38
    93c6:	bl	95f4 <operator new(unsigned int, unsigned long*)>
    93ca:	strb.w	r4, [r0, #49]	; 0x31
    93ce:	strb.w	r4, [r0, #50]	; 0x32
    93d2:	strb.w	r4, [r0, #51]	; 0x33
    93d6:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    93d8:	ldr	r3, [r7, #60]	; 0x3c
    93da:	mov	r2, r0
    93dc:	add.w	r1, r3, #48	; 0x30
    93e0:	ldr	r5, [r3, #0]
    93e2:	ldr	r4, [r3, #4]
    93e4:	ldr	r0, [r3, #8]
    93e6:	ldr	r7, [r3, #12]
    93e8:	str	r7, [r2, #12]
    93ea:	adds	r3, #16
    93ec:	cmp	r3, r1
    93ee:	str	r5, [r2, #0]
    93f0:	str	r4, [r2, #4]
    93f2:	str	r0, [r2, #8]
    93f4:	add.w	r2, r2, #16
    93f8:	bne.n	93e0 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x58>
    93fa:	ldr	r3, [r3, #0]
    93fc:	str	r3, [r2, #0]
    93fe:	b.n	93b8 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>

00009400 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    9400:	push	{r4, lr}
    9402:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    9404:	ldr	r0, [r0, #56]	; 0x38
    9406:	cbz	r0, 9414 <FsBaseFile::close()+0x14>
    9408:	bl	7a68 <FatFile::close()>
    940c:	cbz	r0, 9414 <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    940e:	movs	r3, #0
    9410:	str	r3, [r4, #56]	; 0x38
    return true;
    9412:	pop	{r4, pc}
  }
  if (m_xFile && m_xFile->close()) {
    9414:	ldr	r0, [r4, #60]	; 0x3c
    9416:	cbz	r0, 9424 <FsBaseFile::close()+0x24>
    9418:	bl	5f94 <ExFatFile::close()>
    941c:	cbz	r0, 9424 <FsBaseFile::close()+0x24>
    m_xFile = nullptr;
    941e:	movs	r3, #0
    9420:	str	r3, [r4, #60]	; 0x3c
    9422:	pop	{r4, pc}
    return true;
  }
  return false;
    9424:	movs	r0, #0
}
    9426:	pop	{r4, pc}

00009428 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    9428:	cbz	r1, 949e <FsBaseFile::open(FsVolume*, char const*, int)+0x76>
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    942a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    942e:	mov	r4, r1
    9430:	mov	r5, r0
    9432:	mov	r8, r3
    9434:	mov	r7, r2
  if (!vol) {
    return false;
  }
  close();
    9436:	bl	9400 <FsBaseFile::close()>
  if (vol->m_fVol) {
    943a:	ldr.w	r6, [r4, #1144]	; 0x478
    943e:	cbz	r6, 946c <FsBaseFile::open(FsVolume*, char const*, int)+0x44>
    m_fFile = new (m_fileMem) FatFile;
    9440:	mov	r1, r5
    9442:	movs	r0, #36	; 0x24
    9444:	bl	95f4 <operator new(unsigned int, unsigned long*)>
    9448:	movs	r1, #0
    944a:	strb	r1, [r0, #0]
    944c:	strb	r1, [r0, #1]
    944e:	strb	r1, [r0, #2]
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    9450:	ldr.w	r1, [r4, #1144]	; 0x478
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    9454:	str	r0, [r5, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    9456:	mov	r3, r8
    9458:	mov	r2, r7
    945a:	bl	7d5c <FatFile::open(FatVolume*, char const*, int)>
    945e:	cbz	r0, 9466 <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
      return true;
    9460:	movs	r0, #1
    9462:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    m_fFile = nullptr;
    9466:	str	r0, [r5, #56]	; 0x38
    return false;
    9468:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    946c:	ldr.w	r3, [r4, #1148]	; 0x47c
    9470:	cbz	r3, 94a2 <FsBaseFile::open(FsVolume*, char const*, int)+0x7a>
    m_xFile = new (m_fileMem) ExFatFile;
    9472:	mov	r1, r5
    9474:	movs	r0, #56	; 0x38
    9476:	bl	95f4 <operator new(unsigned int, unsigned long*)>
    947a:	strb.w	r6, [r0, #49]	; 0x31
    947e:	strb.w	r6, [r0, #50]	; 0x32
    9482:	strb.w	r6, [r0, #51]	; 0x33
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    9486:	ldr.w	r1, [r4, #1148]	; 0x47c
      return true;
    }
    m_fFile = nullptr;
    return false;
  } else if (vol->m_xVol) {
    m_xFile = new (m_fileMem) ExFatFile;
    948a:	str	r0, [r5, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    948c:	mov	r3, r8
    948e:	mov	r2, r7
    9490:	bl	68e0 <ExFatFile::open(ExFatVolume*, char const*, int)>
    9494:	cmp	r0, #0
    9496:	bne.n	9460 <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_xFile = nullptr;
    9498:	str	r0, [r5, #60]	; 0x3c
  }
  return false;
}
    949a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    949e:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    94a0:	bx	lr
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    94a2:	movs	r0, #0
    94a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000094a8 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    94a8:	push	{r3, r4, r5, r6, r7, lr}
    94aa:	mov	r5, r1
    94ac:	mov	r7, r2
    94ae:	mov	r4, r0
  close();
    94b0:	bl	9400 <FsBaseFile::close()>
  if (dir->m_fFile) {
    94b4:	ldr	r6, [r5, #56]	; 0x38
    94b6:	cbz	r6, 94dc <FsBaseFile::openNext(FsBaseFile*, int)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    94b8:	mov	r1, r4
    94ba:	movs	r0, #36	; 0x24
    94bc:	bl	95f4 <operator new(unsigned int, unsigned long*)>
    94c0:	movs	r2, #0
    94c2:	strb	r2, [r0, #0]
    94c4:	strb	r2, [r0, #1]
    94c6:	strb	r2, [r0, #2]
    94c8:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    94ca:	mov	r2, r7
    94cc:	ldr	r1, [r5, #56]	; 0x38
    94ce:	bl	831c <FatFile::openNext(FatFile*, int)>
    94d2:	cbz	r0, 94d8 <FsBaseFile::openNext(FsBaseFile*, int)+0x30>
      return true;
    94d4:	movs	r0, #1
    94d6:	pop	{r3, r4, r5, r6, r7, pc}
    }
    m_fFile = nullptr;
    94d8:	str	r0, [r4, #56]	; 0x38
    94da:	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
    94dc:	ldr	r0, [r5, #60]	; 0x3c
    94de:	cbz	r0, 9504 <FsBaseFile::openNext(FsBaseFile*, int)+0x5c>
    m_xFile = new (m_fileMem) ExFatFile;
    94e0:	mov	r1, r4
    94e2:	movs	r0, #56	; 0x38
    94e4:	bl	95f4 <operator new(unsigned int, unsigned long*)>
    94e8:	strb.w	r6, [r0, #49]	; 0x31
    94ec:	strb.w	r6, [r0, #50]	; 0x32
    94f0:	strb.w	r6, [r0, #51]	; 0x33
    94f4:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    94f6:	mov	r2, r7
    94f8:	ldr	r1, [r5, #60]	; 0x3c
    94fa:	bl	68f0 <ExFatFile::openNext(ExFatFile*, int)>
    94fe:	cmp	r0, #0
    9500:	bne.n	94d4 <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
      return true;
    }
    m_xFile = nullptr;
    9502:	str	r0, [r4, #60]	; 0x3c
  }
  return false;
}
    9504:	pop	{r3, r4, r5, r6, r7, pc}
    9506:	nop

00009508 <FsVolume::begin(BlockDeviceInterface*)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    9508:	push	{r4, r5, r6, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    950a:	movs	r6, #0
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    950c:	mov	r5, r0
  m_blockDev = blockDev;
    950e:	str.w	r1, [r0, #1152]	; 0x480
  m_fVol = nullptr;
    9512:	str.w	r6, [r0, #1144]	; 0x478
  m_xVol = new (m_volMem) ExFatVolume;
    9516:	mov	r1, r0
    9518:	mov.w	r0, #1144	; 0x478
    951c:	bl	95f4 <operator new(unsigned int, unsigned long*)>
    9520:	mov	r4, r0
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    9522:	str	r6, [r0, #4]
    invalidate();
    9524:	bl	6950 <FsCache::invalidate()>
    9528:	add.w	r0, r4, #524	; 0x20c
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    952c:	str.w	r6, [r4, #528]	; 0x210
    invalidate();
    9530:	bl	6950 <FsCache::invalidate()>
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() : m_fatType(0) {}
    9534:	strb.w	r6, [r4, #1084]	; 0x43c
    9538:	strb.w	r6, [r4, #1137]	; 0x471
    953c:	strb.w	r6, [r4, #1138]	; 0x472
    9540:	strb.w	r6, [r4, #1139]	; 0x473
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    9544:	ldr.w	r1, [r5, #1152]	; 0x480
    9548:	str.w	r4, [r5, #1148]	; 0x47c
    954c:	mov	r0, r4
    954e:	movs	r2, #1
    9550:	bl	6ae0 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>
    9554:	cbnz	r0, 9592 <FsVolume::begin(BlockDeviceInterface*)+0x8a>
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    9556:	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    9558:	mov	r1, r5
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    955a:	str.w	r6, [r5, #1148]	; 0x47c
  m_fVol = new (m_volMem) FatVolume;
    955e:	movw	r0, #1124	; 0x464
    9562:	bl	95f4 <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() : m_fatType(0) {}
    9566:	strb	r6, [r0, #7]
    9568:	strb.w	r6, [r0, #1088]	; 0x440
    956c:	strb.w	r6, [r0, #1089]	; 0x441
    9570:	strb.w	r6, [r0, #1090]	; 0x442
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    9574:	movs	r2, #1
    9576:	ldr.w	r1, [r5, #1152]	; 0x480
    957a:	str.w	r0, [r5, #1144]	; 0x478
    957e:	mov	r4, r0
    9580:	bl	88c4 <FatPartition::init(BlockDeviceInterface*, unsigned char)>
    9584:	cbnz	r0, 95b0 <FsVolume::begin(BlockDeviceInterface*)+0xa8>
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    9586:	ldr	r3, [pc, #64]	; (95c8 <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
    9588:	movs	r0, #0
    958a:	str	r0, [r3, #0]
  m_fVol = nullptr;
    958c:	str.w	r0, [r5, #1144]	; 0x478
  return false;
    9590:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    9592:	add.w	r6, r4, #1088	; 0x440
    9596:	mov	r0, r6
    9598:	bl	5f94 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    959c:	mov	r1, r4
    959e:	mov	r0, r6
    95a0:	bl	6050 <ExFatFile::openRoot(ExFatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    95a4:	cmp	r0, #0
    95a6:	beq.n	9556 <FsVolume::begin(BlockDeviceInterface*)+0x4e>

 done:
  m_cwv = this;
    95a8:	ldr	r3, [pc, #28]	; (95c8 <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
  return true;
    95aa:	movs	r0, #1
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    95ac:	str	r5, [r3, #0]
  return true;
    95ae:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    95b0:	add.w	r6, r4, #1088	; 0x440
    95b4:	mov	r0, r6
    95b6:	bl	7a68 <FatFile::close()>
    return m_vwd.openRoot(this);
    95ba:	mov	r1, r4
    95bc:	mov	r0, r6
    95be:	bl	7d6c <FatFile::openRoot(FatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    95c2:	cmp	r0, #0
    95c4:	bne.n	95a8 <FsVolume::begin(BlockDeviceInterface*)+0xa0>
    95c6:	b.n	9586 <FsVolume::begin(BlockDeviceInterface*)+0x7e>
    95c8:	.word	0x1fff24d8

000095cc <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    95cc:	push	{r3, r4, r5, r6, r7, lr}
    95ce:	movs	r5, #0
    95d0:	mov.w	r7, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    95d4:	ldr	r6, [pc, #24]	; (95f0 <FsVolume::open(char const*, int)+0x24>)
    95d6:	str	r7, [r0, #8]
    95d8:	mov	r4, r0
    95da:	strb	r5, [r0, #4]
    95dc:	strb	r5, [r0, #12]
 * \class FsBaseFile
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}
    95de:	str	r5, [r0, #72]	; 0x48
    95e0:	str	r5, [r0, #76]	; 0x4c
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    95e2:	str.w	r6, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    95e6:	bl	9428 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    95ea:	mov	r0, r4
    95ec:	pop	{r3, r4, r5, r6, r7, pc}
    95ee:	nop
    95f0:	.word	0x000156b0

000095f4 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    95f4:	mov	r0, r1
    95f6:	bx	lr

000095f8 <SdSpiCard::errorCode() const>:
  /**
   * \return code for the last error. See SdCardInfo.h for a list of error codes.
   */
  uint8_t errorCode() const {
    return m_errorCode;
  }
    95f8:	ldrb	r0, [r0, #19]
    95fa:	bx	lr

000095fc <SdSpiCard::errorData() const>:
  /** \return error data for last error. */
  uint32_t errorData() const {
    return m_status;
  }
    95fc:	ldrb	r0, [r0, #21]
    95fe:	bx	lr

00009600 <SdSpiCard::readSector(unsigned long, unsigned char*)>:
   *
   * \param[in] sector Logical sector to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
    9600:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    9602:	ldr	r4, [r0, #0]
    9604:	ldr	r4, [r4, #12]
    9606:	movs	r3, #1
    9608:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return readSingle(sector, dst);
#endif  // ENABLE_DEDICATED_SPI
  }
    960a:	ldr.w	r4, [sp], #4
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    960e:	bx	ip

00009610 <SdSpiCard::type() const>:
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
  }
    9610:	ldrb	r0, [r0, #22]
    9612:	bx	lr

00009614 <SdSpiCard::writeSector(unsigned long, unsigned char const*)>:
   *
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    9614:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    9616:	ldr	r4, [r0, #0]
    9618:	ldr	r4, [r4, #28]
    961a:	movs	r3, #1
    961c:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return writeSingle(sector, src);
#endif  // ENABLE_DEDICATED_SPI
  }
    961e:	ldr.w	r4, [sp], #4
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    9622:	bx	ip

00009624 <SdSpiCard::~SdSpiCard()>:
/**
 * \class SdSpiCard
 * \brief Raw access to SD and SDHC flash memory cards via SPI protocol.
 */
#if HAS_SDIO_CLASS
class SdSpiCard : public SdCardInterface {
    9624:	bx	lr
    9626:	nop

00009628 <SdSpiCard::~SdSpiCard()>:
    9628:	push	{r4, lr}
    962a:	movs	r1, #24
    962c:	mov	r4, r0
    962e:	bl	101b0 <operator delete(void*, unsigned int)>
    9632:	mov	r0, r4
    9634:	pop	{r4, pc}
    9636:	nop

00009638 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    9638:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    963c:	mov	r6, r1
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    963e:	ldrb	r1, [r0, #16]
    9640:	cmp	r1, #2
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    9642:	mov	r4, r0
    9644:	mov	r5, r2
    9646:	mov	r7, r3
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    9648:	beq.n	965a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x22>
    if (!syncDevice()) {
    964a:	ldr	r3, [r4, #0]
    964c:	mov	r0, r4
    964e:	ldr	r3, [r3, #20]
    9650:	blx	r3
    9652:	cbnz	r0, 968c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x54>
      return false;
    9654:	movs	r0, #0
    9656:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    965a:	ldr	r3, [r0, #12]
    965c:	cmp	r3, r6
    965e:	bne.n	964a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    9660:	movs	r6, #0
    9662:	cbz	r7, 967c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeData(src)) {
    9664:	ldr	r3, [r4, #0]
    9666:	mov	r1, r5
    9668:	ldr	r3, [r3, #68]	; 0x44
    966a:	mov	r0, r4
    966c:	blx	r3
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    966e:	adds	r6, #1
    9670:	add.w	r5, r5, #512	; 0x200
    if (!writeData(src)) {
    9674:	cmp	r0, #0
    9676:	beq.n	9654 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    9678:	cmp	r7, r6
    967a:	bne.n	9664 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2c>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    967c:	ldr	r3, [r4, #12]
  return m_sharedSpi ? syncDevice() : true;
    967e:	ldrb	r2, [r4, #17]
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    9680:	add	r7, r3
    9682:	str	r7, [r4, #12]
  return m_sharedSpi ? syncDevice() : true;
    9684:	cbnz	r2, 96a2 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x6a>
    9686:	movs	r0, #1
    9688:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!syncDevice()) {
      return false;
    }
    if (!writeStart(sector)) {
    968c:	ldr	r3, [r4, #0]
    968e:	mov	r1, r6
    9690:	ldr	r3, [r3, #72]	; 0x48
    9692:	mov	r0, r4
    9694:	blx	r3
    9696:	cmp	r0, #0
    9698:	beq.n	9654 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    969a:	movs	r3, #2
      return false;
    }
    if (!writeStart(sector)) {
      return false;
    }
    m_curSector = sector;
    969c:	str	r6, [r4, #12]
    m_curState = WRITE_STATE;
    969e:	strb	r3, [r4, #16]
    96a0:	b.n	9660 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x28>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    96a2:	ldr	r3, [r4, #0]
    96a4:	mov	r0, r4
    96a6:	ldr	r3, [r3, #20]

 fail:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
    96a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    96ac:	bx	r3
    96ae:	nop

000096b0 <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
    96b0:	push	{r4, lr}
    96b2:	mov	r4, r0
  bool waitNotBusy(SdMillis_t timeoutMS);
  bool writeData(uint8_t token, const uint8_t* src);

#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
    96b4:	adds	r0, #4
    96b6:	bl	ac60 <SdSpiArduinoDriver::activate()>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    96ba:	ldrb	r0, [r4, #18]
    96bc:	movs	r1, #0
    96be:	bl	ade0 <sdCsWrite(unsigned char, bool)>
  if (!m_spiActive) {
    spiActivate();
    spiSelect();
    m_spiActive = true;
    96c2:	movs	r3, #1
    96c4:	strb	r3, [r4, #20]
    96c6:	pop	{r4, pc}

000096c8 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>:
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
    96c8:	push	{r3, r4, r5, lr}
    96ca:	mov	r4, r0
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    96cc:	movs	r1, #1
    96ce:	ldrb	r0, [r0, #18]
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    96d0:	adds	r5, r4, #4
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    96d2:	bl	ade0 <sdCsWrite(unsigned char, bool)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    96d6:	mov	r0, r5
    96d8:	movs	r1, #255	; 0xff
    96da:	bl	ad74 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
    96de:	mov	r0, r5
    96e0:	bl	acf0 <SdSpiArduinoDriver::deactivate()>
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    96e4:	movs	r3, #0
    96e6:	strb	r3, [r4, #20]
    96e8:	pop	{r3, r4, r5, pc}
    96ea:	nop

000096ec <SdSpiCard::isBusy()>:
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    96ec:	push	{r3, r4, r5, r6, r7, lr}
  bool rtn = true;
  bool spiActive = m_spiActive;
    96ee:	ldrb	r7, [r0, #20]
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    96f0:	mov	r6, r0
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    96f2:	cbnz	r7, 96f8 <SdSpiCard::isBusy()+0xc>
    96f4:	bl	96b0 <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>
    96f8:	adds	r5, r6, #4
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    96fa:	movs	r4, #8
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    96fc:	mov	r0, r5
    96fe:	bl	ad38 <SdSpiArduinoDriver::receive()>
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
    9702:	cmp	r0, #255	; 0xff
    9704:	add.w	r3, r4, #4294967295
    9708:	beq.n	9726 <SdSpiCard::isBusy()+0x3a>
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    970a:	ands.w	r4, r3, #255	; 0xff
    970e:	bne.n	96fc <SdSpiCard::isBusy()+0x10>
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
  bool rtn = true;
    9710:	movs	r4, #1
    if (0XFF == spiReceive()) {
      rtn = false;
      break;
    }
  }
  if (!spiActive) {
    9712:	cbnz	r7, 9718 <SdSpiCard::isBusy()+0x2c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    9714:	ldrb	r3, [r6, #20]
    9716:	cbnz	r3, 971c <SdSpiCard::isBusy()+0x30>
  }
  if (!spiActive) {
    spiStop();
  }
  return rtn;
}
    9718:	mov	r0, r4
    971a:	pop	{r3, r4, r5, r6, r7, pc}
    971c:	mov	r0, r6
    971e:	bl	96c8 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    9722:	mov	r0, r4
    9724:	pop	{r3, r4, r5, r6, r7, pc}
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
      rtn = false;
    9726:	movs	r4, #0
    9728:	b.n	9712 <SdSpiCard::isBusy()+0x26>
    972a:	nop

0000972c <SdSpiCard::readData(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
    972c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9730:	ldr	r6, [pc, #116]	; (97a8 <SdSpiCard::readData(unsigned char*, unsigned int)+0x7c>)
    9732:	sub	sp, #12
    9734:	ldr	r3, [r6, #0]
    9736:	str	r3, [sp, #0]
	return ret;
    9738:	ldr	r5, [sp, #0]
    973a:	mov	r4, r0
    973c:	mov	r8, r1
    973e:	mov	r9, r2

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    9740:	uxth	r5, r5
    9742:	adds	r7, r0, #4
    9744:	b.n	9756 <SdSpiCard::readData(unsigned char*, unsigned int)+0x2a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9746:	ldr	r3, [r6, #0]
    9748:	str	r3, [sp, #4]
	return ret;
    974a:	ldr	r3, [sp, #4]
    974c:	uxth	r3, r3
    974e:	subs	r3, r3, r5
    9750:	cmp.w	r3, #300	; 0x12c
    9754:	bgt.n	977c <SdSpiCard::readData(unsigned char*, unsigned int)+0x50>
    9756:	mov	r0, r7
    9758:	bl	ad38 <SdSpiArduinoDriver::receive()>
#endif  // USE_SD_CRC

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    975c:	cmp	r0, #255	; 0xff
    975e:	strb	r0, [r4, #21]
    9760:	beq.n	9746 <SdSpiCard::readData(unsigned char*, unsigned int)+0x1a>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_SECTOR) {
    9762:	cmp	r0, #254	; 0xfe
    9764:	beq.n	9782 <SdSpiCard::readData(unsigned char*, unsigned int)+0x56>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    9766:	movs	r3, #24
    9768:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    976a:	ldrb	r0, [r4, #20]
    976c:	cbz	r0, 9776 <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    976e:	mov	r0, r4
    9770:	bl	96c8 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
  return false;
    9774:	movs	r0, #0
}
    9776:	add	sp, #12
    9778:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    977c:	movs	r3, #29
    977e:	strb	r3, [r4, #19]
    9780:	b.n	976a <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
    9782:	mov	r2, r9
    9784:	mov	r1, r8
    9786:	mov	r0, r7
    9788:	bl	ad54 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    978c:	strb	r0, [r4, #21]
    978e:	cbz	r0, 9796 <SdSpiCard::readData(unsigned char*, unsigned int)+0x6a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    9790:	movs	r3, #36	; 0x24
    9792:	strb	r3, [r4, #19]
    9794:	b.n	976a <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    9796:	mov	r0, r7
    9798:	bl	ad38 <SdSpiArduinoDriver::receive()>
    979c:	mov	r0, r7
    979e:	bl	ad38 <SdSpiArduinoDriver::receive()>
#else  // USE_SD_CRC
  // discard crc
  spiReceive();
  spiReceive();
#endif  // USE_SD_CRC
  return true;
    97a2:	movs	r0, #1
    97a4:	b.n	9776 <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    97a6:	nop
    97a8:	.word	0x1fff2538

000097ac <SdSpiCard::waitNotBusy(unsigned short)>:
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(SdMillis_t timeoutMS) {
    97ac:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    97ae:	ldr	r5, [pc, #52]	; (97e4 <SdSpiCard::waitNotBusy(unsigned short)+0x38>)
    97b0:	sub	sp, #12
    97b2:	ldr	r3, [r5, #0]
    97b4:	str	r3, [sp, #0]
	return ret;
    97b6:	ldr	r4, [sp, #0]
    97b8:	mov	r7, r1
    97ba:	adds	r6, r0, #4
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    97bc:	uxth	r4, r4
    97be:	b.n	97ce <SdSpiCard::waitNotBusy(unsigned short)+0x22>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    97c0:	ldr	r3, [r5, #0]
    97c2:	str	r3, [sp, #4]
	return ret;
    97c4:	ldr	r3, [sp, #4]
    97c6:	uxth	r3, r3
    97c8:	subs	r3, r3, r4
    97ca:	cmp	r3, r7
    97cc:	bgt.n	97de <SdSpiCard::waitNotBusy(unsigned short)+0x32>
    97ce:	mov	r0, r6
    97d0:	bl	ad38 <SdSpiArduinoDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    97d4:	cmp	r0, #255	; 0xff
    97d6:	bne.n	97c0 <SdSpiCard::waitNotBusy(unsigned short)+0x14>
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    }
  }
  return true;
    97d8:	movs	r0, #1
#endif  // WDT_YIELD_TIME_MILLIS
}
    97da:	add	sp, #12
    97dc:	pop	{r4, r5, r6, r7, pc}
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    97de:	movs	r0, #0
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
    97e0:	add	sp, #12
    97e2:	pop	{r4, r5, r6, r7, pc}
    97e4:	.word	0x1fff2538

000097e8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    97e8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // select card
  if (!m_spiActive) {
    97ec:	ldrb	r3, [r0, #20]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    97ee:	sub	sp, #8
    97f0:	mov	r6, r0
    97f2:	mov	r8, r1
    97f4:	str	r2, [sp, #4]
  // select card
  if (!m_spiActive) {
    97f6:	cbnz	r3, 97fc <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x14>
    97f8:	bl	96b0 <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    97fc:	cmp.w	r8, #0
    9800:	bne.n	9858 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x70>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    9802:	adds	r4, r6, #4
    9804:	mov	r0, r4
    9806:	orr.w	r1, r8, #64	; 0x40
    980a:	bl	ad74 <SdSpiArduinoDriver::send(unsigned char)>
    980e:	add	r7, sp, #4
    9810:	add	r5, sp, #8
    9812:	ldrb.w	r1, [r5, #-1]!
    9816:	mov	r0, r4
    9818:	bl	ad74 <SdSpiArduinoDriver::send(unsigned char)>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    981c:	cmp	r5, r7
    981e:	bne.n	9812 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x2a>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    9820:	cmp.w	r8, #0
    9824:	ite	eq
    9826:	moveq	r1, #149	; 0x95
    9828:	movne	r1, #135	; 0x87
    982a:	mov	r0, r4
    982c:	bl	ad74 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    9830:	mov	r0, r4
    9832:	bl	ad38 <SdSpiArduinoDriver::receive()>
    9836:	movs	r5, #11
    9838:	mov	r0, r4
    983a:	bl	ad38 <SdSpiArduinoDriver::receive()>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    983e:	lsls	r3, r0, #24
    9840:	strb	r0, [r6, #21]
    9842:	bmi.n	984a <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x62>
  }
  return m_status;
}
    9844:	add	sp, #8
    9846:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    984a:	subs	r3, r5, #1

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    984c:	ands.w	r5, r3, #255	; 0xff
    9850:	bne.n	9838 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
  }
  return m_status;
}
    9852:	add	sp, #8
    9854:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
    9858:	mov.w	r1, #300	; 0x12c
    985c:	mov	r0, r6
    985e:	bl	97ac <SdSpiCard::waitNotBusy(unsigned short)>
    9862:	b.n	9802 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x1a>

00009864 <SdSpiCard::readOCR(unsigned long*)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    9864:	push	{r3, r4, r5, r6, r7, lr}
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    9866:	ldr	r3, [r0, #0]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    9868:	mov	r5, r0
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    986a:	ldr	r3, [r3, #20]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    986c:	mov	r6, r1
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    986e:	blx	r3
  if (cardCommand(CMD58, 0)) {
    9870:	mov	r0, r5
    9872:	movs	r2, #0
    9874:	movs	r1, #58	; 0x3a
    9876:	bl	97e8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    987a:	cbnz	r0, 9898 <SdSpiCard::readOCR(unsigned long*)+0x34>
    987c:	adds	r7, r5, #4
    987e:	adds	r4, r6, #4
    9880:	mov	r0, r7
    9882:	bl	ad38 <SdSpiArduinoDriver::receive()>
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    p[3 - i] = spiReceive();
    9886:	strb.w	r0, [r4, #-1]!
  syncDevice();
  if (cardCommand(CMD58, 0)) {
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    988a:	cmp	r6, r4
    988c:	bne.n	9880 <SdSpiCard::readOCR(unsigned long*)+0x1c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    988e:	ldrb	r4, [r5, #20]
    9890:	cbnz	r4, 98ae <SdSpiCard::readOCR(unsigned long*)+0x4a>
    9892:	movs	r4, #1
  return true;

fail:
  spiStop();
  return false;
}
    9894:	mov	r0, r4
    9896:	pop	{r3, r4, r5, r6, r7, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    9898:	ldrb	r4, [r5, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    989a:	movs	r3, #18
    989c:	strb	r3, [r5, #19]
    989e:	cmp	r4, #0
    98a0:	beq.n	9894 <SdSpiCard::readOCR(unsigned long*)+0x30>
    98a2:	mov	r0, r5
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    98a4:	movs	r4, #0
    98a6:	bl	96c8 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
}
    98aa:	mov	r0, r4
    98ac:	pop	{r3, r4, r5, r6, r7, pc}
    98ae:	mov	r0, r5
    98b0:	bl	96c8 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    98b4:	mov	r0, r4
    98b6:	pop	{r3, r4, r5, r6, r7, pc}

000098b8 <SdSpiCard::readRegister(unsigned char, void*)>:
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    98b8:	ldr	r3, [r0, #0]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    98ba:	push	{r4, r5, r6, lr}
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    98bc:	ldr	r3, [r3, #20]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    98be:	mov	r4, r0
    98c0:	mov	r5, r1
    98c2:	mov	r6, r2
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    98c4:	blx	r3
  if (cardCommand(cmd, 0)) {
    98c6:	mov	r1, r5
    98c8:	mov	r0, r4
    98ca:	movs	r2, #0
    98cc:	bl	97e8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    98d0:	cbz	r0, 98e4 <SdSpiCard::readRegister(unsigned char, void*)+0x2c>
    98d2:	movs	r3, #27
    98d4:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    98d6:	ldrb	r0, [r4, #20]
    98d8:	cbz	r0, 98e2 <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    98da:	mov	r0, r4
    98dc:	bl	96c8 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    98e0:	movs	r0, #0
}
    98e2:	pop	{r4, r5, r6, pc}
  syncDevice();
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    98e4:	mov	r1, r6
    98e6:	movs	r2, #16
    98e8:	mov	r0, r4
    98ea:	bl	972c <SdSpiCard::readData(unsigned char*, unsigned int)>
    98ee:	cmp	r0, #0
    98f0:	beq.n	98d6 <SdSpiCard::readRegister(unsigned char, void*)+0x1e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    98f2:	ldrb	r5, [r4, #20]
    98f4:	cmp	r5, #0
    98f6:	beq.n	98e2 <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    98f8:	mov	r0, r4
    98fa:	bl	96c8 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    98fe:	mov	r0, r5
    9900:	pop	{r4, r5, r6, pc}
    9902:	nop

00009904 <SdSpiCard::readCSD(csd_t*)>:
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    9904:	mov	r2, r1
    9906:	movs	r1, #9
    9908:	b.w	98b8 <SdSpiCard::readRegister(unsigned char, void*)>

0000990c <SdSpiCard::readCID(CID*)>:
   * \param[out] cid pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) {
    return readRegister(CMD10, cid);
    990c:	mov	r2, r1
    990e:	movs	r1, #10
    9910:	b.w	98b8 <SdSpiCard::readRegister(unsigned char, void*)>

00009914 <SdSpiCard::sectorCount()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    9914:	push	{r4, r5, lr}
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    9916:	ldr	r3, [r0, #0]
    9918:	ldr	r2, [pc, #140]	; (99a8 <SdSpiCard::sectorCount()+0x94>)
    991a:	ldr	r3, [r3, #52]	; 0x34
    991c:	cmp	r3, r2
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    991e:	sub	sp, #20
    9920:	bne.n	9982 <SdSpiCard::sectorCount()+0x6e>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    9922:	mov	r2, sp
    9924:	movs	r1, #9
    9926:	bl	98b8 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    992a:	cbz	r0, 993c <SdSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    992c:	ldrb.w	r3, [sp]
    9930:	ands.w	r3, r3, #192	; 0xc0
    9934:	beq.n	9940 <SdSpiCard::sectorCount()+0x2c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    9936:	cmp	r3, #64	; 0x40
    9938:	beq.n	9988 <SdSpiCard::sectorCount()+0x74>
    993a:	movs	r0, #0
}
    993c:	add	sp, #20
    993e:	pop	{r4, r5, pc}
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    9940:	ldrb.w	r4, [sp, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    9944:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    9948:	ldrb.w	r2, [sp, #7]
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    994c:	ldrb.w	r0, [sp, #10]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    9950:	ldrb.w	r1, [sp, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    9954:	ldrb.w	r5, [sp, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    9958:	and.w	r4, r4, #3
    995c:	lsls	r4, r4, #1
    995e:	lsls	r2, r2, #2
    9960:	and.w	r3, r3, #3
    9964:	orr.w	r0, r4, r0, lsr #7
    9968:	and.w	r1, r1, #15
    996c:	orr.w	r3, r2, r3, lsl #10
    9970:	add	r0, r1
    9972:	orr.w	r3, r3, r5, lsr #6
    9976:	adds	r3, #1
    9978:	subs	r0, #7
    997a:	lsl.w	r0, r3, r0
    997e:	add	sp, #20
    9980:	pop	{r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    9982:	mov	r1, sp
    9984:	blx	r3
    9986:	b.n	992a <SdSpiCard::sectorCount()+0x16>
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    9988:	ldrb.w	r3, [sp, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    998c:	ldrb.w	r1, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    9990:	ldrb.w	r0, [sp, #8]
    9994:	adds	r2, r3, #1
    9996:	and.w	r3, r1, #63	; 0x3f
    999a:	add.w	r3, r2, r3, lsl #16
    999e:	add.w	r0, r3, r0, lsl #8
    99a2:	lsls	r0, r0, #10
}
    99a4:	add	sp, #20
    99a6:	pop	{r4, r5, pc}
    99a8:	.word	0x00009905

000099ac <SdSpiCard::readStart(unsigned long)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    99ac:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    99ae:	ldr	r3, [r0, #0]
    99b0:	ldr	r5, [pc, #68]	; (99f8 <SdSpiCard::readStart(unsigned long)+0x4c>)
    99b2:	ldr	r3, [r3, #64]	; 0x40
    99b4:	cmp	r3, r5
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    99b6:	sub	sp, #12
    99b8:	mov	r4, r0
    99ba:	mov	r2, r1
    99bc:	bne.n	99ee <SdSpiCard::readStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    99be:	ldrb	r0, [r0, #22]
  if (type() != SD_CARD_TYPE_SDHC) {
    99c0:	cmp	r0, #3
    sector <<= 9;
    99c2:	it	ne
    99c4:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD18, sector)) {
    99c6:	movs	r1, #18
    99c8:	mov	r0, r4
    99ca:	bl	97e8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    99ce:	cbz	r0, 99e8 <SdSpiCard::readStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    99d0:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    99d2:	movs	r3, #12
    99d4:	strb	r3, [r4, #19]
    99d6:	cbnz	r0, 99dc <SdSpiCard::readStart(unsigned long)+0x30>
  return true;

fail:
  spiStop();
  return false;
}
    99d8:	add	sp, #12
    99da:	pop	{r4, r5, pc}
    99dc:	mov	r0, r4
    99de:	bl	96c8 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    99e2:	movs	r0, #0
    99e4:	add	sp, #12
    99e6:	pop	{r4, r5, pc}
  if (cardCommand(CMD18, sector)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
    99e8:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    99ea:	add	sp, #12
    99ec:	pop	{r4, r5, pc}
    99ee:	str	r1, [sp, #4]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    99f0:	blx	r3
    99f2:	ldr	r2, [sp, #4]
    99f4:	b.n	99c0 <SdSpiCard::readStart(unsigned long)+0x14>
    99f6:	nop
    99f8:	.word	0x00009611

000099fc <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    99fc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9a00:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    9a02:	ldrb	r1, [r0, #16]
    9a04:	cmp	r1, #1
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    9a06:	mov	r6, r0
    9a08:	mov	r4, r2
    9a0a:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    9a0c:	beq.n	9a1e <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!syncDevice()) {
    9a0e:	ldr	r3, [r6, #0]
    9a10:	mov	r0, r6
    9a12:	ldr	r3, [r3, #20]
    9a14:	blx	r3
    9a16:	cbnz	r0, 9a52 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x56>
      return false;
    9a18:	movs	r0, #0
    9a1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    9a1e:	ldr	r3, [r0, #12]
    9a20:	cmp	r3, r5
    9a22:	bne.n	9a0e <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    9a24:	movs	r5, #0
    9a26:	cbz	r7, 9a42 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    if (!readData(dst, 512)) {
    9a28:	mov	r1, r4
    9a2a:	mov.w	r2, #512	; 0x200
    9a2e:	mov	r0, r6
    9a30:	bl	972c <SdSpiCard::readData(unsigned char*, unsigned int)>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    9a34:	adds	r5, #1
    9a36:	add.w	r4, r4, #512	; 0x200
    if (!readData(dst, 512)) {
    9a3a:	cmp	r0, #0
    9a3c:	beq.n	9a18 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    9a3e:	cmp	r7, r5
    9a40:	bne.n	9a28 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    9a42:	ldr	r3, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    9a44:	ldrb	r2, [r6, #17]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    9a46:	add	r7, r3
    9a48:	str	r7, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    9a4a:	cbnz	r2, 9a66 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x6a>
    9a4c:	movs	r0, #1
    9a4e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    if (!syncDevice()) {
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
    9a52:	mov	r1, r5
    9a54:	mov	r0, r6
    9a56:	bl	99ac <SdSpiCard::readStart(unsigned long)>
    9a5a:	cmp	r0, #0
    9a5c:	beq.n	9a18 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    9a5e:	movs	r3, #1
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    }
    m_curSector = sector;
    9a60:	str	r5, [r6, #12]
    m_curState = READ_STATE;
    9a62:	strb	r3, [r6, #16]
    9a64:	b.n	9a24 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    9a66:	ldr	r3, [r6, #0]
    9a68:	mov	r0, r6
    9a6a:	ldr	r3, [r3, #20]
      return false;
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
    9a6c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    9a70:	bx	r3
    9a72:	nop

00009a74 <SdSpiCard::readStop()>:
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    9a74:	push	{r3, r4, r5, lr}
  if (cardCommand(CMD12, 0)) {
    9a76:	movs	r2, #0
    9a78:	movs	r1, #12
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    9a7a:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    9a7c:	bl	97e8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    9a80:	ldrb	r4, [r5, #20]
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    9a82:	cbz	r0, 9a8e <SdSpiCard::readStop()+0x1a>
    9a84:	movs	r3, #9
    9a86:	strb	r3, [r5, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    9a88:	cbnz	r4, 9aa0 <SdSpiCard::readStop()+0x2c>
  return true;

fail:
  spiStop();
  return false;
}
    9a8a:	mov	r0, r4
    9a8c:	pop	{r3, r4, r5, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    9a8e:	cbnz	r4, 9a96 <SdSpiCard::readStop()+0x22>
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
  return true;
    9a90:	movs	r4, #1

fail:
  spiStop();
  return false;
}
    9a92:	mov	r0, r4
    9a94:	pop	{r3, r4, r5, pc}
    9a96:	mov	r0, r5
    9a98:	bl	96c8 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    9a9c:	mov	r0, r4
    9a9e:	pop	{r3, r4, r5, pc}
    9aa0:	mov	r0, r5
    9aa2:	movs	r4, #0
    9aa4:	bl	96c8 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    9aa8:	mov	r0, r4
    9aaa:	pop	{r3, r4, r5, pc}

00009aac <SdSpiCard::writeStart(unsigned long)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    9aac:	push	{r4, r5, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    9aae:	ldr	r3, [r0, #0]
    9ab0:	ldr	r5, [pc, #68]	; (9af8 <SdSpiCard::writeStart(unsigned long)+0x4c>)
    9ab2:	ldr	r3, [r3, #64]	; 0x40
    9ab4:	cmp	r3, r5
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    9ab6:	sub	sp, #12
    9ab8:	mov	r4, r0
    9aba:	mov	r2, r1
    9abc:	bne.n	9aee <SdSpiCard::writeStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    9abe:	ldrb	r0, [r0, #22]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    9ac0:	cmp	r0, #3
    sector <<= 9;
    9ac2:	it	ne
    9ac4:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD25, sector)) {
    9ac6:	movs	r1, #25
    9ac8:	mov	r0, r4
    9aca:	bl	97e8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    9ace:	cbz	r0, 9ae8 <SdSpiCard::writeStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    9ad0:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    9ad2:	movs	r3, #14
    9ad4:	strb	r3, [r4, #19]
    9ad6:	cbnz	r0, 9adc <SdSpiCard::writeStart(unsigned long)+0x30>
  return true;

fail:
  spiStop();
  return false;
}
    9ad8:	add	sp, #12
    9ada:	pop	{r4, r5, pc}
    9adc:	mov	r0, r4
    9ade:	bl	96c8 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    9ae2:	movs	r0, #0
    9ae4:	add	sp, #12
    9ae6:	pop	{r4, r5, pc}
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
    9ae8:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    9aea:	add	sp, #12
    9aec:	pop	{r4, r5, pc}
    9aee:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    9af0:	blx	r3
    9af2:	ldr	r2, [sp, #4]
    9af4:	b.n	9ac0 <SdSpiCard::writeStart(unsigned long)+0x14>
    9af6:	nop
    9af8:	.word	0x00009611

00009afc <SdSpiCard::erase(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    9afc:	push	{r4, r5, r6, r7, lr}
  csd_t csd;
  if (!readCSD(&csd)) {
    9afe:	ldr	r3, [r0, #0]
    9b00:	ldr	r7, [pc, #172]	; (9bb0 <SdSpiCard::erase(unsigned long, unsigned long)+0xb4>)
    9b02:	ldr	r3, [r3, #52]	; 0x34
    9b04:	cmp	r3, r7
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    9b06:	sub	sp, #20
    9b08:	mov	r4, r0
    9b0a:	mov	r5, r1
    9b0c:	mov	r6, r2
    9b0e:	bne.n	9b6c <SdSpiCard::erase(unsigned long, unsigned long)+0x70>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    9b10:	mov	r2, sp
    9b12:	movs	r1, #9
    9b14:	bl	98b8 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  if (!readCSD(&csd)) {
    9b18:	cbz	r0, 9b40 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    9b1a:	ldrb.w	r3, [sp, #10]
    9b1e:	lsls	r2, r3, #25
    9b20:	bpl.n	9b50 <SdSpiCard::erase(unsigned long, unsigned long)+0x54>
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    9b22:	ldrb	r3, [r4, #22]
    9b24:	cmp	r3, #3
    firstSector <<= 9;
    9b26:	it	ne
    9b28:	lslne	r5, r5, #9
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
    9b2a:	mov	r2, r5
    9b2c:	mov.w	r1, #32
    9b30:	mov	r0, r4
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
    9b32:	it	ne
    9b34:	lslne	r6, r6, #9
  }
  if (cardCommand(CMD32, firstSector)
    9b36:	bl	97e8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD33, lastSector)
      || cardCommand(CMD38, 0)) {
    9b3a:	cbz	r0, 9b72 <SdSpiCard::erase(unsigned long, unsigned long)+0x76>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    9b3c:	movs	r3, #37	; 0x25
    9b3e:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    9b40:	ldrb	r0, [r4, #20]
    9b42:	cbz	r0, 9b4c <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    9b44:	mov	r0, r4
    9b46:	bl	96c8 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    9b4a:	movs	r0, #0
}
    9b4c:	add	sp, #20
    9b4e:	pop	{r4, r5, r6, r7, pc}
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    9b50:	and.w	r3, r3, #63	; 0x3f
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    9b54:	ldrb.w	r1, [sp, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    9b58:	lsls	r3, r3, #1
    9b5a:	adds	r2, r6, #1
    9b5c:	orr.w	r3, r3, r1, lsr #7
    9b60:	orrs	r2, r5
    9b62:	tst	r3, r2
    9b64:	beq.n	9b22 <SdSpiCard::erase(unsigned long, unsigned long)+0x26>
    9b66:	movs	r3, #38	; 0x26
    9b68:	strb	r3, [r4, #19]
    9b6a:	b.n	9b40 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    9b6c:	mov	r1, sp
    9b6e:	blx	r3
    9b70:	b.n	9b18 <SdSpiCard::erase(unsigned long, unsigned long)+0x1c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
      || cardCommand(CMD33, lastSector)
    9b72:	mov	r2, r6
    9b74:	movs	r1, #33	; 0x21
    9b76:	mov	r0, r4
    9b78:	bl	97e8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    9b7c:	cmp	r0, #0
    9b7e:	bne.n	9b3c <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
      || cardCommand(CMD38, 0)) {
    9b80:	mov	r2, r0
    9b82:	movs	r1, #38	; 0x26
    9b84:	mov	r0, r4
    9b86:	bl	97e8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    9b8a:	cmp	r0, #0
    9b8c:	bne.n	9b3c <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
    error(SD_CARD_ERROR_ERASE);
    goto fail;
  }
  DBG_BEGIN_TIME(DBG_ERASE_BUSY);
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    9b8e:	movw	r1, #10000	; 0x2710
    9b92:	mov	r0, r4
    9b94:	bl	97ac <SdSpiCard::waitNotBusy(unsigned short)>
    9b98:	cbnz	r0, 9ba0 <SdSpiCard::erase(unsigned long, unsigned long)+0xa4>
    9b9a:	movs	r3, #39	; 0x27
    9b9c:	strb	r3, [r4, #19]
    9b9e:	b.n	9b40 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    9ba0:	ldrb	r5, [r4, #20]
    9ba2:	cmp	r5, #0
    9ba4:	beq.n	9b4c <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    9ba6:	mov	r0, r4
    9ba8:	bl	96c8 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_ERASE_BUSY);
  spiStop();
  return true;
    9bac:	mov	r0, r5
    9bae:	b.n	9b4c <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    9bb0:	.word	0x00009905

00009bb4 <SdSpiCard::writeStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    9bb4:	push	{r4, r5, r6, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    9bb6:	mov.w	r1, #600	; 0x258
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    9bba:	mov	r5, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    9bbc:	bl	97ac <SdSpiCard::waitNotBusy(unsigned short)>
    9bc0:	mov	r6, r0
    9bc2:	cbnz	r0, 9bdc <SdSpiCard::writeStop()+0x28>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    9bc4:	ldrb	r4, [r5, #20]
    9bc6:	movs	r3, #30
    9bc8:	strb	r3, [r5, #19]
    9bca:	cbnz	r4, 9bd0 <SdSpiCard::writeStop()+0x1c>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    9bcc:	mov	r0, r4
    9bce:	pop	{r4, r5, r6, pc}
    9bd0:	mov	r0, r5
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
    9bd2:	mov	r4, r6
    9bd4:	bl	96c8 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
}
    9bd8:	mov	r0, r4
    9bda:	pop	{r4, r5, r6, pc}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    9bdc:	movs	r1, #253	; 0xfd
    9bde:	adds	r0, r5, #4
    9be0:	bl	ad74 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    9be4:	ldrb	r4, [r5, #20]
    9be6:	cbnz	r4, 9bee <SdSpiCard::writeStop()+0x3a>
    9be8:	mov	r4, r6

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    9bea:	mov	r0, r4
    9bec:	pop	{r4, r5, r6, pc}
    9bee:	mov	r0, r5
    9bf0:	bl	96c8 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    9bf4:	b.n	9bcc <SdSpiCard::writeStop()+0x18>
    9bf6:	nop

00009bf8 <SdSpiCard::syncDevice()>:
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    9bf8:	push	{r4, lr}
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    9bfa:	ldrb	r3, [r0, #16]
    9bfc:	cmp	r3, #1
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    9bfe:	mov	r4, r0
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    9c00:	beq.n	9c0e <SdSpiCard::syncDevice()+0x16>
    if (!SdSpiCard::readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    9c02:	cmp	r3, #2
    9c04:	beq.n	9c1a <SdSpiCard::syncDevice()+0x22>
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    9c06:	movs	r3, #0
    9c08:	strb	r3, [r4, #16]
#endif  // ENABLE_DEDICATED_SPI
  return true;
    9c0a:	movs	r0, #1
    9c0c:	pop	{r4, pc}
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    if (!SdSpiCard::readStop()) {
    9c0e:	bl	9a74 <SdSpiCard::readStop()>
    9c12:	cmp	r0, #0
    9c14:	bne.n	9c06 <SdSpiCard::syncDevice()+0xe>
      return false;
    9c16:	movs	r0, #0
    9c18:	pop	{r4, pc}
    }
  } else if (m_curState == WRITE_STATE) {
    if (!SdSpiCard::writeStop()) {
    9c1a:	bl	9bb4 <SdSpiCard::writeStop()>
    9c1e:	cmp	r0, #0
    9c20:	bne.n	9c06 <SdSpiCard::syncDevice()+0xe>
    9c22:	b.n	9c16 <SdSpiCard::syncDevice()+0x1e>

00009c24 <SdSpiCard::writeData(unsigned char, unsigned char const*)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
    9c24:	push	{r4, r5, r6, lr}
    9c26:	adds	r4, r0, #4
    9c28:	mov	r6, r2
    9c2a:	mov	r5, r0
    9c2c:	mov	r0, r4
    9c2e:	bl	ad74 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver.send(buf, n);
    9c32:	mov.w	r2, #512	; 0x200
    9c36:	mov	r1, r6
    9c38:	mov	r0, r4
    9c3a:	bl	ad8c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    9c3e:	mov	r0, r4
    9c40:	movs	r1, #255	; 0xff
    9c42:	bl	ad74 <SdSpiArduinoDriver::send(unsigned char)>
    9c46:	mov	r0, r4
    9c48:	movs	r1, #255	; 0xff
    9c4a:	bl	ad74 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    9c4e:	mov	r0, r4
    9c50:	bl	ad38 <SdSpiArduinoDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    9c54:	and.w	r3, r0, #31
    9c58:	cmp	r3, #5
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    9c5a:	strb	r0, [r5, #21]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    9c5c:	beq.n	9c72 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x4e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    9c5e:	ldrb	r0, [r5, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    9c60:	movs	r3, #31
    9c62:	strb	r3, [r5, #19]
    9c64:	cbnz	r0, 9c68 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
  return true;

fail:
  spiStop();
  return false;
}
    9c66:	pop	{r4, r5, r6, pc}
    9c68:	mov	r0, r5
    9c6a:	bl	96c8 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  }
  return true;

fail:
  spiStop();
  return false;
    9c6e:	movs	r0, #0
    9c70:	pop	{r4, r5, r6, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE_DATA);
    goto fail;
  }
  return true;
    9c72:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    9c74:	pop	{r4, r5, r6, pc}
    9c76:	nop

00009c78 <SdSpiCard::writeData(unsigned char const*)>:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    9c78:	push	{r3, r4, r5, lr}
    9c7a:	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    9c7c:	mov.w	r1, #600	; 0x258
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    9c80:	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    9c82:	bl	97ac <SdSpiCard::waitNotBusy(unsigned short)>
    9c86:	cbnz	r0, 9c9a <SdSpiCard::writeData(unsigned char const*)+0x22>
    9c88:	movs	r3, #35	; 0x23
    9c8a:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    9c8c:	ldrb	r0, [r4, #20]
    9c8e:	cbz	r0, 9c98 <SdSpiCard::writeData(unsigned char const*)+0x20>
    9c90:	mov	r0, r4
    9c92:	bl	96c8 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  }
  return true;

fail:
  spiStop();
  return false;
    9c96:	movs	r0, #0
}
    9c98:	pop	{r3, r4, r5, pc}
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    9c9a:	mov	r2, r5
    9c9c:	movs	r1, #252	; 0xfc
    9c9e:	mov	r0, r4
    9ca0:	bl	9c24 <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    9ca4:	cmp	r0, #0
    9ca6:	beq.n	9c8c <SdSpiCard::writeData(unsigned char const*)+0x14>
  return true;

fail:
  spiStop();
  return false;
}
    9ca8:	pop	{r3, r4, r5, pc}
    9caa:	nop

00009cac <sdIrs()>:
#endif  // USE_DEBUG_MODE
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
    9cac:	push	{r4}
  SDHC_IRQSIGEN = 0;
    9cae:	ldr	r4, [pc, #28]	; (9ccc <sdIrs()+0x20>)
  m_irqstat = SDHC_IRQSTAT;
    9cb0:	ldr	r2, [pc, #28]	; (9cd0 <sdIrs()+0x24>)
    9cb2:	ldr	r1, [pc, #32]	; (9cd4 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    9cb4:	ldr	r0, [pc, #32]	; (9cd8 <sdIrs()+0x2c>)
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    9cb6:	movs	r3, #0
    9cb8:	str	r3, [r4, #0]
  m_irqstat = SDHC_IRQSTAT;
    9cba:	ldr	r4, [r2, #0]
    9cbc:	str	r4, [r1, #0]
  SDHC_IRQSTAT = m_irqstat;
    9cbe:	ldr	r1, [r1, #0]
    9cc0:	str	r1, [r2, #0]
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
}
    9cc2:	ldr.w	r4, [sp], #4
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    9cc6:	strb	r3, [r0, #0]
}
    9cc8:	bx	lr
    9cca:	nop
    9ccc:	.word	0x400b1038
    9cd0:	.word	0x400b1030
    9cd4:	.word	0x1fff2500
    9cd8:	.word	0x1fff2518

00009cdc <isBusyCommandComplete()>:
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    9cdc:	ldr	r3, [pc, #12]	; (9cec <isBusyCommandComplete()+0x10>)
    9cde:	ldr	r0, [pc, #16]	; (9cf0 <isBusyCommandComplete()+0x14>)
    9ce0:	ldr	r3, [r3, #0]
    9ce2:	ands	r0, r3
}
    9ce4:	clz	r0, r0
    9ce8:	lsrs	r0, r0, #5
    9cea:	bx	lr
    9cec:	.word	0x400b1030
    9cf0:	.word	0x000f0001

00009cf4 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    9cf4:	ldr	r3, [pc, #8]	; (9d00 <isBusyCommandInhibit()+0xc>)
    9cf6:	ldr	r0, [r3, #0]
}
    9cf8:	and.w	r0, r0, #1
    9cfc:	bx	lr
    9cfe:	nop
    9d00:	.word	0x400b1024

00009d04 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    9d04:	ldr	r3, [pc, #4]	; (9d0c <isBusyDMA()+0x8>)
    9d06:	ldrb	r0, [r3, #0]
}
    9d08:	bx	lr
    9d0a:	nop
    9d0c:	.word	0x1fff2518

00009d10 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    9d10:	ldr	r3, [pc, #12]	; (9d20 <isBusyFifoRead()+0x10>)
    9d12:	ldr	r0, [r3, #0]
    9d14:	eor.w	r0, r0, #2048	; 0x800
}
    9d18:	ubfx	r0, r0, #11, #1
    9d1c:	bx	lr
    9d1e:	nop
    9d20:	.word	0x400b1024

00009d24 <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    9d24:	ldr	r3, [pc, #12]	; (9d34 <isBusyFifoWrite()+0x10>)
    9d26:	ldr	r0, [r3, #0]
    9d28:	eor.w	r0, r0, #1024	; 0x400
}
    9d2c:	ubfx	r0, r0, #10, #1
    9d30:	bx	lr
    9d32:	nop
    9d34:	.word	0x400b1024

00009d38 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    9d38:	ldr	r3, [pc, #12]	; (9d48 <isBusyTransferComplete()+0x10>)
    9d3a:	ldr	r0, [pc, #16]	; (9d4c <isBusyTransferComplete()+0x14>)
    9d3c:	ldr	r3, [r3, #0]
    9d3e:	ands	r0, r3
}
    9d40:	clz	r0, r0
    9d44:	lsrs	r0, r0, #5
    9d46:	bx	lr
    9d48:	.word	0x400b1030
    9d4c:	.word	0x117f0002

00009d50 <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    9d50:	mov.w	r2, #1000	; 0x3e8
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    9d54:	ldr	r3, [pc, #176]	; (9e08 <setSdclk(unsigned long)+0xb8>)
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    9d56:	mul.w	r0, r2, r0
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    9d5a:	cmp	r0, r3
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    9d5c:	push	{r4, r5, r6, r7}
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    9d5e:	bhi.n	9df8 <setSdclk(unsigned long)+0xa8>
    9d60:	ldr	r5, [pc, #168]	; (9e0c <setSdclk(unsigned long)+0xbc>)
    9d62:	movs	r2, #8
    9d64:	movs	r1, #1
    sdclkfs <<= 1;
    9d66:	lsls	r1, r1, #1
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    9d68:	lsls	r3, r1, #4
    9d6a:	udiv	r3, r5, r3
    9d6e:	cmp	r0, r3
    9d70:	ldr	r4, [pc, #152]	; (9e0c <setSdclk(unsigned long)+0xbc>)
    9d72:	bcs.n	9df0 <setSdclk(unsigned long)+0xa0>
    9d74:	subs	r2, #1
    9d76:	bne.n	9d66 <setSdclk(unsigned long)+0x16>
    9d78:	udiv	r4, r4, r1
    9d7c:	lsrs	r3, r1, #1
    9d7e:	lsls	r7, r3, #8
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    9d80:	cmp	r0, r4
    9d82:	bcs.n	9e00 <setSdclk(unsigned long)+0xb0>
    9d84:	ldr	r6, [pc, #132]	; (9e0c <setSdclk(unsigned long)+0xbc>)
    9d86:	lsls	r3, r1, #1
    9d88:	movs	r2, #1
    9d8a:	b.n	9d8e <setSdclk(unsigned long)+0x3e>
    9d8c:	mov	r3, r4
    9d8e:	udiv	r4, r6, r3
    9d92:	cmp	r0, r4
    dvs++;
    9d94:	add.w	r5, r2, #1
    9d98:	add.w	r4, r3, r1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    9d9c:	bcs.n	9dec <setSdclk(unsigned long)+0x9c>
    9d9e:	cmp	r5, #16
    9da0:	mov	r2, r5
    9da2:	bne.n	9d8c <setSdclk(unsigned long)+0x3c>
    9da4:	movs	r2, #240	; 0xf0
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    9da6:	ldr	r6, [pc, #104]	; (9e10 <setSdclk(unsigned long)+0xc0>)
  sdclkfs >>= 1;
  dvs--;
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    9da8:	ldr	r4, [pc, #104]	; (9e14 <setSdclk(unsigned long)+0xc4>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    9daa:	ldr	r0, [pc, #96]	; (9e0c <setSdclk(unsigned long)+0xbc>)

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    9dac:	ldr	r1, [pc, #104]	; (9e18 <setSdclk(unsigned long)+0xc8>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    9dae:	mov.w	r5, #1000	; 0x3e8
    9db2:	mul.w	r3, r5, r3
    9db6:	udiv	r3, r0, r3
    9dba:	str	r3, [r6, #0]
  sdclkfs >>= 1;
  dvs--;
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    9dbc:	ldr	r3, [r4, #0]
    9dbe:	bic.w	r3, r3, #8
    9dc2:	str	r3, [r4, #0]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    9dc4:	ldr	r0, [r4, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    9dc6:	bic.w	r3, r0, #1044480	; 0xff000
    9dca:	bic.w	r3, r3, #4080	; 0xff0
    9dce:	orr.w	r3, r3, #917504	; 0xe0000
    9dd2:	orrs	r3, r7
    9dd4:	orrs	r2, r3
    9dd6:	str	r2, [r4, #0]

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    9dd8:	ldr	r3, [r1, #0]
    9dda:	lsls	r3, r3, #28
    9ddc:	bpl.n	9dd8 <setSdclk(unsigned long)+0x88>
  }

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
    9dde:	ldr	r2, [pc, #52]	; (9e14 <setSdclk(unsigned long)+0xc4>)
    9de0:	ldr	r3, [r2, #0]
    9de2:	orr.w	r3, r3, #8
    9de6:	str	r3, [r2, #0]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    9de8:	pop	{r4, r5, r6, r7}
    9dea:	bx	lr
    9dec:	lsls	r2, r2, #4
    9dee:	b.n	9da6 <setSdclk(unsigned long)+0x56>
    9df0:	udiv	r4, r4, r1
    9df4:	lsls	r7, r1, #7
    9df6:	b.n	9d80 <setSdclk(unsigned long)+0x30>
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    9df8:	ldr	r4, [pc, #16]	; (9e0c <setSdclk(unsigned long)+0xbc>)
    9dfa:	movs	r7, #0
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
    9dfc:	movs	r1, #1
    9dfe:	b.n	9d80 <setSdclk(unsigned long)+0x30>
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    9e00:	mov	r3, r1
    9e02:	movs	r2, #0
    9e04:	b.n	9da6 <setSdclk(unsigned long)+0x56>
    9e06:	nop
    9e08:	.word	0x005b8d7f
    9e0c:	.word	0x05b8d800
    9e10:	.word	0x1fff251c
    9e14:	.word	0x400b102c
    9e18:	.word	0x400b1024

00009e1c <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    9e1c:	ldr	r3, [pc, #4]	; (9e24 <SdioCard::errorCode() const+0x8>)
}
    9e1e:	ldrb	r0, [r3, #0]
    9e20:	bx	lr
    9e22:	nop
    9e24:	.word	0x1fff09c0

00009e28 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    9e28:	ldr	r3, [pc, #4]	; (9e30 <SdioCard::errorData() const+0x8>)
    9e2a:	ldr	r0, [r3, #0]
}
    9e2c:	bx	lr
    9e2e:	nop
    9e30:	.word	0x1fff2500

00009e34 <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    9e34:	push	{r4, r5}
  memcpy(cid, &m_cid, 16);
    9e36:	ldr	r4, [pc, #20]	; (9e4c <SdioCard::readCID(CID*)+0x18>)
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    9e38:	mov	r5, r1
  memcpy(cid, &m_cid, 16);
    9e3a:	ldmia	r4!, {r0, r1, r2, r3}
    9e3c:	str	r0, [r5, #0]
    9e3e:	str	r1, [r5, #4]
    9e40:	str	r2, [r5, #8]
    9e42:	str	r3, [r5, #12]
  return true;
}
    9e44:	movs	r0, #1
    9e46:	pop	{r4, r5}
    9e48:	bx	lr
    9e4a:	nop
    9e4c:	.word	0x1fff24e0

00009e50 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    9e50:	push	{r4, r5}
  memcpy(csd, &m_csd, 16);
    9e52:	ldr	r4, [pc, #20]	; (9e68 <SdioCard::readCSD(csd_t*)+0x18>)
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    9e54:	mov	r5, r1
  memcpy(csd, &m_csd, 16);
    9e56:	ldmia	r4!, {r0, r1, r2, r3}
    9e58:	str	r0, [r5, #0]
    9e5a:	str	r1, [r5, #4]
    9e5c:	str	r2, [r5, #8]
    9e5e:	str	r3, [r5, #12]
  return true;
}
    9e60:	movs	r0, #1
    9e62:	pop	{r4, r5}
    9e64:	bx	lr
    9e66:	nop
    9e68:	.word	0x1fff2508

00009e6c <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    9e6c:	ldr	r3, [pc, #8]	; (9e78 <SdioCard::readOCR(unsigned long*)+0xc>)
    9e6e:	ldr	r3, [r3, #0]
    9e70:	str	r3, [r1, #0]
  return true;
}
    9e72:	movs	r0, #1
    9e74:	bx	lr
    9e76:	nop
    9e78:	.word	0x1fff24f8

00009e7c <SdioCard::~SdioCard()>:
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    9e7c:	bx	lr
    9e7e:	nop

00009e80 <waitTimeout(bool (*)())>:
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
    9e80:	push	{r3, r4, r5, r6, r7, lr}
    9e82:	mov	r5, r0
  uint32_t m = micros();
    9e84:	bl	ee0c <micros>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9e88:	ldr	r7, [pc, #24]	; (9ea4 <waitTimeout(bool (*)())+0x24>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    9e8a:	mov	r6, r0
    9e8c:	b.n	9e98 <waitTimeout(bool (*)())+0x18>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9e8e:	bl	ee0c <micros>
    9e92:	subs	r0, r0, r6
    9e94:	cmp	r0, r7
    9e96:	bhi.n	9ea0 <waitTimeout(bool (*)())+0x20>
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    9e98:	blx	r5
    9e9a:	mov	r4, r0
    9e9c:	cmp	r0, #0
    9e9e:	bne.n	9e8e <waitTimeout(bool (*)())+0xe>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      return true;
    }
  }
  return false;  // Caller will set errorCode.
}
    9ea0:	mov	r0, r4
    9ea2:	pop	{r3, r4, r5, r6, r7, pc}
    9ea4:	.word	0x000f4240

00009ea8 <yieldTimeout(bool (*)())>:
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    9ea8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    9eac:	ldr.w	r8, [pc, #64]	; 9ef0 <yieldTimeout(bool (*)())+0x48>
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9eb0:	ldr	r7, [pc, #56]	; (9eec <yieldTimeout(bool (*)())+0x44>)
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    9eb2:	str.w	r0, [r8]
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    9eb6:	mov	r5, r0
  m_busyFcn = fcn;
  uint32_t m = micros();
    9eb8:	bl	ee0c <micros>
    9ebc:	mov	r6, r0
    9ebe:	b.n	9ece <yieldTimeout(bool (*)())+0x26>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9ec0:	bl	ee0c <micros>
    9ec4:	subs	r0, r0, r6
    9ec6:	cmp	r0, r7
    9ec8:	bhi.n	9ee0 <yieldTimeout(bool (*)())+0x38>
  Particle.process();
}
#elif defined(ARDUINO)
inline void SysCall::yield() {
  // Use the external Arduino yield() function.
  ::yield();
    9eca:	bl	fde8 <yield>
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    9ece:	blx	r5
    9ed0:	mov	r4, r0
    9ed2:	cmp	r0, #0
    9ed4:	bne.n	9ec0 <yieldTimeout(bool (*)())+0x18>
      m_busyFcn = 0;
      return true;
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
    9ed6:	str.w	r0, [r8]
  return false;  // Caller will set errorCode.
}
    9eda:	mov	r0, r4
    9edc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    9ee0:	movs	r3, #0
    9ee2:	str.w	r3, [r8]
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    9ee6:	mov	r0, r4
    9ee8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9eec:	.word	0x000f4240
    9ef0:	.word	0x1fff24f0

00009ef4 <SdioCard::~SdioCard()>:
    9ef4:	push	{r4, lr}
    9ef6:	movs	r1, #12
    9ef8:	mov	r4, r0
    9efa:	bl	101b0 <operator delete(void*, unsigned int)>
    9efe:	mov	r0, r4
    9f00:	pop	{r4, pc}
    9f02:	nop

00009f04 <SdioCard::type() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
    9f04:	ldr	r3, [pc, #20]	; (9f1c <SdioCard::type() const+0x18>)
    9f06:	ldrb	r3, [r3, #0]
    9f08:	cbz	r3, 9f18 <SdioCard::type() const+0x14>
    9f0a:	ldr	r3, [pc, #20]	; (9f20 <SdioCard::type() const+0x1c>)
    9f0c:	ldrb	r3, [r3, #0]
    9f0e:	cmp	r3, #0
    9f10:	ite	ne
    9f12:	movne	r0, #3
    9f14:	moveq	r0, #2
    9f16:	bx	lr
    9f18:	movs	r0, #1
}
    9f1a:	bx	lr
    9f1c:	.word	0x1fff24dc
    9f20:	.word	0x1fff24f4

00009f24 <cardCommand(unsigned long, unsigned long)>:
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    9f24:	push	{r3, r4, r5, lr}
    9f26:	mov	r4, r0
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    9f28:	ldr	r0, [pc, #60]	; (9f68 <cardCommand(unsigned long, unsigned long)+0x44>)
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    9f2a:	mov	r5, r1
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    9f2c:	bl	9e80 <waitTimeout(bool (*)())>
    9f30:	cbz	r0, 9f36 <cardCommand(unsigned long, unsigned long)+0x12>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    9f32:	movs	r0, #0
    9f34:	pop	{r3, r4, r5, pc}
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    9f36:	ldr	r2, [pc, #52]	; (9f6c <cardCommand(unsigned long, unsigned long)+0x48>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    9f38:	ldr	r3, [pc, #52]	; (9f70 <cardCommand(unsigned long, unsigned long)+0x4c>)
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    9f3a:	str	r5, [r2, #0]
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
  if (waitTimeout(isBusyCommandComplete)) {
    9f3c:	ldr	r0, [pc, #52]	; (9f74 <cardCommand(unsigned long, unsigned long)+0x50>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    9f3e:	str	r4, [r3, #0]
  if (waitTimeout(isBusyCommandComplete)) {
    9f40:	bl	9e80 <waitTimeout(bool (*)())>
    9f44:	cmp	r0, #0
    9f46:	bne.n	9f32 <cardCommand(unsigned long, unsigned long)+0xe>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
    9f48:	ldr	r2, [pc, #44]	; (9f78 <cardCommand(unsigned long, unsigned long)+0x54>)
    9f4a:	ldr	r3, [pc, #48]	; (9f7c <cardCommand(unsigned long, unsigned long)+0x58>)
    9f4c:	ldr	r1, [r2, #0]
    9f4e:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    9f50:	ldr	r1, [r3, #0]
    9f52:	str	r1, [r2, #0]

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    9f54:	ldr	r2, [r3, #0]
    9f56:	lsls	r2, r2, #31
    9f58:	bpl.n	9f32 <cardCommand(unsigned long, unsigned long)+0xe>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    9f5a:	ldr	r3, [r3, #0]
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    9f5c:	tst.w	r3, #983040	; 0xf0000
    9f60:	bne.n	9f32 <cardCommand(unsigned long, unsigned long)+0xe>
    9f62:	movs	r0, #1
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
    9f64:	pop	{r3, r4, r5, pc}
    9f66:	nop
    9f68:	.word	0x00009cf5
    9f6c:	.word	0x400b1008
    9f70:	.word	0x400b100c
    9f74:	.word	0x00009cdd
    9f78:	.word	0x400b1030
    9f7c:	.word	0x1fff2500

00009f80 <SdioCard::status()>:
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
    9f80:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9f82:	ldr	r3, [pc, #16]	; (9f94 <SdioCard::status()+0x14>)
    9f84:	ldr	r0, [pc, #16]	; (9f98 <SdioCard::status()+0x18>)
    9f86:	ldr	r1, [r3, #0]
    9f88:	bl	9f24 <cardCommand(unsigned long, unsigned long)>
    9f8c:	cbz	r0, 9f92 <SdioCard::status()+0x12>
    9f8e:	ldr	r3, [pc, #12]	; (9f9c <SdioCard::status()+0x1c>)
    9f90:	ldr	r0, [r3, #0]
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
    9f92:	pop	{r3, pc}
    9f94:	.word	0x1fff24fc
    9f98:	.word	0x0d1a0000
    9f9c:	.word	0x400b1010

00009fa0 <readReg16(unsigned long, void*)>:
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    9fa0:	push	{r4, r5, lr}
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    9fa2:	ldr	r3, [pc, #84]	; (9ff8 <readReg16(unsigned long, void*)+0x58>)
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    9fa4:	sub	sp, #20
    9fa6:	mov	r5, r1
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    9fa8:	ldr	r1, [r3, #0]
    9faa:	bl	9f24 <cardCommand(unsigned long, unsigned long)>
    9fae:	cbz	r0, 9ff2 <readReg16(unsigned long, void*)+0x52>
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    9fb0:	ldr	r2, [pc, #72]	; (9ffc <readReg16(unsigned long, void*)+0x5c>)
    9fb2:	ldr	r3, [pc, #76]	; (a000 <readReg16(unsigned long, void*)+0x60>)
    9fb4:	ldr	r2, [r2, #0]
    9fb6:	str	r2, [sp, #0]
    9fb8:	ldr	r1, [r3, #0]
    9fba:	str	r1, [sp, #4]
    9fbc:	ldr	r1, [r3, #4]
    9fbe:	str	r1, [sp, #8]
    9fc0:	adds	r3, #8
    9fc2:	add.w	r4, r5, #15
    9fc6:	ldr	r3, [r3, #0]
    9fc8:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    9fca:	movs	r3, #0
    9fcc:	b.n	9fd2 <readReg16(unsigned long, void*)+0x32>
    9fce:	ldr.w	r2, [r1, #-16]
    d[14 - i] = sr[i/4] >> 8*(i%4);
    9fd2:	and.w	r1, r3, #3
    9fd6:	lsls	r1, r1, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    9fd8:	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    9fda:	lsrs	r2, r1
    9fdc:	add.w	lr, sp, #16
    9fe0:	bic.w	r1, r3, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    9fe4:	cmp	r3, #15
    9fe6:	add	r1, lr
    d[14 - i] = sr[i/4] >> 8*(i%4);
    9fe8:	strb.w	r2, [r4, #-1]!
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    9fec:	bne.n	9fce <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i/4] >> 8*(i%4);
  }
  d[15] = 0;
    9fee:	movs	r3, #0
    9ff0:	strb	r3, [r5, #15]
  return true;
}
    9ff2:	add	sp, #20
    9ff4:	pop	{r4, r5, pc}
    9ff6:	nop
    9ff8:	.word	0x1fff24fc
    9ffc:	.word	0x400b1010
    a000:	.word	0x400b1014

0000a004 <isBusyCMD13()>:
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
    a004:	push	{r3, lr}
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    a006:	ldr	r3, [pc, #28]	; (a024 <isBusyCMD13()+0x20>)
    a008:	ldr	r0, [pc, #28]	; (a028 <isBusyCMD13()+0x24>)
    a00a:	ldr	r1, [r3, #0]
    a00c:	bl	9f24 <cardCommand(unsigned long, unsigned long)>
    a010:	cbz	r0, a020 <isBusyCMD13()+0x1c>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    a012:	ldr	r3, [pc, #24]	; (a02c <isBusyCMD13()+0x28>)
    a014:	ldr	r0, [r3, #0]
    a016:	eor.w	r0, r0, #256	; 0x100
    a01a:	ubfx	r0, r0, #8, #1
    a01e:	pop	{r3, pc}
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
    a020:	movs	r0, #1
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
    a022:	pop	{r3, pc}
    a024:	.word	0x1fff24fc
    a028:	.word	0x0d1a0000
    a02c:	.word	0x400b1010

0000a030 <SdioCard::isBusy()>:
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    a030:	ldr	r3, [pc, #16]	; (a044 <SdioCard::isBusy()+0x14>)
    a032:	ldr	r3, [r3, #0]
    a034:	cbz	r3, a038 <SdioCard::isBusy()+0x8>
    a036:	bx	r3
    a038:	ldr	r3, [pc, #12]	; (a048 <SdioCard::isBusy()+0x18>)
    a03a:	ldrb	r0, [r3, #0]
    a03c:	cbnz	r0, a040 <SdioCard::isBusy()+0x10>
}
    a03e:	bx	lr
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    a040:	b.w	a004 <isBusyCMD13()>
    a044:	.word	0x1fff24f0
    a048:	.word	0x1fff2504

0000a04c <waitDmaStatus() [clone .part.6]>:
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    a04c:	ldr	r3, [pc, #20]	; (a064 <waitDmaStatus() [clone .part.6]+0x18>)
    a04e:	ldr	r0, [r3, #0]
    a050:	ands.w	r0, r0, #2
    a054:	beq.n	a062 <waitDmaStatus() [clone .part.6]+0x16>
    a056:	ldr	r3, [r3, #0]
    a058:	ldr	r0, [pc, #12]	; (a068 <waitDmaStatus() [clone .part.6]+0x1c>)
    a05a:	ands	r0, r3
    a05c:	clz	r0, r0
    a060:	lsrs	r0, r0, #5
}
    a062:	bx	lr
    a064:	.word	0x1fff2500
    a068:	.word	0x117f0000

0000a06c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//------------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    a06c:	push	{r3, r4, r5, r6, r7, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
    a06e:	lsls	r4, r2, #30
    a070:	bne.n	a074 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8>
    a072:	cbnz	r3, a086 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a074:	ldr	r1, [pc, #124]	; (a0f4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    a076:	ldr	r3, [pc, #128]	; (a0f8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a078:	movs	r0, #36	; 0x24
  m_errorLine = line;
    a07a:	mov.w	r2, #470	; 0x1d6
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a07e:	strb	r0, [r1, #0]
  m_errorLine = line;
    a080:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    a082:	movs	r0, #0
    a084:	pop	{r3, r4, r5, r6, r7, pc}
    a086:	mov	r6, r0
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    a088:	ldr	r0, [pc, #112]	; (a0fc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    a08a:	mov	r4, r3
    a08c:	mov	r7, r1
    a08e:	mov	r5, r2
    a090:	bl	9ea8 <yieldTimeout(bool (*)())>
    a094:	cbnz	r0, a0de <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x72>
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    a096:	ldr	r1, [pc, #104]	; (a100 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    a098:	ldr	r2, [pc, #104]	; (a104 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    a09a:	ldr.w	lr, [pc, #128]	; a11c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb0>
    a09e:	mov.w	ip, #1
    a0a2:	strb.w	ip, [lr]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    a0a6:	lsls	r3, r4, #16
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    a0a8:	str	r0, [r1, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    a0aa:	ldr	r4, [pc, #92]	; (a108 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    a0ac:	str	r5, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    a0ae:	ldr	r2, [pc, #92]	; (a10c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    a0b0:	ldr	r1, [pc, #92]	; (a110 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa4>)
    a0b2:	ldr	r0, [pc, #96]	; (a114 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>)
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    a0b4:	orr.w	r3, r3, #512	; 0x200
    a0b8:	str	r3, [r4, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    a0ba:	ldrb	r3, [r2, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    a0bc:	str	r0, [r1, #0]
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    a0be:	cbnz	r3, a0ee <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x82>
    a0c0:	lsls	r1, r7, #9
    a0c2:	mov	r0, r6
    a0c4:	bl	9f24 <cardCommand(unsigned long, unsigned long)>
    a0c8:	cmp	r0, #0
    a0ca:	beq.n	a082 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    a0cc:	ldr	r0, [pc, #72]	; (a118 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xac>)
    a0ce:	bl	9ea8 <yieldTimeout(bool (*)())>
    a0d2:	cmp	r0, #0
    a0d4:	bne.n	a082 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    a0d6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a0da:	b.w	a04c <waitDmaStatus() [clone .part.6]>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a0de:	ldr	r1, [pc, #20]	; (a0f4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    a0e0:	ldr	r3, [pc, #20]	; (a0f8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a0e2:	movs	r0, #10
  m_errorLine = line;
    a0e4:	movw	r2, #473	; 0x1d9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a0e8:	strb	r0, [r1, #0]
  m_errorLine = line;
    a0ea:	str	r2, [r3, #0]
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    a0ec:	b.n	a082 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    a0ee:	mov	r1, r7
    a0f0:	b.n	a0c2 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
    a0f2:	nop
    a0f4:	.word	0x1fff09c0
    a0f8:	.word	0x1fff2520
    a0fc:	.word	0x0000a005
    a100:	.word	0x1fff2500
    a104:	.word	0x400b1000
    a108:	.word	0x400b1004
    a10c:	.word	0x1fff24f4
    a110:	.word	0x400b1038
    a114:	.word	0x117f0002
    a118:	.word	0x00009d05
    a11c:	.word	0x1fff2518

0000a120 <SdioCard::sectorCount()>:
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
}
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
    a120:	push	{r4, r5, r6}
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    a122:	ldr	r1, [pc, #100]	; (a188 <SdioCard::sectorCount()+0x68>)
    a124:	ldrb	r3, [r1, #0]
    a126:	ands.w	r3, r3, #192	; 0xc0
    a12a:	beq.n	a150 <SdioCard::sectorCount()+0x30>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    a12c:	cmp	r3, #64	; 0x40
    a12e:	beq.n	a136 <SdioCard::sectorCount()+0x16>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
    a130:	movs	r0, #0
  return sdCardCapacity(&m_csd);
}
    a132:	pop	{r4, r5, r6}
    a134:	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    a136:	ldrb	r3, [r1, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    a138:	ldrb	r4, [r1, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    a13a:	ldrb	r0, [r1, #8]
    a13c:	adds	r2, r3, #1
    a13e:	and.w	r3, r4, #63	; 0x3f
    a142:	add.w	r3, r2, r3, lsl #16
    a146:	add.w	r0, r3, r0, lsl #8
    a14a:	lsls	r0, r0, #10
    a14c:	pop	{r4, r5, r6}
    a14e:	bx	lr
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    a150:	ldrb	r5, [r1, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    a152:	ldrb	r3, [r1, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    a154:	ldrb	r2, [r1, #7]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    a156:	ldrb	r4, [r1, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a158:	ldrb	r6, [r1, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    a15a:	ldrb	r0, [r1, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    a15c:	and.w	r1, r5, #3
    a160:	lsls	r1, r1, #1
    a162:	and.w	r3, r3, #3
    a166:	lsls	r2, r2, #2
    a168:	orr.w	r0, r1, r0, lsr #7
    a16c:	orr.w	r3, r2, r3, lsl #10
    a170:	and.w	r1, r4, #15
    a174:	orr.w	r3, r3, r6, lsr #6
    a178:	add	r0, r1
    a17a:	subs	r0, #7
    a17c:	adds	r3, #1
    a17e:	lsl.w	r0, r3, r0
    a182:	pop	{r4, r5, r6}
    a184:	bx	lr
    a186:	nop
    a188:	.word	0x1fff2508

0000a18c <SdioCard::erase(unsigned long, unsigned long)>:
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    a18c:	push	{r4, r5, r6, lr}
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    a18e:	ldr	r6, [pc, #176]	; (a240 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    a190:	ldrb	r3, [r6, #10]
    a192:	and.w	r0, r3, #64	; 0x40
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    a196:	mov	r5, r2
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    a198:	cbnz	r0, a1b2 <SdioCard::erase(unsigned long, unsigned long)+0x26>
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    a19a:	and.w	r3, r3, #63	; 0x3f
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    a19e:	ldrb	r2, [r6, #11]
    a1a0:	and.w	r4, r0, #255	; 0xff
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    a1a4:	lsls	r3, r3, #1
    a1a6:	adds	r0, r5, #1
    a1a8:	orr.w	r3, r3, r2, lsr #7
    a1ac:	orrs	r0, r1
    a1ae:	tst	r3, r0
    a1b0:	bne.n	a1f6 <SdioCard::erase(unsigned long, unsigned long)+0x6a>
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    }
  }
  if (!m_highCapacity) {
    a1b2:	ldr	r3, [pc, #144]	; (a244 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    a1b4:	ldrb	r3, [r3, #0]
    a1b6:	cbnz	r3, a1bc <SdioCard::erase(unsigned long, unsigned long)+0x30>
    firstSector <<= 9;
    a1b8:	lsls	r1, r1, #9
    lastSector <<= 9;
    a1ba:	lsls	r5, r5, #9
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    a1bc:	ldr	r0, [pc, #136]	; (a248 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    a1be:	bl	9f24 <cardCommand(unsigned long, unsigned long)>
    a1c2:	mov	r4, r0
    a1c4:	cbnz	r0, a1d8 <SdioCard::erase(unsigned long, unsigned long)+0x4c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a1c6:	ldr	r1, [pc, #132]	; (a24c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    a1c8:	ldr	r3, [pc, #132]	; (a250 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a1ca:	movs	r0, #15
  m_errorLine = line;
    a1cc:	mov.w	r2, #692	; 0x2b4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a1d0:	strb	r0, [r1, #0]
  m_errorLine = line;
    a1d2:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    a1d4:	mov	r0, r4
    a1d6:	pop	{r4, r5, r6, pc}
    lastSector <<= 9;
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    a1d8:	mov	r1, r5
    a1da:	ldr	r0, [pc, #120]	; (a254 <SdioCard::erase(unsigned long, unsigned long)+0xc8>)
    a1dc:	bl	9f24 <cardCommand(unsigned long, unsigned long)>
    a1e0:	mov	r4, r0
    a1e2:	cbnz	r0, a208 <SdioCard::erase(unsigned long, unsigned long)+0x7c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a1e4:	ldr	r1, [pc, #100]	; (a24c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    a1e6:	ldr	r3, [pc, #104]	; (a250 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a1e8:	movs	r0, #16
  m_errorLine = line;
    a1ea:	movw	r2, #695	; 0x2b7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a1ee:	strb	r0, [r1, #0]
  m_errorLine = line;
    a1f0:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    a1f2:	mov	r0, r4
    a1f4:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a1f6:	ldr	r1, [pc, #84]	; (a24c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    a1f8:	ldr	r3, [pc, #84]	; (a250 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a1fa:	movs	r0, #38	; 0x26
  m_errorLine = line;
    a1fc:	mov.w	r2, #684	; 0x2ac
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a200:	strb	r0, [r1, #0]
  m_errorLine = line;
    a202:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    a204:	mov	r0, r4
    a206:	pop	{r4, r5, r6, pc}
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    a208:	movs	r1, #0
    a20a:	ldr	r0, [pc, #76]	; (a258 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    a20c:	bl	9f24 <cardCommand(unsigned long, unsigned long)>
    a210:	mov	r4, r0
    a212:	cbnz	r0, a224 <SdioCard::erase(unsigned long, unsigned long)+0x98>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a214:	ldr	r1, [pc, #52]	; (a24c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    a216:	ldr	r3, [pc, #56]	; (a250 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a218:	movs	r0, #17
  m_errorLine = line;
    a21a:	movw	r2, #698	; 0x2ba
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a21e:	strb	r0, [r1, #0]
  m_errorLine = line;
    a220:	str	r2, [r3, #0]
    a222:	b.n	a1d4 <SdioCard::erase(unsigned long, unsigned long)+0x48>
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    a224:	ldr	r0, [pc, #52]	; (a25c <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    a226:	bl	9e80 <waitTimeout(bool (*)())>
    a22a:	cmp	r0, #0
    a22c:	beq.n	a1d4 <SdioCard::erase(unsigned long, unsigned long)+0x48>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a22e:	ldr	r1, [pc, #28]	; (a24c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    a230:	ldr	r3, [pc, #28]	; (a250 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a232:	movs	r0, #39	; 0x27
  m_errorLine = line;
    a234:	movw	r2, #701	; 0x2bd
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a238:	strb	r0, [r1, #0]
  m_errorLine = line;
    a23a:	str	r2, [r3, #0]
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    a23c:	movs	r4, #0
    a23e:	b.n	a1d4 <SdioCard::erase(unsigned long, unsigned long)+0x48>
    a240:	.word	0x1fff2508
    a244:	.word	0x1fff24f4
    a248:	.word	0x201a0000
    a24c:	.word	0x1fff09c0
    a250:	.word	0x1fff2520
    a254:	.word	0x211a0000
    a258:	.word	0x261b0000
    a25c:	.word	0x0000a005

0000a260 <transferStop()>:
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
    a260:	push	{r4, r5, r6, lr}
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    a262:	movs	r1, #0
    a264:	ldr	r0, [pc, #84]	; (a2bc <transferStop()+0x5c>)
    a266:	bl	9f24 <cardCommand(unsigned long, unsigned long)>
    a26a:	mov	r4, r0
    a26c:	cbnz	r0, a280 <transferStop()+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a26e:	ldr	r1, [pc, #80]	; (a2c0 <transferStop()+0x60>)
  m_errorLine = line;
    a270:	ldr	r3, [pc, #80]	; (a2c4 <transferStop()+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a272:	movs	r0, #9
  m_errorLine = line;
    a274:	mov.w	r2, #540	; 0x21c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a278:	strb	r0, [r1, #0]
  m_errorLine = line;
    a27a:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    a27c:	mov	r0, r4
    a27e:	pop	{r4, r5, r6, pc}
//------------------------------------------------------------------------------
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    a280:	ldr	r0, [pc, #68]	; (a2c8 <transferStop()+0x68>)
    a282:	bl	9ea8 <yieldTimeout(bool (*)())>
    a286:	cbnz	r0, a2a6 <transferStop()+0x46>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    a288:	ldr	r0, [pc, #64]	; (a2cc <transferStop()+0x6c>)
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    a28a:	ldr	r1, [pc, #68]	; (a2d0 <transferStop()+0x70>)
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    a28c:	ldr	r5, [pc, #68]	; (a2d4 <transferStop()+0x74>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    a28e:	ldr	r6, [r0, #0]
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    a290:	ldr	r3, [r1, #0]
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    a292:	ldr	r2, [r5, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    a294:	bic.w	r3, r3, #65536	; 0x10000
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    a298:	orr.w	r2, r2, #67108864	; 0x4000000
    a29c:	str	r2, [r5, #0]
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
    a29e:	str	r6, [r0, #0]
  SDHC_PROCTL = proctl;
    a2a0:	str	r3, [r1, #0]
  return true;
}
    a2a2:	mov	r0, r4
    a2a4:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a2a6:	ldr	r1, [pc, #24]	; (a2c0 <transferStop()+0x60>)
  m_errorLine = line;
    a2a8:	ldr	r3, [pc, #24]	; (a2c4 <transferStop()+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a2aa:	movs	r0, #10
  m_errorLine = line;
    a2ac:	movw	r2, #543	; 0x21f
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a2b0:	strb	r0, [r1, #0]
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    a2b2:	movs	r4, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    a2b4:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    a2b6:	mov	r0, r4
    a2b8:	pop	{r4, r5, r6, pc}
    a2ba:	nop
    a2bc:	.word	0x0cdb0000
    a2c0:	.word	0x1fff09c0
    a2c4:	.word	0x1fff2520
    a2c8:	.word	0x0000a005
    a2cc:	.word	0x400b1034
    a2d0:	.word	0x400b1028
    a2d4:	.word	0x400b102c

0000a2d8 <SdioCard::readStop()>:
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    a2d8:	b.w	a260 <transferStop()>

0000a2dc <SdioCard::writeData(unsigned char const*)>:
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    a2dc:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    a2de:	ldr	r3, [pc, #160]	; (a380 <SdioCard::writeData(unsigned char const*)+0xa4>)
    a2e0:	ldr	r3, [r3, #0]
    a2e2:	lsls	r0, r3, #23
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    a2e4:	mov	r5, r1
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    a2e6:	bmi.n	a2fa <SdioCard::writeData(unsigned char const*)+0x1e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    a2e8:	ldr	r3, [pc, #152]	; (a384 <SdioCard::writeData(unsigned char const*)+0xa8>)
    a2ea:	ldr	r2, [r3, #0]
    a2ec:	bic.w	r2, r2, #65536	; 0x10000
    a2f0:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    a2f2:	ldr	r2, [r3, #0]
    a2f4:	orr.w	r2, r2, #131072	; 0x20000
    a2f8:	str	r2, [r3, #0]
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    a2fa:	ldr	r2, [pc, #136]	; (a384 <SdioCard::writeData(unsigned char const*)+0xa8>)
  if (waitTimeout(isBusyFifoWrite)) {
    a2fc:	ldr	r0, [pc, #136]	; (a388 <SdioCard::writeData(unsigned char const*)+0xac>)
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    a2fe:	ldr	r3, [r2, #0]
    a300:	orr.w	r3, r3, #65536	; 0x10000
    a304:	str	r3, [r2, #0]
  if (waitTimeout(isBusyFifoWrite)) {
    a306:	bl	9e80 <waitTimeout(bool (*)())>
    a30a:	cmp	r0, #0
    a30c:	bne.n	a36c <SdioCard::writeData(unsigned char const*)+0x90>
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    a30e:	ldr	r4, [pc, #112]	; (a380 <SdioCard::writeData(unsigned char const*)+0xa4>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    a310:	ldr	r0, [pc, #120]	; (a38c <SdioCard::writeData(unsigned char const*)+0xb0>)
    a312:	subs	r3, r5, #4
    a314:	add.w	r5, r5, #508	; 0x1fc
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    a318:	ldr	r2, [r4, #0]
    a31a:	lsls	r1, r2, #21
    a31c:	bpl.n	a318 <SdioCard::writeData(unsigned char const*)+0x3c>
    a31e:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    a322:	ldr.w	r2, [r3, #4]!
    a326:	str	r2, [r0, #0]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    a328:	cmp	r1, r3
    a32a:	bne.n	a322 <SdioCard::writeData(unsigned char const*)+0x46>
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    a32c:	cmp	r5, r1
    a32e:	mov	r3, r1
    a330:	bne.n	a318 <SdioCard::writeData(unsigned char const*)+0x3c>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    a332:	ldr	r0, [pc, #92]	; (a390 <SdioCard::writeData(unsigned char const*)+0xb4>)
    a334:	bl	9e80 <waitTimeout(bool (*)())>
    a338:	cbnz	r0, a35a <SdioCard::writeData(unsigned char const*)+0x7e>
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    a33a:	ldr	r2, [pc, #88]	; (a394 <SdioCard::writeData(unsigned char const*)+0xb8>)
    a33c:	ldr	r3, [pc, #88]	; (a398 <SdioCard::writeData(unsigned char const*)+0xbc>)
    a33e:	ldr	r1, [r2, #0]
    a340:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    a342:	ldr	r1, [r3, #0]
    a344:	str	r1, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    a346:	ldr	r2, [r3, #0]
    a348:	lsls	r2, r2, #30
    a34a:	bpl.n	a37c <SdioCard::writeData(unsigned char const*)+0xa0>
    a34c:	ldr	r3, [r3, #0]
    a34e:	ldr	r0, [pc, #76]	; (a39c <SdioCard::writeData(unsigned char const*)+0xc0>)
    a350:	ands	r0, r3
    a352:	clz	r0, r0
    a356:	lsrs	r0, r0, #5
    a358:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a35a:	ldr	r1, [pc, #68]	; (a3a0 <SdioCard::writeData(unsigned char const*)+0xc4>)
  m_errorLine = line;
    a35c:	ldr	r3, [pc, #68]	; (a3a4 <SdioCard::writeData(unsigned char const*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a35e:	movs	r0, #35	; 0x23
  m_errorLine = line;
    a360:	movw	r2, #905	; 0x389
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a364:	strb	r0, [r1, #0]
  m_errorLine = line;
    a366:	str	r2, [r3, #0]
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
    a368:	movs	r0, #0
    a36a:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a36c:	ldr	r1, [pc, #48]	; (a3a0 <SdioCard::writeData(unsigned char const*)+0xc4>)
  m_errorLine = line;
    a36e:	ldr	r3, [pc, #52]	; (a3a4 <SdioCard::writeData(unsigned char const*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a370:	movs	r0, #32
  m_errorLine = line;
    a372:	movw	r2, #894	; 0x37e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a376:	strb	r0, [r1, #0]
  m_errorLine = line;
    a378:	str	r2, [r3, #0]
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    a37a:	movs	r0, #0
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    a37c:	pop	{r3, r4, r5, pc}
    a37e:	nop
    a380:	.word	0x400b1024
    a384:	.word	0x400b1028
    a388:	.word	0x00009d25
    a38c:	.word	0x400b1020
    a390:	.word	0x00009d39
    a394:	.word	0x400b1030
    a398:	.word	0x1fff2500
    a39c:	.word	0x117f0000
    a3a0:	.word	0x1fff09c0
    a3a4:	.word	0x1fff2520

0000a3a8 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    a3a8:	push	{r3, r4, r5, lr}
  if (yieldTimeout(isBusyCMD13)) {
    a3aa:	ldr	r0, [pc, #80]	; (a3fc <SdioCard::writeStart(unsigned long)+0x54>)
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    a3ac:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    a3ae:	bl	9ea8 <yieldTimeout(bool (*)())>
    a3b2:	cbnz	r0, a3e8 <SdioCard::writeStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    a3b4:	ldr	r2, [pc, #72]	; (a400 <SdioCard::writeStart(unsigned long)+0x58>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    a3b6:	ldr	r1, [pc, #76]	; (a404 <SdioCard::writeStart(unsigned long)+0x5c>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    a3b8:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    a3ba:	ldr	r0, [pc, #76]	; (a408 <SdioCard::writeStart(unsigned long)+0x60>)
    a3bc:	ldr	r5, [pc, #76]	; (a40c <SdioCard::writeStart(unsigned long)+0x64>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    a3be:	bic.w	r3, r3, #65536	; 0x10000
    a3c2:	str	r3, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    a3c4:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    a3c6:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    a3c8:	cbnz	r3, a3e4 <SdioCard::writeStart(unsigned long)+0x3c>
    a3ca:	lsls	r1, r4, #9
    a3cc:	ldr	r0, [pc, #64]	; (a410 <SdioCard::writeStart(unsigned long)+0x68>)
    a3ce:	bl	9f24 <cardCommand(unsigned long, unsigned long)>
    a3d2:	cbnz	r0, a3e2 <SdioCard::writeStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a3d4:	ldr	r1, [pc, #60]	; (a414 <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    a3d6:	ldr	r3, [pc, #64]	; (a418 <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a3d8:	movs	r4, #14
  m_errorLine = line;
    a3da:	movw	r2, #990	; 0x3de
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a3de:	strb	r4, [r1, #0]
  m_errorLine = line;
    a3e0:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    a3e2:	pop	{r3, r4, r5, pc}
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    a3e4:	mov	r1, r4
    a3e6:	b.n	a3cc <SdioCard::writeStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a3e8:	ldr	r1, [pc, #40]	; (a414 <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    a3ea:	ldr	r3, [pc, #44]	; (a418 <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a3ec:	movs	r0, #10
  m_errorLine = line;
    a3ee:	movw	r2, #978	; 0x3d2
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a3f2:	strb	r0, [r1, #0]
  m_errorLine = line;
    a3f4:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    a3f6:	movs	r0, #0
    a3f8:	pop	{r3, r4, r5, pc}
    a3fa:	nop
    a3fc:	.word	0x0000a005
    a400:	.word	0x400b1028
    a404:	.word	0x1fff24f4
    a408:	.word	0x400b1004
    a40c:	.word	0xffff0200
    a410:	.word	0x193a0022
    a414:	.word	0x1fff09c0
    a418:	.word	0x1fff2520

0000a41c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    a41c:	push	{r3, r4, r5, r6, r7, lr}
    a41e:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    a420:	ldrb	r0, [r0, #8]
    a422:	lsls	r0, r0, #31
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    a424:	mov	r4, r1
    a426:	mov	r5, r2
    a428:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    a42a:	bmi.n	a454 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
      return sdError(SD_CARD_ERROR_CMD18);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    a42c:	cbz	r3, a450 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    a42e:	add	r7, r1
    a430:	b.n	a436 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    a432:	cmp	r4, r7
    a434:	beq.n	a450 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    a436:	ldr	r3, [r6, #0]
    a438:	mov	r2, r5
    a43a:	mov	r1, r4
    a43c:	ldr	r3, [r3, #8]
    a43e:	mov	r0, r6
    a440:	blx	r3
    a442:	adds	r4, #1
    a444:	add.w	r5, r5, #512	; 0x200
    a448:	cmp	r0, #0
    a44a:	bne.n	a432 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
        if (!readSector(sector, dst)) {
          return false;  // readSector will set errorCode.
    a44c:	movs	r0, #0
    a44e:	pop	{r3, r4, r5, r6, r7, pc}
      if (!readSector(sector + i, dst + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    a450:	movs	r0, #1
    a452:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
    a454:	lsls	r0, r2, #30
    a456:	beq.n	a47e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    a458:	cmp	r3, #0
    a45a:	beq.n	a450 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    a45c:	add	r7, r1
    a45e:	b.n	a464 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    a460:	cmp	r7, r4
    a462:	beq.n	a450 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    a464:	ldr	r3, [r6, #0]
    a466:	mov	r2, r5
    a468:	mov	r1, r4
    a46a:	ldr	r3, [r3, #8]
    a46c:	mov	r0, r6
    a46e:	blx	r3
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    a470:	adds	r4, #1
    a472:	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    a476:	cmp	r0, #0
    a478:	bne.n	a460 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    a47a:	movs	r0, #0
    a47c:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    a47e:	ldr	r0, [pc, #24]	; (a498 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    a480:	bl	a06c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    a484:	cmp	r0, #0
    a486:	bne.n	a450 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a488:	ldr	r1, [pc, #16]	; (a49c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
  m_errorLine = line;
    a48a:	ldr	r3, [pc, #20]	; (a4a0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a48c:	movs	r4, #12
  m_errorLine = line;
    a48e:	mov.w	r2, #820	; 0x334
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a492:	strb	r4, [r1, #0]
  m_errorLine = line;
    a494:	str	r2, [r3, #0]
    a496:	pop	{r3, r4, r5, r6, r7, pc}
    a498:	.word	0x123a0037
    a49c:	.word	0x1fff09c0
    a4a0:	.word	0x1fff2520

0000a4a4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    a4a4:	push	{r3, r4, r5, r6, r7, lr}
    a4a6:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    a4a8:	ldrb	r0, [r0, #8]
    a4aa:	lsls	r0, r0, #31
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    a4ac:	mov	r4, r1
    a4ae:	mov	r5, r2
    a4b0:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    a4b2:	bmi.n	a4dc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    a4b4:	cbz	r3, a4d8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    a4b6:	add	r7, r1
    a4b8:	b.n	a4be <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    a4ba:	cmp	r4, r7
    a4bc:	beq.n	a4d8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    a4be:	ldr	r3, [r6, #0]
    a4c0:	mov	r2, r5
    a4c2:	mov	r1, r4
    a4c4:	ldr	r3, [r3, #24]
    a4c6:	mov	r0, r6
    a4c8:	blx	r3
    a4ca:	adds	r4, #1
    a4cc:	add.w	r5, r5, #512	; 0x200
    a4d0:	cmp	r0, #0
    a4d2:	bne.n	a4ba <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
        if (!writeSector(sector, ptr)) {
          return false;  // writeSector will set errorCode.
    a4d4:	movs	r0, #0
    a4d6:	pop	{r3, r4, r5, r6, r7, pc}
      if (!writeSector(sector + i, src + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    a4d8:	movs	r0, #1
    a4da:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
    a4dc:	lsls	r0, r2, #30
    a4de:	beq.n	a506 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    a4e0:	cmp	r3, #0
    a4e2:	beq.n	a4d8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    a4e4:	add	r7, r1
    a4e6:	b.n	a4ec <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    a4e8:	cmp	r7, r4
    a4ea:	beq.n	a4d8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    a4ec:	ldr	r3, [r6, #0]
    a4ee:	mov	r2, r5
    a4f0:	mov	r1, r4
    a4f2:	ldr	r3, [r3, #24]
    a4f4:	mov	r0, r6
    a4f6:	blx	r3
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    a4f8:	adds	r4, #1
    a4fa:	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    a4fe:	cmp	r0, #0
    a500:	bne.n	a4e8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    a502:	movs	r0, #0
    a504:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    a506:	ldr	r0, [pc, #24]	; (a520 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    a508:	bl	a06c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    a50c:	cmp	r0, #0
    a50e:	bne.n	a4d8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a510:	ldr	r1, [pc, #16]	; (a524 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
  m_errorLine = line;
    a512:	ldr	r3, [pc, #20]	; (a528 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a514:	movs	r4, #14
  m_errorLine = line;
    a516:	mov.w	r2, #964	; 0x3c4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a51a:	strb	r4, [r1, #0]
  m_errorLine = line;
    a51c:	str	r2, [r3, #0]
    a51e:	pop	{r3, r4, r5, r6, r7, pc}
    a520:	.word	0x193a0027
    a524:	.word	0x1fff09c0
    a528:	.word	0x1fff2520

0000a52c <SdioCard::writeSector(unsigned long, unsigned char const*)>:
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    a52c:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    a52e:	ldrb	r3, [r0, #8]
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    a530:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    a532:	lsls	r2, r3, #31
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    a534:	sub.w	sp, sp, #512	; 0x200
    a538:	mov	r6, r1
  if (m_sdioConfig.useDma()) {
    a53a:	bpl.n	a570 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
    a53c:	lsls	r3, r5, #30
    a53e:	beq.n	a54e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x22>
      ptr = aligned;
      memcpy(aligned, src, 512);
    a540:	mov	r1, r5
    a542:	mov	r0, sp
    a544:	mov.w	r2, #512	; 0x200
    a548:	bl	e8e8 <memcpy>
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_sdioConfig.useDma()) {
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
      ptr = aligned;
    a54c:	mov	r5, sp
      memcpy(aligned, src, 512);
    } else {
      ptr = const_cast<uint8_t*>(src);
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    a54e:	mov	r2, r5
    a550:	mov	r1, r6
    a552:	movs	r3, #1
    a554:	ldr	r0, [pc, #120]	; (a5d0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>)
    a556:	bl	a06c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    a55a:	cbnz	r0, a56a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a55c:	ldr	r1, [pc, #116]	; (a5d4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa8>)
  m_errorLine = line;
    a55e:	ldr	r3, [pc, #120]	; (a5d8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xac>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a560:	movs	r4, #13
  m_errorLine = line;
    a562:	movw	r2, #923	; 0x39b
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a566:	strb	r4, [r1, #0]
  m_errorLine = line;
    a568:	str	r2, [r3, #0]
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    a56a:	add.w	sp, sp, #512	; 0x200
    a56e:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    a570:	ldrb	r3, [r0, #9]
    a572:	cmp	r3, #2
    a574:	mov	r4, r0
    a576:	beq.n	a58a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
      if (!syncDevice()) {
    a578:	ldr	r3, [r4, #0]
    a57a:	mov	r0, r4
    a57c:	ldr	r3, [r3, #20]
    a57e:	blx	r3
    a580:	cbnz	r0, a5ba <SdioCard::writeSector(unsigned long, unsigned char const*)+0x8e>
        return false;
    a582:	movs	r0, #0
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    a584:	add.w	sp, sp, #512	; 0x200
    a588:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    a58a:	ldr	r3, [r0, #4]
    a58c:	cmp	r1, r3
    a58e:	bne.n	a578 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    }
    if (!writeData(src)) {
    a590:	ldr	r3, [r4, #0]
    a592:	mov	r1, r5
    a594:	ldr	r3, [r3, #68]	; 0x44
    a596:	mov	r0, r4
    a598:	blx	r3
    a59a:	cmp	r0, #0
    a59c:	beq.n	a582 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
      return false;
    }
    m_curSector++;
    a59e:	ldr	r3, [r4, #4]
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    a5a0:	ldr	r2, [pc, #56]	; (a5dc <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb0>)
      m_curState = WRITE_STATE;
    }
    if (!writeData(src)) {
      return false;
    }
    m_curSector++;
    a5a2:	adds	r3, #1
    a5a4:	str	r3, [r4, #4]
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    a5a6:	ldr	r3, [r2, #0]
    a5a8:	lsrs	r3, r3, #16
    a5aa:	lsls	r3, r3, #16
    a5ac:	cmp	r3, #0
    a5ae:	bne.n	a56a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
      if (!syncDevice()) {
    a5b0:	ldr	r3, [r4, #0]
    a5b2:	mov	r0, r4
    a5b4:	ldr	r3, [r3, #20]
    a5b6:	blx	r3
    a5b8:	b.n	a56a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
      if (!syncDevice()) {
        return false;
      }
      if (!writeStart(sector )) {
    a5ba:	ldr	r3, [r4, #0]
    a5bc:	mov	r1, r6
    a5be:	ldr	r3, [r3, #72]	; 0x48
    a5c0:	mov	r0, r4
    a5c2:	blx	r3
    a5c4:	cmp	r0, #0
    a5c6:	beq.n	a582 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    a5c8:	movs	r3, #2
        return false;
      }
      if (!writeStart(sector )) {
        return false;
      }
      m_curSector = sector;
    a5ca:	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    a5cc:	strb	r3, [r4, #9]
    a5ce:	b.n	a590 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x64>
    a5d0:	.word	0x183a0001
    a5d4:	.word	0x1fff09c0
    a5d8:	.word	0x1fff2520
    a5dc:	.word	0x400b1004

0000a5e0 <SdioCard::syncDevice()>:
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    a5e0:	ldrb	r3, [r0, #9]
    a5e2:	cmp	r3, #1
    a5e4:	beq.n	a600 <SdioCard::syncDevice()+0x20>
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    a5e6:	cmp	r3, #2
    a5e8:	beq.n	a5ee <SdioCard::syncDevice()+0xe>
    if (!writeStop()) {
      return false;
    }
  }
  return true;
}
    a5ea:	movs	r0, #1
    a5ec:	bx	lr
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    a5ee:	movs	r1, #0
    if (!writeStop()) {
    a5f0:	ldr	r3, [r0, #0]
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    a5f2:	strb	r1, [r0, #9]
    if (!writeStop()) {
    a5f4:	ldr	r3, [r3, #76]	; 0x4c
    a5f6:	ldr	r2, [pc, #20]	; (a60c <SdioCard::syncDevice()+0x2c>)
    a5f8:	cmp	r3, r2
    a5fa:	bne.n	a608 <SdioCard::syncDevice()+0x28>
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    a5fc:	b.w	a260 <transferStop()>
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    a600:	movs	r3, #0
    a602:	strb	r3, [r0, #9]
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
    a604:	b.w	a260 <transferStop()>
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    if (!writeStop()) {
    a608:	bx	r3
    a60a:	nop
    a60c:	.word	0x0000a2d9

0000a610 <cardCMD6(unsigned long, unsigned char*)>:

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    a610:	push	{r3, r4, r5, r6, r7, lr}
    a612:	mov	r5, r0
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    a614:	ldr	r0, [pc, #116]	; (a68c <cardCMD6(unsigned long, unsigned char*)+0x7c>)

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    a616:	mov	r4, r1
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    a618:	bl	9e80 <waitTimeout(bool (*)())>
    a61c:	cbz	r0, a630 <cardCMD6(unsigned long, unsigned char*)+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a61e:	ldr	r1, [pc, #112]	; (a690 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    a620:	ldr	r3, [pc, #112]	; (a694 <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a622:	movs	r0, #10
  m_errorLine = line;
    a624:	movw	r2, #377	; 0x179
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a628:	strb	r0, [r1, #0]
  m_errorLine = line;
    a62a:	str	r2, [r3, #0]
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    a62c:	movs	r0, #0
    a62e:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    a630:	ldr	r2, [pc, #100]	; (a698 <cardCMD6(unsigned long, unsigned char*)+0x88>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    a632:	ldr.w	lr, [pc, #132]	; a6b8 <cardCMD6(unsigned long, unsigned char*)+0xa8>
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    a636:	ldr	r7, [pc, #100]	; (a69c <cardCMD6(unsigned long, unsigned char*)+0x8c>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    a638:	ldr	r6, [pc, #100]	; (a6a0 <cardCMD6(unsigned long, unsigned char*)+0x90>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    a63a:	ldr	r3, [pc, #104]	; (a6a4 <cardCMD6(unsigned long, unsigned char*)+0x94>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    a63c:	mov.w	ip, #1
    a640:	strb.w	ip, [lr]
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    a644:	mov	r1, r5
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    a646:	str	r0, [r2, #0]
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    a648:	ldr	r5, [pc, #92]	; (a6a8 <cardCMD6(unsigned long, unsigned char*)+0x98>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    a64a:	ldr	r2, [pc, #96]	; (a6ac <cardCMD6(unsigned long, unsigned char*)+0x9c>)
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    a64c:	str	r4, [r7, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    a64e:	ldr	r0, [pc, #96]	; (a6b0 <cardCMD6(unsigned long, unsigned char*)+0xa0>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    a650:	str	r5, [r6, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    a652:	str	r2, [r3, #0]
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    a654:	bl	9f24 <cardCommand(unsigned long, unsigned long)>
    a658:	cbnz	r0, a66a <cardCMD6(unsigned long, unsigned char*)+0x5a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a65a:	ldr	r1, [pc, #52]	; (a690 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    a65c:	ldr	r3, [pc, #52]	; (a694 <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a65e:	movs	r4, #4
  m_errorLine = line;
    a660:	mov.w	r2, #384	; 0x180
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a664:	strb	r4, [r1, #0]
  m_errorLine = line;
    a666:	str	r2, [r3, #0]
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
    a668:	pop	{r3, r4, r5, r6, r7, pc}
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    a66a:	ldr	r0, [pc, #72]	; (a6b4 <cardCMD6(unsigned long, unsigned char*)+0xa4>)
    a66c:	bl	9ea8 <yieldTimeout(bool (*)())>
    a670:	cbnz	r0, a67a <cardCMD6(unsigned long, unsigned char*)+0x6a>
    a672:	bl	a04c <waitDmaStatus() [clone .part.6]>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    a676:	cbz	r0, a67a <cardCMD6(unsigned long, unsigned char*)+0x6a>
    return sdError(SD_CARD_ERROR_DMA);
  }
  return true;
}
    a678:	pop	{r3, r4, r5, r6, r7, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a67a:	ldr	r1, [pc, #20]	; (a690 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    a67c:	ldr	r3, [pc, #20]	; (a694 <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a67e:	movs	r0, #36	; 0x24
  m_errorLine = line;
    a680:	movw	r2, #387	; 0x183
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a684:	strb	r0, [r1, #0]
  m_errorLine = line;
    a686:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    return sdError(SD_CARD_ERROR_DMA);
    a688:	movs	r0, #0
    a68a:	pop	{r3, r4, r5, r6, r7, pc}
    a68c:	.word	0x0000a005
    a690:	.word	0x1fff09c0
    a694:	.word	0x1fff2520
    a698:	.word	0x1fff2500
    a69c:	.word	0x400b1000
    a6a0:	.word	0x400b1004
    a6a4:	.word	0x400b1038
    a6a8:	.word	0x00010040
    a6ac:	.word	0x117f0002
    a6b0:	.word	0x063a0011
    a6b4:	.word	0x00009d05
    a6b8:	.word	0x1fff2518

0000a6bc <SdioCard::begin(SdioConfig)>:
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    a6bc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    a6c0:	ldr	r5, [pc, #568]	; (a8fc <SdioCard::begin(SdioConfig)+0x240>)
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    a6c2:	ldr	r4, [pc, #572]	; (a900 <SdioCard::begin(SdioConfig)+0x244>)
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    a6c4:	ldr.w	r8, [pc, #684]	; a974 <SdioCard::begin(SdioConfig)+0x2b8>
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    a6c8:	ldr	r7, [pc, #568]	; (a904 <SdioCard::begin(SdioConfig)+0x248>)
  m_version2 = false;
    a6ca:	ldr	r6, [pc, #572]	; (a908 <SdioCard::begin(SdioConfig)+0x24c>)
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
    a6cc:	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    a6ce:	movs	r3, #0
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    a6d0:	strb	r3, [r5, #0]
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    a6d2:	strb	r3, [r0, #9]
  m_initDone = false;
    a6d4:	strb.w	r3, [r8]
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    a6d8:	strb	r3, [r7, #0]
  m_version2 = false;
    a6da:	strb	r3, [r6, #0]
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    a6dc:	ldr	r3, [r4, #0]
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    a6de:	ldr	r2, [pc, #556]	; (a90c <SdioCard::begin(SdioConfig)+0x250>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    a6e0:	ldr	r0, [pc, #556]	; (a910 <SdioCard::begin(SdioConfig)+0x254>)
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    a6e2:	ldr	r1, [pc, #560]	; (a914 <SdioCard::begin(SdioConfig)+0x258>)
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    a6e4:	ldr.w	lr, [pc, #656]	; a978 <SdioCard::begin(SdioConfig)+0x2bc>
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    a6e8:	orr.w	r3, r3, #201326592	; 0xc000000
    a6ec:	str	r3, [r4, #0]
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    a6ee:	ldr	r3, [r2, #0]
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    a6f0:	add.w	r4, r4, #260096	; 0x3f800
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    a6f4:	orr.w	r3, r3, #131072	; 0x20000
    a6f8:	str	r3, [r2, #0]
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    a6fa:	adds	r4, #12
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    a6fc:	add.w	r2, r2, #428032	; 0x68800
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    a700:	movw	r3, #259	; 0x103
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    a704:	addw	r2, r2, #2044	; 0x7fc
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    a708:	str	r3, [r0, #0]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    a70a:	str.w	r3, [lr]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    a70e:	str	r3, [r1, #0]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    a710:	str	r3, [r4, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    a712:	str	r3, [r0, #16]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    a714:	str	r3, [r1, #12]
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    a716:	ldr	r3, [r2, #0]
    a718:	orr.w	r3, r3, #16777216	; 0x1000000
    a71c:	orr.w	r3, r3, #32768	; 0x8000
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    a720:	sub	sp, #68	; 0x44
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    a722:	str	r3, [r2, #0]

  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    a724:	ldr	r3, [r2, #0]
    a726:	ldr	r4, [pc, #496]	; (a918 <SdioCard::begin(SdioConfig)+0x25c>)
    a728:	lsls	r1, r3, #7
    a72a:	bmi.n	a724 <SdioCard::begin(SdioConfig)+0x68>
  }

  // Set initial SCK rate.
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    a72c:	mov.w	r0, #400	; 0x190
    a730:	bl	9d50 <setSdclk(unsigned long)>
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    a734:	ldr.w	ip, [pc, #472]	; a910 <SdioCard::begin(SdioConfig)+0x254>
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    a738:	ldr.w	lr, [pc, #572]	; a978 <SdioCard::begin(SdioConfig)+0x2bc>
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    a73c:	ldr	r1, [pc, #468]	; (a914 <SdioCard::begin(SdioConfig)+0x258>)
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    a73e:	ldr	r2, [pc, #476]	; (a91c <SdioCard::begin(SdioConfig)+0x260>)
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    a740:	ldr	r0, [pc, #476]	; (a920 <SdioCard::begin(SdioConfig)+0x264>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    a742:	movw	r3, #1091	; 0x443
    a746:	str.w	r3, [ip]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    a74a:	str.w	r3, [lr]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    a74e:	mov.w	lr, #1088	; 0x440
    a752:	str.w	lr, [r1]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    a756:	str	r3, [r2, #0]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    a758:	add.w	r2, r2, #409600	; 0x64000
    a75c:	adds	r2, #40	; 0x28

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    a75e:	str	r3, [r0, #0]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    a760:	ldr	r0, [pc, #448]	; (a924 <SdioCard::begin(SdioConfig)+0x268>)
  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    a762:	str	r3, [r1, #12]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    a764:	str	r0, [r2, #0]

  attachInterruptVector(IRQ_SDHC, sdIrs);
    a766:	ldr	r1, [pc, #448]	; (a928 <SdioCard::begin(SdioConfig)+0x26c>)
    a768:	movs	r0, #81	; 0x51
    a76a:	bl	edcc <attachInterruptVector>
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    a76e:	ldr	r3, [pc, #444]	; (a92c <SdioCard::begin(SdioConfig)+0x270>)

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    a770:	ldr	r1, [pc, #444]	; (a930 <SdioCard::begin(SdioConfig)+0x274>)
    a772:	movs	r0, #96	; 0x60
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    a774:	mov.w	r2, #131072	; 0x20000

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    a778:	strb	r0, [r1, #0]
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    a77a:	str	r2, [r3, #0]

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    a77c:	ldr	r3, [r4, #0]
    a77e:	orr.w	r3, r3, #134217728	; 0x8000000
    a782:	str	r3, [r4, #0]
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    a784:	ldr	r1, [r4, #0]
    a786:	ands.w	r1, r1, #134217728	; 0x8000000
    a78a:	bne.n	a784 <SdioCard::begin(SdioConfig)+0xc8>
  m_highCapacity = false;
  m_version2 = false;

  // initialize controller.
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    a78c:	mov	r0, r1
    a78e:	bl	9f24 <cardCommand(unsigned long, unsigned long)>
    a792:	mov	r4, r0
    a794:	cmp	r0, #0
    a796:	beq.n	a836 <SdioCard::begin(SdioConfig)+0x17a>
    a798:	movs	r4, #3
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    a79a:	mov.w	r1, #426	; 0x1aa
    a79e:	ldr	r0, [pc, #404]	; (a934 <SdioCard::begin(SdioConfig)+0x278>)
    a7a0:	bl	9f24 <cardCommand(unsigned long, unsigned long)>
    a7a4:	cmp	r0, #0
    a7a6:	bne.n	a864 <SdioCard::begin(SdioConfig)+0x1a8>
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    a7a8:	subs	r4, #1
    a7aa:	bne.n	a79a <SdioCard::begin(SdioConfig)+0xde>
      }
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    a7ac:	ldrb	r3, [r6, #0]
    a7ae:	ldr	r6, [pc, #392]	; (a938 <SdioCard::begin(SdioConfig)+0x27c>)
    a7b0:	cmp	r3, #0
    a7b2:	it	eq
    a7b4:	moveq.w	r6, #3145728	; 0x300000
  int m = micros();
    a7b8:	bl	ee0c <micros>
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    a7bc:	ldr	r4, [pc, #380]	; (a93c <SdioCard::begin(SdioConfig)+0x280>)
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
    a7be:	mov	r9, r0
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    a7c0:	movs	r1, #0
    a7c2:	ldr	r0, [pc, #380]	; (a940 <SdioCard::begin(SdioConfig)+0x284>)
    a7c4:	bl	9f24 <cardCommand(unsigned long, unsigned long)>
    a7c8:	cbnz	r0, a7e0 <SdioCard::begin(SdioConfig)+0x124>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    a7ca:	ldr	r2, [pc, #376]	; (a944 <SdioCard::begin(SdioConfig)+0x288>)
    a7cc:	movw	r1, #621	; 0x26d
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a7d0:	movs	r3, #23
  m_errorLine = line;
    a7d2:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a7d4:	strb	r3, [r5, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    a7d6:	movs	r4, #0

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    a7d8:	mov	r0, r4
    a7da:	add	sp, #68	; 0x44
    a7dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    a7e0:	mov	r1, r6
    a7e2:	ldr	r0, [pc, #356]	; (a948 <SdioCard::begin(SdioConfig)+0x28c>)
    a7e4:	bl	9f24 <cardCommand(unsigned long, unsigned long)>
    a7e8:	cmp	r0, #0
    a7ea:	beq.n	a7ca <SdioCard::begin(SdioConfig)+0x10e>
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    a7ec:	bl	ee0c <micros>
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    a7f0:	ldr	r3, [pc, #344]	; (a94c <SdioCard::begin(SdioConfig)+0x290>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    a7f2:	ldr	r2, [pc, #328]	; (a93c <SdioCard::begin(SdioConfig)+0x280>)
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    a7f4:	rsb	r0, r9, r0
    a7f8:	cmp	r0, r3
    a7fa:	bhi.n	a7ca <SdioCard::begin(SdioConfig)+0x10e>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    a7fc:	ldr	r3, [r4, #0]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    a7fe:	cmp	r3, #0
    a800:	bge.n	a7c0 <SdioCard::begin(SdioConfig)+0x104>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
    a802:	ldr	r3, [pc, #332]	; (a950 <SdioCard::begin(SdioConfig)+0x294>)
    a804:	ldr	r1, [r2, #0]
    a806:	str	r1, [r3, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    a808:	ldr	r3, [r2, #0]
    // Is high capacity.
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    a80a:	ldr	r0, [pc, #328]	; (a954 <SdioCard::begin(SdioConfig)+0x298>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    a80c:	lsls	r2, r3, #1
    // Is high capacity.
    m_highCapacity = true;
    a80e:	it	mi
    a810:	movmi	r3, #1
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    a812:	mov.w	r1, #0
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    // Is high capacity.
    m_highCapacity = true;
    a816:	it	mi
    a818:	strbmi	r3, [r7, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    a81a:	bl	9f24 <cardCommand(unsigned long, unsigned long)>
    a81e:	mov	r4, r0
    a820:	cbnz	r0, a84a <SdioCard::begin(SdioConfig)+0x18e>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    a822:	ldr	r2, [pc, #288]	; (a944 <SdioCard::begin(SdioConfig)+0x288>)
    a824:	movw	r1, #630	; 0x276
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a828:	movs	r3, #2

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    a82a:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    a82c:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a82e:	strb	r3, [r5, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    a830:	add	sp, #68	; 0x44
    a832:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    a836:	ldr	r2, [pc, #268]	; (a944 <SdioCard::begin(SdioConfig)+0x288>)
    a838:	mov.w	r1, #604	; 0x25c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a83c:	movs	r3, #1

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    a83e:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    a840:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a842:	strb	r3, [r5, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    a844:	add	sp, #68	; 0x44
    a846:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    a84a:	movs	r1, #0
    a84c:	ldr	r0, [pc, #264]	; (a958 <SdioCard::begin(SdioConfig)+0x29c>)
    a84e:	bl	9f24 <cardCommand(unsigned long, unsigned long)>
    a852:	mov	r4, r0
    a854:	cbnz	r0, a886 <SdioCard::begin(SdioConfig)+0x1ca>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    a856:	ldr	r2, [pc, #236]	; (a944 <SdioCard::begin(SdioConfig)+0x288>)
    a858:	movw	r1, #633	; 0x279
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a85c:	movs	r3, #3
  m_errorLine = line;
    a85e:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a860:	strb	r3, [r5, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
    a862:	b.n	a7d8 <SdioCard::begin(SdioConfig)+0x11c>
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
    a864:	ldr	r3, [pc, #212]	; (a93c <SdioCard::begin(SdioConfig)+0x280>)
    a866:	ldr	r3, [r3, #0]
    a868:	cmp.w	r3, #426	; 0x1aa
    a86c:	beq.n	a87e <SdioCard::begin(SdioConfig)+0x1c2>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    a86e:	ldr	r2, [pc, #212]	; (a944 <SdioCard::begin(SdioConfig)+0x288>)
    a870:	movw	r1, #610	; 0x262
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a874:	movs	r3, #6
  m_errorLine = line;
    a876:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a878:	strb	r3, [r5, #0]
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
    a87a:	movs	r4, #0
    a87c:	b.n	a7d8 <SdioCard::begin(SdioConfig)+0x11c>
      }
      m_version2 = true;
    a87e:	movs	r3, #1
    a880:	strb	r3, [r6, #0]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    a882:	ldr	r6, [pc, #180]	; (a938 <SdioCard::begin(SdioConfig)+0x27c>)
    a884:	b.n	a7b8 <SdioCard::begin(SdioConfig)+0xfc>
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    a886:	ldr	r3, [pc, #180]	; (a93c <SdioCard::begin(SdioConfig)+0x280>)
    a888:	ldr	r6, [pc, #208]	; (a95c <SdioCard::begin(SdioConfig)+0x2a0>)
    a88a:	ldr	r3, [r3, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    a88c:	ldr	r1, [pc, #208]	; (a960 <SdioCard::begin(SdioConfig)+0x2a4>)
    a88e:	ldr	r0, [pc, #212]	; (a964 <SdioCard::begin(SdioConfig)+0x2a8>)
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    a890:	lsrs	r3, r3, #16
    a892:	lsls	r3, r3, #16
    a894:	str	r3, [r6, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    a896:	bl	9fa0 <readReg16(unsigned long, void*)>
    a89a:	mov	r4, r0
    a89c:	cbnz	r0, a8ac <SdioCard::begin(SdioConfig)+0x1f0>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    a89e:	ldr	r2, [pc, #164]	; (a944 <SdioCard::begin(SdioConfig)+0x288>)
    a8a0:	movw	r1, #638	; 0x27e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a8a4:	movs	r3, #7
  m_errorLine = line;
    a8a6:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a8a8:	strb	r3, [r5, #0]
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
    a8aa:	b.n	a7d8 <SdioCard::begin(SdioConfig)+0x11c>
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    a8ac:	ldr	r1, [pc, #184]	; (a968 <SdioCard::begin(SdioConfig)+0x2ac>)
    a8ae:	ldr	r0, [pc, #188]	; (a96c <SdioCard::begin(SdioConfig)+0x2b0>)
    a8b0:	bl	9fa0 <readReg16(unsigned long, void*)>
    a8b4:	mov	r4, r0
    a8b6:	cbnz	r0, a8c6 <SdioCard::begin(SdioConfig)+0x20a>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    a8b8:	ldr	r2, [pc, #136]	; (a944 <SdioCard::begin(SdioConfig)+0x288>)
    a8ba:	movw	r1, #641	; 0x281
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a8be:	movs	r3, #8
  m_errorLine = line;
    a8c0:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a8c2:	strb	r3, [r5, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
    a8c4:	b.n	a7d8 <SdioCard::begin(SdioConfig)+0x11c>
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    a8c6:	ldr	r1, [r6, #0]
    a8c8:	ldr	r0, [pc, #164]	; (a970 <SdioCard::begin(SdioConfig)+0x2b4>)
    a8ca:	bl	9f24 <cardCommand(unsigned long, unsigned long)>
    a8ce:	mov	r4, r0
    a8d0:	cbnz	r0, a8e0 <SdioCard::begin(SdioConfig)+0x224>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    a8d2:	ldr	r2, [pc, #112]	; (a944 <SdioCard::begin(SdioConfig)+0x288>)
    a8d4:	mov.w	r1, #644	; 0x284
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a8d8:	movs	r3, #5
  m_errorLine = line;
    a8da:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a8dc:	strb	r3, [r5, #0]
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
    a8de:	b.n	a7d8 <SdioCard::begin(SdioConfig)+0x11c>
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    a8e0:	ldr	r1, [r6, #0]
    a8e2:	ldr	r0, [pc, #92]	; (a940 <SdioCard::begin(SdioConfig)+0x284>)
    a8e4:	bl	9f24 <cardCommand(unsigned long, unsigned long)>
    a8e8:	cmp	r0, #0
    a8ea:	bne.n	a97c <SdioCard::begin(SdioConfig)+0x2c0>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    a8ec:	ldr	r2, [pc, #84]	; (a944 <SdioCard::begin(SdioConfig)+0x288>)
    a8ee:	mov.w	r1, #648	; 0x288
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a8f2:	movs	r3, #20
  m_errorLine = line;
    a8f4:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    a8f6:	strb	r3, [r5, #0]
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    a8f8:	movs	r4, #0
    a8fa:	b.n	a7d8 <SdioCard::begin(SdioConfig)+0x11c>
    a8fc:	.word	0x1fff09c0
    a900:	.word	0x4000d800
    a904:	.word	0x1fff24f4
    a908:	.word	0x1fff24dc
    a90c:	.word	0x40048030
    a910:	.word	0x4004d000
    a914:	.word	0x4004d008
    a918:	.word	0x400b102c
    a91c:	.word	0x4004d00c
    a920:	.word	0x4004d010
    a924:	.word	0x117f000b
    a928:	.word	0x00009cad
    a92c:	.word	0xe000e108
    a930:	.word	0xe000e451
    a934:	.word	0x081a0000
    a938:	.word	0x40300000
    a93c:	.word	0x400b1010
    a940:	.word	0x371a0000
    a944:	.word	0x1fff2520
    a948:	.word	0x29020000
    a94c:	.word	0x000f4240
    a950:	.word	0x1fff24f8
    a954:	.word	0x02090000
    a958:	.word	0x031a0000
    a95c:	.word	0x1fff24fc
    a960:	.word	0x1fff2508
    a964:	.word	0x09090000
    a968:	.word	0x1fff24e0
    a96c:	.word	0x0a090000
    a970:	.word	0x071b0000
    a974:	.word	0x1fff2504
    a978:	.word	0x4004d004
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    a97c:	movs	r1, #2
    a97e:	ldr	r0, [pc, #168]	; (aa28 <SdioCard::begin(SdioConfig)+0x36c>)
    a980:	bl	9f24 <cardCommand(unsigned long, unsigned long)>
    a984:	mov	r4, r0
    a986:	cmp	r0, #0
    a988:	beq.n	a8ec <SdioCard::begin(SdioConfig)+0x230>
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    a98a:	ldr	r3, [pc, #160]	; (aa2c <SdioCard::begin(SdioConfig)+0x370>)
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    a98c:	ldr	r0, [pc, #160]	; (aa30 <SdioCard::begin(SdioConfig)+0x374>)
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    a98e:	ldr	r2, [r3, #0]
    a990:	bic.w	r2, r2, #6
    a994:	str	r2, [r3, #0]
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    a996:	ldr	r2, [r3, #0]

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    a998:	mov.w	r5, #1048592	; 0x100010
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    a99c:	orr.w	r2, r2, #2
    a9a0:	str	r2, [r3, #0]
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    a9a2:	mov	r1, sp
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    a9a4:	str	r5, [r0, #0]

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    a9a6:	mvn.w	r0, #4278190080	; 0xff000000
    a9aa:	bl	a610 <cardCMD6(unsigned long, unsigned char*)>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    a9ae:	cbz	r0, a9b8 <SdioCard::begin(SdioConfig)+0x2fc>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    a9b0:	ldrb.w	r3, [sp, #13]
    a9b4:	lsls	r3, r3, #30
    a9b6:	bmi.n	aa0a <SdioCard::begin(SdioConfig)+0x34e>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    kHzSdClk = 50000;
  } else {
    kHzSdClk = 25000;
    a9b8:	movw	r0, #25000	; 0x61a8
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    a9bc:	ldr.w	fp, [pc, #132]	; aa44 <SdioCard::begin(SdioConfig)+0x388>
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    a9c0:	ldr.w	sl, [pc, #132]	; aa48 <SdioCard::begin(SdioConfig)+0x38c>
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    a9c4:	ldr.w	r9, [pc, #132]	; aa4c <SdioCard::begin(SdioConfig)+0x390>
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    a9c8:	ldr	r7, [pc, #104]	; (aa34 <SdioCard::begin(SdioConfig)+0x378>)
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    a9ca:	ldr	r6, [pc, #108]	; (aa38 <SdioCard::begin(SdioConfig)+0x37c>)
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    a9cc:	ldr	r5, [pc, #108]	; (aa3c <SdioCard::begin(SdioConfig)+0x380>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    a9ce:	movw	r3, #259	; 0x103
    a9d2:	str.w	r3, [fp]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    a9d6:	str.w	r3, [sl]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    a9da:	str.w	r3, [r9]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    a9de:	str	r3, [r7, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    a9e0:	str	r3, [r6, #0]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    a9e2:	str	r3, [r5, #0]
  }
  // Disable GPIO.
  enableGPIO(false);

  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);
    a9e4:	bl	9d50 <setSdclk(unsigned long)>
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    a9e8:	movw	r3, #1091	; 0x443
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    a9ec:	mov.w	r1, #1088	; 0x440
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    a9f0:	movs	r2, #1
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    a9f2:	str.w	r3, [fp]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    a9f6:	str.w	r3, [sl]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    a9fa:	str.w	r1, [r9]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    a9fe:	str	r3, [r7, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    aa00:	str	r3, [r6, #0]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    aa02:	str	r3, [r5, #0]
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    aa04:	strb.w	r2, [r8]
  return true;
    aa08:	b.n	a7d8 <SdioCard::begin(SdioConfig)+0x11c>

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    aa0a:	mov	r1, sp
    aa0c:	ldr	r0, [pc, #48]	; (aa40 <SdioCard::begin(SdioConfig)+0x384>)
    aa0e:	bl	a610 <cardCMD6(unsigned long, unsigned char*)>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    aa12:	cmp	r0, #0
    aa14:	beq.n	a9b8 <SdioCard::begin(SdioConfig)+0x2fc>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    aa16:	ldrb.w	r3, [sp, #16]
    aa1a:	and.w	r3, r3, #15
    aa1e:	cmp	r3, #1
    aa20:	bne.n	a9b8 <SdioCard::begin(SdioConfig)+0x2fc>
    kHzSdClk = 50000;
    aa22:	movw	r0, #50000	; 0xc350
    aa26:	b.n	a9bc <SdioCard::begin(SdioConfig)+0x300>
    aa28:	.word	0x061a0000
    aa2c:	.word	0x400b1028
    aa30:	.word	0x400b1044
    aa34:	.word	0x4004d00c
    aa38:	.word	0x4004d010
    aa3c:	.word	0x4004d014
    aa40:	.word	0x80fffff1
    aa44:	.word	0x4004d000
    aa48:	.word	0x4004d004
    aa4c:	.word	0x4004d008

0000aa50 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    aa50:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    aa52:	ldr	r3, [pc, #160]	; (aaf4 <SdioCard::readData(unsigned char*)+0xa4>)
    aa54:	ldr	r3, [r3, #0]
    aa56:	lsls	r0, r3, #22
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    aa58:	mov	r5, r1
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    aa5a:	bmi.n	aa7a <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    aa5c:	ldr	r3, [pc, #152]	; (aaf8 <SdioCard::readData(unsigned char*)+0xa8>)
    aa5e:	ldr	r2, [r3, #0]
    aa60:	bic.w	r2, r2, #65536	; 0x10000
    aa64:	str	r2, [r3, #0]
    noInterrupts();
    aa66:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    aa68:	ldr	r2, [r3, #0]
    aa6a:	orr.w	r2, r2, #131072	; 0x20000
    aa6e:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    aa70:	ldr	r2, [r3, #0]
    aa72:	orr.w	r2, r2, #65536	; 0x10000
    aa76:	str	r2, [r3, #0]
    interrupts();
    aa78:	cpsie	i
  }
  if (waitTimeout(isBusyFifoRead)) {
    aa7a:	ldr	r0, [pc, #128]	; (aafc <SdioCard::readData(unsigned char*)+0xac>)
    aa7c:	bl	9e80 <waitTimeout(bool (*)())>
    aa80:	cmp	r0, #0
    aa82:	bne.n	aae2 <SdioCard::readData(unsigned char*)+0x92>
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    aa84:	ldr	r4, [pc, #108]	; (aaf4 <SdioCard::readData(unsigned char*)+0xa4>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    aa86:	ldr	r0, [pc, #120]	; (ab00 <SdioCard::readData(unsigned char*)+0xb0>)
    aa88:	subs	r3, r5, #4
    aa8a:	add.w	r5, r5, #508	; 0x1fc
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    aa8e:	ldr	r2, [r4, #0]
    aa90:	lsls	r1, r2, #20
    aa92:	bpl.n	aa8e <SdioCard::readData(unsigned char*)+0x3e>
    aa94:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    aa98:	ldr	r2, [r0, #0]
    aa9a:	str.w	r2, [r3, #4]!
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    aa9e:	cmp	r1, r3
    aaa0:	bne.n	aa98 <SdioCard::readData(unsigned char*)+0x48>
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    aaa2:	cmp	r5, r1
    aaa4:	mov	r3, r1
    aaa6:	bne.n	aa8e <SdioCard::readData(unsigned char*)+0x3e>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    aaa8:	ldr	r0, [pc, #88]	; (ab04 <SdioCard::readData(unsigned char*)+0xb4>)
    aaaa:	bl	9e80 <waitTimeout(bool (*)())>
    aaae:	cbnz	r0, aad0 <SdioCard::readData(unsigned char*)+0x80>
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    aab0:	ldr	r2, [pc, #84]	; (ab08 <SdioCard::readData(unsigned char*)+0xb8>)
    aab2:	ldr	r3, [pc, #88]	; (ab0c <SdioCard::readData(unsigned char*)+0xbc>)
    aab4:	ldr	r1, [r2, #0]
    aab6:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    aab8:	ldr	r1, [r3, #0]
    aaba:	str	r1, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    aabc:	ldr	r2, [r3, #0]
    aabe:	lsls	r2, r2, #30
    aac0:	bpl.n	aaf2 <SdioCard::readData(unsigned char*)+0xa2>
    aac2:	ldr	r3, [r3, #0]
    aac4:	ldr	r0, [pc, #72]	; (ab10 <SdioCard::readData(unsigned char*)+0xc0>)
    aac6:	ands	r0, r3
    aac8:	clz	r0, r0
    aacc:	lsrs	r0, r0, #5
    aace:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    aad0:	ldr	r1, [pc, #64]	; (ab14 <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    aad2:	ldr	r3, [pc, #68]	; (ab18 <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    aad4:	movs	r0, #29
  m_errorLine = line;
    aad6:	movw	r2, #759	; 0x2f7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    aada:	strb	r0, [r1, #0]
  m_errorLine = line;
    aadc:	str	r2, [r3, #0]
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    aade:	movs	r0, #0
    aae0:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    aae2:	ldr	r1, [pc, #48]	; (ab14 <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    aae4:	ldr	r3, [pc, #48]	; (ab18 <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    aae6:	movs	r0, #26
  m_errorLine = line;
    aae8:	mov.w	r2, #748	; 0x2ec
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    aaec:	strb	r0, [r1, #0]
  m_errorLine = line;
    aaee:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    aaf0:	movs	r0, #0
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    aaf2:	pop	{r3, r4, r5, pc}
    aaf4:	.word	0x400b1024
    aaf8:	.word	0x400b1028
    aafc:	.word	0x00009d11
    ab00:	.word	0x400b1020
    ab04:	.word	0x00009d39
    ab08:	.word	0x400b1030
    ab0c:	.word	0x1fff2500
    ab10:	.word	0x117f0000
    ab14:	.word	0x1fff09c0
    ab18:	.word	0x1fff2520

0000ab1c <SdioCard::readStart(unsigned long)>:
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    ab1c:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    ab1e:	ldr	r0, [pc, #80]	; (ab70 <SdioCard::readStart(unsigned long)+0x54>)
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    ab20:	mov	r4, r1
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    ab22:	bl	9ea8 <yieldTimeout(bool (*)())>
    ab26:	cbnz	r0, ab5c <SdioCard::readStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    ab28:	ldr	r2, [pc, #72]	; (ab74 <SdioCard::readStart(unsigned long)+0x58>)
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    ab2a:	ldr	r1, [pc, #76]	; (ab78 <SdioCard::readStart(unsigned long)+0x5c>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    ab2c:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    ab2e:	ldr	r0, [pc, #76]	; (ab7c <SdioCard::readStart(unsigned long)+0x60>)
    ab30:	ldr	r5, [pc, #76]	; (ab80 <SdioCard::readStart(unsigned long)+0x64>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    ab32:	orr.w	r3, r3, #65536	; 0x10000
    ab36:	str	r3, [r2, #0]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    ab38:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    ab3a:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    ab3c:	cbnz	r3, ab58 <SdioCard::readStart(unsigned long)+0x3c>
    ab3e:	lsls	r1, r4, #9
    ab40:	ldr	r0, [pc, #64]	; (ab84 <SdioCard::readStart(unsigned long)+0x68>)
    ab42:	bl	9f24 <cardCommand(unsigned long, unsigned long)>
    ab46:	cbnz	r0, ab56 <SdioCard::readStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ab48:	ldr	r1, [pc, #60]	; (ab88 <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    ab4a:	ldr	r3, [pc, #64]	; (ab8c <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ab4c:	movs	r4, #12
  m_errorLine = line;
    ab4e:	mov.w	r2, #848	; 0x350
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ab52:	strb	r4, [r1, #0]
  m_errorLine = line;
    ab54:	str	r2, [r3, #0]

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD18);
  }
  return true;
}
    ab56:	pop	{r3, r4, r5, pc}
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    ab58:	mov	r1, r4
    ab5a:	b.n	ab40 <SdioCard::readStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ab5c:	ldr	r1, [pc, #40]	; (ab88 <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    ab5e:	ldr	r3, [pc, #44]	; (ab8c <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ab60:	movs	r0, #10
  m_errorLine = line;
    ab62:	mov.w	r2, #836	; 0x344
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ab66:	strb	r0, [r1, #0]
  m_errorLine = line;
    ab68:	str	r2, [r3, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    ab6a:	movs	r0, #0
    ab6c:	pop	{r3, r4, r5, pc}
    ab6e:	nop
    ab70:	.word	0x0000a005
    ab74:	.word	0x400b1028
    ab78:	.word	0x1fff24f4
    ab7c:	.word	0x400b1004
    ab80:	.word	0xffff0200
    ab84:	.word	0x123a0032
    ab88:	.word	0x1fff09c0
    ab8c:	.word	0x1fff2520

0000ab90 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    ab90:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    ab92:	ldrb	r3, [r0, #8]
    ab94:	lsls	r4, r3, #31
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    ab96:	sub.w	sp, sp, #512	; 0x200
    ab9a:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    ab9c:	bpl.n	abc4 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    ab9e:	lsls	r3, r2, #30
    aba0:	beq.n	abe2 <SdioCard::readSector(unsigned long, unsigned char*)+0x52>

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    aba2:	mov	r2, sp
    aba4:	movs	r3, #1
    aba6:	ldr	r0, [pc, #168]	; (ac50 <SdioCard::readSector(unsigned long, unsigned char*)+0xc0>)
    aba8:	bl	a06c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    abac:	cbz	r0, abee <SdioCard::readSector(unsigned long, unsigned char*)+0x5e>
      return sdError(SD_CARD_ERROR_CMD17);
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    abae:	mov	r1, sp
    abb0:	mov	r0, r5
    abb2:	mov.w	r2, #512	; 0x200
    abb6:	bl	e8e8 <memcpy>
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
    abba:	movs	r5, #1
}
    abbc:	mov	r0, r5
    abbe:	add.w	sp, sp, #512	; 0x200
    abc2:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    abc4:	ldrb	r3, [r0, #9]
    abc6:	cmp	r3, #1
    abc8:	mov	r4, r0
    abca:	mov	r6, r1
    abcc:	beq.n	ac06 <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
      if (!syncDevice()) {
    abce:	ldr	r3, [r4, #0]
    abd0:	mov	r0, r4
    abd2:	ldr	r3, [r3, #20]
    abd4:	blx	r3
    abd6:	cbnz	r0, ac2c <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
        return false;
    abd8:	movs	r5, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    abda:	mov	r0, r5
    abdc:	add.w	sp, sp, #512	; 0x200
    abe0:	pop	{r4, r5, r6, pc}
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    abe2:	movs	r3, #1
    abe4:	ldr	r0, [pc, #104]	; (ac50 <SdioCard::readSector(unsigned long, unsigned char*)+0xc0>)
    abe6:	bl	a06c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    abea:	cmp	r0, #0
    abec:	bne.n	abba <SdioCard::readSector(unsigned long, unsigned char*)+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    abee:	ldr	r1, [pc, #100]	; (ac54 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>)
  m_errorLine = line;
    abf0:	ldr	r3, [pc, #100]	; (ac58 <SdioCard::readSector(unsigned long, unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    abf2:	movs	r0, #11
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD17);
    abf4:	movs	r5, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    abf6:	movw	r2, #778	; 0x30a
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    abfa:	strb	r0, [r1, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    abfc:	mov	r0, r5
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    abfe:	str	r2, [r3, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    ac00:	add.w	sp, sp, #512	; 0x200
    ac04:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    ac06:	ldr	r3, [r0, #4]
    ac08:	cmp	r1, r3
    ac0a:	bne.n	abce <SdioCard::readSector(unsigned long, unsigned char*)+0x3e>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    }
    if (!readData(dst)) {
    ac0c:	mov	r1, r5
    ac0e:	mov	r0, r4
    ac10:	bl	aa50 <SdioCard::readData(unsigned char*)>
    ac14:	mov	r5, r0
    ac16:	cmp	r0, #0
    ac18:	beq.n	abd8 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    ac1a:	ldr	r3, [pc, #64]	; (ac5c <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>)
    ac1c:	ldr	r3, [r3, #0]
    ac1e:	lsrs	r3, r3, #16
    ac20:	lsls	r3, r3, #16
    ac22:	cbz	r3, ac40 <SdioCard::readSector(unsigned long, unsigned char*)+0xb0>
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
    ac24:	ldr	r3, [r4, #4]
    ac26:	adds	r3, #1
    ac28:	str	r3, [r4, #4]
    ac2a:	b.n	abda <SdioCard::readSector(unsigned long, unsigned char*)+0x4a>
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
      if (!syncDevice()) {
        return false;
      }
      if (!readStart(sector)) {
    ac2c:	mov	r1, r6
    ac2e:	mov	r0, r4
    ac30:	bl	ab1c <SdioCard::readStart(unsigned long)>
    ac34:	cmp	r0, #0
    ac36:	beq.n	abd8 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    ac38:	movs	r3, #1
        return false;
      }
      if (!readStart(sector)) {
        return false;
      }
      m_curSector = sector;
    ac3a:	str	r6, [r4, #4]
      m_curState = READ_STATE;
    ac3c:	strb	r3, [r4, #9]
    ac3e:	b.n	ac0c <SdioCard::readSector(unsigned long, unsigned char*)+0x7c>
    if (!readData(dst)) {
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
      if (!syncDevice()) {
    ac40:	ldr	r3, [r4, #0]
    ac42:	mov	r0, r4
    ac44:	ldr	r3, [r3, #20]
    ac46:	blx	r3
    ac48:	cmp	r0, #0
    ac4a:	bne.n	ac24 <SdioCard::readSector(unsigned long, unsigned char*)+0x94>
    ac4c:	b.n	abd8 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
    ac4e:	nop
    ac50:	.word	0x113a0011
    ac54:	.word	0x1fff09c0
    ac58:	.word	0x1fff2520
    ac5c:	.word	0x400b1004

0000ac60 <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    ac60:	push	{r4}
  m_spi->beginTransaction(m_spiSettings);
    ac62:	ldr	r3, [r0, #0]
    ac64:	ldr	r2, [r0, #4]

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    ac66:	ldrb	r1, [r3, #11]
    ac68:	cbz	r1, acaa <SdSpiArduinoDriver::activate()+0x4a>
			__disable_irq();
    ac6a:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    ac6c:	ldrb	r1, [r3, #11]
    ac6e:	lsls	r0, r1, #31
    ac70:	bpl.n	ac80 <SdSpiArduinoDriver::activate()+0x20>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    ac72:	ldr	r0, [pc, #100]	; (acd8 <SdSpiArduinoDriver::activate()+0x78>)
    ac74:	ldr	r1, [r3, #12]
    ac76:	ldr	r4, [r0, #0]
    ac78:	ands	r1, r4
    ac7a:	str	r1, [r3, #28]
				NVIC_ICER0 = interruptSave[0];
    ac7c:	str	r1, [r0, #0]
    ac7e:	ldrb	r1, [r3, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    ac80:	lsls	r4, r1, #30
    ac82:	bpl.n	ac92 <SdSpiArduinoDriver::activate()+0x32>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    ac84:	ldr	r0, [pc, #84]	; (acdc <SdSpiArduinoDriver::activate()+0x7c>)
    ac86:	ldr	r1, [r3, #16]
    ac88:	ldr	r4, [r0, #0]
    ac8a:	ands	r1, r4
    ac8c:	str	r1, [r3, #32]
				NVIC_ICER1 = interruptSave[1];
    ac8e:	str	r1, [r0, #0]
    ac90:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    ac92:	lsls	r0, r1, #29
    ac94:	bpl.n	aca4 <SdSpiArduinoDriver::activate()+0x44>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    ac96:	ldr	r0, [pc, #72]	; (ace0 <SdSpiArduinoDriver::activate()+0x80>)
    ac98:	ldr	r1, [r3, #20]
    ac9a:	ldr	r4, [r0, #0]
    ac9c:	ands	r1, r4
    ac9e:	str	r1, [r3, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    aca0:	str	r1, [r0, #0]
    aca2:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    aca4:	lsls	r1, r1, #28
    aca6:	bmi.n	acc8 <SdSpiArduinoDriver::activate()+0x68>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    aca8:	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    acaa:	ldr	r3, [r3, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    acac:	ldr	r1, [r3, #12]
    acae:	cmp	r1, r2
    acb0:	beq.n	acc2 <SdSpiArduinoDriver::activate()+0x62>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    acb2:	ldr	r0, [pc, #48]	; (ace4 <SdSpiArduinoDriver::activate()+0x84>)
    acb4:	str	r0, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    acb6:	ldr	r1, [pc, #48]	; (ace8 <SdSpiArduinoDriver::activate()+0x88>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    acb8:	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    acba:	orr.w	r0, r2, #1073741824	; 0x40000000
    acbe:	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    acc0:	str	r1, [r3, #0]
}
    acc2:	ldr.w	r4, [sp], #4
    acc6:	bx	lr
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    acc8:	ldr	r0, [pc, #32]	; (acec <SdSpiArduinoDriver::activate()+0x8c>)
    acca:	ldr	r1, [r3, #24]
    accc:	ldr	r4, [r0, #0]
    acce:	ands	r1, r4
    acd0:	str	r1, [r3, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    acd2:	str	r1, [r0, #0]
    acd4:	b.n	aca8 <SdSpiArduinoDriver::activate()+0x48>
    acd6:	nop
    acd8:	.word	0xe000e180
    acdc:	.word	0xe000e184
    ace0:	.word	0xe000e188
    ace4:	.word	0x003f4001
    ace8:	.word	0x803f0000
    acec:	.word	0xe000e18c

0000acf0 <SdSpiArduinoDriver::deactivate()>:
  }
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    acf0:	ldr	r2, [r0, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    acf2:	ldrb	r3, [r2, #11]
    acf4:	cbz	r3, ad24 <SdSpiArduinoDriver::deactivate()+0x34>
			if (interruptMasksUsed & 0x01) {
    acf6:	lsls	r1, r3, #31
    acf8:	bpl.n	ad02 <SdSpiArduinoDriver::deactivate()+0x12>
				NVIC_ISER0 = interruptSave[0];
    acfa:	ldr	r3, [pc, #44]	; (ad28 <SdSpiArduinoDriver::deactivate()+0x38>)
    acfc:	ldr	r1, [r2, #28]
    acfe:	str	r1, [r3, #0]
    ad00:	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    ad02:	lsls	r0, r3, #30
    ad04:	bpl.n	ad0e <SdSpiArduinoDriver::deactivate()+0x1e>
				NVIC_ISER1 = interruptSave[1];
    ad06:	ldr	r3, [pc, #36]	; (ad2c <SdSpiArduinoDriver::deactivate()+0x3c>)
    ad08:	ldr	r1, [r2, #32]
    ad0a:	str	r1, [r3, #0]
    ad0c:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    ad0e:	lsls	r1, r3, #29
    ad10:	bpl.n	ad1a <SdSpiArduinoDriver::deactivate()+0x2a>
				NVIC_ISER2 = interruptSave[2];
    ad12:	ldr	r3, [pc, #28]	; (ad30 <SdSpiArduinoDriver::deactivate()+0x40>)
    ad14:	ldr	r1, [r2, #36]	; 0x24
    ad16:	str	r1, [r3, #0]
    ad18:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    ad1a:	lsls	r3, r3, #28
    ad1c:	bpl.n	ad24 <SdSpiArduinoDriver::deactivate()+0x34>
				NVIC_ISER3 = interruptSave[3];
    ad1e:	ldr	r3, [pc, #20]	; (ad34 <SdSpiArduinoDriver::deactivate()+0x44>)
    ad20:	ldr	r2, [r2, #40]	; 0x28
    ad22:	str	r2, [r3, #0]
    ad24:	bx	lr
    ad26:	nop
    ad28:	.word	0xe000e100
    ad2c:	.word	0xe000e104
    ad30:	.word	0xe000e108
    ad34:	.word	0xe000e10c

0000ad38 <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
    ad38:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    ad3a:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    ad3c:	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    ad40:	movs	r3, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    ad42:	str	r1, [r2, #44]	; 0x2c
		port().PUSHR = data;
    ad44:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    ad46:	ldr	r3, [r2, #44]	; 0x2c
    ad48:	cmp	r3, #0
    ad4a:	bge.n	ad46 <SdSpiArduinoDriver::receive()+0xe>
		return port().POPR;
    ad4c:	ldr	r0, [r2, #56]	; 0x38
  return m_spi->transfer(0XFF);
}
    ad4e:	uxtb	r0, r0
    ad50:	bx	lr
    ad52:	nop

0000ad54 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    ad54:	push	{r4, r5, r6, lr}
    ad56:	mov	r5, r0
    ad58:	mov	r4, r1
    ad5a:	mov	r6, r2
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    ad5c:	mov	r0, r1
    ad5e:	movs	r1, #255	; 0xff
    ad60:	bl	117bc <memset>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    ad64:	ldr	r0, [r5, #0]
    ad66:	mov	r3, r6
    ad68:	mov	r2, r4
    ad6a:	mov	r1, r4
    ad6c:	bl	5f2c <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    ad70:	movs	r0, #0
    ad72:	pop	{r4, r5, r6, pc}

0000ad74 <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
    ad74:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    ad76:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    ad78:	mov.w	r3, #2147483648	; 0x80000000
    ad7c:	str	r3, [r2, #44]	; 0x2c
		port().PUSHR = data;
    ad7e:	str	r1, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    ad80:	ldr	r3, [r2, #44]	; 0x2c
    ad82:	cmp	r3, #0
    ad84:	bge.n	ad80 <SdSpiArduinoDriver::send(unsigned char)+0xc>
		return port().POPR;
    ad86:	ldr	r3, [r2, #56]	; 0x38
    ad88:	bx	lr
    ad8a:	nop

0000ad8c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    ad8c:	push	{r4, r5, lr}
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    ad8e:	subs	r5, r2, #1
    ad90:	cmp.w	r5, #512	; 0x200
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    ad94:	sub.w	sp, sp, #516	; 0x204
    ad98:	mov	r3, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    ad9a:	bcc.n	adc2 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    ad9c:	cbz	r2, adbc <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
    ad9e:	ldr	r2, [r0, #0]
    ada0:	ldr	r2, [r2, #0]
    ada2:	adds	r0, r1, r3
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    ada4:	mov.w	r4, #2147483648	; 0x80000000
    m_spi->transfer(buf[i]);
    ada8:	ldrb.w	r3, [r1], #1
    adac:	str	r4, [r2, #44]	; 0x2c
		port().PUSHR = data;
    adae:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    adb0:	ldr	r3, [r2, #44]	; 0x2c
    adb2:	cmp	r3, #0
    adb4:	bge.n	adb0 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x24>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    adb6:	cmp	r1, r0
		return port().POPR;
    adb8:	ldr	r3, [r2, #56]	; 0x38
    adba:	bne.n	ada8 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    adbc:	add.w	sp, sp, #516	; 0x204
    adc0:	pop	{r4, r5, pc}
    adc2:	mov	r5, r0
    adc4:	mov	r4, r2
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    memcpy(tmp, buf, count);
    adc6:	mov	r0, sp
    adc8:	bl	e8e8 <memcpy>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    adcc:	mov	r3, r4
    adce:	mov	r2, sp
    add0:	mov	r1, sp
    add2:	ldr	r0, [r5, #0]
    add4:	bl	5f2c <SPIClass::transfer(void const*, void*, unsigned int)>
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    m_spi->transfer(buf[i]);
  }
}
    add8:	add.w	sp, sp, #516	; 0x204
    addc:	pop	{r4, r5, pc}
    adde:	nop

0000ade0 <sdCsWrite(unsigned char, bool)>:
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    ade0:	b.w	ee00 <digitalWrite>

0000ade4 <usb_mtp_configure>:
		if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
		return 0;
	}

#else
	void usb_mtp_configure(void) {}
    ade4:	bx	lr
    ade6:	nop

0000ade8 <lfs_alloc_lookahead>:

/// Block allocator ///
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
    lfs_t *lfs = (lfs_t*)p;
    lfs_block_t off = ((block - lfs->free.off)
            + lfs->cfg->block_count) % lfs->cfg->block_count;
    ade8:	ldr	r2, [r0, #104]	; 0x68
#endif

/// Block allocator ///
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
    lfs_t *lfs = (lfs_t*)p;
    lfs_block_t off = ((block - lfs->free.off)
    adea:	ldr	r3, [r0, #84]	; 0x54
static int lfs1_traverse(lfs_t *lfs,
        int (*cb)(void*, lfs_block_t), void *data);
#endif

/// Block allocator ///
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
    adec:	push	{r4}
    lfs_t *lfs = (lfs_t*)p;
    lfs_block_t off = ((block - lfs->free.off)
            + lfs->cfg->block_count) % lfs->cfg->block_count;
    adee:	ldr	r4, [r2, #32]

    if (off < lfs->free.size) {
    adf0:	ldr	r2, [r0, #88]	; 0x58
#endif

/// Block allocator ///
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
    lfs_t *lfs = (lfs_t*)p;
    lfs_block_t off = ((block - lfs->free.off)
    adf2:	subs	r3, r4, r3
    adf4:	add	r1, r3
    adf6:	udiv	r3, r1, r4
    adfa:	mls	r1, r4, r3, r1
            + lfs->cfg->block_count) % lfs->cfg->block_count;

    if (off < lfs->free.size) {
    adfe:	cmp	r1, r2
    ae00:	bcs.n	ae1a <lfs_alloc_lookahead+0x32>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
    ae02:	ldr	r2, [r0, #100]	; 0x64
    ae04:	lsrs	r0, r1, #5
    ae06:	movs	r3, #1
    ae08:	ldr.w	r4, [r2, r0, lsl #2]
    ae0c:	and.w	r1, r1, #31
    ae10:	lsl.w	r1, r3, r1
    ae14:	orrs	r1, r4
    ae16:	str.w	r1, [r2, r0, lsl #2]
    }

    return 0;
}
    ae1a:	movs	r0, #0
    ae1c:	ldr.w	r4, [sp], #4
    ae20:	bx	lr
    ae22:	nop

0000ae24 <lfs_dir_traverse_filter>:

    return 0;
}

static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
    ae24:	push	{r4}
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
    ae26:	ldr	r2, [r0, #0]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
    ae28:	ldr	r4, [pc, #96]	; (ae8c <lfs_dir_traverse_filter+0x68>)
    ae2a:	ldr	r3, [pc, #100]	; (ae90 <lfs_dir_traverse_filter+0x6c>)
    ae2c:	tst.w	r1, #268435456	; 0x10000000
    ae30:	it	eq
    ae32:	moveq	r3, r4

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
    ae34:	eor.w	r4, r1, r2
    ae38:	tst	r4, r3
    ae3a:	beq.n	ae6c <lfs_dir_traverse_filter+0x48>
    ae3c:	sbfx	r3, r2, #0, #10
    ae40:	adds	r3, #1
    ae42:	beq.n	ae6c <lfs_dir_traverse_filter+0x48>
            lfs_tag_isdelete(*filtertag) ||
    ae44:	ldr	r3, [pc, #76]	; (ae94 <lfs_dir_traverse_filter+0x70>)
    ae46:	ldr	r4, [pc, #72]	; (ae90 <lfs_dir_traverse_filter+0x6c>)
    ae48:	ands	r3, r2
    ae4a:	orr.w	r3, r3, #1333788672	; 0x4f800000
    ae4e:	orr.w	r3, r3, #7340032	; 0x700000
    ae52:	ands	r4, r1
    ae54:	cmp	r4, r3
    ae56:	beq.n	ae6c <lfs_dir_traverse_filter+0x48>
static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
    return ((int32_t)(tag << 22) >> 22) == -1;
}

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
    return (tag & 0x70000000) >> 20;
    ae58:	lsrs	r3, r1, #20
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
        return true;
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
    ae5a:	and.w	r4, r3, #1792	; 0x700
    ae5e:	cmp.w	r4, #1024	; 0x400
    ae62:	beq.n	ae74 <lfs_dir_traverse_filter+0x50>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    }

    return false;
    ae64:	movs	r0, #0
}
    ae66:	ldr.w	r4, [sp], #4
    ae6a:	bx	lr
    if ((mask & tag) == (mask & *filtertag) ||
            lfs_tag_isdelete(*filtertag) ||
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
        return true;
    ae6c:	movs	r0, #1
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    }

    return false;
}
    ae6e:	ldr.w	r4, [sp], #4
    ae72:	bx	lr
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
        return true;
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
    ae74:	ubfx	r1, r1, #10, #10
    ae78:	ubfx	r4, r2, #10, #10
    ae7c:	cmp	r4, r1
    ae7e:	bcc.n	ae64 <lfs_dir_traverse_filter+0x40>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    ae80:	sxtb	r3, r3
    ae82:	add.w	r2, r2, r3, lsl #10
    ae86:	str	r2, [r0, #0]
    }

    return false;
    ae88:	movs	r0, #0
    ae8a:	b.n	ae6e <lfs_dir_traverse_filter+0x4a>
    ae8c:	.word	0x700ffc00
    ae90:	.word	0x7ffffc00
    ae94:	.word	0x000ffc00

0000ae98 <lfs_dir_commit_size>:

static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
    lfs_size_t *size = p;
    (void)buffer;

    *size += lfs_tag_dsize(tag);
    ae98:	ldr	r3, [r0, #0]
    ae9a:	sbfx	r2, r1, #0, #10
    ae9e:	cmp.w	r2, #4294967295
    aea2:	it	eq
    aea4:	addeq	r1, #1
    aea6:	adds	r3, #4
    aea8:	ubfx	r1, r1, #0, #10
    aeac:	add	r1, r3
    aeae:	str	r1, [r0, #0]
    return 0;
}
    aeb0:	movs	r0, #0
    aeb2:	bx	lr

0000aeb4 <lfs_fs_size_count>:
    }

    return 0;
}

static int lfs_fs_size_count(void *p, lfs_block_t block) {
    aeb4:	mov	r2, r0
    (void)block;
    lfs_size_t *size = p;
    *size += 1;
    return 0;
}
    aeb6:	movs	r0, #0
}

static int lfs_fs_size_count(void *p, lfs_block_t block) {
    (void)block;
    lfs_size_t *size = p;
    *size += 1;
    aeb8:	ldr	r3, [r2, #0]
    aeba:	adds	r3, #1
    aebc:	str	r3, [r2, #0]
    return 0;
}
    aebe:	bx	lr

0000aec0 <lfs_deinit>:
    return err;
}

static int lfs_deinit(lfs_t *lfs) {
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
    aec0:	ldr	r3, [r0, #104]	; 0x68
    aec2:	ldr	r2, [r3, #48]	; 0x30
cleanup:
    lfs_deinit(lfs);
    return err;
}

static int lfs_deinit(lfs_t *lfs) {
    aec4:	push	{r4, lr}
    aec6:	mov	r4, r0
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
    aec8:	cbz	r2, aee0 <lfs_deinit+0x20>
        lfs_free(lfs->rcache.buffer);
    }

    if (!lfs->cfg->prog_buffer) {
    aeca:	ldr	r2, [r3, #52]	; 0x34
    aecc:	cbz	r2, aeea <lfs_deinit+0x2a>
        lfs_free(lfs->pcache.buffer);
    }

    if (!lfs->cfg->lookahead_buffer) {
    aece:	ldr	r3, [r3, #56]	; 0x38
    aed0:	cbz	r3, aed6 <lfs_deinit+0x16>
        lfs_free(lfs->free.buffer);
    }

    return 0;
}
    aed2:	movs	r0, #0
    aed4:	pop	{r4, pc}
}

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
#ifndef LFS_NO_MALLOC
    free(p);
    aed6:	ldr	r0, [r4, #100]	; 0x64
    aed8:	bl	11040 <free>
    aedc:	movs	r0, #0
    aede:	pop	{r4, pc}
    aee0:	ldr	r0, [r0, #12]
    aee2:	bl	11040 <free>
    aee6:	ldr	r3, [r4, #104]	; 0x68
    aee8:	b.n	aeca <lfs_deinit+0xa>
    aeea:	ldr	r0, [r4, #28]
    aeec:	bl	11040 <free>
    aef0:	ldr	r3, [r4, #104]	; 0x68
    aef2:	b.n	aece <lfs_deinit+0xe>

0000aef4 <lfs_init>:
    return err;
}


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
    aef4:	push	{r4, r5, r6, lr}
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);


    // setup read cache
    if (lfs->cfg->read_buffer) {
    aef6:	ldr	r3, [r1, #48]	; 0x30
}


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
    lfs->cfg = cfg;
    aef8:	str	r1, [r0, #104]	; 0x68
    return err;
}


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
    aefa:	sub	sp, #8
    aefc:	mov	r4, r0
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);


    // setup read cache
    if (lfs->cfg->read_buffer) {
    aefe:	cmp	r3, #0
    af00:	beq.n	af94 <lfs_init+0xa0>
    af02:	ldr	r2, [r1, #40]	; 0x28
        lfs->rcache.buffer = lfs->cfg->read_buffer;
    af04:	str	r3, [r0, #12]
            goto cleanup;
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
    af06:	ldr	r3, [r1, #52]	; 0x34
    af08:	cmp	r3, #0
    af0a:	beq.n	af78 <lfs_init+0x84>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
    af0c:	str	r3, [r4, #28]
    rcache->block = LFS_BLOCK_NULL;
}

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
    af0e:	movs	r1, #255	; 0xff
    af10:	ldr	r0, [r4, #12]
    af12:	bl	117bc <memset>
    pcache->block = LFS_BLOCK_NULL;
    af16:	mov.w	r6, #4294967295
    rcache->block = LFS_BLOCK_NULL;
}

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
    af1a:	ldr	r3, [r4, #104]	; 0x68
    pcache->block = LFS_BLOCK_NULL;
    af1c:	str	r6, [r4, #0]
    rcache->block = LFS_BLOCK_NULL;
}

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
    af1e:	ldr	r2, [r3, #40]	; 0x28
    af20:	ldr	r0, [r4, #28]
    af22:	movs	r1, #255	; 0xff
    af24:	bl	117bc <memset>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
    af28:	ldr	r5, [r4, #104]	; 0x68
}

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
    pcache->block = LFS_BLOCK_NULL;
    af2a:	str	r6, [r4, #16]

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
    af2c:	ldr	r3, [r5, #56]	; 0x38
    af2e:	cmp	r3, #0
    af30:	beq.n	afaa <lfs_init+0xb6>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
    af32:	str	r3, [r4, #100]	; 0x64
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
    lfs->name_max = lfs->cfg->name_max;
    af34:	ldr	r3, [r5, #60]	; 0x3c
    if (!lfs->name_max) {
    af36:	cbnz	r3, af3a <lfs_init+0x46>
        lfs->name_max = LFS_NAME_MAX;
    af38:	movs	r3, #39	; 0x27
    af3a:	str	r3, [r4, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
    lfs->file_max = lfs->cfg->file_max;
    af3c:	ldr	r3, [r5, #64]	; 0x40
    if (!lfs->file_max) {
    af3e:	cbz	r3, af72 <lfs_init+0x7e>
        lfs->file_max = LFS_FILE_MAX;
    af40:	str	r3, [r4, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
    lfs->attr_max = lfs->cfg->attr_max;
    af42:	ldr	r3, [r5, #68]	; 0x44
    if (!lfs->attr_max) {
    af44:	cbnz	r3, af4a <lfs_init+0x56>
        lfs->attr_max = LFS_ATTR_MAX;
    af46:	movw	r3, #1022	; 0x3fe
    }

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
    af4a:	mov.w	r0, #4294967295
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
    lfs->attr_max = lfs->cfg->attr_max;
    if (!lfs->attr_max) {
        lfs->attr_max = LFS_ATTR_MAX;
    af4e:	str	r3, [r4, #116]	; 0x74
    }

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
    lfs->root[1] = LFS_BLOCK_NULL;
    lfs->mlist = NULL;
    af50:	movs	r3, #0
    if (!lfs->attr_max) {
        lfs->attr_max = LFS_ATTR_MAX;
    }

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
    af52:	str	r0, [r4, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
    af54:	str	r0, [r4, #36]	; 0x24
    lfs->mlist = NULL;
    af56:	str	r3, [r4, #40]	; 0x28
    lfs->seed = 0;
    af58:	str	r3, [r4, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
    af5a:	str	r3, [r4, #60]	; 0x3c
    lfs->gdelta = (lfs_gstate_t){0};
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
    af5c:	mov	r0, r3
    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
    lfs->root[1] = LFS_BLOCK_NULL;
    lfs->mlist = NULL;
    lfs->seed = 0;
    lfs->gdisk = (lfs_gstate_t){0};
    af5e:	str	r3, [r4, #64]	; 0x40
    af60:	str	r3, [r4, #68]	; 0x44
    lfs->gstate = (lfs_gstate_t){0};
    af62:	str	r3, [r4, #48]	; 0x30
    af64:	str	r3, [r4, #52]	; 0x34
    af66:	str	r3, [r4, #56]	; 0x38
    lfs->gdelta = (lfs_gstate_t){0};
    af68:	str	r3, [r4, #72]	; 0x48
    af6a:	str	r3, [r4, #76]	; 0x4c
    af6c:	str	r3, [r4, #80]	; 0x50
    return 0;

cleanup:
    lfs_deinit(lfs);
    return err;
}
    af6e:	add	sp, #8
    af70:	pop	{r4, r5, r6, pc}
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
    lfs->file_max = lfs->cfg->file_max;
    if (!lfs->file_max) {
        lfs->file_max = LFS_FILE_MAX;
    af72:	mvn.w	r3, #2147483648	; 0x80000000
    af76:	b.n	af40 <lfs_init+0x4c>

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
#ifndef LFS_NO_MALLOC
    return malloc(size);
    af78:	mov	r0, r2
    af7a:	str	r2, [sp, #4]
    af7c:	bl	11030 <malloc>
    // setup program cache
    if (lfs->cfg->prog_buffer) {
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
        if (!lfs->pcache.buffer) {
    af80:	ldr	r2, [sp, #4]

    // setup program cache
    if (lfs->cfg->prog_buffer) {
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
    af82:	str	r0, [r4, #28]
        if (!lfs->pcache.buffer) {
    af84:	cmp	r0, #0
    af86:	bne.n	af0e <lfs_init+0x1a>
#endif

    return 0;

cleanup:
    lfs_deinit(lfs);
    af88:	mov	r0, r4
    af8a:	bl	aec0 <lfs_deinit>
    return err;
    af8e:	mvn.w	r0, #11
    af92:	b.n	af6e <lfs_init+0x7a>

    // setup read cache
    if (lfs->cfg->read_buffer) {
        lfs->rcache.buffer = lfs->cfg->read_buffer;
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
    af94:	ldr	r5, [r1, #40]	; 0x28
    af96:	str	r1, [sp, #4]
    af98:	mov	r0, r5
    af9a:	bl	11030 <malloc>
    af9e:	str	r0, [r4, #12]
        if (!lfs->rcache.buffer) {
    afa0:	cmp	r0, #0
    afa2:	beq.n	af88 <lfs_init+0x94>
    afa4:	mov	r2, r5
    afa6:	ldr	r1, [sp, #4]
    afa8:	b.n	af06 <lfs_init+0x12>
    afaa:	ldr	r0, [r5, #44]	; 0x2c
    afac:	bl	11030 <malloc>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
    afb0:	str	r0, [r4, #100]	; 0x64
        if (!lfs->free.buffer) {
    afb2:	cmp	r0, #0
    afb4:	bne.n	af34 <lfs_init+0x40>
    afb6:	b.n	af88 <lfs_init+0x94>

0000afb8 <lfs_bd_read.isra.15>:
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
    pcache->block = LFS_BLOCK_NULL;
}

static int lfs_bd_read(lfs_t *lfs,
    afb8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
    uint8_t *data = buffer;
    if (block >= lfs->cfg->block_count ||
    afbc:	ldr	r6, [r0, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
    pcache->block = LFS_BLOCK_NULL;
}

static int lfs_bd_read(lfs_t *lfs,
    afbe:	sub	sp, #20
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
    uint8_t *data = buffer;
    if (block >= lfs->cfg->block_count ||
    afc0:	ldr	r4, [r6, #32]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
    pcache->block = LFS_BLOCK_NULL;
}

static int lfs_bd_read(lfs_t *lfs,
    afc2:	ldr	r7, [sp, #56]	; 0x38
    afc4:	ldr	r5, [sp, #60]	; 0x3c
    afc6:	ldr.w	r8, [sp, #68]	; 0x44
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
    uint8_t *data = buffer;
    if (block >= lfs->cfg->block_count ||
    afca:	cmp	r4, r7
    afcc:	bls.w	b110 <lfs_bd_read.isra.15+0x158>
    afd0:	ldr	r4, [r6, #28]
    afd2:	add.w	lr, r5, r8
    afd6:	cmp	lr, r4
    afd8:	bhi.w	b110 <lfs_bd_read.isra.15+0x158>
            off+size > lfs->cfg->block_size) {
        return LFS_ERR_CORRUPT;
    }

    while (size > 0) {
    afdc:	cmp.w	r8, #0
    afe0:	beq.n	b0cc <lfs_bd_read.isra.15+0x114>
    afe2:	mov	sl, r3
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
    return a - (a % alignment);
}

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
    return lfs_aligndown(a + alignment-1, alignment);
    afe4:	subs	r3, #1
    afe6:	mov	r6, r2
    afe8:	mov	r9, r1
    afea:	mov	fp, r0
    afec:	str	r3, [sp, #8]
        lfs_size_t diff = size;

        if (pcache && block == pcache->block &&
    afee:	cmp.w	r9, #0
    aff2:	beq.n	affc <lfs_bd_read.isra.15+0x44>
    aff4:	ldr.w	r3, [r9]
    aff8:	cmp	r7, r3
    affa:	beq.n	b062 <lfs_bd_read.isra.15+0xaa>

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
        }

        if (block == rcache->block &&
    affc:	ldr	r2, [r6, #0]
    affe:	cmp	r7, r2
    }

    while (size > 0) {
        lfs_size_t diff = size;

        if (pcache && block == pcache->block &&
    b000:	mov	r3, r8

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
        }

        if (block == rcache->block &&
    b002:	beq.n	b082 <lfs_bd_read.isra.15+0xca>

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
    b004:	ldr.w	r0, [fp]
    b008:	ldr	r1, [r0, #20]
    b00a:	udiv	r2, r5, r1
    b00e:	cmp	sl, r8
    b010:	mls	r2, r1, r2, r5
    b014:	bhi.n	b01c <lfs_bd_read.isra.15+0x64>
    b016:	cbnz	r2, b01c <lfs_bd_read.isra.15+0x64>
    b018:	cmp	r1, r8
    b01a:	bls.n	b09a <lfs_bd_read.isra.15+0xe2>
    b01c:	ldr	r3, [sp, #8]
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
    return (a > b) ? a : b;
}

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
    return (a < b) ? a : b;
    b01e:	ldr.w	lr, [r0, #28]
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
    return a - (a % alignment);
}

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
    return lfs_aligndown(a + alignment-1, alignment);
    b022:	add	r3, r5
    b024:	add	r3, r1
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
    return (a > b) ? a : b;
}

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
    return (a < b) ? a : b;
    b026:	udiv	r4, r3, r1
    b02a:	mls	r1, r1, r4, r3
}

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
    return a - (a % alignment);
    b02e:	subs	r2, r5, r2
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
    return (a > b) ? a : b;
}

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
    return (a < b) ? a : b;
    b030:	ldr	r4, [r0, #40]	; 0x28
            continue;
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
        rcache->block = block;
    b032:	str	r7, [r6, #0]
    b034:	subs	r1, r3, r1
    b036:	cmp	r1, lr
    b038:	ite	ls
    b03a:	rsbls	r3, r2, r1
    b03e:	rsbhi	r3, r2, lr
    b042:	cmp	r3, r4
    b044:	it	cs
    b046:	movcs	r3, r4
    b048:	mov	r1, r3
                lfs_min(
                    lfs_alignup(off+hint, lfs->cfg->read_size),
                    lfs->cfg->block_size)
                - rcache->off,
                lfs->cfg->cache_size);
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
    b04a:	ldr	r3, [r6, #12]
    b04c:	str	r1, [sp, #0]
    b04e:	ldr	r4, [r0, #4]

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
        rcache->block = block;
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
        rcache->size = lfs_min(
    b050:	str	r1, [r6, #8]
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
        rcache->block = block;
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
    b052:	str	r2, [r6, #4]
                lfs_min(
                    lfs_alignup(off+hint, lfs->cfg->read_size),
                    lfs->cfg->block_size)
                - rcache->off,
                lfs->cfg->cache_size);
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
    b054:	mov	r1, r7
    b056:	blx	r4
                rcache->off, rcache->buffer, rcache->size);
        LFS_ASSERT(err <= 0);
        if (err) {
    b058:	cmp	r0, #0
    b05a:	beq.n	afee <lfs_bd_read.isra.15+0x36>
            return err;
        }
    }

    return 0;
}
    b05c:	add	sp, #20
    b05e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

    while (size > 0) {
        lfs_size_t diff = size;

        if (pcache && block == pcache->block &&
                off < pcache->off + pcache->size) {
    b062:	ldr.w	r3, [r9, #4]
    b066:	ldr.w	r2, [r9, #8]
    b06a:	add	r2, r3
    }

    while (size > 0) {
        lfs_size_t diff = size;

        if (pcache && block == pcache->block &&
    b06c:	cmp	r2, r5
    b06e:	bls.n	affc <lfs_bd_read.isra.15+0x44>
                off < pcache->off + pcache->size) {
            if (off >= pcache->off) {
    b070:	cmp	r3, r5
    b072:	bls.n	b100 <lfs_bd_read.isra.15+0x148>
    b074:	subs	r3, r3, r5

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
        }

        if (block == rcache->block &&
    b076:	ldr	r2, [r6, #0]
    b078:	cmp	r3, r8
    b07a:	it	cs
    b07c:	movcs	r3, r8
    b07e:	cmp	r7, r2
    b080:	bne.n	b004 <lfs_bd_read.isra.15+0x4c>
                off < rcache->off + rcache->size) {
    b082:	ldr	r1, [r6, #4]
    b084:	ldr	r2, [r6, #8]
    b086:	add	r2, r1

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
        }

        if (block == rcache->block &&
    b088:	cmp	r2, r5
    b08a:	bls.n	b004 <lfs_bd_read.isra.15+0x4c>
                off < rcache->off + rcache->size) {
            if (off >= rcache->off) {
    b08c:	cmp	r1, r5
    b08e:	bls.n	b0d4 <lfs_bd_read.isra.15+0x11c>
    b090:	subs	r1, r1, r5
    b092:	cmp	r3, r1
    b094:	it	cs
    b096:	movcs	r3, r1
    b098:	b.n	b004 <lfs_bd_read.isra.15+0x4c>
}

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
    return a - (a % alignment);
    b09a:	udiv	r2, r3, r1
    b09e:	mls	r1, r1, r2, r3
    b0a2:	subs	r1, r3, r1

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
                size >= lfs->cfg->read_size) {
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
    b0a4:	str	r1, [sp, #0]
    b0a6:	ldr	r3, [r0, #4]
    b0a8:	str	r1, [sp, #12]
    b0aa:	mov	r4, r3
    b0ac:	mov	r2, r5
    b0ae:	ldr	r3, [sp, #64]	; 0x40
    b0b0:	mov	r1, r7
    b0b2:	blx	r4
            if (err) {
    b0b4:	cmp	r0, #0
    b0b6:	bne.n	b05c <lfs_bd_read.isra.15+0xa4>
                return err;
            }

            data += diff;
    b0b8:	ldr	r2, [sp, #12]
    b0ba:	ldr	r3, [sp, #64]	; 0x40
            off += diff;
            size -= diff;
    b0bc:	rsb	r8, r2, r8
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
            if (err) {
                return err;
            }

            data += diff;
    b0c0:	add	r3, r2
    b0c2:	str	r3, [sp, #64]	; 0x40
            off += diff;
    b0c4:	add	r5, r2
    if (block >= lfs->cfg->block_count ||
            off+size > lfs->cfg->block_size) {
        return LFS_ERR_CORRUPT;
    }

    while (size > 0) {
    b0c6:	cmp.w	r8, #0
    b0ca:	bne.n	afee <lfs_bd_read.isra.15+0x36>
        if (err) {
            return err;
        }
    }

    return 0;
    b0cc:	movs	r0, #0
}
    b0ce:	add	sp, #20
    b0d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
    return (a > b) ? a : b;
}

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
    return (a < b) ? a : b;
    b0d4:	subs	r4, r2, r5
    b0d6:	cmp	r4, r3
        if (block == rcache->block &&
                off < rcache->off + rcache->size) {
            if (off >= rcache->off) {
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
    b0d8:	ldr	r2, [r6, #12]
    b0da:	it	cs
    b0dc:	movcs	r4, r3
    b0de:	subs	r1, r5, r1
    b0e0:	add	r1, r2
    b0e2:	ldr	r0, [sp, #64]	; 0x40
    b0e4:	mov	r2, r4
    b0e6:	bl	e8e8 <memcpy>

                data += diff;
    b0ea:	ldr	r3, [sp, #64]	; 0x40
                off += diff;
                size -= diff;
    b0ec:	rsb	r8, r4, r8
            if (off >= rcache->off) {
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
                memcpy(data, &rcache->buffer[off-rcache->off], diff);

                data += diff;
    b0f0:	add	r3, r4
                off += diff;
    b0f2:	add	r5, r4
            if (off >= rcache->off) {
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
                memcpy(data, &rcache->buffer[off-rcache->off], diff);

                data += diff;
    b0f4:	str	r3, [sp, #64]	; 0x40
    if (block >= lfs->cfg->block_count ||
            off+size > lfs->cfg->block_size) {
        return LFS_ERR_CORRUPT;
    }

    while (size > 0) {
    b0f6:	cmp.w	r8, #0
    b0fa:	bne.w	afee <lfs_bd_read.isra.15+0x36>
    b0fe:	b.n	b0cc <lfs_bd_read.isra.15+0x114>
    b100:	subs	r4, r2, r5
    b102:	cmp	r4, r8
        if (pcache && block == pcache->block &&
                off < pcache->off + pcache->size) {
            if (off >= pcache->off) {
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
    b104:	ldr.w	r2, [r9, #12]
    b108:	it	cs
    b10a:	movcs	r4, r8
    b10c:	subs	r1, r5, r3
    b10e:	b.n	b0e0 <lfs_bd_read.isra.15+0x128>
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
    uint8_t *data = buffer;
    if (block >= lfs->cfg->block_count ||
            off+size > lfs->cfg->block_size) {
        return LFS_ERR_CORRUPT;
    b110:	mvn.w	r0, #83	; 0x53
    b114:	b.n	b05c <lfs_bd_read.isra.15+0xa4>
    b116:	nop

0000b118 <lfs_fs_parent_match>:
    lfs_t *lfs;
    const lfs_block_t pair[2];
};

static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
    b118:	push	{r4, r5, r6, r7, lr}
    b11a:	mov	r3, r2
    struct lfs_fs_parent_match *find = data;
    lfs_t *lfs = find->lfs;
    b11c:	ldr	r2, [r0, #0]
    const struct lfs_diskoff *disk = buffer;
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
    b11e:	ldr	r1, [r3, #4]
    b120:	ldr	r7, [r3, #0]
    lfs_t *lfs;
    const lfs_block_t pair[2];
};

static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
    b122:	sub	sp, #28
    b124:	mov	r4, r0
    lfs_t *lfs = find->lfs;
    const struct lfs_diskoff *disk = buffer;
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
    b126:	ldr	r0, [r2, #104]	; 0x68
    b128:	movs	r6, #8
    b12a:	add	r5, sp, #16
    b12c:	ldr	r3, [r0, #28]
    b12e:	str	r1, [sp, #4]
    b130:	add.w	r0, r2, #104	; 0x68
    b134:	add.w	r1, r2, #16
    b138:	str	r7, [sp, #0]
    b13a:	str	r6, [sp, #12]
    b13c:	str	r5, [sp, #8]
    b13e:	bl	afb8 <lfs_bd_read.isra.15>
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
            disk->block, disk->off, &child, sizeof(child));
    if (err) {
    b142:	cbnz	r0, b15e <lfs_fs_parent_match+0x46>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    b144:	ldr	r3, [sp, #16]
    b146:	ldr	r2, [r4, #4]
    b148:	cmp	r2, r3
    b14a:	beq.n	b15e <lfs_fs_parent_match+0x46>
    b14c:	ldr	r1, [r4, #8]
    b14e:	ldr	r4, [sp, #20]
    b150:	cmp	r4, r1
    b152:	beq.n	b15e <lfs_fs_parent_match+0x46>
    b154:	cmp	r3, r1
    b156:	beq.n	b15e <lfs_fs_parent_match+0x46>
    b158:	subs	r0, r2, r4
    b15a:	it	ne
    b15c:	movne	r0, #1
        return err;
    }

    lfs_pair_fromle32(child);
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
}
    b15e:	add	sp, #28
    b160:	pop	{r4, r5, r6, r7, pc}
    b162:	nop

0000b164 <lfs_dir_fetchmatch>:
}

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
    b164:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // scanning the entire directory
    lfs_stag_t besttag = -1;

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
    b168:	ldr	r4, [r0, #104]	; 0x68
    b16a:	ldr	r6, [r2, #0]
    b16c:	ldr	r4, [r4, #32]
    b16e:	cmp	r6, r4
}

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
    b170:	sub	sp, #92	; 0x5c
    // scanning the entire directory
    lfs_stag_t besttag = -1;

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
    b172:	bcs.w	b430 <lfs_dir_fetchmatch+0x2cc>
    b176:	ldr	r5, [r2, #4]
    b178:	cmp	r4, r5
    b17a:	bls.w	b430 <lfs_dir_fetchmatch+0x2cc>
        return LFS_ERR_CORRUPT;
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
    b17e:	movs	r5, #0
    b180:	mov	sl, r0
    b182:	str	r3, [sp, #24]
    b184:	mov	r4, r2
    b186:	add.w	r8, r0, #104	; 0x68
    int r = 0;
    for (int i = 0; i < 2; i++) {
        int err = lfs_bd_read(lfs,
    b18a:	add	r2, sp, #64	; 0x40
    b18c:	movs	r3, #4
    b18e:	mov	fp, r1
    b190:	str	r2, [sp, #8]
    b192:	str	r6, [sp, #0]
    b194:	str	r5, [sp, #4]
    b196:	mov	r1, r5
    b198:	str	r3, [sp, #12]
    b19a:	mov	r0, r8
    b19c:	mov	r2, sl
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
        return LFS_ERR_CORRUPT;
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
    b19e:	str	r5, [sp, #64]	; 0x40
    b1a0:	str	r5, [sp, #68]	; 0x44
    int r = 0;
    for (int i = 0; i < 2; i++) {
        int err = lfs_bd_read(lfs,
    b1a2:	bl	afb8 <lfs_bd_read.isra.15>
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
        revs[i] = lfs_fromle32(revs[i]);
        if (err && err != LFS_ERR_CORRUPT) {
    b1a6:	cbz	r0, b1b0 <lfs_dir_fetchmatch+0x4c>
    b1a8:	cmn.w	r0, #84	; 0x54
    b1ac:	bne.w	b434 <lfs_dir_fetchmatch+0x2d0>

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
    int r = 0;
    for (int i = 0; i < 2; i++) {
        int err = lfs_bd_read(lfs,
    b1b0:	ldr	r2, [r4, #4]
    b1b2:	str	r2, [sp, #0]
    b1b4:	add	r1, sp, #68	; 0x44
    b1b6:	movs	r5, #0
    b1b8:	movs	r3, #4
    b1ba:	str	r1, [sp, #8]
    b1bc:	str	r3, [sp, #12]
    b1be:	str	r5, [sp, #4]
    b1c0:	mov	r1, r5
    b1c2:	mov	r2, sl
    b1c4:	mov	r0, r8
    b1c6:	bl	afb8 <lfs_bd_read.isra.15>
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
        revs[i] = lfs_fromle32(revs[i]);
        if (err && err != LFS_ERR_CORRUPT) {
    b1ca:	cmp	r0, #0
    b1cc:	bne.w	b4a2 <lfs_dir_fetchmatch+0x33e>
    b1d0:	ldr	r3, [sp, #68]	; 0x44
    b1d2:	ldr	r5, [sp, #64]	; 0x40
    b1d4:	subs	r5, r3, r5
    b1d6:	cmp	r5, #0
    b1d8:	ite	le
    b1da:	movle	r5, #0
    b1dc:	movgt	r5, #1
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
            r = i;
        }
    }

    dir->pair[0] = pair[(r+0)%2];
    b1de:	ldr.w	r3, [r4, r5, lsl #2]
    b1e2:	str.w	r3, [fp]
    dir->pair[1] = pair[(r+1)%2];
    b1e6:	eor.w	r3, r5, #1
    b1ea:	str	r3, [sp, #48]	; 0x30
    b1ec:	ldr.w	r3, [r4, r3, lsl #2]
    b1f0:	str.w	r3, [fp, #4]
    dir->rev = revs[(r+0)%2];
    b1f4:	add	r2, sp, #88	; 0x58
    dir->off = 0; // nonzero = found some commits
    b1f6:	movs	r3, #0
        }
    }

    dir->pair[0] = pair[(r+0)%2];
    dir->pair[1] = pair[(r+1)%2];
    dir->rev = revs[(r+0)%2];
    b1f8:	add.w	r5, r2, r5, lsl #2
    dir->off = 0; // nonzero = found some commits
    b1fc:	str.w	r3, [fp, #12]
        lfs_off_t off = 0;
        lfs_tag_t ptag = 0xffffffff;

        uint16_t tempcount = 0;
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
        bool tempsplit = false;
    b200:	str	r3, [sp, #32]
    b202:	add.w	r3, fp, #8
    b206:	str	r3, [sp, #44]	; 0x2c
    }

    dir->pair[0] = pair[(r+0)%2];
    dir->pair[1] = pair[(r+1)%2];
    dir->rev = revs[(r+0)%2];
    dir->off = 0; // nonzero = found some commits
    b208:	movs	r3, #2
        }
    }

    dir->pair[0] = pair[(r+0)%2];
    dir->pair[1] = pair[(r+1)%2];
    dir->rev = revs[(r+0)%2];
    b20a:	ldr.w	r2, [r5, #-24]
    dir->off = 0; // nonzero = found some commits
    b20e:	str	r3, [sp, #36]	; 0x24
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
    b210:	mov.w	r3, #4294967295
        }
    }

    dir->pair[0] = pair[(r+0)%2];
    dir->pair[1] = pair[(r+1)%2];
    dir->rev = revs[(r+0)%2];
    b214:	str.w	r2, [fp, #8]
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
    b218:	str	r3, [sp, #40]	; 0x28
    for (int i = 0; i < 2; i++) {
        lfs_off_t off = 0;
        lfs_tag_t ptag = 0xffffffff;

        uint16_t tempcount = 0;
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
    b21a:	ldr	r3, [pc, #748]	; (b508 <lfs_dir_fetchmatch+0x3a4>)
    b21c:	ldmia.w	r3, {r0, r1}
    b220:	add	r3, sp, #72	; 0x48
    b222:	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
        lfs_stag_t tempbesttag = besttag;

        dir->rev = lfs_tole32(dir->rev);
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
    b226:	movs	r2, #4
        lfs_off_t off = 0;
        lfs_tag_t ptag = 0xffffffff;

        uint16_t tempcount = 0;
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
        bool tempsplit = false;
    b228:	movs	r3, #0
        lfs_stag_t tempbesttag = besttag;

        dir->rev = lfs_tole32(dir->rev);
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
    b22a:	ldr	r1, [sp, #44]	; 0x2c
        lfs_off_t off = 0;
        lfs_tag_t ptag = 0xffffffff;

        uint16_t tempcount = 0;
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
        bool tempsplit = false;
    b22c:	str	r3, [sp, #52]	; 0x34
        lfs_stag_t tempbesttag = besttag;

        dir->rev = lfs_tole32(dir->rev);
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
    b22e:	mov.w	r0, #4294967295
        lfs_off_t off = 0;
        lfs_tag_t ptag = 0xffffffff;

        uint16_t tempcount = 0;
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
        bool tempsplit = false;
    b232:	mov	r4, r3
        lfs_stag_t tempbesttag = besttag;

        dir->rev = lfs_tole32(dir->rev);
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
    b234:	bl	e8b0 <lfs_crc>
    b238:	ldr	r3, [sp, #40]	; 0x28
    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
        lfs_off_t off = 0;
        lfs_tag_t ptag = 0xffffffff;

        uint16_t tempcount = 0;
    b23a:	str	r4, [sp, #20]
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
        bool tempsplit = false;
        lfs_stag_t tempbesttag = besttag;

        dir->rev = lfs_tole32(dir->rev);
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
    b23c:	mov	r5, r0
    dir->rev = revs[(r+0)%2];
    dir->off = 0; // nonzero = found some commits

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
        lfs_off_t off = 0;
    b23e:	mov	r7, r4
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
        bool tempsplit = false;
        lfs_stag_t tempbesttag = besttag;

        dir->rev = lfs_tole32(dir->rev);
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
    b240:	str	r3, [sp, #28]
    dir->off = 0; // nonzero = found some commits

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
        lfs_off_t off = 0;
        lfs_tag_t ptag = 0xffffffff;
    b242:	mov.w	r6, #4294967295
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
                uint8_t dat;
                err = lfs_bd_read(lfs,
    b246:	mov.w	r9, #1
        dir->rev = lfs_fromle32(dir->rev);

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
    b24a:	sbfx	r2, r6, #0, #10
    b24e:	cmp.w	r2, #4294967295
    b252:	ite	ne
    b254:	movne	r2, r6
    b256:	addeq	r2, r6, #1
            int err = lfs_bd_read(lfs,
    b258:	movs	r0, #4
        dir->rev = lfs_fromle32(dir->rev);

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
    b25a:	ubfx	r2, r2, #0, #10
            int err = lfs_bd_read(lfs,
    b25e:	ldr.w	r3, [sl, #104]	; 0x68
    b262:	ldr.w	r1, [fp]
    b266:	ldr	r3, [r3, #28]
    b268:	str	r0, [sp, #12]
        dir->rev = lfs_fromle32(dir->rev);

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
    b26a:	add	r2, r0
    b26c:	add	r7, r2
            int err = lfs_bd_read(lfs,
    b26e:	add	r2, sp, #56	; 0x38
    b270:	str	r2, [sp, #8]
    b272:	str	r1, [sp, #0]
    b274:	str	r7, [sp, #4]
    b276:	mov	r2, sl
    b278:	movs	r1, #0
    b27a:	mov	r0, r8
    b27c:	bl	afb8 <lfs_bd_read.isra.15>
                    NULL, &lfs->rcache, lfs->cfg->block_size,
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
    b280:	mov	r4, r0
    b282:	cmp	r0, #0
    b284:	bne.w	b52e <lfs_dir_fetchmatch+0x3ca>
                    break;
                }
                return err;
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
    b288:	mov	r0, r5
    b28a:	movs	r2, #4
    b28c:	add	r1, sp, #56	; 0x38
    b28e:	bl	e8b0 <lfs_crc>
static inline uint32_t lfs_frombe32(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
    b292:	ldr	r3, [sp, #56]	; 0x38
    b294:	rev	r3, r3
            tag = lfs_frombe32(tag) ^ ptag;
    b296:	eors	r3, r6

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
    b298:	cmp	r3, #0
                    break;
                }
                return err;
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
    b29a:	mov	r5, r0
            tag = lfs_frombe32(tag) ^ ptag;
    b29c:	str	r3, [sp, #16]
    b29e:	str	r3, [sp, #56]	; 0x38

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
    b2a0:	blt.w	b538 <lfs_dir_fetchmatch+0x3d4>
static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
    return tag & 0x000003ff;
}

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    b2a4:	ldr	r1, [sp, #16]
    b2a6:	sbfx	r2, r1, #0, #10
    b2aa:	mov	r3, r1
    b2ac:	cmp.w	r2, #4294967295
    b2b0:	it	eq
    b2b2:	addeq	r3, #1
    b2b4:	mov	r2, r3
            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
                        dir->off % lfs->cfg->prog_size == 0);
                break;
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
    b2b6:	ldr.w	r3, [sl, #104]	; 0x68
static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
    return tag & 0x000003ff;
}

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    b2ba:	ubfx	r2, r2, #0, #10
    b2be:	adds	r2, #4
            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
                        dir->off % lfs->cfg->prog_size == 0);
                break;
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
    b2c0:	ldr	r3, [r3, #28]
    b2c2:	adds	r1, r7, r2
    b2c4:	cmp	r1, r3
    b2c6:	bhi.w	b524 <lfs_dir_fetchmatch+0x3c0>
static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
    return ((int32_t)(tag << 22) >> 22) == -1;
}

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
    return (tag & 0x70000000) >> 20;
    b2ca:	ldr	r1, [sp, #16]
    b2cc:	lsrs	r6, r1, #20
    b2ce:	and.w	r0, r6, #1792	; 0x700
                break;
            }

            ptag = tag;

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
    b2d2:	cmp.w	r0, #1280	; 0x500
    b2d6:	beq.n	b3cc <lfs_dir_fetchmatch+0x268>
                crc = 0xffffffff;
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
    b2d8:	cmp	r2, #4
    b2da:	beq.w	b4ac <lfs_dir_fetchmatch+0x348>
    b2de:	movs	r4, #4
    b2e0:	add	r6, sp, #60	; 0x3c
    b2e2:	b.n	b30c <lfs_dir_fetchmatch+0x1a8>
                        break;
                    }
                    return err;
                }

                crc = lfs_crc(crc, &dat, 1);
    b2e4:	mov	r0, r5
    b2e6:	bl	e8b0 <lfs_crc>
                crc = 0xffffffff;
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
    b2ea:	ldr	r1, [sp, #56]	; 0x38
    b2ec:	sbfx	r3, r1, #0, #10
    b2f0:	cmp.w	r3, #4294967295
    b2f4:	ite	ne
    b2f6:	movne	r3, r1
    b2f8:	addeq	r3, r1, #1
    b2fa:	ubfx	r3, r3, #0, #10
    b2fe:	adds	r3, #4
    b300:	cmp	r4, r3
                        break;
                    }
                    return err;
                }

                crc = lfs_crc(crc, &dat, 1);
    b302:	mov	r5, r0
                crc = 0xffffffff;
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
    b304:	bcs.n	b3a4 <lfs_dir_fetchmatch+0x240>
    b306:	ldr.w	r3, [sl, #104]	; 0x68
    b30a:	ldr	r3, [r3, #28]
                uint8_t dat;
                err = lfs_bd_read(lfs,
    b30c:	ldr.w	r2, [fp]
    b310:	str	r2, [sp, #0]
    b312:	adds	r1, r7, r4
    b314:	str	r1, [sp, #4]
    b316:	mov	r2, sl
    b318:	movs	r1, #0
    b31a:	str.w	r9, [sp, #12]
    b31e:	str	r6, [sp, #8]
    b320:	mov	r0, r8
    b322:	bl	afb8 <lfs_bd_read.isra.15>
                        break;
                    }
                    return err;
                }

                crc = lfs_crc(crc, &dat, 1);
    b326:	movs	r2, #1
    b328:	mov	r1, r6
                crc = 0xffffffff;
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
    b32a:	add	r4, r2
                uint8_t dat;
                err = lfs_bd_read(lfs,
                        NULL, &lfs->rcache, lfs->cfg->block_size,
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
    b32c:	cmp	r0, #0
    b32e:	beq.n	b2e4 <lfs_dir_fetchmatch+0x180>
                    if (err == LFS_ERR_CORRUPT) {
    b330:	cmn.w	r0, #84	; 0x54
    b334:	bne.n	b434 <lfs_dir_fetchmatch+0x2d0>
    b336:	ldr	r1, [sp, #56]	; 0x38
                        dir->erased = false;
    b338:	ldrb.w	r3, [sp, #32]
    b33c:	strb.w	r3, [fp, #22]
    b340:	lsrs	r6, r1, #20
    b342:	and.w	r0, r6, #1792	; 0x700

                crc = lfs_crc(crc, &dat, 1);
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
    b346:	cbnz	r0, b366 <lfs_dir_fetchmatch+0x202>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
    b348:	ldr	r2, [sp, #20]
static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
    return (int8_t)lfs_tag_chunk(tag);
}

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
    b34a:	ubfx	r3, r1, #10, #10
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
    b34e:	cmp	r2, r3
    b350:	bhi.n	b356 <lfs_dir_fetchmatch+0x1f2>
                    tempcount = lfs_tag_id(tag) + 1;
    b352:	adds	r3, #1
    b354:	str	r3, [sp, #20]
                }
                lfs_pair_fromle32(temptail);
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
    b356:	ldr	r3, [sp, #128]	; 0x80
    b358:	ldr	r2, [sp, #24]
    b35a:	eors	r3, r1
    b35c:	ands.w	r4, r3, r2
    b360:	beq.n	b3ac <lfs_dir_fetchmatch+0x248>
    b362:	ldr	r6, [sp, #16]
    b364:	b.n	b24a <lfs_dir_fetchmatch+0xe6>
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
                    tempcount = lfs_tag_id(tag) + 1;
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
    b366:	cmp.w	r0, #1024	; 0x400
    b36a:	beq.n	b460 <lfs_dir_fetchmatch+0x2fc>
                    tempbesttag |= 0x80000000;
                } else if (tempbesttag != -1 &&
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
    b36c:	cmp.w	r0, #1536	; 0x600
    b370:	bne.n	b356 <lfs_dir_fetchmatch+0x1f2>
                tempsplit = (lfs_tag_chunk(tag) & 1);

                err = lfs_bd_read(lfs,
    b372:	ldr.w	r3, [sl, #104]	; 0x68
    b376:	ldr.w	r2, [fp]
    b37a:	ldr	r3, [r3, #28]
    b37c:	str	r2, [sp, #0]
    b37e:	add	r1, sp, #72	; 0x48
    b380:	str	r1, [sp, #8]
    b382:	movs	r0, #8
    b384:	adds	r1, r7, #4
    b386:	str	r0, [sp, #12]
    b388:	str	r1, [sp, #4]
    b38a:	mov	r2, sl
    b38c:	movs	r1, #0
    b38e:	mov	r0, r8
                } else if (tempbesttag != -1 &&
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
                tempsplit = (lfs_tag_chunk(tag) & 1);
    b390:	and.w	r4, r6, #1
    b394:	str	r4, [sp, #52]	; 0x34

                err = lfs_bd_read(lfs,
    b396:	bl	afb8 <lfs_bd_read.isra.15>
                        NULL, &lfs->rcache, lfs->cfg->block_size,
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
                    if (err == LFS_ERR_CORRUPT) {
    b39a:	cmn.w	r0, #84	; 0x54
    b39e:	beq.n	b3f4 <lfs_dir_fetchmatch+0x290>
    b3a0:	ldr	r1, [sp, #56]	; 0x38
    b3a2:	b.n	b356 <lfs_dir_fetchmatch+0x1f2>
    b3a4:	lsrs	r6, r1, #20
    b3a6:	and.w	r0, r6, #1792	; 0x700
    b3aa:	b.n	b346 <lfs_dir_fetchmatch+0x1e2>
                lfs_pair_fromle32(temptail);
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
                int res = cb(data, tag, &(struct lfs_diskoff){
    b3ac:	ldr.w	r3, [fp]
    b3b0:	str	r3, [sp, #80]	; 0x50
    b3b2:	adds	r3, r7, #4
    b3b4:	str	r3, [sp, #84]	; 0x54
    b3b6:	add	r2, sp, #80	; 0x50
    b3b8:	ldr	r0, [sp, #140]	; 0x8c
    b3ba:	ldr	r3, [sp, #136]	; 0x88
    b3bc:	blx	r3
                        dir->pair[0], off+sizeof(tag)});
                if (res < 0) {
    b3be:	cmp	r0, #0
    b3c0:	blt.w	b51e <lfs_dir_fetchmatch+0x3ba>
                        break;
                    }
                    return res;
                }

                if (res == LFS_CMP_EQ) {
    b3c4:	bne.n	b43a <lfs_dir_fetchmatch+0x2d6>
                    // found a match
                    tempbesttag = tag;
    b3c6:	ldr	r3, [sp, #56]	; 0x38
    b3c8:	str	r3, [sp, #28]
    b3ca:	b.n	b362 <lfs_dir_fetchmatch+0x1fe>
            ptag = tag;

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
    b3cc:	ldr.w	r2, [fp]
    b3d0:	str	r2, [sp, #0]
    b3d2:	adds	r0, r7, #4
    b3d4:	movs	r1, #4
    b3d6:	add	r6, sp, #60	; 0x3c
    b3d8:	str	r1, [sp, #12]
    b3da:	str	r0, [sp, #4]
    b3dc:	mov	r1, r4
    b3de:	str	r6, [sp, #8]
    b3e0:	mov	r2, sl
    b3e2:	mov	r0, r8
    b3e4:	bl	afb8 <lfs_bd_read.isra.15>
                        NULL, &lfs->rcache, lfs->cfg->block_size,
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
    b3e8:	cmp	r0, #0
    b3ea:	bne.w	b5b8 <lfs_dir_fetchmatch+0x454>
                    }
                    return err;
                }
                dcrc = lfs_fromle32(dcrc);

                if (crc != dcrc) {
    b3ee:	ldr	r3, [sp, #60]	; 0x3c
    b3f0:	cmp	r5, r3
    b3f2:	beq.n	b4b0 <lfs_dir_fetchmatch+0x34c>
                err = lfs_bd_read(lfs,
                        NULL, &lfs->rcache, lfs->cfg->block_size,
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
                    if (err == LFS_ERR_CORRUPT) {
                        dir->erased = false;
    b3f4:	ldrb.w	r3, [sp, #32]
    b3f8:	strb.w	r3, [fp, #22]
    b3fc:	ldr.w	r3, [fp, #12]
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
    b400:	cmp	r3, #0
    b402:	bne.w	b56a <lfs_dir_fetchmatch+0x406>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
        dir->rev = revs[(r+1)%2];
    b406:	ldr	r3, [sp, #48]	; 0x30


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
    lfs_block_t t = pair[0];
    b408:	ldr.w	r2, [fp]
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
        dir->rev = revs[(r+1)%2];
    b40c:	add	r1, sp, #88	; 0x58
    b40e:	add.w	r3, r1, r3, lsl #2
    b412:	ldr.w	r1, [r3, #-24]

/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
    lfs_block_t t = pair[0];
    pair[0] = pair[1];
    b416:	ldr.w	r3, [fp, #4]
    b41a:	str.w	r3, [fp]
    dir->pair[1] = pair[(r+1)%2];
    dir->rev = revs[(r+0)%2];
    dir->off = 0; // nonzero = found some commits

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
    b41e:	ldr	r3, [sp, #36]	; 0x24
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
        dir->rev = revs[(r+1)%2];
    b420:	str.w	r1, [fp, #8]
    dir->pair[1] = pair[(r+1)%2];
    dir->rev = revs[(r+0)%2];
    dir->off = 0; // nonzero = found some commits

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
    b424:	subs	r3, #1
/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
    lfs_block_t t = pair[0];
    pair[0] = pair[1];
    pair[1] = t;
    b426:	str.w	r2, [fp, #4]
    dir->pair[1] = pair[(r+1)%2];
    dir->rev = revs[(r+0)%2];
    dir->off = 0; // nonzero = found some commits

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
    b42a:	str	r3, [sp, #36]	; 0x24
    b42c:	bne.w	b21a <lfs_dir_fetchmatch+0xb6>
    lfs_stag_t besttag = -1;

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
        return LFS_ERR_CORRUPT;
    b430:	mvn.w	r0, #83	; 0x53
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
}
    b434:	add	sp, #92	; 0x5c
    b436:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                }

                if (res == LFS_CMP_EQ) {
                    // found a match
                    tempbesttag = tag;
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
    b43a:	ldr	r2, [sp, #56]	; 0x38
    b43c:	ldr	r1, [sp, #28]
    b43e:	ldr	r3, [pc, #204]	; (b50c <lfs_dir_fetchmatch+0x3a8>)
    b440:	eors	r1, r2
    b442:	ands	r3, r1
    b444:	cbz	r3, b49a <lfs_dir_fetchmatch+0x336>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
                } else if (res == LFS_CMP_GT &&
    b446:	cmp	r0, #2
    b448:	bne.n	b362 <lfs_dir_fetchmatch+0x1fe>
    b44a:	ldr	r3, [sp, #28]
    b44c:	ubfx	r1, r2, #10, #10
    b450:	ubfx	r3, r3, #10, #10
    b454:	cmp	r3, r1
    b456:	bcc.n	b362 <lfs_dir_fetchmatch+0x1fe>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
    b458:	orr.w	r3, r2, #2147483648	; 0x80000000
    b45c:	str	r3, [sp, #28]
    b45e:	b.n	b362 <lfs_dir_fetchmatch+0x1fe>
                    tempcount = lfs_tag_id(tag) + 1;
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
                tempcount += lfs_tag_splice(tag);

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
    b460:	ldr	r2, [sp, #28]
    b462:	ldr	r3, [pc, #172]	; (b510 <lfs_dir_fetchmatch+0x3ac>)
    b464:	ands	r3, r2
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
                    tempcount = lfs_tag_id(tag) + 1;
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
                tempcount += lfs_tag_splice(tag);
    b466:	ldr	r2, [sp, #20]
static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
    return (tag & 0x0ff00000) >> 20;
}

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
    return (int8_t)lfs_tag_chunk(tag);
    b468:	sxtb	r6, r6
                    tempcount = lfs_tag_id(tag) + 1;
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
                tempcount += lfs_tag_splice(tag);

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
    b46a:	orr.w	r3, r3, #1333788672	; 0x4f800000
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
                    tempcount = lfs_tag_id(tag) + 1;
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
                tempcount += lfs_tag_splice(tag);
    b46e:	add	r2, r6

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
    b470:	orr.w	r3, r3, #7340032	; 0x700000
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
                    tempcount = lfs_tag_id(tag) + 1;
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
                tempcount += lfs_tag_splice(tag);
    b474:	uxth	r2, r2

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
    b476:	cmp	r3, r1
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
                    tempcount = lfs_tag_id(tag) + 1;
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
                tempcount += lfs_tag_splice(tag);
    b478:	str	r2, [sp, #20]

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
    b47a:	beq.n	b514 <lfs_dir_fetchmatch+0x3b0>
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
                    tempbesttag |= 0x80000000;
                } else if (tempbesttag != -1 &&
    b47c:	ldr	r0, [sp, #28]
    b47e:	adds	r3, r0, #1
    b480:	beq.w	b356 <lfs_dir_fetchmatch+0x1f2>
    b484:	ubfx	r3, r0, #10, #10
    b488:	ubfx	r2, r1, #10, #10
    b48c:	cmp	r3, r2
    b48e:	bcc.w	b356 <lfs_dir_fetchmatch+0x1f2>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    b492:	add.w	r3, r0, r6, lsl #10
    b496:	str	r3, [sp, #28]
    b498:	b.n	b356 <lfs_dir_fetchmatch+0x1f2>
                    tempbesttag = tag;
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
    b49a:	mov.w	r3, #4294967295
    b49e:	str	r3, [sp, #28]
    b4a0:	b.n	b362 <lfs_dir_fetchmatch+0x1fe>
    for (int i = 0; i < 2; i++) {
        int err = lfs_bd_read(lfs,
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
        revs[i] = lfs_fromle32(revs[i]);
        if (err && err != LFS_ERR_CORRUPT) {
    b4a2:	cmn.w	r0, #84	; 0x54
    b4a6:	beq.w	b1de <lfs_dir_fetchmatch+0x7a>
    b4aa:	b.n	b434 <lfs_dir_fetchmatch+0x2d0>
                crc = 0xffffffff;
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
    b4ac:	ldr	r1, [sp, #16]
    b4ae:	b.n	b346 <lfs_dir_fetchmatch+0x1e2>
                    dir->erased = false;
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
    b4b0:	ldr	r1, [sp, #56]	; 0x38

                // toss our crc into the filesystem seed for
                // pseudorandom numbers
                lfs->seed ^= crc;
    b4b2:	ldr.w	r2, [sl, #44]	; 0x2c
                    dir->erased = false;
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
    b4b6:	ldr	r0, [sp, #16]
                // pseudorandom numbers
                lfs->seed ^= crc;

                // update with what's found so far
                besttag = tempbesttag;
                dir->off = off + lfs_tag_dsize(tag);
    b4b8:	sbfx	r3, r1, #0, #10
    b4bc:	cmp.w	r3, #4294967295
    b4c0:	ite	ne
    b4c2:	movne	r3, r1
    b4c4:	addeq	r3, r1, #1
    b4c6:	ubfx	r3, r3, #0, #10
    b4ca:	adds	r3, #4
    b4cc:	add	r3, r7
                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;

                // toss our crc into the filesystem seed for
                // pseudorandom numbers
                lfs->seed ^= crc;
    b4ce:	eors	r2, r5
    b4d0:	str.w	r2, [sl, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
                dir->off = off + lfs_tag_dsize(tag);
    b4d4:	str.w	r3, [fp, #12]
                dir->etag = ptag;
                dir->count = tempcount;
    b4d8:	ldrh.w	r3, [sp, #20]
    b4dc:	strh.w	r3, [fp, #20]
                    dir->erased = false;
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
    b4e0:	lsrs	r1, r1, #20
                dir->off = off + lfs_tag_dsize(tag);
                dir->etag = ptag;
                dir->count = tempcount;
                dir->tail[0] = temptail[0];
                dir->tail[1] = temptail[1];
                dir->split = tempsplit;
    b4e2:	ldrb.w	r3, [sp, #52]	; 0x34
    b4e6:	strb.w	r3, [fp, #23]
                    dir->erased = false;
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
    b4ea:	eor.w	r6, r0, r1, lsl #31
    b4ee:	ldr	r3, [sp, #28]
                // update with what's found so far
                besttag = tempbesttag;
                dir->off = off + lfs_tag_dsize(tag);
                dir->etag = ptag;
                dir->count = tempcount;
                dir->tail[0] = temptail[0];
    b4f0:	ldr	r0, [sp, #72]	; 0x48
                dir->tail[1] = temptail[1];
    b4f2:	ldr	r1, [sp, #76]	; 0x4c
                lfs->seed ^= crc;

                // update with what's found so far
                besttag = tempbesttag;
                dir->off = off + lfs_tag_dsize(tag);
                dir->etag = ptag;
    b4f4:	str.w	r6, [fp, #16]
                dir->count = tempcount;
                dir->tail[0] = temptail[0];
    b4f8:	str.w	r0, [fp, #24]
                dir->tail[1] = temptail[1];
    b4fc:	str.w	r1, [fp, #28]
    b500:	str	r3, [sp, #40]	; 0x28
                dir->split = tempsplit;

                // reset crc
                crc = 0xffffffff;
    b502:	mov.w	r5, #4294967295
    b506:	b.n	b24a <lfs_dir_fetchmatch+0xe6>
    b508:	.word	0x00015b90
    b50c:	.word	0x7ffffc00
    b510:	.word	0x000ffc00
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
                tempcount += lfs_tag_splice(tag);

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
                    tempbesttag |= 0x80000000;
    b514:	ldr	r3, [sp, #28]
    b516:	orr.w	r3, r3, #2147483648	; 0x80000000
    b51a:	str	r3, [sp, #28]
    b51c:	b.n	b356 <lfs_dir_fetchmatch+0x1f2>
            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
                int res = cb(data, tag, &(struct lfs_diskoff){
                        dir->pair[0], off+sizeof(tag)});
                if (res < 0) {
                    if (res == LFS_ERR_CORRUPT) {
    b51e:	cmn.w	r0, #84	; 0x54
    b522:	bne.n	b434 <lfs_dir_fetchmatch+0x2d0>
                        dir->erased = false;
    b524:	strb.w	r4, [fp, #22]
    b528:	ldr.w	r3, [fp, #12]
                        break;
    b52c:	b.n	b400 <lfs_dir_fetchmatch+0x29c>
            off += lfs_tag_dsize(ptag);
            int err = lfs_bd_read(lfs,
                    NULL, &lfs->rcache, lfs->cfg->block_size,
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
                if (err == LFS_ERR_CORRUPT) {
    b52e:	cmn.w	r0, #84	; 0x54
    b532:	beq.w	b3f4 <lfs_dir_fetchmatch+0x290>
    b536:	b.n	b434 <lfs_dir_fetchmatch+0x2d0>
            crc = lfs_crc(crc, &tag, sizeof(tag));
            tag = lfs_frombe32(tag) ^ ptag;

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
    b538:	lsrs	r3, r6, #20
    b53a:	and.w	r3, r3, #1792	; 0x700
    b53e:	cmp.w	r3, #1280	; 0x500
    b542:	beq.n	b550 <lfs_dir_fetchmatch+0x3ec>
    b544:	ldr.w	r3, [fp, #12]
    b548:	movs	r2, #0
    b54a:	strb.w	r2, [fp, #22]
                        dir->off % lfs->cfg->prog_size == 0);
                break;
    b54e:	b.n	b400 <lfs_dir_fetchmatch+0x29c>
            tag = lfs_frombe32(tag) ^ ptag;

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
                        dir->off % lfs->cfg->prog_size == 0);
    b550:	ldr.w	r2, [sl, #104]	; 0x68
    b554:	ldr.w	r3, [fp, #12]
            crc = lfs_crc(crc, &tag, sizeof(tag));
            tag = lfs_frombe32(tag) ^ ptag;

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
    b558:	ldr	r1, [r2, #24]
    b55a:	udiv	r2, r3, r1
    b55e:	mls	r2, r1, r2, r3
    b562:	cmp	r2, #0
    b564:	bne.n	b548 <lfs_dir_fetchmatch+0x3e4>
    b566:	movs	r2, #1
    b568:	b.n	b54a <lfs_dir_fetchmatch+0x3e6>
    return lfs_tag_type1(a->tag);
}

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    b56a:	ldr.w	r3, [sl, #60]	; 0x3c
    b56e:	lsrs	r2, r3, #20
    b570:	tst.w	r2, #1792	; 0x700
    b574:	beq.n	b596 <lfs_dir_fetchmatch+0x432>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    b576:	ldr.w	r4, [sl, #64]	; 0x40
    b57a:	ldr.w	r1, [fp]
    b57e:	cmp	r4, r1
    b580:	beq.n	b5c2 <lfs_dir_fetchmatch+0x45e>
    b582:	ldr.w	r2, [sl, #68]	; 0x44
    b586:	ldr.w	r0, [fp, #4]
    b58a:	cmp	r2, r0
    b58c:	beq.n	b5c2 <lfs_dir_fetchmatch+0x45e>
    b58e:	cmp	r4, r0
    b590:	beq.n	b5c2 <lfs_dir_fetchmatch+0x45e>
    b592:	cmp	r1, r2
    b594:	beq.n	b5c2 <lfs_dir_fetchmatch+0x45e>
                    besttag -= LFS_MKTAG(0, 1, 0);
                }
            }

            // found tag? or found best id?
            if (id) {
    b596:	ldr	r3, [sp, #132]	; 0x84
    b598:	cbz	r3, b5ae <lfs_dir_fetchmatch+0x44a>
    b59a:	ldr	r3, [sp, #40]	; 0x28
    b59c:	ubfx	r3, r3, #10, #10
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
    b5a0:	ldrh.w	r2, [fp, #20]
    b5a4:	cmp	r3, r2
    b5a6:	it	cs
    b5a8:	movcs	r3, r2
    b5aa:	ldr	r2, [sp, #132]	; 0x84
    b5ac:	strh	r3, [r2, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
    b5ae:	ldr	r3, [sp, #40]	; 0x28
    b5b0:	cmp	r3, #0
    b5b2:	blt.n	b5e2 <lfs_dir_fetchmatch+0x47e>
    b5b4:	ldr	r0, [sp, #40]	; 0x28
    b5b6:	b.n	b434 <lfs_dir_fetchmatch+0x2d0>
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
                        NULL, &lfs->rcache, lfs->cfg->block_size,
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
                    if (err == LFS_ERR_CORRUPT) {
    b5b8:	cmn.w	r0, #84	; 0x54
    b5bc:	beq.w	b3f4 <lfs_dir_fetchmatch+0x290>
    b5c0:	b.n	b434 <lfs_dir_fetchmatch+0x2d0>
static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
    return (int8_t)lfs_tag_chunk(tag);
}

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
    b5c2:	ldr	r2, [sp, #40]	; 0x28
    b5c4:	ubfx	r3, r3, #10, #10
    b5c8:	ubfx	r2, r2, #10, #10

        // consider what we have good enough
        if (dir->off > 0) {
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
    b5cc:	cmp	r2, r3
    b5ce:	beq.n	b602 <lfs_dir_fetchmatch+0x49e>
                    besttag |= 0x80000000;
                } else if (besttag != -1 &&
    b5d0:	ldr	r0, [sp, #40]	; 0x28
    b5d2:	adds	r4, r0, #1
    b5d4:	beq.n	b5f6 <lfs_dir_fetchmatch+0x492>
    b5d6:	cmp	r2, r3
                        lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
                    besttag -= LFS_MKTAG(0, 1, 0);
    b5d8:	itt	hi
    b5da:	subhi.w	r3, r0, #1024	; 0x400
    b5de:	strhi	r3, [sp, #40]	; 0x28
    b5e0:	b.n	b596 <lfs_dir_fetchmatch+0x432>
    b5e2:	ubfx	r3, r3, #10, #10
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
            }

            if (lfs_tag_isvalid(besttag)) {
                return besttag;
            } else if (lfs_tag_id(besttag) < dir->count) {
    b5e6:	ldrh.w	r2, [fp, #20]
                return LFS_ERR_NOENT;
    b5ea:	cmp	r2, r3
    b5ec:	ite	ls
    b5ee:	movls	r0, #0
    b5f0:	mvnhi.w	r0, #1
    b5f4:	b.n	b434 <lfs_dir_fetchmatch+0x2d0>
    b5f6:	movw	r3, #1023	; 0x3ff
                    besttag -= LFS_MKTAG(0, 1, 0);
                }
            }

            // found tag? or found best id?
            if (id) {
    b5fa:	ldr	r2, [sp, #132]	; 0x84
    b5fc:	cmp	r2, #0
    b5fe:	bne.n	b5a0 <lfs_dir_fetchmatch+0x43c>
    b600:	b.n	b5e6 <lfs_dir_fetchmatch+0x482>
        // consider what we have good enough
        if (dir->off > 0) {
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
                    besttag |= 0x80000000;
    b602:	ldr	r3, [sp, #40]	; 0x28
    b604:	orr.w	r3, r3, #2147483648	; 0x80000000
    b608:	str	r3, [sp, #40]	; 0x28
    b60a:	ubfx	r3, r3, #10, #10
    b60e:	b.n	b5fa <lfs_dir_fetchmatch+0x496>

0000b610 <lfs_fs_parent>:
    lfs_pair_fromle32(child);
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
}

static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
    b610:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
    parent->tail[1] = 1;
    b614:	movs	r3, #1
}

static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
    b616:	movs	r5, #0
            // loop detected
            return LFS_ERR_CORRUPT;
        }
        cycle += 1;

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
    b618:	ldr.w	sl, [pc, #116]	; b690 <lfs_fs_parent+0x80>
    b61c:	ldr.w	r9, [pc, #116]	; b694 <lfs_fs_parent+0x84>

static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
    parent->tail[1] = 1;
    b620:	str	r3, [r2, #28]
    lfs_pair_fromle32(child);
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
}

static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
    b622:	sub	sp, #32
    b624:	mov	r4, r2
    b626:	mov	r6, r0
    b628:	mov	r8, r1
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
    b62a:	str	r5, [r2, #24]
    pair[0] = pair[1];
    pair[1] = t;
}

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    b62c:	ldr	r7, [r4, #28]
            // loop detected
            return LFS_ERR_CORRUPT;
        }
        cycle += 1;

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
    b62e:	ldr	r3, [pc, #92]	; (b68c <lfs_fs_parent+0x7c>)
    pair[0] = pair[1];
    pair[1] = t;
}

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    b630:	adds	r7, #1
            // loop detected
            return LFS_ERR_CORRUPT;
        }
        cycle += 1;

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
    b632:	mov.w	lr, #0
    b636:	add.w	r2, r4, #24
    b63a:	mov	r1, r4
    b63c:	mov	r0, r6
    pair[0] = pair[1];
    pair[1] = t;
}

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    b63e:	beq.n	b676 <lfs_fs_parent+0x66>
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
    parent->tail[1] = 1;
    lfs_block_t cycle = 0;
    while (!lfs_pair_isnull(parent->tail)) {
        if (cycle >= lfs->cfg->block_count/2) {
    b640:	ldr	r7, [r6, #104]	; 0x68
    b642:	ldr	r7, [r7, #32]
    b644:	cmp.w	r5, r7, lsr #1
    b648:	bcs.n	b680 <lfs_fs_parent+0x70>
            // loop detected
            return LFS_ERR_CORRUPT;
        }
        cycle += 1;

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
    b64a:	stmia.w	sp, {r9, lr}
    b64e:	add	r7, sp, #20
    b650:	str	r7, [sp, #12]
    b652:	str.w	sl, [sp, #8]
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
    b656:	ldr.w	r7, [r8]
    b65a:	str	r7, [sp, #24]
    b65c:	ldr.w	r7, [r8, #4]
    b660:	str	r6, [sp, #20]
    b662:	str	r7, [sp, #28]
            // loop detected
            return LFS_ERR_CORRUPT;
        }
        cycle += 1;

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
    b664:	bl	b164 <lfs_dir_fetchmatch>
    while (!lfs_pair_isnull(parent->tail)) {
        if (cycle >= lfs->cfg->block_count/2) {
            // loop detected
            return LFS_ERR_CORRUPT;
        }
        cycle += 1;
    b668:	adds	r5, #1
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
                    lfs, {pair[0], pair[1]}});
        if (tag && tag != LFS_ERR_NOENT) {
    b66a:	cbz	r0, b670 <lfs_fs_parent+0x60>
    b66c:	adds	r3, r0, #2
    b66e:	bne.n	b67a <lfs_fs_parent+0x6a>
    pair[0] = pair[1];
    pair[1] = t;
}

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    b670:	ldr	r3, [r4, #24]
    b672:	adds	r3, #1
    b674:	bne.n	b62c <lfs_fs_parent+0x1c>
        if (tag && tag != LFS_ERR_NOENT) {
            return tag;
        }
    }

    return LFS_ERR_NOENT;
    b676:	mvn.w	r0, #1
}
    b67a:	add	sp, #32
    b67c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    parent->tail[1] = 1;
    lfs_block_t cycle = 0;
    while (!lfs_pair_isnull(parent->tail)) {
        if (cycle >= lfs->cfg->block_count/2) {
            // loop detected
            return LFS_ERR_CORRUPT;
    b680:	mvn.w	r0, #83	; 0x53
            return tag;
        }
    }

    return LFS_ERR_NOENT;
}
    b684:	add	sp, #32
    b686:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b68a:	nop
    b68c:	.word	0x7ff003ff
    b690:	.word	0x0000b119
    b694:	.word	0x20000008

0000b698 <lfs_fs_pred>:
    LFS_TRACE("lfs_fs_traverse -> %d", 0);
    return err;
}

static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
    b698:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b69c:	mov	r6, r2
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
    b69e:	movs	r3, #0
    pdir->tail[1] = 1;
    b6a0:	movs	r2, #1
    LFS_TRACE("lfs_fs_traverse -> %d", 0);
    return err;
}

static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
    b6a2:	sub	sp, #20
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
    pdir->tail[1] = 1;
    b6a4:	mov	r4, r3
    LFS_TRACE("lfs_fs_traverse -> %d", 0);
    return err;
}

static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
    b6a6:	mov	r9, r0
    b6a8:	mov	sl, r1
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
    pdir->tail[1] = 1;
    b6aa:	str	r2, [r6, #28]
}

static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
    b6ac:	str	r3, [r6, #24]
    pdir->tail[1] = 1;
    lfs_block_t cycle = 0;
    b6ae:	mov	r5, r3

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
    b6b0:	mov	r8, r3

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
            return 0;
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
    b6b2:	add.w	fp, r6, #24
    pair[0] = pair[1];
    pair[1] = t;
}

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    b6b6:	ldr.w	lr, [r6, #28]
    b6ba:	cmp.w	lr, #4294967295
    b6be:	beq.n	b710 <lfs_fs_pred+0x78>
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
    pdir->tail[1] = 1;
    lfs_block_t cycle = 0;
    while (!lfs_pair_isnull(pdir->tail)) {
        if (cycle >= lfs->cfg->block_count/2) {
    b6c0:	ldr.w	r7, [r9, #104]	; 0x68
    b6c4:	ldr	r7, [r7, #32]
    b6c6:	cmp.w	r5, r7, lsr #1

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
    b6ca:	mov.w	r3, #4294967295
    b6ce:	mov	r2, fp
    b6d0:	mov	r1, r6
    b6d2:	mov	r0, r9
    while (!lfs_pair_isnull(pdir->tail)) {
        if (cycle >= lfs->cfg->block_count/2) {
            // loop detected
            return LFS_ERR_CORRUPT;
        }
        cycle += 1;
    b6d4:	add.w	r5, r5, #1
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
    pdir->tail[1] = 1;
    lfs_block_t cycle = 0;
    while (!lfs_pair_isnull(pdir->tail)) {
        if (cycle >= lfs->cfg->block_count/2) {
    b6d8:	bcs.n	b722 <lfs_fs_pred+0x8a>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    b6da:	ldr.w	ip, [sl]
    b6de:	cmp	ip, r4
    b6e0:	beq.n	b71a <lfs_fs_pred+0x82>
    b6e2:	ldr.w	r7, [sl, #4]
    b6e6:	cmp	r7, lr
    b6e8:	beq.n	b71a <lfs_fs_pred+0x82>
    b6ea:	cmp	r7, r4
    b6ec:	beq.n	b71a <lfs_fs_pred+0x82>
    b6ee:	cmp	ip, lr
    b6f0:	beq.n	b71a <lfs_fs_pred+0x82>

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
    b6f2:	mov.w	r4, #4294967295
    b6f6:	str.w	r8, [sp, #12]
    b6fa:	str.w	r8, [sp, #8]
    b6fe:	str.w	r8, [sp, #4]
    b702:	str	r4, [sp, #0]
    b704:	bl	b164 <lfs_dir_fetchmatch>
        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
            return 0;
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
        if (err) {
    b708:	cbnz	r0, b714 <lfs_fs_pred+0x7c>
    b70a:	ldr	r4, [r6, #24]
    pair[0] = pair[1];
    pair[1] = t;
}

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    b70c:	adds	r3, r4, #1
    b70e:	bne.n	b6b6 <lfs_fs_pred+0x1e>
        if (err) {
            return err;
        }
    }

    return LFS_ERR_NOENT;
    b710:	mvn.w	r0, #1
}
    b714:	add	sp, #20
    b716:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LFS_ERR_CORRUPT;
        }
        cycle += 1;

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
            return 0;
    b71a:	movs	r0, #0
            return err;
        }
    }

    return LFS_ERR_NOENT;
}
    b71c:	add	sp, #20
    b71e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pdir->tail[1] = 1;
    lfs_block_t cycle = 0;
    while (!lfs_pair_isnull(pdir->tail)) {
        if (cycle >= lfs->cfg->block_count/2) {
            // loop detected
            return LFS_ERR_CORRUPT;
    b722:	mvn.w	r0, #83	; 0x53
    b726:	b.n	b714 <lfs_fs_pred+0x7c>

0000b728 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
    b728:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b72c:	sub	sp, #92	; 0x5c
        } else {
            return 0;
        }

        lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
        if ((mask & tmask & tag) != (mask & tmask & ttag)) {
    b72e:	ldr.w	r8, [pc, #488]	; b918 <lfs_dir_traverse+0x1f0>
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
    b732:	ldrsh.w	r5, [sp, #152]	; 0x98
    b736:	str	r5, [sp, #48]	; 0x30
    b738:	ldrh.w	r5, [sp, #144]	; 0x90
    b73c:	str	r5, [sp, #56]	; 0x38
    b73e:	ldrh.w	r5, [sp, #148]	; 0x94
    b742:	ldr	r4, [sp, #136]	; 0x88
    b744:	str	r5, [sp, #68]	; 0x44
    b746:	mov	r5, r3
                if (err) {
                    return err;
                }
            }
        } else {
            int err = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
    b748:	ldr	r3, [sp, #48]	; 0x30
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
    b74a:	ldr	r6, [sp, #128]	; 0x80
    b74c:	ldr	r7, [sp, #132]	; 0x84
    b74e:	str	r0, [sp, #44]	; 0x2c
    b750:	mov	sl, r2
                if (err) {
                    return err;
                }
            }
        } else {
            int err = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
    b752:	lsls	r3, r3, #10
static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
    return (int8_t)lfs_tag_chunk(tag);
}

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
    b754:	ubfx	r2, r4, #10, #10
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
    b758:	mov	r9, r1
static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
    return (int8_t)lfs_tag_chunk(tag);
}

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
    b75a:	str	r2, [sp, #40]	; 0x28
        } else {
            return 0;
        }

        lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
        if ((mask & tmask & tag) != (mask & tmask & ttag)) {
    b75c:	and.w	r8, r4, r8
                if (err) {
                    return err;
                }
            }
        } else {
            int err = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
    b760:	str	r3, [sp, #52]	; 0x34
    // iterate over directory and attrs
    while (true) {
        lfs_tag_t tag;
        const void *buffer;
        struct lfs_diskoff disk;
        if (off+lfs_tag_dsize(ptag) < dir->off) {
    b762:	sbfx	r4, r5, #0, #10
    b766:	cmp.w	r4, #4294967295
    b76a:	ite	ne
    b76c:	movne	r4, r5
    b76e:	addeq	r4, r5, #1
    b770:	ubfx	r3, r4, #0, #10
    b774:	ldr.w	r2, [r9, #12]
    b778:	add.w	r4, sl, #4
    b77c:	add	r4, r3
    b77e:	cmp	r4, r2
    b780:	bcc.n	b81c <lfs_dir_traverse+0xf4>
            tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
            disk.block = dir->pair[0];
            disk.off = off+sizeof(lfs_tag_t);
            buffer = &disk;
            ptag = tag;
        } else if (attrcount > 0) {
    b782:	cmp	r7, #0
    b784:	ble.w	b908 <lfs_dir_traverse+0x1e0>
            tag = attrs[0].tag;
    b788:	ldr	r1, [r6, #0]
            buffer = attrs[0].buffer;
    b78a:	ldr	r4, [r6, #4]
            disk.block = dir->pair[0];
            disk.off = off+sizeof(lfs_tag_t);
            buffer = &disk;
            ptag = tag;
        } else if (attrcount > 0) {
            tag = attrs[0].tag;
    b78c:	str	r1, [sp, #76]	; 0x4c
            buffer = attrs[0].buffer;
            attrs += 1;
            attrcount -= 1;
    b78e:	subs	r7, #1
            buffer = &disk;
            ptag = tag;
        } else if (attrcount > 0) {
            tag = attrs[0].tag;
            buffer = attrs[0].buffer;
            attrs += 1;
    b790:	adds	r6, #8
        } else {
            return 0;
        }

        lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
        if ((mask & tmask & tag) != (mask & tmask & ttag)) {
    b792:	ldr	r3, [sp, #140]	; 0x8c
    b794:	eors	r3, r1
    b796:	ands.w	r3, r3, r8
    b79a:	bne.n	b762 <lfs_dir_traverse+0x3a>
            continue;
        }

        // do we need to filter? inlining the filtering logic here allows
        // for some minor optimizations
        if (lfs_tag_id(tmask) != 0) {
    b79c:	ldr	r2, [sp, #40]	; 0x28
    b79e:	cmp	r2, #0
    b7a0:	bne.n	b85a <lfs_dir_traverse+0x132>
static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
    return (tag & 0x70000000) >> 20;
}

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
    return (tag & 0x7ff00000) >> 20;
    b7a2:	ubfx	r3, r1, #20, #11
                continue;
            }
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
    b7a6:	cmp	r3, #0
    b7a8:	beq.n	b762 <lfs_dir_traverse+0x3a>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
    b7aa:	movw	r2, #257	; 0x101
    b7ae:	cmp	r3, r2
    b7b0:	beq.w	b8be <lfs_dir_traverse+0x196>
                    fromid, fromid+1, toid-fromid+diff,
                    cb, data);
            if (err) {
                return err;
            }
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
    b7b4:	cmp.w	r3, #258	; 0x102
    b7b8:	bne.n	b89c <lfs_dir_traverse+0x174>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
    b7ba:	ubfx	r3, r1, #0, #10
    b7be:	cmp	r3, #0
    b7c0:	beq.n	b762 <lfs_dir_traverse+0x3a>
    b7c2:	mov.w	fp, #0
    b7c6:	str.w	r9, [sp, #60]	; 0x3c
    b7ca:	str.w	sl, [sp, #64]	; 0x40
    b7ce:	str	r6, [sp, #128]	; 0x80
    b7d0:	adds	r4, #8
    b7d2:	mov	r6, fp
    b7d4:	ldr.w	r9, [sp, #48]	; 0x30
    b7d8:	ldr.w	sl, [sp, #160]	; 0xa0
    b7dc:	mov	fp, r5
    b7de:	ldr	r5, [sp, #156]	; 0x9c
    b7e0:	b.n	b7ec <lfs_dir_traverse+0xc4>
    b7e2:	ldr	r1, [sp, #76]	; 0x4c
    b7e4:	ubfx	r2, r1, #0, #10
    b7e8:	cmp	r6, r2
    b7ea:	bcs.n	b8b0 <lfs_dir_traverse+0x188>
                const struct lfs_attr *a = buffer;
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
    b7ec:	ldrb.w	lr, [r4, #-8]
    b7f0:	ldr	r3, [r4, #0]
    b7f2:	ldr.w	r2, [r4, #-4]
    b7f6:	ubfx	r1, r1, #10, #10
    b7fa:	add.w	r0, r1, r9
    b7fe:	orr.w	r0, r3, r0, lsl #10
    b802:	add.w	r1, lr, #768	; 0x300
    b806:	orr.w	r1, r0, r1, lsl #20
    b80a:	mov	r0, sl
    b80c:	blx	r5
                    cb, data);
            if (err) {
                return err;
            }
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
    b80e:	adds	r6, #1
    b810:	adds	r4, #12
                const struct lfs_attr *a = buffer;
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
                if (err) {
    b812:	cmp	r0, #0
    b814:	beq.n	b7e2 <lfs_dir_traverse+0xba>
            if (err) {
                return err;
            }
        }
    }
}
    b816:	add	sp, #92	; 0x5c
    b818:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lfs_tag_t tag;
        const void *buffer;
        struct lfs_diskoff disk;
        if (off+lfs_tag_dsize(ptag) < dir->off) {
            off += lfs_tag_dsize(ptag);
            int err = lfs_bd_read(lfs,
    b81c:	ldr	r0, [sp, #44]	; 0x2c
    b81e:	ldr.w	r2, [r9]
    b822:	str	r2, [sp, #0]
    b824:	add	r1, sp, #76	; 0x4c
    b826:	movs	r3, #4
    b828:	str	r1, [sp, #8]
    b82a:	mov	r2, r0
    b82c:	str	r4, [sp, #4]
    b82e:	str	r3, [sp, #12]
    b830:	movs	r1, #0
    b832:	adds	r0, #104	; 0x68
    b834:	bl	afb8 <lfs_bd_read.isra.15>
                    NULL, &lfs->rcache, sizeof(tag),
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
    b838:	cmp	r0, #0
    b83a:	bne.n	b816 <lfs_dir_traverse+0xee>
    b83c:	ldr	r3, [sp, #76]	; 0x4c
                return err;
            }

            tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
            disk.block = dir->pair[0];
    b83e:	ldr.w	r2, [r9]
    b842:	str	r2, [sp, #80]	; 0x50
    b844:	rev	r3, r3
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
                return err;
            }

            tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
    b846:	eors	r5, r3
    b848:	orr.w	r5, r5, #2147483648	; 0x80000000
            disk.block = dir->pair[0];
            disk.off = off+sizeof(lfs_tag_t);
    b84c:	adds	r3, r4, #4
    b84e:	mov	sl, r4
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
                return err;
            }

            tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
    b850:	str	r5, [sp, #76]	; 0x4c
    b852:	mov	r1, r5
            disk.block = dir->pair[0];
            disk.off = off+sizeof(lfs_tag_t);
    b854:	str	r3, [sp, #84]	; 0x54
            buffer = &disk;
    b856:	add	r4, sp, #80	; 0x50
    b858:	b.n	b792 <lfs_dir_traverse+0x6a>

        // do we need to filter? inlining the filtering logic here allows
        // for some minor optimizations
        if (lfs_tag_id(tmask) != 0) {
            // scan for duplicates and update tag based on creates/deletes
            int filter = lfs_dir_traverse(lfs,
    b85a:	add	r2, sp, #76	; 0x4c
    b85c:	ldr	r1, [pc, #176]	; (b910 <lfs_dir_traverse+0x1e8>)
    b85e:	str	r1, [sp, #28]
    b860:	str	r3, [sp, #24]
    b862:	str	r3, [sp, #20]
    b864:	str	r3, [sp, #16]
    b866:	str	r3, [sp, #12]
    b868:	str	r3, [sp, #8]
    b86a:	str	r2, [sp, #32]
    b86c:	stmia.w	sp, {r6, r7}
    b870:	mov	r3, r5
    b872:	mov	r2, sl
    b874:	mov	r1, r9
    b876:	ldr	r0, [sp, #44]	; 0x2c
    b878:	bl	b728 <lfs_dir_traverse>
                    dir, off, ptag, attrs, attrcount,
                    0, 0, 0, 0, 0,
                    lfs_dir_traverse_filter, &tag);
            if (filter < 0) {
    b87c:	cmp	r0, #0
    b87e:	blt.n	b816 <lfs_dir_traverse+0xee>
                return filter;
            }

            if (filter) {
    b880:	bne.w	b762 <lfs_dir_traverse+0x3a>
                continue;
            }

            // in filter range?
            if (!(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
    b884:	ldr	r1, [sp, #76]	; 0x4c
    b886:	ldr	r2, [sp, #56]	; 0x38
static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
    return (int8_t)lfs_tag_chunk(tag);
}

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
    b888:	ubfx	r3, r1, #10, #10
            if (filter) {
                continue;
            }

            // in filter range?
            if (!(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
    b88c:	cmp	r2, r3
    b88e:	bhi.w	b762 <lfs_dir_traverse+0x3a>
    b892:	ldr	r2, [sp, #68]	; 0x44
    b894:	cmp	r2, r3
    b896:	bls.w	b762 <lfs_dir_traverse+0x3a>
    b89a:	b.n	b7a2 <lfs_dir_traverse+0x7a>
                if (err) {
                    return err;
                }
            }
        } else {
            int err = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
    b89c:	ldr	r3, [sp, #52]	; 0x34
    b89e:	ldr	r0, [sp, #160]	; 0xa0
    b8a0:	add	r1, r3
    b8a2:	mov	r2, r4
    b8a4:	ldr	r3, [sp, #156]	; 0x9c
    b8a6:	blx	r3
            if (err) {
    b8a8:	cmp	r0, #0
    b8aa:	beq.w	b762 <lfs_dir_traverse+0x3a>
    b8ae:	b.n	b816 <lfs_dir_traverse+0xee>
    b8b0:	ldr.w	r9, [sp, #60]	; 0x3c
    b8b4:	ldr.w	sl, [sp, #64]	; 0x40
    b8b8:	ldr	r6, [sp, #128]	; 0x80
    b8ba:	mov	r5, fp
    b8bc:	b.n	b762 <lfs_dir_traverse+0x3a>

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
            uint16_t fromid = lfs_tag_size(tag);
    b8be:	ubfx	r0, r1, #0, #10
            uint16_t toid = lfs_tag_id(tag);
            int err = lfs_dir_traverse(lfs,
    b8c2:	ubfx	r3, r1, #10, #10
    b8c6:	ldr	r2, [sp, #48]	; 0x30
    b8c8:	str	r0, [sp, #16]
    b8ca:	subs	r3, r3, r0
    b8cc:	add	r3, r2
    b8ce:	ldr	r2, [sp, #160]	; 0xa0
    b8d0:	str	r2, [sp, #32]
    b8d2:	ldr	r2, [sp, #156]	; 0x9c
    b8d4:	str	r2, [sp, #28]
    b8d6:	ldr	r2, [pc, #60]	; (b914 <lfs_dir_traverse+0x1ec>)
    b8d8:	str	r2, [sp, #8]
    b8da:	sxth	r3, r3
    b8dc:	add.w	ip, r0, #1
    b8e0:	movs	r2, #0
    b8e2:	mov.w	lr, #536870912	; 0x20000000
    b8e6:	str	r3, [sp, #24]
    b8e8:	mov	r1, r4
    b8ea:	str.w	ip, [sp, #20]
    b8ee:	str.w	lr, [sp, #12]
    b8f2:	str	r2, [sp, #4]
    b8f4:	str	r2, [sp, #0]
    b8f6:	mov.w	r3, #4294967295
    b8fa:	ldr	r0, [sp, #44]	; 0x2c
    b8fc:	bl	b728 <lfs_dir_traverse>
                    buffer, 0, 0xffffffff, NULL, 0,
                    LFS_MKTAG(0x600, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0),
                    fromid, fromid+1, toid-fromid+diff,
                    cb, data);
            if (err) {
    b900:	cmp	r0, #0
    b902:	beq.w	b762 <lfs_dir_traverse+0x3a>
    b906:	b.n	b816 <lfs_dir_traverse+0xee>
            tag = attrs[0].tag;
            buffer = attrs[0].buffer;
            attrs += 1;
            attrcount -= 1;
        } else {
            return 0;
    b908:	movs	r0, #0
            if (err) {
                return err;
            }
        }
    }
}
    b90a:	add	sp, #92	; 0x5c
    b90c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b910:	.word	0x0000ae25
    b914:	.word	0x600ffc00
    b918:	.word	0x7ff00000

0000b91c <lfs_dir_getslice>:
}

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
    b91c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b920:	mov	sl, r1
    return lfs_tag_type1(a->tag);
}

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    b922:	ldr	r1, [r0, #60]	; 0x3c
/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
    lfs_off_t off = dir->off;
    lfs_tag_t ntag = dir->etag;
    b924:	ldr.w	r4, [sl, #16]

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
    lfs_off_t off = dir->off;
    b928:	ldr.w	r5, [sl, #12]
}

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
    b92c:	sub	sp, #36	; 0x24
    return lfs_tag_type1(a->tag);
}

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    b92e:	mov.w	r8, r1, lsr #20
    b932:	ands.w	r8, r8, #1792	; 0x700
}

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
    b936:	mov	r9, r0
    lfs_off_t off = dir->off;
    lfs_tag_t ntag = dir->etag;
    b938:	str	r4, [sp, #28]
}

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
    b93a:	mov	r6, r2
    b93c:	mov	fp, r3
    return lfs_tag_type1(a->tag);
}

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    b93e:	beq.n	b960 <lfs_dir_getslice+0x44>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    b940:	ldr	r3, [r0, #64]	; 0x40
    b942:	ldr.w	r2, [sl]
    b946:	cmp	r2, r3
    b948:	beq.n	ba1e <lfs_dir_getslice+0x102>
    b94a:	ldr	r7, [r0, #68]	; 0x44
    b94c:	ldr.w	r0, [sl, #4]
    b950:	cmp	r0, r7
    b952:	beq.n	ba1e <lfs_dir_getslice+0x102>
    b954:	cmp	r0, r3
    b956:	beq.n	ba1e <lfs_dir_getslice+0x102>
    b958:	cmp	r7, r2
    b95a:	beq.n	ba1e <lfs_dir_getslice+0x102>
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
    lfs_off_t off = dir->off;
    lfs_tag_t ntag = dir->etag;
    lfs_stag_t gdiff = 0;
    b95c:	mov.w	r8, #0
    b960:	lsrs	r3, r6, #10
static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
    return (int8_t)lfs_tag_chunk(tag);
}

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
    b962:	ubfx	r3, r3, #0, #10
    b966:	str	r3, [sp, #20]
    b968:	add.w	r3, r9, #104	; 0x68
    b96c:	str	r3, [sp, #16]
    b96e:	b.n	b988 <lfs_dir_getslice+0x6c>
static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
    return ((int32_t)(tag << 22) >> 22) == -1;
}

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
    return (tag & 0x70000000) >> 20;
    b970:	lsrs	r2, r4, #20
            return err;
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;

        if (lfs_tag_id(gmask) != 0 &&
    b972:	and.w	r1, r2, #1792	; 0x700
    b976:	cmp.w	r1, #1024	; 0x400
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
    b97a:	rsb	r1, r8, fp
            return err;
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;

        if (lfs_tag_id(gmask) != 0 &&
    b97e:	beq.n	ba3c <lfs_dir_getslice+0x120>

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
    b980:	eors	r1, r4
    b982:	ands	r1, r6
    b984:	beq.n	b9e6 <lfs_dir_getslice+0xca>
    b986:	mov	r4, r3
static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
    return !(tag & 0x80000000);
}

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
    return ((int32_t)(tag << 22) >> 22) == -1;
    b988:	sbfx	r7, r4, #0, #10
static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
}

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
    return tag & 0x000003ff;
    b98c:	cmp.w	r7, #4294967295
    b990:	ite	ne
    b992:	movne	r3, r4
    b994:	addeq	r3, r4, #1
    b996:	ubfx	r3, r3, #0, #10
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
    b99a:	add.w	r1, r3, #8
    b99e:	mvn.w	r2, #3
    b9a2:	cmp	r5, r1
    b9a4:	sub.w	r2, r2, r3
    b9a8:	bcc.n	ba68 <lfs_dir_getslice+0x14c>
        off -= lfs_tag_dsize(ntag);
    b9aa:	add	r5, r2
        lfs_tag_t tag = ntag;
        int err = lfs_bd_read(lfs,
    b9ac:	movs	r2, #4
    b9ae:	ldr.w	r3, [sl]
    b9b2:	str	r2, [sp, #12]
    b9b4:	add	r2, sp, #28
    b9b6:	str	r2, [sp, #8]
    b9b8:	str	r3, [sp, #0]
    b9ba:	str	r5, [sp, #4]
    b9bc:	movs	r3, #4
    b9be:	mov	r2, r9
    b9c0:	movs	r1, #0
    b9c2:	ldr	r0, [sp, #16]
    b9c4:	bl	afb8 <lfs_bd_read.isra.15>
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
        if (err) {
    b9c8:	cbnz	r0, ba18 <lfs_dir_getslice+0xfc>
    b9ca:	ldr	r3, [sp, #28]
            return err;
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;

        if (lfs_tag_id(gmask) != 0 &&
    b9cc:	ldr	r2, [sp, #20]
    b9ce:	rev	r3, r3
                dir->pair[0], off, &ntag, sizeof(ntag));
        if (err) {
            return err;
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
    b9d0:	eors	r3, r4
    b9d2:	bic.w	r3, r3, #2147483648	; 0x80000000
    b9d6:	str	r3, [sp, #28]

        if (lfs_tag_id(gmask) != 0 &&
    b9d8:	cmp	r2, #0
    b9da:	bne.n	b970 <lfs_dir_getslice+0x54>
    b9dc:	rsb	r1, r8, fp

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
    b9e0:	eors	r1, r4
    b9e2:	ands	r1, r6
    b9e4:	bne.n	b986 <lfs_dir_getslice+0x6a>
            if (lfs_tag_isdelete(tag)) {
    b9e6:	adds	r7, #1
    b9e8:	beq.n	ba68 <lfs_dir_getslice+0x14c>
                return LFS_ERR_NOENT;
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
            err = lfs_bd_read(lfs,
    b9ea:	ldr.w	r2, [sl]
    b9ee:	ldr	r3, [sp, #72]	; 0x48
    b9f0:	str	r2, [sp, #0]
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
    return (a > b) ? a : b;
}

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
    return (a < b) ? a : b;
    b9f2:	ldr	r2, [sp, #80]	; 0x50
    b9f4:	ldr	r0, [sp, #16]
    b9f6:	ubfx	r6, r4, #0, #10
    b9fa:	cmp	r6, r2
    b9fc:	add.w	r3, r3, #4
    ba00:	it	cs
    ba02:	movcs	r6, r2
    ba04:	add	r5, r3
    ba06:	ldr	r3, [sp, #76]	; 0x4c
    ba08:	str	r3, [sp, #8]
    ba0a:	mov	r2, r9
    ba0c:	str	r6, [sp, #12]
    ba0e:	mov	r3, r6
    ba10:	str	r5, [sp, #4]
    ba12:	bl	afb8 <lfs_bd_read.isra.15>
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
            if (err) {
    ba16:	cbz	r0, ba72 <lfs_dir_getslice+0x156>
            return tag + gdiff;
        }
    }

    return LFS_ERR_NOENT;
}
    ba18:	add	sp, #36	; 0x24
    ba1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
    lfs_off_t off = dir->off;
    lfs_tag_t ntag = dir->etag;
    lfs_stag_t gdiff = 0;

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
    ba1e:	lsrs	r3, r6, #10
    ba20:	ubfx	r2, r3, #0, #10
    ba24:	cbz	r2, ba64 <lfs_dir_getslice+0x148>
            lfs_tag_id(gmask) != 0 &&
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
    ba26:	ldr	r2, [pc, #96]	; (ba88 <lfs_dir_getslice+0x16c>)
    lfs_off_t off = dir->off;
    lfs_tag_t ntag = dir->etag;
    lfs_stag_t gdiff = 0;

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
            lfs_tag_id(gmask) != 0 &&
    ba28:	ubfx	r1, r1, #10, #10
    ba2c:	ubfx	r8, fp, #10, #10
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
    ba30:	cmp	r8, r1
    ba32:	ite	cs
    ba34:	movcs	r8, r2
    ba36:	movcc.w	r8, #0
    ba3a:	b.n	b962 <lfs_dir_getslice+0x46>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;

        if (lfs_tag_id(gmask) != 0 &&
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
    ba3c:	ubfx	lr, r1, #10, #10
    ba40:	ubfx	r0, r4, #10, #10
    ba44:	cmp	lr, r0
    ba46:	bcc.n	b980 <lfs_dir_getslice+0x64>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
    ba48:	ldr	r0, [pc, #64]	; (ba8c <lfs_dir_getslice+0x170>)
    ba4a:	ands	r0, r1
    ba4c:	orr.w	r1, r0, #1073741824	; 0x40000000
    ba50:	orr.w	r1, r1, #1048576	; 0x100000
    ba54:	cmp	r1, r4
    ba56:	beq.n	ba68 <lfs_dir_getslice+0x14c>
                // found where we were created
                return LFS_ERR_NOENT;
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    ba58:	sxtb	r2, r2
    ba5a:	add.w	r8, r8, r2, lsl #10
    ba5e:	rsb	r1, r8, fp
    ba62:	b.n	b9e0 <lfs_dir_getslice+0xc4>
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
    lfs_off_t off = dir->off;
    lfs_tag_t ntag = dir->etag;
    lfs_stag_t gdiff = 0;
    ba64:	mov	r8, r2
    ba66:	b.n	b962 <lfs_dir_getslice+0x46>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
                // found where we were created
                return LFS_ERR_NOENT;
    ba68:	mvn.w	r0, #1
            return tag + gdiff;
        }
    }

    return LFS_ERR_NOENT;
}
    ba6c:	add	sp, #36	; 0x24
    ba6e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
            if (err) {
                return err;
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
    ba72:	ldr	r3, [sp, #80]	; 0x50
    ba74:	subs	r2, r3, r6
    ba76:	ldr	r3, [sp, #76]	; 0x4c
    ba78:	mov	r1, r0
    ba7a:	adds	r0, r3, r6
    ba7c:	bl	117bc <memset>

            return tag + gdiff;
    ba80:	add.w	r0, r8, r4
    ba84:	b.n	ba18 <lfs_dir_getslice+0xfc>
    ba86:	nop
    ba88:	.word	0xfffffc00
    ba8c:	.word	0x000ffc00

0000ba90 <lfs_dir_getgstate>:
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
    ba90:	push	{r4, r5, r6, lr}
    ba92:	sub	sp, #32
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    ba94:	movs	r3, #0
    ba96:	movs	r6, #12
    ba98:	add	r5, sp, #20
    ba9a:	stmia.w	sp, {r3, r5, r6}
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
    ba9e:	mov	r4, r2
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    baa0:	ldr	r3, [pc, #44]	; (bad0 <lfs_dir_getgstate+0x40>)
    baa2:	ldr	r2, [pc, #48]	; (bad4 <lfs_dir_getgstate+0x44>)
    baa4:	bl	b91c <lfs_dir_getslice>
static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
    baa8:	cmp	r0, #0
    baaa:	blt.n	bac8 <lfs_dir_getgstate+0x38>
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
    for (int i = 0; i < 3; i++) {
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
    baac:	ldr	r6, [r4, #0]
    baae:	ldr	r5, [r4, #4]
    bab0:	ldr	r0, [r4, #8]
    bab2:	ldr	r1, [sp, #20]
    bab4:	ldr	r2, [sp, #24]
    bab6:	ldr	r3, [sp, #28]
    bab8:	eors	r1, r6
    baba:	eors	r2, r5
    babc:	eors	r3, r0
    babe:	stmia.w	r4, {r1, r2, r3}
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
        lfs_gstate_xor(gstate, &temp);
    }

    return 0;
    bac2:	movs	r0, #0
}
    bac4:	add	sp, #32
    bac6:	pop	{r4, r5, r6, pc}
static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
    bac8:	adds	r3, r0, #2
    baca:	beq.n	bac2 <lfs_dir_getgstate+0x32>
        lfs_gstate_fromle32(&temp);
        lfs_gstate_xor(gstate, &temp);
    }

    return 0;
}
    bacc:	add	sp, #32
    bace:	pop	{r4, r5, r6, pc}
    bad0:	.word	0x7ff0000c
    bad4:	.word	0x7ff00000

0000bad8 <lfs_dir_find>:
    // found a match!
    return LFS_CMP_EQ;
}

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
    bad8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    badc:	sub	sp, #52	; 0x34
    bade:	mov	r7, r0
    bae0:	str	r2, [sp, #24]
    // we reduce path to a single name if we can find it
    const char *name = *path;
    bae2:	ldr	r2, [r2, #0]
    bae4:	str	r2, [sp, #20]
    // found a match!
    return LFS_CMP_EQ;
}

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
    bae6:	mov	r6, r1
    // we reduce path to a single name if we can find it
    const char *name = *path;
    if (id) {
    bae8:	mov	r2, r3
    baea:	str	r3, [sp, #28]
    baec:	cbz	r3, baf4 <lfs_dir_find+0x1c>
        *id = 0x3ff;
    baee:	movw	r3, #1023	; 0x3ff
    baf2:	strh	r3, [r2, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
    dir->tail[0] = lfs->root[0];
    baf4:	ldr	r2, [r7, #32]
    dir->tail[1] = lfs->root[1];
    baf6:	ldr	r3, [r7, #36]	; 0x24
    if (id) {
        *id = 0x3ff;
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
    baf8:	ldr.w	r8, [pc, #340]	; bc50 <lfs_dir_find+0x178>
    dir->tail[0] = lfs->root[0];
    bafc:	str	r2, [r6, #24]
    dir->tail[1] = lfs->root[1];
    bafe:	str	r3, [r6, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
    bb00:	ldr	r4, [sp, #20]
    bb02:	ldr	r1, [pc, #320]	; (bc44 <lfs_dir_find+0x16c>)
    bb04:	mov	r0, r4
    bb06:	bl	123e0 <strspn>
    bb0a:	add	r4, r0
    bb0c:	mov	r9, r0
        lfs_size_t namelen = strcspn(name, "/");
    bb0e:	ldr	r1, [pc, #308]	; (bc44 <lfs_dir_find+0x16c>)
    bb10:	mov	r0, r4
    bb12:	bl	121b8 <strcspn>

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
    bb16:	cmp	r0, #1

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
        lfs_size_t namelen = strcspn(name, "/");
    bb18:	mov	r5, r0

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
    bb1a:	beq.n	bc0a <lfs_dir_find+0x132>
    bb1c:	cmp	r0, #2
    bb1e:	beq.n	bc1a <lfs_dir_find+0x142>
            name += namelen;
            goto nextname;
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
    bb20:	adds	r3, r4, r5
    bb22:	str	r3, [sp, #20]
    bb24:	mov	fp, r3
        lfs_size_t sufflen;
        int depth = 1;
    bb26:	mov.w	r9, #1
    bb2a:	mov	sl, r4
        while (true) {
            suffix += strspn(suffix, "/");
    bb2c:	ldr	r1, [pc, #276]	; (bc44 <lfs_dir_find+0x16c>)
    bb2e:	mov	r0, fp
    bb30:	bl	123e0 <strspn>
    bb34:	add	fp, r0
            sufflen = strcspn(suffix, "/");
    bb36:	mov	r0, fp
    bb38:	ldr	r1, [pc, #264]	; (bc44 <lfs_dir_find+0x16c>)
    bb3a:	bl	121b8 <strcspn>
            if (sufflen == 0) {
    bb3e:	mov	r4, r0
    bb40:	cbz	r0, bb6a <lfs_dir_find+0x92>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
    bb42:	cmp	r0, #2
    bb44:	beq.n	bb4e <lfs_dir_find+0x76>
                if (depth == 0) {
                    name = suffix + sufflen;
                    goto nextname;
                }
            } else {
                depth += 1;
    bb46:	add.w	r9, r9, #1
            }

            suffix += sufflen;
    bb4a:	add	fp, r4
        }
    bb4c:	b.n	bb2c <lfs_dir_find+0x54>
            sufflen = strcspn(suffix, "/");
            if (sufflen == 0) {
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
    bb4e:	mov	r2, r0
    bb50:	ldr	r1, [pc, #244]	; (bc48 <lfs_dir_find+0x170>)
    bb52:	mov	r0, fp
    bb54:	bl	11690 <memcmp>
    bb58:	cmp	r0, #0
    bb5a:	bne.n	bb46 <lfs_dir_find+0x6e>
                depth -= 1;
                if (depth == 0) {
    bb5c:	subs.w	r9, r9, #1
    bb60:	bne.n	bb4a <lfs_dir_find+0x72>
                    name = suffix + sufflen;
    bb62:	add.w	r3, fp, #2
    bb66:	str	r3, [sp, #20]
                    goto nextname;
    bb68:	b.n	bb00 <lfs_dir_find+0x28>
    bb6a:	mov	r4, sl

            suffix += sufflen;
        }

        // found path
        if (name[0] == '\0') {
    bb6c:	ldrb	r3, [r4, #0]
    bb6e:	cmp	r3, #0
    bb70:	beq.n	bbda <lfs_dir_find+0x102>

        // update what we've found so far
        *path = name;

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
    bb72:	ubfx	r3, r8, #20, #11
        if (name[0] == '\0') {
            return tag;
        }

        // update what we've found so far
        *path = name;
    bb76:	ldr	r2, [sp, #24]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
    bb78:	cmp	r3, #2
        if (name[0] == '\0') {
            return tag;
        }

        // update what we've found so far
        *path = name;
    bb7a:	str	r4, [r2, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
    bb7c:	bne.n	bc3e <lfs_dir_find+0x166>
static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
    return (int8_t)lfs_tag_chunk(tag);
}

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
    bb7e:	ubfx	r8, r8, #10, #10
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
            return LFS_ERR_NOTDIR;
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
    bb82:	movw	r3, #1023	; 0x3ff
    bb86:	cmp	r8, r3
    bb88:	bne.n	bbe2 <lfs_dir_find+0x10a>
    bb8a:	add.w	r9, r6, #24
    bb8e:	add.w	fp, sp, #36	; 0x24
    bb92:	ldr.w	sl, [pc, #192]	; bc54 <lfs_dir_find+0x17c>
    bb96:	ldr.w	r8, [sp, #28]
    bb9a:	b.n	bba4 <lfs_dir_find+0xcc>
                        lfs, name, namelen});
            if (tag < 0) {
                return tag;
            }

            if (tag) {
    bb9c:	bne.n	bc30 <lfs_dir_find+0x158>
                break;
            }

            if (!dir->split) {
    bb9e:	ldrb	r3, [r6, #23]
    bba0:	cmp	r3, #0
    bba2:	beq.n	bc34 <lfs_dir_find+0x15c>
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
    bba4:	movs	r1, #47	; 0x2f
    bba6:	mov	r0, r4
    bba8:	bl	11d3c <strchr>
            lfs_pair_fromle32(dir->tail);
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
    bbac:	cmp	r0, #0
    bbae:	ite	eq
    bbb0:	moveq	r3, r8
    bbb2:	movne	r3, #0
    bbb4:	str	r3, [sp, #4]
    bbb6:	str.w	fp, [sp, #12]
    bbba:	str.w	sl, [sp, #8]
    bbbe:	str	r5, [sp, #0]
    bbc0:	mov.w	r3, #2013265920	; 0x78000000
    bbc4:	mov	r2, r9
    bbc6:	mov	r1, r6
    bbc8:	mov	r0, r7
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
    bbca:	str	r7, [sp, #36]	; 0x24
    bbcc:	str	r4, [sp, #40]	; 0x28
    bbce:	str	r5, [sp, #44]	; 0x2c
            lfs_pair_fromle32(dir->tail);
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
    bbd0:	bl	b164 <lfs_dir_fetchmatch>
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
                        lfs, name, namelen});
            if (tag < 0) {
    bbd4:	cmp	r0, #0
    bbd6:	bge.n	bb9c <lfs_dir_find+0xc4>
    bbd8:	mov	r8, r0
            lfs_pair_fromle32(dir->tail);
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
    bbda:	mov	r0, r8
        }

        // to next name
        name += namelen;
    }
}
    bbdc:	add	sp, #52	; 0x34
    bbde:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    bbe2:	mov.w	r3, r8, lsl #10
    bbe6:	movs	r2, #8
    bbe8:	orr.w	r3, r3, #536870912	; 0x20000000
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
    bbec:	add.w	r9, r6, #24
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    bbf0:	orrs	r3, r2
    bbf2:	str	r0, [sp, #0]
    bbf4:	str	r2, [sp, #8]
    bbf6:	str.w	r9, [sp, #4]
    bbfa:	ldr	r2, [pc, #80]	; (bc4c <lfs_dir_find+0x174>)
    bbfc:	mov	r1, r6
    bbfe:	mov	r0, r7
    bc00:	bl	b91c <lfs_dir_getslice>

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
            if (res < 0) {
    bc04:	cmp	r0, #0
    bc06:	bge.n	bb8e <lfs_dir_find+0xb6>
    bc08:	b.n	bbdc <lfs_dir_find+0x104>
        // skip slashes
        name += strspn(name, "/");
        lfs_size_t namelen = strcspn(name, "/");

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
    bc0a:	ldr	r3, [sp, #20]
    bc0c:	ldrb.w	r3, [r3, r9]
    bc10:	cmp	r3, #46	; 0x2e
    bc12:	bne.n	bb20 <lfs_dir_find+0x48>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
            name += namelen;
    bc14:	adds	r3, r4, r5
    bc16:	str	r3, [sp, #20]
            goto nextname;
    bc18:	b.n	bb00 <lfs_dir_find+0x28>
        name += strspn(name, "/");
        lfs_size_t namelen = strcspn(name, "/");

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
    bc1a:	mov	r2, r0
    bc1c:	ldr	r1, [pc, #40]	; (bc48 <lfs_dir_find+0x170>)
    bc1e:	mov	r0, r4
    bc20:	bl	11690 <memcmp>
    bc24:	cmp	r0, #0
    bc26:	bne.w	bb20 <lfs_dir_find+0x48>
            name += namelen;
    bc2a:	adds	r3, r4, r5
    bc2c:	str	r3, [sp, #20]
    bc2e:	b.n	bb00 <lfs_dir_find+0x28>
    bc30:	mov	r8, r0
    bc32:	b.n	bb00 <lfs_dir_find+0x28>
            if (tag) {
                break;
            }

            if (!dir->split) {
                return LFS_ERR_NOENT;
    bc34:	mvn.w	r0, #1
        }

        // to next name
        name += namelen;
    }
}
    bc38:	add	sp, #52	; 0x34
    bc3a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        // update what we've found so far
        *path = name;

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
            return LFS_ERR_NOTDIR;
    bc3e:	mvn.w	r0, #19
    bc42:	b.n	bbdc <lfs_dir_find+0x104>
    bc44:	.word	0x00015978
    bc48:	.word	0x000158a8
    bc4c:	.word	0x700ffc00
    bc50:	.word	0x002ffc00
    bc54:	.word	0x0000c3fd

0000bc58 <lfs_dir_getinfo>:

    return 0;
}

static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
        uint16_t id, struct lfs_info *info) {
    bc58:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (id == 0x3ff) {
    bc5c:	movw	r4, #1023	; 0x3ff
    bc60:	cmp	r2, r4

    return 0;
}

static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
        uint16_t id, struct lfs_info *info) {
    bc62:	sub	sp, #24
    if (id == 0x3ff) {
    bc64:	beq.n	bcd4 <lfs_dir_getinfo+0x7c>
    bc66:	mov	r5, r3
        strcpy(info->name, "/");
        info->type = LFS_TYPE_DIR;
        return 0;
    }

    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
    bc68:	ldr	r3, [r0, #108]	; 0x6c
    bc6a:	mov	r4, r2
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
    bc6c:	lsls	r4, r4, #10
        strcpy(info->name, "/");
        info->type = LFS_TYPE_DIR;
        return 0;
    }

    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
    bc6e:	adds	r3, #1
    bc70:	orrs	r3, r4
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    bc72:	ubfx	r6, r3, #0, #10
        info->type = LFS_TYPE_DIR;
        return 0;
    }

    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
    bc76:	add.w	lr, r5, #8
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    bc7a:	str	r6, [sp, #8]
    bc7c:	movs	r6, #0
    bc7e:	ldr	r2, [pc, #112]	; (bcf0 <lfs_dir_getinfo+0x98>)
    bc80:	stmia.w	sp, {r6, lr}
    bc84:	mov	r7, r0
    bc86:	mov	r8, r1
    bc88:	bl	b91c <lfs_dir_getslice>
        return 0;
    }

    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
    if (tag < 0) {
    bc8c:	cmp	r0, #0
    bc8e:	blt.n	bcce <lfs_dir_getinfo+0x76>
        return (int)tag;
    }

    info->type = lfs_tag_type3(tag);
    bc90:	lsrs	r0, r0, #20
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    bc92:	orr.w	r3, r4, #536870912	; 0x20000000
    bc96:	add	r2, sp, #16
    bc98:	movs	r4, #8
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
    if (tag < 0) {
        return (int)tag;
    }

    info->type = lfs_tag_type3(tag);
    bc9a:	strb	r0, [r5, #0]
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    bc9c:	orrs	r3, r4
    bc9e:	str	r2, [sp, #4]
    bca0:	str	r6, [sp, #0]
    bca2:	mov	r1, r8
    bca4:	mov	r0, r7
    bca6:	str	r4, [sp, #8]
    bca8:	ldr	r2, [pc, #72]	; (bcf4 <lfs_dir_getinfo+0x9c>)
    bcaa:	bl	b91c <lfs_dir_getslice>
    info->type = lfs_tag_type3(tag);

    struct lfs_ctz ctz;
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
    if (tag < 0) {
    bcae:	cmp	r0, #0
    bcb0:	blt.n	bcce <lfs_dir_getinfo+0x76>
static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
    return (tag & 0x70000000) >> 20;
}

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
    return (tag & 0x7ff00000) >> 20;
    bcb2:	lsrs	r3, r0, #20
    if (tag < 0) {
        return (int)tag;
    }
    lfs_ctz_fromle32(&ctz);

    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
    bcb4:	movw	r2, #514	; 0x202
    bcb8:	cmp	r3, r2
static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
    return (tag & 0x70000000) >> 20;
}

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
    return (tag & 0x7ff00000) >> 20;
    bcba:	uxth	r1, r3
    if (tag < 0) {
        return (int)tag;
    }
    lfs_ctz_fromle32(&ctz);

    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
    bcbc:	beq.n	bce6 <lfs_dir_getinfo+0x8e>
        info->size = ctz.size;
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
    bcbe:	movw	r3, #513	; 0x201
    bcc2:	cmp	r1, r3
        info->size = lfs_tag_size(tag);
    bcc4:	itt	eq
    bcc6:	ubfxeq	r0, r0, #0, #10
    bcca:	streq	r0, [r5, #4]
    }

    return 0;
    bccc:	mov	r0, r6
}
    bcce:	add	sp, #24
    bcd0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
        uint16_t id, struct lfs_info *info) {
    if (id == 0x3ff) {
        // special case for root
        strcpy(info->name, "/");
    bcd4:	ldr	r1, [pc, #32]	; (bcf8 <lfs_dir_getinfo+0xa0>)
    bcd6:	ldrh	r1, [r1, #0]
    bcd8:	strh	r1, [r3, #8]
        info->type = LFS_TYPE_DIR;
    bcda:	movs	r2, #2
        return 0;
    bcdc:	movs	r0, #0
static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
        uint16_t id, struct lfs_info *info) {
    if (id == 0x3ff) {
        // special case for root
        strcpy(info->name, "/");
        info->type = LFS_TYPE_DIR;
    bcde:	strb	r2, [r3, #0]
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
        info->size = lfs_tag_size(tag);
    }

    return 0;
}
    bce0:	add	sp, #24
    bce2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return (int)tag;
    }
    lfs_ctz_fromle32(&ctz);

    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
        info->size = ctz.size;
    bce6:	ldr	r3, [sp, #20]
    bce8:	str	r3, [r5, #4]
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
        info->size = lfs_tag_size(tag);
    }

    return 0;
    bcea:	mov	r0, r6
    bcec:	b.n	bcce <lfs_dir_getinfo+0x76>
    bcee:	nop
    bcf0:	.word	0x780ffc00
    bcf4:	.word	0x700ffc00
    bcf8:	.word	0x00015978

0000bcfc <lfs_ctz_traverse.part.19>:
        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
    }
}

static int lfs_ctz_traverse(lfs_t *lfs,
    bcfc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bd00:	mov	r9, r0
    bd02:	sub	sp, #28


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
    lfs_off_t size = *off;
    lfs_off_t b = lfs->cfg->block_size - 2*4;
    bd04:	ldr	r0, [r0, #104]	; 0x68
        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
    }
}

static int lfs_ctz_traverse(lfs_t *lfs,
    bd06:	ldr	r7, [sp, #64]	; 0x40


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
    lfs_off_t size = *off;
    lfs_off_t b = lfs->cfg->block_size - 2*4;
    bd08:	ldr	r0, [r0, #28]
        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
    }
}

static int lfs_ctz_traverse(lfs_t *lfs,
    bd0a:	ldr	r6, [sp, #68]	; 0x44
    bd0c:	ldr	r5, [sp, #72]	; 0x48


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
    lfs_off_t size = *off;
    lfs_off_t b = lfs->cfg->block_size - 2*4;
    bd0e:	sub.w	r8, r0, #8
        int (*cb)(void*, lfs_block_t), void *data) {
    if (size == 0) {
        return 0;
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
    bd12:	subs	r7, #1
        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
    }
}

static int lfs_ctz_traverse(lfs_t *lfs,
    bd14:	mov	sl, r1
    bd16:	mov	fp, r2
    bd18:	mov	r4, r3

/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
    lfs_off_t size = *off;
    lfs_off_t b = lfs->cfg->block_size - 2*4;
    lfs_off_t i = size / b;
    bd1a:	udiv	r0, r7, r8
    if (i == 0) {
    bd1e:	cmp	r0, #0
    bd20:	beq.n	bd90 <lfs_ctz_traverse.part.19+0x94>
}

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
    bd22:	subs	r0, #1
    bd24:	bl	10cb8 <__popcountsi2>
        return 0;
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
    bd28:	adds	r0, #2
    bd2a:	sub.w	r7, r7, r0, lsl #2
    bd2e:	udiv	r8, r7, r8
    bd32:	add.w	r9, r9, #104	; 0x68
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});

    while (true) {
        int err = cb(data, head);
    bd36:	mov	r1, r4
    bd38:	mov	r0, r5
    bd3a:	blx	r6
        if (err) {
    bd3c:	cbnz	r0, bd8a <lfs_ctz_traverse.part.19+0x8e>
            return err;
        }

        if (index == 0) {
    bd3e:	cmp.w	r8, #0
    bd42:	beq.n	bd88 <lfs_ctz_traverse.part.19+0x8c>
            return 0;
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
    bd44:	and.w	r7, r8, #1
    bd48:	rsb	r7, r7, #2
        err = lfs_bd_read(lfs,
    bd4c:	add	r2, sp, #16
                pcache, rcache, count*sizeof(head),
                head, 0, &heads, count*sizeof(head));
    bd4e:	lsls	r3, r7, #2
            return 0;
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
        err = lfs_bd_read(lfs,
    bd50:	str	r0, [sp, #4]
    bd52:	str	r2, [sp, #8]
    bd54:	str	r4, [sp, #0]
    bd56:	str	r3, [sp, #12]
    bd58:	mov	r2, fp
    bd5a:	mov	r1, sl
    bd5c:	mov	r0, r9
    bd5e:	bl	afb8 <lfs_bd_read.isra.15>
                pcache, rcache, count*sizeof(head),
                head, 0, &heads, count*sizeof(head));
        heads[0] = lfs_fromle32(heads[0]);
        heads[1] = lfs_fromle32(heads[1]);
        if (err) {
    bd62:	cbnz	r0, bd8a <lfs_ctz_traverse.part.19+0x8e>
    bd64:	mov	r3, r0
    bd66:	subs	r4, r7, #1
    bd68:	b.n	bd72 <lfs_ctz_traverse.part.19+0x76>
            return err;
        }

        for (int i = 0; i < count-1; i++) {
            err = cb(data, heads[i]);
    bd6a:	ldr	r1, [sp, #16]
    bd6c:	blx	r6
        heads[1] = lfs_fromle32(heads[1]);
        if (err) {
            return err;
        }

        for (int i = 0; i < count-1; i++) {
    bd6e:	movs	r3, #1
            err = cb(data, heads[i]);
            if (err) {
    bd70:	cbnz	r0, bd8a <lfs_ctz_traverse.part.19+0x8e>
        heads[1] = lfs_fromle32(heads[1]);
        if (err) {
            return err;
        }

        for (int i = 0; i < count-1; i++) {
    bd72:	cmp	r3, r4
            err = cb(data, heads[i]);
    bd74:	mov	r0, r5
        heads[1] = lfs_fromle32(heads[1]);
        if (err) {
            return err;
        }

        for (int i = 0; i < count-1; i++) {
    bd76:	blt.n	bd6a <lfs_ctz_traverse.part.19+0x6e>
            if (err) {
                return err;
            }
        }

        head = heads[count-1];
    bd78:	add	r3, sp, #24
    bd7a:	add.w	r4, r3, r4, lsl #2
        index -= count;
    bd7e:	rsb	r8, r7, r8
            if (err) {
                return err;
            }
        }

        head = heads[count-1];
    bd82:	ldr.w	r4, [r4, #-8]
    bd86:	b.n	bd36 <lfs_ctz_traverse.part.19+0x3a>
        if (err) {
            return err;
        }

        if (index == 0) {
            return 0;
    bd88:	mov	r0, r8
        }

        head = heads[count-1];
        index -= count;
    }
}
    bd8a:	add	sp, #28
    bd8c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
    lfs_off_t size = *off;
    lfs_off_t b = lfs->cfg->block_size - 2*4;
    lfs_off_t i = size / b;
    if (i == 0) {
    bd90:	mov	r8, r0
    bd92:	b.n	bd32 <lfs_ctz_traverse.part.19+0x36>

0000bd94 <lfs_ctz_find.constprop.24>:
    i = (size - 4*(lfs_popc(i-1)+2)) / b;
    *off = size - b*i - 4*lfs_popc(i);
    return i;
}

static int lfs_ctz_find(lfs_t *lfs,
    bd94:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bd98:	sub	sp, #28
    bd9a:	str	r2, [sp, #20]
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
    if (size == 0) {
    bd9c:	cmp	r3, #0
    bd9e:	beq.n	be5a <lfs_ctz_find.constprop.24+0xc6>


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
    lfs_off_t size = *off;
    lfs_off_t b = lfs->cfg->block_size - 2*4;
    bda0:	ldr	r2, [r0, #104]	; 0x68
    bda2:	ldr	r2, [r2, #28]
    bda4:	mov	r7, r0
        *block = LFS_BLOCK_NULL;
        *off = 0;
        return 0;
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
    bda6:	subs	r4, r3, #1


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
    lfs_off_t size = *off;
    lfs_off_t b = lfs->cfg->block_size - 2*4;
    bda8:	sub.w	r9, r2, #8
    bdac:	mov	r8, r1
    lfs_off_t i = size / b;
    bdae:	udiv	r0, r4, r9
    if (i == 0) {
    bdb2:	cmp	r0, #0
    bdb4:	beq.n	be2a <lfs_ctz_find.constprop.24+0x96>
    bdb6:	subs	r0, #1
    bdb8:	bl	10cb8 <__popcountsi2>
        return 0;
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
    bdbc:	adds	r0, #2

/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
    lfs_off_t size = *off;
    lfs_off_t b = lfs->cfg->block_size - 2*4;
    lfs_off_t i = size / b;
    bdbe:	ldr	r3, [sp, #64]	; 0x40
    bdc0:	udiv	r6, r3, r9
    if (i == 0) {
        return 0;
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
    bdc4:	sub.w	r5, r4, r0, lsl #2
    bdc8:	udiv	r5, r5, r9
/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
    lfs_off_t size = *off;
    lfs_off_t b = lfs->cfg->block_size - 2*4;
    lfs_off_t i = size / b;
    if (i == 0) {
    bdcc:	cbnz	r6, be34 <lfs_ctz_find.constprop.24+0xa0>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
    lfs_off_t target = lfs_ctz_index(lfs, &pos);

    while (current > target) {
    bdce:	cmp	r5, r6
    bdd0:	bls.n	be6e <lfs_ctz_find.constprop.24+0xda>
    bdd2:	adds	r7, #104	; 0x68
    bdd4:	add.w	fp, sp, #20
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
    bdd8:	mov.w	sl, #4
        head = lfs_fromle32(head);
        if (err) {
            return err;
        }

        current -= 1 << skip;
    bddc:	mov.w	r9, #1
    bde0:	b.n	bde6 <lfs_ctz_find.constprop.24+0x52>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
    lfs_off_t target = lfs_ctz_index(lfs, &pos);

    while (current > target) {
    bde2:	cmp	r5, r6
    bde4:	bls.n	be6e <lfs_ctz_find.constprop.24+0xda>
}

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
    bde6:	subs	r3, r5, r6

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
    bde8:	rbit	r4, r5
}

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
    bdec:	clz	r3, r3

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
    bdf0:	clz	r4, r4
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
    return (a > b) ? a : b;
}

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
    return (a < b) ? a : b;
    bdf4:	rsb	r3, r3, #31
    bdf8:	cmp	r4, r3
    bdfa:	it	cs
    bdfc:	movcs	r4, r3
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
    bdfe:	lsls	r2, r4, #2
    be00:	ldr	r3, [sp, #20]
    be02:	str	r2, [sp, #4]
    be04:	str	r3, [sp, #0]
    be06:	str.w	sl, [sp, #12]
    be0a:	str.w	fp, [sp, #8]
    be0e:	movs	r3, #4
    be10:	mov	r2, r8
    be12:	movs	r1, #0
    be14:	mov	r0, r7
    be16:	bl	afb8 <lfs_bd_read.isra.15>
        head = lfs_fromle32(head);
        if (err) {
            return err;
        }

        current -= 1 << skip;
    be1a:	lsl.w	r4, r9, r4
    be1e:	subs	r5, r5, r4

        int err = lfs_bd_read(lfs,
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
        if (err) {
    be20:	cmp	r0, #0
    be22:	beq.n	bde2 <lfs_ctz_find.constprop.24+0x4e>
    }

    *block = head;
    *off = pos;
    return 0;
}
    be24:	add	sp, #28
    be26:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
    lfs_off_t size = *off;
    lfs_off_t b = lfs->cfg->block_size - 2*4;
    lfs_off_t i = size / b;
    be2a:	ldr	r3, [sp, #64]	; 0x40
    be2c:	udiv	r6, r3, r9
    if (i == 0) {
    be30:	cbz	r6, be6e <lfs_ctz_find.constprop.24+0xda>
        *block = LFS_BLOCK_NULL;
        *off = 0;
        return 0;
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
    be32:	mov	r5, r0
}

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
    be34:	subs	r0, r6, #1
    be36:	bl	10cb8 <__popcountsi2>
    lfs_off_t i = size / b;
    if (i == 0) {
        return 0;
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
    be3a:	ldr	r3, [sp, #64]	; 0x40
    be3c:	adds	r0, #2
    be3e:	sub.w	r6, r3, r0, lsl #2
    be42:	udiv	r6, r6, r9
    be46:	mov	r0, r6
    be48:	bl	10cb8 <__popcountsi2>
    *off = size - b*i - 4*lfs_popc(i);
    be4c:	ldr	r3, [sp, #64]	; 0x40
    be4e:	mls	r9, r6, r9, r3
    be52:	sub.w	r3, r9, r0, lsl #2
    be56:	str	r3, [sp, #64]	; 0x40
    be58:	b.n	bdce <lfs_ctz_find.constprop.24+0x3a>
static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
    if (size == 0) {
        *block = LFS_BLOCK_NULL;
    be5a:	ldr	r1, [sp, #68]	; 0x44
    be5c:	mov.w	r2, #4294967295
    be60:	str	r2, [r1, #0]
        *off = 0;
    be62:	ldr	r2, [sp, #72]	; 0x48
        return 0;
    be64:	mov	r0, r3
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
    if (size == 0) {
        *block = LFS_BLOCK_NULL;
        *off = 0;
    be66:	str	r3, [r2, #0]
    }

    *block = head;
    *off = pos;
    return 0;
}
    be68:	add	sp, #28
    be6a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        }

        current -= 1 << skip;
    }

    *block = head;
    be6e:	ldr	r2, [sp, #68]	; 0x44
    be70:	ldr	r3, [sp, #20]
    be72:	str	r3, [r2, #0]
    *off = pos;
    be74:	ldr	r3, [sp, #72]	; 0x48
    be76:	mov	r2, r3
    be78:	ldr	r3, [sp, #64]	; 0x40
    be7a:	str	r3, [r2, #0]
    return 0;
    be7c:	movs	r0, #0
}
    be7e:	add	sp, #28
    be80:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000be84 <lfs_dir_getread.constprop.25>:
    return lfs_dir_getslice(lfs, dir,
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
    be84:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    be88:	sub	sp, #28
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
    uint8_t *data = buffer;
    if (off+size > lfs->cfg->block_size) {
    be8a:	ldr	r4, [r0, #104]	; 0x68
    return lfs_dir_getslice(lfs, dir,
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
    be8c:	ldr	r6, [sp, #68]	; 0x44
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
    uint8_t *data = buffer;
    if (off+size > lfs->cfg->block_size) {
    be8e:	ldr	r5, [sp, #76]	; 0x4c
    be90:	ldr	r4, [r4, #28]
    be92:	adds	r7, r6, r5
    be94:	cmp	r7, r4
    be96:	bhi.n	bf48 <lfs_dir_getread.constprop.25+0xc4>
        return LFS_ERR_CORRUPT;
    }

    while (size > 0) {
    be98:	cmp	r5, #0
    be9a:	beq.n	bf40 <lfs_dir_getread.constprop.25+0xbc>
    be9c:	mov	r9, r3
    be9e:	mov	r5, r2
    bea0:	mov	r8, r1
    bea2:	str	r0, [sp, #20]
    bea4:	b.n	bef8 <lfs_dir_getread.constprop.25+0x74>
            diff = lfs_min(diff, rcache->off-off);
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
    bea6:	ldr	r4, [sp, #20]
    bea8:	ldr	r4, [r4, #104]	; 0x68
    beaa:	ldr.w	fp, [r4, #20]
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
    return (a > b) ? a : b;
}

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
    return (a < b) ? a : b;
    beae:	ldr.w	sl, [r4, #40]	; 0x28
}

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
    return a - (a % alignment);
    beb2:	udiv	lr, r6, fp
}

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
    return lfs_aligndown(a + alignment-1, alignment);
    beb6:	add.w	r4, fp, #4294967295
    beba:	add	r4, r9
    bebc:	add	r4, r6
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
    return (a > b) ? a : b;
}

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
    return (a < b) ? a : b;
    bebe:	udiv	ip, r4, fp
    bec2:	mls	ip, fp, ip, r4
    bec6:	rsb	ip, ip, r4
}

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
    return a - (a % alignment);
    beca:	mls	lr, fp, lr, r6
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
    return (a > b) ? a : b;
}

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
    return (a < b) ? a : b;
    bece:	cmp	ip, sl
}

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
    return a - (a % alignment);
    bed0:	rsb	r4, lr, r6
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
                lfs->cfg->cache_size);
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
    bed4:	ldr.w	lr, [r5, #12]
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
    return (a > b) ? a : b;
}

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
    return (a < b) ? a : b;
    bed8:	it	cs
    beda:	movcs	ip, sl
            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
    bedc:	mvn.w	r7, #1
    bee0:	str	r7, [r5, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
    bee2:	str.w	ip, [r5, #8]
                lfs->cfg->cache_size);
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
    bee6:	str.w	ip, [sp, #8]
            diff = lfs_min(diff, rcache->off-off);
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
    beea:	str	r4, [r5, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
                lfs->cfg->cache_size);
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
    beec:	stmia.w	sp, {r4, lr}
    bef0:	bl	b91c <lfs_dir_getslice>
                rcache->off, rcache->buffer, rcache->size);
        if (err < 0) {
    bef4:	cmp	r0, #0
    bef6:	blt.n	bf42 <lfs_dir_getread.constprop.25+0xbe>

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
    bef8:	ldr	r4, [r5, #0]
        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
                lfs->cfg->cache_size);
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
    befa:	ldr	r3, [sp, #64]	; 0x40
    befc:	ldr	r2, [pc, #80]	; (bf50 <lfs_dir_getread.constprop.25+0xcc>)
    befe:	ldr	r0, [sp, #20]

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
    bf00:	adds	r4, #2
        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
                lfs->cfg->cache_size);
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
    bf02:	mov	r1, r8

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
    bf04:	bne.n	bea6 <lfs_dir_getread.constprop.25+0x22>
                off < rcache->off + rcache->size) {
    bf06:	ldr.w	lr, [r5, #4]
    bf0a:	ldr	r4, [r5, #8]
    bf0c:	add	r4, lr

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
    bf0e:	cmp	r6, r4
    bf10:	bcs.n	bea6 <lfs_dir_getread.constprop.25+0x22>
                off < rcache->off + rcache->size) {
            if (off >= rcache->off) {
    bf12:	cmp	r6, lr
    bf14:	bcc.n	bea6 <lfs_dir_getread.constprop.25+0x22>
    bf16:	ldr	r3, [sp, #76]	; 0x4c
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
    bf18:	ldr	r1, [r5, #12]
    bf1a:	ldr	r0, [sp, #72]	; 0x48
    bf1c:	subs	r4, r4, r6
    bf1e:	cmp	r4, r3
    bf20:	it	cs
    bf22:	movcs	r4, r3
    bf24:	rsb	lr, lr, r6
    bf28:	add	r1, lr
    bf2a:	mov	r2, r4
    bf2c:	bl	e8e8 <memcpy>

                data += diff;
    bf30:	ldr	r3, [sp, #72]	; 0x48
    bf32:	add	r3, r4
    bf34:	str	r3, [sp, #72]	; 0x48
    uint8_t *data = buffer;
    if (off+size > lfs->cfg->block_size) {
        return LFS_ERR_CORRUPT;
    }

    while (size > 0) {
    bf36:	ldr	r3, [sp, #76]	; 0x4c
    bf38:	subs	r3, r3, r4
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
                memcpy(data, &rcache->buffer[off-rcache->off], diff);

                data += diff;
                off += diff;
    bf3a:	add	r6, r4
    uint8_t *data = buffer;
    if (off+size > lfs->cfg->block_size) {
        return LFS_ERR_CORRUPT;
    }

    while (size > 0) {
    bf3c:	str	r3, [sp, #76]	; 0x4c
    bf3e:	bne.n	bef8 <lfs_dir_getread.constprop.25+0x74>
        if (err < 0) {
            return err;
        }
    }

    return 0;
    bf40:	movs	r0, #0
}
    bf42:	add	sp, #28
    bf44:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
    uint8_t *data = buffer;
    if (off+size > lfs->cfg->block_size) {
        return LFS_ERR_CORRUPT;
    bf48:	mvn.w	r0, #83	; 0x53
    bf4c:	b.n	bf42 <lfs_dir_getread.constprop.25+0xbe>
    bf4e:	nop
    bf50:	.word	0xfff7fc00

0000bf54 <lfs_bd_cmp.constprop.27>:
    LFS_CMP_EQ = 0,
    LFS_CMP_LT = 1,
    LFS_CMP_GT = 2,
};

static int lfs_bd_cmp(lfs_t *lfs,
    bf54:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bf58:	sub	sp, #36	; 0x24
    bf5a:	ldr	r5, [sp, #80]	; 0x50
    bf5c:	ldr	r7, [sp, #76]	; 0x4c
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
    const uint8_t *data = buffer;

    for (lfs_off_t i = 0; i < size; i++) {
    bf5e:	cbz	r5, bfb8 <lfs_bd_cmp.constprop.27+0x64>
    bf60:	str	r3, [sp, #20]
    bf62:	ldr	r3, [sp, #72]	; 0x48
    bf64:	mov	r4, r7
    bf66:	mov	r9, r1
    bf68:	add	r7, r5
    bf6a:	add.w	r6, r0, #104	; 0x68
    bf6e:	mov	r5, r2
    bf70:	rsb	r8, r4, r3
    bf74:	add.w	fp, sp, #31
        uint8_t dat;
        int err = lfs_bd_read(lfs,
    bf78:	mov.w	sl, #1
    bf7c:	b.n	bf8e <lfs_bd_cmp.constprop.27+0x3a>
                block, off+i, &dat, 1);
        if (err) {
            return err;
        }

        if (dat != data[i]) {
    bf7e:	ldrb.w	r2, [r4], #1
    bf82:	ldrb.w	r3, [sp, #31]
    bf86:	cmp	r2, r3
    bf88:	bne.n	bfc0 <lfs_bd_cmp.constprop.27+0x6c>
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
    const uint8_t *data = buffer;

    for (lfs_off_t i = 0; i < size; i++) {
    bf8a:	cmp	r4, r7
    bf8c:	beq.n	bfb8 <lfs_bd_cmp.constprop.27+0x64>
        uint8_t dat;
        int err = lfs_bd_read(lfs,
    bf8e:	ldr	r2, [sp, #20]
    bf90:	str.w	sl, [sp, #12]
    bf94:	add.w	r3, r8, r4
    bf98:	stmia.w	sp, {r2, r3}
    bf9c:	str.w	fp, [sp, #8]
    bfa0:	mov	r3, r5
    bfa2:	mov	r2, r9
    bfa4:	movs	r1, #0
    bfa6:	mov	r0, r6
    bfa8:	bl	afb8 <lfs_bd_read.isra.15>
    bfac:	subs	r5, #1
                pcache, rcache, hint-i,
                block, off+i, &dat, 1);
        if (err) {
    bfae:	cmp	r0, #0
    bfb0:	beq.n	bf7e <lfs_bd_cmp.constprop.27+0x2a>
            return (dat < data[i]) ? LFS_CMP_LT : LFS_CMP_GT;
        }
    }

    return LFS_CMP_EQ;
}
    bfb2:	add	sp, #36	; 0x24
    bfb4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (dat != data[i]) {
            return (dat < data[i]) ? LFS_CMP_LT : LFS_CMP_GT;
        }
    }

    return LFS_CMP_EQ;
    bfb8:	movs	r0, #0
}
    bfba:	add	sp, #36	; 0x24
    bfbc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (err) {
            return err;
        }

        if (dat != data[i]) {
            return (dat < data[i]) ? LFS_CMP_LT : LFS_CMP_GT;
    bfc0:	bhi.n	bfca <lfs_bd_cmp.constprop.27+0x76>
    bfc2:	movs	r0, #2
        }
    }

    return LFS_CMP_EQ;
}
    bfc4:	add	sp, #36	; 0x24
    bfc6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (err) {
            return err;
        }

        if (dat != data[i]) {
            return (dat < data[i]) ? LFS_CMP_LT : LFS_CMP_GT;
    bfca:	movs	r0, #1
        }
    }

    return LFS_CMP_EQ;
}
    bfcc:	add	sp, #36	; 0x24
    bfce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bfd2:	nop

0000bfd4 <lfs_bd_flush>:

static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
    bfd4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bfd8:	mov	r6, r1
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
    bfda:	ldr	r1, [r1, #0]
    bfdc:	adds	r4, r1, #2
    bfde:	cmp	r4, #1

    return LFS_CMP_EQ;
}

static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
    bfe0:	sub	sp, #20
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
    bfe2:	bls.n	c056 <lfs_bd_flush+0x82>
    bfe4:	mov	r7, r0
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
    bfe6:	ldr	r0, [r0, #104]	; 0x68
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
    return a - (a % alignment);
}

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
    return lfs_aligndown(a + alignment-1, alignment);
    bfe8:	ldr	r5, [r6, #8]
    bfea:	ldr.w	lr, [r0, #24]
    bfee:	add	r5, lr
    bff0:	subs	r4, r5, #1
    return (a < b) ? a : b;
}

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
    return a - (a % alignment);
    bff2:	udiv	r5, r4, lr
    bff6:	mls	r5, lr, r5, r4
    bffa:	subs	r4, r4, r5
    bffc:	mov	r9, r3
    bffe:	mov	r8, r2
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
    c000:	ldr	r3, [r6, #12]
    c002:	ldr	r2, [r6, #4]
    c004:	str	r4, [sp, #0]
    c006:	ldr	r5, [r0, #8]
    c008:	blx	r5
                pcache->off, pcache->buffer, diff);
        LFS_ASSERT(err <= 0);
        if (err) {
    c00a:	cbnz	r0, c050 <lfs_bd_flush+0x7c>
            return err;
        }

        if (validate) {
    c00c:	cmp.w	r9, #0
    c010:	beq.n	c03c <lfs_bd_flush+0x68>
/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
    c012:	mov.w	r3, #4294967295
    c016:	str.w	r3, [r8]
        }

        if (validate) {
            // check data on disk
            lfs_cache_drop(lfs, rcache);
            int res = lfs_bd_cmp(lfs,
    c01a:	ldmia.w	r6, {r3, r5}
    c01e:	ldr	r0, [r6, #12]
    c020:	str	r0, [sp, #4]
    c022:	str	r4, [sp, #8]
    c024:	mov	r2, r4
    c026:	mov	r1, r8
    c028:	str	r5, [sp, #0]
    c02a:	mov	r0, r7
    c02c:	bl	bf54 <lfs_bd_cmp.constprop.27>
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
            if (res < 0) {
    c030:	cmp	r0, #0
    c032:	blt.n	c050 <lfs_bd_flush+0x7c>
                return res;
            }

            if (res != LFS_CMP_EQ) {
                return LFS_ERR_CORRUPT;
    c034:	it	ne
    c036:	mvnne.w	r0, #83	; 0x53
                    pcache->block, pcache->off, pcache->buffer, diff);
            if (res < 0) {
                return res;
            }

            if (res != LFS_CMP_EQ) {
    c03a:	bne.n	c050 <lfs_bd_flush+0x7c>
    rcache->block = LFS_BLOCK_NULL;
}

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
    c03c:	ldr	r3, [r7, #104]	; 0x68
    c03e:	ldr	r0, [r6, #12]
    c040:	ldr	r2, [r3, #40]	; 0x28
    c042:	movs	r1, #255	; 0xff
    c044:	bl	117bc <memset>
    pcache->block = LFS_BLOCK_NULL;
    c048:	mov.w	r3, #4294967295
    c04c:	str	r3, [r6, #0]
        }

        lfs_cache_zero(lfs, pcache);
    }

    return 0;
    c04e:	movs	r0, #0
}
    c050:	add	sp, #20
    c052:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        }

        lfs_cache_zero(lfs, pcache);
    }

    return 0;
    c056:	movs	r0, #0
}
    c058:	add	sp, #20
    c05a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c05e:	nop

0000c060 <lfs_bd_prog>:
}

static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
    c060:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c064:	sub	sp, #12
    c066:	ldr.w	r8, [sp, #60]	; 0x3c
    c06a:	ldr	r6, [sp, #48]	; 0x30
    c06c:	ldr	r5, [sp, #52]	; 0x34
    c06e:	ldr.w	sl, [sp, #56]	; 0x38
    const uint8_t *data = buffer;
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
    LFS_ASSERT(off + size <= lfs->cfg->block_size);

    while (size > 0) {
    c072:	cmp.w	r8, #0
    c076:	beq.n	c0ec <lfs_bd_prog+0x8c>
    c078:	mov	r4, r1
    c07a:	stmia.w	sp, {r2, r3}
    c07e:	mov	r9, r0
    c080:	ldr	r1, [r0, #104]	; 0x68
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
        pcache->size = 0;
    c082:	movs	r7, #0
    c084:	b.n	c098 <lfs_bd_prog+0x38>
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
    c086:	ldr	r2, [r1, #24]
    c088:	udiv	r3, r5, r2
    c08c:	mls	r3, r2, r3, r5
    c090:	subs	r3, r5, r3
        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
    c092:	str	r6, [r4, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
        pcache->size = 0;
    c094:	str	r7, [r4, #8]
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
    c096:	str	r3, [r4, #4]
    const uint8_t *data = buffer;
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
    LFS_ASSERT(off + size <= lfs->cfg->block_size);

    while (size > 0) {
        if (block == pcache->block &&
    c098:	ldr	r3, [r4, #0]
    c09a:	cmp	r3, r6
    c09c:	bne.n	c086 <lfs_bd_prog+0x26>
                off >= pcache->off &&
    c09e:	ldr	r3, [r4, #4]
    const uint8_t *data = buffer;
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
    LFS_ASSERT(off + size <= lfs->cfg->block_size);

    while (size > 0) {
        if (block == pcache->block &&
    c0a0:	cmp	r5, r3
    c0a2:	bcc.n	c086 <lfs_bd_prog+0x26>
                off >= pcache->off &&
                off < pcache->off + lfs->cfg->cache_size) {
    c0a4:	ldr	r2, [r1, #40]	; 0x28
    c0a6:	add.w	fp, r3, r2
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
    LFS_ASSERT(off + size <= lfs->cfg->block_size);

    while (size > 0) {
        if (block == pcache->block &&
                off >= pcache->off &&
    c0aa:	cmp	r5, fp
    c0ac:	bcs.n	c086 <lfs_bd_prog+0x26>
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
    return (a > b) ? a : b;
}

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
    return (a < b) ? a : b;
    c0ae:	rsb	fp, r5, fp
    c0b2:	cmp	fp, r8
                off < pcache->off + lfs->cfg->cache_size) {
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
    c0b4:	ldr	r0, [r4, #12]
    c0b6:	it	cs
    c0b8:	movcs	fp, r8
    c0ba:	subs	r3, r5, r3
    c0bc:	mov	r1, sl
    c0be:	add	r0, r3
    c0c0:	mov	r2, fp
    c0c2:	bl	e8e8 <memcpy>
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
    return (a > b) ? a : b;
    c0c6:	ldr	r3, [r4, #4]
    c0c8:	ldr	r2, [r4, #8]
            data += diff;
            off += diff;
            size -= diff;

            pcache->size = lfs_max(pcache->size, off - pcache->off);
            if (pcache->size == lfs->cfg->cache_size) {
    c0ca:	ldr.w	r1, [r9, #104]	; 0x68
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
            memcpy(&pcache->buffer[off-pcache->off], data, diff);

            data += diff;
            off += diff;
    c0ce:	add	r5, fp
    c0d0:	subs	r3, r5, r3
            size -= diff;

            pcache->size = lfs_max(pcache->size, off - pcache->off);
            if (pcache->size == lfs->cfg->cache_size) {
    c0d2:	ldr	r1, [r1, #40]	; 0x28
    c0d4:	cmp	r3, r2
    c0d6:	it	cc
    c0d8:	movcc	r3, r2
    c0da:	cmp	r3, r1
                    lfs->cfg->cache_size - (off-pcache->off));
            memcpy(&pcache->buffer[off-pcache->off], data, diff);

            data += diff;
            off += diff;
            size -= diff;
    c0dc:	rsb	r8, fp, r8
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
            memcpy(&pcache->buffer[off-pcache->off], data, diff);

            data += diff;
    c0e0:	add	sl, fp
            off += diff;
            size -= diff;

            pcache->size = lfs_max(pcache->size, off - pcache->off);
    c0e2:	str	r3, [r4, #8]
            if (pcache->size == lfs->cfg->cache_size) {
    c0e4:	beq.n	c0f4 <lfs_bd_prog+0x94>
        const void *buffer, lfs_size_t size) {
    const uint8_t *data = buffer;
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
    LFS_ASSERT(off + size <= lfs->cfg->block_size);

    while (size > 0) {
    c0e6:	cmp.w	r8, #0
    c0ea:	bne.n	c106 <lfs_bd_prog+0xa6>
        pcache->block = block;
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
        pcache->size = 0;
    }

    return 0;
    c0ec:	movs	r0, #0
}
    c0ee:	add	sp, #12
    c0f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            size -= diff;

            pcache->size = lfs_max(pcache->size, off - pcache->off);
            if (pcache->size == lfs->cfg->cache_size) {
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
    c0f4:	ldmia.w	sp, {r2, r3}
    c0f8:	mov	r1, r4
    c0fa:	mov	r0, r9
    c0fc:	bl	bfd4 <lfs_bd_flush>
                if (err) {
    c100:	cmp	r0, #0
    c102:	beq.n	c0e6 <lfs_bd_prog+0x86>
    c104:	b.n	c0ee <lfs_bd_prog+0x8e>
    c106:	ldr.w	r1, [r9, #104]	; 0x68
    c10a:	b.n	c098 <lfs_bd_prog+0x38>

0000c10c <lfs_dir_commitprog>:
    lfs_off_t begin;
    lfs_off_t end;
};

static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
    c10c:	push	{r4, r5, r6, r7, lr}
    c10e:	mov	r4, r1
    c110:	sub	sp, #20
    int err = lfs_bd_prog(lfs,
    c112:	ldr	r1, [r1, #4]
    lfs_off_t begin;
    lfs_off_t end;
};

static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
    c114:	mov	r5, r3
    int err = lfs_bd_prog(lfs,
    c116:	ldr	r3, [r4, #0]
    c118:	str	r3, [sp, #0]
    c11a:	str	r2, [sp, #8]
    c11c:	str	r1, [sp, #4]
    lfs_off_t begin;
    lfs_off_t end;
};

static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
    c11e:	mov	r7, r2
    int err = lfs_bd_prog(lfs,
    c120:	str	r5, [sp, #12]
    lfs_off_t begin;
    lfs_off_t end;
};

static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
    c122:	mov	r2, r0
    int err = lfs_bd_prog(lfs,
    c124:	add.w	r1, r0, #16
    c128:	movs	r3, #0
    c12a:	bl	c060 <lfs_bd_prog>
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
    c12e:	mov	r6, r0
    c130:	cbnz	r0, c144 <lfs_dir_commitprog+0x38>
        return err;
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
    c132:	mov	r2, r5
    c134:	mov	r1, r7
    c136:	ldr	r0, [r4, #12]
    c138:	bl	e8b0 <lfs_crc>
    commit->off += size;
    c13c:	ldr	r3, [r4, #4]
            (const uint8_t*)buffer, size);
    if (err) {
        return err;
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
    c13e:	str	r0, [r4, #12]
    commit->off += size;
    c140:	add	r5, r3
    c142:	str	r5, [r4, #4]
    return 0;
}
    c144:	mov	r0, r6
    c146:	add	sp, #20
    c148:	pop	{r4, r5, r6, r7, pc}
    c14a:	nop

0000c14c <lfs_dir_commitattr>:

static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
    c14c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
}

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
    return tag & 0x000003ff;
    c150:	sbfx	r5, r2, #0, #10

static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
    if (commit->off + dsize > commit->end) {
    c154:	ldr	r7, [r1, #4]
    c156:	ldr	r4, [r1, #20]
static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
}

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
    return tag & 0x000003ff;
    c158:	cmp.w	r5, #4294967295
    c15c:	ite	ne
    c15e:	movne	r5, r2
    c160:	addeq	r5, r2, #1
    c162:	ubfx	r5, r5, #0, #10

static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
    if (commit->off + dsize > commit->end) {
    c166:	adds	r7, #4
    c168:	add.w	lr, r7, r5
    c16c:	cmp	lr, r4
    commit->off += size;
    return 0;
}

static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
    c16e:	sub	sp, #36	; 0x24
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
    if (commit->off + dsize > commit->end) {
    c170:	bhi.n	c1fc <lfs_dir_commitattr+0xb0>
    c172:	mov	r8, r3
static inline uint32_t lfs_frombe32(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
    c174:	ldr	r3, [r1, #8]
    c176:	mov	r4, r2
        return LFS_ERR_NOSPC;
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
    c178:	bic.w	r2, r2, #2147483648	; 0x80000000
    c17c:	eors	r3, r2
    c17e:	str	r2, [sp, #20]
    c180:	add	r2, sp, #32
    c182:	rev	r3, r3
    c184:	str.w	r3, [r2, #-4]!
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
    c188:	movs	r3, #4
    c18a:	mov	r6, r1
    c18c:	mov	r7, r0
    c18e:	bl	c10c <lfs_dir_commitprog>
    if (err) {
    c192:	cbnz	r0, c1ac <lfs_dir_commitattr+0x60>
        return err;
    }

    if (!(tag & 0x80000000)) {
    c194:	cmp	r4, #0
    c196:	blt.n	c1b2 <lfs_dir_commitattr+0x66>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
    c198:	mov	r3, r5
    c19a:	mov	r2, r8
    c19c:	mov	r0, r7
    c19e:	mov	r1, r6
    c1a0:	bl	c10c <lfs_dir_commitprog>
        if (err) {
    c1a4:	cbnz	r0, c1ac <lfs_dir_commitattr+0x60>
                return err;
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
    c1a6:	ldr	r3, [sp, #20]
    c1a8:	str	r3, [r6, #8]
    return 0;
    c1aa:	movs	r0, #0
}
    c1ac:	add	sp, #36	; 0x24
    c1ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return err;
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
    c1b2:	cmp	r5, #0
    c1b4:	beq.n	c1a6 <lfs_dir_commitattr+0x5a>
    c1b6:	mov	r4, r0
    c1b8:	add.w	fp, r7, #104	; 0x68
    c1bc:	add.w	r9, sp, #27
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
    c1c0:	mov.w	sl, #1
    c1c4:	b.n	c1d4 <lfs_dir_commitattr+0x88>
                    disk->block, disk->off+i, &dat, 1);
            if (err) {
                return err;
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
    c1c6:	mov	r0, r7
    c1c8:	bl	c10c <lfs_dir_commitprog>
            if (err) {
    c1cc:	cmp	r0, #0
    c1ce:	bne.n	c1ac <lfs_dir_commitattr+0x60>
            return err;
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
    c1d0:	cmp	r4, r5
    c1d2:	beq.n	c1a6 <lfs_dir_commitattr+0x5a>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
    c1d4:	ldmia.w	r8, {r2, r3}
    c1d8:	add	r3, r4
    c1da:	stmia.w	sp, {r2, r3, r9}
    c1de:	movs	r1, #0
    c1e0:	subs	r3, r5, r4
    c1e2:	mov	r2, r7
    c1e4:	str.w	sl, [sp, #12]
    c1e8:	mov	r0, fp
    c1ea:	bl	afb8 <lfs_bd_read.isra.15>
                    disk->block, disk->off+i, &dat, 1);
            if (err) {
                return err;
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
    c1ee:	movs	r3, #1
    c1f0:	mov	r2, r9
    c1f2:	mov	r1, r6
            return err;
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
    c1f4:	add	r4, r3
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
                    disk->block, disk->off+i, &dat, 1);
            if (err) {
    c1f6:	cmp	r0, #0
    c1f8:	beq.n	c1c6 <lfs_dir_commitattr+0x7a>
    c1fa:	b.n	c1ac <lfs_dir_commitattr+0x60>
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
    if (commit->off + dsize > commit->end) {
        return LFS_ERR_NOSPC;
    c1fc:	mvn.w	r0, #27
    c200:	b.n	c1ac <lfs_dir_commitattr+0x60>
    c202:	nop

0000c204 <lfs_dir_commit_commit>:
struct lfs_dir_commit_commit {
    lfs_t *lfs;
    struct lfs_commit *commit;
};

static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
    c204:	push	{r4}
    c206:	mov	r4, r0
    struct lfs_dir_commit_commit *commit = p;
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
    c208:	mov	r3, r2
    c20a:	ldr	r0, [r0, #0]
    c20c:	mov	r2, r1
    c20e:	ldr	r1, [r4, #4]
}
    c210:	ldr.w	r4, [sp], #4
    struct lfs_commit *commit;
};

static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
    struct lfs_dir_commit_commit *commit = p;
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
    c214:	b.w	c14c <lfs_dir_commitattr>

0000c218 <lfs_dir_commitcrc>:

    commit->ptag = tag & 0x7fffffff;
    return 0;
}

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
    c218:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const lfs_off_t off1 = commit->off;
    const uint32_t crc1 = commit->crc;
    // align to program units
    const lfs_off_t end = lfs_alignup(off1 + 2*sizeof(uint32_t),
    c21c:	ldr	r3, [r0, #104]	; 0x68
    commit->ptag = tag & 0x7fffffff;
    return 0;
}

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
    const lfs_off_t off1 = commit->off;
    c21e:	ldr	r2, [r1, #4]

    commit->ptag = tag & 0x7fffffff;
    return 0;
}

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
    c220:	mov	r4, r1
    c222:	sub	sp, #60	; 0x3c
    const lfs_off_t off1 = commit->off;
    const uint32_t crc1 = commit->crc;
    // align to program units
    const lfs_off_t end = lfs_alignup(off1 + 2*sizeof(uint32_t),
    c224:	ldr	r1, [r3, #24]
    return 0;
}

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
    const lfs_off_t off1 = commit->off;
    const uint32_t crc1 = commit->crc;
    c226:	ldr	r3, [r4, #12]
    c228:	str	r3, [sp, #36]	; 0x24
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
    return a - (a % alignment);
}

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
    return lfs_aligndown(a + alignment-1, alignment);
    c22a:	adds	r3, r2, r1
    c22c:	adds	r3, #7

    commit->ptag = tag & 0x7fffffff;
    return 0;
}

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
    c22e:	mov	r5, r0
    const lfs_off_t off1 = commit->off;
    c230:	str	r2, [sp, #28]
    c232:	mov	r0, r2
    return (a < b) ? a : b;
}

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
    return a - (a % alignment);
    c234:	udiv	r2, r3, r1
    c238:	mls	r2, r1, r2, r3
    c23c:	rsb	fp, r2, r3
            lfs->cfg->prog_size);

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
    c240:	cmp	r0, fp
    c242:	it	cs
    c244:	addcs.w	sl, r5, #16
    c248:	bcs.n	c32e <lfs_dir_commitcrc+0x116>
    c24a:	add.w	r3, r5, #104	; 0x68
    c24e:	str	r3, [sp, #24]
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
    return (a > b) ? a : b;
}

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
    return (a < b) ? a : b;
    c250:	sub.w	r3, fp, #8
    c254:	ldr	r7, [sp, #28]
    c256:	str	r3, [sp, #32]
        if (noff < end) {
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
    c258:	mov.w	r9, #4294967295
    c25c:	mov	r8, r5
    c25e:	b.n	c27c <lfs_dir_commitcrc+0x64>
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
            return err;
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
    c260:	ldr	r3, [sp, #44]	; 0x2c
    c262:	ldr	r7, [r4, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
        commit->crc = 0xffffffff; // reset crc for next "commit"
    c264:	str.w	r9, [r4, #12]
        if (err) {
            return err;
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
    c268:	eor.w	r6, r3, r6, lsl #31
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
            return err;
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
    c26c:	adds	r7, #4
    c26e:	ubfx	r3, r3, #0, #10
    c272:	add	r7, r3
            lfs->cfg->prog_size);

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
    c274:	cmp	fp, r7
        if (err) {
            return err;
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
    c276:	str	r6, [r4, #8]
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
            return err;
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
    c278:	str	r7, [r4, #4]
            lfs->cfg->prog_size);

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
    c27a:	bls.n	c32c <lfs_dir_commitcrc+0x114>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
        int err = lfs_bd_read(lfs,
    c27c:	mov.w	lr, #4

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
    c280:	add	r7, lr
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
    c282:	rsb	r6, r7, fp
    c286:	movw	r5, #1022	; 0x3fe
    c28a:	cmp	r6, r5
    c28c:	ite	ls
    c28e:	addls	r6, r7, r6
    c290:	addhi	r6, r7, r5
        bool reset = ~lfs_frombe32(tag) >> 31;
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
    c292:	add	r3, sp, #56	; 0x38
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
        if (noff < end) {
    c294:	cmp	r6, fp
        bool reset = ~lfs_frombe32(tag) >> 31;
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
    c296:	str	r3, [sp, #20]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
        footer[1] = lfs_tole32(commit->crc);
        err = lfs_bd_prog(lfs,
    c298:	add.w	sl, r8, #16
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
        int err = lfs_bd_read(lfs,
    c29c:	mov	r3, lr
    c29e:	mov	r2, r8
    c2a0:	mov.w	r1, #0
    c2a4:	ldr	r0, [sp, #24]
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
        if (noff < end) {
    c2a6:	bcs.n	c2b0 <lfs_dir_commitcrc+0x98>
    c2a8:	ldr	r5, [sp, #32]
    c2aa:	cmp	r6, r5
    c2ac:	it	cs
    c2ae:	movcs	r6, r5
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
        int err = lfs_bd_read(lfs,
    c2b0:	ldr	r5, [r4, #0]
    c2b2:	str	r5, [sp, #0]
    c2b4:	add	r5, sp, #44	; 0x2c
    c2b6:	str.w	lr, [sp, #12]
    c2ba:	str	r5, [sp, #8]
    c2bc:	str	r6, [sp, #4]
        if (noff < end) {
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
    c2be:	str.w	r9, [sp, #44]	; 0x2c
        int err = lfs_bd_read(lfs,
    c2c2:	bl	afb8 <lfs_bd_read.isra.15>
            return err;
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
    c2c6:	subs	r7, r6, r7
    c2c8:	orr.w	r7, r7, #1044480	; 0xff000
    c2cc:	orr.w	r7, r7, #3072	; 0xc00

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
    c2d0:	movs	r2, #4
        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
        int err = lfs_bd_read(lfs,
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
    c2d2:	cbz	r0, c2da <lfs_dir_commitcrc+0xc2>
    c2d4:	cmn.w	r0, #84	; 0x54
    c2d8:	bne.n	c326 <lfs_dir_commitcrc+0x10e>
static inline uint32_t lfs_frombe32(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
    c2da:	ldr	r6, [sp, #44]	; 0x2c
    c2dc:	ldr	r3, [r4, #8]
        bool reset = ~lfs_frombe32(tag) >> 31;
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
    c2de:	ldr	r0, [sp, #20]
    c2e0:	rev	r6, r6
        if (err && err != LFS_ERR_CORRUPT) {
            return err;
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
    c2e2:	mvns	r6, r6
    c2e4:	lsrs	r6, r6, #31
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
    c2e6:	add.w	r1, r6, #1280	; 0x500
    c2ea:	orr.w	r7, r7, r1, lsl #20
    c2ee:	eors	r3, r7
    c2f0:	rev	r3, r3

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
    c2f2:	str.w	r3, [r0, #-8]!
    c2f6:	mov	r5, r0
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
    c2f8:	mov	r1, r5
    c2fa:	ldr	r0, [r4, #12]
            return err;
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
    c2fc:	str	r7, [sp, #44]	; 0x2c

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
    c2fe:	bl	e8b0 <lfs_crc>
        footer[1] = lfs_tole32(commit->crc);
        err = lfs_bd_prog(lfs,
    c302:	ldr	r2, [r4, #4]
    c304:	ldr	r3, [r4, #0]
    c306:	str	r5, [sp, #8]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
    c308:	mov	r7, r0
        footer[1] = lfs_tole32(commit->crc);
        err = lfs_bd_prog(lfs,
    c30a:	movs	r1, #8
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
    c30c:	str	r7, [r4, #12]
        footer[1] = lfs_tole32(commit->crc);
        err = lfs_bd_prog(lfs,
    c30e:	mov	r0, r8
    c310:	str	r1, [sp, #12]
    c312:	str	r2, [sp, #4]
    c314:	str	r3, [sp, #0]
    c316:	mov	r2, r8
    c318:	movs	r3, #0
    c31a:	mov	r1, sl

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
        footer[1] = lfs_tole32(commit->crc);
    c31c:	str	r7, [sp, #52]	; 0x34
        err = lfs_bd_prog(lfs,
    c31e:	bl	c060 <lfs_bd_prog>
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
    c322:	cmp	r0, #0
    c324:	beq.n	c260 <lfs_dir_commitcrc+0x48>
        }
        noff = off + sizeof(uint32_t);
    }

    return 0;
}
    c326:	add	sp, #60	; 0x3c
    c328:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c32c:	mov	r5, r8
/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
    c32e:	mov.w	r3, #4294967295
    c332:	str	r3, [r5, #0]

static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
    lfs_cache_drop(lfs, rcache);

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
    c334:	mov	r1, sl
    c336:	movs	r3, #0
    c338:	mov	r2, r5
    c33a:	mov	r0, r5
    c33c:	bl	bfd4 <lfs_bd_flush>
    if (err) {
    c340:	cmp	r0, #0
    c342:	bne.n	c326 <lfs_dir_commitcrc+0x10e>
        return err;
    }

    err = lfs->cfg->sync(lfs->cfg);
    c344:	ldr	r0, [r5, #104]	; 0x68
    c346:	ldr	r3, [r0, #16]
    c348:	blx	r3
        commit->crc = 0xffffffff; // reset crc for next "commit"
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
    if (err) {
    c34a:	cmp	r0, #0
    c34c:	bne.n	c326 <lfs_dir_commitcrc+0x10e>
        return err;
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
    c34e:	ldr	r6, [r4, #16]
    lfs_off_t noff = off1 + sizeof(uint32_t);
    c350:	ldr	r3, [sp, #28]
    while (off < end) {
    c352:	cmp	fp, r6
        return err;
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
    lfs_off_t noff = off1 + sizeof(uint32_t);
    c354:	add.w	r3, r3, #4
    c358:	str	r3, [sp, #24]
    while (off < end) {
    c35a:	bls.n	c3f0 <lfs_dir_commitcrc+0x1d8>
    c35c:	add.w	r3, r5, #104	; 0x68
    c360:	str.w	fp, [sp, #32]
    c364:	str	r3, [sp, #20]
    c366:	mov	sl, r5
    c368:	mov	fp, r4
        uint32_t crc = 0xffffffff;
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
    c36a:	ldr	r3, [sp, #24]
    c36c:	add.w	r9, r3, #4
    c370:	cmp	r9, r6
    c372:	bls.n	c3f4 <lfs_dir_commitcrc+0x1dc>
    c374:	rsb	r7, r6, r9
    c378:	mov.w	r8, #4294967295
                return LFS_ERR_CORRUPT;
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
    c37c:	add	r4, sp, #48	; 0x30
    c37e:	b.n	c38c <lfs_dir_commitcrc+0x174>
                    commit->block, i, &dat, 1);
            if (err) {
                return err;
            }

            crc = lfs_crc(crc, &dat, 1);
    c380:	mov	r0, r8
    c382:	bl	e8b0 <lfs_crc>
    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
    lfs_off_t noff = off1 + sizeof(uint32_t);
    while (off < end) {
        uint32_t crc = 0xffffffff;
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
    c386:	cmp	r9, r6
                    commit->block, i, &dat, 1);
            if (err) {
                return err;
            }

            crc = lfs_crc(crc, &dat, 1);
    c388:	mov	r8, r0
    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
    lfs_off_t noff = off1 + sizeof(uint32_t);
    while (off < end) {
        uint32_t crc = 0xffffffff;
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
    c38a:	bls.n	c3c4 <lfs_dir_commitcrc+0x1ac>
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
    c38c:	ldr	r5, [sp, #28]
                return LFS_ERR_CORRUPT;
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
    c38e:	ldr	r0, [sp, #20]
    while (off < end) {
        uint32_t crc = 0xffffffff;
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
    c390:	cmp	r5, r6
                return LFS_ERR_CORRUPT;
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
    c392:	mov	r3, r7
    c394:	mov	r2, sl
    c396:	mov.w	r1, #0
    c39a:	add.w	r7, r7, #4294967295
    while (off < end) {
        uint32_t crc = 0xffffffff;
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
    c39e:	bne.n	c3a6 <lfs_dir_commitcrc+0x18e>
    c3a0:	ldr	r5, [sp, #36]	; 0x24
    c3a2:	cmp	r5, r8
    c3a4:	bne.n	c3f4 <lfs_dir_commitcrc+0x1dc>
                return LFS_ERR_CORRUPT;
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
    c3a6:	ldr.w	r5, [fp]
    c3aa:	str	r5, [sp, #0]
    c3ac:	movs	r5, #1
    c3ae:	str	r6, [sp, #4]
    c3b0:	str	r5, [sp, #12]
    c3b2:	str	r4, [sp, #8]
    c3b4:	bl	afb8 <lfs_bd_read.isra.15>
    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
    lfs_off_t noff = off1 + sizeof(uint32_t);
    while (off < end) {
        uint32_t crc = 0xffffffff;
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
    c3b8:	add	r6, r5
                    commit->block, i, &dat, 1);
            if (err) {
                return err;
            }

            crc = lfs_crc(crc, &dat, 1);
    c3ba:	mov	r2, r5
    c3bc:	mov	r1, r4
            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
                    commit->block, i, &dat, 1);
            if (err) {
    c3be:	cmp	r0, #0
    c3c0:	beq.n	c380 <lfs_dir_commitcrc+0x168>
    c3c2:	b.n	c326 <lfs_dir_commitcrc+0x10e>

            crc = lfs_crc(crc, &dat, 1);
        }

        // detected write error?
        if (crc != 0) {
    c3c4:	cbnz	r0, c3f4 <lfs_dir_commitcrc+0x1dc>
            return LFS_ERR_CORRUPT;
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
    c3c6:	ldr	r1, [sp, #32]
    c3c8:	ldr	r2, [sp, #24]
    c3ca:	movw	r6, #1022	; 0x3fe
    c3ce:	subs	r3, r1, r2
    c3d0:	cmp	r3, r6
    c3d2:	ite	ls
    c3d4:	addls	r2, r2, r3
    c3d6:	addhi	r2, r2, r6
    c3d8:	mov	r3, r2
        if (off < end) {
    c3da:	cmp	r1, r3
    c3dc:	bls.n	c3f0 <lfs_dir_commitcrc+0x1d8>
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
    return (a > b) ? a : b;
}

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
    return (a < b) ? a : b;
    c3de:	sub.w	r6, r1, #8
    c3e2:	cmp	r6, r3
    c3e4:	it	cs
    c3e6:	movcs	r6, r3
            off = lfs_min(off, end - 2*sizeof(uint32_t));
        }
        noff = off + sizeof(uint32_t);
    c3e8:	adds	r3, r6, #4
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
    lfs_off_t noff = off1 + sizeof(uint32_t);
    while (off < end) {
    c3ea:	cmp	r1, r6
        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
        if (off < end) {
            off = lfs_min(off, end - 2*sizeof(uint32_t));
        }
        noff = off + sizeof(uint32_t);
    c3ec:	str	r3, [sp, #24]
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
    lfs_off_t noff = off1 + sizeof(uint32_t);
    while (off < end) {
    c3ee:	bhi.n	c36a <lfs_dir_commitcrc+0x152>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
        }
        noff = off + sizeof(uint32_t);
    }

    return 0;
    c3f0:	movs	r0, #0
    c3f2:	b.n	c326 <lfs_dir_commitcrc+0x10e>
            crc = lfs_crc(crc, &dat, 1);
        }

        // detected write error?
        if (crc != 0) {
            return LFS_ERR_CORRUPT;
    c3f4:	mvn.w	r0, #83	; 0x53
    c3f8:	b.n	c326 <lfs_dir_commitcrc+0x10e>
    c3fa:	nop

0000c3fc <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
    c3fc:	push	{r4, r5, r6, r7, lr}
    c3fe:	mov	r4, r0
    c400:	sub	sp, #20
    c402:	ldr	r0, [r0, #8]
    lfs_t *lfs = name->lfs;
    const struct lfs_diskoff *disk = buffer;

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
    int res = lfs_bd_cmp(lfs,
    c404:	ldr	r3, [r2, #0]
    c406:	ldr	r2, [r2, #4]
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
    struct lfs_dir_find_match *name = data;
    lfs_t *lfs = name->lfs;
    c408:	ldr	r7, [r4, #0]
    const struct lfs_diskoff *disk = buffer;

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
    int res = lfs_bd_cmp(lfs,
    c40a:	str	r2, [sp, #0]
static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
}

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
    return tag & 0x000003ff;
    c40c:	ubfx	r5, r1, #0, #10
    c410:	cmp	r0, r5
    c412:	mov	r2, r0
    lfs_t *lfs = name->lfs;
    const struct lfs_diskoff *disk = buffer;

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
    int res = lfs_bd_cmp(lfs,
    c414:	ldr	r6, [r4, #4]
    c416:	str	r6, [sp, #4]
    c418:	it	cs
    c41a:	movcs	r2, r5
    c41c:	str	r2, [sp, #8]
    c41e:	mov	r1, r7
    c420:	mov	r0, r7
    c422:	bl	bf54 <lfs_bd_cmp.constprop.27>
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
    if (res != LFS_CMP_EQ) {
    c426:	cbnz	r0, c434 <lfs_dir_find_match+0x38>
        return res;
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
    c428:	ldr	r3, [r4, #8]
    c42a:	cmp	r3, r5
    c42c:	beq.n	c434 <lfs_dir_find_match+0x38>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
    c42e:	ite	cs
    c430:	movcs	r0, #2
    c432:	movcc	r0, #1
    }

    // found a match!
    return LFS_CMP_EQ;
}
    c434:	add	sp, #20
    c436:	pop	{r4, r5, r6, r7, pc}

0000c438 <lfs_dir_open>:

    LFS_TRACE("lfs_mkdir -> %d", 0);
    return 0;
}

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
    c438:	push	{r4, r5, r6, r7, lr}
    c43a:	sub	sp, #36	; 0x24
    c43c:	add	r3, sp, #32
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
    c43e:	add.w	r6, r1, #8

    LFS_TRACE("lfs_mkdir -> %d", 0);
    return 0;
}

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
    c442:	str.w	r2, [r3, #-12]!
    c446:	mov	r4, r1
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
    c448:	mov	r2, r3
    c44a:	mov	r1, r6
    c44c:	movs	r3, #0

    LFS_TRACE("lfs_mkdir -> %d", 0);
    return 0;
}

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
    c44e:	mov	r5, r0
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
    c450:	bl	bad8 <lfs_dir_find>
    if (tag < 0) {
    c454:	cmp	r0, #0
    c456:	blt.n	c4bc <lfs_dir_open+0x84>
        LFS_TRACE("lfs_dir_open -> %"PRId32, tag);
        return tag;
    }

    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
    c458:	lsrs	r3, r0, #20
    c45a:	cmp	r3, #2
    c45c:	bne.n	c4cc <lfs_dir_open+0x94>
static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
    return (int8_t)lfs_tag_chunk(tag);
}

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
    c45e:	ubfx	r0, r0, #10, #10
        LFS_TRACE("lfs_dir_open -> %d", LFS_ERR_NOTDIR);
        return LFS_ERR_NOTDIR;
    }

    lfs_block_t pair[2];
    if (lfs_tag_id(tag) == 0x3ff) {
    c462:	movw	r3, #1023	; 0x3ff
    c466:	cmp	r0, r3
    c468:	beq.n	c4c0 <lfs_dir_open+0x88>
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    c46a:	lsls	r3, r0, #10
    c46c:	movs	r1, #8
    c46e:	movs	r2, #0
    c470:	orr.w	r3, r3, #536870912	; 0x20000000
    c474:	add	r7, sp, #24
    c476:	orrs	r3, r1
    c478:	str	r1, [sp, #8]
    c47a:	stmia.w	sp, {r2, r7}
    c47e:	mov	r1, r6
    c480:	ldr	r2, [pc, #80]	; (c4d4 <lfs_dir_open+0x9c>)
    c482:	mov	r0, r5
    c484:	bl	b91c <lfs_dir_getslice>
        pair[1] = lfs->root[1];
    } else {
        // get dir pair from parent
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
        if (res < 0) {
    c488:	cmp	r0, #0
    c48a:	blt.n	c4bc <lfs_dir_open+0x84>

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
    c48c:	movs	r0, #0
    c48e:	mov.w	r3, #4294967295
    c492:	str	r0, [sp, #12]
    c494:	str	r0, [sp, #8]
    c496:	str	r0, [sp, #4]
    c498:	mov	r2, r7
    c49a:	mov	r1, r6
    c49c:	str	r3, [sp, #0]
    c49e:	mov	r0, r5
    c4a0:	bl	b164 <lfs_dir_fetchmatch>
        lfs_pair_fromle32(pair);
    }

    // fetch first pair
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
    if (err) {
    c4a4:	cbnz	r0, c4bc <lfs_dir_open+0x84>
    dir->head[1] = dir->m.pair[1];
    dir->id = 0;
    dir->pos = 0;

    // add to list of mdirs
    dir->type = LFS_TYPE_DIR;
    c4a6:	movs	r3, #2
    c4a8:	strb	r3, [r4, #6]
    dir->next = (lfs_dir_t*)lfs->mlist;
    c4aa:	ldr	r1, [r5, #40]	; 0x28
        LFS_TRACE("lfs_dir_open -> %d", err);
        return err;
    }

    // setup entry
    dir->head[0] = dir->m.pair[0];
    c4ac:	ldr	r2, [r4, #8]
    dir->head[1] = dir->m.pair[1];
    c4ae:	ldr	r3, [r4, #12]
    dir->id = 0;
    c4b0:	strh	r0, [r4, #4]
    dir->pos = 0;
    c4b2:	str	r0, [r4, #40]	; 0x28

    // add to list of mdirs
    dir->type = LFS_TYPE_DIR;
    dir->next = (lfs_dir_t*)lfs->mlist;
    c4b4:	str	r1, [r4, #0]
        LFS_TRACE("lfs_dir_open -> %d", err);
        return err;
    }

    // setup entry
    dir->head[0] = dir->m.pair[0];
    c4b6:	str	r2, [r4, #44]	; 0x2c
    dir->head[1] = dir->m.pair[1];
    c4b8:	str	r3, [r4, #48]	; 0x30
    dir->pos = 0;

    // add to list of mdirs
    dir->type = LFS_TYPE_DIR;
    dir->next = (lfs_dir_t*)lfs->mlist;
    lfs->mlist = (struct lfs_mlist*)dir;
    c4ba:	str	r4, [r5, #40]	; 0x28

    LFS_TRACE("lfs_dir_open -> %d", 0);
    return 0;
}
    c4bc:	add	sp, #36	; 0x24
    c4be:	pop	{r4, r5, r6, r7, pc}
    }

    lfs_block_t pair[2];
    if (lfs_tag_id(tag) == 0x3ff) {
        // handle root dir separately
        pair[0] = lfs->root[0];
    c4c0:	ldr	r2, [r5, #32]
        pair[1] = lfs->root[1];
    c4c2:	ldr	r3, [r5, #36]	; 0x24
    }

    lfs_block_t pair[2];
    if (lfs_tag_id(tag) == 0x3ff) {
        // handle root dir separately
        pair[0] = lfs->root[0];
    c4c4:	str	r2, [sp, #24]
        pair[1] = lfs->root[1];
    c4c6:	str	r3, [sp, #28]
    c4c8:	add	r7, sp, #24
    c4ca:	b.n	c48c <lfs_dir_open+0x54>
        return tag;
    }

    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
        LFS_TRACE("lfs_dir_open -> %d", LFS_ERR_NOTDIR);
        return LFS_ERR_NOTDIR;
    c4cc:	mvn.w	r0, #19
    c4d0:	b.n	c4bc <lfs_dir_open+0x84>
    c4d2:	nop
    c4d4:	.word	0x700ffc00

0000c4d8 <lfs_dir_close>:
}

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
    LFS_TRACE("lfs_dir_close(%p, %p)", (void*)lfs, (void*)dir);
    // remove from list of mdirs
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
    c4d8:	ldr	r2, [r0, #40]	; 0x28
    c4da:	cbz	r2, c4ee <lfs_dir_close+0x16>
        if (*p == (struct lfs_mlist*)dir) {
    c4dc:	cmp	r1, r2
    c4de:	bne.n	c4e8 <lfs_dir_close+0x10>
    c4e0:	b.n	c4f2 <lfs_dir_close+0x1a>
    c4e2:	cmp	r1, r3
    c4e4:	beq.n	c4f8 <lfs_dir_close+0x20>
    c4e6:	mov	r2, r3
}

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
    LFS_TRACE("lfs_dir_close(%p, %p)", (void*)lfs, (void*)dir);
    // remove from list of mdirs
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
    c4e8:	ldr	r3, [r2, #0]
    c4ea:	cmp	r3, #0
    c4ec:	bne.n	c4e2 <lfs_dir_close+0xa>
        }
    }

    LFS_TRACE("lfs_dir_close -> %d", 0);
    return 0;
}
    c4ee:	movs	r0, #0
    c4f0:	bx	lr
}

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
    LFS_TRACE("lfs_dir_close(%p, %p)", (void*)lfs, (void*)dir);
    // remove from list of mdirs
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
    c4f2:	add.w	r2, r0, #40	; 0x28
    c4f6:	mov	r3, r1
        if (*p == (struct lfs_mlist*)dir) {
            *p = (*p)->next;
    c4f8:	ldr	r3, [r3, #0]
    c4fa:	str	r3, [r2, #0]
        }
    }

    LFS_TRACE("lfs_dir_close -> %d", 0);
    return 0;
}
    c4fc:	movs	r0, #0
    c4fe:	bx	lr

0000c500 <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
    c500:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c504:	mov	r5, r1
    c506:	mov	r9, r2
    c508:	sub	sp, #16
    c50a:	mov	r6, r0
    LFS_TRACE("lfs_dir_read(%p, %p, %p)",
            (void*)lfs, (void*)dir, (void*)info);
    memset(info, 0, sizeof(*info));
    c50c:	movs	r2, #48	; 0x30
    c50e:	mov	r0, r9
    c510:	movs	r1, #0
    c512:	bl	117bc <memset>

    // special offset for '.' and '..'
    if (dir->pos == 0) {
    c516:	ldr	r0, [r5, #40]	; 0x28
    c518:	cmp	r0, #0
    c51a:	beq.n	c592 <lfs_dir_read+0x92>
        info->type = LFS_TYPE_DIR;
        strcpy(info->name, ".");
        dir->pos += 1;
        LFS_TRACE("lfs_dir_read -> %d", true);
        return true;
    } else if (dir->pos == 1) {
    c51c:	cmp	r0, #1
    c51e:	beq.n	c5b6 <lfs_dir_read+0xb6>
    c520:	ldrh	r4, [r5, #4]
            if (!dir->m.split) {
                LFS_TRACE("lfs_dir_read -> %d", false);
                return false;
            }

            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
    c522:	add.w	r7, r5, #8
    c526:	add.w	sl, r5, #32

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
    c52a:	mov.w	r8, #0
        LFS_TRACE("lfs_dir_read -> %d", true);
        return true;
    }

    while (true) {
        if (dir->id == dir->m.count) {
    c52e:	ldrh.w	ip, [r5, #28]

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
    c532:	mov.w	lr, #4294967295
        LFS_TRACE("lfs_dir_read -> %d", true);
        return true;
    }

    while (true) {
        if (dir->id == dir->m.count) {
    c536:	cmp	ip, r4

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
    c538:	mov	r3, lr
    c53a:	mov	r2, sl
    c53c:	mov	r1, r7
    c53e:	mov	r0, r6
        LFS_TRACE("lfs_dir_read -> %d", true);
        return true;
    }

    while (true) {
        if (dir->id == dir->m.count) {
    c540:	bne.n	c562 <lfs_dir_read+0x62>
            if (!dir->m.split) {
    c542:	ldrb	r4, [r5, #31]
    c544:	cmp	r4, #0
    c546:	beq.n	c5ae <lfs_dir_read+0xae>

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
    c548:	str.w	r8, [sp, #12]
    c54c:	str.w	r8, [sp, #8]
    c550:	str.w	r8, [sp, #4]
    c554:	str.w	lr, [sp]
    c558:	bl	b164 <lfs_dir_fetchmatch>
                LFS_TRACE("lfs_dir_read -> %d", false);
                return false;
            }

            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
            if (err) {
    c55c:	cbnz	r0, c58c <lfs_dir_read+0x8c>
                LFS_TRACE("lfs_dir_read -> %d", err);
                return err;
            }

            dir->id = 0;
    c55e:	strh	r0, [r5, #4]
    c560:	mov	r4, r0
        }

        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
    c562:	mov	r2, r4
    c564:	mov	r3, r9
    c566:	mov	r1, r7
    c568:	mov	r0, r6
    c56a:	bl	bc58 <lfs_dir_getinfo>
        if (err && err != LFS_ERR_NOENT) {
    c56e:	cbz	r0, c57e <lfs_dir_read+0x7e>
    c570:	adds	r3, r0, #2
    c572:	bne.n	c58c <lfs_dir_read+0x8c>
            LFS_TRACE("lfs_dir_read -> %d", err);
            return err;
        }

        dir->id += 1;
    c574:	ldrh	r4, [r5, #4]
    c576:	adds	r4, #1
    c578:	uxth	r4, r4
    c57a:	strh	r4, [r5, #4]
    c57c:	b.n	c52e <lfs_dir_read+0x2e>
    c57e:	ldrh	r2, [r5, #4]
        if (err != LFS_ERR_NOENT) {
            break;
        }
    }

    dir->pos += 1;
    c580:	ldr	r3, [r5, #40]	; 0x28
        if (err && err != LFS_ERR_NOENT) {
            LFS_TRACE("lfs_dir_read -> %d", err);
            return err;
        }

        dir->id += 1;
    c582:	adds	r2, #1
        if (err != LFS_ERR_NOENT) {
            break;
        }
    }

    dir->pos += 1;
    c584:	adds	r3, #1
        if (err && err != LFS_ERR_NOENT) {
            LFS_TRACE("lfs_dir_read -> %d", err);
            return err;
        }

        dir->id += 1;
    c586:	strh	r2, [r5, #4]
        if (err != LFS_ERR_NOENT) {
            break;
        }
    }

    dir->pos += 1;
    c588:	str	r3, [r5, #40]	; 0x28
    LFS_TRACE("lfs_dir_read -> %d", true);
    return true;
    c58a:	movs	r0, #1
}
    c58c:	add	sp, #16
    c58e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    memset(info, 0, sizeof(*info));

    // special offset for '.' and '..'
    if (dir->pos == 0) {
        info->type = LFS_TYPE_DIR;
        strcpy(info->name, ".");
    c592:	ldr	r2, [pc, #64]	; (c5d4 <lfs_dir_read+0xd4>)
            (void*)lfs, (void*)dir, (void*)info);
    memset(info, 0, sizeof(*info));

    // special offset for '.' and '..'
    if (dir->pos == 0) {
        info->type = LFS_TYPE_DIR;
    c594:	movs	r3, #2
        strcpy(info->name, ".");
    c596:	ldrh	r2, [r2, #0]
    c598:	strh.w	r2, [r9, #8]
            (void*)lfs, (void*)dir, (void*)info);
    memset(info, 0, sizeof(*info));

    // special offset for '.' and '..'
    if (dir->pos == 0) {
        info->type = LFS_TYPE_DIR;
    c59c:	strb.w	r3, [r9]
        strcpy(info->name, ".");
        dir->pos += 1;
    c5a0:	ldr	r3, [r5, #40]	; 0x28
        LFS_TRACE("lfs_dir_read -> %d", true);
        return true;
    c5a2:	movs	r0, #1

    // special offset for '.' and '..'
    if (dir->pos == 0) {
        info->type = LFS_TYPE_DIR;
        strcpy(info->name, ".");
        dir->pos += 1;
    c5a4:	adds	r3, #1
    c5a6:	str	r3, [r5, #40]	; 0x28
    }

    dir->pos += 1;
    LFS_TRACE("lfs_dir_read -> %d", true);
    return true;
}
    c5a8:	add	sp, #16
    c5aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

    while (true) {
        if (dir->id == dir->m.count) {
            if (!dir->m.split) {
                LFS_TRACE("lfs_dir_read -> %d", false);
                return false;
    c5ae:	mov	r0, r4
    }

    dir->pos += 1;
    LFS_TRACE("lfs_dir_read -> %d", true);
    return true;
}
    c5b0:	add	sp, #16
    c5b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        strcpy(info->name, ".");
        dir->pos += 1;
        LFS_TRACE("lfs_dir_read -> %d", true);
        return true;
    } else if (dir->pos == 1) {
        info->type = LFS_TYPE_DIR;
    c5b6:	mov	r3, r9
    c5b8:	movs	r1, #2
        strcpy(info->name, "..");
    c5ba:	ldr	r2, [pc, #28]	; (c5d8 <lfs_dir_read+0xd8>)
        strcpy(info->name, ".");
        dir->pos += 1;
        LFS_TRACE("lfs_dir_read -> %d", true);
        return true;
    } else if (dir->pos == 1) {
        info->type = LFS_TYPE_DIR;
    c5bc:	strb.w	r1, [r3], #8
        strcpy(info->name, "..");
    c5c0:	ldrh	r1, [r2, #0]
    c5c2:	ldrb	r2, [r2, #2]
    c5c4:	strh.w	r1, [r9, #8]
    c5c8:	strb	r2, [r3, #2]
        dir->pos += 1;
    c5ca:	ldr	r3, [r5, #40]	; 0x28
    c5cc:	adds	r3, #1
    c5ce:	str	r3, [r5, #40]	; 0x28
        LFS_TRACE("lfs_dir_read -> %d", true);
        return true;
    c5d0:	b.n	c58c <lfs_dir_read+0x8c>
    c5d2:	nop
    c5d4:	.word	0x000158a4
    c5d8:	.word	0x000158a8

0000c5dc <lfs_dir_rewind>:
    (void)lfs;
    LFS_TRACE("lfs_dir_tell -> %"PRId32, dir->pos);
    return dir->pos;
}

int lfs_dir_rewind(lfs_t *lfs, lfs_dir_t *dir) {
    c5dc:	push	{r4, r5, lr}
    c5de:	sub	sp, #20

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
    c5e0:	movs	r5, #0
    c5e2:	mov.w	r3, #4294967295
    (void)lfs;
    LFS_TRACE("lfs_dir_tell -> %"PRId32, dir->pos);
    return dir->pos;
}

int lfs_dir_rewind(lfs_t *lfs, lfs_dir_t *dir) {
    c5e6:	mov	r4, r1

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
    c5e8:	add.w	r2, r1, #44	; 0x2c
    c5ec:	str	r5, [sp, #12]
    c5ee:	adds	r1, #8
    c5f0:	str	r5, [sp, #8]
    c5f2:	stmia.w	sp, {r3, r5}
    c5f6:	bl	b164 <lfs_dir_fetchmatch>

int lfs_dir_rewind(lfs_t *lfs, lfs_dir_t *dir) {
    LFS_TRACE("lfs_dir_rewind(%p, %p)", (void*)lfs, (void*)dir);
    // reload the head dir
    int err = lfs_dir_fetch(lfs, &dir->m, dir->head);
    if (err) {
    c5fa:	cbnz	r0, c600 <lfs_dir_rewind+0x24>
        LFS_TRACE("lfs_dir_rewind -> %d", err);
        return err;
    }

    dir->id = 0;
    c5fc:	strh	r0, [r4, #4]
    dir->pos = 0;
    c5fe:	str	r0, [r4, #40]	; 0x28
    LFS_TRACE("lfs_dir_rewind -> %d", 0);
    return 0;
}
    c600:	add	sp, #20
    c602:	pop	{r4, r5, pc}

0000c604 <lfs_file_tell>:
    LFS_TRACE("lfs_file_tell(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(file->flags & LFS_F_OPENED);
    (void)lfs;
    LFS_TRACE("lfs_file_tell -> %"PRId32, file->pos);
    return file->pos;
}
    c604:	ldr	r0, [r1, #52]	; 0x34
    c606:	bx	lr

0000c608 <lfs_file_size>:

lfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {
    LFS_TRACE("lfs_file_size(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(file->flags & LFS_F_OPENED);
    (void)lfs;
    if (file->flags & LFS_F_WRITING) {
    c608:	ldr	r3, [r1, #48]	; 0x30
    c60a:	lsls	r3, r3, #14
    c60c:	bmi.n	c612 <lfs_file_size+0xa>
        LFS_TRACE("lfs_file_size -> %"PRId32,
                lfs_max(file->pos, file->ctz.size));
        return lfs_max(file->pos, file->ctz.size);
    } else {
        LFS_TRACE("lfs_file_size -> %"PRId32, file->ctz.size);
        return file->ctz.size;
    c60e:	ldr	r0, [r1, #44]	; 0x2c
    }
}
    c610:	bx	lr
    LFS_ASSERT(file->flags & LFS_F_OPENED);
    (void)lfs;
    if (file->flags & LFS_F_WRITING) {
        LFS_TRACE("lfs_file_size -> %"PRId32,
                lfs_max(file->pos, file->ctz.size));
        return lfs_max(file->pos, file->ctz.size);
    c612:	ldr	r0, [r1, #52]	; 0x34
    c614:	ldr	r3, [r1, #44]	; 0x2c
    c616:	cmp	r0, r3
    c618:	it	cc
    c61a:	movcc	r0, r3
    c61c:	bx	lr
    c61e:	nop

0000c620 <lfs_stat>:
    }
}


/// General fs operations ///
int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
    c620:	push	{r4, r5, lr}
    c622:	sub	sp, #44	; 0x2c
    c624:	add	r3, sp, #40	; 0x28
    c626:	mov	r5, r2
    c628:	str.w	r1, [r3, #-36]!
    LFS_TRACE("lfs_stat(%p, \"%s\", %p)", (void*)lfs, path, (void*)info);
    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
    c62c:	add	r1, sp, #8
    c62e:	mov	r2, r3
    c630:	movs	r3, #0
    }
}


/// General fs operations ///
int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
    c632:	mov	r4, r0
    LFS_TRACE("lfs_stat(%p, \"%s\", %p)", (void*)lfs, path, (void*)info);
    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
    c634:	bl	bad8 <lfs_dir_find>
    if (tag < 0) {
    c638:	cmp	r0, #0
    c63a:	blt.n	c64a <lfs_stat+0x2a>
        LFS_TRACE("lfs_stat -> %"PRId32, tag);
        return (int)tag;
    }

    int err = lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
    c63c:	ubfx	r2, r0, #10, #10
    c640:	mov	r3, r5
    c642:	add	r1, sp, #8
    c644:	mov	r0, r4
    c646:	bl	bc58 <lfs_dir_getinfo>
    LFS_TRACE("lfs_stat -> %d", err);
    return err;
}
    c64a:	add	sp, #44	; 0x2c
    c64c:	pop	{r4, r5, pc}
    c64e:	nop

0000c650 <lfs_mount>:
    lfs_deinit(lfs);
    LFS_TRACE("lfs_format -> %d", err);
    return err;
}

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
    c650:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c654:	sub	sp, #92	; 0x5c
    c656:	mov	r4, r0
            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);
    int err = lfs_init(lfs, cfg);
    c658:	bl	aef4 <lfs_init>
    if (err) {
    c65c:	mov	r6, r0
    c65e:	cmp	r0, #0
    c660:	bne.w	c77c <lfs_mount+0x12c>
        LFS_TRACE("lfs_mount -> %d", err);
        return err;
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
    c664:	add	r0, sp, #56	; 0x38
    c666:	movs	r2, #32
    c668:	mov	r1, r6
    c66a:	bl	117bc <memset>
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
    c66e:	ldr.w	r9, [pc, #292]	; c794 <lfs_mount+0x144>
            goto cleanup;
        }
        cycle += 1;

        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
    c672:	ldr.w	r8, [pc, #292]	; c798 <lfs_mount+0x148>
        LFS_TRACE("lfs_mount -> %d", err);
        return err;
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
    c676:	movs	r3, #1
    c678:	str	r3, [sp, #84]	; 0x54
    pair[0] = pair[1];
    pair[1] = t;
}

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    c67a:	ldr	r3, [sp, #84]	; 0x54
    c67c:	adds	r3, #1
    c67e:	beq.n	c72c <lfs_mount+0xdc>

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
    lfs_block_t cycle = 0;
    while (!lfs_pair_isnull(dir.tail)) {
        if (cycle >= lfs->cfg->block_count/2) {
    c680:	ldr	r3, [r4, #104]	; 0x68
    c682:	ldr	r3, [r3, #32]
    c684:	cmp.w	r6, r3, lsr #1
    c688:	bcs.n	c782 <lfs_mount+0x132>
            goto cleanup;
        }
        cycle += 1;

        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
    c68a:	ldr	r3, [pc, #252]	; (c788 <lfs_mount+0x138>)
    c68c:	str.w	r8, [sp, #8]
    c690:	add	r2, sp, #20
    c692:	movs	r7, #0
    c694:	str	r2, [sp, #12]
    c696:	stmia.w	sp, {r3, r7}
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
    c69a:	movs	r5, #8
            goto cleanup;
        }
        cycle += 1;

        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
    c69c:	ldr	r3, [pc, #236]	; (c78c <lfs_mount+0x13c>)
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
    c69e:	str	r5, [sp, #28]
            goto cleanup;
        }
        cycle += 1;

        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
    c6a0:	add	r2, sp, #80	; 0x50
    c6a2:	add	r1, sp, #56	; 0x38
    c6a4:	mov	r0, r4
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
    c6a6:	str	r4, [sp, #20]
    c6a8:	str.w	r9, [sp, #24]
            goto cleanup;
        }
        cycle += 1;

        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
    c6ac:	bl	b164 <lfs_dir_fetchmatch>
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
                    lfs, "littlefs", 8});
        if (tag < 0) {
    c6b0:	subs	r5, r0, #0
        if (cycle >= lfs->cfg->block_count/2) {
            // loop detected
            err = LFS_ERR_CORRUPT;
            goto cleanup;
        }
        cycle += 1;
    c6b2:	add.w	r6, r6, #1
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
                    lfs, "littlefs", 8});
        if (tag < 0) {
    c6b6:	blt.n	c774 <lfs_mount+0x124>
            err = tag;
            goto cleanup;
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
    c6b8:	beq.n	c716 <lfs_mount+0xc6>
    c6ba:	sbfx	r5, r5, #0, #10
    c6be:	adds	r5, #1
    c6c0:	beq.n	c716 <lfs_mount+0xc6>
            // update root
            lfs->root[0] = dir.pair[0];
    c6c2:	ldr	r0, [sp, #56]	; 0x38
            lfs->root[1] = dir.pair[1];
    c6c4:	ldr	r1, [sp, #60]	; 0x3c
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    c6c6:	str	r7, [sp, #0]
    c6c8:	movs	r2, #24
    c6ca:	add	r3, sp, #32
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
            // update root
            lfs->root[0] = dir.pair[0];
    c6cc:	str	r0, [r4, #32]
            lfs->root[1] = dir.pair[1];
    c6ce:	str	r1, [r4, #36]	; 0x24
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    c6d0:	mov	r0, r4
    c6d2:	str	r2, [sp, #8]
    c6d4:	str	r3, [sp, #4]
    c6d6:	ldr	r2, [pc, #180]	; (c78c <lfs_mount+0x13c>)
    c6d8:	ldr	r3, [pc, #180]	; (c790 <lfs_mount+0x140>)
    c6da:	add	r1, sp, #56	; 0x38
    c6dc:	bl	b91c <lfs_dir_getslice>
            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
    c6e0:	subs	r5, r0, #0
    c6e2:	blt.n	c774 <lfs_mount+0x124>
                goto cleanup;
            }
            lfs_superblock_fromle32(&superblock);

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
    c6e4:	ldr	r3, [sp, #32]
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
    c6e6:	lsrs	r2, r3, #16
    c6e8:	cmp	r2, #2
            }
            lfs_superblock_fromle32(&superblock);

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
    c6ea:	uxth	r3, r3
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
    c6ec:	bne.n	c770 <lfs_mount+0x120>
    c6ee:	cmp	r3, #0
    c6f0:	bne.n	c770 <lfs_mount+0x120>
                err = LFS_ERR_INVAL;
                goto cleanup;
            }

            // check superblock configuration
            if (superblock.name_max) {
    c6f2:	ldr	r3, [sp, #44]	; 0x2c
    c6f4:	cbz	r3, c6fe <lfs_mount+0xae>
                if (superblock.name_max > lfs->name_max) {
    c6f6:	ldr	r2, [r4, #108]	; 0x6c
    c6f8:	cmp	r3, r2
    c6fa:	bhi.n	c770 <lfs_mount+0x120>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
                    goto cleanup;
                }

                lfs->name_max = superblock.name_max;
    c6fc:	str	r3, [r4, #108]	; 0x6c
            }

            if (superblock.file_max) {
    c6fe:	ldr	r3, [sp, #48]	; 0x30
    c700:	cbz	r3, c70a <lfs_mount+0xba>
                if (superblock.file_max > lfs->file_max) {
    c702:	ldr	r2, [r4, #112]	; 0x70
    c704:	cmp	r3, r2
    c706:	bhi.n	c770 <lfs_mount+0x120>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
                    goto cleanup;
                }

                lfs->file_max = superblock.file_max;
    c708:	str	r3, [r4, #112]	; 0x70
            }

            if (superblock.attr_max) {
    c70a:	ldr	r3, [sp, #52]	; 0x34
    c70c:	cbz	r3, c716 <lfs_mount+0xc6>
                if (superblock.attr_max > lfs->attr_max) {
    c70e:	ldr	r2, [r4, #116]	; 0x74
    c710:	cmp	r3, r2
    c712:	bhi.n	c770 <lfs_mount+0x120>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
                    goto cleanup;
                }

                lfs->attr_max = superblock.attr_max;
    c714:	str	r3, [r4, #116]	; 0x74
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
    c716:	add.w	r2, r4, #48	; 0x30
    c71a:	add	r1, sp, #56	; 0x38
    c71c:	mov	r0, r4
    c71e:	bl	ba90 <lfs_dir_getgstate>
        if (err) {
    c722:	mov	r5, r0
    c724:	cbnz	r0, c774 <lfs_mount+0x124>
    pair[0] = pair[1];
    pair[1] = t;
}

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    c726:	ldr	r3, [sp, #80]	; 0x50
    c728:	adds	r3, #1
    c72a:	bne.n	c67a <lfs_mount+0x2a>
    c72c:	ldr	r3, [r4, #32]
    c72e:	adds	r3, #1
    c730:	beq.n	c770 <lfs_mount+0x120>
    c732:	ldr	r3, [r4, #36]	; 0x24
    c734:	adds	r3, #1
    c736:	beq.n	c770 <lfs_mount+0x120>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
    c738:	ldr	r3, [r4, #48]	; 0x30
}

// Invalidate the lookahead buffer. This is done during mounting and
// failed traversals
static void lfs_alloc_reset(lfs_t *lfs) {
    lfs->free.off = lfs->seed % lfs->cfg->block_size;
    c73a:	ldr	r2, [r4, #104]	; 0x68
    c73c:	ldr.w	lr, [r4, #44]	; 0x2c
    c740:	ldr	r5, [r2, #28]

    return 0;
}

static void lfs_alloc_ack(lfs_t *lfs) {
    lfs->free.ack = lfs->cfg->block_count;
    c742:	ldr	r7, [r2, #32]
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
    c744:	add.w	r3, r3, r3, lsr #31
    c748:	str	r3, [r4, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
    c74a:	add.w	r3, r4, #48	; 0x30
    c74e:	ldmia.w	r3, {r0, r1, r2}
}

// Invalidate the lookahead buffer. This is done during mounting and
// failed traversals
static void lfs_alloc_reset(lfs_t *lfs) {
    lfs->free.off = lfs->seed % lfs->cfg->block_size;
    c752:	udiv	r3, lr, r5
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
    lfs->gdisk = lfs->gstate;
    c756:	add.w	r6, r4, #60	; 0x3c
}

// Invalidate the lookahead buffer. This is done during mounting and
// failed traversals
static void lfs_alloc_reset(lfs_t *lfs) {
    lfs->free.off = lfs->seed % lfs->cfg->block_size;
    c75a:	mls	r5, r5, r3, lr
    lfs->free.size = 0;
    c75e:	movs	r3, #0
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
    lfs->gdisk = lfs->gstate;
    c760:	stmia.w	r6, {r0, r1, r2}

    // setup free lookahead
    lfs_alloc_reset(lfs);

    LFS_TRACE("lfs_mount -> %d", 0);
    return 0;
    c764:	mov	r0, r3

    return 0;
}

static void lfs_alloc_ack(lfs_t *lfs) {
    lfs->free.ack = lfs->cfg->block_count;
    c766:	str	r7, [r4, #96]	; 0x60
}

// Invalidate the lookahead buffer. This is done during mounting and
// failed traversals
static void lfs_alloc_reset(lfs_t *lfs) {
    lfs->free.off = lfs->seed % lfs->cfg->block_size;
    c768:	str	r5, [r4, #84]	; 0x54
    lfs->free.size = 0;
    c76a:	str	r3, [r4, #88]	; 0x58
    lfs->free.i = 0;
    c76c:	str	r3, [r4, #92]	; 0x5c

    // setup free lookahead
    lfs_alloc_reset(lfs);

    LFS_TRACE("lfs_mount -> %d", 0);
    return 0;
    c76e:	b.n	c77c <lfs_mount+0x12c>
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
        err = LFS_ERR_INVAL;
    c770:	mvn.w	r5, #21
    return err;
}

int lfs_unmount(lfs_t *lfs) {
    LFS_TRACE("lfs_unmount(%p)", (void*)lfs);
    int err = lfs_deinit(lfs);
    c774:	mov	r0, r4
    c776:	bl	aec0 <lfs_deinit>
    return 0;

cleanup:
    lfs_unmount(lfs);
    LFS_TRACE("lfs_mount -> %d", err);
    return err;
    c77a:	mov	r0, r5
}
    c77c:	add	sp, #92	; 0x5c
    c77e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lfs_mdir_t dir = {.tail = {0, 1}};
    lfs_block_t cycle = 0;
    while (!lfs_pair_isnull(dir.tail)) {
        if (cycle >= lfs->cfg->block_count/2) {
            // loop detected
            err = LFS_ERR_CORRUPT;
    c782:	mvn.w	r5, #83	; 0x53
    c786:	b.n	c774 <lfs_mount+0x124>
    c788:	.word	0x0ff00008
    c78c:	.word	0x7ffffc00
    c790:	.word	0x20100018
    c794:	.word	0x00015b98
    c798:	.word	0x0000c3fd

0000c79c <lfs_fs_traverseraw>:


/// Filesystem filesystem operations ///
int lfs_fs_traverseraw(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
    c79c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c7a0:	sub	sp, #68	; 0x44
    c7a2:	mov	r5, r0
    c7a4:	mov	r9, r1
    c7a6:	mov	sl, r2
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
    c7a8:	movs	r1, #0
    c7aa:	add	r0, sp, #32
    c7ac:	movs	r2, #32


/// Filesystem filesystem operations ///
int lfs_fs_traverseraw(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
    c7ae:	mov	fp, r3
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
    c7b0:	bl	117bc <memset>
    c7b4:	movs	r3, #1
    c7b6:	movs	r1, #0
    c7b8:	str	r3, [sp, #60]	; 0x3c
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t cycle = 0;
    c7ba:	str	r1, [sp, #20]
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    c7bc:	movs	r6, #8
    pair[0] = pair[1];
    pair[1] = t;
}

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    c7be:	ldr	r3, [sp, #60]	; 0x3c
    c7c0:	adds	r3, #1
    c7c2:	beq.n	c882 <lfs_fs_traverseraw+0xe6>
    }
#endif

    lfs_block_t cycle = 0;
    while (!lfs_pair_isnull(dir.tail)) {
        if (cycle >= lfs->cfg->block_count/2) {
    c7c4:	ldr	r3, [r5, #104]	; 0x68
    c7c6:	ldr	r2, [sp, #20]
    c7c8:	ldr	r3, [r3, #32]
    c7ca:	cmp.w	r2, r3, lsr #1
    c7ce:	bcs.w	c904 <lfs_fs_traverseraw+0x168>
            return LFS_ERR_CORRUPT;
        }
        cycle += 1;

        for (int i = 0; i < 2; i++) {
            int err = cb(data, dir.tail[i]);
    c7d2:	mov	r0, sl
    c7d4:	blx	r9
            if (err) {
    c7d6:	cmp	r0, #0
    c7d8:	bne.n	c854 <lfs_fs_traverseraw+0xb8>
            return LFS_ERR_CORRUPT;
        }
        cycle += 1;

        for (int i = 0; i < 2; i++) {
            int err = cb(data, dir.tail[i]);
    c7da:	ldr	r1, [sp, #60]	; 0x3c
    c7dc:	mov	r0, sl
    c7de:	blx	r9
            if (err) {
    c7e0:	cmp	r0, #0
    c7e2:	bne.n	c854 <lfs_fs_traverseraw+0xb8>

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
    c7e4:	mov.w	r3, #4294967295
    c7e8:	str	r0, [sp, #12]
    c7ea:	str	r0, [sp, #8]
    c7ec:	str	r0, [sp, #4]
    c7ee:	str	r3, [sp, #0]
    c7f0:	add	r2, sp, #56	; 0x38
    c7f2:	add	r1, sp, #32
    c7f4:	mov	r0, r5
    c7f6:	bl	b164 <lfs_dir_fetchmatch>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
        if (err) {
    c7fa:	cbnz	r0, c854 <lfs_fs_traverseraw+0xb8>
            return err;
        }

        for (uint16_t id = 0; id < dir.count; id++) {
    c7fc:	ldrh.w	r3, [sp, #52]	; 0x34
    c800:	cmp	r3, #0
    c802:	beq.n	c876 <lfs_fs_traverseraw+0xda>
    c804:	mov	r4, r0
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    c806:	mov	r8, r0
    c808:	add	r7, sp, #24
    c80a:	b.n	c830 <lfs_fs_traverseraw+0x94>
static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
    return (tag & 0x70000000) >> 20;
}

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
    return (tag & 0x7ff00000) >> 20;
    c80c:	lsrs	r0, r0, #20
                }
                return tag;
            }
            lfs_ctz_fromle32(&ctz);

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
    c80e:	movw	r3, #514	; 0x202
    c812:	cmp	r0, r3
static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
    return (tag & 0x70000000) >> 20;
}

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
    return (tag & 0x7ff00000) >> 20;
    c814:	uxth	r2, r0
                }
                return tag;
            }
            lfs_ctz_fromle32(&ctz);

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
    c816:	beq.n	c85a <lfs_fs_traverseraw+0xbe>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
                        ctz.head, ctz.size, cb, data);
                if (err) {
                    return err;
                }
            } else if (includeorphans && 
    c818:	cmp.w	fp, #0
    c81c:	beq.n	c824 <lfs_fs_traverseraw+0x88>
    c81e:	cmp.w	r2, #512	; 0x200
    c822:	beq.n	c89a <lfs_fs_traverseraw+0xfe>
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
        if (err) {
            return err;
        }

        for (uint16_t id = 0; id < dir.count; id++) {
    c824:	adds	r4, #1
    c826:	ldrh.w	r3, [sp, #52]	; 0x34
    c82a:	uxth	r4, r4
    c82c:	cmp	r3, r4
    c82e:	bls.n	c876 <lfs_fs_traverseraw+0xda>
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    c830:	lsls	r3, r4, #10
    c832:	orr.w	r3, r3, #536870912	; 0x20000000
    c836:	str	r6, [sp, #8]
    c838:	str	r7, [sp, #4]
    c83a:	str.w	r8, [sp]
    c83e:	orr.w	r3, r3, #8
    c842:	ldr	r2, [pc, #200]	; (c90c <lfs_fs_traverseraw+0x170>)
    c844:	add	r1, sp, #32
    c846:	mov	r0, r5
    c848:	bl	b91c <lfs_dir_getslice>

        for (uint16_t id = 0; id < dir.count; id++) {
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
            if (tag < 0) {
    c84c:	cmp	r0, #0
    c84e:	bge.n	c80c <lfs_fs_traverseraw+0x70>
                if (tag == LFS_ERR_NOENT) {
    c850:	adds	r3, r0, #2
    c852:	beq.n	c824 <lfs_fs_traverseraw+0x88>
            }
        }
    }

    return 0;
}
    c854:	add	sp, #68	; 0x44
    c856:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                return tag;
            }
            lfs_ctz_fromle32(&ctz);

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
    c85a:	ldr	r2, [sp, #28]

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
    if (size == 0) {
    c85c:	cmp	r2, #0
    c85e:	beq.n	c824 <lfs_fs_traverseraw+0x88>
    c860:	stmia.w	sp, {r2, r9, sl}
    c864:	ldr	r3, [sp, #24]
    c866:	mov	r2, r5
    c868:	movs	r1, #0
    c86a:	mov	r0, r5
    c86c:	bl	bcfc <lfs_ctz_traverse.part.19>
            lfs_ctz_fromle32(&ctz);

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
                        ctz.head, ctz.size, cb, data);
                if (err) {
    c870:	cmp	r0, #0
    c872:	beq.n	c824 <lfs_fs_traverseraw+0x88>
    c874:	b.n	c854 <lfs_fs_traverseraw+0xb8>
    while (!lfs_pair_isnull(dir.tail)) {
        if (cycle >= lfs->cfg->block_count/2) {
            // loop detected
            return LFS_ERR_CORRUPT;
        }
        cycle += 1;
    c876:	ldr	r3, [sp, #20]
    c878:	ldr	r1, [sp, #56]	; 0x38
    c87a:	adds	r3, #1
    pair[0] = pair[1];
    pair[1] = t;
}

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    c87c:	adds	r2, r1, #1
    while (!lfs_pair_isnull(dir.tail)) {
        if (cycle >= lfs->cfg->block_count/2) {
            // loop detected
            return LFS_ERR_CORRUPT;
        }
        cycle += 1;
    c87e:	str	r3, [sp, #20]
    pair[0] = pair[1];
    pair[1] = t;
}

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    c880:	bne.n	c7be <lfs_fs_traverseraw+0x22>
            }
        }
    }

    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
    c882:	ldr	r4, [r5, #40]	; 0x28
    c884:	cbz	r4, c896 <lfs_fs_traverseraw+0xfa>
    c886:	mov	r6, r9
    c888:	mov	r7, sl
        if (f->type != LFS_TYPE_REG) {
    c88a:	ldrb	r3, [r4, #6]
    c88c:	cmp	r3, #1
    c88e:	beq.n	c8b0 <lfs_fs_traverseraw+0x114>
            }
        }
    }

    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
    c890:	ldr	r4, [r4, #0]
    c892:	cmp	r4, #0
    c894:	bne.n	c88a <lfs_fs_traverseraw+0xee>
                return err;
            }
        }
    }

    return 0;
    c896:	movs	r0, #0
    c898:	b.n	c854 <lfs_fs_traverseraw+0xb8>
                    return err;
                }
            } else if (includeorphans && 
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
                for (int i = 0; i < 2; i++) {
                    err = cb(data, (&ctz.head)[i]);
    c89a:	ldr	r1, [sp, #24]
    c89c:	mov	r0, sl
    c89e:	blx	r9
                    if (err) {
    c8a0:	cmp	r0, #0
    c8a2:	bne.n	c854 <lfs_fs_traverseraw+0xb8>
                    return err;
                }
            } else if (includeorphans && 
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
                for (int i = 0; i < 2; i++) {
                    err = cb(data, (&ctz.head)[i]);
    c8a4:	ldr	r1, [sp, #28]
    c8a6:	mov	r0, sl
    c8a8:	blx	r9
                    if (err) {
    c8aa:	cmp	r0, #0
    c8ac:	beq.n	c824 <lfs_fs_traverseraw+0x88>
    c8ae:	b.n	c854 <lfs_fs_traverseraw+0xb8>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
        if (f->type != LFS_TYPE_REG) {
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
    c8b0:	ldr	r3, [r4, #48]	; 0x30
    c8b2:	and.w	r2, r3, #1114112	; 0x110000
    c8b6:	cmp.w	r2, #65536	; 0x10000
    c8ba:	beq.n	c8e4 <lfs_fs_traverseraw+0x148>
            if (err) {
                return err;
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
    c8bc:	and.w	r3, r3, #1179648	; 0x120000
    c8c0:	cmp.w	r3, #131072	; 0x20000
    c8c4:	bne.n	c890 <lfs_fs_traverseraw+0xf4>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
    c8c6:	ldr	r2, [r4, #52]	; 0x34

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
    if (size == 0) {
    c8c8:	cmp	r2, #0
    c8ca:	beq.n	c890 <lfs_fs_traverseraw+0xf4>
    c8cc:	ldr	r3, [r4, #56]	; 0x38
    c8ce:	add.w	r1, r4, #64	; 0x40
    c8d2:	stmia.w	sp, {r2, r6, r7}
    c8d6:	mov	r0, r5
    c8d8:	mov	r2, r5
    c8da:	bl	bcfc <lfs_ctz_traverse.part.19>
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
                    f->block, f->pos, cb, data);
            if (err) {
    c8de:	cmp	r0, #0
    c8e0:	beq.n	c890 <lfs_fs_traverseraw+0xf4>
    c8e2:	b.n	c854 <lfs_fs_traverseraw+0xb8>
        if (f->type != LFS_TYPE_REG) {
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
    c8e4:	ldr	r2, [r4, #44]	; 0x2c

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
    if (size == 0) {
    c8e6:	cmp	r2, #0
    c8e8:	beq.n	c8bc <lfs_fs_traverseraw+0x120>
    c8ea:	ldr	r3, [r4, #40]	; 0x28
    c8ec:	add.w	r1, r4, #64	; 0x40
    c8f0:	stmia.w	sp, {r2, r6, r7}
    c8f4:	mov	r0, r5
    c8f6:	mov	r2, r5
    c8f8:	bl	bcfc <lfs_ctz_traverse.part.19>
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
    c8fc:	cmp	r0, #0
    c8fe:	bne.n	c854 <lfs_fs_traverseraw+0xb8>
    c900:	ldr	r3, [r4, #48]	; 0x30
    c902:	b.n	c8bc <lfs_fs_traverseraw+0x120>

    lfs_block_t cycle = 0;
    while (!lfs_pair_isnull(dir.tail)) {
        if (cycle >= lfs->cfg->block_count/2) {
            // loop detected
            return LFS_ERR_CORRUPT;
    c904:	mvn.w	r0, #83	; 0x53
    c908:	b.n	c854 <lfs_fs_traverseraw+0xb8>
    c90a:	nop
    c90c:	.word	0x700ffc00

0000c910 <lfs_alloc>:
    lfs->free.size = 0;
    lfs->free.i = 0;
    lfs_alloc_ack(lfs);
}

static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
    c910:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c914:	mov	r4, r0
    c916:	mov	r9, r1
        while (lfs->free.i != lfs->free.size) {
            lfs_block_t off = lfs->free.i;
            lfs->free.i += 1;
            lfs->free.ack -= 1;

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
    c918:	movs	r5, #1
    c91a:	ldr	r3, [r4, #92]	; 0x5c
    c91c:	ldr.w	r8, [r4, #88]	; 0x58
    c920:	ldr	r1, [r4, #96]	; 0x60
    lfs_alloc_ack(lfs);
}

static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
    while (true) {
        while (lfs->free.i != lfs->free.size) {
    c922:	b.n	c936 <lfs_alloc+0x26>
            lfs_block_t off = lfs->free.i;
            lfs->free.i += 1;
            lfs->free.ack -= 1;
    c924:	subs	r1, #1

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
    c926:	ldr	r7, [r4, #100]	; 0x64
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
    while (true) {
        while (lfs->free.i != lfs->free.size) {
            lfs_block_t off = lfs->free.i;
            lfs->free.i += 1;
            lfs->free.ack -= 1;
    c928:	str	r1, [r4, #96]	; 0x60

static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
    while (true) {
        while (lfs->free.i != lfs->free.size) {
            lfs_block_t off = lfs->free.i;
            lfs->free.i += 1;
    c92a:	str	r0, [r4, #92]	; 0x5c
            lfs->free.ack -= 1;

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
    c92c:	ldr.w	r6, [r7, lr, lsl #2]
    c930:	tst	r2, r6
    c932:	beq.n	c9aa <lfs_alloc+0x9a>
    c934:	mov	r3, r0
    c936:	and.w	r2, r3, #31
    lfs_alloc_ack(lfs);
}

static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
    while (true) {
        while (lfs->free.i != lfs->free.size) {
    c93a:	cmp	r3, r8
            lfs_block_t off = lfs->free.i;
            lfs->free.i += 1;
    c93c:	add.w	r0, r3, #1
            lfs->free.ack -= 1;

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
    c940:	mov.w	lr, r3, lsr #5
    c944:	lsl.w	r2, r5, r2
    c948:	mov.w	ip, #1
    lfs_alloc_ack(lfs);
}

static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
    while (true) {
        while (lfs->free.i != lfs->free.size) {
    c94c:	bne.n	c924 <lfs_alloc+0x14>
                return 0;
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
    c94e:	cmp	r1, #0
    c950:	beq.n	ca06 <lfs_alloc+0xf6>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
                % lfs->cfg->block_count;
    c952:	ldr	r7, [r4, #104]	; 0x68
            LFS_ERROR("No more free space %"PRIu32,
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
    c954:	ldr	r0, [r4, #84]	; 0x54
                % lfs->cfg->block_count;
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
    c956:	ldr	r2, [r7, #44]	; 0x2c
            LFS_ERROR("No more free space %"PRIu32,
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
    c958:	ldr	r7, [r7, #32]
                % lfs->cfg->block_count;
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
    c95a:	mov.w	lr, r2, lsl #3
    c95e:	cmp	r1, lr
            LFS_ERROR("No more free space %"PRIu32,
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
    c960:	add	r3, r0
                % lfs->cfg->block_count;
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
    c962:	it	cs
    c964:	movcs	r1, lr
            LFS_ERROR("No more free space %"PRIu32,
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
    c966:	udiv	r0, r3, r7
    c96a:	mls	r3, r7, r0, r3
                % lfs->cfg->block_count;
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
        lfs->free.i = 0;
    c96e:	movs	r7, #0
            return LFS_ERR_NOSPC;
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
                % lfs->cfg->block_count;
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
    c970:	str	r1, [r4, #88]	; 0x58
            LFS_ERROR("No more free space %"PRIu32,
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
    c972:	str	r3, [r4, #84]	; 0x54
                % lfs->cfg->block_count;
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
        lfs->free.i = 0;

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
    c974:	mov	r1, r7
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
                % lfs->cfg->block_count;
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
        lfs->free.i = 0;
    c976:	str	r7, [r4, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
    c978:	ldr	r0, [r4, #100]	; 0x64
    c97a:	bl	117bc <memset>
        int err = lfs_fs_traverseraw(lfs, lfs_alloc_lookahead, lfs, true);
    c97e:	movs	r3, #1
    c980:	mov	r2, r4
    c982:	ldr	r1, [pc, #140]	; (ca10 <lfs_alloc+0x100>)
    c984:	mov	r0, r4
    c986:	bl	c79c <lfs_fs_traverseraw>
        if (err) {
    c98a:	cmp	r0, #0
    c98c:	beq.n	c91a <lfs_alloc+0xa>
}

// Invalidate the lookahead buffer. This is done during mounting and
// failed traversals
static void lfs_alloc_reset(lfs_t *lfs) {
    lfs->free.off = lfs->seed % lfs->cfg->block_size;
    c98e:	ldr	r2, [r4, #104]	; 0x68
    c990:	ldr	r5, [r4, #44]	; 0x2c
    c992:	ldr	r3, [r2, #28]

    return 0;
}

static void lfs_alloc_ack(lfs_t *lfs) {
    lfs->free.ack = lfs->cfg->block_count;
    c994:	ldr	r1, [r2, #32]
}

// Invalidate the lookahead buffer. This is done during mounting and
// failed traversals
static void lfs_alloc_reset(lfs_t *lfs) {
    lfs->free.off = lfs->seed % lfs->cfg->block_size;
    c996:	udiv	r2, r5, r3
    c99a:	mls	r3, r3, r2, r5

    return 0;
}

static void lfs_alloc_ack(lfs_t *lfs) {
    lfs->free.ack = lfs->cfg->block_count;
    c99e:	str	r1, [r4, #96]	; 0x60

// Invalidate the lookahead buffer. This is done during mounting and
// failed traversals
static void lfs_alloc_reset(lfs_t *lfs) {
    lfs->free.off = lfs->seed % lfs->cfg->block_size;
    lfs->free.size = 0;
    c9a0:	str	r7, [r4, #88]	; 0x58
    lfs->free.i = 0;
    c9a2:	str	r7, [r4, #92]	; 0x5c
}

// Invalidate the lookahead buffer. This is done during mounting and
// failed traversals
static void lfs_alloc_reset(lfs_t *lfs) {
    lfs->free.off = lfs->seed % lfs->cfg->block_size;
    c9a4:	str	r3, [r4, #84]	; 0x54
        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
        int err = lfs_fs_traverseraw(lfs, lfs_alloc_lookahead, lfs, true);
        if (err) {
            lfs_alloc_reset(lfs);
            return err;
    c9a6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            lfs->free.i += 1;
            lfs->free.ack -= 1;

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
    c9aa:	ldr	r1, [r4, #104]	; 0x68
    c9ac:	ldr	r2, [r4, #84]	; 0x54
    c9ae:	ldr	r1, [r1, #32]
    c9b0:	add	r3, r2
    c9b2:	udiv	r2, r3, r1
    c9b6:	mls	r3, r1, r2, r3
    c9ba:	str.w	r3, [r9]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
    c9be:	ldr	r3, [r4, #92]	; 0x5c
    c9c0:	ldr	r5, [r4, #88]	; 0x58
    c9c2:	cmp	r5, r3
    c9c4:	beq.n	ca00 <lfs_alloc+0xf0>
                        (lfs->free.buffer[lfs->free.i / 32]
    c9c6:	lsrs	r1, r3, #5
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
    c9c8:	and.w	r2, r3, #31
    c9cc:	ldr.w	r1, [r7, r1, lsl #2]
    c9d0:	lsl.w	r2, ip, r2
    c9d4:	tst	r2, r1
    c9d6:	beq.n	ca00 <lfs_alloc+0xf0>
    c9d8:	ldr	r1, [r4, #96]	; 0x60
    c9da:	subs	r1, #1
    c9dc:	b.n	c9e6 <lfs_alloc+0xd6>
    c9de:	ldr.w	r0, [r7, r0, lsl #2]
    c9e2:	tst	r2, r0
    c9e4:	beq.n	ca00 <lfs_alloc+0xf0>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
    c9e6:	adds	r3, #1
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
    c9e8:	and.w	r2, r3, #31
    c9ec:	cmp	r3, r5
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
                    lfs->free.ack -= 1;
    c9ee:	str	r1, [r4, #96]	; 0x60
                *block = (lfs->free.off + off) % lfs->cfg->block_count;

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
                        (lfs->free.buffer[lfs->free.i / 32]
    c9f0:	mov.w	r0, r3, lsr #5
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
    c9f4:	lsl.w	r2, ip, r2
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
    c9f8:	str	r3, [r4, #92]	; 0x5c
    c9fa:	add.w	r1, r1, #4294967295
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
    c9fe:	bne.n	c9de <lfs_alloc+0xce>
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
                    lfs->free.ack -= 1;
                }

                return 0;
    ca00:	movs	r0, #0
    ca02:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
            LFS_ERROR("No more free space %"PRIu32,
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
    ca06:	mvn.w	r0, #27
        if (err) {
            lfs_alloc_reset(lfs);
            return err;
        }
    }
}
    ca0a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ca0e:	nop
    ca10:	.word	0x0000ade9

0000ca14 <lfs_dir_alloc>:
    }

    return 0;
}

static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
    ca14:	push	{r4, r5, r6, lr}
    ca16:	mov	r4, r1
    ca18:	sub	sp, #16
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
    ca1a:	adds	r1, #4
    }

    return 0;
}

static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
    ca1c:	mov	r5, r0
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
    ca1e:	bl	c910 <lfs_alloc>
        if (err) {
    ca22:	cbnz	r0, ca6e <lfs_dir_alloc+0x5a>
}

static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
    ca24:	mov	r1, r4
    ca26:	mov	r0, r5
    ca28:	bl	c910 <lfs_alloc>
        if (err) {
    ca2c:	cbnz	r0, ca6e <lfs_dir_alloc+0x5a>
            return err;
        }
    }

    // zero for reproducability in case initial block is unreadable
    dir->rev = 0;
    ca2e:	mov	r2, r4

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
    ca30:	ldr	r6, [r4, #0]
            return err;
        }
    }

    // zero for reproducability in case initial block is unreadable
    dir->rev = 0;
    ca32:	str.w	r0, [r2, #8]!

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
    ca36:	movs	r3, #4
    ca38:	str	r0, [sp, #4]
    ca3a:	str	r2, [sp, #8]
    ca3c:	mov	r1, r0
    ca3e:	str	r3, [sp, #12]
    ca40:	str	r6, [sp, #0]
    ca42:	mov	r2, r5
    ca44:	add.w	r0, r5, #104	; 0x68
    ca48:	bl	afb8 <lfs_bd_read.isra.15>
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
    dir->rev = lfs_fromle32(dir->rev);
    if (err && err != LFS_ERR_CORRUPT) {
    ca4c:	cbnz	r0, ca72 <lfs_dir_alloc+0x5e>
    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
    dir->rev = lfs_fromle32(dir->rev);
    ca4e:	ldr	r3, [r4, #8]
    if (err && err != LFS_ERR_CORRUPT) {
        return err;
    }

    // make sure we don't immediately evict
    dir->rev += dir->rev & 1;
    ca50:	and.w	r2, r3, #1

    // set defaults
    dir->off = sizeof(dir->rev);
    dir->etag = 0xffffffff;
    dir->count = 0;
    ca54:	movs	r0, #0
    if (err && err != LFS_ERR_CORRUPT) {
        return err;
    }

    // make sure we don't immediately evict
    dir->rev += dir->rev & 1;
    ca56:	add	r3, r2

    // set defaults
    dir->off = sizeof(dir->rev);
    ca58:	movs	r1, #4
    dir->etag = 0xffffffff;
    ca5a:	mov.w	r2, #4294967295
    if (err && err != LFS_ERR_CORRUPT) {
        return err;
    }

    // make sure we don't immediately evict
    dir->rev += dir->rev & 1;
    ca5e:	str	r3, [r4, #8]

    // set defaults
    dir->off = sizeof(dir->rev);
    ca60:	str	r1, [r4, #12]
    dir->etag = 0xffffffff;
    ca62:	str	r2, [r4, #16]
    dir->count = 0;
    dir->tail[0] = LFS_BLOCK_NULL;
    ca64:	str	r2, [r4, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
    ca66:	str	r2, [r4, #28]
    dir->rev += dir->rev & 1;

    // set defaults
    dir->off = sizeof(dir->rev);
    dir->etag = 0xffffffff;
    dir->count = 0;
    ca68:	strh	r0, [r4, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
    dir->tail[1] = LFS_BLOCK_NULL;
    dir->erased = false;
    ca6a:	strb	r0, [r4, #22]
    dir->split = false;
    ca6c:	strb	r0, [r4, #23]

    // don't write out yet, let caller take care of that
    return 0;
}
    ca6e:	add	sp, #16
    ca70:	pop	{r4, r5, r6, pc}
    // the revision may be valid
    int err = lfs_bd_read(lfs,
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
    dir->rev = lfs_fromle32(dir->rev);
    if (err && err != LFS_ERR_CORRUPT) {
    ca72:	cmn.w	r0, #84	; 0x54
    ca76:	beq.n	ca4e <lfs_dir_alloc+0x3a>
    dir->erased = false;
    dir->split = false;

    // don't write out yet, let caller take care of that
    return 0;
}
    ca78:	add	sp, #16
    ca7a:	pop	{r4, r5, r6, pc}

0000ca7c <lfs_file_relocate>:
    file->flags &= ~LFS_F_OPENED;
    LFS_TRACE("lfs_file_close -> %d", err);
    return err;
}

static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
    ca7c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ca80:	mov	r6, r1
    ca82:	sub	sp, #36	; 0x24
    ca84:	mov	r5, r0
    ca86:	add.w	sl, r1, #64	; 0x40
                if (err) {
                    return err;
                }
            }

            err = lfs_bd_prog(lfs,
    ca8a:	mov.w	r9, #1
    LFS_ASSERT(file->flags & LFS_F_OPENED);

    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
    ca8e:	add	r1, sp, #28
    ca90:	mov	r0, r5
    ca92:	bl	c910 <lfs_alloc>
        if (err) {
    ca96:	cmp	r0, #0
    ca98:	bne.n	cb30 <lfs_file_relocate+0xb4>
    ca9a:	ldr	r0, [r5, #104]	; 0x68
    return 0;
}

static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
    LFS_ASSERT(block < lfs->cfg->block_count);
    int err = lfs->cfg->erase(lfs->cfg, block);
    ca9c:	ldr	r1, [sp, #28]
    ca9e:	ldr	r3, [r0, #12]
    caa0:	blx	r3
        if (err) {
            return err;
        }

        err = lfs_bd_erase(lfs, nblock);
        if (err) {
    caa2:	cmp	r0, #0
    caa4:	bne.n	cb36 <lfs_file_relocate+0xba>
            }
            return err;
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
    caa6:	ldr.w	lr, [r6, #60]	; 0x3c
    caaa:	cmp.w	lr, #0
    caae:	beq.n	cb44 <lfs_file_relocate+0xc8>
    cab0:	add.w	r3, r5, #104	; 0x68
    cab4:	mov	r4, r0
    cab6:	add.w	r8, sp, #27
    caba:	str	r3, [sp, #20]
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
                err = lfs_dir_getread(lfs, &file->m,
    cabc:	add.w	fp, r6, #8
    cac0:	b.n	cb00 <lfs_file_relocate+0x84>
    cac2:	ldrh	r7, [r6, #4]
    cac4:	str.w	r9, [sp, #12]
    cac8:	lsls	r7, r7, #10
    caca:	orr.w	r7, r7, #536870912	; 0x20000000
    cace:	orr.w	r7, r7, #1048576	; 0x100000
    cad2:	str.w	r8, [sp, #8]
    cad6:	str	r4, [sp, #4]
    cad8:	str	r7, [sp, #0]
    cada:	bl	be84 <lfs_dir_getread.constprop.25>
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
                        i, &data, 1);
                if (err) {
    cade:	cbnz	r0, cb30 <lfs_file_relocate+0xb4>
                if (err) {
                    return err;
                }
            }

            err = lfs_bd_prog(lfs,
    cae0:	ldr	r3, [sp, #28]
    cae2:	mov	r2, r5
    cae4:	stmia.w	sp, {r3, r4, r8, r9}
    cae8:	add.w	r1, r5, #16
    caec:	movs	r3, #1
    caee:	mov	r0, r5
    caf0:	bl	c060 <lfs_bd_prog>
            }
            return err;
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
    caf4:	adds	r4, #1
            }

            err = lfs_bd_prog(lfs,
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
    caf6:	cbnz	r0, cb36 <lfs_file_relocate+0xba>
            }
            return err;
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
    caf8:	ldr.w	lr, [r6, #60]	; 0x3c
    cafc:	cmp	lr, r4
    cafe:	bls.n	cb44 <lfs_file_relocate+0xc8>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
    cb00:	ldr	r7, [r6, #48]	; 0x30
    cb02:	lsls	r7, r7, #11
                err = lfs_dir_getread(lfs, &file->m,
    cb04:	rsb	r3, r4, lr
    cb08:	mov	r2, sl
    cb0a:	mov	r1, fp
    cb0c:	mov	r0, r5
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
    cb0e:	bmi.n	cac2 <lfs_file_relocate+0x46>
                        i, &data, 1);
                if (err) {
                    return err;
                }
            } else {
                err = lfs_bd_read(lfs,
    cb10:	ldr	r2, [r6, #56]	; 0x38
    cb12:	str	r2, [sp, #0]
    cb14:	str.w	r9, [sp, #12]
    cb18:	str.w	r8, [sp, #8]
    cb1c:	str	r4, [sp, #4]
    cb1e:	rsb	r3, r4, lr
    cb22:	mov	r2, r5
    cb24:	mov	r1, sl
    cb26:	ldr	r0, [sp, #20]
    cb28:	bl	afb8 <lfs_bd_read.isra.15>
                        &file->cache, &lfs->rcache, file->off-i,
                        file->block, i, &data, 1);
                if (err) {
    cb2c:	cmp	r0, #0
    cb2e:	beq.n	cae0 <lfs_file_relocate+0x64>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
    }
}
    cb30:	add	sp, #36	; 0x24
    cb32:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

            err = lfs_bd_prog(lfs,
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
                if (err == LFS_ERR_CORRUPT) {
    cb36:	cmn.w	r0, #84	; 0x54
    cb3a:	bne.n	cb30 <lfs_file_relocate+0xb4>
/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
    cb3c:	mov.w	r3, #4294967295
    cb40:	str	r3, [r5, #16]
relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
    }
    cb42:	b.n	ca8e <lfs_file_relocate+0x12>
                return err;
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
    cb44:	ldr	r3, [r5, #104]	; 0x68
    cb46:	ldr	r1, [r5, #28]
    cb48:	ldr	r2, [r3, #40]	; 0x28
    cb4a:	ldr	r0, [r6, #76]	; 0x4c
    cb4c:	bl	e8e8 <memcpy>
        file->cache.block = lfs->pcache.block;
        file->cache.off = lfs->pcache.off;
        file->cache.size = lfs->pcache.size;
    cb50:	add.w	r0, r5, #16
    cb54:	ldmia	r0, {r0, r1, r3}
    rcache->block = LFS_BLOCK_NULL;
}

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
    cb56:	ldr	r2, [r5, #104]	; 0x68
    cb58:	ldr	r2, [r2, #40]	; 0x28
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
        file->cache.block = lfs->pcache.block;
    cb5a:	str	r0, [r6, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
    cb5c:	str	r1, [r6, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
    cb5e:	str	r3, [r6, #72]	; 0x48
    rcache->block = LFS_BLOCK_NULL;
}

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
    cb60:	movs	r1, #255	; 0xff
    cb62:	ldr	r0, [r5, #28]
    cb64:	bl	117bc <memset>
    pcache->block = LFS_BLOCK_NULL;
    cb68:	mov.w	r3, #4294967295
    cb6c:	str	r3, [r5, #16]
        file->cache.off = lfs->pcache.off;
        file->cache.size = lfs->pcache.size;
        lfs_cache_zero(lfs, &lfs->pcache);

        file->block = nblock;
        file->flags |= LFS_F_WRITING;
    cb6e:	ldr	r3, [r6, #48]	; 0x30
        file->cache.block = lfs->pcache.block;
        file->cache.off = lfs->pcache.off;
        file->cache.size = lfs->pcache.size;
        lfs_cache_zero(lfs, &lfs->pcache);

        file->block = nblock;
    cb70:	ldr	r2, [sp, #28]
    cb72:	str	r2, [r6, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
    cb74:	orr.w	r3, r3, #131072	; 0x20000
        return 0;
    cb78:	movs	r0, #0
        file->cache.off = lfs->pcache.off;
        file->cache.size = lfs->pcache.size;
        lfs_cache_zero(lfs, &lfs->pcache);

        file->block = nblock;
        file->flags |= LFS_F_WRITING;
    cb7a:	str	r3, [r6, #48]	; 0x30
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
    }
}
    cb7c:	add	sp, #36	; 0x24
    cb7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cb82:	nop

0000cb84 <lfs_file_write>:
    LFS_TRACE("lfs_file_read -> %"PRId32, size);
    return size;
}

lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
    cb84:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cb88:	mov	r7, r2
    LFS_ASSERT((file->flags & 3) != LFS_O_RDONLY);

    const uint8_t *data = buffer;
    lfs_size_t nsize = size;

    if (file->flags & LFS_F_READING) {
    cb8a:	ldr	r2, [r1, #48]	; 0x30
    LFS_TRACE("lfs_file_read -> %"PRId32, size);
    return size;
}

lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
    cb8c:	sub	sp, #76	; 0x4c
    LFS_ASSERT((file->flags & 3) != LFS_O_RDONLY);

    const uint8_t *data = buffer;
    lfs_size_t nsize = size;

    if (file->flags & LFS_F_READING) {
    cb8e:	lsls	r6, r2, #13
    LFS_TRACE("lfs_file_read -> %"PRId32, size);
    return size;
}

lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
    cb90:	mov	sl, r1
    cb92:	str	r3, [sp, #20]
    cb94:	mov	fp, r0
    LFS_ASSERT((file->flags & 3) != LFS_O_RDONLY);

    const uint8_t *data = buffer;
    lfs_size_t nsize = size;

    if (file->flags & LFS_F_READING) {
    cb96:	bmi.w	ce20 <lfs_file_write+0x29c>
            LFS_TRACE("lfs_file_write -> %d", err);
            return err;
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
    cb9a:	lsls	r5, r2, #20
    cb9c:	ldr.w	r4, [sl, #52]	; 0x34
    cba0:	bmi.w	ccb2 <lfs_file_write+0x12e>
        file->pos = file->ctz.size;
    }

    if (file->pos + size > lfs->file_max) {
    cba4:	ldr	r1, [sp, #20]
    cba6:	ldr.w	r3, [fp, #112]	; 0x70
    cbaa:	add	r1, r4
    cbac:	cmp	r1, r3
    cbae:	bhi.w	cf2c <lfs_file_write+0x3a8>
        // Larger than file limit?
        LFS_TRACE("lfs_file_write -> %d", LFS_ERR_FBIG);
        return LFS_ERR_FBIG;
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
    cbb2:	ands.w	r5, r2, #131072	; 0x20000
    cbb6:	bne.n	cbe6 <lfs_file_write+0x62>
    cbb8:	ldr.w	r3, [sl, #44]	; 0x2c
    cbbc:	cmp	r3, r4
    cbbe:	bcs.n	cbe6 <lfs_file_write+0x62>
        // fill with zeros
        lfs_off_t pos = file->pos;
        file->pos = file->ctz.size;
    cbc0:	str.w	r3, [sl, #52]	; 0x34

        while (file->pos < pos) {
            lfs_ssize_t res = lfs_file_write(lfs, file, &(uint8_t){0}, 1);
    cbc4:	movs	r3, #1
    cbc6:	add.w	r2, sp, #63	; 0x3f
    cbca:	mov	r1, sl
    cbcc:	mov	r0, fp
    cbce:	strb.w	r5, [sp, #63]	; 0x3f
    cbd2:	bl	cb84 <lfs_file_write>
            if (res < 0) {
    cbd6:	cmp	r0, #0
    cbd8:	blt.n	cc88 <lfs_file_write+0x104>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
        // fill with zeros
        lfs_off_t pos = file->pos;
        file->pos = file->ctz.size;

        while (file->pos < pos) {
    cbda:	ldr.w	r3, [sl, #52]	; 0x34
    cbde:	cmp	r3, r4
    cbe0:	bcc.n	cbc4 <lfs_file_write+0x40>
    cbe2:	ldr.w	r2, [sl, #48]	; 0x30
                return res;
            }
        }
    }

    if ((file->flags & LFS_F_INLINE) &&
    cbe6:	lsls	r4, r2, #11
    cbe8:	bmi.n	ccc2 <lfs_file_write+0x13e>
            LFS_TRACE("lfs_file_write -> %d", err);
            return err;
        }
    }

    while (nsize > 0) {
    cbea:	ldr	r3, [sp, #20]
    cbec:	cmp	r3, #0
    cbee:	beq.n	cc7e <lfs_file_write+0xfa>
    cbf0:	add.w	r9, sl, #64	; 0x40
    cbf4:	str	r3, [sp, #24]
            index += 1;
            lfs_size_t skips = lfs_ctz(index) + 1;
            lfs_block_t nhead = head;
            for (lfs_off_t i = 0; i < skips; i++) {
                nhead = lfs_tole32(nhead);
                err = lfs_bd_prog(lfs, pcache, rcache, true,
    cbf6:	mov	r6, r7
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
    cbf8:	lsls	r0, r2, #14
    cbfa:	bpl.n	cc8e <lfs_file_write+0x10a>
                file->off == lfs->cfg->block_size) {
    cbfc:	ldr.w	r7, [fp, #104]	; 0x68
    cc00:	ldr.w	r4, [sl, #60]	; 0x3c
    cc04:	ldr	r5, [r7, #28]
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
    cc06:	cmp	r4, r5
    cc08:	beq.w	ce30 <lfs_file_write+0x2ac>
    cc0c:	ldr.w	r3, [sl, #56]	; 0x38
    cc10:	ldr	r2, [sp, #24]
    cc12:	subs	r5, r5, r4
    cc14:	cmp	r5, r2
    cc16:	it	cs
    cc18:	movcs	r5, r2
    cc1a:	b.n	cc38 <lfs_file_write+0xb4>
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
                    file->block, file->off, data, diff);
            if (err) {
                if (err == LFS_ERR_CORRUPT) {
    cc1c:	cmn.w	r3, #84	; 0x54
                return err;
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
    cc20:	mov	r0, fp
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
                    file->block, file->off, data, diff);
            if (err) {
                if (err == LFS_ERR_CORRUPT) {
    cc22:	bne.w	ce0c <lfs_file_write+0x288>
                return err;
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
    cc26:	bl	ca7c <lfs_file_relocate>
            if (err) {
    cc2a:	cmp	r0, #0
    cc2c:	bne.w	cdfa <lfs_file_write+0x276>
    cc30:	ldr.w	r4, [sl, #60]	; 0x3c
    cc34:	ldr.w	r3, [sl, #56]	; 0x38
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
    cc38:	str	r5, [sp, #12]
    cc3a:	stmia.w	sp, {r3, r4, r6}
    cc3e:	mov	r1, r9
    cc40:	movs	r3, #1
    cc42:	mov	r2, fp
    cc44:	mov	r0, fp
    cc46:	bl	c060 <lfs_bd_prog>
                return err;
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
    cc4a:	mov	r1, sl
        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
                    file->block, file->off, data, diff);
            if (err) {
    cc4c:	mov	r3, r0
    cc4e:	cmp	r0, #0
    cc50:	bne.n	cc1c <lfs_file_write+0x98>
                return err;
            }
        }

        file->pos += diff;
        file->off += diff;
    cc52:	ldr.w	r3, [sl, #60]	; 0x3c

    return 0;
}

static void lfs_alloc_ack(lfs_t *lfs) {
    lfs->free.ack = lfs->cfg->block_count;
    cc56:	ldr.w	r1, [fp, #104]	; 0x68
                LFS_TRACE("lfs_file_write -> %d", err);
                return err;
            }
        }

        file->pos += diff;
    cc5a:	ldr.w	r2, [sl, #52]	; 0x34

    return 0;
}

static void lfs_alloc_ack(lfs_t *lfs) {
    lfs->free.ack = lfs->cfg->block_count;
    cc5e:	ldr	r1, [r1, #32]
                return err;
            }
        }

        file->pos += diff;
        file->off += diff;
    cc60:	add	r3, r5
    cc62:	str.w	r3, [sl, #60]	; 0x3c
            LFS_TRACE("lfs_file_write -> %d", err);
            return err;
        }
    }

    while (nsize > 0) {
    cc66:	ldr	r3, [sp, #24]
                LFS_TRACE("lfs_file_write -> %d", err);
                return err;
            }
        }

        file->pos += diff;
    cc68:	add	r2, r5
    cc6a:	str.w	r2, [sl, #52]	; 0x34
            LFS_TRACE("lfs_file_write -> %d", err);
            return err;
        }
    }

    while (nsize > 0) {
    cc6e:	subs	r3, r3, r5

    return 0;
}

static void lfs_alloc_ack(lfs_t *lfs) {
    lfs->free.ack = lfs->cfg->block_count;
    cc70:	str.w	r1, [fp, #96]	; 0x60
            }
        }

        file->pos += diff;
        file->off += diff;
        data += diff;
    cc74:	add	r6, r5
            LFS_TRACE("lfs_file_write -> %d", err);
            return err;
        }
    }

    while (nsize > 0) {
    cc76:	str	r3, [sp, #24]
    cc78:	ldr.w	r2, [sl, #48]	; 0x30
    cc7c:	bne.n	cbf8 <lfs_file_write+0x74>
        nsize -= diff;

        lfs_alloc_ack(lfs);
    }

    file->flags &= ~LFS_F_ERRED;
    cc7e:	bic.w	r2, r2, #524288	; 0x80000
    LFS_TRACE("lfs_file_write -> %"PRId32, size);
    return size;
    cc82:	ldr	r0, [sp, #20]
        nsize -= diff;

        lfs_alloc_ack(lfs);
    }

    file->flags &= ~LFS_F_ERRED;
    cc84:	str.w	r2, [sl, #48]	; 0x30
    LFS_TRACE("lfs_file_write -> %"PRId32, size);
    return size;
}
    cc88:	add	sp, #76	; 0x4c
    cc8a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
                file->off == lfs->cfg->block_size) {
            if (!(file->flags & LFS_F_INLINE)) {
    cc8e:	lsls	r1, r2, #11
    cc90:	bpl.n	cd1c <lfs_file_write+0x198>
    cc92:	ldr.w	r7, [fp, #104]	; 0x68
                    LFS_TRACE("lfs_file_write -> %d", err);
                    return err;
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
                file->off = file->pos;
    cc96:	ldr.w	r4, [sl, #52]	; 0x34
    cc9a:	str.w	r4, [sl, #60]	; 0x3c
                    file->flags |= LFS_F_ERRED;
                    LFS_TRACE("lfs_file_write -> %d", err);
                    return err;
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
    cc9e:	mvn.w	r3, #1
    cca2:	str.w	r3, [sl, #56]	; 0x38
                file->off = file->pos;
            }

            file->flags |= LFS_F_WRITING;
    cca6:	orr.w	r2, r2, #131072	; 0x20000
    ccaa:	ldr	r5, [r7, #28]
    ccac:	str.w	r2, [sl, #48]	; 0x30
    ccb0:	b.n	cc10 <lfs_file_write+0x8c>
            LFS_TRACE("lfs_file_write -> %d", err);
            return err;
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
    ccb2:	ldr.w	r3, [sl, #44]	; 0x2c
    ccb6:	cmp	r4, r3
        file->pos = file->ctz.size;
    ccb8:	itt	cc
    ccba:	strcc.w	r3, [sl, #52]	; 0x34
    ccbe:	movcc	r4, r3
    ccc0:	b.n	cba4 <lfs_file_write+0x20>
    }

    if ((file->flags & LFS_F_INLINE) &&
            lfs_max(file->pos+nsize, file->ctz.size) >
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size, lfs->cfg->block_size/8))) {
    ccc2:	ldr.w	r5, [fp, #104]	; 0x68
            }
        }
    }

    if ((file->flags & LFS_F_INLINE) &&
            lfs_max(file->pos+nsize, file->ctz.size) >
    ccc6:	ldr.w	r6, [sl, #52]	; 0x34
                return res;
            }
        }
    }

    if ((file->flags & LFS_F_INLINE) &&
    ccca:	ldr	r0, [r5, #40]	; 0x28
    cccc:	ldr	r3, [r5, #28]
    ccce:	movw	r4, #1022	; 0x3fe
    ccd2:	cmp	r4, r0
    ccd4:	it	cs
    ccd6:	movcs	r4, r0
    ccd8:	lsrs	r0, r3, #3
    ccda:	ldr	r3, [sp, #20]
    ccdc:	cmp	r4, r0
    ccde:	add.w	r1, r3, r6
    cce2:	mov	r3, r4
    cce4:	it	cs
    cce6:	movcs	r3, r0
    cce8:	ldr.w	r0, [sl, #44]	; 0x2c
    ccec:	cmp	r1, r0
    ccee:	it	cc
    ccf0:	movcc	r1, r0
    ccf2:	cmp	r1, r3
    ccf4:	bls.w	cbea <lfs_file_write+0x66>

    return 0;
}

static void lfs_alloc_ack(lfs_t *lfs) {
    lfs->free.ack = lfs->cfg->block_count;
    ccf8:	ldr	r3, [r5, #32]
        lfs_cache_drop(lfs, &lfs->pcache);
    }
}

static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
    file->off = file->pos;
    ccfa:	str.w	r6, [sl, #60]	; 0x3c
    lfs_alloc_ack(lfs);
    int err = lfs_file_relocate(lfs, file);
    ccfe:	mov	r1, sl

    return 0;
}

static void lfs_alloc_ack(lfs_t *lfs) {
    lfs->free.ack = lfs->cfg->block_count;
    cd00:	str.w	r3, [fp, #96]	; 0x60
}

static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
    file->off = file->pos;
    lfs_alloc_ack(lfs);
    int err = lfs_file_relocate(lfs, file);
    cd04:	mov	r0, fp
    cd06:	bl	ca7c <lfs_file_relocate>
    if (err) {
    cd0a:	cmp	r0, #0
    cd0c:	bne.n	cdfa <lfs_file_write+0x276>
        return err;
    }

    file->flags &= ~LFS_F_INLINE;
    cd0e:	ldr.w	r2, [sl, #48]	; 0x30
    cd12:	bic.w	r2, r2, #1048576	; 0x100000
    cd16:	str.w	r2, [sl, #48]	; 0x30
    cd1a:	b.n	cbea <lfs_file_write+0x66>
    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
                file->off == lfs->cfg->block_size) {
            if (!(file->flags & LFS_F_INLINE)) {
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
    cd1c:	ldr.w	r1, [sl, #52]	; 0x34
    cd20:	cmp	r1, #0
    cd22:	bne.w	ce38 <lfs_file_write+0x2b4>
    cd26:	ldr.w	r7, [fp, #104]	; 0x68

    return 0;
}

static void lfs_alloc_ack(lfs_t *lfs) {
    lfs->free.ack = lfs->cfg->block_count;
    cd2a:	ldr	r3, [r7, #32]
    cd2c:	str.w	r3, [fp, #96]	; 0x60
                    lfs_cache_zero(lfs, &file->cache);
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
    cd30:	ldr.w	r4, [sl, #52]	; 0x34
    cd34:	ldr.w	r3, [sl, #56]	; 0x38
    cd38:	str	r3, [sp, #44]	; 0x2c
                *block = nblock;
                *off = 0;
                return 0;
            }

            lfs_size_t noff = size - 1;
    cd3a:	subs	r3, r4, #1
    cd3c:	str	r3, [sp, #40]	; 0x28
    cd3e:	str	r4, [sp, #36]	; 0x24
    cd40:	str.w	sl, [sp, #32]
    cd44:	str	r6, [sp, #48]	; 0x30
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
    cd46:	add	r1, sp, #64	; 0x40
    cd48:	mov	r0, fp
    cd4a:	bl	c910 <lfs_alloc>
        if (err) {
    cd4e:	cmp	r0, #0
    cd50:	bne.n	cdf6 <lfs_file_write+0x272>
    cd52:	ldr.w	r0, [fp, #104]	; 0x68
    return 0;
}

static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
    LFS_ASSERT(block < lfs->cfg->block_count);
    int err = lfs->cfg->erase(lfs->cfg, block);
    cd56:	ldr	r1, [sp, #64]	; 0x40
    cd58:	ldr	r3, [r0, #12]
    cd5a:	blx	r3
            return err;
        }

        {
            err = lfs_bd_erase(lfs, nblock);
            if (err) {
    cd5c:	cmp	r0, #0
    cd5e:	bne.w	ce7a <lfs_file_write+0x2f6>
                    goto relocate;
                }
                return err;
            }

            if (size == 0) {
    cd62:	ldr	r3, [sp, #36]	; 0x24
    cd64:	cmp	r3, #0
    cd66:	beq.w	cf3e <lfs_file_write+0x3ba>
    cd6a:	ldr.w	r7, [fp, #104]	; 0x68
                *block = nblock;
                *off = 0;
                return 0;
            }

            lfs_size_t noff = size - 1;
    cd6e:	ldr	r6, [sp, #40]	; 0x28


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
    lfs_off_t size = *off;
    lfs_off_t b = lfs->cfg->block_size - 2*4;
    cd70:	ldr	r4, [r7, #28]
                *block = nblock;
                *off = 0;
                return 0;
            }

            lfs_size_t noff = size - 1;
    cd72:	mov	r0, r6


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
    lfs_off_t size = *off;
    lfs_off_t b = lfs->cfg->block_size - 2*4;
    cd74:	sub.w	r5, r4, #8
    lfs_off_t i = size / b;
    cd78:	udiv	r3, r6, r5
    if (i == 0) {
    cd7c:	cbz	r3, cd9e <lfs_file_write+0x21a>
}

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
    cd7e:	subs	r0, r3, #1
    cd80:	bl	10cb8 <__popcountsi2>
        return 0;
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
    cd84:	adds	r0, #2
    cd86:	sub.w	r8, r6, r0, lsl #2
    cd8a:	udiv	r8, r8, r5
    cd8e:	mov	r0, r8
    cd90:	bl	10cb8 <__popcountsi2>
    *off = size - b*i - 4*lfs_popc(i);
    cd94:	mls	r5, r8, r5, r6
    cd98:	sub.w	r0, r5, r0, lsl #2
    cd9c:	mov	r3, r8
                return 0;
            }

            lfs_size_t noff = size - 1;
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
            noff = noff + 1;
    cd9e:	adds	r6, r0, #1

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
    cda0:	cmp	r4, r6
    cda2:	beq.n	ce8a <lfs_file_write+0x306>
                for (lfs_off_t i = 0; i < noff; i++) {
    cda4:	cmp	r6, #0
    cda6:	beq.w	cf32 <lfs_file_write+0x3ae>
    cdaa:	add.w	r8, fp, #104	; 0x68
    cdae:	movs	r5, #0
    cdb0:	add	r4, sp, #68	; 0x44
                    uint8_t data;
                    err = lfs_bd_read(lfs,
    cdb2:	movs	r7, #1
    cdb4:	ldr.w	sl, [sp, #44]	; 0x2c
    cdb8:	b.n	cdd6 <lfs_file_write+0x252>
                            head, i, &data, 1);
                    if (err) {
                        return err;
                    }

                    err = lfs_bd_prog(lfs,
    cdba:	ldr	r0, [sp, #64]	; 0x40
    cdbc:	str	r7, [sp, #12]
    cdbe:	stmia.w	sp, {r0, r5}
    cdc2:	str	r4, [sp, #8]
    cdc4:	mov	r0, fp
    cdc6:	bl	c060 <lfs_bd_prog>
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
            noff = noff + 1;

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
                for (lfs_off_t i = 0; i < noff; i++) {
    cdca:	adds	r5, #1
                    }

                    err = lfs_bd_prog(lfs,
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
    cdcc:	cmp	r0, #0
    cdce:	bne.n	ce7a <lfs_file_write+0x2f6>
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
            noff = noff + 1;

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
                for (lfs_off_t i = 0; i < noff; i++) {
    cdd0:	cmp	r6, r5
    cdd2:	beq.w	cf10 <lfs_file_write+0x38c>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
    cdd6:	subs	r3, r6, r5
    cdd8:	mov	r2, fp
    cdda:	movs	r1, #0
    cddc:	str	r7, [sp, #12]
    cdde:	str	r4, [sp, #8]
    cde0:	str	r5, [sp, #4]
    cde2:	str.w	sl, [sp]
    cde6:	mov	r0, r8
    cde8:	bl	afb8 <lfs_bd_read.isra.15>
                            head, i, &data, 1);
                    if (err) {
                        return err;
                    }

                    err = lfs_bd_prog(lfs,
    cdec:	movs	r3, #1
    cdee:	mov	r2, fp
    cdf0:	mov	r1, r9
                for (lfs_off_t i = 0; i < noff; i++) {
                    uint8_t data;
                    err = lfs_bd_read(lfs,
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
    cdf2:	cmp	r0, #0
    cdf4:	beq.n	cdba <lfs_file_write+0x236>
    cdf6:	ldr.w	sl, [sp, #32]
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size, lfs->cfg->block_size/8))) {
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
        if (err) {
            file->flags |= LFS_F_ERRED;
    cdfa:	ldr.w	r3, [sl, #48]	; 0x30
    cdfe:	orr.w	r3, r3, #524288	; 0x80000
    ce02:	str.w	r3, [sl, #48]	; 0x30
    }

    file->flags &= ~LFS_F_ERRED;
    LFS_TRACE("lfs_file_write -> %"PRId32, size);
    return size;
}
    ce06:	add	sp, #76	; 0x4c
    ce08:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    file->block, file->off, data, diff);
            if (err) {
                if (err == LFS_ERR_CORRUPT) {
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
    ce0c:	ldr.w	r2, [sl, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
    ce10:	mov	r0, r3
                    file->block, file->off, data, diff);
            if (err) {
                if (err == LFS_ERR_CORRUPT) {
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
    ce12:	orr.w	r2, r2, #524288	; 0x80000
    ce16:	str.w	r2, [sl, #48]	; 0x30
    }

    file->flags &= ~LFS_F_ERRED;
    LFS_TRACE("lfs_file_write -> %"PRId32, size);
    return size;
}
    ce1a:	add	sp, #76	; 0x4c
    ce1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const uint8_t *data = buffer;
    lfs_size_t nsize = size;

    if (file->flags & LFS_F_READING) {
        // drop any reads
        int err = lfs_file_flush(lfs, file);
    ce20:	bl	cf58 <lfs_file_flush>
        if (err) {
    ce24:	cmp	r0, #0
    ce26:	bne.w	cc88 <lfs_file_write+0x104>
    ce2a:	ldr.w	r2, [sl, #48]	; 0x30
    ce2e:	b.n	cb9a <lfs_file_write+0x16>

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
                file->off == lfs->cfg->block_size) {
            if (!(file->flags & LFS_F_INLINE)) {
    ce30:	lsls	r3, r2, #11
    ce32:	bpl.w	cd2a <lfs_file_write+0x1a6>
    ce36:	b.n	cc96 <lfs_file_write+0x112>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
    ce38:	subs	r1, #1
    ce3a:	add.w	r0, sl, #56	; 0x38
    ce3e:	add.w	r4, sl, #60	; 0x3c
    ce42:	ldr.w	r3, [sl, #44]	; 0x2c
    ce46:	ldr.w	r2, [sl, #40]	; 0x28
    ce4a:	str	r1, [sp, #0]
    ce4c:	str	r0, [sp, #4]
    ce4e:	str	r4, [sp, #8]
    ce50:	mov	r1, r9
    ce52:	mov	r0, fp
    ce54:	bl	bd94 <lfs_ctz_find.constprop.24>
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
                    if (err) {
    ce58:	cmp	r0, #0
    ce5a:	bne.n	cdfa <lfs_file_write+0x276>
    rcache->block = LFS_BLOCK_NULL;
}

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
    ce5c:	ldr.w	r3, [fp, #104]	; 0x68
    ce60:	ldr.w	r0, [sl, #76]	; 0x4c
    ce64:	ldr	r2, [r3, #40]	; 0x28
    ce66:	movs	r1, #255	; 0xff
    ce68:	bl	117bc <memset>
    pcache->block = LFS_BLOCK_NULL;
    ce6c:	mov.w	r3, #4294967295
    ce70:	ldr.w	r7, [fp, #104]	; 0x68
    ce74:	str.w	r3, [sl, #64]	; 0x40
    ce78:	b.n	cd2a <lfs_file_write+0x1a6>
                nhead = lfs_tole32(nhead);
                err = lfs_bd_prog(lfs, pcache, rcache, true,
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
                if (err) {
                    if (err == LFS_ERR_CORRUPT) {
    ce7a:	cmn.w	r0, #84	; 0x54
    ce7e:	bne.n	cdf6 <lfs_file_write+0x272>
/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
    ce80:	ldr	r2, [sp, #32]
    ce82:	mov.w	r3, #4294967295
    ce86:	str	r3, [r2, #64]	; 0x40
    ce88:	b.n	cd46 <lfs_file_write+0x1c2>

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
    ce8a:	adds	r3, #1
    ce8c:	rbit	r6, r3
            }

            // append block
            index += 1;
            lfs_size_t skips = lfs_ctz(index) + 1;
            lfs_block_t nhead = head;
    ce90:	add	r4, sp, #72	; 0x48
    ce92:	clz	r6, r6
    ce96:	ldr	r3, [sp, #44]	; 0x2c
    ce98:	str.w	r3, [r4, #-4]!
                return 0;
            }

            // append block
            index += 1;
            lfs_size_t skips = lfs_ctz(index) + 1;
    ce9c:	adds	r3, r6, #1
    ce9e:	str	r3, [sp, #52]	; 0x34
            lfs_block_t nhead = head;
            for (lfs_off_t i = 0; i < skips; i++) {
    cea0:	movs	r5, #0
    cea2:	add.w	r8, fp, #104	; 0x68
    cea6:	str	r6, [sp, #28]
    cea8:	mov	sl, r3
                nhead = lfs_tole32(nhead);
                err = lfs_bd_prog(lfs, pcache, rcache, true,
    ceaa:	ldr	r3, [sp, #64]	; 0x40
    ceac:	str	r4, [sp, #8]
    ceae:	movs	r2, #4
    ceb0:	lsls	r7, r5, #2
    ceb2:	str	r2, [sp, #12]
    ceb4:	stmia.w	sp, {r3, r7}
    ceb8:	mov	r2, fp
    ceba:	movs	r3, #1
    cebc:	mov	r1, r9
    cebe:	mov	r0, fp
    cec0:	bl	c060 <lfs_bd_prog>
                    }
                    return err;
                }

                if (i != skips-1) {
                    err = lfs_bd_read(lfs,
    cec4:	movs	r3, #4
    cec6:	mov	r2, fp
    cec8:	mov	r1, r0
            lfs_block_t nhead = head;
            for (lfs_off_t i = 0; i < skips; i++) {
                nhead = lfs_tole32(nhead);
                err = lfs_bd_prog(lfs, pcache, rcache, true,
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
    ceca:	ldr.w	lr, [sp, #68]	; 0x44
                if (err) {
    cece:	cmp	r0, #0
    ced0:	bne.n	ce7a <lfs_file_write+0x2f6>
                        goto relocate;
                    }
                    return err;
                }

                if (i != skips-1) {
    ced2:	ldr	r6, [sp, #28]
    ced4:	cmp	r6, r5
                    err = lfs_bd_read(lfs,
    ced6:	mov	r0, r8

            // append block
            index += 1;
            lfs_size_t skips = lfs_ctz(index) + 1;
            lfs_block_t nhead = head;
            for (lfs_off_t i = 0; i < skips; i++) {
    ced8:	add.w	r5, r5, #1
                        goto relocate;
                    }
                    return err;
                }

                if (i != skips-1) {
    cedc:	beq.n	cef2 <lfs_file_write+0x36e>
                    err = lfs_bd_read(lfs,
    cede:	movs	r6, #4
    cee0:	str	r6, [sp, #12]
    cee2:	str	r4, [sp, #8]
    cee4:	str	r7, [sp, #4]
    cee6:	str.w	lr, [sp]
    ceea:	bl	afb8 <lfs_bd_read.isra.15>
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
                    if (err) {
    ceee:	cmp	r0, #0
    cef0:	bne.n	cdf6 <lfs_file_write+0x272>

            // append block
            index += 1;
            lfs_size_t skips = lfs_ctz(index) + 1;
            lfs_block_t nhead = head;
            for (lfs_off_t i = 0; i < skips; i++) {
    cef2:	cmp	sl, r5
    cef4:	bhi.n	ceaa <lfs_file_write+0x326>
                    }
                }
            }

            *block = nblock;
            *off = 4*skips;
    cef6:	ldr	r3, [sp, #52]	; 0x34
    cef8:	ldr.w	sl, [sp, #32]
    cefc:	ldr	r6, [sp, #48]	; 0x30
    cefe:	ldr.w	r7, [fp, #104]	; 0x68
    cf02:	lsls	r4, r3, #2
                        return err;
                    }
                }
            }

            *block = nblock;
    cf04:	ldr	r3, [sp, #64]	; 0x40
            *off = 4*skips;
    cf06:	str.w	r4, [sl, #60]	; 0x3c
                        return err;
                    }
                }
            }

            *block = nblock;
    cf0a:	str.w	r3, [sl, #56]	; 0x38
    cf0e:	b.n	cf26 <lfs_file_write+0x3a2>
    cf10:	ldr.w	sl, [sp, #32]
    cf14:	ldr	r6, [sp, #48]	; 0x30
    cf16:	ldr.w	r7, [fp, #104]	; 0x68
                        }
                        return err;
                    }
                }

                *block = nblock;
    cf1a:	ldr	r3, [sp, #64]	; 0x40
                *off = noff;
    cf1c:	str.w	r5, [sl, #60]	; 0x3c
    cf20:	mov	r4, r5
                        }
                        return err;
                    }
                }

                *block = nblock;
    cf22:	str.w	r3, [sl, #56]	; 0x38
    cf26:	ldr.w	r2, [sl, #48]	; 0x30
    cf2a:	b.n	cca6 <lfs_file_write+0x122>
    }

    if (file->pos + size > lfs->file_max) {
        // Larger than file limit?
        LFS_TRACE("lfs_file_write -> %d", LFS_ERR_FBIG);
        return LFS_ERR_FBIG;
    cf2c:	mvn.w	r0, #26
    cf30:	b.n	cc88 <lfs_file_write+0x104>
    cf32:	mov	r8, r6
    cf34:	ldr.w	sl, [sp, #32]
    cf38:	ldr	r6, [sp, #48]	; 0x30
                return 0;
            }

            lfs_size_t noff = size - 1;
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
            noff = noff + 1;
    cf3a:	mov	r5, r8
    cf3c:	b.n	cf1a <lfs_file_write+0x396>
    cf3e:	ldr.w	sl, [sp, #32]
    cf42:	ldr	r6, [sp, #48]	; 0x30
    cf44:	ldr.w	r7, [fp, #104]	; 0x68
    cf48:	mov	r4, r3
                }
                return err;
            }

            if (size == 0) {
                *block = nblock;
    cf4a:	ldr	r3, [sp, #64]	; 0x40
                *off = 0;
    cf4c:	str.w	r4, [sl, #60]	; 0x3c
                }
                return err;
            }

            if (size == 0) {
                *block = nblock;
    cf50:	str.w	r3, [sl, #56]	; 0x38
    cf54:	b.n	cf26 <lfs_file_write+0x3a2>
    cf56:	nop

0000cf58 <lfs_file_flush>:
}

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
    LFS_ASSERT(file->flags & LFS_F_OPENED);

    if (file->flags & LFS_F_READING) {
    cf58:	ldr	r2, [r1, #48]	; 0x30
    cf5a:	lsls	r3, r2, #13
    cf5c:	bpl.n	cf70 <lfs_file_flush+0x18>
        if (!(file->flags & LFS_F_INLINE)) {
    cf5e:	lsls	r3, r2, #11
/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
    cf60:	it	pl
    cf62:	movpl.w	r3, #4294967295

    if (file->flags & LFS_F_READING) {
        if (!(file->flags & LFS_F_INLINE)) {
            lfs_cache_drop(lfs, &file->cache);
        }
        file->flags &= ~LFS_F_READING;
    cf66:	bic.w	r2, r2, #262144	; 0x40000
/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
    cf6a:	it	pl
    cf6c:	strpl	r3, [r1, #64]	; 0x40

    if (file->flags & LFS_F_READING) {
        if (!(file->flags & LFS_F_INLINE)) {
            lfs_cache_drop(lfs, &file->cache);
        }
        file->flags &= ~LFS_F_READING;
    cf6e:	str	r2, [r1, #48]	; 0x30
    }

    if (file->flags & LFS_F_WRITING) {
    cf70:	ands.w	r3, r2, #131072	; 0x20000
    cf74:	beq.n	d026 <lfs_file_flush+0xce>

    file->flags &= ~LFS_F_INLINE;
    return 0;
}

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
    cf76:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cf7a:	mov	r5, r1
        }
        file->flags &= ~LFS_F_READING;
    }

    if (file->flags & LFS_F_WRITING) {
        lfs_off_t pos = file->pos;
    cf7c:	ldr	r7, [r1, #52]	; 0x34

        if (!(file->flags & LFS_F_INLINE)) {
    cf7e:	ands.w	r1, r2, #1048576	; 0x100000

    file->flags &= ~LFS_F_INLINE;
    return 0;
}

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
    cf82:	sub	sp, #88	; 0x58
    cf84:	mov	r4, r0
    }

    if (file->flags & LFS_F_WRITING) {
        lfs_off_t pos = file->pos;

        if (!(file->flags & LFS_F_INLINE)) {
    cf86:	bne.n	d004 <lfs_file_flush+0xac>
            // copy over anything after current branch
            lfs_file_t orig = {
    cf88:	movs	r2, #84	; 0x54
    cf8a:	add	r0, sp, #4
    cf8c:	bl	117bc <memset>
    cf90:	ldmia.w	r4, {r0, r1, r2, r3}
/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
    cf94:	mov.w	ip, #4294967295
    if (file->flags & LFS_F_WRITING) {
        lfs_off_t pos = file->pos;

        if (!(file->flags & LFS_F_INLINE)) {
            // copy over anything after current branch
            lfs_file_t orig = {
    cf98:	add.w	lr, sp, #68	; 0x44
    cf9c:	stmia.w	lr, {r0, r1, r2, r3}
    cfa0:	ldr	r6, [r5, #40]	; 0x28
    cfa2:	ldr	r0, [r5, #44]	; 0x2c
/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
    cfa4:	str.w	ip, [r4]
                .pos = file->pos,
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);

            while (file->pos < file->ctz.size) {
    cfa8:	ldr	r2, [r5, #52]	; 0x34
    cfaa:	ldr	r3, [r5, #44]	; 0x2c
    if (file->flags & LFS_F_WRITING) {
        lfs_off_t pos = file->pos;

        if (!(file->flags & LFS_F_INLINE)) {
            // copy over anything after current branch
            lfs_file_t orig = {
    cfac:	ldr	r1, [pc, #176]	; (d060 <lfs_file_flush+0x108>)
    cfae:	str	r6, [sp, #44]	; 0x2c
                .pos = file->pos,
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);

            while (file->pos < file->ctz.size) {
    cfb0:	cmp	r2, r3
    if (file->flags & LFS_F_WRITING) {
        lfs_off_t pos = file->pos;

        if (!(file->flags & LFS_F_INLINE)) {
            // copy over anything after current branch
            lfs_file_t orig = {
    cfb2:	str	r7, [sp, #56]	; 0x38
    cfb4:	str	r0, [sp, #48]	; 0x30
    cfb6:	str	r1, [sp, #52]	; 0x34
                .pos = file->pos,
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);

            while (file->pos < file->ctz.size) {
    cfb8:	bcs.n	d02a <lfs_file_flush+0xd2>
/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
    cfba:	mov	r8, ip
    cfbc:	b.n	cfde <lfs_file_flush+0x86>
                lfs_ssize_t res = lfs_file_read(lfs, &orig, &data, 1);
                if (res < 0) {
                    return res;
                }

                res = lfs_file_write(lfs, file, &data, 1);
    cfbe:	bl	cb84 <lfs_file_write>
                if (res < 0) {
    cfc2:	cmp	r0, #0
    cfc4:	blt.n	d020 <lfs_file_flush+0xc8>
                    return res;
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
    cfc6:	ldr	r3, [r4, #0]
    cfc8:	adds	r3, #1
/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
    cfca:	it	ne
    cfcc:	strne.w	r8, [r4]
                .pos = file->pos,
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);

            while (file->pos < file->ctz.size) {
    cfd0:	ldr	r2, [r5, #52]	; 0x34
    cfd2:	ldr	r3, [r5, #44]	; 0x2c
/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
    cfd4:	it	ne
    cfd6:	strne.w	r8, [sp, #68]	; 0x44
                .pos = file->pos,
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);

            while (file->pos < file->ctz.size) {
    cfda:	cmp	r2, r3
    cfdc:	bcs.n	d02a <lfs_file_flush+0xd2>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_read(lfs, &orig, &data, 1);
    cfde:	movs	r3, #1
    cfe0:	add.w	r2, sp, #3
    cfe4:	add	r1, sp, #4
    cfe6:	mov	r0, r4
    cfe8:	bl	d064 <lfs_file_read>
                if (res < 0) {
    cfec:	subs	r6, r0, #0
                    return res;
                }

                res = lfs_file_write(lfs, file, &data, 1);
    cfee:	mov.w	r3, #1
    cff2:	add.w	r2, sp, #3
    cff6:	mov	r1, r5
    cff8:	mov	r0, r4
            while (file->pos < file->ctz.size) {
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_read(lfs, &orig, &data, 1);
                if (res < 0) {
    cffa:	bge.n	cfbe <lfs_file_flush+0x66>

            while (file->pos < file->ctz.size) {
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_read(lfs, &orig, &data, 1);
    cffc:	mov	r0, r6

        file->pos = pos;
    }

    return 0;
}
    cffe:	add	sp, #88	; 0x58
    d000:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
    return (a > b) ? a : b;
    d004:	ldr	r3, [r5, #44]	; 0x2c
    d006:	cmp	r3, r7
    d008:	it	cc
    d00a:	movcc	r3, r7

        // actual file updates
        file->ctz.head = file->block;
        file->ctz.size = file->pos;
        file->flags &= ~LFS_F_WRITING;
        file->flags |= LFS_F_DIRTY;
    d00c:	bic.w	r2, r2, #131072	; 0x20000
    d010:	orr.w	r2, r2, #65536	; 0x10000
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
        }

        // actual file updates
        file->ctz.head = file->block;
    d014:	ldr	r1, [r5, #56]	; 0x38
        file->ctz.size = file->pos;
        file->flags &= ~LFS_F_WRITING;
        file->flags |= LFS_F_DIRTY;
    d016:	str	r2, [r5, #48]	; 0x30
            file->pos = lfs_max(file->pos, file->ctz.size);
        }

        // actual file updates
        file->ctz.head = file->block;
        file->ctz.size = file->pos;
    d018:	str	r3, [r5, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
        file->flags |= LFS_F_DIRTY;

        file->pos = pos;
    d01a:	str	r7, [r5, #52]	; 0x34
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
        }

        // actual file updates
        file->ctz.head = file->block;
    d01c:	str	r1, [r5, #40]	; 0x28
        file->flags |= LFS_F_DIRTY;

        file->pos = pos;
    }

    return 0;
    d01e:	movs	r0, #0
}
    d020:	add	sp, #88	; 0x58
    d022:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        file->flags |= LFS_F_DIRTY;

        file->pos = pos;
    }

    return 0;
    d026:	mov	r0, r3
    d028:	bx	lr
    d02a:	add.w	r6, r5, #64	; 0x40
    d02e:	b.n	d040 <lfs_file_flush+0xe8>

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
                if (err) {
                    if (err == LFS_ERR_CORRUPT) {
    d030:	cmn.w	r3, #84	; 0x54

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
                err = lfs_file_relocate(lfs, file);
    d034:	mov	r0, r4

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
                if (err) {
                    if (err == LFS_ERR_CORRUPT) {
    d036:	bne.n	d05a <lfs_file_flush+0x102>

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
                err = lfs_file_relocate(lfs, file);
    d038:	bl	ca7c <lfs_file_relocate>
                if (err) {
    d03c:	cmp	r0, #0
    d03e:	bne.n	d020 <lfs_file_flush+0xc8>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
    d040:	movs	r3, #1
    d042:	mov	r1, r6
    d044:	mov	r2, r4
    d046:	mov	r0, r4
    d048:	bl	bfd4 <lfs_bd_flush>

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
                err = lfs_file_relocate(lfs, file);
    d04c:	mov	r1, r5
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
                if (err) {
    d04e:	mov	r3, r0
    d050:	cmp	r0, #0
    d052:	bne.n	d030 <lfs_file_flush+0xd8>
    d054:	ldr	r3, [r5, #52]	; 0x34
    d056:	ldr	r2, [r5, #48]	; 0x30
    d058:	b.n	d00c <lfs_file_flush+0xb4>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
    d05a:	mov	r0, r3
    d05c:	b.n	d020 <lfs_file_flush+0xc8>
    d05e:	nop
    d060:	.word	0x00200001

0000d064 <lfs_file_read>:
    LFS_TRACE("lfs_file_sync -> %d", 0);
    return 0;
}

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
    d064:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d068:	mov	r7, r2
    LFS_ASSERT((file->flags & 3) != LFS_O_WRONLY);

    uint8_t *data = buffer;
    lfs_size_t nsize = size;

    if (file->flags & LFS_F_WRITING) {
    d06a:	ldr	r2, [r1, #48]	; 0x30
    d06c:	lsls	r6, r2, #14
    LFS_TRACE("lfs_file_sync -> %d", 0);
    return 0;
}

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
    d06e:	sub	sp, #28
    d070:	mov	r4, r1
    d072:	mov	r5, r3
    d074:	mov	r8, r0
    LFS_ASSERT((file->flags & 3) != LFS_O_WRONLY);

    uint8_t *data = buffer;
    lfs_size_t nsize = size;

    if (file->flags & LFS_F_WRITING) {
    d076:	bmi.n	d16e <lfs_file_read+0x10a>
            LFS_TRACE("lfs_file_read -> %d", err);
            return err;
        }
    }

    if (file->pos >= file->ctz.size) {
    d078:	ldr	r0, [r4, #52]	; 0x34
    d07a:	ldr	r2, [r4, #44]	; 0x2c
    d07c:	cmp	r0, r2
    d07e:	bcs.n	d166 <lfs_file_read+0x102>
}

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
    return (a < b) ? a : b;
    d080:	subs	r2, r2, r0
    d082:	cmp	r2, r5
    d084:	mov	r3, r2
    d086:	it	cs
    d088:	movcs	r3, r5
    d08a:	str	r3, [sp, #20]
    }

    size = lfs_min(size, file->ctz.size - file->pos);
    nsize = size;

    while (nsize > 0) {
    d08c:	cmp	r3, #0
    d08e:	beq.n	d17c <lfs_file_read+0x118>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
                file->off == lfs->cfg->block_size) {
            if (!(file->flags & LFS_F_INLINE)) {
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
    d090:	add.w	r3, r4, #56	; 0x38
    d094:	add.w	r9, r4, #64	; 0x40
    }

    size = lfs_min(size, file->ctz.size - file->pos);
    nsize = size;

    while (nsize > 0) {
    d098:	ldr	r6, [sp, #20]
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
                file->off == lfs->cfg->block_size) {
            if (!(file->flags & LFS_F_INLINE)) {
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
    d09a:	str	r3, [sp, #16]
                if (err) {
                    LFS_TRACE("lfs_file_read -> %d", err);
                    return err;
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
    d09c:	mvn.w	sl, #1
    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
                file->off == lfs->cfg->block_size) {
            if (!(file->flags & LFS_F_INLINE)) {
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
    d0a0:	add.w	fp, r4, #60	; 0x3c
    d0a4:	b.n	d0f8 <lfs_file_read+0x94>
    nsize = size;

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
                file->off == lfs->cfg->block_size) {
    d0a6:	ldr.w	r3, [r8, #104]	; 0x68
    d0aa:	ldr.w	lr, [r4, #60]	; 0x3c
    d0ae:	ldr	r3, [r3, #28]
    size = lfs_min(size, file->ctz.size - file->pos);
    nsize = size;

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
    d0b0:	cmp	lr, r3
    d0b2:	beq.n	d0fe <lfs_file_read+0x9a>
    d0b4:	rsb	r5, lr, r3
    d0b8:	cmp	r5, r6
    d0ba:	it	cs
    d0bc:	movcs	r5, r6
            file->flags |= LFS_F_READING;
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
        if (file->flags & LFS_F_INLINE) {
    d0be:	ands.w	r1, r1, #1048576	; 0x100000
    d0c2:	beq.n	d126 <lfs_file_read+0xc2>
            int err = lfs_dir_getread(lfs, &file->m,
    d0c4:	ldrh	r2, [r4, #4]
    d0c6:	str	r5, [sp, #12]
    d0c8:	lsls	r2, r2, #10
    d0ca:	orr.w	r2, r2, #536870912	; 0x20000000
    d0ce:	orr.w	r2, r2, #1048576	; 0x100000
    d0d2:	stmia.w	sp, {r2, lr}
    d0d6:	str	r7, [sp, #8]
    d0d8:	mov	r2, r9
    d0da:	add.w	r1, r4, #8
    d0de:	mov	r0, r8
    d0e0:	bl	be84 <lfs_dir_getread.constprop.25>
                    NULL, &file->cache, lfs->cfg->block_size,
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
                    file->off, data, diff);
            if (err) {
    d0e4:	cbnz	r0, d13e <lfs_file_read+0xda>
                LFS_TRACE("lfs_file_read -> %d", err);
                return err;
            }
        }

        file->pos += diff;
    d0e6:	ldr	r0, [r4, #52]	; 0x34
        file->off += diff;
    d0e8:	ldr	r3, [r4, #60]	; 0x3c
                LFS_TRACE("lfs_file_read -> %d", err);
                return err;
            }
        }

        file->pos += diff;
    d0ea:	add	r0, r5
        file->off += diff;
    d0ec:	add	r3, r5
    }

    size = lfs_min(size, file->ctz.size - file->pos);
    nsize = size;

    while (nsize > 0) {
    d0ee:	subs	r6, r6, r5
            }
        }

        file->pos += diff;
        file->off += diff;
        data += diff;
    d0f0:	add	r7, r5
                LFS_TRACE("lfs_file_read -> %d", err);
                return err;
            }
        }

        file->pos += diff;
    d0f2:	str	r0, [r4, #52]	; 0x34
        file->off += diff;
    d0f4:	str	r3, [r4, #60]	; 0x3c
    }

    size = lfs_min(size, file->ctz.size - file->pos);
    nsize = size;

    while (nsize > 0) {
    d0f6:	beq.n	d17c <lfs_file_read+0x118>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
    d0f8:	ldr	r1, [r4, #48]	; 0x30
    d0fa:	lsls	r2, r1, #13
    d0fc:	bmi.n	d0a6 <lfs_file_read+0x42>
                file->off == lfs->cfg->block_size) {
            if (!(file->flags & LFS_F_INLINE)) {
    d0fe:	lsls	r3, r1, #11
    d100:	bpl.n	d144 <lfs_file_read+0xe0>
                    LFS_TRACE("lfs_file_read -> %d", err);
                    return err;
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
                file->off = file->pos;
    d102:	mov	lr, r0
    d104:	str	r0, [r4, #60]	; 0x3c
                if (err) {
                    LFS_TRACE("lfs_file_read -> %d", err);
                    return err;
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
    d106:	str.w	sl, [r4, #56]	; 0x38
    d10a:	ldr.w	r3, [r8, #104]	; 0x68
    d10e:	ldr	r3, [r3, #28]
    d110:	rsb	r5, lr, r3
                file->off = file->pos;
            }

            file->flags |= LFS_F_READING;
    d114:	orr.w	r1, r1, #262144	; 0x40000
    d118:	cmp	r5, r6
    d11a:	str	r1, [r4, #48]	; 0x30
    d11c:	it	cs
    d11e:	movcs	r5, r6
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
        if (file->flags & LFS_F_INLINE) {
    d120:	ands.w	r1, r1, #1048576	; 0x100000
    d124:	bne.n	d0c4 <lfs_file_read+0x60>
            if (err) {
                LFS_TRACE("lfs_file_read -> %d", err);
                return err;
            }
        } else {
            int err = lfs_bd_read(lfs,
    d126:	ldr	r2, [r4, #56]	; 0x38
    d128:	str	r5, [sp, #12]
    d12a:	stmia.w	sp, {r2, lr}
    d12e:	str	r7, [sp, #8]
    d130:	mov	r2, r9
    d132:	add.w	r0, r8, #104	; 0x68
    d136:	bl	afb8 <lfs_bd_read.isra.15>
                    NULL, &file->cache, lfs->cfg->block_size,
                    file->block, file->off, data, diff);
            if (err) {
    d13a:	cmp	r0, #0
    d13c:	beq.n	d0e6 <lfs_file_read+0x82>
        nsize -= diff;
    }

    LFS_TRACE("lfs_file_read -> %"PRId32, size);
    return size;
}
    d13e:	add	sp, #28
    d140:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
                file->off == lfs->cfg->block_size) {
            if (!(file->flags & LFS_F_INLINE)) {
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
    d144:	ldr	r1, [sp, #16]
    d146:	ldr	r3, [r4, #44]	; 0x2c
    d148:	ldr	r2, [r4, #40]	; 0x28
    d14a:	str.w	fp, [sp, #8]
    d14e:	stmia.w	sp, {r0, r1}
    d152:	mov	r1, r9
    d154:	mov	r0, r8
    d156:	bl	bd94 <lfs_ctz_find.constprop.24>
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
    d15a:	cmp	r0, #0
    d15c:	bne.n	d13e <lfs_file_read+0xda>
    d15e:	ldr	r1, [r4, #48]	; 0x30
    d160:	ldr.w	lr, [r4, #60]	; 0x3c
    d164:	b.n	d10a <lfs_file_read+0xa6>
    }

    if (file->pos >= file->ctz.size) {
        // eof if past end
        LFS_TRACE("lfs_file_read -> %d", 0);
        return 0;
    d166:	movs	r0, #0
        nsize -= diff;
    }

    LFS_TRACE("lfs_file_read -> %"PRId32, size);
    return size;
}
    d168:	add	sp, #28
    d16a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t *data = buffer;
    lfs_size_t nsize = size;

    if (file->flags & LFS_F_WRITING) {
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
    d16e:	bl	cf58 <lfs_file_flush>
        if (err) {
    d172:	cmp	r0, #0
    d174:	beq.n	d078 <lfs_file_read+0x14>
        nsize -= diff;
    }

    LFS_TRACE("lfs_file_read -> %"PRId32, size);
    return size;
}
    d176:	add	sp, #28
    d178:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        data += diff;
        nsize -= diff;
    }

    LFS_TRACE("lfs_file_read -> %"PRId32, size);
    return size;
    d17c:	ldr	r0, [sp, #20]
}
    d17e:	add	sp, #28
    d180:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d184 <lfs_file_seek>:
    LFS_TRACE("lfs_file_write -> %"PRId32, size);
    return size;
}

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
    d184:	push	{r3, r4, r5, r6, r7, lr}
    d186:	mov	r7, r2
    d188:	mov	r4, r3
    d18a:	mov	r6, r0
    d18c:	mov	r5, r1
    LFS_TRACE("lfs_file_seek(%p, %p, %"PRId32", %d)",
            (void*)lfs, (void*)file, off, whence);
    LFS_ASSERT(file->flags & LFS_F_OPENED);

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
    d18e:	bl	cf58 <lfs_file_flush>
    if (err) {
    d192:	cbnz	r0, d1a6 <lfs_file_seek+0x22>
        return err;
    }

    // find new pos
    lfs_off_t npos = file->pos;
    if (whence == LFS_SEEK_SET) {
    d194:	cbnz	r4, d1a8 <lfs_file_seek+0x24>
        npos = off;
    d196:	mov	r0, r7
        npos = file->pos + off;
    } else if (whence == LFS_SEEK_END) {
        npos = file->ctz.size + off;
    }

    if (npos > lfs->file_max) {
    d198:	ldr	r3, [r6, #112]	; 0x70
    d19a:	cmp	r3, r0
    d19c:	bcc.n	d1a2 <lfs_file_seek+0x1e>
        LFS_TRACE("lfs_file_seek -> %d", LFS_ERR_INVAL);
        return LFS_ERR_INVAL;
    }

    // update pos
    file->pos = npos;
    d19e:	str	r0, [r5, #52]	; 0x34
    d1a0:	pop	{r3, r4, r5, r6, r7, pc}
    }

    if (npos > lfs->file_max) {
        // file position out of range
        LFS_TRACE("lfs_file_seek -> %d", LFS_ERR_INVAL);
        return LFS_ERR_INVAL;
    d1a2:	mvn.w	r0, #21

    // update pos
    file->pos = npos;
    LFS_TRACE("lfs_file_seek -> %"PRId32, npos);
    return npos;
}
    d1a6:	pop	{r3, r4, r5, r6, r7, pc}

    // find new pos
    lfs_off_t npos = file->pos;
    if (whence == LFS_SEEK_SET) {
        npos = off;
    } else if (whence == LFS_SEEK_CUR) {
    d1a8:	cmp	r4, #1
        LFS_TRACE("lfs_file_seek -> %d", err);
        return err;
    }

    // find new pos
    lfs_off_t npos = file->pos;
    d1aa:	ldr	r0, [r5, #52]	; 0x34
    if (whence == LFS_SEEK_SET) {
        npos = off;
    } else if (whence == LFS_SEEK_CUR) {
    d1ac:	beq.n	d1b4 <lfs_file_seek+0x30>
        npos = file->pos + off;
    } else if (whence == LFS_SEEK_END) {
    d1ae:	cmp	r4, #2
    d1b0:	bne.n	d198 <lfs_file_seek+0x14>
        npos = file->ctz.size + off;
    d1b2:	ldr	r0, [r5, #44]	; 0x2c
    d1b4:	add	r0, r7
    d1b6:	b.n	d198 <lfs_file_seek+0x14>

0000d1b8 <lfs_file_truncate>:
    LFS_TRACE("lfs_file_truncate(%p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, size);
    LFS_ASSERT(file->flags & LFS_F_OPENED);
    LFS_ASSERT((file->flags & 3) != LFS_O_RDONLY);

    if (size > LFS_FILE_MAX) {
    d1b8:	cmp	r2, #0
    d1ba:	blt.n	d276 <lfs_file_truncate+0xbe>
    file->pos = npos;
    LFS_TRACE("lfs_file_seek -> %"PRId32, npos);
    return npos;
}

int lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {
    d1bc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

lfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {
    LFS_TRACE("lfs_file_size(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(file->flags & LFS_F_OPENED);
    (void)lfs;
    if (file->flags & LFS_F_WRITING) {
    d1c0:	ldr	r3, [r1, #48]	; 0x30
    if (size > LFS_FILE_MAX) {
        LFS_TRACE("lfs_file_truncate -> %d", LFS_ERR_INVAL);
        return LFS_ERR_INVAL;
    }

    lfs_off_t pos = file->pos;
    d1c2:	ldr.w	r8, [r1, #52]	; 0x34

lfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {
    LFS_TRACE("lfs_file_size(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(file->flags & LFS_F_OPENED);
    (void)lfs;
    if (file->flags & LFS_F_WRITING) {
    d1c6:	tst.w	r3, #131072	; 0x20000
    file->pos = npos;
    LFS_TRACE("lfs_file_seek -> %"PRId32, npos);
    return npos;
}

int lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {
    d1ca:	sub	sp, #28
    LFS_ASSERT(file->flags & LFS_F_OPENED);
    (void)lfs;
    if (file->flags & LFS_F_WRITING) {
        LFS_TRACE("lfs_file_size -> %"PRId32,
                lfs_max(file->pos, file->ctz.size));
        return lfs_max(file->pos, file->ctz.size);
    d1cc:	ldr	r3, [r1, #44]	; 0x2c

lfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {
    LFS_TRACE("lfs_file_size(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(file->flags & LFS_F_OPENED);
    (void)lfs;
    if (file->flags & LFS_F_WRITING) {
    d1ce:	bne.n	d1f2 <lfs_file_truncate+0x3a>
        return LFS_ERR_INVAL;
    }

    lfs_off_t pos = file->pos;
    lfs_off_t oldsize = lfs_file_size(lfs, file);
    if (size < oldsize) {
    d1d0:	cmp	r2, r3
    d1d2:	mov	r5, r2
    d1d4:	mov	r4, r1
    d1d6:	mov	r6, r0
    d1d8:	bcc.n	d202 <lfs_file_truncate+0x4a>
        }

        file->ctz.head = file->block;
        file->ctz.size = size;
        file->flags |= LFS_F_DIRTY | LFS_F_READING;
    } else if (size > oldsize) {
    d1da:	bhi.n	d23a <lfs_file_truncate+0x82>
            }
        }
    }

    // restore pos
    lfs_soff_t res = lfs_file_seek(lfs, file, pos, LFS_SEEK_SET);
    d1dc:	mov	r2, r8
    d1de:	mov	r1, r4
    d1e0:	mov	r0, r6
    d1e2:	movs	r3, #0
    d1e4:	bl	d184 <lfs_file_seek>
    d1e8:	and.w	r0, r0, r0, asr #31
      return (int)res;
    }

    LFS_TRACE("lfs_file_truncate -> %d", 0);
    return 0;
}
    d1ec:	add	sp, #28
    d1ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LFS_ASSERT(file->flags & LFS_F_OPENED);
    (void)lfs;
    if (file->flags & LFS_F_WRITING) {
        LFS_TRACE("lfs_file_size -> %"PRId32,
                lfs_max(file->pos, file->ctz.size));
        return lfs_max(file->pos, file->ctz.size);
    d1f2:	cmp	r3, r8
    d1f4:	it	cc
    d1f6:	movcc	r3, r8
        return LFS_ERR_INVAL;
    }

    lfs_off_t pos = file->pos;
    lfs_off_t oldsize = lfs_file_size(lfs, file);
    if (size < oldsize) {
    d1f8:	cmp	r2, r3
    d1fa:	mov	r5, r2
    d1fc:	mov	r4, r1
    d1fe:	mov	r6, r0
    d200:	bcs.n	d1da <lfs_file_truncate+0x22>
        // need to flush since directly changing metadata
        int err = lfs_file_flush(lfs, file);
    d202:	bl	cf58 <lfs_file_flush>
        if (err) {
    d206:	cmp	r0, #0
    d208:	bne.n	d1ec <lfs_file_truncate+0x34>
            LFS_TRACE("lfs_file_truncate -> %d", err);
            return err;
        }

        // lookup new head in ctz skip list
        err = lfs_ctz_find(lfs, NULL, &file->cache,
    d20a:	add.w	r0, r4, #60	; 0x3c
    d20e:	add.w	r1, r4, #56	; 0x38
    d212:	ldr	r3, [r4, #44]	; 0x2c
    d214:	ldr	r2, [r4, #40]	; 0x28
    d216:	str	r0, [sp, #8]
    d218:	str	r1, [sp, #4]
    d21a:	str	r5, [sp, #0]
    d21c:	add.w	r1, r4, #64	; 0x40
    d220:	mov	r0, r6
    d222:	bl	bd94 <lfs_ctz_find.constprop.24>
                file->ctz.head, file->ctz.size,
                size, &file->block, &file->off);
        if (err) {
    d226:	cmp	r0, #0
    d228:	bne.n	d1ec <lfs_file_truncate+0x34>
            return err;
        }

        file->ctz.head = file->block;
        file->ctz.size = size;
        file->flags |= LFS_F_DIRTY | LFS_F_READING;
    d22a:	ldr	r3, [r4, #48]	; 0x30
        if (err) {
            LFS_TRACE("lfs_file_truncate -> %d", err);
            return err;
        }

        file->ctz.head = file->block;
    d22c:	ldr	r2, [r4, #56]	; 0x38
        file->ctz.size = size;
    d22e:	str	r5, [r4, #44]	; 0x2c
        file->flags |= LFS_F_DIRTY | LFS_F_READING;
    d230:	orr.w	r3, r3, #327680	; 0x50000
    d234:	str	r3, [r4, #48]	; 0x30
        if (err) {
            LFS_TRACE("lfs_file_truncate -> %d", err);
            return err;
        }

        file->ctz.head = file->block;
    d236:	str	r2, [r4, #40]	; 0x28
    d238:	b.n	d1dc <lfs_file_truncate+0x24>
        file->ctz.size = size;
        file->flags |= LFS_F_DIRTY | LFS_F_READING;
    } else if (size > oldsize) {
        // flush+seek if not already at end
        if (file->pos != oldsize) {
    d23a:	cmp	r8, r3
    d23c:	beq.n	d272 <lfs_file_truncate+0xba>
            lfs_soff_t res = lfs_file_seek(lfs, file, 0, LFS_SEEK_END);
    d23e:	movs	r3, #2
    d240:	movs	r2, #0
    d242:	bl	d184 <lfs_file_seek>
            if (res < 0) {
    d246:	cmp	r0, #0
    d248:	blt.n	d1ec <lfs_file_truncate+0x34>
    d24a:	ldr	r7, [r4, #52]	; 0x34
            }
        }

        // fill with zeros
        while (file->pos < size) {
            lfs_ssize_t res = lfs_file_write(lfs, file, &(uint8_t){0}, 1);
    d24c:	mov.w	r9, #0
    d250:	b.n	d260 <lfs_file_truncate+0xa8>
    d252:	strb.w	r9, [sp, #23]
    d256:	bl	cb84 <lfs_file_write>
            if (res < 0) {
    d25a:	cmp	r0, #0
    d25c:	blt.n	d1ec <lfs_file_truncate+0x34>
    d25e:	ldr	r7, [r4, #52]	; 0x34
                return (int)res;
            }
        }

        // fill with zeros
        while (file->pos < size) {
    d260:	cmp	r5, r7
            lfs_ssize_t res = lfs_file_write(lfs, file, &(uint8_t){0}, 1);
    d262:	mov.w	r3, #1
    d266:	add.w	r2, sp, #23
    d26a:	mov	r1, r4
    d26c:	mov	r0, r6
                return (int)res;
            }
        }

        // fill with zeros
        while (file->pos < size) {
    d26e:	bhi.n	d252 <lfs_file_truncate+0x9a>
    d270:	b.n	d1dc <lfs_file_truncate+0x24>
    d272:	mov	r7, r8
    d274:	b.n	d24c <lfs_file_truncate+0x94>
    LFS_ASSERT(file->flags & LFS_F_OPENED);
    LFS_ASSERT((file->flags & 3) != LFS_O_RDONLY);

    if (size > LFS_FILE_MAX) {
        LFS_TRACE("lfs_file_truncate -> %d", LFS_ERR_INVAL);
        return LFS_ERR_INVAL;
    d276:	mvn.w	r0, #21
    d27a:	bx	lr

0000d27c <lfs_dir_compact>:
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
}

static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
    d27c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d280:	sub	sp, #148	; 0x94
    // save some state in case block is bad
    const lfs_block_t oldpair[2] = {dir->pair[0], dir->pair[1]};
    d282:	ldr	r4, [r1, #0]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
}

static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
    d284:	ldrh.w	r7, [sp, #188]	; 0xbc
    d288:	ldrh.w	sl, [sp, #192]	; 0xc0
    d28c:	str	r1, [sp, #44]	; 0x2c
    const lfs_block_t oldpair[2] = {dir->pair[0], dir->pair[1]};
    bool relocated = false;
    bool tired = false;

    // should we split?
    while (end - begin > 1) {
    d28e:	rsb	r9, r7, sl

static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
    // save some state in case block is bad
    const lfs_block_t oldpair[2] = {dir->pair[0], dir->pair[1]};
    d292:	ldr	r1, [r1, #4]
    d294:	str	r4, [sp, #64]	; 0x40
    bool relocated = false;
    bool tired = false;

    // should we split?
    while (end - begin > 1) {
    d296:	cmp.w	r9, #1
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
}

static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
    d29a:	mov	fp, r0
    d29c:	str	r2, [sp, #60]	; 0x3c
    d29e:	str	r3, [sp, #52]	; 0x34
    // save some state in case block is bad
    const lfs_block_t oldpair[2] = {dir->pair[0], dir->pair[1]};
    d2a0:	str	r1, [sp, #68]	; 0x44
    bool relocated = false;
    bool tired = false;

    // should we split?
    while (end - begin > 1) {
    d2a2:	ble.w	d5ae <lfs_dir_compact+0x332>
    d2a6:	negs	r3, r7
    d2a8:	sxth	r3, r3
    d2aa:	str	r3, [sp, #56]	; 0x38
    d2ac:	add	r3, sp, #112	; 0x70
    d2ae:	str	r3, [sp, #48]	; 0x30
    d2b0:	ldr.w	r8, [sp, #60]	; 0x3c
    d2b4:	b.n	d30c <lfs_dir_compact+0x90>
        }

        // space is complicated, we need room for tail, crc, gstate,
        // cleanup delete, and we cap at half a block to give room
        // for metadata updates.
        if (end - begin < 0xff &&
    d2b6:	cmp.w	r9, #254	; 0xfe

        // can't fit, need to split, we should really be finding the
        // largest size that fits with a small binary search, but right now
        // it's not worth the code size
        uint16_t split = (end - begin) / 2;
        err = lfs_dir_split(lfs, dir, attrs, attrcount,
    d2ba:	mov	r0, fp
    const lfs_block_t oldpair[2] = {dir->pair[0], dir->pair[1]};
    bool relocated = false;
    bool tired = false;

    // should we split?
    while (end - begin > 1) {
    d2bc:	rsb	r9, r7, r4
        }

        // space is complicated, we need room for tail, crc, gstate,
        // cleanup delete, and we cap at half a block to give room
        // for metadata updates.
        if (end - begin < 0xff &&
    d2c0:	bgt.n	d2f4 <lfs_dir_compact+0x78>
                size <= lfs_min(lfs->cfg->block_size - 36,
    d2c2:	ldr.w	ip, [fp, #104]	; 0x68
    d2c6:	ldr.w	r6, [ip, #24]
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
    return a - (a % alignment);
}

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
    return lfs_aligndown(a + alignment-1, alignment);
    d2ca:	ldr.w	r5, [ip, #28]
    d2ce:	add.w	lr, r6, #4294967295
    d2d2:	add.w	r5, lr, r5, lsr #1
        }

        // space is complicated, we need room for tail, crc, gstate,
        // cleanup delete, and we cap at half a block to give room
        // for metadata updates.
        if (end - begin < 0xff &&
    d2d6:	udiv	lr, r5, r6
    d2da:	mls	lr, r6, lr, r5
    d2de:	ldr.w	r6, [ip, #28]
    d2e2:	rsb	lr, lr, r5
    d2e6:	subs	r6, #36	; 0x24
    d2e8:	cmp	lr, r6
    d2ea:	ldr	r5, [sp, #112]	; 0x70
    d2ec:	it	cs
    d2ee:	movcs	lr, r6
    d2f0:	cmp	r5, lr
    d2f2:	bls.n	d36e <lfs_dir_compact+0xf2>

        // can't fit, need to split, we should really be finding the
        // largest size that fits with a small binary search, but right now
        // it's not worth the code size
        uint16_t split = (end - begin) / 2;
        err = lfs_dir_split(lfs, dir, attrs, attrcount,
    d2f4:	ldr	r5, [sp, #184]	; 0xb8
    d2f6:	str.w	sl, [sp, #8]
    d2fa:	str	r4, [sp, #4]
    d2fc:	str	r5, [sp, #0]
    d2fe:	bl	e804 <lfs_dir_split>
                source, begin+split, end);
        if (err) {
    d302:	cbnz	r0, d358 <lfs_dir_compact+0xdc>
    const lfs_block_t oldpair[2] = {dir->pair[0], dir->pair[1]};
    bool relocated = false;
    bool tired = false;

    // should we split?
    while (end - begin > 1) {
    d304:	cmp.w	r9, #1
    d308:	ble.n	d372 <lfs_dir_compact+0xf6>

        // can't fit, need to split, we should really be finding the
        // largest size that fits with a small binary search, but right now
        // it's not worth the code size
        uint16_t split = (end - begin) / 2;
        err = lfs_dir_split(lfs, dir, attrs, attrcount,
    d30a:	mov	sl, r4

    // should we split?
    while (end - begin > 1) {
        // find size
        lfs_size_t size = 0;
        int err = lfs_dir_traverse(lfs,
    d30c:	ldr	r3, [sp, #48]	; 0x30
    d30e:	str	r3, [sp, #32]
    d310:	ldr	r3, [pc, #692]	; (d5c8 <lfs_dir_compact+0x34c>)
    d312:	str	r3, [sp, #28]
    d314:	ldr	r3, [sp, #56]	; 0x38
    d316:	str	r3, [sp, #24]
    d318:	movs	r3, #0
    d31a:	ldr	r5, [sp, #52]	; 0x34
    d31c:	str	r3, [sp, #12]
    d31e:	ldr	r3, [pc, #684]	; (d5cc <lfs_dir_compact+0x350>)
    d320:	str	r3, [sp, #8]
    d322:	movs	r2, #0
    d324:	mov.w	r3, #4294967295
    d328:	ldr	r1, [sp, #184]	; 0xb8
    d32a:	str.w	sl, [sp, #20]
    d32e:	str	r7, [sp, #16]
    d330:	str	r5, [sp, #4]
    d332:	str.w	r8, [sp]
    d336:	mov	r0, fp
    bool tired = false;

    // should we split?
    while (end - begin > 1) {
        // find size
        lfs_size_t size = 0;
    d338:	str	r2, [sp, #112]	; 0x70
        int err = lfs_dir_traverse(lfs,
    d33a:	bl	b728 <lfs_dir_traverse>

        // can't fit, need to split, we should really be finding the
        // largest size that fits with a small binary search, but right now
        // it's not worth the code size
        uint16_t split = (end - begin) / 2;
        err = lfs_dir_split(lfs, dir, attrs, attrcount,
    d33e:	add.w	r4, r7, r9, asr #1
    d342:	uxth	r4, r4
    d344:	mov	r3, r5
    d346:	mov	r2, r8
    d348:	ldr	r1, [sp, #44]	; 0x2c
                source, 0, 0xffffffff, attrs, attrcount,
                LFS_MKTAG(0x400, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                begin, end, -begin,
                lfs_dir_commit_size, &size);
        if (err) {
    d34a:	cmp	r0, #0
    d34c:	beq.n	d2b6 <lfs_dir_compact+0x3a>
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
                {LFS_MKTAG_IF(moveid != 0x3ff,
                    LFS_TYPE_DELETE, moveid, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_TAIL + parent.split, 0x3ff, 8), newpair}));
        lfs_pair_fromle32(newpair);
        if (err) {
    d34e:	mov	r5, r0
            return err;
        }
    }

    return 0;
}
    d350:	mov	r0, r5
    d352:	add	sp, #148	; 0x94
    d354:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                source, begin+split, end);
        if (err) {
            // if we fail to split, we may be able to overcompact, unless
            // we're too big for even the full block, in which case our
            // only option is to error
            if (err == LFS_ERR_NOSPC && size <= lfs->cfg->block_size - 36) {
    d358:	cmn.w	r0, #28
    d35c:	bne.n	d34e <lfs_dir_compact+0xd2>
    d35e:	ldr.w	ip, [fp, #104]	; 0x68
    d362:	ldr	r2, [sp, #112]	; 0x70
    d364:	ldr.w	r3, [ip, #28]
    d368:	subs	r3, #36	; 0x24
    d36a:	cmp	r3, r2
    d36c:	bcc.n	d34e <lfs_dir_compact+0xd2>
    d36e:	mov	r8, sl
    d370:	b.n	d378 <lfs_dir_compact+0xfc>
    d372:	ldr.w	ip, [fp, #104]	; 0x68
    d376:	mov	r8, r4

        end = begin + split;
    }

    // increment revision count
    dir->rev += 1;
    d378:	ldr	r0, [sp, #44]	; 0x2c
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    if (lfs->cfg->block_cycles > 0 &&
    d37a:	ldr.w	r3, [ip, #36]	; 0x24

        end = begin + split;
    }

    // increment revision count
    dir->rev += 1;
    d37e:	ldr	r2, [r0, #8]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    if (lfs->cfg->block_cycles > 0 &&
    d380:	cmp	r3, #0

        end = begin + split;
    }

    // increment revision count
    dir->rev += 1;
    d382:	add.w	r2, r2, #1
    d386:	str	r2, [r0, #8]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    if (lfs->cfg->block_cycles > 0 &&
    d388:	ble.n	d3d4 <lfs_dir_compact+0x158>
    d38a:	adds	r3, #1
    d38c:	orr.w	r3, r3, #1
    d390:	udiv	r1, r2, r3
    d394:	mls	r3, r3, r1, r2
    d398:	cbnz	r3, d3d4 <lfs_dir_compact+0x158>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    d39a:	ldr	r3, [r0, #0]
    d39c:	cmp	r3, #1
    d39e:	bls.n	d3aa <lfs_dir_compact+0x12e>
    d3a0:	ldr	r3, [r0, #4]
    d3a2:	cmp	r3, #1
    d3a4:	bls.n	d3aa <lfs_dir_compact+0x12e>
            // this, relocations increase the overall complexity of
            // lfs_migration, which is already a delicate operation.
#endif
        } else {
            // we're writing too much, time to relocate
            tired = true;
    d3a6:	movs	r4, #1
    d3a8:	b.n	d404 <lfs_dir_compact+0x188>
    return 0;
}

lfs_ssize_t lfs_fs_size(lfs_t *lfs) {
    LFS_TRACE("lfs_fs_size(%p)", (void*)lfs);
    lfs_size_t size = 0;
    d3aa:	add	r2, sp, #144	; 0x90
    d3ac:	movs	r3, #0
    d3ae:	str.w	r3, [r2, #-32]!
    int err = lfs_fs_traverseraw(lfs, lfs_fs_size_count, &size, false);
    d3b2:	ldr	r1, [pc, #540]	; (d5d0 <lfs_dir_compact+0x354>)
    d3b4:	mov	r0, fp
    d3b6:	bl	c79c <lfs_fs_traverseraw>
    if (err) {
    d3ba:	cmp	r0, #0
    d3bc:	beq.w	d582 <lfs_dir_compact+0x306>
            (dir->rev % ((lfs->cfg->block_cycles+1)|1) == 0)) {
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
            // oh no! we're writing too much to the superblock,
            // should we expand?
            lfs_ssize_t res = lfs_fs_size(lfs);
            if (res < 0) {
    d3c0:	cmp	r0, #0
    d3c2:	blt.n	d34e <lfs_dir_compact+0xd2>
                return res;
            }

            // do we have extra space? littlefs can't reclaim this space
            // by itself, so expand cautiously
            if ((lfs_size_t)res < lfs->cfg->block_count/2) {
    d3c4:	ldr.w	ip, [fp, #104]	; 0x68
    d3c8:	ldr.w	r3, [ip, #32]
    d3cc:	cmp.w	r0, r3, lsr #1
    d3d0:	bcc.w	d586 <lfs_dir_compact+0x30a>
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
    // save some state in case block is bad
    const lfs_block_t oldpair[2] = {dir->pair[0], dir->pair[1]};
    bool relocated = false;
    d3d4:	movs	r5, #0

    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
    d3d6:	ldr.w	r3, [ip, #28]
                .block = dir->pair[1],
    d3da:	ldr	r2, [sp, #44]	; 0x2c

    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
    d3dc:	subs	r3, #8
                .block = dir->pair[1],
    d3de:	ldr	r1, [r2, #4]

    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
    d3e0:	str	r3, [sp, #132]	; 0x84
    d3e2:	movs	r2, #0
    d3e4:	mov.w	r4, #4294967295
    d3e8:	str	r1, [sp, #112]	; 0x70
    d3ea:	str	r2, [sp, #116]	; 0x74
    d3ec:	str	r2, [sp, #128]	; 0x80
    d3ee:	str	r4, [sp, #120]	; 0x78
    d3f0:	str	r4, [sp, #124]	; 0x7c
    return 0;
}

static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
    LFS_ASSERT(block < lfs->cfg->block_count);
    int err = lfs->cfg->erase(lfs->cfg, block);
    d3f2:	ldr.w	r3, [ip, #12]
    d3f6:	mov	r0, ip
    d3f8:	blx	r3
                .end = lfs->cfg->block_size - 8,
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
            if (err) {
    d3fa:	cbz	r0, d444 <lfs_dir_compact+0x1c8>
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
            if (err) {
                if (err == LFS_ERR_CORRUPT) {
    d3fc:	cmn.w	r0, #84	; 0x54
    d400:	bne.n	d34e <lfs_dir_compact+0xd2>
    d402:	movs	r4, #0
/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
    d404:	mov.w	r3, #4294967295
    d408:	str.w	r3, [fp, #16]
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    d40c:	ldr	r3, [sp, #44]	; 0x2c
    d40e:	ldr	r3, [r3, #0]
    d410:	cmp	r3, #1
    d412:	bls.n	d438 <lfs_dir_compact+0x1bc>
    d414:	ldr	r3, [sp, #44]	; 0x2c
    d416:	ldr	r3, [r3, #4]
    d418:	cmp	r3, #1
    d41a:	bls.n	d438 <lfs_dir_compact+0x1bc>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
    d41c:	ldr	r3, [sp, #44]	; 0x2c
    d41e:	mov	r0, fp
    d420:	adds	r1, r3, #4
    d422:	bl	c910 <lfs_alloc>
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
    d426:	cbz	r0, d430 <lfs_dir_compact+0x1b4>
    d428:	cmn.w	r0, #28
    d42c:	bne.n	d34e <lfs_dir_compact+0xd2>
    d42e:	cbz	r4, d438 <lfs_dir_compact+0x1bc>
    d430:	ldr.w	ip, [fp, #104]	; 0x68
        }
        break;

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
    d434:	movs	r5, #1
    d436:	b.n	d3d6 <lfs_dir_compact+0x15a>

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
    d438:	mvn.w	r5, #27
            return err;
        }
    }

    return 0;
}
    d43c:	mov	r0, r5
    d43e:	add	sp, #148	; 0x94
    d440:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                return err;
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
            err = lfs_dir_commitprog(lfs, &commit,
    d444:	ldr	r2, [sp, #44]	; 0x2c
    d446:	add	r3, sp, #112	; 0x70
    d448:	str	r3, [sp, #48]	; 0x30
    d44a:	mov	r1, r3
    d44c:	adds	r2, #8
    d44e:	movs	r3, #4
    d450:	mov	r0, fp
    d452:	bl	c10c <lfs_dir_commitprog>
                    &dir->rev, sizeof(dir->rev));
            dir->rev = lfs_fromle32(dir->rev);
            if (err) {
    d456:	cmp	r0, #0
    d458:	bne.n	d3fc <lfs_dir_compact+0x180>
                }
                return err;
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
    d45a:	negs	r1, r7
    d45c:	sxth	r1, r1
    d45e:	ldr	r3, [sp, #52]	; 0x34
    d460:	ldr	r6, [pc, #368]	; (d5d4 <lfs_dir_compact+0x358>)
    d462:	str	r3, [sp, #4]
    d464:	add.w	lr, sp, #72	; 0x48
    d468:	ldr	r3, [sp, #60]	; 0x3c
    d46a:	str	r1, [sp, #24]
    d46c:	ldr	r1, [pc, #348]	; (d5cc <lfs_dir_compact+0x350>)
    d46e:	str	r0, [sp, #12]
    d470:	str	r3, [sp, #0]
    d472:	mov	r2, r0
    d474:	mov	r3, r4
    d476:	str	r1, [sp, #8]
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
    d478:	ldr	r4, [sp, #48]	; 0x30
                }
                return err;
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
    d47a:	str.w	r8, [sp, #20]
    d47e:	str	r7, [sp, #16]
    d480:	str.w	lr, [sp, #32]
    d484:	str	r6, [sp, #28]
    d486:	ldr	r1, [sp, #184]	; 0xb8
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
    d488:	str.w	fp, [sp, #72]	; 0x48
                }
                return err;
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
    d48c:	mov	r0, fp
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
    d48e:	str	r4, [sp, #76]	; 0x4c
                }
                return err;
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
    d490:	bl	b728 <lfs_dir_traverse>
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
                        lfs, &commit});
            if (err) {
    d494:	cmp	r0, #0
    d496:	bne.n	d3fc <lfs_dir_compact+0x180>
    pair[0] = pair[1];
    pair[1] = t;
}

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    d498:	ldr	r2, [sp, #44]	; 0x2c
    d49a:	ldr	r3, [r2, #24]
    d49c:	adds	r3, #1
    d49e:	beq.n	d4c4 <lfs_dir_compact+0x248>
    d4a0:	ldr	r3, [r2, #28]
    d4a2:	adds	r3, #1
    d4a4:	beq.n	d4c4 <lfs_dir_compact+0x248>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
                lfs_pair_tole32(dir->tail);
                err = lfs_dir_commitattr(lfs, &commit,
    d4a6:	ldr	r1, [sp, #44]	; 0x2c
    d4a8:	ldr	r2, [pc, #300]	; (d5d8 <lfs_dir_compact+0x35c>)
    d4aa:	ldrb	r3, [r1, #23]
    d4ac:	add.w	r3, r3, #1536	; 0x600
    d4b0:	lsls	r3, r3, #20
    d4b2:	orrs	r2, r3
    d4b4:	mov	r3, r1
    d4b6:	adds	r3, #24
    d4b8:	ldr	r1, [sp, #48]	; 0x30
    d4ba:	mov	r0, fp
    d4bc:	bl	c14c <lfs_dir_commitattr>
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail);
                lfs_pair_fromle32(dir->tail);
                if (err) {
    d4c0:	cmp	r0, #0
    d4c2:	bne.n	d3fc <lfs_dir_compact+0x180>
                    return err;
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
    d4c4:	movs	r3, #0
    d4c6:	str	r3, [sp, #100]	; 0x64
    d4c8:	str	r3, [sp, #104]	; 0x68
            if (!relocated) {
    d4ca:	cmp	r5, #0
    d4cc:	bne.n	d5c0 <lfs_dir_compact+0x344>
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
    for (int i = 0; i < 3; i++) {
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
    d4ce:	mov	r2, r3
    d4d0:	ldr.w	r1, [fp, #68]	; 0x44
    d4d4:	ldr.w	r3, [fp, #64]	; 0x40
    d4d8:	ldr.w	r6, [fp, #56]	; 0x38
    d4dc:	ldr.w	r0, [fp, #48]	; 0x30
    d4e0:	mov	r4, r2
    d4e2:	eors	r4, r3
    d4e4:	eors	r2, r1
    d4e6:	ldr.w	r3, [fp, #60]	; 0x3c
    d4ea:	ldr.w	r1, [fp, #52]	; 0x34
    d4ee:	eors	r2, r6
    d4f0:	eors	r4, r1
    d4f2:	eors	r3, r0
    d4f4:	ldr.w	r1, [fp, #72]	; 0x48
    d4f8:	ldr.w	r6, [fp, #76]	; 0x4c
    d4fc:	eors	r3, r1
    d4fe:	ldr.w	r1, [fp, #80]	; 0x50
            if (!relocated) {
                lfs_gstate_xor(&delta, &lfs->gdisk);
                lfs_gstate_xor(&delta, &lfs->gstate);
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
    d502:	bic.w	r3, r3, #1020	; 0x3fc
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
    for (int i = 0; i < 3; i++) {
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
    d506:	eors	r4, r6
            if (!relocated) {
                lfs_gstate_xor(&delta, &lfs->gdisk);
                lfs_gstate_xor(&delta, &lfs->gstate);
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
    d508:	bic.w	r3, r3, #3
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
    for (int i = 0; i < 3; i++) {
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
    d50c:	eor.w	r6, r2, r1
                lfs_gstate_xor(&delta, &lfs->gstate);
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);

            err = lfs_dir_getgstate(lfs, dir, &delta);
    d510:	mov	r0, fp
    d512:	add	r2, sp, #96	; 0x60
    d514:	ldr	r1, [sp, #44]	; 0x2c
            if (!relocated) {
                lfs_gstate_xor(&delta, &lfs->gdisk);
                lfs_gstate_xor(&delta, &lfs->gstate);
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
    d516:	str	r3, [sp, #96]	; 0x60
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
    for (int i = 0; i < 3; i++) {
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
    d518:	str	r4, [sp, #100]	; 0x64
    d51a:	str	r6, [sp, #104]	; 0x68
                lfs_gstate_xor(&delta, &lfs->gstate);
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);

            err = lfs_dir_getgstate(lfs, dir, &delta);
    d51c:	bl	ba90 <lfs_dir_getgstate>
            if (err) {
    d520:	cmp	r0, #0
    d522:	bne.w	d34e <lfs_dir_compact+0xd2>
    }
}

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
    for (int i = 0; i < 3; i++) {
        if (((uint32_t*)a)[i] != 0) {
    d526:	ldr	r3, [sp, #96]	; 0x60
    d528:	cmp	r3, #0
    d52a:	bne.n	d5dc <lfs_dir_compact+0x360>
    d52c:	ldr	r3, [sp, #100]	; 0x64
    d52e:	cmp	r3, #0
    d530:	bne.n	d5dc <lfs_dir_compact+0x360>
    d532:	ldr	r3, [sp, #104]	; 0x68
    d534:	cmp	r3, #0
    d536:	bne.n	d5dc <lfs_dir_compact+0x360>
                    return err;
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
    d538:	ldr	r1, [sp, #48]	; 0x30
    d53a:	mov	r0, fp
    d53c:	bl	c218 <lfs_dir_commitcrc>
            if (err) {
    d540:	cmp	r0, #0
    d542:	bne.w	d3fc <lfs_dir_compact+0x180>


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
    lfs_block_t t = pair[0];
    d546:	ldr	r6, [sp, #44]	; 0x2c
    d548:	ldr	r2, [r6, #0]
    pair[0] = pair[1];
    d54a:	ldr	r1, [r6, #4]
    d54c:	str	r1, [r6, #0]
    pair[1] = t;
    d54e:	str	r2, [r6, #4]
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
            lfs_pair_swap(dir->pair);
            dir->count = end - begin;
    d550:	rsb	r8, r7, r8
            dir->off = commit.off;
    d554:	ldr	r1, [sp, #116]	; 0x74
            dir->etag = commit.ptag;
    d556:	ldr	r2, [sp, #120]	; 0x78
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
            lfs_pair_swap(dir->pair);
            dir->count = end - begin;
    d558:	strh.w	r8, [r6, #20]
            dir->off = commit.off;
    d55c:	str	r1, [r6, #12]
            dir->etag = commit.ptag;
    d55e:	str	r2, [r6, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
    d560:	str.w	r0, [fp, #72]	; 0x48
    d564:	str.w	r0, [fp, #76]	; 0x4c
    d568:	str.w	r0, [fp, #80]	; 0x50
            if (!relocated) {
    d56c:	cmp	r5, #0
    d56e:	bne.n	d5f0 <lfs_dir_compact+0x374>
                lfs->gdisk = lfs->gstate;
    d570:	add.w	r3, fp, #48	; 0x30
    d574:	ldmia.w	r3, {r0, r1, r2}
    d578:	add.w	fp, fp, #60	; 0x3c
    d57c:	stmia.w	fp, {r0, r1, r2}
    d580:	b.n	d350 <lfs_dir_compact+0xd4>
        LFS_TRACE("lfs_fs_size -> %d", err);
        return err;
    }

    LFS_TRACE("lfs_fs_size -> %d", err);
    return size;
    d582:	ldr	r0, [sp, #112]	; 0x70
    d584:	b.n	d3c0 <lfs_dir_compact+0x144>

            // do we have extra space? littlefs can't reclaim this space
            // by itself, so expand cautiously
            if ((lfs_size_t)res < lfs->cfg->block_count/2) {
                LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
                int err = lfs_dir_split(lfs, dir, attrs, attrcount,
    d586:	ldr	r3, [sp, #184]	; 0xb8
    d588:	str	r3, [sp, #0]
    d58a:	str.w	r8, [sp, #8]
    d58e:	str	r7, [sp, #4]
    d590:	ldr	r3, [sp, #52]	; 0x34
    d592:	ldr	r2, [sp, #60]	; 0x3c
    d594:	ldr	r1, [sp, #44]	; 0x2c
    d596:	mov	r0, fp
    d598:	bl	e804 <lfs_dir_split>
                        source, begin, end);
                if (err && err != LFS_ERR_NOSPC) {
    d59c:	cbz	r0, d5b6 <lfs_dir_compact+0x33a>
    d59e:	cmn.w	r0, #28
    d5a2:	bne.w	d34e <lfs_dir_compact+0xd2>
    d5a6:	ldr.w	ip, [fp, #104]	; 0x68
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
    // save some state in case block is bad
    const lfs_block_t oldpair[2] = {dir->pair[0], dir->pair[1]};
    bool relocated = false;
    d5aa:	movs	r5, #0
    d5ac:	b.n	d3d6 <lfs_dir_compact+0x15a>
    bool tired = false;

    // should we split?
    while (end - begin > 1) {
    d5ae:	mov	r8, sl
    d5b0:	ldr.w	ip, [r0, #104]	; 0x68
    d5b4:	b.n	d378 <lfs_dir_compact+0xfc>
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
    // save some state in case block is bad
    const lfs_block_t oldpair[2] = {dir->pair[0], dir->pair[1]};
    bool relocated = false;
    d5b6:	mov	r5, r0
    d5b8:	ldr.w	ip, [fp, #104]	; 0x68
                }

                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                if (!err) {
                    end = begin;
    d5bc:	mov	r8, r7
    d5be:	b.n	d3d6 <lfs_dir_compact+0x15a>
    d5c0:	ldr	r2, [sp, #104]	; 0x68
    d5c2:	ldr	r4, [sp, #100]	; 0x64
    d5c4:	b.n	d4f4 <lfs_dir_compact+0x278>
    d5c6:	nop
    d5c8:	.word	0x0000ae99
    d5cc:	.word	0x400ffc00
    d5d0:	.word	0x0000aeb5
    d5d4:	.word	0x0000c205
    d5d8:	.word	0x000ffc08
                return err;
            }

            if (!lfs_gstate_iszero(&delta)) {
                lfs_gstate_tole32(&delta);
                err = lfs_dir_commitattr(lfs, &commit,
    d5dc:	add	r3, sp, #96	; 0x60
    d5de:	ldr	r2, [pc, #504]	; (d7d8 <lfs_dir_compact+0x55c>)
    d5e0:	ldr	r1, [sp, #48]	; 0x30
    d5e2:	mov	r0, fp
    d5e4:	bl	c14c <lfs_dir_commitattr>
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
    d5e8:	cmp	r0, #0
    d5ea:	bne.w	d3fc <lfs_dir_compact+0x180>
    d5ee:	b.n	d538 <lfs_dir_compact+0x2bc>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    d5f0:	ldr	r2, [sp, #64]	; 0x40
    d5f2:	ldr.w	r3, [fp, #32]
    d5f6:	cmp	r2, r3
    d5f8:	beq.w	d734 <lfs_dir_compact+0x4b8>
    d5fc:	ldr	r1, [sp, #68]	; 0x44
    d5fe:	ldr.w	r0, [fp, #36]	; 0x24
    d602:	cmp	r1, r0
    d604:	beq.w	d734 <lfs_dir_compact+0x4b8>
    d608:	cmp	r2, r0
    d60a:	beq.w	d734 <lfs_dir_compact+0x4b8>
    d60e:	cmp	r3, r1
    d610:	beq.w	d734 <lfs_dir_compact+0x4b8>
        lfs->root[0] = newpair[0];
        lfs->root[1] = newpair[1];
    }

    // update internally tracked dirs
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
    d614:	ldr.w	r3, [fp, #40]	; 0x28
    d618:	cbz	r3, d666 <lfs_dir_compact+0x3ea>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    d61a:	ldr	r1, [sp, #68]	; 0x44
    d61c:	ldr	r0, [sp, #44]	; 0x2c
    d61e:	b.n	d638 <lfs_dir_compact+0x3bc>
    d620:	ldr	r5, [r3, #12]
    d622:	cmp	r1, r5
    d624:	beq.n	d63e <lfs_dir_compact+0x3c2>
    d626:	cmp	r2, r5
    d628:	beq.n	d63e <lfs_dir_compact+0x3c2>
    d62a:	cmp	r4, r1
    d62c:	beq.n	d63e <lfs_dir_compact+0x3c2>
        if (lfs_pair_cmp(oldpair, d->m.pair) == 0) {
            d->m.pair[0] = newpair[0];
            d->m.pair[1] = newpair[1];
        }

        if (d->type == LFS_TYPE_DIR &&
    d62e:	ldrb	r4, [r3, #6]
    d630:	cmp	r4, #2
    d632:	beq.n	d648 <lfs_dir_compact+0x3cc>
        lfs->root[0] = newpair[0];
        lfs->root[1] = newpair[1];
    }

    // update internally tracked dirs
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
    d634:	ldr	r3, [r3, #0]
    d636:	cbz	r3, d666 <lfs_dir_compact+0x3ea>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    d638:	ldr	r4, [r3, #8]
    d63a:	cmp	r2, r4
    d63c:	bne.n	d620 <lfs_dir_compact+0x3a4>
    }

    // update internally tracked dirs
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
        if (lfs_pair_cmp(oldpair, d->m.pair) == 0) {
            d->m.pair[0] = newpair[0];
    d63e:	ldr	r4, [r0, #0]
    d640:	str	r4, [r3, #8]
            d->m.pair[1] = newpair[1];
    d642:	ldr	r4, [r0, #4]
    d644:	str	r4, [r3, #12]
    d646:	b.n	d62e <lfs_dir_compact+0x3b2>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    d648:	ldr	r4, [r3, #44]	; 0x2c
    d64a:	cmp	r2, r4
    d64c:	beq.n	d65c <lfs_dir_compact+0x3e0>
    d64e:	ldr	r5, [r3, #48]	; 0x30
    d650:	cmp	r1, r5
    d652:	beq.n	d65c <lfs_dir_compact+0x3e0>
    d654:	cmp	r2, r5
    d656:	beq.n	d65c <lfs_dir_compact+0x3e0>
    d658:	cmp	r1, r4
    d65a:	bne.n	d634 <lfs_dir_compact+0x3b8>
            d->m.pair[1] = newpair[1];
        }

        if (d->type == LFS_TYPE_DIR &&
                lfs_pair_cmp(oldpair, ((lfs_dir_t*)d)->head) == 0) {
            ((lfs_dir_t*)d)->head[0] = newpair[0];
    d65c:	ldr	r4, [r0, #0]
    d65e:	str	r4, [r3, #44]	; 0x2c
            ((lfs_dir_t*)d)->head[1] = newpair[1];
    d660:	ldr	r4, [r0, #4]
    d662:	str	r4, [r3, #48]	; 0x30
    d664:	b.n	d634 <lfs_dir_compact+0x3b8>
        }
    }

    // find parent
    lfs_mdir_t parent;
    lfs_stag_t tag = lfs_fs_parent(lfs, oldpair, &parent);
    d666:	add	r1, sp, #64	; 0x40
    d668:	ldr	r2, [sp, #48]	; 0x30
    d66a:	mov	r0, fp
    d66c:	bl	b610 <lfs_fs_parent>
    if (tag < 0 && tag != LFS_ERR_NOENT) {
    d670:	cmp	r0, #0
    d672:	blt.n	d744 <lfs_dir_compact+0x4c8>
    return 0;
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
    d674:	ldr.w	r2, [fp, #48]	; 0x30
    d678:	adds	r2, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
    d67a:	ubfx	r3, r2, #0, #10
    d67e:	adds	r3, #0
    d680:	it	ne
    d682:	movne	r3, #1
    d684:	bic.w	r2, r2, #2147483648	; 0x80000000
    d688:	orr.w	r3, r2, r3, lsl #31
    return lfs_tag_type1(a->tag);
}

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    d68c:	lsrs	r2, r3, #20
    d68e:	ands.w	r2, r2, #1792	; 0x700
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
    d692:	str.w	r3, [fp, #48]	; 0x30
    return lfs_tag_type1(a->tag);
}

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    d696:	beq.n	d730 <lfs_dir_compact+0x4b4>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    d698:	ldr.w	r5, [fp, #52]	; 0x34
    d69c:	ldr	r1, [sp, #112]	; 0x70
    d69e:	cmp	r5, r1
    d6a0:	beq.n	d6b4 <lfs_dir_compact+0x438>
    d6a2:	ldr.w	r2, [fp, #56]	; 0x38
    d6a6:	ldr	r4, [sp, #116]	; 0x74
    d6a8:	cmp	r2, r4
    d6aa:	beq.n	d6b4 <lfs_dir_compact+0x438>
    d6ac:	cmp	r5, r4
    d6ae:	beq.n	d6b4 <lfs_dir_compact+0x438>
        lfs_fs_preporphans(lfs, +1);

        // fix pending move in this pair? this looks like an optimization but
        // is in fact _required_ since relocating may outdate the move.
        uint16_t moveid = 0x3ff;
        if (lfs_gstate_hasmovehere(&lfs->gstate, parent.pair)) {
    d6b0:	cmp	r1, r2
    d6b2:	bne.n	d730 <lfs_dir_compact+0x4b4>
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
    d6b4:	ldr	r2, [pc, #292]	; (d7dc <lfs_dir_compact+0x560>)
            moveid = lfs_tag_id(lfs->gstate.tag);
            LFS_DEBUG("Fixing move while relocating "
                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                    parent.pair[0], parent.pair[1], moveid);
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
            if (moveid < lfs_tag_id(tag)) {
    d6b6:	ubfx	r4, r0, #10, #10
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
    d6ba:	ands	r2, r3
static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
    return (int8_t)lfs_tag_chunk(tag);
}

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
    d6bc:	ubfx	r3, r3, #10, #10

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
    d6c0:	movs	r1, #0
            moveid = lfs_tag_id(lfs->gstate.tag);
            LFS_DEBUG("Fixing move while relocating "
                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                    parent.pair[0], parent.pair[1], moveid);
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
            if (moveid < lfs_tag_id(tag)) {
    d6c2:	cmp	r3, r4
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
    d6c4:	str.w	r2, [fp, #48]	; 0x30
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
    d6c8:	str.w	r1, [fp, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
    d6cc:	str.w	r1, [fp, #56]	; 0x38
            moveid = lfs_tag_id(lfs->gstate.tag);
            LFS_DEBUG("Fixing move while relocating "
                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                    parent.pair[0], parent.pair[1], moveid);
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
            if (moveid < lfs_tag_id(tag)) {
    d6d0:	bcs.n	d786 <lfs_dir_compact+0x50a>
                tag -= LFS_MKTAG(0, 1, 0);
    d6d2:	sub.w	r0, r0, #1024	; 0x400
            }
        }

        lfs_pair_tole32(newpair);
        int err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
    d6d6:	lsls	r3, r3, #10
    d6d8:	orr.w	r1, r3, #1333788672	; 0x4f800000
    d6dc:	orr.w	r1, r1, #7340032	; 0x700000
    d6e0:	movs	r4, #0
    d6e2:	str	r1, [sp, #96]	; 0x60
    d6e4:	str	r0, [sp, #104]	; 0x68
    d6e6:	ldr	r5, [sp, #44]	; 0x2c
    d6e8:	ldr	r1, [sp, #48]	; 0x30
    d6ea:	str	r5, [sp, #108]	; 0x6c
    d6ec:	add	r2, sp, #96	; 0x60
    d6ee:	movs	r3, #2
    d6f0:	mov	r0, fp
    d6f2:	str	r4, [sp, #100]	; 0x64
    d6f4:	bl	d7e4 <lfs_dir_commit>
                {LFS_MKTAG_IF(moveid != 0x3ff,
                    LFS_TYPE_DELETE, moveid, 0), NULL},
                {tag, newpair}));
        lfs_pair_fromle32(newpair);
        if (err) {
    d6f8:	cmp	r0, #0
    d6fa:	bne.w	d34e <lfs_dir_compact+0xd2>
    return 0;
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
    d6fe:	ldr.w	r3, [fp, #48]	; 0x30
    d702:	subs	r3, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
    d704:	ubfx	r2, r3, #0, #10
    d708:	subs	r2, r2, r4
    d70a:	it	ne
    d70c:	movne	r2, #1
    d70e:	bic.w	r3, r3, #2147483648	; 0x80000000
    d712:	orr.w	r3, r3, r2, lsl #31
    d716:	str.w	r3, [fp, #48]	; 0x30
        // next step, clean up orphans
        lfs_fs_preporphans(lfs, -1);
    }

    // find pred
    int err = lfs_fs_pred(lfs, oldpair, &parent);
    d71a:	add	r1, sp, #64	; 0x40
    d71c:	ldr	r2, [sp, #48]	; 0x30
    d71e:	mov	r0, fp
    d720:	bl	b698 <lfs_fs_pred>
    if (err && err != LFS_ERR_NOENT) {
    d724:	cbz	r0, d74c <lfs_dir_compact+0x4d0>
    d726:	adds	r3, r0, #2
    d728:	bne.w	d34e <lfs_dir_compact+0xd2>
        if (err) {
            return err;
        }
    }

    return 0;
    d72c:	movs	r5, #0
    d72e:	b.n	d350 <lfs_dir_compact+0xd4>
                tag -= LFS_MKTAG(0, 1, 0);
            }
        }

        lfs_pair_tole32(newpair);
        int err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
    d730:	movs	r1, #0
    d732:	b.n	d6e0 <lfs_dir_compact+0x464>

static int lfs_fs_relocate(lfs_t *lfs,
        const lfs_block_t oldpair[2], lfs_block_t newpair[2]) {
    // update internal root
    if (lfs_pair_cmp(oldpair, lfs->root) == 0) {
        lfs->root[0] = newpair[0];
    d734:	ldr	r1, [sp, #44]	; 0x2c
    d736:	ldr	r3, [r1, #0]
    d738:	str.w	r3, [fp, #32]
        lfs->root[1] = newpair[1];
    d73c:	ldr	r3, [r1, #4]
    d73e:	str.w	r3, [fp, #36]	; 0x24
    d742:	b.n	d614 <lfs_dir_compact+0x398>
    }

    // find parent
    lfs_mdir_t parent;
    lfs_stag_t tag = lfs_fs_parent(lfs, oldpair, &parent);
    if (tag < 0 && tag != LFS_ERR_NOENT) {
    d744:	adds	r2, r0, #2
    d746:	bne.w	d34e <lfs_dir_compact+0xd2>
    d74a:	b.n	d71a <lfs_dir_compact+0x49e>
    return lfs_tag_type1(a->tag);
}

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    d74c:	ldr.w	r1, [fp, #48]	; 0x30
    d750:	lsrs	r3, r1, #20
    d752:	tst.w	r3, #1792	; 0x700
    d756:	bne.n	d790 <lfs_dir_compact+0x514>
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
        }

        // replace bad pair, either we clean up desync, or no desync occured
        lfs_pair_tole32(newpair);
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
    d758:	movs	r3, #0
    d75a:	ldrb.w	r2, [sp, #135]	; 0x87
    d75e:	ldr	r4, [pc, #128]	; (d7e0 <lfs_dir_compact+0x564>)
    d760:	str	r3, [sp, #80]	; 0x50
    d762:	add.w	r3, r2, #1536	; 0x600
    d766:	lsls	r3, r3, #20
    d768:	orrs	r4, r3
    d76a:	movs	r5, #0
    d76c:	ldr	r6, [sp, #44]	; 0x2c
    d76e:	ldr	r1, [sp, #48]	; 0x30
    d770:	str	r6, [sp, #92]	; 0x5c
    d772:	mov	r0, fp
    d774:	movs	r3, #2
    d776:	add	r2, sp, #80	; 0x50
    d778:	str	r4, [sp, #88]	; 0x58
    d77a:	str	r5, [sp, #84]	; 0x54
    d77c:	bl	d7e4 <lfs_dir_commit>
                {LFS_MKTAG_IF(moveid != 0x3ff,
                    LFS_TYPE_DELETE, moveid, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_TAIL + parent.split, 0x3ff, 8), newpair}));
        lfs_pair_fromle32(newpair);
        if (err) {
    d780:	cmp	r0, #0
    d782:	beq.n	d72c <lfs_dir_compact+0x4b0>
    d784:	b.n	d34e <lfs_dir_compact+0xd2>
                tag -= LFS_MKTAG(0, 1, 0);
            }
        }

        lfs_pair_tole32(newpair);
        int err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
    d786:	movw	r2, #1023	; 0x3ff
    d78a:	cmp	r3, r2
    d78c:	bne.n	d6d6 <lfs_dir_compact+0x45a>
    d78e:	b.n	d6e0 <lfs_dir_compact+0x464>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    d790:	ldr.w	r4, [fp, #52]	; 0x34
    d794:	ldr	r2, [sp, #112]	; 0x70
    d796:	cmp	r4, r2
    d798:	beq.n	d7ac <lfs_dir_compact+0x530>
    d79a:	ldr.w	r3, [fp, #56]	; 0x38
    d79e:	ldr	r0, [sp, #116]	; 0x74
    d7a0:	cmp	r3, r0
    d7a2:	beq.n	d7ac <lfs_dir_compact+0x530>
    d7a4:	cmp	r4, r0
    d7a6:	beq.n	d7ac <lfs_dir_compact+0x530>
    // if we can't find dir, it must be new
    if (err != LFS_ERR_NOENT) {
        // fix pending move in this pair? this looks like an optimization but
        // is in fact _required_ since relocating may outdate the move.
        uint16_t moveid = 0x3ff;
        if (lfs_gstate_hasmovehere(&lfs->gstate, parent.pair)) {
    d7a8:	cmp	r2, r3
    d7aa:	bne.n	d758 <lfs_dir_compact+0x4dc>
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
    d7ac:	ldr	r2, [pc, #44]	; (d7dc <lfs_dir_compact+0x560>)
static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
    return (int8_t)lfs_tag_chunk(tag);
}

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
    d7ae:	ubfx	r3, r1, #10, #10
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
        }

        // replace bad pair, either we clean up desync, or no desync occured
        lfs_pair_tole32(newpair);
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
    d7b2:	movw	r0, #1023	; 0x3ff
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
    d7b6:	ands	r2, r1
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
        }

        // replace bad pair, either we clean up desync, or no desync occured
        lfs_pair_tole32(newpair);
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
    d7b8:	cmp	r3, r0

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
    d7ba:	mov.w	r1, #0
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
    d7be:	str.w	r2, [fp, #48]	; 0x30
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
    d7c2:	str.w	r1, [fp, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
    d7c6:	str.w	r1, [fp, #56]	; 0x38
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
        }

        // replace bad pair, either we clean up desync, or no desync occured
        lfs_pair_tole32(newpair);
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
    d7ca:	beq.n	d758 <lfs_dir_compact+0x4dc>
    d7cc:	lsls	r3, r3, #10
    d7ce:	orr.w	r3, r3, #1333788672	; 0x4f800000
    d7d2:	orr.w	r3, r3, #7340032	; 0x700000
    d7d6:	b.n	d75a <lfs_dir_compact+0x4de>
    d7d8:	.word	0x7ffffc0c
    d7dc:	.word	0x800003ff
    d7e0:	.word	0x000ffc08

0000d7e4 <lfs_dir_commit>:

    return 0;
}

static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
    d7e4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
    d7e8:	ldr	r6, [r0, #40]	; 0x28
    d7ea:	ldr	r7, [r1, #0]

    return 0;
}

static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
    d7ec:	sub	sp, #140	; 0x8c
    d7ee:	mov	r9, r0
    d7f0:	mov	r4, r1
    d7f2:	mov	sl, r2
    d7f4:	mov	r8, r3
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
    d7f6:	cbnz	r6, d810 <lfs_dir_commit+0x2c>
    d7f8:	b.n	d870 <lfs_dir_commit+0x8c>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    d7fa:	ldr	r1, [r6, #12]
    d7fc:	ldr	r2, [r4, #4]
    d7fe:	cmp	r2, r1
    d800:	beq.n	d81e <lfs_dir_commit+0x3a>
    d802:	cmp	r2, r3
    d804:	beq.n	d81e <lfs_dir_commit+0x3a>
    d806:	cmp	r1, r7
    d808:	beq.n	d81e <lfs_dir_commit+0x3a>

static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
    d80a:	ldr	r6, [r6, #0]
    d80c:	cmp	r6, #0
    d80e:	beq.n	d870 <lfs_dir_commit+0x8c>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
    d810:	add.w	r3, r6, #8
    d814:	cmp	r4, r3
    d816:	beq.n	d80a <lfs_dir_commit+0x26>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    d818:	ldr	r3, [r6, #8]
    d81a:	cmp	r3, r7
    d81c:	bne.n	d7fa <lfs_dir_commit+0x16>
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
    d81e:	ldrb	r3, [r6, #6]
    d820:	cmp	r3, #1
    d822:	bne.n	d80a <lfs_dir_commit+0x26>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
    d824:	ldr	r3, [r6, #48]	; 0x30
    d826:	lsls	r2, r3, #11
    d828:	bpl.n	d80a <lfs_dir_commit+0x26>
                f->ctz.size > lfs->cfg->cache_size) {
    d82a:	ldr.w	r1, [r9, #104]	; 0x68
        const struct lfs_mattr *attrs, int attrcount) {
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
    d82e:	ldr	r2, [r6, #44]	; 0x2c
    d830:	ldr	r3, [r1, #40]	; 0x28
    d832:	cmp	r2, r3
    d834:	bls.n	d80a <lfs_dir_commit+0x26>

    return 0;
}

static void lfs_alloc_ack(lfs_t *lfs) {
    lfs->free.ack = lfs->cfg->block_count;
    d836:	ldr	r3, [r1, #32]
        lfs_cache_drop(lfs, &lfs->pcache);
    }
}

static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
    file->off = file->pos;
    d838:	ldr	r2, [r6, #52]	; 0x34
    d83a:	str	r2, [r6, #60]	; 0x3c
    lfs_alloc_ack(lfs);
    int err = lfs_file_relocate(lfs, file);
    d83c:	mov	r1, r6

    return 0;
}

static void lfs_alloc_ack(lfs_t *lfs) {
    lfs->free.ack = lfs->cfg->block_count;
    d83e:	str.w	r3, [r9, #96]	; 0x60
}

static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
    file->off = file->pos;
    lfs_alloc_ack(lfs);
    int err = lfs_file_relocate(lfs, file);
    d842:	mov	r0, r9
    d844:	bl	ca7c <lfs_file_relocate>
    if (err) {
    d848:	cbz	r0, d854 <lfs_dir_commit+0x70>
            int err = lfs_file_outline(lfs, f);
            if (err) {
                return err;
            }

            err = lfs_file_flush(lfs, f);
    d84a:	mov	lr, r0
            }
        }
    }

    return 0;
}
    d84c:	mov	r0, lr
    d84e:	add	sp, #140	; 0x8c
    d850:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int err = lfs_file_relocate(lfs, file);
    if (err) {
        return err;
    }

    file->flags &= ~LFS_F_INLINE;
    d854:	ldr	r3, [r6, #48]	; 0x30
    d856:	bic.w	r3, r3, #1048576	; 0x100000
    d85a:	str	r3, [r6, #48]	; 0x30
            int err = lfs_file_outline(lfs, f);
            if (err) {
                return err;
            }

            err = lfs_file_flush(lfs, f);
    d85c:	mov	r1, r6
    d85e:	mov	r0, r9
    d860:	bl	cf58 <lfs_file_flush>
            if (err) {
    d864:	cmp	r0, #0
    d866:	bne.n	d84a <lfs_dir_commit+0x66>

static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
    d868:	ldr	r6, [r6, #0]
    d86a:	ldr	r7, [r4, #0]
    d86c:	cmp	r6, #0
    d86e:	bne.n	d810 <lfs_dir_commit+0x2c>
            }
        }
    }

    // calculate changes to the directory
    lfs_mdir_t olddir = *dir;
    d870:	mov	r6, r4
    d872:	ldmia	r6!, {r0, r1, r2, r3}
    d874:	add	r5, sp, #72	; 0x48
    d876:	stmia	r5!, {r0, r1, r2, r3}
    d878:	ldmia.w	r6, {r0, r1, r2, r3}
    bool hasdelete = false;
    for (int i = 0; i < attrcount; i++) {
    d87c:	cmp.w	r8, #0
            }
        }
    }

    // calculate changes to the directory
    lfs_mdir_t olddir = *dir;
    d880:	ldr	r6, [r4, #4]
    d882:	str	r6, [sp, #40]	; 0x28
    d884:	stmia.w	r5, {r0, r1, r2, r3}
    bool hasdelete = false;
    for (int i = 0; i < attrcount; i++) {
    d888:	ble.n	d8e2 <lfs_dir_commit+0xfe>
    d88a:	mov	r2, sl
    d88c:	add.w	r0, sl, r8, lsl #3
    d890:	mov.w	lr, #0
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
    d894:	movw	r1, #1025	; 0x401
            dir->count += 1;
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
    d898:	movw	r6, #1279	; 0x4ff
    d89c:	b.n	d8b2 <lfs_dir_commit+0xce>
    d89e:	cmp	r5, r6
    d8a0:	beq.w	d9d6 <lfs_dir_commit+0x1f2>
            LFS_ASSERT(dir->count > 0);
            dir->count -= 1;
            hasdelete = true;
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
    d8a4:	cmp.w	r3, #1536	; 0x600
    d8a8:	beq.w	d9e2 <lfs_dir_commit+0x1fe>
    d8ac:	adds	r2, #8
    }

    // calculate changes to the directory
    lfs_mdir_t olddir = *dir;
    bool hasdelete = false;
    for (int i = 0; i < attrcount; i++) {
    d8ae:	cmp	r2, r0
    d8b0:	beq.n	d8d4 <lfs_dir_commit+0xf0>
static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
    return (tag & 0x70000000) >> 20;
}

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
    return (tag & 0x7ff00000) >> 20;
    d8b2:	ldr	r3, [r2, #0]
    d8b4:	mov.w	ip, r3, lsr #20
    d8b8:	uxth.w	r3, ip
    d8bc:	ubfx	r5, r3, #0, #11

    // calculate changes to the directory
    lfs_mdir_t olddir = *dir;
    bool hasdelete = false;
    for (int i = 0; i < attrcount; i++) {
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
    d8c0:	cmp	r5, r1
            dir->count += 1;
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
            LFS_ASSERT(dir->count > 0);
            dir->count -= 1;
            hasdelete = true;
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
    d8c2:	and.w	r3, r3, #1792	; 0x700

    // calculate changes to the directory
    lfs_mdir_t olddir = *dir;
    bool hasdelete = false;
    for (int i = 0; i < attrcount; i++) {
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
    d8c6:	bne.n	d89e <lfs_dir_commit+0xba>
            dir->count += 1;
    d8c8:	ldrh	r3, [r4, #20]
    d8ca:	adds	r2, #8
    d8cc:	adds	r3, #1
    }

    // calculate changes to the directory
    lfs_mdir_t olddir = *dir;
    bool hasdelete = false;
    for (int i = 0; i < attrcount; i++) {
    d8ce:	cmp	r2, r0
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
            dir->count += 1;
    d8d0:	strh	r3, [r4, #20]
    }

    // calculate changes to the directory
    lfs_mdir_t olddir = *dir;
    bool hasdelete = false;
    for (int i = 0; i < attrcount; i++) {
    d8d2:	bne.n	d8b2 <lfs_dir_commit+0xce>
            lfs_pair_fromle32(dir->tail);
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
    d8d4:	cmp.w	lr, #0
    d8d8:	beq.n	d8e2 <lfs_dir_commit+0xfe>
    d8da:	ldrh	r3, [r4, #20]
    d8dc:	cmp	r3, #0
    d8de:	beq.w	db2e <lfs_dir_commit+0x34a>
                return err;
            }
        }
    }

    if (dir->erased || dir->count >= 0xff) {
    d8e2:	ldrb	r3, [r4, #22]
    d8e4:	cbnz	r3, d8ee <lfs_dir_commit+0x10a>
    d8e6:	ldrh	r3, [r4, #20]
    d8e8:	cmp	r3, #254	; 0xfe
    d8ea:	bls.w	d9f6 <lfs_dir_commit+0x212>
            .off = dir->off,
            .ptag = dir->etag,
            .crc = 0xffffffff,

            .begin = dir->off,
            .end = lfs->cfg->block_size - 8,
    d8ee:	ldr.w	r3, [r9, #104]	; 0x68
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
        int err = lfs_dir_traverse(lfs,
    d8f2:	ldr	r2, [pc, #712]	; (dbbc <lfs_dir_commit+0x3d8>)
        }
    }

    if (dir->erased || dir->count >= 0xff) {
        // try to commit
        struct lfs_commit commit = {
    d8f4:	ldr	r5, [r3, #28]
            .block = dir->pair[0],
            .off = dir->off,
    d8f6:	ldr	r1, [r4, #12]
            .ptag = dir->etag,
    d8f8:	ldr.w	lr, [r4, #16]
            .end = lfs->cfg->block_size - 8,
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
        int err = lfs_dir_traverse(lfs,
    d8fc:	str	r2, [sp, #28]
    d8fe:	movs	r3, #0
    d900:	add	r0, sp, #52	; 0x34
    d902:	str	r3, [sp, #24]
    d904:	str	r3, [sp, #20]
    d906:	str	r3, [sp, #16]
    d908:	str	r3, [sp, #12]
    d90a:	str	r3, [sp, #8]
    d90c:	str.w	r8, [sp, #4]
    d910:	str.w	sl, [sp]
    d914:	str	r0, [sp, #32]
        }
    }

    if (dir->erased || dir->count >= 0xff) {
        // try to commit
        struct lfs_commit commit = {
    d916:	ldr	r0, [r4, #0]
    d918:	str	r1, [sp, #108]	; 0x6c
    d91a:	subs	r5, #8
            .end = lfs->cfg->block_size - 8,
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
        int err = lfs_dir_traverse(lfs,
    d91c:	mov	r2, r1
        }
    }

    if (dir->erased || dir->count >= 0xff) {
        // try to commit
        struct lfs_commit commit = {
    d91e:	str	r5, [sp, #124]	; 0x7c
    d920:	str	r1, [sp, #120]	; 0x78
    d922:	mov.w	r5, #4294967295
    d926:	str	r0, [sp, #104]	; 0x68
            .end = lfs->cfg->block_size - 8,
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
        int err = lfs_dir_traverse(lfs,
    d928:	mov	r3, lr
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
    d92a:	add	r6, sp, #104	; 0x68
            .end = lfs->cfg->block_size - 8,
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
        int err = lfs_dir_traverse(lfs,
    d92c:	mov	r1, r4
    d92e:	mov	r0, r9
        }
    }

    if (dir->erased || dir->count >= 0xff) {
        // try to commit
        struct lfs_commit commit = {
    d930:	str	r5, [sp, #116]	; 0x74
        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
        int err = lfs_dir_traverse(lfs,
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
    d932:	str.w	r9, [sp, #52]	; 0x34
        }
    }

    if (dir->erased || dir->count >= 0xff) {
        // try to commit
        struct lfs_commit commit = {
    d936:	str.w	lr, [sp, #112]	; 0x70
        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
        int err = lfs_dir_traverse(lfs,
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
    d93a:	str	r6, [sp, #56]	; 0x38
            .end = lfs->cfg->block_size - 8,
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
        int err = lfs_dir_traverse(lfs,
    d93c:	bl	b728 <lfs_dir_traverse>
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
        if (err) {
    d940:	mov	r5, r0
    d942:	cbnz	r0, d9ac <lfs_dir_commit+0x1c8>
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
    for (int i = 0; i < 3; i++) {
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
    d944:	ldr.w	r0, [r9, #60]	; 0x3c
    d948:	ldr.w	r3, [r9, #48]	; 0x30
    d94c:	ldr.w	r1, [r9, #72]	; 0x48
    d950:	ldr.w	r2, [r9, #52]	; 0x34
    d954:	eors	r3, r0
    d956:	eors	r1, r3
    d958:	ldr.w	r3, [r9, #68]	; 0x44
    d95c:	str	r3, [sp, #44]	; 0x2c
    d95e:	ldr.w	r3, [r9, #56]	; 0x38
    d962:	ldr.w	r0, [r9, #64]	; 0x40
    d966:	eors	r2, r5
    d968:	eors	r5, r3
    d96a:	ldr	r3, [sp, #44]	; 0x2c
    d96c:	eors	r0, r2
    d96e:	eors	r5, r3
    d970:	ldr.w	r2, [r9, #80]	; 0x50
    d974:	ldr.w	r3, [r9, #76]	; 0x4c
        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
        lfs_gstate_xor(&delta, &lfs->gstate);
        lfs_gstate_xor(&delta, &lfs->gdisk);
        lfs_gstate_xor(&delta, &lfs->gdelta);
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
    d978:	bic.w	r1, r1, #1020	; 0x3fc
    d97c:	bic.w	r1, r1, #3
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
    for (int i = 0; i < 3; i++) {
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
    d980:	eors	r0, r3
    d982:	eors	r2, r5
        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
        lfs_gstate_xor(&delta, &lfs->gstate);
        lfs_gstate_xor(&delta, &lfs->gdisk);
        lfs_gstate_xor(&delta, &lfs->gdelta);
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
    d984:	str	r1, [sp, #60]	; 0x3c
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
    for (int i = 0; i < 3; i++) {
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
    d986:	str	r0, [sp, #64]	; 0x40
    d988:	str	r2, [sp, #68]	; 0x44
    }
}

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
    for (int i = 0; i < 3; i++) {
        if (((uint32_t*)a)[i] != 0) {
    d98a:	cmp	r1, #0
    d98c:	bne.w	db6a <lfs_dir_commit+0x386>
    d990:	cmp	r0, #0
    d992:	bne.w	db6a <lfs_dir_commit+0x386>
    d996:	cmp	r2, #0
    d998:	bne.w	db6a <lfs_dir_commit+0x386>
                return err;
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
    d99c:	mov	r1, r6
    d99e:	mov	r0, r9
    d9a0:	bl	c218 <lfs_dir_commitcrc>
        if (err) {
    d9a4:	mov	r5, r0
    d9a6:	cmp	r0, #0
    d9a8:	beq.w	db44 <lfs_dir_commit+0x360>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
    d9ac:	cmn.w	r5, #28
    d9b0:	beq.n	d9f4 <lfs_dir_commit+0x210>
    d9b2:	cmn.w	r5, #84	; 0x54
    d9b6:	beq.n	d9f4 <lfs_dir_commit+0x210>
        lfs_cache_drop(lfs, &lfs->pcache);

        int err = lfs_dir_compact(lfs, dir, attrs, attrcount,
                dir, 0, dir->count);
        if (err) {
            *dir = olddir;
    d9b8:	ldr	r3, [sp, #40]	; 0x28
    d9ba:	str	r7, [sp, #72]	; 0x48
    d9bc:	str	r3, [sp, #76]	; 0x4c
    d9be:	add	r6, sp, #72	; 0x48
    d9c0:	ldmia	r6!, {r0, r1, r2, r3}
    d9c2:	stmia	r4!, {r0, r1, r2, r3}
    d9c4:	ldmia.w	r6, {r0, r1, r2, r3}
            return err;
    d9c8:	mov	lr, r5
        lfs_cache_drop(lfs, &lfs->pcache);

        int err = lfs_dir_compact(lfs, dir, attrs, attrcount,
                dir, 0, dir->count);
        if (err) {
            *dir = olddir;
    d9ca:	stmia.w	r4, {r0, r1, r2, r3}
            }
        }
    }

    return 0;
}
    d9ce:	mov	r0, lr
    d9d0:	add	sp, #140	; 0x8c
    d9d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (int i = 0; i < attrcount; i++) {
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
            dir->count += 1;
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
            LFS_ASSERT(dir->count > 0);
            dir->count -= 1;
    d9d6:	ldrh	r3, [r4, #20]
    d9d8:	subs	r3, #1
    d9da:	strh	r3, [r4, #20]
            hasdelete = true;
    d9dc:	mov.w	lr, #1
    d9e0:	b.n	d8ac <lfs_dir_commit+0xc8>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
    d9e2:	ldr	r5, [r2, #4]
    d9e4:	ldr	r3, [r5, #0]
    d9e6:	str	r3, [r4, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
    d9e8:	ldr	r5, [r5, #4]
    d9ea:	str	r5, [r4, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
    d9ec:	and.w	r3, ip, #1
    d9f0:	strb	r3, [r4, #23]
    d9f2:	b.n	d8ac <lfs_dir_commit+0xc8>
    d9f4:	ldrh	r3, [r4, #20]
    } else {
compact:
        // fall back to compaction
        lfs_cache_drop(lfs, &lfs->pcache);

        int err = lfs_dir_compact(lfs, dir, attrs, attrcount,
    d9f6:	str	r3, [sp, #8]
/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
    d9f8:	mov.w	r2, #4294967295
    } else {
compact:
        // fall back to compaction
        lfs_cache_drop(lfs, &lfs->pcache);

        int err = lfs_dir_compact(lfs, dir, attrs, attrcount,
    d9fc:	movs	r3, #0
    d9fe:	str	r4, [sp, #0]
    da00:	mov	r1, r4
/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
    da02:	str.w	r2, [r9, #16]
    } else {
compact:
        // fall back to compaction
        lfs_cache_drop(lfs, &lfs->pcache);

        int err = lfs_dir_compact(lfs, dir, attrs, attrcount,
    da06:	mov	r0, r9
    da08:	str	r3, [sp, #4]
    da0a:	mov	r2, sl
    da0c:	mov	r3, r8
    da0e:	bl	d27c <lfs_dir_compact>
                dir, 0, dir->count);
        if (err) {
    da12:	mov	r5, r0
    da14:	cmp	r0, #0
    da16:	bne.n	d9b8 <lfs_dir_commit+0x1d4>
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
    da18:	ldr.w	r6, [r9, #40]	; 0x28
    da1c:	cmp	r6, #0
    da1e:	beq.w	db92 <lfs_dir_commit+0x3ae>
    da22:	mov	r5, r6
        if (&d->m != dir && lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
            d->m = *dir;
            for (int i = 0; i < attrcount; i++) {
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
    da24:	movw	fp, #1279	; 0x4ff
                        d->id == lfs_tag_id(attrs[i].tag)) {
                    d->m.pair[0] = LFS_BLOCK_NULL;
    da28:	str	r6, [sp, #44]	; 0x2c
    da2a:	ldr.w	ip, [sp, #40]	; 0x28
    da2e:	b.n	da44 <lfs_dir_commit+0x260>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    da30:	ldr	r2, [r5, #12]
    da32:	cmp	r2, ip
    da34:	beq.n	da52 <lfs_dir_commit+0x26e>
    da36:	cmp	r3, ip
    da38:	beq.n	da52 <lfs_dir_commit+0x26e>
    da3a:	cmp	r2, r7
    da3c:	beq.n	da52 <lfs_dir_commit+0x26e>
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
    da3e:	ldr	r5, [r5, #0]
    da40:	cmp	r5, #0
    da42:	beq.n	dacc <lfs_dir_commit+0x2e8>
        if (&d->m != dir && lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
    da44:	add.w	r6, r5, #8
    da48:	cmp	r4, r6
    da4a:	beq.n	da3e <lfs_dir_commit+0x25a>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    da4c:	ldr	r3, [r5, #8]
    da4e:	cmp	r3, r7
    da50:	bne.n	da30 <lfs_dir_commit+0x24c>
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
        if (&d->m != dir && lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
            d->m = *dir;
    da52:	mov	lr, r4
    da54:	ldmia.w	lr!, {r0, r1, r2, r3}
    da58:	stmia	r6!, {r0, r1, r2, r3}
    da5a:	ldmia.w	lr, {r0, r1, r2, r3}
            for (int i = 0; i < attrcount; i++) {
    da5e:	cmp.w	r8, #0
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
        if (&d->m != dir && lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
            d->m = *dir;
    da62:	stmia.w	r6, {r0, r1, r2, r3}
            for (int i = 0; i < attrcount; i++) {
    da66:	it	gt
    da68:	movgt	r3, #0
    da6a:	bgt.n	da7c <lfs_dir_commit+0x298>
    da6c:	b.n	da3e <lfs_dir_commit+0x25a>
                        d->id > lfs_tag_id(attrs[i].tag)) {
                    d->id -= 1;
                    if (d->type == LFS_TYPE_DIR) {
                        ((lfs_dir_t*)d)->pos -= 1;
                    }
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
    da6e:	movw	r0, #1025	; 0x401
    da72:	cmp	r1, r0
    da74:	beq.n	daa6 <lfs_dir_commit+0x2c2>
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
        if (&d->m != dir && lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
            d->m = *dir;
            for (int i = 0; i < attrcount; i++) {
    da76:	adds	r3, #1
    da78:	cmp	r8, r3
    da7a:	beq.n	da3e <lfs_dir_commit+0x25a>
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
    da7c:	ldr.w	r2, [sl, r3, lsl #3]
static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
    return (tag & 0x70000000) >> 20;
}

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
    return (tag & 0x7ff00000) >> 20;
    da80:	ubfx	r1, r2, #20, #11
    // our mdir.
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
        if (&d->m != dir && lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
            d->m = *dir;
            for (int i = 0; i < attrcount; i++) {
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
    da84:	cmp	r1, fp
    da86:	bne.n	da6e <lfs_dir_commit+0x28a>
                        d->id == lfs_tag_id(attrs[i].tag)) {
    da88:	ldrh	r1, [r5, #4]
static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
    return (int8_t)lfs_tag_chunk(tag);
}

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
    da8a:	ubfx	r2, r2, #10, #10
    // our mdir.
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
        if (&d->m != dir && lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
            d->m = *dir;
            for (int i = 0; i < attrcount; i++) {
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
    da8e:	cmp	r1, r2
    da90:	beq.n	dac2 <lfs_dir_commit+0x2de>
                        d->id == lfs_tag_id(attrs[i].tag)) {
                    d->m.pair[0] = LFS_BLOCK_NULL;
                    d->m.pair[1] = LFS_BLOCK_NULL;
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
    da92:	bls.n	da76 <lfs_dir_commit+0x292>
                        d->id > lfs_tag_id(attrs[i].tag)) {
                    d->id -= 1;
                    if (d->type == LFS_TYPE_DIR) {
    da94:	ldrb	r2, [r5, #6]
                        d->id == lfs_tag_id(attrs[i].tag)) {
                    d->m.pair[0] = LFS_BLOCK_NULL;
                    d->m.pair[1] = LFS_BLOCK_NULL;
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
                        d->id > lfs_tag_id(attrs[i].tag)) {
                    d->id -= 1;
    da96:	subs	r1, #1
                    if (d->type == LFS_TYPE_DIR) {
    da98:	cmp	r2, #2
                        d->id == lfs_tag_id(attrs[i].tag)) {
                    d->m.pair[0] = LFS_BLOCK_NULL;
                    d->m.pair[1] = LFS_BLOCK_NULL;
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
                        d->id > lfs_tag_id(attrs[i].tag)) {
                    d->id -= 1;
    da9a:	strh	r1, [r5, #4]
                    if (d->type == LFS_TYPE_DIR) {
    da9c:	bne.n	da76 <lfs_dir_commit+0x292>
                        ((lfs_dir_t*)d)->pos -= 1;
    da9e:	ldr	r2, [r5, #40]	; 0x28
    daa0:	subs	r2, #1
    daa2:	str	r2, [r5, #40]	; 0x28
    daa4:	b.n	da76 <lfs_dir_commit+0x292>
                    }
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
                        d->id >= lfs_tag_id(attrs[i].tag)) {
    daa6:	ldrh	r1, [r5, #4]
                        d->id > lfs_tag_id(attrs[i].tag)) {
                    d->id -= 1;
                    if (d->type == LFS_TYPE_DIR) {
                        ((lfs_dir_t*)d)->pos -= 1;
                    }
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
    daa8:	ubfx	r2, r2, #10, #10
    daac:	cmp	r1, r2
    daae:	bcc.n	da76 <lfs_dir_commit+0x292>
                        d->id >= lfs_tag_id(attrs[i].tag)) {
                    d->id += 1;
                    if (d->type == LFS_TYPE_DIR) {
    dab0:	ldrb	r2, [r5, #6]
                    if (d->type == LFS_TYPE_DIR) {
                        ((lfs_dir_t*)d)->pos -= 1;
                    }
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
                        d->id >= lfs_tag_id(attrs[i].tag)) {
                    d->id += 1;
    dab2:	adds	r1, #1
                    if (d->type == LFS_TYPE_DIR) {
    dab4:	cmp	r2, #2
                    if (d->type == LFS_TYPE_DIR) {
                        ((lfs_dir_t*)d)->pos -= 1;
                    }
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
                        d->id >= lfs_tag_id(attrs[i].tag)) {
                    d->id += 1;
    dab6:	strh	r1, [r5, #4]
                    if (d->type == LFS_TYPE_DIR) {
    dab8:	bne.n	da76 <lfs_dir_commit+0x292>
                        ((lfs_dir_t*)d)->pos += 1;
    daba:	ldr	r2, [r5, #40]	; 0x28
    dabc:	adds	r2, #1
    dabe:	str	r2, [r5, #40]	; 0x28
    dac0:	b.n	da76 <lfs_dir_commit+0x292>
        if (&d->m != dir && lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
            d->m = *dir;
            for (int i = 0; i < attrcount; i++) {
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
                        d->id == lfs_tag_id(attrs[i].tag)) {
                    d->m.pair[0] = LFS_BLOCK_NULL;
    dac2:	mov.w	r2, #4294967295
    dac6:	str	r2, [r5, #8]
                    d->m.pair[1] = LFS_BLOCK_NULL;
    dac8:	str	r2, [r5, #12]
    daca:	b.n	da76 <lfs_dir_commit+0x292>
    dacc:	ldr	r6, [sp, #44]	; 0x2c

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
    dace:	mov.w	fp, #4294967295
    dad2:	b.n	daea <lfs_dir_commit+0x306>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    dad4:	ldr	r2, [r6, #12]
    dad6:	ldr	r0, [sp, #40]	; 0x28
    dad8:	cmp	r2, r0
    dada:	beq.n	daf0 <lfs_dir_commit+0x30c>
    dadc:	cmp	r3, r0
    dade:	beq.n	daf0 <lfs_dir_commit+0x30c>
    dae0:	cmp	r2, r7
    dae2:	beq.n	daf0 <lfs_dir_commit+0x30c>
                }
            }
        }
    }

    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
    dae4:	ldr	r6, [r6, #0]
    dae6:	cmp	r6, #0
    dae8:	beq.n	db92 <lfs_dir_commit+0x3ae>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    daea:	ldr	r3, [r6, #8]
    daec:	cmp	r3, r7
    daee:	bne.n	dad4 <lfs_dir_commit+0x2f0>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
        if (lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
            while (d->id >= d->m.count && d->m.split) {
                // we split and id is on tail now
                d->id -= d->m.count;
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
    daf0:	add.w	sl, r6, #32
    daf4:	add.w	r8, r6, #8
        }
    }

    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
        if (lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
            while (d->id >= d->m.count && d->m.split) {
    daf8:	ldrh.w	lr, [r6, #4]
    dafc:	ldrh	r4, [r6, #28]
    dafe:	cmp	lr, r4

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
    db00:	mov.w	r3, #4294967295
    db04:	mov	r2, sl
    db06:	mov	r1, r8
    db08:	mov	r0, r9

    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
        if (lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
            while (d->id >= d->m.count && d->m.split) {
                // we split and id is on tail now
                d->id -= d->m.count;
    db0a:	rsb	ip, r4, lr
        }
    }

    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
        if (lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
            while (d->id >= d->m.count && d->m.split) {
    db0e:	bcc.n	dae4 <lfs_dir_commit+0x300>
    db10:	ldrb	r4, [r6, #31]
    db12:	cmp	r4, #0
    db14:	beq.n	dae4 <lfs_dir_commit+0x300>
                // we split and id is on tail now
                d->id -= d->m.count;
    db16:	strh.w	ip, [r6, #4]

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
    db1a:	str	r5, [sp, #12]
    db1c:	str	r5, [sp, #8]
    db1e:	str	r5, [sp, #4]
    db20:	str.w	fp, [sp]
    db24:	bl	b164 <lfs_dir_fetchmatch>
        if (lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
            while (d->id >= d->m.count && d->m.split) {
                // we split and id is on tail now
                d->id -= d->m.count;
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
                if (err) {
    db28:	cmp	r0, #0
    db2a:	beq.n	daf8 <lfs_dir_commit+0x314>
    db2c:	b.n	d84a <lfs_dir_commit+0x66>
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
        lfs_mdir_t pdir;
        int err = lfs_fs_pred(lfs, dir->pair, &pdir);
    db2e:	add	r2, sp, #104	; 0x68
    db30:	mov	r1, r4
    db32:	mov	r0, r9
    db34:	bl	b698 <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
    db38:	mov	r5, r0
    db3a:	cbz	r0, db9e <lfs_dir_commit+0x3ba>
    db3c:	adds	r3, r0, #2
    db3e:	bne.w	d9b8 <lfs_dir_commit+0x1d4>
    db42:	b.n	d8e2 <lfs_dir_commit+0xfe>
        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
        dir->off = commit.off;
        dir->etag = commit.ptag;
        // and update gstate
        lfs->gdisk = lfs->gstate;
    db44:	add.w	r3, r9, #48	; 0x30
    db48:	ldmia.w	r3, {r0, r1, r2}
            return err;
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
        dir->off = commit.off;
    db4c:	ldr	r6, [sp, #108]	; 0x6c
    db4e:	str	r6, [r4, #12]
        dir->etag = commit.ptag;
    db50:	ldr	r6, [sp, #112]	; 0x70
    db52:	str	r6, [r4, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
    db54:	add.w	r6, r9, #60	; 0x3c
    db58:	stmia.w	r6, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
    db5c:	str.w	r5, [r9, #72]	; 0x48
    db60:	str.w	r5, [r9, #76]	; 0x4c
    db64:	str.w	r5, [r9, #80]	; 0x50
                return err;
            }
        }
    }

    if (dir->erased || dir->count >= 0xff) {
    db68:	b.n	da18 <lfs_dir_commit+0x234>
        lfs_gstate_xor(&delta, &lfs->gstate);
        lfs_gstate_xor(&delta, &lfs->gdisk);
        lfs_gstate_xor(&delta, &lfs->gdelta);
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
        if (!lfs_gstate_iszero(&delta)) {
            err = lfs_dir_getgstate(lfs, dir, &delta);
    db6a:	add	r2, sp, #60	; 0x3c
    db6c:	mov	r1, r4
    db6e:	mov	r0, r9
    db70:	bl	ba90 <lfs_dir_getgstate>
            if (err) {
    db74:	mov	r5, r0
    db76:	cmp	r0, #0
    db78:	bne.w	d9b8 <lfs_dir_commit+0x1d4>
                *dir = olddir;
                return err;
            }

            lfs_gstate_tole32(&delta);
            err = lfs_dir_commitattr(lfs, &commit,
    db7c:	add	r3, sp, #60	; 0x3c
    db7e:	ldr	r2, [pc, #64]	; (dbc0 <lfs_dir_commit+0x3dc>)
    db80:	mov	r1, r6
    db82:	mov	r0, r9
    db84:	bl	c14c <lfs_dir_commitattr>
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
    db88:	mov	r5, r0
    db8a:	cmp	r0, #0
    db8c:	bne.w	d9ac <lfs_dir_commit+0x1c8>
    db90:	b.n	d99c <lfs_dir_commit+0x1b8>
                }
            }
        }
    }

    return 0;
    db92:	mov.w	lr, #0
}
    db96:	mov	r0, lr
    db98:	add	sp, #140	; 0x8c
    db9a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (err && err != LFS_ERR_NOENT) {
            *dir = olddir;
            return err;
        }

        if (err != LFS_ERR_NOENT && pdir.split) {
    db9e:	ldrb.w	r3, [sp, #127]	; 0x7f
    dba2:	cmp	r3, #0
    dba4:	beq.w	d8e2 <lfs_dir_commit+0xfe>
            err = lfs_dir_drop(lfs, &pdir, dir);
    dba8:	add	r1, sp, #104	; 0x68
    dbaa:	mov	r2, r4
    dbac:	mov	r0, r9
    dbae:	bl	dbc4 <lfs_dir_drop>
            if (err) {
    dbb2:	mov	r5, r0
    dbb4:	cmp	r0, #0
    dbb6:	bne.w	d9b8 <lfs_dir_commit+0x1d4>
    dbba:	b.n	d8e2 <lfs_dir_commit+0xfe>
    dbbc:	.word	0x0000c205
    dbc0:	.word	0x7ffffc0c

0000dbc4 <lfs_dir_drop>:

    // don't write out yet, let caller take care of that
    return 0;
}

static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
    dbc4:	push	{r4, r5, r6, r7, lr}
    dbc6:	mov	r4, r2
    dbc8:	sub	sp, #12
    dbca:	mov	r7, r1
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
    dbcc:	add.w	r2, r0, #72	; 0x48
    dbd0:	mov	r1, r4

    // don't write out yet, let caller take care of that
    return 0;
}

static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
    dbd2:	mov	r5, r0
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
    dbd4:	bl	ba90 <lfs_dir_getgstate>
    if (err) {
    dbd8:	cbnz	r0, dbf8 <lfs_dir_drop+0x34>
        return err;
    }

    // steal tail
    lfs_pair_tole32(tail->tail);
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
    dbda:	ldrb	r3, [r4, #23]
    dbdc:	ldr	r6, [pc, #28]	; (dbfc <lfs_dir_drop+0x38>)
    dbde:	add.w	r3, r3, #1536	; 0x600
    dbe2:	lsls	r3, r3, #20
    dbe4:	orrs	r6, r3
    dbe6:	adds	r4, #24
    dbe8:	mov	r1, r7
    dbea:	mov	r0, r5
    dbec:	movs	r3, #1
    dbee:	mov	r2, sp
    dbf0:	str	r4, [sp, #4]
    dbf2:	str	r6, [sp, #0]
    dbf4:	bl	d7e4 <lfs_dir_commit>
    if (err) {
        return err;
    }

    return 0;
}
    dbf8:	add	sp, #12
    dbfa:	pop	{r4, r5, r6, r7, pc}
    dbfc:	.word	0x000ffc08

0000dc00 <lfs_fs_forceconsistency>:
    // mark orphans as fixed
    lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
    return 0;
}

static int lfs_fs_forceconsistency(lfs_t *lfs) {
    dc00:	push	{r4, r5, r6, r7, lr}
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
}

static int lfs_fs_demove(lfs_t *lfs) {
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
    dc02:	ldr	r3, [r0, #60]	; 0x3c
    dc04:	lsrs	r3, r3, #20
    dc06:	tst.w	r3, #1792	; 0x700
    // mark orphans as fixed
    lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
    return 0;
}

static int lfs_fs_forceconsistency(lfs_t *lfs) {
    dc0a:	sub	sp, #140	; 0x8c
    dc0c:	mov	r6, r0
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
}

static int lfs_fs_demove(lfs_t *lfs) {
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
    dc0e:	bne.n	dce2 <lfs_fs_forceconsistency+0xe2>

    return 0;
}

static int lfs_fs_deorphan(lfs_t *lfs) {
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
    dc10:	ldr	r3, [r6, #48]	; 0x30
    dc12:	ubfx	r3, r3, #0, #10
    dc16:	cmp	r3, #0
    dc18:	beq.n	dc88 <lfs_fs_forceconsistency+0x88>
        return 0;
    }

    // Fix any orphans
    lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
    dc1a:	add	r0, sp, #40	; 0x28
    dc1c:	movs	r2, #32
    dc1e:	movs	r1, #0
    dc20:	bl	117bc <memset>
                LFS_DEBUG("Fixing half-orphan {0x%"PRIx32", 0x%"PRIx32"} "
                            "-> {0x%"PRIx32", 0x%"PRIx32"}",
                        pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                lfs_pair_tole32(pair);
                err = lfs_dir_commit(lfs, &pdir, LFS_MKATTRS(
    dc24:	ldr	r7, [pc, #312]	; (dd60 <lfs_fs_forceconsistency+0x160>)
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
        return 0;
    }

    // Fix any orphans
    lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
    dc26:	movs	r3, #1
    dc28:	strb.w	r3, [sp, #63]	; 0x3f
    dc2c:	str	r3, [sp, #68]	; 0x44
    pair[0] = pair[1];
    pair[1] = t;
}

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    dc2e:	ldr	r3, [sp, #68]	; 0x44
    dc30:	adds	r3, #1
    dc32:	beq.n	dc6c <lfs_fs_forceconsistency+0x6c>

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
    dc34:	movs	r2, #0
    dc36:	mov.w	r3, #4294967295
    dc3a:	str	r2, [sp, #12]
    dc3c:	str	r2, [sp, #8]
    dc3e:	str	r2, [sp, #4]
    dc40:	add	r1, sp, #72	; 0x48
    dc42:	str	r3, [sp, #0]
    dc44:	add	r2, sp, #64	; 0x40
    dc46:	mov	r0, r6
    dc48:	bl	b164 <lfs_dir_fetchmatch>
    lfs_mdir_t dir;

    // iterate over all directory directory entries
    while (!lfs_pair_isnull(pdir.tail)) {
        int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
        if (err) {
    dc4c:	mov	r4, r0
    dc4e:	cbnz	r0, dc8a <lfs_fs_forceconsistency+0x8a>
            return err;
        }

        // check head blocks for orphans
        if (!pdir.split) {
    dc50:	ldrb.w	r4, [sp, #63]	; 0x3f
    dc54:	cbz	r4, dc90 <lfs_fs_forceconsistency+0x90>
                // refetch tail
                continue;
            }
        }

        pdir = dir;
    dc56:	add	r5, sp, #72	; 0x48
    dc58:	ldmia	r5!, {r0, r1, r2, r3}
    dc5a:	add	r4, sp, #40	; 0x28
    dc5c:	stmia	r4!, {r0, r1, r2, r3}
    dc5e:	ldmia.w	r5, {r0, r1, r2, r3}
    dc62:	stmia.w	r4, {r0, r1, r2, r3}
    pair[0] = pair[1];
    pair[1] = t;
}

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    dc66:	ldr	r3, [sp, #64]	; 0x40
    dc68:	adds	r3, #1
    dc6a:	bne.n	dc2e <lfs_fs_forceconsistency+0x2e>
    dc6c:	ldr	r2, [r6, #48]	; 0x30
    return 0;
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
    dc6e:	negs	r3, r2
    dc70:	sxtab	r3, r2, r3
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
    dc74:	ubfx	r2, r3, #0, #10
    dc78:	adds	r2, #0
    dc7a:	it	ne
    dc7c:	movne	r2, #1
    dc7e:	bic.w	r3, r3, #2147483648	; 0x80000000
    dc82:	orr.w	r3, r3, r2, lsl #31
    dc86:	str	r3, [r6, #48]	; 0x30
    err = lfs_fs_deorphan(lfs);
    if (err) {
        return err;
    }

    return 0;
    dc88:	movs	r4, #0
}
    dc8a:	mov	r0, r4
    dc8c:	add	sp, #140	; 0x8c
    dc8e:	pop	{r4, r5, r6, r7, pc}

        // check head blocks for orphans
        if (!pdir.split) {
            // check if we have a parent
            lfs_mdir_t parent;
            lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
    dc90:	add	r2, sp, #104	; 0x68
    dc92:	add	r1, sp, #64	; 0x40
    dc94:	mov	r0, r6
    dc96:	bl	b610 <lfs_fs_parent>
            if (tag < 0 && tag != LFS_ERR_NOENT) {
    dc9a:	subs	r3, r0, #0
    dc9c:	blt.n	dd36 <lfs_fs_forceconsistency+0x136>
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    dc9e:	ubfx	r2, r3, #0, #10
    dca2:	add	r5, sp, #24
    dca4:	str	r2, [sp, #8]
    dca6:	str	r4, [sp, #0]
    dca8:	add	r1, sp, #104	; 0x68
    dcaa:	str	r5, [sp, #4]
    dcac:	ldr	r2, [pc, #180]	; (dd64 <lfs_fs_forceconsistency+0x164>)
    dcae:	mov	r0, r6
    dcb0:	bl	b91c <lfs_dir_getslice>
            }

            lfs_block_t pair[2];
            lfs_stag_t res = lfs_dir_get(lfs, &parent,
                    LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
            if (res < 0) {
    dcb4:	cmp	r0, #0
    dcb6:	blt.n	dcda <lfs_fs_forceconsistency+0xda>
}

static inline bool lfs_pair_sync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
    dcb8:	ldr	r3, [sp, #24]
    dcba:	ldr	r1, [sp, #64]	; 0x40
    dcbc:	ldr	r2, [sp, #68]	; 0x44
    dcbe:	cmp	r3, r1
    dcc0:	beq.n	dd4c <lfs_fs_forceconsistency+0x14c>
    dcc2:	cmp	r3, r2
    dcc4:	beq.n	dd54 <lfs_fs_forceconsistency+0x154>
                LFS_DEBUG("Fixing half-orphan {0x%"PRIx32", 0x%"PRIx32"} "
                            "-> {0x%"PRIx32", 0x%"PRIx32"}",
                        pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                lfs_pair_tole32(pair);
                err = lfs_dir_commit(lfs, &pdir, LFS_MKATTRS(
    dcc6:	movs	r3, #1
    dcc8:	add	r2, sp, #32
    dcca:	add	r1, sp, #40	; 0x28
    dccc:	mov	r0, r6
    dcce:	str	r7, [sp, #32]
    dcd0:	str	r5, [sp, #36]	; 0x24
    dcd2:	bl	d7e4 <lfs_dir_commit>
                        {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pair}));
                lfs_pair_fromle32(pair);
                if (err) {
    dcd6:	cmp	r0, #0
    dcd8:	beq.n	dc66 <lfs_fs_forceconsistency+0x66>
    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
    dcda:	mov	r4, r0
    if (err) {
        return err;
    }

    return 0;
}
    dcdc:	mov	r0, r4
    dcde:	add	sp, #140	; 0x8c
    dce0:	pop	{r4, r5, r6, r7, pc}

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
    dce2:	movs	r2, #0
    dce4:	mov.w	r3, #4294967295
    dce8:	str	r2, [sp, #12]
    dcea:	str	r2, [sp, #8]
    dcec:	str	r2, [sp, #4]
    dcee:	add	r1, sp, #104	; 0x68
    dcf0:	str	r3, [sp, #0]
    dcf2:	add.w	r2, r0, #64	; 0x40
    dcf6:	bl	b164 <lfs_dir_fetchmatch>
            lfs_tag_id(lfs->gdisk.tag));

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
    if (err) {
    dcfa:	mov	r4, r0
    dcfc:	cmp	r0, #0
    dcfe:	bne.n	dc8a <lfs_fs_forceconsistency+0x8a>
static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
    return (int8_t)lfs_tag_chunk(tag);
}

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
    dd00:	ldr	r3, [r6, #60]	; 0x3c
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
    dd02:	ldr	r1, [r6, #48]	; 0x30
    dd04:	ldr	r2, [pc, #96]	; (dd68 <lfs_fs_forceconsistency+0x168>)
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
    dd06:	str	r0, [r6, #52]	; 0x34
static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
    return (int8_t)lfs_tag_chunk(tag);
}

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
    dd08:	ubfx	r5, r3, #10, #10
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
    dd0c:	lsls	r5, r5, #10
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
    dd0e:	ands	r2, r1
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
    dd10:	orr.w	r5, r5, #1333788672	; 0x4f800000
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
    dd14:	str	r0, [r6, #56]	; 0x38
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
    dd16:	orr.w	r5, r5, #7340032	; 0x700000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
    dd1a:	str	r2, [r6, #48]	; 0x30
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
    dd1c:	add	r1, sp, #104	; 0x68
    dd1e:	movs	r3, #1
    dd20:	add	r2, sp, #16
    dd22:	mov	r0, r6
    dd24:	str	r4, [sp, #20]
    dd26:	str	r5, [sp, #16]
    dd28:	bl	d7e4 <lfs_dir_commit>
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
    dd2c:	cmp	r0, #0
    dd2e:	beq.w	dc10 <lfs_fs_forceconsistency+0x10>
    dd32:	mov	r4, r0
    dd34:	b.n	dcdc <lfs_fs_forceconsistency+0xdc>
        // check head blocks for orphans
        if (!pdir.split) {
            // check if we have a parent
            lfs_mdir_t parent;
            lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
            if (tag < 0 && tag != LFS_ERR_NOENT) {
    dd36:	adds	r2, r3, #2
    dd38:	bne.n	dd5c <lfs_fs_forceconsistency+0x15c>
            if (tag == LFS_ERR_NOENT) {
                // we are an orphan
                LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
                        pdir.tail[0], pdir.tail[1]);

                err = lfs_dir_drop(lfs, &pdir, &dir);
    dd3a:	add	r2, sp, #72	; 0x48
    dd3c:	add	r1, sp, #40	; 0x28
    dd3e:	mov	r0, r6
    dd40:	bl	dbc4 <lfs_dir_drop>
                if (err) {
    dd44:	cmp	r0, #0
    dd46:	beq.n	dc66 <lfs_fs_forceconsistency+0x66>
    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
    dd48:	mov	r4, r0
    dd4a:	b.n	dcdc <lfs_fs_forceconsistency+0xdc>
}

static inline bool lfs_pair_sync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
    dd4c:	ldr	r0, [sp, #28]
    dd4e:	cmp	r0, r2
    dd50:	bne.n	dcc2 <lfs_fs_forceconsistency+0xc2>
    dd52:	b.n	dc56 <lfs_fs_forceconsistency+0x56>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
    dd54:	ldr	r3, [sp, #28]
    dd56:	cmp	r1, r3
    dd58:	bne.n	dcc6 <lfs_fs_forceconsistency+0xc6>
    dd5a:	b.n	dc56 <lfs_fs_forceconsistency+0x56>

        // check head blocks for orphans
        if (!pdir.split) {
            // check if we have a parent
            lfs_mdir_t parent;
            lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
    dd5c:	mov	r4, r3
    dd5e:	b.n	dc8a <lfs_fs_forceconsistency+0x8a>
    dd60:	.word	0x600ffc08
    dd64:	.word	0x7ffffc00
    dd68:	.word	0x800003ff

0000dd6c <lfs_mkdir>:
    return 0;
}


/// Top level directory operations ///
int lfs_mkdir(lfs_t *lfs, const char *path) {
    dd6c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd70:	sub	sp, #184	; 0xb8
    dd72:	mov	r4, r0
    dd74:	str	r1, [sp, #20]
    LFS_TRACE("lfs_mkdir(%p, \"%s\")", (void*)lfs, path);
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
    dd76:	bl	dc00 <lfs_fs_forceconsistency>
    if (err) {
    dd7a:	cbz	r0, dd82 <lfs_mkdir+0x16>
        return err;
    }

    LFS_TRACE("lfs_mkdir -> %d", 0);
    return 0;
}
    dd7c:	add	sp, #184	; 0xb8
    dd7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        LFS_TRACE("lfs_mkdir -> %d", err);
        return err;
    }

    struct lfs_mlist cwd;
    cwd.next = lfs->mlist;
    dd82:	ldr	r3, [r4, #40]	; 0x28
    dd84:	str	r3, [sp, #144]	; 0x90
    uint16_t id;
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
    dd86:	add	r1, sp, #152	; 0x98
    dd88:	add.w	r3, sp, #30
    dd8c:	add	r2, sp, #20
    dd8e:	mov	r0, r4
    dd90:	bl	bad8 <lfs_dir_find>
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
    dd94:	adds	r3, r0, #2
    dd96:	beq.n	dda6 <lfs_mkdir+0x3a>
        LFS_TRACE("lfs_mkdir -> %d", (err < 0) ? err : LFS_ERR_EXIST);
        return (err < 0) ? err : LFS_ERR_EXIST;
    dd98:	cmp	r0, #0
    dd9a:	it	ge
    dd9c:	mvnge.w	r0, #16
        return err;
    }

    LFS_TRACE("lfs_mkdir -> %d", 0);
    return 0;
}
    dda0:	add	sp, #184	; 0xb8
    dda2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    struct lfs_mlist cwd;
    cwd.next = lfs->mlist;
    uint16_t id;
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
    dda6:	ldrh.w	r2, [sp, #30]
    ddaa:	movw	r3, #1023	; 0x3ff
    ddae:	cmp	r2, r3
    ddb0:	beq.n	dd7c <lfs_mkdir+0x10>
        LFS_TRACE("lfs_mkdir -> %d", (err < 0) ? err : LFS_ERR_EXIST);
        return (err < 0) ? err : LFS_ERR_EXIST;
    }

    // check that name fits
    lfs_size_t nlen = strlen(path);
    ddb2:	ldr	r0, [sp, #20]
    ddb4:	bl	12240 <strlen>
    if (nlen > lfs->name_max) {
    ddb8:	ldr	r3, [r4, #108]	; 0x6c
    ddba:	cmp	r0, r3
        LFS_TRACE("lfs_mkdir -> %d", (err < 0) ? err : LFS_ERR_EXIST);
        return (err < 0) ? err : LFS_ERR_EXIST;
    }

    // check that name fits
    lfs_size_t nlen = strlen(path);
    ddbc:	mov	r7, r0
    if (nlen > lfs->name_max) {
    ddbe:	bhi.n	de78 <lfs_mkdir+0x10c>

    return 0;
}

static void lfs_alloc_ack(lfs_t *lfs) {
    lfs->free.ack = lfs->cfg->block_count;
    ddc0:	ldr	r3, [r4, #104]	; 0x68
    ddc2:	ldr	r3, [r3, #32]
    ddc4:	str	r3, [r4, #96]	; 0x60
    }

    // build up new directory
    lfs_alloc_ack(lfs);
    lfs_mdir_t dir;
    err = lfs_dir_alloc(lfs, &dir);
    ddc6:	add	r1, sp, #48	; 0x30
    ddc8:	mov	r0, r4
    ddca:	bl	ca14 <lfs_dir_alloc>
    if (err) {
    ddce:	mov	r5, r0
    ddd0:	cmp	r0, #0
    ddd2:	bne.n	dd7c <lfs_mkdir+0x10>
        LFS_TRACE("lfs_mkdir -> %d", err);
        return err;
    }

    // find end of list
    lfs_mdir_t pred = cwd.m;
    ddd4:	add.w	lr, sp, #152	; 0x98
    ddd8:	ldmia.w	lr!, {r0, r1, r2, r3}
    dddc:	add	r6, sp, #80	; 0x50
    ddde:	stmia	r6!, {r0, r1, r2, r3}
    dde0:	ldmia.w	lr, {r0, r1, r2, r3}

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
    dde4:	mov.w	r8, #4294967295
        LFS_TRACE("lfs_mkdir -> %d", err);
        return err;
    }

    // find end of list
    lfs_mdir_t pred = cwd.m;
    dde8:	stmia.w	r6, {r0, r1, r2, r3}
    while (pred.split) {
    ddec:	b.n	de00 <lfs_mkdir+0x94>

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
    ddee:	str	r5, [sp, #12]
    ddf0:	str	r5, [sp, #8]
    ddf2:	str	r5, [sp, #4]
    ddf4:	str.w	r8, [sp]
    ddf8:	bl	b164 <lfs_dir_fetchmatch>

    // find end of list
    lfs_mdir_t pred = cwd.m;
    while (pred.split) {
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
        if (err) {
    ddfc:	cmp	r0, #0
    ddfe:	bne.n	dd7c <lfs_mkdir+0x10>
        return err;
    }

    // find end of list
    lfs_mdir_t pred = cwd.m;
    while (pred.split) {
    de00:	ldrb.w	r6, [sp, #103]	; 0x67

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
    de04:	mov.w	r3, #4294967295
    de08:	add	r2, sp, #104	; 0x68
    de0a:	add	r1, sp, #80	; 0x50
    de0c:	mov	r0, r4
        return err;
    }

    // find end of list
    lfs_mdir_t pred = cwd.m;
    while (pred.split) {
    de0e:	cmp	r6, #0
    de10:	bne.n	ddee <lfs_mkdir+0x82>
        }
    }

    // setup dir
    lfs_pair_tole32(pred.tail);
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
    de12:	ldr	r5, [pc, #204]	; (dee0 <lfs_mkdir+0x174>)
    de14:	str	r2, [sp, #36]	; 0x24
    de16:	movs	r3, #1
    de18:	add	r2, sp, #32
    de1a:	add	r1, sp, #48	; 0x30
    de1c:	str	r5, [sp, #32]
    de1e:	bl	d7e4 <lfs_dir_commit>
            {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pred.tail}));
    lfs_pair_fromle32(pred.tail);
    if (err) {
    de22:	cmp	r0, #0
    de24:	bne.n	dd7c <lfs_mkdir+0x10>
        LFS_TRACE("lfs_mkdir -> %d", err);
        return err;
    }

    // current block end of list?
    if (cwd.m.split) {
    de26:	ldrb.w	r2, [sp, #175]	; 0xaf
    de2a:	cbnz	r2, de7e <lfs_mkdir+0x112>
        lfs_fs_preporphans(lfs, -1);
    }

    // now insert into our parent block
    lfs_pair_tole32(dir.pair);
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
    de2c:	ldrh.w	r5, [sp, #30]
    de30:	ldr	r3, [pc, #172]	; (dee0 <lfs_mkdir+0x174>)
    de32:	lsls	r5, r5, #10
    de34:	cmp	r2, #0
    de36:	orr.w	r2, r5, #1073741824	; 0x40000000
    de3a:	add	r1, sp, #48	; 0x30
    de3c:	orr.w	r6, r5, #2097152	; 0x200000
    de40:	mov	r0, r4
    de42:	orr.w	r2, r2, #1048576	; 0x100000
    de46:	ite	eq
    de48:	moveq	r4, r3
    de4a:	movne	r4, #0
    de4c:	add	r3, sp, #48	; 0x30
    de4e:	orr.w	r5, r5, #536870912	; 0x20000000
    de52:	orrs	r7, r6
    de54:	str	r1, [sp, #132]	; 0x84
    de56:	orr.w	r5, r5, #8
    de5a:	movs	r6, #0
    de5c:	str	r3, [sp, #140]	; 0x8c
    de5e:	str	r2, [sp, #112]	; 0x70
    de60:	str	r4, [sp, #136]	; 0x88
    de62:	add	r1, sp, #152	; 0x98
    de64:	ldr	r4, [sp, #20]
    de66:	str	r7, [sp, #120]	; 0x78
    de68:	movs	r3, #4
    de6a:	add	r2, sp, #112	; 0x70
    de6c:	str	r5, [sp, #128]	; 0x80
    de6e:	str	r6, [sp, #116]	; 0x74
    de70:	str	r4, [sp, #124]	; 0x7c
    de72:	bl	d7e4 <lfs_dir_commit>
    de76:	b.n	dd7c <lfs_mkdir+0x10>

    // check that name fits
    lfs_size_t nlen = strlen(path);
    if (nlen > lfs->name_max) {
        LFS_TRACE("lfs_mkdir -> %d", LFS_ERR_NAMETOOLONG);
        return LFS_ERR_NAMETOOLONG;
    de78:	mvn.w	r0, #35	; 0x23
    de7c:	b.n	dd7c <lfs_mkdir+0x10>
    return 0;
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
    de7e:	ldr	r3, [r4, #48]	; 0x30

        // it's possible our predecessor has to be relocated, and if
        // our parent is our predecessor's predecessor, this could have
        // caused our parent to go out of date, fortunately we can hook
        // ourselves into littlefs to catch this
        cwd.type = 0;
    de80:	strb.w	r0, [sp, #150]	; 0x96
    return 0;
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
    de84:	adds	r3, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
    de86:	ubfx	r2, r3, #0, #10
    de8a:	adds	r2, #0
    de8c:	it	ne
    de8e:	movne	r2, #1
    de90:	bic.w	r3, r3, #2147483648	; 0x80000000
    de94:	orr.w	r3, r3, r2, lsl #31
        // our parent is our predecessor's predecessor, this could have
        // caused our parent to go out of date, fortunately we can hook
        // ourselves into littlefs to catch this
        cwd.type = 0;
        cwd.id = 0;
        lfs->mlist = &cwd;
    de98:	add	r2, sp, #144	; 0x90
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
    de9a:	str	r3, [r4, #48]	; 0x30
        // our parent is our predecessor's predecessor, this could have
        // caused our parent to go out of date, fortunately we can hook
        // ourselves into littlefs to catch this
        cwd.type = 0;
        cwd.id = 0;
        lfs->mlist = &cwd;
    de9c:	str	r2, [r4, #40]	; 0x28
        // it's possible our predecessor has to be relocated, and if
        // our parent is our predecessor's predecessor, this could have
        // caused our parent to go out of date, fortunately we can hook
        // ourselves into littlefs to catch this
        cwd.type = 0;
        cwd.id = 0;
    de9e:	strh.w	r0, [sp, #148]	; 0x94
        lfs->mlist = &cwd;

        lfs_pair_tole32(dir.pair);
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
    dea2:	str	r5, [sp, #40]	; 0x28
    dea4:	add	r1, sp, #80	; 0x50
    dea6:	add	r5, sp, #48	; 0x30
    dea8:	movs	r3, #1
    deaa:	add	r2, sp, #40	; 0x28
    deac:	mov	r0, r4
    deae:	str	r5, [sp, #44]	; 0x2c
    deb0:	bl	d7e4 <lfs_dir_commit>
                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
        lfs_pair_fromle32(dir.pair);
        if (err) {
    deb4:	cbnz	r0, ded8 <lfs_mkdir+0x16c>
    return 0;
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
    deb6:	ldr	r3, [r4, #48]	; 0x30
            lfs->mlist = cwd.next;
            LFS_TRACE("lfs_mkdir -> %d", err);
            return err;
        }

        lfs->mlist = cwd.next;
    deb8:	ldr	r2, [sp, #144]	; 0x90
    deba:	str	r2, [r4, #40]	; 0x28
    return 0;
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
    debc:	subs	r3, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
    debe:	ubfx	r2, r3, #0, #10
    dec2:	adds	r2, #0
    dec4:	it	ne
    dec6:	movne	r2, #1
    dec8:	bic.w	r3, r3, #2147483648	; 0x80000000
    decc:	orr.w	r3, r3, r2, lsl #31
    ded0:	str	r3, [r4, #48]	; 0x30
    ded2:	ldrb.w	r2, [sp, #175]	; 0xaf
    ded6:	b.n	de2c <lfs_mkdir+0xc0>
        lfs_pair_tole32(dir.pair);
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
        lfs_pair_fromle32(dir.pair);
        if (err) {
            lfs->mlist = cwd.next;
    ded8:	ldr	r3, [sp, #144]	; 0x90
    deda:	str	r3, [r4, #40]	; 0x28
            LFS_TRACE("lfs_mkdir -> %d", err);
            return err;
    dedc:	b.n	dd7c <lfs_mkdir+0x10>
    dede:	nop
    dee0:	.word	0x600ffc08

0000dee4 <lfs_file_sync>:

int lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {
    LFS_TRACE("lfs_file_sync(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(file->flags & LFS_F_OPENED);

    if (file->flags & LFS_F_ERRED) {
    dee4:	ldr	r2, [r1, #48]	; 0x30
    dee6:	lsls	r3, r2, #12
    dee8:	bpl.n	deee <lfs_file_sync+0xa>
        // it's not safe to do anything if our file errored
        LFS_TRACE("lfs_file_sync -> %d", 0);
        return 0;
    deea:	movs	r0, #0
        file->flags &= ~LFS_F_DIRTY;
    }

    LFS_TRACE("lfs_file_sync -> %d", 0);
    return 0;
}
    deec:	bx	lr
    }

    return 0;
}

int lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {
    deee:	push	{r4, r5, r6, r7, lr}
    def0:	sub	sp, #28
    def2:	mov	r4, r1
    def4:	mov	r5, r0
        // it's not safe to do anything if our file errored
        LFS_TRACE("lfs_file_sync -> %d", 0);
        return 0;
    }

    int err = lfs_file_flush(lfs, file);
    def6:	bl	cf58 <lfs_file_flush>
    if (err) {
        file->flags |= LFS_F_ERRED;
    defa:	ldr	r3, [r4, #48]	; 0x30
        LFS_TRACE("lfs_file_sync -> %d", 0);
        return 0;
    }

    int err = lfs_file_flush(lfs, file);
    if (err) {
    defc:	cmp	r0, #0
    defe:	bne.n	df64 <lfs_file_sync+0x80>
        file->flags |= LFS_F_ERRED;
        LFS_TRACE("lfs_file_sync -> %d", err);
        return err;
    }

    if ((file->flags & LFS_F_DIRTY) &&
    df00:	lsls	r2, r3, #15
    df02:	bpl.n	df5e <lfs_file_sync+0x7a>
    pair[0] = pair[1];
    pair[1] = t;
}

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    df04:	ldr	r2, [r4, #8]
    df06:	adds	r2, #1
    df08:	beq.n	df5e <lfs_file_sync+0x7a>
    df0a:	ldr	r2, [r4, #12]
    df0c:	adds	r2, #1
    df0e:	beq.n	df5e <lfs_file_sync+0x7a>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
    df10:	lsls	r3, r3, #11
    df12:	bmi.n	df6e <lfs_file_sync+0x8a>
            size = file->ctz.size;
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
    df14:	add.w	r3, r4, #40	; 0x28
    df18:	ldmia.w	r3, {r0, r1}
    df1c:	ldr	r3, [pc, #88]	; (df78 <lfs_file_sync+0x94>)
    df1e:	stmia.w	sp, {r0, r1}
            lfs_ctz_tole32(&ctz);
            buffer = &ctz;
    df22:	mov	r0, sp
            size = sizeof(ctz);
    df24:	movs	r1, #8
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
    df26:	ldr	r6, [r4, #80]	; 0x50
    df28:	ldrh	r2, [r4, #4]
    df2a:	ldr	r7, [r6, #8]
    df2c:	ldr	r6, [r6, #4]
    df2e:	str	r0, [sp, #12]
    df30:	orrs	r1, r3
    df32:	orr.w	r7, r7, #270532608	; 0x10200000
    df36:	lsls	r3, r2, #10
    df38:	mov	r0, r5
    df3a:	orrs	r7, r3
    df3c:	orr.w	r5, r1, r3
    df40:	add	r2, sp, #8
    df42:	movs	r3, #2
    df44:	add.w	r1, r4, #8
    df48:	str	r6, [sp, #20]
    df4a:	str	r7, [sp, #16]
    df4c:	str	r5, [sp, #8]
    df4e:	bl	d7e4 <lfs_dir_commit>
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
            file->flags |= LFS_F_ERRED;
    df52:	ldr	r3, [r4, #48]	; 0x30
        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
    df54:	cbnz	r0, df64 <lfs_file_sync+0x80>
            file->flags |= LFS_F_ERRED;
            LFS_TRACE("lfs_file_sync -> %d", err);
            return err;
        }

        file->flags &= ~LFS_F_DIRTY;
    df56:	bic.w	r3, r3, #65536	; 0x10000
    df5a:	str	r3, [r4, #48]	; 0x30
    df5c:	b.n	df60 <lfs_file_sync+0x7c>
    LFS_ASSERT(file->flags & LFS_F_OPENED);

    if (file->flags & LFS_F_ERRED) {
        // it's not safe to do anything if our file errored
        LFS_TRACE("lfs_file_sync -> %d", 0);
        return 0;
    df5e:	movs	r0, #0
        file->flags &= ~LFS_F_DIRTY;
    }

    LFS_TRACE("lfs_file_sync -> %d", 0);
    return 0;
}
    df60:	add	sp, #28
    df62:	pop	{r4, r5, r6, r7, pc}
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
            file->flags |= LFS_F_ERRED;
    df64:	orr.w	r3, r3, #524288	; 0x80000
    df68:	str	r3, [r4, #48]	; 0x30
        file->flags &= ~LFS_F_DIRTY;
    }

    LFS_TRACE("lfs_file_sync -> %d", 0);
    return 0;
}
    df6a:	add	sp, #28
    df6c:	pop	{r4, r5, r6, r7, pc}
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
            buffer = file->cache.buffer;
    df6e:	ldr	r0, [r4, #76]	; 0x4c
            size = file->ctz.size;
    df70:	ldr	r1, [r4, #44]	; 0x2c
    df72:	ldr	r3, [pc, #8]	; (df7c <lfs_file_sync+0x98>)
    df74:	b.n	df26 <lfs_file_sync+0x42>
    df76:	nop
    df78:	.word	0x20200000
    df7c:	.word	0x20100000

0000df80 <lfs_file_close>:
    int err = lfs_file_opencfg(lfs, file, path, flags, &defaults);
    LFS_TRACE("lfs_file_open -> %d", err);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
    df80:	push	{r4, r5, r6, lr}
    df82:	mov	r5, r0
    df84:	mov	r4, r1
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(file->flags & LFS_F_OPENED);

    int err = lfs_file_sync(lfs, file);
    df86:	bl	dee4 <lfs_file_sync>

    // remove from list of mdirs
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
    df8a:	ldr	r2, [r5, #40]	; 0x28

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(file->flags & LFS_F_OPENED);

    int err = lfs_file_sync(lfs, file);
    df8c:	mov	r6, r0

    // remove from list of mdirs
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
    df8e:	cbz	r2, dfa2 <lfs_file_close+0x22>
        if (*p == (struct lfs_mlist*)file) {
    df90:	cmp	r4, r2
    df92:	bne.n	df9c <lfs_file_close+0x1c>
    df94:	b.n	dfb4 <lfs_file_close+0x34>
    df96:	cmp	r4, r3
    df98:	beq.n	dfba <lfs_file_close+0x3a>
    df9a:	mov	r2, r3
    LFS_ASSERT(file->flags & LFS_F_OPENED);

    int err = lfs_file_sync(lfs, file);

    // remove from list of mdirs
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
    df9c:	ldr	r3, [r2, #0]
    df9e:	cmp	r3, #0
    dfa0:	bne.n	df96 <lfs_file_close+0x16>
            break;
        }
    }

    // clean up memory
    if (!file->cfg->buffer) {
    dfa2:	ldr	r3, [r4, #80]	; 0x50
    dfa4:	ldr	r3, [r3, #0]
    dfa6:	cbz	r3, dfc6 <lfs_file_close+0x46>
        lfs_free(file->cache.buffer);
    }

    file->flags &= ~LFS_F_OPENED;
    dfa8:	ldr	r3, [r4, #48]	; 0x30
    dfaa:	bic.w	r3, r3, #2097152	; 0x200000
    LFS_TRACE("lfs_file_close -> %d", err);
    return err;
}
    dfae:	mov	r0, r6
    // clean up memory
    if (!file->cfg->buffer) {
        lfs_free(file->cache.buffer);
    }

    file->flags &= ~LFS_F_OPENED;
    dfb0:	str	r3, [r4, #48]	; 0x30
    LFS_TRACE("lfs_file_close -> %d", err);
    return err;
}
    dfb2:	pop	{r4, r5, r6, pc}
    LFS_ASSERT(file->flags & LFS_F_OPENED);

    int err = lfs_file_sync(lfs, file);

    // remove from list of mdirs
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
    dfb4:	add.w	r2, r5, #40	; 0x28
    dfb8:	mov	r3, r4
        if (*p == (struct lfs_mlist*)file) {
            *p = (*p)->next;
    dfba:	ldr	r3, [r3, #0]
    dfbc:	str	r3, [r2, #0]
            break;
        }
    }

    // clean up memory
    if (!file->cfg->buffer) {
    dfbe:	ldr	r3, [r4, #80]	; 0x50
    dfc0:	ldr	r3, [r3, #0]
    dfc2:	cmp	r3, #0
    dfc4:	bne.n	dfa8 <lfs_file_close+0x28>
}

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
#ifndef LFS_NO_MALLOC
    free(p);
    dfc6:	ldr	r0, [r4, #76]	; 0x4c
    dfc8:	bl	11040 <free>
    dfcc:	b.n	dfa8 <lfs_file_close+0x28>
    dfce:	nop

0000dfd0 <lfs_file_opencfg>:


/// Top level file operations ///
int lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
    dfd0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dfd4:	mov	r7, r3
    dfd6:	sub	sp, #52	; 0x34
                 ".buffer=%p, .attrs=%p, .attr_count=%"PRIu32"})",
            (void*)lfs, (void*)file, path, flags,
            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);

    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & 3) != LFS_O_RDONLY) {
    dfd8:	and.w	r3, r3, #3
    dfdc:	cmp	r3, #1


/// Top level file operations ///
int lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
    dfde:	mov	r4, r1
    dfe0:	str	r2, [sp, #20]
    dfe2:	mov	r6, r0
                 ".buffer=%p, .attrs=%p, .attr_count=%"PRIu32"})",
            (void*)lfs, (void*)file, path, flags,
            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);

    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & 3) != LFS_O_RDONLY) {
    dfe4:	beq.n	dfec <lfs_file_opencfg+0x1c>
        int err = lfs_fs_forceconsistency(lfs);
    dfe6:	bl	dc00 <lfs_fs_forceconsistency>
        if (err) {
    dfea:	cbnz	r0, e03e <lfs_file_opencfg+0x6e>

    // setup simple file details
    int err;
    file->cfg = cfg;
    file->flags = flags | LFS_F_OPENED;
    file->pos = 0;
    dfec:	mov.w	r8, #0
        }
    }

    // setup simple file details
    int err;
    file->cfg = cfg;
    dff0:	ldr	r2, [sp, #88]	; 0x58
    dff2:	str	r2, [r4, #80]	; 0x50
    file->flags = flags | LFS_F_OPENED;
    dff4:	orr.w	r3, r7, #2097152	; 0x200000
    file->pos = 0;
    file->off = 0;
    file->cache.buffer = NULL;

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
    dff8:	add.w	r9, r4, #8
    }

    // setup simple file details
    int err;
    file->cfg = cfg;
    file->flags = flags | LFS_F_OPENED;
    dffc:	str	r3, [r4, #48]	; 0x30
    file->pos = 0;
    dffe:	str.w	r8, [r4, #52]	; 0x34
    file->off = 0;
    e002:	str.w	r8, [r4, #60]	; 0x3c
    file->cache.buffer = NULL;
    e006:	str.w	r8, [r4, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
    e00a:	mov	r1, r9
    e00c:	adds	r3, r4, #4
    e00e:	add	r2, sp, #20
    e010:	mov	r0, r6
    e012:	bl	bad8 <lfs_dir_find>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
    e016:	subs	r5, r0, #0
    e018:	blt.n	e0f4 <lfs_file_opencfg+0x124>
        err = tag;
        goto cleanup;
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
    e01a:	movs	r3, #1
    e01c:	strb	r3, [r4, #6]
    file->next = (lfs_file_t*)lfs->mlist;
    e01e:	ldr	r3, [r6, #40]	; 0x28
    e020:	str	r3, [r4, #0]
            err = LFS_ERR_NAMETOOLONG;
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
    } else if (flags & LFS_O_EXCL) {
    e022:	lsls	r3, r7, #22
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
    file->next = (lfs_file_t*)lfs->mlist;
    lfs->mlist = (struct lfs_mlist*)file;
    e024:	str	r4, [r6, #40]	; 0x28
            err = LFS_ERR_NAMETOOLONG;
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
    } else if (flags & LFS_O_EXCL) {
    e026:	bpl.n	e044 <lfs_file_opencfg+0x74>
    e028:	ldr	r3, [r4, #48]	; 0x30
        err = LFS_ERR_EXIST;
    e02a:	mvn.w	r5, #16
    LFS_TRACE("lfs_file_opencfg -> %d", 0);
    return 0;

cleanup:
    // clean up lingering resources
    file->flags |= LFS_F_ERRED;
    e02e:	orr.w	r3, r3, #524288	; 0x80000
    e032:	str	r3, [r4, #48]	; 0x30
    lfs_file_close(lfs, file);
    e034:	mov	r1, r4
    e036:	mov	r0, r6
    e038:	bl	df80 <lfs_file_close>
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    return err;
    e03c:	mov	r0, r5
}
    e03e:	add	sp, #52	; 0x34
    e040:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
    } else if (flags & LFS_O_EXCL) {
        err = LFS_ERR_EXIST;
        goto cleanup;
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
    e044:	lsrs	r5, r5, #20
    e046:	cmp	r5, #1
    e048:	beq.n	e052 <lfs_file_opencfg+0x82>
        err = LFS_ERR_ISDIR;
    e04a:	mvn.w	r5, #20
    e04e:	ldr	r3, [r4, #48]	; 0x30
    e050:	b.n	e02e <lfs_file_opencfg+0x5e>
        goto cleanup;
    } else if (flags & LFS_O_TRUNC) {
    e052:	ands.w	r7, r7, #1024	; 0x400
    e056:	beq.n	e12c <lfs_file_opencfg+0x15c>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
    e058:	ldrh.w	fp, [r4, #4]
        file->flags |= LFS_F_DIRTY;
    e05c:	ldr	r3, [r4, #48]	; 0x30
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
        err = LFS_ERR_ISDIR;
        goto cleanup;
    } else if (flags & LFS_O_TRUNC) {
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
    e05e:	mov.w	fp, fp, lsl #10
    e062:	orr.w	fp, fp, #536870912	; 0x20000000
        file->flags |= LFS_F_DIRTY;
    e066:	orr.w	r3, r3, #65536	; 0x10000
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
        err = LFS_ERR_ISDIR;
        goto cleanup;
    } else if (flags & LFS_O_TRUNC) {
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
    e06a:	orr.w	fp, fp, #1048576	; 0x100000
        file->flags |= LFS_F_DIRTY;
    e06e:	str	r3, [r4, #48]	; 0x30
        }
        lfs_ctz_fromle32(&file->ctz);
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
    e070:	ldr	r5, [r4, #80]	; 0x50
    e072:	ldr	r3, [r5, #8]
    e074:	cmp	r3, #0
    e076:	beq.n	e15e <lfs_file_opencfg+0x18e>
    e078:	movs	r7, #0
    e07a:	mov	r8, r7
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    e07c:	mov	sl, r7
    e07e:	b.n	e0ce <lfs_file_opencfg+0xfe>
    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
        if ((file->flags & 3) != LFS_O_WRONLY) {
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
    e080:	ldr	r5, [r5, #4]
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
        if ((file->flags & 3) != LFS_O_WRONLY) {
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
    e082:	ldrh	r3, [r4, #4]
    e084:	ldrb.w	ip, [r5, r7]
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
    e088:	add.w	lr, r5, r7
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
        if ((file->flags & 3) != LFS_O_WRONLY) {
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
    e08c:	add.w	ip, ip, #768	; 0x300
    e090:	ldr.w	r5, [lr, #8]
    e094:	orr.w	r5, r5, r3, lsl #10
    e098:	orr.w	r3, r5, ip, lsl #20
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    e09c:	ubfx	r5, r3, #0, #10
    e0a0:	str	r5, [sp, #8]
    e0a2:	ldr.w	r5, [lr, #4]
    e0a6:	str	r5, [sp, #4]
    e0a8:	str.w	sl, [sp]
    e0ac:	bl	b91c <lfs_dir_getslice>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
            if (res < 0 && res != LFS_ERR_NOENT) {
    e0b0:	subs	r5, r0, #0
    e0b2:	ldr	r3, [r4, #48]	; 0x30
    e0b4:	blt.n	e158 <lfs_file_opencfg+0x188>
                err = res;
                goto cleanup;
            }
        }

        if ((file->flags & 3) != LFS_O_RDONLY) {
    e0b6:	and.w	r2, r3, #3
    e0ba:	cmp	r2, #1
    e0bc:	ldr	r5, [r4, #80]	; 0x50
    e0be:	bne.n	e0e0 <lfs_file_opencfg+0x110>
        }
        lfs_ctz_fromle32(&file->ctz);
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
    e0c0:	ldr	r3, [r5, #8]
    e0c2:	add.w	r8, r8, #1
    e0c6:	cmp	r3, r8
    e0c8:	add.w	r7, r7, #12
    e0cc:	bls.n	e15e <lfs_file_opencfg+0x18e>
        if ((file->flags & 3) != LFS_O_WRONLY) {
    e0ce:	ldr	r3, [r4, #48]	; 0x30
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    e0d0:	ldr	r2, [pc, #352]	; (e234 <lfs_file_opencfg+0x264>)
        lfs_ctz_fromle32(&file->ctz);
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
        if ((file->flags & 3) != LFS_O_WRONLY) {
    e0d2:	and.w	lr, r3, #3
    e0d6:	cmp.w	lr, #2
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    e0da:	mov	r1, r9
    e0dc:	mov	r0, r6
        lfs_ctz_fromle32(&file->ctz);
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
        if ((file->flags & 3) != LFS_O_WRONLY) {
    e0de:	bne.n	e080 <lfs_file_opencfg+0xb0>
                goto cleanup;
            }
        }

        if ((file->flags & 3) != LFS_O_RDONLY) {
            if (file->cfg->attrs[i].size > lfs->attr_max) {
    e0e0:	ldr	r2, [r5, #4]
    e0e2:	ldr	r1, [r6, #116]	; 0x74
    e0e4:	add	r2, r7
                err = LFS_ERR_NOSPC;
                goto cleanup;
            }

            file->flags |= LFS_F_DIRTY;
    e0e6:	orr.w	r0, r3, #65536	; 0x10000
                goto cleanup;
            }
        }

        if ((file->flags & 3) != LFS_O_RDONLY) {
            if (file->cfg->attrs[i].size > lfs->attr_max) {
    e0ea:	ldr	r2, [r2, #8]
    e0ec:	cmp	r2, r1
    e0ee:	bhi.n	e184 <lfs_file_opencfg+0x1b4>
                err = LFS_ERR_NOSPC;
                goto cleanup;
            }

            file->flags |= LFS_F_DIRTY;
    e0f0:	str	r0, [r4, #48]	; 0x30
    e0f2:	b.n	e0c0 <lfs_file_opencfg+0xf0>
    file->off = 0;
    file->cache.buffer = NULL;

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
    e0f4:	adds	r0, r5, #2
    e0f6:	beq.n	e0fc <lfs_file_opencfg+0x12c>
    e0f8:	ldr	r3, [r4, #48]	; 0x30
    e0fa:	b.n	e02e <lfs_file_opencfg+0x5e>
    e0fc:	ldrh.w	sl, [r4, #4]
    e100:	movw	r3, #1023	; 0x3ff
    e104:	cmp	sl, r3
    e106:	beq.n	e0f8 <lfs_file_opencfg+0x128>
        err = tag;
        goto cleanup;
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
    e108:	movs	r3, #1
    e10a:	strb	r3, [r4, #6]
    file->next = (lfs_file_t*)lfs->mlist;
    e10c:	ldr	r3, [r6, #40]	; 0x28
    e10e:	str	r3, [r4, #0]
    lfs->mlist = (struct lfs_mlist*)file;

    if (tag == LFS_ERR_NOENT) {
        if (!(flags & LFS_O_CREAT)) {
    e110:	lsls	r1, r7, #23
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
    file->next = (lfs_file_t*)lfs->mlist;
    lfs->mlist = (struct lfs_mlist*)file;
    e112:	str	r4, [r6, #40]	; 0x28

    if (tag == LFS_ERR_NOENT) {
        if (!(flags & LFS_O_CREAT)) {
    e114:	bpl.n	e0f8 <lfs_file_opencfg+0x128>
            err = LFS_ERR_NOENT;
            goto cleanup;
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
    e116:	ldr	r5, [sp, #20]
    e118:	mov	r0, r5
    e11a:	bl	12240 <strlen>
        if (nlen > lfs->name_max) {
    e11e:	ldr	r3, [r6, #108]	; 0x6c
    e120:	cmp	r0, r3
    e122:	bls.n	e18a <lfs_file_opencfg+0x1ba>
            err = LFS_ERR_NAMETOOLONG;
    e124:	mvn.w	r5, #35	; 0x23
    e128:	ldr	r3, [r4, #48]	; 0x30
    e12a:	b.n	e02e <lfs_file_opencfg+0x5e>
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    e12c:	ldrh	r3, [r4, #4]
    e12e:	str	r7, [sp, #0]
    e130:	lsls	r3, r3, #10
    e132:	movs	r1, #8
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
        file->flags |= LFS_F_DIRTY;
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
    e134:	add.w	r2, r4, #40	; 0x28
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    e138:	orr.w	r3, r3, #536870912	; 0x20000000
    e13c:	orrs	r3, r1
    e13e:	str	r1, [sp, #8]
    e140:	str	r2, [sp, #4]
    e142:	mov	r1, r9
    e144:	ldr	r2, [pc, #240]	; (e238 <lfs_file_opencfg+0x268>)
    e146:	mov	r0, r6
    e148:	bl	b91c <lfs_dir_getslice>
        file->flags |= LFS_F_DIRTY;
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
        if (tag < 0) {
    e14c:	subs.w	fp, r0, #0
    e150:	bge.n	e070 <lfs_file_opencfg+0xa0>
    e152:	mov	r5, fp
    e154:	ldr	r3, [r4, #48]	; 0x30
    e156:	b.n	e02e <lfs_file_opencfg+0x5e>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
            if (res < 0 && res != LFS_ERR_NOENT) {
    e158:	adds	r2, r5, #2
    e15a:	beq.n	e0b6 <lfs_file_opencfg+0xe6>
    e15c:	b.n	e02e <lfs_file_opencfg+0x5e>
            file->flags |= LFS_F_DIRTY;
        }
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
    e15e:	ldr	r0, [r5, #0]
    e160:	cmp	r0, #0
    e162:	beq.n	e220 <lfs_file_opencfg+0x250>
        file->cache.buffer = file->cfg->buffer;
    e164:	str	r0, [r4, #76]	; 0x4c
    rcache->block = LFS_BLOCK_NULL;
}

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
    e166:	ldr	r3, [r6, #104]	; 0x68
    e168:	movs	r1, #255	; 0xff
    e16a:	ldr	r2, [r3, #40]	; 0x28
    e16c:	bl	117bc <memset>
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
    e170:	movw	r3, #513	; 0x201
}

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
    pcache->block = LFS_BLOCK_NULL;
    e174:	mov.w	r2, #4294967295
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
    e178:	cmp.w	r3, fp, lsr #20
}

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
    pcache->block = LFS_BLOCK_NULL;
    e17c:	str	r2, [r4, #64]	; 0x40
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
    e17e:	beq.n	e1ca <lfs_file_opencfg+0x1fa>
            }
        }
    }

    LFS_TRACE("lfs_file_opencfg -> %d", 0);
    return 0;
    e180:	movs	r0, #0
    e182:	b.n	e03e <lfs_file_opencfg+0x6e>
            }
        }

        if ((file->flags & 3) != LFS_O_RDONLY) {
            if (file->cfg->attrs[i].size > lfs->attr_max) {
                err = LFS_ERR_NOSPC;
    e184:	mvn.w	r5, #27
    e188:	b.n	e02e <lfs_file_opencfg+0x5e>
            err = LFS_ERR_NAMETOOLONG;
            goto cleanup;
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
    e18a:	mov.w	sl, sl, lsl #10
    e18e:	orr.w	r3, sl, #1048576	; 0x100000
    e192:	orr.w	r1, sl, #1073741824	; 0x40000000
    e196:	orrs	r0, r3
    e198:	orr.w	r1, r1, #1048576	; 0x100000
    e19c:	str	r5, [sp, #36]	; 0x24
    e19e:	orr.w	r5, sl, #536870912	; 0x20000000
    e1a2:	orr.w	r5, r5, #1048576	; 0x100000
    e1a6:	str	r1, [sp, #24]
    e1a8:	str	r0, [sp, #32]
    e1aa:	movs	r3, #3
    e1ac:	add	r2, sp, #24
    e1ae:	mov	r1, r9
    e1b0:	mov	r0, r6
    e1b2:	str.w	r8, [sp, #28]
    e1b6:	str.w	r8, [sp, #44]	; 0x2c
    e1ba:	str	r5, [sp, #40]	; 0x28
    e1bc:	bl	d7e4 <lfs_dir_commit>
                {LFS_MKTAG(LFS_TYPE_CREATE, file->id, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));
        if (err) {
    e1c0:	cmp	r0, #0
    e1c2:	bne.n	e124 <lfs_file_opencfg+0x154>
            err = LFS_ERR_NAMETOOLONG;
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
    e1c4:	ldr.w	fp, [pc, #116]	; e23c <lfs_file_opencfg+0x26c>
    e1c8:	b.n	e070 <lfs_file_opencfg+0xa0>
        file->ctz.head = LFS_BLOCK_INLINE;
        file->ctz.size = lfs_tag_size(tag);
        file->flags |= LFS_F_INLINE;
        file->cache.block = file->ctz.head;
        file->cache.off = 0;
        file->cache.size = lfs->cfg->cache_size;
    e1ca:	ldr	r1, [r6, #104]	; 0x68

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
        file->ctz.size = lfs_tag_size(tag);
        file->flags |= LFS_F_INLINE;
    e1cc:	ldr	r3, [r4, #48]	; 0x30
        file->cache.block = file->ctz.head;
        file->cache.off = 0;
        file->cache.size = lfs->cfg->cache_size;
    e1ce:	ldr	r0, [r1, #40]	; 0x28
    e1d0:	str	r0, [r4, #72]	; 0x48
    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
    e1d2:	mvn.w	r1, #1
static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
}

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
    return tag & 0x000003ff;
    e1d6:	ubfx	r2, fp, #0, #10

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
        file->ctz.size = lfs_tag_size(tag);
        file->flags |= LFS_F_INLINE;
    e1da:	orr.w	r3, r3, #1048576	; 0x100000
        file->cache.block = file->ctz.head;
        file->cache.off = 0;
    e1de:	movs	r5, #0
    lfs_cache_zero(lfs, &file->cache);

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
        file->ctz.size = lfs_tag_size(tag);
    e1e0:	str	r2, [r4, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
    e1e2:	str	r3, [r4, #48]	; 0x30
    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
    e1e4:	str	r1, [r4, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
        file->flags |= LFS_F_INLINE;
        file->cache.block = file->ctz.head;
    e1e6:	str	r1, [r4, #64]	; 0x40
        file->cache.off = 0;
    e1e8:	str	r5, [r4, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
    e1ea:	cmp	r2, #0
    e1ec:	beq.n	e180 <lfs_file_opencfg+0x1b0>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
    e1ee:	movw	r2, #1022	; 0x3fe
    e1f2:	ldrh	r1, [r4, #4]
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    e1f4:	str	r5, [sp, #0]

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
    e1f6:	cmp	r0, r2
    e1f8:	mov	r3, r0
    e1fa:	it	cs
    e1fc:	movcs	r3, r2
    e1fe:	orr.w	r3, r3, r1, lsl #10
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    e202:	ldr	r2, [r4, #76]	; 0x4c
    e204:	str	r2, [sp, #4]
    e206:	ubfx	r1, r3, #0, #10
    e20a:	str	r1, [sp, #8]
    e20c:	orr.w	r3, r3, #536870912	; 0x20000000
    e210:	mov	r1, r9
    e212:	ldr	r2, [pc, #36]	; (e238 <lfs_file_opencfg+0x268>)
    e214:	mov	r0, r6
    e216:	bl	b91c <lfs_dir_getslice>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
            if (res < 0) {
    e21a:	subs	r5, r0, #0
    e21c:	bge.n	e180 <lfs_file_opencfg+0x1b0>
    e21e:	b.n	e0f8 <lfs_file_opencfg+0x128>

    // allocate buffer if needed
    if (file->cfg->buffer) {
        file->cache.buffer = file->cfg->buffer;
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
    e220:	ldr	r3, [r6, #104]	; 0x68

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
#ifndef LFS_NO_MALLOC
    return malloc(size);
    e222:	ldr	r0, [r3, #40]	; 0x28
    e224:	bl	11030 <malloc>
    e228:	str	r0, [r4, #76]	; 0x4c
        if (!file->cache.buffer) {
    e22a:	cmp	r0, #0
    e22c:	bne.n	e166 <lfs_file_opencfg+0x196>
            err = LFS_ERR_NOMEM;
    e22e:	mvn.w	r5, #11
    e232:	b.n	e0f8 <lfs_file_opencfg+0x128>
    e234:	.word	0x7ffffc00
    e238:	.word	0x700ffc00
    e23c:	.word	0x20100000

0000e240 <lfs_file_open>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    return err;
}

int lfs_file_open(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
    e240:	push	{r4, lr}
    e242:	sub	sp, #8
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_opencfg(lfs, file, path, flags, &defaults);
    e244:	ldr	r4, [pc, #8]	; (e250 <lfs_file_open+0x10>)
    e246:	str	r4, [sp, #0]
    e248:	bl	dfd0 <lfs_file_opencfg>
    LFS_TRACE("lfs_file_open -> %d", err);
    return err;
}
    e24c:	add	sp, #8
    e24e:	pop	{r4, pc}
    e250:	.word	0x00015ba4

0000e254 <lfs_remove>:
    int err = lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
    LFS_TRACE("lfs_stat -> %d", err);
    return err;
}

int lfs_remove(lfs_t *lfs, const char *path) {
    e254:	push	{r4, r5, r6, r7, lr}
    e256:	sub	sp, #108	; 0x6c
    e258:	mov	r5, r0
    e25a:	str	r1, [sp, #20]
    LFS_TRACE("lfs_remove(%p, \"%s\")", (void*)lfs, path);
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
    e25c:	bl	dc00 <lfs_fs_forceconsistency>
    if (err) {
    e260:	mov	r4, r0
    e262:	cbz	r0, e268 <lfs_remove+0x14>
        }
    }

    LFS_TRACE("lfs_remove -> %d", 0);
    return 0;
}
    e264:	add	sp, #108	; 0x6c
    e266:	pop	{r4, r5, r6, r7, pc}
        LFS_TRACE("lfs_remove -> %d", err);
        return err;
    }

    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
    e268:	mov	r3, r0
    e26a:	add	r1, sp, #32
    e26c:	add	r2, sp, #20
    e26e:	mov	r0, r5
    e270:	bl	bad8 <lfs_dir_find>
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
    e274:	cmp	r0, #0
    e276:	blt.n	e264 <lfs_remove+0x10>
static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
    return (int8_t)lfs_tag_chunk(tag);
}

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
    e278:	ubfx	r3, r0, #10, #10
        return err;
    }

    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
    e27c:	movw	r2, #1023	; 0x3ff
    e280:	cmp	r3, r2
    e282:	beq.n	e372 <lfs_remove+0x11e>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
    }

    struct lfs_mlist dir;
    dir.next = lfs->mlist;
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
    e284:	lsrs	r0, r0, #20
        LFS_TRACE("lfs_remove -> %"PRId32, (tag < 0) ? tag : LFS_ERR_INVAL);
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
    }

    struct lfs_mlist dir;
    dir.next = lfs->mlist;
    e286:	ldr	r2, [r5, #40]	; 0x28
    e288:	str	r2, [sp, #64]	; 0x40
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
    e28a:	cmp	r0, #2
    e28c:	beq.n	e2b0 <lfs_remove+0x5c>
        dir.id = 0;
        lfs->mlist = &dir;
    }

    // delete the entry
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
    e28e:	lsls	r3, r3, #10
    e290:	orr.w	r6, r3, #1333788672	; 0x4f800000
    e294:	orr.w	r6, r6, #7340032	; 0x700000
    e298:	add	r1, sp, #32
    e29a:	movs	r3, #1
    e29c:	add	r2, sp, #24
    e29e:	mov	r0, r5
    e2a0:	str	r6, [sp, #24]
    e2a2:	str	r4, [sp, #28]
    e2a4:	bl	d7e4 <lfs_dir_commit>
        lfs->mlist = dir.next;
        LFS_TRACE("lfs_remove -> %d", err);
        return err;
    }

    lfs->mlist = dir.next;
    e2a8:	ldr	r3, [sp, #64]	; 0x40
    e2aa:	str	r3, [r5, #40]	; 0x28
        }
    }

    LFS_TRACE("lfs_remove -> %d", 0);
    return 0;
}
    e2ac:	add	sp, #108	; 0x6c
    e2ae:	pop	{r4, r5, r6, r7, pc}
    dir.next = lfs->mlist;
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
        // must be empty before removal
        lfs_block_t pair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
    e2b0:	lsls	r6, r3, #10
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    e2b2:	movs	r2, #8
    e2b4:	orr.w	r3, r6, #536870912	; 0x20000000
    e2b8:	add	r7, sp, #24
    e2ba:	orrs	r3, r2
    e2bc:	str	r2, [sp, #8]
    e2be:	str	r4, [sp, #0]
    e2c0:	str	r7, [sp, #4]
    e2c2:	ldr	r2, [pc, #188]	; (e380 <lfs_remove+0x12c>)
    e2c4:	add	r1, sp, #32
    e2c6:	mov	r0, r5
    e2c8:	bl	b91c <lfs_dir_getslice>
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
        // must be empty before removal
        lfs_block_t pair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
        if (res < 0) {
    e2cc:	cmp	r0, #0
    e2ce:	blt.n	e264 <lfs_remove+0x10>

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
    e2d0:	mov.w	r3, #4294967295
    e2d4:	str	r4, [sp, #12]
    e2d6:	str	r4, [sp, #8]
    e2d8:	str	r4, [sp, #4]
    e2da:	add	r1, sp, #72	; 0x48
    e2dc:	str	r3, [sp, #0]
    e2de:	mov	r2, r7
    e2e0:	mov	r0, r5
    e2e2:	bl	b164 <lfs_dir_fetchmatch>
            return (int)res;
        }
        lfs_pair_fromle32(pair);

        err = lfs_dir_fetch(lfs, &dir.m, pair);
        if (err) {
    e2e6:	cmp	r0, #0
    e2e8:	bne.n	e264 <lfs_remove+0x10>
            LFS_TRACE("lfs_remove -> %d", err);
            return err;
        }

        if (dir.m.count > 0 || dir.m.split) {
    e2ea:	ldrh.w	r3, [sp, #92]	; 0x5c
    e2ee:	cmp	r3, #0
    e2f0:	bne.n	e378 <lfs_remove+0x124>
    e2f2:	ldrb.w	r4, [sp, #95]	; 0x5f
    e2f6:	cmp	r4, #0
    e2f8:	bne.n	e378 <lfs_remove+0x124>
    return 0;
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
    e2fa:	ldr	r3, [r5, #48]	; 0x30
        // mark fs as orphaned
        lfs_fs_preporphans(lfs, +1);

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        dir.type = 0;
    e2fc:	strb.w	r4, [sp, #70]	; 0x46
        dir.id = 0;
        lfs->mlist = &dir;
    e300:	add	r2, sp, #64	; 0x40
    return 0;
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
    e302:	adds	r3, #1

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        dir.type = 0;
        dir.id = 0;
        lfs->mlist = &dir;
    e304:	str	r2, [r5, #40]	; 0x28
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
    e306:	ubfx	r2, r3, #0, #10
    e30a:	adds	r2, #0
    e30c:	it	ne
    e30e:	movne	r2, #1
    e310:	bic.w	r3, r3, #2147483648	; 0x80000000
    e314:	orr.w	r3, r3, r2, lsl #31
        dir.id = 0;
        lfs->mlist = &dir;
    }

    // delete the entry
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
    e318:	orr.w	r6, r6, #1333788672	; 0x4f800000
    e31c:	orr.w	r6, r6, #7340032	; 0x700000
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
    e320:	str	r3, [r5, #48]	; 0x30
        dir.id = 0;
        lfs->mlist = &dir;
    }

    // delete the entry
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
    e322:	mov	r2, r7
    e324:	movs	r3, #1
    e326:	add	r1, sp, #32
    e328:	mov	r0, r5
    e32a:	str	r6, [sp, #24]
        lfs_fs_preporphans(lfs, +1);

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        dir.type = 0;
        dir.id = 0;
    e32c:	strh.w	r4, [sp, #68]	; 0x44
        lfs->mlist = &dir;
    }

    // delete the entry
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
    e330:	str	r4, [sp, #28]
    e332:	bl	d7e4 <lfs_dir_commit>
            {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(tag), 0), NULL}));
    if (err) {
    e336:	cmp	r0, #0
    e338:	bne.n	e2a8 <lfs_remove+0x54>
    return 0;
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
    e33a:	ldr	r3, [r5, #48]	; 0x30
        lfs->mlist = dir.next;
        LFS_TRACE("lfs_remove -> %d", err);
        return err;
    }

    lfs->mlist = dir.next;
    e33c:	ldr	r2, [sp, #64]	; 0x40
    e33e:	str	r2, [r5, #40]	; 0x28
    return 0;
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
    e340:	subs	r3, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
    e342:	ubfx	r2, r3, #0, #10
    e346:	adds	r2, #0
    e348:	it	ne
    e34a:	movne	r2, #1
    e34c:	bic.w	r3, r3, #2147483648	; 0x80000000
    e350:	orr.w	r3, r3, r2, lsl #31
    e354:	str	r3, [r5, #48]	; 0x30
    lfs->mlist = dir.next;
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
        // fix orphan
        lfs_fs_preporphans(lfs, -1);

        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
    e356:	add	r2, sp, #32
    e358:	add	r1, sp, #72	; 0x48
    e35a:	mov	r0, r5
    e35c:	bl	b698 <lfs_fs_pred>
        if (err) {
    e360:	cmp	r0, #0
    e362:	bne.w	e264 <lfs_remove+0x10>
            LFS_TRACE("lfs_remove -> %d", err);
            return err;
        }

        err = lfs_dir_drop(lfs, &cwd, &dir.m);
    e366:	add	r2, sp, #72	; 0x48
    e368:	add	r1, sp, #32
    e36a:	mov	r0, r5
    e36c:	bl	dbc4 <lfs_dir_drop>
    e370:	b.n	e264 <lfs_remove+0x10>

    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
        LFS_TRACE("lfs_remove -> %"PRId32, (tag < 0) ? tag : LFS_ERR_INVAL);
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
    e372:	mvn.w	r0, #21
    e376:	b.n	e264 <lfs_remove+0x10>
            return err;
        }

        if (dir.m.count > 0 || dir.m.split) {
            LFS_TRACE("lfs_remove -> %d", LFS_ERR_NOTEMPTY);
            return LFS_ERR_NOTEMPTY;
    e378:	mvn.w	r0, #38	; 0x26
    e37c:	b.n	e264 <lfs_remove+0x10>
    e37e:	nop
    e380:	.word	0x700ffc00

0000e384 <lfs_rename>:

    LFS_TRACE("lfs_remove -> %d", 0);
    return 0;
}

int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
    e384:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e388:	sub	sp, #196	; 0xc4
    e38a:	mov	r5, r0
    e38c:	str	r1, [sp, #28]
    e38e:	str	r2, [sp, #24]
    LFS_TRACE("lfs_rename(%p, \"%s\", \"%s\")", (void*)lfs, oldpath, newpath);

    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
    e390:	bl	dc00 <lfs_fs_forceconsistency>
    if (err) {
    e394:	cbz	r0, e39c <lfs_rename+0x18>
        }
    }

    LFS_TRACE("lfs_rename -> %d", 0);
    return 0;
}
    e396:	add	sp, #196	; 0xc4
    e398:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return err;
    }

    // find old entry
    lfs_mdir_t oldcwd;
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
    e39c:	mov	r3, r0
    e39e:	add	r1, sp, #48	; 0x30
    e3a0:	add	r2, sp, #28
    e3a2:	mov	r0, r5
    e3a4:	bl	bad8 <lfs_dir_find>
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
    e3a8:	subs	r4, r0, #0
    e3aa:	blt.w	e4cc <lfs_rename+0x148>
static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
    return (int8_t)lfs_tag_chunk(tag);
}

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
    e3ae:	ubfx	r6, r4, #10, #10
    }

    // find old entry
    lfs_mdir_t oldcwd;
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
    e3b2:	movw	r8, #1023	; 0x3ff
    e3b6:	cmp	r6, r8
    e3b8:	beq.w	e4c2 <lfs_rename+0x13e>
    }

    // find new entry
    lfs_mdir_t newcwd;
    uint16_t newid;
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
    e3bc:	add	r1, sp, #80	; 0x50
    e3be:	add.w	r3, sp, #38	; 0x26
    e3c2:	add	r2, sp, #24
    e3c4:	mov	r0, r5
    e3c6:	bl	bad8 <lfs_dir_find>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
    e3ca:	subs	r7, r0, #0
    e3cc:	blt.w	e4de <lfs_rename+0x15a>
    e3d0:	ubfx	r3, r7, #10, #10
    e3d4:	cmp	r3, r8
    e3d6:	beq.n	e4c2 <lfs_rename+0x13e>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    e3d8:	ldr.w	r9, [sp, #48]	; 0x30
    e3dc:	ldr	r3, [sp, #80]	; 0x50
    e3de:	cmp	r3, r9
    e3e0:	beq.n	e4d4 <lfs_rename+0x150>
    e3e2:	ldr.w	sl, [sp, #52]	; 0x34
    e3e6:	ldr	r2, [sp, #84]	; 0x54
    e3e8:	cmp	r2, sl
    e3ea:	beq.n	e4d4 <lfs_rename+0x150>
    e3ec:	cmp	r2, r9
    e3ee:	beq.w	e61e <lfs_rename+0x29a>
    e3f2:	subs.w	r8, sl, r3
    e3f6:	it	ne
    e3f8:	movne.w	r8, #1
    // if we're in the same pair there's a few special cases...
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
    uint16_t newoldid = lfs_tag_id(oldtag);

    struct lfs_mlist prevdir;
    prevdir.next = lfs->mlist;
    e3fc:	ldr	r3, [r5, #40]	; 0x28
    e3fe:	str	r3, [sp, #112]	; 0x70
    if (prevtag == LFS_ERR_NOENT) {
    e400:	adds	r2, r7, #2
    e402:	beq.w	e5ca <lfs_rename+0x246>
static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
    return (tag & 0x70000000) >> 20;
}

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
    return (tag & 0x7ff00000) >> 20;
    e406:	lsrs	r4, r4, #20
    e408:	uxth	r2, r4
        // directory/ to an id less than our old id, the global update
        // to handle this is a bit messy
        if (samepair && newid <= newoldid) {
            newoldid += 1;
        }
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
    e40a:	ubfx	r3, r7, #20, #11
    e40e:	cmp	r2, r3
    e410:	bne.w	e6ee <lfs_rename+0x36a>
        LFS_TRACE("lfs_rename -> %d", LFS_ERR_ISDIR);
        return LFS_ERR_ISDIR;
    } else if (samepair && newid == newoldid) {
    e414:	cmp.w	r8, #0
    e418:	bne.w	e58e <lfs_rename+0x20a>
    e41c:	ldrh.w	r3, [sp, #38]	; 0x26
    e420:	cmp	r3, r6
    e422:	beq.n	e4be <lfs_rename+0x13a>
        // we're renaming to ourselves??
        LFS_TRACE("lfs_rename -> %d", 0);
        return 0;
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
    e424:	cmp	r2, #2
    e426:	beq.w	e628 <lfs_rename+0x2a4>
    e42a:	add.w	sl, sp, #152	; 0x98
    e42e:	ldr	r2, [sp, #24]
    e430:	mov	r9, r6
    e432:	mov.w	r8, #0
    if (!samepair) {
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
    }

    // move over all attributes
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
    e436:	lsls	r3, r3, #10
    e438:	orr.w	r0, r3, #1333788672	; 0x4f800000
    e43c:	orr.w	r0, r0, #7340032	; 0x700000
    e440:	orr.w	r1, r3, #1073741824	; 0x40000000
    e444:	orr.w	r1, r1, #1048576	; 0x100000
    e448:	mov.w	fp, #0
    e44c:	str	r0, [sp, #152]	; 0x98
    e44e:	mov	r0, r2
    e450:	str	r3, [sp, #20]
    e452:	str	r2, [sp, #16]
    e454:	str	r1, [sp, #160]	; 0xa0
    e456:	str.w	fp, [sp, #156]	; 0x9c
    e45a:	str.w	fp, [sp, #164]	; 0xa4
    e45e:	bl	12240 <strlen>
    e462:	ldr	r3, [sp, #20]
    e464:	ldr	r2, [sp, #16]
    e466:	str	r2, [sp, #172]	; 0xac
    e468:	orr.w	r1, r9, r3
    e46c:	orrs	r0, r3
    e46e:	orr.w	r1, r1, #268435456	; 0x10000000
    e472:	orr.w	r4, r0, r4, lsl #20
    e476:	orr.w	r1, r1, #1048576	; 0x100000
    e47a:	add	r3, sp, #48	; 0x30
    e47c:	str	r4, [sp, #168]	; 0xa8
    e47e:	str	r1, [sp, #176]	; 0xb0
    e480:	str	r3, [sp, #180]	; 0xb4
    e482:	cmp.w	r8, #0
    e486:	bne.n	e53a <lfs_rename+0x1b6>
    e488:	lsls	r6, r6, #10
    e48a:	orr.w	r6, r6, #1333788672	; 0x4f800000
    e48e:	orr.w	r6, r6, #7340032	; 0x700000
    e492:	mov	r2, sl
    e494:	movs	r3, #5
    e496:	add	r1, sp, #80	; 0x50
    e498:	mov	r0, r5
    e49a:	str	r6, [sp, #184]	; 0xb8
    e49c:	str.w	r8, [sp, #188]	; 0xbc
    e4a0:	bl	d7e4 <lfs_dir_commit>
            {LFS_MKTAG(LFS_TYPE_CREATE, newid, 0), NULL},
            {LFS_MKTAG(lfs_tag_type3(oldtag), newid, strlen(newpath)), newpath},
            {LFS_MKTAG(LFS_FROM_MOVE, newid, lfs_tag_id(oldtag)), &oldcwd},
            {LFS_MKTAG_IF(samepair,
                LFS_TYPE_DELETE, newoldid, 0), NULL}));
    if (err) {
    e4a4:	mov	r4, r0
    e4a6:	cmp	r0, #0
    e4a8:	bne.w	e5be <lfs_rename+0x23a>
            LFS_TRACE("lfs_rename -> %d", err);
            return err;
        }
    }

    lfs->mlist = prevdir.next;
    e4ac:	ldr	r3, [sp, #112]	; 0x70
    e4ae:	str	r3, [r5, #40]	; 0x28
    if (prevtag != LFS_ERR_NOENT && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
    e4b0:	adds	r3, r7, #2
    e4b2:	beq.n	e4be <lfs_rename+0x13a>
    e4b4:	ubfx	r7, r7, #20, #11
    e4b8:	cmp	r7, #2
    e4ba:	beq.w	e6ba <lfs_rename+0x336>
        LFS_TRACE("lfs_rename -> %d", LFS_ERR_ISDIR);
        return LFS_ERR_ISDIR;
    } else if (samepair && newid == newoldid) {
        // we're renaming to ourselves??
        LFS_TRACE("lfs_rename -> %d", 0);
        return 0;
    e4be:	movs	r0, #0
    e4c0:	b.n	e396 <lfs_rename+0x12>
    lfs_mdir_t oldcwd;
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
        LFS_TRACE("lfs_rename -> %"PRId32,
                (oldtag < 0) ? oldtag : LFS_ERR_INVAL);
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
    e4c2:	mvn.w	r0, #21
        }
    }

    LFS_TRACE("lfs_rename -> %d", 0);
    return 0;
}
    e4c6:	add	sp, #196	; 0xc4
    e4c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e4cc:	mov	r0, r4
    e4ce:	add	sp, #196	; 0xc4
    e4d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    // if we're in the same pair there's a few special cases...
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
    uint16_t newoldid = lfs_tag_id(oldtag);

    struct lfs_mlist prevdir;
    prevdir.next = lfs->mlist;
    e4d4:	ldr	r3, [r5, #40]	; 0x28
    e4d6:	str	r3, [sp, #112]	; 0x70
    e4d8:	mov.w	r8, #0
    e4dc:	b.n	e406 <lfs_rename+0x82>

    // find new entry
    lfs_mdir_t newcwd;
    uint16_t newid;
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
    e4de:	adds	r1, r7, #2
    e4e0:	bne.n	e5c6 <lfs_rename+0x242>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
    e4e2:	ldrh.w	fp, [sp, #38]	; 0x26
    e4e6:	cmp	fp, r8
    e4e8:	beq.n	e5c6 <lfs_rename+0x242>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    e4ea:	ldr.w	r9, [sp, #48]	; 0x30
    e4ee:	ldr	r3, [sp, #80]	; 0x50
    e4f0:	cmp	r3, r9
    e4f2:	beq.w	e6fe <lfs_rename+0x37a>
    e4f6:	ldr.w	sl, [sp, #52]	; 0x34
    e4fa:	ldr	r2, [sp, #84]	; 0x54
    e4fc:	cmp	r2, sl
    e4fe:	bne.w	e3ec <lfs_rename+0x68>

    struct lfs_mlist prevdir;
    prevdir.next = lfs->mlist;
    if (prevtag == LFS_ERR_NOENT) {
        // check that name fits
        lfs_size_t nlen = strlen(newpath);
    e502:	ldr	r2, [sp, #24]
    // if we're in the same pair there's a few special cases...
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
    uint16_t newoldid = lfs_tag_id(oldtag);

    struct lfs_mlist prevdir;
    prevdir.next = lfs->mlist;
    e504:	ldr	r3, [r5, #40]	; 0x28
    e506:	str	r3, [sp, #112]	; 0x70
    if (prevtag == LFS_ERR_NOENT) {
        // check that name fits
        lfs_size_t nlen = strlen(newpath);
    e508:	mov	r0, r2
    e50a:	str	r2, [sp, #16]
    e50c:	bl	12240 <strlen>
        if (nlen > lfs->name_max) {
    e510:	ldr	r3, [r5, #108]	; 0x6c
    e512:	ldr	r2, [sp, #16]
    e514:	cmp	r0, r3
    e516:	bhi.w	e716 <lfs_rename+0x392>
        }

        // there is a small chance we are being renamed in the same
        // directory/ to an id less than our old id, the global update
        // to handle this is a bit messy
        if (samepair && newid <= newoldid) {
    e51a:	cmp	fp, r6
    e51c:	bhi.w	e6f4 <lfs_rename+0x370>
            newoldid += 1;
    e520:	adds	r1, r6, #1
    e522:	uxth	r1, r1
    if (!samepair) {
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
    }

    // move over all attributes
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
    e524:	mov.w	r8, #0
    e528:	mov	r9, r6
    e52a:	mov.w	r3, fp, lsl #10
    e52e:	lsrs	r4, r4, #20
    e530:	mov	r6, r1
    e532:	mov	r0, r8
    e534:	add.w	sl, sp, #152	; 0x98
    e538:	b.n	e440 <lfs_rename+0xbc>
    e53a:	mov	r2, sl
    e53c:	movs	r3, #5
    e53e:	add	r1, sp, #80	; 0x50
    e540:	mov	r0, r5
    e542:	str.w	fp, [sp, #184]	; 0xb8
    e546:	str.w	fp, [sp, #188]	; 0xbc
    e54a:	bl	d7e4 <lfs_dir_commit>
            {LFS_MKTAG(LFS_TYPE_CREATE, newid, 0), NULL},
            {LFS_MKTAG(lfs_tag_type3(oldtag), newid, strlen(newpath)), newpath},
            {LFS_MKTAG(LFS_FROM_MOVE, newid, lfs_tag_id(oldtag)), &oldcwd},
            {LFS_MKTAG_IF(samepair,
                LFS_TYPE_DELETE, newoldid, 0), NULL}));
    if (err) {
    e54e:	mov	r4, r0
    e550:	cmp	r0, #0
    e552:	bne.n	e5be <lfs_rename+0x23a>
    e554:	ldr	r3, [r5, #48]	; 0x30
        return err;
    }

    // let commit clean up after move (if we're different! otherwise move
    // logic already fixed it for us)
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
    e556:	lsrs	r2, r3, #20
    e558:	tst.w	r2, #1792	; 0x700
    e55c:	beq.n	e4ac <lfs_rename+0x128>
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
    e55e:	ldr	r2, [pc, #452]	; (e724 <lfs_rename+0x3a0>)
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
    e560:	str	r4, [r5, #52]	; 0x34
    // let commit clean up after move (if we're different! otherwise move
    // logic already fixed it for us)
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
        // prep gstate and delete move id
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
    e562:	mov.w	r0, r9, lsl #10
    e566:	orr.w	r0, r0, #1333788672	; 0x4f800000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
    e56a:	ands	r2, r3
    // let commit clean up after move (if we're different! otherwise move
    // logic already fixed it for us)
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
        // prep gstate and delete move id
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
    e56c:	orr.w	r0, r0, #7340032	; 0x700000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
    e570:	str	r2, [r5, #48]	; 0x30
    // let commit clean up after move (if we're different! otherwise move
    // logic already fixed it for us)
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
        // prep gstate and delete move id
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
    e572:	str	r0, [sp, #40]	; 0x28
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
    e574:	str	r4, [r5, #56]	; 0x38
    // let commit clean up after move (if we're different! otherwise move
    // logic already fixed it for us)
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
        // prep gstate and delete move id
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
    e576:	add	r1, sp, #48	; 0x30
    e578:	movs	r3, #1
    e57a:	add	r2, sp, #40	; 0x28
    e57c:	mov	r0, r5
    e57e:	str	r4, [sp, #44]	; 0x2c
    e580:	bl	d7e4 <lfs_dir_commit>
                {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(oldtag), 0), NULL}));
        if (err) {
    e584:	cmp	r0, #0
    e586:	beq.n	e4ac <lfs_rename+0x128>
            lfs->mlist = prevdir.next;
    e588:	ldr	r3, [sp, #112]	; 0x70
    e58a:	str	r3, [r5, #40]	; 0x28
            LFS_TRACE("lfs_rename -> %d", err);
            return err;
    e58c:	b.n	e396 <lfs_rename+0x12>
        return LFS_ERR_ISDIR;
    } else if (samepair && newid == newoldid) {
        // we're renaming to ourselves??
        LFS_TRACE("lfs_rename -> %d", 0);
        return 0;
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
    e58e:	cmp	r2, #2
    e590:	beq.n	e624 <lfs_rename+0x2a0>
    e592:	ldrh.w	fp, [sp, #38]	; 0x26
    e596:	add.w	sl, sp, #152	; 0x98
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
    e59a:	ldr	r2, [r5, #48]	; 0x30
    e59c:	ldr	r1, [pc, #388]	; (e724 <lfs_rename+0x3a0>)
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
    e59e:	str.w	r9, [r5, #52]	; 0x34
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
    e5a2:	lsls	r3, r6, #10
    e5a4:	orr.w	r3, r3, #1333788672	; 0x4f800000
    e5a8:	ands	r1, r2
    e5aa:	orr.w	r3, r3, #7340032	; 0x700000
    e5ae:	orrs	r3, r1
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
    e5b0:	ldr	r2, [sp, #52]	; 0x34
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
    e5b2:	str	r3, [r5, #48]	; 0x30
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
    e5b4:	str	r2, [r5, #56]	; 0x38
    e5b6:	mov	r3, fp
    e5b8:	ldr	r2, [sp, #24]
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
    e5ba:	mov	r9, r6
    e5bc:	b.n	e436 <lfs_rename+0xb2>
            {LFS_MKTAG(lfs_tag_type3(oldtag), newid, strlen(newpath)), newpath},
            {LFS_MKTAG(LFS_FROM_MOVE, newid, lfs_tag_id(oldtag)), &oldcwd},
            {LFS_MKTAG_IF(samepair,
                LFS_TYPE_DELETE, newoldid, 0), NULL}));
    if (err) {
        lfs->mlist = prevdir.next;
    e5be:	ldr	r3, [sp, #112]	; 0x70
    e5c0:	str	r3, [r5, #40]	; 0x28
        LFS_TRACE("lfs_rename -> %d", err);
        return err;
    e5c2:	mov	r0, r4
    e5c4:	b.n	e396 <lfs_rename+0x12>
    e5c6:	mov	r0, r7
    e5c8:	b.n	e396 <lfs_rename+0x12>

    struct lfs_mlist prevdir;
    prevdir.next = lfs->mlist;
    if (prevtag == LFS_ERR_NOENT) {
        // check that name fits
        lfs_size_t nlen = strlen(newpath);
    e5ca:	ldr	r2, [sp, #24]
    e5cc:	str	r2, [sp, #16]
    e5ce:	mov	r0, r2
    e5d0:	bl	12240 <strlen>
        if (nlen > lfs->name_max) {
    e5d4:	ldr	r3, [r5, #108]	; 0x6c
    e5d6:	cmp	r0, r3
    e5d8:	bhi.w	e716 <lfs_rename+0x392>
        }

        // there is a small chance we are being renamed in the same
        // directory/ to an id less than our old id, the global update
        // to handle this is a bit messy
        if (samepair && newid <= newoldid) {
    e5dc:	ldr	r2, [sp, #16]
    e5de:	cmp.w	r8, #0
    e5e2:	beq.w	e6f8 <lfs_rename+0x374>
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
    e5e6:	ldr	r3, [r5, #48]	; 0x30
    e5e8:	ldr.w	lr, [pc, #312]	; e724 <lfs_rename+0x3a0>
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
    e5ec:	str.w	r9, [r5, #52]	; 0x34
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
    e5f0:	lsls	r1, r6, #10
    e5f2:	orr.w	r1, r1, #1333788672	; 0x4f800000
    e5f6:	and.w	lr, r3, lr
    e5fa:	orr.w	r1, r1, #7340032	; 0x700000
    e5fe:	ldrh.w	r3, [sp, #38]	; 0x26
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
    e602:	str.w	sl, [r5, #56]	; 0x38
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
    e606:	orr.w	r1, lr, r1
    e60a:	lsrs	r4, r4, #20
    e60c:	str	r1, [r5, #48]	; 0x30
    e60e:	lsls	r3, r3, #10
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
    e610:	mov	r9, r6
    if (!samepair) {
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
    }

    // move over all attributes
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
    e612:	mov.w	r8, #1
    e616:	movs	r0, #0
    e618:	add.w	sl, sp, #152	; 0x98
    e61c:	b.n	e440 <lfs_rename+0xbc>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    e61e:	mov.w	r8, #0
    e622:	b.n	e3fc <lfs_rename+0x78>
    e624:	ldrh.w	r3, [sp, #38]	; 0x26
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    e628:	lsls	r3, r3, #10
    e62a:	movs	r2, #8
    e62c:	orr.w	r3, r3, #536870912	; 0x20000000
    e630:	add.w	sl, sp, #152	; 0x98
    e634:	mov.w	r9, #0
    e638:	orrs	r3, r2
    e63a:	str	r2, [sp, #8]
    e63c:	stmia.w	sp, {r9, sl}
    e640:	ldr	r2, [pc, #228]	; (e728 <lfs_rename+0x3a4>)
    e642:	add	r1, sp, #80	; 0x50
    e644:	mov	r0, r5
    e646:	bl	b91c <lfs_dir_getslice>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
        // must be empty before removal
        lfs_block_t prevpair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);
        if (res < 0) {
    e64a:	cmp	r0, #0
    e64c:	blt.w	e396 <lfs_rename+0x12>

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
    e650:	mov.w	r3, #4294967295
    e654:	str.w	r9, [sp, #12]
    e658:	str.w	r9, [sp, #8]
    e65c:	stmia.w	sp, {r3, r9}
    e660:	mov	r2, sl
    e662:	add	r1, sp, #120	; 0x78
    e664:	mov	r0, r5
    e666:	bl	b164 <lfs_dir_fetchmatch>
        }
        lfs_pair_fromle32(prevpair);

        // must be empty before removal
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
        if (err) {
    e66a:	cmp	r0, #0
    e66c:	bne.w	e396 <lfs_rename+0x12>
            LFS_TRACE("lfs_rename -> %d", err);
            return err;
        }

        if (prevdir.m.count > 0 || prevdir.m.split) {
    e670:	ldrh.w	r3, [sp, #140]	; 0x8c
    e674:	cmp	r3, #0
    e676:	bne.n	e71c <lfs_rename+0x398>
    e678:	ldrb.w	r1, [sp, #143]	; 0x8f
    e67c:	cmp	r1, #0
    e67e:	bne.n	e71c <lfs_rename+0x398>
    return 0;
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
    e680:	ldr	r3, [r5, #48]	; 0x30
        // mark fs as orphaned
        lfs_fs_preporphans(lfs, +1);

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        prevdir.type = 0;
    e682:	strb.w	r1, [sp, #118]	; 0x76
    return 0;
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
    e686:	adds	r3, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
    e688:	ubfx	r2, r3, #0, #10
    e68c:	subs.w	r2, r2, r9
    e690:	bic.w	r3, r3, #2147483648	; 0x80000000
    e694:	it	ne
    e696:	movne	r2, #1
    e698:	orr.w	r2, r3, r2, lsl #31
    e69c:	ldrh.w	r3, [sp, #38]	; 0x26
        lfs_fs_preporphans(lfs, +1);

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        prevdir.type = 0;
        prevdir.id = 0;
    e6a0:	strh.w	r1, [sp, #116]	; 0x74
        lfs->mlist = &prevdir;
    e6a4:	add	r1, sp, #112	; 0x70
    e6a6:	str	r1, [r5, #40]	; 0x28
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
    e6a8:	str	r2, [r5, #48]	; 0x30
    e6aa:	mov	fp, r3
        prevdir.type = 0;
        prevdir.id = 0;
        lfs->mlist = &prevdir;
    }

    if (!samepair) {
    e6ac:	cmp.w	r8, #0
    e6b0:	beq.w	e42e <lfs_rename+0xaa>
    e6b4:	ldr.w	r9, [sp, #48]	; 0x30
    e6b8:	b.n	e59a <lfs_rename+0x216>
    return 0;
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
    e6ba:	ldr	r3, [r5, #48]	; 0x30
    e6bc:	subs	r3, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
    e6be:	ubfx	r2, r3, #0, #10
    e6c2:	adds	r2, #0
    e6c4:	it	ne
    e6c6:	movne	r2, #1
    e6c8:	bic.w	r3, r3, #2147483648	; 0x80000000
    e6cc:	orr.w	r3, r3, r2, lsl #31
    e6d0:	str	r3, [r5, #48]	; 0x30
    lfs->mlist = prevdir.next;
    if (prevtag != LFS_ERR_NOENT && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
        // fix orphan
        lfs_fs_preporphans(lfs, -1);

        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
    e6d2:	add	r1, sp, #120	; 0x78
    e6d4:	add	r2, sp, #80	; 0x50
    e6d6:	mov	r0, r5
    e6d8:	bl	b698 <lfs_fs_pred>
        if (err) {
    e6dc:	cmp	r0, #0
    e6de:	bne.w	e396 <lfs_rename+0x12>
            LFS_TRACE("lfs_rename -> %d", err);
            return err;
        }

        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
    e6e2:	add	r2, sp, #120	; 0x78
    e6e4:	add	r1, sp, #80	; 0x50
    e6e6:	mov	r0, r5
    e6e8:	bl	dbc4 <lfs_dir_drop>
    e6ec:	b.n	e396 <lfs_rename+0x12>
        if (samepair && newid <= newoldid) {
            newoldid += 1;
        }
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
        LFS_TRACE("lfs_rename -> %d", LFS_ERR_ISDIR);
        return LFS_ERR_ISDIR;
    e6ee:	mvn.w	r0, #20
    e6f2:	b.n	e396 <lfs_rename+0x12>
    e6f4:	mov	r1, r6
    e6f6:	b.n	e524 <lfs_rename+0x1a0>
    e6f8:	ldrh.w	fp, [sp, #38]	; 0x26
    e6fc:	b.n	e51a <lfs_rename+0x196>

    struct lfs_mlist prevdir;
    prevdir.next = lfs->mlist;
    if (prevtag == LFS_ERR_NOENT) {
        // check that name fits
        lfs_size_t nlen = strlen(newpath);
    e6fe:	ldr	r2, [sp, #24]
    // if we're in the same pair there's a few special cases...
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
    uint16_t newoldid = lfs_tag_id(oldtag);

    struct lfs_mlist prevdir;
    prevdir.next = lfs->mlist;
    e700:	ldr	r3, [r5, #40]	; 0x28
    e702:	str	r3, [sp, #112]	; 0x70
    if (prevtag == LFS_ERR_NOENT) {
        // check that name fits
        lfs_size_t nlen = strlen(newpath);
    e704:	mov	r0, r2
    e706:	str	r2, [sp, #16]
    e708:	bl	12240 <strlen>
        if (nlen > lfs->name_max) {
    e70c:	ldr	r3, [r5, #108]	; 0x6c
    e70e:	ldr	r2, [sp, #16]
    e710:	cmp	r3, r0
    e712:	bcs.w	e51a <lfs_rename+0x196>
            LFS_TRACE("lfs_rename -> %d", LFS_ERR_NAMETOOLONG);
            return LFS_ERR_NAMETOOLONG;
    e716:	mvn.w	r0, #35	; 0x23
    e71a:	b.n	e396 <lfs_rename+0x12>
            return err;
        }

        if (prevdir.m.count > 0 || prevdir.m.split) {
            LFS_TRACE("lfs_rename -> %d", LFS_ERR_NOTEMPTY);
            return LFS_ERR_NOTEMPTY;
    e71c:	mvn.w	r0, #38	; 0x26
    e720:	b.n	e396 <lfs_rename+0x12>
    e722:	nop
    e724:	.word	0x800003ff
    e728:	.word	0x700ffc00

0000e72c <lfs_format>:
    }

    return 0;
}

int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
    e72c:	push	{r4, r5, r6, r7, lr}
    e72e:	sub	sp, #108	; 0x6c
    e730:	mov	r5, r0
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);
    int err = 0;
    {
        err = lfs_init(lfs, cfg);
    e732:	bl	aef4 <lfs_init>
        if (err) {
    e736:	mov	r4, r0
    e738:	cbz	r0, e740 <lfs_format+0x14>
    }

cleanup:
    lfs_deinit(lfs);
    LFS_TRACE("lfs_format -> %d", err);
    return err;
    e73a:	mov	r0, r4
}
    e73c:	add	sp, #108	; 0x6c
    e73e:	pop	{r4, r5, r6, r7, pc}
            LFS_TRACE("lfs_format -> %d", err);
            return err;
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
    e740:	ldr	r3, [r5, #104]	; 0x68
    e742:	ldr	r0, [r5, #100]	; 0x64
    e744:	ldr	r2, [r3, #44]	; 0x2c
    e746:	mov	r1, r4
    e748:	bl	117bc <memset>
        lfs->free.off = 0;
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
    e74c:	ldr	r3, [r5, #104]	; 0x68
            return err;
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
        lfs->free.off = 0;
    e74e:	str	r4, [r5, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
    e750:	ldr	r2, [r3, #44]	; 0x2c
    e752:	ldr	r3, [r3, #32]

    return 0;
}

static void lfs_alloc_ack(lfs_t *lfs) {
    lfs->free.ack = lfs->cfg->block_count;
    e754:	str	r3, [r5, #96]	; 0x60
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
        lfs->free.off = 0;
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
    e756:	lsls	r2, r2, #3
    e758:	cmp	r3, r2
    e75a:	it	cs
    e75c:	movcs	r3, r2
                lfs->cfg->block_count);
        lfs->free.i = 0;
    e75e:	str	r4, [r5, #92]	; 0x5c
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
        lfs->free.off = 0;
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
    e760:	str	r3, [r5, #88]	; 0x58
        lfs->free.i = 0;
        lfs_alloc_ack(lfs);

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
    e762:	add	r1, sp, #72	; 0x48
    e764:	mov	r0, r5
    e766:	bl	ca14 <lfs_dir_alloc>
        if (err) {
    e76a:	mov	r4, r0
    e76c:	cbz	r0, e77a <lfs_format+0x4e>
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
    e76e:	mov	r0, r5
    e770:	bl	aec0 <lfs_deinit>
    LFS_TRACE("lfs_format -> %d", err);
    return err;
    e774:	mov	r0, r4
}
    e776:	add	sp, #108	; 0x6c
    e778:	pop	{r4, r5, r6, r7, pc}
        }

        // write one superblock
        lfs_superblock_t superblock = {
            .version     = LFS_DISK_VERSION,
            .block_size  = lfs->cfg->block_size,
    e77a:	ldr	r3, [r5, #104]	; 0x68
        if (err) {
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
    e77c:	ldr	r6, [r5, #108]	; 0x6c
    e77e:	ldr	r0, [r3, #28]
    e780:	ldr	r1, [r3, #32]
    e782:	ldr	r2, [r5, #112]	; 0x70
    e784:	ldr	r3, [r5, #116]	; 0x74
            .file_max    = lfs->file_max,
            .attr_max    = lfs->attr_max,
        };

        lfs_superblock_tole32(&superblock);
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
    e786:	str	r4, [sp, #52]	; 0x34
        if (err) {
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
    e788:	str	r0, [sp, #28]
    e78a:	mov.w	r4, #131072	; 0x20000
    e78e:	str	r1, [sp, #32]
            .file_max    = lfs->file_max,
            .attr_max    = lfs->attr_max,
        };

        lfs_superblock_tole32(&superblock);
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
    e790:	ldr	r0, [pc, #96]	; (e7f4 <lfs_format+0xc8>)
    e792:	ldr	r1, [pc, #100]	; (e7f8 <lfs_format+0xcc>)
        if (err) {
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
    e794:	str	r4, [sp, #24]
    e796:	str	r6, [sp, #36]	; 0x24
    e798:	str	r2, [sp, #40]	; 0x28
            .file_max    = lfs->file_max,
            .attr_max    = lfs->attr_max,
        };

        lfs_superblock_tole32(&superblock);
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
    e79a:	add	r4, sp, #24
        if (err) {
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
    e79c:	str	r3, [sp, #44]	; 0x2c
            .file_max    = lfs->file_max,
            .attr_max    = lfs->attr_max,
        };

        lfs_superblock_tole32(&superblock);
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
    e79e:	str	r1, [sp, #56]	; 0x38
    e7a0:	str	r0, [sp, #60]	; 0x3c
    e7a2:	ldr	r7, [pc, #88]	; (e7fc <lfs_format+0xd0>)
    e7a4:	ldr	r6, [pc, #88]	; (e800 <lfs_format+0xd4>)
    e7a6:	str	r4, [sp, #68]	; 0x44
    e7a8:	movs	r3, #3
    e7aa:	add	r2, sp, #48	; 0x30
    e7ac:	add	r1, sp, #72	; 0x48
    e7ae:	mov	r0, r5
    e7b0:	str	r7, [sp, #48]	; 0x30
    e7b2:	str	r6, [sp, #64]	; 0x40
    e7b4:	bl	d7e4 <lfs_dir_commit>
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
    e7b8:	mov	r4, r0
    e7ba:	cmp	r0, #0
    e7bc:	bne.n	e76e <lfs_format+0x42>

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
    e7be:	mov.w	r3, #4294967295
    e7c2:	str	r0, [sp, #12]
    e7c4:	str	r0, [sp, #8]
    e7c6:	stmia.w	sp, {r3, r4}
        if (err) {
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
    e7ca:	movs	r6, #1

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
    e7cc:	add	r2, sp, #16
    e7ce:	add	r1, sp, #72	; 0x48
    e7d0:	mov	r0, r5
        if (err) {
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
    e7d2:	str	r4, [sp, #16]
    e7d4:	str	r6, [sp, #20]

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
    e7d6:	bl	b164 <lfs_dir_fetchmatch>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
        if (err) {
    e7da:	mov	r4, r0
    e7dc:	cmp	r0, #0
    e7de:	bne.n	e76e <lfs_format+0x42>
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
        err = lfs_dir_commit(lfs, &root, NULL, 0);
    e7e0:	mov	r3, r0
    e7e2:	mov	r2, r0
    e7e4:	add	r1, sp, #72	; 0x48
    e7e6:	mov	r0, r5
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
    e7e8:	strb.w	r4, [sp, #94]	; 0x5e
        err = lfs_dir_commit(lfs, &root, NULL, 0);
    e7ec:	bl	d7e4 <lfs_dir_commit>
    e7f0:	mov	r4, r0
    e7f2:	b.n	e76e <lfs_format+0x42>
    e7f4:	.word	0x00015b98
    e7f8:	.word	0x0ff00008
    e7fc:	.word	0x40100000
    e800:	.word	0x20100018

0000e804 <lfs_dir_split>:
    return 0;
}

static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
    e804:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

    return 0;
}

static void lfs_alloc_ack(lfs_t *lfs) {
    lfs->free.ack = lfs->cfg->block_count;
    e808:	ldr	r5, [r0, #104]	; 0x68
    return 0;
}

static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
    e80a:	sub	sp, #52	; 0x34

    return 0;
}

static void lfs_alloc_ack(lfs_t *lfs) {
    lfs->free.ack = lfs->cfg->block_count;
    e80c:	ldr	r5, [r5, #32]
    e80e:	str	r5, [r0, #96]	; 0x60
    return 0;
}

static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
    e810:	mov	r5, r1
    // create tail directory
    lfs_alloc_ack(lfs);
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
    e812:	add	r1, sp, #16
    return 0;
}

static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
    e814:	mov	r4, r0
    e816:	mov	r7, r2
    e818:	mov	r8, r3
    e81a:	ldrh.w	r6, [sp, #84]	; 0x54
    e81e:	ldrh.w	r9, [sp, #88]	; 0x58
    // create tail directory
    lfs_alloc_ack(lfs);
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
    e822:	bl	ca14 <lfs_dir_alloc>
    if (err) {
    e826:	cbz	r0, e82e <lfs_dir_split+0x2a>
        lfs->root[0] = tail.pair[0];
        lfs->root[1] = tail.pair[1];
    }

    return 0;
}
    e828:	add	sp, #52	; 0x34
    e82a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

    tail.split = dir->split;
    tail.tail[0] = dir->tail[0];
    tail.tail[1] = dir->tail[1];

    err = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
    e82e:	ldr	r3, [sp, #80]	; 0x50
    e830:	str	r3, [sp, #0]
    e832:	str.w	r9, [sp, #8]
    e836:	str	r6, [sp, #4]
    if (err) {
        return err;
    }

    tail.split = dir->split;
    tail.tail[0] = dir->tail[0];
    e838:	ldr	r0, [r5, #24]
    e83a:	str	r0, [sp, #40]	; 0x28
    tail.tail[1] = dir->tail[1];

    err = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
    e83c:	mov	r2, r7
    int err = lfs_dir_alloc(lfs, &tail);
    if (err) {
        return err;
    }

    tail.split = dir->split;
    e83e:	ldrb	r7, [r5, #23]
    e840:	strb.w	r7, [sp, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
    tail.tail[1] = dir->tail[1];

    err = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
    e844:	mov	r3, r8
        return err;
    }

    tail.split = dir->split;
    tail.tail[0] = dir->tail[0];
    tail.tail[1] = dir->tail[1];
    e846:	ldr	r7, [r5, #28]
    e848:	str	r7, [sp, #44]	; 0x2c

    err = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
    e84a:	add	r1, sp, #16
    e84c:	mov	r0, r4
    e84e:	bl	d27c <lfs_dir_compact>
    if (err) {
    e852:	cmp	r0, #0
    e854:	bne.n	e828 <lfs_dir_split+0x24>
        return err;
    }

    dir->tail[0] = tail.pair[0];
    e856:	ldr	r2, [sp, #16]
    dir->tail[1] = tail.pair[1];
    e858:	ldr	r1, [sp, #20]
    err = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
    if (err) {
        return err;
    }

    dir->tail[0] = tail.pair[0];
    e85a:	str	r2, [r5, #24]
    dir->tail[1] = tail.pair[1];
    e85c:	str	r1, [r5, #28]
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    e85e:	ldr	r7, [r4, #32]
    e860:	ldr	r3, [r5, #0]
        return err;
    }

    dir->tail[0] = tail.pair[0];
    dir->tail[1] = tail.pair[1];
    dir->split = true;
    e862:	mov.w	lr, #1
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    e866:	cmp	r3, r7
        return err;
    }

    dir->tail[0] = tail.pair[0];
    dir->tail[1] = tail.pair[1];
    dir->split = true;
    e868:	strb.w	lr, [r5, #23]
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    e86c:	beq.n	e880 <lfs_dir_split+0x7c>
    e86e:	ldr.w	lr, [r5, #4]
    e872:	ldr	r5, [r4, #36]	; 0x24
    e874:	cmp	lr, r5
    e876:	beq.n	e880 <lfs_dir_split+0x7c>
    e878:	cmp	r3, r5
    e87a:	beq.n	e880 <lfs_dir_split+0x7c>
    e87c:	cmp	r7, lr
    e87e:	bne.n	e828 <lfs_dir_split+0x24>
    dir->tail[0] = tail.pair[0];
    dir->tail[1] = tail.pair[1];
    dir->split = true;

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
    e880:	cbnz	r6, e88a <lfs_dir_split+0x86>
        lfs->root[0] = tail.pair[0];
    e882:	str	r2, [r4, #32]
        lfs->root[1] = tail.pair[1];
    e884:	str	r1, [r4, #36]	; 0x24
    }

    return 0;
    e886:	mov	r0, r6
    e888:	b.n	e828 <lfs_dir_split+0x24>
    e88a:	movs	r0, #0
    e88c:	b.n	e828 <lfs_dir_split+0x24>
    e88e:	nop

0000e890 <lfs_fs_size>:
    lfs_size_t *size = p;
    *size += 1;
    return 0;
}

lfs_ssize_t lfs_fs_size(lfs_t *lfs) {
    e890:	push	{lr}
    e892:	sub	sp, #12
    LFS_TRACE("lfs_fs_size(%p)", (void*)lfs);
    lfs_size_t size = 0;
    e894:	add	r2, sp, #8
    e896:	movs	r3, #0
    e898:	str.w	r3, [r2, #-4]!
    int err = lfs_fs_traverseraw(lfs, lfs_fs_size_count, &size, false);
    e89c:	ldr	r1, [pc, #12]	; (e8ac <lfs_fs_size+0x1c>)
    e89e:	bl	c79c <lfs_fs_traverseraw>
    if (err) {
    e8a2:	cbnz	r0, e8a6 <lfs_fs_size+0x16>
        LFS_TRACE("lfs_fs_size -> %d", err);
        return err;
    }

    LFS_TRACE("lfs_fs_size -> %d", err);
    return size;
    e8a4:	ldr	r0, [sp, #4]
}
    e8a6:	add	sp, #12
    e8a8:	ldr.w	pc, [sp], #4
    e8ac:	.word	0x0000aeb5

0000e8b0 <lfs_crc>:
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;

    for (size_t i = 0; i < size; i++) {
    e8b0:	cbz	r2, e8e2 <lfs_crc+0x32>
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
    e8b2:	push	{r4, r5}
    e8b4:	ldr	r5, [pc, #44]	; (e8e4 <lfs_crc+0x34>)
    e8b6:	add	r2, r1
    };

    const uint8_t *data = buffer;

    for (size_t i = 0; i < size; i++) {
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
    e8b8:	ldrb.w	r3, [r1], #1
    e8bc:	eor.w	r4, r3, r0
    e8c0:	and.w	r4, r4, #15
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;

    for (size_t i = 0; i < size; i++) {
    e8c4:	cmp	r2, r1
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
    e8c6:	ldr.w	r4, [r5, r4, lsl #2]
    e8ca:	eor.w	r0, r4, r0, lsr #4
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
    e8ce:	eor.w	r3, r0, r3, lsr #4
    e8d2:	and.w	r3, r3, #15
    e8d6:	ldr.w	r3, [r5, r3, lsl #2]
    e8da:	eor.w	r0, r3, r0, lsr #4
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;

    for (size_t i = 0; i < size; i++) {
    e8de:	bne.n	e8b8 <lfs_crc+0x8>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
    }

    return crc;
}
    e8e0:	pop	{r4, r5}
    e8e2:	bx	lr
    e8e4:	.word	0x00015bb0

0000e8e8 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    e8e8:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    e8ea:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    e8ee:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    e8f2:	bne.n	e9d0 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    e8f4:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    e8f6:	bcc.n	e97c <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    e8f8:	ldr.w	r3, [r1], #4
    e8fc:	str.w	r3, [r0], #4
    e900:	ldr.w	r3, [r1], #4
    e904:	str.w	r3, [r0], #4
    e908:	ldr.w	r3, [r1], #4
    e90c:	str.w	r3, [r0], #4
    e910:	ldr.w	r3, [r1], #4
    e914:	str.w	r3, [r0], #4
    e918:	ldr.w	r3, [r1], #4
    e91c:	str.w	r3, [r0], #4
    e920:	ldr.w	r3, [r1], #4
    e924:	str.w	r3, [r0], #4
    e928:	ldr.w	r3, [r1], #4
    e92c:	str.w	r3, [r0], #4
    e930:	ldr.w	r3, [r1], #4
    e934:	str.w	r3, [r0], #4
    e938:	ldr.w	r3, [r1], #4
    e93c:	str.w	r3, [r0], #4
    e940:	ldr.w	r3, [r1], #4
    e944:	str.w	r3, [r0], #4
    e948:	ldr.w	r3, [r1], #4
    e94c:	str.w	r3, [r0], #4
    e950:	ldr.w	r3, [r1], #4
    e954:	str.w	r3, [r0], #4
    e958:	ldr.w	r3, [r1], #4
    e95c:	str.w	r3, [r0], #4
    e960:	ldr.w	r3, [r1], #4
    e964:	str.w	r3, [r0], #4
    e968:	ldr.w	r3, [r1], #4
    e96c:	str.w	r3, [r0], #4
    e970:	ldr.w	r3, [r1], #4
    e974:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    e978:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    e97a:	bcs.n	e8f8 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    e97c:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    e97e:	bcc.n	e9a4 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    e980:	ldr.w	r3, [r1], #4
    e984:	str.w	r3, [r0], #4
    e988:	ldr.w	r3, [r1], #4
    e98c:	str.w	r3, [r0], #4
    e990:	ldr.w	r3, [r1], #4
    e994:	str.w	r3, [r0], #4
    e998:	ldr.w	r3, [r1], #4
    e99c:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    e9a0:	subs	r2, #16
	bhs	.Lmid_block_loop
    e9a2:	bcs.n	e980 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    e9a4:	adds	r2, #12
	blo	.Lcopy_less_than_4
    e9a6:	bcc.n	e9b4 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    e9a8:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    e9ac:	str.w	r3, [r0], #4
	subs	r2, #4
    e9b0:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    e9b2:	bcs.n	e9a8 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    e9b4:	adds	r2, #4
	beq	.Ldone
    e9b6:	beq.n	e9ca <memcpy+0xe2>

	lsls	r2, r2, #31
    e9b8:	lsls	r2, r2, #31
	itt ne
    e9ba:	itt	ne
	ldrbne  r3, [r1], #1
    e9bc:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    e9c0:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    e9c4:	bcc.n	e9ca <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    e9c6:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    e9c8:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    e9ca:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    e9cc:	bx	lr
    e9ce:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    e9d0:	cmp	r2, #8
	blo	.Lbyte_copy
    e9d2:	bcc.n	e9fc <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    e9d4:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    e9d6:	beq.n	e8f4 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    e9d8:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    e9dc:	beq.n	e8f4 <memcpy+0xc>

	rsb	r3, #4
    e9de:	rsb	r3, r3, #4
	subs	r2, r3
    e9e2:	subs	r2, r2, r3

	lsls    r3, r3, #31
    e9e4:	lsls	r3, r3, #31
	itt ne
    e9e6:	itt	ne
	ldrbne  r3, [r1], #1
    e9e8:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    e9ec:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    e9f0:	bcc.n	e8f4 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    e9f2:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    e9f6:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    e9fa:	b.n	e8f4 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    e9fc:	subs	r2, #4
	blo	.Lcopy_less_than_4
    e9fe:	bcc.n	e9b4 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    ea00:	subs	r2, #1
	ldrb    r3, [r1], #1
    ea02:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    ea06:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    ea0a:	bcs.n	ea00 <memcpy+0x118>

	ldrb	r3, [r1]
    ea0c:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    ea0e:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    ea10:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    ea12:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    ea14:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    ea16:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    ea18:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    ea1a:	bx	lr

0000ea1c <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    ea1c:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    ea1e:	ldr	r5, [pc, #60]	; (ea5c <usb_serial_getchar+0x40>)
    ea20:	ldr	r0, [r5, #0]
    ea22:	cbz	r0, ea44 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    ea24:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    ea26:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    ea28:	adds	r1, r0, r3
    ea2a:	adds	r3, #1
	if (i >= rx_packet->len) {
    ea2c:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    ea2e:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    ea30:	bcs.n	ea38 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    ea32:	strh	r3, [r0, #2]
	}
	return c;
    ea34:	mov	r0, r4
}
    ea36:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    ea38:	bl	f098 <usb_free>
		rx_packet = NULL;
    ea3c:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    ea3e:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    ea40:	str	r3, [r5, #0]
    ea42:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    ea44:	ldr	r3, [pc, #24]	; (ea60 <usb_serial_getchar+0x44>)
    ea46:	ldrb	r3, [r3, #0]
    ea48:	cbz	r3, ea56 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    ea4a:	movs	r0, #2
    ea4c:	bl	f0e4 <usb_rx>
    ea50:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    ea52:	cmp	r0, #0
    ea54:	bne.n	ea24 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    ea56:	mov.w	r0, #4294967295
    ea5a:	pop	{r3, r4, r5, pc}
    ea5c:	.word	0x1fff2530
    ea60:	.word	0x1fff263c

0000ea64 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    ea64:	push	{r4, lr}
	if (!rx_packet) {
    ea66:	ldr	r4, [pc, #36]	; (ea8c <usb_serial_peekchar+0x28>)
    ea68:	ldr	r0, [r4, #0]
    ea6a:	cbz	r0, ea74 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    ea6c:	ldrh	r3, [r0, #2]
    ea6e:	add	r0, r3
    ea70:	ldrb	r0, [r0, #8]
}
    ea72:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    ea74:	ldr	r3, [pc, #24]	; (ea90 <usb_serial_peekchar+0x2c>)
    ea76:	ldrb	r3, [r3, #0]
    ea78:	cbz	r3, ea86 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    ea7a:	movs	r0, #2
    ea7c:	bl	f0e4 <usb_rx>
    ea80:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    ea82:	cmp	r0, #0
    ea84:	bne.n	ea6c <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    ea86:	mov.w	r0, #4294967295
    ea8a:	pop	{r4, pc}
    ea8c:	.word	0x1fff2530
    ea90:	.word	0x1fff263c

0000ea94 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    ea94:	ldr	r3, [pc, #16]	; (eaa8 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    ea96:	ldr	r2, [pc, #20]	; (eaac <usb_serial_available+0x18>)
    ea98:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    ea9a:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    ea9c:	cbz	r3, eaa6 <usb_serial_available+0x12>
    ea9e:	ldrh	r2, [r3, #0]
    eaa0:	ldrh	r3, [r3, #2]
    eaa2:	subs	r3, r2, r3
    eaa4:	add	r0, r3
	return count;
}
    eaa6:	bx	lr
    eaa8:	.word	0x1fff2530
    eaac:	.word	0x1fff26b8

0000eab0 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    eab0:	ldr	r3, [pc, #44]	; (eae0 <usb_serial_flush_input+0x30>)
    eab2:	ldrb	r3, [r3, #0]
    eab4:	cbz	r3, eade <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    eab6:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    eab8:	ldr	r4, [pc, #40]	; (eae4 <usb_serial_flush_input+0x34>)
    eaba:	ldr	r0, [r4, #0]
    eabc:	cbz	r0, ead2 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    eabe:	bl	f098 <usb_free>
		rx_packet = NULL;
    eac2:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    eac4:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    eac6:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    eac8:	bl	f0e4 <usb_rx>
		if (!rx) break;
    eacc:	cbz	r0, eadc <usb_serial_flush_input+0x2c>
		usb_free(rx);
    eace:	bl	f098 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    ead2:	movs	r0, #2
    ead4:	bl	f0e4 <usb_rx>
		if (!rx) break;
    ead8:	cmp	r0, #0
    eada:	bne.n	eace <usb_serial_flush_input+0x1e>
    eadc:	pop	{r4, pc}
    eade:	bx	lr
    eae0:	.word	0x1fff263c
    eae4:	.word	0x1fff2530

0000eae8 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    eae8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    eaec:	ldr.w	r9, [pc, #248]	; ebe8 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    eaf0:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    eaf2:	movs	r2, #1
    eaf4:	strb.w	r2, [r9]
	while (size > 0) {
    eaf8:	str	r1, [sp, #4]
    eafa:	cbz	r1, eb58 <usb_serial_write+0x70>
    eafc:	ldr.w	r8, [pc, #236]	; ebec <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    eb00:	ldr	r7, [pc, #216]	; (ebdc <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    eb02:	ldr	r6, [sp, #4]
    eb04:	mov	fp, r0
		if (!tx_packet) {
    eb06:	ldr.w	r0, [r8]
    eb0a:	cbz	r0, eb7a <usb_serial_write+0x92>
    eb0c:	ldr	r5, [pc, #208]	; (ebe0 <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    eb0e:	ldrh	r4, [r0, #2]
    eb10:	rsb	r1, r4, #64	; 0x40
    eb14:	cmp	r1, r6
    eb16:	it	cs
    eb18:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    eb1a:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    eb1e:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    eb20:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    eb24:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    eb26:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    eb28:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    eb2c:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    eb30:	cbz	r1, eb48 <usb_serial_write+0x60>
    eb32:	subs	r4, #1
    eb34:	add	r2, r4
    eb36:	add	r1, fp
    eb38:	ldrb.w	r4, [fp], #1
    eb3c:	strb.w	r4, [r2, #1]!
    eb40:	cmp	fp, r1
    eb42:	bne.n	eb38 <usb_serial_write+0x50>
    eb44:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    eb48:	cmp.w	lr, #63	; 0x3f
    eb4c:	bhi.n	eb66 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    eb4e:	ldr	r2, [pc, #148]	; (ebe4 <usb_serial_write+0xfc>)
    eb50:	movs	r1, #5
    eb52:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    eb54:	cmp	r6, #0
    eb56:	bne.n	eb06 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    eb58:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    eb5a:	movs	r3, #0
    eb5c:	strb.w	r3, [r9]
	return ret;
}
    eb60:	add	sp, #12
    eb62:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    eb66:	movs	r2, #64	; 0x40
    eb68:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    eb6a:	mov	r1, r0
    eb6c:	movs	r0, #3
    eb6e:	bl	f254 <usb_tx>
			tx_packet = NULL;
    eb72:	movs	r2, #0
    eb74:	str.w	r2, [r8]
    eb78:	b.n	eb4e <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    eb7a:	ldrb	r2, [r7, #0]
    eb7c:	cbz	r2, ebca <usb_serial_write+0xe2>
    eb7e:	ldr	r5, [pc, #96]	; (ebe0 <usb_serial_write+0xf8>)
    eb80:	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    eb84:	mov.w	sl, #1
    eb88:	b.n	eb9a <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    eb8a:	subs	r4, #1
    eb8c:	beq.n	ebbc <usb_serial_write+0xd4>
    eb8e:	ldrb	r2, [r5, #0]
    eb90:	cbnz	r2, ebbc <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    eb92:	bl	fde8 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    eb96:	ldrb	r2, [r7, #0]
    eb98:	cbz	r2, ebca <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    eb9a:	movs	r0, #3
    eb9c:	bl	f120 <usb_tx_packet_count>
    eba0:	cmp	r0, #7
    eba2:	bhi.n	eb8a <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    eba4:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    eba8:	bl	f058 <usb_malloc>
    ebac:	str.w	r0, [r8]
					if (tx_packet) break;
    ebb0:	cmp	r0, #0
    ebb2:	bne.n	eb0e <usb_serial_write+0x26>
					tx_noautoflush = 0;
    ebb4:	ldr	r3, [pc, #48]	; (ebe8 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    ebb6:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    ebb8:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    ebba:	bne.n	eb8e <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    ebbc:	movs	r3, #1
					return -1;
    ebbe:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    ebc2:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    ebc4:	add	sp, #12
    ebc6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    ebca:	movs	r3, #0
					return -1;
    ebcc:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    ebd0:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    ebd4:	add	sp, #12
    ebd6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ebda:	nop
    ebdc:	.word	0x1fff263c
    ebe0:	.word	0x1fff252c
    ebe4:	.word	0x1fff2524
    ebe8:	.word	0x1fff2525
    ebec:	.word	0x1fff2528

0000ebf0 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    ebf0:	push	{lr}
    ebf2:	sub	sp, #12
    ebf4:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    ebf6:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    ebf8:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    ebfc:	mov	r0, r3
    ebfe:	bl	eae8 <usb_serial_write>
}
    ec02:	add	sp, #12
    ec04:	ldr.w	pc, [sp], #4

0000ec08 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    ec08:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    ec0a:	ldr	r5, [pc, #56]	; (ec44 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    ec0c:	ldr	r4, [pc, #56]	; (ec48 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    ec0e:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    ec10:	movs	r3, #1
    ec12:	strb	r3, [r4, #0]
	if (!tx_packet) {
    ec14:	cbz	r0, ec22 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    ec16:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    ec18:	movs	r3, #0
    ec1a:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    ec1c:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    ec20:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    ec22:	ldr	r3, [pc, #40]	; (ec4c <usb_serial_write_buffer_free+0x44>)
    ec24:	ldrb	r3, [r3, #0]
    ec26:	cbnz	r3, ec2e <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    ec28:	movs	r0, #0
    ec2a:	strb	r0, [r4, #0]
			return 0;
    ec2c:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    ec2e:	movs	r0, #3
    ec30:	bl	f120 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    ec34:	cmp	r0, #7
    ec36:	bhi.n	ec28 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    ec38:	bl	f058 <usb_malloc>
    ec3c:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    ec3e:	cmp	r0, #0
    ec40:	bne.n	ec16 <usb_serial_write_buffer_free+0xe>
    ec42:	b.n	ec28 <usb_serial_write_buffer_free+0x20>
    ec44:	.word	0x1fff2528
    ec48:	.word	0x1fff2525
    ec4c:	.word	0x1fff263c

0000ec50 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    ec50:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    ec52:	ldr	r3, [pc, #68]	; (ec98 <usb_serial_flush_output+0x48>)
    ec54:	ldrb	r3, [r3, #0]
    ec56:	cbz	r3, ec7c <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    ec58:	ldr	r6, [pc, #64]	; (ec9c <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    ec5a:	ldr	r5, [pc, #68]	; (eca0 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    ec5c:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    ec5e:	movs	r7, #1
    ec60:	strb	r7, [r5, #0]
	if (tx_packet) {
    ec62:	cbz	r4, ec7e <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    ec64:	ldr	r2, [pc, #60]	; (eca4 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    ec66:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    ec68:	movs	r7, #0
    ec6a:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    ec6c:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    ec6e:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    ec70:	movs	r0, #3
    ec72:	bl	f254 <usb_tx>
		tx_packet = NULL;
    ec76:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    ec78:	movs	r3, #0
    ec7a:	strb	r3, [r5, #0]
    ec7c:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    ec7e:	bl	f058 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    ec82:	ldr	r3, [pc, #32]	; (eca4 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    ec84:	cbz	r0, ec92 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    ec86:	mov	r1, r0
    ec88:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    ec8a:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    ec8c:	bl	f254 <usb_tx>
    ec90:	b.n	ec78 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    ec92:	strb	r7, [r3, #0]
    ec94:	b.n	ec78 <usb_serial_flush_output+0x28>
    ec96:	nop
    ec98:	.word	0x1fff263c
    ec9c:	.word	0x1fff2528
    eca0:	.word	0x1fff2525
    eca4:	.word	0x1fff2524

0000eca8 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    eca8:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    ecaa:	ldr	r3, [pc, #56]	; (ece4 <usb_serial_flush_callback+0x3c>)
    ecac:	ldrb	r3, [r3, #0]
    ecae:	cbnz	r3, ecce <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    ecb0:	ldr	r4, [pc, #52]	; (ece8 <usb_serial_flush_callback+0x40>)
    ecb2:	ldr	r1, [r4, #0]
    ecb4:	cbz	r1, ecd0 <usb_serial_flush_callback+0x28>
    ecb6:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    ecba:	ldrh	r3, [r1, #2]
    ecbc:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    ecbe:	movs	r0, #3
    ecc0:	bl	f254 <usb_tx>
		tx_packet = NULL;
    ecc4:	str	r5, [r4, #0]
    ecc6:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    ecc8:	ldr	r3, [pc, #32]	; (ecec <usb_serial_flush_callback+0x44>)
    ecca:	movs	r2, #1
    eccc:	strb	r2, [r3, #0]
    ecce:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    ecd0:	bl	f058 <usb_malloc>
		if (tx) {
    ecd4:	cmp	r0, #0
    ecd6:	beq.n	ecc8 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    ecd8:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    ecda:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    ecde:	movs	r0, #3
    ece0:	b.w	f254 <usb_tx>
    ece4:	.word	0x1fff2525
    ece8:	.word	0x1fff2528
    ecec:	.word	0x1fff2524

0000ecf0 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    ecf0:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    ecf2:	ldr	r4, [pc, #64]	; (ed34 <fault_isr+0x44>)
    ecf4:	b.n	ed08 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    ecf6:	ldr	r3, [r4, #0]
    ecf8:	lsls	r1, r3, #21
    ecfa:	bmi.n	ed18 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    ecfc:	ldr	r3, [r4, #0]
    ecfe:	lsls	r2, r3, #20
    ed00:	bmi.n	ed22 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    ed02:	ldr	r3, [r4, #0]
    ed04:	lsls	r3, r3, #19
    ed06:	bmi.n	ed2c <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    ed08:	ldr	r3, [r4, #0]
    ed0a:	lsls	r0, r3, #13
    ed0c:	bpl.n	ecf6 <fault_isr+0x6>
    ed0e:	bl	f2d8 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    ed12:	ldr	r3, [r4, #0]
    ed14:	lsls	r1, r3, #21
    ed16:	bpl.n	ecfc <fault_isr+0xc>
    ed18:	bl	ed38 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    ed1c:	ldr	r3, [r4, #0]
    ed1e:	lsls	r2, r3, #20
    ed20:	bpl.n	ed02 <fault_isr+0x12>
    ed22:	bl	ed38 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    ed26:	ldr	r3, [r4, #0]
    ed28:	lsls	r3, r3, #19
    ed2a:	bpl.n	ed08 <fault_isr+0x18>
    ed2c:	bl	ed38 <unused_isr>
    ed30:	b.n	ed08 <fault_isr+0x18>
    ed32:	nop
    ed34:	.word	0x40048034

0000ed38 <unused_isr>:
	}
}

void unused_isr(void)
{
    ed38:	push	{r3, lr}
	fault_isr();
    ed3a:	bl	ecf0 <fault_isr>
    ed3e:	nop

0000ed40 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    ed40:	ldr	r3, [pc, #4]	; (ed48 <startup_early_hook+0x8>)
    ed42:	movs	r2, #16
    ed44:	strh	r2, [r3, #0]
    ed46:	bx	lr
    ed48:	.word	0x40052000

0000ed4c <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    ed4c:	bx	lr
    ed4e:	nop

0000ed50 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    ed50:	ldr	r1, [pc, #36]	; (ed78 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    ed52:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    ed54:	ldr	r3, [r1, #0]
	if (incr != 0) {
    ed56:	cbz	r0, ed66 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    ed58:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    ed5a:	add	r0, r3
    ed5c:	sub.w	r2, r2, #8192	; 0x2000
    ed60:	cmp	r0, r2
    ed62:	bcs.n	ed6a <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    ed64:	str	r0, [r1, #0]
	}
	return prev;
    ed66:	mov	r0, r3
}
    ed68:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    ed6a:	bl	10fd4 <__errno>
    ed6e:	movs	r3, #12
    ed70:	str	r3, [r0, #0]
			return (void *)-1;
    ed72:	mov.w	r0, #4294967295
    ed76:	pop	{r3, pc}
    ed78:	.word	0x1fff09c4

0000ed7c <__cxa_pure_virtual>:
	while (1);
}

__attribute__((weak)) 
void __cxa_pure_virtual()
{
    ed7c:	b.n	ed7c <__cxa_pure_virtual>
    ed7e:	nop

0000ed80 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    ed80:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    ed82:	ldr	r3, [pc, #68]	; (edc8 <digitalWrite.part.1+0x48>)
    ed84:	ldr.w	r2, [r3, r0, lsl #3]
    ed88:	ldrb.w	r4, [r2, #640]	; 0x280
    ed8c:	cbz	r4, ed9c <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    ed8e:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    ed90:	cbz	r1, edb2 <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    ed92:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    ed96:	ldr.w	r4, [sp], #4
    ed9a:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    ed9c:	add.w	r3, r3, r0, lsl #3
    eda0:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    eda2:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    eda4:	cbnz	r1, edbc <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    eda6:	bic.w	r2, r2, #2
    edaa:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    edac:	ldr.w	r4, [sp], #4
    edb0:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    edb2:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    edb6:	ldr.w	r4, [sp], #4
    edba:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    edbc:	orr.w	r2, r2, #3
    edc0:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    edc2:	ldr.w	r4, [sp], #4
    edc6:	bx	lr
    edc8:	.word	0x00015bf0

0000edcc <attachInterruptVector>:
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    edcc:	adds	r0, #16
    edce:	ldr	r3, [pc, #8]	; (edd8 <attachInterruptVector+0xc>)
    edd0:	str.w	r1, [r3, r0, lsl #2]
    edd4:	bx	lr
    edd6:	nop
    edd8:	.word	0x1fff0200

0000eddc <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    eddc:	push	{r4, r5}
	RTC_SR = 0;
    edde:	ldr	r3, [pc, #20]	; (edf4 <rtc_set+0x18>)
	RTC_TPR = 0;
    ede0:	ldr	r5, [pc, #20]	; (edf8 <rtc_set+0x1c>)
	RTC_TSR = t;
    ede2:	ldr	r4, [pc, #24]	; (edfc <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    ede4:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    ede6:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    ede8:	str	r2, [r3, #0]
	RTC_TPR = 0;
    edea:	str	r2, [r5, #0]
	RTC_TSR = t;
    edec:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    edee:	str	r1, [r3, #0]
}
    edf0:	pop	{r4, r5}
    edf2:	bx	lr
    edf4:	.word	0x4003d014
    edf8:	.word	0x4003d004
    edfc:	.word	0x4003d000

0000ee00 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    ee00:	cmp	r0, #63	; 0x3f
    ee02:	bhi.n	ee08 <digitalWrite+0x8>
    ee04:	b.w	ed80 <digitalWrite.part.1>
    ee08:	bx	lr
    ee0a:	nop

0000ee0c <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    ee0c:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    ee0e:	ldr	r1, [pc, #48]	; (ee40 <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    ee10:	ldr	r3, [pc, #48]	; (ee44 <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    ee12:	ldr	r2, [pc, #52]	; (ee48 <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    ee14:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    ee16:	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    ee18:	ldr	r2, [r2, #0]
	__enable_irq();
    ee1a:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    ee1c:	lsls	r2, r2, #5
    ee1e:	bpl.n	ee26 <micros+0x1a>
    ee20:	cmp	r3, #50	; 0x32
    ee22:	it	hi
    ee24:	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    ee26:	ldr	r1, [pc, #36]	; (ee4c <micros+0x40>)
    ee28:	rsb	r3, r3, #95744	; 0x17600
    ee2c:	mov.w	r2, #1000	; 0x3e8
    ee30:	adds	r3, #255	; 0xff
    ee32:	umull	r1, r3, r1, r3
    ee36:	mul.w	r0, r2, r0
}
    ee3a:	add.w	r0, r0, r3, lsr #6
    ee3e:	bx	lr
    ee40:	.word	0x1fff2538
    ee44:	.word	0xe000e018
    ee48:	.word	0xe000ed04
    ee4c:	.word	0xaaaaaaab

0000ee50 <delay>:

void delay(uint32_t ms)
{
    ee50:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ee54:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    ee56:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    ee58:	ldr	r7, [pc, #128]	; (eedc <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    ee5a:	ldr	r3, [pc, #132]	; (eee0 <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    ee5c:	ldr	r2, [pc, #132]	; (eee4 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    ee5e:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    ee60:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    ee62:	ldr	r2, [r2, #0]
	__enable_irq();
    ee64:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    ee66:	lsls	r2, r2, #5
    ee68:	bpl.n	ee70 <delay+0x20>
    ee6a:	cmp	r3, #50	; 0x32
    ee6c:	it	hi
    ee6e:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    ee70:	cbz	r5, eed8 <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    ee72:	rsb	r3, r3, #95744	; 0x17600
    ee76:	ldr	r6, [pc, #112]	; (eee8 <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    ee78:	ldr.w	r9, [pc, #100]	; eee0 <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    ee7c:	ldr.w	r8, [pc, #100]	; eee4 <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    ee80:	adds	r3, #255	; 0xff
    ee82:	mov.w	r2, #1000	; 0x3e8
    ee86:	umull	r1, r3, r6, r3
    ee8a:	mul.w	r4, r2, r4
    ee8e:	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    ee92:	cpsid	i
	current = SYST_CVR;
    ee94:	ldr.w	r1, [r9]
	count = systick_millis_count;
    ee98:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    ee9a:	ldr.w	lr, [r8]
	__enable_irq();
    ee9e:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    eea0:	rsb	r3, r1, #95744	; 0x17600
    eea4:	adds	r3, #255	; 0xff
    eea6:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    eeaa:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    eeae:	rsb	r3, r4, r3, lsr #6
    eeb2:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    eeb6:	beq.n	eebe <delay+0x6e>
    eeb8:	cmp	r1, #50	; 0x32
    eeba:	it	hi
    eebc:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    eebe:	mla	r3, r0, r2, r3
    eec2:	cmp.w	r3, #1000	; 0x3e8
    eec6:	bcc.n	eed2 <delay+0x82>
				ms--;
				if (ms == 0) return;
    eec8:	subs	r5, #1
    eeca:	beq.n	eed8 <delay+0x88>
				start += 1000;
    eecc:	add.w	r4, r4, #1000	; 0x3e8
    eed0:	b.n	ee92 <delay+0x42>
			}
			yield();
    eed2:	bl	fde8 <yield>
		}
    eed6:	b.n	ee92 <delay+0x42>
    eed8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    eedc:	.word	0x1fff2538
    eee0:	.word	0xe000e018
    eee4:	.word	0xe000ed04
    eee8:	.word	0xaaaaaaab

0000eeec <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    eeec:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    eeee:	ldr	r3, [pc, #312]	; (f028 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    eef0:	ldr	r0, [pc, #312]	; (f02c <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    eef2:	ldr.w	ip, [pc, #348]	; f050 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    eef6:	ldr	r4, [pc, #312]	; (f030 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    eef8:	ldr	r1, [pc, #312]	; (f034 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    eefa:	ldr.w	lr, [pc, #344]	; f054 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    eefe:	ldr	r6, [pc, #312]	; (f038 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    ef00:	ldr	r5, [pc, #312]	; (f03c <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    ef02:	ldr	r7, [pc, #316]	; (f040 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    ef04:	mov.w	r2, #134217728	; 0x8000000
    ef08:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    ef0a:	mov.w	r2, #268435456	; 0x10000000
    ef0e:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    ef10:	mov.w	r2, #536870912	; 0x20000000
    ef14:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    ef16:	mov.w	r2, #1073741824	; 0x40000000
    ef1a:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    ef1c:	mov.w	r2, #2147483648	; 0x80000000
    ef20:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    ef22:	movs	r2, #0
    ef24:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    ef26:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    ef28:	movw	r0, #49151	; 0xbfff
    ef2c:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    ef30:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    ef34:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    ef36:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    ef3a:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    ef3c:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    ef3e:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    ef40:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    ef44:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    ef46:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    ef4a:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    ef4c:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    ef50:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    ef52:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    ef56:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    ef5a:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    ef5e:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    ef62:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    ef66:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    ef68:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    ef6c:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    ef6e:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    ef70:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    ef72:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    ef76:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    ef78:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    ef7a:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    ef7c:	ldr	r4, [pc, #196]	; (f044 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    ef7e:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    ef80:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    ef82:	movs	r1, #9
    ef84:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    ef86:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    ef8a:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    ef8e:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    ef90:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    ef92:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    ef94:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    ef96:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    ef98:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    ef9a:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    ef9e:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    efa2:	add.w	r7, r7, #520192	; 0x7f000
    efa6:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    efa8:	addw	r4, r4, #2044	; 0x7fc
    efac:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    efae:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    efb0:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    efb2:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    efb4:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    efb8:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    efba:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    efbe:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    efc2:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    efc4:	sub.w	r4, r4, #460800	; 0x70800
    efc8:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    efcc:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    efce:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    efd0:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    efd4:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    efd6:	ldr	r0, [pc, #112]	; (f048 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    efd8:	orr.w	r1, r1, #512	; 0x200
    efdc:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    efde:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    efe0:	ldr	r4, [pc, #104]	; (f04c <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    efe2:	add.w	lr, lr, #65280	; 0xff00
    efe6:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    efea:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    efee:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    eff2:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    eff6:	orr.w	r1, r1, #33554432	; 0x2000000
    effa:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    effc:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    f000:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    f004:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    f006:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    f008:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    f00a:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    f00c:	str	r2, [r4, #0]
#endif
	analog_init();
    f00e:	bl	101b4 <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    f012:	movs	r0, #25
    f014:	bl	ee50 <delay>
	usb_init();
    f018:	bl	fd20 <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    f01c:	movw	r0, #275	; 0x113
}
    f020:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    f024:	b.w	ee50 <delay>
    f028:	.word	0xe000e104
    f02c:	.word	0x40038004
    f030:	.word	0x40038014
    f034:	.word	0x4003801c
    f038:	.word	0x40038024
    f03c:	.word	0x4003802c
    f040:	.word	0x40038034
    f044:	.word	0x40038000
    f048:	.word	0x40048004
    f04c:	.word	0x400c9000
    f050:	.word	0x40038008
    f054:	.word	0x4003800c

0000f058 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    f058:	cpsid	i
	avail = usb_buffer_available;
    f05a:	ldr	r0, [pc, #52]	; (f090 <usb_malloc+0x38>)
    f05c:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    f05e:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    f062:	cmp	r3, #19
    f064:	bgt.n	f088 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    f066:	mov.w	r1, #2147483648	; 0x80000000
    f06a:	lsrs	r1, r3
    f06c:	bic.w	r2, r2, r1
    f070:	str	r2, [r0, #0]
	__enable_irq();
    f072:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    f074:	ldr	r0, [pc, #28]	; (f094 <usb_malloc+0x3c>)
    f076:	add.w	r3, r3, r3, lsl #3
    f07a:	lsls	r3, r3, #3
    f07c:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    f07e:	movs	r1, #0
    f080:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    f082:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    f084:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    f086:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    f088:	cpsie	i
		return NULL;
    f08a:	movs	r0, #0
    f08c:	bx	lr
    f08e:	nop
    f090:	.word	0x1fff09c8
    f094:	.word	0x1fff03d0

0000f098 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    f098:	ldr	r3, [pc, #52]	; (f0d0 <usb_free+0x38>)
    f09a:	ldr	r2, [pc, #56]	; (f0d4 <usb_free+0x3c>)
    f09c:	subs	r3, r0, r3
    f09e:	umull	r2, r3, r2, r3
    f0a2:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    f0a4:	cmp	r3, #19
    f0a6:	bhi.n	f0c2 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    f0a8:	ldr	r2, [pc, #44]	; (f0d8 <usb_free+0x40>)
    f0aa:	ldrb	r2, [r2, #0]
    f0ac:	cbnz	r2, f0c4 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    f0ae:	cpsid	i
	usb_buffer_available |= mask;
    f0b0:	ldr	r0, [pc, #40]	; (f0dc <usb_free+0x44>)
    f0b2:	mov.w	r1, #2147483648	; 0x80000000
    f0b6:	ldr	r2, [r0, #0]
    f0b8:	lsr.w	r3, r1, r3
    f0bc:	orrs	r2, r3
    f0be:	str	r2, [r0, #0]
	__enable_irq();
    f0c0:	cpsie	i
    f0c2:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    f0c4:	ldr	r2, [pc, #24]	; (f0e0 <usb_free+0x48>)
    f0c6:	ldrb	r2, [r2, #0]
    f0c8:	cmp	r2, #0
    f0ca:	beq.n	f0ae <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    f0cc:	b.w	f14c <usb_rx_memory>
    f0d0:	.word	0x1fff03d0
    f0d4:	.word	0x38e38e39
    f0d8:	.word	0x1fff2631
    f0dc:	.word	0x1fff09c8
    f0e0:	.word	0x1fff263c

0000f0e4 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    f0e4:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    f0e6:	cmp	r3, #5
    f0e8:	bhi.n	f114 <usb_rx+0x30>
	__disable_irq();
    f0ea:	cpsid	i
	ret = rx_first[endpoint];
    f0ec:	ldr	r1, [pc, #40]	; (f118 <usb_rx+0x34>)
    f0ee:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    f0f2:	cbz	r0, f110 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    f0f4:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    f0f6:	ldr	r4, [pc, #36]	; (f11c <usb_rx+0x38>)
    f0f8:	ldrh	r5, [r0, #0]
    f0fa:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    f0fe:	ldr	r6, [r0, #4]
    f100:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    f104:	subs	r2, r2, r5
    f106:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    f10a:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    f10c:	pop	{r4, r5, r6}
    f10e:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    f110:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    f112:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    f114:	movs	r0, #0
    f116:	bx	lr
    f118:	.word	0x1fff259c
    f11c:	.word	0x1fff26b8

0000f120 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    f120:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    f122:	cmp	r0, #5
    f124:	bhi.n	f13e <usb_tx_packet_count+0x1e>
	__disable_irq();
    f126:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    f128:	ldr	r3, [pc, #28]	; (f148 <usb_tx_packet_count+0x28>)
    f12a:	ldr.w	r3, [r3, r0, lsl #2]
    f12e:	cbz	r3, f142 <usb_tx_packet_count+0x22>
    f130:	movs	r0, #0
    f132:	ldr	r3, [r3, #4]
    f134:	adds	r0, #1
    f136:	cmp	r3, #0
    f138:	bne.n	f132 <usb_tx_packet_count+0x12>
	__enable_irq();
    f13a:	cpsie	i
	return count;
    f13c:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    f13e:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    f140:	bx	lr
// https://forum.pjrc.com/threads/58663?p=223513&viewfull=1#post223513
//
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    f142:	mov	r0, r3
    f144:	b.n	f13a <usb_tx_packet_count+0x1a>
    f146:	nop
    f148:	.word	0x1fff25f8

0000f14c <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    f14c:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    f14e:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    f150:	ldr	r2, [pc, #236]	; (f240 <usb_rx_memory+0xf4>)
    f152:	ldrb	r3, [r2, #0]
    f154:	lsls	r1, r3, #28
    f156:	bpl.n	f166 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    f158:	ldr	r3, [pc, #232]	; (f244 <usb_rx_memory+0xf8>)
    f15a:	ldr	r1, [r3, #32]
    f15c:	cmp	r1, #0
    f15e:	beq.n	f200 <usb_rx_memory+0xb4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    f160:	ldr	r1, [r3, #40]	; 0x28
    f162:	cmp	r1, #0
    f164:	beq.n	f21c <usb_rx_memory+0xd0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    f166:	ldrb	r3, [r2, #1]
    f168:	lsls	r3, r3, #28
    f16a:	bpl.n	f17a <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    f16c:	ldr	r3, [pc, #212]	; (f244 <usb_rx_memory+0xf8>)
    f16e:	ldr	r1, [r3, #64]	; 0x40
    f170:	cmp	r1, #0
    f172:	beq.n	f230 <usb_rx_memory+0xe4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    f174:	ldr	r1, [r3, #72]	; 0x48
    f176:	cmp	r1, #0
    f178:	beq.n	f220 <usb_rx_memory+0xd4>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    f17a:	ldrb	r3, [r2, #2]
    f17c:	lsls	r5, r3, #28
    f17e:	bpl.n	f18e <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    f180:	ldr	r3, [pc, #192]	; (f244 <usb_rx_memory+0xf8>)
    f182:	ldr	r1, [r3, #96]	; 0x60
    f184:	cmp	r1, #0
    f186:	beq.n	f22c <usb_rx_memory+0xe0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    f188:	ldr	r1, [r3, #104]	; 0x68
    f18a:	cmp	r1, #0
    f18c:	beq.n	f224 <usb_rx_memory+0xd8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    f18e:	ldrb	r3, [r2, #3]
    f190:	lsls	r4, r3, #28
    f192:	bpl.n	f1a6 <usb_rx_memory+0x5a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    f194:	ldr	r3, [pc, #172]	; (f244 <usb_rx_memory+0xf8>)
    f196:	ldr.w	r1, [r3, #128]	; 0x80
    f19a:	cmp	r1, #0
    f19c:	beq.n	f234 <usb_rx_memory+0xe8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    f19e:	ldr.w	r1, [r3, #136]	; 0x88
    f1a2:	cmp	r1, #0
    f1a4:	beq.n	f228 <usb_rx_memory+0xdc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    f1a6:	ldrb	r3, [r2, #4]
    f1a8:	lsls	r1, r3, #28
    f1aa:	bpl.n	f1bc <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    f1ac:	ldr	r3, [pc, #148]	; (f244 <usb_rx_memory+0xf8>)
    f1ae:	ldr.w	r1, [r3, #160]	; 0xa0
    f1b2:	cmp	r1, #0
    f1b4:	beq.n	f23c <usb_rx_memory+0xf0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    f1b6:	ldr.w	r1, [r3, #168]	; 0xa8
    f1ba:	cbz	r1, f1e2 <usb_rx_memory+0x96>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    f1bc:	ldrb	r3, [r2, #5]
    f1be:	lsls	r3, r3, #28
    f1c0:	bpl.n	f1d4 <usb_rx_memory+0x88>
			if (table[index(i, RX, EVEN)].desc == 0) {
    f1c2:	ldr	r3, [pc, #128]	; (f244 <usb_rx_memory+0xf8>)
    f1c4:	ldr.w	r2, [r3, #192]	; 0xc0
    f1c8:	cmp	r2, #0
    f1ca:	beq.n	f238 <usb_rx_memory+0xec>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    f1cc:	ldr.w	r2, [r3, #200]	; 0xc8
    f1d0:	movs	r4, #25
    f1d2:	cbz	r2, f1e4 <usb_rx_memory+0x98>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    f1d4:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    f1d6:	ldr	r3, [pc, #112]	; (f248 <usb_rx_memory+0xfc>)
    f1d8:	movs	r2, #0
    f1da:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    f1dc:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    f1de:	b.w	f098 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    f1e2:	movs	r4, #21
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    f1e4:	ldr	r1, [pc, #96]	; (f248 <usb_rx_memory+0xfc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    f1e6:	ldr	r5, [pc, #100]	; (f24c <usb_rx_memory+0x100>)
				usb_rx_memory_needed--;
    f1e8:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    f1ea:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    f1ee:	add.w	r3, r3, r4, lsl #3
    f1f2:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    f1f4:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    f1f6:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    f1f8:	strb	r2, [r1, #0]
				__enable_irq();
    f1fa:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    f1fc:	pop	{r4, r5}
    f1fe:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    f200:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    f202:	ldr	r4, [pc, #68]	; (f248 <usb_rx_memory+0xfc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    f204:	ldr	r5, [pc, #72]	; (f250 <usb_rx_memory+0x104>)
				usb_rx_memory_needed--;
    f206:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    f208:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    f20c:	add.w	r3, r3, r2, lsl #3
    f210:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    f212:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    f214:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    f216:	strb	r2, [r4, #0]
				__enable_irq();
    f218:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    f21a:	b.n	f1fc <usb_rx_memory+0xb0>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    f21c:	movs	r4, #5
    f21e:	b.n	f1e4 <usb_rx_memory+0x98>
    f220:	movs	r4, #9
    f222:	b.n	f1e4 <usb_rx_memory+0x98>
    f224:	movs	r4, #13
    f226:	b.n	f1e4 <usb_rx_memory+0x98>
    f228:	movs	r4, #17
    f22a:	b.n	f1e4 <usb_rx_memory+0x98>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    f22c:	movs	r2, #12
    f22e:	b.n	f202 <usb_rx_memory+0xb6>
    f230:	movs	r2, #8
    f232:	b.n	f202 <usb_rx_memory+0xb6>
    f234:	movs	r2, #16
    f236:	b.n	f202 <usb_rx_memory+0xb6>
    f238:	movs	r2, #24
    f23a:	b.n	f202 <usb_rx_memory+0xb6>
    f23c:	movs	r2, #20
    f23e:	b.n	f202 <usb_rx_memory+0xb6>
    f240:	.word	0x00015e1c
    f244:	.word	0x1fff0000
    f248:	.word	0x1fff2631
    f24c:	.word	0x004000c8
    f250:	.word	0x00400088

0000f254 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    f254:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    f256:	cmp	r3, #5
    f258:	bhi.n	f296 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    f25a:	ldr	r2, [pc, #108]	; (f2c8 <usb_tx+0x74>)
    f25c:	lsls	r0, r0, #5
    f25e:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    f262:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    f264:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    f266:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    f268:	ldr	r4, [pc, #96]	; (f2cc <usb_tx+0x78>)
    f26a:	ldrb	r2, [r4, r3]
    f26c:	cmp	r2, #3
    f26e:	bhi.n	f2a8 <usb_tx+0x54>
    f270:	tbb	[pc, r2]
    f274:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    f278:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    f27a:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    f27c:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    f27e:	tst.w	r0, #8
    f282:	ite	ne
    f284:	movne	r3, #200	; 0xc8
    f286:	moveq	r3, #136	; 0x88
    f288:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    f28c:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    f28e:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    f290:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    f292:	cpsie	i
}
    f294:	pop	{r4, r5}
    f296:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    f298:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    f29a:	movs	r2, #2
		break;
    f29c:	b.n	f27a <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    f29e:	movs	r2, #5
    f2a0:	b.n	f27a <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    f2a2:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    f2a4:	movs	r2, #4
		break;
    f2a6:	b.n	f27a <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    f2a8:	ldr	r2, [pc, #36]	; (f2d0 <usb_tx+0x7c>)
    f2aa:	ldr.w	r0, [r2, r3, lsl #2]
    f2ae:	cbz	r0, f2c0 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    f2b0:	ldr	r2, [pc, #32]	; (f2d4 <usb_tx+0x80>)
    f2b2:	ldr.w	r0, [r2, r3, lsl #2]
    f2b6:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    f2b8:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    f2bc:	cpsie	i
		return;
    f2be:	b.n	f294 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    f2c0:	str.w	r1, [r2, r3, lsl #2]
    f2c4:	ldr	r2, [pc, #12]	; (f2d4 <usb_tx+0x80>)
    f2c6:	b.n	f2b8 <usb_tx+0x64>
    f2c8:	.word	0x1fff0000
    f2cc:	.word	0x1fff2640
    f2d0:	.word	0x1fff25f8
    f2d4:	.word	0x1fff2610

0000f2d8 <usb_isr>:
}



void usb_isr(void)
{
    f2d8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    f2dc:	ldr.w	fp, [pc, #780]	; f5ec <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    f2e0:	ldr.w	sl, [pc, #780]	; f5f0 <usb_isr+0x318>
}



void usb_isr(void)
{
    f2e4:	sub	sp, #28
    f2e6:	b.n	f372 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    f2e8:	ldr	r7, [pc, #692]	; (f5a0 <usb_isr+0x2c8>)
    f2ea:	mov.w	r8, r3, lsr #2
    f2ee:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    f2f2:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    f2f4:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    f2f8:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    f2fc:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    f2fe:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    f302:	and.w	r4, r3, #255	; 0xff
    f306:	cmp	r3, #0
    f308:	bne.w	f5f4 <usb_isr+0x31c>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    f30c:	ldr.w	r3, [r7, r8, lsl #3]
    f310:	lsrs	r3, r3, #16
    f312:	uxth	r1, r3
    f314:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    f318:	cmp	r3, #0
    f31a:	beq.w	f58c <usb_isr+0x2b4>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    f31e:	ldr	r3, [pc, #644]	; (f5a4 <usb_isr+0x2cc>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    f320:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    f324:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    f328:	ldr.w	r2, [r3, r6, lsl #2]
    f32c:	cmp	r2, #0
    f32e:	beq.w	f690 <usb_isr+0x3b8>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    f332:	ldr	r5, [pc, #628]	; (f5a8 <usb_isr+0x2d0>)
    f334:	ldr.w	r3, [r5, r6, lsl #2]
    f338:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    f33a:	ldr	r4, [pc, #624]	; (f5ac <usb_isr+0x2d4>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    f33c:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    f340:	ldrh.w	r3, [r4, r6, lsl #1]
    f344:	add	r1, r3
    f346:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    f34a:	bl	f058 <usb_malloc>
					if (packet) {
    f34e:	cmp	r0, #0
    f350:	beq.w	f682 <usb_isr+0x3aa>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    f354:	ldr	r2, [pc, #600]	; (f5b0 <usb_isr+0x2d8>)
    f356:	ldr	r3, [pc, #604]	; (f5b4 <usb_isr+0x2dc>)
    f358:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    f35c:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    f360:	it	ne
    f362:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    f364:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    f368:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    f36c:	movs	r3, #8
    f36e:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    f372:	ldrb.w	r4, [fp]
    f376:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    f378:	lsls	r5, r4, #29
    f37a:	bpl.n	f3b4 <usb_isr+0xdc>
		if (usb_configuration) {
    f37c:	ldr	r3, [pc, #568]	; (f5b8 <usb_isr+0x2e0>)
    f37e:	ldrb	r3, [r3, #0]
    f380:	cbz	r3, f3ae <usb_isr+0xd6>
			t = usb_reboot_timer;
    f382:	ldr	r1, [pc, #568]	; (f5bc <usb_isr+0x2e4>)
    f384:	ldrb	r2, [r1, #0]
			if (t) {
    f386:	and.w	r3, r2, #255	; 0xff
    f38a:	cbz	r2, f398 <usb_isr+0xc0>
				usb_reboot_timer = --t;
    f38c:	subs	r3, #1
    f38e:	uxtb	r3, r3
    f390:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    f392:	cmp	r3, #0
    f394:	beq.w	fd16 <usb_isr+0xa3e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    f398:	ldr	r1, [pc, #548]	; (f5c0 <usb_isr+0x2e8>)
    f39a:	ldrb	r2, [r1, #0]
			if (t) {
    f39c:	and.w	r3, r2, #255	; 0xff
    f3a0:	cbz	r2, f3ae <usb_isr+0xd6>
				usb_cdc_transmit_flush_timer = --t;
    f3a2:	subs	r3, #1
    f3a4:	uxtb	r3, r3
    f3a6:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    f3a8:	cmp	r3, #0
    f3aa:	beq.w	f67c <usb_isr+0x3a4>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    f3ae:	movs	r3, #4
    f3b0:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    f3b4:	and.w	r3, r4, #8
    f3b8:	and.w	r2, r3, #255	; 0xff
    f3bc:	cmp	r3, #0
    f3be:	beq.w	f64e <usb_isr+0x376>
		uint8_t endpoint;
		stat = USB0_STAT;
    f3c2:	ldrb.w	r3, [sl]
    f3c6:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    f3c8:	lsrs	r6, r3, #4
    f3ca:	bne.n	f2e8 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    f3cc:	lsrs	r0, r3, #2
    f3ce:	ldr.w	r9, [pc, #464]	; f5a0 <usb_isr+0x2c8>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    f3d2:	ldr.w	r2, [r9, r0, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    f3d6:	add.w	r1, r9, r0, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    f3da:	ubfx	r2, r2, #2, #4
    f3de:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    f3e0:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    f3e2:	cmp	r2, #12
    f3e4:	bhi.w	f56e <usb_isr+0x296>
    f3e8:	tbh	[pc, r2, lsl #1]
    f3ec:	.word	0x00c500c5
    f3f0:	.word	0x00c100c1
    f3f4:	.word	0x00c100c1
    f3f8:	.word	0x00c100c1
    f3fc:	.word	0x00c1008b
    f400:	.word	0x00c100c1
    f404:	.short	0x000d
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    f406:	ldr	r2, [r1, #0]
    f408:	ldr	r5, [pc, #440]	; (f5c4 <usb_isr+0x2ec>)
		setup.word2 = *(uint32_t *)(buf + 4);
    f40a:	ldr	r1, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    f40c:	ldr	r7, [pc, #440]	; (f5c8 <usb_isr+0x2f0>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    f40e:	ldr	r6, [pc, #444]	; (f5cc <usb_isr+0x2f4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    f410:	ldr	r4, [pc, #412]	; (f5b0 <usb_isr+0x2d8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    f412:	str	r1, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    f414:	uxth	r1, r2
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    f416:	str.w	r4, [r9, r0, lsl #3]
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    f41a:	str	r2, [r5, #0]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    f41c:	movs	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    f41e:	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    f420:	cmp.w	r1, #2176	; 0x880
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    f424:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    f426:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    f42a:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    f42e:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    f430:	beq.w	fad2 <usb_isr+0x7fa>
    f434:	bls.w	f698 <usb_isr+0x3c0>
    f438:	movw	r4, #8993	; 0x2321
    f43c:	cmp	r1, r4
    f43e:	beq.w	fadc <usb_isr+0x804>
    f442:	bhi.w	f7ce <usb_isr+0x4f6>
    f446:	movw	r4, #8225	; 0x2021
    f44a:	cmp	r1, r4
    f44c:	beq.w	f7e4 <usb_isr+0x50c>
    f450:	movw	r4, #8737	; 0x2221
    f454:	cmp	r1, r4
    f456:	beq.w	f92e <usb_isr+0x656>
    f45a:	cmp.w	r1, #2304	; 0x900
    f45e:	bne.w	f7de <usb_isr+0x506>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    f462:	ldr	r2, [pc, #340]	; (f5b8 <usb_isr+0x2e0>)
    f464:	ldr	r4, [pc, #312]	; (f5a0 <usb_isr+0x2c8>)
    f466:	ldrb	r1, [r5, #2]
    f468:	strb	r1, [r2, #0]
    f46a:	add.w	r5, r4, #192	; 0xc0
    f46e:	b.n	f476 <usb_isr+0x19e>
    f470:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    f472:	cmp	r5, r4
    f474:	beq.n	f48a <usb_isr+0x1b2>
			if (table[i].desc & BDT_OWN) {
    f476:	ldr	r3, [r4, #32]
    f478:	lsls	r0, r3, #24
    f47a:	bpl.n	f470 <usb_isr+0x198>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    f47c:	ldr	r0, [r4, #36]	; 0x24
    f47e:	adds	r4, #8
    f480:	subs	r0, #8
    f482:	bl	f098 <usb_free>
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    f486:	cmp	r5, r4
    f488:	bne.n	f476 <usb_isr+0x19e>
    f48a:	ldr	r4, [pc, #324]	; (f5d0 <usb_isr+0x2f8>)
    f48c:	ldr	r2, [pc, #276]	; (f5a4 <usb_isr+0x2cc>)
    f48e:	ldr	r1, [pc, #324]	; (f5d4 <usb_isr+0x2fc>)
    f490:	ldr	r0, [pc, #324]	; (f5d8 <usb_isr+0x300>)
    f492:	ldr	r5, [pc, #276]	; (f5a8 <usb_isr+0x2d0>)
    f494:	str	r4, [sp, #4]
    f496:	movs	r3, #0
    f498:	ldr	r4, [pc, #272]	; (f5ac <usb_isr+0x2d4>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    f49a:	str	r6, [sp, #20]
    f49c:	str	r5, [sp, #8]
    f49e:	str	r4, [sp, #12]
    f4a0:	mov	r8, r0
    f4a2:	str	r7, [sp, #16]
    f4a4:	mov	r6, r2
    f4a6:	mov	r5, r1
    f4a8:	mov	r4, r3
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    f4aa:	ldr	r0, [r6, #0]
			while (p) {
    f4ac:	cbz	r0, f4ba <usb_isr+0x1e2>
				n = p->next;
    f4ae:	ldr	r7, [r0, #4]
				usb_free(p);
    f4b0:	bl	f098 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    f4b4:	mov	r0, r7
    f4b6:	cmp	r7, #0
    f4b8:	bne.n	f4ae <usb_isr+0x1d6>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    f4ba:	movs	r3, #0
    f4bc:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    f4be:	ldr	r3, [sp, #8]
			p = tx_first[i];
    f4c0:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    f4c2:	mov	r2, r3
    f4c4:	movs	r3, #0
    f4c6:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    f4ca:	cbz	r0, f4d8 <usb_isr+0x200>
				n = p->next;
    f4cc:	ldr	r7, [r0, #4]
				usb_free(p);
    f4ce:	bl	f098 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    f4d2:	mov	r0, r7
    f4d4:	cmp	r7, #0
    f4d6:	bne.n	f4cc <usb_isr+0x1f4>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    f4d8:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    f4da:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    f4dc:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    f4de:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    f4e0:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    f4e4:	ldr	r2, [sp, #12]
    f4e6:	mov.w	r1, #0
			switch (tx_state[i]) {
    f4ea:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    f4ec:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    f4f0:	cmp	r3, #3
    f4f2:	bhi.w	fa08 <usb_isr+0x730>
    f4f6:	tbh	[pc, r3, lsl #1]
    f4fa:	.short	0x02e7
    f4fc:	.word	0x02e70283
    f500:	.short	0x0283
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    f502:	ldr	r7, [pc, #196]	; (f5c8 <usb_isr+0x2f0>)
    f504:	ldr	r2, [r7, #0]
		if (data) {
    f506:	cbz	r2, f55a <usb_isr+0x282>
			size = ep0_tx_len;
    f508:	ldr	r3, [pc, #208]	; (f5dc <usb_isr+0x304>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f50a:	ldr	r6, [pc, #192]	; (f5cc <usb_isr+0x2f4>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    f50c:	ldr	r1, [pc, #208]	; (f5e0 <usb_isr+0x308>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    f50e:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f510:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    f512:	ldrb	r5, [r1, #0]
    f514:	cmp	r0, #64	; 0x40
    f516:	mov	lr, r0
    f518:	orr.w	r8, r5, #2
    f51c:	it	cs
    f51e:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f522:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    f524:	eor.w	r4, r4, #1
    f528:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    f52a:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f52e:	ite	eq
    f530:	moveq	r4, #136	; 0x88
    f532:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    f534:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    f538:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    f53a:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f53e:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    f542:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    f544:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f546:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    f54a:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    f54c:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    f54e:	cbnz	r0, f558 <usb_isr+0x280>
    f550:	cmp.w	lr, #64	; 0x40
    f554:	it	ne
    f556:	movne	r2, #0
    f558:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    f55a:	ldr	r3, [pc, #104]	; (f5c4 <usb_isr+0x2ec>)
    f55c:	ldrh	r2, [r3, #0]
    f55e:	cmp.w	r2, #1280	; 0x500
    f562:	bne.n	f56e <usb_isr+0x296>
			setup.bRequest = 0;
    f564:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    f566:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    f568:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    f56a:	ldr	r3, [pc, #120]	; (f5e4 <usb_isr+0x30c>)
    f56c:	strb	r2, [r3, #0]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    f56e:	ldr	r2, [pc, #120]	; (f5e8 <usb_isr+0x310>)
    f570:	movs	r3, #1
    f572:	strb	r3, [r2, #0]
    f574:	b.n	f36c <usb_isr+0x94>
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    f576:	ldr	r2, [pc, #76]	; (f5c4 <usb_isr+0x2ec>)
    f578:	ldrh	r5, [r2, #0]
    f57a:	movw	r4, #8225	; 0x2021
    f57e:	cmp	r5, r4
    f580:	beq.w	f778 <usb_isr+0x4a0>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    f584:	ldr	r2, [pc, #40]	; (f5b0 <usb_isr+0x2d8>)
    f586:	str.w	r2, [r9, r0, lsl #3]
    f58a:	b.n	f56e <usb_isr+0x296>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    f58c:	ldr	r2, [pc, #32]	; (f5b0 <usb_isr+0x2d8>)
    f58e:	ldr	r3, [pc, #36]	; (f5b4 <usb_isr+0x2dc>)
    f590:	tst.w	r9, #8
    f594:	it	ne
    f596:	movne	r3, r2
    f598:	str.w	r3, [r7, r8, lsl #3]
    f59c:	b.n	f36c <usb_isr+0x94>
    f59e:	nop
    f5a0:	.word	0x1fff0000
    f5a4:	.word	0x1fff259c
    f5a8:	.word	0x1fff2540
    f5ac:	.word	0x1fff26b8
    f5b0:	.word	0x004000c8
    f5b4:	.word	0x00400088
    f5b8:	.word	0x1fff263c
    f5bc:	.word	0x1fff25b5
    f5c0:	.word	0x1fff2524
    f5c4:	.word	0x1fff2628
    f5c8:	.word	0x1fff253c
    f5cc:	.word	0x1fff25b4
    f5d0:	.word	0x1fff2640
    f5d4:	.word	0x1fff25f8
    f5d8:	.word	0x1fff2610
    f5dc:	.word	0x1fff2558
    f5e0:	.word	0x1fff2630
    f5e4:	.word	0x40072098
    f5e8:	.word	0x40072094
    f5ec:	.word	0x40072080
    f5f0:	.word	0x40072090
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    f5f4:	bl	f098 <usb_free>
				packet = tx_first[endpoint];
    f5f8:	ldr	r2, [pc, #692]	; (f8b0 <usb_isr+0x5d8>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    f5fa:	ldr	r1, [pc, #696]	; (f8b4 <usb_isr+0x5dc>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    f5fc:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    f600:	cmp	r3, #0
    f602:	beq.w	f758 <usb_isr+0x480>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    f606:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    f608:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    f60a:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    f60e:	add.w	r2, r3, #8
    f612:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    f616:	cmp	r4, #3
    f618:	bhi.n	f626 <usb_isr+0x34e>
    f61a:	tbb	[pc, r4]
    f61e:	.short	0x0f12
    f620:	.short	0x0215
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    f622:	movs	r2, #4
    f624:	strb	r2, [r1, r6]
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    f626:	ldrh	r2, [r3, #0]
    f628:	tst.w	r9, #8
    f62c:	ite	eq
    f62e:	moveq	r3, #136	; 0x88
    f630:	movne	r3, #200	; 0xc8
    f632:	orr.w	r3, r3, r2, lsl #16
    f636:	str.w	r3, [r7, r8, lsl #3]
    f63a:	b.n	f36c <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    f63c:	movs	r2, #2
    f63e:	strb	r2, [r1, r6]
						break;
    f640:	b.n	f626 <usb_isr+0x34e>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    f642:	movs	r2, #3
    f644:	strb	r2, [r1, r6]
						break;
    f646:	b.n	f626 <usb_isr+0x34e>
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    f648:	movs	r2, #5
    f64a:	strb	r2, [r1, r6]
						break;
    f64c:	b.n	f626 <usb_isr+0x34e>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    f64e:	lsls	r0, r4, #31
    f650:	bmi.w	f7ec <usb_isr+0x514>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    f654:	lsls	r1, r4, #24
    f656:	bmi.w	f888 <usb_isr+0x5b0>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    f65a:	lsls	r2, r4, #30
    f65c:	bpl.n	f66c <usb_isr+0x394>
		uint8_t err = USB0_ERRSTAT;
    f65e:	ldr	r2, [pc, #600]	; (f8b8 <usb_isr+0x5e0>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    f660:	ldr	r1, [pc, #600]	; (f8bc <usb_isr+0x5e4>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    f662:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    f664:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    f666:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    f668:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    f66a:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    f66c:	lsls	r3, r4, #27
    f66e:	bpl.n	f676 <usb_isr+0x39e>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    f670:	ldr	r3, [pc, #584]	; (f8bc <usb_isr+0x5e4>)
    f672:	movs	r2, #16
    f674:	strb	r2, [r3, #0]
	}

}
    f676:	add	sp, #28
    f678:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    f67c:	bl	eca8 <usb_serial_flush_callback>
    f680:	b.n	f3ae <usb_isr+0xd6>
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    f682:	ldr	r2, [pc, #572]	; (f8c0 <usb_isr+0x5e8>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    f684:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    f688:	ldrb	r3, [r2, #0]
    f68a:	adds	r3, #1
    f68c:	strb	r3, [r2, #0]
    f68e:	b.n	f36c <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    f690:	str.w	r0, [r3, r6, lsl #2]
    f694:	ldr	r5, [pc, #556]	; (f8c4 <usb_isr+0x5ec>)
    f696:	b.n	f33a <usb_isr+0x62>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    f698:	movw	r4, #770	; 0x302
    f69c:	cmp	r1, r4
    f69e:	beq.w	fae4 <usb_isr+0x80c>
    f6a2:	bhi.w	f846 <usb_isr+0x56e>
    f6a6:	cmp	r1, #130	; 0x82
    f6a8:	beq.w	f9da <usb_isr+0x702>
    f6ac:	cmp.w	r1, #258	; 0x102
    f6b0:	beq.w	f908 <usb_isr+0x630>
    f6b4:	cmp	r1, #128	; 0x80
    f6b6:	bne.w	f7de <usb_isr+0x506>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    f6ba:	ldr	r4, [pc, #524]	; (f8c8 <usb_isr+0x5f0>)
		reply_buffer[1] = 0;
		datalen = 2;
    f6bc:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    f6be:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    f6c0:	strb	r2, [r4, #1]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    f6c2:	ldrh	r2, [r5, #6]
    f6c4:	cmp	r2, r0
    f6c6:	bcs.w	fc66 <usb_isr+0x98e>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    f6ca:	ldr	r1, [pc, #512]	; (f8cc <usb_isr+0x5f4>)
    f6cc:	ldrb	r5, [r1, #0]
    f6ce:	cmp	r2, #64	; 0x40
    f6d0:	mov	lr, r2
    f6d2:	orr.w	ip, r5, #2
    f6d6:	it	cs
    f6d8:	movcs.w	lr, #64	; 0x40
    f6dc:	add.w	r3, r4, lr
    f6e0:	add.w	r0, r9, ip, lsl #3
    f6e4:	str	r3, [sp, #4]
    f6e6:	movs	r3, #1
    f6e8:	str	r4, [r0, #4]
    f6ea:	mov.w	r8, lr, lsl #16
    f6ee:	rsb	r0, lr, r2
    f6f2:	str	r3, [sp, #8]
    f6f4:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f6f6:	movs	r4, #200	; 0xc8
    f6f8:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    f6fc:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f700:	str.w	r3, [r9, ip, lsl #3]
	ep0_tx_data_toggle ^= 1;
    f704:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    f706:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f708:	ldr.w	ip, [pc, #472]	; f8e4 <usb_isr+0x60c>
	ep0_tx_data_toggle ^= 1;
    f70c:	ldr	r3, [pc, #448]	; (f8d0 <usb_isr+0x5f8>)
	ep0_tx_bdt_bank ^= 1;
    f70e:	ldr.w	r8, [pc, #444]	; f8cc <usb_isr+0x5f4>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    f712:	cmp	r0, #0
    f714:	bne.w	f970 <usb_isr+0x698>
    f718:	cmp.w	lr, #64	; 0x40
    f71c:	bne.n	f7e4 <usb_isr+0x50c>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    f71e:	orr.w	ip, r4, #2
    f722:	add.w	r3, r9, ip, lsl #3
    f726:	ldr	r4, [sp, #4]
    f728:	ldr.w	lr, [pc, #440]	; f8e4 <usb_isr+0x60c>
    f72c:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f72e:	cmp	r2, #0
    f730:	bne.w	f99c <usb_isr+0x6c4>
    f734:	lsls	r2, r0, #16
    f736:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    f73a:	ldrb.w	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f73e:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    f742:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    f744:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    f746:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    f748:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    f74a:	cmp	r0, #64	; 0x40
    f74c:	bne.n	f7e4 <usb_isr+0x50c>
    f74e:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    f750:	ldr	r2, [pc, #384]	; (f8d4 <usb_isr+0x5fc>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    f752:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    f754:	strh	r0, [r2, #0]
    f756:	b.n	f7e4 <usb_isr+0x50c>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    f758:	ldrb	r3, [r1, r6]
    f75a:	cmp	r3, #3
    f75c:	bhi.w	f9cc <usb_isr+0x6f4>
    f760:	add	r2, pc, #4	; (adr r2, f768 <usb_isr+0x490>)
    f762:	ldr.w	pc, [r2, r3, lsl #2]
    f766:	nop
    f768:	.word	0x0000f36d
    f76c:	.word	0x0000f36d
    f770:	.word	0x0000f841
    f774:	.word	0x0000f83b
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
			int i;
			uint32_t *line_coding = NULL;
			switch (setup.wIndex) {
    f778:	ldrh	r2, [r2, #4]
    f77a:	cbnz	r2, f7a0 <usb_isr+0x4c8>
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    f77c:	ldr	r2, [pc, #344]	; (f8d8 <usb_isr+0x600>)
    f77e:	ldrb	r5, [r1, #0]
    f780:	ldrb	r4, [r1, #1]
    f782:	strb	r5, [r2, #0]
    f784:	strb	r4, [r2, #1]
    f786:	ldrb	r5, [r1, #2]
    f788:	ldrb	r4, [r1, #3]
    f78a:	strb	r5, [r2, #2]
    f78c:	strb	r4, [r2, #3]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    f78e:	ldr	r4, [r2, #0]
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    f790:	ldrb	r5, [r1, #4]
    f792:	strb	r5, [r2, #4]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    f794:	cmp	r4, #134	; 0x86
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    f796:	ldrb	r5, [r1, #5]
    f798:	ldrb	r1, [r1, #6]
    f79a:	strb	r5, [r2, #5]
    f79c:	strb	r1, [r2, #6]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    f79e:	beq.n	f89c <usb_isr+0x5c4>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    f7a0:	ldr	r1, [pc, #296]	; (f8cc <usb_isr+0x5f4>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f7a2:	ldr	r6, [pc, #300]	; (f8d0 <usb_isr+0x5f8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    f7a4:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f7a6:	ldrb	r4, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    f7a8:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f7ac:	cmp	r4, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    f7ae:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    f7b2:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f7b4:	ite	eq
    f7b6:	moveq	r1, #136	; 0x88
    f7b8:	movne	r1, #200	; 0xc8
    f7ba:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    f7be:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    f7c2:	eor.w	r4, r4, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    f7c6:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    f7c8:	strb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    f7ca:	str	r1, [r2, #4]
    f7cc:	b.n	f584 <usb_isr+0x2ac>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    f7ce:	movw	r2, #26273	; 0x66a1
    f7d2:	cmp	r1, r2
    f7d4:	beq.n	f7de <usb_isr+0x506>
    f7d6:	movw	r2, #26529	; 0x67a1
    f7da:	cmp	r1, r2
    f7dc:	beq.n	f8a4 <usb_isr+0x5cc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    f7de:	ldr	r2, [pc, #252]	; (f8dc <usb_isr+0x604>)
    f7e0:	movs	r3, #15
    f7e2:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    f7e4:	ldr	r2, [pc, #248]	; (f8e0 <usb_isr+0x608>)
    f7e6:	movs	r3, #1
    f7e8:	strb	r3, [r2, #0]
    f7ea:	b.n	f56e <usb_isr+0x296>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    f7ec:	ldr	r3, [pc, #244]	; (f8e4 <usb_isr+0x60c>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    f7ee:	ldr	r0, [pc, #240]	; (f8e0 <usb_isr+0x608>)
		ep0_tx_bdt_bank = 0;
    f7f0:	ldr	r1, [pc, #216]	; (f8cc <usb_isr+0x5f4>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    f7f2:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    f7f4:	mov.w	lr, #2
    f7f8:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    f7fc:	ldr	r7, [pc, #220]	; (f8dc <usb_isr+0x604>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    f7fe:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    f800:	ldr	r1, [pc, #228]	; (f8e8 <usb_isr+0x610>)
    f802:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    f804:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    f806:	ldr	r6, [pc, #176]	; (f8b8 <usb_isr+0x5e0>)
		USB0_ISTAT = 0xFF;
    f808:	ldr	r5, [pc, #176]	; (f8bc <usb_isr+0x5e4>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    f80a:	ldr	r4, [pc, #224]	; (f8ec <usb_isr+0x614>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    f80c:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    f80e:	movs	r1, #13
    f810:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    f812:	movs	r1, #255	; 0xff
    f814:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    f816:	ldr.w	lr, [pc, #236]	; f904 <usb_isr+0x62c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    f81a:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    f81c:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    f81e:	ldr	r5, [pc, #208]	; (f8f0 <usb_isr+0x618>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    f820:	ldr	r2, [pc, #208]	; (f8f4 <usb_isr+0x61c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    f822:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    f826:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    f828:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    f82a:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    f82e:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    f830:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    f832:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    f834:	add	sp, #28
    f836:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    f83a:	movs	r3, #1
    f83c:	strb	r3, [r1, r6]
						break;
    f83e:	b.n	f36c <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    f840:	movs	r3, #0
    f842:	strb	r3, [r1, r6]
						break;
    f844:	b.n	f36c <usb_isr+0x94>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    f846:	cmp.w	r1, #1280	; 0x500
    f84a:	beq.w	fadc <usb_isr+0x804>
    f84e:	bcc.n	f7de <usb_isr+0x506>
    f850:	sub.w	r1, r1, #1664	; 0x680
    f854:	cmp	r1, #1
    f856:	bhi.n	f7de <usb_isr+0x506>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    f858:	ldr	r2, [pc, #156]	; (f8f8 <usb_isr+0x620>)
    f85a:	ldr	r4, [r2, #4]
    f85c:	cmp	r4, #0
    f85e:	beq.n	f7de <usb_isr+0x506>
    f860:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    f862:	ldrh.w	lr, [r5, #4]
    f866:	b.n	f870 <usb_isr+0x598>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    f868:	adds	r2, #12
			if (list->addr == NULL) break;
    f86a:	ldr	r4, [r2, #4]
    f86c:	cmp	r4, #0
    f86e:	beq.n	f7de <usb_isr+0x506>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    f870:	ldrh	r3, [r2, #0]
    f872:	cmp	r3, r0
    f874:	bne.n	f868 <usb_isr+0x590>
    f876:	ldrh	r3, [r2, #2]
    f878:	cmp	r3, lr
    f87a:	bne.n	f868 <usb_isr+0x590>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    f87c:	lsrs	r0, r0, #8
    f87e:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    f880:	ite	eq
    f882:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    f884:	ldrhne	r0, [r2, #8]
    f886:	b.n	f6c2 <usb_isr+0x3ea>
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    f888:	ldr	r1, [pc, #80]	; (f8dc <usb_isr+0x604>)
		USB0_ISTAT = USB_ISTAT_STALL;
    f88a:	ldr	r3, [pc, #48]	; (f8bc <usb_isr+0x5e4>)
    f88c:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    f88e:	movs	r0, #13
    f890:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    f892:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    f894:	lsls	r2, r4, #30
    f896:	bpl.w	f66c <usb_isr+0x394>
    f89a:	b.n	f65e <usb_isr+0x386>
					//serial_phex(*buf);
					*dst++ = *buf++;
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    f89c:	ldr	r2, [pc, #92]	; (f8fc <usb_isr+0x624>)
    f89e:	movs	r1, #15
    f8a0:	strb	r1, [r2, #0]
    f8a2:	b.n	f7a0 <usb_isr+0x4c8>
		// TODO: required by PTP spec
		endpoint0_stall();
		return;
	case 0x67A1: // Get Device Statis (PTP spec, 5.2.4, page 10)
		// For now, always respond with status ok.
		reply_buffer[0] = 0x4;
    f8a4:	ldr	r4, [pc, #32]	; (f8c8 <usb_isr+0x5f0>)
    f8a6:	ldr	r3, [pc, #88]	; (f900 <usb_isr+0x628>)
    f8a8:	str	r3, [r4, #0]
		reply_buffer[1] = 0;
		reply_buffer[2] = 0x01;
		reply_buffer[3] = 0x20;
		data = reply_buffer;
		datalen = 4;
    f8aa:	movs	r0, #4
    f8ac:	b.n	f6c2 <usb_isr+0x3ea>
    f8ae:	nop
    f8b0:	.word	0x1fff25f8
    f8b4:	.word	0x1fff2640
    f8b8:	.word	0x40072088
    f8bc:	.word	0x40072080
    f8c0:	.word	0x1fff2631
    f8c4:	.word	0x1fff2540
    f8c8:	.word	0x1fff2634
    f8cc:	.word	0x1fff2630
    f8d0:	.word	0x1fff25b4
    f8d4:	.word	0x1fff2558
    f8d8:	.word	0x1fff26ac
    f8dc:	.word	0x400720c0
    f8e0:	.word	0x40072094
    f8e4:	.word	0x1fff0000
    f8e8:	.word	0x00400088
    f8ec:	.word	0x40072098
    f8f0:	.word	0x1fff255c
    f8f4:	.word	0x1fff25b8
    f8f8:	.word	0x00015e24
    f8fc:	.word	0x1fff25b5
    f900:	.word	0x20010004
    f904:	.word	0x4007208c
    f908:	ldrh	r1, [r5, #4]
    f90a:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    f90e:	cmp	r1, #6
    f910:	bhi.w	f7de <usb_isr+0x506>
    f914:	ldrh	r2, [r5, #2]
    f916:	cmp	r2, #0
    f918:	bne.w	f7de <usb_isr+0x506>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    f91c:	ldr	r4, [pc, #724]	; (fbf4 <usb_isr+0x91c>)
    f91e:	str	r0, [sp, #8]
    f920:	lsls	r1, r1, #2
    f922:	add	r4, r1
    f924:	ldrb	r1, [r4, #0]
    f926:	bic.w	r1, r1, #2
    f92a:	strb	r1, [r4, #0]
    f92c:	b.n	f948 <usb_isr+0x670>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    f92e:	ldrh	r1, [r5, #4]
    f930:	cmp	r1, #0
    f932:	bne.w	fb0a <usb_isr+0x832>
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    f936:	ldr	r3, [pc, #704]	; (fbf8 <usb_isr+0x920>)
    f938:	ldr	r2, [pc, #704]	; (fbfc <usb_isr+0x924>)
			usb_cdc_line_rtsdtr = setup.wValue;
    f93a:	ldr	r4, [pc, #708]	; (fc00 <usb_isr+0x928>)
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    f93c:	ldr	r3, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    f93e:	ldrb	r5, [r5, #2]
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    f940:	str	r3, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    f942:	str	r0, [sp, #8]
    f944:	mov	r2, r1
    f946:	strb	r5, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    f948:	movs	r0, #0
    f94a:	str	r0, [sp, #4]
    f94c:	mov	r8, r0
    f94e:	mov	lr, r0
    f950:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    f952:	ldr	r1, [pc, #688]	; (fc04 <usb_isr+0x92c>)
    f954:	ldrb	r5, [r1, #0]
    f956:	orr.w	ip, r5, #2
    f95a:	add.w	r3, r9, ip, lsl #3
    f95e:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f960:	ldr	r3, [sp, #8]
    f962:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    f964:	ldr	r3, [sp, #12]
    f966:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f968:	ite	eq
    f96a:	moveq	r4, #136	; 0x88
    f96c:	movne	r4, #200	; 0xc8
    f96e:	b.n	f6f8 <usb_isr+0x420>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    f970:	cmp	r0, #64	; 0x40
    f972:	bls.w	f71e <usb_isr+0x446>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    f976:	orr.w	r4, r4, #2
    f97a:	add.w	r1, ip, r4, lsl #3
    f97e:	ldr	r6, [sp, #4]
    f980:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f982:	cbz	r2, f9b4 <usb_isr+0x6dc>
	ep0_tx_data_toggle ^= 1;
    f984:	ldrb.w	r1, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f988:	ldr	r2, [pc, #636]	; (fc08 <usb_isr+0x930>)
	ep0_tx_data_toggle ^= 1;
    f98a:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    f98c:	mov	r3, r6
    f98e:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    f990:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    f994:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f996:	str.w	r2, [ip, r4, lsl #3]
    f99a:	b.n	f750 <usb_isr+0x478>
	ep0_tx_data_toggle ^= 1;
    f99c:	ldrb.w	r3, [sp, #8]
    f9a0:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f9a2:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    f9a4:	ldr	r3, [sp, #4]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    f9a6:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f9a8:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    f9ac:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f9ae:	str.w	r2, [lr, ip, lsl #3]
    f9b2:	b.n	f74a <usb_isr+0x472>
	ep0_tx_data_toggle ^= 1;
    f9b4:	ldrb.w	r1, [sp, #8]
    f9b8:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    f9ba:	ldr	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f9bc:	ldr	r2, [pc, #588]	; (fc0c <usb_isr+0x934>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    f9be:	strb.w	r5, [r8]
    f9c2:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    f9c4:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f9c6:	str.w	r2, [ip, r4, lsl #3]
    f9ca:	b.n	f750 <usb_isr+0x478>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    f9cc:	tst.w	r9, #8
    f9d0:	ite	eq
    f9d2:	moveq	r3, #2
    f9d4:	movne	r3, #3
    f9d6:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    f9d8:	b.n	f36c <usb_isr+0x94>
    f9da:	ldrh	r1, [r5, #4]
    f9dc:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    f9e0:	cmp	r1, #6
    f9e2:	bhi.w	f7de <usb_isr+0x506>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    f9e6:	ldr	r3, [pc, #524]	; (fbf4 <usb_isr+0x91c>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    f9e8:	ldr	r4, [pc, #548]	; (fc10 <usb_isr+0x938>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    f9ea:	lsls	r1, r1, #2
    f9ec:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    f9ee:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    f9f0:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    f9f2:	ldrb	r2, [r3, #0]
    f9f4:	lsls	r3, r2, #30
    f9f6:	bpl.w	fb0e <usb_isr+0x836>
    f9fa:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    f9fc:	movs	r0, #2
    f9fe:	b.n	f6c2 <usb_isr+0x3ea>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    fa00:	ldr	r3, [sp, #4]
    fa02:	mov.w	r2, #1
    fa06:	strb	r2, [r3, #0]
    fa08:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    fa0a:	adds	r4, #1
    fa0c:	adds	r3, #1
    fa0e:	cmp	r4, #6
    fa10:	add.w	r6, r6, #4
    fa14:	add.w	r5, r5, #4
    fa18:	str	r3, [sp, #4]
    fa1a:	bne.w	f4aa <usb_isr+0x1d2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    fa1e:	ldr	r5, [pc, #500]	; (fc14 <usb_isr+0x93c>)
			*reg = epconf;
    fa20:	ldr	r1, [pc, #500]	; (fc18 <usb_isr+0x940>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    fa22:	ldrb	r2, [r5, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    fa24:	ldr	r4, [pc, #500]	; (fc1c <usb_isr+0x944>)
    fa26:	ldr	r7, [sp, #16]
    fa28:	ldr	r6, [sp, #20]
    fa2a:	movs	r0, #0
    fa2c:	strb	r0, [r4, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    fa2e:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    fa30:	lsls	r1, r2, #28
    fa32:	bmi.w	fb40 <usb_isr+0x868>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    fa36:	ldrb	r2, [r5, #1]
			*reg = epconf;
    fa38:	ldr	r1, [pc, #484]	; (fc20 <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    fa3a:	ldr.w	r8, [pc, #504]	; fc34 <usb_isr+0x95c>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    fa3e:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    fa40:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    fa42:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    fa44:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    fa48:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    fa4c:	bmi.n	fb12 <usb_isr+0x83a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    fa4e:	ldrb	r2, [r5, #2]
			*reg = epconf;
    fa50:	ldr	r1, [pc, #464]	; (fc24 <usb_isr+0x94c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    fa52:	ldr.w	r8, [pc, #480]	; fc34 <usb_isr+0x95c>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    fa56:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    fa58:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    fa5a:	mov.w	r1, #0
    fa5e:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    fa62:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    fa66:	bmi.w	fc3c <usb_isr+0x964>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    fa6a:	ldrb	r2, [r5, #3]
			*reg = epconf;
    fa6c:	ldr	r1, [pc, #440]	; (fc28 <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    fa6e:	ldr.w	r8, [pc, #452]	; fc34 <usb_isr+0x95c>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    fa72:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    fa74:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    fa76:	mov.w	r1, #0
    fa7a:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    fa7e:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    fa82:	bmi.w	fbca <usb_isr+0x8f2>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    fa86:	ldr	r1, [pc, #420]	; (fc2c <usb_isr+0x954>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    fa88:	ldrb	r2, [r5, #4]
			*reg = epconf;
    fa8a:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    fa8c:	movs	r1, #0
    fa8e:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    fa92:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    fa96:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    fa98:	ldr.w	r8, [pc, #408]	; fc34 <usb_isr+0x95c>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    fa9c:	bmi.n	fb9c <usb_isr+0x8c4>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    fa9e:	ldrb	r2, [r5, #5]
			*reg = epconf;
    faa0:	ldr	r1, [pc, #396]	; (fc30 <usb_isr+0x958>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    faa2:	ldr	r5, [pc, #400]	; (fc34 <usb_isr+0x95c>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    faa4:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    faa6:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    faa8:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    faaa:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    faae:	str.w	r1, [r9, #184]	; 0xb8
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    fab2:	bmi.n	fb6e <usb_isr+0x896>
    fab4:	ldrb	r3, [r6, #0]
    fab6:	str	r3, [sp, #8]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    fab8:	movs	r1, #0
    faba:	eor.w	r2, r3, #1
    fabe:	str.w	r1, [r9, #208]	; 0xd0
			table[index(i, TX, ODD)].desc = 0;
    fac2:	str.w	r1, [r9, #216]	; 0xd8
    fac6:	b.n	f948 <usb_isr+0x670>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    fac8:	ldr	r3, [sp, #4]
    faca:	mov.w	r2, #0
    face:	strb	r2, [r3, #0]
    fad0:	b.n	fa08 <usb_isr+0x730>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    fad2:	ldr	r2, [pc, #356]	; (fc38 <usb_isr+0x960>)
    fad4:	ldr	r4, [pc, #312]	; (fc10 <usb_isr+0x938>)
    fad6:	ldrb	r2, [r2, #0]
    fad8:	strb	r2, [r4, #0]
    fada:	b.n	f6c2 <usb_isr+0x3ea>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    fadc:	movs	r3, #1
    fade:	movs	r2, #0
    fae0:	str	r3, [sp, #8]
    fae2:	b.n	f948 <usb_isr+0x670>
    fae4:	ldrh	r1, [r5, #4]
    fae6:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    faea:	cmp	r1, #6
    faec:	bhi.w	f7de <usb_isr+0x506>
    faf0:	ldrh	r2, [r5, #2]
    faf2:	cmp	r2, #0
    faf4:	bne.w	f7de <usb_isr+0x506>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    faf8:	ldr	r4, [pc, #248]	; (fbf4 <usb_isr+0x91c>)
    fafa:	str	r0, [sp, #8]
    fafc:	lsls	r1, r1, #2
    fafe:	add	r4, r1
    fb00:	ldrb	r1, [r4, #0]
    fb02:	orr.w	r1, r1, #2
    fb06:	strb	r1, [r4, #0]
    fb08:	b.n	f948 <usb_isr+0x670>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    fb0a:	str	r0, [sp, #8]
    fb0c:	b.n	f948 <usb_isr+0x670>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    fb0e:	movs	r0, #2
    fb10:	b.n	f6c2 <usb_isr+0x3ea>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    fb12:	bl	f058 <usb_malloc>
				if (p) {
    fb16:	cmp	r0, #0
    fb18:	beq.w	fcf2 <usb_isr+0xa1a>
					table[index(i, RX, EVEN)].addr = p->buf;
    fb1c:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    fb1e:	ldr	r2, [pc, #236]	; (fc0c <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    fb20:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    fb24:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    fb28:	bl	f058 <usb_malloc>
				if (p) {
    fb2c:	cmp	r0, #0
    fb2e:	beq.w	fce6 <usb_isr+0xa0e>
					table[index(i, RX, ODD)].addr = p->buf;
    fb32:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    fb34:	ldr	r2, [pc, #208]	; (fc08 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    fb36:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    fb3a:	str.w	r2, [r9, #72]	; 0x48
    fb3e:	b.n	fa4e <usb_isr+0x776>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    fb40:	bl	f058 <usb_malloc>
				if (p) {
    fb44:	cmp	r0, #0
    fb46:	beq.w	fcc2 <usb_isr+0x9ea>
					table[index(i, RX, EVEN)].addr = p->buf;
    fb4a:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    fb4c:	ldr	r2, [pc, #188]	; (fc0c <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    fb4e:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    fb52:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    fb56:	bl	f058 <usb_malloc>
				if (p) {
    fb5a:	cmp	r0, #0
    fb5c:	beq.w	fcb6 <usb_isr+0x9de>
					table[index(i, RX, ODD)].addr = p->buf;
    fb60:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    fb62:	ldr	r2, [pc, #164]	; (fc08 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    fb64:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    fb68:	str.w	r2, [r9, #40]	; 0x28
    fb6c:	b.n	fa36 <usb_isr+0x75e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    fb6e:	bl	f058 <usb_malloc>
				if (p) {
    fb72:	cmp	r0, #0
    fb74:	beq.w	fcaa <usb_isr+0x9d2>
					table[index(i, RX, EVEN)].addr = p->buf;
    fb78:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    fb7a:	ldr	r2, [pc, #144]	; (fc0c <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    fb7c:	str.w	r0, [r5, #196]	; 0xc4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    fb80:	str.w	r2, [r5, #192]	; 0xc0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    fb84:	bl	f058 <usb_malloc>
				if (p) {
    fb88:	cmp	r0, #0
    fb8a:	beq.w	fc9e <usb_isr+0x9c6>
					table[index(i, RX, ODD)].addr = p->buf;
    fb8e:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    fb90:	ldr	r2, [pc, #116]	; (fc08 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    fb92:	str.w	r0, [r9, #204]	; 0xcc
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    fb96:	str.w	r2, [r9, #200]	; 0xc8
    fb9a:	b.n	fab4 <usb_isr+0x7dc>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    fb9c:	bl	f058 <usb_malloc>
				if (p) {
    fba0:	cmp	r0, #0
    fba2:	beq.w	fcda <usb_isr+0xa02>
					table[index(i, RX, EVEN)].addr = p->buf;
    fba6:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    fba8:	ldr	r2, [pc, #96]	; (fc0c <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    fbaa:	str.w	r0, [r8, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    fbae:	str.w	r2, [r8, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    fbb2:	bl	f058 <usb_malloc>
				if (p) {
    fbb6:	cmp	r0, #0
    fbb8:	beq.w	fcce <usb_isr+0x9f6>
					table[index(i, RX, ODD)].addr = p->buf;
    fbbc:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    fbbe:	ldr	r2, [pc, #72]	; (fc08 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    fbc0:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    fbc4:	str.w	r2, [r9, #168]	; 0xa8
    fbc8:	b.n	fa9e <usb_isr+0x7c6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    fbca:	bl	f058 <usb_malloc>
				if (p) {
    fbce:	cmp	r0, #0
    fbd0:	beq.n	fc92 <usb_isr+0x9ba>
					table[index(i, RX, EVEN)].addr = p->buf;
    fbd2:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    fbd4:	ldr	r2, [pc, #52]	; (fc0c <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    fbd6:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    fbda:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    fbde:	bl	f058 <usb_malloc>
				if (p) {
    fbe2:	cmp	r0, #0
    fbe4:	beq.n	fc86 <usb_isr+0x9ae>
					table[index(i, RX, ODD)].addr = p->buf;
    fbe6:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    fbe8:	ldr	r2, [pc, #28]	; (fc08 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    fbea:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    fbee:	str.w	r2, [r9, #136]	; 0x88
    fbf2:	b.n	fa86 <usb_isr+0x7ae>
    fbf4:	.word	0x400720c0
    fbf8:	.word	0x1fff2538
    fbfc:	.word	0x1fff26b4
    fc00:	.word	0x1fff2534
    fc04:	.word	0x1fff2630
    fc08:	.word	0x004000c8
    fc0c:	.word	0x00400088
    fc10:	.word	0x1fff2634
    fc14:	.word	0x00015e1c
    fc18:	.word	0x400720c4
    fc1c:	.word	0x1fff2631
    fc20:	.word	0x400720c8
    fc24:	.word	0x400720cc
    fc28:	.word	0x400720d0
    fc2c:	.word	0x400720d4
    fc30:	.word	0x400720d8
    fc34:	.word	0x1fff0000
    fc38:	.word	0x1fff263c
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    fc3c:	bl	f058 <usb_malloc>
				if (p) {
    fc40:	cmp	r0, #0
    fc42:	beq.n	fd0a <usb_isr+0xa32>
					table[index(i, RX, EVEN)].addr = p->buf;
    fc44:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    fc46:	ldr	r2, [pc, #208]	; (fd18 <usb_isr+0xa40>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    fc48:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    fc4c:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    fc50:	bl	f058 <usb_malloc>
				if (p) {
    fc54:	cmp	r0, #0
    fc56:	beq.n	fcfe <usb_isr+0xa26>
					table[index(i, RX, ODD)].addr = p->buf;
    fc58:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    fc5a:	ldr	r2, [pc, #192]	; (fd1c <usb_isr+0xa44>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    fc5c:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    fc60:	str.w	r2, [r9, #104]	; 0x68
    fc64:	b.n	fa6a <usb_isr+0x792>
    fc66:	cmp	r0, #64	; 0x40
    fc68:	mov	lr, r0
    fc6a:	it	cs
    fc6c:	movcs.w	lr, #64	; 0x40
    fc70:	add.w	r3, r4, lr
    fc74:	str	r3, [sp, #4]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    fc76:	movs	r3, #1
    fc78:	rsb	r0, lr, r0
    fc7c:	mov.w	r8, lr, lsl #16
    fc80:	movs	r2, #0
    fc82:	str	r3, [sp, #8]
    fc84:	b.n	f952 <usb_isr+0x67a>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    fc86:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    fc88:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    fc8c:	adds	r2, #1
    fc8e:	strb	r2, [r4, #0]
    fc90:	b.n	fa86 <usb_isr+0x7ae>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    fc92:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    fc94:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    fc98:	adds	r2, #1
    fc9a:	strb	r2, [r4, #0]
    fc9c:	b.n	fbde <usb_isr+0x906>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    fc9e:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    fca0:	str.w	r0, [r9, #200]	; 0xc8
					usb_rx_memory_needed++;
    fca4:	adds	r2, #1
    fca6:	strb	r2, [r4, #0]
    fca8:	b.n	fab4 <usb_isr+0x7dc>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    fcaa:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    fcac:	str.w	r0, [r5, #192]	; 0xc0
					usb_rx_memory_needed++;
    fcb0:	adds	r2, #1
    fcb2:	strb	r2, [r4, #0]
    fcb4:	b.n	fb84 <usb_isr+0x8ac>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    fcb6:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    fcb8:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    fcbc:	adds	r2, #1
    fcbe:	strb	r2, [r4, #0]
    fcc0:	b.n	fa36 <usb_isr+0x75e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    fcc2:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    fcc4:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    fcc8:	adds	r2, #1
    fcca:	strb	r2, [r4, #0]
    fccc:	b.n	fb56 <usb_isr+0x87e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    fcce:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    fcd0:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    fcd4:	adds	r2, #1
    fcd6:	strb	r2, [r4, #0]
    fcd8:	b.n	fa9e <usb_isr+0x7c6>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    fcda:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    fcdc:	str.w	r0, [r8, #160]	; 0xa0
					usb_rx_memory_needed++;
    fce0:	adds	r2, #1
    fce2:	strb	r2, [r4, #0]
    fce4:	b.n	fbb2 <usb_isr+0x8da>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    fce6:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    fce8:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    fcec:	adds	r2, #1
    fcee:	strb	r2, [r4, #0]
    fcf0:	b.n	fa4e <usb_isr+0x776>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    fcf2:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    fcf4:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    fcf8:	adds	r2, #1
    fcfa:	strb	r2, [r4, #0]
    fcfc:	b.n	fb28 <usb_isr+0x850>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    fcfe:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    fd00:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    fd04:	adds	r2, #1
    fd06:	strb	r2, [r4, #0]
    fd08:	b.n	fa6a <usb_isr+0x792>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    fd0a:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    fd0c:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    fd10:	adds	r2, #1
    fd12:	strb	r2, [r4, #0]
    fd14:	b.n	fc50 <usb_isr+0x978>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    fd16:	bkpt	0x0000
    fd18:	.word	0x00400088
    fd1c:	.word	0x004000c8

0000fd20 <usb_init>:
}



void usb_init(void)
{
    fd20:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fd24:	ldr	r4, [pc, #144]	; (fdb8 <usb_init+0x98>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    fd26:	bl	10294 <usb_init_serialnumber>

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
    fd2a:	movs	r2, #0
    fd2c:	add.w	r0, r4, #224	; 0xe0
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    fd30:	mov	r3, r4

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
    fd32:	str	r2, [r3, #0]
		table[i].addr = 0;
    fd34:	str	r2, [r3, #4]
    fd36:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    fd38:	cmp	r3, r0
		table[i].desc = 0;
    fd3a:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    fd3e:	bne.n	fd32 <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    fd40:	ldr	r0, [pc, #120]	; (fdbc <usb_init+0x9c>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    fd42:	ldr	r2, [pc, #124]	; (fdc0 <usb_init+0xa0>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    fd44:	ldr	r3, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    fd46:	ldr.w	lr, [pc, #144]	; fdd8 <usb_init+0xb8>
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    fd4a:	ldr	r7, [pc, #120]	; (fdc4 <usb_init+0xa4>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    fd4c:	ldr	r5, [pc, #120]	; (fdc8 <usb_init+0xa8>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    fd4e:	ldr	r6, [pc, #124]	; (fdcc <usb_init+0xac>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    fd50:	ldr.w	r8, [pc, #136]	; fddc <usb_init+0xbc>
	USB0_ERRSTAT = 0xFF;
    fd54:	ldr.w	ip, [pc, #136]	; fde0 <usb_init+0xc0>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    fd58:	ldr.w	r9, [pc, #136]	; fde4 <usb_init+0xc4>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    fd5c:	orr.w	r3, r3, #262144	; 0x40000
    fd60:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    fd62:	ldr	r3, [r2, #0]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    fd64:	ldr	r0, [pc, #104]	; (fdd0 <usb_init+0xb0>)

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    fd66:	orr.w	r3, r3, #50331648	; 0x3000000
    fd6a:	str	r3, [r2, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    fd6c:	ubfx	r3, r4, #8, #8
    fd70:	strb.w	r3, [lr]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    fd74:	ubfx	r3, r4, #16, #8
    fd78:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    fd7a:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    fd7c:	movs	r3, #255	; 0xff
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    fd7e:	add.w	r2, r2, #411648	; 0x64800
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    fd82:	strb	r4, [r5, #0]
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    fd84:	add.w	r2, r2, #264	; 0x108
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    fd88:	strb.w	r3, [r8]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    fd8c:	ldr	r5, [pc, #68]	; (fdd4 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    fd8e:	strb.w	r3, [ip]
	USB0_OTGISTAT = 0xFF;
    fd92:	strb	r3, [r6, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    fd94:	movs	r3, #1
    fd96:	strb.w	r3, [r9]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    fd9a:	movs	r6, #112	; 0x70

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    fd9c:	strb.w	r1, [lr, #100]	; 0x64
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    fda0:	mov.w	r4, #2097152	; 0x200000

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    fda4:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    fda6:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    fdaa:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    fdac:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    fdae:	strb	r1, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    fdb0:	add.w	lr, lr, #100	; 0x64
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    fdb4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fdb8:	.word	0x1fff0000
    fdbc:	.word	0x40048034
    fdc0:	.word	0x4000d800
    fdc4:	.word	0x400720b0
    fdc8:	.word	0x400720b4
    fdcc:	.word	0x40072010
    fdd0:	.word	0xe000e104
    fdd4:	.word	0xe000e435
    fdd8:	.word	0x4007209c
    fddc:	.word	0x40072080
    fde0:	.word	0x40072088
    fde4:	.word	0x40072094

0000fde8 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    fde8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    fdec:	ldr	r6, [pc, #196]	; (feb4 <yield+0xcc>)
    fdee:	ldrb	r3, [r6, #0]
    fdf0:	cbz	r3, fe18 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    fdf2:	ldr	r7, [pc, #196]	; (feb8 <yield+0xd0>)
    fdf4:	ldrb	r2, [r7, #0]
    fdf6:	cbnz	r2, fe18 <yield+0x30>
	running = 1;
    fdf8:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    fdfa:	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    fdfc:	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    fdfe:	bmi.n	fe6e <yield+0x86>
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIALUSB2) {
		if (SerialUSB2.available()) serialEventUSB2();
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    fe00:	lsls	r2, r3, #30
    fe02:	bmi.n	fe38 <yield+0x50>
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    fe04:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    fe06:	lsls	r3, r3, #29
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    fe08:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    fe0a:	bpl.n	fe18 <yield+0x30>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;  
    fe0c:	ldr	r3, [pc, #172]	; (febc <yield+0xd4>)
    fe0e:	ldr	r2, [r3, #0]
    fe10:	cbz	r2, fe18 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    fe12:	mrs	r2, IPSR
		if (ipsr != 0) return;
    fe16:	cbz	r2, fe1c <yield+0x34>
    fe18:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    fe1c:	mrs	r1, PRIMASK
		__disable_irq();
    fe20:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    fe22:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    fe24:	cbz	r0, fe2e <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    fe26:	ldr	r4, [pc, #152]	; (fec0 <yield+0xd8>)
    fe28:	ldrb	r2, [r4, #0]
    fe2a:	cmp	r2, #0
    fe2c:	beq.n	fe8c <yield+0xa4>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    fe2e:	cmp	r1, #0
    fe30:	bne.n	fe18 <yield+0x30>
    fe32:	cpsie	i
    fe34:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial_putchar(c); return 1; }
	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    fe38:	ldr.w	r8, [pc, #144]	; fecc <yield+0xe4>
    fe3c:	ldrb.w	r2, [r8]
    fe40:	cmp	r2, #0
    fe42:	beq.n	fe04 <yield+0x1c>
    fe44:	ldr.w	r9, [pc, #136]	; fed0 <yield+0xe8>
    fe48:	movs	r4, #0
    fe4a:	b.n	fe58 <yield+0x70>
    fe4c:	adds	r4, #1
    fe4e:	ldrb.w	r3, [r8]
    fe52:	uxtb	r4, r4
    fe54:	cmp	r3, r4
    fe56:	bls.n	fe7e <yield+0x96>
			s_serials_with_serial_events[i]->doYieldCode();
    fe58:	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
	static uint8_t 			s_count_serials_with_serial_events;
	void 		(* const _serialEvent)(); 
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*_serialEvent)();
    fe5c:	ldr	r3, [r5, #0]
    fe5e:	mov	r0, r5
    fe60:	ldr	r3, [r3, #16]
    fe62:	blx	r3
    fe64:	cmp	r0, #0
    fe66:	beq.n	fe4c <yield+0x64>
    fe68:	ldr	r3, [r5, #16]
    fe6a:	blx	r3
    fe6c:	b.n	fe4c <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    fe6e:	bl	ea94 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    fe72:	cbnz	r0, fea8 <yield+0xc0>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    fe74:	ldr	r3, [pc, #76]	; (fec4 <yield+0xdc>)
    fe76:	ldrb	r3, [r3, #0]
    fe78:	cbnz	r3, fe82 <yield+0x9a>
    fe7a:	ldrb	r3, [r6, #0]
    fe7c:	b.n	fe00 <yield+0x18>
    fe7e:	ldrb	r3, [r6, #0]
    fe80:	b.n	fe04 <yield+0x1c>
    fe82:	ldrb	r3, [r6, #0]
    fe84:	and.w	r3, r3, #254	; 0xfe
    fe88:	strb	r3, [r6, #0]
    fe8a:	b.n	fe00 <yield+0x18>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    fe8c:	ldr	r5, [r0, #20]
    fe8e:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    fe90:	movs	r3, #1
    fe92:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    fe94:	cbz	r5, feae <yield+0xc6>
			firstYield->_prev = nullptr;
    fe96:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    fe98:	cbnz	r1, fe9c <yield+0xb4>
    fe9a:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    fe9c:	movs	r5, #0
    fe9e:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    fea0:	ldr	r3, [r0, #8]
    fea2:	blx	r3
		runningFromYield = false;
    fea4:	strb	r5, [r4, #0]
    fea6:	b.n	fe18 <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    fea8:	bl	101a8 <serialEvent()>
    feac:	b.n	fe74 <yield+0x8c>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    feae:	ldr	r3, [pc, #24]	; (fec8 <yield+0xe0>)
    feb0:	str	r5, [r3, #0]
    feb2:	b.n	fe98 <yield+0xb0>
    feb4:	.word	0x1fff09cc
    feb8:	.word	0x1fff2646
    febc:	.word	0x1fff2654
    fec0:	.word	0x1fff2658
    fec4:	.word	0x1fff09e0
    fec8:	.word	0x1fff2650
    fecc:	.word	0x1fff2674
    fed0:	.word	0x1fff265c

0000fed4 <EventResponder::triggerEventNotImmediate()>:
uint8_t _serialEvent_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB1_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;	

void EventResponder::triggerEventNotImmediate()
{
    fed4:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    fed6:	mrs	r2, PRIMASK
		__disable_irq();
    feda:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    fedc:	ldrb	r3, [r0, #29]
    fede:	cbnz	r3, feee <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    fee0:	ldrb	r1, [r0, #28]
    fee2:	cmp	r1, #1
    fee4:	beq.n	fef8 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    fee6:	cmp	r1, #3
    fee8:	beq.n	ff0c <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    feea:	movs	r3, #1
    feec:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    feee:	cbnz	r2, fef2 <EventResponder::triggerEventNotImmediate()+0x1e>
    fef0:	cpsie	i
	}
	enableInterrupts(irq);
}
    fef2:	ldr.w	r4, [sp], #4
    fef6:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    fef8:	ldr	r4, [pc, #68]	; (ff40 <EventResponder::triggerEventNotImmediate()+0x6c>)
    fefa:	ldr	r1, [r4, #0]
    fefc:	cbz	r1, ff28 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    fefe:	ldr	r1, [pc, #68]	; (ff44 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    ff00:	str	r3, [r0, #20]
				_prev = lastYield;
    ff02:	ldr	r3, [r1, #0]
    ff04:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    ff06:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    ff08:	str	r0, [r3, #20]
    ff0a:	b.n	feea <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    ff0c:	ldr	r4, [pc, #56]	; (ff48 <EventResponder::triggerEventNotImmediate()+0x74>)
    ff0e:	ldr	r1, [r4, #0]
    ff10:	cbz	r1, ff34 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    ff12:	ldr	r1, [pc, #56]	; (ff4c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    ff14:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    ff16:	ldr	r3, [r1, #0]
    ff18:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    ff1a:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    ff1c:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    ff1e:	ldr	r3, [pc, #48]	; (ff50 <EventResponder::triggerEventNotImmediate()+0x7c>)
    ff20:	mov.w	r1, #268435456	; 0x10000000
    ff24:	str	r1, [r3, #0]
    ff26:	b.n	feea <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    ff28:	ldr	r3, [pc, #24]	; (ff44 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    ff2a:	str	r1, [r0, #20]
				_prev = nullptr;
    ff2c:	str	r1, [r0, #24]
				firstYield = this;
    ff2e:	str	r0, [r4, #0]
				lastYield = this;
    ff30:	str	r0, [r3, #0]
    ff32:	b.n	feea <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    ff34:	ldr	r3, [pc, #20]	; (ff4c <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    ff36:	str	r1, [r0, #20]
				_prev = nullptr;
    ff38:	str	r1, [r0, #24]
				firstInterrupt = this;
    ff3a:	str	r0, [r4, #0]
				lastInterrupt = this;
    ff3c:	str	r0, [r3, #0]
    ff3e:	b.n	ff1e <EventResponder::triggerEventNotImmediate()+0x4a>
    ff40:	.word	0x1fff2654
    ff44:	.word	0x1fff2650
    ff48:	.word	0x1fff2648
    ff4c:	.word	0x1fff264c
    ff50:	.word	0xe000ed04

0000ff54 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    ff54:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    ff56:	mrs	r2, PRIMASK
		__disable_irq();
    ff5a:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    ff5c:	ldr	r4, [pc, #48]	; (ff90 <EventResponder::runFromInterrupt()+0x3c>)
    ff5e:	ldr	r0, [r4, #0]
		if (first) {
    ff60:	cbz	r0, ff84 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    ff62:	ldr	r6, [pc, #48]	; (ff94 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    ff64:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    ff66:	ldr	r3, [r0, #20]
    ff68:	str	r3, [r4, #0]
			if (firstInterrupt) {
    ff6a:	cbz	r3, ff8a <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    ff6c:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    ff6e:	cbnz	r2, ff72 <EventResponder::runFromInterrupt()+0x1e>
    ff70:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    ff72:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    ff74:	ldr	r3, [r0, #8]
    ff76:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    ff78:	mrs	r2, PRIMASK
		__disable_irq();
    ff7c:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    ff7e:	ldr	r0, [r4, #0]
		if (first) {
    ff80:	cmp	r0, #0
    ff82:	bne.n	ff66 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    ff84:	cbnz	r2, ff88 <EventResponder::runFromInterrupt()+0x34>
    ff86:	cpsie	i
    ff88:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    ff8a:	str	r3, [r6, #0]
    ff8c:	b.n	ff6e <EventResponder::runFromInterrupt()+0x1a>
    ff8e:	nop
    ff90:	.word	0x1fff2648
    ff94:	.word	0x1fff264c

0000ff98 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    ff98:	b.w	ff54 <EventResponder::runFromInterrupt()>

0000ff9c <systick_isr>:

extern "C" volatile uint32_t systick_millis_count;

void systick_isr(void)
{
	systick_millis_count++;
    ff9c:	ldr	r2, [pc, #8]	; (ffa8 <systick_isr+0xc>)
    ff9e:	ldr	r3, [r2, #0]
    ffa0:	adds	r3, #1
    ffa2:	str	r3, [r2, #0]
    ffa4:	bx	lr
    ffa6:	nop
    ffa8:	.word	0x1fff2538

0000ffac <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    ffac:	b.w	eab0 <usb_serial_flush_input>

0000ffb0 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    ffb0:	b.w	ea64 <usb_serial_peekchar>

0000ffb4 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    ffb4:	b.w	ea1c <usb_serial_getchar>

0000ffb8 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    ffb8:	b.w	ea94 <usb_serial_available>

0000ffbc <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    ffbc:	b.w	ec50 <usb_serial_flush_output>

0000ffc0 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    ffc0:	b.w	ec08 <usb_serial_write_buffer_free>

0000ffc4 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    ffc4:	mov	r0, r1
    ffc6:	mov	r1, r2
    ffc8:	b.w	eae8 <usb_serial_write>

0000ffcc <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    ffcc:	mov	r0, r1
    ffce:	b.w	ebf0 <usb_serial_putchar>
    ffd2:	nop

0000ffd4 <Print::write(unsigned char const*, unsigned int)>:

#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
    ffd4:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    ffd6:	mov	r6, r1
    ffd8:	cbz	r1, fff8 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    ffda:	cbz	r2, fffc <Print::write(unsigned char const*, unsigned int)+0x28>
    ffdc:	mov	r7, r0
    ffde:	mov	r4, r2
    ffe0:	movs	r5, #0
    ffe2:	ldr	r3, [r7, #0]
    ffe4:	ldrb.w	r1, [r6], #1
    ffe8:	ldr	r3, [r3, #0]
    ffea:	mov	r0, r7
    ffec:	blx	r3
    ffee:	subs	r4, #1
    fff0:	add	r5, r0
    fff2:	bne.n	ffe2 <Print::write(unsigned char const*, unsigned int)+0xe>
    fff4:	mov	r0, r5
    fff6:	pop	{r3, r4, r5, r6, r7, pc}
#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    fff8:	mov	r0, r1
    fffa:	pop	{r3, r4, r5, r6, r7, pc}
    fffc:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    fffe:	pop	{r3, r4, r5, r6, r7, pc}

00010000 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
   10000:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
   10002:	ldr	r2, [pc, #24]	; (1001c <Print::println()+0x1c>)
	return write(buf, 2);
   10004:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
   10006:	ldrh	r2, [r2, #0]
	return write(buf, 2);
   10008:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
   1000a:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
   1000c:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
   1000e:	strh.w	r2, [sp, #4]
	return write(buf, 2);
   10012:	movs	r2, #2
   10014:	blx	r3
}
   10016:	add	sp, #12
   10018:	ldr.w	pc, [sp], #4
   1001c:	.word	0x00015e18

00010020 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
   10020:	push	{r4, lr}
	((class Print *)file)->write((uint8_t *)ptr, len);
   10022:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
   10024:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
   10026:	ldr	r3, [r3, #4]
   10028:	blx	r3
	return len;
}
   1002a:	mov	r0, r4
   1002c:	pop	{r4, pc}
   1002e:	nop

00010030 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
   10030:	push	{r1, r2, r3}
   10032:	push	{lr}
   10034:	sub	sp, #8
   10036:	add	r2, sp, #12
   10038:	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
   1003c:	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
   1003e:	bl	13b48 <vdprintf>
#endif
}
   10042:	add	sp, #8
   10044:	ldr.w	lr, [sp], #4
   10048:	add	sp, #12
   1004a:	bx	lr

0001004c <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
   1004c:	push	{r4, r5, r6, r7, lr}
   1004e:	mov	r7, r0
   10050:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
   10052:	cmp	r2, #0
   10054:	beq.n	100be <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
   10056:	cmp	r2, #1
   10058:	it	eq
   1005a:	moveq	r2, #10
	}


	if (n == 0) {
   1005c:	cbz	r1, 100b4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
   1005e:	movs	r4, #33	; 0x21
   10060:	b.n	10064 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
   10062:	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
   10064:	udiv	r5, r1, r2
   10068:	mls	r1, r2, r5, r1
   1006c:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   1006e:	cmp	r1, #9
   10070:	add.w	r1, r0, #48	; 0x30
   10074:	it	ls
   10076:	uxtbls	r0, r1
   10078:	add	r1, sp, #40	; 0x28
   1007a:	it	hi
   1007c:	addhi	r0, #55	; 0x37
   1007e:	add	r1, r4
   10080:	it	hi
   10082:	uxtbhi	r0, r0
   10084:	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
   10088:	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
   1008a:	mov	r1, r5
   1008c:	cmp	r5, #0
   1008e:	bne.n	10062 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
   10090:	cbz	r3, 100a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
   10092:	subs	r4, #1
   10094:	uxtb	r4, r4
		buf[i] = '-';
   10096:	add	r3, sp, #40	; 0x28
   10098:	add	r3, r4
   1009a:	movs	r2, #45	; 0x2d
   1009c:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
   100a0:	ldr	r3, [r7, #0]
   100a2:	add	r2, sp, #4
   100a4:	adds	r1, r2, r4
   100a6:	ldr	r3, [r3, #4]
   100a8:	mov	r0, r7
   100aa:	rsb	r2, r4, #34	; 0x22
   100ae:	blx	r3
}
   100b0:	add	sp, #44	; 0x2c
   100b2:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
   100b4:	movs	r2, #48	; 0x30
   100b6:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
   100ba:	movs	r4, #33	; 0x21
   100bc:	b.n	10090 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
   100be:	ldr	r3, [r0, #0]
   100c0:	uxtb	r1, r1
   100c2:	ldr	r3, [r3, #0]
   100c4:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
   100c6:	add	sp, #44	; 0x2c
   100c8:	pop	{r4, r5, r6, r7, pc}
   100ca:	nop

000100cc <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
   100cc:	cmp	r1, #0
		sign = '-';
		n = -n;
   100ce:	itte	lt
   100d0:	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
   100d2:	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
   100d4:	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
   100d6:	movs	r2, #10
   100d8:	b.w	1004c <Print::printNumber(unsigned long, unsigned char, unsigned char)>

000100dc <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
   100dc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   100e0:	sub	sp, #72	; 0x48
   100e2:	ldrb.w	r6, [sp, #104]	; 0x68
   100e6:	ldrb.w	sl, [sp, #108]	; 0x6c
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
   100ea:	cmp	r6, #1
   100ec:	bls.n	1018e <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0xb2>
   100ee:	mov	r4, r2
   100f0:	mov	r5, r3
	if (n == 0) {
   100f2:	orrs.w	r3, r4, r5
   100f6:	mov	r9, r0
   100f8:	beq.n	10182 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0xa6>
   100fa:	uxtb	r6, r6
   100fc:	movs	r7, #0
   100fe:	mov.w	r8, #65	; 0x41
   10102:	b.n	10108 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x2c>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
   10104:	uxtb.w	r8, r3
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
   10108:	mov	r0, r4
   1010a:	mov	r1, r5
   1010c:	mov	r2, r6
   1010e:	mov	r3, r7
   10110:	bl	10c88 <__aeabi_uldivmod>
   10114:	mov	r1, r3
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   10116:	cmp	r1, #0
   10118:	it	eq
   1011a:	cmpeq	r2, #10
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
   1011c:	uxtb	r3, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
   1011e:	mov	r0, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   10120:	add	r4, sp, #72	; 0x48
   10122:	add.w	lr, r3, #48	; 0x30
   10126:	add	r4, r8
   10128:	itte	cs
   1012a:	addcs	r3, #55	; 0x37
   1012c:	uxtbcs.w	lr, r3
   10130:	uxtbcc.w	lr, lr
			n /= base;
   10134:	mov	r3, r7
   10136:	mov	r1, r5
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   10138:	strb.w	lr, [r4, #-68]
			n /= base;
   1013c:	mov	r2, r6
   1013e:	bl	10c88 <__aeabi_uldivmod>
   10142:	mov	r4, r0
   10144:	mov	r5, r1
			if (n == 0) break;
   10146:	orrs.w	r3, r4, r5
			i--;
   1014a:	add.w	r3, r8, #4294967295
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
   1014e:	bne.n	10104 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x28>
			i--;
		}
	}
	if (sign) {
   10150:	cmp.w	sl, #0
   10154:	beq.n	10168 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x8c>
		i--;
   10156:	add.w	r8, r8, #4294967295
   1015a:	uxtb.w	r8, r8
		buf[i] = '-';
   1015e:	add	r3, sp, #72	; 0x48
   10160:	add	r3, r8
   10162:	movs	r2, #45	; 0x2d
   10164:	strb.w	r2, [r3, #-68]
	}
	return write(buf + i, sizeof(buf) - i);
   10168:	ldr.w	r3, [r9]
   1016c:	add	r2, sp, #4
   1016e:	add.w	r1, r2, r8
   10172:	ldr	r3, [r3, #4]
   10174:	mov	r0, r9
   10176:	rsb	r2, r8, #66	; 0x42
   1017a:	blx	r3
}
   1017c:	add	sp, #72	; 0x48
   1017e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
   10182:	movs	r3, #48	; 0x30
   10184:	strb.w	r3, [sp, #69]	; 0x45
		i = sizeof(buf) - 1;
   10188:	mov.w	r8, #65	; 0x41
   1018c:	b.n	10150 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x74>
size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
   1018e:	movs	r0, #0
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
   10190:	add	sp, #72	; 0x48
   10192:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10196:	nop

00010198 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
   10198:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
   1019a:	bl	18a8 <setup>
	while (1) {
		loop();
   1019e:	bl	1a40 <loop>
		yield();
   101a2:	bl	fde8 <yield>
   101a6:	b.n	1019e <main+0x6>

000101a8 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
   101a8:	bx	lr
   101aa:	nop

000101ac <operator new(unsigned int)>:
   101ac:	b.w	11030 <malloc>

000101b0 <operator delete(void*, unsigned int)>:
   101b0:	b.w	11040 <free>

000101b4 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
   101b4:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
   101b6:	ldr	r0, [pc, #164]	; (1025c <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
   101b8:	ldr	r2, [pc, #164]	; (10260 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
   101ba:	ldr	r3, [pc, #168]	; (10264 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
   101bc:	ldr	r5, [pc, #168]	; (10268 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
   101be:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
   101c0:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
   101c2:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
   101c4:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
   101c6:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
   101c8:	ldr	r4, [pc, #160]	; (1026c <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
   101ca:	cmp	r3, #8
   101cc:	beq.n	10230 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
   101ce:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
   101d0:	ldr	r0, [pc, #156]	; (10270 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
   101d2:	ldr	r1, [pc, #160]	; (10274 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
   101d4:	beq.n	10246 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
   101d6:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
   101d8:	ite	eq
   101da:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
   101dc:	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
   101de:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
   101e0:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
   101e2:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
   101e4:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
   101e6:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
   101e8:	ldr	r3, [pc, #140]	; (10278 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
   101ea:	ldr	r1, [pc, #144]	; (1027c <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
   101ec:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
   101ee:	ldr	r2, [pc, #144]	; (10280 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
   101f0:	cbz	r3, 10222 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
   101f2:	movs	r3, #1
   101f4:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
   101f6:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
   101f8:	ldr	r3, [pc, #136]	; (10284 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
   101fa:	ldr	r1, [pc, #140]	; (10288 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
   101fc:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
   101fe:	ldr	r2, [pc, #140]	; (1028c <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
   10200:	cmp	r3, #1
   10202:	bls.n	10252 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
   10204:	cmp	r3, #4
   10206:	bls.n	10228 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
   10208:	cmp	r3, #8
   1020a:	bls.n	1024a <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
   1020c:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
   1020e:	ite	ls
   10210:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
   10212:	movhi	r3, #135	; 0x87
   10214:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
   10216:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
   10218:	ldr	r3, [pc, #116]	; (10290 <analog_init+0xdc>)
   1021a:	movs	r2, #1
   1021c:	strb	r2, [r3, #0]
}
   1021e:	pop	{r4, r5}
   10220:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
   10222:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
   10224:	str	r3, [r2, #0]
   10226:	b.n	101f8 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
   10228:	movs	r3, #132	; 0x84
   1022a:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
   1022c:	str	r3, [r2, #0]
   1022e:	b.n	10218 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
   10230:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
   10234:	ldr	r1, [pc, #60]	; (10274 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
   10236:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
   10238:	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
   1023a:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
   1023c:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
   1023e:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
   10240:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
   10242:	str	r3, [r1, #0]
   10244:	b.n	101e8 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
   10246:	movs	r2, #57	; 0x39
   10248:	b.n	1023a <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
   1024a:	movs	r3, #133	; 0x85
   1024c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
   1024e:	str	r3, [r2, #0]
   10250:	b.n	10218 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
   10252:	movs	r3, #128	; 0x80
   10254:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
   10256:	str	r3, [r2, #0]
   10258:	b.n	10218 <analog_init+0x64>
   1025a:	nop
   1025c:	.word	0x40074000
   10260:	.word	0x40074001
   10264:	.word	0x1fff09e1
   10268:	.word	0x4003b008
   1026c:	.word	0x4003b00c
   10270:	.word	0x400bb008
   10274:	.word	0x400bb00c
   10278:	.word	0x1fff2676
   1027c:	.word	0x4003b020
   10280:	.word	0x400bb020
   10284:	.word	0x1fff09e2
   10288:	.word	0x4003b024
   1028c:	.word	0x400bb024
   10290:	.word	0x1fff2675

00010294 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	__disable_irq();
   10294:	cpsid	i
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
   10296:	ldr	r2, [pc, #96]	; (102f8 <usb_init_serialnumber+0x64>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
   10298:	ldr	r3, [pc, #96]	; (102fc <usb_init_serialnumber+0x68>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
   1029a:	ldr	r1, [pc, #100]	; (10300 <usb_init_serialnumber+0x6c>)
   1029c:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
   1029e:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
   102a0:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
   102a2:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
   102a4:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
   102a6:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
   102a8:	ldrb	r3, [r2, #0]
   102aa:	lsls	r3, r3, #24
   102ac:	bpl.n	102a8 <usb_init_serialnumber+0x14>
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
   102ae:	push	{r4, lr}
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
   102b0:	ldr	r3, [pc, #80]	; (10304 <usb_init_serialnumber+0x70>)
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
   102b2:	sub	sp, #16
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
   102b4:	ldr	r0, [r3, #0]
	kinetis_hsrun_enable();
#endif
	__enable_irq();
   102b6:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
   102b8:	ldr	r3, [pc, #76]	; (10308 <usb_init_serialnumber+0x74>)
   102ba:	ldr	r4, [pc, #80]	; (1030c <usb_init_serialnumber+0x78>)
   102bc:	cmp	r0, r3
   102be:	it	ls
   102c0:	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
   102c4:	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
   102c6:	it	ls
   102c8:	lslls	r0, r0, #1
	ultoa(num, buf, 10);
   102ca:	movs	r2, #10
   102cc:	bl	10310 <ultoa>
   102d0:	add	r1, sp, #4
   102d2:	mov	r0, r4
	for (i=0; i<10; i++) {
   102d4:	movs	r3, #0
		char c = buf[i];
   102d6:	ldrb.w	r2, [r1], #1
   102da:	adds	r3, #1
		if (!c) break;
   102dc:	cbz	r2, 102ee <usb_init_serialnumber+0x5a>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
   102de:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
   102e0:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
   102e4:	bne.n	102d6 <usb_init_serialnumber+0x42>
   102e6:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
   102e8:	strb	r3, [r4, #0]
}
   102ea:	add	sp, #16
   102ec:	pop	{r4, pc}
   102ee:	lsls	r3, r3, #1
   102f0:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
   102f2:	strb	r3, [r4, #0]
}
   102f4:	add	sp, #16
   102f6:	pop	{r4, pc}
   102f8:	.word	0x40020004
   102fc:	.word	0x40020000
   10300:	.word	0x41070000
   10304:	.word	0x4002000c
   10308:	.word	0x0098967f
   1030c:	.word	0x1fff0ab8

00010310 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
   10310:	push	{r4, r5, r6, r7}
   10312:	subs	r5, r1, #1
   10314:	mov	r6, r5
	unsigned digit;
	int i=0, j;
   10316:	movs	r4, #0
   10318:	b.n	1031c <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
   1031a:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
   1031c:	udiv	r3, r0, r2
   10320:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   10324:	cmp	r0, #9
   10326:	add.w	r7, r0, #48	; 0x30
   1032a:	itet	hi
   1032c:	addhi	r0, #55	; 0x37
   1032e:	uxtbls	r0, r7
   10330:	uxtbhi	r0, r0
   10332:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
   10336:	mov	r0, r3
   10338:	cmp	r3, #0
   1033a:	bne.n	1031a <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
   1033c:	adds	r2, r1, r4
   1033e:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
   10340:	cbz	r4, 10356 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
   10342:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
   10344:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
   10348:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
   1034a:	adds	r3, #1
   1034c:	subs	r0, r4, r3
   1034e:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
   10350:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
   10354:	blt.n	10342 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
   10356:	mov	r0, r1
   10358:	pop	{r4, r5, r6, r7}
   1035a:	bx	lr

0001035c <__aeabi_atexit>:
   1035c:	mov	r3, r1
   1035e:	mov	r1, r0
   10360:	mov	r0, r3
   10362:	b.w	10fc8 <__cxa_atexit>
   10366:	nop

00010368 <__aeabi_drsub>:
   10368:	eor.w	r1, r1, #2147483648	; 0x80000000
   1036c:	b.n	10374 <__adddf3>
   1036e:	nop

00010370 <__aeabi_dsub>:
   10370:	eor.w	r3, r3, #2147483648	; 0x80000000

00010374 <__adddf3>:
   10374:	push	{r4, r5, lr}
   10376:	mov.w	r4, r1, lsl #1
   1037a:	mov.w	r5, r3, lsl #1
   1037e:	teq	r4, r5
   10382:	it	eq
   10384:	teqeq	r0, r2
   10388:	itttt	ne
   1038a:	orrsne.w	ip, r4, r0
   1038e:	orrsne.w	ip, r5, r2
   10392:	mvnsne.w	ip, r4, asr #21
   10396:	mvnsne.w	ip, r5, asr #21
   1039a:	beq.w	10562 <__adddf3+0x1ee>
   1039e:	mov.w	r4, r4, lsr #21
   103a2:	rsbs	r5, r4, r5, lsr #21
   103a6:	it	lt
   103a8:	neglt	r5, r5
   103aa:	ble.n	103c6 <__adddf3+0x52>
   103ac:	add	r4, r5
   103ae:	eor.w	r2, r0, r2
   103b2:	eor.w	r3, r1, r3
   103b6:	eor.w	r0, r2, r0
   103ba:	eor.w	r1, r3, r1
   103be:	eor.w	r2, r0, r2
   103c2:	eor.w	r3, r1, r3
   103c6:	cmp	r5, #54	; 0x36
   103c8:	it	hi
   103ca:	pophi	{r4, r5, pc}
   103cc:	tst.w	r1, #2147483648	; 0x80000000
   103d0:	mov.w	r1, r1, lsl #12
   103d4:	mov.w	ip, #1048576	; 0x100000
   103d8:	orr.w	r1, ip, r1, lsr #12
   103dc:	beq.n	103e4 <__adddf3+0x70>
   103de:	negs	r0, r0
   103e0:	sbc.w	r1, r1, r1, lsl #1
   103e4:	tst.w	r3, #2147483648	; 0x80000000
   103e8:	mov.w	r3, r3, lsl #12
   103ec:	orr.w	r3, ip, r3, lsr #12
   103f0:	beq.n	103f8 <__adddf3+0x84>
   103f2:	negs	r2, r2
   103f4:	sbc.w	r3, r3, r3, lsl #1
   103f8:	teq	r4, r5
   103fc:	beq.w	1054e <__adddf3+0x1da>
   10400:	sub.w	r4, r4, #1
   10404:	rsbs	lr, r5, #32
   10408:	blt.n	10426 <__adddf3+0xb2>
   1040a:	lsl.w	ip, r2, lr
   1040e:	lsr.w	r2, r2, r5
   10412:	adds	r0, r0, r2
   10414:	adc.w	r1, r1, #0
   10418:	lsl.w	r2, r3, lr
   1041c:	adds	r0, r0, r2
   1041e:	asr.w	r3, r3, r5
   10422:	adcs	r1, r3
   10424:	b.n	10444 <__adddf3+0xd0>
   10426:	sub.w	r5, r5, #32
   1042a:	add.w	lr, lr, #32
   1042e:	cmp	r2, #1
   10430:	lsl.w	ip, r3, lr
   10434:	it	cs
   10436:	orrcs.w	ip, ip, #2
   1043a:	asr.w	r3, r3, r5
   1043e:	adds	r0, r0, r3
   10440:	adcs.w	r1, r1, r3, asr #31
   10444:	and.w	r5, r1, #2147483648	; 0x80000000
   10448:	bpl.n	1045a <__adddf3+0xe6>
   1044a:	mov.w	lr, #0
   1044e:	rsbs	ip, ip, #0
   10452:	sbcs.w	r0, lr, r0
   10456:	sbc.w	r1, lr, r1
   1045a:	cmp.w	r1, #1048576	; 0x100000
   1045e:	bcc.n	10498 <__adddf3+0x124>
   10460:	cmp.w	r1, #2097152	; 0x200000
   10464:	bcc.n	10480 <__adddf3+0x10c>
   10466:	lsrs	r1, r1, #1
   10468:	movs.w	r0, r0, rrx
   1046c:	mov.w	ip, ip, rrx
   10470:	add.w	r4, r4, #1
   10474:	mov.w	r2, r4, lsl #21
   10478:	cmn.w	r2, #4194304	; 0x400000
   1047c:	bcs.w	105b4 <__adddf3+0x240>
   10480:	cmp.w	ip, #2147483648	; 0x80000000
   10484:	it	eq
   10486:	movseq.w	ip, r0, lsr #1
   1048a:	adcs.w	r0, r0, #0
   1048e:	adc.w	r1, r1, r4, lsl #20
   10492:	orr.w	r1, r1, r5
   10496:	pop	{r4, r5, pc}
   10498:	movs.w	ip, ip, lsl #1
   1049c:	adcs	r0, r0
   1049e:	adc.w	r1, r1, r1
   104a2:	tst.w	r1, #1048576	; 0x100000
   104a6:	sub.w	r4, r4, #1
   104aa:	bne.n	10480 <__adddf3+0x10c>
   104ac:	teq	r1, #0
   104b0:	itt	eq
   104b2:	moveq	r1, r0
   104b4:	moveq	r0, #0
   104b6:	clz	r3, r1
   104ba:	it	eq
   104bc:	addeq	r3, #32
   104be:	sub.w	r3, r3, #11
   104c2:	subs.w	r2, r3, #32
   104c6:	bge.n	104e2 <__adddf3+0x16e>
   104c8:	adds	r2, #12
   104ca:	ble.n	104de <__adddf3+0x16a>
   104cc:	add.w	ip, r2, #20
   104d0:	rsb	r2, r2, #12
   104d4:	lsl.w	r0, r1, ip
   104d8:	lsr.w	r1, r1, r2
   104dc:	b.n	104f8 <__adddf3+0x184>
   104de:	add.w	r2, r2, #20
   104e2:	it	le
   104e4:	rsble	ip, r2, #32
   104e8:	lsl.w	r1, r1, r2
   104ec:	lsr.w	ip, r0, ip
   104f0:	itt	le
   104f2:	orrle.w	r1, r1, ip
   104f6:	lslle	r0, r2
   104f8:	subs	r4, r4, r3
   104fa:	ittt	ge
   104fc:	addge.w	r1, r1, r4, lsl #20
   10500:	orrge	r1, r5
   10502:	popge	{r4, r5, pc}
   10504:	mvn.w	r4, r4
   10508:	subs	r4, #31
   1050a:	bge.n	10546 <__adddf3+0x1d2>
   1050c:	adds	r4, #12
   1050e:	bgt.n	1052e <__adddf3+0x1ba>
   10510:	add.w	r4, r4, #20
   10514:	rsb	r2, r4, #32
   10518:	lsr.w	r0, r0, r4
   1051c:	lsl.w	r3, r1, r2
   10520:	orr.w	r0, r0, r3
   10524:	lsr.w	r3, r1, r4
   10528:	orr.w	r1, r5, r3
   1052c:	pop	{r4, r5, pc}
   1052e:	rsb	r4, r4, #12
   10532:	rsb	r2, r4, #32
   10536:	lsr.w	r0, r0, r2
   1053a:	lsl.w	r3, r1, r4
   1053e:	orr.w	r0, r0, r3
   10542:	mov	r1, r5
   10544:	pop	{r4, r5, pc}
   10546:	lsr.w	r0, r1, r4
   1054a:	mov	r1, r5
   1054c:	pop	{r4, r5, pc}
   1054e:	teq	r4, #0
   10552:	eor.w	r3, r3, #1048576	; 0x100000
   10556:	itte	eq
   10558:	eoreq.w	r1, r1, #1048576	; 0x100000
   1055c:	addeq	r4, #1
   1055e:	subne	r5, #1
   10560:	b.n	10400 <__adddf3+0x8c>
   10562:	mvns.w	ip, r4, asr #21
   10566:	it	ne
   10568:	mvnsne.w	ip, r5, asr #21
   1056c:	beq.n	105c2 <__adddf3+0x24e>
   1056e:	teq	r4, r5
   10572:	it	eq
   10574:	teqeq	r0, r2
   10578:	beq.n	10586 <__adddf3+0x212>
   1057a:	orrs.w	ip, r4, r0
   1057e:	itt	eq
   10580:	moveq	r1, r3
   10582:	moveq	r0, r2
   10584:	pop	{r4, r5, pc}
   10586:	teq	r1, r3
   1058a:	ittt	ne
   1058c:	movne	r1, #0
   1058e:	movne	r0, #0
   10590:	popne	{r4, r5, pc}
   10592:	movs.w	ip, r4, lsr #21
   10596:	bne.n	105a4 <__adddf3+0x230>
   10598:	lsls	r0, r0, #1
   1059a:	adcs	r1, r1
   1059c:	it	cs
   1059e:	orrcs.w	r1, r1, #2147483648	; 0x80000000
   105a2:	pop	{r4, r5, pc}
   105a4:	adds.w	r4, r4, #4194304	; 0x400000
   105a8:	itt	cc
   105aa:	addcc.w	r1, r1, #1048576	; 0x100000
   105ae:	popcc	{r4, r5, pc}
   105b0:	and.w	r5, r1, #2147483648	; 0x80000000
   105b4:	orr.w	r1, r5, #2130706432	; 0x7f000000
   105b8:	orr.w	r1, r1, #15728640	; 0xf00000
   105bc:	mov.w	r0, #0
   105c0:	pop	{r4, r5, pc}
   105c2:	mvns.w	ip, r4, asr #21
   105c6:	itte	ne
   105c8:	movne	r1, r3
   105ca:	movne	r0, r2
   105cc:	mvnseq.w	ip, r5, asr #21
   105d0:	itt	ne
   105d2:	movne	r3, r1
   105d4:	movne	r2, r0
   105d6:	orrs.w	r4, r0, r1, lsl #12
   105da:	itte	eq
   105dc:	orrseq.w	r5, r2, r3, lsl #12
   105e0:	teqeq	r1, r3
   105e4:	orrne.w	r1, r1, #524288	; 0x80000
   105e8:	pop	{r4, r5, pc}
   105ea:	nop

000105ec <__aeabi_ui2d>:
   105ec:	teq	r0, #0
   105f0:	itt	eq
   105f2:	moveq	r1, #0
   105f4:	bxeq	lr
   105f6:	push	{r4, r5, lr}
   105f8:	mov.w	r4, #1024	; 0x400
   105fc:	add.w	r4, r4, #50	; 0x32
   10600:	mov.w	r5, #0
   10604:	mov.w	r1, #0
   10608:	b.n	104ac <__adddf3+0x138>
   1060a:	nop

0001060c <__aeabi_i2d>:
   1060c:	teq	r0, #0
   10610:	itt	eq
   10612:	moveq	r1, #0
   10614:	bxeq	lr
   10616:	push	{r4, r5, lr}
   10618:	mov.w	r4, #1024	; 0x400
   1061c:	add.w	r4, r4, #50	; 0x32
   10620:	ands.w	r5, r0, #2147483648	; 0x80000000
   10624:	it	mi
   10626:	negmi	r0, r0
   10628:	mov.w	r1, #0
   1062c:	b.n	104ac <__adddf3+0x138>
   1062e:	nop

00010630 <__aeabi_f2d>:
   10630:	lsls	r2, r0, #1
   10632:	mov.w	r1, r2, asr #3
   10636:	mov.w	r1, r1, rrx
   1063a:	mov.w	r0, r2, lsl #28
   1063e:	itttt	ne
   10640:	andsne.w	r3, r2, #4278190080	; 0xff000000
   10644:	teqne	r3, #4278190080	; 0xff000000
   10648:	eorne.w	r1, r1, #939524096	; 0x38000000
   1064c:	bxne	lr
   1064e:	teq	r2, #0
   10652:	ite	ne
   10654:	teqne	r3, #4278190080	; 0xff000000
   10658:	bxeq	lr
   1065a:	push	{r4, r5, lr}
   1065c:	mov.w	r4, #896	; 0x380
   10660:	and.w	r5, r1, #2147483648	; 0x80000000
   10664:	bic.w	r1, r1, #2147483648	; 0x80000000
   10668:	b.n	104ac <__adddf3+0x138>
   1066a:	nop

0001066c <__aeabi_ul2d>:
   1066c:	orrs.w	r2, r0, r1
   10670:	it	eq
   10672:	bxeq	lr
   10674:	push	{r4, r5, lr}
   10676:	mov.w	r5, #0
   1067a:	b.n	10692 <__aeabi_l2d+0x16>

0001067c <__aeabi_l2d>:
   1067c:	orrs.w	r2, r0, r1
   10680:	it	eq
   10682:	bxeq	lr
   10684:	push	{r4, r5, lr}
   10686:	ands.w	r5, r1, #2147483648	; 0x80000000
   1068a:	bpl.n	10692 <__aeabi_l2d+0x16>
   1068c:	negs	r0, r0
   1068e:	sbc.w	r1, r1, r1, lsl #1
   10692:	mov.w	r4, #1024	; 0x400
   10696:	add.w	r4, r4, #50	; 0x32
   1069a:	movs.w	ip, r1, lsr #22
   1069e:	beq.w	1045a <__adddf3+0xe6>
   106a2:	mov.w	r2, #3
   106a6:	movs.w	ip, ip, lsr #3
   106aa:	it	ne
   106ac:	addne	r2, #3
   106ae:	movs.w	ip, ip, lsr #3
   106b2:	it	ne
   106b4:	addne	r2, #3
   106b6:	add.w	r2, r2, ip, lsr #3
   106ba:	rsb	r3, r2, #32
   106be:	lsl.w	ip, r0, r3
   106c2:	lsr.w	r0, r0, r2
   106c6:	lsl.w	lr, r1, r3
   106ca:	orr.w	r0, r0, lr
   106ce:	lsr.w	r1, r1, r2
   106d2:	add	r4, r2
   106d4:	b.n	1045a <__adddf3+0xe6>
   106d6:	nop

000106d8 <__aeabi_dmul>:
   106d8:	push	{r4, r5, r6, lr}
   106da:	mov.w	ip, #255	; 0xff
   106de:	orr.w	ip, ip, #1792	; 0x700
   106e2:	ands.w	r4, ip, r1, lsr #20
   106e6:	ittte	ne
   106e8:	andsne.w	r5, ip, r3, lsr #20
   106ec:	teqne	r4, ip
   106f0:	teqne	r5, ip
   106f4:	bleq	108b4 <__aeabi_dmul+0x1dc>
   106f8:	add	r4, r5
   106fa:	eor.w	r6, r1, r3
   106fe:	bic.w	r1, r1, ip, lsl #21
   10702:	bic.w	r3, r3, ip, lsl #21
   10706:	orrs.w	r5, r0, r1, lsl #12
   1070a:	it	ne
   1070c:	orrsne.w	r5, r2, r3, lsl #12
   10710:	orr.w	r1, r1, #1048576	; 0x100000
   10714:	orr.w	r3, r3, #1048576	; 0x100000
   10718:	beq.n	1078c <__aeabi_dmul+0xb4>
   1071a:	umull	ip, lr, r0, r2
   1071e:	mov.w	r5, #0
   10722:	umlal	lr, r5, r1, r2
   10726:	and.w	r2, r6, #2147483648	; 0x80000000
   1072a:	umlal	lr, r5, r0, r3
   1072e:	mov.w	r6, #0
   10732:	umlal	r5, r6, r1, r3
   10736:	teq	ip, #0
   1073a:	it	ne
   1073c:	orrne.w	lr, lr, #1
   10740:	sub.w	r4, r4, #255	; 0xff
   10744:	cmp.w	r6, #512	; 0x200
   10748:	sbc.w	r4, r4, #768	; 0x300
   1074c:	bcs.n	10758 <__aeabi_dmul+0x80>
   1074e:	movs.w	lr, lr, lsl #1
   10752:	adcs	r5, r5
   10754:	adc.w	r6, r6, r6
   10758:	orr.w	r1, r2, r6, lsl #11
   1075c:	orr.w	r1, r1, r5, lsr #21
   10760:	mov.w	r0, r5, lsl #11
   10764:	orr.w	r0, r0, lr, lsr #21
   10768:	mov.w	lr, lr, lsl #11
   1076c:	subs.w	ip, r4, #253	; 0xfd
   10770:	it	hi
   10772:	cmphi.w	ip, #1792	; 0x700
   10776:	bhi.n	107b6 <__aeabi_dmul+0xde>
   10778:	cmp.w	lr, #2147483648	; 0x80000000
   1077c:	it	eq
   1077e:	movseq.w	lr, r0, lsr #1
   10782:	adcs.w	r0, r0, #0
   10786:	adc.w	r1, r1, r4, lsl #20
   1078a:	pop	{r4, r5, r6, pc}
   1078c:	and.w	r6, r6, #2147483648	; 0x80000000
   10790:	orr.w	r1, r6, r1
   10794:	orr.w	r0, r0, r2
   10798:	eor.w	r1, r1, r3
   1079c:	subs.w	r4, r4, ip, lsr #1
   107a0:	ittt	gt
   107a2:	rsbsgt	r5, r4, ip
   107a6:	orrgt.w	r1, r1, r4, lsl #20
   107aa:	popgt	{r4, r5, r6, pc}
   107ac:	orr.w	r1, r1, #1048576	; 0x100000
   107b0:	mov.w	lr, #0
   107b4:	subs	r4, #1
   107b6:	bgt.w	10910 <__aeabi_dmul+0x238>
   107ba:	cmn.w	r4, #54	; 0x36
   107be:	ittt	le
   107c0:	movle	r0, #0
   107c2:	andle.w	r1, r1, #2147483648	; 0x80000000
   107c6:	pople	{r4, r5, r6, pc}
   107c8:	rsb	r4, r4, #0
   107cc:	subs	r4, #32
   107ce:	bge.n	1083c <__aeabi_dmul+0x164>
   107d0:	adds	r4, #12
   107d2:	bgt.n	1080c <__aeabi_dmul+0x134>
   107d4:	add.w	r4, r4, #20
   107d8:	rsb	r5, r4, #32
   107dc:	lsl.w	r3, r0, r5
   107e0:	lsr.w	r0, r0, r4
   107e4:	lsl.w	r2, r1, r5
   107e8:	orr.w	r0, r0, r2
   107ec:	and.w	r2, r1, #2147483648	; 0x80000000
   107f0:	bic.w	r1, r1, #2147483648	; 0x80000000
   107f4:	adds.w	r0, r0, r3, lsr #31
   107f8:	lsr.w	r6, r1, r4
   107fc:	adc.w	r1, r2, r6
   10800:	orrs.w	lr, lr, r3, lsl #1
   10804:	it	eq
   10806:	biceq.w	r0, r0, r3, lsr #31
   1080a:	pop	{r4, r5, r6, pc}
   1080c:	rsb	r4, r4, #12
   10810:	rsb	r5, r4, #32
   10814:	lsl.w	r3, r0, r4
   10818:	lsr.w	r0, r0, r5
   1081c:	lsl.w	r2, r1, r4
   10820:	orr.w	r0, r0, r2
   10824:	and.w	r1, r1, #2147483648	; 0x80000000
   10828:	adds.w	r0, r0, r3, lsr #31
   1082c:	adc.w	r1, r1, #0
   10830:	orrs.w	lr, lr, r3, lsl #1
   10834:	it	eq
   10836:	biceq.w	r0, r0, r3, lsr #31
   1083a:	pop	{r4, r5, r6, pc}
   1083c:	rsb	r5, r4, #32
   10840:	lsl.w	r2, r0, r5
   10844:	orr.w	lr, lr, r2
   10848:	lsr.w	r3, r0, r4
   1084c:	lsl.w	r2, r1, r5
   10850:	orr.w	r3, r3, r2
   10854:	lsr.w	r0, r1, r4
   10858:	and.w	r1, r1, #2147483648	; 0x80000000
   1085c:	lsr.w	r2, r1, r4
   10860:	bic.w	r0, r0, r2
   10864:	add.w	r0, r0, r3, lsr #31
   10868:	orrs.w	lr, lr, r3, lsl #1
   1086c:	it	eq
   1086e:	biceq.w	r0, r0, r3, lsr #31
   10872:	pop	{r4, r5, r6, pc}
   10874:	teq	r4, #0
   10878:	bne.n	1089a <__aeabi_dmul+0x1c2>
   1087a:	and.w	r6, r1, #2147483648	; 0x80000000
   1087e:	lsls	r0, r0, #1
   10880:	adc.w	r1, r1, r1
   10884:	tst.w	r1, #1048576	; 0x100000
   10888:	it	eq
   1088a:	subeq	r4, #1
   1088c:	beq.n	1087e <__aeabi_dmul+0x1a6>
   1088e:	orr.w	r1, r1, r6
   10892:	teq	r5, #0
   10896:	it	ne
   10898:	bxne	lr
   1089a:	and.w	r6, r3, #2147483648	; 0x80000000
   1089e:	lsls	r2, r2, #1
   108a0:	adc.w	r3, r3, r3
   108a4:	tst.w	r3, #1048576	; 0x100000
   108a8:	it	eq
   108aa:	subeq	r5, #1
   108ac:	beq.n	1089e <__aeabi_dmul+0x1c6>
   108ae:	orr.w	r3, r3, r6
   108b2:	bx	lr
   108b4:	teq	r4, ip
   108b8:	and.w	r5, ip, r3, lsr #20
   108bc:	it	ne
   108be:	teqne	r5, ip
   108c2:	beq.n	108de <__aeabi_dmul+0x206>
   108c4:	orrs.w	r6, r0, r1, lsl #1
   108c8:	it	ne
   108ca:	orrsne.w	r6, r2, r3, lsl #1
   108ce:	bne.n	10874 <__aeabi_dmul+0x19c>
   108d0:	eor.w	r1, r1, r3
   108d4:	and.w	r1, r1, #2147483648	; 0x80000000
   108d8:	mov.w	r0, #0
   108dc:	pop	{r4, r5, r6, pc}
   108de:	orrs.w	r6, r0, r1, lsl #1
   108e2:	itte	eq
   108e4:	moveq	r0, r2
   108e6:	moveq	r1, r3
   108e8:	orrsne.w	r6, r2, r3, lsl #1
   108ec:	beq.n	10922 <__aeabi_dmul+0x24a>
   108ee:	teq	r4, ip
   108f2:	bne.n	108fa <__aeabi_dmul+0x222>
   108f4:	orrs.w	r6, r0, r1, lsl #12
   108f8:	bne.n	10922 <__aeabi_dmul+0x24a>
   108fa:	teq	r5, ip
   108fe:	bne.n	1090c <__aeabi_dmul+0x234>
   10900:	orrs.w	r6, r2, r3, lsl #12
   10904:	itt	ne
   10906:	movne	r0, r2
   10908:	movne	r1, r3
   1090a:	bne.n	10922 <__aeabi_dmul+0x24a>
   1090c:	eor.w	r1, r1, r3
   10910:	and.w	r1, r1, #2147483648	; 0x80000000
   10914:	orr.w	r1, r1, #2130706432	; 0x7f000000
   10918:	orr.w	r1, r1, #15728640	; 0xf00000
   1091c:	mov.w	r0, #0
   10920:	pop	{r4, r5, r6, pc}
   10922:	orr.w	r1, r1, #2130706432	; 0x7f000000
   10926:	orr.w	r1, r1, #16252928	; 0xf80000
   1092a:	pop	{r4, r5, r6, pc}

0001092c <__aeabi_ddiv>:
   1092c:	push	{r4, r5, r6, lr}
   1092e:	mov.w	ip, #255	; 0xff
   10932:	orr.w	ip, ip, #1792	; 0x700
   10936:	ands.w	r4, ip, r1, lsr #20
   1093a:	ittte	ne
   1093c:	andsne.w	r5, ip, r3, lsr #20
   10940:	teqne	r4, ip
   10944:	teqne	r5, ip
   10948:	bleq	10a9a <__aeabi_ddiv+0x16e>
   1094c:	sub.w	r4, r4, r5
   10950:	eor.w	lr, r1, r3
   10954:	orrs.w	r5, r2, r3, lsl #12
   10958:	mov.w	r1, r1, lsl #12
   1095c:	beq.w	10a70 <__aeabi_ddiv+0x144>
   10960:	mov.w	r3, r3, lsl #12
   10964:	mov.w	r5, #268435456	; 0x10000000
   10968:	orr.w	r3, r5, r3, lsr #4
   1096c:	orr.w	r3, r3, r2, lsr #24
   10970:	mov.w	r2, r2, lsl #8
   10974:	orr.w	r5, r5, r1, lsr #4
   10978:	orr.w	r5, r5, r0, lsr #24
   1097c:	mov.w	r6, r0, lsl #8
   10980:	and.w	r1, lr, #2147483648	; 0x80000000
   10984:	cmp	r5, r3
   10986:	it	eq
   10988:	cmpeq	r6, r2
   1098a:	adc.w	r4, r4, #253	; 0xfd
   1098e:	add.w	r4, r4, #768	; 0x300
   10992:	bcs.n	1099a <__aeabi_ddiv+0x6e>
   10994:	lsrs	r3, r3, #1
   10996:	mov.w	r2, r2, rrx
   1099a:	subs	r6, r6, r2
   1099c:	sbc.w	r5, r5, r3
   109a0:	lsrs	r3, r3, #1
   109a2:	mov.w	r2, r2, rrx
   109a6:	mov.w	r0, #1048576	; 0x100000
   109aa:	mov.w	ip, #524288	; 0x80000
   109ae:	subs.w	lr, r6, r2
   109b2:	sbcs.w	lr, r5, r3
   109b6:	ittt	cs
   109b8:	subcs	r6, r6, r2
   109ba:	movcs	r5, lr
   109bc:	orrcs.w	r0, r0, ip
   109c0:	lsrs	r3, r3, #1
   109c2:	mov.w	r2, r2, rrx
   109c6:	subs.w	lr, r6, r2
   109ca:	sbcs.w	lr, r5, r3
   109ce:	ittt	cs
   109d0:	subcs	r6, r6, r2
   109d2:	movcs	r5, lr
   109d4:	orrcs.w	r0, r0, ip, lsr #1
   109d8:	lsrs	r3, r3, #1
   109da:	mov.w	r2, r2, rrx
   109de:	subs.w	lr, r6, r2
   109e2:	sbcs.w	lr, r5, r3
   109e6:	ittt	cs
   109e8:	subcs	r6, r6, r2
   109ea:	movcs	r5, lr
   109ec:	orrcs.w	r0, r0, ip, lsr #2
   109f0:	lsrs	r3, r3, #1
   109f2:	mov.w	r2, r2, rrx
   109f6:	subs.w	lr, r6, r2
   109fa:	sbcs.w	lr, r5, r3
   109fe:	ittt	cs
   10a00:	subcs	r6, r6, r2
   10a02:	movcs	r5, lr
   10a04:	orrcs.w	r0, r0, ip, lsr #3
   10a08:	orrs.w	lr, r5, r6
   10a0c:	beq.n	10a40 <__aeabi_ddiv+0x114>
   10a0e:	mov.w	r5, r5, lsl #4
   10a12:	orr.w	r5, r5, r6, lsr #28
   10a16:	mov.w	r6, r6, lsl #4
   10a1a:	mov.w	r3, r3, lsl #3
   10a1e:	orr.w	r3, r3, r2, lsr #29
   10a22:	mov.w	r2, r2, lsl #3
   10a26:	movs.w	ip, ip, lsr #4
   10a2a:	bne.n	109ae <__aeabi_ddiv+0x82>
   10a2c:	tst.w	r1, #1048576	; 0x100000
   10a30:	bne.n	10a4a <__aeabi_ddiv+0x11e>
   10a32:	orr.w	r1, r1, r0
   10a36:	mov.w	r0, #0
   10a3a:	mov.w	ip, #2147483648	; 0x80000000
   10a3e:	b.n	109ae <__aeabi_ddiv+0x82>
   10a40:	tst.w	r1, #1048576	; 0x100000
   10a44:	itt	eq
   10a46:	orreq	r1, r0
   10a48:	moveq	r0, #0
   10a4a:	subs.w	ip, r4, #253	; 0xfd
   10a4e:	it	hi
   10a50:	cmphi.w	ip, #1792	; 0x700
   10a54:	bhi.w	107b6 <__aeabi_dmul+0xde>
   10a58:	subs.w	ip, r5, r3
   10a5c:	itt	eq
   10a5e:	subseq.w	ip, r6, r2
   10a62:	movseq.w	ip, r0, lsr #1
   10a66:	adcs.w	r0, r0, #0
   10a6a:	adc.w	r1, r1, r4, lsl #20
   10a6e:	pop	{r4, r5, r6, pc}
   10a70:	and.w	lr, lr, #2147483648	; 0x80000000
   10a74:	orr.w	r1, lr, r1, lsr #12
   10a78:	adds.w	r4, r4, ip, lsr #1
   10a7c:	ittt	gt
   10a7e:	rsbsgt	r5, r4, ip
   10a82:	orrgt.w	r1, r1, r4, lsl #20
   10a86:	popgt	{r4, r5, r6, pc}
   10a88:	orr.w	r1, r1, #1048576	; 0x100000
   10a8c:	mov.w	lr, #0
   10a90:	subs	r4, #1
   10a92:	b.n	107b6 <__aeabi_dmul+0xde>
   10a94:	orr.w	lr, r5, r6
   10a98:	b.n	107b6 <__aeabi_dmul+0xde>
   10a9a:	and.w	r5, ip, r3, lsr #20
   10a9e:	teq	r4, ip
   10aa2:	it	eq
   10aa4:	teqeq	r5, ip
   10aa8:	beq.w	10922 <__aeabi_dmul+0x24a>
   10aac:	teq	r4, ip
   10ab0:	bne.n	10ac8 <__aeabi_ddiv+0x19c>
   10ab2:	orrs.w	r4, r0, r1, lsl #12
   10ab6:	bne.w	10922 <__aeabi_dmul+0x24a>
   10aba:	teq	r5, ip
   10abe:	bne.w	1090c <__aeabi_dmul+0x234>
   10ac2:	mov	r0, r2
   10ac4:	mov	r1, r3
   10ac6:	b.n	10922 <__aeabi_dmul+0x24a>
   10ac8:	teq	r5, ip
   10acc:	bne.n	10adc <__aeabi_ddiv+0x1b0>
   10ace:	orrs.w	r5, r2, r3, lsl #12
   10ad2:	beq.w	108d0 <__aeabi_dmul+0x1f8>
   10ad6:	mov	r0, r2
   10ad8:	mov	r1, r3
   10ada:	b.n	10922 <__aeabi_dmul+0x24a>
   10adc:	orrs.w	r6, r0, r1, lsl #1
   10ae0:	it	ne
   10ae2:	orrsne.w	r6, r2, r3, lsl #1
   10ae6:	bne.w	10874 <__aeabi_dmul+0x19c>
   10aea:	orrs.w	r4, r0, r1, lsl #1
   10aee:	bne.w	1090c <__aeabi_dmul+0x234>
   10af2:	orrs.w	r5, r2, r3, lsl #1
   10af6:	bne.w	108d0 <__aeabi_dmul+0x1f8>
   10afa:	b.n	10922 <__aeabi_dmul+0x24a>

00010afc <__gedf2>:
   10afc:	mov.w	ip, #4294967295
   10b00:	b.n	10b10 <__cmpdf2+0x4>
   10b02:	nop

00010b04 <__ledf2>:
   10b04:	mov.w	ip, #1
   10b08:	b.n	10b10 <__cmpdf2+0x4>
   10b0a:	nop

00010b0c <__cmpdf2>:
   10b0c:	mov.w	ip, #1
   10b10:	str.w	ip, [sp, #-4]!
   10b14:	mov.w	ip, r1, lsl #1
   10b18:	mvns.w	ip, ip, asr #21
   10b1c:	mov.w	ip, r3, lsl #1
   10b20:	it	ne
   10b22:	mvnsne.w	ip, ip, asr #21
   10b26:	beq.n	10b60 <__cmpdf2+0x54>
   10b28:	add	sp, #4
   10b2a:	orrs.w	ip, r0, r1, lsl #1
   10b2e:	ite	eq
   10b30:	orrseq.w	ip, r2, r3, lsl #1
   10b34:	teqne	r1, r3
   10b38:	ittt	eq
   10b3a:	teqeq	r0, r2
   10b3e:	moveq	r0, #0
   10b40:	bxeq	lr
   10b42:	cmn.w	r0, #0
   10b46:	teq	r1, r3
   10b4a:	it	pl
   10b4c:	cmppl	r1, r3
   10b4e:	it	eq
   10b50:	cmpeq	r0, r2
   10b52:	ite	cs
   10b54:	asrcs	r0, r3, #31
   10b56:	mvncc.w	r0, r3, asr #31
   10b5a:	orr.w	r0, r0, #1
   10b5e:	bx	lr
   10b60:	mov.w	ip, r1, lsl #1
   10b64:	mvns.w	ip, ip, asr #21
   10b68:	bne.n	10b70 <__cmpdf2+0x64>
   10b6a:	orrs.w	ip, r0, r1, lsl #12
   10b6e:	bne.n	10b80 <__cmpdf2+0x74>
   10b70:	mov.w	ip, r3, lsl #1
   10b74:	mvns.w	ip, ip, asr #21
   10b78:	bne.n	10b28 <__cmpdf2+0x1c>
   10b7a:	orrs.w	ip, r2, r3, lsl #12
   10b7e:	beq.n	10b28 <__cmpdf2+0x1c>
   10b80:	ldr.w	r0, [sp], #4
   10b84:	bx	lr
   10b86:	nop

00010b88 <__aeabi_cdrcmple>:
   10b88:	mov	ip, r0
   10b8a:	mov	r0, r2
   10b8c:	mov	r2, ip
   10b8e:	mov	ip, r1
   10b90:	mov	r1, r3
   10b92:	mov	r3, ip
   10b94:	b.n	10b98 <__aeabi_cdcmpeq>
   10b96:	nop

00010b98 <__aeabi_cdcmpeq>:
   10b98:	push	{r0, lr}
   10b9a:	bl	10b0c <__cmpdf2>
   10b9e:	cmp	r0, #0
   10ba0:	it	mi
   10ba2:	cmnmi.w	r0, #0
   10ba6:	pop	{r0, pc}

00010ba8 <__aeabi_dcmpeq>:
   10ba8:	str.w	lr, [sp, #-8]!
   10bac:	bl	10b98 <__aeabi_cdcmpeq>
   10bb0:	ite	eq
   10bb2:	moveq	r0, #1
   10bb4:	movne	r0, #0
   10bb6:	ldr.w	pc, [sp], #8
   10bba:	nop

00010bbc <__aeabi_dcmplt>:
   10bbc:	str.w	lr, [sp, #-8]!
   10bc0:	bl	10b98 <__aeabi_cdcmpeq>
   10bc4:	ite	cc
   10bc6:	movcc	r0, #1
   10bc8:	movcs	r0, #0
   10bca:	ldr.w	pc, [sp], #8
   10bce:	nop

00010bd0 <__aeabi_dcmple>:
   10bd0:	str.w	lr, [sp, #-8]!
   10bd4:	bl	10b98 <__aeabi_cdcmpeq>
   10bd8:	ite	ls
   10bda:	movls	r0, #1
   10bdc:	movhi	r0, #0
   10bde:	ldr.w	pc, [sp], #8
   10be2:	nop

00010be4 <__aeabi_dcmpge>:
   10be4:	str.w	lr, [sp, #-8]!
   10be8:	bl	10b88 <__aeabi_cdrcmple>
   10bec:	ite	ls
   10bee:	movls	r0, #1
   10bf0:	movhi	r0, #0
   10bf2:	ldr.w	pc, [sp], #8
   10bf6:	nop

00010bf8 <__aeabi_dcmpgt>:
   10bf8:	str.w	lr, [sp, #-8]!
   10bfc:	bl	10b88 <__aeabi_cdrcmple>
   10c00:	ite	cc
   10c02:	movcc	r0, #1
   10c04:	movcs	r0, #0
   10c06:	ldr.w	pc, [sp], #8
   10c0a:	nop

00010c0c <__aeabi_dcmpun>:
   10c0c:	mov.w	ip, r1, lsl #1
   10c10:	mvns.w	ip, ip, asr #21
   10c14:	bne.n	10c1c <__aeabi_dcmpun+0x10>
   10c16:	orrs.w	ip, r0, r1, lsl #12
   10c1a:	bne.n	10c32 <__aeabi_dcmpun+0x26>
   10c1c:	mov.w	ip, r3, lsl #1
   10c20:	mvns.w	ip, ip, asr #21
   10c24:	bne.n	10c2c <__aeabi_dcmpun+0x20>
   10c26:	orrs.w	ip, r2, r3, lsl #12
   10c2a:	bne.n	10c32 <__aeabi_dcmpun+0x26>
   10c2c:	mov.w	r0, #0
   10c30:	bx	lr
   10c32:	mov.w	r0, #1
   10c36:	bx	lr

00010c38 <__aeabi_d2iz>:
   10c38:	mov.w	r2, r1, lsl #1
   10c3c:	adds.w	r2, r2, #2097152	; 0x200000
   10c40:	bcs.n	10c6e <__aeabi_d2iz+0x36>
   10c42:	bpl.n	10c68 <__aeabi_d2iz+0x30>
   10c44:	mvn.w	r3, #992	; 0x3e0
   10c48:	subs.w	r2, r3, r2, asr #21
   10c4c:	bls.n	10c74 <__aeabi_d2iz+0x3c>
   10c4e:	mov.w	r3, r1, lsl #11
   10c52:	orr.w	r3, r3, #2147483648	; 0x80000000
   10c56:	orr.w	r3, r3, r0, lsr #21
   10c5a:	tst.w	r1, #2147483648	; 0x80000000
   10c5e:	lsr.w	r0, r3, r2
   10c62:	it	ne
   10c64:	negne	r0, r0
   10c66:	bx	lr
   10c68:	mov.w	r0, #0
   10c6c:	bx	lr
   10c6e:	orrs.w	r0, r0, r1, lsl #12
   10c72:	bne.n	10c80 <__aeabi_d2iz+0x48>
   10c74:	ands.w	r0, r1, #2147483648	; 0x80000000
   10c78:	it	eq
   10c7a:	mvneq.w	r0, #2147483648	; 0x80000000
   10c7e:	bx	lr
   10c80:	mov.w	r0, #0
   10c84:	bx	lr
   10c86:	nop

00010c88 <__aeabi_uldivmod>:
   10c88:	cbnz	r3, 10ca0 <__aeabi_uldivmod+0x18>
   10c8a:	cbnz	r2, 10ca0 <__aeabi_uldivmod+0x18>
   10c8c:	cmp	r1, #0
   10c8e:	it	eq
   10c90:	cmpeq	r0, #0
   10c92:	itt	ne
   10c94:	movne.w	r1, #4294967295
   10c98:	movne.w	r0, #4294967295
   10c9c:	b.w	10fc4 <__aeabi_idiv0>
   10ca0:	sub.w	ip, sp, #8
   10ca4:	strd	ip, lr, [sp, #-16]!
   10ca8:	bl	10ce0 <__udivmoddi4>
   10cac:	ldr.w	lr, [sp, #4]
   10cb0:	ldrd	r2, r3, [sp, #8]
   10cb4:	add	sp, #16
   10cb6:	bx	lr

00010cb8 <__popcountsi2>:
   10cb8:	lsrs	r3, r0, #1
   10cba:	and.w	r3, r3, #1431655765	; 0x55555555
   10cbe:	subs	r0, r0, r3
   10cc0:	lsrs	r3, r0, #2
   10cc2:	and.w	r3, r3, #858993459	; 0x33333333
   10cc6:	and.w	r0, r0, #858993459	; 0x33333333
   10cca:	add	r0, r3
   10ccc:	add.w	r0, r0, r0, lsr #4
   10cd0:	and.w	r0, r0, #252645135	; 0xf0f0f0f
   10cd4:	add.w	r0, r0, r0, lsl #8
   10cd8:	add.w	r0, r0, r0, lsl #16
   10cdc:	lsrs	r0, r0, #24
   10cde:	bx	lr

00010ce0 <__udivmoddi4>:
   10ce0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10ce4:	mov	ip, r1
   10ce6:	mov	r6, r1
   10ce8:	mov	r4, r0
   10cea:	ldr	r5, [sp, #32]
   10cec:	cmp	r3, #0
   10cee:	bne.n	10d92 <__udivmoddi4+0xb2>
   10cf0:	cmp	r2, r1
   10cf2:	mov	r7, r2
   10cf4:	bls.n	10dd0 <__udivmoddi4+0xf0>
   10cf6:	clz	lr, r2
   10cfa:	cmp.w	lr, #0
   10cfe:	beq.n	10d18 <__udivmoddi4+0x38>
   10d00:	rsb	r4, lr, #32
   10d04:	lsr.w	r4, r0, r4
   10d08:	lsl.w	r6, r1, lr
   10d0c:	orr.w	ip, r4, r6
   10d10:	lsl.w	r7, r2, lr
   10d14:	lsl.w	r4, r0, lr
   10d18:	mov.w	r9, r7, lsr #16
   10d1c:	lsrs	r2, r4, #16
   10d1e:	udiv	r0, ip, r9
   10d22:	uxth.w	r8, r7
   10d26:	mls	r6, r9, r0, ip
   10d2a:	orr.w	r6, r2, r6, lsl #16
   10d2e:	mul.w	r3, r0, r8
   10d32:	cmp	r3, r6
   10d34:	bls.n	10d4a <__udivmoddi4+0x6a>
   10d36:	adds	r6, r6, r7
   10d38:	add.w	r2, r0, #4294967295
   10d3c:	bcs.w	10f84 <__udivmoddi4+0x2a4>
   10d40:	cmp	r3, r6
   10d42:	bls.w	10f84 <__udivmoddi4+0x2a4>
   10d46:	subs	r0, #2
   10d48:	add	r6, r7
   10d4a:	subs	r6, r6, r3
   10d4c:	uxth	r2, r4
   10d4e:	udiv	r3, r6, r9
   10d52:	mls	r6, r9, r3, r6
   10d56:	orr.w	r4, r2, r6, lsl #16
   10d5a:	mul.w	r8, r3, r8
   10d5e:	cmp	r8, r4
   10d60:	bls.n	10d76 <__udivmoddi4+0x96>
   10d62:	adds	r4, r4, r7
   10d64:	add.w	r2, r3, #4294967295
   10d68:	bcs.w	10f80 <__udivmoddi4+0x2a0>
   10d6c:	cmp	r8, r4
   10d6e:	bls.w	10f80 <__udivmoddi4+0x2a0>
   10d72:	subs	r3, #2
   10d74:	add	r4, r7
   10d76:	rsb	r4, r8, r4
   10d7a:	orr.w	r0, r3, r0, lsl #16
   10d7e:	movs	r1, #0
   10d80:	cmp	r5, #0
   10d82:	beq.n	10e4a <__udivmoddi4+0x16a>
   10d84:	lsr.w	r4, r4, lr
   10d88:	movs	r3, #0
   10d8a:	str	r4, [r5, #0]
   10d8c:	str	r3, [r5, #4]
   10d8e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10d92:	cmp	r3, r1
   10d94:	bls.n	10da6 <__udivmoddi4+0xc6>
   10d96:	cmp	r5, #0
   10d98:	beq.n	10e46 <__udivmoddi4+0x166>
   10d9a:	movs	r1, #0
   10d9c:	stmia.w	r5, {r0, r6}
   10da0:	mov	r0, r1
   10da2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10da6:	clz	r1, r3
   10daa:	cmp	r1, #0
   10dac:	bne.w	10ed0 <__udivmoddi4+0x1f0>
   10db0:	cmp	r3, r6
   10db2:	bcc.n	10dba <__udivmoddi4+0xda>
   10db4:	cmp	r2, r0
   10db6:	bhi.w	10faa <__udivmoddi4+0x2ca>
   10dba:	subs	r4, r0, r2
   10dbc:	sbc.w	r6, r6, r3
   10dc0:	movs	r0, #1
   10dc2:	mov	ip, r6
   10dc4:	cmp	r5, #0
   10dc6:	beq.n	10e4a <__udivmoddi4+0x16a>
   10dc8:	stmia.w	r5, {r4, ip}
   10dcc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10dd0:	cbnz	r2, 10dd8 <__udivmoddi4+0xf8>
   10dd2:	movs	r7, #1
   10dd4:	udiv	r7, r7, r2
   10dd8:	clz	lr, r7
   10ddc:	cmp.w	lr, #0
   10de0:	bne.n	10e4e <__udivmoddi4+0x16e>
   10de2:	subs	r3, r6, r7
   10de4:	mov.w	r8, r7, lsr #16
   10de8:	uxth.w	ip, r7
   10dec:	movs	r1, #1
   10dee:	udiv	r0, r3, r8
   10df2:	lsrs	r2, r4, #16
   10df4:	mls	r6, r8, r0, r3
   10df8:	orr.w	r6, r2, r6, lsl #16
   10dfc:	mul.w	r3, ip, r0
   10e00:	cmp	r3, r6
   10e02:	bls.n	10e14 <__udivmoddi4+0x134>
   10e04:	adds	r6, r6, r7
   10e06:	add.w	r2, r0, #4294967295
   10e0a:	bcs.n	10e12 <__udivmoddi4+0x132>
   10e0c:	cmp	r3, r6
   10e0e:	bhi.w	10fae <__udivmoddi4+0x2ce>
   10e12:	mov	r0, r2
   10e14:	subs	r6, r6, r3
   10e16:	uxth	r2, r4
   10e18:	udiv	r3, r6, r8
   10e1c:	mls	r6, r8, r3, r6
   10e20:	orr.w	r4, r2, r6, lsl #16
   10e24:	mul.w	ip, ip, r3
   10e28:	cmp	ip, r4
   10e2a:	bls.n	10e3c <__udivmoddi4+0x15c>
   10e2c:	adds	r4, r4, r7
   10e2e:	add.w	r2, r3, #4294967295
   10e32:	bcs.n	10e3a <__udivmoddi4+0x15a>
   10e34:	cmp	ip, r4
   10e36:	bhi.w	10fa4 <__udivmoddi4+0x2c4>
   10e3a:	mov	r3, r2
   10e3c:	rsb	r4, ip, r4
   10e40:	orr.w	r0, r3, r0, lsl #16
   10e44:	b.n	10d80 <__udivmoddi4+0xa0>
   10e46:	mov	r1, r5
   10e48:	mov	r0, r5
   10e4a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10e4e:	rsb	r1, lr, #32
   10e52:	lsl.w	r3, r6, lr
   10e56:	lsl.w	r7, r7, lr
   10e5a:	lsr.w	r9, r0, r1
   10e5e:	mov.w	r8, r7, lsr #16
   10e62:	lsrs	r6, r1
   10e64:	orr.w	r9, r9, r3
   10e68:	udiv	sl, r6, r8
   10e6c:	mov.w	r4, r9, lsr #16
   10e70:	mls	r6, r8, sl, r6
   10e74:	uxth.w	ip, r7
   10e78:	orr.w	r3, r4, r6, lsl #16
   10e7c:	mul.w	r2, sl, ip
   10e80:	cmp	r2, r3
   10e82:	lsl.w	r4, r0, lr
   10e86:	bls.n	10e9e <__udivmoddi4+0x1be>
   10e88:	adds	r3, r3, r7
   10e8a:	add.w	r1, sl, #4294967295
   10e8e:	bcs.w	10fa0 <__udivmoddi4+0x2c0>
   10e92:	cmp	r2, r3
   10e94:	bls.w	10fa0 <__udivmoddi4+0x2c0>
   10e98:	sub.w	sl, sl, #2
   10e9c:	add	r3, r7
   10e9e:	subs	r3, r3, r2
   10ea0:	uxth.w	r9, r9
   10ea4:	udiv	r1, r3, r8
   10ea8:	mls	r3, r8, r1, r3
   10eac:	orr.w	r3, r9, r3, lsl #16
   10eb0:	mul.w	r6, r1, ip
   10eb4:	cmp	r6, r3
   10eb6:	bls.n	10ec8 <__udivmoddi4+0x1e8>
   10eb8:	adds	r3, r3, r7
   10eba:	add.w	r2, r1, #4294967295
   10ebe:	bcs.n	10f98 <__udivmoddi4+0x2b8>
   10ec0:	cmp	r6, r3
   10ec2:	bls.n	10f98 <__udivmoddi4+0x2b8>
   10ec4:	subs	r1, #2
   10ec6:	add	r3, r7
   10ec8:	subs	r3, r3, r6
   10eca:	orr.w	r1, r1, sl, lsl #16
   10ece:	b.n	10dee <__udivmoddi4+0x10e>
   10ed0:	rsb	lr, r1, #32
   10ed4:	lsr.w	r4, r2, lr
   10ed8:	lsls	r3, r1
   10eda:	orrs	r3, r4
   10edc:	lsr.w	r7, r0, lr
   10ee0:	lsl.w	r4, r6, r1
   10ee4:	mov.w	ip, r3, lsr #16
   10ee8:	lsr.w	r6, r6, lr
   10eec:	orrs	r4, r7
   10eee:	udiv	r9, r6, ip
   10ef2:	lsrs	r7, r4, #16
   10ef4:	mls	r6, ip, r9, r6
   10ef8:	uxth.w	r8, r3
   10efc:	orr.w	r6, r7, r6, lsl #16
   10f00:	mul.w	r7, r9, r8
   10f04:	cmp	r7, r6
   10f06:	lsl.w	r2, r2, r1
   10f0a:	lsl.w	sl, r0, r1
   10f0e:	bls.n	10f22 <__udivmoddi4+0x242>
   10f10:	adds	r6, r6, r3
   10f12:	add.w	r0, r9, #4294967295
   10f16:	bcs.n	10f9c <__udivmoddi4+0x2bc>
   10f18:	cmp	r7, r6
   10f1a:	bls.n	10f9c <__udivmoddi4+0x2bc>
   10f1c:	sub.w	r9, r9, #2
   10f20:	add	r6, r3
   10f22:	subs	r6, r6, r7
   10f24:	uxth	r0, r4
   10f26:	udiv	r4, r6, ip
   10f2a:	mls	r6, ip, r4, r6
   10f2e:	orr.w	r7, r0, r6, lsl #16
   10f32:	mul.w	r8, r4, r8
   10f36:	cmp	r8, r7
   10f38:	bls.n	10f4a <__udivmoddi4+0x26a>
   10f3a:	adds	r7, r7, r3
   10f3c:	add.w	r0, r4, #4294967295
   10f40:	bcs.n	10f94 <__udivmoddi4+0x2b4>
   10f42:	cmp	r8, r7
   10f44:	bls.n	10f94 <__udivmoddi4+0x2b4>
   10f46:	subs	r4, #2
   10f48:	add	r7, r3
   10f4a:	orr.w	r0, r4, r9, lsl #16
   10f4e:	rsb	r7, r8, r7
   10f52:	umull	r8, r9, r0, r2
   10f56:	cmp	r7, r9
   10f58:	mov	r4, r8
   10f5a:	mov	r6, r9
   10f5c:	bcc.n	10f88 <__udivmoddi4+0x2a8>
   10f5e:	beq.n	10fb4 <__udivmoddi4+0x2d4>
   10f60:	cbz	r5, 10fbc <__udivmoddi4+0x2dc>
   10f62:	subs.w	r3, sl, r4
   10f66:	sbc.w	r7, r7, r6
   10f6a:	lsl.w	lr, r7, lr
   10f6e:	lsrs	r3, r1
   10f70:	lsrs	r7, r1
   10f72:	orr.w	r3, lr, r3
   10f76:	stmia.w	r5, {r3, r7}
   10f7a:	movs	r1, #0
   10f7c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10f80:	mov	r3, r2
   10f82:	b.n	10d76 <__udivmoddi4+0x96>
   10f84:	mov	r0, r2
   10f86:	b.n	10d4a <__udivmoddi4+0x6a>
   10f88:	subs.w	r4, r8, r2
   10f8c:	sbc.w	r6, r9, r3
   10f90:	subs	r0, #1
   10f92:	b.n	10f60 <__udivmoddi4+0x280>
   10f94:	mov	r4, r0
   10f96:	b.n	10f4a <__udivmoddi4+0x26a>
   10f98:	mov	r1, r2
   10f9a:	b.n	10ec8 <__udivmoddi4+0x1e8>
   10f9c:	mov	r9, r0
   10f9e:	b.n	10f22 <__udivmoddi4+0x242>
   10fa0:	mov	sl, r1
   10fa2:	b.n	10e9e <__udivmoddi4+0x1be>
   10fa4:	subs	r3, #2
   10fa6:	add	r4, r7
   10fa8:	b.n	10e3c <__udivmoddi4+0x15c>
   10faa:	mov	r0, r1
   10fac:	b.n	10dc4 <__udivmoddi4+0xe4>
   10fae:	subs	r0, #2
   10fb0:	add	r6, r7
   10fb2:	b.n	10e14 <__udivmoddi4+0x134>
   10fb4:	cmp	sl, r8
   10fb6:	bcc.n	10f88 <__udivmoddi4+0x2a8>
   10fb8:	mov	r6, r7
   10fba:	b.n	10f60 <__udivmoddi4+0x280>
   10fbc:	mov	r1, r5
   10fbe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10fc2:	nop

00010fc4 <__aeabi_idiv0>:
   10fc4:	bx	lr
   10fc6:	nop

00010fc8 <__cxa_atexit>:
   10fc8:	mov	r3, r2
   10fca:	mov	r2, r1
   10fcc:	mov	r1, r0
   10fce:	movs	r0, #2
   10fd0:	b.w	13ba8 <__register_exitproc>

00010fd4 <__errno>:
   10fd4:	ldr	r3, [pc, #4]	; (10fdc <__errno+0x8>)
   10fd6:	ldr	r0, [r3, #0]
   10fd8:	bx	lr
   10fda:	nop
   10fdc:	.word	0x1fff0ef8

00010fe0 <__libc_init_array>:
   10fe0:	push	{r4, r5, r6, lr}
   10fe2:	ldr	r6, [pc, #60]	; (11020 <__libc_init_array+0x40>)
   10fe4:	ldr	r5, [pc, #60]	; (11024 <__libc_init_array+0x44>)
   10fe6:	subs	r6, r6, r5
   10fe8:	asrs	r6, r6, #2
   10fea:	it	ne
   10fec:	movne	r4, #0
   10fee:	beq.n	10ffc <__libc_init_array+0x1c>
   10ff0:	adds	r4, #1
   10ff2:	ldr.w	r3, [r5], #4
   10ff6:	blx	r3
   10ff8:	cmp	r6, r4
   10ffa:	bne.n	10ff0 <__libc_init_array+0x10>
   10ffc:	ldr	r6, [pc, #40]	; (11028 <__libc_init_array+0x48>)
   10ffe:	ldr	r5, [pc, #44]	; (1102c <__libc_init_array+0x4c>)
   11000:	subs	r6, r6, r5
   11002:	bl	1610c <_init>
   11006:	asrs	r6, r6, #2
   11008:	it	ne
   1100a:	movne	r4, #0
   1100c:	beq.n	1101c <__libc_init_array+0x3c>
   1100e:	adds	r4, #1
   11010:	ldr.w	r3, [r5], #4
   11014:	blx	r3
   11016:	cmp	r6, r4
   11018:	bne.n	1100e <__libc_init_array+0x2e>
   1101a:	pop	{r4, r5, r6, pc}
   1101c:	pop	{r4, r5, r6, pc}
   1101e:	nop
   11020:	.word	0x00016118
   11024:	.word	0x00016118
   11028:	.word	0x00016128
   1102c:	.word	0x00016118

00011030 <malloc>:
   11030:	ldr	r3, [pc, #8]	; (1103c <malloc+0xc>)
   11032:	mov	r1, r0
   11034:	ldr	r0, [r3, #0]
   11036:	b.w	11050 <_malloc_r>
   1103a:	nop
   1103c:	.word	0x1fff0ef8

00011040 <free>:
   11040:	ldr	r3, [pc, #8]	; (1104c <free+0xc>)
   11042:	mov	r1, r0
   11044:	ldr	r0, [r3, #0]
   11046:	b.w	14c90 <_free_r>
   1104a:	nop
   1104c:	.word	0x1fff0ef8

00011050 <_malloc_r>:
   11050:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11054:	add.w	r5, r1, #11
   11058:	cmp	r5, #22
   1105a:	sub	sp, #12
   1105c:	mov	r6, r0
   1105e:	bls.w	111a0 <_malloc_r+0x150>
   11062:	bics.w	r5, r5, #7
   11066:	bmi.w	111e8 <_malloc_r+0x198>
   1106a:	cmp	r1, r5
   1106c:	bhi.w	111e8 <_malloc_r+0x198>
   11070:	bl	11858 <__malloc_lock>
   11074:	cmp.w	r5, #504	; 0x1f8
   11078:	bcc.w	115b4 <_malloc_r+0x564>
   1107c:	lsrs	r3, r5, #9
   1107e:	beq.w	111f6 <_malloc_r+0x1a6>
   11082:	cmp	r3, #4
   11084:	bhi.w	1138e <_malloc_r+0x33e>
   11088:	lsrs	r0, r5, #6
   1108a:	add.w	lr, r0, #57	; 0x39
   1108e:	mov.w	r3, lr, lsl #1
   11092:	adds	r0, #56	; 0x38
   11094:	ldr	r7, [pc, #784]	; (113a8 <_malloc_r+0x358>)
   11096:	add.w	r3, r7, r3, lsl #2
   1109a:	sub.w	r1, r3, #8
   1109e:	ldr	r4, [r3, #4]
   110a0:	cmp	r1, r4
   110a2:	bne.n	110b4 <_malloc_r+0x64>
   110a4:	b.n	11200 <_malloc_r+0x1b0>
   110a6:	cmp	r2, #0
   110a8:	bge.w	11204 <_malloc_r+0x1b4>
   110ac:	ldr	r4, [r4, #12]
   110ae:	cmp	r1, r4
   110b0:	beq.w	11200 <_malloc_r+0x1b0>
   110b4:	ldr	r3, [r4, #4]
   110b6:	bic.w	r3, r3, #3
   110ba:	subs	r2, r3, r5
   110bc:	cmp	r2, #15
   110be:	ble.n	110a6 <_malloc_r+0x56>
   110c0:	ldr	r1, [pc, #740]	; (113a8 <_malloc_r+0x358>)
   110c2:	ldr	r4, [r7, #16]
   110c4:	add.w	lr, r1, #8
   110c8:	cmp	r4, lr
   110ca:	beq.w	11434 <_malloc_r+0x3e4>
   110ce:	ldr	r3, [r4, #4]
   110d0:	bic.w	r3, r3, #3
   110d4:	subs	r2, r3, r5
   110d6:	cmp	r2, #15
   110d8:	bgt.w	1140e <_malloc_r+0x3be>
   110dc:	cmp	r2, #0
   110de:	str.w	lr, [r1, #20]
   110e2:	str.w	lr, [r1, #16]
   110e6:	bge.w	11226 <_malloc_r+0x1d6>
   110ea:	cmp.w	r3, #512	; 0x200
   110ee:	bcs.w	113c0 <_malloc_r+0x370>
   110f2:	lsrs	r3, r3, #3
   110f4:	add.w	ip, r3, #1
   110f8:	movs	r2, #1
   110fa:	asrs	r3, r3, #2
   110fc:	lsl.w	r3, r2, r3
   11100:	ldr	r2, [r1, #4]
   11102:	ldr.w	r8, [r1, ip, lsl #3]
   11106:	str.w	r8, [r4, #8]
   1110a:	add.w	r9, r1, ip, lsl #3
   1110e:	orrs	r2, r3
   11110:	sub.w	r3, r9, #8
   11114:	str	r3, [r4, #12]
   11116:	str	r2, [r1, #4]
   11118:	str.w	r4, [r1, ip, lsl #3]
   1111c:	str.w	r4, [r8, #12]
   11120:	asrs	r3, r0, #2
   11122:	movs	r4, #1
   11124:	lsls	r4, r3
   11126:	cmp	r4, r2
   11128:	bhi.w	11240 <_malloc_r+0x1f0>
   1112c:	tst	r4, r2
   1112e:	bne.n	1113e <_malloc_r+0xee>
   11130:	bic.w	r0, r0, #3
   11134:	lsls	r4, r4, #1
   11136:	tst	r4, r2
   11138:	add.w	r0, r0, #4
   1113c:	beq.n	11134 <_malloc_r+0xe4>
   1113e:	add.w	r9, r7, r0, lsl #3
   11142:	mov	ip, r9
   11144:	mov	r8, r0
   11146:	ldr.w	r1, [ip, #12]
   1114a:	cmp	ip, r1
   1114c:	bne.n	1115e <_malloc_r+0x10e>
   1114e:	b.n	11438 <_malloc_r+0x3e8>
   11150:	cmp	r2, #0
   11152:	bge.w	11458 <_malloc_r+0x408>
   11156:	ldr	r1, [r1, #12]
   11158:	cmp	ip, r1
   1115a:	beq.w	11438 <_malloc_r+0x3e8>
   1115e:	ldr	r3, [r1, #4]
   11160:	bic.w	r3, r3, #3
   11164:	subs	r2, r3, r5
   11166:	cmp	r2, #15
   11168:	ble.n	11150 <_malloc_r+0x100>
   1116a:	mov	r4, r1
   1116c:	ldr.w	ip, [r1, #12]
   11170:	ldr.w	r8, [r4, #8]!
   11174:	adds	r3, r1, r5
   11176:	orr.w	r5, r5, #1
   1117a:	str	r5, [r1, #4]
   1117c:	orr.w	r1, r2, #1
   11180:	str.w	ip, [r8, #12]
   11184:	mov	r0, r6
   11186:	str.w	r8, [ip, #8]
   1118a:	str	r3, [r7, #20]
   1118c:	str	r3, [r7, #16]
   1118e:	str.w	lr, [r3, #12]
   11192:	str.w	lr, [r3, #8]
   11196:	str	r1, [r3, #4]
   11198:	str	r2, [r3, r2]
   1119a:	bl	1185c <__malloc_unlock>
   1119e:	b.n	111e0 <_malloc_r+0x190>
   111a0:	cmp	r1, #16
   111a2:	bhi.n	111e8 <_malloc_r+0x198>
   111a4:	bl	11858 <__malloc_lock>
   111a8:	movs	r5, #16
   111aa:	movs	r3, #6
   111ac:	movs	r0, #2
   111ae:	ldr	r7, [pc, #504]	; (113a8 <_malloc_r+0x358>)
   111b0:	add.w	r3, r7, r3, lsl #2
   111b4:	sub.w	r2, r3, #8
   111b8:	ldr	r4, [r3, #4]
   111ba:	cmp	r4, r2
   111bc:	beq.w	1144a <_malloc_r+0x3fa>
   111c0:	ldr	r3, [r4, #4]
   111c2:	ldr	r1, [r4, #12]
   111c4:	ldr	r5, [r4, #8]
   111c6:	bic.w	r3, r3, #3
   111ca:	add	r3, r4
   111cc:	mov	r0, r6
   111ce:	ldr	r2, [r3, #4]
   111d0:	str	r1, [r5, #12]
   111d2:	orr.w	r2, r2, #1
   111d6:	str	r5, [r1, #8]
   111d8:	str	r2, [r3, #4]
   111da:	bl	1185c <__malloc_unlock>
   111de:	adds	r4, #8
   111e0:	mov	r0, r4
   111e2:	add	sp, #12
   111e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   111e8:	movs	r4, #0
   111ea:	movs	r3, #12
   111ec:	mov	r0, r4
   111ee:	str	r3, [r6, #0]
   111f0:	add	sp, #12
   111f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   111f6:	movs	r3, #128	; 0x80
   111f8:	mov.w	lr, #64	; 0x40
   111fc:	movs	r0, #63	; 0x3f
   111fe:	b.n	11094 <_malloc_r+0x44>
   11200:	mov	r0, lr
   11202:	b.n	110c0 <_malloc_r+0x70>
   11204:	add	r3, r4
   11206:	ldr	r1, [r4, #12]
   11208:	ldr	r2, [r3, #4]
   1120a:	ldr	r5, [r4, #8]
   1120c:	orr.w	r2, r2, #1
   11210:	str	r1, [r5, #12]
   11212:	mov	r0, r6
   11214:	str	r5, [r1, #8]
   11216:	str	r2, [r3, #4]
   11218:	bl	1185c <__malloc_unlock>
   1121c:	adds	r4, #8
   1121e:	mov	r0, r4
   11220:	add	sp, #12
   11222:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11226:	add	r3, r4
   11228:	mov	r0, r6
   1122a:	ldr	r2, [r3, #4]
   1122c:	orr.w	r2, r2, #1
   11230:	str	r2, [r3, #4]
   11232:	bl	1185c <__malloc_unlock>
   11236:	adds	r4, #8
   11238:	mov	r0, r4
   1123a:	add	sp, #12
   1123c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11240:	ldr	r4, [r7, #8]
   11242:	ldr	r3, [r4, #4]
   11244:	bic.w	r8, r3, #3
   11248:	cmp	r8, r5
   1124a:	bcc.n	11256 <_malloc_r+0x206>
   1124c:	rsb	r3, r5, r8
   11250:	cmp	r3, #15
   11252:	bgt.w	1136e <_malloc_r+0x31e>
   11256:	ldr	r3, [pc, #340]	; (113ac <_malloc_r+0x35c>)
   11258:	ldr.w	r9, [pc, #352]	; 113bc <_malloc_r+0x36c>
   1125c:	ldr	r2, [r3, #0]
   1125e:	ldr.w	r3, [r9]
   11262:	adds	r3, #1
   11264:	add	r2, r5
   11266:	add.w	sl, r4, r8
   1126a:	beq.w	1152e <_malloc_r+0x4de>
   1126e:	add.w	r2, r2, #4096	; 0x1000
   11272:	adds	r2, #15
   11274:	bic.w	r2, r2, #4080	; 0xff0
   11278:	bic.w	r2, r2, #15
   1127c:	mov	r1, r2
   1127e:	mov	r0, r6
   11280:	str	r2, [sp, #4]
   11282:	bl	11c40 <_sbrk_r>
   11286:	cmp.w	r0, #4294967295
   1128a:	mov	fp, r0
   1128c:	ldr	r2, [sp, #4]
   1128e:	beq.w	11542 <_malloc_r+0x4f2>
   11292:	cmp	sl, r0
   11294:	bhi.w	11490 <_malloc_r+0x440>
   11298:	ldr	r3, [pc, #276]	; (113b0 <_malloc_r+0x360>)
   1129a:	ldr	r1, [r3, #0]
   1129c:	cmp	sl, fp
   1129e:	add	r1, r2
   112a0:	str	r1, [r3, #0]
   112a2:	beq.w	1154c <_malloc_r+0x4fc>
   112a6:	ldr.w	r0, [r9]
   112aa:	ldr.w	lr, [pc, #272]	; 113bc <_malloc_r+0x36c>
   112ae:	adds	r0, #1
   112b0:	ittet	ne
   112b2:	rsbne	sl, sl, fp
   112b6:	addne	r1, sl
   112b8:	streq.w	fp, [lr]
   112bc:	strne	r1, [r3, #0]
   112be:	ands.w	r1, fp, #7
   112c2:	beq.w	114f4 <_malloc_r+0x4a4>
   112c6:	rsb	r0, r1, #8
   112ca:	rsb	r1, r1, #4096	; 0x1000
   112ce:	add	fp, r0
   112d0:	adds	r1, #8
   112d2:	add	r2, fp
   112d4:	ubfx	r2, r2, #0, #12
   112d8:	rsb	r9, r2, r1
   112dc:	mov	r1, r9
   112de:	mov	r0, r6
   112e0:	str	r3, [sp, #4]
   112e2:	bl	11c40 <_sbrk_r>
   112e6:	adds	r3, r0, #1
   112e8:	ldr	r3, [sp, #4]
   112ea:	beq.w	1156c <_malloc_r+0x51c>
   112ee:	rsb	r2, fp, r0
   112f2:	add	r2, r9
   112f4:	orr.w	r2, r2, #1
   112f8:	ldr	r1, [r3, #0]
   112fa:	str.w	fp, [r7, #8]
   112fe:	add	r1, r9
   11300:	cmp	r4, r7
   11302:	str.w	r2, [fp, #4]
   11306:	str	r1, [r3, #0]
   11308:	ldr.w	r9, [pc, #164]	; 113b0 <_malloc_r+0x360>
   1130c:	beq.n	1133c <_malloc_r+0x2ec>
   1130e:	cmp.w	r8, #15
   11312:	bls.w	11510 <_malloc_r+0x4c0>
   11316:	ldr	r2, [r4, #4]
   11318:	sub.w	r3, r8, #12
   1131c:	bic.w	r3, r3, #7
   11320:	adds	r0, r4, r3
   11322:	and.w	r2, r2, #1
   11326:	mov.w	lr, #5
   1132a:	orrs	r2, r3
   1132c:	cmp	r3, #15
   1132e:	str	r2, [r4, #4]
   11330:	str.w	lr, [r0, #4]
   11334:	str.w	lr, [r0, #8]
   11338:	bhi.w	11574 <_malloc_r+0x524>
   1133c:	ldr	r3, [pc, #116]	; (113b4 <_malloc_r+0x364>)
   1133e:	ldr	r4, [r7, #8]
   11340:	ldr	r2, [r3, #0]
   11342:	cmp	r1, r2
   11344:	it	hi
   11346:	strhi	r1, [r3, #0]
   11348:	ldr	r3, [pc, #108]	; (113b8 <_malloc_r+0x368>)
   1134a:	ldr	r2, [r3, #0]
   1134c:	cmp	r1, r2
   1134e:	ldr	r2, [r4, #4]
   11350:	it	hi
   11352:	strhi	r1, [r3, #0]
   11354:	bic.w	r2, r2, #3
   11358:	cmp	r5, r2
   1135a:	sub.w	r3, r2, r5
   1135e:	bhi.n	11364 <_malloc_r+0x314>
   11360:	cmp	r3, #15
   11362:	bgt.n	1136e <_malloc_r+0x31e>
   11364:	mov	r0, r6
   11366:	bl	1185c <__malloc_unlock>
   1136a:	movs	r4, #0
   1136c:	b.n	111e0 <_malloc_r+0x190>
   1136e:	adds	r2, r4, r5
   11370:	orr.w	r3, r3, #1
   11374:	orr.w	r5, r5, #1
   11378:	str	r5, [r4, #4]
   1137a:	mov	r0, r6
   1137c:	str	r2, [r7, #8]
   1137e:	str	r3, [r2, #4]
   11380:	bl	1185c <__malloc_unlock>
   11384:	adds	r4, #8
   11386:	mov	r0, r4
   11388:	add	sp, #12
   1138a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1138e:	cmp	r3, #20
   11390:	bls.n	11476 <_malloc_r+0x426>
   11392:	cmp	r3, #84	; 0x54
   11394:	bhi.w	114e0 <_malloc_r+0x490>
   11398:	lsrs	r0, r5, #12
   1139a:	add.w	lr, r0, #111	; 0x6f
   1139e:	mov.w	r3, lr, lsl #1
   113a2:	adds	r0, #110	; 0x6e
   113a4:	b.n	11094 <_malloc_r+0x44>
   113a6:	nop
   113a8:	.word	0x1fff1068
   113ac:	.word	0x1fff2680
   113b0:	.word	0x1fff2684
   113b4:	.word	0x1fff267c
   113b8:	.word	0x1fff2678
   113bc:	.word	0x1fff1474
   113c0:	lsrs	r2, r3, #9
   113c2:	cmp	r2, #4
   113c4:	bls.n	11484 <_malloc_r+0x434>
   113c6:	cmp	r2, #20
   113c8:	bhi.w	11532 <_malloc_r+0x4e2>
   113cc:	add.w	r1, r2, #92	; 0x5c
   113d0:	lsls	r1, r1, #1
   113d2:	adds	r2, #91	; 0x5b
   113d4:	add.w	ip, r7, r1, lsl #2
   113d8:	ldr.w	r1, [r7, r1, lsl #2]
   113dc:	ldr.w	r8, [pc, #476]	; 115bc <_malloc_r+0x56c>
   113e0:	sub.w	ip, ip, #8
   113e4:	cmp	ip, r1
   113e6:	beq.w	114fa <_malloc_r+0x4aa>
   113ea:	ldr	r2, [r1, #4]
   113ec:	bic.w	r2, r2, #3
   113f0:	cmp	r3, r2
   113f2:	bcs.n	113fa <_malloc_r+0x3aa>
   113f4:	ldr	r1, [r1, #8]
   113f6:	cmp	ip, r1
   113f8:	bne.n	113ea <_malloc_r+0x39a>
   113fa:	ldr.w	ip, [r1, #12]
   113fe:	ldr	r2, [r7, #4]
   11400:	str.w	ip, [r4, #12]
   11404:	str	r1, [r4, #8]
   11406:	str.w	r4, [ip, #8]
   1140a:	str	r4, [r1, #12]
   1140c:	b.n	11120 <_malloc_r+0xd0>
   1140e:	adds	r3, r4, r5
   11410:	orr.w	r7, r2, #1
   11414:	orr.w	r5, r5, #1
   11418:	str	r5, [r4, #4]
   1141a:	mov	r0, r6
   1141c:	str	r3, [r1, #20]
   1141e:	str	r3, [r1, #16]
   11420:	str.w	lr, [r3, #12]
   11424:	str.w	lr, [r3, #8]
   11428:	str	r7, [r3, #4]
   1142a:	str	r2, [r3, r2]
   1142c:	adds	r4, #8
   1142e:	bl	1185c <__malloc_unlock>
   11432:	b.n	111e0 <_malloc_r+0x190>
   11434:	ldr	r2, [r1, #4]
   11436:	b.n	11120 <_malloc_r+0xd0>
   11438:	add.w	r8, r8, #1
   1143c:	tst.w	r8, #3
   11440:	add.w	ip, ip, #8
   11444:	bne.w	11146 <_malloc_r+0xf6>
   11448:	b.n	114ac <_malloc_r+0x45c>
   1144a:	ldr	r4, [r3, #12]
   1144c:	cmp	r3, r4
   1144e:	it	eq
   11450:	addeq	r0, #2
   11452:	beq.w	110c0 <_malloc_r+0x70>
   11456:	b.n	111c0 <_malloc_r+0x170>
   11458:	add	r3, r1
   1145a:	mov	r4, r1
   1145c:	ldr	r2, [r3, #4]
   1145e:	ldr	r1, [r1, #12]
   11460:	ldr.w	r5, [r4, #8]!
   11464:	orr.w	r2, r2, #1
   11468:	str	r2, [r3, #4]
   1146a:	mov	r0, r6
   1146c:	str	r1, [r5, #12]
   1146e:	str	r5, [r1, #8]
   11470:	bl	1185c <__malloc_unlock>
   11474:	b.n	111e0 <_malloc_r+0x190>
   11476:	add.w	lr, r3, #92	; 0x5c
   1147a:	add.w	r0, r3, #91	; 0x5b
   1147e:	mov.w	r3, lr, lsl #1
   11482:	b.n	11094 <_malloc_r+0x44>
   11484:	lsrs	r2, r3, #6
   11486:	add.w	r1, r2, #57	; 0x39
   1148a:	lsls	r1, r1, #1
   1148c:	adds	r2, #56	; 0x38
   1148e:	b.n	113d4 <_malloc_r+0x384>
   11490:	cmp	r4, r7
   11492:	ldr	r3, [pc, #296]	; (115bc <_malloc_r+0x56c>)
   11494:	beq.w	11298 <_malloc_r+0x248>
   11498:	ldr	r4, [r3, #8]
   1149a:	ldr	r2, [r4, #4]
   1149c:	bic.w	r2, r2, #3
   114a0:	b.n	11358 <_malloc_r+0x308>
   114a2:	ldr.w	r3, [r9], #-8
   114a6:	cmp	r9, r3
   114a8:	bne.w	115b0 <_malloc_r+0x560>
   114ac:	tst.w	r0, #3
   114b0:	add.w	r0, r0, #4294967295
   114b4:	bne.n	114a2 <_malloc_r+0x452>
   114b6:	ldr	r3, [r7, #4]
   114b8:	bic.w	r3, r3, r4
   114bc:	str	r3, [r7, #4]
   114be:	lsls	r4, r4, #1
   114c0:	cmp	r4, r3
   114c2:	bhi.w	11240 <_malloc_r+0x1f0>
   114c6:	cmp	r4, #0
   114c8:	beq.w	11240 <_malloc_r+0x1f0>
   114cc:	tst	r4, r3
   114ce:	mov	r0, r8
   114d0:	bne.w	1113e <_malloc_r+0xee>
   114d4:	lsls	r4, r4, #1
   114d6:	tst	r4, r3
   114d8:	add.w	r0, r0, #4
   114dc:	beq.n	114d4 <_malloc_r+0x484>
   114de:	b.n	1113e <_malloc_r+0xee>
   114e0:	cmp.w	r3, #340	; 0x154
   114e4:	bhi.n	11518 <_malloc_r+0x4c8>
   114e6:	lsrs	r0, r5, #15
   114e8:	add.w	lr, r0, #120	; 0x78
   114ec:	mov.w	r3, lr, lsl #1
   114f0:	adds	r0, #119	; 0x77
   114f2:	b.n	11094 <_malloc_r+0x44>
   114f4:	mov.w	r1, #4096	; 0x1000
   114f8:	b.n	112d2 <_malloc_r+0x282>
   114fa:	movs	r1, #1
   114fc:	ldr.w	r3, [r8, #4]
   11500:	asrs	r2, r2, #2
   11502:	lsl.w	r2, r1, r2
   11506:	orrs	r2, r3
   11508:	str.w	r2, [r8, #4]
   1150c:	mov	r1, ip
   1150e:	b.n	11400 <_malloc_r+0x3b0>
   11510:	movs	r3, #1
   11512:	str.w	r3, [fp, #4]
   11516:	b.n	11364 <_malloc_r+0x314>
   11518:	movw	r2, #1364	; 0x554
   1151c:	cmp	r3, r2
   1151e:	bhi.n	11562 <_malloc_r+0x512>
   11520:	lsrs	r0, r5, #18
   11522:	add.w	lr, r0, #125	; 0x7d
   11526:	mov.w	r3, lr, lsl #1
   1152a:	adds	r0, #124	; 0x7c
   1152c:	b.n	11094 <_malloc_r+0x44>
   1152e:	adds	r2, #16
   11530:	b.n	1127c <_malloc_r+0x22c>
   11532:	cmp	r2, #84	; 0x54
   11534:	bhi.n	11584 <_malloc_r+0x534>
   11536:	lsrs	r2, r3, #12
   11538:	add.w	r1, r2, #111	; 0x6f
   1153c:	lsls	r1, r1, #1
   1153e:	adds	r2, #110	; 0x6e
   11540:	b.n	113d4 <_malloc_r+0x384>
   11542:	ldr	r4, [r7, #8]
   11544:	ldr	r2, [r4, #4]
   11546:	bic.w	r2, r2, #3
   1154a:	b.n	11358 <_malloc_r+0x308>
   1154c:	ubfx	r0, sl, #0, #12
   11550:	cmp	r0, #0
   11552:	bne.w	112a6 <_malloc_r+0x256>
   11556:	add	r2, r8
   11558:	ldr	r3, [r7, #8]
   1155a:	orr.w	r2, r2, #1
   1155e:	str	r2, [r3, #4]
   11560:	b.n	1133c <_malloc_r+0x2ec>
   11562:	movs	r3, #254	; 0xfe
   11564:	mov.w	lr, #127	; 0x7f
   11568:	movs	r0, #126	; 0x7e
   1156a:	b.n	11094 <_malloc_r+0x44>
   1156c:	movs	r2, #1
   1156e:	mov.w	r9, #0
   11572:	b.n	112f8 <_malloc_r+0x2a8>
   11574:	add.w	r1, r4, #8
   11578:	mov	r0, r6
   1157a:	bl	14c90 <_free_r>
   1157e:	ldr.w	r1, [r9]
   11582:	b.n	1133c <_malloc_r+0x2ec>
   11584:	cmp.w	r2, #340	; 0x154
   11588:	bhi.n	11596 <_malloc_r+0x546>
   1158a:	lsrs	r2, r3, #15
   1158c:	add.w	r1, r2, #120	; 0x78
   11590:	lsls	r1, r1, #1
   11592:	adds	r2, #119	; 0x77
   11594:	b.n	113d4 <_malloc_r+0x384>
   11596:	movw	r1, #1364	; 0x554
   1159a:	cmp	r2, r1
   1159c:	bhi.n	115aa <_malloc_r+0x55a>
   1159e:	lsrs	r2, r3, #18
   115a0:	add.w	r1, r2, #125	; 0x7d
   115a4:	lsls	r1, r1, #1
   115a6:	adds	r2, #124	; 0x7c
   115a8:	b.n	113d4 <_malloc_r+0x384>
   115aa:	movs	r1, #254	; 0xfe
   115ac:	movs	r2, #126	; 0x7e
   115ae:	b.n	113d4 <_malloc_r+0x384>
   115b0:	ldr	r3, [r7, #4]
   115b2:	b.n	114be <_malloc_r+0x46e>
   115b4:	lsrs	r0, r5, #3
   115b6:	adds	r3, r0, #1
   115b8:	lsls	r3, r3, #1
   115ba:	b.n	111ae <_malloc_r+0x15e>
   115bc:	.word	0x1fff1068

000115c0 <__ascii_mbtowc>:
   115c0:	sub	sp, #8
   115c2:	cbz	r1, 115d8 <__ascii_mbtowc+0x18>
   115c4:	cbz	r2, 115de <__ascii_mbtowc+0x1e>
   115c6:	cbz	r3, 115e4 <__ascii_mbtowc+0x24>
   115c8:	ldrb	r3, [r2, #0]
   115ca:	str	r3, [r1, #0]
   115cc:	ldrb	r2, [r2, #0]
   115ce:	adds	r0, r2, #0
   115d0:	it	ne
   115d2:	movne	r0, #1
   115d4:	add	sp, #8
   115d6:	bx	lr
   115d8:	add	r1, sp, #4
   115da:	cmp	r2, #0
   115dc:	bne.n	115c6 <__ascii_mbtowc+0x6>
   115de:	mov	r0, r2
   115e0:	add	sp, #8
   115e2:	bx	lr
   115e4:	mvn.w	r0, #1
   115e8:	b.n	115d4 <__ascii_mbtowc+0x14>
   115ea:	nop
   115ec:			; <UNDEFINED> instruction: 0xffffffff

000115f0 <memchr>:
   115f0:	and.w	r1, r1, #255	; 0xff
   115f4:	cmp	r2, #16
   115f6:	blt.n	11650 <memchr+0x60>
   115f8:	tst.w	r0, #7
   115fc:	beq.n	11610 <memchr+0x20>
   115fe:	ldrb.w	r3, [r0], #1
   11602:	subs	r2, #1
   11604:	cmp	r3, r1
   11606:	beq.n	11664 <memchr+0x74>
   11608:	tst.w	r0, #7
   1160c:	cbz	r2, 11660 <memchr+0x70>
   1160e:	bne.n	115fe <memchr+0xe>
   11610:	push	{r4, r5, r6, r7}
   11612:	orr.w	r1, r1, r1, lsl #8
   11616:	orr.w	r1, r1, r1, lsl #16
   1161a:	bic.w	r4, r2, #7
   1161e:	mvns.w	r7, #0
   11622:	movs	r3, #0
   11624:	ldrd	r5, r6, [r0], #8
   11628:	subs	r4, #8
   1162a:	eor.w	r5, r5, r1
   1162e:	eor.w	r6, r6, r1
   11632:	uadd8	r5, r5, r7
   11636:	sel	r5, r3, r7
   1163a:	uadd8	r6, r6, r7
   1163e:	sel	r6, r5, r7
   11642:	cbnz	r6, 11668 <memchr+0x78>
   11644:	bne.n	11624 <memchr+0x34>
   11646:	pop	{r4, r5, r6, r7}
   11648:	and.w	r1, r1, #255	; 0xff
   1164c:	and.w	r2, r2, #7
   11650:	cbz	r2, 11660 <memchr+0x70>
   11652:	ldrb.w	r3, [r0], #1
   11656:	subs	r2, #1
   11658:	eor.w	r3, r3, r1
   1165c:	cbz	r3, 11664 <memchr+0x74>
   1165e:	bne.n	11652 <memchr+0x62>
   11660:	movs	r0, #0
   11662:	bx	lr
   11664:	subs	r0, #1
   11666:	bx	lr
   11668:	cmp	r5, #0
   1166a:	itte	eq
   1166c:	moveq	r5, r6
   1166e:	subeq	r0, #3
   11670:	subne	r0, #7
   11672:	tst.w	r5, #1
   11676:	bne.n	11688 <memchr+0x98>
   11678:	adds	r0, #1
   1167a:	tst.w	r5, #256	; 0x100
   1167e:	ittt	eq
   11680:	addeq	r0, #1
   11682:	tsteq.w	r5, #98304	; 0x18000
   11686:	addeq	r0, #1
   11688:	pop	{r4, r5, r6, r7}
   1168a:	subs	r0, #1
   1168c:	bx	lr
   1168e:	nop

00011690 <memcmp>:
   11690:	cmp	r2, #3
   11692:	push	{r4, r5, r6}
   11694:	bls.n	116e4 <memcmp+0x54>
   11696:	orr.w	r3, r0, r1
   1169a:	lsls	r3, r3, #30
   1169c:	beq.n	116c2 <memcmp+0x32>
   1169e:	ldrb	r4, [r0, #0]
   116a0:	ldrb	r5, [r1, #0]
   116a2:	cmp	r4, r5
   116a4:	bne.n	116ec <memcmp+0x5c>
   116a6:	add	r2, r0
   116a8:	adds	r3, r0, #1
   116aa:	b.n	116b8 <memcmp+0x28>
   116ac:	ldrb.w	r4, [r3], #1
   116b0:	ldrb.w	r5, [r1, #1]!
   116b4:	cmp	r4, r5
   116b6:	bne.n	116ec <memcmp+0x5c>
   116b8:	cmp	r3, r2
   116ba:	bne.n	116ac <memcmp+0x1c>
   116bc:	movs	r0, #0
   116be:	pop	{r4, r5, r6}
   116c0:	bx	lr
   116c2:	mov	r4, r1
   116c4:	mov	r3, r0
   116c6:	ldr	r6, [r3, #0]
   116c8:	ldr	r5, [r4, #0]
   116ca:	cmp	r6, r5
   116cc:	mov	r0, r3
   116ce:	mov	r1, r4
   116d0:	add.w	r3, r3, #4
   116d4:	add.w	r4, r4, #4
   116d8:	bne.n	1169e <memcmp+0xe>
   116da:	subs	r2, #4
   116dc:	cmp	r2, #3
   116de:	mov	r0, r3
   116e0:	mov	r1, r4
   116e2:	bhi.n	116c6 <memcmp+0x36>
   116e4:	cmp	r2, #0
   116e6:	bne.n	1169e <memcmp+0xe>
   116e8:	mov	r0, r2
   116ea:	b.n	116be <memcmp+0x2e>
   116ec:	subs	r0, r4, r5
   116ee:	pop	{r4, r5, r6}
   116f0:	bx	lr
   116f2:	nop

000116f4 <memmove>:
   116f4:	cmp	r0, r1
   116f6:	push	{r4, r5, r6, r7, lr}
   116f8:	bls.n	11716 <memmove+0x22>
   116fa:	adds	r3, r1, r2
   116fc:	cmp	r0, r3
   116fe:	bcs.n	11716 <memmove+0x22>
   11700:	adds	r1, r0, r2
   11702:	cmp	r2, #0
   11704:	beq.n	117aa <memmove+0xb6>
   11706:	subs	r2, r3, r2
   11708:	ldrb.w	r4, [r3, #-1]!
   1170c:	strb.w	r4, [r1, #-1]!
   11710:	cmp	r3, r2
   11712:	bne.n	11708 <memmove+0x14>
   11714:	pop	{r4, r5, r6, r7, pc}
   11716:	cmp	r2, #15
   11718:	bls.n	117ac <memmove+0xb8>
   1171a:	orr.w	r3, r1, r0
   1171e:	lsls	r3, r3, #30
   11720:	bne.n	117b0 <memmove+0xbc>
   11722:	add.w	r4, r0, #16
   11726:	add.w	r3, r1, #16
   1172a:	mov	r5, r2
   1172c:	ldr.w	r6, [r3, #-16]
   11730:	str.w	r6, [r4, #-16]
   11734:	ldr.w	r6, [r3, #-12]
   11738:	str.w	r6, [r4, #-12]
   1173c:	ldr.w	r6, [r3, #-8]
   11740:	str.w	r6, [r4, #-8]
   11744:	subs	r5, #16
   11746:	ldr.w	r6, [r3, #-4]
   1174a:	str.w	r6, [r4, #-4]
   1174e:	cmp	r5, #15
   11750:	add.w	r3, r3, #16
   11754:	add.w	r4, r4, #16
   11758:	bhi.n	1172c <memmove+0x38>
   1175a:	sub.w	r3, r2, #16
   1175e:	bic.w	r3, r3, #15
   11762:	and.w	lr, r2, #15
   11766:	adds	r3, #16
   11768:	cmp.w	lr, #3
   1176c:	add	r1, r3
   1176e:	add	r3, r0
   11770:	bls.n	117b6 <memmove+0xc2>
   11772:	subs	r6, r3, #4
   11774:	mov	r5, r1
   11776:	mov	r4, lr
   11778:	subs	r4, #4
   1177a:	ldr.w	r7, [r5], #4
   1177e:	str.w	r7, [r6, #4]!
   11782:	cmp	r4, #3
   11784:	bhi.n	11778 <memmove+0x84>
   11786:	sub.w	r4, lr, #4
   1178a:	bic.w	r4, r4, #3
   1178e:	adds	r4, #4
   11790:	add	r3, r4
   11792:	add	r1, r4
   11794:	and.w	r2, r2, #3
   11798:	cbz	r2, 117b4 <memmove+0xc0>
   1179a:	subs	r3, #1
   1179c:	add	r2, r1
   1179e:	ldrb.w	r4, [r1], #1
   117a2:	strb.w	r4, [r3, #1]!
   117a6:	cmp	r2, r1
   117a8:	bne.n	1179e <memmove+0xaa>
   117aa:	pop	{r4, r5, r6, r7, pc}
   117ac:	mov	r3, r0
   117ae:	b.n	11798 <memmove+0xa4>
   117b0:	mov	r3, r0
   117b2:	b.n	1179a <memmove+0xa6>
   117b4:	pop	{r4, r5, r6, r7, pc}
   117b6:	mov	r2, lr
   117b8:	b.n	11798 <memmove+0xa4>
   117ba:	nop

000117bc <memset>:
   117bc:	push	{r4, r5, r6}
   117be:	lsls	r4, r0, #30
   117c0:	beq.n	11850 <memset+0x94>
   117c2:	subs	r4, r2, #1
   117c4:	cmp	r2, #0
   117c6:	beq.n	1184c <memset+0x90>
   117c8:	uxtb	r5, r1
   117ca:	mov	r3, r0
   117cc:	b.n	117d4 <memset+0x18>
   117ce:	subs	r2, r4, #1
   117d0:	cbz	r4, 1184c <memset+0x90>
   117d2:	mov	r4, r2
   117d4:	strb.w	r5, [r3], #1
   117d8:	lsls	r2, r3, #30
   117da:	bne.n	117ce <memset+0x12>
   117dc:	cmp	r4, #3
   117de:	bls.n	1183e <memset+0x82>
   117e0:	uxtb	r5, r1
   117e2:	orr.w	r5, r5, r5, lsl #8
   117e6:	cmp	r4, #15
   117e8:	orr.w	r5, r5, r5, lsl #16
   117ec:	bls.n	11822 <memset+0x66>
   117ee:	add.w	r2, r3, #16
   117f2:	mov	r6, r4
   117f4:	subs	r6, #16
   117f6:	cmp	r6, #15
   117f8:	str.w	r5, [r2, #-16]
   117fc:	str.w	r5, [r2, #-12]
   11800:	str.w	r5, [r2, #-8]
   11804:	str.w	r5, [r2, #-4]
   11808:	add.w	r2, r2, #16
   1180c:	bhi.n	117f4 <memset+0x38>
   1180e:	sub.w	r2, r4, #16
   11812:	bic.w	r2, r2, #15
   11816:	and.w	r4, r4, #15
   1181a:	adds	r2, #16
   1181c:	cmp	r4, #3
   1181e:	add	r3, r2
   11820:	bls.n	1183e <memset+0x82>
   11822:	mov	r6, r3
   11824:	mov	r2, r4
   11826:	subs	r2, #4
   11828:	cmp	r2, #3
   1182a:	str.w	r5, [r6], #4
   1182e:	bhi.n	11826 <memset+0x6a>
   11830:	subs	r2, r4, #4
   11832:	bic.w	r2, r2, #3
   11836:	adds	r2, #4
   11838:	add	r3, r2
   1183a:	and.w	r4, r4, #3
   1183e:	cbz	r4, 1184c <memset+0x90>
   11840:	uxtb	r1, r1
   11842:	add	r4, r3
   11844:	strb.w	r1, [r3], #1
   11848:	cmp	r3, r4
   1184a:	bne.n	11844 <memset+0x88>
   1184c:	pop	{r4, r5, r6}
   1184e:	bx	lr
   11850:	mov	r4, r2
   11852:	mov	r3, r0
   11854:	b.n	117dc <memset+0x20>
   11856:	nop

00011858 <__malloc_lock>:
   11858:	bx	lr
   1185a:	nop

0001185c <__malloc_unlock>:
   1185c:	bx	lr
   1185e:	nop

00011860 <_realloc_r>:
   11860:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11864:	mov	r7, r2
   11866:	sub	sp, #12
   11868:	cmp	r1, #0
   1186a:	beq.w	119f0 <_realloc_r+0x190>
   1186e:	mov	r6, r1
   11870:	mov	r9, r0
   11872:	add.w	r5, r7, #11
   11876:	bl	11858 <__malloc_lock>
   1187a:	ldr.w	lr, [r6, #-4]
   1187e:	cmp	r5, #22
   11880:	bic.w	r4, lr, #3
   11884:	sub.w	r8, r6, #8
   11888:	bhi.n	1190c <_realloc_r+0xac>
   1188a:	movs	r2, #16
   1188c:	mov	r5, r2
   1188e:	cmp	r7, r5
   11890:	bhi.n	11916 <_realloc_r+0xb6>
   11892:	cmp	r4, r2
   11894:	bge.n	11982 <_realloc_r+0x122>
   11896:	ldr	r3, [pc, #804]	; (11bbc <_realloc_r+0x35c>)
   11898:	ldr	r1, [r3, #8]
   1189a:	add.w	r0, r8, r4
   1189e:	cmp	r0, r1
   118a0:	ldr	r1, [r0, #4]
   118a2:	beq.w	11a58 <_realloc_r+0x1f8>
   118a6:	bic.w	r3, r1, #1
   118aa:	add	r3, r0
   118ac:	ldr	r3, [r3, #4]
   118ae:	lsls	r3, r3, #31
   118b0:	bpl.n	119ae <_realloc_r+0x14e>
   118b2:	tst.w	lr, #1
   118b6:	beq.n	11924 <_realloc_r+0xc4>
   118b8:	mov	r1, r7
   118ba:	mov	r0, r9
   118bc:	bl	11050 <_malloc_r>
   118c0:	mov	r7, r0
   118c2:	cbz	r0, 118fe <_realloc_r+0x9e>
   118c4:	ldr.w	r3, [r6, #-4]
   118c8:	bic.w	r3, r3, #1
   118cc:	add	r3, r8
   118ce:	sub.w	r2, r0, #8
   118d2:	cmp	r2, r3
   118d4:	beq.w	11b60 <_realloc_r+0x300>
   118d8:	subs	r2, r4, #4
   118da:	cmp	r2, #36	; 0x24
   118dc:	bhi.w	11b42 <_realloc_r+0x2e2>
   118e0:	cmp	r2, #19
   118e2:	bhi.w	11aee <_realloc_r+0x28e>
   118e6:	mov	r3, r0
   118e8:	mov	r2, r6
   118ea:	ldr	r1, [r2, #0]
   118ec:	str	r1, [r3, #0]
   118ee:	ldr	r1, [r2, #4]
   118f0:	str	r1, [r3, #4]
   118f2:	ldr	r2, [r2, #8]
   118f4:	str	r2, [r3, #8]
   118f6:	mov	r1, r6
   118f8:	mov	r0, r9
   118fa:	bl	14c90 <_free_r>
   118fe:	mov	r0, r9
   11900:	bl	1185c <__malloc_unlock>
   11904:	mov	r0, r7
   11906:	add	sp, #12
   11908:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1190c:	bic.w	r5, r5, #7
   11910:	cmp	r5, #0
   11912:	mov	r2, r5
   11914:	bge.n	1188e <_realloc_r+0x2e>
   11916:	movs	r3, #12
   11918:	movs	r0, #0
   1191a:	str.w	r3, [r9]
   1191e:	add	sp, #12
   11920:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11924:	ldr.w	r3, [r6, #-8]
   11928:	rsb	sl, r3, r8
   1192c:	ldr.w	r3, [sl, #4]
   11930:	bic.w	ip, r3, #3
   11934:	add.w	r3, r4, ip
   11938:	cmp	r3, r2
   1193a:	blt.n	118b8 <_realloc_r+0x58>
   1193c:	mov	r7, sl
   1193e:	ldr.w	r1, [sl, #12]
   11942:	ldr.w	r0, [r7, #8]!
   11946:	subs	r2, r4, #4
   11948:	cmp	r2, #36	; 0x24
   1194a:	str	r1, [r0, #12]
   1194c:	str	r0, [r1, #8]
   1194e:	bhi.w	11b80 <_realloc_r+0x320>
   11952:	cmp	r2, #19
   11954:	bls.w	11b7c <_realloc_r+0x31c>
   11958:	ldr	r1, [r6, #0]
   1195a:	str.w	r1, [sl, #8]
   1195e:	ldr	r1, [r6, #4]
   11960:	str.w	r1, [sl, #12]
   11964:	cmp	r2, #27
   11966:	bhi.w	11bc0 <_realloc_r+0x360>
   1196a:	adds	r6, #8
   1196c:	add.w	r2, sl, #16
   11970:	ldr	r1, [r6, #0]
   11972:	str	r1, [r2, #0]
   11974:	ldr	r1, [r6, #4]
   11976:	str	r1, [r2, #4]
   11978:	ldr	r1, [r6, #8]
   1197a:	str	r1, [r2, #8]
   1197c:	mov	r6, r7
   1197e:	mov	r4, r3
   11980:	mov	r8, sl
   11982:	subs	r3, r4, r5
   11984:	cmp	r3, #15
   11986:	bhi.n	119c4 <_realloc_r+0x164>
   11988:	ldr.w	r3, [r8, #4]
   1198c:	and.w	r3, r3, #1
   11990:	orrs	r3, r4
   11992:	add	r4, r8
   11994:	str.w	r3, [r8, #4]
   11998:	ldr	r3, [r4, #4]
   1199a:	orr.w	r3, r3, #1
   1199e:	str	r3, [r4, #4]
   119a0:	mov	r0, r9
   119a2:	bl	1185c <__malloc_unlock>
   119a6:	mov	r0, r6
   119a8:	add	sp, #12
   119aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119ae:	bic.w	r1, r1, #3
   119b2:	add	r1, r4
   119b4:	cmp	r1, r2
   119b6:	blt.n	119fc <_realloc_r+0x19c>
   119b8:	ldr	r3, [r0, #12]
   119ba:	ldr	r2, [r0, #8]
   119bc:	mov	r4, r1
   119be:	str	r3, [r2, #12]
   119c0:	str	r2, [r3, #8]
   119c2:	b.n	11982 <_realloc_r+0x122>
   119c4:	ldr.w	r2, [r8, #4]
   119c8:	add.w	r1, r8, r5
   119cc:	and.w	r2, r2, #1
   119d0:	orrs	r5, r2
   119d2:	orr.w	r2, r3, #1
   119d6:	add	r3, r1
   119d8:	str.w	r5, [r8, #4]
   119dc:	str	r2, [r1, #4]
   119de:	ldr	r2, [r3, #4]
   119e0:	orr.w	r2, r2, #1
   119e4:	adds	r1, #8
   119e6:	str	r2, [r3, #4]
   119e8:	mov	r0, r9
   119ea:	bl	14c90 <_free_r>
   119ee:	b.n	119a0 <_realloc_r+0x140>
   119f0:	mov	r1, r2
   119f2:	add	sp, #12
   119f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119f8:	b.w	11050 <_malloc_r>
   119fc:	tst.w	lr, #1
   11a00:	bne.w	118b8 <_realloc_r+0x58>
   11a04:	ldr.w	r3, [r6, #-8]
   11a08:	rsb	sl, r3, r8
   11a0c:	ldr.w	r3, [sl, #4]
   11a10:	bic.w	ip, r3, #3
   11a14:	add.w	lr, r1, ip
   11a18:	cmp	lr, r2
   11a1a:	blt.n	11934 <_realloc_r+0xd4>
   11a1c:	ldr	r3, [r0, #12]
   11a1e:	ldr	r2, [r0, #8]
   11a20:	mov	r7, sl
   11a22:	str	r3, [r2, #12]
   11a24:	str	r2, [r3, #8]
   11a26:	ldr.w	r1, [r7, #8]!
   11a2a:	ldr.w	r3, [sl, #12]
   11a2e:	str	r3, [r1, #12]
   11a30:	subs	r2, r4, #4
   11a32:	cmp	r2, #36	; 0x24
   11a34:	str	r1, [r3, #8]
   11a36:	bhi.w	11b6c <_realloc_r+0x30c>
   11a3a:	cmp	r2, #19
   11a3c:	bls.n	11b04 <_realloc_r+0x2a4>
   11a3e:	ldr	r3, [r6, #0]
   11a40:	str.w	r3, [sl, #8]
   11a44:	ldr	r3, [r6, #4]
   11a46:	str.w	r3, [sl, #12]
   11a4a:	cmp	r2, #27
   11a4c:	bhi.w	11b90 <_realloc_r+0x330>
   11a50:	adds	r6, #8
   11a52:	add.w	r3, sl, #16
   11a56:	b.n	11b06 <_realloc_r+0x2a6>
   11a58:	bic.w	fp, r1, #3
   11a5c:	add	fp, r4
   11a5e:	add.w	r0, r5, #16
   11a62:	cmp	fp, r0
   11a64:	bge.n	11b1a <_realloc_r+0x2ba>
   11a66:	tst.w	lr, #1
   11a6a:	bne.w	118b8 <_realloc_r+0x58>
   11a6e:	ldr.w	r1, [r6, #-8]
   11a72:	rsb	sl, r1, r8
   11a76:	ldr.w	r1, [sl, #4]
   11a7a:	bic.w	ip, r1, #3
   11a7e:	add	fp, ip
   11a80:	cmp	r0, fp
   11a82:	bgt.w	11934 <_realloc_r+0xd4>
   11a86:	mov	r7, sl
   11a88:	ldr.w	r1, [sl, #12]
   11a8c:	ldr.w	r0, [r7, #8]!
   11a90:	subs	r2, r4, #4
   11a92:	cmp	r2, #36	; 0x24
   11a94:	str	r1, [r0, #12]
   11a96:	str	r0, [r1, #8]
   11a98:	bhi.w	11c04 <_realloc_r+0x3a4>
   11a9c:	cmp	r2, #19
   11a9e:	bls.w	11bec <_realloc_r+0x38c>
   11aa2:	ldr	r1, [r6, #0]
   11aa4:	str.w	r1, [sl, #8]
   11aa8:	ldr	r1, [r6, #4]
   11aaa:	str.w	r1, [sl, #12]
   11aae:	cmp	r2, #27
   11ab0:	bhi.w	11c12 <_realloc_r+0x3b2>
   11ab4:	adds	r6, #8
   11ab6:	add.w	r2, sl, #16
   11aba:	ldr	r1, [r6, #0]
   11abc:	str	r1, [r2, #0]
   11abe:	ldr	r1, [r6, #4]
   11ac0:	str	r1, [r2, #4]
   11ac2:	ldr	r1, [r6, #8]
   11ac4:	str	r1, [r2, #8]
   11ac6:	add.w	r1, sl, r5
   11aca:	rsb	r2, r5, fp
   11ace:	orr.w	r2, r2, #1
   11ad2:	str	r1, [r3, #8]
   11ad4:	str	r2, [r1, #4]
   11ad6:	ldr.w	r3, [sl, #4]
   11ada:	and.w	r3, r3, #1
   11ade:	orrs	r5, r3
   11ae0:	mov	r0, r9
   11ae2:	str.w	r5, [sl, #4]
   11ae6:	bl	1185c <__malloc_unlock>
   11aea:	mov	r0, r7
   11aec:	b.n	119a8 <_realloc_r+0x148>
   11aee:	ldr	r3, [r6, #0]
   11af0:	str	r3, [r0, #0]
   11af2:	ldr	r3, [r6, #4]
   11af4:	str	r3, [r0, #4]
   11af6:	cmp	r2, #27
   11af8:	bhi.n	11b4a <_realloc_r+0x2ea>
   11afa:	add.w	r3, r0, #8
   11afe:	add.w	r2, r6, #8
   11b02:	b.n	118ea <_realloc_r+0x8a>
   11b04:	mov	r3, r7
   11b06:	ldr	r2, [r6, #0]
   11b08:	str	r2, [r3, #0]
   11b0a:	ldr	r2, [r6, #4]
   11b0c:	str	r2, [r3, #4]
   11b0e:	ldr	r2, [r6, #8]
   11b10:	str	r2, [r3, #8]
   11b12:	mov	r6, r7
   11b14:	mov	r4, lr
   11b16:	mov	r8, sl
   11b18:	b.n	11982 <_realloc_r+0x122>
   11b1a:	add.w	r1, r8, r5
   11b1e:	rsb	fp, r5, fp
   11b22:	orr.w	r2, fp, #1
   11b26:	str	r1, [r3, #8]
   11b28:	str	r2, [r1, #4]
   11b2a:	ldr.w	r3, [r6, #-4]
   11b2e:	and.w	r3, r3, #1
   11b32:	orrs	r5, r3
   11b34:	mov	r0, r9
   11b36:	str.w	r5, [r6, #-4]
   11b3a:	bl	1185c <__malloc_unlock>
   11b3e:	mov	r0, r6
   11b40:	b.n	119a8 <_realloc_r+0x148>
   11b42:	mov	r1, r6
   11b44:	bl	116f4 <memmove>
   11b48:	b.n	118f6 <_realloc_r+0x96>
   11b4a:	ldr	r3, [r6, #8]
   11b4c:	str	r3, [r0, #8]
   11b4e:	ldr	r3, [r6, #12]
   11b50:	str	r3, [r0, #12]
   11b52:	cmp	r2, #36	; 0x24
   11b54:	beq.n	11ba8 <_realloc_r+0x348>
   11b56:	add.w	r3, r0, #16
   11b5a:	add.w	r2, r6, #16
   11b5e:	b.n	118ea <_realloc_r+0x8a>
   11b60:	ldr.w	r3, [r0, #-4]
   11b64:	bic.w	r3, r3, #3
   11b68:	add	r4, r3
   11b6a:	b.n	11982 <_realloc_r+0x122>
   11b6c:	mov	r1, r6
   11b6e:	mov	r0, r7
   11b70:	mov	r4, lr
   11b72:	mov	r8, sl
   11b74:	bl	116f4 <memmove>
   11b78:	mov	r6, r7
   11b7a:	b.n	11982 <_realloc_r+0x122>
   11b7c:	mov	r2, r7
   11b7e:	b.n	11970 <_realloc_r+0x110>
   11b80:	mov	r1, r6
   11b82:	mov	r0, r7
   11b84:	mov	r4, r3
   11b86:	mov	r8, sl
   11b88:	bl	116f4 <memmove>
   11b8c:	mov	r6, r7
   11b8e:	b.n	11982 <_realloc_r+0x122>
   11b90:	ldr	r3, [r6, #8]
   11b92:	str.w	r3, [sl, #16]
   11b96:	ldr	r3, [r6, #12]
   11b98:	str.w	r3, [sl, #20]
   11b9c:	cmp	r2, #36	; 0x24
   11b9e:	beq.n	11bd8 <_realloc_r+0x378>
   11ba0:	adds	r6, #16
   11ba2:	add.w	r3, sl, #24
   11ba6:	b.n	11b06 <_realloc_r+0x2a6>
   11ba8:	ldr	r3, [r6, #16]
   11baa:	str	r3, [r0, #16]
   11bac:	ldr	r3, [r6, #20]
   11bae:	str	r3, [r0, #20]
   11bb0:	add.w	r2, r6, #24
   11bb4:	add.w	r3, r0, #24
   11bb8:	b.n	118ea <_realloc_r+0x8a>
   11bba:	nop
   11bbc:	.word	0x1fff1068
   11bc0:	ldr	r1, [r6, #8]
   11bc2:	str.w	r1, [sl, #16]
   11bc6:	ldr	r1, [r6, #12]
   11bc8:	str.w	r1, [sl, #20]
   11bcc:	cmp	r2, #36	; 0x24
   11bce:	beq.n	11bf0 <_realloc_r+0x390>
   11bd0:	adds	r6, #16
   11bd2:	add.w	r2, sl, #24
   11bd6:	b.n	11970 <_realloc_r+0x110>
   11bd8:	ldr	r3, [r6, #16]
   11bda:	str.w	r3, [sl, #24]
   11bde:	ldr	r3, [r6, #20]
   11be0:	str.w	r3, [sl, #28]
   11be4:	adds	r6, #24
   11be6:	add.w	r3, sl, #32
   11bea:	b.n	11b06 <_realloc_r+0x2a6>
   11bec:	mov	r2, r7
   11bee:	b.n	11aba <_realloc_r+0x25a>
   11bf0:	ldr	r2, [r6, #16]
   11bf2:	str.w	r2, [sl, #24]
   11bf6:	ldr	r2, [r6, #20]
   11bf8:	str.w	r2, [sl, #28]
   11bfc:	adds	r6, #24
   11bfe:	add.w	r2, sl, #32
   11c02:	b.n	11970 <_realloc_r+0x110>
   11c04:	mov	r1, r6
   11c06:	mov	r0, r7
   11c08:	str	r3, [sp, #4]
   11c0a:	bl	116f4 <memmove>
   11c0e:	ldr	r3, [sp, #4]
   11c10:	b.n	11ac6 <_realloc_r+0x266>
   11c12:	ldr	r1, [r6, #8]
   11c14:	str.w	r1, [sl, #16]
   11c18:	ldr	r1, [r6, #12]
   11c1a:	str.w	r1, [sl, #20]
   11c1e:	cmp	r2, #36	; 0x24
   11c20:	beq.n	11c2a <_realloc_r+0x3ca>
   11c22:	adds	r6, #16
   11c24:	add.w	r2, sl, #24
   11c28:	b.n	11aba <_realloc_r+0x25a>
   11c2a:	ldr	r2, [r6, #16]
   11c2c:	str.w	r2, [sl, #24]
   11c30:	ldr	r2, [r6, #20]
   11c32:	str.w	r2, [sl, #28]
   11c36:	adds	r6, #24
   11c38:	add.w	r2, sl, #32
   11c3c:	b.n	11aba <_realloc_r+0x25a>
   11c3e:	nop

00011c40 <_sbrk_r>:
   11c40:	push	{r3, r4, r5, lr}
   11c42:	ldr	r4, [pc, #28]	; (11c60 <_sbrk_r+0x20>)
   11c44:	movs	r3, #0
   11c46:	mov	r5, r0
   11c48:	mov	r0, r1
   11c4a:	str	r3, [r4, #0]
   11c4c:	bl	ed50 <_sbrk>
   11c50:	adds	r3, r0, #1
   11c52:	beq.n	11c56 <_sbrk_r+0x16>
   11c54:	pop	{r3, r4, r5, pc}
   11c56:	ldr	r3, [r4, #0]
   11c58:	cmp	r3, #0
   11c5a:	beq.n	11c54 <_sbrk_r+0x14>
   11c5c:	str	r3, [r5, #0]
   11c5e:	pop	{r3, r4, r5, pc}
   11c60:	.word	0x1fff26c4

00011c64 <sprintf>:
   11c64:	push	{r1, r2, r3}
   11c66:	push	{r4, r5, r6, r7, lr}
   11c68:	sub	sp, #112	; 0x70
   11c6a:	add	r3, sp, #132	; 0x84
   11c6c:	ldr	r1, [pc, #60]	; (11cac <sprintf+0x48>)
   11c6e:	ldr.w	r2, [r3], #4
   11c72:	str	r3, [sp, #4]
   11c74:	mov	r5, r0
   11c76:	mvn.w	r4, #2147483648	; 0x80000000
   11c7a:	ldr	r0, [r1, #0]
   11c7c:	str	r5, [sp, #8]
   11c7e:	mov.w	r7, #520	; 0x208
   11c82:	movw	r6, #65535	; 0xffff
   11c86:	add	r1, sp, #8
   11c88:	str	r5, [sp, #24]
   11c8a:	strh.w	r7, [sp, #20]
   11c8e:	str	r4, [sp, #16]
   11c90:	str	r4, [sp, #28]
   11c92:	strh.w	r6, [sp, #22]
   11c96:	bl	12418 <_svfprintf_r>
   11c9a:	ldr	r3, [sp, #8]
   11c9c:	movs	r2, #0
   11c9e:	strb	r2, [r3, #0]
   11ca0:	add	sp, #112	; 0x70
   11ca2:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   11ca6:	add	sp, #12
   11ca8:	bx	lr
   11caa:	nop
   11cac:	.word	0x1fff0ef8

00011cb0 <stpcpy>:
   11cb0:	orr.w	r3, r1, r0
   11cb4:	lsls	r3, r3, #30
   11cb6:	push	{r4}
   11cb8:	bne.n	11ce4 <stpcpy+0x34>
   11cba:	ldr	r3, [r1, #0]
   11cbc:	sub.w	r2, r3, #16843009	; 0x1010101
   11cc0:	bic.w	r2, r2, r3
   11cc4:	tst.w	r2, #2155905152	; 0x80808080
   11cc8:	bne.n	11ce4 <stpcpy+0x34>
   11cca:	adds	r4, r1, #4
   11ccc:	str.w	r3, [r0], #4
   11cd0:	mov	r1, r4
   11cd2:	ldr.w	r3, [r4], #4
   11cd6:	sub.w	r2, r3, #16843009	; 0x1010101
   11cda:	bic.w	r2, r2, r3
   11cde:	tst.w	r2, #2155905152	; 0x80808080
   11ce2:	beq.n	11ccc <stpcpy+0x1c>
   11ce4:	mov	r3, r0
   11ce6:	ldrb.w	r2, [r1], #1
   11cea:	mov	r0, r3
   11cec:	strb.w	r2, [r3], #1
   11cf0:	cmp	r2, #0
   11cf2:	bne.n	11ce6 <stpcpy+0x36>
   11cf4:	ldr.w	r4, [sp], #4
   11cf8:	bx	lr
   11cfa:	nop

00011cfc <strcat>:
   11cfc:	lsls	r3, r0, #30
   11cfe:	push	{r4, lr}
   11d00:	mov	r4, r0
   11d02:	bne.n	11d26 <strcat+0x2a>
   11d04:	ldr	r2, [r0, #0]
   11d06:	sub.w	r3, r2, #16843009	; 0x1010101
   11d0a:	bic.w	r3, r3, r2
   11d0e:	tst.w	r3, #2155905152	; 0x80808080
   11d12:	bne.n	11d26 <strcat+0x2a>
   11d14:	ldr.w	r2, [r0, #4]!
   11d18:	sub.w	r3, r2, #16843009	; 0x1010101
   11d1c:	bic.w	r3, r3, r2
   11d20:	tst.w	r3, #2155905152	; 0x80808080
   11d24:	beq.n	11d14 <strcat+0x18>
   11d26:	ldrb	r3, [r0, #0]
   11d28:	cbz	r3, 11d32 <strcat+0x36>
   11d2a:	ldrb.w	r3, [r0, #1]!
   11d2e:	cmp	r3, #0
   11d30:	bne.n	11d2a <strcat+0x2e>
   11d32:	bl	120fc <strcpy>
   11d36:	mov	r0, r4
   11d38:	pop	{r4, pc}
   11d3a:	nop

00011d3c <strchr>:
   11d3c:	push	{r4, r5, r6}
   11d3e:	ands.w	r4, r1, #255	; 0xff
   11d42:	beq.n	11dae <strchr+0x72>
   11d44:	lsls	r5, r0, #30
   11d46:	beq.n	11d68 <strchr+0x2c>
   11d48:	ldrb	r3, [r0, #0]
   11d4a:	cmp	r3, #0
   11d4c:	beq.n	11e04 <strchr+0xc8>
   11d4e:	cmp	r4, r3
   11d50:	beq.n	11daa <strchr+0x6e>
   11d52:	adds	r3, r0, #1
   11d54:	b.n	11d62 <strchr+0x26>
   11d56:	ldrb.w	r2, [r3], #1
   11d5a:	cmp	r2, #0
   11d5c:	beq.n	11dfe <strchr+0xc2>
   11d5e:	cmp	r4, r2
   11d60:	beq.n	11daa <strchr+0x6e>
   11d62:	lsls	r2, r3, #30
   11d64:	mov	r0, r3
   11d66:	bne.n	11d56 <strchr+0x1a>
   11d68:	lsls	r6, r1, #8
   11d6a:	and.w	r6, r6, #65280	; 0xff00
   11d6e:	orrs	r6, r4
   11d70:	ldr	r3, [r0, #0]
   11d72:	orr.w	r6, r6, r6, lsl #16
   11d76:	b.n	11d7c <strchr+0x40>
   11d78:	ldr.w	r3, [r0, #4]!
   11d7c:	eor.w	r5, r6, r3
   11d80:	sub.w	r2, r5, #16843009	; 0x1010101
   11d84:	sub.w	r1, r3, #16843009	; 0x1010101
   11d88:	bic.w	r2, r2, r5
   11d8c:	bic.w	r3, r1, r3
   11d90:	orrs	r3, r2
   11d92:	tst.w	r3, #2155905152	; 0x80808080
   11d96:	beq.n	11d78 <strchr+0x3c>
   11d98:	ldrb	r3, [r0, #0]
   11d9a:	cbnz	r3, 11da6 <strchr+0x6a>
   11d9c:	b.n	11e04 <strchr+0xc8>
   11d9e:	ldrb.w	r3, [r0, #1]!
   11da2:	cmp	r3, #0
   11da4:	beq.n	11e04 <strchr+0xc8>
   11da6:	cmp	r4, r3
   11da8:	bne.n	11d9e <strchr+0x62>
   11daa:	pop	{r4, r5, r6}
   11dac:	bx	lr
   11dae:	lsls	r4, r0, #30
   11db0:	beq.n	11dca <strchr+0x8e>
   11db2:	ldrb	r3, [r0, #0]
   11db4:	cmp	r3, #0
   11db6:	beq.n	11daa <strchr+0x6e>
   11db8:	adds	r3, r0, #1
   11dba:	b.n	11dc4 <strchr+0x88>
   11dbc:	ldrb	r2, [r0, #0]
   11dbe:	adds	r3, #1
   11dc0:	cmp	r2, #0
   11dc2:	beq.n	11daa <strchr+0x6e>
   11dc4:	lsls	r1, r3, #30
   11dc6:	mov	r0, r3
   11dc8:	bne.n	11dbc <strchr+0x80>
   11dca:	ldr	r2, [r0, #0]
   11dcc:	sub.w	r3, r2, #16843009	; 0x1010101
   11dd0:	bic.w	r3, r3, r2
   11dd4:	tst.w	r3, #2155905152	; 0x80808080
   11dd8:	bne.n	11dec <strchr+0xb0>
   11dda:	ldr.w	r2, [r0, #4]!
   11dde:	sub.w	r3, r2, #16843009	; 0x1010101
   11de2:	bic.w	r3, r3, r2
   11de6:	tst.w	r3, #2155905152	; 0x80808080
   11dea:	beq.n	11dda <strchr+0x9e>
   11dec:	ldrb	r3, [r0, #0]
   11dee:	cmp	r3, #0
   11df0:	beq.n	11daa <strchr+0x6e>
   11df2:	ldrb.w	r3, [r0, #1]!
   11df6:	cmp	r3, #0
   11df8:	bne.n	11df2 <strchr+0xb6>
   11dfa:	pop	{r4, r5, r6}
   11dfc:	bx	lr
   11dfe:	mov	r0, r2
   11e00:	pop	{r4, r5, r6}
   11e02:	bx	lr
   11e04:	mov	r0, r3
   11e06:	pop	{r4, r5, r6}
   11e08:	bx	lr
   11e0a:	nop
   11e0c:			; <UNDEFINED> instruction: 0xffffffff
   11e10:			; <UNDEFINED> instruction: 0xffffffff
   11e14:			; <UNDEFINED> instruction: 0xffffffff
   11e18:			; <UNDEFINED> instruction: 0xffffffff
   11e1c:			; <UNDEFINED> instruction: 0xffffffff
   11e20:	sub.w	r0, r2, r3
   11e24:	bx	lr
   11e26:	nop

00011e28 <strcmp>:
   11e28:	ldrb	r2, [r0, #0]
   11e2a:	ldrb	r3, [r1, #0]
   11e2c:	cmp	r2, #1
   11e2e:	it	cs
   11e30:	cmpcs	r2, r3
   11e32:	bne.n	11e20 <strchr+0xe4>
   11e34:	strd	r4, r5, [sp, #-16]!
   11e38:	orr.w	r4, r0, r1
   11e3c:	strd	r6, r7, [sp, #8]
   11e40:	mvn.w	ip, #0
   11e44:	mov.w	r2, r4, lsl #29
   11e48:	cbz	r2, 11e90 <strcmp+0x68>
   11e4a:	eor.w	r4, r0, r1
   11e4e:	tst.w	r4, #7
   11e52:	bne.n	11f2a <strcmp+0x102>
   11e54:	and.w	r4, r0, #7
   11e58:	bic.w	r0, r0, #7
   11e5c:	and.w	r5, r4, #3
   11e60:	bic.w	r1, r1, #7
   11e64:	mov.w	r5, r5, lsl #3
   11e68:	ldrd	r2, r3, [r0], #16
   11e6c:	tst.w	r4, #4
   11e70:	ldrd	r6, r7, [r1], #16
   11e74:	lsl.w	r4, ip, r5
   11e78:	orn	r2, r2, r4
   11e7c:	orn	r6, r6, r4
   11e80:	beq.n	11e98 <strcmp+0x70>
   11e82:	orn	r3, r3, r4
   11e86:	mov	r2, ip
   11e88:	orn	r7, r7, r4
   11e8c:	mov	r6, ip
   11e8e:	b.n	11e98 <strcmp+0x70>
   11e90:	ldrd	r2, r3, [r0], #16
   11e94:	ldrd	r6, r7, [r1], #16
   11e98:	uadd8	r5, r2, ip
   11e9c:	eor.w	r4, r2, r6
   11ea0:	sel	r4, r4, ip
   11ea4:	cbnz	r4, 11f02 <strcmp+0xda>
   11ea6:	uadd8	r5, r3, ip
   11eaa:	eor.w	r5, r3, r7
   11eae:	sel	r5, r5, ip
   11eb2:	cbnz	r5, 11eda <strcmp+0xb2>
   11eb4:	ldrd	r2, r3, [r0, #-8]
   11eb8:	ldrd	r6, r7, [r1, #-8]
   11ebc:	uadd8	r5, r2, ip
   11ec0:	eor.w	r4, r2, r6
   11ec4:	sel	r4, r4, ip
   11ec8:	uadd8	r5, r3, ip
   11ecc:	eor.w	r5, r3, r7
   11ed0:	sel	r5, r5, ip
   11ed4:	orrs	r5, r4
   11ed6:	beq.n	11e90 <strcmp+0x68>
   11ed8:	cbnz	r4, 11f02 <strcmp+0xda>
   11eda:	rev	r5, r5
   11edc:	clz	r4, r5
   11ee0:	bic.w	r4, r4, #7
   11ee4:	lsr.w	r1, r7, r4
   11ee8:	ldrd	r6, r7, [sp, #8]
   11eec:	lsr.w	r3, r3, r4
   11ef0:	and.w	r0, r3, #255	; 0xff
   11ef4:	and.w	r1, r1, #255	; 0xff
   11ef8:	ldrd	r4, r5, [sp], #16
   11efc:	sub.w	r0, r0, r1
   11f00:	bx	lr
   11f02:	rev	r4, r4
   11f04:	clz	r4, r4
   11f08:	bic.w	r4, r4, #7
   11f0c:	lsr.w	r1, r6, r4
   11f10:	ldrd	r6, r7, [sp, #8]
   11f14:	lsr.w	r2, r2, r4
   11f18:	and.w	r0, r2, #255	; 0xff
   11f1c:	and.w	r1, r1, #255	; 0xff
   11f20:	ldrd	r4, r5, [sp], #16
   11f24:	sub.w	r0, r0, r1
   11f28:	bx	lr
   11f2a:	tst.w	r4, #3
   11f2e:	bne.n	11faa <strcmp+0x182>
   11f30:	ands.w	r4, r0, #3
   11f34:	bne.n	11f88 <strcmp+0x160>
   11f36:	ldr.w	r2, [r0], #8
   11f3a:	ldr.w	r3, [r1], #8
   11f3e:	uadd8	r5, r2, ip
   11f42:	eor.w	r5, r2, r3
   11f46:	sel	r5, r5, ip
   11f4a:	cbnz	r5, 11f64 <strcmp+0x13c>
   11f4c:	ldr.w	r2, [r0, #-4]
   11f50:	ldr.w	r3, [r1, #-4]
   11f54:	uadd8	r5, r2, ip
   11f58:	eor.w	r5, r2, r3
   11f5c:	sel	r5, r5, ip
   11f60:	cmp	r5, #0
   11f62:	beq.n	11f36 <strcmp+0x10e>
   11f64:	rev	r5, r5
   11f66:	clz	r4, r5
   11f6a:	bic.w	r4, r4, #7
   11f6e:	lsr.w	r1, r3, r4
   11f72:	lsr.w	r2, r2, r4
   11f76:	and.w	r0, r2, #255	; 0xff
   11f7a:	and.w	r1, r1, #255	; 0xff
   11f7e:	ldrd	r4, r5, [sp], #16
   11f82:	sub.w	r0, r0, r1
   11f86:	bx	lr
   11f88:	mov.w	r4, r4, lsl #3
   11f8c:	bic.w	r0, r0, #3
   11f90:	ldr.w	r2, [r0], #8
   11f94:	bic.w	r1, r1, #3
   11f98:	ldr.w	r3, [r1], #8
   11f9c:	lsl.w	r4, ip, r4
   11fa0:	orn	r2, r2, r4
   11fa4:	orn	r3, r3, r4
   11fa8:	b.n	11f3e <strcmp+0x116>
   11faa:	ands.w	r4, r0, #3
   11fae:	beq.n	11fe6 <strcmp+0x1be>
   11fb0:	sub.w	r1, r1, r4
   11fb4:	bic.w	r0, r0, #3
   11fb8:	lsls	r4, r4, #31
   11fba:	ldr.w	r2, [r0], #4
   11fbe:	beq.n	11fce <strcmp+0x1a6>
   11fc0:	bcs.n	11fe2 <strcmp+0x1ba>
   11fc2:	ldrb	r3, [r1, #2]
   11fc4:	uxtb.w	r4, r2, ror #16
   11fc8:	subs	r4, r4, r3
   11fca:	bne.n	11fda <strcmp+0x1b2>
   11fcc:	cbz	r3, 11fda <strcmp+0x1b2>
   11fce:	ldrb	r3, [r1, #3]
   11fd0:	uxtb.w	r4, r2, ror #24
   11fd4:	subs	r4, r4, r3
   11fd6:	bne.n	11fda <strcmp+0x1b2>
   11fd8:	cbnz	r3, 11fe2 <strcmp+0x1ba>
   11fda:	mov	r0, r4
   11fdc:	ldr.w	r4, [sp], #16
   11fe0:	bx	lr
   11fe2:	add.w	r1, r1, #4
   11fe6:	ldr.w	r2, [r0], #4
   11fea:	lsls	r4, r1, #31
   11fec:	bic.w	r1, r1, #3
   11ff0:	ldr.w	r3, [r1], #4
   11ff4:	bhi.n	12088 <strcmp+0x260>
   11ff6:	bcs.n	12042 <strcmp+0x21a>
   11ff8:	bic.w	r4, r2, #4278190080	; 0xff000000
   11ffc:	uadd8	r5, r2, ip
   12000:	eors.w	r5, r4, r3, lsr #8
   12004:	sel	r5, r5, ip
   12008:	bne.n	12020 <strcmp+0x1f8>
   1200a:	cbnz	r5, 12026 <strcmp+0x1fe>
   1200c:	ldr.w	r3, [r1], #4
   12010:	eor.w	r4, r4, r2
   12014:	cmp.w	r4, r3, lsl #24
   12018:	bne.n	12038 <strcmp+0x210>
   1201a:	ldr.w	r2, [r0], #4
   1201e:	b.n	11ff8 <strcmp+0x1d0>
   12020:	mov.w	r3, r3, lsr #8
   12024:	b.n	120d2 <strcmp+0x2aa>
   12026:	bics.w	r5, r5, #4278190080	; 0xff000000
   1202a:	bne.n	120c8 <strcmp+0x2a0>
   1202c:	ldrb	r0, [r1, #0]
   1202e:	ldrd	r4, r5, [sp], #16
   12032:	rsb	r0, r0, #0
   12036:	bx	lr
   12038:	mov.w	r2, r2, lsr #24
   1203c:	and.w	r3, r3, #255	; 0xff
   12040:	b.n	120d2 <strcmp+0x2aa>
   12042:	and.w	r4, r2, ip, lsr #16
   12046:	uadd8	r5, r2, ip
   1204a:	eors.w	r5, r4, r3, lsr #16
   1204e:	sel	r5, r5, ip
   12052:	bne.n	1206a <strcmp+0x242>
   12054:	cbnz	r5, 12070 <strcmp+0x248>
   12056:	ldr.w	r3, [r1], #4
   1205a:	eor.w	r4, r4, r2
   1205e:	cmp.w	r4, r3, lsl #16
   12062:	bne.n	1207e <strcmp+0x256>
   12064:	ldr.w	r2, [r0], #4
   12068:	b.n	12042 <strcmp+0x21a>
   1206a:	mov.w	r3, r3, lsr #16
   1206e:	b.n	120d2 <strcmp+0x2aa>
   12070:	ands.w	r5, r5, ip, lsr #16
   12074:	bne.n	120c8 <strcmp+0x2a0>
   12076:	ldrh	r3, [r1, #0]
   12078:	mov.w	r2, r2, lsr #16
   1207c:	b.n	120d2 <strcmp+0x2aa>
   1207e:	mov.w	r2, r2, lsr #16
   12082:	and.w	r3, r3, ip, lsr #16
   12086:	b.n	120d2 <strcmp+0x2aa>
   12088:	and.w	r4, r2, #255	; 0xff
   1208c:	uadd8	r5, r2, ip
   12090:	eors.w	r5, r4, r3, lsr #24
   12094:	sel	r5, r5, ip
   12098:	bne.n	120b0 <strcmp+0x288>
   1209a:	cbnz	r5, 120b6 <strcmp+0x28e>
   1209c:	ldr.w	r3, [r1], #4
   120a0:	eor.w	r4, r4, r2
   120a4:	cmp.w	r4, r3, lsl #8
   120a8:	bne.n	120be <strcmp+0x296>
   120aa:	ldr.w	r2, [r0], #4
   120ae:	b.n	12088 <strcmp+0x260>
   120b0:	mov.w	r3, r3, lsr #24
   120b4:	b.n	120d2 <strcmp+0x2aa>
   120b6:	tst.w	r5, #255	; 0xff
   120ba:	bne.n	120c8 <strcmp+0x2a0>
   120bc:	ldr	r3, [r1, #0]
   120be:	mov.w	r2, r2, lsr #8
   120c2:	bic.w	r3, r3, #4278190080	; 0xff000000
   120c6:	b.n	120d2 <strcmp+0x2aa>
   120c8:	mov.w	r0, #0
   120cc:	ldrd	r4, r5, [sp], #16
   120d0:	bx	lr
   120d2:	rev	r2, r2
   120d4:	rev	r3, r3
   120d6:	uadd8	r4, r2, ip
   120da:	eor.w	r4, r2, r3
   120de:	sel	r5, r4, ip
   120e2:	clz	r4, r5
   120e6:	lsl.w	r2, r2, r4
   120ea:	lsl.w	r3, r3, r4
   120ee:	mov.w	r0, r2, lsr #24
   120f2:	ldrd	r4, r5, [sp], #16
   120f6:	sub.w	r0, r0, r3, lsr #24
   120fa:	bx	lr

000120fc <strcpy>:
   120fc:	eor.w	r2, r0, r1
   12100:	mov	ip, r0
   12102:	tst.w	r2, #3
   12106:	bne.n	121a8 <strcpy+0xac>
   12108:	tst.w	r1, #3
   1210c:	bne.n	12174 <strcpy+0x78>
   1210e:	str.w	r4, [sp, #-4]!
   12112:	tst.w	r1, #4
   12116:	ldr.w	r3, [r1], #4
   1211a:	beq.n	12134 <strcpy+0x38>
   1211c:	sub.w	r2, r3, #16843009	; 0x1010101
   12120:	bics	r2, r3
   12122:	tst.w	r2, #2155905152	; 0x80808080
   12126:	itt	eq
   12128:	streq.w	r3, [ip], #4
   1212c:	ldreq.w	r3, [r1], #4
   12130:	bne.n	12160 <strcpy+0x64>
   12132:	nop
   12134:	ldr.w	r4, [r1], #4
   12138:	sub.w	r2, r3, #16843009	; 0x1010101
   1213c:	bics	r2, r3
   1213e:	tst.w	r2, #2155905152	; 0x80808080
   12142:	sub.w	r2, r4, #16843009	; 0x1010101
   12146:	bne.n	12160 <strcpy+0x64>
   12148:	str.w	r3, [ip], #4
   1214c:	bics	r2, r4
   1214e:	tst.w	r2, #2155905152	; 0x80808080
   12152:	itt	eq
   12154:	ldreq.w	r3, [r1], #4
   12158:	streq.w	r4, [ip], #4
   1215c:	beq.n	12134 <strcpy+0x38>
   1215e:	mov	r3, r4
   12160:	strb.w	r3, [ip], #1
   12164:	tst.w	r3, #255	; 0xff
   12168:	mov.w	r3, r3, ror #8
   1216c:	bne.n	12160 <strcpy+0x64>
   1216e:	ldr.w	r4, [sp], #4
   12172:	bx	lr
   12174:	tst.w	r1, #1
   12178:	beq.n	12188 <strcpy+0x8c>
   1217a:	ldrb.w	r2, [r1], #1
   1217e:	strb.w	r2, [ip], #1
   12182:	cmp	r2, #0
   12184:	it	eq
   12186:	bxeq	lr
   12188:	tst.w	r1, #2
   1218c:	beq.n	1210e <strcpy+0x12>
   1218e:	ldrh.w	r2, [r1], #2
   12192:	tst.w	r2, #255	; 0xff
   12196:	itet	ne
   12198:	strhne.w	r2, [ip], #2
   1219c:	strbeq.w	r2, [ip]
   121a0:	tstne.w	r2, #65280	; 0xff00
   121a4:	bne.n	1210e <strcpy+0x12>
   121a6:	bx	lr
   121a8:	ldrb.w	r2, [r1], #1
   121ac:	strb.w	r2, [ip], #1
   121b0:	cmp	r2, #0
   121b2:	bne.n	121a8 <strcpy+0xac>
   121b4:	bx	lr
   121b6:	nop

000121b8 <strcspn>:
   121b8:	push	{r4, r5, r6}
   121ba:	ldrb	r4, [r0, #0]
   121bc:	cbz	r4, 121e6 <strcspn+0x2e>
   121be:	ldrb	r6, [r1, #0]
   121c0:	mov	r5, r0
   121c2:	cbz	r6, 121d8 <strcspn+0x20>
   121c4:	cmp	r4, r6
   121c6:	beq.n	121e0 <strcspn+0x28>
   121c8:	mov	r2, r1
   121ca:	b.n	121d0 <strcspn+0x18>
   121cc:	cmp	r3, r4
   121ce:	beq.n	121e0 <strcspn+0x28>
   121d0:	ldrb.w	r3, [r2, #1]!
   121d4:	cmp	r3, #0
   121d6:	bne.n	121cc <strcspn+0x14>
   121d8:	ldrb.w	r4, [r5, #1]!
   121dc:	cmp	r4, #0
   121de:	bne.n	121c2 <strcspn+0xa>
   121e0:	subs	r0, r5, r0
   121e2:	pop	{r4, r5, r6}
   121e4:	bx	lr
   121e6:	mov	r0, r4
   121e8:	b.n	121e2 <strcspn+0x2a>
   121ea:	nop

000121ec <strlcpy>:
   121ec:	push	{r4}
   121ee:	mov	r3, r1
   121f0:	cbz	r2, 12206 <strlcpy+0x1a>
   121f2:	b.n	121fe <strlcpy+0x12>
   121f4:	ldrb.w	r4, [r3], #1
   121f8:	strb.w	r4, [r0], #1
   121fc:	cbz	r4, 1220e <strlcpy+0x22>
   121fe:	subs	r2, #1
   12200:	bne.n	121f4 <strlcpy+0x8>
   12202:	movs	r2, #0
   12204:	strb	r2, [r0, #0]
   12206:	ldrb.w	r2, [r3], #1
   1220a:	cmp	r2, #0
   1220c:	bne.n	12206 <strlcpy+0x1a>
   1220e:	subs	r0, r3, r1
   12210:	subs	r0, #1
   12212:	ldr.w	r4, [sp], #4
   12216:	bx	lr
   12218:			; <UNDEFINED> instruction: 0xffffffff
   1221c:			; <UNDEFINED> instruction: 0xffffffff
   12220:			; <UNDEFINED> instruction: 0xffffffff
   12224:			; <UNDEFINED> instruction: 0xffffffff
   12228:			; <UNDEFINED> instruction: 0xffffffff
   1222c:			; <UNDEFINED> instruction: 0xffffffff
   12230:			; <UNDEFINED> instruction: 0xffffffff
   12234:			; <UNDEFINED> instruction: 0xffffffff
   12238:			; <UNDEFINED> instruction: 0xffffffff
   1223c:			; <UNDEFINED> instruction: 0xffffffff

00012240 <strlen>:
   12240:	pld	[r0]
   12244:	strd	r4, r5, [sp, #-8]!
   12248:	bic.w	r1, r0, #7
   1224c:	mvn.w	ip, #0
   12250:	ands.w	r4, r0, #7
   12254:	pld	[r1, #32]
   12258:	bne.w	122ee <strlen+0xae>
   1225c:	mov.w	r4, #0
   12260:	mvn.w	r0, #7
   12264:	ldrd	r2, r3, [r1]
   12268:	pld	[r1, #64]	; 0x40
   1226c:	add.w	r0, r0, #8
   12270:	uadd8	r2, r2, ip
   12274:	sel	r2, r4, ip
   12278:	uadd8	r3, r3, ip
   1227c:	sel	r3, r2, ip
   12280:	cbnz	r3, 122d6 <strlen+0x96>
   12282:	ldrd	r2, r3, [r1, #8]
   12286:	uadd8	r2, r2, ip
   1228a:	add.w	r0, r0, #8
   1228e:	sel	r2, r4, ip
   12292:	uadd8	r3, r3, ip
   12296:	sel	r3, r2, ip
   1229a:	cbnz	r3, 122d6 <strlen+0x96>
   1229c:	ldrd	r2, r3, [r1, #16]
   122a0:	uadd8	r2, r2, ip
   122a4:	add.w	r0, r0, #8
   122a8:	sel	r2, r4, ip
   122ac:	uadd8	r3, r3, ip
   122b0:	sel	r3, r2, ip
   122b4:	cbnz	r3, 122d6 <strlen+0x96>
   122b6:	ldrd	r2, r3, [r1, #24]
   122ba:	add.w	r1, r1, #32
   122be:	uadd8	r2, r2, ip
   122c2:	add.w	r0, r0, #8
   122c6:	sel	r2, r4, ip
   122ca:	uadd8	r3, r3, ip
   122ce:	sel	r3, r2, ip
   122d2:	cmp	r3, #0
   122d4:	beq.n	12264 <strlen+0x24>
   122d6:	cmp	r2, #0
   122d8:	itt	eq
   122da:	addeq	r0, #4
   122dc:	moveq	r2, r3
   122de:	rev	r2, r2
   122e0:	clz	r2, r2
   122e4:	ldrd	r4, r5, [sp], #8
   122e8:	add.w	r0, r0, r2, lsr #3
   122ec:	bx	lr
   122ee:	ldrd	r2, r3, [r1]
   122f2:	and.w	r5, r4, #3
   122f6:	rsb	r0, r4, #0
   122fa:	mov.w	r5, r5, lsl #3
   122fe:	tst.w	r4, #4
   12302:	pld	[r1, #64]	; 0x40
   12306:	lsl.w	r5, ip, r5
   1230a:	orn	r2, r2, r5
   1230e:	itt	ne
   12310:	ornne	r3, r3, r5
   12314:	movne	r2, ip
   12316:	mov.w	r4, #0
   1231a:	b.n	12270 <strlen+0x30>

0001231c <strncmp>:
   1231c:	cmp	r2, #0
   1231e:	beq.n	123a4 <strncmp+0x88>
   12320:	orr.w	r3, r0, r1
   12324:	ands.w	r3, r3, #3
   12328:	push	{r4, r5, r6, r7}
   1232a:	bne.n	12378 <strncmp+0x5c>
   1232c:	cmp	r2, #3
   1232e:	bls.n	12378 <strncmp+0x5c>
   12330:	ldr	r4, [r0, #0]
   12332:	ldr	r5, [r1, #0]
   12334:	cmp	r4, r5
   12336:	bne.n	12378 <strncmp+0x5c>
   12338:	subs	r2, #4
   1233a:	beq.n	123a8 <strncmp+0x8c>
   1233c:	sub.w	r5, r4, #16843009	; 0x1010101
   12340:	bic.w	r4, r5, r4
   12344:	tst.w	r4, #2155905152	; 0x80808080
   12348:	bne.n	123ae <strncmp+0x92>
   1234a:	adds	r7, r0, #4
   1234c:	adds	r5, r1, #4
   1234e:	b.n	1236c <strncmp+0x50>
   12350:	ldr.w	r3, [r7], #4
   12354:	ldr	r6, [r1, #0]
   12356:	sub.w	r4, r3, #16843009	; 0x1010101
   1235a:	cmp	r3, r6
   1235c:	bic.w	r4, r4, r3
   12360:	bne.n	12378 <strncmp+0x5c>
   12362:	subs	r2, #4
   12364:	beq.n	123a8 <strncmp+0x8c>
   12366:	tst.w	r4, #2155905152	; 0x80808080
   1236a:	bne.n	123b4 <strncmp+0x98>
   1236c:	cmp	r2, #3
   1236e:	mov	r1, r5
   12370:	mov	r0, r7
   12372:	add.w	r5, r5, #4
   12376:	bhi.n	12350 <strncmp+0x34>
   12378:	ldrb	r3, [r0, #0]
   1237a:	ldrb	r4, [r1, #0]
   1237c:	cmp	r4, r3
   1237e:	add.w	r2, r2, #4294967295
   12382:	bne.n	1239e <strncmp+0x82>
   12384:	cbz	r2, 123a8 <strncmp+0x8c>
   12386:	cbnz	r4, 1238e <strncmp+0x72>
   12388:	b.n	123b8 <strncmp+0x9c>
   1238a:	cbz	r2, 123a8 <strncmp+0x8c>
   1238c:	cbz	r3, 123ae <strncmp+0x92>
   1238e:	ldrb.w	r3, [r0, #1]!
   12392:	ldrb.w	r4, [r1, #1]!
   12396:	cmp	r3, r4
   12398:	add.w	r2, r2, #4294967295
   1239c:	beq.n	1238a <strncmp+0x6e>
   1239e:	subs	r0, r3, r4
   123a0:	pop	{r4, r5, r6, r7}
   123a2:	bx	lr
   123a4:	mov	r0, r2
   123a6:	bx	lr
   123a8:	mov	r0, r2
   123aa:	pop	{r4, r5, r6, r7}
   123ac:	bx	lr
   123ae:	mov	r0, r3
   123b0:	pop	{r4, r5, r6, r7}
   123b2:	bx	lr
   123b4:	movs	r0, #0
   123b6:	b.n	123a0 <strncmp+0x84>
   123b8:	mov	r0, r4
   123ba:	b.n	123a0 <strncmp+0x84>

000123bc <strrchr>:
   123bc:	cbz	r1, 123dc <strrchr+0x20>
   123be:	push	{r3, r4, r5, lr}
   123c0:	mov	r3, r0
   123c2:	mov	r4, r1
   123c4:	movs	r5, #0
   123c6:	b.n	123cc <strrchr+0x10>
   123c8:	adds	r3, r0, #1
   123ca:	mov	r5, r0
   123cc:	mov	r0, r3
   123ce:	mov	r1, r4
   123d0:	bl	11d3c <strchr>
   123d4:	cmp	r0, #0
   123d6:	bne.n	123c8 <strrchr+0xc>
   123d8:	mov	r0, r5
   123da:	pop	{r3, r4, r5, pc}
   123dc:	b.w	11d3c <strchr>

000123e0 <strspn>:
   123e0:	push	{r4, r5, r6}
   123e2:	ldrb	r4, [r0, #0]
   123e4:	cbz	r4, 12410 <strspn+0x30>
   123e6:	ldrb	r6, [r1, #0]
   123e8:	mov	r5, r0
   123ea:	cbz	r6, 12400 <strspn+0x20>
   123ec:	cmp	r4, r6
   123ee:	beq.n	12406 <strspn+0x26>
   123f0:	mov	r2, r1
   123f2:	b.n	123f8 <strspn+0x18>
   123f4:	cmp	r3, r4
   123f6:	beq.n	12406 <strspn+0x26>
   123f8:	ldrb.w	r3, [r2, #1]!
   123fc:	cmp	r3, #0
   123fe:	bne.n	123f4 <strspn+0x14>
   12400:	subs	r0, r5, r0
   12402:	pop	{r4, r5, r6}
   12404:	bx	lr
   12406:	ldrb.w	r4, [r5, #1]!
   1240a:	cmp	r4, #0
   1240c:	bne.n	123ea <strspn+0xa>
   1240e:	b.n	12400 <strspn+0x20>
   12410:	mov	r0, r4
   12412:	b.n	12402 <strspn+0x22>
   12414:			; <UNDEFINED> instruction: 0xffffffff

00012418 <_svfprintf_r>:
   12418:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1241c:	sub	sp, #260	; 0x104
   1241e:	mov	r4, r1
   12420:	str	r1, [sp, #20]
   12422:	mov	r5, r2
   12424:	str	r3, [sp, #40]	; 0x28
   12426:	str	r0, [sp, #24]
   12428:	bl	14e60 <_localeconv_r>
   1242c:	ldr	r3, [r0, #0]
   1242e:	str	r3, [sp, #76]	; 0x4c
   12430:	mov	r0, r3
   12432:	bl	12240 <strlen>
   12436:	ldrh	r3, [r4, #12]
   12438:	str	r0, [sp, #72]	; 0x48
   1243a:	lsls	r6, r3, #24
   1243c:	bpl.n	12446 <_svfprintf_r+0x2e>
   1243e:	ldr	r3, [r4, #16]
   12440:	cmp	r3, #0
   12442:	beq.w	136a8 <_svfprintf_r+0x1290>
   12446:	vldr	d7, [pc, #664]	; 126e0 <_svfprintf_r+0x2c8>
   1244a:	movs	r3, #0
   1244c:	vstr	d7, [sp, #64]	; 0x40
   12450:	str	r3, [sp, #56]	; 0x38
   12452:	str	r3, [sp, #148]	; 0x94
   12454:	str	r3, [sp, #144]	; 0x90
   12456:	str	r3, [sp, #84]	; 0x54
   12458:	str	r3, [sp, #28]
   1245a:	ldr.w	sl, [pc, #656]	; 126ec <_svfprintf_r+0x2d4>
   1245e:	add	r3, sp, #192	; 0xc0
   12460:	str	r3, [sp, #140]	; 0x8c
   12462:	mov	r9, r3
   12464:	mov	r8, r5
   12466:	ldrb.w	r3, [r8]
   1246a:	mov	r4, r8
   1246c:	cbz	r3, 124aa <_svfprintf_r+0x92>
   1246e:	cmp	r3, #37	; 0x25
   12470:	bne.n	12478 <_svfprintf_r+0x60>
   12472:	b.n	124aa <_svfprintf_r+0x92>
   12474:	cmp	r3, #37	; 0x25
   12476:	beq.n	12480 <_svfprintf_r+0x68>
   12478:	ldrb.w	r3, [r4, #1]!
   1247c:	cmp	r3, #0
   1247e:	bne.n	12474 <_svfprintf_r+0x5c>
   12480:	rsb	r5, r8, r4
   12484:	cbz	r5, 124aa <_svfprintf_r+0x92>
   12486:	ldr	r3, [sp, #144]	; 0x90
   12488:	ldr	r2, [sp, #148]	; 0x94
   1248a:	str.w	r8, [r9]
   1248e:	adds	r3, #1
   12490:	add	r2, r5
   12492:	cmp	r3, #7
   12494:	str.w	r5, [r9, #4]
   12498:	str	r2, [sp, #148]	; 0x94
   1249a:	str	r3, [sp, #144]	; 0x90
   1249c:	bgt.w	125ec <_svfprintf_r+0x1d4>
   124a0:	add.w	r9, r9, #8
   124a4:	ldr	r3, [sp, #28]
   124a6:	add	r3, r5
   124a8:	str	r3, [sp, #28]
   124aa:	ldrb	r3, [r4, #0]
   124ac:	cmp	r3, #0
   124ae:	beq.w	125fe <_svfprintf_r+0x1e6>
   124b2:	movs	r3, #0
   124b4:	mov	r2, r3
   124b6:	strb.w	r3, [sp, #111]	; 0x6f
   124ba:	mov	r1, r3
   124bc:	str	r3, [sp, #32]
   124be:	str	r3, [sp, #12]
   124c0:	mov.w	fp, #4294967295
   124c4:	ldrb	r3, [r4, #1]
   124c6:	add.w	r8, r4, #1
   124ca:	mov	r5, fp
   124cc:	add.w	r8, r8, #1
   124d0:	sub.w	r0, r3, #32
   124d4:	cmp	r0, #88	; 0x58
   124d6:	bhi.w	12d42 <_svfprintf_r+0x92a>
   124da:	tbh	[pc, r0, lsl #1]
   124de:	.short	0x03a0
   124e0:	.word	0x04320432
   124e4:	.word	0x043203a8
   124e8:	.word	0x04320432
   124ec:	.word	0x04320432
   124f0:	.word	0x03af0432
   124f4:	.word	0x043203bd
   124f8:	.word	0x00e2005d
   124fc:	.word	0x01090432
   12500:	.word	0x01100110
   12504:	.word	0x01100110
   12508:	.word	0x01100110
   1250c:	.word	0x01100110
   12510:	.word	0x04320110
   12514:	.word	0x04320432
   12518:	.word	0x04320432
   1251c:	.word	0x04320432
   12520:	.word	0x04320432
   12524:	.word	0x01200432
   12528:	.word	0x04320286
   1252c:	.word	0x04320286
   12530:	.word	0x04320432
   12534:	.word	0x02d40432
   12538:	.word	0x04320432
   1253c:	.word	0x043202e5
   12540:	.word	0x04320432
   12544:	.word	0x04320432
   12548:	.word	0x0432030f
   1254c:	.word	0x033d0432
   12550:	.word	0x04320432
   12554:	.word	0x04320432
   12558:	.word	0x04320432
   1255c:	.word	0x04320432
   12560:	.word	0x04320432
   12564:	.word	0x0391037e
   12568:	.word	0x02860286
   1256c:	.word	0x03990286
   12570:	.word	0x04320391
   12574:	.word	0x04070432
   12578:	.word	0x04120432
   1257c:	.word	0x006400a3
   12580:	.word	0x043203c2
   12584:	.word	0x043203c9
   12588:	.word	0x043203ea
   1258c:	.word	0x03f20432
   12590:	ldr	r0, [sp, #32]
   12592:	str	r3, [sp, #40]	; 0x28
   12594:	negs	r0, r0
   12596:	str	r0, [sp, #32]
   12598:	ldr	r3, [sp, #12]
   1259a:	orr.w	r3, r3, #4
   1259e:	str	r3, [sp, #12]
   125a0:	ldrb.w	r3, [r8]
   125a4:	b.n	124cc <_svfprintf_r+0xb4>
   125a6:	ldr	r0, [sp, #40]	; 0x28
   125a8:	mov	fp, r5
   125aa:	movs	r1, #0
   125ac:	ldr	r4, [r0, #0]
   125ae:	strb.w	r1, [sp, #111]	; 0x6f
   125b2:	adds	r7, r0, #4
   125b4:	ldr	r0, [sp, #12]
   125b6:	movs	r3, #48	; 0x30
   125b8:	movs	r2, #120	; 0x78
   125ba:	cmp	fp, r1
   125bc:	strb.w	r3, [sp, #112]	; 0x70
   125c0:	mov.w	r5, #0
   125c4:	strb.w	r2, [sp, #113]	; 0x71
   125c8:	orr.w	r3, r0, #2
   125cc:	blt.w	12d7c <_svfprintf_r+0x964>
   125d0:	bic.w	r3, r0, #128	; 0x80
   125d4:	orr.w	r3, r3, #2
   125d8:	str	r3, [sp, #12]
   125da:	orrs.w	r3, r4, r5
   125de:	str	r7, [sp, #40]	; 0x28
   125e0:	beq.w	12d28 <_svfprintf_r+0x910>
   125e4:	mov	r7, r1
   125e6:	str	r2, [sp, #52]	; 0x34
   125e8:	ldr	r0, [pc, #252]	; (126e8 <_svfprintf_r+0x2d0>)
   125ea:	b.n	12bba <_svfprintf_r+0x7a2>
   125ec:	add	r2, sp, #140	; 0x8c
   125ee:	ldr	r1, [sp, #20]
   125f0:	ldr	r0, [sp, #24]
   125f2:	bl	154a0 <__ssprint_r>
   125f6:	cbnz	r0, 1260c <_svfprintf_r+0x1f4>
   125f8:	add.w	r9, sp, #192	; 0xc0
   125fc:	b.n	124a4 <_svfprintf_r+0x8c>
   125fe:	ldr	r3, [sp, #148]	; 0x94
   12600:	cbz	r3, 1260c <_svfprintf_r+0x1f4>
   12602:	ldr	r0, [sp, #24]
   12604:	ldr	r1, [sp, #20]
   12606:	add	r2, sp, #140	; 0x8c
   12608:	bl	154a0 <__ssprint_r>
   1260c:	ldr	r3, [sp, #20]
   1260e:	ldrh	r3, [r3, #12]
   12610:	tst.w	r3, #64	; 0x40
   12614:	ldr	r3, [sp, #28]
   12616:	it	ne
   12618:	movne.w	r3, #4294967295
   1261c:	mov	r0, r3
   1261e:	add	sp, #260	; 0x104
   12620:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12624:	str	r3, [sp, #52]	; 0x34
   12626:	mov	fp, r5
   12628:	cmp	r2, #0
   1262a:	bne.w	13a94 <_svfprintf_r+0x167c>
   1262e:	ldr	r2, [sp, #12]
   12630:	ands.w	r3, r2, #32
   12634:	beq.w	12ac4 <_svfprintf_r+0x6ac>
   12638:	ldr	r7, [sp, #40]	; 0x28
   1263a:	adds	r7, #7
   1263c:	bic.w	r3, r7, #7
   12640:	movs	r7, #0
   12642:	add.w	r1, r3, #8
   12646:	cmp	fp, r7
   12648:	str	r1, [sp, #40]	; 0x28
   1264a:	ldrd	r4, r5, [r3]
   1264e:	strb.w	r7, [sp, #111]	; 0x6f
   12652:	blt.w	1351a <_svfprintf_r+0x1102>
   12656:	bic.w	r3, r2, #128	; 0x80
   1265a:	str	r3, [sp, #12]
   1265c:	orrs.w	r3, r4, r5
   12660:	beq.w	12d6c <_svfprintf_r+0x954>
   12664:	add	r6, sp, #192	; 0xc0
   12666:	lsrs	r2, r4, #3
   12668:	orr.w	r2, r2, r5, lsl #29
   1266c:	lsrs	r1, r5, #3
   1266e:	and.w	r3, r4, #7
   12672:	mov	r5, r1
   12674:	mov	r4, r2
   12676:	adds	r3, #48	; 0x30
   12678:	orrs.w	r2, r4, r5
   1267c:	strb.w	r3, [r6, #-1]!
   12680:	bne.n	12666 <_svfprintf_r+0x24e>
   12682:	ldr	r2, [sp, #12]
   12684:	lsls	r1, r2, #31
   12686:	bpl.w	127a8 <_svfprintf_r+0x390>
   1268a:	cmp	r3, #48	; 0x30
   1268c:	beq.w	127a8 <_svfprintf_r+0x390>
   12690:	movs	r2, #48	; 0x30
   12692:	subs	r3, r6, #1
   12694:	strb.w	r2, [r6, #-1]
   12698:	add	r2, sp, #192	; 0xc0
   1269a:	subs	r2, r2, r3
   1269c:	str	r2, [sp, #36]	; 0x24
   1269e:	mov	r6, r3
   126a0:	b.n	127ae <_svfprintf_r+0x396>
   126a2:	ldrb.w	r3, [r8]
   126a6:	cmp	r3, #42	; 0x2a
   126a8:	add.w	r4, r8, #1
   126ac:	beq.w	13a78 <_svfprintf_r+0x1660>
   126b0:	sub.w	r0, r3, #48	; 0x30
   126b4:	cmp	r0, #9
   126b6:	it	ls
   126b8:	movls	r5, #0
   126ba:	bhi.w	139ca <_svfprintf_r+0x15b2>
   126be:	ldrb.w	r3, [r4], #1
   126c2:	add.w	r5, r5, r5, lsl #2
   126c6:	add.w	r5, r0, r5, lsl #1
   126ca:	sub.w	r0, r3, #48	; 0x30
   126ce:	cmp	r0, #9
   126d0:	bls.n	126be <_svfprintf_r+0x2a6>
   126d2:	orr.w	r5, r5, r5, asr #31
   126d6:	mov	r8, r4
   126d8:	b.n	124d0 <_svfprintf_r+0xb8>
   126da:	nop
   126dc:	nop.w
	...
   126e8:	.word	0x00015ec8
   126ec:	.word	0x00015e94
   126f0:	ldr	r3, [sp, #12]
   126f2:	orr.w	r3, r3, #128	; 0x80
   126f6:	str	r3, [sp, #12]
   126f8:	ldrb.w	r3, [r8]
   126fc:	b.n	124cc <_svfprintf_r+0xb4>
   126fe:	sub.w	r0, r3, #48	; 0x30
   12702:	movs	r3, #0
   12704:	mov	r4, r3
   12706:	ldrb.w	r3, [r8], #1
   1270a:	add.w	r4, r4, r4, lsl #2
   1270e:	add.w	r4, r0, r4, lsl #1
   12712:	sub.w	r0, r3, #48	; 0x30
   12716:	cmp	r0, #9
   12718:	bls.n	12706 <_svfprintf_r+0x2ee>
   1271a:	str	r4, [sp, #32]
   1271c:	b.n	124d0 <_svfprintf_r+0xb8>
   1271e:	str	r3, [sp, #52]	; 0x34
   12720:	mov	fp, r5
   12722:	cmp	r2, #0
   12724:	bne.w	13ab0 <_svfprintf_r+0x1698>
   12728:	ldr	r3, [sp, #12]
   1272a:	orr.w	r3, r3, #16
   1272e:	str	r3, [sp, #12]
   12730:	ldr	r3, [sp, #12]
   12732:	lsls	r4, r3, #26
   12734:	bpl.w	131a6 <_svfprintf_r+0xd8e>
   12738:	ldr	r7, [sp, #40]	; 0x28
   1273a:	adds	r7, #7
   1273c:	bic.w	r7, r7, #7
   12740:	ldrd	r2, r3, [r7]
   12744:	add.w	r1, r7, #8
   12748:	str	r1, [sp, #40]	; 0x28
   1274a:	mov	r4, r2
   1274c:	mov	r5, r3
   1274e:	cmp	r2, #0
   12750:	sbcs.w	r3, r3, #0
   12754:	blt.w	1321c <_svfprintf_r+0xe04>
   12758:	cmp.w	fp, #0
   1275c:	ldrb.w	r7, [sp, #111]	; 0x6f
   12760:	blt.w	131e2 <_svfprintf_r+0xdca>
   12764:	ldr	r3, [sp, #12]
   12766:	bic.w	r3, r3, #128	; 0x80
   1276a:	str	r3, [sp, #12]
   1276c:	orrs.w	r3, r4, r5
   12770:	beq.w	12b44 <_svfprintf_r+0x72c>
   12774:	cmp	r5, #0
   12776:	it	eq
   12778:	cmpeq	r4, #10
   1277a:	bcc.w	12b4e <_svfprintf_r+0x736>
   1277e:	add	r6, sp, #192	; 0xc0
   12780:	mov	r0, r4
   12782:	mov	r1, r5
   12784:	movs	r2, #10
   12786:	movs	r3, #0
   12788:	bl	10c88 <__aeabi_uldivmod>
   1278c:	adds	r2, #48	; 0x30
   1278e:	strb.w	r2, [r6, #-1]!
   12792:	mov	r0, r4
   12794:	mov	r1, r5
   12796:	movs	r3, #0
   12798:	movs	r2, #10
   1279a:	bl	10c88 <__aeabi_uldivmod>
   1279e:	mov	r4, r0
   127a0:	mov	r5, r1
   127a2:	orrs.w	r3, r4, r5
   127a6:	bne.n	12780 <_svfprintf_r+0x368>
   127a8:	add	r3, sp, #192	; 0xc0
   127aa:	subs	r3, r3, r6
   127ac:	str	r3, [sp, #36]	; 0x24
   127ae:	ldr	r3, [sp, #36]	; 0x24
   127b0:	cmp	r3, fp
   127b2:	it	lt
   127b4:	movlt	r3, fp
   127b6:	str	r3, [sp, #16]
   127b8:	movs	r3, #0
   127ba:	str	r3, [sp, #60]	; 0x3c
   127bc:	cbz	r7, 127c4 <_svfprintf_r+0x3ac>
   127be:	ldr	r3, [sp, #16]
   127c0:	adds	r3, #1
   127c2:	str	r3, [sp, #16]
   127c4:	ldr	r3, [sp, #12]
   127c6:	ands.w	r3, r3, #2
   127ca:	str	r3, [sp, #44]	; 0x2c
   127cc:	beq.n	127d4 <_svfprintf_r+0x3bc>
   127ce:	ldr	r3, [sp, #16]
   127d0:	adds	r3, #2
   127d2:	str	r3, [sp, #16]
   127d4:	ldr	r3, [sp, #12]
   127d6:	ands.w	r3, r3, #132	; 0x84
   127da:	str	r3, [sp, #48]	; 0x30
   127dc:	bne.w	12d96 <_svfprintf_r+0x97e>
   127e0:	ldr	r3, [sp, #32]
   127e2:	ldr	r2, [sp, #16]
   127e4:	subs	r5, r3, r2
   127e6:	cmp	r5, #0
   127e8:	ble.w	12d96 <_svfprintf_r+0x97e>
   127ec:	cmp	r5, #16
   127ee:	ldr	r1, [sp, #148]	; 0x94
   127f0:	ldr	r2, [sp, #144]	; 0x90
   127f2:	ldr	r7, [pc, #672]	; (12a94 <_svfprintf_r+0x67c>)
   127f4:	ble.n	12846 <_svfprintf_r+0x42e>
   127f6:	str	r6, [sp, #80]	; 0x50
   127f8:	mov	r0, r9
   127fa:	movs	r4, #16
   127fc:	mov	r9, r7
   127fe:	ldr	r6, [sp, #20]
   12800:	mov	r7, r5
   12802:	ldr	r5, [sp, #24]
   12804:	b.n	12810 <_svfprintf_r+0x3f8>
   12806:	subs	r7, #16
   12808:	cmp	r7, #16
   1280a:	add.w	r0, r0, #8
   1280e:	ble.n	1283e <_svfprintf_r+0x426>
   12810:	adds	r2, #1
   12812:	ldr	r3, [pc, #640]	; (12a94 <_svfprintf_r+0x67c>)
   12814:	str	r2, [sp, #144]	; 0x90
   12816:	adds	r1, #16
   12818:	cmp	r2, #7
   1281a:	str	r1, [sp, #148]	; 0x94
   1281c:	stmia.w	r0, {r3, r4}
   12820:	ble.n	12806 <_svfprintf_r+0x3ee>
   12822:	add	r2, sp, #140	; 0x8c
   12824:	mov	r1, r6
   12826:	mov	r0, r5
   12828:	bl	154a0 <__ssprint_r>
   1282c:	cmp	r0, #0
   1282e:	bne.w	1260c <_svfprintf_r+0x1f4>
   12832:	subs	r7, #16
   12834:	cmp	r7, #16
   12836:	ldr	r1, [sp, #148]	; 0x94
   12838:	ldr	r2, [sp, #144]	; 0x90
   1283a:	add	r0, sp, #192	; 0xc0
   1283c:	bgt.n	12810 <_svfprintf_r+0x3f8>
   1283e:	ldr	r6, [sp, #80]	; 0x50
   12840:	mov	r5, r7
   12842:	mov	r7, r9
   12844:	mov	r9, r0
   12846:	adds	r2, #1
   12848:	adds	r4, r5, r1
   1284a:	cmp	r2, #7
   1284c:	str	r4, [sp, #148]	; 0x94
   1284e:	str	r2, [sp, #144]	; 0x90
   12850:	str.w	r7, [r9]
   12854:	str.w	r5, [r9, #4]
   12858:	bgt.w	130b6 <_svfprintf_r+0xc9e>
   1285c:	ldrb.w	r7, [sp, #111]	; 0x6f
   12860:	add.w	r9, r9, #8
   12864:	cbz	r7, 12884 <_svfprintf_r+0x46c>
   12866:	ldr	r3, [sp, #144]	; 0x90
   12868:	adds	r3, #1
   1286a:	adds	r4, #1
   1286c:	add.w	r1, sp, #111	; 0x6f
   12870:	movs	r2, #1
   12872:	cmp	r3, #7
   12874:	str	r4, [sp, #148]	; 0x94
   12876:	str	r3, [sp, #144]	; 0x90
   12878:	stmia.w	r9, {r1, r2}
   1287c:	bgt.w	12fca <_svfprintf_r+0xbb2>
   12880:	add.w	r9, r9, #8
   12884:	ldr	r3, [sp, #44]	; 0x2c
   12886:	cbz	r3, 128a4 <_svfprintf_r+0x48c>
   12888:	ldr	r3, [sp, #144]	; 0x90
   1288a:	adds	r3, #1
   1288c:	adds	r4, #2
   1288e:	add	r1, sp, #112	; 0x70
   12890:	movs	r2, #2
   12892:	cmp	r3, #7
   12894:	str	r4, [sp, #148]	; 0x94
   12896:	str	r3, [sp, #144]	; 0x90
   12898:	stmia.w	r9, {r1, r2}
   1289c:	bgt.w	12fe2 <_svfprintf_r+0xbca>
   128a0:	add.w	r9, r9, #8
   128a4:	ldr	r3, [sp, #48]	; 0x30
   128a6:	cmp	r3, #128	; 0x80
   128a8:	beq.w	12e6e <_svfprintf_r+0xa56>
   128ac:	ldr	r3, [sp, #36]	; 0x24
   128ae:	rsb	r7, r3, fp
   128b2:	cmp	r7, #0
   128b4:	ble.n	1291e <_svfprintf_r+0x506>
   128b6:	ldr	r2, [pc, #480]	; (12a98 <_svfprintf_r+0x680>)
   128b8:	ldr	r3, [sp, #144]	; 0x90
   128ba:	str	r2, [sp, #44]	; 0x2c
   128bc:	cmp	r7, #16
   128be:	ble.n	12906 <_svfprintf_r+0x4ee>
   128c0:	mov	r2, r4
   128c2:	mov.w	fp, #16
   128c6:	ldr	r5, [sp, #24]
   128c8:	ldr	r4, [sp, #20]
   128ca:	b.n	128d6 <_svfprintf_r+0x4be>
   128cc:	subs	r7, #16
   128ce:	cmp	r7, #16
   128d0:	add.w	r9, r9, #8
   128d4:	ble.n	12904 <_svfprintf_r+0x4ec>
   128d6:	adds	r3, #1
   128d8:	adds	r2, #16
   128da:	cmp	r3, #7
   128dc:	str	r2, [sp, #148]	; 0x94
   128de:	str	r3, [sp, #144]	; 0x90
   128e0:	stmia.w	r9, {sl, fp}
   128e4:	ble.n	128cc <_svfprintf_r+0x4b4>
   128e6:	add	r2, sp, #140	; 0x8c
   128e8:	mov	r1, r4
   128ea:	mov	r0, r5
   128ec:	bl	154a0 <__ssprint_r>
   128f0:	cmp	r0, #0
   128f2:	bne.w	1260c <_svfprintf_r+0x1f4>
   128f6:	subs	r7, #16
   128f8:	cmp	r7, #16
   128fa:	ldr	r2, [sp, #148]	; 0x94
   128fc:	ldr	r3, [sp, #144]	; 0x90
   128fe:	add.w	r9, sp, #192	; 0xc0
   12902:	bgt.n	128d6 <_svfprintf_r+0x4be>
   12904:	mov	r4, r2
   12906:	adds	r3, #1
   12908:	ldr	r2, [sp, #44]	; 0x2c
   1290a:	str	r3, [sp, #144]	; 0x90
   1290c:	add	r4, r7
   1290e:	cmp	r3, #7
   12910:	str	r4, [sp, #148]	; 0x94
   12912:	stmia.w	r9, {r2, r7}
   12916:	bgt.w	12fb2 <_svfprintf_r+0xb9a>
   1291a:	add.w	r9, r9, #8
   1291e:	ldr	r3, [sp, #12]
   12920:	lsls	r2, r3, #23
   12922:	bmi.w	12d9a <_svfprintf_r+0x982>
   12926:	ldr	r3, [sp, #144]	; 0x90
   12928:	ldr	r1, [sp, #36]	; 0x24
   1292a:	str.w	r6, [r9]
   1292e:	adds	r3, #1
   12930:	add	r4, r1
   12932:	cmp	r3, #7
   12934:	str	r4, [sp, #148]	; 0x94
   12936:	str.w	r1, [r9, #4]
   1293a:	str	r3, [sp, #144]	; 0x90
   1293c:	bgt.w	12f86 <_svfprintf_r+0xb6e>
   12940:	add.w	r9, r9, #8
   12944:	ldr	r3, [sp, #12]
   12946:	lsls	r1, r3, #29
   12948:	bpl.n	129ca <_svfprintf_r+0x5b2>
   1294a:	ldr	r3, [sp, #32]
   1294c:	ldr	r2, [sp, #16]
   1294e:	subs	r5, r3, r2
   12950:	cmp	r5, #0
   12952:	ble.n	129ca <_svfprintf_r+0x5b2>
   12954:	cmp	r5, #16
   12956:	ldr	r3, [sp, #144]	; 0x90
   12958:	ldr	r7, [pc, #312]	; (12a94 <_svfprintf_r+0x67c>)
   1295a:	ble.n	129a4 <_svfprintf_r+0x58c>
   1295c:	mov	r2, r4
   1295e:	movs	r6, #16
   12960:	ldr.w	fp, [sp, #24]
   12964:	ldr	r4, [sp, #20]
   12966:	b.n	12972 <_svfprintf_r+0x55a>
   12968:	subs	r5, #16
   1296a:	cmp	r5, #16
   1296c:	add.w	r9, r9, #8
   12970:	ble.n	129a2 <_svfprintf_r+0x58a>
   12972:	adds	r3, #1
   12974:	ldr	r1, [pc, #284]	; (12a94 <_svfprintf_r+0x67c>)
   12976:	str	r3, [sp, #144]	; 0x90
   12978:	adds	r2, #16
   1297a:	cmp	r3, #7
   1297c:	str	r2, [sp, #148]	; 0x94
   1297e:	stmia.w	r9, {r1, r6}
   12982:	ble.n	12968 <_svfprintf_r+0x550>
   12984:	add	r2, sp, #140	; 0x8c
   12986:	mov	r1, r4
   12988:	mov	r0, fp
   1298a:	bl	154a0 <__ssprint_r>
   1298e:	cmp	r0, #0
   12990:	bne.w	1260c <_svfprintf_r+0x1f4>
   12994:	subs	r5, #16
   12996:	cmp	r5, #16
   12998:	ldr	r2, [sp, #148]	; 0x94
   1299a:	ldr	r3, [sp, #144]	; 0x90
   1299c:	add.w	r9, sp, #192	; 0xc0
   129a0:	bgt.n	12972 <_svfprintf_r+0x55a>
   129a2:	mov	r4, r2
   129a4:	adds	r3, #1
   129a6:	add	r4, r5
   129a8:	cmp	r3, #7
   129aa:	str	r4, [sp, #148]	; 0x94
   129ac:	str	r3, [sp, #144]	; 0x90
   129ae:	str.w	r7, [r9]
   129b2:	str.w	r5, [r9, #4]
   129b6:	ble.n	129ca <_svfprintf_r+0x5b2>
   129b8:	add	r2, sp, #140	; 0x8c
   129ba:	ldr	r1, [sp, #20]
   129bc:	ldr	r0, [sp, #24]
   129be:	bl	154a0 <__ssprint_r>
   129c2:	cmp	r0, #0
   129c4:	bne.w	1260c <_svfprintf_r+0x1f4>
   129c8:	ldr	r4, [sp, #148]	; 0x94
   129ca:	ldr	r3, [sp, #28]
   129cc:	ldr	r2, [sp, #32]
   129ce:	ldr	r1, [sp, #16]
   129d0:	cmp	r2, r1
   129d2:	ite	ge
   129d4:	addge	r3, r3, r2
   129d6:	addlt	r3, r3, r1
   129d8:	str	r3, [sp, #28]
   129da:	cmp	r4, #0
   129dc:	bne.w	12f9e <_svfprintf_r+0xb86>
   129e0:	movs	r3, #0
   129e2:	str	r3, [sp, #144]	; 0x90
   129e4:	add.w	r9, sp, #192	; 0xc0
   129e8:	b.n	12466 <_svfprintf_r+0x4e>
   129ea:	str	r3, [sp, #52]	; 0x34
   129ec:	mov	fp, r5
   129ee:	cmp	r2, #0
   129f0:	bne.w	13ab8 <_svfprintf_r+0x16a0>
   129f4:	ldr	r3, [sp, #12]
   129f6:	ldr	r7, [sp, #40]	; 0x28
   129f8:	lsls	r2, r3, #28
   129fa:	add.w	r7, r7, #7
   129fe:	bpl.w	134ea <_svfprintf_r+0x10d2>
   12a02:	bic.w	r3, r7, #7
   12a06:	vldr	d7, [r3]
   12a0a:	vstr	d7, [sp, #64]	; 0x40
   12a0e:	add.w	r2, r3, #8
   12a12:	str	r2, [sp, #40]	; 0x28
   12a14:	ldrd	r1, r2, [sp, #64]	; 0x40
   12a18:	bic.w	r3, r2, #2147483648	; 0x80000000
   12a1c:	str	r1, [sp, #88]	; 0x58
   12a1e:	str	r3, [sp, #92]	; 0x5c
   12a20:	ldrd	r4, r5, [sp, #88]	; 0x58
   12a24:	mov.w	r2, #4294967295
   12a28:	mov	r0, r4
   12a2a:	mov	r1, r5
   12a2c:	ldr	r3, [pc, #108]	; (12a9c <_svfprintf_r+0x684>)
   12a2e:	bl	10c0c <__aeabi_dcmpun>
   12a32:	cmp	r0, #0
   12a34:	bne.w	133ec <_svfprintf_r+0xfd4>
   12a38:	mov.w	r2, #4294967295
   12a3c:	ldr	r3, [pc, #92]	; (12a9c <_svfprintf_r+0x684>)
   12a3e:	mov	r0, r4
   12a40:	mov	r1, r5
   12a42:	bl	10bd0 <__aeabi_dcmple>
   12a46:	cmp	r0, #0
   12a48:	bne.w	133ec <_svfprintf_r+0xfd4>
   12a4c:	movs	r2, #0
   12a4e:	movs	r3, #0
   12a50:	ldrd	r0, r1, [sp, #64]	; 0x40
   12a54:	bl	10bbc <__aeabi_dcmplt>
   12a58:	cmp	r0, #0
   12a5a:	bne.w	13902 <_svfprintf_r+0x14ea>
   12a5e:	ldrb.w	r7, [sp, #111]	; 0x6f
   12a62:	ldr	r6, [pc, #60]	; (12aa0 <_svfprintf_r+0x688>)
   12a64:	ldr	r3, [pc, #60]	; (12aa4 <_svfprintf_r+0x68c>)
   12a66:	ldr	r1, [sp, #12]
   12a68:	bic.w	r1, r1, #128	; 0x80
   12a6c:	str	r1, [sp, #12]
   12a6e:	ldr	r1, [sp, #52]	; 0x34
   12a70:	movs	r2, #3
   12a72:	mov.w	fp, #0
   12a76:	str	r2, [sp, #16]
   12a78:	cmp	r1, #71	; 0x47
   12a7a:	it	le
   12a7c:	movle	r6, r3
   12a7e:	str	r2, [sp, #36]	; 0x24
   12a80:	str.w	fp, [sp, #60]	; 0x3c
   12a84:	b.n	127bc <_svfprintf_r+0x3a4>
   12a86:	ldr	r3, [sp, #12]
   12a88:	orr.w	r3, r3, #8
   12a8c:	str	r3, [sp, #12]
   12a8e:	ldrb.w	r3, [r8]
   12a92:	b.n	124cc <_svfprintf_r+0xb4>
   12a94:	.word	0x00015ee8
   12a98:	.word	0x00015e94
   12a9c:	.word	0x7fefffff
   12aa0:	.word	0x00015ea8
   12aa4:	.word	0x00015ea4
   12aa8:	str	r3, [sp, #52]	; 0x34
   12aaa:	mov	fp, r5
   12aac:	cmp	r2, #0
   12aae:	bne.w	13ad0 <_svfprintf_r+0x16b8>
   12ab2:	ldr	r3, [sp, #12]
   12ab4:	orr.w	r3, r3, #16
   12ab8:	str	r3, [sp, #12]
   12aba:	ldr	r2, [sp, #12]
   12abc:	ands.w	r3, r2, #32
   12ac0:	bne.w	12638 <_svfprintf_r+0x220>
   12ac4:	ldr	r1, [sp, #12]
   12ac6:	ands.w	r2, r1, #16
   12aca:	beq.w	13384 <_svfprintf_r+0xf6c>
   12ace:	ldr	r0, [sp, #40]	; 0x28
   12ad0:	strb.w	r3, [sp, #111]	; 0x6f
   12ad4:	cmp.w	fp, #0
   12ad8:	ldr	r4, [r0, #0]
   12ada:	add.w	r7, r0, #4
   12ade:	mov.w	r5, #0
   12ae2:	blt.w	13518 <_svfprintf_r+0x1100>
   12ae6:	mov	r2, r1
   12ae8:	bic.w	r2, r2, #128	; 0x80
   12aec:	str	r2, [sp, #12]
   12aee:	orrs.w	r2, r4, r5
   12af2:	str	r7, [sp, #40]	; 0x28
   12af4:	beq.w	12d6c <_svfprintf_r+0x954>
   12af8:	mov	r7, r3
   12afa:	b.n	12664 <_svfprintf_r+0x24c>
   12afc:	str	r3, [sp, #52]	; 0x34
   12afe:	mov	fp, r5
   12b00:	cmp	r2, #0
   12b02:	bne.w	13ac8 <_svfprintf_r+0x16b0>
   12b06:	ldr	r3, [sp, #12]
   12b08:	orr.w	r3, r3, #16
   12b0c:	str	r3, [sp, #12]
   12b0e:	ldr	r2, [sp, #12]
   12b10:	ands.w	r3, r2, #32
   12b14:	beq.w	13170 <_svfprintf_r+0xd58>
   12b18:	ldr	r7, [sp, #40]	; 0x28
   12b1a:	adds	r7, #7
   12b1c:	bic.w	r3, r7, #7
   12b20:	movs	r7, #0
   12b22:	add.w	r1, r3, #8
   12b26:	cmp	fp, r7
   12b28:	str	r1, [sp, #40]	; 0x28
   12b2a:	ldrd	r4, r5, [r3]
   12b2e:	strb.w	r7, [sp, #111]	; 0x6f
   12b32:	blt.w	131e2 <_svfprintf_r+0xdca>
   12b36:	bic.w	r3, r2, #128	; 0x80
   12b3a:	str	r3, [sp, #12]
   12b3c:	orrs.w	r3, r4, r5
   12b40:	bne.w	12774 <_svfprintf_r+0x35c>
   12b44:	cmp.w	fp, #0
   12b48:	beq.w	12d36 <_svfprintf_r+0x91e>
   12b4c:	movs	r4, #0
   12b4e:	add	r6, sp, #256	; 0x100
   12b50:	adds	r4, #48	; 0x30
   12b52:	strb.w	r4, [r6, #-65]!
   12b56:	b.n	127a8 <_svfprintf_r+0x390>
   12b58:	str	r3, [sp, #52]	; 0x34
   12b5a:	mov	fp, r5
   12b5c:	cmp	r2, #0
   12b5e:	bne.w	13ac0 <_svfprintf_r+0x16a8>
   12b62:	ldr	r3, [sp, #12]
   12b64:	ldr	r0, [pc, #700]	; (12e24 <_svfprintf_r+0xa0c>)
   12b66:	lsls	r5, r3, #26
   12b68:	bpl.w	12cd6 <_svfprintf_r+0x8be>
   12b6c:	ldr	r7, [sp, #40]	; 0x28
   12b6e:	adds	r7, #7
   12b70:	bic.w	r3, r7, #7
   12b74:	ldrd	r4, r5, [r3]
   12b78:	add.w	r2, r3, #8
   12b7c:	str	r2, [sp, #40]	; 0x28
   12b7e:	ldr	r2, [sp, #12]
   12b80:	ands.w	r7, r2, #1
   12b84:	beq.w	12ffa <_svfprintf_r+0xbe2>
   12b88:	orrs.w	r3, r4, r5
   12b8c:	beq.w	13594 <_svfprintf_r+0x117c>
   12b90:	ldrb.w	r2, [sp, #52]	; 0x34
   12b94:	strb.w	r2, [sp, #113]	; 0x71
   12b98:	movs	r7, #0
   12b9a:	ldr	r2, [sp, #12]
   12b9c:	strb.w	r7, [sp, #111]	; 0x6f
   12ba0:	movs	r3, #48	; 0x30
   12ba2:	cmp	fp, r7
   12ba4:	strb.w	r3, [sp, #112]	; 0x70
   12ba8:	orr.w	r3, r2, #2
   12bac:	blt.w	1390c <_svfprintf_r+0x14f4>
   12bb0:	bic.w	r3, r2, #128	; 0x80
   12bb4:	orr.w	r3, r3, #2
   12bb8:	str	r3, [sp, #12]
   12bba:	add	r6, sp, #192	; 0xc0
   12bbc:	lsrs	r3, r4, #4
   12bbe:	and.w	r1, r4, #15
   12bc2:	orr.w	r3, r3, r5, lsl #28
   12bc6:	lsrs	r2, r5, #4
   12bc8:	mov	r4, r3
   12bca:	mov	r5, r2
   12bcc:	ldrb	r3, [r0, r1]
   12bce:	strb.w	r3, [r6, #-1]!
   12bd2:	orrs.w	r3, r4, r5
   12bd6:	bne.n	12bbc <_svfprintf_r+0x7a4>
   12bd8:	b.n	127a8 <_svfprintf_r+0x390>
   12bda:	ldr	r1, [sp, #40]	; 0x28
   12bdc:	str	r3, [sp, #52]	; 0x34
   12bde:	ldr	r2, [r1, #0]
   12be0:	strb.w	r2, [sp, #152]	; 0x98
   12be4:	movs	r3, #0
   12be6:	mov	r2, r1
   12be8:	mov	r7, r3
   12bea:	strb.w	r3, [sp, #111]	; 0x6f
   12bee:	adds	r2, #4
   12bf0:	movs	r3, #1
   12bf2:	str	r3, [sp, #16]
   12bf4:	mov	fp, r7
   12bf6:	str	r7, [sp, #60]	; 0x3c
   12bf8:	str	r2, [sp, #40]	; 0x28
   12bfa:	str	r3, [sp, #36]	; 0x24
   12bfc:	add	r6, sp, #152	; 0x98
   12bfe:	b.n	127c4 <_svfprintf_r+0x3ac>
   12c00:	str	r3, [sp, #52]	; 0x34
   12c02:	mov	fp, r5
   12c04:	cmp	r2, #0
   12c06:	beq.w	12730 <_svfprintf_r+0x318>
   12c0a:	strb.w	r1, [sp, #111]	; 0x6f
   12c0e:	b.n	12730 <_svfprintf_r+0x318>
   12c10:	ldr	r3, [sp, #12]
   12c12:	orr.w	r3, r3, #64	; 0x40
   12c16:	str	r3, [sp, #12]
   12c18:	ldrb.w	r3, [r8]
   12c1c:	b.n	124cc <_svfprintf_r+0xb4>
   12c1e:	ldrb.w	r3, [r8]
   12c22:	cmp	r1, #0
   12c24:	bne.w	124cc <_svfprintf_r+0xb4>
   12c28:	movs	r2, #1
   12c2a:	movs	r1, #32
   12c2c:	b.n	124cc <_svfprintf_r+0xb4>
   12c2e:	ldr	r3, [sp, #12]
   12c30:	orr.w	r3, r3, #1
   12c34:	str	r3, [sp, #12]
   12c36:	ldrb.w	r3, [r8]
   12c3a:	b.n	124cc <_svfprintf_r+0xb4>
   12c3c:	ldr	r4, [sp, #40]	; 0x28
   12c3e:	ldr	r3, [r4, #0]
   12c40:	str	r3, [sp, #32]
   12c42:	mov	r0, r3
   12c44:	cmp	r0, #0
   12c46:	mov	r3, r4
   12c48:	add.w	r3, r3, #4
   12c4c:	blt.w	12590 <_svfprintf_r+0x178>
   12c50:	str	r3, [sp, #40]	; 0x28
   12c52:	ldrb.w	r3, [r8]
   12c56:	b.n	124cc <_svfprintf_r+0xb4>
   12c58:	ldrb.w	r3, [r8]
   12c5c:	movs	r2, #1
   12c5e:	movs	r1, #43	; 0x2b
   12c60:	b.n	124cc <_svfprintf_r+0xb4>
   12c62:	ldr	r3, [sp, #12]
   12c64:	orr.w	r3, r3, #32
   12c68:	str	r3, [sp, #12]
   12c6a:	ldrb.w	r3, [r8]
   12c6e:	b.n	124cc <_svfprintf_r+0xb4>
   12c70:	ldr	r2, [sp, #40]	; 0x28
   12c72:	str	r3, [sp, #52]	; 0x34
   12c74:	ldr	r6, [r2, #0]
   12c76:	movs	r4, #0
   12c78:	strb.w	r4, [sp, #111]	; 0x6f
   12c7c:	adds	r7, r2, #4
   12c7e:	cmp	r6, #0
   12c80:	beq.w	138bc <_svfprintf_r+0x14a4>
   12c84:	cmp	r5, #0
   12c86:	blt.w	1374c <_svfprintf_r+0x1334>
   12c8a:	mov	r2, r5
   12c8c:	mov	r1, r4
   12c8e:	mov	r0, r6
   12c90:	bl	115f0 <memchr>
   12c94:	cmp	r0, #0
   12c96:	beq.w	13960 <_svfprintf_r+0x1548>
   12c9a:	subs	r3, r0, r6
   12c9c:	str	r3, [sp, #36]	; 0x24
   12c9e:	mov	fp, r4
   12ca0:	bic.w	r3, r3, r3, asr #31
   12ca4:	str	r7, [sp, #40]	; 0x28
   12ca6:	str	r3, [sp, #16]
   12ca8:	str.w	fp, [sp, #60]	; 0x3c
   12cac:	ldrb.w	r7, [sp, #111]	; 0x6f
   12cb0:	b.n	127bc <_svfprintf_r+0x3a4>
   12cb2:	str	r3, [sp, #52]	; 0x34
   12cb4:	mov	fp, r5
   12cb6:	cmp	r2, #0
   12cb8:	beq.w	12b0e <_svfprintf_r+0x6f6>
   12cbc:	strb.w	r1, [sp, #111]	; 0x6f
   12cc0:	b.n	12b0e <_svfprintf_r+0x6f6>
   12cc2:	str	r3, [sp, #52]	; 0x34
   12cc4:	mov	fp, r5
   12cc6:	cmp	r2, #0
   12cc8:	bne.w	13ae8 <_svfprintf_r+0x16d0>
   12ccc:	ldr	r3, [sp, #12]
   12cce:	ldr	r0, [pc, #344]	; (12e28 <_svfprintf_r+0xa10>)
   12cd0:	lsls	r5, r3, #26
   12cd2:	bmi.w	12b6c <_svfprintf_r+0x754>
   12cd6:	ldr	r3, [sp, #12]
   12cd8:	lsls	r4, r3, #27
   12cda:	bpl.w	1355a <_svfprintf_r+0x1142>
   12cde:	ldr	r2, [sp, #40]	; 0x28
   12ce0:	mov	r3, r2
   12ce2:	adds	r3, #4
   12ce4:	ldr	r4, [r2, #0]
   12ce6:	str	r3, [sp, #40]	; 0x28
   12ce8:	movs	r5, #0
   12cea:	b.n	12b7e <_svfprintf_r+0x766>
   12cec:	ldrb.w	r3, [r8]
   12cf0:	cmp	r3, #108	; 0x6c
   12cf2:	beq.w	1367a <_svfprintf_r+0x1262>
   12cf6:	ldr	r0, [sp, #12]
   12cf8:	orr.w	r0, r0, #16
   12cfc:	str	r0, [sp, #12]
   12cfe:	b.w	124cc <_svfprintf_r+0xb4>
   12d02:	cmp	r2, #0
   12d04:	bne.w	13ae0 <_svfprintf_r+0x16c8>
   12d08:	ldr	r3, [sp, #12]
   12d0a:	lsls	r3, r3, #26
   12d0c:	bpl.w	133be <_svfprintf_r+0xfa6>
   12d10:	ldr	r2, [sp, #40]	; 0x28
   12d12:	ldr	r1, [sp, #28]
   12d14:	ldr	r3, [r2, #0]
   12d16:	asrs	r5, r1, #31
   12d18:	mov	r0, r1
   12d1a:	adds	r2, #4
   12d1c:	mov	r1, r5
   12d1e:	str	r2, [sp, #40]	; 0x28
   12d20:	strd	r0, r1, [r3]
   12d24:	b.w	12466 <_svfprintf_r+0x4e>
   12d28:	ldr	r0, [pc, #252]	; (12e28 <_svfprintf_r+0xa10>)
   12d2a:	str	r2, [sp, #52]	; 0x34
   12d2c:	cmp.w	fp, #0
   12d30:	bne.w	1301c <_svfprintf_r+0xc04>
   12d34:	mov	r7, fp
   12d36:	mov.w	fp, #0
   12d3a:	str.w	fp, [sp, #36]	; 0x24
   12d3e:	add	r6, sp, #192	; 0xc0
   12d40:	b.n	127ae <_svfprintf_r+0x396>
   12d42:	str	r3, [sp, #52]	; 0x34
   12d44:	cmp	r2, #0
   12d46:	bne.w	13ad8 <_svfprintf_r+0x16c0>
   12d4a:	ldr	r2, [sp, #52]	; 0x34
   12d4c:	cmp	r2, #0
   12d4e:	beq.w	125fe <_svfprintf_r+0x1e6>
   12d52:	movs	r3, #0
   12d54:	movs	r1, #1
   12d56:	mov	r7, r3
   12d58:	str	r1, [sp, #16]
   12d5a:	strb.w	r2, [sp, #152]	; 0x98
   12d5e:	strb.w	r3, [sp, #111]	; 0x6f
   12d62:	mov	fp, r3
   12d64:	str	r3, [sp, #60]	; 0x3c
   12d66:	str	r1, [sp, #36]	; 0x24
   12d68:	add	r6, sp, #152	; 0x98
   12d6a:	b.n	127c4 <_svfprintf_r+0x3ac>
   12d6c:	cmp.w	fp, #0
   12d70:	beq.w	13990 <_svfprintf_r+0x1578>
   12d74:	movs	r7, #0
   12d76:	movs	r4, #0
   12d78:	movs	r5, #0
   12d7a:	b.n	12664 <_svfprintf_r+0x24c>
   12d7c:	ldr	r0, [pc, #168]	; (12e28 <_svfprintf_r+0xa10>)
   12d7e:	str	r3, [sp, #12]
   12d80:	str	r2, [sp, #52]	; 0x34
   12d82:	orrs.w	r3, r4, r5
   12d86:	str	r7, [sp, #40]	; 0x28
   12d88:	mov.w	r7, #0
   12d8c:	bne.w	12bba <_svfprintf_r+0x7a2>
   12d90:	movs	r4, #0
   12d92:	movs	r5, #0
   12d94:	b.n	12bba <_svfprintf_r+0x7a2>
   12d96:	ldr	r4, [sp, #148]	; 0x94
   12d98:	b.n	12864 <_svfprintf_r+0x44c>
   12d9a:	ldr	r3, [sp, #52]	; 0x34
   12d9c:	cmp	r3, #101	; 0x65
   12d9e:	ble.w	12ef6 <_svfprintf_r+0xade>
   12da2:	movs	r2, #0
   12da4:	movs	r3, #0
   12da6:	ldrd	r0, r1, [sp, #64]	; 0x40
   12daa:	bl	10ba8 <__aeabi_dcmpeq>
   12dae:	cmp	r0, #0
   12db0:	beq.w	13020 <_svfprintf_r+0xc08>
   12db4:	ldr	r3, [sp, #144]	; 0x90
   12db6:	ldr	r2, [pc, #116]	; (12e2c <_svfprintf_r+0xa14>)
   12db8:	str.w	r2, [r9]
   12dbc:	adds	r3, #1
   12dbe:	adds	r4, #1
   12dc0:	movs	r2, #1
   12dc2:	cmp	r3, #7
   12dc4:	str	r4, [sp, #148]	; 0x94
   12dc6:	str	r3, [sp, #144]	; 0x90
   12dc8:	str.w	r2, [r9, #4]
   12dcc:	bgt.w	135ac <_svfprintf_r+0x1194>
   12dd0:	add.w	r9, r9, #8
   12dd4:	ldr	r3, [sp, #116]	; 0x74
   12dd6:	ldr	r2, [sp, #56]	; 0x38
   12dd8:	cmp	r3, r2
   12dda:	blt.n	12de4 <_svfprintf_r+0x9cc>
   12ddc:	ldr	r3, [sp, #12]
   12dde:	lsls	r3, r3, #31
   12de0:	bpl.w	12944 <_svfprintf_r+0x52c>
   12de4:	ldr	r3, [sp, #144]	; 0x90
   12de6:	ldr	r1, [sp, #72]	; 0x48
   12de8:	ldr	r2, [sp, #76]	; 0x4c
   12dea:	str.w	r2, [r9]
   12dee:	adds	r3, #1
   12df0:	add	r4, r1
   12df2:	cmp	r3, #7
   12df4:	str	r4, [sp, #148]	; 0x94
   12df6:	str.w	r1, [r9, #4]
   12dfa:	str	r3, [sp, #144]	; 0x90
   12dfc:	bgt.w	1368e <_svfprintf_r+0x1276>
   12e00:	add.w	r9, r9, #8
   12e04:	ldr	r3, [sp, #56]	; 0x38
   12e06:	subs	r5, r3, #1
   12e08:	cmp	r5, #0
   12e0a:	ble.w	12944 <_svfprintf_r+0x52c>
   12e0e:	ldr	r2, [pc, #32]	; (12e30 <_svfprintf_r+0xa18>)
   12e10:	ldr	r3, [sp, #144]	; 0x90
   12e12:	str	r2, [sp, #44]	; 0x2c
   12e14:	cmp	r5, #16
   12e16:	ble.w	131ec <_svfprintf_r+0xdd4>
   12e1a:	movs	r6, #16
   12e1c:	ldr	r7, [sp, #24]
   12e1e:	ldr.w	fp, [sp, #20]
   12e22:	b.n	12e40 <_svfprintf_r+0xa28>
   12e24:	.word	0x00015eb4
   12e28:	.word	0x00015ec8
   12e2c:	.word	0x00015ee4
   12e30:	.word	0x00015e94
   12e34:	add.w	r9, r9, #8
   12e38:	subs	r5, #16
   12e3a:	cmp	r5, #16
   12e3c:	ble.w	131ec <_svfprintf_r+0xdd4>
   12e40:	adds	r3, #1
   12e42:	adds	r4, #16
   12e44:	cmp	r3, #7
   12e46:	str	r4, [sp, #148]	; 0x94
   12e48:	str	r3, [sp, #144]	; 0x90
   12e4a:	str.w	sl, [r9]
   12e4e:	str.w	r6, [r9, #4]
   12e52:	ble.n	12e34 <_svfprintf_r+0xa1c>
   12e54:	add	r2, sp, #140	; 0x8c
   12e56:	mov	r1, fp
   12e58:	mov	r0, r7
   12e5a:	bl	154a0 <__ssprint_r>
   12e5e:	cmp	r0, #0
   12e60:	bne.w	1260c <_svfprintf_r+0x1f4>
   12e64:	ldr	r4, [sp, #148]	; 0x94
   12e66:	ldr	r3, [sp, #144]	; 0x90
   12e68:	add.w	r9, sp, #192	; 0xc0
   12e6c:	b.n	12e38 <_svfprintf_r+0xa20>
   12e6e:	ldr	r3, [sp, #32]
   12e70:	ldr	r2, [sp, #16]
   12e72:	subs	r7, r3, r2
   12e74:	cmp	r7, #0
   12e76:	ble.w	128ac <_svfprintf_r+0x494>
   12e7a:	ldr	r2, [pc, #752]	; (1316c <_svfprintf_r+0xd54>)
   12e7c:	ldr	r3, [sp, #144]	; 0x90
   12e7e:	str	r2, [sp, #44]	; 0x2c
   12e80:	cmp	r7, #16
   12e82:	ble.n	12edc <_svfprintf_r+0xac4>
   12e84:	mov	r2, r9
   12e86:	mov	r1, r4
   12e88:	mov	r9, r7
   12e8a:	movs	r5, #16
   12e8c:	mov	r7, r6
   12e8e:	ldr	r4, [sp, #24]
   12e90:	ldr	r6, [sp, #20]
   12e92:	b.n	12ea2 <_svfprintf_r+0xa8a>
   12e94:	sub.w	r9, r9, #16
   12e98:	cmp.w	r9, #16
   12e9c:	add.w	r2, r2, #8
   12ea0:	ble.n	12ed4 <_svfprintf_r+0xabc>
   12ea2:	adds	r3, #1
   12ea4:	adds	r1, #16
   12ea6:	cmp	r3, #7
   12ea8:	str	r1, [sp, #148]	; 0x94
   12eaa:	str	r3, [sp, #144]	; 0x90
   12eac:	str.w	sl, [r2]
   12eb0:	str	r5, [r2, #4]
   12eb2:	ble.n	12e94 <_svfprintf_r+0xa7c>
   12eb4:	add	r2, sp, #140	; 0x8c
   12eb6:	mov	r1, r6
   12eb8:	mov	r0, r4
   12eba:	bl	154a0 <__ssprint_r>
   12ebe:	cmp	r0, #0
   12ec0:	bne.w	1260c <_svfprintf_r+0x1f4>
   12ec4:	sub.w	r9, r9, #16
   12ec8:	cmp.w	r9, #16
   12ecc:	ldr	r1, [sp, #148]	; 0x94
   12ece:	ldr	r3, [sp, #144]	; 0x90
   12ed0:	add	r2, sp, #192	; 0xc0
   12ed2:	bgt.n	12ea2 <_svfprintf_r+0xa8a>
   12ed4:	mov	r6, r7
   12ed6:	mov	r4, r1
   12ed8:	mov	r7, r9
   12eda:	mov	r9, r2
   12edc:	adds	r3, #1
   12ede:	ldr	r2, [sp, #44]	; 0x2c
   12ee0:	str	r3, [sp, #144]	; 0x90
   12ee2:	add	r4, r7
   12ee4:	cmp	r3, #7
   12ee6:	str	r4, [sp, #148]	; 0x94
   12ee8:	stmia.w	r9, {r2, r7}
   12eec:	bgt.w	1336a <_svfprintf_r+0xf52>
   12ef0:	add.w	r9, r9, #8
   12ef4:	b.n	128ac <_svfprintf_r+0x494>
   12ef6:	ldr	r3, [sp, #56]	; 0x38
   12ef8:	ldr	r5, [sp, #144]	; 0x90
   12efa:	cmp	r3, #1
   12efc:	ble.w	13314 <_svfprintf_r+0xefc>
   12f00:	adds	r5, #1
   12f02:	adds	r4, #1
   12f04:	movs	r3, #1
   12f06:	cmp	r5, #7
   12f08:	str	r4, [sp, #148]	; 0x94
   12f0a:	str	r5, [sp, #144]	; 0x90
   12f0c:	str.w	r6, [r9]
   12f10:	str.w	r3, [r9, #4]
   12f14:	bgt.w	13336 <_svfprintf_r+0xf1e>
   12f18:	add.w	r9, r9, #8
   12f1c:	ldr	r2, [sp, #72]	; 0x48
   12f1e:	ldr	r3, [sp, #76]	; 0x4c
   12f20:	str.w	r3, [r9]
   12f24:	adds	r5, #1
   12f26:	add	r4, r2
   12f28:	cmp	r5, #7
   12f2a:	str	r4, [sp, #148]	; 0x94
   12f2c:	str	r5, [sp, #144]	; 0x90
   12f2e:	str.w	r2, [r9, #4]
   12f32:	bgt.w	13350 <_svfprintf_r+0xf38>
   12f36:	add.w	r9, r9, #8
   12f3a:	movs	r3, #0
   12f3c:	movs	r2, #0
   12f3e:	ldrd	r0, r1, [sp, #64]	; 0x40
   12f42:	bl	10ba8 <__aeabi_dcmpeq>
   12f46:	ldr	r3, [sp, #56]	; 0x38
   12f48:	cmp	r0, #0
   12f4a:	bne.w	130d4 <_svfprintf_r+0xcbc>
   12f4e:	subs	r3, #1
   12f50:	adds	r5, #1
   12f52:	adds	r6, #1
   12f54:	add	r4, r3
   12f56:	cmp	r5, #7
   12f58:	str	r5, [sp, #144]	; 0x90
   12f5a:	str	r4, [sp, #148]	; 0x94
   12f5c:	str.w	r6, [r9]
   12f60:	str.w	r3, [r9, #4]
   12f64:	bgt.w	13152 <_svfprintf_r+0xd3a>
   12f68:	add.w	r9, r9, #8
   12f6c:	ldr	r2, [sp, #84]	; 0x54
   12f6e:	str.w	r2, [r9, #4]
   12f72:	adds	r5, #1
   12f74:	add	r4, r2
   12f76:	add	r3, sp, #124	; 0x7c
   12f78:	cmp	r5, #7
   12f7a:	str	r4, [sp, #148]	; 0x94
   12f7c:	str	r5, [sp, #144]	; 0x90
   12f7e:	str.w	r3, [r9]
   12f82:	ble.w	12940 <_svfprintf_r+0x528>
   12f86:	add	r2, sp, #140	; 0x8c
   12f88:	ldr	r1, [sp, #20]
   12f8a:	ldr	r0, [sp, #24]
   12f8c:	bl	154a0 <__ssprint_r>
   12f90:	cmp	r0, #0
   12f92:	bne.w	1260c <_svfprintf_r+0x1f4>
   12f96:	ldr	r4, [sp, #148]	; 0x94
   12f98:	add.w	r9, sp, #192	; 0xc0
   12f9c:	b.n	12944 <_svfprintf_r+0x52c>
   12f9e:	add	r2, sp, #140	; 0x8c
   12fa0:	ldr	r1, [sp, #20]
   12fa2:	ldr	r0, [sp, #24]
   12fa4:	bl	154a0 <__ssprint_r>
   12fa8:	cmp	r0, #0
   12faa:	beq.w	129e0 <_svfprintf_r+0x5c8>
   12fae:	b.w	1260c <_svfprintf_r+0x1f4>
   12fb2:	add	r2, sp, #140	; 0x8c
   12fb4:	ldr	r1, [sp, #20]
   12fb6:	ldr	r0, [sp, #24]
   12fb8:	bl	154a0 <__ssprint_r>
   12fbc:	cmp	r0, #0
   12fbe:	bne.w	1260c <_svfprintf_r+0x1f4>
   12fc2:	ldr	r4, [sp, #148]	; 0x94
   12fc4:	add.w	r9, sp, #192	; 0xc0
   12fc8:	b.n	1291e <_svfprintf_r+0x506>
   12fca:	add	r2, sp, #140	; 0x8c
   12fcc:	ldr	r1, [sp, #20]
   12fce:	ldr	r0, [sp, #24]
   12fd0:	bl	154a0 <__ssprint_r>
   12fd4:	cmp	r0, #0
   12fd6:	bne.w	1260c <_svfprintf_r+0x1f4>
   12fda:	ldr	r4, [sp, #148]	; 0x94
   12fdc:	add.w	r9, sp, #192	; 0xc0
   12fe0:	b.n	12884 <_svfprintf_r+0x46c>
   12fe2:	add	r2, sp, #140	; 0x8c
   12fe4:	ldr	r1, [sp, #20]
   12fe6:	ldr	r0, [sp, #24]
   12fe8:	bl	154a0 <__ssprint_r>
   12fec:	cmp	r0, #0
   12fee:	bne.w	1260c <_svfprintf_r+0x1f4>
   12ff2:	ldr	r4, [sp, #148]	; 0x94
   12ff4:	add.w	r9, sp, #192	; 0xc0
   12ff8:	b.n	128a4 <_svfprintf_r+0x48c>
   12ffa:	cmp.w	fp, #0
   12ffe:	strb.w	r7, [sp, #111]	; 0x6f
   13002:	blt.w	135c4 <_svfprintf_r+0x11ac>
   13006:	bic.w	r3, r2, #128	; 0x80
   1300a:	str	r3, [sp, #12]
   1300c:	orrs.w	r3, r4, r5
   13010:	bne.w	12bba <_svfprintf_r+0x7a2>
   13014:	cmp.w	fp, #0
   13018:	beq.w	12d34 <_svfprintf_r+0x91c>
   1301c:	movs	r7, #0
   1301e:	b.n	12d90 <_svfprintf_r+0x978>
   13020:	ldr	r5, [sp, #116]	; 0x74
   13022:	cmp	r5, #0
   13024:	ble.w	135ca <_svfprintf_r+0x11b2>
   13028:	ldr	r3, [sp, #60]	; 0x3c
   1302a:	ldr	r2, [sp, #56]	; 0x38
   1302c:	cmp	r3, r2
   1302e:	it	ge
   13030:	movge	r3, r2
   13032:	cmp	r3, #0
   13034:	mov	r5, r3
   13036:	ble.n	13054 <_svfprintf_r+0xc3c>
   13038:	ldr	r3, [sp, #144]	; 0x90
   1303a:	str.w	r6, [r9]
   1303e:	adds	r3, #1
   13040:	add	r4, r5
   13042:	cmp	r3, #7
   13044:	str	r4, [sp, #148]	; 0x94
   13046:	str.w	r5, [r9, #4]
   1304a:	str	r3, [sp, #144]	; 0x90
   1304c:	bgt.w	137a2 <_svfprintf_r+0x138a>
   13050:	add.w	r9, r9, #8
   13054:	ldr	r3, [sp, #60]	; 0x3c
   13056:	cmp	r5, #0
   13058:	it	ge
   1305a:	subge	r3, r3, r5
   1305c:	cmp	r3, #0
   1305e:	mov	r5, r3
   13060:	ble.w	13254 <_svfprintf_r+0xe3c>
   13064:	ldr	r2, [pc, #260]	; (1316c <_svfprintf_r+0xd54>)
   13066:	ldr	r3, [sp, #144]	; 0x90
   13068:	str	r2, [sp, #44]	; 0x2c
   1306a:	cmp	r5, #16
   1306c:	ble.w	13576 <_svfprintf_r+0x115e>
   13070:	mov	r2, r4
   13072:	movs	r7, #16
   13074:	ldr.w	fp, [sp, #24]
   13078:	ldr	r4, [sp, #20]
   1307a:	b.n	13088 <_svfprintf_r+0xc70>
   1307c:	add.w	r9, r9, #8
   13080:	subs	r5, #16
   13082:	cmp	r5, #16
   13084:	ble.w	13574 <_svfprintf_r+0x115c>
   13088:	adds	r3, #1
   1308a:	adds	r2, #16
   1308c:	cmp	r3, #7
   1308e:	str	r2, [sp, #148]	; 0x94
   13090:	str	r3, [sp, #144]	; 0x90
   13092:	str.w	sl, [r9]
   13096:	str.w	r7, [r9, #4]
   1309a:	ble.n	1307c <_svfprintf_r+0xc64>
   1309c:	add	r2, sp, #140	; 0x8c
   1309e:	mov	r1, r4
   130a0:	mov	r0, fp
   130a2:	bl	154a0 <__ssprint_r>
   130a6:	cmp	r0, #0
   130a8:	bne.w	1260c <_svfprintf_r+0x1f4>
   130ac:	ldr	r2, [sp, #148]	; 0x94
   130ae:	ldr	r3, [sp, #144]	; 0x90
   130b0:	add.w	r9, sp, #192	; 0xc0
   130b4:	b.n	13080 <_svfprintf_r+0xc68>
   130b6:	add	r2, sp, #140	; 0x8c
   130b8:	ldr	r1, [sp, #20]
   130ba:	ldr	r0, [sp, #24]
   130bc:	bl	154a0 <__ssprint_r>
   130c0:	cmp	r0, #0
   130c2:	bne.w	1260c <_svfprintf_r+0x1f4>
   130c6:	ldrb.w	r7, [sp, #111]	; 0x6f
   130ca:	ldr	r4, [sp, #148]	; 0x94
   130cc:	add.w	r9, sp, #192	; 0xc0
   130d0:	b.w	12864 <_svfprintf_r+0x44c>
   130d4:	subs	r6, r3, #1
   130d6:	cmp	r6, #0
   130d8:	ble.w	12f6c <_svfprintf_r+0xb54>
   130dc:	ldr	r3, [pc, #140]	; (1316c <_svfprintf_r+0xd54>)
   130de:	str	r3, [sp, #44]	; 0x2c
   130e0:	cmp	r6, #16
   130e2:	ble.n	1313e <_svfprintf_r+0xd26>
   130e4:	str.w	r8, [sp, #36]	; 0x24
   130e8:	movs	r7, #16
   130ea:	mov	r8, r6
   130ec:	ldr.w	fp, [sp, #24]
   130f0:	ldr	r6, [sp, #20]
   130f2:	b.n	13102 <_svfprintf_r+0xcea>
   130f4:	sub.w	r8, r8, #16
   130f8:	cmp.w	r8, #16
   130fc:	add.w	r9, r9, #8
   13100:	ble.n	13138 <_svfprintf_r+0xd20>
   13102:	adds	r5, #1
   13104:	adds	r4, #16
   13106:	cmp	r5, #7
   13108:	str	r4, [sp, #148]	; 0x94
   1310a:	str	r5, [sp, #144]	; 0x90
   1310c:	str.w	sl, [r9]
   13110:	str.w	r7, [r9, #4]
   13114:	ble.n	130f4 <_svfprintf_r+0xcdc>
   13116:	add	r2, sp, #140	; 0x8c
   13118:	mov	r1, r6
   1311a:	mov	r0, fp
   1311c:	bl	154a0 <__ssprint_r>
   13120:	cmp	r0, #0
   13122:	bne.w	1260c <_svfprintf_r+0x1f4>
   13126:	sub.w	r8, r8, #16
   1312a:	cmp.w	r8, #16
   1312e:	ldr	r4, [sp, #148]	; 0x94
   13130:	ldr	r5, [sp, #144]	; 0x90
   13132:	add.w	r9, sp, #192	; 0xc0
   13136:	bgt.n	13102 <_svfprintf_r+0xcea>
   13138:	mov	r6, r8
   1313a:	ldr.w	r8, [sp, #36]	; 0x24
   1313e:	ldr	r3, [sp, #44]	; 0x2c
   13140:	adds	r5, #1
   13142:	add	r4, r6
   13144:	cmp	r5, #7
   13146:	str	r4, [sp, #148]	; 0x94
   13148:	str	r5, [sp, #144]	; 0x90
   1314a:	stmia.w	r9, {r3, r6}
   1314e:	ble.w	12f68 <_svfprintf_r+0xb50>
   13152:	add	r2, sp, #140	; 0x8c
   13154:	ldr	r1, [sp, #20]
   13156:	ldr	r0, [sp, #24]
   13158:	bl	154a0 <__ssprint_r>
   1315c:	cmp	r0, #0
   1315e:	bne.w	1260c <_svfprintf_r+0x1f4>
   13162:	ldr	r4, [sp, #148]	; 0x94
   13164:	ldr	r5, [sp, #144]	; 0x90
   13166:	add.w	r9, sp, #192	; 0xc0
   1316a:	b.n	12f6c <_svfprintf_r+0xb54>
   1316c:	.word	0x00015e94
   13170:	ldr	r1, [sp, #12]
   13172:	ands.w	r2, r1, #16
   13176:	beq.w	13520 <_svfprintf_r+0x1108>
   1317a:	ldr	r0, [sp, #40]	; 0x28
   1317c:	strb.w	r3, [sp, #111]	; 0x6f
   13180:	cmp.w	fp, #0
   13184:	ldr	r4, [r0, #0]
   13186:	add.w	r7, r0, #4
   1318a:	mov.w	r5, #0
   1318e:	blt.n	131de <_svfprintf_r+0xdc6>
   13190:	mov	r2, r1
   13192:	bic.w	r2, r2, #128	; 0x80
   13196:	str	r2, [sp, #12]
   13198:	orrs.w	r2, r4, r5
   1319c:	str	r7, [sp, #40]	; 0x28
   1319e:	mov	r7, r3
   131a0:	bne.w	12774 <_svfprintf_r+0x35c>
   131a4:	b.n	12b44 <_svfprintf_r+0x72c>
   131a6:	ldr	r3, [sp, #12]
   131a8:	lsls	r0, r3, #27
   131aa:	bmi.n	13202 <_svfprintf_r+0xdea>
   131ac:	ldr	r3, [sp, #12]
   131ae:	lsls	r1, r3, #25
   131b0:	bpl.n	13202 <_svfprintf_r+0xdea>
   131b2:	ldr	r1, [sp, #40]	; 0x28
   131b4:	ldrsh.w	r4, [r1]
   131b8:	adds	r1, #4
   131ba:	asrs	r5, r4, #31
   131bc:	mov	r2, r4
   131be:	mov	r3, r5
   131c0:	str	r1, [sp, #40]	; 0x28
   131c2:	b.w	1274e <_svfprintf_r+0x336>
   131c6:	ldr	r1, [sp, #40]	; 0x28
   131c8:	strb.w	r3, [sp, #111]	; 0x6f
   131cc:	cmp.w	fp, #0
   131d0:	ldr	r4, [r1, #0]
   131d2:	add.w	r7, r1, #4
   131d6:	mov.w	r5, #0
   131da:	bge.w	13676 <_svfprintf_r+0x125e>
   131de:	str	r7, [sp, #40]	; 0x28
   131e0:	mov	r7, r3
   131e2:	orrs.w	r3, r4, r5
   131e6:	bne.w	12774 <_svfprintf_r+0x35c>
   131ea:	b.n	12b4e <_svfprintf_r+0x736>
   131ec:	adds	r3, #1
   131ee:	ldr	r2, [sp, #44]	; 0x2c
   131f0:	str	r3, [sp, #144]	; 0x90
   131f2:	add	r4, r5
   131f4:	cmp	r3, #7
   131f6:	str	r4, [sp, #148]	; 0x94
   131f8:	stmia.w	r9, {r2, r5}
   131fc:	ble.w	12940 <_svfprintf_r+0x528>
   13200:	b.n	12f86 <_svfprintf_r+0xb6e>
   13202:	ldr	r2, [sp, #40]	; 0x28
   13204:	ldr	r4, [r2, #0]
   13206:	mov	r3, r2
   13208:	adds	r3, #4
   1320a:	asrs	r5, r4, #31
   1320c:	mov	r2, r4
   1320e:	str	r3, [sp, #40]	; 0x28
   13210:	cmp	r2, #0
   13212:	mov	r3, r5
   13214:	sbcs.w	r3, r3, #0
   13218:	bge.w	12758 <_svfprintf_r+0x340>
   1321c:	negs	r4, r4
   1321e:	mov.w	r7, #45	; 0x2d
   13222:	sbc.w	r5, r5, r5, lsl #1
   13226:	cmp.w	fp, #0
   1322a:	strb.w	r7, [sp, #111]	; 0x6f
   1322e:	blt.w	12774 <_svfprintf_r+0x35c>
   13232:	ldr	r3, [sp, #12]
   13234:	bic.w	r3, r3, #128	; 0x80
   13238:	str	r3, [sp, #12]
   1323a:	b.w	12774 <_svfprintf_r+0x35c>
   1323e:	add	r2, sp, #140	; 0x8c
   13240:	ldr	r1, [sp, #20]
   13242:	ldr	r0, [sp, #24]
   13244:	bl	154a0 <__ssprint_r>
   13248:	cmp	r0, #0
   1324a:	bne.w	1260c <_svfprintf_r+0x1f4>
   1324e:	ldr	r4, [sp, #148]	; 0x94
   13250:	add.w	r9, sp, #192	; 0xc0
   13254:	ldr	r2, [sp, #60]	; 0x3c
   13256:	ldr	r3, [sp, #116]	; 0x74
   13258:	add	r2, r6
   1325a:	mov	r7, r2
   1325c:	ldr	r2, [sp, #56]	; 0x38
   1325e:	cmp	r3, r2
   13260:	blt.n	132f2 <_svfprintf_r+0xeda>
   13262:	ldr	r2, [sp, #12]
   13264:	lsls	r5, r2, #31
   13266:	bmi.n	132f2 <_svfprintf_r+0xeda>
   13268:	ldr	r1, [sp, #56]	; 0x38
   1326a:	add	r6, r1
   1326c:	subs	r5, r6, r7
   1326e:	subs	r3, r1, r3
   13270:	cmp	r5, r3
   13272:	it	ge
   13274:	movge	r5, r3
   13276:	cmp	r5, #0
   13278:	mov	r6, r5
   1327a:	ble.n	13298 <_svfprintf_r+0xe80>
   1327c:	ldr	r2, [sp, #144]	; 0x90
   1327e:	str.w	r7, [r9]
   13282:	adds	r2, #1
   13284:	add	r4, r5
   13286:	cmp	r2, #7
   13288:	str	r4, [sp, #148]	; 0x94
   1328a:	str.w	r5, [r9, #4]
   1328e:	str	r2, [sp, #144]	; 0x90
   13290:	bgt.w	13890 <_svfprintf_r+0x1478>
   13294:	add.w	r9, r9, #8
   13298:	cmp	r6, #0
   1329a:	ite	ge
   1329c:	subge	r5, r3, r6
   1329e:	movlt	r5, r3
   132a0:	cmp	r5, #0
   132a2:	ble.w	12944 <_svfprintf_r+0x52c>
   132a6:	ldr	r2, [pc, #744]	; (13590 <_svfprintf_r+0x1178>)
   132a8:	ldr	r3, [sp, #144]	; 0x90
   132aa:	str	r2, [sp, #44]	; 0x2c
   132ac:	cmp	r5, #16
   132ae:	ble.n	131ec <_svfprintf_r+0xdd4>
   132b0:	movs	r6, #16
   132b2:	ldr	r7, [sp, #24]
   132b4:	ldr.w	fp, [sp, #20]
   132b8:	b.n	132c4 <_svfprintf_r+0xeac>
   132ba:	add.w	r9, r9, #8
   132be:	subs	r5, #16
   132c0:	cmp	r5, #16
   132c2:	ble.n	131ec <_svfprintf_r+0xdd4>
   132c4:	adds	r3, #1
   132c6:	adds	r4, #16
   132c8:	cmp	r3, #7
   132ca:	str	r4, [sp, #148]	; 0x94
   132cc:	str	r3, [sp, #144]	; 0x90
   132ce:	str.w	sl, [r9]
   132d2:	str.w	r6, [r9, #4]
   132d6:	ble.n	132ba <_svfprintf_r+0xea2>
   132d8:	add	r2, sp, #140	; 0x8c
   132da:	mov	r1, fp
   132dc:	mov	r0, r7
   132de:	bl	154a0 <__ssprint_r>
   132e2:	cmp	r0, #0
   132e4:	bne.w	1260c <_svfprintf_r+0x1f4>
   132e8:	ldr	r4, [sp, #148]	; 0x94
   132ea:	ldr	r3, [sp, #144]	; 0x90
   132ec:	add.w	r9, sp, #192	; 0xc0
   132f0:	b.n	132be <_svfprintf_r+0xea6>
   132f2:	ldr	r2, [sp, #144]	; 0x90
   132f4:	ldr	r0, [sp, #72]	; 0x48
   132f6:	ldr	r1, [sp, #76]	; 0x4c
   132f8:	str.w	r1, [r9]
   132fc:	adds	r2, #1
   132fe:	add	r4, r0
   13300:	cmp	r2, #7
   13302:	str	r4, [sp, #148]	; 0x94
   13304:	str.w	r0, [r9, #4]
   13308:	str	r2, [sp, #144]	; 0x90
   1330a:	bgt.w	13876 <_svfprintf_r+0x145e>
   1330e:	add.w	r9, r9, #8
   13312:	b.n	13268 <_svfprintf_r+0xe50>
   13314:	ldr	r3, [sp, #12]
   13316:	lsls	r0, r3, #31
   13318:	bmi.w	12f00 <_svfprintf_r+0xae8>
   1331c:	adds	r5, #1
   1331e:	adds	r4, #1
   13320:	movs	r3, #1
   13322:	cmp	r5, #7
   13324:	str	r4, [sp, #148]	; 0x94
   13326:	str	r5, [sp, #144]	; 0x90
   13328:	str.w	r6, [r9]
   1332c:	str.w	r3, [r9, #4]
   13330:	ble.w	12f68 <_svfprintf_r+0xb50>
   13334:	b.n	13152 <_svfprintf_r+0xd3a>
   13336:	add	r2, sp, #140	; 0x8c
   13338:	ldr	r1, [sp, #20]
   1333a:	ldr	r0, [sp, #24]
   1333c:	bl	154a0 <__ssprint_r>
   13340:	cmp	r0, #0
   13342:	bne.w	1260c <_svfprintf_r+0x1f4>
   13346:	ldr	r4, [sp, #148]	; 0x94
   13348:	ldr	r5, [sp, #144]	; 0x90
   1334a:	add.w	r9, sp, #192	; 0xc0
   1334e:	b.n	12f1c <_svfprintf_r+0xb04>
   13350:	add	r2, sp, #140	; 0x8c
   13352:	ldr	r1, [sp, #20]
   13354:	ldr	r0, [sp, #24]
   13356:	bl	154a0 <__ssprint_r>
   1335a:	cmp	r0, #0
   1335c:	bne.w	1260c <_svfprintf_r+0x1f4>
   13360:	ldr	r4, [sp, #148]	; 0x94
   13362:	ldr	r5, [sp, #144]	; 0x90
   13364:	add.w	r9, sp, #192	; 0xc0
   13368:	b.n	12f3a <_svfprintf_r+0xb22>
   1336a:	add	r2, sp, #140	; 0x8c
   1336c:	ldr	r1, [sp, #20]
   1336e:	ldr	r0, [sp, #24]
   13370:	bl	154a0 <__ssprint_r>
   13374:	cmp	r0, #0
   13376:	bne.w	1260c <_svfprintf_r+0x1f4>
   1337a:	ldr	r4, [sp, #148]	; 0x94
   1337c:	add.w	r9, sp, #192	; 0xc0
   13380:	b.w	128ac <_svfprintf_r+0x494>
   13384:	ldr	r1, [sp, #12]
   13386:	ands.w	r3, r1, #64	; 0x40
   1338a:	beq.w	13500 <_svfprintf_r+0x10e8>
   1338e:	ldr	r0, [sp, #40]	; 0x28
   13390:	strb.w	r2, [sp, #111]	; 0x6f
   13394:	mov	r3, r0
   13396:	cmp.w	fp, #0
   1339a:	add.w	r3, r3, #4
   1339e:	ldrh	r4, [r0, #0]
   133a0:	mov.w	r5, #0
   133a4:	blt.w	13728 <_svfprintf_r+0x1310>
   133a8:	bic.w	r1, r1, #128	; 0x80
   133ac:	str	r1, [sp, #12]
   133ae:	orrs.w	r1, r4, r5
   133b2:	str	r3, [sp, #40]	; 0x28
   133b4:	beq.w	12d6c <_svfprintf_r+0x954>
   133b8:	mov	r7, r2
   133ba:	b.w	12664 <_svfprintf_r+0x24c>
   133be:	ldr	r3, [sp, #12]
   133c0:	lsls	r7, r3, #27
   133c2:	bmi.n	133dc <_svfprintf_r+0xfc4>
   133c4:	ldr	r3, [sp, #12]
   133c6:	lsls	r6, r3, #25
   133c8:	bpl.n	133dc <_svfprintf_r+0xfc4>
   133ca:	ldr	r2, [sp, #40]	; 0x28
   133cc:	ldr	r3, [r2, #0]
   133ce:	adds	r2, #4
   133d0:	str	r2, [sp, #40]	; 0x28
   133d2:	ldrh.w	r2, [sp, #28]
   133d6:	strh	r2, [r3, #0]
   133d8:	b.w	12466 <_svfprintf_r+0x4e>
   133dc:	ldr	r2, [sp, #40]	; 0x28
   133de:	ldr	r3, [r2, #0]
   133e0:	adds	r2, #4
   133e2:	str	r2, [sp, #40]	; 0x28
   133e4:	ldr	r2, [sp, #28]
   133e6:	str	r2, [r3, #0]
   133e8:	b.w	12466 <_svfprintf_r+0x4e>
   133ec:	ldrd	r0, r1, [sp, #64]	; 0x40
   133f0:	mov	r2, r0
   133f2:	mov	r3, r1
   133f4:	bl	10c0c <__aeabi_dcmpun>
   133f8:	cmp	r0, #0
   133fa:	bne.w	139f8 <_svfprintf_r+0x15e0>
   133fe:	ldr	r3, [sp, #52]	; 0x34
   13400:	cmp.w	fp, #4294967295
   13404:	bic.w	r7, r3, #32
   13408:	beq.w	138da <_svfprintf_r+0x14c2>
   1340c:	cmp	r7, #71	; 0x47
   1340e:	beq.w	13716 <_svfprintf_r+0x12fe>
   13412:	ldr	r3, [sp, #68]	; 0x44
   13414:	ldr	r2, [sp, #12]
   13416:	cmp	r3, #0
   13418:	orr.w	r2, r2, #256	; 0x100
   1341c:	str	r2, [sp, #44]	; 0x2c
   1341e:	blt.w	13912 <_svfprintf_r+0x14fa>
   13422:	vldr	d7, [sp, #64]	; 0x40
   13426:	vstr	d7, [sp, #96]	; 0x60
   1342a:	movs	r3, #0
   1342c:	str	r3, [sp, #16]
   1342e:	ldr	r3, [sp, #52]	; 0x34
   13430:	cmp	r3, #102	; 0x66
   13432:	beq.w	138e0 <_svfprintf_r+0x14c8>
   13436:	cmp	r3, #70	; 0x46
   13438:	beq.w	136c6 <_svfprintf_r+0x12ae>
   1343c:	cmp	r7, #69	; 0x45
   1343e:	ite	eq
   13440:	addeq.w	r5, fp, #1
   13444:	movne	r5, fp
   13446:	add	r2, sp, #132	; 0x84
   13448:	add	r3, sp, #120	; 0x78
   1344a:	str	r2, [sp, #4]
   1344c:	str	r3, [sp, #0]
   1344e:	mov	r2, r5
   13450:	add	r3, sp, #116	; 0x74
   13452:	movs	r1, #2
   13454:	vldr	d0, [sp, #96]	; 0x60
   13458:	ldr	r0, [sp, #24]
   1345a:	bl	13d98 <_dtoa_r>
   1345e:	ldr	r3, [sp, #52]	; 0x34
   13460:	cmp	r3, #103	; 0x67
   13462:	mov	r6, r0
   13464:	bne.w	1393e <_svfprintf_r+0x1526>
   13468:	ldr	r3, [sp, #12]
   1346a:	lsls	r2, r3, #31
   1346c:	bpl.w	139e2 <_svfprintf_r+0x15ca>
   13470:	adds	r4, r6, r5
   13472:	movs	r2, #0
   13474:	movs	r3, #0
   13476:	ldrd	r0, r1, [sp, #96]	; 0x60
   1347a:	bl	10ba8 <__aeabi_dcmpeq>
   1347e:	cmp	r0, #0
   13480:	bne.w	1379e <_svfprintf_r+0x1386>
   13484:	ldr	r3, [sp, #132]	; 0x84
   13486:	cmp	r4, r3
   13488:	bls.n	13498 <_svfprintf_r+0x1080>
   1348a:	movs	r1, #48	; 0x30
   1348c:	adds	r2, r3, #1
   1348e:	str	r2, [sp, #132]	; 0x84
   13490:	strb	r1, [r3, #0]
   13492:	ldr	r3, [sp, #132]	; 0x84
   13494:	cmp	r4, r3
   13496:	bhi.n	1348c <_svfprintf_r+0x1074>
   13498:	subs	r3, r3, r6
   1349a:	cmp	r7, #71	; 0x47
   1349c:	str	r3, [sp, #56]	; 0x38
   1349e:	beq.w	13790 <_svfprintf_r+0x1378>
   134a2:	ldr	r3, [sp, #52]	; 0x34
   134a4:	cmp	r3, #101	; 0x65
   134a6:	ble.w	1395c <_svfprintf_r+0x1544>
   134aa:	ldr	r3, [sp, #52]	; 0x34
   134ac:	cmp	r3, #102	; 0x66
   134ae:	ldr	r3, [sp, #116]	; 0x74
   134b0:	str	r3, [sp, #60]	; 0x3c
   134b2:	beq.w	13976 <_svfprintf_r+0x155e>
   134b6:	ldr	r2, [sp, #60]	; 0x3c
   134b8:	ldr	r1, [sp, #56]	; 0x38
   134ba:	cmp	r2, r1
   134bc:	blt.w	13924 <_svfprintf_r+0x150c>
   134c0:	ldr	r3, [sp, #12]
   134c2:	lsls	r1, r3, #31
   134c4:	bmi.w	139e6 <_svfprintf_r+0x15ce>
   134c8:	bic.w	r3, r2, r2, asr #31
   134cc:	str	r2, [sp, #36]	; 0x24
   134ce:	movs	r2, #103	; 0x67
   134d0:	str	r2, [sp, #52]	; 0x34
   134d2:	ldr	r2, [sp, #16]
   134d4:	cmp	r2, #0
   134d6:	bne.w	13738 <_svfprintf_r+0x1320>
   134da:	str	r3, [sp, #16]
   134dc:	ldr	r3, [sp, #44]	; 0x2c
   134de:	str	r3, [sp, #12]
   134e0:	mov	fp, r2
   134e2:	ldrb.w	r7, [sp, #111]	; 0x6f
   134e6:	b.w	127bc <_svfprintf_r+0x3a4>
   134ea:	bic.w	r7, r7, #7
   134ee:	vldr	d7, [r7]
   134f2:	add.w	r3, r7, #8
   134f6:	vstr	d7, [sp, #64]	; 0x40
   134fa:	str	r3, [sp, #40]	; 0x28
   134fc:	b.w	12a14 <_svfprintf_r+0x5fc>
   13500:	ldr	r1, [sp, #40]	; 0x28
   13502:	strb.w	r3, [sp, #111]	; 0x6f
   13506:	cmp.w	fp, #0
   1350a:	ldr	r4, [r1, #0]
   1350c:	add.w	r7, r1, #4
   13510:	mov.w	r5, #0
   13514:	bge.w	13670 <_svfprintf_r+0x1258>
   13518:	str	r7, [sp, #40]	; 0x28
   1351a:	movs	r7, #0
   1351c:	b.w	12664 <_svfprintf_r+0x24c>
   13520:	ldr	r1, [sp, #12]
   13522:	ands.w	r3, r1, #64	; 0x40
   13526:	beq.w	131c6 <_svfprintf_r+0xdae>
   1352a:	ldr	r0, [sp, #40]	; 0x28
   1352c:	strb.w	r2, [sp, #111]	; 0x6f
   13530:	mov	r3, r0
   13532:	cmp.w	fp, #0
   13536:	add.w	r3, r3, #4
   1353a:	ldrh	r4, [r0, #0]
   1353c:	mov.w	r5, #0
   13540:	blt.w	13722 <_svfprintf_r+0x130a>
   13544:	bic.w	r1, r1, #128	; 0x80
   13548:	str	r1, [sp, #12]
   1354a:	orrs.w	r1, r4, r5
   1354e:	str	r3, [sp, #40]	; 0x28
   13550:	mov	r7, r2
   13552:	bne.w	12774 <_svfprintf_r+0x35c>
   13556:	b.w	12b44 <_svfprintf_r+0x72c>
   1355a:	ldr	r3, [sp, #12]
   1355c:	ldr	r2, [sp, #40]	; 0x28
   1355e:	tst.w	r3, #64	; 0x40
   13562:	mov	r3, r2
   13564:	beq.w	1372c <_svfprintf_r+0x1314>
   13568:	adds	r3, #4
   1356a:	ldrh	r4, [r2, #0]
   1356c:	str	r3, [sp, #40]	; 0x28
   1356e:	movs	r5, #0
   13570:	b.w	12b7e <_svfprintf_r+0x766>
   13574:	mov	r4, r2
   13576:	adds	r3, #1
   13578:	ldr	r2, [sp, #44]	; 0x2c
   1357a:	str	r3, [sp, #144]	; 0x90
   1357c:	add	r4, r5
   1357e:	cmp	r3, #7
   13580:	str	r4, [sp, #148]	; 0x94
   13582:	stmia.w	r9, {r2, r5}
   13586:	bgt.w	1323e <_svfprintf_r+0xe26>
   1358a:	add.w	r9, r9, #8
   1358e:	b.n	13254 <_svfprintf_r+0xe3c>
   13590:	.word	0x00015e94
   13594:	movs	r7, #0
   13596:	cmp	fp, r7
   13598:	strb.w	r7, [sp, #111]	; 0x6f
   1359c:	blt.w	12d90 <_svfprintf_r+0x978>
   135a0:	ldr	r3, [sp, #12]
   135a2:	bic.w	r3, r3, #128	; 0x80
   135a6:	str	r3, [sp, #12]
   135a8:	b.w	12d2c <_svfprintf_r+0x914>
   135ac:	add	r2, sp, #140	; 0x8c
   135ae:	ldr	r1, [sp, #20]
   135b0:	ldr	r0, [sp, #24]
   135b2:	bl	154a0 <__ssprint_r>
   135b6:	cmp	r0, #0
   135b8:	bne.w	1260c <_svfprintf_r+0x1f4>
   135bc:	ldr	r4, [sp, #148]	; 0x94
   135be:	add.w	r9, sp, #192	; 0xc0
   135c2:	b.n	12dd4 <_svfprintf_r+0x9bc>
   135c4:	ldr	r7, [sp, #40]	; 0x28
   135c6:	b.w	12d82 <_svfprintf_r+0x96a>
   135ca:	ldr	r3, [sp, #144]	; 0x90
   135cc:	ldr	r2, [pc, #736]	; (138b0 <_svfprintf_r+0x1498>)
   135ce:	str.w	r2, [r9]
   135d2:	adds	r3, #1
   135d4:	adds	r4, #1
   135d6:	movs	r2, #1
   135d8:	cmp	r3, #7
   135da:	str	r4, [sp, #148]	; 0x94
   135dc:	str	r3, [sp, #144]	; 0x90
   135de:	str.w	r2, [r9, #4]
   135e2:	bgt.w	136fc <_svfprintf_r+0x12e4>
   135e6:	add.w	r9, r9, #8
   135ea:	cbnz	r5, 135f8 <_svfprintf_r+0x11e0>
   135ec:	ldr	r3, [sp, #56]	; 0x38
   135ee:	cbnz	r3, 135f8 <_svfprintf_r+0x11e0>
   135f0:	ldr	r3, [sp, #12]
   135f2:	lsls	r7, r3, #31
   135f4:	bpl.w	12944 <_svfprintf_r+0x52c>
   135f8:	ldr	r3, [sp, #144]	; 0x90
   135fa:	ldr	r1, [sp, #72]	; 0x48
   135fc:	ldr	r2, [sp, #76]	; 0x4c
   135fe:	str.w	r2, [r9]
   13602:	adds	r3, #1
   13604:	add	r4, r1
   13606:	cmp	r3, #7
   13608:	str	r4, [sp, #148]	; 0x94
   1360a:	str.w	r1, [r9, #4]
   1360e:	str	r3, [sp, #144]	; 0x90
   13610:	bgt.w	139ae <_svfprintf_r+0x1596>
   13614:	add.w	r9, r9, #8
   13618:	negs	r5, r5
   1361a:	cmp	r5, #0
   1361c:	ble.w	13774 <_svfprintf_r+0x135c>
   13620:	ldr	r2, [pc, #656]	; (138b4 <_svfprintf_r+0x149c>)
   13622:	str	r2, [sp, #44]	; 0x2c
   13624:	cmp	r5, #16
   13626:	ble.w	137bc <_svfprintf_r+0x13a4>
   1362a:	mov	r2, r4
   1362c:	movs	r7, #16
   1362e:	ldr.w	fp, [sp, #24]
   13632:	ldr	r4, [sp, #20]
   13634:	b.n	13642 <_svfprintf_r+0x122a>
   13636:	add.w	r9, r9, #8
   1363a:	subs	r5, #16
   1363c:	cmp	r5, #16
   1363e:	ble.w	137ba <_svfprintf_r+0x13a2>
   13642:	adds	r3, #1
   13644:	adds	r2, #16
   13646:	cmp	r3, #7
   13648:	str	r2, [sp, #148]	; 0x94
   1364a:	str	r3, [sp, #144]	; 0x90
   1364c:	str.w	sl, [r9]
   13650:	str.w	r7, [r9, #4]
   13654:	ble.n	13636 <_svfprintf_r+0x121e>
   13656:	add	r2, sp, #140	; 0x8c
   13658:	mov	r1, r4
   1365a:	mov	r0, fp
   1365c:	bl	154a0 <__ssprint_r>
   13660:	cmp	r0, #0
   13662:	bne.w	1260c <_svfprintf_r+0x1f4>
   13666:	ldr	r2, [sp, #148]	; 0x94
   13668:	ldr	r3, [sp, #144]	; 0x90
   1366a:	add.w	r9, sp, #192	; 0xc0
   1366e:	b.n	1363a <_svfprintf_r+0x1222>
   13670:	ldr	r2, [sp, #12]
   13672:	b.w	12ae8 <_svfprintf_r+0x6d0>
   13676:	ldr	r2, [sp, #12]
   13678:	b.n	13192 <_svfprintf_r+0xd7a>
   1367a:	ldr	r3, [sp, #12]
   1367c:	orr.w	r3, r3, #32
   13680:	str	r3, [sp, #12]
   13682:	add.w	r8, r8, #1
   13686:	ldrb.w	r3, [r8]
   1368a:	b.w	124cc <_svfprintf_r+0xb4>
   1368e:	add	r2, sp, #140	; 0x8c
   13690:	ldr	r1, [sp, #20]
   13692:	ldr	r0, [sp, #24]
   13694:	bl	154a0 <__ssprint_r>
   13698:	cmp	r0, #0
   1369a:	bne.w	1260c <_svfprintf_r+0x1f4>
   1369e:	ldr	r4, [sp, #148]	; 0x94
   136a0:	add.w	r9, sp, #192	; 0xc0
   136a4:	b.w	12e04 <_svfprintf_r+0x9ec>
   136a8:	movs	r1, #64	; 0x40
   136aa:	ldr	r0, [sp, #24]
   136ac:	bl	11050 <_malloc_r>
   136b0:	ldr	r2, [sp, #20]
   136b2:	str	r0, [r2, #0]
   136b4:	str	r0, [r2, #16]
   136b6:	cmp	r0, #0
   136b8:	beq.w	13aa2 <_svfprintf_r+0x168a>
   136bc:	ldr	r2, [sp, #20]
   136be:	movs	r3, #64	; 0x40
   136c0:	str	r3, [r2, #20]
   136c2:	b.w	12446 <_svfprintf_r+0x2e>
   136c6:	add	r2, sp, #132	; 0x84
   136c8:	add	r3, sp, #120	; 0x78
   136ca:	str	r2, [sp, #4]
   136cc:	str	r3, [sp, #0]
   136ce:	mov	r2, fp
   136d0:	add	r3, sp, #116	; 0x74
   136d2:	movs	r1, #3
   136d4:	vldr	d0, [sp, #96]	; 0x60
   136d8:	ldr	r0, [sp, #24]
   136da:	bl	13d98 <_dtoa_r>
   136de:	mov	r5, fp
   136e0:	mov	r6, r0
   136e2:	ldr	r3, [sp, #52]	; 0x34
   136e4:	cmp	r3, #70	; 0x46
   136e6:	add.w	r4, r6, r5
   136ea:	bne.w	13472 <_svfprintf_r+0x105a>
   136ee:	ldrb	r3, [r6, #0]
   136f0:	cmp	r3, #48	; 0x30
   136f2:	beq.w	13a04 <_svfprintf_r+0x15ec>
   136f6:	ldr	r5, [sp, #116]	; 0x74
   136f8:	add	r4, r5
   136fa:	b.n	13472 <_svfprintf_r+0x105a>
   136fc:	add	r2, sp, #140	; 0x8c
   136fe:	ldr	r1, [sp, #20]
   13700:	ldr	r0, [sp, #24]
   13702:	bl	154a0 <__ssprint_r>
   13706:	cmp	r0, #0
   13708:	bne.w	1260c <_svfprintf_r+0x1f4>
   1370c:	ldr	r5, [sp, #116]	; 0x74
   1370e:	ldr	r4, [sp, #148]	; 0x94
   13710:	add.w	r9, sp, #192	; 0xc0
   13714:	b.n	135ea <_svfprintf_r+0x11d2>
   13716:	cmp.w	fp, #0
   1371a:	it	eq
   1371c:	moveq.w	fp, #1
   13720:	b.n	13412 <_svfprintf_r+0xffa>
   13722:	str	r3, [sp, #40]	; 0x28
   13724:	mov	r7, r2
   13726:	b.n	131e2 <_svfprintf_r+0xdca>
   13728:	str	r3, [sp, #40]	; 0x28
   1372a:	b.n	1351a <_svfprintf_r+0x1102>
   1372c:	adds	r3, #4
   1372e:	ldr	r4, [r2, #0]
   13730:	str	r3, [sp, #40]	; 0x28
   13732:	movs	r5, #0
   13734:	b.w	12b7e <_svfprintf_r+0x766>
   13738:	movs	r7, #45	; 0x2d
   1373a:	str	r3, [sp, #16]
   1373c:	ldr	r3, [sp, #44]	; 0x2c
   1373e:	str	r3, [sp, #12]
   13740:	strb.w	r7, [sp, #111]	; 0x6f
   13744:	mov.w	fp, #0
   13748:	b.w	127be <_svfprintf_r+0x3a6>
   1374c:	mov	r0, r6
   1374e:	bl	12240 <strlen>
   13752:	mov	fp, r4
   13754:	mov	r3, r0
   13756:	str	r0, [sp, #36]	; 0x24
   13758:	b.w	12ca0 <_svfprintf_r+0x888>
   1375c:	add	r2, sp, #140	; 0x8c
   1375e:	ldr	r1, [sp, #20]
   13760:	ldr	r0, [sp, #24]
   13762:	bl	154a0 <__ssprint_r>
   13766:	cmp	r0, #0
   13768:	bne.w	1260c <_svfprintf_r+0x1f4>
   1376c:	ldr	r4, [sp, #148]	; 0x94
   1376e:	ldr	r3, [sp, #144]	; 0x90
   13770:	add.w	r9, sp, #192	; 0xc0
   13774:	ldr	r1, [sp, #56]	; 0x38
   13776:	str.w	r6, [r9]
   1377a:	adds	r3, #1
   1377c:	add	r4, r1
   1377e:	cmp	r3, #7
   13780:	str	r4, [sp, #148]	; 0x94
   13782:	str	r3, [sp, #144]	; 0x90
   13784:	str.w	r1, [r9, #4]
   13788:	ble.w	12940 <_svfprintf_r+0x528>
   1378c:	b.w	12f86 <_svfprintf_r+0xb6e>
   13790:	ldr	r3, [sp, #116]	; 0x74
   13792:	adds	r5, r3, #3
   13794:	blt.n	137d4 <_svfprintf_r+0x13bc>
   13796:	cmp	fp, r3
   13798:	blt.n	137d4 <_svfprintf_r+0x13bc>
   1379a:	str	r3, [sp, #60]	; 0x3c
   1379c:	b.n	134b6 <_svfprintf_r+0x109e>
   1379e:	mov	r3, r4
   137a0:	b.n	13498 <_svfprintf_r+0x1080>
   137a2:	add	r2, sp, #140	; 0x8c
   137a4:	ldr	r1, [sp, #20]
   137a6:	ldr	r0, [sp, #24]
   137a8:	bl	154a0 <__ssprint_r>
   137ac:	cmp	r0, #0
   137ae:	bne.w	1260c <_svfprintf_r+0x1f4>
   137b2:	ldr	r4, [sp, #148]	; 0x94
   137b4:	add.w	r9, sp, #192	; 0xc0
   137b8:	b.n	13054 <_svfprintf_r+0xc3c>
   137ba:	mov	r4, r2
   137bc:	adds	r3, #1
   137be:	ldr	r2, [sp, #44]	; 0x2c
   137c0:	str	r3, [sp, #144]	; 0x90
   137c2:	add	r4, r5
   137c4:	cmp	r3, #7
   137c6:	str	r4, [sp, #148]	; 0x94
   137c8:	stmia.w	r9, {r2, r5}
   137cc:	bgt.n	1375c <_svfprintf_r+0x1344>
   137ce:	add.w	r9, r9, #8
   137d2:	b.n	13774 <_svfprintf_r+0x135c>
   137d4:	ldr	r2, [sp, #52]	; 0x34
   137d6:	subs	r2, #2
   137d8:	str	r2, [sp, #52]	; 0x34
   137da:	subs	r3, #1
   137dc:	cmp	r3, #0
   137de:	ldrb.w	r2, [sp, #52]	; 0x34
   137e2:	str	r3, [sp, #116]	; 0x74
   137e4:	it	lt
   137e6:	neglt	r3, r3
   137e8:	strb.w	r2, [sp, #124]	; 0x7c
   137ec:	ite	lt
   137ee:	movlt	r2, #45	; 0x2d
   137f0:	movge	r2, #43	; 0x2b
   137f2:	cmp	r3, #9
   137f4:	strb.w	r2, [sp, #125]	; 0x7d
   137f8:	ble.w	139d2 <_svfprintf_r+0x15ba>
   137fc:	add.w	r0, sp, #139	; 0x8b
   13800:	mov	r4, r0
   13802:	ldr	r2, [pc, #180]	; (138b8 <_svfprintf_r+0x14a0>)
   13804:	smull	r2, r1, r2, r3
   13808:	asrs	r2, r3, #31
   1380a:	rsb	r2, r2, r1, asr #2
   1380e:	add.w	r1, r2, r2, lsl #2
   13812:	sub.w	r3, r3, r1, lsl #1
   13816:	add.w	r1, r3, #48	; 0x30
   1381a:	cmp	r2, #9
   1381c:	mov	r3, r2
   1381e:	strb.w	r1, [r4, #-1]!
   13822:	bgt.n	13802 <_svfprintf_r+0x13ea>
   13824:	mov	r1, r4
   13826:	adds	r3, #48	; 0x30
   13828:	uxtb	r2, r3
   1382a:	strb.w	r2, [r1, #-1]!
   1382e:	cmp	r0, r1
   13830:	bls.w	13a9c <_svfprintf_r+0x1684>
   13834:	add.w	r1, sp, #126	; 0x7e
   13838:	mov	r3, r4
   1383a:	b.n	13840 <_svfprintf_r+0x1428>
   1383c:	ldrb.w	r2, [r3], #1
   13840:	strb.w	r2, [r1], #1
   13844:	cmp	r0, r3
   13846:	bne.n	1383c <_svfprintf_r+0x1424>
   13848:	adds	r3, r0, #1
   1384a:	subs	r3, r3, r4
   1384c:	add.w	r2, sp, #126	; 0x7e
   13850:	add	r3, r2
   13852:	add	r2, sp, #124	; 0x7c
   13854:	subs	r3, r3, r2
   13856:	ldr	r2, [sp, #56]	; 0x38
   13858:	str	r3, [sp, #84]	; 0x54
   1385a:	cmp	r2, #1
   1385c:	add	r3, r2
   1385e:	str	r3, [sp, #36]	; 0x24
   13860:	ble.w	13a32 <_svfprintf_r+0x161a>
   13864:	ldr	r3, [sp, #36]	; 0x24
   13866:	ldr	r2, [sp, #72]	; 0x48
   13868:	add	r3, r2
   1386a:	movs	r2, #0
   1386c:	str	r3, [sp, #36]	; 0x24
   1386e:	str	r2, [sp, #60]	; 0x3c
   13870:	bic.w	r3, r3, r3, asr #31
   13874:	b.n	134d2 <_svfprintf_r+0x10ba>
   13876:	add	r2, sp, #140	; 0x8c
   13878:	ldr	r1, [sp, #20]
   1387a:	ldr	r0, [sp, #24]
   1387c:	bl	154a0 <__ssprint_r>
   13880:	cmp	r0, #0
   13882:	bne.w	1260c <_svfprintf_r+0x1f4>
   13886:	ldr	r3, [sp, #116]	; 0x74
   13888:	ldr	r4, [sp, #148]	; 0x94
   1388a:	add.w	r9, sp, #192	; 0xc0
   1388e:	b.n	13268 <_svfprintf_r+0xe50>
   13890:	add	r2, sp, #140	; 0x8c
   13892:	ldr	r1, [sp, #20]
   13894:	ldr	r0, [sp, #24]
   13896:	bl	154a0 <__ssprint_r>
   1389a:	cmp	r0, #0
   1389c:	bne.w	1260c <_svfprintf_r+0x1f4>
   138a0:	ldr	r3, [sp, #116]	; 0x74
   138a2:	ldr	r2, [sp, #56]	; 0x38
   138a4:	ldr	r4, [sp, #148]	; 0x94
   138a6:	subs	r3, r2, r3
   138a8:	add.w	r9, sp, #192	; 0xc0
   138ac:	b.n	13298 <_svfprintf_r+0xe80>
   138ae:	nop
   138b0:	.word	0x00015ee4
   138b4:	.word	0x00015e94
   138b8:	.word	0x66666667
   138bc:	cmp	r5, #6
   138be:	mov	r3, r5
   138c0:	it	cs
   138c2:	movcs	r3, #6
   138c4:	str	r3, [sp, #36]	; 0x24
   138c6:	bic.w	r3, r3, r3, asr #31
   138ca:	mov	fp, r6
   138cc:	str	r7, [sp, #40]	; 0x28
   138ce:	str	r6, [sp, #60]	; 0x3c
   138d0:	mov	r7, r6
   138d2:	str	r3, [sp, #16]
   138d4:	ldr	r6, [pc, #536]	; (13af0 <_svfprintf_r+0x16d8>)
   138d6:	b.w	127bc <_svfprintf_r+0x3a4>
   138da:	mov.w	fp, #6
   138de:	b.n	13412 <_svfprintf_r+0xffa>
   138e0:	add	r2, sp, #132	; 0x84
   138e2:	add	r3, sp, #120	; 0x78
   138e4:	str	r2, [sp, #4]
   138e6:	str	r3, [sp, #0]
   138e8:	mov	r2, fp
   138ea:	add	r3, sp, #116	; 0x74
   138ec:	movs	r1, #3
   138ee:	vldr	d0, [sp, #96]	; 0x60
   138f2:	ldr	r0, [sp, #24]
   138f4:	bl	13d98 <_dtoa_r>
   138f8:	mov	r5, fp
   138fa:	mov	r6, r0
   138fc:	add.w	r4, r0, fp
   13900:	b.n	136ee <_svfprintf_r+0x12d6>
   13902:	movs	r7, #45	; 0x2d
   13904:	strb.w	r7, [sp, #111]	; 0x6f
   13908:	b.w	12a62 <_svfprintf_r+0x64a>
   1390c:	str	r3, [sp, #12]
   1390e:	b.w	12bba <_svfprintf_r+0x7a2>
   13912:	ldrd	r1, r2, [sp, #64]	; 0x40
   13916:	add.w	r3, r2, #2147483648	; 0x80000000
   1391a:	str	r3, [sp, #100]	; 0x64
   1391c:	movs	r3, #45	; 0x2d
   1391e:	str	r1, [sp, #96]	; 0x60
   13920:	str	r3, [sp, #16]
   13922:	b.n	1342e <_svfprintf_r+0x1016>
   13924:	ldr	r2, [sp, #72]	; 0x48
   13926:	ldr	r3, [sp, #56]	; 0x38
   13928:	add	r3, r2
   1392a:	ldr	r2, [sp, #60]	; 0x3c
   1392c:	str	r3, [sp, #36]	; 0x24
   1392e:	cmp	r2, #0
   13930:	ble.w	13a46 <_svfprintf_r+0x162e>
   13934:	movs	r2, #103	; 0x67
   13936:	bic.w	r3, r3, r3, asr #31
   1393a:	str	r2, [sp, #52]	; 0x34
   1393c:	b.n	134d2 <_svfprintf_r+0x10ba>
   1393e:	ldr	r3, [sp, #52]	; 0x34
   13940:	cmp	r3, #71	; 0x47
   13942:	bne.w	13470 <_svfprintf_r+0x1058>
   13946:	ldr	r3, [sp, #12]
   13948:	lsls	r3, r3, #31
   1394a:	bmi.w	136e2 <_svfprintf_r+0x12ca>
   1394e:	ldr	r3, [sp, #132]	; 0x84
   13950:	cmp	r7, #71	; 0x47
   13952:	sub.w	r3, r3, r6
   13956:	str	r3, [sp, #56]	; 0x38
   13958:	beq.w	13790 <_svfprintf_r+0x1378>
   1395c:	ldr	r3, [sp, #116]	; 0x74
   1395e:	b.n	137da <_svfprintf_r+0x13c2>
   13960:	bic.w	r3, r5, r5, asr #31
   13964:	str	r7, [sp, #40]	; 0x28
   13966:	str	r3, [sp, #16]
   13968:	str	r5, [sp, #36]	; 0x24
   1396a:	mov	fp, r0
   1396c:	str	r0, [sp, #60]	; 0x3c
   1396e:	ldrb.w	r7, [sp, #111]	; 0x6f
   13972:	b.w	127bc <_svfprintf_r+0x3a4>
   13976:	cmp	r3, #0
   13978:	ble.n	13a56 <_svfprintf_r+0x163e>
   1397a:	cmp.w	fp, #0
   1397e:	bne.n	13a20 <_svfprintf_r+0x1608>
   13980:	ldr	r2, [sp, #12]
   13982:	lsls	r4, r2, #31
   13984:	bmi.n	13a20 <_svfprintf_r+0x1608>
   13986:	mov	r2, r3
   13988:	str	r2, [sp, #36]	; 0x24
   1398a:	bic.w	r3, r3, r3, asr #31
   1398e:	b.n	134d2 <_svfprintf_r+0x10ba>
   13990:	ldr	r3, [sp, #12]
   13992:	lsls	r3, r3, #31
   13994:	mov	r7, fp
   13996:	bpl.n	139a4 <_svfprintf_r+0x158c>
   13998:	add	r6, sp, #256	; 0x100
   1399a:	movs	r3, #48	; 0x30
   1399c:	strb.w	r3, [r6, #-65]!
   139a0:	b.w	127a8 <_svfprintf_r+0x390>
   139a4:	str.w	fp, [sp, #36]	; 0x24
   139a8:	add	r6, sp, #192	; 0xc0
   139aa:	b.w	127ae <_svfprintf_r+0x396>
   139ae:	add	r2, sp, #140	; 0x8c
   139b0:	ldr	r1, [sp, #20]
   139b2:	ldr	r0, [sp, #24]
   139b4:	bl	154a0 <__ssprint_r>
   139b8:	cmp	r0, #0
   139ba:	bne.w	1260c <_svfprintf_r+0x1f4>
   139be:	ldr	r5, [sp, #116]	; 0x74
   139c0:	ldr	r4, [sp, #148]	; 0x94
   139c2:	ldr	r3, [sp, #144]	; 0x90
   139c4:	add.w	r9, sp, #192	; 0xc0
   139c8:	b.n	13618 <_svfprintf_r+0x1200>
   139ca:	mov	r8, r4
   139cc:	movs	r5, #0
   139ce:	b.w	124d0 <_svfprintf_r+0xb8>
   139d2:	adds	r3, #48	; 0x30
   139d4:	movs	r2, #48	; 0x30
   139d6:	strb.w	r3, [sp, #127]	; 0x7f
   139da:	strb.w	r2, [sp, #126]	; 0x7e
   139de:	add	r3, sp, #128	; 0x80
   139e0:	b.n	13852 <_svfprintf_r+0x143a>
   139e2:	ldr	r3, [sp, #132]	; 0x84
   139e4:	b.n	13498 <_svfprintf_r+0x1080>
   139e6:	ldr	r2, [sp, #72]	; 0x48
   139e8:	ldr	r3, [sp, #60]	; 0x3c
   139ea:	add	r3, r2
   139ec:	movs	r2, #103	; 0x67
   139ee:	str	r3, [sp, #36]	; 0x24
   139f0:	str	r2, [sp, #52]	; 0x34
   139f2:	bic.w	r3, r3, r3, asr #31
   139f6:	b.n	134d2 <_svfprintf_r+0x10ba>
   139f8:	ldr	r6, [pc, #248]	; (13af4 <_svfprintf_r+0x16dc>)
   139fa:	ldr	r3, [pc, #252]	; (13af8 <_svfprintf_r+0x16e0>)
   139fc:	ldrb.w	r7, [sp, #111]	; 0x6f
   13a00:	b.w	12a66 <_svfprintf_r+0x64e>
   13a04:	movs	r2, #0
   13a06:	movs	r3, #0
   13a08:	ldrd	r0, r1, [sp, #96]	; 0x60
   13a0c:	bl	10ba8 <__aeabi_dcmpeq>
   13a10:	cmp	r0, #0
   13a12:	bne.w	136f6 <_svfprintf_r+0x12de>
   13a16:	rsb	r5, r5, #1
   13a1a:	str	r5, [sp, #116]	; 0x74
   13a1c:	add	r4, r5
   13a1e:	b.n	13472 <_svfprintf_r+0x105a>
   13a20:	ldr	r3, [sp, #60]	; 0x3c
   13a22:	ldr	r2, [sp, #72]	; 0x48
   13a24:	adds	r5, r3, r2
   13a26:	add.w	r3, r5, fp
   13a2a:	str	r3, [sp, #36]	; 0x24
   13a2c:	bic.w	r3, r3, r3, asr #31
   13a30:	b.n	134d2 <_svfprintf_r+0x10ba>
   13a32:	ldr	r3, [sp, #12]
   13a34:	ands.w	r3, r3, #1
   13a38:	bne.w	13864 <_svfprintf_r+0x144c>
   13a3c:	str	r3, [sp, #60]	; 0x3c
   13a3e:	ldr	r3, [sp, #36]	; 0x24
   13a40:	bic.w	r3, r3, r3, asr #31
   13a44:	b.n	134d2 <_svfprintf_r+0x10ba>
   13a46:	ldr	r3, [sp, #60]	; 0x3c
   13a48:	ldr	r2, [sp, #36]	; 0x24
   13a4a:	rsb	r3, r3, #1
   13a4e:	add	r2, r3
   13a50:	mov	r3, r2
   13a52:	str	r2, [sp, #36]	; 0x24
   13a54:	b.n	13934 <_svfprintf_r+0x151c>
   13a56:	cmp.w	fp, #0
   13a5a:	bne.n	13a62 <_svfprintf_r+0x164a>
   13a5c:	ldr	r3, [sp, #12]
   13a5e:	lsls	r0, r3, #31
   13a60:	bpl.n	13a72 <_svfprintf_r+0x165a>
   13a62:	ldr	r3, [sp, #72]	; 0x48
   13a64:	adds	r5, r3, #1
   13a66:	add.w	r3, r5, fp
   13a6a:	str	r3, [sp, #36]	; 0x24
   13a6c:	bic.w	r3, r3, r3, asr #31
   13a70:	b.n	134d2 <_svfprintf_r+0x10ba>
   13a72:	movs	r3, #1
   13a74:	str	r3, [sp, #36]	; 0x24
   13a76:	b.n	134d2 <_svfprintf_r+0x10ba>
   13a78:	ldr	r0, [sp, #40]	; 0x28
   13a7a:	ldrb.w	r3, [r8, #1]
   13a7e:	ldr	r5, [r0, #0]
   13a80:	adds	r0, #4
   13a82:	cmp	r5, #0
   13a84:	str	r0, [sp, #40]	; 0x28
   13a86:	mov	r8, r4
   13a88:	bge.w	124cc <_svfprintf_r+0xb4>
   13a8c:	mov.w	r5, #4294967295
   13a90:	b.w	124cc <_svfprintf_r+0xb4>
   13a94:	strb.w	r1, [sp, #111]	; 0x6f
   13a98:	b.w	1262e <_svfprintf_r+0x216>
   13a9c:	add.w	r3, sp, #126	; 0x7e
   13aa0:	b.n	13852 <_svfprintf_r+0x143a>
   13aa2:	ldr	r2, [sp, #24]
   13aa4:	movs	r3, #12
   13aa6:	str	r3, [r2, #0]
   13aa8:	mov.w	r0, #4294967295
   13aac:	b.w	1261e <_svfprintf_r+0x206>
   13ab0:	strb.w	r1, [sp, #111]	; 0x6f
   13ab4:	b.w	12728 <_svfprintf_r+0x310>
   13ab8:	strb.w	r1, [sp, #111]	; 0x6f
   13abc:	b.w	129f4 <_svfprintf_r+0x5dc>
   13ac0:	strb.w	r1, [sp, #111]	; 0x6f
   13ac4:	b.w	12b62 <_svfprintf_r+0x74a>
   13ac8:	strb.w	r1, [sp, #111]	; 0x6f
   13acc:	b.w	12b06 <_svfprintf_r+0x6ee>
   13ad0:	strb.w	r1, [sp, #111]	; 0x6f
   13ad4:	b.w	12ab2 <_svfprintf_r+0x69a>
   13ad8:	strb.w	r1, [sp, #111]	; 0x6f
   13adc:	b.w	12d4a <_svfprintf_r+0x932>
   13ae0:	strb.w	r1, [sp, #111]	; 0x6f
   13ae4:	b.w	12d08 <_svfprintf_r+0x8f0>
   13ae8:	strb.w	r1, [sp, #111]	; 0x6f
   13aec:	b.w	12ccc <_svfprintf_r+0x8b4>
   13af0:	.word	0x00015edc
   13af4:	.word	0x00015eb0
   13af8:	.word	0x00015eac

00013afc <_vdprintf_r>:
   13afc:	push	{r4, r5, r6, r7, lr}
   13afe:	sub.w	sp, sp, #532	; 0x214
   13b02:	add	r5, sp, #16
   13b04:	str	r3, [sp, #0]
   13b06:	mov	r7, r1
   13b08:	mov	r3, r2
   13b0a:	mov.w	r4, #512	; 0x200
   13b0e:	add	r2, sp, #12
   13b10:	mov	r1, r5
   13b12:	str	r4, [sp, #12]
   13b14:	mov	r6, r0
   13b16:	bl	155a0 <_vasnprintf_r>
   13b1a:	cbz	r0, 13b40 <_vdprintf_r+0x44>
   13b1c:	mov	r4, r0
   13b1e:	mov	r2, r0
   13b20:	mov	r1, r7
   13b22:	ldr	r3, [sp, #12]
   13b24:	mov	r0, r6
   13b26:	bl	13b7c <_write_r>
   13b2a:	cmp	r4, r5
   13b2c:	str	r0, [sp, #12]
   13b2e:	beq.n	13b3a <_vdprintf_r+0x3e>
   13b30:	mov	r0, r6
   13b32:	mov	r1, r4
   13b34:	bl	14c90 <_free_r>
   13b38:	ldr	r0, [sp, #12]
   13b3a:	add.w	sp, sp, #532	; 0x214
   13b3e:	pop	{r4, r5, r6, r7, pc}
   13b40:	mov.w	r0, #4294967295
   13b44:	b.n	13b3a <_vdprintf_r+0x3e>
   13b46:	nop

00013b48 <vdprintf>:
   13b48:	push	{r4}
   13b4a:	ldr	r4, [pc, #16]	; (13b5c <vdprintf+0x14>)
   13b4c:	mov	r3, r2
   13b4e:	mov	r2, r1
   13b50:	mov	r1, r0
   13b52:	ldr	r0, [r4, #0]
   13b54:	ldr.w	r4, [sp], #4
   13b58:	b.w	13afc <_vdprintf_r>
   13b5c:	.word	0x1fff0ef8

00013b60 <__ascii_wctomb>:
   13b60:	cbz	r1, 13b6c <__ascii_wctomb+0xc>
   13b62:	cmp	r2, #255	; 0xff
   13b64:	bhi.n	13b70 <__ascii_wctomb+0x10>
   13b66:	strb	r2, [r1, #0]
   13b68:	movs	r0, #1
   13b6a:	bx	lr
   13b6c:	mov	r0, r1
   13b6e:	bx	lr
   13b70:	movs	r3, #138	; 0x8a
   13b72:	str	r3, [r0, #0]
   13b74:	mov.w	r0, #4294967295
   13b78:	bx	lr
   13b7a:	nop

00013b7c <_write_r>:
   13b7c:	push	{r4, r5, r6, lr}
   13b7e:	mov	r5, r1
   13b80:	ldr	r4, [pc, #32]	; (13ba4 <_write_r+0x28>)
   13b82:	mov	r1, r2
   13b84:	mov	r6, r0
   13b86:	mov	r2, r3
   13b88:	mov	r0, r5
   13b8a:	movs	r3, #0
   13b8c:	str	r3, [r4, #0]
   13b8e:	bl	10020 <_write>
   13b92:	adds	r3, r0, #1
   13b94:	beq.n	13b98 <_write_r+0x1c>
   13b96:	pop	{r4, r5, r6, pc}
   13b98:	ldr	r3, [r4, #0]
   13b9a:	cmp	r3, #0
   13b9c:	beq.n	13b96 <_write_r+0x1a>
   13b9e:	str	r3, [r6, #0]
   13ba0:	pop	{r4, r5, r6, pc}
   13ba2:	nop
   13ba4:	.word	0x1fff26c4

00013ba8 <__register_exitproc>:
   13ba8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13bac:	ldr	r4, [pc, #148]	; (13c44 <__register_exitproc+0x9c>)
   13bae:	ldr	r5, [r4, #0]
   13bb0:	ldr.w	r4, [r5, #328]	; 0x148
   13bb4:	mov	r6, r0
   13bb6:	mov	r8, r1
   13bb8:	mov	sl, r2
   13bba:	mov	r9, r3
   13bbc:	cbz	r4, 13c30 <__register_exitproc+0x88>
   13bbe:	ldr	r0, [r4, #4]
   13bc0:	cmp	r0, #31
   13bc2:	bgt.n	13bf4 <__register_exitproc+0x4c>
   13bc4:	adds	r3, r0, #1
   13bc6:	cbz	r6, 13be6 <__register_exitproc+0x3e>
   13bc8:	add.w	r5, r4, r0, lsl #2
   13bcc:	movs	r2, #1
   13bce:	str.w	sl, [r5, #136]	; 0x88
   13bd2:	ldr.w	r1, [r4, #392]	; 0x188
   13bd6:	lsls	r2, r0
   13bd8:	orrs	r1, r2
   13bda:	cmp	r6, #2
   13bdc:	str.w	r1, [r4, #392]	; 0x188
   13be0:	str.w	r9, [r5, #264]	; 0x108
   13be4:	beq.n	13c24 <__register_exitproc+0x7c>
   13be6:	adds	r0, #2
   13be8:	str	r3, [r4, #4]
   13bea:	str.w	r8, [r4, r0, lsl #2]
   13bee:	movs	r0, #0
   13bf0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13bf4:	ldr	r3, [pc, #80]	; (13c48 <__register_exitproc+0xa0>)
   13bf6:	cbz	r3, 13c3a <__register_exitproc+0x92>
   13bf8:	mov.w	r0, #400	; 0x190
   13bfc:	bl	11030 <malloc>
   13c00:	mov	r4, r0
   13c02:	cbz	r0, 13c3a <__register_exitproc+0x92>
   13c04:	ldr.w	r3, [r5, #328]	; 0x148
   13c08:	movs	r7, #0
   13c0a:	stmia.w	r0, {r3, r7}
   13c0e:	str.w	r4, [r5, #328]	; 0x148
   13c12:	mov	r0, r7
   13c14:	movs	r3, #1
   13c16:	str.w	r7, [r4, #392]	; 0x188
   13c1a:	str.w	r7, [r4, #396]	; 0x18c
   13c1e:	cmp	r6, #0
   13c20:	beq.n	13be6 <__register_exitproc+0x3e>
   13c22:	b.n	13bc8 <__register_exitproc+0x20>
   13c24:	ldr.w	r1, [r4, #396]	; 0x18c
   13c28:	orrs	r2, r1
   13c2a:	str.w	r2, [r4, #396]	; 0x18c
   13c2e:	b.n	13be6 <__register_exitproc+0x3e>
   13c30:	add.w	r4, r5, #332	; 0x14c
   13c34:	str.w	r4, [r5, #328]	; 0x148
   13c38:	b.n	13bbe <__register_exitproc+0x16>
   13c3a:	mov.w	r0, #4294967295
   13c3e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13c42:	nop
   13c44:	.word	0x00015e84
   13c48:	.word	0x00011031

00013c4c <register_fini>:
   13c4c:	ldr	r3, [pc, #8]	; (13c58 <register_fini+0xc>)
   13c4e:	cbz	r3, 13c56 <register_fini+0xa>
   13c50:	ldr	r0, [pc, #8]	; (13c5c <register_fini+0x10>)
   13c52:	b.w	13c60 <atexit>
   13c56:	bx	lr
   13c58:	.word	0x00000000
   13c5c:	.word	0x00014bcd

00013c60 <atexit>:
   13c60:	movs	r3, #0
   13c62:	mov	r1, r0
   13c64:	mov	r2, r3
   13c66:	mov	r0, r3
   13c68:	b.w	13ba8 <__register_exitproc>

00013c6c <quorem>:
   13c6c:	ldr	r2, [r0, #16]
   13c6e:	ldr	r3, [r1, #16]
   13c70:	cmp	r3, r2
   13c72:	bgt.w	13d90 <quorem+0x124>
   13c76:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c7a:	add.w	r8, r3, #4294967295
   13c7e:	add.w	r7, r1, #20
   13c82:	add.w	fp, r0, #20
   13c86:	ldr.w	r2, [r7, r8, lsl #2]
   13c8a:	ldr.w	r3, [fp, r8, lsl #2]
   13c8e:	mov.w	r4, r8, lsl #2
   13c92:	sub	sp, #12
   13c94:	adds	r2, #1
   13c96:	udiv	r9, r3, r2
   13c9a:	add.w	r3, fp, r4
   13c9e:	str	r4, [sp, #0]
   13ca0:	add.w	sl, r7, r4
   13ca4:	str	r3, [sp, #4]
   13ca6:	cmp.w	r9, #0
   13caa:	beq.n	13d20 <quorem+0xb4>
   13cac:	movs	r5, #0
   13cae:	mov	ip, r7
   13cb0:	mov	lr, fp
   13cb2:	mov	r3, r5
   13cb4:	ldr.w	r6, [ip], #4
   13cb8:	ldr.w	r2, [lr]
   13cbc:	uxth	r4, r6
   13cbe:	mla	r5, r9, r4, r5
   13cc2:	lsrs	r6, r6, #16
   13cc4:	lsrs	r4, r5, #16
   13cc6:	mla	r4, r9, r6, r4
   13cca:	uxth	r5, r5
   13ccc:	subs	r3, r3, r5
   13cce:	uxth	r6, r4
   13cd0:	uxtah	r3, r3, r2
   13cd4:	rsb	r6, r6, r2, lsr #16
   13cd8:	add.w	r6, r6, r3, asr #16
   13cdc:	uxth	r3, r3
   13cde:	orr.w	r3, r3, r6, lsl #16
   13ce2:	cmp	sl, ip
   13ce4:	str.w	r3, [lr], #4
   13ce8:	mov.w	r5, r4, lsr #16
   13cec:	mov.w	r3, r6, asr #16
   13cf0:	bcs.n	13cb4 <quorem+0x48>
   13cf2:	ldr	r3, [sp, #0]
   13cf4:	ldr.w	r3, [fp, r3]
   13cf8:	cbnz	r3, 13d20 <quorem+0xb4>
   13cfa:	ldr	r4, [sp, #4]
   13cfc:	subs	r3, r4, #4
   13cfe:	cmp	fp, r3
   13d00:	bcs.n	13d1c <quorem+0xb0>
   13d02:	ldr.w	r3, [r4, #-4]
   13d06:	cbnz	r3, 13d1c <quorem+0xb0>
   13d08:	sub.w	r3, r4, #8
   13d0c:	b.n	13d14 <quorem+0xa8>
   13d0e:	ldr	r2, [r3, #0]
   13d10:	subs	r3, #4
   13d12:	cbnz	r2, 13d1c <quorem+0xb0>
   13d14:	cmp	fp, r3
   13d16:	add.w	r8, r8, #4294967295
   13d1a:	bcc.n	13d0e <quorem+0xa2>
   13d1c:	str.w	r8, [r0, #16]
   13d20:	mov	r4, r0
   13d22:	bl	1528c <__mcmp>
   13d26:	cmp	r0, #0
   13d28:	blt.n	13d88 <quorem+0x11c>
   13d2a:	add.w	r9, r9, #1
   13d2e:	mov	r5, fp
   13d30:	movs	r3, #0
   13d32:	ldr.w	r1, [r7], #4
   13d36:	ldr	r0, [r5, #0]
   13d38:	uxth	r2, r1
   13d3a:	subs	r2, r3, r2
   13d3c:	lsrs	r1, r1, #16
   13d3e:	uxtah	r2, r2, r0
   13d42:	rsb	r3, r1, r0, lsr #16
   13d46:	add.w	r3, r3, r2, asr #16
   13d4a:	uxth	r1, r2
   13d4c:	orr.w	r1, r1, r3, lsl #16
   13d50:	cmp	sl, r7
   13d52:	str.w	r1, [r5], #4
   13d56:	mov.w	r3, r3, asr #16
   13d5a:	bcs.n	13d32 <quorem+0xc6>
   13d5c:	ldr.w	r2, [fp, r8, lsl #2]
   13d60:	add.w	r3, fp, r8, lsl #2
   13d64:	cbnz	r2, 13d88 <quorem+0x11c>
   13d66:	subs	r2, r3, #4
   13d68:	cmp	fp, r2
   13d6a:	bcs.n	13d84 <quorem+0x118>
   13d6c:	ldr.w	r2, [r3, #-4]
   13d70:	cbnz	r2, 13d84 <quorem+0x118>
   13d72:	subs	r3, #8
   13d74:	b.n	13d7c <quorem+0x110>
   13d76:	ldr	r2, [r3, #0]
   13d78:	subs	r3, #4
   13d7a:	cbnz	r2, 13d84 <quorem+0x118>
   13d7c:	cmp	fp, r3
   13d7e:	add.w	r8, r8, #4294967295
   13d82:	bcc.n	13d76 <quorem+0x10a>
   13d84:	str.w	r8, [r4, #16]
   13d88:	mov	r0, r9
   13d8a:	add	sp, #12
   13d8c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d90:	movs	r0, #0
   13d92:	bx	lr
   13d94:			; <UNDEFINED> instruction: 0xffffffff

00013d98 <_dtoa_r>:
   13d98:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d9c:	vmov	r6, r7, d0
   13da0:	sub	sp, #108	; 0x6c
   13da2:	ldr	r4, [r0, #64]	; 0x40
   13da4:	ldr	r5, [sp, #144]	; 0x90
   13da6:	str	r1, [sp, #0]
   13da8:	mov	r9, r0
   13daa:	str	r2, [sp, #20]
   13dac:	str	r3, [sp, #12]
   13dae:	vmov	sl, s0
   13db2:	mov	fp, r7
   13db4:	cbz	r4, 13dcc <_dtoa_r+0x34>
   13db6:	ldr	r2, [r0, #68]	; 0x44
   13db8:	str	r2, [r4, #4]
   13dba:	movs	r3, #1
   13dbc:	lsls	r3, r2
   13dbe:	str	r3, [r4, #8]
   13dc0:	mov	r1, r4
   13dc2:	bl	14ec8 <_Bfree>
   13dc6:	movs	r3, #0
   13dc8:	str.w	r3, [r9, #64]	; 0x40
   13dcc:	cmp.w	fp, #0
   13dd0:	mov	r4, fp
   13dd2:	blt.n	13e3e <_dtoa_r+0xa6>
   13dd4:	movs	r3, #0
   13dd6:	str	r3, [r5, #0]
   13dd8:	ldr	r3, [pc, #644]	; (14060 <_dtoa_r+0x2c8>)
   13dda:	mov	r2, r3
   13ddc:	ands	r3, r4
   13dde:	cmp	r3, r2
   13de0:	beq.n	13e10 <_dtoa_r+0x78>
   13de2:	movs	r2, #0
   13de4:	movs	r3, #0
   13de6:	mov	r0, sl
   13de8:	mov	r1, fp
   13dea:	bl	10ba8 <__aeabi_dcmpeq>
   13dee:	mov	r6, sl
   13df0:	mov	r7, fp
   13df2:	mov	r8, r0
   13df4:	cbz	r0, 13e4a <_dtoa_r+0xb2>
   13df6:	ldr	r2, [sp, #12]
   13df8:	movs	r3, #1
   13dfa:	str	r3, [r2, #0]
   13dfc:	ldr	r3, [sp, #148]	; 0x94
   13dfe:	cmp	r3, #0
   13e00:	beq.w	13f80 <_dtoa_r+0x1e8>
   13e04:	ldr	r0, [pc, #604]	; (14064 <_dtoa_r+0x2cc>)
   13e06:	str	r0, [r3, #0]
   13e08:	subs	r0, #1
   13e0a:	add	sp, #108	; 0x6c
   13e0c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e10:	ldr	r2, [sp, #12]
   13e12:	movw	r3, #9999	; 0x270f
   13e16:	str	r3, [r2, #0]
   13e18:	cmp.w	sl, #0
   13e1c:	beq.w	13f54 <_dtoa_r+0x1bc>
   13e20:	ldr	r0, [pc, #580]	; (14068 <_dtoa_r+0x2d0>)
   13e22:	ldr	r3, [sp, #148]	; 0x94
   13e24:	cmp	r3, #0
   13e26:	beq.n	13e0a <_dtoa_r+0x72>
   13e28:	ldrb	r3, [r0, #3]
   13e2a:	cmp	r3, #0
   13e2c:	beq.w	13f84 <_dtoa_r+0x1ec>
   13e30:	add.w	r3, r0, #8
   13e34:	ldr	r2, [sp, #148]	; 0x94
   13e36:	str	r3, [r2, #0]
   13e38:	add	sp, #108	; 0x6c
   13e3a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e3e:	movs	r3, #1
   13e40:	bic.w	r4, fp, #2147483648	; 0x80000000
   13e44:	str	r3, [r5, #0]
   13e46:	mov	fp, r4
   13e48:	b.n	13dd8 <_dtoa_r+0x40>
   13e4a:	add	r2, sp, #96	; 0x60
   13e4c:	add	r1, sp, #100	; 0x64
   13e4e:	vmov	d0, r6, r7
   13e52:	mov	r0, r9
   13e54:	bl	153e4 <__d2b>
   13e58:	lsrs	r5, r4, #20
   13e5a:	str	r0, [sp, #40]	; 0x28
   13e5c:	bne.w	13f66 <_dtoa_r+0x1ce>
   13e60:	ldr	r5, [sp, #96]	; 0x60
   13e62:	ldr	r6, [sp, #100]	; 0x64
   13e64:	add	r6, r5
   13e66:	addw	r3, r6, #1074	; 0x432
   13e6a:	cmp	r3, #32
   13e6c:	ble.w	14380 <_dtoa_r+0x5e8>
   13e70:	rsb	r3, r3, #64	; 0x40
   13e74:	addw	r0, r6, #1042	; 0x412
   13e78:	lsls	r4, r3
   13e7a:	lsr.w	r0, sl, r0
   13e7e:	orrs	r0, r4
   13e80:	bl	105ec <__aeabi_ui2d>
   13e84:	movs	r3, #1
   13e86:	subs	r4, r6, #1
   13e88:	sub.w	r1, r1, #32505856	; 0x1f00000
   13e8c:	str	r3, [sp, #60]	; 0x3c
   13e8e:	movs	r2, #0
   13e90:	ldr	r3, [pc, #472]	; (1406c <_dtoa_r+0x2d4>)
   13e92:	bl	10370 <__aeabi_dsub>
   13e96:	add	r3, pc, #432	; (adr r3, 14048 <_dtoa_r+0x2b0>)
   13e98:	ldrd	r2, r3, [r3]
   13e9c:	bl	106d8 <__aeabi_dmul>
   13ea0:	add	r3, pc, #428	; (adr r3, 14050 <_dtoa_r+0x2b8>)
   13ea2:	ldrd	r2, r3, [r3]
   13ea6:	bl	10374 <__adddf3>
   13eaa:	mov	r6, r0
   13eac:	mov	r0, r4
   13eae:	mov	r7, r1
   13eb0:	bl	1060c <__aeabi_i2d>
   13eb4:	add	r3, pc, #416	; (adr r3, 14058 <_dtoa_r+0x2c0>)
   13eb6:	ldrd	r2, r3, [r3]
   13eba:	bl	106d8 <__aeabi_dmul>
   13ebe:	mov	r2, r0
   13ec0:	mov	r3, r1
   13ec2:	mov	r0, r6
   13ec4:	mov	r1, r7
   13ec6:	bl	10374 <__adddf3>
   13eca:	mov	r6, r0
   13ecc:	mov	r7, r1
   13ece:	bl	10c38 <__aeabi_d2iz>
   13ed2:	movs	r2, #0
   13ed4:	str	r0, [sp, #16]
   13ed6:	movs	r3, #0
   13ed8:	mov	r0, r6
   13eda:	mov	r1, r7
   13edc:	bl	10bbc <__aeabi_dcmplt>
   13ee0:	cmp	r0, #0
   13ee2:	bne.w	14336 <_dtoa_r+0x59e>
   13ee6:	ldr	r6, [sp, #16]
   13ee8:	cmp	r6, #22
   13eea:	bhi.w	14330 <_dtoa_r+0x598>
   13eee:	ldr	r3, [pc, #384]	; (14070 <_dtoa_r+0x2d8>)
   13ef0:	add.w	r3, r3, r6, lsl #3
   13ef4:	ldrd	r0, r1, [r3]
   13ef8:	mov	r2, sl
   13efa:	mov	r3, fp
   13efc:	bl	10bf8 <__aeabi_dcmpgt>
   13f00:	cmp	r0, #0
   13f02:	beq.w	1438a <_dtoa_r+0x5f2>
   13f06:	subs	r3, r6, #1
   13f08:	str	r3, [sp, #16]
   13f0a:	movs	r3, #0
   13f0c:	str	r3, [sp, #52]	; 0x34
   13f0e:	subs	r5, r5, r4
   13f10:	subs.w	r8, r5, #1
   13f14:	bmi.w	1436c <_dtoa_r+0x5d4>
   13f18:	movs	r3, #0
   13f1a:	str	r3, [sp, #28]
   13f1c:	ldr	r3, [sp, #16]
   13f1e:	cmp	r3, #0
   13f20:	blt.w	1435a <_dtoa_r+0x5c2>
   13f24:	add	r8, r3
   13f26:	str	r3, [sp, #48]	; 0x30
   13f28:	movs	r3, #0
   13f2a:	str	r3, [sp, #24]
   13f2c:	ldr	r3, [sp, #0]
   13f2e:	cmp	r3, #9
   13f30:	bhi.n	13f88 <_dtoa_r+0x1f0>
   13f32:	cmp	r3, #5
   13f34:	ble.w	14bc0 <_dtoa_r+0xe28>
   13f38:	subs	r3, #4
   13f3a:	str	r3, [sp, #0]
   13f3c:	movs	r6, #0
   13f3e:	ldr	r3, [sp, #0]
   13f40:	subs	r3, #2
   13f42:	cmp	r3, #3
   13f44:	bhi.w	14b8e <_dtoa_r+0xdf6>
   13f48:	tbh	[pc, r3, lsl #1]
   13f4c:	.word	0x0224032b
   13f50:	.word	0x04500336
   13f54:	ldr	r3, [pc, #272]	; (14068 <_dtoa_r+0x2d0>)
   13f56:	ldr	r2, [pc, #284]	; (14074 <_dtoa_r+0x2dc>)
   13f58:	ubfx	r0, r4, #0, #20
   13f5c:	cmp	r0, #0
   13f5e:	ite	ne
   13f60:	movne	r0, r3
   13f62:	moveq	r0, r2
   13f64:	b.n	13e22 <_dtoa_r+0x8a>
   13f66:	ubfx	r3, fp, #0, #20
   13f6a:	orr.w	r1, r3, #1069547520	; 0x3fc00000
   13f6e:	subw	r4, r5, #1023	; 0x3ff
   13f72:	mov	r0, sl
   13f74:	str.w	r8, [sp, #60]	; 0x3c
   13f78:	orr.w	r1, r1, #3145728	; 0x300000
   13f7c:	ldr	r5, [sp, #96]	; 0x60
   13f7e:	b.n	13e8e <_dtoa_r+0xf6>
   13f80:	ldr	r0, [pc, #244]	; (14078 <_dtoa_r+0x2e0>)
   13f82:	b.n	13e0a <_dtoa_r+0x72>
   13f84:	adds	r3, r0, #3
   13f86:	b.n	13e34 <_dtoa_r+0x9c>
   13f88:	movs	r1, #0
   13f8a:	str.w	r1, [r9, #68]	; 0x44
   13f8e:	mov	r0, r9
   13f90:	mov	r4, r1
   13f92:	str	r1, [sp, #0]
   13f94:	bl	14e7c <_Balloc>
   13f98:	mov.w	r3, #4294967295
   13f9c:	str	r3, [sp, #32]
   13f9e:	str	r3, [sp, #56]	; 0x38
   13fa0:	movs	r3, #1
   13fa2:	str	r0, [sp, #36]	; 0x24
   13fa4:	str.w	r0, [r9, #64]	; 0x40
   13fa8:	str	r4, [sp, #20]
   13faa:	str	r3, [sp, #44]	; 0x2c
   13fac:	ldr	r3, [sp, #100]	; 0x64
   13fae:	cmp	r3, #0
   13fb0:	blt.w	14154 <_dtoa_r+0x3bc>
   13fb4:	ldr	r2, [sp, #16]
   13fb6:	cmp	r2, #14
   13fb8:	bgt.w	14154 <_dtoa_r+0x3bc>
   13fbc:	ldr	r3, [pc, #176]	; (14070 <_dtoa_r+0x2d8>)
   13fbe:	add.w	r3, r3, r2, lsl #3
   13fc2:	vldr	d7, [r3]
   13fc6:	ldr	r3, [sp, #20]
   13fc8:	cmp	r3, #0
   13fca:	vstr	d7, [sp]
   13fce:	blt.w	145ce <_dtoa_r+0x836>
   13fd2:	mov	r6, sl
   13fd4:	mov	r7, fp
   13fd6:	ldrd	sl, fp, [sp]
   13fda:	mov	r0, r6
   13fdc:	mov	r2, sl
   13fde:	mov	r3, fp
   13fe0:	mov	r1, r7
   13fe2:	bl	1092c <__aeabi_ddiv>
   13fe6:	bl	10c38 <__aeabi_d2iz>
   13fea:	mov	r4, r0
   13fec:	bl	1060c <__aeabi_i2d>
   13ff0:	mov	r2, sl
   13ff2:	mov	r3, fp
   13ff4:	bl	106d8 <__aeabi_dmul>
   13ff8:	mov	r3, r1
   13ffa:	mov	r2, r0
   13ffc:	mov	r1, r7
   13ffe:	mov	r0, r6
   14000:	bl	10370 <__aeabi_dsub>
   14004:	ldr	r5, [sp, #36]	; 0x24
   14006:	add.w	r3, r4, #48	; 0x30
   1400a:	strb	r3, [r5, #0]
   1400c:	ldr	r3, [sp, #32]
   1400e:	cmp	r3, #1
   14010:	mov	r6, r0
   14012:	mov	r7, r1
   14014:	add.w	r5, r5, #1
   14018:	beq.n	140de <_dtoa_r+0x346>
   1401a:	movs	r2, #0
   1401c:	ldr	r3, [pc, #92]	; (1407c <_dtoa_r+0x2e4>)
   1401e:	bl	106d8 <__aeabi_dmul>
   14022:	movs	r2, #0
   14024:	movs	r3, #0
   14026:	mov	r6, r0
   14028:	mov	r7, r1
   1402a:	bl	10ba8 <__aeabi_dcmpeq>
   1402e:	cmp	r0, #0
   14030:	bne.n	1412e <_dtoa_r+0x396>
   14032:	str.w	r9, [sp, #20]
   14036:	ldr.w	sl, [sp, #32]
   1403a:	ldr.w	fp, [sp, #36]	; 0x24
   1403e:	ldrd	r8, r9, [sp]
   14042:	b.n	14096 <_dtoa_r+0x2fe>
   14044:	nop.w
   14048:	.word	0x636f4361
   1404c:	.word	0x3fd287a7
   14050:	.word	0x8b60c8b3
   14054:	.word	0x3fc68a28
   14058:	.word	0x509f79fb
   1405c:	.word	0x3fd34413
   14060:	.word	0x7ff00000
   14064:	.word	0x00015ee5
   14068:	.word	0x00016008
   1406c:	.word	0x3ff80000
   14070:	.word	0x00016010
   14074:	.word	0x00015ffc
   14078:	.word	0x00015ee4
   1407c:	.word	0x40240000
   14080:	bl	106d8 <__aeabi_dmul>
   14084:	movs	r2, #0
   14086:	movs	r3, #0
   14088:	mov	r6, r0
   1408a:	mov	r7, r1
   1408c:	bl	10ba8 <__aeabi_dcmpeq>
   14090:	cmp	r0, #0
   14092:	bne.w	147f2 <_dtoa_r+0xa5a>
   14096:	mov	r2, r8
   14098:	mov	r3, r9
   1409a:	mov	r0, r6
   1409c:	mov	r1, r7
   1409e:	bl	1092c <__aeabi_ddiv>
   140a2:	bl	10c38 <__aeabi_d2iz>
   140a6:	mov	r4, r0
   140a8:	bl	1060c <__aeabi_i2d>
   140ac:	mov	r2, r8
   140ae:	mov	r3, r9
   140b0:	bl	106d8 <__aeabi_dmul>
   140b4:	mov	r2, r0
   140b6:	mov	r3, r1
   140b8:	mov	r0, r6
   140ba:	mov	r1, r7
   140bc:	bl	10370 <__aeabi_dsub>
   140c0:	add.w	lr, r4, #48	; 0x30
   140c4:	strb.w	lr, [r5], #1
   140c8:	rsb	lr, fp, r5
   140cc:	cmp	lr, sl
   140ce:	mov	r6, r0
   140d0:	mov	r7, r1
   140d2:	mov.w	r2, #0
   140d6:	ldr	r3, [pc, #696]	; (14390 <_dtoa_r+0x5f8>)
   140d8:	bne.n	14080 <_dtoa_r+0x2e8>
   140da:	ldr.w	r9, [sp, #20]
   140de:	mov	r2, r6
   140e0:	mov	r3, r7
   140e2:	mov	r0, r6
   140e4:	mov	r1, r7
   140e6:	bl	10374 <__adddf3>
   140ea:	mov	r6, r0
   140ec:	mov	r7, r1
   140ee:	mov	r2, r0
   140f0:	mov	r3, r1
   140f2:	ldrd	r0, r1, [sp]
   140f6:	bl	10bbc <__aeabi_dcmplt>
   140fa:	cbnz	r0, 1410e <_dtoa_r+0x376>
   140fc:	mov	r2, r6
   140fe:	mov	r3, r7
   14100:	ldrd	r0, r1, [sp]
   14104:	bl	10ba8 <__aeabi_dcmpeq>
   14108:	cbz	r0, 1412e <_dtoa_r+0x396>
   1410a:	lsls	r3, r4, #31
   1410c:	bpl.n	1412e <_dtoa_r+0x396>
   1410e:	ldrb.w	r4, [r5, #-1]
   14112:	ldr	r2, [sp, #36]	; 0x24
   14114:	subs	r3, r5, #1
   14116:	b.n	14122 <_dtoa_r+0x38a>
   14118:	cmp	r2, r3
   1411a:	beq.w	14916 <_dtoa_r+0xb7e>
   1411e:	ldrb.w	r4, [r3, #-1]!
   14122:	cmp	r4, #57	; 0x39
   14124:	add.w	r5, r3, #1
   14128:	beq.n	14118 <_dtoa_r+0x380>
   1412a:	adds	r4, #1
   1412c:	strb	r4, [r3, #0]
   1412e:	ldr	r1, [sp, #40]	; 0x28
   14130:	mov	r0, r9
   14132:	bl	14ec8 <_Bfree>
   14136:	movs	r2, #0
   14138:	ldr	r3, [sp, #16]
   1413a:	strb	r2, [r5, #0]
   1413c:	ldr	r2, [sp, #12]
   1413e:	adds	r3, #1
   14140:	str	r3, [r2, #0]
   14142:	ldr	r3, [sp, #148]	; 0x94
   14144:	cmp	r3, #0
   14146:	beq.w	14880 <_dtoa_r+0xae8>
   1414a:	ldr	r0, [sp, #36]	; 0x24
   1414c:	str	r5, [r3, #0]
   1414e:	add	sp, #108	; 0x6c
   14150:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14154:	ldr	r2, [sp, #44]	; 0x2c
   14156:	cmp	r2, #0
   14158:	beq.w	14378 <_dtoa_r+0x5e0>
   1415c:	ldr	r2, [sp, #0]
   1415e:	cmp	r2, #1
   14160:	ble.w	14612 <_dtoa_r+0x87a>
   14164:	ldr	r3, [sp, #32]
   14166:	ldr	r2, [sp, #24]
   14168:	subs	r7, r3, #1
   1416a:	cmp	r2, r7
   1416c:	blt.w	14886 <_dtoa_r+0xaee>
   14170:	subs	r7, r2, r7
   14172:	ldr	r3, [sp, #32]
   14174:	cmp	r3, #0
   14176:	blt.w	14a7a <_dtoa_r+0xce2>
   1417a:	ldr	r5, [sp, #28]
   1417c:	ldr	r3, [sp, #32]
   1417e:	ldr	r2, [sp, #28]
   14180:	movs	r1, #1
   14182:	add	r2, r3
   14184:	mov	r0, r9
   14186:	str	r2, [sp, #28]
   14188:	add	r8, r3
   1418a:	bl	14ff8 <__i2b>
   1418e:	mov	r6, r0
   14190:	cbz	r5, 141ac <_dtoa_r+0x414>
   14192:	cmp.w	r8, #0
   14196:	ble.n	141ac <_dtoa_r+0x414>
   14198:	cmp	r5, r8
   1419a:	ldr	r2, [sp, #28]
   1419c:	mov	r3, r5
   1419e:	it	ge
   141a0:	movge	r3, r8
   141a2:	subs	r2, r2, r3
   141a4:	str	r2, [sp, #28]
   141a6:	subs	r5, r5, r3
   141a8:	rsb	r8, r3, r8
   141ac:	ldr	r3, [sp, #24]
   141ae:	cmp	r3, #0
   141b0:	ble.w	1479e <_dtoa_r+0xa06>
   141b4:	ldr	r2, [sp, #44]	; 0x2c
   141b6:	cmp	r2, #0
   141b8:	beq.w	145c0 <_dtoa_r+0x828>
   141bc:	cmp	r7, #0
   141be:	beq.w	145c0 <_dtoa_r+0x828>
   141c2:	mov	r1, r6
   141c4:	mov	r2, r7
   141c6:	mov	r0, r9
   141c8:	bl	1513c <__pow5mult>
   141cc:	ldr	r2, [sp, #40]	; 0x28
   141ce:	mov	r1, r0
   141d0:	mov	r6, r0
   141d2:	mov	r0, r9
   141d4:	bl	1500c <__multiply>
   141d8:	ldr	r1, [sp, #40]	; 0x28
   141da:	mov	r4, r0
   141dc:	mov	r0, r9
   141de:	bl	14ec8 <_Bfree>
   141e2:	ldr	r3, [sp, #24]
   141e4:	subs	r3, r3, r7
   141e6:	str	r3, [sp, #24]
   141e8:	bne.w	145be <_dtoa_r+0x826>
   141ec:	movs	r1, #1
   141ee:	mov	r0, r9
   141f0:	bl	14ff8 <__i2b>
   141f4:	ldr	r3, [sp, #48]	; 0x30
   141f6:	str	r0, [sp, #24]
   141f8:	cmp	r3, #0
   141fa:	beq.w	14628 <_dtoa_r+0x890>
   141fe:	mov	r1, r0
   14200:	mov	r2, r3
   14202:	mov	r0, r9
   14204:	bl	1513c <__pow5mult>
   14208:	ldr	r3, [sp, #0]
   1420a:	str	r0, [sp, #24]
   1420c:	cmp	r3, #1
   1420e:	ble.w	147f8 <_dtoa_r+0xa60>
   14212:	movs	r7, #0
   14214:	ldr	r2, [sp, #24]
   14216:	ldr	r3, [r2, #16]
   14218:	add.w	r3, r2, r3, lsl #2
   1421c:	ldr	r0, [r3, #16]
   1421e:	bl	14f5c <__hi0bits>
   14222:	rsb	r0, r0, #32
   14226:	add	r0, r8
   14228:	ands.w	r0, r0, #31
   1422c:	beq.w	14624 <_dtoa_r+0x88c>
   14230:	rsb	r3, r0, #32
   14234:	cmp	r3, #4
   14236:	ble.w	14bb4 <_dtoa_r+0xe1c>
   1423a:	rsb	r0, r0, #28
   1423e:	ldr	r3, [sp, #28]
   14240:	add	r3, r0
   14242:	str	r3, [sp, #28]
   14244:	add	r5, r0
   14246:	add	r8, r0
   14248:	ldr	r3, [sp, #28]
   1424a:	cmp	r3, #0
   1424c:	ble.n	1425a <_dtoa_r+0x4c2>
   1424e:	mov	r1, r4
   14250:	mov	r2, r3
   14252:	mov	r0, r9
   14254:	bl	151dc <__lshift>
   14258:	mov	r4, r0
   1425a:	cmp.w	r8, #0
   1425e:	ble.n	1426c <_dtoa_r+0x4d4>
   14260:	mov	r2, r8
   14262:	ldr	r1, [sp, #24]
   14264:	mov	r0, r9
   14266:	bl	151dc <__lshift>
   1426a:	str	r0, [sp, #24]
   1426c:	ldr	r3, [sp, #52]	; 0x34
   1426e:	cmp	r3, #0
   14270:	bne.w	14768 <_dtoa_r+0x9d0>
   14274:	ldr	r3, [sp, #32]
   14276:	cmp	r3, #0
   14278:	ble.w	147a2 <_dtoa_r+0xa0a>
   1427c:	ldr	r3, [sp, #44]	; 0x2c
   1427e:	cmp	r3, #0
   14280:	bne.w	1466c <_dtoa_r+0x8d4>
   14284:	ldr.w	fp, [sp, #36]	; 0x24
   14288:	ldr	r7, [sp, #32]
   1428a:	ldr.w	r8, [sp, #24]
   1428e:	mov	r5, fp
   14290:	b.n	14298 <_dtoa_r+0x500>
   14292:	bl	14edc <__multadd>
   14296:	mov	r4, r0
   14298:	mov	r1, r8
   1429a:	mov	r0, r4
   1429c:	bl	13c6c <quorem>
   142a0:	add.w	sl, r0, #48	; 0x30
   142a4:	strb.w	sl, [r5], #1
   142a8:	rsb	r3, fp, r5
   142ac:	cmp	r3, r7
   142ae:	mov.w	r2, #10
   142b2:	mov.w	r3, #0
   142b6:	mov	r1, r4
   142b8:	mov	r0, r9
   142ba:	blt.n	14292 <_dtoa_r+0x4fa>
   142bc:	ldr	r3, [sp, #36]	; 0x24
   142be:	ldr	r2, [sp, #32]
   142c0:	cmp	r2, #1
   142c2:	ite	ge
   142c4:	addge	r3, r3, r2
   142c6:	addlt	r3, #1
   142c8:	mov	r5, r3
   142ca:	mov.w	fp, #0
   142ce:	mov	r1, r4
   142d0:	movs	r2, #1
   142d2:	mov	r0, r9
   142d4:	bl	151dc <__lshift>
   142d8:	ldr	r1, [sp, #24]
   142da:	str	r0, [sp, #40]	; 0x28
   142dc:	bl	1528c <__mcmp>
   142e0:	cmp	r0, #0
   142e2:	ble.w	148f0 <_dtoa_r+0xb58>
   142e6:	ldrb.w	r2, [r5, #-1]
   142ea:	ldr	r1, [sp, #36]	; 0x24
   142ec:	subs	r3, r5, #1
   142ee:	b.n	142fa <_dtoa_r+0x562>
   142f0:	cmp	r3, r1
   142f2:	beq.w	147de <_dtoa_r+0xa46>
   142f6:	ldrb.w	r2, [r3, #-1]!
   142fa:	cmp	r2, #57	; 0x39
   142fc:	add.w	r5, r3, #1
   14300:	beq.n	142f0 <_dtoa_r+0x558>
   14302:	adds	r2, #1
   14304:	strb	r2, [r3, #0]
   14306:	ldr	r1, [sp, #24]
   14308:	mov	r0, r9
   1430a:	bl	14ec8 <_Bfree>
   1430e:	cmp	r6, #0
   14310:	beq.w	1412e <_dtoa_r+0x396>
   14314:	cmp.w	fp, #0
   14318:	beq.n	14326 <_dtoa_r+0x58e>
   1431a:	cmp	fp, r6
   1431c:	beq.n	14326 <_dtoa_r+0x58e>
   1431e:	mov	r1, fp
   14320:	mov	r0, r9
   14322:	bl	14ec8 <_Bfree>
   14326:	mov	r1, r6
   14328:	mov	r0, r9
   1432a:	bl	14ec8 <_Bfree>
   1432e:	b.n	1412e <_dtoa_r+0x396>
   14330:	movs	r3, #1
   14332:	str	r3, [sp, #52]	; 0x34
   14334:	b.n	13f0e <_dtoa_r+0x176>
   14336:	ldr.w	r8, [sp, #16]
   1433a:	mov	r0, r8
   1433c:	bl	1060c <__aeabi_i2d>
   14340:	mov	r2, r0
   14342:	mov	r3, r1
   14344:	mov	r0, r6
   14346:	mov	r1, r7
   14348:	bl	10ba8 <__aeabi_dcmpeq>
   1434c:	cmp	r0, #0
   1434e:	bne.w	13ee6 <_dtoa_r+0x14e>
   14352:	add.w	r3, r8, #4294967295
   14356:	str	r3, [sp, #16]
   14358:	b.n	13ee6 <_dtoa_r+0x14e>
   1435a:	ldr	r2, [sp, #28]
   1435c:	ldr	r3, [sp, #16]
   1435e:	subs	r2, r2, r3
   14360:	negs	r3, r3
   14362:	str	r3, [sp, #24]
   14364:	movs	r3, #0
   14366:	str	r2, [sp, #28]
   14368:	str	r3, [sp, #48]	; 0x30
   1436a:	b.n	13f2c <_dtoa_r+0x194>
   1436c:	rsb	r3, r8, #0
   14370:	str	r3, [sp, #28]
   14372:	mov.w	r8, #0
   14376:	b.n	13f1c <_dtoa_r+0x184>
   14378:	ldr	r7, [sp, #24]
   1437a:	ldr	r5, [sp, #28]
   1437c:	ldr	r6, [sp, #44]	; 0x2c
   1437e:	b.n	14190 <_dtoa_r+0x3f8>
   14380:	rsb	r4, r3, #32
   14384:	lsl.w	r0, sl, r4
   14388:	b.n	13e80 <_dtoa_r+0xe8>
   1438a:	str	r0, [sp, #52]	; 0x34
   1438c:	b.n	13f0e <_dtoa_r+0x176>
   1438e:	nop
   14390:	.word	0x40240000
   14394:	movs	r3, #0
   14396:	str	r3, [sp, #44]	; 0x2c
   14398:	ldr	r3, [sp, #16]
   1439a:	ldr	r2, [sp, #20]
   1439c:	add	r3, r2
   1439e:	str	r3, [sp, #56]	; 0x38
   143a0:	adds	r3, #1
   143a2:	cmp	r3, #0
   143a4:	str	r3, [sp, #32]
   143a6:	ble.w	148a4 <_dtoa_r+0xb0c>
   143aa:	ldr	r4, [sp, #32]
   143ac:	mov	r5, r4
   143ae:	movs	r1, #0
   143b0:	cmp	r5, #23
   143b2:	str.w	r1, [r9, #68]	; 0x44
   143b6:	bls.n	143d0 <_dtoa_r+0x638>
   143b8:	movs	r2, #1
   143ba:	movs	r3, #4
   143bc:	lsls	r3, r3, #1
   143be:	add.w	r0, r3, #20
   143c2:	cmp	r0, r5
   143c4:	mov	r1, r2
   143c6:	add.w	r2, r2, #1
   143ca:	bls.n	143bc <_dtoa_r+0x624>
   143cc:	str.w	r1, [r9, #68]	; 0x44
   143d0:	mov	r0, r9
   143d2:	bl	14e7c <_Balloc>
   143d6:	cmp	r4, #14
   143d8:	str	r0, [sp, #36]	; 0x24
   143da:	str.w	r0, [r9, #64]	; 0x40
   143de:	bhi.w	13fac <_dtoa_r+0x214>
   143e2:	cmp	r6, #0
   143e4:	beq.w	13fac <_dtoa_r+0x214>
   143e8:	ldr	r1, [sp, #16]
   143ea:	cmp	r1, #0
   143ec:	strd	sl, fp, [sp, #64]	; 0x40
   143f0:	ble.w	14928 <_dtoa_r+0xb90>
   143f4:	ldr	r3, [pc, #576]	; (14638 <_dtoa_r+0x8a0>)
   143f6:	and.w	r2, r1, #15
   143fa:	asrs	r6, r1, #4
   143fc:	add.w	r3, r3, r2, lsl #3
   14400:	lsls	r0, r6, #27
   14402:	ldrd	r4, r5, [r3]
   14406:	bpl.w	14896 <_dtoa_r+0xafe>
   1440a:	ldr	r3, [pc, #560]	; (1463c <_dtoa_r+0x8a4>)
   1440c:	mov	r0, sl
   1440e:	mov	r1, fp
   14410:	ldrd	r2, r3, [r3, #32]
   14414:	bl	1092c <__aeabi_ddiv>
   14418:	strd	r0, r1, [sp, #72]	; 0x48
   1441c:	and.w	r6, r6, #15
   14420:	mov.w	sl, #3
   14424:	cbz	r6, 14448 <_dtoa_r+0x6b0>
   14426:	ldr	r7, [pc, #532]	; (1463c <_dtoa_r+0x8a4>)
   14428:	lsls	r1, r6, #31
   1442a:	bpl.n	14440 <_dtoa_r+0x6a8>
   1442c:	mov	r0, r4
   1442e:	mov	r1, r5
   14430:	ldrd	r2, r3, [r7]
   14434:	bl	106d8 <__aeabi_dmul>
   14438:	add.w	sl, sl, #1
   1443c:	mov	r4, r0
   1443e:	mov	r5, r1
   14440:	asrs	r6, r6, #1
   14442:	add.w	r7, r7, #8
   14446:	bne.n	14428 <_dtoa_r+0x690>
   14448:	mov	r2, r4
   1444a:	mov	r3, r5
   1444c:	ldrd	r0, r1, [sp, #72]	; 0x48
   14450:	bl	1092c <__aeabi_ddiv>
   14454:	mov	r6, r0
   14456:	mov	r7, r1
   14458:	ldr	r3, [sp, #52]	; 0x34
   1445a:	cbz	r3, 1446e <_dtoa_r+0x6d6>
   1445c:	movs	r2, #0
   1445e:	ldr	r3, [pc, #480]	; (14640 <_dtoa_r+0x8a8>)
   14460:	mov	r0, r6
   14462:	mov	r1, r7
   14464:	bl	10bbc <__aeabi_dcmplt>
   14468:	cmp	r0, #0
   1446a:	bne.w	14aa2 <_dtoa_r+0xd0a>
   1446e:	mov	r0, sl
   14470:	bl	1060c <__aeabi_i2d>
   14474:	mov	r2, r6
   14476:	mov	r3, r7
   14478:	bl	106d8 <__aeabi_dmul>
   1447c:	ldr	r3, [pc, #452]	; (14644 <_dtoa_r+0x8ac>)
   1447e:	movs	r2, #0
   14480:	bl	10374 <__adddf3>
   14484:	ldr	r3, [sp, #32]
   14486:	mov	r4, r0
   14488:	sub.w	r5, r1, #54525952	; 0x3400000
   1448c:	cmp	r3, #0
   1448e:	beq.w	14848 <_dtoa_r+0xab0>
   14492:	ldr	r3, [sp, #16]
   14494:	str	r3, [sp, #88]	; 0x58
   14496:	ldr	r3, [sp, #32]
   14498:	str	r3, [sp, #72]	; 0x48
   1449a:	ldr	r3, [sp, #44]	; 0x2c
   1449c:	cmp	r3, #0
   1449e:	beq.w	149ca <_dtoa_r+0xc32>
   144a2:	ldr	r2, [sp, #72]	; 0x48
   144a4:	ldr	r3, [pc, #400]	; (14638 <_dtoa_r+0x8a0>)
   144a6:	ldr	r1, [pc, #416]	; (14648 <_dtoa_r+0x8b0>)
   144a8:	add.w	r3, r3, r2, lsl #3
   144ac:	ldrd	r2, r3, [r3, #-8]
   144b0:	movs	r0, #0
   144b2:	bl	1092c <__aeabi_ddiv>
   144b6:	mov	r2, r4
   144b8:	mov	r3, r5
   144ba:	bl	10370 <__aeabi_dsub>
   144be:	mov	sl, r0
   144c0:	mov	fp, r1
   144c2:	mov	r0, r6
   144c4:	mov	r1, r7
   144c6:	bl	10c38 <__aeabi_d2iz>
   144ca:	mov	r4, r0
   144cc:	bl	1060c <__aeabi_i2d>
   144d0:	mov	r2, r0
   144d2:	mov	r3, r1
   144d4:	mov	r0, r6
   144d6:	mov	r1, r7
   144d8:	bl	10370 <__aeabi_dsub>
   144dc:	adds	r4, #48	; 0x30
   144de:	ldr	r5, [sp, #36]	; 0x24
   144e0:	uxtb	r4, r4
   144e2:	mov	r6, r0
   144e4:	mov	r7, r1
   144e6:	strb	r4, [r5, #0]
   144e8:	mov	r2, r0
   144ea:	mov	r3, r1
   144ec:	mov	r0, sl
   144ee:	mov	r1, fp
   144f0:	adds	r5, #1
   144f2:	bl	10bf8 <__aeabi_dcmpgt>
   144f6:	cmp	r0, #0
   144f8:	bne.n	1459c <_dtoa_r+0x804>
   144fa:	mov	r2, r6
   144fc:	mov	r3, r7
   144fe:	movs	r0, #0
   14500:	ldr	r1, [pc, #316]	; (14640 <_dtoa_r+0x8a8>)
   14502:	bl	10370 <__aeabi_dsub>
   14506:	mov	r2, r0
   14508:	mov	r3, r1
   1450a:	mov	r0, sl
   1450c:	mov	r1, fp
   1450e:	bl	10bf8 <__aeabi_dcmpgt>
   14512:	cmp	r0, #0
   14514:	bne.w	14b28 <_dtoa_r+0xd90>
   14518:	ldr	r2, [sp, #72]	; 0x48
   1451a:	cmp	r2, #1
   1451c:	ble.w	1490e <_dtoa_r+0xb76>
   14520:	ldr	r3, [sp, #72]	; 0x48
   14522:	ldr	r2, [sp, #36]	; 0x24
   14524:	str.w	r8, [sp, #72]	; 0x48
   14528:	add	r3, r2
   1452a:	mov	r8, r3
   1452c:	b.n	1454a <_dtoa_r+0x7b2>
   1452e:	movs	r0, #0
   14530:	ldr	r1, [pc, #268]	; (14640 <_dtoa_r+0x8a8>)
   14532:	bl	10370 <__aeabi_dsub>
   14536:	mov	r2, sl
   14538:	mov	r3, fp
   1453a:	bl	10bbc <__aeabi_dcmplt>
   1453e:	cmp	r0, #0
   14540:	bne.w	14b28 <_dtoa_r+0xd90>
   14544:	cmp	r5, r8
   14546:	beq.w	1490a <_dtoa_r+0xb72>
   1454a:	mov	r0, sl
   1454c:	mov	r1, fp
   1454e:	movs	r2, #0
   14550:	ldr	r3, [pc, #248]	; (1464c <_dtoa_r+0x8b4>)
   14552:	bl	106d8 <__aeabi_dmul>
   14556:	movs	r2, #0
   14558:	ldr	r3, [pc, #240]	; (1464c <_dtoa_r+0x8b4>)
   1455a:	mov	sl, r0
   1455c:	mov	fp, r1
   1455e:	mov	r0, r6
   14560:	mov	r1, r7
   14562:	bl	106d8 <__aeabi_dmul>
   14566:	mov	r7, r1
   14568:	mov	r6, r0
   1456a:	bl	10c38 <__aeabi_d2iz>
   1456e:	mov	r4, r0
   14570:	bl	1060c <__aeabi_i2d>
   14574:	mov	r2, r0
   14576:	mov	r3, r1
   14578:	mov	r0, r6
   1457a:	mov	r1, r7
   1457c:	bl	10370 <__aeabi_dsub>
   14580:	adds	r4, #48	; 0x30
   14582:	uxtb	r4, r4
   14584:	mov	r2, sl
   14586:	mov	r3, fp
   14588:	strb.w	r4, [r5], #1
   1458c:	mov	r6, r0
   1458e:	mov	r7, r1
   14590:	bl	10bbc <__aeabi_dcmplt>
   14594:	mov	r2, r6
   14596:	mov	r3, r7
   14598:	cmp	r0, #0
   1459a:	beq.n	1452e <_dtoa_r+0x796>
   1459c:	ldr	r3, [sp, #88]	; 0x58
   1459e:	str	r3, [sp, #16]
   145a0:	b.n	1412e <_dtoa_r+0x396>
   145a2:	movs	r3, #0
   145a4:	str	r3, [sp, #44]	; 0x2c
   145a6:	ldr	r3, [sp, #20]
   145a8:	cmp	r3, #0
   145aa:	ble.w	148ae <_dtoa_r+0xb16>
   145ae:	mov	r5, r3
   145b0:	mov	r4, r3
   145b2:	str	r3, [sp, #56]	; 0x38
   145b4:	str	r3, [sp, #32]
   145b6:	b.n	143ae <_dtoa_r+0x616>
   145b8:	movs	r3, #1
   145ba:	str	r3, [sp, #44]	; 0x2c
   145bc:	b.n	145a6 <_dtoa_r+0x80e>
   145be:	str	r4, [sp, #40]	; 0x28
   145c0:	ldr	r2, [sp, #24]
   145c2:	ldr	r1, [sp, #40]	; 0x28
   145c4:	mov	r0, r9
   145c6:	bl	1513c <__pow5mult>
   145ca:	mov	r4, r0
   145cc:	b.n	141ec <_dtoa_r+0x454>
   145ce:	ldr	r3, [sp, #32]
   145d0:	cmp	r3, #0
   145d2:	bgt.w	13fd2 <_dtoa_r+0x23a>
   145d6:	bne.w	14878 <_dtoa_r+0xae0>
   145da:	movs	r2, #0
   145dc:	ldr	r3, [pc, #112]	; (14650 <_dtoa_r+0x8b8>)
   145de:	ldrd	r0, r1, [sp]
   145e2:	bl	106d8 <__aeabi_dmul>
   145e6:	mov	r3, fp
   145e8:	mov	r2, sl
   145ea:	bl	10be4 <__aeabi_dcmpge>
   145ee:	ldr	r3, [sp, #32]
   145f0:	str	r3, [sp, #24]
   145f2:	mov	r6, r3
   145f4:	cmp	r0, #0
   145f6:	beq.w	147ce <_dtoa_r+0xa36>
   145fa:	ldr	r3, [sp, #20]
   145fc:	ldr	r5, [sp, #36]	; 0x24
   145fe:	mvns	r3, r3
   14600:	str	r3, [sp, #16]
   14602:	ldr	r1, [sp, #24]
   14604:	mov	r0, r9
   14606:	bl	14ec8 <_Bfree>
   1460a:	cmp	r6, #0
   1460c:	beq.w	1412e <_dtoa_r+0x396>
   14610:	b.n	14326 <_dtoa_r+0x58e>
   14612:	ldr	r2, [sp, #60]	; 0x3c
   14614:	cmp	r2, #0
   14616:	beq.w	14a8a <_dtoa_r+0xcf2>
   1461a:	addw	r3, r3, #1075	; 0x433
   1461e:	ldr	r7, [sp, #24]
   14620:	ldr	r5, [sp, #28]
   14622:	b.n	1417e <_dtoa_r+0x3e6>
   14624:	movs	r0, #28
   14626:	b.n	1423e <_dtoa_r+0x4a6>
   14628:	ldr	r3, [sp, #0]
   1462a:	cmp	r3, #1
   1462c:	ble.w	14b30 <_dtoa_r+0xd98>
   14630:	ldr	r7, [sp, #48]	; 0x30
   14632:	movs	r0, #1
   14634:	b.n	14226 <_dtoa_r+0x48e>
   14636:	nop
   14638:	.word	0x00016010
   1463c:	.word	0x000160d8
   14640:	.word	0x3ff00000
   14644:	.word	0x401c0000
   14648:	.word	0x3fe00000
   1464c:	.word	0x40240000
   14650:	.word	0x40140000
   14654:	mov	r1, r6
   14656:	movs	r3, #0
   14658:	movs	r2, #10
   1465a:	mov	r0, r9
   1465c:	bl	14edc <__multadd>
   14660:	ldr	r3, [sp, #56]	; 0x38
   14662:	cmp	r3, #0
   14664:	mov	r6, r0
   14666:	ble.w	14b84 <_dtoa_r+0xdec>
   1466a:	str	r3, [sp, #32]
   1466c:	cmp	r5, #0
   1466e:	ble.n	1467c <_dtoa_r+0x8e4>
   14670:	mov	r1, r6
   14672:	mov	r2, r5
   14674:	mov	r0, r9
   14676:	bl	151dc <__lshift>
   1467a:	mov	r6, r0
   1467c:	cmp	r7, #0
   1467e:	bne.w	1497a <_dtoa_r+0xbe2>
   14682:	mov	r8, r6
   14684:	ldr	r3, [sp, #32]
   14686:	ldr	r2, [sp, #36]	; 0x24
   14688:	subs	r3, #1
   1468a:	adds	r3, r2, r3
   1468c:	str	r3, [sp, #32]
   1468e:	and.w	r3, sl, #1
   14692:	str	r3, [sp, #40]	; 0x28
   14694:	mov	r7, r2
   14696:	ldr.w	fp, [sp, #24]
   1469a:	mov	r0, r4
   1469c:	mov	r1, fp
   1469e:	bl	13c6c <quorem>
   146a2:	mov	r1, r6
   146a4:	mov	r5, r0
   146a6:	mov	r0, r4
   146a8:	bl	1528c <__mcmp>
   146ac:	mov	r2, r8
   146ae:	mov	r1, fp
   146b0:	mov	sl, r0
   146b2:	mov	r0, r9
   146b4:	bl	152d0 <__mdiff>
   146b8:	ldr	r2, [r0, #12]
   146ba:	mov	fp, r0
   146bc:	add.w	r3, r5, #48	; 0x30
   146c0:	cmp	r2, #0
   146c2:	bne.n	14758 <_dtoa_r+0x9c0>
   146c4:	mov	r1, r0
   146c6:	mov	r0, r4
   146c8:	str	r3, [sp, #28]
   146ca:	bl	1528c <__mcmp>
   146ce:	mov	r1, fp
   146d0:	str	r0, [sp, #20]
   146d2:	mov	r0, r9
   146d4:	bl	14ec8 <_Bfree>
   146d8:	ldr	r2, [sp, #20]
   146da:	ldr	r3, [sp, #28]
   146dc:	cbnz	r2, 146ea <_dtoa_r+0x952>
   146de:	ldr	r1, [sp, #0]
   146e0:	cbnz	r1, 146ea <_dtoa_r+0x952>
   146e2:	ldr	r1, [sp, #40]	; 0x28
   146e4:	cmp	r1, #0
   146e6:	beq.w	14b54 <_dtoa_r+0xdbc>
   146ea:	cmp.w	sl, #0
   146ee:	blt.w	148b8 <_dtoa_r+0xb20>
   146f2:	bne.n	14700 <_dtoa_r+0x968>
   146f4:	ldr	r1, [sp, #0]
   146f6:	cbnz	r1, 14700 <_dtoa_r+0x968>
   146f8:	ldr	r1, [sp, #40]	; 0x28
   146fa:	cmp	r1, #0
   146fc:	beq.w	148b8 <_dtoa_r+0xb20>
   14700:	cmp	r2, #0
   14702:	bgt.w	149a2 <_dtoa_r+0xc0a>
   14706:	ldr	r2, [sp, #32]
   14708:	strb	r3, [r7, #0]
   1470a:	add.w	sl, r7, #1
   1470e:	cmp	r7, r2
   14710:	mov	r5, sl
   14712:	beq.w	149ba <_dtoa_r+0xc22>
   14716:	mov	r1, r4
   14718:	movs	r3, #0
   1471a:	movs	r2, #10
   1471c:	mov	r0, r9
   1471e:	bl	14edc <__multadd>
   14722:	cmp	r6, r8
   14724:	mov	r4, r0
   14726:	mov	r1, r6
   14728:	mov.w	r3, #0
   1472c:	mov.w	r2, #10
   14730:	mov	r0, r9
   14732:	beq.n	1474c <_dtoa_r+0x9b4>
   14734:	bl	14edc <__multadd>
   14738:	mov	r1, r8
   1473a:	mov	r6, r0
   1473c:	movs	r3, #0
   1473e:	movs	r2, #10
   14740:	mov	r0, r9
   14742:	bl	14edc <__multadd>
   14746:	mov	r7, sl
   14748:	mov	r8, r0
   1474a:	b.n	14696 <_dtoa_r+0x8fe>
   1474c:	bl	14edc <__multadd>
   14750:	mov	r7, sl
   14752:	mov	r6, r0
   14754:	mov	r8, r0
   14756:	b.n	14696 <_dtoa_r+0x8fe>
   14758:	mov	r1, r0
   1475a:	mov	r0, r9
   1475c:	str	r3, [sp, #20]
   1475e:	bl	14ec8 <_Bfree>
   14762:	movs	r2, #1
   14764:	ldr	r3, [sp, #20]
   14766:	b.n	146ea <_dtoa_r+0x952>
   14768:	ldr	r1, [sp, #24]
   1476a:	mov	r0, r4
   1476c:	bl	1528c <__mcmp>
   14770:	cmp	r0, #0
   14772:	bge.w	14274 <_dtoa_r+0x4dc>
   14776:	mov	r1, r4
   14778:	ldr	r4, [sp, #16]
   1477a:	movs	r3, #0
   1477c:	subs	r4, #1
   1477e:	movs	r2, #10
   14780:	mov	r0, r9
   14782:	str	r4, [sp, #16]
   14784:	bl	14edc <__multadd>
   14788:	ldr	r3, [sp, #44]	; 0x2c
   1478a:	mov	r4, r0
   1478c:	cmp	r3, #0
   1478e:	bne.w	14654 <_dtoa_r+0x8bc>
   14792:	ldr	r3, [sp, #56]	; 0x38
   14794:	cmp	r3, #0
   14796:	ble.w	14b74 <_dtoa_r+0xddc>
   1479a:	str	r3, [sp, #32]
   1479c:	b.n	14284 <_dtoa_r+0x4ec>
   1479e:	ldr	r4, [sp, #40]	; 0x28
   147a0:	b.n	141ec <_dtoa_r+0x454>
   147a2:	ldr	r3, [sp, #0]
   147a4:	cmp	r3, #2
   147a6:	ble.w	1427c <_dtoa_r+0x4e4>
   147aa:	ldr	r3, [sp, #32]
   147ac:	cmp	r3, #0
   147ae:	bne.w	14aec <_dtoa_r+0xd54>
   147b2:	ldr	r1, [sp, #24]
   147b4:	movs	r2, #5
   147b6:	mov	r0, r9
   147b8:	bl	14edc <__multadd>
   147bc:	mov	r1, r0
   147be:	str	r0, [sp, #24]
   147c0:	mov	r0, r4
   147c2:	bl	1528c <__mcmp>
   147c6:	cmp	r0, #0
   147c8:	str	r4, [sp, #40]	; 0x28
   147ca:	ble.w	145fa <_dtoa_r+0x862>
   147ce:	ldr	r2, [sp, #16]
   147d0:	ldr	r1, [sp, #36]	; 0x24
   147d2:	movs	r3, #49	; 0x31
   147d4:	adds	r2, #1
   147d6:	str	r2, [sp, #16]
   147d8:	strb	r3, [r1, #0]
   147da:	adds	r5, r1, #1
   147dc:	b.n	14602 <_dtoa_r+0x86a>
   147de:	ldr	r2, [sp, #16]
   147e0:	adds	r2, #1
   147e2:	str	r2, [sp, #16]
   147e4:	ldr	r2, [sp, #36]	; 0x24
   147e6:	movs	r3, #49	; 0x31
   147e8:	strb	r3, [r2, #0]
   147ea:	b.n	14306 <_dtoa_r+0x56e>
   147ec:	movs	r3, #1
   147ee:	str	r3, [sp, #44]	; 0x2c
   147f0:	b.n	14398 <_dtoa_r+0x600>
   147f2:	ldr.w	r9, [sp, #20]
   147f6:	b.n	1412e <_dtoa_r+0x396>
   147f8:	cmp.w	sl, #0
   147fc:	bne.w	14212 <_dtoa_r+0x47a>
   14800:	ubfx	r3, fp, #0, #20
   14804:	cmp	r3, #0
   14806:	bne.w	14a86 <_dtoa_r+0xcee>
   1480a:	bic.w	r7, fp, #2147483648	; 0x80000000
   1480e:	lsrs	r7, r7, #20
   14810:	lsls	r7, r7, #20
   14812:	cbz	r7, 14820 <_dtoa_r+0xa88>
   14814:	ldr	r3, [sp, #28]
   14816:	adds	r3, #1
   14818:	str	r3, [sp, #28]
   1481a:	add.w	r8, r8, #1
   1481e:	movs	r7, #1
   14820:	ldr	r3, [sp, #48]	; 0x30
   14822:	movs	r0, #1
   14824:	cmp	r3, #0
   14826:	beq.w	14226 <_dtoa_r+0x48e>
   1482a:	b.n	14214 <_dtoa_r+0x47c>
   1482c:	mov	r0, sl
   1482e:	bl	1060c <__aeabi_i2d>
   14832:	mov	r2, r6
   14834:	mov	r3, r7
   14836:	bl	106d8 <__aeabi_dmul>
   1483a:	movs	r2, #0
   1483c:	ldr	r3, [pc, #764]	; (14b3c <_dtoa_r+0xda4>)
   1483e:	bl	10374 <__adddf3>
   14842:	mov	r4, r0
   14844:	sub.w	r5, r1, #54525952	; 0x3400000
   14848:	mov	r0, r6
   1484a:	mov	r1, r7
   1484c:	movs	r2, #0
   1484e:	ldr	r3, [pc, #752]	; (14b40 <_dtoa_r+0xda8>)
   14850:	bl	10370 <__aeabi_dsub>
   14854:	mov	r2, r4
   14856:	mov	r3, r5
   14858:	mov	r6, r0
   1485a:	mov	r7, r1
   1485c:	bl	10bf8 <__aeabi_dcmpgt>
   14860:	cmp	r0, #0
   14862:	bne.w	149c2 <_dtoa_r+0xc2a>
   14866:	mov	r2, r4
   14868:	add.w	r3, r5, #2147483648	; 0x80000000
   1486c:	mov	r0, r6
   1486e:	mov	r1, r7
   14870:	bl	10bbc <__aeabi_dcmplt>
   14874:	cmp	r0, #0
   14876:	beq.n	1490e <_dtoa_r+0xb76>
   14878:	movs	r3, #0
   1487a:	str	r3, [sp, #24]
   1487c:	mov	r6, r3
   1487e:	b.n	145fa <_dtoa_r+0x862>
   14880:	ldr	r0, [sp, #36]	; 0x24
   14882:	b.w	13e0a <_dtoa_r+0x72>
   14886:	ldr	r3, [sp, #24]
   14888:	ldr	r2, [sp, #48]	; 0x30
   1488a:	str	r7, [sp, #24]
   1488c:	subs	r3, r7, r3
   1488e:	add	r2, r3
   14890:	str	r2, [sp, #48]	; 0x30
   14892:	movs	r7, #0
   14894:	b.n	14172 <_dtoa_r+0x3da>
   14896:	vldr	d7, [sp, #64]	; 0x40
   1489a:	mov.w	sl, #2
   1489e:	vstr	d7, [sp, #72]	; 0x48
   148a2:	b.n	14424 <_dtoa_r+0x68c>
   148a4:	mov	r4, r3
   148a6:	movs	r1, #0
   148a8:	str.w	r1, [r9, #68]	; 0x44
   148ac:	b.n	143d0 <_dtoa_r+0x638>
   148ae:	movs	r4, #1
   148b0:	str	r4, [sp, #56]	; 0x38
   148b2:	str	r4, [sp, #32]
   148b4:	str	r4, [sp, #20]
   148b6:	b.n	148a6 <_dtoa_r+0xb0e>
   148b8:	cmp	r2, #0
   148ba:	mov	sl, r3
   148bc:	ble.n	148e2 <_dtoa_r+0xb4a>
   148be:	mov	r1, r4
   148c0:	movs	r2, #1
   148c2:	mov	r0, r9
   148c4:	bl	151dc <__lshift>
   148c8:	ldr	r1, [sp, #24]
   148ca:	mov	r4, r0
   148cc:	bl	1528c <__mcmp>
   148d0:	cmp	r0, #0
   148d2:	ble.w	14b66 <_dtoa_r+0xdce>
   148d6:	cmp.w	sl, #57	; 0x39
   148da:	beq.w	14af0 <_dtoa_r+0xd58>
   148de:	add.w	sl, r5, #49	; 0x31
   148e2:	mov	fp, r6
   148e4:	strb.w	sl, [r7]
   148e8:	adds	r5, r7, #1
   148ea:	mov	r6, r8
   148ec:	str	r4, [sp, #40]	; 0x28
   148ee:	b.n	14306 <_dtoa_r+0x56e>
   148f0:	bne.n	148fc <_dtoa_r+0xb64>
   148f2:	tst.w	sl, #1
   148f6:	beq.n	148fc <_dtoa_r+0xb64>
   148f8:	b.n	142e6 <_dtoa_r+0x54e>
   148fa:	mov	r5, r2
   148fc:	ldrb.w	r3, [r5, #-1]
   14900:	cmp	r3, #48	; 0x30
   14902:	add.w	r2, r5, #4294967295
   14906:	beq.n	148fa <_dtoa_r+0xb62>
   14908:	b.n	14306 <_dtoa_r+0x56e>
   1490a:	ldr.w	r8, [sp, #72]	; 0x48
   1490e:	ldrd	sl, fp, [sp, #64]	; 0x40
   14912:	b.w	13fac <_dtoa_r+0x214>
   14916:	ldr	r1, [sp, #36]	; 0x24
   14918:	movs	r2, #48	; 0x30
   1491a:	strb	r2, [r1, #0]
   1491c:	ldr	r2, [sp, #16]
   1491e:	ldrb.w	r4, [r5, #-1]
   14922:	adds	r2, #1
   14924:	str	r2, [sp, #16]
   14926:	b.n	1412a <_dtoa_r+0x392>
   14928:	ldr	r3, [sp, #16]
   1492a:	negs	r4, r3
   1492c:	cmp	r4, #0
   1492e:	beq.w	14a98 <_dtoa_r+0xd00>
   14932:	ldr	r3, [pc, #528]	; (14b44 <_dtoa_r+0xdac>)
   14934:	and.w	r2, r4, #15
   14938:	add.w	r3, r3, r2, lsl #3
   1493c:	ldrd	r2, r3, [r3]
   14940:	ldrd	r0, r1, [sp, #64]	; 0x40
   14944:	bl	106d8 <__aeabi_dmul>
   14948:	asrs	r4, r4, #4
   1494a:	mov	r6, r0
   1494c:	mov	r7, r1
   1494e:	beq.w	14b7e <_dtoa_r+0xde6>
   14952:	ldr	r5, [pc, #500]	; (14b48 <_dtoa_r+0xdb0>)
   14954:	mov.w	sl, #2
   14958:	lsls	r2, r4, #31
   1495a:	bpl.n	14970 <_dtoa_r+0xbd8>
   1495c:	mov	r0, r6
   1495e:	mov	r1, r7
   14960:	ldrd	r2, r3, [r5]
   14964:	bl	106d8 <__aeabi_dmul>
   14968:	add.w	sl, sl, #1
   1496c:	mov	r6, r0
   1496e:	mov	r7, r1
   14970:	asrs	r4, r4, #1
   14972:	add.w	r5, r5, #8
   14976:	bne.n	14958 <_dtoa_r+0xbc0>
   14978:	b.n	14458 <_dtoa_r+0x6c0>
   1497a:	ldr	r1, [r6, #4]
   1497c:	mov	r0, r9
   1497e:	bl	14e7c <_Balloc>
   14982:	ldr	r3, [r6, #16]
   14984:	adds	r2, r3, #2
   14986:	mov	r5, r0
   14988:	lsls	r2, r2, #2
   1498a:	add.w	r1, r6, #12
   1498e:	adds	r0, #12
   14990:	bl	e8e8 <memcpy>
   14994:	mov	r1, r5
   14996:	movs	r2, #1
   14998:	mov	r0, r9
   1499a:	bl	151dc <__lshift>
   1499e:	mov	r8, r0
   149a0:	b.n	14684 <_dtoa_r+0x8ec>
   149a2:	cmp	r3, #57	; 0x39
   149a4:	beq.w	14af0 <_dtoa_r+0xd58>
   149a8:	add.w	sl, r3, #1
   149ac:	mov	fp, r6
   149ae:	strb.w	sl, [r7]
   149b2:	adds	r5, r7, #1
   149b4:	mov	r6, r8
   149b6:	str	r4, [sp, #40]	; 0x28
   149b8:	b.n	14306 <_dtoa_r+0x56e>
   149ba:	mov	fp, r6
   149bc:	mov	sl, r3
   149be:	mov	r6, r8
   149c0:	b.n	142ce <_dtoa_r+0x536>
   149c2:	movs	r3, #0
   149c4:	str	r3, [sp, #24]
   149c6:	mov	r6, r3
   149c8:	b.n	147ce <_dtoa_r+0xa36>
   149ca:	ldr	r3, [sp, #72]	; 0x48
   149cc:	ldr	r1, [pc, #372]	; (14b44 <_dtoa_r+0xdac>)
   149ce:	subs	r2, r3, #1
   149d0:	add.w	r1, r1, r2, lsl #3
   149d4:	mov	r3, r5
   149d6:	str	r2, [sp, #92]	; 0x5c
   149d8:	ldrd	r0, r1, [r1]
   149dc:	mov	r2, r4
   149de:	bl	106d8 <__aeabi_dmul>
   149e2:	strd	r0, r1, [sp, #80]	; 0x50
   149e6:	mov	r1, r7
   149e8:	mov	r0, r6
   149ea:	bl	10c38 <__aeabi_d2iz>
   149ee:	mov	r4, r0
   149f0:	bl	1060c <__aeabi_i2d>
   149f4:	mov	r3, r1
   149f6:	mov	r2, r0
   149f8:	mov	r1, r7
   149fa:	mov	r0, r6
   149fc:	bl	10370 <__aeabi_dsub>
   14a00:	ldr	r3, [sp, #72]	; 0x48
   14a02:	mov	r7, r1
   14a04:	ldr	r1, [sp, #36]	; 0x24
   14a06:	adds	r4, #48	; 0x30
   14a08:	cmp	r3, #1
   14a0a:	mov	r6, r0
   14a0c:	strb	r4, [r1, #0]
   14a0e:	add.w	r5, r1, #1
   14a12:	beq.n	14a56 <_dtoa_r+0xcbe>
   14a14:	ldr	r3, [sp, #72]	; 0x48
   14a16:	ldr	r2, [sp, #36]	; 0x24
   14a18:	add	r3, r2
   14a1a:	mov	sl, r3
   14a1c:	mov	fp, r5
   14a1e:	movs	r2, #0
   14a20:	ldr	r3, [pc, #296]	; (14b4c <_dtoa_r+0xdb4>)
   14a22:	mov	r0, r6
   14a24:	mov	r1, r7
   14a26:	bl	106d8 <__aeabi_dmul>
   14a2a:	mov	r7, r1
   14a2c:	mov	r6, r0
   14a2e:	bl	10c38 <__aeabi_d2iz>
   14a32:	mov	r4, r0
   14a34:	bl	1060c <__aeabi_i2d>
   14a38:	adds	r4, #48	; 0x30
   14a3a:	mov	r2, r0
   14a3c:	mov	r3, r1
   14a3e:	mov	r0, r6
   14a40:	mov	r1, r7
   14a42:	bl	10370 <__aeabi_dsub>
   14a46:	strb.w	r4, [fp], #1
   14a4a:	cmp	sl, fp
   14a4c:	mov	r6, r0
   14a4e:	mov	r7, r1
   14a50:	bne.n	14a1e <_dtoa_r+0xc86>
   14a52:	ldr	r3, [sp, #92]	; 0x5c
   14a54:	add	r5, r3
   14a56:	movs	r2, #0
   14a58:	ldr	r3, [pc, #244]	; (14b50 <_dtoa_r+0xdb8>)
   14a5a:	ldrd	r0, r1, [sp, #80]	; 0x50
   14a5e:	bl	10374 <__adddf3>
   14a62:	mov	r2, r6
   14a64:	mov	r3, r7
   14a66:	bl	10bbc <__aeabi_dcmplt>
   14a6a:	cmp	r0, #0
   14a6c:	beq.n	14b00 <_dtoa_r+0xd68>
   14a6e:	ldr	r3, [sp, #88]	; 0x58
   14a70:	str	r3, [sp, #16]
   14a72:	ldrb.w	r4, [r5, #-1]
   14a76:	b.w	14112 <_dtoa_r+0x37a>
   14a7a:	ldr	r3, [sp, #28]
   14a7c:	ldr	r2, [sp, #32]
   14a7e:	subs	r5, r3, r2
   14a80:	movs	r3, #0
   14a82:	b.w	1417e <_dtoa_r+0x3e6>
   14a86:	movs	r7, #0
   14a88:	b.n	14820 <_dtoa_r+0xa88>
   14a8a:	ldr	r3, [sp, #96]	; 0x60
   14a8c:	ldr	r7, [sp, #24]
   14a8e:	ldr	r5, [sp, #28]
   14a90:	rsb	r3, r3, #54	; 0x36
   14a94:	b.w	1417e <_dtoa_r+0x3e6>
   14a98:	ldrd	r6, r7, [sp, #64]	; 0x40
   14a9c:	mov.w	sl, #2
   14aa0:	b.n	14458 <_dtoa_r+0x6c0>
   14aa2:	ldr	r3, [sp, #32]
   14aa4:	cmp	r3, #0
   14aa6:	beq.w	1482c <_dtoa_r+0xa94>
   14aaa:	ldr	r3, [sp, #56]	; 0x38
   14aac:	cmp	r3, #0
   14aae:	ble.w	1490e <_dtoa_r+0xb76>
   14ab2:	movs	r2, #0
   14ab4:	ldr	r3, [pc, #148]	; (14b4c <_dtoa_r+0xdb4>)
   14ab6:	mov	r0, r6
   14ab8:	mov	r1, r7
   14aba:	bl	106d8 <__aeabi_dmul>
   14abe:	mov	r6, r0
   14ac0:	mov	r7, r1
   14ac2:	add.w	r0, sl, #1
   14ac6:	bl	1060c <__aeabi_i2d>
   14aca:	mov	r2, r6
   14acc:	mov	r3, r7
   14ace:	bl	106d8 <__aeabi_dmul>
   14ad2:	movs	r2, #0
   14ad4:	ldr	r3, [pc, #100]	; (14b3c <_dtoa_r+0xda4>)
   14ad6:	bl	10374 <__adddf3>
   14ada:	ldr	r2, [sp, #16]
   14adc:	ldr	r3, [sp, #56]	; 0x38
   14ade:	str	r3, [sp, #72]	; 0x48
   14ae0:	subs	r2, #1
   14ae2:	mov	r4, r0
   14ae4:	sub.w	r5, r1, #54525952	; 0x3400000
   14ae8:	str	r2, [sp, #88]	; 0x58
   14aea:	b.n	1449a <_dtoa_r+0x702>
   14aec:	str	r4, [sp, #40]	; 0x28
   14aee:	b.n	145fa <_dtoa_r+0x862>
   14af0:	movs	r2, #57	; 0x39
   14af2:	mov	fp, r6
   14af4:	str	r4, [sp, #40]	; 0x28
   14af6:	mov	r6, r8
   14af8:	strb	r2, [r7, #0]
   14afa:	adds	r5, r7, #1
   14afc:	b.w	142ea <_dtoa_r+0x552>
   14b00:	ldrd	r2, r3, [sp, #80]	; 0x50
   14b04:	movs	r0, #0
   14b06:	ldr	r1, [pc, #72]	; (14b50 <_dtoa_r+0xdb8>)
   14b08:	bl	10370 <__aeabi_dsub>
   14b0c:	mov	r2, r6
   14b0e:	mov	r3, r7
   14b10:	bl	10bf8 <__aeabi_dcmpgt>
   14b14:	cbnz	r0, 14b1a <_dtoa_r+0xd82>
   14b16:	b.n	1490e <_dtoa_r+0xb76>
   14b18:	mov	r5, r2
   14b1a:	ldrb.w	r3, [r5, #-1]
   14b1e:	cmp	r3, #48	; 0x30
   14b20:	add.w	r2, r5, #4294967295
   14b24:	beq.n	14b18 <_dtoa_r+0xd80>
   14b26:	b.n	1459c <_dtoa_r+0x804>
   14b28:	ldr	r3, [sp, #88]	; 0x58
   14b2a:	str	r3, [sp, #16]
   14b2c:	b.w	14112 <_dtoa_r+0x37a>
   14b30:	cmp.w	sl, #0
   14b34:	bne.w	14630 <_dtoa_r+0x898>
   14b38:	b.n	14800 <_dtoa_r+0xa68>
   14b3a:	nop
   14b3c:	.word	0x401c0000
   14b40:	.word	0x40140000
   14b44:	.word	0x00016010
   14b48:	.word	0x000160d8
   14b4c:	.word	0x40240000
   14b50:	.word	0x3fe00000
   14b54:	cmp	r3, #57	; 0x39
   14b56:	mov	fp, sl
   14b58:	mov	sl, r3
   14b5a:	beq.n	14af0 <_dtoa_r+0xd58>
   14b5c:	cmp.w	fp, #0
   14b60:	bgt.w	148de <_dtoa_r+0xb46>
   14b64:	b.n	148e2 <_dtoa_r+0xb4a>
   14b66:	bne.w	148e2 <_dtoa_r+0xb4a>
   14b6a:	tst.w	sl, #1
   14b6e:	beq.w	148e2 <_dtoa_r+0xb4a>
   14b72:	b.n	148d6 <_dtoa_r+0xb3e>
   14b74:	ldr	r3, [sp, #0]
   14b76:	cmp	r3, #2
   14b78:	bgt.n	14bc6 <_dtoa_r+0xe2e>
   14b7a:	ldr	r3, [sp, #56]	; 0x38
   14b7c:	b.n	1479a <_dtoa_r+0xa02>
   14b7e:	mov.w	sl, #2
   14b82:	b.n	14458 <_dtoa_r+0x6c0>
   14b84:	ldr	r3, [sp, #0]
   14b86:	cmp	r3, #2
   14b88:	bgt.n	14bc6 <_dtoa_r+0xe2e>
   14b8a:	ldr	r3, [sp, #56]	; 0x38
   14b8c:	b.n	1466a <_dtoa_r+0x8d2>
   14b8e:	movs	r4, #0
   14b90:	str.w	r4, [r9, #68]	; 0x44
   14b94:	mov	r1, r4
   14b96:	mov	r0, r9
   14b98:	bl	14e7c <_Balloc>
   14b9c:	mov.w	r3, #4294967295
   14ba0:	str	r3, [sp, #32]
   14ba2:	str	r3, [sp, #56]	; 0x38
   14ba4:	movs	r3, #1
   14ba6:	str	r0, [sp, #36]	; 0x24
   14ba8:	str	r4, [sp, #20]
   14baa:	str.w	r0, [r9, #64]	; 0x40
   14bae:	str	r3, [sp, #44]	; 0x2c
   14bb0:	b.w	13fac <_dtoa_r+0x214>
   14bb4:	beq.w	14248 <_dtoa_r+0x4b0>
   14bb8:	rsb	r0, r0, #60	; 0x3c
   14bbc:	b.w	1423e <_dtoa_r+0x4a6>
   14bc0:	movs	r6, #1
   14bc2:	b.w	13f3e <_dtoa_r+0x1a6>
   14bc6:	ldr	r3, [sp, #56]	; 0x38
   14bc8:	str	r3, [sp, #32]
   14bca:	b.n	147aa <_dtoa_r+0xa12>

00014bcc <__libc_fini_array>:
   14bcc:	push	{r3, r4, r5, lr}
   14bce:	ldr	r5, [pc, #28]	; (14bec <__libc_fini_array+0x20>)
   14bd0:	ldr	r4, [pc, #28]	; (14bf0 <__libc_fini_array+0x24>)
   14bd2:	subs	r4, r5, r4
   14bd4:	asrs	r4, r4, #2
   14bd6:	beq.n	14be4 <__libc_fini_array+0x18>
   14bd8:	subs	r4, #1
   14bda:	ldr.w	r3, [r5, #-4]!
   14bde:	blx	r3
   14be0:	cmp	r4, #0
   14be2:	bne.n	14bd8 <__libc_fini_array+0xc>
   14be4:	ldmia.w	sp!, {r3, r4, r5, lr}
   14be8:	b.w	16128 <__init_array_end>
	...

00014bf4 <_malloc_trim_r>:
   14bf4:	push	{r3, r4, r5, r6, r7, lr}
   14bf6:	ldr	r7, [pc, #140]	; (14c84 <_malloc_trim_r+0x90>)
   14bf8:	mov	r4, r1
   14bfa:	mov	r6, r0
   14bfc:	bl	11858 <__malloc_lock>
   14c00:	ldr	r3, [r7, #8]
   14c02:	ldr	r5, [r3, #4]
   14c04:	bic.w	r5, r5, #3
   14c08:	subs	r1, r5, r4
   14c0a:	addw	r1, r1, #4079	; 0xfef
   14c0e:	bic.w	r1, r1, #4080	; 0xff0
   14c12:	bic.w	r1, r1, #15
   14c16:	sub.w	r4, r1, #4096	; 0x1000
   14c1a:	cmp.w	r4, #4096	; 0x1000
   14c1e:	blt.n	14c30 <_malloc_trim_r+0x3c>
   14c20:	movs	r1, #0
   14c22:	mov	r0, r6
   14c24:	bl	11c40 <_sbrk_r>
   14c28:	ldr	r3, [r7, #8]
   14c2a:	add	r3, r5
   14c2c:	cmp	r0, r3
   14c2e:	beq.n	14c3a <_malloc_trim_r+0x46>
   14c30:	mov	r0, r6
   14c32:	bl	1185c <__malloc_unlock>
   14c36:	movs	r0, #0
   14c38:	pop	{r3, r4, r5, r6, r7, pc}
   14c3a:	negs	r1, r4
   14c3c:	mov	r0, r6
   14c3e:	bl	11c40 <_sbrk_r>
   14c42:	adds	r0, #1
   14c44:	beq.n	14c62 <_malloc_trim_r+0x6e>
   14c46:	ldr	r3, [pc, #64]	; (14c88 <_malloc_trim_r+0x94>)
   14c48:	ldr	r2, [r7, #8]
   14c4a:	ldr	r1, [r3, #0]
   14c4c:	subs	r5, r5, r4
   14c4e:	orr.w	r5, r5, #1
   14c52:	mov	r0, r6
   14c54:	subs	r1, r1, r4
   14c56:	str	r5, [r2, #4]
   14c58:	str	r1, [r3, #0]
   14c5a:	bl	1185c <__malloc_unlock>
   14c5e:	movs	r0, #1
   14c60:	pop	{r3, r4, r5, r6, r7, pc}
   14c62:	movs	r1, #0
   14c64:	mov	r0, r6
   14c66:	bl	11c40 <_sbrk_r>
   14c6a:	ldr	r2, [r7, #8]
   14c6c:	subs	r3, r0, r2
   14c6e:	cmp	r3, #15
   14c70:	ble.n	14c30 <_malloc_trim_r+0x3c>
   14c72:	ldr	r4, [pc, #24]	; (14c8c <_malloc_trim_r+0x98>)
   14c74:	ldr	r1, [pc, #16]	; (14c88 <_malloc_trim_r+0x94>)
   14c76:	ldr	r4, [r4, #0]
   14c78:	orr.w	r3, r3, #1
   14c7c:	subs	r0, r0, r4
   14c7e:	str	r3, [r2, #4]
   14c80:	str	r0, [r1, #0]
   14c82:	b.n	14c30 <_malloc_trim_r+0x3c>
   14c84:	.word	0x1fff1068
   14c88:	.word	0x1fff2684
   14c8c:	.word	0x1fff1474

00014c90 <_free_r>:
   14c90:	cmp	r1, #0
   14c92:	beq.n	14d20 <_free_r+0x90>
   14c94:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14c98:	mov	r5, r1
   14c9a:	mov	r8, r0
   14c9c:	bl	11858 <__malloc_lock>
   14ca0:	ldr.w	r7, [r5, #-4]
   14ca4:	ldr	r1, [pc, #424]	; (14e50 <_free_r+0x1c0>)
   14ca6:	bic.w	r3, r7, #1
   14caa:	sub.w	r4, r5, #8
   14cae:	adds	r2, r4, r3
   14cb0:	ldr	r6, [r1, #8]
   14cb2:	ldr	r0, [r2, #4]
   14cb4:	cmp	r2, r6
   14cb6:	bic.w	r0, r0, #3
   14cba:	beq.n	14d82 <_free_r+0xf2>
   14cbc:	lsls	r6, r7, #31
   14cbe:	str	r0, [r2, #4]
   14cc0:	bmi.n	14cda <_free_r+0x4a>
   14cc2:	ldr.w	r7, [r5, #-8]
   14cc6:	subs	r4, r4, r7
   14cc8:	add.w	lr, r1, #8
   14ccc:	ldr	r5, [r4, #8]
   14cce:	cmp	r5, lr
   14cd0:	add	r3, r7
   14cd2:	beq.n	14db4 <_free_r+0x124>
   14cd4:	ldr	r7, [r4, #12]
   14cd6:	str	r7, [r5, #12]
   14cd8:	str	r5, [r7, #8]
   14cda:	adds	r5, r2, r0
   14cdc:	ldr	r5, [r5, #4]
   14cde:	lsls	r5, r5, #31
   14ce0:	bpl.n	14d68 <_free_r+0xd8>
   14ce2:	orr.w	r2, r3, #1
   14ce6:	str	r2, [r4, #4]
   14ce8:	str	r3, [r4, r3]
   14cea:	cmp.w	r3, #512	; 0x200
   14cee:	bcs.n	14d22 <_free_r+0x92>
   14cf0:	lsrs	r3, r3, #3
   14cf2:	adds	r2, r3, #1
   14cf4:	ldr	r5, [r1, #4]
   14cf6:	ldr.w	r7, [r1, r2, lsl #3]
   14cfa:	str	r7, [r4, #8]
   14cfc:	movs	r0, #1
   14cfe:	asrs	r3, r3, #2
   14d00:	lsl.w	r3, r0, r3
   14d04:	add.w	r0, r1, r2, lsl #3
   14d08:	orrs	r5, r3
   14d0a:	subs	r0, #8
   14d0c:	str	r0, [r4, #12]
   14d0e:	str	r5, [r1, #4]
   14d10:	str.w	r4, [r1, r2, lsl #3]
   14d14:	str	r4, [r7, #12]
   14d16:	mov	r0, r8
   14d18:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   14d1c:	b.w	1185c <__malloc_unlock>
   14d20:	bx	lr
   14d22:	lsrs	r2, r3, #9
   14d24:	cmp	r2, #4
   14d26:	bhi.n	14dd0 <_free_r+0x140>
   14d28:	lsrs	r2, r3, #6
   14d2a:	add.w	r7, r2, #57	; 0x39
   14d2e:	lsls	r7, r7, #1
   14d30:	add.w	r5, r2, #56	; 0x38
   14d34:	add.w	r0, r1, r7, lsl #2
   14d38:	ldr.w	r2, [r1, r7, lsl #2]
   14d3c:	ldr	r1, [pc, #272]	; (14e50 <_free_r+0x1c0>)
   14d3e:	subs	r0, #8
   14d40:	cmp	r0, r2
   14d42:	beq.n	14de0 <_free_r+0x150>
   14d44:	ldr	r1, [r2, #4]
   14d46:	bic.w	r1, r1, #3
   14d4a:	cmp	r3, r1
   14d4c:	bcs.n	14d54 <_free_r+0xc4>
   14d4e:	ldr	r2, [r2, #8]
   14d50:	cmp	r0, r2
   14d52:	bne.n	14d44 <_free_r+0xb4>
   14d54:	ldr	r0, [r2, #12]
   14d56:	str	r0, [r4, #12]
   14d58:	str	r2, [r4, #8]
   14d5a:	str	r4, [r0, #8]
   14d5c:	str	r4, [r2, #12]
   14d5e:	mov	r0, r8
   14d60:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   14d64:	b.w	1185c <__malloc_unlock>
   14d68:	ldr	r5, [r2, #8]
   14d6a:	ldr	r7, [pc, #232]	; (14e54 <_free_r+0x1c4>)
   14d6c:	cmp	r5, r7
   14d6e:	add	r3, r0
   14d70:	beq.n	14df2 <_free_r+0x162>
   14d72:	ldr	r0, [r2, #12]
   14d74:	str	r0, [r5, #12]
   14d76:	orr.w	r2, r3, #1
   14d7a:	str	r5, [r0, #8]
   14d7c:	str	r2, [r4, #4]
   14d7e:	str	r3, [r4, r3]
   14d80:	b.n	14cea <_free_r+0x5a>
   14d82:	lsls	r7, r7, #31
   14d84:	add	r3, r0
   14d86:	bmi.n	14d98 <_free_r+0x108>
   14d88:	ldr.w	r2, [r5, #-8]
   14d8c:	subs	r4, r4, r2
   14d8e:	add	r3, r2
   14d90:	ldr	r0, [r4, #8]
   14d92:	ldr	r2, [r4, #12]
   14d94:	str	r2, [r0, #12]
   14d96:	str	r0, [r2, #8]
   14d98:	ldr	r2, [pc, #188]	; (14e58 <_free_r+0x1c8>)
   14d9a:	ldr	r2, [r2, #0]
   14d9c:	orr.w	r0, r3, #1
   14da0:	cmp	r3, r2
   14da2:	str	r0, [r4, #4]
   14da4:	str	r4, [r1, #8]
   14da6:	bcc.n	14d16 <_free_r+0x86>
   14da8:	ldr	r3, [pc, #176]	; (14e5c <_free_r+0x1cc>)
   14daa:	mov	r0, r8
   14dac:	ldr	r1, [r3, #0]
   14dae:	bl	14bf4 <_malloc_trim_r>
   14db2:	b.n	14d16 <_free_r+0x86>
   14db4:	adds	r1, r2, r0
   14db6:	ldr	r1, [r1, #4]
   14db8:	lsls	r1, r1, #31
   14dba:	bmi.n	14e46 <_free_r+0x1b6>
   14dbc:	ldr	r1, [r2, #8]
   14dbe:	ldr	r2, [r2, #12]
   14dc0:	str	r2, [r1, #12]
   14dc2:	add	r3, r0
   14dc4:	orr.w	r0, r3, #1
   14dc8:	str	r1, [r2, #8]
   14dca:	str	r0, [r4, #4]
   14dcc:	str	r3, [r4, r3]
   14dce:	b.n	14d16 <_free_r+0x86>
   14dd0:	cmp	r2, #20
   14dd2:	bhi.n	14e04 <_free_r+0x174>
   14dd4:	add.w	r7, r2, #92	; 0x5c
   14dd8:	lsls	r7, r7, #1
   14dda:	add.w	r5, r2, #91	; 0x5b
   14dde:	b.n	14d34 <_free_r+0xa4>
   14de0:	asrs	r2, r5, #2
   14de2:	ldr	r3, [r1, #4]
   14de4:	movs	r5, #1
   14de6:	lsl.w	r2, r5, r2
   14dea:	orrs	r3, r2
   14dec:	str	r3, [r1, #4]
   14dee:	mov	r2, r0
   14df0:	b.n	14d56 <_free_r+0xc6>
   14df2:	orr.w	r2, r3, #1
   14df6:	str	r4, [r1, #20]
   14df8:	str	r4, [r1, #16]
   14dfa:	str	r5, [r4, #12]
   14dfc:	str	r5, [r4, #8]
   14dfe:	str	r2, [r4, #4]
   14e00:	str	r3, [r4, r3]
   14e02:	b.n	14d16 <_free_r+0x86>
   14e04:	cmp	r2, #84	; 0x54
   14e06:	bhi.n	14e16 <_free_r+0x186>
   14e08:	lsrs	r2, r3, #12
   14e0a:	add.w	r7, r2, #111	; 0x6f
   14e0e:	lsls	r7, r7, #1
   14e10:	add.w	r5, r2, #110	; 0x6e
   14e14:	b.n	14d34 <_free_r+0xa4>
   14e16:	cmp.w	r2, #340	; 0x154
   14e1a:	bhi.n	14e2a <_free_r+0x19a>
   14e1c:	lsrs	r2, r3, #15
   14e1e:	add.w	r7, r2, #120	; 0x78
   14e22:	lsls	r7, r7, #1
   14e24:	add.w	r5, r2, #119	; 0x77
   14e28:	b.n	14d34 <_free_r+0xa4>
   14e2a:	movw	r0, #1364	; 0x554
   14e2e:	cmp	r2, r0
   14e30:	bhi.n	14e40 <_free_r+0x1b0>
   14e32:	lsrs	r2, r3, #18
   14e34:	add.w	r7, r2, #125	; 0x7d
   14e38:	lsls	r7, r7, #1
   14e3a:	add.w	r5, r2, #124	; 0x7c
   14e3e:	b.n	14d34 <_free_r+0xa4>
   14e40:	movs	r7, #254	; 0xfe
   14e42:	movs	r5, #126	; 0x7e
   14e44:	b.n	14d34 <_free_r+0xa4>
   14e46:	orr.w	r2, r3, #1
   14e4a:	str	r2, [r4, #4]
   14e4c:	str	r3, [r4, r3]
   14e4e:	b.n	14d16 <_free_r+0x86>
   14e50:	.word	0x1fff1068
   14e54:	.word	0x1fff1070
   14e58:	.word	0x1fff1470
   14e5c:	.word	0x1fff2680

00014e60 <_localeconv_r>:
   14e60:	ldr	r2, [pc, #16]	; (14e74 <_localeconv_r+0x14>)
   14e62:	ldr	r3, [pc, #20]	; (14e78 <_localeconv_r+0x18>)
   14e64:	ldr	r2, [r2, #0]
   14e66:	ldr	r0, [r2, #52]	; 0x34
   14e68:	cmp	r0, #0
   14e6a:	it	eq
   14e6c:	moveq	r0, r3
   14e6e:	adds	r0, #240	; 0xf0
   14e70:	bx	lr
   14e72:	nop
   14e74:	.word	0x1fff0ef8
   14e78:	.word	0x1fff0efc

00014e7c <_Balloc>:
   14e7c:	ldr	r3, [r0, #76]	; 0x4c
   14e7e:	push	{r4, r5, r6, lr}
   14e80:	mov	r5, r0
   14e82:	mov	r4, r1
   14e84:	cbz	r3, 14e9a <_Balloc+0x1e>
   14e86:	ldr.w	r0, [r3, r4, lsl #2]
   14e8a:	cbz	r0, 14eae <_Balloc+0x32>
   14e8c:	ldr	r2, [r0, #0]
   14e8e:	str.w	r2, [r3, r4, lsl #2]
   14e92:	movs	r3, #0
   14e94:	str	r3, [r0, #16]
   14e96:	str	r3, [r0, #12]
   14e98:	pop	{r4, r5, r6, pc}
   14e9a:	movs	r2, #33	; 0x21
   14e9c:	movs	r1, #4
   14e9e:	bl	15600 <_calloc_r>
   14ea2:	str	r0, [r5, #76]	; 0x4c
   14ea4:	mov	r3, r0
   14ea6:	cmp	r0, #0
   14ea8:	bne.n	14e86 <_Balloc+0xa>
   14eaa:	movs	r0, #0
   14eac:	pop	{r4, r5, r6, pc}
   14eae:	movs	r1, #1
   14eb0:	lsl.w	r6, r1, r4
   14eb4:	adds	r2, r6, #5
   14eb6:	mov	r0, r5
   14eb8:	lsls	r2, r2, #2
   14eba:	bl	15600 <_calloc_r>
   14ebe:	cmp	r0, #0
   14ec0:	beq.n	14eaa <_Balloc+0x2e>
   14ec2:	str	r4, [r0, #4]
   14ec4:	str	r6, [r0, #8]
   14ec6:	b.n	14e92 <_Balloc+0x16>

00014ec8 <_Bfree>:
   14ec8:	cbz	r1, 14ed8 <_Bfree+0x10>
   14eca:	ldr	r3, [r0, #76]	; 0x4c
   14ecc:	ldr	r2, [r1, #4]
   14ece:	ldr.w	r0, [r3, r2, lsl #2]
   14ed2:	str	r0, [r1, #0]
   14ed4:	str.w	r1, [r3, r2, lsl #2]
   14ed8:	bx	lr
   14eda:	nop

00014edc <__multadd>:
   14edc:	push	{r4, r5, r6, r7, lr}
   14ede:	ldr	r4, [r1, #16]
   14ee0:	sub	sp, #12
   14ee2:	mov	r5, r1
   14ee4:	mov	r6, r0
   14ee6:	add.w	lr, r1, #20
   14eea:	movs	r7, #0
   14eec:	ldr.w	r0, [lr]
   14ef0:	uxth	r1, r0
   14ef2:	mla	r1, r2, r1, r3
   14ef6:	lsrs	r3, r1, #16
   14ef8:	lsrs	r0, r0, #16
   14efa:	mla	r3, r2, r0, r3
   14efe:	uxth	r1, r1
   14f00:	adds	r7, #1
   14f02:	add.w	r1, r1, r3, lsl #16
   14f06:	cmp	r4, r7
   14f08:	str.w	r1, [lr], #4
   14f0c:	mov.w	r3, r3, lsr #16
   14f10:	bgt.n	14eec <__multadd+0x10>
   14f12:	cbz	r3, 14f24 <__multadd+0x48>
   14f14:	ldr	r2, [r5, #8]
   14f16:	cmp	r4, r2
   14f18:	bge.n	14f2a <__multadd+0x4e>
   14f1a:	add.w	r2, r5, r4, lsl #2
   14f1e:	adds	r4, #1
   14f20:	str	r3, [r2, #20]
   14f22:	str	r4, [r5, #16]
   14f24:	mov	r0, r5
   14f26:	add	sp, #12
   14f28:	pop	{r4, r5, r6, r7, pc}
   14f2a:	ldr	r1, [r5, #4]
   14f2c:	str	r3, [sp, #4]
   14f2e:	adds	r1, #1
   14f30:	mov	r0, r6
   14f32:	bl	14e7c <_Balloc>
   14f36:	ldr	r2, [r5, #16]
   14f38:	adds	r2, #2
   14f3a:	add.w	r1, r5, #12
   14f3e:	mov	r7, r0
   14f40:	lsls	r2, r2, #2
   14f42:	adds	r0, #12
   14f44:	bl	e8e8 <memcpy>
   14f48:	ldr	r2, [r6, #76]	; 0x4c
   14f4a:	ldr	r1, [r5, #4]
   14f4c:	ldr	r3, [sp, #4]
   14f4e:	ldr.w	r0, [r2, r1, lsl #2]
   14f52:	str	r0, [r5, #0]
   14f54:	str.w	r5, [r2, r1, lsl #2]
   14f58:	mov	r5, r7
   14f5a:	b.n	14f1a <__multadd+0x3e>

00014f5c <__hi0bits>:
   14f5c:	lsrs	r3, r0, #16
   14f5e:	lsls	r3, r3, #16
   14f60:	cbnz	r3, 14f90 <__hi0bits+0x34>
   14f62:	lsls	r0, r0, #16
   14f64:	movs	r3, #16
   14f66:	tst.w	r0, #4278190080	; 0xff000000
   14f6a:	itt	eq
   14f6c:	lsleq	r0, r0, #8
   14f6e:	addeq	r3, #8
   14f70:	tst.w	r0, #4026531840	; 0xf0000000
   14f74:	itt	eq
   14f76:	lsleq	r0, r0, #4
   14f78:	addeq	r3, #4
   14f7a:	tst.w	r0, #3221225472	; 0xc0000000
   14f7e:	itt	eq
   14f80:	lsleq	r0, r0, #2
   14f82:	addeq	r3, #2
   14f84:	cmp	r0, #0
   14f86:	blt.n	14f98 <__hi0bits+0x3c>
   14f88:	lsls	r2, r0, #1
   14f8a:	bmi.n	14f94 <__hi0bits+0x38>
   14f8c:	movs	r0, #32
   14f8e:	bx	lr
   14f90:	movs	r3, #0
   14f92:	b.n	14f66 <__hi0bits+0xa>
   14f94:	adds	r0, r3, #1
   14f96:	bx	lr
   14f98:	mov	r0, r3
   14f9a:	bx	lr

00014f9c <__lo0bits>:
   14f9c:	ldr	r3, [r0, #0]
   14f9e:	ands.w	r2, r3, #7
   14fa2:	beq.n	14fb4 <__lo0bits+0x18>
   14fa4:	lsls	r1, r3, #31
   14fa6:	bmi.n	14fea <__lo0bits+0x4e>
   14fa8:	lsls	r2, r3, #30
   14faa:	bmi.n	14fee <__lo0bits+0x52>
   14fac:	lsrs	r3, r3, #2
   14fae:	str	r3, [r0, #0]
   14fb0:	movs	r0, #2
   14fb2:	bx	lr
   14fb4:	uxth	r1, r3
   14fb6:	cbnz	r1, 14fbc <__lo0bits+0x20>
   14fb8:	lsrs	r3, r3, #16
   14fba:	movs	r2, #16
   14fbc:	tst.w	r3, #255	; 0xff
   14fc0:	itt	eq
   14fc2:	lsreq	r3, r3, #8
   14fc4:	addeq	r2, #8
   14fc6:	lsls	r1, r3, #28
   14fc8:	itt	eq
   14fca:	lsreq	r3, r3, #4
   14fcc:	addeq	r2, #4
   14fce:	lsls	r1, r3, #30
   14fd0:	itt	eq
   14fd2:	lsreq	r3, r3, #2
   14fd4:	addeq	r2, #2
   14fd6:	lsls	r1, r3, #31
   14fd8:	bmi.n	14fe4 <__lo0bits+0x48>
   14fda:	lsrs	r3, r3, #1
   14fdc:	bne.n	14fe2 <__lo0bits+0x46>
   14fde:	movs	r0, #32
   14fe0:	bx	lr
   14fe2:	adds	r2, #1
   14fe4:	str	r3, [r0, #0]
   14fe6:	mov	r0, r2
   14fe8:	bx	lr
   14fea:	movs	r0, #0
   14fec:	bx	lr
   14fee:	lsrs	r3, r3, #1
   14ff0:	str	r3, [r0, #0]
   14ff2:	movs	r0, #1
   14ff4:	bx	lr
   14ff6:	nop

00014ff8 <__i2b>:
   14ff8:	push	{r4, lr}
   14ffa:	mov	r4, r1
   14ffc:	movs	r1, #1
   14ffe:	bl	14e7c <_Balloc>
   15002:	movs	r2, #1
   15004:	str	r4, [r0, #20]
   15006:	str	r2, [r0, #16]
   15008:	pop	{r4, pc}
   1500a:	nop

0001500c <__multiply>:
   1500c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15010:	ldr	r5, [r1, #16]
   15012:	ldr	r7, [r2, #16]
   15014:	cmp	r5, r7
   15016:	sub	sp, #12
   15018:	mov	r4, r1
   1501a:	mov	r6, r2
   1501c:	bge.n	15028 <__multiply+0x1c>
   1501e:	mov	r2, r5
   15020:	mov	r4, r6
   15022:	mov	r5, r7
   15024:	mov	r6, r1
   15026:	mov	r7, r2
   15028:	ldr	r3, [r4, #8]
   1502a:	ldr	r1, [r4, #4]
   1502c:	add.w	r8, r5, r7
   15030:	cmp	r8, r3
   15032:	it	gt
   15034:	addgt	r1, #1
   15036:	bl	14e7c <_Balloc>
   1503a:	add.w	ip, r0, #20
   1503e:	add.w	r9, ip, r8, lsl #2
   15042:	cmp	ip, r9
   15044:	str	r0, [sp, #0]
   15046:	bcs.n	15054 <__multiply+0x48>
   15048:	mov	r3, ip
   1504a:	movs	r1, #0
   1504c:	str.w	r1, [r3], #4
   15050:	cmp	r9, r3
   15052:	bhi.n	1504c <__multiply+0x40>
   15054:	add.w	r2, r6, #20
   15058:	add.w	sl, r2, r7, lsl #2
   1505c:	add.w	r3, r4, #20
   15060:	cmp	r2, sl
   15062:	add.w	lr, r3, r5, lsl #2
   15066:	bcs.n	15112 <__multiply+0x106>
   15068:	str.w	r9, [sp, #4]
   1506c:	mov	r9, r3
   1506e:	ldr.w	r3, [r2], #4
   15072:	uxth.w	fp, r3
   15076:	cmp.w	fp, #0
   1507a:	beq.n	150be <__multiply+0xb2>
   1507c:	movs	r0, #0
   1507e:	mov	r7, r9
   15080:	mov	r6, ip
   15082:	mov	r5, r0
   15084:	b.n	15088 <__multiply+0x7c>
   15086:	mov	r6, r3
   15088:	ldr.w	r4, [r7], #4
   1508c:	ldr	r0, [r6, #0]
   1508e:	uxth	r1, r4
   15090:	uxth	r3, r0
   15092:	mla	r1, fp, r1, r3
   15096:	lsrs	r4, r4, #16
   15098:	lsrs	r0, r0, #16
   1509a:	adds	r3, r1, r5
   1509c:	mla	r0, fp, r4, r0
   150a0:	add.w	r0, r0, r3, lsr #16
   150a4:	uxth	r1, r3
   150a6:	mov	r3, r6
   150a8:	orr.w	r1, r1, r0, lsl #16
   150ac:	cmp	lr, r7
   150ae:	mov.w	r5, r0, lsr #16
   150b2:	str.w	r1, [r3], #4
   150b6:	bhi.n	15086 <__multiply+0x7a>
   150b8:	str	r5, [r6, #4]
   150ba:	ldr.w	r3, [r2, #-4]
   150be:	movs.w	fp, r3, lsr #16
   150c2:	beq.n	15106 <__multiply+0xfa>
   150c4:	ldr.w	r3, [ip]
   150c8:	mov	r7, ip
   150ca:	mov	r0, r3
   150cc:	mov	r5, r9
   150ce:	movs	r1, #0
   150d0:	b.n	150d4 <__multiply+0xc8>
   150d2:	mov	r7, r6
   150d4:	ldrh	r4, [r5, #0]
   150d6:	lsrs	r0, r0, #16
   150d8:	mla	r0, fp, r4, r0
   150dc:	add	r1, r0
   150de:	uxth	r4, r3
   150e0:	mov	r6, r7
   150e2:	orr.w	r3, r4, r1, lsl #16
   150e6:	str.w	r3, [r6], #4
   150ea:	ldr	r0, [r7, #4]
   150ec:	ldr.w	r4, [r5], #4
   150f0:	uxth	r3, r0
   150f2:	lsrs	r4, r4, #16
   150f4:	mla	r4, fp, r4, r3
   150f8:	add.w	r3, r4, r1, lsr #16
   150fc:	cmp	lr, r5
   150fe:	mov.w	r1, r3, lsr #16
   15102:	bhi.n	150d2 <__multiply+0xc6>
   15104:	str	r3, [r7, #4]
   15106:	cmp	sl, r2
   15108:	add.w	ip, ip, #4
   1510c:	bhi.n	1506e <__multiply+0x62>
   1510e:	ldr.w	r9, [sp, #4]
   15112:	cmp.w	r8, #0
   15116:	ble.n	15130 <__multiply+0x124>
   15118:	ldr.w	r3, [r9, #-4]
   1511c:	sub.w	r9, r9, #4
   15120:	cbz	r3, 1512a <__multiply+0x11e>
   15122:	b.n	15130 <__multiply+0x124>
   15124:	ldr.w	r3, [r9, #-4]!
   15128:	cbnz	r3, 15130 <__multiply+0x124>
   1512a:	subs.w	r8, r8, #1
   1512e:	bne.n	15124 <__multiply+0x118>
   15130:	ldr	r0, [sp, #0]
   15132:	str.w	r8, [r0, #16]
   15136:	add	sp, #12
   15138:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001513c <__pow5mult>:
   1513c:	ands.w	r3, r2, #3
   15140:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15144:	mov	r4, r2
   15146:	mov	r7, r0
   15148:	bne.n	151a8 <__pow5mult+0x6c>
   1514a:	mov	r6, r1
   1514c:	asrs	r4, r4, #2
   1514e:	beq.n	1518a <__pow5mult+0x4e>
   15150:	ldr	r5, [r7, #72]	; 0x48
   15152:	cbz	r5, 151ba <__pow5mult+0x7e>
   15154:	lsls	r3, r4, #31
   15156:	mov.w	r8, #0
   1515a:	bmi.n	1516a <__pow5mult+0x2e>
   1515c:	asrs	r4, r4, #1
   1515e:	beq.n	1518a <__pow5mult+0x4e>
   15160:	ldr	r0, [r5, #0]
   15162:	cbz	r0, 15190 <__pow5mult+0x54>
   15164:	mov	r5, r0
   15166:	lsls	r3, r4, #31
   15168:	bpl.n	1515c <__pow5mult+0x20>
   1516a:	mov	r2, r5
   1516c:	mov	r1, r6
   1516e:	mov	r0, r7
   15170:	bl	1500c <__multiply>
   15174:	cbz	r6, 151a4 <__pow5mult+0x68>
   15176:	ldr	r2, [r6, #4]
   15178:	ldr	r3, [r7, #76]	; 0x4c
   1517a:	asrs	r4, r4, #1
   1517c:	ldr.w	r1, [r3, r2, lsl #2]
   15180:	str	r1, [r6, #0]
   15182:	str.w	r6, [r3, r2, lsl #2]
   15186:	mov	r6, r0
   15188:	bne.n	15160 <__pow5mult+0x24>
   1518a:	mov	r0, r6
   1518c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15190:	mov	r2, r5
   15192:	mov	r1, r5
   15194:	mov	r0, r7
   15196:	bl	1500c <__multiply>
   1519a:	str	r0, [r5, #0]
   1519c:	str.w	r8, [r0]
   151a0:	mov	r5, r0
   151a2:	b.n	15166 <__pow5mult+0x2a>
   151a4:	mov	r6, r0
   151a6:	b.n	1515c <__pow5mult+0x20>
   151a8:	subs	r2, r3, #1
   151aa:	ldr	r5, [pc, #44]	; (151d8 <__pow5mult+0x9c>)
   151ac:	movs	r3, #0
   151ae:	ldr.w	r2, [r5, r2, lsl #2]
   151b2:	bl	14edc <__multadd>
   151b6:	mov	r6, r0
   151b8:	b.n	1514c <__pow5mult+0x10>
   151ba:	movs	r1, #1
   151bc:	mov	r0, r7
   151be:	bl	14e7c <_Balloc>
   151c2:	movw	r1, #625	; 0x271
   151c6:	movs	r2, #1
   151c8:	movs	r3, #0
   151ca:	str	r1, [r0, #20]
   151cc:	str	r2, [r0, #16]
   151ce:	mov	r5, r0
   151d0:	str	r0, [r7, #72]	; 0x48
   151d2:	str	r3, [r0, #0]
   151d4:	b.n	15154 <__pow5mult+0x18>
   151d6:	nop
   151d8:	.word	0x00016100

000151dc <__lshift>:
   151dc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   151e0:	mov	r9, r2
   151e2:	ldr	r2, [r1, #16]
   151e4:	ldr	r3, [r1, #8]
   151e6:	mov.w	r4, r9, asr #5
   151ea:	add.w	r8, r4, r2
   151ee:	add.w	r5, r8, #1
   151f2:	cmp	r5, r3
   151f4:	mov	r6, r1
   151f6:	mov	sl, r0
   151f8:	ldr	r1, [r1, #4]
   151fa:	ble.n	15206 <__lshift+0x2a>
   151fc:	lsls	r3, r3, #1
   151fe:	cmp	r5, r3
   15200:	add.w	r1, r1, #1
   15204:	bgt.n	151fc <__lshift+0x20>
   15206:	mov	r0, sl
   15208:	bl	14e7c <_Balloc>
   1520c:	cmp	r4, #0
   1520e:	add.w	r2, r0, #20
   15212:	ble.n	15286 <__lshift+0xaa>
   15214:	add.w	r3, r2, r4, lsl #2
   15218:	movs	r1, #0
   1521a:	str.w	r1, [r2], #4
   1521e:	cmp	r3, r2
   15220:	bne.n	1521a <__lshift+0x3e>
   15222:	ldr	r4, [r6, #16]
   15224:	add.w	r1, r6, #20
   15228:	ands.w	r9, r9, #31
   1522c:	add.w	lr, r1, r4, lsl #2
   15230:	beq.n	15276 <__lshift+0x9a>
   15232:	rsb	r2, r9, #32
   15236:	movs	r4, #0
   15238:	ldr	r7, [r1, #0]
   1523a:	lsl.w	ip, r7, r9
   1523e:	orr.w	r4, ip, r4
   15242:	mov	ip, r3
   15244:	str.w	r4, [r3], #4
   15248:	ldr.w	r4, [r1], #4
   1524c:	cmp	lr, r1
   1524e:	lsr.w	r4, r4, r2
   15252:	bhi.n	15238 <__lshift+0x5c>
   15254:	str.w	r4, [ip, #4]
   15258:	cbz	r4, 1525e <__lshift+0x82>
   1525a:	add.w	r5, r8, #2
   1525e:	ldr.w	r3, [sl, #76]	; 0x4c
   15262:	ldr	r2, [r6, #4]
   15264:	subs	r5, #1
   15266:	ldr.w	r1, [r3, r2, lsl #2]
   1526a:	str	r5, [r0, #16]
   1526c:	str	r1, [r6, #0]
   1526e:	str.w	r6, [r3, r2, lsl #2]
   15272:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15276:	subs	r3, #4
   15278:	ldr.w	r2, [r1], #4
   1527c:	str.w	r2, [r3, #4]!
   15280:	cmp	lr, r1
   15282:	bhi.n	15278 <__lshift+0x9c>
   15284:	b.n	1525e <__lshift+0x82>
   15286:	mov	r3, r2
   15288:	b.n	15222 <__lshift+0x46>
   1528a:	nop

0001528c <__mcmp>:
   1528c:	ldr	r2, [r0, #16]
   1528e:	ldr	r3, [r1, #16]
   15290:	subs	r2, r2, r3
   15292:	bne.n	152bc <__mcmp+0x30>
   15294:	lsls	r3, r3, #2
   15296:	adds	r0, #20
   15298:	adds	r1, #20
   1529a:	add	r1, r3
   1529c:	push	{r4}
   1529e:	add	r3, r0
   152a0:	b.n	152a6 <__mcmp+0x1a>
   152a2:	cmp	r0, r3
   152a4:	bcs.n	152c0 <__mcmp+0x34>
   152a6:	ldr.w	r4, [r3, #-4]!
   152aa:	ldr.w	r2, [r1, #-4]!
   152ae:	cmp	r4, r2
   152b0:	beq.n	152a2 <__mcmp+0x16>
   152b2:	bcc.n	152c8 <__mcmp+0x3c>
   152b4:	movs	r0, #1
   152b6:	ldr.w	r4, [sp], #4
   152ba:	bx	lr
   152bc:	mov	r0, r2
   152be:	bx	lr
   152c0:	movs	r0, #0
   152c2:	ldr.w	r4, [sp], #4
   152c6:	bx	lr
   152c8:	mov.w	r0, #4294967295
   152cc:	b.n	152b6 <__mcmp+0x2a>
   152ce:	nop

000152d0 <__mdiff>:
   152d0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   152d4:	ldr	r3, [r1, #16]
   152d6:	mov	r7, r1
   152d8:	ldr	r1, [r2, #16]
   152da:	subs	r3, r3, r1
   152dc:	cmp	r3, #0
   152de:	mov	r8, r2
   152e0:	bne.n	15312 <__mdiff+0x42>
   152e2:	lsls	r1, r1, #2
   152e4:	add.w	r2, r7, #20
   152e8:	add.w	r5, r8, #20
   152ec:	adds	r3, r2, r1
   152ee:	add	r1, r5
   152f0:	b.n	152f6 <__mdiff+0x26>
   152f2:	cmp	r2, r3
   152f4:	bcs.n	153b4 <__mdiff+0xe4>
   152f6:	ldr.w	r6, [r3, #-4]!
   152fa:	ldr.w	r4, [r1, #-4]!
   152fe:	cmp	r6, r4
   15300:	beq.n	152f2 <__mdiff+0x22>
   15302:	bcs.n	153c6 <__mdiff+0xf6>
   15304:	mov	r3, r7
   15306:	mov	r4, r2
   15308:	mov	r7, r8
   1530a:	mov.w	r9, #1
   1530e:	mov	r8, r3
   15310:	b.n	15320 <__mdiff+0x50>
   15312:	blt.n	153d0 <__mdiff+0x100>
   15314:	add.w	r5, r7, #20
   15318:	add.w	r4, r2, #20
   1531c:	mov.w	r9, #0
   15320:	ldr	r1, [r7, #4]
   15322:	bl	14e7c <_Balloc>
   15326:	ldr.w	r3, [r8, #16]
   1532a:	ldr	r6, [r7, #16]
   1532c:	str.w	r9, [r0, #12]
   15330:	add.w	ip, r4, r3, lsl #2
   15334:	mov	lr, r4
   15336:	add.w	r7, r5, r6, lsl #2
   1533a:	add.w	r4, r0, #20
   1533e:	movs	r3, #0
   15340:	ldr.w	r1, [lr], #4
   15344:	ldr.w	r8, [r5], #4
   15348:	uxth	r2, r1
   1534a:	uxtah	r3, r3, r8
   1534e:	lsrs	r1, r1, #16
   15350:	subs	r2, r3, r2
   15352:	rsb	r3, r1, r8, lsr #16
   15356:	add.w	r3, r3, r2, asr #16
   1535a:	uxth	r2, r2
   1535c:	orr.w	r2, r2, r3, lsl #16
   15360:	cmp	ip, lr
   15362:	str.w	r2, [r4], #4
   15366:	mov.w	r3, r3, asr #16
   1536a:	bhi.n	15340 <__mdiff+0x70>
   1536c:	cmp	r7, r5
   1536e:	bls.n	153a0 <__mdiff+0xd0>
   15370:	mov	ip, r4
   15372:	mov	r1, r5
   15374:	ldr.w	lr, [r1], #4
   15378:	uxtah	r2, r3, lr
   1537c:	asrs	r3, r2, #16
   1537e:	add.w	r3, r3, lr, lsr #16
   15382:	uxth	r2, r2
   15384:	orr.w	r2, r2, r3, lsl #16
   15388:	cmp	r7, r1
   1538a:	str.w	r2, [ip], #4
   1538e:	mov.w	r3, r3, asr #16
   15392:	bhi.n	15374 <__mdiff+0xa4>
   15394:	mvns	r5, r5
   15396:	add	r5, r7
   15398:	bic.w	r5, r5, #3
   1539c:	adds	r5, #4
   1539e:	add	r4, r5
   153a0:	subs	r4, #4
   153a2:	cbnz	r2, 153ae <__mdiff+0xde>
   153a4:	ldr.w	r3, [r4, #-4]!
   153a8:	subs	r6, #1
   153aa:	cmp	r3, #0
   153ac:	beq.n	153a4 <__mdiff+0xd4>
   153ae:	str	r6, [r0, #16]
   153b0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   153b4:	movs	r1, #0
   153b6:	bl	14e7c <_Balloc>
   153ba:	movs	r2, #1
   153bc:	movs	r3, #0
   153be:	str	r2, [r0, #16]
   153c0:	str	r3, [r0, #20]
   153c2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   153c6:	mov	r4, r5
   153c8:	mov.w	r9, #0
   153cc:	mov	r5, r2
   153ce:	b.n	15320 <__mdiff+0x50>
   153d0:	mov	r3, r7
   153d2:	add.w	r4, r7, #20
   153d6:	add.w	r5, r8, #20
   153da:	mov	r7, r8
   153dc:	mov.w	r9, #1
   153e0:	mov	r8, r3
   153e2:	b.n	15320 <__mdiff+0x50>

000153e4 <__d2b>:
   153e4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   153e8:	vmov	r6, r7, d0
   153ec:	sub	sp, #12
   153ee:	mov	r8, r1
   153f0:	movs	r1, #1
   153f2:	mov	r4, r7
   153f4:	ubfx	r5, r7, #20, #11
   153f8:	mov	r7, r2
   153fa:	bl	14e7c <_Balloc>
   153fe:	ubfx	r4, r4, #0, #20
   15402:	mov	r9, r0
   15404:	cbz	r5, 1540a <__d2b+0x26>
   15406:	orr.w	r4, r4, #1048576	; 0x100000
   1540a:	str	r4, [sp, #4]
   1540c:	cbz	r6, 15456 <__d2b+0x72>
   1540e:	add	r0, sp, #8
   15410:	str.w	r6, [r0, #-8]!
   15414:	bl	14f9c <__lo0bits>
   15418:	cmp	r0, #0
   1541a:	bne.n	15486 <__d2b+0xa2>
   1541c:	ldmia.w	sp, {r2, r3}
   15420:	str.w	r2, [r9, #20]
   15424:	cmp	r3, #0
   15426:	ite	eq
   15428:	moveq	r1, #1
   1542a:	movne	r1, #2
   1542c:	str.w	r3, [r9, #24]
   15430:	str.w	r1, [r9, #16]
   15434:	cbnz	r5, 1546e <__d2b+0x8a>
   15436:	add.w	r3, r9, r1, lsl #2
   1543a:	subw	r0, r0, #1074	; 0x432
   1543e:	str.w	r0, [r8]
   15442:	ldr	r0, [r3, #16]
   15444:	bl	14f5c <__hi0bits>
   15448:	rsb	r0, r0, r1, lsl #5
   1544c:	str	r0, [r7, #0]
   1544e:	mov	r0, r9
   15450:	add	sp, #12
   15452:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15456:	add	r0, sp, #4
   15458:	bl	14f9c <__lo0bits>
   1545c:	ldr	r3, [sp, #4]
   1545e:	str.w	r3, [r9, #20]
   15462:	movs	r1, #1
   15464:	adds	r0, #32
   15466:	str.w	r1, [r9, #16]
   1546a:	cmp	r5, #0
   1546c:	beq.n	15436 <__d2b+0x52>
   1546e:	subw	r5, r5, #1075	; 0x433
   15472:	add	r5, r0
   15474:	rsb	r0, r0, #53	; 0x35
   15478:	str.w	r5, [r8]
   1547c:	str	r0, [r7, #0]
   1547e:	mov	r0, r9
   15480:	add	sp, #12
   15482:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15486:	ldmia.w	sp, {r2, r3}
   1548a:	rsb	r1, r0, #32
   1548e:	lsl.w	r1, r3, r1
   15492:	orrs	r2, r1
   15494:	lsrs	r3, r0
   15496:	str	r3, [sp, #4]
   15498:	str.w	r2, [r9, #20]
   1549c:	b.n	15424 <__d2b+0x40>
   1549e:	nop

000154a0 <__ssprint_r>:
   154a0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154a4:	ldr	r3, [r2, #8]
   154a6:	sub	sp, #12
   154a8:	mov	r8, r2
   154aa:	cmp	r3, #0
   154ac:	beq.n	15594 <__ssprint_r+0xf4>
   154ae:	mov	fp, r0
   154b0:	mov.w	r9, #0
   154b4:	ldr	r6, [r2, #0]
   154b6:	ldr	r0, [r1, #0]
   154b8:	ldr	r3, [r1, #8]
   154ba:	mov	r5, r1
   154bc:	mov	r4, r9
   154be:	cmp	r4, #0
   154c0:	beq.n	1554e <__ssprint_r+0xae>
   154c2:	cmp	r4, r3
   154c4:	mov	r7, r3
   154c6:	mov	sl, r3
   154c8:	bcc.n	15558 <__ssprint_r+0xb8>
   154ca:	ldrh	r3, [r5, #12]
   154cc:	tst.w	r3, #1152	; 0x480
   154d0:	beq.n	1552e <__ssprint_r+0x8e>
   154d2:	ldr	r7, [r5, #20]
   154d4:	ldr	r1, [r5, #16]
   154d6:	add.w	r7, r7, r7, lsl #1
   154da:	rsb	sl, r1, r0
   154de:	add.w	r7, r7, r7, lsr #31
   154e2:	adds	r0, r4, #1
   154e4:	asrs	r7, r7, #1
   154e6:	add	r0, sl
   154e8:	cmp	r0, r7
   154ea:	mov	r2, r7
   154ec:	itt	hi
   154ee:	movhi	r7, r0
   154f0:	movhi	r2, r7
   154f2:	lsls	r3, r3, #21
   154f4:	bpl.n	1555e <__ssprint_r+0xbe>
   154f6:	mov	r1, r2
   154f8:	mov	r0, fp
   154fa:	bl	11050 <_malloc_r>
   154fe:	cmp	r0, #0
   15500:	beq.n	15572 <__ssprint_r+0xd2>
   15502:	mov	r2, sl
   15504:	ldr	r1, [r5, #16]
   15506:	str	r0, [sp, #4]
   15508:	bl	e8e8 <memcpy>
   1550c:	ldrh	r2, [r5, #12]
   1550e:	ldr	r3, [sp, #4]
   15510:	bic.w	r2, r2, #1152	; 0x480
   15514:	orr.w	r2, r2, #128	; 0x80
   15518:	strh	r2, [r5, #12]
   1551a:	rsb	r2, sl, r7
   1551e:	add.w	r0, r3, sl
   15522:	str	r7, [r5, #20]
   15524:	str	r3, [r5, #16]
   15526:	str	r0, [r5, #0]
   15528:	str	r2, [r5, #8]
   1552a:	mov	r7, r4
   1552c:	mov	sl, r4
   1552e:	mov	r2, sl
   15530:	mov	r1, r9
   15532:	bl	116f4 <memmove>
   15536:	ldr.w	r2, [r8, #8]
   1553a:	ldr	r3, [r5, #8]
   1553c:	ldr	r0, [r5, #0]
   1553e:	subs	r3, r3, r7
   15540:	add	r0, sl
   15542:	subs	r4, r2, r4
   15544:	str	r3, [r5, #8]
   15546:	str	r0, [r5, #0]
   15548:	str.w	r4, [r8, #8]
   1554c:	cbz	r4, 15594 <__ssprint_r+0xf4>
   1554e:	ldr.w	r9, [r6]
   15552:	ldr	r4, [r6, #4]
   15554:	adds	r6, #8
   15556:	b.n	154be <__ssprint_r+0x1e>
   15558:	mov	r7, r4
   1555a:	mov	sl, r4
   1555c:	b.n	1552e <__ssprint_r+0x8e>
   1555e:	mov	r0, fp
   15560:	bl	11860 <_realloc_r>
   15564:	mov	r3, r0
   15566:	cmp	r0, #0
   15568:	bne.n	1551a <__ssprint_r+0x7a>
   1556a:	ldr	r1, [r5, #16]
   1556c:	mov	r0, fp
   1556e:	bl	14c90 <_free_r>
   15572:	movs	r3, #12
   15574:	str.w	r3, [fp]
   15578:	ldrh	r3, [r5, #12]
   1557a:	movs	r2, #0
   1557c:	orr.w	r3, r3, #64	; 0x40
   15580:	mov.w	r0, #4294967295
   15584:	strh	r3, [r5, #12]
   15586:	str.w	r2, [r8, #8]
   1558a:	str.w	r2, [r8, #4]
   1558e:	add	sp, #12
   15590:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15594:	movs	r0, #0
   15596:	str.w	r0, [r8, #4]
   1559a:	add	sp, #12
   1559c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000155a0 <_vasnprintf_r>:
   155a0:	push	{r4, r5, r6, lr}
   155a2:	mov	r5, r2
   155a4:	sub	sp, #104	; 0x68
   155a6:	ldr	r4, [r2, #0]
   155a8:	cbz	r1, 155ae <_vasnprintf_r+0xe>
   155aa:	cmp	r4, #0
   155ac:	bne.n	155e4 <_vasnprintf_r+0x44>
   155ae:	movs	r4, #0
   155b0:	mov.w	r2, #648	; 0x288
   155b4:	strh.w	r2, [sp, #12]
   155b8:	str	r4, [sp, #0]
   155ba:	str	r4, [sp, #16]
   155bc:	mov	r2, r3
   155be:	movw	r6, #65535	; 0xffff
   155c2:	ldr	r3, [sp, #120]	; 0x78
   155c4:	str	r4, [sp, #8]
   155c6:	mov	r1, sp
   155c8:	str	r4, [sp, #20]
   155ca:	strh.w	r6, [sp, #14]
   155ce:	bl	12418 <_svfprintf_r>
   155d2:	cmp	r0, #0
   155d4:	blt.n	155fa <_vasnprintf_r+0x5a>
   155d6:	ldr	r3, [sp, #0]
   155d8:	str	r0, [r5, #0]
   155da:	movs	r2, #0
   155dc:	strb	r2, [r3, #0]
   155de:	ldr	r0, [sp, #16]
   155e0:	add	sp, #104	; 0x68
   155e2:	pop	{r4, r5, r6, pc}
   155e4:	mov.w	r2, #1544	; 0x608
   155e8:	str	r1, [sp, #0]
   155ea:	str	r1, [sp, #16]
   155ec:	strh.w	r2, [sp, #12]
   155f0:	bge.n	155bc <_vasnprintf_r+0x1c>
   155f2:	movs	r3, #139	; 0x8b
   155f4:	str	r3, [r0, #0]
   155f6:	movs	r0, #0
   155f8:	b.n	155e0 <_vasnprintf_r+0x40>
   155fa:	movs	r0, #0
   155fc:	b.n	155e0 <_vasnprintf_r+0x40>
   155fe:	nop

00015600 <_calloc_r>:
   15600:	push	{r4, lr}
   15602:	mul.w	r1, r2, r1
   15606:	bl	11050 <_malloc_r>
   1560a:	mov	r4, r0
   1560c:	cbz	r0, 15646 <_calloc_r+0x46>
   1560e:	ldr.w	r2, [r0, #-4]
   15612:	bic.w	r2, r2, #3
   15616:	subs	r2, #4
   15618:	cmp	r2, #36	; 0x24
   1561a:	bhi.n	1564e <_calloc_r+0x4e>
   1561c:	cmp	r2, #19
   1561e:	bls.n	1564a <_calloc_r+0x4a>
   15620:	movs	r3, #0
   15622:	cmp	r2, #27
   15624:	str	r3, [r0, #0]
   15626:	str	r3, [r0, #4]
   15628:	bls.n	15658 <_calloc_r+0x58>
   1562a:	cmp	r2, #36	; 0x24
   1562c:	str	r3, [r0, #8]
   1562e:	str	r3, [r0, #12]
   15630:	iteee	ne
   15632:	addne.w	r2, r0, #16
   15636:	streq	r3, [r0, #16]
   15638:	streq	r3, [r0, #20]
   1563a:	addeq.w	r2, r0, #24
   1563e:	movs	r3, #0
   15640:	str	r3, [r2, #0]
   15642:	str	r3, [r2, #4]
   15644:	str	r3, [r2, #8]
   15646:	mov	r0, r4
   15648:	pop	{r4, pc}
   1564a:	mov	r2, r0
   1564c:	b.n	1563e <_calloc_r+0x3e>
   1564e:	movs	r1, #0
   15650:	bl	117bc <memset>
   15654:	mov	r0, r4
   15656:	pop	{r4, pc}
   15658:	add.w	r2, r0, #8
   1565c:	b.n	1563e <_calloc_r+0x3e>
   1565e:	nop

00015660 <vtable for Stream>:
	...
   15668:	}.......m...q...
   15678:	}...}...}...

00015684 <vtable for StreamFile<FsBaseFile, unsigned long long>>:
	...
   1568c:	....E...m.......
   1569c:	............

000156a8 <vtable for FsFile>:
	...
   156b0:	....E...m.......
   156c0:	............

000156cc <vtable for File>:
	...
   156d4:	........m.......
   156e4:	....}.......q...
   156f4:	U...!...}.......
   15704:	................
   15714:	............-...
   15724:	9...q...

0001572c <vtable for SDFile>:
	...
   15734:	........m.......
   15744:	)...}...........
   15754:	....].......1...
   15764:	........1...M...
   15774:	........M...%...
   15784:	!...5.......

00015790 <vtable for SDClass>:
	...
   15798:	M...............
   157a8:	u.......y.......

000157b8 <vtable for LittleFSFile>:
	...
   157c0:	........m.......
   157d0:	....}...........
   157e0:	....I...........
   157f0:	........i...M...
   15800:	................
   15810:	........

00015818 <vtable for LittleFS_RAM>:
	...
   15820:	................
   15830:	....Y...i.......
   15840:	  File    this=%
   15850:	x, f=%x.....  Li
   15860:	ttleFSFile this=
   15870:	%x, refcount=%u.
   15880:	....   SDFile th
   15890:	is=%x, refcount=
   158a0:	%u..........No s
   158b0:	torage..Storage 
   158c0:	%d %d %s ...MTP_
   158d0:	test....test_%d.
   158e0:	txt.This is a te
   158f0:	st line.Setup do
   15900:	ne..sdio....RAM.

00015910 <vtable for MTPStorage_SD>:
	...
   15918:	y...............
   15928:	.............?..
   15938:	.$...$..-%...6..
   15948:	]5......E%...0..
   15958:	=...A ..Y'...(..
   15968:	/mtpindex.dat...
   15978:	/... Disk to Dis
   15988:	k move is not su
   15998:	pported.File Rea
   159a8:	d Error :...%d: 
   159b8:	%d %d %d %d %d %
   159c8:	s...%d: %d %d %d
   159d8:	 %d %d..

000159e0 <supported_op>:
   159e0:	................
   159f0:	................
   15a00:	....

00015a04 <propertyList>:
   15a04:	............A.D.
   15a14:	Teensy..microsof
   15a24:	t.com: 1.0;.PJRC
   15a34:	....1.0.1234....

00015a44 <SPIClass::spi0_hardware>:
   15a44:	<..@............
   15a54:	.....\....'.....
   15a64:	................
   15a74:	................
   15a84:	................
   15a94:	..........-.....
   15aa4:	................
   15ab4:	................
   15ac4:	................
   15ad4:	.. .EXFAT...

00015ae0 <vtable for SdSpiCard>:
	...
   15ae8:	%...)...........
   15af8:	............9...
   15b08:	................
   15b18:	........e...u...
   15b28:	....y...........

00015b38 <vtable for SdioCard>:
	...
   15b40:	}...............
   15b50:	!.......-.......
   15b60:	........)...1...
   15b70:	5...Q...m.......
   15b80:	................
   15b90:	........littlefs
   15ba0:	....

00015ba4 <defaults.6828>:
	...

00015bb0 <rtable.5067>:
   15bb0:	....d.... n;.0.&
   15bc0:	.A.v.QkkXa.M<q.P
   15bd0:	 ...D.........a.
   15be0:	..d.....x.......

00015bf0 <digital_pin_to_info_PGM>:
   15bf0:	@..C@..@D..CD..@
   15c00:	...C...@0..C0..@
   15c10:	4..C4..@...C...@
   15c20:	...C...@...C...@
   15c30:	...C...@...C...@
   15c40:	...C...@...C...@
   15c50:	...C...@...C...@
   15c60:	...C...@...C...@
   15c70:	...C...@...C...@
   15c80:	...C...@...C...@
   15c90:	...C...@...C...@
   15ca0:	...C...@...C...@
   15cb0:	h .Ch..@...C...@
   15cc0:	8..C8..@<..C<..@
   15cd0:	@..C@..@H..CH..@
   15ce0:	L..CL..@(..C(..@
   15cf0:	,..C,..@` .C`..@
   15d00:	d .Cd..@ ..C ..@
   15d10:	$..C$..@(..C(..@
   15d20:	,..C,..@D..CD..@
   15d30:	p..Cp..@t..Ct..@
   15d40:	h..Ch..@P..CP..@
   15d50:	X..CX..@\..C\..@
   15d60:	T..CT..@ ..C ..@
   15d70:	$..C$..@...C...@
   15d80:	...C...@8..C8..@
   15d90:	4..C4..@0..C0..@
   15da0:	<..C<..@,..C,..@
   15db0:	( .C(..@, .C,..@
   15dc0:	. .C...@. .C...@
   15dd0:	. .C...@. .C...@
   15de0:	. .C...@. .C...@

00015df0 <vtable for usb_serial_class>:
	...
   15df8:	................
   15e08:	................
   15e18:	....

00015e1c <usb_endpoint_config_table>:
   15e1c:	........

00015e24 <usb_descriptor_list>:
   15e24:	................
   15e34:	....i.......|...
   15e44:	................
   15e54:	................
   15e64:	................
	...

00015e84 <_global_impure_ptr>:
   15e84:	....C...POSIX...

00015e94 <zeroes.7258>:
   15e94:	0000000000000000
   15ea4:	INF.inf.NAN.nan.
   15eb4:	0123456789ABCDEF
   15ec4:	....0123456789ab
   15ed4:	cdef....(null)..
   15ee4:	0...

00015ee8 <blanks.7257>:
   15ee8:	                

00015ef8 <_ctype_>:
   15ef8:	.         ((((( 
   15f08:	                
   15f18:	 ...............
   15f28:	................
   15f38:	..AAAAAA........
   15f48:	................
   15f58:	..BBBBBB........
   15f68:	................
   15f78:	 ...............
	...
   15ff8:	....Infinity....
   16008:	NaN.....

00016010 <__mprec_tens>:
   16010:	.......?......$@
   16020:	......Y@.....@.@
   16030:	.......@.....j.@
   16040:	.......A......cA
   16050:	.......A....e..A
   16060:	... _..B....vH7B
   16070:	......mB..@..0.B
   16080:	.......B..4&.k.C
   16090:	...7y.AC....W4vC
   160a0:	..Ngm..C.=.`.X.C
   160b0:	@..x...DP.....KD
   160c0:	..M....D.J...-.D
   160d0:	...yCx.D

000160d8 <__mprec_bigtens>:
   160d8:	...7y.AC.n.....F
   160e8:	..?..O8M2.0.Hw.Z
   160f8:	<.s..O.u

00016100 <p05.6087>:
   16100:	........}...

0001610c <_init>:
   1610c:	push	{r3, r4, r5, r6, r7, lr}
   1610e:	nop
   16110:	pop	{r3, r4, r5, r6, r7}
   16112:	pop	{r3}
   16114:	mov	lr, r3
   16116:	bx	lr

00016118 <__init_array_start>:
   16118:	.word	0x00013c4d

0001611c <__frame_dummy_init_array_entry>:
   1611c:	5...M...9_..

Disassembly of section .fini:

00016128 <_fini>:
   16128:	push	{r3, r4, r5, r6, r7, lr}
   1612a:	nop
