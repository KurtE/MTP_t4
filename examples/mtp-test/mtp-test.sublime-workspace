{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"blockDe",
				"BlockDevice"
			],
			[
				"set",
				"setCwv"
			],
			[
				"uin",
				"uint64_t"
			],
			[
				"uint",
				"uint32_t"
			],
			[
				"ARDUINO_",
				"ARDUINO_TEENSY36"
			],
			[
				"objc",
				"object_id"
			],
			[
				"0xff",
				"0xFFFFFFFFUL"
			],
			[
				"ready",
				"readyframe"
			],
			[
				"CUST",
				"CUSTOM_320x480"
			],
			[
				"image_",
				"image_offset_x"
			],
			[
				"frame",
				"frame_buffer"
			],
			[
				"_vsync",
				"_vsyncPin"
			],
			[
				"printf_d",
				"printf_debug_init"
			],
			[
				"trans",
				"_transferWriteFill"
			],
			[
				"Serial",
				"serialEvent1"
			],
			[
				"IRQ",
				"IRQ_PRIORITY"
			],
			[
				"force",
				"force_boot_protocol"
			],
			[
				"control",
				"control_queued"
			],
			[
				"id",
				"idVendor"
			],
			[
				"VA",
				"VALID_PAGE4"
			],
			[
				"oldpage",
				"oldpageaddress_end"
			],
			[
				"valid",
				"validpage"
			],
			[
				"PAGE_",
				"PAGE_SIZE"
			],
			[
				"address",
				"addressvalue"
			],
			[
				"addres",
				"addressvalue"
			],
			[
				"Vir",
				"VirtAddress"
			],
			[
				"pack",
				"packet_length_out"
			],
			[
				"length",
				"length_before_crc"
			],
			[
				"pa",
				"packet_length_in"
			],
			[
				"rxpacket",
				"rxpacket_in"
			],
			[
				"read",
				"read_Rx_impl"
			],
			[
				"rxp",
				"rxpacket_in"
			],
			[
				"len",
				"length_adjust"
			],
			[
				"tx",
				"txpacket_in"
			],
			[
				"COMM",
				"COMM_TX_FAIL"
			],
			[
				"txp",
				"txpacket"
			],
			[
				"txP",
				"txpacket_in"
			],
			[
				"mod",
				"model_number"
			],
			[
				"item",
				"item_pointer"
			],
			[
				"count",
				"count_ids_"
			],
			[
				"add",
				"add_if_not_found"
			],
			[
				"fi",
				"findParam"
			],
			[
				"ite",
				"item_buffer_pointer"
			],
			[
				"digit",
				"digitalWrite"
			],
			[
				"LE",
				"LED_BUILTIN"
			],
			[
				"ser",
				"servo_index"
			],
			[
				"report",
				"report_any_dxl_errors"
			],
			[
				"sti",
				"still_moving"
			],
			[
				"servo",
				"servo_list"
			],
			[
				"cou",
				"count_ids_"
			],
			[
				"nex",
				"next_item_pointer"
			],
			[
				"clear",
				"clearParam"
			],
			[
				"data",
				"data_length_"
			],
			[
				"buffer",
				"buffer_size"
			],
			[
				"return",
				"return_value"
			],
			[
				"ti",
				"timeout_ms"
			],
			[
				"buff",
				"buffer_size"
			],
			[
				"SER",
				"SERIAL_BUFFER_SIZE"
			],
			[
				"_",
				"_uart_num"
			],
			[
				"SERI",
				"SERIAL_TX_BUFFER_SIZE"
			],
			[
				"cb",
				"cbLeft"
			],
			[
				"tx_b",
				"tx_buffer_aligned"
			],
			[
				"size",
				"size_t"
			],
			[
				"time",
				"time_since_last_msg_received"
			],
			[
				"ILI9341_",
				"ILI9341_YELLOW"
			],
			[
				"pu",
				"publishVelocityCmd"
			],
			[
				"sta",
				"state_changed_"
			],
			[
				"Tur",
				"turtlebot3_msgs"
			],
			[
				"advertis",
				"advertised_"
			],
			[
				"ILI",
				"ILI9341_t3n"
			],
			[
				"_dma",
				"_dma_count_remaining"
			],
			[
				"sou",
				"sourceBuffer"
			],
			[
				"0x0",
				"0x041b"
			],
			[
				"g_serv",
				"g_servo_index_voltage"
			],
			[
				"DXL_GOA",
				"DXL_X_GOAL_VELOCITY"
			],
			[
				"Re",
				"ReportAnyErrors"
			],
			[
				"servo_",
				"servo_info_t"
			]
		]
	},
	"buffers":
	[
		{
			"file": "mtp-test.ino",
			"settings":
			{
				"buffer_size": 29863,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/kurte/Documents/Arduino/libraries/UsbMscFat/src/PFsLib/PFsVolume.cpp",
			"settings":
			{
				"buffer_size": 16220,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/kurte/Documents/Arduino/libraries/MTP_t4/src/Storage.cpp",
			"settings":
			{
				"buffer_size": 23882,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "// Storage.h - Teensy MTP Responder library\n// Copyright (C) 2017 Fredrik Hubinette <hubbe@hubbe.net>\n//\n// With updates from MichaelMC and Yoong Hor Meng <yoonghm@gmail.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n// modified for SDFS by WMXZ\n// Nov 2020 adapted to SdFat-beta / SD combo\n// 19-nov-2020 adapted to FS\n\n#ifndef Storage_H\n#define Storage_H\n\n#include \"core_pins.h\"\n\n#include \"FS.h\"\n#ifndef FILE_WRITE_BEGIN\n  #define FILE_WRITE_BEGIN 2\n#endif\n\n\n#define MTPD_MAX_FILESYSTEMS  20\n#ifndef MAX_FILENAME_LEN\n  #define MAX_FILENAME_LEN 256\n#endif\n\nclass  MTPStorageInterfaceCB {\n  \n}\n\nclass mSD_Base\n{\n  public:\n    mSD_Base() {\n      fsCount = 0;\n    }\n\n    uint32_t sd_addFilesystem(FS &fs, const char *name, const char *volumeID) {\n      if (fsCount < MTPD_MAX_FILESYSTEMS) {\n        sd_name[fsCount] = name;\n        sd_volumeID[fsCount] = volumeID;\n        sdx[fsCount] = &fs;\n        Serial.printf(\"sd_addFilesystem: %d %x %s\\n\", fsCount, (uint32_t)&fs, name);\n        return fsCount++;\n      }\n      return 0xFFFFFFFFUL;  // no room left\n    }\n\n    bool sd_removeFilesystem(uint32_t store)\n    {\n      if ((store < (uint32_t)fsCount) && (sd_name[store])) {\n        sd_name[store] = nullptr;\n        sd_volumeID[store] = nullptr;\n        sdx[store] = nullptr;\n        return true;\n      }\n      return false;;\n\n    }\n\n    uint32_t sd_getStoreID( const char *name)\n    {\n      for(int ii=0; ii<fsCount;ii++) if(!strcmp(name,sd_name[ii])) return ii;\n      return 0xFFFFFFFFUL;\n    }\n    \n    const char *sd_getStoreName(uint32_t store)\n    {\n      if (store < (uint32_t)fsCount) return sd_name[store];\n      return nullptr;\n    } \n    const char *sd_getVolumeID(uint32_t store)\n    {\n      if (store >= (uint32_t)fsCount) return nullptr;\n\n      return sd_volumeID[store]? sd_volumeID[store] : \"\";\n    }\n\n    FS*  sd_getStoreFS(uint32_t store)\n    {\n      if (store < (uint32_t)fsCount) return sdx[store];\n      return nullptr;\n    } \n\n    uint32_t sd_getFSCount(void) {return fsCount;}\n    const char *sd_getFSName(uint32_t store) { return sd_name[store];}\n\n    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }\n    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }\n    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }\n    bool sd_remove(uint32_t store, const char *filename) { return sdx[store]->remove(filename);  }\n    bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }\n\n    uint64_t sd_totalSize(uint32_t store) { return sdx[store]->totalSize();  }\n    uint64_t sd_usedSize(uint32_t store)  { return sdx[store]->usedSize();  }\n\n    bool sd_copy(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename);\n    bool sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename);\n\n  private:\n    int fsCount;\n    const char *sd_name[MTPD_MAX_FILESYSTEMS];\n    const char *sd_volumeID[MTPD_MAX_FILESYSTEMS];\n    FS *sdx[MTPD_MAX_FILESYSTEMS];\n};\n\n// This interface lets the MTP responder interface any storage.\n// We'll need to give the MTP responder a pointer to one of these.\nclass MTPStorageInterface {\npublic:\n  virtual uint32_t addFilesystem(FS &filesystem, const char *name, const char *volumeID=nullptr)=0;\n  virtual bool removeFilesystem(uint32_t storage)=0;\n  virtual uint32_t get_FSCount(void) = 0;\n  virtual const char *get_FSName(uint32_t storage) = 0;\n  virtual const char *get_volumeID(uint32_t storage) = 0;\n\n  virtual uint64_t totalSize(uint32_t storage) = 0;\n  virtual uint64_t usedSize(uint32_t storage) = 0;\n\n  // Return true if this storage is read-only\n  virtual bool readonly(uint32_t storage) = 0;\n\n  // Does it have directories?\n  virtual bool has_directories(uint32_t storage) = 0;\n\n  virtual void StartGetObjectHandles(uint32_t storage, uint32_t parent) = 0;\n  virtual uint32_t GetNextObjectHandle(uint32_t  storage) = 0;\n\n  virtual void GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store) = 0;\n  virtual uint32_t GetSize(uint32_t handle) = 0;\n\n  virtual uint32_t Create(uint32_t storage, uint32_t parent, bool folder, const char* filename) = 0;\n  virtual void read(uint32_t handle, uint32_t pos, char* buffer, uint32_t bytes) = 0;\n  virtual size_t write(const char* data, uint32_t size);\n  virtual void close() = 0;\n  virtual bool DeleteObject(uint32_t object) = 0;\n  virtual void CloseIndex() = 0;\n\n  virtual void ResetIndex() = 0;\n  virtual bool rename(uint32_t handle, const char* name) = 0 ;\n  virtual bool move(uint32_t handle, uint32_t newStorage, uint32_t newParent) = 0 ;\n  virtual uint32_t copy(uint32_t handle, uint32_t newStorage, uint32_t newParent) = 0 ;\n\n  virtual bool CopyFiles(uint32_t storage, uint32_t handle, uint32_t newHandle) = 0;\n  virtual uint32_t MapFileNameToIndex(uint32_t storage, const char *pathname,  bool addLastNode=false, bool *node_added=nullptr) = 0;\n  virtual uint32_t openFileIndex(void) = 0;\n\n};\n\n  struct Record \n  { uint32_t parent;\n    uint32_t child;  // size stored here for files\n    uint32_t sibling;\n    uint8_t isdir;\n    uint8_t scanned;\n    uint16_t store;  // index int physical storage (0 ... num_storages-1)\n    char name[MAX_FILENAME_LEN];\n\n    \n  };\n\n  void mtp_yield(void);\n\n\n// Storage implementation for SD. SD needs to be already initialized.\nclass MTPStorage_SD : public MTPStorageInterface, mSD_Base\n{ \npublic:\n  uint32_t addFilesystem(FS &fs, const char *name, const char *volumeID=nullptr) {return sd_addFilesystem(fs, name, volumeID);}\n  bool removeFilesystem(uint32_t storage) {return sd_removeFilesystem(storage);}\n  void dumpIndexList(void);\n  uint32_t getStoreID(const char *name) {return sd_getStoreID(name);}\n  uint32_t getFSCount(void) {return sd_getFSCount();}\n  const char *get_volumeID(uint32_t store) {return sd_getVolumeID(store);}\n  const char *getStoreName(uint32_t store) {return sd_getStoreName(store);} \n  FS* getStoreFS(uint32_t store) {return sd_getStoreFS(store);}\n  uint32_t openFileIndex(void) {return open_file_;}\nprivate:\n  File index_;\n  File file_;\n  File child_;\n\n  int num_storage = 0;\n  const char **sd_str = 0;\n  \n  uint32_t mode_ = 0;\n  uint32_t open_file_ = 0xFFFFFFFEUL;\n\n  bool readonly(uint32_t storage);\n  bool has_directories(uint32_t storage) ;\n  \n  uint64_t totalSize(uint32_t storage) ;\n  uint64_t usedSize(uint32_t storage) ;\n\n  void CloseIndex() ;\n  void OpenIndex() ;\n  void GenerateIndex(uint32_t storage) ;\n  void ScanDir(uint32_t storage, uint32_t i) ;\n  void ScanAll(uint32_t storage) ;\n\n  void removeFile(uint32_t store, char *filename);\n\n  uint32_t index_entries_ = 0;\n  bool index_generated = false;\n\n  bool all_scanned_ = false;\n  uint32_t next_;\n  bool follow_sibling_;\n\n  void WriteIndexRecord(uint32_t i, const Record& r) ;\n  uint32_t AppendIndexRecord(const Record& r) ;\n  Record ReadIndexRecord(uint32_t i) ;\n  uint16_t ConstructFilename(int i, char* out, int len) ;\n  void OpenFileByIndex(uint32_t i, uint32_t mode = FILE_READ) ;\n  void printRecord(int h, Record *p);\n  void printRecordIncludeName(int h, Record *p);\n\n  uint32_t get_FSCount(void) {return sd_getFSCount();}\n  const char *get_FSName(uint32_t storage) { return sd_getFSName(storage);}\n\n  void StartGetObjectHandles(uint32_t storage, uint32_t parent) override ;\n  uint32_t GetNextObjectHandle(uint32_t  storage) override ;\n  void GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store) override ;\n  uint32_t GetSize(uint32_t handle) override;\n  void read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes) override ;\n  bool DeleteObject(uint32_t object) override ;\n\n  uint32_t Create(uint32_t storage, uint32_t parent,  bool folder, const char* filename) override ;\n\n  size_t write(const char* data, uint32_t bytes) override ;\n  void close() override ;\n\n  bool rename(uint32_t handle, const char* name) override ;\n  bool move(uint32_t handle, uint32_t newStorage, uint32_t newParent) override ;\n  uint32_t copy(uint32_t handle, uint32_t newStorage, uint32_t newParent) override ;\n\n  bool CopyFiles(uint32_t storage, uint32_t handle, uint32_t newHandle) override ;\n  void ResetIndex() override ;\n  uint32_t MapFileNameToIndex(uint32_t storage, const char *pathname, bool addLastNode=false, bool *node_added=nullptr) override; \n};\n\n#endif\n",
			"file": "/C/Users/kurte/Documents/Arduino/libraries/MTP_t4/src/Storage.h",
			"file_size": 9647,
			"file_write_time": 132587684433287562,
			"settings":
			{
				"buffer_size": 9429,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/kurte/Documents/Arduino/libraries/UsbMscFat/src/PFsLib/PFsVolume.h",
			"settings":
			{
				"buffer_size": 13652,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/C/Users/kurte/Documents/Arduino/libraries/UsbMscFat/src/USBMSCDevice.h",
			"settings":
			{
				"buffer_size": 4843,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/kurte/Documents/Arduino/libraries/MTP_t4/src/MTP.cpp",
			"settings":
			{
				"buffer_size": 79859,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/kurte/Documents/Arduino/libraries/MTP_t4/src/MTP.h",
			"settings":
			{
				"buffer_size": 6640,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/kurte/Documents/Arduino/libraries/USBHost_t36/MassStorageDriver.cpp",
			"settings":
			{
				"buffer_size": 22437,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/User/Teensy.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/User/Teensy.sublime-build",
					""
				],
				[
					"Packages/User/Teensy.sublime-build",
					"Clean"
				],
				[
					"Packages/User/Teensy.sublime-build",
					"New Sketch"
				],
				[
					"Packages/User/Teensy.sublime-build",
					"Verify"
				],
				[
					"Packages/User/Teensy.sublime-build",
					"Tools Set"
				]
			],
			[
				"Packages/User/Teensy.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"package control remov",
				"Package Control: Remove Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"s",
				"Sort Lines"
			],
			[
				"packa",
				"Package Control: Install Package"
			]
		],
		"width": 452.0
	},
	"console":
	{
		"height": 185.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/D/GitHub/MTP_t4/examples/mtp-test",
		"/C/Users/kurte/Documents/Arduino/libraries/MTP_t4",
		"/C/Users/kurte/Documents/Arduino/libraries/MTP_t4/modifications_for_cores_teensy4",
		"/C/Users/kurte/Documents/Arduino/libraries/MTP_t4/src",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat/src",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat/src/common",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat/src/ExFatLib",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat/src/FatLib",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat/src/FsLib",
		"/C/Users/kurte/Documents/Arduino/libraries/USBHost_t36",
		"/C/Users/kurte/Documents/Arduino/libraries/USBHost_t36/examples",
		"/C/Users/kurte/Documents/Arduino/libraries/USBHost_t36/examples/Serial",
		"/C/Users/kurte/Documents/Arduino/libraries/USBHost_t36/examples/Serial/Mouse",
		"/C/Users/kurte/Documents/Arduino/libraries/USBHost_t36/utility",
		"/C/Users/kurte/Documents/Arduino/libraries/UsbMscFat",
		"/C/Users/kurte/Documents/Arduino/libraries/UsbMscFat/src",
		"/C/Users/kurte/Documents/Arduino/libraries/UsbMscFat/src/PFsLib"
	],
	"file_history":
	[
		"/C/Users/kurte/Documents/Arduino/libraries/MTP_t4/src/Storage.h",
		"/C/Users/kurte/Documents/Arduino/libraries/UsbMscFat/src/USBmscInterface.h",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat/src/SdFatConfig.h",
		"/C/Users/kurte/Documents/Arduino/libraries/UsbMscFat/src/USBmsc.h",
		"/C/Users/kurte/Documents/Arduino/libraries/UsbMscFat/src/USBFat.h",
		"/C/Users/kurte/Documents/Arduino/libraries/UsbMscFat/src/mscFS.h",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat/src/common/FsDateTime.h",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat/src/ExFatLib/ExFatFile.cpp",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat/src/FatLib/FatFile.cpp",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat/src/FatLib/FatFile.h",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat/src/common/FsStructs.h",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SD/src/SD.h",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat/src/FatLib/FatPartition.h",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat/src/FatLib/FatPartition.cpp",
		"/C/Users/kurte/Documents/Arduino/libraries/LittleFS/src/LittleFS_NAND.cpp",
		"/C/Users/kurte/Documents/Arduino/libraries/USBHost_t36/USBHost_t36.h",
		"/C/Users/kurte/Documents/Arduino/libraries/UsbMscFat/src/USBmscDevice.cpp",
		"/C/Users/kurte/Documents/Arduino/libraries/UsbMscFat/src/USBMSCDevice.h",
		"/C/Users/kurte/Documents/Arduino/libraries/UsbMscFat/src/PFsLib/PFsVolume.h",
		"/C/Users/kurte/Documents/Arduino/libraries/UsbMscFat/src/PFsLib/PFsVolume.cpp",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat/src/ExFatLib/ExFatVolume.h",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat/src/ExFatLib/ExFatPartition.cpp",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat/src/ExFatLib/ExFatPartition.h",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat/src/common/FsCache.h",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat/src/common/FsCache.cpp",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat/src/FatLib/FatVolume.h",
		"/C/Users/kurte/Desktop/foo.txt",
		"/C/Users/kurte/Documents/Arduino/libraries/MTP_t4/examples/mtp-test/mtp-test.ino",
		"/C/Users/kurte/Documents/Arduino/libraries/USBHost_t36/examples/mscTesting/mscTesting.ino",
		"/C/Users/kurte/Documents/Arduino/libraries/UsbMscFat/examples/copyFilesUSB/copyFilesUSB.ino",
		"/C/Users/kurte/AppData/Local/Temp/device_820t.txt",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat/src/ExFatLib/ExFatVolume.cpp",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat/src/common/ArduinoFiles.h",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/Time/time.h",
		"/C/Users/kurte/AppData/Local/Temp/device.txt",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat/src/FsLib/FsFile.h",
		"/C/Users/kurte/Documents/Arduino/libraries/USBHost_t36/MassStorageDriver.cpp",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat/src/FsLib/FsVolume.cpp",
		"/C/Users/kurte/Documents/Arduino/libraries/MTP_t4/src/MTP.h",
		"/C/Users/kurte/Documents/Arduino/libraries/USBHost_t36/antplus.cpp",
		"/C/Users/kurte/Documents/Arduino/libraries/USBHost_t36/enumeration.cpp",
		"/C/Users/kurte/Documents/Arduino/libraries/MTP_t4/src/MTP.cpp",
		"/C/Users/kurte/Documents/Arduino/libraries/MTP_t4/src/Storage.cpp",
		"/D/GitHub/MTP_t4/examples/mtp-test/mtp-test.ino",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat/examples/SdFormatter/SdFormatter.ino",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat/examples/SdInfo/SdInfo.ino",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat/src/common/BlockDeviceInterface.h",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat/src/SdCard/SdioCard.h",
		"/C/Users/kurte/Documents/Arduino/libraries/UsbMscFat/examples/SdInfoUSB/SdInfoUSB.ino",
		"/C/Users/kurte/Documents/Arduino/libraries/UsbMscFat/src/mscFS.cpp",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat/src/FatLib/FatDbg.cpp",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat/src/sdios.h",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat/src/SdCard/SdSpiCard.h",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat/src/SdCard/SdSpiCard.cpp",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat/src/SdCard/SdioTeensy.cpp",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/USBHost_t36/MassStorageDriver.cpp",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat/src/common/FsApiConstants.h",
		"/C/Users/kurte/Documents/Arduino/libraries/USBHost_t36/utility/msc.h",
		"/C/arduino-1.8.13/hardware/teensy/avr/cores/teensy4/FS.h",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat/src/ExFatLib/ExFatFilePrint.cpp",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat/src/FsLib/FsVolume.h",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat/src/ExFatLib/ExFatFile.h",
		"/C/arduino-1.8.13/hardware/teensy/avr/libraries/SdFat/src/FatLib/FatFileSFN.cpp",
		"/D/GitHub/MTP_t4/examples/mtp-test/mtp-test.sublime-project",
		"/D/GitHub/MTP_t4/examples/mtp-test/Compile.cmd",
		"/D/GitHub/cores/teensy4/FS.h",
		"/C/Users/kurte/Documents/Arduino/libraries/MTP_t4/modifications_for_cores_teensy4/usb_desc.h",
		"/C/Users/kurte/Documents/Arduino/libraries/LittleFS/src/littlefs/lfs.c",
		"/C/Users/kurte/Documents/Arduino/libraries/SdFs/src/FatLib/FatFile.h",
		"/C/Users/kurte/Documents/Arduino/libraries/SdFs/src/ExFatLib/ExFatFile.h",
		"/C/Users/kurte/Documents/Arduino/libraries/SdFs/src/ExFatLib/ExFatFile.cpp",
		"/C/Users/kurte/Documents/Arduino/libraries/SdFs/src/common/ArduinoFiles.h",
		"/C/Users/kurte/Documents/Arduino/libraries/SdFs/src/FatLib/FatVolume.h",
		"/C/Users/kurte/Documents/Arduino/libraries/LittleFS/src/LittleFS.cpp",
		"/C/arduino-1.8.13/hardware/teensy/avr/cores/teensy4/wiring.h",
		"/D/GitHub/Tset/TSet.cmd",
		"/C/Users/kurte/Desktop/mtp-test/mtp-test.ino",
		"/D/GitHub/Teensy3.1-Breakout-Boards/Teensy Shield with Arduino Headers/foo.bat",
		"/D/GitHub/Teensy3.1-Breakout-Boards/T4-T36-Breakout/foo.bat",
		"/C/Users/kurte/AppData/Local/Temp/wz2a25/mtp-test.ino",
		"/C/Users/kurte/AppData/Local/Temp/wzbfb4/mtp-test.ino",
		"/C/Users/kurte/Documents/Arduino/libraries/SD/src/SD.h",
		"/C/Users/kurte/Documents/Arduino/libraries/LittleFS/src/LittleFS.h",
		"/C/arduino-1.8.10/hardware/teensy/avr/libraries/SD/examples/CardInfo/CardInfo.ino",
		"/C/Users/kurte/Desktop/MTP-master/src/MTP.cpp",
		"/C/Users/kurte/Desktop/MTP-master/mtp-test.ino",
		"/C/Users/kurte/Desktop/MTP-master/src/MTP.h",
		"/C/Users/kurte/Desktop/MTP-master/src/Storage.cpp",
		"/C/Users/kurte/Desktop/MTP-master/src/Storage.h",
		"/C/Users/kurte/Documents/Arduino/libraries/MTP_t4/src/Storage.cpp.bak",
		"/D/GitHub/MTP_t4_WMXZ/examples/mtp-test/mtp-test.ino",
		"/C/Users/kurte/Documents/Arduino/libraries/MTP_t4/src/Storage.h.bak",
		"/C/Users/kurte/Documents/Arduino/libraries/LittleFS/src/LittleFS_NAND.h",
		"/C/arduino-1.8.13/hardware/teensy/avr/cores/teensy4/usb_mtp.c",
		"/D/GitHub/cores/teensy4/usb_mtp.h",
		"/D/GitHub/cores/teensy4/usb_mtp.c",
		"/C/arduino-1.8.13/hardware/teensy/avr/cores/teensy4/usb_rawhid.c",
		"/C/arduino-1.8.13/hardware/teensy/avr/cores/teensy4/Stream.cpp",
		"/C/arduino-1.8.13/hardware/teensy/avr/cores/teensy4/usb_midi.c",
		"/C/arduino-1.8.13/hardware/teensy/avr/cores/teensy4/usb_flightsim.cpp",
		"/C/arduino-1.8.13/hardware/teensy/avr/cores/teensy4/usb_seremu.c",
		"/C/arduino-1.8.13/hardware/teensy/avr/cores/teensy3/usb_desc.c",
		"/C/arduino-1.8.13/hardware/teensy/avr/cores/teensy3/usb_desc.h",
		"/C/arduino-1.8.13/hardware/teensy/avr/cores/teensy4/yield.cpp",
		"/C/arduino-1.8.13/hardware/teensy/avr/cores/teensy4/usb_serial.c",
		"/C/arduino-1.8.13/hardware/teensy/avr/cores/teensy4/debug/printf.h",
		"/C/arduino-1.8.13/hardware/teensy/avr/cores/teensy4/debugprintf.c",
		"/C/arduino-1.8.13/hardware/teensy/avr/cores/teensy4/usb_desc.c",
		"/C/arduino-1.8.13/hardware/teensy/avr/cores/teensy4/usb_desc.h",
		"/C/arduino-1.8.13/hardware/teensy/avr/cores/teensy4/usb_mtp.h",
		"/C/arduino-1.8.13/hardware/teensy/avr/cores/teensy4/pins_arduino.h",
		"/C/arduino-1.8.13/hardware/teensy/avr/cores/teensy4/usb_audio.h",
		"/C/arduino-1.8.13/hardware/teensy/avr/cores/teensy4/usb_dev.h",
		"/C/arduino-1.8.13/hardware/teensy/avr/cores/teensy4/EventResponder.h",
		"/C/arduino-1.8.13/hardware/teensy/avr/cores/teensy4/EventResponder.cpp",
		"/C/arduino-1.8.13/hardware/teensy/avr/cores_release/teensy4/EventResponder.h",
		"/C/Users/kurte/Documents/Arduino/Teensy Tests/CSI_41_OV7670_ILI/CSI_41_OV7670_ILI.sublime-project",
		"/C/arduino-1.8.13/hardware/tools/arm/arm-none-eabi/include/sys/stat.h",
		"/C/Users/kurte/Documents/Arduino/libraries/ILI9341_t3n/keywords.txt",
		"/C/Users/kurte/Documents/Arduino/Teensy Tests/CSI_41_main/CSI_41_main.sublime-project",
		"/C/Users/kurte/Documents/Arduino/libraries/ILI9341_t3n/examples/DemoSauce/TwistyText.h",
		"/C/Users/kurte/Documents/Arduino/libraries/ILI9341_t3n/examples/DemoSauce/TransitionSquares.h",
		"/C/Users/kurte/Documents/Arduino/libraries/ILI9341_t3n/examples/DemoSauce/TransitionDither.h",
		"/C/Users/kurte/Documents/Arduino/libraries/ILI9341_t3n/examples/DemoSauce/PlasmaYellow.h",
		"/C/Users/kurte/Documents/Arduino/libraries/ILI9341_t3n/examples/DemoSauce/PlasmaCloud.h",
		"/C/Users/kurte/Documents/Arduino/libraries/ILI9341_t3n/src/ILI9341_t3n.h",
		"/C/Users/kurte/AppData/Local/Temp/arduino_build_CSI_41_main.ino/sketch/CSI_41.cpp",
		"/C/Users/kurte/AppData/Local/Temp/arduino_build_CSI_41_main.ino/sketch/OV7670_MB.cpp"
	],
	"find":
	{
		"height": 41.0
	},
	"find_in_files":
	{
		"height": 131.0,
		"where_history":
		[
			"C:\\arduino-1.8.13\\hardware\\teensy\\avr\\libraries\\SdFat,-*.html,-*.ino,-*.js",
			"C:\\arduino-1.8.13\\hardware\\teensy\\avr\\libraries\\SdFat,-*.html,-*.ino",
			"-*.html,-*.js",
			"C:\\Users\\kurte\\Documents\\Arduino\\libraries\\MTP_t4\\src",
			"C:\\arduino-1.8.13\\hardware\\teensy\\avr\\libraries\\SdFat,-*.html,-*.ino",
			"C:\\arduino-1.8.13\\hardware\\teensy\\avr\\libraries\\SdFat",
			"-*.html,-*.js",
			"-*.html;-*.js",
			"",
			"C:\\Users\\kurte\\Documents\\Arduino\\libraries\\UsbMscFat",
			"-*.html,-*.js",
			"-*.html",
			"",
			"C:\\Users\\kurte\\Documents\\Arduino\\libraries\\UsbMscFat\\src,C:\\users\\kurte\\documents\\arduino\\libraries\\usbhost_t36",
			"C:\\Users\\kurte\\Documents\\Arduino\\libraries\\UsbMscFat\\src,C:\\arduino-1.8.13\\hardware\\teensy\\avr\\libraries\\USBHost_t36",
			"C:\\Users\\kurte\\Documents\\Arduino\\libraries\\UsbMscFat\\src",
			"C:\\arduino-1.8.13\\hardware\\teensy\\avr\\libraries\\SdFat\\src",
			"",
			"C:\\Users\\kurte\\Documents\\Arduino\\libraries\\SdFs\\src",
			"C:\\Users\\kurte\\Documents\\Arduino\\libraries\\SdFs",
			"",
			"C:\\Users\\kurte\\Documents\\Arduino\\libraries\\LittleFS",
			"C:\\Users\\kurte\\Documents\\Arduino\\libraries\\MTP_t4\\src",
			"",
			"C:\\Users\\kurte\\Documents\\Arduino\\libraries\\SdFs\\src",
			"C:\\Users\\kurte\\Documents\\Arduino\\libraries\\SdFs",
			"C:\\Users\\kurte\\Documents\\Arduino\\libraries\\SD\\src",
			"",
			"C:\\Users\\kurte\\Documents\\Arduino\\libraries\\LittleFS",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"FORMAT",
			"format",
			"isroot32",
			"next",
			"exfat",
			"root",
			"BpbFat16_t",
			"rootDirEntryCount",
			"root",
			"readsector",
			"read",
			"readsector",
			"root",
			"biosparameterblock",
			"temp",
			"tmpdir",
			"trailsignature",
			"FsDateTime",
			"datetime",
			"extern",
			"dateTime",
			"write",
			"memset",
			"time",
			"tune",
			"seek",
			"cb",
			"open",
			"create",
			"dump_hexbytes",
			"return",
			"dump",
			"getpartitionvolumelabel",
			"volume",
			"getusbpartitionvolume",
			"vol.begin",
			"usbbase",
			"UsbBase::mscBegin",
			"m_USBmscDrive",
			"m_usbmscdrive",
			"begin",
			"callback",
			"USBMSCDevice",
			"USBMscInterface",
			"begin",
			"m_usbmscdrive",
			"MSCClass",
			"pfsvolume",
			"partVol.",
			"buf",
			"name",
			"vol",
			"updateFreeClusterCount",
			"updatefreeclustercount",
			"freecluster",
			"pinmode",
			"store2storage",
			"writestorageids",
			"map",
			"storeid",
			"map",
			"nao",
			"yield",
			"task",
			"hex_dump",
			"m_datacache",
			"PFSVolume::begin",
			"driveavailable",
			"checkConnectedInitialized",
			"msdriveinfo",
			"msdriveinfo.connected",
			"mscinit",
			"dbgprint",
			"\n  ",
			"m_USBmscFactory",
			"fter usbDriveBegin",
			"mbrdmp",
			"valume",
			"print_hexbytes",
			"setup",
			"setyo",
			"init",
			"UsbFs",
			"YsbFs",
			"PFsVolume",
			"usbbase",
			"template",
			"UsbBase::mscBegin",
			"hid",
			"human",
			"myusb.begin",
			"myusb",
			"initializing usb",
			"msReadBlocks",
			"mbrreadblocks",
			"dmp(",
			"msc_storage_index",
			"iip",
			"iio",
			"iim",
			"ii",
			"thisdrive",
			"pdrv",
			"usbbase",
			"pdrive",
			"msdrive",
			"pdriver",
			"dmp",
			"serial.print",
			"serial",
			"mscontroller",
			"mscdevice",
			"usbmscinterface",
			"BlockDeviceInterface",
			"msdrive",
			"mbrdmp",
			"checkusband",
			"volume ",
			"volumelabel",
			"changed",
			"MSCFAT_BASE",
			"PFsVolume",
			"volumelabel",
			"mbrdmp",
			"msc_fat",
			"msc_storage_index",
			"public File",
			"basefile"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"m_fVol->",
			"index_drive_partition",
			"index_msc",
			"index_usb_partition",
			"index_usb_drive",
			"checkUSBandSDIOStatus",
			"checkUSBandSDCardStatus",
			"checkUsbandSDCardStatus",
			"snprintf(filename, sizeof(filename),",
			"[ii]",
			"USE_MSC_FAT > 0",
			"\"..\\T41_LSS\\",
			"write",
			"Write",
			"event_responder_cycle_",
			"DISK_BUFFER_SIZE",
			"buffer_write_file_index_",
			"buffer_receive_index_",
			"total_buffer_size_",
			"YIELD_WRITE_SIZE",
			"read_on_yield_writes",
			"disk_buffer_",
			"$1",
			"total_bytes_written_",
			"sendObject_buffer_ptr_",
			"receive_event_elaped_mills_",
			"receive_disk_pos_",
			"receive_count_remaining_",
			"receive_eventresponder_",
			"big_buffer_",
			"big_buffer_ptr_",
			"buffer_receive_pointer_",
			"buffer_write_file_pointer_",
			"printf",
			"$1",
			"big_buffer_size",
			"big_buffer_ptr",
			"next_file_index_to_add",
			"path_parser",
			"ReadAndEchoSerialChar()"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 6,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "mtp-test.ino",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29863,
						"regions":
						{
							"bookmarks":
							{
								"flags": 144,
								"icon": "bookmark",
								"regions":
								[
									[
										4571,
										4571
									],
									[
										19043,
										19043
									]
								],
								"scope": "bookmarks"
							}
						},
						"selection":
						[
							[
								10299,
								10299
							]
						],
						"settings":
						{
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5880.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/C/Users/kurte/Documents/Arduino/libraries/UsbMscFat/src/PFsLib/PFsVolume.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16220,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2296.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/C/Users/kurte/Documents/Arduino/libraries/MTP_t4/src/Storage.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 23882,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/C/Users/kurte/Documents/Arduino/libraries/MTP_t4/src/Storage.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9429,
						"regions":
						{
						},
						"selection":
						[
							[
								1625,
								1625
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 800.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/C/Users/kurte/Documents/Arduino/libraries/UsbMscFat/src/PFsLib/PFsVolume.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13652,
						"regions":
						{
						},
						"selection":
						[
							[
								6833,
								6839
							]
						],
						"settings":
						{
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3861.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/C/Users/kurte/Documents/Arduino/libraries/UsbMscFat/src/USBMSCDevice.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4843,
						"regions":
						{
						},
						"selection":
						[
							[
								1436,
								1436
							]
						],
						"settings":
						{
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 140.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/C/Users/kurte/Documents/Arduino/libraries/MTP_t4/src/MTP.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 79859,
						"regions":
						{
						},
						"selection":
						[
							[
								34384,
								34384
							]
						],
						"settings":
						{
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 17648.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/C/Users/kurte/Documents/Arduino/libraries/MTP_t4/src/MTP.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6640,
						"regions":
						{
						},
						"selection":
						[
							[
								5762,
								5762
							]
						],
						"settings":
						{
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2882.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/C/Users/kurte/Documents/Arduino/libraries/USBHost_t36/MassStorageDriver.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22437,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 6775.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 29.0
	},
	"input":
	{
		"height": 45.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 150.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 315.0
	},
	"pinned_build_system": "Packages/User/Teensy.sublime-build",
	"project": "mtp-test.sublime-project",
	"replace":
	{
		"height": 54.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"sdios",
				"SdFat\\src\\sdios.h"
			],
			[
				"Usbfs",
				"UsbMscFat\\src\\mscFS.h"
			],
			[
				"new",
				"opencr\\cores\\arduino\\new.cpp"
			],
			[
				"dyn",
				"opencr\\libraries\\DynamixelWorkbench\\src\\dynamixel_workbench_toolbox\\dynamixel_driver.cpp"
			],
			[
				"dig",
				"cores\\arduino\\digitalWriteFast.h"
			],
			[
				"timelib",
				"avr\\libraries\\Time\\TimeLib.h"
			],
			[
				"o",
				"opencr\\libraries\\OLLO\\OLLO.cpp"
			],
			[
				"sound.h",
				"opencr\\libraries\\turtlebot3_ros_lib\\turtlebot3_msgs\\Sound.h"
			],
			[
				"sensorstatemsg",
				"turtlebot3_msgs\\msg\\SensorState.msg"
			],
			[
				"ollo",
				"opencr\\libraries\\OLLO\\OLLO.h"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 592.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 291.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
